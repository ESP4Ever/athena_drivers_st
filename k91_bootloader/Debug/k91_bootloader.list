
k91_bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089d0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000304  08008b60  08008b60  00018b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e64  08008e64  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08008e64  08008e64  00018e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e6c  08008e6c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e6c  08008e6c  00018e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e70  08008e70  00018e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08008e74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004778  20000078  08008eec  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200047f0  08008eec  000247f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022c69  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004462  00000000  00000000  00042d11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ad8  00000000  00000000  00047178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001978  00000000  00000000  00048c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023caf  00000000  00000000  0004a5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cf5a  00000000  00000000  0006e277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1c7e  00000000  00000000  0008b1d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015ce4f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007994  00000000  00000000  0015cea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008b48 	.word	0x08008b48

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08008b48 	.word	0x08008b48

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <GetSector>:
  * @brief  Gets the sector of a given address
  * @param  None
  * @retval The sector of a given address
  */
static uint32_t GetSector(uint32_t Address)
{
 8000568:	b480      	push	{r7}
 800056a:	b085      	sub	sp, #20
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 8000570:	2300      	movs	r3, #0
 8000572:	60fb      	str	r3, [r7, #12]

  if ((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0)) {
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	4a40      	ldr	r2, [pc, #256]	; (8000678 <GetSector+0x110>)
 8000578:	4293      	cmp	r3, r2
 800057a:	d206      	bcs.n	800058a <GetSector+0x22>
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000582:	d302      	bcc.n	800058a <GetSector+0x22>
    sector = FLASH_SECTOR_0;
 8000584:	2300      	movs	r3, #0
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	e06f      	b.n	800066a <GetSector+0x102>
  } else if ((Address < ADDR_FLASH_SECTOR_2)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	4a3b      	ldr	r2, [pc, #236]	; (800067c <GetSector+0x114>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d206      	bcs.n	80005a0 <GetSector+0x38>
             && (Address >= ADDR_FLASH_SECTOR_1)) {
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4a38      	ldr	r2, [pc, #224]	; (8000678 <GetSector+0x110>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d302      	bcc.n	80005a0 <GetSector+0x38>
    sector = FLASH_SECTOR_1;
 800059a:	2301      	movs	r3, #1
 800059c:	60fb      	str	r3, [r7, #12]
 800059e:	e064      	b.n	800066a <GetSector+0x102>
  } else if ((Address < ADDR_FLASH_SECTOR_3)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	4a37      	ldr	r2, [pc, #220]	; (8000680 <GetSector+0x118>)
 80005a4:	4293      	cmp	r3, r2
 80005a6:	d206      	bcs.n	80005b6 <GetSector+0x4e>
             && (Address >= ADDR_FLASH_SECTOR_2)) {
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	4a34      	ldr	r2, [pc, #208]	; (800067c <GetSector+0x114>)
 80005ac:	4293      	cmp	r3, r2
 80005ae:	d302      	bcc.n	80005b6 <GetSector+0x4e>
    sector = FLASH_SECTOR_2;
 80005b0:	2302      	movs	r3, #2
 80005b2:	60fb      	str	r3, [r7, #12]
 80005b4:	e059      	b.n	800066a <GetSector+0x102>
  } else if ((Address < ADDR_FLASH_SECTOR_4)
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	4a32      	ldr	r2, [pc, #200]	; (8000684 <GetSector+0x11c>)
 80005ba:	4293      	cmp	r3, r2
 80005bc:	d806      	bhi.n	80005cc <GetSector+0x64>
             && (Address >= ADDR_FLASH_SECTOR_3)) {
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	4a2f      	ldr	r2, [pc, #188]	; (8000680 <GetSector+0x118>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d302      	bcc.n	80005cc <GetSector+0x64>
    sector = FLASH_SECTOR_3;
 80005c6:	2303      	movs	r3, #3
 80005c8:	60fb      	str	r3, [r7, #12]
 80005ca:	e04e      	b.n	800066a <GetSector+0x102>
  } else if ((Address < ADDR_FLASH_SECTOR_5)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	4a2e      	ldr	r2, [pc, #184]	; (8000688 <GetSector+0x120>)
 80005d0:	4293      	cmp	r3, r2
 80005d2:	d806      	bhi.n	80005e2 <GetSector+0x7a>
             && (Address >= ADDR_FLASH_SECTOR_4)) {
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	4a2b      	ldr	r2, [pc, #172]	; (8000684 <GetSector+0x11c>)
 80005d8:	4293      	cmp	r3, r2
 80005da:	d902      	bls.n	80005e2 <GetSector+0x7a>
    sector = FLASH_SECTOR_4;
 80005dc:	2304      	movs	r3, #4
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	e043      	b.n	800066a <GetSector+0x102>
  } else if ((Address < ADDR_FLASH_SECTOR_6)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4a29      	ldr	r2, [pc, #164]	; (800068c <GetSector+0x124>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d806      	bhi.n	80005f8 <GetSector+0x90>
             && (Address >= ADDR_FLASH_SECTOR_5)) {
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4a26      	ldr	r2, [pc, #152]	; (8000688 <GetSector+0x120>)
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d902      	bls.n	80005f8 <GetSector+0x90>
    sector = FLASH_SECTOR_5;
 80005f2:	2305      	movs	r3, #5
 80005f4:	60fb      	str	r3, [r7, #12]
 80005f6:	e038      	b.n	800066a <GetSector+0x102>
  } else if ((Address < ADDR_FLASH_SECTOR_7)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	4a25      	ldr	r2, [pc, #148]	; (8000690 <GetSector+0x128>)
 80005fc:	4293      	cmp	r3, r2
 80005fe:	d806      	bhi.n	800060e <GetSector+0xa6>
             && (Address >= ADDR_FLASH_SECTOR_6)) {
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	4a22      	ldr	r2, [pc, #136]	; (800068c <GetSector+0x124>)
 8000604:	4293      	cmp	r3, r2
 8000606:	d902      	bls.n	800060e <GetSector+0xa6>
    sector = FLASH_SECTOR_6;
 8000608:	2306      	movs	r3, #6
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	e02d      	b.n	800066a <GetSector+0x102>
  } else if ((Address < ADDR_FLASH_SECTOR_8)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	4a20      	ldr	r2, [pc, #128]	; (8000694 <GetSector+0x12c>)
 8000612:	4293      	cmp	r3, r2
 8000614:	d806      	bhi.n	8000624 <GetSector+0xbc>
             && (Address >= ADDR_FLASH_SECTOR_7)) {
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	4a1d      	ldr	r2, [pc, #116]	; (8000690 <GetSector+0x128>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d902      	bls.n	8000624 <GetSector+0xbc>
    sector = FLASH_SECTOR_7;
 800061e:	2307      	movs	r3, #7
 8000620:	60fb      	str	r3, [r7, #12]
 8000622:	e022      	b.n	800066a <GetSector+0x102>
  } else if ((Address < ADDR_FLASH_SECTOR_9)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	4a1c      	ldr	r2, [pc, #112]	; (8000698 <GetSector+0x130>)
 8000628:	4293      	cmp	r3, r2
 800062a:	d806      	bhi.n	800063a <GetSector+0xd2>
             && (Address >= ADDR_FLASH_SECTOR_8)) {
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	4a19      	ldr	r2, [pc, #100]	; (8000694 <GetSector+0x12c>)
 8000630:	4293      	cmp	r3, r2
 8000632:	d902      	bls.n	800063a <GetSector+0xd2>
    sector = FLASH_SECTOR_8;
 8000634:	2308      	movs	r3, #8
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	e017      	b.n	800066a <GetSector+0x102>
  } else if ((Address < ADDR_FLASH_SECTOR_10)
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	4a17      	ldr	r2, [pc, #92]	; (800069c <GetSector+0x134>)
 800063e:	4293      	cmp	r3, r2
 8000640:	d806      	bhi.n	8000650 <GetSector+0xe8>
             && (Address >= ADDR_FLASH_SECTOR_9)) {
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4a14      	ldr	r2, [pc, #80]	; (8000698 <GetSector+0x130>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d902      	bls.n	8000650 <GetSector+0xe8>
    sector = FLASH_SECTOR_9;
 800064a:	2309      	movs	r3, #9
 800064c:	60fb      	str	r3, [r7, #12]
 800064e:	e00c      	b.n	800066a <GetSector+0x102>
  } else if ((Address < ADDR_FLASH_SECTOR_11)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	4a13      	ldr	r2, [pc, #76]	; (80006a0 <GetSector+0x138>)
 8000654:	4293      	cmp	r3, r2
 8000656:	d806      	bhi.n	8000666 <GetSector+0xfe>
             && (Address >= ADDR_FLASH_SECTOR_10)) {
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	4a10      	ldr	r2, [pc, #64]	; (800069c <GetSector+0x134>)
 800065c:	4293      	cmp	r3, r2
 800065e:	d902      	bls.n	8000666 <GetSector+0xfe>
    sector = FLASH_SECTOR_10;
 8000660:	230a      	movs	r3, #10
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	e001      	b.n	800066a <GetSector+0x102>
  } else {                      /* (Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_11) */
    sector = FLASH_SECTOR_11;
 8000666:	230b      	movs	r3, #11
 8000668:	60fb      	str	r3, [r7, #12]
  }

  return sector;
 800066a:	68fb      	ldr	r3, [r7, #12]
}
 800066c:	4618      	mov	r0, r3
 800066e:	3714      	adds	r7, #20
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	08004000 	.word	0x08004000
 800067c:	08008000 	.word	0x08008000
 8000680:	0800c000 	.word	0x0800c000
 8000684:	0800ffff 	.word	0x0800ffff
 8000688:	0801ffff 	.word	0x0801ffff
 800068c:	0803ffff 	.word	0x0803ffff
 8000690:	0805ffff 	.word	0x0805ffff
 8000694:	0807ffff 	.word	0x0807ffff
 8000698:	0809ffff 	.word	0x0809ffff
 800069c:	080bffff 	.word	0x080bffff
 80006a0:	080dffff 	.word	0x080dffff

080006a4 <flash_unlock>:
  }
  return sectorsize;
}

uint32_t flash_unlock(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef ret = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	71fb      	strb	r3, [r7, #7]
  ret = HAL_FLASH_Unlock();
 80006ae:	f002 fa6b 	bl	8002b88 <HAL_FLASH_Unlock>
 80006b2:	4603      	mov	r3, r0
 80006b4:	71fb      	strb	r3, [r7, #7]
  return ret;
 80006b6:	79fb      	ldrb	r3, [r7, #7]
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <flash_lock>:

uint32_t flash_lock(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef ret = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	71fb      	strb	r3, [r7, #7]
  ret = HAL_FLASH_Lock();
 80006ca:	f002 fa7f 	bl	8002bcc <HAL_FLASH_Lock>
 80006ce:	4603      	mov	r3, r0
 80006d0:	71fb      	strb	r3, [r7, #7]
  return ret;
 80006d2:	79fb      	ldrb	r3, [r7, #7]
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <flash_erase_by_sector>:

uint32_t flash_erase_by_sector(uint32_t start_address, uint8_t sector_num)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	460b      	mov	r3, r1
 80006e6:	70fb      	strb	r3, [r7, #3]
  uint32_t FirstSector = 0, NbOfSectors = 0, Address = 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
 80006ec:	2300      	movs	r3, #0
 80006ee:	613b      	str	r3, [r7, #16]
 80006f0:	2300      	movs	r3, #0
 80006f2:	60fb      	str	r3, [r7, #12]
  uint32_t SectorError = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	60bb      	str	r3, [r7, #8]

  /* Get the 1st sector to erase */
  FirstSector = GetSector(start_address);
 80006f8:	6878      	ldr	r0, [r7, #4]
 80006fa:	f7ff ff35 	bl	8000568 <GetSector>
 80006fe:	6178      	str	r0, [r7, #20]
  /* Get the number of sector to erase from 1st sector */
  NbOfSectors = sector_num;
 8000700:	78fb      	ldrb	r3, [r7, #3]
 8000702:	613b      	str	r3, [r7, #16]

  /* Fill EraseInit structure */
  EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000704:	4b0d      	ldr	r3, [pc, #52]	; (800073c <flash_erase_by_sector+0x60>)
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
  EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800070a:	4b0c      	ldr	r3, [pc, #48]	; (800073c <flash_erase_by_sector+0x60>)
 800070c:	2202      	movs	r2, #2
 800070e:	611a      	str	r2, [r3, #16]
  EraseInitStruct.Sector = FirstSector;
 8000710:	4a0a      	ldr	r2, [pc, #40]	; (800073c <flash_erase_by_sector+0x60>)
 8000712:	697b      	ldr	r3, [r7, #20]
 8000714:	6093      	str	r3, [r2, #8]
  EraseInitStruct.NbSectors = NbOfSectors;
 8000716:	4a09      	ldr	r2, [pc, #36]	; (800073c <flash_erase_by_sector+0x60>)
 8000718:	693b      	ldr	r3, [r7, #16]
 800071a:	60d3      	str	r3, [r2, #12]
  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) != HAL_OK) {
 800071c:	f107 0308 	add.w	r3, r7, #8
 8000720:	4619      	mov	r1, r3
 8000722:	4806      	ldr	r0, [pc, #24]	; (800073c <flash_erase_by_sector+0x60>)
 8000724:	f002 fb92 	bl	8002e4c <HAL_FLASHEx_Erase>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <flash_erase_by_sector+0x56>
       user can call function 'HAL_FLASH_GetError()'
     */
    /*
       FLASH_ErrorTypeDef errorcode = HAL_FLASH_GetError();
     */
    Error_Handler();
 800072e:	f000 ff5b 	bl	80015e8 <Error_Handler>
  }
}
 8000732:	bf00      	nop
 8000734:	4618      	mov	r0, r3
 8000736:	3718      	adds	r7, #24
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000094 	.word	0x20000094

08000740 <flash_program_by_word>:

uint32_t flash_program_by_word(uint32_t address, uint32_t data)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	6039      	str	r1, [r7, #0]
  if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data) == HAL_OK) {
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	461a      	mov	r2, r3
 800074e:	f04f 0300 	mov.w	r3, #0
 8000752:	6879      	ldr	r1, [r7, #4]
 8000754:	2002      	movs	r0, #2
 8000756:	f002 f9c3 	bl	8002ae0 <HAL_FLASH_Program>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d101      	bne.n	8000764 <flash_program_by_word+0x24>
    return HAL_OK;
 8000760:	2300      	movs	r3, #0
 8000762:	e002      	b.n	800076a <flash_program_by_word+0x2a>
    /* Error occurred while writing data in Flash memory.
       User can add here some code to deal with this error */
    /*
       FLASH_ErrorTypeDef errorcode = HAL_FLASH_GetError();
     */
    Error_Handler();
 8000764:	f000 ff40 	bl	80015e8 <Error_Handler>
    return HAL_ERROR;
 8000768:	2301      	movs	r3, #1
  }
}
 800076a:	4618      	mov	r0, r3
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
	...

08000774 <flash_set_bootup_sector>:
  flash_program_by_word(FLASH_OTAINFO_ADD + 8, temp_ota_info.updating_app_id);

}

void flash_set_bootup_sector(uint32_t boot_sector)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b086      	sub	sp, #24
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  otaInfo temp_ota_info = { 0 };
 800077c:	f107 030c 	add.w	r3, r7, #12
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]

  temp_ota_info.boot_mode = flashOtaInfo.boot_mode;
 8000788:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <flash_set_bootup_sector+0x6c>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	60fb      	str	r3, [r7, #12]
  temp_ota_info.using_app_id = flashOtaInfo.using_app_id;
 800078e:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <flash_set_bootup_sector+0x6c>)
 8000790:	685b      	ldr	r3, [r3, #4]
 8000792:	613b      	str	r3, [r7, #16]
  temp_ota_info.updating_app_id = flashOtaInfo.updating_app_id;
 8000794:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <flash_set_bootup_sector+0x6c>)
 8000796:	689b      	ldr	r3, [r3, #8]
 8000798:	617b      	str	r3, [r7, #20]

  if (boot_sector == 0) {
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d104      	bne.n	80007aa <flash_set_bootup_sector+0x36>
    temp_ota_info.using_app_id = 0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	613b      	str	r3, [r7, #16]
    temp_ota_info.updating_app_id = 1;
 80007a4:	2301      	movs	r3, #1
 80007a6:	617b      	str	r3, [r7, #20]
 80007a8:	e003      	b.n	80007b2 <flash_set_bootup_sector+0x3e>

    //call flash ram api to change using_app_id to 1
    //call flash ram api to change updating_app_id to 0
  } else {
    temp_ota_info.using_app_id = 1;
 80007aa:	2301      	movs	r3, #1
 80007ac:	613b      	str	r3, [r7, #16]
    temp_ota_info.updating_app_id = 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	617b      	str	r3, [r7, #20]

    //call flash ram api to change using_app_id to 0
    //call flash ram api to change updating_app_id to 1
  }

  flash_erase_by_sector(FLASH_OTAINFO_ADD, 1);
 80007b2:	2101      	movs	r1, #1
 80007b4:	480a      	ldr	r0, [pc, #40]	; (80007e0 <flash_set_bootup_sector+0x6c>)
 80007b6:	f7ff ff91 	bl	80006dc <flash_erase_by_sector>
  flash_program_by_word(FLASH_OTAINFO_ADD, temp_ota_info.boot_mode);
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	4619      	mov	r1, r3
 80007be:	4808      	ldr	r0, [pc, #32]	; (80007e0 <flash_set_bootup_sector+0x6c>)
 80007c0:	f7ff ffbe 	bl	8000740 <flash_program_by_word>
  flash_program_by_word(FLASH_OTAINFO_ADD + 4, temp_ota_info.using_app_id);
 80007c4:	693b      	ldr	r3, [r7, #16]
 80007c6:	4619      	mov	r1, r3
 80007c8:	4806      	ldr	r0, [pc, #24]	; (80007e4 <flash_set_bootup_sector+0x70>)
 80007ca:	f7ff ffb9 	bl	8000740 <flash_program_by_word>
  flash_program_by_word(FLASH_OTAINFO_ADD + 8, temp_ota_info.updating_app_id);
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	4619      	mov	r1, r3
 80007d2:	4805      	ldr	r0, [pc, #20]	; (80007e8 <flash_set_bootup_sector+0x74>)
 80007d4:	f7ff ffb4 	bl	8000740 <flash_program_by_word>
}
 80007d8:	bf00      	nop
 80007da:	3718      	adds	r7, #24
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	08010000 	.word	0x08010000
 80007e4:	08010004 	.word	0x08010004
 80007e8:	08010008 	.word	0x08010008

080007ec <flash_clear_boot_magic_number>:
  flash_program_by_word(FLASH_OTAINFO_ADD + 8, temp_ota_info.updating_app_id);

}

void flash_clear_boot_magic_number(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
  otaInfo temp_ota_info = { 0 };
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]

  temp_ota_info.boot_mode = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	607b      	str	r3, [r7, #4]
  temp_ota_info.using_app_id = flashOtaInfo.using_app_id;
 8000800:	4b0e      	ldr	r3, [pc, #56]	; (800083c <flash_clear_boot_magic_number+0x50>)
 8000802:	685b      	ldr	r3, [r3, #4]
 8000804:	60bb      	str	r3, [r7, #8]
  temp_ota_info.updating_app_id = flashOtaInfo.updating_app_id;
 8000806:	4b0d      	ldr	r3, [pc, #52]	; (800083c <flash_clear_boot_magic_number+0x50>)
 8000808:	689b      	ldr	r3, [r3, #8]
 800080a:	60fb      	str	r3, [r7, #12]

  flash_erase_by_sector(FLASH_OTAINFO_ADD, 1);
 800080c:	2101      	movs	r1, #1
 800080e:	480b      	ldr	r0, [pc, #44]	; (800083c <flash_clear_boot_magic_number+0x50>)
 8000810:	f7ff ff64 	bl	80006dc <flash_erase_by_sector>

  flash_program_by_word(FLASH_OTAINFO_ADD, temp_ota_info.boot_mode);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	4619      	mov	r1, r3
 8000818:	4808      	ldr	r0, [pc, #32]	; (800083c <flash_clear_boot_magic_number+0x50>)
 800081a:	f7ff ff91 	bl	8000740 <flash_program_by_word>
  flash_program_by_word(FLASH_OTAINFO_ADD + 4, temp_ota_info.using_app_id);
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	4619      	mov	r1, r3
 8000822:	4807      	ldr	r0, [pc, #28]	; (8000840 <flash_clear_boot_magic_number+0x54>)
 8000824:	f7ff ff8c 	bl	8000740 <flash_program_by_word>
  flash_program_by_word(FLASH_OTAINFO_ADD + 8, temp_ota_info.updating_app_id);
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	4619      	mov	r1, r3
 800082c:	4805      	ldr	r0, [pc, #20]	; (8000844 <flash_clear_boot_magic_number+0x58>)
 800082e:	f7ff ff87 	bl	8000740 <flash_program_by_word>
}
 8000832:	bf00      	nop
 8000834:	3710      	adds	r7, #16
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	08010000 	.word	0x08010000
 8000840:	08010004 	.word	0x08010004
 8000844:	08010008 	.word	0x08010008

08000848 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800084c:	f3bf 8f4f 	dsb	sy
}
 8000850:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <__NVIC_SystemReset+0x24>)
 8000854:	68db      	ldr	r3, [r3, #12]
 8000856:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800085a:	4904      	ldr	r1, [pc, #16]	; (800086c <__NVIC_SystemReset+0x24>)
 800085c:	4b04      	ldr	r3, [pc, #16]	; (8000870 <__NVIC_SystemReset+0x28>)
 800085e:	4313      	orrs	r3, r2
 8000860:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000862:	f3bf 8f4f 	dsb	sy
}
 8000866:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000868:	bf00      	nop
 800086a:	e7fd      	b.n	8000868 <__NVIC_SystemReset+0x20>
 800086c:	e000ed00 	.word	0xe000ed00
 8000870:	05fa0004 	.word	0x05fa0004

08000874 <Get_BoardID>:
void start_boot(uint32_t boot_info);

uint8_t boardID = 0xFF;

void Get_BoardID()
{
 8000874:	b598      	push	{r3, r4, r7, lr}
 8000876:	af00      	add	r7, sp, #0
  boardID =
      (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) << 1) | HAL_GPIO_ReadPin(GPIOB,
 8000878:	2101      	movs	r1, #1
 800087a:	4809      	ldr	r0, [pc, #36]	; (80008a0 <Get_BoardID+0x2c>)
 800087c:	f002 fda4 	bl	80033c8 <HAL_GPIO_ReadPin>
 8000880:	4603      	mov	r3, r0
 8000882:	005b      	lsls	r3, r3, #1
 8000884:	b25c      	sxtb	r4, r3
 8000886:	2102      	movs	r1, #2
 8000888:	4805      	ldr	r0, [pc, #20]	; (80008a0 <Get_BoardID+0x2c>)
 800088a:	f002 fd9d 	bl	80033c8 <HAL_GPIO_ReadPin>
 800088e:	4603      	mov	r3, r0
 8000890:	b25b      	sxtb	r3, r3
 8000892:	4323      	orrs	r3, r4
 8000894:	b25b      	sxtb	r3, r3
 8000896:	b2da      	uxtb	r2, r3
  boardID =
 8000898:	4b02      	ldr	r3, [pc, #8]	; (80008a4 <Get_BoardID+0x30>)
 800089a:	701a      	strb	r2, [r3, #0]
                                                                    GPIO_PIN_1);
}
 800089c:	bf00      	nop
 800089e:	bd98      	pop	{r3, r4, r7, pc}
 80008a0:	40020400 	.word	0x40020400
 80008a4:	20000000 	.word	0x20000000

080008a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  if (flashOtaInfo.boot_mode != RAM_MAGIC_WORD) {
 80008ac:	4b37      	ldr	r3, [pc, #220]	; (800098c <main+0xe4>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f648 12ab 	movw	r2, #35243	; 0x89ab
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d004      	beq.n	80008c2 <main+0x1a>
    start_boot(flashOtaInfo.using_app_id);
 80008b8:	4b34      	ldr	r3, [pc, #208]	; (800098c <main+0xe4>)
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	4618      	mov	r0, r3
 80008be:	f000 fb17 	bl	8000ef0 <start_boot>
  /* USER CODE END 1 */

  /* MCU Configuration-------------------------------------------------------- */

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c2:	f001 f987 	bl	8001bd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c6:	f000 f893 	bl	80009f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ca:	f000 fa33 	bl	8000d34 <MX_GPIO_Init>
  MX_CAN1_Init();
 80008ce:	f000 f8f9 	bl	8000ac4 <MX_CAN1_Init>
  MX_CAN2_Init();
 80008d2:	f000 f967 	bl	8000ba4 <MX_CAN2_Init>
  MX_USART2_UART_Init();
 80008d6:	f000 fa03 	bl	8000ce0 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 80008da:	f000 f9d3 	bl	8000c84 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  Get_BoardID();
 80008de:	f7ff ffc9 	bl	8000874 <Get_BoardID>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80008e2:	f004 fa61 	bl	8004da8 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* Create the queue(s) */
  /* creation of Can1BroadcastQ */
  Can1BroadcastQHandle = osMessageQueueNew(16, sizeof(can_message_event_t),
 80008e6:	4a2a      	ldr	r2, [pc, #168]	; (8000990 <main+0xe8>)
 80008e8:	2124      	movs	r1, #36	; 0x24
 80008ea:	2010      	movs	r0, #16
 80008ec:	f004 fb53 	bl	8004f96 <osMessageQueueNew>
 80008f0:	4603      	mov	r3, r0
 80008f2:	4a28      	ldr	r2, [pc, #160]	; (8000994 <main+0xec>)
 80008f4:	6013      	str	r3, [r2, #0]
                                           &Can1BroadcastQ_attributes);

  /* creation of Can1ReceiveQ */
  Can1ReceiveQHandle = osMessageQueueNew(16, sizeof(can_message_event_t),
 80008f6:	4a28      	ldr	r2, [pc, #160]	; (8000998 <main+0xf0>)
 80008f8:	2124      	movs	r1, #36	; 0x24
 80008fa:	2010      	movs	r0, #16
 80008fc:	f004 fb4b 	bl	8004f96 <osMessageQueueNew>
 8000900:	4603      	mov	r3, r0
 8000902:	4a26      	ldr	r2, [pc, #152]	; (800099c <main+0xf4>)
 8000904:	6013      	str	r3, [r2, #0]
                                         &Can1ReceiveQ_attributes);

  /* creation of Can2BroadcastQ */
  Can2BroadcastQHandle = osMessageQueueNew(16, sizeof(can_message_event_t),
 8000906:	4a26      	ldr	r2, [pc, #152]	; (80009a0 <main+0xf8>)
 8000908:	2124      	movs	r1, #36	; 0x24
 800090a:	2010      	movs	r0, #16
 800090c:	f004 fb43 	bl	8004f96 <osMessageQueueNew>
 8000910:	4603      	mov	r3, r0
 8000912:	4a24      	ldr	r2, [pc, #144]	; (80009a4 <main+0xfc>)
 8000914:	6013      	str	r3, [r2, #0]
                                           &Can2BroadcastQ_attributes);

  /* creation of Can2ReceiveQ */
  Can2ReceiveQHandle = osMessageQueueNew(16, sizeof(can_message_event_t),
 8000916:	4a24      	ldr	r2, [pc, #144]	; (80009a8 <main+0x100>)
 8000918:	2124      	movs	r1, #36	; 0x24
 800091a:	2010      	movs	r0, #16
 800091c:	f004 fb3b 	bl	8004f96 <osMessageQueueNew>
 8000920:	4603      	mov	r3, r0
 8000922:	4a22      	ldr	r2, [pc, #136]	; (80009ac <main+0x104>)
 8000924:	6013      	str	r3, [r2, #0]
                                         &Can2ReceiveQ_attributes);

  BootStartQHandle = osMessageQueueNew(8, sizeof(uint8_t), &BootStartQHandle);
 8000926:	4a22      	ldr	r2, [pc, #136]	; (80009b0 <main+0x108>)
 8000928:	2101      	movs	r1, #1
 800092a:	2008      	movs	r0, #8
 800092c:	f004 fb33 	bl	8004f96 <osMessageQueueNew>
 8000930:	4603      	mov	r3, r0
 8000932:	4a1f      	ldr	r2, [pc, #124]	; (80009b0 <main+0x108>)
 8000934:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* Create the thread(s) */
  /* creation of Can1Broadcast */
  Can1BroadcastHandle = osThreadNew(StartCan1BroadcastTask, NULL,
 8000936:	4a1f      	ldr	r2, [pc, #124]	; (80009b4 <main+0x10c>)
 8000938:	2100      	movs	r1, #0
 800093a:	481f      	ldr	r0, [pc, #124]	; (80009b8 <main+0x110>)
 800093c:	f004 fa7e 	bl	8004e3c <osThreadNew>
 8000940:	4603      	mov	r3, r0
 8000942:	4a1e      	ldr	r2, [pc, #120]	; (80009bc <main+0x114>)
 8000944:	6013      	str	r3, [r2, #0]
                                    &Can1Broadcast_attributes);

  /* creation of Can1Receive */
  Can1ReceiveHandle = osThreadNew(StartCan1ReceiveTask, NULL,
 8000946:	4a1e      	ldr	r2, [pc, #120]	; (80009c0 <main+0x118>)
 8000948:	2100      	movs	r1, #0
 800094a:	481e      	ldr	r0, [pc, #120]	; (80009c4 <main+0x11c>)
 800094c:	f004 fa76 	bl	8004e3c <osThreadNew>
 8000950:	4603      	mov	r3, r0
 8000952:	4a1d      	ldr	r2, [pc, #116]	; (80009c8 <main+0x120>)
 8000954:	6013      	str	r3, [r2, #0]
                                  &Can1Receive_attributes);

  /* creation of Can2Broadcast */
  Can2BroadcastHandle = osThreadNew(StartCan2BroadcastTask, NULL,
 8000956:	4a1d      	ldr	r2, [pc, #116]	; (80009cc <main+0x124>)
 8000958:	2100      	movs	r1, #0
 800095a:	481d      	ldr	r0, [pc, #116]	; (80009d0 <main+0x128>)
 800095c:	f004 fa6e 	bl	8004e3c <osThreadNew>
 8000960:	4603      	mov	r3, r0
 8000962:	4a1c      	ldr	r2, [pc, #112]	; (80009d4 <main+0x12c>)
 8000964:	6013      	str	r3, [r2, #0]
                                    &Can2Broadcast_attributes);

  /* creation of Can2Receive */
  Can2ReceiveHandle = osThreadNew(StartCan2ReceiveTask, NULL,
 8000966:	4a1c      	ldr	r2, [pc, #112]	; (80009d8 <main+0x130>)
 8000968:	2100      	movs	r1, #0
 800096a:	481c      	ldr	r0, [pc, #112]	; (80009dc <main+0x134>)
 800096c:	f004 fa66 	bl	8004e3c <osThreadNew>
 8000970:	4603      	mov	r3, r0
 8000972:	4a1b      	ldr	r2, [pc, #108]	; (80009e0 <main+0x138>)
 8000974:	6013      	str	r3, [r2, #0]
                                  &Can2Receive_attributes);

  OtaTaskHandle = osThreadNew(StartOTATask, NULL, &OtaTask_attributes);
 8000976:	4a1b      	ldr	r2, [pc, #108]	; (80009e4 <main+0x13c>)
 8000978:	2100      	movs	r1, #0
 800097a:	481b      	ldr	r0, [pc, #108]	; (80009e8 <main+0x140>)
 800097c:	f004 fa5e 	bl	8004e3c <osThreadNew>
 8000980:	4603      	mov	r3, r0
 8000982:	4a1a      	ldr	r2, [pc, #104]	; (80009ec <main+0x144>)
 8000984:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000986:	f004 fa33 	bl	8004df0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 800098a:	e7fe      	b.n	800098a <main+0xe2>
 800098c:	08010000 	.word	0x08010000
 8000990:	08008d0c 	.word	0x08008d0c
 8000994:	200046b8 	.word	0x200046b8
 8000998:	08008d24 	.word	0x08008d24
 800099c:	200045d4 	.word	0x200045d4
 80009a0:	08008d84 	.word	0x08008d84
 80009a4:	200045d8 	.word	0x200045d8
 80009a8:	08008d9c 	.word	0x08008d9c
 80009ac:	20004700 	.word	0x20004700
 80009b0:	2000468c 	.word	0x2000468c
 80009b4:	08008cc4 	.word	0x08008cc4
 80009b8:	0800105d 	.word	0x0800105d
 80009bc:	2000472c 	.word	0x2000472c
 80009c0:	08008ce8 	.word	0x08008ce8
 80009c4:	080010cd 	.word	0x080010cd
 80009c8:	20004634 	.word	0x20004634
 80009cc:	08008d3c 	.word	0x08008d3c
 80009d0:	080014cd 	.word	0x080014cd
 80009d4:	20004688 	.word	0x20004688
 80009d8:	08008d60 	.word	0x08008d60
 80009dc:	0800153d 	.word	0x0800153d
 80009e0:	20004730 	.word	0x20004730
 80009e4:	08008ca0 	.word	0x08008ca0
 80009e8:	08001039 	.word	0x08001039
 80009ec:	20004630 	.word	0x20004630

080009f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b094      	sub	sp, #80	; 0x50
 80009f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80009f6:	f107 0320 	add.w	r3, r7, #32
 80009fa:	2230      	movs	r2, #48	; 0x30
 80009fc:	2100      	movs	r1, #0
 80009fe:	4618      	mov	r0, r3
 8000a00:	f007 f944 	bl	8007c8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000a04:	f107 030c 	add.w	r3, r7, #12
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a14:	2300      	movs	r3, #0
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	4b28      	ldr	r3, [pc, #160]	; (8000abc <SystemClock_Config+0xcc>)
 8000a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1c:	4a27      	ldr	r2, [pc, #156]	; (8000abc <SystemClock_Config+0xcc>)
 8000a1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a22:	6413      	str	r3, [r2, #64]	; 0x40
 8000a24:	4b25      	ldr	r3, [pc, #148]	; (8000abc <SystemClock_Config+0xcc>)
 8000a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a2c:	60bb      	str	r3, [r7, #8]
 8000a2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a30:	2300      	movs	r3, #0
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	4b22      	ldr	r3, [pc, #136]	; (8000ac0 <SystemClock_Config+0xd0>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a21      	ldr	r2, [pc, #132]	; (8000ac0 <SystemClock_Config+0xd0>)
 8000a3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a3e:	6013      	str	r3, [r2, #0]
 8000a40:	4b1f      	ldr	r3, [pc, #124]	; (8000ac0 <SystemClock_Config+0xd0>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a48:	607b      	str	r3, [r7, #4]
 8000a4a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a56:	2302      	movs	r3, #2
 8000a58:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a60:	2308      	movs	r3, #8
 8000a62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000a64:	23a0      	movs	r3, #160	; 0xa0
 8000a66:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a6c:	2304      	movs	r3, #4
 8000a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000a70:	f107 0320 	add.w	r3, r7, #32
 8000a74:	4618      	mov	r0, r3
 8000a76:	f002 fe41 	bl	80036fc <HAL_RCC_OscConfig>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <SystemClock_Config+0x94>
    Error_Handler();
 8000a80:	f000 fdb2 	bl	80015e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8000a84:	230f      	movs	r3, #15
 8000a86:	60fb      	str	r3, [r7, #12]
      RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a90:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a9a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000a9c:	f107 030c 	add.w	r3, r7, #12
 8000aa0:	2105      	movs	r1, #5
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f003 f8a2 	bl	8003bec <HAL_RCC_ClockConfig>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <SystemClock_Config+0xc2>
    Error_Handler();
 8000aae:	f000 fd9b 	bl	80015e8 <Error_Handler>
  }
}
 8000ab2:	bf00      	nop
 8000ab4:	3750      	adds	r7, #80	; 0x50
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40007000 	.word	0x40007000

08000ac4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000ac8:	4b33      	ldr	r3, [pc, #204]	; (8000b98 <MX_CAN1_Init+0xd4>)
 8000aca:	4a34      	ldr	r2, [pc, #208]	; (8000b9c <MX_CAN1_Init+0xd8>)
 8000acc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 8000ace:	4b32      	ldr	r3, [pc, #200]	; (8000b98 <MX_CAN1_Init+0xd4>)
 8000ad0:	2204      	movs	r2, #4
 8000ad2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000ad4:	4b30      	ldr	r3, [pc, #192]	; (8000b98 <MX_CAN1_Init+0xd4>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ada:	4b2f      	ldr	r3, [pc, #188]	; (8000b98 <MX_CAN1_Init+0xd4>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000ae0:	4b2d      	ldr	r3, [pc, #180]	; (8000b98 <MX_CAN1_Init+0xd4>)
 8000ae2:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8000ae6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000ae8:	4b2b      	ldr	r3, [pc, #172]	; (8000b98 <MX_CAN1_Init+0xd4>)
 8000aea:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000aee:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000af0:	4b29      	ldr	r3, [pc, #164]	; (8000b98 <MX_CAN1_Init+0xd4>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000af6:	4b28      	ldr	r3, [pc, #160]	; (8000b98 <MX_CAN1_Init+0xd4>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000afc:	4b26      	ldr	r3, [pc, #152]	; (8000b98 <MX_CAN1_Init+0xd4>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000b02:	4b25      	ldr	r3, [pc, #148]	; (8000b98 <MX_CAN1_Init+0xd4>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000b08:	4b23      	ldr	r3, [pc, #140]	; (8000b98 <MX_CAN1_Init+0xd4>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000b0e:	4b22      	ldr	r3, [pc, #136]	; (8000b98 <MX_CAN1_Init+0xd4>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 8000b14:	4820      	ldr	r0, [pc, #128]	; (8000b98 <MX_CAN1_Init+0xd4>)
 8000b16:	f001 f89f 	bl	8001c58 <HAL_CAN_Init>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_CAN1_Init+0x60>
    Error_Handler();
 8000b20:	f000 fd62 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  /*##-2- Configure the CAN1 Filter ########################################### */
  sCan1FilterConfig.FilterBank = 0;
 8000b24:	4b1e      	ldr	r3, [pc, #120]	; (8000ba0 <MX_CAN1_Init+0xdc>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	615a      	str	r2, [r3, #20]
  sCan1FilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000b2a:	4b1d      	ldr	r3, [pc, #116]	; (8000ba0 <MX_CAN1_Init+0xdc>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	619a      	str	r2, [r3, #24]
  sCan1FilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000b30:	4b1b      	ldr	r3, [pc, #108]	; (8000ba0 <MX_CAN1_Init+0xdc>)
 8000b32:	2201      	movs	r2, #1
 8000b34:	61da      	str	r2, [r3, #28]
  sCan1FilterConfig.FilterIdHigh = 0x0000;
 8000b36:	4b1a      	ldr	r3, [pc, #104]	; (8000ba0 <MX_CAN1_Init+0xdc>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
  sCan1FilterConfig.FilterIdLow = 0x0000;
 8000b3c:	4b18      	ldr	r3, [pc, #96]	; (8000ba0 <MX_CAN1_Init+0xdc>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	605a      	str	r2, [r3, #4]
  sCan1FilterConfig.FilterMaskIdHigh = 0x0000;
 8000b42:	4b17      	ldr	r3, [pc, #92]	; (8000ba0 <MX_CAN1_Init+0xdc>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]
  sCan1FilterConfig.FilterMaskIdLow = 0x0000;
 8000b48:	4b15      	ldr	r3, [pc, #84]	; (8000ba0 <MX_CAN1_Init+0xdc>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	60da      	str	r2, [r3, #12]
  sCan1FilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000b4e:	4b14      	ldr	r3, [pc, #80]	; (8000ba0 <MX_CAN1_Init+0xdc>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	611a      	str	r2, [r3, #16]
  sCan1FilterConfig.FilterActivation = ENABLE;
 8000b54:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <MX_CAN1_Init+0xdc>)
 8000b56:	2201      	movs	r2, #1
 8000b58:	621a      	str	r2, [r3, #32]
  sCan1FilterConfig.SlaveStartFilterBank = 14;
 8000b5a:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <MX_CAN1_Init+0xdc>)
 8000b5c:	220e      	movs	r2, #14
 8000b5e:	625a      	str	r2, [r3, #36]	; 0x24

  if (HAL_CAN_ConfigFilter(&hcan1, &sCan1FilterConfig) != HAL_OK) {
 8000b60:	490f      	ldr	r1, [pc, #60]	; (8000ba0 <MX_CAN1_Init+0xdc>)
 8000b62:	480d      	ldr	r0, [pc, #52]	; (8000b98 <MX_CAN1_Init+0xd4>)
 8000b64:	f001 f974 	bl	8001e50 <HAL_CAN_ConfigFilter>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_CAN1_Init+0xae>
    /* Filter configuration Error */
    Error_Handler();
 8000b6e:	f000 fd3b 	bl	80015e8 <Error_Handler>
  }

  /*##-3- Start the CAN peripheral ########################################### */
  if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8000b72:	4809      	ldr	r0, [pc, #36]	; (8000b98 <MX_CAN1_Init+0xd4>)
 8000b74:	f001 fa4c 	bl	8002010 <HAL_CAN_Start>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_CAN1_Init+0xbe>
    /* Start Error */
    Error_Handler();
 8000b7e:	f000 fd33 	bl	80015e8 <Error_Handler>
  }

  /*##-4- Activate CAN RX notification ####################################### */
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) !=
 8000b82:	2102      	movs	r1, #2
 8000b84:	4804      	ldr	r0, [pc, #16]	; (8000b98 <MX_CAN1_Init+0xd4>)
 8000b86:	f001 fc74 	bl	8002472 <HAL_CAN_ActivateNotification>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_CAN1_Init+0xd0>
      HAL_OK) {
    /* Notification Error */
    Error_Handler();
 8000b90:	f000 fd2a 	bl	80015e8 <Error_Handler>
  }

  /* USER CODE END CAN1_Init 2 */

}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20004704 	.word	0x20004704
 8000b9c:	40006400 	.word	0x40006400
 8000ba0:	20004690 	.word	0x20004690

08000ba4 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000ba8:	4b33      	ldr	r3, [pc, #204]	; (8000c78 <MX_CAN2_Init+0xd4>)
 8000baa:	4a34      	ldr	r2, [pc, #208]	; (8000c7c <MX_CAN2_Init+0xd8>)
 8000bac:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 4;
 8000bae:	4b32      	ldr	r3, [pc, #200]	; (8000c78 <MX_CAN2_Init+0xd4>)
 8000bb0:	2204      	movs	r2, #4
 8000bb2:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000bb4:	4b30      	ldr	r3, [pc, #192]	; (8000c78 <MX_CAN2_Init+0xd4>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000bba:	4b2f      	ldr	r3, [pc, #188]	; (8000c78 <MX_CAN2_Init+0xd4>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000bc0:	4b2d      	ldr	r3, [pc, #180]	; (8000c78 <MX_CAN2_Init+0xd4>)
 8000bc2:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8000bc6:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000bc8:	4b2b      	ldr	r3, [pc, #172]	; (8000c78 <MX_CAN2_Init+0xd4>)
 8000bca:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000bce:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000bd0:	4b29      	ldr	r3, [pc, #164]	; (8000c78 <MX_CAN2_Init+0xd4>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000bd6:	4b28      	ldr	r3, [pc, #160]	; (8000c78 <MX_CAN2_Init+0xd4>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000bdc:	4b26      	ldr	r3, [pc, #152]	; (8000c78 <MX_CAN2_Init+0xd4>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000be2:	4b25      	ldr	r3, [pc, #148]	; (8000c78 <MX_CAN2_Init+0xd4>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000be8:	4b23      	ldr	r3, [pc, #140]	; (8000c78 <MX_CAN2_Init+0xd4>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000bee:	4b22      	ldr	r3, [pc, #136]	; (8000c78 <MX_CAN2_Init+0xd4>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK) {
 8000bf4:	4820      	ldr	r0, [pc, #128]	; (8000c78 <MX_CAN2_Init+0xd4>)
 8000bf6:	f001 f82f 	bl	8001c58 <HAL_CAN_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_CAN2_Init+0x60>
    Error_Handler();
 8000c00:	f000 fcf2 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */
  /*##-2- Configure the CAN1 Filter ########################################### */
  sCan2FilterConfig.FilterBank = 14;
 8000c04:	4b1e      	ldr	r3, [pc, #120]	; (8000c80 <MX_CAN2_Init+0xdc>)
 8000c06:	220e      	movs	r2, #14
 8000c08:	615a      	str	r2, [r3, #20]
  sCan2FilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000c0a:	4b1d      	ldr	r3, [pc, #116]	; (8000c80 <MX_CAN2_Init+0xdc>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	619a      	str	r2, [r3, #24]
  sCan2FilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000c10:	4b1b      	ldr	r3, [pc, #108]	; (8000c80 <MX_CAN2_Init+0xdc>)
 8000c12:	2201      	movs	r2, #1
 8000c14:	61da      	str	r2, [r3, #28]
  sCan2FilterConfig.FilterIdHigh = 0x0000;
 8000c16:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <MX_CAN2_Init+0xdc>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
  sCan2FilterConfig.FilterIdLow = 0x0000;
 8000c1c:	4b18      	ldr	r3, [pc, #96]	; (8000c80 <MX_CAN2_Init+0xdc>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	605a      	str	r2, [r3, #4]
  sCan2FilterConfig.FilterMaskIdHigh = 0x0000;
 8000c22:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <MX_CAN2_Init+0xdc>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	609a      	str	r2, [r3, #8]
  sCan2FilterConfig.FilterMaskIdLow = 0x0000;
 8000c28:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <MX_CAN2_Init+0xdc>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	60da      	str	r2, [r3, #12]
  sCan2FilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000c2e:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <MX_CAN2_Init+0xdc>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	611a      	str	r2, [r3, #16]
  sCan2FilterConfig.FilterActivation = ENABLE;
 8000c34:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <MX_CAN2_Init+0xdc>)
 8000c36:	2201      	movs	r2, #1
 8000c38:	621a      	str	r2, [r3, #32]
  sCan2FilterConfig.SlaveStartFilterBank = 14;
 8000c3a:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <MX_CAN2_Init+0xdc>)
 8000c3c:	220e      	movs	r2, #14
 8000c3e:	625a      	str	r2, [r3, #36]	; 0x24

  if (HAL_CAN_ConfigFilter(&hcan2, &sCan2FilterConfig) != HAL_OK) {
 8000c40:	490f      	ldr	r1, [pc, #60]	; (8000c80 <MX_CAN2_Init+0xdc>)
 8000c42:	480d      	ldr	r0, [pc, #52]	; (8000c78 <MX_CAN2_Init+0xd4>)
 8000c44:	f001 f904 	bl	8001e50 <HAL_CAN_ConfigFilter>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_CAN2_Init+0xae>
    /* Filter configuration Error */
    Error_Handler();
 8000c4e:	f000 fccb 	bl	80015e8 <Error_Handler>
  }

  /*##-3- Start the CAN peripheral ########################################### */
  if (HAL_CAN_Start(&hcan2) != HAL_OK) {
 8000c52:	4809      	ldr	r0, [pc, #36]	; (8000c78 <MX_CAN2_Init+0xd4>)
 8000c54:	f001 f9dc 	bl	8002010 <HAL_CAN_Start>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_CAN2_Init+0xbe>
    /* Start Error */
    Error_Handler();
 8000c5e:	f000 fcc3 	bl	80015e8 <Error_Handler>
  }

  /*##-4- Activate CAN RX notification ####################################### */
  if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING) !=
 8000c62:	2102      	movs	r1, #2
 8000c64:	4804      	ldr	r0, [pc, #16]	; (8000c78 <MX_CAN2_Init+0xd4>)
 8000c66:	f001 fc04 	bl	8002472 <HAL_CAN_ActivateNotification>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_CAN2_Init+0xd0>
      HAL_OK) {
    /* Notification Error */
    Error_Handler();
 8000c70:	f000 fcba 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE END CAN2_Init 2 */

}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20004660 	.word	0x20004660
 8000c7c:	40006800 	.word	0x40006800
 8000c80:	20004638 	.word	0x20004638

08000c84 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c88:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <MX_I2C2_Init+0x50>)
 8000c8a:	4a13      	ldr	r2, [pc, #76]	; (8000cd8 <MX_I2C2_Init+0x54>)
 8000c8c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000c8e:	4b11      	ldr	r3, [pc, #68]	; (8000cd4 <MX_I2C2_Init+0x50>)
 8000c90:	4a12      	ldr	r2, [pc, #72]	; (8000cdc <MX_I2C2_Init+0x58>)
 8000c92:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c94:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <MX_I2C2_Init+0x50>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000c9a:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <MX_I2C2_Init+0x50>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ca0:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <MX_I2C2_Init+0x50>)
 8000ca2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ca6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ca8:	4b0a      	ldr	r3, [pc, #40]	; (8000cd4 <MX_I2C2_Init+0x50>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000cae:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <MX_I2C2_Init+0x50>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cb4:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <MX_I2C2_Init+0x50>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <MX_I2C2_Init+0x50>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8000cc0:	4804      	ldr	r0, [pc, #16]	; (8000cd4 <MX_I2C2_Init+0x50>)
 8000cc2:	f002 fbd7 	bl	8003474 <HAL_I2C_Init>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_I2C2_Init+0x4c>
    Error_Handler();
 8000ccc:	f000 fc8c 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	200045dc 	.word	0x200045dc
 8000cd8:	40005800 	.word	0x40005800
 8000cdc:	00061a80 	.word	0x00061a80

08000ce0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ce4:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <MX_USART2_UART_Init+0x4c>)
 8000ce6:	4a12      	ldr	r2, [pc, #72]	; (8000d30 <MX_USART2_UART_Init+0x50>)
 8000ce8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cea:	4b10      	ldr	r3, [pc, #64]	; (8000d2c <MX_USART2_UART_Init+0x4c>)
 8000cec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cf0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <MX_USART2_UART_Init+0x4c>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <MX_USART2_UART_Init+0x4c>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cfe:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <MX_USART2_UART_Init+0x4c>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d04:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <MX_USART2_UART_Init+0x4c>)
 8000d06:	220c      	movs	r2, #12
 8000d08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d0a:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <MX_USART2_UART_Init+0x4c>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <MX_USART2_UART_Init+0x4c>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000d16:	4805      	ldr	r0, [pc, #20]	; (8000d2c <MX_USART2_UART_Init+0x4c>)
 8000d18:	f003 fd10 	bl	800473c <HAL_UART_Init>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_USART2_UART_Init+0x46>
    Error_Handler();
 8000d22:	f000 fc61 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	200046bc 	.word	0x200046bc
 8000d30:	40004400 	.word	0x40004400

08000d34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08a      	sub	sp, #40	; 0x28
 8000d38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000d3a:	f107 0314 	add.w	r3, r7, #20
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	609a      	str	r2, [r3, #8]
 8000d46:	60da      	str	r2, [r3, #12]
 8000d48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	613b      	str	r3, [r7, #16]
 8000d4e:	4b34      	ldr	r3, [pc, #208]	; (8000e20 <MX_GPIO_Init+0xec>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	4a33      	ldr	r2, [pc, #204]	; (8000e20 <MX_GPIO_Init+0xec>)
 8000d54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d58:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5a:	4b31      	ldr	r3, [pc, #196]	; (8000e20 <MX_GPIO_Init+0xec>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	4b2d      	ldr	r3, [pc, #180]	; (8000e20 <MX_GPIO_Init+0xec>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	4a2c      	ldr	r2, [pc, #176]	; (8000e20 <MX_GPIO_Init+0xec>)
 8000d70:	f043 0304 	orr.w	r3, r3, #4
 8000d74:	6313      	str	r3, [r2, #48]	; 0x30
 8000d76:	4b2a      	ldr	r3, [pc, #168]	; (8000e20 <MX_GPIO_Init+0xec>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	f003 0304 	and.w	r3, r3, #4
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	60bb      	str	r3, [r7, #8]
 8000d86:	4b26      	ldr	r3, [pc, #152]	; (8000e20 <MX_GPIO_Init+0xec>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	4a25      	ldr	r2, [pc, #148]	; (8000e20 <MX_GPIO_Init+0xec>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	6313      	str	r3, [r2, #48]	; 0x30
 8000d92:	4b23      	ldr	r3, [pc, #140]	; (8000e20 <MX_GPIO_Init+0xec>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	607b      	str	r3, [r7, #4]
 8000da2:	4b1f      	ldr	r3, [pc, #124]	; (8000e20 <MX_GPIO_Init+0xec>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	4a1e      	ldr	r2, [pc, #120]	; (8000e20 <MX_GPIO_Init+0xec>)
 8000da8:	f043 0302 	orr.w	r3, r3, #2
 8000dac:	6313      	str	r3, [r2, #48]	; 0x30
 8000dae:	4b1c      	ldr	r3, [pc, #112]	; (8000e20 <MX_GPIO_Init+0xec>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	f003 0302 	and.w	r3, r3, #2
 8000db6:	607b      	str	r3, [r7, #4]
 8000db8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC,
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2187      	movs	r1, #135	; 0x87
 8000dbe:	4819      	ldr	r0, [pc, #100]	; (8000e24 <MX_GPIO_Init+0xf0>)
 8000dc0:	f002 fb1a 	bl	80033f8 <HAL_GPIO_WritePin>
                    GPIO_PIN_0 | PROG0_PIN_Pin | RESET_N_PIN_Pin | GPIO_PIN_7,
                    GPIO_PIN_RESET);

  /*Configure GPIO pins : PC0 PROG0_PIN_Pin RESET_N_PIN_Pin PC7 */
  GPIO_InitStruct.Pin =
 8000dc4:	2387      	movs	r3, #135	; 0x87
 8000dc6:	617b      	str	r3, [r7, #20]
      GPIO_PIN_0 | PROG0_PIN_Pin | RESET_N_PIN_Pin | GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4812      	ldr	r0, [pc, #72]	; (8000e24 <MX_GPIO_Init+0xf0>)
 8000ddc:	f002 f958 	bl	8003090 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC3 IO0_EXTI_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_3 | IO0_EXTI_Pin;
 8000de0:	2348      	movs	r3, #72	; 0x48
 8000de2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000de4:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <MX_GPIO_Init+0xf4>)
 8000de6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	4619      	mov	r1, r3
 8000df2:	480c      	ldr	r0, [pc, #48]	; (8000e24 <MX_GPIO_Init+0xf0>)
 8000df4:	f002 f94c 	bl	8003090 <HAL_GPIO_Init>

  /* EXTI interrupt init */
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	2105      	movs	r1, #5
 8000dfc:	2009      	movs	r0, #9
 8000dfe:	f001 fe45 	bl	8002a8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000e02:	2009      	movs	r0, #9
 8000e04:	f001 fe5e 	bl	8002ac4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2105      	movs	r1, #5
 8000e0c:	2017      	movs	r0, #23
 8000e0e:	f001 fe3d 	bl	8002a8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e12:	2017      	movs	r0, #23
 8000e14:	f001 fe56 	bl	8002ac4 <HAL_NVIC_EnableIRQ>

}
 8000e18:	bf00      	nop
 8000e1a:	3728      	adds	r7, #40	; 0x28
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40023800 	.word	0x40023800
 8000e24:	40020800 	.word	0x40020800
 8000e28:	10110000 	.word	0x10110000

08000e2c <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *) & ch, 1, 0xFFFF);
 8000e34:	1d39      	adds	r1, r7, #4
 8000e36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	4803      	ldr	r0, [pc, #12]	; (8000e4c <__io_putchar+0x20>)
 8000e3e:	f003 fcca 	bl	80047d6 <HAL_UART_Transmit>
  return ch;
 8000e42:	687b      	ldr	r3, [r7, #4]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	200046bc 	.word	0x200046bc

08000e50 <HAL_CAN_RxFifo0MsgPendingCallback>:

// can related callback function when enable interrupt mode
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef * hcan)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08e      	sub	sp, #56	; 0x38
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef HAL_RetStaus;
  can_message_event_t can_event_t;
  osStatus_t res;

  if (hcan == &hcan1) {
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	4a21      	ldr	r2, [pc, #132]	; (8000ee0 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d11b      	bne.n	8000e98 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>
    HAL_RetStaus = HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0,
 8000e60:	f107 030c 	add.w	r3, r7, #12
 8000e64:	331c      	adds	r3, #28
 8000e66:	f107 020c 	add.w	r2, r7, #12
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f001 f9ee 	bl	800224e <HAL_CAN_GetRxMessage>
 8000e72:	4603      	mov	r3, r0
 8000e74:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                                        &can_event_t.CanHeader.RxHeader,
                                        can_event_t.CanData.RxData);
    if (HAL_OK == HAL_RetStaus) {
 8000e78:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d10b      	bne.n	8000e98 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>
      if(can_event_t.CanHeader.RxHeader.IDE == CAN_ID_EXT)
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	2b04      	cmp	r3, #4
 8000e84:	d108      	bne.n	8000e98 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>
        res = osMessageQueuePut(Can1ReceiveQHandle, &can_event_t, 0, 0);
 8000e86:	4b17      	ldr	r3, [pc, #92]	; (8000ee4 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8000e88:	6818      	ldr	r0, [r3, #0]
 8000e8a:	f107 010c 	add.w	r1, r7, #12
 8000e8e:	2300      	movs	r3, #0
 8000e90:	2200      	movs	r2, #0
 8000e92:	f004 f8f3 	bl	800507c <osMessageQueuePut>
 8000e96:	6338      	str	r0, [r7, #48]	; 0x30
      //CAN1 frame was successfully received.
    } else {
    }
  }

  if (hcan == &hcan2) {
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4a13      	ldr	r2, [pc, #76]	; (8000ee8 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d11b      	bne.n	8000ed8 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>
    HAL_RetStaus = HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0,
 8000ea0:	f107 030c 	add.w	r3, r7, #12
 8000ea4:	331c      	adds	r3, #28
 8000ea6:	f107 020c 	add.w	r2, r7, #12
 8000eaa:	2100      	movs	r1, #0
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f001 f9ce 	bl	800224e <HAL_CAN_GetRxMessage>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                                        &can_event_t.CanHeader.RxHeader,
                                        can_event_t.CanData.RxData);
    if (HAL_OK == HAL_RetStaus) {
 8000eb8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d10b      	bne.n	8000ed8 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>
      if(can_event_t.CanHeader.RxHeader.IDE == CAN_ID_EXT)
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	2b04      	cmp	r3, #4
 8000ec4:	d108      	bne.n	8000ed8 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>
#if USE_P1
        res = osMessageQueuePut(Can2ReceiveQHandle, &can_event_t, 0, 0);
 8000ec6:	4b09      	ldr	r3, [pc, #36]	; (8000eec <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8000ec8:	6818      	ldr	r0, [r3, #0]
 8000eca:	f107 010c 	add.w	r1, r7, #12
 8000ece:	2300      	movs	r3, #0
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f004 f8d3 	bl	800507c <osMessageQueuePut>
 8000ed6:	6338      	str	r0, [r7, #48]	; 0x30
#endif
      //CAN2 frame was successfully received.
    } else {
    }
  }
}
 8000ed8:	bf00      	nop
 8000eda:	3738      	adds	r7, #56	; 0x38
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20004704 	.word	0x20004704
 8000ee4:	200045d4 	.word	0x200045d4
 8000ee8:	20004660 	.word	0x20004660
 8000eec:	20004700 	.word	0x20004700

08000ef0 <start_boot>:

void start_boot(uint32_t boot_info)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  //1 stands for app2 while 0 stands for app1
  if (boot_info == 1) {
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d116      	bne.n	8000f2c <start_boot+0x3c>
    /* Test if user code is programmed starting from address "USER_CODE2_START_ADDR" */
    if (((*(__IO uint32_t *) USER_CODE2_START_ADDR) & 0x2FFD0000) == 0x20000000) {
 8000efe:	4b21      	ldr	r3, [pc, #132]	; (8000f84 <start_boot+0x94>)
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	4b21      	ldr	r3, [pc, #132]	; (8000f88 <start_boot+0x98>)
 8000f04:	4013      	ands	r3, r2
 8000f06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000f0a:	d126      	bne.n	8000f5a <start_boot+0x6a>
      /* Jump to user application */
      JumpAddress = *(__IO uint32_t *) (USER_CODE2_START_ADDR + 4);
 8000f0c:	4b1f      	ldr	r3, [pc, #124]	; (8000f8c <start_boot+0x9c>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a1f      	ldr	r2, [pc, #124]	; (8000f90 <start_boot+0xa0>)
 8000f12:	6013      	str	r3, [r2, #0]
      JumpToApplication = (pFunction) JumpAddress;
 8000f14:	4b1e      	ldr	r3, [pc, #120]	; (8000f90 <start_boot+0xa0>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4b1e      	ldr	r3, [pc, #120]	; (8000f94 <start_boot+0xa4>)
 8000f1c:	601a      	str	r2, [r3, #0]
      /* Initialize user application's Stack Pointer */
      __set_MSP(*(__IO uint32_t *) USER_CODE2_START_ADDR);
 8000f1e:	4b19      	ldr	r3, [pc, #100]	; (8000f84 <start_boot+0x94>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	f383 8808 	msr	MSP, r3
}
 8000f2a:	e016      	b.n	8000f5a <start_boot+0x6a>
    }
  } else {
    /* Test if user code is programmed starting from address "USER_CODE1_START_ADDR" */
    if (((*(__IO uint32_t *) USER_CODE1_START_ADDR) & 0x2FFD0000) == 0x20000000) {
 8000f2c:	4b1a      	ldr	r3, [pc, #104]	; (8000f98 <start_boot+0xa8>)
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <start_boot+0x98>)
 8000f32:	4013      	ands	r3, r2
 8000f34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000f38:	d10f      	bne.n	8000f5a <start_boot+0x6a>
      /* Jump to user application */
      JumpAddress = *(__IO uint32_t *) (USER_CODE1_START_ADDR + 4);
 8000f3a:	4b18      	ldr	r3, [pc, #96]	; (8000f9c <start_boot+0xac>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a14      	ldr	r2, [pc, #80]	; (8000f90 <start_boot+0xa0>)
 8000f40:	6013      	str	r3, [r2, #0]
      JumpToApplication = (pFunction) JumpAddress;
 8000f42:	4b13      	ldr	r3, [pc, #76]	; (8000f90 <start_boot+0xa0>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	461a      	mov	r2, r3
 8000f48:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <start_boot+0xa4>)
 8000f4a:	601a      	str	r2, [r3, #0]
      /* Initialize user application's Stack Pointer */
      __set_MSP(*(__IO uint32_t *) USER_CODE1_START_ADDR);
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <start_boot+0xa8>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	f383 8808 	msr	MSP, r3
}
 8000f58:	bf00      	nop
    }
  }

  /* reset all peripheral */
  __HAL_RCC_PWR_FORCE_RESET();
 8000f5a:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <start_boot+0xb0>)
 8000f5c:	6a1b      	ldr	r3, [r3, #32]
 8000f5e:	4a10      	ldr	r2, [pc, #64]	; (8000fa0 <start_boot+0xb0>)
 8000f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f64:	6213      	str	r3, [r2, #32]
  __HAL_RCC_PWR_RELEASE_RESET();
 8000f66:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <start_boot+0xb0>)
 8000f68:	6a1b      	ldr	r3, [r3, #32]
 8000f6a:	4a0d      	ldr	r2, [pc, #52]	; (8000fa0 <start_boot+0xb0>)
 8000f6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f70:	6213      	str	r3, [r2, #32]
  HAL_RCC_DeInit();
 8000f72:	f003 f867 	bl	8004044 <HAL_RCC_DeInit>

  JumpToApplication();
 8000f76:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <start_boot+0xa4>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4798      	blx	r3
}
 8000f7c:	bf00      	nop
 8000f7e:	3710      	adds	r7, #16
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	080a0000 	.word	0x080a0000
 8000f88:	2ffd0000 	.word	0x2ffd0000
 8000f8c:	080a0004 	.word	0x080a0004
 8000f90:	200045cc 	.word	0x200045cc
 8000f94:	200045d0 	.word	0x200045d0
 8000f98:	08040000 	.word	0x08040000
 8000f9c:	08040004 	.word	0x08040004
 8000fa0:	40023800 	.word	0x40023800

08000fa4 <can1_ota_ack>:

void can1_ota_ack(enum canComMode mode, ErrStatus status,
                  can_message_event_t * can_event_t)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	603a      	str	r2, [r7, #0]
 8000fae:	71fb      	strb	r3, [r7, #7]
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	71bb      	strb	r3, [r7, #6]
  can_event_t->CanHeader.TxHeader.ExtId =
      (SENSOR_OTA_MESSAGE << SENSOR_EVENT_MESSAGE_BIT_SHIFT) | (boardID <<
 8000fb4:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <can1_ota_ack+0x40>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	011b      	lsls	r3, r3, #4
 8000fba:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
                                                                CHIP_ID_BIT_SHIFT)
      | mode;
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	461a      	mov	r2, r3
  can_event_t->CanHeader.TxHeader.ExtId =
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	605a      	str	r2, [r3, #4]

  can_event_t->CanData.TxData[0] = status;
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	79ba      	ldrb	r2, [r7, #6]
 8000fcc:	771a      	strb	r2, [r3, #28]

#if USE_P1
  osMessageQueuePut(Can1BroadcastQHandle, can_event_t, 0, 0);
 8000fce:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <can1_ota_ack+0x44>)
 8000fd0:	6818      	ldr	r0, [r3, #0]
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	6839      	ldr	r1, [r7, #0]
 8000fd8:	f004 f850 	bl	800507c <osMessageQueuePut>
#else
  osMessageQueuePut(Can2BroadcastQHandle, can_event_t, 0, 0);
#endif
}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000000 	.word	0x20000000
 8000fe8:	200046b8 	.word	0x200046b8

08000fec <can1_ota_start_boot>:

void can1_ota_start_boot(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08a      	sub	sp, #40	; 0x28
 8000ff0:	af00      	add	r7, sp, #0
  can_message_event_t can_event_t;

  can_event_t.CanHeader.TxHeader.ExtId =
      (SENSOR_OTA_MESSAGE << SENSOR_EVENT_MESSAGE_BIT_SHIFT) | (boardID <<
 8000ff2:	4b09      	ldr	r3, [pc, #36]	; (8001018 <can1_ota_start_boot+0x2c>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	011b      	lsls	r3, r3, #4
                                                                CHIP_ID_BIT_SHIFT)
      | CANCOM_OTA_BOOTUP;
 8000ff8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ffc:	f043 0304 	orr.w	r3, r3, #4
  can_event_t.CanHeader.TxHeader.ExtId =
 8001000:	60bb      	str	r3, [r7, #8]

  osMessageQueuePut(Can1ReceiveQHandle, &can_event_t, 0, 0);
 8001002:	4b06      	ldr	r3, [pc, #24]	; (800101c <can1_ota_start_boot+0x30>)
 8001004:	6818      	ldr	r0, [r3, #0]
 8001006:	1d39      	adds	r1, r7, #4
 8001008:	2300      	movs	r3, #0
 800100a:	2200      	movs	r2, #0
 800100c:	f004 f836 	bl	800507c <osMessageQueuePut>
}
 8001010:	bf00      	nop
 8001012:	3728      	adds	r7, #40	; 0x28
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20000000 	.word	0x20000000
 800101c:	200045d4 	.word	0x200045d4

08001020 <flash_get_ota_sector>:

uint32_t flash_get_ota_sector(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  return flashOtaInfo.updating_app_id;
 8001024:	4b03      	ldr	r3, [pc, #12]	; (8001034 <flash_get_ota_sector+0x14>)
 8001026:	689b      	ldr	r3, [r3, #8]
}
 8001028:	4618      	mov	r0, r3
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	08010000 	.word	0x08010000

08001038 <StartOTATask>:
 * @brief  Function implementing the Can1Broadcast thread.
 * @param  argument: Not used
 * @retval None
 */
void StartOTATask(void *argument)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  osStatus_t res;
  uint8_t boot_info;
  /* Infinite loop */
  for (;;) {
    res = osMessageQueueGet(BootStartQHandle, &boot_info, 0, portMAX_DELAY);
 8001040:	4b05      	ldr	r3, [pc, #20]	; (8001058 <StartOTATask+0x20>)
 8001042:	6818      	ldr	r0, [r3, #0]
 8001044:	f107 010b 	add.w	r1, r7, #11
 8001048:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800104c:	2200      	movs	r2, #0
 800104e:	f004 f875 	bl	800513c <osMessageQueueGet>
 8001052:	60f8      	str	r0, [r7, #12]
    __NVIC_SystemReset();
 8001054:	f7ff fbf8 	bl	8000848 <__NVIC_SystemReset>
 8001058:	2000468c 	.word	0x2000468c

0800105c <StartCan1BroadcastTask>:
 * @brief  Function implementing the Can1Broadcast thread.
 * @param  argument: Not used
 * @retval None
 */
void StartCan1BroadcastTask(void *argument)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08e      	sub	sp, #56	; 0x38
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  can_message_event_t can_event_t;

  /* Infinite loop */
  for (;;) {
    res =
        osMessageQueueGet(Can1BroadcastQHandle, &can_event_t, 0, portMAX_DELAY);
 8001064:	4b16      	ldr	r3, [pc, #88]	; (80010c0 <StartCan1BroadcastTask+0x64>)
 8001066:	6818      	ldr	r0, [r3, #0]
 8001068:	f107 010c 	add.w	r1, r7, #12
 800106c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001070:	2200      	movs	r2, #0
 8001072:	f004 f863 	bl	800513c <osMessageQueueGet>
 8001076:	6378      	str	r0, [r7, #52]	; 0x34
    printf("CAN1 BC MSG: (0x%x) \r\n", can_event_t.CanHeader.TxHeader.ExtId);
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	4619      	mov	r1, r3
 800107c:	4811      	ldr	r0, [pc, #68]	; (80010c4 <StartCan1BroadcastTask+0x68>)
 800107e:	f006 fe0d 	bl	8007c9c <iprintf>
    /*Configure Transmission process */
    can_event_t.CanHeader.TxHeader.RTR = CAN_RTR_DATA;
 8001082:	2300      	movs	r3, #0
 8001084:	61bb      	str	r3, [r7, #24]
    can_event_t.CanHeader.TxHeader.IDE = CAN_ID_EXT;
 8001086:	2304      	movs	r3, #4
 8001088:	617b      	str	r3, [r7, #20]
    can_event_t.CanHeader.TxHeader.DLC = 8;
 800108a:	2308      	movs	r3, #8
 800108c:	61fb      	str	r3, [r7, #28]
    can_event_t.CanHeader.TxHeader.TransmitGlobalTime = DISABLE;
 800108e:	2300      	movs	r3, #0
 8001090:	f887 3020 	strb.w	r3, [r7, #32]
    /* CAN send test. */
    if (HAL_CAN_AddTxMessage(&hcan1, &can_event_t.CanHeader.TxHeader,
 8001094:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001098:	f107 030c 	add.w	r3, r7, #12
 800109c:	f103 021c 	add.w	r2, r3, #28
 80010a0:	f107 010c 	add.w	r1, r7, #12
 80010a4:	4603      	mov	r3, r0
 80010a6:	4808      	ldr	r0, [pc, #32]	; (80010c8 <StartCan1BroadcastTask+0x6c>)
 80010a8:	f000 fff6 	bl	8002098 <HAL_CAN_AddTxMessage>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <StartCan1BroadcastTask+0x5a>
                             can_event_t.CanData.TxData, &TxMailbox) != HAL_OK)
    {
      /* Transmission request Error */
      Error_Handler();
 80010b2:	f000 fa99 	bl	80015e8 <Error_Handler>
    }
    osDelay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f003 ff52 	bl	8004f60 <osDelay>
    res =
 80010bc:	e7d2      	b.n	8001064 <StartCan1BroadcastTask+0x8>
 80010be:	bf00      	nop
 80010c0:	200046b8 	.word	0x200046b8
 80010c4:	08008bec 	.word	0x08008bec
 80010c8:	20004704 	.word	0x20004704

080010cc <StartCan1ReceiveTask>:
 * @brief  Function implementing the Can1Receive thread.
 * @param  argument: Not used
 * @retval None
 */
void StartCan1ReceiveTask(void *argument)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b0a2      	sub	sp, #136	; 0x88
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  sensor_message_event_type event_type;
  uint8_t chip_id;
  uint8_t cancom_mode;
  uint32_t boot_info;

  uint32_t valBuf[2], binSize = 0, binPackNum = 0, can_recv_count = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	2300      	movs	r3, #0
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	2300      	movs	r3, #0
 80010de:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t address = 0, ack_err_address = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80010e6:	2300      	movs	r3, #0
 80010e8:	60bb      	str	r3, [r7, #8]
  uint32_t ret = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	67bb      	str	r3, [r7, #120]	; 0x78
  uint32_t boot_sector = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t current_ota_sector = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

  static uint32_t count = 0;

  for (;;) {
    //printf("waiting for can1 message \r\n");
    res = osMessageQueueGet(Can1ReceiveQHandle, &can_event_t, 0, portMAX_DELAY);
 80010f8:	4bbf      	ldr	r3, [pc, #764]	; (80013f8 <StartCan1ReceiveTask+0x32c>)
 80010fa:	6818      	ldr	r0, [r3, #0]
 80010fc:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001100:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001104:	2200      	movs	r2, #0
 8001106:	f004 f819 	bl	800513c <osMessageQueueGet>
 800110a:	6738      	str	r0, [r7, #112]	; 0x70
    //printf("rev can1 msg StdId: 0x%x\r\n", can_event_t.CanHeader.RxHeader.StdId);
    printf("rev can1 msg ExtId: 0x%x\r\n",
 800110c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800110e:	4619      	mov	r1, r3
 8001110:	48ba      	ldr	r0, [pc, #744]	; (80013fc <StartCan1ReceiveTask+0x330>)
 8001112:	f006 fdc3 	bl	8007c9c <iprintf>
           can_event_t.CanHeader.RxHeader.ExtId);

    event_type =
        (can_event_t.CanHeader.RxHeader.
 8001116:	6cbb      	ldr	r3, [r7, #72]	; 0x48
         ExtId & SENSOR_EVENT_MESSAGE_BIT_MASK) >>
 8001118:	0a1b      	lsrs	r3, r3, #8
 800111a:	b2db      	uxtb	r3, r3
    event_type =
 800111c:	f003 030f 	and.w	r3, r3, #15
 8001120:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
        SENSOR_EVENT_MESSAGE_BIT_SHIFT;
    chip_id =
        (can_event_t.CanHeader.RxHeader.
 8001124:	6cbb      	ldr	r3, [r7, #72]	; 0x48
         ExtId & CHIP_ID_BIT_MASK) >> CHIP_ID_BIT_SHIFT;
 8001126:	091b      	lsrs	r3, r3, #4
 8001128:	b2db      	uxtb	r3, r3
    chip_id =
 800112a:	f003 030f 	and.w	r3, r3, #15
 800112e:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
    cancom_mode = can_event_t.CanHeader.RxHeader.ExtId & CANCOM_MODE_BIT_MASK;
 8001132:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001134:	b2db      	uxtb	r3, r3
 8001136:	f003 030f 	and.w	r3, r3, #15
 800113a:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
    can_recv_count =
        (can_event_t.CanHeader.RxHeader.
 800113e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
         ExtId & OTA_EXTEND_MESSAGE_BIT_MASK) >> OTA_EXTEND_MESSAGE_BIT_SHIFT;
 8001140:	0b1b      	lsrs	r3, r3, #12
    can_recv_count =
 8001142:	b29b      	uxth	r3, r3
 8001144:	67fb      	str	r3, [r7, #124]	; 0x7c

    if (chip_id != boardID) {
 8001146:	4bae      	ldr	r3, [pc, #696]	; (8001400 <StartCan1ReceiveTask+0x334>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 800114e:	429a      	cmp	r2, r3
 8001150:	d009      	beq.n	8001166 <StartCan1ReceiveTask+0x9a>
      //foward this can message to can2 canmessage send
      res = osMessageQueuePut(Can2BroadcastQHandle, &can_event_t, 0, 0);
 8001152:	4bac      	ldr	r3, [pc, #688]	; (8001404 <StartCan1ReceiveTask+0x338>)
 8001154:	6818      	ldr	r0, [r3, #0]
 8001156:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800115a:	2300      	movs	r3, #0
 800115c:	2200      	movs	r2, #0
 800115e:	f003 ff8d 	bl	800507c <osMessageQueuePut>
 8001162:	6738      	str	r0, [r7, #112]	; 0x70
 8001164:	e1a9      	b.n	80014ba <StartCan1ReceiveTask+0x3ee>
    } else {
      switch (cancom_mode) {
 8001166:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800116a:	2b06      	cmp	r3, #6
 800116c:	f200 81a4 	bhi.w	80014b8 <StartCan1ReceiveTask+0x3ec>
 8001170:	a201      	add	r2, pc, #4	; (adr r2, 8001178 <StartCan1ReceiveTask+0xac>)
 8001172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001176:	bf00      	nop
 8001178:	080013b5 	.word	0x080013b5
 800117c:	08001195 	.word	0x08001195
 8001180:	080011e7 	.word	0x080011e7
 8001184:	08001313 	.word	0x08001313
 8001188:	08001429 	.word	0x08001429
 800118c:	08001461 	.word	0x08001461
 8001190:	080013e9 	.word	0x080013e9
 8001194:	6e3b      	ldr	r3, [r7, #96]	; 0x60
      case CANCOM_OTA_INFO:
        memcpy(&binSize, &(can_event_t.CanData.RxData[0]), sizeof(uint32_t));
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	6e7b      	ldr	r3, [r7, #100]	; 0x64
        memcpy(&binPackNum, &(can_event_t.CanData.RxData[4]), sizeof(uint32_t));
 800119a:	60fb      	str	r3, [r7, #12]
        count = 0;
 800119c:	4b9a      	ldr	r3, [pc, #616]	; (8001408 <StartCan1ReceiveTask+0x33c>)
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
        if (flash_get_ota_sector() == 0) {
 80011a2:	f7ff ff3d 	bl	8001020 <flash_get_ota_sector>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d106      	bne.n	80011ba <StartCan1ReceiveTask+0xee>
          address = USER_CODE1_START_ADDR;
 80011ac:	4b97      	ldr	r3, [pc, #604]	; (800140c <StartCan1ReceiveTask+0x340>)
 80011ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          current_ota_sector = 0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80011b8:	e005      	b.n	80011c6 <StartCan1ReceiveTask+0xfa>
        } else {
          address = USER_CODE2_START_ADDR;
 80011ba:	4b95      	ldr	r3, [pc, #596]	; (8001410 <StartCan1ReceiveTask+0x344>)
 80011bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          current_ota_sector = 1;
 80011c0:	2301      	movs	r3, #1
 80011c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        }
        //erase flash here before write operation
        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |
 80011c6:	4b93      	ldr	r3, [pc, #588]	; (8001414 <StartCan1ReceiveTask+0x348>)
 80011c8:	22f2      	movs	r2, #242	; 0xf2
 80011ca:	60da      	str	r2, [r3, #12]
                               FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR |
                               FLASH_FLAG_PGSERR);
        flash_erase_by_sector(address, 3);
 80011cc:	2103      	movs	r1, #3
 80011ce:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80011d2:	f7ff fa83 	bl	80006dc <flash_erase_by_sector>
        can1_ota_ack(CANCOM_OTA_INFO_ACK, CAN_OTA_SUCCESS, &can_ack_event_t);
 80011d6:	f107 0320 	add.w	r3, r7, #32
 80011da:	461a      	mov	r2, r3
 80011dc:	2101      	movs	r1, #1
 80011de:	2008      	movs	r0, #8
 80011e0:	f7ff fee0 	bl	8000fa4 <can1_ota_ack>
        break;
 80011e4:	e169      	b.n	80014ba <StartCan1ReceiveTask+0x3ee>
      case CANCOM_OTA_ING:
        if (can_recv_count == count) {
 80011e6:	4b88      	ldr	r3, [pc, #544]	; (8001408 <StartCan1ReceiveTask+0x33c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80011ec:	429a      	cmp	r2, r3
 80011ee:	f040 8081 	bne.w	80012f4 <StartCan1ReceiveTask+0x228>
          if (count == 20442) {
 80011f2:	4b85      	ldr	r3, [pc, #532]	; (8001408 <StartCan1ReceiveTask+0x33c>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f644 72da 	movw	r2, #20442	; 0x4fda
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d10a      	bne.n	8001214 <StartCan1ReceiveTask+0x148>
            uint32_t add_temp = address + count * 8;
 80011fe:	4b82      	ldr	r3, [pc, #520]	; (8001408 <StartCan1ReceiveTask+0x33c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	00db      	lsls	r3, r3, #3
 8001204:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001208:	4413      	add	r3, r2
 800120a:	66bb      	str	r3, [r7, #104]	; 0x68
            printf("debug, address + count*8: 0x%x", add_temp);
 800120c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800120e:	4882      	ldr	r0, [pc, #520]	; (8001418 <StartCan1ReceiveTask+0x34c>)
 8001210:	f006 fd44 	bl	8007c9c <iprintf>
          }
          memcpy(valBuf, can_event_t.CanData.RxData, 8);
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800121c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001220:	e883 0003 	stmia.w	r3, {r0, r1}

          if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |
 8001224:	4b7b      	ldr	r3, [pc, #492]	; (8001414 <StartCan1ReceiveTask+0x348>)
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800122c:	2b00      	cmp	r3, #0
 800122e:	d010      	beq.n	8001252 <StartCan1ReceiveTask+0x186>
                                    FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR |
                                    FLASH_FLAG_PGSERR)) != RESET) {

            __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |
 8001230:	4b78      	ldr	r3, [pc, #480]	; (8001414 <StartCan1ReceiveTask+0x348>)
 8001232:	22f2      	movs	r2, #242	; 0xf2
 8001234:	60da      	str	r2, [r3, #12]
                                   FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR |
                                   FLASH_FLAG_PGSERR);
            ack_err_address = 0xFFFFFFFF;
 8001236:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	68bb      	ldr	r3, [r7, #8]
            memcpy(&can_ack_event_t.CanData.TxData[1], &ack_err_address,
 800123e:	f8c7 303d 	str.w	r3, [r7, #61]	; 0x3d
                   sizeof(uint32_t));
            can1_ota_ack(CANCOM_OTA_ING_ACK, CAN_OTA_ERROR, &can_ack_event_t);
 8001242:	f107 0320 	add.w	r3, r7, #32
 8001246:	461a      	mov	r2, r3
 8001248:	2100      	movs	r1, #0
 800124a:	2009      	movs	r0, #9
 800124c:	f7ff feaa 	bl	8000fa4 <can1_ota_ack>
            break;
 8001250:	e133      	b.n	80014ba <StartCan1ReceiveTask+0x3ee>
          }

          ret = flash_program_by_word(address + count * 8, valBuf[0]);
 8001252:	4b6d      	ldr	r3, [pc, #436]	; (8001408 <StartCan1ReceiveTask+0x33c>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	00da      	lsls	r2, r3, #3
 8001258:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800125c:	4413      	add	r3, r2
 800125e:	697a      	ldr	r2, [r7, #20]
 8001260:	4611      	mov	r1, r2
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff fa6c 	bl	8000740 <flash_program_by_word>
 8001268:	67b8      	str	r0, [r7, #120]	; 0x78
          if (ret != HAL_OK) {
 800126a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800126c:	2b00      	cmp	r3, #0
 800126e:	d011      	beq.n	8001294 <StartCan1ReceiveTask+0x1c8>
            ack_err_address = address + count * 8;
 8001270:	4b65      	ldr	r3, [pc, #404]	; (8001408 <StartCan1ReceiveTask+0x33c>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	00da      	lsls	r2, r3, #3
 8001276:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800127a:	4413      	add	r3, r2
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	68bb      	ldr	r3, [r7, #8]
            memcpy(&can_ack_event_t.CanData.TxData[1], &ack_err_address,
 8001280:	f8c7 303d 	str.w	r3, [r7, #61]	; 0x3d
                   sizeof(uint32_t));
            can1_ota_ack(CANCOM_OTA_ING_ACK, CAN_OTA_ERROR, &can_ack_event_t);
 8001284:	f107 0320 	add.w	r3, r7, #32
 8001288:	461a      	mov	r2, r3
 800128a:	2100      	movs	r1, #0
 800128c:	2009      	movs	r0, #9
 800128e:	f7ff fe89 	bl	8000fa4 <can1_ota_ack>
            break;
 8001292:	e112      	b.n	80014ba <StartCan1ReceiveTask+0x3ee>
          }
          ret = flash_program_by_word(address + count * 8 + 4, valBuf[1]);
 8001294:	4b5c      	ldr	r3, [pc, #368]	; (8001408 <StartCan1ReceiveTask+0x33c>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	00da      	lsls	r2, r3, #3
 800129a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800129e:	4413      	add	r3, r2
 80012a0:	3304      	adds	r3, #4
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	4611      	mov	r1, r2
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff fa4a 	bl	8000740 <flash_program_by_word>
 80012ac:	67b8      	str	r0, [r7, #120]	; 0x78
          if (ret != HAL_OK) {
 80012ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d012      	beq.n	80012da <StartCan1ReceiveTask+0x20e>
            ack_err_address = address + count * 8 + 4;
 80012b4:	4b54      	ldr	r3, [pc, #336]	; (8001408 <StartCan1ReceiveTask+0x33c>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	00da      	lsls	r2, r3, #3
 80012ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80012be:	4413      	add	r3, r2
 80012c0:	3304      	adds	r3, #4
 80012c2:	60bb      	str	r3, [r7, #8]
 80012c4:	68bb      	ldr	r3, [r7, #8]
            memcpy(&can_ack_event_t.CanData.TxData[1], &ack_err_address,
 80012c6:	f8c7 303d 	str.w	r3, [r7, #61]	; 0x3d
                   sizeof(uint32_t));
            can1_ota_ack(CANCOM_OTA_ING_ACK, CAN_OTA_ERROR, &can_ack_event_t);
 80012ca:	f107 0320 	add.w	r3, r7, #32
 80012ce:	461a      	mov	r2, r3
 80012d0:	2100      	movs	r1, #0
 80012d2:	2009      	movs	r0, #9
 80012d4:	f7ff fe66 	bl	8000fa4 <can1_ota_ack>
            break;
 80012d8:	e0ef      	b.n	80014ba <StartCan1ReceiveTask+0x3ee>
          }
          can1_ota_ack(CANCOM_OTA_ING_ACK, CAN_OTA_SUCCESS, &can_ack_event_t);
 80012da:	f107 0320 	add.w	r3, r7, #32
 80012de:	461a      	mov	r2, r3
 80012e0:	2101      	movs	r1, #1
 80012e2:	2009      	movs	r0, #9
 80012e4:	f7ff fe5e 	bl	8000fa4 <can1_ota_ack>
          count++;
 80012e8:	4b47      	ldr	r3, [pc, #284]	; (8001408 <StartCan1ReceiveTask+0x33c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	3301      	adds	r3, #1
 80012ee:	4a46      	ldr	r2, [pc, #280]	; (8001408 <StartCan1ReceiveTask+0x33c>)
 80012f0:	6013      	str	r3, [r2, #0]
          //force set count to can_recv_count
          count = can_recv_count;
          memcpy(&can_ack_event_t.CanData.TxData[1], &count, sizeof(uint32_t));
          can1_ota_ack(CANCOM_OTA_ING_ACK, CAN_OTA_ERROR, &can_ack_event_t);
        }
        break;
 80012f2:	e0e2      	b.n	80014ba <StartCan1ReceiveTask+0x3ee>
          count = can_recv_count;
 80012f4:	4a44      	ldr	r2, [pc, #272]	; (8001408 <StartCan1ReceiveTask+0x33c>)
 80012f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80012f8:	6013      	str	r3, [r2, #0]
 80012fa:	4b43      	ldr	r3, [pc, #268]	; (8001408 <StartCan1ReceiveTask+0x33c>)
 80012fc:	681b      	ldr	r3, [r3, #0]
          memcpy(&can_ack_event_t.CanData.TxData[1], &count, sizeof(uint32_t));
 80012fe:	f8c7 303d 	str.w	r3, [r7, #61]	; 0x3d
          can1_ota_ack(CANCOM_OTA_ING_ACK, CAN_OTA_ERROR, &can_ack_event_t);
 8001302:	f107 0320 	add.w	r3, r7, #32
 8001306:	461a      	mov	r2, r3
 8001308:	2100      	movs	r1, #0
 800130a:	2009      	movs	r0, #9
 800130c:	f7ff fe4a 	bl	8000fa4 <can1_ota_ack>
        break;
 8001310:	e0d3      	b.n	80014ba <StartCan1ReceiveTask+0x3ee>
 8001312:	6e3b      	ldr	r3, [r7, #96]	; 0x60
      case CANCOM_OTA_END:
        memcpy(&binPackNum, &(can_event_t.CanData.RxData[0]), sizeof(uint32_t));
 8001314:	60fb      	str	r3, [r7, #12]
        if ((count == binPackNum) && (binPackNum > 0)) {
 8001316:	4b3c      	ldr	r3, [pc, #240]	; (8001408 <StartCan1ReceiveTask+0x33c>)
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	429a      	cmp	r2, r3
 800131e:	d12a      	bne.n	8001376 <StartCan1ReceiveTask+0x2aa>
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d027      	beq.n	8001376 <StartCan1ReceiveTask+0x2aa>
          can1_ota_ack(CANCOM_OTA_END_ACK, CAN_OTA_SUCCESS, &can_ack_event_t);
 8001326:	f107 0320 	add.w	r3, r7, #32
 800132a:	461a      	mov	r2, r3
 800132c:	2101      	movs	r1, #1
 800132e:	200a      	movs	r0, #10
 8001330:	f7ff fe38 	bl	8000fa4 <can1_ota_ack>
          //upadte boot up start address stored in FLASH_OTAINFO_ADD
          flash_set_bootup_sector(current_ota_sector);
 8001334:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001338:	f7ff fa1c 	bl	8000774 <flash_set_bootup_sector>
          flash_clear_boot_magic_number();
 800133c:	f7ff fa56 	bl	80007ec <flash_clear_boot_magic_number>

          ret = flash_lock();
 8001340:	f7ff f9be 	bl	80006c0 <flash_lock>
 8001344:	67b8      	str	r0, [r7, #120]	; 0x78
          if (ret == HAL_OK) {
 8001346:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001348:	2b00      	cmp	r3, #0
 800134a:	d107      	bne.n	800135c <StartCan1ReceiveTask+0x290>
            can1_ota_ack(CANCOM_OTA_END_ACK, CAN_OTA_SUCCESS, &can_ack_event_t);
 800134c:	f107 0320 	add.w	r3, r7, #32
 8001350:	461a      	mov	r2, r3
 8001352:	2101      	movs	r1, #1
 8001354:	200a      	movs	r0, #10
 8001356:	f7ff fe25 	bl	8000fa4 <can1_ota_ack>
 800135a:	e006      	b.n	800136a <StartCan1ReceiveTask+0x29e>
          } else {
            can1_ota_ack(CANCOM_OTA_END_ACK, CAN_OTA_ERROR, &can_ack_event_t);
 800135c:	f107 0320 	add.w	r3, r7, #32
 8001360:	461a      	mov	r2, r3
 8001362:	2100      	movs	r1, #0
 8001364:	200a      	movs	r0, #10
 8001366:	f7ff fe1d 	bl	8000fa4 <can1_ota_ack>
          }
          osDelay(1);
 800136a:	2001      	movs	r0, #1
 800136c:	f003 fdf8 	bl	8004f60 <osDelay>
          can1_ota_start_boot();
 8001370:	f7ff fe3c 	bl	8000fec <can1_ota_start_boot>
          break;
 8001374:	e0a1      	b.n	80014ba <StartCan1ReceiveTask+0x3ee>
 8001376:	4b24      	ldr	r3, [pc, #144]	; (8001408 <StartCan1ReceiveTask+0x33c>)
 8001378:	881b      	ldrh	r3, [r3, #0]
        } else {
          memcpy(can_event_t.CanData.TxData, &count, 2);
 800137a:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
          can1_ota_ack(CANCOM_OTA_END_ACK, CAN_OTA_ERROR, &can_ack_event_t);
 800137e:	f107 0320 	add.w	r3, r7, #32
 8001382:	461a      	mov	r2, r3
 8001384:	2100      	movs	r1, #0
 8001386:	200a      	movs	r0, #10
 8001388:	f7ff fe0c 	bl	8000fa4 <can1_ota_ack>
          osDelay(1);
 800138c:	2001      	movs	r0, #1
 800138e:	f003 fde7 	bl	8004f60 <osDelay>
          flash_clear_boot_magic_number();
 8001392:	f7ff fa2b 	bl	80007ec <flash_clear_boot_magic_number>
          ret = flash_lock();
 8001396:	f7ff f993 	bl	80006c0 <flash_lock>
 800139a:	67b8      	str	r0, [r7, #120]	; 0x78
          boot_info = flashOtaInfo.using_app_id;
 800139c:	4b1f      	ldr	r3, [pc, #124]	; (800141c <StartCan1ReceiveTask+0x350>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	61fb      	str	r3, [r7, #28]
          osMessageQueuePut(BootStartQHandle, &boot_info, 0, 0);
 80013a2:	4b1f      	ldr	r3, [pc, #124]	; (8001420 <StartCan1ReceiveTask+0x354>)
 80013a4:	6818      	ldr	r0, [r3, #0]
 80013a6:	f107 011c 	add.w	r1, r7, #28
 80013aa:	2300      	movs	r3, #0
 80013ac:	2200      	movs	r2, #0
 80013ae:	f003 fe65 	bl	800507c <osMessageQueuePut>
          break;
 80013b2:	e082      	b.n	80014ba <StartCan1ReceiveTask+0x3ee>
        }
      case CANCOM_OTA_START:
        ret = flash_unlock();
 80013b4:	f7ff f976 	bl	80006a4 <flash_unlock>
 80013b8:	67b8      	str	r0, [r7, #120]	; 0x78
        if (ret == HAL_OK) {
 80013ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d10b      	bne.n	80013d8 <StartCan1ReceiveTask+0x30c>
 80013c0:	4b18      	ldr	r3, [pc, #96]	; (8001424 <StartCan1ReceiveTask+0x358>)
 80013c2:	681b      	ldr	r3, [r3, #0]
          memcpy(&can_ack_event_t.CanData.TxData[1],
 80013c4:	f8c7 303d 	str.w	r3, [r7, #61]	; 0x3d
                 &flashOtaInfo.updating_app_id, sizeof(uint32_t));
          //different update address need a different image APP, tell the master which is updating
          can1_ota_ack(CANCOM_OTA_START_ACK, CAN_OTA_SUCCESS, &can_ack_event_t);
 80013c8:	f107 0320 	add.w	r3, r7, #32
 80013cc:	461a      	mov	r2, r3
 80013ce:	2101      	movs	r1, #1
 80013d0:	2007      	movs	r0, #7
 80013d2:	f7ff fde7 	bl	8000fa4 <can1_ota_ack>
        } else {
          can1_ota_ack(CANCOM_OTA_START_ACK, CAN_OTA_ERROR, &can_ack_event_t);
        }
        break;
 80013d6:	e070      	b.n	80014ba <StartCan1ReceiveTask+0x3ee>
          can1_ota_ack(CANCOM_OTA_START_ACK, CAN_OTA_ERROR, &can_ack_event_t);
 80013d8:	f107 0320 	add.w	r3, r7, #32
 80013dc:	461a      	mov	r2, r3
 80013de:	2100      	movs	r1, #0
 80013e0:	2007      	movs	r0, #7
 80013e2:	f7ff fddf 	bl	8000fa4 <can1_ota_ack>
        break;
 80013e6:	e068      	b.n	80014ba <StartCan1ReceiveTask+0x3ee>
      case CANCOM_OTA_MODE_ENTER:
        can1_ota_ack(CANCOM_OTA_MODE_ENTER_ACK, CAN_OTA_SUCCESS,
 80013e8:	f107 0320 	add.w	r3, r7, #32
 80013ec:	461a      	mov	r2, r3
 80013ee:	2101      	movs	r1, #1
 80013f0:	200c      	movs	r0, #12
 80013f2:	f7ff fdd7 	bl	8000fa4 <can1_ota_ack>
                     &can_ack_event_t);
        break;
 80013f6:	e060      	b.n	80014ba <StartCan1ReceiveTask+0x3ee>
 80013f8:	200045d4 	.word	0x200045d4
 80013fc:	08008c04 	.word	0x08008c04
 8001400:	20000000 	.word	0x20000000
 8001404:	200045d8 	.word	0x200045d8
 8001408:	200000a8 	.word	0x200000a8
 800140c:	08040000 	.word	0x08040000
 8001410:	080a0000 	.word	0x080a0000
 8001414:	40023c00 	.word	0x40023c00
 8001418:	08008c20 	.word	0x08008c20
 800141c:	08010000 	.word	0x08010000
 8001420:	2000468c 	.word	0x2000468c
 8001424:	08010008 	.word	0x08010008
      case CANCOM_OTA_BOOTUP:
        boot_info = flashOtaInfo.using_app_id;
 8001428:	4b26      	ldr	r3, [pc, #152]	; (80014c4 <StartCan1ReceiveTask+0x3f8>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	61fb      	str	r3, [r7, #28]
        flash_unlock();
 800142e:	f7ff f939 	bl	80006a4 <flash_unlock>
        flash_clear_boot_magic_number();
 8001432:	f7ff f9db 	bl	80007ec <flash_clear_boot_magic_number>
        flash_lock();
 8001436:	f7ff f943 	bl	80006c0 <flash_lock>
        can1_ota_ack(CANCOM_OTA_BOOTUP_ACK, CAN_OTA_SUCCESS, &can_ack_event_t);
 800143a:	f107 0320 	add.w	r3, r7, #32
 800143e:	461a      	mov	r2, r3
 8001440:	2101      	movs	r1, #1
 8001442:	200d      	movs	r0, #13
 8001444:	f7ff fdae 	bl	8000fa4 <can1_ota_ack>
        osDelay(10);
 8001448:	200a      	movs	r0, #10
 800144a:	f003 fd89 	bl	8004f60 <osDelay>
        osMessageQueuePut(BootStartQHandle, &boot_info, 0, 0);
 800144e:	4b1e      	ldr	r3, [pc, #120]	; (80014c8 <StartCan1ReceiveTask+0x3fc>)
 8001450:	6818      	ldr	r0, [r3, #0]
 8001452:	f107 011c 	add.w	r1, r7, #28
 8001456:	2300      	movs	r3, #0
 8001458:	2200      	movs	r2, #0
 800145a:	f003 fe0f 	bl	800507c <osMessageQueuePut>
        break;
 800145e:	e02c      	b.n	80014ba <StartCan1ReceiveTask+0x3ee>
      case CANCOM_OTA_SETBOOT_SECTOR:
        boot_sector = can_event_t.CanData.RxData[0];
 8001460:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8001464:	677b      	str	r3, [r7, #116]	; 0x74
        ret = flash_unlock();
 8001466:	f7ff f91d 	bl	80006a4 <flash_unlock>
 800146a:	67b8      	str	r0, [r7, #120]	; 0x78
        if (ret == HAL_OK) {
 800146c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800146e:	2b00      	cmp	r3, #0
 8001470:	d006      	beq.n	8001480 <StartCan1ReceiveTask+0x3b4>
          //can1_ota_ack(CANCOM_OTA_SETBOOT_SECTOR_ACK, CAN_OTA_SUCCESS, &can_ack_event_t);
        } else {
          can1_ota_ack(CANCOM_OTA_SETBOOT_SECTOR_ACK, CAN_OTA_ERROR,
 8001472:	f107 0320 	add.w	r3, r7, #32
 8001476:	461a      	mov	r2, r3
 8001478:	2100      	movs	r1, #0
 800147a:	200b      	movs	r0, #11
 800147c:	f7ff fd92 	bl	8000fa4 <can1_ota_ack>
                       &can_ack_event_t);
        }
        osDelay(1);
 8001480:	2001      	movs	r0, #1
 8001482:	f003 fd6d 	bl	8004f60 <osDelay>
        flash_set_bootup_sector(boot_sector);
 8001486:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001488:	f7ff f974 	bl	8000774 <flash_set_bootup_sector>
        ret = flash_lock();
 800148c:	f7ff f918 	bl	80006c0 <flash_lock>
 8001490:	67b8      	str	r0, [r7, #120]	; 0x78
        if (ret == HAL_OK) {
 8001492:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001494:	2b00      	cmp	r3, #0
 8001496:	d107      	bne.n	80014a8 <StartCan1ReceiveTask+0x3dc>
          can1_ota_ack(CANCOM_OTA_SETBOOT_SECTOR_ACK, CAN_OTA_SUCCESS,
 8001498:	f107 0320 	add.w	r3, r7, #32
 800149c:	461a      	mov	r2, r3
 800149e:	2101      	movs	r1, #1
 80014a0:	200b      	movs	r0, #11
 80014a2:	f7ff fd7f 	bl	8000fa4 <can1_ota_ack>
        } else {
          can1_ota_ack(CANCOM_OTA_SETBOOT_SECTOR_ACK, CAN_OTA_ERROR,
                       &can_ack_event_t);
          break;
        }
        break;
 80014a6:	e008      	b.n	80014ba <StartCan1ReceiveTask+0x3ee>
          can1_ota_ack(CANCOM_OTA_SETBOOT_SECTOR_ACK, CAN_OTA_ERROR,
 80014a8:	f107 0320 	add.w	r3, r7, #32
 80014ac:	461a      	mov	r2, r3
 80014ae:	2100      	movs	r1, #0
 80014b0:	200b      	movs	r0, #11
 80014b2:	f7ff fd77 	bl	8000fa4 <can1_ota_ack>
          break;
 80014b6:	e000      	b.n	80014ba <StartCan1ReceiveTask+0x3ee>
      default:
        break;
 80014b8:	bf00      	nop
      }
    }
    //parse can1 message and foward to tasks, RxData is only sizeof uint8_t * 8
    osDelay(1);
 80014ba:	2001      	movs	r0, #1
 80014bc:	f003 fd50 	bl	8004f60 <osDelay>
    res = osMessageQueueGet(Can1ReceiveQHandle, &can_event_t, 0, portMAX_DELAY);
 80014c0:	e61a      	b.n	80010f8 <StartCan1ReceiveTask+0x2c>
 80014c2:	bf00      	nop
 80014c4:	08010000 	.word	0x08010000
 80014c8:	2000468c 	.word	0x2000468c

080014cc <StartCan2BroadcastTask>:
 * @brief  Function implementing the Can2Broadcast thread.
 * @param  argument: Not used
 * @retval None
 */
void StartCan2BroadcastTask(void *argument)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b08e      	sub	sp, #56	; 0x38
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for (;;) {
    //for master stm32 can2 is used to broad cast config message to slave stm32 can1
    res =
        osMessageQueueGet(Can2BroadcastQHandle, &can_event_t, 0, portMAX_DELAY);
 80014d4:	4b16      	ldr	r3, [pc, #88]	; (8001530 <StartCan2BroadcastTask+0x64>)
 80014d6:	6818      	ldr	r0, [r3, #0]
 80014d8:	f107 010c 	add.w	r1, r7, #12
 80014dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014e0:	2200      	movs	r2, #0
 80014e2:	f003 fe2b 	bl	800513c <osMessageQueueGet>
 80014e6:	6378      	str	r0, [r7, #52]	; 0x34
    printf("CAN2 BC MSG: (0x%x) res: %d \r\n",
           (uint32_t) can_event_t.CanHeader.TxHeader.ExtId, res);
 80014e8:	693b      	ldr	r3, [r7, #16]
    printf("CAN2 BC MSG: (0x%x) res: %d \r\n",
 80014ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014ec:	4619      	mov	r1, r3
 80014ee:	4811      	ldr	r0, [pc, #68]	; (8001534 <StartCan2BroadcastTask+0x68>)
 80014f0:	f006 fbd4 	bl	8007c9c <iprintf>
    /*Configure Transmission process */
    can_event_t.CanHeader.TxHeader.RTR = CAN_RTR_DATA;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61bb      	str	r3, [r7, #24]
    can_event_t.CanHeader.TxHeader.IDE = CAN_ID_EXT;
 80014f8:	2304      	movs	r3, #4
 80014fa:	617b      	str	r3, [r7, #20]
    can_event_t.CanHeader.TxHeader.DLC = 8;
 80014fc:	2308      	movs	r3, #8
 80014fe:	61fb      	str	r3, [r7, #28]
    can_event_t.CanHeader.TxHeader.TransmitGlobalTime = DISABLE;
 8001500:	2300      	movs	r3, #0
 8001502:	f887 3020 	strb.w	r3, [r7, #32]
    /* CAN send test. */
    if (HAL_CAN_AddTxMessage(&hcan2, &can_event_t.CanHeader.TxHeader,
 8001506:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800150a:	f107 030c 	add.w	r3, r7, #12
 800150e:	f103 021c 	add.w	r2, r3, #28
 8001512:	f107 010c 	add.w	r1, r7, #12
 8001516:	4603      	mov	r3, r0
 8001518:	4807      	ldr	r0, [pc, #28]	; (8001538 <StartCan2BroadcastTask+0x6c>)
 800151a:	f000 fdbd 	bl	8002098 <HAL_CAN_AddTxMessage>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <StartCan2BroadcastTask+0x5c>
                             can_event_t.CanData.TxData, &TxMailbox) != HAL_OK)
    {
      /* Transmission request Error */
      Error_Handler();
 8001524:	f000 f860 	bl	80015e8 <Error_Handler>
    }

    osDelay(1);
 8001528:	2001      	movs	r0, #1
 800152a:	f003 fd19 	bl	8004f60 <osDelay>
    res =
 800152e:	e7d1      	b.n	80014d4 <StartCan2BroadcastTask+0x8>
 8001530:	200045d8 	.word	0x200045d8
 8001534:	08008c40 	.word	0x08008c40
 8001538:	20004660 	.word	0x20004660

0800153c <StartCan2ReceiveTask>:
 * @brief  Function implementing the Can2Receive thread.
 * @param  argument: Not used
 * @retval None
 */
void StartCan2ReceiveTask(void *argument)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08e      	sub	sp, #56	; 0x38
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint8_t cancom_mode;

  for (;;) {
    //for master stm32 can2 will receive data from slave stm32
    //for slave stm32 can2 is disabled
    res = osMessageQueueGet(Can2ReceiveQHandle, &can_event_t, 0, portMAX_DELAY);
 8001544:	4b1b      	ldr	r3, [pc, #108]	; (80015b4 <StartCan2ReceiveTask+0x78>)
 8001546:	6818      	ldr	r0, [r3, #0]
 8001548:	f107 010c 	add.w	r1, r7, #12
 800154c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001550:	2200      	movs	r2, #0
 8001552:	f003 fdf3 	bl	800513c <osMessageQueueGet>
 8001556:	6378      	str	r0, [r7, #52]	; 0x34
    printf("rev can2 msg StdId: 0x%x, ExtId: 0x%x\r\n",
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	4619      	mov	r1, r3
 800155e:	4816      	ldr	r0, [pc, #88]	; (80015b8 <StartCan2ReceiveTask+0x7c>)
 8001560:	f006 fb9c 	bl	8007c9c <iprintf>
           can_event_t.CanHeader.RxHeader.StdId,
           can_event_t.CanHeader.RxHeader.ExtId);

    event_type =
        (can_event_t.CanHeader.RxHeader.
 8001564:	693b      	ldr	r3, [r7, #16]
         ExtId & SENSOR_EVENT_MESSAGE_BIT_MASK) >>
 8001566:	0a1b      	lsrs	r3, r3, #8
 8001568:	b2db      	uxtb	r3, r3
    event_type =
 800156a:	f003 030f 	and.w	r3, r3, #15
 800156e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        SENSOR_EVENT_MESSAGE_BIT_SHIFT;
    chip_id =
        (can_event_t.CanHeader.RxHeader.
 8001572:	693b      	ldr	r3, [r7, #16]
         ExtId & CHIP_ID_BIT_MASK) >> CHIP_ID_BIT_SHIFT;
 8001574:	091b      	lsrs	r3, r3, #4
 8001576:	b2db      	uxtb	r3, r3
    chip_id =
 8001578:	f003 030f 	and.w	r3, r3, #15
 800157c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    cancom_mode = can_event_t.CanHeader.RxHeader.ExtId & CANCOM_MODE_BIT_MASK;
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	b2db      	uxtb	r3, r3
 8001584:	f003 030f 	and.w	r3, r3, #15
 8001588:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

    if (chip_id != boardID) {
 800158c:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <StartCan2ReceiveTask+0x80>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8001594:	429a      	cmp	r2, r3
 8001596:	d008      	beq.n	80015aa <StartCan2ReceiveTask+0x6e>
      //foward this can message to can1 can message send
      res = osMessageQueuePut(Can1BroadcastQHandle, &can_event_t, 0, 0);
 8001598:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <StartCan2ReceiveTask+0x84>)
 800159a:	6818      	ldr	r0, [r3, #0]
 800159c:	f107 010c 	add.w	r1, r7, #12
 80015a0:	2300      	movs	r3, #0
 80015a2:	2200      	movs	r2, #0
 80015a4:	f003 fd6a 	bl	800507c <osMessageQueuePut>
 80015a8:	6378      	str	r0, [r7, #52]	; 0x34
    }

    osDelay(1);
 80015aa:	2001      	movs	r0, #1
 80015ac:	f003 fcd8 	bl	8004f60 <osDelay>
    res = osMessageQueueGet(Can2ReceiveQHandle, &can_event_t, 0, portMAX_DELAY);
 80015b0:	e7c8      	b.n	8001544 <StartCan2ReceiveTask+0x8>
 80015b2:	bf00      	nop
 80015b4:	20004700 	.word	0x20004700
 80015b8:	08008c60 	.word	0x08008c60
 80015bc:	20000000 	.word	0x20000000
 80015c0:	200046b8 	.word	0x200046b8

080015c4 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a04      	ldr	r2, [pc, #16]	; (80015e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d101      	bne.n	80015da <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80015d6:	f000 fb1f 	bl	8001c18 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 80015da:	bf00      	nop
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40010000 	.word	0x40010000

080015e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
	...

080015f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	607b      	str	r3, [r7, #4]
 8001602:	4b12      	ldr	r3, [pc, #72]	; (800164c <HAL_MspInit+0x54>)
 8001604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001606:	4a11      	ldr	r2, [pc, #68]	; (800164c <HAL_MspInit+0x54>)
 8001608:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800160c:	6453      	str	r3, [r2, #68]	; 0x44
 800160e:	4b0f      	ldr	r3, [pc, #60]	; (800164c <HAL_MspInit+0x54>)
 8001610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001612:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001616:	607b      	str	r3, [r7, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	603b      	str	r3, [r7, #0]
 800161e:	4b0b      	ldr	r3, [pc, #44]	; (800164c <HAL_MspInit+0x54>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	4a0a      	ldr	r2, [pc, #40]	; (800164c <HAL_MspInit+0x54>)
 8001624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001628:	6413      	str	r3, [r2, #64]	; 0x40
 800162a:	4b08      	ldr	r3, [pc, #32]	; (800164c <HAL_MspInit+0x54>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001632:	603b      	str	r3, [r7, #0]
 8001634:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init */
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001636:	2200      	movs	r2, #0
 8001638:	210f      	movs	r1, #15
 800163a:	f06f 0001 	mvn.w	r0, #1
 800163e:	f001 fa25 	bl	8002a8c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40023800 	.word	0x40023800

08001650 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef * hcan)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08c      	sub	sp, #48	; 0x30
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001658:	f107 031c 	add.w	r3, r7, #28
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]
 8001666:	611a      	str	r2, [r3, #16]
  if (hcan->Instance == CAN1) {
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a4a      	ldr	r2, [pc, #296]	; (8001798 <HAL_CAN_MspInit+0x148>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d13e      	bne.n	80016f0 <HAL_CAN_MspInit+0xa0>
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001672:	4b4a      	ldr	r3, [pc, #296]	; (800179c <HAL_CAN_MspInit+0x14c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	3301      	adds	r3, #1
 8001678:	4a48      	ldr	r2, [pc, #288]	; (800179c <HAL_CAN_MspInit+0x14c>)
 800167a:	6013      	str	r3, [r2, #0]
    if (HAL_RCC_CAN1_CLK_ENABLED == 1) {
 800167c:	4b47      	ldr	r3, [pc, #284]	; (800179c <HAL_CAN_MspInit+0x14c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d10d      	bne.n	80016a0 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001684:	2300      	movs	r3, #0
 8001686:	61bb      	str	r3, [r7, #24]
 8001688:	4b45      	ldr	r3, [pc, #276]	; (80017a0 <HAL_CAN_MspInit+0x150>)
 800168a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168c:	4a44      	ldr	r2, [pc, #272]	; (80017a0 <HAL_CAN_MspInit+0x150>)
 800168e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001692:	6413      	str	r3, [r2, #64]	; 0x40
 8001694:	4b42      	ldr	r3, [pc, #264]	; (80017a0 <HAL_CAN_MspInit+0x150>)
 8001696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001698:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800169c:	61bb      	str	r3, [r7, #24]
 800169e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]
 80016a4:	4b3e      	ldr	r3, [pc, #248]	; (80017a0 <HAL_CAN_MspInit+0x150>)
 80016a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a8:	4a3d      	ldr	r2, [pc, #244]	; (80017a0 <HAL_CAN_MspInit+0x150>)
 80016aa:	f043 0301 	orr.w	r3, r3, #1
 80016ae:	6313      	str	r3, [r2, #48]	; 0x30
 80016b0:	4b3b      	ldr	r3, [pc, #236]	; (80017a0 <HAL_CAN_MspInit+0x150>)
 80016b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b4:	f003 0301 	and.w	r3, r3, #1
 80016b8:	617b      	str	r3, [r7, #20]
 80016ba:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 80016bc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80016c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c2:	2302      	movs	r3, #2
 80016c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ca:	2303      	movs	r3, #3
 80016cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80016ce:	2309      	movs	r3, #9
 80016d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d2:	f107 031c 	add.w	r3, r7, #28
 80016d6:	4619      	mov	r1, r3
 80016d8:	4832      	ldr	r0, [pc, #200]	; (80017a4 <HAL_CAN_MspInit+0x154>)
 80016da:	f001 fcd9 	bl	8003090 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80016de:	2200      	movs	r2, #0
 80016e0:	2105      	movs	r1, #5
 80016e2:	2014      	movs	r0, #20
 80016e4:	f001 f9d2 	bl	8002a8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80016e8:	2014      	movs	r0, #20
 80016ea:	f001 f9eb 	bl	8002ac4 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN CAN2_MspInit 1 */

    /* USER CODE END CAN2_MspInit 1 */
  }

}
 80016ee:	e04f      	b.n	8001790 <HAL_CAN_MspInit+0x140>
  } else if (hcan->Instance == CAN2) {
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a2c      	ldr	r2, [pc, #176]	; (80017a8 <HAL_CAN_MspInit+0x158>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d14a      	bne.n	8001790 <HAL_CAN_MspInit+0x140>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	613b      	str	r3, [r7, #16]
 80016fe:	4b28      	ldr	r3, [pc, #160]	; (80017a0 <HAL_CAN_MspInit+0x150>)
 8001700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001702:	4a27      	ldr	r2, [pc, #156]	; (80017a0 <HAL_CAN_MspInit+0x150>)
 8001704:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001708:	6413      	str	r3, [r2, #64]	; 0x40
 800170a:	4b25      	ldr	r3, [pc, #148]	; (80017a0 <HAL_CAN_MspInit+0x150>)
 800170c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001712:	613b      	str	r3, [r7, #16]
 8001714:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001716:	4b21      	ldr	r3, [pc, #132]	; (800179c <HAL_CAN_MspInit+0x14c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	3301      	adds	r3, #1
 800171c:	4a1f      	ldr	r2, [pc, #124]	; (800179c <HAL_CAN_MspInit+0x14c>)
 800171e:	6013      	str	r3, [r2, #0]
    if (HAL_RCC_CAN1_CLK_ENABLED == 1) {
 8001720:	4b1e      	ldr	r3, [pc, #120]	; (800179c <HAL_CAN_MspInit+0x14c>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d10d      	bne.n	8001744 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001728:	2300      	movs	r3, #0
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	4b1c      	ldr	r3, [pc, #112]	; (80017a0 <HAL_CAN_MspInit+0x150>)
 800172e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001730:	4a1b      	ldr	r2, [pc, #108]	; (80017a0 <HAL_CAN_MspInit+0x150>)
 8001732:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001736:	6413      	str	r3, [r2, #64]	; 0x40
 8001738:	4b19      	ldr	r3, [pc, #100]	; (80017a0 <HAL_CAN_MspInit+0x150>)
 800173a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001744:	2300      	movs	r3, #0
 8001746:	60bb      	str	r3, [r7, #8]
 8001748:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <HAL_CAN_MspInit+0x150>)
 800174a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174c:	4a14      	ldr	r2, [pc, #80]	; (80017a0 <HAL_CAN_MspInit+0x150>)
 800174e:	f043 0302 	orr.w	r3, r3, #2
 8001752:	6313      	str	r3, [r2, #48]	; 0x30
 8001754:	4b12      	ldr	r3, [pc, #72]	; (80017a0 <HAL_CAN_MspInit+0x150>)
 8001756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001758:	f003 0302 	and.w	r3, r3, #2
 800175c:	60bb      	str	r3, [r7, #8]
 800175e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8001760:	2360      	movs	r3, #96	; 0x60
 8001762:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001764:	2302      	movs	r3, #2
 8001766:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800176c:	2303      	movs	r3, #3
 800176e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001770:	2309      	movs	r3, #9
 8001772:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001774:	f107 031c 	add.w	r3, r7, #28
 8001778:	4619      	mov	r1, r3
 800177a:	480c      	ldr	r0, [pc, #48]	; (80017ac <HAL_CAN_MspInit+0x15c>)
 800177c:	f001 fc88 	bl	8003090 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8001780:	2200      	movs	r2, #0
 8001782:	2105      	movs	r1, #5
 8001784:	2040      	movs	r0, #64	; 0x40
 8001786:	f001 f981 	bl	8002a8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800178a:	2040      	movs	r0, #64	; 0x40
 800178c:	f001 f99a 	bl	8002ac4 <HAL_NVIC_EnableIRQ>
}
 8001790:	bf00      	nop
 8001792:	3730      	adds	r7, #48	; 0x30
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40006400 	.word	0x40006400
 800179c:	200000ac 	.word	0x200000ac
 80017a0:	40023800 	.word	0x40023800
 80017a4:	40020000 	.word	0x40020000
 80017a8:	40006800 	.word	0x40006800
 80017ac:	40020400 	.word	0x40020400

080017b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef * hi2c)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08a      	sub	sp, #40	; 0x28
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80017b8:	f107 0314 	add.w	r3, r7, #20
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]
 80017c6:	611a      	str	r2, [r3, #16]
  if (hi2c->Instance == I2C2) {
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a19      	ldr	r2, [pc, #100]	; (8001834 <HAL_I2C_MspInit+0x84>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d12c      	bne.n	800182c <HAL_I2C_MspInit+0x7c>
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	613b      	str	r3, [r7, #16]
 80017d6:	4b18      	ldr	r3, [pc, #96]	; (8001838 <HAL_I2C_MspInit+0x88>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	4a17      	ldr	r2, [pc, #92]	; (8001838 <HAL_I2C_MspInit+0x88>)
 80017dc:	f043 0302 	orr.w	r3, r3, #2
 80017e0:	6313      	str	r3, [r2, #48]	; 0x30
 80017e2:	4b15      	ldr	r3, [pc, #84]	; (8001838 <HAL_I2C_MspInit+0x88>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	613b      	str	r3, [r7, #16]
 80017ec:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_11;
 80017ee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80017f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017f4:	2312      	movs	r3, #18
 80017f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017f8:	2301      	movs	r3, #1
 80017fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fc:	2303      	movs	r3, #3
 80017fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001800:	2304      	movs	r3, #4
 8001802:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	4619      	mov	r1, r3
 800180a:	480c      	ldr	r0, [pc, #48]	; (800183c <HAL_I2C_MspInit+0x8c>)
 800180c:	f001 fc40 	bl	8003090 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001810:	2300      	movs	r3, #0
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	4b08      	ldr	r3, [pc, #32]	; (8001838 <HAL_I2C_MspInit+0x88>)
 8001816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001818:	4a07      	ldr	r2, [pc, #28]	; (8001838 <HAL_I2C_MspInit+0x88>)
 800181a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800181e:	6413      	str	r3, [r2, #64]	; 0x40
 8001820:	4b05      	ldr	r3, [pc, #20]	; (8001838 <HAL_I2C_MspInit+0x88>)
 8001822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001824:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 800182c:	bf00      	nop
 800182e:	3728      	adds	r7, #40	; 0x28
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40005800 	.word	0x40005800
 8001838:	40023800 	.word	0x40023800
 800183c:	40020400 	.word	0x40020400

08001840 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef * huart)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08a      	sub	sp, #40	; 0x28
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]
  if (huart->Instance == USART2) {
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a19      	ldr	r2, [pc, #100]	; (80018c4 <HAL_UART_MspInit+0x84>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d12b      	bne.n	80018ba <HAL_UART_MspInit+0x7a>
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	613b      	str	r3, [r7, #16]
 8001866:	4b18      	ldr	r3, [pc, #96]	; (80018c8 <HAL_UART_MspInit+0x88>)
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	4a17      	ldr	r2, [pc, #92]	; (80018c8 <HAL_UART_MspInit+0x88>)
 800186c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001870:	6413      	str	r3, [r2, #64]	; 0x40
 8001872:	4b15      	ldr	r3, [pc, #84]	; (80018c8 <HAL_UART_MspInit+0x88>)
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187a:	613b      	str	r3, [r7, #16]
 800187c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <HAL_UART_MspInit+0x88>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	4a10      	ldr	r2, [pc, #64]	; (80018c8 <HAL_UART_MspInit+0x88>)
 8001888:	f043 0301 	orr.w	r3, r3, #1
 800188c:	6313      	str	r3, [r2, #48]	; 0x30
 800188e:	4b0e      	ldr	r3, [pc, #56]	; (80018c8 <HAL_UART_MspInit+0x88>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 800189a:	230c      	movs	r3, #12
 800189c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189e:	2302      	movs	r3, #2
 80018a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a6:	2303      	movs	r3, #3
 80018a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018aa:	2307      	movs	r3, #7
 80018ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ae:	f107 0314 	add.w	r3, r7, #20
 80018b2:	4619      	mov	r1, r3
 80018b4:	4805      	ldr	r0, [pc, #20]	; (80018cc <HAL_UART_MspInit+0x8c>)
 80018b6:	f001 fbeb 	bl	8003090 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 80018ba:	bf00      	nop
 80018bc:	3728      	adds	r7, #40	; 0x28
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40004400 	.word	0x40004400
 80018c8:	40023800 	.word	0x40023800
 80018cc:	40020000 	.word	0x40020000

080018d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b08c      	sub	sp, #48	; 0x30
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef clkconfig;
  uint32_t uwTimclock = 0;
 80018d8:	2300      	movs	r3, #0
 80018da:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t uwPrescalerValue = 0;
 80018dc:	2300      	movs	r3, #0
 80018de:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0);
 80018e0:	2200      	movs	r2, #0
 80018e2:	6879      	ldr	r1, [r7, #4]
 80018e4:	2019      	movs	r0, #25
 80018e6:	f001 f8d1 	bl	8002a8c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80018ea:	2019      	movs	r0, #25
 80018ec:	f001 f8ea 	bl	8002ac4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80018f0:	2300      	movs	r3, #0
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	4b1f      	ldr	r3, [pc, #124]	; (8001974 <HAL_InitTick+0xa4>)
 80018f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f8:	4a1e      	ldr	r2, [pc, #120]	; (8001974 <HAL_InitTick+0xa4>)
 80018fa:	f043 0301 	orr.w	r3, r3, #1
 80018fe:	6453      	str	r3, [r2, #68]	; 0x44
 8001900:	4b1c      	ldr	r3, [pc, #112]	; (8001974 <HAL_InitTick+0xa4>)
 8001902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800190c:	f107 0210 	add.w	r2, r7, #16
 8001910:	f107 0314 	add.w	r3, r7, #20
 8001914:	4611      	mov	r1, r2
 8001916:	4618      	mov	r0, r3
 8001918:	f002 fb62 	bl	8003fe0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2 * HAL_RCC_GetPCLK2Freq();
 800191c:	f002 fb4c 	bl	8003fb8 <HAL_RCC_GetPCLK2Freq>
 8001920:	4603      	mov	r3, r0
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001928:	4a13      	ldr	r2, [pc, #76]	; (8001978 <HAL_InitTick+0xa8>)
 800192a:	fba2 2303 	umull	r2, r3, r2, r3
 800192e:	0c9b      	lsrs	r3, r3, #18
 8001930:	3b01      	subs	r3, #1
 8001932:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001934:	4b11      	ldr	r3, [pc, #68]	; (800197c <HAL_InitTick+0xac>)
 8001936:	4a12      	ldr	r2, [pc, #72]	; (8001980 <HAL_InitTick+0xb0>)
 8001938:	601a      	str	r2, [r3, #0]
     + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
     + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
     + ClockDivision = 0
     + Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800193a:	4b10      	ldr	r3, [pc, #64]	; (800197c <HAL_InitTick+0xac>)
 800193c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001940:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001942:	4a0e      	ldr	r2, [pc, #56]	; (800197c <HAL_InitTick+0xac>)
 8001944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001946:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001948:	4b0c      	ldr	r3, [pc, #48]	; (800197c <HAL_InitTick+0xac>)
 800194a:	2200      	movs	r2, #0
 800194c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800194e:	4b0b      	ldr	r3, [pc, #44]	; (800197c <HAL_InitTick+0xac>)
 8001950:	2200      	movs	r2, #0
 8001952:	609a      	str	r2, [r3, #8]
  if (HAL_TIM_Base_Init(&htim1) == HAL_OK) {
 8001954:	4809      	ldr	r0, [pc, #36]	; (800197c <HAL_InitTick+0xac>)
 8001956:	f002 fc43 	bl	80041e0 <HAL_TIM_Base_Init>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d104      	bne.n	800196a <HAL_InitTick+0x9a>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001960:	4806      	ldr	r0, [pc, #24]	; (800197c <HAL_InitTick+0xac>)
 8001962:	f002 fc97 	bl	8004294 <HAL_TIM_Base_Start_IT>
 8001966:	4603      	mov	r3, r0
 8001968:	e000      	b.n	800196c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
}
 800196c:	4618      	mov	r0, r3
 800196e:	3730      	adds	r7, #48	; 0x30
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40023800 	.word	0x40023800
 8001978:	431bde83 	.word	0x431bde83
 800197c:	20004734 	.word	0x20004734
 8001980:	40010000 	.word	0x40010000

08001984 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1) {
 8001988:	e7fe      	b.n	8001988 <NMI_Handler+0x4>

0800198a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800198a:	b480      	push	{r7}
 800198c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1) {
 800198e:	e7fe      	b.n	800198e <HardFault_Handler+0x4>

08001990 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1) {
 8001994:	e7fe      	b.n	8001994 <MemManage_Handler+0x4>

08001996 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001996:	b480      	push	{r7}
 8001998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1) {
 800199a:	e7fe      	b.n	800199a <BusFault_Handler+0x4>

0800199c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1) {
 80019a0:	e7fe      	b.n	80019a0 <UsageFault_Handler+0x4>

080019a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019a2:	b480      	push	{r7}
 80019a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80019b4:	2008      	movs	r0, #8
 80019b6:	f001 fd39 	bl	800342c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
	...

080019c0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80019c4:	4802      	ldr	r0, [pc, #8]	; (80019d0 <CAN1_RX0_IRQHandler+0x10>)
 80019c6:	f000 fd7a 	bl	80024be <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20004704 	.word	0x20004704

080019d4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80019d8:	2040      	movs	r0, #64	; 0x40
 80019da:	f001 fd27 	bl	800342c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
	...

080019e4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019e8:	4802      	ldr	r0, [pc, #8]	; (80019f4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80019ea:	f002 fcc3 	bl	8004374 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20004734 	.word	0x20004734

080019f8 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80019fc:	4802      	ldr	r0, [pc, #8]	; (8001a08 <CAN2_RX0_IRQHandler+0x10>)
 80019fe:	f000 fd5e 	bl	80024be <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20004660 	.word	0x20004660

08001a0c <_read>:
  }                             /* Make sure we hang here */
}

__attribute__ ((weak))
int _read(int file, char *ptr, int len)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]
 8001a1c:	e00a      	b.n	8001a34 <_read+0x28>
    *ptr++ = __io_getchar();
 8001a1e:	f3af 8000 	nop.w
 8001a22:	4601      	mov	r1, r0
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	1c5a      	adds	r2, r3, #1
 8001a28:	60ba      	str	r2, [r7, #8]
 8001a2a:	b2ca      	uxtb	r2, r1
 8001a2c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	3301      	adds	r3, #1
 8001a32:	617b      	str	r3, [r7, #20]
 8001a34:	697a      	ldr	r2, [r7, #20]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	dbf0      	blt.n	8001a1e <_read+0x12>
  }

  return len;
 8001a3c:	687b      	ldr	r3, [r7, #4]
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3718      	adds	r7, #24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <_write>:

__attribute__ ((weak))
int _write(int file, char *ptr, int len)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b086      	sub	sp, #24
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	60f8      	str	r0, [r7, #12]
 8001a4e:	60b9      	str	r1, [r7, #8]
 8001a50:	607a      	str	r2, [r7, #4]
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001a52:	2300      	movs	r3, #0
 8001a54:	617b      	str	r3, [r7, #20]
 8001a56:	e009      	b.n	8001a6c <_write+0x26>
    __io_putchar(*ptr++);
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	1c5a      	adds	r2, r3, #1
 8001a5c:	60ba      	str	r2, [r7, #8]
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff f9e3 	bl	8000e2c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	617b      	str	r3, [r7, #20]
 8001a6c:	697a      	ldr	r2, [r7, #20]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	dbf1      	blt.n	8001a58 <_write+0x12>
  }
  return len;
 8001a74:	687b      	ldr	r3, [r7, #4]
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3718      	adds	r7, #24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <_close>:

int _close(int file)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
  return -1;
 8001a86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <_fstat>:

int _fstat(int file, struct stat *st)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b083      	sub	sp, #12
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
 8001a9e:	6039      	str	r1, [r7, #0]
  st->st_mode = S_IFCHR;
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001aa6:	605a      	str	r2, [r3, #4]
  return 0;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <_isatty>:

int _isatty(int file)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
  return 1;
 8001abe:	2301      	movs	r3, #1
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	607a      	str	r2, [r7, #4]
  return 0;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3714      	adds	r7, #20
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
	...

08001ae8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end;          /* Symbol defined in the linker script */
  extern uint8_t _estack;       /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size;      /* Symbol defined in the linker script */
  const uint32_t stack_limit =
      (uint32_t) & _estack - (uint32_t) & _Min_Stack_Size;
 8001af0:	4a14      	ldr	r2, [pc, #80]	; (8001b44 <_sbrk+0x5c>)
 8001af2:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <_sbrk+0x60>)
  const uint32_t stack_limit =
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *) stack_limit;
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end) {
 8001afc:	4b13      	ldr	r3, [pc, #76]	; (8001b4c <_sbrk+0x64>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d102      	bne.n	8001b0a <_sbrk+0x22>
    __sbrk_heap_end = &_end;
 8001b04:	4b11      	ldr	r3, [pc, #68]	; (8001b4c <_sbrk+0x64>)
 8001b06:	4a12      	ldr	r2, [pc, #72]	; (8001b50 <_sbrk+0x68>)
 8001b08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap) {
 8001b0a:	4b10      	ldr	r3, [pc, #64]	; (8001b4c <_sbrk+0x64>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4413      	add	r3, r2
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d207      	bcs.n	8001b28 <_sbrk+0x40>
    errno = ENOMEM;
 8001b18:	f006 f880 	bl	8007c1c <__errno>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	220c      	movs	r2, #12
 8001b20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b26:	e009      	b.n	8001b3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b28:	4b08      	ldr	r3, [pc, #32]	; (8001b4c <_sbrk+0x64>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b2e:	4b07      	ldr	r3, [pc, #28]	; (8001b4c <_sbrk+0x64>)
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4413      	add	r3, r2
 8001b36:	4a05      	ldr	r2, [pc, #20]	; (8001b4c <_sbrk+0x64>)
 8001b38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3718      	adds	r7, #24
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20007000 	.word	0x20007000
 8001b48:	00000400 	.word	0x00000400
 8001b4c:	200000b0 	.word	0x200000b0
 8001b50:	200047f0 	.word	0x200047f0

08001b54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------ */
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2));    /* set CP10 and CP11 Full Access */
 8001b58:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <SystemInit+0x28>)
 8001b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b5e:	4a07      	ldr	r2, [pc, #28]	; (8001b7c <SystemInit+0x28>)
 8001b60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------ */
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET;      /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET;     /* Vector Table Relocation in Internal FLASH */
 8001b68:	4b04      	ldr	r3, [pc, #16]	; (8001b7c <SystemInit+0x28>)
 8001b6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b6e:	609a      	str	r2, [r3, #8]
#endif
}
 8001b70:	bf00      	nop
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	e000ed00 	.word	0xe000ed00

08001b80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bb8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b84:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b86:	e003      	b.n	8001b90 <LoopCopyDataInit>

08001b88 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b88:	4b0c      	ldr	r3, [pc, #48]	; (8001bbc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b8a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b8c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b8e:	3104      	adds	r1, #4

08001b90 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b90:	480b      	ldr	r0, [pc, #44]	; (8001bc0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b92:	4b0c      	ldr	r3, [pc, #48]	; (8001bc4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001b94:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b96:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b98:	d3f6      	bcc.n	8001b88 <CopyDataInit>
  ldr  r2, =_sbss
 8001b9a:	4a0b      	ldr	r2, [pc, #44]	; (8001bc8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001b9c:	e002      	b.n	8001ba4 <LoopFillZerobss>

08001b9e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b9e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ba0:	f842 3b04 	str.w	r3, [r2], #4

08001ba4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ba4:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001ba6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ba8:	d3f9      	bcc.n	8001b9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001baa:	f7ff ffd3 	bl	8001b54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bae:	f006 f83b 	bl	8007c28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bb2:	f7fe fe79 	bl	80008a8 <main>
  bx  lr    
 8001bb6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001bb8:	20007000 	.word	0x20007000
  ldr  r3, =_sidata
 8001bbc:	08008e74 	.word	0x08008e74
  ldr  r0, =_sdata
 8001bc0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001bc4:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8001bc8:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8001bcc:	200047f0 	.word	0x200047f0

08001bd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bd0:	e7fe      	b.n	8001bd0 <ADC_IRQHandler>
	...

08001bd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bd8:	4b0e      	ldr	r3, [pc, #56]	; (8001c14 <HAL_Init+0x40>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a0d      	ldr	r2, [pc, #52]	; (8001c14 <HAL_Init+0x40>)
 8001bde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001be2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001be4:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <HAL_Init+0x40>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a0a      	ldr	r2, [pc, #40]	; (8001c14 <HAL_Init+0x40>)
 8001bea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bf0:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <HAL_Init+0x40>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a07      	ldr	r2, [pc, #28]	; (8001c14 <HAL_Init+0x40>)
 8001bf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bfc:	2003      	movs	r0, #3
 8001bfe:	f000 ff3a 	bl	8002a76 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c02:	2000      	movs	r0, #0
 8001c04:	f7ff fe64 	bl	80018d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c08:	f7ff fcf6 	bl	80015f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40023c00 	.word	0x40023c00

08001c18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c1c:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <HAL_IncTick+0x20>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	461a      	mov	r2, r3
 8001c22:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <HAL_IncTick+0x24>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4413      	add	r3, r2
 8001c28:	4a04      	ldr	r2, [pc, #16]	; (8001c3c <HAL_IncTick+0x24>)
 8001c2a:	6013      	str	r3, [r2, #0]
}
 8001c2c:	bf00      	nop
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	2000000c 	.word	0x2000000c
 8001c3c:	2000477c 	.word	0x2000477c

08001c40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  return uwTick;
 8001c44:	4b03      	ldr	r3, [pc, #12]	; (8001c54 <HAL_GetTick+0x14>)
 8001c46:	681b      	ldr	r3, [r3, #0]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	2000477c 	.word	0x2000477c

08001c58 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d101      	bne.n	8001c6a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e0ed      	b.n	8001e46 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d102      	bne.n	8001c7c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f7ff fcea 	bl	8001650 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f022 0202 	bic.w	r2, r2, #2
 8001c8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c8c:	f7ff ffd8 	bl	8001c40 <HAL_GetTick>
 8001c90:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c92:	e012      	b.n	8001cba <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c94:	f7ff ffd4 	bl	8001c40 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b0a      	cmp	r3, #10
 8001ca0:	d90b      	bls.n	8001cba <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2205      	movs	r2, #5
 8001cb2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e0c5      	b.n	8001e46 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d1e5      	bne.n	8001c94 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f042 0201 	orr.w	r2, r2, #1
 8001cd6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cd8:	f7ff ffb2 	bl	8001c40 <HAL_GetTick>
 8001cdc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001cde:	e012      	b.n	8001d06 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ce0:	f7ff ffae 	bl	8001c40 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b0a      	cmp	r3, #10
 8001cec:	d90b      	bls.n	8001d06 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2205      	movs	r2, #5
 8001cfe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e09f      	b.n	8001e46 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f003 0301 	and.w	r3, r3, #1
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d0e5      	beq.n	8001ce0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	7e1b      	ldrb	r3, [r3, #24]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d108      	bne.n	8001d2e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	e007      	b.n	8001d3e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	7e5b      	ldrb	r3, [r3, #25]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d108      	bne.n	8001d58 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	e007      	b.n	8001d68 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d66:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	7e9b      	ldrb	r3, [r3, #26]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d108      	bne.n	8001d82 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f042 0220 	orr.w	r2, r2, #32
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	e007      	b.n	8001d92 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f022 0220 	bic.w	r2, r2, #32
 8001d90:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	7edb      	ldrb	r3, [r3, #27]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d108      	bne.n	8001dac <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f022 0210 	bic.w	r2, r2, #16
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	e007      	b.n	8001dbc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f042 0210 	orr.w	r2, r2, #16
 8001dba:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	7f1b      	ldrb	r3, [r3, #28]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d108      	bne.n	8001dd6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f042 0208 	orr.w	r2, r2, #8
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	e007      	b.n	8001de6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f022 0208 	bic.w	r2, r2, #8
 8001de4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	7f5b      	ldrb	r3, [r3, #29]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d108      	bne.n	8001e00 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f042 0204 	orr.w	r2, r2, #4
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	e007      	b.n	8001e10 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f022 0204 	bic.w	r2, r2, #4
 8001e0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689a      	ldr	r2, [r3, #8]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	695b      	ldr	r3, [r3, #20]
 8001e24:	ea42 0103 	orr.w	r1, r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	1e5a      	subs	r2, r3, #1
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	430a      	orrs	r2, r1
 8001e34:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
	...

08001e50 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b087      	sub	sp, #28
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e66:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001e68:	7cfb      	ldrb	r3, [r7, #19]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d003      	beq.n	8001e76 <HAL_CAN_ConfigFilter+0x26>
 8001e6e:	7cfb      	ldrb	r3, [r7, #19]
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	f040 80be 	bne.w	8001ff2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001e76:	4b65      	ldr	r3, [pc, #404]	; (800200c <HAL_CAN_ConfigFilter+0x1bc>)
 8001e78:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e80:	f043 0201 	orr.w	r2, r3, #1
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e90:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea4:	021b      	lsls	r3, r3, #8
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	695b      	ldr	r3, [r3, #20]
 8001eb2:	f003 031f 	and.w	r3, r3, #31
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	401a      	ands	r2, r3
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	69db      	ldr	r3, [r3, #28]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d123      	bne.n	8001f20 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	401a      	ands	r2, r3
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001efa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	3248      	adds	r2, #72	; 0x48
 8001f00:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f14:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f16:	6979      	ldr	r1, [r7, #20]
 8001f18:	3348      	adds	r3, #72	; 0x48
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	440b      	add	r3, r1
 8001f1e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	69db      	ldr	r3, [r3, #28]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d122      	bne.n	8001f6e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	431a      	orrs	r2, r3
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001f48:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	3248      	adds	r2, #72	; 0x48
 8001f4e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f62:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f64:	6979      	ldr	r1, [r7, #20]
 8001f66:	3348      	adds	r3, #72	; 0x48
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	440b      	add	r3, r1
 8001f6c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d109      	bne.n	8001f8a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	401a      	ands	r2, r3
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001f88:	e007      	b.n	8001f9a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	431a      	orrs	r2, r3
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d109      	bne.n	8001fb6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	43db      	mvns	r3, r3
 8001fac:	401a      	ands	r2, r3
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001fb4:	e007      	b.n	8001fc6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	6a1b      	ldr	r3, [r3, #32]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d107      	bne.n	8001fde <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001fe4:	f023 0201 	bic.w	r2, r3, #1
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	e006      	b.n	8002000 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
  }
}
 8002000:	4618      	mov	r0, r3
 8002002:	371c      	adds	r7, #28
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	40006400 	.word	0x40006400

08002010 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800201e:	b2db      	uxtb	r3, r3
 8002020:	2b01      	cmp	r3, #1
 8002022:	d12e      	bne.n	8002082 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2202      	movs	r2, #2
 8002028:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f022 0201 	bic.w	r2, r2, #1
 800203a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800203c:	f7ff fe00 	bl	8001c40 <HAL_GetTick>
 8002040:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002042:	e012      	b.n	800206a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002044:	f7ff fdfc 	bl	8001c40 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b0a      	cmp	r3, #10
 8002050:	d90b      	bls.n	800206a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002056:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2205      	movs	r2, #5
 8002062:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e012      	b.n	8002090 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	2b00      	cmp	r3, #0
 8002076:	d1e5      	bne.n	8002044 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800207e:	2300      	movs	r3, #0
 8002080:	e006      	b.n	8002090 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002086:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
  }
}
 8002090:	4618      	mov	r0, r3
 8002092:	3710      	adds	r7, #16
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002098:	b480      	push	{r7}
 800209a:	b089      	sub	sp, #36	; 0x24
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
 80020a4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020ac:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80020b6:	7ffb      	ldrb	r3, [r7, #31]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d003      	beq.n	80020c4 <HAL_CAN_AddTxMessage+0x2c>
 80020bc:	7ffb      	ldrb	r3, [r7, #31]
 80020be:	2b02      	cmp	r3, #2
 80020c0:	f040 80b8 	bne.w	8002234 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d10a      	bne.n	80020e4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d105      	bne.n	80020e4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f000 80a0 	beq.w	8002224 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	0e1b      	lsrs	r3, r3, #24
 80020e8:	f003 0303 	and.w	r3, r3, #3
 80020ec:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d907      	bls.n	8002104 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e09e      	b.n	8002242 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002104:	2201      	movs	r2, #1
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	409a      	lsls	r2, r3
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10d      	bne.n	8002132 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002120:	68f9      	ldr	r1, [r7, #12]
 8002122:	6809      	ldr	r1, [r1, #0]
 8002124:	431a      	orrs	r2, r3
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	3318      	adds	r3, #24
 800212a:	011b      	lsls	r3, r3, #4
 800212c:	440b      	add	r3, r1
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	e00f      	b.n	8002152 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800213c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002142:	68f9      	ldr	r1, [r7, #12]
 8002144:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002146:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	3318      	adds	r3, #24
 800214c:	011b      	lsls	r3, r3, #4
 800214e:	440b      	add	r3, r1
 8002150:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6819      	ldr	r1, [r3, #0]
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	691a      	ldr	r2, [r3, #16]
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	3318      	adds	r3, #24
 800215e:	011b      	lsls	r3, r3, #4
 8002160:	440b      	add	r3, r1
 8002162:	3304      	adds	r3, #4
 8002164:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	7d1b      	ldrb	r3, [r3, #20]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d111      	bne.n	8002192 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	3318      	adds	r3, #24
 8002176:	011b      	lsls	r3, r3, #4
 8002178:	4413      	add	r3, r2
 800217a:	3304      	adds	r3, #4
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	6811      	ldr	r1, [r2, #0]
 8002182:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	3318      	adds	r3, #24
 800218a:	011b      	lsls	r3, r3, #4
 800218c:	440b      	add	r3, r1
 800218e:	3304      	adds	r3, #4
 8002190:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	3307      	adds	r3, #7
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	061a      	lsls	r2, r3, #24
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	3306      	adds	r3, #6
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	041b      	lsls	r3, r3, #16
 80021a2:	431a      	orrs	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3305      	adds	r3, #5
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	021b      	lsls	r3, r3, #8
 80021ac:	4313      	orrs	r3, r2
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	3204      	adds	r2, #4
 80021b2:	7812      	ldrb	r2, [r2, #0]
 80021b4:	4610      	mov	r0, r2
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	6811      	ldr	r1, [r2, #0]
 80021ba:	ea43 0200 	orr.w	r2, r3, r0
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	011b      	lsls	r3, r3, #4
 80021c2:	440b      	add	r3, r1
 80021c4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80021c8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	3303      	adds	r3, #3
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	061a      	lsls	r2, r3, #24
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	3302      	adds	r3, #2
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	041b      	lsls	r3, r3, #16
 80021da:	431a      	orrs	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3301      	adds	r3, #1
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	021b      	lsls	r3, r3, #8
 80021e4:	4313      	orrs	r3, r2
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	7812      	ldrb	r2, [r2, #0]
 80021ea:	4610      	mov	r0, r2
 80021ec:	68fa      	ldr	r2, [r7, #12]
 80021ee:	6811      	ldr	r1, [r2, #0]
 80021f0:	ea43 0200 	orr.w	r2, r3, r0
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	011b      	lsls	r3, r3, #4
 80021f8:	440b      	add	r3, r1
 80021fa:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80021fe:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	3318      	adds	r3, #24
 8002208:	011b      	lsls	r3, r3, #4
 800220a:	4413      	add	r3, r2
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	6811      	ldr	r1, [r2, #0]
 8002212:	f043 0201 	orr.w	r2, r3, #1
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	3318      	adds	r3, #24
 800221a:	011b      	lsls	r3, r3, #4
 800221c:	440b      	add	r3, r1
 800221e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002220:	2300      	movs	r3, #0
 8002222:	e00e      	b.n	8002242 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002228:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e006      	b.n	8002242 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002238:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
  }
}
 8002242:	4618      	mov	r0, r3
 8002244:	3724      	adds	r7, #36	; 0x24
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800224e:	b480      	push	{r7}
 8002250:	b087      	sub	sp, #28
 8002252:	af00      	add	r7, sp, #0
 8002254:	60f8      	str	r0, [r7, #12]
 8002256:	60b9      	str	r1, [r7, #8]
 8002258:	607a      	str	r2, [r7, #4]
 800225a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002262:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002264:	7dfb      	ldrb	r3, [r7, #23]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d003      	beq.n	8002272 <HAL_CAN_GetRxMessage+0x24>
 800226a:	7dfb      	ldrb	r3, [r7, #23]
 800226c:	2b02      	cmp	r3, #2
 800226e:	f040 80f3 	bne.w	8002458 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d10e      	bne.n	8002296 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	f003 0303 	and.w	r3, r3, #3
 8002282:	2b00      	cmp	r3, #0
 8002284:	d116      	bne.n	80022b4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e0e7      	b.n	8002466 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	f003 0303 	and.w	r3, r3, #3
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d107      	bne.n	80022b4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e0d8      	b.n	8002466 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	331b      	adds	r3, #27
 80022bc:	011b      	lsls	r3, r3, #4
 80022be:	4413      	add	r3, r2
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0204 	and.w	r2, r3, #4
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d10c      	bne.n	80022ec <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	331b      	adds	r3, #27
 80022da:	011b      	lsls	r3, r3, #4
 80022dc:	4413      	add	r3, r2
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	0d5b      	lsrs	r3, r3, #21
 80022e2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	e00b      	b.n	8002304 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	331b      	adds	r3, #27
 80022f4:	011b      	lsls	r3, r3, #4
 80022f6:	4413      	add	r3, r2
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	08db      	lsrs	r3, r3, #3
 80022fc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	331b      	adds	r3, #27
 800230c:	011b      	lsls	r3, r3, #4
 800230e:	4413      	add	r3, r2
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0202 	and.w	r2, r3, #2
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	331b      	adds	r3, #27
 8002322:	011b      	lsls	r3, r3, #4
 8002324:	4413      	add	r3, r2
 8002326:	3304      	adds	r3, #4
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 020f 	and.w	r2, r3, #15
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	331b      	adds	r3, #27
 800233a:	011b      	lsls	r3, r3, #4
 800233c:	4413      	add	r3, r2
 800233e:	3304      	adds	r3, #4
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	0a1b      	lsrs	r3, r3, #8
 8002344:	b2da      	uxtb	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	331b      	adds	r3, #27
 8002352:	011b      	lsls	r3, r3, #4
 8002354:	4413      	add	r3, r2
 8002356:	3304      	adds	r3, #4
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	0c1b      	lsrs	r3, r3, #16
 800235c:	b29a      	uxth	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	011b      	lsls	r3, r3, #4
 800236a:	4413      	add	r3, r2
 800236c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	b2da      	uxtb	r2, r3
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	011b      	lsls	r3, r3, #4
 8002380:	4413      	add	r3, r2
 8002382:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	0a1a      	lsrs	r2, r3, #8
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	3301      	adds	r3, #1
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	011b      	lsls	r3, r3, #4
 800239a:	4413      	add	r3, r2
 800239c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	0c1a      	lsrs	r2, r3, #16
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	3302      	adds	r3, #2
 80023a8:	b2d2      	uxtb	r2, r2
 80023aa:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	011b      	lsls	r3, r3, #4
 80023b4:	4413      	add	r3, r2
 80023b6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	0e1a      	lsrs	r2, r3, #24
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	3303      	adds	r3, #3
 80023c2:	b2d2      	uxtb	r2, r2
 80023c4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	011b      	lsls	r3, r3, #4
 80023ce:	4413      	add	r3, r2
 80023d0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	3304      	adds	r3, #4
 80023da:	b2d2      	uxtb	r2, r2
 80023dc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	011b      	lsls	r3, r3, #4
 80023e6:	4413      	add	r3, r2
 80023e8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	0a1a      	lsrs	r2, r3, #8
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	3305      	adds	r3, #5
 80023f4:	b2d2      	uxtb	r2, r2
 80023f6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	011b      	lsls	r3, r3, #4
 8002400:	4413      	add	r3, r2
 8002402:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	0c1a      	lsrs	r2, r3, #16
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	3306      	adds	r3, #6
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	011b      	lsls	r3, r3, #4
 800241a:	4413      	add	r3, r2
 800241c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	0e1a      	lsrs	r2, r3, #24
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	3307      	adds	r3, #7
 8002428:	b2d2      	uxtb	r2, r2
 800242a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d108      	bne.n	8002444 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68da      	ldr	r2, [r3, #12]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f042 0220 	orr.w	r2, r2, #32
 8002440:	60da      	str	r2, [r3, #12]
 8002442:	e007      	b.n	8002454 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	691a      	ldr	r2, [r3, #16]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f042 0220 	orr.w	r2, r2, #32
 8002452:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002454:	2300      	movs	r3, #0
 8002456:	e006      	b.n	8002466 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
  }
}
 8002466:	4618      	mov	r0, r3
 8002468:	371c      	adds	r7, #28
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr

08002472 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002472:	b480      	push	{r7}
 8002474:	b085      	sub	sp, #20
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
 800247a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002482:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002484:	7bfb      	ldrb	r3, [r7, #15]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d002      	beq.n	8002490 <HAL_CAN_ActivateNotification+0x1e>
 800248a:	7bfb      	ldrb	r3, [r7, #15]
 800248c:	2b02      	cmp	r3, #2
 800248e:	d109      	bne.n	80024a4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6959      	ldr	r1, [r3, #20]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	430a      	orrs	r2, r1
 800249e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80024a0:	2300      	movs	r3, #0
 80024a2:	e006      	b.n	80024b2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
  }
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3714      	adds	r7, #20
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr

080024be <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b08a      	sub	sp, #40	; 0x28
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80024c6:	2300      	movs	r3, #0
 80024c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	695b      	ldr	r3, [r3, #20]
 80024d0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80024fa:	6a3b      	ldr	r3, [r7, #32]
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	2b00      	cmp	r3, #0
 8002502:	d07c      	beq.n	80025fe <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d023      	beq.n	8002556 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2201      	movs	r2, #1
 8002514:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d003      	beq.n	8002528 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f000 f983 	bl	800282c <HAL_CAN_TxMailbox0CompleteCallback>
 8002526:	e016      	b.n	8002556 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	f003 0304 	and.w	r3, r3, #4
 800252e:	2b00      	cmp	r3, #0
 8002530:	d004      	beq.n	800253c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002534:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002538:	627b      	str	r3, [r7, #36]	; 0x24
 800253a:	e00c      	b.n	8002556 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	f003 0308 	and.w	r3, r3, #8
 8002542:	2b00      	cmp	r3, #0
 8002544:	d004      	beq.n	8002550 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002548:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800254c:	627b      	str	r3, [r7, #36]	; 0x24
 800254e:	e002      	b.n	8002556 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f000 f989 	bl	8002868 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800255c:	2b00      	cmp	r3, #0
 800255e:	d024      	beq.n	80025aa <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002568:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002570:	2b00      	cmp	r3, #0
 8002572:	d003      	beq.n	800257c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f000 f963 	bl	8002840 <HAL_CAN_TxMailbox1CompleteCallback>
 800257a:	e016      	b.n	80025aa <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002582:	2b00      	cmp	r3, #0
 8002584:	d004      	beq.n	8002590 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002588:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800258c:	627b      	str	r3, [r7, #36]	; 0x24
 800258e:	e00c      	b.n	80025aa <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002596:	2b00      	cmp	r3, #0
 8002598:	d004      	beq.n	80025a4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025a0:	627b      	str	r3, [r7, #36]	; 0x24
 80025a2:	e002      	b.n	80025aa <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 f969 	bl	800287c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d024      	beq.n	80025fe <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80025bc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d003      	beq.n	80025d0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 f943 	bl	8002854 <HAL_CAN_TxMailbox2CompleteCallback>
 80025ce:	e016      	b.n	80025fe <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d004      	beq.n	80025e4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80025da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025e0:	627b      	str	r3, [r7, #36]	; 0x24
 80025e2:	e00c      	b.n	80025fe <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d004      	beq.n	80025f8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80025ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025f4:	627b      	str	r3, [r7, #36]	; 0x24
 80025f6:	e002      	b.n	80025fe <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 f949 	bl	8002890 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80025fe:	6a3b      	ldr	r3, [r7, #32]
 8002600:	f003 0308 	and.w	r3, r3, #8
 8002604:	2b00      	cmp	r3, #0
 8002606:	d00c      	beq.n	8002622 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	f003 0310 	and.w	r3, r3, #16
 800260e:	2b00      	cmp	r3, #0
 8002610:	d007      	beq.n	8002622 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002618:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2210      	movs	r2, #16
 8002620:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002622:	6a3b      	ldr	r3, [r7, #32]
 8002624:	f003 0304 	and.w	r3, r3, #4
 8002628:	2b00      	cmp	r3, #0
 800262a:	d00b      	beq.n	8002644 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	f003 0308 	and.w	r3, r3, #8
 8002632:	2b00      	cmp	r3, #0
 8002634:	d006      	beq.n	8002644 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2208      	movs	r2, #8
 800263c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 f930 	bl	80028a4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002644:	6a3b      	ldr	r3, [r7, #32]
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d009      	beq.n	8002662 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	f003 0303 	and.w	r3, r3, #3
 8002658:	2b00      	cmp	r3, #0
 800265a:	d002      	beq.n	8002662 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f7fe fbf7 	bl	8000e50 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002662:	6a3b      	ldr	r3, [r7, #32]
 8002664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002668:	2b00      	cmp	r3, #0
 800266a:	d00c      	beq.n	8002686 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	f003 0310 	and.w	r3, r3, #16
 8002672:	2b00      	cmp	r3, #0
 8002674:	d007      	beq.n	8002686 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002678:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800267c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2210      	movs	r2, #16
 8002684:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002686:	6a3b      	ldr	r3, [r7, #32]
 8002688:	f003 0320 	and.w	r3, r3, #32
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00b      	beq.n	80026a8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	f003 0308 	and.w	r3, r3, #8
 8002696:	2b00      	cmp	r3, #0
 8002698:	d006      	beq.n	80026a8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2208      	movs	r2, #8
 80026a0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 f912 	bl	80028cc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80026a8:	6a3b      	ldr	r3, [r7, #32]
 80026aa:	f003 0310 	and.w	r3, r3, #16
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d009      	beq.n	80026c6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	f003 0303 	and.w	r3, r3, #3
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d002      	beq.n	80026c6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 f8f9 	bl	80028b8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80026c6:	6a3b      	ldr	r3, [r7, #32]
 80026c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d00b      	beq.n	80026e8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	f003 0310 	and.w	r3, r3, #16
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d006      	beq.n	80026e8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2210      	movs	r2, #16
 80026e0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 f8fc 	bl	80028e0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80026e8:	6a3b      	ldr	r3, [r7, #32]
 80026ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00b      	beq.n	800270a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	f003 0308 	and.w	r3, r3, #8
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d006      	beq.n	800270a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2208      	movs	r2, #8
 8002702:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 f8f5 	bl	80028f4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800270a:	6a3b      	ldr	r3, [r7, #32]
 800270c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d07b      	beq.n	800280c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	f003 0304 	and.w	r3, r3, #4
 800271a:	2b00      	cmp	r3, #0
 800271c:	d072      	beq.n	8002804 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800271e:	6a3b      	ldr	r3, [r7, #32]
 8002720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002724:	2b00      	cmp	r3, #0
 8002726:	d008      	beq.n	800273a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800272e:	2b00      	cmp	r3, #0
 8002730:	d003      	beq.n	800273a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002734:	f043 0301 	orr.w	r3, r3, #1
 8002738:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800273a:	6a3b      	ldr	r3, [r7, #32]
 800273c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002740:	2b00      	cmp	r3, #0
 8002742:	d008      	beq.n	8002756 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800274a:	2b00      	cmp	r3, #0
 800274c:	d003      	beq.n	8002756 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002750:	f043 0302 	orr.w	r3, r3, #2
 8002754:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002756:	6a3b      	ldr	r3, [r7, #32]
 8002758:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800275c:	2b00      	cmp	r3, #0
 800275e:	d008      	beq.n	8002772 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002766:	2b00      	cmp	r3, #0
 8002768:	d003      	beq.n	8002772 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276c:	f043 0304 	orr.w	r3, r3, #4
 8002770:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002772:	6a3b      	ldr	r3, [r7, #32]
 8002774:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002778:	2b00      	cmp	r3, #0
 800277a:	d043      	beq.n	8002804 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002782:	2b00      	cmp	r3, #0
 8002784:	d03e      	beq.n	8002804 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800278c:	2b60      	cmp	r3, #96	; 0x60
 800278e:	d02b      	beq.n	80027e8 <HAL_CAN_IRQHandler+0x32a>
 8002790:	2b60      	cmp	r3, #96	; 0x60
 8002792:	d82e      	bhi.n	80027f2 <HAL_CAN_IRQHandler+0x334>
 8002794:	2b50      	cmp	r3, #80	; 0x50
 8002796:	d022      	beq.n	80027de <HAL_CAN_IRQHandler+0x320>
 8002798:	2b50      	cmp	r3, #80	; 0x50
 800279a:	d82a      	bhi.n	80027f2 <HAL_CAN_IRQHandler+0x334>
 800279c:	2b40      	cmp	r3, #64	; 0x40
 800279e:	d019      	beq.n	80027d4 <HAL_CAN_IRQHandler+0x316>
 80027a0:	2b40      	cmp	r3, #64	; 0x40
 80027a2:	d826      	bhi.n	80027f2 <HAL_CAN_IRQHandler+0x334>
 80027a4:	2b30      	cmp	r3, #48	; 0x30
 80027a6:	d010      	beq.n	80027ca <HAL_CAN_IRQHandler+0x30c>
 80027a8:	2b30      	cmp	r3, #48	; 0x30
 80027aa:	d822      	bhi.n	80027f2 <HAL_CAN_IRQHandler+0x334>
 80027ac:	2b10      	cmp	r3, #16
 80027ae:	d002      	beq.n	80027b6 <HAL_CAN_IRQHandler+0x2f8>
 80027b0:	2b20      	cmp	r3, #32
 80027b2:	d005      	beq.n	80027c0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80027b4:	e01d      	b.n	80027f2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80027b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b8:	f043 0308 	orr.w	r3, r3, #8
 80027bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027be:	e019      	b.n	80027f4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80027c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c2:	f043 0310 	orr.w	r3, r3, #16
 80027c6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027c8:	e014      	b.n	80027f4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80027ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027cc:	f043 0320 	orr.w	r3, r3, #32
 80027d0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027d2:	e00f      	b.n	80027f4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80027d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027da:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027dc:	e00a      	b.n	80027f4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80027de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027e4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027e6:	e005      	b.n	80027f4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80027e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027f0:	e000      	b.n	80027f4 <HAL_CAN_IRQHandler+0x336>
            break;
 80027f2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	699a      	ldr	r2, [r3, #24]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002802:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2204      	movs	r2, #4
 800280a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800280c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280e:	2b00      	cmp	r3, #0
 8002810:	d008      	beq.n	8002824 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002818:	431a      	orrs	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 f872 	bl	8002908 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002824:	bf00      	nop
 8002826:	3728      	adds	r7, #40	; 0x28
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80028ac:	bf00      	nop
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <__NVIC_SetPriorityGrouping>:
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800292c:	4b0c      	ldr	r3, [pc, #48]	; (8002960 <__NVIC_SetPriorityGrouping+0x44>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002932:	68ba      	ldr	r2, [r7, #8]
 8002934:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002938:	4013      	ands	r3, r2
 800293a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002944:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800294c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800294e:	4a04      	ldr	r2, [pc, #16]	; (8002960 <__NVIC_SetPriorityGrouping+0x44>)
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	60d3      	str	r3, [r2, #12]
}
 8002954:	bf00      	nop
 8002956:	3714      	adds	r7, #20
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	e000ed00 	.word	0xe000ed00

08002964 <__NVIC_GetPriorityGrouping>:
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002968:	4b04      	ldr	r3, [pc, #16]	; (800297c <__NVIC_GetPriorityGrouping+0x18>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	0a1b      	lsrs	r3, r3, #8
 800296e:	f003 0307 	and.w	r3, r3, #7
}
 8002972:	4618      	mov	r0, r3
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr
 800297c:	e000ed00 	.word	0xe000ed00

08002980 <__NVIC_EnableIRQ>:
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	4603      	mov	r3, r0
 8002988:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800298a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298e:	2b00      	cmp	r3, #0
 8002990:	db0b      	blt.n	80029aa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002992:	79fb      	ldrb	r3, [r7, #7]
 8002994:	f003 021f 	and.w	r2, r3, #31
 8002998:	4907      	ldr	r1, [pc, #28]	; (80029b8 <__NVIC_EnableIRQ+0x38>)
 800299a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299e:	095b      	lsrs	r3, r3, #5
 80029a0:	2001      	movs	r0, #1
 80029a2:	fa00 f202 	lsl.w	r2, r0, r2
 80029a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	e000e100 	.word	0xe000e100

080029bc <__NVIC_SetPriority>:
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	4603      	mov	r3, r0
 80029c4:	6039      	str	r1, [r7, #0]
 80029c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	db0a      	blt.n	80029e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	b2da      	uxtb	r2, r3
 80029d4:	490c      	ldr	r1, [pc, #48]	; (8002a08 <__NVIC_SetPriority+0x4c>)
 80029d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029da:	0112      	lsls	r2, r2, #4
 80029dc:	b2d2      	uxtb	r2, r2
 80029de:	440b      	add	r3, r1
 80029e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80029e4:	e00a      	b.n	80029fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	b2da      	uxtb	r2, r3
 80029ea:	4908      	ldr	r1, [pc, #32]	; (8002a0c <__NVIC_SetPriority+0x50>)
 80029ec:	79fb      	ldrb	r3, [r7, #7]
 80029ee:	f003 030f 	and.w	r3, r3, #15
 80029f2:	3b04      	subs	r3, #4
 80029f4:	0112      	lsls	r2, r2, #4
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	440b      	add	r3, r1
 80029fa:	761a      	strb	r2, [r3, #24]
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr
 8002a08:	e000e100 	.word	0xe000e100
 8002a0c:	e000ed00 	.word	0xe000ed00

08002a10 <NVIC_EncodePriority>:
{
 8002a10:	b480      	push	{r7}
 8002a12:	b089      	sub	sp, #36	; 0x24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	f1c3 0307 	rsb	r3, r3, #7
 8002a2a:	2b04      	cmp	r3, #4
 8002a2c:	bf28      	it	cs
 8002a2e:	2304      	movcs	r3, #4
 8002a30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	3304      	adds	r3, #4
 8002a36:	2b06      	cmp	r3, #6
 8002a38:	d902      	bls.n	8002a40 <NVIC_EncodePriority+0x30>
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	3b03      	subs	r3, #3
 8002a3e:	e000      	b.n	8002a42 <NVIC_EncodePriority+0x32>
 8002a40:	2300      	movs	r3, #0
 8002a42:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4e:	43da      	mvns	r2, r3
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	401a      	ands	r2, r3
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a62:	43d9      	mvns	r1, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a68:	4313      	orrs	r3, r2
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3724      	adds	r7, #36	; 0x24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr

08002a76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b082      	sub	sp, #8
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f7ff ff4c 	bl	800291c <__NVIC_SetPriorityGrouping>
}
 8002a84:	bf00      	nop
 8002a86:	3708      	adds	r7, #8
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	4603      	mov	r3, r0
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
 8002a98:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a9e:	f7ff ff61 	bl	8002964 <__NVIC_GetPriorityGrouping>
 8002aa2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	68b9      	ldr	r1, [r7, #8]
 8002aa8:	6978      	ldr	r0, [r7, #20]
 8002aaa:	f7ff ffb1 	bl	8002a10 <NVIC_EncodePriority>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ab4:	4611      	mov	r1, r2
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7ff ff80 	bl	80029bc <__NVIC_SetPriority>
}
 8002abc:	bf00      	nop
 8002abe:	3718      	adds	r7, #24
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	4603      	mov	r3, r0
 8002acc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7ff ff54 	bl	8002980 <__NVIC_EnableIRQ>
}
 8002ad8:	bf00      	nop
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002af2:	4b23      	ldr	r3, [pc, #140]	; (8002b80 <HAL_FLASH_Program+0xa0>)
 8002af4:	7e1b      	ldrb	r3, [r3, #24]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d101      	bne.n	8002afe <HAL_FLASH_Program+0x1e>
 8002afa:	2302      	movs	r3, #2
 8002afc:	e03b      	b.n	8002b76 <HAL_FLASH_Program+0x96>
 8002afe:	4b20      	ldr	r3, [pc, #128]	; (8002b80 <HAL_FLASH_Program+0xa0>)
 8002b00:	2201      	movs	r2, #1
 8002b02:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b04:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b08:	f000 f870 	bl	8002bec <FLASH_WaitForLastOperation>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8002b10:	7dfb      	ldrb	r3, [r7, #23]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d12b      	bne.n	8002b6e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d105      	bne.n	8002b28 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8002b1c:	783b      	ldrb	r3, [r7, #0]
 8002b1e:	4619      	mov	r1, r3
 8002b20:	68b8      	ldr	r0, [r7, #8]
 8002b22:	f000 f91b 	bl	8002d5c <FLASH_Program_Byte>
 8002b26:	e016      	b.n	8002b56 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d105      	bne.n	8002b3a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8002b2e:	883b      	ldrh	r3, [r7, #0]
 8002b30:	4619      	mov	r1, r3
 8002b32:	68b8      	ldr	r0, [r7, #8]
 8002b34:	f000 f8ee 	bl	8002d14 <FLASH_Program_HalfWord>
 8002b38:	e00d      	b.n	8002b56 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d105      	bne.n	8002b4c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	4619      	mov	r1, r3
 8002b44:	68b8      	ldr	r0, [r7, #8]
 8002b46:	f000 f8c3 	bl	8002cd0 <FLASH_Program_Word>
 8002b4a:	e004      	b.n	8002b56 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8002b4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b50:	68b8      	ldr	r0, [r7, #8]
 8002b52:	f000 f88b 	bl	8002c6c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b56:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b5a:	f000 f847 	bl	8002bec <FLASH_WaitForLastOperation>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8002b62:	4b08      	ldr	r3, [pc, #32]	; (8002b84 <HAL_FLASH_Program+0xa4>)
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	4a07      	ldr	r2, [pc, #28]	; (8002b84 <HAL_FLASH_Program+0xa4>)
 8002b68:	f023 0301 	bic.w	r3, r3, #1
 8002b6c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002b6e:	4b04      	ldr	r3, [pc, #16]	; (8002b80 <HAL_FLASH_Program+0xa0>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	761a      	strb	r2, [r3, #24]
  
  return status;
 8002b74:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3718      	adds	r7, #24
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	20004780 	.word	0x20004780
 8002b84:	40023c00 	.word	0x40023c00

08002b88 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002b92:	4b0b      	ldr	r3, [pc, #44]	; (8002bc0 <HAL_FLASH_Unlock+0x38>)
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	da0b      	bge.n	8002bb2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002b9a:	4b09      	ldr	r3, [pc, #36]	; (8002bc0 <HAL_FLASH_Unlock+0x38>)
 8002b9c:	4a09      	ldr	r2, [pc, #36]	; (8002bc4 <HAL_FLASH_Unlock+0x3c>)
 8002b9e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002ba0:	4b07      	ldr	r3, [pc, #28]	; (8002bc0 <HAL_FLASH_Unlock+0x38>)
 8002ba2:	4a09      	ldr	r2, [pc, #36]	; (8002bc8 <HAL_FLASH_Unlock+0x40>)
 8002ba4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002ba6:	4b06      	ldr	r3, [pc, #24]	; (8002bc0 <HAL_FLASH_Unlock+0x38>)
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	da01      	bge.n	8002bb2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002bb2:	79fb      	ldrb	r3, [r7, #7]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr
 8002bc0:	40023c00 	.word	0x40023c00
 8002bc4:	45670123 	.word	0x45670123
 8002bc8:	cdef89ab 	.word	0xcdef89ab

08002bcc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8002bd0:	4b05      	ldr	r3, [pc, #20]	; (8002be8 <HAL_FLASH_Lock+0x1c>)
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	4a04      	ldr	r2, [pc, #16]	; (8002be8 <HAL_FLASH_Lock+0x1c>)
 8002bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002bda:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr
 8002be8:	40023c00 	.word	0x40023c00

08002bec <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002bf8:	4b1a      	ldr	r3, [pc, #104]	; (8002c64 <FLASH_WaitForLastOperation+0x78>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8002bfe:	f7ff f81f 	bl	8001c40 <HAL_GetTick>
 8002c02:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002c04:	e010      	b.n	8002c28 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c0c:	d00c      	beq.n	8002c28 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d007      	beq.n	8002c24 <FLASH_WaitForLastOperation+0x38>
 8002c14:	f7ff f814 	bl	8001c40 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d201      	bcs.n	8002c28 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e019      	b.n	8002c5c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002c28:	4b0f      	ldr	r3, [pc, #60]	; (8002c68 <FLASH_WaitForLastOperation+0x7c>)
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1e8      	bne.n	8002c06 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002c34:	4b0c      	ldr	r3, [pc, #48]	; (8002c68 <FLASH_WaitForLastOperation+0x7c>)
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	f003 0301 	and.w	r3, r3, #1
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d002      	beq.n	8002c46 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002c40:	4b09      	ldr	r3, [pc, #36]	; (8002c68 <FLASH_WaitForLastOperation+0x7c>)
 8002c42:	2201      	movs	r2, #1
 8002c44:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002c46:	4b08      	ldr	r3, [pc, #32]	; (8002c68 <FLASH_WaitForLastOperation+0x7c>)
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d003      	beq.n	8002c5a <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002c52:	f000 f8a5 	bl	8002da0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e000      	b.n	8002c5c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
  
}  
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3710      	adds	r7, #16
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	20004780 	.word	0x20004780
 8002c68:	40023c00 	.word	0x40023c00

08002c6c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002c78:	4b14      	ldr	r3, [pc, #80]	; (8002ccc <FLASH_Program_DoubleWord+0x60>)
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	4a13      	ldr	r2, [pc, #76]	; (8002ccc <FLASH_Program_DoubleWord+0x60>)
 8002c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c82:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002c84:	4b11      	ldr	r3, [pc, #68]	; (8002ccc <FLASH_Program_DoubleWord+0x60>)
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	4a10      	ldr	r2, [pc, #64]	; (8002ccc <FLASH_Program_DoubleWord+0x60>)
 8002c8a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002c8e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002c90:	4b0e      	ldr	r3, [pc, #56]	; (8002ccc <FLASH_Program_DoubleWord+0x60>)
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	4a0d      	ldr	r2, [pc, #52]	; (8002ccc <FLASH_Program_DoubleWord+0x60>)
 8002c96:	f043 0301 	orr.w	r3, r3, #1
 8002c9a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	683a      	ldr	r2, [r7, #0]
 8002ca0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8002ca2:	f3bf 8f6f 	isb	sy
}
 8002ca6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8002ca8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002cac:	f04f 0200 	mov.w	r2, #0
 8002cb0:	f04f 0300 	mov.w	r3, #0
 8002cb4:	000a      	movs	r2, r1
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	68f9      	ldr	r1, [r7, #12]
 8002cba:	3104      	adds	r1, #4
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	600b      	str	r3, [r1, #0]
}
 8002cc0:	bf00      	nop
 8002cc2:	3714      	adds	r7, #20
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr
 8002ccc:	40023c00 	.word	0x40023c00

08002cd0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002cda:	4b0d      	ldr	r3, [pc, #52]	; (8002d10 <FLASH_Program_Word+0x40>)
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	4a0c      	ldr	r2, [pc, #48]	; (8002d10 <FLASH_Program_Word+0x40>)
 8002ce0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ce4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002ce6:	4b0a      	ldr	r3, [pc, #40]	; (8002d10 <FLASH_Program_Word+0x40>)
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	4a09      	ldr	r2, [pc, #36]	; (8002d10 <FLASH_Program_Word+0x40>)
 8002cec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cf0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002cf2:	4b07      	ldr	r3, [pc, #28]	; (8002d10 <FLASH_Program_Word+0x40>)
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	4a06      	ldr	r2, [pc, #24]	; (8002d10 <FLASH_Program_Word+0x40>)
 8002cf8:	f043 0301 	orr.w	r3, r3, #1
 8002cfc:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	601a      	str	r2, [r3, #0]
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr
 8002d10:	40023c00 	.word	0x40023c00

08002d14 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002d20:	4b0d      	ldr	r3, [pc, #52]	; (8002d58 <FLASH_Program_HalfWord+0x44>)
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	4a0c      	ldr	r2, [pc, #48]	; (8002d58 <FLASH_Program_HalfWord+0x44>)
 8002d26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d2a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002d2c:	4b0a      	ldr	r3, [pc, #40]	; (8002d58 <FLASH_Program_HalfWord+0x44>)
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	4a09      	ldr	r2, [pc, #36]	; (8002d58 <FLASH_Program_HalfWord+0x44>)
 8002d32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d36:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002d38:	4b07      	ldr	r3, [pc, #28]	; (8002d58 <FLASH_Program_HalfWord+0x44>)
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	4a06      	ldr	r2, [pc, #24]	; (8002d58 <FLASH_Program_HalfWord+0x44>)
 8002d3e:	f043 0301 	orr.w	r3, r3, #1
 8002d42:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	887a      	ldrh	r2, [r7, #2]
 8002d48:	801a      	strh	r2, [r3, #0]
}
 8002d4a:	bf00      	nop
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	40023c00 	.word	0x40023c00

08002d5c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	460b      	mov	r3, r1
 8002d66:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002d68:	4b0c      	ldr	r3, [pc, #48]	; (8002d9c <FLASH_Program_Byte+0x40>)
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	4a0b      	ldr	r2, [pc, #44]	; (8002d9c <FLASH_Program_Byte+0x40>)
 8002d6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d72:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002d74:	4b09      	ldr	r3, [pc, #36]	; (8002d9c <FLASH_Program_Byte+0x40>)
 8002d76:	4a09      	ldr	r2, [pc, #36]	; (8002d9c <FLASH_Program_Byte+0x40>)
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002d7c:	4b07      	ldr	r3, [pc, #28]	; (8002d9c <FLASH_Program_Byte+0x40>)
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	4a06      	ldr	r2, [pc, #24]	; (8002d9c <FLASH_Program_Byte+0x40>)
 8002d82:	f043 0301 	orr.w	r3, r3, #1
 8002d86:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	78fa      	ldrb	r2, [r7, #3]
 8002d8c:	701a      	strb	r2, [r3, #0]
}
 8002d8e:	bf00      	nop
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	40023c00 	.word	0x40023c00

08002da0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002da4:	4b27      	ldr	r3, [pc, #156]	; (8002e44 <FLASH_SetErrorCode+0xa4>)
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	f003 0310 	and.w	r3, r3, #16
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d008      	beq.n	8002dc2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002db0:	4b25      	ldr	r3, [pc, #148]	; (8002e48 <FLASH_SetErrorCode+0xa8>)
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	f043 0310 	orr.w	r3, r3, #16
 8002db8:	4a23      	ldr	r2, [pc, #140]	; (8002e48 <FLASH_SetErrorCode+0xa8>)
 8002dba:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002dbc:	4b21      	ldr	r3, [pc, #132]	; (8002e44 <FLASH_SetErrorCode+0xa4>)
 8002dbe:	2210      	movs	r2, #16
 8002dc0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002dc2:	4b20      	ldr	r3, [pc, #128]	; (8002e44 <FLASH_SetErrorCode+0xa4>)
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	f003 0320 	and.w	r3, r3, #32
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d008      	beq.n	8002de0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002dce:	4b1e      	ldr	r3, [pc, #120]	; (8002e48 <FLASH_SetErrorCode+0xa8>)
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	f043 0308 	orr.w	r3, r3, #8
 8002dd6:	4a1c      	ldr	r2, [pc, #112]	; (8002e48 <FLASH_SetErrorCode+0xa8>)
 8002dd8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002dda:	4b1a      	ldr	r3, [pc, #104]	; (8002e44 <FLASH_SetErrorCode+0xa4>)
 8002ddc:	2220      	movs	r2, #32
 8002dde:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002de0:	4b18      	ldr	r3, [pc, #96]	; (8002e44 <FLASH_SetErrorCode+0xa4>)
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d008      	beq.n	8002dfe <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002dec:	4b16      	ldr	r3, [pc, #88]	; (8002e48 <FLASH_SetErrorCode+0xa8>)
 8002dee:	69db      	ldr	r3, [r3, #28]
 8002df0:	f043 0304 	orr.w	r3, r3, #4
 8002df4:	4a14      	ldr	r2, [pc, #80]	; (8002e48 <FLASH_SetErrorCode+0xa8>)
 8002df6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002df8:	4b12      	ldr	r3, [pc, #72]	; (8002e44 <FLASH_SetErrorCode+0xa4>)
 8002dfa:	2240      	movs	r2, #64	; 0x40
 8002dfc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002dfe:	4b11      	ldr	r3, [pc, #68]	; (8002e44 <FLASH_SetErrorCode+0xa4>)
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d008      	beq.n	8002e1c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002e0a:	4b0f      	ldr	r3, [pc, #60]	; (8002e48 <FLASH_SetErrorCode+0xa8>)
 8002e0c:	69db      	ldr	r3, [r3, #28]
 8002e0e:	f043 0302 	orr.w	r3, r3, #2
 8002e12:	4a0d      	ldr	r2, [pc, #52]	; (8002e48 <FLASH_SetErrorCode+0xa8>)
 8002e14:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002e16:	4b0b      	ldr	r3, [pc, #44]	; (8002e44 <FLASH_SetErrorCode+0xa4>)
 8002e18:	2280      	movs	r2, #128	; 0x80
 8002e1a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002e1c:	4b09      	ldr	r3, [pc, #36]	; (8002e44 <FLASH_SetErrorCode+0xa4>)
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d008      	beq.n	8002e3a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002e28:	4b07      	ldr	r3, [pc, #28]	; (8002e48 <FLASH_SetErrorCode+0xa8>)
 8002e2a:	69db      	ldr	r3, [r3, #28]
 8002e2c:	f043 0320 	orr.w	r3, r3, #32
 8002e30:	4a05      	ldr	r2, [pc, #20]	; (8002e48 <FLASH_SetErrorCode+0xa8>)
 8002e32:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002e34:	4b03      	ldr	r3, [pc, #12]	; (8002e44 <FLASH_SetErrorCode+0xa4>)
 8002e36:	2202      	movs	r2, #2
 8002e38:	60da      	str	r2, [r3, #12]
  }
}
 8002e3a:	bf00      	nop
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr
 8002e44:	40023c00 	.word	0x40023c00
 8002e48:	20004780 	.word	0x20004780

08002e4c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002e5e:	4b31      	ldr	r3, [pc, #196]	; (8002f24 <HAL_FLASHEx_Erase+0xd8>)
 8002e60:	7e1b      	ldrb	r3, [r3, #24]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d101      	bne.n	8002e6a <HAL_FLASHEx_Erase+0x1e>
 8002e66:	2302      	movs	r3, #2
 8002e68:	e058      	b.n	8002f1c <HAL_FLASHEx_Erase+0xd0>
 8002e6a:	4b2e      	ldr	r3, [pc, #184]	; (8002f24 <HAL_FLASHEx_Erase+0xd8>)
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002e70:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002e74:	f7ff feba 	bl	8002bec <FLASH_WaitForLastOperation>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8002e7c:	7bfb      	ldrb	r3, [r7, #15]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d148      	bne.n	8002f14 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e88:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d115      	bne.n	8002ebe <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	b2da      	uxtb	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	4610      	mov	r0, r2
 8002ea0:	f000 f844 	bl	8002f2c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002ea4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002ea8:	f7ff fea0 	bl	8002bec <FLASH_WaitForLastOperation>
 8002eac:	4603      	mov	r3, r0
 8002eae:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002eb0:	4b1d      	ldr	r3, [pc, #116]	; (8002f28 <HAL_FLASHEx_Erase+0xdc>)
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	4a1c      	ldr	r2, [pc, #112]	; (8002f28 <HAL_FLASHEx_Erase+0xdc>)
 8002eb6:	f023 0304 	bic.w	r3, r3, #4
 8002eba:	6113      	str	r3, [r2, #16]
 8002ebc:	e028      	b.n	8002f10 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	60bb      	str	r3, [r7, #8]
 8002ec4:	e01c      	b.n	8002f00 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	4619      	mov	r1, r3
 8002ece:	68b8      	ldr	r0, [r7, #8]
 8002ed0:	f000 f850 	bl	8002f74 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002ed4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002ed8:	f7ff fe88 	bl	8002bec <FLASH_WaitForLastOperation>
 8002edc:	4603      	mov	r3, r0
 8002ede:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002ee0:	4b11      	ldr	r3, [pc, #68]	; (8002f28 <HAL_FLASHEx_Erase+0xdc>)
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	4a10      	ldr	r2, [pc, #64]	; (8002f28 <HAL_FLASHEx_Erase+0xdc>)
 8002ee6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8002eea:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8002eec:	7bfb      	ldrb	r3, [r7, #15]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d003      	beq.n	8002efa <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	601a      	str	r2, [r3, #0]
          break;
 8002ef8:	e00a      	b.n	8002f10 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	3301      	adds	r3, #1
 8002efe:	60bb      	str	r3, [r7, #8]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	68da      	ldr	r2, [r3, #12]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	4413      	add	r3, r2
 8002f0a:	68ba      	ldr	r2, [r7, #8]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d3da      	bcc.n	8002ec6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8002f10:	f000 f878 	bl	8003004 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002f14:	4b03      	ldr	r3, [pc, #12]	; (8002f24 <HAL_FLASHEx_Erase+0xd8>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	761a      	strb	r2, [r3, #24]

  return status;
 8002f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3710      	adds	r7, #16
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	20004780 	.word	0x20004780
 8002f28:	40023c00 	.word	0x40023c00

08002f2c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	4603      	mov	r3, r0
 8002f34:	6039      	str	r1, [r7, #0]
 8002f36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002f38:	4b0d      	ldr	r3, [pc, #52]	; (8002f70 <FLASH_MassErase+0x44>)
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	4a0c      	ldr	r2, [pc, #48]	; (8002f70 <FLASH_MassErase+0x44>)
 8002f3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f42:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8002f44:	4b0a      	ldr	r3, [pc, #40]	; (8002f70 <FLASH_MassErase+0x44>)
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	4a09      	ldr	r2, [pc, #36]	; (8002f70 <FLASH_MassErase+0x44>)
 8002f4a:	f043 0304 	orr.w	r3, r3, #4
 8002f4e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8002f50:	4b07      	ldr	r3, [pc, #28]	; (8002f70 <FLASH_MassErase+0x44>)
 8002f52:	691a      	ldr	r2, [r3, #16]
 8002f54:	79fb      	ldrb	r3, [r7, #7]
 8002f56:	021b      	lsls	r3, r3, #8
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	4a05      	ldr	r2, [pc, #20]	; (8002f70 <FLASH_MassErase+0x44>)
 8002f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f60:	6113      	str	r3, [r2, #16]
}
 8002f62:	bf00      	nop
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	40023c00 	.word	0x40023c00

08002f74 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002f80:	2300      	movs	r3, #0
 8002f82:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002f84:	78fb      	ldrb	r3, [r7, #3]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d102      	bne.n	8002f90 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	60fb      	str	r3, [r7, #12]
 8002f8e:	e010      	b.n	8002fb2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002f90:	78fb      	ldrb	r3, [r7, #3]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d103      	bne.n	8002f9e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002f96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f9a:	60fb      	str	r3, [r7, #12]
 8002f9c:	e009      	b.n	8002fb2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002f9e:	78fb      	ldrb	r3, [r7, #3]
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d103      	bne.n	8002fac <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002fa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fa8:	60fb      	str	r3, [r7, #12]
 8002faa:	e002      	b.n	8002fb2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002fac:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002fb0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002fb2:	4b13      	ldr	r3, [pc, #76]	; (8003000 <FLASH_Erase_Sector+0x8c>)
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	4a12      	ldr	r2, [pc, #72]	; (8003000 <FLASH_Erase_Sector+0x8c>)
 8002fb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fbc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002fbe:	4b10      	ldr	r3, [pc, #64]	; (8003000 <FLASH_Erase_Sector+0x8c>)
 8002fc0:	691a      	ldr	r2, [r3, #16]
 8002fc2:	490f      	ldr	r1, [pc, #60]	; (8003000 <FLASH_Erase_Sector+0x8c>)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002fca:	4b0d      	ldr	r3, [pc, #52]	; (8003000 <FLASH_Erase_Sector+0x8c>)
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	4a0c      	ldr	r2, [pc, #48]	; (8003000 <FLASH_Erase_Sector+0x8c>)
 8002fd0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002fd4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002fd6:	4b0a      	ldr	r3, [pc, #40]	; (8003000 <FLASH_Erase_Sector+0x8c>)
 8002fd8:	691a      	ldr	r2, [r3, #16]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	00db      	lsls	r3, r3, #3
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	4a07      	ldr	r2, [pc, #28]	; (8003000 <FLASH_Erase_Sector+0x8c>)
 8002fe2:	f043 0302 	orr.w	r3, r3, #2
 8002fe6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002fe8:	4b05      	ldr	r3, [pc, #20]	; (8003000 <FLASH_Erase_Sector+0x8c>)
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	4a04      	ldr	r2, [pc, #16]	; (8003000 <FLASH_Erase_Sector+0x8c>)
 8002fee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ff2:	6113      	str	r3, [r2, #16]
}
 8002ff4:	bf00      	nop
 8002ff6:	3714      	adds	r7, #20
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr
 8003000:	40023c00 	.word	0x40023c00

08003004 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8003008:	4b20      	ldr	r3, [pc, #128]	; (800308c <FLASH_FlushCaches+0x88>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003010:	2b00      	cmp	r3, #0
 8003012:	d017      	beq.n	8003044 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003014:	4b1d      	ldr	r3, [pc, #116]	; (800308c <FLASH_FlushCaches+0x88>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a1c      	ldr	r2, [pc, #112]	; (800308c <FLASH_FlushCaches+0x88>)
 800301a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800301e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003020:	4b1a      	ldr	r3, [pc, #104]	; (800308c <FLASH_FlushCaches+0x88>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a19      	ldr	r2, [pc, #100]	; (800308c <FLASH_FlushCaches+0x88>)
 8003026:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800302a:	6013      	str	r3, [r2, #0]
 800302c:	4b17      	ldr	r3, [pc, #92]	; (800308c <FLASH_FlushCaches+0x88>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a16      	ldr	r2, [pc, #88]	; (800308c <FLASH_FlushCaches+0x88>)
 8003032:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003036:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003038:	4b14      	ldr	r3, [pc, #80]	; (800308c <FLASH_FlushCaches+0x88>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a13      	ldr	r2, [pc, #76]	; (800308c <FLASH_FlushCaches+0x88>)
 800303e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003042:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8003044:	4b11      	ldr	r3, [pc, #68]	; (800308c <FLASH_FlushCaches+0x88>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800304c:	2b00      	cmp	r3, #0
 800304e:	d017      	beq.n	8003080 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8003050:	4b0e      	ldr	r3, [pc, #56]	; (800308c <FLASH_FlushCaches+0x88>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a0d      	ldr	r2, [pc, #52]	; (800308c <FLASH_FlushCaches+0x88>)
 8003056:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800305a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800305c:	4b0b      	ldr	r3, [pc, #44]	; (800308c <FLASH_FlushCaches+0x88>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a0a      	ldr	r2, [pc, #40]	; (800308c <FLASH_FlushCaches+0x88>)
 8003062:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003066:	6013      	str	r3, [r2, #0]
 8003068:	4b08      	ldr	r3, [pc, #32]	; (800308c <FLASH_FlushCaches+0x88>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a07      	ldr	r2, [pc, #28]	; (800308c <FLASH_FlushCaches+0x88>)
 800306e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003072:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003074:	4b05      	ldr	r3, [pc, #20]	; (800308c <FLASH_FlushCaches+0x88>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a04      	ldr	r2, [pc, #16]	; (800308c <FLASH_FlushCaches+0x88>)
 800307a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800307e:	6013      	str	r3, [r2, #0]
  }
}
 8003080:	bf00      	nop
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	40023c00 	.word	0x40023c00

08003090 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003090:	b480      	push	{r7}
 8003092:	b089      	sub	sp, #36	; 0x24
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800309a:	2300      	movs	r3, #0
 800309c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800309e:	2300      	movs	r3, #0
 80030a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030a2:	2300      	movs	r3, #0
 80030a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030a6:	2300      	movs	r3, #0
 80030a8:	61fb      	str	r3, [r7, #28]
 80030aa:	e16b      	b.n	8003384 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030ac:	2201      	movs	r2, #1
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	4013      	ands	r3, r2
 80030be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	f040 815a 	bne.w	800337e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f003 0303 	and.w	r3, r3, #3
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d005      	beq.n	80030e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d130      	bne.n	8003144 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	2203      	movs	r2, #3
 80030ee:	fa02 f303 	lsl.w	r3, r2, r3
 80030f2:	43db      	mvns	r3, r3
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	4013      	ands	r3, r2
 80030f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	68da      	ldr	r2, [r3, #12]
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	69ba      	ldr	r2, [r7, #24]
 8003108:	4313      	orrs	r3, r2
 800310a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003118:	2201      	movs	r2, #1
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	43db      	mvns	r3, r3
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	4013      	ands	r3, r2
 8003126:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	091b      	lsrs	r3, r3, #4
 800312e:	f003 0201 	and.w	r2, r3, #1
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	4313      	orrs	r3, r2
 800313c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f003 0303 	and.w	r3, r3, #3
 800314c:	2b03      	cmp	r3, #3
 800314e:	d017      	beq.n	8003180 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	2203      	movs	r2, #3
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	43db      	mvns	r3, r3
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	4013      	ands	r3, r2
 8003166:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	4313      	orrs	r3, r2
 8003178:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f003 0303 	and.w	r3, r3, #3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d123      	bne.n	80031d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	08da      	lsrs	r2, r3, #3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	3208      	adds	r2, #8
 8003194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003198:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	220f      	movs	r2, #15
 80031a4:	fa02 f303 	lsl.w	r3, r2, r3
 80031a8:	43db      	mvns	r3, r3
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	4013      	ands	r3, r2
 80031ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	691a      	ldr	r2, [r3, #16]
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	f003 0307 	and.w	r3, r3, #7
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	fa02 f303 	lsl.w	r3, r2, r3
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	08da      	lsrs	r2, r3, #3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	3208      	adds	r2, #8
 80031ce:	69b9      	ldr	r1, [r7, #24]
 80031d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	2203      	movs	r2, #3
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	43db      	mvns	r3, r3
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	4013      	ands	r3, r2
 80031ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f003 0203 	and.w	r2, r3, #3
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	4313      	orrs	r3, r2
 8003200:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003210:	2b00      	cmp	r3, #0
 8003212:	f000 80b4 	beq.w	800337e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003216:	2300      	movs	r3, #0
 8003218:	60fb      	str	r3, [r7, #12]
 800321a:	4b60      	ldr	r3, [pc, #384]	; (800339c <HAL_GPIO_Init+0x30c>)
 800321c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800321e:	4a5f      	ldr	r2, [pc, #380]	; (800339c <HAL_GPIO_Init+0x30c>)
 8003220:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003224:	6453      	str	r3, [r2, #68]	; 0x44
 8003226:	4b5d      	ldr	r3, [pc, #372]	; (800339c <HAL_GPIO_Init+0x30c>)
 8003228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800322e:	60fb      	str	r3, [r7, #12]
 8003230:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003232:	4a5b      	ldr	r2, [pc, #364]	; (80033a0 <HAL_GPIO_Init+0x310>)
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	089b      	lsrs	r3, r3, #2
 8003238:	3302      	adds	r3, #2
 800323a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800323e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	f003 0303 	and.w	r3, r3, #3
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	220f      	movs	r2, #15
 800324a:	fa02 f303 	lsl.w	r3, r2, r3
 800324e:	43db      	mvns	r3, r3
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	4013      	ands	r3, r2
 8003254:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a52      	ldr	r2, [pc, #328]	; (80033a4 <HAL_GPIO_Init+0x314>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d02b      	beq.n	80032b6 <HAL_GPIO_Init+0x226>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a51      	ldr	r2, [pc, #324]	; (80033a8 <HAL_GPIO_Init+0x318>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d025      	beq.n	80032b2 <HAL_GPIO_Init+0x222>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a50      	ldr	r2, [pc, #320]	; (80033ac <HAL_GPIO_Init+0x31c>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d01f      	beq.n	80032ae <HAL_GPIO_Init+0x21e>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a4f      	ldr	r2, [pc, #316]	; (80033b0 <HAL_GPIO_Init+0x320>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d019      	beq.n	80032aa <HAL_GPIO_Init+0x21a>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a4e      	ldr	r2, [pc, #312]	; (80033b4 <HAL_GPIO_Init+0x324>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d013      	beq.n	80032a6 <HAL_GPIO_Init+0x216>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a4d      	ldr	r2, [pc, #308]	; (80033b8 <HAL_GPIO_Init+0x328>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d00d      	beq.n	80032a2 <HAL_GPIO_Init+0x212>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a4c      	ldr	r2, [pc, #304]	; (80033bc <HAL_GPIO_Init+0x32c>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d007      	beq.n	800329e <HAL_GPIO_Init+0x20e>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a4b      	ldr	r2, [pc, #300]	; (80033c0 <HAL_GPIO_Init+0x330>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d101      	bne.n	800329a <HAL_GPIO_Init+0x20a>
 8003296:	2307      	movs	r3, #7
 8003298:	e00e      	b.n	80032b8 <HAL_GPIO_Init+0x228>
 800329a:	2308      	movs	r3, #8
 800329c:	e00c      	b.n	80032b8 <HAL_GPIO_Init+0x228>
 800329e:	2306      	movs	r3, #6
 80032a0:	e00a      	b.n	80032b8 <HAL_GPIO_Init+0x228>
 80032a2:	2305      	movs	r3, #5
 80032a4:	e008      	b.n	80032b8 <HAL_GPIO_Init+0x228>
 80032a6:	2304      	movs	r3, #4
 80032a8:	e006      	b.n	80032b8 <HAL_GPIO_Init+0x228>
 80032aa:	2303      	movs	r3, #3
 80032ac:	e004      	b.n	80032b8 <HAL_GPIO_Init+0x228>
 80032ae:	2302      	movs	r3, #2
 80032b0:	e002      	b.n	80032b8 <HAL_GPIO_Init+0x228>
 80032b2:	2301      	movs	r3, #1
 80032b4:	e000      	b.n	80032b8 <HAL_GPIO_Init+0x228>
 80032b6:	2300      	movs	r3, #0
 80032b8:	69fa      	ldr	r2, [r7, #28]
 80032ba:	f002 0203 	and.w	r2, r2, #3
 80032be:	0092      	lsls	r2, r2, #2
 80032c0:	4093      	lsls	r3, r2
 80032c2:	69ba      	ldr	r2, [r7, #24]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032c8:	4935      	ldr	r1, [pc, #212]	; (80033a0 <HAL_GPIO_Init+0x310>)
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	089b      	lsrs	r3, r3, #2
 80032ce:	3302      	adds	r3, #2
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032d6:	4b3b      	ldr	r3, [pc, #236]	; (80033c4 <HAL_GPIO_Init+0x334>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	43db      	mvns	r3, r3
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	4013      	ands	r3, r2
 80032e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d003      	beq.n	80032fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80032f2:	69ba      	ldr	r2, [r7, #24]
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032fa:	4a32      	ldr	r2, [pc, #200]	; (80033c4 <HAL_GPIO_Init+0x334>)
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003300:	4b30      	ldr	r3, [pc, #192]	; (80033c4 <HAL_GPIO_Init+0x334>)
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	43db      	mvns	r3, r3
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	4013      	ands	r3, r2
 800330e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d003      	beq.n	8003324 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	4313      	orrs	r3, r2
 8003322:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003324:	4a27      	ldr	r2, [pc, #156]	; (80033c4 <HAL_GPIO_Init+0x334>)
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800332a:	4b26      	ldr	r3, [pc, #152]	; (80033c4 <HAL_GPIO_Init+0x334>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	43db      	mvns	r3, r3
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	4013      	ands	r3, r2
 8003338:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d003      	beq.n	800334e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003346:	69ba      	ldr	r2, [r7, #24]
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	4313      	orrs	r3, r2
 800334c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800334e:	4a1d      	ldr	r2, [pc, #116]	; (80033c4 <HAL_GPIO_Init+0x334>)
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003354:	4b1b      	ldr	r3, [pc, #108]	; (80033c4 <HAL_GPIO_Init+0x334>)
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	43db      	mvns	r3, r3
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	4013      	ands	r3, r2
 8003362:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d003      	beq.n	8003378 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	4313      	orrs	r3, r2
 8003376:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003378:	4a12      	ldr	r2, [pc, #72]	; (80033c4 <HAL_GPIO_Init+0x334>)
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	3301      	adds	r3, #1
 8003382:	61fb      	str	r3, [r7, #28]
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	2b0f      	cmp	r3, #15
 8003388:	f67f ae90 	bls.w	80030ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800338c:	bf00      	nop
 800338e:	bf00      	nop
 8003390:	3724      	adds	r7, #36	; 0x24
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	40023800 	.word	0x40023800
 80033a0:	40013800 	.word	0x40013800
 80033a4:	40020000 	.word	0x40020000
 80033a8:	40020400 	.word	0x40020400
 80033ac:	40020800 	.word	0x40020800
 80033b0:	40020c00 	.word	0x40020c00
 80033b4:	40021000 	.word	0x40021000
 80033b8:	40021400 	.word	0x40021400
 80033bc:	40021800 	.word	0x40021800
 80033c0:	40021c00 	.word	0x40021c00
 80033c4:	40013c00 	.word	0x40013c00

080033c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	460b      	mov	r3, r1
 80033d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	691a      	ldr	r2, [r3, #16]
 80033d8:	887b      	ldrh	r3, [r7, #2]
 80033da:	4013      	ands	r3, r2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d002      	beq.n	80033e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80033e0:	2301      	movs	r3, #1
 80033e2:	73fb      	strb	r3, [r7, #15]
 80033e4:	e001      	b.n	80033ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033e6:	2300      	movs	r3, #0
 80033e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3714      	adds	r7, #20
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	460b      	mov	r3, r1
 8003402:	807b      	strh	r3, [r7, #2]
 8003404:	4613      	mov	r3, r2
 8003406:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003408:	787b      	ldrb	r3, [r7, #1]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d003      	beq.n	8003416 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800340e:	887a      	ldrh	r2, [r7, #2]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003414:	e003      	b.n	800341e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003416:	887b      	ldrh	r3, [r7, #2]
 8003418:	041a      	lsls	r2, r3, #16
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	619a      	str	r2, [r3, #24]
}
 800341e:	bf00      	nop
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
	...

0800342c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	4603      	mov	r3, r0
 8003434:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003436:	4b08      	ldr	r3, [pc, #32]	; (8003458 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003438:	695a      	ldr	r2, [r3, #20]
 800343a:	88fb      	ldrh	r3, [r7, #6]
 800343c:	4013      	ands	r3, r2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d006      	beq.n	8003450 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003442:	4a05      	ldr	r2, [pc, #20]	; (8003458 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003444:	88fb      	ldrh	r3, [r7, #6]
 8003446:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003448:	88fb      	ldrh	r3, [r7, #6]
 800344a:	4618      	mov	r0, r3
 800344c:	f000 f806 	bl	800345c <HAL_GPIO_EXTI_Callback>
  }
}
 8003450:	bf00      	nop
 8003452:	3708      	adds	r7, #8
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	40013c00 	.word	0x40013c00

0800345c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	4603      	mov	r3, r0
 8003464:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003466:	bf00      	nop
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
	...

08003474 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e12b      	b.n	80036de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d106      	bne.n	80034a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f7fe f988 	bl	80017b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2224      	movs	r2, #36	; 0x24
 80034a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f022 0201 	bic.w	r2, r2, #1
 80034b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034d8:	f000 fd5a 	bl	8003f90 <HAL_RCC_GetPCLK1Freq>
 80034dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	4a81      	ldr	r2, [pc, #516]	; (80036e8 <HAL_I2C_Init+0x274>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d807      	bhi.n	80034f8 <HAL_I2C_Init+0x84>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	4a80      	ldr	r2, [pc, #512]	; (80036ec <HAL_I2C_Init+0x278>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	bf94      	ite	ls
 80034f0:	2301      	movls	r3, #1
 80034f2:	2300      	movhi	r3, #0
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	e006      	b.n	8003506 <HAL_I2C_Init+0x92>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	4a7d      	ldr	r2, [pc, #500]	; (80036f0 <HAL_I2C_Init+0x27c>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	bf94      	ite	ls
 8003500:	2301      	movls	r3, #1
 8003502:	2300      	movhi	r3, #0
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e0e7      	b.n	80036de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	4a78      	ldr	r2, [pc, #480]	; (80036f4 <HAL_I2C_Init+0x280>)
 8003512:	fba2 2303 	umull	r2, r3, r2, r3
 8003516:	0c9b      	lsrs	r3, r3, #18
 8003518:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68ba      	ldr	r2, [r7, #8]
 800352a:	430a      	orrs	r2, r1
 800352c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	6a1b      	ldr	r3, [r3, #32]
 8003534:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	4a6a      	ldr	r2, [pc, #424]	; (80036e8 <HAL_I2C_Init+0x274>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d802      	bhi.n	8003548 <HAL_I2C_Init+0xd4>
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	3301      	adds	r3, #1
 8003546:	e009      	b.n	800355c <HAL_I2C_Init+0xe8>
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800354e:	fb02 f303 	mul.w	r3, r2, r3
 8003552:	4a69      	ldr	r2, [pc, #420]	; (80036f8 <HAL_I2C_Init+0x284>)
 8003554:	fba2 2303 	umull	r2, r3, r2, r3
 8003558:	099b      	lsrs	r3, r3, #6
 800355a:	3301      	adds	r3, #1
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	6812      	ldr	r2, [r2, #0]
 8003560:	430b      	orrs	r3, r1
 8003562:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	69db      	ldr	r3, [r3, #28]
 800356a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800356e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	495c      	ldr	r1, [pc, #368]	; (80036e8 <HAL_I2C_Init+0x274>)
 8003578:	428b      	cmp	r3, r1
 800357a:	d819      	bhi.n	80035b0 <HAL_I2C_Init+0x13c>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	1e59      	subs	r1, r3, #1
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	fbb1 f3f3 	udiv	r3, r1, r3
 800358a:	1c59      	adds	r1, r3, #1
 800358c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003590:	400b      	ands	r3, r1
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00a      	beq.n	80035ac <HAL_I2C_Init+0x138>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	1e59      	subs	r1, r3, #1
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	005b      	lsls	r3, r3, #1
 80035a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80035a4:	3301      	adds	r3, #1
 80035a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035aa:	e051      	b.n	8003650 <HAL_I2C_Init+0x1dc>
 80035ac:	2304      	movs	r3, #4
 80035ae:	e04f      	b.n	8003650 <HAL_I2C_Init+0x1dc>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d111      	bne.n	80035dc <HAL_I2C_Init+0x168>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	1e58      	subs	r0, r3, #1
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6859      	ldr	r1, [r3, #4]
 80035c0:	460b      	mov	r3, r1
 80035c2:	005b      	lsls	r3, r3, #1
 80035c4:	440b      	add	r3, r1
 80035c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80035ca:	3301      	adds	r3, #1
 80035cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	bf0c      	ite	eq
 80035d4:	2301      	moveq	r3, #1
 80035d6:	2300      	movne	r3, #0
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	e012      	b.n	8003602 <HAL_I2C_Init+0x18e>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	1e58      	subs	r0, r3, #1
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6859      	ldr	r1, [r3, #4]
 80035e4:	460b      	mov	r3, r1
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	440b      	add	r3, r1
 80035ea:	0099      	lsls	r1, r3, #2
 80035ec:	440b      	add	r3, r1
 80035ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80035f2:	3301      	adds	r3, #1
 80035f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	bf0c      	ite	eq
 80035fc:	2301      	moveq	r3, #1
 80035fe:	2300      	movne	r3, #0
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <HAL_I2C_Init+0x196>
 8003606:	2301      	movs	r3, #1
 8003608:	e022      	b.n	8003650 <HAL_I2C_Init+0x1dc>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d10e      	bne.n	8003630 <HAL_I2C_Init+0x1bc>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	1e58      	subs	r0, r3, #1
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6859      	ldr	r1, [r3, #4]
 800361a:	460b      	mov	r3, r1
 800361c:	005b      	lsls	r3, r3, #1
 800361e:	440b      	add	r3, r1
 8003620:	fbb0 f3f3 	udiv	r3, r0, r3
 8003624:	3301      	adds	r3, #1
 8003626:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800362a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800362e:	e00f      	b.n	8003650 <HAL_I2C_Init+0x1dc>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	1e58      	subs	r0, r3, #1
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6859      	ldr	r1, [r3, #4]
 8003638:	460b      	mov	r3, r1
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	440b      	add	r3, r1
 800363e:	0099      	lsls	r1, r3, #2
 8003640:	440b      	add	r3, r1
 8003642:	fbb0 f3f3 	udiv	r3, r0, r3
 8003646:	3301      	adds	r3, #1
 8003648:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800364c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003650:	6879      	ldr	r1, [r7, #4]
 8003652:	6809      	ldr	r1, [r1, #0]
 8003654:	4313      	orrs	r3, r2
 8003656:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	69da      	ldr	r2, [r3, #28]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a1b      	ldr	r3, [r3, #32]
 800366a:	431a      	orrs	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	430a      	orrs	r2, r1
 8003672:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800367e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	6911      	ldr	r1, [r2, #16]
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	68d2      	ldr	r2, [r2, #12]
 800368a:	4311      	orrs	r1, r2
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	6812      	ldr	r2, [r2, #0]
 8003690:	430b      	orrs	r3, r1
 8003692:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	695a      	ldr	r2, [r3, #20]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	431a      	orrs	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	430a      	orrs	r2, r1
 80036ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f042 0201 	orr.w	r2, r2, #1
 80036be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2220      	movs	r2, #32
 80036ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	000186a0 	.word	0x000186a0
 80036ec:	001e847f 	.word	0x001e847f
 80036f0:	003d08ff 	.word	0x003d08ff
 80036f4:	431bde83 	.word	0x431bde83
 80036f8:	10624dd3 	.word	0x10624dd3

080036fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b086      	sub	sp, #24
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e264      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b00      	cmp	r3, #0
 8003718:	d075      	beq.n	8003806 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800371a:	4ba3      	ldr	r3, [pc, #652]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f003 030c 	and.w	r3, r3, #12
 8003722:	2b04      	cmp	r3, #4
 8003724:	d00c      	beq.n	8003740 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003726:	4ba0      	ldr	r3, [pc, #640]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800372e:	2b08      	cmp	r3, #8
 8003730:	d112      	bne.n	8003758 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003732:	4b9d      	ldr	r3, [pc, #628]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800373a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800373e:	d10b      	bne.n	8003758 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003740:	4b99      	ldr	r3, [pc, #612]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d05b      	beq.n	8003804 <HAL_RCC_OscConfig+0x108>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d157      	bne.n	8003804 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e23f      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003760:	d106      	bne.n	8003770 <HAL_RCC_OscConfig+0x74>
 8003762:	4b91      	ldr	r3, [pc, #580]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a90      	ldr	r2, [pc, #576]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 8003768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800376c:	6013      	str	r3, [r2, #0]
 800376e:	e01d      	b.n	80037ac <HAL_RCC_OscConfig+0xb0>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003778:	d10c      	bne.n	8003794 <HAL_RCC_OscConfig+0x98>
 800377a:	4b8b      	ldr	r3, [pc, #556]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a8a      	ldr	r2, [pc, #552]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 8003780:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003784:	6013      	str	r3, [r2, #0]
 8003786:	4b88      	ldr	r3, [pc, #544]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a87      	ldr	r2, [pc, #540]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 800378c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003790:	6013      	str	r3, [r2, #0]
 8003792:	e00b      	b.n	80037ac <HAL_RCC_OscConfig+0xb0>
 8003794:	4b84      	ldr	r3, [pc, #528]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a83      	ldr	r2, [pc, #524]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 800379a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800379e:	6013      	str	r3, [r2, #0]
 80037a0:	4b81      	ldr	r3, [pc, #516]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a80      	ldr	r2, [pc, #512]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 80037a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d013      	beq.n	80037dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b4:	f7fe fa44 	bl	8001c40 <HAL_GetTick>
 80037b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ba:	e008      	b.n	80037ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037bc:	f7fe fa40 	bl	8001c40 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b64      	cmp	r3, #100	; 0x64
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e204      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ce:	4b76      	ldr	r3, [pc, #472]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d0f0      	beq.n	80037bc <HAL_RCC_OscConfig+0xc0>
 80037da:	e014      	b.n	8003806 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037dc:	f7fe fa30 	bl	8001c40 <HAL_GetTick>
 80037e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037e2:	e008      	b.n	80037f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037e4:	f7fe fa2c 	bl	8001c40 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b64      	cmp	r3, #100	; 0x64
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e1f0      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037f6:	4b6c      	ldr	r3, [pc, #432]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1f0      	bne.n	80037e4 <HAL_RCC_OscConfig+0xe8>
 8003802:	e000      	b.n	8003806 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003804:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d063      	beq.n	80038da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003812:	4b65      	ldr	r3, [pc, #404]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f003 030c 	and.w	r3, r3, #12
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00b      	beq.n	8003836 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800381e:	4b62      	ldr	r3, [pc, #392]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003826:	2b08      	cmp	r3, #8
 8003828:	d11c      	bne.n	8003864 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800382a:	4b5f      	ldr	r3, [pc, #380]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d116      	bne.n	8003864 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003836:	4b5c      	ldr	r3, [pc, #368]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d005      	beq.n	800384e <HAL_RCC_OscConfig+0x152>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d001      	beq.n	800384e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e1c4      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800384e:	4b56      	ldr	r3, [pc, #344]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	00db      	lsls	r3, r3, #3
 800385c:	4952      	ldr	r1, [pc, #328]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 800385e:	4313      	orrs	r3, r2
 8003860:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003862:	e03a      	b.n	80038da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d020      	beq.n	80038ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800386c:	4b4f      	ldr	r3, [pc, #316]	; (80039ac <HAL_RCC_OscConfig+0x2b0>)
 800386e:	2201      	movs	r2, #1
 8003870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003872:	f7fe f9e5 	bl	8001c40 <HAL_GetTick>
 8003876:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003878:	e008      	b.n	800388c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800387a:	f7fe f9e1 	bl	8001c40 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	2b02      	cmp	r3, #2
 8003886:	d901      	bls.n	800388c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e1a5      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800388c:	4b46      	ldr	r3, [pc, #280]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d0f0      	beq.n	800387a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003898:	4b43      	ldr	r3, [pc, #268]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	00db      	lsls	r3, r3, #3
 80038a6:	4940      	ldr	r1, [pc, #256]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	600b      	str	r3, [r1, #0]
 80038ac:	e015      	b.n	80038da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038ae:	4b3f      	ldr	r3, [pc, #252]	; (80039ac <HAL_RCC_OscConfig+0x2b0>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b4:	f7fe f9c4 	bl	8001c40 <HAL_GetTick>
 80038b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ba:	e008      	b.n	80038ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038bc:	f7fe f9c0 	bl	8001c40 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e184      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ce:	4b36      	ldr	r3, [pc, #216]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1f0      	bne.n	80038bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0308 	and.w	r3, r3, #8
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d030      	beq.n	8003948 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d016      	beq.n	800391c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038ee:	4b30      	ldr	r3, [pc, #192]	; (80039b0 <HAL_RCC_OscConfig+0x2b4>)
 80038f0:	2201      	movs	r2, #1
 80038f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f4:	f7fe f9a4 	bl	8001c40 <HAL_GetTick>
 80038f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038fa:	e008      	b.n	800390e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038fc:	f7fe f9a0 	bl	8001c40 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b02      	cmp	r3, #2
 8003908:	d901      	bls.n	800390e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e164      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800390e:	4b26      	ldr	r3, [pc, #152]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 8003910:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d0f0      	beq.n	80038fc <HAL_RCC_OscConfig+0x200>
 800391a:	e015      	b.n	8003948 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800391c:	4b24      	ldr	r3, [pc, #144]	; (80039b0 <HAL_RCC_OscConfig+0x2b4>)
 800391e:	2200      	movs	r2, #0
 8003920:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003922:	f7fe f98d 	bl	8001c40 <HAL_GetTick>
 8003926:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003928:	e008      	b.n	800393c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800392a:	f7fe f989 	bl	8001c40 <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	2b02      	cmp	r3, #2
 8003936:	d901      	bls.n	800393c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e14d      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800393c:	4b1a      	ldr	r3, [pc, #104]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 800393e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003940:	f003 0302 	and.w	r3, r3, #2
 8003944:	2b00      	cmp	r3, #0
 8003946:	d1f0      	bne.n	800392a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0304 	and.w	r3, r3, #4
 8003950:	2b00      	cmp	r3, #0
 8003952:	f000 80a0 	beq.w	8003a96 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003956:	2300      	movs	r3, #0
 8003958:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800395a:	4b13      	ldr	r3, [pc, #76]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 800395c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d10f      	bne.n	8003986 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003966:	2300      	movs	r3, #0
 8003968:	60bb      	str	r3, [r7, #8]
 800396a:	4b0f      	ldr	r3, [pc, #60]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	4a0e      	ldr	r2, [pc, #56]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 8003970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003974:	6413      	str	r3, [r2, #64]	; 0x40
 8003976:	4b0c      	ldr	r3, [pc, #48]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800397e:	60bb      	str	r3, [r7, #8]
 8003980:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003982:	2301      	movs	r3, #1
 8003984:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003986:	4b0b      	ldr	r3, [pc, #44]	; (80039b4 <HAL_RCC_OscConfig+0x2b8>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800398e:	2b00      	cmp	r3, #0
 8003990:	d121      	bne.n	80039d6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003992:	4b08      	ldr	r3, [pc, #32]	; (80039b4 <HAL_RCC_OscConfig+0x2b8>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a07      	ldr	r2, [pc, #28]	; (80039b4 <HAL_RCC_OscConfig+0x2b8>)
 8003998:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800399c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800399e:	f7fe f94f 	bl	8001c40 <HAL_GetTick>
 80039a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a4:	e011      	b.n	80039ca <HAL_RCC_OscConfig+0x2ce>
 80039a6:	bf00      	nop
 80039a8:	40023800 	.word	0x40023800
 80039ac:	42470000 	.word	0x42470000
 80039b0:	42470e80 	.word	0x42470e80
 80039b4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039b8:	f7fe f942 	bl	8001c40 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e106      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ca:	4b85      	ldr	r3, [pc, #532]	; (8003be0 <HAL_RCC_OscConfig+0x4e4>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d0f0      	beq.n	80039b8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d106      	bne.n	80039ec <HAL_RCC_OscConfig+0x2f0>
 80039de:	4b81      	ldr	r3, [pc, #516]	; (8003be4 <HAL_RCC_OscConfig+0x4e8>)
 80039e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e2:	4a80      	ldr	r2, [pc, #512]	; (8003be4 <HAL_RCC_OscConfig+0x4e8>)
 80039e4:	f043 0301 	orr.w	r3, r3, #1
 80039e8:	6713      	str	r3, [r2, #112]	; 0x70
 80039ea:	e01c      	b.n	8003a26 <HAL_RCC_OscConfig+0x32a>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	2b05      	cmp	r3, #5
 80039f2:	d10c      	bne.n	8003a0e <HAL_RCC_OscConfig+0x312>
 80039f4:	4b7b      	ldr	r3, [pc, #492]	; (8003be4 <HAL_RCC_OscConfig+0x4e8>)
 80039f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f8:	4a7a      	ldr	r2, [pc, #488]	; (8003be4 <HAL_RCC_OscConfig+0x4e8>)
 80039fa:	f043 0304 	orr.w	r3, r3, #4
 80039fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003a00:	4b78      	ldr	r3, [pc, #480]	; (8003be4 <HAL_RCC_OscConfig+0x4e8>)
 8003a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a04:	4a77      	ldr	r2, [pc, #476]	; (8003be4 <HAL_RCC_OscConfig+0x4e8>)
 8003a06:	f043 0301 	orr.w	r3, r3, #1
 8003a0a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a0c:	e00b      	b.n	8003a26 <HAL_RCC_OscConfig+0x32a>
 8003a0e:	4b75      	ldr	r3, [pc, #468]	; (8003be4 <HAL_RCC_OscConfig+0x4e8>)
 8003a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a12:	4a74      	ldr	r2, [pc, #464]	; (8003be4 <HAL_RCC_OscConfig+0x4e8>)
 8003a14:	f023 0301 	bic.w	r3, r3, #1
 8003a18:	6713      	str	r3, [r2, #112]	; 0x70
 8003a1a:	4b72      	ldr	r3, [pc, #456]	; (8003be4 <HAL_RCC_OscConfig+0x4e8>)
 8003a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a1e:	4a71      	ldr	r2, [pc, #452]	; (8003be4 <HAL_RCC_OscConfig+0x4e8>)
 8003a20:	f023 0304 	bic.w	r3, r3, #4
 8003a24:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d015      	beq.n	8003a5a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a2e:	f7fe f907 	bl	8001c40 <HAL_GetTick>
 8003a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a34:	e00a      	b.n	8003a4c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a36:	f7fe f903 	bl	8001c40 <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d901      	bls.n	8003a4c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e0c5      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a4c:	4b65      	ldr	r3, [pc, #404]	; (8003be4 <HAL_RCC_OscConfig+0x4e8>)
 8003a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d0ee      	beq.n	8003a36 <HAL_RCC_OscConfig+0x33a>
 8003a58:	e014      	b.n	8003a84 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a5a:	f7fe f8f1 	bl	8001c40 <HAL_GetTick>
 8003a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a60:	e00a      	b.n	8003a78 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a62:	f7fe f8ed 	bl	8001c40 <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d901      	bls.n	8003a78 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e0af      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a78:	4b5a      	ldr	r3, [pc, #360]	; (8003be4 <HAL_RCC_OscConfig+0x4e8>)
 8003a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d1ee      	bne.n	8003a62 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a84:	7dfb      	ldrb	r3, [r7, #23]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d105      	bne.n	8003a96 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a8a:	4b56      	ldr	r3, [pc, #344]	; (8003be4 <HAL_RCC_OscConfig+0x4e8>)
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8e:	4a55      	ldr	r2, [pc, #340]	; (8003be4 <HAL_RCC_OscConfig+0x4e8>)
 8003a90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a94:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	f000 809b 	beq.w	8003bd6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003aa0:	4b50      	ldr	r3, [pc, #320]	; (8003be4 <HAL_RCC_OscConfig+0x4e8>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f003 030c 	and.w	r3, r3, #12
 8003aa8:	2b08      	cmp	r3, #8
 8003aaa:	d05c      	beq.n	8003b66 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d141      	bne.n	8003b38 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ab4:	4b4c      	ldr	r3, [pc, #304]	; (8003be8 <HAL_RCC_OscConfig+0x4ec>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aba:	f7fe f8c1 	bl	8001c40 <HAL_GetTick>
 8003abe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ac0:	e008      	b.n	8003ad4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ac2:	f7fe f8bd 	bl	8001c40 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e081      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ad4:	4b43      	ldr	r3, [pc, #268]	; (8003be4 <HAL_RCC_OscConfig+0x4e8>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1f0      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	69da      	ldr	r2, [r3, #28]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a1b      	ldr	r3, [r3, #32]
 8003ae8:	431a      	orrs	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aee:	019b      	lsls	r3, r3, #6
 8003af0:	431a      	orrs	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af6:	085b      	lsrs	r3, r3, #1
 8003af8:	3b01      	subs	r3, #1
 8003afa:	041b      	lsls	r3, r3, #16
 8003afc:	431a      	orrs	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b02:	061b      	lsls	r3, r3, #24
 8003b04:	4937      	ldr	r1, [pc, #220]	; (8003be4 <HAL_RCC_OscConfig+0x4e8>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b0a:	4b37      	ldr	r3, [pc, #220]	; (8003be8 <HAL_RCC_OscConfig+0x4ec>)
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b10:	f7fe f896 	bl	8001c40 <HAL_GetTick>
 8003b14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b16:	e008      	b.n	8003b2a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b18:	f7fe f892 	bl	8001c40 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e056      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b2a:	4b2e      	ldr	r3, [pc, #184]	; (8003be4 <HAL_RCC_OscConfig+0x4e8>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d0f0      	beq.n	8003b18 <HAL_RCC_OscConfig+0x41c>
 8003b36:	e04e      	b.n	8003bd6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b38:	4b2b      	ldr	r3, [pc, #172]	; (8003be8 <HAL_RCC_OscConfig+0x4ec>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b3e:	f7fe f87f 	bl	8001c40 <HAL_GetTick>
 8003b42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b44:	e008      	b.n	8003b58 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b46:	f7fe f87b 	bl	8001c40 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d901      	bls.n	8003b58 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e03f      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b58:	4b22      	ldr	r3, [pc, #136]	; (8003be4 <HAL_RCC_OscConfig+0x4e8>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1f0      	bne.n	8003b46 <HAL_RCC_OscConfig+0x44a>
 8003b64:	e037      	b.n	8003bd6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d101      	bne.n	8003b72 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e032      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b72:	4b1c      	ldr	r3, [pc, #112]	; (8003be4 <HAL_RCC_OscConfig+0x4e8>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d028      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d121      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d11a      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ba8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d111      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb8:	085b      	lsrs	r3, r3, #1
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d107      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bcc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d001      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e000      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3718      	adds	r7, #24
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	40007000 	.word	0x40007000
 8003be4:	40023800 	.word	0x40023800
 8003be8:	42470060 	.word	0x42470060

08003bec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d101      	bne.n	8003c00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e0cc      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c00:	4b68      	ldr	r3, [pc, #416]	; (8003da4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0307 	and.w	r3, r3, #7
 8003c08:	683a      	ldr	r2, [r7, #0]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d90c      	bls.n	8003c28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c0e:	4b65      	ldr	r3, [pc, #404]	; (8003da4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	b2d2      	uxtb	r2, r2
 8003c14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c16:	4b63      	ldr	r3, [pc, #396]	; (8003da4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0307 	and.w	r3, r3, #7
 8003c1e:	683a      	ldr	r2, [r7, #0]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d001      	beq.n	8003c28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e0b8      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d020      	beq.n	8003c76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0304 	and.w	r3, r3, #4
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d005      	beq.n	8003c4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c40:	4b59      	ldr	r3, [pc, #356]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	4a58      	ldr	r2, [pc, #352]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0308 	and.w	r3, r3, #8
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d005      	beq.n	8003c64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c58:	4b53      	ldr	r3, [pc, #332]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	4a52      	ldr	r2, [pc, #328]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c64:	4b50      	ldr	r3, [pc, #320]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	494d      	ldr	r1, [pc, #308]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d044      	beq.n	8003d0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d107      	bne.n	8003c9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c8a:	4b47      	ldr	r3, [pc, #284]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d119      	bne.n	8003cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e07f      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d003      	beq.n	8003caa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ca6:	2b03      	cmp	r3, #3
 8003ca8:	d107      	bne.n	8003cba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003caa:	4b3f      	ldr	r3, [pc, #252]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d109      	bne.n	8003cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e06f      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cba:	4b3b      	ldr	r3, [pc, #236]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e067      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cca:	4b37      	ldr	r3, [pc, #220]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f023 0203 	bic.w	r2, r3, #3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	4934      	ldr	r1, [pc, #208]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cdc:	f7fd ffb0 	bl	8001c40 <HAL_GetTick>
 8003ce0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ce2:	e00a      	b.n	8003cfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ce4:	f7fd ffac 	bl	8001c40 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e04f      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cfa:	4b2b      	ldr	r3, [pc, #172]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f003 020c 	and.w	r2, r3, #12
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d1eb      	bne.n	8003ce4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d0c:	4b25      	ldr	r3, [pc, #148]	; (8003da4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0307 	and.w	r3, r3, #7
 8003d14:	683a      	ldr	r2, [r7, #0]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d20c      	bcs.n	8003d34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d1a:	4b22      	ldr	r3, [pc, #136]	; (8003da4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d1c:	683a      	ldr	r2, [r7, #0]
 8003d1e:	b2d2      	uxtb	r2, r2
 8003d20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d22:	4b20      	ldr	r3, [pc, #128]	; (8003da4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0307 	and.w	r3, r3, #7
 8003d2a:	683a      	ldr	r2, [r7, #0]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d001      	beq.n	8003d34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e032      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0304 	and.w	r3, r3, #4
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d008      	beq.n	8003d52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d40:	4b19      	ldr	r3, [pc, #100]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	4916      	ldr	r1, [pc, #88]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0308 	and.w	r3, r3, #8
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d009      	beq.n	8003d72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d5e:	4b12      	ldr	r3, [pc, #72]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	00db      	lsls	r3, r3, #3
 8003d6c:	490e      	ldr	r1, [pc, #56]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d72:	f000 f821 	bl	8003db8 <HAL_RCC_GetSysClockFreq>
 8003d76:	4602      	mov	r2, r0
 8003d78:	4b0b      	ldr	r3, [pc, #44]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	091b      	lsrs	r3, r3, #4
 8003d7e:	f003 030f 	and.w	r3, r3, #15
 8003d82:	490a      	ldr	r1, [pc, #40]	; (8003dac <HAL_RCC_ClockConfig+0x1c0>)
 8003d84:	5ccb      	ldrb	r3, [r1, r3]
 8003d86:	fa22 f303 	lsr.w	r3, r2, r3
 8003d8a:	4a09      	ldr	r2, [pc, #36]	; (8003db0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d8e:	4b09      	ldr	r3, [pc, #36]	; (8003db4 <HAL_RCC_ClockConfig+0x1c8>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7fd fd9c 	bl	80018d0 <HAL_InitTick>

  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3710      	adds	r7, #16
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	40023c00 	.word	0x40023c00
 8003da8:	40023800 	.word	0x40023800
 8003dac:	08008db4 	.word	0x08008db4
 8003db0:	20000004 	.word	0x20000004
 8003db4:	20000008 	.word	0x20000008

08003db8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003db8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003dbc:	b084      	sub	sp, #16
 8003dbe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	607b      	str	r3, [r7, #4]
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	60fb      	str	r3, [r7, #12]
 8003dc8:	2300      	movs	r3, #0
 8003dca:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003dd0:	4b67      	ldr	r3, [pc, #412]	; (8003f70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f003 030c 	and.w	r3, r3, #12
 8003dd8:	2b08      	cmp	r3, #8
 8003dda:	d00d      	beq.n	8003df8 <HAL_RCC_GetSysClockFreq+0x40>
 8003ddc:	2b08      	cmp	r3, #8
 8003dde:	f200 80bd 	bhi.w	8003f5c <HAL_RCC_GetSysClockFreq+0x1a4>
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d002      	beq.n	8003dec <HAL_RCC_GetSysClockFreq+0x34>
 8003de6:	2b04      	cmp	r3, #4
 8003de8:	d003      	beq.n	8003df2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003dea:	e0b7      	b.n	8003f5c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003dec:	4b61      	ldr	r3, [pc, #388]	; (8003f74 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003dee:	60bb      	str	r3, [r7, #8]
       break;
 8003df0:	e0b7      	b.n	8003f62 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003df2:	4b60      	ldr	r3, [pc, #384]	; (8003f74 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003df4:	60bb      	str	r3, [r7, #8]
      break;
 8003df6:	e0b4      	b.n	8003f62 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003df8:	4b5d      	ldr	r3, [pc, #372]	; (8003f70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e00:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e02:	4b5b      	ldr	r3, [pc, #364]	; (8003f70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d04d      	beq.n	8003eaa <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e0e:	4b58      	ldr	r3, [pc, #352]	; (8003f70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	099b      	lsrs	r3, r3, #6
 8003e14:	461a      	mov	r2, r3
 8003e16:	f04f 0300 	mov.w	r3, #0
 8003e1a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003e1e:	f04f 0100 	mov.w	r1, #0
 8003e22:	ea02 0800 	and.w	r8, r2, r0
 8003e26:	ea03 0901 	and.w	r9, r3, r1
 8003e2a:	4640      	mov	r0, r8
 8003e2c:	4649      	mov	r1, r9
 8003e2e:	f04f 0200 	mov.w	r2, #0
 8003e32:	f04f 0300 	mov.w	r3, #0
 8003e36:	014b      	lsls	r3, r1, #5
 8003e38:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003e3c:	0142      	lsls	r2, r0, #5
 8003e3e:	4610      	mov	r0, r2
 8003e40:	4619      	mov	r1, r3
 8003e42:	ebb0 0008 	subs.w	r0, r0, r8
 8003e46:	eb61 0109 	sbc.w	r1, r1, r9
 8003e4a:	f04f 0200 	mov.w	r2, #0
 8003e4e:	f04f 0300 	mov.w	r3, #0
 8003e52:	018b      	lsls	r3, r1, #6
 8003e54:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003e58:	0182      	lsls	r2, r0, #6
 8003e5a:	1a12      	subs	r2, r2, r0
 8003e5c:	eb63 0301 	sbc.w	r3, r3, r1
 8003e60:	f04f 0000 	mov.w	r0, #0
 8003e64:	f04f 0100 	mov.w	r1, #0
 8003e68:	00d9      	lsls	r1, r3, #3
 8003e6a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e6e:	00d0      	lsls	r0, r2, #3
 8003e70:	4602      	mov	r2, r0
 8003e72:	460b      	mov	r3, r1
 8003e74:	eb12 0208 	adds.w	r2, r2, r8
 8003e78:	eb43 0309 	adc.w	r3, r3, r9
 8003e7c:	f04f 0000 	mov.w	r0, #0
 8003e80:	f04f 0100 	mov.w	r1, #0
 8003e84:	0299      	lsls	r1, r3, #10
 8003e86:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003e8a:	0290      	lsls	r0, r2, #10
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	460b      	mov	r3, r1
 8003e90:	4610      	mov	r0, r2
 8003e92:	4619      	mov	r1, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	461a      	mov	r2, r3
 8003e98:	f04f 0300 	mov.w	r3, #0
 8003e9c:	f7fc f9e8 	bl	8000270 <__aeabi_uldivmod>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	460b      	mov	r3, r1
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	60fb      	str	r3, [r7, #12]
 8003ea8:	e04a      	b.n	8003f40 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eaa:	4b31      	ldr	r3, [pc, #196]	; (8003f70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	099b      	lsrs	r3, r3, #6
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	f04f 0300 	mov.w	r3, #0
 8003eb6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003eba:	f04f 0100 	mov.w	r1, #0
 8003ebe:	ea02 0400 	and.w	r4, r2, r0
 8003ec2:	ea03 0501 	and.w	r5, r3, r1
 8003ec6:	4620      	mov	r0, r4
 8003ec8:	4629      	mov	r1, r5
 8003eca:	f04f 0200 	mov.w	r2, #0
 8003ece:	f04f 0300 	mov.w	r3, #0
 8003ed2:	014b      	lsls	r3, r1, #5
 8003ed4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003ed8:	0142      	lsls	r2, r0, #5
 8003eda:	4610      	mov	r0, r2
 8003edc:	4619      	mov	r1, r3
 8003ede:	1b00      	subs	r0, r0, r4
 8003ee0:	eb61 0105 	sbc.w	r1, r1, r5
 8003ee4:	f04f 0200 	mov.w	r2, #0
 8003ee8:	f04f 0300 	mov.w	r3, #0
 8003eec:	018b      	lsls	r3, r1, #6
 8003eee:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003ef2:	0182      	lsls	r2, r0, #6
 8003ef4:	1a12      	subs	r2, r2, r0
 8003ef6:	eb63 0301 	sbc.w	r3, r3, r1
 8003efa:	f04f 0000 	mov.w	r0, #0
 8003efe:	f04f 0100 	mov.w	r1, #0
 8003f02:	00d9      	lsls	r1, r3, #3
 8003f04:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f08:	00d0      	lsls	r0, r2, #3
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	1912      	adds	r2, r2, r4
 8003f10:	eb45 0303 	adc.w	r3, r5, r3
 8003f14:	f04f 0000 	mov.w	r0, #0
 8003f18:	f04f 0100 	mov.w	r1, #0
 8003f1c:	0299      	lsls	r1, r3, #10
 8003f1e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003f22:	0290      	lsls	r0, r2, #10
 8003f24:	4602      	mov	r2, r0
 8003f26:	460b      	mov	r3, r1
 8003f28:	4610      	mov	r0, r2
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	f04f 0300 	mov.w	r3, #0
 8003f34:	f7fc f99c 	bl	8000270 <__aeabi_uldivmod>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f40:	4b0b      	ldr	r3, [pc, #44]	; (8003f70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	0c1b      	lsrs	r3, r3, #16
 8003f46:	f003 0303 	and.w	r3, r3, #3
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f58:	60bb      	str	r3, [r7, #8]
      break;
 8003f5a:	e002      	b.n	8003f62 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f5c:	4b05      	ldr	r3, [pc, #20]	; (8003f74 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003f5e:	60bb      	str	r3, [r7, #8]
      break;
 8003f60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f62:	68bb      	ldr	r3, [r7, #8]
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3710      	adds	r7, #16
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003f6e:	bf00      	nop
 8003f70:	40023800 	.word	0x40023800
 8003f74:	00f42400 	.word	0x00f42400

08003f78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f7c:	4b03      	ldr	r3, [pc, #12]	; (8003f8c <HAL_RCC_GetHCLKFreq+0x14>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	20000004 	.word	0x20000004

08003f90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f94:	f7ff fff0 	bl	8003f78 <HAL_RCC_GetHCLKFreq>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	4b05      	ldr	r3, [pc, #20]	; (8003fb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	0a9b      	lsrs	r3, r3, #10
 8003fa0:	f003 0307 	and.w	r3, r3, #7
 8003fa4:	4903      	ldr	r1, [pc, #12]	; (8003fb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fa6:	5ccb      	ldrb	r3, [r1, r3]
 8003fa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	40023800 	.word	0x40023800
 8003fb4:	08008dc4 	.word	0x08008dc4

08003fb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003fbc:	f7ff ffdc 	bl	8003f78 <HAL_RCC_GetHCLKFreq>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	4b05      	ldr	r3, [pc, #20]	; (8003fd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	0b5b      	lsrs	r3, r3, #13
 8003fc8:	f003 0307 	and.w	r3, r3, #7
 8003fcc:	4903      	ldr	r1, [pc, #12]	; (8003fdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fce:	5ccb      	ldrb	r3, [r1, r3]
 8003fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	40023800 	.word	0x40023800
 8003fdc:	08008dc4 	.word	0x08008dc4

08003fe0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	220f      	movs	r2, #15
 8003fee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003ff0:	4b12      	ldr	r3, [pc, #72]	; (800403c <HAL_RCC_GetClockConfig+0x5c>)
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f003 0203 	and.w	r2, r3, #3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003ffc:	4b0f      	ldr	r3, [pc, #60]	; (800403c <HAL_RCC_GetClockConfig+0x5c>)
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004008:	4b0c      	ldr	r3, [pc, #48]	; (800403c <HAL_RCC_GetClockConfig+0x5c>)
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004014:	4b09      	ldr	r3, [pc, #36]	; (800403c <HAL_RCC_GetClockConfig+0x5c>)
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	08db      	lsrs	r3, r3, #3
 800401a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004022:	4b07      	ldr	r3, [pc, #28]	; (8004040 <HAL_RCC_GetClockConfig+0x60>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0207 	and.w	r2, r3, #7
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	601a      	str	r2, [r3, #0]
}
 800402e:	bf00      	nop
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	40023800 	.word	0x40023800
 8004040:	40023c00 	.word	0x40023c00

08004044 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800404a:	f7fd fdf9 	bl	8001c40 <HAL_GetTick>
 800404e:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004050:	4b5d      	ldr	r3, [pc, #372]	; (80041c8 <HAL_RCC_DeInit+0x184>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a5c      	ldr	r2, [pc, #368]	; (80041c8 <HAL_RCC_DeInit+0x184>)
 8004056:	f043 0301 	orr.w	r3, r3, #1
 800405a:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800405c:	e008      	b.n	8004070 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800405e:	f7fd fdef 	bl	8001c40 <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	2b02      	cmp	r3, #2
 800406a:	d901      	bls.n	8004070 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e0a7      	b.n	80041c0 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8004070:	4b55      	ldr	r3, [pc, #340]	; (80041c8 <HAL_RCC_DeInit+0x184>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0302 	and.w	r3, r3, #2
 8004078:	2b00      	cmp	r3, #0
 800407a:	d0f0      	beq.n	800405e <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 800407c:	4b52      	ldr	r3, [pc, #328]	; (80041c8 <HAL_RCC_DeInit+0x184>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a51      	ldr	r2, [pc, #324]	; (80041c8 <HAL_RCC_DeInit+0x184>)
 8004082:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004086:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8004088:	f7fd fdda 	bl	8001c40 <HAL_GetTick>
 800408c:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 800408e:	4b4e      	ldr	r3, [pc, #312]	; (80041c8 <HAL_RCC_DeInit+0x184>)
 8004090:	2200      	movs	r2, #0
 8004092:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8004094:	e00a      	b.n	80040ac <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004096:	f7fd fdd3 	bl	8001c40 <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d901      	bls.n	80040ac <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e089      	b.n	80041c0 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80040ac:	4b46      	ldr	r3, [pc, #280]	; (80041c8 <HAL_RCC_DeInit+0x184>)
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f003 030c 	and.w	r3, r3, #12
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1ee      	bne.n	8004096 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80040b8:	f7fd fdc2 	bl	8001c40 <HAL_GetTick>
 80040bc:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 80040be:	4b42      	ldr	r3, [pc, #264]	; (80041c8 <HAL_RCC_DeInit+0x184>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a41      	ldr	r2, [pc, #260]	; (80041c8 <HAL_RCC_DeInit+0x184>)
 80040c4:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 80040c8:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80040ca:	e008      	b.n	80040de <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040cc:	f7fd fdb8 	bl	8001c40 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b64      	cmp	r3, #100	; 0x64
 80040d8:	d901      	bls.n	80040de <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e070      	b.n	80041c0 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80040de:	4b3a      	ldr	r3, [pc, #232]	; (80041c8 <HAL_RCC_DeInit+0x184>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1f0      	bne.n	80040cc <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80040ea:	f7fd fda9 	bl	8001c40 <HAL_GetTick>
 80040ee:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80040f0:	4b35      	ldr	r3, [pc, #212]	; (80041c8 <HAL_RCC_DeInit+0x184>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a34      	ldr	r2, [pc, #208]	; (80041c8 <HAL_RCC_DeInit+0x184>)
 80040f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040fa:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80040fc:	e008      	b.n	8004110 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040fe:	f7fd fd9f 	bl	8001c40 <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	2b02      	cmp	r3, #2
 800410a:	d901      	bls.n	8004110 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e057      	b.n	80041c0 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8004110:	4b2d      	ldr	r3, [pc, #180]	; (80041c8 <HAL_RCC_DeInit+0x184>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d1f0      	bne.n	80040fe <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800411c:	f7fd fd90 	bl	8001c40 <HAL_GetTick>
 8004120:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8004122:	4b29      	ldr	r3, [pc, #164]	; (80041c8 <HAL_RCC_DeInit+0x184>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a28      	ldr	r2, [pc, #160]	; (80041c8 <HAL_RCC_DeInit+0x184>)
 8004128:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800412c:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800412e:	e008      	b.n	8004142 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004130:	f7fd fd86 	bl	8001c40 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b02      	cmp	r3, #2
 800413c:	d901      	bls.n	8004142 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e03e      	b.n	80041c0 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8004142:	4b21      	ldr	r3, [pc, #132]	; (80041c8 <HAL_RCC_DeInit+0x184>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1f0      	bne.n	8004130 <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 800414e:	4b1e      	ldr	r3, [pc, #120]	; (80041c8 <HAL_RCC_DeInit+0x184>)
 8004150:	4a1e      	ldr	r2, [pc, #120]	; (80041cc <HAL_RCC_DeInit+0x188>)
 8004152:	605a      	str	r2, [r3, #4]
  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8004154:	4b1c      	ldr	r3, [pc, #112]	; (80041c8 <HAL_RCC_DeInit+0x184>)
 8004156:	4a1e      	ldr	r2, [pc, #120]	; (80041d0 <HAL_RCC_DeInit+0x18c>)
 8004158:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 800415c:	4b1a      	ldr	r3, [pc, #104]	; (80041c8 <HAL_RCC_DeInit+0x184>)
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	4a19      	ldr	r2, [pc, #100]	; (80041c8 <HAL_RCC_DeInit+0x184>)
 8004162:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8004166:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8004168:	4b17      	ldr	r3, [pc, #92]	; (80041c8 <HAL_RCC_DeInit+0x184>)
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	4a16      	ldr	r2, [pc, #88]	; (80041c8 <HAL_RCC_DeInit+0x184>)
 800416e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004172:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8004174:	4b14      	ldr	r3, [pc, #80]	; (80041c8 <HAL_RCC_DeInit+0x184>)
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	4a13      	ldr	r2, [pc, #76]	; (80041c8 <HAL_RCC_DeInit+0x184>)
 800417a:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 800417e:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8004180:	4b11      	ldr	r3, [pc, #68]	; (80041c8 <HAL_RCC_DeInit+0x184>)
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	4a10      	ldr	r2, [pc, #64]	; (80041c8 <HAL_RCC_DeInit+0x184>)
 8004186:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800418a:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800418c:	4b0e      	ldr	r3, [pc, #56]	; (80041c8 <HAL_RCC_DeInit+0x184>)
 800418e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004190:	4a0d      	ldr	r2, [pc, #52]	; (80041c8 <HAL_RCC_DeInit+0x184>)
 8004192:	f023 0301 	bic.w	r3, r3, #1
 8004196:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8004198:	4b0b      	ldr	r3, [pc, #44]	; (80041c8 <HAL_RCC_DeInit+0x184>)
 800419a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800419c:	4a0a      	ldr	r2, [pc, #40]	; (80041c8 <HAL_RCC_DeInit+0x184>)
 800419e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041a2:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 80041a4:	4b0b      	ldr	r3, [pc, #44]	; (80041d4 <HAL_RCC_DeInit+0x190>)
 80041a6:	4a0c      	ldr	r2, [pc, #48]	; (80041d8 <HAL_RCC_DeInit+0x194>)
 80041a8:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 80041aa:	4b0c      	ldr	r3, [pc, #48]	; (80041dc <HAL_RCC_DeInit+0x198>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7fd fb8e 	bl	80018d0 <HAL_InitTick>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e000      	b.n	80041c0 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 80041be:	2300      	movs	r3, #0
  }
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3708      	adds	r7, #8
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	40023800 	.word	0x40023800
 80041cc:	04003010 	.word	0x04003010
 80041d0:	20003000 	.word	0x20003000
 80041d4:	20000004 	.word	0x20000004
 80041d8:	00f42400 	.word	0x00f42400
 80041dc:	20000008 	.word	0x20000008

080041e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e041      	b.n	8004276 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d106      	bne.n	800420c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 f839 	bl	800427e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2202      	movs	r2, #2
 8004210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	3304      	adds	r3, #4
 800421c:	4619      	mov	r1, r3
 800421e:	4610      	mov	r0, r2
 8004220:	f000 f9d8 	bl	80045d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3708      	adds	r7, #8
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800427e:	b480      	push	{r7}
 8004280:	b083      	sub	sp, #12
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004286:	bf00      	nop
 8004288:	370c      	adds	r7, #12
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
	...

08004294 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004294:	b480      	push	{r7}
 8004296:	b085      	sub	sp, #20
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d001      	beq.n	80042ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e04e      	b.n	800434a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2202      	movs	r2, #2
 80042b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68da      	ldr	r2, [r3, #12]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f042 0201 	orr.w	r2, r2, #1
 80042c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a23      	ldr	r2, [pc, #140]	; (8004358 <HAL_TIM_Base_Start_IT+0xc4>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d022      	beq.n	8004314 <HAL_TIM_Base_Start_IT+0x80>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042d6:	d01d      	beq.n	8004314 <HAL_TIM_Base_Start_IT+0x80>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a1f      	ldr	r2, [pc, #124]	; (800435c <HAL_TIM_Base_Start_IT+0xc8>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d018      	beq.n	8004314 <HAL_TIM_Base_Start_IT+0x80>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a1e      	ldr	r2, [pc, #120]	; (8004360 <HAL_TIM_Base_Start_IT+0xcc>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d013      	beq.n	8004314 <HAL_TIM_Base_Start_IT+0x80>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a1c      	ldr	r2, [pc, #112]	; (8004364 <HAL_TIM_Base_Start_IT+0xd0>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d00e      	beq.n	8004314 <HAL_TIM_Base_Start_IT+0x80>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a1b      	ldr	r2, [pc, #108]	; (8004368 <HAL_TIM_Base_Start_IT+0xd4>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d009      	beq.n	8004314 <HAL_TIM_Base_Start_IT+0x80>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a19      	ldr	r2, [pc, #100]	; (800436c <HAL_TIM_Base_Start_IT+0xd8>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d004      	beq.n	8004314 <HAL_TIM_Base_Start_IT+0x80>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a18      	ldr	r2, [pc, #96]	; (8004370 <HAL_TIM_Base_Start_IT+0xdc>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d111      	bne.n	8004338 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f003 0307 	and.w	r3, r3, #7
 800431e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2b06      	cmp	r3, #6
 8004324:	d010      	beq.n	8004348 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f042 0201 	orr.w	r2, r2, #1
 8004334:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004336:	e007      	b.n	8004348 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f042 0201 	orr.w	r2, r2, #1
 8004346:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3714      	adds	r7, #20
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	40010000 	.word	0x40010000
 800435c:	40000400 	.word	0x40000400
 8004360:	40000800 	.word	0x40000800
 8004364:	40000c00 	.word	0x40000c00
 8004368:	40010400 	.word	0x40010400
 800436c:	40014000 	.word	0x40014000
 8004370:	40001800 	.word	0x40001800

08004374 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b02      	cmp	r3, #2
 8004388:	d122      	bne.n	80043d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	f003 0302 	and.w	r3, r3, #2
 8004394:	2b02      	cmp	r3, #2
 8004396:	d11b      	bne.n	80043d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f06f 0202 	mvn.w	r2, #2
 80043a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2201      	movs	r2, #1
 80043a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	f003 0303 	and.w	r3, r3, #3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d003      	beq.n	80043be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 f8ee 	bl	8004598 <HAL_TIM_IC_CaptureCallback>
 80043bc:	e005      	b.n	80043ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 f8e0 	bl	8004584 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f000 f8f1 	bl	80045ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	f003 0304 	and.w	r3, r3, #4
 80043da:	2b04      	cmp	r3, #4
 80043dc:	d122      	bne.n	8004424 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	f003 0304 	and.w	r3, r3, #4
 80043e8:	2b04      	cmp	r3, #4
 80043ea:	d11b      	bne.n	8004424 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f06f 0204 	mvn.w	r2, #4
 80043f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2202      	movs	r2, #2
 80043fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	699b      	ldr	r3, [r3, #24]
 8004402:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004406:	2b00      	cmp	r3, #0
 8004408:	d003      	beq.n	8004412 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 f8c4 	bl	8004598 <HAL_TIM_IC_CaptureCallback>
 8004410:	e005      	b.n	800441e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 f8b6 	bl	8004584 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f000 f8c7 	bl	80045ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	f003 0308 	and.w	r3, r3, #8
 800442e:	2b08      	cmp	r3, #8
 8004430:	d122      	bne.n	8004478 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	f003 0308 	and.w	r3, r3, #8
 800443c:	2b08      	cmp	r3, #8
 800443e:	d11b      	bne.n	8004478 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f06f 0208 	mvn.w	r2, #8
 8004448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2204      	movs	r2, #4
 800444e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	69db      	ldr	r3, [r3, #28]
 8004456:	f003 0303 	and.w	r3, r3, #3
 800445a:	2b00      	cmp	r3, #0
 800445c:	d003      	beq.n	8004466 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 f89a 	bl	8004598 <HAL_TIM_IC_CaptureCallback>
 8004464:	e005      	b.n	8004472 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 f88c 	bl	8004584 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 f89d 	bl	80045ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	f003 0310 	and.w	r3, r3, #16
 8004482:	2b10      	cmp	r3, #16
 8004484:	d122      	bne.n	80044cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	f003 0310 	and.w	r3, r3, #16
 8004490:	2b10      	cmp	r3, #16
 8004492:	d11b      	bne.n	80044cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f06f 0210 	mvn.w	r2, #16
 800449c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2208      	movs	r2, #8
 80044a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	69db      	ldr	r3, [r3, #28]
 80044aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d003      	beq.n	80044ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 f870 	bl	8004598 <HAL_TIM_IC_CaptureCallback>
 80044b8:	e005      	b.n	80044c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 f862 	bl	8004584 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 f873 	bl	80045ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d10e      	bne.n	80044f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	f003 0301 	and.w	r3, r3, #1
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d107      	bne.n	80044f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f06f 0201 	mvn.w	r2, #1
 80044f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f7fd f866 	bl	80015c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004502:	2b80      	cmp	r3, #128	; 0x80
 8004504:	d10e      	bne.n	8004524 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004510:	2b80      	cmp	r3, #128	; 0x80
 8004512:	d107      	bne.n	8004524 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800451c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 f902 	bl	8004728 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800452e:	2b40      	cmp	r3, #64	; 0x40
 8004530:	d10e      	bne.n	8004550 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800453c:	2b40      	cmp	r3, #64	; 0x40
 800453e:	d107      	bne.n	8004550 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 f838 	bl	80045c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	f003 0320 	and.w	r3, r3, #32
 800455a:	2b20      	cmp	r3, #32
 800455c:	d10e      	bne.n	800457c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	f003 0320 	and.w	r3, r3, #32
 8004568:	2b20      	cmp	r3, #32
 800456a:	d107      	bne.n	800457c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f06f 0220 	mvn.w	r2, #32
 8004574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f8cc 	bl	8004714 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800457c:	bf00      	nop
 800457e:	3708      	adds	r7, #8
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800458c:	bf00      	nop
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045a0:	bf00      	nop
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4a40      	ldr	r2, [pc, #256]	; (80046e8 <TIM_Base_SetConfig+0x114>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d013      	beq.n	8004614 <TIM_Base_SetConfig+0x40>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045f2:	d00f      	beq.n	8004614 <TIM_Base_SetConfig+0x40>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4a3d      	ldr	r2, [pc, #244]	; (80046ec <TIM_Base_SetConfig+0x118>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d00b      	beq.n	8004614 <TIM_Base_SetConfig+0x40>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a3c      	ldr	r2, [pc, #240]	; (80046f0 <TIM_Base_SetConfig+0x11c>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d007      	beq.n	8004614 <TIM_Base_SetConfig+0x40>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a3b      	ldr	r2, [pc, #236]	; (80046f4 <TIM_Base_SetConfig+0x120>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d003      	beq.n	8004614 <TIM_Base_SetConfig+0x40>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a3a      	ldr	r2, [pc, #232]	; (80046f8 <TIM_Base_SetConfig+0x124>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d108      	bne.n	8004626 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800461a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	4313      	orrs	r3, r2
 8004624:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a2f      	ldr	r2, [pc, #188]	; (80046e8 <TIM_Base_SetConfig+0x114>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d02b      	beq.n	8004686 <TIM_Base_SetConfig+0xb2>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004634:	d027      	beq.n	8004686 <TIM_Base_SetConfig+0xb2>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a2c      	ldr	r2, [pc, #176]	; (80046ec <TIM_Base_SetConfig+0x118>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d023      	beq.n	8004686 <TIM_Base_SetConfig+0xb2>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a2b      	ldr	r2, [pc, #172]	; (80046f0 <TIM_Base_SetConfig+0x11c>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d01f      	beq.n	8004686 <TIM_Base_SetConfig+0xb2>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a2a      	ldr	r2, [pc, #168]	; (80046f4 <TIM_Base_SetConfig+0x120>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d01b      	beq.n	8004686 <TIM_Base_SetConfig+0xb2>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a29      	ldr	r2, [pc, #164]	; (80046f8 <TIM_Base_SetConfig+0x124>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d017      	beq.n	8004686 <TIM_Base_SetConfig+0xb2>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a28      	ldr	r2, [pc, #160]	; (80046fc <TIM_Base_SetConfig+0x128>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d013      	beq.n	8004686 <TIM_Base_SetConfig+0xb2>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a27      	ldr	r2, [pc, #156]	; (8004700 <TIM_Base_SetConfig+0x12c>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d00f      	beq.n	8004686 <TIM_Base_SetConfig+0xb2>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a26      	ldr	r2, [pc, #152]	; (8004704 <TIM_Base_SetConfig+0x130>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d00b      	beq.n	8004686 <TIM_Base_SetConfig+0xb2>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a25      	ldr	r2, [pc, #148]	; (8004708 <TIM_Base_SetConfig+0x134>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d007      	beq.n	8004686 <TIM_Base_SetConfig+0xb2>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a24      	ldr	r2, [pc, #144]	; (800470c <TIM_Base_SetConfig+0x138>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d003      	beq.n	8004686 <TIM_Base_SetConfig+0xb2>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a23      	ldr	r2, [pc, #140]	; (8004710 <TIM_Base_SetConfig+0x13c>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d108      	bne.n	8004698 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800468c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	4313      	orrs	r3, r2
 8004696:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	689a      	ldr	r2, [r3, #8]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a0a      	ldr	r2, [pc, #40]	; (80046e8 <TIM_Base_SetConfig+0x114>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d003      	beq.n	80046cc <TIM_Base_SetConfig+0xf8>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a0c      	ldr	r2, [pc, #48]	; (80046f8 <TIM_Base_SetConfig+0x124>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d103      	bne.n	80046d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	691a      	ldr	r2, [r3, #16]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	615a      	str	r2, [r3, #20]
}
 80046da:	bf00      	nop
 80046dc:	3714      	adds	r7, #20
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	40010000 	.word	0x40010000
 80046ec:	40000400 	.word	0x40000400
 80046f0:	40000800 	.word	0x40000800
 80046f4:	40000c00 	.word	0x40000c00
 80046f8:	40010400 	.word	0x40010400
 80046fc:	40014000 	.word	0x40014000
 8004700:	40014400 	.word	0x40014400
 8004704:	40014800 	.word	0x40014800
 8004708:	40001800 	.word	0x40001800
 800470c:	40001c00 	.word	0x40001c00
 8004710:	40002000 	.word	0x40002000

08004714 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800471c:	bf00      	nop
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d101      	bne.n	800474e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e03f      	b.n	80047ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004754:	b2db      	uxtb	r3, r3
 8004756:	2b00      	cmp	r3, #0
 8004758:	d106      	bne.n	8004768 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f7fd f86c 	bl	8001840 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2224      	movs	r2, #36	; 0x24
 800476c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68da      	ldr	r2, [r3, #12]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800477e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f000 f905 	bl	8004990 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	691a      	ldr	r2, [r3, #16]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004794:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	695a      	ldr	r2, [r3, #20]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68da      	ldr	r2, [r3, #12]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2220      	movs	r2, #32
 80047c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2220      	movs	r2, #32
 80047c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3708      	adds	r7, #8
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b08a      	sub	sp, #40	; 0x28
 80047da:	af02      	add	r7, sp, #8
 80047dc:	60f8      	str	r0, [r7, #12]
 80047de:	60b9      	str	r1, [r7, #8]
 80047e0:	603b      	str	r3, [r7, #0]
 80047e2:	4613      	mov	r3, r2
 80047e4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80047e6:	2300      	movs	r3, #0
 80047e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b20      	cmp	r3, #32
 80047f4:	d17c      	bne.n	80048f0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d002      	beq.n	8004802 <HAL_UART_Transmit+0x2c>
 80047fc:	88fb      	ldrh	r3, [r7, #6]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d101      	bne.n	8004806 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e075      	b.n	80048f2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800480c:	2b01      	cmp	r3, #1
 800480e:	d101      	bne.n	8004814 <HAL_UART_Transmit+0x3e>
 8004810:	2302      	movs	r3, #2
 8004812:	e06e      	b.n	80048f2 <HAL_UART_Transmit+0x11c>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2200      	movs	r2, #0
 8004820:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2221      	movs	r2, #33	; 0x21
 8004826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800482a:	f7fd fa09 	bl	8001c40 <HAL_GetTick>
 800482e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	88fa      	ldrh	r2, [r7, #6]
 8004834:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	88fa      	ldrh	r2, [r7, #6]
 800483a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004844:	d108      	bne.n	8004858 <HAL_UART_Transmit+0x82>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d104      	bne.n	8004858 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800484e:	2300      	movs	r3, #0
 8004850:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	61bb      	str	r3, [r7, #24]
 8004856:	e003      	b.n	8004860 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800485c:	2300      	movs	r3, #0
 800485e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004868:	e02a      	b.n	80048c0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	9300      	str	r3, [sp, #0]
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	2200      	movs	r2, #0
 8004872:	2180      	movs	r1, #128	; 0x80
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f000 f840 	bl	80048fa <UART_WaitOnFlagUntilTimeout>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d001      	beq.n	8004884 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e036      	b.n	80048f2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d10b      	bne.n	80048a2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	881b      	ldrh	r3, [r3, #0]
 800488e:	461a      	mov	r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004898:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	3302      	adds	r3, #2
 800489e:	61bb      	str	r3, [r7, #24]
 80048a0:	e007      	b.n	80048b2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	781a      	ldrb	r2, [r3, #0]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	3301      	adds	r3, #1
 80048b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	3b01      	subs	r3, #1
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1cf      	bne.n	800486a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	9300      	str	r3, [sp, #0]
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	2200      	movs	r2, #0
 80048d2:	2140      	movs	r1, #64	; 0x40
 80048d4:	68f8      	ldr	r0, [r7, #12]
 80048d6:	f000 f810 	bl	80048fa <UART_WaitOnFlagUntilTimeout>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d001      	beq.n	80048e4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e006      	b.n	80048f2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2220      	movs	r2, #32
 80048e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80048ec:	2300      	movs	r3, #0
 80048ee:	e000      	b.n	80048f2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80048f0:	2302      	movs	r3, #2
  }
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3720      	adds	r7, #32
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}

080048fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80048fa:	b580      	push	{r7, lr}
 80048fc:	b084      	sub	sp, #16
 80048fe:	af00      	add	r7, sp, #0
 8004900:	60f8      	str	r0, [r7, #12]
 8004902:	60b9      	str	r1, [r7, #8]
 8004904:	603b      	str	r3, [r7, #0]
 8004906:	4613      	mov	r3, r2
 8004908:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800490a:	e02c      	b.n	8004966 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004912:	d028      	beq.n	8004966 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d007      	beq.n	800492a <UART_WaitOnFlagUntilTimeout+0x30>
 800491a:	f7fd f991 	bl	8001c40 <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	429a      	cmp	r2, r3
 8004928:	d21d      	bcs.n	8004966 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68da      	ldr	r2, [r3, #12]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004938:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	695a      	ldr	r2, [r3, #20]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f022 0201 	bic.w	r2, r2, #1
 8004948:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2220      	movs	r2, #32
 800494e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2220      	movs	r2, #32
 8004956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e00f      	b.n	8004986 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	4013      	ands	r3, r2
 8004970:	68ba      	ldr	r2, [r7, #8]
 8004972:	429a      	cmp	r2, r3
 8004974:	bf0c      	ite	eq
 8004976:	2301      	moveq	r3, #1
 8004978:	2300      	movne	r3, #0
 800497a:	b2db      	uxtb	r3, r3
 800497c:	461a      	mov	r2, r3
 800497e:	79fb      	ldrb	r3, [r7, #7]
 8004980:	429a      	cmp	r2, r3
 8004982:	d0c3      	beq.n	800490c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3710      	adds	r7, #16
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
	...

08004990 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004994:	b09f      	sub	sp, #124	; 0x7c
 8004996:	af00      	add	r7, sp, #0
 8004998:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800499a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80049a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049a6:	68d9      	ldr	r1, [r3, #12]
 80049a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	ea40 0301 	orr.w	r3, r0, r1
 80049b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80049b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049b4:	689a      	ldr	r2, [r3, #8]
 80049b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	431a      	orrs	r2, r3
 80049bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049be:	695b      	ldr	r3, [r3, #20]
 80049c0:	431a      	orrs	r2, r3
 80049c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049c4:	69db      	ldr	r3, [r3, #28]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80049ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80049d4:	f021 010c 	bic.w	r1, r1, #12
 80049d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049de:	430b      	orrs	r3, r1
 80049e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	695b      	ldr	r3, [r3, #20]
 80049e8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80049ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049ee:	6999      	ldr	r1, [r3, #24]
 80049f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	ea40 0301 	orr.w	r3, r0, r1
 80049f8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80049fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	4bc5      	ldr	r3, [pc, #788]	; (8004d14 <UART_SetConfig+0x384>)
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d004      	beq.n	8004a0e <UART_SetConfig+0x7e>
 8004a04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	4bc3      	ldr	r3, [pc, #780]	; (8004d18 <UART_SetConfig+0x388>)
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d103      	bne.n	8004a16 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a0e:	f7ff fad3 	bl	8003fb8 <HAL_RCC_GetPCLK2Freq>
 8004a12:	6778      	str	r0, [r7, #116]	; 0x74
 8004a14:	e002      	b.n	8004a1c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a16:	f7ff fabb 	bl	8003f90 <HAL_RCC_GetPCLK1Freq>
 8004a1a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a1e:	69db      	ldr	r3, [r3, #28]
 8004a20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a24:	f040 80b6 	bne.w	8004b94 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a2a:	461c      	mov	r4, r3
 8004a2c:	f04f 0500 	mov.w	r5, #0
 8004a30:	4622      	mov	r2, r4
 8004a32:	462b      	mov	r3, r5
 8004a34:	1891      	adds	r1, r2, r2
 8004a36:	6439      	str	r1, [r7, #64]	; 0x40
 8004a38:	415b      	adcs	r3, r3
 8004a3a:	647b      	str	r3, [r7, #68]	; 0x44
 8004a3c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a40:	1912      	adds	r2, r2, r4
 8004a42:	eb45 0303 	adc.w	r3, r5, r3
 8004a46:	f04f 0000 	mov.w	r0, #0
 8004a4a:	f04f 0100 	mov.w	r1, #0
 8004a4e:	00d9      	lsls	r1, r3, #3
 8004a50:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a54:	00d0      	lsls	r0, r2, #3
 8004a56:	4602      	mov	r2, r0
 8004a58:	460b      	mov	r3, r1
 8004a5a:	1911      	adds	r1, r2, r4
 8004a5c:	6639      	str	r1, [r7, #96]	; 0x60
 8004a5e:	416b      	adcs	r3, r5
 8004a60:	667b      	str	r3, [r7, #100]	; 0x64
 8004a62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	461a      	mov	r2, r3
 8004a68:	f04f 0300 	mov.w	r3, #0
 8004a6c:	1891      	adds	r1, r2, r2
 8004a6e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a70:	415b      	adcs	r3, r3
 8004a72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a78:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004a7c:	f7fb fbf8 	bl	8000270 <__aeabi_uldivmod>
 8004a80:	4602      	mov	r2, r0
 8004a82:	460b      	mov	r3, r1
 8004a84:	4ba5      	ldr	r3, [pc, #660]	; (8004d1c <UART_SetConfig+0x38c>)
 8004a86:	fba3 2302 	umull	r2, r3, r3, r2
 8004a8a:	095b      	lsrs	r3, r3, #5
 8004a8c:	011e      	lsls	r6, r3, #4
 8004a8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a90:	461c      	mov	r4, r3
 8004a92:	f04f 0500 	mov.w	r5, #0
 8004a96:	4622      	mov	r2, r4
 8004a98:	462b      	mov	r3, r5
 8004a9a:	1891      	adds	r1, r2, r2
 8004a9c:	6339      	str	r1, [r7, #48]	; 0x30
 8004a9e:	415b      	adcs	r3, r3
 8004aa0:	637b      	str	r3, [r7, #52]	; 0x34
 8004aa2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004aa6:	1912      	adds	r2, r2, r4
 8004aa8:	eb45 0303 	adc.w	r3, r5, r3
 8004aac:	f04f 0000 	mov.w	r0, #0
 8004ab0:	f04f 0100 	mov.w	r1, #0
 8004ab4:	00d9      	lsls	r1, r3, #3
 8004ab6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004aba:	00d0      	lsls	r0, r2, #3
 8004abc:	4602      	mov	r2, r0
 8004abe:	460b      	mov	r3, r1
 8004ac0:	1911      	adds	r1, r2, r4
 8004ac2:	65b9      	str	r1, [r7, #88]	; 0x58
 8004ac4:	416b      	adcs	r3, r5
 8004ac6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ac8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	461a      	mov	r2, r3
 8004ace:	f04f 0300 	mov.w	r3, #0
 8004ad2:	1891      	adds	r1, r2, r2
 8004ad4:	62b9      	str	r1, [r7, #40]	; 0x28
 8004ad6:	415b      	adcs	r3, r3
 8004ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ada:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ade:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004ae2:	f7fb fbc5 	bl	8000270 <__aeabi_uldivmod>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	460b      	mov	r3, r1
 8004aea:	4b8c      	ldr	r3, [pc, #560]	; (8004d1c <UART_SetConfig+0x38c>)
 8004aec:	fba3 1302 	umull	r1, r3, r3, r2
 8004af0:	095b      	lsrs	r3, r3, #5
 8004af2:	2164      	movs	r1, #100	; 0x64
 8004af4:	fb01 f303 	mul.w	r3, r1, r3
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	00db      	lsls	r3, r3, #3
 8004afc:	3332      	adds	r3, #50	; 0x32
 8004afe:	4a87      	ldr	r2, [pc, #540]	; (8004d1c <UART_SetConfig+0x38c>)
 8004b00:	fba2 2303 	umull	r2, r3, r2, r3
 8004b04:	095b      	lsrs	r3, r3, #5
 8004b06:	005b      	lsls	r3, r3, #1
 8004b08:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b0c:	441e      	add	r6, r3
 8004b0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b10:	4618      	mov	r0, r3
 8004b12:	f04f 0100 	mov.w	r1, #0
 8004b16:	4602      	mov	r2, r0
 8004b18:	460b      	mov	r3, r1
 8004b1a:	1894      	adds	r4, r2, r2
 8004b1c:	623c      	str	r4, [r7, #32]
 8004b1e:	415b      	adcs	r3, r3
 8004b20:	627b      	str	r3, [r7, #36]	; 0x24
 8004b22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b26:	1812      	adds	r2, r2, r0
 8004b28:	eb41 0303 	adc.w	r3, r1, r3
 8004b2c:	f04f 0400 	mov.w	r4, #0
 8004b30:	f04f 0500 	mov.w	r5, #0
 8004b34:	00dd      	lsls	r5, r3, #3
 8004b36:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004b3a:	00d4      	lsls	r4, r2, #3
 8004b3c:	4622      	mov	r2, r4
 8004b3e:	462b      	mov	r3, r5
 8004b40:	1814      	adds	r4, r2, r0
 8004b42:	653c      	str	r4, [r7, #80]	; 0x50
 8004b44:	414b      	adcs	r3, r1
 8004b46:	657b      	str	r3, [r7, #84]	; 0x54
 8004b48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	f04f 0300 	mov.w	r3, #0
 8004b52:	1891      	adds	r1, r2, r2
 8004b54:	61b9      	str	r1, [r7, #24]
 8004b56:	415b      	adcs	r3, r3
 8004b58:	61fb      	str	r3, [r7, #28]
 8004b5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b5e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004b62:	f7fb fb85 	bl	8000270 <__aeabi_uldivmod>
 8004b66:	4602      	mov	r2, r0
 8004b68:	460b      	mov	r3, r1
 8004b6a:	4b6c      	ldr	r3, [pc, #432]	; (8004d1c <UART_SetConfig+0x38c>)
 8004b6c:	fba3 1302 	umull	r1, r3, r3, r2
 8004b70:	095b      	lsrs	r3, r3, #5
 8004b72:	2164      	movs	r1, #100	; 0x64
 8004b74:	fb01 f303 	mul.w	r3, r1, r3
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	00db      	lsls	r3, r3, #3
 8004b7c:	3332      	adds	r3, #50	; 0x32
 8004b7e:	4a67      	ldr	r2, [pc, #412]	; (8004d1c <UART_SetConfig+0x38c>)
 8004b80:	fba2 2303 	umull	r2, r3, r2, r3
 8004b84:	095b      	lsrs	r3, r3, #5
 8004b86:	f003 0207 	and.w	r2, r3, #7
 8004b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4432      	add	r2, r6
 8004b90:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b92:	e0b9      	b.n	8004d08 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b96:	461c      	mov	r4, r3
 8004b98:	f04f 0500 	mov.w	r5, #0
 8004b9c:	4622      	mov	r2, r4
 8004b9e:	462b      	mov	r3, r5
 8004ba0:	1891      	adds	r1, r2, r2
 8004ba2:	6139      	str	r1, [r7, #16]
 8004ba4:	415b      	adcs	r3, r3
 8004ba6:	617b      	str	r3, [r7, #20]
 8004ba8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004bac:	1912      	adds	r2, r2, r4
 8004bae:	eb45 0303 	adc.w	r3, r5, r3
 8004bb2:	f04f 0000 	mov.w	r0, #0
 8004bb6:	f04f 0100 	mov.w	r1, #0
 8004bba:	00d9      	lsls	r1, r3, #3
 8004bbc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004bc0:	00d0      	lsls	r0, r2, #3
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	eb12 0804 	adds.w	r8, r2, r4
 8004bca:	eb43 0905 	adc.w	r9, r3, r5
 8004bce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f04f 0100 	mov.w	r1, #0
 8004bd8:	f04f 0200 	mov.w	r2, #0
 8004bdc:	f04f 0300 	mov.w	r3, #0
 8004be0:	008b      	lsls	r3, r1, #2
 8004be2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004be6:	0082      	lsls	r2, r0, #2
 8004be8:	4640      	mov	r0, r8
 8004bea:	4649      	mov	r1, r9
 8004bec:	f7fb fb40 	bl	8000270 <__aeabi_uldivmod>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	4b49      	ldr	r3, [pc, #292]	; (8004d1c <UART_SetConfig+0x38c>)
 8004bf6:	fba3 2302 	umull	r2, r3, r3, r2
 8004bfa:	095b      	lsrs	r3, r3, #5
 8004bfc:	011e      	lsls	r6, r3, #4
 8004bfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c00:	4618      	mov	r0, r3
 8004c02:	f04f 0100 	mov.w	r1, #0
 8004c06:	4602      	mov	r2, r0
 8004c08:	460b      	mov	r3, r1
 8004c0a:	1894      	adds	r4, r2, r2
 8004c0c:	60bc      	str	r4, [r7, #8]
 8004c0e:	415b      	adcs	r3, r3
 8004c10:	60fb      	str	r3, [r7, #12]
 8004c12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c16:	1812      	adds	r2, r2, r0
 8004c18:	eb41 0303 	adc.w	r3, r1, r3
 8004c1c:	f04f 0400 	mov.w	r4, #0
 8004c20:	f04f 0500 	mov.w	r5, #0
 8004c24:	00dd      	lsls	r5, r3, #3
 8004c26:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004c2a:	00d4      	lsls	r4, r2, #3
 8004c2c:	4622      	mov	r2, r4
 8004c2e:	462b      	mov	r3, r5
 8004c30:	1814      	adds	r4, r2, r0
 8004c32:	64bc      	str	r4, [r7, #72]	; 0x48
 8004c34:	414b      	adcs	r3, r1
 8004c36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f04f 0100 	mov.w	r1, #0
 8004c42:	f04f 0200 	mov.w	r2, #0
 8004c46:	f04f 0300 	mov.w	r3, #0
 8004c4a:	008b      	lsls	r3, r1, #2
 8004c4c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004c50:	0082      	lsls	r2, r0, #2
 8004c52:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004c56:	f7fb fb0b 	bl	8000270 <__aeabi_uldivmod>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	4b2f      	ldr	r3, [pc, #188]	; (8004d1c <UART_SetConfig+0x38c>)
 8004c60:	fba3 1302 	umull	r1, r3, r3, r2
 8004c64:	095b      	lsrs	r3, r3, #5
 8004c66:	2164      	movs	r1, #100	; 0x64
 8004c68:	fb01 f303 	mul.w	r3, r1, r3
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	011b      	lsls	r3, r3, #4
 8004c70:	3332      	adds	r3, #50	; 0x32
 8004c72:	4a2a      	ldr	r2, [pc, #168]	; (8004d1c <UART_SetConfig+0x38c>)
 8004c74:	fba2 2303 	umull	r2, r3, r2, r3
 8004c78:	095b      	lsrs	r3, r3, #5
 8004c7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c7e:	441e      	add	r6, r3
 8004c80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c82:	4618      	mov	r0, r3
 8004c84:	f04f 0100 	mov.w	r1, #0
 8004c88:	4602      	mov	r2, r0
 8004c8a:	460b      	mov	r3, r1
 8004c8c:	1894      	adds	r4, r2, r2
 8004c8e:	603c      	str	r4, [r7, #0]
 8004c90:	415b      	adcs	r3, r3
 8004c92:	607b      	str	r3, [r7, #4]
 8004c94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c98:	1812      	adds	r2, r2, r0
 8004c9a:	eb41 0303 	adc.w	r3, r1, r3
 8004c9e:	f04f 0400 	mov.w	r4, #0
 8004ca2:	f04f 0500 	mov.w	r5, #0
 8004ca6:	00dd      	lsls	r5, r3, #3
 8004ca8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004cac:	00d4      	lsls	r4, r2, #3
 8004cae:	4622      	mov	r2, r4
 8004cb0:	462b      	mov	r3, r5
 8004cb2:	eb12 0a00 	adds.w	sl, r2, r0
 8004cb6:	eb43 0b01 	adc.w	fp, r3, r1
 8004cba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f04f 0100 	mov.w	r1, #0
 8004cc4:	f04f 0200 	mov.w	r2, #0
 8004cc8:	f04f 0300 	mov.w	r3, #0
 8004ccc:	008b      	lsls	r3, r1, #2
 8004cce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004cd2:	0082      	lsls	r2, r0, #2
 8004cd4:	4650      	mov	r0, sl
 8004cd6:	4659      	mov	r1, fp
 8004cd8:	f7fb faca 	bl	8000270 <__aeabi_uldivmod>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	460b      	mov	r3, r1
 8004ce0:	4b0e      	ldr	r3, [pc, #56]	; (8004d1c <UART_SetConfig+0x38c>)
 8004ce2:	fba3 1302 	umull	r1, r3, r3, r2
 8004ce6:	095b      	lsrs	r3, r3, #5
 8004ce8:	2164      	movs	r1, #100	; 0x64
 8004cea:	fb01 f303 	mul.w	r3, r1, r3
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	011b      	lsls	r3, r3, #4
 8004cf2:	3332      	adds	r3, #50	; 0x32
 8004cf4:	4a09      	ldr	r2, [pc, #36]	; (8004d1c <UART_SetConfig+0x38c>)
 8004cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cfa:	095b      	lsrs	r3, r3, #5
 8004cfc:	f003 020f 	and.w	r2, r3, #15
 8004d00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4432      	add	r2, r6
 8004d06:	609a      	str	r2, [r3, #8]
}
 8004d08:	bf00      	nop
 8004d0a:	377c      	adds	r7, #124	; 0x7c
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d12:	bf00      	nop
 8004d14:	40011000 	.word	0x40011000
 8004d18:	40011400 	.word	0x40011400
 8004d1c:	51eb851f 	.word	0x51eb851f

08004d20 <__NVIC_SetPriority>:
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	4603      	mov	r3, r0
 8004d28:	6039      	str	r1, [r7, #0]
 8004d2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	db0a      	blt.n	8004d4a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	b2da      	uxtb	r2, r3
 8004d38:	490c      	ldr	r1, [pc, #48]	; (8004d6c <__NVIC_SetPriority+0x4c>)
 8004d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d3e:	0112      	lsls	r2, r2, #4
 8004d40:	b2d2      	uxtb	r2, r2
 8004d42:	440b      	add	r3, r1
 8004d44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004d48:	e00a      	b.n	8004d60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	b2da      	uxtb	r2, r3
 8004d4e:	4908      	ldr	r1, [pc, #32]	; (8004d70 <__NVIC_SetPriority+0x50>)
 8004d50:	79fb      	ldrb	r3, [r7, #7]
 8004d52:	f003 030f 	and.w	r3, r3, #15
 8004d56:	3b04      	subs	r3, #4
 8004d58:	0112      	lsls	r2, r2, #4
 8004d5a:	b2d2      	uxtb	r2, r2
 8004d5c:	440b      	add	r3, r1
 8004d5e:	761a      	strb	r2, [r3, #24]
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr
 8004d6c:	e000e100 	.word	0xe000e100
 8004d70:	e000ed00 	.word	0xe000ed00

08004d74 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004d74:	b580      	push	{r7, lr}
 8004d76:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004d78:	4b05      	ldr	r3, [pc, #20]	; (8004d90 <SysTick_Handler+0x1c>)
 8004d7a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004d7c:	f001 fee8 	bl	8006b50 <xTaskGetSchedulerState>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d001      	beq.n	8004d8a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004d86:	f002 fccf 	bl	8007728 <xPortSysTickHandler>
  }
}
 8004d8a:	bf00      	nop
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	e000e010 	.word	0xe000e010

08004d94 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004d94:	b580      	push	{r7, lr}
 8004d96:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004d98:	2100      	movs	r1, #0
 8004d9a:	f06f 0004 	mvn.w	r0, #4
 8004d9e:	f7ff ffbf 	bl	8004d20 <__NVIC_SetPriority>
#endif
}
 8004da2:	bf00      	nop
 8004da4:	bd80      	pop	{r7, pc}
	...

08004da8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004dae:	f3ef 8305 	mrs	r3, IPSR
 8004db2:	603b      	str	r3, [r7, #0]
  return(result);
 8004db4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d003      	beq.n	8004dc2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004dba:	f06f 0305 	mvn.w	r3, #5
 8004dbe:	607b      	str	r3, [r7, #4]
 8004dc0:	e00c      	b.n	8004ddc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004dc2:	4b0a      	ldr	r3, [pc, #40]	; (8004dec <osKernelInitialize+0x44>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d105      	bne.n	8004dd6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004dca:	4b08      	ldr	r3, [pc, #32]	; (8004dec <osKernelInitialize+0x44>)
 8004dcc:	2201      	movs	r2, #1
 8004dce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	607b      	str	r3, [r7, #4]
 8004dd4:	e002      	b.n	8004ddc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004dd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004dda:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004ddc:	687b      	ldr	r3, [r7, #4]
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	370c      	adds	r7, #12
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	200000b4 	.word	0x200000b4

08004df0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004df6:	f3ef 8305 	mrs	r3, IPSR
 8004dfa:	603b      	str	r3, [r7, #0]
  return(result);
 8004dfc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d003      	beq.n	8004e0a <osKernelStart+0x1a>
    stat = osErrorISR;
 8004e02:	f06f 0305 	mvn.w	r3, #5
 8004e06:	607b      	str	r3, [r7, #4]
 8004e08:	e010      	b.n	8004e2c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004e0a:	4b0b      	ldr	r3, [pc, #44]	; (8004e38 <osKernelStart+0x48>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d109      	bne.n	8004e26 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004e12:	f7ff ffbf 	bl	8004d94 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004e16:	4b08      	ldr	r3, [pc, #32]	; (8004e38 <osKernelStart+0x48>)
 8004e18:	2202      	movs	r2, #2
 8004e1a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004e1c:	f001 fa50 	bl	80062c0 <vTaskStartScheduler>
      stat = osOK;
 8004e20:	2300      	movs	r3, #0
 8004e22:	607b      	str	r3, [r7, #4]
 8004e24:	e002      	b.n	8004e2c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004e26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e2a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004e2c:	687b      	ldr	r3, [r7, #4]
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3708      	adds	r7, #8
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	200000b4 	.word	0x200000b4

08004e3c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b08e      	sub	sp, #56	; 0x38
 8004e40:	af04      	add	r7, sp, #16
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e4c:	f3ef 8305 	mrs	r3, IPSR
 8004e50:	617b      	str	r3, [r7, #20]
  return(result);
 8004e52:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d17e      	bne.n	8004f56 <osThreadNew+0x11a>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d07b      	beq.n	8004f56 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004e5e:	2380      	movs	r3, #128	; 0x80
 8004e60:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004e62:	2318      	movs	r3, #24
 8004e64:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004e66:	2300      	movs	r3, #0
 8004e68:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004e6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e6e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d045      	beq.n	8004f02 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d002      	beq.n	8004e84 <osThreadNew+0x48>
        name = attr->name;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d002      	beq.n	8004e92 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	699b      	ldr	r3, [r3, #24]
 8004e90:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d008      	beq.n	8004eaa <osThreadNew+0x6e>
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	2b38      	cmp	r3, #56	; 0x38
 8004e9c:	d805      	bhi.n	8004eaa <osThreadNew+0x6e>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	f003 0301 	and.w	r3, r3, #1
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d001      	beq.n	8004eae <osThreadNew+0x72>
        return (NULL);
 8004eaa:	2300      	movs	r3, #0
 8004eac:	e054      	b.n	8004f58 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d003      	beq.n	8004ebe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	695b      	ldr	r3, [r3, #20]
 8004eba:	089b      	lsrs	r3, r3, #2
 8004ebc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00e      	beq.n	8004ee4 <osThreadNew+0xa8>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	2b5b      	cmp	r3, #91	; 0x5b
 8004ecc:	d90a      	bls.n	8004ee4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d006      	beq.n	8004ee4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d002      	beq.n	8004ee4 <osThreadNew+0xa8>
        mem = 1;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	61bb      	str	r3, [r7, #24]
 8004ee2:	e010      	b.n	8004f06 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d10c      	bne.n	8004f06 <osThreadNew+0xca>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d108      	bne.n	8004f06 <osThreadNew+0xca>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d104      	bne.n	8004f06 <osThreadNew+0xca>
          mem = 0;
 8004efc:	2300      	movs	r3, #0
 8004efe:	61bb      	str	r3, [r7, #24]
 8004f00:	e001      	b.n	8004f06 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004f02:	2300      	movs	r3, #0
 8004f04:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d110      	bne.n	8004f2e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004f14:	9202      	str	r2, [sp, #8]
 8004f16:	9301      	str	r3, [sp, #4]
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	9300      	str	r3, [sp, #0]
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	6a3a      	ldr	r2, [r7, #32]
 8004f20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f000 fff6 	bl	8005f14 <xTaskCreateStatic>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	613b      	str	r3, [r7, #16]
 8004f2c:	e013      	b.n	8004f56 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d110      	bne.n	8004f56 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004f34:	6a3b      	ldr	r3, [r7, #32]
 8004f36:	b29a      	uxth	r2, r3
 8004f38:	f107 0310 	add.w	r3, r7, #16
 8004f3c:	9301      	str	r3, [sp, #4]
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	9300      	str	r3, [sp, #0]
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f46:	68f8      	ldr	r0, [r7, #12]
 8004f48:	f001 f841 	bl	8005fce <xTaskCreate>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d001      	beq.n	8004f56 <osThreadNew+0x11a>
            hTask = NULL;
 8004f52:	2300      	movs	r3, #0
 8004f54:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004f56:	693b      	ldr	r3, [r7, #16]
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3728      	adds	r7, #40	; 0x28
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f68:	f3ef 8305 	mrs	r3, IPSR
 8004f6c:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f6e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d003      	beq.n	8004f7c <osDelay+0x1c>
    stat = osErrorISR;
 8004f74:	f06f 0305 	mvn.w	r3, #5
 8004f78:	60fb      	str	r3, [r7, #12]
 8004f7a:	e007      	b.n	8004f8c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d002      	beq.n	8004f8c <osDelay+0x2c>
      vTaskDelay(ticks);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f001 f966 	bl	8006258 <vTaskDelay>
    }
  }

  return (stat);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}

08004f96 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004f96:	b580      	push	{r7, lr}
 8004f98:	b08a      	sub	sp, #40	; 0x28
 8004f9a:	af02      	add	r7, sp, #8
 8004f9c:	60f8      	str	r0, [r7, #12]
 8004f9e:	60b9      	str	r1, [r7, #8]
 8004fa0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fa6:	f3ef 8305 	mrs	r3, IPSR
 8004faa:	613b      	str	r3, [r7, #16]
  return(result);
 8004fac:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d15f      	bne.n	8005072 <osMessageQueueNew+0xdc>
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d05c      	beq.n	8005072 <osMessageQueueNew+0xdc>
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d059      	beq.n	8005072 <osMessageQueueNew+0xdc>
    mem = -1;
 8004fbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004fc2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d029      	beq.n	800501e <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d012      	beq.n	8004ff8 <osMessageQueueNew+0x62>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	2b4f      	cmp	r3, #79	; 0x4f
 8004fd8:	d90e      	bls.n	8004ff8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00a      	beq.n	8004ff8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	695a      	ldr	r2, [r3, #20]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	68b9      	ldr	r1, [r7, #8]
 8004fea:	fb01 f303 	mul.w	r3, r1, r3
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d302      	bcc.n	8004ff8 <osMessageQueueNew+0x62>
        mem = 1;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	61bb      	str	r3, [r7, #24]
 8004ff6:	e014      	b.n	8005022 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d110      	bne.n	8005022 <osMessageQueueNew+0x8c>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d10c      	bne.n	8005022 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800500c:	2b00      	cmp	r3, #0
 800500e:	d108      	bne.n	8005022 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	695b      	ldr	r3, [r3, #20]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d104      	bne.n	8005022 <osMessageQueueNew+0x8c>
          mem = 0;
 8005018:	2300      	movs	r3, #0
 800501a:	61bb      	str	r3, [r7, #24]
 800501c:	e001      	b.n	8005022 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800501e:	2300      	movs	r3, #0
 8005020:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d10b      	bne.n	8005040 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	691a      	ldr	r2, [r3, #16]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	2100      	movs	r1, #0
 8005032:	9100      	str	r1, [sp, #0]
 8005034:	68b9      	ldr	r1, [r7, #8]
 8005036:	68f8      	ldr	r0, [r7, #12]
 8005038:	f000 fa2e 	bl	8005498 <xQueueGenericCreateStatic>
 800503c:	61f8      	str	r0, [r7, #28]
 800503e:	e008      	b.n	8005052 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d105      	bne.n	8005052 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005046:	2200      	movs	r2, #0
 8005048:	68b9      	ldr	r1, [r7, #8]
 800504a:	68f8      	ldr	r0, [r7, #12]
 800504c:	f000 fa9c 	bl	8005588 <xQueueGenericCreate>
 8005050:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00c      	beq.n	8005072 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d003      	beq.n	8005066 <osMessageQueueNew+0xd0>
        name = attr->name;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	617b      	str	r3, [r7, #20]
 8005064:	e001      	b.n	800506a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005066:	2300      	movs	r3, #0
 8005068:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800506a:	6979      	ldr	r1, [r7, #20]
 800506c:	69f8      	ldr	r0, [r7, #28]
 800506e:	f000 fef3 	bl	8005e58 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005072:	69fb      	ldr	r3, [r7, #28]
}
 8005074:	4618      	mov	r0, r3
 8005076:	3720      	adds	r7, #32
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800507c:	b580      	push	{r7, lr}
 800507e:	b088      	sub	sp, #32
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	603b      	str	r3, [r7, #0]
 8005088:	4613      	mov	r3, r2
 800508a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005090:	2300      	movs	r3, #0
 8005092:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005094:	f3ef 8305 	mrs	r3, IPSR
 8005098:	617b      	str	r3, [r7, #20]
  return(result);
 800509a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800509c:	2b00      	cmp	r3, #0
 800509e:	d028      	beq.n	80050f2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d005      	beq.n	80050b2 <osMessageQueuePut+0x36>
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d002      	beq.n	80050b2 <osMessageQueuePut+0x36>
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d003      	beq.n	80050ba <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80050b2:	f06f 0303 	mvn.w	r3, #3
 80050b6:	61fb      	str	r3, [r7, #28]
 80050b8:	e038      	b.n	800512c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80050ba:	2300      	movs	r3, #0
 80050bc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80050be:	f107 0210 	add.w	r2, r7, #16
 80050c2:	2300      	movs	r3, #0
 80050c4:	68b9      	ldr	r1, [r7, #8]
 80050c6:	69b8      	ldr	r0, [r7, #24]
 80050c8:	f000 fbba 	bl	8005840 <xQueueGenericSendFromISR>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d003      	beq.n	80050da <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80050d2:	f06f 0302 	mvn.w	r3, #2
 80050d6:	61fb      	str	r3, [r7, #28]
 80050d8:	e028      	b.n	800512c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d025      	beq.n	800512c <osMessageQueuePut+0xb0>
 80050e0:	4b15      	ldr	r3, [pc, #84]	; (8005138 <osMessageQueuePut+0xbc>)
 80050e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050e6:	601a      	str	r2, [r3, #0]
 80050e8:	f3bf 8f4f 	dsb	sy
 80050ec:	f3bf 8f6f 	isb	sy
 80050f0:	e01c      	b.n	800512c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d002      	beq.n	80050fe <osMessageQueuePut+0x82>
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d103      	bne.n	8005106 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80050fe:	f06f 0303 	mvn.w	r3, #3
 8005102:	61fb      	str	r3, [r7, #28]
 8005104:	e012      	b.n	800512c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005106:	2300      	movs	r3, #0
 8005108:	683a      	ldr	r2, [r7, #0]
 800510a:	68b9      	ldr	r1, [r7, #8]
 800510c:	69b8      	ldr	r0, [r7, #24]
 800510e:	f000 fa99 	bl	8005644 <xQueueGenericSend>
 8005112:	4603      	mov	r3, r0
 8005114:	2b01      	cmp	r3, #1
 8005116:	d009      	beq.n	800512c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d003      	beq.n	8005126 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800511e:	f06f 0301 	mvn.w	r3, #1
 8005122:	61fb      	str	r3, [r7, #28]
 8005124:	e002      	b.n	800512c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005126:	f06f 0302 	mvn.w	r3, #2
 800512a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800512c:	69fb      	ldr	r3, [r7, #28]
}
 800512e:	4618      	mov	r0, r3
 8005130:	3720      	adds	r7, #32
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	e000ed04 	.word	0xe000ed04

0800513c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800513c:	b580      	push	{r7, lr}
 800513e:	b088      	sub	sp, #32
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	607a      	str	r2, [r7, #4]
 8005148:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800514e:	2300      	movs	r3, #0
 8005150:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005152:	f3ef 8305 	mrs	r3, IPSR
 8005156:	617b      	str	r3, [r7, #20]
  return(result);
 8005158:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800515a:	2b00      	cmp	r3, #0
 800515c:	d028      	beq.n	80051b0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d005      	beq.n	8005170 <osMessageQueueGet+0x34>
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d002      	beq.n	8005170 <osMessageQueueGet+0x34>
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d003      	beq.n	8005178 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005170:	f06f 0303 	mvn.w	r3, #3
 8005174:	61fb      	str	r3, [r7, #28]
 8005176:	e037      	b.n	80051e8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005178:	2300      	movs	r3, #0
 800517a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800517c:	f107 0310 	add.w	r3, r7, #16
 8005180:	461a      	mov	r2, r3
 8005182:	68b9      	ldr	r1, [r7, #8]
 8005184:	69b8      	ldr	r0, [r7, #24]
 8005186:	f000 fcd7 	bl	8005b38 <xQueueReceiveFromISR>
 800518a:	4603      	mov	r3, r0
 800518c:	2b01      	cmp	r3, #1
 800518e:	d003      	beq.n	8005198 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005190:	f06f 0302 	mvn.w	r3, #2
 8005194:	61fb      	str	r3, [r7, #28]
 8005196:	e027      	b.n	80051e8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d024      	beq.n	80051e8 <osMessageQueueGet+0xac>
 800519e:	4b15      	ldr	r3, [pc, #84]	; (80051f4 <osMessageQueueGet+0xb8>)
 80051a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051a4:	601a      	str	r2, [r3, #0]
 80051a6:	f3bf 8f4f 	dsb	sy
 80051aa:	f3bf 8f6f 	isb	sy
 80051ae:	e01b      	b.n	80051e8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d002      	beq.n	80051bc <osMessageQueueGet+0x80>
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d103      	bne.n	80051c4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80051bc:	f06f 0303 	mvn.w	r3, #3
 80051c0:	61fb      	str	r3, [r7, #28]
 80051c2:	e011      	b.n	80051e8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80051c4:	683a      	ldr	r2, [r7, #0]
 80051c6:	68b9      	ldr	r1, [r7, #8]
 80051c8:	69b8      	ldr	r0, [r7, #24]
 80051ca:	f000 fbd5 	bl	8005978 <xQueueReceive>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d009      	beq.n	80051e8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d003      	beq.n	80051e2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80051da:	f06f 0301 	mvn.w	r3, #1
 80051de:	61fb      	str	r3, [r7, #28]
 80051e0:	e002      	b.n	80051e8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80051e2:	f06f 0302 	mvn.w	r3, #2
 80051e6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80051e8:	69fb      	ldr	r3, [r7, #28]
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3720      	adds	r7, #32
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	e000ed04 	.word	0xe000ed04

080051f8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	4a07      	ldr	r2, [pc, #28]	; (8005224 <vApplicationGetIdleTaskMemory+0x2c>)
 8005208:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	4a06      	ldr	r2, [pc, #24]	; (8005228 <vApplicationGetIdleTaskMemory+0x30>)
 800520e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2280      	movs	r2, #128	; 0x80
 8005214:	601a      	str	r2, [r3, #0]
}
 8005216:	bf00      	nop
 8005218:	3714      	adds	r7, #20
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	200000b8 	.word	0x200000b8
 8005228:	20000114 	.word	0x20000114

0800522c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800522c:	b480      	push	{r7}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	4a07      	ldr	r2, [pc, #28]	; (8005258 <vApplicationGetTimerTaskMemory+0x2c>)
 800523c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	4a06      	ldr	r2, [pc, #24]	; (800525c <vApplicationGetTimerTaskMemory+0x30>)
 8005242:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f44f 7280 	mov.w	r2, #256	; 0x100
 800524a:	601a      	str	r2, [r3, #0]
}
 800524c:	bf00      	nop
 800524e:	3714      	adds	r7, #20
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr
 8005258:	20000314 	.word	0x20000314
 800525c:	20000370 	.word	0x20000370

08005260 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f103 0208 	add.w	r2, r3, #8
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005278:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f103 0208 	add.w	r2, r3, #8
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f103 0208 	add.w	r2, r3, #8
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005294:	bf00      	nop
 8005296:	370c      	adds	r7, #12
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80052ae:	bf00      	nop
 80052b0:	370c      	adds	r7, #12
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr

080052ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80052ba:	b480      	push	{r7}
 80052bc:	b085      	sub	sp, #20
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
 80052c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	689a      	ldr	r2, [r3, #8]
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	683a      	ldr	r2, [r7, #0]
 80052de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	683a      	ldr	r2, [r7, #0]
 80052e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	1c5a      	adds	r2, r3, #1
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	601a      	str	r2, [r3, #0]
}
 80052f6:	bf00      	nop
 80052f8:	3714      	adds	r7, #20
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr

08005302 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005302:	b480      	push	{r7}
 8005304:	b085      	sub	sp, #20
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
 800530a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005318:	d103      	bne.n	8005322 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	60fb      	str	r3, [r7, #12]
 8005320:	e00c      	b.n	800533c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	3308      	adds	r3, #8
 8005326:	60fb      	str	r3, [r7, #12]
 8005328:	e002      	b.n	8005330 <vListInsert+0x2e>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	60fb      	str	r3, [r7, #12]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68ba      	ldr	r2, [r7, #8]
 8005338:	429a      	cmp	r2, r3
 800533a:	d2f6      	bcs.n	800532a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	685a      	ldr	r2, [r3, #4]
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	683a      	ldr	r2, [r7, #0]
 800534a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	683a      	ldr	r2, [r7, #0]
 8005356:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	1c5a      	adds	r2, r3, #1
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	601a      	str	r2, [r3, #0]
}
 8005368:	bf00      	nop
 800536a:	3714      	adds	r7, #20
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005374:	b480      	push	{r7}
 8005376:	b085      	sub	sp, #20
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	6892      	ldr	r2, [r2, #8]
 800538a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	6852      	ldr	r2, [r2, #4]
 8005394:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	429a      	cmp	r2, r3
 800539e:	d103      	bne.n	80053a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	689a      	ldr	r2, [r3, #8]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	1e5a      	subs	r2, r3, #1
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3714      	adds	r7, #20
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d10a      	bne.n	80053f2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80053dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e0:	f383 8811 	msr	BASEPRI, r3
 80053e4:	f3bf 8f6f 	isb	sy
 80053e8:	f3bf 8f4f 	dsb	sy
 80053ec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80053ee:	bf00      	nop
 80053f0:	e7fe      	b.n	80053f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80053f2:	f002 f907 	bl	8007604 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053fe:	68f9      	ldr	r1, [r7, #12]
 8005400:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005402:	fb01 f303 	mul.w	r3, r1, r3
 8005406:	441a      	add	r2, r3
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2200      	movs	r2, #0
 8005410:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005422:	3b01      	subs	r3, #1
 8005424:	68f9      	ldr	r1, [r7, #12]
 8005426:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005428:	fb01 f303 	mul.w	r3, r1, r3
 800542c:	441a      	add	r2, r3
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	22ff      	movs	r2, #255	; 0xff
 8005436:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	22ff      	movs	r2, #255	; 0xff
 800543e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d114      	bne.n	8005472 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d01a      	beq.n	8005486 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	3310      	adds	r3, #16
 8005454:	4618      	mov	r0, r3
 8005456:	f001 f9bd 	bl	80067d4 <xTaskRemoveFromEventList>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d012      	beq.n	8005486 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005460:	4b0c      	ldr	r3, [pc, #48]	; (8005494 <xQueueGenericReset+0xcc>)
 8005462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005466:	601a      	str	r2, [r3, #0]
 8005468:	f3bf 8f4f 	dsb	sy
 800546c:	f3bf 8f6f 	isb	sy
 8005470:	e009      	b.n	8005486 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	3310      	adds	r3, #16
 8005476:	4618      	mov	r0, r3
 8005478:	f7ff fef2 	bl	8005260 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	3324      	adds	r3, #36	; 0x24
 8005480:	4618      	mov	r0, r3
 8005482:	f7ff feed 	bl	8005260 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005486:	f002 f8ed 	bl	8007664 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800548a:	2301      	movs	r3, #1
}
 800548c:	4618      	mov	r0, r3
 800548e:	3710      	adds	r7, #16
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}
 8005494:	e000ed04 	.word	0xe000ed04

08005498 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005498:	b580      	push	{r7, lr}
 800549a:	b08e      	sub	sp, #56	; 0x38
 800549c:	af02      	add	r7, sp, #8
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	607a      	str	r2, [r7, #4]
 80054a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d10a      	bne.n	80054c2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80054ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b0:	f383 8811 	msr	BASEPRI, r3
 80054b4:	f3bf 8f6f 	isb	sy
 80054b8:	f3bf 8f4f 	dsb	sy
 80054bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80054be:	bf00      	nop
 80054c0:	e7fe      	b.n	80054c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d10a      	bne.n	80054de <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80054c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054cc:	f383 8811 	msr	BASEPRI, r3
 80054d0:	f3bf 8f6f 	isb	sy
 80054d4:	f3bf 8f4f 	dsb	sy
 80054d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80054da:	bf00      	nop
 80054dc:	e7fe      	b.n	80054dc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d002      	beq.n	80054ea <xQueueGenericCreateStatic+0x52>
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d001      	beq.n	80054ee <xQueueGenericCreateStatic+0x56>
 80054ea:	2301      	movs	r3, #1
 80054ec:	e000      	b.n	80054f0 <xQueueGenericCreateStatic+0x58>
 80054ee:	2300      	movs	r3, #0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d10a      	bne.n	800550a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80054f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f8:	f383 8811 	msr	BASEPRI, r3
 80054fc:	f3bf 8f6f 	isb	sy
 8005500:	f3bf 8f4f 	dsb	sy
 8005504:	623b      	str	r3, [r7, #32]
}
 8005506:	bf00      	nop
 8005508:	e7fe      	b.n	8005508 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d102      	bne.n	8005516 <xQueueGenericCreateStatic+0x7e>
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d101      	bne.n	800551a <xQueueGenericCreateStatic+0x82>
 8005516:	2301      	movs	r3, #1
 8005518:	e000      	b.n	800551c <xQueueGenericCreateStatic+0x84>
 800551a:	2300      	movs	r3, #0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d10a      	bne.n	8005536 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005524:	f383 8811 	msr	BASEPRI, r3
 8005528:	f3bf 8f6f 	isb	sy
 800552c:	f3bf 8f4f 	dsb	sy
 8005530:	61fb      	str	r3, [r7, #28]
}
 8005532:	bf00      	nop
 8005534:	e7fe      	b.n	8005534 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005536:	2350      	movs	r3, #80	; 0x50
 8005538:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	2b50      	cmp	r3, #80	; 0x50
 800553e:	d00a      	beq.n	8005556 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005544:	f383 8811 	msr	BASEPRI, r3
 8005548:	f3bf 8f6f 	isb	sy
 800554c:	f3bf 8f4f 	dsb	sy
 8005550:	61bb      	str	r3, [r7, #24]
}
 8005552:	bf00      	nop
 8005554:	e7fe      	b.n	8005554 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005556:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800555c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00d      	beq.n	800557e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005564:	2201      	movs	r2, #1
 8005566:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800556a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800556e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005570:	9300      	str	r3, [sp, #0]
 8005572:	4613      	mov	r3, r2
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	68b9      	ldr	r1, [r7, #8]
 8005578:	68f8      	ldr	r0, [r7, #12]
 800557a:	f000 f83f 	bl	80055fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800557e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005580:	4618      	mov	r0, r3
 8005582:	3730      	adds	r7, #48	; 0x30
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005588:	b580      	push	{r7, lr}
 800558a:	b08a      	sub	sp, #40	; 0x28
 800558c:	af02      	add	r7, sp, #8
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	4613      	mov	r3, r2
 8005594:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d10a      	bne.n	80055b2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800559c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a0:	f383 8811 	msr	BASEPRI, r3
 80055a4:	f3bf 8f6f 	isb	sy
 80055a8:	f3bf 8f4f 	dsb	sy
 80055ac:	613b      	str	r3, [r7, #16]
}
 80055ae:	bf00      	nop
 80055b0:	e7fe      	b.n	80055b0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	68ba      	ldr	r2, [r7, #8]
 80055b6:	fb02 f303 	mul.w	r3, r2, r3
 80055ba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	3350      	adds	r3, #80	; 0x50
 80055c0:	4618      	mov	r0, r3
 80055c2:	f002 f941 	bl	8007848 <pvPortMalloc>
 80055c6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d011      	beq.n	80055f2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80055ce:	69bb      	ldr	r3, [r7, #24]
 80055d0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	3350      	adds	r3, #80	; 0x50
 80055d6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80055e0:	79fa      	ldrb	r2, [r7, #7]
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	9300      	str	r3, [sp, #0]
 80055e6:	4613      	mov	r3, r2
 80055e8:	697a      	ldr	r2, [r7, #20]
 80055ea:	68b9      	ldr	r1, [r7, #8]
 80055ec:	68f8      	ldr	r0, [r7, #12]
 80055ee:	f000 f805 	bl	80055fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80055f2:	69bb      	ldr	r3, [r7, #24]
	}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3720      	adds	r7, #32
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	607a      	str	r2, [r7, #4]
 8005608:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d103      	bne.n	8005618 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	69ba      	ldr	r2, [r7, #24]
 8005614:	601a      	str	r2, [r3, #0]
 8005616:	e002      	b.n	800561e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800561e:	69bb      	ldr	r3, [r7, #24]
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	68ba      	ldr	r2, [r7, #8]
 8005628:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800562a:	2101      	movs	r1, #1
 800562c:	69b8      	ldr	r0, [r7, #24]
 800562e:	f7ff fecb 	bl	80053c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	78fa      	ldrb	r2, [r7, #3]
 8005636:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800563a:	bf00      	nop
 800563c:	3710      	adds	r7, #16
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
	...

08005644 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b08e      	sub	sp, #56	; 0x38
 8005648:	af00      	add	r7, sp, #0
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	607a      	str	r2, [r7, #4]
 8005650:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005652:	2300      	movs	r3, #0
 8005654:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800565a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800565c:	2b00      	cmp	r3, #0
 800565e:	d10a      	bne.n	8005676 <xQueueGenericSend+0x32>
	__asm volatile
 8005660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005664:	f383 8811 	msr	BASEPRI, r3
 8005668:	f3bf 8f6f 	isb	sy
 800566c:	f3bf 8f4f 	dsb	sy
 8005670:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005672:	bf00      	nop
 8005674:	e7fe      	b.n	8005674 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d103      	bne.n	8005684 <xQueueGenericSend+0x40>
 800567c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800567e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005680:	2b00      	cmp	r3, #0
 8005682:	d101      	bne.n	8005688 <xQueueGenericSend+0x44>
 8005684:	2301      	movs	r3, #1
 8005686:	e000      	b.n	800568a <xQueueGenericSend+0x46>
 8005688:	2300      	movs	r3, #0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d10a      	bne.n	80056a4 <xQueueGenericSend+0x60>
	__asm volatile
 800568e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005692:	f383 8811 	msr	BASEPRI, r3
 8005696:	f3bf 8f6f 	isb	sy
 800569a:	f3bf 8f4f 	dsb	sy
 800569e:	627b      	str	r3, [r7, #36]	; 0x24
}
 80056a0:	bf00      	nop
 80056a2:	e7fe      	b.n	80056a2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	2b02      	cmp	r3, #2
 80056a8:	d103      	bne.n	80056b2 <xQueueGenericSend+0x6e>
 80056aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d101      	bne.n	80056b6 <xQueueGenericSend+0x72>
 80056b2:	2301      	movs	r3, #1
 80056b4:	e000      	b.n	80056b8 <xQueueGenericSend+0x74>
 80056b6:	2300      	movs	r3, #0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d10a      	bne.n	80056d2 <xQueueGenericSend+0x8e>
	__asm volatile
 80056bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c0:	f383 8811 	msr	BASEPRI, r3
 80056c4:	f3bf 8f6f 	isb	sy
 80056c8:	f3bf 8f4f 	dsb	sy
 80056cc:	623b      	str	r3, [r7, #32]
}
 80056ce:	bf00      	nop
 80056d0:	e7fe      	b.n	80056d0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056d2:	f001 fa3d 	bl	8006b50 <xTaskGetSchedulerState>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d102      	bne.n	80056e2 <xQueueGenericSend+0x9e>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d101      	bne.n	80056e6 <xQueueGenericSend+0xa2>
 80056e2:	2301      	movs	r3, #1
 80056e4:	e000      	b.n	80056e8 <xQueueGenericSend+0xa4>
 80056e6:	2300      	movs	r3, #0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d10a      	bne.n	8005702 <xQueueGenericSend+0xbe>
	__asm volatile
 80056ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f0:	f383 8811 	msr	BASEPRI, r3
 80056f4:	f3bf 8f6f 	isb	sy
 80056f8:	f3bf 8f4f 	dsb	sy
 80056fc:	61fb      	str	r3, [r7, #28]
}
 80056fe:	bf00      	nop
 8005700:	e7fe      	b.n	8005700 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005702:	f001 ff7f 	bl	8007604 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005708:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800570a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800570c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800570e:	429a      	cmp	r2, r3
 8005710:	d302      	bcc.n	8005718 <xQueueGenericSend+0xd4>
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	2b02      	cmp	r3, #2
 8005716:	d129      	bne.n	800576c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005718:	683a      	ldr	r2, [r7, #0]
 800571a:	68b9      	ldr	r1, [r7, #8]
 800571c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800571e:	f000 fa8b 	bl	8005c38 <prvCopyDataToQueue>
 8005722:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005728:	2b00      	cmp	r3, #0
 800572a:	d010      	beq.n	800574e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800572c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572e:	3324      	adds	r3, #36	; 0x24
 8005730:	4618      	mov	r0, r3
 8005732:	f001 f84f 	bl	80067d4 <xTaskRemoveFromEventList>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d013      	beq.n	8005764 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800573c:	4b3f      	ldr	r3, [pc, #252]	; (800583c <xQueueGenericSend+0x1f8>)
 800573e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005742:	601a      	str	r2, [r3, #0]
 8005744:	f3bf 8f4f 	dsb	sy
 8005748:	f3bf 8f6f 	isb	sy
 800574c:	e00a      	b.n	8005764 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800574e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005750:	2b00      	cmp	r3, #0
 8005752:	d007      	beq.n	8005764 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005754:	4b39      	ldr	r3, [pc, #228]	; (800583c <xQueueGenericSend+0x1f8>)
 8005756:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800575a:	601a      	str	r2, [r3, #0]
 800575c:	f3bf 8f4f 	dsb	sy
 8005760:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005764:	f001 ff7e 	bl	8007664 <vPortExitCritical>
				return pdPASS;
 8005768:	2301      	movs	r3, #1
 800576a:	e063      	b.n	8005834 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d103      	bne.n	800577a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005772:	f001 ff77 	bl	8007664 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005776:	2300      	movs	r3, #0
 8005778:	e05c      	b.n	8005834 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800577a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800577c:	2b00      	cmp	r3, #0
 800577e:	d106      	bne.n	800578e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005780:	f107 0314 	add.w	r3, r7, #20
 8005784:	4618      	mov	r0, r3
 8005786:	f001 f889 	bl	800689c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800578a:	2301      	movs	r3, #1
 800578c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800578e:	f001 ff69 	bl	8007664 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005792:	f000 fdfb 	bl	800638c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005796:	f001 ff35 	bl	8007604 <vPortEnterCritical>
 800579a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057a0:	b25b      	sxtb	r3, r3
 80057a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057a6:	d103      	bne.n	80057b0 <xQueueGenericSend+0x16c>
 80057a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057b6:	b25b      	sxtb	r3, r3
 80057b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057bc:	d103      	bne.n	80057c6 <xQueueGenericSend+0x182>
 80057be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057c6:	f001 ff4d 	bl	8007664 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057ca:	1d3a      	adds	r2, r7, #4
 80057cc:	f107 0314 	add.w	r3, r7, #20
 80057d0:	4611      	mov	r1, r2
 80057d2:	4618      	mov	r0, r3
 80057d4:	f001 f878 	bl	80068c8 <xTaskCheckForTimeOut>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d124      	bne.n	8005828 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80057de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057e0:	f000 fb22 	bl	8005e28 <prvIsQueueFull>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d018      	beq.n	800581c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80057ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ec:	3310      	adds	r3, #16
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	4611      	mov	r1, r2
 80057f2:	4618      	mov	r0, r3
 80057f4:	f000 ff9e 	bl	8006734 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80057f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057fa:	f000 faad 	bl	8005d58 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80057fe:	f000 fdd3 	bl	80063a8 <xTaskResumeAll>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	f47f af7c 	bne.w	8005702 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800580a:	4b0c      	ldr	r3, [pc, #48]	; (800583c <xQueueGenericSend+0x1f8>)
 800580c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005810:	601a      	str	r2, [r3, #0]
 8005812:	f3bf 8f4f 	dsb	sy
 8005816:	f3bf 8f6f 	isb	sy
 800581a:	e772      	b.n	8005702 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800581c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800581e:	f000 fa9b 	bl	8005d58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005822:	f000 fdc1 	bl	80063a8 <xTaskResumeAll>
 8005826:	e76c      	b.n	8005702 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005828:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800582a:	f000 fa95 	bl	8005d58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800582e:	f000 fdbb 	bl	80063a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005832:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005834:	4618      	mov	r0, r3
 8005836:	3738      	adds	r7, #56	; 0x38
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}
 800583c:	e000ed04 	.word	0xe000ed04

08005840 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b090      	sub	sp, #64	; 0x40
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]
 800584c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005854:	2b00      	cmp	r3, #0
 8005856:	d10a      	bne.n	800586e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800585c:	f383 8811 	msr	BASEPRI, r3
 8005860:	f3bf 8f6f 	isb	sy
 8005864:	f3bf 8f4f 	dsb	sy
 8005868:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800586a:	bf00      	nop
 800586c:	e7fe      	b.n	800586c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d103      	bne.n	800587c <xQueueGenericSendFromISR+0x3c>
 8005874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005878:	2b00      	cmp	r3, #0
 800587a:	d101      	bne.n	8005880 <xQueueGenericSendFromISR+0x40>
 800587c:	2301      	movs	r3, #1
 800587e:	e000      	b.n	8005882 <xQueueGenericSendFromISR+0x42>
 8005880:	2300      	movs	r3, #0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d10a      	bne.n	800589c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800588a:	f383 8811 	msr	BASEPRI, r3
 800588e:	f3bf 8f6f 	isb	sy
 8005892:	f3bf 8f4f 	dsb	sy
 8005896:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005898:	bf00      	nop
 800589a:	e7fe      	b.n	800589a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d103      	bne.n	80058aa <xQueueGenericSendFromISR+0x6a>
 80058a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d101      	bne.n	80058ae <xQueueGenericSendFromISR+0x6e>
 80058aa:	2301      	movs	r3, #1
 80058ac:	e000      	b.n	80058b0 <xQueueGenericSendFromISR+0x70>
 80058ae:	2300      	movs	r3, #0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d10a      	bne.n	80058ca <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80058b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b8:	f383 8811 	msr	BASEPRI, r3
 80058bc:	f3bf 8f6f 	isb	sy
 80058c0:	f3bf 8f4f 	dsb	sy
 80058c4:	623b      	str	r3, [r7, #32]
}
 80058c6:	bf00      	nop
 80058c8:	e7fe      	b.n	80058c8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80058ca:	f001 ff7d 	bl	80077c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80058ce:	f3ef 8211 	mrs	r2, BASEPRI
 80058d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d6:	f383 8811 	msr	BASEPRI, r3
 80058da:	f3bf 8f6f 	isb	sy
 80058de:	f3bf 8f4f 	dsb	sy
 80058e2:	61fa      	str	r2, [r7, #28]
 80058e4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80058e6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80058e8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80058ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d302      	bcc.n	80058fc <xQueueGenericSendFromISR+0xbc>
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	2b02      	cmp	r3, #2
 80058fa:	d12f      	bne.n	800595c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80058fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005902:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800590a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800590c:	683a      	ldr	r2, [r7, #0]
 800590e:	68b9      	ldr	r1, [r7, #8]
 8005910:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005912:	f000 f991 	bl	8005c38 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005916:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800591a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800591e:	d112      	bne.n	8005946 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005924:	2b00      	cmp	r3, #0
 8005926:	d016      	beq.n	8005956 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800592a:	3324      	adds	r3, #36	; 0x24
 800592c:	4618      	mov	r0, r3
 800592e:	f000 ff51 	bl	80067d4 <xTaskRemoveFromEventList>
 8005932:	4603      	mov	r3, r0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d00e      	beq.n	8005956 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00b      	beq.n	8005956 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2201      	movs	r2, #1
 8005942:	601a      	str	r2, [r3, #0]
 8005944:	e007      	b.n	8005956 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005946:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800594a:	3301      	adds	r3, #1
 800594c:	b2db      	uxtb	r3, r3
 800594e:	b25a      	sxtb	r2, r3
 8005950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005952:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005956:	2301      	movs	r3, #1
 8005958:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800595a:	e001      	b.n	8005960 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800595c:	2300      	movs	r3, #0
 800595e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005962:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800596a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800596c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800596e:	4618      	mov	r0, r3
 8005970:	3740      	adds	r7, #64	; 0x40
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
	...

08005978 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b08c      	sub	sp, #48	; 0x30
 800597c:	af00      	add	r7, sp, #0
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	60b9      	str	r1, [r7, #8]
 8005982:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005984:	2300      	movs	r3, #0
 8005986:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800598c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800598e:	2b00      	cmp	r3, #0
 8005990:	d10a      	bne.n	80059a8 <xQueueReceive+0x30>
	__asm volatile
 8005992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005996:	f383 8811 	msr	BASEPRI, r3
 800599a:	f3bf 8f6f 	isb	sy
 800599e:	f3bf 8f4f 	dsb	sy
 80059a2:	623b      	str	r3, [r7, #32]
}
 80059a4:	bf00      	nop
 80059a6:	e7fe      	b.n	80059a6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d103      	bne.n	80059b6 <xQueueReceive+0x3e>
 80059ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d101      	bne.n	80059ba <xQueueReceive+0x42>
 80059b6:	2301      	movs	r3, #1
 80059b8:	e000      	b.n	80059bc <xQueueReceive+0x44>
 80059ba:	2300      	movs	r3, #0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d10a      	bne.n	80059d6 <xQueueReceive+0x5e>
	__asm volatile
 80059c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c4:	f383 8811 	msr	BASEPRI, r3
 80059c8:	f3bf 8f6f 	isb	sy
 80059cc:	f3bf 8f4f 	dsb	sy
 80059d0:	61fb      	str	r3, [r7, #28]
}
 80059d2:	bf00      	nop
 80059d4:	e7fe      	b.n	80059d4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059d6:	f001 f8bb 	bl	8006b50 <xTaskGetSchedulerState>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d102      	bne.n	80059e6 <xQueueReceive+0x6e>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d101      	bne.n	80059ea <xQueueReceive+0x72>
 80059e6:	2301      	movs	r3, #1
 80059e8:	e000      	b.n	80059ec <xQueueReceive+0x74>
 80059ea:	2300      	movs	r3, #0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d10a      	bne.n	8005a06 <xQueueReceive+0x8e>
	__asm volatile
 80059f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f4:	f383 8811 	msr	BASEPRI, r3
 80059f8:	f3bf 8f6f 	isb	sy
 80059fc:	f3bf 8f4f 	dsb	sy
 8005a00:	61bb      	str	r3, [r7, #24]
}
 8005a02:	bf00      	nop
 8005a04:	e7fe      	b.n	8005a04 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a06:	f001 fdfd 	bl	8007604 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d01f      	beq.n	8005a56 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005a16:	68b9      	ldr	r1, [r7, #8]
 8005a18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a1a:	f000 f977 	bl	8005d0c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a20:	1e5a      	subs	r2, r3, #1
 8005a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a24:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00f      	beq.n	8005a4e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a30:	3310      	adds	r3, #16
 8005a32:	4618      	mov	r0, r3
 8005a34:	f000 fece 	bl	80067d4 <xTaskRemoveFromEventList>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d007      	beq.n	8005a4e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a3e:	4b3d      	ldr	r3, [pc, #244]	; (8005b34 <xQueueReceive+0x1bc>)
 8005a40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a44:	601a      	str	r2, [r3, #0]
 8005a46:	f3bf 8f4f 	dsb	sy
 8005a4a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005a4e:	f001 fe09 	bl	8007664 <vPortExitCritical>
				return pdPASS;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e069      	b.n	8005b2a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d103      	bne.n	8005a64 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a5c:	f001 fe02 	bl	8007664 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a60:	2300      	movs	r3, #0
 8005a62:	e062      	b.n	8005b2a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d106      	bne.n	8005a78 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a6a:	f107 0310 	add.w	r3, r7, #16
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f000 ff14 	bl	800689c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a74:	2301      	movs	r3, #1
 8005a76:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a78:	f001 fdf4 	bl	8007664 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a7c:	f000 fc86 	bl	800638c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a80:	f001 fdc0 	bl	8007604 <vPortEnterCritical>
 8005a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a8a:	b25b      	sxtb	r3, r3
 8005a8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a90:	d103      	bne.n	8005a9a <xQueueReceive+0x122>
 8005a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005aa0:	b25b      	sxtb	r3, r3
 8005aa2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005aa6:	d103      	bne.n	8005ab0 <xQueueReceive+0x138>
 8005aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ab0:	f001 fdd8 	bl	8007664 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ab4:	1d3a      	adds	r2, r7, #4
 8005ab6:	f107 0310 	add.w	r3, r7, #16
 8005aba:	4611      	mov	r1, r2
 8005abc:	4618      	mov	r0, r3
 8005abe:	f000 ff03 	bl	80068c8 <xTaskCheckForTimeOut>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d123      	bne.n	8005b10 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ac8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005aca:	f000 f997 	bl	8005dfc <prvIsQueueEmpty>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d017      	beq.n	8005b04 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad6:	3324      	adds	r3, #36	; 0x24
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	4611      	mov	r1, r2
 8005adc:	4618      	mov	r0, r3
 8005ade:	f000 fe29 	bl	8006734 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005ae2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ae4:	f000 f938 	bl	8005d58 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005ae8:	f000 fc5e 	bl	80063a8 <xTaskResumeAll>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d189      	bne.n	8005a06 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005af2:	4b10      	ldr	r3, [pc, #64]	; (8005b34 <xQueueReceive+0x1bc>)
 8005af4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005af8:	601a      	str	r2, [r3, #0]
 8005afa:	f3bf 8f4f 	dsb	sy
 8005afe:	f3bf 8f6f 	isb	sy
 8005b02:	e780      	b.n	8005a06 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005b04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b06:	f000 f927 	bl	8005d58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b0a:	f000 fc4d 	bl	80063a8 <xTaskResumeAll>
 8005b0e:	e77a      	b.n	8005a06 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005b10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b12:	f000 f921 	bl	8005d58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b16:	f000 fc47 	bl	80063a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b1c:	f000 f96e 	bl	8005dfc <prvIsQueueEmpty>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	f43f af6f 	beq.w	8005a06 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b28:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3730      	adds	r7, #48	; 0x30
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	e000ed04 	.word	0xe000ed04

08005b38 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b08e      	sub	sp, #56	; 0x38
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d10a      	bne.n	8005b64 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b52:	f383 8811 	msr	BASEPRI, r3
 8005b56:	f3bf 8f6f 	isb	sy
 8005b5a:	f3bf 8f4f 	dsb	sy
 8005b5e:	623b      	str	r3, [r7, #32]
}
 8005b60:	bf00      	nop
 8005b62:	e7fe      	b.n	8005b62 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d103      	bne.n	8005b72 <xQueueReceiveFromISR+0x3a>
 8005b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d101      	bne.n	8005b76 <xQueueReceiveFromISR+0x3e>
 8005b72:	2301      	movs	r3, #1
 8005b74:	e000      	b.n	8005b78 <xQueueReceiveFromISR+0x40>
 8005b76:	2300      	movs	r3, #0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d10a      	bne.n	8005b92 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b80:	f383 8811 	msr	BASEPRI, r3
 8005b84:	f3bf 8f6f 	isb	sy
 8005b88:	f3bf 8f4f 	dsb	sy
 8005b8c:	61fb      	str	r3, [r7, #28]
}
 8005b8e:	bf00      	nop
 8005b90:	e7fe      	b.n	8005b90 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b92:	f001 fe19 	bl	80077c8 <vPortValidateInterruptPriority>
	__asm volatile
 8005b96:	f3ef 8211 	mrs	r2, BASEPRI
 8005b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b9e:	f383 8811 	msr	BASEPRI, r3
 8005ba2:	f3bf 8f6f 	isb	sy
 8005ba6:	f3bf 8f4f 	dsb	sy
 8005baa:	61ba      	str	r2, [r7, #24]
 8005bac:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005bae:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d02f      	beq.n	8005c1e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005bc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005bc8:	68b9      	ldr	r1, [r7, #8]
 8005bca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bcc:	f000 f89e 	bl	8005d0c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd2:	1e5a      	subs	r2, r3, #1
 8005bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005bd8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005bdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005be0:	d112      	bne.n	8005c08 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d016      	beq.n	8005c18 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bec:	3310      	adds	r3, #16
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f000 fdf0 	bl	80067d4 <xTaskRemoveFromEventList>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00e      	beq.n	8005c18 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d00b      	beq.n	8005c18 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	601a      	str	r2, [r3, #0]
 8005c06:	e007      	b.n	8005c18 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005c08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	b25a      	sxtb	r2, r3
 8005c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	637b      	str	r3, [r7, #52]	; 0x34
 8005c1c:	e001      	b.n	8005c22 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	637b      	str	r3, [r7, #52]	; 0x34
 8005c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c24:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	f383 8811 	msr	BASEPRI, r3
}
 8005c2c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3738      	adds	r7, #56	; 0x38
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b086      	sub	sp, #24
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005c44:	2300      	movs	r3, #0
 8005c46:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c4c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d10d      	bne.n	8005c72 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d14d      	bne.n	8005cfa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	4618      	mov	r0, r3
 8005c64:	f000 ff92 	bl	8006b8c <xTaskPriorityDisinherit>
 8005c68:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	609a      	str	r2, [r3, #8]
 8005c70:	e043      	b.n	8005cfa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d119      	bne.n	8005cac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6858      	ldr	r0, [r3, #4]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c80:	461a      	mov	r2, r3
 8005c82:	68b9      	ldr	r1, [r7, #8]
 8005c84:	f001 fff4 	bl	8007c70 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	685a      	ldr	r2, [r3, #4]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c90:	441a      	add	r2, r3
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	685a      	ldr	r2, [r3, #4]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d32b      	bcc.n	8005cfa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	605a      	str	r2, [r3, #4]
 8005caa:	e026      	b.n	8005cfa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	68d8      	ldr	r0, [r3, #12]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	68b9      	ldr	r1, [r7, #8]
 8005cb8:	f001 ffda 	bl	8007c70 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	68da      	ldr	r2, [r3, #12]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc4:	425b      	negs	r3, r3
 8005cc6:	441a      	add	r2, r3
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	68da      	ldr	r2, [r3, #12]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d207      	bcs.n	8005ce8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	689a      	ldr	r2, [r3, #8]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce0:	425b      	negs	r3, r3
 8005ce2:	441a      	add	r2, r3
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d105      	bne.n	8005cfa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d002      	beq.n	8005cfa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	3b01      	subs	r3, #1
 8005cf8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	1c5a      	adds	r2, r3, #1
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005d02:	697b      	ldr	r3, [r7, #20]
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3718      	adds	r7, #24
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d018      	beq.n	8005d50 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	68da      	ldr	r2, [r3, #12]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d26:	441a      	add	r2, r3
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	68da      	ldr	r2, [r3, #12]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d303      	bcc.n	8005d40 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	68d9      	ldr	r1, [r3, #12]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d48:	461a      	mov	r2, r3
 8005d4a:	6838      	ldr	r0, [r7, #0]
 8005d4c:	f001 ff90 	bl	8007c70 <memcpy>
	}
}
 8005d50:	bf00      	nop
 8005d52:	3708      	adds	r7, #8
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005d60:	f001 fc50 	bl	8007604 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d6a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d6c:	e011      	b.n	8005d92 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d012      	beq.n	8005d9c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	3324      	adds	r3, #36	; 0x24
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f000 fd2a 	bl	80067d4 <xTaskRemoveFromEventList>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d001      	beq.n	8005d8a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005d86:	f000 fe01 	bl	800698c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005d8a:	7bfb      	ldrb	r3, [r7, #15]
 8005d8c:	3b01      	subs	r3, #1
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	dce9      	bgt.n	8005d6e <prvUnlockQueue+0x16>
 8005d9a:	e000      	b.n	8005d9e <prvUnlockQueue+0x46>
					break;
 8005d9c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	22ff      	movs	r2, #255	; 0xff
 8005da2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005da6:	f001 fc5d 	bl	8007664 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005daa:	f001 fc2b 	bl	8007604 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005db4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005db6:	e011      	b.n	8005ddc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d012      	beq.n	8005de6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	3310      	adds	r3, #16
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f000 fd05 	bl	80067d4 <xTaskRemoveFromEventList>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d001      	beq.n	8005dd4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005dd0:	f000 fddc 	bl	800698c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005dd4:	7bbb      	ldrb	r3, [r7, #14]
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ddc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	dce9      	bgt.n	8005db8 <prvUnlockQueue+0x60>
 8005de4:	e000      	b.n	8005de8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005de6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	22ff      	movs	r2, #255	; 0xff
 8005dec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005df0:	f001 fc38 	bl	8007664 <vPortExitCritical>
}
 8005df4:	bf00      	nop
 8005df6:	3710      	adds	r7, #16
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e04:	f001 fbfe 	bl	8007604 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d102      	bne.n	8005e16 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005e10:	2301      	movs	r3, #1
 8005e12:	60fb      	str	r3, [r7, #12]
 8005e14:	e001      	b.n	8005e1a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005e16:	2300      	movs	r3, #0
 8005e18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e1a:	f001 fc23 	bl	8007664 <vPortExitCritical>

	return xReturn;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3710      	adds	r7, #16
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e30:	f001 fbe8 	bl	8007604 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d102      	bne.n	8005e46 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005e40:	2301      	movs	r3, #1
 8005e42:	60fb      	str	r3, [r7, #12]
 8005e44:	e001      	b.n	8005e4a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005e46:	2300      	movs	r3, #0
 8005e48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e4a:	f001 fc0b 	bl	8007664 <vPortExitCritical>

	return xReturn;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3710      	adds	r7, #16
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005e58:	b480      	push	{r7}
 8005e5a:	b085      	sub	sp, #20
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e62:	2300      	movs	r3, #0
 8005e64:	60fb      	str	r3, [r7, #12]
 8005e66:	e014      	b.n	8005e92 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005e68:	4a0f      	ldr	r2, [pc, #60]	; (8005ea8 <vQueueAddToRegistry+0x50>)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d10b      	bne.n	8005e8c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005e74:	490c      	ldr	r1, [pc, #48]	; (8005ea8 <vQueueAddToRegistry+0x50>)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	683a      	ldr	r2, [r7, #0]
 8005e7a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005e7e:	4a0a      	ldr	r2, [pc, #40]	; (8005ea8 <vQueueAddToRegistry+0x50>)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	00db      	lsls	r3, r3, #3
 8005e84:	4413      	add	r3, r2
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005e8a:	e006      	b.n	8005e9a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	3301      	adds	r3, #1
 8005e90:	60fb      	str	r3, [r7, #12]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2b07      	cmp	r3, #7
 8005e96:	d9e7      	bls.n	8005e68 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005e98:	bf00      	nop
 8005e9a:	bf00      	nop
 8005e9c:	3714      	adds	r7, #20
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr
 8005ea6:	bf00      	nop
 8005ea8:	200047a0 	.word	0x200047a0

08005eac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b086      	sub	sp, #24
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005ebc:	f001 fba2 	bl	8007604 <vPortEnterCritical>
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ec6:	b25b      	sxtb	r3, r3
 8005ec8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ecc:	d103      	bne.n	8005ed6 <vQueueWaitForMessageRestricted+0x2a>
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005edc:	b25b      	sxtb	r3, r3
 8005ede:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ee2:	d103      	bne.n	8005eec <vQueueWaitForMessageRestricted+0x40>
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005eec:	f001 fbba 	bl	8007664 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d106      	bne.n	8005f06 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	3324      	adds	r3, #36	; 0x24
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	68b9      	ldr	r1, [r7, #8]
 8005f00:	4618      	mov	r0, r3
 8005f02:	f000 fc3b 	bl	800677c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005f06:	6978      	ldr	r0, [r7, #20]
 8005f08:	f7ff ff26 	bl	8005d58 <prvUnlockQueue>
	}
 8005f0c:	bf00      	nop
 8005f0e:	3718      	adds	r7, #24
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b08e      	sub	sp, #56	; 0x38
 8005f18:	af04      	add	r7, sp, #16
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	607a      	str	r2, [r7, #4]
 8005f20:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d10a      	bne.n	8005f3e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f2c:	f383 8811 	msr	BASEPRI, r3
 8005f30:	f3bf 8f6f 	isb	sy
 8005f34:	f3bf 8f4f 	dsb	sy
 8005f38:	623b      	str	r3, [r7, #32]
}
 8005f3a:	bf00      	nop
 8005f3c:	e7fe      	b.n	8005f3c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d10a      	bne.n	8005f5a <xTaskCreateStatic+0x46>
	__asm volatile
 8005f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f48:	f383 8811 	msr	BASEPRI, r3
 8005f4c:	f3bf 8f6f 	isb	sy
 8005f50:	f3bf 8f4f 	dsb	sy
 8005f54:	61fb      	str	r3, [r7, #28]
}
 8005f56:	bf00      	nop
 8005f58:	e7fe      	b.n	8005f58 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005f5a:	235c      	movs	r3, #92	; 0x5c
 8005f5c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	2b5c      	cmp	r3, #92	; 0x5c
 8005f62:	d00a      	beq.n	8005f7a <xTaskCreateStatic+0x66>
	__asm volatile
 8005f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f68:	f383 8811 	msr	BASEPRI, r3
 8005f6c:	f3bf 8f6f 	isb	sy
 8005f70:	f3bf 8f4f 	dsb	sy
 8005f74:	61bb      	str	r3, [r7, #24]
}
 8005f76:	bf00      	nop
 8005f78:	e7fe      	b.n	8005f78 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005f7a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d01e      	beq.n	8005fc0 <xTaskCreateStatic+0xac>
 8005f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d01b      	beq.n	8005fc0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f8a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f90:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f94:	2202      	movs	r2, #2
 8005f96:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	9303      	str	r3, [sp, #12]
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa0:	9302      	str	r3, [sp, #8]
 8005fa2:	f107 0314 	add.w	r3, r7, #20
 8005fa6:	9301      	str	r3, [sp, #4]
 8005fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005faa:	9300      	str	r3, [sp, #0]
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	68b9      	ldr	r1, [r7, #8]
 8005fb2:	68f8      	ldr	r0, [r7, #12]
 8005fb4:	f000 f850 	bl	8006058 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005fb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005fba:	f000 f8dd 	bl	8006178 <prvAddNewTaskToReadyList>
 8005fbe:	e001      	b.n	8005fc4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005fc4:	697b      	ldr	r3, [r7, #20]
	}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3728      	adds	r7, #40	; 0x28
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}

08005fce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005fce:	b580      	push	{r7, lr}
 8005fd0:	b08c      	sub	sp, #48	; 0x30
 8005fd2:	af04      	add	r7, sp, #16
 8005fd4:	60f8      	str	r0, [r7, #12]
 8005fd6:	60b9      	str	r1, [r7, #8]
 8005fd8:	603b      	str	r3, [r7, #0]
 8005fda:	4613      	mov	r3, r2
 8005fdc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005fde:	88fb      	ldrh	r3, [r7, #6]
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f001 fc30 	bl	8007848 <pvPortMalloc>
 8005fe8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d00e      	beq.n	800600e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005ff0:	205c      	movs	r0, #92	; 0x5c
 8005ff2:	f001 fc29 	bl	8007848 <pvPortMalloc>
 8005ff6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d003      	beq.n	8006006 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	697a      	ldr	r2, [r7, #20]
 8006002:	631a      	str	r2, [r3, #48]	; 0x30
 8006004:	e005      	b.n	8006012 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006006:	6978      	ldr	r0, [r7, #20]
 8006008:	f001 fcea 	bl	80079e0 <vPortFree>
 800600c:	e001      	b.n	8006012 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800600e:	2300      	movs	r3, #0
 8006010:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006012:	69fb      	ldr	r3, [r7, #28]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d017      	beq.n	8006048 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	2200      	movs	r2, #0
 800601c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006020:	88fa      	ldrh	r2, [r7, #6]
 8006022:	2300      	movs	r3, #0
 8006024:	9303      	str	r3, [sp, #12]
 8006026:	69fb      	ldr	r3, [r7, #28]
 8006028:	9302      	str	r3, [sp, #8]
 800602a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800602c:	9301      	str	r3, [sp, #4]
 800602e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006030:	9300      	str	r3, [sp, #0]
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	68b9      	ldr	r1, [r7, #8]
 8006036:	68f8      	ldr	r0, [r7, #12]
 8006038:	f000 f80e 	bl	8006058 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800603c:	69f8      	ldr	r0, [r7, #28]
 800603e:	f000 f89b 	bl	8006178 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006042:	2301      	movs	r3, #1
 8006044:	61bb      	str	r3, [r7, #24]
 8006046:	e002      	b.n	800604e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006048:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800604c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800604e:	69bb      	ldr	r3, [r7, #24]
	}
 8006050:	4618      	mov	r0, r3
 8006052:	3720      	adds	r7, #32
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b088      	sub	sp, #32
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	607a      	str	r2, [r7, #4]
 8006064:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006068:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	461a      	mov	r2, r3
 8006070:	21a5      	movs	r1, #165	; 0xa5
 8006072:	f001 fe0b 	bl	8007c8c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006078:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006080:	3b01      	subs	r3, #1
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	4413      	add	r3, r2
 8006086:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	f023 0307 	bic.w	r3, r3, #7
 800608e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	f003 0307 	and.w	r3, r3, #7
 8006096:	2b00      	cmp	r3, #0
 8006098:	d00a      	beq.n	80060b0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800609a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800609e:	f383 8811 	msr	BASEPRI, r3
 80060a2:	f3bf 8f6f 	isb	sy
 80060a6:	f3bf 8f4f 	dsb	sy
 80060aa:	617b      	str	r3, [r7, #20]
}
 80060ac:	bf00      	nop
 80060ae:	e7fe      	b.n	80060ae <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d01f      	beq.n	80060f6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80060b6:	2300      	movs	r3, #0
 80060b8:	61fb      	str	r3, [r7, #28]
 80060ba:	e012      	b.n	80060e2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80060bc:	68ba      	ldr	r2, [r7, #8]
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	4413      	add	r3, r2
 80060c2:	7819      	ldrb	r1, [r3, #0]
 80060c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	4413      	add	r3, r2
 80060ca:	3334      	adds	r3, #52	; 0x34
 80060cc:	460a      	mov	r2, r1
 80060ce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80060d0:	68ba      	ldr	r2, [r7, #8]
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	4413      	add	r3, r2
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d006      	beq.n	80060ea <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	3301      	adds	r3, #1
 80060e0:	61fb      	str	r3, [r7, #28]
 80060e2:	69fb      	ldr	r3, [r7, #28]
 80060e4:	2b0f      	cmp	r3, #15
 80060e6:	d9e9      	bls.n	80060bc <prvInitialiseNewTask+0x64>
 80060e8:	e000      	b.n	80060ec <prvInitialiseNewTask+0x94>
			{
				break;
 80060ea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80060ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ee:	2200      	movs	r2, #0
 80060f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80060f4:	e003      	b.n	80060fe <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80060f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f8:	2200      	movs	r2, #0
 80060fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80060fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006100:	2b37      	cmp	r3, #55	; 0x37
 8006102:	d901      	bls.n	8006108 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006104:	2337      	movs	r3, #55	; 0x37
 8006106:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800610a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800610c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800610e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006110:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006112:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006116:	2200      	movs	r2, #0
 8006118:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800611a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611c:	3304      	adds	r3, #4
 800611e:	4618      	mov	r0, r3
 8006120:	f7ff f8be 	bl	80052a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006126:	3318      	adds	r3, #24
 8006128:	4618      	mov	r0, r3
 800612a:	f7ff f8b9 	bl	80052a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800612e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006130:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006132:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006136:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800613a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800613c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800613e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006140:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006142:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006146:	2200      	movs	r2, #0
 8006148:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800614a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800614c:	2200      	movs	r2, #0
 800614e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006152:	683a      	ldr	r2, [r7, #0]
 8006154:	68f9      	ldr	r1, [r7, #12]
 8006156:	69b8      	ldr	r0, [r7, #24]
 8006158:	f001 f928 	bl	80073ac <pxPortInitialiseStack>
 800615c:	4602      	mov	r2, r0
 800615e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006160:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006164:	2b00      	cmp	r3, #0
 8006166:	d002      	beq.n	800616e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800616a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800616c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800616e:	bf00      	nop
 8006170:	3720      	adds	r7, #32
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
	...

08006178 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006180:	f001 fa40 	bl	8007604 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006184:	4b2d      	ldr	r3, [pc, #180]	; (800623c <prvAddNewTaskToReadyList+0xc4>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	3301      	adds	r3, #1
 800618a:	4a2c      	ldr	r2, [pc, #176]	; (800623c <prvAddNewTaskToReadyList+0xc4>)
 800618c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800618e:	4b2c      	ldr	r3, [pc, #176]	; (8006240 <prvAddNewTaskToReadyList+0xc8>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d109      	bne.n	80061aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006196:	4a2a      	ldr	r2, [pc, #168]	; (8006240 <prvAddNewTaskToReadyList+0xc8>)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800619c:	4b27      	ldr	r3, [pc, #156]	; (800623c <prvAddNewTaskToReadyList+0xc4>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d110      	bne.n	80061c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80061a4:	f000 fc16 	bl	80069d4 <prvInitialiseTaskLists>
 80061a8:	e00d      	b.n	80061c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80061aa:	4b26      	ldr	r3, [pc, #152]	; (8006244 <prvAddNewTaskToReadyList+0xcc>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d109      	bne.n	80061c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80061b2:	4b23      	ldr	r3, [pc, #140]	; (8006240 <prvAddNewTaskToReadyList+0xc8>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061bc:	429a      	cmp	r2, r3
 80061be:	d802      	bhi.n	80061c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80061c0:	4a1f      	ldr	r2, [pc, #124]	; (8006240 <prvAddNewTaskToReadyList+0xc8>)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80061c6:	4b20      	ldr	r3, [pc, #128]	; (8006248 <prvAddNewTaskToReadyList+0xd0>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	3301      	adds	r3, #1
 80061cc:	4a1e      	ldr	r2, [pc, #120]	; (8006248 <prvAddNewTaskToReadyList+0xd0>)
 80061ce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80061d0:	4b1d      	ldr	r3, [pc, #116]	; (8006248 <prvAddNewTaskToReadyList+0xd0>)
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061dc:	4b1b      	ldr	r3, [pc, #108]	; (800624c <prvAddNewTaskToReadyList+0xd4>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d903      	bls.n	80061ec <prvAddNewTaskToReadyList+0x74>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e8:	4a18      	ldr	r2, [pc, #96]	; (800624c <prvAddNewTaskToReadyList+0xd4>)
 80061ea:	6013      	str	r3, [r2, #0]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061f0:	4613      	mov	r3, r2
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	4413      	add	r3, r2
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	4a15      	ldr	r2, [pc, #84]	; (8006250 <prvAddNewTaskToReadyList+0xd8>)
 80061fa:	441a      	add	r2, r3
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	3304      	adds	r3, #4
 8006200:	4619      	mov	r1, r3
 8006202:	4610      	mov	r0, r2
 8006204:	f7ff f859 	bl	80052ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006208:	f001 fa2c 	bl	8007664 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800620c:	4b0d      	ldr	r3, [pc, #52]	; (8006244 <prvAddNewTaskToReadyList+0xcc>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d00e      	beq.n	8006232 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006214:	4b0a      	ldr	r3, [pc, #40]	; (8006240 <prvAddNewTaskToReadyList+0xc8>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800621e:	429a      	cmp	r2, r3
 8006220:	d207      	bcs.n	8006232 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006222:	4b0c      	ldr	r3, [pc, #48]	; (8006254 <prvAddNewTaskToReadyList+0xdc>)
 8006224:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006228:	601a      	str	r2, [r3, #0]
 800622a:	f3bf 8f4f 	dsb	sy
 800622e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006232:	bf00      	nop
 8006234:	3708      	adds	r7, #8
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop
 800623c:	20000c44 	.word	0x20000c44
 8006240:	20000770 	.word	0x20000770
 8006244:	20000c50 	.word	0x20000c50
 8006248:	20000c60 	.word	0x20000c60
 800624c:	20000c4c 	.word	0x20000c4c
 8006250:	20000774 	.word	0x20000774
 8006254:	e000ed04 	.word	0xe000ed04

08006258 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006260:	2300      	movs	r3, #0
 8006262:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d017      	beq.n	800629a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800626a:	4b13      	ldr	r3, [pc, #76]	; (80062b8 <vTaskDelay+0x60>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00a      	beq.n	8006288 <vTaskDelay+0x30>
	__asm volatile
 8006272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006276:	f383 8811 	msr	BASEPRI, r3
 800627a:	f3bf 8f6f 	isb	sy
 800627e:	f3bf 8f4f 	dsb	sy
 8006282:	60bb      	str	r3, [r7, #8]
}
 8006284:	bf00      	nop
 8006286:	e7fe      	b.n	8006286 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006288:	f000 f880 	bl	800638c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800628c:	2100      	movs	r1, #0
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 fcea 	bl	8006c68 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006294:	f000 f888 	bl	80063a8 <xTaskResumeAll>
 8006298:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d107      	bne.n	80062b0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80062a0:	4b06      	ldr	r3, [pc, #24]	; (80062bc <vTaskDelay+0x64>)
 80062a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062a6:	601a      	str	r2, [r3, #0]
 80062a8:	f3bf 8f4f 	dsb	sy
 80062ac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80062b0:	bf00      	nop
 80062b2:	3710      	adds	r7, #16
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	20000c6c 	.word	0x20000c6c
 80062bc:	e000ed04 	.word	0xe000ed04

080062c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b08a      	sub	sp, #40	; 0x28
 80062c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80062c6:	2300      	movs	r3, #0
 80062c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80062ca:	2300      	movs	r3, #0
 80062cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80062ce:	463a      	mov	r2, r7
 80062d0:	1d39      	adds	r1, r7, #4
 80062d2:	f107 0308 	add.w	r3, r7, #8
 80062d6:	4618      	mov	r0, r3
 80062d8:	f7fe ff8e 	bl	80051f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80062dc:	6839      	ldr	r1, [r7, #0]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	68ba      	ldr	r2, [r7, #8]
 80062e2:	9202      	str	r2, [sp, #8]
 80062e4:	9301      	str	r3, [sp, #4]
 80062e6:	2300      	movs	r3, #0
 80062e8:	9300      	str	r3, [sp, #0]
 80062ea:	2300      	movs	r3, #0
 80062ec:	460a      	mov	r2, r1
 80062ee:	4921      	ldr	r1, [pc, #132]	; (8006374 <vTaskStartScheduler+0xb4>)
 80062f0:	4821      	ldr	r0, [pc, #132]	; (8006378 <vTaskStartScheduler+0xb8>)
 80062f2:	f7ff fe0f 	bl	8005f14 <xTaskCreateStatic>
 80062f6:	4603      	mov	r3, r0
 80062f8:	4a20      	ldr	r2, [pc, #128]	; (800637c <vTaskStartScheduler+0xbc>)
 80062fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80062fc:	4b1f      	ldr	r3, [pc, #124]	; (800637c <vTaskStartScheduler+0xbc>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d002      	beq.n	800630a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006304:	2301      	movs	r3, #1
 8006306:	617b      	str	r3, [r7, #20]
 8006308:	e001      	b.n	800630e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800630a:	2300      	movs	r3, #0
 800630c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	2b01      	cmp	r3, #1
 8006312:	d102      	bne.n	800631a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006314:	f000 fcfc 	bl	8006d10 <xTimerCreateTimerTask>
 8006318:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	2b01      	cmp	r3, #1
 800631e:	d116      	bne.n	800634e <vTaskStartScheduler+0x8e>
	__asm volatile
 8006320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006324:	f383 8811 	msr	BASEPRI, r3
 8006328:	f3bf 8f6f 	isb	sy
 800632c:	f3bf 8f4f 	dsb	sy
 8006330:	613b      	str	r3, [r7, #16]
}
 8006332:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006334:	4b12      	ldr	r3, [pc, #72]	; (8006380 <vTaskStartScheduler+0xc0>)
 8006336:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800633a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800633c:	4b11      	ldr	r3, [pc, #68]	; (8006384 <vTaskStartScheduler+0xc4>)
 800633e:	2201      	movs	r2, #1
 8006340:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006342:	4b11      	ldr	r3, [pc, #68]	; (8006388 <vTaskStartScheduler+0xc8>)
 8006344:	2200      	movs	r2, #0
 8006346:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006348:	f001 f8ba 	bl	80074c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800634c:	e00e      	b.n	800636c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006354:	d10a      	bne.n	800636c <vTaskStartScheduler+0xac>
	__asm volatile
 8006356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800635a:	f383 8811 	msr	BASEPRI, r3
 800635e:	f3bf 8f6f 	isb	sy
 8006362:	f3bf 8f4f 	dsb	sy
 8006366:	60fb      	str	r3, [r7, #12]
}
 8006368:	bf00      	nop
 800636a:	e7fe      	b.n	800636a <vTaskStartScheduler+0xaa>
}
 800636c:	bf00      	nop
 800636e:	3718      	adds	r7, #24
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}
 8006374:	08008c88 	.word	0x08008c88
 8006378:	080069a5 	.word	0x080069a5
 800637c:	20000c68 	.word	0x20000c68
 8006380:	20000c64 	.word	0x20000c64
 8006384:	20000c50 	.word	0x20000c50
 8006388:	20000c48 	.word	0x20000c48

0800638c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800638c:	b480      	push	{r7}
 800638e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006390:	4b04      	ldr	r3, [pc, #16]	; (80063a4 <vTaskSuspendAll+0x18>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	3301      	adds	r3, #1
 8006396:	4a03      	ldr	r2, [pc, #12]	; (80063a4 <vTaskSuspendAll+0x18>)
 8006398:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800639a:	bf00      	nop
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr
 80063a4:	20000c6c 	.word	0x20000c6c

080063a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80063ae:	2300      	movs	r3, #0
 80063b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80063b2:	2300      	movs	r3, #0
 80063b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80063b6:	4b42      	ldr	r3, [pc, #264]	; (80064c0 <xTaskResumeAll+0x118>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d10a      	bne.n	80063d4 <xTaskResumeAll+0x2c>
	__asm volatile
 80063be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c2:	f383 8811 	msr	BASEPRI, r3
 80063c6:	f3bf 8f6f 	isb	sy
 80063ca:	f3bf 8f4f 	dsb	sy
 80063ce:	603b      	str	r3, [r7, #0]
}
 80063d0:	bf00      	nop
 80063d2:	e7fe      	b.n	80063d2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80063d4:	f001 f916 	bl	8007604 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80063d8:	4b39      	ldr	r3, [pc, #228]	; (80064c0 <xTaskResumeAll+0x118>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	3b01      	subs	r3, #1
 80063de:	4a38      	ldr	r2, [pc, #224]	; (80064c0 <xTaskResumeAll+0x118>)
 80063e0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063e2:	4b37      	ldr	r3, [pc, #220]	; (80064c0 <xTaskResumeAll+0x118>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d162      	bne.n	80064b0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80063ea:	4b36      	ldr	r3, [pc, #216]	; (80064c4 <xTaskResumeAll+0x11c>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d05e      	beq.n	80064b0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80063f2:	e02f      	b.n	8006454 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063f4:	4b34      	ldr	r3, [pc, #208]	; (80064c8 <xTaskResumeAll+0x120>)
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	3318      	adds	r3, #24
 8006400:	4618      	mov	r0, r3
 8006402:	f7fe ffb7 	bl	8005374 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	3304      	adds	r3, #4
 800640a:	4618      	mov	r0, r3
 800640c:	f7fe ffb2 	bl	8005374 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006414:	4b2d      	ldr	r3, [pc, #180]	; (80064cc <xTaskResumeAll+0x124>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	429a      	cmp	r2, r3
 800641a:	d903      	bls.n	8006424 <xTaskResumeAll+0x7c>
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006420:	4a2a      	ldr	r2, [pc, #168]	; (80064cc <xTaskResumeAll+0x124>)
 8006422:	6013      	str	r3, [r2, #0]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006428:	4613      	mov	r3, r2
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	4413      	add	r3, r2
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	4a27      	ldr	r2, [pc, #156]	; (80064d0 <xTaskResumeAll+0x128>)
 8006432:	441a      	add	r2, r3
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	3304      	adds	r3, #4
 8006438:	4619      	mov	r1, r3
 800643a:	4610      	mov	r0, r2
 800643c:	f7fe ff3d 	bl	80052ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006444:	4b23      	ldr	r3, [pc, #140]	; (80064d4 <xTaskResumeAll+0x12c>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800644a:	429a      	cmp	r2, r3
 800644c:	d302      	bcc.n	8006454 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800644e:	4b22      	ldr	r3, [pc, #136]	; (80064d8 <xTaskResumeAll+0x130>)
 8006450:	2201      	movs	r2, #1
 8006452:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006454:	4b1c      	ldr	r3, [pc, #112]	; (80064c8 <xTaskResumeAll+0x120>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d1cb      	bne.n	80063f4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d001      	beq.n	8006466 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006462:	f000 fb55 	bl	8006b10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006466:	4b1d      	ldr	r3, [pc, #116]	; (80064dc <xTaskResumeAll+0x134>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d010      	beq.n	8006494 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006472:	f000 f847 	bl	8006504 <xTaskIncrementTick>
 8006476:	4603      	mov	r3, r0
 8006478:	2b00      	cmp	r3, #0
 800647a:	d002      	beq.n	8006482 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800647c:	4b16      	ldr	r3, [pc, #88]	; (80064d8 <xTaskResumeAll+0x130>)
 800647e:	2201      	movs	r2, #1
 8006480:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	3b01      	subs	r3, #1
 8006486:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d1f1      	bne.n	8006472 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800648e:	4b13      	ldr	r3, [pc, #76]	; (80064dc <xTaskResumeAll+0x134>)
 8006490:	2200      	movs	r2, #0
 8006492:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006494:	4b10      	ldr	r3, [pc, #64]	; (80064d8 <xTaskResumeAll+0x130>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d009      	beq.n	80064b0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800649c:	2301      	movs	r3, #1
 800649e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80064a0:	4b0f      	ldr	r3, [pc, #60]	; (80064e0 <xTaskResumeAll+0x138>)
 80064a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064a6:	601a      	str	r2, [r3, #0]
 80064a8:	f3bf 8f4f 	dsb	sy
 80064ac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80064b0:	f001 f8d8 	bl	8007664 <vPortExitCritical>

	return xAlreadyYielded;
 80064b4:	68bb      	ldr	r3, [r7, #8]
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3710      	adds	r7, #16
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	20000c6c 	.word	0x20000c6c
 80064c4:	20000c44 	.word	0x20000c44
 80064c8:	20000c04 	.word	0x20000c04
 80064cc:	20000c4c 	.word	0x20000c4c
 80064d0:	20000774 	.word	0x20000774
 80064d4:	20000770 	.word	0x20000770
 80064d8:	20000c58 	.word	0x20000c58
 80064dc:	20000c54 	.word	0x20000c54
 80064e0:	e000ed04 	.word	0xe000ed04

080064e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80064ea:	4b05      	ldr	r3, [pc, #20]	; (8006500 <xTaskGetTickCount+0x1c>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80064f0:	687b      	ldr	r3, [r7, #4]
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	370c      	adds	r7, #12
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop
 8006500:	20000c48 	.word	0x20000c48

08006504 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b086      	sub	sp, #24
 8006508:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800650a:	2300      	movs	r3, #0
 800650c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800650e:	4b4f      	ldr	r3, [pc, #316]	; (800664c <xTaskIncrementTick+0x148>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	2b00      	cmp	r3, #0
 8006514:	f040 808f 	bne.w	8006636 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006518:	4b4d      	ldr	r3, [pc, #308]	; (8006650 <xTaskIncrementTick+0x14c>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	3301      	adds	r3, #1
 800651e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006520:	4a4b      	ldr	r2, [pc, #300]	; (8006650 <xTaskIncrementTick+0x14c>)
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d120      	bne.n	800656e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800652c:	4b49      	ldr	r3, [pc, #292]	; (8006654 <xTaskIncrementTick+0x150>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d00a      	beq.n	800654c <xTaskIncrementTick+0x48>
	__asm volatile
 8006536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800653a:	f383 8811 	msr	BASEPRI, r3
 800653e:	f3bf 8f6f 	isb	sy
 8006542:	f3bf 8f4f 	dsb	sy
 8006546:	603b      	str	r3, [r7, #0]
}
 8006548:	bf00      	nop
 800654a:	e7fe      	b.n	800654a <xTaskIncrementTick+0x46>
 800654c:	4b41      	ldr	r3, [pc, #260]	; (8006654 <xTaskIncrementTick+0x150>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	60fb      	str	r3, [r7, #12]
 8006552:	4b41      	ldr	r3, [pc, #260]	; (8006658 <xTaskIncrementTick+0x154>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a3f      	ldr	r2, [pc, #252]	; (8006654 <xTaskIncrementTick+0x150>)
 8006558:	6013      	str	r3, [r2, #0]
 800655a:	4a3f      	ldr	r2, [pc, #252]	; (8006658 <xTaskIncrementTick+0x154>)
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6013      	str	r3, [r2, #0]
 8006560:	4b3e      	ldr	r3, [pc, #248]	; (800665c <xTaskIncrementTick+0x158>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	3301      	adds	r3, #1
 8006566:	4a3d      	ldr	r2, [pc, #244]	; (800665c <xTaskIncrementTick+0x158>)
 8006568:	6013      	str	r3, [r2, #0]
 800656a:	f000 fad1 	bl	8006b10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800656e:	4b3c      	ldr	r3, [pc, #240]	; (8006660 <xTaskIncrementTick+0x15c>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	693a      	ldr	r2, [r7, #16]
 8006574:	429a      	cmp	r2, r3
 8006576:	d349      	bcc.n	800660c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006578:	4b36      	ldr	r3, [pc, #216]	; (8006654 <xTaskIncrementTick+0x150>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d104      	bne.n	800658c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006582:	4b37      	ldr	r3, [pc, #220]	; (8006660 <xTaskIncrementTick+0x15c>)
 8006584:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006588:	601a      	str	r2, [r3, #0]
					break;
 800658a:	e03f      	b.n	800660c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800658c:	4b31      	ldr	r3, [pc, #196]	; (8006654 <xTaskIncrementTick+0x150>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800659c:	693a      	ldr	r2, [r7, #16]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d203      	bcs.n	80065ac <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80065a4:	4a2e      	ldr	r2, [pc, #184]	; (8006660 <xTaskIncrementTick+0x15c>)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80065aa:	e02f      	b.n	800660c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	3304      	adds	r3, #4
 80065b0:	4618      	mov	r0, r3
 80065b2:	f7fe fedf 	bl	8005374 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d004      	beq.n	80065c8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	3318      	adds	r3, #24
 80065c2:	4618      	mov	r0, r3
 80065c4:	f7fe fed6 	bl	8005374 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065cc:	4b25      	ldr	r3, [pc, #148]	; (8006664 <xTaskIncrementTick+0x160>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d903      	bls.n	80065dc <xTaskIncrementTick+0xd8>
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d8:	4a22      	ldr	r2, [pc, #136]	; (8006664 <xTaskIncrementTick+0x160>)
 80065da:	6013      	str	r3, [r2, #0]
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065e0:	4613      	mov	r3, r2
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	4413      	add	r3, r2
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	4a1f      	ldr	r2, [pc, #124]	; (8006668 <xTaskIncrementTick+0x164>)
 80065ea:	441a      	add	r2, r3
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	3304      	adds	r3, #4
 80065f0:	4619      	mov	r1, r3
 80065f2:	4610      	mov	r0, r2
 80065f4:	f7fe fe61 	bl	80052ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065fc:	4b1b      	ldr	r3, [pc, #108]	; (800666c <xTaskIncrementTick+0x168>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006602:	429a      	cmp	r2, r3
 8006604:	d3b8      	bcc.n	8006578 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006606:	2301      	movs	r3, #1
 8006608:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800660a:	e7b5      	b.n	8006578 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800660c:	4b17      	ldr	r3, [pc, #92]	; (800666c <xTaskIncrementTick+0x168>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006612:	4915      	ldr	r1, [pc, #84]	; (8006668 <xTaskIncrementTick+0x164>)
 8006614:	4613      	mov	r3, r2
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	4413      	add	r3, r2
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	440b      	add	r3, r1
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2b01      	cmp	r3, #1
 8006622:	d901      	bls.n	8006628 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006624:	2301      	movs	r3, #1
 8006626:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006628:	4b11      	ldr	r3, [pc, #68]	; (8006670 <xTaskIncrementTick+0x16c>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d007      	beq.n	8006640 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006630:	2301      	movs	r3, #1
 8006632:	617b      	str	r3, [r7, #20]
 8006634:	e004      	b.n	8006640 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006636:	4b0f      	ldr	r3, [pc, #60]	; (8006674 <xTaskIncrementTick+0x170>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	3301      	adds	r3, #1
 800663c:	4a0d      	ldr	r2, [pc, #52]	; (8006674 <xTaskIncrementTick+0x170>)
 800663e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006640:	697b      	ldr	r3, [r7, #20]
}
 8006642:	4618      	mov	r0, r3
 8006644:	3718      	adds	r7, #24
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	20000c6c 	.word	0x20000c6c
 8006650:	20000c48 	.word	0x20000c48
 8006654:	20000bfc 	.word	0x20000bfc
 8006658:	20000c00 	.word	0x20000c00
 800665c:	20000c5c 	.word	0x20000c5c
 8006660:	20000c64 	.word	0x20000c64
 8006664:	20000c4c 	.word	0x20000c4c
 8006668:	20000774 	.word	0x20000774
 800666c:	20000770 	.word	0x20000770
 8006670:	20000c58 	.word	0x20000c58
 8006674:	20000c54 	.word	0x20000c54

08006678 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006678:	b480      	push	{r7}
 800667a:	b085      	sub	sp, #20
 800667c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800667e:	4b28      	ldr	r3, [pc, #160]	; (8006720 <vTaskSwitchContext+0xa8>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d003      	beq.n	800668e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006686:	4b27      	ldr	r3, [pc, #156]	; (8006724 <vTaskSwitchContext+0xac>)
 8006688:	2201      	movs	r2, #1
 800668a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800668c:	e041      	b.n	8006712 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800668e:	4b25      	ldr	r3, [pc, #148]	; (8006724 <vTaskSwitchContext+0xac>)
 8006690:	2200      	movs	r2, #0
 8006692:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006694:	4b24      	ldr	r3, [pc, #144]	; (8006728 <vTaskSwitchContext+0xb0>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	60fb      	str	r3, [r7, #12]
 800669a:	e010      	b.n	80066be <vTaskSwitchContext+0x46>
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d10a      	bne.n	80066b8 <vTaskSwitchContext+0x40>
	__asm volatile
 80066a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a6:	f383 8811 	msr	BASEPRI, r3
 80066aa:	f3bf 8f6f 	isb	sy
 80066ae:	f3bf 8f4f 	dsb	sy
 80066b2:	607b      	str	r3, [r7, #4]
}
 80066b4:	bf00      	nop
 80066b6:	e7fe      	b.n	80066b6 <vTaskSwitchContext+0x3e>
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	3b01      	subs	r3, #1
 80066bc:	60fb      	str	r3, [r7, #12]
 80066be:	491b      	ldr	r1, [pc, #108]	; (800672c <vTaskSwitchContext+0xb4>)
 80066c0:	68fa      	ldr	r2, [r7, #12]
 80066c2:	4613      	mov	r3, r2
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	4413      	add	r3, r2
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	440b      	add	r3, r1
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d0e4      	beq.n	800669c <vTaskSwitchContext+0x24>
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	4613      	mov	r3, r2
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	4413      	add	r3, r2
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	4a13      	ldr	r2, [pc, #76]	; (800672c <vTaskSwitchContext+0xb4>)
 80066de:	4413      	add	r3, r2
 80066e0:	60bb      	str	r3, [r7, #8]
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	685a      	ldr	r2, [r3, #4]
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	605a      	str	r2, [r3, #4]
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	685a      	ldr	r2, [r3, #4]
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	3308      	adds	r3, #8
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d104      	bne.n	8006702 <vTaskSwitchContext+0x8a>
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	685a      	ldr	r2, [r3, #4]
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	605a      	str	r2, [r3, #4]
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	4a09      	ldr	r2, [pc, #36]	; (8006730 <vTaskSwitchContext+0xb8>)
 800670a:	6013      	str	r3, [r2, #0]
 800670c:	4a06      	ldr	r2, [pc, #24]	; (8006728 <vTaskSwitchContext+0xb0>)
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6013      	str	r3, [r2, #0]
}
 8006712:	bf00      	nop
 8006714:	3714      	adds	r7, #20
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop
 8006720:	20000c6c 	.word	0x20000c6c
 8006724:	20000c58 	.word	0x20000c58
 8006728:	20000c4c 	.word	0x20000c4c
 800672c:	20000774 	.word	0x20000774
 8006730:	20000770 	.word	0x20000770

08006734 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d10a      	bne.n	800675a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006748:	f383 8811 	msr	BASEPRI, r3
 800674c:	f3bf 8f6f 	isb	sy
 8006750:	f3bf 8f4f 	dsb	sy
 8006754:	60fb      	str	r3, [r7, #12]
}
 8006756:	bf00      	nop
 8006758:	e7fe      	b.n	8006758 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800675a:	4b07      	ldr	r3, [pc, #28]	; (8006778 <vTaskPlaceOnEventList+0x44>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	3318      	adds	r3, #24
 8006760:	4619      	mov	r1, r3
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f7fe fdcd 	bl	8005302 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006768:	2101      	movs	r1, #1
 800676a:	6838      	ldr	r0, [r7, #0]
 800676c:	f000 fa7c 	bl	8006c68 <prvAddCurrentTaskToDelayedList>
}
 8006770:	bf00      	nop
 8006772:	3710      	adds	r7, #16
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	20000770 	.word	0x20000770

0800677c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800677c:	b580      	push	{r7, lr}
 800677e:	b086      	sub	sp, #24
 8006780:	af00      	add	r7, sp, #0
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	60b9      	str	r1, [r7, #8]
 8006786:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d10a      	bne.n	80067a4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800678e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006792:	f383 8811 	msr	BASEPRI, r3
 8006796:	f3bf 8f6f 	isb	sy
 800679a:	f3bf 8f4f 	dsb	sy
 800679e:	617b      	str	r3, [r7, #20]
}
 80067a0:	bf00      	nop
 80067a2:	e7fe      	b.n	80067a2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80067a4:	4b0a      	ldr	r3, [pc, #40]	; (80067d0 <vTaskPlaceOnEventListRestricted+0x54>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	3318      	adds	r3, #24
 80067aa:	4619      	mov	r1, r3
 80067ac:	68f8      	ldr	r0, [r7, #12]
 80067ae:	f7fe fd84 	bl	80052ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d002      	beq.n	80067be <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80067b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80067bc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80067be:	6879      	ldr	r1, [r7, #4]
 80067c0:	68b8      	ldr	r0, [r7, #8]
 80067c2:	f000 fa51 	bl	8006c68 <prvAddCurrentTaskToDelayedList>
	}
 80067c6:	bf00      	nop
 80067c8:	3718      	adds	r7, #24
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop
 80067d0:	20000770 	.word	0x20000770

080067d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b086      	sub	sp, #24
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	68db      	ldr	r3, [r3, #12]
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d10a      	bne.n	8006800 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80067ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ee:	f383 8811 	msr	BASEPRI, r3
 80067f2:	f3bf 8f6f 	isb	sy
 80067f6:	f3bf 8f4f 	dsb	sy
 80067fa:	60fb      	str	r3, [r7, #12]
}
 80067fc:	bf00      	nop
 80067fe:	e7fe      	b.n	80067fe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	3318      	adds	r3, #24
 8006804:	4618      	mov	r0, r3
 8006806:	f7fe fdb5 	bl	8005374 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800680a:	4b1e      	ldr	r3, [pc, #120]	; (8006884 <xTaskRemoveFromEventList+0xb0>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d11d      	bne.n	800684e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	3304      	adds	r3, #4
 8006816:	4618      	mov	r0, r3
 8006818:	f7fe fdac 	bl	8005374 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006820:	4b19      	ldr	r3, [pc, #100]	; (8006888 <xTaskRemoveFromEventList+0xb4>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	429a      	cmp	r2, r3
 8006826:	d903      	bls.n	8006830 <xTaskRemoveFromEventList+0x5c>
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800682c:	4a16      	ldr	r2, [pc, #88]	; (8006888 <xTaskRemoveFromEventList+0xb4>)
 800682e:	6013      	str	r3, [r2, #0]
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006834:	4613      	mov	r3, r2
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	4413      	add	r3, r2
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	4a13      	ldr	r2, [pc, #76]	; (800688c <xTaskRemoveFromEventList+0xb8>)
 800683e:	441a      	add	r2, r3
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	3304      	adds	r3, #4
 8006844:	4619      	mov	r1, r3
 8006846:	4610      	mov	r0, r2
 8006848:	f7fe fd37 	bl	80052ba <vListInsertEnd>
 800684c:	e005      	b.n	800685a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	3318      	adds	r3, #24
 8006852:	4619      	mov	r1, r3
 8006854:	480e      	ldr	r0, [pc, #56]	; (8006890 <xTaskRemoveFromEventList+0xbc>)
 8006856:	f7fe fd30 	bl	80052ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800685e:	4b0d      	ldr	r3, [pc, #52]	; (8006894 <xTaskRemoveFromEventList+0xc0>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006864:	429a      	cmp	r2, r3
 8006866:	d905      	bls.n	8006874 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006868:	2301      	movs	r3, #1
 800686a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800686c:	4b0a      	ldr	r3, [pc, #40]	; (8006898 <xTaskRemoveFromEventList+0xc4>)
 800686e:	2201      	movs	r2, #1
 8006870:	601a      	str	r2, [r3, #0]
 8006872:	e001      	b.n	8006878 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006874:	2300      	movs	r3, #0
 8006876:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006878:	697b      	ldr	r3, [r7, #20]
}
 800687a:	4618      	mov	r0, r3
 800687c:	3718      	adds	r7, #24
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	20000c6c 	.word	0x20000c6c
 8006888:	20000c4c 	.word	0x20000c4c
 800688c:	20000774 	.word	0x20000774
 8006890:	20000c04 	.word	0x20000c04
 8006894:	20000770 	.word	0x20000770
 8006898:	20000c58 	.word	0x20000c58

0800689c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80068a4:	4b06      	ldr	r3, [pc, #24]	; (80068c0 <vTaskInternalSetTimeOutState+0x24>)
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80068ac:	4b05      	ldr	r3, [pc, #20]	; (80068c4 <vTaskInternalSetTimeOutState+0x28>)
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	605a      	str	r2, [r3, #4]
}
 80068b4:	bf00      	nop
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr
 80068c0:	20000c5c 	.word	0x20000c5c
 80068c4:	20000c48 	.word	0x20000c48

080068c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b088      	sub	sp, #32
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d10a      	bne.n	80068ee <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80068d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068dc:	f383 8811 	msr	BASEPRI, r3
 80068e0:	f3bf 8f6f 	isb	sy
 80068e4:	f3bf 8f4f 	dsb	sy
 80068e8:	613b      	str	r3, [r7, #16]
}
 80068ea:	bf00      	nop
 80068ec:	e7fe      	b.n	80068ec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d10a      	bne.n	800690a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80068f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f8:	f383 8811 	msr	BASEPRI, r3
 80068fc:	f3bf 8f6f 	isb	sy
 8006900:	f3bf 8f4f 	dsb	sy
 8006904:	60fb      	str	r3, [r7, #12]
}
 8006906:	bf00      	nop
 8006908:	e7fe      	b.n	8006908 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800690a:	f000 fe7b 	bl	8007604 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800690e:	4b1d      	ldr	r3, [pc, #116]	; (8006984 <xTaskCheckForTimeOut+0xbc>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	69ba      	ldr	r2, [r7, #24]
 800691a:	1ad3      	subs	r3, r2, r3
 800691c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006926:	d102      	bne.n	800692e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006928:	2300      	movs	r3, #0
 800692a:	61fb      	str	r3, [r7, #28]
 800692c:	e023      	b.n	8006976 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	4b15      	ldr	r3, [pc, #84]	; (8006988 <xTaskCheckForTimeOut+0xc0>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	429a      	cmp	r2, r3
 8006938:	d007      	beq.n	800694a <xTaskCheckForTimeOut+0x82>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	69ba      	ldr	r2, [r7, #24]
 8006940:	429a      	cmp	r2, r3
 8006942:	d302      	bcc.n	800694a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006944:	2301      	movs	r3, #1
 8006946:	61fb      	str	r3, [r7, #28]
 8006948:	e015      	b.n	8006976 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	697a      	ldr	r2, [r7, #20]
 8006950:	429a      	cmp	r2, r3
 8006952:	d20b      	bcs.n	800696c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	1ad2      	subs	r2, r2, r3
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f7ff ff9b 	bl	800689c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006966:	2300      	movs	r3, #0
 8006968:	61fb      	str	r3, [r7, #28]
 800696a:	e004      	b.n	8006976 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	2200      	movs	r2, #0
 8006970:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006972:	2301      	movs	r3, #1
 8006974:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006976:	f000 fe75 	bl	8007664 <vPortExitCritical>

	return xReturn;
 800697a:	69fb      	ldr	r3, [r7, #28]
}
 800697c:	4618      	mov	r0, r3
 800697e:	3720      	adds	r7, #32
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}
 8006984:	20000c48 	.word	0x20000c48
 8006988:	20000c5c 	.word	0x20000c5c

0800698c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800698c:	b480      	push	{r7}
 800698e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006990:	4b03      	ldr	r3, [pc, #12]	; (80069a0 <vTaskMissedYield+0x14>)
 8006992:	2201      	movs	r2, #1
 8006994:	601a      	str	r2, [r3, #0]
}
 8006996:	bf00      	nop
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr
 80069a0:	20000c58 	.word	0x20000c58

080069a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b082      	sub	sp, #8
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80069ac:	f000 f852 	bl	8006a54 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80069b0:	4b06      	ldr	r3, [pc, #24]	; (80069cc <prvIdleTask+0x28>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d9f9      	bls.n	80069ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80069b8:	4b05      	ldr	r3, [pc, #20]	; (80069d0 <prvIdleTask+0x2c>)
 80069ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069be:	601a      	str	r2, [r3, #0]
 80069c0:	f3bf 8f4f 	dsb	sy
 80069c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80069c8:	e7f0      	b.n	80069ac <prvIdleTask+0x8>
 80069ca:	bf00      	nop
 80069cc:	20000774 	.word	0x20000774
 80069d0:	e000ed04 	.word	0xe000ed04

080069d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b082      	sub	sp, #8
 80069d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80069da:	2300      	movs	r3, #0
 80069dc:	607b      	str	r3, [r7, #4]
 80069de:	e00c      	b.n	80069fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	4613      	mov	r3, r2
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	4413      	add	r3, r2
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	4a12      	ldr	r2, [pc, #72]	; (8006a34 <prvInitialiseTaskLists+0x60>)
 80069ec:	4413      	add	r3, r2
 80069ee:	4618      	mov	r0, r3
 80069f0:	f7fe fc36 	bl	8005260 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	3301      	adds	r3, #1
 80069f8:	607b      	str	r3, [r7, #4]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2b37      	cmp	r3, #55	; 0x37
 80069fe:	d9ef      	bls.n	80069e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006a00:	480d      	ldr	r0, [pc, #52]	; (8006a38 <prvInitialiseTaskLists+0x64>)
 8006a02:	f7fe fc2d 	bl	8005260 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006a06:	480d      	ldr	r0, [pc, #52]	; (8006a3c <prvInitialiseTaskLists+0x68>)
 8006a08:	f7fe fc2a 	bl	8005260 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006a0c:	480c      	ldr	r0, [pc, #48]	; (8006a40 <prvInitialiseTaskLists+0x6c>)
 8006a0e:	f7fe fc27 	bl	8005260 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006a12:	480c      	ldr	r0, [pc, #48]	; (8006a44 <prvInitialiseTaskLists+0x70>)
 8006a14:	f7fe fc24 	bl	8005260 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006a18:	480b      	ldr	r0, [pc, #44]	; (8006a48 <prvInitialiseTaskLists+0x74>)
 8006a1a:	f7fe fc21 	bl	8005260 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006a1e:	4b0b      	ldr	r3, [pc, #44]	; (8006a4c <prvInitialiseTaskLists+0x78>)
 8006a20:	4a05      	ldr	r2, [pc, #20]	; (8006a38 <prvInitialiseTaskLists+0x64>)
 8006a22:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006a24:	4b0a      	ldr	r3, [pc, #40]	; (8006a50 <prvInitialiseTaskLists+0x7c>)
 8006a26:	4a05      	ldr	r2, [pc, #20]	; (8006a3c <prvInitialiseTaskLists+0x68>)
 8006a28:	601a      	str	r2, [r3, #0]
}
 8006a2a:	bf00      	nop
 8006a2c:	3708      	adds	r7, #8
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	bf00      	nop
 8006a34:	20000774 	.word	0x20000774
 8006a38:	20000bd4 	.word	0x20000bd4
 8006a3c:	20000be8 	.word	0x20000be8
 8006a40:	20000c04 	.word	0x20000c04
 8006a44:	20000c18 	.word	0x20000c18
 8006a48:	20000c30 	.word	0x20000c30
 8006a4c:	20000bfc 	.word	0x20000bfc
 8006a50:	20000c00 	.word	0x20000c00

08006a54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b082      	sub	sp, #8
 8006a58:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a5a:	e019      	b.n	8006a90 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006a5c:	f000 fdd2 	bl	8007604 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a60:	4b10      	ldr	r3, [pc, #64]	; (8006aa4 <prvCheckTasksWaitingTermination+0x50>)
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	3304      	adds	r3, #4
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f7fe fc81 	bl	8005374 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006a72:	4b0d      	ldr	r3, [pc, #52]	; (8006aa8 <prvCheckTasksWaitingTermination+0x54>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	3b01      	subs	r3, #1
 8006a78:	4a0b      	ldr	r2, [pc, #44]	; (8006aa8 <prvCheckTasksWaitingTermination+0x54>)
 8006a7a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006a7c:	4b0b      	ldr	r3, [pc, #44]	; (8006aac <prvCheckTasksWaitingTermination+0x58>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	3b01      	subs	r3, #1
 8006a82:	4a0a      	ldr	r2, [pc, #40]	; (8006aac <prvCheckTasksWaitingTermination+0x58>)
 8006a84:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006a86:	f000 fded 	bl	8007664 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 f810 	bl	8006ab0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a90:	4b06      	ldr	r3, [pc, #24]	; (8006aac <prvCheckTasksWaitingTermination+0x58>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d1e1      	bne.n	8006a5c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006a98:	bf00      	nop
 8006a9a:	bf00      	nop
 8006a9c:	3708      	adds	r7, #8
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
 8006aa2:	bf00      	nop
 8006aa4:	20000c18 	.word	0x20000c18
 8006aa8:	20000c44 	.word	0x20000c44
 8006aac:	20000c2c 	.word	0x20000c2c

08006ab0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d108      	bne.n	8006ad4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f000 ff8a 	bl	80079e0 <vPortFree>
				vPortFree( pxTCB );
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 ff87 	bl	80079e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006ad2:	e018      	b.n	8006b06 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d103      	bne.n	8006ae6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 ff7e 	bl	80079e0 <vPortFree>
	}
 8006ae4:	e00f      	b.n	8006b06 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006aec:	2b02      	cmp	r3, #2
 8006aee:	d00a      	beq.n	8006b06 <prvDeleteTCB+0x56>
	__asm volatile
 8006af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af4:	f383 8811 	msr	BASEPRI, r3
 8006af8:	f3bf 8f6f 	isb	sy
 8006afc:	f3bf 8f4f 	dsb	sy
 8006b00:	60fb      	str	r3, [r7, #12]
}
 8006b02:	bf00      	nop
 8006b04:	e7fe      	b.n	8006b04 <prvDeleteTCB+0x54>
	}
 8006b06:	bf00      	nop
 8006b08:	3710      	adds	r7, #16
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
	...

08006b10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b16:	4b0c      	ldr	r3, [pc, #48]	; (8006b48 <prvResetNextTaskUnblockTime+0x38>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d104      	bne.n	8006b2a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006b20:	4b0a      	ldr	r3, [pc, #40]	; (8006b4c <prvResetNextTaskUnblockTime+0x3c>)
 8006b22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b26:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006b28:	e008      	b.n	8006b3c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b2a:	4b07      	ldr	r3, [pc, #28]	; (8006b48 <prvResetNextTaskUnblockTime+0x38>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	4a04      	ldr	r2, [pc, #16]	; (8006b4c <prvResetNextTaskUnblockTime+0x3c>)
 8006b3a:	6013      	str	r3, [r2, #0]
}
 8006b3c:	bf00      	nop
 8006b3e:	370c      	adds	r7, #12
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr
 8006b48:	20000bfc 	.word	0x20000bfc
 8006b4c:	20000c64 	.word	0x20000c64

08006b50 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006b56:	4b0b      	ldr	r3, [pc, #44]	; (8006b84 <xTaskGetSchedulerState+0x34>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d102      	bne.n	8006b64 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	607b      	str	r3, [r7, #4]
 8006b62:	e008      	b.n	8006b76 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b64:	4b08      	ldr	r3, [pc, #32]	; (8006b88 <xTaskGetSchedulerState+0x38>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d102      	bne.n	8006b72 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006b6c:	2302      	movs	r3, #2
 8006b6e:	607b      	str	r3, [r7, #4]
 8006b70:	e001      	b.n	8006b76 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006b72:	2300      	movs	r3, #0
 8006b74:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006b76:	687b      	ldr	r3, [r7, #4]
	}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	370c      	adds	r7, #12
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr
 8006b84:	20000c50 	.word	0x20000c50
 8006b88:	20000c6c 	.word	0x20000c6c

08006b8c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b086      	sub	sp, #24
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d056      	beq.n	8006c50 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006ba2:	4b2e      	ldr	r3, [pc, #184]	; (8006c5c <xTaskPriorityDisinherit+0xd0>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	693a      	ldr	r2, [r7, #16]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d00a      	beq.n	8006bc2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb0:	f383 8811 	msr	BASEPRI, r3
 8006bb4:	f3bf 8f6f 	isb	sy
 8006bb8:	f3bf 8f4f 	dsb	sy
 8006bbc:	60fb      	str	r3, [r7, #12]
}
 8006bbe:	bf00      	nop
 8006bc0:	e7fe      	b.n	8006bc0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d10a      	bne.n	8006be0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bce:	f383 8811 	msr	BASEPRI, r3
 8006bd2:	f3bf 8f6f 	isb	sy
 8006bd6:	f3bf 8f4f 	dsb	sy
 8006bda:	60bb      	str	r3, [r7, #8]
}
 8006bdc:	bf00      	nop
 8006bde:	e7fe      	b.n	8006bde <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006be4:	1e5a      	subs	r2, r3, #1
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d02c      	beq.n	8006c50 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d128      	bne.n	8006c50 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	3304      	adds	r3, #4
 8006c02:	4618      	mov	r0, r3
 8006c04:	f7fe fbb6 	bl	8005374 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c14:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c20:	4b0f      	ldr	r3, [pc, #60]	; (8006c60 <xTaskPriorityDisinherit+0xd4>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d903      	bls.n	8006c30 <xTaskPriorityDisinherit+0xa4>
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c2c:	4a0c      	ldr	r2, [pc, #48]	; (8006c60 <xTaskPriorityDisinherit+0xd4>)
 8006c2e:	6013      	str	r3, [r2, #0]
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c34:	4613      	mov	r3, r2
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	4413      	add	r3, r2
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	4a09      	ldr	r2, [pc, #36]	; (8006c64 <xTaskPriorityDisinherit+0xd8>)
 8006c3e:	441a      	add	r2, r3
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	3304      	adds	r3, #4
 8006c44:	4619      	mov	r1, r3
 8006c46:	4610      	mov	r0, r2
 8006c48:	f7fe fb37 	bl	80052ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006c50:	697b      	ldr	r3, [r7, #20]
	}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3718      	adds	r7, #24
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	20000770 	.word	0x20000770
 8006c60:	20000c4c 	.word	0x20000c4c
 8006c64:	20000774 	.word	0x20000774

08006c68 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006c72:	4b21      	ldr	r3, [pc, #132]	; (8006cf8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c78:	4b20      	ldr	r3, [pc, #128]	; (8006cfc <prvAddCurrentTaskToDelayedList+0x94>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	3304      	adds	r3, #4
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f7fe fb78 	bl	8005374 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c8a:	d10a      	bne.n	8006ca2 <prvAddCurrentTaskToDelayedList+0x3a>
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d007      	beq.n	8006ca2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c92:	4b1a      	ldr	r3, [pc, #104]	; (8006cfc <prvAddCurrentTaskToDelayedList+0x94>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	3304      	adds	r3, #4
 8006c98:	4619      	mov	r1, r3
 8006c9a:	4819      	ldr	r0, [pc, #100]	; (8006d00 <prvAddCurrentTaskToDelayedList+0x98>)
 8006c9c:	f7fe fb0d 	bl	80052ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006ca0:	e026      	b.n	8006cf0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006ca2:	68fa      	ldr	r2, [r7, #12]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006caa:	4b14      	ldr	r3, [pc, #80]	; (8006cfc <prvAddCurrentTaskToDelayedList+0x94>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	68ba      	ldr	r2, [r7, #8]
 8006cb0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006cb2:	68ba      	ldr	r2, [r7, #8]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d209      	bcs.n	8006cce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cba:	4b12      	ldr	r3, [pc, #72]	; (8006d04 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	4b0f      	ldr	r3, [pc, #60]	; (8006cfc <prvAddCurrentTaskToDelayedList+0x94>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	3304      	adds	r3, #4
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	4610      	mov	r0, r2
 8006cc8:	f7fe fb1b 	bl	8005302 <vListInsert>
}
 8006ccc:	e010      	b.n	8006cf0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cce:	4b0e      	ldr	r3, [pc, #56]	; (8006d08 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	4b0a      	ldr	r3, [pc, #40]	; (8006cfc <prvAddCurrentTaskToDelayedList+0x94>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	3304      	adds	r3, #4
 8006cd8:	4619      	mov	r1, r3
 8006cda:	4610      	mov	r0, r2
 8006cdc:	f7fe fb11 	bl	8005302 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006ce0:	4b0a      	ldr	r3, [pc, #40]	; (8006d0c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	68ba      	ldr	r2, [r7, #8]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d202      	bcs.n	8006cf0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006cea:	4a08      	ldr	r2, [pc, #32]	; (8006d0c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	6013      	str	r3, [r2, #0]
}
 8006cf0:	bf00      	nop
 8006cf2:	3710      	adds	r7, #16
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	20000c48 	.word	0x20000c48
 8006cfc:	20000770 	.word	0x20000770
 8006d00:	20000c30 	.word	0x20000c30
 8006d04:	20000c00 	.word	0x20000c00
 8006d08:	20000bfc 	.word	0x20000bfc
 8006d0c:	20000c64 	.word	0x20000c64

08006d10 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b08a      	sub	sp, #40	; 0x28
 8006d14:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006d16:	2300      	movs	r3, #0
 8006d18:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006d1a:	f000 fb07 	bl	800732c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006d1e:	4b1c      	ldr	r3, [pc, #112]	; (8006d90 <xTimerCreateTimerTask+0x80>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d021      	beq.n	8006d6a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006d26:	2300      	movs	r3, #0
 8006d28:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006d2e:	1d3a      	adds	r2, r7, #4
 8006d30:	f107 0108 	add.w	r1, r7, #8
 8006d34:	f107 030c 	add.w	r3, r7, #12
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f7fe fa77 	bl	800522c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006d3e:	6879      	ldr	r1, [r7, #4]
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	68fa      	ldr	r2, [r7, #12]
 8006d44:	9202      	str	r2, [sp, #8]
 8006d46:	9301      	str	r3, [sp, #4]
 8006d48:	2302      	movs	r3, #2
 8006d4a:	9300      	str	r3, [sp, #0]
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	460a      	mov	r2, r1
 8006d50:	4910      	ldr	r1, [pc, #64]	; (8006d94 <xTimerCreateTimerTask+0x84>)
 8006d52:	4811      	ldr	r0, [pc, #68]	; (8006d98 <xTimerCreateTimerTask+0x88>)
 8006d54:	f7ff f8de 	bl	8005f14 <xTaskCreateStatic>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	4a10      	ldr	r2, [pc, #64]	; (8006d9c <xTimerCreateTimerTask+0x8c>)
 8006d5c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006d5e:	4b0f      	ldr	r3, [pc, #60]	; (8006d9c <xTimerCreateTimerTask+0x8c>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d001      	beq.n	8006d6a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006d66:	2301      	movs	r3, #1
 8006d68:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d10a      	bne.n	8006d86 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d74:	f383 8811 	msr	BASEPRI, r3
 8006d78:	f3bf 8f6f 	isb	sy
 8006d7c:	f3bf 8f4f 	dsb	sy
 8006d80:	613b      	str	r3, [r7, #16]
}
 8006d82:	bf00      	nop
 8006d84:	e7fe      	b.n	8006d84 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006d86:	697b      	ldr	r3, [r7, #20]
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3718      	adds	r7, #24
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}
 8006d90:	20000ca0 	.word	0x20000ca0
 8006d94:	08008c90 	.word	0x08008c90
 8006d98:	08006ed5 	.word	0x08006ed5
 8006d9c:	20000ca4 	.word	0x20000ca4

08006da0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b08a      	sub	sp, #40	; 0x28
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	60f8      	str	r0, [r7, #12]
 8006da8:	60b9      	str	r1, [r7, #8]
 8006daa:	607a      	str	r2, [r7, #4]
 8006dac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006dae:	2300      	movs	r3, #0
 8006db0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d10a      	bne.n	8006dce <xTimerGenericCommand+0x2e>
	__asm volatile
 8006db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dbc:	f383 8811 	msr	BASEPRI, r3
 8006dc0:	f3bf 8f6f 	isb	sy
 8006dc4:	f3bf 8f4f 	dsb	sy
 8006dc8:	623b      	str	r3, [r7, #32]
}
 8006dca:	bf00      	nop
 8006dcc:	e7fe      	b.n	8006dcc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006dce:	4b1a      	ldr	r3, [pc, #104]	; (8006e38 <xTimerGenericCommand+0x98>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d02a      	beq.n	8006e2c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	2b05      	cmp	r3, #5
 8006de6:	dc18      	bgt.n	8006e1a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006de8:	f7ff feb2 	bl	8006b50 <xTaskGetSchedulerState>
 8006dec:	4603      	mov	r3, r0
 8006dee:	2b02      	cmp	r3, #2
 8006df0:	d109      	bne.n	8006e06 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006df2:	4b11      	ldr	r3, [pc, #68]	; (8006e38 <xTimerGenericCommand+0x98>)
 8006df4:	6818      	ldr	r0, [r3, #0]
 8006df6:	f107 0110 	add.w	r1, r7, #16
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dfe:	f7fe fc21 	bl	8005644 <xQueueGenericSend>
 8006e02:	6278      	str	r0, [r7, #36]	; 0x24
 8006e04:	e012      	b.n	8006e2c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006e06:	4b0c      	ldr	r3, [pc, #48]	; (8006e38 <xTimerGenericCommand+0x98>)
 8006e08:	6818      	ldr	r0, [r3, #0]
 8006e0a:	f107 0110 	add.w	r1, r7, #16
 8006e0e:	2300      	movs	r3, #0
 8006e10:	2200      	movs	r2, #0
 8006e12:	f7fe fc17 	bl	8005644 <xQueueGenericSend>
 8006e16:	6278      	str	r0, [r7, #36]	; 0x24
 8006e18:	e008      	b.n	8006e2c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006e1a:	4b07      	ldr	r3, [pc, #28]	; (8006e38 <xTimerGenericCommand+0x98>)
 8006e1c:	6818      	ldr	r0, [r3, #0]
 8006e1e:	f107 0110 	add.w	r1, r7, #16
 8006e22:	2300      	movs	r3, #0
 8006e24:	683a      	ldr	r2, [r7, #0]
 8006e26:	f7fe fd0b 	bl	8005840 <xQueueGenericSendFromISR>
 8006e2a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3728      	adds	r7, #40	; 0x28
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	20000ca0 	.word	0x20000ca0

08006e3c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b088      	sub	sp, #32
 8006e40:	af02      	add	r7, sp, #8
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e46:	4b22      	ldr	r3, [pc, #136]	; (8006ed0 <prvProcessExpiredTimer+0x94>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	3304      	adds	r3, #4
 8006e54:	4618      	mov	r0, r3
 8006e56:	f7fe fa8d 	bl	8005374 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e60:	f003 0304 	and.w	r3, r3, #4
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d022      	beq.n	8006eae <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	699a      	ldr	r2, [r3, #24]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	18d1      	adds	r1, r2, r3
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	683a      	ldr	r2, [r7, #0]
 8006e74:	6978      	ldr	r0, [r7, #20]
 8006e76:	f000 f8d1 	bl	800701c <prvInsertTimerInActiveList>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d01f      	beq.n	8006ec0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e80:	2300      	movs	r3, #0
 8006e82:	9300      	str	r3, [sp, #0]
 8006e84:	2300      	movs	r3, #0
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	2100      	movs	r1, #0
 8006e8a:	6978      	ldr	r0, [r7, #20]
 8006e8c:	f7ff ff88 	bl	8006da0 <xTimerGenericCommand>
 8006e90:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d113      	bne.n	8006ec0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e9c:	f383 8811 	msr	BASEPRI, r3
 8006ea0:	f3bf 8f6f 	isb	sy
 8006ea4:	f3bf 8f4f 	dsb	sy
 8006ea8:	60fb      	str	r3, [r7, #12]
}
 8006eaa:	bf00      	nop
 8006eac:	e7fe      	b.n	8006eac <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006eb4:	f023 0301 	bic.w	r3, r3, #1
 8006eb8:	b2da      	uxtb	r2, r3
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	6a1b      	ldr	r3, [r3, #32]
 8006ec4:	6978      	ldr	r0, [r7, #20]
 8006ec6:	4798      	blx	r3
}
 8006ec8:	bf00      	nop
 8006eca:	3718      	adds	r7, #24
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}
 8006ed0:	20000c98 	.word	0x20000c98

08006ed4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006edc:	f107 0308 	add.w	r3, r7, #8
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f000 f857 	bl	8006f94 <prvGetNextExpireTime>
 8006ee6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	4619      	mov	r1, r3
 8006eec:	68f8      	ldr	r0, [r7, #12]
 8006eee:	f000 f803 	bl	8006ef8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006ef2:	f000 f8d5 	bl	80070a0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ef6:	e7f1      	b.n	8006edc <prvTimerTask+0x8>

08006ef8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b084      	sub	sp, #16
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006f02:	f7ff fa43 	bl	800638c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f06:	f107 0308 	add.w	r3, r7, #8
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f000 f866 	bl	8006fdc <prvSampleTimeNow>
 8006f10:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d130      	bne.n	8006f7a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d10a      	bne.n	8006f34 <prvProcessTimerOrBlockTask+0x3c>
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d806      	bhi.n	8006f34 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006f26:	f7ff fa3f 	bl	80063a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006f2a:	68f9      	ldr	r1, [r7, #12]
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f7ff ff85 	bl	8006e3c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006f32:	e024      	b.n	8006f7e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d008      	beq.n	8006f4c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006f3a:	4b13      	ldr	r3, [pc, #76]	; (8006f88 <prvProcessTimerOrBlockTask+0x90>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d101      	bne.n	8006f48 <prvProcessTimerOrBlockTask+0x50>
 8006f44:	2301      	movs	r3, #1
 8006f46:	e000      	b.n	8006f4a <prvProcessTimerOrBlockTask+0x52>
 8006f48:	2300      	movs	r3, #0
 8006f4a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006f4c:	4b0f      	ldr	r3, [pc, #60]	; (8006f8c <prvProcessTimerOrBlockTask+0x94>)
 8006f4e:	6818      	ldr	r0, [r3, #0]
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	1ad3      	subs	r3, r2, r3
 8006f56:	683a      	ldr	r2, [r7, #0]
 8006f58:	4619      	mov	r1, r3
 8006f5a:	f7fe ffa7 	bl	8005eac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006f5e:	f7ff fa23 	bl	80063a8 <xTaskResumeAll>
 8006f62:	4603      	mov	r3, r0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d10a      	bne.n	8006f7e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006f68:	4b09      	ldr	r3, [pc, #36]	; (8006f90 <prvProcessTimerOrBlockTask+0x98>)
 8006f6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f6e:	601a      	str	r2, [r3, #0]
 8006f70:	f3bf 8f4f 	dsb	sy
 8006f74:	f3bf 8f6f 	isb	sy
}
 8006f78:	e001      	b.n	8006f7e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006f7a:	f7ff fa15 	bl	80063a8 <xTaskResumeAll>
}
 8006f7e:	bf00      	nop
 8006f80:	3710      	adds	r7, #16
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	20000c9c 	.word	0x20000c9c
 8006f8c:	20000ca0 	.word	0x20000ca0
 8006f90:	e000ed04 	.word	0xe000ed04

08006f94 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006f94:	b480      	push	{r7}
 8006f96:	b085      	sub	sp, #20
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006f9c:	4b0e      	ldr	r3, [pc, #56]	; (8006fd8 <prvGetNextExpireTime+0x44>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d101      	bne.n	8006faa <prvGetNextExpireTime+0x16>
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	e000      	b.n	8006fac <prvGetNextExpireTime+0x18>
 8006faa:	2200      	movs	r2, #0
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d105      	bne.n	8006fc4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006fb8:	4b07      	ldr	r3, [pc, #28]	; (8006fd8 <prvGetNextExpireTime+0x44>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	60fb      	str	r3, [r7, #12]
 8006fc2:	e001      	b.n	8006fc8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3714      	adds	r7, #20
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr
 8006fd6:	bf00      	nop
 8006fd8:	20000c98 	.word	0x20000c98

08006fdc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b084      	sub	sp, #16
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006fe4:	f7ff fa7e 	bl	80064e4 <xTaskGetTickCount>
 8006fe8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006fea:	4b0b      	ldr	r3, [pc, #44]	; (8007018 <prvSampleTimeNow+0x3c>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	68fa      	ldr	r2, [r7, #12]
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d205      	bcs.n	8007000 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006ff4:	f000 f936 	bl	8007264 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	601a      	str	r2, [r3, #0]
 8006ffe:	e002      	b.n	8007006 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007006:	4a04      	ldr	r2, [pc, #16]	; (8007018 <prvSampleTimeNow+0x3c>)
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800700c:	68fb      	ldr	r3, [r7, #12]
}
 800700e:	4618      	mov	r0, r3
 8007010:	3710      	adds	r7, #16
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop
 8007018:	20000ca8 	.word	0x20000ca8

0800701c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b086      	sub	sp, #24
 8007020:	af00      	add	r7, sp, #0
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	607a      	str	r2, [r7, #4]
 8007028:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800702a:	2300      	movs	r3, #0
 800702c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	68ba      	ldr	r2, [r7, #8]
 8007032:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	68fa      	ldr	r2, [r7, #12]
 8007038:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800703a:	68ba      	ldr	r2, [r7, #8]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	429a      	cmp	r2, r3
 8007040:	d812      	bhi.n	8007068 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	1ad2      	subs	r2, r2, r3
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	699b      	ldr	r3, [r3, #24]
 800704c:	429a      	cmp	r2, r3
 800704e:	d302      	bcc.n	8007056 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007050:	2301      	movs	r3, #1
 8007052:	617b      	str	r3, [r7, #20]
 8007054:	e01b      	b.n	800708e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007056:	4b10      	ldr	r3, [pc, #64]	; (8007098 <prvInsertTimerInActiveList+0x7c>)
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	3304      	adds	r3, #4
 800705e:	4619      	mov	r1, r3
 8007060:	4610      	mov	r0, r2
 8007062:	f7fe f94e 	bl	8005302 <vListInsert>
 8007066:	e012      	b.n	800708e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	429a      	cmp	r2, r3
 800706e:	d206      	bcs.n	800707e <prvInsertTimerInActiveList+0x62>
 8007070:	68ba      	ldr	r2, [r7, #8]
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	429a      	cmp	r2, r3
 8007076:	d302      	bcc.n	800707e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007078:	2301      	movs	r3, #1
 800707a:	617b      	str	r3, [r7, #20]
 800707c:	e007      	b.n	800708e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800707e:	4b07      	ldr	r3, [pc, #28]	; (800709c <prvInsertTimerInActiveList+0x80>)
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	3304      	adds	r3, #4
 8007086:	4619      	mov	r1, r3
 8007088:	4610      	mov	r0, r2
 800708a:	f7fe f93a 	bl	8005302 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800708e:	697b      	ldr	r3, [r7, #20]
}
 8007090:	4618      	mov	r0, r3
 8007092:	3718      	adds	r7, #24
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}
 8007098:	20000c9c 	.word	0x20000c9c
 800709c:	20000c98 	.word	0x20000c98

080070a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b08e      	sub	sp, #56	; 0x38
 80070a4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80070a6:	e0ca      	b.n	800723e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	da18      	bge.n	80070e0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80070ae:	1d3b      	adds	r3, r7, #4
 80070b0:	3304      	adds	r3, #4
 80070b2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80070b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d10a      	bne.n	80070d0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80070ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070be:	f383 8811 	msr	BASEPRI, r3
 80070c2:	f3bf 8f6f 	isb	sy
 80070c6:	f3bf 8f4f 	dsb	sy
 80070ca:	61fb      	str	r3, [r7, #28]
}
 80070cc:	bf00      	nop
 80070ce:	e7fe      	b.n	80070ce <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80070d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070d6:	6850      	ldr	r0, [r2, #4]
 80070d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070da:	6892      	ldr	r2, [r2, #8]
 80070dc:	4611      	mov	r1, r2
 80070de:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	f2c0 80aa 	blt.w	800723c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80070ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ee:	695b      	ldr	r3, [r3, #20]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d004      	beq.n	80070fe <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80070f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f6:	3304      	adds	r3, #4
 80070f8:	4618      	mov	r0, r3
 80070fa:	f7fe f93b 	bl	8005374 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80070fe:	463b      	mov	r3, r7
 8007100:	4618      	mov	r0, r3
 8007102:	f7ff ff6b 	bl	8006fdc <prvSampleTimeNow>
 8007106:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2b09      	cmp	r3, #9
 800710c:	f200 8097 	bhi.w	800723e <prvProcessReceivedCommands+0x19e>
 8007110:	a201      	add	r2, pc, #4	; (adr r2, 8007118 <prvProcessReceivedCommands+0x78>)
 8007112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007116:	bf00      	nop
 8007118:	08007141 	.word	0x08007141
 800711c:	08007141 	.word	0x08007141
 8007120:	08007141 	.word	0x08007141
 8007124:	080071b5 	.word	0x080071b5
 8007128:	080071c9 	.word	0x080071c9
 800712c:	08007213 	.word	0x08007213
 8007130:	08007141 	.word	0x08007141
 8007134:	08007141 	.word	0x08007141
 8007138:	080071b5 	.word	0x080071b5
 800713c:	080071c9 	.word	0x080071c9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007142:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007146:	f043 0301 	orr.w	r3, r3, #1
 800714a:	b2da      	uxtb	r2, r3
 800714c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800714e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007152:	68ba      	ldr	r2, [r7, #8]
 8007154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007156:	699b      	ldr	r3, [r3, #24]
 8007158:	18d1      	adds	r1, r2, r3
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800715e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007160:	f7ff ff5c 	bl	800701c <prvInsertTimerInActiveList>
 8007164:	4603      	mov	r3, r0
 8007166:	2b00      	cmp	r3, #0
 8007168:	d069      	beq.n	800723e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800716a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800716c:	6a1b      	ldr	r3, [r3, #32]
 800716e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007170:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007174:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007178:	f003 0304 	and.w	r3, r3, #4
 800717c:	2b00      	cmp	r3, #0
 800717e:	d05e      	beq.n	800723e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007180:	68ba      	ldr	r2, [r7, #8]
 8007182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007184:	699b      	ldr	r3, [r3, #24]
 8007186:	441a      	add	r2, r3
 8007188:	2300      	movs	r3, #0
 800718a:	9300      	str	r3, [sp, #0]
 800718c:	2300      	movs	r3, #0
 800718e:	2100      	movs	r1, #0
 8007190:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007192:	f7ff fe05 	bl	8006da0 <xTimerGenericCommand>
 8007196:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007198:	6a3b      	ldr	r3, [r7, #32]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d14f      	bne.n	800723e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800719e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a2:	f383 8811 	msr	BASEPRI, r3
 80071a6:	f3bf 8f6f 	isb	sy
 80071aa:	f3bf 8f4f 	dsb	sy
 80071ae:	61bb      	str	r3, [r7, #24]
}
 80071b0:	bf00      	nop
 80071b2:	e7fe      	b.n	80071b2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80071b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071ba:	f023 0301 	bic.w	r3, r3, #1
 80071be:	b2da      	uxtb	r2, r3
 80071c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80071c6:	e03a      	b.n	800723e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80071c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071ce:	f043 0301 	orr.w	r3, r3, #1
 80071d2:	b2da      	uxtb	r2, r3
 80071d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80071da:	68ba      	ldr	r2, [r7, #8]
 80071dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071de:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80071e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e2:	699b      	ldr	r3, [r3, #24]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d10a      	bne.n	80071fe <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80071e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ec:	f383 8811 	msr	BASEPRI, r3
 80071f0:	f3bf 8f6f 	isb	sy
 80071f4:	f3bf 8f4f 	dsb	sy
 80071f8:	617b      	str	r3, [r7, #20]
}
 80071fa:	bf00      	nop
 80071fc:	e7fe      	b.n	80071fc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80071fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007200:	699a      	ldr	r2, [r3, #24]
 8007202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007204:	18d1      	adds	r1, r2, r3
 8007206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800720a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800720c:	f7ff ff06 	bl	800701c <prvInsertTimerInActiveList>
					break;
 8007210:	e015      	b.n	800723e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007214:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007218:	f003 0302 	and.w	r3, r3, #2
 800721c:	2b00      	cmp	r3, #0
 800721e:	d103      	bne.n	8007228 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007220:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007222:	f000 fbdd 	bl	80079e0 <vPortFree>
 8007226:	e00a      	b.n	800723e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800722a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800722e:	f023 0301 	bic.w	r3, r3, #1
 8007232:	b2da      	uxtb	r2, r3
 8007234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007236:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800723a:	e000      	b.n	800723e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800723c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800723e:	4b08      	ldr	r3, [pc, #32]	; (8007260 <prvProcessReceivedCommands+0x1c0>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	1d39      	adds	r1, r7, #4
 8007244:	2200      	movs	r2, #0
 8007246:	4618      	mov	r0, r3
 8007248:	f7fe fb96 	bl	8005978 <xQueueReceive>
 800724c:	4603      	mov	r3, r0
 800724e:	2b00      	cmp	r3, #0
 8007250:	f47f af2a 	bne.w	80070a8 <prvProcessReceivedCommands+0x8>
	}
}
 8007254:	bf00      	nop
 8007256:	bf00      	nop
 8007258:	3730      	adds	r7, #48	; 0x30
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop
 8007260:	20000ca0 	.word	0x20000ca0

08007264 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b088      	sub	sp, #32
 8007268:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800726a:	e048      	b.n	80072fe <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800726c:	4b2d      	ldr	r3, [pc, #180]	; (8007324 <prvSwitchTimerLists+0xc0>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007276:	4b2b      	ldr	r3, [pc, #172]	; (8007324 <prvSwitchTimerLists+0xc0>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	68db      	ldr	r3, [r3, #12]
 800727e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	3304      	adds	r3, #4
 8007284:	4618      	mov	r0, r3
 8007286:	f7fe f875 	bl	8005374 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6a1b      	ldr	r3, [r3, #32]
 800728e:	68f8      	ldr	r0, [r7, #12]
 8007290:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007298:	f003 0304 	and.w	r3, r3, #4
 800729c:	2b00      	cmp	r3, #0
 800729e:	d02e      	beq.n	80072fe <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	699b      	ldr	r3, [r3, #24]
 80072a4:	693a      	ldr	r2, [r7, #16]
 80072a6:	4413      	add	r3, r2
 80072a8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80072aa:	68ba      	ldr	r2, [r7, #8]
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d90e      	bls.n	80072d0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	68ba      	ldr	r2, [r7, #8]
 80072b6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	68fa      	ldr	r2, [r7, #12]
 80072bc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80072be:	4b19      	ldr	r3, [pc, #100]	; (8007324 <prvSwitchTimerLists+0xc0>)
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	3304      	adds	r3, #4
 80072c6:	4619      	mov	r1, r3
 80072c8:	4610      	mov	r0, r2
 80072ca:	f7fe f81a 	bl	8005302 <vListInsert>
 80072ce:	e016      	b.n	80072fe <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80072d0:	2300      	movs	r3, #0
 80072d2:	9300      	str	r3, [sp, #0]
 80072d4:	2300      	movs	r3, #0
 80072d6:	693a      	ldr	r2, [r7, #16]
 80072d8:	2100      	movs	r1, #0
 80072da:	68f8      	ldr	r0, [r7, #12]
 80072dc:	f7ff fd60 	bl	8006da0 <xTimerGenericCommand>
 80072e0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d10a      	bne.n	80072fe <prvSwitchTimerLists+0x9a>
	__asm volatile
 80072e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ec:	f383 8811 	msr	BASEPRI, r3
 80072f0:	f3bf 8f6f 	isb	sy
 80072f4:	f3bf 8f4f 	dsb	sy
 80072f8:	603b      	str	r3, [r7, #0]
}
 80072fa:	bf00      	nop
 80072fc:	e7fe      	b.n	80072fc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80072fe:	4b09      	ldr	r3, [pc, #36]	; (8007324 <prvSwitchTimerLists+0xc0>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d1b1      	bne.n	800726c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007308:	4b06      	ldr	r3, [pc, #24]	; (8007324 <prvSwitchTimerLists+0xc0>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800730e:	4b06      	ldr	r3, [pc, #24]	; (8007328 <prvSwitchTimerLists+0xc4>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a04      	ldr	r2, [pc, #16]	; (8007324 <prvSwitchTimerLists+0xc0>)
 8007314:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007316:	4a04      	ldr	r2, [pc, #16]	; (8007328 <prvSwitchTimerLists+0xc4>)
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	6013      	str	r3, [r2, #0]
}
 800731c:	bf00      	nop
 800731e:	3718      	adds	r7, #24
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}
 8007324:	20000c98 	.word	0x20000c98
 8007328:	20000c9c 	.word	0x20000c9c

0800732c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b082      	sub	sp, #8
 8007330:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007332:	f000 f967 	bl	8007604 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007336:	4b15      	ldr	r3, [pc, #84]	; (800738c <prvCheckForValidListAndQueue+0x60>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d120      	bne.n	8007380 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800733e:	4814      	ldr	r0, [pc, #80]	; (8007390 <prvCheckForValidListAndQueue+0x64>)
 8007340:	f7fd ff8e 	bl	8005260 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007344:	4813      	ldr	r0, [pc, #76]	; (8007394 <prvCheckForValidListAndQueue+0x68>)
 8007346:	f7fd ff8b 	bl	8005260 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800734a:	4b13      	ldr	r3, [pc, #76]	; (8007398 <prvCheckForValidListAndQueue+0x6c>)
 800734c:	4a10      	ldr	r2, [pc, #64]	; (8007390 <prvCheckForValidListAndQueue+0x64>)
 800734e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007350:	4b12      	ldr	r3, [pc, #72]	; (800739c <prvCheckForValidListAndQueue+0x70>)
 8007352:	4a10      	ldr	r2, [pc, #64]	; (8007394 <prvCheckForValidListAndQueue+0x68>)
 8007354:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007356:	2300      	movs	r3, #0
 8007358:	9300      	str	r3, [sp, #0]
 800735a:	4b11      	ldr	r3, [pc, #68]	; (80073a0 <prvCheckForValidListAndQueue+0x74>)
 800735c:	4a11      	ldr	r2, [pc, #68]	; (80073a4 <prvCheckForValidListAndQueue+0x78>)
 800735e:	2110      	movs	r1, #16
 8007360:	200a      	movs	r0, #10
 8007362:	f7fe f899 	bl	8005498 <xQueueGenericCreateStatic>
 8007366:	4603      	mov	r3, r0
 8007368:	4a08      	ldr	r2, [pc, #32]	; (800738c <prvCheckForValidListAndQueue+0x60>)
 800736a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800736c:	4b07      	ldr	r3, [pc, #28]	; (800738c <prvCheckForValidListAndQueue+0x60>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d005      	beq.n	8007380 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007374:	4b05      	ldr	r3, [pc, #20]	; (800738c <prvCheckForValidListAndQueue+0x60>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	490b      	ldr	r1, [pc, #44]	; (80073a8 <prvCheckForValidListAndQueue+0x7c>)
 800737a:	4618      	mov	r0, r3
 800737c:	f7fe fd6c 	bl	8005e58 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007380:	f000 f970 	bl	8007664 <vPortExitCritical>
}
 8007384:	bf00      	nop
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
 800738a:	bf00      	nop
 800738c:	20000ca0 	.word	0x20000ca0
 8007390:	20000c70 	.word	0x20000c70
 8007394:	20000c84 	.word	0x20000c84
 8007398:	20000c98 	.word	0x20000c98
 800739c:	20000c9c 	.word	0x20000c9c
 80073a0:	20000d4c 	.word	0x20000d4c
 80073a4:	20000cac 	.word	0x20000cac
 80073a8:	08008c98 	.word	0x08008c98

080073ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80073ac:	b480      	push	{r7}
 80073ae:	b085      	sub	sp, #20
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	3b04      	subs	r3, #4
 80073bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80073c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	3b04      	subs	r3, #4
 80073ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	f023 0201 	bic.w	r2, r3, #1
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	3b04      	subs	r3, #4
 80073da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80073dc:	4a0c      	ldr	r2, [pc, #48]	; (8007410 <pxPortInitialiseStack+0x64>)
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	3b14      	subs	r3, #20
 80073e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	3b04      	subs	r3, #4
 80073f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f06f 0202 	mvn.w	r2, #2
 80073fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	3b20      	subs	r3, #32
 8007400:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007402:	68fb      	ldr	r3, [r7, #12]
}
 8007404:	4618      	mov	r0, r3
 8007406:	3714      	adds	r7, #20
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr
 8007410:	08007415 	.word	0x08007415

08007414 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007414:	b480      	push	{r7}
 8007416:	b085      	sub	sp, #20
 8007418:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800741a:	2300      	movs	r3, #0
 800741c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800741e:	4b12      	ldr	r3, [pc, #72]	; (8007468 <prvTaskExitError+0x54>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007426:	d00a      	beq.n	800743e <prvTaskExitError+0x2a>
	__asm volatile
 8007428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742c:	f383 8811 	msr	BASEPRI, r3
 8007430:	f3bf 8f6f 	isb	sy
 8007434:	f3bf 8f4f 	dsb	sy
 8007438:	60fb      	str	r3, [r7, #12]
}
 800743a:	bf00      	nop
 800743c:	e7fe      	b.n	800743c <prvTaskExitError+0x28>
	__asm volatile
 800743e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007442:	f383 8811 	msr	BASEPRI, r3
 8007446:	f3bf 8f6f 	isb	sy
 800744a:	f3bf 8f4f 	dsb	sy
 800744e:	60bb      	str	r3, [r7, #8]
}
 8007450:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007452:	bf00      	nop
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d0fc      	beq.n	8007454 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800745a:	bf00      	nop
 800745c:	bf00      	nop
 800745e:	3714      	adds	r7, #20
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr
 8007468:	20000010 	.word	0x20000010
 800746c:	00000000 	.word	0x00000000

08007470 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007470:	4b07      	ldr	r3, [pc, #28]	; (8007490 <pxCurrentTCBConst2>)
 8007472:	6819      	ldr	r1, [r3, #0]
 8007474:	6808      	ldr	r0, [r1, #0]
 8007476:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800747a:	f380 8809 	msr	PSP, r0
 800747e:	f3bf 8f6f 	isb	sy
 8007482:	f04f 0000 	mov.w	r0, #0
 8007486:	f380 8811 	msr	BASEPRI, r0
 800748a:	4770      	bx	lr
 800748c:	f3af 8000 	nop.w

08007490 <pxCurrentTCBConst2>:
 8007490:	20000770 	.word	0x20000770
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007494:	bf00      	nop
 8007496:	bf00      	nop

08007498 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007498:	4808      	ldr	r0, [pc, #32]	; (80074bc <prvPortStartFirstTask+0x24>)
 800749a:	6800      	ldr	r0, [r0, #0]
 800749c:	6800      	ldr	r0, [r0, #0]
 800749e:	f380 8808 	msr	MSP, r0
 80074a2:	f04f 0000 	mov.w	r0, #0
 80074a6:	f380 8814 	msr	CONTROL, r0
 80074aa:	b662      	cpsie	i
 80074ac:	b661      	cpsie	f
 80074ae:	f3bf 8f4f 	dsb	sy
 80074b2:	f3bf 8f6f 	isb	sy
 80074b6:	df00      	svc	0
 80074b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80074ba:	bf00      	nop
 80074bc:	e000ed08 	.word	0xe000ed08

080074c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b086      	sub	sp, #24
 80074c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80074c6:	4b46      	ldr	r3, [pc, #280]	; (80075e0 <xPortStartScheduler+0x120>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a46      	ldr	r2, [pc, #280]	; (80075e4 <xPortStartScheduler+0x124>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d10a      	bne.n	80074e6 <xPortStartScheduler+0x26>
	__asm volatile
 80074d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d4:	f383 8811 	msr	BASEPRI, r3
 80074d8:	f3bf 8f6f 	isb	sy
 80074dc:	f3bf 8f4f 	dsb	sy
 80074e0:	613b      	str	r3, [r7, #16]
}
 80074e2:	bf00      	nop
 80074e4:	e7fe      	b.n	80074e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80074e6:	4b3e      	ldr	r3, [pc, #248]	; (80075e0 <xPortStartScheduler+0x120>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a3f      	ldr	r2, [pc, #252]	; (80075e8 <xPortStartScheduler+0x128>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d10a      	bne.n	8007506 <xPortStartScheduler+0x46>
	__asm volatile
 80074f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f4:	f383 8811 	msr	BASEPRI, r3
 80074f8:	f3bf 8f6f 	isb	sy
 80074fc:	f3bf 8f4f 	dsb	sy
 8007500:	60fb      	str	r3, [r7, #12]
}
 8007502:	bf00      	nop
 8007504:	e7fe      	b.n	8007504 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007506:	4b39      	ldr	r3, [pc, #228]	; (80075ec <xPortStartScheduler+0x12c>)
 8007508:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	b2db      	uxtb	r3, r3
 8007510:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	22ff      	movs	r2, #255	; 0xff
 8007516:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	b2db      	uxtb	r3, r3
 800751e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007520:	78fb      	ldrb	r3, [r7, #3]
 8007522:	b2db      	uxtb	r3, r3
 8007524:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007528:	b2da      	uxtb	r2, r3
 800752a:	4b31      	ldr	r3, [pc, #196]	; (80075f0 <xPortStartScheduler+0x130>)
 800752c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800752e:	4b31      	ldr	r3, [pc, #196]	; (80075f4 <xPortStartScheduler+0x134>)
 8007530:	2207      	movs	r2, #7
 8007532:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007534:	e009      	b.n	800754a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007536:	4b2f      	ldr	r3, [pc, #188]	; (80075f4 <xPortStartScheduler+0x134>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	3b01      	subs	r3, #1
 800753c:	4a2d      	ldr	r2, [pc, #180]	; (80075f4 <xPortStartScheduler+0x134>)
 800753e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007540:	78fb      	ldrb	r3, [r7, #3]
 8007542:	b2db      	uxtb	r3, r3
 8007544:	005b      	lsls	r3, r3, #1
 8007546:	b2db      	uxtb	r3, r3
 8007548:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800754a:	78fb      	ldrb	r3, [r7, #3]
 800754c:	b2db      	uxtb	r3, r3
 800754e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007552:	2b80      	cmp	r3, #128	; 0x80
 8007554:	d0ef      	beq.n	8007536 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007556:	4b27      	ldr	r3, [pc, #156]	; (80075f4 <xPortStartScheduler+0x134>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f1c3 0307 	rsb	r3, r3, #7
 800755e:	2b04      	cmp	r3, #4
 8007560:	d00a      	beq.n	8007578 <xPortStartScheduler+0xb8>
	__asm volatile
 8007562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007566:	f383 8811 	msr	BASEPRI, r3
 800756a:	f3bf 8f6f 	isb	sy
 800756e:	f3bf 8f4f 	dsb	sy
 8007572:	60bb      	str	r3, [r7, #8]
}
 8007574:	bf00      	nop
 8007576:	e7fe      	b.n	8007576 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007578:	4b1e      	ldr	r3, [pc, #120]	; (80075f4 <xPortStartScheduler+0x134>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	021b      	lsls	r3, r3, #8
 800757e:	4a1d      	ldr	r2, [pc, #116]	; (80075f4 <xPortStartScheduler+0x134>)
 8007580:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007582:	4b1c      	ldr	r3, [pc, #112]	; (80075f4 <xPortStartScheduler+0x134>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800758a:	4a1a      	ldr	r2, [pc, #104]	; (80075f4 <xPortStartScheduler+0x134>)
 800758c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	b2da      	uxtb	r2, r3
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007596:	4b18      	ldr	r3, [pc, #96]	; (80075f8 <xPortStartScheduler+0x138>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a17      	ldr	r2, [pc, #92]	; (80075f8 <xPortStartScheduler+0x138>)
 800759c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80075a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80075a2:	4b15      	ldr	r3, [pc, #84]	; (80075f8 <xPortStartScheduler+0x138>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a14      	ldr	r2, [pc, #80]	; (80075f8 <xPortStartScheduler+0x138>)
 80075a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80075ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80075ae:	f000 f8dd 	bl	800776c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80075b2:	4b12      	ldr	r3, [pc, #72]	; (80075fc <xPortStartScheduler+0x13c>)
 80075b4:	2200      	movs	r2, #0
 80075b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80075b8:	f000 f8fc 	bl	80077b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80075bc:	4b10      	ldr	r3, [pc, #64]	; (8007600 <xPortStartScheduler+0x140>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a0f      	ldr	r2, [pc, #60]	; (8007600 <xPortStartScheduler+0x140>)
 80075c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80075c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80075c8:	f7ff ff66 	bl	8007498 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80075cc:	f7ff f854 	bl	8006678 <vTaskSwitchContext>
	prvTaskExitError();
 80075d0:	f7ff ff20 	bl	8007414 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80075d4:	2300      	movs	r3, #0
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3718      	adds	r7, #24
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	e000ed00 	.word	0xe000ed00
 80075e4:	410fc271 	.word	0x410fc271
 80075e8:	410fc270 	.word	0x410fc270
 80075ec:	e000e400 	.word	0xe000e400
 80075f0:	20000d9c 	.word	0x20000d9c
 80075f4:	20000da0 	.word	0x20000da0
 80075f8:	e000ed20 	.word	0xe000ed20
 80075fc:	20000010 	.word	0x20000010
 8007600:	e000ef34 	.word	0xe000ef34

08007604 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
	__asm volatile
 800760a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800760e:	f383 8811 	msr	BASEPRI, r3
 8007612:	f3bf 8f6f 	isb	sy
 8007616:	f3bf 8f4f 	dsb	sy
 800761a:	607b      	str	r3, [r7, #4]
}
 800761c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800761e:	4b0f      	ldr	r3, [pc, #60]	; (800765c <vPortEnterCritical+0x58>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	3301      	adds	r3, #1
 8007624:	4a0d      	ldr	r2, [pc, #52]	; (800765c <vPortEnterCritical+0x58>)
 8007626:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007628:	4b0c      	ldr	r3, [pc, #48]	; (800765c <vPortEnterCritical+0x58>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	2b01      	cmp	r3, #1
 800762e:	d10f      	bne.n	8007650 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007630:	4b0b      	ldr	r3, [pc, #44]	; (8007660 <vPortEnterCritical+0x5c>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	b2db      	uxtb	r3, r3
 8007636:	2b00      	cmp	r3, #0
 8007638:	d00a      	beq.n	8007650 <vPortEnterCritical+0x4c>
	__asm volatile
 800763a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800763e:	f383 8811 	msr	BASEPRI, r3
 8007642:	f3bf 8f6f 	isb	sy
 8007646:	f3bf 8f4f 	dsb	sy
 800764a:	603b      	str	r3, [r7, #0]
}
 800764c:	bf00      	nop
 800764e:	e7fe      	b.n	800764e <vPortEnterCritical+0x4a>
	}
}
 8007650:	bf00      	nop
 8007652:	370c      	adds	r7, #12
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr
 800765c:	20000010 	.word	0x20000010
 8007660:	e000ed04 	.word	0xe000ed04

08007664 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007664:	b480      	push	{r7}
 8007666:	b083      	sub	sp, #12
 8007668:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800766a:	4b12      	ldr	r3, [pc, #72]	; (80076b4 <vPortExitCritical+0x50>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d10a      	bne.n	8007688 <vPortExitCritical+0x24>
	__asm volatile
 8007672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007676:	f383 8811 	msr	BASEPRI, r3
 800767a:	f3bf 8f6f 	isb	sy
 800767e:	f3bf 8f4f 	dsb	sy
 8007682:	607b      	str	r3, [r7, #4]
}
 8007684:	bf00      	nop
 8007686:	e7fe      	b.n	8007686 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007688:	4b0a      	ldr	r3, [pc, #40]	; (80076b4 <vPortExitCritical+0x50>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	3b01      	subs	r3, #1
 800768e:	4a09      	ldr	r2, [pc, #36]	; (80076b4 <vPortExitCritical+0x50>)
 8007690:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007692:	4b08      	ldr	r3, [pc, #32]	; (80076b4 <vPortExitCritical+0x50>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d105      	bne.n	80076a6 <vPortExitCritical+0x42>
 800769a:	2300      	movs	r3, #0
 800769c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	f383 8811 	msr	BASEPRI, r3
}
 80076a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80076a6:	bf00      	nop
 80076a8:	370c      	adds	r7, #12
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr
 80076b2:	bf00      	nop
 80076b4:	20000010 	.word	0x20000010
	...

080076c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80076c0:	f3ef 8009 	mrs	r0, PSP
 80076c4:	f3bf 8f6f 	isb	sy
 80076c8:	4b15      	ldr	r3, [pc, #84]	; (8007720 <pxCurrentTCBConst>)
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	f01e 0f10 	tst.w	lr, #16
 80076d0:	bf08      	it	eq
 80076d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80076d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076da:	6010      	str	r0, [r2, #0]
 80076dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80076e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80076e4:	f380 8811 	msr	BASEPRI, r0
 80076e8:	f3bf 8f4f 	dsb	sy
 80076ec:	f3bf 8f6f 	isb	sy
 80076f0:	f7fe ffc2 	bl	8006678 <vTaskSwitchContext>
 80076f4:	f04f 0000 	mov.w	r0, #0
 80076f8:	f380 8811 	msr	BASEPRI, r0
 80076fc:	bc09      	pop	{r0, r3}
 80076fe:	6819      	ldr	r1, [r3, #0]
 8007700:	6808      	ldr	r0, [r1, #0]
 8007702:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007706:	f01e 0f10 	tst.w	lr, #16
 800770a:	bf08      	it	eq
 800770c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007710:	f380 8809 	msr	PSP, r0
 8007714:	f3bf 8f6f 	isb	sy
 8007718:	4770      	bx	lr
 800771a:	bf00      	nop
 800771c:	f3af 8000 	nop.w

08007720 <pxCurrentTCBConst>:
 8007720:	20000770 	.word	0x20000770
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007724:	bf00      	nop
 8007726:	bf00      	nop

08007728 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b082      	sub	sp, #8
 800772c:	af00      	add	r7, sp, #0
	__asm volatile
 800772e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007732:	f383 8811 	msr	BASEPRI, r3
 8007736:	f3bf 8f6f 	isb	sy
 800773a:	f3bf 8f4f 	dsb	sy
 800773e:	607b      	str	r3, [r7, #4]
}
 8007740:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007742:	f7fe fedf 	bl	8006504 <xTaskIncrementTick>
 8007746:	4603      	mov	r3, r0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d003      	beq.n	8007754 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800774c:	4b06      	ldr	r3, [pc, #24]	; (8007768 <xPortSysTickHandler+0x40>)
 800774e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007752:	601a      	str	r2, [r3, #0]
 8007754:	2300      	movs	r3, #0
 8007756:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	f383 8811 	msr	BASEPRI, r3
}
 800775e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007760:	bf00      	nop
 8007762:	3708      	adds	r7, #8
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}
 8007768:	e000ed04 	.word	0xe000ed04

0800776c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800776c:	b480      	push	{r7}
 800776e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007770:	4b0b      	ldr	r3, [pc, #44]	; (80077a0 <vPortSetupTimerInterrupt+0x34>)
 8007772:	2200      	movs	r2, #0
 8007774:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007776:	4b0b      	ldr	r3, [pc, #44]	; (80077a4 <vPortSetupTimerInterrupt+0x38>)
 8007778:	2200      	movs	r2, #0
 800777a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800777c:	4b0a      	ldr	r3, [pc, #40]	; (80077a8 <vPortSetupTimerInterrupt+0x3c>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a0a      	ldr	r2, [pc, #40]	; (80077ac <vPortSetupTimerInterrupt+0x40>)
 8007782:	fba2 2303 	umull	r2, r3, r2, r3
 8007786:	099b      	lsrs	r3, r3, #6
 8007788:	4a09      	ldr	r2, [pc, #36]	; (80077b0 <vPortSetupTimerInterrupt+0x44>)
 800778a:	3b01      	subs	r3, #1
 800778c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800778e:	4b04      	ldr	r3, [pc, #16]	; (80077a0 <vPortSetupTimerInterrupt+0x34>)
 8007790:	2207      	movs	r2, #7
 8007792:	601a      	str	r2, [r3, #0]
}
 8007794:	bf00      	nop
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr
 800779e:	bf00      	nop
 80077a0:	e000e010 	.word	0xe000e010
 80077a4:	e000e018 	.word	0xe000e018
 80077a8:	20000004 	.word	0x20000004
 80077ac:	10624dd3 	.word	0x10624dd3
 80077b0:	e000e014 	.word	0xe000e014

080077b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80077b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80077c4 <vPortEnableVFP+0x10>
 80077b8:	6801      	ldr	r1, [r0, #0]
 80077ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80077be:	6001      	str	r1, [r0, #0]
 80077c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80077c2:	bf00      	nop
 80077c4:	e000ed88 	.word	0xe000ed88

080077c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80077c8:	b480      	push	{r7}
 80077ca:	b085      	sub	sp, #20
 80077cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80077ce:	f3ef 8305 	mrs	r3, IPSR
 80077d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2b0f      	cmp	r3, #15
 80077d8:	d914      	bls.n	8007804 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80077da:	4a17      	ldr	r2, [pc, #92]	; (8007838 <vPortValidateInterruptPriority+0x70>)
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	4413      	add	r3, r2
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80077e4:	4b15      	ldr	r3, [pc, #84]	; (800783c <vPortValidateInterruptPriority+0x74>)
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	7afa      	ldrb	r2, [r7, #11]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d20a      	bcs.n	8007804 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80077ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f2:	f383 8811 	msr	BASEPRI, r3
 80077f6:	f3bf 8f6f 	isb	sy
 80077fa:	f3bf 8f4f 	dsb	sy
 80077fe:	607b      	str	r3, [r7, #4]
}
 8007800:	bf00      	nop
 8007802:	e7fe      	b.n	8007802 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007804:	4b0e      	ldr	r3, [pc, #56]	; (8007840 <vPortValidateInterruptPriority+0x78>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800780c:	4b0d      	ldr	r3, [pc, #52]	; (8007844 <vPortValidateInterruptPriority+0x7c>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	429a      	cmp	r2, r3
 8007812:	d90a      	bls.n	800782a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007818:	f383 8811 	msr	BASEPRI, r3
 800781c:	f3bf 8f6f 	isb	sy
 8007820:	f3bf 8f4f 	dsb	sy
 8007824:	603b      	str	r3, [r7, #0]
}
 8007826:	bf00      	nop
 8007828:	e7fe      	b.n	8007828 <vPortValidateInterruptPriority+0x60>
	}
 800782a:	bf00      	nop
 800782c:	3714      	adds	r7, #20
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr
 8007836:	bf00      	nop
 8007838:	e000e3f0 	.word	0xe000e3f0
 800783c:	20000d9c 	.word	0x20000d9c
 8007840:	e000ed0c 	.word	0xe000ed0c
 8007844:	20000da0 	.word	0x20000da0

08007848 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b08a      	sub	sp, #40	; 0x28
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007850:	2300      	movs	r3, #0
 8007852:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007854:	f7fe fd9a 	bl	800638c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007858:	4b5b      	ldr	r3, [pc, #364]	; (80079c8 <pvPortMalloc+0x180>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d101      	bne.n	8007864 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007860:	f000 f920 	bl	8007aa4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007864:	4b59      	ldr	r3, [pc, #356]	; (80079cc <pvPortMalloc+0x184>)
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	4013      	ands	r3, r2
 800786c:	2b00      	cmp	r3, #0
 800786e:	f040 8093 	bne.w	8007998 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d01d      	beq.n	80078b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007878:	2208      	movs	r2, #8
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	4413      	add	r3, r2
 800787e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f003 0307 	and.w	r3, r3, #7
 8007886:	2b00      	cmp	r3, #0
 8007888:	d014      	beq.n	80078b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f023 0307 	bic.w	r3, r3, #7
 8007890:	3308      	adds	r3, #8
 8007892:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f003 0307 	and.w	r3, r3, #7
 800789a:	2b00      	cmp	r3, #0
 800789c:	d00a      	beq.n	80078b4 <pvPortMalloc+0x6c>
	__asm volatile
 800789e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a2:	f383 8811 	msr	BASEPRI, r3
 80078a6:	f3bf 8f6f 	isb	sy
 80078aa:	f3bf 8f4f 	dsb	sy
 80078ae:	617b      	str	r3, [r7, #20]
}
 80078b0:	bf00      	nop
 80078b2:	e7fe      	b.n	80078b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d06e      	beq.n	8007998 <pvPortMalloc+0x150>
 80078ba:	4b45      	ldr	r3, [pc, #276]	; (80079d0 <pvPortMalloc+0x188>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	687a      	ldr	r2, [r7, #4]
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d869      	bhi.n	8007998 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80078c4:	4b43      	ldr	r3, [pc, #268]	; (80079d4 <pvPortMalloc+0x18c>)
 80078c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80078c8:	4b42      	ldr	r3, [pc, #264]	; (80079d4 <pvPortMalloc+0x18c>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80078ce:	e004      	b.n	80078da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80078d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80078d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80078da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d903      	bls.n	80078ec <pvPortMalloc+0xa4>
 80078e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d1f1      	bne.n	80078d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80078ec:	4b36      	ldr	r3, [pc, #216]	; (80079c8 <pvPortMalloc+0x180>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d050      	beq.n	8007998 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80078f6:	6a3b      	ldr	r3, [r7, #32]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	2208      	movs	r2, #8
 80078fc:	4413      	add	r3, r2
 80078fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007902:	681a      	ldr	r2, [r3, #0]
 8007904:	6a3b      	ldr	r3, [r7, #32]
 8007906:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790a:	685a      	ldr	r2, [r3, #4]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	1ad2      	subs	r2, r2, r3
 8007910:	2308      	movs	r3, #8
 8007912:	005b      	lsls	r3, r3, #1
 8007914:	429a      	cmp	r2, r3
 8007916:	d91f      	bls.n	8007958 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	4413      	add	r3, r2
 800791e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007920:	69bb      	ldr	r3, [r7, #24]
 8007922:	f003 0307 	and.w	r3, r3, #7
 8007926:	2b00      	cmp	r3, #0
 8007928:	d00a      	beq.n	8007940 <pvPortMalloc+0xf8>
	__asm volatile
 800792a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800792e:	f383 8811 	msr	BASEPRI, r3
 8007932:	f3bf 8f6f 	isb	sy
 8007936:	f3bf 8f4f 	dsb	sy
 800793a:	613b      	str	r3, [r7, #16]
}
 800793c:	bf00      	nop
 800793e:	e7fe      	b.n	800793e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007942:	685a      	ldr	r2, [r3, #4]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	1ad2      	subs	r2, r2, r3
 8007948:	69bb      	ldr	r3, [r7, #24]
 800794a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800794c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794e:	687a      	ldr	r2, [r7, #4]
 8007950:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007952:	69b8      	ldr	r0, [r7, #24]
 8007954:	f000 f908 	bl	8007b68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007958:	4b1d      	ldr	r3, [pc, #116]	; (80079d0 <pvPortMalloc+0x188>)
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	1ad3      	subs	r3, r2, r3
 8007962:	4a1b      	ldr	r2, [pc, #108]	; (80079d0 <pvPortMalloc+0x188>)
 8007964:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007966:	4b1a      	ldr	r3, [pc, #104]	; (80079d0 <pvPortMalloc+0x188>)
 8007968:	681a      	ldr	r2, [r3, #0]
 800796a:	4b1b      	ldr	r3, [pc, #108]	; (80079d8 <pvPortMalloc+0x190>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	429a      	cmp	r2, r3
 8007970:	d203      	bcs.n	800797a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007972:	4b17      	ldr	r3, [pc, #92]	; (80079d0 <pvPortMalloc+0x188>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a18      	ldr	r2, [pc, #96]	; (80079d8 <pvPortMalloc+0x190>)
 8007978:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800797a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797c:	685a      	ldr	r2, [r3, #4]
 800797e:	4b13      	ldr	r3, [pc, #76]	; (80079cc <pvPortMalloc+0x184>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	431a      	orrs	r2, r3
 8007984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007986:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798a:	2200      	movs	r2, #0
 800798c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800798e:	4b13      	ldr	r3, [pc, #76]	; (80079dc <pvPortMalloc+0x194>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	3301      	adds	r3, #1
 8007994:	4a11      	ldr	r2, [pc, #68]	; (80079dc <pvPortMalloc+0x194>)
 8007996:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007998:	f7fe fd06 	bl	80063a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800799c:	69fb      	ldr	r3, [r7, #28]
 800799e:	f003 0307 	and.w	r3, r3, #7
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d00a      	beq.n	80079bc <pvPortMalloc+0x174>
	__asm volatile
 80079a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079aa:	f383 8811 	msr	BASEPRI, r3
 80079ae:	f3bf 8f6f 	isb	sy
 80079b2:	f3bf 8f4f 	dsb	sy
 80079b6:	60fb      	str	r3, [r7, #12]
}
 80079b8:	bf00      	nop
 80079ba:	e7fe      	b.n	80079ba <pvPortMalloc+0x172>
	return pvReturn;
 80079bc:	69fb      	ldr	r3, [r7, #28]
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3728      	adds	r7, #40	; 0x28
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop
 80079c8:	200045ac 	.word	0x200045ac
 80079cc:	200045c0 	.word	0x200045c0
 80079d0:	200045b0 	.word	0x200045b0
 80079d4:	200045a4 	.word	0x200045a4
 80079d8:	200045b4 	.word	0x200045b4
 80079dc:	200045b8 	.word	0x200045b8

080079e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b086      	sub	sp, #24
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d04d      	beq.n	8007a8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80079f2:	2308      	movs	r3, #8
 80079f4:	425b      	negs	r3, r3
 80079f6:	697a      	ldr	r2, [r7, #20]
 80079f8:	4413      	add	r3, r2
 80079fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	685a      	ldr	r2, [r3, #4]
 8007a04:	4b24      	ldr	r3, [pc, #144]	; (8007a98 <vPortFree+0xb8>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4013      	ands	r3, r2
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d10a      	bne.n	8007a24 <vPortFree+0x44>
	__asm volatile
 8007a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a12:	f383 8811 	msr	BASEPRI, r3
 8007a16:	f3bf 8f6f 	isb	sy
 8007a1a:	f3bf 8f4f 	dsb	sy
 8007a1e:	60fb      	str	r3, [r7, #12]
}
 8007a20:	bf00      	nop
 8007a22:	e7fe      	b.n	8007a22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d00a      	beq.n	8007a42 <vPortFree+0x62>
	__asm volatile
 8007a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a30:	f383 8811 	msr	BASEPRI, r3
 8007a34:	f3bf 8f6f 	isb	sy
 8007a38:	f3bf 8f4f 	dsb	sy
 8007a3c:	60bb      	str	r3, [r7, #8]
}
 8007a3e:	bf00      	nop
 8007a40:	e7fe      	b.n	8007a40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	685a      	ldr	r2, [r3, #4]
 8007a46:	4b14      	ldr	r3, [pc, #80]	; (8007a98 <vPortFree+0xb8>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4013      	ands	r3, r2
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d01e      	beq.n	8007a8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d11a      	bne.n	8007a8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	685a      	ldr	r2, [r3, #4]
 8007a5c:	4b0e      	ldr	r3, [pc, #56]	; (8007a98 <vPortFree+0xb8>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	43db      	mvns	r3, r3
 8007a62:	401a      	ands	r2, r3
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007a68:	f7fe fc90 	bl	800638c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	685a      	ldr	r2, [r3, #4]
 8007a70:	4b0a      	ldr	r3, [pc, #40]	; (8007a9c <vPortFree+0xbc>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4413      	add	r3, r2
 8007a76:	4a09      	ldr	r2, [pc, #36]	; (8007a9c <vPortFree+0xbc>)
 8007a78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007a7a:	6938      	ldr	r0, [r7, #16]
 8007a7c:	f000 f874 	bl	8007b68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007a80:	4b07      	ldr	r3, [pc, #28]	; (8007aa0 <vPortFree+0xc0>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	3301      	adds	r3, #1
 8007a86:	4a06      	ldr	r2, [pc, #24]	; (8007aa0 <vPortFree+0xc0>)
 8007a88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007a8a:	f7fe fc8d 	bl	80063a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007a8e:	bf00      	nop
 8007a90:	3718      	adds	r7, #24
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
 8007a96:	bf00      	nop
 8007a98:	200045c0 	.word	0x200045c0
 8007a9c:	200045b0 	.word	0x200045b0
 8007aa0:	200045bc 	.word	0x200045bc

08007aa4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b085      	sub	sp, #20
 8007aa8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007aaa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007aae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007ab0:	4b27      	ldr	r3, [pc, #156]	; (8007b50 <prvHeapInit+0xac>)
 8007ab2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f003 0307 	and.w	r3, r3, #7
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d00c      	beq.n	8007ad8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	3307      	adds	r3, #7
 8007ac2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f023 0307 	bic.w	r3, r3, #7
 8007aca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007acc:	68ba      	ldr	r2, [r7, #8]
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	1ad3      	subs	r3, r2, r3
 8007ad2:	4a1f      	ldr	r2, [pc, #124]	; (8007b50 <prvHeapInit+0xac>)
 8007ad4:	4413      	add	r3, r2
 8007ad6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007adc:	4a1d      	ldr	r2, [pc, #116]	; (8007b54 <prvHeapInit+0xb0>)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007ae2:	4b1c      	ldr	r3, [pc, #112]	; (8007b54 <prvHeapInit+0xb0>)
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	68ba      	ldr	r2, [r7, #8]
 8007aec:	4413      	add	r3, r2
 8007aee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007af0:	2208      	movs	r2, #8
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	1a9b      	subs	r3, r3, r2
 8007af6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f023 0307 	bic.w	r3, r3, #7
 8007afe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	4a15      	ldr	r2, [pc, #84]	; (8007b58 <prvHeapInit+0xb4>)
 8007b04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007b06:	4b14      	ldr	r3, [pc, #80]	; (8007b58 <prvHeapInit+0xb4>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007b0e:	4b12      	ldr	r3, [pc, #72]	; (8007b58 <prvHeapInit+0xb4>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	2200      	movs	r2, #0
 8007b14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	68fa      	ldr	r2, [r7, #12]
 8007b1e:	1ad2      	subs	r2, r2, r3
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007b24:	4b0c      	ldr	r3, [pc, #48]	; (8007b58 <prvHeapInit+0xb4>)
 8007b26:	681a      	ldr	r2, [r3, #0]
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	4a0a      	ldr	r2, [pc, #40]	; (8007b5c <prvHeapInit+0xb8>)
 8007b32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	4a09      	ldr	r2, [pc, #36]	; (8007b60 <prvHeapInit+0xbc>)
 8007b3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007b3c:	4b09      	ldr	r3, [pc, #36]	; (8007b64 <prvHeapInit+0xc0>)
 8007b3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007b42:	601a      	str	r2, [r3, #0]
}
 8007b44:	bf00      	nop
 8007b46:	3714      	adds	r7, #20
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr
 8007b50:	20000da4 	.word	0x20000da4
 8007b54:	200045a4 	.word	0x200045a4
 8007b58:	200045ac 	.word	0x200045ac
 8007b5c:	200045b4 	.word	0x200045b4
 8007b60:	200045b0 	.word	0x200045b0
 8007b64:	200045c0 	.word	0x200045c0

08007b68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b085      	sub	sp, #20
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007b70:	4b28      	ldr	r3, [pc, #160]	; (8007c14 <prvInsertBlockIntoFreeList+0xac>)
 8007b72:	60fb      	str	r3, [r7, #12]
 8007b74:	e002      	b.n	8007b7c <prvInsertBlockIntoFreeList+0x14>
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	60fb      	str	r3, [r7, #12]
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	687a      	ldr	r2, [r7, #4]
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d8f7      	bhi.n	8007b76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	68ba      	ldr	r2, [r7, #8]
 8007b90:	4413      	add	r3, r2
 8007b92:	687a      	ldr	r2, [r7, #4]
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d108      	bne.n	8007baa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	685a      	ldr	r2, [r3, #4]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	441a      	add	r2, r3
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	68ba      	ldr	r2, [r7, #8]
 8007bb4:	441a      	add	r2, r3
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d118      	bne.n	8007bf0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	4b15      	ldr	r3, [pc, #84]	; (8007c18 <prvInsertBlockIntoFreeList+0xb0>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	d00d      	beq.n	8007be6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	685a      	ldr	r2, [r3, #4]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	441a      	add	r2, r3
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	601a      	str	r2, [r3, #0]
 8007be4:	e008      	b.n	8007bf8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007be6:	4b0c      	ldr	r3, [pc, #48]	; (8007c18 <prvInsertBlockIntoFreeList+0xb0>)
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	601a      	str	r2, [r3, #0]
 8007bee:	e003      	b.n	8007bf8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007bf8:	68fa      	ldr	r2, [r7, #12]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d002      	beq.n	8007c06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c06:	bf00      	nop
 8007c08:	3714      	adds	r7, #20
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr
 8007c12:	bf00      	nop
 8007c14:	200045a4 	.word	0x200045a4
 8007c18:	200045ac 	.word	0x200045ac

08007c1c <__errno>:
 8007c1c:	4b01      	ldr	r3, [pc, #4]	; (8007c24 <__errno+0x8>)
 8007c1e:	6818      	ldr	r0, [r3, #0]
 8007c20:	4770      	bx	lr
 8007c22:	bf00      	nop
 8007c24:	20000014 	.word	0x20000014

08007c28 <__libc_init_array>:
 8007c28:	b570      	push	{r4, r5, r6, lr}
 8007c2a:	4d0d      	ldr	r5, [pc, #52]	; (8007c60 <__libc_init_array+0x38>)
 8007c2c:	4c0d      	ldr	r4, [pc, #52]	; (8007c64 <__libc_init_array+0x3c>)
 8007c2e:	1b64      	subs	r4, r4, r5
 8007c30:	10a4      	asrs	r4, r4, #2
 8007c32:	2600      	movs	r6, #0
 8007c34:	42a6      	cmp	r6, r4
 8007c36:	d109      	bne.n	8007c4c <__libc_init_array+0x24>
 8007c38:	4d0b      	ldr	r5, [pc, #44]	; (8007c68 <__libc_init_array+0x40>)
 8007c3a:	4c0c      	ldr	r4, [pc, #48]	; (8007c6c <__libc_init_array+0x44>)
 8007c3c:	f000 ff84 	bl	8008b48 <_init>
 8007c40:	1b64      	subs	r4, r4, r5
 8007c42:	10a4      	asrs	r4, r4, #2
 8007c44:	2600      	movs	r6, #0
 8007c46:	42a6      	cmp	r6, r4
 8007c48:	d105      	bne.n	8007c56 <__libc_init_array+0x2e>
 8007c4a:	bd70      	pop	{r4, r5, r6, pc}
 8007c4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c50:	4798      	blx	r3
 8007c52:	3601      	adds	r6, #1
 8007c54:	e7ee      	b.n	8007c34 <__libc_init_array+0xc>
 8007c56:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c5a:	4798      	blx	r3
 8007c5c:	3601      	adds	r6, #1
 8007c5e:	e7f2      	b.n	8007c46 <__libc_init_array+0x1e>
 8007c60:	08008e6c 	.word	0x08008e6c
 8007c64:	08008e6c 	.word	0x08008e6c
 8007c68:	08008e6c 	.word	0x08008e6c
 8007c6c:	08008e70 	.word	0x08008e70

08007c70 <memcpy>:
 8007c70:	440a      	add	r2, r1
 8007c72:	4291      	cmp	r1, r2
 8007c74:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007c78:	d100      	bne.n	8007c7c <memcpy+0xc>
 8007c7a:	4770      	bx	lr
 8007c7c:	b510      	push	{r4, lr}
 8007c7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c86:	4291      	cmp	r1, r2
 8007c88:	d1f9      	bne.n	8007c7e <memcpy+0xe>
 8007c8a:	bd10      	pop	{r4, pc}

08007c8c <memset>:
 8007c8c:	4402      	add	r2, r0
 8007c8e:	4603      	mov	r3, r0
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d100      	bne.n	8007c96 <memset+0xa>
 8007c94:	4770      	bx	lr
 8007c96:	f803 1b01 	strb.w	r1, [r3], #1
 8007c9a:	e7f9      	b.n	8007c90 <memset+0x4>

08007c9c <iprintf>:
 8007c9c:	b40f      	push	{r0, r1, r2, r3}
 8007c9e:	4b0a      	ldr	r3, [pc, #40]	; (8007cc8 <iprintf+0x2c>)
 8007ca0:	b513      	push	{r0, r1, r4, lr}
 8007ca2:	681c      	ldr	r4, [r3, #0]
 8007ca4:	b124      	cbz	r4, 8007cb0 <iprintf+0x14>
 8007ca6:	69a3      	ldr	r3, [r4, #24]
 8007ca8:	b913      	cbnz	r3, 8007cb0 <iprintf+0x14>
 8007caa:	4620      	mov	r0, r4
 8007cac:	f000 f866 	bl	8007d7c <__sinit>
 8007cb0:	ab05      	add	r3, sp, #20
 8007cb2:	9a04      	ldr	r2, [sp, #16]
 8007cb4:	68a1      	ldr	r1, [r4, #8]
 8007cb6:	9301      	str	r3, [sp, #4]
 8007cb8:	4620      	mov	r0, r4
 8007cba:	f000 f983 	bl	8007fc4 <_vfiprintf_r>
 8007cbe:	b002      	add	sp, #8
 8007cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cc4:	b004      	add	sp, #16
 8007cc6:	4770      	bx	lr
 8007cc8:	20000014 	.word	0x20000014

08007ccc <std>:
 8007ccc:	2300      	movs	r3, #0
 8007cce:	b510      	push	{r4, lr}
 8007cd0:	4604      	mov	r4, r0
 8007cd2:	e9c0 3300 	strd	r3, r3, [r0]
 8007cd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007cda:	6083      	str	r3, [r0, #8]
 8007cdc:	8181      	strh	r1, [r0, #12]
 8007cde:	6643      	str	r3, [r0, #100]	; 0x64
 8007ce0:	81c2      	strh	r2, [r0, #14]
 8007ce2:	6183      	str	r3, [r0, #24]
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	2208      	movs	r2, #8
 8007ce8:	305c      	adds	r0, #92	; 0x5c
 8007cea:	f7ff ffcf 	bl	8007c8c <memset>
 8007cee:	4b05      	ldr	r3, [pc, #20]	; (8007d04 <std+0x38>)
 8007cf0:	6263      	str	r3, [r4, #36]	; 0x24
 8007cf2:	4b05      	ldr	r3, [pc, #20]	; (8007d08 <std+0x3c>)
 8007cf4:	62a3      	str	r3, [r4, #40]	; 0x28
 8007cf6:	4b05      	ldr	r3, [pc, #20]	; (8007d0c <std+0x40>)
 8007cf8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007cfa:	4b05      	ldr	r3, [pc, #20]	; (8007d10 <std+0x44>)
 8007cfc:	6224      	str	r4, [r4, #32]
 8007cfe:	6323      	str	r3, [r4, #48]	; 0x30
 8007d00:	bd10      	pop	{r4, pc}
 8007d02:	bf00      	nop
 8007d04:	0800856d 	.word	0x0800856d
 8007d08:	0800858f 	.word	0x0800858f
 8007d0c:	080085c7 	.word	0x080085c7
 8007d10:	080085eb 	.word	0x080085eb

08007d14 <_cleanup_r>:
 8007d14:	4901      	ldr	r1, [pc, #4]	; (8007d1c <_cleanup_r+0x8>)
 8007d16:	f000 b8af 	b.w	8007e78 <_fwalk_reent>
 8007d1a:	bf00      	nop
 8007d1c:	080088c5 	.word	0x080088c5

08007d20 <__sfmoreglue>:
 8007d20:	b570      	push	{r4, r5, r6, lr}
 8007d22:	1e4a      	subs	r2, r1, #1
 8007d24:	2568      	movs	r5, #104	; 0x68
 8007d26:	4355      	muls	r5, r2
 8007d28:	460e      	mov	r6, r1
 8007d2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007d2e:	f000 f8c5 	bl	8007ebc <_malloc_r>
 8007d32:	4604      	mov	r4, r0
 8007d34:	b140      	cbz	r0, 8007d48 <__sfmoreglue+0x28>
 8007d36:	2100      	movs	r1, #0
 8007d38:	e9c0 1600 	strd	r1, r6, [r0]
 8007d3c:	300c      	adds	r0, #12
 8007d3e:	60a0      	str	r0, [r4, #8]
 8007d40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007d44:	f7ff ffa2 	bl	8007c8c <memset>
 8007d48:	4620      	mov	r0, r4
 8007d4a:	bd70      	pop	{r4, r5, r6, pc}

08007d4c <__sfp_lock_acquire>:
 8007d4c:	4801      	ldr	r0, [pc, #4]	; (8007d54 <__sfp_lock_acquire+0x8>)
 8007d4e:	f000 b8b3 	b.w	8007eb8 <__retarget_lock_acquire_recursive>
 8007d52:	bf00      	nop
 8007d54:	200047e8 	.word	0x200047e8

08007d58 <__sfp_lock_release>:
 8007d58:	4801      	ldr	r0, [pc, #4]	; (8007d60 <__sfp_lock_release+0x8>)
 8007d5a:	f000 b8ae 	b.w	8007eba <__retarget_lock_release_recursive>
 8007d5e:	bf00      	nop
 8007d60:	200047e8 	.word	0x200047e8

08007d64 <__sinit_lock_acquire>:
 8007d64:	4801      	ldr	r0, [pc, #4]	; (8007d6c <__sinit_lock_acquire+0x8>)
 8007d66:	f000 b8a7 	b.w	8007eb8 <__retarget_lock_acquire_recursive>
 8007d6a:	bf00      	nop
 8007d6c:	200047e3 	.word	0x200047e3

08007d70 <__sinit_lock_release>:
 8007d70:	4801      	ldr	r0, [pc, #4]	; (8007d78 <__sinit_lock_release+0x8>)
 8007d72:	f000 b8a2 	b.w	8007eba <__retarget_lock_release_recursive>
 8007d76:	bf00      	nop
 8007d78:	200047e3 	.word	0x200047e3

08007d7c <__sinit>:
 8007d7c:	b510      	push	{r4, lr}
 8007d7e:	4604      	mov	r4, r0
 8007d80:	f7ff fff0 	bl	8007d64 <__sinit_lock_acquire>
 8007d84:	69a3      	ldr	r3, [r4, #24]
 8007d86:	b11b      	cbz	r3, 8007d90 <__sinit+0x14>
 8007d88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d8c:	f7ff bff0 	b.w	8007d70 <__sinit_lock_release>
 8007d90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007d94:	6523      	str	r3, [r4, #80]	; 0x50
 8007d96:	4b13      	ldr	r3, [pc, #76]	; (8007de4 <__sinit+0x68>)
 8007d98:	4a13      	ldr	r2, [pc, #76]	; (8007de8 <__sinit+0x6c>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	62a2      	str	r2, [r4, #40]	; 0x28
 8007d9e:	42a3      	cmp	r3, r4
 8007da0:	bf04      	itt	eq
 8007da2:	2301      	moveq	r3, #1
 8007da4:	61a3      	streq	r3, [r4, #24]
 8007da6:	4620      	mov	r0, r4
 8007da8:	f000 f820 	bl	8007dec <__sfp>
 8007dac:	6060      	str	r0, [r4, #4]
 8007dae:	4620      	mov	r0, r4
 8007db0:	f000 f81c 	bl	8007dec <__sfp>
 8007db4:	60a0      	str	r0, [r4, #8]
 8007db6:	4620      	mov	r0, r4
 8007db8:	f000 f818 	bl	8007dec <__sfp>
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	60e0      	str	r0, [r4, #12]
 8007dc0:	2104      	movs	r1, #4
 8007dc2:	6860      	ldr	r0, [r4, #4]
 8007dc4:	f7ff ff82 	bl	8007ccc <std>
 8007dc8:	68a0      	ldr	r0, [r4, #8]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	2109      	movs	r1, #9
 8007dce:	f7ff ff7d 	bl	8007ccc <std>
 8007dd2:	68e0      	ldr	r0, [r4, #12]
 8007dd4:	2202      	movs	r2, #2
 8007dd6:	2112      	movs	r1, #18
 8007dd8:	f7ff ff78 	bl	8007ccc <std>
 8007ddc:	2301      	movs	r3, #1
 8007dde:	61a3      	str	r3, [r4, #24]
 8007de0:	e7d2      	b.n	8007d88 <__sinit+0xc>
 8007de2:	bf00      	nop
 8007de4:	08008dcc 	.word	0x08008dcc
 8007de8:	08007d15 	.word	0x08007d15

08007dec <__sfp>:
 8007dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dee:	4607      	mov	r7, r0
 8007df0:	f7ff ffac 	bl	8007d4c <__sfp_lock_acquire>
 8007df4:	4b1e      	ldr	r3, [pc, #120]	; (8007e70 <__sfp+0x84>)
 8007df6:	681e      	ldr	r6, [r3, #0]
 8007df8:	69b3      	ldr	r3, [r6, #24]
 8007dfa:	b913      	cbnz	r3, 8007e02 <__sfp+0x16>
 8007dfc:	4630      	mov	r0, r6
 8007dfe:	f7ff ffbd 	bl	8007d7c <__sinit>
 8007e02:	3648      	adds	r6, #72	; 0x48
 8007e04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007e08:	3b01      	subs	r3, #1
 8007e0a:	d503      	bpl.n	8007e14 <__sfp+0x28>
 8007e0c:	6833      	ldr	r3, [r6, #0]
 8007e0e:	b30b      	cbz	r3, 8007e54 <__sfp+0x68>
 8007e10:	6836      	ldr	r6, [r6, #0]
 8007e12:	e7f7      	b.n	8007e04 <__sfp+0x18>
 8007e14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007e18:	b9d5      	cbnz	r5, 8007e50 <__sfp+0x64>
 8007e1a:	4b16      	ldr	r3, [pc, #88]	; (8007e74 <__sfp+0x88>)
 8007e1c:	60e3      	str	r3, [r4, #12]
 8007e1e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007e22:	6665      	str	r5, [r4, #100]	; 0x64
 8007e24:	f000 f847 	bl	8007eb6 <__retarget_lock_init_recursive>
 8007e28:	f7ff ff96 	bl	8007d58 <__sfp_lock_release>
 8007e2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007e30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007e34:	6025      	str	r5, [r4, #0]
 8007e36:	61a5      	str	r5, [r4, #24]
 8007e38:	2208      	movs	r2, #8
 8007e3a:	4629      	mov	r1, r5
 8007e3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007e40:	f7ff ff24 	bl	8007c8c <memset>
 8007e44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007e48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007e4c:	4620      	mov	r0, r4
 8007e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e50:	3468      	adds	r4, #104	; 0x68
 8007e52:	e7d9      	b.n	8007e08 <__sfp+0x1c>
 8007e54:	2104      	movs	r1, #4
 8007e56:	4638      	mov	r0, r7
 8007e58:	f7ff ff62 	bl	8007d20 <__sfmoreglue>
 8007e5c:	4604      	mov	r4, r0
 8007e5e:	6030      	str	r0, [r6, #0]
 8007e60:	2800      	cmp	r0, #0
 8007e62:	d1d5      	bne.n	8007e10 <__sfp+0x24>
 8007e64:	f7ff ff78 	bl	8007d58 <__sfp_lock_release>
 8007e68:	230c      	movs	r3, #12
 8007e6a:	603b      	str	r3, [r7, #0]
 8007e6c:	e7ee      	b.n	8007e4c <__sfp+0x60>
 8007e6e:	bf00      	nop
 8007e70:	08008dcc 	.word	0x08008dcc
 8007e74:	ffff0001 	.word	0xffff0001

08007e78 <_fwalk_reent>:
 8007e78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e7c:	4606      	mov	r6, r0
 8007e7e:	4688      	mov	r8, r1
 8007e80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007e84:	2700      	movs	r7, #0
 8007e86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e8a:	f1b9 0901 	subs.w	r9, r9, #1
 8007e8e:	d505      	bpl.n	8007e9c <_fwalk_reent+0x24>
 8007e90:	6824      	ldr	r4, [r4, #0]
 8007e92:	2c00      	cmp	r4, #0
 8007e94:	d1f7      	bne.n	8007e86 <_fwalk_reent+0xe>
 8007e96:	4638      	mov	r0, r7
 8007e98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e9c:	89ab      	ldrh	r3, [r5, #12]
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	d907      	bls.n	8007eb2 <_fwalk_reent+0x3a>
 8007ea2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ea6:	3301      	adds	r3, #1
 8007ea8:	d003      	beq.n	8007eb2 <_fwalk_reent+0x3a>
 8007eaa:	4629      	mov	r1, r5
 8007eac:	4630      	mov	r0, r6
 8007eae:	47c0      	blx	r8
 8007eb0:	4307      	orrs	r7, r0
 8007eb2:	3568      	adds	r5, #104	; 0x68
 8007eb4:	e7e9      	b.n	8007e8a <_fwalk_reent+0x12>

08007eb6 <__retarget_lock_init_recursive>:
 8007eb6:	4770      	bx	lr

08007eb8 <__retarget_lock_acquire_recursive>:
 8007eb8:	4770      	bx	lr

08007eba <__retarget_lock_release_recursive>:
 8007eba:	4770      	bx	lr

08007ebc <_malloc_r>:
 8007ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ebe:	1ccd      	adds	r5, r1, #3
 8007ec0:	f025 0503 	bic.w	r5, r5, #3
 8007ec4:	3508      	adds	r5, #8
 8007ec6:	2d0c      	cmp	r5, #12
 8007ec8:	bf38      	it	cc
 8007eca:	250c      	movcc	r5, #12
 8007ecc:	2d00      	cmp	r5, #0
 8007ece:	4606      	mov	r6, r0
 8007ed0:	db01      	blt.n	8007ed6 <_malloc_r+0x1a>
 8007ed2:	42a9      	cmp	r1, r5
 8007ed4:	d903      	bls.n	8007ede <_malloc_r+0x22>
 8007ed6:	230c      	movs	r3, #12
 8007ed8:	6033      	str	r3, [r6, #0]
 8007eda:	2000      	movs	r0, #0
 8007edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ede:	f000 fda3 	bl	8008a28 <__malloc_lock>
 8007ee2:	4921      	ldr	r1, [pc, #132]	; (8007f68 <_malloc_r+0xac>)
 8007ee4:	680a      	ldr	r2, [r1, #0]
 8007ee6:	4614      	mov	r4, r2
 8007ee8:	b99c      	cbnz	r4, 8007f12 <_malloc_r+0x56>
 8007eea:	4f20      	ldr	r7, [pc, #128]	; (8007f6c <_malloc_r+0xb0>)
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	b923      	cbnz	r3, 8007efa <_malloc_r+0x3e>
 8007ef0:	4621      	mov	r1, r4
 8007ef2:	4630      	mov	r0, r6
 8007ef4:	f000 fb2a 	bl	800854c <_sbrk_r>
 8007ef8:	6038      	str	r0, [r7, #0]
 8007efa:	4629      	mov	r1, r5
 8007efc:	4630      	mov	r0, r6
 8007efe:	f000 fb25 	bl	800854c <_sbrk_r>
 8007f02:	1c43      	adds	r3, r0, #1
 8007f04:	d123      	bne.n	8007f4e <_malloc_r+0x92>
 8007f06:	230c      	movs	r3, #12
 8007f08:	6033      	str	r3, [r6, #0]
 8007f0a:	4630      	mov	r0, r6
 8007f0c:	f000 fd92 	bl	8008a34 <__malloc_unlock>
 8007f10:	e7e3      	b.n	8007eda <_malloc_r+0x1e>
 8007f12:	6823      	ldr	r3, [r4, #0]
 8007f14:	1b5b      	subs	r3, r3, r5
 8007f16:	d417      	bmi.n	8007f48 <_malloc_r+0x8c>
 8007f18:	2b0b      	cmp	r3, #11
 8007f1a:	d903      	bls.n	8007f24 <_malloc_r+0x68>
 8007f1c:	6023      	str	r3, [r4, #0]
 8007f1e:	441c      	add	r4, r3
 8007f20:	6025      	str	r5, [r4, #0]
 8007f22:	e004      	b.n	8007f2e <_malloc_r+0x72>
 8007f24:	6863      	ldr	r3, [r4, #4]
 8007f26:	42a2      	cmp	r2, r4
 8007f28:	bf0c      	ite	eq
 8007f2a:	600b      	streq	r3, [r1, #0]
 8007f2c:	6053      	strne	r3, [r2, #4]
 8007f2e:	4630      	mov	r0, r6
 8007f30:	f000 fd80 	bl	8008a34 <__malloc_unlock>
 8007f34:	f104 000b 	add.w	r0, r4, #11
 8007f38:	1d23      	adds	r3, r4, #4
 8007f3a:	f020 0007 	bic.w	r0, r0, #7
 8007f3e:	1ac2      	subs	r2, r0, r3
 8007f40:	d0cc      	beq.n	8007edc <_malloc_r+0x20>
 8007f42:	1a1b      	subs	r3, r3, r0
 8007f44:	50a3      	str	r3, [r4, r2]
 8007f46:	e7c9      	b.n	8007edc <_malloc_r+0x20>
 8007f48:	4622      	mov	r2, r4
 8007f4a:	6864      	ldr	r4, [r4, #4]
 8007f4c:	e7cc      	b.n	8007ee8 <_malloc_r+0x2c>
 8007f4e:	1cc4      	adds	r4, r0, #3
 8007f50:	f024 0403 	bic.w	r4, r4, #3
 8007f54:	42a0      	cmp	r0, r4
 8007f56:	d0e3      	beq.n	8007f20 <_malloc_r+0x64>
 8007f58:	1a21      	subs	r1, r4, r0
 8007f5a:	4630      	mov	r0, r6
 8007f5c:	f000 faf6 	bl	800854c <_sbrk_r>
 8007f60:	3001      	adds	r0, #1
 8007f62:	d1dd      	bne.n	8007f20 <_malloc_r+0x64>
 8007f64:	e7cf      	b.n	8007f06 <_malloc_r+0x4a>
 8007f66:	bf00      	nop
 8007f68:	200045c4 	.word	0x200045c4
 8007f6c:	200045c8 	.word	0x200045c8

08007f70 <__sfputc_r>:
 8007f70:	6893      	ldr	r3, [r2, #8]
 8007f72:	3b01      	subs	r3, #1
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	b410      	push	{r4}
 8007f78:	6093      	str	r3, [r2, #8]
 8007f7a:	da08      	bge.n	8007f8e <__sfputc_r+0x1e>
 8007f7c:	6994      	ldr	r4, [r2, #24]
 8007f7e:	42a3      	cmp	r3, r4
 8007f80:	db01      	blt.n	8007f86 <__sfputc_r+0x16>
 8007f82:	290a      	cmp	r1, #10
 8007f84:	d103      	bne.n	8007f8e <__sfputc_r+0x1e>
 8007f86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f8a:	f000 bb33 	b.w	80085f4 <__swbuf_r>
 8007f8e:	6813      	ldr	r3, [r2, #0]
 8007f90:	1c58      	adds	r0, r3, #1
 8007f92:	6010      	str	r0, [r2, #0]
 8007f94:	7019      	strb	r1, [r3, #0]
 8007f96:	4608      	mov	r0, r1
 8007f98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f9c:	4770      	bx	lr

08007f9e <__sfputs_r>:
 8007f9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fa0:	4606      	mov	r6, r0
 8007fa2:	460f      	mov	r7, r1
 8007fa4:	4614      	mov	r4, r2
 8007fa6:	18d5      	adds	r5, r2, r3
 8007fa8:	42ac      	cmp	r4, r5
 8007faa:	d101      	bne.n	8007fb0 <__sfputs_r+0x12>
 8007fac:	2000      	movs	r0, #0
 8007fae:	e007      	b.n	8007fc0 <__sfputs_r+0x22>
 8007fb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fb4:	463a      	mov	r2, r7
 8007fb6:	4630      	mov	r0, r6
 8007fb8:	f7ff ffda 	bl	8007f70 <__sfputc_r>
 8007fbc:	1c43      	adds	r3, r0, #1
 8007fbe:	d1f3      	bne.n	8007fa8 <__sfputs_r+0xa>
 8007fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007fc4 <_vfiprintf_r>:
 8007fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fc8:	460d      	mov	r5, r1
 8007fca:	b09d      	sub	sp, #116	; 0x74
 8007fcc:	4614      	mov	r4, r2
 8007fce:	4698      	mov	r8, r3
 8007fd0:	4606      	mov	r6, r0
 8007fd2:	b118      	cbz	r0, 8007fdc <_vfiprintf_r+0x18>
 8007fd4:	6983      	ldr	r3, [r0, #24]
 8007fd6:	b90b      	cbnz	r3, 8007fdc <_vfiprintf_r+0x18>
 8007fd8:	f7ff fed0 	bl	8007d7c <__sinit>
 8007fdc:	4b89      	ldr	r3, [pc, #548]	; (8008204 <_vfiprintf_r+0x240>)
 8007fde:	429d      	cmp	r5, r3
 8007fe0:	d11b      	bne.n	800801a <_vfiprintf_r+0x56>
 8007fe2:	6875      	ldr	r5, [r6, #4]
 8007fe4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fe6:	07d9      	lsls	r1, r3, #31
 8007fe8:	d405      	bmi.n	8007ff6 <_vfiprintf_r+0x32>
 8007fea:	89ab      	ldrh	r3, [r5, #12]
 8007fec:	059a      	lsls	r2, r3, #22
 8007fee:	d402      	bmi.n	8007ff6 <_vfiprintf_r+0x32>
 8007ff0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ff2:	f7ff ff61 	bl	8007eb8 <__retarget_lock_acquire_recursive>
 8007ff6:	89ab      	ldrh	r3, [r5, #12]
 8007ff8:	071b      	lsls	r3, r3, #28
 8007ffa:	d501      	bpl.n	8008000 <_vfiprintf_r+0x3c>
 8007ffc:	692b      	ldr	r3, [r5, #16]
 8007ffe:	b9eb      	cbnz	r3, 800803c <_vfiprintf_r+0x78>
 8008000:	4629      	mov	r1, r5
 8008002:	4630      	mov	r0, r6
 8008004:	f000 fb5a 	bl	80086bc <__swsetup_r>
 8008008:	b1c0      	cbz	r0, 800803c <_vfiprintf_r+0x78>
 800800a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800800c:	07dc      	lsls	r4, r3, #31
 800800e:	d50e      	bpl.n	800802e <_vfiprintf_r+0x6a>
 8008010:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008014:	b01d      	add	sp, #116	; 0x74
 8008016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800801a:	4b7b      	ldr	r3, [pc, #492]	; (8008208 <_vfiprintf_r+0x244>)
 800801c:	429d      	cmp	r5, r3
 800801e:	d101      	bne.n	8008024 <_vfiprintf_r+0x60>
 8008020:	68b5      	ldr	r5, [r6, #8]
 8008022:	e7df      	b.n	8007fe4 <_vfiprintf_r+0x20>
 8008024:	4b79      	ldr	r3, [pc, #484]	; (800820c <_vfiprintf_r+0x248>)
 8008026:	429d      	cmp	r5, r3
 8008028:	bf08      	it	eq
 800802a:	68f5      	ldreq	r5, [r6, #12]
 800802c:	e7da      	b.n	8007fe4 <_vfiprintf_r+0x20>
 800802e:	89ab      	ldrh	r3, [r5, #12]
 8008030:	0598      	lsls	r0, r3, #22
 8008032:	d4ed      	bmi.n	8008010 <_vfiprintf_r+0x4c>
 8008034:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008036:	f7ff ff40 	bl	8007eba <__retarget_lock_release_recursive>
 800803a:	e7e9      	b.n	8008010 <_vfiprintf_r+0x4c>
 800803c:	2300      	movs	r3, #0
 800803e:	9309      	str	r3, [sp, #36]	; 0x24
 8008040:	2320      	movs	r3, #32
 8008042:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008046:	f8cd 800c 	str.w	r8, [sp, #12]
 800804a:	2330      	movs	r3, #48	; 0x30
 800804c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008210 <_vfiprintf_r+0x24c>
 8008050:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008054:	f04f 0901 	mov.w	r9, #1
 8008058:	4623      	mov	r3, r4
 800805a:	469a      	mov	sl, r3
 800805c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008060:	b10a      	cbz	r2, 8008066 <_vfiprintf_r+0xa2>
 8008062:	2a25      	cmp	r2, #37	; 0x25
 8008064:	d1f9      	bne.n	800805a <_vfiprintf_r+0x96>
 8008066:	ebba 0b04 	subs.w	fp, sl, r4
 800806a:	d00b      	beq.n	8008084 <_vfiprintf_r+0xc0>
 800806c:	465b      	mov	r3, fp
 800806e:	4622      	mov	r2, r4
 8008070:	4629      	mov	r1, r5
 8008072:	4630      	mov	r0, r6
 8008074:	f7ff ff93 	bl	8007f9e <__sfputs_r>
 8008078:	3001      	adds	r0, #1
 800807a:	f000 80aa 	beq.w	80081d2 <_vfiprintf_r+0x20e>
 800807e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008080:	445a      	add	r2, fp
 8008082:	9209      	str	r2, [sp, #36]	; 0x24
 8008084:	f89a 3000 	ldrb.w	r3, [sl]
 8008088:	2b00      	cmp	r3, #0
 800808a:	f000 80a2 	beq.w	80081d2 <_vfiprintf_r+0x20e>
 800808e:	2300      	movs	r3, #0
 8008090:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008094:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008098:	f10a 0a01 	add.w	sl, sl, #1
 800809c:	9304      	str	r3, [sp, #16]
 800809e:	9307      	str	r3, [sp, #28]
 80080a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80080a4:	931a      	str	r3, [sp, #104]	; 0x68
 80080a6:	4654      	mov	r4, sl
 80080a8:	2205      	movs	r2, #5
 80080aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080ae:	4858      	ldr	r0, [pc, #352]	; (8008210 <_vfiprintf_r+0x24c>)
 80080b0:	f7f8 f88e 	bl	80001d0 <memchr>
 80080b4:	9a04      	ldr	r2, [sp, #16]
 80080b6:	b9d8      	cbnz	r0, 80080f0 <_vfiprintf_r+0x12c>
 80080b8:	06d1      	lsls	r1, r2, #27
 80080ba:	bf44      	itt	mi
 80080bc:	2320      	movmi	r3, #32
 80080be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080c2:	0713      	lsls	r3, r2, #28
 80080c4:	bf44      	itt	mi
 80080c6:	232b      	movmi	r3, #43	; 0x2b
 80080c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080cc:	f89a 3000 	ldrb.w	r3, [sl]
 80080d0:	2b2a      	cmp	r3, #42	; 0x2a
 80080d2:	d015      	beq.n	8008100 <_vfiprintf_r+0x13c>
 80080d4:	9a07      	ldr	r2, [sp, #28]
 80080d6:	4654      	mov	r4, sl
 80080d8:	2000      	movs	r0, #0
 80080da:	f04f 0c0a 	mov.w	ip, #10
 80080de:	4621      	mov	r1, r4
 80080e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080e4:	3b30      	subs	r3, #48	; 0x30
 80080e6:	2b09      	cmp	r3, #9
 80080e8:	d94e      	bls.n	8008188 <_vfiprintf_r+0x1c4>
 80080ea:	b1b0      	cbz	r0, 800811a <_vfiprintf_r+0x156>
 80080ec:	9207      	str	r2, [sp, #28]
 80080ee:	e014      	b.n	800811a <_vfiprintf_r+0x156>
 80080f0:	eba0 0308 	sub.w	r3, r0, r8
 80080f4:	fa09 f303 	lsl.w	r3, r9, r3
 80080f8:	4313      	orrs	r3, r2
 80080fa:	9304      	str	r3, [sp, #16]
 80080fc:	46a2      	mov	sl, r4
 80080fe:	e7d2      	b.n	80080a6 <_vfiprintf_r+0xe2>
 8008100:	9b03      	ldr	r3, [sp, #12]
 8008102:	1d19      	adds	r1, r3, #4
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	9103      	str	r1, [sp, #12]
 8008108:	2b00      	cmp	r3, #0
 800810a:	bfbb      	ittet	lt
 800810c:	425b      	neglt	r3, r3
 800810e:	f042 0202 	orrlt.w	r2, r2, #2
 8008112:	9307      	strge	r3, [sp, #28]
 8008114:	9307      	strlt	r3, [sp, #28]
 8008116:	bfb8      	it	lt
 8008118:	9204      	strlt	r2, [sp, #16]
 800811a:	7823      	ldrb	r3, [r4, #0]
 800811c:	2b2e      	cmp	r3, #46	; 0x2e
 800811e:	d10c      	bne.n	800813a <_vfiprintf_r+0x176>
 8008120:	7863      	ldrb	r3, [r4, #1]
 8008122:	2b2a      	cmp	r3, #42	; 0x2a
 8008124:	d135      	bne.n	8008192 <_vfiprintf_r+0x1ce>
 8008126:	9b03      	ldr	r3, [sp, #12]
 8008128:	1d1a      	adds	r2, r3, #4
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	9203      	str	r2, [sp, #12]
 800812e:	2b00      	cmp	r3, #0
 8008130:	bfb8      	it	lt
 8008132:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008136:	3402      	adds	r4, #2
 8008138:	9305      	str	r3, [sp, #20]
 800813a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008220 <_vfiprintf_r+0x25c>
 800813e:	7821      	ldrb	r1, [r4, #0]
 8008140:	2203      	movs	r2, #3
 8008142:	4650      	mov	r0, sl
 8008144:	f7f8 f844 	bl	80001d0 <memchr>
 8008148:	b140      	cbz	r0, 800815c <_vfiprintf_r+0x198>
 800814a:	2340      	movs	r3, #64	; 0x40
 800814c:	eba0 000a 	sub.w	r0, r0, sl
 8008150:	fa03 f000 	lsl.w	r0, r3, r0
 8008154:	9b04      	ldr	r3, [sp, #16]
 8008156:	4303      	orrs	r3, r0
 8008158:	3401      	adds	r4, #1
 800815a:	9304      	str	r3, [sp, #16]
 800815c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008160:	482c      	ldr	r0, [pc, #176]	; (8008214 <_vfiprintf_r+0x250>)
 8008162:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008166:	2206      	movs	r2, #6
 8008168:	f7f8 f832 	bl	80001d0 <memchr>
 800816c:	2800      	cmp	r0, #0
 800816e:	d03f      	beq.n	80081f0 <_vfiprintf_r+0x22c>
 8008170:	4b29      	ldr	r3, [pc, #164]	; (8008218 <_vfiprintf_r+0x254>)
 8008172:	bb1b      	cbnz	r3, 80081bc <_vfiprintf_r+0x1f8>
 8008174:	9b03      	ldr	r3, [sp, #12]
 8008176:	3307      	adds	r3, #7
 8008178:	f023 0307 	bic.w	r3, r3, #7
 800817c:	3308      	adds	r3, #8
 800817e:	9303      	str	r3, [sp, #12]
 8008180:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008182:	443b      	add	r3, r7
 8008184:	9309      	str	r3, [sp, #36]	; 0x24
 8008186:	e767      	b.n	8008058 <_vfiprintf_r+0x94>
 8008188:	fb0c 3202 	mla	r2, ip, r2, r3
 800818c:	460c      	mov	r4, r1
 800818e:	2001      	movs	r0, #1
 8008190:	e7a5      	b.n	80080de <_vfiprintf_r+0x11a>
 8008192:	2300      	movs	r3, #0
 8008194:	3401      	adds	r4, #1
 8008196:	9305      	str	r3, [sp, #20]
 8008198:	4619      	mov	r1, r3
 800819a:	f04f 0c0a 	mov.w	ip, #10
 800819e:	4620      	mov	r0, r4
 80081a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081a4:	3a30      	subs	r2, #48	; 0x30
 80081a6:	2a09      	cmp	r2, #9
 80081a8:	d903      	bls.n	80081b2 <_vfiprintf_r+0x1ee>
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d0c5      	beq.n	800813a <_vfiprintf_r+0x176>
 80081ae:	9105      	str	r1, [sp, #20]
 80081b0:	e7c3      	b.n	800813a <_vfiprintf_r+0x176>
 80081b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80081b6:	4604      	mov	r4, r0
 80081b8:	2301      	movs	r3, #1
 80081ba:	e7f0      	b.n	800819e <_vfiprintf_r+0x1da>
 80081bc:	ab03      	add	r3, sp, #12
 80081be:	9300      	str	r3, [sp, #0]
 80081c0:	462a      	mov	r2, r5
 80081c2:	4b16      	ldr	r3, [pc, #88]	; (800821c <_vfiprintf_r+0x258>)
 80081c4:	a904      	add	r1, sp, #16
 80081c6:	4630      	mov	r0, r6
 80081c8:	f3af 8000 	nop.w
 80081cc:	4607      	mov	r7, r0
 80081ce:	1c78      	adds	r0, r7, #1
 80081d0:	d1d6      	bne.n	8008180 <_vfiprintf_r+0x1bc>
 80081d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081d4:	07d9      	lsls	r1, r3, #31
 80081d6:	d405      	bmi.n	80081e4 <_vfiprintf_r+0x220>
 80081d8:	89ab      	ldrh	r3, [r5, #12]
 80081da:	059a      	lsls	r2, r3, #22
 80081dc:	d402      	bmi.n	80081e4 <_vfiprintf_r+0x220>
 80081de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081e0:	f7ff fe6b 	bl	8007eba <__retarget_lock_release_recursive>
 80081e4:	89ab      	ldrh	r3, [r5, #12]
 80081e6:	065b      	lsls	r3, r3, #25
 80081e8:	f53f af12 	bmi.w	8008010 <_vfiprintf_r+0x4c>
 80081ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081ee:	e711      	b.n	8008014 <_vfiprintf_r+0x50>
 80081f0:	ab03      	add	r3, sp, #12
 80081f2:	9300      	str	r3, [sp, #0]
 80081f4:	462a      	mov	r2, r5
 80081f6:	4b09      	ldr	r3, [pc, #36]	; (800821c <_vfiprintf_r+0x258>)
 80081f8:	a904      	add	r1, sp, #16
 80081fa:	4630      	mov	r0, r6
 80081fc:	f000 f880 	bl	8008300 <_printf_i>
 8008200:	e7e4      	b.n	80081cc <_vfiprintf_r+0x208>
 8008202:	bf00      	nop
 8008204:	08008df0 	.word	0x08008df0
 8008208:	08008e10 	.word	0x08008e10
 800820c:	08008dd0 	.word	0x08008dd0
 8008210:	08008e30 	.word	0x08008e30
 8008214:	08008e3a 	.word	0x08008e3a
 8008218:	00000000 	.word	0x00000000
 800821c:	08007f9f 	.word	0x08007f9f
 8008220:	08008e36 	.word	0x08008e36

08008224 <_printf_common>:
 8008224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008228:	4616      	mov	r6, r2
 800822a:	4699      	mov	r9, r3
 800822c:	688a      	ldr	r2, [r1, #8]
 800822e:	690b      	ldr	r3, [r1, #16]
 8008230:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008234:	4293      	cmp	r3, r2
 8008236:	bfb8      	it	lt
 8008238:	4613      	movlt	r3, r2
 800823a:	6033      	str	r3, [r6, #0]
 800823c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008240:	4607      	mov	r7, r0
 8008242:	460c      	mov	r4, r1
 8008244:	b10a      	cbz	r2, 800824a <_printf_common+0x26>
 8008246:	3301      	adds	r3, #1
 8008248:	6033      	str	r3, [r6, #0]
 800824a:	6823      	ldr	r3, [r4, #0]
 800824c:	0699      	lsls	r1, r3, #26
 800824e:	bf42      	ittt	mi
 8008250:	6833      	ldrmi	r3, [r6, #0]
 8008252:	3302      	addmi	r3, #2
 8008254:	6033      	strmi	r3, [r6, #0]
 8008256:	6825      	ldr	r5, [r4, #0]
 8008258:	f015 0506 	ands.w	r5, r5, #6
 800825c:	d106      	bne.n	800826c <_printf_common+0x48>
 800825e:	f104 0a19 	add.w	sl, r4, #25
 8008262:	68e3      	ldr	r3, [r4, #12]
 8008264:	6832      	ldr	r2, [r6, #0]
 8008266:	1a9b      	subs	r3, r3, r2
 8008268:	42ab      	cmp	r3, r5
 800826a:	dc26      	bgt.n	80082ba <_printf_common+0x96>
 800826c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008270:	1e13      	subs	r3, r2, #0
 8008272:	6822      	ldr	r2, [r4, #0]
 8008274:	bf18      	it	ne
 8008276:	2301      	movne	r3, #1
 8008278:	0692      	lsls	r2, r2, #26
 800827a:	d42b      	bmi.n	80082d4 <_printf_common+0xb0>
 800827c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008280:	4649      	mov	r1, r9
 8008282:	4638      	mov	r0, r7
 8008284:	47c0      	blx	r8
 8008286:	3001      	adds	r0, #1
 8008288:	d01e      	beq.n	80082c8 <_printf_common+0xa4>
 800828a:	6823      	ldr	r3, [r4, #0]
 800828c:	68e5      	ldr	r5, [r4, #12]
 800828e:	6832      	ldr	r2, [r6, #0]
 8008290:	f003 0306 	and.w	r3, r3, #6
 8008294:	2b04      	cmp	r3, #4
 8008296:	bf08      	it	eq
 8008298:	1aad      	subeq	r5, r5, r2
 800829a:	68a3      	ldr	r3, [r4, #8]
 800829c:	6922      	ldr	r2, [r4, #16]
 800829e:	bf0c      	ite	eq
 80082a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80082a4:	2500      	movne	r5, #0
 80082a6:	4293      	cmp	r3, r2
 80082a8:	bfc4      	itt	gt
 80082aa:	1a9b      	subgt	r3, r3, r2
 80082ac:	18ed      	addgt	r5, r5, r3
 80082ae:	2600      	movs	r6, #0
 80082b0:	341a      	adds	r4, #26
 80082b2:	42b5      	cmp	r5, r6
 80082b4:	d11a      	bne.n	80082ec <_printf_common+0xc8>
 80082b6:	2000      	movs	r0, #0
 80082b8:	e008      	b.n	80082cc <_printf_common+0xa8>
 80082ba:	2301      	movs	r3, #1
 80082bc:	4652      	mov	r2, sl
 80082be:	4649      	mov	r1, r9
 80082c0:	4638      	mov	r0, r7
 80082c2:	47c0      	blx	r8
 80082c4:	3001      	adds	r0, #1
 80082c6:	d103      	bne.n	80082d0 <_printf_common+0xac>
 80082c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80082cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082d0:	3501      	adds	r5, #1
 80082d2:	e7c6      	b.n	8008262 <_printf_common+0x3e>
 80082d4:	18e1      	adds	r1, r4, r3
 80082d6:	1c5a      	adds	r2, r3, #1
 80082d8:	2030      	movs	r0, #48	; 0x30
 80082da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80082de:	4422      	add	r2, r4
 80082e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80082e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80082e8:	3302      	adds	r3, #2
 80082ea:	e7c7      	b.n	800827c <_printf_common+0x58>
 80082ec:	2301      	movs	r3, #1
 80082ee:	4622      	mov	r2, r4
 80082f0:	4649      	mov	r1, r9
 80082f2:	4638      	mov	r0, r7
 80082f4:	47c0      	blx	r8
 80082f6:	3001      	adds	r0, #1
 80082f8:	d0e6      	beq.n	80082c8 <_printf_common+0xa4>
 80082fa:	3601      	adds	r6, #1
 80082fc:	e7d9      	b.n	80082b2 <_printf_common+0x8e>
	...

08008300 <_printf_i>:
 8008300:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008304:	460c      	mov	r4, r1
 8008306:	4691      	mov	r9, r2
 8008308:	7e27      	ldrb	r7, [r4, #24]
 800830a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800830c:	2f78      	cmp	r7, #120	; 0x78
 800830e:	4680      	mov	r8, r0
 8008310:	469a      	mov	sl, r3
 8008312:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008316:	d807      	bhi.n	8008328 <_printf_i+0x28>
 8008318:	2f62      	cmp	r7, #98	; 0x62
 800831a:	d80a      	bhi.n	8008332 <_printf_i+0x32>
 800831c:	2f00      	cmp	r7, #0
 800831e:	f000 80d8 	beq.w	80084d2 <_printf_i+0x1d2>
 8008322:	2f58      	cmp	r7, #88	; 0x58
 8008324:	f000 80a3 	beq.w	800846e <_printf_i+0x16e>
 8008328:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800832c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008330:	e03a      	b.n	80083a8 <_printf_i+0xa8>
 8008332:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008336:	2b15      	cmp	r3, #21
 8008338:	d8f6      	bhi.n	8008328 <_printf_i+0x28>
 800833a:	a001      	add	r0, pc, #4	; (adr r0, 8008340 <_printf_i+0x40>)
 800833c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008340:	08008399 	.word	0x08008399
 8008344:	080083ad 	.word	0x080083ad
 8008348:	08008329 	.word	0x08008329
 800834c:	08008329 	.word	0x08008329
 8008350:	08008329 	.word	0x08008329
 8008354:	08008329 	.word	0x08008329
 8008358:	080083ad 	.word	0x080083ad
 800835c:	08008329 	.word	0x08008329
 8008360:	08008329 	.word	0x08008329
 8008364:	08008329 	.word	0x08008329
 8008368:	08008329 	.word	0x08008329
 800836c:	080084b9 	.word	0x080084b9
 8008370:	080083dd 	.word	0x080083dd
 8008374:	0800849b 	.word	0x0800849b
 8008378:	08008329 	.word	0x08008329
 800837c:	08008329 	.word	0x08008329
 8008380:	080084db 	.word	0x080084db
 8008384:	08008329 	.word	0x08008329
 8008388:	080083dd 	.word	0x080083dd
 800838c:	08008329 	.word	0x08008329
 8008390:	08008329 	.word	0x08008329
 8008394:	080084a3 	.word	0x080084a3
 8008398:	680b      	ldr	r3, [r1, #0]
 800839a:	1d1a      	adds	r2, r3, #4
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	600a      	str	r2, [r1, #0]
 80083a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80083a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80083a8:	2301      	movs	r3, #1
 80083aa:	e0a3      	b.n	80084f4 <_printf_i+0x1f4>
 80083ac:	6825      	ldr	r5, [r4, #0]
 80083ae:	6808      	ldr	r0, [r1, #0]
 80083b0:	062e      	lsls	r6, r5, #24
 80083b2:	f100 0304 	add.w	r3, r0, #4
 80083b6:	d50a      	bpl.n	80083ce <_printf_i+0xce>
 80083b8:	6805      	ldr	r5, [r0, #0]
 80083ba:	600b      	str	r3, [r1, #0]
 80083bc:	2d00      	cmp	r5, #0
 80083be:	da03      	bge.n	80083c8 <_printf_i+0xc8>
 80083c0:	232d      	movs	r3, #45	; 0x2d
 80083c2:	426d      	negs	r5, r5
 80083c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083c8:	485e      	ldr	r0, [pc, #376]	; (8008544 <_printf_i+0x244>)
 80083ca:	230a      	movs	r3, #10
 80083cc:	e019      	b.n	8008402 <_printf_i+0x102>
 80083ce:	f015 0f40 	tst.w	r5, #64	; 0x40
 80083d2:	6805      	ldr	r5, [r0, #0]
 80083d4:	600b      	str	r3, [r1, #0]
 80083d6:	bf18      	it	ne
 80083d8:	b22d      	sxthne	r5, r5
 80083da:	e7ef      	b.n	80083bc <_printf_i+0xbc>
 80083dc:	680b      	ldr	r3, [r1, #0]
 80083de:	6825      	ldr	r5, [r4, #0]
 80083e0:	1d18      	adds	r0, r3, #4
 80083e2:	6008      	str	r0, [r1, #0]
 80083e4:	0628      	lsls	r0, r5, #24
 80083e6:	d501      	bpl.n	80083ec <_printf_i+0xec>
 80083e8:	681d      	ldr	r5, [r3, #0]
 80083ea:	e002      	b.n	80083f2 <_printf_i+0xf2>
 80083ec:	0669      	lsls	r1, r5, #25
 80083ee:	d5fb      	bpl.n	80083e8 <_printf_i+0xe8>
 80083f0:	881d      	ldrh	r5, [r3, #0]
 80083f2:	4854      	ldr	r0, [pc, #336]	; (8008544 <_printf_i+0x244>)
 80083f4:	2f6f      	cmp	r7, #111	; 0x6f
 80083f6:	bf0c      	ite	eq
 80083f8:	2308      	moveq	r3, #8
 80083fa:	230a      	movne	r3, #10
 80083fc:	2100      	movs	r1, #0
 80083fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008402:	6866      	ldr	r6, [r4, #4]
 8008404:	60a6      	str	r6, [r4, #8]
 8008406:	2e00      	cmp	r6, #0
 8008408:	bfa2      	ittt	ge
 800840a:	6821      	ldrge	r1, [r4, #0]
 800840c:	f021 0104 	bicge.w	r1, r1, #4
 8008410:	6021      	strge	r1, [r4, #0]
 8008412:	b90d      	cbnz	r5, 8008418 <_printf_i+0x118>
 8008414:	2e00      	cmp	r6, #0
 8008416:	d04d      	beq.n	80084b4 <_printf_i+0x1b4>
 8008418:	4616      	mov	r6, r2
 800841a:	fbb5 f1f3 	udiv	r1, r5, r3
 800841e:	fb03 5711 	mls	r7, r3, r1, r5
 8008422:	5dc7      	ldrb	r7, [r0, r7]
 8008424:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008428:	462f      	mov	r7, r5
 800842a:	42bb      	cmp	r3, r7
 800842c:	460d      	mov	r5, r1
 800842e:	d9f4      	bls.n	800841a <_printf_i+0x11a>
 8008430:	2b08      	cmp	r3, #8
 8008432:	d10b      	bne.n	800844c <_printf_i+0x14c>
 8008434:	6823      	ldr	r3, [r4, #0]
 8008436:	07df      	lsls	r7, r3, #31
 8008438:	d508      	bpl.n	800844c <_printf_i+0x14c>
 800843a:	6923      	ldr	r3, [r4, #16]
 800843c:	6861      	ldr	r1, [r4, #4]
 800843e:	4299      	cmp	r1, r3
 8008440:	bfde      	ittt	le
 8008442:	2330      	movle	r3, #48	; 0x30
 8008444:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008448:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800844c:	1b92      	subs	r2, r2, r6
 800844e:	6122      	str	r2, [r4, #16]
 8008450:	f8cd a000 	str.w	sl, [sp]
 8008454:	464b      	mov	r3, r9
 8008456:	aa03      	add	r2, sp, #12
 8008458:	4621      	mov	r1, r4
 800845a:	4640      	mov	r0, r8
 800845c:	f7ff fee2 	bl	8008224 <_printf_common>
 8008460:	3001      	adds	r0, #1
 8008462:	d14c      	bne.n	80084fe <_printf_i+0x1fe>
 8008464:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008468:	b004      	add	sp, #16
 800846a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800846e:	4835      	ldr	r0, [pc, #212]	; (8008544 <_printf_i+0x244>)
 8008470:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008474:	6823      	ldr	r3, [r4, #0]
 8008476:	680e      	ldr	r6, [r1, #0]
 8008478:	061f      	lsls	r7, r3, #24
 800847a:	f856 5b04 	ldr.w	r5, [r6], #4
 800847e:	600e      	str	r6, [r1, #0]
 8008480:	d514      	bpl.n	80084ac <_printf_i+0x1ac>
 8008482:	07d9      	lsls	r1, r3, #31
 8008484:	bf44      	itt	mi
 8008486:	f043 0320 	orrmi.w	r3, r3, #32
 800848a:	6023      	strmi	r3, [r4, #0]
 800848c:	b91d      	cbnz	r5, 8008496 <_printf_i+0x196>
 800848e:	6823      	ldr	r3, [r4, #0]
 8008490:	f023 0320 	bic.w	r3, r3, #32
 8008494:	6023      	str	r3, [r4, #0]
 8008496:	2310      	movs	r3, #16
 8008498:	e7b0      	b.n	80083fc <_printf_i+0xfc>
 800849a:	6823      	ldr	r3, [r4, #0]
 800849c:	f043 0320 	orr.w	r3, r3, #32
 80084a0:	6023      	str	r3, [r4, #0]
 80084a2:	2378      	movs	r3, #120	; 0x78
 80084a4:	4828      	ldr	r0, [pc, #160]	; (8008548 <_printf_i+0x248>)
 80084a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80084aa:	e7e3      	b.n	8008474 <_printf_i+0x174>
 80084ac:	065e      	lsls	r6, r3, #25
 80084ae:	bf48      	it	mi
 80084b0:	b2ad      	uxthmi	r5, r5
 80084b2:	e7e6      	b.n	8008482 <_printf_i+0x182>
 80084b4:	4616      	mov	r6, r2
 80084b6:	e7bb      	b.n	8008430 <_printf_i+0x130>
 80084b8:	680b      	ldr	r3, [r1, #0]
 80084ba:	6826      	ldr	r6, [r4, #0]
 80084bc:	6960      	ldr	r0, [r4, #20]
 80084be:	1d1d      	adds	r5, r3, #4
 80084c0:	600d      	str	r5, [r1, #0]
 80084c2:	0635      	lsls	r5, r6, #24
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	d501      	bpl.n	80084cc <_printf_i+0x1cc>
 80084c8:	6018      	str	r0, [r3, #0]
 80084ca:	e002      	b.n	80084d2 <_printf_i+0x1d2>
 80084cc:	0671      	lsls	r1, r6, #25
 80084ce:	d5fb      	bpl.n	80084c8 <_printf_i+0x1c8>
 80084d0:	8018      	strh	r0, [r3, #0]
 80084d2:	2300      	movs	r3, #0
 80084d4:	6123      	str	r3, [r4, #16]
 80084d6:	4616      	mov	r6, r2
 80084d8:	e7ba      	b.n	8008450 <_printf_i+0x150>
 80084da:	680b      	ldr	r3, [r1, #0]
 80084dc:	1d1a      	adds	r2, r3, #4
 80084de:	600a      	str	r2, [r1, #0]
 80084e0:	681e      	ldr	r6, [r3, #0]
 80084e2:	6862      	ldr	r2, [r4, #4]
 80084e4:	2100      	movs	r1, #0
 80084e6:	4630      	mov	r0, r6
 80084e8:	f7f7 fe72 	bl	80001d0 <memchr>
 80084ec:	b108      	cbz	r0, 80084f2 <_printf_i+0x1f2>
 80084ee:	1b80      	subs	r0, r0, r6
 80084f0:	6060      	str	r0, [r4, #4]
 80084f2:	6863      	ldr	r3, [r4, #4]
 80084f4:	6123      	str	r3, [r4, #16]
 80084f6:	2300      	movs	r3, #0
 80084f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084fc:	e7a8      	b.n	8008450 <_printf_i+0x150>
 80084fe:	6923      	ldr	r3, [r4, #16]
 8008500:	4632      	mov	r2, r6
 8008502:	4649      	mov	r1, r9
 8008504:	4640      	mov	r0, r8
 8008506:	47d0      	blx	sl
 8008508:	3001      	adds	r0, #1
 800850a:	d0ab      	beq.n	8008464 <_printf_i+0x164>
 800850c:	6823      	ldr	r3, [r4, #0]
 800850e:	079b      	lsls	r3, r3, #30
 8008510:	d413      	bmi.n	800853a <_printf_i+0x23a>
 8008512:	68e0      	ldr	r0, [r4, #12]
 8008514:	9b03      	ldr	r3, [sp, #12]
 8008516:	4298      	cmp	r0, r3
 8008518:	bfb8      	it	lt
 800851a:	4618      	movlt	r0, r3
 800851c:	e7a4      	b.n	8008468 <_printf_i+0x168>
 800851e:	2301      	movs	r3, #1
 8008520:	4632      	mov	r2, r6
 8008522:	4649      	mov	r1, r9
 8008524:	4640      	mov	r0, r8
 8008526:	47d0      	blx	sl
 8008528:	3001      	adds	r0, #1
 800852a:	d09b      	beq.n	8008464 <_printf_i+0x164>
 800852c:	3501      	adds	r5, #1
 800852e:	68e3      	ldr	r3, [r4, #12]
 8008530:	9903      	ldr	r1, [sp, #12]
 8008532:	1a5b      	subs	r3, r3, r1
 8008534:	42ab      	cmp	r3, r5
 8008536:	dcf2      	bgt.n	800851e <_printf_i+0x21e>
 8008538:	e7eb      	b.n	8008512 <_printf_i+0x212>
 800853a:	2500      	movs	r5, #0
 800853c:	f104 0619 	add.w	r6, r4, #25
 8008540:	e7f5      	b.n	800852e <_printf_i+0x22e>
 8008542:	bf00      	nop
 8008544:	08008e41 	.word	0x08008e41
 8008548:	08008e52 	.word	0x08008e52

0800854c <_sbrk_r>:
 800854c:	b538      	push	{r3, r4, r5, lr}
 800854e:	4d06      	ldr	r5, [pc, #24]	; (8008568 <_sbrk_r+0x1c>)
 8008550:	2300      	movs	r3, #0
 8008552:	4604      	mov	r4, r0
 8008554:	4608      	mov	r0, r1
 8008556:	602b      	str	r3, [r5, #0]
 8008558:	f7f9 fac6 	bl	8001ae8 <_sbrk>
 800855c:	1c43      	adds	r3, r0, #1
 800855e:	d102      	bne.n	8008566 <_sbrk_r+0x1a>
 8008560:	682b      	ldr	r3, [r5, #0]
 8008562:	b103      	cbz	r3, 8008566 <_sbrk_r+0x1a>
 8008564:	6023      	str	r3, [r4, #0]
 8008566:	bd38      	pop	{r3, r4, r5, pc}
 8008568:	200047ec 	.word	0x200047ec

0800856c <__sread>:
 800856c:	b510      	push	{r4, lr}
 800856e:	460c      	mov	r4, r1
 8008570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008574:	f000 fab4 	bl	8008ae0 <_read_r>
 8008578:	2800      	cmp	r0, #0
 800857a:	bfab      	itete	ge
 800857c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800857e:	89a3      	ldrhlt	r3, [r4, #12]
 8008580:	181b      	addge	r3, r3, r0
 8008582:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008586:	bfac      	ite	ge
 8008588:	6563      	strge	r3, [r4, #84]	; 0x54
 800858a:	81a3      	strhlt	r3, [r4, #12]
 800858c:	bd10      	pop	{r4, pc}

0800858e <__swrite>:
 800858e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008592:	461f      	mov	r7, r3
 8008594:	898b      	ldrh	r3, [r1, #12]
 8008596:	05db      	lsls	r3, r3, #23
 8008598:	4605      	mov	r5, r0
 800859a:	460c      	mov	r4, r1
 800859c:	4616      	mov	r6, r2
 800859e:	d505      	bpl.n	80085ac <__swrite+0x1e>
 80085a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085a4:	2302      	movs	r3, #2
 80085a6:	2200      	movs	r2, #0
 80085a8:	f000 f9c8 	bl	800893c <_lseek_r>
 80085ac:	89a3      	ldrh	r3, [r4, #12]
 80085ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80085b6:	81a3      	strh	r3, [r4, #12]
 80085b8:	4632      	mov	r2, r6
 80085ba:	463b      	mov	r3, r7
 80085bc:	4628      	mov	r0, r5
 80085be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085c2:	f000 b869 	b.w	8008698 <_write_r>

080085c6 <__sseek>:
 80085c6:	b510      	push	{r4, lr}
 80085c8:	460c      	mov	r4, r1
 80085ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085ce:	f000 f9b5 	bl	800893c <_lseek_r>
 80085d2:	1c43      	adds	r3, r0, #1
 80085d4:	89a3      	ldrh	r3, [r4, #12]
 80085d6:	bf15      	itete	ne
 80085d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80085da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80085de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80085e2:	81a3      	strheq	r3, [r4, #12]
 80085e4:	bf18      	it	ne
 80085e6:	81a3      	strhne	r3, [r4, #12]
 80085e8:	bd10      	pop	{r4, pc}

080085ea <__sclose>:
 80085ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085ee:	f000 b8d3 	b.w	8008798 <_close_r>
	...

080085f4 <__swbuf_r>:
 80085f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085f6:	460e      	mov	r6, r1
 80085f8:	4614      	mov	r4, r2
 80085fa:	4605      	mov	r5, r0
 80085fc:	b118      	cbz	r0, 8008606 <__swbuf_r+0x12>
 80085fe:	6983      	ldr	r3, [r0, #24]
 8008600:	b90b      	cbnz	r3, 8008606 <__swbuf_r+0x12>
 8008602:	f7ff fbbb 	bl	8007d7c <__sinit>
 8008606:	4b21      	ldr	r3, [pc, #132]	; (800868c <__swbuf_r+0x98>)
 8008608:	429c      	cmp	r4, r3
 800860a:	d12b      	bne.n	8008664 <__swbuf_r+0x70>
 800860c:	686c      	ldr	r4, [r5, #4]
 800860e:	69a3      	ldr	r3, [r4, #24]
 8008610:	60a3      	str	r3, [r4, #8]
 8008612:	89a3      	ldrh	r3, [r4, #12]
 8008614:	071a      	lsls	r2, r3, #28
 8008616:	d52f      	bpl.n	8008678 <__swbuf_r+0x84>
 8008618:	6923      	ldr	r3, [r4, #16]
 800861a:	b36b      	cbz	r3, 8008678 <__swbuf_r+0x84>
 800861c:	6923      	ldr	r3, [r4, #16]
 800861e:	6820      	ldr	r0, [r4, #0]
 8008620:	1ac0      	subs	r0, r0, r3
 8008622:	6963      	ldr	r3, [r4, #20]
 8008624:	b2f6      	uxtb	r6, r6
 8008626:	4283      	cmp	r3, r0
 8008628:	4637      	mov	r7, r6
 800862a:	dc04      	bgt.n	8008636 <__swbuf_r+0x42>
 800862c:	4621      	mov	r1, r4
 800862e:	4628      	mov	r0, r5
 8008630:	f000 f948 	bl	80088c4 <_fflush_r>
 8008634:	bb30      	cbnz	r0, 8008684 <__swbuf_r+0x90>
 8008636:	68a3      	ldr	r3, [r4, #8]
 8008638:	3b01      	subs	r3, #1
 800863a:	60a3      	str	r3, [r4, #8]
 800863c:	6823      	ldr	r3, [r4, #0]
 800863e:	1c5a      	adds	r2, r3, #1
 8008640:	6022      	str	r2, [r4, #0]
 8008642:	701e      	strb	r6, [r3, #0]
 8008644:	6963      	ldr	r3, [r4, #20]
 8008646:	3001      	adds	r0, #1
 8008648:	4283      	cmp	r3, r0
 800864a:	d004      	beq.n	8008656 <__swbuf_r+0x62>
 800864c:	89a3      	ldrh	r3, [r4, #12]
 800864e:	07db      	lsls	r3, r3, #31
 8008650:	d506      	bpl.n	8008660 <__swbuf_r+0x6c>
 8008652:	2e0a      	cmp	r6, #10
 8008654:	d104      	bne.n	8008660 <__swbuf_r+0x6c>
 8008656:	4621      	mov	r1, r4
 8008658:	4628      	mov	r0, r5
 800865a:	f000 f933 	bl	80088c4 <_fflush_r>
 800865e:	b988      	cbnz	r0, 8008684 <__swbuf_r+0x90>
 8008660:	4638      	mov	r0, r7
 8008662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008664:	4b0a      	ldr	r3, [pc, #40]	; (8008690 <__swbuf_r+0x9c>)
 8008666:	429c      	cmp	r4, r3
 8008668:	d101      	bne.n	800866e <__swbuf_r+0x7a>
 800866a:	68ac      	ldr	r4, [r5, #8]
 800866c:	e7cf      	b.n	800860e <__swbuf_r+0x1a>
 800866e:	4b09      	ldr	r3, [pc, #36]	; (8008694 <__swbuf_r+0xa0>)
 8008670:	429c      	cmp	r4, r3
 8008672:	bf08      	it	eq
 8008674:	68ec      	ldreq	r4, [r5, #12]
 8008676:	e7ca      	b.n	800860e <__swbuf_r+0x1a>
 8008678:	4621      	mov	r1, r4
 800867a:	4628      	mov	r0, r5
 800867c:	f000 f81e 	bl	80086bc <__swsetup_r>
 8008680:	2800      	cmp	r0, #0
 8008682:	d0cb      	beq.n	800861c <__swbuf_r+0x28>
 8008684:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008688:	e7ea      	b.n	8008660 <__swbuf_r+0x6c>
 800868a:	bf00      	nop
 800868c:	08008df0 	.word	0x08008df0
 8008690:	08008e10 	.word	0x08008e10
 8008694:	08008dd0 	.word	0x08008dd0

08008698 <_write_r>:
 8008698:	b538      	push	{r3, r4, r5, lr}
 800869a:	4d07      	ldr	r5, [pc, #28]	; (80086b8 <_write_r+0x20>)
 800869c:	4604      	mov	r4, r0
 800869e:	4608      	mov	r0, r1
 80086a0:	4611      	mov	r1, r2
 80086a2:	2200      	movs	r2, #0
 80086a4:	602a      	str	r2, [r5, #0]
 80086a6:	461a      	mov	r2, r3
 80086a8:	f7f9 f9cd 	bl	8001a46 <_write>
 80086ac:	1c43      	adds	r3, r0, #1
 80086ae:	d102      	bne.n	80086b6 <_write_r+0x1e>
 80086b0:	682b      	ldr	r3, [r5, #0]
 80086b2:	b103      	cbz	r3, 80086b6 <_write_r+0x1e>
 80086b4:	6023      	str	r3, [r4, #0]
 80086b6:	bd38      	pop	{r3, r4, r5, pc}
 80086b8:	200047ec 	.word	0x200047ec

080086bc <__swsetup_r>:
 80086bc:	4b32      	ldr	r3, [pc, #200]	; (8008788 <__swsetup_r+0xcc>)
 80086be:	b570      	push	{r4, r5, r6, lr}
 80086c0:	681d      	ldr	r5, [r3, #0]
 80086c2:	4606      	mov	r6, r0
 80086c4:	460c      	mov	r4, r1
 80086c6:	b125      	cbz	r5, 80086d2 <__swsetup_r+0x16>
 80086c8:	69ab      	ldr	r3, [r5, #24]
 80086ca:	b913      	cbnz	r3, 80086d2 <__swsetup_r+0x16>
 80086cc:	4628      	mov	r0, r5
 80086ce:	f7ff fb55 	bl	8007d7c <__sinit>
 80086d2:	4b2e      	ldr	r3, [pc, #184]	; (800878c <__swsetup_r+0xd0>)
 80086d4:	429c      	cmp	r4, r3
 80086d6:	d10f      	bne.n	80086f8 <__swsetup_r+0x3c>
 80086d8:	686c      	ldr	r4, [r5, #4]
 80086da:	89a3      	ldrh	r3, [r4, #12]
 80086dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80086e0:	0719      	lsls	r1, r3, #28
 80086e2:	d42c      	bmi.n	800873e <__swsetup_r+0x82>
 80086e4:	06dd      	lsls	r5, r3, #27
 80086e6:	d411      	bmi.n	800870c <__swsetup_r+0x50>
 80086e8:	2309      	movs	r3, #9
 80086ea:	6033      	str	r3, [r6, #0]
 80086ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80086f0:	81a3      	strh	r3, [r4, #12]
 80086f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086f6:	e03e      	b.n	8008776 <__swsetup_r+0xba>
 80086f8:	4b25      	ldr	r3, [pc, #148]	; (8008790 <__swsetup_r+0xd4>)
 80086fa:	429c      	cmp	r4, r3
 80086fc:	d101      	bne.n	8008702 <__swsetup_r+0x46>
 80086fe:	68ac      	ldr	r4, [r5, #8]
 8008700:	e7eb      	b.n	80086da <__swsetup_r+0x1e>
 8008702:	4b24      	ldr	r3, [pc, #144]	; (8008794 <__swsetup_r+0xd8>)
 8008704:	429c      	cmp	r4, r3
 8008706:	bf08      	it	eq
 8008708:	68ec      	ldreq	r4, [r5, #12]
 800870a:	e7e6      	b.n	80086da <__swsetup_r+0x1e>
 800870c:	0758      	lsls	r0, r3, #29
 800870e:	d512      	bpl.n	8008736 <__swsetup_r+0x7a>
 8008710:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008712:	b141      	cbz	r1, 8008726 <__swsetup_r+0x6a>
 8008714:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008718:	4299      	cmp	r1, r3
 800871a:	d002      	beq.n	8008722 <__swsetup_r+0x66>
 800871c:	4630      	mov	r0, r6
 800871e:	f000 f98f 	bl	8008a40 <_free_r>
 8008722:	2300      	movs	r3, #0
 8008724:	6363      	str	r3, [r4, #52]	; 0x34
 8008726:	89a3      	ldrh	r3, [r4, #12]
 8008728:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800872c:	81a3      	strh	r3, [r4, #12]
 800872e:	2300      	movs	r3, #0
 8008730:	6063      	str	r3, [r4, #4]
 8008732:	6923      	ldr	r3, [r4, #16]
 8008734:	6023      	str	r3, [r4, #0]
 8008736:	89a3      	ldrh	r3, [r4, #12]
 8008738:	f043 0308 	orr.w	r3, r3, #8
 800873c:	81a3      	strh	r3, [r4, #12]
 800873e:	6923      	ldr	r3, [r4, #16]
 8008740:	b94b      	cbnz	r3, 8008756 <__swsetup_r+0x9a>
 8008742:	89a3      	ldrh	r3, [r4, #12]
 8008744:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008748:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800874c:	d003      	beq.n	8008756 <__swsetup_r+0x9a>
 800874e:	4621      	mov	r1, r4
 8008750:	4630      	mov	r0, r6
 8008752:	f000 f929 	bl	80089a8 <__smakebuf_r>
 8008756:	89a0      	ldrh	r0, [r4, #12]
 8008758:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800875c:	f010 0301 	ands.w	r3, r0, #1
 8008760:	d00a      	beq.n	8008778 <__swsetup_r+0xbc>
 8008762:	2300      	movs	r3, #0
 8008764:	60a3      	str	r3, [r4, #8]
 8008766:	6963      	ldr	r3, [r4, #20]
 8008768:	425b      	negs	r3, r3
 800876a:	61a3      	str	r3, [r4, #24]
 800876c:	6923      	ldr	r3, [r4, #16]
 800876e:	b943      	cbnz	r3, 8008782 <__swsetup_r+0xc6>
 8008770:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008774:	d1ba      	bne.n	80086ec <__swsetup_r+0x30>
 8008776:	bd70      	pop	{r4, r5, r6, pc}
 8008778:	0781      	lsls	r1, r0, #30
 800877a:	bf58      	it	pl
 800877c:	6963      	ldrpl	r3, [r4, #20]
 800877e:	60a3      	str	r3, [r4, #8]
 8008780:	e7f4      	b.n	800876c <__swsetup_r+0xb0>
 8008782:	2000      	movs	r0, #0
 8008784:	e7f7      	b.n	8008776 <__swsetup_r+0xba>
 8008786:	bf00      	nop
 8008788:	20000014 	.word	0x20000014
 800878c:	08008df0 	.word	0x08008df0
 8008790:	08008e10 	.word	0x08008e10
 8008794:	08008dd0 	.word	0x08008dd0

08008798 <_close_r>:
 8008798:	b538      	push	{r3, r4, r5, lr}
 800879a:	4d06      	ldr	r5, [pc, #24]	; (80087b4 <_close_r+0x1c>)
 800879c:	2300      	movs	r3, #0
 800879e:	4604      	mov	r4, r0
 80087a0:	4608      	mov	r0, r1
 80087a2:	602b      	str	r3, [r5, #0]
 80087a4:	f7f9 f96b 	bl	8001a7e <_close>
 80087a8:	1c43      	adds	r3, r0, #1
 80087aa:	d102      	bne.n	80087b2 <_close_r+0x1a>
 80087ac:	682b      	ldr	r3, [r5, #0]
 80087ae:	b103      	cbz	r3, 80087b2 <_close_r+0x1a>
 80087b0:	6023      	str	r3, [r4, #0]
 80087b2:	bd38      	pop	{r3, r4, r5, pc}
 80087b4:	200047ec 	.word	0x200047ec

080087b8 <__sflush_r>:
 80087b8:	898a      	ldrh	r2, [r1, #12]
 80087ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087be:	4605      	mov	r5, r0
 80087c0:	0710      	lsls	r0, r2, #28
 80087c2:	460c      	mov	r4, r1
 80087c4:	d458      	bmi.n	8008878 <__sflush_r+0xc0>
 80087c6:	684b      	ldr	r3, [r1, #4]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	dc05      	bgt.n	80087d8 <__sflush_r+0x20>
 80087cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	dc02      	bgt.n	80087d8 <__sflush_r+0x20>
 80087d2:	2000      	movs	r0, #0
 80087d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80087da:	2e00      	cmp	r6, #0
 80087dc:	d0f9      	beq.n	80087d2 <__sflush_r+0x1a>
 80087de:	2300      	movs	r3, #0
 80087e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80087e4:	682f      	ldr	r7, [r5, #0]
 80087e6:	602b      	str	r3, [r5, #0]
 80087e8:	d032      	beq.n	8008850 <__sflush_r+0x98>
 80087ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80087ec:	89a3      	ldrh	r3, [r4, #12]
 80087ee:	075a      	lsls	r2, r3, #29
 80087f0:	d505      	bpl.n	80087fe <__sflush_r+0x46>
 80087f2:	6863      	ldr	r3, [r4, #4]
 80087f4:	1ac0      	subs	r0, r0, r3
 80087f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80087f8:	b10b      	cbz	r3, 80087fe <__sflush_r+0x46>
 80087fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80087fc:	1ac0      	subs	r0, r0, r3
 80087fe:	2300      	movs	r3, #0
 8008800:	4602      	mov	r2, r0
 8008802:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008804:	6a21      	ldr	r1, [r4, #32]
 8008806:	4628      	mov	r0, r5
 8008808:	47b0      	blx	r6
 800880a:	1c43      	adds	r3, r0, #1
 800880c:	89a3      	ldrh	r3, [r4, #12]
 800880e:	d106      	bne.n	800881e <__sflush_r+0x66>
 8008810:	6829      	ldr	r1, [r5, #0]
 8008812:	291d      	cmp	r1, #29
 8008814:	d82c      	bhi.n	8008870 <__sflush_r+0xb8>
 8008816:	4a2a      	ldr	r2, [pc, #168]	; (80088c0 <__sflush_r+0x108>)
 8008818:	40ca      	lsrs	r2, r1
 800881a:	07d6      	lsls	r6, r2, #31
 800881c:	d528      	bpl.n	8008870 <__sflush_r+0xb8>
 800881e:	2200      	movs	r2, #0
 8008820:	6062      	str	r2, [r4, #4]
 8008822:	04d9      	lsls	r1, r3, #19
 8008824:	6922      	ldr	r2, [r4, #16]
 8008826:	6022      	str	r2, [r4, #0]
 8008828:	d504      	bpl.n	8008834 <__sflush_r+0x7c>
 800882a:	1c42      	adds	r2, r0, #1
 800882c:	d101      	bne.n	8008832 <__sflush_r+0x7a>
 800882e:	682b      	ldr	r3, [r5, #0]
 8008830:	b903      	cbnz	r3, 8008834 <__sflush_r+0x7c>
 8008832:	6560      	str	r0, [r4, #84]	; 0x54
 8008834:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008836:	602f      	str	r7, [r5, #0]
 8008838:	2900      	cmp	r1, #0
 800883a:	d0ca      	beq.n	80087d2 <__sflush_r+0x1a>
 800883c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008840:	4299      	cmp	r1, r3
 8008842:	d002      	beq.n	800884a <__sflush_r+0x92>
 8008844:	4628      	mov	r0, r5
 8008846:	f000 f8fb 	bl	8008a40 <_free_r>
 800884a:	2000      	movs	r0, #0
 800884c:	6360      	str	r0, [r4, #52]	; 0x34
 800884e:	e7c1      	b.n	80087d4 <__sflush_r+0x1c>
 8008850:	6a21      	ldr	r1, [r4, #32]
 8008852:	2301      	movs	r3, #1
 8008854:	4628      	mov	r0, r5
 8008856:	47b0      	blx	r6
 8008858:	1c41      	adds	r1, r0, #1
 800885a:	d1c7      	bne.n	80087ec <__sflush_r+0x34>
 800885c:	682b      	ldr	r3, [r5, #0]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d0c4      	beq.n	80087ec <__sflush_r+0x34>
 8008862:	2b1d      	cmp	r3, #29
 8008864:	d001      	beq.n	800886a <__sflush_r+0xb2>
 8008866:	2b16      	cmp	r3, #22
 8008868:	d101      	bne.n	800886e <__sflush_r+0xb6>
 800886a:	602f      	str	r7, [r5, #0]
 800886c:	e7b1      	b.n	80087d2 <__sflush_r+0x1a>
 800886e:	89a3      	ldrh	r3, [r4, #12]
 8008870:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008874:	81a3      	strh	r3, [r4, #12]
 8008876:	e7ad      	b.n	80087d4 <__sflush_r+0x1c>
 8008878:	690f      	ldr	r7, [r1, #16]
 800887a:	2f00      	cmp	r7, #0
 800887c:	d0a9      	beq.n	80087d2 <__sflush_r+0x1a>
 800887e:	0793      	lsls	r3, r2, #30
 8008880:	680e      	ldr	r6, [r1, #0]
 8008882:	bf08      	it	eq
 8008884:	694b      	ldreq	r3, [r1, #20]
 8008886:	600f      	str	r7, [r1, #0]
 8008888:	bf18      	it	ne
 800888a:	2300      	movne	r3, #0
 800888c:	eba6 0807 	sub.w	r8, r6, r7
 8008890:	608b      	str	r3, [r1, #8]
 8008892:	f1b8 0f00 	cmp.w	r8, #0
 8008896:	dd9c      	ble.n	80087d2 <__sflush_r+0x1a>
 8008898:	6a21      	ldr	r1, [r4, #32]
 800889a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800889c:	4643      	mov	r3, r8
 800889e:	463a      	mov	r2, r7
 80088a0:	4628      	mov	r0, r5
 80088a2:	47b0      	blx	r6
 80088a4:	2800      	cmp	r0, #0
 80088a6:	dc06      	bgt.n	80088b6 <__sflush_r+0xfe>
 80088a8:	89a3      	ldrh	r3, [r4, #12]
 80088aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088ae:	81a3      	strh	r3, [r4, #12]
 80088b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088b4:	e78e      	b.n	80087d4 <__sflush_r+0x1c>
 80088b6:	4407      	add	r7, r0
 80088b8:	eba8 0800 	sub.w	r8, r8, r0
 80088bc:	e7e9      	b.n	8008892 <__sflush_r+0xda>
 80088be:	bf00      	nop
 80088c0:	20400001 	.word	0x20400001

080088c4 <_fflush_r>:
 80088c4:	b538      	push	{r3, r4, r5, lr}
 80088c6:	690b      	ldr	r3, [r1, #16]
 80088c8:	4605      	mov	r5, r0
 80088ca:	460c      	mov	r4, r1
 80088cc:	b913      	cbnz	r3, 80088d4 <_fflush_r+0x10>
 80088ce:	2500      	movs	r5, #0
 80088d0:	4628      	mov	r0, r5
 80088d2:	bd38      	pop	{r3, r4, r5, pc}
 80088d4:	b118      	cbz	r0, 80088de <_fflush_r+0x1a>
 80088d6:	6983      	ldr	r3, [r0, #24]
 80088d8:	b90b      	cbnz	r3, 80088de <_fflush_r+0x1a>
 80088da:	f7ff fa4f 	bl	8007d7c <__sinit>
 80088de:	4b14      	ldr	r3, [pc, #80]	; (8008930 <_fflush_r+0x6c>)
 80088e0:	429c      	cmp	r4, r3
 80088e2:	d11b      	bne.n	800891c <_fflush_r+0x58>
 80088e4:	686c      	ldr	r4, [r5, #4]
 80088e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d0ef      	beq.n	80088ce <_fflush_r+0xa>
 80088ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80088f0:	07d0      	lsls	r0, r2, #31
 80088f2:	d404      	bmi.n	80088fe <_fflush_r+0x3a>
 80088f4:	0599      	lsls	r1, r3, #22
 80088f6:	d402      	bmi.n	80088fe <_fflush_r+0x3a>
 80088f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088fa:	f7ff fadd 	bl	8007eb8 <__retarget_lock_acquire_recursive>
 80088fe:	4628      	mov	r0, r5
 8008900:	4621      	mov	r1, r4
 8008902:	f7ff ff59 	bl	80087b8 <__sflush_r>
 8008906:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008908:	07da      	lsls	r2, r3, #31
 800890a:	4605      	mov	r5, r0
 800890c:	d4e0      	bmi.n	80088d0 <_fflush_r+0xc>
 800890e:	89a3      	ldrh	r3, [r4, #12]
 8008910:	059b      	lsls	r3, r3, #22
 8008912:	d4dd      	bmi.n	80088d0 <_fflush_r+0xc>
 8008914:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008916:	f7ff fad0 	bl	8007eba <__retarget_lock_release_recursive>
 800891a:	e7d9      	b.n	80088d0 <_fflush_r+0xc>
 800891c:	4b05      	ldr	r3, [pc, #20]	; (8008934 <_fflush_r+0x70>)
 800891e:	429c      	cmp	r4, r3
 8008920:	d101      	bne.n	8008926 <_fflush_r+0x62>
 8008922:	68ac      	ldr	r4, [r5, #8]
 8008924:	e7df      	b.n	80088e6 <_fflush_r+0x22>
 8008926:	4b04      	ldr	r3, [pc, #16]	; (8008938 <_fflush_r+0x74>)
 8008928:	429c      	cmp	r4, r3
 800892a:	bf08      	it	eq
 800892c:	68ec      	ldreq	r4, [r5, #12]
 800892e:	e7da      	b.n	80088e6 <_fflush_r+0x22>
 8008930:	08008df0 	.word	0x08008df0
 8008934:	08008e10 	.word	0x08008e10
 8008938:	08008dd0 	.word	0x08008dd0

0800893c <_lseek_r>:
 800893c:	b538      	push	{r3, r4, r5, lr}
 800893e:	4d07      	ldr	r5, [pc, #28]	; (800895c <_lseek_r+0x20>)
 8008940:	4604      	mov	r4, r0
 8008942:	4608      	mov	r0, r1
 8008944:	4611      	mov	r1, r2
 8008946:	2200      	movs	r2, #0
 8008948:	602a      	str	r2, [r5, #0]
 800894a:	461a      	mov	r2, r3
 800894c:	f7f9 f8be 	bl	8001acc <_lseek>
 8008950:	1c43      	adds	r3, r0, #1
 8008952:	d102      	bne.n	800895a <_lseek_r+0x1e>
 8008954:	682b      	ldr	r3, [r5, #0]
 8008956:	b103      	cbz	r3, 800895a <_lseek_r+0x1e>
 8008958:	6023      	str	r3, [r4, #0]
 800895a:	bd38      	pop	{r3, r4, r5, pc}
 800895c:	200047ec 	.word	0x200047ec

08008960 <__swhatbuf_r>:
 8008960:	b570      	push	{r4, r5, r6, lr}
 8008962:	460e      	mov	r6, r1
 8008964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008968:	2900      	cmp	r1, #0
 800896a:	b096      	sub	sp, #88	; 0x58
 800896c:	4614      	mov	r4, r2
 800896e:	461d      	mov	r5, r3
 8008970:	da07      	bge.n	8008982 <__swhatbuf_r+0x22>
 8008972:	2300      	movs	r3, #0
 8008974:	602b      	str	r3, [r5, #0]
 8008976:	89b3      	ldrh	r3, [r6, #12]
 8008978:	061a      	lsls	r2, r3, #24
 800897a:	d410      	bmi.n	800899e <__swhatbuf_r+0x3e>
 800897c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008980:	e00e      	b.n	80089a0 <__swhatbuf_r+0x40>
 8008982:	466a      	mov	r2, sp
 8008984:	f000 f8be 	bl	8008b04 <_fstat_r>
 8008988:	2800      	cmp	r0, #0
 800898a:	dbf2      	blt.n	8008972 <__swhatbuf_r+0x12>
 800898c:	9a01      	ldr	r2, [sp, #4]
 800898e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008992:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008996:	425a      	negs	r2, r3
 8008998:	415a      	adcs	r2, r3
 800899a:	602a      	str	r2, [r5, #0]
 800899c:	e7ee      	b.n	800897c <__swhatbuf_r+0x1c>
 800899e:	2340      	movs	r3, #64	; 0x40
 80089a0:	2000      	movs	r0, #0
 80089a2:	6023      	str	r3, [r4, #0]
 80089a4:	b016      	add	sp, #88	; 0x58
 80089a6:	bd70      	pop	{r4, r5, r6, pc}

080089a8 <__smakebuf_r>:
 80089a8:	898b      	ldrh	r3, [r1, #12]
 80089aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80089ac:	079d      	lsls	r5, r3, #30
 80089ae:	4606      	mov	r6, r0
 80089b0:	460c      	mov	r4, r1
 80089b2:	d507      	bpl.n	80089c4 <__smakebuf_r+0x1c>
 80089b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80089b8:	6023      	str	r3, [r4, #0]
 80089ba:	6123      	str	r3, [r4, #16]
 80089bc:	2301      	movs	r3, #1
 80089be:	6163      	str	r3, [r4, #20]
 80089c0:	b002      	add	sp, #8
 80089c2:	bd70      	pop	{r4, r5, r6, pc}
 80089c4:	ab01      	add	r3, sp, #4
 80089c6:	466a      	mov	r2, sp
 80089c8:	f7ff ffca 	bl	8008960 <__swhatbuf_r>
 80089cc:	9900      	ldr	r1, [sp, #0]
 80089ce:	4605      	mov	r5, r0
 80089d0:	4630      	mov	r0, r6
 80089d2:	f7ff fa73 	bl	8007ebc <_malloc_r>
 80089d6:	b948      	cbnz	r0, 80089ec <__smakebuf_r+0x44>
 80089d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089dc:	059a      	lsls	r2, r3, #22
 80089de:	d4ef      	bmi.n	80089c0 <__smakebuf_r+0x18>
 80089e0:	f023 0303 	bic.w	r3, r3, #3
 80089e4:	f043 0302 	orr.w	r3, r3, #2
 80089e8:	81a3      	strh	r3, [r4, #12]
 80089ea:	e7e3      	b.n	80089b4 <__smakebuf_r+0xc>
 80089ec:	4b0d      	ldr	r3, [pc, #52]	; (8008a24 <__smakebuf_r+0x7c>)
 80089ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80089f0:	89a3      	ldrh	r3, [r4, #12]
 80089f2:	6020      	str	r0, [r4, #0]
 80089f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089f8:	81a3      	strh	r3, [r4, #12]
 80089fa:	9b00      	ldr	r3, [sp, #0]
 80089fc:	6163      	str	r3, [r4, #20]
 80089fe:	9b01      	ldr	r3, [sp, #4]
 8008a00:	6120      	str	r0, [r4, #16]
 8008a02:	b15b      	cbz	r3, 8008a1c <__smakebuf_r+0x74>
 8008a04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a08:	4630      	mov	r0, r6
 8008a0a:	f000 f88d 	bl	8008b28 <_isatty_r>
 8008a0e:	b128      	cbz	r0, 8008a1c <__smakebuf_r+0x74>
 8008a10:	89a3      	ldrh	r3, [r4, #12]
 8008a12:	f023 0303 	bic.w	r3, r3, #3
 8008a16:	f043 0301 	orr.w	r3, r3, #1
 8008a1a:	81a3      	strh	r3, [r4, #12]
 8008a1c:	89a0      	ldrh	r0, [r4, #12]
 8008a1e:	4305      	orrs	r5, r0
 8008a20:	81a5      	strh	r5, [r4, #12]
 8008a22:	e7cd      	b.n	80089c0 <__smakebuf_r+0x18>
 8008a24:	08007d15 	.word	0x08007d15

08008a28 <__malloc_lock>:
 8008a28:	4801      	ldr	r0, [pc, #4]	; (8008a30 <__malloc_lock+0x8>)
 8008a2a:	f7ff ba45 	b.w	8007eb8 <__retarget_lock_acquire_recursive>
 8008a2e:	bf00      	nop
 8008a30:	200047e4 	.word	0x200047e4

08008a34 <__malloc_unlock>:
 8008a34:	4801      	ldr	r0, [pc, #4]	; (8008a3c <__malloc_unlock+0x8>)
 8008a36:	f7ff ba40 	b.w	8007eba <__retarget_lock_release_recursive>
 8008a3a:	bf00      	nop
 8008a3c:	200047e4 	.word	0x200047e4

08008a40 <_free_r>:
 8008a40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a42:	2900      	cmp	r1, #0
 8008a44:	d048      	beq.n	8008ad8 <_free_r+0x98>
 8008a46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a4a:	9001      	str	r0, [sp, #4]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	f1a1 0404 	sub.w	r4, r1, #4
 8008a52:	bfb8      	it	lt
 8008a54:	18e4      	addlt	r4, r4, r3
 8008a56:	f7ff ffe7 	bl	8008a28 <__malloc_lock>
 8008a5a:	4a20      	ldr	r2, [pc, #128]	; (8008adc <_free_r+0x9c>)
 8008a5c:	9801      	ldr	r0, [sp, #4]
 8008a5e:	6813      	ldr	r3, [r2, #0]
 8008a60:	4615      	mov	r5, r2
 8008a62:	b933      	cbnz	r3, 8008a72 <_free_r+0x32>
 8008a64:	6063      	str	r3, [r4, #4]
 8008a66:	6014      	str	r4, [r2, #0]
 8008a68:	b003      	add	sp, #12
 8008a6a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a6e:	f7ff bfe1 	b.w	8008a34 <__malloc_unlock>
 8008a72:	42a3      	cmp	r3, r4
 8008a74:	d90b      	bls.n	8008a8e <_free_r+0x4e>
 8008a76:	6821      	ldr	r1, [r4, #0]
 8008a78:	1862      	adds	r2, r4, r1
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	bf04      	itt	eq
 8008a7e:	681a      	ldreq	r2, [r3, #0]
 8008a80:	685b      	ldreq	r3, [r3, #4]
 8008a82:	6063      	str	r3, [r4, #4]
 8008a84:	bf04      	itt	eq
 8008a86:	1852      	addeq	r2, r2, r1
 8008a88:	6022      	streq	r2, [r4, #0]
 8008a8a:	602c      	str	r4, [r5, #0]
 8008a8c:	e7ec      	b.n	8008a68 <_free_r+0x28>
 8008a8e:	461a      	mov	r2, r3
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	b10b      	cbz	r3, 8008a98 <_free_r+0x58>
 8008a94:	42a3      	cmp	r3, r4
 8008a96:	d9fa      	bls.n	8008a8e <_free_r+0x4e>
 8008a98:	6811      	ldr	r1, [r2, #0]
 8008a9a:	1855      	adds	r5, r2, r1
 8008a9c:	42a5      	cmp	r5, r4
 8008a9e:	d10b      	bne.n	8008ab8 <_free_r+0x78>
 8008aa0:	6824      	ldr	r4, [r4, #0]
 8008aa2:	4421      	add	r1, r4
 8008aa4:	1854      	adds	r4, r2, r1
 8008aa6:	42a3      	cmp	r3, r4
 8008aa8:	6011      	str	r1, [r2, #0]
 8008aaa:	d1dd      	bne.n	8008a68 <_free_r+0x28>
 8008aac:	681c      	ldr	r4, [r3, #0]
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	6053      	str	r3, [r2, #4]
 8008ab2:	4421      	add	r1, r4
 8008ab4:	6011      	str	r1, [r2, #0]
 8008ab6:	e7d7      	b.n	8008a68 <_free_r+0x28>
 8008ab8:	d902      	bls.n	8008ac0 <_free_r+0x80>
 8008aba:	230c      	movs	r3, #12
 8008abc:	6003      	str	r3, [r0, #0]
 8008abe:	e7d3      	b.n	8008a68 <_free_r+0x28>
 8008ac0:	6825      	ldr	r5, [r4, #0]
 8008ac2:	1961      	adds	r1, r4, r5
 8008ac4:	428b      	cmp	r3, r1
 8008ac6:	bf04      	itt	eq
 8008ac8:	6819      	ldreq	r1, [r3, #0]
 8008aca:	685b      	ldreq	r3, [r3, #4]
 8008acc:	6063      	str	r3, [r4, #4]
 8008ace:	bf04      	itt	eq
 8008ad0:	1949      	addeq	r1, r1, r5
 8008ad2:	6021      	streq	r1, [r4, #0]
 8008ad4:	6054      	str	r4, [r2, #4]
 8008ad6:	e7c7      	b.n	8008a68 <_free_r+0x28>
 8008ad8:	b003      	add	sp, #12
 8008ada:	bd30      	pop	{r4, r5, pc}
 8008adc:	200045c4 	.word	0x200045c4

08008ae0 <_read_r>:
 8008ae0:	b538      	push	{r3, r4, r5, lr}
 8008ae2:	4d07      	ldr	r5, [pc, #28]	; (8008b00 <_read_r+0x20>)
 8008ae4:	4604      	mov	r4, r0
 8008ae6:	4608      	mov	r0, r1
 8008ae8:	4611      	mov	r1, r2
 8008aea:	2200      	movs	r2, #0
 8008aec:	602a      	str	r2, [r5, #0]
 8008aee:	461a      	mov	r2, r3
 8008af0:	f7f8 ff8c 	bl	8001a0c <_read>
 8008af4:	1c43      	adds	r3, r0, #1
 8008af6:	d102      	bne.n	8008afe <_read_r+0x1e>
 8008af8:	682b      	ldr	r3, [r5, #0]
 8008afa:	b103      	cbz	r3, 8008afe <_read_r+0x1e>
 8008afc:	6023      	str	r3, [r4, #0]
 8008afe:	bd38      	pop	{r3, r4, r5, pc}
 8008b00:	200047ec 	.word	0x200047ec

08008b04 <_fstat_r>:
 8008b04:	b538      	push	{r3, r4, r5, lr}
 8008b06:	4d07      	ldr	r5, [pc, #28]	; (8008b24 <_fstat_r+0x20>)
 8008b08:	2300      	movs	r3, #0
 8008b0a:	4604      	mov	r4, r0
 8008b0c:	4608      	mov	r0, r1
 8008b0e:	4611      	mov	r1, r2
 8008b10:	602b      	str	r3, [r5, #0]
 8008b12:	f7f8 ffc0 	bl	8001a96 <_fstat>
 8008b16:	1c43      	adds	r3, r0, #1
 8008b18:	d102      	bne.n	8008b20 <_fstat_r+0x1c>
 8008b1a:	682b      	ldr	r3, [r5, #0]
 8008b1c:	b103      	cbz	r3, 8008b20 <_fstat_r+0x1c>
 8008b1e:	6023      	str	r3, [r4, #0]
 8008b20:	bd38      	pop	{r3, r4, r5, pc}
 8008b22:	bf00      	nop
 8008b24:	200047ec 	.word	0x200047ec

08008b28 <_isatty_r>:
 8008b28:	b538      	push	{r3, r4, r5, lr}
 8008b2a:	4d06      	ldr	r5, [pc, #24]	; (8008b44 <_isatty_r+0x1c>)
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	4604      	mov	r4, r0
 8008b30:	4608      	mov	r0, r1
 8008b32:	602b      	str	r3, [r5, #0]
 8008b34:	f7f8 ffbf 	bl	8001ab6 <_isatty>
 8008b38:	1c43      	adds	r3, r0, #1
 8008b3a:	d102      	bne.n	8008b42 <_isatty_r+0x1a>
 8008b3c:	682b      	ldr	r3, [r5, #0]
 8008b3e:	b103      	cbz	r3, 8008b42 <_isatty_r+0x1a>
 8008b40:	6023      	str	r3, [r4, #0]
 8008b42:	bd38      	pop	{r3, r4, r5, pc}
 8008b44:	200047ec 	.word	0x200047ec

08008b48 <_init>:
 8008b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b4a:	bf00      	nop
 8008b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b4e:	bc08      	pop	{r3}
 8008b50:	469e      	mov	lr, r3
 8008b52:	4770      	bx	lr

08008b54 <_fini>:
 8008b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b56:	bf00      	nop
 8008b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b5a:	bc08      	pop	{r3}
 8008b5c:	469e      	mov	lr, r3
 8008b5e:	4770      	bx	lr
