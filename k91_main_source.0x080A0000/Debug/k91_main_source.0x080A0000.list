
k91_main_source.0x080A0000.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000249f0  080a0190  080a0190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00018f60  080c4b80  080c4b80  00034b80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080ddae0  080ddae0  00057e94  2**0
                  CONTENTS
  4 .ARM          00000008  080ddae0  080ddae0  0004dae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080ddae8  080ddae8  00057e94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080ddae8  080ddae8  0004dae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080ddaec  080ddaec  0004daec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000e94  20007000  080ddaf0  00057000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000144fc  20007e98  080de984  00057e98  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2001c394  080de984  0005c394  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00057e94  2**0
                  CONTENTS, READONLY
 12 .debug_info   0007e906  00000000  00000000  00057ec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000bfd0  00000000  00000000  000d67ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003c58  00000000  00000000  000e27a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003848  00000000  00000000  000e63f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003498a  00000000  00000000  000e9c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00048773  00000000  00000000  0011e5ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001b1e0a  00000000  00000000  00166d3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000ce  00000000  00000000  00318b47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000112e0  00000000  00000000  00318c18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080a0190 <__do_global_dtors_aux>:
 80a0190:	b510      	push	{r4, lr}
 80a0192:	4c05      	ldr	r4, [pc, #20]	; (80a01a8 <__do_global_dtors_aux+0x18>)
 80a0194:	7823      	ldrb	r3, [r4, #0]
 80a0196:	b933      	cbnz	r3, 80a01a6 <__do_global_dtors_aux+0x16>
 80a0198:	4b04      	ldr	r3, [pc, #16]	; (80a01ac <__do_global_dtors_aux+0x1c>)
 80a019a:	b113      	cbz	r3, 80a01a2 <__do_global_dtors_aux+0x12>
 80a019c:	4804      	ldr	r0, [pc, #16]	; (80a01b0 <__do_global_dtors_aux+0x20>)
 80a019e:	f3af 8000 	nop.w
 80a01a2:	2301      	movs	r3, #1
 80a01a4:	7023      	strb	r3, [r4, #0]
 80a01a6:	bd10      	pop	{r4, pc}
 80a01a8:	20007e98 	.word	0x20007e98
 80a01ac:	00000000 	.word	0x00000000
 80a01b0:	080c4b68 	.word	0x080c4b68

080a01b4 <frame_dummy>:
 80a01b4:	b508      	push	{r3, lr}
 80a01b6:	4b03      	ldr	r3, [pc, #12]	; (80a01c4 <frame_dummy+0x10>)
 80a01b8:	b11b      	cbz	r3, 80a01c2 <frame_dummy+0xe>
 80a01ba:	4903      	ldr	r1, [pc, #12]	; (80a01c8 <frame_dummy+0x14>)
 80a01bc:	4803      	ldr	r0, [pc, #12]	; (80a01cc <frame_dummy+0x18>)
 80a01be:	f3af 8000 	nop.w
 80a01c2:	bd08      	pop	{r3, pc}
 80a01c4:	00000000 	.word	0x00000000
 80a01c8:	20007e9c 	.word	0x20007e9c
 80a01cc:	080c4b68 	.word	0x080c4b68

080a01d0 <strlen>:
 80a01d0:	4603      	mov	r3, r0
 80a01d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a01d6:	2a00      	cmp	r2, #0
 80a01d8:	d1fb      	bne.n	80a01d2 <strlen+0x2>
 80a01da:	1a18      	subs	r0, r3, r0
 80a01dc:	3801      	subs	r0, #1
 80a01de:	4770      	bx	lr

080a01e0 <memchr>:
 80a01e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80a01e4:	2a10      	cmp	r2, #16
 80a01e6:	db2b      	blt.n	80a0240 <memchr+0x60>
 80a01e8:	f010 0f07 	tst.w	r0, #7
 80a01ec:	d008      	beq.n	80a0200 <memchr+0x20>
 80a01ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80a01f2:	3a01      	subs	r2, #1
 80a01f4:	428b      	cmp	r3, r1
 80a01f6:	d02d      	beq.n	80a0254 <memchr+0x74>
 80a01f8:	f010 0f07 	tst.w	r0, #7
 80a01fc:	b342      	cbz	r2, 80a0250 <memchr+0x70>
 80a01fe:	d1f6      	bne.n	80a01ee <memchr+0xe>
 80a0200:	b4f0      	push	{r4, r5, r6, r7}
 80a0202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80a0206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80a020a:	f022 0407 	bic.w	r4, r2, #7
 80a020e:	f07f 0700 	mvns.w	r7, #0
 80a0212:	2300      	movs	r3, #0
 80a0214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80a0218:	3c08      	subs	r4, #8
 80a021a:	ea85 0501 	eor.w	r5, r5, r1
 80a021e:	ea86 0601 	eor.w	r6, r6, r1
 80a0222:	fa85 f547 	uadd8	r5, r5, r7
 80a0226:	faa3 f587 	sel	r5, r3, r7
 80a022a:	fa86 f647 	uadd8	r6, r6, r7
 80a022e:	faa5 f687 	sel	r6, r5, r7
 80a0232:	b98e      	cbnz	r6, 80a0258 <memchr+0x78>
 80a0234:	d1ee      	bne.n	80a0214 <memchr+0x34>
 80a0236:	bcf0      	pop	{r4, r5, r6, r7}
 80a0238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80a023c:	f002 0207 	and.w	r2, r2, #7
 80a0240:	b132      	cbz	r2, 80a0250 <memchr+0x70>
 80a0242:	f810 3b01 	ldrb.w	r3, [r0], #1
 80a0246:	3a01      	subs	r2, #1
 80a0248:	ea83 0301 	eor.w	r3, r3, r1
 80a024c:	b113      	cbz	r3, 80a0254 <memchr+0x74>
 80a024e:	d1f8      	bne.n	80a0242 <memchr+0x62>
 80a0250:	2000      	movs	r0, #0
 80a0252:	4770      	bx	lr
 80a0254:	3801      	subs	r0, #1
 80a0256:	4770      	bx	lr
 80a0258:	2d00      	cmp	r5, #0
 80a025a:	bf06      	itte	eq
 80a025c:	4635      	moveq	r5, r6
 80a025e:	3803      	subeq	r0, #3
 80a0260:	3807      	subne	r0, #7
 80a0262:	f015 0f01 	tst.w	r5, #1
 80a0266:	d107      	bne.n	80a0278 <memchr+0x98>
 80a0268:	3001      	adds	r0, #1
 80a026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 80a026e:	bf02      	ittt	eq
 80a0270:	3001      	addeq	r0, #1
 80a0272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80a0276:	3001      	addeq	r0, #1
 80a0278:	bcf0      	pop	{r4, r5, r6, r7}
 80a027a:	3801      	subs	r0, #1
 80a027c:	4770      	bx	lr
 80a027e:	bf00      	nop

080a0280 <__aeabi_drsub>:
 80a0280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a0284:	e002      	b.n	80a028c <__adddf3>
 80a0286:	bf00      	nop

080a0288 <__aeabi_dsub>:
 80a0288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a028c <__adddf3>:
 80a028c:	b530      	push	{r4, r5, lr}
 80a028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a0292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a0296:	ea94 0f05 	teq	r4, r5
 80a029a:	bf08      	it	eq
 80a029c:	ea90 0f02 	teqeq	r0, r2
 80a02a0:	bf1f      	itttt	ne
 80a02a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a02a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a02aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a02ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a02b2:	f000 80e2 	beq.w	80a047a <__adddf3+0x1ee>
 80a02b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a02ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a02be:	bfb8      	it	lt
 80a02c0:	426d      	neglt	r5, r5
 80a02c2:	dd0c      	ble.n	80a02de <__adddf3+0x52>
 80a02c4:	442c      	add	r4, r5
 80a02c6:	ea80 0202 	eor.w	r2, r0, r2
 80a02ca:	ea81 0303 	eor.w	r3, r1, r3
 80a02ce:	ea82 0000 	eor.w	r0, r2, r0
 80a02d2:	ea83 0101 	eor.w	r1, r3, r1
 80a02d6:	ea80 0202 	eor.w	r2, r0, r2
 80a02da:	ea81 0303 	eor.w	r3, r1, r3
 80a02de:	2d36      	cmp	r5, #54	; 0x36
 80a02e0:	bf88      	it	hi
 80a02e2:	bd30      	pophi	{r4, r5, pc}
 80a02e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a02e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a02ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a02f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a02f4:	d002      	beq.n	80a02fc <__adddf3+0x70>
 80a02f6:	4240      	negs	r0, r0
 80a02f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a02fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a0300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a0304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a0308:	d002      	beq.n	80a0310 <__adddf3+0x84>
 80a030a:	4252      	negs	r2, r2
 80a030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a0310:	ea94 0f05 	teq	r4, r5
 80a0314:	f000 80a7 	beq.w	80a0466 <__adddf3+0x1da>
 80a0318:	f1a4 0401 	sub.w	r4, r4, #1
 80a031c:	f1d5 0e20 	rsbs	lr, r5, #32
 80a0320:	db0d      	blt.n	80a033e <__adddf3+0xb2>
 80a0322:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a0326:	fa22 f205 	lsr.w	r2, r2, r5
 80a032a:	1880      	adds	r0, r0, r2
 80a032c:	f141 0100 	adc.w	r1, r1, #0
 80a0330:	fa03 f20e 	lsl.w	r2, r3, lr
 80a0334:	1880      	adds	r0, r0, r2
 80a0336:	fa43 f305 	asr.w	r3, r3, r5
 80a033a:	4159      	adcs	r1, r3
 80a033c:	e00e      	b.n	80a035c <__adddf3+0xd0>
 80a033e:	f1a5 0520 	sub.w	r5, r5, #32
 80a0342:	f10e 0e20 	add.w	lr, lr, #32
 80a0346:	2a01      	cmp	r2, #1
 80a0348:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a034c:	bf28      	it	cs
 80a034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a0352:	fa43 f305 	asr.w	r3, r3, r5
 80a0356:	18c0      	adds	r0, r0, r3
 80a0358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a0360:	d507      	bpl.n	80a0372 <__adddf3+0xe6>
 80a0362:	f04f 0e00 	mov.w	lr, #0
 80a0366:	f1dc 0c00 	rsbs	ip, ip, #0
 80a036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a036e:	eb6e 0101 	sbc.w	r1, lr, r1
 80a0372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a0376:	d31b      	bcc.n	80a03b0 <__adddf3+0x124>
 80a0378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a037c:	d30c      	bcc.n	80a0398 <__adddf3+0x10c>
 80a037e:	0849      	lsrs	r1, r1, #1
 80a0380:	ea5f 0030 	movs.w	r0, r0, rrx
 80a0384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a0388:	f104 0401 	add.w	r4, r4, #1
 80a038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a0390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a0394:	f080 809a 	bcs.w	80a04cc <__adddf3+0x240>
 80a0398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a039c:	bf08      	it	eq
 80a039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a03a2:	f150 0000 	adcs.w	r0, r0, #0
 80a03a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a03aa:	ea41 0105 	orr.w	r1, r1, r5
 80a03ae:	bd30      	pop	{r4, r5, pc}
 80a03b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a03b4:	4140      	adcs	r0, r0
 80a03b6:	eb41 0101 	adc.w	r1, r1, r1
 80a03ba:	3c01      	subs	r4, #1
 80a03bc:	bf28      	it	cs
 80a03be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80a03c2:	d2e9      	bcs.n	80a0398 <__adddf3+0x10c>
 80a03c4:	f091 0f00 	teq	r1, #0
 80a03c8:	bf04      	itt	eq
 80a03ca:	4601      	moveq	r1, r0
 80a03cc:	2000      	moveq	r0, #0
 80a03ce:	fab1 f381 	clz	r3, r1
 80a03d2:	bf08      	it	eq
 80a03d4:	3320      	addeq	r3, #32
 80a03d6:	f1a3 030b 	sub.w	r3, r3, #11
 80a03da:	f1b3 0220 	subs.w	r2, r3, #32
 80a03de:	da0c      	bge.n	80a03fa <__adddf3+0x16e>
 80a03e0:	320c      	adds	r2, #12
 80a03e2:	dd08      	ble.n	80a03f6 <__adddf3+0x16a>
 80a03e4:	f102 0c14 	add.w	ip, r2, #20
 80a03e8:	f1c2 020c 	rsb	r2, r2, #12
 80a03ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80a03f0:	fa21 f102 	lsr.w	r1, r1, r2
 80a03f4:	e00c      	b.n	80a0410 <__adddf3+0x184>
 80a03f6:	f102 0214 	add.w	r2, r2, #20
 80a03fa:	bfd8      	it	le
 80a03fc:	f1c2 0c20 	rsble	ip, r2, #32
 80a0400:	fa01 f102 	lsl.w	r1, r1, r2
 80a0404:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a0408:	bfdc      	itt	le
 80a040a:	ea41 010c 	orrle.w	r1, r1, ip
 80a040e:	4090      	lslle	r0, r2
 80a0410:	1ae4      	subs	r4, r4, r3
 80a0412:	bfa2      	ittt	ge
 80a0414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a0418:	4329      	orrge	r1, r5
 80a041a:	bd30      	popge	{r4, r5, pc}
 80a041c:	ea6f 0404 	mvn.w	r4, r4
 80a0420:	3c1f      	subs	r4, #31
 80a0422:	da1c      	bge.n	80a045e <__adddf3+0x1d2>
 80a0424:	340c      	adds	r4, #12
 80a0426:	dc0e      	bgt.n	80a0446 <__adddf3+0x1ba>
 80a0428:	f104 0414 	add.w	r4, r4, #20
 80a042c:	f1c4 0220 	rsb	r2, r4, #32
 80a0430:	fa20 f004 	lsr.w	r0, r0, r4
 80a0434:	fa01 f302 	lsl.w	r3, r1, r2
 80a0438:	ea40 0003 	orr.w	r0, r0, r3
 80a043c:	fa21 f304 	lsr.w	r3, r1, r4
 80a0440:	ea45 0103 	orr.w	r1, r5, r3
 80a0444:	bd30      	pop	{r4, r5, pc}
 80a0446:	f1c4 040c 	rsb	r4, r4, #12
 80a044a:	f1c4 0220 	rsb	r2, r4, #32
 80a044e:	fa20 f002 	lsr.w	r0, r0, r2
 80a0452:	fa01 f304 	lsl.w	r3, r1, r4
 80a0456:	ea40 0003 	orr.w	r0, r0, r3
 80a045a:	4629      	mov	r1, r5
 80a045c:	bd30      	pop	{r4, r5, pc}
 80a045e:	fa21 f004 	lsr.w	r0, r1, r4
 80a0462:	4629      	mov	r1, r5
 80a0464:	bd30      	pop	{r4, r5, pc}
 80a0466:	f094 0f00 	teq	r4, #0
 80a046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a046e:	bf06      	itte	eq
 80a0470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a0474:	3401      	addeq	r4, #1
 80a0476:	3d01      	subne	r5, #1
 80a0478:	e74e      	b.n	80a0318 <__adddf3+0x8c>
 80a047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a047e:	bf18      	it	ne
 80a0480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a0484:	d029      	beq.n	80a04da <__adddf3+0x24e>
 80a0486:	ea94 0f05 	teq	r4, r5
 80a048a:	bf08      	it	eq
 80a048c:	ea90 0f02 	teqeq	r0, r2
 80a0490:	d005      	beq.n	80a049e <__adddf3+0x212>
 80a0492:	ea54 0c00 	orrs.w	ip, r4, r0
 80a0496:	bf04      	itt	eq
 80a0498:	4619      	moveq	r1, r3
 80a049a:	4610      	moveq	r0, r2
 80a049c:	bd30      	pop	{r4, r5, pc}
 80a049e:	ea91 0f03 	teq	r1, r3
 80a04a2:	bf1e      	ittt	ne
 80a04a4:	2100      	movne	r1, #0
 80a04a6:	2000      	movne	r0, #0
 80a04a8:	bd30      	popne	{r4, r5, pc}
 80a04aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a04ae:	d105      	bne.n	80a04bc <__adddf3+0x230>
 80a04b0:	0040      	lsls	r0, r0, #1
 80a04b2:	4149      	adcs	r1, r1
 80a04b4:	bf28      	it	cs
 80a04b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a04ba:	bd30      	pop	{r4, r5, pc}
 80a04bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a04c0:	bf3c      	itt	cc
 80a04c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a04c6:	bd30      	popcc	{r4, r5, pc}
 80a04c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a04cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a04d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a04d4:	f04f 0000 	mov.w	r0, #0
 80a04d8:	bd30      	pop	{r4, r5, pc}
 80a04da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a04de:	bf1a      	itte	ne
 80a04e0:	4619      	movne	r1, r3
 80a04e2:	4610      	movne	r0, r2
 80a04e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a04e8:	bf1c      	itt	ne
 80a04ea:	460b      	movne	r3, r1
 80a04ec:	4602      	movne	r2, r0
 80a04ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a04f2:	bf06      	itte	eq
 80a04f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a04f8:	ea91 0f03 	teqeq	r1, r3
 80a04fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a0500:	bd30      	pop	{r4, r5, pc}
 80a0502:	bf00      	nop

080a0504 <__aeabi_ui2d>:
 80a0504:	f090 0f00 	teq	r0, #0
 80a0508:	bf04      	itt	eq
 80a050a:	2100      	moveq	r1, #0
 80a050c:	4770      	bxeq	lr
 80a050e:	b530      	push	{r4, r5, lr}
 80a0510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a0514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a0518:	f04f 0500 	mov.w	r5, #0
 80a051c:	f04f 0100 	mov.w	r1, #0
 80a0520:	e750      	b.n	80a03c4 <__adddf3+0x138>
 80a0522:	bf00      	nop

080a0524 <__aeabi_i2d>:
 80a0524:	f090 0f00 	teq	r0, #0
 80a0528:	bf04      	itt	eq
 80a052a:	2100      	moveq	r1, #0
 80a052c:	4770      	bxeq	lr
 80a052e:	b530      	push	{r4, r5, lr}
 80a0530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a0534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a0538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a053c:	bf48      	it	mi
 80a053e:	4240      	negmi	r0, r0
 80a0540:	f04f 0100 	mov.w	r1, #0
 80a0544:	e73e      	b.n	80a03c4 <__adddf3+0x138>
 80a0546:	bf00      	nop

080a0548 <__aeabi_f2d>:
 80a0548:	0042      	lsls	r2, r0, #1
 80a054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a054e:	ea4f 0131 	mov.w	r1, r1, rrx
 80a0552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a0556:	bf1f      	itttt	ne
 80a0558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a0560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a0564:	4770      	bxne	lr
 80a0566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80a056a:	bf08      	it	eq
 80a056c:	4770      	bxeq	lr
 80a056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80a0572:	bf04      	itt	eq
 80a0574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80a0578:	4770      	bxeq	lr
 80a057a:	b530      	push	{r4, r5, lr}
 80a057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a0580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a0584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a0588:	e71c      	b.n	80a03c4 <__adddf3+0x138>
 80a058a:	bf00      	nop

080a058c <__aeabi_ul2d>:
 80a058c:	ea50 0201 	orrs.w	r2, r0, r1
 80a0590:	bf08      	it	eq
 80a0592:	4770      	bxeq	lr
 80a0594:	b530      	push	{r4, r5, lr}
 80a0596:	f04f 0500 	mov.w	r5, #0
 80a059a:	e00a      	b.n	80a05b2 <__aeabi_l2d+0x16>

080a059c <__aeabi_l2d>:
 80a059c:	ea50 0201 	orrs.w	r2, r0, r1
 80a05a0:	bf08      	it	eq
 80a05a2:	4770      	bxeq	lr
 80a05a4:	b530      	push	{r4, r5, lr}
 80a05a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a05aa:	d502      	bpl.n	80a05b2 <__aeabi_l2d+0x16>
 80a05ac:	4240      	negs	r0, r0
 80a05ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a05b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a05b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a05ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a05be:	f43f aed8 	beq.w	80a0372 <__adddf3+0xe6>
 80a05c2:	f04f 0203 	mov.w	r2, #3
 80a05c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a05ca:	bf18      	it	ne
 80a05cc:	3203      	addne	r2, #3
 80a05ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a05d2:	bf18      	it	ne
 80a05d4:	3203      	addne	r2, #3
 80a05d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a05da:	f1c2 0320 	rsb	r3, r2, #32
 80a05de:	fa00 fc03 	lsl.w	ip, r0, r3
 80a05e2:	fa20 f002 	lsr.w	r0, r0, r2
 80a05e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80a05ea:	ea40 000e 	orr.w	r0, r0, lr
 80a05ee:	fa21 f102 	lsr.w	r1, r1, r2
 80a05f2:	4414      	add	r4, r2
 80a05f4:	e6bd      	b.n	80a0372 <__adddf3+0xe6>
 80a05f6:	bf00      	nop

080a05f8 <__aeabi_dmul>:
 80a05f8:	b570      	push	{r4, r5, r6, lr}
 80a05fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a05fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a0602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a0606:	bf1d      	ittte	ne
 80a0608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a060c:	ea94 0f0c 	teqne	r4, ip
 80a0610:	ea95 0f0c 	teqne	r5, ip
 80a0614:	f000 f8de 	bleq	80a07d4 <__aeabi_dmul+0x1dc>
 80a0618:	442c      	add	r4, r5
 80a061a:	ea81 0603 	eor.w	r6, r1, r3
 80a061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a0622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a0626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a062a:	bf18      	it	ne
 80a062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a0630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a0634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a0638:	d038      	beq.n	80a06ac <__aeabi_dmul+0xb4>
 80a063a:	fba0 ce02 	umull	ip, lr, r0, r2
 80a063e:	f04f 0500 	mov.w	r5, #0
 80a0642:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a0646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a064e:	f04f 0600 	mov.w	r6, #0
 80a0652:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a0656:	f09c 0f00 	teq	ip, #0
 80a065a:	bf18      	it	ne
 80a065c:	f04e 0e01 	orrne.w	lr, lr, #1
 80a0660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a0664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a0668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a066c:	d204      	bcs.n	80a0678 <__aeabi_dmul+0x80>
 80a066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a0672:	416d      	adcs	r5, r5
 80a0674:	eb46 0606 	adc.w	r6, r6, r6
 80a0678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a0680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a0684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a0688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a0690:	bf88      	it	hi
 80a0692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a0696:	d81e      	bhi.n	80a06d6 <__aeabi_dmul+0xde>
 80a0698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a069c:	bf08      	it	eq
 80a069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a06a2:	f150 0000 	adcs.w	r0, r0, #0
 80a06a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a06aa:	bd70      	pop	{r4, r5, r6, pc}
 80a06ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a06b0:	ea46 0101 	orr.w	r1, r6, r1
 80a06b4:	ea40 0002 	orr.w	r0, r0, r2
 80a06b8:	ea81 0103 	eor.w	r1, r1, r3
 80a06bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a06c0:	bfc2      	ittt	gt
 80a06c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a06c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a06ca:	bd70      	popgt	{r4, r5, r6, pc}
 80a06cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a06d0:	f04f 0e00 	mov.w	lr, #0
 80a06d4:	3c01      	subs	r4, #1
 80a06d6:	f300 80ab 	bgt.w	80a0830 <__aeabi_dmul+0x238>
 80a06da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a06de:	bfde      	ittt	le
 80a06e0:	2000      	movle	r0, #0
 80a06e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a06e6:	bd70      	pople	{r4, r5, r6, pc}
 80a06e8:	f1c4 0400 	rsb	r4, r4, #0
 80a06ec:	3c20      	subs	r4, #32
 80a06ee:	da35      	bge.n	80a075c <__aeabi_dmul+0x164>
 80a06f0:	340c      	adds	r4, #12
 80a06f2:	dc1b      	bgt.n	80a072c <__aeabi_dmul+0x134>
 80a06f4:	f104 0414 	add.w	r4, r4, #20
 80a06f8:	f1c4 0520 	rsb	r5, r4, #32
 80a06fc:	fa00 f305 	lsl.w	r3, r0, r5
 80a0700:	fa20 f004 	lsr.w	r0, r0, r4
 80a0704:	fa01 f205 	lsl.w	r2, r1, r5
 80a0708:	ea40 0002 	orr.w	r0, r0, r2
 80a070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a0710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a0714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a0718:	fa21 f604 	lsr.w	r6, r1, r4
 80a071c:	eb42 0106 	adc.w	r1, r2, r6
 80a0720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a0724:	bf08      	it	eq
 80a0726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a072a:	bd70      	pop	{r4, r5, r6, pc}
 80a072c:	f1c4 040c 	rsb	r4, r4, #12
 80a0730:	f1c4 0520 	rsb	r5, r4, #32
 80a0734:	fa00 f304 	lsl.w	r3, r0, r4
 80a0738:	fa20 f005 	lsr.w	r0, r0, r5
 80a073c:	fa01 f204 	lsl.w	r2, r1, r4
 80a0740:	ea40 0002 	orr.w	r0, r0, r2
 80a0744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a0748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a074c:	f141 0100 	adc.w	r1, r1, #0
 80a0750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a0754:	bf08      	it	eq
 80a0756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a075a:	bd70      	pop	{r4, r5, r6, pc}
 80a075c:	f1c4 0520 	rsb	r5, r4, #32
 80a0760:	fa00 f205 	lsl.w	r2, r0, r5
 80a0764:	ea4e 0e02 	orr.w	lr, lr, r2
 80a0768:	fa20 f304 	lsr.w	r3, r0, r4
 80a076c:	fa01 f205 	lsl.w	r2, r1, r5
 80a0770:	ea43 0302 	orr.w	r3, r3, r2
 80a0774:	fa21 f004 	lsr.w	r0, r1, r4
 80a0778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a077c:	fa21 f204 	lsr.w	r2, r1, r4
 80a0780:	ea20 0002 	bic.w	r0, r0, r2
 80a0784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a0788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a078c:	bf08      	it	eq
 80a078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a0792:	bd70      	pop	{r4, r5, r6, pc}
 80a0794:	f094 0f00 	teq	r4, #0
 80a0798:	d10f      	bne.n	80a07ba <__aeabi_dmul+0x1c2>
 80a079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a079e:	0040      	lsls	r0, r0, #1
 80a07a0:	eb41 0101 	adc.w	r1, r1, r1
 80a07a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a07a8:	bf08      	it	eq
 80a07aa:	3c01      	subeq	r4, #1
 80a07ac:	d0f7      	beq.n	80a079e <__aeabi_dmul+0x1a6>
 80a07ae:	ea41 0106 	orr.w	r1, r1, r6
 80a07b2:	f095 0f00 	teq	r5, #0
 80a07b6:	bf18      	it	ne
 80a07b8:	4770      	bxne	lr
 80a07ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a07be:	0052      	lsls	r2, r2, #1
 80a07c0:	eb43 0303 	adc.w	r3, r3, r3
 80a07c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a07c8:	bf08      	it	eq
 80a07ca:	3d01      	subeq	r5, #1
 80a07cc:	d0f7      	beq.n	80a07be <__aeabi_dmul+0x1c6>
 80a07ce:	ea43 0306 	orr.w	r3, r3, r6
 80a07d2:	4770      	bx	lr
 80a07d4:	ea94 0f0c 	teq	r4, ip
 80a07d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a07dc:	bf18      	it	ne
 80a07de:	ea95 0f0c 	teqne	r5, ip
 80a07e2:	d00c      	beq.n	80a07fe <__aeabi_dmul+0x206>
 80a07e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a07e8:	bf18      	it	ne
 80a07ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a07ee:	d1d1      	bne.n	80a0794 <__aeabi_dmul+0x19c>
 80a07f0:	ea81 0103 	eor.w	r1, r1, r3
 80a07f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a07f8:	f04f 0000 	mov.w	r0, #0
 80a07fc:	bd70      	pop	{r4, r5, r6, pc}
 80a07fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a0802:	bf06      	itte	eq
 80a0804:	4610      	moveq	r0, r2
 80a0806:	4619      	moveq	r1, r3
 80a0808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a080c:	d019      	beq.n	80a0842 <__aeabi_dmul+0x24a>
 80a080e:	ea94 0f0c 	teq	r4, ip
 80a0812:	d102      	bne.n	80a081a <__aeabi_dmul+0x222>
 80a0814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a0818:	d113      	bne.n	80a0842 <__aeabi_dmul+0x24a>
 80a081a:	ea95 0f0c 	teq	r5, ip
 80a081e:	d105      	bne.n	80a082c <__aeabi_dmul+0x234>
 80a0820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a0824:	bf1c      	itt	ne
 80a0826:	4610      	movne	r0, r2
 80a0828:	4619      	movne	r1, r3
 80a082a:	d10a      	bne.n	80a0842 <__aeabi_dmul+0x24a>
 80a082c:	ea81 0103 	eor.w	r1, r1, r3
 80a0830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a0834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a0838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a083c:	f04f 0000 	mov.w	r0, #0
 80a0840:	bd70      	pop	{r4, r5, r6, pc}
 80a0842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a0846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a084a:	bd70      	pop	{r4, r5, r6, pc}

080a084c <__aeabi_ddiv>:
 80a084c:	b570      	push	{r4, r5, r6, lr}
 80a084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a0852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a0856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a085a:	bf1d      	ittte	ne
 80a085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a0860:	ea94 0f0c 	teqne	r4, ip
 80a0864:	ea95 0f0c 	teqne	r5, ip
 80a0868:	f000 f8a7 	bleq	80a09ba <__aeabi_ddiv+0x16e>
 80a086c:	eba4 0405 	sub.w	r4, r4, r5
 80a0870:	ea81 0e03 	eor.w	lr, r1, r3
 80a0874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a0878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a087c:	f000 8088 	beq.w	80a0990 <__aeabi_ddiv+0x144>
 80a0880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a0884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a0888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a0890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a0894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a0898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a08a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a08a4:	429d      	cmp	r5, r3
 80a08a6:	bf08      	it	eq
 80a08a8:	4296      	cmpeq	r6, r2
 80a08aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a08ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a08b2:	d202      	bcs.n	80a08ba <__aeabi_ddiv+0x6e>
 80a08b4:	085b      	lsrs	r3, r3, #1
 80a08b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a08ba:	1ab6      	subs	r6, r6, r2
 80a08bc:	eb65 0503 	sbc.w	r5, r5, r3
 80a08c0:	085b      	lsrs	r3, r3, #1
 80a08c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80a08c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a08ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a08ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80a08d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a08d6:	bf22      	ittt	cs
 80a08d8:	1ab6      	subcs	r6, r6, r2
 80a08da:	4675      	movcs	r5, lr
 80a08dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80a08e0:	085b      	lsrs	r3, r3, #1
 80a08e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80a08e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80a08ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a08ee:	bf22      	ittt	cs
 80a08f0:	1ab6      	subcs	r6, r6, r2
 80a08f2:	4675      	movcs	r5, lr
 80a08f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a08f8:	085b      	lsrs	r3, r3, #1
 80a08fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80a08fe:	ebb6 0e02 	subs.w	lr, r6, r2
 80a0902:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a0906:	bf22      	ittt	cs
 80a0908:	1ab6      	subcs	r6, r6, r2
 80a090a:	4675      	movcs	r5, lr
 80a090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a0910:	085b      	lsrs	r3, r3, #1
 80a0912:	ea4f 0232 	mov.w	r2, r2, rrx
 80a0916:	ebb6 0e02 	subs.w	lr, r6, r2
 80a091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a091e:	bf22      	ittt	cs
 80a0920:	1ab6      	subcs	r6, r6, r2
 80a0922:	4675      	movcs	r5, lr
 80a0924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a0928:	ea55 0e06 	orrs.w	lr, r5, r6
 80a092c:	d018      	beq.n	80a0960 <__aeabi_ddiv+0x114>
 80a092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a0932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a0936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a0942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a0946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a094a:	d1c0      	bne.n	80a08ce <__aeabi_ddiv+0x82>
 80a094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a0950:	d10b      	bne.n	80a096a <__aeabi_ddiv+0x11e>
 80a0952:	ea41 0100 	orr.w	r1, r1, r0
 80a0956:	f04f 0000 	mov.w	r0, #0
 80a095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a095e:	e7b6      	b.n	80a08ce <__aeabi_ddiv+0x82>
 80a0960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a0964:	bf04      	itt	eq
 80a0966:	4301      	orreq	r1, r0
 80a0968:	2000      	moveq	r0, #0
 80a096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a096e:	bf88      	it	hi
 80a0970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a0974:	f63f aeaf 	bhi.w	80a06d6 <__aeabi_dmul+0xde>
 80a0978:	ebb5 0c03 	subs.w	ip, r5, r3
 80a097c:	bf04      	itt	eq
 80a097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a0982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a0986:	f150 0000 	adcs.w	r0, r0, #0
 80a098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a098e:	bd70      	pop	{r4, r5, r6, pc}
 80a0990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a0994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a0998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a099c:	bfc2      	ittt	gt
 80a099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a09a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a09a6:	bd70      	popgt	{r4, r5, r6, pc}
 80a09a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a09ac:	f04f 0e00 	mov.w	lr, #0
 80a09b0:	3c01      	subs	r4, #1
 80a09b2:	e690      	b.n	80a06d6 <__aeabi_dmul+0xde>
 80a09b4:	ea45 0e06 	orr.w	lr, r5, r6
 80a09b8:	e68d      	b.n	80a06d6 <__aeabi_dmul+0xde>
 80a09ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a09be:	ea94 0f0c 	teq	r4, ip
 80a09c2:	bf08      	it	eq
 80a09c4:	ea95 0f0c 	teqeq	r5, ip
 80a09c8:	f43f af3b 	beq.w	80a0842 <__aeabi_dmul+0x24a>
 80a09cc:	ea94 0f0c 	teq	r4, ip
 80a09d0:	d10a      	bne.n	80a09e8 <__aeabi_ddiv+0x19c>
 80a09d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a09d6:	f47f af34 	bne.w	80a0842 <__aeabi_dmul+0x24a>
 80a09da:	ea95 0f0c 	teq	r5, ip
 80a09de:	f47f af25 	bne.w	80a082c <__aeabi_dmul+0x234>
 80a09e2:	4610      	mov	r0, r2
 80a09e4:	4619      	mov	r1, r3
 80a09e6:	e72c      	b.n	80a0842 <__aeabi_dmul+0x24a>
 80a09e8:	ea95 0f0c 	teq	r5, ip
 80a09ec:	d106      	bne.n	80a09fc <__aeabi_ddiv+0x1b0>
 80a09ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a09f2:	f43f aefd 	beq.w	80a07f0 <__aeabi_dmul+0x1f8>
 80a09f6:	4610      	mov	r0, r2
 80a09f8:	4619      	mov	r1, r3
 80a09fa:	e722      	b.n	80a0842 <__aeabi_dmul+0x24a>
 80a09fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a0a00:	bf18      	it	ne
 80a0a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a0a06:	f47f aec5 	bne.w	80a0794 <__aeabi_dmul+0x19c>
 80a0a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a0a0e:	f47f af0d 	bne.w	80a082c <__aeabi_dmul+0x234>
 80a0a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a0a16:	f47f aeeb 	bne.w	80a07f0 <__aeabi_dmul+0x1f8>
 80a0a1a:	e712      	b.n	80a0842 <__aeabi_dmul+0x24a>

080a0a1c <__gedf2>:
 80a0a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a0a20:	e006      	b.n	80a0a30 <__cmpdf2+0x4>
 80a0a22:	bf00      	nop

080a0a24 <__ledf2>:
 80a0a24:	f04f 0c01 	mov.w	ip, #1
 80a0a28:	e002      	b.n	80a0a30 <__cmpdf2+0x4>
 80a0a2a:	bf00      	nop

080a0a2c <__cmpdf2>:
 80a0a2c:	f04f 0c01 	mov.w	ip, #1
 80a0a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a0a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a0a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a0a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a0a40:	bf18      	it	ne
 80a0a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a0a46:	d01b      	beq.n	80a0a80 <__cmpdf2+0x54>
 80a0a48:	b001      	add	sp, #4
 80a0a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a0a4e:	bf0c      	ite	eq
 80a0a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a0a54:	ea91 0f03 	teqne	r1, r3
 80a0a58:	bf02      	ittt	eq
 80a0a5a:	ea90 0f02 	teqeq	r0, r2
 80a0a5e:	2000      	moveq	r0, #0
 80a0a60:	4770      	bxeq	lr
 80a0a62:	f110 0f00 	cmn.w	r0, #0
 80a0a66:	ea91 0f03 	teq	r1, r3
 80a0a6a:	bf58      	it	pl
 80a0a6c:	4299      	cmppl	r1, r3
 80a0a6e:	bf08      	it	eq
 80a0a70:	4290      	cmpeq	r0, r2
 80a0a72:	bf2c      	ite	cs
 80a0a74:	17d8      	asrcs	r0, r3, #31
 80a0a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a0a7a:	f040 0001 	orr.w	r0, r0, #1
 80a0a7e:	4770      	bx	lr
 80a0a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a0a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a0a88:	d102      	bne.n	80a0a90 <__cmpdf2+0x64>
 80a0a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a0a8e:	d107      	bne.n	80a0aa0 <__cmpdf2+0x74>
 80a0a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a0a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a0a98:	d1d6      	bne.n	80a0a48 <__cmpdf2+0x1c>
 80a0a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a0a9e:	d0d3      	beq.n	80a0a48 <__cmpdf2+0x1c>
 80a0aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a0aa4:	4770      	bx	lr
 80a0aa6:	bf00      	nop

080a0aa8 <__aeabi_cdrcmple>:
 80a0aa8:	4684      	mov	ip, r0
 80a0aaa:	4610      	mov	r0, r2
 80a0aac:	4662      	mov	r2, ip
 80a0aae:	468c      	mov	ip, r1
 80a0ab0:	4619      	mov	r1, r3
 80a0ab2:	4663      	mov	r3, ip
 80a0ab4:	e000      	b.n	80a0ab8 <__aeabi_cdcmpeq>
 80a0ab6:	bf00      	nop

080a0ab8 <__aeabi_cdcmpeq>:
 80a0ab8:	b501      	push	{r0, lr}
 80a0aba:	f7ff ffb7 	bl	80a0a2c <__cmpdf2>
 80a0abe:	2800      	cmp	r0, #0
 80a0ac0:	bf48      	it	mi
 80a0ac2:	f110 0f00 	cmnmi.w	r0, #0
 80a0ac6:	bd01      	pop	{r0, pc}

080a0ac8 <__aeabi_dcmpeq>:
 80a0ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a0acc:	f7ff fff4 	bl	80a0ab8 <__aeabi_cdcmpeq>
 80a0ad0:	bf0c      	ite	eq
 80a0ad2:	2001      	moveq	r0, #1
 80a0ad4:	2000      	movne	r0, #0
 80a0ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a0ada:	bf00      	nop

080a0adc <__aeabi_dcmplt>:
 80a0adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a0ae0:	f7ff ffea 	bl	80a0ab8 <__aeabi_cdcmpeq>
 80a0ae4:	bf34      	ite	cc
 80a0ae6:	2001      	movcc	r0, #1
 80a0ae8:	2000      	movcs	r0, #0
 80a0aea:	f85d fb08 	ldr.w	pc, [sp], #8
 80a0aee:	bf00      	nop

080a0af0 <__aeabi_dcmple>:
 80a0af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a0af4:	f7ff ffe0 	bl	80a0ab8 <__aeabi_cdcmpeq>
 80a0af8:	bf94      	ite	ls
 80a0afa:	2001      	movls	r0, #1
 80a0afc:	2000      	movhi	r0, #0
 80a0afe:	f85d fb08 	ldr.w	pc, [sp], #8
 80a0b02:	bf00      	nop

080a0b04 <__aeabi_dcmpge>:
 80a0b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a0b08:	f7ff ffce 	bl	80a0aa8 <__aeabi_cdrcmple>
 80a0b0c:	bf94      	ite	ls
 80a0b0e:	2001      	movls	r0, #1
 80a0b10:	2000      	movhi	r0, #0
 80a0b12:	f85d fb08 	ldr.w	pc, [sp], #8
 80a0b16:	bf00      	nop

080a0b18 <__aeabi_dcmpgt>:
 80a0b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a0b1c:	f7ff ffc4 	bl	80a0aa8 <__aeabi_cdrcmple>
 80a0b20:	bf34      	ite	cc
 80a0b22:	2001      	movcc	r0, #1
 80a0b24:	2000      	movcs	r0, #0
 80a0b26:	f85d fb08 	ldr.w	pc, [sp], #8
 80a0b2a:	bf00      	nop

080a0b2c <__aeabi_dcmpun>:
 80a0b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a0b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a0b34:	d102      	bne.n	80a0b3c <__aeabi_dcmpun+0x10>
 80a0b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a0b3a:	d10a      	bne.n	80a0b52 <__aeabi_dcmpun+0x26>
 80a0b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a0b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a0b44:	d102      	bne.n	80a0b4c <__aeabi_dcmpun+0x20>
 80a0b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a0b4a:	d102      	bne.n	80a0b52 <__aeabi_dcmpun+0x26>
 80a0b4c:	f04f 0000 	mov.w	r0, #0
 80a0b50:	4770      	bx	lr
 80a0b52:	f04f 0001 	mov.w	r0, #1
 80a0b56:	4770      	bx	lr

080a0b58 <__aeabi_d2iz>:
 80a0b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a0b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a0b60:	d215      	bcs.n	80a0b8e <__aeabi_d2iz+0x36>
 80a0b62:	d511      	bpl.n	80a0b88 <__aeabi_d2iz+0x30>
 80a0b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a0b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a0b6c:	d912      	bls.n	80a0b94 <__aeabi_d2iz+0x3c>
 80a0b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a0b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a0b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a0b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a0b7e:	fa23 f002 	lsr.w	r0, r3, r2
 80a0b82:	bf18      	it	ne
 80a0b84:	4240      	negne	r0, r0
 80a0b86:	4770      	bx	lr
 80a0b88:	f04f 0000 	mov.w	r0, #0
 80a0b8c:	4770      	bx	lr
 80a0b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a0b92:	d105      	bne.n	80a0ba0 <__aeabi_d2iz+0x48>
 80a0b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a0b98:	bf08      	it	eq
 80a0b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a0b9e:	4770      	bx	lr
 80a0ba0:	f04f 0000 	mov.w	r0, #0
 80a0ba4:	4770      	bx	lr
 80a0ba6:	bf00      	nop

080a0ba8 <__aeabi_d2uiz>:
 80a0ba8:	004a      	lsls	r2, r1, #1
 80a0baa:	d211      	bcs.n	80a0bd0 <__aeabi_d2uiz+0x28>
 80a0bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a0bb0:	d211      	bcs.n	80a0bd6 <__aeabi_d2uiz+0x2e>
 80a0bb2:	d50d      	bpl.n	80a0bd0 <__aeabi_d2uiz+0x28>
 80a0bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a0bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a0bbc:	d40e      	bmi.n	80a0bdc <__aeabi_d2uiz+0x34>
 80a0bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a0bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a0bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a0bca:	fa23 f002 	lsr.w	r0, r3, r2
 80a0bce:	4770      	bx	lr
 80a0bd0:	f04f 0000 	mov.w	r0, #0
 80a0bd4:	4770      	bx	lr
 80a0bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a0bda:	d102      	bne.n	80a0be2 <__aeabi_d2uiz+0x3a>
 80a0bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a0be0:	4770      	bx	lr
 80a0be2:	f04f 0000 	mov.w	r0, #0
 80a0be6:	4770      	bx	lr

080a0be8 <__aeabi_d2f>:
 80a0be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a0bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a0bf0:	bf24      	itt	cs
 80a0bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a0bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a0bfa:	d90d      	bls.n	80a0c18 <__aeabi_d2f+0x30>
 80a0bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a0c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a0c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a0c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a0c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a0c10:	bf08      	it	eq
 80a0c12:	f020 0001 	biceq.w	r0, r0, #1
 80a0c16:	4770      	bx	lr
 80a0c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a0c1c:	d121      	bne.n	80a0c62 <__aeabi_d2f+0x7a>
 80a0c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a0c22:	bfbc      	itt	lt
 80a0c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a0c28:	4770      	bxlt	lr
 80a0c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a0c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a0c32:	f1c2 0218 	rsb	r2, r2, #24
 80a0c36:	f1c2 0c20 	rsb	ip, r2, #32
 80a0c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 80a0c3e:	fa20 f002 	lsr.w	r0, r0, r2
 80a0c42:	bf18      	it	ne
 80a0c44:	f040 0001 	orrne.w	r0, r0, #1
 80a0c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a0c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a0c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a0c54:	ea40 000c 	orr.w	r0, r0, ip
 80a0c58:	fa23 f302 	lsr.w	r3, r3, r2
 80a0c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a0c60:	e7cc      	b.n	80a0bfc <__aeabi_d2f+0x14>
 80a0c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a0c66:	d107      	bne.n	80a0c78 <__aeabi_d2f+0x90>
 80a0c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a0c6c:	bf1e      	ittt	ne
 80a0c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a0c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a0c76:	4770      	bxne	lr
 80a0c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a0c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a0c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a0c84:	4770      	bx	lr
 80a0c86:	bf00      	nop

080a0c88 <__aeabi_frsub>:
 80a0c88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a0c8c:	e002      	b.n	80a0c94 <__addsf3>
 80a0c8e:	bf00      	nop

080a0c90 <__aeabi_fsub>:
 80a0c90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a0c94 <__addsf3>:
 80a0c94:	0042      	lsls	r2, r0, #1
 80a0c96:	bf1f      	itttt	ne
 80a0c98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a0c9c:	ea92 0f03 	teqne	r2, r3
 80a0ca0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a0ca4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a0ca8:	d06a      	beq.n	80a0d80 <__addsf3+0xec>
 80a0caa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a0cae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a0cb2:	bfc1      	itttt	gt
 80a0cb4:	18d2      	addgt	r2, r2, r3
 80a0cb6:	4041      	eorgt	r1, r0
 80a0cb8:	4048      	eorgt	r0, r1
 80a0cba:	4041      	eorgt	r1, r0
 80a0cbc:	bfb8      	it	lt
 80a0cbe:	425b      	neglt	r3, r3
 80a0cc0:	2b19      	cmp	r3, #25
 80a0cc2:	bf88      	it	hi
 80a0cc4:	4770      	bxhi	lr
 80a0cc6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a0cca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a0cce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a0cd2:	bf18      	it	ne
 80a0cd4:	4240      	negne	r0, r0
 80a0cd6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a0cda:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a0cde:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a0ce2:	bf18      	it	ne
 80a0ce4:	4249      	negne	r1, r1
 80a0ce6:	ea92 0f03 	teq	r2, r3
 80a0cea:	d03f      	beq.n	80a0d6c <__addsf3+0xd8>
 80a0cec:	f1a2 0201 	sub.w	r2, r2, #1
 80a0cf0:	fa41 fc03 	asr.w	ip, r1, r3
 80a0cf4:	eb10 000c 	adds.w	r0, r0, ip
 80a0cf8:	f1c3 0320 	rsb	r3, r3, #32
 80a0cfc:	fa01 f103 	lsl.w	r1, r1, r3
 80a0d00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a0d04:	d502      	bpl.n	80a0d0c <__addsf3+0x78>
 80a0d06:	4249      	negs	r1, r1
 80a0d08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a0d0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a0d10:	d313      	bcc.n	80a0d3a <__addsf3+0xa6>
 80a0d12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a0d16:	d306      	bcc.n	80a0d26 <__addsf3+0x92>
 80a0d18:	0840      	lsrs	r0, r0, #1
 80a0d1a:	ea4f 0131 	mov.w	r1, r1, rrx
 80a0d1e:	f102 0201 	add.w	r2, r2, #1
 80a0d22:	2afe      	cmp	r2, #254	; 0xfe
 80a0d24:	d251      	bcs.n	80a0dca <__addsf3+0x136>
 80a0d26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a0d2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a0d2e:	bf08      	it	eq
 80a0d30:	f020 0001 	biceq.w	r0, r0, #1
 80a0d34:	ea40 0003 	orr.w	r0, r0, r3
 80a0d38:	4770      	bx	lr
 80a0d3a:	0049      	lsls	r1, r1, #1
 80a0d3c:	eb40 0000 	adc.w	r0, r0, r0
 80a0d40:	3a01      	subs	r2, #1
 80a0d42:	bf28      	it	cs
 80a0d44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80a0d48:	d2ed      	bcs.n	80a0d26 <__addsf3+0x92>
 80a0d4a:	fab0 fc80 	clz	ip, r0
 80a0d4e:	f1ac 0c08 	sub.w	ip, ip, #8
 80a0d52:	ebb2 020c 	subs.w	r2, r2, ip
 80a0d56:	fa00 f00c 	lsl.w	r0, r0, ip
 80a0d5a:	bfaa      	itet	ge
 80a0d5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a0d60:	4252      	neglt	r2, r2
 80a0d62:	4318      	orrge	r0, r3
 80a0d64:	bfbc      	itt	lt
 80a0d66:	40d0      	lsrlt	r0, r2
 80a0d68:	4318      	orrlt	r0, r3
 80a0d6a:	4770      	bx	lr
 80a0d6c:	f092 0f00 	teq	r2, #0
 80a0d70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a0d74:	bf06      	itte	eq
 80a0d76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a0d7a:	3201      	addeq	r2, #1
 80a0d7c:	3b01      	subne	r3, #1
 80a0d7e:	e7b5      	b.n	80a0cec <__addsf3+0x58>
 80a0d80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a0d84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a0d88:	bf18      	it	ne
 80a0d8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a0d8e:	d021      	beq.n	80a0dd4 <__addsf3+0x140>
 80a0d90:	ea92 0f03 	teq	r2, r3
 80a0d94:	d004      	beq.n	80a0da0 <__addsf3+0x10c>
 80a0d96:	f092 0f00 	teq	r2, #0
 80a0d9a:	bf08      	it	eq
 80a0d9c:	4608      	moveq	r0, r1
 80a0d9e:	4770      	bx	lr
 80a0da0:	ea90 0f01 	teq	r0, r1
 80a0da4:	bf1c      	itt	ne
 80a0da6:	2000      	movne	r0, #0
 80a0da8:	4770      	bxne	lr
 80a0daa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a0dae:	d104      	bne.n	80a0dba <__addsf3+0x126>
 80a0db0:	0040      	lsls	r0, r0, #1
 80a0db2:	bf28      	it	cs
 80a0db4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a0db8:	4770      	bx	lr
 80a0dba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a0dbe:	bf3c      	itt	cc
 80a0dc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a0dc4:	4770      	bxcc	lr
 80a0dc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a0dca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a0dce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a0dd2:	4770      	bx	lr
 80a0dd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a0dd8:	bf16      	itet	ne
 80a0dda:	4608      	movne	r0, r1
 80a0ddc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a0de0:	4601      	movne	r1, r0
 80a0de2:	0242      	lsls	r2, r0, #9
 80a0de4:	bf06      	itte	eq
 80a0de6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a0dea:	ea90 0f01 	teqeq	r0, r1
 80a0dee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a0df2:	4770      	bx	lr

080a0df4 <__aeabi_ui2f>:
 80a0df4:	f04f 0300 	mov.w	r3, #0
 80a0df8:	e004      	b.n	80a0e04 <__aeabi_i2f+0x8>
 80a0dfa:	bf00      	nop

080a0dfc <__aeabi_i2f>:
 80a0dfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a0e00:	bf48      	it	mi
 80a0e02:	4240      	negmi	r0, r0
 80a0e04:	ea5f 0c00 	movs.w	ip, r0
 80a0e08:	bf08      	it	eq
 80a0e0a:	4770      	bxeq	lr
 80a0e0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a0e10:	4601      	mov	r1, r0
 80a0e12:	f04f 0000 	mov.w	r0, #0
 80a0e16:	e01c      	b.n	80a0e52 <__aeabi_l2f+0x2a>

080a0e18 <__aeabi_ul2f>:
 80a0e18:	ea50 0201 	orrs.w	r2, r0, r1
 80a0e1c:	bf08      	it	eq
 80a0e1e:	4770      	bxeq	lr
 80a0e20:	f04f 0300 	mov.w	r3, #0
 80a0e24:	e00a      	b.n	80a0e3c <__aeabi_l2f+0x14>
 80a0e26:	bf00      	nop

080a0e28 <__aeabi_l2f>:
 80a0e28:	ea50 0201 	orrs.w	r2, r0, r1
 80a0e2c:	bf08      	it	eq
 80a0e2e:	4770      	bxeq	lr
 80a0e30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a0e34:	d502      	bpl.n	80a0e3c <__aeabi_l2f+0x14>
 80a0e36:	4240      	negs	r0, r0
 80a0e38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a0e3c:	ea5f 0c01 	movs.w	ip, r1
 80a0e40:	bf02      	ittt	eq
 80a0e42:	4684      	moveq	ip, r0
 80a0e44:	4601      	moveq	r1, r0
 80a0e46:	2000      	moveq	r0, #0
 80a0e48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a0e4c:	bf08      	it	eq
 80a0e4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a0e52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a0e56:	fabc f28c 	clz	r2, ip
 80a0e5a:	3a08      	subs	r2, #8
 80a0e5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a0e60:	db10      	blt.n	80a0e84 <__aeabi_l2f+0x5c>
 80a0e62:	fa01 fc02 	lsl.w	ip, r1, r2
 80a0e66:	4463      	add	r3, ip
 80a0e68:	fa00 fc02 	lsl.w	ip, r0, r2
 80a0e6c:	f1c2 0220 	rsb	r2, r2, #32
 80a0e70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a0e74:	fa20 f202 	lsr.w	r2, r0, r2
 80a0e78:	eb43 0002 	adc.w	r0, r3, r2
 80a0e7c:	bf08      	it	eq
 80a0e7e:	f020 0001 	biceq.w	r0, r0, #1
 80a0e82:	4770      	bx	lr
 80a0e84:	f102 0220 	add.w	r2, r2, #32
 80a0e88:	fa01 fc02 	lsl.w	ip, r1, r2
 80a0e8c:	f1c2 0220 	rsb	r2, r2, #32
 80a0e90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a0e94:	fa21 f202 	lsr.w	r2, r1, r2
 80a0e98:	eb43 0002 	adc.w	r0, r3, r2
 80a0e9c:	bf08      	it	eq
 80a0e9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a0ea2:	4770      	bx	lr

080a0ea4 <__aeabi_uldivmod>:
 80a0ea4:	b953      	cbnz	r3, 80a0ebc <__aeabi_uldivmod+0x18>
 80a0ea6:	b94a      	cbnz	r2, 80a0ebc <__aeabi_uldivmod+0x18>
 80a0ea8:	2900      	cmp	r1, #0
 80a0eaa:	bf08      	it	eq
 80a0eac:	2800      	cmpeq	r0, #0
 80a0eae:	bf1c      	itt	ne
 80a0eb0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80a0eb4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80a0eb8:	f000 b96e 	b.w	80a1198 <__aeabi_idiv0>
 80a0ebc:	f1ad 0c08 	sub.w	ip, sp, #8
 80a0ec0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80a0ec4:	f000 f806 	bl	80a0ed4 <__udivmoddi4>
 80a0ec8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a0ecc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a0ed0:	b004      	add	sp, #16
 80a0ed2:	4770      	bx	lr

080a0ed4 <__udivmoddi4>:
 80a0ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a0ed8:	9d08      	ldr	r5, [sp, #32]
 80a0eda:	4604      	mov	r4, r0
 80a0edc:	468c      	mov	ip, r1
 80a0ede:	2b00      	cmp	r3, #0
 80a0ee0:	f040 8083 	bne.w	80a0fea <__udivmoddi4+0x116>
 80a0ee4:	428a      	cmp	r2, r1
 80a0ee6:	4617      	mov	r7, r2
 80a0ee8:	d947      	bls.n	80a0f7a <__udivmoddi4+0xa6>
 80a0eea:	fab2 f282 	clz	r2, r2
 80a0eee:	b142      	cbz	r2, 80a0f02 <__udivmoddi4+0x2e>
 80a0ef0:	f1c2 0020 	rsb	r0, r2, #32
 80a0ef4:	fa24 f000 	lsr.w	r0, r4, r0
 80a0ef8:	4091      	lsls	r1, r2
 80a0efa:	4097      	lsls	r7, r2
 80a0efc:	ea40 0c01 	orr.w	ip, r0, r1
 80a0f00:	4094      	lsls	r4, r2
 80a0f02:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a0f06:	0c23      	lsrs	r3, r4, #16
 80a0f08:	fbbc f6f8 	udiv	r6, ip, r8
 80a0f0c:	fa1f fe87 	uxth.w	lr, r7
 80a0f10:	fb08 c116 	mls	r1, r8, r6, ip
 80a0f14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80a0f18:	fb06 f10e 	mul.w	r1, r6, lr
 80a0f1c:	4299      	cmp	r1, r3
 80a0f1e:	d909      	bls.n	80a0f34 <__udivmoddi4+0x60>
 80a0f20:	18fb      	adds	r3, r7, r3
 80a0f22:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80a0f26:	f080 8119 	bcs.w	80a115c <__udivmoddi4+0x288>
 80a0f2a:	4299      	cmp	r1, r3
 80a0f2c:	f240 8116 	bls.w	80a115c <__udivmoddi4+0x288>
 80a0f30:	3e02      	subs	r6, #2
 80a0f32:	443b      	add	r3, r7
 80a0f34:	1a5b      	subs	r3, r3, r1
 80a0f36:	b2a4      	uxth	r4, r4
 80a0f38:	fbb3 f0f8 	udiv	r0, r3, r8
 80a0f3c:	fb08 3310 	mls	r3, r8, r0, r3
 80a0f40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80a0f44:	fb00 fe0e 	mul.w	lr, r0, lr
 80a0f48:	45a6      	cmp	lr, r4
 80a0f4a:	d909      	bls.n	80a0f60 <__udivmoddi4+0x8c>
 80a0f4c:	193c      	adds	r4, r7, r4
 80a0f4e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80a0f52:	f080 8105 	bcs.w	80a1160 <__udivmoddi4+0x28c>
 80a0f56:	45a6      	cmp	lr, r4
 80a0f58:	f240 8102 	bls.w	80a1160 <__udivmoddi4+0x28c>
 80a0f5c:	3802      	subs	r0, #2
 80a0f5e:	443c      	add	r4, r7
 80a0f60:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80a0f64:	eba4 040e 	sub.w	r4, r4, lr
 80a0f68:	2600      	movs	r6, #0
 80a0f6a:	b11d      	cbz	r5, 80a0f74 <__udivmoddi4+0xa0>
 80a0f6c:	40d4      	lsrs	r4, r2
 80a0f6e:	2300      	movs	r3, #0
 80a0f70:	e9c5 4300 	strd	r4, r3, [r5]
 80a0f74:	4631      	mov	r1, r6
 80a0f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a0f7a:	b902      	cbnz	r2, 80a0f7e <__udivmoddi4+0xaa>
 80a0f7c:	deff      	udf	#255	; 0xff
 80a0f7e:	fab2 f282 	clz	r2, r2
 80a0f82:	2a00      	cmp	r2, #0
 80a0f84:	d150      	bne.n	80a1028 <__udivmoddi4+0x154>
 80a0f86:	1bcb      	subs	r3, r1, r7
 80a0f88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80a0f8c:	fa1f f887 	uxth.w	r8, r7
 80a0f90:	2601      	movs	r6, #1
 80a0f92:	fbb3 fcfe 	udiv	ip, r3, lr
 80a0f96:	0c21      	lsrs	r1, r4, #16
 80a0f98:	fb0e 331c 	mls	r3, lr, ip, r3
 80a0f9c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80a0fa0:	fb08 f30c 	mul.w	r3, r8, ip
 80a0fa4:	428b      	cmp	r3, r1
 80a0fa6:	d907      	bls.n	80a0fb8 <__udivmoddi4+0xe4>
 80a0fa8:	1879      	adds	r1, r7, r1
 80a0faa:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80a0fae:	d202      	bcs.n	80a0fb6 <__udivmoddi4+0xe2>
 80a0fb0:	428b      	cmp	r3, r1
 80a0fb2:	f200 80e9 	bhi.w	80a1188 <__udivmoddi4+0x2b4>
 80a0fb6:	4684      	mov	ip, r0
 80a0fb8:	1ac9      	subs	r1, r1, r3
 80a0fba:	b2a3      	uxth	r3, r4
 80a0fbc:	fbb1 f0fe 	udiv	r0, r1, lr
 80a0fc0:	fb0e 1110 	mls	r1, lr, r0, r1
 80a0fc4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80a0fc8:	fb08 f800 	mul.w	r8, r8, r0
 80a0fcc:	45a0      	cmp	r8, r4
 80a0fce:	d907      	bls.n	80a0fe0 <__udivmoddi4+0x10c>
 80a0fd0:	193c      	adds	r4, r7, r4
 80a0fd2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80a0fd6:	d202      	bcs.n	80a0fde <__udivmoddi4+0x10a>
 80a0fd8:	45a0      	cmp	r8, r4
 80a0fda:	f200 80d9 	bhi.w	80a1190 <__udivmoddi4+0x2bc>
 80a0fde:	4618      	mov	r0, r3
 80a0fe0:	eba4 0408 	sub.w	r4, r4, r8
 80a0fe4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80a0fe8:	e7bf      	b.n	80a0f6a <__udivmoddi4+0x96>
 80a0fea:	428b      	cmp	r3, r1
 80a0fec:	d909      	bls.n	80a1002 <__udivmoddi4+0x12e>
 80a0fee:	2d00      	cmp	r5, #0
 80a0ff0:	f000 80b1 	beq.w	80a1156 <__udivmoddi4+0x282>
 80a0ff4:	2600      	movs	r6, #0
 80a0ff6:	e9c5 0100 	strd	r0, r1, [r5]
 80a0ffa:	4630      	mov	r0, r6
 80a0ffc:	4631      	mov	r1, r6
 80a0ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a1002:	fab3 f683 	clz	r6, r3
 80a1006:	2e00      	cmp	r6, #0
 80a1008:	d14a      	bne.n	80a10a0 <__udivmoddi4+0x1cc>
 80a100a:	428b      	cmp	r3, r1
 80a100c:	d302      	bcc.n	80a1014 <__udivmoddi4+0x140>
 80a100e:	4282      	cmp	r2, r0
 80a1010:	f200 80b8 	bhi.w	80a1184 <__udivmoddi4+0x2b0>
 80a1014:	1a84      	subs	r4, r0, r2
 80a1016:	eb61 0103 	sbc.w	r1, r1, r3
 80a101a:	2001      	movs	r0, #1
 80a101c:	468c      	mov	ip, r1
 80a101e:	2d00      	cmp	r5, #0
 80a1020:	d0a8      	beq.n	80a0f74 <__udivmoddi4+0xa0>
 80a1022:	e9c5 4c00 	strd	r4, ip, [r5]
 80a1026:	e7a5      	b.n	80a0f74 <__udivmoddi4+0xa0>
 80a1028:	f1c2 0320 	rsb	r3, r2, #32
 80a102c:	fa20 f603 	lsr.w	r6, r0, r3
 80a1030:	4097      	lsls	r7, r2
 80a1032:	fa01 f002 	lsl.w	r0, r1, r2
 80a1036:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80a103a:	40d9      	lsrs	r1, r3
 80a103c:	4330      	orrs	r0, r6
 80a103e:	0c03      	lsrs	r3, r0, #16
 80a1040:	fbb1 f6fe 	udiv	r6, r1, lr
 80a1044:	fa1f f887 	uxth.w	r8, r7
 80a1048:	fb0e 1116 	mls	r1, lr, r6, r1
 80a104c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80a1050:	fb06 f108 	mul.w	r1, r6, r8
 80a1054:	4299      	cmp	r1, r3
 80a1056:	fa04 f402 	lsl.w	r4, r4, r2
 80a105a:	d909      	bls.n	80a1070 <__udivmoddi4+0x19c>
 80a105c:	18fb      	adds	r3, r7, r3
 80a105e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80a1062:	f080 808d 	bcs.w	80a1180 <__udivmoddi4+0x2ac>
 80a1066:	4299      	cmp	r1, r3
 80a1068:	f240 808a 	bls.w	80a1180 <__udivmoddi4+0x2ac>
 80a106c:	3e02      	subs	r6, #2
 80a106e:	443b      	add	r3, r7
 80a1070:	1a5b      	subs	r3, r3, r1
 80a1072:	b281      	uxth	r1, r0
 80a1074:	fbb3 f0fe 	udiv	r0, r3, lr
 80a1078:	fb0e 3310 	mls	r3, lr, r0, r3
 80a107c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80a1080:	fb00 f308 	mul.w	r3, r0, r8
 80a1084:	428b      	cmp	r3, r1
 80a1086:	d907      	bls.n	80a1098 <__udivmoddi4+0x1c4>
 80a1088:	1879      	adds	r1, r7, r1
 80a108a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80a108e:	d273      	bcs.n	80a1178 <__udivmoddi4+0x2a4>
 80a1090:	428b      	cmp	r3, r1
 80a1092:	d971      	bls.n	80a1178 <__udivmoddi4+0x2a4>
 80a1094:	3802      	subs	r0, #2
 80a1096:	4439      	add	r1, r7
 80a1098:	1acb      	subs	r3, r1, r3
 80a109a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80a109e:	e778      	b.n	80a0f92 <__udivmoddi4+0xbe>
 80a10a0:	f1c6 0c20 	rsb	ip, r6, #32
 80a10a4:	fa03 f406 	lsl.w	r4, r3, r6
 80a10a8:	fa22 f30c 	lsr.w	r3, r2, ip
 80a10ac:	431c      	orrs	r4, r3
 80a10ae:	fa20 f70c 	lsr.w	r7, r0, ip
 80a10b2:	fa01 f306 	lsl.w	r3, r1, r6
 80a10b6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80a10ba:	fa21 f10c 	lsr.w	r1, r1, ip
 80a10be:	431f      	orrs	r7, r3
 80a10c0:	0c3b      	lsrs	r3, r7, #16
 80a10c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80a10c6:	fa1f f884 	uxth.w	r8, r4
 80a10ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80a10ce:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80a10d2:	fb09 fa08 	mul.w	sl, r9, r8
 80a10d6:	458a      	cmp	sl, r1
 80a10d8:	fa02 f206 	lsl.w	r2, r2, r6
 80a10dc:	fa00 f306 	lsl.w	r3, r0, r6
 80a10e0:	d908      	bls.n	80a10f4 <__udivmoddi4+0x220>
 80a10e2:	1861      	adds	r1, r4, r1
 80a10e4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80a10e8:	d248      	bcs.n	80a117c <__udivmoddi4+0x2a8>
 80a10ea:	458a      	cmp	sl, r1
 80a10ec:	d946      	bls.n	80a117c <__udivmoddi4+0x2a8>
 80a10ee:	f1a9 0902 	sub.w	r9, r9, #2
 80a10f2:	4421      	add	r1, r4
 80a10f4:	eba1 010a 	sub.w	r1, r1, sl
 80a10f8:	b2bf      	uxth	r7, r7
 80a10fa:	fbb1 f0fe 	udiv	r0, r1, lr
 80a10fe:	fb0e 1110 	mls	r1, lr, r0, r1
 80a1102:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80a1106:	fb00 f808 	mul.w	r8, r0, r8
 80a110a:	45b8      	cmp	r8, r7
 80a110c:	d907      	bls.n	80a111e <__udivmoddi4+0x24a>
 80a110e:	19e7      	adds	r7, r4, r7
 80a1110:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80a1114:	d22e      	bcs.n	80a1174 <__udivmoddi4+0x2a0>
 80a1116:	45b8      	cmp	r8, r7
 80a1118:	d92c      	bls.n	80a1174 <__udivmoddi4+0x2a0>
 80a111a:	3802      	subs	r0, #2
 80a111c:	4427      	add	r7, r4
 80a111e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80a1122:	eba7 0708 	sub.w	r7, r7, r8
 80a1126:	fba0 8902 	umull	r8, r9, r0, r2
 80a112a:	454f      	cmp	r7, r9
 80a112c:	46c6      	mov	lr, r8
 80a112e:	4649      	mov	r1, r9
 80a1130:	d31a      	bcc.n	80a1168 <__udivmoddi4+0x294>
 80a1132:	d017      	beq.n	80a1164 <__udivmoddi4+0x290>
 80a1134:	b15d      	cbz	r5, 80a114e <__udivmoddi4+0x27a>
 80a1136:	ebb3 020e 	subs.w	r2, r3, lr
 80a113a:	eb67 0701 	sbc.w	r7, r7, r1
 80a113e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80a1142:	40f2      	lsrs	r2, r6
 80a1144:	ea4c 0202 	orr.w	r2, ip, r2
 80a1148:	40f7      	lsrs	r7, r6
 80a114a:	e9c5 2700 	strd	r2, r7, [r5]
 80a114e:	2600      	movs	r6, #0
 80a1150:	4631      	mov	r1, r6
 80a1152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a1156:	462e      	mov	r6, r5
 80a1158:	4628      	mov	r0, r5
 80a115a:	e70b      	b.n	80a0f74 <__udivmoddi4+0xa0>
 80a115c:	4606      	mov	r6, r0
 80a115e:	e6e9      	b.n	80a0f34 <__udivmoddi4+0x60>
 80a1160:	4618      	mov	r0, r3
 80a1162:	e6fd      	b.n	80a0f60 <__udivmoddi4+0x8c>
 80a1164:	4543      	cmp	r3, r8
 80a1166:	d2e5      	bcs.n	80a1134 <__udivmoddi4+0x260>
 80a1168:	ebb8 0e02 	subs.w	lr, r8, r2
 80a116c:	eb69 0104 	sbc.w	r1, r9, r4
 80a1170:	3801      	subs	r0, #1
 80a1172:	e7df      	b.n	80a1134 <__udivmoddi4+0x260>
 80a1174:	4608      	mov	r0, r1
 80a1176:	e7d2      	b.n	80a111e <__udivmoddi4+0x24a>
 80a1178:	4660      	mov	r0, ip
 80a117a:	e78d      	b.n	80a1098 <__udivmoddi4+0x1c4>
 80a117c:	4681      	mov	r9, r0
 80a117e:	e7b9      	b.n	80a10f4 <__udivmoddi4+0x220>
 80a1180:	4666      	mov	r6, ip
 80a1182:	e775      	b.n	80a1070 <__udivmoddi4+0x19c>
 80a1184:	4630      	mov	r0, r6
 80a1186:	e74a      	b.n	80a101e <__udivmoddi4+0x14a>
 80a1188:	f1ac 0c02 	sub.w	ip, ip, #2
 80a118c:	4439      	add	r1, r7
 80a118e:	e713      	b.n	80a0fb8 <__udivmoddi4+0xe4>
 80a1190:	3802      	subs	r0, #2
 80a1192:	443c      	add	r4, r7
 80a1194:	e724      	b.n	80a0fe0 <__udivmoddi4+0x10c>
 80a1196:	bf00      	nop

080a1198 <__aeabi_idiv0>:
 80a1198:	4770      	bx	lr
 80a119a:	bf00      	nop

080a119c <AKS_ConvertCoordinate>:
static uint8_t sensor_activate_count = 0;
static bool mag_activated = false;

void AKS_ConvertCoordinate(int32_t vec[3], const uint8_t axis_order[3],
                           const uint8_t axis_sign[3])
{
 80a119c:	b480      	push	{r7}
 80a119e:	b089      	sub	sp, #36	; 0x24
 80a11a0:	af00      	add	r7, sp, #0
 80a11a2:	60f8      	str	r0, [r7, #12]
 80a11a4:	60b9      	str	r1, [r7, #8]
 80a11a6:	607a      	str	r2, [r7, #4]
  int32_t val32[3];
  uint8_t i;

  /* Axis conversion */
  for (i = 0; i < 3; i++) {
 80a11a8:	2300      	movs	r3, #0
 80a11aa:	77fb      	strb	r3, [r7, #31]
 80a11ac:	e026      	b.n	80a11fc <AKS_ConvertCoordinate+0x60>
    val32[i] = vec[axis_order[i]];
 80a11ae:	7ffb      	ldrb	r3, [r7, #31]
 80a11b0:	68ba      	ldr	r2, [r7, #8]
 80a11b2:	4413      	add	r3, r2
 80a11b4:	781b      	ldrb	r3, [r3, #0]
 80a11b6:	009b      	lsls	r3, r3, #2
 80a11b8:	68fa      	ldr	r2, [r7, #12]
 80a11ba:	441a      	add	r2, r3
 80a11bc:	7ffb      	ldrb	r3, [r7, #31]
 80a11be:	6812      	ldr	r2, [r2, #0]
 80a11c0:	009b      	lsls	r3, r3, #2
 80a11c2:	f107 0120 	add.w	r1, r7, #32
 80a11c6:	440b      	add	r3, r1
 80a11c8:	f843 2c10 	str.w	r2, [r3, #-16]

    if (axis_sign[i]) {
 80a11cc:	7ffb      	ldrb	r3, [r7, #31]
 80a11ce:	687a      	ldr	r2, [r7, #4]
 80a11d0:	4413      	add	r3, r2
 80a11d2:	781b      	ldrb	r3, [r3, #0]
 80a11d4:	2b00      	cmp	r3, #0
 80a11d6:	d00e      	beq.n	80a11f6 <AKS_ConvertCoordinate+0x5a>
      val32[i] *= -1;
 80a11d8:	7ffb      	ldrb	r3, [r7, #31]
 80a11da:	009b      	lsls	r3, r3, #2
 80a11dc:	f107 0220 	add.w	r2, r7, #32
 80a11e0:	4413      	add	r3, r2
 80a11e2:	f853 2c10 	ldr.w	r2, [r3, #-16]
 80a11e6:	7ffb      	ldrb	r3, [r7, #31]
 80a11e8:	4252      	negs	r2, r2
 80a11ea:	009b      	lsls	r3, r3, #2
 80a11ec:	f107 0120 	add.w	r1, r7, #32
 80a11f0:	440b      	add	r3, r1
 80a11f2:	f843 2c10 	str.w	r2, [r3, #-16]
  for (i = 0; i < 3; i++) {
 80a11f6:	7ffb      	ldrb	r3, [r7, #31]
 80a11f8:	3301      	adds	r3, #1
 80a11fa:	77fb      	strb	r3, [r7, #31]
 80a11fc:	7ffb      	ldrb	r3, [r7, #31]
 80a11fe:	2b02      	cmp	r3, #2
 80a1200:	d9d5      	bls.n	80a11ae <AKS_ConvertCoordinate+0x12>
    }
  }

  /* Copy to argument */
  for (i = 0; i < 3; i++) {
 80a1202:	2300      	movs	r3, #0
 80a1204:	77fb      	strb	r3, [r7, #31]
 80a1206:	e00e      	b.n	80a1226 <AKS_ConvertCoordinate+0x8a>
    vec[i] = val32[i];
 80a1208:	7ffb      	ldrb	r3, [r7, #31]
 80a120a:	7ffa      	ldrb	r2, [r7, #31]
 80a120c:	0092      	lsls	r2, r2, #2
 80a120e:	68f9      	ldr	r1, [r7, #12]
 80a1210:	440a      	add	r2, r1
 80a1212:	009b      	lsls	r3, r3, #2
 80a1214:	f107 0120 	add.w	r1, r7, #32
 80a1218:	440b      	add	r3, r1
 80a121a:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80a121e:	6013      	str	r3, [r2, #0]
  for (i = 0; i < 3; i++) {
 80a1220:	7ffb      	ldrb	r3, [r7, #31]
 80a1222:	3301      	adds	r3, #1
 80a1224:	77fb      	strb	r3, [r7, #31]
 80a1226:	7ffb      	ldrb	r3, [r7, #31]
 80a1228:	2b02      	cmp	r3, #2
 80a122a:	d9ed      	bls.n	80a1208 <AKS_ConvertCoordinate+0x6c>
  }
}
 80a122c:	bf00      	nop
 80a122e:	bf00      	nop
 80a1230:	3724      	adds	r7, #36	; 0x24
 80a1232:	46bd      	mov	sp, r7
 80a1234:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a1238:	4770      	bx	lr
	...

080a123c <platform_write>:
 * @param  len       number of consecutive register to write
 *
 */
static int32_t platform_write(void *handle, uint8_t reg, uint8_t * bufp,
                              uint16_t len)
{
 80a123c:	b580      	push	{r7, lr}
 80a123e:	b088      	sub	sp, #32
 80a1240:	af04      	add	r7, sp, #16
 80a1242:	60f8      	str	r0, [r7, #12]
 80a1244:	607a      	str	r2, [r7, #4]
 80a1246:	461a      	mov	r2, r3
 80a1248:	460b      	mov	r3, r1
 80a124a:	72fb      	strb	r3, [r7, #11]
 80a124c:	4613      	mov	r3, r2
 80a124e:	813b      	strh	r3, [r7, #8]
  if (handle == &mag_init_parms->i2c_handle) {
 80a1250:	4b0c      	ldr	r3, [pc, #48]	; (80a1284 <platform_write+0x48>)
 80a1252:	681b      	ldr	r3, [r3, #0]
 80a1254:	3304      	adds	r3, #4
 80a1256:	68fa      	ldr	r2, [r7, #12]
 80a1258:	429a      	cmp	r2, r3
 80a125a:	d10d      	bne.n	80a1278 <platform_write+0x3c>
    //printf("start i2c write, \r\n");
    HAL_I2C_Mem_Write(handle, MAGNETOMETER_SLAVE_ADDR, reg,
 80a125c:	7afb      	ldrb	r3, [r7, #11]
 80a125e:	b29a      	uxth	r2, r3
 80a1260:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1264:	9302      	str	r3, [sp, #8]
 80a1266:	893b      	ldrh	r3, [r7, #8]
 80a1268:	9301      	str	r3, [sp, #4]
 80a126a:	687b      	ldr	r3, [r7, #4]
 80a126c:	9300      	str	r3, [sp, #0]
 80a126e:	2301      	movs	r3, #1
 80a1270:	2118      	movs	r1, #24
 80a1272:	68f8      	ldr	r0, [r7, #12]
 80a1274:	f010 fea2 	bl	80b1fbc <HAL_I2C_Mem_Write>
                      I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  }

  return 0;
 80a1278:	2300      	movs	r3, #0
}
 80a127a:	4618      	mov	r0, r3
 80a127c:	3710      	adds	r7, #16
 80a127e:	46bd      	mov	sp, r7
 80a1280:	bd80      	pop	{r7, pc}
 80a1282:	bf00      	nop
 80a1284:	20007ec8 	.word	0x20007ec8

080a1288 <platform_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t * bufp,
                             uint16_t len)
{
 80a1288:	b580      	push	{r7, lr}
 80a128a:	b088      	sub	sp, #32
 80a128c:	af04      	add	r7, sp, #16
 80a128e:	60f8      	str	r0, [r7, #12]
 80a1290:	607a      	str	r2, [r7, #4]
 80a1292:	461a      	mov	r2, r3
 80a1294:	460b      	mov	r3, r1
 80a1296:	72fb      	strb	r3, [r7, #11]
 80a1298:	4613      	mov	r3, r2
 80a129a:	813b      	strh	r3, [r7, #8]
  if (handle == &mag_init_parms->i2c_handle) {
 80a129c:	4b0c      	ldr	r3, [pc, #48]	; (80a12d0 <platform_read+0x48>)
 80a129e:	681b      	ldr	r3, [r3, #0]
 80a12a0:	3304      	adds	r3, #4
 80a12a2:	68fa      	ldr	r2, [r7, #12]
 80a12a4:	429a      	cmp	r2, r3
 80a12a6:	d10d      	bne.n	80a12c4 <platform_read+0x3c>
    //printf("start i2c read, \r\n");
    HAL_I2C_Mem_Read(handle, MAGNETOMETER_SLAVE_ADDR, reg,
 80a12a8:	7afb      	ldrb	r3, [r7, #11]
 80a12aa:	b29a      	uxth	r2, r3
 80a12ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a12b0:	9302      	str	r3, [sp, #8]
 80a12b2:	893b      	ldrh	r3, [r7, #8]
 80a12b4:	9301      	str	r3, [sp, #4]
 80a12b6:	687b      	ldr	r3, [r7, #4]
 80a12b8:	9300      	str	r3, [sp, #0]
 80a12ba:	2301      	movs	r3, #1
 80a12bc:	2118      	movs	r1, #24
 80a12be:	68f8      	ldr	r0, [r7, #12]
 80a12c0:	f010 ff76 	bl	80b21b0 <HAL_I2C_Mem_Read>
                     I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  }

  return 0;
 80a12c4:	2300      	movs	r3, #0
}
 80a12c6:	4618      	mov	r0, r3
 80a12c8:	3710      	adds	r7, #16
 80a12ca:	46bd      	mov	sp, r7
 80a12cc:	bd80      	pop	{r7, pc}
 80a12ce:	bf00      	nop
 80a12d0:	20007ec8 	.word	0x20007ec8

080a12d4 <ak09918_mag_init_complete>:

int ak09918_mag_init_complete(void *para)
{
 80a12d4:	b480      	push	{r7}
 80a12d6:	b083      	sub	sp, #12
 80a12d8:	af00      	add	r7, sp, #0
 80a12da:	6078      	str	r0, [r7, #4]
  return AKM_SUCCESS;
 80a12dc:	2300      	movs	r3, #0
}
 80a12de:	4618      	mov	r0, r3
 80a12e0:	370c      	adds	r7, #12
 80a12e2:	46bd      	mov	sp, r7
 80a12e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a12e8:	4770      	bx	lr
	...

080a12ec <ak099xx_start>:

int16_t ak099xx_start(stmdev_ctx_t * ctx)
{
 80a12ec:	b580      	push	{r7, lr}
 80a12ee:	b084      	sub	sp, #16
 80a12f0:	af00      	add	r7, sp, #0
 80a12f2:	6078      	str	r0, [r7, #4]
  int32_t ret = 0;
 80a12f4:	2300      	movs	r3, #0
 80a12f6:	60fb      	str	r3, [r7, #12]
  if (sensor_activate_count == 0) {
 80a12f8:	4b0b      	ldr	r3, [pc, #44]	; (80a1328 <ak099xx_start+0x3c>)
 80a12fa:	781b      	ldrb	r3, [r3, #0]
 80a12fc:	2b00      	cmp	r3, #0
 80a12fe:	d107      	bne.n	80a1310 <ak099xx_start+0x24>
    mag_activated = true;
 80a1300:	4b0a      	ldr	r3, [pc, #40]	; (80a132c <ak099xx_start+0x40>)
 80a1302:	2201      	movs	r2, #1
 80a1304:	701a      	strb	r2, [r3, #0]
    /* 50 - 100 Hz */
    ret = ak099xx_set_mode(ctx, AK099XX_MODE_CONT_MEASURE_MODE4);
 80a1306:	2108      	movs	r1, #8
 80a1308:	6878      	ldr	r0, [r7, #4]
 80a130a:	f000 f98d 	bl	80a1628 <ak099xx_set_mode>
 80a130e:	60f8      	str	r0, [r7, #12]
  }
  sensor_activate_count++;
 80a1310:	4b05      	ldr	r3, [pc, #20]	; (80a1328 <ak099xx_start+0x3c>)
 80a1312:	781b      	ldrb	r3, [r3, #0]
 80a1314:	3301      	adds	r3, #1
 80a1316:	b2da      	uxtb	r2, r3
 80a1318:	4b03      	ldr	r3, [pc, #12]	; (80a1328 <ak099xx_start+0x3c>)
 80a131a:	701a      	strb	r2, [r3, #0]
  return ret;
 80a131c:	68fb      	ldr	r3, [r7, #12]
 80a131e:	b21b      	sxth	r3, r3
}
 80a1320:	4618      	mov	r0, r3
 80a1322:	3710      	adds	r7, #16
 80a1324:	46bd      	mov	sp, r7
 80a1326:	bd80      	pop	{r7, pc}
 80a1328:	20007ecc 	.word	0x20007ecc
 80a132c:	20007ecd 	.word	0x20007ecd

080a1330 <ak099xx_stop>:

int16_t ak099xx_stop(stmdev_ctx_t * ctx)
{
 80a1330:	b580      	push	{r7, lr}
 80a1332:	b084      	sub	sp, #16
 80a1334:	af00      	add	r7, sp, #0
 80a1336:	6078      	str	r0, [r7, #4]
  int32_t ret = 0;
 80a1338:	2300      	movs	r3, #0
 80a133a:	60fb      	str	r3, [r7, #12]
  sensor_activate_count--;
 80a133c:	4b0b      	ldr	r3, [pc, #44]	; (80a136c <ak099xx_stop+0x3c>)
 80a133e:	781b      	ldrb	r3, [r3, #0]
 80a1340:	3b01      	subs	r3, #1
 80a1342:	b2da      	uxtb	r2, r3
 80a1344:	4b09      	ldr	r3, [pc, #36]	; (80a136c <ak099xx_stop+0x3c>)
 80a1346:	701a      	strb	r2, [r3, #0]
  if (sensor_activate_count == 0) {
 80a1348:	4b08      	ldr	r3, [pc, #32]	; (80a136c <ak099xx_stop+0x3c>)
 80a134a:	781b      	ldrb	r3, [r3, #0]
 80a134c:	2b00      	cmp	r3, #0
 80a134e:	d107      	bne.n	80a1360 <ak099xx_stop+0x30>
    mag_activated = false;
 80a1350:	4b07      	ldr	r3, [pc, #28]	; (80a1370 <ak099xx_stop+0x40>)
 80a1352:	2200      	movs	r2, #0
 80a1354:	701a      	strb	r2, [r3, #0]
    /* 50 - 100 Hz */
    ret = ak099xx_set_mode(ctx, AK099XX_MODE_POWER_DOWN);
 80a1356:	2100      	movs	r1, #0
 80a1358:	6878      	ldr	r0, [r7, #4]
 80a135a:	f000 f965 	bl	80a1628 <ak099xx_set_mode>
 80a135e:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80a1360:	68fb      	ldr	r3, [r7, #12]
 80a1362:	b21b      	sxth	r3, r3
}
 80a1364:	4618      	mov	r0, r3
 80a1366:	3710      	adds	r7, #16
 80a1368:	46bd      	mov	sp, r7
 80a136a:	bd80      	pop	{r7, pc}
 80a136c:	20007ecc 	.word	0x20007ecc
 80a1370:	20007ecd 	.word	0x20007ecd

080a1374 <ak09918_mag_activate>:

int ak09918_mag_activate(bool activate)
{
 80a1374:	b580      	push	{r7, lr}
 80a1376:	b084      	sub	sp, #16
 80a1378:	af00      	add	r7, sp, #0
 80a137a:	4603      	mov	r3, r0
 80a137c:	71fb      	strb	r3, [r7, #7]
  int res = 0;
 80a137e:	2300      	movs	r3, #0
 80a1380:	60fb      	str	r3, [r7, #12]
  printf("ak09918_mag_activate: %d \r\n", activate);
 80a1382:	79fb      	ldrb	r3, [r7, #7]
 80a1384:	4619      	mov	r1, r3
 80a1386:	480b      	ldr	r0, [pc, #44]	; (80a13b4 <ak09918_mag_activate+0x40>)
 80a1388:	f01f faf4 	bl	80c0974 <iprintf>
  if (activate) {
 80a138c:	79fb      	ldrb	r3, [r7, #7]
 80a138e:	2b00      	cmp	r3, #0
 80a1390:	d005      	beq.n	80a139e <ak09918_mag_activate+0x2a>
    res = ak099xx_start(&dev_ctx);
 80a1392:	4809      	ldr	r0, [pc, #36]	; (80a13b8 <ak09918_mag_activate+0x44>)
 80a1394:	f7ff ffaa 	bl	80a12ec <ak099xx_start>
 80a1398:	4603      	mov	r3, r0
 80a139a:	60fb      	str	r3, [r7, #12]
 80a139c:	e004      	b.n	80a13a8 <ak09918_mag_activate+0x34>
  } else {
    res = ak099xx_stop(&dev_ctx);
 80a139e:	4806      	ldr	r0, [pc, #24]	; (80a13b8 <ak09918_mag_activate+0x44>)
 80a13a0:	f7ff ffc6 	bl	80a1330 <ak099xx_stop>
 80a13a4:	4603      	mov	r3, r0
 80a13a6:	60fb      	str	r3, [r7, #12]
  }
  return res;
 80a13a8:	68fb      	ldr	r3, [r7, #12]
}
 80a13aa:	4618      	mov	r0, r3
 80a13ac:	3710      	adds	r7, #16
 80a13ae:	46bd      	mov	sp, r7
 80a13b0:	bd80      	pop	{r7, pc}
 80a13b2:	bf00      	nop
 80a13b4:	080c4b80 	.word	0x080c4b80
 80a13b8:	20007ebc 	.word	0x20007ebc

080a13bc <ak09918_mag_publish_sensor_data>:

int ak09918_mag_publish_sensor_data(void *para)
{
 80a13bc:	b580      	push	{r7, lr}
 80a13be:	b0a4      	sub	sp, #144	; 0x90
 80a13c0:	af00      	add	r7, sp, #0
 80a13c2:	6078      	str	r0, [r7, #4]
  struct AKM_SENSOR_DATA data;
  int fret = AKM_SUCCESS, ready = 0;
 80a13c4:	2300      	movs	r3, #0
 80a13c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80a13ca:	2300      	movs	r3, #0
 80a13cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t num = 1;
 80a13d0:	2301      	movs	r3, #1
 80a13d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  sensors_event_t sensor_data = { 0 };
 80a13d6:	f107 0308 	add.w	r3, r7, #8
 80a13da:	2250      	movs	r2, #80	; 0x50
 80a13dc:	2100      	movs	r1, #0
 80a13de:	4618      	mov	r0, r3
 80a13e0:	f01e fdec 	bl	80bffbc <memset>

  ready = ak099xx_check_rdy(&dev_ctx);
 80a13e4:	482c      	ldr	r0, [pc, #176]	; (80a1498 <ak09918_mag_publish_sensor_data+0xdc>)
 80a13e6:	f000 f97a 	bl	80a16de <ak099xx_check_rdy>
 80a13ea:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
  if (ready == 1 && mag_activated) {
 80a13ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80a13f2:	2b01      	cmp	r3, #1
 80a13f4:	d149      	bne.n	80a148a <ak09918_mag_publish_sensor_data+0xce>
 80a13f6:	4b29      	ldr	r3, [pc, #164]	; (80a149c <ak09918_mag_publish_sensor_data+0xe0>)
 80a13f8:	781b      	ldrb	r3, [r3, #0]
 80a13fa:	2b00      	cmp	r3, #0
 80a13fc:	d045      	beq.n	80a148a <ak09918_mag_publish_sensor_data+0xce>
    fret = ak099xx_get_data(&dev_ctx, &data, &num);
 80a13fe:	f107 025f 	add.w	r2, r7, #95	; 0x5f
 80a1402:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80a1406:	4619      	mov	r1, r3
 80a1408:	4823      	ldr	r0, [pc, #140]	; (80a1498 <ak09918_mag_publish_sensor_data+0xdc>)
 80a140a:	f000 f985 	bl	80a1718 <ak099xx_get_data>
 80a140e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    AKS_ConvertCoordinate(data.u.v, g_mag_axis_order, g_mag_axis_sign);
 80a1412:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80a1416:	4a22      	ldr	r2, [pc, #136]	; (80a14a0 <ak09918_mag_publish_sensor_data+0xe4>)
 80a1418:	4922      	ldr	r1, [pc, #136]	; (80a14a4 <ak09918_mag_publish_sensor_data+0xe8>)
 80a141a:	4618      	mov	r0, r3
 80a141c:	f7ff febe 	bl	80a119c <AKS_ConvertCoordinate>

    //send related messages to SensorDataQ
    sensor_data.sensor_type = SENSOR_TYPE_MAGNETIC_FIELD;
 80a1420:	2301      	movs	r3, #1
 80a1422:	723b      	strb	r3, [r7, #8]
    sensor_data.accuracy = 3;
 80a1424:	2303      	movs	r3, #3
 80a1426:	727b      	strb	r3, [r7, #9]
    sensor_data.timestamp = sensor_get_timestamp();
 80a1428:	f00c f96e 	bl	80ad708 <sensor_get_timestamp>
 80a142c:	4602      	mov	r2, r0
 80a142e:	460b      	mov	r3, r1
 80a1430:	e9c7 2304 	strd	r2, r3, [r7, #16]
    sensor_data.sensor_data_t.vec.data[0] = data.u.v[0] / 65535.0f;     //convert Q16 to uT
 80a1434:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80a1436:	ee07 3a90 	vmov	s15, r3
 80a143a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80a143e:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80a14a8 <ak09918_mag_publish_sensor_data+0xec>
 80a1442:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80a1446:	edc7 7a06 	vstr	s15, [r7, #24]
    sensor_data.sensor_data_t.vec.data[1] = data.u.v[1] / 65535.0f;
 80a144a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80a144c:	ee07 3a90 	vmov	s15, r3
 80a1450:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80a1454:	eddf 6a14 	vldr	s13, [pc, #80]	; 80a14a8 <ak09918_mag_publish_sensor_data+0xec>
 80a1458:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80a145c:	edc7 7a07 	vstr	s15, [r7, #28]
    sensor_data.sensor_data_t.vec.data[2] = data.u.v[2] / 65535.0f;
 80a1460:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80a1462:	ee07 3a90 	vmov	s15, r3
 80a1466:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80a146a:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80a14a8 <ak09918_mag_publish_sensor_data+0xec>
 80a146e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80a1472:	edc7 7a08 	vstr	s15, [r7, #32]
    osMessageQueuePut(mag_init_parms->SensorDataQHandle, &sensor_data, 0, 0);
 80a1476:	4b0d      	ldr	r3, [pc, #52]	; (80a14ac <ak09918_mag_publish_sensor_data+0xf0>)
 80a1478:	681b      	ldr	r3, [r3, #0]
 80a147a:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 80a147e:	f107 0108 	add.w	r1, r7, #8
 80a1482:	2300      	movs	r3, #0
 80a1484:	2200      	movs	r2, #0
 80a1486:	f014 ffbd 	bl	80b6404 <osMessageQueuePut>
  }

  return fret;
 80a148a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
}
 80a148e:	4618      	mov	r0, r3
 80a1490:	3790      	adds	r7, #144	; 0x90
 80a1492:	46bd      	mov	sp, r7
 80a1494:	bd80      	pop	{r7, pc}
 80a1496:	bf00      	nop
 80a1498:	20007ebc 	.word	0x20007ebc
 80a149c:	20007ecd 	.word	0x20007ecd
 80a14a0:	20007eb8 	.word	0x20007eb8
 80a14a4:	20007eb4 	.word	0x20007eb4
 80a14a8:	477fff00 	.word	0x477fff00
 80a14ac:	20007ec8 	.word	0x20007ec8

080a14b0 <ak09918_mag_init>:

int ak09918_mag_init(void *para1, void *para2)
{
 80a14b0:	b580      	push	{r7, lr}
 80a14b2:	b084      	sub	sp, #16
 80a14b4:	af00      	add	r7, sp, #0
 80a14b6:	6078      	str	r0, [r7, #4]
 80a14b8:	6039      	str	r1, [r7, #0]
  mag_init_parms = (platform_prams *) para1;
 80a14ba:	4a26      	ldr	r2, [pc, #152]	; (80a1554 <ak09918_mag_init+0xa4>)
 80a14bc:	687b      	ldr	r3, [r7, #4]
 80a14be:	6013      	str	r3, [r2, #0]
  int fret;
  uint16_t WhoAmI = 0;
 80a14c0:	2300      	movs	r3, #0
 80a14c2:	817b      	strh	r3, [r7, #10]
  dev_ctx.write_reg = platform_write;
 80a14c4:	4b24      	ldr	r3, [pc, #144]	; (80a1558 <ak09918_mag_init+0xa8>)
 80a14c6:	4a25      	ldr	r2, [pc, #148]	; (80a155c <ak09918_mag_init+0xac>)
 80a14c8:	601a      	str	r2, [r3, #0]
  dev_ctx.read_reg = platform_read;
 80a14ca:	4b23      	ldr	r3, [pc, #140]	; (80a1558 <ak09918_mag_init+0xa8>)
 80a14cc:	4a24      	ldr	r2, [pc, #144]	; (80a1560 <ak09918_mag_init+0xb0>)
 80a14ce:	605a      	str	r2, [r3, #4]
  dev_ctx.handle = &mag_init_parms->i2c_handle;
 80a14d0:	4b20      	ldr	r3, [pc, #128]	; (80a1554 <ak09918_mag_init+0xa4>)
 80a14d2:	681b      	ldr	r3, [r3, #0]
 80a14d4:	3304      	adds	r3, #4
 80a14d6:	4a20      	ldr	r2, [pc, #128]	; (80a1558 <ak09918_mag_init+0xa8>)
 80a14d8:	6093      	str	r3, [r2, #8]

  //call who I am function here to check if HW pressent
  fret = ak099xx_get_WhoAmI(&dev_ctx, &WhoAmI);
 80a14da:	f107 030a 	add.w	r3, r7, #10
 80a14de:	4619      	mov	r1, r3
 80a14e0:	481d      	ldr	r0, [pc, #116]	; (80a1558 <ak09918_mag_init+0xa8>)
 80a14e2:	f000 f8c3 	bl	80a166c <ak099xx_get_WhoAmI>
 80a14e6:	60f8      	str	r0, [r7, #12]
  if (fret != AKM_SUCCESS) {
 80a14e8:	68fb      	ldr	r3, [r7, #12]
 80a14ea:	2b00      	cmp	r3, #0
 80a14ec:	d001      	beq.n	80a14f2 <ak09918_mag_init+0x42>
    return fret;
 80a14ee:	68fb      	ldr	r3, [r7, #12]
 80a14f0:	e02b      	b.n	80a154a <ak09918_mag_init+0x9a>
  }

  printf("ak09918_mag_init WhoAmI: 0x%x\r\n", WhoAmI);
 80a14f2:	897b      	ldrh	r3, [r7, #10]
 80a14f4:	4619      	mov	r1, r3
 80a14f6:	481b      	ldr	r0, [pc, #108]	; (80a1564 <ak09918_mag_init+0xb4>)
 80a14f8:	f01f fa3c 	bl	80c0974 <iprintf>
  if (WhoAmI != AK09918_WIA_VAL) {
 80a14fc:	897b      	ldrh	r3, [r7, #10]
 80a14fe:	f640 4248 	movw	r2, #3144	; 0xc48
 80a1502:	4293      	cmp	r3, r2
 80a1504:	d005      	beq.n	80a1512 <ak09918_mag_init+0x62>
    printf("ak09918_mag_init failed!\r\n");
 80a1506:	4818      	ldr	r0, [pc, #96]	; (80a1568 <ak09918_mag_init+0xb8>)
 80a1508:	f01f fad0 	bl	80c0aac <puts>
    return AKM_ERROR;
 80a150c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a1510:	e01b      	b.n	80a154a <ak09918_mag_init+0x9a>
  }

  fret = ak099xx_soft_reset(&dev_ctx);
 80a1512:	4811      	ldr	r0, [pc, #68]	; (80a1558 <ak09918_mag_init+0xa8>)
 80a1514:	f000 f8cb 	bl	80a16ae <ak099xx_soft_reset>
 80a1518:	60f8      	str	r0, [r7, #12]
  if (fret != AKM_SUCCESS) {
 80a151a:	68fb      	ldr	r3, [r7, #12]
 80a151c:	2b00      	cmp	r3, #0
 80a151e:	d001      	beq.n	80a1524 <ak09918_mag_init+0x74>
    return fret;
 80a1520:	68fb      	ldr	r3, [r7, #12]
 80a1522:	e012      	b.n	80a154a <ak09918_mag_init+0x9a>
  }

  /* axis conversion parameter */
  g_mag_axis_order[0] = AKM_CUSTOM_MAG_AXIS_ORDER_X;
 80a1524:	4b11      	ldr	r3, [pc, #68]	; (80a156c <ak09918_mag_init+0xbc>)
 80a1526:	2200      	movs	r2, #0
 80a1528:	701a      	strb	r2, [r3, #0]
  g_mag_axis_order[1] = AKM_CUSTOM_MAG_AXIS_ORDER_Y;
 80a152a:	4b10      	ldr	r3, [pc, #64]	; (80a156c <ak09918_mag_init+0xbc>)
 80a152c:	2201      	movs	r2, #1
 80a152e:	705a      	strb	r2, [r3, #1]
  g_mag_axis_order[2] = AKM_CUSTOM_MAG_AXIS_ORDER_Z;
 80a1530:	4b0e      	ldr	r3, [pc, #56]	; (80a156c <ak09918_mag_init+0xbc>)
 80a1532:	2202      	movs	r2, #2
 80a1534:	709a      	strb	r2, [r3, #2]
  g_mag_axis_sign[0] = AKM_CUSTOM_MAG_AXIS_SIGN_X;
 80a1536:	4b0e      	ldr	r3, [pc, #56]	; (80a1570 <ak09918_mag_init+0xc0>)
 80a1538:	2200      	movs	r2, #0
 80a153a:	701a      	strb	r2, [r3, #0]
  g_mag_axis_sign[1] = AKM_CUSTOM_MAG_AXIS_SIGN_Y;
 80a153c:	4b0c      	ldr	r3, [pc, #48]	; (80a1570 <ak09918_mag_init+0xc0>)
 80a153e:	2200      	movs	r2, #0
 80a1540:	705a      	strb	r2, [r3, #1]
  g_mag_axis_sign[2] = AKM_CUSTOM_MAG_AXIS_SIGN_Z;
 80a1542:	4b0b      	ldr	r3, [pc, #44]	; (80a1570 <ak09918_mag_init+0xc0>)
 80a1544:	2200      	movs	r2, #0
 80a1546:	709a      	strb	r2, [r3, #2]

  return AKM_SUCCESS;
 80a1548:	2300      	movs	r3, #0
}
 80a154a:	4618      	mov	r0, r3
 80a154c:	3710      	adds	r7, #16
 80a154e:	46bd      	mov	sp, r7
 80a1550:	bd80      	pop	{r7, pc}
 80a1552:	bf00      	nop
 80a1554:	20007ec8 	.word	0x20007ec8
 80a1558:	20007ebc 	.word	0x20007ebc
 80a155c:	080a123d 	.word	0x080a123d
 80a1560:	080a1289 	.word	0x080a1289
 80a1564:	080c4b9c 	.word	0x080c4b9c
 80a1568:	080c4bbc 	.word	0x080c4bbc
 80a156c:	20007eb4 	.word	0x20007eb4
 80a1570:	20007eb8 	.word	0x20007eb8

080a1574 <ak09918_mag_config>:

int ak09918_mag_config(uint8_t config_type, void *para)
{
 80a1574:	b580      	push	{r7, lr}
 80a1576:	b084      	sub	sp, #16
 80a1578:	af00      	add	r7, sp, #0
 80a157a:	4603      	mov	r3, r0
 80a157c:	6039      	str	r1, [r7, #0]
 80a157e:	71fb      	strb	r3, [r7, #7]
  int res = 0;
 80a1580:	2300      	movs	r3, #0
 80a1582:	60fb      	str	r3, [r7, #12]
  switch (config_type) {
 80a1584:	79fb      	ldrb	r3, [r7, #7]
 80a1586:	2b02      	cmp	r3, #2
 80a1588:	d108      	bne.n	80a159c <ak09918_mag_config+0x28>
  case SENSOR_CONFIG_SELFTEST:
    printf("mag selftest message \r\n");
 80a158a:	4807      	ldr	r0, [pc, #28]	; (80a15a8 <ak09918_mag_config+0x34>)
 80a158c:	f01f fa8e 	bl	80c0aac <puts>
    res = ak09918_self_test(&dev_ctx);
 80a1590:	4806      	ldr	r0, [pc, #24]	; (80a15ac <ak09918_mag_config+0x38>)
 80a1592:	f000 f957 	bl	80a1844 <ak09918_self_test>
 80a1596:	4603      	mov	r3, r0
 80a1598:	60fb      	str	r3, [r7, #12]
    break;
 80a159a:	e000      	b.n	80a159e <ak09918_mag_config+0x2a>
  default:
    break;
 80a159c:	bf00      	nop
  }
  return res;
 80a159e:	68fb      	ldr	r3, [r7, #12]
}
 80a15a0:	4618      	mov	r0, r3
 80a15a2:	3710      	adds	r7, #16
 80a15a4:	46bd      	mov	sp, r7
 80a15a6:	bd80      	pop	{r7, pc}
 80a15a8:	080c4bd8 	.word	0x080c4bd8
 80a15ac:	20007ebc 	.word	0x20007ebc

080a15b0 <ak09918_mag_publish_config_resp>:

int ak09918_mag_publish_config_resp(void *para)
{
 80a15b0:	b480      	push	{r7}
 80a15b2:	b083      	sub	sp, #12
 80a15b4:	af00      	add	r7, sp, #0
 80a15b6:	6078      	str	r0, [r7, #4]
  return AKM_SUCCESS;
 80a15b8:	2300      	movs	r3, #0
}
 80a15ba:	4618      	mov	r0, r3
 80a15bc:	370c      	adds	r7, #12
 80a15be:	46bd      	mov	sp, r7
 80a15c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a15c4:	4770      	bx	lr

080a15c6 <ak09918_read_reg>:
 * @retval          interface status (MANDATORY: return 0 -> no Error)
 *
 */
int32_t ak09918_read_reg(stmdev_ctx_t * ctx, uint8_t reg, uint8_t * data,
                         uint16_t len)
{
 80a15c6:	b590      	push	{r4, r7, lr}
 80a15c8:	b087      	sub	sp, #28
 80a15ca:	af00      	add	r7, sp, #0
 80a15cc:	60f8      	str	r0, [r7, #12]
 80a15ce:	607a      	str	r2, [r7, #4]
 80a15d0:	461a      	mov	r2, r3
 80a15d2:	460b      	mov	r3, r1
 80a15d4:	72fb      	strb	r3, [r7, #11]
 80a15d6:	4613      	mov	r3, r2
 80a15d8:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80a15da:	68fb      	ldr	r3, [r7, #12]
 80a15dc:	685c      	ldr	r4, [r3, #4]
 80a15de:	68fb      	ldr	r3, [r7, #12]
 80a15e0:	6898      	ldr	r0, [r3, #8]
 80a15e2:	893b      	ldrh	r3, [r7, #8]
 80a15e4:	7af9      	ldrb	r1, [r7, #11]
 80a15e6:	687a      	ldr	r2, [r7, #4]
 80a15e8:	47a0      	blx	r4
 80a15ea:	6178      	str	r0, [r7, #20]
  return ret;
 80a15ec:	697b      	ldr	r3, [r7, #20]
}
 80a15ee:	4618      	mov	r0, r3
 80a15f0:	371c      	adds	r7, #28
 80a15f2:	46bd      	mov	sp, r7
 80a15f4:	bd90      	pop	{r4, r7, pc}

080a15f6 <ak09918_write_reg>:
 * @retval          interface status (MANDATORY: return 0 -> no Error)
 *
 */
int32_t ak09918_write_reg(stmdev_ctx_t * ctx, uint8_t reg, uint8_t * data,
                          uint16_t len)
{
 80a15f6:	b590      	push	{r4, r7, lr}
 80a15f8:	b087      	sub	sp, #28
 80a15fa:	af00      	add	r7, sp, #0
 80a15fc:	60f8      	str	r0, [r7, #12]
 80a15fe:	607a      	str	r2, [r7, #4]
 80a1600:	461a      	mov	r2, r3
 80a1602:	460b      	mov	r3, r1
 80a1604:	72fb      	strb	r3, [r7, #11]
 80a1606:	4613      	mov	r3, r2
 80a1608:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80a160a:	68fb      	ldr	r3, [r7, #12]
 80a160c:	681c      	ldr	r4, [r3, #0]
 80a160e:	68fb      	ldr	r3, [r7, #12]
 80a1610:	6898      	ldr	r0, [r3, #8]
 80a1612:	893b      	ldrh	r3, [r7, #8]
 80a1614:	7af9      	ldrb	r1, [r7, #11]
 80a1616:	687a      	ldr	r2, [r7, #4]
 80a1618:	47a0      	blx	r4
 80a161a:	6178      	str	r0, [r7, #20]
  return ret;
 80a161c:	697b      	ldr	r3, [r7, #20]
}
 80a161e:	4618      	mov	r0, r3
 80a1620:	371c      	adds	r7, #28
 80a1622:	46bd      	mov	sp, r7
 80a1624:	bd90      	pop	{r4, r7, pc}
	...

080a1628 <ak099xx_set_mode>:

/******************************************************************************/
/***** AKS public APIs ********************************************************/

int32_t ak099xx_set_mode(stmdev_ctx_t * ctx, const uint8_t mode)
{
 80a1628:	b580      	push	{r7, lr}
 80a162a:	b084      	sub	sp, #16
 80a162c:	af00      	add	r7, sp, #0
 80a162e:	6078      	str	r0, [r7, #4]
 80a1630:	460b      	mov	r3, r1
 80a1632:	70fb      	strb	r3, [r7, #3]
  uint8_t i2cData;
  int32_t fret;

  i2cData = mode;
 80a1634:	78fb      	ldrb	r3, [r7, #3]
 80a1636:	72fb      	strb	r3, [r7, #11]
  printf("ak099xx_set_mode: 0x%x\r\n", mode);
 80a1638:	78fb      	ldrb	r3, [r7, #3]
 80a163a:	4619      	mov	r1, r3
 80a163c:	480a      	ldr	r0, [pc, #40]	; (80a1668 <ak099xx_set_mode+0x40>)
 80a163e:	f01f f999 	bl	80c0974 <iprintf>
  fret = ak09918_write_reg(ctx, AK099XX_REG_CNTL2, &i2cData, 1);
 80a1642:	f107 020b 	add.w	r2, r7, #11
 80a1646:	2301      	movs	r3, #1
 80a1648:	2131      	movs	r1, #49	; 0x31
 80a164a:	6878      	ldr	r0, [r7, #4]
 80a164c:	f7ff ffd3 	bl	80a15f6 <ak09918_write_reg>
 80a1650:	60f8      	str	r0, [r7, #12]
  if (fret != AKM_SUCCESS) {
 80a1652:	68fb      	ldr	r3, [r7, #12]
 80a1654:	2b00      	cmp	r3, #0
 80a1656:	d001      	beq.n	80a165c <ak099xx_set_mode+0x34>
    return fret;
 80a1658:	68fb      	ldr	r3, [r7, #12]
 80a165a:	e000      	b.n	80a165e <ak099xx_set_mode+0x36>
  }

  return AKM_SUCCESS;
 80a165c:	2300      	movs	r3, #0
}
 80a165e:	4618      	mov	r0, r3
 80a1660:	3710      	adds	r7, #16
 80a1662:	46bd      	mov	sp, r7
 80a1664:	bd80      	pop	{r7, pc}
 80a1666:	bf00      	nop
 80a1668:	080c4bf0 	.word	0x080c4bf0

080a166c <ak099xx_get_WhoAmI>:

int32_t ak099xx_get_WhoAmI(stmdev_ctx_t * ctx, uint16_t * WhoAmI)
{
 80a166c:	b580      	push	{r7, lr}
 80a166e:	b084      	sub	sp, #16
 80a1670:	af00      	add	r7, sp, #0
 80a1672:	6078      	str	r0, [r7, #4]
 80a1674:	6039      	str	r1, [r7, #0]
  uint8_t i2cData[4];
  int32_t fret;

  /* Read WIA */
  fret = ak09918_read_reg(ctx, AK099XX_REG_WIA1, i2cData, 4);
 80a1676:	f107 0208 	add.w	r2, r7, #8
 80a167a:	2304      	movs	r3, #4
 80a167c:	2100      	movs	r1, #0
 80a167e:	6878      	ldr	r0, [r7, #4]
 80a1680:	f7ff ffa1 	bl	80a15c6 <ak09918_read_reg>
 80a1684:	60f8      	str	r0, [r7, #12]

  if (fret != AKM_SUCCESS) {
 80a1686:	68fb      	ldr	r3, [r7, #12]
 80a1688:	2b00      	cmp	r3, #0
 80a168a:	d001      	beq.n	80a1690 <ak099xx_get_WhoAmI+0x24>
    return fret;
 80a168c:	68fb      	ldr	r3, [r7, #12]
 80a168e:	e00a      	b.n	80a16a6 <ak099xx_get_WhoAmI+0x3a>
  }

  /* Store device id (actually, it is company id.) */
  *WhoAmI = (((uint16_t) i2cData[1] << 8) | i2cData[0]);
 80a1690:	7a7b      	ldrb	r3, [r7, #9]
 80a1692:	021b      	lsls	r3, r3, #8
 80a1694:	b21a      	sxth	r2, r3
 80a1696:	7a3b      	ldrb	r3, [r7, #8]
 80a1698:	b21b      	sxth	r3, r3
 80a169a:	4313      	orrs	r3, r2
 80a169c:	b21b      	sxth	r3, r3
 80a169e:	b29a      	uxth	r2, r3
 80a16a0:	683b      	ldr	r3, [r7, #0]
 80a16a2:	801a      	strh	r2, [r3, #0]
  return AKM_SUCCESS;
 80a16a4:	2300      	movs	r3, #0
}
 80a16a6:	4618      	mov	r0, r3
 80a16a8:	3710      	adds	r7, #16
 80a16aa:	46bd      	mov	sp, r7
 80a16ac:	bd80      	pop	{r7, pc}

080a16ae <ak099xx_soft_reset>:

int32_t ak099xx_soft_reset(stmdev_ctx_t * ctx)
{
 80a16ae:	b580      	push	{r7, lr}
 80a16b0:	b084      	sub	sp, #16
 80a16b2:	af00      	add	r7, sp, #0
 80a16b4:	6078      	str	r0, [r7, #4]
  uint8_t i2cData;
  int32_t fret;

  /* Soft Reset */
  i2cData = AK099XX_SOFT_RESET;
 80a16b6:	2301      	movs	r3, #1
 80a16b8:	72fb      	strb	r3, [r7, #11]
  fret = ak09918_write_reg(ctx, AK099XX_REG_CNTL3, &i2cData, 1);
 80a16ba:	f107 020b 	add.w	r2, r7, #11
 80a16be:	2301      	movs	r3, #1
 80a16c0:	2132      	movs	r1, #50	; 0x32
 80a16c2:	6878      	ldr	r0, [r7, #4]
 80a16c4:	f7ff ff97 	bl	80a15f6 <ak09918_write_reg>
 80a16c8:	60f8      	str	r0, [r7, #12]

  if (fret != AKM_SUCCESS) {
 80a16ca:	68fb      	ldr	r3, [r7, #12]
 80a16cc:	2b00      	cmp	r3, #0
 80a16ce:	d001      	beq.n	80a16d4 <ak099xx_soft_reset+0x26>
    return fret;
 80a16d0:	68fb      	ldr	r3, [r7, #12]
 80a16d2:	e000      	b.n	80a16d6 <ak099xx_soft_reset+0x28>
  }

  return AKM_SUCCESS;
 80a16d4:	2300      	movs	r3, #0
}
 80a16d6:	4618      	mov	r0, r3
 80a16d8:	3710      	adds	r7, #16
 80a16da:	46bd      	mov	sp, r7
 80a16dc:	bd80      	pop	{r7, pc}

080a16de <ak099xx_check_rdy>:

int32_t ak099xx_check_rdy(stmdev_ctx_t * ctx)
{
 80a16de:	b580      	push	{r7, lr}
 80a16e0:	b084      	sub	sp, #16
 80a16e2:	af00      	add	r7, sp, #0
 80a16e4:	6078      	str	r0, [r7, #4]
  uint8_t i2cData;
  int32_t fret;

  /* Check DRDY bit of ST1 register */
  fret = ak09918_read_reg(ctx, AK099XX_REG_ST1, &i2cData, 1);
 80a16e6:	f107 020b 	add.w	r2, r7, #11
 80a16ea:	2301      	movs	r3, #1
 80a16ec:	2110      	movs	r1, #16
 80a16ee:	6878      	ldr	r0, [r7, #4]
 80a16f0:	f7ff ff69 	bl	80a15c6 <ak09918_read_reg>
 80a16f4:	60f8      	str	r0, [r7, #12]
  //printf("ak099xx_check_rdy reg: 0x%x\r\n", i2cData);
  if (fret != AKM_SUCCESS) {
 80a16f6:	68fb      	ldr	r3, [r7, #12]
 80a16f8:	2b00      	cmp	r3, #0
 80a16fa:	d001      	beq.n	80a1700 <ak099xx_check_rdy+0x22>
    //printf("ak099xx_check_rdy error: %d\r\n", fret);
    return 0;
 80a16fc:	2300      	movs	r3, #0
 80a16fe:	e007      	b.n	80a1710 <ak099xx_check_rdy+0x32>
  }

  /* AK09911/09912/09913 has only one data.
   * So, return is 0 or 1. */
  if (i2cData & 0x01) {
 80a1700:	7afb      	ldrb	r3, [r7, #11]
 80a1702:	f003 0301 	and.w	r3, r3, #1
 80a1706:	2b00      	cmp	r3, #0
 80a1708:	d001      	beq.n	80a170e <ak099xx_check_rdy+0x30>
    //printf("ak099xx_check_rdy success\r\n");
    return 1;
 80a170a:	2301      	movs	r3, #1
 80a170c:	e000      	b.n	80a1710 <ak099xx_check_rdy+0x32>
  } else {
    //printf("ak099xx_check_rdy failed\r\n");
    return 0;
 80a170e:	2300      	movs	r3, #0
  }
}
 80a1710:	4618      	mov	r0, r3
 80a1712:	3710      	adds	r7, #16
 80a1714:	46bd      	mov	sp, r7
 80a1716:	bd80      	pop	{r7, pc}

080a1718 <ak099xx_get_data>:

int32_t ak099xx_get_data(stmdev_ctx_t * ctx, struct AKM_SENSOR_DATA * data,
                         uint8_t * num)
{
 80a1718:	b580      	push	{r7, lr}
 80a171a:	b08a      	sub	sp, #40	; 0x28
 80a171c:	af00      	add	r7, sp, #0
 80a171e:	60f8      	str	r0, [r7, #12]
 80a1720:	60b9      	str	r1, [r7, #8]
 80a1722:	607a      	str	r2, [r7, #4]
  int16_t tmp;
  int32_t fret;
  uint8_t i;

  /* check arg */
  if (*num < 1) {
 80a1724:	687b      	ldr	r3, [r7, #4]
 80a1726:	781b      	ldrb	r3, [r3, #0]
 80a1728:	2b00      	cmp	r3, #0
 80a172a:	d102      	bne.n	80a1732 <ak099xx_get_data+0x1a>
    return AKM_ERR_INVALID_ARG;
 80a172c:	f06f 0301 	mvn.w	r3, #1
 80a1730:	e04a      	b.n	80a17c8 <ak099xx_get_data+0xb0>
  }

  /* Read data */
  fret = ak09918_read_reg(ctx, AK099XX_REG_ST1, i2cData, AK099XX_BDATA_SIZE);
 80a1732:	f107 0214 	add.w	r2, r7, #20
 80a1736:	2309      	movs	r3, #9
 80a1738:	2110      	movs	r1, #16
 80a173a:	68f8      	ldr	r0, [r7, #12]
 80a173c:	f7ff ff43 	bl	80a15c6 <ak09918_read_reg>
 80a1740:	6238      	str	r0, [r7, #32]

  if (fret != AKM_SUCCESS) {
 80a1742:	6a3b      	ldr	r3, [r7, #32]
 80a1744:	2b00      	cmp	r3, #0
 80a1746:	d004      	beq.n	80a1752 <ak099xx_get_data+0x3a>
    printf("AK099XX_REG_ST1 read error!\r\n");
 80a1748:	4821      	ldr	r0, [pc, #132]	; (80a17d0 <ak099xx_get_data+0xb8>)
 80a174a:	f01f f9af 	bl	80c0aac <puts>
    return fret;
 80a174e:	6a3b      	ldr	r3, [r7, #32]
 80a1750:	e03a      	b.n	80a17c8 <ak099xx_get_data+0xb0>
  }

  for (i = 0; i < 3; i++) {
 80a1752:	2300      	movs	r3, #0
 80a1754:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80a1758:	e026      	b.n	80a17a8 <ak099xx_get_data+0x90>
    /* convert to int16 data */
    tmp = MAKE_S16(i2cData[i * 2 + 2], i2cData[i * 2 + 1]);
 80a175a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80a175e:	3301      	adds	r3, #1
 80a1760:	005b      	lsls	r3, r3, #1
 80a1762:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80a1766:	4413      	add	r3, r2
 80a1768:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80a176c:	021b      	lsls	r3, r3, #8
 80a176e:	b21a      	sxth	r2, r3
 80a1770:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80a1774:	005b      	lsls	r3, r3, #1
 80a1776:	3301      	adds	r3, #1
 80a1778:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80a177c:	440b      	add	r3, r1
 80a177e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80a1782:	b21b      	sxth	r3, r3
 80a1784:	4313      	orrs	r3, r2
 80a1786:	83fb      	strh	r3, [r7, #30]
    /* multiply ASA and convert to micro tesla in Q16 */
    data->u.v[i] = tmp * SENS_0150_Q16;
 80a1788:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80a178c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80a1790:	f242 6166 	movw	r1, #9830	; 0x2666
 80a1794:	fb01 f103 	mul.w	r1, r1, r3
 80a1798:	68bb      	ldr	r3, [r7, #8]
 80a179a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < 3; i++) {
 80a179e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80a17a2:	3301      	adds	r3, #1
 80a17a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80a17a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80a17ac:	2b02      	cmp	r3, #2
 80a17ae:	d9d4      	bls.n	80a175a <ak099xx_get_data+0x42>
  }

  //printf("mag data: { 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x } \r\n", i2cData[1], i2cData[2], i2cData[3], i2cData[4], i2cData[5], i2cData[6]);
  //data->timestamp = 

  data->status[0] = i2cData[0];
 80a17b0:	7d3b      	ldrb	r3, [r7, #20]
 80a17b2:	b21a      	sxth	r2, r3
 80a17b4:	68bb      	ldr	r3, [r7, #8]
 80a17b6:	841a      	strh	r2, [r3, #32]
  data->status[1] = i2cData[AK099XX_BDATA_SIZE - 1];
 80a17b8:	7f3b      	ldrb	r3, [r7, #28]
 80a17ba:	b21a      	sxth	r2, r3
 80a17bc:	68bb      	ldr	r3, [r7, #8]
 80a17be:	845a      	strh	r2, [r3, #34]	; 0x22
  *num = 1;
 80a17c0:	687b      	ldr	r3, [r7, #4]
 80a17c2:	2201      	movs	r2, #1
 80a17c4:	701a      	strb	r2, [r3, #0]
  return AKM_SUCCESS;
 80a17c6:	2300      	movs	r3, #0
}
 80a17c8:	4618      	mov	r0, r3
 80a17ca:	3728      	adds	r7, #40	; 0x28
 80a17cc:	46bd      	mov	sp, r7
 80a17ce:	bd80      	pop	{r7, pc}
 80a17d0:	080c4c0c 	.word	0x080c4c0c

080a17d4 <aks_fst_test_data>:
#define TLIMIT_LO_SLF_ST2    0
#define TLIMIT_HI_SLF_ST2    0

int16_t aks_fst_test_data(uint16_t testno, int16_t testdata, int16_t lolimit,
                          int16_t hilimit)
{
 80a17d4:	b590      	push	{r4, r7, lr}
 80a17d6:	b083      	sub	sp, #12
 80a17d8:	af00      	add	r7, sp, #0
 80a17da:	4604      	mov	r4, r0
 80a17dc:	4608      	mov	r0, r1
 80a17de:	4611      	mov	r1, r2
 80a17e0:	461a      	mov	r2, r3
 80a17e2:	4623      	mov	r3, r4
 80a17e4:	80fb      	strh	r3, [r7, #6]
 80a17e6:	4603      	mov	r3, r0
 80a17e8:	80bb      	strh	r3, [r7, #4]
 80a17ea:	460b      	mov	r3, r1
 80a17ec:	807b      	strh	r3, [r7, #2]
 80a17ee:	4613      	mov	r3, r2
 80a17f0:	803b      	strh	r3, [r7, #0]
  if ((lolimit <= testdata) && (testdata <= hilimit)) {
 80a17f2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80a17f6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80a17fa:	429a      	cmp	r2, r3
 80a17fc:	dc07      	bgt.n	80a180e <aks_fst_test_data+0x3a>
 80a17fe:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80a1802:	f9b7 3000 	ldrsh.w	r3, [r7]
 80a1806:	429a      	cmp	r2, r3
 80a1808:	dc01      	bgt.n	80a180e <aks_fst_test_data+0x3a>
    return AKM_SUCCESS;
 80a180a:	2300      	movs	r3, #0
 80a180c:	e008      	b.n	80a1820 <aks_fst_test_data+0x4c>
  } else {
    printf("aks_fst_test_data failed %u %d! \r\n", testno, testdata);
 80a180e:	88fb      	ldrh	r3, [r7, #6]
 80a1810:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80a1814:	4619      	mov	r1, r3
 80a1816:	4804      	ldr	r0, [pc, #16]	; (80a1828 <aks_fst_test_data+0x54>)
 80a1818:	f01f f8ac 	bl	80c0974 <iprintf>
    return AKM_ERROR;
 80a181c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 80a1820:	4618      	mov	r0, r3
 80a1822:	370c      	adds	r7, #12
 80a1824:	46bd      	mov	sp, r7
 80a1826:	bd90      	pop	{r4, r7, pc}
 80a1828:	080c4c2c 	.word	0x080c4c2c

080a182c <platform_delay>:
 *
 * @param  ms        delay in ms
 *
 */
static void platform_delay(uint32_t ms)
{
 80a182c:	b580      	push	{r7, lr}
 80a182e:	b082      	sub	sp, #8
 80a1830:	af00      	add	r7, sp, #0
 80a1832:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 80a1834:	6878      	ldr	r0, [r7, #4]
 80a1836:	f00d ff09 	bl	80af64c <HAL_Delay>
}
 80a183a:	bf00      	nop
 80a183c:	3708      	adds	r7, #8
 80a183e:	46bd      	mov	sp, r7
 80a1840:	bd80      	pop	{r7, pc}
	...

080a1844 <ak09918_self_test>:
/*
 * \result upper_16bit test number
 * \result lower_16bit test result data.
 */
int16_t ak09918_self_test(stmdev_ctx_t * ctx)
{
 80a1844:	b580      	push	{r7, lr}
 80a1846:	b088      	sub	sp, #32
 80a1848:	af00      	add	r7, sp, #0
 80a184a:	6078      	str	r0, [r7, #4]
        /**********************************************************************
	 * Step 1
	 **********************************************************************/

  /* Soft Reset */
  fret = ak099xx_soft_reset(ctx);
 80a184c:	6878      	ldr	r0, [r7, #4]
 80a184e:	f7ff ff2e 	bl	80a16ae <ak099xx_soft_reset>
 80a1852:	4603      	mov	r3, r0
 80a1854:	83fb      	strh	r3, [r7, #30]

  if (AKM_SUCCESS != fret) {
 80a1856:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80a185a:	2b00      	cmp	r3, #0
 80a185c:	d006      	beq.n	80a186c <ak09918_self_test+0x28>
    printf("ak099xx_soft_reset failed result = %d\r\n", fret);  //(TLIMIT_NO_RST)
 80a185e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80a1862:	4619      	mov	r1, r3
 80a1864:	48a8      	ldr	r0, [pc, #672]	; (80a1b08 <ak09918_self_test+0x2c4>)
 80a1866:	f01f f885 	bl	80c0974 <iprintf>
    goto SELFTEST_FAIL;
 80a186a:	e143      	b.n	80a1af4 <ak09918_self_test+0x2b0>
  }

  /* Wait over 1000 us */
  platform_delay(1);
 80a186c:	2001      	movs	r0, #1
 80a186e:	f7ff ffdd 	bl	80a182c <platform_delay>

  /* Read values. */
  fret = ak09918_read_reg(ctx, AK099XX_REG_WIA1, i2cData, 2);
 80a1872:	f107 020c 	add.w	r2, r7, #12
 80a1876:	2302      	movs	r3, #2
 80a1878:	2100      	movs	r1, #0
 80a187a:	6878      	ldr	r0, [r7, #4]
 80a187c:	f7ff fea3 	bl	80a15c6 <ak09918_read_reg>
 80a1880:	4603      	mov	r3, r0
 80a1882:	83fb      	strh	r3, [r7, #30]

  if (AKM_SUCCESS != fret) {
 80a1884:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80a1888:	2b00      	cmp	r3, #0
 80a188a:	d006      	beq.n	80a189a <ak09918_self_test+0x56>
    printf("ak09918_read_reg AK099XX_REG_WIA1 failed result = %d\r\n", fret);   //TLIMIT_NO_RST_READ
 80a188c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80a1890:	4619      	mov	r1, r3
 80a1892:	489e      	ldr	r0, [pc, #632]	; (80a1b0c <ak09918_self_test+0x2c8>)
 80a1894:	f01f f86e 	bl	80c0974 <iprintf>
    goto SELFTEST_FAIL;
 80a1898:	e12c      	b.n	80a1af4 <ak09918_self_test+0x2b0>
  }

  AKM_CHECK_IN_THRESHOLD(TLIMIT_NO_RST_WIA1, i2cData[0], TLIMIT_LO_RST_WIA1,
 80a189a:	7b3b      	ldrb	r3, [r7, #12]
 80a189c:	b219      	sxth	r1, r3
 80a189e:	2348      	movs	r3, #72	; 0x48
 80a18a0:	2248      	movs	r2, #72	; 0x48
 80a18a2:	f240 1003 	movw	r0, #259	; 0x103
 80a18a6:	f7ff ff95 	bl	80a17d4 <aks_fst_test_data>
 80a18aa:	4603      	mov	r3, r0
 80a18ac:	2b00      	cmp	r3, #0
 80a18ae:	f040 810a 	bne.w	80a1ac6 <ak09918_self_test+0x282>
                         TLIMIT_HI_RST_WIA1);
  AKM_CHECK_IN_THRESHOLD(TLIMIT_NO_RST_WIA2, i2cData[1], TLIMIT_LO_RST_WIA2,
 80a18b2:	7b7b      	ldrb	r3, [r7, #13]
 80a18b4:	b219      	sxth	r1, r3
 80a18b6:	230c      	movs	r3, #12
 80a18b8:	220c      	movs	r2, #12
 80a18ba:	f44f 7082 	mov.w	r0, #260	; 0x104
 80a18be:	f7ff ff89 	bl	80a17d4 <aks_fst_test_data>
 80a18c2:	4603      	mov	r3, r0
 80a18c4:	2b00      	cmp	r3, #0
 80a18c6:	f040 8100 	bne.w	80a1aca <ak09918_self_test+0x286>
        /**********************************************************************
	 * Step 2
	 **********************************************************************/

  /* Set to SNG measurement pattern. */
  fret = ak099xx_set_mode(ctx, AK099XX_MODE_SNG_MEASURE);
 80a18ca:	2101      	movs	r1, #1
 80a18cc:	6878      	ldr	r0, [r7, #4]
 80a18ce:	f7ff feab 	bl	80a1628 <ak099xx_set_mode>
 80a18d2:	4603      	mov	r3, r0
 80a18d4:	83fb      	strh	r3, [r7, #30]

  if (AKM_SUCCESS != fret) {
 80a18d6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80a18da:	2b00      	cmp	r3, #0
 80a18dc:	d006      	beq.n	80a18ec <ak09918_self_test+0xa8>
    printf("ak09918_set_mode AK099XX_MODE_SNG_MEASURE failed result = %d\r\n", fret);   //TLIMIT_NO_SNG_CNTL2
 80a18de:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80a18e2:	4619      	mov	r1, r3
 80a18e4:	488a      	ldr	r0, [pc, #552]	; (80a1b10 <ak09918_self_test+0x2cc>)
 80a18e6:	f01f f845 	bl	80c0974 <iprintf>
    goto SELFTEST_FAIL;
 80a18ea:	e103      	b.n	80a1af4 <ak09918_self_test+0x2b0>
  }

  /* Wait for single measurement. */
  platform_delay(10);
 80a18ec:	200a      	movs	r0, #10
 80a18ee:	f7ff ff9d 	bl	80a182c <platform_delay>

  /*
   * Get measurement data from AK09918
   * ST1 + (HXL/H) + (HYL/H) + (HZL/H) + TMPS + ST2 = 9bytes */
  fret = ak09918_read_reg(ctx, AK099XX_REG_ST1, i2cData, AK099XX_BDATA_SIZE);
 80a18f2:	f107 020c 	add.w	r2, r7, #12
 80a18f6:	2309      	movs	r3, #9
 80a18f8:	2110      	movs	r1, #16
 80a18fa:	6878      	ldr	r0, [r7, #4]
 80a18fc:	f7ff fe63 	bl	80a15c6 <ak09918_read_reg>
 80a1900:	4603      	mov	r3, r0
 80a1902:	83fb      	strh	r3, [r7, #30]

  if (AKM_SUCCESS != fret) {
 80a1904:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80a1908:	2b00      	cmp	r3, #0
 80a190a:	d006      	beq.n	80a191a <ak09918_self_test+0xd6>
    printf("ak09918_read_reg AK099XX_REG_ST1 failed result = %d\r\n", fret);    //TLIMIT_NO_SNG_WAIT
 80a190c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80a1910:	4619      	mov	r1, r3
 80a1912:	4880      	ldr	r0, [pc, #512]	; (80a1b14 <ak09918_self_test+0x2d0>)
 80a1914:	f01f f82e 	bl	80c0974 <iprintf>
    goto SELFTEST_FAIL;
 80a1918:	e0ec      	b.n	80a1af4 <ak09918_self_test+0x2b0>
  }

  /* Convert to 16-bit integer value. */
  xval_i16 = (int16_t) (((uint16_t) i2cData[1]) | ((uint16_t) i2cData[2] << 8));
 80a191a:	7b7b      	ldrb	r3, [r7, #13]
 80a191c:	b21a      	sxth	r2, r3
 80a191e:	7bbb      	ldrb	r3, [r7, #14]
 80a1920:	021b      	lsls	r3, r3, #8
 80a1922:	b21b      	sxth	r3, r3
 80a1924:	4313      	orrs	r3, r2
 80a1926:	83bb      	strh	r3, [r7, #28]
  yval_i16 = (int16_t) (((uint16_t) i2cData[3]) | ((uint16_t) i2cData[4] << 8));
 80a1928:	7bfb      	ldrb	r3, [r7, #15]
 80a192a:	b21a      	sxth	r2, r3
 80a192c:	7c3b      	ldrb	r3, [r7, #16]
 80a192e:	021b      	lsls	r3, r3, #8
 80a1930:	b21b      	sxth	r3, r3
 80a1932:	4313      	orrs	r3, r2
 80a1934:	837b      	strh	r3, [r7, #26]
  zval_i16 = (int16_t) (((uint16_t) i2cData[5]) | ((uint16_t) i2cData[6] << 8));
 80a1936:	7c7b      	ldrb	r3, [r7, #17]
 80a1938:	b21a      	sxth	r2, r3
 80a193a:	7cbb      	ldrb	r3, [r7, #18]
 80a193c:	021b      	lsls	r3, r3, #8
 80a193e:	b21b      	sxth	r3, r3
 80a1940:	4313      	orrs	r3, r2
 80a1942:	833b      	strh	r3, [r7, #24]

  AKM_CHECK_IN_THRESHOLD(TLIMIT_NO_SNG_ST1, i2cData[0], TLIMIT_LO_SNG_ST1,
 80a1944:	7b3b      	ldrb	r3, [r7, #12]
 80a1946:	b219      	sxth	r1, r3
 80a1948:	2301      	movs	r3, #1
 80a194a:	2201      	movs	r2, #1
 80a194c:	f240 2003 	movw	r0, #515	; 0x203
 80a1950:	f7ff ff40 	bl	80a17d4 <aks_fst_test_data>
 80a1954:	4603      	mov	r3, r0
 80a1956:	2b00      	cmp	r3, #0
 80a1958:	f040 80b9 	bne.w	80a1ace <ak09918_self_test+0x28a>
                         TLIMIT_HI_SNG_ST1);
  AKM_CHECK_IN_THRESHOLD(TLIMIT_NO_SNG_HX, xval_i16, TLIMIT_LO_SNG_HX,
 80a195c:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 80a1960:	f647 73ef 	movw	r3, #32751	; 0x7fef
 80a1964:	4a6c      	ldr	r2, [pc, #432]	; (80a1b18 <ak09918_self_test+0x2d4>)
 80a1966:	f44f 7001 	mov.w	r0, #516	; 0x204
 80a196a:	f7ff ff33 	bl	80a17d4 <aks_fst_test_data>
 80a196e:	4603      	mov	r3, r0
 80a1970:	2b00      	cmp	r3, #0
 80a1972:	f040 80ae 	bne.w	80a1ad2 <ak09918_self_test+0x28e>
                         TLIMIT_HI_SNG_HX);
  AKM_CHECK_IN_THRESHOLD(TLIMIT_NO_SNG_HY, yval_i16, TLIMIT_LO_SNG_HY,
 80a1976:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 80a197a:	f647 73ef 	movw	r3, #32751	; 0x7fef
 80a197e:	4a66      	ldr	r2, [pc, #408]	; (80a1b18 <ak09918_self_test+0x2d4>)
 80a1980:	f240 2006 	movw	r0, #518	; 0x206
 80a1984:	f7ff ff26 	bl	80a17d4 <aks_fst_test_data>
 80a1988:	4603      	mov	r3, r0
 80a198a:	2b00      	cmp	r3, #0
 80a198c:	f040 80a3 	bne.w	80a1ad6 <ak09918_self_test+0x292>
                         TLIMIT_HI_SNG_HY);
  AKM_CHECK_IN_THRESHOLD(TLIMIT_NO_SNG_HZ, zval_i16, TLIMIT_LO_SNG_HZ,
 80a1990:	f9b7 1018 	ldrsh.w	r1, [r7, #24]
 80a1994:	f647 73ef 	movw	r3, #32751	; 0x7fef
 80a1998:	4a5f      	ldr	r2, [pc, #380]	; (80a1b18 <ak09918_self_test+0x2d4>)
 80a199a:	f44f 7002 	mov.w	r0, #520	; 0x208
 80a199e:	f7ff ff19 	bl	80a17d4 <aks_fst_test_data>
 80a19a2:	4603      	mov	r3, r0
 80a19a4:	2b00      	cmp	r3, #0
 80a19a6:	f040 8098 	bne.w	80a1ada <ak09918_self_test+0x296>
                         TLIMIT_HI_SNG_HZ);
  AKM_CHECK_IN_THRESHOLD(TLIMIT_NO_SNG_ST2, (i2cData[8] & TLIMIT_ST2_MASK),
 80a19aa:	7d3b      	ldrb	r3, [r7, #20]
 80a19ac:	b21b      	sxth	r3, r3
 80a19ae:	f003 0308 	and.w	r3, r3, #8
 80a19b2:	b219      	sxth	r1, r3
 80a19b4:	2300      	movs	r3, #0
 80a19b6:	2200      	movs	r2, #0
 80a19b8:	f240 200a 	movw	r0, #522	; 0x20a
 80a19bc:	f7ff ff0a 	bl	80a17d4 <aks_fst_test_data>
 80a19c0:	4603      	mov	r3, r0
 80a19c2:	2b00      	cmp	r3, #0
 80a19c4:	f040 808b 	bne.w	80a1ade <ak09918_self_test+0x29a>
                         TLIMIT_LO_SNG_ST2, TLIMIT_HI_SNG_ST2);

  /* Set to self-test mode. */
  fret = ak099xx_set_mode(ctx, AK099XX_MODE_SELF_TEST);
 80a19c8:	2110      	movs	r1, #16
 80a19ca:	6878      	ldr	r0, [r7, #4]
 80a19cc:	f7ff fe2c 	bl	80a1628 <ak099xx_set_mode>
 80a19d0:	4603      	mov	r3, r0
 80a19d2:	83fb      	strh	r3, [r7, #30]

  if (AKM_SUCCESS != fret) {
 80a19d4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80a19d8:	2b00      	cmp	r3, #0
 80a19da:	d006      	beq.n	80a19ea <ak09918_self_test+0x1a6>
    printf("ak09918_set_mode AK099XX_MODE_SELF_TEST failed result = %d\r\n", fret);     //TLIMIT_NO_SNG_CNTL2
 80a19dc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80a19e0:	4619      	mov	r1, r3
 80a19e2:	484e      	ldr	r0, [pc, #312]	; (80a1b1c <ak09918_self_test+0x2d8>)
 80a19e4:	f01e ffc6 	bl	80c0974 <iprintf>
    goto SELFTEST_FAIL;
 80a19e8:	e084      	b.n	80a1af4 <ak09918_self_test+0x2b0>
  }

  /* Wait for self-test measurement. */
  /* Maximum time for measurement is 8.2 ms */
  /* Refer to datasheet p.6 */
  platform_delay(9);
 80a19ea:	2009      	movs	r0, #9
 80a19ec:	f7ff ff1e 	bl	80a182c <platform_delay>

  /*
   * Get measurement data from AK09918
   * ST1 + (HXL + HXH) + (HYL + HYH) + (HZL + HZH) + TMPS + ST2 = 9bytes */
  fret = ak09918_read_reg(ctx, AK099XX_REG_ST1, i2cData, AK099XX_BDATA_SIZE);
 80a19f0:	f107 020c 	add.w	r2, r7, #12
 80a19f4:	2309      	movs	r3, #9
 80a19f6:	2110      	movs	r1, #16
 80a19f8:	6878      	ldr	r0, [r7, #4]
 80a19fa:	f7ff fde4 	bl	80a15c6 <ak09918_read_reg>
 80a19fe:	4603      	mov	r3, r0
 80a1a00:	83fb      	strh	r3, [r7, #30]

  if (AKM_SUCCESS != fret) {
 80a1a02:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80a1a06:	2b00      	cmp	r3, #0
 80a1a08:	d006      	beq.n	80a1a18 <ak09918_self_test+0x1d4>
    printf("ak09918_read_reg AK099XX_REG_ST1 failed result = %d\r\n", fret);    //TLIMIT_NO_SLF_WAIT
 80a1a0a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80a1a0e:	4619      	mov	r1, r3
 80a1a10:	4840      	ldr	r0, [pc, #256]	; (80a1b14 <ak09918_self_test+0x2d0>)
 80a1a12:	f01e ffaf 	bl	80c0974 <iprintf>
    goto SELFTEST_FAIL;
 80a1a16:	e06d      	b.n	80a1af4 <ak09918_self_test+0x2b0>
  }

  /* Convert to 16-bit integer value. */
  xval_i16 = (int16_t) (((uint16_t) i2cData[1]) | ((uint16_t) i2cData[2] << 8));
 80a1a18:	7b7b      	ldrb	r3, [r7, #13]
 80a1a1a:	b21a      	sxth	r2, r3
 80a1a1c:	7bbb      	ldrb	r3, [r7, #14]
 80a1a1e:	021b      	lsls	r3, r3, #8
 80a1a20:	b21b      	sxth	r3, r3
 80a1a22:	4313      	orrs	r3, r2
 80a1a24:	83bb      	strh	r3, [r7, #28]
  yval_i16 = (int16_t) (((uint16_t) i2cData[3]) | ((uint16_t) i2cData[4] << 8));
 80a1a26:	7bfb      	ldrb	r3, [r7, #15]
 80a1a28:	b21a      	sxth	r2, r3
 80a1a2a:	7c3b      	ldrb	r3, [r7, #16]
 80a1a2c:	021b      	lsls	r3, r3, #8
 80a1a2e:	b21b      	sxth	r3, r3
 80a1a30:	4313      	orrs	r3, r2
 80a1a32:	837b      	strh	r3, [r7, #26]
  zval_i16 = (int16_t) (((uint16_t) i2cData[5]) | ((uint16_t) i2cData[6] << 8));
 80a1a34:	7c7b      	ldrb	r3, [r7, #17]
 80a1a36:	b21a      	sxth	r2, r3
 80a1a38:	7cbb      	ldrb	r3, [r7, #18]
 80a1a3a:	021b      	lsls	r3, r3, #8
 80a1a3c:	b21b      	sxth	r3, r3
 80a1a3e:	4313      	orrs	r3, r2
 80a1a40:	833b      	strh	r3, [r7, #24]

  AKM_CHECK_IN_THRESHOLD(TLIMIT_NO_SLF_ST1, i2cData[0], TLIMIT_LO_SLF_ST1,
 80a1a42:	7b3b      	ldrb	r3, [r7, #12]
 80a1a44:	b219      	sxth	r1, r3
 80a1a46:	2301      	movs	r3, #1
 80a1a48:	2201      	movs	r2, #1
 80a1a4a:	f240 200d 	movw	r0, #525	; 0x20d
 80a1a4e:	f7ff fec1 	bl	80a17d4 <aks_fst_test_data>
 80a1a52:	4603      	mov	r3, r0
 80a1a54:	2b00      	cmp	r3, #0
 80a1a56:	d144      	bne.n	80a1ae2 <ak09918_self_test+0x29e>
                         TLIMIT_HI_SLF_ST1);
  AKM_CHECK_IN_THRESHOLD(TLIMIT_NO_SLF_RVHX, xval_i16, TLIMIT_LO_SLF_RVHX,
 80a1a58:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 80a1a5c:	23c8      	movs	r3, #200	; 0xc8
 80a1a5e:	f06f 02c7 	mvn.w	r2, #199	; 0xc7
 80a1a62:	f240 200e 	movw	r0, #526	; 0x20e
 80a1a66:	f7ff feb5 	bl	80a17d4 <aks_fst_test_data>
 80a1a6a:	4603      	mov	r3, r0
 80a1a6c:	2b00      	cmp	r3, #0
 80a1a6e:	d13a      	bne.n	80a1ae6 <ak09918_self_test+0x2a2>
                         TLIMIT_HI_SLF_RVHX);
  AKM_CHECK_IN_THRESHOLD(TLIMIT_NO_SLF_RVHY, yval_i16, TLIMIT_LO_SLF_RVHY,
 80a1a70:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 80a1a74:	23c8      	movs	r3, #200	; 0xc8
 80a1a76:	f06f 02c7 	mvn.w	r2, #199	; 0xc7
 80a1a7a:	f44f 7004 	mov.w	r0, #528	; 0x210
 80a1a7e:	f7ff fea9 	bl	80a17d4 <aks_fst_test_data>
 80a1a82:	4603      	mov	r3, r0
 80a1a84:	2b00      	cmp	r3, #0
 80a1a86:	d130      	bne.n	80a1aea <ak09918_self_test+0x2a6>
                         TLIMIT_HI_SLF_RVHY);
  AKM_CHECK_IN_THRESHOLD(TLIMIT_NO_SLF_RVHZ, zval_i16, TLIMIT_LO_SLF_RVHZ,
 80a1a88:	f9b7 1018 	ldrsh.w	r1, [r7, #24]
 80a1a8c:	f06f 03c7 	mvn.w	r3, #199	; 0xc7
 80a1a90:	4a23      	ldr	r2, [pc, #140]	; (80a1b20 <ak09918_self_test+0x2dc>)
 80a1a92:	f240 2012 	movw	r0, #530	; 0x212
 80a1a96:	f7ff fe9d 	bl	80a17d4 <aks_fst_test_data>
 80a1a9a:	4603      	mov	r3, r0
 80a1a9c:	2b00      	cmp	r3, #0
 80a1a9e:	d126      	bne.n	80a1aee <ak09918_self_test+0x2aa>
                         TLIMIT_HI_SLF_RVHZ);
  AKM_CHECK_IN_THRESHOLD(TLIMIT_NO_SLF_ST2, (i2cData[8] & TLIMIT_ST2_MASK),
 80a1aa0:	7d3b      	ldrb	r3, [r7, #20]
 80a1aa2:	b21b      	sxth	r3, r3
 80a1aa4:	f003 0308 	and.w	r3, r3, #8
 80a1aa8:	b219      	sxth	r1, r3
 80a1aaa:	2300      	movs	r3, #0
 80a1aac:	2200      	movs	r2, #0
 80a1aae:	f44f 7005 	mov.w	r0, #532	; 0x214
 80a1ab2:	f7ff fe8f 	bl	80a17d4 <aks_fst_test_data>
 80a1ab6:	4603      	mov	r3, r0
 80a1ab8:	2b00      	cmp	r3, #0
 80a1aba:	d11a      	bne.n	80a1af2 <ak09918_self_test+0x2ae>
                         TLIMIT_LO_SLF_ST2, TLIMIT_HI_SLF_ST2);

  printf("ak09918_self_test success\r\n");
 80a1abc:	4819      	ldr	r0, [pc, #100]	; (80a1b24 <ak09918_self_test+0x2e0>)
 80a1abe:	f01e fff5 	bl	80c0aac <puts>
  return AKM_SUCCESS;
 80a1ac2:	2300      	movs	r3, #0
 80a1ac4:	e01b      	b.n	80a1afe <ak09918_self_test+0x2ba>
  AKM_CHECK_IN_THRESHOLD(TLIMIT_NO_RST_WIA1, i2cData[0], TLIMIT_LO_RST_WIA1,
 80a1ac6:	bf00      	nop
 80a1ac8:	e014      	b.n	80a1af4 <ak09918_self_test+0x2b0>
  AKM_CHECK_IN_THRESHOLD(TLIMIT_NO_RST_WIA2, i2cData[1], TLIMIT_LO_RST_WIA2,
 80a1aca:	bf00      	nop
 80a1acc:	e012      	b.n	80a1af4 <ak09918_self_test+0x2b0>
  AKM_CHECK_IN_THRESHOLD(TLIMIT_NO_SNG_ST1, i2cData[0], TLIMIT_LO_SNG_ST1,
 80a1ace:	bf00      	nop
 80a1ad0:	e010      	b.n	80a1af4 <ak09918_self_test+0x2b0>
  AKM_CHECK_IN_THRESHOLD(TLIMIT_NO_SNG_HX, xval_i16, TLIMIT_LO_SNG_HX,
 80a1ad2:	bf00      	nop
 80a1ad4:	e00e      	b.n	80a1af4 <ak09918_self_test+0x2b0>
  AKM_CHECK_IN_THRESHOLD(TLIMIT_NO_SNG_HY, yval_i16, TLIMIT_LO_SNG_HY,
 80a1ad6:	bf00      	nop
 80a1ad8:	e00c      	b.n	80a1af4 <ak09918_self_test+0x2b0>
  AKM_CHECK_IN_THRESHOLD(TLIMIT_NO_SNG_HZ, zval_i16, TLIMIT_LO_SNG_HZ,
 80a1ada:	bf00      	nop
 80a1adc:	e00a      	b.n	80a1af4 <ak09918_self_test+0x2b0>
  AKM_CHECK_IN_THRESHOLD(TLIMIT_NO_SNG_ST2, (i2cData[8] & TLIMIT_ST2_MASK),
 80a1ade:	bf00      	nop
 80a1ae0:	e008      	b.n	80a1af4 <ak09918_self_test+0x2b0>
  AKM_CHECK_IN_THRESHOLD(TLIMIT_NO_SLF_ST1, i2cData[0], TLIMIT_LO_SLF_ST1,
 80a1ae2:	bf00      	nop
 80a1ae4:	e006      	b.n	80a1af4 <ak09918_self_test+0x2b0>
  AKM_CHECK_IN_THRESHOLD(TLIMIT_NO_SLF_RVHX, xval_i16, TLIMIT_LO_SLF_RVHX,
 80a1ae6:	bf00      	nop
 80a1ae8:	e004      	b.n	80a1af4 <ak09918_self_test+0x2b0>
  AKM_CHECK_IN_THRESHOLD(TLIMIT_NO_SLF_RVHY, yval_i16, TLIMIT_LO_SLF_RVHY,
 80a1aea:	bf00      	nop
 80a1aec:	e002      	b.n	80a1af4 <ak09918_self_test+0x2b0>
  AKM_CHECK_IN_THRESHOLD(TLIMIT_NO_SLF_RVHZ, zval_i16, TLIMIT_LO_SLF_RVHZ,
 80a1aee:	bf00      	nop
 80a1af0:	e000      	b.n	80a1af4 <ak09918_self_test+0x2b0>
  AKM_CHECK_IN_THRESHOLD(TLIMIT_NO_SLF_ST2, (i2cData[8] & TLIMIT_ST2_MASK),
 80a1af2:	bf00      	nop

SELFTEST_FAIL:
  printf("ak09918_self_test failed\r\n");
 80a1af4:	480c      	ldr	r0, [pc, #48]	; (80a1b28 <ak09918_self_test+0x2e4>)
 80a1af6:	f01e ffd9 	bl	80c0aac <puts>
  return AKM_ERROR;
 80a1afa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80a1afe:	4618      	mov	r0, r3
 80a1b00:	3720      	adds	r7, #32
 80a1b02:	46bd      	mov	sp, r7
 80a1b04:	bd80      	pop	{r7, pc}
 80a1b06:	bf00      	nop
 80a1b08:	080c4c50 	.word	0x080c4c50
 80a1b0c:	080c4c78 	.word	0x080c4c78
 80a1b10:	080c4cb0 	.word	0x080c4cb0
 80a1b14:	080c4cf0 	.word	0x080c4cf0
 80a1b18:	ffff8011 	.word	0xffff8011
 80a1b1c:	080c4d28 	.word	0x080c4d28
 80a1b20:	fffffc18 	.word	0xfffffc18
 80a1b24:	080c4d68 	.word	0x080c4d68
 80a1b28:	080c4d84 	.word	0x080c4d84

080a1b2c <swapint>:

/* Extern variables ----------------------------------------------------------*/

/* Swap the contents of 'a' and 'b' */
void swapint(int *a, int *b)
{
 80a1b2c:	b480      	push	{r7}
 80a1b2e:	b085      	sub	sp, #20
 80a1b30:	af00      	add	r7, sp, #0
 80a1b32:	6078      	str	r0, [r7, #4]
 80a1b34:	6039      	str	r1, [r7, #0]
  int temp = *a;
 80a1b36:	687b      	ldr	r3, [r7, #4]
 80a1b38:	681b      	ldr	r3, [r3, #0]
 80a1b3a:	60fb      	str	r3, [r7, #12]
  *a = *b;
 80a1b3c:	683b      	ldr	r3, [r7, #0]
 80a1b3e:	681a      	ldr	r2, [r3, #0]
 80a1b40:	687b      	ldr	r3, [r7, #4]
 80a1b42:	601a      	str	r2, [r3, #0]
  *b = temp;
 80a1b44:	683b      	ldr	r3, [r7, #0]
 80a1b46:	68fa      	ldr	r2, [r7, #12]
 80a1b48:	601a      	str	r2, [r3, #0]
}
 80a1b4a:	bf00      	nop
 80a1b4c:	3714      	adds	r7, #20
 80a1b4e:	46bd      	mov	sp, r7
 80a1b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a1b54:	4770      	bx	lr

080a1b56 <swapfloat>:

/* Swap the contents of 'a' and 'b' */
void swapfloat(float *a, float *b)
{
 80a1b56:	b480      	push	{r7}
 80a1b58:	b085      	sub	sp, #20
 80a1b5a:	af00      	add	r7, sp, #0
 80a1b5c:	6078      	str	r0, [r7, #4]
 80a1b5e:	6039      	str	r1, [r7, #0]
  float temp = *a;
 80a1b60:	687b      	ldr	r3, [r7, #4]
 80a1b62:	681b      	ldr	r3, [r3, #0]
 80a1b64:	60fb      	str	r3, [r7, #12]
  *a = *b;
 80a1b66:	683b      	ldr	r3, [r7, #0]
 80a1b68:	681a      	ldr	r2, [r3, #0]
 80a1b6a:	687b      	ldr	r3, [r7, #4]
 80a1b6c:	601a      	str	r2, [r3, #0]
  *b = temp;
 80a1b6e:	683b      	ldr	r3, [r7, #0]
 80a1b70:	68fa      	ldr	r2, [r7, #12]
 80a1b72:	601a      	str	r2, [r3, #0]
}
 80a1b74:	bf00      	nop
 80a1b76:	3714      	adds	r7, #20
 80a1b78:	46bd      	mov	sp, r7
 80a1b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a1b7e:	4770      	bx	lr

080a1b80 <get_insertion_index>:
  }
}

/* Figures out where to insert a new value for our streaming median */
int get_insertion_index(int *ages, int len)
{
 80a1b80:	b480      	push	{r7}
 80a1b82:	b085      	sub	sp, #20
 80a1b84:	af00      	add	r7, sp, #0
 80a1b86:	6078      	str	r0, [r7, #4]
 80a1b88:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < len; i++) {
 80a1b8a:	2300      	movs	r3, #0
 80a1b8c:	60fb      	str	r3, [r7, #12]
 80a1b8e:	e014      	b.n	80a1bba <get_insertion_index+0x3a>
    // Replace an invalid value index or the oldest value index
    if ((0 == ages[i]) || (len + 1 == ages[i])) {
 80a1b90:	68fb      	ldr	r3, [r7, #12]
 80a1b92:	009b      	lsls	r3, r3, #2
 80a1b94:	687a      	ldr	r2, [r7, #4]
 80a1b96:	4413      	add	r3, r2
 80a1b98:	681b      	ldr	r3, [r3, #0]
 80a1b9a:	2b00      	cmp	r3, #0
 80a1b9c:	d008      	beq.n	80a1bb0 <get_insertion_index+0x30>
 80a1b9e:	683b      	ldr	r3, [r7, #0]
 80a1ba0:	1c5a      	adds	r2, r3, #1
 80a1ba2:	68fb      	ldr	r3, [r7, #12]
 80a1ba4:	009b      	lsls	r3, r3, #2
 80a1ba6:	6879      	ldr	r1, [r7, #4]
 80a1ba8:	440b      	add	r3, r1
 80a1baa:	681b      	ldr	r3, [r3, #0]
 80a1bac:	429a      	cmp	r2, r3
 80a1bae:	d101      	bne.n	80a1bb4 <get_insertion_index+0x34>
      return i;
 80a1bb0:	68fb      	ldr	r3, [r7, #12]
 80a1bb2:	e007      	b.n	80a1bc4 <get_insertion_index+0x44>
  for (int i = 0; i < len; i++) {
 80a1bb4:	68fb      	ldr	r3, [r7, #12]
 80a1bb6:	3301      	adds	r3, #1
 80a1bb8:	60fb      	str	r3, [r7, #12]
 80a1bba:	68fa      	ldr	r2, [r7, #12]
 80a1bbc:	683b      	ldr	r3, [r7, #0]
 80a1bbe:	429a      	cmp	r2, r3
 80a1bc0:	dbe6      	blt.n	80a1b90 <get_insertion_index+0x10>
    }
  }
  return 0;// We should never reach this return statement
 80a1bc2:	2300      	movs	r3, #0
}
 80a1bc4:	4618      	mov	r0, r3
 80a1bc6:	3714      	adds	r7, #20
 80a1bc8:	46bd      	mov	sp, r7
 80a1bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a1bce:	4770      	bx	lr

080a1bd0 <streaming_median>:
/*
Return a new median based on the new input value
Leverage the fact that we don't need to sort the entire history array each time
*/
float streaming_median(float new_val, float *values, int *ages, int len)
{
 80a1bd0:	b580      	push	{r7, lr}
 80a1bd2:	b088      	sub	sp, #32
 80a1bd4:	af00      	add	r7, sp, #0
 80a1bd6:	ed87 0a03 	vstr	s0, [r7, #12]
 80a1bda:	60b8      	str	r0, [r7, #8]
 80a1bdc:	6079      	str	r1, [r7, #4]
 80a1bde:	603a      	str	r2, [r7, #0]
  int i;
  int num_valid = len;  // Initially assume that all stored values are valid
 80a1be0:	683b      	ldr	r3, [r7, #0]
 80a1be2:	61bb      	str	r3, [r7, #24]
  int index;

  for (i = 0; i < len; i++) {
 80a1be4:	2300      	movs	r3, #0
 80a1be6:	61fb      	str	r3, [r7, #28]
 80a1be8:	e014      	b.n	80a1c14 <streaming_median+0x44>
    if (0 != ages[i])
 80a1bea:	69fb      	ldr	r3, [r7, #28]
 80a1bec:	009b      	lsls	r3, r3, #2
 80a1bee:	687a      	ldr	r2, [r7, #4]
 80a1bf0:	4413      	add	r3, r2
 80a1bf2:	681b      	ldr	r3, [r3, #0]
 80a1bf4:	2b00      	cmp	r3, #0
 80a1bf6:	d007      	beq.n	80a1c08 <streaming_median+0x38>
      ages[i]++;      // An age of '0' means there is not a valid value for that index
 80a1bf8:	69fb      	ldr	r3, [r7, #28]
 80a1bfa:	009b      	lsls	r3, r3, #2
 80a1bfc:	687a      	ldr	r2, [r7, #4]
 80a1bfe:	4413      	add	r3, r2
 80a1c00:	681a      	ldr	r2, [r3, #0]
 80a1c02:	3201      	adds	r2, #1
 80a1c04:	601a      	str	r2, [r3, #0]
 80a1c06:	e002      	b.n	80a1c0e <streaming_median+0x3e>
    else
      num_valid--;    // We have one fewer valid values than initially assumed
 80a1c08:	69bb      	ldr	r3, [r7, #24]
 80a1c0a:	3b01      	subs	r3, #1
 80a1c0c:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < len; i++) {
 80a1c0e:	69fb      	ldr	r3, [r7, #28]
 80a1c10:	3301      	adds	r3, #1
 80a1c12:	61fb      	str	r3, [r7, #28]
 80a1c14:	69fa      	ldr	r2, [r7, #28]
 80a1c16:	683b      	ldr	r3, [r7, #0]
 80a1c18:	429a      	cmp	r2, r3
 80a1c1a:	dbe6      	blt.n	80a1bea <streaming_median+0x1a>
  }                   // All of the values are now older by one sample

  index = get_insertion_index(ages, len);    // We want to replace the oldest value with our new value
 80a1c1c:	6839      	ldr	r1, [r7, #0]
 80a1c1e:	6878      	ldr	r0, [r7, #4]
 80a1c20:	f7ff ffae 	bl	80a1b80 <get_insertion_index>
 80a1c24:	6178      	str	r0, [r7, #20]
  ages[index] = 1;                           // Indicate that the value at index 'index' is new - '1' is the lowest valid age
 80a1c26:	697b      	ldr	r3, [r7, #20]
 80a1c28:	009b      	lsls	r3, r3, #2
 80a1c2a:	687a      	ldr	r2, [r7, #4]
 80a1c2c:	4413      	add	r3, r2
 80a1c2e:	2201      	movs	r2, #1
 80a1c30:	601a      	str	r2, [r3, #0]
  values[index] = new_val;                   // Store the new value in it's proper location
 80a1c32:	697b      	ldr	r3, [r7, #20]
 80a1c34:	009b      	lsls	r3, r3, #2
 80a1c36:	68ba      	ldr	r2, [r7, #8]
 80a1c38:	4413      	add	r3, r2
 80a1c3a:	68fa      	ldr	r2, [r7, #12]
 80a1c3c:	601a      	str	r2, [r3, #0]
  if (num_valid < len)
 80a1c3e:	69ba      	ldr	r2, [r7, #24]
 80a1c40:	683b      	ldr	r3, [r7, #0]
 80a1c42:	429a      	cmp	r2, r3
 80a1c44:	da22      	bge.n	80a1c8c <streaming_median+0xbc>
    num_valid++;                             // We just replaced an invalid value index
 80a1c46:	69bb      	ldr	r3, [r7, #24]
 80a1c48:	3301      	adds	r3, #1
 80a1c4a:	61bb      	str	r3, [r7, #24]

  while ((index > 0) && (values[index] > values[index - 1])) {
 80a1c4c:	e01e      	b.n	80a1c8c <streaming_median+0xbc>
    swapfloat(&values[index], &values[index - 1]);    // Swap the values
 80a1c4e:	697b      	ldr	r3, [r7, #20]
 80a1c50:	009b      	lsls	r3, r3, #2
 80a1c52:	68ba      	ldr	r2, [r7, #8]
 80a1c54:	18d0      	adds	r0, r2, r3
 80a1c56:	697b      	ldr	r3, [r7, #20]
 80a1c58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80a1c5c:	3b01      	subs	r3, #1
 80a1c5e:	009b      	lsls	r3, r3, #2
 80a1c60:	68ba      	ldr	r2, [r7, #8]
 80a1c62:	4413      	add	r3, r2
 80a1c64:	4619      	mov	r1, r3
 80a1c66:	f7ff ff76 	bl	80a1b56 <swapfloat>
    swapint(&ages[index], &ages[index - 1]);          // Swap the ages corresponding to each value
 80a1c6a:	697b      	ldr	r3, [r7, #20]
 80a1c6c:	009b      	lsls	r3, r3, #2
 80a1c6e:	687a      	ldr	r2, [r7, #4]
 80a1c70:	18d0      	adds	r0, r2, r3
 80a1c72:	697b      	ldr	r3, [r7, #20]
 80a1c74:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80a1c78:	3b01      	subs	r3, #1
 80a1c7a:	009b      	lsls	r3, r3, #2
 80a1c7c:	687a      	ldr	r2, [r7, #4]
 80a1c7e:	4413      	add	r3, r2
 80a1c80:	4619      	mov	r1, r3
 80a1c82:	f7ff ff53 	bl	80a1b2c <swapint>
    index--;                                          // Now check the next value down
 80a1c86:	697b      	ldr	r3, [r7, #20]
 80a1c88:	3b01      	subs	r3, #1
 80a1c8a:	617b      	str	r3, [r7, #20]
  while ((index > 0) && (values[index] > values[index - 1])) {
 80a1c8c:	697b      	ldr	r3, [r7, #20]
 80a1c8e:	2b00      	cmp	r3, #0
 80a1c90:	dd2f      	ble.n	80a1cf2 <streaming_median+0x122>
 80a1c92:	697b      	ldr	r3, [r7, #20]
 80a1c94:	009b      	lsls	r3, r3, #2
 80a1c96:	68ba      	ldr	r2, [r7, #8]
 80a1c98:	4413      	add	r3, r2
 80a1c9a:	ed93 7a00 	vldr	s14, [r3]
 80a1c9e:	697b      	ldr	r3, [r7, #20]
 80a1ca0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80a1ca4:	3b01      	subs	r3, #1
 80a1ca6:	009b      	lsls	r3, r3, #2
 80a1ca8:	68ba      	ldr	r2, [r7, #8]
 80a1caa:	4413      	add	r3, r2
 80a1cac:	edd3 7a00 	vldr	s15, [r3]
 80a1cb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80a1cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80a1cb8:	dcc9      	bgt.n	80a1c4e <streaming_median+0x7e>
  }

  while ((index < len - 1) && (values[index] < values[index + 1])) {
 80a1cba:	e01a      	b.n	80a1cf2 <streaming_median+0x122>
    swapfloat(&values[index], &values[index + 1]);    // Swap the values
 80a1cbc:	697b      	ldr	r3, [r7, #20]
 80a1cbe:	009b      	lsls	r3, r3, #2
 80a1cc0:	68ba      	ldr	r2, [r7, #8]
 80a1cc2:	18d0      	adds	r0, r2, r3
 80a1cc4:	697b      	ldr	r3, [r7, #20]
 80a1cc6:	3301      	adds	r3, #1
 80a1cc8:	009b      	lsls	r3, r3, #2
 80a1cca:	68ba      	ldr	r2, [r7, #8]
 80a1ccc:	4413      	add	r3, r2
 80a1cce:	4619      	mov	r1, r3
 80a1cd0:	f7ff ff41 	bl	80a1b56 <swapfloat>
    swapint(&ages[index], &ages[index + 1]);          // Swap the ages corresponding to each value
 80a1cd4:	697b      	ldr	r3, [r7, #20]
 80a1cd6:	009b      	lsls	r3, r3, #2
 80a1cd8:	687a      	ldr	r2, [r7, #4]
 80a1cda:	18d0      	adds	r0, r2, r3
 80a1cdc:	697b      	ldr	r3, [r7, #20]
 80a1cde:	3301      	adds	r3, #1
 80a1ce0:	009b      	lsls	r3, r3, #2
 80a1ce2:	687a      	ldr	r2, [r7, #4]
 80a1ce4:	4413      	add	r3, r2
 80a1ce6:	4619      	mov	r1, r3
 80a1ce8:	f7ff ff20 	bl	80a1b2c <swapint>
    index++;                                          // Now check the next value up
 80a1cec:	697b      	ldr	r3, [r7, #20]
 80a1cee:	3301      	adds	r3, #1
 80a1cf0:	617b      	str	r3, [r7, #20]
  while ((index < len - 1) && (values[index] < values[index + 1])) {
 80a1cf2:	683b      	ldr	r3, [r7, #0]
 80a1cf4:	3b01      	subs	r3, #1
 80a1cf6:	697a      	ldr	r2, [r7, #20]
 80a1cf8:	429a      	cmp	r2, r3
 80a1cfa:	da11      	bge.n	80a1d20 <streaming_median+0x150>
 80a1cfc:	697b      	ldr	r3, [r7, #20]
 80a1cfe:	009b      	lsls	r3, r3, #2
 80a1d00:	68ba      	ldr	r2, [r7, #8]
 80a1d02:	4413      	add	r3, r2
 80a1d04:	ed93 7a00 	vldr	s14, [r3]
 80a1d08:	697b      	ldr	r3, [r7, #20]
 80a1d0a:	3301      	adds	r3, #1
 80a1d0c:	009b      	lsls	r3, r3, #2
 80a1d0e:	68ba      	ldr	r2, [r7, #8]
 80a1d10:	4413      	add	r3, r2
 80a1d12:	edd3 7a00 	vldr	s15, [r3]
 80a1d16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80a1d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80a1d1e:	d4cd      	bmi.n	80a1cbc <streaming_median+0xec>
  }

  return (values[1]+values[2]+values[3]) / 3;
 80a1d20:	68bb      	ldr	r3, [r7, #8]
 80a1d22:	3304      	adds	r3, #4
 80a1d24:	ed93 7a00 	vldr	s14, [r3]
 80a1d28:	68bb      	ldr	r3, [r7, #8]
 80a1d2a:	3308      	adds	r3, #8
 80a1d2c:	edd3 7a00 	vldr	s15, [r3]
 80a1d30:	ee37 7a27 	vadd.f32	s14, s14, s15
 80a1d34:	68bb      	ldr	r3, [r7, #8]
 80a1d36:	330c      	adds	r3, #12
 80a1d38:	edd3 7a00 	vldr	s15, [r3]
 80a1d3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80a1d40:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80a1d44:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80a1d48:	eef0 7a66 	vmov.f32	s15, s13
}
 80a1d4c:	eeb0 0a67 	vmov.f32	s0, s15
 80a1d50:	3720      	adds	r7, #32
 80a1d52:	46bd      	mov	sp, r7
 80a1d54:	bd80      	pop	{r7, pc}
	...

080a1d58 <bf2092_platform_write>:
 * @param  len       number of consecutive register to write
 *
 */
static int32_t bf2092_platform_write(void *handle, uint8_t reg, uint8_t * bufp,
                                     uint16_t len)
{
 80a1d58:	b580      	push	{r7, lr}
 80a1d5a:	b088      	sub	sp, #32
 80a1d5c:	af04      	add	r7, sp, #16
 80a1d5e:	60f8      	str	r0, [r7, #12]
 80a1d60:	607a      	str	r2, [r7, #4]
 80a1d62:	461a      	mov	r2, r3
 80a1d64:	460b      	mov	r3, r1
 80a1d66:	72fb      	strb	r3, [r7, #11]
 80a1d68:	4613      	mov	r3, r2
 80a1d6a:	813b      	strh	r3, [r7, #8]
  if (handle == &optical_init_parms->i2c_handle) {
 80a1d6c:	4b0c      	ldr	r3, [pc, #48]	; (80a1da0 <bf2092_platform_write+0x48>)
 80a1d6e:	681b      	ldr	r3, [r3, #0]
 80a1d70:	3304      	adds	r3, #4
 80a1d72:	68fa      	ldr	r2, [r7, #12]
 80a1d74:	429a      	cmp	r2, r3
 80a1d76:	d10d      	bne.n	80a1d94 <bf2092_platform_write+0x3c>
    //printf("start i2c write, \r\n");
    HAL_I2C_Mem_Write(handle, (uint16_t) BF2092_I2C_COMUNICATE_ADD, reg,
 80a1d78:	7afb      	ldrb	r3, [r7, #11]
 80a1d7a:	b29a      	uxth	r2, r3
 80a1d7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1d80:	9302      	str	r3, [sp, #8]
 80a1d82:	893b      	ldrh	r3, [r7, #8]
 80a1d84:	9301      	str	r3, [sp, #4]
 80a1d86:	687b      	ldr	r3, [r7, #4]
 80a1d88:	9300      	str	r3, [sp, #0]
 80a1d8a:	2301      	movs	r3, #1
 80a1d8c:	21dc      	movs	r1, #220	; 0xdc
 80a1d8e:	68f8      	ldr	r0, [r7, #12]
 80a1d90:	f010 f914 	bl	80b1fbc <HAL_I2C_Mem_Write>
                      I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  }

  return 0;
 80a1d94:	2300      	movs	r3, #0
}
 80a1d96:	4618      	mov	r0, r3
 80a1d98:	3710      	adds	r7, #16
 80a1d9a:	46bd      	mov	sp, r7
 80a1d9c:	bd80      	pop	{r7, pc}
 80a1d9e:	bf00      	nop
 80a1da0:	20007ee0 	.word	0x20007ee0

080a1da4 <bf2092_platform_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t bf2092_platform_read(void *handle, uint8_t reg, uint8_t * bufp,
                                    uint16_t len)
{
 80a1da4:	b580      	push	{r7, lr}
 80a1da6:	b088      	sub	sp, #32
 80a1da8:	af04      	add	r7, sp, #16
 80a1daa:	60f8      	str	r0, [r7, #12]
 80a1dac:	607a      	str	r2, [r7, #4]
 80a1dae:	461a      	mov	r2, r3
 80a1db0:	460b      	mov	r3, r1
 80a1db2:	72fb      	strb	r3, [r7, #11]
 80a1db4:	4613      	mov	r3, r2
 80a1db6:	813b      	strh	r3, [r7, #8]
  if (handle == &optical_init_parms->i2c_handle) {
 80a1db8:	4b0c      	ldr	r3, [pc, #48]	; (80a1dec <bf2092_platform_read+0x48>)
 80a1dba:	681b      	ldr	r3, [r3, #0]
 80a1dbc:	3304      	adds	r3, #4
 80a1dbe:	68fa      	ldr	r2, [r7, #12]
 80a1dc0:	429a      	cmp	r2, r3
 80a1dc2:	d10d      	bne.n	80a1de0 <bf2092_platform_read+0x3c>
    //printf("start i2c read, \r\n");
    HAL_I2C_Mem_Read(handle, (uint16_t) BF2092_I2C_COMUNICATE_ADD, reg,
 80a1dc4:	7afb      	ldrb	r3, [r7, #11]
 80a1dc6:	b29a      	uxth	r2, r3
 80a1dc8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1dcc:	9302      	str	r3, [sp, #8]
 80a1dce:	893b      	ldrh	r3, [r7, #8]
 80a1dd0:	9301      	str	r3, [sp, #4]
 80a1dd2:	687b      	ldr	r3, [r7, #4]
 80a1dd4:	9300      	str	r3, [sp, #0]
 80a1dd6:	2301      	movs	r3, #1
 80a1dd8:	21dc      	movs	r1, #220	; 0xdc
 80a1dda:	68f8      	ldr	r0, [r7, #12]
 80a1ddc:	f010 f9e8 	bl	80b21b0 <HAL_I2C_Mem_Read>
                     I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  }

  return 0;
 80a1de0:	2300      	movs	r3, #0
}
 80a1de2:	4618      	mov	r0, r3
 80a1de4:	3710      	adds	r7, #16
 80a1de6:	46bd      	mov	sp, r7
 80a1de8:	bd80      	pop	{r7, pc}
 80a1dea:	bf00      	nop
 80a1dec:	20007ee0 	.word	0x20007ee0

080a1df0 <bf2092_driver_reset>:
 * NAME       : bf2092_driver_reset
 * FUNCTION   : reset bf2092 register
 * REMARKS    :
 *****************************************************************************/
static int bf2092_driver_reset(stmdev_ctx_t * ctx)
{
 80a1df0:	b580      	push	{r7, lr}
 80a1df2:	b084      	sub	sp, #16
 80a1df4:	af00      	add	r7, sp, #0
 80a1df6:	6078      	str	r0, [r7, #4]
  int result = 0;
 80a1df8:	2300      	movs	r3, #0
 80a1dfa:	60fb      	str	r3, [r7, #12]
  /* set soft reset */
  uint8_t reset_value = 0x01;
 80a1dfc:	2301      	movs	r3, #1
 80a1dfe:	72fb      	strb	r3, [r7, #11]
  bf2092_platform_write(ctx->handle, RESET_REG, &reset_value, 1);
 80a1e00:	687b      	ldr	r3, [r7, #4]
 80a1e02:	6898      	ldr	r0, [r3, #8]
 80a1e04:	f107 020b 	add.w	r2, r7, #11
 80a1e08:	2301      	movs	r3, #1
 80a1e0a:	21f2      	movs	r1, #242	; 0xf2
 80a1e0c:	f7ff ffa4 	bl	80a1d58 <bf2092_platform_write>
  return (result);
 80a1e10:	68fb      	ldr	r3, [r7, #12]
}
 80a1e12:	4618      	mov	r0, r3
 80a1e14:	3710      	adds	r7, #16
 80a1e16:	46bd      	mov	sp, r7
 80a1e18:	bd80      	pop	{r7, pc}

080a1e1a <bf2092_check_raw_data_quality>:

static int bf2092_check_raw_data_quality(stmdev_ctx_t * ctx)
{
 80a1e1a:	b580      	push	{r7, lr}
 80a1e1c:	b084      	sub	sp, #16
 80a1e1e:	af00      	add	r7, sp, #0
 80a1e20:	6078      	str	r0, [r7, #4]
  uint8_t imagequality;
  bf2092_platform_read(ctx->handle, IMAGE_Q_REG, &imagequality, 1);
 80a1e22:	687b      	ldr	r3, [r7, #4]
 80a1e24:	6898      	ldr	r0, [r3, #8]
 80a1e26:	f107 020f 	add.w	r2, r7, #15
 80a1e2a:	2301      	movs	r3, #1
 80a1e2c:	2157      	movs	r1, #87	; 0x57
 80a1e2e:	f7ff ffb9 	bl	80a1da4 <bf2092_platform_read>
  if (imagequality < 5)
 80a1e32:	7bfb      	ldrb	r3, [r7, #15]
 80a1e34:	2b04      	cmp	r3, #4
 80a1e36:	d802      	bhi.n	80a1e3e <bf2092_check_raw_data_quality+0x24>
    return -1;
 80a1e38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a1e3c:	e00e      	b.n	80a1e5c <bf2092_check_raw_data_quality+0x42>
  uint8_t lightquality;
  bf2092_platform_read(ctx->handle, LIGHT_Q_REG, &lightquality, 1);
 80a1e3e:	687b      	ldr	r3, [r7, #4]
 80a1e40:	6898      	ldr	r0, [r3, #8]
 80a1e42:	f107 020e 	add.w	r2, r7, #14
 80a1e46:	2301      	movs	r3, #1
 80a1e48:	21a1      	movs	r1, #161	; 0xa1
 80a1e4a:	f7ff ffab 	bl	80a1da4 <bf2092_platform_read>
  if (lightquality < 10)
 80a1e4e:	7bbb      	ldrb	r3, [r7, #14]
 80a1e50:	2b09      	cmp	r3, #9
 80a1e52:	d802      	bhi.n	80a1e5a <bf2092_check_raw_data_quality+0x40>
    return -1;
 80a1e54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a1e58:	e000      	b.n	80a1e5c <bf2092_check_raw_data_quality+0x42>
  return 0;
 80a1e5a:	2300      	movs	r3, #0
}
 80a1e5c:	4618      	mov	r0, r3
 80a1e5e:	3710      	adds	r7, #16
 80a1e60:	46bd      	mov	sp, r7
 80a1e62:	bd80      	pop	{r7, pc}

080a1e64 <bf2092_get_raw_data>:

static void bf2092_get_raw_data(stmdev_ctx_t * ctx)
{
 80a1e64:	b580      	push	{r7, lr}
 80a1e66:	b084      	sub	sp, #16
 80a1e68:	af00      	add	r7, sp, #0
 80a1e6a:	6078      	str	r0, [r7, #4]
  uint8_t dataready;
  bf2092_platform_read(ctx->handle, DATA_READY_REG, &dataready, 1);
 80a1e6c:	687b      	ldr	r3, [r7, #4]
 80a1e6e:	6898      	ldr	r0, [r3, #8]
 80a1e70:	f107 020f 	add.w	r2, r7, #15
 80a1e74:	2301      	movs	r3, #1
 80a1e76:	2153      	movs	r1, #83	; 0x53
 80a1e78:	f7ff ff94 	bl	80a1da4 <bf2092_platform_read>
  if (dataready & HIGHESTBITMASK) {     //check bit7, if 1, data ready, if 0 not ready
 80a1e7c:	7bfb      	ldrb	r3, [r7, #15]
 80a1e7e:	b25b      	sxtb	r3, r3
 80a1e80:	2b00      	cmp	r3, #0
 80a1e82:	da1e      	bge.n	80a1ec2 <bf2092_get_raw_data+0x5e>
    bf2092_platform_read(ctx->handle, DATA_X_REG, &bf2092_raw_data[0], 1);
 80a1e84:	687b      	ldr	r3, [r7, #4]
 80a1e86:	6898      	ldr	r0, [r3, #8]
 80a1e88:	2301      	movs	r3, #1
 80a1e8a:	4a11      	ldr	r2, [pc, #68]	; (80a1ed0 <bf2092_get_raw_data+0x6c>)
 80a1e8c:	2154      	movs	r1, #84	; 0x54
 80a1e8e:	f7ff ff89 	bl	80a1da4 <bf2092_platform_read>
    bf2092_platform_read(ctx->handle, DATA_Y_REG, &bf2092_raw_data[1], 1);
 80a1e92:	687b      	ldr	r3, [r7, #4]
 80a1e94:	6898      	ldr	r0, [r3, #8]
 80a1e96:	2301      	movs	r3, #1
 80a1e98:	4a0e      	ldr	r2, [pc, #56]	; (80a1ed4 <bf2092_get_raw_data+0x70>)
 80a1e9a:	2155      	movs	r1, #85	; 0x55
 80a1e9c:	f7ff ff82 	bl	80a1da4 <bf2092_platform_read>
    is_env_good = bf2092_check_raw_data_quality(ctx);
 80a1ea0:	6878      	ldr	r0, [r7, #4]
 80a1ea2:	f7ff ffba 	bl	80a1e1a <bf2092_check_raw_data_quality>
 80a1ea6:	4603      	mov	r3, r0
 80a1ea8:	4a0b      	ldr	r2, [pc, #44]	; (80a1ed8 <bf2092_get_raw_data+0x74>)
 80a1eaa:	6013      	str	r3, [r2, #0]
    if (is_env_good < 0) {
 80a1eac:	4b0a      	ldr	r3, [pc, #40]	; (80a1ed8 <bf2092_get_raw_data+0x74>)
 80a1eae:	681b      	ldr	r3, [r3, #0]
 80a1eb0:	2b00      	cmp	r3, #0
 80a1eb2:	da09      	bge.n	80a1ec8 <bf2092_get_raw_data+0x64>
      bf2092_raw_data[0] = 0;
 80a1eb4:	4b06      	ldr	r3, [pc, #24]	; (80a1ed0 <bf2092_get_raw_data+0x6c>)
 80a1eb6:	2200      	movs	r2, #0
 80a1eb8:	701a      	strb	r2, [r3, #0]
      bf2092_raw_data[1] = 0;
 80a1eba:	4b05      	ldr	r3, [pc, #20]	; (80a1ed0 <bf2092_get_raw_data+0x6c>)
 80a1ebc:	2200      	movs	r2, #0
 80a1ebe:	705a      	strb	r2, [r3, #1]
 80a1ec0:	e002      	b.n	80a1ec8 <bf2092_get_raw_data+0x64>
/* 		if ((bf2092_raw_data[0]&(~HIGHESTBITMASK)) < 3)
			bf2092_raw_data[0] = 0;
		if ((bf2092_raw_data[1]&(~HIGHESTBITMASK)) < 3)
			bf2092_raw_data[1] = 0;*/
  } else
    printf("bf2092 data not ready!!!\r\n");
 80a1ec2:	4806      	ldr	r0, [pc, #24]	; (80a1edc <bf2092_get_raw_data+0x78>)
 80a1ec4:	f01e fdf2 	bl	80c0aac <puts>
}
 80a1ec8:	3710      	adds	r7, #16
 80a1eca:	46bd      	mov	sp, r7
 80a1ecc:	bd80      	pop	{r7, pc}
 80a1ece:	bf00      	nop
 80a1ed0:	20007ed0 	.word	0x20007ed0
 80a1ed4:	20007ed1 	.word	0x20007ed1
 80a1ed8:	20007000 	.word	0x20007000
 80a1edc:	080c4da0 	.word	0x080c4da0

080a1ee0 <bf2092_init_client>:

/*************** Initialze Functions ******************/
static int bf2092_init_client(stmdev_ctx_t * ctx)
{
 80a1ee0:	b580      	push	{r7, lr}
 80a1ee2:	b084      	sub	sp, #16
 80a1ee4:	af00      	add	r7, sp, #0
 80a1ee6:	6078      	str	r0, [r7, #4]
  int result = 0;
 80a1ee8:	2300      	movs	r3, #0
 80a1eea:	60fb      	str	r3, [r7, #12]
  uint8_t tmp = 0x00;
 80a1eec:	2300      	movs	r3, #0
 80a1eee:	72fb      	strb	r3, [r7, #11]
  bf2092_platform_write(ctx->handle, COM7, &tmp, 1);
 80a1ef0:	687b      	ldr	r3, [r7, #4]
 80a1ef2:	6898      	ldr	r0, [r3, #8]
 80a1ef4:	f107 020b 	add.w	r2, r7, #11
 80a1ef8:	2301      	movs	r3, #1
 80a1efa:	2107      	movs	r1, #7
 80a1efc:	f7ff ff2c 	bl	80a1d58 <bf2092_platform_write>
  tmp = 0x03;
 80a1f00:	2303      	movs	r3, #3
 80a1f02:	72fb      	strb	r3, [r7, #11]
  bf2092_platform_write(ctx->handle, ISPBYPS, &tmp, 1);
 80a1f04:	687b      	ldr	r3, [r7, #4]
 80a1f06:	6898      	ldr	r0, [r3, #8]
 80a1f08:	f107 020b 	add.w	r2, r7, #11
 80a1f0c:	2301      	movs	r3, #1
 80a1f0e:	21f1      	movs	r1, #241	; 0xf1
 80a1f10:	f7ff ff22 	bl	80a1d58 <bf2092_platform_write>
  tmp = 0xa5;
 80a1f14:	23a5      	movs	r3, #165	; 0xa5
 80a1f16:	72fb      	strb	r3, [r7, #11]
  bf2092_platform_write(ctx->handle, REG_CTR0, &tmp, 1);
 80a1f18:	687b      	ldr	r3, [r7, #4]
 80a1f1a:	6898      	ldr	r0, [r3, #8]
 80a1f1c:	f107 020b 	add.w	r2, r7, #11
 80a1f20:	2301      	movs	r3, #1
 80a1f22:	21e0      	movs	r1, #224	; 0xe0
 80a1f24:	f7ff ff18 	bl	80a1d58 <bf2092_platform_write>
  tmp = 0x44;
 80a1f28:	2344      	movs	r3, #68	; 0x44
 80a1f2a:	72fb      	strb	r3, [r7, #11]
  bf2092_platform_write(ctx->handle, REG_CTR2, &tmp, 1);
 80a1f2c:	687b      	ldr	r3, [r7, #4]
 80a1f2e:	6898      	ldr	r0, [r3, #8]
 80a1f30:	f107 020b 	add.w	r2, r7, #11
 80a1f34:	2301      	movs	r3, #1
 80a1f36:	21e2      	movs	r1, #226	; 0xe2
 80a1f38:	f7ff ff0e 	bl	80a1d58 <bf2092_platform_write>
  tmp = 0x24;
 80a1f3c:	2324      	movs	r3, #36	; 0x24
 80a1f3e:	72fb      	strb	r3, [r7, #11]
  bf2092_platform_write(ctx->handle, REG_CTR3, &tmp, 1);
 80a1f40:	687b      	ldr	r3, [r7, #4]
 80a1f42:	6898      	ldr	r0, [r3, #8]
 80a1f44:	f107 020b 	add.w	r2, r7, #11
 80a1f48:	2301      	movs	r3, #1
 80a1f4a:	21e3      	movs	r1, #227	; 0xe3
 80a1f4c:	f7ff ff04 	bl	80a1d58 <bf2092_platform_write>
  tmp = 0x09;
 80a1f50:	2309      	movs	r3, #9
 80a1f52:	72fb      	strb	r3, [r7, #11]
  bf2092_platform_write(ctx->handle, REG_CTR4, &tmp, 1);
 80a1f54:	687b      	ldr	r3, [r7, #4]
 80a1f56:	6898      	ldr	r0, [r3, #8]
 80a1f58:	f107 020b 	add.w	r2, r7, #11
 80a1f5c:	2301      	movs	r3, #1
 80a1f5e:	21e4      	movs	r1, #228	; 0xe4
 80a1f60:	f7ff fefa 	bl	80a1d58 <bf2092_platform_write>
  tmp = 0x7c;
 80a1f64:	237c      	movs	r3, #124	; 0x7c
 80a1f66:	72fb      	strb	r3, [r7, #11]
  bf2092_platform_write(ctx->handle, REG_CTR5, &tmp, 1);
 80a1f68:	687b      	ldr	r3, [r7, #4]
 80a1f6a:	6898      	ldr	r0, [r3, #8]
 80a1f6c:	f107 020b 	add.w	r2, r7, #11
 80a1f70:	2301      	movs	r3, #1
 80a1f72:	21e5      	movs	r1, #229	; 0xe5
 80a1f74:	f7ff fef0 	bl	80a1d58 <bf2092_platform_write>
  tmp = 0x7e;
 80a1f78:	237e      	movs	r3, #126	; 0x7e
 80a1f7a:	72fb      	strb	r3, [r7, #11]
  bf2092_platform_write(ctx->handle, REG_CTR6, &tmp, 1);
 80a1f7c:	687b      	ldr	r3, [r7, #4]
 80a1f7e:	6898      	ldr	r0, [r3, #8]
 80a1f80:	f107 020b 	add.w	r2, r7, #11
 80a1f84:	2301      	movs	r3, #1
 80a1f86:	21e6      	movs	r1, #230	; 0xe6
 80a1f88:	f7ff fee6 	bl	80a1d58 <bf2092_platform_write>
  tmp = 0xc0;
 80a1f8c:	23c0      	movs	r3, #192	; 0xc0
 80a1f8e:	72fb      	strb	r3, [r7, #11]
  bf2092_platform_write(ctx->handle, REG_CTR7, &tmp, 1);
 80a1f90:	687b      	ldr	r3, [r7, #4]
 80a1f92:	6898      	ldr	r0, [r3, #8]
 80a1f94:	f107 020b 	add.w	r2, r7, #11
 80a1f98:	2301      	movs	r3, #1
 80a1f9a:	21e7      	movs	r1, #231	; 0xe7
 80a1f9c:	f7ff fedc 	bl	80a1d58 <bf2092_platform_write>
  tmp = 0x12;
 80a1fa0:	2312      	movs	r3, #18
 80a1fa2:	72fb      	strb	r3, [r7, #11]
  bf2092_platform_write(ctx->handle, DIN_SET1, &tmp, 1);
 80a1fa4:	687b      	ldr	r3, [r7, #4]
 80a1fa6:	6898      	ldr	r0, [r3, #8]
 80a1fa8:	f107 020b 	add.w	r2, r7, #11
 80a1fac:	2301      	movs	r3, #1
 80a1fae:	2118      	movs	r1, #24
 80a1fb0:	f7ff fed2 	bl	80a1d58 <bf2092_platform_write>
  tmp = 0x23;
 80a1fb4:	2323      	movs	r3, #35	; 0x23
 80a1fb6:	72fb      	strb	r3, [r7, #11]
  bf2092_platform_write(ctx->handle, COUTER3, &tmp, 1);
 80a1fb8:	687b      	ldr	r3, [r7, #4]
 80a1fba:	6898      	ldr	r0, [r3, #8]
 80a1fbc:	f107 020b 	add.w	r2, r7, #11
 80a1fc0:	2301      	movs	r3, #1
 80a1fc2:	2166      	movs	r1, #102	; 0x66
 80a1fc4:	f7ff fec8 	bl	80a1d58 <bf2092_platform_write>
  tmp = 0x24;
 80a1fc8:	2324      	movs	r3, #36	; 0x24
 80a1fca:	72fb      	strb	r3, [r7, #11]
  bf2092_platform_write(ctx->handle, COUTER9, &tmp, 1);
 80a1fcc:	687b      	ldr	r3, [r7, #4]
 80a1fce:	6898      	ldr	r0, [r3, #8]
 80a1fd0:	f107 020b 	add.w	r2, r7, #11
 80a1fd4:	2301      	movs	r3, #1
 80a1fd6:	216c      	movs	r1, #108	; 0x6c
 80a1fd8:	f7ff febe 	bl	80a1d58 <bf2092_platform_write>
  tmp = 0x25;
 80a1fdc:	2325      	movs	r3, #37	; 0x25
 80a1fde:	72fb      	strb	r3, [r7, #11]
  bf2092_platform_write(ctx->handle, COUTER10, &tmp, 1);
 80a1fe0:	687b      	ldr	r3, [r7, #4]
 80a1fe2:	6898      	ldr	r0, [r3, #8]
 80a1fe4:	f107 020b 	add.w	r2, r7, #11
 80a1fe8:	2301      	movs	r3, #1
 80a1fea:	216d      	movs	r1, #109	; 0x6d
 80a1fec:	f7ff feb4 	bl	80a1d58 <bf2092_platform_write>
  tmp = 0x06;
 80a1ff0:	2306      	movs	r3, #6
 80a1ff2:	72fb      	strb	r3, [r7, #11]
  bf2092_platform_write(ctx->handle, INT_TIM_TH, &tmp, 1);
 80a1ff4:	687b      	ldr	r3, [r7, #4]
 80a1ff6:	6898      	ldr	r0, [r3, #8]
 80a1ff8:	f107 020b 	add.w	r2, r7, #11
 80a1ffc:	2301      	movs	r3, #1
 80a1ffe:	21b3      	movs	r1, #179	; 0xb3
 80a2000:	f7ff feaa 	bl	80a1d58 <bf2092_platform_write>
  tmp = 0x00;
 80a2004:	2300      	movs	r3, #0
 80a2006:	72fb      	strb	r3, [r7, #11]
  bf2092_platform_write(ctx->handle, BPS_PARAH, &tmp, 1);
 80a2008:	687b      	ldr	r3, [r7, #4]
 80a200a:	6898      	ldr	r0, [r3, #8]
 80a200c:	f107 020b 	add.w	r2, r7, #11
 80a2010:	2301      	movs	r3, #1
 80a2012:	21d3      	movs	r1, #211	; 0xd3
 80a2014:	f7ff fea0 	bl	80a1d58 <bf2092_platform_write>
  tmp = 0xe4;
 80a2018:	23e4      	movs	r3, #228	; 0xe4
 80a201a:	72fb      	strb	r3, [r7, #11]
  bf2092_platform_write(ctx->handle, BPS_PARAL, &tmp, 1);
 80a201c:	687b      	ldr	r3, [r7, #4]
 80a201e:	6898      	ldr	r0, [r3, #8]
 80a2020:	f107 020b 	add.w	r2, r7, #11
 80a2024:	2301      	movs	r3, #1
 80a2026:	21d4      	movs	r1, #212	; 0xd4
 80a2028:	f7ff fe96 	bl	80a1d58 <bf2092_platform_write>
  tmp = 0x08;
 80a202c:	2308      	movs	r3, #8
 80a202e:	72fb      	strb	r3, [r7, #11]
  bf2092_platform_write(ctx->handle, UART_REG, &tmp, 1);
 80a2030:	687b      	ldr	r3, [r7, #4]
 80a2032:	6898      	ldr	r0, [r3, #8]
 80a2034:	f107 020b 	add.w	r2, r7, #11
 80a2038:	2301      	movs	r3, #1
 80a203a:	215c      	movs	r1, #92	; 0x5c
 80a203c:	f7ff fe8c 	bl	80a1d58 <bf2092_platform_write>
  tmp = 0x40;
 80a2040:	2340      	movs	r3, #64	; 0x40
 80a2042:	72fb      	strb	r3, [r7, #11]
  bf2092_platform_write(ctx->handle, SC_CNTL1, &tmp, 1);
 80a2044:	687b      	ldr	r3, [r7, #4]
 80a2046:	6898      	ldr	r0, [r3, #8]
 80a2048:	f107 020b 	add.w	r2, r7, #11
 80a204c:	2301      	movs	r3, #1
 80a204e:	2101      	movs	r1, #1
 80a2050:	f7ff fe82 	bl	80a1d58 <bf2092_platform_write>
  tmp = 0xb3;
 80a2054:	23b3      	movs	r3, #179	; 0xb3
 80a2056:	72fb      	strb	r3, [r7, #11]
  bf2092_platform_write(ctx->handle, MODE_CNTL, &tmp, 1);
 80a2058:	687b      	ldr	r3, [r7, #4]
 80a205a:	6898      	ldr	r0, [r3, #8]
 80a205c:	f107 020b 	add.w	r2, r7, #11
 80a2060:	2301      	movs	r3, #1
 80a2062:	212a      	movs	r1, #42	; 0x2a
 80a2064:	f7ff fe78 	bl	80a1d58 <bf2092_platform_write>
  tmp = 0x01;
 80a2068:	2301      	movs	r3, #1
 80a206a:	72fb      	strb	r3, [r7, #11]
  bf2092_platform_write(ctx->handle, INT_MAX_I2C, &tmp, 1);
 80a206c:	687b      	ldr	r3, [r7, #4]
 80a206e:	6898      	ldr	r0, [r3, #8]
 80a2070:	f107 020b 	add.w	r2, r7, #11
 80a2074:	2301      	movs	r3, #1
 80a2076:	21a6      	movs	r1, #166	; 0xa6
 80a2078:	f7ff fe6e 	bl	80a1d58 <bf2092_platform_write>
  tmp = 0xca;
 80a207c:	23ca      	movs	r3, #202	; 0xca
 80a207e:	72fb      	strb	r3, [r7, #11]
  bf2092_platform_write(ctx->handle, INT_STEP_50, &tmp, 1);
 80a2080:	687b      	ldr	r3, [r7, #4]
 80a2082:	6898      	ldr	r0, [r3, #8]
 80a2084:	f107 020b 	add.w	r2, r7, #11
 80a2088:	2301      	movs	r3, #1
 80a208a:	21a8      	movs	r1, #168	; 0xa8
 80a208c:	f7ff fe64 	bl	80a1d58 <bf2092_platform_write>
  tmp = 0xd6;
 80a2090:	23d6      	movs	r3, #214	; 0xd6
 80a2092:	72fb      	strb	r3, [r7, #11]
  bf2092_platform_write(ctx->handle, INT_STEP_60, &tmp, 1);
 80a2094:	687b      	ldr	r3, [r7, #4]
 80a2096:	6898      	ldr	r0, [r3, #8]
 80a2098:	f107 020b 	add.w	r2, r7, #11
 80a209c:	2301      	movs	r3, #1
 80a209e:	21a9      	movs	r1, #169	; 0xa9
 80a20a0:	f7ff fe5a 	bl	80a1d58 <bf2092_platform_write>
  tmp = 0x19;
 80a20a4:	2319      	movs	r3, #25
 80a20a6:	72fb      	strb	r3, [r7, #11]
  bf2092_platform_write(ctx->handle, DM_ROWL_AF_PIX, &tmp, 1);
 80a20a8:	687b      	ldr	r3, [r7, #4]
 80a20aa:	6898      	ldr	r0, [r3, #8]
 80a20ac:	f107 020b 	add.w	r2, r7, #11
 80a20b0:	2301      	movs	r3, #1
 80a20b2:	2105      	movs	r1, #5
 80a20b4:	f7ff fe50 	bl	80a1d58 <bf2092_platform_write>
  tmp = 0xff;
 80a20b8:	23ff      	movs	r3, #255	; 0xff
 80a20ba:	72fb      	strb	r3, [r7, #11]
  bf2092_platform_write(ctx->handle, GLB_MAX3, &tmp, 1);
 80a20bc:	687b      	ldr	r3, [r7, #4]
 80a20be:	6898      	ldr	r0, [r3, #8]
 80a20c0:	f107 020b 	add.w	r2, r7, #11
 80a20c4:	2301      	movs	r3, #1
 80a20c6:	21b9      	movs	r1, #185	; 0xb9
 80a20c8:	f7ff fe46 	bl	80a1d58 <bf2092_platform_write>
  tmp = 0xf4;
 80a20cc:	23f4      	movs	r3, #244	; 0xf4
 80a20ce:	72fb      	strb	r3, [r7, #11]
  bf2092_platform_write(ctx->handle, SPEED_PLL, &tmp, 1);
 80a20d0:	687b      	ldr	r3, [r7, #4]
 80a20d2:	6898      	ldr	r0, [r3, #8]
 80a20d4:	f107 020b 	add.w	r2, r7, #11
 80a20d8:	2301      	movs	r3, #1
 80a20da:	21e1      	movs	r1, #225	; 0xe1
 80a20dc:	f7ff fe3c 	bl	80a1d58 <bf2092_platform_write>

  return (result);
 80a20e0:	68fb      	ldr	r3, [r7, #12]
}
 80a20e2:	4618      	mov	r0, r3
 80a20e4:	3710      	adds	r7, #16
 80a20e6:	46bd      	mov	sp, r7
 80a20e8:	bd80      	pop	{r7, pc}
	...

080a20ec <bf2092_optical_init>:

/*
 * @brief  platform specific initialization (platform dependent)
 */
int bf2092_optical_init(void *para, void *para2)
{
 80a20ec:	b580      	push	{r7, lr}
 80a20ee:	b084      	sub	sp, #16
 80a20f0:	af00      	add	r7, sp, #0
 80a20f2:	6078      	str	r0, [r7, #4]
 80a20f4:	6039      	str	r1, [r7, #0]
  optical_init_parms = (platform_prams *) para;
 80a20f6:	4a23      	ldr	r2, [pc, #140]	; (80a2184 <bf2092_optical_init+0x98>)
 80a20f8:	687b      	ldr	r3, [r7, #4]
 80a20fa:	6013      	str	r3, [r2, #0]
  /* Initialize mems driver interface */
  optical_dev_ctx.write_reg = bf2092_platform_write;
 80a20fc:	4b22      	ldr	r3, [pc, #136]	; (80a2188 <bf2092_optical_init+0x9c>)
 80a20fe:	4a23      	ldr	r2, [pc, #140]	; (80a218c <bf2092_optical_init+0xa0>)
 80a2100:	601a      	str	r2, [r3, #0]
  optical_dev_ctx.read_reg = bf2092_platform_read;
 80a2102:	4b21      	ldr	r3, [pc, #132]	; (80a2188 <bf2092_optical_init+0x9c>)
 80a2104:	4a22      	ldr	r2, [pc, #136]	; (80a2190 <bf2092_optical_init+0xa4>)
 80a2106:	605a      	str	r2, [r3, #4]
  optical_dev_ctx.handle = &optical_init_parms->i2c_handle;
 80a2108:	4b1e      	ldr	r3, [pc, #120]	; (80a2184 <bf2092_optical_init+0x98>)
 80a210a:	681b      	ldr	r3, [r3, #0]
 80a210c:	3304      	adds	r3, #4
 80a210e:	4a1e      	ldr	r2, [pc, #120]	; (80a2188 <bf2092_optical_init+0x9c>)
 80a2110:	6093      	str	r3, [r2, #8]
  /* power up */
  HAL_GPIO_WritePin(GUANGLIU_EN_GPIO_Port, GUANGLIU_EN_Pin, GPIO_PIN_SET);
 80a2112:	2201      	movs	r2, #1
 80a2114:	2110      	movs	r1, #16
 80a2116:	481f      	ldr	r0, [pc, #124]	; (80a2194 <bf2092_optical_init+0xa8>)
 80a2118:	f00f fab6 	bl	80b1688 <HAL_GPIO_WritePin>
  osDelay(2);
 80a211c:	2002      	movs	r0, #2
 80a211e:	f013 ffec 	bl	80b60fa <osDelay>
  /* Check device ID */
  uint8_t id_0, id_1;
  bf2092_platform_read(optical_dev_ctx.handle, (uint8_t) BF2092_REG_PART_ID_0,
 80a2122:	4b19      	ldr	r3, [pc, #100]	; (80a2188 <bf2092_optical_init+0x9c>)
 80a2124:	6898      	ldr	r0, [r3, #8]
 80a2126:	f107 020f 	add.w	r2, r7, #15
 80a212a:	2301      	movs	r3, #1
 80a212c:	21fc      	movs	r1, #252	; 0xfc
 80a212e:	f7ff fe39 	bl	80a1da4 <bf2092_platform_read>
                       &id_0, 1);

  bf2092_platform_read(optical_dev_ctx.handle, (uint8_t) BF2092_REG_PART_ID_1,
 80a2132:	4b15      	ldr	r3, [pc, #84]	; (80a2188 <bf2092_optical_init+0x9c>)
 80a2134:	6898      	ldr	r0, [r3, #8]
 80a2136:	f107 020e 	add.w	r2, r7, #14
 80a213a:	2301      	movs	r3, #1
 80a213c:	21fd      	movs	r1, #253	; 0xfd
 80a213e:	f7ff fe31 	bl	80a1da4 <bf2092_platform_read>
                       &id_1, 1);

  printf("bF2092 whoamI: 0x%x 0x%x %p \r\n", id_0, id_1,
 80a2142:	7bfb      	ldrb	r3, [r7, #15]
 80a2144:	4619      	mov	r1, r3
 80a2146:	7bbb      	ldrb	r3, [r7, #14]
 80a2148:	461a      	mov	r2, r3
 80a214a:	4b0f      	ldr	r3, [pc, #60]	; (80a2188 <bf2092_optical_init+0x9c>)
 80a214c:	689b      	ldr	r3, [r3, #8]
 80a214e:	4812      	ldr	r0, [pc, #72]	; (80a2198 <bf2092_optical_init+0xac>)
 80a2150:	f01e fc10 	bl	80c0974 <iprintf>
         optical_dev_ctx.handle);

  if (id_0 != BF2092_REG_PART_ID_0_VALUE || id_1 != BF2092_REG_PART_ID_1_VALUE) {
 80a2154:	7bfb      	ldrb	r3, [r7, #15]
 80a2156:	2b20      	cmp	r3, #32
 80a2158:	d102      	bne.n	80a2160 <bf2092_optical_init+0x74>
 80a215a:	7bbb      	ldrb	r3, [r7, #14]
 80a215c:	2b92      	cmp	r3, #146	; 0x92
 80a215e:	d005      	beq.n	80a216c <bf2092_optical_init+0x80>
    printf("init failed for bf2092!\r\n");
 80a2160:	480e      	ldr	r0, [pc, #56]	; (80a219c <bf2092_optical_init+0xb0>)
 80a2162:	f01e fca3 	bl	80c0aac <puts>
    return SENSOR_FAILED;
 80a2166:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a216a:	e006      	b.n	80a217a <bf2092_optical_init+0x8e>
  }
  // soft reset
  bf2092_driver_reset(&optical_dev_ctx);
 80a216c:	4806      	ldr	r0, [pc, #24]	; (80a2188 <bf2092_optical_init+0x9c>)
 80a216e:	f7ff fe3f 	bl	80a1df0 <bf2092_driver_reset>

  /* Restore default configuration */
  bf2092_init_client(&optical_dev_ctx);
 80a2172:	4805      	ldr	r0, [pc, #20]	; (80a2188 <bf2092_optical_init+0x9c>)
 80a2174:	f7ff feb4 	bl	80a1ee0 <bf2092_init_client>
  return SENSOR_SUCCESS;
 80a2178:	2300      	movs	r3, #0
}
 80a217a:	4618      	mov	r0, r3
 80a217c:	3710      	adds	r7, #16
 80a217e:	46bd      	mov	sp, r7
 80a2180:	bd80      	pop	{r7, pc}
 80a2182:	bf00      	nop
 80a2184:	20007ee0 	.word	0x20007ee0
 80a2188:	20007ed4 	.word	0x20007ed4
 80a218c:	080a1d59 	.word	0x080a1d59
 80a2190:	080a1da5 	.word	0x080a1da5
 80a2194:	40020800 	.word	0x40020800
 80a2198:	080c4dbc 	.word	0x080c4dbc
 80a219c:	080c4ddc 	.word	0x080c4ddc

080a21a0 <bf2092_enable>:

static int32_t bf2092_enable()
{
 80a21a0:	b580      	push	{r7, lr}
 80a21a2:	b082      	sub	sp, #8
 80a21a4:	af00      	add	r7, sp, #0
  int32_t ret = 0;
 80a21a6:	2300      	movs	r3, #0
 80a21a8:	607b      	str	r3, [r7, #4]
  uint8_t STATUS;
  ret = bf2092_platform_read(&optical_dev_ctx, ENABLE_REG, &STATUS, 1);
 80a21aa:	1cfa      	adds	r2, r7, #3
 80a21ac:	2301      	movs	r3, #1
 80a21ae:	21e7      	movs	r1, #231	; 0xe7
 80a21b0:	4813      	ldr	r0, [pc, #76]	; (80a2200 <bf2092_enable+0x60>)
 80a21b2:	f7ff fdf7 	bl	80a1da4 <bf2092_platform_read>
 80a21b6:	6078      	str	r0, [r7, #4]
  if (sensor_activate_count == 0) {
 80a21b8:	4b12      	ldr	r3, [pc, #72]	; (80a2204 <bf2092_enable+0x64>)
 80a21ba:	781b      	ldrb	r3, [r3, #0]
 80a21bc:	2b00      	cmp	r3, #0
 80a21be:	d113      	bne.n	80a21e8 <bf2092_enable+0x48>
    if ((STATUS & 0x01) != 1) {
 80a21c0:	78fb      	ldrb	r3, [r7, #3]
 80a21c2:	f003 0301 	and.w	r3, r3, #1
 80a21c6:	2b00      	cmp	r3, #0
 80a21c8:	d10b      	bne.n	80a21e2 <bf2092_enable+0x42>
      STATUS |= 0X01;           //bit 0 set to 1
 80a21ca:	78fb      	ldrb	r3, [r7, #3]
 80a21cc:	f043 0301 	orr.w	r3, r3, #1
 80a21d0:	b2db      	uxtb	r3, r3
 80a21d2:	70fb      	strb	r3, [r7, #3]
      ret = bf2092_platform_write(&optical_dev_ctx, ENABLE_REG, &STATUS, 1);
 80a21d4:	1cfa      	adds	r2, r7, #3
 80a21d6:	2301      	movs	r3, #1
 80a21d8:	21e7      	movs	r1, #231	; 0xe7
 80a21da:	4809      	ldr	r0, [pc, #36]	; (80a2200 <bf2092_enable+0x60>)
 80a21dc:	f7ff fdbc 	bl	80a1d58 <bf2092_platform_write>
 80a21e0:	6078      	str	r0, [r7, #4]
    }
    optical_activated = true;
 80a21e2:	4b09      	ldr	r3, [pc, #36]	; (80a2208 <bf2092_enable+0x68>)
 80a21e4:	2201      	movs	r2, #1
 80a21e6:	701a      	strb	r2, [r3, #0]
  }
  sensor_activate_count++;
 80a21e8:	4b06      	ldr	r3, [pc, #24]	; (80a2204 <bf2092_enable+0x64>)
 80a21ea:	781b      	ldrb	r3, [r3, #0]
 80a21ec:	3301      	adds	r3, #1
 80a21ee:	b2da      	uxtb	r2, r3
 80a21f0:	4b04      	ldr	r3, [pc, #16]	; (80a2204 <bf2092_enable+0x64>)
 80a21f2:	701a      	strb	r2, [r3, #0]
  return ret;
 80a21f4:	687b      	ldr	r3, [r7, #4]
}
 80a21f6:	4618      	mov	r0, r3
 80a21f8:	3708      	adds	r7, #8
 80a21fa:	46bd      	mov	sp, r7
 80a21fc:	bd80      	pop	{r7, pc}
 80a21fe:	bf00      	nop
 80a2200:	20007ed4 	.word	0x20007ed4
 80a2204:	20007ee4 	.word	0x20007ee4
 80a2208:	20007ee5 	.word	0x20007ee5

080a220c <bf2092_disable>:

static int32_t bf2092_disable()
{
 80a220c:	b580      	push	{r7, lr}
 80a220e:	b082      	sub	sp, #8
 80a2210:	af00      	add	r7, sp, #0
  int32_t ret = 0;
 80a2212:	2300      	movs	r3, #0
 80a2214:	607b      	str	r3, [r7, #4]
  uint8_t STATUS;
  sensor_activate_count--;
 80a2216:	4b15      	ldr	r3, [pc, #84]	; (80a226c <bf2092_disable+0x60>)
 80a2218:	781b      	ldrb	r3, [r3, #0]
 80a221a:	3b01      	subs	r3, #1
 80a221c:	b2da      	uxtb	r2, r3
 80a221e:	4b13      	ldr	r3, [pc, #76]	; (80a226c <bf2092_disable+0x60>)
 80a2220:	701a      	strb	r2, [r3, #0]
  ret = bf2092_platform_read(&optical_dev_ctx, ENABLE_REG, &STATUS, 1);
 80a2222:	1cfa      	adds	r2, r7, #3
 80a2224:	2301      	movs	r3, #1
 80a2226:	21e7      	movs	r1, #231	; 0xe7
 80a2228:	4811      	ldr	r0, [pc, #68]	; (80a2270 <bf2092_disable+0x64>)
 80a222a:	f7ff fdbb 	bl	80a1da4 <bf2092_platform_read>
 80a222e:	6078      	str	r0, [r7, #4]
  if (sensor_activate_count == 0) {
 80a2230:	4b0e      	ldr	r3, [pc, #56]	; (80a226c <bf2092_disable+0x60>)
 80a2232:	781b      	ldrb	r3, [r3, #0]
 80a2234:	2b00      	cmp	r3, #0
 80a2236:	d113      	bne.n	80a2260 <bf2092_disable+0x54>
    if ((STATUS & 0x01) == 1) {
 80a2238:	78fb      	ldrb	r3, [r7, #3]
 80a223a:	f003 0301 	and.w	r3, r3, #1
 80a223e:	2b00      	cmp	r3, #0
 80a2240:	d00b      	beq.n	80a225a <bf2092_disable+0x4e>
      STATUS &= (~0x01);        //bit 0 set to 0
 80a2242:	78fb      	ldrb	r3, [r7, #3]
 80a2244:	f023 0301 	bic.w	r3, r3, #1
 80a2248:	b2db      	uxtb	r3, r3
 80a224a:	70fb      	strb	r3, [r7, #3]
      ret = bf2092_platform_write(&optical_dev_ctx, ENABLE_REG, &STATUS, 1);
 80a224c:	1cfa      	adds	r2, r7, #3
 80a224e:	2301      	movs	r3, #1
 80a2250:	21e7      	movs	r1, #231	; 0xe7
 80a2252:	4807      	ldr	r0, [pc, #28]	; (80a2270 <bf2092_disable+0x64>)
 80a2254:	f7ff fd80 	bl	80a1d58 <bf2092_platform_write>
 80a2258:	6078      	str	r0, [r7, #4]
    }
    optical_activated = false;
 80a225a:	4b06      	ldr	r3, [pc, #24]	; (80a2274 <bf2092_disable+0x68>)
 80a225c:	2200      	movs	r2, #0
 80a225e:	701a      	strb	r2, [r3, #0]
  }
  return ret;
 80a2260:	687b      	ldr	r3, [r7, #4]
}
 80a2262:	4618      	mov	r0, r3
 80a2264:	3708      	adds	r7, #8
 80a2266:	46bd      	mov	sp, r7
 80a2268:	bd80      	pop	{r7, pc}
 80a226a:	bf00      	nop
 80a226c:	20007ee4 	.word	0x20007ee4
 80a2270:	20007ed4 	.word	0x20007ed4
 80a2274:	20007ee5 	.word	0x20007ee5

080a2278 <bf2092_optical_activate>:

int bf2092_optical_activate(bool activate)
{
 80a2278:	b580      	push	{r7, lr}
 80a227a:	b084      	sub	sp, #16
 80a227c:	af00      	add	r7, sp, #0
 80a227e:	4603      	mov	r3, r0
 80a2280:	71fb      	strb	r3, [r7, #7]
  int res = 0;
 80a2282:	2300      	movs	r3, #0
 80a2284:	60fb      	str	r3, [r7, #12]
  printf("bf2092_optical_activate: %d \r\n", activate);
 80a2286:	79fb      	ldrb	r3, [r7, #7]
 80a2288:	4619      	mov	r1, r3
 80a228a:	4809      	ldr	r0, [pc, #36]	; (80a22b0 <bf2092_optical_activate+0x38>)
 80a228c:	f01e fb72 	bl	80c0974 <iprintf>
  if (activate) {
 80a2290:	79fb      	ldrb	r3, [r7, #7]
 80a2292:	2b00      	cmp	r3, #0
 80a2294:	d003      	beq.n	80a229e <bf2092_optical_activate+0x26>
    res = bf2092_enable();
 80a2296:	f7ff ff83 	bl	80a21a0 <bf2092_enable>
 80a229a:	60f8      	str	r0, [r7, #12]
 80a229c:	e002      	b.n	80a22a4 <bf2092_optical_activate+0x2c>
  } else {
    res = bf2092_disable();
 80a229e:	f7ff ffb5 	bl	80a220c <bf2092_disable>
 80a22a2:	60f8      	str	r0, [r7, #12]
  }
  return res;
 80a22a4:	68fb      	ldr	r3, [r7, #12]
}
 80a22a6:	4618      	mov	r0, r3
 80a22a8:	3710      	adds	r7, #16
 80a22aa:	46bd      	mov	sp, r7
 80a22ac:	bd80      	pop	{r7, pc}
 80a22ae:	bf00      	nop
 80a22b0:	080c4df8 	.word	0x080c4df8

080a22b4 <bf2092_publish_sensor_data>:

int bf2092_publish_sensor_data(void *para)
{
 80a22b4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80a22b8:	b09a      	sub	sp, #104	; 0x68
 80a22ba:	af00      	add	r7, sp, #0
 80a22bc:	6078      	str	r0, [r7, #4]
  /* Read samples in polling mode (no int) */
  sensors_event_t sensor_data = { 0 };
 80a22be:	f107 0308 	add.w	r3, r7, #8
 80a22c2:	2250      	movs	r2, #80	; 0x50
 80a22c4:	2100      	movs	r1, #0
 80a22c6:	4618      	mov	r0, r3
 80a22c8:	f01d fe78 	bl	80bffbc <memset>
  float x= 0.0f;
 80a22cc:	f04f 0300 	mov.w	r3, #0
 80a22d0:	667b      	str	r3, [r7, #100]	; 0x64
  float y = 0.0f;
 80a22d2:	f04f 0300 	mov.w	r3, #0
 80a22d6:	663b      	str	r3, [r7, #96]	; 0x60
  float xaverage = 0.0f;
 80a22d8:	f04f 0300 	mov.w	r3, #0
 80a22dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  float yaverage = 0.0f;
 80a22de:	f04f 0300 	mov.w	r3, #0
 80a22e2:	65bb      	str	r3, [r7, #88]	; 0x58
  if (optical_activated) {
 80a22e4:	4b6d      	ldr	r3, [pc, #436]	; (80a249c <bf2092_publish_sensor_data+0x1e8>)
 80a22e6:	781b      	ldrb	r3, [r3, #0]
 80a22e8:	2b00      	cmp	r3, #0
 80a22ea:	f000 80d1 	beq.w	80a2490 <bf2092_publish_sensor_data+0x1dc>
    // core process
    bf2092_get_raw_data(&optical_dev_ctx);
 80a22ee:	486c      	ldr	r0, [pc, #432]	; (80a24a0 <bf2092_publish_sensor_data+0x1ec>)
 80a22f0:	f7ff fdb8 	bl	80a1e64 <bf2092_get_raw_data>
    //send related messages to SensorDataQ
    sensor_data.sensor_type = SENSOR_TYPE_LIGHT_SPEED;
 80a22f4:	2308      	movs	r3, #8
 80a22f6:	723b      	strb	r3, [r7, #8]
    sensor_data.accuracy = 3;
 80a22f8:	2303      	movs	r3, #3
 80a22fa:	727b      	strb	r3, [r7, #9]
    sensor_data.timestamp = sensor_get_timestamp();
 80a22fc:	f00b fa04 	bl	80ad708 <sensor_get_timestamp>
 80a2300:	4602      	mov	r2, r0
 80a2302:	460b      	mov	r3, r1
 80a2304:	e9c7 2304 	strd	r2, r3, [r7, #16]
    current_timestamp = sensor_data.timestamp;
 80a2308:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80a230c:	4965      	ldr	r1, [pc, #404]	; (80a24a4 <bf2092_publish_sensor_data+0x1f0>)
 80a230e:	e9c1 2300 	strd	r2, r3, [r1]
    if (is_env_good >= 0) {
 80a2312:	4b65      	ldr	r3, [pc, #404]	; (80a24a8 <bf2092_publish_sensor_data+0x1f4>)
 80a2314:	681b      	ldr	r3, [r3, #0]
 80a2316:	2b00      	cmp	r3, #0
 80a2318:	f2c0 80ba 	blt.w	80a2490 <bf2092_publish_sensor_data+0x1dc>

      x = -(bf2092_raw_data[0] & (~HIGHESTBITMASK)) * coeff_of_bf2092;
 80a231c:	4b63      	ldr	r3, [pc, #396]	; (80a24ac <bf2092_publish_sensor_data+0x1f8>)
 80a231e:	781b      	ldrb	r3, [r3, #0]
 80a2320:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80a2324:	425b      	negs	r3, r3
 80a2326:	ee07 3a90 	vmov	s15, r3
 80a232a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80a232e:	ed9f 7a60 	vldr	s14, [pc, #384]	; 80a24b0 <bf2092_publish_sensor_data+0x1fc>
 80a2332:	ee67 7a87 	vmul.f32	s15, s15, s14
 80a2336:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
      if (((bf2092_raw_data[0] & HIGHESTBITMASK) >> 7) == 1)    //back, -;front +;
 80a233a:	4b5c      	ldr	r3, [pc, #368]	; (80a24ac <bf2092_publish_sensor_data+0x1f8>)
 80a233c:	781b      	ldrb	r3, [r3, #0]
 80a233e:	09db      	lsrs	r3, r3, #7
 80a2340:	b2db      	uxtb	r3, r3
 80a2342:	2b01      	cmp	r3, #1
 80a2344:	d105      	bne.n	80a2352 <bf2092_publish_sensor_data+0x9e>
        x = -x;
 80a2346:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80a234a:	eef1 7a67 	vneg.f32	s15, s15
 80a234e:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

      y = -(bf2092_raw_data[1] & (~HIGHESTBITMASK)) * coeff_of_bf2092;
 80a2352:	4b56      	ldr	r3, [pc, #344]	; (80a24ac <bf2092_publish_sensor_data+0x1f8>)
 80a2354:	785b      	ldrb	r3, [r3, #1]
 80a2356:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80a235a:	425b      	negs	r3, r3
 80a235c:	ee07 3a90 	vmov	s15, r3
 80a2360:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80a2364:	ed9f 7a52 	vldr	s14, [pc, #328]	; 80a24b0 <bf2092_publish_sensor_data+0x1fc>
 80a2368:	ee67 7a87 	vmul.f32	s15, s15, s14
 80a236c:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      if (((bf2092_raw_data[1] & HIGHESTBITMASK) >> 7) == 1)    //left, -;right +;
 80a2370:	4b4e      	ldr	r3, [pc, #312]	; (80a24ac <bf2092_publish_sensor_data+0x1f8>)
 80a2372:	785b      	ldrb	r3, [r3, #1]
 80a2374:	09db      	lsrs	r3, r3, #7
 80a2376:	b2db      	uxtb	r3, r3
 80a2378:	2b01      	cmp	r3, #1
 80a237a:	d105      	bne.n	80a2388 <bf2092_publish_sensor_data+0xd4>
        y = -y;
 80a237c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80a2380:	eef1 7a67 	vneg.f32	s15, s15
 80a2384:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

      if (last_timestamp == 0)
 80a2388:	4b4a      	ldr	r3, [pc, #296]	; (80a24b4 <bf2092_publish_sensor_data+0x200>)
 80a238a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a238e:	4313      	orrs	r3, r2
 80a2390:	d106      	bne.n	80a23a0 <bf2092_publish_sensor_data+0xec>
        last_timestamp = current_timestamp;
 80a2392:	4b44      	ldr	r3, [pc, #272]	; (80a24a4 <bf2092_publish_sensor_data+0x1f0>)
 80a2394:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2398:	4946      	ldr	r1, [pc, #280]	; (80a24b4 <bf2092_publish_sensor_data+0x200>)
 80a239a:	e9c1 2300 	strd	r2, r3, [r1]
 80a239e:	e077      	b.n	80a2490 <bf2092_publish_sensor_data+0x1dc>
      else {
        xaverage = streaming_median(x / (current_timestamp - last_timestamp) * 1000, x_history_values, x_history_ages, maxCount);
 80a23a0:	4b40      	ldr	r3, [pc, #256]	; (80a24a4 <bf2092_publish_sensor_data+0x1f0>)
 80a23a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80a23a6:	4b43      	ldr	r3, [pc, #268]	; (80a24b4 <bf2092_publish_sensor_data+0x200>)
 80a23a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a23ac:	ebb0 0802 	subs.w	r8, r0, r2
 80a23b0:	eb61 0903 	sbc.w	r9, r1, r3
 80a23b4:	4640      	mov	r0, r8
 80a23b6:	4649      	mov	r1, r9
 80a23b8:	f7fe fd2e 	bl	80a0e18 <__aeabi_ul2f>
 80a23bc:	ee06 0a90 	vmov	s13, r0
 80a23c0:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80a23c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80a23c8:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80a24b8 <bf2092_publish_sensor_data+0x204>
 80a23cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80a23d0:	2205      	movs	r2, #5
 80a23d2:	493a      	ldr	r1, [pc, #232]	; (80a24bc <bf2092_publish_sensor_data+0x208>)
 80a23d4:	483a      	ldr	r0, [pc, #232]	; (80a24c0 <bf2092_publish_sensor_data+0x20c>)
 80a23d6:	eeb0 0a67 	vmov.f32	s0, s15
 80a23da:	f7ff fbf9 	bl	80a1bd0 <streaming_median>
 80a23de:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
        yaverage = streaming_median(y / (current_timestamp - last_timestamp) * 1000, y_history_values, y_history_ages, maxCount);
 80a23e2:	4b30      	ldr	r3, [pc, #192]	; (80a24a4 <bf2092_publish_sensor_data+0x1f0>)
 80a23e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80a23e8:	4b32      	ldr	r3, [pc, #200]	; (80a24b4 <bf2092_publish_sensor_data+0x200>)
 80a23ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a23ee:	1a84      	subs	r4, r0, r2
 80a23f0:	eb61 0503 	sbc.w	r5, r1, r3
 80a23f4:	4620      	mov	r0, r4
 80a23f6:	4629      	mov	r1, r5
 80a23f8:	f7fe fd0e 	bl	80a0e18 <__aeabi_ul2f>
 80a23fc:	ee06 0a90 	vmov	s13, r0
 80a2400:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80a2404:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80a2408:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80a24b8 <bf2092_publish_sensor_data+0x204>
 80a240c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80a2410:	2205      	movs	r2, #5
 80a2412:	492c      	ldr	r1, [pc, #176]	; (80a24c4 <bf2092_publish_sensor_data+0x210>)
 80a2414:	482c      	ldr	r0, [pc, #176]	; (80a24c8 <bf2092_publish_sensor_data+0x214>)
 80a2416:	eeb0 0a67 	vmov.f32	s0, s15
 80a241a:	f7ff fbd9 	bl	80a1bd0 <streaming_median>
 80a241e:	ed87 0a16 	vstr	s0, [r7, #88]	; 0x58
        idx++;
 80a2422:	4b2a      	ldr	r3, [pc, #168]	; (80a24cc <bf2092_publish_sensor_data+0x218>)
 80a2424:	681b      	ldr	r3, [r3, #0]
 80a2426:	3301      	adds	r3, #1
 80a2428:	4a28      	ldr	r2, [pc, #160]	; (80a24cc <bf2092_publish_sensor_data+0x218>)
 80a242a:	6013      	str	r3, [r2, #0]
        if (idx == maxCount && complete_data_array_init == 0) {
 80a242c:	4b27      	ldr	r3, [pc, #156]	; (80a24cc <bf2092_publish_sensor_data+0x218>)
 80a242e:	681b      	ldr	r3, [r3, #0]
 80a2430:	2b05      	cmp	r3, #5
 80a2432:	d109      	bne.n	80a2448 <bf2092_publish_sensor_data+0x194>
 80a2434:	4b26      	ldr	r3, [pc, #152]	; (80a24d0 <bf2092_publish_sensor_data+0x21c>)
 80a2436:	681b      	ldr	r3, [r3, #0]
 80a2438:	2b00      	cmp	r3, #0
 80a243a:	d105      	bne.n	80a2448 <bf2092_publish_sensor_data+0x194>
          idx = 0;
 80a243c:	4b23      	ldr	r3, [pc, #140]	; (80a24cc <bf2092_publish_sensor_data+0x218>)
 80a243e:	2200      	movs	r2, #0
 80a2440:	601a      	str	r2, [r3, #0]
          complete_data_array_init = 1;
 80a2442:	4b23      	ldr	r3, [pc, #140]	; (80a24d0 <bf2092_publish_sensor_data+0x21c>)
 80a2444:	2201      	movs	r2, #1
 80a2446:	601a      	str	r2, [r3, #0]
        }
        if (idx == maxCount)
 80a2448:	4b20      	ldr	r3, [pc, #128]	; (80a24cc <bf2092_publish_sensor_data+0x218>)
 80a244a:	681b      	ldr	r3, [r3, #0]
 80a244c:	2b05      	cmp	r3, #5
 80a244e:	d102      	bne.n	80a2456 <bf2092_publish_sensor_data+0x1a2>
          idx = 0;
 80a2450:	4b1e      	ldr	r3, [pc, #120]	; (80a24cc <bf2092_publish_sensor_data+0x218>)
 80a2452:	2200      	movs	r2, #0
 80a2454:	601a      	str	r2, [r3, #0]

        if (complete_data_array_init) {
 80a2456:	4b1e      	ldr	r3, [pc, #120]	; (80a24d0 <bf2092_publish_sensor_data+0x21c>)
 80a2458:	681b      	ldr	r3, [r3, #0]
 80a245a:	2b00      	cmp	r3, #0
 80a245c:	d004      	beq.n	80a2468 <bf2092_publish_sensor_data+0x1b4>
          sensor_data.sensor_data_t.vec.data[0] = xaverage;
 80a245e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80a2460:	61bb      	str	r3, [r7, #24]
          sensor_data.sensor_data_t.vec.data[1] = yaverage;
 80a2462:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80a2464:	61fb      	str	r3, [r7, #28]
 80a2466:	e003      	b.n	80a2470 <bf2092_publish_sensor_data+0x1bc>
        } else {
          sensor_data.sensor_data_t.vec.data[0] = x;
 80a2468:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80a246a:	61bb      	str	r3, [r7, #24]
          sensor_data.sensor_data_t.vec.data[1] = y;
 80a246c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80a246e:	61fb      	str	r3, [r7, #28]
        }
        osMessageQueuePut(optical_init_parms->SensorDataQHandle, &sensor_data,
 80a2470:	4b18      	ldr	r3, [pc, #96]	; (80a24d4 <bf2092_publish_sensor_data+0x220>)
 80a2472:	681b      	ldr	r3, [r3, #0]
 80a2474:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 80a2478:	f107 0108 	add.w	r1, r7, #8
 80a247c:	2300      	movs	r3, #0
 80a247e:	2200      	movs	r2, #0
 80a2480:	f013 ffc0 	bl	80b6404 <osMessageQueuePut>
                        0, 0);
        last_timestamp = current_timestamp;
 80a2484:	4b07      	ldr	r3, [pc, #28]	; (80a24a4 <bf2092_publish_sensor_data+0x1f0>)
 80a2486:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a248a:	490a      	ldr	r1, [pc, #40]	; (80a24b4 <bf2092_publish_sensor_data+0x200>)
 80a248c:	e9c1 2300 	strd	r2, r3, [r1]
      }
    }
  }
  return 0;
 80a2490:	2300      	movs	r3, #0
}
 80a2492:	4618      	mov	r0, r3
 80a2494:	3768      	adds	r7, #104	; 0x68
 80a2496:	46bd      	mov	sp, r7
 80a2498:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80a249c:	20007ee5 	.word	0x20007ee5
 80a24a0:	20007ed4 	.word	0x20007ed4
 80a24a4:	20007ef0 	.word	0x20007ef0
 80a24a8:	20007000 	.word	0x20007000
 80a24ac:	20007ed0 	.word	0x20007ed0
 80a24b0:	3b347c74 	.word	0x3b347c74
 80a24b4:	20007ef8 	.word	0x20007ef8
 80a24b8:	447a0000 	.word	0x447a0000
 80a24bc:	20007f14 	.word	0x20007f14
 80a24c0:	20007f00 	.word	0x20007f00
 80a24c4:	20007f3c 	.word	0x20007f3c
 80a24c8:	20007f28 	.word	0x20007f28
 80a24cc:	20007eec 	.word	0x20007eec
 80a24d0:	20007ee8 	.word	0x20007ee8
 80a24d4:	20007ee0 	.word	0x20007ee0

080a24d8 <bf2092_init_complete>:

int bf2092_init_complete(void *para)
{
 80a24d8:	b480      	push	{r7}
 80a24da:	b083      	sub	sp, #12
 80a24dc:	af00      	add	r7, sp, #0
 80a24de:	6078      	str	r0, [r7, #4]
  return SENSOR_SUCCESS;
 80a24e0:	2300      	movs	r3, #0
}
 80a24e2:	4618      	mov	r0, r3
 80a24e4:	370c      	adds	r7, #12
 80a24e6:	46bd      	mov	sp, r7
 80a24e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a24ec:	4770      	bx	lr
	...

080a24f0 <bf2092_config>:

int bf2092_config(uint8_t config_type, void *para)
{
 80a24f0:	b580      	push	{r7, lr}
 80a24f2:	b084      	sub	sp, #16
 80a24f4:	af00      	add	r7, sp, #0
 80a24f6:	4603      	mov	r3, r0
 80a24f8:	6039      	str	r1, [r7, #0]
 80a24fa:	71fb      	strb	r3, [r7, #7]
  int res = SENSOR_SUCCESS;
 80a24fc:	2300      	movs	r3, #0
 80a24fe:	60fb      	str	r3, [r7, #12]
  uint8_t id_0, id_1;

  switch (config_type) {
 80a2500:	79fb      	ldrb	r3, [r7, #7]
 80a2502:	2b02      	cmp	r3, #2
 80a2504:	d11f      	bne.n	80a2546 <bf2092_config+0x56>
  case SENSOR_CONFIG_SELFTEST:
    /* Check device ID */
    bf2092_platform_read(optical_dev_ctx.handle, (uint8_t) BF2092_REG_PART_ID_0,
 80a2506:	4b14      	ldr	r3, [pc, #80]	; (80a2558 <bf2092_config+0x68>)
 80a2508:	6898      	ldr	r0, [r3, #8]
 80a250a:	f107 020b 	add.w	r2, r7, #11
 80a250e:	2301      	movs	r3, #1
 80a2510:	21fc      	movs	r1, #252	; 0xfc
 80a2512:	f7ff fc47 	bl	80a1da4 <bf2092_platform_read>
                         &id_0, 1);

    bf2092_platform_read(optical_dev_ctx.handle, (uint8_t) BF2092_REG_PART_ID_1,
 80a2516:	4b10      	ldr	r3, [pc, #64]	; (80a2558 <bf2092_config+0x68>)
 80a2518:	6898      	ldr	r0, [r3, #8]
 80a251a:	f107 020a 	add.w	r2, r7, #10
 80a251e:	2301      	movs	r3, #1
 80a2520:	21fd      	movs	r1, #253	; 0xfd
 80a2522:	f7ff fc3f 	bl	80a1da4 <bf2092_platform_read>
                         &id_1, 1);

    if (id_0 != BF2092_REG_PART_ID_0_VALUE
 80a2526:	7afb      	ldrb	r3, [r7, #11]
 80a2528:	2b20      	cmp	r3, #32
 80a252a:	d102      	bne.n	80a2532 <bf2092_config+0x42>
        || id_1 != BF2092_REG_PART_ID_1_VALUE) {
 80a252c:	7abb      	ldrb	r3, [r7, #10]
 80a252e:	2b92      	cmp	r3, #146	; 0x92
 80a2530:	d005      	beq.n	80a253e <bf2092_config+0x4e>
      printf("selftest failed for bf2092!\r\n");
 80a2532:	480a      	ldr	r0, [pc, #40]	; (80a255c <bf2092_config+0x6c>)
 80a2534:	f01e faba 	bl	80c0aac <puts>
      res = SENSOR_FAILED;
 80a2538:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a253c:	60fb      	str	r3, [r7, #12]
    }
    printf("selftest success for bf2092!\r\n");
 80a253e:	4808      	ldr	r0, [pc, #32]	; (80a2560 <bf2092_config+0x70>)
 80a2540:	f01e fab4 	bl	80c0aac <puts>
    break;
 80a2544:	e003      	b.n	80a254e <bf2092_config+0x5e>
  default:
    printf("unsupported config command\n\r");
 80a2546:	4807      	ldr	r0, [pc, #28]	; (80a2564 <bf2092_config+0x74>)
 80a2548:	f01e fa14 	bl	80c0974 <iprintf>
    break;
 80a254c:	bf00      	nop
  }
  return res;
 80a254e:	68fb      	ldr	r3, [r7, #12]
}
 80a2550:	4618      	mov	r0, r3
 80a2552:	3710      	adds	r7, #16
 80a2554:	46bd      	mov	sp, r7
 80a2556:	bd80      	pop	{r7, pc}
 80a2558:	20007ed4 	.word	0x20007ed4
 80a255c:	080c4e18 	.word	0x080c4e18
 80a2560:	080c4e38 	.word	0x080c4e38
 80a2564:	080c4e58 	.word	0x080c4e58

080a2568 <bf2092_publish_config_resp>:

int bf2092_publish_config_resp(void *para)
{
 80a2568:	b480      	push	{r7}
 80a256a:	b083      	sub	sp, #12
 80a256c:	af00      	add	r7, sp, #0
 80a256e:	6078      	str	r0, [r7, #4]
  //send init complete event to smgr?
  return SENSOR_SUCCESS;
 80a2570:	2300      	movs	r3, #0
}
 80a2572:	4618      	mov	r0, r3
 80a2574:	370c      	adds	r7, #12
 80a2576:	46bd      	mov	sp, r7
 80a2578:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a257c:	4770      	bx	lr
	...

080a2580 <light_platform_write>:
 * @param  len       number of consecutive register to write
 *
 */
static int32_t light_platform_write(void *handle, uint8_t reg, uint8_t * bufp,
                                    uint16_t len)
{
 80a2580:	b580      	push	{r7, lr}
 80a2582:	b088      	sub	sp, #32
 80a2584:	af04      	add	r7, sp, #16
 80a2586:	60f8      	str	r0, [r7, #12]
 80a2588:	607a      	str	r2, [r7, #4]
 80a258a:	461a      	mov	r2, r3
 80a258c:	460b      	mov	r3, r1
 80a258e:	72fb      	strb	r3, [r7, #11]
 80a2590:	4613      	mov	r3, r2
 80a2592:	813b      	strh	r3, [r7, #8]
  if (handle == &light_init_parms->i2c_handle) {
 80a2594:	4b0c      	ldr	r3, [pc, #48]	; (80a25c8 <light_platform_write+0x48>)
 80a2596:	681b      	ldr	r3, [r3, #0]
 80a2598:	3304      	adds	r3, #4
 80a259a:	68fa      	ldr	r2, [r7, #12]
 80a259c:	429a      	cmp	r2, r3
 80a259e:	d10d      	bne.n	80a25bc <light_platform_write+0x3c>
    //printf("start i2c write, \r\n");
    HAL_I2C_Mem_Write(handle, (uint16_t) BU27030_I2C_COMUNICATE_ADD, reg,
 80a25a0:	7afb      	ldrb	r3, [r7, #11]
 80a25a2:	b29a      	uxth	r2, r3
 80a25a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a25a8:	9302      	str	r3, [sp, #8]
 80a25aa:	893b      	ldrh	r3, [r7, #8]
 80a25ac:	9301      	str	r3, [sp, #4]
 80a25ae:	687b      	ldr	r3, [r7, #4]
 80a25b0:	9300      	str	r3, [sp, #0]
 80a25b2:	2301      	movs	r3, #1
 80a25b4:	2170      	movs	r1, #112	; 0x70
 80a25b6:	68f8      	ldr	r0, [r7, #12]
 80a25b8:	f00f fd00 	bl	80b1fbc <HAL_I2C_Mem_Write>
                      I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  }

  return 0;
 80a25bc:	2300      	movs	r3, #0
}
 80a25be:	4618      	mov	r0, r3
 80a25c0:	3710      	adds	r7, #16
 80a25c2:	46bd      	mov	sp, r7
 80a25c4:	bd80      	pop	{r7, pc}
 80a25c6:	bf00      	nop
 80a25c8:	20007f64 	.word	0x20007f64

080a25cc <light_platform_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t light_platform_read(void *handle, uint8_t reg, uint8_t * bufp,
                                   uint16_t len)
{
 80a25cc:	b580      	push	{r7, lr}
 80a25ce:	b088      	sub	sp, #32
 80a25d0:	af04      	add	r7, sp, #16
 80a25d2:	60f8      	str	r0, [r7, #12]
 80a25d4:	607a      	str	r2, [r7, #4]
 80a25d6:	461a      	mov	r2, r3
 80a25d8:	460b      	mov	r3, r1
 80a25da:	72fb      	strb	r3, [r7, #11]
 80a25dc:	4613      	mov	r3, r2
 80a25de:	813b      	strh	r3, [r7, #8]
  if (handle == &light_init_parms->i2c_handle) {
 80a25e0:	4b0c      	ldr	r3, [pc, #48]	; (80a2614 <light_platform_read+0x48>)
 80a25e2:	681b      	ldr	r3, [r3, #0]
 80a25e4:	3304      	adds	r3, #4
 80a25e6:	68fa      	ldr	r2, [r7, #12]
 80a25e8:	429a      	cmp	r2, r3
 80a25ea:	d10d      	bne.n	80a2608 <light_platform_read+0x3c>
    //printf("start i2c read, \r\n");
    HAL_I2C_Mem_Read(handle, (uint16_t) BU27030_I2C_COMUNICATE_ADD, reg,
 80a25ec:	7afb      	ldrb	r3, [r7, #11]
 80a25ee:	b29a      	uxth	r2, r3
 80a25f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a25f4:	9302      	str	r3, [sp, #8]
 80a25f6:	893b      	ldrh	r3, [r7, #8]
 80a25f8:	9301      	str	r3, [sp, #4]
 80a25fa:	687b      	ldr	r3, [r7, #4]
 80a25fc:	9300      	str	r3, [sp, #0]
 80a25fe:	2301      	movs	r3, #1
 80a2600:	2170      	movs	r1, #112	; 0x70
 80a2602:	68f8      	ldr	r0, [r7, #12]
 80a2604:	f00f fdd4 	bl	80b21b0 <HAL_I2C_Mem_Read>
                     I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  }

  return 0;
 80a2608:	2300      	movs	r3, #0
}
 80a260a:	4618      	mov	r0, r3
 80a260c:	3710      	adds	r7, #16
 80a260e:	46bd      	mov	sp, r7
 80a2610:	bd80      	pop	{r7, pc}
 80a2612:	bf00      	nop
 80a2614:	20007f64 	.word	0x20007f64

080a2618 <platform_delay>:
 *
 * @param  ms        delay in ms
 *
 */
static void platform_delay(uint32_t ms)
{
 80a2618:	b580      	push	{r7, lr}
 80a261a:	b082      	sub	sp, #8
 80a261c:	af00      	add	r7, sp, #0
 80a261e:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 80a2620:	6878      	ldr	r0, [r7, #4]
 80a2622:	f00d f813 	bl	80af64c <HAL_Delay>
}
 80a2626:	bf00      	nop
 80a2628:	3708      	adds	r7, #8
 80a262a:	46bd      	mov	sp, r7
 80a262c:	bd80      	pop	{r7, pc}

080a262e <bu27030_driver_reset>:
 * NAME       : bu27030_driver_reset
 * FUNCTION   : reset BU27030 register
 * REMARKS    :
 *****************************************************************************/
static int bu27030_driver_reset(stmdev_ctx_t * ctx)
{
 80a262e:	b580      	push	{r7, lr}
 80a2630:	b084      	sub	sp, #16
 80a2632:	af00      	add	r7, sp, #0
 80a2634:	6078      	str	r0, [r7, #4]
  int result = 0;
 80a2636:	2300      	movs	r3, #0
 80a2638:	60fb      	str	r3, [r7, #12]
  /* set soft reset */
  uint8_t BU27030_RST = (1 << 7);
 80a263a:	2380      	movs	r3, #128	; 0x80
 80a263c:	72fb      	strb	r3, [r7, #11]
  result |= light_platform_write(ctx->handle, BU27030_REG_SOFT_RST,
 80a263e:	687b      	ldr	r3, [r7, #4]
 80a2640:	6898      	ldr	r0, [r3, #8]
 80a2642:	f107 020b 	add.w	r2, r7, #11
 80a2646:	2301      	movs	r3, #1
 80a2648:	2140      	movs	r1, #64	; 0x40
 80a264a:	f7ff ff99 	bl	80a2580 <light_platform_write>
 80a264e:	4602      	mov	r2, r0
 80a2650:	68fb      	ldr	r3, [r7, #12]
 80a2652:	4313      	orrs	r3, r2
 80a2654:	60fb      	str	r3, [r7, #12]
                                 &BU27030_RST, 1);
  return (result);
 80a2656:	68fb      	ldr	r3, [r7, #12]
}
 80a2658:	4618      	mov	r0, r3
 80a265a:	3710      	adds	r7, #16
 80a265c:	46bd      	mov	sp, r7
 80a265e:	bd80      	pop	{r7, pc}

080a2660 <bu27030_init_client>:

/*************** Initialze Functions ******************/
static int bu27030_init_client(stmdev_ctx_t * ctx)
{
 80a2660:	b580      	push	{r7, lr}
 80a2662:	b084      	sub	sp, #16
 80a2664:	af00      	add	r7, sp, #0
 80a2666:	6078      	str	r0, [r7, #4]
  int result = 0;
 80a2668:	2300      	movs	r3, #0
 80a266a:	60fb      	str	r3, [r7, #12]

  /* execute software reset */
  result = bu27030_driver_reset(ctx);
 80a266c:	6878      	ldr	r0, [r7, #4]
 80a266e:	f7ff ffde 	bl	80a262e <bu27030_driver_reset>
 80a2672:	60f8      	str	r0, [r7, #12]
  if (result != 0) {
 80a2674:	68fb      	ldr	r3, [r7, #12]
 80a2676:	2b00      	cmp	r3, #0
 80a2678:	d001      	beq.n	80a267e <bu27030_init_client+0x1e>
    return (result);
 80a267a:	68fb      	ldr	r3, [r7, #12]
 80a267c:	e01d      	b.n	80a26ba <bu27030_init_client+0x5a>
  }
  uint8_t MEASURE_100MS = 0;    //100ms
 80a267e:	2300      	movs	r3, #0
 80a2680:	72fb      	strb	r3, [r7, #11]
  uint8_t MEASURE_DEFAULT_GAIN = (0x02 << 4) | (0x02);
 80a2682:	2322      	movs	r3, #34	; 0x22
 80a2684:	72bb      	strb	r3, [r7, #10]

  result = light_platform_write(ctx->handle, BU27030_REG_TIMING,
 80a2686:	687b      	ldr	r3, [r7, #4]
 80a2688:	6898      	ldr	r0, [r3, #8]
 80a268a:	f107 020b 	add.w	r2, r7, #11
 80a268e:	2301      	movs	r3, #1
 80a2690:	2141      	movs	r1, #65	; 0x41
 80a2692:	f7ff ff75 	bl	80a2580 <light_platform_write>
 80a2696:	60f8      	str	r0, [r7, #12]
                                &MEASURE_100MS, 1);
  if (result == 0) {
 80a2698:	68fb      	ldr	r3, [r7, #12]
 80a269a:	2b00      	cmp	r3, #0
 80a269c:	d109      	bne.n	80a26b2 <bu27030_init_client+0x52>
    //gain0 gain1 : 1X, 1X
    result = light_platform_write(ctx->handle, BU27030_REG_GAIN,
 80a269e:	687b      	ldr	r3, [r7, #4]
 80a26a0:	6898      	ldr	r0, [r3, #8]
 80a26a2:	f107 020a 	add.w	r2, r7, #10
 80a26a6:	2301      	movs	r3, #1
 80a26a8:	2142      	movs	r1, #66	; 0x42
 80a26aa:	f7ff ff69 	bl	80a2580 <light_platform_write>
 80a26ae:	60f8      	str	r0, [r7, #12]
 80a26b0:	e002      	b.n	80a26b8 <bu27030_init_client+0x58>
                                  &MEASURE_DEFAULT_GAIN, 1);
  } else {
    printf(" I2c write failed! \r\n");
 80a26b2:	4804      	ldr	r0, [pc, #16]	; (80a26c4 <bu27030_init_client+0x64>)
 80a26b4:	f01e f9fa 	bl	80c0aac <puts>
  }

  return (result);
 80a26b8:	68fb      	ldr	r3, [r7, #12]
}
 80a26ba:	4618      	mov	r0, r3
 80a26bc:	3710      	adds	r7, #16
 80a26be:	46bd      	mov	sp, r7
 80a26c0:	bd80      	pop	{r7, pc}
 80a26c2:	bf00      	nop
 80a26c4:	080c4e78 	.word	0x080c4e78

080a26c8 <bu27030_calculate_light>:
 *
 * @Returns: lux value or failed.
 */
static int bu27030_calculate_light(READ_DATA_ARG data, unsigned char gain,
                                   unsigned char time)
{
 80a26c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a26ca:	b093      	sub	sp, #76	; 0x4c
 80a26cc:	af06      	add	r7, sp, #24
 80a26ce:	f107 0408 	add.w	r4, r7, #8
 80a26d2:	e884 0003 	stmia.w	r4, {r0, r1}
 80a26d6:	4611      	mov	r1, r2
 80a26d8:	461a      	mov	r2, r3
 80a26da:	460b      	mov	r3, r1
 80a26dc:	71fb      	strb	r3, [r7, #7]
 80a26de:	4613      	mov	r3, r2
 80a26e0:	71bb      	strb	r3, [r7, #6]
  float lx, tmp1, tmp2;
  CALC_DATA calculated_data;

  /* set the value of measured als data */
  calculated_data.als_time = time_table[time & 0x1];
 80a26e2:	79bb      	ldrb	r3, [r7, #6]
 80a26e4:	f003 0301 	and.w	r3, r3, #1
 80a26e8:	4ab4      	ldr	r2, [pc, #720]	; (80a29bc <bu27030_calculate_light+0x2f4>)
 80a26ea:	5cd3      	ldrb	r3, [r2, r3]
 80a26ec:	753b      	strb	r3, [r7, #20]
  calculated_data.gain0 = gain_table[gain >> 4];
 80a26ee:	79fb      	ldrb	r3, [r7, #7]
 80a26f0:	091b      	lsrs	r3, r3, #4
 80a26f2:	b2db      	uxtb	r3, r3
 80a26f4:	461a      	mov	r2, r3
 80a26f6:	4bb2      	ldr	r3, [pc, #712]	; (80a29c0 <bu27030_calculate_light+0x2f8>)
 80a26f8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80a26fc:	82fb      	strh	r3, [r7, #22]
  calculated_data.gain1 = gain_table[gain & DATA1_GAIN_MASK];
 80a26fe:	79fb      	ldrb	r3, [r7, #7]
 80a2700:	f003 030f 	and.w	r3, r3, #15
 80a2704:	4aae      	ldr	r2, [pc, #696]	; (80a29c0 <bu27030_calculate_light+0x2f8>)
 80a2706:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80a270a:	833b      	strh	r3, [r7, #24]
  calculated_data.als_data0 = data.data0;
 80a270c:	68bb      	ldr	r3, [r7, #8]
 80a270e:	61fb      	str	r3, [r7, #28]
  calculated_data.als_data1 = data.data1;
 80a2710:	68fb      	ldr	r3, [r7, #12]
 80a2712:	623b      	str	r3, [r7, #32]

  if (data.data0 == 0xFFFF) {
 80a2714:	68bb      	ldr	r3, [r7, #8]
 80a2716:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a271a:	4293      	cmp	r3, r2
 80a271c:	d105      	bne.n	80a272a <bu27030_calculate_light+0x62>
    printf("Data0 is 0xFFFF, return max lux 65535.\r\n");
 80a271e:	48a9      	ldr	r0, [pc, #676]	; (80a29c4 <bu27030_calculate_light+0x2fc>)
 80a2720:	f01e f9c4 	bl	80c0aac <puts>
    return 65535;
 80a2724:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80a2728:	e143      	b.n	80a29b2 <bu27030_calculate_light+0x2ea>
  }

  if (!calculated_data.als_time || !calculated_data.gain0
 80a272a:	7d3b      	ldrb	r3, [r7, #20]
 80a272c:	2b00      	cmp	r3, #0
 80a272e:	d005      	beq.n	80a273c <bu27030_calculate_light+0x74>
 80a2730:	8afb      	ldrh	r3, [r7, #22]
 80a2732:	2b00      	cmp	r3, #0
 80a2734:	d002      	beq.n	80a273c <bu27030_calculate_light+0x74>
      || !calculated_data.gain1) {
 80a2736:	8b3b      	ldrh	r3, [r7, #24]
 80a2738:	2b00      	cmp	r3, #0
 80a273a:	d109      	bne.n	80a2750 <bu27030_calculate_light+0x88>
    printf("parameter error, als_time:%d, gain0:%d, gain1:%d",
           calculated_data.als_time, calculated_data.gain0,
 80a273c:	7d3b      	ldrb	r3, [r7, #20]
    printf("parameter error, als_time:%d, gain0:%d, gain1:%d",
 80a273e:	4619      	mov	r1, r3
           calculated_data.als_time, calculated_data.gain0,
 80a2740:	8afb      	ldrh	r3, [r7, #22]
    printf("parameter error, als_time:%d, gain0:%d, gain1:%d",
 80a2742:	461a      	mov	r2, r3
           calculated_data.gain1);
 80a2744:	8b3b      	ldrh	r3, [r7, #24]
    printf("parameter error, als_time:%d, gain0:%d, gain1:%d",
 80a2746:	48a0      	ldr	r0, [pc, #640]	; (80a29c8 <bu27030_calculate_light+0x300>)
 80a2748:	f01e f914 	bl	80c0974 <iprintf>
    return 0;
 80a274c:	2300      	movs	r3, #0
 80a274e:	e130      	b.n	80a29b2 <bu27030_calculate_light+0x2ea>
  }

  calculated_data.als_data0 = data.data0 * DATA_TRANSFER_COFF
 80a2750:	68bb      	ldr	r3, [r7, #8]
 80a2752:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 80a2756:	fb02 f303 	mul.w	r3, r2, r3
      / calculated_data.als_time / calculated_data.gain0;
 80a275a:	7d3a      	ldrb	r2, [r7, #20]
 80a275c:	fbb3 f3f2 	udiv	r3, r3, r2
 80a2760:	8afa      	ldrh	r2, [r7, #22]
 80a2762:	fbb3 f3f2 	udiv	r3, r3, r2
  calculated_data.als_data0 = data.data0 * DATA_TRANSFER_COFF
 80a2766:	61fb      	str	r3, [r7, #28]
  calculated_data.als_data1 = data.data1 * DATA_TRANSFER_COFF
 80a2768:	68fb      	ldr	r3, [r7, #12]
 80a276a:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 80a276e:	fb02 f303 	mul.w	r3, r2, r3
      / calculated_data.als_time / calculated_data.gain1;
 80a2772:	7d3a      	ldrb	r2, [r7, #20]
 80a2774:	fbb3 f3f2 	udiv	r3, r3, r2
 80a2778:	8b3a      	ldrh	r2, [r7, #24]
 80a277a:	fbb3 f3f2 	udiv	r3, r3, r2
  calculated_data.als_data1 = data.data1 * DATA_TRANSFER_COFF
 80a277e:	623b      	str	r3, [r7, #32]

  if (calculated_data.als_data1 <
 80a2780:	6a3b      	ldr	r3, [r7, #32]
 80a2782:	ee07 3a90 	vmov	s15, r3
 80a2786:	eeb8 7a67 	vcvt.f32.u32	s14, s15
      calculated_data.als_data0 * data_coefficient[0]) {
 80a278a:	69fb      	ldr	r3, [r7, #28]
 80a278c:	ee07 3a90 	vmov	s15, r3
 80a2790:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80a2794:	eddf 6a8d 	vldr	s13, [pc, #564]	; 80a29cc <bu27030_calculate_light+0x304>
 80a2798:	ee67 7aa6 	vmul.f32	s15, s15, s13
  if (calculated_data.als_data1 <
 80a279c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80a27a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80a27a4:	d52c      	bpl.n	80a2800 <bu27030_calculate_light+0x138>
    tmp1 =
        data_coefficient[1] * calculated_data.als_data0 +
 80a27a6:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 80a29d0 <bu27030_calculate_light+0x308>
 80a27aa:	69fb      	ldr	r3, [r7, #28]
 80a27ac:	ee07 3a90 	vmov	s15, r3
 80a27b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80a27b4:	ee27 7a27 	vmul.f32	s14, s14, s15
        data_coefficient[2] * calculated_data.als_data1;
 80a27b8:	eddf 6a86 	vldr	s13, [pc, #536]	; 80a29d4 <bu27030_calculate_light+0x30c>
 80a27bc:	6a3b      	ldr	r3, [r7, #32]
 80a27be:	ee07 3a90 	vmov	s15, r3
 80a27c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80a27c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
    tmp1 =
 80a27ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80a27ce:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    tmp2 =
        ((calculated_data.als_data1 / calculated_data.als_data0 -
 80a27d2:	6a3a      	ldr	r2, [r7, #32]
 80a27d4:	69fb      	ldr	r3, [r7, #28]
 80a27d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80a27da:	ee07 3a90 	vmov	s15, r3
 80a27de:	eef8 7a67 	vcvt.f32.u32	s15, s15
          data_coefficient[3]) * data_coefficient[4] + 1.0);
 80a27e2:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80a29d8 <bu27030_calculate_light+0x310>
        ((calculated_data.als_data1 / calculated_data.als_data0 -
 80a27e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
          data_coefficient[3]) * data_coefficient[4] + 1.0);
 80a27ea:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 80a29dc <bu27030_calculate_light+0x314>
 80a27ee:	ee67 7a87 	vmul.f32	s15, s15, s14
    tmp2 =
 80a27f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80a27f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80a27fa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 80a27fe:	e0ab      	b.n	80a2958 <bu27030_calculate_light+0x290>
  } else if (calculated_data.als_data1 <
 80a2800:	6a3b      	ldr	r3, [r7, #32]
 80a2802:	ee07 3a90 	vmov	s15, r3
 80a2806:	eeb8 7a67 	vcvt.f32.u32	s14, s15
             calculated_data.als_data0 * data_coefficient[5]) {
 80a280a:	69fb      	ldr	r3, [r7, #28]
 80a280c:	ee07 3a90 	vmov	s15, r3
 80a2810:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80a2814:	eddf 6a72 	vldr	s13, [pc, #456]	; 80a29e0 <bu27030_calculate_light+0x318>
 80a2818:	ee67 7aa6 	vmul.f32	s15, s15, s13
  } else if (calculated_data.als_data1 <
 80a281c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80a2820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80a2824:	d52c      	bpl.n	80a2880 <bu27030_calculate_light+0x1b8>
    tmp1 =
        data_coefficient[6] * calculated_data.als_data0 +
 80a2826:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 80a29d0 <bu27030_calculate_light+0x308>
 80a282a:	69fb      	ldr	r3, [r7, #28]
 80a282c:	ee07 3a90 	vmov	s15, r3
 80a2830:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80a2834:	ee27 7a27 	vmul.f32	s14, s14, s15
        data_coefficient[7] * calculated_data.als_data1;
 80a2838:	eddf 6a66 	vldr	s13, [pc, #408]	; 80a29d4 <bu27030_calculate_light+0x30c>
 80a283c:	6a3b      	ldr	r3, [r7, #32]
 80a283e:	ee07 3a90 	vmov	s15, r3
 80a2842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80a2846:	ee66 7aa7 	vmul.f32	s15, s13, s15
    tmp1 =
 80a284a:	ee77 7a27 	vadd.f32	s15, s14, s15
 80a284e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    tmp2 =
        ((calculated_data.als_data1 / calculated_data.als_data0 -
 80a2852:	6a3a      	ldr	r2, [r7, #32]
 80a2854:	69fb      	ldr	r3, [r7, #28]
 80a2856:	fbb2 f3f3 	udiv	r3, r2, r3
 80a285a:	ee07 3a90 	vmov	s15, r3
 80a285e:	eef8 7a67 	vcvt.f32.u32	s15, s15
          data_coefficient[8]) * data_coefficient[9] + 1.0);
 80a2862:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80a29d8 <bu27030_calculate_light+0x310>
        ((calculated_data.als_data1 / calculated_data.als_data0 -
 80a2866:	ee77 7ac7 	vsub.f32	s15, s15, s14
          data_coefficient[8]) * data_coefficient[9] + 1.0);
 80a286a:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80a29e4 <bu27030_calculate_light+0x31c>
 80a286e:	ee67 7a87 	vmul.f32	s15, s15, s14
    tmp2 =
 80a2872:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80a2876:	ee77 7a87 	vadd.f32	s15, s15, s14
 80a287a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 80a287e:	e06b      	b.n	80a2958 <bu27030_calculate_light+0x290>
  } else if (calculated_data.als_data1 <
 80a2880:	6a3b      	ldr	r3, [r7, #32]
 80a2882:	ee07 3a90 	vmov	s15, r3
 80a2886:	eeb8 7a67 	vcvt.f32.u32	s14, s15
             calculated_data.als_data0 * data_coefficient[10]) {
 80a288a:	69fb      	ldr	r3, [r7, #28]
 80a288c:	ee07 3a90 	vmov	s15, r3
 80a2890:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80a2894:	eddf 6a54 	vldr	s13, [pc, #336]	; 80a29e8 <bu27030_calculate_light+0x320>
 80a2898:	ee67 7aa6 	vmul.f32	s15, s15, s13
  } else if (calculated_data.als_data1 <
 80a289c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80a28a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80a28a4:	d52c      	bpl.n	80a2900 <bu27030_calculate_light+0x238>
    tmp1 =
        data_coefficient[11] * calculated_data.als_data0 +
 80a28a6:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80a29d0 <bu27030_calculate_light+0x308>
 80a28aa:	69fb      	ldr	r3, [r7, #28]
 80a28ac:	ee07 3a90 	vmov	s15, r3
 80a28b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80a28b4:	ee27 7a27 	vmul.f32	s14, s14, s15
        data_coefficient[12] * calculated_data.als_data1;
 80a28b8:	eddf 6a4c 	vldr	s13, [pc, #304]	; 80a29ec <bu27030_calculate_light+0x324>
 80a28bc:	6a3b      	ldr	r3, [r7, #32]
 80a28be:	ee07 3a90 	vmov	s15, r3
 80a28c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80a28c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
    tmp1 =
 80a28ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80a28ce:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    tmp2 =
        ((calculated_data.als_data1 / calculated_data.als_data0 -
 80a28d2:	6a3a      	ldr	r2, [r7, #32]
 80a28d4:	69fb      	ldr	r3, [r7, #28]
 80a28d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80a28da:	ee07 3a90 	vmov	s15, r3
 80a28de:	eef8 7a67 	vcvt.f32.u32	s15, s15
          data_coefficient[13]) * data_coefficient[14] + 1.0);
 80a28e2:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80a29f0 <bu27030_calculate_light+0x328>
        ((calculated_data.als_data1 / calculated_data.als_data0 -
 80a28e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
          data_coefficient[13]) * data_coefficient[14] + 1.0);
 80a28ea:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 80a28ee:	ee67 7a87 	vmul.f32	s15, s15, s14
    tmp2 =
 80a28f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80a28f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80a28fa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 80a28fe:	e02b      	b.n	80a2958 <bu27030_calculate_light+0x290>
  } else {
    tmp1 =
        data_coefficient[15] * calculated_data.als_data0 +
 80a2900:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80a29d0 <bu27030_calculate_light+0x308>
 80a2904:	69fb      	ldr	r3, [r7, #28]
 80a2906:	ee07 3a90 	vmov	s15, r3
 80a290a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80a290e:	ee27 7a27 	vmul.f32	s14, s14, s15
        data_coefficient[16] * calculated_data.als_data1;
 80a2912:	eddf 6a36 	vldr	s13, [pc, #216]	; 80a29ec <bu27030_calculate_light+0x324>
 80a2916:	6a3b      	ldr	r3, [r7, #32]
 80a2918:	ee07 3a90 	vmov	s15, r3
 80a291c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80a2920:	ee66 7aa7 	vmul.f32	s15, s13, s15
    tmp1 =
 80a2924:	ee77 7a27 	vadd.f32	s15, s14, s15
 80a2928:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    tmp2 =
        ((calculated_data.als_data1 / calculated_data.als_data0 -
 80a292c:	6a3a      	ldr	r2, [r7, #32]
 80a292e:	69fb      	ldr	r3, [r7, #28]
 80a2930:	fbb2 f3f3 	udiv	r3, r2, r3
 80a2934:	ee07 3a90 	vmov	s15, r3
 80a2938:	eef8 7a67 	vcvt.f32.u32	s15, s15
          data_coefficient[17]) * data_coefficient[18] + 1.0);
 80a293c:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80a29f4 <bu27030_calculate_light+0x32c>
        ((calculated_data.als_data1 / calculated_data.als_data0 -
 80a2940:	ee77 7ac7 	vsub.f32	s15, s15, s14
          data_coefficient[17]) * data_coefficient[18] + 1.0);
 80a2944:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80a29f8 <bu27030_calculate_light+0x330>
 80a2948:	ee67 7a87 	vmul.f32	s15, s15, s14
    tmp2 =
 80a294c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80a2950:	ee77 7a87 	vadd.f32	s15, s15, s14
 80a2954:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  }

  lx = tmp1 * tmp2;
 80a2958:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80a295c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80a2960:	ee67 7a27 	vmul.f32	s15, s14, s15
 80a2964:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

  if (lx < 0) {
 80a2968:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80a296c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80a2970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80a2974:	d505      	bpl.n	80a2982 <bu27030_calculate_light+0x2ba>
    lx = 0;
 80a2976:	f04f 0300 	mov.w	r3, #0
 80a297a:	62fb      	str	r3, [r7, #44]	; 0x2c
    printf("lx is minus, error!!!\r\n");
 80a297c:	481f      	ldr	r0, [pc, #124]	; (80a29fc <bu27030_calculate_light+0x334>)
 80a297e:	f01e f895 	bl	80c0aac <puts>
  }

  printf("lux:%ld, data0=%d, data1=%d, gain0=%d, gain1=%d, als_time:%d\r\n",
 80a2982:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80a2984:	f7fd fde0 	bl	80a0548 <__aeabi_f2d>
 80a2988:	4602      	mov	r2, r0
 80a298a:	460b      	mov	r3, r1
 80a298c:	68b9      	ldr	r1, [r7, #8]
 80a298e:	68f8      	ldr	r0, [r7, #12]
         lx, data.data0, data.data1, calculated_data.gain0,
 80a2990:	8afc      	ldrh	r4, [r7, #22]
         calculated_data.gain1, calculated_data.als_time);
 80a2992:	8b3d      	ldrh	r5, [r7, #24]
 80a2994:	7d3e      	ldrb	r6, [r7, #20]
  printf("lux:%ld, data0=%d, data1=%d, gain0=%d, gain1=%d, als_time:%d\r\n",
 80a2996:	9604      	str	r6, [sp, #16]
 80a2998:	9503      	str	r5, [sp, #12]
 80a299a:	9402      	str	r4, [sp, #8]
 80a299c:	9001      	str	r0, [sp, #4]
 80a299e:	9100      	str	r1, [sp, #0]
 80a29a0:	4817      	ldr	r0, [pc, #92]	; (80a2a00 <bu27030_calculate_light+0x338>)
 80a29a2:	f01d ffe7 	bl	80c0974 <iprintf>

  return (int)(lx);
 80a29a6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80a29aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80a29ae:	ee17 3a90 	vmov	r3, s15
}
 80a29b2:	4618      	mov	r0, r3
 80a29b4:	3734      	adds	r7, #52	; 0x34
 80a29b6:	46bd      	mov	sp, r7
 80a29b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a29ba:	bf00      	nop
 80a29bc:	080c77b0 	.word	0x080c77b0
 80a29c0:	080c77b4 	.word	0x080c77b4
 80a29c4:	080c4e90 	.word	0x080c4e90
 80a29c8:	080c4eb8 	.word	0x080c4eb8
 80a29cc:	3e947ae1 	.word	0x3e947ae1
 80a29d0:	3ad7be98 	.word	0x3ad7be98
 80a29d4:	b984a516 	.word	0xb984a516
 80a29d8:	be947ae1 	.word	0xbe947ae1
 80a29dc:	00000000 	.word	0x00000000
 80a29e0:	3eb33333 	.word	0x3eb33333
 80a29e4:	40baa7f0 	.word	0x40baa7f0
 80a29e8:	3ecccccd 	.word	0x3ecccccd
 80a29ec:	bb25ce5b 	.word	0xbb25ce5b
 80a29f0:	be91eb85 	.word	0xbe91eb85
 80a29f4:	be96872b 	.word	0xbe96872b
 80a29f8:	bfb56042 	.word	0xbfb56042
 80a29fc:	080c4eec 	.word	0x080c4eec
 80a2a00:	080c4f04 	.word	0x080c4f04

080a2a04 <bu27030_auto_change_gain0>:

int bu27030_auto_change_gain0(stmdev_ctx_t * ctx, unsigned int data0)
{
 80a2a04:	b580      	push	{r7, lr}
 80a2a06:	b084      	sub	sp, #16
 80a2a08:	af00      	add	r7, sp, #0
 80a2a0a:	6078      	str	r0, [r7, #4]
 80a2a0c:	6039      	str	r1, [r7, #0]
  unsigned char target_gain = 0;
 80a2a0e:	2300      	movs	r3, #0
 80a2a10:	727b      	strb	r3, [r7, #9]
  unsigned short curret_gain0 = 0;
 80a2a12:	2300      	movs	r3, #0
 80a2a14:	817b      	strh	r3, [r7, #10]
  uint8_t buffer;

  int gain_changed = 0;
 80a2a16:	2300      	movs	r3, #0
 80a2a18:	60fb      	str	r3, [r7, #12]

  if (!ctx) {
 80a2a1a:	687b      	ldr	r3, [r7, #4]
 80a2a1c:	2b00      	cmp	r3, #0
 80a2a1e:	d104      	bne.n	80a2a2a <bu27030_auto_change_gain0+0x26>
    printf("Parameter error !!! \r\n");
 80a2a20:	4838      	ldr	r0, [pc, #224]	; (80a2b04 <bu27030_auto_change_gain0+0x100>)
 80a2a22:	f01e f843 	bl	80c0aac <puts>
    return gain_changed;
 80a2a26:	68fb      	ldr	r3, [r7, #12]
 80a2a28:	e068      	b.n	80a2afc <bu27030_auto_change_gain0+0xf8>
  }
  //get gain reg_value
  light_platform_read(ctx->handle, BU27030_REG_GAIN, &buffer, 1);
 80a2a2a:	687b      	ldr	r3, [r7, #4]
 80a2a2c:	6898      	ldr	r0, [r3, #8]
 80a2a2e:	f107 0208 	add.w	r2, r7, #8
 80a2a32:	2301      	movs	r3, #1
 80a2a34:	2142      	movs	r1, #66	; 0x42
 80a2a36:	f7ff fdc9 	bl	80a25cc <light_platform_read>
  if (buffer < 0) {
    printf("Read data from IC error.\r\n");
    return gain_changed;
  }
  //gain0
  curret_gain0 = gain_table[buffer >> 4];
 80a2a3a:	7a3b      	ldrb	r3, [r7, #8]
 80a2a3c:	091b      	lsrs	r3, r3, #4
 80a2a3e:	b2db      	uxtb	r3, r3
 80a2a40:	461a      	mov	r2, r3
 80a2a42:	4b31      	ldr	r3, [pc, #196]	; (80a2b08 <bu27030_auto_change_gain0+0x104>)
 80a2a44:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80a2a48:	817b      	strh	r3, [r7, #10]
  if (data0 > BU27030_SATURATION_THRESH) {
 80a2a4a:	683b      	ldr	r3, [r7, #0]
 80a2a4c:	f64e 2260 	movw	r2, #60000	; 0xea60
 80a2a50:	4293      	cmp	r3, r2
 80a2a52:	d91b      	bls.n	80a2a8c <bu27030_auto_change_gain0+0x88>
    if (curret_gain0 > BU27030_32X) {   //current is  256X
 80a2a54:	897b      	ldrh	r3, [r7, #10]
 80a2a56:	2b20      	cmp	r3, #32
 80a2a58:	d90a      	bls.n	80a2a70 <bu27030_auto_change_gain0+0x6c>
      target_gain = DATA0_GAIN_X32 | (buffer & DATA1_GAIN_MASK);
 80a2a5a:	7a3b      	ldrb	r3, [r7, #8]
 80a2a5c:	b25b      	sxtb	r3, r3
 80a2a5e:	f003 030f 	and.w	r3, r3, #15
 80a2a62:	b25b      	sxtb	r3, r3
 80a2a64:	f063 035f 	orn	r3, r3, #95	; 0x5f
 80a2a68:	b25b      	sxtb	r3, r3
 80a2a6a:	b2db      	uxtb	r3, r3
 80a2a6c:	727b      	strb	r3, [r7, #9]
 80a2a6e:	e02b      	b.n	80a2ac8 <bu27030_auto_change_gain0+0xc4>
    } else if (curret_gain0 > BU27030_1X) {     //current is 32X
 80a2a70:	897b      	ldrh	r3, [r7, #10]
 80a2a72:	2b01      	cmp	r3, #1
 80a2a74:	d928      	bls.n	80a2ac8 <bu27030_auto_change_gain0+0xc4>
      target_gain = DATA0_GAIN_X1 | (buffer & DATA1_GAIN_MASK);
 80a2a76:	7a3b      	ldrb	r3, [r7, #8]
 80a2a78:	b25b      	sxtb	r3, r3
 80a2a7a:	f003 030f 	and.w	r3, r3, #15
 80a2a7e:	b25b      	sxtb	r3, r3
 80a2a80:	f043 0320 	orr.w	r3, r3, #32
 80a2a84:	b25b      	sxtb	r3, r3
 80a2a86:	b2db      	uxtb	r3, r3
 80a2a88:	727b      	strb	r3, [r7, #9]
 80a2a8a:	e01d      	b.n	80a2ac8 <bu27030_auto_change_gain0+0xc4>
    }
  } else if (data0 < BU27030_INSUFFICIENCE_THRESH) {
 80a2a8c:	683b      	ldr	r3, [r7, #0]
 80a2a8e:	2b63      	cmp	r3, #99	; 0x63
 80a2a90:	d81a      	bhi.n	80a2ac8 <bu27030_auto_change_gain0+0xc4>
    if (curret_gain0 < BU27030_32X) {   //current is  1X
 80a2a92:	897b      	ldrh	r3, [r7, #10]
 80a2a94:	2b1f      	cmp	r3, #31
 80a2a96:	d80a      	bhi.n	80a2aae <bu27030_auto_change_gain0+0xaa>
      target_gain = DATA0_GAIN_X32 | (buffer & DATA1_GAIN_MASK);
 80a2a98:	7a3b      	ldrb	r3, [r7, #8]
 80a2a9a:	b25b      	sxtb	r3, r3
 80a2a9c:	f003 030f 	and.w	r3, r3, #15
 80a2aa0:	b25b      	sxtb	r3, r3
 80a2aa2:	f063 035f 	orn	r3, r3, #95	; 0x5f
 80a2aa6:	b25b      	sxtb	r3, r3
 80a2aa8:	b2db      	uxtb	r3, r3
 80a2aaa:	727b      	strb	r3, [r7, #9]
 80a2aac:	e00c      	b.n	80a2ac8 <bu27030_auto_change_gain0+0xc4>
    } else if (curret_gain0 < BU27030_256X) {   //current is 32X
 80a2aae:	897b      	ldrh	r3, [r7, #10]
 80a2ab0:	2bff      	cmp	r3, #255	; 0xff
 80a2ab2:	d809      	bhi.n	80a2ac8 <bu27030_auto_change_gain0+0xc4>
      target_gain = DATA0_GAIN_X256 | (buffer & DATA1_GAIN_MASK);
 80a2ab4:	7a3b      	ldrb	r3, [r7, #8]
 80a2ab6:	b25b      	sxtb	r3, r3
 80a2ab8:	f003 030f 	and.w	r3, r3, #15
 80a2abc:	b25b      	sxtb	r3, r3
 80a2abe:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80a2ac2:	b25b      	sxtb	r3, r3
 80a2ac4:	b2db      	uxtb	r3, r3
 80a2ac6:	727b      	strb	r3, [r7, #9]
    }
  }

  if (target_gain) {
 80a2ac8:	7a7b      	ldrb	r3, [r7, #9]
 80a2aca:	2b00      	cmp	r3, #0
 80a2acc:	d015      	beq.n	80a2afa <bu27030_auto_change_gain0+0xf6>
    gain_changed = 1;
 80a2ace:	2301      	movs	r3, #1
 80a2ad0:	60fb      	str	r3, [r7, #12]
    light_platform_write(ctx->handle, BU27030_REG_GAIN, &target_gain, 1);
 80a2ad2:	687b      	ldr	r3, [r7, #4]
 80a2ad4:	6898      	ldr	r0, [r3, #8]
 80a2ad6:	f107 0209 	add.w	r2, r7, #9
 80a2ada:	2301      	movs	r3, #1
 80a2adc:	2142      	movs	r1, #66	; 0x42
 80a2ade:	f7ff fd4f 	bl	80a2580 <light_platform_write>
    printf("bu27030_auto_change_gain current_gain0=%d, target=%d\r\n",
 80a2ae2:	8979      	ldrh	r1, [r7, #10]
           curret_gain0, gain_table[target_gain >> 4]);
 80a2ae4:	7a7b      	ldrb	r3, [r7, #9]
 80a2ae6:	091b      	lsrs	r3, r3, #4
 80a2ae8:	b2db      	uxtb	r3, r3
 80a2aea:	461a      	mov	r2, r3
 80a2aec:	4b06      	ldr	r3, [pc, #24]	; (80a2b08 <bu27030_auto_change_gain0+0x104>)
 80a2aee:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    printf("bu27030_auto_change_gain current_gain0=%d, target=%d\r\n",
 80a2af2:	461a      	mov	r2, r3
 80a2af4:	4805      	ldr	r0, [pc, #20]	; (80a2b0c <bu27030_auto_change_gain0+0x108>)
 80a2af6:	f01d ff3d 	bl	80c0974 <iprintf>
  }

  return gain_changed;
 80a2afa:	68fb      	ldr	r3, [r7, #12]
}
 80a2afc:	4618      	mov	r0, r3
 80a2afe:	3710      	adds	r7, #16
 80a2b00:	46bd      	mov	sp, r7
 80a2b02:	bd80      	pop	{r7, pc}
 80a2b04:	080c4f44 	.word	0x080c4f44
 80a2b08:	080c77b4 	.word	0x080c77b4
 80a2b0c:	080c4f5c 	.word	0x080c4f5c

080a2b10 <bu27030_auto_change_gain1>:

int bu27030_auto_change_gain1(stmdev_ctx_t * ctx, unsigned int data1)
{
 80a2b10:	b580      	push	{r7, lr}
 80a2b12:	b084      	sub	sp, #16
 80a2b14:	af00      	add	r7, sp, #0
 80a2b16:	6078      	str	r0, [r7, #4]
 80a2b18:	6039      	str	r1, [r7, #0]

  unsigned char target_gain = 0;
 80a2b1a:	2300      	movs	r3, #0
 80a2b1c:	727b      	strb	r3, [r7, #9]
  unsigned short curret_gain1 = 0;
 80a2b1e:	2300      	movs	r3, #0
 80a2b20:	817b      	strh	r3, [r7, #10]
  uint8_t buffer;
  int gain_changed = 0;
 80a2b22:	2300      	movs	r3, #0
 80a2b24:	60fb      	str	r3, [r7, #12]
  if (!ctx) {
 80a2b26:	687b      	ldr	r3, [r7, #4]
 80a2b28:	2b00      	cmp	r3, #0
 80a2b2a:	d104      	bne.n	80a2b36 <bu27030_auto_change_gain1+0x26>
    printf("Parameter error !!! \r\n");
 80a2b2c:	4837      	ldr	r0, [pc, #220]	; (80a2c0c <bu27030_auto_change_gain1+0xfc>)
 80a2b2e:	f01d ffbd 	bl	80c0aac <puts>
    return gain_changed;
 80a2b32:	68fb      	ldr	r3, [r7, #12]
 80a2b34:	e066      	b.n	80a2c04 <bu27030_auto_change_gain1+0xf4>
  }
  //get gain reg_value
  light_platform_read(ctx->handle, BU27030_REG_GAIN, &buffer, 1);
 80a2b36:	687b      	ldr	r3, [r7, #4]
 80a2b38:	6898      	ldr	r0, [r3, #8]
 80a2b3a:	f107 0208 	add.w	r2, r7, #8
 80a2b3e:	2301      	movs	r3, #1
 80a2b40:	2142      	movs	r1, #66	; 0x42
 80a2b42:	f7ff fd43 	bl	80a25cc <light_platform_read>
  if (buffer < 0) {
    printf("Read data from IC error.\r\n");
    return gain_changed;
  }

  curret_gain1 = gain_table[buffer & DATA1_GAIN_MASK];
 80a2b46:	7a3b      	ldrb	r3, [r7, #8]
 80a2b48:	f003 030f 	and.w	r3, r3, #15
 80a2b4c:	4a30      	ldr	r2, [pc, #192]	; (80a2c10 <bu27030_auto_change_gain1+0x100>)
 80a2b4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80a2b52:	817b      	strh	r3, [r7, #10]
  if (data1 > BU27030_SATURATION_THRESH) {
 80a2b54:	683b      	ldr	r3, [r7, #0]
 80a2b56:	f64e 2260 	movw	r2, #60000	; 0xea60
 80a2b5a:	4293      	cmp	r3, r2
 80a2b5c:	d91b      	bls.n	80a2b96 <bu27030_auto_change_gain1+0x86>
    if (curret_gain1 > BU27030_32X) {   //current is  256X
 80a2b5e:	897b      	ldrh	r3, [r7, #10]
 80a2b60:	2b20      	cmp	r3, #32
 80a2b62:	d90a      	bls.n	80a2b7a <bu27030_auto_change_gain1+0x6a>
      target_gain = DATA1_GAIN_X32 | (buffer & DATA0_GAIN_MASK);
 80a2b64:	7a3b      	ldrb	r3, [r7, #8]
 80a2b66:	b25b      	sxtb	r3, r3
 80a2b68:	f023 030f 	bic.w	r3, r3, #15
 80a2b6c:	b25b      	sxtb	r3, r3
 80a2b6e:	f043 030a 	orr.w	r3, r3, #10
 80a2b72:	b25b      	sxtb	r3, r3
 80a2b74:	b2db      	uxtb	r3, r3
 80a2b76:	727b      	strb	r3, [r7, #9]
 80a2b78:	e02b      	b.n	80a2bd2 <bu27030_auto_change_gain1+0xc2>
    } else if (curret_gain1 > BU27030_1X) {     //current is 32X
 80a2b7a:	897b      	ldrh	r3, [r7, #10]
 80a2b7c:	2b01      	cmp	r3, #1
 80a2b7e:	d928      	bls.n	80a2bd2 <bu27030_auto_change_gain1+0xc2>
      target_gain = DATA1_GAIN_X1 | (buffer & DATA0_GAIN_MASK);
 80a2b80:	7a3b      	ldrb	r3, [r7, #8]
 80a2b82:	b25b      	sxtb	r3, r3
 80a2b84:	f023 030f 	bic.w	r3, r3, #15
 80a2b88:	b25b      	sxtb	r3, r3
 80a2b8a:	f043 0302 	orr.w	r3, r3, #2
 80a2b8e:	b25b      	sxtb	r3, r3
 80a2b90:	b2db      	uxtb	r3, r3
 80a2b92:	727b      	strb	r3, [r7, #9]
 80a2b94:	e01d      	b.n	80a2bd2 <bu27030_auto_change_gain1+0xc2>
    }
  } else if (data1 < BU27030_INSUFFICIENCE_THRESH) {
 80a2b96:	683b      	ldr	r3, [r7, #0]
 80a2b98:	2b63      	cmp	r3, #99	; 0x63
 80a2b9a:	d81a      	bhi.n	80a2bd2 <bu27030_auto_change_gain1+0xc2>
    if (curret_gain1 < BU27030_32X) {   //current is  1X
 80a2b9c:	897b      	ldrh	r3, [r7, #10]
 80a2b9e:	2b1f      	cmp	r3, #31
 80a2ba0:	d80a      	bhi.n	80a2bb8 <bu27030_auto_change_gain1+0xa8>
      target_gain = DATA1_GAIN_X32 | (buffer & DATA0_GAIN_MASK);
 80a2ba2:	7a3b      	ldrb	r3, [r7, #8]
 80a2ba4:	b25b      	sxtb	r3, r3
 80a2ba6:	f023 030f 	bic.w	r3, r3, #15
 80a2baa:	b25b      	sxtb	r3, r3
 80a2bac:	f043 030a 	orr.w	r3, r3, #10
 80a2bb0:	b25b      	sxtb	r3, r3
 80a2bb2:	b2db      	uxtb	r3, r3
 80a2bb4:	727b      	strb	r3, [r7, #9]
 80a2bb6:	e00c      	b.n	80a2bd2 <bu27030_auto_change_gain1+0xc2>
    } else if (curret_gain1 < BU27030_256X) {   //current is 32X
 80a2bb8:	897b      	ldrh	r3, [r7, #10]
 80a2bba:	2bff      	cmp	r3, #255	; 0xff
 80a2bbc:	d809      	bhi.n	80a2bd2 <bu27030_auto_change_gain1+0xc2>
      target_gain = DATA1_GAIN_X256 | (buffer & DATA0_GAIN_MASK);
 80a2bbe:	7a3b      	ldrb	r3, [r7, #8]
 80a2bc0:	b25b      	sxtb	r3, r3
 80a2bc2:	f023 030f 	bic.w	r3, r3, #15
 80a2bc6:	b25b      	sxtb	r3, r3
 80a2bc8:	f043 030c 	orr.w	r3, r3, #12
 80a2bcc:	b25b      	sxtb	r3, r3
 80a2bce:	b2db      	uxtb	r3, r3
 80a2bd0:	727b      	strb	r3, [r7, #9]
    }
  }

  if (target_gain) {
 80a2bd2:	7a7b      	ldrb	r3, [r7, #9]
 80a2bd4:	2b00      	cmp	r3, #0
 80a2bd6:	d014      	beq.n	80a2c02 <bu27030_auto_change_gain1+0xf2>
    gain_changed = 1;
 80a2bd8:	2301      	movs	r3, #1
 80a2bda:	60fb      	str	r3, [r7, #12]
    light_platform_write(ctx->handle, BU27030_REG_GAIN, &target_gain, 1);
 80a2bdc:	687b      	ldr	r3, [r7, #4]
 80a2bde:	6898      	ldr	r0, [r3, #8]
 80a2be0:	f107 0209 	add.w	r2, r7, #9
 80a2be4:	2301      	movs	r3, #1
 80a2be6:	2142      	movs	r1, #66	; 0x42
 80a2be8:	f7ff fcca 	bl	80a2580 <light_platform_write>
    printf("bu27030_auto_change_gain1 current_gain1=%d, target=%d\r\n",
 80a2bec:	8979      	ldrh	r1, [r7, #10]
           curret_gain1, gain_table[target_gain & DATA1_GAIN_MASK]);
 80a2bee:	7a7b      	ldrb	r3, [r7, #9]
 80a2bf0:	f003 030f 	and.w	r3, r3, #15
 80a2bf4:	4a06      	ldr	r2, [pc, #24]	; (80a2c10 <bu27030_auto_change_gain1+0x100>)
 80a2bf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    printf("bu27030_auto_change_gain1 current_gain1=%d, target=%d\r\n",
 80a2bfa:	461a      	mov	r2, r3
 80a2bfc:	4805      	ldr	r0, [pc, #20]	; (80a2c14 <bu27030_auto_change_gain1+0x104>)
 80a2bfe:	f01d feb9 	bl	80c0974 <iprintf>
  }

  return gain_changed;
 80a2c02:	68fb      	ldr	r3, [r7, #12]
}
 80a2c04:	4618      	mov	r0, r3
 80a2c06:	3710      	adds	r7, #16
 80a2c08:	46bd      	mov	sp, r7
 80a2c0a:	bd80      	pop	{r7, pc}
 80a2c0c:	080c4f44 	.word	0x080c4f44
 80a2c10:	080c77b4 	.word	0x080c77b4
 80a2c14:	080c4f94 	.word	0x080c4f94

080a2c18 <bu27030_get_raw_data_and_calculated_lux_without_scale>:

/* ALS polling routine */
static void bu27030_get_raw_data_and_calculated_lux_without_scale(stmdev_ctx_t *
                                                                  ctx)
{
 80a2c18:	b580      	push	{r7, lr}
 80a2c1a:	b086      	sub	sp, #24
 80a2c1c:	af00      	add	r7, sp, #0
 80a2c1e:	6078      	str	r0, [r7, #4]
  uint8_t tmp = 0;
 80a2c20:	2300      	movs	r3, #0
 80a2c22:	73fb      	strb	r3, [r7, #15]
  int gain_changed = 0;
 80a2c24:	2300      	movs	r3, #0
 80a2c26:	617b      	str	r3, [r7, #20]

  //get valid from BU27030_REG_CONTROL(0x43)
  light_platform_read(ctx->handle, BU27030_REG_CONTROL, &tmp, 1);
 80a2c28:	687b      	ldr	r3, [r7, #4]
 80a2c2a:	6898      	ldr	r0, [r3, #8]
 80a2c2c:	f107 020f 	add.w	r2, r7, #15
 80a2c30:	2301      	movs	r3, #1
 80a2c32:	2143      	movs	r1, #67	; 0x43
 80a2c34:	f7ff fcca 	bl	80a25cc <light_platform_read>
  if (tmp < 0) {
    printf("Read data from IC error.\r\n");
    return;
  }
  uint8_t POWER_ON = 1;
 80a2c38:	2301      	movs	r3, #1
 80a2c3a:	73bb      	strb	r3, [r7, #14]
  if (0 == (tmp & POWER_ON)) {
 80a2c3c:	7bfa      	ldrb	r2, [r7, #15]
 80a2c3e:	7bbb      	ldrb	r3, [r7, #14]
 80a2c40:	4013      	ands	r3, r2
 80a2c42:	b2db      	uxtb	r3, r3
 80a2c44:	2b00      	cmp	r3, #0
 80a2c46:	d10d      	bne.n	80a2c64 <bu27030_get_raw_data_and_calculated_lux_without_scale+0x4c>
    printf(" ic is abnormal, re-initialize, and re-enable \r\n");
 80a2c48:	4848      	ldr	r0, [pc, #288]	; (80a2d6c <bu27030_get_raw_data_and_calculated_lux_without_scale+0x154>)
 80a2c4a:	f01d ff2f 	bl	80c0aac <puts>
    bu27030_init_client(ctx);
 80a2c4e:	6878      	ldr	r0, [r7, #4]
 80a2c50:	f7ff fd06 	bl	80a2660 <bu27030_init_client>
    light_platform_write(ctx->handle, BU27030_REG_CONTROL, &POWER_ON, 1);
 80a2c54:	687b      	ldr	r3, [r7, #4]
 80a2c56:	6898      	ldr	r0, [r3, #8]
 80a2c58:	f107 020e 	add.w	r2, r7, #14
 80a2c5c:	2301      	movs	r3, #1
 80a2c5e:	2143      	movs	r1, #67	; 0x43
 80a2c60:	f7ff fc8e 	bl	80a2580 <light_platform_write>
  }
  //BU27030_WARNING("Data valid BU27030_REG_CONTROL(0x%x) = 0x%x\n", BU27030_REG_CONTROL, result);
  if ((tmp & ALS_VALID_HIGH) == 0) {    //not valid
 80a2c64:	7bfb      	ldrb	r3, [r7, #15]
 80a2c66:	b25b      	sxtb	r3, r3
 80a2c68:	2b00      	cmp	r3, #0
 80a2c6a:	db03      	blt.n	80a2c74 <bu27030_get_raw_data_and_calculated_lux_without_scale+0x5c>
    printf("Data Not valid. But it does not matter, please ignore it.\r\n");
 80a2c6c:	4840      	ldr	r0, [pc, #256]	; (80a2d70 <bu27030_get_raw_data_and_calculated_lux_without_scale+0x158>)
 80a2c6e:	f01d ff1d 	bl	80c0aac <puts>
 80a2c72:	e077      	b.n	80a2d64 <bu27030_get_raw_data_and_calculated_lux_without_scale+0x14c>
  } else {
    unsigned char gain = 0;
 80a2c74:	2300      	movs	r3, #0
 80a2c76:	74fb      	strb	r3, [r7, #19]
    unsigned char time = 0;
 80a2c78:	2300      	movs	r3, #0
 80a2c7a:	74bb      	strb	r3, [r7, #18]

    //read data0
    uint8_t data0_0, data0_1;
    light_platform_read(ctx->handle, BU27030_REG_DATA0_0, &data0_0, 1);
 80a2c7c:	687b      	ldr	r3, [r7, #4]
 80a2c7e:	6898      	ldr	r0, [r3, #8]
 80a2c80:	f107 020d 	add.w	r2, r7, #13
 80a2c84:	2301      	movs	r3, #1
 80a2c86:	2150      	movs	r1, #80	; 0x50
 80a2c88:	f7ff fca0 	bl	80a25cc <light_platform_read>
    light_platform_read(ctx->handle, BU27030_REG_DATA0_1, &data0_1, 1);
 80a2c8c:	687b      	ldr	r3, [r7, #4]
 80a2c8e:	6898      	ldr	r0, [r3, #8]
 80a2c90:	f107 020c 	add.w	r2, r7, #12
 80a2c94:	2301      	movs	r3, #1
 80a2c96:	2151      	movs	r1, #81	; 0x51
 80a2c98:	f7ff fc98 	bl	80a25cc <light_platform_read>
    uint16_t tmp_data = (uint16_t) data0_1;
 80a2c9c:	7b3b      	ldrb	r3, [r7, #12]
 80a2c9e:	823b      	strh	r3, [r7, #16]
    tmp_data = (tmp_data << 8) | data0_0;
 80a2ca0:	8a3b      	ldrh	r3, [r7, #16]
 80a2ca2:	021b      	lsls	r3, r3, #8
 80a2ca4:	b21a      	sxth	r2, r3
 80a2ca6:	7b7b      	ldrb	r3, [r7, #13]
 80a2ca8:	b21b      	sxth	r3, r3
 80a2caa:	4313      	orrs	r3, r2
 80a2cac:	b21b      	sxth	r3, r3
 80a2cae:	823b      	strh	r3, [r7, #16]

    if (tmp_data < 0) {
      printf("%s: i2c read data0 fail.\r\n", __func__);
      return;
    }
    data.data0 = (unsigned int)tmp_data;
 80a2cb0:	8a3b      	ldrh	r3, [r7, #16]
 80a2cb2:	4a30      	ldr	r2, [pc, #192]	; (80a2d74 <bu27030_get_raw_data_and_calculated_lux_without_scale+0x15c>)
 80a2cb4:	6013      	str	r3, [r2, #0]

    //read data1
    uint8_t data1_0, data1_1;
    light_platform_read(ctx->handle, BU27030_REG_DATA1_0, &data1_0, 1);
 80a2cb6:	687b      	ldr	r3, [r7, #4]
 80a2cb8:	6898      	ldr	r0, [r3, #8]
 80a2cba:	f107 020b 	add.w	r2, r7, #11
 80a2cbe:	2301      	movs	r3, #1
 80a2cc0:	2152      	movs	r1, #82	; 0x52
 80a2cc2:	f7ff fc83 	bl	80a25cc <light_platform_read>
    light_platform_read(ctx->handle, BU27030_REG_DATA1_1, &data1_1, 1);
 80a2cc6:	687b      	ldr	r3, [r7, #4]
 80a2cc8:	6898      	ldr	r0, [r3, #8]
 80a2cca:	f107 020a 	add.w	r2, r7, #10
 80a2cce:	2301      	movs	r3, #1
 80a2cd0:	2153      	movs	r1, #83	; 0x53
 80a2cd2:	f7ff fc7b 	bl	80a25cc <light_platform_read>
    tmp_data = (uint16_t) data1_1;
 80a2cd6:	7abb      	ldrb	r3, [r7, #10]
 80a2cd8:	823b      	strh	r3, [r7, #16]
    tmp_data = (tmp_data << 8) | data1_0;
 80a2cda:	8a3b      	ldrh	r3, [r7, #16]
 80a2cdc:	021b      	lsls	r3, r3, #8
 80a2cde:	b21a      	sxth	r2, r3
 80a2ce0:	7afb      	ldrb	r3, [r7, #11]
 80a2ce2:	b21b      	sxth	r3, r3
 80a2ce4:	4313      	orrs	r3, r2
 80a2ce6:	b21b      	sxth	r3, r3
 80a2ce8:	823b      	strh	r3, [r7, #16]

    if (tmp_data < 0) {
      printf("%s: i2c read data1 fail.\r\n", __func__);
      return;
    }
    data.data1 = (unsigned int)tmp_data;
 80a2cea:	8a3b      	ldrh	r3, [r7, #16]
 80a2cec:	4a21      	ldr	r2, [pc, #132]	; (80a2d74 <bu27030_get_raw_data_and_calculated_lux_without_scale+0x15c>)
 80a2cee:	6053      	str	r3, [r2, #4]

    //read gain
    light_platform_read(ctx->handle, BU27030_REG_GAIN, &tmp, 1);
 80a2cf0:	687b      	ldr	r3, [r7, #4]
 80a2cf2:	6898      	ldr	r0, [r3, #8]
 80a2cf4:	f107 020f 	add.w	r2, r7, #15
 80a2cf8:	2301      	movs	r3, #1
 80a2cfa:	2142      	movs	r1, #66	; 0x42
 80a2cfc:	f7ff fc66 	bl	80a25cc <light_platform_read>
    if (tmp < 0) {
      printf("%s: i2c read gain fail.\r\n", __func__);
      return;
    }
    gain = (unsigned char)tmp;
 80a2d00:	7bfb      	ldrb	r3, [r7, #15]
 80a2d02:	74fb      	strb	r3, [r7, #19]

#if AGC_SUPPORT
    //auto change gain
    //Be noted: if agc was enabled, you must make sure that agc can not be happened on the first time.
    //Then you should set the default value carefullly in bu27030_init_client() to avoid data overflow on the first time.
    gain_changed = bu27030_auto_change_gain0(ctx, data.data0);
 80a2d04:	4b1b      	ldr	r3, [pc, #108]	; (80a2d74 <bu27030_get_raw_data_and_calculated_lux_without_scale+0x15c>)
 80a2d06:	681b      	ldr	r3, [r3, #0]
 80a2d08:	4619      	mov	r1, r3
 80a2d0a:	6878      	ldr	r0, [r7, #4]
 80a2d0c:	f7ff fe7a 	bl	80a2a04 <bu27030_auto_change_gain0>
 80a2d10:	6178      	str	r0, [r7, #20]
    gain_changed |= bu27030_auto_change_gain1(ctx, data.data1);
 80a2d12:	4b18      	ldr	r3, [pc, #96]	; (80a2d74 <bu27030_get_raw_data_and_calculated_lux_without_scale+0x15c>)
 80a2d14:	685b      	ldr	r3, [r3, #4]
 80a2d16:	4619      	mov	r1, r3
 80a2d18:	6878      	ldr	r0, [r7, #4]
 80a2d1a:	f7ff fef9 	bl	80a2b10 <bu27030_auto_change_gain1>
 80a2d1e:	4602      	mov	r2, r0
 80a2d20:	697b      	ldr	r3, [r7, #20]
 80a2d22:	4313      	orrs	r3, r2
 80a2d24:	617b      	str	r3, [r7, #20]
    if (gain_changed) {
 80a2d26:	697b      	ldr	r3, [r7, #20]
 80a2d28:	2b00      	cmp	r3, #0
 80a2d2a:	d004      	beq.n	80a2d36 <bu27030_get_raw_data_and_calculated_lux_without_scale+0x11e>
      printf("%s: gain changed return.\r\n", __func__);
 80a2d2c:	4912      	ldr	r1, [pc, #72]	; (80a2d78 <bu27030_get_raw_data_and_calculated_lux_without_scale+0x160>)
 80a2d2e:	4813      	ldr	r0, [pc, #76]	; (80a2d7c <bu27030_get_raw_data_and_calculated_lux_without_scale+0x164>)
 80a2d30:	f01d fe20 	bl	80c0974 <iprintf>
 80a2d34:	e016      	b.n	80a2d64 <bu27030_get_raw_data_and_calculated_lux_without_scale+0x14c>
      return;
    }
#endif

    //read time
    light_platform_read(ctx->handle, BU27030_REG_TIMING, &tmp, 1);
 80a2d36:	687b      	ldr	r3, [r7, #4]
 80a2d38:	6898      	ldr	r0, [r3, #8]
 80a2d3a:	f107 020f 	add.w	r2, r7, #15
 80a2d3e:	2301      	movs	r3, #1
 80a2d40:	2141      	movs	r1, #65	; 0x41
 80a2d42:	f7ff fc43 	bl	80a25cc <light_platform_read>
    if (tmp < 0) {
      printf("%s: i2c read time fail.\r\n", __func__);
      return;
    }

    time = (unsigned char)tmp;
 80a2d46:	7bfb      	ldrb	r3, [r7, #15]
 80a2d48:	74bb      	strb	r3, [r7, #18]
    light_data = (float)bu27030_calculate_light(data, gain, time);
 80a2d4a:	7cbb      	ldrb	r3, [r7, #18]
 80a2d4c:	7cfa      	ldrb	r2, [r7, #19]
 80a2d4e:	4909      	ldr	r1, [pc, #36]	; (80a2d74 <bu27030_get_raw_data_and_calculated_lux_without_scale+0x15c>)
 80a2d50:	c903      	ldmia	r1, {r0, r1}
 80a2d52:	f7ff fcb9 	bl	80a26c8 <bu27030_calculate_light>
 80a2d56:	ee07 0a90 	vmov	s15, r0
 80a2d5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80a2d5e:	4b08      	ldr	r3, [pc, #32]	; (80a2d80 <bu27030_get_raw_data_and_calculated_lux_without_scale+0x168>)
 80a2d60:	edc3 7a00 	vstr	s15, [r3]
  }
}
 80a2d64:	3718      	adds	r7, #24
 80a2d66:	46bd      	mov	sp, r7
 80a2d68:	bd80      	pop	{r7, pc}
 80a2d6a:	bf00      	nop
 80a2d6c:	080c4fcc 	.word	0x080c4fcc
 80a2d70:	080c4ffc 	.word	0x080c4ffc
 80a2d74:	20007f6c 	.word	0x20007f6c
 80a2d78:	080c77d4 	.word	0x080c77d4
 80a2d7c:	080c5038 	.word	0x080c5038
 80a2d80:	20007f50 	.word	0x20007f50
 80a2d84:	00000000 	.word	0x00000000

080a2d88 <bu27030_light_calibration>:

static int bu27030_light_calibration(stmdev_ctx_t * ctx, float *lux_scale)
{
 80a2d88:	b5b0      	push	{r4, r5, r7, lr}
 80a2d8a:	b092      	sub	sp, #72	; 0x48
 80a2d8c:	af00      	add	r7, sp, #0
 80a2d8e:	6078      	str	r0, [r7, #4]
 80a2d90:	6039      	str	r1, [r7, #0]
  int cali_loop_count = 0;
 80a2d92:	2300      	movs	r3, #0
 80a2d94:	647b      	str	r3, [r7, #68]	; 0x44
  float raw_data_for_cali[NUM_FOR_CALI_SCALE];
  memset(raw_data_for_cali, 0, sizeof(raw_data_for_cali));
 80a2d96:	f107 0308 	add.w	r3, r7, #8
 80a2d9a:	2228      	movs	r2, #40	; 0x28
 80a2d9c:	2100      	movs	r1, #0
 80a2d9e:	4618      	mov	r0, r3
 80a2da0:	f01d f90c 	bl	80bffbc <memset>
  do {
    bu27030_get_raw_data_and_calculated_lux_without_scale(&light_dev_ctx);
 80a2da4:	4856      	ldr	r0, [pc, #344]	; (80a2f00 <bu27030_light_calibration+0x178>)
 80a2da6:	f7ff ff37 	bl	80a2c18 <bu27030_get_raw_data_and_calculated_lux_without_scale>
    cali_loop_count++;
 80a2daa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80a2dac:	3301      	adds	r3, #1
 80a2dae:	647b      	str	r3, [r7, #68]	; 0x44
    platform_delay(100);        //mesasure_time is 100ms one time
 80a2db0:	2064      	movs	r0, #100	; 0x64
 80a2db2:	f7ff fc31 	bl	80a2618 <platform_delay>
    if (cali_loop_count > skip_num) {
 80a2db6:	4b53      	ldr	r3, [pc, #332]	; (80a2f04 <bu27030_light_calibration+0x17c>)
 80a2db8:	681b      	ldr	r3, [r3, #0]
 80a2dba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80a2dbc:	429a      	cmp	r2, r3
 80a2dbe:	dd0c      	ble.n	80a2dda <bu27030_light_calibration+0x52>
      raw_data_for_cali[cali_loop_count - skip_num - 1] = light_data;   // need consider again or atime changed
 80a2dc0:	4b50      	ldr	r3, [pc, #320]	; (80a2f04 <bu27030_light_calibration+0x17c>)
 80a2dc2:	681b      	ldr	r3, [r3, #0]
 80a2dc4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80a2dc6:	1ad3      	subs	r3, r2, r3
 80a2dc8:	3b01      	subs	r3, #1
 80a2dca:	4a4f      	ldr	r2, [pc, #316]	; (80a2f08 <bu27030_light_calibration+0x180>)
 80a2dcc:	6812      	ldr	r2, [r2, #0]
 80a2dce:	009b      	lsls	r3, r3, #2
 80a2dd0:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80a2dd4:	440b      	add	r3, r1
 80a2dd6:	3b40      	subs	r3, #64	; 0x40
 80a2dd8:	601a      	str	r2, [r3, #0]
    }
  } while (cali_loop_count - skip_num <= NUM_FOR_CALI_SCALE);
 80a2dda:	4b4a      	ldr	r3, [pc, #296]	; (80a2f04 <bu27030_light_calibration+0x17c>)
 80a2ddc:	681b      	ldr	r3, [r3, #0]
 80a2dde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80a2de0:	1ad3      	subs	r3, r2, r3
 80a2de2:	2b0a      	cmp	r3, #10
 80a2de4:	ddde      	ble.n	80a2da4 <bu27030_light_calibration+0x1c>

  float sumed_raw_data = 0;
 80a2de6:	f04f 0300 	mov.w	r3, #0
 80a2dea:	643b      	str	r3, [r7, #64]	; 0x40
  for (int i = 0; i < NUM_FOR_CALI_SCALE; i++) {
 80a2dec:	2300      	movs	r3, #0
 80a2dee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80a2df0:	e010      	b.n	80a2e14 <bu27030_light_calibration+0x8c>
    sumed_raw_data += raw_data_for_cali[i];
 80a2df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80a2df4:	009b      	lsls	r3, r3, #2
 80a2df6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80a2dfa:	4413      	add	r3, r2
 80a2dfc:	3b40      	subs	r3, #64	; 0x40
 80a2dfe:	edd3 7a00 	vldr	s15, [r3]
 80a2e02:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80a2e06:	ee77 7a27 	vadd.f32	s15, s14, s15
 80a2e0a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
  for (int i = 0; i < NUM_FOR_CALI_SCALE; i++) {
 80a2e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80a2e10:	3301      	adds	r3, #1
 80a2e12:	63fb      	str	r3, [r7, #60]	; 0x3c
 80a2e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80a2e16:	2b09      	cmp	r3, #9
 80a2e18:	ddeb      	ble.n	80a2df2 <bu27030_light_calibration+0x6a>
  }

  float average = sumed_raw_data / NUM_FOR_CALI_SCALE;
 80a2e1a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80a2e1e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80a2e22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80a2e26:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
  float var = 0;
 80a2e2a:	f04f 0300 	mov.w	r3, #0
 80a2e2e:	63bb      	str	r3, [r7, #56]	; 0x38
  for (int j = 0; j <= NUM_FOR_CALI_SCALE; j++) {
 80a2e30:	2300      	movs	r3, #0
 80a2e32:	637b      	str	r3, [r7, #52]	; 0x34
 80a2e34:	e036      	b.n	80a2ea4 <bu27030_light_calibration+0x11c>
    var += pow(raw_data_for_cali[j] - average, 2) / NUM_FOR_CALI_SCALE; //var
 80a2e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80a2e38:	009b      	lsls	r3, r3, #2
 80a2e3a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80a2e3e:	4413      	add	r3, r2
 80a2e40:	3b40      	subs	r3, #64	; 0x40
 80a2e42:	ed93 7a00 	vldr	s14, [r3]
 80a2e46:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80a2e4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 80a2e4e:	ee17 0a90 	vmov	r0, s15
 80a2e52:	f7fd fb79 	bl	80a0548 <__aeabi_f2d>
 80a2e56:	4602      	mov	r2, r0
 80a2e58:	460b      	mov	r3, r1
 80a2e5a:	ed9f 1b27 	vldr	d1, [pc, #156]	; 80a2ef8 <bu27030_light_calibration+0x170>
 80a2e5e:	ec43 2b10 	vmov	d0, r2, r3
 80a2e62:	f01f fee5 	bl	80c2c30 <pow>
 80a2e66:	ec51 0b10 	vmov	r0, r1, d0
 80a2e6a:	f04f 0200 	mov.w	r2, #0
 80a2e6e:	4b27      	ldr	r3, [pc, #156]	; (80a2f0c <bu27030_light_calibration+0x184>)
 80a2e70:	f7fd fcec 	bl	80a084c <__aeabi_ddiv>
 80a2e74:	4602      	mov	r2, r0
 80a2e76:	460b      	mov	r3, r1
 80a2e78:	4614      	mov	r4, r2
 80a2e7a:	461d      	mov	r5, r3
 80a2e7c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80a2e7e:	f7fd fb63 	bl	80a0548 <__aeabi_f2d>
 80a2e82:	4602      	mov	r2, r0
 80a2e84:	460b      	mov	r3, r1
 80a2e86:	4620      	mov	r0, r4
 80a2e88:	4629      	mov	r1, r5
 80a2e8a:	f7fd f9ff 	bl	80a028c <__adddf3>
 80a2e8e:	4602      	mov	r2, r0
 80a2e90:	460b      	mov	r3, r1
 80a2e92:	4610      	mov	r0, r2
 80a2e94:	4619      	mov	r1, r3
 80a2e96:	f7fd fea7 	bl	80a0be8 <__aeabi_d2f>
 80a2e9a:	4603      	mov	r3, r0
 80a2e9c:	63bb      	str	r3, [r7, #56]	; 0x38
  for (int j = 0; j <= NUM_FOR_CALI_SCALE; j++) {
 80a2e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80a2ea0:	3301      	adds	r3, #1
 80a2ea2:	637b      	str	r3, [r7, #52]	; 0x34
 80a2ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80a2ea6:	2b0a      	cmp	r3, #10
 80a2ea8:	ddc5      	ble.n	80a2e36 <bu27030_light_calibration+0xae>
  }

  //float standard = pow(var,0.5);//std

  if (var > 100 || average < 100) {
 80a2eaa:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80a2eae:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80a2f10 <bu27030_light_calibration+0x188>
 80a2eb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80a2eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80a2eba:	dc08      	bgt.n	80a2ece <bu27030_light_calibration+0x146>
 80a2ebc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80a2ec0:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80a2f10 <bu27030_light_calibration+0x188>
 80a2ec4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80a2ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80a2ecc:	d505      	bpl.n	80a2eda <bu27030_light_calibration+0x152>
    printf("data does not meet requiement!");
 80a2ece:	4811      	ldr	r0, [pc, #68]	; (80a2f14 <bu27030_light_calibration+0x18c>)
 80a2ed0:	f01d fd50 	bl	80c0974 <iprintf>
    return -1;
 80a2ed4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a2ed8:	e00a      	b.n	80a2ef0 <bu27030_light_calibration+0x168>
  }
  *lux_scale = target_lux / average;
 80a2eda:	4b0f      	ldr	r3, [pc, #60]	; (80a2f18 <bu27030_light_calibration+0x190>)
 80a2edc:	edd3 6a00 	vldr	s13, [r3]
 80a2ee0:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80a2ee4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80a2ee8:	683b      	ldr	r3, [r7, #0]
 80a2eea:	edc3 7a00 	vstr	s15, [r3]
  return 0;
 80a2eee:	2300      	movs	r3, #0
}
 80a2ef0:	4618      	mov	r0, r3
 80a2ef2:	3748      	adds	r7, #72	; 0x48
 80a2ef4:	46bd      	mov	sp, r7
 80a2ef6:	bdb0      	pop	{r4, r5, r7, pc}
 80a2ef8:	00000000 	.word	0x00000000
 80a2efc:	40000000 	.word	0x40000000
 80a2f00:	20007f58 	.word	0x20007f58
 80a2f04:	20007008 	.word	0x20007008
 80a2f08:	20007f50 	.word	0x20007f50
 80a2f0c:	40240000 	.word	0x40240000
 80a2f10:	42c80000 	.word	0x42c80000
 80a2f14:	080c5054 	.word	0x080c5054
 80a2f18:	2000700c 	.word	0x2000700c

080a2f1c <bu27030_light_init>:

/*
 * @brief  platform specific initialization (platform dependent)
 */
int bu27030_light_init(void *para, void *para2)
{
 80a2f1c:	b580      	push	{r7, lr}
 80a2f1e:	b082      	sub	sp, #8
 80a2f20:	af00      	add	r7, sp, #0
 80a2f22:	6078      	str	r0, [r7, #4]
 80a2f24:	6039      	str	r1, [r7, #0]
  light_init_parms = (platform_prams *) para;
 80a2f26:	4a18      	ldr	r2, [pc, #96]	; (80a2f88 <bu27030_light_init+0x6c>)
 80a2f28:	687b      	ldr	r3, [r7, #4]
 80a2f2a:	6013      	str	r3, [r2, #0]
  /* Initialize mems driver interface */
  light_dev_ctx.write_reg = light_platform_write;
 80a2f2c:	4b17      	ldr	r3, [pc, #92]	; (80a2f8c <bu27030_light_init+0x70>)
 80a2f2e:	4a18      	ldr	r2, [pc, #96]	; (80a2f90 <bu27030_light_init+0x74>)
 80a2f30:	601a      	str	r2, [r3, #0]
  light_dev_ctx.read_reg = light_platform_read;
 80a2f32:	4b16      	ldr	r3, [pc, #88]	; (80a2f8c <bu27030_light_init+0x70>)
 80a2f34:	4a17      	ldr	r2, [pc, #92]	; (80a2f94 <bu27030_light_init+0x78>)
 80a2f36:	605a      	str	r2, [r3, #4]
  light_dev_ctx.handle = &light_init_parms->i2c_handle;
 80a2f38:	4b13      	ldr	r3, [pc, #76]	; (80a2f88 <bu27030_light_init+0x6c>)
 80a2f3a:	681b      	ldr	r3, [r3, #0]
 80a2f3c:	3304      	adds	r3, #4
 80a2f3e:	4a13      	ldr	r2, [pc, #76]	; (80a2f8c <bu27030_light_init+0x70>)
 80a2f40:	6093      	str	r3, [r2, #8]

  /* Check device ID */
  light_platform_read(light_dev_ctx.handle, (uint8_t) BU27030_REG_PART_ID,
 80a2f42:	4b12      	ldr	r3, [pc, #72]	; (80a2f8c <bu27030_light_init+0x70>)
 80a2f44:	6898      	ldr	r0, [r3, #8]
 80a2f46:	2301      	movs	r3, #1
 80a2f48:	4a13      	ldr	r2, [pc, #76]	; (80a2f98 <bu27030_light_init+0x7c>)
 80a2f4a:	2192      	movs	r1, #146	; 0x92
 80a2f4c:	f7ff fb3e 	bl	80a25cc <light_platform_read>
                      &whoamI, 1);

  printf("bu27030 whoamI: 0x%x %p %x \r\n", whoamI, light_dev_ctx.handle,
 80a2f50:	4b11      	ldr	r3, [pc, #68]	; (80a2f98 <bu27030_light_init+0x7c>)
 80a2f52:	781b      	ldrb	r3, [r3, #0]
 80a2f54:	4619      	mov	r1, r3
 80a2f56:	4b0d      	ldr	r3, [pc, #52]	; (80a2f8c <bu27030_light_init+0x70>)
 80a2f58:	689a      	ldr	r2, [r3, #8]
 80a2f5a:	2392      	movs	r3, #146	; 0x92
 80a2f5c:	480f      	ldr	r0, [pc, #60]	; (80a2f9c <bu27030_light_init+0x80>)
 80a2f5e:	f01d fd09 	bl	80c0974 <iprintf>
         (uint8_t) BU27030_REG_PART_ID);

  if (whoamI != BU27030_PART_ID_VALUE) {
 80a2f62:	4b0d      	ldr	r3, [pc, #52]	; (80a2f98 <bu27030_light_init+0x7c>)
 80a2f64:	781b      	ldrb	r3, [r3, #0]
 80a2f66:	2be0      	cmp	r3, #224	; 0xe0
 80a2f68:	d005      	beq.n	80a2f76 <bu27030_light_init+0x5a>
    printf("init failed for bu27030!\r\n");
 80a2f6a:	480d      	ldr	r0, [pc, #52]	; (80a2fa0 <bu27030_light_init+0x84>)
 80a2f6c:	f01d fd9e 	bl	80c0aac <puts>
    return SENSOR_FAILED;
 80a2f70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a2f74:	e003      	b.n	80a2f7e <bu27030_light_init+0x62>
  }

  /* Restore default configuration */
  bu27030_init_client(&light_dev_ctx);
 80a2f76:	4805      	ldr	r0, [pc, #20]	; (80a2f8c <bu27030_light_init+0x70>)
 80a2f78:	f7ff fb72 	bl	80a2660 <bu27030_init_client>

  return SENSOR_SUCCESS;
 80a2f7c:	2300      	movs	r3, #0
}
 80a2f7e:	4618      	mov	r0, r3
 80a2f80:	3708      	adds	r7, #8
 80a2f82:	46bd      	mov	sp, r7
 80a2f84:	bd80      	pop	{r7, pc}
 80a2f86:	bf00      	nop
 80a2f88:	20007f64 	.word	0x20007f64
 80a2f8c:	20007f58 	.word	0x20007f58
 80a2f90:	080a2581 	.word	0x080a2581
 80a2f94:	080a25cd 	.word	0x080a25cd
 80a2f98:	20007f54 	.word	0x20007f54
 80a2f9c:	080c5074 	.word	0x080c5074
 80a2fa0:	080c5094 	.word	0x080c5094

080a2fa4 <bu27030_enable>:

static int32_t bu27030_enable()
{
 80a2fa4:	b580      	push	{r7, lr}
 80a2fa6:	b082      	sub	sp, #8
 80a2fa8:	af00      	add	r7, sp, #0
  int32_t ret = 0;
 80a2faa:	2300      	movs	r3, #0
 80a2fac:	607b      	str	r3, [r7, #4]
  uint8_t POWER_ON = 1;
 80a2fae:	2301      	movs	r3, #1
 80a2fb0:	70fb      	strb	r3, [r7, #3]
  if (sensor_activate_count == 0) {
 80a2fb2:	4b0c      	ldr	r3, [pc, #48]	; (80a2fe4 <bu27030_enable+0x40>)
 80a2fb4:	781b      	ldrb	r3, [r3, #0]
 80a2fb6:	2b00      	cmp	r3, #0
 80a2fb8:	d109      	bne.n	80a2fce <bu27030_enable+0x2a>
    ret = light_platform_write(&light_dev_ctx, BU27030_REG_CONTROL,
 80a2fba:	1cfa      	adds	r2, r7, #3
 80a2fbc:	2301      	movs	r3, #1
 80a2fbe:	2143      	movs	r1, #67	; 0x43
 80a2fc0:	4809      	ldr	r0, [pc, #36]	; (80a2fe8 <bu27030_enable+0x44>)
 80a2fc2:	f7ff fadd 	bl	80a2580 <light_platform_write>
 80a2fc6:	6078      	str	r0, [r7, #4]
                               &POWER_ON, 1);
    light_activated = true;
 80a2fc8:	4b08      	ldr	r3, [pc, #32]	; (80a2fec <bu27030_enable+0x48>)
 80a2fca:	2201      	movs	r2, #1
 80a2fcc:	701a      	strb	r2, [r3, #0]
  }
  sensor_activate_count++;
 80a2fce:	4b05      	ldr	r3, [pc, #20]	; (80a2fe4 <bu27030_enable+0x40>)
 80a2fd0:	781b      	ldrb	r3, [r3, #0]
 80a2fd2:	3301      	adds	r3, #1
 80a2fd4:	b2da      	uxtb	r2, r3
 80a2fd6:	4b03      	ldr	r3, [pc, #12]	; (80a2fe4 <bu27030_enable+0x40>)
 80a2fd8:	701a      	strb	r2, [r3, #0]
  return ret;
 80a2fda:	687b      	ldr	r3, [r7, #4]
}
 80a2fdc:	4618      	mov	r0, r3
 80a2fde:	3708      	adds	r7, #8
 80a2fe0:	46bd      	mov	sp, r7
 80a2fe2:	bd80      	pop	{r7, pc}
 80a2fe4:	20007f68 	.word	0x20007f68
 80a2fe8:	20007f58 	.word	0x20007f58
 80a2fec:	20007f69 	.word	0x20007f69

080a2ff0 <bu27030_disable>:

static int32_t bu27030_disable()
{
 80a2ff0:	b580      	push	{r7, lr}
 80a2ff2:	b082      	sub	sp, #8
 80a2ff4:	af00      	add	r7, sp, #0
  int32_t ret = 0;
 80a2ff6:	2300      	movs	r3, #0
 80a2ff8:	607b      	str	r3, [r7, #4]
  uint8_t POWER_OFF = 0;
 80a2ffa:	2300      	movs	r3, #0
 80a2ffc:	70fb      	strb	r3, [r7, #3]
  sensor_activate_count--;
 80a2ffe:	4b0c      	ldr	r3, [pc, #48]	; (80a3030 <bu27030_disable+0x40>)
 80a3000:	781b      	ldrb	r3, [r3, #0]
 80a3002:	3b01      	subs	r3, #1
 80a3004:	b2da      	uxtb	r2, r3
 80a3006:	4b0a      	ldr	r3, [pc, #40]	; (80a3030 <bu27030_disable+0x40>)
 80a3008:	701a      	strb	r2, [r3, #0]

  if (sensor_activate_count == 0) {
 80a300a:	4b09      	ldr	r3, [pc, #36]	; (80a3030 <bu27030_disable+0x40>)
 80a300c:	781b      	ldrb	r3, [r3, #0]
 80a300e:	2b00      	cmp	r3, #0
 80a3010:	d109      	bne.n	80a3026 <bu27030_disable+0x36>
    ret = light_platform_write(&light_dev_ctx, BU27030_REG_CONTROL,
 80a3012:	1cfa      	adds	r2, r7, #3
 80a3014:	2301      	movs	r3, #1
 80a3016:	2143      	movs	r1, #67	; 0x43
 80a3018:	4806      	ldr	r0, [pc, #24]	; (80a3034 <bu27030_disable+0x44>)
 80a301a:	f7ff fab1 	bl	80a2580 <light_platform_write>
 80a301e:	6078      	str	r0, [r7, #4]
                               &POWER_OFF, 1);
    light_activated = false;
 80a3020:	4b05      	ldr	r3, [pc, #20]	; (80a3038 <bu27030_disable+0x48>)
 80a3022:	2200      	movs	r2, #0
 80a3024:	701a      	strb	r2, [r3, #0]
  }
  return ret;
 80a3026:	687b      	ldr	r3, [r7, #4]
}
 80a3028:	4618      	mov	r0, r3
 80a302a:	3708      	adds	r7, #8
 80a302c:	46bd      	mov	sp, r7
 80a302e:	bd80      	pop	{r7, pc}
 80a3030:	20007f68 	.word	0x20007f68
 80a3034:	20007f58 	.word	0x20007f58
 80a3038:	20007f69 	.word	0x20007f69

080a303c <bu27030_light_activate>:

int bu27030_light_activate(bool activate)
{
 80a303c:	b580      	push	{r7, lr}
 80a303e:	b084      	sub	sp, #16
 80a3040:	af00      	add	r7, sp, #0
 80a3042:	4603      	mov	r3, r0
 80a3044:	71fb      	strb	r3, [r7, #7]
  int res = 0;
 80a3046:	2300      	movs	r3, #0
 80a3048:	60fb      	str	r3, [r7, #12]
  printf("bu27030_light_activate: %d \r\n", activate);
 80a304a:	79fb      	ldrb	r3, [r7, #7]
 80a304c:	4619      	mov	r1, r3
 80a304e:	4809      	ldr	r0, [pc, #36]	; (80a3074 <bu27030_light_activate+0x38>)
 80a3050:	f01d fc90 	bl	80c0974 <iprintf>
  if (activate) {
 80a3054:	79fb      	ldrb	r3, [r7, #7]
 80a3056:	2b00      	cmp	r3, #0
 80a3058:	d003      	beq.n	80a3062 <bu27030_light_activate+0x26>
    res = bu27030_enable();
 80a305a:	f7ff ffa3 	bl	80a2fa4 <bu27030_enable>
 80a305e:	60f8      	str	r0, [r7, #12]
 80a3060:	e002      	b.n	80a3068 <bu27030_light_activate+0x2c>
  } else {
    res = bu27030_disable();
 80a3062:	f7ff ffc5 	bl	80a2ff0 <bu27030_disable>
 80a3066:	60f8      	str	r0, [r7, #12]
  }
  return res;
 80a3068:	68fb      	ldr	r3, [r7, #12]
}
 80a306a:	4618      	mov	r0, r3
 80a306c:	3710      	adds	r7, #16
 80a306e:	46bd      	mov	sp, r7
 80a3070:	bd80      	pop	{r7, pc}
 80a3072:	bf00      	nop
 80a3074:	080c50b0 	.word	0x080c50b0

080a3078 <bu27030_publish_sensor_data>:

/* Main Example --------------------------------------------------------------*/
int bu27030_publish_sensor_data(void *para)
{
 80a3078:	b580      	push	{r7, lr}
 80a307a:	b096      	sub	sp, #88	; 0x58
 80a307c:	af00      	add	r7, sp, #0
 80a307e:	6078      	str	r0, [r7, #4]
  /* Read samples in polling mode (no int) */
  sensors_event_t sensor_data = { 0 };
 80a3080:	f107 0308 	add.w	r3, r7, #8
 80a3084:	2250      	movs	r2, #80	; 0x50
 80a3086:	2100      	movs	r1, #0
 80a3088:	4618      	mov	r0, r3
 80a308a:	f01c ff97 	bl	80bffbc <memset>
  //printf("bu27030_publish_sensor_data: %d \r\n", light_activated);
  if (light_activated) {
 80a308e:	4b1e      	ldr	r3, [pc, #120]	; (80a3108 <bu27030_publish_sensor_data+0x90>)
 80a3090:	781b      	ldrb	r3, [r3, #0]
 80a3092:	2b00      	cmp	r3, #0
 80a3094:	d033      	beq.n	80a30fe <bu27030_publish_sensor_data+0x86>
    // core process
    bu27030_get_raw_data_and_calculated_lux_without_scale(&light_dev_ctx);
 80a3096:	481d      	ldr	r0, [pc, #116]	; (80a310c <bu27030_publish_sensor_data+0x94>)
 80a3098:	f7ff fdbe 	bl	80a2c18 <bu27030_get_raw_data_and_calculated_lux_without_scale>
    //send related messages to SensorDataQ
    sensor_data.sensor_type = SENSOR_TYPE_LIGHT;
 80a309c:	2303      	movs	r3, #3
 80a309e:	723b      	strb	r3, [r7, #8]
    sensor_data.accuracy = 3;
 80a30a0:	2303      	movs	r3, #3
 80a30a2:	727b      	strb	r3, [r7, #9]
    sensor_data.timestamp = sensor_get_timestamp();
 80a30a4:	f00a fb30 	bl	80ad708 <sensor_get_timestamp>
 80a30a8:	4602      	mov	r2, r0
 80a30aa:	460b      	mov	r3, r1
 80a30ac:	e9c7 2304 	strd	r2, r3, [r7, #16]
    sensor_data.sensor_data_t.vec.data[0] = light_data * light_scale;
 80a30b0:	4b17      	ldr	r3, [pc, #92]	; (80a3110 <bu27030_publish_sensor_data+0x98>)
 80a30b2:	ed93 7a00 	vldr	s14, [r3]
 80a30b6:	4b17      	ldr	r3, [pc, #92]	; (80a3114 <bu27030_publish_sensor_data+0x9c>)
 80a30b8:	edd3 7a00 	vldr	s15, [r3]
 80a30bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80a30c0:	edc7 7a06 	vstr	s15, [r7, #24]
    sensor_data.sensor_data_t.vec.data[1] = light_data;
 80a30c4:	4b12      	ldr	r3, [pc, #72]	; (80a3110 <bu27030_publish_sensor_data+0x98>)
 80a30c6:	681b      	ldr	r3, [r3, #0]
 80a30c8:	61fb      	str	r3, [r7, #28]
    sensor_data.sensor_data_t.vec.data[2] = data.data0;
 80a30ca:	4b13      	ldr	r3, [pc, #76]	; (80a3118 <bu27030_publish_sensor_data+0xa0>)
 80a30cc:	681b      	ldr	r3, [r3, #0]
 80a30ce:	ee07 3a90 	vmov	s15, r3
 80a30d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80a30d6:	edc7 7a08 	vstr	s15, [r7, #32]
    sensor_data.sensor_data_t.vec.data[3] = data.data1;
 80a30da:	4b0f      	ldr	r3, [pc, #60]	; (80a3118 <bu27030_publish_sensor_data+0xa0>)
 80a30dc:	685b      	ldr	r3, [r3, #4]
 80a30de:	ee07 3a90 	vmov	s15, r3
 80a30e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80a30e6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    osMessageQueuePut(light_init_parms->SensorDataQHandle, &sensor_data, 0, 0);
 80a30ea:	4b0c      	ldr	r3, [pc, #48]	; (80a311c <bu27030_publish_sensor_data+0xa4>)
 80a30ec:	681b      	ldr	r3, [r3, #0]
 80a30ee:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 80a30f2:	f107 0108 	add.w	r1, r7, #8
 80a30f6:	2300      	movs	r3, #0
 80a30f8:	2200      	movs	r2, #0
 80a30fa:	f013 f983 	bl	80b6404 <osMessageQueuePut>
  }
  return 0;
 80a30fe:	2300      	movs	r3, #0
}
 80a3100:	4618      	mov	r0, r3
 80a3102:	3758      	adds	r7, #88	; 0x58
 80a3104:	46bd      	mov	sp, r7
 80a3106:	bd80      	pop	{r7, pc}
 80a3108:	20007f69 	.word	0x20007f69
 80a310c:	20007f58 	.word	0x20007f58
 80a3110:	20007f50 	.word	0x20007f50
 80a3114:	20007004 	.word	0x20007004
 80a3118:	20007f6c 	.word	0x20007f6c
 80a311c:	20007f64 	.word	0x20007f64

080a3120 <bu27030_init_complete>:

int bu27030_init_complete(void *para)
{
 80a3120:	b480      	push	{r7}
 80a3122:	b083      	sub	sp, #12
 80a3124:	af00      	add	r7, sp, #0
 80a3126:	6078      	str	r0, [r7, #4]
  //send init complete event to smgr?
  return SENSOR_SUCCESS;
 80a3128:	2300      	movs	r3, #0
}
 80a312a:	4618      	mov	r0, r3
 80a312c:	370c      	adds	r7, #12
 80a312e:	46bd      	mov	sp, r7
 80a3130:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a3134:	4770      	bx	lr
	...

080a3138 <bu27030_config>:

int bu27030_config(uint8_t config_type, void *para)
{
 80a3138:	b580      	push	{r7, lr}
 80a313a:	b09a      	sub	sp, #104	; 0x68
 80a313c:	af00      	add	r7, sp, #0
 80a313e:	4603      	mov	r3, r0
 80a3140:	6039      	str	r1, [r7, #0]
 80a3142:	71fb      	strb	r3, [r7, #7]
  //send init complete event to smgr?
  int res = 0;
 80a3144:	2300      	movs	r3, #0
 80a3146:	667b      	str	r3, [r7, #100]	; 0x64
  sensors_event_t sensor_data = { 0 };
 80a3148:	f107 0310 	add.w	r3, r7, #16
 80a314c:	2250      	movs	r2, #80	; 0x50
 80a314e:	2100      	movs	r1, #0
 80a3150:	4618      	mov	r0, r3
 80a3152:	f01c ff33 	bl	80bffbc <memset>

  switch (config_type) {
 80a3156:	79fb      	ldrb	r3, [r7, #7]
 80a3158:	3b02      	subs	r3, #2
 80a315a:	2b06      	cmp	r3, #6
 80a315c:	f200 809a 	bhi.w	80a3294 <bu27030_config+0x15c>
 80a3160:	a201      	add	r2, pc, #4	; (adr r2, 80a3168 <bu27030_config+0x30>)
 80a3162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80a3166:	bf00      	nop
 80a3168:	080a3185 	.word	0x080a3185
 80a316c:	080a318d 	.word	0x080a318d
 80a3170:	080a320b 	.word	0x080a320b
 80a3174:	080a3295 	.word	0x080a3295
 80a3178:	080a3295 	.word	0x080a3295
 80a317c:	080a3295 	.word	0x080a3295
 80a3180:	080a3243 	.word	0x080a3243
  case SENSOR_CONFIG_SELFTEST:
    printf("bu27030 selftest message \r\n");
 80a3184:	4848      	ldr	r0, [pc, #288]	; (80a32a8 <bu27030_config+0x170>)
 80a3186:	f01d fc91 	bl	80c0aac <puts>
    break;
 80a318a:	e088      	b.n	80a329e <bu27030_config+0x166>
  case SENSOR_CONFIG_CALIBRATION:
    printf("bu27030 cali message \r\n");
 80a318c:	4847      	ldr	r0, [pc, #284]	; (80a32ac <bu27030_config+0x174>)
 80a318e:	f01d fc8d 	bl	80c0aac <puts>
    bu27030_init_client(&light_dev_ctx);
 80a3192:	4847      	ldr	r0, [pc, #284]	; (80a32b0 <bu27030_config+0x178>)
 80a3194:	f7ff fa64 	bl	80a2660 <bu27030_init_client>
    uint8_t POWER_ON = 1;
 80a3198:	2301      	movs	r3, #1
 80a319a:	73fb      	strb	r3, [r7, #15]
    uint8_t POWER_OFF = 0;
 80a319c:	2300      	movs	r3, #0
 80a319e:	73bb      	strb	r3, [r7, #14]
    light_platform_write(&light_dev_ctx, BU27030_REG_CONTROL, &POWER_ON, 1);
 80a31a0:	f107 020f 	add.w	r2, r7, #15
 80a31a4:	2301      	movs	r3, #1
 80a31a6:	2143      	movs	r1, #67	; 0x43
 80a31a8:	4841      	ldr	r0, [pc, #260]	; (80a32b0 <bu27030_config+0x178>)
 80a31aa:	f7ff f9e9 	bl	80a2580 <light_platform_write>
    res = bu27030_light_calibration(&light_dev_ctx, &light_scale);
 80a31ae:	4941      	ldr	r1, [pc, #260]	; (80a32b4 <bu27030_config+0x17c>)
 80a31b0:	483f      	ldr	r0, [pc, #252]	; (80a32b0 <bu27030_config+0x178>)
 80a31b2:	f7ff fde9 	bl	80a2d88 <bu27030_light_calibration>
 80a31b6:	6678      	str	r0, [r7, #100]	; 0x64

    light_platform_write(&light_dev_ctx, BU27030_REG_CONTROL, &POWER_OFF, 1);
 80a31b8:	f107 020e 	add.w	r2, r7, #14
 80a31bc:	2301      	movs	r3, #1
 80a31be:	2143      	movs	r1, #67	; 0x43
 80a31c0:	483b      	ldr	r0, [pc, #236]	; (80a32b0 <bu27030_config+0x178>)
 80a31c2:	f7ff f9dd 	bl	80a2580 <light_platform_write>
    if (res == 0) {
 80a31c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80a31c8:	2b00      	cmp	r3, #0
 80a31ca:	d165      	bne.n	80a3298 <bu27030_config+0x160>
      memcpy(&light_init_parms->board_calidata->lux_scale, &light_scale,
 80a31cc:	4b3a      	ldr	r3, [pc, #232]	; (80a32b8 <bu27030_config+0x180>)
 80a31ce:	681b      	ldr	r3, [r3, #0]
 80a31d0:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80a31d4:	3320      	adds	r3, #32
 80a31d6:	4a37      	ldr	r2, [pc, #220]	; (80a32b4 <bu27030_config+0x17c>)
 80a31d8:	6812      	ldr	r2, [r2, #0]
 80a31da:	601a      	str	r2, [r3, #0]
             sizeof(float));
      if (light_init_parms->board_calidata->light_cali_ver != DEFAULT_VERSION)
 80a31dc:	4b36      	ldr	r3, [pc, #216]	; (80a32b8 <bu27030_config+0x180>)
 80a31de:	681b      	ldr	r3, [r3, #0]
 80a31e0:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80a31e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a31e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80a31ea:	d007      	beq.n	80a31fc <bu27030_config+0xc4>
        light_init_parms->board_calidata->light_cali_ver++;
 80a31ec:	4b32      	ldr	r3, [pc, #200]	; (80a32b8 <bu27030_config+0x180>)
 80a31ee:	681b      	ldr	r3, [r3, #0]
 80a31f0:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80a31f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80a31f6:	3201      	adds	r2, #1
 80a31f8:	625a      	str	r2, [r3, #36]	; 0x24
      else
        light_init_parms->board_calidata->light_cali_ver = 1;
    }
    break;
 80a31fa:	e04d      	b.n	80a3298 <bu27030_config+0x160>
        light_init_parms->board_calidata->light_cali_ver = 1;
 80a31fc:	4b2e      	ldr	r3, [pc, #184]	; (80a32b8 <bu27030_config+0x180>)
 80a31fe:	681b      	ldr	r3, [r3, #0]
 80a3200:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80a3204:	2201      	movs	r2, #1
 80a3206:	625a      	str	r2, [r3, #36]	; 0x24
    break;
 80a3208:	e046      	b.n	80a3298 <bu27030_config+0x160>
  case SENSOR_CONFIG_BIAS:
    //store calibrate sensor data to driver when boot up
    if (light_init_parms->board_calidata->light_cali_ver != DEFAULT_VERSION) {
 80a320a:	4b2b      	ldr	r3, [pc, #172]	; (80a32b8 <bu27030_config+0x180>)
 80a320c:	681b      	ldr	r3, [r3, #0]
 80a320e:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80a3212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a3214:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80a3218:	d040      	beq.n	80a329c <bu27030_config+0x164>
      memcpy(&light_scale, &light_init_parms->board_calidata->lux_scale,
 80a321a:	4b27      	ldr	r3, [pc, #156]	; (80a32b8 <bu27030_config+0x180>)
 80a321c:	681b      	ldr	r3, [r3, #0]
 80a321e:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80a3222:	3320      	adds	r3, #32
 80a3224:	681b      	ldr	r3, [r3, #0]
 80a3226:	461a      	mov	r2, r3
 80a3228:	4b22      	ldr	r3, [pc, #136]	; (80a32b4 <bu27030_config+0x17c>)
 80a322a:	601a      	str	r2, [r3, #0]
             sizeof(float));
      printf("light_scale data: {%f} \r\n", light_scale);
 80a322c:	4b21      	ldr	r3, [pc, #132]	; (80a32b4 <bu27030_config+0x17c>)
 80a322e:	681b      	ldr	r3, [r3, #0]
 80a3230:	4618      	mov	r0, r3
 80a3232:	f7fd f989 	bl	80a0548 <__aeabi_f2d>
 80a3236:	4602      	mov	r2, r0
 80a3238:	460b      	mov	r3, r1
 80a323a:	4820      	ldr	r0, [pc, #128]	; (80a32bc <bu27030_config+0x184>)
 80a323c:	f01d fb9a 	bl	80c0974 <iprintf>
    }
    break;
 80a3240:	e02c      	b.n	80a329c <bu27030_config+0x164>
  case SENSOR_CALIBRATION_RESULT:
    sensor_data.sensor_type = SENSOR_TYPE_LIGHT;
 80a3242:	2303      	movs	r3, #3
 80a3244:	743b      	strb	r3, [r7, #16]
    sensor_data.accuracy = 0xFF;
 80a3246:	23ff      	movs	r3, #255	; 0xff
 80a3248:	747b      	strb	r3, [r7, #17]
    sensor_data.timestamp = sensor_get_timestamp();
 80a324a:	f00a fa5d 	bl	80ad708 <sensor_get_timestamp>
 80a324e:	4602      	mov	r2, r0
 80a3250:	460b      	mov	r3, r1
 80a3252:	e9c7 2306 	strd	r2, r3, [r7, #24]
    sensor_data.sensor_data_t.vec.data[0] = light_scale;
 80a3256:	4b17      	ldr	r3, [pc, #92]	; (80a32b4 <bu27030_config+0x17c>)
 80a3258:	681b      	ldr	r3, [r3, #0]
 80a325a:	623b      	str	r3, [r7, #32]
    sensor_data.sensor_data_t.vec.data[1] =
        (float)light_init_parms->board_calidata->light_cali_ver;
 80a325c:	4b16      	ldr	r3, [pc, #88]	; (80a32b8 <bu27030_config+0x180>)
 80a325e:	681b      	ldr	r3, [r3, #0]
 80a3260:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80a3264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a3266:	ee07 3a90 	vmov	s15, r3
 80a326a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    sensor_data.sensor_data_t.vec.data[1] =
 80a326e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    sensor_data.sensor_data_t.vec.data[2] = 0;
 80a3272:	f04f 0300 	mov.w	r3, #0
 80a3276:	62bb      	str	r3, [r7, #40]	; 0x28
    sensor_data.sensor_data_t.vec.data[3] = 0;
 80a3278:	f04f 0300 	mov.w	r3, #0
 80a327c:	62fb      	str	r3, [r7, #44]	; 0x2c
    osMessageQueuePut(light_init_parms->SensorDataQHandle, &sensor_data, 0, 0);
 80a327e:	4b0e      	ldr	r3, [pc, #56]	; (80a32b8 <bu27030_config+0x180>)
 80a3280:	681b      	ldr	r3, [r3, #0]
 80a3282:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 80a3286:	f107 0110 	add.w	r1, r7, #16
 80a328a:	2300      	movs	r3, #0
 80a328c:	2200      	movs	r2, #0
 80a328e:	f013 f8b9 	bl	80b6404 <osMessageQueuePut>
    break;
 80a3292:	e004      	b.n	80a329e <bu27030_config+0x166>
  default:
    break;
 80a3294:	bf00      	nop
 80a3296:	e002      	b.n	80a329e <bu27030_config+0x166>
    break;
 80a3298:	bf00      	nop
 80a329a:	e000      	b.n	80a329e <bu27030_config+0x166>
    break;
 80a329c:	bf00      	nop
  }
  return res;
 80a329e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 80a32a0:	4618      	mov	r0, r3
 80a32a2:	3768      	adds	r7, #104	; 0x68
 80a32a4:	46bd      	mov	sp, r7
 80a32a6:	bd80      	pop	{r7, pc}
 80a32a8:	080c50d0 	.word	0x080c50d0
 80a32ac:	080c50ec 	.word	0x080c50ec
 80a32b0:	20007f58 	.word	0x20007f58
 80a32b4:	20007004 	.word	0x20007004
 80a32b8:	20007f64 	.word	0x20007f64
 80a32bc:	080c5104 	.word	0x080c5104

080a32c0 <bu27030_publish_config_resp>:

int bu27030_publish_config_resp(void *para)
{
 80a32c0:	b480      	push	{r7}
 80a32c2:	b083      	sub	sp, #12
 80a32c4:	af00      	add	r7, sp, #0
 80a32c6:	6078      	str	r0, [r7, #4]
  //send init complete event to smgr?
  return SENSOR_SUCCESS;
 80a32c8:	2300      	movs	r3, #0
}
 80a32ca:	4618      	mov	r0, r3
 80a32cc:	370c      	adds	r7, #12
 80a32ce:	46bd      	mov	sp, r7
 80a32d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a32d4:	4770      	bx	lr
	...

080a32d8 <update_calibration_data_to_flash>:
#include "flash_interface.h"
#include "calibration_data.h"

int update_calibration_data_to_flash(calibrationData * cali_data)
{
 80a32d8:	b580      	push	{r7, lr}
 80a32da:	b086      	sub	sp, #24
 80a32dc:	af00      	add	r7, sp, #0
 80a32de:	6078      	str	r0, [r7, #4]
  int ret = -1, count = 0;
 80a32e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a32e4:	613b      	str	r3, [r7, #16]
 80a32e6:	2300      	movs	r3, #0
 80a32e8:	617b      	str	r3, [r7, #20]
  uint32_t calibration_data_size = 0;
 80a32ea:	2300      	movs	r3, #0
 80a32ec:	60fb      	str	r3, [r7, #12]
  uint32_t *calibration_data_ptr = NULL;
 80a32ee:	2300      	movs	r3, #0
 80a32f0:	60bb      	str	r3, [r7, #8]
  calibration_data_ptr = cali_data;
 80a32f2:	687b      	ldr	r3, [r7, #4]
 80a32f4:	60bb      	str	r3, [r7, #8]
  //return byte num of calibration data
  if (sizeof(calibrationData) % 4 == 0) {
    calibration_data_size = sizeof(calibrationData) / 4;
 80a32f6:	23f1      	movs	r3, #241	; 0xf1
 80a32f8:	60fb      	str	r3, [r7, #12]
  } else {
    calibration_data_size = sizeof(calibrationData) / 4 + 1;
  }

  flash_unlock();
 80a32fa:	f001 f99d 	bl	80a4638 <flash_unlock>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |
 80a32fe:	4b12      	ldr	r3, [pc, #72]	; (80a3348 <update_calibration_data_to_flash+0x70>)
 80a3300:	22f2      	movs	r2, #242	; 0xf2
 80a3302:	60da      	str	r2, [r3, #12]
                         FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR |
                         FLASH_FLAG_PGSERR);
  flash_erase_by_sector(FLASH_CALIBRATION_DATA, 1);
 80a3304:	2101      	movs	r1, #1
 80a3306:	4811      	ldr	r0, [pc, #68]	; (80a334c <update_calibration_data_to_flash+0x74>)
 80a3308:	f001 f9b2 	bl	80a4670 <flash_erase_by_sector>
  do {
    flash_program_by_word(FLASH_CALIBRATION_DATA + count * 4,
 80a330c:	697b      	ldr	r3, [r7, #20]
 80a330e:	009b      	lsls	r3, r3, #2
 80a3310:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80a3314:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
                          *(calibration_data_ptr + count));
 80a3318:	697a      	ldr	r2, [r7, #20]
 80a331a:	0092      	lsls	r2, r2, #2
 80a331c:	68b9      	ldr	r1, [r7, #8]
 80a331e:	440a      	add	r2, r1
    flash_program_by_word(FLASH_CALIBRATION_DATA + count * 4,
 80a3320:	6812      	ldr	r2, [r2, #0]
 80a3322:	4611      	mov	r1, r2
 80a3324:	4618      	mov	r0, r3
 80a3326:	f001 f9d3 	bl	80a46d0 <flash_program_by_word>
    count++;
 80a332a:	697b      	ldr	r3, [r7, #20]
 80a332c:	3301      	adds	r3, #1
 80a332e:	617b      	str	r3, [r7, #20]
  } while (count < calibration_data_size);
 80a3330:	697b      	ldr	r3, [r7, #20]
 80a3332:	68fa      	ldr	r2, [r7, #12]
 80a3334:	429a      	cmp	r2, r3
 80a3336:	d8e9      	bhi.n	80a330c <update_calibration_data_to_flash+0x34>

  flash_lock();
 80a3338:	f001 f98c 	bl	80a4654 <flash_lock>
}
 80a333c:	bf00      	nop
 80a333e:	4618      	mov	r0, r3
 80a3340:	3718      	adds	r7, #24
 80a3342:	46bd      	mov	sp, r7
 80a3344:	bd80      	pop	{r7, pc}
 80a3346:	bf00      	nop
 80a3348:	40023c00 	.word	0x40023c00
 80a334c:	08020000 	.word	0x08020000

080a3350 <chbsp_board_init>:
 *
 * \note This function performs all necessary initialization on the board.
 */

void chbsp_board_init(ch_group_t * grp_ptr)
{
 80a3350:	b480      	push	{r7}
 80a3352:	b083      	sub	sp, #12
 80a3354:	af00      	add	r7, sp, #0
 80a3356:	6078      	str	r0, [r7, #4]

  /* Make local copy of group pointer */
  sensor_group_ptr = grp_ptr;
 80a3358:	4a08      	ldr	r2, [pc, #32]	; (80a337c <chbsp_board_init+0x2c>)
 80a335a:	687b      	ldr	r3, [r7, #4]
 80a335c:	6013      	str	r3, [r2, #0]

  /* Initialize group descriptor */
  grp_ptr->num_ports = CHBSP_MAX_DEVICES;
 80a335e:	687b      	ldr	r3, [r7, #4]
 80a3360:	2201      	movs	r2, #1
 80a3362:	701a      	strb	r2, [r3, #0]
  grp_ptr->num_i2c_buses = CHBSP_NUM_I2C_BUSES;
 80a3364:	687b      	ldr	r3, [r7, #4]
 80a3366:	2201      	movs	r2, #1
 80a3368:	705a      	strb	r2, [r3, #1]
  grp_ptr->rtc_cal_pulse_ms = CHBSP_RTC_CAL_PULSE_MS;
 80a336a:	687b      	ldr	r3, [r7, #4]
 80a336c:	2264      	movs	r2, #100	; 0x64
 80a336e:	80da      	strh	r2, [r3, #6]

  //HAL_PWR_DisableSleepOnExit();
}
 80a3370:	bf00      	nop
 80a3372:	370c      	adds	r7, #12
 80a3374:	46bd      	mov	sp, r7
 80a3376:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a337a:	4770      	bx	lr
 80a337c:	2001b5d4 	.word	0x2001b5d4

080a3380 <chbsp_reset_assert>:
 * \brief Assert the reset pin
 *
 * \note This function should drive the Chirp sensor reset pin low.
 */
void chbsp_reset_assert(void)
{
 80a3380:	b580      	push	{r7, lr}
 80a3382:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(RESET_N_PORT, RESET_N_PIN, RESET_N_ASSERTED_LEVEL);
 80a3384:	2200      	movs	r2, #0
 80a3386:	2104      	movs	r1, #4
 80a3388:	4802      	ldr	r0, [pc, #8]	; (80a3394 <chbsp_reset_assert+0x14>)
 80a338a:	f00e f97d 	bl	80b1688 <HAL_GPIO_WritePin>
}
 80a338e:	bf00      	nop
 80a3390:	bd80      	pop	{r7, pc}
 80a3392:	bf00      	nop
 80a3394:	40020800 	.word	0x40020800

080a3398 <chbsp_reset_release>:
 * \brief Deassert the reset pin
 *
 * \note This function should drive the Chirp sensor reset pin high (or open drain if there is a pull-up).
 */
void chbsp_reset_release(void)
{
 80a3398:	b580      	push	{r7, lr}
 80a339a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(RESET_N_PORT, RESET_N_PIN, RESET_N_DEASSERTED_LEVEL);
 80a339c:	2201      	movs	r2, #1
 80a339e:	2104      	movs	r1, #4
 80a33a0:	4802      	ldr	r0, [pc, #8]	; (80a33ac <chbsp_reset_release+0x14>)
 80a33a2:	f00e f971 	bl	80b1688 <HAL_GPIO_WritePin>
}
 80a33a6:	bf00      	nop
 80a33a8:	bd80      	pop	{r7, pc}
 80a33aa:	bf00      	nop
 80a33ac:	40020800 	.word	0x40020800

080a33b0 <chbsp_program_enable>:
 * \brief Assert the PROG pin
 *
 * \note This function should drive the Chirp sensor PROG pin high on the specified port.
 */
void chbsp_program_enable(ch_dev_t * dev_ptr)
{
 80a33b0:	b580      	push	{r7, lr}
 80a33b2:	b082      	sub	sp, #8
 80a33b4:	af00      	add	r7, sp, #0
 80a33b6:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(chirp_port_prog[dev_ptr->io_index],
 80a33b8:	687b      	ldr	r3, [r7, #4]
 80a33ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80a33be:	461a      	mov	r2, r3
 80a33c0:	4b08      	ldr	r3, [pc, #32]	; (80a33e4 <chbsp_program_enable+0x34>)
 80a33c2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
                    chirp_pin_prog[dev_ptr->io_index], PROG_ASSERTED_LEVEL);
 80a33c6:	687b      	ldr	r3, [r7, #4]
 80a33c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80a33cc:	461a      	mov	r2, r3
  HAL_GPIO_WritePin(chirp_port_prog[dev_ptr->io_index],
 80a33ce:	4b06      	ldr	r3, [pc, #24]	; (80a33e8 <chbsp_program_enable+0x38>)
 80a33d0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80a33d4:	2201      	movs	r2, #1
 80a33d6:	4619      	mov	r1, r3
 80a33d8:	f00e f956 	bl	80b1688 <HAL_GPIO_WritePin>
}
 80a33dc:	bf00      	nop
 80a33de:	3708      	adds	r7, #8
 80a33e0:	46bd      	mov	sp, r7
 80a33e2:	bd80      	pop	{r7, pc}
 80a33e4:	20007018 	.word	0x20007018
 80a33e8:	20007014 	.word	0x20007014

080a33ec <chbsp_program_disable>:
 * \brief Deassert the PROG pin
 *
 * \note This function should drive the Chirp sensor PROG pin low on the specified port.
 */
void chbsp_program_disable(ch_dev_t * dev_ptr)
{
 80a33ec:	b580      	push	{r7, lr}
 80a33ee:	b082      	sub	sp, #8
 80a33f0:	af00      	add	r7, sp, #0
 80a33f2:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(chirp_port_prog[dev_ptr->io_index],
 80a33f4:	687b      	ldr	r3, [r7, #4]
 80a33f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80a33fa:	461a      	mov	r2, r3
 80a33fc:	4b08      	ldr	r3, [pc, #32]	; (80a3420 <chbsp_program_disable+0x34>)
 80a33fe:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
                    chirp_pin_prog[dev_ptr->io_index], PROG_DEASSERTED_LEVEL);
 80a3402:	687b      	ldr	r3, [r7, #4]
 80a3404:	f893 3020 	ldrb.w	r3, [r3, #32]
 80a3408:	461a      	mov	r2, r3
  HAL_GPIO_WritePin(chirp_port_prog[dev_ptr->io_index],
 80a340a:	4b06      	ldr	r3, [pc, #24]	; (80a3424 <chbsp_program_disable+0x38>)
 80a340c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80a3410:	2200      	movs	r2, #0
 80a3412:	4619      	mov	r1, r3
 80a3414:	f00e f938 	bl	80b1688 <HAL_GPIO_WritePin>
}
 80a3418:	bf00      	nop
 80a341a:	3708      	adds	r7, #8
 80a341c:	46bd      	mov	sp, r7
 80a341e:	bd80      	pop	{r7, pc}
 80a3420:	20007018 	.word	0x20007018
 80a3424:	20007014 	.word	0x20007014

080a3428 <chbsp_group_set_io_dir_out>:
 * \brief Configure the host side of the CH101 interrupt pin as an output
 *
 * \note
 */
void chbsp_group_set_io_dir_out(ch_group_t * grp_ptr)
{
 80a3428:	b580      	push	{r7, lr}
 80a342a:	b08a      	sub	sp, #40	; 0x28
 80a342c:	af00      	add	r7, sp, #0
 80a342e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;
  uint16_t iomask = 0;
 80a3430:	2300      	movs	r3, #0
 80a3432:	84fb      	strh	r3, [r7, #38]	; 0x26
  int i;
  for (i = 0; i < grp_ptr->num_ports; i++) {
 80a3434:	2300      	movs	r3, #0
 80a3436:	623b      	str	r3, [r7, #32]
 80a3438:	e012      	b.n	80a3460 <chbsp_group_set_io_dir_out+0x38>
    if (grp_ptr->device[i]->sensor_connected) {
 80a343a:	687a      	ldr	r2, [r7, #4]
 80a343c:	6a3b      	ldr	r3, [r7, #32]
 80a343e:	3304      	adds	r3, #4
 80a3440:	009b      	lsls	r3, r3, #2
 80a3442:	4413      	add	r3, r2
 80a3444:	685b      	ldr	r3, [r3, #4]
 80a3446:	7fdb      	ldrb	r3, [r3, #31]
 80a3448:	2b00      	cmp	r3, #0
 80a344a:	d006      	beq.n	80a345a <chbsp_group_set_io_dir_out+0x32>
      iomask |= chirp_pin_io[i];
 80a344c:	4a12      	ldr	r2, [pc, #72]	; (80a3498 <chbsp_group_set_io_dir_out+0x70>)
 80a344e:	6a3b      	ldr	r3, [r7, #32]
 80a3450:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80a3454:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80a3456:	4313      	orrs	r3, r2
 80a3458:	84fb      	strh	r3, [r7, #38]	; 0x26
  for (i = 0; i < grp_ptr->num_ports; i++) {
 80a345a:	6a3b      	ldr	r3, [r7, #32]
 80a345c:	3301      	adds	r3, #1
 80a345e:	623b      	str	r3, [r7, #32]
 80a3460:	687b      	ldr	r3, [r7, #4]
 80a3462:	781b      	ldrb	r3, [r3, #0]
 80a3464:	461a      	mov	r2, r3
 80a3466:	6a3b      	ldr	r3, [r7, #32]
 80a3468:	4293      	cmp	r3, r2
 80a346a:	dbe6      	blt.n	80a343a <chbsp_group_set_io_dir_out+0x12>
    }
  }
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80a346c:	2301      	movs	r3, #1
 80a346e:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pin = iomask;
 80a3470:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80a3472:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80a3474:	2300      	movs	r3, #0
 80a3476:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(CM_IO_PORT, &GPIO_InitStructure);
 80a3478:	f107 030c 	add.w	r3, r7, #12
 80a347c:	4619      	mov	r1, r3
 80a347e:	4807      	ldr	r0, [pc, #28]	; (80a349c <chbsp_group_set_io_dir_out+0x74>)
 80a3480:	f00d ff4e 	bl	80b1320 <HAL_GPIO_Init>

  //set PC10 to low to make the gpio output enable
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 80a3484:	2200      	movs	r2, #0
 80a3486:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80a348a:	4804      	ldr	r0, [pc, #16]	; (80a349c <chbsp_group_set_io_dir_out+0x74>)
 80a348c:	f00e f8fc 	bl	80b1688 <HAL_GPIO_WritePin>
}
 80a3490:	bf00      	nop
 80a3492:	3728      	adds	r7, #40	; 0x28
 80a3494:	46bd      	mov	sp, r7
 80a3496:	bd80      	pop	{r7, pc}
 80a3498:	2000701c 	.word	0x2000701c
 80a349c:	40020800 	.word	0x40020800

080a34a0 <chbsp_group_set_io_dir_in>:
 * \brief Configure the host side of the CH101 interrupt pin as an input
 *
 * \note This function assumes a bidirectional level shifter is interfacing the ICs.
 */
void chbsp_group_set_io_dir_in(ch_group_t * grp_ptr)
{
 80a34a0:	b580      	push	{r7, lr}
 80a34a2:	b088      	sub	sp, #32
 80a34a4:	af00      	add	r7, sp, #0
 80a34a6:	6078      	str	r0, [r7, #4]

  //set PC10 to high to make the int input enable
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 80a34a8:	2201      	movs	r2, #1
 80a34aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80a34ae:	4809      	ldr	r0, [pc, #36]	; (80a34d4 <chbsp_group_set_io_dir_in+0x34>)
 80a34b0:	f00e f8ea 	bl	80b1688 <HAL_GPIO_WritePin>

  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80a34b4:	2300      	movs	r3, #0
 80a34b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pin = IO_PIN_ALL;
 80a34b8:	2308      	movs	r3, #8
 80a34ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80a34bc:	2300      	movs	r3, #0
 80a34be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(CM_IO_PORT, &GPIO_InitStructure);
 80a34c0:	f107 030c 	add.w	r3, r7, #12
 80a34c4:	4619      	mov	r1, r3
 80a34c6:	4803      	ldr	r0, [pc, #12]	; (80a34d4 <chbsp_group_set_io_dir_in+0x34>)
 80a34c8:	f00d ff2a 	bl	80b1320 <HAL_GPIO_Init>
}
 80a34cc:	bf00      	nop
 80a34ce:	3720      	adds	r7, #32
 80a34d0:	46bd      	mov	sp, r7
 80a34d2:	bd80      	pop	{r7, pc}
 80a34d4:	40020800 	.word	0x40020800

080a34d8 <chbsp_group_pin_init>:
 * \brief Initialize the I/O pins.
 *
 * Configure reset and program pins as outputs. Assert reset and program. Configure IO pin as input.
 */
void chbsp_group_pin_init(ch_group_t * grp_ptr)
{
 80a34d8:	b580      	push	{r7, lr}
 80a34da:	b08c      	sub	sp, #48	; 0x30
 80a34dc:	af00      	add	r7, sp, #0
 80a34de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable necessary clocks */
  RESET_N_PORT_ENABLE();
 80a34e0:	2300      	movs	r3, #0
 80a34e2:	617b      	str	r3, [r7, #20]
 80a34e4:	4b4c      	ldr	r3, [pc, #304]	; (80a3618 <chbsp_group_pin_init+0x140>)
 80a34e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a34e8:	4a4b      	ldr	r2, [pc, #300]	; (80a3618 <chbsp_group_pin_init+0x140>)
 80a34ea:	f043 0304 	orr.w	r3, r3, #4
 80a34ee:	6313      	str	r3, [r2, #48]	; 0x30
 80a34f0:	4b49      	ldr	r3, [pc, #292]	; (80a3618 <chbsp_group_pin_init+0x140>)
 80a34f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a34f4:	f003 0304 	and.w	r3, r3, #4
 80a34f8:	617b      	str	r3, [r7, #20]
 80a34fa:	697b      	ldr	r3, [r7, #20]
  PROG0_PORT_ENABLE();
 80a34fc:	2300      	movs	r3, #0
 80a34fe:	613b      	str	r3, [r7, #16]
 80a3500:	4b45      	ldr	r3, [pc, #276]	; (80a3618 <chbsp_group_pin_init+0x140>)
 80a3502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3504:	4a44      	ldr	r2, [pc, #272]	; (80a3618 <chbsp_group_pin_init+0x140>)
 80a3506:	f043 0304 	orr.w	r3, r3, #4
 80a350a:	6313      	str	r3, [r2, #48]	; 0x30
 80a350c:	4b42      	ldr	r3, [pc, #264]	; (80a3618 <chbsp_group_pin_init+0x140>)
 80a350e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3510:	f003 0304 	and.w	r3, r3, #4
 80a3514:	613b      	str	r3, [r7, #16]
 80a3516:	693b      	ldr	r3, [r7, #16]
  //PROG1_PORT_ENABLE();
  CM_IO_PORT_ENABLE();
 80a3518:	2300      	movs	r3, #0
 80a351a:	60fb      	str	r3, [r7, #12]
 80a351c:	4b3e      	ldr	r3, [pc, #248]	; (80a3618 <chbsp_group_pin_init+0x140>)
 80a351e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3520:	4a3d      	ldr	r2, [pc, #244]	; (80a3618 <chbsp_group_pin_init+0x140>)
 80a3522:	f043 0304 	orr.w	r3, r3, #4
 80a3526:	6313      	str	r3, [r2, #48]	; 0x30
 80a3528:	4b3b      	ldr	r3, [pc, #236]	; (80a3618 <chbsp_group_pin_init+0x140>)
 80a352a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a352c:	f003 0304 	and.w	r3, r3, #4
 80a3530:	60fb      	str	r3, [r7, #12]
 80a3532:	68fb      	ldr	r3, [r7, #12]

  /* Initialize reset */
  GPIO_InitStructure.Mode = RESET_N_MODE;
 80a3534:	2301      	movs	r3, #1
 80a3536:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80a3538:	2300      	movs	r3, #0
 80a353a:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pin = RESET_N_PIN;
 80a353c:	2304      	movs	r3, #4
 80a353e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RESET_N_PORT, &GPIO_InitStructure);
 80a3540:	f107 0318 	add.w	r3, r7, #24
 80a3544:	4619      	mov	r1, r3
 80a3546:	4835      	ldr	r0, [pc, #212]	; (80a361c <chbsp_group_pin_init+0x144>)
 80a3548:	f00d feea 	bl	80b1320 <HAL_GPIO_Init>
  chbsp_reset_assert();
 80a354c:	f7ff ff18 	bl	80a3380 <chbsp_reset_assert>

  /* Initialize program pins */
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80a3550:	2301      	movs	r3, #1
 80a3552:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80a3554:	2300      	movs	r3, #0
 80a3556:	623b      	str	r3, [r7, #32]
  uint8_t i;
  for (i = 0; i < grp_ptr->num_ports; i++) {
 80a3558:	2300      	movs	r3, #0
 80a355a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80a355e:	e01f      	b.n	80a35a0 <chbsp_group_pin_init+0xc8>
    GPIO_InitStructure.Pin = chirp_pin_prog[i];
 80a3560:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80a3564:	4a2e      	ldr	r2, [pc, #184]	; (80a3620 <chbsp_group_pin_init+0x148>)
 80a3566:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80a356a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(chirp_port_prog[i], &GPIO_InitStructure);
 80a356c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80a3570:	4a2c      	ldr	r2, [pc, #176]	; (80a3624 <chbsp_group_pin_init+0x14c>)
 80a3572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80a3576:	f107 0218 	add.w	r2, r7, #24
 80a357a:	4611      	mov	r1, r2
 80a357c:	4618      	mov	r0, r3
 80a357e:	f00d fecf 	bl	80b1320 <HAL_GPIO_Init>
    chbsp_program_enable(grp_ptr->device[i]);
 80a3582:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80a3586:	687a      	ldr	r2, [r7, #4]
 80a3588:	3304      	adds	r3, #4
 80a358a:	009b      	lsls	r3, r3, #2
 80a358c:	4413      	add	r3, r2
 80a358e:	685b      	ldr	r3, [r3, #4]
 80a3590:	4618      	mov	r0, r3
 80a3592:	f7ff ff0d 	bl	80a33b0 <chbsp_program_enable>
  for (i = 0; i < grp_ptr->num_ports; i++) {
 80a3596:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80a359a:	3301      	adds	r3, #1
 80a359c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80a35a0:	687b      	ldr	r3, [r7, #4]
 80a35a2:	781b      	ldrb	r3, [r3, #0]
 80a35a4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80a35a8:	429a      	cmp	r2, r3
 80a35aa:	d3d9      	bcc.n	80a3560 <chbsp_group_pin_init+0x88>
  }

  /* Initialize IO pins */
  chbsp_group_set_io_dir_in(grp_ptr);
 80a35ac:	6878      	ldr	r0, [r7, #4]
 80a35ae:	f7ff ff77 	bl	80a34a0 <chbsp_group_set_io_dir_in>
  for (i = 0; i < grp_ptr->num_ports; i++) {
 80a35b2:	2300      	movs	r3, #0
 80a35b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80a35b8:	e022      	b.n	80a3600 <chbsp_group_pin_init+0x128>
    __HAL_GPIO_EXTI_CLEAR_FLAG(chirp_pin_io[i]);
 80a35ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80a35be:	4a1a      	ldr	r2, [pc, #104]	; (80a3628 <chbsp_group_pin_init+0x150>)
 80a35c0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80a35c4:	4b19      	ldr	r3, [pc, #100]	; (80a362c <chbsp_group_pin_init+0x154>)
 80a35c6:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(chirp_pin_io[i]);
 80a35c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80a35cc:	4a16      	ldr	r2, [pc, #88]	; (80a3628 <chbsp_group_pin_init+0x150>)
 80a35ce:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80a35d2:	4b16      	ldr	r3, [pc, #88]	; (80a362c <chbsp_group_pin_init+0x154>)
 80a35d4:	615a      	str	r2, [r3, #20]
    HAL_NVIC_SetPriority(chirp_pin_io_irq[i], CH_SENSOR_IRQ_PRIORITY, 0);
 80a35d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80a35da:	4a15      	ldr	r2, [pc, #84]	; (80a3630 <chbsp_group_pin_init+0x158>)
 80a35dc:	56d3      	ldrsb	r3, [r2, r3]
 80a35de:	2200      	movs	r2, #0
 80a35e0:	210f      	movs	r1, #15
 80a35e2:	4618      	mov	r0, r3
 80a35e4:	f00c ff8a 	bl	80b04fc <HAL_NVIC_SetPriority>
    HAL_NVIC_DisableIRQ(chirp_pin_io_irq[i]);
 80a35e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80a35ec:	4a10      	ldr	r2, [pc, #64]	; (80a3630 <chbsp_group_pin_init+0x158>)
 80a35ee:	56d3      	ldrsb	r3, [r2, r3]
 80a35f0:	4618      	mov	r0, r3
 80a35f2:	f00c ffad 	bl	80b0550 <HAL_NVIC_DisableIRQ>
  for (i = 0; i < grp_ptr->num_ports; i++) {
 80a35f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80a35fa:	3301      	adds	r3, #1
 80a35fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80a3600:	687b      	ldr	r3, [r7, #4]
 80a3602:	781b      	ldrb	r3, [r3, #0]
 80a3604:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80a3608:	429a      	cmp	r2, r3
 80a360a:	d3d6      	bcc.n	80a35ba <chbsp_group_pin_init+0xe2>
  }
  //cmPinInterruptDisable(grp_ptr);
}
 80a360c:	bf00      	nop
 80a360e:	bf00      	nop
 80a3610:	3730      	adds	r7, #48	; 0x30
 80a3612:	46bd      	mov	sp, r7
 80a3614:	bd80      	pop	{r7, pc}
 80a3616:	bf00      	nop
 80a3618:	40023800 	.word	0x40023800
 80a361c:	40020800 	.word	0x40020800
 80a3620:	20007014 	.word	0x20007014
 80a3624:	20007018 	.word	0x20007018
 80a3628:	2000701c 	.word	0x2000701c
 80a362c:	40013c00 	.word	0x40013c00
 80a3630:	20007020 	.word	0x20007020

080a3634 <chbsp_group_io_clear>:
 * \brief Set the IO pin low.
 *
 * \note If directly coupled to the Chirp sensor it is recommended to use a passive pull-down to ensure the supply is never shorted through the I/O.
 */
void chbsp_group_io_clear(ch_group_t * grp_ptr)
{
 80a3634:	b580      	push	{r7, lr}
 80a3636:	b084      	sub	sp, #16
 80a3638:	af00      	add	r7, sp, #0
 80a363a:	6078      	str	r0, [r7, #4]
  uint16_t iomask = 0;
 80a363c:	2300      	movs	r3, #0
 80a363e:	81fb      	strh	r3, [r7, #14]
  int i;
  for (i = 0; i < grp_ptr->num_ports; i++) {
 80a3640:	2300      	movs	r3, #0
 80a3642:	60bb      	str	r3, [r7, #8]
 80a3644:	e012      	b.n	80a366c <chbsp_group_io_clear+0x38>
    if (grp_ptr->device[i]->sensor_connected) {
 80a3646:	687a      	ldr	r2, [r7, #4]
 80a3648:	68bb      	ldr	r3, [r7, #8]
 80a364a:	3304      	adds	r3, #4
 80a364c:	009b      	lsls	r3, r3, #2
 80a364e:	4413      	add	r3, r2
 80a3650:	685b      	ldr	r3, [r3, #4]
 80a3652:	7fdb      	ldrb	r3, [r3, #31]
 80a3654:	2b00      	cmp	r3, #0
 80a3656:	d006      	beq.n	80a3666 <chbsp_group_io_clear+0x32>
      iomask |= chirp_pin_io[i];
 80a3658:	4a0c      	ldr	r2, [pc, #48]	; (80a368c <chbsp_group_io_clear+0x58>)
 80a365a:	68bb      	ldr	r3, [r7, #8]
 80a365c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80a3660:	89fb      	ldrh	r3, [r7, #14]
 80a3662:	4313      	orrs	r3, r2
 80a3664:	81fb      	strh	r3, [r7, #14]
  for (i = 0; i < grp_ptr->num_ports; i++) {
 80a3666:	68bb      	ldr	r3, [r7, #8]
 80a3668:	3301      	adds	r3, #1
 80a366a:	60bb      	str	r3, [r7, #8]
 80a366c:	687b      	ldr	r3, [r7, #4]
 80a366e:	781b      	ldrb	r3, [r3, #0]
 80a3670:	461a      	mov	r2, r3
 80a3672:	68bb      	ldr	r3, [r7, #8]
 80a3674:	4293      	cmp	r3, r2
 80a3676:	dbe6      	blt.n	80a3646 <chbsp_group_io_clear+0x12>
    }
  }
  HAL_GPIO_WritePin(CM_IO_PORT, iomask, GPIO_PIN_RESET);
 80a3678:	89fb      	ldrh	r3, [r7, #14]
 80a367a:	2200      	movs	r2, #0
 80a367c:	4619      	mov	r1, r3
 80a367e:	4804      	ldr	r0, [pc, #16]	; (80a3690 <chbsp_group_io_clear+0x5c>)
 80a3680:	f00e f802 	bl	80b1688 <HAL_GPIO_WritePin>
}
 80a3684:	bf00      	nop
 80a3686:	3710      	adds	r7, #16
 80a3688:	46bd      	mov	sp, r7
 80a368a:	bd80      	pop	{r7, pc}
 80a368c:	2000701c 	.word	0x2000701c
 80a3690:	40020800 	.word	0x40020800

080a3694 <chbsp_group_io_set>:
 * \brief Set the IO pin high.
 *
 * \note
 */
void chbsp_group_io_set(ch_group_t * grp_ptr)
{
 80a3694:	b580      	push	{r7, lr}
 80a3696:	b084      	sub	sp, #16
 80a3698:	af00      	add	r7, sp, #0
 80a369a:	6078      	str	r0, [r7, #4]
  uint16_t iomask = 0;
 80a369c:	2300      	movs	r3, #0
 80a369e:	81fb      	strh	r3, [r7, #14]
  int i;
  for (i = 0; i < grp_ptr->num_ports; i++) {
 80a36a0:	2300      	movs	r3, #0
 80a36a2:	60bb      	str	r3, [r7, #8]
 80a36a4:	e012      	b.n	80a36cc <chbsp_group_io_set+0x38>
    if (grp_ptr->device[i]->sensor_connected) {
 80a36a6:	687a      	ldr	r2, [r7, #4]
 80a36a8:	68bb      	ldr	r3, [r7, #8]
 80a36aa:	3304      	adds	r3, #4
 80a36ac:	009b      	lsls	r3, r3, #2
 80a36ae:	4413      	add	r3, r2
 80a36b0:	685b      	ldr	r3, [r3, #4]
 80a36b2:	7fdb      	ldrb	r3, [r3, #31]
 80a36b4:	2b00      	cmp	r3, #0
 80a36b6:	d006      	beq.n	80a36c6 <chbsp_group_io_set+0x32>
      iomask |= chirp_pin_io[i];
 80a36b8:	4a0c      	ldr	r2, [pc, #48]	; (80a36ec <chbsp_group_io_set+0x58>)
 80a36ba:	68bb      	ldr	r3, [r7, #8]
 80a36bc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80a36c0:	89fb      	ldrh	r3, [r7, #14]
 80a36c2:	4313      	orrs	r3, r2
 80a36c4:	81fb      	strh	r3, [r7, #14]
  for (i = 0; i < grp_ptr->num_ports; i++) {
 80a36c6:	68bb      	ldr	r3, [r7, #8]
 80a36c8:	3301      	adds	r3, #1
 80a36ca:	60bb      	str	r3, [r7, #8]
 80a36cc:	687b      	ldr	r3, [r7, #4]
 80a36ce:	781b      	ldrb	r3, [r3, #0]
 80a36d0:	461a      	mov	r2, r3
 80a36d2:	68bb      	ldr	r3, [r7, #8]
 80a36d4:	4293      	cmp	r3, r2
 80a36d6:	dbe6      	blt.n	80a36a6 <chbsp_group_io_set+0x12>
    }
  }
  HAL_GPIO_WritePin(CM_IO_PORT, iomask, GPIO_PIN_SET);
 80a36d8:	89fb      	ldrh	r3, [r7, #14]
 80a36da:	2201      	movs	r2, #1
 80a36dc:	4619      	mov	r1, r3
 80a36de:	4804      	ldr	r0, [pc, #16]	; (80a36f0 <chbsp_group_io_set+0x5c>)
 80a36e0:	f00d ffd2 	bl	80b1688 <HAL_GPIO_WritePin>
}
 80a36e4:	bf00      	nop
 80a36e6:	3710      	adds	r7, #16
 80a36e8:	46bd      	mov	sp, r7
 80a36ea:	bd80      	pop	{r7, pc}
 80a36ec:	2000701c 	.word	0x2000701c
 80a36f0:	40020800 	.word	0x40020800

080a36f4 <chbsp_group_io_interrupt_enable>:
 * \brief Enable the interrupt
 *
 * \note
 */
void chbsp_group_io_interrupt_enable(ch_group_t * grp_ptr)
{
 80a36f4:	b580      	push	{r7, lr}
 80a36f6:	b084      	sub	sp, #16
 80a36f8:	af00      	add	r7, sp, #0
 80a36fa:	6078      	str	r0, [r7, #4]
  uint8_t i;

  for (i = 0; i < grp_ptr->num_ports; i++) {
 80a36fc:	2300      	movs	r3, #0
 80a36fe:	73fb      	strb	r3, [r7, #15]
 80a3700:	e00b      	b.n	80a371a <chbsp_group_io_interrupt_enable+0x26>
    //printf("chbsp_group_io_interrupt_enable! %u\r\n", osKernelGetTickCount());
    chbsp_io_interrupt_enable(grp_ptr->device[i]);
 80a3702:	7bfb      	ldrb	r3, [r7, #15]
 80a3704:	687a      	ldr	r2, [r7, #4]
 80a3706:	3304      	adds	r3, #4
 80a3708:	009b      	lsls	r3, r3, #2
 80a370a:	4413      	add	r3, r2
 80a370c:	685b      	ldr	r3, [r3, #4]
 80a370e:	4618      	mov	r0, r3
 80a3710:	f000 f80e 	bl	80a3730 <chbsp_io_interrupt_enable>
  for (i = 0; i < grp_ptr->num_ports; i++) {
 80a3714:	7bfb      	ldrb	r3, [r7, #15]
 80a3716:	3301      	adds	r3, #1
 80a3718:	73fb      	strb	r3, [r7, #15]
 80a371a:	687b      	ldr	r3, [r7, #4]
 80a371c:	781b      	ldrb	r3, [r3, #0]
 80a371e:	7bfa      	ldrb	r2, [r7, #15]
 80a3720:	429a      	cmp	r2, r3
 80a3722:	d3ee      	bcc.n	80a3702 <chbsp_group_io_interrupt_enable+0xe>
  }
}
 80a3724:	bf00      	nop
 80a3726:	bf00      	nop
 80a3728:	3710      	adds	r7, #16
 80a372a:	46bd      	mov	sp, r7
 80a372c:	bd80      	pop	{r7, pc}
	...

080a3730 <chbsp_io_interrupt_enable>:

void chbsp_io_interrupt_enable(ch_dev_t * dev_ptr)
{
 80a3730:	b580      	push	{r7, lr}
 80a3732:	b088      	sub	sp, #32
 80a3734:	af00      	add	r7, sp, #0
 80a3736:	6078      	str	r0, [r7, #4]
  if (dev_ptr->sensor_connected) {
 80a3738:	687b      	ldr	r3, [r7, #4]
 80a373a:	7fdb      	ldrb	r3, [r3, #31]
 80a373c:	2b00      	cmp	r3, #0
 80a373e:	d045      	beq.n	80a37cc <chbsp_io_interrupt_enable+0x9c>
    GPIO_InitTypeDef GPIO_InitStructure;
    //printf("chbsp_io_interrupt_enable: %d\r\n", dev_ptr->io_index);
    /* Enable GPIOA clock */
    CM_IO_PORT_ENABLE();
 80a3740:	2300      	movs	r3, #0
 80a3742:	60bb      	str	r3, [r7, #8]
 80a3744:	4b23      	ldr	r3, [pc, #140]	; (80a37d4 <chbsp_io_interrupt_enable+0xa4>)
 80a3746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3748:	4a22      	ldr	r2, [pc, #136]	; (80a37d4 <chbsp_io_interrupt_enable+0xa4>)
 80a374a:	f043 0304 	orr.w	r3, r3, #4
 80a374e:	6313      	str	r3, [r2, #48]	; 0x30
 80a3750:	4b20      	ldr	r3, [pc, #128]	; (80a37d4 <chbsp_io_interrupt_enable+0xa4>)
 80a3752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3754:	f003 0304 	and.w	r3, r3, #4
 80a3758:	60bb      	str	r3, [r7, #8]
 80a375a:	68bb      	ldr	r3, [r7, #8]

    /* Configure PA0 pin as input pull down */
    __HAL_GPIO_EXTI_CLEAR_FLAG(chirp_pin_io[dev_ptr->io_index]);
 80a375c:	687b      	ldr	r3, [r7, #4]
 80a375e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80a3762:	461a      	mov	r2, r3
 80a3764:	4b1c      	ldr	r3, [pc, #112]	; (80a37d8 <chbsp_io_interrupt_enable+0xa8>)
 80a3766:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80a376a:	4b1c      	ldr	r3, [pc, #112]	; (80a37dc <chbsp_io_interrupt_enable+0xac>)
 80a376c:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(chirp_pin_io[dev_ptr->io_index]);
 80a376e:	687b      	ldr	r3, [r7, #4]
 80a3770:	f893 3020 	ldrb.w	r3, [r3, #32]
 80a3774:	461a      	mov	r2, r3
 80a3776:	4b18      	ldr	r3, [pc, #96]	; (80a37d8 <chbsp_io_interrupt_enable+0xa8>)
 80a3778:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80a377c:	4b17      	ldr	r3, [pc, #92]	; (80a37dc <chbsp_io_interrupt_enable+0xac>)
 80a377e:	615a      	str	r2, [r3, #20]
    GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 80a3780:	4b17      	ldr	r3, [pc, #92]	; (80a37e0 <chbsp_io_interrupt_enable+0xb0>)
 80a3782:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull = GPIO_NOPULL;
 80a3784:	2300      	movs	r3, #0
 80a3786:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Pin = chirp_pin_io[dev_ptr->io_index];
 80a3788:	687b      	ldr	r3, [r7, #4]
 80a378a:	f893 3020 	ldrb.w	r3, [r3, #32]
 80a378e:	461a      	mov	r2, r3
 80a3790:	4b11      	ldr	r3, [pc, #68]	; (80a37d8 <chbsp_io_interrupt_enable+0xa8>)
 80a3792:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80a3796:	60fb      	str	r3, [r7, #12]

    HAL_GPIO_Init(CM_IO_PORT, &GPIO_InitStructure);
 80a3798:	f107 030c 	add.w	r3, r7, #12
 80a379c:	4619      	mov	r1, r3
 80a379e:	4811      	ldr	r0, [pc, #68]	; (80a37e4 <chbsp_io_interrupt_enable+0xb4>)
 80a37a0:	f00d fdbe 	bl	80b1320 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(chirp_pin_io_irq[dev_ptr->io_index],
 80a37a4:	687b      	ldr	r3, [r7, #4]
 80a37a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80a37aa:	461a      	mov	r2, r3
 80a37ac:	4b0e      	ldr	r3, [pc, #56]	; (80a37e8 <chbsp_io_interrupt_enable+0xb8>)
 80a37ae:	569b      	ldrsb	r3, [r3, r2]
 80a37b0:	2200      	movs	r2, #0
 80a37b2:	210f      	movs	r1, #15
 80a37b4:	4618      	mov	r0, r3
 80a37b6:	f00c fea1 	bl	80b04fc <HAL_NVIC_SetPriority>
                         CH_SENSOR_IRQ_PRIORITY, 0);
    HAL_NVIC_EnableIRQ(chirp_pin_io_irq[dev_ptr->io_index]);
 80a37ba:	687b      	ldr	r3, [r7, #4]
 80a37bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80a37c0:	461a      	mov	r2, r3
 80a37c2:	4b09      	ldr	r3, [pc, #36]	; (80a37e8 <chbsp_io_interrupt_enable+0xb8>)
 80a37c4:	569b      	ldrsb	r3, [r3, r2]
 80a37c6:	4618      	mov	r0, r3
 80a37c8:	f00c feb4 	bl	80b0534 <HAL_NVIC_EnableIRQ>
  }
}
 80a37cc:	bf00      	nop
 80a37ce:	3720      	adds	r7, #32
 80a37d0:	46bd      	mov	sp, r7
 80a37d2:	bd80      	pop	{r7, pc}
 80a37d4:	40023800 	.word	0x40023800
 80a37d8:	2000701c 	.word	0x2000701c
 80a37dc:	40013c00 	.word	0x40013c00
 80a37e0:	10110000 	.word	0x10110000
 80a37e4:	40020800 	.word	0x40020800
 80a37e8:	20007020 	.word	0x20007020

080a37ec <chbsp_group_io_interrupt_disable>:
 * \brief Disable the interrupt
 *
 * \note
 */
void chbsp_group_io_interrupt_disable(ch_group_t * grp_ptr)
{
 80a37ec:	b580      	push	{r7, lr}
 80a37ee:	b084      	sub	sp, #16
 80a37f0:	af00      	add	r7, sp, #0
 80a37f2:	6078      	str	r0, [r7, #4]

  uint8_t i;
  for (i = 0; i < grp_ptr->num_ports; i++) {
 80a37f4:	2300      	movs	r3, #0
 80a37f6:	73fb      	strb	r3, [r7, #15]
 80a37f8:	e00b      	b.n	80a3812 <chbsp_group_io_interrupt_disable+0x26>
    //printf("chbsp_io_interrupt_disable! %u\r\n", osKernelGetTickCount());
    chbsp_io_interrupt_disable(grp_ptr->device[i]);
 80a37fa:	7bfb      	ldrb	r3, [r7, #15]
 80a37fc:	687a      	ldr	r2, [r7, #4]
 80a37fe:	3304      	adds	r3, #4
 80a3800:	009b      	lsls	r3, r3, #2
 80a3802:	4413      	add	r3, r2
 80a3804:	685b      	ldr	r3, [r3, #4]
 80a3806:	4618      	mov	r0, r3
 80a3808:	f000 f80e 	bl	80a3828 <chbsp_io_interrupt_disable>
  for (i = 0; i < grp_ptr->num_ports; i++) {
 80a380c:	7bfb      	ldrb	r3, [r7, #15]
 80a380e:	3301      	adds	r3, #1
 80a3810:	73fb      	strb	r3, [r7, #15]
 80a3812:	687b      	ldr	r3, [r7, #4]
 80a3814:	781b      	ldrb	r3, [r3, #0]
 80a3816:	7bfa      	ldrb	r2, [r7, #15]
 80a3818:	429a      	cmp	r2, r3
 80a381a:	d3ee      	bcc.n	80a37fa <chbsp_group_io_interrupt_disable+0xe>
  }
}
 80a381c:	bf00      	nop
 80a381e:	bf00      	nop
 80a3820:	3710      	adds	r7, #16
 80a3822:	46bd      	mov	sp, r7
 80a3824:	bd80      	pop	{r7, pc}
	...

080a3828 <chbsp_io_interrupt_disable>:

void chbsp_io_interrupt_disable(ch_dev_t * dev_ptr)
{
 80a3828:	b580      	push	{r7, lr}
 80a382a:	b082      	sub	sp, #8
 80a382c:	af00      	add	r7, sp, #0
 80a382e:	6078      	str	r0, [r7, #4]

  if (dev_ptr->sensor_connected) {
 80a3830:	687b      	ldr	r3, [r7, #4]
 80a3832:	7fdb      	ldrb	r3, [r3, #31]
 80a3834:	2b00      	cmp	r3, #0
 80a3836:	d008      	beq.n	80a384a <chbsp_io_interrupt_disable+0x22>
    /* Configure PA0 pin as input floating */
    //printf("chbsp_group_io_interrupt_disable: %d\r\n", dev_ptr->io_index);
    HAL_NVIC_DisableIRQ(chirp_pin_io_irq[dev_ptr->io_index]);
 80a3838:	687b      	ldr	r3, [r7, #4]
 80a383a:	f893 3020 	ldrb.w	r3, [r3, #32]
 80a383e:	461a      	mov	r2, r3
 80a3840:	4b04      	ldr	r3, [pc, #16]	; (80a3854 <chbsp_io_interrupt_disable+0x2c>)
 80a3842:	569b      	ldrsb	r3, [r3, r2]
 80a3844:	4618      	mov	r0, r3
 80a3846:	f00c fe83 	bl	80b0550 <HAL_NVIC_DisableIRQ>
  }
}
 80a384a:	bf00      	nop
 80a384c:	3708      	adds	r7, #8
 80a384e:	46bd      	mov	sp, r7
 80a3850:	bd80      	pop	{r7, pc}
 80a3852:	bf00      	nop
 80a3854:	20007020 	.word	0x20007020

080a3858 <chbsp_delay_us>:
 * \brief Busy wait delay for us microseconds
 *
 * \note
 */
void chbsp_delay_us(uint32_t us)
{
 80a3858:	b580      	push	{r7, lr}
 80a385a:	b084      	sub	sp, #16
 80a385c:	af00      	add	r7, sp, #0
 80a385e:	6078      	str	r0, [r7, #4]
  uint32_t cycles_per_us = HAL_RCC_GetSysClockFreq() / 10000000;
 80a3860:	f00f fed6 	bl	80b3610 <HAL_RCC_GetSysClockFreq>
 80a3864:	4603      	mov	r3, r0
 80a3866:	4a0b      	ldr	r2, [pc, #44]	; (80a3894 <chbsp_delay_us+0x3c>)
 80a3868:	fba2 2303 	umull	r2, r3, r2, r3
 80a386c:	0d9b      	lsrs	r3, r3, #22
 80a386e:	60fb      	str	r3, [r7, #12]
  volatile uint32_t i;

  for (i = 0; i < (us * cycles_per_us); i++) {
 80a3870:	2300      	movs	r3, #0
 80a3872:	60bb      	str	r3, [r7, #8]
 80a3874:	e002      	b.n	80a387c <chbsp_delay_us+0x24>
 80a3876:	68bb      	ldr	r3, [r7, #8]
 80a3878:	3301      	adds	r3, #1
 80a387a:	60bb      	str	r3, [r7, #8]
 80a387c:	687b      	ldr	r3, [r7, #4]
 80a387e:	68fa      	ldr	r2, [r7, #12]
 80a3880:	fb02 f203 	mul.w	r2, r2, r3
 80a3884:	68bb      	ldr	r3, [r7, #8]
 80a3886:	429a      	cmp	r2, r3
 80a3888:	d8f5      	bhi.n	80a3876 <chbsp_delay_us+0x1e>
    ;
  }
}
 80a388a:	bf00      	nop
 80a388c:	bf00      	nop
 80a388e:	3710      	adds	r7, #16
 80a3890:	46bd      	mov	sp, r7
 80a3892:	bd80      	pop	{r7, pc}
 80a3894:	6b5fca6b 	.word	0x6b5fca6b

080a3898 <chbsp_delay_ms>:
 * \brief Busy wait delay for ms milliseconds
 *
 * \note
 */
void chbsp_delay_ms(uint32_t ms)
{
 80a3898:	b580      	push	{r7, lr}
 80a389a:	b082      	sub	sp, #8
 80a389c:	af00      	add	r7, sp, #0
 80a389e:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 80a38a0:	6878      	ldr	r0, [r7, #4]
 80a38a2:	f00b fed3 	bl	80af64c <HAL_Delay>
}
 80a38a6:	bf00      	nop
 80a38a8:	3708      	adds	r7, #8
 80a38aa:	46bd      	mov	sp, r7
 80a38ac:	bd80      	pop	{r7, pc}
	...

080a38b0 <chbsp_i2c_init>:
/*!
 * \brief Initialize the host's I2C hardware.
 * Return 0 if successful, non-zero otherwise
 */
int chbsp_i2c_init(void)
{
 80a38b0:	b580      	push	{r7, lr}
 80a38b2:	b082      	sub	sp, #8
 80a38b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef res = HAL_OK;
 80a38b6:	2300      	movs	r3, #0
 80a38b8:	71fb      	strb	r3, [r7, #7]

  //cp chirp_init_parms->i2chandle to hi2c[0] using memory cpy
  if (chirp_init_parms != NULL) {
 80a38ba:	4b0e      	ldr	r3, [pc, #56]	; (80a38f4 <chbsp_i2c_init+0x44>)
 80a38bc:	681b      	ldr	r3, [r3, #0]
 80a38be:	2b00      	cmp	r3, #0
 80a38c0:	d009      	beq.n	80a38d6 <chbsp_i2c_init+0x26>
    hi2c[0] = chirp_init_parms->i2c_handle;
 80a38c2:	4b0c      	ldr	r3, [pc, #48]	; (80a38f4 <chbsp_i2c_init+0x44>)
 80a38c4:	681b      	ldr	r3, [r3, #0]
 80a38c6:	4a0c      	ldr	r2, [pc, #48]	; (80a38f8 <chbsp_i2c_init+0x48>)
 80a38c8:	4610      	mov	r0, r2
 80a38ca:	3304      	adds	r3, #4
 80a38cc:	2254      	movs	r2, #84	; 0x54
 80a38ce:	4619      	mov	r1, r3
 80a38d0:	f01c fb66 	bl	80bffa0 <memcpy>
 80a38d4:	e004      	b.n	80a38e0 <chbsp_i2c_init+0x30>
  } else {
    printf("chirp_init_pram is NULL!\r\n");
 80a38d6:	4809      	ldr	r0, [pc, #36]	; (80a38fc <chbsp_i2c_init+0x4c>)
 80a38d8:	f01d f8e8 	bl	80c0aac <puts>
    res = HAL_ERROR;
 80a38dc:	2301      	movs	r3, #1
 80a38de:	71fb      	strb	r3, [r7, #7]
  }

  return (res != HAL_OK);
 80a38e0:	79fb      	ldrb	r3, [r7, #7]
 80a38e2:	2b00      	cmp	r3, #0
 80a38e4:	bf14      	ite	ne
 80a38e6:	2301      	movne	r3, #1
 80a38e8:	2300      	moveq	r3, #0
 80a38ea:	b2db      	uxtb	r3, r3
}
 80a38ec:	4618      	mov	r0, r3
 80a38ee:	3708      	adds	r7, #8
 80a38f0:	46bd      	mov	sp, r7
 80a38f2:	bd80      	pop	{r7, pc}
 80a38f4:	20007f84 	.word	0x20007f84
 80a38f8:	2001bd88 	.word	0x2001bd88
 80a38fc:	080c5120 	.word	0x080c5120

080a3900 <chbsp_i2c_write>:
 *
 * \note The blocking-mode driver does not always seem to wait for the bus to be free.  This function checks the busy flag
 * explicitly.
 */
int chbsp_i2c_write(ch_dev_t * dev_ptr, uint8_t * data, uint16_t n)
{
 80a3900:	b580      	push	{r7, lr}
 80a3902:	b088      	sub	sp, #32
 80a3904:	af02      	add	r7, sp, #8
 80a3906:	60f8      	str	r0, [r7, #12]
 80a3908:	60b9      	str	r1, [r7, #8]
 80a390a:	4613      	mov	r3, r2
 80a390c:	80fb      	strh	r3, [r7, #6]
  int error = (HAL_I2C_Master_Transmit(&hi2c[dev_ptr->i2c_bus_index],
 80a390e:	68fb      	ldr	r3, [r7, #12]
 80a3910:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80a3914:	461a      	mov	r2, r3
 80a3916:	2354      	movs	r3, #84	; 0x54
 80a3918:	fb03 f302 	mul.w	r3, r3, r2
 80a391c:	4a13      	ldr	r2, [pc, #76]	; (80a396c <chbsp_i2c_write+0x6c>)
 80a391e:	1898      	adds	r0, r3, r2
                                       (uint16_t) (dev_ptr->i2c_address) << 1,
 80a3920:	68fb      	ldr	r3, [r7, #12]
 80a3922:	7e1b      	ldrb	r3, [r3, #24]
 80a3924:	b29b      	uxth	r3, r3
  int error = (HAL_I2C_Master_Transmit(&hi2c[dev_ptr->i2c_bus_index],
 80a3926:	005b      	lsls	r3, r3, #1
 80a3928:	b299      	uxth	r1, r3
 80a392a:	88fb      	ldrh	r3, [r7, #6]
 80a392c:	f242 7210 	movw	r2, #10000	; 0x2710
 80a3930:	9200      	str	r2, [sp, #0]
 80a3932:	68ba      	ldr	r2, [r7, #8]
 80a3934:	f00e f81e 	bl	80b1974 <HAL_I2C_Master_Transmit>
 80a3938:	4603      	mov	r3, r0
 80a393a:	617b      	str	r3, [r7, #20]
                                       data, n, 10000));

  if (!error) {
 80a393c:	697b      	ldr	r3, [r7, #20]
 80a393e:	2b00      	cmp	r3, #0
 80a3940:	d10f      	bne.n	80a3962 <chbsp_i2c_write+0x62>
    while (__HAL_I2C_GET_FLAG(&hi2c[dev_ptr->i2c_bus_index], I2C_FLAG_BUSY)) {
 80a3942:	bf00      	nop
 80a3944:	68fb      	ldr	r3, [r7, #12]
 80a3946:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80a394a:	4619      	mov	r1, r3
 80a394c:	4a07      	ldr	r2, [pc, #28]	; (80a396c <chbsp_i2c_write+0x6c>)
 80a394e:	2354      	movs	r3, #84	; 0x54
 80a3950:	fb03 f301 	mul.w	r3, r3, r1
 80a3954:	4413      	add	r3, r2
 80a3956:	681b      	ldr	r3, [r3, #0]
 80a3958:	699b      	ldr	r3, [r3, #24]
 80a395a:	f003 0302 	and.w	r3, r3, #2
 80a395e:	2b02      	cmp	r3, #2
 80a3960:	d0f0      	beq.n	80a3944 <chbsp_i2c_write+0x44>
      ;                         // wait here until bus not busy
    }
  } else {
    //printf("sensor i2c write Error:%d\n",error);
  }
  return error;
 80a3962:	697b      	ldr	r3, [r7, #20]
}
 80a3964:	4618      	mov	r0, r3
 80a3966:	3718      	adds	r7, #24
 80a3968:	46bd      	mov	sp, r7
 80a396a:	bd80      	pop	{r7, pc}
 80a396c:	2001bd88 	.word	0x2001bd88

080a3970 <chbsp_i2c_mem_write>:

// XXX need comment block
int chbsp_i2c_mem_write(ch_dev_t * dev_ptr, uint16_t mem_addr,
                        uint8_t * data_ptr, uint16_t num_bytes)
{
 80a3970:	b580      	push	{r7, lr}
 80a3972:	b08c      	sub	sp, #48	; 0x30
 80a3974:	af04      	add	r7, sp, #16
 80a3976:	60f8      	str	r0, [r7, #12]
 80a3978:	607a      	str	r2, [r7, #4]
 80a397a:	461a      	mov	r2, r3
 80a397c:	460b      	mov	r3, r1
 80a397e:	817b      	strh	r3, [r7, #10]
 80a3980:	4613      	mov	r3, r2
 80a3982:	813b      	strh	r3, [r7, #8]
  I2C_HandleTypeDef *handle = &hi2c[dev_ptr->i2c_bus_index];
 80a3984:	68fb      	ldr	r3, [r7, #12]
 80a3986:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80a398a:	461a      	mov	r2, r3
 80a398c:	2354      	movs	r3, #84	; 0x54
 80a398e:	fb03 f302 	mul.w	r3, r3, r2
 80a3992:	4a1c      	ldr	r2, [pc, #112]	; (80a3a04 <chbsp_i2c_mem_write+0x94>)
 80a3994:	4413      	add	r3, r2
 80a3996:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef hal_status;
  uint16_t dev_addr = (dev_ptr->i2c_address << 1);      // I2C address for device (shifted)
 80a3998:	68fb      	ldr	r3, [r7, #12]
 80a399a:	7e1b      	ldrb	r3, [r3, #24]
 80a399c:	b29b      	uxth	r3, r3
 80a399e:	005b      	lsls	r3, r3, #1
 80a39a0:	82fb      	strh	r3, [r7, #22]
  int ret_val = 1;
 80a39a2:	2301      	movs	r3, #1
 80a39a4:	61fb      	str	r3, [r7, #28]

#if 1
  printf("chbsp_i2c_mem_write:  calling HAL_I2C_Mem_Read(0x%x, 0x%x, 0x%x, %d, 0x%x, %d, %d)\r\n",      // XXX debug
 80a39a6:	8afa      	ldrh	r2, [r7, #22]
 80a39a8:	8979      	ldrh	r1, [r7, #10]
 80a39aa:	893b      	ldrh	r3, [r7, #8]
 80a39ac:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80a39b0:	9003      	str	r0, [sp, #12]
 80a39b2:	9302      	str	r3, [sp, #8]
 80a39b4:	687b      	ldr	r3, [r7, #4]
 80a39b6:	9301      	str	r3, [sp, #4]
 80a39b8:	2301      	movs	r3, #1
 80a39ba:	9300      	str	r3, [sp, #0]
 80a39bc:	460b      	mov	r3, r1
 80a39be:	69b9      	ldr	r1, [r7, #24]
 80a39c0:	4811      	ldr	r0, [pc, #68]	; (80a3a08 <chbsp_i2c_mem_write+0x98>)
 80a39c2:	f01c ffd7 	bl	80c0974 <iprintf>
         handle, dev_addr, mem_addr, sizeof(uint8_t), data_ptr, num_bytes, I2C_TIMEOUT);        // XXX debug
#endif

  hal_status = HAL_I2C_Mem_Write(handle, dev_addr, mem_addr, sizeof(uint8_t),
 80a39c6:	897a      	ldrh	r2, [r7, #10]
 80a39c8:	8af9      	ldrh	r1, [r7, #22]
 80a39ca:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80a39ce:	9302      	str	r3, [sp, #8]
 80a39d0:	893b      	ldrh	r3, [r7, #8]
 80a39d2:	9301      	str	r3, [sp, #4]
 80a39d4:	687b      	ldr	r3, [r7, #4]
 80a39d6:	9300      	str	r3, [sp, #0]
 80a39d8:	2301      	movs	r3, #1
 80a39da:	69b8      	ldr	r0, [r7, #24]
 80a39dc:	f00e faee 	bl	80b1fbc <HAL_I2C_Mem_Write>
 80a39e0:	4603      	mov	r3, r0
 80a39e2:	757b      	strb	r3, [r7, #21]
                                 data_ptr, num_bytes, I2C_TIMEOUT);
#if 1
  printf(" chbsp_i2c_mem_write hal_status = 0x%x\r\n", hal_status);     // XXX debug
 80a39e4:	7d7b      	ldrb	r3, [r7, #21]
 80a39e6:	4619      	mov	r1, r3
 80a39e8:	4808      	ldr	r0, [pc, #32]	; (80a3a0c <chbsp_i2c_mem_write+0x9c>)
 80a39ea:	f01c ffc3 	bl	80c0974 <iprintf>
#endif
  if (hal_status == HAL_OK) {
 80a39ee:	7d7b      	ldrb	r3, [r7, #21]
 80a39f0:	2b00      	cmp	r3, #0
 80a39f2:	d101      	bne.n	80a39f8 <chbsp_i2c_mem_write+0x88>
    ret_val = 0;                // indicate success
 80a39f4:	2300      	movs	r3, #0
 80a39f6:	61fb      	str	r3, [r7, #28]
  }

  return ret_val;
 80a39f8:	69fb      	ldr	r3, [r7, #28]

}
 80a39fa:	4618      	mov	r0, r3
 80a39fc:	3720      	adds	r7, #32
 80a39fe:	46bd      	mov	sp, r7
 80a3a00:	bd80      	pop	{r7, pc}
 80a3a02:	bf00      	nop
 80a3a04:	2001bd88 	.word	0x2001bd88
 80a3a08:	080c513c 	.word	0x080c513c
 80a3a0c:	080c5194 	.word	0x080c5194

080a3a10 <chbsp_i2c_read>:
 * \note The blocking-mode driver does not always seem to wait for the bus to be free.  This function checks the busy flag
 * explicitly.
 */
//#define I2CDEBUG
int chbsp_i2c_read(ch_dev_t * dev_ptr, uint8_t * data, uint16_t len)
{
 80a3a10:	b580      	push	{r7, lr}
 80a3a12:	b088      	sub	sp, #32
 80a3a14:	af02      	add	r7, sp, #8
 80a3a16:	60f8      	str	r0, [r7, #12]
 80a3a18:	60b9      	str	r1, [r7, #8]
 80a3a1a:	4613      	mov	r3, r2
 80a3a1c:	80fb      	strh	r3, [r7, #6]
#ifdef I2CDEBUG
  int32_t timeout = 10000000;
#endif
  int error = (HAL_I2C_Master_Receive(&hi2c[dev_ptr->i2c_bus_index],
 80a3a1e:	68fb      	ldr	r3, [r7, #12]
 80a3a20:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80a3a24:	461a      	mov	r2, r3
 80a3a26:	2354      	movs	r3, #84	; 0x54
 80a3a28:	fb03 f302 	mul.w	r3, r3, r2
 80a3a2c:	4a1c      	ldr	r2, [pc, #112]	; (80a3aa0 <chbsp_i2c_read+0x90>)
 80a3a2e:	1898      	adds	r0, r3, r2
                                      (uint16_t) (dev_ptr->i2c_address) << 1,
 80a3a30:	68fb      	ldr	r3, [r7, #12]
 80a3a32:	7e1b      	ldrb	r3, [r3, #24]
 80a3a34:	b29b      	uxth	r3, r3
  int error = (HAL_I2C_Master_Receive(&hi2c[dev_ptr->i2c_bus_index],
 80a3a36:	005b      	lsls	r3, r3, #1
 80a3a38:	b299      	uxth	r1, r3
 80a3a3a:	88fb      	ldrh	r3, [r7, #6]
 80a3a3c:	2264      	movs	r2, #100	; 0x64
 80a3a3e:	9200      	str	r2, [sp, #0]
 80a3a40:	68ba      	ldr	r2, [r7, #8]
 80a3a42:	f00e f895 	bl	80b1b70 <HAL_I2C_Master_Receive>
 80a3a46:	4603      	mov	r3, r0
                                      data, len, 100) != HAL_OK);
 80a3a48:	2b00      	cmp	r3, #0
 80a3a4a:	bf14      	ite	ne
 80a3a4c:	2301      	movne	r3, #1
 80a3a4e:	2300      	moveq	r3, #0
 80a3a50:	b2db      	uxtb	r3, r3
  int error = (HAL_I2C_Master_Receive(&hi2c[dev_ptr->i2c_bus_index],
 80a3a52:	617b      	str	r3, [r7, #20]
  if (!error)
 80a3a54:	697b      	ldr	r3, [r7, #20]
 80a3a56:	2b00      	cmp	r3, #0
 80a3a58:	d10f      	bne.n	80a3a7a <chbsp_i2c_read+0x6a>
#ifdef I2CDEBUG
    if (timeout == 10000000)
      printf("len: %u\n", len);
#endif
  while (__HAL_I2C_GET_FLAG(&hi2c[dev_ptr->i2c_bus_index], I2C_FLAG_BUSY)) {
 80a3a5a:	bf00      	nop
 80a3a5c:	68fb      	ldr	r3, [r7, #12]
 80a3a5e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80a3a62:	4619      	mov	r1, r3
 80a3a64:	4a0e      	ldr	r2, [pc, #56]	; (80a3aa0 <chbsp_i2c_read+0x90>)
 80a3a66:	2354      	movs	r3, #84	; 0x54
 80a3a68:	fb03 f301 	mul.w	r3, r3, r1
 80a3a6c:	4413      	add	r3, r2
 80a3a6e:	681b      	ldr	r3, [r3, #0]
 80a3a70:	699b      	ldr	r3, [r3, #24]
 80a3a72:	f003 0302 	and.w	r3, r3, #2
 80a3a76:	2b02      	cmp	r3, #2
 80a3a78:	d0f0      	beq.n	80a3a5c <chbsp_i2c_read+0x4c>
    if (timeout < 0) {
      printf("i2c Timed out!!!!!!!!!!!!!!!\n");
    }
#endif
  }
  if (error) {
 80a3a7a:	697b      	ldr	r3, [r7, #20]
 80a3a7c:	2b00      	cmp	r3, #0
 80a3a7e:	d009      	beq.n	80a3a94 <chbsp_i2c_read+0x84>
    printf("i2c error: %u ! %u:%u\n", error, dev_ptr->i2c_bus_index,
 80a3a80:	68fb      	ldr	r3, [r7, #12]
 80a3a82:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80a3a86:	461a      	mov	r2, r3
           dev_ptr->i2c_address);
 80a3a88:	68fb      	ldr	r3, [r7, #12]
 80a3a8a:	7e1b      	ldrb	r3, [r3, #24]
    printf("i2c error: %u ! %u:%u\n", error, dev_ptr->i2c_bus_index,
 80a3a8c:	6979      	ldr	r1, [r7, #20]
 80a3a8e:	4805      	ldr	r0, [pc, #20]	; (80a3aa4 <chbsp_i2c_read+0x94>)
 80a3a90:	f01c ff70 	bl	80c0974 <iprintf>
  }
  return error;
 80a3a94:	697b      	ldr	r3, [r7, #20]
}
 80a3a96:	4618      	mov	r0, r3
 80a3a98:	3718      	adds	r7, #24
 80a3a9a:	46bd      	mov	sp, r7
 80a3a9c:	bd80      	pop	{r7, pc}
 80a3a9e:	bf00      	nop
 80a3aa0:	2001bd88 	.word	0x2001bd88
 80a3aa4:	080c51c0 	.word	0x080c51c0

080a3aa8 <chbsp_i2c_mem_read>:

// XXX need comment block
//
int chbsp_i2c_mem_read(ch_dev_t * dev_ptr, uint16_t mem_addr,
                       uint8_t * data_ptr, uint16_t num_bytes)
{
 80a3aa8:	b580      	push	{r7, lr}
 80a3aaa:	b08c      	sub	sp, #48	; 0x30
 80a3aac:	af04      	add	r7, sp, #16
 80a3aae:	60f8      	str	r0, [r7, #12]
 80a3ab0:	607a      	str	r2, [r7, #4]
 80a3ab2:	461a      	mov	r2, r3
 80a3ab4:	460b      	mov	r3, r1
 80a3ab6:	817b      	strh	r3, [r7, #10]
 80a3ab8:	4613      	mov	r3, r2
 80a3aba:	813b      	strh	r3, [r7, #8]
  I2C_HandleTypeDef *handle = &hi2c[dev_ptr->i2c_bus_index];
 80a3abc:	68fb      	ldr	r3, [r7, #12]
 80a3abe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80a3ac2:	461a      	mov	r2, r3
 80a3ac4:	2354      	movs	r3, #84	; 0x54
 80a3ac6:	fb03 f302 	mul.w	r3, r3, r2
 80a3aca:	4a1c      	ldr	r2, [pc, #112]	; (80a3b3c <chbsp_i2c_mem_read+0x94>)
 80a3acc:	4413      	add	r3, r2
 80a3ace:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef hal_status;
  uint16_t dev_addr = (dev_ptr->i2c_address << 1);      // I2C address for device (shifted)
 80a3ad0:	68fb      	ldr	r3, [r7, #12]
 80a3ad2:	7e1b      	ldrb	r3, [r3, #24]
 80a3ad4:	b29b      	uxth	r3, r3
 80a3ad6:	005b      	lsls	r3, r3, #1
 80a3ad8:	82fb      	strh	r3, [r7, #22]
  int ret_val = 1;
 80a3ada:	2301      	movs	r3, #1
 80a3adc:	61fb      	str	r3, [r7, #28]

#if 1
  printf("chbsp_i2c_mem_read:  calling HAL_I2C_Mem_Read(0x%x, 0x%x, 0x%x, %d, 0x%x, %d, %d)\r\n",       // XXX debug
 80a3ade:	8afa      	ldrh	r2, [r7, #22]
 80a3ae0:	8979      	ldrh	r1, [r7, #10]
 80a3ae2:	893b      	ldrh	r3, [r7, #8]
 80a3ae4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80a3ae8:	9003      	str	r0, [sp, #12]
 80a3aea:	9302      	str	r3, [sp, #8]
 80a3aec:	687b      	ldr	r3, [r7, #4]
 80a3aee:	9301      	str	r3, [sp, #4]
 80a3af0:	2301      	movs	r3, #1
 80a3af2:	9300      	str	r3, [sp, #0]
 80a3af4:	460b      	mov	r3, r1
 80a3af6:	69b9      	ldr	r1, [r7, #24]
 80a3af8:	4811      	ldr	r0, [pc, #68]	; (80a3b40 <chbsp_i2c_mem_read+0x98>)
 80a3afa:	f01c ff3b 	bl	80c0974 <iprintf>
         handle, dev_addr, mem_addr, sizeof(uint8_t), data_ptr, num_bytes, I2C_TIMEOUT);        // XXX debug
#endif
  hal_status = HAL_I2C_Mem_Read(handle, dev_addr, mem_addr, sizeof(uint8_t),
 80a3afe:	897a      	ldrh	r2, [r7, #10]
 80a3b00:	8af9      	ldrh	r1, [r7, #22]
 80a3b02:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80a3b06:	9302      	str	r3, [sp, #8]
 80a3b08:	893b      	ldrh	r3, [r7, #8]
 80a3b0a:	9301      	str	r3, [sp, #4]
 80a3b0c:	687b      	ldr	r3, [r7, #4]
 80a3b0e:	9300      	str	r3, [sp, #0]
 80a3b10:	2301      	movs	r3, #1
 80a3b12:	69b8      	ldr	r0, [r7, #24]
 80a3b14:	f00e fb4c 	bl	80b21b0 <HAL_I2C_Mem_Read>
 80a3b18:	4603      	mov	r3, r0
 80a3b1a:	757b      	strb	r3, [r7, #21]
                                data_ptr, num_bytes, I2C_TIMEOUT);

#if 1
  printf("chbsp_i2c_mem_read hal_status = 0x%x\r\n", hal_status);       // XXX debug
 80a3b1c:	7d7b      	ldrb	r3, [r7, #21]
 80a3b1e:	4619      	mov	r1, r3
 80a3b20:	4808      	ldr	r0, [pc, #32]	; (80a3b44 <chbsp_i2c_mem_read+0x9c>)
 80a3b22:	f01c ff27 	bl	80c0974 <iprintf>
#endif

  if (hal_status == HAL_OK) {
 80a3b26:	7d7b      	ldrb	r3, [r7, #21]
 80a3b28:	2b00      	cmp	r3, #0
 80a3b2a:	d101      	bne.n	80a3b30 <chbsp_i2c_mem_read+0x88>
    ret_val = 0;                // indicate success
 80a3b2c:	2300      	movs	r3, #0
 80a3b2e:	61fb      	str	r3, [r7, #28]
  }

  return ret_val;
 80a3b30:	69fb      	ldr	r3, [r7, #28]
}
 80a3b32:	4618      	mov	r0, r3
 80a3b34:	3720      	adds	r7, #32
 80a3b36:	46bd      	mov	sp, r7
 80a3b38:	bd80      	pop	{r7, pc}
 80a3b3a:	bf00      	nop
 80a3b3c:	2001bd88 	.word	0x2001bd88
 80a3b40:	080c51d8 	.word	0x080c51d8
 80a3b44:	080c522c 	.word	0x080c522c

080a3b48 <chbsp_debug_toggle>:
{
  //DBG_PIN_OFF(dbg_pin_num);
}

void chbsp_debug_toggle(uint8_t dbg_pin_num)
{
 80a3b48:	b480      	push	{r7}
 80a3b4a:	b083      	sub	sp, #12
 80a3b4c:	af00      	add	r7, sp, #0
 80a3b4e:	4603      	mov	r3, r0
 80a3b50:	71fb      	strb	r3, [r7, #7]
  //DBG_PIN_TOGGLE(dbg_pin_num);
}
 80a3b52:	bf00      	nop
 80a3b54:	370c      	adds	r7, #12
 80a3b56:	46bd      	mov	sp, r7
 80a3b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a3b5c:	4770      	bx	lr
	...

080a3b60 <chbsp_i2c_reset>:

void chbsp_i2c_reset(ch_dev_t * dev_ptr)
{
 80a3b60:	b580      	push	{r7, lr}
 80a3b62:	b082      	sub	sp, #8
 80a3b64:	af00      	add	r7, sp, #0
 80a3b66:	6078      	str	r0, [r7, #4]
  HAL_I2C_Init(&hi2c[dev_ptr->i2c_bus_index]);
 80a3b68:	687b      	ldr	r3, [r7, #4]
 80a3b6a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80a3b6e:	461a      	mov	r2, r3
 80a3b70:	2354      	movs	r3, #84	; 0x54
 80a3b72:	fb03 f302 	mul.w	r3, r3, r2
 80a3b76:	4a04      	ldr	r2, [pc, #16]	; (80a3b88 <chbsp_i2c_reset+0x28>)
 80a3b78:	4413      	add	r3, r2
 80a3b7a:	4618      	mov	r0, r3
 80a3b7c:	f00d fdb6 	bl	80b16ec <HAL_I2C_Init>
}
 80a3b80:	bf00      	nop
 80a3b82:	3708      	adds	r7, #8
 80a3b84:	46bd      	mov	sp, r7
 80a3b86:	bd80      	pop	{r7, pc}
 80a3b88:	2001bd88 	.word	0x2001bd88

080a3b8c <chbsp_periodic_timer_init>:
 * This function should set up a timer with a resolution of 20us.
 * This will be used to set the interval between pulses on the base station
 */
uint8_t chbsp_periodic_timer_init(uint16_t interval_ms,
                                  ch_timer_callback_t callback_func_ptr)
{
 80a3b8c:	b580      	push	{r7, lr}
 80a3b8e:	b082      	sub	sp, #8
 80a3b90:	af00      	add	r7, sp, #0
 80a3b92:	4603      	mov	r3, r0
 80a3b94:	6039      	str	r1, [r7, #0]
 80a3b96:	80fb      	strh	r3, [r7, #6]

  periodic_timer_callback_ptr = callback_func_ptr;
 80a3b98:	4a0b      	ldr	r2, [pc, #44]	; (80a3bc8 <chbsp_periodic_timer_init+0x3c>)
 80a3b9a:	683b      	ldr	r3, [r7, #0]
 80a3b9c:	6013      	str	r3, [r2, #0]
  periodic_timer_interval_ms = interval_ms;
 80a3b9e:	4a0b      	ldr	r2, [pc, #44]	; (80a3bcc <chbsp_periodic_timer_init+0x40>)
 80a3ba0:	88fb      	ldrh	r3, [r7, #6]
 80a3ba2:	8013      	strh	r3, [r2, #0]

  /*
   * Set timer up with resolution of 320ns
   *
   */
  if (chirp_init_parms != NULL) {
 80a3ba4:	4b0a      	ldr	r3, [pc, #40]	; (80a3bd0 <chbsp_periodic_timer_init+0x44>)
 80a3ba6:	681b      	ldr	r3, [r3, #0]
 80a3ba8:	2b00      	cmp	r3, #0
 80a3baa:	d006      	beq.n	80a3bba <chbsp_periodic_timer_init+0x2e>
    tim3 = &chirp_init_parms->OperateTimerHandle;
 80a3bac:	4b08      	ldr	r3, [pc, #32]	; (80a3bd0 <chbsp_periodic_timer_init+0x44>)
 80a3bae:	681b      	ldr	r3, [r3, #0]
 80a3bb0:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80a3bb4:	4a07      	ldr	r2, [pc, #28]	; (80a3bd4 <chbsp_periodic_timer_init+0x48>)
 80a3bb6:	6013      	str	r3, [r2, #0]
 80a3bb8:	e001      	b.n	80a3bbe <chbsp_periodic_timer_init+0x32>
  } else {
    Error_Handler();
 80a3bba:	f005 ffad 	bl	80a9b18 <Error_Handler>
  }

  return 0;
 80a3bbe:	2300      	movs	r3, #0
}
 80a3bc0:	4618      	mov	r0, r3
 80a3bc2:	3708      	adds	r7, #8
 80a3bc4:	46bd      	mov	sp, r7
 80a3bc6:	bd80      	pop	{r7, pc}
 80a3bc8:	20007f7c 	.word	0x20007f7c
 80a3bcc:	20007f80 	.word	0x20007f80
 80a3bd0:	20007f84 	.word	0x20007f84
 80a3bd4:	2001bce8 	.word	0x2001bce8

080a3bd8 <chbsp_periodic_timer_handler>:

/*
 * This function is called by the timer interrupt to indicate that the periodic timer has expired.
 */
void chbsp_periodic_timer_handler(void)
{
 80a3bd8:	b580      	push	{r7, lr}
 80a3bda:	b082      	sub	sp, #8
 80a3bdc:	af00      	add	r7, sp, #0
  ch_timer_callback_t func_ptr = periodic_timer_callback_ptr;
 80a3bde:	4b06      	ldr	r3, [pc, #24]	; (80a3bf8 <chbsp_periodic_timer_handler+0x20>)
 80a3be0:	681b      	ldr	r3, [r3, #0]
 80a3be2:	607b      	str	r3, [r7, #4]
  //printf("chbsp_periodic_timer_handler: %p\r\n", func_ptr);
  if (func_ptr != NULL) {
 80a3be4:	687b      	ldr	r3, [r7, #4]
 80a3be6:	2b00      	cmp	r3, #0
 80a3be8:	d001      	beq.n	80a3bee <chbsp_periodic_timer_handler+0x16>
    //printf("chbsp_periodic_timer_handler\r\n");
    (*func_ptr) ();             // call application timer callback routine
 80a3bea:	687b      	ldr	r3, [r7, #4]
 80a3bec:	4798      	blx	r3
  }
}
 80a3bee:	bf00      	nop
 80a3bf0:	3708      	adds	r7, #8
 80a3bf2:	46bd      	mov	sp, r7
 80a3bf4:	bd80      	pop	{r7, pc}
 80a3bf6:	bf00      	nop
 80a3bf8:	20007f7c 	.word	0x20007f7c

080a3bfc <chbsp_i2c_get_info>:
 *
 * Note: grp_ptr is not used by this implementation - all I2C addresses are from same set
 */
uint8_t chbsp_i2c_get_info(ch_group_t * grp_ptr, uint8_t io_index,
                           ch_i2c_info_t * info_ptr)
{
 80a3bfc:	b480      	push	{r7}
 80a3bfe:	b087      	sub	sp, #28
 80a3c00:	af00      	add	r7, sp, #0
 80a3c02:	60f8      	str	r0, [r7, #12]
 80a3c04:	460b      	mov	r3, r1
 80a3c06:	607a      	str	r2, [r7, #4]
 80a3c08:	72fb      	strb	r3, [r7, #11]
  uint8_t ret_val = 1;
 80a3c0a:	2301      	movs	r3, #1
 80a3c0c:	75fb      	strb	r3, [r7, #23]

  if (io_index < CHBSP_MAX_DEVICES) {
 80a3c0e:	7afb      	ldrb	r3, [r7, #11]
 80a3c10:	2b00      	cmp	r3, #0
 80a3c12:	d10e      	bne.n	80a3c32 <chbsp_i2c_get_info+0x36>
    info_ptr->address = chirp_i2c_addrs[io_index];
 80a3c14:	7afb      	ldrb	r3, [r7, #11]
 80a3c16:	4a0a      	ldr	r2, [pc, #40]	; (80a3c40 <chbsp_i2c_get_info+0x44>)
 80a3c18:	5cd2      	ldrb	r2, [r2, r3]
 80a3c1a:	687b      	ldr	r3, [r7, #4]
 80a3c1c:	701a      	strb	r2, [r3, #0]
    info_ptr->bus_num = chirp_i2c_buses[io_index];
 80a3c1e:	7afb      	ldrb	r3, [r7, #11]
 80a3c20:	4a08      	ldr	r2, [pc, #32]	; (80a3c44 <chbsp_i2c_get_info+0x48>)
 80a3c22:	5cd2      	ldrb	r2, [r2, r3]
 80a3c24:	687b      	ldr	r3, [r7, #4]
 80a3c26:	705a      	strb	r2, [r3, #1]

    info_ptr->drv_flags = I2C_DRV_FLAGS;        // i2c driver special handling flags, from board header file
 80a3c28:	687b      	ldr	r3, [r7, #4]
 80a3c2a:	2203      	movs	r2, #3
 80a3c2c:	805a      	strh	r2, [r3, #2]

    ret_val = 0;
 80a3c2e:	2300      	movs	r3, #0
 80a3c30:	75fb      	strb	r3, [r7, #23]
  }

  return ret_val;
 80a3c32:	7dfb      	ldrb	r3, [r7, #23]
}
 80a3c34:	4618      	mov	r0, r3
 80a3c36:	371c      	adds	r7, #28
 80a3c38:	46bd      	mov	sp, r7
 80a3c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a3c3e:	4770      	bx	lr
 80a3c40:	20007010 	.word	0x20007010
 80a3c44:	20007f78 	.word	0x20007f78

080a3c48 <periodic_timer_callback>:
 * This callback function is registered by the call to chbsp_periodic_timer_init() 
 * in main().
 */

static void periodic_timer_callback(void)
{
 80a3c48:	b580      	push	{r7, lr}
 80a3c4a:	af00      	add	r7, sp, #0
  //printf("periodic_timer_callback\r\n");
  ch_group_trigger(&chirp_group);
 80a3c4c:	4802      	ldr	r0, [pc, #8]	; (80a3c58 <periodic_timer_callback+0x10>)
 80a3c4e:	f015 fc8f 	bl	80b9570 <ch_group_trigger>
}
 80a3c52:	bf00      	nop
 80a3c54:	bd80      	pop	{r7, pc}
 80a3c56:	bf00      	nop
 80a3c58:	2001b574 	.word	0x2001b574

080a3c5c <sensor_int_callback>:
 *
 * This callback function is registered by the call to ch_io_int_callback_set() 
 * in main().
 */
static void sensor_int_callback(ch_group_t * grp_ptr, uint8_t dev_num)
{
 80a3c5c:	b580      	push	{r7, lr}
 80a3c5e:	b084      	sub	sp, #16
 80a3c60:	af00      	add	r7, sp, #0
 80a3c62:	6078      	str	r0, [r7, #4]
 80a3c64:	460b      	mov	r3, r1
 80a3c66:	70fb      	strb	r3, [r7, #3]
  ch_dev_t *dev_ptr = ch_get_dev_ptr(grp_ptr, dev_num);
 80a3c68:	78fb      	ldrb	r3, [r7, #3]
 80a3c6a:	4619      	mov	r1, r3
 80a3c6c:	6878      	ldr	r0, [r7, #4]
 80a3c6e:	f015 fcaf 	bl	80b95d0 <ch_get_dev_ptr>
 80a3c72:	60f8      	str	r0, [r7, #12]

  data_ready_devices |= (1 << dev_num); // add to data-ready bit mask
 80a3c74:	78fb      	ldrb	r3, [r7, #3]
 80a3c76:	2201      	movs	r2, #1
 80a3c78:	fa02 f303 	lsl.w	r3, r2, r3
 80a3c7c:	461a      	mov	r2, r3
 80a3c7e:	4b10      	ldr	r3, [pc, #64]	; (80a3cc0 <sensor_int_callback+0x64>)
 80a3c80:	681b      	ldr	r3, [r3, #0]
 80a3c82:	4313      	orrs	r3, r2
 80a3c84:	4a0e      	ldr	r2, [pc, #56]	; (80a3cc0 <sensor_int_callback+0x64>)
 80a3c86:	6013      	str	r3, [r2, #0]

  if (data_ready_devices == active_devices) {
 80a3c88:	4b0d      	ldr	r3, [pc, #52]	; (80a3cc0 <sensor_int_callback+0x64>)
 80a3c8a:	681a      	ldr	r2, [r3, #0]
 80a3c8c:	4b0d      	ldr	r3, [pc, #52]	; (80a3cc4 <sensor_int_callback+0x68>)
 80a3c8e:	681b      	ldr	r3, [r3, #0]
 80a3c90:	429a      	cmp	r2, r3
 80a3c92:	d111      	bne.n	80a3cb8 <sensor_int_callback+0x5c>
    /* All active sensors have interrupted after performing a measurement */
    data_ready_devices = 0;
 80a3c94:	4b0a      	ldr	r3, [pc, #40]	; (80a3cc0 <sensor_int_callback+0x64>)
 80a3c96:	2200      	movs	r2, #0
 80a3c98:	601a      	str	r2, [r3, #0]

    /* Set data-ready flag - it will be checked in main() loop */
    taskflags |= DATA_READY_FLAG;
 80a3c9a:	4b0b      	ldr	r3, [pc, #44]	; (80a3cc8 <sensor_int_callback+0x6c>)
 80a3c9c:	681b      	ldr	r3, [r3, #0]
 80a3c9e:	f043 0301 	orr.w	r3, r3, #1
 80a3ca2:	4a09      	ldr	r2, [pc, #36]	; (80a3cc8 <sensor_int_callback+0x6c>)
 80a3ca4:	6013      	str	r3, [r2, #0]

    /* Disable interrupt unless in free-running mode
     *   It will automatically be re-enabled during the next trigger 
     */
    if (ch_get_mode(dev_ptr) != CH_MODE_FREERUN) {
 80a3ca6:	68f8      	ldr	r0, [r7, #12]
 80a3ca8:	f015 fcc9 	bl	80b963e <ch_get_mode>
 80a3cac:	4603      	mov	r3, r0
 80a3cae:	2b02      	cmp	r3, #2
 80a3cb0:	d002      	beq.n	80a3cb8 <sensor_int_callback+0x5c>
      chbsp_group_io_interrupt_disable(grp_ptr);
 80a3cb2:	6878      	ldr	r0, [r7, #4]
 80a3cb4:	f7ff fd9a 	bl	80a37ec <chbsp_group_io_interrupt_disable>
    }
  }
}
 80a3cb8:	bf00      	nop
 80a3cba:	3710      	adds	r7, #16
 80a3cbc:	46bd      	mov	sp, r7
 80a3cbe:	bd80      	pop	{r7, pc}
 80a3cc0:	20007f90 	.word	0x20007f90
 80a3cc4:	20007f8c 	.word	0x20007f8c
 80a3cc8:	20007f88 	.word	0x20007f88

080a3ccc <display_config_info>:
 *
 * For CH201 sensors only, the multiple detection threshold values are also 
 * displayed.
 */
static uint8_t display_config_info(ch_dev_t * dev_ptr)
{
 80a3ccc:	b580      	push	{r7, lr}
 80a3cce:	b090      	sub	sp, #64	; 0x40
 80a3cd0:	af00      	add	r7, sp, #0
 80a3cd2:	6078      	str	r0, [r7, #4]
  ch_config_t read_config;
  uint8_t chirp_error;
  uint8_t dev_num = ch_get_dev_num(dev_ptr);
 80a3cd4:	6878      	ldr	r0, [r7, #4]
 80a3cd6:	f015 fc6e 	bl	80b95b6 <ch_get_dev_num>
 80a3cda:	4603      	mov	r3, r0
 80a3cdc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Read configuration values for the device into ch_config_t structure */
  chirp_error = ch_get_config(dev_ptr, &read_config);
 80a3ce0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80a3ce4:	4619      	mov	r1, r3
 80a3ce6:	6878      	ldr	r0, [r7, #4]
 80a3ce8:	f015 fbbc 	bl	80b9464 <ch_get_config>
 80a3cec:	4603      	mov	r3, r0
 80a3cee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (!chirp_error) {
 80a3cf2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80a3cf6:	2b00      	cmp	r3, #0
 80a3cf8:	d169      	bne.n	80a3dce <display_config_info+0x102>
    char *mode_string;

    switch (read_config.mode) {
 80a3cfa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80a3cfe:	2b20      	cmp	r3, #32
 80a3d00:	d013      	beq.n	80a3d2a <display_config_info+0x5e>
 80a3d02:	2b20      	cmp	r3, #32
 80a3d04:	dc14      	bgt.n	80a3d30 <display_config_info+0x64>
 80a3d06:	2b10      	cmp	r3, #16
 80a3d08:	d00c      	beq.n	80a3d24 <display_config_info+0x58>
 80a3d0a:	2b10      	cmp	r3, #16
 80a3d0c:	dc10      	bgt.n	80a3d30 <display_config_info+0x64>
 80a3d0e:	2b00      	cmp	r3, #0
 80a3d10:	d002      	beq.n	80a3d18 <display_config_info+0x4c>
 80a3d12:	2b02      	cmp	r3, #2
 80a3d14:	d003      	beq.n	80a3d1e <display_config_info+0x52>
 80a3d16:	e00b      	b.n	80a3d30 <display_config_info+0x64>
    case CH_MODE_IDLE:
      mode_string = "IDLE";
 80a3d18:	4b33      	ldr	r3, [pc, #204]	; (80a3de8 <display_config_info+0x11c>)
 80a3d1a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80a3d1c:	e00a      	b.n	80a3d34 <display_config_info+0x68>
    case CH_MODE_FREERUN:
      mode_string = "FREERUN";
 80a3d1e:	4b33      	ldr	r3, [pc, #204]	; (80a3dec <display_config_info+0x120>)
 80a3d20:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80a3d22:	e007      	b.n	80a3d34 <display_config_info+0x68>
    case CH_MODE_TRIGGERED_TX_RX:
      mode_string = "TRIGGERED_TX_RX";
 80a3d24:	4b32      	ldr	r3, [pc, #200]	; (80a3df0 <display_config_info+0x124>)
 80a3d26:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80a3d28:	e004      	b.n	80a3d34 <display_config_info+0x68>
    case CH_MODE_TRIGGERED_RX_ONLY:
      mode_string = "TRIGGERED_RX_ONLY";
 80a3d2a:	4b32      	ldr	r3, [pc, #200]	; (80a3df4 <display_config_info+0x128>)
 80a3d2c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80a3d2e:	e001      	b.n	80a3d34 <display_config_info+0x68>
    default:
      mode_string = "UNKNOWN";
 80a3d30:	4b31      	ldr	r3, [pc, #196]	; (80a3df8 <display_config_info+0x12c>)
 80a3d32:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Display sensor number, mode and max range */
    printf("Sensor %d:\tmax_range=%dmm \tmode=%s  \r\n", dev_num,
 80a3d34:	f897 1033 	ldrb.w	r1, [r7, #51]	; 0x33
           read_config.max_range, mode_string);
 80a3d38:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    printf("Sensor %d:\tmax_range=%dmm \tmode=%s  \r\n", dev_num,
 80a3d3a:	461a      	mov	r2, r3
 80a3d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80a3d3e:	482f      	ldr	r0, [pc, #188]	; (80a3dfc <display_config_info+0x130>)
 80a3d40:	f01c fe18 	bl	80c0974 <iprintf>

    /* Display static target rejection range, if used */
    if (read_config.static_range != 0) {
 80a3d44:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80a3d46:	2b00      	cmp	r3, #0
 80a3d48:	d004      	beq.n	80a3d54 <display_config_info+0x88>
      printf("static_range=%d samples \r\n", read_config.static_range);
 80a3d4a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80a3d4c:	4619      	mov	r1, r3
 80a3d4e:	482c      	ldr	r0, [pc, #176]	; (80a3e00 <display_config_info+0x134>)
 80a3d50:	f01c fe10 	bl	80c0974 <iprintf>
    }

    /* Display detection thresholds (only supported on CH201) */
    if (ch_get_part_number(dev_ptr) == CH201_PART_NUMBER) {
 80a3d54:	6878      	ldr	r0, [r7, #4]
 80a3d56:	f015 fc22 	bl	80b959e <ch_get_part_number>
 80a3d5a:	4603      	mov	r3, r0
 80a3d5c:	2bc9      	cmp	r3, #201	; 0xc9
 80a3d5e:	d132      	bne.n	80a3dc6 <display_config_info+0xfa>
      ch_thresholds_t read_thresholds;

      /* Get threshold values in structure */
      chirp_error = ch_get_thresholds(dev_ptr, &read_thresholds);
 80a3d60:	f107 030c 	add.w	r3, r7, #12
 80a3d64:	4619      	mov	r1, r3
 80a3d66:	6878      	ldr	r0, [r7, #4]
 80a3d68:	f015 fda5 	bl	80b98b6 <ch_get_thresholds>
 80a3d6c:	4603      	mov	r3, r0
 80a3d6e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

      if (!chirp_error) {
 80a3d72:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80a3d76:	2b00      	cmp	r3, #0
 80a3d78:	d11f      	bne.n	80a3dba <display_config_info+0xee>
        printf("\r\n  Detection thresholds:\r\n");
 80a3d7a:	4822      	ldr	r0, [pc, #136]	; (80a3e04 <display_config_info+0x138>)
 80a3d7c:	f01c fe96 	bl	80c0aac <puts>
        for (int i = 0; i < CH_NUM_THRESHOLDS; i++) {
 80a3d80:	2300      	movs	r3, #0
 80a3d82:	637b      	str	r3, [r7, #52]	; 0x34
 80a3d84:	e015      	b.n	80a3db2 <display_config_info+0xe6>
          printf("     %d\tstart: %2d\tlevel: %d\r\n", i,
                 read_thresholds.threshold[i].start_sample,
 80a3d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80a3d88:	009b      	lsls	r3, r3, #2
 80a3d8a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80a3d8e:	4413      	add	r3, r2
 80a3d90:	f833 3c34 	ldrh.w	r3, [r3, #-52]
          printf("     %d\tstart: %2d\tlevel: %d\r\n", i,
 80a3d94:	461a      	mov	r2, r3
                 read_thresholds.threshold[i].level);
 80a3d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80a3d98:	009b      	lsls	r3, r3, #2
 80a3d9a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80a3d9e:	440b      	add	r3, r1
 80a3da0:	f833 3c32 	ldrh.w	r3, [r3, #-50]
          printf("     %d\tstart: %2d\tlevel: %d\r\n", i,
 80a3da4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80a3da6:	4818      	ldr	r0, [pc, #96]	; (80a3e08 <display_config_info+0x13c>)
 80a3da8:	f01c fde4 	bl	80c0974 <iprintf>
        for (int i = 0; i < CH_NUM_THRESHOLDS; i++) {
 80a3dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80a3dae:	3301      	adds	r3, #1
 80a3db0:	637b      	str	r3, [r7, #52]	; 0x34
 80a3db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80a3db4:	2b05      	cmp	r3, #5
 80a3db6:	dde6      	ble.n	80a3d86 <display_config_info+0xba>
 80a3db8:	e005      	b.n	80a3dc6 <display_config_info+0xfa>
        }
      } else {
        printf(" Device %d: Error during ch_get_thresholds()\r\n", dev_num);
 80a3dba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80a3dbe:	4619      	mov	r1, r3
 80a3dc0:	4812      	ldr	r0, [pc, #72]	; (80a3e0c <display_config_info+0x140>)
 80a3dc2:	f01c fdd7 	bl	80c0974 <iprintf>
      }
    }
    printf("\n");
 80a3dc6:	200a      	movs	r0, #10
 80a3dc8:	f01c fdec 	bl	80c09a4 <putchar>
 80a3dcc:	e005      	b.n	80a3dda <display_config_info+0x10e>

  } else {
    printf(" Device %d: Error during ch_get_config()\r\n", dev_num);
 80a3dce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80a3dd2:	4619      	mov	r1, r3
 80a3dd4:	480e      	ldr	r0, [pc, #56]	; (80a3e10 <display_config_info+0x144>)
 80a3dd6:	f01c fdcd 	bl	80c0974 <iprintf>
  }

  return chirp_error;
 80a3dda:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80a3dde:	4618      	mov	r0, r3
 80a3de0:	3740      	adds	r7, #64	; 0x40
 80a3de2:	46bd      	mov	sp, r7
 80a3de4:	bd80      	pop	{r7, pc}
 80a3de6:	bf00      	nop
 80a3de8:	080c5254 	.word	0x080c5254
 80a3dec:	080c525c 	.word	0x080c525c
 80a3df0:	080c5264 	.word	0x080c5264
 80a3df4:	080c5274 	.word	0x080c5274
 80a3df8:	080c5288 	.word	0x080c5288
 80a3dfc:	080c5290 	.word	0x080c5290
 80a3e00:	080c52b8 	.word	0x080c52b8
 80a3e04:	080c52d4 	.word	0x080c52d4
 80a3e08:	080c52f0 	.word	0x080c52f0
 80a3e0c:	080c5310 	.word	0x080c5310
 80a3e10:	080c5340 	.word	0x080c5340

080a3e14 <handle_data_ready>:
 * If a non-blocking I/Q is read is initiated, a callback routine will be called
 * when the operation is complete.  The callback routine must have been 
 * registered using the ch_io_complete_callback_set function.
 */
static uint8_t handle_data_ready(ch_group_t * grp_ptr)
{
 80a3e14:	b5b0      	push	{r4, r5, r7, lr}
 80a3e16:	b09e      	sub	sp, #120	; 0x78
 80a3e18:	af02      	add	r7, sp, #8
 80a3e1a:	6078      	str	r0, [r7, #4]
  uint8_t dev_num;
  int error;
  int num_samples = 0;
 80a3e1c:	2300      	movs	r3, #0
 80a3e1e:	66bb      	str	r3, [r7, #104]	; 0x68
  uint16_t start_sample = 0;
 80a3e20:	2300      	movs	r3, #0
 80a3e22:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
  uint8_t iq_data_addr;
  uint8_t ret_val = 0;
 80a3e26:	2300      	movs	r3, #0
 80a3e28:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  sensors_event_t sensor_data = { 0 };
 80a3e2c:	f107 0308 	add.w	r3, r7, #8
 80a3e30:	2250      	movs	r2, #80	; 0x50
 80a3e32:	2100      	movs	r1, #0
 80a3e34:	4618      	mov	r0, r3
 80a3e36:	f01c f8c1 	bl	80bffbc <memset>
   *   This loop will write the sensor data to this application's "chirp_data"
   *   array.  Each sensor has a separate chirp_data_t structure in that 
   *   array, so the device number is used as an index.
   */

  for (dev_num = 0; dev_num < ch_get_num_ports(grp_ptr); dev_num++) {
 80a3e3a:	2300      	movs	r3, #0
 80a3e3c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80a3e40:	e12b      	b.n	80a409a <handle_data_ready+0x286>
    ch_dev_t *dev_ptr = ch_get_dev_ptr(grp_ptr, dev_num);
 80a3e42:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80a3e46:	4619      	mov	r1, r3
 80a3e48:	6878      	ldr	r0, [r7, #4]
 80a3e4a:	f015 fbc1 	bl	80b95d0 <ch_get_dev_ptr>
 80a3e4e:	6638      	str	r0, [r7, #96]	; 0x60

    if (ch_sensor_is_connected(dev_ptr)) {
 80a3e50:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80a3e52:	f015 fb98 	bl	80b9586 <ch_sensor_is_connected>
 80a3e56:	4603      	mov	r3, r0
 80a3e58:	2b00      	cmp	r3, #0
 80a3e5a:	f000 8119 	beq.w	80a4090 <handle_data_ready+0x27c>
       *   For sensor in transmit/receive mode, report one-way echo 
       *   distance,  For sensor(s) in receive-only mode, report direct 
       *   one-way distance from transmitting sensor 
       */

      if (ch_get_mode(dev_ptr) == CH_MODE_TRIGGERED_RX_ONLY) {
 80a3e5e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80a3e60:	f015 fbed 	bl	80b963e <ch_get_mode>
 80a3e64:	4603      	mov	r3, r0
 80a3e66:	2b20      	cmp	r3, #32
 80a3e68:	d10e      	bne.n	80a3e88 <handle_data_ready+0x74>
        chirp_data[dev_num].range = ch_get_range(dev_ptr, CH_RANGE_DIRECT);
 80a3e6a:	f897 406f 	ldrb.w	r4, [r7, #111]	; 0x6f
 80a3e6e:	2102      	movs	r1, #2
 80a3e70:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80a3e72:	f015 fc6c 	bl	80b974e <ch_get_range>
 80a3e76:	4602      	mov	r2, r0
 80a3e78:	4990      	ldr	r1, [pc, #576]	; (80a40bc <handle_data_ready+0x2a8>)
 80a3e7a:	f44f 63e2 	mov.w	r3, #1808	; 0x710
 80a3e7e:	fb03 f304 	mul.w	r3, r3, r4
 80a3e82:	440b      	add	r3, r1
 80a3e84:	601a      	str	r2, [r3, #0]
 80a3e86:	e00d      	b.n	80a3ea4 <handle_data_ready+0x90>
      } else {
        chirp_data[dev_num].range = ch_get_range(dev_ptr,
 80a3e88:	f897 406f 	ldrb.w	r4, [r7, #111]	; 0x6f
 80a3e8c:	2100      	movs	r1, #0
 80a3e8e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80a3e90:	f015 fc5d 	bl	80b974e <ch_get_range>
 80a3e94:	4602      	mov	r2, r0
 80a3e96:	4989      	ldr	r1, [pc, #548]	; (80a40bc <handle_data_ready+0x2a8>)
 80a3e98:	f44f 63e2 	mov.w	r3, #1808	; 0x710
 80a3e9c:	fb03 f304 	mul.w	r3, r3, r4
 80a3ea0:	440b      	add	r3, r1
 80a3ea2:	601a      	str	r2, [r3, #0]
                                                 CH_RANGE_ECHO_ONE_WAY);
      }

      if (chirp_data[dev_num].range == CH_NO_TARGET) {
 80a3ea4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80a3ea8:	4a84      	ldr	r2, [pc, #528]	; (80a40bc <handle_data_ready+0x2a8>)
 80a3eaa:	f44f 61e2 	mov.w	r1, #1808	; 0x710
 80a3eae:	fb01 f303 	mul.w	r3, r1, r3
 80a3eb2:	4413      	add	r3, r2
 80a3eb4:	681b      	ldr	r3, [r3, #0]
 80a3eb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80a3eba:	d13d      	bne.n	80a3f38 <handle_data_ready+0x124>
        /* No target object was detected - no range value */

        //chirp_data[dev_num].amplitude = 0; /* no updated amplitude */
        chirp_data[dev_num].amplitude = ch_get_amplitude(dev_ptr);
 80a3ebc:	f897 406f 	ldrb.w	r4, [r7, #111]	; 0x6f
 80a3ec0:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80a3ec2:	f015 fc5d 	bl	80b9780 <ch_get_amplitude>
 80a3ec6:	4603      	mov	r3, r0
 80a3ec8:	4619      	mov	r1, r3
 80a3eca:	4a7c      	ldr	r2, [pc, #496]	; (80a40bc <handle_data_ready+0x2a8>)
 80a3ecc:	f44f 63e2 	mov.w	r3, #1808	; 0x710
 80a3ed0:	fb03 f304 	mul.w	r3, r3, r4
 80a3ed4:	4413      	add	r3, r2
 80a3ed6:	3304      	adds	r3, #4
 80a3ed8:	460a      	mov	r2, r1
 80a3eda:	801a      	strh	r2, [r3, #0]
        printf("Port %d:          no target found        \r\n", dev_num);
 80a3edc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80a3ee0:	4619      	mov	r1, r3
 80a3ee2:	4877      	ldr	r0, [pc, #476]	; (80a40c0 <handle_data_ready+0x2ac>)
 80a3ee4:	f01c fd46 	bl	80c0974 <iprintf>

        if (chirp_data[dev_num].amplitude > 3000) {
 80a3ee8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80a3eec:	4a73      	ldr	r2, [pc, #460]	; (80a40bc <handle_data_ready+0x2a8>)
 80a3eee:	f44f 61e2 	mov.w	r1, #1808	; 0x710
 80a3ef2:	fb01 f303 	mul.w	r3, r1, r3
 80a3ef6:	4413      	add	r3, r2
 80a3ef8:	3304      	adds	r3, #4
 80a3efa:	881b      	ldrh	r3, [r3, #0]
 80a3efc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80a3f00:	4293      	cmp	r3, r2
 80a3f02:	d951      	bls.n	80a3fa8 <handle_data_ready+0x194>
          printf("ch_get_amplitude: %u, cover very near occurred! \r\n",
                 chirp_data[dev_num].amplitude);
 80a3f04:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80a3f08:	4a6c      	ldr	r2, [pc, #432]	; (80a40bc <handle_data_ready+0x2a8>)
 80a3f0a:	f44f 61e2 	mov.w	r1, #1808	; 0x710
 80a3f0e:	fb01 f303 	mul.w	r3, r1, r3
 80a3f12:	4413      	add	r3, r2
 80a3f14:	3304      	adds	r3, #4
 80a3f16:	881b      	ldrh	r3, [r3, #0]
          printf("ch_get_amplitude: %u, cover very near occurred! \r\n",
 80a3f18:	4619      	mov	r1, r3
 80a3f1a:	486a      	ldr	r0, [pc, #424]	; (80a40c4 <handle_data_ready+0x2b0>)
 80a3f1c:	f01c fd2a 	bl	80c0974 <iprintf>
          chirp_data[dev_num].range = 200.0f * 32.0f;
 80a3f20:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80a3f24:	4a65      	ldr	r2, [pc, #404]	; (80a40bc <handle_data_ready+0x2a8>)
 80a3f26:	f44f 61e2 	mov.w	r1, #1808	; 0x710
 80a3f2a:	fb01 f303 	mul.w	r3, r1, r3
 80a3f2e:	4413      	add	r3, r2
 80a3f30:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 80a3f34:	601a      	str	r2, [r3, #0]
 80a3f36:	e037      	b.n	80a3fa8 <handle_data_ready+0x194>
      } else {
        /* Target object was successfully detected (range available) */

        /* Get the new amplitude value - it's only updated if range 
         * was successfully measured.  */
        chirp_data[dev_num].amplitude = ch_get_amplitude(dev_ptr);
 80a3f38:	f897 406f 	ldrb.w	r4, [r7, #111]	; 0x6f
 80a3f3c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80a3f3e:	f015 fc1f 	bl	80b9780 <ch_get_amplitude>
 80a3f42:	4603      	mov	r3, r0
 80a3f44:	4619      	mov	r1, r3
 80a3f46:	4a5d      	ldr	r2, [pc, #372]	; (80a40bc <handle_data_ready+0x2a8>)
 80a3f48:	f44f 63e2 	mov.w	r3, #1808	; 0x710
 80a3f4c:	fb03 f304 	mul.w	r3, r3, r4
 80a3f50:	4413      	add	r3, r2
 80a3f52:	3304      	adds	r3, #4
 80a3f54:	460a      	mov	r2, r1
 80a3f56:	801a      	strh	r2, [r3, #0]

        printf("Port %d:  Range: %0.1f mm  Amplitude: %u  \r\n",
 80a3f58:	f897 406f 	ldrb.w	r4, [r7, #111]	; 0x6f
               dev_num, (float)chirp_data[dev_num].range / 32.0f,
 80a3f5c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80a3f60:	4a56      	ldr	r2, [pc, #344]	; (80a40bc <handle_data_ready+0x2a8>)
 80a3f62:	f44f 61e2 	mov.w	r1, #1808	; 0x710
 80a3f66:	fb01 f303 	mul.w	r3, r1, r3
 80a3f6a:	4413      	add	r3, r2
 80a3f6c:	681b      	ldr	r3, [r3, #0]
 80a3f6e:	ee07 3a90 	vmov	s15, r3
 80a3f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80a3f76:	ed9f 7a54 	vldr	s14, [pc, #336]	; 80a40c8 <handle_data_ready+0x2b4>
 80a3f7a:	eec7 6a87 	vdiv.f32	s13, s15, s14
        printf("Port %d:  Range: %0.1f mm  Amplitude: %u  \r\n",
 80a3f7e:	ee16 0a90 	vmov	r0, s13
 80a3f82:	f7fc fae1 	bl	80a0548 <__aeabi_f2d>
 80a3f86:	4602      	mov	r2, r0
 80a3f88:	460b      	mov	r3, r1
               chirp_data[dev_num].amplitude);
 80a3f8a:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
 80a3f8e:	484b      	ldr	r0, [pc, #300]	; (80a40bc <handle_data_ready+0x2a8>)
 80a3f90:	f44f 65e2 	mov.w	r5, #1808	; 0x710
 80a3f94:	fb05 f101 	mul.w	r1, r5, r1
 80a3f98:	4401      	add	r1, r0
 80a3f9a:	3104      	adds	r1, #4
 80a3f9c:	8809      	ldrh	r1, [r1, #0]
        printf("Port %d:  Range: %0.1f mm  Amplitude: %u  \r\n",
 80a3f9e:	9100      	str	r1, [sp, #0]
 80a3fa0:	4621      	mov	r1, r4
 80a3fa2:	484a      	ldr	r0, [pc, #296]	; (80a40cc <handle_data_ready+0x2b8>)
 80a3fa4:	f01c fce6 	bl	80c0974 <iprintf>
      }

      /* Get number of active samples in this measurement */
      num_samples = ch_get_num_samples(dev_ptr);
 80a3fa8:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80a3faa:	f015 fb90 	bl	80b96ce <ch_get_num_samples>
 80a3fae:	4603      	mov	r3, r0
 80a3fb0:	66bb      	str	r3, [r7, #104]	; 0x68
      chirp_data[dev_num].num_samples = num_samples;
 80a3fb2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80a3fb6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80a3fb8:	b290      	uxth	r0, r2
 80a3fba:	4a40      	ldr	r2, [pc, #256]	; (80a40bc <handle_data_ready+0x2a8>)
 80a3fbc:	f44f 61e2 	mov.w	r1, #1808	; 0x710
 80a3fc0:	fb01 f303 	mul.w	r3, r1, r3
 80a3fc4:	4413      	add	r3, r2
 80a3fc6:	3306      	adds	r3, #6
 80a3fc8:	4602      	mov	r2, r0
 80a3fca:	801a      	strh	r2, [r3, #0]

      /* Read full IQ data from device into buffer or queue read 
       * request, based on build-time options  */

      /* Reading I/Q data in normal, blocking mode */
      error = ch_get_iq_data(dev_ptr, chirp_data[dev_num].iq_data,
 80a3fcc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80a3fd0:	f44f 62e2 	mov.w	r2, #1808	; 0x710
 80a3fd4:	fb02 f303 	mul.w	r3, r2, r3
 80a3fd8:	3308      	adds	r3, #8
 80a3fda:	4a38      	ldr	r2, [pc, #224]	; (80a40bc <handle_data_ready+0x2a8>)
 80a3fdc:	1899      	adds	r1, r3, r2
 80a3fde:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80a3fe0:	b29b      	uxth	r3, r3
 80a3fe2:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80a3fe6:	2000      	movs	r0, #0
 80a3fe8:	9000      	str	r0, [sp, #0]
 80a3fea:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80a3fec:	f015 fc04 	bl	80b97f8 <ch_get_iq_data>
 80a3ff0:	4603      	mov	r3, r0
 80a3ff2:	65fb      	str	r3, [r7, #92]	; 0x5c
                             start_sample, num_samples, CH_IO_MODE_BLOCK);

      if (!error) {
 80a3ff4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80a3ff6:	2b00      	cmp	r3, #0
 80a3ff8:	d104      	bne.n	80a4004 <handle_data_ready+0x1f0>
        printf("     %d IQ samples copied \r\n", num_samples);
 80a3ffa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80a3ffc:	4834      	ldr	r0, [pc, #208]	; (80a40d0 <handle_data_ready+0x2bc>)
 80a3ffe:	f01c fcb9 	bl	80c0974 <iprintf>
 80a4002:	e003      	b.n	80a400c <handle_data_ready+0x1f8>
      } else {
        printf("     Error reading %d IQ samples \r\n", num_samples);
 80a4004:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80a4006:	4833      	ldr	r0, [pc, #204]	; (80a40d4 <handle_data_ready+0x2c0>)
 80a4008:	f01c fcb4 	bl	80c0974 <iprintf>
      }

      //send related messages to SensorDataQ
      if (uitralsonic_proximity_enabled) {
 80a400c:	4b32      	ldr	r3, [pc, #200]	; (80a40d8 <handle_data_ready+0x2c4>)
 80a400e:	781b      	ldrb	r3, [r3, #0]
 80a4010:	2b00      	cmp	r3, #0
 80a4012:	d03d      	beq.n	80a4090 <handle_data_ready+0x27c>
        sensor_data.sensor_type = SENSOR_TYPE_PROXIMITY_HEAD;
 80a4014:	2305      	movs	r3, #5
 80a4016:	723b      	strb	r3, [r7, #8]
        if (chirp_init_parms->boardID == REAR_BOARD) {
 80a4018:	4b30      	ldr	r3, [pc, #192]	; (80a40dc <handle_data_ready+0x2c8>)
 80a401a:	681b      	ldr	r3, [r3, #0]
 80a401c:	781b      	ldrb	r3, [r3, #0]
 80a401e:	2b00      	cmp	r3, #0
 80a4020:	d101      	bne.n	80a4026 <handle_data_ready+0x212>
          sensor_data.sensor_type = SENSOR_TYPE_PROXIMITY_REAR;
 80a4022:	2307      	movs	r3, #7
 80a4024:	723b      	strb	r3, [r7, #8]
        }
        sensor_data.accuracy = 3;
 80a4026:	2303      	movs	r3, #3
 80a4028:	727b      	strb	r3, [r7, #9]
        sensor_data.timestamp = sensor_get_timestamp();
 80a402a:	f009 fb6d 	bl	80ad708 <sensor_get_timestamp>
 80a402e:	4602      	mov	r2, r0
 80a4030:	460b      	mov	r3, r1
 80a4032:	e9c7 2304 	strd	r2, r3, [r7, #16]
        sensor_data.sensor_data_t.vec.data[0] =
            (float)chirp_data[dev_num].range / 32.0f;
 80a4036:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80a403a:	4a20      	ldr	r2, [pc, #128]	; (80a40bc <handle_data_ready+0x2a8>)
 80a403c:	f44f 61e2 	mov.w	r1, #1808	; 0x710
 80a4040:	fb01 f303 	mul.w	r3, r1, r3
 80a4044:	4413      	add	r3, r2
 80a4046:	681b      	ldr	r3, [r3, #0]
 80a4048:	ee07 3a90 	vmov	s15, r3
 80a404c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80a4050:	eddf 6a1d 	vldr	s13, [pc, #116]	; 80a40c8 <handle_data_ready+0x2b4>
 80a4054:	eec7 7a26 	vdiv.f32	s15, s14, s13
        sensor_data.sensor_data_t.vec.data[0] =
 80a4058:	edc7 7a06 	vstr	s15, [r7, #24]
        sensor_data.sensor_data_t.vec.data[1] =
            (float)chirp_data[dev_num].amplitude;
 80a405c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80a4060:	4a16      	ldr	r2, [pc, #88]	; (80a40bc <handle_data_ready+0x2a8>)
 80a4062:	f44f 61e2 	mov.w	r1, #1808	; 0x710
 80a4066:	fb01 f303 	mul.w	r3, r1, r3
 80a406a:	4413      	add	r3, r2
 80a406c:	3304      	adds	r3, #4
 80a406e:	881b      	ldrh	r3, [r3, #0]
 80a4070:	ee07 3a90 	vmov	s15, r3
 80a4074:	eef8 7a67 	vcvt.f32.u32	s15, s15
        sensor_data.sensor_data_t.vec.data[1] =
 80a4078:	edc7 7a07 	vstr	s15, [r7, #28]
        osMessageQueuePut(chirp_init_parms->SensorDataQHandle, &sensor_data,
 80a407c:	4b17      	ldr	r3, [pc, #92]	; (80a40dc <handle_data_ready+0x2c8>)
 80a407e:	681b      	ldr	r3, [r3, #0]
 80a4080:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 80a4084:	f107 0108 	add.w	r1, r7, #8
 80a4088:	2300      	movs	r3, #0
 80a408a:	2200      	movs	r2, #0
 80a408c:	f012 f9ba 	bl	80b6404 <osMessageQueuePut>
  for (dev_num = 0; dev_num < ch_get_num_ports(grp_ptr); dev_num++) {
 80a4090:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80a4094:	3301      	adds	r3, #1
 80a4096:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80a409a:	6878      	ldr	r0, [r7, #4]
 80a409c:	f015 fab7 	bl	80b960e <ch_get_num_ports>
 80a40a0:	4603      	mov	r3, r0
 80a40a2:	461a      	mov	r2, r3
 80a40a4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80a40a8:	4293      	cmp	r3, r2
 80a40aa:	f4ff aeca 	bcc.w	80a3e42 <handle_data_ready+0x2e>
                          0, 0);
      }
    }
  }

  return ret_val;
 80a40ae:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
}
 80a40b2:	4618      	mov	r0, r3
 80a40b4:	3770      	adds	r7, #112	; 0x70
 80a40b6:	46bd      	mov	sp, r7
 80a40b8:	bdb0      	pop	{r4, r5, r7, pc}
 80a40ba:	bf00      	nop
 80a40bc:	2001b5d8 	.word	0x2001b5d8
 80a40c0:	080c536c 	.word	0x080c536c
 80a40c4:	080c5398 	.word	0x080c5398
 80a40c8:	42000000 	.word	0x42000000
 80a40cc:	080c53cc 	.word	0x080c53cc
 80a40d0:	080c53fc 	.word	0x080c53fc
 80a40d4:	080c541c 	.word	0x080c541c
 80a40d8:	20007f79 	.word	0x20007f79
 80a40dc:	20007f84 	.word	0x20007f84

080a40e0 <prox_init>:
  return 0;
}

/* ------------------------------------------ public functions starts from here ---------------------------------*/
int prox_init(void *para1, void *para2)
{
 80a40e0:	b580      	push	{r7, lr}
 80a40e2:	b086      	sub	sp, #24
 80a40e4:	af00      	add	r7, sp, #0
 80a40e6:	6078      	str	r0, [r7, #4]
 80a40e8:	6039      	str	r1, [r7, #0]
  chirp_init_parms = (platform_prams *) para1;
 80a40ea:	4a2e      	ldr	r2, [pc, #184]	; (80a41a4 <prox_init+0xc4>)
 80a40ec:	687b      	ldr	r3, [r7, #4]
 80a40ee:	6013      	str	r3, [r2, #0]

  ch_group_t *grp_ptr = &chirp_group;
 80a40f0:	4b2d      	ldr	r3, [pc, #180]	; (80a41a8 <prox_init+0xc8>)
 80a40f2:	613b      	str	r3, [r7, #16]
  uint8_t chirp_error = 0;
 80a40f4:	2300      	movs	r3, #0
 80a40f6:	75fb      	strb	r3, [r7, #23]
  uint8_t num_ports;
  uint8_t dev_num;

  /* if REAR BOARD, use related source */
  if (chirp_init_parms->boardID == REAR_BOARD) {
 80a40f8:	4b2a      	ldr	r3, [pc, #168]	; (80a41a4 <prox_init+0xc4>)
 80a40fa:	681b      	ldr	r3, [r3, #0]
 80a40fc:	781b      	ldrb	r3, [r3, #0]
 80a40fe:	2b00      	cmp	r3, #0
 80a4100:	d105      	bne.n	80a410e <prox_init+0x2e>
    chirp_pin_prog[0] = PROG1_PIN;
 80a4102:	4b2a      	ldr	r3, [pc, #168]	; (80a41ac <prox_init+0xcc>)
 80a4104:	2201      	movs	r2, #1
 80a4106:	801a      	strh	r2, [r3, #0]
    chirp_port_prog[0] = PROG1_PORT;
 80a4108:	4b29      	ldr	r3, [pc, #164]	; (80a41b0 <prox_init+0xd0>)
 80a410a:	4a2a      	ldr	r2, [pc, #168]	; (80a41b4 <prox_init+0xd4>)
 80a410c:	601a      	str	r2, [r3, #0]
  }

  chbsp_board_init(grp_ptr);
 80a410e:	6938      	ldr	r0, [r7, #16]
 80a4110:	f7ff f91e 	bl	80a3350 <chbsp_board_init>

  num_ports = ch_get_num_ports(grp_ptr);
 80a4114:	6938      	ldr	r0, [r7, #16]
 80a4116:	f015 fa7a 	bl	80b960e <ch_get_num_ports>
 80a411a:	4603      	mov	r3, r0
 80a411c:	73fb      	strb	r3, [r7, #15]

  for (dev_num = 0; dev_num < num_ports; dev_num++) {
 80a411e:	2300      	movs	r3, #0
 80a4120:	75bb      	strb	r3, [r7, #22]
 80a4122:	e014      	b.n	80a414e <prox_init+0x6e>
    ch_dev_t *dev_ptr = &(chirp_devices[dev_num]);      // init struct in array
 80a4124:	7dbb      	ldrb	r3, [r7, #22]
 80a4126:	2298      	movs	r2, #152	; 0x98
 80a4128:	fb02 f303 	mul.w	r3, r2, r3
 80a412c:	4a22      	ldr	r2, [pc, #136]	; (80a41b8 <prox_init+0xd8>)
 80a412e:	4413      	add	r3, r2
 80a4130:	60bb      	str	r3, [r7, #8]
    chirp_error |= ch_init(dev_ptr, grp_ptr, dev_num,
 80a4132:	7dba      	ldrb	r2, [r7, #22]
 80a4134:	4b21      	ldr	r3, [pc, #132]	; (80a41bc <prox_init+0xdc>)
 80a4136:	6939      	ldr	r1, [r7, #16]
 80a4138:	68b8      	ldr	r0, [r7, #8]
 80a413a:	f015 f967 	bl	80b940c <ch_init>
 80a413e:	4603      	mov	r3, r0
 80a4140:	461a      	mov	r2, r3
 80a4142:	7dfb      	ldrb	r3, [r7, #23]
 80a4144:	4313      	orrs	r3, r2
 80a4146:	75fb      	strb	r3, [r7, #23]
  for (dev_num = 0; dev_num < num_ports; dev_num++) {
 80a4148:	7dbb      	ldrb	r3, [r7, #22]
 80a414a:	3301      	adds	r3, #1
 80a414c:	75bb      	strb	r3, [r7, #22]
 80a414e:	7dba      	ldrb	r2, [r7, #22]
 80a4150:	7bfb      	ldrb	r3, [r7, #15]
 80a4152:	429a      	cmp	r2, r3
 80a4154:	d3e6      	bcc.n	80a4124 <prox_init+0x44>
                           CHIRP_SENSOR_FW_INIT_FUNC);
  }

  if (chirp_error == 0) {
 80a4156:	7dfb      	ldrb	r3, [r7, #23]
 80a4158:	2b00      	cmp	r3, #0
 80a415a:	d107      	bne.n	80a416c <prox_init+0x8c>
    printf("starting group... \r\n");
 80a415c:	4818      	ldr	r0, [pc, #96]	; (80a41c0 <prox_init+0xe0>)
 80a415e:	f01c fca5 	bl	80c0aac <puts>
    chirp_error = ch_group_start(grp_ptr);
 80a4162:	6938      	ldr	r0, [r7, #16]
 80a4164:	f015 f9f6 	bl	80b9554 <ch_group_start>
 80a4168:	4603      	mov	r3, r0
 80a416a:	75fb      	strb	r3, [r7, #23]
  }

  if (chirp_error == 0) {
 80a416c:	7dfb      	ldrb	r3, [r7, #23]
 80a416e:	2b00      	cmp	r3, #0
 80a4170:	d103      	bne.n	80a417a <prox_init+0x9a>
    printf("OK\r\n");
 80a4172:	4814      	ldr	r0, [pc, #80]	; (80a41c4 <prox_init+0xe4>)
 80a4174:	f01c fc9a 	bl	80c0aac <puts>
 80a4178:	e004      	b.n	80a4184 <prox_init+0xa4>
  } else {
    printf("FAILED: %d\r\n", chirp_error);
 80a417a:	7dfb      	ldrb	r3, [r7, #23]
 80a417c:	4619      	mov	r1, r3
 80a417e:	4812      	ldr	r0, [pc, #72]	; (80a41c8 <prox_init+0xe8>)
 80a4180:	f01c fbf8 	bl	80c0974 <iprintf>
  }
  printf("\r\n");
 80a4184:	4811      	ldr	r0, [pc, #68]	; (80a41cc <prox_init+0xec>)
 80a4186:	f01c fc91 	bl	80c0aac <puts>

  chbsp_periodic_timer_init(MEASUREMENT_INTERVAL_MS, periodic_timer_callback);
 80a418a:	4911      	ldr	r1, [pc, #68]	; (80a41d0 <prox_init+0xf0>)
 80a418c:	2064      	movs	r0, #100	; 0x64
 80a418e:	f7ff fcfd 	bl	80a3b8c <chbsp_periodic_timer_init>

  ch_io_int_callback_set(grp_ptr, sensor_int_callback);
 80a4192:	4910      	ldr	r1, [pc, #64]	; (80a41d4 <prox_init+0xf4>)
 80a4194:	6938      	ldr	r0, [r7, #16]
 80a4196:	f015 fbab 	bl	80b98f0 <ch_io_int_callback_set>

  return chirp_error;
 80a419a:	7dfb      	ldrb	r3, [r7, #23]
}
 80a419c:	4618      	mov	r0, r3
 80a419e:	3718      	adds	r7, #24
 80a41a0:	46bd      	mov	sp, r7
 80a41a2:	bd80      	pop	{r7, pc}
 80a41a4:	20007f84 	.word	0x20007f84
 80a41a8:	2001b574 	.word	0x2001b574
 80a41ac:	20007014 	.word	0x20007014
 80a41b0:	20007018 	.word	0x20007018
 80a41b4:	40020800 	.word	0x40020800
 80a41b8:	2001bcec 	.word	0x2001bcec
 80a41bc:	080b927d 	.word	0x080b927d
 80a41c0:	080c5464 	.word	0x080c5464
 80a41c4:	080c5478 	.word	0x080c5478
 80a41c8:	080c547c 	.word	0x080c547c
 80a41cc:	080c548c 	.word	0x080c548c
 80a41d0:	080a3c49 	.word	0x080a3c49
 80a41d4:	080a3c5d 	.word	0x080a3c5d

080a41d8 <prox_init_complete>:

int prox_init_complete(void *para)
{
 80a41d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a41dc:	b08a      	sub	sp, #40	; 0x28
 80a41de:	af04      	add	r7, sp, #16
 80a41e0:	6078      	str	r0, [r7, #4]
  ch_group_t *grp_ptr = &chirp_group;
 80a41e2:	4b25      	ldr	r3, [pc, #148]	; (80a4278 <prox_init_complete+0xa0>)
 80a41e4:	613b      	str	r3, [r7, #16]
  uint8_t num_ports;
  uint8_t dev_num;

  num_ports = ch_get_num_ports(grp_ptr);
 80a41e6:	6938      	ldr	r0, [r7, #16]
 80a41e8:	f015 fa11 	bl	80b960e <ch_get_num_ports>
 80a41ec:	4603      	mov	r3, r0
 80a41ee:	73fb      	strb	r3, [r7, #15]

  printf("Sensor\tType \t   Freq\t\t RTC Cal \tFirmware\r\n");
 80a41f0:	4822      	ldr	r0, [pc, #136]	; (80a427c <prox_init_complete+0xa4>)
 80a41f2:	f01c fc5b 	bl	80c0aac <puts>

  for (dev_num = 0; dev_num < num_ports; dev_num++) {
 80a41f6:	2300      	movs	r3, #0
 80a41f8:	75fb      	strb	r3, [r7, #23]
 80a41fa:	e030      	b.n	80a425e <prox_init_complete+0x86>
    ch_dev_t *dev_ptr = ch_get_dev_ptr(grp_ptr, dev_num);
 80a41fc:	7dfb      	ldrb	r3, [r7, #23]
 80a41fe:	4619      	mov	r1, r3
 80a4200:	6938      	ldr	r0, [r7, #16]
 80a4202:	f015 f9e5 	bl	80b95d0 <ch_get_dev_ptr>
 80a4206:	60b8      	str	r0, [r7, #8]

    if (ch_sensor_is_connected(dev_ptr)) {
 80a4208:	68b8      	ldr	r0, [r7, #8]
 80a420a:	f015 f9bc 	bl	80b9586 <ch_sensor_is_connected>
 80a420e:	4603      	mov	r3, r0
 80a4210:	2b00      	cmp	r3, #0
 80a4212:	d021      	beq.n	80a4258 <prox_init_complete+0x80>

      printf("%d\tCH%d\t %u Hz\t%lu@%ums\t%s\r\n", dev_num,
 80a4214:	7dfc      	ldrb	r4, [r7, #23]
             ch_get_part_number(dev_ptr), ch_get_frequency(dev_ptr),
 80a4216:	68b8      	ldr	r0, [r7, #8]
 80a4218:	f015 f9c1 	bl	80b959e <ch_get_part_number>
 80a421c:	4603      	mov	r3, r0
      printf("%d\tCH%d\t %u Hz\t%lu@%ums\t%s\r\n", dev_num,
 80a421e:	4698      	mov	r8, r3
 80a4220:	68b8      	ldr	r0, [r7, #8]
 80a4222:	f015 fac4 	bl	80b97ae <ch_get_frequency>
 80a4226:	4605      	mov	r5, r0
             ch_get_rtc_cal_result(dev_ptr),
 80a4228:	68b8      	ldr	r0, [r7, #8]
 80a422a:	f015 fad9 	bl	80b97e0 <ch_get_rtc_cal_result>
 80a422e:	4603      	mov	r3, r0
      printf("%d\tCH%d\t %u Hz\t%lu@%ums\t%s\r\n", dev_num,
 80a4230:	461e      	mov	r6, r3
             ch_get_rtc_cal_pulselength(dev_ptr),
 80a4232:	68b8      	ldr	r0, [r7, #8]
 80a4234:	f015 fac7 	bl	80b97c6 <ch_get_rtc_cal_pulselength>
 80a4238:	4603      	mov	r3, r0
      printf("%d\tCH%d\t %u Hz\t%lu@%ums\t%s\r\n", dev_num,
 80a423a:	603b      	str	r3, [r7, #0]
 80a423c:	68b8      	ldr	r0, [r7, #8]
 80a423e:	f015 f9f2 	bl	80b9626 <ch_get_fw_version_string>
 80a4242:	4603      	mov	r3, r0
 80a4244:	9302      	str	r3, [sp, #8]
 80a4246:	683b      	ldr	r3, [r7, #0]
 80a4248:	9301      	str	r3, [sp, #4]
 80a424a:	9600      	str	r6, [sp, #0]
 80a424c:	462b      	mov	r3, r5
 80a424e:	4642      	mov	r2, r8
 80a4250:	4621      	mov	r1, r4
 80a4252:	480b      	ldr	r0, [pc, #44]	; (80a4280 <prox_init_complete+0xa8>)
 80a4254:	f01c fb8e 	bl	80c0974 <iprintf>
  for (dev_num = 0; dev_num < num_ports; dev_num++) {
 80a4258:	7dfb      	ldrb	r3, [r7, #23]
 80a425a:	3301      	adds	r3, #1
 80a425c:	75fb      	strb	r3, [r7, #23]
 80a425e:	7dfa      	ldrb	r2, [r7, #23]
 80a4260:	7bfb      	ldrb	r3, [r7, #15]
 80a4262:	429a      	cmp	r2, r3
 80a4264:	d3ca      	bcc.n	80a41fc <prox_init_complete+0x24>
             ch_get_fw_version_string(dev_ptr));
    }
  }
  printf("\r\n");
 80a4266:	4807      	ldr	r0, [pc, #28]	; (80a4284 <prox_init_complete+0xac>)
 80a4268:	f01c fc20 	bl	80c0aac <puts>

  return 0;
 80a426c:	2300      	movs	r3, #0
}
 80a426e:	4618      	mov	r0, r3
 80a4270:	3718      	adds	r7, #24
 80a4272:	46bd      	mov	sp, r7
 80a4274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a4278:	2001b574 	.word	0x2001b574
 80a427c:	080c5490 	.word	0x080c5490
 80a4280:	080c54bc 	.word	0x080c54bc
 80a4284:	080c548c 	.word	0x080c548c

080a4288 <prox_activate>:

int prox_activate(bool activate)
{
 80a4288:	b580      	push	{r7, lr}
 80a428a:	b08a      	sub	sp, #40	; 0x28
 80a428c:	af00      	add	r7, sp, #0
 80a428e:	4603      	mov	r3, r0
 80a4290:	71fb      	strb	r3, [r7, #7]
  ch_group_t *grp_ptr = &chirp_group;
 80a4292:	4b5a      	ldr	r3, [pc, #360]	; (80a43fc <prox_activate+0x174>)
 80a4294:	623b      	str	r3, [r7, #32]
  uint8_t chirp_error = 0;
 80a4296:	2300      	movs	r3, #0
 80a4298:	77fb      	strb	r3, [r7, #31]
  uint8_t num_connected = 0;
 80a429a:	2300      	movs	r3, #0
 80a429c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t num_ports;
  uint8_t dev_num;

  num_ports = ch_get_num_ports(grp_ptr);
 80a42a0:	6a38      	ldr	r0, [r7, #32]
 80a42a2:	f015 f9b4 	bl	80b960e <ch_get_num_ports>
 80a42a6:	4603      	mov	r3, r0
 80a42a8:	77bb      	strb	r3, [r7, #30]

  if (activate) {
 80a42aa:	79fb      	ldrb	r3, [r7, #7]
 80a42ac:	2b00      	cmp	r3, #0
 80a42ae:	f000 8086 	beq.w	80a43be <prox_activate+0x136>
    //enable
    if (sensor_activate_count == 0) {
 80a42b2:	4b53      	ldr	r3, [pc, #332]	; (80a4400 <prox_activate+0x178>)
 80a42b4:	781b      	ldrb	r3, [r3, #0]
 80a42b6:	2b00      	cmp	r3, #0
 80a42b8:	d17a      	bne.n	80a43b0 <prox_activate+0x128>
      for (dev_num = 0; dev_num < num_ports; dev_num++) {
 80a42ba:	2300      	movs	r3, #0
 80a42bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80a42c0:	e069      	b.n	80a4396 <prox_activate+0x10e>
        printf("Configuring sensor(s)...， dev_num: %d, num_ports: %d\r\n",
 80a42c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80a42c6:	7fba      	ldrb	r2, [r7, #30]
 80a42c8:	4619      	mov	r1, r3
 80a42ca:	484e      	ldr	r0, [pc, #312]	; (80a4404 <prox_activate+0x17c>)
 80a42cc:	f01c fb52 	bl	80c0974 <iprintf>
               dev_num, num_ports);
        ch_config_t dev_config;
        ch_dev_t *dev_ptr = ch_get_dev_ptr(grp_ptr, dev_num);
 80a42d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80a42d4:	4619      	mov	r1, r3
 80a42d6:	6a38      	ldr	r0, [r7, #32]
 80a42d8:	f015 f97a 	bl	80b95d0 <ch_get_dev_ptr>
 80a42dc:	61b8      	str	r0, [r7, #24]

        if (ch_sensor_is_connected(dev_ptr)) {
 80a42de:	69b8      	ldr	r0, [r7, #24]
 80a42e0:	f015 f951 	bl	80b9586 <ch_sensor_is_connected>
 80a42e4:	4603      	mov	r3, r0
 80a42e6:	2b00      	cmp	r3, #0
 80a42e8:	d050      	beq.n	80a438c <prox_activate+0x104>
           *   All connected sensors are placed in hardware triggered mode.
           *   The first connected (lowest numbered) sensor will transmit and
           *   receive, all others will only receive.
           */

          num_connected++;      // count one more connected
 80a42ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80a42ee:	3301      	adds	r3, #1
 80a42f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          active_devices |= (1 << dev_num);     // add to active device bit mask
 80a42f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80a42f8:	2201      	movs	r2, #1
 80a42fa:	fa02 f303 	lsl.w	r3, r2, r3
 80a42fe:	461a      	mov	r2, r3
 80a4300:	4b41      	ldr	r3, [pc, #260]	; (80a4408 <prox_activate+0x180>)
 80a4302:	681b      	ldr	r3, [r3, #0]
 80a4304:	4313      	orrs	r3, r2
 80a4306:	4a40      	ldr	r2, [pc, #256]	; (80a4408 <prox_activate+0x180>)
 80a4308:	6013      	str	r3, [r2, #0]

          if (num_connected == 1) {     // if this is the first sensor
 80a430a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80a430e:	2b01      	cmp	r3, #1
 80a4310:	d107      	bne.n	80a4322 <prox_activate+0x9a>
            dev_config.mode = CH_MODE_TRIGGERED_TX_RX;
 80a4312:	2310      	movs	r3, #16
 80a4314:	733b      	strb	r3, [r7, #12]
            printf("****mode: %d\r\n", dev_config.mode);
 80a4316:	7b3b      	ldrb	r3, [r7, #12]
 80a4318:	4619      	mov	r1, r3
 80a431a:	483c      	ldr	r0, [pc, #240]	; (80a440c <prox_activate+0x184>)
 80a431c:	f01c fb2a 	bl	80c0974 <iprintf>
 80a4320:	e001      	b.n	80a4326 <prox_activate+0x9e>
          } else {
            dev_config.mode = CH_MODE_TRIGGERED_RX_ONLY;
 80a4322:	2320      	movs	r3, #32
 80a4324:	733b      	strb	r3, [r7, #12]
          }

          /* Init config structure with values from hello_chirp.h */
          dev_config.max_range = CHIRP_SENSOR_MAX_RANGE_MM;
 80a4326:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80a432a:	81fb      	strh	r3, [r7, #14]
          dev_config.static_range = CHIRP_SENSOR_STATIC_RANGE;
 80a432c:	2300      	movs	r3, #0
 80a432e:	823b      	strh	r3, [r7, #16]
          dev_config.sample_interval = CHIRP_SENSOR_SAMPLE_INTERVAL;
 80a4330:	2300      	movs	r3, #0
 80a4332:	827b      	strh	r3, [r7, #18]

          /* Set detection thresholds (CH201 only) */
          if (ch_get_part_number(dev_ptr) == CH201_PART_NUMBER) {
 80a4334:	69b8      	ldr	r0, [r7, #24]
 80a4336:	f015 f932 	bl	80b959e <ch_get_part_number>
 80a433a:	4603      	mov	r3, r0
 80a433c:	2bc9      	cmp	r3, #201	; 0xc9
 80a433e:	d102      	bne.n	80a4346 <prox_activate+0xbe>
            /* Set pointer to struct containing detection thresholds */
            dev_config.thresh_ptr = &chirp_ch201_thresholds;
 80a4340:	4b33      	ldr	r3, [pc, #204]	; (80a4410 <prox_activate+0x188>)
 80a4342:	617b      	str	r3, [r7, #20]
 80a4344:	e001      	b.n	80a434a <prox_activate+0xc2>
          } else {
            dev_config.thresh_ptr = 0;
 80a4346:	2300      	movs	r3, #0
 80a4348:	617b      	str	r3, [r7, #20]
          }

          /* Apply sensor configuration */
          chirp_error = ch_set_config(dev_ptr, &dev_config);
 80a434a:	f107 030c 	add.w	r3, r7, #12
 80a434e:	4619      	mov	r1, r3
 80a4350:	69b8      	ldr	r0, [r7, #24]
 80a4352:	f015 f8a8 	bl	80b94a6 <ch_set_config>
 80a4356:	4603      	mov	r3, r0
 80a4358:	77fb      	strb	r3, [r7, #31]

          /* Enable sensor interrupt if using free-running mode
           *   Note that interrupt is automatically enabled if using
           *   triggered modes.
           */
          if ((!chirp_error) && (dev_config.mode == CH_MODE_FREERUN)) {
 80a435a:	7ffb      	ldrb	r3, [r7, #31]
 80a435c:	2b00      	cmp	r3, #0
 80a435e:	d108      	bne.n	80a4372 <prox_activate+0xea>
 80a4360:	7b3b      	ldrb	r3, [r7, #12]
 80a4362:	2b02      	cmp	r3, #2
 80a4364:	d105      	bne.n	80a4372 <prox_activate+0xea>
            printf("chirp interrupt enabled\r\n");
 80a4366:	482b      	ldr	r0, [pc, #172]	; (80a4414 <prox_activate+0x18c>)
 80a4368:	f01c fba0 	bl	80c0aac <puts>
            chbsp_io_interrupt_enable(dev_ptr);
 80a436c:	69b8      	ldr	r0, [r7, #24]
 80a436e:	f7ff f9df 	bl	80a3730 <chbsp_io_interrupt_enable>
          }

          /* Read back and display config settings */
          if (!chirp_error) {
 80a4372:	7ffb      	ldrb	r3, [r7, #31]
 80a4374:	2b00      	cmp	r3, #0
 80a4376:	d103      	bne.n	80a4380 <prox_activate+0xf8>
            display_config_info(dev_ptr);
 80a4378:	69b8      	ldr	r0, [r7, #24]
 80a437a:	f7ff fca7 	bl	80a3ccc <display_config_info>
 80a437e:	e005      	b.n	80a438c <prox_activate+0x104>
          } else {
            printf("Device %d: Error during ch_set_config() \r\n", dev_num);
 80a4380:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80a4384:	4619      	mov	r1, r3
 80a4386:	4824      	ldr	r0, [pc, #144]	; (80a4418 <prox_activate+0x190>)
 80a4388:	f01c faf4 	bl	80c0974 <iprintf>
      for (dev_num = 0; dev_num < num_ports; dev_num++) {
 80a438c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80a4390:	3301      	adds	r3, #1
 80a4392:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80a4396:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80a439a:	7fbb      	ldrb	r3, [r7, #30]
 80a439c:	429a      	cmp	r2, r3
 80a439e:	d390      	bcc.n	80a42c2 <prox_activate+0x3a>
          }
        }
      }
      sensor_op_timer_enable(tim3);
 80a43a0:	4b1e      	ldr	r3, [pc, #120]	; (80a441c <prox_activate+0x194>)
 80a43a2:	681b      	ldr	r3, [r3, #0]
 80a43a4:	4618      	mov	r0, r3
 80a43a6:	f008 fc3f 	bl	80acc28 <sensor_op_timer_enable>
      uitralsonic_proximity_enabled = true;
 80a43aa:	4b1d      	ldr	r3, [pc, #116]	; (80a4420 <prox_activate+0x198>)
 80a43ac:	2201      	movs	r2, #1
 80a43ae:	701a      	strb	r2, [r3, #0]
    }
    sensor_activate_count++;
 80a43b0:	4b13      	ldr	r3, [pc, #76]	; (80a4400 <prox_activate+0x178>)
 80a43b2:	781b      	ldrb	r3, [r3, #0]
 80a43b4:	3301      	adds	r3, #1
 80a43b6:	b2da      	uxtb	r2, r3
 80a43b8:	4b11      	ldr	r3, [pc, #68]	; (80a4400 <prox_activate+0x178>)
 80a43ba:	701a      	strb	r2, [r3, #0]
 80a43bc:	e018      	b.n	80a43f0 <prox_activate+0x168>
  } else {
    if (sensor_activate_count == 0) {
 80a43be:	4b10      	ldr	r3, [pc, #64]	; (80a4400 <prox_activate+0x178>)
 80a43c0:	781b      	ldrb	r3, [r3, #0]
 80a43c2:	2b00      	cmp	r3, #0
 80a43c4:	d102      	bne.n	80a43cc <prox_activate+0x144>
      return SENSOR_FAILED;
 80a43c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a43ca:	e012      	b.n	80a43f2 <prox_activate+0x16a>
    }
    sensor_activate_count--;
 80a43cc:	4b0c      	ldr	r3, [pc, #48]	; (80a4400 <prox_activate+0x178>)
 80a43ce:	781b      	ldrb	r3, [r3, #0]
 80a43d0:	3b01      	subs	r3, #1
 80a43d2:	b2da      	uxtb	r2, r3
 80a43d4:	4b0a      	ldr	r3, [pc, #40]	; (80a4400 <prox_activate+0x178>)
 80a43d6:	701a      	strb	r2, [r3, #0]
    if (sensor_activate_count == 0) {
 80a43d8:	4b09      	ldr	r3, [pc, #36]	; (80a4400 <prox_activate+0x178>)
 80a43da:	781b      	ldrb	r3, [r3, #0]
 80a43dc:	2b00      	cmp	r3, #0
 80a43de:	d107      	bne.n	80a43f0 <prox_activate+0x168>
      sensor_op_timer_disable(tim3);
 80a43e0:	4b0e      	ldr	r3, [pc, #56]	; (80a441c <prox_activate+0x194>)
 80a43e2:	681b      	ldr	r3, [r3, #0]
 80a43e4:	4618      	mov	r0, r3
 80a43e6:	f008 fc45 	bl	80acc74 <sensor_op_timer_disable>
      uitralsonic_proximity_enabled = false;
 80a43ea:	4b0d      	ldr	r3, [pc, #52]	; (80a4420 <prox_activate+0x198>)
 80a43ec:	2200      	movs	r2, #0
 80a43ee:	701a      	strb	r2, [r3, #0]
    }
  }

  return 0;
 80a43f0:	2300      	movs	r3, #0
}
 80a43f2:	4618      	mov	r0, r3
 80a43f4:	3728      	adds	r7, #40	; 0x28
 80a43f6:	46bd      	mov	sp, r7
 80a43f8:	bd80      	pop	{r7, pc}
 80a43fa:	bf00      	nop
 80a43fc:	2001b574 	.word	0x2001b574
 80a4400:	20007f74 	.word	0x20007f74
 80a4404:	080c54dc 	.word	0x080c54dc
 80a4408:	20007f8c 	.word	0x20007f8c
 80a440c:	080c5518 	.word	0x080c5518
 80a4410:	20007024 	.word	0x20007024
 80a4414:	080c5528 	.word	0x080c5528
 80a4418:	080c5544 	.word	0x080c5544
 80a441c:	2001bce8 	.word	0x2001bce8
 80a4420:	20007f79 	.word	0x20007f79

080a4424 <prox_publish_sensor_data>:

int prox_publish_sensor_data(void *para)
{
 80a4424:	b580      	push	{r7, lr}
 80a4426:	b088      	sub	sp, #32
 80a4428:	af00      	add	r7, sp, #0
 80a442a:	6078      	str	r0, [r7, #4]
  int gpio_pin = 0;
 80a442c:	2300      	movs	r3, #0
 80a442e:	60fb      	str	r3, [r7, #12]
 80a4430:	687b      	ldr	r3, [r7, #4]
 80a4432:	681b      	ldr	r3, [r3, #0]
  memcpy(&gpio_pin, para, sizeof(int));
 80a4434:	60fb      	str	r3, [r7, #12]
  ch_group_t *grp_ptr = &chirp_group;
 80a4436:	4b1d      	ldr	r3, [pc, #116]	; (80a44ac <prox_publish_sensor_data+0x88>)
 80a4438:	61bb      	str	r3, [r7, #24]
  ch_io_int_callback_t func_ptr = sensor_group_ptr->io_int_callback;
 80a443a:	4b1d      	ldr	r3, [pc, #116]	; (80a44b0 <prox_publish_sensor_data+0x8c>)
 80a443c:	681b      	ldr	r3, [r3, #0]
 80a443e:	68db      	ldr	r3, [r3, #12]
 80a4440:	617b      	str	r3, [r7, #20]
  uint8_t num_ports = sensor_group_ptr->num_ports;
 80a4442:	4b1b      	ldr	r3, [pc, #108]	; (80a44b0 <prox_publish_sensor_data+0x8c>)
 80a4444:	681b      	ldr	r3, [r3, #0]
 80a4446:	781b      	ldrb	r3, [r3, #0]
 80a4448:	74fb      	strb	r3, [r7, #19]
  uint8_t pin_found = 0;
 80a444a:	2300      	movs	r3, #0
 80a444c:	77fb      	strb	r3, [r7, #31]
  uint8_t idx;

  printf("prox publish sensor event gpio: %d\r\n", gpio_pin);
 80a444e:	68fb      	ldr	r3, [r7, #12]
 80a4450:	4619      	mov	r1, r3
 80a4452:	4818      	ldr	r0, [pc, #96]	; (80a44b4 <prox_publish_sensor_data+0x90>)
 80a4454:	f01c fa8e 	bl	80c0974 <iprintf>

  if (func_ptr != NULL) {
 80a4458:	697b      	ldr	r3, [r7, #20]
 80a445a:	2b00      	cmp	r3, #0
 80a445c:	d020      	beq.n	80a44a0 <prox_publish_sensor_data+0x7c>
    for (idx = 0; idx < num_ports; idx++) {
 80a445e:	2300      	movs	r3, #0
 80a4460:	77bb      	strb	r3, [r7, #30]
 80a4462:	e00d      	b.n	80a4480 <prox_publish_sensor_data+0x5c>
      if (gpio_pin == chirp_pin_io[idx]) {
 80a4464:	7fbb      	ldrb	r3, [r7, #30]
 80a4466:	4a14      	ldr	r2, [pc, #80]	; (80a44b8 <prox_publish_sensor_data+0x94>)
 80a4468:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80a446c:	461a      	mov	r2, r3
 80a446e:	68fb      	ldr	r3, [r7, #12]
 80a4470:	429a      	cmp	r2, r3
 80a4472:	d102      	bne.n	80a447a <prox_publish_sensor_data+0x56>
        pin_found = 1;
 80a4474:	2301      	movs	r3, #1
 80a4476:	77fb      	strb	r3, [r7, #31]
        break;
 80a4478:	e006      	b.n	80a4488 <prox_publish_sensor_data+0x64>
    for (idx = 0; idx < num_ports; idx++) {
 80a447a:	7fbb      	ldrb	r3, [r7, #30]
 80a447c:	3301      	adds	r3, #1
 80a447e:	77bb      	strb	r3, [r7, #30]
 80a4480:	7fba      	ldrb	r2, [r7, #30]
 80a4482:	7cfb      	ldrb	r3, [r7, #19]
 80a4484:	429a      	cmp	r2, r3
 80a4486:	d3ed      	bcc.n	80a4464 <prox_publish_sensor_data+0x40>
      }
    }

    if (pin_found) {
 80a4488:	7ffb      	ldrb	r3, [r7, #31]
 80a448a:	2b00      	cmp	r3, #0
 80a448c:	d008      	beq.n	80a44a0 <prox_publish_sensor_data+0x7c>
      // Call application callback function - pass I/O index to identify interrupting device
      (*func_ptr) (sensor_group_ptr, idx);
 80a448e:	4b08      	ldr	r3, [pc, #32]	; (80a44b0 <prox_publish_sensor_data+0x8c>)
 80a4490:	681a      	ldr	r2, [r3, #0]
 80a4492:	7fb9      	ldrb	r1, [r7, #30]
 80a4494:	697b      	ldr	r3, [r7, #20]
 80a4496:	4610      	mov	r0, r2
 80a4498:	4798      	blx	r3
      handle_data_ready(grp_ptr);
 80a449a:	69b8      	ldr	r0, [r7, #24]
 80a449c:	f7ff fcba 	bl	80a3e14 <handle_data_ready>
    }
  }
  return 0;
 80a44a0:	2300      	movs	r3, #0
}
 80a44a2:	4618      	mov	r0, r3
 80a44a4:	3720      	adds	r7, #32
 80a44a6:	46bd      	mov	sp, r7
 80a44a8:	bd80      	pop	{r7, pc}
 80a44aa:	bf00      	nop
 80a44ac:	2001b574 	.word	0x2001b574
 80a44b0:	2001b5d4 	.word	0x2001b5d4
 80a44b4:	080c5570 	.word	0x080c5570
 80a44b8:	2000701c 	.word	0x2000701c

080a44bc <prox_config>:

int prox_config(uint8_t config_type, void *para)
{
 80a44bc:	b580      	push	{r7, lr}
 80a44be:	b084      	sub	sp, #16
 80a44c0:	af00      	add	r7, sp, #0
 80a44c2:	4603      	mov	r3, r0
 80a44c4:	6039      	str	r1, [r7, #0]
 80a44c6:	71fb      	strb	r3, [r7, #7]
  int res = 0;
 80a44c8:	2300      	movs	r3, #0
 80a44ca:	60fb      	str	r3, [r7, #12]
  switch (config_type) {
 80a44cc:	79fb      	ldrb	r3, [r7, #7]
 80a44ce:	2b06      	cmp	r3, #6
 80a44d0:	d102      	bne.n	80a44d8 <prox_config+0x1c>
  case SENSOR_CONFIG_TIMEOUT:
    //printf("@@@SENSOR_CONFIG_TIMEOUT!\r\n");
    chbsp_periodic_timer_handler();
 80a44d2:	f7ff fb81 	bl	80a3bd8 <chbsp_periodic_timer_handler>
    break;
 80a44d6:	e000      	b.n	80a44da <prox_config+0x1e>
  default:
    break;
 80a44d8:	bf00      	nop
  }
  return res;
 80a44da:	68fb      	ldr	r3, [r7, #12]
}
 80a44dc:	4618      	mov	r0, r3
 80a44de:	3710      	adds	r7, #16
 80a44e0:	46bd      	mov	sp, r7
 80a44e2:	bd80      	pop	{r7, pc}

080a44e4 <prox_publish_config_resp>:

int prox_publish_config_resp(void *para)
{
 80a44e4:	b480      	push	{r7}
 80a44e6:	b083      	sub	sp, #12
 80a44e8:	af00      	add	r7, sp, #0
 80a44ea:	6078      	str	r0, [r7, #4]
  return 0;
 80a44ec:	2300      	movs	r3, #0
}
 80a44ee:	4618      	mov	r0, r3
 80a44f0:	370c      	adds	r7, #12
 80a44f2:	46bd      	mov	sp, r7
 80a44f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a44f8:	4770      	bx	lr
	...

080a44fc <GetSector>:
  * @brief  Gets the sector of a given address
  * @param  None
  * @retval The sector of a given address
  */
static uint32_t GetSector(uint32_t Address)
{
 80a44fc:	b480      	push	{r7}
 80a44fe:	b085      	sub	sp, #20
 80a4500:	af00      	add	r7, sp, #0
 80a4502:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 80a4504:	2300      	movs	r3, #0
 80a4506:	60fb      	str	r3, [r7, #12]

  if ((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0)) {
 80a4508:	687b      	ldr	r3, [r7, #4]
 80a450a:	4a40      	ldr	r2, [pc, #256]	; (80a460c <GetSector+0x110>)
 80a450c:	4293      	cmp	r3, r2
 80a450e:	d206      	bcs.n	80a451e <GetSector+0x22>
 80a4510:	687b      	ldr	r3, [r7, #4]
 80a4512:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80a4516:	d302      	bcc.n	80a451e <GetSector+0x22>
    sector = FLASH_SECTOR_0;
 80a4518:	2300      	movs	r3, #0
 80a451a:	60fb      	str	r3, [r7, #12]
 80a451c:	e06f      	b.n	80a45fe <GetSector+0x102>
  } else if ((Address < ADDR_FLASH_SECTOR_2)
 80a451e:	687b      	ldr	r3, [r7, #4]
 80a4520:	4a3b      	ldr	r2, [pc, #236]	; (80a4610 <GetSector+0x114>)
 80a4522:	4293      	cmp	r3, r2
 80a4524:	d206      	bcs.n	80a4534 <GetSector+0x38>
             && (Address >= ADDR_FLASH_SECTOR_1)) {
 80a4526:	687b      	ldr	r3, [r7, #4]
 80a4528:	4a38      	ldr	r2, [pc, #224]	; (80a460c <GetSector+0x110>)
 80a452a:	4293      	cmp	r3, r2
 80a452c:	d302      	bcc.n	80a4534 <GetSector+0x38>
    sector = FLASH_SECTOR_1;
 80a452e:	2301      	movs	r3, #1
 80a4530:	60fb      	str	r3, [r7, #12]
 80a4532:	e064      	b.n	80a45fe <GetSector+0x102>
  } else if ((Address < ADDR_FLASH_SECTOR_3)
 80a4534:	687b      	ldr	r3, [r7, #4]
 80a4536:	4a37      	ldr	r2, [pc, #220]	; (80a4614 <GetSector+0x118>)
 80a4538:	4293      	cmp	r3, r2
 80a453a:	d206      	bcs.n	80a454a <GetSector+0x4e>
             && (Address >= ADDR_FLASH_SECTOR_2)) {
 80a453c:	687b      	ldr	r3, [r7, #4]
 80a453e:	4a34      	ldr	r2, [pc, #208]	; (80a4610 <GetSector+0x114>)
 80a4540:	4293      	cmp	r3, r2
 80a4542:	d302      	bcc.n	80a454a <GetSector+0x4e>
    sector = FLASH_SECTOR_2;
 80a4544:	2302      	movs	r3, #2
 80a4546:	60fb      	str	r3, [r7, #12]
 80a4548:	e059      	b.n	80a45fe <GetSector+0x102>
  } else if ((Address < ADDR_FLASH_SECTOR_4)
 80a454a:	687b      	ldr	r3, [r7, #4]
 80a454c:	4a32      	ldr	r2, [pc, #200]	; (80a4618 <GetSector+0x11c>)
 80a454e:	4293      	cmp	r3, r2
 80a4550:	d806      	bhi.n	80a4560 <GetSector+0x64>
             && (Address >= ADDR_FLASH_SECTOR_3)) {
 80a4552:	687b      	ldr	r3, [r7, #4]
 80a4554:	4a2f      	ldr	r2, [pc, #188]	; (80a4614 <GetSector+0x118>)
 80a4556:	4293      	cmp	r3, r2
 80a4558:	d302      	bcc.n	80a4560 <GetSector+0x64>
    sector = FLASH_SECTOR_3;
 80a455a:	2303      	movs	r3, #3
 80a455c:	60fb      	str	r3, [r7, #12]
 80a455e:	e04e      	b.n	80a45fe <GetSector+0x102>
  } else if ((Address < ADDR_FLASH_SECTOR_5)
 80a4560:	687b      	ldr	r3, [r7, #4]
 80a4562:	4a2e      	ldr	r2, [pc, #184]	; (80a461c <GetSector+0x120>)
 80a4564:	4293      	cmp	r3, r2
 80a4566:	d806      	bhi.n	80a4576 <GetSector+0x7a>
             && (Address >= ADDR_FLASH_SECTOR_4)) {
 80a4568:	687b      	ldr	r3, [r7, #4]
 80a456a:	4a2b      	ldr	r2, [pc, #172]	; (80a4618 <GetSector+0x11c>)
 80a456c:	4293      	cmp	r3, r2
 80a456e:	d902      	bls.n	80a4576 <GetSector+0x7a>
    sector = FLASH_SECTOR_4;
 80a4570:	2304      	movs	r3, #4
 80a4572:	60fb      	str	r3, [r7, #12]
 80a4574:	e043      	b.n	80a45fe <GetSector+0x102>
  } else if ((Address < ADDR_FLASH_SECTOR_6)
 80a4576:	687b      	ldr	r3, [r7, #4]
 80a4578:	4a29      	ldr	r2, [pc, #164]	; (80a4620 <GetSector+0x124>)
 80a457a:	4293      	cmp	r3, r2
 80a457c:	d806      	bhi.n	80a458c <GetSector+0x90>
             && (Address >= ADDR_FLASH_SECTOR_5)) {
 80a457e:	687b      	ldr	r3, [r7, #4]
 80a4580:	4a26      	ldr	r2, [pc, #152]	; (80a461c <GetSector+0x120>)
 80a4582:	4293      	cmp	r3, r2
 80a4584:	d902      	bls.n	80a458c <GetSector+0x90>
    sector = FLASH_SECTOR_5;
 80a4586:	2305      	movs	r3, #5
 80a4588:	60fb      	str	r3, [r7, #12]
 80a458a:	e038      	b.n	80a45fe <GetSector+0x102>
  } else if ((Address < ADDR_FLASH_SECTOR_7)
 80a458c:	687b      	ldr	r3, [r7, #4]
 80a458e:	4a25      	ldr	r2, [pc, #148]	; (80a4624 <GetSector+0x128>)
 80a4590:	4293      	cmp	r3, r2
 80a4592:	d806      	bhi.n	80a45a2 <GetSector+0xa6>
             && (Address >= ADDR_FLASH_SECTOR_6)) {
 80a4594:	687b      	ldr	r3, [r7, #4]
 80a4596:	4a22      	ldr	r2, [pc, #136]	; (80a4620 <GetSector+0x124>)
 80a4598:	4293      	cmp	r3, r2
 80a459a:	d902      	bls.n	80a45a2 <GetSector+0xa6>
    sector = FLASH_SECTOR_6;
 80a459c:	2306      	movs	r3, #6
 80a459e:	60fb      	str	r3, [r7, #12]
 80a45a0:	e02d      	b.n	80a45fe <GetSector+0x102>
  } else if ((Address < ADDR_FLASH_SECTOR_8)
 80a45a2:	687b      	ldr	r3, [r7, #4]
 80a45a4:	4a20      	ldr	r2, [pc, #128]	; (80a4628 <GetSector+0x12c>)
 80a45a6:	4293      	cmp	r3, r2
 80a45a8:	d806      	bhi.n	80a45b8 <GetSector+0xbc>
             && (Address >= ADDR_FLASH_SECTOR_7)) {
 80a45aa:	687b      	ldr	r3, [r7, #4]
 80a45ac:	4a1d      	ldr	r2, [pc, #116]	; (80a4624 <GetSector+0x128>)
 80a45ae:	4293      	cmp	r3, r2
 80a45b0:	d902      	bls.n	80a45b8 <GetSector+0xbc>
    sector = FLASH_SECTOR_7;
 80a45b2:	2307      	movs	r3, #7
 80a45b4:	60fb      	str	r3, [r7, #12]
 80a45b6:	e022      	b.n	80a45fe <GetSector+0x102>
  } else if ((Address < ADDR_FLASH_SECTOR_9)
 80a45b8:	687b      	ldr	r3, [r7, #4]
 80a45ba:	4a1c      	ldr	r2, [pc, #112]	; (80a462c <GetSector+0x130>)
 80a45bc:	4293      	cmp	r3, r2
 80a45be:	d806      	bhi.n	80a45ce <GetSector+0xd2>
             && (Address >= ADDR_FLASH_SECTOR_8)) {
 80a45c0:	687b      	ldr	r3, [r7, #4]
 80a45c2:	4a19      	ldr	r2, [pc, #100]	; (80a4628 <GetSector+0x12c>)
 80a45c4:	4293      	cmp	r3, r2
 80a45c6:	d902      	bls.n	80a45ce <GetSector+0xd2>
    sector = FLASH_SECTOR_8;
 80a45c8:	2308      	movs	r3, #8
 80a45ca:	60fb      	str	r3, [r7, #12]
 80a45cc:	e017      	b.n	80a45fe <GetSector+0x102>
  } else if ((Address < ADDR_FLASH_SECTOR_10)
 80a45ce:	687b      	ldr	r3, [r7, #4]
 80a45d0:	4a17      	ldr	r2, [pc, #92]	; (80a4630 <GetSector+0x134>)
 80a45d2:	4293      	cmp	r3, r2
 80a45d4:	d806      	bhi.n	80a45e4 <GetSector+0xe8>
             && (Address >= ADDR_FLASH_SECTOR_9)) {
 80a45d6:	687b      	ldr	r3, [r7, #4]
 80a45d8:	4a14      	ldr	r2, [pc, #80]	; (80a462c <GetSector+0x130>)
 80a45da:	4293      	cmp	r3, r2
 80a45dc:	d902      	bls.n	80a45e4 <GetSector+0xe8>
    sector = FLASH_SECTOR_9;
 80a45de:	2309      	movs	r3, #9
 80a45e0:	60fb      	str	r3, [r7, #12]
 80a45e2:	e00c      	b.n	80a45fe <GetSector+0x102>
  } else if ((Address < ADDR_FLASH_SECTOR_11)
 80a45e4:	687b      	ldr	r3, [r7, #4]
 80a45e6:	4a13      	ldr	r2, [pc, #76]	; (80a4634 <GetSector+0x138>)
 80a45e8:	4293      	cmp	r3, r2
 80a45ea:	d806      	bhi.n	80a45fa <GetSector+0xfe>
             && (Address >= ADDR_FLASH_SECTOR_10)) {
 80a45ec:	687b      	ldr	r3, [r7, #4]
 80a45ee:	4a10      	ldr	r2, [pc, #64]	; (80a4630 <GetSector+0x134>)
 80a45f0:	4293      	cmp	r3, r2
 80a45f2:	d902      	bls.n	80a45fa <GetSector+0xfe>
    sector = FLASH_SECTOR_10;
 80a45f4:	230a      	movs	r3, #10
 80a45f6:	60fb      	str	r3, [r7, #12]
 80a45f8:	e001      	b.n	80a45fe <GetSector+0x102>
  } else {                      /* (Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_11) */

    sector = FLASH_SECTOR_11;
 80a45fa:	230b      	movs	r3, #11
 80a45fc:	60fb      	str	r3, [r7, #12]
  }

  return sector;
 80a45fe:	68fb      	ldr	r3, [r7, #12]
}
 80a4600:	4618      	mov	r0, r3
 80a4602:	3714      	adds	r7, #20
 80a4604:	46bd      	mov	sp, r7
 80a4606:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a460a:	4770      	bx	lr
 80a460c:	08004000 	.word	0x08004000
 80a4610:	08008000 	.word	0x08008000
 80a4614:	0800c000 	.word	0x0800c000
 80a4618:	0800ffff 	.word	0x0800ffff
 80a461c:	0801ffff 	.word	0x0801ffff
 80a4620:	0803ffff 	.word	0x0803ffff
 80a4624:	0805ffff 	.word	0x0805ffff
 80a4628:	0807ffff 	.word	0x0807ffff
 80a462c:	0809ffff 	.word	0x0809ffff
 80a4630:	080bffff 	.word	0x080bffff
 80a4634:	080dffff 	.word	0x080dffff

080a4638 <flash_unlock>:
  }
  return sectorsize;
}

uint32_t flash_unlock(void)
{
 80a4638:	b580      	push	{r7, lr}
 80a463a:	b082      	sub	sp, #8
 80a463c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef ret = 0;
 80a463e:	2300      	movs	r3, #0
 80a4640:	71fb      	strb	r3, [r7, #7]
  ret = HAL_FLASH_Unlock();
 80a4642:	f00c fbe9 	bl	80b0e18 <HAL_FLASH_Unlock>
 80a4646:	4603      	mov	r3, r0
 80a4648:	71fb      	strb	r3, [r7, #7]
  return ret;
 80a464a:	79fb      	ldrb	r3, [r7, #7]
}
 80a464c:	4618      	mov	r0, r3
 80a464e:	3708      	adds	r7, #8
 80a4650:	46bd      	mov	sp, r7
 80a4652:	bd80      	pop	{r7, pc}

080a4654 <flash_lock>:

uint32_t flash_lock(void)
{
 80a4654:	b580      	push	{r7, lr}
 80a4656:	b082      	sub	sp, #8
 80a4658:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef ret = 0;
 80a465a:	2300      	movs	r3, #0
 80a465c:	71fb      	strb	r3, [r7, #7]
  ret = HAL_FLASH_Lock();
 80a465e:	f00c fbfd 	bl	80b0e5c <HAL_FLASH_Lock>
 80a4662:	4603      	mov	r3, r0
 80a4664:	71fb      	strb	r3, [r7, #7]
  return ret;
 80a4666:	79fb      	ldrb	r3, [r7, #7]
}
 80a4668:	4618      	mov	r0, r3
 80a466a:	3708      	adds	r7, #8
 80a466c:	46bd      	mov	sp, r7
 80a466e:	bd80      	pop	{r7, pc}

080a4670 <flash_erase_by_sector>:

uint32_t flash_erase_by_sector(uint32_t start_address, uint8_t sector_num)
{
 80a4670:	b580      	push	{r7, lr}
 80a4672:	b086      	sub	sp, #24
 80a4674:	af00      	add	r7, sp, #0
 80a4676:	6078      	str	r0, [r7, #4]
 80a4678:	460b      	mov	r3, r1
 80a467a:	70fb      	strb	r3, [r7, #3]
  uint32_t FirstSector = 0, NbOfSectors = 0;
 80a467c:	2300      	movs	r3, #0
 80a467e:	617b      	str	r3, [r7, #20]
 80a4680:	2300      	movs	r3, #0
 80a4682:	613b      	str	r3, [r7, #16]
  uint32_t SectorError = 0;
 80a4684:	2300      	movs	r3, #0
 80a4686:	60fb      	str	r3, [r7, #12]

  /* Get the 1st sector to erase */
  FirstSector = GetSector(start_address);
 80a4688:	6878      	ldr	r0, [r7, #4]
 80a468a:	f7ff ff37 	bl	80a44fc <GetSector>
 80a468e:	6178      	str	r0, [r7, #20]
  /* Get the number of sector to erase from 1st sector */
  NbOfSectors = sector_num;
 80a4690:	78fb      	ldrb	r3, [r7, #3]
 80a4692:	613b      	str	r3, [r7, #16]

  /* Fill EraseInit structure */
  EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 80a4694:	4b0d      	ldr	r3, [pc, #52]	; (80a46cc <flash_erase_by_sector+0x5c>)
 80a4696:	2200      	movs	r2, #0
 80a4698:	601a      	str	r2, [r3, #0]
  EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80a469a:	4b0c      	ldr	r3, [pc, #48]	; (80a46cc <flash_erase_by_sector+0x5c>)
 80a469c:	2202      	movs	r2, #2
 80a469e:	611a      	str	r2, [r3, #16]
  EraseInitStruct.Sector = FirstSector;
 80a46a0:	4a0a      	ldr	r2, [pc, #40]	; (80a46cc <flash_erase_by_sector+0x5c>)
 80a46a2:	697b      	ldr	r3, [r7, #20]
 80a46a4:	6093      	str	r3, [r2, #8]
  EraseInitStruct.NbSectors = NbOfSectors;
 80a46a6:	4a09      	ldr	r2, [pc, #36]	; (80a46cc <flash_erase_by_sector+0x5c>)
 80a46a8:	693b      	ldr	r3, [r7, #16]
 80a46aa:	60d3      	str	r3, [r2, #12]
  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) != HAL_OK) {
 80a46ac:	f107 030c 	add.w	r3, r7, #12
 80a46b0:	4619      	mov	r1, r3
 80a46b2:	4806      	ldr	r0, [pc, #24]	; (80a46cc <flash_erase_by_sector+0x5c>)
 80a46b4:	f00c fd12 	bl	80b10dc <HAL_FLASHEx_Erase>
 80a46b8:	4603      	mov	r3, r0
 80a46ba:	2b00      	cmp	r3, #0
 80a46bc:	d001      	beq.n	80a46c2 <flash_erase_by_sector+0x52>
       user can call function 'HAL_FLASH_GetError()'
     */
    /*
       FLASH_ErrorTypeDef errorcode = HAL_FLASH_GetError();
     */
    Error_Handler();
 80a46be:	f005 fa2b 	bl	80a9b18 <Error_Handler>
  }
}
 80a46c2:	bf00      	nop
 80a46c4:	4618      	mov	r0, r3
 80a46c6:	3718      	adds	r7, #24
 80a46c8:	46bd      	mov	sp, r7
 80a46ca:	bd80      	pop	{r7, pc}
 80a46cc:	20007f94 	.word	0x20007f94

080a46d0 <flash_program_by_word>:

uint32_t flash_program_by_word(uint32_t address, uint32_t data)
{
 80a46d0:	b580      	push	{r7, lr}
 80a46d2:	b082      	sub	sp, #8
 80a46d4:	af00      	add	r7, sp, #0
 80a46d6:	6078      	str	r0, [r7, #4]
 80a46d8:	6039      	str	r1, [r7, #0]
  if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data) == HAL_OK) {
 80a46da:	683b      	ldr	r3, [r7, #0]
 80a46dc:	461a      	mov	r2, r3
 80a46de:	f04f 0300 	mov.w	r3, #0
 80a46e2:	6879      	ldr	r1, [r7, #4]
 80a46e4:	2002      	movs	r0, #2
 80a46e6:	f00c fb43 	bl	80b0d70 <HAL_FLASH_Program>
 80a46ea:	4603      	mov	r3, r0
 80a46ec:	2b00      	cmp	r3, #0
 80a46ee:	d101      	bne.n	80a46f4 <flash_program_by_word+0x24>
    return HAL_OK;
 80a46f0:	2300      	movs	r3, #0
 80a46f2:	e001      	b.n	80a46f8 <flash_program_by_word+0x28>
    /* Error occurred while writing data in Flash memory. 
       User can add here some code to deal with this error */
    /*
       FLASH_ErrorTypeDef errorcode = HAL_FLASH_GetError();
     */
    Error_Handler();
 80a46f4:	f005 fa10 	bl	80a9b18 <Error_Handler>
  }
}
 80a46f8:	4618      	mov	r0, r3
 80a46fa:	3708      	adds	r7, #8
 80a46fc:	46bd      	mov	sp, r7
 80a46fe:	bd80      	pop	{r7, pc}

080a4700 <flash_update_boot_magic_number>:
  flash_program_by_word(FLASH_OTAINFO_ADD + 8, temp_ota_info.updating_app_id);

}

void flash_update_boot_magic_number(void)
{
 80a4700:	b580      	push	{r7, lr}
 80a4702:	b084      	sub	sp, #16
 80a4704:	af00      	add	r7, sp, #0
  otaInfo temp_ota_info = { 0 };
 80a4706:	1d3b      	adds	r3, r7, #4
 80a4708:	2200      	movs	r2, #0
 80a470a:	601a      	str	r2, [r3, #0]
 80a470c:	605a      	str	r2, [r3, #4]
 80a470e:	609a      	str	r2, [r3, #8]

  temp_ota_info.boot_mode = RAM_MAGIC_WORD;
 80a4710:	f648 13ab 	movw	r3, #35243	; 0x89ab
 80a4714:	607b      	str	r3, [r7, #4]
  temp_ota_info.using_app_id = flashOtaInfo.using_app_id;
 80a4716:	4b0e      	ldr	r3, [pc, #56]	; (80a4750 <flash_update_boot_magic_number+0x50>)
 80a4718:	685b      	ldr	r3, [r3, #4]
 80a471a:	60bb      	str	r3, [r7, #8]
  temp_ota_info.updating_app_id = flashOtaInfo.updating_app_id;
 80a471c:	4b0c      	ldr	r3, [pc, #48]	; (80a4750 <flash_update_boot_magic_number+0x50>)
 80a471e:	689b      	ldr	r3, [r3, #8]
 80a4720:	60fb      	str	r3, [r7, #12]

  flash_erase_by_sector(FLASH_OTAINFO_ADD, 1);
 80a4722:	2101      	movs	r1, #1
 80a4724:	480a      	ldr	r0, [pc, #40]	; (80a4750 <flash_update_boot_magic_number+0x50>)
 80a4726:	f7ff ffa3 	bl	80a4670 <flash_erase_by_sector>

  flash_program_by_word(FLASH_OTAINFO_ADD, temp_ota_info.boot_mode);
 80a472a:	687b      	ldr	r3, [r7, #4]
 80a472c:	4619      	mov	r1, r3
 80a472e:	4808      	ldr	r0, [pc, #32]	; (80a4750 <flash_update_boot_magic_number+0x50>)
 80a4730:	f7ff ffce 	bl	80a46d0 <flash_program_by_word>
  flash_program_by_word(FLASH_OTAINFO_ADD + 4, temp_ota_info.using_app_id);
 80a4734:	68bb      	ldr	r3, [r7, #8]
 80a4736:	4619      	mov	r1, r3
 80a4738:	4806      	ldr	r0, [pc, #24]	; (80a4754 <flash_update_boot_magic_number+0x54>)
 80a473a:	f7ff ffc9 	bl	80a46d0 <flash_program_by_word>
  flash_program_by_word(FLASH_OTAINFO_ADD + 8, temp_ota_info.updating_app_id);
 80a473e:	68fb      	ldr	r3, [r7, #12]
 80a4740:	4619      	mov	r1, r3
 80a4742:	4805      	ldr	r0, [pc, #20]	; (80a4758 <flash_update_boot_magic_number+0x58>)
 80a4744:	f7ff ffc4 	bl	80a46d0 <flash_program_by_word>

}
 80a4748:	bf00      	nop
 80a474a:	3710      	adds	r7, #16
 80a474c:	46bd      	mov	sp, r7
 80a474e:	bd80      	pop	{r7, pc}
 80a4750:	08010000 	.word	0x08010000
 80a4754:	08010004 	.word	0x08010004
 80a4758:	08010008 	.word	0x08010008

080a475c <headled_platform_write>:
 * @param  len       number of consecutive register to write
 *
 */
static int32_t headled_platform_write(void *handle, uint8_t reg, uint8_t * bufp,
                                      uint16_t len)
{
 80a475c:	b580      	push	{r7, lr}
 80a475e:	b088      	sub	sp, #32
 80a4760:	af04      	add	r7, sp, #16
 80a4762:	60f8      	str	r0, [r7, #12]
 80a4764:	607a      	str	r2, [r7, #4]
 80a4766:	461a      	mov	r2, r3
 80a4768:	460b      	mov	r3, r1
 80a476a:	72fb      	strb	r3, [r7, #11]
 80a476c:	4613      	mov	r3, r2
 80a476e:	813b      	strh	r3, [r7, #8]
  if (handle == &headled_init_parms->i2c_handle) {
 80a4770:	4b0c      	ldr	r3, [pc, #48]	; (80a47a4 <headled_platform_write+0x48>)
 80a4772:	681b      	ldr	r3, [r3, #0]
 80a4774:	3304      	adds	r3, #4
 80a4776:	68fa      	ldr	r2, [r7, #12]
 80a4778:	429a      	cmp	r2, r3
 80a477a:	d10d      	bne.n	80a4798 <headled_platform_write+0x3c>
    HAL_I2C_Mem_Write(handle, (uint16_t) HEAD_LED_AW21036_I2C_COMUNICATE_ADD,
 80a477c:	7afb      	ldrb	r3, [r7, #11]
 80a477e:	b29a      	uxth	r2, r3
 80a4780:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a4784:	9302      	str	r3, [sp, #8]
 80a4786:	893b      	ldrh	r3, [r7, #8]
 80a4788:	9301      	str	r3, [sp, #4]
 80a478a:	687b      	ldr	r3, [r7, #4]
 80a478c:	9300      	str	r3, [sp, #0]
 80a478e:	2301      	movs	r3, #1
 80a4790:	2168      	movs	r1, #104	; 0x68
 80a4792:	68f8      	ldr	r0, [r7, #12]
 80a4794:	f00d fc12 	bl	80b1fbc <HAL_I2C_Mem_Write>
                      reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  }

  return 0;
 80a4798:	2300      	movs	r3, #0
}
 80a479a:	4618      	mov	r0, r3
 80a479c:	3710      	adds	r7, #16
 80a479e:	46bd      	mov	sp, r7
 80a47a0:	bd80      	pop	{r7, pc}
 80a47a2:	bf00      	nop
 80a47a4:	20007fb4 	.word	0x20007fb4

080a47a8 <headled_platform_read>:
 *
 */

static int32_t headled_platform_read(void *handle, uint8_t reg, uint8_t * bufp,
                                     uint16_t len)
{
 80a47a8:	b580      	push	{r7, lr}
 80a47aa:	b088      	sub	sp, #32
 80a47ac:	af04      	add	r7, sp, #16
 80a47ae:	60f8      	str	r0, [r7, #12]
 80a47b0:	607a      	str	r2, [r7, #4]
 80a47b2:	461a      	mov	r2, r3
 80a47b4:	460b      	mov	r3, r1
 80a47b6:	72fb      	strb	r3, [r7, #11]
 80a47b8:	4613      	mov	r3, r2
 80a47ba:	813b      	strh	r3, [r7, #8]
  if (handle == &headled_init_parms->i2c_handle) {
 80a47bc:	4b0c      	ldr	r3, [pc, #48]	; (80a47f0 <headled_platform_read+0x48>)
 80a47be:	681b      	ldr	r3, [r3, #0]
 80a47c0:	3304      	adds	r3, #4
 80a47c2:	68fa      	ldr	r2, [r7, #12]
 80a47c4:	429a      	cmp	r2, r3
 80a47c6:	d10d      	bne.n	80a47e4 <headled_platform_read+0x3c>
    HAL_I2C_Mem_Read(handle, (uint16_t) HEAD_LED_AW21036_I2C_COMUNICATE_ADD,
 80a47c8:	7afb      	ldrb	r3, [r7, #11]
 80a47ca:	b29a      	uxth	r2, r3
 80a47cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a47d0:	9302      	str	r3, [sp, #8]
 80a47d2:	893b      	ldrh	r3, [r7, #8]
 80a47d4:	9301      	str	r3, [sp, #4]
 80a47d6:	687b      	ldr	r3, [r7, #4]
 80a47d8:	9300      	str	r3, [sp, #0]
 80a47da:	2301      	movs	r3, #1
 80a47dc:	2168      	movs	r1, #104	; 0x68
 80a47de:	68f8      	ldr	r0, [r7, #12]
 80a47e0:	f00d fce6 	bl	80b21b0 <HAL_I2C_Mem_Read>
                     reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  }

  return 0;
 80a47e4:	2300      	movs	r3, #0
}
 80a47e6:	4618      	mov	r0, r3
 80a47e8:	3710      	adds	r7, #16
 80a47ea:	46bd      	mov	sp, r7
 80a47ec:	bd80      	pop	{r7, pc}
 80a47ee:	bf00      	nop
 80a47f0:	20007fb4 	.word	0x20007fb4

080a47f4 <aw21036_i2c_write_bits>:

static int aw21036_i2c_write_bits(void *handle,
                                  unsigned char reg_addr, unsigned int mask,
                                  unsigned char reg_data)
{
 80a47f4:	b580      	push	{r7, lr}
 80a47f6:	b086      	sub	sp, #24
 80a47f8:	af00      	add	r7, sp, #0
 80a47fa:	60f8      	str	r0, [r7, #12]
 80a47fc:	607a      	str	r2, [r7, #4]
 80a47fe:	461a      	mov	r2, r3
 80a4800:	460b      	mov	r3, r1
 80a4802:	72fb      	strb	r3, [r7, #11]
 80a4804:	4613      	mov	r3, r2
 80a4806:	72bb      	strb	r3, [r7, #10]
  uint8_t reg_val;
  headled_platform_read(handle, reg_addr, &reg_val, 1);
 80a4808:	f107 0217 	add.w	r2, r7, #23
 80a480c:	7af9      	ldrb	r1, [r7, #11]
 80a480e:	2301      	movs	r3, #1
 80a4810:	68f8      	ldr	r0, [r7, #12]
 80a4812:	f7ff ffc9 	bl	80a47a8 <headled_platform_read>
  reg_val &= mask;
 80a4816:	687b      	ldr	r3, [r7, #4]
 80a4818:	b2da      	uxtb	r2, r3
 80a481a:	7dfb      	ldrb	r3, [r7, #23]
 80a481c:	4013      	ands	r3, r2
 80a481e:	b2db      	uxtb	r3, r3
 80a4820:	75fb      	strb	r3, [r7, #23]
  reg_val |= reg_data;
 80a4822:	7dfa      	ldrb	r2, [r7, #23]
 80a4824:	7abb      	ldrb	r3, [r7, #10]
 80a4826:	4313      	orrs	r3, r2
 80a4828:	b2db      	uxtb	r3, r3
 80a482a:	75fb      	strb	r3, [r7, #23]
  headled_platform_write(handle, reg_addr, &reg_val, 1);
 80a482c:	f107 0217 	add.w	r2, r7, #23
 80a4830:	7af9      	ldrb	r1, [r7, #11]
 80a4832:	2301      	movs	r3, #1
 80a4834:	68f8      	ldr	r0, [r7, #12]
 80a4836:	f7ff ff91 	bl	80a475c <headled_platform_write>
  return 0;
 80a483a:	2300      	movs	r3, #0
}
 80a483c:	4618      	mov	r0, r3
 80a483e:	3718      	adds	r7, #24
 80a4840:	46bd      	mov	sp, r7
 80a4842:	bd80      	pop	{r7, pc}

080a4844 <aw21036_chip_enable>:

static int aw21036_chip_enable(void *handle, bool flag)
{
 80a4844:	b580      	push	{r7, lr}
 80a4846:	b082      	sub	sp, #8
 80a4848:	af00      	add	r7, sp, #0
 80a484a:	6078      	str	r0, [r7, #4]
 80a484c:	460b      	mov	r3, r1
 80a484e:	70fb      	strb	r3, [r7, #3]
  if (flag)
 80a4850:	78fb      	ldrb	r3, [r7, #3]
 80a4852:	2b00      	cmp	r3, #0
 80a4854:	d007      	beq.n	80a4866 <aw21036_chip_enable+0x22>
    aw21036_i2c_write_bits(handle, AW21036_REG_GCR,
 80a4856:	2301      	movs	r3, #1
 80a4858:	f06f 0201 	mvn.w	r2, #1
 80a485c:	2100      	movs	r1, #0
 80a485e:	6878      	ldr	r0, [r7, #4]
 80a4860:	f7ff ffc8 	bl	80a47f4 <aw21036_i2c_write_bits>
 80a4864:	e006      	b.n	80a4874 <aw21036_chip_enable+0x30>
                           AW21036_BIT_GCR_CHIPEN_MASK,
                           AW21036_BIT_GCR_CHIPEN_ENABLE);
  else
    aw21036_i2c_write_bits(handle, AW21036_REG_GCR,
 80a4866:	2300      	movs	r3, #0
 80a4868:	f06f 0201 	mvn.w	r2, #1
 80a486c:	2100      	movs	r1, #0
 80a486e:	6878      	ldr	r0, [r7, #4]
 80a4870:	f7ff ffc0 	bl	80a47f4 <aw21036_i2c_write_bits>
                           AW21036_BIT_GCR_CHIPEN_MASK,
                           AW21036_BIT_GCR_CHIPEN_DISABLE);

  return 0;
 80a4874:	2300      	movs	r3, #0
}
 80a4876:	4618      	mov	r0, r3
 80a4878:	3708      	adds	r7, #8
 80a487a:	46bd      	mov	sp, r7
 80a487c:	bd80      	pop	{r7, pc}
	...

080a4880 <aw21036_pwm_freq_cfg>:

static int aw21036_pwm_freq_cfg(void *handle, struct aw21036 *aw21036)
{
 80a4880:	b580      	push	{r7, lr}
 80a4882:	b082      	sub	sp, #8
 80a4884:	af00      	add	r7, sp, #0
 80a4886:	6078      	str	r0, [r7, #4]
 80a4888:	6039      	str	r1, [r7, #0]
  printf("%s: enter\r\n", __func__);
 80a488a:	490c      	ldr	r1, [pc, #48]	; (80a48bc <aw21036_pwm_freq_cfg+0x3c>)
 80a488c:	480c      	ldr	r0, [pc, #48]	; (80a48c0 <aw21036_pwm_freq_cfg+0x40>)
 80a488e:	f01c f871 	bl	80c0974 <iprintf>

  aw21036_i2c_write_bits(handle, AW21036_REG_GCR,
                         AW21036_BIT_GCR_CLKFRQ_MASK, aw21036->pwm_freq);
 80a4892:	683b      	ldr	r3, [r7, #0]
 80a4894:	68db      	ldr	r3, [r3, #12]
  aw21036_i2c_write_bits(handle, AW21036_REG_GCR,
 80a4896:	b2db      	uxtb	r3, r3
 80a4898:	f06f 0270 	mvn.w	r2, #112	; 0x70
 80a489c:	2100      	movs	r1, #0
 80a489e:	6878      	ldr	r0, [r7, #4]
 80a48a0:	f7ff ffa8 	bl	80a47f4 <aw21036_i2c_write_bits>
  printf("%s: osc clk freq: 0x%x\r\n", __func__, aw21036->pwm_freq);
 80a48a4:	683b      	ldr	r3, [r7, #0]
 80a48a6:	68db      	ldr	r3, [r3, #12]
 80a48a8:	461a      	mov	r2, r3
 80a48aa:	4904      	ldr	r1, [pc, #16]	; (80a48bc <aw21036_pwm_freq_cfg+0x3c>)
 80a48ac:	4805      	ldr	r0, [pc, #20]	; (80a48c4 <aw21036_pwm_freq_cfg+0x44>)
 80a48ae:	f01c f861 	bl	80c0974 <iprintf>

  return 0;
 80a48b2:	2300      	movs	r3, #0
}
 80a48b4:	4618      	mov	r0, r3
 80a48b6:	3708      	adds	r7, #8
 80a48b8:	46bd      	mov	sp, r7
 80a48ba:	bd80      	pop	{r7, pc}
 80a48bc:	080c780c 	.word	0x080c780c
 80a48c0:	080c5598 	.word	0x080c5598
 80a48c4:	080c55a4 	.word	0x080c55a4

080a48c8 <aw21036_update_cfg_array>:
 *
 *****************************************************/
static void aw21036_update_cfg_array(void *handle,
                                     unsigned char *p_cfg_data,
                                     unsigned int cfg_size)
{
 80a48c8:	b580      	push	{r7, lr}
 80a48ca:	b086      	sub	sp, #24
 80a48cc:	af00      	add	r7, sp, #0
 80a48ce:	60f8      	str	r0, [r7, #12]
 80a48d0:	60b9      	str	r1, [r7, #8]
 80a48d2:	607a      	str	r2, [r7, #4]
  unsigned int i = 0;
 80a48d4:	2300      	movs	r3, #0
 80a48d6:	617b      	str	r3, [r7, #20]

  for (i = 0; i < cfg_size; i += 2)
 80a48d8:	2300      	movs	r3, #0
 80a48da:	617b      	str	r3, [r7, #20]
 80a48dc:	e00e      	b.n	80a48fc <aw21036_update_cfg_array+0x34>
    headled_platform_write(handle, p_cfg_data[i], &p_cfg_data[i + 1], 1);
 80a48de:	68ba      	ldr	r2, [r7, #8]
 80a48e0:	697b      	ldr	r3, [r7, #20]
 80a48e2:	4413      	add	r3, r2
 80a48e4:	7819      	ldrb	r1, [r3, #0]
 80a48e6:	697b      	ldr	r3, [r7, #20]
 80a48e8:	3301      	adds	r3, #1
 80a48ea:	68ba      	ldr	r2, [r7, #8]
 80a48ec:	441a      	add	r2, r3
 80a48ee:	2301      	movs	r3, #1
 80a48f0:	68f8      	ldr	r0, [r7, #12]
 80a48f2:	f7ff ff33 	bl	80a475c <headled_platform_write>
  for (i = 0; i < cfg_size; i += 2)
 80a48f6:	697b      	ldr	r3, [r7, #20]
 80a48f8:	3302      	adds	r3, #2
 80a48fa:	617b      	str	r3, [r7, #20]
 80a48fc:	697a      	ldr	r2, [r7, #20]
 80a48fe:	687b      	ldr	r3, [r7, #4]
 80a4900:	429a      	cmp	r2, r3
 80a4902:	d3ec      	bcc.n	80a48de <aw21036_update_cfg_array+0x16>
}
 80a4904:	bf00      	nop
 80a4906:	bf00      	nop
 80a4908:	3718      	adds	r7, #24
 80a490a:	46bd      	mov	sp, r7
 80a490c:	bd80      	pop	{r7, pc}
	...

080a4910 <aw21036_cfg_update>:

static int aw21036_cfg_update(void *handle, struct aw21036 *aw21036)
{
 80a4910:	b580      	push	{r7, lr}
 80a4912:	b082      	sub	sp, #8
 80a4914:	af00      	add	r7, sp, #0
 80a4916:	6078      	str	r0, [r7, #4]
 80a4918:	6039      	str	r1, [r7, #0]
  printf("%s: enter\r\n", __func__);
 80a491a:	490c      	ldr	r1, [pc, #48]	; (80a494c <aw21036_cfg_update+0x3c>)
 80a491c:	480c      	ldr	r0, [pc, #48]	; (80a4950 <aw21036_cfg_update+0x40>)
 80a491e:	f01c f829 	bl	80c0974 <iprintf>
  aw21036_update_cfg_array(handle,
                           (aw21036_cfg_array[aw21036->effect].p),
 80a4922:	683b      	ldr	r3, [r7, #0]
 80a4924:	7d1b      	ldrb	r3, [r3, #20]
 80a4926:	461a      	mov	r2, r3
  aw21036_update_cfg_array(handle,
 80a4928:	4b0a      	ldr	r3, [pc, #40]	; (80a4954 <aw21036_cfg_update+0x44>)
 80a492a:	f853 1032 	ldr.w	r1, [r3, r2, lsl #3]
                           aw21036_cfg_array[aw21036->effect].count);
 80a492e:	683b      	ldr	r3, [r7, #0]
 80a4930:	7d1b      	ldrb	r3, [r3, #20]
  aw21036_update_cfg_array(handle,
 80a4932:	4a08      	ldr	r2, [pc, #32]	; (80a4954 <aw21036_cfg_update+0x44>)
 80a4934:	00db      	lsls	r3, r3, #3
 80a4936:	4413      	add	r3, r2
 80a4938:	685b      	ldr	r3, [r3, #4]
 80a493a:	461a      	mov	r2, r3
 80a493c:	6878      	ldr	r0, [r7, #4]
 80a493e:	f7ff ffc3 	bl	80a48c8 <aw21036_update_cfg_array>
  return 0;
 80a4942:	2300      	movs	r3, #0
}
 80a4944:	4618      	mov	r0, r3
 80a4946:	3708      	adds	r7, #8
 80a4948:	46bd      	mov	sp, r7
 80a494a:	bd80      	pop	{r7, pc}
 80a494c:	080c7824 	.word	0x080c7824
 80a4950:	080c5598 	.word	0x080c5598
 80a4954:	200077f8 	.word	0x200077f8

080a4958 <aw21036_led_init>:
/******************************************************
 *
 * led class dev
 ******************************************************/
static int aw21036_led_init(void *handle, struct aw21036 *aw21036)
{
 80a4958:	b580      	push	{r7, lr}
 80a495a:	b084      	sub	sp, #16
 80a495c:	af00      	add	r7, sp, #0
 80a495e:	6078      	str	r0, [r7, #4]
 80a4960:	6039      	str	r1, [r7, #0]
  printf("%s: enter\r\n", __func__);
 80a4962:	4915      	ldr	r1, [pc, #84]	; (80a49b8 <aw21036_led_init+0x60>)
 80a4964:	4815      	ldr	r0, [pc, #84]	; (80a49bc <aw21036_led_init+0x64>)
 80a4966:	f01c f805 	bl	80c0974 <iprintf>
  uint8_t reg_val = 0x00;
 80a496a:	2300      	movs	r3, #0
 80a496c:	73fb      	strb	r3, [r7, #15]
  headled_platform_write(handle, AW21036_REG_RESET, &reg_val, 1);
 80a496e:	f107 020f 	add.w	r2, r7, #15
 80a4972:	2301      	movs	r3, #1
 80a4974:	217f      	movs	r1, #127	; 0x7f
 80a4976:	6878      	ldr	r0, [r7, #4]
 80a4978:	f7ff fef0 	bl	80a475c <headled_platform_write>
  osDelay(5);
 80a497c:	2005      	movs	r0, #5
 80a497e:	f011 fbbc 	bl	80b60fa <osDelay>
  aw21036_chip_enable(handle, true);
 80a4982:	2101      	movs	r1, #1
 80a4984:	6878      	ldr	r0, [r7, #4]
 80a4986:	f7ff ff5d 	bl	80a4844 <aw21036_chip_enable>
  osDelay(5);
 80a498a:	2005      	movs	r0, #5
 80a498c:	f011 fbb5 	bl	80b60fa <osDelay>

  aw21036_pwm_freq_cfg(handle, aw21036);
 80a4990:	6839      	ldr	r1, [r7, #0]
 80a4992:	6878      	ldr	r0, [r7, #4]
 80a4994:	f7ff ff74 	bl	80a4880 <aw21036_pwm_freq_cfg>

  aw21036_i2c_write_bits(handle, AW21036_REG_GCR,
 80a4998:	2380      	movs	r3, #128	; 0x80
 80a499a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80a499e:	2100      	movs	r1, #0
 80a49a0:	6878      	ldr	r0, [r7, #4]
 80a49a2:	f7ff ff27 	bl	80a47f4 <aw21036_i2c_write_bits>
                         AW21036_BIT_GCR_APSE_MASK,
                         AW21036_BIT_GCR_APSE_ENABLE);
  printf("%s: DONE!\r\n", __func__);
 80a49a6:	4904      	ldr	r1, [pc, #16]	; (80a49b8 <aw21036_led_init+0x60>)
 80a49a8:	4805      	ldr	r0, [pc, #20]	; (80a49c0 <aw21036_led_init+0x68>)
 80a49aa:	f01b ffe3 	bl	80c0974 <iprintf>
  return 0;
 80a49ae:	2300      	movs	r3, #0
}
 80a49b0:	4618      	mov	r0, r3
 80a49b2:	3710      	adds	r7, #16
 80a49b4:	46bd      	mov	sp, r7
 80a49b6:	bd80      	pop	{r7, pc}
 80a49b8:	080c7838 	.word	0x080c7838
 80a49bc:	080c5598 	.word	0x080c5598
 80a49c0:	080c55c0 	.word	0x080c55c0

080a49c4 <headled_hw_reset>:
 * NAME       : led_hw_reset
 * FUNCTION   : reset led
 * REMARKS    :
 *****************************************************************************/
static int headled_hw_reset(stmdev_ctx_t * ctx)
{
 80a49c4:	b580      	push	{r7, lr}
 80a49c6:	b082      	sub	sp, #8
 80a49c8:	af00      	add	r7, sp, #0
 80a49ca:	6078      	str	r0, [r7, #4]
  if (ctx != NULL) {
 80a49cc:	687b      	ldr	r3, [r7, #4]
 80a49ce:	2b00      	cmp	r3, #0
 80a49d0:	d012      	beq.n	80a49f8 <headled_hw_reset+0x34>
    HAL_GPIO_WritePin(HEAD_AND_REAR_LED_DRIVER_EN_GPIO_Port,
 80a49d2:	2200      	movs	r2, #0
 80a49d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80a49d8:	480c      	ldr	r0, [pc, #48]	; (80a4a0c <headled_hw_reset+0x48>)
 80a49da:	f00c fe55 	bl	80b1688 <HAL_GPIO_WritePin>
                      HEAD_AND_REAR_LED_DRIVER_EN_Pin, GPIO_PIN_RESET);
    osDelay(1);
 80a49de:	2001      	movs	r0, #1
 80a49e0:	f011 fb8b 	bl	80b60fa <osDelay>
    HAL_GPIO_WritePin(HEAD_AND_REAR_LED_DRIVER_EN_GPIO_Port,
 80a49e4:	2201      	movs	r2, #1
 80a49e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80a49ea:	4808      	ldr	r0, [pc, #32]	; (80a4a0c <headled_hw_reset+0x48>)
 80a49ec:	f00c fe4c 	bl	80b1688 <HAL_GPIO_WritePin>
                      HEAD_AND_REAR_LED_DRIVER_EN_Pin, GPIO_PIN_SET);
    osDelay(1);
 80a49f0:	2001      	movs	r0, #1
 80a49f2:	f011 fb82 	bl	80b60fa <osDelay>
 80a49f6:	e003      	b.n	80a4a00 <headled_hw_reset+0x3c>
  } else {
    printf("%s: failed\r\n", __func__);
 80a49f8:	4905      	ldr	r1, [pc, #20]	; (80a4a10 <headled_hw_reset+0x4c>)
 80a49fa:	4806      	ldr	r0, [pc, #24]	; (80a4a14 <headled_hw_reset+0x50>)
 80a49fc:	f01b ffba 	bl	80c0974 <iprintf>
  }
  return 0;
 80a4a00:	2300      	movs	r3, #0
}
 80a4a02:	4618      	mov	r0, r3
 80a4a04:	3708      	adds	r7, #8
 80a4a06:	46bd      	mov	sp, r7
 80a4a08:	bd80      	pop	{r7, pc}
 80a4a0a:	bf00      	nop
 80a4a0c:	40020400 	.word	0x40020400
 80a4a10:	080c784c 	.word	0x080c784c
 80a4a14:	080c55cc 	.word	0x080c55cc

080a4a18 <headled_init>:

int headled_init(void *para, void *para2)
{
 80a4a18:	b580      	push	{r7, lr}
 80a4a1a:	b084      	sub	sp, #16
 80a4a1c:	af00      	add	r7, sp, #0
 80a4a1e:	6078      	str	r0, [r7, #4]
 80a4a20:	6039      	str	r1, [r7, #0]
  headled_init_parms = (platform_prams *) para;
 80a4a22:	4a2d      	ldr	r2, [pc, #180]	; (80a4ad8 <headled_init+0xc0>)
 80a4a24:	687b      	ldr	r3, [r7, #4]
 80a4a26:	6013      	str	r3, [r2, #0]
  /* Initialize mems driver interface */
  headled_dev_ctx.write_reg = headled_platform_write;
 80a4a28:	4b2c      	ldr	r3, [pc, #176]	; (80a4adc <headled_init+0xc4>)
 80a4a2a:	4a2d      	ldr	r2, [pc, #180]	; (80a4ae0 <headled_init+0xc8>)
 80a4a2c:	601a      	str	r2, [r3, #0]
  headled_dev_ctx.read_reg = headled_platform_read;
 80a4a2e:	4b2b      	ldr	r3, [pc, #172]	; (80a4adc <headled_init+0xc4>)
 80a4a30:	4a2c      	ldr	r2, [pc, #176]	; (80a4ae4 <headled_init+0xcc>)
 80a4a32:	605a      	str	r2, [r3, #4]
  headled_dev_ctx.handle = &headled_init_parms->i2c_handle;
 80a4a34:	4b28      	ldr	r3, [pc, #160]	; (80a4ad8 <headled_init+0xc0>)
 80a4a36:	681b      	ldr	r3, [r3, #0]
 80a4a38:	3304      	adds	r3, #4
 80a4a3a:	4a28      	ldr	r2, [pc, #160]	; (80a4adc <headled_init+0xc4>)
 80a4a3c:	6093      	str	r3, [r2, #8]

  /* hardware reset */
  headled_hw_reset(&headled_dev_ctx);
 80a4a3e:	4827      	ldr	r0, [pc, #156]	; (80a4adc <headled_init+0xc4>)
 80a4a40:	f7ff ffc0 	bl	80a49c4 <headled_hw_reset>

  //osDelay(1);
  /* aw21036 chip id */
  uint8_t reg_val, ver_val;
  headled_platform_read(headled_dev_ctx.handle, AW21036_REG_RESET, &reg_val, 1);
 80a4a44:	4b25      	ldr	r3, [pc, #148]	; (80a4adc <headled_init+0xc4>)
 80a4a46:	6898      	ldr	r0, [r3, #8]
 80a4a48:	f107 020f 	add.w	r2, r7, #15
 80a4a4c:	2301      	movs	r3, #1
 80a4a4e:	217f      	movs	r1, #127	; 0x7f
 80a4a50:	f7ff feaa 	bl	80a47a8 <headled_platform_read>
  printf("led_init reg_id 0x%x\r\n", reg_val);
 80a4a54:	7bfb      	ldrb	r3, [r7, #15]
 80a4a56:	4619      	mov	r1, r3
 80a4a58:	4823      	ldr	r0, [pc, #140]	; (80a4ae8 <headled_init+0xd0>)
 80a4a5a:	f01b ff8b 	bl	80c0974 <iprintf>
  osDelay(1);
 80a4a5e:	2001      	movs	r0, #1
 80a4a60:	f011 fb4b 	bl	80b60fa <osDelay>
  headled_platform_read(headled_dev_ctx.handle, AW21036_REG_VER, &ver_val, 1);
 80a4a64:	4b1d      	ldr	r3, [pc, #116]	; (80a4adc <headled_init+0xc4>)
 80a4a66:	6898      	ldr	r0, [r3, #8]
 80a4a68:	f107 020e 	add.w	r2, r7, #14
 80a4a6c:	2301      	movs	r3, #1
 80a4a6e:	217e      	movs	r1, #126	; 0x7e
 80a4a70:	f7ff fe9a 	bl	80a47a8 <headled_platform_read>
  printf("led_init ver_id 0x%x\r\n", ver_val);
 80a4a74:	7bbb      	ldrb	r3, [r7, #14]
 80a4a76:	4619      	mov	r1, r3
 80a4a78:	481c      	ldr	r0, [pc, #112]	; (80a4aec <headled_init+0xd4>)
 80a4a7a:	f01b ff7b 	bl	80c0974 <iprintf>
  osDelay(1);
 80a4a7e:	2001      	movs	r0, #1
 80a4a80:	f011 fb3b 	bl	80b60fa <osDelay>
  if (reg_val != AW21036_CHIPID || ver_val != AW21036_CHIP_VERSION)
 80a4a84:	7bfb      	ldrb	r3, [r7, #15]
 80a4a86:	2b18      	cmp	r3, #24
 80a4a88:	d102      	bne.n	80a4a90 <headled_init+0x78>
 80a4a8a:	7bbb      	ldrb	r3, [r7, #14]
 80a4a8c:	2ba8      	cmp	r3, #168	; 0xa8
 80a4a8e:	d002      	beq.n	80a4a96 <headled_init+0x7e>
    return SENSOR_FAILED;
 80a4a90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a4a94:	e01b      	b.n	80a4ace <headled_init+0xb6>
  maw21036.chipid = reg_val;
 80a4a96:	7bfa      	ldrb	r2, [r7, #15]
 80a4a98:	4b15      	ldr	r3, [pc, #84]	; (80a4af0 <headled_init+0xd8>)
 80a4a9a:	705a      	strb	r2, [r3, #1]
  maw21036.led_current = LED_CURRENT_MAX;
 80a4a9c:	4b14      	ldr	r3, [pc, #80]	; (80a4af0 <headled_init+0xd8>)
 80a4a9e:	220f      	movs	r2, #15
 80a4aa0:	611a      	str	r2, [r3, #16]
  maw21036.pwm_freq = 1;
 80a4aa2:	4b13      	ldr	r3, [pc, #76]	; (80a4af0 <headled_init+0xd8>)
 80a4aa4:	2201      	movs	r2, #1
 80a4aa6:	60da      	str	r2, [r3, #12]
  maw21036.imax = 1;
 80a4aa8:	4b11      	ldr	r3, [pc, #68]	; (80a4af0 <headled_init+0xd8>)
 80a4aaa:	2201      	movs	r2, #1
 80a4aac:	605a      	str	r2, [r3, #4]
  aw21036_led_init(headled_dev_ctx.handle, &maw21036);
 80a4aae:	4b0b      	ldr	r3, [pc, #44]	; (80a4adc <headled_init+0xc4>)
 80a4ab0:	689b      	ldr	r3, [r3, #8]
 80a4ab2:	490f      	ldr	r1, [pc, #60]	; (80a4af0 <headled_init+0xd8>)
 80a4ab4:	4618      	mov	r0, r3
 80a4ab6:	f7ff ff4f 	bl	80a4958 <aw21036_led_init>
  maw21036.effect = 1;
 80a4aba:	4b0d      	ldr	r3, [pc, #52]	; (80a4af0 <headled_init+0xd8>)
 80a4abc:	2201      	movs	r2, #1
 80a4abe:	751a      	strb	r2, [r3, #20]
  aw21036_cfg_update(headled_dev_ctx.handle, &maw21036);
 80a4ac0:	4b06      	ldr	r3, [pc, #24]	; (80a4adc <headled_init+0xc4>)
 80a4ac2:	689b      	ldr	r3, [r3, #8]
 80a4ac4:	490a      	ldr	r1, [pc, #40]	; (80a4af0 <headled_init+0xd8>)
 80a4ac6:	4618      	mov	r0, r3
 80a4ac8:	f7ff ff22 	bl	80a4910 <aw21036_cfg_update>
  return SENSOR_SUCCESS;
 80a4acc:	2300      	movs	r3, #0
}
 80a4ace:	4618      	mov	r0, r3
 80a4ad0:	3710      	adds	r7, #16
 80a4ad2:	46bd      	mov	sp, r7
 80a4ad4:	bd80      	pop	{r7, pc}
 80a4ad6:	bf00      	nop
 80a4ad8:	20007fb4 	.word	0x20007fb4
 80a4adc:	20007fa8 	.word	0x20007fa8
 80a4ae0:	080a475d 	.word	0x080a475d
 80a4ae4:	080a47a9 	.word	0x080a47a9
 80a4ae8:	080c55dc 	.word	0x080c55dc
 80a4aec:	080c55f4 	.word	0x080c55f4
 80a4af0:	20007fbc 	.word	0x20007fbc

080a4af4 <headled_enable>:

static int32_t headled_enable()
{
 80a4af4:	b480      	push	{r7}
 80a4af6:	b083      	sub	sp, #12
 80a4af8:	af00      	add	r7, sp, #0
  int32_t ret = 0;
 80a4afa:	2300      	movs	r3, #0
 80a4afc:	607b      	str	r3, [r7, #4]

  if (sensor_activate_count == 0) {
 80a4afe:	4b0a      	ldr	r3, [pc, #40]	; (80a4b28 <headled_enable+0x34>)
 80a4b00:	781b      	ldrb	r3, [r3, #0]
 80a4b02:	2b00      	cmp	r3, #0
 80a4b04:	d102      	bne.n	80a4b0c <headled_enable+0x18>
    headled_activated = true;
 80a4b06:	4b09      	ldr	r3, [pc, #36]	; (80a4b2c <headled_enable+0x38>)
 80a4b08:	2201      	movs	r2, #1
 80a4b0a:	701a      	strb	r2, [r3, #0]
  }
  sensor_activate_count++;
 80a4b0c:	4b06      	ldr	r3, [pc, #24]	; (80a4b28 <headled_enable+0x34>)
 80a4b0e:	781b      	ldrb	r3, [r3, #0]
 80a4b10:	3301      	adds	r3, #1
 80a4b12:	b2da      	uxtb	r2, r3
 80a4b14:	4b04      	ldr	r3, [pc, #16]	; (80a4b28 <headled_enable+0x34>)
 80a4b16:	701a      	strb	r2, [r3, #0]
  return ret;
 80a4b18:	687b      	ldr	r3, [r7, #4]
}
 80a4b1a:	4618      	mov	r0, r3
 80a4b1c:	370c      	adds	r7, #12
 80a4b1e:	46bd      	mov	sp, r7
 80a4b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a4b24:	4770      	bx	lr
 80a4b26:	bf00      	nop
 80a4b28:	20007fb8 	.word	0x20007fb8
 80a4b2c:	20007fb9 	.word	0x20007fb9

080a4b30 <headled_disable>:

static int32_t headled_disable()
{
 80a4b30:	b480      	push	{r7}
 80a4b32:	b083      	sub	sp, #12
 80a4b34:	af00      	add	r7, sp, #0
  int32_t ret = 0;
 80a4b36:	2300      	movs	r3, #0
 80a4b38:	607b      	str	r3, [r7, #4]
  sensor_activate_count--;
 80a4b3a:	4b0a      	ldr	r3, [pc, #40]	; (80a4b64 <headled_disable+0x34>)
 80a4b3c:	781b      	ldrb	r3, [r3, #0]
 80a4b3e:	3b01      	subs	r3, #1
 80a4b40:	b2da      	uxtb	r2, r3
 80a4b42:	4b08      	ldr	r3, [pc, #32]	; (80a4b64 <headled_disable+0x34>)
 80a4b44:	701a      	strb	r2, [r3, #0]
  if (sensor_activate_count == 0) {
 80a4b46:	4b07      	ldr	r3, [pc, #28]	; (80a4b64 <headled_disable+0x34>)
 80a4b48:	781b      	ldrb	r3, [r3, #0]
 80a4b4a:	2b00      	cmp	r3, #0
 80a4b4c:	d102      	bne.n	80a4b54 <headled_disable+0x24>
    headled_activated = false;
 80a4b4e:	4b06      	ldr	r3, [pc, #24]	; (80a4b68 <headled_disable+0x38>)
 80a4b50:	2200      	movs	r2, #0
 80a4b52:	701a      	strb	r2, [r3, #0]
  }
  return ret;
 80a4b54:	687b      	ldr	r3, [r7, #4]
}
 80a4b56:	4618      	mov	r0, r3
 80a4b58:	370c      	adds	r7, #12
 80a4b5a:	46bd      	mov	sp, r7
 80a4b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a4b60:	4770      	bx	lr
 80a4b62:	bf00      	nop
 80a4b64:	20007fb8 	.word	0x20007fb8
 80a4b68:	20007fb9 	.word	0x20007fb9

080a4b6c <headled_activate>:

int headled_activate(bool activate)
{
 80a4b6c:	b580      	push	{r7, lr}
 80a4b6e:	b084      	sub	sp, #16
 80a4b70:	af00      	add	r7, sp, #0
 80a4b72:	4603      	mov	r3, r0
 80a4b74:	71fb      	strb	r3, [r7, #7]
  int res = 0;
 80a4b76:	2300      	movs	r3, #0
 80a4b78:	60fb      	str	r3, [r7, #12]
  printf("head led_activate: %d\r\n", activate);
 80a4b7a:	79fb      	ldrb	r3, [r7, #7]
 80a4b7c:	4619      	mov	r1, r3
 80a4b7e:	4809      	ldr	r0, [pc, #36]	; (80a4ba4 <headled_activate+0x38>)
 80a4b80:	f01b fef8 	bl	80c0974 <iprintf>
  if (activate) {
 80a4b84:	79fb      	ldrb	r3, [r7, #7]
 80a4b86:	2b00      	cmp	r3, #0
 80a4b88:	d003      	beq.n	80a4b92 <headled_activate+0x26>
    res = headled_enable();
 80a4b8a:	f7ff ffb3 	bl	80a4af4 <headled_enable>
 80a4b8e:	60f8      	str	r0, [r7, #12]
 80a4b90:	e002      	b.n	80a4b98 <headled_activate+0x2c>
  } else {
    res = headled_disable();
 80a4b92:	f7ff ffcd 	bl	80a4b30 <headled_disable>
 80a4b96:	60f8      	str	r0, [r7, #12]
  }
  return res;
 80a4b98:	68fb      	ldr	r3, [r7, #12]
}
 80a4b9a:	4618      	mov	r0, r3
 80a4b9c:	3710      	adds	r7, #16
 80a4b9e:	46bd      	mov	sp, r7
 80a4ba0:	bd80      	pop	{r7, pc}
 80a4ba2:	bf00      	nop
 80a4ba4:	080c560c 	.word	0x080c560c

080a4ba8 <headled_init_complete>:

int headled_init_complete(void *para)
{
 80a4ba8:	b480      	push	{r7}
 80a4baa:	b083      	sub	sp, #12
 80a4bac:	af00      	add	r7, sp, #0
 80a4bae:	6078      	str	r0, [r7, #4]
  //send init complete event to smgr?
  return SENSOR_SUCCESS;
 80a4bb0:	2300      	movs	r3, #0
}
 80a4bb2:	4618      	mov	r0, r3
 80a4bb4:	370c      	adds	r7, #12
 80a4bb6:	46bd      	mov	sp, r7
 80a4bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a4bbc:	4770      	bx	lr
	...

080a4bc0 <headled_config>:

int headled_config(uint8_t config, void *para)
{
 80a4bc0:	b580      	push	{r7, lr}
 80a4bc2:	b084      	sub	sp, #16
 80a4bc4:	af00      	add	r7, sp, #0
 80a4bc6:	4603      	mov	r3, r0
 80a4bc8:	6039      	str	r1, [r7, #0]
 80a4bca:	71fb      	strb	r3, [r7, #7]
  //send init complete event to smgr?

  uint8_t *config_data = NULL;
 80a4bcc:	2300      	movs	r3, #0
 80a4bce:	60fb      	str	r3, [r7, #12]
  config_data = (uint8_t *) para;
 80a4bd0:	683b      	ldr	r3, [r7, #0]
 80a4bd2:	60fb      	str	r3, [r7, #12]

  switch (config) {
 80a4bd4:	79fb      	ldrb	r3, [r7, #7]
 80a4bd6:	2b06      	cmp	r3, #6
 80a4bd8:	d105      	bne.n	80a4be6 <headled_config+0x26>
  case SENSOR_CONFIG_TIMEOUT:
    printf("@@@SENSOR_CONFIG_TIMEOUT!\r\n");
 80a4bda:	482a      	ldr	r0, [pc, #168]	; (80a4c84 <headled_config+0xc4>)
 80a4bdc:	f01b ff66 	bl	80c0aac <puts>
    headled_flow_water();
 80a4be0:	f000 f86c 	bl	80a4cbc <headled_flow_water>
    break;
 80a4be4:	e048      	b.n	80a4c78 <headled_config+0xb8>
  default:
    maw21036.effect = 0;
 80a4be6:	4b28      	ldr	r3, [pc, #160]	; (80a4c88 <headled_config+0xc8>)
 80a4be8:	2200      	movs	r2, #0
 80a4bea:	751a      	strb	r2, [r3, #20]
    aw21036_cfg_update(headled_dev_ctx.handle, &maw21036);
 80a4bec:	4b27      	ldr	r3, [pc, #156]	; (80a4c8c <headled_config+0xcc>)
 80a4bee:	689b      	ldr	r3, [r3, #8]
 80a4bf0:	4925      	ldr	r1, [pc, #148]	; (80a4c88 <headled_config+0xc8>)
 80a4bf2:	4618      	mov	r0, r3
 80a4bf4:	f7ff fe8c 	bl	80a4910 <aw21036_cfg_update>
    uint8_t config_type = config_data[0] & 0x0F;
 80a4bf8:	68fb      	ldr	r3, [r7, #12]
 80a4bfa:	781b      	ldrb	r3, [r3, #0]
 80a4bfc:	f003 030f 	and.w	r3, r3, #15
 80a4c00:	72fb      	strb	r3, [r7, #11]
    if (((config_data[0] >> 4) & 0x0F) == 0) {
 80a4c02:	68fb      	ldr	r3, [r7, #12]
 80a4c04:	781b      	ldrb	r3, [r3, #0]
 80a4c06:	091b      	lsrs	r3, r3, #4
 80a4c08:	b2db      	uxtb	r3, r3
 80a4c0a:	f003 030f 	and.w	r3, r3, #15
 80a4c0e:	2b00      	cmp	r3, #0
 80a4c10:	d131      	bne.n	80a4c76 <headled_config+0xb6>
      //0 off;1 white;2 red;3 green;4 blue; 5 white breathforever; 6 red breathforever; 7 green breathforever; 8 blue breathforever
      if (config_type == FLOW_WATER_COFIG_TYPE) {
 80a4c12:	7afb      	ldrb	r3, [r7, #11]
 80a4c14:	2b0f      	cmp	r3, #15
 80a4c16:	d10b      	bne.n	80a4c30 <headled_config+0x70>
        sensor_op_timer_enable(tim3);
 80a4c18:	4b1d      	ldr	r3, [pc, #116]	; (80a4c90 <headled_config+0xd0>)
 80a4c1a:	681b      	ldr	r3, [r3, #0]
 80a4c1c:	4618      	mov	r0, r3
 80a4c1e:	f008 f803 	bl	80acc28 <sensor_op_timer_enable>
        head_flow_water_effect = true;
 80a4c22:	4b1c      	ldr	r3, [pc, #112]	; (80a4c94 <headled_config+0xd4>)
 80a4c24:	2201      	movs	r2, #1
 80a4c26:	701a      	strb	r2, [r3, #0]
        head_flow_water_tick = 0;
 80a4c28:	4b1b      	ldr	r3, [pc, #108]	; (80a4c98 <headled_config+0xd8>)
 80a4c2a:	2200      	movs	r2, #0
 80a4c2c:	701a      	strb	r2, [r3, #0]
          maw21036.effect = 1;
          aw21036_cfg_update(headled_dev_ctx.handle, &maw21036);
        }
      }
    }
    break;
 80a4c2e:	e022      	b.n	80a4c76 <headled_config+0xb6>
        sensor_op_timer_disable(tim3);
 80a4c30:	4b17      	ldr	r3, [pc, #92]	; (80a4c90 <headled_config+0xd0>)
 80a4c32:	681b      	ldr	r3, [r3, #0]
 80a4c34:	4618      	mov	r0, r3
 80a4c36:	f008 f81d 	bl	80acc74 <sensor_op_timer_disable>
        head_flow_water_effect = false;
 80a4c3a:	4b16      	ldr	r3, [pc, #88]	; (80a4c94 <headled_config+0xd4>)
 80a4c3c:	2200      	movs	r2, #0
 80a4c3e:	701a      	strb	r2, [r3, #0]
        maw21036.effect = config_type;
 80a4c40:	4a11      	ldr	r2, [pc, #68]	; (80a4c88 <headled_config+0xc8>)
 80a4c42:	7afb      	ldrb	r3, [r7, #11]
 80a4c44:	7513      	strb	r3, [r2, #20]
        if (maw21036.effect < ARRAY_SIZE(aw21036_cfg_array))
 80a4c46:	4b10      	ldr	r3, [pc, #64]	; (80a4c88 <headled_config+0xc8>)
 80a4c48:	7d1b      	ldrb	r3, [r3, #20]
 80a4c4a:	2b0b      	cmp	r3, #11
 80a4c4c:	d806      	bhi.n	80a4c5c <headled_config+0x9c>
          aw21036_cfg_update(headled_dev_ctx.handle, &maw21036);
 80a4c4e:	4b0f      	ldr	r3, [pc, #60]	; (80a4c8c <headled_config+0xcc>)
 80a4c50:	689b      	ldr	r3, [r3, #8]
 80a4c52:	490d      	ldr	r1, [pc, #52]	; (80a4c88 <headled_config+0xc8>)
 80a4c54:	4618      	mov	r0, r3
 80a4c56:	f7ff fe5b 	bl	80a4910 <aw21036_cfg_update>
    break;
 80a4c5a:	e00c      	b.n	80a4c76 <headled_config+0xb6>
          printf("%s: effect out of range!\r\n", __func__);
 80a4c5c:	490f      	ldr	r1, [pc, #60]	; (80a4c9c <headled_config+0xdc>)
 80a4c5e:	4810      	ldr	r0, [pc, #64]	; (80a4ca0 <headled_config+0xe0>)
 80a4c60:	f01b fe88 	bl	80c0974 <iprintf>
          maw21036.effect = 1;
 80a4c64:	4b08      	ldr	r3, [pc, #32]	; (80a4c88 <headled_config+0xc8>)
 80a4c66:	2201      	movs	r2, #1
 80a4c68:	751a      	strb	r2, [r3, #20]
          aw21036_cfg_update(headled_dev_ctx.handle, &maw21036);
 80a4c6a:	4b08      	ldr	r3, [pc, #32]	; (80a4c8c <headled_config+0xcc>)
 80a4c6c:	689b      	ldr	r3, [r3, #8]
 80a4c6e:	4906      	ldr	r1, [pc, #24]	; (80a4c88 <headled_config+0xc8>)
 80a4c70:	4618      	mov	r0, r3
 80a4c72:	f7ff fe4d 	bl	80a4910 <aw21036_cfg_update>
    break;
 80a4c76:	bf00      	nop
  }
  return SENSOR_SUCCESS;
 80a4c78:	2300      	movs	r3, #0
}
 80a4c7a:	4618      	mov	r0, r3
 80a4c7c:	3710      	adds	r7, #16
 80a4c7e:	46bd      	mov	sp, r7
 80a4c80:	bd80      	pop	{r7, pc}
 80a4c82:	bf00      	nop
 80a4c84:	080c5624 	.word	0x080c5624
 80a4c88:	20007fbc 	.word	0x20007fbc
 80a4c8c:	20007fa8 	.word	0x20007fa8
 80a4c90:	2001bce8 	.word	0x2001bce8
 80a4c94:	20007fbb 	.word	0x20007fbb
 80a4c98:	20007fba 	.word	0x20007fba
 80a4c9c:	080c7860 	.word	0x080c7860
 80a4ca0:	080c5640 	.word	0x080c5640

080a4ca4 <headled_publish_config_resp>:

int headled_publish_config_resp(void *para)
{
 80a4ca4:	b480      	push	{r7}
 80a4ca6:	b083      	sub	sp, #12
 80a4ca8:	af00      	add	r7, sp, #0
 80a4caa:	6078      	str	r0, [r7, #4]
  //send init complete event to smgr?
  return SENSOR_SUCCESS;
 80a4cac:	2300      	movs	r3, #0
}
 80a4cae:	4618      	mov	r0, r3
 80a4cb0:	370c      	adds	r7, #12
 80a4cb2:	46bd      	mov	sp, r7
 80a4cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a4cb8:	4770      	bx	lr
	...

080a4cbc <headled_flow_water>:

void headled_flow_water(void)
{
 80a4cbc:	b580      	push	{r7, lr}
 80a4cbe:	af00      	add	r7, sp, #0
  //printf("Enter headled_flow_water!");
  if (head_flow_water_effect) {
 80a4cc0:	4b7e      	ldr	r3, [pc, #504]	; (80a4ebc <headled_flow_water+0x200>)
 80a4cc2:	781b      	ldrb	r3, [r3, #0]
 80a4cc4:	2b00      	cmp	r3, #0
 80a4cc6:	f000 8146 	beq.w	80a4f56 <headled_flow_water+0x29a>
    if (first_start_head_flow_water) {
 80a4cca:	4b7d      	ldr	r3, [pc, #500]	; (80a4ec0 <headled_flow_water+0x204>)
 80a4ccc:	781b      	ldrb	r3, [r3, #0]
 80a4cce:	2b00      	cmp	r3, #0
 80a4cd0:	d00c      	beq.n	80a4cec <headled_flow_water+0x30>
      //printf("head_flow_water_effect:%d !\r\n",head_flow_water_effect);
      first_start_head_flow_water = false;
 80a4cd2:	4b7b      	ldr	r3, [pc, #492]	; (80a4ec0 <headled_flow_water+0x204>)
 80a4cd4:	2200      	movs	r2, #0
 80a4cd6:	701a      	strb	r2, [r3, #0]
      aw21036_update_cfg_array(headled_dev_ctx.handle,
 80a4cd8:	4b7a      	ldr	r3, [pc, #488]	; (80a4ec4 <headled_flow_water+0x208>)
 80a4cda:	689b      	ldr	r3, [r3, #8]
 80a4cdc:	4a7a      	ldr	r2, [pc, #488]	; (80a4ec8 <headled_flow_water+0x20c>)
 80a4cde:	6891      	ldr	r1, [r2, #8]
 80a4ce0:	4a79      	ldr	r2, [pc, #484]	; (80a4ec8 <headled_flow_water+0x20c>)
 80a4ce2:	68d2      	ldr	r2, [r2, #12]
 80a4ce4:	4618      	mov	r0, r3
 80a4ce6:	f7ff fdef 	bl	80a48c8 <aw21036_update_cfg_array>

  } else {

  }

}
 80a4cea:	e134      	b.n	80a4f56 <headled_flow_water+0x29a>
      if (head_flow_water_tick >= 0 && head_flow_water_tick < 9) {
 80a4cec:	4b77      	ldr	r3, [pc, #476]	; (80a4ecc <headled_flow_water+0x210>)
 80a4cee:	781b      	ldrb	r3, [r3, #0]
 80a4cf0:	2b08      	cmp	r3, #8
 80a4cf2:	d825      	bhi.n	80a4d40 <headled_flow_water+0x84>
        headled_platform_write(headled_dev_ctx.handle,
 80a4cf4:	4b73      	ldr	r3, [pc, #460]	; (80a4ec4 <headled_flow_water+0x208>)
 80a4cf6:	6898      	ldr	r0, [r3, #8]
 80a4cf8:	4b74      	ldr	r3, [pc, #464]	; (80a4ecc <headled_flow_water+0x210>)
 80a4cfa:	781b      	ldrb	r3, [r3, #0]
 80a4cfc:	461a      	mov	r2, r3
 80a4cfe:	4b74      	ldr	r3, [pc, #464]	; (80a4ed0 <headled_flow_water+0x214>)
 80a4d00:	5c99      	ldrb	r1, [r3, r2]
 80a4d02:	2301      	movs	r3, #1
 80a4d04:	4a73      	ldr	r2, [pc, #460]	; (80a4ed4 <headled_flow_water+0x218>)
 80a4d06:	f7ff fd29 	bl	80a475c <headled_platform_write>
        headled_platform_write(headled_dev_ctx.handle,
 80a4d0a:	4b6e      	ldr	r3, [pc, #440]	; (80a4ec4 <headled_flow_water+0x208>)
 80a4d0c:	6898      	ldr	r0, [r3, #8]
                               LED_R_COL_REG[head_flow_water_tick] - 1,
 80a4d0e:	4b6f      	ldr	r3, [pc, #444]	; (80a4ecc <headled_flow_water+0x210>)
 80a4d10:	781b      	ldrb	r3, [r3, #0]
 80a4d12:	461a      	mov	r2, r3
 80a4d14:	4b6e      	ldr	r3, [pc, #440]	; (80a4ed0 <headled_flow_water+0x214>)
 80a4d16:	5c9b      	ldrb	r3, [r3, r2]
        headled_platform_write(headled_dev_ctx.handle,
 80a4d18:	3b01      	subs	r3, #1
 80a4d1a:	b2d9      	uxtb	r1, r3
 80a4d1c:	2301      	movs	r3, #1
 80a4d1e:	4a6e      	ldr	r2, [pc, #440]	; (80a4ed8 <headled_flow_water+0x21c>)
 80a4d20:	f7ff fd1c 	bl	80a475c <headled_platform_write>
        headled_platform_write(headled_dev_ctx.handle,
 80a4d24:	4b67      	ldr	r3, [pc, #412]	; (80a4ec4 <headled_flow_water+0x208>)
 80a4d26:	6898      	ldr	r0, [r3, #8]
                               LED_R_COL_REG[head_flow_water_tick] - 2,
 80a4d28:	4b68      	ldr	r3, [pc, #416]	; (80a4ecc <headled_flow_water+0x210>)
 80a4d2a:	781b      	ldrb	r3, [r3, #0]
 80a4d2c:	461a      	mov	r2, r3
 80a4d2e:	4b68      	ldr	r3, [pc, #416]	; (80a4ed0 <headled_flow_water+0x214>)
 80a4d30:	5c9b      	ldrb	r3, [r3, r2]
        headled_platform_write(headled_dev_ctx.handle,
 80a4d32:	3b02      	subs	r3, #2
 80a4d34:	b2d9      	uxtb	r1, r3
 80a4d36:	2301      	movs	r3, #1
 80a4d38:	4a67      	ldr	r2, [pc, #412]	; (80a4ed8 <headled_flow_water+0x21c>)
 80a4d3a:	f7ff fd0f 	bl	80a475c <headled_platform_write>
 80a4d3e:	e0fd      	b.n	80a4f3c <headled_flow_water+0x280>
      } else if (head_flow_water_tick >= 9 && head_flow_water_tick < 18) {
 80a4d40:	4b62      	ldr	r3, [pc, #392]	; (80a4ecc <headled_flow_water+0x210>)
 80a4d42:	781b      	ldrb	r3, [r3, #0]
 80a4d44:	2b08      	cmp	r3, #8
 80a4d46:	d92c      	bls.n	80a4da2 <headled_flow_water+0xe6>
 80a4d48:	4b60      	ldr	r3, [pc, #384]	; (80a4ecc <headled_flow_water+0x210>)
 80a4d4a:	781b      	ldrb	r3, [r3, #0]
 80a4d4c:	2b11      	cmp	r3, #17
 80a4d4e:	d828      	bhi.n	80a4da2 <headled_flow_water+0xe6>
        headled_platform_write(headled_dev_ctx.handle,
 80a4d50:	4b5c      	ldr	r3, [pc, #368]	; (80a4ec4 <headled_flow_water+0x208>)
 80a4d52:	6898      	ldr	r0, [r3, #8]
                               LED_R_COL_REG[17 - head_flow_water_tick],
 80a4d54:	4b5d      	ldr	r3, [pc, #372]	; (80a4ecc <headled_flow_water+0x210>)
 80a4d56:	781b      	ldrb	r3, [r3, #0]
 80a4d58:	f1c3 0311 	rsb	r3, r3, #17
        headled_platform_write(headled_dev_ctx.handle,
 80a4d5c:	4a5c      	ldr	r2, [pc, #368]	; (80a4ed0 <headled_flow_water+0x214>)
 80a4d5e:	5cd1      	ldrb	r1, [r2, r3]
 80a4d60:	2301      	movs	r3, #1
 80a4d62:	4a5d      	ldr	r2, [pc, #372]	; (80a4ed8 <headled_flow_water+0x21c>)
 80a4d64:	f7ff fcfa 	bl	80a475c <headled_platform_write>
        headled_platform_write(headled_dev_ctx.handle,
 80a4d68:	4b56      	ldr	r3, [pc, #344]	; (80a4ec4 <headled_flow_water+0x208>)
 80a4d6a:	6898      	ldr	r0, [r3, #8]
                               LED_R_COL_REG[17 - head_flow_water_tick] - 1,
 80a4d6c:	4b57      	ldr	r3, [pc, #348]	; (80a4ecc <headled_flow_water+0x210>)
 80a4d6e:	781b      	ldrb	r3, [r3, #0]
 80a4d70:	f1c3 0311 	rsb	r3, r3, #17
 80a4d74:	4a56      	ldr	r2, [pc, #344]	; (80a4ed0 <headled_flow_water+0x214>)
 80a4d76:	5cd3      	ldrb	r3, [r2, r3]
        headled_platform_write(headled_dev_ctx.handle,
 80a4d78:	3b01      	subs	r3, #1
 80a4d7a:	b2d9      	uxtb	r1, r3
 80a4d7c:	2301      	movs	r3, #1
 80a4d7e:	4a55      	ldr	r2, [pc, #340]	; (80a4ed4 <headled_flow_water+0x218>)
 80a4d80:	f7ff fcec 	bl	80a475c <headled_platform_write>
        headled_platform_write(headled_dev_ctx.handle,
 80a4d84:	4b4f      	ldr	r3, [pc, #316]	; (80a4ec4 <headled_flow_water+0x208>)
 80a4d86:	6898      	ldr	r0, [r3, #8]
                               LED_R_COL_REG[17 - head_flow_water_tick] - 2,
 80a4d88:	4b50      	ldr	r3, [pc, #320]	; (80a4ecc <headled_flow_water+0x210>)
 80a4d8a:	781b      	ldrb	r3, [r3, #0]
 80a4d8c:	f1c3 0311 	rsb	r3, r3, #17
 80a4d90:	4a4f      	ldr	r2, [pc, #316]	; (80a4ed0 <headled_flow_water+0x214>)
 80a4d92:	5cd3      	ldrb	r3, [r2, r3]
        headled_platform_write(headled_dev_ctx.handle,
 80a4d94:	3b02      	subs	r3, #2
 80a4d96:	b2d9      	uxtb	r1, r3
 80a4d98:	2301      	movs	r3, #1
 80a4d9a:	4a4f      	ldr	r2, [pc, #316]	; (80a4ed8 <headled_flow_water+0x21c>)
 80a4d9c:	f7ff fcde 	bl	80a475c <headled_platform_write>
 80a4da0:	e0cc      	b.n	80a4f3c <headled_flow_water+0x280>
      } else if (head_flow_water_tick >= 18 && head_flow_water_tick < 27) {
 80a4da2:	4b4a      	ldr	r3, [pc, #296]	; (80a4ecc <headled_flow_water+0x210>)
 80a4da4:	781b      	ldrb	r3, [r3, #0]
 80a4da6:	2b11      	cmp	r3, #17
 80a4da8:	d929      	bls.n	80a4dfe <headled_flow_water+0x142>
 80a4daa:	4b48      	ldr	r3, [pc, #288]	; (80a4ecc <headled_flow_water+0x210>)
 80a4dac:	781b      	ldrb	r3, [r3, #0]
 80a4dae:	2b1a      	cmp	r3, #26
 80a4db0:	d825      	bhi.n	80a4dfe <headled_flow_water+0x142>
        headled_platform_write(headled_dev_ctx.handle,
 80a4db2:	4b44      	ldr	r3, [pc, #272]	; (80a4ec4 <headled_flow_water+0x208>)
 80a4db4:	6898      	ldr	r0, [r3, #8]
                               LED_R_COL_REG[head_flow_water_tick - 18],
 80a4db6:	4b45      	ldr	r3, [pc, #276]	; (80a4ecc <headled_flow_water+0x210>)
 80a4db8:	781b      	ldrb	r3, [r3, #0]
 80a4dba:	3b12      	subs	r3, #18
        headled_platform_write(headled_dev_ctx.handle,
 80a4dbc:	4a44      	ldr	r2, [pc, #272]	; (80a4ed0 <headled_flow_water+0x214>)
 80a4dbe:	5cd1      	ldrb	r1, [r2, r3]
 80a4dc0:	2301      	movs	r3, #1
 80a4dc2:	4a45      	ldr	r2, [pc, #276]	; (80a4ed8 <headled_flow_water+0x21c>)
 80a4dc4:	f7ff fcca 	bl	80a475c <headled_platform_write>
        headled_platform_write(headled_dev_ctx.handle,
 80a4dc8:	4b3e      	ldr	r3, [pc, #248]	; (80a4ec4 <headled_flow_water+0x208>)
 80a4dca:	6898      	ldr	r0, [r3, #8]
                               LED_R_COL_REG[head_flow_water_tick - 18] - 1,
 80a4dcc:	4b3f      	ldr	r3, [pc, #252]	; (80a4ecc <headled_flow_water+0x210>)
 80a4dce:	781b      	ldrb	r3, [r3, #0]
 80a4dd0:	3b12      	subs	r3, #18
 80a4dd2:	4a3f      	ldr	r2, [pc, #252]	; (80a4ed0 <headled_flow_water+0x214>)
 80a4dd4:	5cd3      	ldrb	r3, [r2, r3]
        headled_platform_write(headled_dev_ctx.handle,
 80a4dd6:	3b01      	subs	r3, #1
 80a4dd8:	b2d9      	uxtb	r1, r3
 80a4dda:	2301      	movs	r3, #1
 80a4ddc:	4a3e      	ldr	r2, [pc, #248]	; (80a4ed8 <headled_flow_water+0x21c>)
 80a4dde:	f7ff fcbd 	bl	80a475c <headled_platform_write>
        headled_platform_write(headled_dev_ctx.handle,
 80a4de2:	4b38      	ldr	r3, [pc, #224]	; (80a4ec4 <headled_flow_water+0x208>)
 80a4de4:	6898      	ldr	r0, [r3, #8]
                               LED_R_COL_REG[head_flow_water_tick - 18] - 2,
 80a4de6:	4b39      	ldr	r3, [pc, #228]	; (80a4ecc <headled_flow_water+0x210>)
 80a4de8:	781b      	ldrb	r3, [r3, #0]
 80a4dea:	3b12      	subs	r3, #18
 80a4dec:	4a38      	ldr	r2, [pc, #224]	; (80a4ed0 <headled_flow_water+0x214>)
 80a4dee:	5cd3      	ldrb	r3, [r2, r3]
        headled_platform_write(headled_dev_ctx.handle,
 80a4df0:	3b02      	subs	r3, #2
 80a4df2:	b2d9      	uxtb	r1, r3
 80a4df4:	2301      	movs	r3, #1
 80a4df6:	4a37      	ldr	r2, [pc, #220]	; (80a4ed4 <headled_flow_water+0x218>)
 80a4df8:	f7ff fcb0 	bl	80a475c <headled_platform_write>
 80a4dfc:	e09e      	b.n	80a4f3c <headled_flow_water+0x280>
      } else if (head_flow_water_tick >= 27 && head_flow_water_tick < 36) {
 80a4dfe:	4b33      	ldr	r3, [pc, #204]	; (80a4ecc <headled_flow_water+0x210>)
 80a4e00:	781b      	ldrb	r3, [r3, #0]
 80a4e02:	2b1a      	cmp	r3, #26
 80a4e04:	d92c      	bls.n	80a4e60 <headled_flow_water+0x1a4>
 80a4e06:	4b31      	ldr	r3, [pc, #196]	; (80a4ecc <headled_flow_water+0x210>)
 80a4e08:	781b      	ldrb	r3, [r3, #0]
 80a4e0a:	2b23      	cmp	r3, #35	; 0x23
 80a4e0c:	d828      	bhi.n	80a4e60 <headled_flow_water+0x1a4>
        headled_platform_write(headled_dev_ctx.handle,
 80a4e0e:	4b2d      	ldr	r3, [pc, #180]	; (80a4ec4 <headled_flow_water+0x208>)
 80a4e10:	6898      	ldr	r0, [r3, #8]
                               LED_R_COL_REG[35 - head_flow_water_tick],
 80a4e12:	4b2e      	ldr	r3, [pc, #184]	; (80a4ecc <headled_flow_water+0x210>)
 80a4e14:	781b      	ldrb	r3, [r3, #0]
 80a4e16:	f1c3 0323 	rsb	r3, r3, #35	; 0x23
        headled_platform_write(headled_dev_ctx.handle,
 80a4e1a:	4a2d      	ldr	r2, [pc, #180]	; (80a4ed0 <headled_flow_water+0x214>)
 80a4e1c:	5cd1      	ldrb	r1, [r2, r3]
 80a4e1e:	2301      	movs	r3, #1
 80a4e20:	4a2c      	ldr	r2, [pc, #176]	; (80a4ed4 <headled_flow_water+0x218>)
 80a4e22:	f7ff fc9b 	bl	80a475c <headled_platform_write>
        headled_platform_write(headled_dev_ctx.handle,
 80a4e26:	4b27      	ldr	r3, [pc, #156]	; (80a4ec4 <headled_flow_water+0x208>)
 80a4e28:	6898      	ldr	r0, [r3, #8]
                               LED_R_COL_REG[35 - head_flow_water_tick] - 1,
 80a4e2a:	4b28      	ldr	r3, [pc, #160]	; (80a4ecc <headled_flow_water+0x210>)
 80a4e2c:	781b      	ldrb	r3, [r3, #0]
 80a4e2e:	f1c3 0323 	rsb	r3, r3, #35	; 0x23
 80a4e32:	4a27      	ldr	r2, [pc, #156]	; (80a4ed0 <headled_flow_water+0x214>)
 80a4e34:	5cd3      	ldrb	r3, [r2, r3]
        headled_platform_write(headled_dev_ctx.handle,
 80a4e36:	3b01      	subs	r3, #1
 80a4e38:	b2d9      	uxtb	r1, r3
 80a4e3a:	2301      	movs	r3, #1
 80a4e3c:	4a26      	ldr	r2, [pc, #152]	; (80a4ed8 <headled_flow_water+0x21c>)
 80a4e3e:	f7ff fc8d 	bl	80a475c <headled_platform_write>
        headled_platform_write(headled_dev_ctx.handle,
 80a4e42:	4b20      	ldr	r3, [pc, #128]	; (80a4ec4 <headled_flow_water+0x208>)
 80a4e44:	6898      	ldr	r0, [r3, #8]
                               LED_R_COL_REG[35 - head_flow_water_tick] - 2,
 80a4e46:	4b21      	ldr	r3, [pc, #132]	; (80a4ecc <headled_flow_water+0x210>)
 80a4e48:	781b      	ldrb	r3, [r3, #0]
 80a4e4a:	f1c3 0323 	rsb	r3, r3, #35	; 0x23
 80a4e4e:	4a20      	ldr	r2, [pc, #128]	; (80a4ed0 <headled_flow_water+0x214>)
 80a4e50:	5cd3      	ldrb	r3, [r2, r3]
        headled_platform_write(headled_dev_ctx.handle,
 80a4e52:	3b02      	subs	r3, #2
 80a4e54:	b2d9      	uxtb	r1, r3
 80a4e56:	2301      	movs	r3, #1
 80a4e58:	4a1f      	ldr	r2, [pc, #124]	; (80a4ed8 <headled_flow_water+0x21c>)
 80a4e5a:	f7ff fc7f 	bl	80a475c <headled_platform_write>
 80a4e5e:	e06d      	b.n	80a4f3c <headled_flow_water+0x280>
      } else if (head_flow_water_tick >= 36 && head_flow_water_tick < 45) {
 80a4e60:	4b1a      	ldr	r3, [pc, #104]	; (80a4ecc <headled_flow_water+0x210>)
 80a4e62:	781b      	ldrb	r3, [r3, #0]
 80a4e64:	2b23      	cmp	r3, #35	; 0x23
 80a4e66:	d939      	bls.n	80a4edc <headled_flow_water+0x220>
 80a4e68:	4b18      	ldr	r3, [pc, #96]	; (80a4ecc <headled_flow_water+0x210>)
 80a4e6a:	781b      	ldrb	r3, [r3, #0]
 80a4e6c:	2b2c      	cmp	r3, #44	; 0x2c
 80a4e6e:	d835      	bhi.n	80a4edc <headled_flow_water+0x220>
        headled_platform_write(headled_dev_ctx.handle,
 80a4e70:	4b14      	ldr	r3, [pc, #80]	; (80a4ec4 <headled_flow_water+0x208>)
 80a4e72:	6898      	ldr	r0, [r3, #8]
                               LED_R_COL_REG[head_flow_water_tick - 36],
 80a4e74:	4b15      	ldr	r3, [pc, #84]	; (80a4ecc <headled_flow_water+0x210>)
 80a4e76:	781b      	ldrb	r3, [r3, #0]
 80a4e78:	3b24      	subs	r3, #36	; 0x24
        headled_platform_write(headled_dev_ctx.handle,
 80a4e7a:	4a15      	ldr	r2, [pc, #84]	; (80a4ed0 <headled_flow_water+0x214>)
 80a4e7c:	5cd1      	ldrb	r1, [r2, r3]
 80a4e7e:	2301      	movs	r3, #1
 80a4e80:	4a15      	ldr	r2, [pc, #84]	; (80a4ed8 <headled_flow_water+0x21c>)
 80a4e82:	f7ff fc6b 	bl	80a475c <headled_platform_write>
        headled_platform_write(headled_dev_ctx.handle,
 80a4e86:	4b0f      	ldr	r3, [pc, #60]	; (80a4ec4 <headled_flow_water+0x208>)
 80a4e88:	6898      	ldr	r0, [r3, #8]
                               LED_R_COL_REG[head_flow_water_tick - 36] - 1,
 80a4e8a:	4b10      	ldr	r3, [pc, #64]	; (80a4ecc <headled_flow_water+0x210>)
 80a4e8c:	781b      	ldrb	r3, [r3, #0]
 80a4e8e:	3b24      	subs	r3, #36	; 0x24
 80a4e90:	4a0f      	ldr	r2, [pc, #60]	; (80a4ed0 <headled_flow_water+0x214>)
 80a4e92:	5cd3      	ldrb	r3, [r2, r3]
        headled_platform_write(headled_dev_ctx.handle,
 80a4e94:	3b01      	subs	r3, #1
 80a4e96:	b2d9      	uxtb	r1, r3
 80a4e98:	2301      	movs	r3, #1
 80a4e9a:	4a0e      	ldr	r2, [pc, #56]	; (80a4ed4 <headled_flow_water+0x218>)
 80a4e9c:	f7ff fc5e 	bl	80a475c <headled_platform_write>
        headled_platform_write(headled_dev_ctx.handle,
 80a4ea0:	4b08      	ldr	r3, [pc, #32]	; (80a4ec4 <headled_flow_water+0x208>)
 80a4ea2:	6898      	ldr	r0, [r3, #8]
                               LED_R_COL_REG[head_flow_water_tick - 36] - 2,
 80a4ea4:	4b09      	ldr	r3, [pc, #36]	; (80a4ecc <headled_flow_water+0x210>)
 80a4ea6:	781b      	ldrb	r3, [r3, #0]
 80a4ea8:	3b24      	subs	r3, #36	; 0x24
 80a4eaa:	4a09      	ldr	r2, [pc, #36]	; (80a4ed0 <headled_flow_water+0x214>)
 80a4eac:	5cd3      	ldrb	r3, [r2, r3]
        headled_platform_write(headled_dev_ctx.handle,
 80a4eae:	3b02      	subs	r3, #2
 80a4eb0:	b2d9      	uxtb	r1, r3
 80a4eb2:	2301      	movs	r3, #1
 80a4eb4:	4a08      	ldr	r2, [pc, #32]	; (80a4ed8 <headled_flow_water+0x21c>)
 80a4eb6:	f7ff fc51 	bl	80a475c <headled_platform_write>
 80a4eba:	e03f      	b.n	80a4f3c <headled_flow_water+0x280>
 80a4ebc:	20007fbb 	.word	0x20007fbb
 80a4ec0:	200077f4 	.word	0x200077f4
 80a4ec4:	20007fa8 	.word	0x20007fa8
 80a4ec8:	200077f8 	.word	0x200077f8
 80a4ecc:	20007fba 	.word	0x20007fba
 80a4ed0:	20007040 	.word	0x20007040
 80a4ed4:	2000703d 	.word	0x2000703d
 80a4ed8:	2000703c 	.word	0x2000703c
      } else if (head_flow_water_tick >= 45 && head_flow_water_tick < 54) {
 80a4edc:	4b1f      	ldr	r3, [pc, #124]	; (80a4f5c <headled_flow_water+0x2a0>)
 80a4ede:	781b      	ldrb	r3, [r3, #0]
 80a4ee0:	2b2c      	cmp	r3, #44	; 0x2c
 80a4ee2:	d92b      	bls.n	80a4f3c <headled_flow_water+0x280>
 80a4ee4:	4b1d      	ldr	r3, [pc, #116]	; (80a4f5c <headled_flow_water+0x2a0>)
 80a4ee6:	781b      	ldrb	r3, [r3, #0]
 80a4ee8:	2b35      	cmp	r3, #53	; 0x35
 80a4eea:	d827      	bhi.n	80a4f3c <headled_flow_water+0x280>
        headled_platform_write(headled_dev_ctx.handle,
 80a4eec:	4b1c      	ldr	r3, [pc, #112]	; (80a4f60 <headled_flow_water+0x2a4>)
 80a4eee:	6898      	ldr	r0, [r3, #8]
                               LED_R_COL_REG[53 - head_flow_water_tick],
 80a4ef0:	4b1a      	ldr	r3, [pc, #104]	; (80a4f5c <headled_flow_water+0x2a0>)
 80a4ef2:	781b      	ldrb	r3, [r3, #0]
 80a4ef4:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
        headled_platform_write(headled_dev_ctx.handle,
 80a4ef8:	4a1a      	ldr	r2, [pc, #104]	; (80a4f64 <headled_flow_water+0x2a8>)
 80a4efa:	5cd1      	ldrb	r1, [r2, r3]
 80a4efc:	2301      	movs	r3, #1
 80a4efe:	4a1a      	ldr	r2, [pc, #104]	; (80a4f68 <headled_flow_water+0x2ac>)
 80a4f00:	f7ff fc2c 	bl	80a475c <headled_platform_write>
        headled_platform_write(headled_dev_ctx.handle,
 80a4f04:	4b16      	ldr	r3, [pc, #88]	; (80a4f60 <headled_flow_water+0x2a4>)
 80a4f06:	6898      	ldr	r0, [r3, #8]
                               LED_R_COL_REG[53 - head_flow_water_tick] - 1,
 80a4f08:	4b14      	ldr	r3, [pc, #80]	; (80a4f5c <headled_flow_water+0x2a0>)
 80a4f0a:	781b      	ldrb	r3, [r3, #0]
 80a4f0c:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
 80a4f10:	4a14      	ldr	r2, [pc, #80]	; (80a4f64 <headled_flow_water+0x2a8>)
 80a4f12:	5cd3      	ldrb	r3, [r2, r3]
        headled_platform_write(headled_dev_ctx.handle,
 80a4f14:	3b01      	subs	r3, #1
 80a4f16:	b2d9      	uxtb	r1, r3
 80a4f18:	2301      	movs	r3, #1
 80a4f1a:	4a13      	ldr	r2, [pc, #76]	; (80a4f68 <headled_flow_water+0x2ac>)
 80a4f1c:	f7ff fc1e 	bl	80a475c <headled_platform_write>
        headled_platform_write(headled_dev_ctx.handle,
 80a4f20:	4b0f      	ldr	r3, [pc, #60]	; (80a4f60 <headled_flow_water+0x2a4>)
 80a4f22:	6898      	ldr	r0, [r3, #8]
                               LED_R_COL_REG[53 - head_flow_water_tick] - 2,
 80a4f24:	4b0d      	ldr	r3, [pc, #52]	; (80a4f5c <headled_flow_water+0x2a0>)
 80a4f26:	781b      	ldrb	r3, [r3, #0]
 80a4f28:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
 80a4f2c:	4a0d      	ldr	r2, [pc, #52]	; (80a4f64 <headled_flow_water+0x2a8>)
 80a4f2e:	5cd3      	ldrb	r3, [r2, r3]
        headled_platform_write(headled_dev_ctx.handle,
 80a4f30:	3b02      	subs	r3, #2
 80a4f32:	b2d9      	uxtb	r1, r3
 80a4f34:	2301      	movs	r3, #1
 80a4f36:	4a0d      	ldr	r2, [pc, #52]	; (80a4f6c <headled_flow_water+0x2b0>)
 80a4f38:	f7ff fc10 	bl	80a475c <headled_platform_write>
      head_flow_water_tick = head_flow_water_tick + 1;
 80a4f3c:	4b07      	ldr	r3, [pc, #28]	; (80a4f5c <headled_flow_water+0x2a0>)
 80a4f3e:	781b      	ldrb	r3, [r3, #0]
 80a4f40:	3301      	adds	r3, #1
 80a4f42:	b2da      	uxtb	r2, r3
 80a4f44:	4b05      	ldr	r3, [pc, #20]	; (80a4f5c <headled_flow_water+0x2a0>)
 80a4f46:	701a      	strb	r2, [r3, #0]
      if (head_flow_water_tick >= 54) {
 80a4f48:	4b04      	ldr	r3, [pc, #16]	; (80a4f5c <headled_flow_water+0x2a0>)
 80a4f4a:	781b      	ldrb	r3, [r3, #0]
 80a4f4c:	2b35      	cmp	r3, #53	; 0x35
 80a4f4e:	d902      	bls.n	80a4f56 <headled_flow_water+0x29a>
        head_flow_water_tick = 0;
 80a4f50:	4b02      	ldr	r3, [pc, #8]	; (80a4f5c <headled_flow_water+0x2a0>)
 80a4f52:	2200      	movs	r2, #0
 80a4f54:	701a      	strb	r2, [r3, #0]
}
 80a4f56:	bf00      	nop
 80a4f58:	bd80      	pop	{r7, pc}
 80a4f5a:	bf00      	nop
 80a4f5c:	20007fba 	.word	0x20007fba
 80a4f60:	20007fa8 	.word	0x20007fa8
 80a4f64:	20007040 	.word	0x20007040
 80a4f68:	2000703c 	.word	0x2000703c
 80a4f6c:	2000703d 	.word	0x2000703d

080a4f70 <led_platform_write>:
 * @param  len       number of consecutive register to write
 *
 */
static int32_t led_platform_write(void *handle, uint8_t reg, uint8_t * bufp,
                                  uint16_t len)
{
 80a4f70:	b580      	push	{r7, lr}
 80a4f72:	b088      	sub	sp, #32
 80a4f74:	af04      	add	r7, sp, #16
 80a4f76:	60f8      	str	r0, [r7, #12]
 80a4f78:	607a      	str	r2, [r7, #4]
 80a4f7a:	461a      	mov	r2, r3
 80a4f7c:	460b      	mov	r3, r1
 80a4f7e:	72fb      	strb	r3, [r7, #11]
 80a4f80:	4613      	mov	r3, r2
 80a4f82:	813b      	strh	r3, [r7, #8]
  if (handle == &led_init_parms->i2c_handle) {
 80a4f84:	4b16      	ldr	r3, [pc, #88]	; (80a4fe0 <led_platform_write+0x70>)
 80a4f86:	681b      	ldr	r3, [r3, #0]
 80a4f88:	3304      	adds	r3, #4
 80a4f8a:	68fa      	ldr	r2, [r7, #12]
 80a4f8c:	429a      	cmp	r2, r3
 80a4f8e:	d121      	bne.n	80a4fd4 <led_platform_write+0x64>
    if (led_init_parms->boardID == REAR_BOARD) {
 80a4f90:	4b13      	ldr	r3, [pc, #76]	; (80a4fe0 <led_platform_write+0x70>)
 80a4f92:	681b      	ldr	r3, [r3, #0]
 80a4f94:	781b      	ldrb	r3, [r3, #0]
 80a4f96:	2b00      	cmp	r3, #0
 80a4f98:	d10e      	bne.n	80a4fb8 <led_platform_write+0x48>
      HAL_I2C_Mem_Write(handle, (uint16_t) REAR_LED_I2C_COMUNICATE_ADD, reg,
 80a4f9a:	7afb      	ldrb	r3, [r7, #11]
 80a4f9c:	b29a      	uxth	r2, r3
 80a4f9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a4fa2:	9302      	str	r3, [sp, #8]
 80a4fa4:	893b      	ldrh	r3, [r7, #8]
 80a4fa6:	9301      	str	r3, [sp, #4]
 80a4fa8:	687b      	ldr	r3, [r7, #4]
 80a4faa:	9300      	str	r3, [sp, #0]
 80a4fac:	2301      	movs	r3, #1
 80a4fae:	21b6      	movs	r1, #182	; 0xb6
 80a4fb0:	68f8      	ldr	r0, [r7, #12]
 80a4fb2:	f00d f803 	bl	80b1fbc <HAL_I2C_Mem_Write>
 80a4fb6:	e00d      	b.n	80a4fd4 <led_platform_write+0x64>
                        I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
    } else {
      HAL_I2C_Mem_Write(handle, (uint16_t) HEAD_LED_I2C_COMUNICATE_ADD, reg,
 80a4fb8:	7afb      	ldrb	r3, [r7, #11]
 80a4fba:	b29a      	uxth	r2, r3
 80a4fbc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a4fc0:	9302      	str	r3, [sp, #8]
 80a4fc2:	893b      	ldrh	r3, [r7, #8]
 80a4fc4:	9301      	str	r3, [sp, #4]
 80a4fc6:	687b      	ldr	r3, [r7, #4]
 80a4fc8:	9300      	str	r3, [sp, #0]
 80a4fca:	2301      	movs	r3, #1
 80a4fcc:	21b0      	movs	r1, #176	; 0xb0
 80a4fce:	68f8      	ldr	r0, [r7, #12]
 80a4fd0:	f00c fff4 	bl	80b1fbc <HAL_I2C_Mem_Write>
                        I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
    }
  }

  return 0;
 80a4fd4:	2300      	movs	r3, #0
}
 80a4fd6:	4618      	mov	r0, r3
 80a4fd8:	3710      	adds	r7, #16
 80a4fda:	46bd      	mov	sp, r7
 80a4fdc:	bd80      	pop	{r7, pc}
 80a4fde:	bf00      	nop
 80a4fe0:	20007fe8 	.word	0x20007fe8

080a4fe4 <led_platform_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t led_platform_read(void *handle, uint8_t reg, uint8_t * bufp,
                                 uint16_t len)
{
 80a4fe4:	b580      	push	{r7, lr}
 80a4fe6:	b088      	sub	sp, #32
 80a4fe8:	af04      	add	r7, sp, #16
 80a4fea:	60f8      	str	r0, [r7, #12]
 80a4fec:	607a      	str	r2, [r7, #4]
 80a4fee:	461a      	mov	r2, r3
 80a4ff0:	460b      	mov	r3, r1
 80a4ff2:	72fb      	strb	r3, [r7, #11]
 80a4ff4:	4613      	mov	r3, r2
 80a4ff6:	813b      	strh	r3, [r7, #8]
  if (handle == &led_init_parms->i2c_handle) {
 80a4ff8:	4b16      	ldr	r3, [pc, #88]	; (80a5054 <led_platform_read+0x70>)
 80a4ffa:	681b      	ldr	r3, [r3, #0]
 80a4ffc:	3304      	adds	r3, #4
 80a4ffe:	68fa      	ldr	r2, [r7, #12]
 80a5000:	429a      	cmp	r2, r3
 80a5002:	d121      	bne.n	80a5048 <led_platform_read+0x64>
    if (led_init_parms->boardID == REAR_BOARD) {
 80a5004:	4b13      	ldr	r3, [pc, #76]	; (80a5054 <led_platform_read+0x70>)
 80a5006:	681b      	ldr	r3, [r3, #0]
 80a5008:	781b      	ldrb	r3, [r3, #0]
 80a500a:	2b00      	cmp	r3, #0
 80a500c:	d10e      	bne.n	80a502c <led_platform_read+0x48>
      HAL_I2C_Mem_Read(handle, (uint16_t) REAR_LED_I2C_COMUNICATE_ADD, reg,
 80a500e:	7afb      	ldrb	r3, [r7, #11]
 80a5010:	b29a      	uxth	r2, r3
 80a5012:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a5016:	9302      	str	r3, [sp, #8]
 80a5018:	893b      	ldrh	r3, [r7, #8]
 80a501a:	9301      	str	r3, [sp, #4]
 80a501c:	687b      	ldr	r3, [r7, #4]
 80a501e:	9300      	str	r3, [sp, #0]
 80a5020:	2301      	movs	r3, #1
 80a5022:	21b6      	movs	r1, #182	; 0xb6
 80a5024:	68f8      	ldr	r0, [r7, #12]
 80a5026:	f00d f8c3 	bl	80b21b0 <HAL_I2C_Mem_Read>
 80a502a:	e00d      	b.n	80a5048 <led_platform_read+0x64>
                       I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
    } else {
      HAL_I2C_Mem_Read(handle, (uint16_t) HEAD_LED_I2C_COMUNICATE_ADD, reg,
 80a502c:	7afb      	ldrb	r3, [r7, #11]
 80a502e:	b29a      	uxth	r2, r3
 80a5030:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a5034:	9302      	str	r3, [sp, #8]
 80a5036:	893b      	ldrh	r3, [r7, #8]
 80a5038:	9301      	str	r3, [sp, #4]
 80a503a:	687b      	ldr	r3, [r7, #4]
 80a503c:	9300      	str	r3, [sp, #0]
 80a503e:	2301      	movs	r3, #1
 80a5040:	21b0      	movs	r1, #176	; 0xb0
 80a5042:	68f8      	ldr	r0, [r7, #12]
 80a5044:	f00d f8b4 	bl	80b21b0 <HAL_I2C_Mem_Read>
                       I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
    }
  }

  return 0;
 80a5048:	2300      	movs	r3, #0
}
 80a504a:	4618      	mov	r0, r3
 80a504c:	3710      	adds	r7, #16
 80a504e:	46bd      	mov	sp, r7
 80a5050:	bd80      	pop	{r7, pc}
 80a5052:	bf00      	nop
 80a5054:	20007fe8 	.word	0x20007fe8

080a5058 <aw9110_led_blink>:

static void aw9110_led_blink(stmdev_ctx_t * ctx, struct aw9110B *aw9110,
                             uint8_t * brightness, uint8_t enablebits)
{
 80a5058:	b580      	push	{r7, lr}
 80a505a:	b086      	sub	sp, #24
 80a505c:	af00      	add	r7, sp, #0
 80a505e:	60f8      	str	r0, [r7, #12]
 80a5060:	60b9      	str	r1, [r7, #8]
 80a5062:	607a      	str	r2, [r7, #4]
 80a5064:	70fb      	strb	r3, [r7, #3]
  uint8_t tmp;

  if (enablebits) {
 80a5066:	78fb      	ldrb	r3, [r7, #3]
 80a5068:	2b00      	cmp	r3, #0
 80a506a:	f000 8093 	beq.w	80a5194 <aw9110_led_blink+0x13c>
    tmp = 0x00;
 80a506e:	2300      	movs	r3, #0
 80a5070:	74fb      	strb	r3, [r7, #19]
    led_platform_write(ctx->handle, REG_WORK_MODE_P0, &tmp, 1); // led mode
 80a5072:	68fb      	ldr	r3, [r7, #12]
 80a5074:	6898      	ldr	r0, [r3, #8]
 80a5076:	f107 0213 	add.w	r2, r7, #19
 80a507a:	2301      	movs	r3, #1
 80a507c:	2112      	movs	r1, #18
 80a507e:	f7ff ff77 	bl	80a4f70 <led_platform_write>
    led_platform_write(ctx->handle, REG_WORK_MODE_P1, &tmp, 1); // led mode
 80a5082:	68fb      	ldr	r3, [r7, #12]
 80a5084:	6898      	ldr	r0, [r3, #8]
 80a5086:	f107 0213 	add.w	r2, r7, #19
 80a508a:	2301      	movs	r3, #1
 80a508c:	2113      	movs	r1, #19
 80a508e:	f7ff ff6f 	bl	80a4f70 <led_platform_write>
    tmp = enablebits;
 80a5092:	78fb      	ldrb	r3, [r7, #3]
 80a5094:	74fb      	strb	r3, [r7, #19]
    led_platform_write(ctx->handle, REG_EN_BREATH, &tmp, 1);    // enable breath
 80a5096:	68fb      	ldr	r3, [r7, #12]
 80a5098:	6898      	ldr	r0, [r3, #8]
 80a509a:	f107 0213 	add.w	r2, r7, #19
 80a509e:	2301      	movs	r3, #1
 80a50a0:	2114      	movs	r1, #20
 80a50a2:	f7ff ff65 	bl	80a4f70 <led_platform_write>
    tmp = (enablebits >> 4) & 0x03;
 80a50a6:	78fb      	ldrb	r3, [r7, #3]
 80a50a8:	091b      	lsrs	r3, r3, #4
 80a50aa:	b2db      	uxtb	r3, r3
 80a50ac:	f003 0303 	and.w	r3, r3, #3
 80a50b0:	b2db      	uxtb	r3, r3
 80a50b2:	74fb      	strb	r3, [r7, #19]
    led_platform_write(ctx->handle, REG_CONFIG_P0, &tmp, 1);    // blink mode
 80a50b4:	68fb      	ldr	r3, [r7, #12]
 80a50b6:	6898      	ldr	r0, [r3, #8]
 80a50b8:	f107 0213 	add.w	r2, r7, #19
 80a50bc:	2301      	movs	r3, #1
 80a50be:	2104      	movs	r1, #4
 80a50c0:	f7ff ff56 	bl	80a4f70 <led_platform_write>
    tmp = enablebits & 0x0f;
 80a50c4:	78fb      	ldrb	r3, [r7, #3]
 80a50c6:	f003 030f 	and.w	r3, r3, #15
 80a50ca:	b2db      	uxtb	r3, r3
 80a50cc:	74fb      	strb	r3, [r7, #19]
    led_platform_write(ctx->handle, REG_CONFIG_P1, &tmp, 1);    // blink mode
 80a50ce:	68fb      	ldr	r3, [r7, #12]
 80a50d0:	6898      	ldr	r0, [r3, #8]
 80a50d2:	f107 0213 	add.w	r2, r7, #19
 80a50d6:	2301      	movs	r3, #1
 80a50d8:	2105      	movs	r1, #5
 80a50da:	f7ff ff49 	bl	80a4f70 <led_platform_write>
    tmp = (aw9110->fall_time << 3) | (aw9110->rise_time);
 80a50de:	68bb      	ldr	r3, [r7, #8]
 80a50e0:	68db      	ldr	r3, [r3, #12]
 80a50e2:	00db      	lsls	r3, r3, #3
 80a50e4:	b25a      	sxtb	r2, r3
 80a50e6:	68bb      	ldr	r3, [r7, #8]
 80a50e8:	685b      	ldr	r3, [r3, #4]
 80a50ea:	b25b      	sxtb	r3, r3
 80a50ec:	4313      	orrs	r3, r2
 80a50ee:	b25b      	sxtb	r3, r3
 80a50f0:	b2db      	uxtb	r3, r3
 80a50f2:	74fb      	strb	r3, [r7, #19]
    led_platform_write(ctx->handle, REG_FADE_TIME, &tmp, 1);    // fade time
 80a50f4:	68fb      	ldr	r3, [r7, #12]
 80a50f6:	6898      	ldr	r0, [r3, #8]
 80a50f8:	f107 0213 	add.w	r2, r7, #19
 80a50fc:	2301      	movs	r3, #1
 80a50fe:	2115      	movs	r1, #21
 80a5100:	f7ff ff36 	bl	80a4f70 <led_platform_write>
    tmp = (aw9110->off_time << 3) | (aw9110->on_time);
 80a5104:	68bb      	ldr	r3, [r7, #8]
 80a5106:	691b      	ldr	r3, [r3, #16]
 80a5108:	00db      	lsls	r3, r3, #3
 80a510a:	b25a      	sxtb	r2, r3
 80a510c:	68bb      	ldr	r3, [r7, #8]
 80a510e:	689b      	ldr	r3, [r3, #8]
 80a5110:	b25b      	sxtb	r3, r3
 80a5112:	4313      	orrs	r3, r2
 80a5114:	b25b      	sxtb	r3, r3
 80a5116:	b2db      	uxtb	r3, r3
 80a5118:	74fb      	strb	r3, [r7, #19]
    led_platform_write(ctx->handle, REG_FULL_TIME, &tmp, 1);    // on/off time
 80a511a:	68fb      	ldr	r3, [r7, #12]
 80a511c:	6898      	ldr	r0, [r3, #8]
 80a511e:	f107 0213 	add.w	r2, r7, #19
 80a5122:	2301      	movs	r3, #1
 80a5124:	2116      	movs	r1, #22
 80a5126:	f7ff ff23 	bl	80a4f70 <led_platform_write>
    for (int i = 0; i < 6; i++) {
 80a512a:	2300      	movs	r3, #0
 80a512c:	617b      	str	r3, [r7, #20]
 80a512e:	e024      	b.n	80a517a <aw9110_led_blink+0x122>
      if ((enablebits >> i) & 0x01) {
 80a5130:	78fa      	ldrb	r2, [r7, #3]
 80a5132:	697b      	ldr	r3, [r7, #20]
 80a5134:	fa42 f303 	asr.w	r3, r2, r3
 80a5138:	f003 0301 	and.w	r3, r3, #1
 80a513c:	2b00      	cmp	r3, #0
 80a513e:	d00c      	beq.n	80a515a <aw9110_led_blink+0x102>
        led_platform_write(ctx->handle, REG_DIM00 + i, &brightness[i], 1);      // dimming
 80a5140:	68fb      	ldr	r3, [r7, #12]
 80a5142:	6898      	ldr	r0, [r3, #8]
 80a5144:	697b      	ldr	r3, [r7, #20]
 80a5146:	b2db      	uxtb	r3, r3
 80a5148:	3320      	adds	r3, #32
 80a514a:	b2d9      	uxtb	r1, r3
 80a514c:	697b      	ldr	r3, [r7, #20]
 80a514e:	687a      	ldr	r2, [r7, #4]
 80a5150:	441a      	add	r2, r3
 80a5152:	2301      	movs	r3, #1
 80a5154:	f7ff ff0c 	bl	80a4f70 <led_platform_write>
 80a5158:	e00c      	b.n	80a5174 <aw9110_led_blink+0x11c>
      }
      else {
    	  tmp = 0x00;
 80a515a:	2300      	movs	r3, #0
 80a515c:	74fb      	strb	r3, [r7, #19]
    	  led_platform_write(ctx->handle, REG_DIM00 + i, &tmp, 1);      // dimming
 80a515e:	68fb      	ldr	r3, [r7, #12]
 80a5160:	6898      	ldr	r0, [r3, #8]
 80a5162:	697b      	ldr	r3, [r7, #20]
 80a5164:	b2db      	uxtb	r3, r3
 80a5166:	3320      	adds	r3, #32
 80a5168:	b2d9      	uxtb	r1, r3
 80a516a:	f107 0213 	add.w	r2, r7, #19
 80a516e:	2301      	movs	r3, #1
 80a5170:	f7ff fefe 	bl	80a4f70 <led_platform_write>
    for (int i = 0; i < 6; i++) {
 80a5174:	697b      	ldr	r3, [r7, #20]
 80a5176:	3301      	adds	r3, #1
 80a5178:	617b      	str	r3, [r7, #20]
 80a517a:	697b      	ldr	r3, [r7, #20]
 80a517c:	2b05      	cmp	r3, #5
 80a517e:	ddd7      	ble.n	80a5130 <aw9110_led_blink+0xd8>
      }
    }
    tmp = 0x83;                 //| aw9110->imax;
 80a5180:	2383      	movs	r3, #131	; 0x83
 80a5182:	74fb      	strb	r3, [r7, #19]
    led_platform_write(ctx->handle, REG_CTRL, &tmp, 1); // blink enable | imax
 80a5184:	68fb      	ldr	r3, [r7, #12]
 80a5186:	6898      	ldr	r0, [r3, #8]
 80a5188:	f107 0213 	add.w	r2, r7, #19
 80a518c:	2301      	movs	r3, #1
 80a518e:	2111      	movs	r1, #17
 80a5190:	f7ff feee 	bl	80a4f70 <led_platform_write>
  }
}
 80a5194:	bf00      	nop
 80a5196:	3718      	adds	r7, #24
 80a5198:	46bd      	mov	sp, r7
 80a519a:	bd80      	pop	{r7, pc}

080a519c <aw9110_led_off>:

static int aw9110_led_off(stmdev_ctx_t * ctx)
{
 80a519c:	b580      	push	{r7, lr}
 80a519e:	b084      	sub	sp, #16
 80a51a0:	af00      	add	r7, sp, #0
 80a51a2:	6078      	str	r0, [r7, #4]
  uint8_t tmp = 0x00;
 80a51a4:	2300      	movs	r3, #0
 80a51a6:	72fb      	strb	r3, [r7, #11]
  led_platform_write(ctx->handle, REG_WORK_MODE_P0, &tmp, 1);   // led mode
 80a51a8:	687b      	ldr	r3, [r7, #4]
 80a51aa:	6898      	ldr	r0, [r3, #8]
 80a51ac:	f107 020b 	add.w	r2, r7, #11
 80a51b0:	2301      	movs	r3, #1
 80a51b2:	2112      	movs	r1, #18
 80a51b4:	f7ff fedc 	bl	80a4f70 <led_platform_write>
  led_platform_write(ctx->handle, REG_WORK_MODE_P1, &tmp, 1);   // led mode
 80a51b8:	687b      	ldr	r3, [r7, #4]
 80a51ba:	6898      	ldr	r0, [r3, #8]
 80a51bc:	f107 020b 	add.w	r2, r7, #11
 80a51c0:	2301      	movs	r3, #1
 80a51c2:	2113      	movs	r1, #19
 80a51c4:	f7ff fed4 	bl	80a4f70 <led_platform_write>
  led_platform_write(ctx->handle, REG_EN_BREATH, &tmp, 1);      // disable breath
 80a51c8:	687b      	ldr	r3, [r7, #4]
 80a51ca:	6898      	ldr	r0, [r3, #8]
 80a51cc:	f107 020b 	add.w	r2, r7, #11
 80a51d0:	2301      	movs	r3, #1
 80a51d2:	2114      	movs	r1, #20
 80a51d4:	f7ff fecc 	bl	80a4f70 <led_platform_write>
  tmp = 0x03;
 80a51d8:	2303      	movs	r3, #3
 80a51da:	72fb      	strb	r3, [r7, #11]
  led_platform_write(ctx->handle, REG_CTRL, &tmp, 1);   // imax
 80a51dc:	687b      	ldr	r3, [r7, #4]
 80a51de:	6898      	ldr	r0, [r3, #8]
 80a51e0:	f107 020b 	add.w	r2, r7, #11
 80a51e4:	2301      	movs	r3, #1
 80a51e6:	2111      	movs	r1, #17
 80a51e8:	f7ff fec2 	bl	80a4f70 <led_platform_write>
  tmp = 0x00;
 80a51ec:	2300      	movs	r3, #0
 80a51ee:	72fb      	strb	r3, [r7, #11]
  for (int i = 0; i < 6; i++) {
 80a51f0:	2300      	movs	r3, #0
 80a51f2:	60fb      	str	r3, [r7, #12]
 80a51f4:	e00d      	b.n	80a5212 <aw9110_led_off+0x76>
    led_platform_write(ctx->handle, REG_DIM00 + i, &tmp, 1);    // dimming
 80a51f6:	687b      	ldr	r3, [r7, #4]
 80a51f8:	6898      	ldr	r0, [r3, #8]
 80a51fa:	68fb      	ldr	r3, [r7, #12]
 80a51fc:	b2db      	uxtb	r3, r3
 80a51fe:	3320      	adds	r3, #32
 80a5200:	b2d9      	uxtb	r1, r3
 80a5202:	f107 020b 	add.w	r2, r7, #11
 80a5206:	2301      	movs	r3, #1
 80a5208:	f7ff feb2 	bl	80a4f70 <led_platform_write>
  for (int i = 0; i < 6; i++) {
 80a520c:	68fb      	ldr	r3, [r7, #12]
 80a520e:	3301      	adds	r3, #1
 80a5210:	60fb      	str	r3, [r7, #12]
 80a5212:	68fb      	ldr	r3, [r7, #12]
 80a5214:	2b05      	cmp	r3, #5
 80a5216:	ddee      	ble.n	80a51f6 <aw9110_led_off+0x5a>
  }
}
 80a5218:	bf00      	nop
 80a521a:	4618      	mov	r0, r3
 80a521c:	3710      	adds	r7, #16
 80a521e:	46bd      	mov	sp, r7
 80a5220:	bd80      	pop	{r7, pc}

080a5222 <aw9110_led_on>:

static int aw9110_led_on(stmdev_ctx_t * ctx, uint8_t * brightness,
                         uint8_t enablebits)
{
 80a5222:	b580      	push	{r7, lr}
 80a5224:	b086      	sub	sp, #24
 80a5226:	af00      	add	r7, sp, #0
 80a5228:	60f8      	str	r0, [r7, #12]
 80a522a:	60b9      	str	r1, [r7, #8]
 80a522c:	4613      	mov	r3, r2
 80a522e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0x00;
 80a5230:	2300      	movs	r3, #0
 80a5232:	74fb      	strb	r3, [r7, #19]
  led_platform_write(ctx->handle, REG_WORK_MODE_P0, &tmp, 1);   // led mode
 80a5234:	68fb      	ldr	r3, [r7, #12]
 80a5236:	6898      	ldr	r0, [r3, #8]
 80a5238:	f107 0213 	add.w	r2, r7, #19
 80a523c:	2301      	movs	r3, #1
 80a523e:	2112      	movs	r1, #18
 80a5240:	f7ff fe96 	bl	80a4f70 <led_platform_write>
  led_platform_write(ctx->handle, REG_WORK_MODE_P1, &tmp, 1);   // led mode
 80a5244:	68fb      	ldr	r3, [r7, #12]
 80a5246:	6898      	ldr	r0, [r3, #8]
 80a5248:	f107 0213 	add.w	r2, r7, #19
 80a524c:	2301      	movs	r3, #1
 80a524e:	2113      	movs	r1, #19
 80a5250:	f7ff fe8e 	bl	80a4f70 <led_platform_write>
  led_platform_write(ctx->handle, REG_EN_BREATH, &tmp, 1);    // enable breath
 80a5254:	68fb      	ldr	r3, [r7, #12]
 80a5256:	6898      	ldr	r0, [r3, #8]
 80a5258:	f107 0213 	add.w	r2, r7, #19
 80a525c:	2301      	movs	r3, #1
 80a525e:	2114      	movs	r1, #20
 80a5260:	f7ff fe86 	bl	80a4f70 <led_platform_write>
  tmp = 0x03;
 80a5264:	2303      	movs	r3, #3
 80a5266:	74fb      	strb	r3, [r7, #19]
  led_platform_write(ctx->handle, REG_CTRL, &tmp, 1);   // imax
 80a5268:	68fb      	ldr	r3, [r7, #12]
 80a526a:	6898      	ldr	r0, [r3, #8]
 80a526c:	f107 0213 	add.w	r2, r7, #19
 80a5270:	2301      	movs	r3, #1
 80a5272:	2111      	movs	r1, #17
 80a5274:	f7ff fe7c 	bl	80a4f70 <led_platform_write>
  for (int i = 0; i < 6; i++) {
 80a5278:	2300      	movs	r3, #0
 80a527a:	617b      	str	r3, [r7, #20]
 80a527c:	e016      	b.n	80a52ac <aw9110_led_on+0x8a>
    if ((enablebits >> i) & 0x01) {
 80a527e:	79fa      	ldrb	r2, [r7, #7]
 80a5280:	697b      	ldr	r3, [r7, #20]
 80a5282:	fa42 f303 	asr.w	r3, r2, r3
 80a5286:	f003 0301 	and.w	r3, r3, #1
 80a528a:	2b00      	cmp	r3, #0
 80a528c:	d00b      	beq.n	80a52a6 <aw9110_led_on+0x84>
      led_platform_write(ctx->handle, REG_DIM00 + i, &brightness[i], 1);        // lighting on
 80a528e:	68fb      	ldr	r3, [r7, #12]
 80a5290:	6898      	ldr	r0, [r3, #8]
 80a5292:	697b      	ldr	r3, [r7, #20]
 80a5294:	b2db      	uxtb	r3, r3
 80a5296:	3320      	adds	r3, #32
 80a5298:	b2d9      	uxtb	r1, r3
 80a529a:	697b      	ldr	r3, [r7, #20]
 80a529c:	68ba      	ldr	r2, [r7, #8]
 80a529e:	441a      	add	r2, r3
 80a52a0:	2301      	movs	r3, #1
 80a52a2:	f7ff fe65 	bl	80a4f70 <led_platform_write>
  for (int i = 0; i < 6; i++) {
 80a52a6:	697b      	ldr	r3, [r7, #20]
 80a52a8:	3301      	adds	r3, #1
 80a52aa:	617b      	str	r3, [r7, #20]
 80a52ac:	697b      	ldr	r3, [r7, #20]
 80a52ae:	2b05      	cmp	r3, #5
 80a52b0:	dde5      	ble.n	80a527e <aw9110_led_on+0x5c>
    }
  }
}
 80a52b2:	bf00      	nop
 80a52b4:	4618      	mov	r0, r3
 80a52b6:	3718      	adds	r7, #24
 80a52b8:	46bd      	mov	sp, r7
 80a52ba:	bd80      	pop	{r7, pc}

080a52bc <led_hw_reset>:
 * NAME       : led_hw_reset
 * FUNCTION   : reset led
 * REMARKS    :
 *****************************************************************************/
static int led_hw_reset(stmdev_ctx_t * ctx)
{
 80a52bc:	b580      	push	{r7, lr}
 80a52be:	b082      	sub	sp, #8
 80a52c0:	af00      	add	r7, sp, #0
 80a52c2:	6078      	str	r0, [r7, #4]
  if (ctx != NULL) {
 80a52c4:	687b      	ldr	r3, [r7, #4]
 80a52c6:	2b00      	cmp	r3, #0
 80a52c8:	d012      	beq.n	80a52f0 <led_hw_reset+0x34>
    HAL_GPIO_WritePin(HEAD_AND_REAR_LED_DRIVER_EN_GPIO_Port,
 80a52ca:	2200      	movs	r2, #0
 80a52cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80a52d0:	480c      	ldr	r0, [pc, #48]	; (80a5304 <led_hw_reset+0x48>)
 80a52d2:	f00c f9d9 	bl	80b1688 <HAL_GPIO_WritePin>
                      HEAD_AND_REAR_LED_DRIVER_EN_Pin, GPIO_PIN_RESET);
    osDelay(1);
 80a52d6:	2001      	movs	r0, #1
 80a52d8:	f010 ff0f 	bl	80b60fa <osDelay>
    HAL_GPIO_WritePin(HEAD_AND_REAR_LED_DRIVER_EN_GPIO_Port,
 80a52dc:	2201      	movs	r2, #1
 80a52de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80a52e2:	4808      	ldr	r0, [pc, #32]	; (80a5304 <led_hw_reset+0x48>)
 80a52e4:	f00c f9d0 	bl	80b1688 <HAL_GPIO_WritePin>
                      HEAD_AND_REAR_LED_DRIVER_EN_Pin, GPIO_PIN_SET);
    osDelay(1);
 80a52e8:	2001      	movs	r0, #1
 80a52ea:	f010 ff06 	bl	80b60fa <osDelay>
 80a52ee:	e003      	b.n	80a52f8 <led_hw_reset+0x3c>
  } else {
    printf("%s: failed\n", __func__);
 80a52f0:	4905      	ldr	r1, [pc, #20]	; (80a5308 <led_hw_reset+0x4c>)
 80a52f2:	4806      	ldr	r0, [pc, #24]	; (80a530c <led_hw_reset+0x50>)
 80a52f4:	f01b fb3e 	bl	80c0974 <iprintf>
  }
  return 0;
 80a52f8:	2300      	movs	r3, #0
}
 80a52fa:	4618      	mov	r0, r3
 80a52fc:	3708      	adds	r7, #8
 80a52fe:	46bd      	mov	sp, r7
 80a5300:	bd80      	pop	{r7, pc}
 80a5302:	bf00      	nop
 80a5304:	40020400 	.word	0x40020400
 80a5308:	080c7870 	.word	0x080c7870
 80a530c:	080c566c 	.word	0x080c566c

080a5310 <led_init>:

/*
 * @brief  platform specific initialization (platform dependent)
 */
int led_init(void *para, void *para2)
{
 80a5310:	b580      	push	{r7, lr}
 80a5312:	b084      	sub	sp, #16
 80a5314:	af00      	add	r7, sp, #0
 80a5316:	6078      	str	r0, [r7, #4]
 80a5318:	6039      	str	r1, [r7, #0]
  led_init_parms = (platform_prams *) para;
 80a531a:	4a18      	ldr	r2, [pc, #96]	; (80a537c <led_init+0x6c>)
 80a531c:	687b      	ldr	r3, [r7, #4]
 80a531e:	6013      	str	r3, [r2, #0]
  /* Initialize mems driver interface */
  led_dev_ctx.write_reg = led_platform_write;
 80a5320:	4b17      	ldr	r3, [pc, #92]	; (80a5380 <led_init+0x70>)
 80a5322:	4a18      	ldr	r2, [pc, #96]	; (80a5384 <led_init+0x74>)
 80a5324:	601a      	str	r2, [r3, #0]
  led_dev_ctx.read_reg = led_platform_read;
 80a5326:	4b16      	ldr	r3, [pc, #88]	; (80a5380 <led_init+0x70>)
 80a5328:	4a17      	ldr	r2, [pc, #92]	; (80a5388 <led_init+0x78>)
 80a532a:	605a      	str	r2, [r3, #4]
  led_dev_ctx.handle = &led_init_parms->i2c_handle;
 80a532c:	4b13      	ldr	r3, [pc, #76]	; (80a537c <led_init+0x6c>)
 80a532e:	681b      	ldr	r3, [r3, #0]
 80a5330:	3304      	adds	r3, #4
 80a5332:	4a13      	ldr	r2, [pc, #76]	; (80a5380 <led_init+0x70>)
 80a5334:	6093      	str	r3, [r2, #8]

  /* hardware reset */
  led_hw_reset(&led_dev_ctx);
 80a5336:	4812      	ldr	r0, [pc, #72]	; (80a5380 <led_init+0x70>)
 80a5338:	f7ff ffc0 	bl	80a52bc <led_hw_reset>
  /* aw9110 chip id */
  uint8_t reg_val;
  led_platform_read(led_dev_ctx.handle, REG_ID, &reg_val, 1);
 80a533c:	4b10      	ldr	r3, [pc, #64]	; (80a5380 <led_init+0x70>)
 80a533e:	6898      	ldr	r0, [r3, #8]
 80a5340:	f107 020f 	add.w	r2, r7, #15
 80a5344:	2301      	movs	r3, #1
 80a5346:	2110      	movs	r1, #16
 80a5348:	f7ff fe4c 	bl	80a4fe4 <led_platform_read>
  printf("led_init reg_id 0x%x\r\n", reg_val);
 80a534c:	7bfb      	ldrb	r3, [r7, #15]
 80a534e:	4619      	mov	r1, r3
 80a5350:	480e      	ldr	r0, [pc, #56]	; (80a538c <led_init+0x7c>)
 80a5352:	f01b fb0f 	bl	80c0974 <iprintf>
  osDelay(1);
 80a5356:	2001      	movs	r0, #1
 80a5358:	f010 fecf 	bl	80b60fa <osDelay>
  if (reg_val != AW9110_ID)
 80a535c:	7bfb      	ldrb	r3, [r7, #15]
 80a535e:	2b23      	cmp	r3, #35	; 0x23
 80a5360:	d002      	beq.n	80a5368 <led_init+0x58>
    return SENSOR_FAILED;
 80a5362:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a5366:	e005      	b.n	80a5374 <led_init+0x64>
  aw9110_led_on(&led_dev_ctx, brightnessarray, 0x09);
 80a5368:	2209      	movs	r2, #9
 80a536a:	4909      	ldr	r1, [pc, #36]	; (80a5390 <led_init+0x80>)
 80a536c:	4804      	ldr	r0, [pc, #16]	; (80a5380 <led_init+0x70>)
 80a536e:	f7ff ff58 	bl	80a5222 <aw9110_led_on>

  return SENSOR_SUCCESS;
 80a5372:	2300      	movs	r3, #0
}
 80a5374:	4618      	mov	r0, r3
 80a5376:	3710      	adds	r7, #16
 80a5378:	46bd      	mov	sp, r7
 80a537a:	bd80      	pop	{r7, pc}
 80a537c:	20007fe8 	.word	0x20007fe8
 80a5380:	20007fdc 	.word	0x20007fdc
 80a5384:	080a4f71 	.word	0x080a4f71
 80a5388:	080a4fe5 	.word	0x080a4fe5
 80a538c:	080c5678 	.word	0x080c5678
 80a5390:	20007880 	.word	0x20007880

080a5394 <led_enable>:

static int32_t led_enable()
{
 80a5394:	b480      	push	{r7}
 80a5396:	b083      	sub	sp, #12
 80a5398:	af00      	add	r7, sp, #0
  int32_t ret = 0;
 80a539a:	2300      	movs	r3, #0
 80a539c:	607b      	str	r3, [r7, #4]

  if (sensor_activate_count == 0) {
 80a539e:	4b0a      	ldr	r3, [pc, #40]	; (80a53c8 <led_enable+0x34>)
 80a53a0:	781b      	ldrb	r3, [r3, #0]
 80a53a2:	2b00      	cmp	r3, #0
 80a53a4:	d102      	bne.n	80a53ac <led_enable+0x18>
    led_activated = true;
 80a53a6:	4b09      	ldr	r3, [pc, #36]	; (80a53cc <led_enable+0x38>)
 80a53a8:	2201      	movs	r2, #1
 80a53aa:	701a      	strb	r2, [r3, #0]
  }
  sensor_activate_count++;
 80a53ac:	4b06      	ldr	r3, [pc, #24]	; (80a53c8 <led_enable+0x34>)
 80a53ae:	781b      	ldrb	r3, [r3, #0]
 80a53b0:	3301      	adds	r3, #1
 80a53b2:	b2da      	uxtb	r2, r3
 80a53b4:	4b04      	ldr	r3, [pc, #16]	; (80a53c8 <led_enable+0x34>)
 80a53b6:	701a      	strb	r2, [r3, #0]
  return ret;
 80a53b8:	687b      	ldr	r3, [r7, #4]
}
 80a53ba:	4618      	mov	r0, r3
 80a53bc:	370c      	adds	r7, #12
 80a53be:	46bd      	mov	sp, r7
 80a53c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a53c4:	4770      	bx	lr
 80a53c6:	bf00      	nop
 80a53c8:	20007fec 	.word	0x20007fec
 80a53cc:	20007fed 	.word	0x20007fed

080a53d0 <led_disable>:

static int32_t led_disable()
{
 80a53d0:	b480      	push	{r7}
 80a53d2:	b083      	sub	sp, #12
 80a53d4:	af00      	add	r7, sp, #0
  int32_t ret = 0;
 80a53d6:	2300      	movs	r3, #0
 80a53d8:	607b      	str	r3, [r7, #4]
  sensor_activate_count--;
 80a53da:	4b0a      	ldr	r3, [pc, #40]	; (80a5404 <led_disable+0x34>)
 80a53dc:	781b      	ldrb	r3, [r3, #0]
 80a53de:	3b01      	subs	r3, #1
 80a53e0:	b2da      	uxtb	r2, r3
 80a53e2:	4b08      	ldr	r3, [pc, #32]	; (80a5404 <led_disable+0x34>)
 80a53e4:	701a      	strb	r2, [r3, #0]
  if (sensor_activate_count == 0) {
 80a53e6:	4b07      	ldr	r3, [pc, #28]	; (80a5404 <led_disable+0x34>)
 80a53e8:	781b      	ldrb	r3, [r3, #0]
 80a53ea:	2b00      	cmp	r3, #0
 80a53ec:	d102      	bne.n	80a53f4 <led_disable+0x24>
    led_activated = false;
 80a53ee:	4b06      	ldr	r3, [pc, #24]	; (80a5408 <led_disable+0x38>)
 80a53f0:	2200      	movs	r2, #0
 80a53f2:	701a      	strb	r2, [r3, #0]
  }
  return ret;
 80a53f4:	687b      	ldr	r3, [r7, #4]
}
 80a53f6:	4618      	mov	r0, r3
 80a53f8:	370c      	adds	r7, #12
 80a53fa:	46bd      	mov	sp, r7
 80a53fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a5400:	4770      	bx	lr
 80a5402:	bf00      	nop
 80a5404:	20007fec 	.word	0x20007fec
 80a5408:	20007fed 	.word	0x20007fed

080a540c <led_activate>:

int led_activate(bool activate)
{
 80a540c:	b580      	push	{r7, lr}
 80a540e:	b084      	sub	sp, #16
 80a5410:	af00      	add	r7, sp, #0
 80a5412:	4603      	mov	r3, r0
 80a5414:	71fb      	strb	r3, [r7, #7]
  int res = 0;
 80a5416:	2300      	movs	r3, #0
 80a5418:	60fb      	str	r3, [r7, #12]
  printf("led_activate: %d \r\n", activate);
 80a541a:	79fb      	ldrb	r3, [r7, #7]
 80a541c:	4619      	mov	r1, r3
 80a541e:	4809      	ldr	r0, [pc, #36]	; (80a5444 <led_activate+0x38>)
 80a5420:	f01b faa8 	bl	80c0974 <iprintf>
  if (activate) {
 80a5424:	79fb      	ldrb	r3, [r7, #7]
 80a5426:	2b00      	cmp	r3, #0
 80a5428:	d003      	beq.n	80a5432 <led_activate+0x26>
    res = led_enable();
 80a542a:	f7ff ffb3 	bl	80a5394 <led_enable>
 80a542e:	60f8      	str	r0, [r7, #12]
 80a5430:	e002      	b.n	80a5438 <led_activate+0x2c>
  } else {
    res = led_disable();
 80a5432:	f7ff ffcd 	bl	80a53d0 <led_disable>
 80a5436:	60f8      	str	r0, [r7, #12]
  }
  return res;
 80a5438:	68fb      	ldr	r3, [r7, #12]
}
 80a543a:	4618      	mov	r0, r3
 80a543c:	3710      	adds	r7, #16
 80a543e:	46bd      	mov	sp, r7
 80a5440:	bd80      	pop	{r7, pc}
 80a5442:	bf00      	nop
 80a5444:	080c5690 	.word	0x080c5690

080a5448 <led_init_complete>:

int led_init_complete(void *para)
{
 80a5448:	b480      	push	{r7}
 80a544a:	b083      	sub	sp, #12
 80a544c:	af00      	add	r7, sp, #0
 80a544e:	6078      	str	r0, [r7, #4]
  //send init complete event to smgr?
  return SENSOR_SUCCESS;
 80a5450:	2300      	movs	r3, #0
}
 80a5452:	4618      	mov	r0, r3
 80a5454:	370c      	adds	r7, #12
 80a5456:	46bd      	mov	sp, r7
 80a5458:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a545c:	4770      	bx	lr
	...

080a5460 <led_config>:

//out5-->out0
int led_config(uint8_t config, void *para)
{
 80a5460:	b580      	push	{r7, lr}
 80a5462:	b084      	sub	sp, #16
 80a5464:	af00      	add	r7, sp, #0
 80a5466:	4603      	mov	r3, r0
 80a5468:	6039      	str	r1, [r7, #0]
 80a546a:	71fb      	strb	r3, [r7, #7]
  //send init complete event to smgr?

  uint8_t *config_data = NULL;
 80a546c:	2300      	movs	r3, #0
 80a546e:	60fb      	str	r3, [r7, #12]
  config_data = (uint8_t *) para;
 80a5470:	683b      	ldr	r3, [r7, #0]
 80a5472:	60fb      	str	r3, [r7, #12]

  aw9110_led_off(&led_dev_ctx);
 80a5474:	4838      	ldr	r0, [pc, #224]	; (80a5558 <led_config+0xf8>)
 80a5476:	f7ff fe91 	bl	80a519c <aw9110_led_off>
  uint8_t config_type = config_data[0] & 0x0F;
 80a547a:	68fb      	ldr	r3, [r7, #12]
 80a547c:	781b      	ldrb	r3, [r3, #0]
 80a547e:	f003 030f 	and.w	r3, r3, #15
 80a5482:	72fb      	strb	r3, [r7, #11]
  if (((config_data[0] >> 4) & 0x0F) == 0) {
 80a5484:	68fb      	ldr	r3, [r7, #12]
 80a5486:	781b      	ldrb	r3, [r3, #0]
 80a5488:	091b      	lsrs	r3, r3, #4
 80a548a:	b2db      	uxtb	r3, r3
 80a548c:	f003 030f 	and.w	r3, r3, #15
 80a5490:	2b00      	cmp	r3, #0
 80a5492:	d145      	bne.n	80a5520 <led_config+0xc0>
    switch (config_type) {
 80a5494:	7afb      	ldrb	r3, [r7, #11]
 80a5496:	2b06      	cmp	r3, #6
 80a5498:	d83c      	bhi.n	80a5514 <led_config+0xb4>
 80a549a:	a201      	add	r2, pc, #4	; (adr r2, 80a54a0 <led_config+0x40>)
 80a549c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80a54a0:	080a54bd 	.word	0x080a54bd
 80a54a4:	080a54c5 	.word	0x080a54c5
 80a54a8:	080a54d1 	.word	0x080a54d1
 80a54ac:	080a54df 	.word	0x080a54df
 80a54b0:	080a54ed 	.word	0x080a54ed
 80a54b4:	080a54f9 	.word	0x080a54f9
 80a54b8:	080a5507 	.word	0x080a5507
    case 0:
      aw9110_led_off(&led_dev_ctx);
 80a54bc:	4826      	ldr	r0, [pc, #152]	; (80a5558 <led_config+0xf8>)
 80a54be:	f7ff fe6d 	bl	80a519c <aw9110_led_off>
      break;
 80a54c2:	e043      	b.n	80a554c <led_config+0xec>
    case 1:
      aw9110_led_on(&led_dev_ctx, brightnessarray, 0x09);       // red lighting
 80a54c4:	2209      	movs	r2, #9
 80a54c6:	4925      	ldr	r1, [pc, #148]	; (80a555c <led_config+0xfc>)
 80a54c8:	4823      	ldr	r0, [pc, #140]	; (80a5558 <led_config+0xf8>)
 80a54ca:	f7ff feaa 	bl	80a5222 <aw9110_led_on>
      break;
 80a54ce:	e03d      	b.n	80a554c <led_config+0xec>
    case 2:
      aw9110_led_blink(&led_dev_ctx, &aw9110_breath, brightnessarray, 0x09);    // red breathing
 80a54d0:	2309      	movs	r3, #9
 80a54d2:	4a22      	ldr	r2, [pc, #136]	; (80a555c <led_config+0xfc>)
 80a54d4:	4922      	ldr	r1, [pc, #136]	; (80a5560 <led_config+0x100>)
 80a54d6:	4820      	ldr	r0, [pc, #128]	; (80a5558 <led_config+0xf8>)
 80a54d8:	f7ff fdbe 	bl	80a5058 <aw9110_led_blink>
      break;
 80a54dc:	e036      	b.n	80a554c <led_config+0xec>
    case 3:
      aw9110_led_blink(&led_dev_ctx, &aw9110_blink, brightnessarray, 0x09);     // red blinking
 80a54de:	2309      	movs	r3, #9
 80a54e0:	4a1e      	ldr	r2, [pc, #120]	; (80a555c <led_config+0xfc>)
 80a54e2:	4920      	ldr	r1, [pc, #128]	; (80a5564 <led_config+0x104>)
 80a54e4:	481c      	ldr	r0, [pc, #112]	; (80a5558 <led_config+0xf8>)
 80a54e6:	f7ff fdb7 	bl	80a5058 <aw9110_led_blink>
      break;
 80a54ea:	e02f      	b.n	80a554c <led_config+0xec>
    case 4:
      aw9110_led_on(&led_dev_ctx, brightnessarray, (0x09 << 1));       // green lighting
 80a54ec:	2212      	movs	r2, #18
 80a54ee:	491b      	ldr	r1, [pc, #108]	; (80a555c <led_config+0xfc>)
 80a54f0:	4819      	ldr	r0, [pc, #100]	; (80a5558 <led_config+0xf8>)
 80a54f2:	f7ff fe96 	bl	80a5222 <aw9110_led_on>
      break;
 80a54f6:	e029      	b.n	80a554c <led_config+0xec>
    case 5:
      aw9110_led_blink(&led_dev_ctx, &aw9110_breath, brightnessarray, (0x09 << 1));    // green breathing
 80a54f8:	2312      	movs	r3, #18
 80a54fa:	4a18      	ldr	r2, [pc, #96]	; (80a555c <led_config+0xfc>)
 80a54fc:	4918      	ldr	r1, [pc, #96]	; (80a5560 <led_config+0x100>)
 80a54fe:	4816      	ldr	r0, [pc, #88]	; (80a5558 <led_config+0xf8>)
 80a5500:	f7ff fdaa 	bl	80a5058 <aw9110_led_blink>
      break;
 80a5504:	e022      	b.n	80a554c <led_config+0xec>
    case 6:
      aw9110_led_blink(&led_dev_ctx, &aw9110_blink, brightnessarray, (0x09 << 1));     // green blinking
 80a5506:	2312      	movs	r3, #18
 80a5508:	4a14      	ldr	r2, [pc, #80]	; (80a555c <led_config+0xfc>)
 80a550a:	4916      	ldr	r1, [pc, #88]	; (80a5564 <led_config+0x104>)
 80a550c:	4812      	ldr	r0, [pc, #72]	; (80a5558 <led_config+0xf8>)
 80a550e:	f7ff fda3 	bl	80a5058 <aw9110_led_blink>
      break;
 80a5512:	e01b      	b.n	80a554c <led_config+0xec>
    default:
      aw9110_led_on(&led_dev_ctx, brightnessarray, 0x09);       // red lighting
 80a5514:	2209      	movs	r2, #9
 80a5516:	4911      	ldr	r1, [pc, #68]	; (80a555c <led_config+0xfc>)
 80a5518:	480f      	ldr	r0, [pc, #60]	; (80a5558 <led_config+0xf8>)
 80a551a:	f7ff fe82 	bl	80a5222 <aw9110_led_on>
      break;
 80a551e:	e015      	b.n	80a554c <led_config+0xec>
    }
  } else if (((config_data[0] >> 4) & 0x0F) == 2) {
 80a5520:	68fb      	ldr	r3, [r7, #12]
 80a5522:	781b      	ldrb	r3, [r3, #0]
 80a5524:	091b      	lsrs	r3, r3, #4
 80a5526:	b2db      	uxtb	r3, r3
 80a5528:	f003 030f 	and.w	r3, r3, #15
 80a552c:	2b02      	cmp	r3, #2
 80a552e:	d10d      	bne.n	80a554c <led_config+0xec>
	  if (config_type == 0) {
 80a5530:	7afb      	ldrb	r3, [r7, #11]
 80a5532:	2b00      	cmp	r3, #0
 80a5534:	d105      	bne.n	80a5542 <led_config+0xe2>
		  aw9110_led_on(&led_dev_ctx, brightnessarray, 0x3f);       // White lighting
 80a5536:	223f      	movs	r2, #63	; 0x3f
 80a5538:	4908      	ldr	r1, [pc, #32]	; (80a555c <led_config+0xfc>)
 80a553a:	4807      	ldr	r0, [pc, #28]	; (80a5558 <led_config+0xf8>)
 80a553c:	f7ff fe71 	bl	80a5222 <aw9110_led_on>
 80a5540:	e004      	b.n	80a554c <led_config+0xec>
	  } else {
		  aw9110_led_on(&led_dev_ctx, brightnessarray, 0x09);       // red lighting
 80a5542:	2209      	movs	r2, #9
 80a5544:	4905      	ldr	r1, [pc, #20]	; (80a555c <led_config+0xfc>)
 80a5546:	4804      	ldr	r0, [pc, #16]	; (80a5558 <led_config+0xf8>)
 80a5548:	f7ff fe6b 	bl	80a5222 <aw9110_led_on>
	  }
  }
  return SENSOR_SUCCESS;
 80a554c:	2300      	movs	r3, #0
}
 80a554e:	4618      	mov	r0, r3
 80a5550:	3710      	adds	r7, #16
 80a5552:	46bd      	mov	sp, r7
 80a5554:	bd80      	pop	{r7, pc}
 80a5556:	bf00      	nop
 80a5558:	20007fdc 	.word	0x20007fdc
 80a555c:	20007880 	.word	0x20007880
 80a5560:	20007858 	.word	0x20007858
 80a5564:	2000786c 	.word	0x2000786c

080a5568 <led_publish_config_resp>:

int led_publish_config_resp(void *para)
{
 80a5568:	b480      	push	{r7}
 80a556a:	b083      	sub	sp, #12
 80a556c:	af00      	add	r7, sp, #0
 80a556e:	6078      	str	r0, [r7, #4]
  //send init complete event to smgr?
  return SENSOR_SUCCESS;
 80a5570:	2300      	movs	r3, #0
}
 80a5572:	4618      	mov	r0, r3
 80a5574:	370c      	adds	r7, #12
 80a5576:	46bd      	mov	sp, r7
 80a5578:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a557c:	4770      	bx	lr
	...

080a5580 <cal_process_sample>:
/* Extern variables ----------------------------------------------------------*/

/* Private functions ---------------------------------------------------------*/
static enum cal_state_e cal_process_sample(sensor_info_type * cal_data,
                                           float *input)
{
 80a5580:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a5582:	b087      	sub	sp, #28
 80a5584:	af02      	add	r7, sp, #8
 80a5586:	6078      	str	r0, [r7, #4]
 80a5588:	6039      	str	r1, [r7, #0]
  uint8_t i;

  if (cal_data->cal_state != CAL_STATE_START) {
 80a558a:	687b      	ldr	r3, [r7, #4]
 80a558c:	7b1b      	ldrb	r3, [r3, #12]
 80a558e:	2b00      	cmp	r3, #0
 80a5590:	d001      	beq.n	80a5596 <cal_process_sample+0x16>
    return CAL_STATE_UNKNOWN;
 80a5592:	2301      	movs	r3, #1
 80a5594:	e17a      	b.n	80a588c <cal_process_sample+0x30c>
  }

  if (cal_data->cal_dynm_data.sample_count == 0) {
 80a5596:	687b      	ldr	r3, [r7, #4]
 80a5598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a559a:	2b00      	cmp	r3, #0
 80a559c:	d123      	bne.n	80a55e6 <cal_process_sample+0x66>
    for (i = 0; i < cal_data->cal_config.cols; i++) {
 80a559e:	2300      	movs	r3, #0
 80a55a0:	73fb      	strb	r3, [r7, #15]
 80a55a2:	e01b      	b.n	80a55dc <cal_process_sample+0x5c>
      cal_data->cal_dynm_data.sample_sum[i] = 0;
 80a55a4:	7bfb      	ldrb	r3, [r7, #15]
 80a55a6:	687a      	ldr	r2, [r7, #4]
 80a55a8:	3312      	adds	r3, #18
 80a55aa:	009b      	lsls	r3, r3, #2
 80a55ac:	4413      	add	r3, r2
 80a55ae:	f04f 0200 	mov.w	r2, #0
 80a55b2:	601a      	str	r2, [r3, #0]
      cal_data->cal_dynm_data.sample_sqsum[i] = 0;
 80a55b4:	7bfb      	ldrb	r3, [r7, #15]
 80a55b6:	687a      	ldr	r2, [r7, #4]
 80a55b8:	330e      	adds	r3, #14
 80a55ba:	009b      	lsls	r3, r3, #2
 80a55bc:	4413      	add	r3, r2
 80a55be:	3304      	adds	r3, #4
 80a55c0:	f04f 0200 	mov.w	r2, #0
 80a55c4:	601a      	str	r2, [r3, #0]
      cal_data->cal_dynm_data.variance[i] = 0;
 80a55c6:	7bfb      	ldrb	r3, [r7, #15]
 80a55c8:	687a      	ldr	r2, [r7, #4]
 80a55ca:	330c      	adds	r3, #12
 80a55cc:	009b      	lsls	r3, r3, #2
 80a55ce:	4413      	add	r3, r2
 80a55d0:	f04f 0200 	mov.w	r2, #0
 80a55d4:	601a      	str	r2, [r3, #0]
    for (i = 0; i < cal_data->cal_config.cols; i++) {
 80a55d6:	7bfb      	ldrb	r3, [r7, #15]
 80a55d8:	3301      	adds	r3, #1
 80a55da:	73fb      	strb	r3, [r7, #15]
 80a55dc:	7bfa      	ldrb	r2, [r7, #15]
 80a55de:	687b      	ldr	r3, [r7, #4]
 80a55e0:	691b      	ldr	r3, [r3, #16]
 80a55e2:	429a      	cmp	r2, r3
 80a55e4:	dbde      	blt.n	80a55a4 <cal_process_sample+0x24>
    }
  }

  cal_data->cal_dynm_data.sample_count++;
 80a55e6:	687b      	ldr	r3, [r7, #4]
 80a55e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a55ea:	1c5a      	adds	r2, r3, #1
 80a55ec:	687b      	ldr	r3, [r7, #4]
 80a55ee:	655a      	str	r2, [r3, #84]	; 0x54

  for (i = 0; i < cal_data->cal_config.cols; i++) {
 80a55f0:	2300      	movs	r3, #0
 80a55f2:	73fb      	strb	r3, [r7, #15]
 80a55f4:	e038      	b.n	80a5668 <cal_process_sample+0xe8>
    cal_data->cal_dynm_data.sample_sum[i] += input[i];
 80a55f6:	7bfb      	ldrb	r3, [r7, #15]
 80a55f8:	687a      	ldr	r2, [r7, #4]
 80a55fa:	3312      	adds	r3, #18
 80a55fc:	009b      	lsls	r3, r3, #2
 80a55fe:	4413      	add	r3, r2
 80a5600:	ed93 7a00 	vldr	s14, [r3]
 80a5604:	7bfb      	ldrb	r3, [r7, #15]
 80a5606:	009b      	lsls	r3, r3, #2
 80a5608:	683a      	ldr	r2, [r7, #0]
 80a560a:	4413      	add	r3, r2
 80a560c:	edd3 7a00 	vldr	s15, [r3]
 80a5610:	7bfb      	ldrb	r3, [r7, #15]
 80a5612:	ee77 7a27 	vadd.f32	s15, s14, s15
 80a5616:	687a      	ldr	r2, [r7, #4]
 80a5618:	3312      	adds	r3, #18
 80a561a:	009b      	lsls	r3, r3, #2
 80a561c:	4413      	add	r3, r2
 80a561e:	edc3 7a00 	vstr	s15, [r3]
    cal_data->cal_dynm_data.sample_sqsum[i] += (input[i] * input[i]);
 80a5622:	7bfb      	ldrb	r3, [r7, #15]
 80a5624:	687a      	ldr	r2, [r7, #4]
 80a5626:	330e      	adds	r3, #14
 80a5628:	009b      	lsls	r3, r3, #2
 80a562a:	4413      	add	r3, r2
 80a562c:	3304      	adds	r3, #4
 80a562e:	ed93 7a00 	vldr	s14, [r3]
 80a5632:	7bfb      	ldrb	r3, [r7, #15]
 80a5634:	009b      	lsls	r3, r3, #2
 80a5636:	683a      	ldr	r2, [r7, #0]
 80a5638:	4413      	add	r3, r2
 80a563a:	edd3 6a00 	vldr	s13, [r3]
 80a563e:	7bfb      	ldrb	r3, [r7, #15]
 80a5640:	009b      	lsls	r3, r3, #2
 80a5642:	683a      	ldr	r2, [r7, #0]
 80a5644:	4413      	add	r3, r2
 80a5646:	edd3 7a00 	vldr	s15, [r3]
 80a564a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80a564e:	7bfb      	ldrb	r3, [r7, #15]
 80a5650:	ee77 7a27 	vadd.f32	s15, s14, s15
 80a5654:	687a      	ldr	r2, [r7, #4]
 80a5656:	330e      	adds	r3, #14
 80a5658:	009b      	lsls	r3, r3, #2
 80a565a:	4413      	add	r3, r2
 80a565c:	3304      	adds	r3, #4
 80a565e:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < cal_data->cal_config.cols; i++) {
 80a5662:	7bfb      	ldrb	r3, [r7, #15]
 80a5664:	3301      	adds	r3, #1
 80a5666:	73fb      	strb	r3, [r7, #15]
 80a5668:	7bfa      	ldrb	r2, [r7, #15]
 80a566a:	687b      	ldr	r3, [r7, #4]
 80a566c:	691b      	ldr	r3, [r3, #16]
 80a566e:	429a      	cmp	r2, r3
 80a5670:	dbc1      	blt.n	80a55f6 <cal_process_sample+0x76>
  }

  if (cal_data->cal_dynm_data.sample_count == cal_data->cal_config.num_samples) {
 80a5672:	687b      	ldr	r3, [r7, #4]
 80a5674:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80a5676:	687b      	ldr	r3, [r7, #4]
 80a5678:	695b      	ldr	r3, [r3, #20]
 80a567a:	429a      	cmp	r2, r3
 80a567c:	f040 8105 	bne.w	80a588a <cal_process_sample+0x30a>
    float varT;

    for (i = 0; i < cal_data->cal_config.cols; i++) {
 80a5680:	2300      	movs	r3, #0
 80a5682:	73fb      	strb	r3, [r7, #15]
 80a5684:	e0d6      	b.n	80a5834 <cal_process_sample+0x2b4>
      varT = (cal_data->cal_dynm_data.sample_sum[i]
 80a5686:	7bfb      	ldrb	r3, [r7, #15]
 80a5688:	687a      	ldr	r2, [r7, #4]
 80a568a:	3312      	adds	r3, #18
 80a568c:	009b      	lsls	r3, r3, #2
 80a568e:	4413      	add	r3, r2
 80a5690:	ed93 7a00 	vldr	s14, [r3]
              * cal_data->cal_dynm_data.sample_sum[i]);
 80a5694:	7bfb      	ldrb	r3, [r7, #15]
 80a5696:	687a      	ldr	r2, [r7, #4]
 80a5698:	3312      	adds	r3, #18
 80a569a:	009b      	lsls	r3, r3, #2
 80a569c:	4413      	add	r3, r2
 80a569e:	edd3 7a00 	vldr	s15, [r3]
      varT = (cal_data->cal_dynm_data.sample_sum[i]
 80a56a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80a56a6:	edc7 7a02 	vstr	s15, [r7, #8]

      cal_data->cal_dynm_data.variance[i] =
          (cal_data->cal_dynm_data.sample_sqsum[i]
 80a56aa:	7bfb      	ldrb	r3, [r7, #15]
 80a56ac:	687a      	ldr	r2, [r7, #4]
 80a56ae:	330e      	adds	r3, #14
 80a56b0:	009b      	lsls	r3, r3, #2
 80a56b2:	4413      	add	r3, r2
 80a56b4:	3304      	adds	r3, #4
 80a56b6:	ed93 7a00 	vldr	s14, [r3]
           - (varT / cal_data->cal_config.num_samples))
 80a56ba:	687b      	ldr	r3, [r7, #4]
 80a56bc:	695b      	ldr	r3, [r3, #20]
 80a56be:	ee07 3a90 	vmov	s15, r3
 80a56c2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80a56c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80a56ca:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80a56ce:	ee77 6a67 	vsub.f32	s13, s14, s15
          / cal_data->cal_config.num_samples;
 80a56d2:	687b      	ldr	r3, [r7, #4]
 80a56d4:	695b      	ldr	r3, [r3, #20]
 80a56d6:	ee07 3a90 	vmov	s15, r3
 80a56da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      cal_data->cal_dynm_data.variance[i] =
 80a56de:	7bfb      	ldrb	r3, [r7, #15]
          / cal_data->cal_config.num_samples;
 80a56e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
      cal_data->cal_dynm_data.variance[i] =
 80a56e4:	687a      	ldr	r2, [r7, #4]
 80a56e6:	330c      	adds	r3, #12
 80a56e8:	009b      	lsls	r3, r3, #2
 80a56ea:	4413      	add	r3, r2
 80a56ec:	edc3 7a00 	vstr	s15, [r3]

      if (cal_data->cal_dynm_data.variance[i]
 80a56f0:	7bfb      	ldrb	r3, [r7, #15]
 80a56f2:	687a      	ldr	r2, [r7, #4]
 80a56f4:	330c      	adds	r3, #12
 80a56f6:	009b      	lsls	r3, r3, #2
 80a56f8:	4413      	add	r3, r2
 80a56fa:	ed93 7a00 	vldr	s14, [r3]
          > cal_data->cal_config.variance_threshold) {
 80a56fe:	687b      	ldr	r3, [r7, #4]
 80a5700:	edd3 7a06 	vldr	s15, [r3, #24]
      if (cal_data->cal_dynm_data.variance[i]
 80a5704:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80a5708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80a570c:	dd1f      	ble.n	80a574e <cal_process_sample+0x1ce>
        printf
 80a570e:	7bfe      	ldrb	r6, [r7, #15]
            ("Variance exceeded, restarting algorithm. index: %i; variance: %9.4f; variance threshold: %9.4f",
             i, cal_data->cal_dynm_data.variance[i],
 80a5710:	7bfb      	ldrb	r3, [r7, #15]
 80a5712:	687a      	ldr	r2, [r7, #4]
 80a5714:	330c      	adds	r3, #12
 80a5716:	009b      	lsls	r3, r3, #2
 80a5718:	4413      	add	r3, r2
 80a571a:	681b      	ldr	r3, [r3, #0]
        printf
 80a571c:	4618      	mov	r0, r3
 80a571e:	f7fa ff13 	bl	80a0548 <__aeabi_f2d>
 80a5722:	4604      	mov	r4, r0
 80a5724:	460d      	mov	r5, r1
             cal_data->cal_config.variance_threshold);
 80a5726:	687b      	ldr	r3, [r7, #4]
 80a5728:	699b      	ldr	r3, [r3, #24]
        printf
 80a572a:	4618      	mov	r0, r3
 80a572c:	f7fa ff0c 	bl	80a0548 <__aeabi_f2d>
 80a5730:	4602      	mov	r2, r0
 80a5732:	460b      	mov	r3, r1
 80a5734:	e9cd 2300 	strd	r2, r3, [sp]
 80a5738:	4622      	mov	r2, r4
 80a573a:	462b      	mov	r3, r5
 80a573c:	4631      	mov	r1, r6
 80a573e:	4855      	ldr	r0, [pc, #340]	; (80a5894 <cal_process_sample+0x314>)
 80a5740:	f01b f918 	bl	80c0974 <iprintf>
        //indicate motion state detected, reset algorithm state
        cal_data->cal_dynm_data.sample_count = 0;
 80a5744:	687b      	ldr	r3, [r7, #4]
 80a5746:	2200      	movs	r2, #0
 80a5748:	655a      	str	r2, [r3, #84]	; 0x54
        return CAL_STATE_MOVING;
 80a574a:	2303      	movs	r3, #3
 80a574c:	e09e      	b.n	80a588c <cal_process_sample+0x30c>
      } else if ((0 == cal_data->cal_dynm_data.variance[i])
 80a574e:	7bfb      	ldrb	r3, [r7, #15]
 80a5750:	687a      	ldr	r2, [r7, #4]
 80a5752:	330c      	adds	r3, #12
 80a5754:	009b      	lsls	r3, r3, #2
 80a5756:	4413      	add	r3, r2
 80a5758:	edd3 7a00 	vldr	s15, [r3]
 80a575c:	eef5 7a40 	vcmp.f32	s15, #0.0
 80a5760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80a5764:	d118      	bne.n	80a5798 <cal_process_sample+0x218>
                 && cal_data->cal_config.check_zero_variance) {
 80a5766:	687b      	ldr	r3, [r7, #4]
 80a5768:	7f1b      	ldrb	r3, [r3, #28]
 80a576a:	2b00      	cmp	r3, #0
 80a576c:	d014      	beq.n	80a5798 <cal_process_sample+0x218>
        printf
 80a576e:	7bfc      	ldrb	r4, [r7, #15]
            ("Zero variance found, restarting algorithm. index: %i; variance: %9.4f",
             i, cal_data->cal_dynm_data.variance[i]);
 80a5770:	7bfb      	ldrb	r3, [r7, #15]
 80a5772:	687a      	ldr	r2, [r7, #4]
 80a5774:	330c      	adds	r3, #12
 80a5776:	009b      	lsls	r3, r3, #2
 80a5778:	4413      	add	r3, r2
 80a577a:	681b      	ldr	r3, [r3, #0]
        printf
 80a577c:	4618      	mov	r0, r3
 80a577e:	f7fa fee3 	bl	80a0548 <__aeabi_f2d>
 80a5782:	4602      	mov	r2, r0
 80a5784:	460b      	mov	r3, r1
 80a5786:	4621      	mov	r1, r4
 80a5788:	4843      	ldr	r0, [pc, #268]	; (80a5898 <cal_process_sample+0x318>)
 80a578a:	f01b f8f3 	bl	80c0974 <iprintf>

        cal_data->cal_dynm_data.sample_count = 0;
 80a578e:	687b      	ldr	r3, [r7, #4]
 80a5790:	2200      	movs	r2, #0
 80a5792:	655a      	str	r2, [r3, #84]	; 0x54
        return CAL_STATE_NO_VAR;
 80a5794:	2304      	movs	r3, #4
 80a5796:	e079      	b.n	80a588c <cal_process_sample+0x30c>
      } else if (fabsf(cal_data->cal_dynm_data.sample_sum[i]
 80a5798:	7bfb      	ldrb	r3, [r7, #15]
 80a579a:	687a      	ldr	r2, [r7, #4]
 80a579c:	3312      	adds	r3, #18
 80a579e:	009b      	lsls	r3, r3, #2
 80a57a0:	4413      	add	r3, r2
 80a57a2:	edd3 6a00 	vldr	s13, [r3]
                       / cal_data->cal_config.num_samples)
 80a57a6:	687b      	ldr	r3, [r7, #4]
 80a57a8:	695b      	ldr	r3, [r3, #20]
 80a57aa:	ee07 3a90 	vmov	s15, r3
 80a57ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80a57b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
      } else if (fabsf(cal_data->cal_dynm_data.sample_sum[i]
 80a57b6:	eeb0 7ae7 	vabs.f32	s14, s15
                 > cal_data->cal_config.bias_thresholds[i]) {
 80a57ba:	7bfb      	ldrb	r3, [r7, #15]
 80a57bc:	687a      	ldr	r2, [r7, #4]
 80a57be:	3308      	adds	r3, #8
 80a57c0:	009b      	lsls	r3, r3, #2
 80a57c2:	4413      	add	r3, r2
 80a57c4:	edd3 7a00 	vldr	s15, [r3]
      } else if (fabsf(cal_data->cal_dynm_data.sample_sum[i]
 80a57c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80a57cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80a57d0:	dd2d      	ble.n	80a582e <cal_process_sample+0x2ae>
        printf
 80a57d2:	7bfe      	ldrb	r6, [r7, #15]
            ("High BIAS found, restarting algorithm. index: %i; bias: %9.4f, threshold: %9.4f",
             i, cal_data->cal_dynm_data.sample_sum[i]
 80a57d4:	7bfb      	ldrb	r3, [r7, #15]
 80a57d6:	687a      	ldr	r2, [r7, #4]
 80a57d8:	3312      	adds	r3, #18
 80a57da:	009b      	lsls	r3, r3, #2
 80a57dc:	4413      	add	r3, r2
 80a57de:	ed93 7a00 	vldr	s14, [r3]
             / cal_data->cal_config.num_samples,
 80a57e2:	687b      	ldr	r3, [r7, #4]
 80a57e4:	695b      	ldr	r3, [r3, #20]
 80a57e6:	ee07 3a90 	vmov	s15, r3
 80a57ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80a57ee:	eec7 6a27 	vdiv.f32	s13, s14, s15
        printf
 80a57f2:	ee16 0a90 	vmov	r0, s13
 80a57f6:	f7fa fea7 	bl	80a0548 <__aeabi_f2d>
 80a57fa:	4604      	mov	r4, r0
 80a57fc:	460d      	mov	r5, r1
             cal_data->cal_config.bias_thresholds[i]);
 80a57fe:	7bfb      	ldrb	r3, [r7, #15]
 80a5800:	687a      	ldr	r2, [r7, #4]
 80a5802:	3308      	adds	r3, #8
 80a5804:	009b      	lsls	r3, r3, #2
 80a5806:	4413      	add	r3, r2
 80a5808:	681b      	ldr	r3, [r3, #0]
        printf
 80a580a:	4618      	mov	r0, r3
 80a580c:	f7fa fe9c 	bl	80a0548 <__aeabi_f2d>
 80a5810:	4602      	mov	r2, r0
 80a5812:	460b      	mov	r3, r1
 80a5814:	e9cd 2300 	strd	r2, r3, [sp]
 80a5818:	4622      	mov	r2, r4
 80a581a:	462b      	mov	r3, r5
 80a581c:	4631      	mov	r1, r6
 80a581e:	481f      	ldr	r0, [pc, #124]	; (80a589c <cal_process_sample+0x31c>)
 80a5820:	f01b f8a8 	bl	80c0974 <iprintf>

        cal_data->cal_dynm_data.sample_count = 0;
 80a5824:	687b      	ldr	r3, [r7, #4]
 80a5826:	2200      	movs	r2, #0
 80a5828:	655a      	str	r2, [r3, #84]	; 0x54
        return CAL_STATE_HI_BIAS;
 80a582a:	2305      	movs	r3, #5
 80a582c:	e02e      	b.n	80a588c <cal_process_sample+0x30c>
    for (i = 0; i < cal_data->cal_config.cols; i++) {
 80a582e:	7bfb      	ldrb	r3, [r7, #15]
 80a5830:	3301      	adds	r3, #1
 80a5832:	73fb      	strb	r3, [r7, #15]
 80a5834:	7bfa      	ldrb	r2, [r7, #15]
 80a5836:	687b      	ldr	r3, [r7, #4]
 80a5838:	691b      	ldr	r3, [r3, #16]
 80a583a:	429a      	cmp	r2, r3
 80a583c:	f6ff af23 	blt.w	80a5686 <cal_process_sample+0x106>
      }
    }

    for (i = 0; i < cal_data->cal_config.cols; i++) {
 80a5840:	2300      	movs	r3, #0
 80a5842:	73fb      	strb	r3, [r7, #15]
 80a5844:	e017      	b.n	80a5876 <cal_process_sample+0x2f6>
      cal_data->offset[i] = cal_data->cal_dynm_data.sample_sum[i]
 80a5846:	7bfb      	ldrb	r3, [r7, #15]
 80a5848:	687a      	ldr	r2, [r7, #4]
 80a584a:	3312      	adds	r3, #18
 80a584c:	009b      	lsls	r3, r3, #2
 80a584e:	4413      	add	r3, r2
 80a5850:	edd3 6a00 	vldr	s13, [r3]
          / cal_data->cal_config.num_samples;
 80a5854:	687b      	ldr	r3, [r7, #4]
 80a5856:	695b      	ldr	r3, [r3, #20]
 80a5858:	ee07 3a90 	vmov	s15, r3
 80a585c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      cal_data->offset[i] = cal_data->cal_dynm_data.sample_sum[i]
 80a5860:	7bfb      	ldrb	r3, [r7, #15]
          / cal_data->cal_config.num_samples;
 80a5862:	eec6 7a87 	vdiv.f32	s15, s13, s14
      cal_data->offset[i] = cal_data->cal_dynm_data.sample_sum[i]
 80a5866:	687a      	ldr	r2, [r7, #4]
 80a5868:	009b      	lsls	r3, r3, #2
 80a586a:	4413      	add	r3, r2
 80a586c:	edc3 7a00 	vstr	s15, [r3]
    for (i = 0; i < cal_data->cal_config.cols; i++) {
 80a5870:	7bfb      	ldrb	r3, [r7, #15]
 80a5872:	3301      	adds	r3, #1
 80a5874:	73fb      	strb	r3, [r7, #15]
 80a5876:	7bfa      	ldrb	r2, [r7, #15]
 80a5878:	687b      	ldr	r3, [r7, #4]
 80a587a:	691b      	ldr	r3, [r3, #16]
 80a587c:	429a      	cmp	r2, r3
 80a587e:	dbe2      	blt.n	80a5846 <cal_process_sample+0x2c6>
    }

    cal_data->cal_state = CAL_STATE_SUCCESS;
 80a5880:	687b      	ldr	r3, [r7, #4]
 80a5882:	2202      	movs	r2, #2
 80a5884:	731a      	strb	r2, [r3, #12]
    return CAL_STATE_SUCCESS;
 80a5886:	2302      	movs	r3, #2
 80a5888:	e000      	b.n	80a588c <cal_process_sample+0x30c>
  }

  return CAL_STATE_UNKNOWN;
 80a588a:	2301      	movs	r3, #1
}
 80a588c:	4618      	mov	r0, r3
 80a588e:	3714      	adds	r7, #20
 80a5890:	46bd      	mov	sp, r7
 80a5892:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a5894:	080c56a4 	.word	0x080c56a4
 80a5898:	080c5704 	.word	0x080c5704
 80a589c:	080c574c 	.word	0x080c574c

080a58a0 <lsm6dso_reinit_device>:
 */
static void platform_delay(uint32_t ms);

/* Main function --------------------------------------------------------------*/
static void lsm6dso_reinit_device(stmdev_ctx_t * ctx)
{
 80a58a0:	b580      	push	{r7, lr}
 80a58a2:	b084      	sub	sp, #16
 80a58a4:	af00      	add	r7, sp, #0
 80a58a6:	6078      	str	r0, [r7, #4]
  uint8_t rst;

  lsm6dso_reset_set(ctx, PROPERTY_ENABLE);
 80a58a8:	2101      	movs	r1, #1
 80a58aa:	6878      	ldr	r0, [r7, #4]
 80a58ac:	f002 f9bc 	bl	80a7c28 <lsm6dso_reset_set>

  do {
    lsm6dso_reset_get(ctx, &rst);
 80a58b0:	f107 030f 	add.w	r3, r7, #15
 80a58b4:	4619      	mov	r1, r3
 80a58b6:	6878      	ldr	r0, [r7, #4]
 80a58b8:	f002 f9dc 	bl	80a7c74 <lsm6dso_reset_get>
  } while (rst);
 80a58bc:	7bfb      	ldrb	r3, [r7, #15]
 80a58be:	2b00      	cmp	r3, #0
 80a58c0:	d1f6      	bne.n	80a58b0 <lsm6dso_reinit_device+0x10>

  lsm6dso_block_data_update_set(ctx, PROPERTY_DISABLE);
 80a58c2:	2100      	movs	r1, #0
 80a58c4:	6878      	ldr	r0, [r7, #4]
 80a58c6:	f002 f8c3 	bl	80a7a50 <lsm6dso_block_data_update_set>
  /* Disable I3C interface */
  lsm6dso_i3c_disable_set(ctx, LSM6DSO_I3C_DISABLE);
 80a58ca:	2180      	movs	r1, #128	; 0x80
 80a58cc:	6878      	ldr	r0, [r7, #4]
 80a58ce:	f002 fa94 	bl	80a7dfa <lsm6dso_i3c_disable_set>
  /* Set Output Data Rate */
  lsm6dso_xl_data_rate_set(ctx, LSM6DSO_XL_ODR_104Hz);
 80a58d2:	2104      	movs	r1, #4
 80a58d4:	6878      	ldr	r0, [r7, #4]
 80a58d6:	f001 fe9d 	bl	80a7614 <lsm6dso_xl_data_rate_set>
  lsm6dso_gy_data_rate_set(ctx, LSM6DSO_GY_ODR_104Hz);
 80a58da:	2104      	movs	r1, #4
 80a58dc:	6878      	ldr	r0, [r7, #4]
 80a58de:	f001 ffbb 	bl	80a7858 <lsm6dso_gy_data_rate_set>
  /* Set full scale */
  lsm6dso_xl_full_scale_set(ctx, LSM6DSO_8g);
 80a58e2:	2103      	movs	r1, #3
 80a58e4:	6878      	ldr	r0, [r7, #4]
 80a58e6:	f001 fe6f 	bl	80a75c8 <lsm6dso_xl_full_scale_set>
  lsm6dso_gy_full_scale_set(ctx, LSM6DSO_1000dps);
 80a58ea:	2104      	movs	r1, #4
 80a58ec:	6878      	ldr	r0, [r7, #4]
 80a58ee:	f001 ff8d 	bl	80a780c <lsm6dso_gy_full_scale_set>
  /* Configure filtering chain(No aux interface)
   * Accelerometer - LPF1 + LPF2 path
   */
  lsm6dso_xl_hp_path_on_out_set(ctx, LSM6DSO_LP_ODR_DIV_100);
 80a58f2:	2104      	movs	r1, #4
 80a58f4:	6878      	ldr	r0, [r7, #4]
 80a58f6:	f002 fa48 	bl	80a7d8a <lsm6dso_xl_hp_path_on_out_set>
  lsm6dso_xl_filter_lp2_set(ctx, PROPERTY_ENABLE);
 80a58fa:	2101      	movs	r1, #1
 80a58fc:	6878      	ldr	r0, [r7, #4]
 80a58fe:	f002 fa1e 	bl	80a7d3e <lsm6dso_xl_filter_lp2_set>
}
 80a5902:	bf00      	nop
 80a5904:	3710      	adds	r7, #16
 80a5906:	46bd      	mov	sp, r7
 80a5908:	bd80      	pop	{r7, pc}
	...

080a590c <lsm6dso_acc_self_test>:

int32_t lsm6dso_acc_self_test(stmdev_ctx_t * ctx)
{
 80a590c:	b580      	push	{r7, lr}
 80a590e:	b090      	sub	sp, #64	; 0x40
 80a5910:	af00      	add	r7, sp, #0
 80a5912:	6078      	str	r0, [r7, #4]
  uint8_t rst;
  uint8_t i;
  uint8_t j;

  /* Restore default configuration */
  lsm6dso_reset_set(ctx, PROPERTY_ENABLE);
 80a5914:	2101      	movs	r1, #1
 80a5916:	6878      	ldr	r0, [r7, #4]
 80a5918:	f002 f986 	bl	80a7c28 <lsm6dso_reset_set>

  do {
    lsm6dso_reset_get(ctx, &rst);
 80a591c:	f107 030e 	add.w	r3, r7, #14
 80a5920:	4619      	mov	r1, r3
 80a5922:	6878      	ldr	r0, [r7, #4]
 80a5924:	f002 f9a6 	bl	80a7c74 <lsm6dso_reset_get>
  } while (rst);
 80a5928:	7bbb      	ldrb	r3, [r7, #14]
 80a592a:	2b00      	cmp	r3, #0
 80a592c:	d1f6      	bne.n	80a591c <lsm6dso_acc_self_test+0x10>

  /* Disable I3C interface */
  lsm6dso_i3c_disable_set(ctx, LSM6DSO_I3C_DISABLE);
 80a592e:	2180      	movs	r1, #128	; 0x80
 80a5930:	6878      	ldr	r0, [r7, #4]
 80a5932:	f002 fa62 	bl	80a7dfa <lsm6dso_i3c_disable_set>
  /* Enable Block Data Update */
  lsm6dso_block_data_update_set(ctx, PROPERTY_ENABLE);
 80a5936:	2101      	movs	r1, #1
 80a5938:	6878      	ldr	r0, [r7, #4]
 80a593a:	f002 f889 	bl	80a7a50 <lsm6dso_block_data_update_set>

  /*
   * Accelerometer Self Test
   */
  /* Set Output Data Rate */
  lsm6dso_xl_data_rate_set(ctx, LSM6DSO_XL_ODR_52Hz);
 80a593e:	2103      	movs	r1, #3
 80a5940:	6878      	ldr	r0, [r7, #4]
 80a5942:	f001 fe67 	bl	80a7614 <lsm6dso_xl_data_rate_set>
  /* Set full scale */
  lsm6dso_xl_full_scale_set(ctx, LSM6DSO_4g);
 80a5946:	2102      	movs	r1, #2
 80a5948:	6878      	ldr	r0, [r7, #4]
 80a594a:	f001 fe3d 	bl	80a75c8 <lsm6dso_xl_full_scale_set>
  /* Wait stable output */
  platform_delay(100);
 80a594e:	2064      	movs	r0, #100	; 0x64
 80a5950:	f000 fddc 	bl	80a650c <platform_delay>

  /* Check if new value available */
  do {
    lsm6dso_xl_flag_data_ready_get(ctx, &drdy);
 80a5954:	f107 030f 	add.w	r3, r7, #15
 80a5958:	4619      	mov	r1, r3
 80a595a:	6878      	ldr	r0, [r7, #4]
 80a595c:	f002 f8af 	bl	80a7abe <lsm6dso_xl_flag_data_ready_get>
  } while (!drdy);
 80a5960:	7bfb      	ldrb	r3, [r7, #15]
 80a5962:	2b00      	cmp	r3, #0
 80a5964:	d0f6      	beq.n	80a5954 <lsm6dso_acc_self_test+0x48>

  /* Read dummy data and discard it */
  lsm6dso_acceleration_raw_get(ctx, data_raw.u8bit);
 80a5966:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80a596a:	4619      	mov	r1, r3
 80a596c:	6878      	ldr	r0, [r7, #4]
 80a596e:	f002 f913 	bl	80a7b98 <lsm6dso_acceleration_raw_get>
  /* Read 5 sample and get the average vale for each axis */
  memset(val_st_off, 0x00, 3 * sizeof(float));
 80a5972:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80a5976:	220c      	movs	r2, #12
 80a5978:	2100      	movs	r1, #0
 80a597a:	4618      	mov	r0, r3
 80a597c:	f01a fb1e 	bl	80bffbc <memset>

  for (i = 0; i < 5; i++) {
 80a5980:	2300      	movs	r3, #0
 80a5982:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80a5986:	e041      	b.n	80a5a0c <lsm6dso_acc_self_test+0x100>
    /* Check if new value available */
    do {
      lsm6dso_xl_flag_data_ready_get(ctx, &drdy);
 80a5988:	f107 030f 	add.w	r3, r7, #15
 80a598c:	4619      	mov	r1, r3
 80a598e:	6878      	ldr	r0, [r7, #4]
 80a5990:	f002 f895 	bl	80a7abe <lsm6dso_xl_flag_data_ready_get>
    } while (!drdy);
 80a5994:	7bfb      	ldrb	r3, [r7, #15]
 80a5996:	2b00      	cmp	r3, #0
 80a5998:	d0f6      	beq.n	80a5988 <lsm6dso_acc_self_test+0x7c>

    /* Read data and accumulate the mg value */
    lsm6dso_acceleration_raw_get(ctx, data_raw.u8bit);
 80a599a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80a599e:	4619      	mov	r1, r3
 80a59a0:	6878      	ldr	r0, [r7, #4]
 80a59a2:	f002 f8f9 	bl	80a7b98 <lsm6dso_acceleration_raw_get>

    for (j = 0; j < 3; j++) {
 80a59a6:	2300      	movs	r3, #0
 80a59a8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80a59ac:	e025      	b.n	80a59fa <lsm6dso_acc_self_test+0xee>
      val_st_off[j] += lsm6dso_from_fs4_to_mg(data_raw.i16bit[j]);
 80a59ae:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80a59b2:	005b      	lsls	r3, r3, #1
 80a59b4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80a59b8:	4413      	add	r3, r2
 80a59ba:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 80a59be:	4618      	mov	r0, r3
 80a59c0:	f001 fd86 	bl	80a74d0 <lsm6dso_from_fs4_to_mg>
 80a59c4:	eeb0 7a40 	vmov.f32	s14, s0
 80a59c8:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80a59cc:	009b      	lsls	r3, r3, #2
 80a59ce:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80a59d2:	4413      	add	r3, r2
 80a59d4:	3b18      	subs	r3, #24
 80a59d6:	edd3 7a00 	vldr	s15, [r3]
 80a59da:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80a59de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80a59e2:	009b      	lsls	r3, r3, #2
 80a59e4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80a59e8:	4413      	add	r3, r2
 80a59ea:	3b18      	subs	r3, #24
 80a59ec:	edc3 7a00 	vstr	s15, [r3]
    for (j = 0; j < 3; j++) {
 80a59f0:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80a59f4:	3301      	adds	r3, #1
 80a59f6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80a59fa:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80a59fe:	2b02      	cmp	r3, #2
 80a5a00:	d9d5      	bls.n	80a59ae <lsm6dso_acc_self_test+0xa2>
  for (i = 0; i < 5; i++) {
 80a5a02:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80a5a06:	3301      	adds	r3, #1
 80a5a08:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80a5a0c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80a5a10:	2b04      	cmp	r3, #4
 80a5a12:	d9b9      	bls.n	80a5988 <lsm6dso_acc_self_test+0x7c>
    }
  }

  /* Calculate the mg average values */
  for (i = 0; i < 3; i++) {
 80a5a14:	2300      	movs	r3, #0
 80a5a16:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80a5a1a:	e01a      	b.n	80a5a52 <lsm6dso_acc_self_test+0x146>
    val_st_off[i] /= 5.0f;
 80a5a1c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80a5a20:	009b      	lsls	r3, r3, #2
 80a5a22:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80a5a26:	4413      	add	r3, r2
 80a5a28:	3b18      	subs	r3, #24
 80a5a2a:	ed93 7a00 	vldr	s14, [r3]
 80a5a2e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80a5a32:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80a5a36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80a5a3a:	009b      	lsls	r3, r3, #2
 80a5a3c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80a5a40:	4413      	add	r3, r2
 80a5a42:	3b18      	subs	r3, #24
 80a5a44:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 3; i++) {
 80a5a48:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80a5a4c:	3301      	adds	r3, #1
 80a5a4e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80a5a52:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80a5a56:	2b02      	cmp	r3, #2
 80a5a58:	d9e0      	bls.n	80a5a1c <lsm6dso_acc_self_test+0x110>
  }

  /* Enable Self Test positive (or negative) */
  lsm6dso_xl_self_test_set(ctx, LSM6DSO_XL_ST_NEGATIVE);
 80a5a5a:	2102      	movs	r1, #2
 80a5a5c:	6878      	ldr	r0, [r7, #4]
 80a5a5e:	f002 f922 	bl	80a7ca6 <lsm6dso_xl_self_test_set>
  //lsm6dso_xl_self_test_set(ctx, LSM6DSO_XL_ST_POSITIVE);
  /* Wait stable output */
  platform_delay(100);
 80a5a62:	2064      	movs	r0, #100	; 0x64
 80a5a64:	f000 fd52 	bl	80a650c <platform_delay>

  /* Check if new value available */
  do {
    lsm6dso_xl_flag_data_ready_get(ctx, &drdy);
 80a5a68:	f107 030f 	add.w	r3, r7, #15
 80a5a6c:	4619      	mov	r1, r3
 80a5a6e:	6878      	ldr	r0, [r7, #4]
 80a5a70:	f002 f825 	bl	80a7abe <lsm6dso_xl_flag_data_ready_get>
  } while (!drdy);
 80a5a74:	7bfb      	ldrb	r3, [r7, #15]
 80a5a76:	2b00      	cmp	r3, #0
 80a5a78:	d0f6      	beq.n	80a5a68 <lsm6dso_acc_self_test+0x15c>

  /* Read dummy data and discard it */
  lsm6dso_acceleration_raw_get(ctx, data_raw.u8bit);
 80a5a7a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80a5a7e:	4619      	mov	r1, r3
 80a5a80:	6878      	ldr	r0, [r7, #4]
 80a5a82:	f002 f889 	bl	80a7b98 <lsm6dso_acceleration_raw_get>
  /* Read 5 sample and get the average vale for each axis */
  memset(val_st_on, 0x00, 3 * sizeof(float));
 80a5a86:	f107 031c 	add.w	r3, r7, #28
 80a5a8a:	220c      	movs	r2, #12
 80a5a8c:	2100      	movs	r1, #0
 80a5a8e:	4618      	mov	r0, r3
 80a5a90:	f01a fa94 	bl	80bffbc <memset>

  for (i = 0; i < 5; i++) {
 80a5a94:	2300      	movs	r3, #0
 80a5a96:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80a5a9a:	e041      	b.n	80a5b20 <lsm6dso_acc_self_test+0x214>
    /* Check if new value available */
    do {
      lsm6dso_xl_flag_data_ready_get(ctx, &drdy);
 80a5a9c:	f107 030f 	add.w	r3, r7, #15
 80a5aa0:	4619      	mov	r1, r3
 80a5aa2:	6878      	ldr	r0, [r7, #4]
 80a5aa4:	f002 f80b 	bl	80a7abe <lsm6dso_xl_flag_data_ready_get>
    } while (!drdy);
 80a5aa8:	7bfb      	ldrb	r3, [r7, #15]
 80a5aaa:	2b00      	cmp	r3, #0
 80a5aac:	d0f6      	beq.n	80a5a9c <lsm6dso_acc_self_test+0x190>

    /* Read data and accumulate the mg value */
    lsm6dso_acceleration_raw_get(ctx, data_raw.u8bit);
 80a5aae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80a5ab2:	4619      	mov	r1, r3
 80a5ab4:	6878      	ldr	r0, [r7, #4]
 80a5ab6:	f002 f86f 	bl	80a7b98 <lsm6dso_acceleration_raw_get>

    for (j = 0; j < 3; j++) {
 80a5aba:	2300      	movs	r3, #0
 80a5abc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80a5ac0:	e025      	b.n	80a5b0e <lsm6dso_acc_self_test+0x202>
      val_st_on[j] += lsm6dso_from_fs4_to_mg(data_raw.i16bit[j]);
 80a5ac2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80a5ac6:	005b      	lsls	r3, r3, #1
 80a5ac8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80a5acc:	4413      	add	r3, r2
 80a5ace:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 80a5ad2:	4618      	mov	r0, r3
 80a5ad4:	f001 fcfc 	bl	80a74d0 <lsm6dso_from_fs4_to_mg>
 80a5ad8:	eeb0 7a40 	vmov.f32	s14, s0
 80a5adc:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80a5ae0:	009b      	lsls	r3, r3, #2
 80a5ae2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80a5ae6:	4413      	add	r3, r2
 80a5ae8:	3b24      	subs	r3, #36	; 0x24
 80a5aea:	edd3 7a00 	vldr	s15, [r3]
 80a5aee:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80a5af2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80a5af6:	009b      	lsls	r3, r3, #2
 80a5af8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80a5afc:	4413      	add	r3, r2
 80a5afe:	3b24      	subs	r3, #36	; 0x24
 80a5b00:	edc3 7a00 	vstr	s15, [r3]
    for (j = 0; j < 3; j++) {
 80a5b04:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80a5b08:	3301      	adds	r3, #1
 80a5b0a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80a5b0e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80a5b12:	2b02      	cmp	r3, #2
 80a5b14:	d9d5      	bls.n	80a5ac2 <lsm6dso_acc_self_test+0x1b6>
  for (i = 0; i < 5; i++) {
 80a5b16:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80a5b1a:	3301      	adds	r3, #1
 80a5b1c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80a5b20:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80a5b24:	2b04      	cmp	r3, #4
 80a5b26:	d9b9      	bls.n	80a5a9c <lsm6dso_acc_self_test+0x190>
    }
  }

  /* Calculate the mg average values */
  for (i = 0; i < 3; i++) {
 80a5b28:	2300      	movs	r3, #0
 80a5b2a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80a5b2e:	e01a      	b.n	80a5b66 <lsm6dso_acc_self_test+0x25a>
    val_st_on[i] /= 5.0f;
 80a5b30:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80a5b34:	009b      	lsls	r3, r3, #2
 80a5b36:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80a5b3a:	4413      	add	r3, r2
 80a5b3c:	3b24      	subs	r3, #36	; 0x24
 80a5b3e:	ed93 7a00 	vldr	s14, [r3]
 80a5b42:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80a5b46:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80a5b4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80a5b4e:	009b      	lsls	r3, r3, #2
 80a5b50:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80a5b54:	4413      	add	r3, r2
 80a5b56:	3b24      	subs	r3, #36	; 0x24
 80a5b58:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 3; i++) {
 80a5b5c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80a5b60:	3301      	adds	r3, #1
 80a5b62:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80a5b66:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80a5b6a:	2b02      	cmp	r3, #2
 80a5b6c:	d9e0      	bls.n	80a5b30 <lsm6dso_acc_self_test+0x224>
  }

  /* Calculate the mg values for self test */
  for (i = 0; i < 3; i++) {
 80a5b6e:	2300      	movs	r3, #0
 80a5b70:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80a5b74:	e023      	b.n	80a5bbe <lsm6dso_acc_self_test+0x2b2>
    test_val[i] = fabs((val_st_on[i] - val_st_off[i]));
 80a5b76:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80a5b7a:	009b      	lsls	r3, r3, #2
 80a5b7c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80a5b80:	4413      	add	r3, r2
 80a5b82:	3b24      	subs	r3, #36	; 0x24
 80a5b84:	ed93 7a00 	vldr	s14, [r3]
 80a5b88:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80a5b8c:	009b      	lsls	r3, r3, #2
 80a5b8e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80a5b92:	4413      	add	r3, r2
 80a5b94:	3b18      	subs	r3, #24
 80a5b96:	edd3 7a00 	vldr	s15, [r3]
 80a5b9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 80a5b9e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80a5ba2:	eef0 7ae7 	vabs.f32	s15, s15
 80a5ba6:	009b      	lsls	r3, r3, #2
 80a5ba8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80a5bac:	4413      	add	r3, r2
 80a5bae:	3b30      	subs	r3, #48	; 0x30
 80a5bb0:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 3; i++) {
 80a5bb4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80a5bb8:	3301      	adds	r3, #1
 80a5bba:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80a5bbe:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80a5bc2:	2b02      	cmp	r3, #2
 80a5bc4:	d9d7      	bls.n	80a5b76 <lsm6dso_acc_self_test+0x26a>
  }

  /* Check self test limit */
  st_result = ST_PASS;
 80a5bc6:	2301      	movs	r3, #1
 80a5bc8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  for (i = 0; i < 3; i++) {
 80a5bcc:	2300      	movs	r3, #0
 80a5bce:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80a5bd2:	e027      	b.n	80a5c24 <lsm6dso_acc_self_test+0x318>
    if ((MIN_ST_LIMIT_mg > test_val[i])
 80a5bd4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80a5bd8:	009b      	lsls	r3, r3, #2
 80a5bda:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80a5bde:	4413      	add	r3, r2
 80a5be0:	3b30      	subs	r3, #48	; 0x30
 80a5be2:	edd3 7a00 	vldr	s15, [r3]
 80a5be6:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80a5c74 <lsm6dso_acc_self_test+0x368>
 80a5bea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80a5bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80a5bf2:	d40f      	bmi.n	80a5c14 <lsm6dso_acc_self_test+0x308>
        || (test_val[i] > MAX_ST_LIMIT_mg)) {
 80a5bf4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80a5bf8:	009b      	lsls	r3, r3, #2
 80a5bfa:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80a5bfe:	4413      	add	r3, r2
 80a5c00:	3b30      	subs	r3, #48	; 0x30
 80a5c02:	edd3 7a00 	vldr	s15, [r3]
 80a5c06:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80a5c78 <lsm6dso_acc_self_test+0x36c>
 80a5c0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 80a5c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80a5c12:	dd02      	ble.n	80a5c1a <lsm6dso_acc_self_test+0x30e>
      st_result = ST_FAIL;
 80a5c14:	2300      	movs	r3, #0
 80a5c16:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  for (i = 0; i < 3; i++) {
 80a5c1a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80a5c1e:	3301      	adds	r3, #1
 80a5c20:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80a5c24:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80a5c28:	2b02      	cmp	r3, #2
 80a5c2a:	d9d3      	bls.n	80a5bd4 <lsm6dso_acc_self_test+0x2c8>
    }
  }

  /* Disable Self Test */
  lsm6dso_xl_self_test_set(ctx, LSM6DSO_XL_ST_DISABLE);
 80a5c2c:	2100      	movs	r1, #0
 80a5c2e:	6878      	ldr	r0, [r7, #4]
 80a5c30:	f002 f839 	bl	80a7ca6 <lsm6dso_xl_self_test_set>
  /* Disable sensor. */
  lsm6dso_xl_data_rate_set(ctx, LSM6DSO_XL_ODR_OFF);
 80a5c34:	2100      	movs	r1, #0
 80a5c36:	6878      	ldr	r0, [r7, #4]
 80a5c38:	f001 fcec 	bl	80a7614 <lsm6dso_xl_data_rate_set>

  lsm6dso_reinit_device(ctx);
 80a5c3c:	6878      	ldr	r0, [r7, #4]
 80a5c3e:	f7ff fe2f 	bl	80a58a0 <lsm6dso_reinit_device>

  printf("lsm6dso_acc_self_test result: %d\r\n", st_result);
 80a5c42:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80a5c46:	4619      	mov	r1, r3
 80a5c48:	480c      	ldr	r0, [pc, #48]	; (80a5c7c <lsm6dso_acc_self_test+0x370>)
 80a5c4a:	f01a fe93 	bl	80c0974 <iprintf>
  if (st_result == ST_PASS) {
 80a5c4e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80a5c52:	2b01      	cmp	r3, #1
 80a5c54:	d104      	bne.n	80a5c60 <lsm6dso_acc_self_test+0x354>
    printf("lsm6dso_acc_self_test success\r\n");
 80a5c56:	480a      	ldr	r0, [pc, #40]	; (80a5c80 <lsm6dso_acc_self_test+0x374>)
 80a5c58:	f01a ff28 	bl	80c0aac <puts>
    return 0;
 80a5c5c:	2300      	movs	r3, #0
 80a5c5e:	e004      	b.n	80a5c6a <lsm6dso_acc_self_test+0x35e>
  } else {
    printf("lsm6dso_acc_self_test failed\r\n");
 80a5c60:	4808      	ldr	r0, [pc, #32]	; (80a5c84 <lsm6dso_acc_self_test+0x378>)
 80a5c62:	f01a ff23 	bl	80c0aac <puts>
    return -1;
 80a5c66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 80a5c6a:	4618      	mov	r0, r3
 80a5c6c:	3740      	adds	r7, #64	; 0x40
 80a5c6e:	46bd      	mov	sp, r7
 80a5c70:	bd80      	pop	{r7, pc}
 80a5c72:	bf00      	nop
 80a5c74:	42480000 	.word	0x42480000
 80a5c78:	44d48000 	.word	0x44d48000
 80a5c7c:	080c579c 	.word	0x080c579c
 80a5c80:	080c57c0 	.word	0x080c57c0
 80a5c84:	080c57e0 	.word	0x080c57e0

080a5c88 <lsm6dso_gyro_self_test>:

int32_t lsm6dso_gyro_self_test(stmdev_ctx_t * ctx)
{
 80a5c88:	b580      	push	{r7, lr}
 80a5c8a:	b090      	sub	sp, #64	; 0x40
 80a5c8c:	af00      	add	r7, sp, #0
 80a5c8e:	6078      	str	r0, [r7, #4]
  uint8_t rst;
  uint8_t i;
  uint8_t j;

  /* Restore default configuration */
  lsm6dso_reset_set(ctx, PROPERTY_ENABLE);
 80a5c90:	2101      	movs	r1, #1
 80a5c92:	6878      	ldr	r0, [r7, #4]
 80a5c94:	f001 ffc8 	bl	80a7c28 <lsm6dso_reset_set>

  do {
    lsm6dso_reset_get(ctx, &rst);
 80a5c98:	f107 030e 	add.w	r3, r7, #14
 80a5c9c:	4619      	mov	r1, r3
 80a5c9e:	6878      	ldr	r0, [r7, #4]
 80a5ca0:	f001 ffe8 	bl	80a7c74 <lsm6dso_reset_get>
  } while (rst);
 80a5ca4:	7bbb      	ldrb	r3, [r7, #14]
 80a5ca6:	2b00      	cmp	r3, #0
 80a5ca8:	d1f6      	bne.n	80a5c98 <lsm6dso_gyro_self_test+0x10>

  /* Disable I3C interface */
  lsm6dso_i3c_disable_set(ctx, LSM6DSO_I3C_DISABLE);
 80a5caa:	2180      	movs	r1, #128	; 0x80
 80a5cac:	6878      	ldr	r0, [r7, #4]
 80a5cae:	f002 f8a4 	bl	80a7dfa <lsm6dso_i3c_disable_set>
  /* Enable Block Data Update */
  lsm6dso_block_data_update_set(ctx, PROPERTY_ENABLE);
 80a5cb2:	2101      	movs	r1, #1
 80a5cb4:	6878      	ldr	r0, [r7, #4]
 80a5cb6:	f001 fecb 	bl	80a7a50 <lsm6dso_block_data_update_set>

  /*
   * Gyroscope Self Test
   */
  /* Set Output Data Rate */
  lsm6dso_gy_data_rate_set(ctx, LSM6DSO_GY_ODR_208Hz);
 80a5cba:	2105      	movs	r1, #5
 80a5cbc:	6878      	ldr	r0, [r7, #4]
 80a5cbe:	f001 fdcb 	bl	80a7858 <lsm6dso_gy_data_rate_set>
  /* Set full scale */
  lsm6dso_gy_full_scale_set(ctx, LSM6DSO_2000dps);
 80a5cc2:	2106      	movs	r1, #6
 80a5cc4:	6878      	ldr	r0, [r7, #4]
 80a5cc6:	f001 fda1 	bl	80a780c <lsm6dso_gy_full_scale_set>
  /* Wait stable output */
  platform_delay(100);
 80a5cca:	2064      	movs	r0, #100	; 0x64
 80a5ccc:	f000 fc1e 	bl	80a650c <platform_delay>

  /* Check if new value available */
  do {
    lsm6dso_gy_flag_data_ready_get(ctx, &drdy);
 80a5cd0:	f107 030f 	add.w	r3, r7, #15
 80a5cd4:	4619      	mov	r1, r3
 80a5cd6:	6878      	ldr	r0, [r7, #4]
 80a5cd8:	f001 ff0a 	bl	80a7af0 <lsm6dso_gy_flag_data_ready_get>
  } while (!drdy);
 80a5cdc:	7bfb      	ldrb	r3, [r7, #15]
 80a5cde:	2b00      	cmp	r3, #0
 80a5ce0:	d0f6      	beq.n	80a5cd0 <lsm6dso_gyro_self_test+0x48>

  /* Read dummy data and discard it */
  lsm6dso_angular_rate_raw_get(ctx, data_raw.u8bit);
 80a5ce2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80a5ce6:	4619      	mov	r1, r3
 80a5ce8:	6878      	ldr	r0, [r7, #4]
 80a5cea:	f001 ff44 	bl	80a7b76 <lsm6dso_angular_rate_raw_get>
  /* Read 5 sample and get the average vale for each axis */
  memset(val_st_off, 0x00, 3 * sizeof(float));
 80a5cee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80a5cf2:	220c      	movs	r2, #12
 80a5cf4:	2100      	movs	r1, #0
 80a5cf6:	4618      	mov	r0, r3
 80a5cf8:	f01a f960 	bl	80bffbc <memset>

  for (i = 0; i < 5; i++) {
 80a5cfc:	2300      	movs	r3, #0
 80a5cfe:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80a5d02:	e041      	b.n	80a5d88 <lsm6dso_gyro_self_test+0x100>
    /* Check if new value available */
    do {
      lsm6dso_xl_flag_data_ready_get(ctx, &drdy);
 80a5d04:	f107 030f 	add.w	r3, r7, #15
 80a5d08:	4619      	mov	r1, r3
 80a5d0a:	6878      	ldr	r0, [r7, #4]
 80a5d0c:	f001 fed7 	bl	80a7abe <lsm6dso_xl_flag_data_ready_get>
    } while (!drdy);
 80a5d10:	7bfb      	ldrb	r3, [r7, #15]
 80a5d12:	2b00      	cmp	r3, #0
 80a5d14:	d0f6      	beq.n	80a5d04 <lsm6dso_gyro_self_test+0x7c>

    /* Read data and accumulate the mg value */
    lsm6dso_angular_rate_raw_get(ctx, data_raw.u8bit);
 80a5d16:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80a5d1a:	4619      	mov	r1, r3
 80a5d1c:	6878      	ldr	r0, [r7, #4]
 80a5d1e:	f001 ff2a 	bl	80a7b76 <lsm6dso_angular_rate_raw_get>

    for (j = 0; j < 3; j++) {
 80a5d22:	2300      	movs	r3, #0
 80a5d24:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80a5d28:	e025      	b.n	80a5d76 <lsm6dso_gyro_self_test+0xee>
      val_st_off[j] += lsm6dso_from_fs2000_to_mdps(data_raw.i16bit[j]);
 80a5d2a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80a5d2e:	005b      	lsls	r3, r3, #1
 80a5d30:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80a5d34:	4413      	add	r3, r2
 80a5d36:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 80a5d3a:	4618      	mov	r0, r3
 80a5d3c:	f001 fc10 	bl	80a7560 <lsm6dso_from_fs2000_to_mdps>
 80a5d40:	eeb0 7a40 	vmov.f32	s14, s0
 80a5d44:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80a5d48:	009b      	lsls	r3, r3, #2
 80a5d4a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80a5d4e:	4413      	add	r3, r2
 80a5d50:	3b18      	subs	r3, #24
 80a5d52:	edd3 7a00 	vldr	s15, [r3]
 80a5d56:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80a5d5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 80a5d5e:	009b      	lsls	r3, r3, #2
 80a5d60:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80a5d64:	4413      	add	r3, r2
 80a5d66:	3b18      	subs	r3, #24
 80a5d68:	edc3 7a00 	vstr	s15, [r3]
    for (j = 0; j < 3; j++) {
 80a5d6c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80a5d70:	3301      	adds	r3, #1
 80a5d72:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80a5d76:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80a5d7a:	2b02      	cmp	r3, #2
 80a5d7c:	d9d5      	bls.n	80a5d2a <lsm6dso_gyro_self_test+0xa2>
  for (i = 0; i < 5; i++) {
 80a5d7e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80a5d82:	3301      	adds	r3, #1
 80a5d84:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80a5d88:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80a5d8c:	2b04      	cmp	r3, #4
 80a5d8e:	d9b9      	bls.n	80a5d04 <lsm6dso_gyro_self_test+0x7c>
    }
  }

  /* Calculate the mg average values */
  for (i = 0; i < 3; i++) {
 80a5d90:	2300      	movs	r3, #0
 80a5d92:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80a5d96:	e01a      	b.n	80a5dce <lsm6dso_gyro_self_test+0x146>
    val_st_off[i] /= 5.0f;
 80a5d98:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80a5d9c:	009b      	lsls	r3, r3, #2
 80a5d9e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80a5da2:	4413      	add	r3, r2
 80a5da4:	3b18      	subs	r3, #24
 80a5da6:	ed93 7a00 	vldr	s14, [r3]
 80a5daa:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80a5dae:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80a5db2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80a5db6:	009b      	lsls	r3, r3, #2
 80a5db8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80a5dbc:	4413      	add	r3, r2
 80a5dbe:	3b18      	subs	r3, #24
 80a5dc0:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 3; i++) {
 80a5dc4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80a5dc8:	3301      	adds	r3, #1
 80a5dca:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80a5dce:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80a5dd2:	2b02      	cmp	r3, #2
 80a5dd4:	d9e0      	bls.n	80a5d98 <lsm6dso_gyro_self_test+0x110>
  }

  /* Enable Self Test positive (or negative) */
  lsm6dso_gy_self_test_set(ctx, LSM6DSO_GY_ST_POSITIVE);
 80a5dd6:	2101      	movs	r1, #1
 80a5dd8:	6878      	ldr	r0, [r7, #4]
 80a5dda:	f001 ff8a 	bl	80a7cf2 <lsm6dso_gy_self_test_set>
  //lsm6dso_gy_self_test_set(ctx, LIS2DH12_GY_ST_NEGATIVE);
  /* Wait stable output */
  platform_delay(100);
 80a5dde:	2064      	movs	r0, #100	; 0x64
 80a5de0:	f000 fb94 	bl	80a650c <platform_delay>
  /* Read 5 sample and get the average vale for each axis */
  memset(val_st_on, 0x00, 3 * sizeof(float));
 80a5de4:	f107 031c 	add.w	r3, r7, #28
 80a5de8:	220c      	movs	r2, #12
 80a5dea:	2100      	movs	r1, #0
 80a5dec:	4618      	mov	r0, r3
 80a5dee:	f01a f8e5 	bl	80bffbc <memset>

  for (i = 0; i < 5; i++) {
 80a5df2:	2300      	movs	r3, #0
 80a5df4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80a5df8:	e041      	b.n	80a5e7e <lsm6dso_gyro_self_test+0x1f6>
    /* Check if new value available */
    do {
      lsm6dso_xl_flag_data_ready_get(ctx, &drdy);
 80a5dfa:	f107 030f 	add.w	r3, r7, #15
 80a5dfe:	4619      	mov	r1, r3
 80a5e00:	6878      	ldr	r0, [r7, #4]
 80a5e02:	f001 fe5c 	bl	80a7abe <lsm6dso_xl_flag_data_ready_get>
    } while (!drdy);
 80a5e06:	7bfb      	ldrb	r3, [r7, #15]
 80a5e08:	2b00      	cmp	r3, #0
 80a5e0a:	d0f6      	beq.n	80a5dfa <lsm6dso_gyro_self_test+0x172>

    /* Read data and accumulate the mg value */
    lsm6dso_angular_rate_raw_get(ctx, data_raw.u8bit);
 80a5e0c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80a5e10:	4619      	mov	r1, r3
 80a5e12:	6878      	ldr	r0, [r7, #4]
 80a5e14:	f001 feaf 	bl	80a7b76 <lsm6dso_angular_rate_raw_get>

    for (j = 0; j < 3; j++) {
 80a5e18:	2300      	movs	r3, #0
 80a5e1a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80a5e1e:	e025      	b.n	80a5e6c <lsm6dso_gyro_self_test+0x1e4>
      val_st_on[j] += lsm6dso_from_fs2000_to_mdps(data_raw.i16bit[j]);
 80a5e20:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80a5e24:	005b      	lsls	r3, r3, #1
 80a5e26:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80a5e2a:	4413      	add	r3, r2
 80a5e2c:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 80a5e30:	4618      	mov	r0, r3
 80a5e32:	f001 fb95 	bl	80a7560 <lsm6dso_from_fs2000_to_mdps>
 80a5e36:	eeb0 7a40 	vmov.f32	s14, s0
 80a5e3a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80a5e3e:	009b      	lsls	r3, r3, #2
 80a5e40:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80a5e44:	4413      	add	r3, r2
 80a5e46:	3b24      	subs	r3, #36	; 0x24
 80a5e48:	edd3 7a00 	vldr	s15, [r3]
 80a5e4c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80a5e50:	ee77 7a27 	vadd.f32	s15, s14, s15
 80a5e54:	009b      	lsls	r3, r3, #2
 80a5e56:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80a5e5a:	4413      	add	r3, r2
 80a5e5c:	3b24      	subs	r3, #36	; 0x24
 80a5e5e:	edc3 7a00 	vstr	s15, [r3]
    for (j = 0; j < 3; j++) {
 80a5e62:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80a5e66:	3301      	adds	r3, #1
 80a5e68:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80a5e6c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80a5e70:	2b02      	cmp	r3, #2
 80a5e72:	d9d5      	bls.n	80a5e20 <lsm6dso_gyro_self_test+0x198>
  for (i = 0; i < 5; i++) {
 80a5e74:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80a5e78:	3301      	adds	r3, #1
 80a5e7a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80a5e7e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80a5e82:	2b04      	cmp	r3, #4
 80a5e84:	d9b9      	bls.n	80a5dfa <lsm6dso_gyro_self_test+0x172>
    }
  }

  /* Calculate the mg average values */
  for (i = 0; i < 3; i++) {
 80a5e86:	2300      	movs	r3, #0
 80a5e88:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80a5e8c:	e01a      	b.n	80a5ec4 <lsm6dso_gyro_self_test+0x23c>
    val_st_on[i] /= 5.0f;
 80a5e8e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80a5e92:	009b      	lsls	r3, r3, #2
 80a5e94:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80a5e98:	4413      	add	r3, r2
 80a5e9a:	3b24      	subs	r3, #36	; 0x24
 80a5e9c:	ed93 7a00 	vldr	s14, [r3]
 80a5ea0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80a5ea4:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80a5ea8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80a5eac:	009b      	lsls	r3, r3, #2
 80a5eae:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80a5eb2:	4413      	add	r3, r2
 80a5eb4:	3b24      	subs	r3, #36	; 0x24
 80a5eb6:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 3; i++) {
 80a5eba:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80a5ebe:	3301      	adds	r3, #1
 80a5ec0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80a5ec4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80a5ec8:	2b02      	cmp	r3, #2
 80a5eca:	d9e0      	bls.n	80a5e8e <lsm6dso_gyro_self_test+0x206>
  }

  /* Calculate the mg values for self test */
  for (i = 0; i < 3; i++) {
 80a5ecc:	2300      	movs	r3, #0
 80a5ece:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80a5ed2:	e023      	b.n	80a5f1c <lsm6dso_gyro_self_test+0x294>
    test_val[i] = fabs((val_st_on[i] - val_st_off[i]));
 80a5ed4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80a5ed8:	009b      	lsls	r3, r3, #2
 80a5eda:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80a5ede:	4413      	add	r3, r2
 80a5ee0:	3b24      	subs	r3, #36	; 0x24
 80a5ee2:	ed93 7a00 	vldr	s14, [r3]
 80a5ee6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80a5eea:	009b      	lsls	r3, r3, #2
 80a5eec:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80a5ef0:	4413      	add	r3, r2
 80a5ef2:	3b18      	subs	r3, #24
 80a5ef4:	edd3 7a00 	vldr	s15, [r3]
 80a5ef8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80a5efc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80a5f00:	eef0 7ae7 	vabs.f32	s15, s15
 80a5f04:	009b      	lsls	r3, r3, #2
 80a5f06:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80a5f0a:	4413      	add	r3, r2
 80a5f0c:	3b30      	subs	r3, #48	; 0x30
 80a5f0e:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 3; i++) {
 80a5f12:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80a5f16:	3301      	adds	r3, #1
 80a5f18:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80a5f1c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80a5f20:	2b02      	cmp	r3, #2
 80a5f22:	d9d7      	bls.n	80a5ed4 <lsm6dso_gyro_self_test+0x24c>
  }

  /* Check self test limit */
  st_result = ST_PASS;
 80a5f24:	2301      	movs	r3, #1
 80a5f26:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  for (i = 0; i < 3; i++) {
 80a5f2a:	2300      	movs	r3, #0
 80a5f2c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80a5f30:	e027      	b.n	80a5f82 <lsm6dso_gyro_self_test+0x2fa>
    if ((MIN_ST_LIMIT_mdps > test_val[i])
 80a5f32:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80a5f36:	009b      	lsls	r3, r3, #2
 80a5f38:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80a5f3c:	4413      	add	r3, r2
 80a5f3e:	3b30      	subs	r3, #48	; 0x30
 80a5f40:	edd3 7a00 	vldr	s15, [r3]
 80a5f44:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80a5fd0 <lsm6dso_gyro_self_test+0x348>
 80a5f48:	eef4 7ac7 	vcmpe.f32	s15, s14
 80a5f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80a5f50:	d40f      	bmi.n	80a5f72 <lsm6dso_gyro_self_test+0x2ea>
        || (test_val[i] > MAX_ST_LIMIT_mdps)) {
 80a5f52:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80a5f56:	009b      	lsls	r3, r3, #2
 80a5f58:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80a5f5c:	4413      	add	r3, r2
 80a5f5e:	3b30      	subs	r3, #48	; 0x30
 80a5f60:	edd3 7a00 	vldr	s15, [r3]
 80a5f64:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80a5fd4 <lsm6dso_gyro_self_test+0x34c>
 80a5f68:	eef4 7ac7 	vcmpe.f32	s15, s14
 80a5f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80a5f70:	dd02      	ble.n	80a5f78 <lsm6dso_gyro_self_test+0x2f0>
      st_result = ST_FAIL;
 80a5f72:	2300      	movs	r3, #0
 80a5f74:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  for (i = 0; i < 3; i++) {
 80a5f78:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80a5f7c:	3301      	adds	r3, #1
 80a5f7e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80a5f82:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80a5f86:	2b02      	cmp	r3, #2
 80a5f88:	d9d3      	bls.n	80a5f32 <lsm6dso_gyro_self_test+0x2aa>
    }
  }

  /* Disable Self Test */
  lsm6dso_gy_self_test_set(ctx, LSM6DSO_GY_ST_DISABLE);
 80a5f8a:	2100      	movs	r1, #0
 80a5f8c:	6878      	ldr	r0, [r7, #4]
 80a5f8e:	f001 feb0 	bl	80a7cf2 <lsm6dso_gy_self_test_set>
  /* Disable sensor. */
  lsm6dso_xl_data_rate_set(ctx, LSM6DSO_GY_ODR_OFF);
 80a5f92:	2100      	movs	r1, #0
 80a5f94:	6878      	ldr	r0, [r7, #4]
 80a5f96:	f001 fb3d 	bl	80a7614 <lsm6dso_xl_data_rate_set>

  lsm6dso_reinit_device(ctx);
 80a5f9a:	6878      	ldr	r0, [r7, #4]
 80a5f9c:	f7ff fc80 	bl	80a58a0 <lsm6dso_reinit_device>

  printf("lsm6dso_gyro_self_test result: %d\r\n", st_result);
 80a5fa0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80a5fa4:	4619      	mov	r1, r3
 80a5fa6:	480c      	ldr	r0, [pc, #48]	; (80a5fd8 <lsm6dso_gyro_self_test+0x350>)
 80a5fa8:	f01a fce4 	bl	80c0974 <iprintf>
  if (st_result == ST_PASS) {
 80a5fac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80a5fb0:	2b01      	cmp	r3, #1
 80a5fb2:	d104      	bne.n	80a5fbe <lsm6dso_gyro_self_test+0x336>
    printf("lsm6dso_gyro_self_test success\r\n");
 80a5fb4:	4809      	ldr	r0, [pc, #36]	; (80a5fdc <lsm6dso_gyro_self_test+0x354>)
 80a5fb6:	f01a fd79 	bl	80c0aac <puts>
    return 0;
 80a5fba:	2300      	movs	r3, #0
 80a5fbc:	e004      	b.n	80a5fc8 <lsm6dso_gyro_self_test+0x340>
  } else {
    printf("lsm6dso_gyro_self_test failed\r\n");
 80a5fbe:	4808      	ldr	r0, [pc, #32]	; (80a5fe0 <lsm6dso_gyro_self_test+0x358>)
 80a5fc0:	f01a fd74 	bl	80c0aac <puts>
    return -1;
 80a5fc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 80a5fc8:	4618      	mov	r0, r3
 80a5fca:	3740      	adds	r7, #64	; 0x40
 80a5fcc:	46bd      	mov	sp, r7
 80a5fce:	bd80      	pop	{r7, pc}
 80a5fd0:	48127c00 	.word	0x48127c00
 80a5fd4:	492ae600 	.word	0x492ae600
 80a5fd8:	080c5800 	.word	0x080c5800
 80a5fdc:	080c5824 	.word	0x080c5824
 80a5fe0:	080c5844 	.word	0x080c5844

080a5fe4 <lsm6dso_acc_calibration>:

int32_t lsm6dso_acc_calibration(stmdev_ctx_t * ctx, float *offset)
{
 80a5fe4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a5fe8:	b0a5      	sub	sp, #148	; 0x94
 80a5fea:	af04      	add	r7, sp, #16
 80a5fec:	6078      	str	r0, [r7, #4]
 80a5fee:	6039      	str	r1, [r7, #0]
  axis1bit16_t data_raw_temperature;
  float temperature_degC;
  float acceleration[3];
  sensor_info_type acc_info;

  acc_info.cal_config.cols = 3;
 80a5ff0:	2303      	movs	r3, #3
 80a5ff2:	61fb      	str	r3, [r7, #28]
  acc_info.cal_config.num_samples = 50;
 80a5ff4:	2332      	movs	r3, #50	; 0x32
 80a5ff6:	623b      	str	r3, [r7, #32]
  acc_info.cal_config.variance_threshold = 10.0;
 80a5ff8:	4b88      	ldr	r3, [pc, #544]	; (80a621c <lsm6dso_acc_calibration+0x238>)
 80a5ffa:	627b      	str	r3, [r7, #36]	; 0x24
  acc_info.cal_config.check_zero_variance = true;
 80a5ffc:	2301      	movs	r3, #1
 80a5ffe:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  acc_info.cal_config.bias_thresholds[0] = 2.0;
 80a6002:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a6006:	62fb      	str	r3, [r7, #44]	; 0x2c
  acc_info.cal_config.bias_thresholds[1] = 2.0;
 80a6008:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a600c:	633b      	str	r3, [r7, #48]	; 0x30
  acc_info.cal_config.bias_thresholds[2] = 2.0;
 80a600e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a6012:	637b      	str	r3, [r7, #52]	; 0x34
  acc_info.cal_config.count = 0;
 80a6014:	2300      	movs	r3, #0
 80a6016:	63bb      	str	r3, [r7, #56]	; 0x38
  acc_info.cal_dynm_data.sample_count = 0;
 80a6018:	2300      	movs	r3, #0
 80a601a:	663b      	str	r3, [r7, #96]	; 0x60
  acc_info.cal_state = CAL_STATE_START;
 80a601c:	2300      	movs	r3, #0
 80a601e:	763b      	strb	r3, [r7, #24]

  lsm6dso_reinit_device(ctx);
 80a6020:	6878      	ldr	r0, [r7, #4]
 80a6022:	f7ff fc3d 	bl	80a58a0 <lsm6dso_reinit_device>
  lsm6dso_block_data_update_set(ctx, PROPERTY_ENABLE);
 80a6026:	2101      	movs	r1, #1
 80a6028:	6878      	ldr	r0, [r7, #4]
 80a602a:	f001 fd11 	bl	80a7a50 <lsm6dso_block_data_update_set>
  PID_Init(&imu_pid_struct, PID_TARGET_TEMP);
 80a602e:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 80a6220 <lsm6dso_acc_calibration+0x23c>
 80a6032:	487c      	ldr	r0, [pc, #496]	; (80a6224 <lsm6dso_acc_calibration+0x240>)
 80a6034:	f000 fa83 	bl	80a653e <PID_Init>
  pid_pwm_control(PWM_ACTIVATE, 0);
 80a6038:	2100      	movs	r1, #0
 80a603a:	2000      	movs	r0, #0
 80a603c:	f000 fa71 	bl	80a6522 <pid_pwm_control>

  platform_delay(20);
 80a6040:	2014      	movs	r0, #20
 80a6042:	f000 fa63 	bl	80a650c <platform_delay>

  do {
    //printf("reading acc data\r\n");
    lsm6dso_xl_flag_data_ready_get(ctx, &reg);
 80a6046:	f107 037b 	add.w	r3, r7, #123	; 0x7b
 80a604a:	4619      	mov	r1, r3
 80a604c:	6878      	ldr	r0, [r7, #4]
 80a604e:	f001 fd36 	bl	80a7abe <lsm6dso_xl_flag_data_ready_get>
    if (reg) {
 80a6052:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80a6056:	2b00      	cmp	r3, #0
 80a6058:	f000 8098 	beq.w	80a618c <lsm6dso_acc_calibration+0x1a8>
      /* Read acceleration field data */
      memset(data_raw_acceleration.u8bit, 0x00, 3 * sizeof(int16_t));
 80a605c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80a6060:	2206      	movs	r2, #6
 80a6062:	2100      	movs	r1, #0
 80a6064:	4618      	mov	r0, r3
 80a6066:	f019 ffa9 	bl	80bffbc <memset>
      lsm6dso_acceleration_raw_get(ctx, data_raw_acceleration.u8bit);
 80a606a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80a606e:	4619      	mov	r1, r3
 80a6070:	6878      	ldr	r0, [r7, #4]
 80a6072:	f001 fd91 	bl	80a7b98 <lsm6dso_acceleration_raw_get>
      acceleration[0] =
          lsm6dso_from_fs8_to_mg(data_raw_acceleration.i16bit[0]) *
 80a6076:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 80a607a:	4618      	mov	r0, r3
 80a607c:	f001 fa40 	bl	80a7500 <lsm6dso_from_fs8_to_mg>
 80a6080:	eef0 7a40 	vmov.f32	s15, s0
 80a6084:	ed9f 7a68 	vldr	s14, [pc, #416]	; 80a6228 <lsm6dso_acc_calibration+0x244>
 80a6088:	ee27 7a87 	vmul.f32	s14, s15, s14
          GRAVITY_EARTH / 1000.0f;
 80a608c:	eddf 6a67 	vldr	s13, [pc, #412]	; 80a622c <lsm6dso_acc_calibration+0x248>
 80a6090:	eec7 7a26 	vdiv.f32	s15, s14, s13
      acceleration[0] =
 80a6094:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
      acceleration[1] =
          lsm6dso_from_fs8_to_mg(data_raw_acceleration.i16bit[1]) *
 80a6098:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 80a609c:	4618      	mov	r0, r3
 80a609e:	f001 fa2f 	bl	80a7500 <lsm6dso_from_fs8_to_mg>
 80a60a2:	eef0 7a40 	vmov.f32	s15, s0
 80a60a6:	ed9f 7a60 	vldr	s14, [pc, #384]	; 80a6228 <lsm6dso_acc_calibration+0x244>
 80a60aa:	ee27 7a87 	vmul.f32	s14, s15, s14
          GRAVITY_EARTH / 1000.0f;
 80a60ae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80a622c <lsm6dso_acc_calibration+0x248>
 80a60b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
      acceleration[1] =
 80a60b6:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
      acceleration[2] =
          lsm6dso_from_fs8_to_mg(data_raw_acceleration.i16bit[2]) *
 80a60ba:	f9b7 3078 	ldrsh.w	r3, [r7, #120]	; 0x78
 80a60be:	4618      	mov	r0, r3
 80a60c0:	f001 fa1e 	bl	80a7500 <lsm6dso_from_fs8_to_mg>
 80a60c4:	eef0 7a40 	vmov.f32	s15, s0
 80a60c8:	ed9f 7a57 	vldr	s14, [pc, #348]	; 80a6228 <lsm6dso_acc_calibration+0x244>
 80a60cc:	ee27 7a87 	vmul.f32	s14, s15, s14
          GRAVITY_EARTH / 1000.0f;
 80a60d0:	eddf 6a56 	vldr	s13, [pc, #344]	; 80a622c <lsm6dso_acc_calibration+0x248>
 80a60d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
      acceleration[2] =
 80a60d8:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c

      printf("%d, {%f, %f, %f}\r\n", acc_info.cal_config.count,
 80a60dc:	6bbe      	ldr	r6, [r7, #56]	; 0x38
             acceleration[0], acceleration[1], acceleration[2]);
 80a60de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
      printf("%d, {%f, %f, %f}\r\n", acc_info.cal_config.count,
 80a60e0:	4618      	mov	r0, r3
 80a60e2:	f7fa fa31 	bl	80a0548 <__aeabi_f2d>
 80a60e6:	4680      	mov	r8, r0
 80a60e8:	4689      	mov	r9, r1
             acceleration[0], acceleration[1], acceleration[2]);
 80a60ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
      printf("%d, {%f, %f, %f}\r\n", acc_info.cal_config.count,
 80a60ec:	4618      	mov	r0, r3
 80a60ee:	f7fa fa2b 	bl	80a0548 <__aeabi_f2d>
 80a60f2:	4604      	mov	r4, r0
 80a60f4:	460d      	mov	r5, r1
             acceleration[0], acceleration[1], acceleration[2]);
 80a60f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
      printf("%d, {%f, %f, %f}\r\n", acc_info.cal_config.count,
 80a60f8:	4618      	mov	r0, r3
 80a60fa:	f7fa fa25 	bl	80a0548 <__aeabi_f2d>
 80a60fe:	4602      	mov	r2, r0
 80a6100:	460b      	mov	r3, r1
 80a6102:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80a6106:	e9cd 4500 	strd	r4, r5, [sp]
 80a610a:	4642      	mov	r2, r8
 80a610c:	464b      	mov	r3, r9
 80a610e:	4631      	mov	r1, r6
 80a6110:	4847      	ldr	r0, [pc, #284]	; (80a6230 <lsm6dso_acc_calibration+0x24c>)
 80a6112:	f01a fc2f 	bl	80c0974 <iprintf>

      //apply axis transfer first
      ConvertCoordinate(acceleration, g_imu_axis_order, g_imu_axis_sign);
 80a6116:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80a611a:	4a46      	ldr	r2, [pc, #280]	; (80a6234 <lsm6dso_acc_calibration+0x250>)
 80a611c:	4946      	ldr	r1, [pc, #280]	; (80a6238 <lsm6dso_acc_calibration+0x254>)
 80a611e:	4618      	mov	r0, r3
 80a6120:	f000 fb5c 	bl	80a67dc <ConvertCoordinate>

      printf("%d, {%f, %f, %f}\r\n", acc_info.cal_config.count,
 80a6124:	6bbe      	ldr	r6, [r7, #56]	; 0x38
             acceleration[0], acceleration[1], acceleration[2]);
 80a6126:	6e7b      	ldr	r3, [r7, #100]	; 0x64
      printf("%d, {%f, %f, %f}\r\n", acc_info.cal_config.count,
 80a6128:	4618      	mov	r0, r3
 80a612a:	f7fa fa0d 	bl	80a0548 <__aeabi_f2d>
 80a612e:	4680      	mov	r8, r0
 80a6130:	4689      	mov	r9, r1
             acceleration[0], acceleration[1], acceleration[2]);
 80a6132:	6ebb      	ldr	r3, [r7, #104]	; 0x68
      printf("%d, {%f, %f, %f}\r\n", acc_info.cal_config.count,
 80a6134:	4618      	mov	r0, r3
 80a6136:	f7fa fa07 	bl	80a0548 <__aeabi_f2d>
 80a613a:	4604      	mov	r4, r0
 80a613c:	460d      	mov	r5, r1
             acceleration[0], acceleration[1], acceleration[2]);
 80a613e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
      printf("%d, {%f, %f, %f}\r\n", acc_info.cal_config.count,
 80a6140:	4618      	mov	r0, r3
 80a6142:	f7fa fa01 	bl	80a0548 <__aeabi_f2d>
 80a6146:	4602      	mov	r2, r0
 80a6148:	460b      	mov	r3, r1
 80a614a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80a614e:	e9cd 4500 	strd	r4, r5, [sp]
 80a6152:	4642      	mov	r2, r8
 80a6154:	464b      	mov	r3, r9
 80a6156:	4631      	mov	r1, r6
 80a6158:	4835      	ldr	r0, [pc, #212]	; (80a6230 <lsm6dso_acc_calibration+0x24c>)
 80a615a:	f01a fc0b 	bl	80c0974 <iprintf>

      //fill data to data array
      acceleration[2] = acceleration[2] - GRAVITY_EARTH;
 80a615e:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80a6162:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80a6228 <lsm6dso_acc_calibration+0x244>
 80a6166:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80a616a:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
      if (acc_info.cal_config.count > SKIP_COUNT)
 80a616e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80a6170:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80a6174:	dd07      	ble.n	80a6186 <lsm6dso_acc_calibration+0x1a2>
        cal_process_sample(&acc_info, acceleration);
 80a6176:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80a617a:	f107 030c 	add.w	r3, r7, #12
 80a617e:	4611      	mov	r1, r2
 80a6180:	4618      	mov	r0, r3
 80a6182:	f7ff f9fd 	bl	80a5580 <cal_process_sample>
      acc_info.cal_config.count++;
 80a6186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80a6188:	3301      	adds	r3, #1
 80a618a:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    lsm6dso_temp_flag_data_ready_get(ctx, &reg);
 80a618c:	f107 037b 	add.w	r3, r7, #123	; 0x7b
 80a6190:	4619      	mov	r1, r3
 80a6192:	6878      	ldr	r0, [r7, #4]
 80a6194:	f001 fcc5 	bl	80a7b22 <lsm6dso_temp_flag_data_ready_get>
    if (reg) {
 80a6198:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80a619c:	2b00      	cmp	r3, #0
 80a619e:	d018      	beq.n	80a61d2 <lsm6dso_acc_calibration+0x1ee>
      /* Read temperature data */
      memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 80a61a0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80a61a4:	2202      	movs	r2, #2
 80a61a6:	2100      	movs	r1, #0
 80a61a8:	4618      	mov	r0, r3
 80a61aa:	f019 ff07 	bl	80bffbc <memset>
      lsm6dso_temperature_raw_get(ctx, data_raw_temperature.u8bit);
 80a61ae:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80a61b2:	4619      	mov	r1, r3
 80a61b4:	6878      	ldr	r0, [r7, #4]
 80a61b6:	f001 fccd 	bl	80a7b54 <lsm6dso_temperature_raw_get>
      temperature_degC =
          lsm6dso_from_lsb_to_celsius(data_raw_temperature.i16bit);
 80a61ba:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 80a61be:	4618      	mov	r0, r3
 80a61c0:	f001 f9e6 	bl	80a7590 <lsm6dso_from_lsb_to_celsius>
 80a61c4:	ed87 0a1f 	vstr	s0, [r7, #124]	; 0x7c
      pid_temp_control(&imu_pid_struct, temperature_degC);
 80a61c8:	ed97 0a1f 	vldr	s0, [r7, #124]	; 0x7c
 80a61cc:	4815      	ldr	r0, [pc, #84]	; (80a6224 <lsm6dso_acc_calibration+0x240>)
 80a61ce:	f000 f9f1 	bl	80a65b4 <pid_temp_control>
    }
    platform_delay(10);
 80a61d2:	200a      	movs	r0, #10
 80a61d4:	f000 f99a 	bl	80a650c <platform_delay>
  } while ((acc_info.cal_config.count < SKIP_COUNT * 2)
 80a61d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
           && (acc_info.cal_state != CAL_STATE_SUCCESS));
 80a61da:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80a61de:	da03      	bge.n	80a61e8 <lsm6dso_acc_calibration+0x204>
 80a61e0:	7e3b      	ldrb	r3, [r7, #24]
 80a61e2:	2b02      	cmp	r3, #2
 80a61e4:	f47f af2f 	bne.w	80a6046 <lsm6dso_acc_calibration+0x62>

  pid_pwm_control(PWM_DEACTIVATE, 0);
 80a61e8:	2100      	movs	r1, #0
 80a61ea:	2001      	movs	r0, #1
 80a61ec:	f000 f999 	bl	80a6522 <pid_pwm_control>

  if (acc_info.cal_state == CAL_STATE_SUCCESS) {
 80a61f0:	7e3b      	ldrb	r3, [r7, #24]
 80a61f2:	2b02      	cmp	r3, #2
 80a61f4:	d10b      	bne.n	80a620e <lsm6dso_acc_calibration+0x22a>
    printf("acc calibration successed!\r\n");
 80a61f6:	4811      	ldr	r0, [pc, #68]	; (80a623c <lsm6dso_acc_calibration+0x258>)
 80a61f8:	f01a fc58 	bl	80c0aac <puts>
    memcpy(offset, acc_info.offset, sizeof(float) * 3);
 80a61fc:	f107 030c 	add.w	r3, r7, #12
 80a6200:	220c      	movs	r2, #12
 80a6202:	4619      	mov	r1, r3
 80a6204:	6838      	ldr	r0, [r7, #0]
 80a6206:	f019 fecb 	bl	80bffa0 <memcpy>
    return 0;
 80a620a:	2300      	movs	r3, #0
 80a620c:	e001      	b.n	80a6212 <lsm6dso_acc_calibration+0x22e>
  }

  return -1;
 80a620e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80a6212:	4618      	mov	r0, r3
 80a6214:	3784      	adds	r7, #132	; 0x84
 80a6216:	46bd      	mov	sp, r7
 80a6218:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a621c:	41200000 	.word	0x41200000
 80a6220:	42300000 	.word	0x42300000
 80a6224:	2000803c 	.word	0x2000803c
 80a6228:	411ce80a 	.word	0x411ce80a
 80a622c:	447a0000 	.word	0x447a0000
 80a6230:	080c5864 	.word	0x080c5864
 80a6234:	2001be00 	.word	0x2001be00
 80a6238:	2001bdfc 	.word	0x2001bdfc
 80a623c:	080c5878 	.word	0x080c5878

080a6240 <lsm6dso_gyro_calibration>:

int32_t lsm6dso_gyro_calibration(stmdev_ctx_t * ctx, float *offset)
{
 80a6240:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a6244:	b0a5      	sub	sp, #148	; 0x94
 80a6246:	af04      	add	r7, sp, #16
 80a6248:	6078      	str	r0, [r7, #4]
 80a624a:	6039      	str	r1, [r7, #0]
  axis1bit16_t data_raw_temperature;
  float temperature_degC;
  float gyroscope[3];
  sensor_info_type gyro_info;

  gyro_info.cal_config.cols = 3;
 80a624c:	2303      	movs	r3, #3
 80a624e:	61fb      	str	r3, [r7, #28]
  gyro_info.cal_config.num_samples = 100;
 80a6250:	2364      	movs	r3, #100	; 0x64
 80a6252:	623b      	str	r3, [r7, #32]
  gyro_info.cal_config.variance_threshold = 10.0;
 80a6254:	4ba4      	ldr	r3, [pc, #656]	; (80a64e8 <lsm6dso_gyro_calibration+0x2a8>)
 80a6256:	627b      	str	r3, [r7, #36]	; 0x24
  gyro_info.cal_config.check_zero_variance = true;
 80a6258:	2301      	movs	r3, #1
 80a625a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  gyro_info.cal_config.bias_thresholds[0] = 1.0;
 80a625e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80a6262:	62fb      	str	r3, [r7, #44]	; 0x2c
  gyro_info.cal_config.bias_thresholds[1] = 1.0;
 80a6264:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80a6268:	633b      	str	r3, [r7, #48]	; 0x30
  gyro_info.cal_config.bias_thresholds[2] = 1.0;
 80a626a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80a626e:	637b      	str	r3, [r7, #52]	; 0x34
  gyro_info.cal_config.count = 0;
 80a6270:	2300      	movs	r3, #0
 80a6272:	63bb      	str	r3, [r7, #56]	; 0x38
  gyro_info.cal_dynm_data.sample_count = 0;
 80a6274:	2300      	movs	r3, #0
 80a6276:	663b      	str	r3, [r7, #96]	; 0x60
  gyro_info.cal_state = CAL_STATE_START;
 80a6278:	2300      	movs	r3, #0
 80a627a:	763b      	strb	r3, [r7, #24]

  lsm6dso_reinit_device(ctx);
 80a627c:	6878      	ldr	r0, [r7, #4]
 80a627e:	f7ff fb0f 	bl	80a58a0 <lsm6dso_reinit_device>
  lsm6dso_block_data_update_set(ctx, PROPERTY_ENABLE);
 80a6282:	2101      	movs	r1, #1
 80a6284:	6878      	ldr	r0, [r7, #4]
 80a6286:	f001 fbe3 	bl	80a7a50 <lsm6dso_block_data_update_set>

  PID_Init(&imu_pid_struct, PID_TARGET_TEMP);
 80a628a:	ed9f 0a98 	vldr	s0, [pc, #608]	; 80a64ec <lsm6dso_gyro_calibration+0x2ac>
 80a628e:	4898      	ldr	r0, [pc, #608]	; (80a64f0 <lsm6dso_gyro_calibration+0x2b0>)
 80a6290:	f000 f955 	bl	80a653e <PID_Init>
  pid_pwm_control(PWM_ACTIVATE, 0);
 80a6294:	2100      	movs	r1, #0
 80a6296:	2000      	movs	r0, #0
 80a6298:	f000 f943 	bl	80a6522 <pid_pwm_control>

  platform_delay(20);
 80a629c:	2014      	movs	r0, #20
 80a629e:	f000 f935 	bl	80a650c <platform_delay>

  do {
    //printf("reading gyro data\r\n");
    lsm6dso_gy_flag_data_ready_get(ctx, &reg);
 80a62a2:	f107 037b 	add.w	r3, r7, #123	; 0x7b
 80a62a6:	4619      	mov	r1, r3
 80a62a8:	6878      	ldr	r0, [r7, #4]
 80a62aa:	f001 fc21 	bl	80a7af0 <lsm6dso_gy_flag_data_ready_get>
    if (reg) {
 80a62ae:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80a62b2:	2b00      	cmp	r3, #0
 80a62b4:	f000 80ee 	beq.w	80a6494 <lsm6dso_gyro_calibration+0x254>
      /* Read angular rate field data */
      memset(data_raw_angular_rate.u8bit, 0x00, 3 * sizeof(int16_t));
 80a62b8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80a62bc:	2206      	movs	r2, #6
 80a62be:	2100      	movs	r1, #0
 80a62c0:	4618      	mov	r0, r3
 80a62c2:	f019 fe7b 	bl	80bffbc <memset>
      lsm6dso_angular_rate_raw_get(ctx, data_raw_angular_rate.u8bit);
 80a62c6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80a62ca:	4619      	mov	r1, r3
 80a62cc:	6878      	ldr	r0, [r7, #4]
 80a62ce:	f001 fc52 	bl	80a7b76 <lsm6dso_angular_rate_raw_get>
      gyroscope[0] =
          lsm6dso_from_fs1000_to_mdps(data_raw_angular_rate.i16bit[0]) /
 80a62d2:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 80a62d6:	4618      	mov	r0, r3
 80a62d8:	f001 f92a 	bl	80a7530 <lsm6dso_from_fs1000_to_mdps>
 80a62dc:	eef0 7a40 	vmov.f32	s15, s0
 80a62e0:	ed9f 7a84 	vldr	s14, [pc, #528]	; 80a64f4 <lsm6dso_gyro_calibration+0x2b4>
 80a62e4:	eec7 6a87 	vdiv.f32	s13, s15, s14
          1000.0f * DPS2RPS;
 80a62e8:	ee16 0a90 	vmov	r0, s13
 80a62ec:	f7fa f92c 	bl	80a0548 <__aeabi_f2d>
 80a62f0:	f04f 0200 	mov.w	r2, #0
 80a62f4:	4b80      	ldr	r3, [pc, #512]	; (80a64f8 <lsm6dso_gyro_calibration+0x2b8>)
 80a62f6:	f7fa faa9 	bl	80a084c <__aeabi_ddiv>
 80a62fa:	4602      	mov	r2, r0
 80a62fc:	460b      	mov	r3, r1
 80a62fe:	4610      	mov	r0, r2
 80a6300:	4619      	mov	r1, r3
 80a6302:	a377      	add	r3, pc, #476	; (adr r3, 80a64e0 <lsm6dso_gyro_calibration+0x2a0>)
 80a6304:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6308:	f7fa f976 	bl	80a05f8 <__aeabi_dmul>
 80a630c:	4602      	mov	r2, r0
 80a630e:	460b      	mov	r3, r1
 80a6310:	4610      	mov	r0, r2
 80a6312:	4619      	mov	r1, r3
 80a6314:	f7fa fc68 	bl	80a0be8 <__aeabi_d2f>
 80a6318:	4603      	mov	r3, r0
      gyroscope[0] =
 80a631a:	667b      	str	r3, [r7, #100]	; 0x64
      gyroscope[1] =
          lsm6dso_from_fs1000_to_mdps(data_raw_angular_rate.i16bit[1]) /
 80a631c:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 80a6320:	4618      	mov	r0, r3
 80a6322:	f001 f905 	bl	80a7530 <lsm6dso_from_fs1000_to_mdps>
 80a6326:	eef0 7a40 	vmov.f32	s15, s0
 80a632a:	ed9f 7a72 	vldr	s14, [pc, #456]	; 80a64f4 <lsm6dso_gyro_calibration+0x2b4>
 80a632e:	eec7 6a87 	vdiv.f32	s13, s15, s14
          1000.0f * DPS2RPS;
 80a6332:	ee16 0a90 	vmov	r0, s13
 80a6336:	f7fa f907 	bl	80a0548 <__aeabi_f2d>
 80a633a:	f04f 0200 	mov.w	r2, #0
 80a633e:	4b6e      	ldr	r3, [pc, #440]	; (80a64f8 <lsm6dso_gyro_calibration+0x2b8>)
 80a6340:	f7fa fa84 	bl	80a084c <__aeabi_ddiv>
 80a6344:	4602      	mov	r2, r0
 80a6346:	460b      	mov	r3, r1
 80a6348:	4610      	mov	r0, r2
 80a634a:	4619      	mov	r1, r3
 80a634c:	a364      	add	r3, pc, #400	; (adr r3, 80a64e0 <lsm6dso_gyro_calibration+0x2a0>)
 80a634e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6352:	f7fa f951 	bl	80a05f8 <__aeabi_dmul>
 80a6356:	4602      	mov	r2, r0
 80a6358:	460b      	mov	r3, r1
 80a635a:	4610      	mov	r0, r2
 80a635c:	4619      	mov	r1, r3
 80a635e:	f7fa fc43 	bl	80a0be8 <__aeabi_d2f>
 80a6362:	4603      	mov	r3, r0
      gyroscope[1] =
 80a6364:	66bb      	str	r3, [r7, #104]	; 0x68
      gyroscope[2] =
          lsm6dso_from_fs1000_to_mdps(data_raw_angular_rate.i16bit[2]) /
 80a6366:	f9b7 3078 	ldrsh.w	r3, [r7, #120]	; 0x78
 80a636a:	4618      	mov	r0, r3
 80a636c:	f001 f8e0 	bl	80a7530 <lsm6dso_from_fs1000_to_mdps>
 80a6370:	eef0 7a40 	vmov.f32	s15, s0
 80a6374:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80a64f4 <lsm6dso_gyro_calibration+0x2b4>
 80a6378:	eec7 6a87 	vdiv.f32	s13, s15, s14
          1000.0f * DPS2RPS;
 80a637c:	ee16 0a90 	vmov	r0, s13
 80a6380:	f7fa f8e2 	bl	80a0548 <__aeabi_f2d>
 80a6384:	f04f 0200 	mov.w	r2, #0
 80a6388:	4b5b      	ldr	r3, [pc, #364]	; (80a64f8 <lsm6dso_gyro_calibration+0x2b8>)
 80a638a:	f7fa fa5f 	bl	80a084c <__aeabi_ddiv>
 80a638e:	4602      	mov	r2, r0
 80a6390:	460b      	mov	r3, r1
 80a6392:	4610      	mov	r0, r2
 80a6394:	4619      	mov	r1, r3
 80a6396:	a352      	add	r3, pc, #328	; (adr r3, 80a64e0 <lsm6dso_gyro_calibration+0x2a0>)
 80a6398:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a639c:	f7fa f92c 	bl	80a05f8 <__aeabi_dmul>
 80a63a0:	4602      	mov	r2, r0
 80a63a2:	460b      	mov	r3, r1
 80a63a4:	4610      	mov	r0, r2
 80a63a6:	4619      	mov	r1, r3
 80a63a8:	f7fa fc1e 	bl	80a0be8 <__aeabi_d2f>
 80a63ac:	4603      	mov	r3, r0
      gyroscope[2] =
 80a63ae:	66fb      	str	r3, [r7, #108]	; 0x6c

      printf("%d, {%f, %f, %f}\r\n", gyro_info.cal_config.count,
 80a63b0:	6bbe      	ldr	r6, [r7, #56]	; 0x38
             gyroscope[0], gyroscope[1], gyroscope[2]);
 80a63b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
      printf("%d, {%f, %f, %f}\r\n", gyro_info.cal_config.count,
 80a63b4:	4618      	mov	r0, r3
 80a63b6:	f7fa f8c7 	bl	80a0548 <__aeabi_f2d>
 80a63ba:	4680      	mov	r8, r0
 80a63bc:	4689      	mov	r9, r1
             gyroscope[0], gyroscope[1], gyroscope[2]);
 80a63be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
      printf("%d, {%f, %f, %f}\r\n", gyro_info.cal_config.count,
 80a63c0:	4618      	mov	r0, r3
 80a63c2:	f7fa f8c1 	bl	80a0548 <__aeabi_f2d>
 80a63c6:	4604      	mov	r4, r0
 80a63c8:	460d      	mov	r5, r1
             gyroscope[0], gyroscope[1], gyroscope[2]);
 80a63ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
      printf("%d, {%f, %f, %f}\r\n", gyro_info.cal_config.count,
 80a63cc:	4618      	mov	r0, r3
 80a63ce:	f7fa f8bb 	bl	80a0548 <__aeabi_f2d>
 80a63d2:	4602      	mov	r2, r0
 80a63d4:	460b      	mov	r3, r1
 80a63d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80a63da:	e9cd 4500 	strd	r4, r5, [sp]
 80a63de:	4642      	mov	r2, r8
 80a63e0:	464b      	mov	r3, r9
 80a63e2:	4631      	mov	r1, r6
 80a63e4:	4845      	ldr	r0, [pc, #276]	; (80a64fc <lsm6dso_gyro_calibration+0x2bc>)
 80a63e6:	f01a fac5 	bl	80c0974 <iprintf>
      //apply axis transfer first
      ConvertCoordinate(gyroscope, g_imu_axis_order, g_imu_axis_sign);
 80a63ea:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80a63ee:	4a44      	ldr	r2, [pc, #272]	; (80a6500 <lsm6dso_gyro_calibration+0x2c0>)
 80a63f0:	4944      	ldr	r1, [pc, #272]	; (80a6504 <lsm6dso_gyro_calibration+0x2c4>)
 80a63f2:	4618      	mov	r0, r3
 80a63f4:	f000 f9f2 	bl	80a67dc <ConvertCoordinate>

      //fill data to data array
      printf("%d, {%f, %f, %f}\r\n", gyro_info.cal_config.count,
 80a63f8:	6bbe      	ldr	r6, [r7, #56]	; 0x38
             gyroscope[0], gyroscope[1], gyroscope[2]);
 80a63fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
      printf("%d, {%f, %f, %f}\r\n", gyro_info.cal_config.count,
 80a63fc:	4618      	mov	r0, r3
 80a63fe:	f7fa f8a3 	bl	80a0548 <__aeabi_f2d>
 80a6402:	4680      	mov	r8, r0
 80a6404:	4689      	mov	r9, r1
             gyroscope[0], gyroscope[1], gyroscope[2]);
 80a6406:	6ebb      	ldr	r3, [r7, #104]	; 0x68
      printf("%d, {%f, %f, %f}\r\n", gyro_info.cal_config.count,
 80a6408:	4618      	mov	r0, r3
 80a640a:	f7fa f89d 	bl	80a0548 <__aeabi_f2d>
 80a640e:	4604      	mov	r4, r0
 80a6410:	460d      	mov	r5, r1
             gyroscope[0], gyroscope[1], gyroscope[2]);
 80a6412:	6efb      	ldr	r3, [r7, #108]	; 0x6c
      printf("%d, {%f, %f, %f}\r\n", gyro_info.cal_config.count,
 80a6414:	4618      	mov	r0, r3
 80a6416:	f7fa f897 	bl	80a0548 <__aeabi_f2d>
 80a641a:	4602      	mov	r2, r0
 80a641c:	460b      	mov	r3, r1
 80a641e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80a6422:	e9cd 4500 	strd	r4, r5, [sp]
 80a6426:	4642      	mov	r2, r8
 80a6428:	464b      	mov	r3, r9
 80a642a:	4631      	mov	r1, r6
 80a642c:	4833      	ldr	r0, [pc, #204]	; (80a64fc <lsm6dso_gyro_calibration+0x2bc>)
 80a642e:	f01a faa1 	bl	80c0974 <iprintf>
      if (gyro_info.cal_config.count > SKIP_COUNT_GYRO)
 80a6432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80a6434:	2b03      	cmp	r3, #3
 80a6436:	dd07      	ble.n	80a6448 <lsm6dso_gyro_calibration+0x208>
        cal_process_sample(&gyro_info, gyroscope);
 80a6438:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80a643c:	f107 030c 	add.w	r3, r7, #12
 80a6440:	4611      	mov	r1, r2
 80a6442:	4618      	mov	r0, r3
 80a6444:	f7ff f89c 	bl	80a5580 <cal_process_sample>
      gyro_info.cal_config.count++;
 80a6448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80a644a:	3301      	adds	r3, #1
 80a644c:	63bb      	str	r3, [r7, #56]	; 0x38

      lsm6dso_temp_flag_data_ready_get(ctx, &reg);
 80a644e:	f107 037b 	add.w	r3, r7, #123	; 0x7b
 80a6452:	4619      	mov	r1, r3
 80a6454:	6878      	ldr	r0, [r7, #4]
 80a6456:	f001 fb64 	bl	80a7b22 <lsm6dso_temp_flag_data_ready_get>
      if (reg) {
 80a645a:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80a645e:	2b00      	cmp	r3, #0
 80a6460:	d018      	beq.n	80a6494 <lsm6dso_gyro_calibration+0x254>
        /* Read temperature data */
        memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 80a6462:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80a6466:	2202      	movs	r2, #2
 80a6468:	2100      	movs	r1, #0
 80a646a:	4618      	mov	r0, r3
 80a646c:	f019 fda6 	bl	80bffbc <memset>
        lsm6dso_temperature_raw_get(ctx, data_raw_temperature.u8bit);
 80a6470:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80a6474:	4619      	mov	r1, r3
 80a6476:	6878      	ldr	r0, [r7, #4]
 80a6478:	f001 fb6c 	bl	80a7b54 <lsm6dso_temperature_raw_get>
        temperature_degC =
            lsm6dso_from_lsb_to_celsius(data_raw_temperature.i16bit);
 80a647c:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 80a6480:	4618      	mov	r0, r3
 80a6482:	f001 f885 	bl	80a7590 <lsm6dso_from_lsb_to_celsius>
 80a6486:	ed87 0a1f 	vstr	s0, [r7, #124]	; 0x7c
        pid_temp_control(&imu_pid_struct, temperature_degC);
 80a648a:	ed97 0a1f 	vldr	s0, [r7, #124]	; 0x7c
 80a648e:	4818      	ldr	r0, [pc, #96]	; (80a64f0 <lsm6dso_gyro_calibration+0x2b0>)
 80a6490:	f000 f890 	bl	80a65b4 <pid_temp_control>
      }
    }
    platform_delay(10);
 80a6494:	200a      	movs	r0, #10
 80a6496:	f000 f839 	bl	80a650c <platform_delay>
  } while ((gyro_info.cal_config.count < SKIP_COUNT * 2)
 80a649a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
           && (gyro_info.cal_state != CAL_STATE_SUCCESS));
 80a649c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80a64a0:	da03      	bge.n	80a64aa <lsm6dso_gyro_calibration+0x26a>
 80a64a2:	7e3b      	ldrb	r3, [r7, #24]
 80a64a4:	2b02      	cmp	r3, #2
 80a64a6:	f47f aefc 	bne.w	80a62a2 <lsm6dso_gyro_calibration+0x62>

  pid_pwm_control(PWM_DEACTIVATE, 0);
 80a64aa:	2100      	movs	r1, #0
 80a64ac:	2001      	movs	r0, #1
 80a64ae:	f000 f838 	bl	80a6522 <pid_pwm_control>

  if (gyro_info.cal_state == CAL_STATE_SUCCESS) {
 80a64b2:	7e3b      	ldrb	r3, [r7, #24]
 80a64b4:	2b02      	cmp	r3, #2
 80a64b6:	d10b      	bne.n	80a64d0 <lsm6dso_gyro_calibration+0x290>
    printf("gyro calibration successed!\r\n");
 80a64b8:	4813      	ldr	r0, [pc, #76]	; (80a6508 <lsm6dso_gyro_calibration+0x2c8>)
 80a64ba:	f01a faf7 	bl	80c0aac <puts>
    memcpy(offset, gyro_info.offset, sizeof(float) * 3);
 80a64be:	f107 030c 	add.w	r3, r7, #12
 80a64c2:	220c      	movs	r2, #12
 80a64c4:	4619      	mov	r1, r3
 80a64c6:	6838      	ldr	r0, [r7, #0]
 80a64c8:	f019 fd6a 	bl	80bffa0 <memcpy>
    return 0;
 80a64cc:	2300      	movs	r3, #0
 80a64ce:	e001      	b.n	80a64d4 <lsm6dso_gyro_calibration+0x294>
  }

  return -1;
 80a64d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80a64d4:	4618      	mov	r0, r3
 80a64d6:	3784      	adds	r7, #132	; 0x84
 80a64d8:	46bd      	mov	sp, r7
 80a64da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a64de:	bf00      	nop
 80a64e0:	60000000 	.word	0x60000000
 80a64e4:	400921fb 	.word	0x400921fb
 80a64e8:	41200000 	.word	0x41200000
 80a64ec:	42300000 	.word	0x42300000
 80a64f0:	2000803c 	.word	0x2000803c
 80a64f4:	447a0000 	.word	0x447a0000
 80a64f8:	40668000 	.word	0x40668000
 80a64fc:	080c5864 	.word	0x080c5864
 80a6500:	2001be00 	.word	0x2001be00
 80a6504:	2001bdfc 	.word	0x2001bdfc
 80a6508:	080c5894 	.word	0x080c5894

080a650c <platform_delay>:
 *
 * @param  ms        delay in ms
 *
 */
static void platform_delay(uint32_t ms)
{
 80a650c:	b580      	push	{r7, lr}
 80a650e:	b082      	sub	sp, #8
 80a6510:	af00      	add	r7, sp, #0
 80a6512:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 80a6514:	6878      	ldr	r0, [r7, #4]
 80a6516:	f009 f899 	bl	80af64c <HAL_Delay>
}
 80a651a:	bf00      	nop
 80a651c:	3708      	adds	r7, #8
 80a651e:	46bd      	mov	sp, r7
 80a6520:	bd80      	pop	{r7, pc}

080a6522 <pid_pwm_control>:
static bool gyro_data_report_in_uart_mode = false;

TIM_HandleTypeDef *tim1;        // XXX move and rename

void pid_pwm_control(uint8_t command, uint16_t data)
{
 80a6522:	b480      	push	{r7}
 80a6524:	b083      	sub	sp, #12
 80a6526:	af00      	add	r7, sp, #0
 80a6528:	4603      	mov	r3, r0
 80a652a:	460a      	mov	r2, r1
 80a652c:	71fb      	strb	r3, [r7, #7]
 80a652e:	4613      	mov	r3, r2
 80a6530:	80bb      	strh	r3, [r7, #4]
  return;
 80a6532:	bf00      	nop
    } else {
      //assert here
    }
    break;
  }
}
 80a6534:	370c      	adds	r7, #12
 80a6536:	46bd      	mov	sp, r7
 80a6538:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a653c:	4770      	bx	lr

080a653e <PID_Init>:

void PID_Init(PID * Pid, float SETtemp)
{
 80a653e:	b480      	push	{r7}
 80a6540:	b083      	sub	sp, #12
 80a6542:	af00      	add	r7, sp, #0
 80a6544:	6078      	str	r0, [r7, #4]
 80a6546:	ed87 0a00 	vstr	s0, [r7]
  Pid->Set_temperature = SETtemp;
 80a654a:	687b      	ldr	r3, [r7, #4]
 80a654c:	683a      	ldr	r2, [r7, #0]
 80a654e:	601a      	str	r2, [r3, #0]
  Pid->proportion = 0.5;
 80a6550:	687b      	ldr	r3, [r7, #4]
 80a6552:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80a6556:	609a      	str	r2, [r3, #8]
  Pid->integral = 4;
 80a6558:	687b      	ldr	r3, [r7, #4]
 80a655a:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 80a655e:	60da      	str	r2, [r3, #12]
  Pid->differential = 1.5;
 80a6560:	687b      	ldr	r3, [r7, #4]
 80a6562:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 80a6566:	611a      	str	r2, [r3, #16]
  Pid->T = 100;
 80a6568:	687b      	ldr	r3, [r7, #4]
 80a656a:	2264      	movs	r2, #100	; 0x64
 80a656c:	615a      	str	r2, [r3, #20]
  Pid->error_current = 0.0;
 80a656e:	687b      	ldr	r3, [r7, #4]
 80a6570:	f04f 0200 	mov.w	r2, #0
 80a6574:	619a      	str	r2, [r3, #24]
  Pid->error_last = 0;
 80a6576:	687b      	ldr	r3, [r7, #4]
 80a6578:	f04f 0200 	mov.w	r2, #0
 80a657c:	61da      	str	r2, [r3, #28]
  Pid->error_sum = 0;
 80a657e:	687b      	ldr	r3, [r7, #4]
 80a6580:	f04f 0200 	mov.w	r2, #0
 80a6584:	621a      	str	r2, [r3, #32]
  Pid->pid_proportion_out = 0;
 80a6586:	687b      	ldr	r3, [r7, #4]
 80a6588:	f04f 0200 	mov.w	r2, #0
 80a658c:	625a      	str	r2, [r3, #36]	; 0x24
  Pid->pid_integral_out = 0;
 80a658e:	687b      	ldr	r3, [r7, #4]
 80a6590:	f04f 0200 	mov.w	r2, #0
 80a6594:	629a      	str	r2, [r3, #40]	; 0x28
  Pid->pid_differential_out = 0;
 80a6596:	687b      	ldr	r3, [r7, #4]
 80a6598:	f04f 0200 	mov.w	r2, #0
 80a659c:	62da      	str	r2, [r3, #44]	; 0x2c
  Pid->pid_out = 0;
 80a659e:	687b      	ldr	r3, [r7, #4]
 80a65a0:	f04f 0200 	mov.w	r2, #0
 80a65a4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80a65a6:	bf00      	nop
 80a65a8:	370c      	adds	r7, #12
 80a65aa:	46bd      	mov	sp, r7
 80a65ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a65b0:	4770      	bx	lr
	...

080a65b4 <pid_temp_control>:

float pid_temp_control(PID * PP, float current_temp)
{
 80a65b4:	b580      	push	{r7, lr}
 80a65b6:	b088      	sub	sp, #32
 80a65b8:	af00      	add	r7, sp, #0
 80a65ba:	6078      	str	r0, [r7, #4]
 80a65bc:	ed87 0a00 	vstr	s0, [r7]
  static float PID_ZL = 0.0;
  float result = 0.0;
 80a65c0:	f04f 0300 	mov.w	r3, #0
 80a65c4:	61fb      	str	r3, [r7, #28]
  float A0, A1, A2;
  PP->error_current = PP->Set_temperature - current_temp;
 80a65c6:	687b      	ldr	r3, [r7, #4]
 80a65c8:	ed93 7a00 	vldr	s14, [r3]
 80a65cc:	edd7 7a00 	vldr	s15, [r7]
 80a65d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80a65d4:	687b      	ldr	r3, [r7, #4]
 80a65d6:	edc3 7a06 	vstr	s15, [r3, #24]
  //printf("error_c:%f, current_c: %f \r\n", PP->error_current, current_temp);

  if (PP->error_current >= PID_TEMP_THRES)
 80a65da:	687b      	ldr	r3, [r7, #4]
 80a65dc:	edd3 7a06 	vldr	s15, [r3, #24]
 80a65e0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80a65e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80a65e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80a65ec:	db04      	blt.n	80a65f8 <pid_temp_control+0x44>
    pid_pwm_control(PWM_CONFIG, 1);
 80a65ee:	2101      	movs	r1, #1
 80a65f0:	2002      	movs	r0, #2
 80a65f2:	f7ff ff96 	bl	80a6522 <pid_pwm_control>
 80a65f6:	e0b6      	b.n	80a6766 <pid_temp_control+0x1b2>
  else if (PP->error_current <= -PID_TEMP_THRES)
 80a65f8:	687b      	ldr	r3, [r7, #4]
 80a65fa:	edd3 7a06 	vldr	s15, [r3, #24]
 80a65fe:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80a6602:	eef4 7ac7 	vcmpe.f32	s15, s14
 80a6606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80a660a:	d805      	bhi.n	80a6618 <pid_temp_control+0x64>
    pid_pwm_control(PWM_CONFIG, 0xFFFF);
 80a660c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80a6610:	2002      	movs	r0, #2
 80a6612:	f7ff ff86 	bl	80a6522 <pid_pwm_control>
 80a6616:	e0a6      	b.n	80a6766 <pid_temp_control+0x1b2>
  else if (PP->error_current < PID_TEMP_THRES
 80a6618:	687b      	ldr	r3, [r7, #4]
 80a661a:	edd3 7a06 	vldr	s15, [r3, #24]
 80a661e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80a6622:	eef4 7ac7 	vcmpe.f32	s15, s14
 80a6626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80a662a:	f140 809c 	bpl.w	80a6766 <pid_temp_control+0x1b2>
           && PP->error_current > -PID_TEMP_THRES) {
 80a662e:	687b      	ldr	r3, [r7, #4]
 80a6630:	edd3 7a06 	vldr	s15, [r3, #24]
 80a6634:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80a6638:	eef4 7ac7 	vcmpe.f32	s15, s14
 80a663c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80a6640:	f340 8091 	ble.w	80a6766 <pid_temp_control+0x1b2>
    A0 = PP->proportion * (1 + PP->T / PP->integral + PP->differential / PP->T);
 80a6644:	687b      	ldr	r3, [r7, #4]
 80a6646:	ed93 7a02 	vldr	s14, [r3, #8]
 80a664a:	687b      	ldr	r3, [r7, #4]
 80a664c:	695b      	ldr	r3, [r3, #20]
 80a664e:	ee07 3a90 	vmov	s15, r3
 80a6652:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80a6656:	687b      	ldr	r3, [r7, #4]
 80a6658:	edd3 6a03 	vldr	s13, [r3, #12]
 80a665c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80a6660:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80a6664:	ee77 6aa6 	vadd.f32	s13, s15, s13
 80a6668:	687b      	ldr	r3, [r7, #4]
 80a666a:	edd3 5a04 	vldr	s11, [r3, #16]
 80a666e:	687b      	ldr	r3, [r7, #4]
 80a6670:	695b      	ldr	r3, [r3, #20]
 80a6672:	ee07 3a90 	vmov	s15, r3
 80a6676:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80a667a:	eec5 7a86 	vdiv.f32	s15, s11, s12
 80a667e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80a6682:	ee67 7a27 	vmul.f32	s15, s14, s15
 80a6686:	edc7 7a06 	vstr	s15, [r7, #24]
    A1 = -PP->proportion * (1 + 2 * PP->differential / PP->T);
 80a668a:	687b      	ldr	r3, [r7, #4]
 80a668c:	edd3 7a02 	vldr	s15, [r3, #8]
 80a6690:	eeb1 7a67 	vneg.f32	s14, s15
 80a6694:	687b      	ldr	r3, [r7, #4]
 80a6696:	edd3 7a04 	vldr	s15, [r3, #16]
 80a669a:	ee37 6aa7 	vadd.f32	s12, s15, s15
 80a669e:	687b      	ldr	r3, [r7, #4]
 80a66a0:	695b      	ldr	r3, [r3, #20]
 80a66a2:	ee07 3a90 	vmov	s15, r3
 80a66a6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80a66aa:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80a66ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80a66b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80a66b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80a66ba:	edc7 7a05 	vstr	s15, [r7, #20]
    A2 = PP->proportion * (PP->differential / PP->T);
 80a66be:	687b      	ldr	r3, [r7, #4]
 80a66c0:	ed93 7a02 	vldr	s14, [r3, #8]
 80a66c4:	687b      	ldr	r3, [r7, #4]
 80a66c6:	ed93 6a04 	vldr	s12, [r3, #16]
 80a66ca:	687b      	ldr	r3, [r7, #4]
 80a66cc:	695b      	ldr	r3, [r3, #20]
 80a66ce:	ee07 3a90 	vmov	s15, r3
 80a66d2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80a66d6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80a66da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80a66de:	edc7 7a04 	vstr	s15, [r7, #16]
    result = A0 * PP->error_current + A1 * PP->error_last + A2 * PP->error_sum;
 80a66e2:	687b      	ldr	r3, [r7, #4]
 80a66e4:	ed93 7a06 	vldr	s14, [r3, #24]
 80a66e8:	edd7 7a06 	vldr	s15, [r7, #24]
 80a66ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80a66f0:	687b      	ldr	r3, [r7, #4]
 80a66f2:	edd3 6a07 	vldr	s13, [r3, #28]
 80a66f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80a66fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80a66fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 80a6702:	687b      	ldr	r3, [r7, #4]
 80a6704:	edd3 6a08 	vldr	s13, [r3, #32]
 80a6708:	edd7 7a04 	vldr	s15, [r7, #16]
 80a670c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80a6710:	ee77 7a27 	vadd.f32	s15, s14, s15
 80a6714:	edc7 7a07 	vstr	s15, [r7, #28]
    result += PID_ZL;
 80a6718:	4b1c      	ldr	r3, [pc, #112]	; (80a678c <pid_temp_control+0x1d8>)
 80a671a:	edd3 7a00 	vldr	s15, [r3]
 80a671e:	ed97 7a07 	vldr	s14, [r7, #28]
 80a6722:	ee77 7a27 	vadd.f32	s15, s14, s15
 80a6726:	edc7 7a07 	vstr	s15, [r7, #28]
    float pid_control_data = 0;
 80a672a:	f04f 0300 	mov.w	r3, #0
 80a672e:	60fb      	str	r3, [r7, #12]
    pid_control_data =
        (PID_RESULT_MAX - result) / (PID_RESULT_MAX -
 80a6730:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80a6790 <pid_temp_control+0x1dc>
 80a6734:	edd7 7a07 	vldr	s15, [r7, #28]
 80a6738:	ee37 7a67 	vsub.f32	s14, s14, s15
 80a673c:	eddf 6a15 	vldr	s13, [pc, #84]	; 80a6794 <pid_temp_control+0x1e0>
 80a6740:	eec7 7a26 	vdiv.f32	s15, s14, s13
    pid_control_data =
 80a6744:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80a6798 <pid_temp_control+0x1e4>
 80a6748:	ee67 7a87 	vmul.f32	s15, s15, s14
 80a674c:	edc7 7a03 	vstr	s15, [r7, #12]
                                     PID_RESULT_MIN) * 65535.0f;
    //printf("A0 = %f \r\n", A0);
    //printf("A1 = %f \r\n", A1);
    //printf("A2 = %f \r\n", A2);
    //printf("control: %f \r\n", pid_control_data);
    pid_pwm_control(PWM_CONFIG, (uint16_t) pid_control_data);
 80a6750:	edd7 7a03 	vldr	s15, [r7, #12]
 80a6754:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80a6758:	ee17 3a90 	vmov	r3, s15
 80a675c:	b29b      	uxth	r3, r3
 80a675e:	4619      	mov	r1, r3
 80a6760:	2002      	movs	r0, #2
 80a6762:	f7ff fede 	bl	80a6522 <pid_pwm_control>
  }

  PID_ZL = result;
 80a6766:	4a09      	ldr	r2, [pc, #36]	; (80a678c <pid_temp_control+0x1d8>)
 80a6768:	69fb      	ldr	r3, [r7, #28]
 80a676a:	6013      	str	r3, [r2, #0]
  //printf("PID_ZL: %f\r\n", PID_ZL);

  PP->error_sum = PP->error_last;
 80a676c:	687b      	ldr	r3, [r7, #4]
 80a676e:	69da      	ldr	r2, [r3, #28]
 80a6770:	687b      	ldr	r3, [r7, #4]
 80a6772:	621a      	str	r2, [r3, #32]
  PP->error_last = PP->error_current;
 80a6774:	687b      	ldr	r3, [r7, #4]
 80a6776:	699a      	ldr	r2, [r3, #24]
 80a6778:	687b      	ldr	r3, [r7, #4]
 80a677a:	61da      	str	r2, [r3, #28]
  return result;
 80a677c:	69fb      	ldr	r3, [r7, #28]
 80a677e:	ee07 3a90 	vmov	s15, r3
}
 80a6782:	eeb0 0a67 	vmov.f32	s0, s15
 80a6786:	3720      	adds	r7, #32
 80a6788:	46bd      	mov	sp, r7
 80a678a:	bd80      	pop	{r7, pc}
 80a678c:	20008088 	.word	0x20008088
 80a6790:	43c80000 	.word	0x43c80000
 80a6794:	44898000 	.word	0x44898000
 80a6798:	477fff00 	.word	0x477fff00

080a679c <lsm6dso_delay_us>:
 * \brief Busy wait delay for us microseconds
 *
 * \note
 */
void lsm6dso_delay_us(uint32_t us)
{
 80a679c:	b580      	push	{r7, lr}
 80a679e:	b084      	sub	sp, #16
 80a67a0:	af00      	add	r7, sp, #0
 80a67a2:	6078      	str	r0, [r7, #4]
  uint32_t cycles_per_us = HAL_RCC_GetSysClockFreq() / 10000000;
 80a67a4:	f00c ff34 	bl	80b3610 <HAL_RCC_GetSysClockFreq>
 80a67a8:	4603      	mov	r3, r0
 80a67aa:	4a0b      	ldr	r2, [pc, #44]	; (80a67d8 <lsm6dso_delay_us+0x3c>)
 80a67ac:	fba2 2303 	umull	r2, r3, r2, r3
 80a67b0:	0d9b      	lsrs	r3, r3, #22
 80a67b2:	60fb      	str	r3, [r7, #12]
  volatile uint32_t i;

  for (i = 0; i < (us * cycles_per_us); i++) {
 80a67b4:	2300      	movs	r3, #0
 80a67b6:	60bb      	str	r3, [r7, #8]
 80a67b8:	e002      	b.n	80a67c0 <lsm6dso_delay_us+0x24>
 80a67ba:	68bb      	ldr	r3, [r7, #8]
 80a67bc:	3301      	adds	r3, #1
 80a67be:	60bb      	str	r3, [r7, #8]
 80a67c0:	687b      	ldr	r3, [r7, #4]
 80a67c2:	68fa      	ldr	r2, [r7, #12]
 80a67c4:	fb02 f203 	mul.w	r2, r2, r3
 80a67c8:	68bb      	ldr	r3, [r7, #8]
 80a67ca:	429a      	cmp	r2, r3
 80a67cc:	d8f5      	bhi.n	80a67ba <lsm6dso_delay_us+0x1e>
    ;
  }
}
 80a67ce:	bf00      	nop
 80a67d0:	bf00      	nop
 80a67d2:	3710      	adds	r7, #16
 80a67d4:	46bd      	mov	sp, r7
 80a67d6:	bd80      	pop	{r7, pc}
 80a67d8:	6b5fca6b 	.word	0x6b5fca6b

080a67dc <ConvertCoordinate>:

void ConvertCoordinate(float vec[3], const uint8_t axis_order[3],
                       const uint8_t axis_sign[3])
{
 80a67dc:	b480      	push	{r7}
 80a67de:	b089      	sub	sp, #36	; 0x24
 80a67e0:	af00      	add	r7, sp, #0
 80a67e2:	60f8      	str	r0, [r7, #12]
 80a67e4:	60b9      	str	r1, [r7, #8]
 80a67e6:	607a      	str	r2, [r7, #4]
  float val32[3];
  uint8_t i;

  /* Axis conversion */
  for (i = 0; i < 3; i++) {
 80a67e8:	2300      	movs	r3, #0
 80a67ea:	77fb      	strb	r3, [r7, #31]
 80a67ec:	e029      	b.n	80a6842 <ConvertCoordinate+0x66>
    val32[i] = vec[axis_order[i]];
 80a67ee:	7ffb      	ldrb	r3, [r7, #31]
 80a67f0:	68ba      	ldr	r2, [r7, #8]
 80a67f2:	4413      	add	r3, r2
 80a67f4:	781b      	ldrb	r3, [r3, #0]
 80a67f6:	009b      	lsls	r3, r3, #2
 80a67f8:	68fa      	ldr	r2, [r7, #12]
 80a67fa:	441a      	add	r2, r3
 80a67fc:	7ffb      	ldrb	r3, [r7, #31]
 80a67fe:	6812      	ldr	r2, [r2, #0]
 80a6800:	009b      	lsls	r3, r3, #2
 80a6802:	f107 0120 	add.w	r1, r7, #32
 80a6806:	440b      	add	r3, r1
 80a6808:	3b10      	subs	r3, #16
 80a680a:	601a      	str	r2, [r3, #0]

    if (axis_sign[i]) {
 80a680c:	7ffb      	ldrb	r3, [r7, #31]
 80a680e:	687a      	ldr	r2, [r7, #4]
 80a6810:	4413      	add	r3, r2
 80a6812:	781b      	ldrb	r3, [r3, #0]
 80a6814:	2b00      	cmp	r3, #0
 80a6816:	d011      	beq.n	80a683c <ConvertCoordinate+0x60>
      val32[i] *= -1;
 80a6818:	7ffb      	ldrb	r3, [r7, #31]
 80a681a:	009b      	lsls	r3, r3, #2
 80a681c:	f107 0220 	add.w	r2, r7, #32
 80a6820:	4413      	add	r3, r2
 80a6822:	3b10      	subs	r3, #16
 80a6824:	edd3 7a00 	vldr	s15, [r3]
 80a6828:	7ffb      	ldrb	r3, [r7, #31]
 80a682a:	eef1 7a67 	vneg.f32	s15, s15
 80a682e:	009b      	lsls	r3, r3, #2
 80a6830:	f107 0220 	add.w	r2, r7, #32
 80a6834:	4413      	add	r3, r2
 80a6836:	3b10      	subs	r3, #16
 80a6838:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 3; i++) {
 80a683c:	7ffb      	ldrb	r3, [r7, #31]
 80a683e:	3301      	adds	r3, #1
 80a6840:	77fb      	strb	r3, [r7, #31]
 80a6842:	7ffb      	ldrb	r3, [r7, #31]
 80a6844:	2b02      	cmp	r3, #2
 80a6846:	d9d2      	bls.n	80a67ee <ConvertCoordinate+0x12>
    }
  }

  /* Copy to argument */
  for (i = 0; i < 3; i++) {
 80a6848:	2300      	movs	r3, #0
 80a684a:	77fb      	strb	r3, [r7, #31]
 80a684c:	e00e      	b.n	80a686c <ConvertCoordinate+0x90>
    vec[i] = val32[i];
 80a684e:	7ffa      	ldrb	r2, [r7, #31]
 80a6850:	7ffb      	ldrb	r3, [r7, #31]
 80a6852:	009b      	lsls	r3, r3, #2
 80a6854:	68f9      	ldr	r1, [r7, #12]
 80a6856:	440b      	add	r3, r1
 80a6858:	0092      	lsls	r2, r2, #2
 80a685a:	f107 0120 	add.w	r1, r7, #32
 80a685e:	440a      	add	r2, r1
 80a6860:	3a10      	subs	r2, #16
 80a6862:	6812      	ldr	r2, [r2, #0]
 80a6864:	601a      	str	r2, [r3, #0]
  for (i = 0; i < 3; i++) {
 80a6866:	7ffb      	ldrb	r3, [r7, #31]
 80a6868:	3301      	adds	r3, #1
 80a686a:	77fb      	strb	r3, [r7, #31]
 80a686c:	7ffb      	ldrb	r3, [r7, #31]
 80a686e:	2b02      	cmp	r3, #2
 80a6870:	d9ed      	bls.n	80a684e <ConvertCoordinate+0x72>
  }
}
 80a6872:	bf00      	nop
 80a6874:	bf00      	nop
 80a6876:	3724      	adds	r7, #36	; 0x24
 80a6878:	46bd      	mov	sp, r7
 80a687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a687e:	4770      	bx	lr

080a6880 <lsm6dso_publish_sensor_data>:

/* Main Example --------------------------------------------------------------*/
int lsm6dso_publish_sensor_data(void *para)
{
 80a6880:	b5b0      	push	{r4, r5, r7, lr}
 80a6882:	b0a2      	sub	sp, #136	; 0x88
 80a6884:	af00      	add	r7, sp, #0
 80a6886:	6078      	str	r0, [r7, #4]
  /* Read samples in polling mode (no int) */
  sensors_event_t sensor_data = { 0 };
 80a6888:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80a688c:	2250      	movs	r2, #80	; 0x50
 80a688e:	2100      	movs	r1, #0
 80a6890:	4618      	mov	r0, r3
 80a6892:	f019 fb93 	bl	80bffbc <memset>
  lsm6dso_status_reg_t reg;

  lsm6dso_status_reg_get(&dev_ctx, &reg);
 80a6896:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80a689a:	4619      	mov	r1, r3
 80a689c:	48ce      	ldr	r0, [pc, #824]	; (80a6bd8 <lsm6dso_publish_sensor_data+0x358>)
 80a689e:	f001 f8fd 	bl	80a7a9c <lsm6dso_status_reg_get>

  if (reg.xlda) {
 80a68a2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80a68a6:	f003 0301 	and.w	r3, r3, #1
 80a68aa:	b2db      	uxtb	r3, r3
 80a68ac:	2b00      	cmp	r3, #0
 80a68ae:	f000 808b 	beq.w	80a69c8 <lsm6dso_publish_sensor_data+0x148>
    /* Read acceleration field data */
    memset(data_raw_acceleration.u8bit, 0x00, 3 * sizeof(int16_t));
 80a68b2:	2206      	movs	r2, #6
 80a68b4:	2100      	movs	r1, #0
 80a68b6:	48c9      	ldr	r0, [pc, #804]	; (80a6bdc <lsm6dso_publish_sensor_data+0x35c>)
 80a68b8:	f019 fb80 	bl	80bffbc <memset>
    lsm6dso_acceleration_raw_get(&dev_ctx, data_raw_acceleration.u8bit);
 80a68bc:	49c7      	ldr	r1, [pc, #796]	; (80a6bdc <lsm6dso_publish_sensor_data+0x35c>)
 80a68be:	48c6      	ldr	r0, [pc, #792]	; (80a6bd8 <lsm6dso_publish_sensor_data+0x358>)
 80a68c0:	f001 f96a 	bl	80a7b98 <lsm6dso_acceleration_raw_get>
    acceleration_mg[0] =
        lsm6dso_from_fs8_to_mg(data_raw_acceleration.i16bit[0]);
 80a68c4:	4bc5      	ldr	r3, [pc, #788]	; (80a6bdc <lsm6dso_publish_sensor_data+0x35c>)
 80a68c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80a68ca:	4618      	mov	r0, r3
 80a68cc:	f000 fe18 	bl	80a7500 <lsm6dso_from_fs8_to_mg>
 80a68d0:	eef0 7a40 	vmov.f32	s15, s0
    acceleration_mg[0] =
 80a68d4:	4bc2      	ldr	r3, [pc, #776]	; (80a6be0 <lsm6dso_publish_sensor_data+0x360>)
 80a68d6:	edc3 7a00 	vstr	s15, [r3]
    acceleration_mg[1] =
        lsm6dso_from_fs8_to_mg(data_raw_acceleration.i16bit[1]);
 80a68da:	4bc0      	ldr	r3, [pc, #768]	; (80a6bdc <lsm6dso_publish_sensor_data+0x35c>)
 80a68dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80a68e0:	4618      	mov	r0, r3
 80a68e2:	f000 fe0d 	bl	80a7500 <lsm6dso_from_fs8_to_mg>
 80a68e6:	eef0 7a40 	vmov.f32	s15, s0
    acceleration_mg[1] =
 80a68ea:	4bbd      	ldr	r3, [pc, #756]	; (80a6be0 <lsm6dso_publish_sensor_data+0x360>)
 80a68ec:	edc3 7a01 	vstr	s15, [r3, #4]
    acceleration_mg[2] =
        lsm6dso_from_fs8_to_mg(data_raw_acceleration.i16bit[2]);
 80a68f0:	4bba      	ldr	r3, [pc, #744]	; (80a6bdc <lsm6dso_publish_sensor_data+0x35c>)
 80a68f2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80a68f6:	4618      	mov	r0, r3
 80a68f8:	f000 fe02 	bl	80a7500 <lsm6dso_from_fs8_to_mg>
 80a68fc:	eef0 7a40 	vmov.f32	s15, s0
    acceleration_mg[2] =
 80a6900:	4bb7      	ldr	r3, [pc, #732]	; (80a6be0 <lsm6dso_publish_sensor_data+0x360>)
 80a6902:	edc3 7a02 	vstr	s15, [r3, #8]

    if (acc_gyro_init_parms->use_uart_mode == 1) {
 80a6906:	4bb7      	ldr	r3, [pc, #732]	; (80a6be4 <lsm6dso_publish_sensor_data+0x364>)
 80a6908:	681b      	ldr	r3, [r3, #0]
 80a690a:	f893 3198 	ldrb.w	r3, [r3, #408]	; 0x198
 80a690e:	2b01      	cmp	r3, #1
 80a6910:	d102      	bne.n	80a6918 <lsm6dso_publish_sensor_data+0x98>
      //set a flag to report acc data
      acc_data_report_in_uart_mode = true;
 80a6912:	4bb5      	ldr	r3, [pc, #724]	; (80a6be8 <lsm6dso_publish_sensor_data+0x368>)
 80a6914:	2201      	movs	r2, #1
 80a6916:	701a      	strb	r2, [r3, #0]
    }
    //apply axis transfer first
    ConvertCoordinate(acceleration_mg, g_imu_axis_order, g_imu_axis_sign);
 80a6918:	4ab4      	ldr	r2, [pc, #720]	; (80a6bec <lsm6dso_publish_sensor_data+0x36c>)
 80a691a:	49b5      	ldr	r1, [pc, #724]	; (80a6bf0 <lsm6dso_publish_sensor_data+0x370>)
 80a691c:	48b0      	ldr	r0, [pc, #704]	; (80a6be0 <lsm6dso_publish_sensor_data+0x360>)
 80a691e:	f7ff ff5d 	bl	80a67dc <ConvertCoordinate>

    if (acc_activated) {
 80a6922:	4bb4      	ldr	r3, [pc, #720]	; (80a6bf4 <lsm6dso_publish_sensor_data+0x374>)
 80a6924:	781b      	ldrb	r3, [r3, #0]
 80a6926:	2b00      	cmp	r3, #0
 80a6928:	d04e      	beq.n	80a69c8 <lsm6dso_publish_sensor_data+0x148>
      //send related messages to SensorDataQ
      sensor_data.sensor_type = SENSOR_TYPE_ACCELEROMETER;
 80a692a:	2300      	movs	r3, #0
 80a692c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
      sensor_data.accuracy = 3;
 80a6930:	2303      	movs	r3, #3
 80a6932:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
      sensor_data.timestamp = sensor_get_timestamp();
 80a6936:	f006 fee7 	bl	80ad708 <sensor_get_timestamp>
 80a693a:	4602      	mov	r2, r0
 80a693c:	460b      	mov	r3, r1
 80a693e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      sensor_data.sensor_data_t.vec.data[0] = acceleration_mg[0]
 80a6942:	4ba7      	ldr	r3, [pc, #668]	; (80a6be0 <lsm6dso_publish_sensor_data+0x360>)
 80a6944:	edd3 7a00 	vldr	s15, [r3]
          * GRAVITY_EARTH / 1000.0f - acceleration_offset[0];
 80a6948:	ed9f 7aab 	vldr	s14, [pc, #684]	; 80a6bf8 <lsm6dso_publish_sensor_data+0x378>
 80a694c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80a6950:	eddf 6aaa 	vldr	s13, [pc, #680]	; 80a6bfc <lsm6dso_publish_sensor_data+0x37c>
 80a6954:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80a6958:	4ba9      	ldr	r3, [pc, #676]	; (80a6c00 <lsm6dso_publish_sensor_data+0x380>)
 80a695a:	edd3 7a00 	vldr	s15, [r3]
 80a695e:	ee77 7a67 	vsub.f32	s15, s14, s15
      sensor_data.sensor_data_t.vec.data[0] = acceleration_mg[0]
 80a6962:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      sensor_data.sensor_data_t.vec.data[1] = acceleration_mg[1]
 80a6966:	4b9e      	ldr	r3, [pc, #632]	; (80a6be0 <lsm6dso_publish_sensor_data+0x360>)
 80a6968:	edd3 7a01 	vldr	s15, [r3, #4]
          * GRAVITY_EARTH / 1000.0f - acceleration_offset[1];
 80a696c:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 80a6bf8 <lsm6dso_publish_sensor_data+0x378>
 80a6970:	ee67 7a87 	vmul.f32	s15, s15, s14
 80a6974:	eddf 6aa1 	vldr	s13, [pc, #644]	; 80a6bfc <lsm6dso_publish_sensor_data+0x37c>
 80a6978:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80a697c:	4ba0      	ldr	r3, [pc, #640]	; (80a6c00 <lsm6dso_publish_sensor_data+0x380>)
 80a697e:	edd3 7a01 	vldr	s15, [r3, #4]
 80a6982:	ee77 7a67 	vsub.f32	s15, s14, s15
      sensor_data.sensor_data_t.vec.data[1] = acceleration_mg[1]
 80a6986:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
      sensor_data.sensor_data_t.vec.data[2] = acceleration_mg[2]
 80a698a:	4b95      	ldr	r3, [pc, #596]	; (80a6be0 <lsm6dso_publish_sensor_data+0x360>)
 80a698c:	edd3 7a02 	vldr	s15, [r3, #8]
          * GRAVITY_EARTH / 1000.0f - acceleration_offset[2];
 80a6990:	ed9f 7a99 	vldr	s14, [pc, #612]	; 80a6bf8 <lsm6dso_publish_sensor_data+0x378>
 80a6994:	ee67 7a87 	vmul.f32	s15, s15, s14
 80a6998:	eddf 6a98 	vldr	s13, [pc, #608]	; 80a6bfc <lsm6dso_publish_sensor_data+0x37c>
 80a699c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80a69a0:	4b97      	ldr	r3, [pc, #604]	; (80a6c00 <lsm6dso_publish_sensor_data+0x380>)
 80a69a2:	edd3 7a02 	vldr	s15, [r3, #8]
 80a69a6:	ee77 7a67 	vsub.f32	s15, s14, s15
      sensor_data.sensor_data_t.vec.data[2] = acceleration_mg[2]
 80a69aa:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
      sensor_data.sensor_data_t.vec.data[3] = temperature_degC;
 80a69ae:	4b95      	ldr	r3, [pc, #596]	; (80a6c04 <lsm6dso_publish_sensor_data+0x384>)
 80a69b0:	681b      	ldr	r3, [r3, #0]
 80a69b2:	657b      	str	r3, [r7, #84]	; 0x54
      osMessageQueuePut(acc_gyro_init_parms->SensorDataQHandle,
 80a69b4:	4b8b      	ldr	r3, [pc, #556]	; (80a6be4 <lsm6dso_publish_sensor_data+0x364>)
 80a69b6:	681b      	ldr	r3, [r3, #0]
 80a69b8:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 80a69bc:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80a69c0:	2300      	movs	r3, #0
 80a69c2:	2200      	movs	r2, #0
 80a69c4:	f00f fd1e 	bl	80b6404 <osMessageQueuePut>
                        &sensor_data, 0, 0);
    }
  }

  if (reg.gda) {
 80a69c8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80a69cc:	f003 0302 	and.w	r3, r3, #2
 80a69d0:	b2db      	uxtb	r3, r3
 80a69d2:	2b00      	cmp	r3, #0
 80a69d4:	f000 80e6 	beq.w	80a6ba4 <lsm6dso_publish_sensor_data+0x324>
    /* Read angular rate field data */
    memset(data_raw_angular_rate.u8bit, 0x00, 3 * sizeof(int16_t));
 80a69d8:	2206      	movs	r2, #6
 80a69da:	2100      	movs	r1, #0
 80a69dc:	488a      	ldr	r0, [pc, #552]	; (80a6c08 <lsm6dso_publish_sensor_data+0x388>)
 80a69de:	f019 faed 	bl	80bffbc <memset>
    lsm6dso_angular_rate_raw_get(&dev_ctx, data_raw_angular_rate.u8bit);
 80a69e2:	4989      	ldr	r1, [pc, #548]	; (80a6c08 <lsm6dso_publish_sensor_data+0x388>)
 80a69e4:	487c      	ldr	r0, [pc, #496]	; (80a6bd8 <lsm6dso_publish_sensor_data+0x358>)
 80a69e6:	f001 f8c6 	bl	80a7b76 <lsm6dso_angular_rate_raw_get>
    angular_rate_mdps[0] =
        lsm6dso_from_fs1000_to_mdps(data_raw_angular_rate.i16bit[0]);
 80a69ea:	4b87      	ldr	r3, [pc, #540]	; (80a6c08 <lsm6dso_publish_sensor_data+0x388>)
 80a69ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80a69f0:	4618      	mov	r0, r3
 80a69f2:	f000 fd9d 	bl	80a7530 <lsm6dso_from_fs1000_to_mdps>
 80a69f6:	eef0 7a40 	vmov.f32	s15, s0
    angular_rate_mdps[0] =
 80a69fa:	4b84      	ldr	r3, [pc, #528]	; (80a6c0c <lsm6dso_publish_sensor_data+0x38c>)
 80a69fc:	edc3 7a00 	vstr	s15, [r3]
    angular_rate_mdps[1] =
        lsm6dso_from_fs1000_to_mdps(data_raw_angular_rate.i16bit[1]);
 80a6a00:	4b81      	ldr	r3, [pc, #516]	; (80a6c08 <lsm6dso_publish_sensor_data+0x388>)
 80a6a02:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80a6a06:	4618      	mov	r0, r3
 80a6a08:	f000 fd92 	bl	80a7530 <lsm6dso_from_fs1000_to_mdps>
 80a6a0c:	eef0 7a40 	vmov.f32	s15, s0
    angular_rate_mdps[1] =
 80a6a10:	4b7e      	ldr	r3, [pc, #504]	; (80a6c0c <lsm6dso_publish_sensor_data+0x38c>)
 80a6a12:	edc3 7a01 	vstr	s15, [r3, #4]
    angular_rate_mdps[2] =
        lsm6dso_from_fs1000_to_mdps(data_raw_angular_rate.i16bit[2]);
 80a6a16:	4b7c      	ldr	r3, [pc, #496]	; (80a6c08 <lsm6dso_publish_sensor_data+0x388>)
 80a6a18:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80a6a1c:	4618      	mov	r0, r3
 80a6a1e:	f000 fd87 	bl	80a7530 <lsm6dso_from_fs1000_to_mdps>
 80a6a22:	eef0 7a40 	vmov.f32	s15, s0
    angular_rate_mdps[2] =
 80a6a26:	4b79      	ldr	r3, [pc, #484]	; (80a6c0c <lsm6dso_publish_sensor_data+0x38c>)
 80a6a28:	edc3 7a02 	vstr	s15, [r3, #8]

    if (acc_gyro_init_parms->use_uart_mode) {
 80a6a2c:	4b6d      	ldr	r3, [pc, #436]	; (80a6be4 <lsm6dso_publish_sensor_data+0x364>)
 80a6a2e:	681b      	ldr	r3, [r3, #0]
 80a6a30:	f893 3198 	ldrb.w	r3, [r3, #408]	; 0x198
 80a6a34:	2b00      	cmp	r3, #0
 80a6a36:	d002      	beq.n	80a6a3e <lsm6dso_publish_sensor_data+0x1be>
      //set a flag to report gyro data
      gyro_data_report_in_uart_mode = true;
 80a6a38:	4b75      	ldr	r3, [pc, #468]	; (80a6c10 <lsm6dso_publish_sensor_data+0x390>)
 80a6a3a:	2201      	movs	r2, #1
 80a6a3c:	701a      	strb	r2, [r3, #0]
    }
    //apply axis transfer first
    ConvertCoordinate(angular_rate_mdps, g_imu_axis_order, g_imu_axis_sign);
 80a6a3e:	4a6b      	ldr	r2, [pc, #428]	; (80a6bec <lsm6dso_publish_sensor_data+0x36c>)
 80a6a40:	496b      	ldr	r1, [pc, #428]	; (80a6bf0 <lsm6dso_publish_sensor_data+0x370>)
 80a6a42:	4872      	ldr	r0, [pc, #456]	; (80a6c0c <lsm6dso_publish_sensor_data+0x38c>)
 80a6a44:	f7ff feca 	bl	80a67dc <ConvertCoordinate>

    if (gyro_activated) {
 80a6a48:	4b72      	ldr	r3, [pc, #456]	; (80a6c14 <lsm6dso_publish_sensor_data+0x394>)
 80a6a4a:	781b      	ldrb	r3, [r3, #0]
 80a6a4c:	2b00      	cmp	r3, #0
 80a6a4e:	f000 80a9 	beq.w	80a6ba4 <lsm6dso_publish_sensor_data+0x324>
      //send related messages to SensorDataQ
      sensor_data.sensor_type = SENSOR_TYPE_GYROSCOPE;
 80a6a52:	2302      	movs	r3, #2
 80a6a54:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
      sensor_data.accuracy = 3;
 80a6a58:	2303      	movs	r3, #3
 80a6a5a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
      sensor_data.timestamp = sensor_get_timestamp();
 80a6a5e:	f006 fe53 	bl	80ad708 <sensor_get_timestamp>
 80a6a62:	4602      	mov	r2, r0
 80a6a64:	460b      	mov	r3, r1
 80a6a66:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      sensor_data.sensor_data_t.vec.data[0] = angular_rate_mdps[0]
 80a6a6a:	4b68      	ldr	r3, [pc, #416]	; (80a6c0c <lsm6dso_publish_sensor_data+0x38c>)
 80a6a6c:	edd3 7a00 	vldr	s15, [r3]
          / 1000.0f * DPS2RPS - angular_rate_offset[0];
 80a6a70:	ed9f 7a62 	vldr	s14, [pc, #392]	; 80a6bfc <lsm6dso_publish_sensor_data+0x37c>
 80a6a74:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80a6a78:	ee16 0a90 	vmov	r0, s13
 80a6a7c:	f7f9 fd64 	bl	80a0548 <__aeabi_f2d>
 80a6a80:	f04f 0200 	mov.w	r2, #0
 80a6a84:	4b64      	ldr	r3, [pc, #400]	; (80a6c18 <lsm6dso_publish_sensor_data+0x398>)
 80a6a86:	f7f9 fee1 	bl	80a084c <__aeabi_ddiv>
 80a6a8a:	4602      	mov	r2, r0
 80a6a8c:	460b      	mov	r3, r1
 80a6a8e:	4610      	mov	r0, r2
 80a6a90:	4619      	mov	r1, r3
 80a6a92:	a34f      	add	r3, pc, #316	; (adr r3, 80a6bd0 <lsm6dso_publish_sensor_data+0x350>)
 80a6a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6a98:	f7f9 fdae 	bl	80a05f8 <__aeabi_dmul>
 80a6a9c:	4602      	mov	r2, r0
 80a6a9e:	460b      	mov	r3, r1
 80a6aa0:	4614      	mov	r4, r2
 80a6aa2:	461d      	mov	r5, r3
 80a6aa4:	4b5d      	ldr	r3, [pc, #372]	; (80a6c1c <lsm6dso_publish_sensor_data+0x39c>)
 80a6aa6:	681b      	ldr	r3, [r3, #0]
 80a6aa8:	4618      	mov	r0, r3
 80a6aaa:	f7f9 fd4d 	bl	80a0548 <__aeabi_f2d>
 80a6aae:	4602      	mov	r2, r0
 80a6ab0:	460b      	mov	r3, r1
 80a6ab2:	4620      	mov	r0, r4
 80a6ab4:	4629      	mov	r1, r5
 80a6ab6:	f7f9 fbe7 	bl	80a0288 <__aeabi_dsub>
 80a6aba:	4602      	mov	r2, r0
 80a6abc:	460b      	mov	r3, r1
 80a6abe:	4610      	mov	r0, r2
 80a6ac0:	4619      	mov	r1, r3
 80a6ac2:	f7fa f891 	bl	80a0be8 <__aeabi_d2f>
 80a6ac6:	4603      	mov	r3, r0
      sensor_data.sensor_data_t.vec.data[0] = angular_rate_mdps[0]
 80a6ac8:	64bb      	str	r3, [r7, #72]	; 0x48
      sensor_data.sensor_data_t.vec.data[1] = angular_rate_mdps[1]
 80a6aca:	4b50      	ldr	r3, [pc, #320]	; (80a6c0c <lsm6dso_publish_sensor_data+0x38c>)
 80a6acc:	edd3 7a01 	vldr	s15, [r3, #4]
          / 1000.0f * DPS2RPS - angular_rate_offset[1];
 80a6ad0:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80a6bfc <lsm6dso_publish_sensor_data+0x37c>
 80a6ad4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80a6ad8:	ee16 0a90 	vmov	r0, s13
 80a6adc:	f7f9 fd34 	bl	80a0548 <__aeabi_f2d>
 80a6ae0:	f04f 0200 	mov.w	r2, #0
 80a6ae4:	4b4c      	ldr	r3, [pc, #304]	; (80a6c18 <lsm6dso_publish_sensor_data+0x398>)
 80a6ae6:	f7f9 feb1 	bl	80a084c <__aeabi_ddiv>
 80a6aea:	4602      	mov	r2, r0
 80a6aec:	460b      	mov	r3, r1
 80a6aee:	4610      	mov	r0, r2
 80a6af0:	4619      	mov	r1, r3
 80a6af2:	a337      	add	r3, pc, #220	; (adr r3, 80a6bd0 <lsm6dso_publish_sensor_data+0x350>)
 80a6af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6af8:	f7f9 fd7e 	bl	80a05f8 <__aeabi_dmul>
 80a6afc:	4602      	mov	r2, r0
 80a6afe:	460b      	mov	r3, r1
 80a6b00:	4614      	mov	r4, r2
 80a6b02:	461d      	mov	r5, r3
 80a6b04:	4b45      	ldr	r3, [pc, #276]	; (80a6c1c <lsm6dso_publish_sensor_data+0x39c>)
 80a6b06:	685b      	ldr	r3, [r3, #4]
 80a6b08:	4618      	mov	r0, r3
 80a6b0a:	f7f9 fd1d 	bl	80a0548 <__aeabi_f2d>
 80a6b0e:	4602      	mov	r2, r0
 80a6b10:	460b      	mov	r3, r1
 80a6b12:	4620      	mov	r0, r4
 80a6b14:	4629      	mov	r1, r5
 80a6b16:	f7f9 fbb7 	bl	80a0288 <__aeabi_dsub>
 80a6b1a:	4602      	mov	r2, r0
 80a6b1c:	460b      	mov	r3, r1
 80a6b1e:	4610      	mov	r0, r2
 80a6b20:	4619      	mov	r1, r3
 80a6b22:	f7fa f861 	bl	80a0be8 <__aeabi_d2f>
 80a6b26:	4603      	mov	r3, r0
      sensor_data.sensor_data_t.vec.data[1] = angular_rate_mdps[1]
 80a6b28:	64fb      	str	r3, [r7, #76]	; 0x4c
      sensor_data.sensor_data_t.vec.data[2] = angular_rate_mdps[2]
 80a6b2a:	4b38      	ldr	r3, [pc, #224]	; (80a6c0c <lsm6dso_publish_sensor_data+0x38c>)
 80a6b2c:	edd3 7a02 	vldr	s15, [r3, #8]
          / 1000.0f * DPS2RPS - angular_rate_offset[2];
 80a6b30:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80a6bfc <lsm6dso_publish_sensor_data+0x37c>
 80a6b34:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80a6b38:	ee16 0a90 	vmov	r0, s13
 80a6b3c:	f7f9 fd04 	bl	80a0548 <__aeabi_f2d>
 80a6b40:	f04f 0200 	mov.w	r2, #0
 80a6b44:	4b34      	ldr	r3, [pc, #208]	; (80a6c18 <lsm6dso_publish_sensor_data+0x398>)
 80a6b46:	f7f9 fe81 	bl	80a084c <__aeabi_ddiv>
 80a6b4a:	4602      	mov	r2, r0
 80a6b4c:	460b      	mov	r3, r1
 80a6b4e:	4610      	mov	r0, r2
 80a6b50:	4619      	mov	r1, r3
 80a6b52:	a31f      	add	r3, pc, #124	; (adr r3, 80a6bd0 <lsm6dso_publish_sensor_data+0x350>)
 80a6b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6b58:	f7f9 fd4e 	bl	80a05f8 <__aeabi_dmul>
 80a6b5c:	4602      	mov	r2, r0
 80a6b5e:	460b      	mov	r3, r1
 80a6b60:	4614      	mov	r4, r2
 80a6b62:	461d      	mov	r5, r3
 80a6b64:	4b2d      	ldr	r3, [pc, #180]	; (80a6c1c <lsm6dso_publish_sensor_data+0x39c>)
 80a6b66:	689b      	ldr	r3, [r3, #8]
 80a6b68:	4618      	mov	r0, r3
 80a6b6a:	f7f9 fced 	bl	80a0548 <__aeabi_f2d>
 80a6b6e:	4602      	mov	r2, r0
 80a6b70:	460b      	mov	r3, r1
 80a6b72:	4620      	mov	r0, r4
 80a6b74:	4629      	mov	r1, r5
 80a6b76:	f7f9 fb87 	bl	80a0288 <__aeabi_dsub>
 80a6b7a:	4602      	mov	r2, r0
 80a6b7c:	460b      	mov	r3, r1
 80a6b7e:	4610      	mov	r0, r2
 80a6b80:	4619      	mov	r1, r3
 80a6b82:	f7fa f831 	bl	80a0be8 <__aeabi_d2f>
 80a6b86:	4603      	mov	r3, r0
      sensor_data.sensor_data_t.vec.data[2] = angular_rate_mdps[2]
 80a6b88:	653b      	str	r3, [r7, #80]	; 0x50
      sensor_data.sensor_data_t.vec.data[3] = temperature_degC;
 80a6b8a:	4b1e      	ldr	r3, [pc, #120]	; (80a6c04 <lsm6dso_publish_sensor_data+0x384>)
 80a6b8c:	681b      	ldr	r3, [r3, #0]
 80a6b8e:	657b      	str	r3, [r7, #84]	; 0x54
      osMessageQueuePut(acc_gyro_init_parms->SensorDataQHandle,
 80a6b90:	4b14      	ldr	r3, [pc, #80]	; (80a6be4 <lsm6dso_publish_sensor_data+0x364>)
 80a6b92:	681b      	ldr	r3, [r3, #0]
 80a6b94:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 80a6b98:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80a6b9c:	2300      	movs	r3, #0
 80a6b9e:	2200      	movs	r2, #0
 80a6ba0:	f00f fc30 	bl	80b6404 <osMessageQueuePut>
                        &sensor_data, 0, 0);
    }
  }

  if (gyro_activated || acc_activated) {
 80a6ba4:	4b1b      	ldr	r3, [pc, #108]	; (80a6c14 <lsm6dso_publish_sensor_data+0x394>)
 80a6ba6:	781b      	ldrb	r3, [r3, #0]
 80a6ba8:	2b00      	cmp	r3, #0
 80a6baa:	d103      	bne.n	80a6bb4 <lsm6dso_publish_sensor_data+0x334>
 80a6bac:	4b11      	ldr	r3, [pc, #68]	; (80a6bf4 <lsm6dso_publish_sensor_data+0x374>)
 80a6bae:	781b      	ldrb	r3, [r3, #0]
 80a6bb0:	2b00      	cmp	r3, #0
 80a6bb2:	d04d      	beq.n	80a6c50 <lsm6dso_publish_sensor_data+0x3d0>
    //lsm6dso_temp_flag_data_ready_get(&dev_ctx, &reg);
    if (reg.tda) {
 80a6bb4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80a6bb8:	f003 0304 	and.w	r3, r3, #4
 80a6bbc:	b2db      	uxtb	r3, r3
 80a6bbe:	2b00      	cmp	r3, #0
 80a6bc0:	d046      	beq.n	80a6c50 <lsm6dso_publish_sensor_data+0x3d0>
      /* Read temperature data */
      memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 80a6bc2:	2202      	movs	r2, #2
 80a6bc4:	2100      	movs	r1, #0
 80a6bc6:	4816      	ldr	r0, [pc, #88]	; (80a6c20 <lsm6dso_publish_sensor_data+0x3a0>)
 80a6bc8:	f019 f9f8 	bl	80bffbc <memset>
      lsm6dso_temperature_raw_get(&dev_ctx, data_raw_temperature.u8bit);
 80a6bcc:	4914      	ldr	r1, [pc, #80]	; (80a6c20 <lsm6dso_publish_sensor_data+0x3a0>)
 80a6bce:	e029      	b.n	80a6c24 <lsm6dso_publish_sensor_data+0x3a4>
 80a6bd0:	60000000 	.word	0x60000000
 80a6bd4:	400921fb 	.word	0x400921fb
 80a6bd8:	20008070 	.word	0x20008070
 80a6bdc:	20007ff0 	.word	0x20007ff0
 80a6be0:	20008004 	.word	0x20008004
 80a6be4:	2000807c 	.word	0x2000807c
 80a6be8:	20008084 	.word	0x20008084
 80a6bec:	2001be00 	.word	0x2001be00
 80a6bf0:	2001bdfc 	.word	0x2001bdfc
 80a6bf4:	20008082 	.word	0x20008082
 80a6bf8:	411ce80a 	.word	0x411ce80a
 80a6bfc:	447a0000 	.word	0x447a0000
 80a6c00:	20008024 	.word	0x20008024
 80a6c04:	2000801c 	.word	0x2000801c
 80a6c08:	20007ff8 	.word	0x20007ff8
 80a6c0c:	20008010 	.word	0x20008010
 80a6c10:	20008085 	.word	0x20008085
 80a6c14:	20008083 	.word	0x20008083
 80a6c18:	40668000 	.word	0x40668000
 80a6c1c:	20008030 	.word	0x20008030
 80a6c20:	20008000 	.word	0x20008000
 80a6c24:	483a      	ldr	r0, [pc, #232]	; (80a6d10 <lsm6dso_publish_sensor_data+0x490>)
 80a6c26:	f000 ff95 	bl	80a7b54 <lsm6dso_temperature_raw_get>
      temperature_degC =
          lsm6dso_from_lsb_to_celsius(data_raw_temperature.i16bit);
 80a6c2a:	4b3a      	ldr	r3, [pc, #232]	; (80a6d14 <lsm6dso_publish_sensor_data+0x494>)
 80a6c2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80a6c30:	4618      	mov	r0, r3
 80a6c32:	f000 fcad 	bl	80a7590 <lsm6dso_from_lsb_to_celsius>
 80a6c36:	eef0 7a40 	vmov.f32	s15, s0
      temperature_degC =
 80a6c3a:	4b37      	ldr	r3, [pc, #220]	; (80a6d18 <lsm6dso_publish_sensor_data+0x498>)
 80a6c3c:	edc3 7a00 	vstr	s15, [r3]
      pid_temp_control(&imu_pid_struct, temperature_degC);
 80a6c40:	4b35      	ldr	r3, [pc, #212]	; (80a6d18 <lsm6dso_publish_sensor_data+0x498>)
 80a6c42:	edd3 7a00 	vldr	s15, [r3]
 80a6c46:	eeb0 0a67 	vmov.f32	s0, s15
 80a6c4a:	4834      	ldr	r0, [pc, #208]	; (80a6d1c <lsm6dso_publish_sensor_data+0x49c>)
 80a6c4c:	f7ff fcb2 	bl	80a65b4 <pid_temp_control>
    }
  }

  if (gyro_data_report_in_uart_mode && acc_data_report_in_uart_mode) {
 80a6c50:	4b33      	ldr	r3, [pc, #204]	; (80a6d20 <lsm6dso_publish_sensor_data+0x4a0>)
 80a6c52:	781b      	ldrb	r3, [r3, #0]
 80a6c54:	2b00      	cmp	r3, #0
 80a6c56:	d055      	beq.n	80a6d04 <lsm6dso_publish_sensor_data+0x484>
 80a6c58:	4b32      	ldr	r3, [pc, #200]	; (80a6d24 <lsm6dso_publish_sensor_data+0x4a4>)
 80a6c5a:	781b      	ldrb	r3, [r3, #0]
 80a6c5c:	2b00      	cmp	r3, #0
 80a6c5e:	d051      	beq.n	80a6d04 <lsm6dso_publish_sensor_data+0x484>
    //notify uart2 receive task to report sensor raw
    uint8_t uart_sensor_data[UART_TX_CODE_LENGTH] = { 0 };
 80a6c60:	2300      	movs	r3, #0
 80a6c62:	617b      	str	r3, [r7, #20]
 80a6c64:	f107 0318 	add.w	r3, r7, #24
 80a6c68:	2200      	movs	r2, #0
 80a6c6a:	601a      	str	r2, [r3, #0]
 80a6c6c:	605a      	str	r2, [r3, #4]
 80a6c6e:	609a      	str	r2, [r3, #8]
 80a6c70:	60da      	str	r2, [r3, #12]
 80a6c72:	611a      	str	r2, [r3, #16]
 80a6c74:	615a      	str	r2, [r3, #20]
 80a6c76:	761a      	strb	r2, [r3, #24]
    uint32_t currentu32timestamp = 0;
 80a6c78:	2300      	movs	r3, #0
 80a6c7a:	613b      	str	r3, [r7, #16]
    currentu32timestamp = osKernelGetTickCount();
 80a6c7c:	f00f f96c 	bl	80b5f58 <osKernelGetTickCount>
 80a6c80:	4603      	mov	r3, r0
 80a6c82:	613b      	str	r3, [r7, #16]

    uint16_t range_acc = 8000;
 80a6c84:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80a6c88:	81fb      	strh	r3, [r7, #14]
    uint16_t range_gyro = 1000;
 80a6c8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a6c8e:	81bb      	strh	r3, [r7, #12]
    uart_sensor_data[0] = 0x5A;
 80a6c90:	235a      	movs	r3, #90	; 0x5a
 80a6c92:	753b      	strb	r3, [r7, #20]
    uart_sensor_data[1] = 0xA5;
 80a6c94:	23a5      	movs	r3, #165	; 0xa5
 80a6c96:	757b      	strb	r3, [r7, #21]
    uart_sensor_data[2] = 0x18;
 80a6c98:	2318      	movs	r3, #24
 80a6c9a:	75bb      	strb	r3, [r7, #22]
    uart_sensor_data[3] = 0x1;
 80a6c9c:	2301      	movs	r3, #1
 80a6c9e:	75fb      	strb	r3, [r7, #23]
    uart_sensor_data[4] = 0;
 80a6ca0:	2300      	movs	r3, #0
 80a6ca2:	763b      	strb	r3, [r7, #24]
 80a6ca4:	693b      	ldr	r3, [r7, #16]
    memcpy(&uart_sensor_data[5], &currentu32timestamp, sizeof(uint32_t));
 80a6ca6:	f8c7 3019 	str.w	r3, [r7, #25]
 80a6caa:	89fb      	ldrh	r3, [r7, #14]
    memcpy(&uart_sensor_data[9], &range_acc, sizeof(uint16_t));
 80a6cac:	f8a7 301d 	strh.w	r3, [r7, #29]
    memcpy(&uart_sensor_data[11], data_raw_acceleration.i16bit,
 80a6cb0:	f107 0314 	add.w	r3, r7, #20
 80a6cb4:	330b      	adds	r3, #11
 80a6cb6:	2206      	movs	r2, #6
 80a6cb8:	491b      	ldr	r1, [pc, #108]	; (80a6d28 <lsm6dso_publish_sensor_data+0x4a8>)
 80a6cba:	4618      	mov	r0, r3
 80a6cbc:	f019 f970 	bl	80bffa0 <memcpy>
 80a6cc0:	89bb      	ldrh	r3, [r7, #12]
           sizeof(uint16_t) * 3);
    memcpy(&uart_sensor_data[17], &range_gyro, sizeof(uint16_t));
 80a6cc2:	f8a7 3025 	strh.w	r3, [r7, #37]	; 0x25
    memcpy(&uart_sensor_data[19], data_raw_angular_rate.i16bit,
 80a6cc6:	f107 0314 	add.w	r3, r7, #20
 80a6cca:	3313      	adds	r3, #19
 80a6ccc:	2206      	movs	r2, #6
 80a6cce:	4917      	ldr	r1, [pc, #92]	; (80a6d2c <lsm6dso_publish_sensor_data+0x4ac>)
 80a6cd0:	4618      	mov	r0, r3
 80a6cd2:	f019 f965 	bl	80bffa0 <memcpy>
           sizeof(uint16_t) * 3);
    memcpy(&uart_sensor_data[25], data_raw_temperature.i16bit,
 80a6cd6:	4b0f      	ldr	r3, [pc, #60]	; (80a6d14 <lsm6dso_publish_sensor_data+0x494>)
 80a6cd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80a6cdc:	881b      	ldrh	r3, [r3, #0]
 80a6cde:	b29b      	uxth	r3, r3
 80a6ce0:	f8a7 302d 	strh.w	r3, [r7, #45]	; 0x2d
           sizeof(uint16_t));

    osMessageQueuePut(acc_gyro_init_parms->UartReportQHandle,
 80a6ce4:	4b12      	ldr	r3, [pc, #72]	; (80a6d30 <lsm6dso_publish_sensor_data+0x4b0>)
 80a6ce6:	681b      	ldr	r3, [r3, #0]
 80a6ce8:	f8d3 00fc 	ldr.w	r0, [r3, #252]	; 0xfc
 80a6cec:	f107 0114 	add.w	r1, r7, #20
 80a6cf0:	2300      	movs	r3, #0
 80a6cf2:	2200      	movs	r2, #0
 80a6cf4:	f00f fb86 	bl	80b6404 <osMessageQueuePut>
                      uart_sensor_data, 0, 0);

    gyro_data_report_in_uart_mode = false;
 80a6cf8:	4b09      	ldr	r3, [pc, #36]	; (80a6d20 <lsm6dso_publish_sensor_data+0x4a0>)
 80a6cfa:	2200      	movs	r2, #0
 80a6cfc:	701a      	strb	r2, [r3, #0]
    acc_data_report_in_uart_mode = false;
 80a6cfe:	4b09      	ldr	r3, [pc, #36]	; (80a6d24 <lsm6dso_publish_sensor_data+0x4a4>)
 80a6d00:	2200      	movs	r2, #0
 80a6d02:	701a      	strb	r2, [r3, #0]
  }
}
 80a6d04:	bf00      	nop
 80a6d06:	4618      	mov	r0, r3
 80a6d08:	3788      	adds	r7, #136	; 0x88
 80a6d0a:	46bd      	mov	sp, r7
 80a6d0c:	bdb0      	pop	{r4, r5, r7, pc}
 80a6d0e:	bf00      	nop
 80a6d10:	20008070 	.word	0x20008070
 80a6d14:	20008000 	.word	0x20008000
 80a6d18:	2000801c 	.word	0x2000801c
 80a6d1c:	2000803c 	.word	0x2000803c
 80a6d20:	20008085 	.word	0x20008085
 80a6d24:	20008084 	.word	0x20008084
 80a6d28:	20007ff0 	.word	0x20007ff0
 80a6d2c:	20007ff8 	.word	0x20007ff8
 80a6d30:	2000807c 	.word	0x2000807c

080a6d34 <platform_write>:
 * @param  len       number of consecutive register to write
 *
 */
static int32_t platform_write(void *handle, uint8_t reg, uint8_t * bufp,
                              uint16_t len)
{
 80a6d34:	b580      	push	{r7, lr}
 80a6d36:	b088      	sub	sp, #32
 80a6d38:	af04      	add	r7, sp, #16
 80a6d3a:	60f8      	str	r0, [r7, #12]
 80a6d3c:	607a      	str	r2, [r7, #4]
 80a6d3e:	461a      	mov	r2, r3
 80a6d40:	460b      	mov	r3, r1
 80a6d42:	72fb      	strb	r3, [r7, #11]
 80a6d44:	4613      	mov	r3, r2
 80a6d46:	813b      	strh	r3, [r7, #8]
  if (handle == &acc_gyro_init_parms->i2c_handle) {
 80a6d48:	4b0c      	ldr	r3, [pc, #48]	; (80a6d7c <platform_write+0x48>)
 80a6d4a:	681b      	ldr	r3, [r3, #0]
 80a6d4c:	3304      	adds	r3, #4
 80a6d4e:	68fa      	ldr	r2, [r7, #12]
 80a6d50:	429a      	cmp	r2, r3
 80a6d52:	d10d      	bne.n	80a6d70 <platform_write+0x3c>
    //printf("start i2c write, \r\n");
    HAL_I2C_Mem_Write(handle, LSM6DSO_I2C_ADD_L, reg,
 80a6d54:	7afb      	ldrb	r3, [r7, #11]
 80a6d56:	b29a      	uxth	r2, r3
 80a6d58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a6d5c:	9302      	str	r3, [sp, #8]
 80a6d5e:	893b      	ldrh	r3, [r7, #8]
 80a6d60:	9301      	str	r3, [sp, #4]
 80a6d62:	687b      	ldr	r3, [r7, #4]
 80a6d64:	9300      	str	r3, [sp, #0]
 80a6d66:	2301      	movs	r3, #1
 80a6d68:	21d5      	movs	r1, #213	; 0xd5
 80a6d6a:	68f8      	ldr	r0, [r7, #12]
 80a6d6c:	f00b f926 	bl	80b1fbc <HAL_I2C_Mem_Write>
                      I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  }

  return 0;
 80a6d70:	2300      	movs	r3, #0
}
 80a6d72:	4618      	mov	r0, r3
 80a6d74:	3710      	adds	r7, #16
 80a6d76:	46bd      	mov	sp, r7
 80a6d78:	bd80      	pop	{r7, pc}
 80a6d7a:	bf00      	nop
 80a6d7c:	2000807c 	.word	0x2000807c

080a6d80 <platform_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t * bufp,
                             uint16_t len)
{
 80a6d80:	b580      	push	{r7, lr}
 80a6d82:	b0a0      	sub	sp, #128	; 0x80
 80a6d84:	af04      	add	r7, sp, #16
 80a6d86:	60f8      	str	r0, [r7, #12]
 80a6d88:	607a      	str	r2, [r7, #4]
 80a6d8a:	461a      	mov	r2, r3
 80a6d8c:	460b      	mov	r3, r1
 80a6d8e:	72fb      	strb	r3, [r7, #11]
 80a6d90:	4613      	mov	r3, r2
 80a6d92:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef ret = HAL_OK;
 80a6d94:	2300      	movs	r3, #0
 80a6d96:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  if (handle == &acc_gyro_init_parms->i2c_handle) {
 80a6d9a:	4b1b      	ldr	r3, [pc, #108]	; (80a6e08 <platform_read+0x88>)
 80a6d9c:	681b      	ldr	r3, [r3, #0]
 80a6d9e:	3304      	adds	r3, #4
 80a6da0:	68fa      	ldr	r2, [r7, #12]
 80a6da2:	429a      	cmp	r2, r3
 80a6da4:	d12a      	bne.n	80a6dfc <platform_read+0x7c>
    //printf("start i2c read, \r\n");
    ret = HAL_I2C_Mem_Read(handle, LSM6DSO_I2C_ADD_L, reg,
 80a6da6:	7afb      	ldrb	r3, [r7, #11]
 80a6da8:	b29a      	uxth	r2, r3
 80a6daa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a6dae:	9302      	str	r3, [sp, #8]
 80a6db0:	893b      	ldrh	r3, [r7, #8]
 80a6db2:	9301      	str	r3, [sp, #4]
 80a6db4:	687b      	ldr	r3, [r7, #4]
 80a6db6:	9300      	str	r3, [sp, #0]
 80a6db8:	2301      	movs	r3, #1
 80a6dba:	21d5      	movs	r1, #213	; 0xd5
 80a6dbc:	68f8      	ldr	r0, [r7, #12]
 80a6dbe:	f00b f9f7 	bl	80b21b0 <HAL_I2C_Mem_Read>
 80a6dc2:	4603      	mov	r3, r0
 80a6dc4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                     I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
    lsm6dso_delay_us(2);
 80a6dc8:	2002      	movs	r0, #2
 80a6dca:	f7ff fce7 	bl	80a679c <lsm6dso_delay_us>
    if(ret != HAL_OK) {
 80a6dce:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80a6dd2:	2b00      	cmp	r3, #0
 80a6dd4:	d012      	beq.n	80a6dfc <platform_read+0x7c>
      //notify host to do reset!
      sensor_message_event_t sensor_msg_event;
      sensor_msg_event.message_event_type = SENSOR_BUS_ERROR_EVENT;
 80a6dd6:	230d      	movs	r3, #13
 80a6dd8:	743b      	strb	r3, [r7, #16]
      sensor_msg_event.message_event_t.resp_event.sensor_type = SENSOR_TYPE_ACCELEROMETER;
 80a6dda:	2300      	movs	r3, #0
 80a6ddc:	763b      	strb	r3, [r7, #24]
      sensor_msg_event.message_event_t.resp_event.config_type = SENSOR_BUS_ERROR_CONFIG;
 80a6dde:	230a      	movs	r3, #10
 80a6de0:	767b      	strb	r3, [r7, #25]
      //notifiy smgr that bus is abnormal
      osMessageQueuePut(acc_gyro_init_parms->SensorMessageQHandle,
 80a6de2:	4b09      	ldr	r3, [pc, #36]	; (80a6e08 <platform_read+0x88>)
 80a6de4:	681b      	ldr	r3, [r3, #0]
 80a6de6:	f8d3 00f4 	ldr.w	r0, [r3, #244]	; 0xf4
 80a6dea:	f107 0110 	add.w	r1, r7, #16
 80a6dee:	2300      	movs	r3, #0
 80a6df0:	2200      	movs	r2, #0
 80a6df2:	f00f fb07 	bl	80b6404 <osMessageQueuePut>
                          &sensor_msg_event, 0, 0);
      osDelay(1);
 80a6df6:	2001      	movs	r0, #1
 80a6df8:	f00f f97f 	bl	80b60fa <osDelay>
    }
  }

  return 0;
 80a6dfc:	2300      	movs	r3, #0
}
 80a6dfe:	4618      	mov	r0, r3
 80a6e00:	3770      	adds	r7, #112	; 0x70
 80a6e02:	46bd      	mov	sp, r7
 80a6e04:	bd80      	pop	{r7, pc}
 80a6e06:	bf00      	nop
 80a6e08:	2000807c 	.word	0x2000807c

080a6e0c <lsm6dso_acc_init>:

/*
 * @brief  platform specific initialization (platform dependent)
 */
int lsm6dso_acc_init(void *para1, void *para2)
{
 80a6e0c:	b580      	push	{r7, lr}
 80a6e0e:	b082      	sub	sp, #8
 80a6e10:	af00      	add	r7, sp, #0
 80a6e12:	6078      	str	r0, [r7, #4]
 80a6e14:	6039      	str	r1, [r7, #0]
  acc_gyro_init_parms = (platform_prams *) para1;
 80a6e16:	4a39      	ldr	r2, [pc, #228]	; (80a6efc <lsm6dso_acc_init+0xf0>)
 80a6e18:	687b      	ldr	r3, [r7, #4]
 80a6e1a:	6013      	str	r3, [r2, #0]
  /* Initialize mems driver interface */

  if (acc_gyro_init_parms != NULL) {
 80a6e1c:	4b37      	ldr	r3, [pc, #220]	; (80a6efc <lsm6dso_acc_init+0xf0>)
 80a6e1e:	681b      	ldr	r3, [r3, #0]
 80a6e20:	2b00      	cmp	r3, #0
 80a6e22:	d006      	beq.n	80a6e32 <lsm6dso_acc_init+0x26>
    tim1 = &acc_gyro_init_parms->PWMTimerHandle;
 80a6e24:	4b35      	ldr	r3, [pc, #212]	; (80a6efc <lsm6dso_acc_init+0xf0>)
 80a6e26:	681b      	ldr	r3, [r3, #0]
 80a6e28:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 80a6e2c:	4a34      	ldr	r2, [pc, #208]	; (80a6f00 <lsm6dso_acc_init+0xf4>)
 80a6e2e:	6013      	str	r3, [r2, #0]
 80a6e30:	e001      	b.n	80a6e36 <lsm6dso_acc_init+0x2a>
  } else {
    Error_Handler();
 80a6e32:	f002 fe71 	bl	80a9b18 <Error_Handler>
  }

  dev_ctx.write_reg = platform_write;
 80a6e36:	4b33      	ldr	r3, [pc, #204]	; (80a6f04 <lsm6dso_acc_init+0xf8>)
 80a6e38:	4a33      	ldr	r2, [pc, #204]	; (80a6f08 <lsm6dso_acc_init+0xfc>)
 80a6e3a:	601a      	str	r2, [r3, #0]
  dev_ctx.read_reg = platform_read;
 80a6e3c:	4b31      	ldr	r3, [pc, #196]	; (80a6f04 <lsm6dso_acc_init+0xf8>)
 80a6e3e:	4a33      	ldr	r2, [pc, #204]	; (80a6f0c <lsm6dso_acc_init+0x100>)
 80a6e40:	605a      	str	r2, [r3, #4]
  dev_ctx.handle = &acc_gyro_init_parms->i2c_handle;
 80a6e42:	4b2e      	ldr	r3, [pc, #184]	; (80a6efc <lsm6dso_acc_init+0xf0>)
 80a6e44:	681b      	ldr	r3, [r3, #0]
 80a6e46:	3304      	adds	r3, #4
 80a6e48:	4a2e      	ldr	r2, [pc, #184]	; (80a6f04 <lsm6dso_acc_init+0xf8>)
 80a6e4a:	6093      	str	r3, [r2, #8]

  /* Check device ID */
  lsm6dso_device_id_get(&dev_ctx, &whoamI);
 80a6e4c:	4930      	ldr	r1, [pc, #192]	; (80a6f10 <lsm6dso_acc_init+0x104>)
 80a6e4e:	482d      	ldr	r0, [pc, #180]	; (80a6f04 <lsm6dso_acc_init+0xf8>)
 80a6e50:	f000 fed9 	bl	80a7c06 <lsm6dso_device_id_get>
  printf("lsm6dso whoamI: 0x%x \r\n", whoamI);
 80a6e54:	4b2e      	ldr	r3, [pc, #184]	; (80a6f10 <lsm6dso_acc_init+0x104>)
 80a6e56:	781b      	ldrb	r3, [r3, #0]
 80a6e58:	4619      	mov	r1, r3
 80a6e5a:	482e      	ldr	r0, [pc, #184]	; (80a6f14 <lsm6dso_acc_init+0x108>)
 80a6e5c:	f019 fd8a 	bl	80c0974 <iprintf>

  if (whoamI != LSM6DSO_ID) {
 80a6e60:	4b2b      	ldr	r3, [pc, #172]	; (80a6f10 <lsm6dso_acc_init+0x104>)
 80a6e62:	781b      	ldrb	r3, [r3, #0]
 80a6e64:	2b6c      	cmp	r3, #108	; 0x6c
 80a6e66:	d005      	beq.n	80a6e74 <lsm6dso_acc_init+0x68>
    printf("lsm6dso acc init failed!\r\n");
 80a6e68:	482b      	ldr	r0, [pc, #172]	; (80a6f18 <lsm6dso_acc_init+0x10c>)
 80a6e6a:	f019 fe1f 	bl	80c0aac <puts>
    return SENSOR_FAILED;
 80a6e6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a6e72:	e03e      	b.n	80a6ef2 <lsm6dso_acc_init+0xe6>
  }

  /* Restore default configuration */
  lsm6dso_reset_set(&dev_ctx, PROPERTY_ENABLE);
 80a6e74:	2101      	movs	r1, #1
 80a6e76:	4823      	ldr	r0, [pc, #140]	; (80a6f04 <lsm6dso_acc_init+0xf8>)
 80a6e78:	f000 fed6 	bl	80a7c28 <lsm6dso_reset_set>

  do {
    lsm6dso_reset_get(&dev_ctx, &rst);
 80a6e7c:	4927      	ldr	r1, [pc, #156]	; (80a6f1c <lsm6dso_acc_init+0x110>)
 80a6e7e:	4821      	ldr	r0, [pc, #132]	; (80a6f04 <lsm6dso_acc_init+0xf8>)
 80a6e80:	f000 fef8 	bl	80a7c74 <lsm6dso_reset_get>
  } while (rst);
 80a6e84:	4b25      	ldr	r3, [pc, #148]	; (80a6f1c <lsm6dso_acc_init+0x110>)
 80a6e86:	781b      	ldrb	r3, [r3, #0]
 80a6e88:	2b00      	cmp	r3, #0
 80a6e8a:	d1f7      	bne.n	80a6e7c <lsm6dso_acc_init+0x70>

  lsm6dso_block_data_update_set(&dev_ctx, PROPERTY_DISABLE);
 80a6e8c:	2100      	movs	r1, #0
 80a6e8e:	481d      	ldr	r0, [pc, #116]	; (80a6f04 <lsm6dso_acc_init+0xf8>)
 80a6e90:	f000 fdde 	bl	80a7a50 <lsm6dso_block_data_update_set>
  /* Disable I3C interface */
  lsm6dso_i3c_disable_set(&dev_ctx, LSM6DSO_I3C_DISABLE);
 80a6e94:	2180      	movs	r1, #128	; 0x80
 80a6e96:	481b      	ldr	r0, [pc, #108]	; (80a6f04 <lsm6dso_acc_init+0xf8>)
 80a6e98:	f000 ffaf 	bl	80a7dfa <lsm6dso_i3c_disable_set>
  /* Set Output Data Rate */
  lsm6dso_xl_data_rate_set(&dev_ctx, LSM6DSO_XL_ODR_104Hz);
 80a6e9c:	2104      	movs	r1, #4
 80a6e9e:	4819      	ldr	r0, [pc, #100]	; (80a6f04 <lsm6dso_acc_init+0xf8>)
 80a6ea0:	f000 fbb8 	bl	80a7614 <lsm6dso_xl_data_rate_set>
  lsm6dso_gy_data_rate_set(&dev_ctx, LSM6DSO_GY_ODR_104Hz);
 80a6ea4:	2104      	movs	r1, #4
 80a6ea6:	4817      	ldr	r0, [pc, #92]	; (80a6f04 <lsm6dso_acc_init+0xf8>)
 80a6ea8:	f000 fcd6 	bl	80a7858 <lsm6dso_gy_data_rate_set>
  /* Set full scale */
  lsm6dso_xl_full_scale_set(&dev_ctx, LSM6DSO_8g);
 80a6eac:	2103      	movs	r1, #3
 80a6eae:	4815      	ldr	r0, [pc, #84]	; (80a6f04 <lsm6dso_acc_init+0xf8>)
 80a6eb0:	f000 fb8a 	bl	80a75c8 <lsm6dso_xl_full_scale_set>
  lsm6dso_gy_full_scale_set(&dev_ctx, LSM6DSO_1000dps);
 80a6eb4:	2104      	movs	r1, #4
 80a6eb6:	4813      	ldr	r0, [pc, #76]	; (80a6f04 <lsm6dso_acc_init+0xf8>)
 80a6eb8:	f000 fca8 	bl	80a780c <lsm6dso_gy_full_scale_set>
  /* Configure filtering chain(No aux interface)
   * Accelerometer - LPF1 + LPF2 path
   */
  lsm6dso_xl_hp_path_on_out_set(&dev_ctx, LSM6DSO_LP_ODR_DIV_100);
 80a6ebc:	2104      	movs	r1, #4
 80a6ebe:	4811      	ldr	r0, [pc, #68]	; (80a6f04 <lsm6dso_acc_init+0xf8>)
 80a6ec0:	f000 ff63 	bl	80a7d8a <lsm6dso_xl_hp_path_on_out_set>
  lsm6dso_xl_filter_lp2_set(&dev_ctx, PROPERTY_ENABLE);
 80a6ec4:	2101      	movs	r1, #1
 80a6ec6:	480f      	ldr	r0, [pc, #60]	; (80a6f04 <lsm6dso_acc_init+0xf8>)
 80a6ec8:	f000 ff39 	bl	80a7d3e <lsm6dso_xl_filter_lp2_set>

  /* axis conversion parameter */
  g_imu_axis_order[0] = ST_CUSTOM_IMU_AXIS_ORDER_X;
 80a6ecc:	4b14      	ldr	r3, [pc, #80]	; (80a6f20 <lsm6dso_acc_init+0x114>)
 80a6ece:	2201      	movs	r2, #1
 80a6ed0:	701a      	strb	r2, [r3, #0]
  g_imu_axis_order[1] = ST_CUSTOM_IMU_AXIS_ORDER_Y;
 80a6ed2:	4b13      	ldr	r3, [pc, #76]	; (80a6f20 <lsm6dso_acc_init+0x114>)
 80a6ed4:	2202      	movs	r2, #2
 80a6ed6:	705a      	strb	r2, [r3, #1]
  g_imu_axis_order[2] = ST_CUSTOM_IMU_AXIS_ORDER_Z;
 80a6ed8:	4b11      	ldr	r3, [pc, #68]	; (80a6f20 <lsm6dso_acc_init+0x114>)
 80a6eda:	2200      	movs	r2, #0
 80a6edc:	709a      	strb	r2, [r3, #2]
  g_imu_axis_sign[0] = ST_CUSTOM_IMU_AXIS_SIGN_X;
 80a6ede:	4b11      	ldr	r3, [pc, #68]	; (80a6f24 <lsm6dso_acc_init+0x118>)
 80a6ee0:	2200      	movs	r2, #0
 80a6ee2:	701a      	strb	r2, [r3, #0]
  g_imu_axis_sign[1] = ST_CUSTOM_IMU_AXIS_SIGN_Y;
 80a6ee4:	4b0f      	ldr	r3, [pc, #60]	; (80a6f24 <lsm6dso_acc_init+0x118>)
 80a6ee6:	2200      	movs	r2, #0
 80a6ee8:	705a      	strb	r2, [r3, #1]
  g_imu_axis_sign[2] = ST_CUSTOM_IMU_AXIS_SIGN_Z;
 80a6eea:	4b0e      	ldr	r3, [pc, #56]	; (80a6f24 <lsm6dso_acc_init+0x118>)
 80a6eec:	2200      	movs	r2, #0
 80a6eee:	709a      	strb	r2, [r3, #2]

  return SENSOR_SUCCESS;
 80a6ef0:	2300      	movs	r3, #0
}
 80a6ef2:	4618      	mov	r0, r3
 80a6ef4:	3708      	adds	r7, #8
 80a6ef6:	46bd      	mov	sp, r7
 80a6ef8:	bd80      	pop	{r7, pc}
 80a6efa:	bf00      	nop
 80a6efc:	2000807c 	.word	0x2000807c
 80a6f00:	2001be04 	.word	0x2001be04
 80a6f04:	20008070 	.word	0x20008070
 80a6f08:	080a6d35 	.word	0x080a6d35
 80a6f0c:	080a6d81 	.word	0x080a6d81
 80a6f10:	20008020 	.word	0x20008020
 80a6f14:	080c58b4 	.word	0x080c58b4
 80a6f18:	080c58cc 	.word	0x080c58cc
 80a6f1c:	20008021 	.word	0x20008021
 80a6f20:	2001bdfc 	.word	0x2001bdfc
 80a6f24:	2001be00 	.word	0x2001be00

080a6f28 <lsm6dso_gyro_init>:

int lsm6dso_gyro_init(void *para1, void *para2)
{
 80a6f28:	b580      	push	{r7, lr}
 80a6f2a:	b082      	sub	sp, #8
 80a6f2c:	af00      	add	r7, sp, #0
 80a6f2e:	6078      	str	r0, [r7, #4]
 80a6f30:	6039      	str	r1, [r7, #0]
  if (whoamI != LSM6DSO_ID) {
 80a6f32:	4b07      	ldr	r3, [pc, #28]	; (80a6f50 <lsm6dso_gyro_init+0x28>)
 80a6f34:	781b      	ldrb	r3, [r3, #0]
 80a6f36:	2b6c      	cmp	r3, #108	; 0x6c
 80a6f38:	d005      	beq.n	80a6f46 <lsm6dso_gyro_init+0x1e>
    printf("lsm6dso gyro init failed!\r\n");
 80a6f3a:	4806      	ldr	r0, [pc, #24]	; (80a6f54 <lsm6dso_gyro_init+0x2c>)
 80a6f3c:	f019 fdb6 	bl	80c0aac <puts>
    return SENSOR_FAILED;
 80a6f40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a6f44:	e000      	b.n	80a6f48 <lsm6dso_gyro_init+0x20>
  }

  return SENSOR_SUCCESS;
 80a6f46:	2300      	movs	r3, #0
}
 80a6f48:	4618      	mov	r0, r3
 80a6f4a:	3708      	adds	r7, #8
 80a6f4c:	46bd      	mov	sp, r7
 80a6f4e:	bd80      	pop	{r7, pc}
 80a6f50:	20008020 	.word	0x20008020
 80a6f54:	080c58e8 	.word	0x080c58e8

080a6f58 <lsm6dso_enable>:

static int32_t lsm6dso_enable(uint8_t SENSOR_TYPE)
{
 80a6f58:	b580      	push	{r7, lr}
 80a6f5a:	b084      	sub	sp, #16
 80a6f5c:	af00      	add	r7, sp, #0
 80a6f5e:	4603      	mov	r3, r0
 80a6f60:	71fb      	strb	r3, [r7, #7]
  int32_t ret = 0;
 80a6f62:	2300      	movs	r3, #0
 80a6f64:	60fb      	str	r3, [r7, #12]

  if (SENSOR_TYPE == SENSOR_TYPE_ACCELEROMETER && acc_activate_count == 0) {
 80a6f66:	79fb      	ldrb	r3, [r7, #7]
 80a6f68:	2b00      	cmp	r3, #0
 80a6f6a:	d10d      	bne.n	80a6f88 <lsm6dso_enable+0x30>
 80a6f6c:	4b29      	ldr	r3, [pc, #164]	; (80a7014 <lsm6dso_enable+0xbc>)
 80a6f6e:	781b      	ldrb	r3, [r3, #0]
 80a6f70:	2b00      	cmp	r3, #0
 80a6f72:	d109      	bne.n	80a6f88 <lsm6dso_enable+0x30>
    acc_activate_count++;
 80a6f74:	4b27      	ldr	r3, [pc, #156]	; (80a7014 <lsm6dso_enable+0xbc>)
 80a6f76:	781b      	ldrb	r3, [r3, #0]
 80a6f78:	3301      	adds	r3, #1
 80a6f7a:	b2da      	uxtb	r2, r3
 80a6f7c:	4b25      	ldr	r3, [pc, #148]	; (80a7014 <lsm6dso_enable+0xbc>)
 80a6f7e:	701a      	strb	r2, [r3, #0]
    acc_activated = true;
 80a6f80:	4b25      	ldr	r3, [pc, #148]	; (80a7018 <lsm6dso_enable+0xc0>)
 80a6f82:	2201      	movs	r2, #1
 80a6f84:	701a      	strb	r2, [r3, #0]
 80a6f86:	e008      	b.n	80a6f9a <lsm6dso_enable+0x42>
  } else if (SENSOR_TYPE == SENSOR_TYPE_ACCELEROMETER)
 80a6f88:	79fb      	ldrb	r3, [r7, #7]
 80a6f8a:	2b00      	cmp	r3, #0
 80a6f8c:	d105      	bne.n	80a6f9a <lsm6dso_enable+0x42>
    acc_activate_count++;
 80a6f8e:	4b21      	ldr	r3, [pc, #132]	; (80a7014 <lsm6dso_enable+0xbc>)
 80a6f90:	781b      	ldrb	r3, [r3, #0]
 80a6f92:	3301      	adds	r3, #1
 80a6f94:	b2da      	uxtb	r2, r3
 80a6f96:	4b1f      	ldr	r3, [pc, #124]	; (80a7014 <lsm6dso_enable+0xbc>)
 80a6f98:	701a      	strb	r2, [r3, #0]

  if (SENSOR_TYPE == SENSOR_TYPE_GYROSCOPE && gyro_activate_count == 0) {
 80a6f9a:	79fb      	ldrb	r3, [r7, #7]
 80a6f9c:	2b02      	cmp	r3, #2
 80a6f9e:	d10d      	bne.n	80a6fbc <lsm6dso_enable+0x64>
 80a6fa0:	4b1e      	ldr	r3, [pc, #120]	; (80a701c <lsm6dso_enable+0xc4>)
 80a6fa2:	781b      	ldrb	r3, [r3, #0]
 80a6fa4:	2b00      	cmp	r3, #0
 80a6fa6:	d109      	bne.n	80a6fbc <lsm6dso_enable+0x64>
    gyro_activate_count++;
 80a6fa8:	4b1c      	ldr	r3, [pc, #112]	; (80a701c <lsm6dso_enable+0xc4>)
 80a6faa:	781b      	ldrb	r3, [r3, #0]
 80a6fac:	3301      	adds	r3, #1
 80a6fae:	b2da      	uxtb	r2, r3
 80a6fb0:	4b1a      	ldr	r3, [pc, #104]	; (80a701c <lsm6dso_enable+0xc4>)
 80a6fb2:	701a      	strb	r2, [r3, #0]
    gyro_activated = true;
 80a6fb4:	4b1a      	ldr	r3, [pc, #104]	; (80a7020 <lsm6dso_enable+0xc8>)
 80a6fb6:	2201      	movs	r2, #1
 80a6fb8:	701a      	strb	r2, [r3, #0]
 80a6fba:	e008      	b.n	80a6fce <lsm6dso_enable+0x76>
  } else if (SENSOR_TYPE == SENSOR_TYPE_GYROSCOPE)
 80a6fbc:	79fb      	ldrb	r3, [r7, #7]
 80a6fbe:	2b02      	cmp	r3, #2
 80a6fc0:	d105      	bne.n	80a6fce <lsm6dso_enable+0x76>
    gyro_activate_count++;
 80a6fc2:	4b16      	ldr	r3, [pc, #88]	; (80a701c <lsm6dso_enable+0xc4>)
 80a6fc4:	781b      	ldrb	r3, [r3, #0]
 80a6fc6:	3301      	adds	r3, #1
 80a6fc8:	b2da      	uxtb	r2, r3
 80a6fca:	4b14      	ldr	r3, [pc, #80]	; (80a701c <lsm6dso_enable+0xc4>)
 80a6fcc:	701a      	strb	r2, [r3, #0]

  if ((acc_activate_count == 1 && gyro_activate_count == 0)
 80a6fce:	4b11      	ldr	r3, [pc, #68]	; (80a7014 <lsm6dso_enable+0xbc>)
 80a6fd0:	781b      	ldrb	r3, [r3, #0]
 80a6fd2:	2b01      	cmp	r3, #1
 80a6fd4:	d103      	bne.n	80a6fde <lsm6dso_enable+0x86>
 80a6fd6:	4b11      	ldr	r3, [pc, #68]	; (80a701c <lsm6dso_enable+0xc4>)
 80a6fd8:	781b      	ldrb	r3, [r3, #0]
 80a6fda:	2b00      	cmp	r3, #0
 80a6fdc:	d007      	beq.n	80a6fee <lsm6dso_enable+0x96>
      || (gyro_activate_count == 1 && acc_activate_count == 0)) {
 80a6fde:	4b0f      	ldr	r3, [pc, #60]	; (80a701c <lsm6dso_enable+0xc4>)
 80a6fe0:	781b      	ldrb	r3, [r3, #0]
 80a6fe2:	2b01      	cmp	r3, #1
 80a6fe4:	d111      	bne.n	80a700a <lsm6dso_enable+0xb2>
 80a6fe6:	4b0b      	ldr	r3, [pc, #44]	; (80a7014 <lsm6dso_enable+0xbc>)
 80a6fe8:	781b      	ldrb	r3, [r3, #0]
 80a6fea:	2b00      	cmp	r3, #0
 80a6fec:	d10d      	bne.n	80a700a <lsm6dso_enable+0xb2>
    ret = lsm6dso_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 80a6fee:	2101      	movs	r1, #1
 80a6ff0:	480c      	ldr	r0, [pc, #48]	; (80a7024 <lsm6dso_enable+0xcc>)
 80a6ff2:	f000 fd2d 	bl	80a7a50 <lsm6dso_block_data_update_set>
 80a6ff6:	60f8      	str	r0, [r7, #12]
    PID_Init(&imu_pid_struct, PID_TARGET_TEMP);
 80a6ff8:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 80a7028 <lsm6dso_enable+0xd0>
 80a6ffc:	480b      	ldr	r0, [pc, #44]	; (80a702c <lsm6dso_enable+0xd4>)
 80a6ffe:	f7ff fa9e 	bl	80a653e <PID_Init>
    pid_pwm_control(PWM_ACTIVATE, 0);
 80a7002:	2100      	movs	r1, #0
 80a7004:	2000      	movs	r0, #0
 80a7006:	f7ff fa8c 	bl	80a6522 <pid_pwm_control>
  }

  return ret;
 80a700a:	68fb      	ldr	r3, [r7, #12]
}
 80a700c:	4618      	mov	r0, r3
 80a700e:	3710      	adds	r7, #16
 80a7010:	46bd      	mov	sp, r7
 80a7012:	bd80      	pop	{r7, pc}
 80a7014:	20008080 	.word	0x20008080
 80a7018:	20008082 	.word	0x20008082
 80a701c:	20008081 	.word	0x20008081
 80a7020:	20008083 	.word	0x20008083
 80a7024:	20008070 	.word	0x20008070
 80a7028:	42300000 	.word	0x42300000
 80a702c:	2000803c 	.word	0x2000803c

080a7030 <lsm6dso_disable>:

static int32_t lsm6dso_disable(uint8_t SENSOR_TYPE)
{
 80a7030:	b580      	push	{r7, lr}
 80a7032:	b084      	sub	sp, #16
 80a7034:	af00      	add	r7, sp, #0
 80a7036:	4603      	mov	r3, r0
 80a7038:	71fb      	strb	r3, [r7, #7]
  int32_t ret = 0;
 80a703a:	2300      	movs	r3, #0
 80a703c:	60fb      	str	r3, [r7, #12]
  if (SENSOR_TYPE == SENSOR_TYPE_ACCELEROMETER && acc_activate_count > 0) {
 80a703e:	79fb      	ldrb	r3, [r7, #7]
 80a7040:	2b00      	cmp	r3, #0
 80a7042:	d109      	bne.n	80a7058 <lsm6dso_disable+0x28>
 80a7044:	4b1d      	ldr	r3, [pc, #116]	; (80a70bc <lsm6dso_disable+0x8c>)
 80a7046:	781b      	ldrb	r3, [r3, #0]
 80a7048:	2b00      	cmp	r3, #0
 80a704a:	d005      	beq.n	80a7058 <lsm6dso_disable+0x28>
    acc_activate_count--;
 80a704c:	4b1b      	ldr	r3, [pc, #108]	; (80a70bc <lsm6dso_disable+0x8c>)
 80a704e:	781b      	ldrb	r3, [r3, #0]
 80a7050:	3b01      	subs	r3, #1
 80a7052:	b2da      	uxtb	r2, r3
 80a7054:	4b19      	ldr	r3, [pc, #100]	; (80a70bc <lsm6dso_disable+0x8c>)
 80a7056:	701a      	strb	r2, [r3, #0]
  }

  if (SENSOR_TYPE == SENSOR_TYPE_GYROSCOPE && gyro_activate_count > 0) {
 80a7058:	79fb      	ldrb	r3, [r7, #7]
 80a705a:	2b02      	cmp	r3, #2
 80a705c:	d109      	bne.n	80a7072 <lsm6dso_disable+0x42>
 80a705e:	4b18      	ldr	r3, [pc, #96]	; (80a70c0 <lsm6dso_disable+0x90>)
 80a7060:	781b      	ldrb	r3, [r3, #0]
 80a7062:	2b00      	cmp	r3, #0
 80a7064:	d005      	beq.n	80a7072 <lsm6dso_disable+0x42>
    gyro_activate_count--;
 80a7066:	4b16      	ldr	r3, [pc, #88]	; (80a70c0 <lsm6dso_disable+0x90>)
 80a7068:	781b      	ldrb	r3, [r3, #0]
 80a706a:	3b01      	subs	r3, #1
 80a706c:	b2da      	uxtb	r2, r3
 80a706e:	4b14      	ldr	r3, [pc, #80]	; (80a70c0 <lsm6dso_disable+0x90>)
 80a7070:	701a      	strb	r2, [r3, #0]
  }

  if (gyro_activate_count == 0)
 80a7072:	4b13      	ldr	r3, [pc, #76]	; (80a70c0 <lsm6dso_disable+0x90>)
 80a7074:	781b      	ldrb	r3, [r3, #0]
 80a7076:	2b00      	cmp	r3, #0
 80a7078:	d102      	bne.n	80a7080 <lsm6dso_disable+0x50>
    gyro_activated = false;
 80a707a:	4b12      	ldr	r3, [pc, #72]	; (80a70c4 <lsm6dso_disable+0x94>)
 80a707c:	2200      	movs	r2, #0
 80a707e:	701a      	strb	r2, [r3, #0]

  if (acc_activate_count == 0)
 80a7080:	4b0e      	ldr	r3, [pc, #56]	; (80a70bc <lsm6dso_disable+0x8c>)
 80a7082:	781b      	ldrb	r3, [r3, #0]
 80a7084:	2b00      	cmp	r3, #0
 80a7086:	d102      	bne.n	80a708e <lsm6dso_disable+0x5e>
    acc_activated = false;
 80a7088:	4b0f      	ldr	r3, [pc, #60]	; (80a70c8 <lsm6dso_disable+0x98>)
 80a708a:	2200      	movs	r2, #0
 80a708c:	701a      	strb	r2, [r3, #0]

  if (acc_activate_count == 0 && gyro_activate_count == 0) {
 80a708e:	4b0b      	ldr	r3, [pc, #44]	; (80a70bc <lsm6dso_disable+0x8c>)
 80a7090:	781b      	ldrb	r3, [r3, #0]
 80a7092:	2b00      	cmp	r3, #0
 80a7094:	d10c      	bne.n	80a70b0 <lsm6dso_disable+0x80>
 80a7096:	4b0a      	ldr	r3, [pc, #40]	; (80a70c0 <lsm6dso_disable+0x90>)
 80a7098:	781b      	ldrb	r3, [r3, #0]
 80a709a:	2b00      	cmp	r3, #0
 80a709c:	d108      	bne.n	80a70b0 <lsm6dso_disable+0x80>
    ret = lsm6dso_block_data_update_set(&dev_ctx, PROPERTY_DISABLE);
 80a709e:	2100      	movs	r1, #0
 80a70a0:	480a      	ldr	r0, [pc, #40]	; (80a70cc <lsm6dso_disable+0x9c>)
 80a70a2:	f000 fcd5 	bl	80a7a50 <lsm6dso_block_data_update_set>
 80a70a6:	60f8      	str	r0, [r7, #12]
    pid_pwm_control(PWM_DEACTIVATE, 0);
 80a70a8:	2100      	movs	r1, #0
 80a70aa:	2001      	movs	r0, #1
 80a70ac:	f7ff fa39 	bl	80a6522 <pid_pwm_control>
  }
  return ret;
 80a70b0:	68fb      	ldr	r3, [r7, #12]
}
 80a70b2:	4618      	mov	r0, r3
 80a70b4:	3710      	adds	r7, #16
 80a70b6:	46bd      	mov	sp, r7
 80a70b8:	bd80      	pop	{r7, pc}
 80a70ba:	bf00      	nop
 80a70bc:	20008080 	.word	0x20008080
 80a70c0:	20008081 	.word	0x20008081
 80a70c4:	20008083 	.word	0x20008083
 80a70c8:	20008082 	.word	0x20008082
 80a70cc:	20008070 	.word	0x20008070

080a70d0 <lsm6dso_acc_activate>:

int lsm6dso_acc_activate(bool activate)
{
 80a70d0:	b580      	push	{r7, lr}
 80a70d2:	b084      	sub	sp, #16
 80a70d4:	af00      	add	r7, sp, #0
 80a70d6:	4603      	mov	r3, r0
 80a70d8:	71fb      	strb	r3, [r7, #7]
  int res = 0;
 80a70da:	2300      	movs	r3, #0
 80a70dc:	60fb      	str	r3, [r7, #12]
  printf("lsm6dso_acc_activate: %d \r\n", activate);
 80a70de:	79fb      	ldrb	r3, [r7, #7]
 80a70e0:	4619      	mov	r1, r3
 80a70e2:	480a      	ldr	r0, [pc, #40]	; (80a710c <lsm6dso_acc_activate+0x3c>)
 80a70e4:	f019 fc46 	bl	80c0974 <iprintf>
  if (activate) {
 80a70e8:	79fb      	ldrb	r3, [r7, #7]
 80a70ea:	2b00      	cmp	r3, #0
 80a70ec:	d004      	beq.n	80a70f8 <lsm6dso_acc_activate+0x28>
    res = lsm6dso_enable((uint8_t) SENSOR_TYPE_ACCELEROMETER);
 80a70ee:	2000      	movs	r0, #0
 80a70f0:	f7ff ff32 	bl	80a6f58 <lsm6dso_enable>
 80a70f4:	60f8      	str	r0, [r7, #12]
 80a70f6:	e003      	b.n	80a7100 <lsm6dso_acc_activate+0x30>
  } else {
    res = lsm6dso_disable((uint8_t) SENSOR_TYPE_ACCELEROMETER);
 80a70f8:	2000      	movs	r0, #0
 80a70fa:	f7ff ff99 	bl	80a7030 <lsm6dso_disable>
 80a70fe:	60f8      	str	r0, [r7, #12]
  }
  return res;
 80a7100:	68fb      	ldr	r3, [r7, #12]
}
 80a7102:	4618      	mov	r0, r3
 80a7104:	3710      	adds	r7, #16
 80a7106:	46bd      	mov	sp, r7
 80a7108:	bd80      	pop	{r7, pc}
 80a710a:	bf00      	nop
 80a710c:	080c5904 	.word	0x080c5904

080a7110 <lsm6dso_gyro_activate>:

int lsm6dso_gyro_activate(bool activate)
{
 80a7110:	b580      	push	{r7, lr}
 80a7112:	b084      	sub	sp, #16
 80a7114:	af00      	add	r7, sp, #0
 80a7116:	4603      	mov	r3, r0
 80a7118:	71fb      	strb	r3, [r7, #7]
  int res = 0;
 80a711a:	2300      	movs	r3, #0
 80a711c:	60fb      	str	r3, [r7, #12]
  printf("lsm6dso_gyro_activate: %d \r\n", activate);
 80a711e:	79fb      	ldrb	r3, [r7, #7]
 80a7120:	4619      	mov	r1, r3
 80a7122:	480a      	ldr	r0, [pc, #40]	; (80a714c <lsm6dso_gyro_activate+0x3c>)
 80a7124:	f019 fc26 	bl	80c0974 <iprintf>
  if (activate) {
 80a7128:	79fb      	ldrb	r3, [r7, #7]
 80a712a:	2b00      	cmp	r3, #0
 80a712c:	d004      	beq.n	80a7138 <lsm6dso_gyro_activate+0x28>
    res = lsm6dso_enable((uint8_t) SENSOR_TYPE_GYROSCOPE);
 80a712e:	2002      	movs	r0, #2
 80a7130:	f7ff ff12 	bl	80a6f58 <lsm6dso_enable>
 80a7134:	60f8      	str	r0, [r7, #12]
 80a7136:	e003      	b.n	80a7140 <lsm6dso_gyro_activate+0x30>
  } else {
    res = lsm6dso_disable((uint8_t) SENSOR_TYPE_GYROSCOPE);
 80a7138:	2002      	movs	r0, #2
 80a713a:	f7ff ff79 	bl	80a7030 <lsm6dso_disable>
 80a713e:	60f8      	str	r0, [r7, #12]
  }
  return res;
 80a7140:	68fb      	ldr	r3, [r7, #12]
}
 80a7142:	4618      	mov	r0, r3
 80a7144:	3710      	adds	r7, #16
 80a7146:	46bd      	mov	sp, r7
 80a7148:	bd80      	pop	{r7, pc}
 80a714a:	bf00      	nop
 80a714c:	080c5920 	.word	0x080c5920

080a7150 <lsm6dso_init_complete>:

int lsm6dso_init_complete(void *para)
{
 80a7150:	b480      	push	{r7}
 80a7152:	b083      	sub	sp, #12
 80a7154:	af00      	add	r7, sp, #0
 80a7156:	6078      	str	r0, [r7, #4]
  //send init complete event to smgr?
  return SENSOR_SUCCESS;
 80a7158:	2300      	movs	r3, #0
}
 80a715a:	4618      	mov	r0, r3
 80a715c:	370c      	adds	r7, #12
 80a715e:	46bd      	mov	sp, r7
 80a7160:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a7164:	4770      	bx	lr
	...

080a7168 <lsm6dso_acc_config>:

int lsm6dso_acc_config(uint8_t config_type, void *para)
{
 80a7168:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80a716c:	b09c      	sub	sp, #112	; 0x70
 80a716e:	af04      	add	r7, sp, #16
 80a7170:	4603      	mov	r3, r0
 80a7172:	6039      	str	r1, [r7, #0]
 80a7174:	71fb      	strb	r3, [r7, #7]
  int res = 0;
 80a7176:	2300      	movs	r3, #0
 80a7178:	65fb      	str	r3, [r7, #92]	; 0x5c
  sensors_event_t sensor_data = { 0 };
 80a717a:	f107 0308 	add.w	r3, r7, #8
 80a717e:	2250      	movs	r2, #80	; 0x50
 80a7180:	2100      	movs	r1, #0
 80a7182:	4618      	mov	r0, r3
 80a7184:	f018 ff1a 	bl	80bffbc <memset>

  switch (config_type) {
 80a7188:	79fb      	ldrb	r3, [r7, #7]
 80a718a:	3b02      	subs	r3, #2
 80a718c:	2b06      	cmp	r3, #6
 80a718e:	f200 8091 	bhi.w	80a72b4 <lsm6dso_acc_config+0x14c>
 80a7192:	a201      	add	r2, pc, #4	; (adr r2, 80a7198 <lsm6dso_acc_config+0x30>)
 80a7194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80a7198:	080a71b5 	.word	0x080a71b5
 80a719c:	080a71bf 	.word	0x080a71bf
 80a71a0:	080a7215 	.word	0x080a7215
 80a71a4:	080a72b5 	.word	0x080a72b5
 80a71a8:	080a72b5 	.word	0x080a72b5
 80a71ac:	080a72b5 	.word	0x080a72b5
 80a71b0:	080a7275 	.word	0x080a7275
  case SENSOR_CONFIG_SELFTEST:
    res = lsm6dso_acc_self_test(&dev_ctx);
 80a71b4:	4845      	ldr	r0, [pc, #276]	; (80a72cc <lsm6dso_acc_config+0x164>)
 80a71b6:	f7fe fba9 	bl	80a590c <lsm6dso_acc_self_test>
 80a71ba:	65f8      	str	r0, [r7, #92]	; 0x5c
    break;
 80a71bc:	e07f      	b.n	80a72be <lsm6dso_acc_config+0x156>
  case SENSOR_CONFIG_CALIBRATION:
    printf("acc cali message \r\n");
 80a71be:	4844      	ldr	r0, [pc, #272]	; (80a72d0 <lsm6dso_acc_config+0x168>)
 80a71c0:	f019 fc74 	bl	80c0aac <puts>
    res = lsm6dso_acc_calibration(&dev_ctx, acceleration_offset);
 80a71c4:	4943      	ldr	r1, [pc, #268]	; (80a72d4 <lsm6dso_acc_config+0x16c>)
 80a71c6:	4841      	ldr	r0, [pc, #260]	; (80a72cc <lsm6dso_acc_config+0x164>)
 80a71c8:	f7fe ff0c 	bl	80a5fe4 <lsm6dso_acc_calibration>
 80a71cc:	65f8      	str	r0, [r7, #92]	; 0x5c
    if (res == 0) {
 80a71ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80a71d0:	2b00      	cmp	r3, #0
 80a71d2:	d171      	bne.n	80a72b8 <lsm6dso_acc_config+0x150>
      memcpy(acc_gyro_init_parms->board_calidata->acc_bias, acceleration_offset,
 80a71d4:	4b40      	ldr	r3, [pc, #256]	; (80a72d8 <lsm6dso_acc_config+0x170>)
 80a71d6:	681b      	ldr	r3, [r3, #0]
 80a71d8:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80a71dc:	220c      	movs	r2, #12
 80a71de:	493d      	ldr	r1, [pc, #244]	; (80a72d4 <lsm6dso_acc_config+0x16c>)
 80a71e0:	4618      	mov	r0, r3
 80a71e2:	f018 fedd 	bl	80bffa0 <memcpy>
             sizeof(float[3]));
      if (acc_gyro_init_parms->board_calidata->acc_cali_ver != DEFAULT_VERSION)
 80a71e6:	4b3c      	ldr	r3, [pc, #240]	; (80a72d8 <lsm6dso_acc_config+0x170>)
 80a71e8:	681b      	ldr	r3, [r3, #0]
 80a71ea:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80a71ee:	68db      	ldr	r3, [r3, #12]
 80a71f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80a71f4:	d007      	beq.n	80a7206 <lsm6dso_acc_config+0x9e>
        acc_gyro_init_parms->board_calidata->acc_cali_ver++;
 80a71f6:	4b38      	ldr	r3, [pc, #224]	; (80a72d8 <lsm6dso_acc_config+0x170>)
 80a71f8:	681b      	ldr	r3, [r3, #0]
 80a71fa:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80a71fe:	68da      	ldr	r2, [r3, #12]
 80a7200:	3201      	adds	r2, #1
 80a7202:	60da      	str	r2, [r3, #12]
      else
        acc_gyro_init_parms->board_calidata->acc_cali_ver = 1;
    }
    break;
 80a7204:	e058      	b.n	80a72b8 <lsm6dso_acc_config+0x150>
        acc_gyro_init_parms->board_calidata->acc_cali_ver = 1;
 80a7206:	4b34      	ldr	r3, [pc, #208]	; (80a72d8 <lsm6dso_acc_config+0x170>)
 80a7208:	681b      	ldr	r3, [r3, #0]
 80a720a:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80a720e:	2201      	movs	r2, #1
 80a7210:	60da      	str	r2, [r3, #12]
    break;
 80a7212:	e051      	b.n	80a72b8 <lsm6dso_acc_config+0x150>
  case SENSOR_CONFIG_BIAS:
    if (acc_gyro_init_parms->board_calidata->acc_cali_ver != DEFAULT_VERSION) {
 80a7214:	4b30      	ldr	r3, [pc, #192]	; (80a72d8 <lsm6dso_acc_config+0x170>)
 80a7216:	681b      	ldr	r3, [r3, #0]
 80a7218:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80a721c:	68db      	ldr	r3, [r3, #12]
 80a721e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80a7222:	d04b      	beq.n	80a72bc <lsm6dso_acc_config+0x154>
      memcpy(acceleration_offset, acc_gyro_init_parms->board_calidata->acc_bias,
 80a7224:	4b2c      	ldr	r3, [pc, #176]	; (80a72d8 <lsm6dso_acc_config+0x170>)
 80a7226:	681b      	ldr	r3, [r3, #0]
 80a7228:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80a722c:	220c      	movs	r2, #12
 80a722e:	4619      	mov	r1, r3
 80a7230:	4828      	ldr	r0, [pc, #160]	; (80a72d4 <lsm6dso_acc_config+0x16c>)
 80a7232:	f018 feb5 	bl	80bffa0 <memcpy>
             sizeof(float[3]));
      printf("acc bias data: {%f, %f, %f} \r\n", acceleration_offset[0],
 80a7236:	4b27      	ldr	r3, [pc, #156]	; (80a72d4 <lsm6dso_acc_config+0x16c>)
 80a7238:	681b      	ldr	r3, [r3, #0]
 80a723a:	4618      	mov	r0, r3
 80a723c:	f7f9 f984 	bl	80a0548 <__aeabi_f2d>
 80a7240:	4680      	mov	r8, r0
 80a7242:	4689      	mov	r9, r1
             acceleration_offset[1], acceleration_offset[2]);
 80a7244:	4b23      	ldr	r3, [pc, #140]	; (80a72d4 <lsm6dso_acc_config+0x16c>)
 80a7246:	685b      	ldr	r3, [r3, #4]
      printf("acc bias data: {%f, %f, %f} \r\n", acceleration_offset[0],
 80a7248:	4618      	mov	r0, r3
 80a724a:	f7f9 f97d 	bl	80a0548 <__aeabi_f2d>
 80a724e:	4604      	mov	r4, r0
 80a7250:	460d      	mov	r5, r1
             acceleration_offset[1], acceleration_offset[2]);
 80a7252:	4b20      	ldr	r3, [pc, #128]	; (80a72d4 <lsm6dso_acc_config+0x16c>)
 80a7254:	689b      	ldr	r3, [r3, #8]
      printf("acc bias data: {%f, %f, %f} \r\n", acceleration_offset[0],
 80a7256:	4618      	mov	r0, r3
 80a7258:	f7f9 f976 	bl	80a0548 <__aeabi_f2d>
 80a725c:	4602      	mov	r2, r0
 80a725e:	460b      	mov	r3, r1
 80a7260:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80a7264:	e9cd 4500 	strd	r4, r5, [sp]
 80a7268:	4642      	mov	r2, r8
 80a726a:	464b      	mov	r3, r9
 80a726c:	481b      	ldr	r0, [pc, #108]	; (80a72dc <lsm6dso_acc_config+0x174>)
 80a726e:	f019 fb81 	bl	80c0974 <iprintf>
    }
    break;
 80a7272:	e023      	b.n	80a72bc <lsm6dso_acc_config+0x154>
  case SENSOR_CALIBRATION_RESULT:
    sensor_data.sensor_type = SENSOR_TYPE_ACCELEROMETER;
 80a7274:	2300      	movs	r3, #0
 80a7276:	723b      	strb	r3, [r7, #8]
    sensor_data.accuracy = 0xFF;
 80a7278:	23ff      	movs	r3, #255	; 0xff
 80a727a:	727b      	strb	r3, [r7, #9]
    sensor_data.timestamp = osKernelGetTickCount();
 80a727c:	f00e fe6c 	bl	80b5f58 <osKernelGetTickCount>
 80a7280:	4603      	mov	r3, r0
 80a7282:	461a      	mov	r2, r3
 80a7284:	f04f 0300 	mov.w	r3, #0
 80a7288:	e9c7 2304 	strd	r2, r3, [r7, #16]
    sensor_data.sensor_data_t.vec.data[0] = acceleration_offset[0];
 80a728c:	4b11      	ldr	r3, [pc, #68]	; (80a72d4 <lsm6dso_acc_config+0x16c>)
 80a728e:	681b      	ldr	r3, [r3, #0]
 80a7290:	61bb      	str	r3, [r7, #24]
    sensor_data.sensor_data_t.vec.data[1] = acceleration_offset[1];
 80a7292:	4b10      	ldr	r3, [pc, #64]	; (80a72d4 <lsm6dso_acc_config+0x16c>)
 80a7294:	685b      	ldr	r3, [r3, #4]
 80a7296:	61fb      	str	r3, [r7, #28]
    sensor_data.sensor_data_t.vec.data[2] = acceleration_offset[2];
 80a7298:	4b0e      	ldr	r3, [pc, #56]	; (80a72d4 <lsm6dso_acc_config+0x16c>)
 80a729a:	689b      	ldr	r3, [r3, #8]
 80a729c:	623b      	str	r3, [r7, #32]
    osMessageQueuePut(acc_gyro_init_parms->SensorDataQHandle,
 80a729e:	4b0e      	ldr	r3, [pc, #56]	; (80a72d8 <lsm6dso_acc_config+0x170>)
 80a72a0:	681b      	ldr	r3, [r3, #0]
 80a72a2:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 80a72a6:	f107 0108 	add.w	r1, r7, #8
 80a72aa:	2300      	movs	r3, #0
 80a72ac:	2200      	movs	r2, #0
 80a72ae:	f00f f8a9 	bl	80b6404 <osMessageQueuePut>
                      &sensor_data, 0, 0);
    break;
 80a72b2:	e004      	b.n	80a72be <lsm6dso_acc_config+0x156>
  default:
    break;
 80a72b4:	bf00      	nop
 80a72b6:	e002      	b.n	80a72be <lsm6dso_acc_config+0x156>
    break;
 80a72b8:	bf00      	nop
 80a72ba:	e000      	b.n	80a72be <lsm6dso_acc_config+0x156>
    break;
 80a72bc:	bf00      	nop
  }

  return res;
 80a72be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 80a72c0:	4618      	mov	r0, r3
 80a72c2:	3760      	adds	r7, #96	; 0x60
 80a72c4:	46bd      	mov	sp, r7
 80a72c6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80a72ca:	bf00      	nop
 80a72cc:	20008070 	.word	0x20008070
 80a72d0:	080c5940 	.word	0x080c5940
 80a72d4:	20008024 	.word	0x20008024
 80a72d8:	2000807c 	.word	0x2000807c
 80a72dc:	080c5954 	.word	0x080c5954

080a72e0 <lsm6dso_gyro_config>:

int lsm6dso_gyro_config(uint8_t config_type, void *para)
{
 80a72e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80a72e4:	b09c      	sub	sp, #112	; 0x70
 80a72e6:	af04      	add	r7, sp, #16
 80a72e8:	4603      	mov	r3, r0
 80a72ea:	6039      	str	r1, [r7, #0]
 80a72ec:	71fb      	strb	r3, [r7, #7]
  int res = 0;
 80a72ee:	2300      	movs	r3, #0
 80a72f0:	65fb      	str	r3, [r7, #92]	; 0x5c
  sensors_event_t sensor_data = { 0 };
 80a72f2:	f107 0308 	add.w	r3, r7, #8
 80a72f6:	2250      	movs	r2, #80	; 0x50
 80a72f8:	2100      	movs	r1, #0
 80a72fa:	4618      	mov	r0, r3
 80a72fc:	f018 fe5e 	bl	80bffbc <memset>

  switch (config_type) {
 80a7300:	79fb      	ldrb	r3, [r7, #7]
 80a7302:	3b02      	subs	r3, #2
 80a7304:	2b06      	cmp	r3, #6
 80a7306:	f200 8091 	bhi.w	80a742c <lsm6dso_gyro_config+0x14c>
 80a730a:	a201      	add	r2, pc, #4	; (adr r2, 80a7310 <lsm6dso_gyro_config+0x30>)
 80a730c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80a7310:	080a732d 	.word	0x080a732d
 80a7314:	080a7337 	.word	0x080a7337
 80a7318:	080a738f 	.word	0x080a738f
 80a731c:	080a742d 	.word	0x080a742d
 80a7320:	080a742d 	.word	0x080a742d
 80a7324:	080a742d 	.word	0x080a742d
 80a7328:	080a73f1 	.word	0x080a73f1
  case SENSOR_CONFIG_SELFTEST:
    res = lsm6dso_gyro_self_test(&dev_ctx);
 80a732c:	4845      	ldr	r0, [pc, #276]	; (80a7444 <lsm6dso_gyro_config+0x164>)
 80a732e:	f7fe fcab 	bl	80a5c88 <lsm6dso_gyro_self_test>
 80a7332:	65f8      	str	r0, [r7, #92]	; 0x5c
    break;
 80a7334:	e07f      	b.n	80a7436 <lsm6dso_gyro_config+0x156>
  case SENSOR_CONFIG_CALIBRATION:
    printf("gyro cali message \r\n");
 80a7336:	4844      	ldr	r0, [pc, #272]	; (80a7448 <lsm6dso_gyro_config+0x168>)
 80a7338:	f019 fbb8 	bl	80c0aac <puts>
    res = lsm6dso_gyro_calibration(&dev_ctx, angular_rate_offset);
 80a733c:	4943      	ldr	r1, [pc, #268]	; (80a744c <lsm6dso_gyro_config+0x16c>)
 80a733e:	4841      	ldr	r0, [pc, #260]	; (80a7444 <lsm6dso_gyro_config+0x164>)
 80a7340:	f7fe ff7e 	bl	80a6240 <lsm6dso_gyro_calibration>
 80a7344:	65f8      	str	r0, [r7, #92]	; 0x5c
    if (res == 0) {
 80a7346:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80a7348:	2b00      	cmp	r3, #0
 80a734a:	d171      	bne.n	80a7430 <lsm6dso_gyro_config+0x150>
      memcpy(acc_gyro_init_parms->board_calidata->gyro_bias,
 80a734c:	4b40      	ldr	r3, [pc, #256]	; (80a7450 <lsm6dso_gyro_config+0x170>)
 80a734e:	681b      	ldr	r3, [r3, #0]
 80a7350:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80a7354:	3310      	adds	r3, #16
 80a7356:	220c      	movs	r2, #12
 80a7358:	493c      	ldr	r1, [pc, #240]	; (80a744c <lsm6dso_gyro_config+0x16c>)
 80a735a:	4618      	mov	r0, r3
 80a735c:	f018 fe20 	bl	80bffa0 <memcpy>
             angular_rate_offset, sizeof(float[3]));
      if (acc_gyro_init_parms->board_calidata->gyr_cali_ver != DEFAULT_VERSION)
 80a7360:	4b3b      	ldr	r3, [pc, #236]	; (80a7450 <lsm6dso_gyro_config+0x170>)
 80a7362:	681b      	ldr	r3, [r3, #0]
 80a7364:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80a7368:	69db      	ldr	r3, [r3, #28]
 80a736a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80a736e:	d007      	beq.n	80a7380 <lsm6dso_gyro_config+0xa0>
        acc_gyro_init_parms->board_calidata->gyr_cali_ver++;
 80a7370:	4b37      	ldr	r3, [pc, #220]	; (80a7450 <lsm6dso_gyro_config+0x170>)
 80a7372:	681b      	ldr	r3, [r3, #0]
 80a7374:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80a7378:	69da      	ldr	r2, [r3, #28]
 80a737a:	3201      	adds	r2, #1
 80a737c:	61da      	str	r2, [r3, #28]
      else
        acc_gyro_init_parms->board_calidata->gyr_cali_ver = 1;
    }
    break;
 80a737e:	e057      	b.n	80a7430 <lsm6dso_gyro_config+0x150>
        acc_gyro_init_parms->board_calidata->gyr_cali_ver = 1;
 80a7380:	4b33      	ldr	r3, [pc, #204]	; (80a7450 <lsm6dso_gyro_config+0x170>)
 80a7382:	681b      	ldr	r3, [r3, #0]
 80a7384:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80a7388:	2201      	movs	r2, #1
 80a738a:	61da      	str	r2, [r3, #28]
    break;
 80a738c:	e050      	b.n	80a7430 <lsm6dso_gyro_config+0x150>
  case SENSOR_CONFIG_BIAS:
    if (acc_gyro_init_parms->board_calidata->gyr_cali_ver != DEFAULT_VERSION) {
 80a738e:	4b30      	ldr	r3, [pc, #192]	; (80a7450 <lsm6dso_gyro_config+0x170>)
 80a7390:	681b      	ldr	r3, [r3, #0]
 80a7392:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80a7396:	69db      	ldr	r3, [r3, #28]
 80a7398:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80a739c:	d04a      	beq.n	80a7434 <lsm6dso_gyro_config+0x154>
      memcpy(angular_rate_offset,
             acc_gyro_init_parms->board_calidata->gyro_bias, sizeof(float[3]));
 80a739e:	4b2c      	ldr	r3, [pc, #176]	; (80a7450 <lsm6dso_gyro_config+0x170>)
 80a73a0:	681b      	ldr	r3, [r3, #0]
 80a73a2:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80a73a6:	3310      	adds	r3, #16
      memcpy(angular_rate_offset,
 80a73a8:	220c      	movs	r2, #12
 80a73aa:	4619      	mov	r1, r3
 80a73ac:	4827      	ldr	r0, [pc, #156]	; (80a744c <lsm6dso_gyro_config+0x16c>)
 80a73ae:	f018 fdf7 	bl	80bffa0 <memcpy>
      printf("gyro bias data: {%f, %f, %f} \r\n", angular_rate_offset[0],
 80a73b2:	4b26      	ldr	r3, [pc, #152]	; (80a744c <lsm6dso_gyro_config+0x16c>)
 80a73b4:	681b      	ldr	r3, [r3, #0]
 80a73b6:	4618      	mov	r0, r3
 80a73b8:	f7f9 f8c6 	bl	80a0548 <__aeabi_f2d>
 80a73bc:	4680      	mov	r8, r0
 80a73be:	4689      	mov	r9, r1
             angular_rate_offset[1], angular_rate_offset[2]);
 80a73c0:	4b22      	ldr	r3, [pc, #136]	; (80a744c <lsm6dso_gyro_config+0x16c>)
 80a73c2:	685b      	ldr	r3, [r3, #4]
      printf("gyro bias data: {%f, %f, %f} \r\n", angular_rate_offset[0],
 80a73c4:	4618      	mov	r0, r3
 80a73c6:	f7f9 f8bf 	bl	80a0548 <__aeabi_f2d>
 80a73ca:	4604      	mov	r4, r0
 80a73cc:	460d      	mov	r5, r1
             angular_rate_offset[1], angular_rate_offset[2]);
 80a73ce:	4b1f      	ldr	r3, [pc, #124]	; (80a744c <lsm6dso_gyro_config+0x16c>)
 80a73d0:	689b      	ldr	r3, [r3, #8]
      printf("gyro bias data: {%f, %f, %f} \r\n", angular_rate_offset[0],
 80a73d2:	4618      	mov	r0, r3
 80a73d4:	f7f9 f8b8 	bl	80a0548 <__aeabi_f2d>
 80a73d8:	4602      	mov	r2, r0
 80a73da:	460b      	mov	r3, r1
 80a73dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80a73e0:	e9cd 4500 	strd	r4, r5, [sp]
 80a73e4:	4642      	mov	r2, r8
 80a73e6:	464b      	mov	r3, r9
 80a73e8:	481a      	ldr	r0, [pc, #104]	; (80a7454 <lsm6dso_gyro_config+0x174>)
 80a73ea:	f019 fac3 	bl	80c0974 <iprintf>
    }
    break;
 80a73ee:	e021      	b.n	80a7434 <lsm6dso_gyro_config+0x154>
  case SENSOR_CALIBRATION_RESULT:
    sensor_data.sensor_type = SENSOR_TYPE_GYROSCOPE;
 80a73f0:	2302      	movs	r3, #2
 80a73f2:	723b      	strb	r3, [r7, #8]
    sensor_data.accuracy = 0xFF;
 80a73f4:	23ff      	movs	r3, #255	; 0xff
 80a73f6:	727b      	strb	r3, [r7, #9]
    sensor_data.timestamp = sensor_get_timestamp();
 80a73f8:	f006 f986 	bl	80ad708 <sensor_get_timestamp>
 80a73fc:	4602      	mov	r2, r0
 80a73fe:	460b      	mov	r3, r1
 80a7400:	e9c7 2304 	strd	r2, r3, [r7, #16]
    sensor_data.sensor_data_t.vec.data[0] = angular_rate_offset[0];
 80a7404:	4b11      	ldr	r3, [pc, #68]	; (80a744c <lsm6dso_gyro_config+0x16c>)
 80a7406:	681b      	ldr	r3, [r3, #0]
 80a7408:	61bb      	str	r3, [r7, #24]
    sensor_data.sensor_data_t.vec.data[1] = angular_rate_offset[1];
 80a740a:	4b10      	ldr	r3, [pc, #64]	; (80a744c <lsm6dso_gyro_config+0x16c>)
 80a740c:	685b      	ldr	r3, [r3, #4]
 80a740e:	61fb      	str	r3, [r7, #28]
    sensor_data.sensor_data_t.vec.data[2] = angular_rate_offset[2];
 80a7410:	4b0e      	ldr	r3, [pc, #56]	; (80a744c <lsm6dso_gyro_config+0x16c>)
 80a7412:	689b      	ldr	r3, [r3, #8]
 80a7414:	623b      	str	r3, [r7, #32]
    osMessageQueuePut(acc_gyro_init_parms->SensorDataQHandle,
 80a7416:	4b0e      	ldr	r3, [pc, #56]	; (80a7450 <lsm6dso_gyro_config+0x170>)
 80a7418:	681b      	ldr	r3, [r3, #0]
 80a741a:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 80a741e:	f107 0108 	add.w	r1, r7, #8
 80a7422:	2300      	movs	r3, #0
 80a7424:	2200      	movs	r2, #0
 80a7426:	f00e ffed 	bl	80b6404 <osMessageQueuePut>
                      &sensor_data, 0, 0);
    break;
 80a742a:	e004      	b.n	80a7436 <lsm6dso_gyro_config+0x156>
  default:
    break;
 80a742c:	bf00      	nop
 80a742e:	e002      	b.n	80a7436 <lsm6dso_gyro_config+0x156>
    break;
 80a7430:	bf00      	nop
 80a7432:	e000      	b.n	80a7436 <lsm6dso_gyro_config+0x156>
    break;
 80a7434:	bf00      	nop
  }
  return res;
 80a7436:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 80a7438:	4618      	mov	r0, r3
 80a743a:	3760      	adds	r7, #96	; 0x60
 80a743c:	46bd      	mov	sp, r7
 80a743e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80a7442:	bf00      	nop
 80a7444:	20008070 	.word	0x20008070
 80a7448:	080c5974 	.word	0x080c5974
 80a744c:	20008030 	.word	0x20008030
 80a7450:	2000807c 	.word	0x2000807c
 80a7454:	080c5988 	.word	0x080c5988

080a7458 <lsm6dso_publish_config_resp>:

int lsm6dso_publish_config_resp(void *para)
{
 80a7458:	b480      	push	{r7}
 80a745a:	b083      	sub	sp, #12
 80a745c:	af00      	add	r7, sp, #0
 80a745e:	6078      	str	r0, [r7, #4]
  //send calibration result to AP using this function
  return SENSOR_SUCCESS;
 80a7460:	2300      	movs	r3, #0
}
 80a7462:	4618      	mov	r0, r3
 80a7464:	370c      	adds	r7, #12
 80a7466:	46bd      	mov	sp, r7
 80a7468:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a746c:	4770      	bx	lr

080a746e <lsm6dso_read_reg>:
 * @retval          interface status (MANDATORY: return 0 -> no Error)
 *
 */
int32_t lsm6dso_read_reg(stmdev_ctx_t * ctx, uint8_t reg, uint8_t * data,
                         uint16_t len)
{
 80a746e:	b590      	push	{r4, r7, lr}
 80a7470:	b087      	sub	sp, #28
 80a7472:	af00      	add	r7, sp, #0
 80a7474:	60f8      	str	r0, [r7, #12]
 80a7476:	607a      	str	r2, [r7, #4]
 80a7478:	461a      	mov	r2, r3
 80a747a:	460b      	mov	r3, r1
 80a747c:	72fb      	strb	r3, [r7, #11]
 80a747e:	4613      	mov	r3, r2
 80a7480:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80a7482:	68fb      	ldr	r3, [r7, #12]
 80a7484:	685c      	ldr	r4, [r3, #4]
 80a7486:	68fb      	ldr	r3, [r7, #12]
 80a7488:	6898      	ldr	r0, [r3, #8]
 80a748a:	893b      	ldrh	r3, [r7, #8]
 80a748c:	7af9      	ldrb	r1, [r7, #11]
 80a748e:	687a      	ldr	r2, [r7, #4]
 80a7490:	47a0      	blx	r4
 80a7492:	6178      	str	r0, [r7, #20]
  return ret;
 80a7494:	697b      	ldr	r3, [r7, #20]
}
 80a7496:	4618      	mov	r0, r3
 80a7498:	371c      	adds	r7, #28
 80a749a:	46bd      	mov	sp, r7
 80a749c:	bd90      	pop	{r4, r7, pc}

080a749e <lsm6dso_write_reg>:
 * @retval          interface status (MANDATORY: return 0 -> no Error)
 *
 */
int32_t lsm6dso_write_reg(stmdev_ctx_t * ctx, uint8_t reg, uint8_t * data,
                          uint16_t len)
{
 80a749e:	b590      	push	{r4, r7, lr}
 80a74a0:	b087      	sub	sp, #28
 80a74a2:	af00      	add	r7, sp, #0
 80a74a4:	60f8      	str	r0, [r7, #12]
 80a74a6:	607a      	str	r2, [r7, #4]
 80a74a8:	461a      	mov	r2, r3
 80a74aa:	460b      	mov	r3, r1
 80a74ac:	72fb      	strb	r3, [r7, #11]
 80a74ae:	4613      	mov	r3, r2
 80a74b0:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80a74b2:	68fb      	ldr	r3, [r7, #12]
 80a74b4:	681c      	ldr	r4, [r3, #0]
 80a74b6:	68fb      	ldr	r3, [r7, #12]
 80a74b8:	6898      	ldr	r0, [r3, #8]
 80a74ba:	893b      	ldrh	r3, [r7, #8]
 80a74bc:	7af9      	ldrb	r1, [r7, #11]
 80a74be:	687a      	ldr	r2, [r7, #4]
 80a74c0:	47a0      	blx	r4
 80a74c2:	6178      	str	r0, [r7, #20]
  return ret;
 80a74c4:	697b      	ldr	r3, [r7, #20]
}
 80a74c6:	4618      	mov	r0, r3
 80a74c8:	371c      	adds	r7, #28
 80a74ca:	46bd      	mov	sp, r7
 80a74cc:	bd90      	pop	{r4, r7, pc}
	...

080a74d0 <lsm6dso_from_fs4_to_mg>:
{
  return ((float_t) lsb) * 0.061f;
}

float_t lsm6dso_from_fs4_to_mg(int16_t lsb)
{
 80a74d0:	b480      	push	{r7}
 80a74d2:	b083      	sub	sp, #12
 80a74d4:	af00      	add	r7, sp, #0
 80a74d6:	4603      	mov	r3, r0
 80a74d8:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb) * 0.122f;
 80a74da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80a74de:	ee07 3a90 	vmov	s15, r3
 80a74e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80a74e6:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80a74fc <lsm6dso_from_fs4_to_mg+0x2c>
 80a74ea:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80a74ee:	eeb0 0a67 	vmov.f32	s0, s15
 80a74f2:	370c      	adds	r7, #12
 80a74f4:	46bd      	mov	sp, r7
 80a74f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a74fa:	4770      	bx	lr
 80a74fc:	3df9db23 	.word	0x3df9db23

080a7500 <lsm6dso_from_fs8_to_mg>:

float_t lsm6dso_from_fs8_to_mg(int16_t lsb)
{
 80a7500:	b480      	push	{r7}
 80a7502:	b083      	sub	sp, #12
 80a7504:	af00      	add	r7, sp, #0
 80a7506:	4603      	mov	r3, r0
 80a7508:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb) * 0.244f;
 80a750a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80a750e:	ee07 3a90 	vmov	s15, r3
 80a7512:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80a7516:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80a752c <lsm6dso_from_fs8_to_mg+0x2c>
 80a751a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80a751e:	eeb0 0a67 	vmov.f32	s0, s15
 80a7522:	370c      	adds	r7, #12
 80a7524:	46bd      	mov	sp, r7
 80a7526:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a752a:	4770      	bx	lr
 80a752c:	3e79db23 	.word	0x3e79db23

080a7530 <lsm6dso_from_fs1000_to_mdps>:
{
  return ((float_t) lsb) * 8.750f;
}

float_t lsm6dso_from_fs1000_to_mdps(int16_t lsb)
{
 80a7530:	b480      	push	{r7}
 80a7532:	b083      	sub	sp, #12
 80a7534:	af00      	add	r7, sp, #0
 80a7536:	4603      	mov	r3, r0
 80a7538:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb) * 35.0f;
 80a753a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80a753e:	ee07 3a90 	vmov	s15, r3
 80a7542:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80a7546:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80a755c <lsm6dso_from_fs1000_to_mdps+0x2c>
 80a754a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80a754e:	eeb0 0a67 	vmov.f32	s0, s15
 80a7552:	370c      	adds	r7, #12
 80a7554:	46bd      	mov	sp, r7
 80a7556:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a755a:	4770      	bx	lr
 80a755c:	420c0000 	.word	0x420c0000

080a7560 <lsm6dso_from_fs2000_to_mdps>:

float_t lsm6dso_from_fs2000_to_mdps(int16_t lsb)
{
 80a7560:	b480      	push	{r7}
 80a7562:	b083      	sub	sp, #12
 80a7564:	af00      	add	r7, sp, #0
 80a7566:	4603      	mov	r3, r0
 80a7568:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb) * 70.0f;
 80a756a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80a756e:	ee07 3a90 	vmov	s15, r3
 80a7572:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80a7576:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80a758c <lsm6dso_from_fs2000_to_mdps+0x2c>
 80a757a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80a757e:	eeb0 0a67 	vmov.f32	s0, s15
 80a7582:	370c      	adds	r7, #12
 80a7584:	46bd      	mov	sp, r7
 80a7586:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a758a:	4770      	bx	lr
 80a758c:	428c0000 	.word	0x428c0000

080a7590 <lsm6dso_from_lsb_to_celsius>:

float_t lsm6dso_from_lsb_to_celsius(int16_t lsb)
{
 80a7590:	b480      	push	{r7}
 80a7592:	b083      	sub	sp, #12
 80a7594:	af00      	add	r7, sp, #0
 80a7596:	4603      	mov	r3, r0
 80a7598:	80fb      	strh	r3, [r7, #6]
  return (((float_t) lsb / 256.0f) + 25.0f);
 80a759a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80a759e:	ee07 3a90 	vmov	s15, r3
 80a75a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80a75a6:	eddf 6a07 	vldr	s13, [pc, #28]	; 80a75c4 <lsm6dso_from_lsb_to_celsius+0x34>
 80a75aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80a75ae:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80a75b2:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 80a75b6:	eeb0 0a67 	vmov.f32	s0, s15
 80a75ba:	370c      	adds	r7, #12
 80a75bc:	46bd      	mov	sp, r7
 80a75be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a75c2:	4770      	bx	lr
 80a75c4:	43800000 	.word	0x43800000

080a75c8 <lsm6dso_xl_full_scale_set>:
 * @param  ctx      read / write interface definitions
 * @param  val      change the values of fs_xl in reg CTRL1_XL
 *
 */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t * ctx, lsm6dso_fs_xl_t val)
{
 80a75c8:	b580      	push	{r7, lr}
 80a75ca:	b084      	sub	sp, #16
 80a75cc:	af00      	add	r7, sp, #0
 80a75ce:	6078      	str	r0, [r7, #4]
 80a75d0:	460b      	mov	r3, r1
 80a75d2:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *) & reg, 1);
 80a75d4:	f107 0208 	add.w	r2, r7, #8
 80a75d8:	2301      	movs	r3, #1
 80a75da:	2110      	movs	r1, #16
 80a75dc:	6878      	ldr	r0, [r7, #4]
 80a75de:	f7ff ff46 	bl	80a746e <lsm6dso_read_reg>
 80a75e2:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80a75e4:	68fb      	ldr	r3, [r7, #12]
 80a75e6:	2b00      	cmp	r3, #0
 80a75e8:	d10f      	bne.n	80a760a <lsm6dso_xl_full_scale_set+0x42>
    reg.fs_xl = (uint8_t) val;
 80a75ea:	78fb      	ldrb	r3, [r7, #3]
 80a75ec:	f003 0303 	and.w	r3, r3, #3
 80a75f0:	b2da      	uxtb	r2, r3
 80a75f2:	7a3b      	ldrb	r3, [r7, #8]
 80a75f4:	f362 0383 	bfi	r3, r2, #2, #2
 80a75f8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *) & reg, 1);
 80a75fa:	f107 0208 	add.w	r2, r7, #8
 80a75fe:	2301      	movs	r3, #1
 80a7600:	2110      	movs	r1, #16
 80a7602:	6878      	ldr	r0, [r7, #4]
 80a7604:	f7ff ff4b 	bl	80a749e <lsm6dso_write_reg>
 80a7608:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80a760a:	68fb      	ldr	r3, [r7, #12]
}
 80a760c:	4618      	mov	r0, r3
 80a760e:	3710      	adds	r7, #16
 80a7610:	46bd      	mov	sp, r7
 80a7612:	bd80      	pop	{r7, pc}

080a7614 <lsm6dso_xl_data_rate_set>:
 * @param  ctx      read / write interface definitions
 * @param  val      change the values of odr_xl in reg CTRL1_XL
 *
 */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t * ctx, lsm6dso_odr_xl_t val)
{
 80a7614:	b580      	push	{r7, lr}
 80a7616:	b086      	sub	sp, #24
 80a7618:	af00      	add	r7, sp, #0
 80a761a:	6078      	str	r0, [r7, #4]
 80a761c:	460b      	mov	r3, r1
 80a761e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl = val;
 80a7620:	78fb      	ldrb	r3, [r7, #3]
 80a7622:	75fb      	strb	r3, [r7, #23]
  lsm6dso_emb_fsm_enable_t fsm_enable;
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret = lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 80a7624:	f107 030c 	add.w	r3, r7, #12
 80a7628:	4619      	mov	r1, r3
 80a762a:	6878      	ldr	r0, [r7, #4]
 80a762c:	f000 fc2b 	bl	80a7e86 <lsm6dso_fsm_enable_get>
 80a7630:	6138      	str	r0, [r7, #16]

  if (ret == 0) {
 80a7632:	693b      	ldr	r3, [r7, #16]
 80a7634:	2b00      	cmp	r3, #0
 80a7636:	f040 80c4 	bne.w	80a77c2 <lsm6dso_xl_data_rate_set+0x1ae>
    if ((fsm_enable.fsm_enable_a.fsm1_en | fsm_enable.fsm_enable_a.fsm2_en
 80a763a:	7b3b      	ldrb	r3, [r7, #12]
 80a763c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80a7640:	b2da      	uxtb	r2, r3
 80a7642:	7b3b      	ldrb	r3, [r7, #12]
 80a7644:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80a7648:	b2db      	uxtb	r3, r3
 80a764a:	4313      	orrs	r3, r2
 80a764c:	b2da      	uxtb	r2, r3
         | fsm_enable.fsm_enable_a.fsm3_en
 80a764e:	7b3b      	ldrb	r3, [r7, #12]
 80a7650:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80a7654:	b2db      	uxtb	r3, r3
 80a7656:	4313      	orrs	r3, r2
 80a7658:	b2da      	uxtb	r2, r3
         | fsm_enable.fsm_enable_a.fsm4_en
 80a765a:	7b3b      	ldrb	r3, [r7, #12]
 80a765c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80a7660:	b2db      	uxtb	r3, r3
 80a7662:	4313      	orrs	r3, r2
 80a7664:	b2da      	uxtb	r2, r3
         | fsm_enable.fsm_enable_a.fsm5_en
 80a7666:	7b3b      	ldrb	r3, [r7, #12]
 80a7668:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80a766c:	b2db      	uxtb	r3, r3
 80a766e:	4313      	orrs	r3, r2
 80a7670:	b2da      	uxtb	r2, r3
         | fsm_enable.fsm_enable_a.fsm6_en
 80a7672:	7b3b      	ldrb	r3, [r7, #12]
 80a7674:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80a7678:	b2db      	uxtb	r3, r3
 80a767a:	4313      	orrs	r3, r2
 80a767c:	b2da      	uxtb	r2, r3
         | fsm_enable.fsm_enable_a.fsm7_en
 80a767e:	7b3b      	ldrb	r3, [r7, #12]
 80a7680:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80a7684:	b2db      	uxtb	r3, r3
 80a7686:	4313      	orrs	r3, r2
 80a7688:	b2da      	uxtb	r2, r3
         | fsm_enable.fsm_enable_a.fsm8_en
 80a768a:	7b3b      	ldrb	r3, [r7, #12]
 80a768c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80a7690:	b2db      	uxtb	r3, r3
 80a7692:	4313      	orrs	r3, r2
 80a7694:	b2da      	uxtb	r2, r3
         | fsm_enable.fsm_enable_b.fsm9_en
 80a7696:	7b7b      	ldrb	r3, [r7, #13]
 80a7698:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80a769c:	b2db      	uxtb	r3, r3
 80a769e:	4313      	orrs	r3, r2
 80a76a0:	b2da      	uxtb	r2, r3
         | fsm_enable.fsm_enable_b.fsm10_en
 80a76a2:	7b7b      	ldrb	r3, [r7, #13]
 80a76a4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80a76a8:	b2db      	uxtb	r3, r3
 80a76aa:	4313      	orrs	r3, r2
 80a76ac:	b2da      	uxtb	r2, r3
         | fsm_enable.fsm_enable_b.fsm11_en
 80a76ae:	7b7b      	ldrb	r3, [r7, #13]
 80a76b0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80a76b4:	b2db      	uxtb	r3, r3
 80a76b6:	4313      	orrs	r3, r2
 80a76b8:	b2da      	uxtb	r2, r3
         | fsm_enable.fsm_enable_b.fsm12_en
 80a76ba:	7b7b      	ldrb	r3, [r7, #13]
 80a76bc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80a76c0:	b2db      	uxtb	r3, r3
 80a76c2:	4313      	orrs	r3, r2
 80a76c4:	b2da      	uxtb	r2, r3
         | fsm_enable.fsm_enable_b.fsm13_en
 80a76c6:	7b7b      	ldrb	r3, [r7, #13]
 80a76c8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80a76cc:	b2db      	uxtb	r3, r3
 80a76ce:	4313      	orrs	r3, r2
 80a76d0:	b2da      	uxtb	r2, r3
         | fsm_enable.fsm_enable_b.fsm14_en
 80a76d2:	7b7b      	ldrb	r3, [r7, #13]
 80a76d4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80a76d8:	b2db      	uxtb	r3, r3
 80a76da:	4313      	orrs	r3, r2
 80a76dc:	b2da      	uxtb	r2, r3
         | fsm_enable.fsm_enable_b.fsm15_en
 80a76de:	7b7b      	ldrb	r3, [r7, #13]
 80a76e0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80a76e4:	b2db      	uxtb	r3, r3
 80a76e6:	4313      	orrs	r3, r2
 80a76e8:	b2da      	uxtb	r2, r3
         | fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE) {
 80a76ea:	7b7b      	ldrb	r3, [r7, #13]
 80a76ec:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80a76f0:	b2db      	uxtb	r3, r3
 80a76f2:	4313      	orrs	r3, r2
 80a76f4:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en | fsm_enable.fsm_enable_a.fsm2_en
 80a76f6:	2b01      	cmp	r3, #1
 80a76f8:	d163      	bne.n	80a77c2 <lsm6dso_xl_data_rate_set+0x1ae>
      ret = lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 80a76fa:	f107 030b 	add.w	r3, r7, #11
 80a76fe:	4619      	mov	r1, r3
 80a7700:	6878      	ldr	r0, [r7, #4]
 80a7702:	f000 fbe1 	bl	80a7ec8 <lsm6dso_fsm_data_rate_get>
 80a7706:	6138      	str	r0, [r7, #16]

      if (ret == 0) {
 80a7708:	693b      	ldr	r3, [r7, #16]
 80a770a:	2b00      	cmp	r3, #0
 80a770c:	d159      	bne.n	80a77c2 <lsm6dso_xl_data_rate_set+0x1ae>
        switch (fsm_odr) {
 80a770e:	7afb      	ldrb	r3, [r7, #11]
 80a7710:	2b03      	cmp	r3, #3
 80a7712:	d853      	bhi.n	80a77bc <lsm6dso_xl_data_rate_set+0x1a8>
 80a7714:	a201      	add	r2, pc, #4	; (adr r2, 80a771c <lsm6dso_xl_data_rate_set+0x108>)
 80a7716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80a771a:	bf00      	nop
 80a771c:	080a772d 	.word	0x080a772d
 80a7720:	080a773f 	.word	0x080a773f
 80a7724:	080a775d 	.word	0x080a775d
 80a7728:	080a7787 	.word	0x080a7787
        case LSM6DSO_ODR_FSM_12Hz5:
          if (val == LSM6DSO_XL_ODR_OFF) {
 80a772c:	78fb      	ldrb	r3, [r7, #3]
 80a772e:	2b00      	cmp	r3, #0
 80a7730:	d102      	bne.n	80a7738 <lsm6dso_xl_data_rate_set+0x124>
            odr_xl = LSM6DSO_XL_ODR_12Hz5;
 80a7732:	2301      	movs	r3, #1
 80a7734:	75fb      	strb	r3, [r7, #23]

          else {
            odr_xl = val;
          }

          break;
 80a7736:	e045      	b.n	80a77c4 <lsm6dso_xl_data_rate_set+0x1b0>
            odr_xl = val;
 80a7738:	78fb      	ldrb	r3, [r7, #3]
 80a773a:	75fb      	strb	r3, [r7, #23]
          break;
 80a773c:	e042      	b.n	80a77c4 <lsm6dso_xl_data_rate_set+0x1b0>

        case LSM6DSO_ODR_FSM_26Hz:
          if (val == LSM6DSO_XL_ODR_OFF) {
 80a773e:	78fb      	ldrb	r3, [r7, #3]
 80a7740:	2b00      	cmp	r3, #0
 80a7742:	d102      	bne.n	80a774a <lsm6dso_xl_data_rate_set+0x136>
            odr_xl = LSM6DSO_XL_ODR_26Hz;
 80a7744:	2302      	movs	r3, #2
 80a7746:	75fb      	strb	r3, [r7, #23]

          else {
            odr_xl = val;
          }

          break;
 80a7748:	e03c      	b.n	80a77c4 <lsm6dso_xl_data_rate_set+0x1b0>
          else if (val == LSM6DSO_XL_ODR_12Hz5) {
 80a774a:	78fb      	ldrb	r3, [r7, #3]
 80a774c:	2b01      	cmp	r3, #1
 80a774e:	d102      	bne.n	80a7756 <lsm6dso_xl_data_rate_set+0x142>
            odr_xl = LSM6DSO_XL_ODR_26Hz;
 80a7750:	2302      	movs	r3, #2
 80a7752:	75fb      	strb	r3, [r7, #23]
          break;
 80a7754:	e036      	b.n	80a77c4 <lsm6dso_xl_data_rate_set+0x1b0>
            odr_xl = val;
 80a7756:	78fb      	ldrb	r3, [r7, #3]
 80a7758:	75fb      	strb	r3, [r7, #23]
          break;
 80a775a:	e033      	b.n	80a77c4 <lsm6dso_xl_data_rate_set+0x1b0>

        case LSM6DSO_ODR_FSM_52Hz:
          if (val == LSM6DSO_XL_ODR_OFF) {
 80a775c:	78fb      	ldrb	r3, [r7, #3]
 80a775e:	2b00      	cmp	r3, #0
 80a7760:	d102      	bne.n	80a7768 <lsm6dso_xl_data_rate_set+0x154>
            odr_xl = LSM6DSO_XL_ODR_52Hz;
 80a7762:	2303      	movs	r3, #3
 80a7764:	75fb      	strb	r3, [r7, #23]

          else {
            odr_xl = val;
          }

          break;
 80a7766:	e02d      	b.n	80a77c4 <lsm6dso_xl_data_rate_set+0x1b0>
          else if (val == LSM6DSO_XL_ODR_12Hz5) {
 80a7768:	78fb      	ldrb	r3, [r7, #3]
 80a776a:	2b01      	cmp	r3, #1
 80a776c:	d102      	bne.n	80a7774 <lsm6dso_xl_data_rate_set+0x160>
            odr_xl = LSM6DSO_XL_ODR_52Hz;
 80a776e:	2303      	movs	r3, #3
 80a7770:	75fb      	strb	r3, [r7, #23]
          break;
 80a7772:	e027      	b.n	80a77c4 <lsm6dso_xl_data_rate_set+0x1b0>
          else if (val == LSM6DSO_XL_ODR_26Hz) {
 80a7774:	78fb      	ldrb	r3, [r7, #3]
 80a7776:	2b02      	cmp	r3, #2
 80a7778:	d102      	bne.n	80a7780 <lsm6dso_xl_data_rate_set+0x16c>
            odr_xl = LSM6DSO_XL_ODR_52Hz;
 80a777a:	2303      	movs	r3, #3
 80a777c:	75fb      	strb	r3, [r7, #23]
          break;
 80a777e:	e021      	b.n	80a77c4 <lsm6dso_xl_data_rate_set+0x1b0>
            odr_xl = val;
 80a7780:	78fb      	ldrb	r3, [r7, #3]
 80a7782:	75fb      	strb	r3, [r7, #23]
          break;
 80a7784:	e01e      	b.n	80a77c4 <lsm6dso_xl_data_rate_set+0x1b0>

        case LSM6DSO_ODR_FSM_104Hz:
          if (val == LSM6DSO_XL_ODR_OFF) {
 80a7786:	78fb      	ldrb	r3, [r7, #3]
 80a7788:	2b00      	cmp	r3, #0
 80a778a:	d102      	bne.n	80a7792 <lsm6dso_xl_data_rate_set+0x17e>
            odr_xl = LSM6DSO_XL_ODR_104Hz;
 80a778c:	2304      	movs	r3, #4
 80a778e:	75fb      	strb	r3, [r7, #23]

          else {
            odr_xl = val;
          }

          break;
 80a7790:	e018      	b.n	80a77c4 <lsm6dso_xl_data_rate_set+0x1b0>
          else if (val == LSM6DSO_XL_ODR_12Hz5) {
 80a7792:	78fb      	ldrb	r3, [r7, #3]
 80a7794:	2b01      	cmp	r3, #1
 80a7796:	d102      	bne.n	80a779e <lsm6dso_xl_data_rate_set+0x18a>
            odr_xl = LSM6DSO_XL_ODR_104Hz;
 80a7798:	2304      	movs	r3, #4
 80a779a:	75fb      	strb	r3, [r7, #23]
          break;
 80a779c:	e012      	b.n	80a77c4 <lsm6dso_xl_data_rate_set+0x1b0>
          else if (val == LSM6DSO_XL_ODR_26Hz) {
 80a779e:	78fb      	ldrb	r3, [r7, #3]
 80a77a0:	2b02      	cmp	r3, #2
 80a77a2:	d102      	bne.n	80a77aa <lsm6dso_xl_data_rate_set+0x196>
            odr_xl = LSM6DSO_XL_ODR_104Hz;
 80a77a4:	2304      	movs	r3, #4
 80a77a6:	75fb      	strb	r3, [r7, #23]
          break;
 80a77a8:	e00c      	b.n	80a77c4 <lsm6dso_xl_data_rate_set+0x1b0>
          else if (val == LSM6DSO_XL_ODR_52Hz) {
 80a77aa:	78fb      	ldrb	r3, [r7, #3]
 80a77ac:	2b03      	cmp	r3, #3
 80a77ae:	d102      	bne.n	80a77b6 <lsm6dso_xl_data_rate_set+0x1a2>
            odr_xl = LSM6DSO_XL_ODR_104Hz;
 80a77b0:	2304      	movs	r3, #4
 80a77b2:	75fb      	strb	r3, [r7, #23]
          break;
 80a77b4:	e006      	b.n	80a77c4 <lsm6dso_xl_data_rate_set+0x1b0>
            odr_xl = val;
 80a77b6:	78fb      	ldrb	r3, [r7, #3]
 80a77b8:	75fb      	strb	r3, [r7, #23]
          break;
 80a77ba:	e003      	b.n	80a77c4 <lsm6dso_xl_data_rate_set+0x1b0>

        default:
          odr_xl = val;
 80a77bc:	78fb      	ldrb	r3, [r7, #3]
 80a77be:	75fb      	strb	r3, [r7, #23]
          break;
 80a77c0:	e000      	b.n	80a77c4 <lsm6dso_xl_data_rate_set+0x1b0>
        }
      }
 80a77c2:	bf00      	nop
    }
  }

  if (ret == 0) {
 80a77c4:	693b      	ldr	r3, [r7, #16]
 80a77c6:	2b00      	cmp	r3, #0
 80a77c8:	d107      	bne.n	80a77da <lsm6dso_xl_data_rate_set+0x1c6>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *) & reg, 1);
 80a77ca:	f107 0208 	add.w	r2, r7, #8
 80a77ce:	2301      	movs	r3, #1
 80a77d0:	2110      	movs	r1, #16
 80a77d2:	6878      	ldr	r0, [r7, #4]
 80a77d4:	f7ff fe4b 	bl	80a746e <lsm6dso_read_reg>
 80a77d8:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0) {
 80a77da:	693b      	ldr	r3, [r7, #16]
 80a77dc:	2b00      	cmp	r3, #0
 80a77de:	d10f      	bne.n	80a7800 <lsm6dso_xl_data_rate_set+0x1ec>
    reg.odr_xl = (uint8_t) odr_xl;
 80a77e0:	7dfb      	ldrb	r3, [r7, #23]
 80a77e2:	f003 030f 	and.w	r3, r3, #15
 80a77e6:	b2da      	uxtb	r2, r3
 80a77e8:	7a3b      	ldrb	r3, [r7, #8]
 80a77ea:	f362 1307 	bfi	r3, r2, #4, #4
 80a77ee:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *) & reg, 1);
 80a77f0:	f107 0208 	add.w	r2, r7, #8
 80a77f4:	2301      	movs	r3, #1
 80a77f6:	2110      	movs	r1, #16
 80a77f8:	6878      	ldr	r0, [r7, #4]
 80a77fa:	f7ff fe50 	bl	80a749e <lsm6dso_write_reg>
 80a77fe:	6138      	str	r0, [r7, #16]
  }

  return ret;
 80a7800:	693b      	ldr	r3, [r7, #16]
}
 80a7802:	4618      	mov	r0, r3
 80a7804:	3718      	adds	r7, #24
 80a7806:	46bd      	mov	sp, r7
 80a7808:	bd80      	pop	{r7, pc}
 80a780a:	bf00      	nop

080a780c <lsm6dso_gy_full_scale_set>:
 * @param  ctx      read / write interface definitions
 * @param  val      change the values of fs_g in reg CTRL2_G
 *
 */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t * ctx, lsm6dso_fs_g_t val)
{
 80a780c:	b580      	push	{r7, lr}
 80a780e:	b084      	sub	sp, #16
 80a7810:	af00      	add	r7, sp, #0
 80a7812:	6078      	str	r0, [r7, #4]
 80a7814:	460b      	mov	r3, r1
 80a7816:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *) & reg, 1);
 80a7818:	f107 0208 	add.w	r2, r7, #8
 80a781c:	2301      	movs	r3, #1
 80a781e:	2111      	movs	r1, #17
 80a7820:	6878      	ldr	r0, [r7, #4]
 80a7822:	f7ff fe24 	bl	80a746e <lsm6dso_read_reg>
 80a7826:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80a7828:	68fb      	ldr	r3, [r7, #12]
 80a782a:	2b00      	cmp	r3, #0
 80a782c:	d10f      	bne.n	80a784e <lsm6dso_gy_full_scale_set+0x42>
    reg.fs_g = (uint8_t) val;
 80a782e:	78fb      	ldrb	r3, [r7, #3]
 80a7830:	f003 0307 	and.w	r3, r3, #7
 80a7834:	b2da      	uxtb	r2, r3
 80a7836:	7a3b      	ldrb	r3, [r7, #8]
 80a7838:	f362 0343 	bfi	r3, r2, #1, #3
 80a783c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *) & reg, 1);
 80a783e:	f107 0208 	add.w	r2, r7, #8
 80a7842:	2301      	movs	r3, #1
 80a7844:	2111      	movs	r1, #17
 80a7846:	6878      	ldr	r0, [r7, #4]
 80a7848:	f7ff fe29 	bl	80a749e <lsm6dso_write_reg>
 80a784c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80a784e:	68fb      	ldr	r3, [r7, #12]
}
 80a7850:	4618      	mov	r0, r3
 80a7852:	3710      	adds	r7, #16
 80a7854:	46bd      	mov	sp, r7
 80a7856:	bd80      	pop	{r7, pc}

080a7858 <lsm6dso_gy_data_rate_set>:
 * @param  ctx      read / write interface definitions
 * @param  val      change the values of odr_g in reg CTRL2_G
 *
 */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t * ctx, lsm6dso_odr_g_t val)
{
 80a7858:	b580      	push	{r7, lr}
 80a785a:	b086      	sub	sp, #24
 80a785c:	af00      	add	r7, sp, #0
 80a785e:	6078      	str	r0, [r7, #4]
 80a7860:	460b      	mov	r3, r1
 80a7862:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy = val;
 80a7864:	78fb      	ldrb	r3, [r7, #3]
 80a7866:	75fb      	strb	r3, [r7, #23]
  lsm6dso_emb_fsm_enable_t fsm_enable;
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret = lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 80a7868:	f107 030c 	add.w	r3, r7, #12
 80a786c:	4619      	mov	r1, r3
 80a786e:	6878      	ldr	r0, [r7, #4]
 80a7870:	f000 fb09 	bl	80a7e86 <lsm6dso_fsm_enable_get>
 80a7874:	6138      	str	r0, [r7, #16]

  if (ret == 0) {
 80a7876:	693b      	ldr	r3, [r7, #16]
 80a7878:	2b00      	cmp	r3, #0
 80a787a:	f040 80c4 	bne.w	80a7a06 <lsm6dso_gy_data_rate_set+0x1ae>
    if ((fsm_enable.fsm_enable_a.fsm1_en | fsm_enable.fsm_enable_a.fsm2_en
 80a787e:	7b3b      	ldrb	r3, [r7, #12]
 80a7880:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80a7884:	b2da      	uxtb	r2, r3
 80a7886:	7b3b      	ldrb	r3, [r7, #12]
 80a7888:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80a788c:	b2db      	uxtb	r3, r3
 80a788e:	4313      	orrs	r3, r2
 80a7890:	b2da      	uxtb	r2, r3
         | fsm_enable.fsm_enable_a.fsm3_en
 80a7892:	7b3b      	ldrb	r3, [r7, #12]
 80a7894:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80a7898:	b2db      	uxtb	r3, r3
 80a789a:	4313      	orrs	r3, r2
 80a789c:	b2da      	uxtb	r2, r3
         | fsm_enable.fsm_enable_a.fsm4_en
 80a789e:	7b3b      	ldrb	r3, [r7, #12]
 80a78a0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80a78a4:	b2db      	uxtb	r3, r3
 80a78a6:	4313      	orrs	r3, r2
 80a78a8:	b2da      	uxtb	r2, r3
         | fsm_enable.fsm_enable_a.fsm5_en
 80a78aa:	7b3b      	ldrb	r3, [r7, #12]
 80a78ac:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80a78b0:	b2db      	uxtb	r3, r3
 80a78b2:	4313      	orrs	r3, r2
 80a78b4:	b2da      	uxtb	r2, r3
         | fsm_enable.fsm_enable_a.fsm6_en
 80a78b6:	7b3b      	ldrb	r3, [r7, #12]
 80a78b8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80a78bc:	b2db      	uxtb	r3, r3
 80a78be:	4313      	orrs	r3, r2
 80a78c0:	b2da      	uxtb	r2, r3
         | fsm_enable.fsm_enable_a.fsm7_en
 80a78c2:	7b3b      	ldrb	r3, [r7, #12]
 80a78c4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80a78c8:	b2db      	uxtb	r3, r3
 80a78ca:	4313      	orrs	r3, r2
 80a78cc:	b2da      	uxtb	r2, r3
         | fsm_enable.fsm_enable_a.fsm8_en
 80a78ce:	7b3b      	ldrb	r3, [r7, #12]
 80a78d0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80a78d4:	b2db      	uxtb	r3, r3
 80a78d6:	4313      	orrs	r3, r2
 80a78d8:	b2da      	uxtb	r2, r3
         | fsm_enable.fsm_enable_b.fsm9_en
 80a78da:	7b7b      	ldrb	r3, [r7, #13]
 80a78dc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80a78e0:	b2db      	uxtb	r3, r3
 80a78e2:	4313      	orrs	r3, r2
 80a78e4:	b2da      	uxtb	r2, r3
         | fsm_enable.fsm_enable_b.fsm10_en
 80a78e6:	7b7b      	ldrb	r3, [r7, #13]
 80a78e8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80a78ec:	b2db      	uxtb	r3, r3
 80a78ee:	4313      	orrs	r3, r2
 80a78f0:	b2da      	uxtb	r2, r3
         | fsm_enable.fsm_enable_b.fsm11_en
 80a78f2:	7b7b      	ldrb	r3, [r7, #13]
 80a78f4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80a78f8:	b2db      	uxtb	r3, r3
 80a78fa:	4313      	orrs	r3, r2
 80a78fc:	b2da      	uxtb	r2, r3
         | fsm_enable.fsm_enable_b.fsm12_en
 80a78fe:	7b7b      	ldrb	r3, [r7, #13]
 80a7900:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80a7904:	b2db      	uxtb	r3, r3
 80a7906:	4313      	orrs	r3, r2
 80a7908:	b2da      	uxtb	r2, r3
         | fsm_enable.fsm_enable_b.fsm13_en
 80a790a:	7b7b      	ldrb	r3, [r7, #13]
 80a790c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80a7910:	b2db      	uxtb	r3, r3
 80a7912:	4313      	orrs	r3, r2
 80a7914:	b2da      	uxtb	r2, r3
         | fsm_enable.fsm_enable_b.fsm14_en
 80a7916:	7b7b      	ldrb	r3, [r7, #13]
 80a7918:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80a791c:	b2db      	uxtb	r3, r3
 80a791e:	4313      	orrs	r3, r2
 80a7920:	b2da      	uxtb	r2, r3
         | fsm_enable.fsm_enable_b.fsm15_en
 80a7922:	7b7b      	ldrb	r3, [r7, #13]
 80a7924:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80a7928:	b2db      	uxtb	r3, r3
 80a792a:	4313      	orrs	r3, r2
 80a792c:	b2da      	uxtb	r2, r3
         | fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE) {
 80a792e:	7b7b      	ldrb	r3, [r7, #13]
 80a7930:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80a7934:	b2db      	uxtb	r3, r3
 80a7936:	4313      	orrs	r3, r2
 80a7938:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en | fsm_enable.fsm_enable_a.fsm2_en
 80a793a:	2b01      	cmp	r3, #1
 80a793c:	d163      	bne.n	80a7a06 <lsm6dso_gy_data_rate_set+0x1ae>
      ret = lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 80a793e:	f107 030b 	add.w	r3, r7, #11
 80a7942:	4619      	mov	r1, r3
 80a7944:	6878      	ldr	r0, [r7, #4]
 80a7946:	f000 fabf 	bl	80a7ec8 <lsm6dso_fsm_data_rate_get>
 80a794a:	6138      	str	r0, [r7, #16]

      if (ret == 0) {
 80a794c:	693b      	ldr	r3, [r7, #16]
 80a794e:	2b00      	cmp	r3, #0
 80a7950:	d159      	bne.n	80a7a06 <lsm6dso_gy_data_rate_set+0x1ae>
        switch (fsm_odr) {
 80a7952:	7afb      	ldrb	r3, [r7, #11]
 80a7954:	2b03      	cmp	r3, #3
 80a7956:	d853      	bhi.n	80a7a00 <lsm6dso_gy_data_rate_set+0x1a8>
 80a7958:	a201      	add	r2, pc, #4	; (adr r2, 80a7960 <lsm6dso_gy_data_rate_set+0x108>)
 80a795a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80a795e:	bf00      	nop
 80a7960:	080a7971 	.word	0x080a7971
 80a7964:	080a7983 	.word	0x080a7983
 80a7968:	080a79a1 	.word	0x080a79a1
 80a796c:	080a79cb 	.word	0x080a79cb
        case LSM6DSO_ODR_FSM_12Hz5:
          if (val == LSM6DSO_GY_ODR_OFF) {
 80a7970:	78fb      	ldrb	r3, [r7, #3]
 80a7972:	2b00      	cmp	r3, #0
 80a7974:	d102      	bne.n	80a797c <lsm6dso_gy_data_rate_set+0x124>
            odr_gy = LSM6DSO_GY_ODR_12Hz5;
 80a7976:	2301      	movs	r3, #1
 80a7978:	75fb      	strb	r3, [r7, #23]

          else {
            odr_gy = val;
          }

          break;
 80a797a:	e045      	b.n	80a7a08 <lsm6dso_gy_data_rate_set+0x1b0>
            odr_gy = val;
 80a797c:	78fb      	ldrb	r3, [r7, #3]
 80a797e:	75fb      	strb	r3, [r7, #23]
          break;
 80a7980:	e042      	b.n	80a7a08 <lsm6dso_gy_data_rate_set+0x1b0>

        case LSM6DSO_ODR_FSM_26Hz:
          if (val == LSM6DSO_GY_ODR_OFF) {
 80a7982:	78fb      	ldrb	r3, [r7, #3]
 80a7984:	2b00      	cmp	r3, #0
 80a7986:	d102      	bne.n	80a798e <lsm6dso_gy_data_rate_set+0x136>
            odr_gy = LSM6DSO_GY_ODR_26Hz;
 80a7988:	2302      	movs	r3, #2
 80a798a:	75fb      	strb	r3, [r7, #23]

          else {
            odr_gy = val;
          }

          break;
 80a798c:	e03c      	b.n	80a7a08 <lsm6dso_gy_data_rate_set+0x1b0>
          else if (val == LSM6DSO_GY_ODR_12Hz5) {
 80a798e:	78fb      	ldrb	r3, [r7, #3]
 80a7990:	2b01      	cmp	r3, #1
 80a7992:	d102      	bne.n	80a799a <lsm6dso_gy_data_rate_set+0x142>
            odr_gy = LSM6DSO_GY_ODR_26Hz;
 80a7994:	2302      	movs	r3, #2
 80a7996:	75fb      	strb	r3, [r7, #23]
          break;
 80a7998:	e036      	b.n	80a7a08 <lsm6dso_gy_data_rate_set+0x1b0>
            odr_gy = val;
 80a799a:	78fb      	ldrb	r3, [r7, #3]
 80a799c:	75fb      	strb	r3, [r7, #23]
          break;
 80a799e:	e033      	b.n	80a7a08 <lsm6dso_gy_data_rate_set+0x1b0>

        case LSM6DSO_ODR_FSM_52Hz:
          if (val == LSM6DSO_GY_ODR_OFF) {
 80a79a0:	78fb      	ldrb	r3, [r7, #3]
 80a79a2:	2b00      	cmp	r3, #0
 80a79a4:	d102      	bne.n	80a79ac <lsm6dso_gy_data_rate_set+0x154>
            odr_gy = LSM6DSO_GY_ODR_52Hz;
 80a79a6:	2303      	movs	r3, #3
 80a79a8:	75fb      	strb	r3, [r7, #23]

          else {
            odr_gy = val;
          }

          break;
 80a79aa:	e02d      	b.n	80a7a08 <lsm6dso_gy_data_rate_set+0x1b0>
          else if (val == LSM6DSO_GY_ODR_12Hz5) {
 80a79ac:	78fb      	ldrb	r3, [r7, #3]
 80a79ae:	2b01      	cmp	r3, #1
 80a79b0:	d102      	bne.n	80a79b8 <lsm6dso_gy_data_rate_set+0x160>
            odr_gy = LSM6DSO_GY_ODR_52Hz;
 80a79b2:	2303      	movs	r3, #3
 80a79b4:	75fb      	strb	r3, [r7, #23]
          break;
 80a79b6:	e027      	b.n	80a7a08 <lsm6dso_gy_data_rate_set+0x1b0>
          else if (val == LSM6DSO_GY_ODR_26Hz) {
 80a79b8:	78fb      	ldrb	r3, [r7, #3]
 80a79ba:	2b02      	cmp	r3, #2
 80a79bc:	d102      	bne.n	80a79c4 <lsm6dso_gy_data_rate_set+0x16c>
            odr_gy = LSM6DSO_GY_ODR_52Hz;
 80a79be:	2303      	movs	r3, #3
 80a79c0:	75fb      	strb	r3, [r7, #23]
          break;
 80a79c2:	e021      	b.n	80a7a08 <lsm6dso_gy_data_rate_set+0x1b0>
            odr_gy = val;
 80a79c4:	78fb      	ldrb	r3, [r7, #3]
 80a79c6:	75fb      	strb	r3, [r7, #23]
          break;
 80a79c8:	e01e      	b.n	80a7a08 <lsm6dso_gy_data_rate_set+0x1b0>

        case LSM6DSO_ODR_FSM_104Hz:
          if (val == LSM6DSO_GY_ODR_OFF) {
 80a79ca:	78fb      	ldrb	r3, [r7, #3]
 80a79cc:	2b00      	cmp	r3, #0
 80a79ce:	d102      	bne.n	80a79d6 <lsm6dso_gy_data_rate_set+0x17e>
            odr_gy = LSM6DSO_GY_ODR_104Hz;
 80a79d0:	2304      	movs	r3, #4
 80a79d2:	75fb      	strb	r3, [r7, #23]

          else {
            odr_gy = val;
          }

          break;
 80a79d4:	e018      	b.n	80a7a08 <lsm6dso_gy_data_rate_set+0x1b0>
          else if (val == LSM6DSO_GY_ODR_12Hz5) {
 80a79d6:	78fb      	ldrb	r3, [r7, #3]
 80a79d8:	2b01      	cmp	r3, #1
 80a79da:	d102      	bne.n	80a79e2 <lsm6dso_gy_data_rate_set+0x18a>
            odr_gy = LSM6DSO_GY_ODR_104Hz;
 80a79dc:	2304      	movs	r3, #4
 80a79de:	75fb      	strb	r3, [r7, #23]
          break;
 80a79e0:	e012      	b.n	80a7a08 <lsm6dso_gy_data_rate_set+0x1b0>
          else if (val == LSM6DSO_GY_ODR_26Hz) {
 80a79e2:	78fb      	ldrb	r3, [r7, #3]
 80a79e4:	2b02      	cmp	r3, #2
 80a79e6:	d102      	bne.n	80a79ee <lsm6dso_gy_data_rate_set+0x196>
            odr_gy = LSM6DSO_GY_ODR_104Hz;
 80a79e8:	2304      	movs	r3, #4
 80a79ea:	75fb      	strb	r3, [r7, #23]
          break;
 80a79ec:	e00c      	b.n	80a7a08 <lsm6dso_gy_data_rate_set+0x1b0>
          else if (val == LSM6DSO_GY_ODR_52Hz) {
 80a79ee:	78fb      	ldrb	r3, [r7, #3]
 80a79f0:	2b03      	cmp	r3, #3
 80a79f2:	d102      	bne.n	80a79fa <lsm6dso_gy_data_rate_set+0x1a2>
            odr_gy = LSM6DSO_GY_ODR_104Hz;
 80a79f4:	2304      	movs	r3, #4
 80a79f6:	75fb      	strb	r3, [r7, #23]
          break;
 80a79f8:	e006      	b.n	80a7a08 <lsm6dso_gy_data_rate_set+0x1b0>
            odr_gy = val;
 80a79fa:	78fb      	ldrb	r3, [r7, #3]
 80a79fc:	75fb      	strb	r3, [r7, #23]
          break;
 80a79fe:	e003      	b.n	80a7a08 <lsm6dso_gy_data_rate_set+0x1b0>

        default:
          odr_gy = val;
 80a7a00:	78fb      	ldrb	r3, [r7, #3]
 80a7a02:	75fb      	strb	r3, [r7, #23]
          break;
 80a7a04:	e000      	b.n	80a7a08 <lsm6dso_gy_data_rate_set+0x1b0>
        }
      }
 80a7a06:	bf00      	nop
    }
  }

  if (ret == 0) {
 80a7a08:	693b      	ldr	r3, [r7, #16]
 80a7a0a:	2b00      	cmp	r3, #0
 80a7a0c:	d107      	bne.n	80a7a1e <lsm6dso_gy_data_rate_set+0x1c6>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *) & reg, 1);
 80a7a0e:	f107 0208 	add.w	r2, r7, #8
 80a7a12:	2301      	movs	r3, #1
 80a7a14:	2111      	movs	r1, #17
 80a7a16:	6878      	ldr	r0, [r7, #4]
 80a7a18:	f7ff fd29 	bl	80a746e <lsm6dso_read_reg>
 80a7a1c:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0) {
 80a7a1e:	693b      	ldr	r3, [r7, #16]
 80a7a20:	2b00      	cmp	r3, #0
 80a7a22:	d10f      	bne.n	80a7a44 <lsm6dso_gy_data_rate_set+0x1ec>
    reg.odr_g = (uint8_t) odr_gy;
 80a7a24:	7dfb      	ldrb	r3, [r7, #23]
 80a7a26:	f003 030f 	and.w	r3, r3, #15
 80a7a2a:	b2da      	uxtb	r2, r3
 80a7a2c:	7a3b      	ldrb	r3, [r7, #8]
 80a7a2e:	f362 1307 	bfi	r3, r2, #4, #4
 80a7a32:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *) & reg, 1);
 80a7a34:	f107 0208 	add.w	r2, r7, #8
 80a7a38:	2301      	movs	r3, #1
 80a7a3a:	2111      	movs	r1, #17
 80a7a3c:	6878      	ldr	r0, [r7, #4]
 80a7a3e:	f7ff fd2e 	bl	80a749e <lsm6dso_write_reg>
 80a7a42:	6138      	str	r0, [r7, #16]
  }

  return ret;
 80a7a44:	693b      	ldr	r3, [r7, #16]
}
 80a7a46:	4618      	mov	r0, r3
 80a7a48:	3718      	adds	r7, #24
 80a7a4a:	46bd      	mov	sp, r7
 80a7a4c:	bd80      	pop	{r7, pc}
 80a7a4e:	bf00      	nop

080a7a50 <lsm6dso_block_data_update_set>:
 * @param  ctx      read / write interface definitions
 * @param  val      change the values of bdu in reg CTRL3_C
 *
 */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t * ctx, uint8_t val)
{
 80a7a50:	b580      	push	{r7, lr}
 80a7a52:	b084      	sub	sp, #16
 80a7a54:	af00      	add	r7, sp, #0
 80a7a56:	6078      	str	r0, [r7, #4]
 80a7a58:	460b      	mov	r3, r1
 80a7a5a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *) & reg, 1);
 80a7a5c:	f107 0208 	add.w	r2, r7, #8
 80a7a60:	2301      	movs	r3, #1
 80a7a62:	2112      	movs	r1, #18
 80a7a64:	6878      	ldr	r0, [r7, #4]
 80a7a66:	f7ff fd02 	bl	80a746e <lsm6dso_read_reg>
 80a7a6a:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80a7a6c:	68fb      	ldr	r3, [r7, #12]
 80a7a6e:	2b00      	cmp	r3, #0
 80a7a70:	d10f      	bne.n	80a7a92 <lsm6dso_block_data_update_set+0x42>
    reg.bdu = val;
 80a7a72:	78fb      	ldrb	r3, [r7, #3]
 80a7a74:	f003 0301 	and.w	r3, r3, #1
 80a7a78:	b2da      	uxtb	r2, r3
 80a7a7a:	7a3b      	ldrb	r3, [r7, #8]
 80a7a7c:	f362 1386 	bfi	r3, r2, #6, #1
 80a7a80:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *) & reg, 1);
 80a7a82:	f107 0208 	add.w	r2, r7, #8
 80a7a86:	2301      	movs	r3, #1
 80a7a88:	2112      	movs	r1, #18
 80a7a8a:	6878      	ldr	r0, [r7, #4]
 80a7a8c:	f7ff fd07 	bl	80a749e <lsm6dso_write_reg>
 80a7a90:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80a7a92:	68fb      	ldr	r3, [r7, #12]
}
 80a7a94:	4618      	mov	r0, r3
 80a7a96:	3710      	adds	r7, #16
 80a7a98:	46bd      	mov	sp, r7
 80a7a9a:	bd80      	pop	{r7, pc}

080a7a9c <lsm6dso_status_reg_get>:
 * @param  ctx      read / write interface definitions
 * @param  val      register STATUS_REG
 *
 */
int32_t lsm6dso_status_reg_get(stmdev_ctx_t * ctx, lsm6dso_status_reg_t * val)
{
 80a7a9c:	b580      	push	{r7, lr}
 80a7a9e:	b084      	sub	sp, #16
 80a7aa0:	af00      	add	r7, sp, #0
 80a7aa2:	6078      	str	r0, [r7, #4]
 80a7aa4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_STATUS_REG, (uint8_t *) val, 1);
 80a7aa6:	2301      	movs	r3, #1
 80a7aa8:	683a      	ldr	r2, [r7, #0]
 80a7aaa:	211e      	movs	r1, #30
 80a7aac:	6878      	ldr	r0, [r7, #4]
 80a7aae:	f7ff fcde 	bl	80a746e <lsm6dso_read_reg>
 80a7ab2:	60f8      	str	r0, [r7, #12]
  return ret;
 80a7ab4:	68fb      	ldr	r3, [r7, #12]
}
 80a7ab6:	4618      	mov	r0, r3
 80a7ab8:	3710      	adds	r7, #16
 80a7aba:	46bd      	mov	sp, r7
 80a7abc:	bd80      	pop	{r7, pc}

080a7abe <lsm6dso_xl_flag_data_ready_get>:
 * @param  ctx      read / write interface definitions
 * @param  val      change the values of xlda in reg STATUS_REG
 *
 */
int32_t lsm6dso_xl_flag_data_ready_get(stmdev_ctx_t * ctx, uint8_t * val)
{
 80a7abe:	b580      	push	{r7, lr}
 80a7ac0:	b084      	sub	sp, #16
 80a7ac2:	af00      	add	r7, sp, #0
 80a7ac4:	6078      	str	r0, [r7, #4]
 80a7ac6:	6039      	str	r1, [r7, #0]
  lsm6dso_status_reg_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_STATUS_REG, (uint8_t *) & reg, 1);
 80a7ac8:	f107 0208 	add.w	r2, r7, #8
 80a7acc:	2301      	movs	r3, #1
 80a7ace:	211e      	movs	r1, #30
 80a7ad0:	6878      	ldr	r0, [r7, #4]
 80a7ad2:	f7ff fccc 	bl	80a746e <lsm6dso_read_reg>
 80a7ad6:	60f8      	str	r0, [r7, #12]
  *val = reg.xlda;
 80a7ad8:	7a3b      	ldrb	r3, [r7, #8]
 80a7ada:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80a7ade:	b2db      	uxtb	r3, r3
 80a7ae0:	461a      	mov	r2, r3
 80a7ae2:	683b      	ldr	r3, [r7, #0]
 80a7ae4:	701a      	strb	r2, [r3, #0]
  return ret;
 80a7ae6:	68fb      	ldr	r3, [r7, #12]
}
 80a7ae8:	4618      	mov	r0, r3
 80a7aea:	3710      	adds	r7, #16
 80a7aec:	46bd      	mov	sp, r7
 80a7aee:	bd80      	pop	{r7, pc}

080a7af0 <lsm6dso_gy_flag_data_ready_get>:
 * @param  ctx      read / write interface definitions
 * @param  val      change the values of gda in reg STATUS_REG
 *
 */
int32_t lsm6dso_gy_flag_data_ready_get(stmdev_ctx_t * ctx, uint8_t * val)
{
 80a7af0:	b580      	push	{r7, lr}
 80a7af2:	b084      	sub	sp, #16
 80a7af4:	af00      	add	r7, sp, #0
 80a7af6:	6078      	str	r0, [r7, #4]
 80a7af8:	6039      	str	r1, [r7, #0]
  lsm6dso_status_reg_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_STATUS_REG, (uint8_t *) & reg, 1);
 80a7afa:	f107 0208 	add.w	r2, r7, #8
 80a7afe:	2301      	movs	r3, #1
 80a7b00:	211e      	movs	r1, #30
 80a7b02:	6878      	ldr	r0, [r7, #4]
 80a7b04:	f7ff fcb3 	bl	80a746e <lsm6dso_read_reg>
 80a7b08:	60f8      	str	r0, [r7, #12]
  *val = reg.gda;
 80a7b0a:	7a3b      	ldrb	r3, [r7, #8]
 80a7b0c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80a7b10:	b2db      	uxtb	r3, r3
 80a7b12:	461a      	mov	r2, r3
 80a7b14:	683b      	ldr	r3, [r7, #0]
 80a7b16:	701a      	strb	r2, [r3, #0]
  return ret;
 80a7b18:	68fb      	ldr	r3, [r7, #12]
}
 80a7b1a:	4618      	mov	r0, r3
 80a7b1c:	3710      	adds	r7, #16
 80a7b1e:	46bd      	mov	sp, r7
 80a7b20:	bd80      	pop	{r7, pc}

080a7b22 <lsm6dso_temp_flag_data_ready_get>:
 * @param  ctx      read / write interface definitions
 * @param  val      change the values of tda in reg STATUS_REG
 *
 */
int32_t lsm6dso_temp_flag_data_ready_get(stmdev_ctx_t * ctx, uint8_t * val)
{
 80a7b22:	b580      	push	{r7, lr}
 80a7b24:	b084      	sub	sp, #16
 80a7b26:	af00      	add	r7, sp, #0
 80a7b28:	6078      	str	r0, [r7, #4]
 80a7b2a:	6039      	str	r1, [r7, #0]
  lsm6dso_status_reg_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_STATUS_REG, (uint8_t *) & reg, 1);
 80a7b2c:	f107 0208 	add.w	r2, r7, #8
 80a7b30:	2301      	movs	r3, #1
 80a7b32:	211e      	movs	r1, #30
 80a7b34:	6878      	ldr	r0, [r7, #4]
 80a7b36:	f7ff fc9a 	bl	80a746e <lsm6dso_read_reg>
 80a7b3a:	60f8      	str	r0, [r7, #12]
  *val = reg.tda;
 80a7b3c:	7a3b      	ldrb	r3, [r7, #8]
 80a7b3e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80a7b42:	b2db      	uxtb	r3, r3
 80a7b44:	461a      	mov	r2, r3
 80a7b46:	683b      	ldr	r3, [r7, #0]
 80a7b48:	701a      	strb	r2, [r3, #0]
  return ret;
 80a7b4a:	68fb      	ldr	r3, [r7, #12]
}
 80a7b4c:	4618      	mov	r0, r3
 80a7b4e:	3710      	adds	r7, #16
 80a7b50:	46bd      	mov	sp, r7
 80a7b52:	bd80      	pop	{r7, pc}

080a7b54 <lsm6dso_temperature_raw_get>:
 * @param  ctx      read / write interface definitions
 * @param  buff     buffer that stores data read
 *
 */
int32_t lsm6dso_temperature_raw_get(stmdev_ctx_t * ctx, uint8_t * buff)
{
 80a7b54:	b580      	push	{r7, lr}
 80a7b56:	b084      	sub	sp, #16
 80a7b58:	af00      	add	r7, sp, #0
 80a7b5a:	6078      	str	r0, [r7, #4]
 80a7b5c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUT_TEMP_L, buff, 2);
 80a7b5e:	2302      	movs	r3, #2
 80a7b60:	683a      	ldr	r2, [r7, #0]
 80a7b62:	2120      	movs	r1, #32
 80a7b64:	6878      	ldr	r0, [r7, #4]
 80a7b66:	f7ff fc82 	bl	80a746e <lsm6dso_read_reg>
 80a7b6a:	60f8      	str	r0, [r7, #12]
  return ret;
 80a7b6c:	68fb      	ldr	r3, [r7, #12]
}
 80a7b6e:	4618      	mov	r0, r3
 80a7b70:	3710      	adds	r7, #16
 80a7b72:	46bd      	mov	sp, r7
 80a7b74:	bd80      	pop	{r7, pc}

080a7b76 <lsm6dso_angular_rate_raw_get>:
 * @param  ctx      read / write interface definitions
 * @param  buff     buffer that stores data read
 *
 */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t * ctx, uint8_t * buff)
{
 80a7b76:	b580      	push	{r7, lr}
 80a7b78:	b084      	sub	sp, #16
 80a7b7a:	af00      	add	r7, sp, #0
 80a7b7c:	6078      	str	r0, [r7, #4]
 80a7b7e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 80a7b80:	2306      	movs	r3, #6
 80a7b82:	683a      	ldr	r2, [r7, #0]
 80a7b84:	2122      	movs	r1, #34	; 0x22
 80a7b86:	6878      	ldr	r0, [r7, #4]
 80a7b88:	f7ff fc71 	bl	80a746e <lsm6dso_read_reg>
 80a7b8c:	60f8      	str	r0, [r7, #12]
  return ret;
 80a7b8e:	68fb      	ldr	r3, [r7, #12]
}
 80a7b90:	4618      	mov	r0, r3
 80a7b92:	3710      	adds	r7, #16
 80a7b94:	46bd      	mov	sp, r7
 80a7b96:	bd80      	pop	{r7, pc}

080a7b98 <lsm6dso_acceleration_raw_get>:
 * @param  ctx      read / write interface definitions
 * @param  buff     buffer that stores data read
 *
 */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t * ctx, uint8_t * buff)
{
 80a7b98:	b580      	push	{r7, lr}
 80a7b9a:	b084      	sub	sp, #16
 80a7b9c:	af00      	add	r7, sp, #0
 80a7b9e:	6078      	str	r0, [r7, #4]
 80a7ba0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 80a7ba2:	2306      	movs	r3, #6
 80a7ba4:	683a      	ldr	r2, [r7, #0]
 80a7ba6:	2128      	movs	r1, #40	; 0x28
 80a7ba8:	6878      	ldr	r0, [r7, #4]
 80a7baa:	f7ff fc60 	bl	80a746e <lsm6dso_read_reg>
 80a7bae:	60f8      	str	r0, [r7, #12]
  return ret;
 80a7bb0:	68fb      	ldr	r3, [r7, #12]
}
 80a7bb2:	4618      	mov	r0, r3
 80a7bb4:	3710      	adds	r7, #16
 80a7bb6:	46bd      	mov	sp, r7
 80a7bb8:	bd80      	pop	{r7, pc}

080a7bba <lsm6dso_mem_bank_set>:
 * @param  val      change the values of reg_access in
 *                               reg FUNC_CFG_ACCESS
 *
 */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t * ctx, lsm6dso_reg_access_t val)
{
 80a7bba:	b580      	push	{r7, lr}
 80a7bbc:	b084      	sub	sp, #16
 80a7bbe:	af00      	add	r7, sp, #0
 80a7bc0:	6078      	str	r0, [r7, #4]
 80a7bc2:	460b      	mov	r3, r1
 80a7bc4:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *) & reg, 1);
 80a7bc6:	f107 0208 	add.w	r2, r7, #8
 80a7bca:	2301      	movs	r3, #1
 80a7bcc:	2101      	movs	r1, #1
 80a7bce:	6878      	ldr	r0, [r7, #4]
 80a7bd0:	f7ff fc4d 	bl	80a746e <lsm6dso_read_reg>
 80a7bd4:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80a7bd6:	68fb      	ldr	r3, [r7, #12]
 80a7bd8:	2b00      	cmp	r3, #0
 80a7bda:	d10f      	bne.n	80a7bfc <lsm6dso_mem_bank_set+0x42>
    reg.reg_access = (uint8_t) val;
 80a7bdc:	78fb      	ldrb	r3, [r7, #3]
 80a7bde:	f003 0303 	and.w	r3, r3, #3
 80a7be2:	b2da      	uxtb	r2, r3
 80a7be4:	7a3b      	ldrb	r3, [r7, #8]
 80a7be6:	f362 1387 	bfi	r3, r2, #6, #2
 80a7bea:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *) & reg, 1);
 80a7bec:	f107 0208 	add.w	r2, r7, #8
 80a7bf0:	2301      	movs	r3, #1
 80a7bf2:	2101      	movs	r1, #1
 80a7bf4:	6878      	ldr	r0, [r7, #4]
 80a7bf6:	f7ff fc52 	bl	80a749e <lsm6dso_write_reg>
 80a7bfa:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80a7bfc:	68fb      	ldr	r3, [r7, #12]
}
 80a7bfe:	4618      	mov	r0, r3
 80a7c00:	3710      	adds	r7, #16
 80a7c02:	46bd      	mov	sp, r7
 80a7c04:	bd80      	pop	{r7, pc}

080a7c06 <lsm6dso_device_id_get>:
 * @param  ctx      read / write interface definitions
 * @param  buff     buffer that stores data read
 *
 */
int32_t lsm6dso_device_id_get(stmdev_ctx_t * ctx, uint8_t * buff)
{
 80a7c06:	b580      	push	{r7, lr}
 80a7c08:	b084      	sub	sp, #16
 80a7c0a:	af00      	add	r7, sp, #0
 80a7c0c:	6078      	str	r0, [r7, #4]
 80a7c0e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 80a7c10:	2301      	movs	r3, #1
 80a7c12:	683a      	ldr	r2, [r7, #0]
 80a7c14:	210f      	movs	r1, #15
 80a7c16:	6878      	ldr	r0, [r7, #4]
 80a7c18:	f7ff fc29 	bl	80a746e <lsm6dso_read_reg>
 80a7c1c:	60f8      	str	r0, [r7, #12]
  return ret;
 80a7c1e:	68fb      	ldr	r3, [r7, #12]
}
 80a7c20:	4618      	mov	r0, r3
 80a7c22:	3710      	adds	r7, #16
 80a7c24:	46bd      	mov	sp, r7
 80a7c26:	bd80      	pop	{r7, pc}

080a7c28 <lsm6dso_reset_set>:
 * @param  ctx      read / write interface definitions
 * @param  val      change the values of sw_reset in reg CTRL3_C
 *
 */
int32_t lsm6dso_reset_set(stmdev_ctx_t * ctx, uint8_t val)
{
 80a7c28:	b580      	push	{r7, lr}
 80a7c2a:	b084      	sub	sp, #16
 80a7c2c:	af00      	add	r7, sp, #0
 80a7c2e:	6078      	str	r0, [r7, #4]
 80a7c30:	460b      	mov	r3, r1
 80a7c32:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *) & reg, 1);
 80a7c34:	f107 0208 	add.w	r2, r7, #8
 80a7c38:	2301      	movs	r3, #1
 80a7c3a:	2112      	movs	r1, #18
 80a7c3c:	6878      	ldr	r0, [r7, #4]
 80a7c3e:	f7ff fc16 	bl	80a746e <lsm6dso_read_reg>
 80a7c42:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80a7c44:	68fb      	ldr	r3, [r7, #12]
 80a7c46:	2b00      	cmp	r3, #0
 80a7c48:	d10f      	bne.n	80a7c6a <lsm6dso_reset_set+0x42>
    reg.sw_reset = val;
 80a7c4a:	78fb      	ldrb	r3, [r7, #3]
 80a7c4c:	f003 0301 	and.w	r3, r3, #1
 80a7c50:	b2da      	uxtb	r2, r3
 80a7c52:	7a3b      	ldrb	r3, [r7, #8]
 80a7c54:	f362 0300 	bfi	r3, r2, #0, #1
 80a7c58:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *) & reg, 1);
 80a7c5a:	f107 0208 	add.w	r2, r7, #8
 80a7c5e:	2301      	movs	r3, #1
 80a7c60:	2112      	movs	r1, #18
 80a7c62:	6878      	ldr	r0, [r7, #4]
 80a7c64:	f7ff fc1b 	bl	80a749e <lsm6dso_write_reg>
 80a7c68:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80a7c6a:	68fb      	ldr	r3, [r7, #12]
}
 80a7c6c:	4618      	mov	r0, r3
 80a7c6e:	3710      	adds	r7, #16
 80a7c70:	46bd      	mov	sp, r7
 80a7c72:	bd80      	pop	{r7, pc}

080a7c74 <lsm6dso_reset_get>:
 * @param  ctx      read / write interface definitions
 * @param  val      change the values of sw_reset in reg CTRL3_C
 *
 */
int32_t lsm6dso_reset_get(stmdev_ctx_t * ctx, uint8_t * val)
{
 80a7c74:	b580      	push	{r7, lr}
 80a7c76:	b084      	sub	sp, #16
 80a7c78:	af00      	add	r7, sp, #0
 80a7c7a:	6078      	str	r0, [r7, #4]
 80a7c7c:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *) & reg, 1);
 80a7c7e:	f107 0208 	add.w	r2, r7, #8
 80a7c82:	2301      	movs	r3, #1
 80a7c84:	2112      	movs	r1, #18
 80a7c86:	6878      	ldr	r0, [r7, #4]
 80a7c88:	f7ff fbf1 	bl	80a746e <lsm6dso_read_reg>
 80a7c8c:	60f8      	str	r0, [r7, #12]
  *val = reg.sw_reset;
 80a7c8e:	7a3b      	ldrb	r3, [r7, #8]
 80a7c90:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80a7c94:	b2db      	uxtb	r3, r3
 80a7c96:	461a      	mov	r2, r3
 80a7c98:	683b      	ldr	r3, [r7, #0]
 80a7c9a:	701a      	strb	r2, [r3, #0]
  return ret;
 80a7c9c:	68fb      	ldr	r3, [r7, #12]
}
 80a7c9e:	4618      	mov	r0, r3
 80a7ca0:	3710      	adds	r7, #16
 80a7ca2:	46bd      	mov	sp, r7
 80a7ca4:	bd80      	pop	{r7, pc}

080a7ca6 <lsm6dso_xl_self_test_set>:
 * @param  ctx      read / write interface definitions
 * @param  val      change the values of st_xl in reg CTRL5_C
 *
 */
int32_t lsm6dso_xl_self_test_set(stmdev_ctx_t * ctx, lsm6dso_st_xl_t val)
{
 80a7ca6:	b580      	push	{r7, lr}
 80a7ca8:	b084      	sub	sp, #16
 80a7caa:	af00      	add	r7, sp, #0
 80a7cac:	6078      	str	r0, [r7, #4]
 80a7cae:	460b      	mov	r3, r1
 80a7cb0:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl5_c_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL5_C, (uint8_t *) & reg, 1);
 80a7cb2:	f107 0208 	add.w	r2, r7, #8
 80a7cb6:	2301      	movs	r3, #1
 80a7cb8:	2114      	movs	r1, #20
 80a7cba:	6878      	ldr	r0, [r7, #4]
 80a7cbc:	f7ff fbd7 	bl	80a746e <lsm6dso_read_reg>
 80a7cc0:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80a7cc2:	68fb      	ldr	r3, [r7, #12]
 80a7cc4:	2b00      	cmp	r3, #0
 80a7cc6:	d10f      	bne.n	80a7ce8 <lsm6dso_xl_self_test_set+0x42>
    reg.st_xl = (uint8_t) val;
 80a7cc8:	78fb      	ldrb	r3, [r7, #3]
 80a7cca:	f003 0303 	and.w	r3, r3, #3
 80a7cce:	b2da      	uxtb	r2, r3
 80a7cd0:	7a3b      	ldrb	r3, [r7, #8]
 80a7cd2:	f362 0301 	bfi	r3, r2, #0, #2
 80a7cd6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL5_C, (uint8_t *) & reg, 1);
 80a7cd8:	f107 0208 	add.w	r2, r7, #8
 80a7cdc:	2301      	movs	r3, #1
 80a7cde:	2114      	movs	r1, #20
 80a7ce0:	6878      	ldr	r0, [r7, #4]
 80a7ce2:	f7ff fbdc 	bl	80a749e <lsm6dso_write_reg>
 80a7ce6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80a7ce8:	68fb      	ldr	r3, [r7, #12]
}
 80a7cea:	4618      	mov	r0, r3
 80a7cec:	3710      	adds	r7, #16
 80a7cee:	46bd      	mov	sp, r7
 80a7cf0:	bd80      	pop	{r7, pc}

080a7cf2 <lsm6dso_gy_self_test_set>:
 * @param  ctx      read / write interface definitions
 * @param  val      change the values of st_g in reg CTRL5_C
 *
 */
int32_t lsm6dso_gy_self_test_set(stmdev_ctx_t * ctx, lsm6dso_st_g_t val)
{
 80a7cf2:	b580      	push	{r7, lr}
 80a7cf4:	b084      	sub	sp, #16
 80a7cf6:	af00      	add	r7, sp, #0
 80a7cf8:	6078      	str	r0, [r7, #4]
 80a7cfa:	460b      	mov	r3, r1
 80a7cfc:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl5_c_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL5_C, (uint8_t *) & reg, 1);
 80a7cfe:	f107 0208 	add.w	r2, r7, #8
 80a7d02:	2301      	movs	r3, #1
 80a7d04:	2114      	movs	r1, #20
 80a7d06:	6878      	ldr	r0, [r7, #4]
 80a7d08:	f7ff fbb1 	bl	80a746e <lsm6dso_read_reg>
 80a7d0c:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80a7d0e:	68fb      	ldr	r3, [r7, #12]
 80a7d10:	2b00      	cmp	r3, #0
 80a7d12:	d10f      	bne.n	80a7d34 <lsm6dso_gy_self_test_set+0x42>
    reg.st_g = (uint8_t) val;
 80a7d14:	78fb      	ldrb	r3, [r7, #3]
 80a7d16:	f003 0303 	and.w	r3, r3, #3
 80a7d1a:	b2da      	uxtb	r2, r3
 80a7d1c:	7a3b      	ldrb	r3, [r7, #8]
 80a7d1e:	f362 0383 	bfi	r3, r2, #2, #2
 80a7d22:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL5_C, (uint8_t *) & reg, 1);
 80a7d24:	f107 0208 	add.w	r2, r7, #8
 80a7d28:	2301      	movs	r3, #1
 80a7d2a:	2114      	movs	r1, #20
 80a7d2c:	6878      	ldr	r0, [r7, #4]
 80a7d2e:	f7ff fbb6 	bl	80a749e <lsm6dso_write_reg>
 80a7d32:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80a7d34:	68fb      	ldr	r3, [r7, #12]
}
 80a7d36:	4618      	mov	r0, r3
 80a7d38:	3710      	adds	r7, #16
 80a7d3a:	46bd      	mov	sp, r7
 80a7d3c:	bd80      	pop	{r7, pc}

080a7d3e <lsm6dso_xl_filter_lp2_set>:
 * @param  ctx      read / write interface definitions
 * @param  val      change the values of lpf2_xl_en in reg CTRL1_XL
 *
 */
int32_t lsm6dso_xl_filter_lp2_set(stmdev_ctx_t * ctx, uint8_t val)
{
 80a7d3e:	b580      	push	{r7, lr}
 80a7d40:	b084      	sub	sp, #16
 80a7d42:	af00      	add	r7, sp, #0
 80a7d44:	6078      	str	r0, [r7, #4]
 80a7d46:	460b      	mov	r3, r1
 80a7d48:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *) & reg, 1);
 80a7d4a:	f107 0208 	add.w	r2, r7, #8
 80a7d4e:	2301      	movs	r3, #1
 80a7d50:	2110      	movs	r1, #16
 80a7d52:	6878      	ldr	r0, [r7, #4]
 80a7d54:	f7ff fb8b 	bl	80a746e <lsm6dso_read_reg>
 80a7d58:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80a7d5a:	68fb      	ldr	r3, [r7, #12]
 80a7d5c:	2b00      	cmp	r3, #0
 80a7d5e:	d10f      	bne.n	80a7d80 <lsm6dso_xl_filter_lp2_set+0x42>
    reg.lpf2_xl_en = val;
 80a7d60:	78fb      	ldrb	r3, [r7, #3]
 80a7d62:	f003 0301 	and.w	r3, r3, #1
 80a7d66:	b2da      	uxtb	r2, r3
 80a7d68:	7a3b      	ldrb	r3, [r7, #8]
 80a7d6a:	f362 0341 	bfi	r3, r2, #1, #1
 80a7d6e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *) & reg, 1);
 80a7d70:	f107 0208 	add.w	r2, r7, #8
 80a7d74:	2301      	movs	r3, #1
 80a7d76:	2110      	movs	r1, #16
 80a7d78:	6878      	ldr	r0, [r7, #4]
 80a7d7a:	f7ff fb90 	bl	80a749e <lsm6dso_write_reg>
 80a7d7e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80a7d80:	68fb      	ldr	r3, [r7, #12]
}
 80a7d82:	4618      	mov	r0, r3
 80a7d84:	3710      	adds	r7, #16
 80a7d86:	46bd      	mov	sp, r7
 80a7d88:	bd80      	pop	{r7, pc}

080a7d8a <lsm6dso_xl_hp_path_on_out_set>:
 *                                   in reg CTRL8_XL
 *
 */
int32_t lsm6dso_xl_hp_path_on_out_set(stmdev_ctx_t * ctx,
                                      lsm6dso_hp_slope_xl_en_t val)
{
 80a7d8a:	b580      	push	{r7, lr}
 80a7d8c:	b084      	sub	sp, #16
 80a7d8e:	af00      	add	r7, sp, #0
 80a7d90:	6078      	str	r0, [r7, #4]
 80a7d92:	460b      	mov	r3, r1
 80a7d94:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl8_xl_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *) & reg, 1);
 80a7d96:	f107 0208 	add.w	r2, r7, #8
 80a7d9a:	2301      	movs	r3, #1
 80a7d9c:	2117      	movs	r1, #23
 80a7d9e:	6878      	ldr	r0, [r7, #4]
 80a7da0:	f7ff fb65 	bl	80a746e <lsm6dso_read_reg>
 80a7da4:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80a7da6:	68fb      	ldr	r3, [r7, #12]
 80a7da8:	2b00      	cmp	r3, #0
 80a7daa:	d121      	bne.n	80a7df0 <lsm6dso_xl_hp_path_on_out_set+0x66>
    reg.hp_slope_xl_en = ((uint8_t) val & 0x10U) >> 4;
 80a7dac:	78fb      	ldrb	r3, [r7, #3]
 80a7dae:	091b      	lsrs	r3, r3, #4
 80a7db0:	f003 0301 	and.w	r3, r3, #1
 80a7db4:	b2da      	uxtb	r2, r3
 80a7db6:	7a3b      	ldrb	r3, [r7, #8]
 80a7db8:	f362 0382 	bfi	r3, r2, #2, #1
 80a7dbc:	723b      	strb	r3, [r7, #8]
    reg.hp_ref_mode_xl = ((uint8_t) val & 0x20U) >> 5;
 80a7dbe:	78fb      	ldrb	r3, [r7, #3]
 80a7dc0:	095b      	lsrs	r3, r3, #5
 80a7dc2:	f003 0301 	and.w	r3, r3, #1
 80a7dc6:	b2da      	uxtb	r2, r3
 80a7dc8:	7a3b      	ldrb	r3, [r7, #8]
 80a7dca:	f362 1304 	bfi	r3, r2, #4, #1
 80a7dce:	723b      	strb	r3, [r7, #8]
    reg.hpcf_xl = (uint8_t) val & 0x07U;
 80a7dd0:	78fb      	ldrb	r3, [r7, #3]
 80a7dd2:	f003 0307 	and.w	r3, r3, #7
 80a7dd6:	b2da      	uxtb	r2, r3
 80a7dd8:	7a3b      	ldrb	r3, [r7, #8]
 80a7dda:	f362 1347 	bfi	r3, r2, #5, #3
 80a7dde:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *) & reg, 1);
 80a7de0:	f107 0208 	add.w	r2, r7, #8
 80a7de4:	2301      	movs	r3, #1
 80a7de6:	2117      	movs	r1, #23
 80a7de8:	6878      	ldr	r0, [r7, #4]
 80a7dea:	f7ff fb58 	bl	80a749e <lsm6dso_write_reg>
 80a7dee:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80a7df0:	68fb      	ldr	r3, [r7, #12]
}
 80a7df2:	4618      	mov	r0, r3
 80a7df4:	3710      	adds	r7, #16
 80a7df6:	46bd      	mov	sp, r7
 80a7df8:	bd80      	pop	{r7, pc}

080a7dfa <lsm6dso_i3c_disable_set>:
 * @param  val      change the values of i3c_disable
 *                                    in reg CTRL9_XL
 *
 */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t * ctx, lsm6dso_i3c_disable_t val)
{
 80a7dfa:	b580      	push	{r7, lr}
 80a7dfc:	b086      	sub	sp, #24
 80a7dfe:	af00      	add	r7, sp, #0
 80a7e00:	6078      	str	r0, [r7, #4]
 80a7e02:	460b      	mov	r3, r1
 80a7e04:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *) & ctrl9_xl, 1);
 80a7e06:	f107 020c 	add.w	r2, r7, #12
 80a7e0a:	2301      	movs	r3, #1
 80a7e0c:	2118      	movs	r1, #24
 80a7e0e:	6878      	ldr	r0, [r7, #4]
 80a7e10:	f7ff fb2d 	bl	80a746e <lsm6dso_read_reg>
 80a7e14:	6178      	str	r0, [r7, #20]

  if (ret == 0) {
 80a7e16:	697b      	ldr	r3, [r7, #20]
 80a7e18:	2b00      	cmp	r3, #0
 80a7e1a:	d111      	bne.n	80a7e40 <lsm6dso_i3c_disable_set+0x46>
    ctrl9_xl.i3c_disable = ((uint8_t) val & 0x80U) >> 7;
 80a7e1c:	78fb      	ldrb	r3, [r7, #3]
 80a7e1e:	09db      	lsrs	r3, r3, #7
 80a7e20:	b2db      	uxtb	r3, r3
 80a7e22:	f003 0301 	and.w	r3, r3, #1
 80a7e26:	b2da      	uxtb	r2, r3
 80a7e28:	7b3b      	ldrb	r3, [r7, #12]
 80a7e2a:	f362 0341 	bfi	r3, r2, #1, #1
 80a7e2e:	733b      	strb	r3, [r7, #12]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *) & ctrl9_xl, 1);
 80a7e30:	f107 020c 	add.w	r2, r7, #12
 80a7e34:	2301      	movs	r3, #1
 80a7e36:	2118      	movs	r1, #24
 80a7e38:	6878      	ldr	r0, [r7, #4]
 80a7e3a:	f7ff fb30 	bl	80a749e <lsm6dso_write_reg>
 80a7e3e:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0) {
 80a7e40:	697b      	ldr	r3, [r7, #20]
 80a7e42:	2b00      	cmp	r3, #0
 80a7e44:	d107      	bne.n	80a7e56 <lsm6dso_i3c_disable_set+0x5c>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 80a7e46:	f107 0210 	add.w	r2, r7, #16
 80a7e4a:	2301      	movs	r3, #1
 80a7e4c:	2162      	movs	r1, #98	; 0x62
 80a7e4e:	6878      	ldr	r0, [r7, #4]
 80a7e50:	f7ff fb0d 	bl	80a746e <lsm6dso_read_reg>
 80a7e54:	6178      	str	r0, [r7, #20]
                           (uint8_t *) & i3c_bus_avb, 1);
  }

  if (ret == 0) {
 80a7e56:	697b      	ldr	r3, [r7, #20]
 80a7e58:	2b00      	cmp	r3, #0
 80a7e5a:	d10f      	bne.n	80a7e7c <lsm6dso_i3c_disable_set+0x82>
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t) val & 0x03U;
 80a7e5c:	78fb      	ldrb	r3, [r7, #3]
 80a7e5e:	f003 0303 	and.w	r3, r3, #3
 80a7e62:	b2da      	uxtb	r2, r3
 80a7e64:	7c3b      	ldrb	r3, [r7, #16]
 80a7e66:	f362 03c4 	bfi	r3, r2, #3, #2
 80a7e6a:	743b      	strb	r3, [r7, #16]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 80a7e6c:	f107 0210 	add.w	r2, r7, #16
 80a7e70:	2301      	movs	r3, #1
 80a7e72:	2162      	movs	r1, #98	; 0x62
 80a7e74:	6878      	ldr	r0, [r7, #4]
 80a7e76:	f7ff fb12 	bl	80a749e <lsm6dso_write_reg>
 80a7e7a:	6178      	str	r0, [r7, #20]
                            (uint8_t *) & i3c_bus_avb, 1);
  }

  return ret;
 80a7e7c:	697b      	ldr	r3, [r7, #20]
}
 80a7e7e:	4618      	mov	r0, r3
 80a7e80:	3718      	adds	r7, #24
 80a7e82:	46bd      	mov	sp, r7
 80a7e84:	bd80      	pop	{r7, pc}

080a7e86 <lsm6dso_fsm_enable_get>:
 * @param  val      union of registers from FSM_ENABLE_A to FSM_ENABLE_B
 *
 */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t * ctx,
                               lsm6dso_emb_fsm_enable_t * val)
{
 80a7e86:	b580      	push	{r7, lr}
 80a7e88:	b084      	sub	sp, #16
 80a7e8a:	af00      	add	r7, sp, #0
 80a7e8c:	6078      	str	r0, [r7, #4]
 80a7e8e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 80a7e90:	2102      	movs	r1, #2
 80a7e92:	6878      	ldr	r0, [r7, #4]
 80a7e94:	f7ff fe91 	bl	80a7bba <lsm6dso_mem_bank_set>
 80a7e98:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80a7e9a:	68fb      	ldr	r3, [r7, #12]
 80a7e9c:	2b00      	cmp	r3, #0
 80a7e9e:	d106      	bne.n	80a7eae <lsm6dso_fsm_enable_get+0x28>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 80a7ea0:	2302      	movs	r3, #2
 80a7ea2:	683a      	ldr	r2, [r7, #0]
 80a7ea4:	2146      	movs	r1, #70	; 0x46
 80a7ea6:	6878      	ldr	r0, [r7, #4]
 80a7ea8:	f7ff fae1 	bl	80a746e <lsm6dso_read_reg>
 80a7eac:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0) {
 80a7eae:	68fb      	ldr	r3, [r7, #12]
 80a7eb0:	2b00      	cmp	r3, #0
 80a7eb2:	d104      	bne.n	80a7ebe <lsm6dso_fsm_enable_get+0x38>
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 80a7eb4:	2100      	movs	r1, #0
 80a7eb6:	6878      	ldr	r0, [r7, #4]
 80a7eb8:	f7ff fe7f 	bl	80a7bba <lsm6dso_mem_bank_set>
 80a7ebc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80a7ebe:	68fb      	ldr	r3, [r7, #12]
}
 80a7ec0:	4618      	mov	r0, r3
 80a7ec2:	3710      	adds	r7, #16
 80a7ec4:	46bd      	mov	sp, r7
 80a7ec6:	bd80      	pop	{r7, pc}

080a7ec8 <lsm6dso_fsm_data_rate_get>:
 * @param  ctx      read / write interface definitions
 * @param  val      Get the values of fsm_odr in reg EMB_FUNC_ODR_CFG_B
 *
 */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t * ctx, lsm6dso_fsm_odr_t * val)
{
 80a7ec8:	b580      	push	{r7, lr}
 80a7eca:	b084      	sub	sp, #16
 80a7ecc:	af00      	add	r7, sp, #0
 80a7ece:	6078      	str	r0, [r7, #4]
 80a7ed0:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;
  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 80a7ed2:	2102      	movs	r1, #2
 80a7ed4:	6878      	ldr	r0, [r7, #4]
 80a7ed6:	f7ff fe70 	bl	80a7bba <lsm6dso_mem_bank_set>
 80a7eda:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80a7edc:	68fb      	ldr	r3, [r7, #12]
 80a7ede:	2b00      	cmp	r3, #0
 80a7ee0:	d107      	bne.n	80a7ef2 <lsm6dso_fsm_data_rate_get+0x2a>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B, (uint8_t *) & reg,
 80a7ee2:	f107 0208 	add.w	r2, r7, #8
 80a7ee6:	2301      	movs	r3, #1
 80a7ee8:	215f      	movs	r1, #95	; 0x5f
 80a7eea:	6878      	ldr	r0, [r7, #4]
 80a7eec:	f7ff fabf 	bl	80a746e <lsm6dso_read_reg>
 80a7ef0:	60f8      	str	r0, [r7, #12]
                           1);
  }

  if (ret == 0) {
 80a7ef2:	68fb      	ldr	r3, [r7, #12]
 80a7ef4:	2b00      	cmp	r3, #0
 80a7ef6:	d12a      	bne.n	80a7f4e <lsm6dso_fsm_data_rate_get+0x86>
    switch (reg.fsm_odr) {
 80a7ef8:	7a3b      	ldrb	r3, [r7, #8]
 80a7efa:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80a7efe:	b2db      	uxtb	r3, r3
 80a7f00:	2b03      	cmp	r3, #3
 80a7f02:	d81b      	bhi.n	80a7f3c <lsm6dso_fsm_data_rate_get+0x74>
 80a7f04:	a201      	add	r2, pc, #4	; (adr r2, 80a7f0c <lsm6dso_fsm_data_rate_get+0x44>)
 80a7f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80a7f0a:	bf00      	nop
 80a7f0c:	080a7f1d 	.word	0x080a7f1d
 80a7f10:	080a7f25 	.word	0x080a7f25
 80a7f14:	080a7f2d 	.word	0x080a7f2d
 80a7f18:	080a7f35 	.word	0x080a7f35
    case LSM6DSO_ODR_FSM_12Hz5:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 80a7f1c:	683b      	ldr	r3, [r7, #0]
 80a7f1e:	2200      	movs	r2, #0
 80a7f20:	701a      	strb	r2, [r3, #0]
      break;
 80a7f22:	e00f      	b.n	80a7f44 <lsm6dso_fsm_data_rate_get+0x7c>

    case LSM6DSO_ODR_FSM_26Hz:
      *val = LSM6DSO_ODR_FSM_26Hz;
 80a7f24:	683b      	ldr	r3, [r7, #0]
 80a7f26:	2201      	movs	r2, #1
 80a7f28:	701a      	strb	r2, [r3, #0]
      break;
 80a7f2a:	e00b      	b.n	80a7f44 <lsm6dso_fsm_data_rate_get+0x7c>

    case LSM6DSO_ODR_FSM_52Hz:
      *val = LSM6DSO_ODR_FSM_52Hz;
 80a7f2c:	683b      	ldr	r3, [r7, #0]
 80a7f2e:	2202      	movs	r2, #2
 80a7f30:	701a      	strb	r2, [r3, #0]
      break;
 80a7f32:	e007      	b.n	80a7f44 <lsm6dso_fsm_data_rate_get+0x7c>

    case LSM6DSO_ODR_FSM_104Hz:
      *val = LSM6DSO_ODR_FSM_104Hz;
 80a7f34:	683b      	ldr	r3, [r7, #0]
 80a7f36:	2203      	movs	r2, #3
 80a7f38:	701a      	strb	r2, [r3, #0]
      break;
 80a7f3a:	e003      	b.n	80a7f44 <lsm6dso_fsm_data_rate_get+0x7c>

    default:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 80a7f3c:	683b      	ldr	r3, [r7, #0]
 80a7f3e:	2200      	movs	r2, #0
 80a7f40:	701a      	strb	r2, [r3, #0]
      break;
 80a7f42:	bf00      	nop
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 80a7f44:	2100      	movs	r1, #0
 80a7f46:	6878      	ldr	r0, [r7, #4]
 80a7f48:	f7ff fe37 	bl	80a7bba <lsm6dso_mem_bank_set>
 80a7f4c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80a7f4e:	68fb      	ldr	r3, [r7, #12]
}
 80a7f50:	4618      	mov	r0, r3
 80a7f52:	3710      	adds	r7, #16
 80a7f54:	46bd      	mov	sp, r7
 80a7f56:	bd80      	pop	{r7, pc}

080a7f58 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80a7f58:	b480      	push	{r7}
 80a7f5a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80a7f5c:	f3bf 8f4f 	dsb	sy
}
 80a7f60:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80a7f62:	4b06      	ldr	r3, [pc, #24]	; (80a7f7c <__NVIC_SystemReset+0x24>)
 80a7f64:	68db      	ldr	r3, [r3, #12]
 80a7f66:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80a7f6a:	4904      	ldr	r1, [pc, #16]	; (80a7f7c <__NVIC_SystemReset+0x24>)
 80a7f6c:	4b04      	ldr	r3, [pc, #16]	; (80a7f80 <__NVIC_SystemReset+0x28>)
 80a7f6e:	4313      	orrs	r3, r2
 80a7f70:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80a7f72:	f3bf 8f4f 	dsb	sy
}
 80a7f76:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80a7f78:	bf00      	nop
 80a7f7a:	e7fd      	b.n	80a7f78 <__NVIC_SystemReset+0x20>
 80a7f7c:	e000ed00 	.word	0xe000ed00
 80a7f80:	05fa0004 	.word	0x05fa0004

080a7f84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80a7f84:	b580      	push	{r7, lr}
 80a7f86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration-------------------------------------------------------- */

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80a7f88:	f007 fb1e 	bl	80af5c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80a7f8c:	f000 f96a 	bl	80a8264 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80a7f90:	f000 fc88 	bl	80a88a4 <MX_GPIO_Init>
  MX_DMA_Init();
 80a7f94:	f000 fc5e 	bl	80a8854 <MX_DMA_Init>
  MX_CAN1_Init();
 80a7f98:	f000 f9ce 	bl	80a8338 <MX_CAN1_Init>
  MX_CAN2_Init();
 80a7f9c:	f000 fa3c 	bl	80a8418 <MX_CAN2_Init>
  MX_USART2_UART_Init();
 80a7fa0:	f000 fc28 	bl	80a87f4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80a7fa4:	f000 fbb0 	bl	80a8708 <MX_TIM3_Init>
  MX_I2C2_Init();
 80a7fa8:	f000 faa6 	bl	80a84f8 <MX_I2C2_Init>
  MX_SPI1_Init();
 80a7fac:	f000 fad4 	bl	80a8558 <MX_SPI1_Init>
  MX_TIM2_Init();
 80a7fb0:	f000 fb08 	bl	80a85c4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  Get_BoardID();
 80a7fb4:	f000 fd4a 	bl	80a8a4c <Get_BoardID>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80a7fb8:	f00d ff84 	bl	80b5ec4 <osKernelInitialize>
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of DataTimer */
  DataTimerHandle =
      osTimerNew(DataTimerCallback, osTimerPeriodic, NULL,
 80a7fbc:	4b77      	ldr	r3, [pc, #476]	; (80a819c <main+0x218>)
 80a7fbe:	2200      	movs	r2, #0
 80a7fc0:	2101      	movs	r1, #1
 80a7fc2:	4877      	ldr	r0, [pc, #476]	; (80a81a0 <main+0x21c>)
 80a7fc4:	f00e f8ca 	bl	80b615c <osTimerNew>
 80a7fc8:	4603      	mov	r3, r0
  DataTimerHandle =
 80a7fca:	4a76      	ldr	r2, [pc, #472]	; (80a81a4 <main+0x220>)
 80a7fcc:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* Create the queue(s) */
  /* creation of Can1BroadcastQ */
  Can1BroadcastQHandle = osMessageQueueNew(32, sizeof(can_message_event_t),
 80a7fce:	4a76      	ldr	r2, [pc, #472]	; (80a81a8 <main+0x224>)
 80a7fd0:	2124      	movs	r1, #36	; 0x24
 80a7fd2:	2020      	movs	r0, #32
 80a7fd4:	f00e f9a3 	bl	80b631e <osMessageQueueNew>
 80a7fd8:	4603      	mov	r3, r0
 80a7fda:	4a74      	ldr	r2, [pc, #464]	; (80a81ac <main+0x228>)
 80a7fdc:	6013      	str	r3, [r2, #0]
                                           &Can1BroadcastQ_attributes);

  /* creation of Can1ReceiveQ */
  Can1ReceiveQHandle = osMessageQueueNew(32, sizeof(can_message_event_t),
 80a7fde:	4a74      	ldr	r2, [pc, #464]	; (80a81b0 <main+0x22c>)
 80a7fe0:	2124      	movs	r1, #36	; 0x24
 80a7fe2:	2020      	movs	r0, #32
 80a7fe4:	f00e f99b 	bl	80b631e <osMessageQueueNew>
 80a7fe8:	4603      	mov	r3, r0
 80a7fea:	4a72      	ldr	r2, [pc, #456]	; (80a81b4 <main+0x230>)
 80a7fec:	6013      	str	r3, [r2, #0]
                                         &Can1ReceiveQ_attributes);

  /* creation of Can2BroadcastQ */
  Can2BroadcastQHandle = osMessageQueueNew(32, sizeof(can_message_event_t),
 80a7fee:	4a72      	ldr	r2, [pc, #456]	; (80a81b8 <main+0x234>)
 80a7ff0:	2124      	movs	r1, #36	; 0x24
 80a7ff2:	2020      	movs	r0, #32
 80a7ff4:	f00e f993 	bl	80b631e <osMessageQueueNew>
 80a7ff8:	4603      	mov	r3, r0
 80a7ffa:	4a70      	ldr	r2, [pc, #448]	; (80a81bc <main+0x238>)
 80a7ffc:	6013      	str	r3, [r2, #0]
                                           &Can2BroadcastQ_attributes);

  /* creation of Can2ReceiveQ */
  Can2ReceiveQHandle = osMessageQueueNew(32, sizeof(can_message_event_t),
 80a7ffe:	4a70      	ldr	r2, [pc, #448]	; (80a81c0 <main+0x23c>)
 80a8000:	2124      	movs	r1, #36	; 0x24
 80a8002:	2020      	movs	r0, #32
 80a8004:	f00e f98b 	bl	80b631e <osMessageQueueNew>
 80a8008:	4603      	mov	r3, r0
 80a800a:	4a6e      	ldr	r2, [pc, #440]	; (80a81c4 <main+0x240>)
 80a800c:	6013      	str	r3, [r2, #0]
                                         &Can2ReceiveQ_attributes);

  /* creation of Uart2TaskQ */
  Uart2MsgQHandle = osMessageQueueNew(32, sizeof(uint8_t) * UART_TX_CODE_LENGTH,
 80a800e:	4a6e      	ldr	r2, [pc, #440]	; (80a81c8 <main+0x244>)
 80a8010:	211d      	movs	r1, #29
 80a8012:	2020      	movs	r0, #32
 80a8014:	f00e f983 	bl	80b631e <osMessageQueueNew>
 80a8018:	4603      	mov	r3, r0
 80a801a:	4a6c      	ldr	r2, [pc, #432]	; (80a81cc <main+0x248>)
 80a801c:	6013      	str	r3, [r2, #0]
                                      &Uart2MsgQ_attributes);

  /* creation of SensorDataQ */
  SensorDataQHandle = osMessageQueueNew(64, sizeof(sensors_event_t),
 80a801e:	4a6c      	ldr	r2, [pc, #432]	; (80a81d0 <main+0x24c>)
 80a8020:	2150      	movs	r1, #80	; 0x50
 80a8022:	2040      	movs	r0, #64	; 0x40
 80a8024:	f00e f97b 	bl	80b631e <osMessageQueueNew>
 80a8028:	4603      	mov	r3, r0
 80a802a:	4a6a      	ldr	r2, [pc, #424]	; (80a81d4 <main+0x250>)
 80a802c:	6013      	str	r3, [r2, #0]
                                        &SensorDataQ_attributes);

  /* creation of SensorMessageQ */
  SensorMsgQHandle = osMessageQueueNew(32, sizeof(sensor_message_event_t),
 80a802e:	4a6a      	ldr	r2, [pc, #424]	; (80a81d8 <main+0x254>)
 80a8030:	2158      	movs	r1, #88	; 0x58
 80a8032:	2020      	movs	r0, #32
 80a8034:	f00e f973 	bl	80b631e <osMessageQueueNew>
 80a8038:	4603      	mov	r3, r0
 80a803a:	4a68      	ldr	r2, [pc, #416]	; (80a81dc <main+0x258>)
 80a803c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* Create the thread(s) */
  /* creation of Can1Broadcast */
  Can1BroadcastHandle = osThreadNew(StartCan1BroadcastTask, NULL,
 80a803e:	4a68      	ldr	r2, [pc, #416]	; (80a81e0 <main+0x25c>)
 80a8040:	2100      	movs	r1, #0
 80a8042:	4868      	ldr	r0, [pc, #416]	; (80a81e4 <main+0x260>)
 80a8044:	f00d ffa6 	bl	80b5f94 <osThreadNew>
 80a8048:	4603      	mov	r3, r0
 80a804a:	4a67      	ldr	r2, [pc, #412]	; (80a81e8 <main+0x264>)
 80a804c:	6013      	str	r3, [r2, #0]
                                    &Can1Broadcast_attributes);

  /* creation of Can1Receive */
  Can1ReceiveHandle = osThreadNew(StartCan1ReceiveTask, NULL,
 80a804e:	4a67      	ldr	r2, [pc, #412]	; (80a81ec <main+0x268>)
 80a8050:	2100      	movs	r1, #0
 80a8052:	4867      	ldr	r0, [pc, #412]	; (80a81f0 <main+0x26c>)
 80a8054:	f00d ff9e 	bl	80b5f94 <osThreadNew>
 80a8058:	4603      	mov	r3, r0
 80a805a:	4a66      	ldr	r2, [pc, #408]	; (80a81f4 <main+0x270>)
 80a805c:	6013      	str	r3, [r2, #0]
                                  &Can1Receive_attributes);

  /* creation of Can2Broadcast */
  Can2BroadcastHandle = osThreadNew(StartCan2BroadcastTask, NULL,
 80a805e:	4a66      	ldr	r2, [pc, #408]	; (80a81f8 <main+0x274>)
 80a8060:	2100      	movs	r1, #0
 80a8062:	4866      	ldr	r0, [pc, #408]	; (80a81fc <main+0x278>)
 80a8064:	f00d ff96 	bl	80b5f94 <osThreadNew>
 80a8068:	4603      	mov	r3, r0
 80a806a:	4a65      	ldr	r2, [pc, #404]	; (80a8200 <main+0x27c>)
 80a806c:	6013      	str	r3, [r2, #0]
                                    &Can2Broadcast_attributes);

  /* creation of Can2Receive */
  Can2ReceiveHandle = osThreadNew(StartCan2ReceiveTask, NULL,
 80a806e:	4a65      	ldr	r2, [pc, #404]	; (80a8204 <main+0x280>)
 80a8070:	2100      	movs	r1, #0
 80a8072:	4865      	ldr	r0, [pc, #404]	; (80a8208 <main+0x284>)
 80a8074:	f00d ff8e 	bl	80b5f94 <osThreadNew>
 80a8078:	4603      	mov	r3, r0
 80a807a:	4a64      	ldr	r2, [pc, #400]	; (80a820c <main+0x288>)
 80a807c:	6013      	str	r3, [r2, #0]
                                  &Can2Receive_attributes);

  /* creation of Uart2Task */
  Uart2TaskHandle = osThreadNew(StartUart2Task, NULL, &Uart2Task_attributes);
 80a807e:	4a64      	ldr	r2, [pc, #400]	; (80a8210 <main+0x28c>)
 80a8080:	2100      	movs	r1, #0
 80a8082:	4864      	ldr	r0, [pc, #400]	; (80a8214 <main+0x290>)
 80a8084:	f00d ff86 	bl	80b5f94 <osThreadNew>
 80a8088:	4603      	mov	r3, r0
 80a808a:	4a63      	ldr	r2, [pc, #396]	; (80a8218 <main+0x294>)
 80a808c:	6013      	str	r3, [r2, #0]

  /* creation of SensorManager */
  //sensor manager thread need to handle different config messages such as selftest/calibration/timer
  SensorManagerHandle = osThreadNew(StartSensorManagerTask, NULL,
 80a808e:	4a63      	ldr	r2, [pc, #396]	; (80a821c <main+0x298>)
 80a8090:	2100      	movs	r1, #0
 80a8092:	4863      	ldr	r0, [pc, #396]	; (80a8220 <main+0x29c>)
 80a8094:	f00d ff7e 	bl	80b5f94 <osThreadNew>
 80a8098:	4603      	mov	r3, r0
 80a809a:	4a62      	ldr	r2, [pc, #392]	; (80a8224 <main+0x2a0>)
 80a809c:	6013      	str	r3, [r2, #0]
                                    &SensorManager_attributes);

  /* creation of SensorDataProc */
  SensorDataProcHandle = osThreadNew(StartSensorDataProcesser, NULL,
 80a809e:	4a62      	ldr	r2, [pc, #392]	; (80a8228 <main+0x2a4>)
 80a80a0:	2100      	movs	r1, #0
 80a80a2:	4862      	ldr	r0, [pc, #392]	; (80a822c <main+0x2a8>)
 80a80a4:	f00d ff76 	bl	80b5f94 <osThreadNew>
 80a80a8:	4603      	mov	r3, r0
 80a80aa:	4a61      	ldr	r2, [pc, #388]	; (80a8230 <main+0x2ac>)
 80a80ac:	6013      	str	r3, [r2, #0]
                                     &SensorDataProc_attributes);

  //init sensor related parameters
  platformInitPrams.boardID = boardID;
 80a80ae:	4b61      	ldr	r3, [pc, #388]	; (80a8234 <main+0x2b0>)
 80a80b0:	781a      	ldrb	r2, [r3, #0]
 80a80b2:	4b61      	ldr	r3, [pc, #388]	; (80a8238 <main+0x2b4>)
 80a80b4:	701a      	strb	r2, [r3, #0]
  platformInitPrams.i2c_handle = hi2c2;
 80a80b6:	4b60      	ldr	r3, [pc, #384]	; (80a8238 <main+0x2b4>)
 80a80b8:	4a60      	ldr	r2, [pc, #384]	; (80a823c <main+0x2b8>)
 80a80ba:	3304      	adds	r3, #4
 80a80bc:	4611      	mov	r1, r2
 80a80be:	2254      	movs	r2, #84	; 0x54
 80a80c0:	4618      	mov	r0, r3
 80a80c2:	f017 ff6d 	bl	80bffa0 <memcpy>
  platformInitPrams.uart = huart2;
 80a80c6:	4b5c      	ldr	r3, [pc, #368]	; (80a8238 <main+0x2b4>)
 80a80c8:	4a5d      	ldr	r2, [pc, #372]	; (80a8240 <main+0x2bc>)
 80a80ca:	3358      	adds	r3, #88	; 0x58
 80a80cc:	4611      	mov	r1, r2
 80a80ce:	2244      	movs	r2, #68	; 0x44
 80a80d0:	4618      	mov	r0, r3
 80a80d2:	f017 ff65 	bl	80bffa0 <memcpy>
  platformInitPrams.spi_handle = hspi1;
 80a80d6:	4b58      	ldr	r3, [pc, #352]	; (80a8238 <main+0x2b4>)
 80a80d8:	4a5a      	ldr	r2, [pc, #360]	; (80a8244 <main+0x2c0>)
 80a80da:	339c      	adds	r3, #156	; 0x9c
 80a80dc:	4611      	mov	r1, r2
 80a80de:	2258      	movs	r2, #88	; 0x58
 80a80e0:	4618      	mov	r0, r3
 80a80e2:	f017 ff5d 	bl	80bffa0 <memcpy>
  platformInitPrams.SensorMessageQHandle = SensorMsgQHandle;
 80a80e6:	4b3d      	ldr	r3, [pc, #244]	; (80a81dc <main+0x258>)
 80a80e8:	681b      	ldr	r3, [r3, #0]
 80a80ea:	4a53      	ldr	r2, [pc, #332]	; (80a8238 <main+0x2b4>)
 80a80ec:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
  platformInitPrams.SensorDataQHandle = SensorDataQHandle;
 80a80f0:	4b38      	ldr	r3, [pc, #224]	; (80a81d4 <main+0x250>)
 80a80f2:	681b      	ldr	r3, [r3, #0]
 80a80f4:	4a50      	ldr	r2, [pc, #320]	; (80a8238 <main+0x2b4>)
 80a80f6:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
  platformInitPrams.UartReportQHandle = Uart2MsgQHandle;
 80a80fa:	4b34      	ldr	r3, [pc, #208]	; (80a81cc <main+0x248>)
 80a80fc:	681b      	ldr	r3, [r3, #0]
 80a80fe:	4a4e      	ldr	r2, [pc, #312]	; (80a8238 <main+0x2b4>)
 80a8100:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
  platformInitPrams.PollingTimerHandle = DataTimerHandle;
 80a8104:	4b27      	ldr	r3, [pc, #156]	; (80a81a4 <main+0x220>)
 80a8106:	681b      	ldr	r3, [r3, #0]
 80a8108:	4a4b      	ldr	r2, [pc, #300]	; (80a8238 <main+0x2b4>)
 80a810a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
  platformInitPrams.OperateTimerHandle = htim3;
 80a810e:	4b4a      	ldr	r3, [pc, #296]	; (80a8238 <main+0x2b4>)
 80a8110:	4a4d      	ldr	r2, [pc, #308]	; (80a8248 <main+0x2c4>)
 80a8112:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80a8116:	4611      	mov	r1, r2
 80a8118:	2248      	movs	r2, #72	; 0x48
 80a811a:	4618      	mov	r0, r3
 80a811c:	f017 ff40 	bl	80bffa0 <memcpy>
  platformInitPrams.PWMTimerHandle = htim2;
 80a8120:	4b45      	ldr	r3, [pc, #276]	; (80a8238 <main+0x2b4>)
 80a8122:	4a4a      	ldr	r2, [pc, #296]	; (80a824c <main+0x2c8>)
 80a8124:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 80a8128:	4611      	mov	r1, r2
 80a812a:	2248      	movs	r2, #72	; 0x48
 80a812c:	4618      	mov	r0, r3
 80a812e:	f017 ff37 	bl	80bffa0 <memcpy>
  platformInitPrams.use_uart_mode = false;
 80a8132:	4b41      	ldr	r3, [pc, #260]	; (80a8238 <main+0x2b4>)
 80a8134:	2200      	movs	r2, #0
 80a8136:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
  platformInitPrams.tof_cs_gpio_port = TOF_CS_GPIO_Port;
 80a813a:	4b3f      	ldr	r3, [pc, #252]	; (80a8238 <main+0x2b4>)
 80a813c:	4a44      	ldr	r2, [pc, #272]	; (80a8250 <main+0x2cc>)
 80a813e:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  platformInitPrams.tof_cs_pin = TOF_CS_Pin;
 80a8142:	4b3d      	ldr	r3, [pc, #244]	; (80a8238 <main+0x2b4>)
 80a8144:	2210      	movs	r2, #16
 80a8146:	f8a3 21a0 	strh.w	r2, [r3, #416]	; 0x1a0
  platformInitPrams.board_calidata =
      (calibrationData *) calloc(1, sizeof(calibrationData));
 80a814a:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 80a814e:	2001      	movs	r0, #1
 80a8150:	f017 fef4 	bl	80bff3c <calloc>
 80a8154:	4603      	mov	r3, r0
 80a8156:	461a      	mov	r2, r3
  platformInitPrams.board_calidata =
 80a8158:	4b37      	ldr	r3, [pc, #220]	; (80a8238 <main+0x2b4>)
 80a815a:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
  if (platformInitPrams.board_calidata == NULL) {
 80a815e:	4b36      	ldr	r3, [pc, #216]	; (80a8238 <main+0x2b4>)
 80a8160:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80a8164:	2b00      	cmp	r3, #0
 80a8166:	d101      	bne.n	80a816c <main+0x1e8>
    /* Notification Error */
    Error_Handler();
 80a8168:	f001 fcd6 	bl	80a9b18 <Error_Handler>
  }

  memcpy(platformInitPrams.board_calidata, &flashCaliInfo,
 80a816c:	4b32      	ldr	r3, [pc, #200]	; (80a8238 <main+0x2b4>)
 80a816e:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80a8172:	f44f 7271 	mov.w	r2, #964	; 0x3c4
 80a8176:	4937      	ldr	r1, [pc, #220]	; (80a8254 <main+0x2d0>)
 80a8178:	4618      	mov	r0, r3
 80a817a:	f017 ff11 	bl	80bffa0 <memcpy>
         sizeof(calibrationData));

  sensor_register(&platformInitPrams);
 80a817e:	482e      	ldr	r0, [pc, #184]	; (80a8238 <main+0x2b4>)
 80a8180:	f004 fc3e 	bl	80aca00 <sensor_register>

  /* creation of InitTask */
  InitTaskHandle = osThreadNew(StartInitTask, NULL, &InitTask_attributes);
 80a8184:	4a34      	ldr	r2, [pc, #208]	; (80a8258 <main+0x2d4>)
 80a8186:	2100      	movs	r1, #0
 80a8188:	4834      	ldr	r0, [pc, #208]	; (80a825c <main+0x2d8>)
 80a818a:	f00d ff03 	bl	80b5f94 <osThreadNew>
 80a818e:	4603      	mov	r3, r0
 80a8190:	4a33      	ldr	r2, [pc, #204]	; (80a8260 <main+0x2dc>)
 80a8192:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80a8194:	f00d feba 	bl	80b5f0c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 80a8198:	e7fe      	b.n	80a8198 <main+0x214>
 80a819a:	bf00      	nop
 80a819c:	080c78a4 	.word	0x080c78a4
 80a81a0:	080a9a9d 	.word	0x080a9a9d
 80a81a4:	2001c1ac 	.word	0x2001c1ac
 80a81a8:	080c7974 	.word	0x080c7974
 80a81ac:	2001c004 	.word	0x2001c004
 80a81b0:	080c798c 	.word	0x080c798c
 80a81b4:	2001be6c 	.word	0x2001be6c
 80a81b8:	080c79ec 	.word	0x080c79ec
 80a81bc:	2001be70 	.word	0x2001be70
 80a81c0:	080c7a04 	.word	0x080c7a04
 80a81c4:	2001c298 	.word	0x2001c298
 80a81c8:	080c7a40 	.word	0x080c7a40
 80a81cc:	2001bf70 	.word	0x2001bf70
 80a81d0:	080c78fc 	.word	0x080c78fc
 80a81d4:	2001be08 	.word	0x2001be08
 80a81d8:	080c7914 	.word	0x080c7914
 80a81dc:	2001bec8 	.word	0x2001bec8
 80a81e0:	080c792c 	.word	0x080c792c
 80a81e4:	080a8ba5 	.word	0x080a8ba5
 80a81e8:	2001c2c4 	.word	0x2001c2c4
 80a81ec:	080c7950 	.word	0x080c7950
 80a81f0:	080a8c15 	.word	0x080a8c15
 80a81f4:	2001bf18 	.word	0x2001bf18
 80a81f8:	080c79a4 	.word	0x080c79a4
 80a81fc:	080a9089 	.word	0x080a9089
 80a8200:	2001bf78 	.word	0x2001bf78
 80a8204:	080c79c8 	.word	0x080c79c8
 80a8208:	080a90f9 	.word	0x080a90f9
 80a820c:	2001c2c8 	.word	0x2001c2c8
 80a8210:	080c7a1c 	.word	0x080c7a1c
 80a8214:	080a9419 	.word	0x080a9419
 80a8218:	2001bf44 	.word	0x2001bf44
 80a821c:	080c78b4 	.word	0x080c78b4
 80a8220:	080a9521 	.word	0x080a9521
 80a8224:	2001bf74 	.word	0x2001bf74
 80a8228:	080c78d8 	.word	0x080c78d8
 80a822c:	080a9799 	.word	0x080a9799
 80a8230:	2001c1b0 	.word	0x2001c1b0
 80a8234:	20007886 	.word	0x20007886
 80a8238:	2001c008 	.word	0x2001c008
 80a823c:	2001be74 	.word	0x2001be74
 80a8240:	2001c254 	.word	0x2001c254
 80a8244:	2001c1b4 	.word	0x2001c1b4
 80a8248:	2001bed0 	.word	0x2001bed0
 80a824c:	2001c20c 	.word	0x2001c20c
 80a8250:	40020000 	.word	0x40020000
 80a8254:	08020000 	.word	0x08020000
 80a8258:	080c7880 	.word	0x080c7880
 80a825c:	080a9969 	.word	0x080a9969
 80a8260:	2001becc 	.word	0x2001becc

080a8264 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80a8264:	b580      	push	{r7, lr}
 80a8266:	b094      	sub	sp, #80	; 0x50
 80a8268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80a826a:	f107 0320 	add.w	r3, r7, #32
 80a826e:	2230      	movs	r2, #48	; 0x30
 80a8270:	2100      	movs	r1, #0
 80a8272:	4618      	mov	r0, r3
 80a8274:	f017 fea2 	bl	80bffbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80a8278:	f107 030c 	add.w	r3, r7, #12
 80a827c:	2200      	movs	r2, #0
 80a827e:	601a      	str	r2, [r3, #0]
 80a8280:	605a      	str	r2, [r3, #4]
 80a8282:	609a      	str	r2, [r3, #8]
 80a8284:	60da      	str	r2, [r3, #12]
 80a8286:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80a8288:	2300      	movs	r3, #0
 80a828a:	60bb      	str	r3, [r7, #8]
 80a828c:	4b28      	ldr	r3, [pc, #160]	; (80a8330 <SystemClock_Config+0xcc>)
 80a828e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a8290:	4a27      	ldr	r2, [pc, #156]	; (80a8330 <SystemClock_Config+0xcc>)
 80a8292:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80a8296:	6413      	str	r3, [r2, #64]	; 0x40
 80a8298:	4b25      	ldr	r3, [pc, #148]	; (80a8330 <SystemClock_Config+0xcc>)
 80a829a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a829c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80a82a0:	60bb      	str	r3, [r7, #8]
 80a82a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80a82a4:	2300      	movs	r3, #0
 80a82a6:	607b      	str	r3, [r7, #4]
 80a82a8:	4b22      	ldr	r3, [pc, #136]	; (80a8334 <SystemClock_Config+0xd0>)
 80a82aa:	681b      	ldr	r3, [r3, #0]
 80a82ac:	4a21      	ldr	r2, [pc, #132]	; (80a8334 <SystemClock_Config+0xd0>)
 80a82ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80a82b2:	6013      	str	r3, [r2, #0]
 80a82b4:	4b1f      	ldr	r3, [pc, #124]	; (80a8334 <SystemClock_Config+0xd0>)
 80a82b6:	681b      	ldr	r3, [r3, #0]
 80a82b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80a82bc:	607b      	str	r3, [r7, #4]
 80a82be:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80a82c0:	2301      	movs	r3, #1
 80a82c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80a82c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80a82c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80a82ca:	2302      	movs	r3, #2
 80a82cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80a82ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80a82d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80a82d4:	2308      	movs	r3, #8
 80a82d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 80a82d8:	23a0      	movs	r3, #160	; 0xa0
 80a82da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80a82dc:	2302      	movs	r3, #2
 80a82de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80a82e0:	2304      	movs	r3, #4
 80a82e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80a82e4:	f107 0320 	add.w	r3, r7, #32
 80a82e8:	4618      	mov	r0, r3
 80a82ea:	f00a fe33 	bl	80b2f54 <HAL_RCC_OscConfig>
 80a82ee:	4603      	mov	r3, r0
 80a82f0:	2b00      	cmp	r3, #0
 80a82f2:	d001      	beq.n	80a82f8 <SystemClock_Config+0x94>
    Error_Handler();
 80a82f4:	f001 fc10 	bl	80a9b18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80a82f8:	230f      	movs	r3, #15
 80a82fa:	60fb      	str	r3, [r7, #12]
      | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80a82fc:	2302      	movs	r3, #2
 80a82fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80a8300:	2300      	movs	r3, #0
 80a8302:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80a8304:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80a8308:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80a830a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80a830e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80a8310:	f107 030c 	add.w	r3, r7, #12
 80a8314:	2105      	movs	r1, #5
 80a8316:	4618      	mov	r0, r3
 80a8318:	f00b f894 	bl	80b3444 <HAL_RCC_ClockConfig>
 80a831c:	4603      	mov	r3, r0
 80a831e:	2b00      	cmp	r3, #0
 80a8320:	d001      	beq.n	80a8326 <SystemClock_Config+0xc2>
    Error_Handler();
 80a8322:	f001 fbf9 	bl	80a9b18 <Error_Handler>
  }
}
 80a8326:	bf00      	nop
 80a8328:	3750      	adds	r7, #80	; 0x50
 80a832a:	46bd      	mov	sp, r7
 80a832c:	bd80      	pop	{r7, pc}
 80a832e:	bf00      	nop
 80a8330:	40023800 	.word	0x40023800
 80a8334:	40007000 	.word	0x40007000

080a8338 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80a8338:	b580      	push	{r7, lr}
 80a833a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80a833c:	4b33      	ldr	r3, [pc, #204]	; (80a840c <MX_CAN1_Init+0xd4>)
 80a833e:	4a34      	ldr	r2, [pc, #208]	; (80a8410 <MX_CAN1_Init+0xd8>)
 80a8340:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 80a8342:	4b32      	ldr	r3, [pc, #200]	; (80a840c <MX_CAN1_Init+0xd4>)
 80a8344:	2204      	movs	r2, #4
 80a8346:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80a8348:	4b30      	ldr	r3, [pc, #192]	; (80a840c <MX_CAN1_Init+0xd4>)
 80a834a:	2200      	movs	r2, #0
 80a834c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80a834e:	4b2f      	ldr	r3, [pc, #188]	; (80a840c <MX_CAN1_Init+0xd4>)
 80a8350:	2200      	movs	r2, #0
 80a8352:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 80a8354:	4b2d      	ldr	r3, [pc, #180]	; (80a840c <MX_CAN1_Init+0xd4>)
 80a8356:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80a835a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 80a835c:	4b2b      	ldr	r3, [pc, #172]	; (80a840c <MX_CAN1_Init+0xd4>)
 80a835e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80a8362:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80a8364:	4b29      	ldr	r3, [pc, #164]	; (80a840c <MX_CAN1_Init+0xd4>)
 80a8366:	2200      	movs	r2, #0
 80a8368:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80a836a:	4b28      	ldr	r3, [pc, #160]	; (80a840c <MX_CAN1_Init+0xd4>)
 80a836c:	2200      	movs	r2, #0
 80a836e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80a8370:	4b26      	ldr	r3, [pc, #152]	; (80a840c <MX_CAN1_Init+0xd4>)
 80a8372:	2200      	movs	r2, #0
 80a8374:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80a8376:	4b25      	ldr	r3, [pc, #148]	; (80a840c <MX_CAN1_Init+0xd4>)
 80a8378:	2200      	movs	r2, #0
 80a837a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80a837c:	4b23      	ldr	r3, [pc, #140]	; (80a840c <MX_CAN1_Init+0xd4>)
 80a837e:	2200      	movs	r2, #0
 80a8380:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80a8382:	4b22      	ldr	r3, [pc, #136]	; (80a840c <MX_CAN1_Init+0xd4>)
 80a8384:	2200      	movs	r2, #0
 80a8386:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 80a8388:	4820      	ldr	r0, [pc, #128]	; (80a840c <MX_CAN1_Init+0xd4>)
 80a838a:	f007 f983 	bl	80af694 <HAL_CAN_Init>
 80a838e:	4603      	mov	r3, r0
 80a8390:	2b00      	cmp	r3, #0
 80a8392:	d001      	beq.n	80a8398 <MX_CAN1_Init+0x60>
    Error_Handler();
 80a8394:	f001 fbc0 	bl	80a9b18 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  /*##-2- Configure the CAN1 Filter ########################################### */
  sCan1FilterConfig.FilterBank = 0;
 80a8398:	4b1e      	ldr	r3, [pc, #120]	; (80a8414 <MX_CAN1_Init+0xdc>)
 80a839a:	2200      	movs	r2, #0
 80a839c:	615a      	str	r2, [r3, #20]
  sCan1FilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80a839e:	4b1d      	ldr	r3, [pc, #116]	; (80a8414 <MX_CAN1_Init+0xdc>)
 80a83a0:	2200      	movs	r2, #0
 80a83a2:	619a      	str	r2, [r3, #24]
  sCan1FilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80a83a4:	4b1b      	ldr	r3, [pc, #108]	; (80a8414 <MX_CAN1_Init+0xdc>)
 80a83a6:	2201      	movs	r2, #1
 80a83a8:	61da      	str	r2, [r3, #28]
  sCan1FilterConfig.FilterIdHigh = 0x0000;
 80a83aa:	4b1a      	ldr	r3, [pc, #104]	; (80a8414 <MX_CAN1_Init+0xdc>)
 80a83ac:	2200      	movs	r2, #0
 80a83ae:	601a      	str	r2, [r3, #0]
  sCan1FilterConfig.FilterIdLow = 0x0000;
 80a83b0:	4b18      	ldr	r3, [pc, #96]	; (80a8414 <MX_CAN1_Init+0xdc>)
 80a83b2:	2200      	movs	r2, #0
 80a83b4:	605a      	str	r2, [r3, #4]
  sCan1FilterConfig.FilterMaskIdHigh = 0x0000;
 80a83b6:	4b17      	ldr	r3, [pc, #92]	; (80a8414 <MX_CAN1_Init+0xdc>)
 80a83b8:	2200      	movs	r2, #0
 80a83ba:	609a      	str	r2, [r3, #8]
  sCan1FilterConfig.FilterMaskIdLow = 0x0000;
 80a83bc:	4b15      	ldr	r3, [pc, #84]	; (80a8414 <MX_CAN1_Init+0xdc>)
 80a83be:	2200      	movs	r2, #0
 80a83c0:	60da      	str	r2, [r3, #12]
  sCan1FilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80a83c2:	4b14      	ldr	r3, [pc, #80]	; (80a8414 <MX_CAN1_Init+0xdc>)
 80a83c4:	2200      	movs	r2, #0
 80a83c6:	611a      	str	r2, [r3, #16]
  sCan1FilterConfig.FilterActivation = ENABLE;
 80a83c8:	4b12      	ldr	r3, [pc, #72]	; (80a8414 <MX_CAN1_Init+0xdc>)
 80a83ca:	2201      	movs	r2, #1
 80a83cc:	621a      	str	r2, [r3, #32]
  sCan1FilterConfig.SlaveStartFilterBank = 14;
 80a83ce:	4b11      	ldr	r3, [pc, #68]	; (80a8414 <MX_CAN1_Init+0xdc>)
 80a83d0:	220e      	movs	r2, #14
 80a83d2:	625a      	str	r2, [r3, #36]	; 0x24

  if (HAL_CAN_ConfigFilter(&hcan1, &sCan1FilterConfig) != HAL_OK) {
 80a83d4:	490f      	ldr	r1, [pc, #60]	; (80a8414 <MX_CAN1_Init+0xdc>)
 80a83d6:	480d      	ldr	r0, [pc, #52]	; (80a840c <MX_CAN1_Init+0xd4>)
 80a83d8:	f007 fa58 	bl	80af88c <HAL_CAN_ConfigFilter>
 80a83dc:	4603      	mov	r3, r0
 80a83de:	2b00      	cmp	r3, #0
 80a83e0:	d001      	beq.n	80a83e6 <MX_CAN1_Init+0xae>
    /* Filter configuration Error */
    Error_Handler();
 80a83e2:	f001 fb99 	bl	80a9b18 <Error_Handler>
  }

  /*##-3- Start the CAN peripheral ########################################### */
  if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 80a83e6:	4809      	ldr	r0, [pc, #36]	; (80a840c <MX_CAN1_Init+0xd4>)
 80a83e8:	f007 fb30 	bl	80afa4c <HAL_CAN_Start>
 80a83ec:	4603      	mov	r3, r0
 80a83ee:	2b00      	cmp	r3, #0
 80a83f0:	d001      	beq.n	80a83f6 <MX_CAN1_Init+0xbe>
    /* Start Error */
    Error_Handler();
 80a83f2:	f001 fb91 	bl	80a9b18 <Error_Handler>
  }

  /*##-4- Activate CAN RX notification ####################################### */
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)
 80a83f6:	2102      	movs	r1, #2
 80a83f8:	4804      	ldr	r0, [pc, #16]	; (80a840c <MX_CAN1_Init+0xd4>)
 80a83fa:	f007 fd58 	bl	80afeae <HAL_CAN_ActivateNotification>
 80a83fe:	4603      	mov	r3, r0
 80a8400:	2b00      	cmp	r3, #0
 80a8402:	d001      	beq.n	80a8408 <MX_CAN1_Init+0xd0>
      != HAL_OK) {
    /* Notification Error */
    Error_Handler();
 80a8404:	f001 fb88 	bl	80a9b18 <Error_Handler>
  }

  /* USER CODE END CAN1_Init 2 */

}
 80a8408:	bf00      	nop
 80a840a:	bd80      	pop	{r7, pc}
 80a840c:	2001c29c 	.word	0x2001c29c
 80a8410:	40006400 	.word	0x40006400
 80a8414:	2001bfdc 	.word	0x2001bfdc

080a8418 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80a8418:	b580      	push	{r7, lr}
 80a841a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80a841c:	4b33      	ldr	r3, [pc, #204]	; (80a84ec <MX_CAN2_Init+0xd4>)
 80a841e:	4a34      	ldr	r2, [pc, #208]	; (80a84f0 <MX_CAN2_Init+0xd8>)
 80a8420:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 4;
 80a8422:	4b32      	ldr	r3, [pc, #200]	; (80a84ec <MX_CAN2_Init+0xd4>)
 80a8424:	2204      	movs	r2, #4
 80a8426:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80a8428:	4b30      	ldr	r3, [pc, #192]	; (80a84ec <MX_CAN2_Init+0xd4>)
 80a842a:	2200      	movs	r2, #0
 80a842c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80a842e:	4b2f      	ldr	r3, [pc, #188]	; (80a84ec <MX_CAN2_Init+0xd4>)
 80a8430:	2200      	movs	r2, #0
 80a8432:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_6TQ;
 80a8434:	4b2d      	ldr	r3, [pc, #180]	; (80a84ec <MX_CAN2_Init+0xd4>)
 80a8436:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80a843a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 80a843c:	4b2b      	ldr	r3, [pc, #172]	; (80a84ec <MX_CAN2_Init+0xd4>)
 80a843e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80a8442:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80a8444:	4b29      	ldr	r3, [pc, #164]	; (80a84ec <MX_CAN2_Init+0xd4>)
 80a8446:	2200      	movs	r2, #0
 80a8448:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80a844a:	4b28      	ldr	r3, [pc, #160]	; (80a84ec <MX_CAN2_Init+0xd4>)
 80a844c:	2200      	movs	r2, #0
 80a844e:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80a8450:	4b26      	ldr	r3, [pc, #152]	; (80a84ec <MX_CAN2_Init+0xd4>)
 80a8452:	2200      	movs	r2, #0
 80a8454:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80a8456:	4b25      	ldr	r3, [pc, #148]	; (80a84ec <MX_CAN2_Init+0xd4>)
 80a8458:	2200      	movs	r2, #0
 80a845a:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80a845c:	4b23      	ldr	r3, [pc, #140]	; (80a84ec <MX_CAN2_Init+0xd4>)
 80a845e:	2200      	movs	r2, #0
 80a8460:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80a8462:	4b22      	ldr	r3, [pc, #136]	; (80a84ec <MX_CAN2_Init+0xd4>)
 80a8464:	2200      	movs	r2, #0
 80a8466:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK) {
 80a8468:	4820      	ldr	r0, [pc, #128]	; (80a84ec <MX_CAN2_Init+0xd4>)
 80a846a:	f007 f913 	bl	80af694 <HAL_CAN_Init>
 80a846e:	4603      	mov	r3, r0
 80a8470:	2b00      	cmp	r3, #0
 80a8472:	d001      	beq.n	80a8478 <MX_CAN2_Init+0x60>
    Error_Handler();
 80a8474:	f001 fb50 	bl	80a9b18 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */
  /*##-2- Configure the CAN1 Filter ########################################### */
  sCan2FilterConfig.FilterBank = 14;
 80a8478:	4b1e      	ldr	r3, [pc, #120]	; (80a84f4 <MX_CAN2_Init+0xdc>)
 80a847a:	220e      	movs	r2, #14
 80a847c:	615a      	str	r2, [r3, #20]
  sCan2FilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80a847e:	4b1d      	ldr	r3, [pc, #116]	; (80a84f4 <MX_CAN2_Init+0xdc>)
 80a8480:	2200      	movs	r2, #0
 80a8482:	619a      	str	r2, [r3, #24]
  sCan2FilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80a8484:	4b1b      	ldr	r3, [pc, #108]	; (80a84f4 <MX_CAN2_Init+0xdc>)
 80a8486:	2201      	movs	r2, #1
 80a8488:	61da      	str	r2, [r3, #28]
  sCan2FilterConfig.FilterIdHigh = 0x0000;
 80a848a:	4b1a      	ldr	r3, [pc, #104]	; (80a84f4 <MX_CAN2_Init+0xdc>)
 80a848c:	2200      	movs	r2, #0
 80a848e:	601a      	str	r2, [r3, #0]
  sCan2FilterConfig.FilterIdLow = 0x0000;
 80a8490:	4b18      	ldr	r3, [pc, #96]	; (80a84f4 <MX_CAN2_Init+0xdc>)
 80a8492:	2200      	movs	r2, #0
 80a8494:	605a      	str	r2, [r3, #4]
  sCan2FilterConfig.FilterMaskIdHigh = 0x0000;
 80a8496:	4b17      	ldr	r3, [pc, #92]	; (80a84f4 <MX_CAN2_Init+0xdc>)
 80a8498:	2200      	movs	r2, #0
 80a849a:	609a      	str	r2, [r3, #8]
  sCan2FilterConfig.FilterMaskIdLow = 0x0000;
 80a849c:	4b15      	ldr	r3, [pc, #84]	; (80a84f4 <MX_CAN2_Init+0xdc>)
 80a849e:	2200      	movs	r2, #0
 80a84a0:	60da      	str	r2, [r3, #12]
  sCan2FilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80a84a2:	4b14      	ldr	r3, [pc, #80]	; (80a84f4 <MX_CAN2_Init+0xdc>)
 80a84a4:	2200      	movs	r2, #0
 80a84a6:	611a      	str	r2, [r3, #16]
  sCan2FilterConfig.FilterActivation = ENABLE;
 80a84a8:	4b12      	ldr	r3, [pc, #72]	; (80a84f4 <MX_CAN2_Init+0xdc>)
 80a84aa:	2201      	movs	r2, #1
 80a84ac:	621a      	str	r2, [r3, #32]
  sCan2FilterConfig.SlaveStartFilterBank = 14;
 80a84ae:	4b11      	ldr	r3, [pc, #68]	; (80a84f4 <MX_CAN2_Init+0xdc>)
 80a84b0:	220e      	movs	r2, #14
 80a84b2:	625a      	str	r2, [r3, #36]	; 0x24

  if (HAL_CAN_ConfigFilter(&hcan2, &sCan2FilterConfig) != HAL_OK) {
 80a84b4:	490f      	ldr	r1, [pc, #60]	; (80a84f4 <MX_CAN2_Init+0xdc>)
 80a84b6:	480d      	ldr	r0, [pc, #52]	; (80a84ec <MX_CAN2_Init+0xd4>)
 80a84b8:	f007 f9e8 	bl	80af88c <HAL_CAN_ConfigFilter>
 80a84bc:	4603      	mov	r3, r0
 80a84be:	2b00      	cmp	r3, #0
 80a84c0:	d001      	beq.n	80a84c6 <MX_CAN2_Init+0xae>
    /* Filter configuration Error */
    Error_Handler();
 80a84c2:	f001 fb29 	bl	80a9b18 <Error_Handler>
  }

  /*##-3- Start the CAN peripheral ########################################### */
  if (HAL_CAN_Start(&hcan2) != HAL_OK) {
 80a84c6:	4809      	ldr	r0, [pc, #36]	; (80a84ec <MX_CAN2_Init+0xd4>)
 80a84c8:	f007 fac0 	bl	80afa4c <HAL_CAN_Start>
 80a84cc:	4603      	mov	r3, r0
 80a84ce:	2b00      	cmp	r3, #0
 80a84d0:	d001      	beq.n	80a84d6 <MX_CAN2_Init+0xbe>
    /* Start Error */
    Error_Handler();
 80a84d2:	f001 fb21 	bl	80a9b18 <Error_Handler>
  }

  /*##-4- Activate CAN RX notification ####################################### */
  if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING)
 80a84d6:	2102      	movs	r1, #2
 80a84d8:	4804      	ldr	r0, [pc, #16]	; (80a84ec <MX_CAN2_Init+0xd4>)
 80a84da:	f007 fce8 	bl	80afeae <HAL_CAN_ActivateNotification>
 80a84de:	4603      	mov	r3, r0
 80a84e0:	2b00      	cmp	r3, #0
 80a84e2:	d001      	beq.n	80a84e8 <MX_CAN2_Init+0xd0>
      != HAL_OK) {
    /* Notification Error */
    Error_Handler();
 80a84e4:	f001 fb18 	bl	80a9b18 <Error_Handler>
  }
  /* USER CODE END CAN2_Init 2 */

}
 80a84e8:	bf00      	nop
 80a84ea:	bd80      	pop	{r7, pc}
 80a84ec:	2001bf48 	.word	0x2001bf48
 80a84f0:	40006800 	.word	0x40006800
 80a84f4:	2001bf1c 	.word	0x2001bf1c

080a84f8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80a84f8:	b580      	push	{r7, lr}
 80a84fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80a84fc:	4b13      	ldr	r3, [pc, #76]	; (80a854c <MX_I2C2_Init+0x54>)
 80a84fe:	4a14      	ldr	r2, [pc, #80]	; (80a8550 <MX_I2C2_Init+0x58>)
 80a8500:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80a8502:	4b12      	ldr	r3, [pc, #72]	; (80a854c <MX_I2C2_Init+0x54>)
 80a8504:	4a13      	ldr	r2, [pc, #76]	; (80a8554 <MX_I2C2_Init+0x5c>)
 80a8506:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 80a8508:	4b10      	ldr	r3, [pc, #64]	; (80a854c <MX_I2C2_Init+0x54>)
 80a850a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80a850e:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80a8510:	4b0e      	ldr	r3, [pc, #56]	; (80a854c <MX_I2C2_Init+0x54>)
 80a8512:	2200      	movs	r2, #0
 80a8514:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80a8516:	4b0d      	ldr	r3, [pc, #52]	; (80a854c <MX_I2C2_Init+0x54>)
 80a8518:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80a851c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80a851e:	4b0b      	ldr	r3, [pc, #44]	; (80a854c <MX_I2C2_Init+0x54>)
 80a8520:	2200      	movs	r2, #0
 80a8522:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80a8524:	4b09      	ldr	r3, [pc, #36]	; (80a854c <MX_I2C2_Init+0x54>)
 80a8526:	2200      	movs	r2, #0
 80a8528:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80a852a:	4b08      	ldr	r3, [pc, #32]	; (80a854c <MX_I2C2_Init+0x54>)
 80a852c:	2200      	movs	r2, #0
 80a852e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80a8530:	4b06      	ldr	r3, [pc, #24]	; (80a854c <MX_I2C2_Init+0x54>)
 80a8532:	2280      	movs	r2, #128	; 0x80
 80a8534:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 80a8536:	4805      	ldr	r0, [pc, #20]	; (80a854c <MX_I2C2_Init+0x54>)
 80a8538:	f009 f8d8 	bl	80b16ec <HAL_I2C_Init>
 80a853c:	4603      	mov	r3, r0
 80a853e:	2b00      	cmp	r3, #0
 80a8540:	d001      	beq.n	80a8546 <MX_I2C2_Init+0x4e>
    Error_Handler();
 80a8542:	f001 fae9 	bl	80a9b18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80a8546:	bf00      	nop
 80a8548:	bd80      	pop	{r7, pc}
 80a854a:	bf00      	nop
 80a854c:	2001be74 	.word	0x2001be74
 80a8550:	40005800 	.word	0x40005800
 80a8554:	00061a80 	.word	0x00061a80

080a8558 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80a8558:	b580      	push	{r7, lr}
 80a855a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration */
  hspi1.Instance = SPI1;
 80a855c:	4b17      	ldr	r3, [pc, #92]	; (80a85bc <MX_SPI1_Init+0x64>)
 80a855e:	4a18      	ldr	r2, [pc, #96]	; (80a85c0 <MX_SPI1_Init+0x68>)
 80a8560:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80a8562:	4b16      	ldr	r3, [pc, #88]	; (80a85bc <MX_SPI1_Init+0x64>)
 80a8564:	f44f 7282 	mov.w	r2, #260	; 0x104
 80a8568:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80a856a:	4b14      	ldr	r3, [pc, #80]	; (80a85bc <MX_SPI1_Init+0x64>)
 80a856c:	2200      	movs	r2, #0
 80a856e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80a8570:	4b12      	ldr	r3, [pc, #72]	; (80a85bc <MX_SPI1_Init+0x64>)
 80a8572:	2200      	movs	r2, #0
 80a8574:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80a8576:	4b11      	ldr	r3, [pc, #68]	; (80a85bc <MX_SPI1_Init+0x64>)
 80a8578:	2202      	movs	r2, #2
 80a857a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80a857c:	4b0f      	ldr	r3, [pc, #60]	; (80a85bc <MX_SPI1_Init+0x64>)
 80a857e:	2201      	movs	r2, #1
 80a8580:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80a8582:	4b0e      	ldr	r3, [pc, #56]	; (80a85bc <MX_SPI1_Init+0x64>)
 80a8584:	f44f 7200 	mov.w	r2, #512	; 0x200
 80a8588:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80a858a:	4b0c      	ldr	r3, [pc, #48]	; (80a85bc <MX_SPI1_Init+0x64>)
 80a858c:	2208      	movs	r2, #8
 80a858e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80a8590:	4b0a      	ldr	r3, [pc, #40]	; (80a85bc <MX_SPI1_Init+0x64>)
 80a8592:	2200      	movs	r2, #0
 80a8594:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80a8596:	4b09      	ldr	r3, [pc, #36]	; (80a85bc <MX_SPI1_Init+0x64>)
 80a8598:	2200      	movs	r2, #0
 80a859a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80a859c:	4b07      	ldr	r3, [pc, #28]	; (80a85bc <MX_SPI1_Init+0x64>)
 80a859e:	2200      	movs	r2, #0
 80a85a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80a85a2:	4b06      	ldr	r3, [pc, #24]	; (80a85bc <MX_SPI1_Init+0x64>)
 80a85a4:	220a      	movs	r2, #10
 80a85a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80a85a8:	4804      	ldr	r0, [pc, #16]	; (80a85bc <MX_SPI1_Init+0x64>)
 80a85aa:	f00b f977 	bl	80b389c <HAL_SPI_Init>
 80a85ae:	4603      	mov	r3, r0
 80a85b0:	2b00      	cmp	r3, #0
 80a85b2:	d001      	beq.n	80a85b8 <MX_SPI1_Init+0x60>
    Error_Handler();
 80a85b4:	f001 fab0 	bl	80a9b18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80a85b8:	bf00      	nop
 80a85ba:	bd80      	pop	{r7, pc}
 80a85bc:	2001c1b4 	.word	0x2001c1b4
 80a85c0:	40013000 	.word	0x40013000

080a85c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80a85c4:	b580      	push	{r7, lr}
 80a85c6:	b096      	sub	sp, #88	; 0x58
 80a85c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80a85ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80a85ce:	2200      	movs	r2, #0
 80a85d0:	601a      	str	r2, [r3, #0]
 80a85d2:	605a      	str	r2, [r3, #4]
 80a85d4:	609a      	str	r2, [r3, #8]
 80a85d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80a85d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80a85dc:	2200      	movs	r2, #0
 80a85de:	601a      	str	r2, [r3, #0]
 80a85e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = { 0 };
 80a85e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80a85e6:	2200      	movs	r2, #0
 80a85e8:	601a      	str	r2, [r3, #0]
 80a85ea:	605a      	str	r2, [r3, #4]
 80a85ec:	609a      	str	r2, [r3, #8]
 80a85ee:	60da      	str	r2, [r3, #12]
 80a85f0:	611a      	str	r2, [r3, #16]
 80a85f2:	615a      	str	r2, [r3, #20]
 80a85f4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80a85f6:	1d3b      	adds	r3, r7, #4
 80a85f8:	2220      	movs	r2, #32
 80a85fa:	2100      	movs	r1, #0
 80a85fc:	4618      	mov	r0, r3
 80a85fe:	f017 fcdd 	bl	80bffbc <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80a8602:	4b40      	ldr	r3, [pc, #256]	; (80a8704 <MX_TIM2_Init+0x140>)
 80a8604:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80a8608:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 179;
 80a860a:	4b3e      	ldr	r3, [pc, #248]	; (80a8704 <MX_TIM2_Init+0x140>)
 80a860c:	22b3      	movs	r2, #179	; 0xb3
 80a860e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80a8610:	4b3c      	ldr	r3, [pc, #240]	; (80a8704 <MX_TIM2_Init+0x140>)
 80a8612:	2200      	movs	r2, #0
 80a8614:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50000;
 80a8616:	4b3b      	ldr	r3, [pc, #236]	; (80a8704 <MX_TIM2_Init+0x140>)
 80a8618:	f24c 3250 	movw	r2, #50000	; 0xc350
 80a861c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80a861e:	4b39      	ldr	r3, [pc, #228]	; (80a8704 <MX_TIM2_Init+0x140>)
 80a8620:	f44f 7280 	mov.w	r2, #256	; 0x100
 80a8624:	611a      	str	r2, [r3, #16]
  htim2.Init.RepetitionCounter = 0;
 80a8626:	4b37      	ldr	r3, [pc, #220]	; (80a8704 <MX_TIM2_Init+0x140>)
 80a8628:	2200      	movs	r2, #0
 80a862a:	615a      	str	r2, [r3, #20]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80a862c:	4b35      	ldr	r3, [pc, #212]	; (80a8704 <MX_TIM2_Init+0x140>)
 80a862e:	2280      	movs	r2, #128	; 0x80
 80a8630:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80a8632:	4834      	ldr	r0, [pc, #208]	; (80a8704 <MX_TIM2_Init+0x140>)
 80a8634:	f00b fc28 	bl	80b3e88 <HAL_TIM_Base_Init>
 80a8638:	4603      	mov	r3, r0
 80a863a:	2b00      	cmp	r3, #0
 80a863c:	d001      	beq.n	80a8642 <MX_TIM2_Init+0x7e>
    Error_Handler();
 80a863e:	f001 fa6b 	bl	80a9b18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80a8642:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80a8646:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80a8648:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80a864c:	4619      	mov	r1, r3
 80a864e:	482d      	ldr	r0, [pc, #180]	; (80a8704 <MX_TIM2_Init+0x140>)
 80a8650:	f00b ffda 	bl	80b4608 <HAL_TIM_ConfigClockSource>
 80a8654:	4603      	mov	r3, r0
 80a8656:	2b00      	cmp	r3, #0
 80a8658:	d001      	beq.n	80a865e <MX_TIM2_Init+0x9a>
    Error_Handler();
 80a865a:	f001 fa5d 	bl	80a9b18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 80a865e:	4829      	ldr	r0, [pc, #164]	; (80a8704 <MX_TIM2_Init+0x140>)
 80a8660:	f00b fd5a 	bl	80b4118 <HAL_TIM_PWM_Init>
 80a8664:	4603      	mov	r3, r0
 80a8666:	2b00      	cmp	r3, #0
 80a8668:	d001      	beq.n	80a866e <MX_TIM2_Init+0xaa>
    Error_Handler();
 80a866a:	f001 fa55 	bl	80a9b18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80a866e:	2300      	movs	r3, #0
 80a8670:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80a8672:	2300      	movs	r3, #0
 80a8674:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 80a8676:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80a867a:	4619      	mov	r1, r3
 80a867c:	4821      	ldr	r0, [pc, #132]	; (80a8704 <MX_TIM2_Init+0x140>)
 80a867e:	f00c fb99 	bl	80b4db4 <HAL_TIMEx_MasterConfigSynchronization>
 80a8682:	4603      	mov	r3, r0
 80a8684:	2b00      	cmp	r3, #0
 80a8686:	d001      	beq.n	80a868c <MX_TIM2_Init+0xc8>
    Error_Handler();
 80a8688:	f001 fa46 	bl	80a9b18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80a868c:	2370      	movs	r3, #112	; 0x70
 80a868e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 6000;
 80a8690:	f241 7370 	movw	r3, #6000	; 0x1770
 80a8694:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80a8696:	2300      	movs	r3, #0
 80a8698:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80a869a:	2300      	movs	r3, #0
 80a869c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80a869e:	2300      	movs	r3, #0
 80a86a0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80a86a2:	2300      	movs	r3, #0
 80a86a4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80a86a6:	2300      	movs	r3, #0
 80a86a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 80a86aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80a86ae:	2200      	movs	r2, #0
 80a86b0:	4619      	mov	r1, r3
 80a86b2:	4814      	ldr	r0, [pc, #80]	; (80a8704 <MX_TIM2_Init+0x140>)
 80a86b4:	f00b feea 	bl	80b448c <HAL_TIM_PWM_ConfigChannel>
 80a86b8:	4603      	mov	r3, r0
 80a86ba:	2b00      	cmp	r3, #0
 80a86bc:	d001      	beq.n	80a86c2 <MX_TIM2_Init+0xfe>
    Error_Handler();
 80a86be:	f001 fa2b 	bl	80a9b18 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80a86c2:	2300      	movs	r3, #0
 80a86c4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80a86c6:	2300      	movs	r3, #0
 80a86c8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80a86ca:	2300      	movs	r3, #0
 80a86cc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80a86ce:	2300      	movs	r3, #0
 80a86d0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80a86d2:	2300      	movs	r3, #0
 80a86d4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80a86d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80a86da:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80a86dc:	2300      	movs	r3, #0
 80a86de:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim2, &sBreakDeadTimeConfig) != HAL_OK) {
 80a86e0:	1d3b      	adds	r3, r7, #4
 80a86e2:	4619      	mov	r1, r3
 80a86e4:	4807      	ldr	r0, [pc, #28]	; (80a8704 <MX_TIM2_Init+0x140>)
 80a86e6:	f00c fbe1 	bl	80b4eac <HAL_TIMEx_ConfigBreakDeadTime>
 80a86ea:	4603      	mov	r3, r0
 80a86ec:	2b00      	cmp	r3, #0
 80a86ee:	d001      	beq.n	80a86f4 <MX_TIM2_Init+0x130>
    Error_Handler();
 80a86f0:	f001 fa12 	bl	80a9b18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80a86f4:	4803      	ldr	r0, [pc, #12]	; (80a8704 <MX_TIM2_Init+0x140>)
 80a86f6:	f005 fb91 	bl	80ade1c <HAL_TIM_MspPostInit>

}
 80a86fa:	bf00      	nop
 80a86fc:	3758      	adds	r7, #88	; 0x58
 80a86fe:	46bd      	mov	sp, r7
 80a8700:	bd80      	pop	{r7, pc}
 80a8702:	bf00      	nop
 80a8704:	2001c20c 	.word	0x2001c20c

080a8708 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80a8708:	b580      	push	{r7, lr}
 80a870a:	b08e      	sub	sp, #56	; 0x38
 80a870c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80a870e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80a8712:	2200      	movs	r2, #0
 80a8714:	601a      	str	r2, [r3, #0]
 80a8716:	605a      	str	r2, [r3, #4]
 80a8718:	609a      	str	r2, [r3, #8]
 80a871a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80a871c:	f107 0320 	add.w	r3, r7, #32
 80a8720:	2200      	movs	r2, #0
 80a8722:	601a      	str	r2, [r3, #0]
 80a8724:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = { 0 };
 80a8726:	1d3b      	adds	r3, r7, #4
 80a8728:	2200      	movs	r2, #0
 80a872a:	601a      	str	r2, [r3, #0]
 80a872c:	605a      	str	r2, [r3, #4]
 80a872e:	609a      	str	r2, [r3, #8]
 80a8730:	60da      	str	r2, [r3, #12]
 80a8732:	611a      	str	r2, [r3, #16]
 80a8734:	615a      	str	r2, [r3, #20]
 80a8736:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80a8738:	4b2c      	ldr	r3, [pc, #176]	; (80a87ec <MX_TIM3_Init+0xe4>)
 80a873a:	4a2d      	ldr	r2, [pc, #180]	; (80a87f0 <MX_TIM3_Init+0xe8>)
 80a873c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 319;
 80a873e:	4b2b      	ldr	r3, [pc, #172]	; (80a87ec <MX_TIM3_Init+0xe4>)
 80a8740:	f240 123f 	movw	r2, #319	; 0x13f
 80a8744:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80a8746:	4b29      	ldr	r3, [pc, #164]	; (80a87ec <MX_TIM3_Init+0xe4>)
 80a8748:	2200      	movs	r2, #0
 80a874a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000;
 80a874c:	4b27      	ldr	r3, [pc, #156]	; (80a87ec <MX_TIM3_Init+0xe4>)
 80a874e:	f24c 3250 	movw	r2, #50000	; 0xc350
 80a8752:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80a8754:	4b25      	ldr	r3, [pc, #148]	; (80a87ec <MX_TIM3_Init+0xe4>)
 80a8756:	f44f 7280 	mov.w	r2, #256	; 0x100
 80a875a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80a875c:	4b23      	ldr	r3, [pc, #140]	; (80a87ec <MX_TIM3_Init+0xe4>)
 80a875e:	2280      	movs	r2, #128	; 0x80
 80a8760:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 80a8762:	4822      	ldr	r0, [pc, #136]	; (80a87ec <MX_TIM3_Init+0xe4>)
 80a8764:	f00b fb90 	bl	80b3e88 <HAL_TIM_Base_Init>
 80a8768:	4603      	mov	r3, r0
 80a876a:	2b00      	cmp	r3, #0
 80a876c:	d001      	beq.n	80a8772 <MX_TIM3_Init+0x6a>
    Error_Handler();
 80a876e:	f001 f9d3 	bl	80a9b18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80a8772:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80a8776:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80a8778:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80a877c:	4619      	mov	r1, r3
 80a877e:	481b      	ldr	r0, [pc, #108]	; (80a87ec <MX_TIM3_Init+0xe4>)
 80a8780:	f00b ff42 	bl	80b4608 <HAL_TIM_ConfigClockSource>
 80a8784:	4603      	mov	r3, r0
 80a8786:	2b00      	cmp	r3, #0
 80a8788:	d001      	beq.n	80a878e <MX_TIM3_Init+0x86>
    Error_Handler();
 80a878a:	f001 f9c5 	bl	80a9b18 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK) {
 80a878e:	4817      	ldr	r0, [pc, #92]	; (80a87ec <MX_TIM3_Init+0xe4>)
 80a8790:	f00b fc69 	bl	80b4066 <HAL_TIM_OC_Init>
 80a8794:	4603      	mov	r3, r0
 80a8796:	2b00      	cmp	r3, #0
 80a8798:	d001      	beq.n	80a879e <MX_TIM3_Init+0x96>
    Error_Handler();
 80a879a:	f001 f9bd 	bl	80a9b18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80a879e:	2300      	movs	r3, #0
 80a87a0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80a87a2:	2300      	movs	r3, #0
 80a87a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 80a87a6:	f107 0320 	add.w	r3, r7, #32
 80a87aa:	4619      	mov	r1, r3
 80a87ac:	480f      	ldr	r0, [pc, #60]	; (80a87ec <MX_TIM3_Init+0xe4>)
 80a87ae:	f00c fb01 	bl	80b4db4 <HAL_TIMEx_MasterConfigSynchronization>
 80a87b2:	4603      	mov	r3, r0
 80a87b4:	2b00      	cmp	r3, #0
 80a87b6:	d001      	beq.n	80a87bc <MX_TIM3_Init+0xb4>
    Error_Handler();
 80a87b8:	f001 f9ae 	bl	80a9b18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80a87bc:	2300      	movs	r3, #0
 80a87be:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80a87c0:	2300      	movs	r3, #0
 80a87c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80a87c4:	2300      	movs	r3, #0
 80a87c6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80a87c8:	2300      	movs	r3, #0
 80a87ca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 80a87cc:	1d3b      	adds	r3, r7, #4
 80a87ce:	2200      	movs	r2, #0
 80a87d0:	4619      	mov	r1, r3
 80a87d2:	4806      	ldr	r0, [pc, #24]	; (80a87ec <MX_TIM3_Init+0xe4>)
 80a87d4:	f00b fe02 	bl	80b43dc <HAL_TIM_OC_ConfigChannel>
 80a87d8:	4603      	mov	r3, r0
 80a87da:	2b00      	cmp	r3, #0
 80a87dc:	d001      	beq.n	80a87e2 <MX_TIM3_Init+0xda>
    Error_Handler();
 80a87de:	f001 f99b 	bl	80a9b18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80a87e2:	bf00      	nop
 80a87e4:	3738      	adds	r7, #56	; 0x38
 80a87e6:	46bd      	mov	sp, r7
 80a87e8:	bd80      	pop	{r7, pc}
 80a87ea:	bf00      	nop
 80a87ec:	2001bed0 	.word	0x2001bed0
 80a87f0:	40000400 	.word	0x40000400

080a87f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80a87f4:	b580      	push	{r7, lr}
 80a87f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80a87f8:	4b13      	ldr	r3, [pc, #76]	; (80a8848 <MX_USART2_UART_Init+0x54>)
 80a87fa:	4a14      	ldr	r2, [pc, #80]	; (80a884c <MX_USART2_UART_Init+0x58>)
 80a87fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80a87fe:	4b12      	ldr	r3, [pc, #72]	; (80a8848 <MX_USART2_UART_Init+0x54>)
 80a8800:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80a8804:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80a8806:	4b10      	ldr	r3, [pc, #64]	; (80a8848 <MX_USART2_UART_Init+0x54>)
 80a8808:	2200      	movs	r2, #0
 80a880a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80a880c:	4b0e      	ldr	r3, [pc, #56]	; (80a8848 <MX_USART2_UART_Init+0x54>)
 80a880e:	2200      	movs	r2, #0
 80a8810:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80a8812:	4b0d      	ldr	r3, [pc, #52]	; (80a8848 <MX_USART2_UART_Init+0x54>)
 80a8814:	2200      	movs	r2, #0
 80a8816:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80a8818:	4b0b      	ldr	r3, [pc, #44]	; (80a8848 <MX_USART2_UART_Init+0x54>)
 80a881a:	220c      	movs	r2, #12
 80a881c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80a881e:	4b0a      	ldr	r3, [pc, #40]	; (80a8848 <MX_USART2_UART_Init+0x54>)
 80a8820:	2200      	movs	r2, #0
 80a8822:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80a8824:	4b08      	ldr	r3, [pc, #32]	; (80a8848 <MX_USART2_UART_Init+0x54>)
 80a8826:	2200      	movs	r2, #0
 80a8828:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK) {
 80a882a:	4807      	ldr	r0, [pc, #28]	; (80a8848 <MX_USART2_UART_Init+0x54>)
 80a882c:	f00c fba4 	bl	80b4f78 <HAL_UART_Init>
 80a8830:	4603      	mov	r3, r0
 80a8832:	2b00      	cmp	r3, #0
 80a8834:	d001      	beq.n	80a883a <MX_USART2_UART_Init+0x46>
    Error_Handler();
 80a8836:	f001 f96f 	bl	80a9b18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  HAL_UART_Receive_DMA(&huart2, uart_msg_code, UART_RX_CODE_LENGTH);
 80a883a:	2204      	movs	r2, #4
 80a883c:	4904      	ldr	r1, [pc, #16]	; (80a8850 <MX_USART2_UART_Init+0x5c>)
 80a883e:	4802      	ldr	r0, [pc, #8]	; (80a8848 <MX_USART2_UART_Init+0x54>)
 80a8840:	f00c fc79 	bl	80b5136 <HAL_UART_Receive_DMA>

  /* USER CODE END USART2_Init 2 */

}
 80a8844:	bf00      	nop
 80a8846:	bd80      	pop	{r7, pc}
 80a8848:	2001c254 	.word	0x2001c254
 80a884c:	40004400 	.word	0x40004400
 80a8850:	20008094 	.word	0x20008094

080a8854 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80a8854:	b580      	push	{r7, lr}
 80a8856:	b082      	sub	sp, #8
 80a8858:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80a885a:	2300      	movs	r3, #0
 80a885c:	607b      	str	r3, [r7, #4]
 80a885e:	4b10      	ldr	r3, [pc, #64]	; (80a88a0 <MX_DMA_Init+0x4c>)
 80a8860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a8862:	4a0f      	ldr	r2, [pc, #60]	; (80a88a0 <MX_DMA_Init+0x4c>)
 80a8864:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80a8868:	6313      	str	r3, [r2, #48]	; 0x30
 80a886a:	4b0d      	ldr	r3, [pc, #52]	; (80a88a0 <MX_DMA_Init+0x4c>)
 80a886c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a886e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80a8872:	607b      	str	r3, [r7, #4]
 80a8874:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80a8876:	2200      	movs	r2, #0
 80a8878:	2105      	movs	r1, #5
 80a887a:	2010      	movs	r0, #16
 80a887c:	f007 fe3e 	bl	80b04fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80a8880:	2010      	movs	r0, #16
 80a8882:	f007 fe57 	bl	80b0534 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80a8886:	2200      	movs	r2, #0
 80a8888:	2105      	movs	r1, #5
 80a888a:	2011      	movs	r0, #17
 80a888c:	f007 fe36 	bl	80b04fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80a8890:	2011      	movs	r0, #17
 80a8892:	f007 fe4f 	bl	80b0534 <HAL_NVIC_EnableIRQ>

}
 80a8896:	bf00      	nop
 80a8898:	3708      	adds	r7, #8
 80a889a:	46bd      	mov	sp, r7
 80a889c:	bd80      	pop	{r7, pc}
 80a889e:	bf00      	nop
 80a88a0:	40023800 	.word	0x40023800

080a88a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80a88a4:	b580      	push	{r7, lr}
 80a88a6:	b08a      	sub	sp, #40	; 0x28
 80a88a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80a88aa:	f107 0314 	add.w	r3, r7, #20
 80a88ae:	2200      	movs	r2, #0
 80a88b0:	601a      	str	r2, [r3, #0]
 80a88b2:	605a      	str	r2, [r3, #4]
 80a88b4:	609a      	str	r2, [r3, #8]
 80a88b6:	60da      	str	r2, [r3, #12]
 80a88b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80a88ba:	2300      	movs	r3, #0
 80a88bc:	613b      	str	r3, [r7, #16]
 80a88be:	4b52      	ldr	r3, [pc, #328]	; (80a8a08 <MX_GPIO_Init+0x164>)
 80a88c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a88c2:	4a51      	ldr	r2, [pc, #324]	; (80a8a08 <MX_GPIO_Init+0x164>)
 80a88c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80a88c8:	6313      	str	r3, [r2, #48]	; 0x30
 80a88ca:	4b4f      	ldr	r3, [pc, #316]	; (80a8a08 <MX_GPIO_Init+0x164>)
 80a88cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a88ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80a88d2:	613b      	str	r3, [r7, #16]
 80a88d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80a88d6:	2300      	movs	r3, #0
 80a88d8:	60fb      	str	r3, [r7, #12]
 80a88da:	4b4b      	ldr	r3, [pc, #300]	; (80a8a08 <MX_GPIO_Init+0x164>)
 80a88dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a88de:	4a4a      	ldr	r2, [pc, #296]	; (80a8a08 <MX_GPIO_Init+0x164>)
 80a88e0:	f043 0304 	orr.w	r3, r3, #4
 80a88e4:	6313      	str	r3, [r2, #48]	; 0x30
 80a88e6:	4b48      	ldr	r3, [pc, #288]	; (80a8a08 <MX_GPIO_Init+0x164>)
 80a88e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a88ea:	f003 0304 	and.w	r3, r3, #4
 80a88ee:	60fb      	str	r3, [r7, #12]
 80a88f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80a88f2:	2300      	movs	r3, #0
 80a88f4:	60bb      	str	r3, [r7, #8]
 80a88f6:	4b44      	ldr	r3, [pc, #272]	; (80a8a08 <MX_GPIO_Init+0x164>)
 80a88f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a88fa:	4a43      	ldr	r2, [pc, #268]	; (80a8a08 <MX_GPIO_Init+0x164>)
 80a88fc:	f043 0301 	orr.w	r3, r3, #1
 80a8900:	6313      	str	r3, [r2, #48]	; 0x30
 80a8902:	4b41      	ldr	r3, [pc, #260]	; (80a8a08 <MX_GPIO_Init+0x164>)
 80a8904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a8906:	f003 0301 	and.w	r3, r3, #1
 80a890a:	60bb      	str	r3, [r7, #8]
 80a890c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80a890e:	2300      	movs	r3, #0
 80a8910:	607b      	str	r3, [r7, #4]
 80a8912:	4b3d      	ldr	r3, [pc, #244]	; (80a8a08 <MX_GPIO_Init+0x164>)
 80a8914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a8916:	4a3c      	ldr	r2, [pc, #240]	; (80a8a08 <MX_GPIO_Init+0x164>)
 80a8918:	f043 0302 	orr.w	r3, r3, #2
 80a891c:	6313      	str	r3, [r2, #48]	; 0x30
 80a891e:	4b3a      	ldr	r3, [pc, #232]	; (80a8a08 <MX_GPIO_Init+0x164>)
 80a8920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a8922:	f003 0302 	and.w	r3, r3, #2
 80a8926:	607b      	str	r3, [r7, #4]
 80a8928:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : REAR_PROG0_PIN_Pin HEAD_PROG0_PIN_Pin HEAD_AND_REAR_ULTRALSONIC_RESET_N_PIN_Pin GUANGLIU_EN_Pin
     TOF_EN_Pin IMU_INT_Pin TOF_GPIO2_Pin */
  GPIO_InitStruct.Pin =
 80a892a:	f240 63b7 	movw	r3, #1719	; 0x6b7
 80a892e:	617b      	str	r3, [r7, #20]
      REAR_PROG0_PIN_Pin | HEAD_PROG0_PIN_Pin |
      HEAD_AND_REAR_ULTRALSONIC_RESET_N_PIN_Pin | GUANGLIU_EN_Pin | TOF_EN_Pin |
      IMU_INT_Pin | TOF_GPIO2_Pin | GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80a8930:	2301      	movs	r3, #1
 80a8932:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80a8934:	2300      	movs	r3, #0
 80a8936:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80a8938:	2300      	movs	r3, #0
 80a893a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80a893c:	f107 0314 	add.w	r3, r7, #20
 80a8940:	4619      	mov	r1, r3
 80a8942:	4832      	ldr	r0, [pc, #200]	; (80a8a0c <MX_GPIO_Init+0x168>)
 80a8944:	f008 fcec 	bl	80b1320 <HAL_GPIO_Init>

  /*Configure GPIO pin : HEAD_AND_REAR_ULTRASONIC_INT_Pin */
  GPIO_InitStruct.Pin = HEAD_AND_REAR_ULTRASONIC_INT_Pin;
 80a8948:	2308      	movs	r3, #8
 80a894a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80a894c:	4b30      	ldr	r3, [pc, #192]	; (80a8a10 <MX_GPIO_Init+0x16c>)
 80a894e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80a8950:	2300      	movs	r3, #0
 80a8952:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(HEAD_AND_REAR_ULTRASONIC_INT_GPIO_Port, &GPIO_InitStruct);
 80a8954:	f107 0314 	add.w	r3, r7, #20
 80a8958:	4619      	mov	r1, r3
 80a895a:	482c      	ldr	r0, [pc, #176]	; (80a8a0c <MX_GPIO_Init+0x168>)
 80a895c:	f008 fce0 	bl	80b1320 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOF_CS_Pin */
  GPIO_InitStruct.Pin = TOF_CS_Pin;
 80a8960:	2310      	movs	r3, #16
 80a8962:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80a8964:	2301      	movs	r3, #1
 80a8966:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80a8968:	2300      	movs	r3, #0
 80a896a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80a896c:	2300      	movs	r3, #0
 80a896e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOF_CS_GPIO_Port, &GPIO_InitStruct);
 80a8970:	f107 0314 	add.w	r3, r7, #20
 80a8974:	4619      	mov	r1, r3
 80a8976:	4827      	ldr	r0, [pc, #156]	; (80a8a14 <MX_GPIO_Init+0x170>)
 80a8978:	f008 fcd2 	bl	80b1320 <HAL_GPIO_Init>

  /*Configure GPIO pin : HEAD_AND_REAR_LED_DRIVER_EN_Pin */
  GPIO_InitStruct.Pin = HEAD_AND_REAR_LED_DRIVER_EN_Pin;
 80a897c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80a8980:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80a8982:	2301      	movs	r3, #1
 80a8984:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80a8986:	2300      	movs	r3, #0
 80a8988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80a898a:	2300      	movs	r3, #0
 80a898c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(HEAD_AND_REAR_LED_DRIVER_EN_GPIO_Port, &GPIO_InitStruct);
 80a898e:	f107 0314 	add.w	r3, r7, #20
 80a8992:	4619      	mov	r1, r3
 80a8994:	4820      	ldr	r0, [pc, #128]	; (80a8a18 <MX_GPIO_Init+0x174>)
 80a8996:	f008 fcc3 	bl	80b1320 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOF_GPIO1_Pin */
  GPIO_InitStruct.Pin = TOF_GPIO1_Pin;
 80a899a:	2340      	movs	r3, #64	; 0x40
 80a899c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80a899e:	2300      	movs	r3, #0
 80a89a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80a89a2:	2300      	movs	r3, #0
 80a89a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOF_GPIO1_GPIO_Port, &GPIO_InitStruct);
 80a89a6:	f107 0314 	add.w	r3, r7, #20
 80a89aa:	4619      	mov	r1, r3
 80a89ac:	4817      	ldr	r0, [pc, #92]	; (80a8a0c <MX_GPIO_Init+0x168>)
 80a89ae:	f008 fcb7 	bl	80b1320 <HAL_GPIO_Init>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC,
 80a89b2:	2200      	movs	r2, #0
 80a89b4:	f240 21b7 	movw	r1, #695	; 0x2b7
 80a89b8:	4814      	ldr	r0, [pc, #80]	; (80a8a0c <MX_GPIO_Init+0x168>)
 80a89ba:	f008 fe65 	bl	80b1688 <HAL_GPIO_WritePin>
                    REAR_PROG0_PIN_Pin | HEAD_PROG0_PIN_Pin |
                    HEAD_AND_REAR_ULTRALSONIC_RESET_N_PIN_Pin | GUANGLIU_EN_Pin
                    | TOF_EN_Pin | IMU_INT_Pin | TOF_GPIO2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOF_CS_GPIO_Port, TOF_CS_Pin, GPIO_PIN_RESET);
 80a89be:	2200      	movs	r2, #0
 80a89c0:	2110      	movs	r1, #16
 80a89c2:	4814      	ldr	r0, [pc, #80]	; (80a8a14 <MX_GPIO_Init+0x170>)
 80a89c4:	f008 fe60 	bl	80b1688 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HEAD_AND_REAR_LED_DRIVER_EN_GPIO_Port,
 80a89c8:	2200      	movs	r2, #0
 80a89ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80a89ce:	4812      	ldr	r0, [pc, #72]	; (80a8a18 <MX_GPIO_Init+0x174>)
 80a89d0:	f008 fe5a 	bl	80b1688 <HAL_GPIO_WritePin>
                    HEAD_AND_REAR_LED_DRIVER_EN_Pin, GPIO_PIN_RESET);

  /*ultralsound intterupt level shift enable */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 80a89d4:	2201      	movs	r2, #1
 80a89d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80a89da:	480c      	ldr	r0, [pc, #48]	; (80a8a0c <MX_GPIO_Init+0x168>)
 80a89dc:	f008 fe54 	bl	80b1688 <HAL_GPIO_WritePin>

  /* EXTI interrupt init */
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 80a89e0:	2200      	movs	r2, #0
 80a89e2:	2105      	movs	r1, #5
 80a89e4:	2009      	movs	r0, #9
 80a89e6:	f007 fd89 	bl	80b04fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80a89ea:	2009      	movs	r0, #9
 80a89ec:	f007 fda2 	bl	80b0534 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80a89f0:	2200      	movs	r2, #0
 80a89f2:	2105      	movs	r1, #5
 80a89f4:	2017      	movs	r0, #23
 80a89f6:	f007 fd81 	bl	80b04fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80a89fa:	2017      	movs	r0, #23
 80a89fc:	f007 fd9a 	bl	80b0534 <HAL_NVIC_EnableIRQ>
}
 80a8a00:	bf00      	nop
 80a8a02:	3728      	adds	r7, #40	; 0x28
 80a8a04:	46bd      	mov	sp, r7
 80a8a06:	bd80      	pop	{r7, pc}
 80a8a08:	40023800 	.word	0x40023800
 80a8a0c:	40020800 	.word	0x40020800
 80a8a10:	10110000 	.word	0x10110000
 80a8a14:	40020000 	.word	0x40020000
 80a8a18:	40020400 	.word	0x40020400

080a8a1c <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 80a8a1c:	b580      	push	{r7, lr}
 80a8a1e:	b082      	sub	sp, #8
 80a8a20:	af00      	add	r7, sp, #0
 80a8a22:	6078      	str	r0, [r7, #4]
  if (uart_log_print_enable)
 80a8a24:	4b07      	ldr	r3, [pc, #28]	; (80a8a44 <__io_putchar+0x28>)
 80a8a26:	781b      	ldrb	r3, [r3, #0]
 80a8a28:	2b00      	cmp	r3, #0
 80a8a2a:	d006      	beq.n	80a8a3a <__io_putchar+0x1e>
    HAL_UART_Transmit(&huart2, (uint8_t *) & ch, 1, 0xFFFF);
 80a8a2c:	1d39      	adds	r1, r7, #4
 80a8a2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80a8a32:	2201      	movs	r2, #1
 80a8a34:	4804      	ldr	r0, [pc, #16]	; (80a8a48 <__io_putchar+0x2c>)
 80a8a36:	f00c faec 	bl	80b5012 <HAL_UART_Transmit>
  //HAL_UART_Transmit_DMA(&huart2, (uint8_t*) &ch, 1);
  return ch;
 80a8a3a:	687b      	ldr	r3, [r7, #4]
}
 80a8a3c:	4618      	mov	r0, r3
 80a8a3e:	3708      	adds	r7, #8
 80a8a40:	46bd      	mov	sp, r7
 80a8a42:	bd80      	pop	{r7, pc}
 80a8a44:	2000788c 	.word	0x2000788c
 80a8a48:	2001c254 	.word	0x2001c254

080a8a4c <Get_BoardID>:

void Get_BoardID()
{
 80a8a4c:	b598      	push	{r3, r4, r7, lr}
 80a8a4e:	af00      	add	r7, sp, #0
  boardID =
      (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) << 1) | HAL_GPIO_ReadPin(GPIOB,
 80a8a50:	2101      	movs	r1, #1
 80a8a52:	4809      	ldr	r0, [pc, #36]	; (80a8a78 <Get_BoardID+0x2c>)
 80a8a54:	f008 fe00 	bl	80b1658 <HAL_GPIO_ReadPin>
 80a8a58:	4603      	mov	r3, r0
 80a8a5a:	005b      	lsls	r3, r3, #1
 80a8a5c:	b25c      	sxtb	r4, r3
 80a8a5e:	2102      	movs	r1, #2
 80a8a60:	4805      	ldr	r0, [pc, #20]	; (80a8a78 <Get_BoardID+0x2c>)
 80a8a62:	f008 fdf9 	bl	80b1658 <HAL_GPIO_ReadPin>
 80a8a66:	4603      	mov	r3, r0
 80a8a68:	b25b      	sxtb	r3, r3
 80a8a6a:	4323      	orrs	r3, r4
 80a8a6c:	b25b      	sxtb	r3, r3
 80a8a6e:	b2da      	uxtb	r2, r3
  boardID =
 80a8a70:	4b02      	ldr	r3, [pc, #8]	; (80a8a7c <Get_BoardID+0x30>)
 80a8a72:	701a      	strb	r2, [r3, #0]
                                                                    GPIO_PIN_1);
}
 80a8a74:	bf00      	nop
 80a8a76:	bd98      	pop	{r3, r4, r7, pc}
 80a8a78:	40020400 	.word	0x40020400
 80a8a7c:	20007886 	.word	0x20007886

080a8a80 <HAL_CAN_RxFifo0MsgPendingCallback>:

// can related callback function when enable interrupt mode
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef * hcan)
{
 80a8a80:	b580      	push	{r7, lr}
 80a8a82:	b08e      	sub	sp, #56	; 0x38
 80a8a84:	af00      	add	r7, sp, #0
 80a8a86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef HAL_RetStaus;
  can_message_event_t can_event_t;
  osStatus_t res;

  if (hcan == &hcan1) {
 80a8a88:	687b      	ldr	r3, [r7, #4]
 80a8a8a:	4a1e      	ldr	r2, [pc, #120]	; (80a8b04 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 80a8a8c:	4293      	cmp	r3, r2
 80a8a8e:	d118      	bne.n	80a8ac2 <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
    HAL_RetStaus = HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0,
 80a8a90:	f107 030c 	add.w	r3, r7, #12
 80a8a94:	331c      	adds	r3, #28
 80a8a96:	f107 020c 	add.w	r2, r7, #12
 80a8a9a:	2100      	movs	r1, #0
 80a8a9c:	6878      	ldr	r0, [r7, #4]
 80a8a9e:	f007 f8f4 	bl	80afc8a <HAL_CAN_GetRxMessage>
 80a8aa2:	4603      	mov	r3, r0
 80a8aa4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                                        &can_event_t.CanHeader.RxHeader,
                                        can_event_t.CanData.RxData);
    if (HAL_OK == HAL_RetStaus) {
 80a8aa8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80a8aac:	2b00      	cmp	r3, #0
 80a8aae:	d108      	bne.n	80a8ac2 <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
      res = osMessageQueuePut(Can1ReceiveQHandle, &can_event_t, 0, 0);
 80a8ab0:	4b15      	ldr	r3, [pc, #84]	; (80a8b08 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 80a8ab2:	6818      	ldr	r0, [r3, #0]
 80a8ab4:	f107 010c 	add.w	r1, r7, #12
 80a8ab8:	2300      	movs	r3, #0
 80a8aba:	2200      	movs	r2, #0
 80a8abc:	f00d fca2 	bl	80b6404 <osMessageQueuePut>
 80a8ac0:	6338      	str	r0, [r7, #48]	; 0x30
    } else {

    }
  }

  if (hcan == &hcan2) {
 80a8ac2:	687b      	ldr	r3, [r7, #4]
 80a8ac4:	4a11      	ldr	r2, [pc, #68]	; (80a8b0c <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 80a8ac6:	4293      	cmp	r3, r2
 80a8ac8:	d118      	bne.n	80a8afc <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>
    HAL_RetStaus = HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0,
 80a8aca:	f107 030c 	add.w	r3, r7, #12
 80a8ace:	331c      	adds	r3, #28
 80a8ad0:	f107 020c 	add.w	r2, r7, #12
 80a8ad4:	2100      	movs	r1, #0
 80a8ad6:	6878      	ldr	r0, [r7, #4]
 80a8ad8:	f007 f8d7 	bl	80afc8a <HAL_CAN_GetRxMessage>
 80a8adc:	4603      	mov	r3, r0
 80a8ade:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                                        &can_event_t.CanHeader.RxHeader,
                                        can_event_t.CanData.RxData);
    if (HAL_OK == HAL_RetStaus) {
 80a8ae2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80a8ae6:	2b00      	cmp	r3, #0
 80a8ae8:	d108      	bne.n	80a8afc <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>
#if USE_P1
      res = osMessageQueuePut(Can2ReceiveQHandle, &can_event_t, 0, 0);
 80a8aea:	4b09      	ldr	r3, [pc, #36]	; (80a8b10 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 80a8aec:	6818      	ldr	r0, [r3, #0]
 80a8aee:	f107 010c 	add.w	r1, r7, #12
 80a8af2:	2300      	movs	r3, #0
 80a8af4:	2200      	movs	r2, #0
 80a8af6:	f00d fc85 	bl	80b6404 <osMessageQueuePut>
 80a8afa:	6338      	str	r0, [r7, #48]	; 0x30
      //CAN2 frame was successfully received.
    } else {

    }
  }
}
 80a8afc:	bf00      	nop
 80a8afe:	3738      	adds	r7, #56	; 0x38
 80a8b00:	46bd      	mov	sp, r7
 80a8b02:	bd80      	pop	{r7, pc}
 80a8b04:	2001c29c 	.word	0x2001c29c
 80a8b08:	2001be6c 	.word	0x2001be6c
 80a8b0c:	2001bf48 	.word	0x2001bf48
 80a8b10:	2001c298 	.word	0x2001c298

080a8b14 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80a8b14:	b580      	push	{r7, lr}
 80a8b16:	b082      	sub	sp, #8
 80a8b18:	af00      	add	r7, sp, #0
 80a8b1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  if (hcan == &hcan1) {
 80a8b1c:	687b      	ldr	r3, [r7, #4]
 80a8b1e:	4a0b      	ldr	r2, [pc, #44]	; (80a8b4c <HAL_CAN_ErrorCallback+0x38>)
 80a8b20:	4293      	cmp	r3, r2
 80a8b22:	d105      	bne.n	80a8b30 <HAL_CAN_ErrorCallback+0x1c>
    printf("can1 errorcode: 0x%x \r\n", hcan->ErrorCode);
 80a8b24:	687b      	ldr	r3, [r7, #4]
 80a8b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a8b28:	4619      	mov	r1, r3
 80a8b2a:	4809      	ldr	r0, [pc, #36]	; (80a8b50 <HAL_CAN_ErrorCallback+0x3c>)
 80a8b2c:	f017 ff22 	bl	80c0974 <iprintf>
  }

  if (hcan == &hcan2) {
 80a8b30:	687b      	ldr	r3, [r7, #4]
 80a8b32:	4a08      	ldr	r2, [pc, #32]	; (80a8b54 <HAL_CAN_ErrorCallback+0x40>)
 80a8b34:	4293      	cmp	r3, r2
 80a8b36:	d105      	bne.n	80a8b44 <HAL_CAN_ErrorCallback+0x30>
    printf("can2 errorcode: 0x%x \r\n", hcan->ErrorCode);
 80a8b38:	687b      	ldr	r3, [r7, #4]
 80a8b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a8b3c:	4619      	mov	r1, r3
 80a8b3e:	4806      	ldr	r0, [pc, #24]	; (80a8b58 <HAL_CAN_ErrorCallback+0x44>)
 80a8b40:	f017 ff18 	bl	80c0974 <iprintf>
  }
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80a8b44:	bf00      	nop
 80a8b46:	3708      	adds	r7, #8
 80a8b48:	46bd      	mov	sp, r7
 80a8b4a:	bd80      	pop	{r7, pc}
 80a8b4c:	2001c29c 	.word	0x2001c29c
 80a8b50:	080c5a88 	.word	0x080c5a88
 80a8b54:	2001bf48 	.word	0x2001bf48
 80a8b58:	080c5aa0 	.word	0x080c5aa0

080a8b5c <HAL_UART_RxCpltCallback>:

// uart related callback function when enable interrupt mode
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart)
{
 80a8b5c:	b580      	push	{r7, lr}
 80a8b5e:	b084      	sub	sp, #16
 80a8b60:	af00      	add	r7, sp, #0
 80a8b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef HAL_RetStaus;
  osStatus_t res;

  if (huart == &huart2) {
 80a8b64:	687b      	ldr	r3, [r7, #4]
 80a8b66:	4a0b      	ldr	r2, [pc, #44]	; (80a8b94 <HAL_UART_RxCpltCallback+0x38>)
 80a8b68:	4293      	cmp	r3, r2
 80a8b6a:	d10e      	bne.n	80a8b8a <HAL_UART_RxCpltCallback+0x2e>
    res = osMessageQueuePut(Uart2MsgQHandle, uart_msg_code, 0, 0);
 80a8b6c:	4b0a      	ldr	r3, [pc, #40]	; (80a8b98 <HAL_UART_RxCpltCallback+0x3c>)
 80a8b6e:	6818      	ldr	r0, [r3, #0]
 80a8b70:	2300      	movs	r3, #0
 80a8b72:	2200      	movs	r2, #0
 80a8b74:	4909      	ldr	r1, [pc, #36]	; (80a8b9c <HAL_UART_RxCpltCallback+0x40>)
 80a8b76:	f00d fc45 	bl	80b6404 <osMessageQueuePut>
 80a8b7a:	60f8      	str	r0, [r7, #12]
    if (res != osOK) {
 80a8b7c:	68fb      	ldr	r3, [r7, #12]
 80a8b7e:	2b00      	cmp	r3, #0
 80a8b80:	d003      	beq.n	80a8b8a <HAL_UART_RxCpltCallback+0x2e>
      printf("res:%d", res);
 80a8b82:	68f9      	ldr	r1, [r7, #12]
 80a8b84:	4806      	ldr	r0, [pc, #24]	; (80a8ba0 <HAL_UART_RxCpltCallback+0x44>)
 80a8b86:	f017 fef5 	bl	80c0974 <iprintf>
    }

  }
}
 80a8b8a:	bf00      	nop
 80a8b8c:	3710      	adds	r7, #16
 80a8b8e:	46bd      	mov	sp, r7
 80a8b90:	bd80      	pop	{r7, pc}
 80a8b92:	bf00      	nop
 80a8b94:	2001c254 	.word	0x2001c254
 80a8b98:	2001bf70 	.word	0x2001bf70
 80a8b9c:	20008094 	.word	0x20008094
 80a8ba0:	080c5ab8 	.word	0x080c5ab8

080a8ba4 <StartCan1BroadcastTask>:
 * @brief  Function implementing the Can1Broadcast thread.
 * @param  argument: Not used
 * @retval None
 */
void StartCan1BroadcastTask(void *argument)
{
 80a8ba4:	b580      	push	{r7, lr}
 80a8ba6:	b08e      	sub	sp, #56	; 0x38
 80a8ba8:	af00      	add	r7, sp, #0
 80a8baa:	6078      	str	r0, [r7, #4]
  can_message_event_t can_event_t;

  /* Infinite loop */
  for (;;) {
    res =
        osMessageQueueGet(Can1BroadcastQHandle, &can_event_t, 0, portMAX_DELAY);
 80a8bac:	4b16      	ldr	r3, [pc, #88]	; (80a8c08 <StartCan1BroadcastTask+0x64>)
 80a8bae:	6818      	ldr	r0, [r3, #0]
 80a8bb0:	f107 010c 	add.w	r1, r7, #12
 80a8bb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a8bb8:	2200      	movs	r2, #0
 80a8bba:	f00d fc83 	bl	80b64c4 <osMessageQueueGet>
 80a8bbe:	6378      	str	r0, [r7, #52]	; 0x34
    //printf("CAN1 BC MSG: (0x%x) \r\n",
    //         can_event_t.CanHeader.TxHeader.StdId);
    /*Configure Transmission process */
    can_event_t.CanHeader.TxHeader.RTR = CAN_RTR_DATA;
 80a8bc0:	2300      	movs	r3, #0
 80a8bc2:	61bb      	str	r3, [r7, #24]
    can_event_t.CanHeader.TxHeader.IDE = CAN_ID_STD;
 80a8bc4:	2300      	movs	r3, #0
 80a8bc6:	617b      	str	r3, [r7, #20]
    can_event_t.CanHeader.TxHeader.DLC = 8;
 80a8bc8:	2308      	movs	r3, #8
 80a8bca:	61fb      	str	r3, [r7, #28]
    can_event_t.CanHeader.TxHeader.TransmitGlobalTime = DISABLE;
 80a8bcc:	2300      	movs	r3, #0
 80a8bce:	f887 3020 	strb.w	r3, [r7, #32]
    /* CAN send test. */
    if (HAL_CAN_AddTxMessage(&hcan1, &can_event_t.CanHeader.TxHeader,
 80a8bd2:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80a8bd6:	f107 030c 	add.w	r3, r7, #12
 80a8bda:	f103 021c 	add.w	r2, r3, #28
 80a8bde:	f107 010c 	add.w	r1, r7, #12
 80a8be2:	4603      	mov	r3, r0
 80a8be4:	4809      	ldr	r0, [pc, #36]	; (80a8c0c <StartCan1BroadcastTask+0x68>)
 80a8be6:	f006 ff75 	bl	80afad4 <HAL_CAN_AddTxMessage>
 80a8bea:	4603      	mov	r3, r0
 80a8bec:	2b00      	cmp	r3, #0
 80a8bee:	d007      	beq.n	80a8c00 <StartCan1BroadcastTask+0x5c>
                             can_event_t.CanData.TxData,
                             &TxMailbox) != HAL_OK) {
      printf("can1 errorcode: 0x%x \r\n", hcan1.ErrorCode);
 80a8bf0:	4b06      	ldr	r3, [pc, #24]	; (80a8c0c <StartCan1BroadcastTask+0x68>)
 80a8bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a8bf4:	4619      	mov	r1, r3
 80a8bf6:	4806      	ldr	r0, [pc, #24]	; (80a8c10 <StartCan1BroadcastTask+0x6c>)
 80a8bf8:	f017 febc 	bl	80c0974 <iprintf>
      /* Transmission request Error */
      Error_Handler();
 80a8bfc:	f000 ff8c 	bl	80a9b18 <Error_Handler>
    }
    osDelay(1);
 80a8c00:	2001      	movs	r0, #1
 80a8c02:	f00d fa7a 	bl	80b60fa <osDelay>
    res =
 80a8c06:	e7d1      	b.n	80a8bac <StartCan1BroadcastTask+0x8>
 80a8c08:	2001c004 	.word	0x2001c004
 80a8c0c:	2001c29c 	.word	0x2001c29c
 80a8c10:	080c5a88 	.word	0x080c5a88

080a8c14 <StartCan1ReceiveTask>:
 * @brief  Function implementing the Can1Receive thread.
 * @param  argument: Not used
 * @retval None
 */
void StartCan1ReceiveTask(void *argument)
{
 80a8c14:	b580      	push	{r7, lr}
 80a8c16:	b0a8      	sub	sp, #160	; 0xa0
 80a8c18:	af00      	add	r7, sp, #0
 80a8c1a:	6078      	str	r0, [r7, #4]
  sensor_message_event_type event_type;
  uint8_t sensor_type;
  int8_t command_code;
  for (;;) {
    //printf("waiting for can1 message \r\n");
    res = osMessageQueueGet(Can1ReceiveQHandle, &can_event_t, 0, portMAX_DELAY);
 80a8c1c:	4bc4      	ldr	r3, [pc, #784]	; (80a8f30 <StartCan1ReceiveTask+0x31c>)
 80a8c1e:	6818      	ldr	r0, [r3, #0]
 80a8c20:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80a8c24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a8c28:	2200      	movs	r2, #0
 80a8c2a:	f00d fc4b 	bl	80b64c4 <osMessageQueueGet>
 80a8c2e:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
    printf("rev can1 msg StdId: 0x%x\r\n",
 80a8c32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80a8c34:	4619      	mov	r1, r3
 80a8c36:	48bf      	ldr	r0, [pc, #764]	; (80a8f34 <StartCan1ReceiveTask+0x320>)
 80a8c38:	f017 fe9c 	bl	80c0974 <iprintf>
           can_event_t.CanHeader.RxHeader.StdId);
    event_type =
        (can_event_t.CanHeader.RxHeader.
 80a8c3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
         StdId & SENSOR_EVENT_MESSAGE_BIT_MASK) >>
 80a8c3e:	0a1b      	lsrs	r3, r3, #8
 80a8c40:	b2db      	uxtb	r3, r3
    event_type =
 80a8c42:	f003 030f 	and.w	r3, r3, #15
 80a8c46:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
        SENSOR_EVENT_MESSAGE_BIT_SHIFT;
    sensor_type =
        (can_event_t.CanHeader.RxHeader.
 80a8c4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
         StdId & SENSOR_TYPE_BIT_MASK) >> SENSOR_TYPE_BIT_SHIFT;
 80a8c4c:	091b      	lsrs	r3, r3, #4
 80a8c4e:	b2db      	uxtb	r3, r3
    sensor_type =
 80a8c50:	f003 030f 	and.w	r3, r3, #15
 80a8c54:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
    command_code =
        can_event_t.CanHeader.RxHeader.StdId & SENSOR_COMMAND_BIT_MASK;
 80a8c58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80a8c5a:	b25b      	sxtb	r3, r3
    command_code =
 80a8c5c:	f003 030f 	and.w	r3, r3, #15
 80a8c60:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
    //printf("can code: {%d, %d, %d}\r\n", event_type, sensor_type, command_code);
    if ((event_type == SENSOR_DEBUG_CONFIG_MSG)
 80a8c64:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 80a8c68:	2b07      	cmp	r3, #7
 80a8c6a:	d130      	bne.n	80a8cce <StartCan1ReceiveTask+0xba>
        && (sensor_type == SENSOR_TYPE_LED_HEAD
 80a8c6c:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 80a8c70:	2b04      	cmp	r3, #4
 80a8c72:	d003      	beq.n	80a8c7c <StartCan1ReceiveTask+0x68>
            || sensor_type == SENSOR_TYPE_LED_REAR)) {
 80a8c74:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 80a8c78:	2b09      	cmp	r3, #9
 80a8c7a:	d128      	bne.n	80a8cce <StartCan1ReceiveTask+0xba>
      if (sensor_avaiable_check(sensor_type)) {
 80a8c7c:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 80a8c80:	4618      	mov	r0, r3
 80a8c82:	f003 fe7b 	bl	80ac97c <sensor_avaiable_check>
 80a8c86:	4603      	mov	r3, r0
 80a8c88:	2b00      	cmp	r3, #0
 80a8c8a:	d015      	beq.n	80a8cb8 <StartCan1ReceiveTask+0xa4>
        sensor_msg_event.message_event_type = event_type;
 80a8c8c:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 80a8c90:	743b      	strb	r3, [r7, #16]
        sensor_msg_event.message_event_t.config_event.config_type =
 80a8c92:	2309      	movs	r3, #9
 80a8c94:	767b      	strb	r3, [r7, #25]
            SENSOR_LED_MODE_CONFIG;
        sensor_msg_event.message_event_t.config_event.cfg_data.
            config_data_u8[0] = can_event_t.CanData.RxData[0];
 80a8c96:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80a8c9a:	773b      	strb	r3, [r7, #28]
        sensor_msg_event.message_event_t.config_event.sensor_type = sensor_type;
 80a8c9c:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 80a8ca0:	763b      	strb	r3, [r7, #24]
        res = osMessageQueuePut(SensorMsgQHandle, &sensor_msg_event, 0, 0);
 80a8ca2:	4ba5      	ldr	r3, [pc, #660]	; (80a8f38 <StartCan1ReceiveTask+0x324>)
 80a8ca4:	6818      	ldr	r0, [r3, #0]
 80a8ca6:	f107 0110 	add.w	r1, r7, #16
 80a8caa:	2300      	movs	r3, #0
 80a8cac:	2200      	movs	r2, #0
 80a8cae:	f00d fba9 	bl	80b6404 <osMessageQueuePut>
 80a8cb2:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
      if (sensor_avaiable_check(sensor_type)) {
 80a8cb6:	e1d8      	b.n	80a906a <StartCan1ReceiveTask+0x456>
      } else
        res = osMessageQueuePut(Can2BroadcastQHandle, &can_event_t, 0, 0);
 80a8cb8:	4ba0      	ldr	r3, [pc, #640]	; (80a8f3c <StartCan1ReceiveTask+0x328>)
 80a8cba:	6818      	ldr	r0, [r3, #0]
 80a8cbc:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80a8cc0:	2300      	movs	r3, #0
 80a8cc2:	2200      	movs	r2, #0
 80a8cc4:	f00d fb9e 	bl	80b6404 <osMessageQueuePut>
 80a8cc8:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
      if (sensor_avaiable_check(sensor_type)) {
 80a8ccc:	e1cd      	b.n	80a906a <StartCan1ReceiveTask+0x456>

    } else if (event_type == SENSOR_CONFIG_MESSAGE) {
 80a8cce:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 80a8cd2:	2b00      	cmp	r3, #0
 80a8cd4:	f040 80d2 	bne.w	80a8e7c <StartCan1ReceiveTask+0x268>
      //check if supporting this kind of sensor
      if (command_code == SENSOR_ACTIVATE)
 80a8cd8:	f997 3099 	ldrsb.w	r3, [r7, #153]	; 0x99
 80a8cdc:	2b01      	cmp	r3, #1
 80a8cde:	d10e      	bne.n	80a8cfe <StartCan1ReceiveTask+0xea>
        CAN1_ENABLED_SENSORBIT |= (1 << sensor_type);
 80a8ce0:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 80a8ce4:	2201      	movs	r2, #1
 80a8ce6:	fa02 f303 	lsl.w	r3, r2, r3
 80a8cea:	b21a      	sxth	r2, r3
 80a8cec:	4b94      	ldr	r3, [pc, #592]	; (80a8f40 <StartCan1ReceiveTask+0x32c>)
 80a8cee:	881b      	ldrh	r3, [r3, #0]
 80a8cf0:	b21b      	sxth	r3, r3
 80a8cf2:	4313      	orrs	r3, r2
 80a8cf4:	b21b      	sxth	r3, r3
 80a8cf6:	b29a      	uxth	r2, r3
 80a8cf8:	4b91      	ldr	r3, [pc, #580]	; (80a8f40 <StartCan1ReceiveTask+0x32c>)
 80a8cfa:	801a      	strh	r2, [r3, #0]
 80a8cfc:	e013      	b.n	80a8d26 <StartCan1ReceiveTask+0x112>
      else if (command_code == SENSOR_DEACTIVATE)
 80a8cfe:	f997 3099 	ldrsb.w	r3, [r7, #153]	; 0x99
 80a8d02:	2b00      	cmp	r3, #0
 80a8d04:	d10f      	bne.n	80a8d26 <StartCan1ReceiveTask+0x112>
        CAN1_ENABLED_SENSORBIT &= ~(1 << sensor_type);
 80a8d06:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 80a8d0a:	2201      	movs	r2, #1
 80a8d0c:	fa02 f303 	lsl.w	r3, r2, r3
 80a8d10:	b21b      	sxth	r3, r3
 80a8d12:	43db      	mvns	r3, r3
 80a8d14:	b21a      	sxth	r2, r3
 80a8d16:	4b8a      	ldr	r3, [pc, #552]	; (80a8f40 <StartCan1ReceiveTask+0x32c>)
 80a8d18:	881b      	ldrh	r3, [r3, #0]
 80a8d1a:	b21b      	sxth	r3, r3
 80a8d1c:	4013      	ands	r3, r2
 80a8d1e:	b21b      	sxth	r3, r3
 80a8d20:	b29a      	uxth	r2, r3
 80a8d22:	4b87      	ldr	r3, [pc, #540]	; (80a8f40 <StartCan1ReceiveTask+0x32c>)
 80a8d24:	801a      	strh	r2, [r3, #0]
      if (command_code == SENSOR_CALIBRATION_RESULT)
 80a8d26:	f997 3099 	ldrsb.w	r3, [r7, #153]	; 0x99
 80a8d2a:	2b08      	cmp	r3, #8
 80a8d2c:	d10d      	bne.n	80a8d4a <StartCan1ReceiveTask+0x136>
        CAN1_GET_CALI_SENSORBIT |= (1 << sensor_type);
 80a8d2e:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 80a8d32:	2201      	movs	r2, #1
 80a8d34:	fa02 f303 	lsl.w	r3, r2, r3
 80a8d38:	b21a      	sxth	r2, r3
 80a8d3a:	4b82      	ldr	r3, [pc, #520]	; (80a8f44 <StartCan1ReceiveTask+0x330>)
 80a8d3c:	881b      	ldrh	r3, [r3, #0]
 80a8d3e:	b21b      	sxth	r3, r3
 80a8d40:	4313      	orrs	r3, r2
 80a8d42:	b21b      	sxth	r3, r3
 80a8d44:	b29a      	uxth	r2, r3
 80a8d46:	4b7f      	ldr	r3, [pc, #508]	; (80a8f44 <StartCan1ReceiveTask+0x330>)
 80a8d48:	801a      	strh	r2, [r3, #0]

      if (sensor_avaiable_check(sensor_type)) {
 80a8d4a:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 80a8d4e:	4618      	mov	r0, r3
 80a8d50:	f003 fe14 	bl	80ac97c <sensor_avaiable_check>
 80a8d54:	4603      	mov	r3, r0
 80a8d56:	2b00      	cmp	r3, #0
 80a8d58:	f000 8085 	beq.w	80a8e66 <StartCan1ReceiveTask+0x252>
        switch (command_code) {
 80a8d5c:	f997 3099 	ldrsb.w	r3, [r7, #153]	; 0x99
 80a8d60:	2b08      	cmp	r3, #8
 80a8d62:	d86f      	bhi.n	80a8e44 <StartCan1ReceiveTask+0x230>
 80a8d64:	a201      	add	r2, pc, #4	; (adr r2, 80a8d6c <StartCan1ReceiveTask+0x158>)
 80a8d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80a8d6a:	bf00      	nop
 80a8d6c:	080a8db5 	.word	0x080a8db5
 80a8d70:	080a8d91 	.word	0x080a8d91
 80a8d74:	080a8dd9 	.word	0x080a8dd9
 80a8d78:	080a8dfd 	.word	0x080a8dfd
 80a8d7c:	080a8e45 	.word	0x080a8e45
 80a8d80:	080a8e45 	.word	0x080a8e45
 80a8d84:	080a8e45 	.word	0x080a8e45
 80a8d88:	080a8e45 	.word	0x080a8e45
 80a8d8c:	080a8e21 	.word	0x080a8e21
        case SENSOR_ACTIVATE:
          //receive sensor enable message and forward it to smgr
          sensor_msg_event.message_event_type = SENSOR_CONFIG_MESSAGE;
 80a8d90:	2300      	movs	r3, #0
 80a8d92:	743b      	strb	r3, [r7, #16]
          sensor_msg_event.message_event_t.config_event.config_type =
 80a8d94:	2301      	movs	r3, #1
 80a8d96:	767b      	strb	r3, [r7, #25]
              SENSOR_ACTIVATE;
          sensor_msg_event.message_event_t.config_event.sensor_type =
 80a8d98:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 80a8d9c:	763b      	strb	r3, [r7, #24]
              sensor_type;
          res = osMessageQueuePut(SensorMsgQHandle, &sensor_msg_event, 0, 0);
 80a8d9e:	4b66      	ldr	r3, [pc, #408]	; (80a8f38 <StartCan1ReceiveTask+0x324>)
 80a8da0:	6818      	ldr	r0, [r3, #0]
 80a8da2:	f107 0110 	add.w	r1, r7, #16
 80a8da6:	2300      	movs	r3, #0
 80a8da8:	2200      	movs	r2, #0
 80a8daa:	f00d fb2b 	bl	80b6404 <osMessageQueuePut>
 80a8dae:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
          break;
 80a8db2:	e048      	b.n	80a8e46 <StartCan1ReceiveTask+0x232>
        case SENSOR_DEACTIVATE:
          sensor_msg_event.message_event_type = SENSOR_CONFIG_MESSAGE;
 80a8db4:	2300      	movs	r3, #0
 80a8db6:	743b      	strb	r3, [r7, #16]
          sensor_msg_event.message_event_t.config_event.config_type =
 80a8db8:	2300      	movs	r3, #0
 80a8dba:	767b      	strb	r3, [r7, #25]
              SENSOR_DEACTIVATE;
          sensor_msg_event.message_event_t.config_event.sensor_type =
 80a8dbc:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 80a8dc0:	763b      	strb	r3, [r7, #24]
              sensor_type;
          res = osMessageQueuePut(SensorMsgQHandle, &sensor_msg_event, 0, 0);
 80a8dc2:	4b5d      	ldr	r3, [pc, #372]	; (80a8f38 <StartCan1ReceiveTask+0x324>)
 80a8dc4:	6818      	ldr	r0, [r3, #0]
 80a8dc6:	f107 0110 	add.w	r1, r7, #16
 80a8dca:	2300      	movs	r3, #0
 80a8dcc:	2200      	movs	r2, #0
 80a8dce:	f00d fb19 	bl	80b6404 <osMessageQueuePut>
 80a8dd2:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
          break;
 80a8dd6:	e036      	b.n	80a8e46 <StartCan1ReceiveTask+0x232>
        case SENSOR_CONFIG_SELFTEST:
          sensor_msg_event.message_event_type = SENSOR_CONFIG_MESSAGE;
 80a8dd8:	2300      	movs	r3, #0
 80a8dda:	743b      	strb	r3, [r7, #16]
          sensor_msg_event.message_event_t.config_event.config_type =
 80a8ddc:	2302      	movs	r3, #2
 80a8dde:	767b      	strb	r3, [r7, #25]
              SENSOR_CONFIG_SELFTEST;
          sensor_msg_event.message_event_t.config_event.sensor_type =
 80a8de0:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 80a8de4:	763b      	strb	r3, [r7, #24]
              sensor_type;
          res = osMessageQueuePut(SensorMsgQHandle, &sensor_msg_event, 0, 0);
 80a8de6:	4b54      	ldr	r3, [pc, #336]	; (80a8f38 <StartCan1ReceiveTask+0x324>)
 80a8de8:	6818      	ldr	r0, [r3, #0]
 80a8dea:	f107 0110 	add.w	r1, r7, #16
 80a8dee:	2300      	movs	r3, #0
 80a8df0:	2200      	movs	r2, #0
 80a8df2:	f00d fb07 	bl	80b6404 <osMessageQueuePut>
 80a8df6:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
          break;
 80a8dfa:	e024      	b.n	80a8e46 <StartCan1ReceiveTask+0x232>
        case SENSOR_CONFIG_CALIBRATION:
          sensor_msg_event.message_event_type = SENSOR_CONFIG_MESSAGE;
 80a8dfc:	2300      	movs	r3, #0
 80a8dfe:	743b      	strb	r3, [r7, #16]
          sensor_msg_event.message_event_t.config_event.config_type =
 80a8e00:	2303      	movs	r3, #3
 80a8e02:	767b      	strb	r3, [r7, #25]
              SENSOR_CONFIG_CALIBRATION;
          sensor_msg_event.message_event_t.config_event.sensor_type =
 80a8e04:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 80a8e08:	763b      	strb	r3, [r7, #24]
              sensor_type;
          res = osMessageQueuePut(SensorMsgQHandle, &sensor_msg_event, 0, 0);
 80a8e0a:	4b4b      	ldr	r3, [pc, #300]	; (80a8f38 <StartCan1ReceiveTask+0x324>)
 80a8e0c:	6818      	ldr	r0, [r3, #0]
 80a8e0e:	f107 0110 	add.w	r1, r7, #16
 80a8e12:	2300      	movs	r3, #0
 80a8e14:	2200      	movs	r2, #0
 80a8e16:	f00d faf5 	bl	80b6404 <osMessageQueuePut>
 80a8e1a:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
          break;
 80a8e1e:	e012      	b.n	80a8e46 <StartCan1ReceiveTask+0x232>
        case SENSOR_CALIBRATION_RESULT:
          sensor_msg_event.message_event_type = SENSOR_CONFIG_MESSAGE;
 80a8e20:	2300      	movs	r3, #0
 80a8e22:	743b      	strb	r3, [r7, #16]
          sensor_msg_event.message_event_t.config_event.config_type =
 80a8e24:	2308      	movs	r3, #8
 80a8e26:	767b      	strb	r3, [r7, #25]
              SENSOR_CALIBRATION_RESULT;
          sensor_msg_event.message_event_t.config_event.sensor_type =
 80a8e28:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 80a8e2c:	763b      	strb	r3, [r7, #24]
              sensor_type;
          res = osMessageQueuePut(SensorMsgQHandle, &sensor_msg_event, 0, 0);
 80a8e2e:	4b42      	ldr	r3, [pc, #264]	; (80a8f38 <StartCan1ReceiveTask+0x324>)
 80a8e30:	6818      	ldr	r0, [r3, #0]
 80a8e32:	f107 0110 	add.w	r1, r7, #16
 80a8e36:	2300      	movs	r3, #0
 80a8e38:	2200      	movs	r2, #0
 80a8e3a:	f00d fae3 	bl	80b6404 <osMessageQueuePut>
 80a8e3e:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
          break;
 80a8e42:	e000      	b.n	80a8e46 <StartCan1ReceiveTask+0x232>
        default:
          break;
 80a8e44:	bf00      	nop
        }
        if (sensor_type == SENSOR_TYPE_MAX) {
 80a8e46:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 80a8e4a:	2b0f      	cmp	r3, #15
 80a8e4c:	f040 810d 	bne.w	80a906a <StartCan1ReceiveTask+0x456>
          //foward sensor command to can2 if this sensor is a all sensor enable message
          res = osMessageQueuePut(Can2BroadcastQHandle, &can_event_t, 0, 0);
 80a8e50:	4b3a      	ldr	r3, [pc, #232]	; (80a8f3c <StartCan1ReceiveTask+0x328>)
 80a8e52:	6818      	ldr	r0, [r3, #0]
 80a8e54:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80a8e58:	2300      	movs	r3, #0
 80a8e5a:	2200      	movs	r2, #0
 80a8e5c:	f00d fad2 	bl	80b6404 <osMessageQueuePut>
 80a8e60:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
 80a8e64:	e101      	b.n	80a906a <StartCan1ReceiveTask+0x456>
        }
      } else {
        //foward sensor command to can2 if this sensor is not on this chip
        res = osMessageQueuePut(Can2BroadcastQHandle, &can_event_t, 0, 0);
 80a8e66:	4b35      	ldr	r3, [pc, #212]	; (80a8f3c <StartCan1ReceiveTask+0x328>)
 80a8e68:	6818      	ldr	r0, [r3, #0]
 80a8e6a:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80a8e6e:	2300      	movs	r3, #0
 80a8e70:	2200      	movs	r2, #0
 80a8e72:	f00d fac7 	bl	80b6404 <osMessageQueuePut>
 80a8e76:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
 80a8e7a:	e0f6      	b.n	80a906a <StartCan1ReceiveTask+0x456>
      }
    } else if (event_type == SENSOR_DATA_MESSAGE
 80a8e7c:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 80a8e80:	2b01      	cmp	r3, #1
 80a8e82:	d003      	beq.n	80a8e8c <StartCan1ReceiveTask+0x278>
               || event_type == SENSOR_TIMESTAMP_MESSAGE) {
 80a8e84:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 80a8e88:	2b02      	cmp	r3, #2
 80a8e8a:	d106      	bne.n	80a8e9a <StartCan1ReceiveTask+0x286>
      //can1 receive should not handle data or timestamp msg to avoid can msg storm on can net work between slave stm32s
      printf("Can1ReceiveQ data or timstamp msg event_type = %d\r\n",
 80a8e8c:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 80a8e90:	4619      	mov	r1, r3
 80a8e92:	482d      	ldr	r0, [pc, #180]	; (80a8f48 <StartCan1ReceiveTask+0x334>)
 80a8e94:	f017 fd6e 	bl	80c0974 <iprintf>
 80a8e98:	e0e7      	b.n	80a906a <StartCan1ReceiveTask+0x456>
             event_type);
    } else if (event_type == SENSOR_OTA_MESSAGE) {
 80a8e9a:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 80a8e9e:	2b04      	cmp	r3, #4
 80a8ea0:	d158      	bne.n	80a8f54 <StartCan1ReceiveTask+0x340>
      sensor_message_event_type event_type;
      uint8_t chip_id;
      uint8_t cancom_mode;

      event_type =
          (can_event_t.CanHeader.RxHeader.
 80a8ea2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
           StdId & SENSOR_EVENT_MESSAGE_BIT_MASK) >>
 80a8ea4:	0a1b      	lsrs	r3, r3, #8
 80a8ea6:	b2db      	uxtb	r3, r3
      event_type =
 80a8ea8:	f003 030f 	and.w	r3, r3, #15
 80a8eac:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
          SENSOR_EVENT_MESSAGE_BIT_SHIFT;
      chip_id =
          (can_event_t.CanHeader.RxHeader.
 80a8eb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
           StdId & CHIP_ID_BIT_MASK) >> CHIP_ID_BIT_SHIFT;
 80a8eb2:	091b      	lsrs	r3, r3, #4
 80a8eb4:	b2db      	uxtb	r3, r3
      chip_id =
 80a8eb6:	f003 030f 	and.w	r3, r3, #15
 80a8eba:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
      cancom_mode = can_event_t.CanHeader.RxHeader.StdId & CANCOM_MODE_BIT_MASK;
 80a8ebe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80a8ec0:	b2db      	uxtb	r3, r3
 80a8ec2:	f003 030f 	and.w	r3, r3, #15
 80a8ec6:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
      if (chip_id == boardID) {
 80a8eca:	4b20      	ldr	r3, [pc, #128]	; (80a8f4c <StartCan1ReceiveTask+0x338>)
 80a8ecc:	781b      	ldrb	r3, [r3, #0]
 80a8ece:	f897 2092 	ldrb.w	r2, [r7, #146]	; 0x92
 80a8ed2:	429a      	cmp	r2, r3
 80a8ed4:	d121      	bne.n	80a8f1a <StartCan1ReceiveTask+0x306>
        if ((cancom_mode == CANCOM_OTA_MODE_ENTER)) {
 80a8ed6:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 80a8eda:	2b06      	cmp	r3, #6
 80a8edc:	f040 80c5 	bne.w	80a906a <StartCan1ReceiveTask+0x456>
          //first update flash
          flash_unlock();
 80a8ee0:	f7fb fbaa 	bl	80a4638 <flash_unlock>
          flash_update_boot_magic_number();
 80a8ee4:	f7fb fc0c 	bl	80a4700 <flash_update_boot_magic_number>
          flash_lock();
 80a8ee8:	f7fb fbb4 	bl	80a4654 <flash_lock>
          can_event_t.CanHeader.TxHeader.StdId =
              (SENSOR_OTA_MESSAGE << SENSOR_EVENT_MESSAGE_BIT_SHIFT)
              | (boardID << SENSOR_TYPE_BIT_SHIFT)
 80a8eec:	4b17      	ldr	r3, [pc, #92]	; (80a8f4c <StartCan1ReceiveTask+0x338>)
 80a8eee:	781b      	ldrb	r3, [r3, #0]
 80a8ef0:	011b      	lsls	r3, r3, #4
              | CANCOM_OTA_MODE_ENTER_ACK;
 80a8ef2:	f443 6381 	orr.w	r3, r3, #1032	; 0x408
 80a8ef6:	f043 0304 	orr.w	r3, r3, #4
          can_event_t.CanHeader.TxHeader.StdId =
 80a8efa:	66fb      	str	r3, [r7, #108]	; 0x6c
#if USE_P1
          res = osMessageQueuePut(Can1BroadcastQHandle, &can_event_t, 0, 0);
 80a8efc:	4b14      	ldr	r3, [pc, #80]	; (80a8f50 <StartCan1ReceiveTask+0x33c>)
 80a8efe:	6818      	ldr	r0, [r3, #0]
 80a8f00:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80a8f04:	2300      	movs	r3, #0
 80a8f06:	2200      	movs	r2, #0
 80a8f08:	f00d fa7c 	bl	80b6404 <osMessageQueuePut>
 80a8f0c:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
#else
          res = osMessageQueuePut(Can2BroadcastQHandle, &can_event_t, 0, 0);
#endif
          //than reset
          osDelay(5);
 80a8f10:	2005      	movs	r0, #5
 80a8f12:	f00d f8f2 	bl	80b60fa <osDelay>
          __NVIC_SystemReset();
 80a8f16:	f7ff f81f 	bl	80a7f58 <__NVIC_SystemReset>
        }
      } else {
        //foward this message to can2 to tell sub stm32
        res = osMessageQueuePut(Can2BroadcastQHandle, &can_event_t, 0, 0);
 80a8f1a:	4b08      	ldr	r3, [pc, #32]	; (80a8f3c <StartCan1ReceiveTask+0x328>)
 80a8f1c:	6818      	ldr	r0, [r3, #0]
 80a8f1e:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80a8f22:	2300      	movs	r3, #0
 80a8f24:	2200      	movs	r2, #0
 80a8f26:	f00d fa6d 	bl	80b6404 <osMessageQueuePut>
 80a8f2a:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
 80a8f2e:	e09c      	b.n	80a906a <StartCan1ReceiveTask+0x456>
 80a8f30:	2001be6c 	.word	0x2001be6c
 80a8f34:	080c5ac0 	.word	0x080c5ac0
 80a8f38:	2001bec8 	.word	0x2001bec8
 80a8f3c:	2001be70 	.word	0x2001be70
 80a8f40:	2000808c 	.word	0x2000808c
 80a8f44:	2000808e 	.word	0x2000808e
 80a8f48:	080c5adc 	.word	0x080c5adc
 80a8f4c:	20007886 	.word	0x20007886
 80a8f50:	2001c004 	.word	0x2001c004
      }
    } else if (event_type == SENSOR_VERSION_MSG) {
 80a8f54:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 80a8f58:	2b05      	cmp	r3, #5
 80a8f5a:	d13b      	bne.n	80a8fd4 <StartCan1ReceiveTask+0x3c0>
      sensor_message_event_type event_type;
      uint8_t chip_id;
      uint8_t cancom_mode;

      event_type =
          (can_event_t.CanHeader.RxHeader.
 80a8f5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
           StdId & SENSOR_EVENT_MESSAGE_BIT_MASK) >>
 80a8f5e:	0a1b      	lsrs	r3, r3, #8
 80a8f60:	b2db      	uxtb	r3, r3
      event_type =
 80a8f62:	f003 030f 	and.w	r3, r3, #15
 80a8f66:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
          SENSOR_EVENT_MESSAGE_BIT_SHIFT;
      chip_id =
          (can_event_t.CanHeader.RxHeader.
 80a8f6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
           StdId & CHIP_ID_BIT_MASK) >> CHIP_ID_BIT_SHIFT;
 80a8f6c:	091b      	lsrs	r3, r3, #4
 80a8f6e:	b2db      	uxtb	r3, r3
      chip_id =
 80a8f70:	f003 030f 	and.w	r3, r3, #15
 80a8f74:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
      cancom_mode = can_event_t.CanHeader.RxHeader.StdId & CANCOM_MODE_BIT_MASK;
 80a8f78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80a8f7a:	b2db      	uxtb	r3, r3
 80a8f7c:	f003 030f 	and.w	r3, r3, #15
 80a8f80:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
      if (chip_id == boardID) {
 80a8f84:	4b3b      	ldr	r3, [pc, #236]	; (80a9074 <StartCan1ReceiveTask+0x460>)
 80a8f86:	781b      	ldrb	r3, [r3, #0]
 80a8f88:	f897 2095 	ldrb.w	r2, [r7, #149]	; 0x95
 80a8f8c:	429a      	cmp	r2, r3
 80a8f8e:	d116      	bne.n	80a8fbe <StartCan1ReceiveTask+0x3aa>
        can_event_t.CanHeader.TxHeader.StdId =
            (SENSOR_VERSION_MSG << SENSOR_EVENT_MESSAGE_BIT_SHIFT)
            | (boardID << SENSOR_TYPE_BIT_SHIFT)
 80a8f90:	4b38      	ldr	r3, [pc, #224]	; (80a9074 <StartCan1ReceiveTask+0x460>)
 80a8f92:	781b      	ldrb	r3, [r3, #0]
 80a8f94:	011b      	lsls	r3, r3, #4
            | 0xf;
 80a8f96:	f443 63a1 	orr.w	r3, r3, #1288	; 0x508
 80a8f9a:	f043 0307 	orr.w	r3, r3, #7
        can_event_t.CanHeader.TxHeader.StdId =
 80a8f9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80a8fa0:	4b35      	ldr	r3, [pc, #212]	; (80a9078 <StartCan1ReceiveTask+0x464>)
 80a8fa2:	681b      	ldr	r3, [r3, #0]
        memcpy(&can_event_t.CanData.TxData[0], &software_version,
 80a8fa4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
               sizeof(uint32_t));
        res = osMessageQueuePut(Can1BroadcastQHandle, &can_event_t, 0, 0);
 80a8fa8:	4b34      	ldr	r3, [pc, #208]	; (80a907c <StartCan1ReceiveTask+0x468>)
 80a8faa:	6818      	ldr	r0, [r3, #0]
 80a8fac:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80a8fb0:	2300      	movs	r3, #0
 80a8fb2:	2200      	movs	r2, #0
 80a8fb4:	f00d fa26 	bl	80b6404 <osMessageQueuePut>
 80a8fb8:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
 80a8fbc:	e055      	b.n	80a906a <StartCan1ReceiveTask+0x456>
      } else {
        //foward this message to can2 to tell sub stm32
        res = osMessageQueuePut(Can2BroadcastQHandle, &can_event_t, 0, 0);
 80a8fbe:	4b30      	ldr	r3, [pc, #192]	; (80a9080 <StartCan1ReceiveTask+0x46c>)
 80a8fc0:	6818      	ldr	r0, [r3, #0]
 80a8fc2:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80a8fc6:	2300      	movs	r3, #0
 80a8fc8:	2200      	movs	r2, #0
 80a8fca:	f00d fa1b 	bl	80b6404 <osMessageQueuePut>
 80a8fce:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
 80a8fd2:	e04a      	b.n	80a906a <StartCan1ReceiveTask+0x456>
      }
    } else if (event_type == SENSOR_TIME_SYNC_MSG) {
 80a8fd4:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 80a8fd8:	2b06      	cmp	r3, #6
 80a8fda:	d140      	bne.n	80a905e <StartCan1ReceiveTask+0x44a>
      sensor_message_event_type event_type;
      uint8_t chip_id;

      event_type =
          (can_event_t.CanHeader.RxHeader.
 80a8fdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
           StdId & SENSOR_EVENT_MESSAGE_BIT_MASK) >>
 80a8fde:	0a1b      	lsrs	r3, r3, #8
 80a8fe0:	b2db      	uxtb	r3, r3
      event_type =
 80a8fe2:	f003 030f 	and.w	r3, r3, #15
 80a8fe6:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
          SENSOR_EVENT_MESSAGE_BIT_SHIFT;
      chip_id =
          (can_event_t.CanHeader.RxHeader.
 80a8fea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
           StdId & CHIP_ID_BIT_MASK) >> CHIP_ID_BIT_SHIFT;
 80a8fec:	091b      	lsrs	r3, r3, #4
 80a8fee:	b2db      	uxtb	r3, r3
      chip_id =
 80a8ff0:	f003 030f 	and.w	r3, r3, #15
 80a8ff4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

      if (chip_id == boardID) {
 80a8ff8:	4b1e      	ldr	r3, [pc, #120]	; (80a9074 <StartCan1ReceiveTask+0x460>)
 80a8ffa:	781b      	ldrb	r3, [r3, #0]
 80a8ffc:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 80a9000:	429a      	cmp	r2, r3
 80a9002:	d121      	bne.n	80a9048 <StartCan1ReceiveTask+0x434>
        can_event_t.CanHeader.TxHeader.StdId =
            (SENSOR_TIME_SYNC_MSG << SENSOR_EVENT_MESSAGE_BIT_SHIFT)
            | (boardID << SENSOR_TYPE_BIT_SHIFT)
 80a9004:	4b1b      	ldr	r3, [pc, #108]	; (80a9074 <StartCan1ReceiveTask+0x460>)
 80a9006:	781b      	ldrb	r3, [r3, #0]
 80a9008:	011b      	lsls	r3, r3, #4
            | 0xf;
 80a900a:	f443 63c1 	orr.w	r3, r3, #1544	; 0x608
 80a900e:	f043 0307 	orr.w	r3, r3, #7
        can_event_t.CanHeader.TxHeader.StdId =
 80a9012:	66fb      	str	r3, [r7, #108]	; 0x6c
        uint64_t current_time = sensor_get_timestamp();
 80a9014:	f004 fb78 	bl	80ad708 <sensor_get_timestamp>
 80a9018:	4602      	mov	r2, r0
 80a901a:	460b      	mov	r3, r1
 80a901c:	e9c7 2302 	strd	r2, r3, [r7, #8]
        memcpy(&can_event_t.CanData.TxData[0], &current_time, sizeof(uint64_t));
 80a9020:	f107 0108 	add.w	r1, r7, #8
 80a9024:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80a9028:	331c      	adds	r3, #28
 80a902a:	2208      	movs	r2, #8
 80a902c:	4618      	mov	r0, r3
 80a902e:	f016 ffb7 	bl	80bffa0 <memcpy>
        res = osMessageQueuePut(Can1BroadcastQHandle, &can_event_t, 0, 0);
 80a9032:	4b12      	ldr	r3, [pc, #72]	; (80a907c <StartCan1ReceiveTask+0x468>)
 80a9034:	6818      	ldr	r0, [r3, #0]
 80a9036:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80a903a:	2300      	movs	r3, #0
 80a903c:	2200      	movs	r2, #0
 80a903e:	f00d f9e1 	bl	80b6404 <osMessageQueuePut>
 80a9042:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
 80a9046:	e010      	b.n	80a906a <StartCan1ReceiveTask+0x456>
      } else {
        //foward this message to can2 to tell sub stm32
        res = osMessageQueuePut(Can2BroadcastQHandle, &can_event_t, 0, 0);
 80a9048:	4b0d      	ldr	r3, [pc, #52]	; (80a9080 <StartCan1ReceiveTask+0x46c>)
 80a904a:	6818      	ldr	r0, [r3, #0]
 80a904c:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80a9050:	2300      	movs	r3, #0
 80a9052:	2200      	movs	r2, #0
 80a9054:	f00d f9d6 	bl	80b6404 <osMessageQueuePut>
 80a9058:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
 80a905c:	e005      	b.n	80a906a <StartCan1ReceiveTask+0x456>
      }
    } else {
      printf("Can1ReceiveQ unsupported msg event_type = %d \r\n", event_type);
 80a905e:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 80a9062:	4619      	mov	r1, r3
 80a9064:	4807      	ldr	r0, [pc, #28]	; (80a9084 <StartCan1ReceiveTask+0x470>)
 80a9066:	f017 fc85 	bl	80c0974 <iprintf>
    }
    //parse can1 message and foward to tasks, RxData is only sizeof uint8_t * 8
    osDelay(1);
 80a906a:	2001      	movs	r0, #1
 80a906c:	f00d f845 	bl	80b60fa <osDelay>
    res = osMessageQueueGet(Can1ReceiveQHandle, &can_event_t, 0, portMAX_DELAY);
 80a9070:	e5d4      	b.n	80a8c1c <StartCan1ReceiveTask+0x8>
 80a9072:	bf00      	nop
 80a9074:	20007886 	.word	0x20007886
 80a9078:	20007888 	.word	0x20007888
 80a907c:	2001c004 	.word	0x2001c004
 80a9080:	2001be70 	.word	0x2001be70
 80a9084:	080c5b10 	.word	0x080c5b10

080a9088 <StartCan2BroadcastTask>:
 * @brief  Function implementing the Can2Broadcast thread.
 * @param  argument: Not used
 * @retval None
 */
void StartCan2BroadcastTask(void *argument)
{
 80a9088:	b580      	push	{r7, lr}
 80a908a:	b08e      	sub	sp, #56	; 0x38
 80a908c:	af00      	add	r7, sp, #0
 80a908e:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for (;;) {
    //for master stm32 can2 is used to broad cast config message to slave stm32 can1
    res =
        osMessageQueueGet(Can2BroadcastQHandle, &can_event_t, 0, portMAX_DELAY);
 80a9090:	4b16      	ldr	r3, [pc, #88]	; (80a90ec <StartCan2BroadcastTask+0x64>)
 80a9092:	6818      	ldr	r0, [r3, #0]
 80a9094:	f107 010c 	add.w	r1, r7, #12
 80a9098:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a909c:	2200      	movs	r2, #0
 80a909e:	f00d fa11 	bl	80b64c4 <osMessageQueueGet>
 80a90a2:	6378      	str	r0, [r7, #52]	; 0x34
    //printf("CAN2 BC MSG: (0x%x) \r\n", can_event_t.CanHeader.TxHeader.StdId);
    /*Configure Transmission process */
    can_event_t.CanHeader.TxHeader.RTR = CAN_RTR_DATA;
 80a90a4:	2300      	movs	r3, #0
 80a90a6:	61bb      	str	r3, [r7, #24]
    can_event_t.CanHeader.TxHeader.IDE = CAN_ID_STD;
 80a90a8:	2300      	movs	r3, #0
 80a90aa:	617b      	str	r3, [r7, #20]
    can_event_t.CanHeader.TxHeader.DLC = 8;
 80a90ac:	2308      	movs	r3, #8
 80a90ae:	61fb      	str	r3, [r7, #28]
    can_event_t.CanHeader.TxHeader.TransmitGlobalTime = DISABLE;
 80a90b0:	2300      	movs	r3, #0
 80a90b2:	f887 3020 	strb.w	r3, [r7, #32]
    /* CAN send test. */
    if (HAL_CAN_AddTxMessage(&hcan2, &can_event_t.CanHeader.TxHeader,
 80a90b6:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80a90ba:	f107 030c 	add.w	r3, r7, #12
 80a90be:	f103 021c 	add.w	r2, r3, #28
 80a90c2:	f107 010c 	add.w	r1, r7, #12
 80a90c6:	4603      	mov	r3, r0
 80a90c8:	4809      	ldr	r0, [pc, #36]	; (80a90f0 <StartCan2BroadcastTask+0x68>)
 80a90ca:	f006 fd03 	bl	80afad4 <HAL_CAN_AddTxMessage>
 80a90ce:	4603      	mov	r3, r0
 80a90d0:	2b00      	cmp	r3, #0
 80a90d2:	d007      	beq.n	80a90e4 <StartCan2BroadcastTask+0x5c>
                             can_event_t.CanData.TxData,
                             &TxMailbox) != HAL_OK) {
      printf("can2 errorcode: 0x%x \r\n", hcan2.ErrorCode);
 80a90d4:	4b06      	ldr	r3, [pc, #24]	; (80a90f0 <StartCan2BroadcastTask+0x68>)
 80a90d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a90d8:	4619      	mov	r1, r3
 80a90da:	4806      	ldr	r0, [pc, #24]	; (80a90f4 <StartCan2BroadcastTask+0x6c>)
 80a90dc:	f017 fc4a 	bl	80c0974 <iprintf>
      /* Transmission request Error */
      Error_Handler();
 80a90e0:	f000 fd1a 	bl	80a9b18 <Error_Handler>
    }
    osDelay(1);
 80a90e4:	2001      	movs	r0, #1
 80a90e6:	f00d f808 	bl	80b60fa <osDelay>
    res =
 80a90ea:	e7d1      	b.n	80a9090 <StartCan2BroadcastTask+0x8>
 80a90ec:	2001be70 	.word	0x2001be70
 80a90f0:	2001bf48 	.word	0x2001bf48
 80a90f4:	080c5aa0 	.word	0x080c5aa0

080a90f8 <StartCan2ReceiveTask>:
 * @brief  Function implementing the Can2Receive thread.
 * @param  argument: Not used
 * @retval None
 */
void StartCan2ReceiveTask(void *argument)
{
 80a90f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80a90fc:	f5ad 6daf 	sub.w	sp, sp, #1400	; 0x578
 80a9100:	af06      	add	r7, sp, #24
 80a9102:	1d3b      	adds	r3, r7, #4
 80a9104:	6018      	str	r0, [r3, #0]
  sensor_message_event_type event_type;
  sensors_event_t sensor_data[SENSOR_TYPE_MAX];
  uint8_t sensor_type;
  int8_t command_code;
  uint8_t data_index;
  uint8_t data_size[SENSOR_TYPE_MAX] = { 0 };
 80a9106:	f107 0318 	add.w	r3, r7, #24
 80a910a:	2200      	movs	r2, #0
 80a910c:	601a      	str	r2, [r3, #0]
 80a910e:	3304      	adds	r3, #4
 80a9110:	2200      	movs	r2, #0
 80a9112:	601a      	str	r2, [r3, #0]
 80a9114:	605a      	str	r2, [r3, #4]
 80a9116:	f8c3 2007 	str.w	r2, [r3, #7]
  uint8_t data_bitmask[SENSOR_TYPE_MAX] = { 0 };
 80a911a:	f107 0308 	add.w	r3, r7, #8
 80a911e:	2200      	movs	r2, #0
 80a9120:	601a      	str	r2, [r3, #0]
 80a9122:	3304      	adds	r3, #4
 80a9124:	2200      	movs	r2, #0
 80a9126:	601a      	str	r2, [r3, #0]
 80a9128:	605a      	str	r2, [r3, #4]
 80a912a:	f8c3 2007 	str.w	r2, [r3, #7]

  for (;;) {
    //for master stm32 can2 will receive data from slave stm32
    //for slave stm32 can2 is disabled
    res = osMessageQueueGet(Can2ReceiveQHandle, &can_event_t, 0, portMAX_DELAY);
 80a912e:	4bb2      	ldr	r3, [pc, #712]	; (80a93f8 <StartCan2ReceiveTask+0x300>)
 80a9130:	6818      	ldr	r0, [r3, #0]
 80a9132:	f207 5134 	addw	r1, r7, #1332	; 0x534
 80a9136:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a913a:	2200      	movs	r2, #0
 80a913c:	f00d f9c2 	bl	80b64c4 <osMessageQueueGet>
 80a9140:	f8c7 055c 	str.w	r0, [r7, #1372]	; 0x55c
    //printf("rev can2 msg StdId: 0x%x, ExtId: 0x%x\r\n", can_event_t.CanHeader.RxHeader.StdId, can_event_t.CanHeader.RxHeader.ExtId);
    event_type =
        (can_event_t.CanHeader.RxHeader.
 80a9144:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
         StdId & SENSOR_EVENT_MESSAGE_BIT_MASK) >>
 80a9148:	0a1b      	lsrs	r3, r3, #8
 80a914a:	b2db      	uxtb	r3, r3
    event_type =
 80a914c:	f003 030f 	and.w	r3, r3, #15
 80a9150:	f887 355b 	strb.w	r3, [r7, #1371]	; 0x55b
        SENSOR_EVENT_MESSAGE_BIT_SHIFT;
    sensor_type =
        (can_event_t.CanHeader.RxHeader.
 80a9154:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
         StdId & SENSOR_TYPE_BIT_MASK) >> SENSOR_TYPE_BIT_SHIFT;
 80a9158:	091b      	lsrs	r3, r3, #4
 80a915a:	b2db      	uxtb	r3, r3
    sensor_type =
 80a915c:	f003 030f 	and.w	r3, r3, #15
 80a9160:	f887 355a 	strb.w	r3, [r7, #1370]	; 0x55a
    command_code =
        can_event_t.CanHeader.RxHeader.StdId & SENSOR_COMMAND_BIT_MASK;
 80a9164:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 80a9168:	b25b      	sxtb	r3, r3
    command_code =
 80a916a:	f003 030f 	and.w	r3, r3, #15
 80a916e:	f887 3559 	strb.w	r3, [r7, #1369]	; 0x559
    //printf("can code: {%d, %d, %d}\r\n", event_type, sensor_type, command_code);
    //if can2 receive data message transfer it to sensordataQ
    //parse can2 message and foward to tasks, RxData is only sizeof uint8_t * 8
    if (event_type == SENSOR_CONFIG_MESSAGE) {
 80a9172:	f897 355b 	ldrb.w	r3, [r7, #1371]	; 0x55b
 80a9176:	2b00      	cmp	r3, #0
 80a9178:	d103      	bne.n	80a9182 <StartCan2ReceiveTask+0x8a>
      //check if supporting this kind of sensor
      printf("Can2ReceiveQ config msg \r\n");
 80a917a:	48a0      	ldr	r0, [pc, #640]	; (80a93fc <StartCan2ReceiveTask+0x304>)
 80a917c:	f017 fc96 	bl	80c0aac <puts>
 80a9180:	e12f      	b.n	80a93e2 <StartCan2ReceiveTask+0x2ea>
    } else if (event_type == SENSOR_DATA_MESSAGE) {
 80a9182:	f897 355b 	ldrb.w	r3, [r7, #1371]	; 0x55b
 80a9186:	2b01      	cmp	r3, #1
 80a9188:	d14e      	bne.n	80a9228 <StartCan2ReceiveTask+0x130>
      //printf("Can2ReceiveQ data msg \r\n");
      //forward can2 data message to SensorDataQ
      //when receiving data message, command code is axis_num + 1, parse sensordata here
      data_size[sensor_type] = command_code;
 80a918a:	f897 355a 	ldrb.w	r3, [r7, #1370]	; 0x55a
 80a918e:	f897 1559 	ldrb.w	r1, [r7, #1369]	; 0x559
 80a9192:	f107 0218 	add.w	r2, r7, #24
 80a9196:	54d1      	strb	r1, [r2, r3]
      sensor_data[sensor_type].sensor_type = sensor_type;
 80a9198:	f897 255a 	ldrb.w	r2, [r7, #1370]	; 0x55a
 80a919c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80a91a0:	4613      	mov	r3, r2
 80a91a2:	009b      	lsls	r3, r3, #2
 80a91a4:	4413      	add	r3, r2
 80a91a6:	011b      	lsls	r3, r3, #4
 80a91a8:	440b      	add	r3, r1
 80a91aa:	f897 255a 	ldrb.w	r2, [r7, #1370]	; 0x55a
 80a91ae:	701a      	strb	r2, [r3, #0]
      data_index = can_event_t.CanData.RxData[0];
 80a91b0:	f897 3550 	ldrb.w	r3, [r7, #1360]	; 0x550
 80a91b4:	f887 3558 	strb.w	r3, [r7, #1368]	; 0x558
      if (!(data_bitmask[sensor_type] & (1 << data_index))) {
 80a91b8:	f897 355a 	ldrb.w	r3, [r7, #1370]	; 0x55a
 80a91bc:	f107 0208 	add.w	r2, r7, #8
 80a91c0:	5cd3      	ldrb	r3, [r2, r3]
 80a91c2:	461a      	mov	r2, r3
 80a91c4:	f897 3558 	ldrb.w	r3, [r7, #1368]	; 0x558
 80a91c8:	fa42 f303 	asr.w	r3, r2, r3
 80a91cc:	f003 0301 	and.w	r3, r3, #1
 80a91d0:	2b00      	cmp	r3, #0
 80a91d2:	d125      	bne.n	80a9220 <StartCan2ReceiveTask+0x128>
        memcpy(&sensor_data[sensor_type].sensor_data_t.vec.data[data_index],
 80a91d4:	f897 255a 	ldrb.w	r2, [r7, #1370]	; 0x55a
 80a91d8:	f897 0558 	ldrb.w	r0, [r7, #1368]	; 0x558
 80a91dc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80a91e0:	4613      	mov	r3, r2
 80a91e2:	009b      	lsls	r3, r3, #2
 80a91e4:	4413      	add	r3, r2
 80a91e6:	009b      	lsls	r3, r3, #2
 80a91e8:	4403      	add	r3, r0
 80a91ea:	3304      	adds	r3, #4
 80a91ec:	009b      	lsls	r3, r3, #2
 80a91ee:	440b      	add	r3, r1
 80a91f0:	f8d7 2551 	ldr.w	r2, [r7, #1361]	; 0x551
 80a91f4:	601a      	str	r2, [r3, #0]
               &can_event_t.CanData.RxData[1], sizeof(float));
        data_bitmask[sensor_type] =
            data_bitmask[sensor_type] | (1 << data_index);
 80a91f6:	f897 355a 	ldrb.w	r3, [r7, #1370]	; 0x55a
 80a91fa:	f107 0208 	add.w	r2, r7, #8
 80a91fe:	5cd3      	ldrb	r3, [r2, r3]
 80a9200:	b25a      	sxtb	r2, r3
 80a9202:	f897 3558 	ldrb.w	r3, [r7, #1368]	; 0x558
 80a9206:	2101      	movs	r1, #1
 80a9208:	fa01 f303 	lsl.w	r3, r1, r3
 80a920c:	b25b      	sxtb	r3, r3
 80a920e:	4313      	orrs	r3, r2
 80a9210:	b25a      	sxtb	r2, r3
        data_bitmask[sensor_type] =
 80a9212:	f897 355a 	ldrb.w	r3, [r7, #1370]	; 0x55a
            data_bitmask[sensor_type] | (1 << data_index);
 80a9216:	b2d1      	uxtb	r1, r2
        data_bitmask[sensor_type] =
 80a9218:	f107 0208 	add.w	r2, r7, #8
 80a921c:	54d1      	strb	r1, [r2, r3]
 80a921e:	e0e0      	b.n	80a93e2 <StartCan2ReceiveTask+0x2ea>
      } else {
        //drop data since received data index is not under expect
        printf("unexpected data index arrived\r\n");
 80a9220:	4877      	ldr	r0, [pc, #476]	; (80a9400 <StartCan2ReceiveTask+0x308>)
 80a9222:	f017 fc43 	bl	80c0aac <puts>
 80a9226:	e0dc      	b.n	80a93e2 <StartCan2ReceiveTask+0x2ea>
      }

    } else if (event_type == SENSOR_TIMESTAMP_MESSAGE) {
 80a9228:	f897 355b 	ldrb.w	r3, [r7, #1371]	; 0x55b
 80a922c:	2b02      	cmp	r3, #2
 80a922e:	f040 8099 	bne.w	80a9364 <StartCan2ReceiveTask+0x26c>
      if (data_bitmask[sensor_type] ==
 80a9232:	f897 355a 	ldrb.w	r3, [r7, #1370]	; 0x55a
 80a9236:	f107 0208 	add.w	r2, r7, #8
 80a923a:	5cd3      	ldrb	r3, [r2, r3]
 80a923c:	461c      	mov	r4, r3
          ((uint8_t) pow(2, data_size[sensor_type]) - 1)) {
 80a923e:	f897 355a 	ldrb.w	r3, [r7, #1370]	; 0x55a
 80a9242:	f107 0218 	add.w	r2, r7, #24
 80a9246:	5cd3      	ldrb	r3, [r2, r3]
 80a9248:	4618      	mov	r0, r3
 80a924a:	f7f7 f95b 	bl	80a0504 <__aeabi_ui2d>
 80a924e:	4602      	mov	r2, r0
 80a9250:	460b      	mov	r3, r1
 80a9252:	ec43 2b11 	vmov	d1, r2, r3
 80a9256:	ed9f 0b66 	vldr	d0, [pc, #408]	; 80a93f0 <StartCan2ReceiveTask+0x2f8>
 80a925a:	f019 fce9 	bl	80c2c30 <pow>
 80a925e:	ec53 2b10 	vmov	r2, r3, d0
 80a9262:	4610      	mov	r0, r2
 80a9264:	4619      	mov	r1, r3
 80a9266:	f7f7 fc9f 	bl	80a0ba8 <__aeabi_d2uiz>
 80a926a:	4603      	mov	r3, r0
 80a926c:	b2db      	uxtb	r3, r3
 80a926e:	3b01      	subs	r3, #1
      if (data_bitmask[sensor_type] ==
 80a9270:	429c      	cmp	r4, r3
 80a9272:	d16d      	bne.n	80a9350 <StartCan2ReceiveTask+0x258>
        memcpy(&sensor_data[sensor_type].timestamp,
 80a9274:	f897 255a 	ldrb.w	r2, [r7, #1370]	; 0x55a
 80a9278:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80a927c:	4613      	mov	r3, r2
 80a927e:	009b      	lsls	r3, r3, #2
 80a9280:	4413      	add	r3, r2
 80a9282:	011b      	lsls	r3, r3, #4
 80a9284:	3308      	adds	r3, #8
 80a9286:	440b      	add	r3, r1
 80a9288:	f8d7 2550 	ldr.w	r2, [r7, #1360]	; 0x550
 80a928c:	601a      	str	r2, [r3, #0]
               &can_event_t.CanData.RxData[0], sizeof(uint32_t));
        printf("transfer data: { %f, %f, %f, %f }\r\n",
               sensor_data[sensor_type].sensor_data_t.vec.data[0],
 80a928e:	f897 255a 	ldrb.w	r2, [r7, #1370]	; 0x55a
 80a9292:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80a9296:	4613      	mov	r3, r2
 80a9298:	009b      	lsls	r3, r3, #2
 80a929a:	4413      	add	r3, r2
 80a929c:	011b      	lsls	r3, r3, #4
 80a929e:	440b      	add	r3, r1
 80a92a0:	3310      	adds	r3, #16
 80a92a2:	681b      	ldr	r3, [r3, #0]
        printf("transfer data: { %f, %f, %f, %f }\r\n",
 80a92a4:	4618      	mov	r0, r3
 80a92a6:	f7f7 f94f 	bl	80a0548 <__aeabi_f2d>
 80a92aa:	4682      	mov	sl, r0
 80a92ac:	468b      	mov	fp, r1
               sensor_data[sensor_type].sensor_data_t.vec.data[1],
 80a92ae:	f897 255a 	ldrb.w	r2, [r7, #1370]	; 0x55a
 80a92b2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80a92b6:	4613      	mov	r3, r2
 80a92b8:	009b      	lsls	r3, r3, #2
 80a92ba:	4413      	add	r3, r2
 80a92bc:	011b      	lsls	r3, r3, #4
 80a92be:	440b      	add	r3, r1
 80a92c0:	3314      	adds	r3, #20
 80a92c2:	681b      	ldr	r3, [r3, #0]
        printf("transfer data: { %f, %f, %f, %f }\r\n",
 80a92c4:	4618      	mov	r0, r3
 80a92c6:	f7f7 f93f 	bl	80a0548 <__aeabi_f2d>
 80a92ca:	4604      	mov	r4, r0
 80a92cc:	460d      	mov	r5, r1
               sensor_data[sensor_type].sensor_data_t.vec.data[2],
 80a92ce:	f897 255a 	ldrb.w	r2, [r7, #1370]	; 0x55a
 80a92d2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80a92d6:	4613      	mov	r3, r2
 80a92d8:	009b      	lsls	r3, r3, #2
 80a92da:	4413      	add	r3, r2
 80a92dc:	011b      	lsls	r3, r3, #4
 80a92de:	440b      	add	r3, r1
 80a92e0:	3318      	adds	r3, #24
 80a92e2:	681b      	ldr	r3, [r3, #0]
        printf("transfer data: { %f, %f, %f, %f }\r\n",
 80a92e4:	4618      	mov	r0, r3
 80a92e6:	f7f7 f92f 	bl	80a0548 <__aeabi_f2d>
 80a92ea:	4680      	mov	r8, r0
 80a92ec:	4689      	mov	r9, r1
               sensor_data[sensor_type].sensor_data_t.vec.data[3]);
 80a92ee:	f897 255a 	ldrb.w	r2, [r7, #1370]	; 0x55a
 80a92f2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80a92f6:	4613      	mov	r3, r2
 80a92f8:	009b      	lsls	r3, r3, #2
 80a92fa:	4413      	add	r3, r2
 80a92fc:	011b      	lsls	r3, r3, #4
 80a92fe:	440b      	add	r3, r1
 80a9300:	331c      	adds	r3, #28
 80a9302:	681b      	ldr	r3, [r3, #0]
        printf("transfer data: { %f, %f, %f, %f }\r\n",
 80a9304:	4618      	mov	r0, r3
 80a9306:	f7f7 f91f 	bl	80a0548 <__aeabi_f2d>
 80a930a:	4602      	mov	r2, r0
 80a930c:	460b      	mov	r3, r1
 80a930e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80a9312:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80a9316:	e9cd 4500 	strd	r4, r5, [sp]
 80a931a:	4652      	mov	r2, sl
 80a931c:	465b      	mov	r3, fp
 80a931e:	4839      	ldr	r0, [pc, #228]	; (80a9404 <StartCan2ReceiveTask+0x30c>)
 80a9320:	f017 fb28 	bl	80c0974 <iprintf>
        osMessageQueuePut(SensorDataQHandle, &sensor_data[sensor_type], 0, 0);
 80a9324:	4b38      	ldr	r3, [pc, #224]	; (80a9408 <StartCan2ReceiveTask+0x310>)
 80a9326:	6818      	ldr	r0, [r3, #0]
 80a9328:	f897 255a 	ldrb.w	r2, [r7, #1370]	; 0x55a
 80a932c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80a9330:	4613      	mov	r3, r2
 80a9332:	009b      	lsls	r3, r3, #2
 80a9334:	4413      	add	r3, r2
 80a9336:	011b      	lsls	r3, r3, #4
 80a9338:	4419      	add	r1, r3
 80a933a:	2300      	movs	r3, #0
 80a933c:	2200      	movs	r2, #0
 80a933e:	f00d f861 	bl	80b6404 <osMessageQueuePut>
        data_bitmask[sensor_type] = 0x00;
 80a9342:	f897 355a 	ldrb.w	r3, [r7, #1370]	; 0x55a
 80a9346:	f107 0208 	add.w	r2, r7, #8
 80a934a:	2100      	movs	r1, #0
 80a934c:	54d1      	strb	r1, [r2, r3]
 80a934e:	e048      	b.n	80a93e2 <StartCan2ReceiveTask+0x2ea>
      } else {
        printf("error event index for sensor data!\r\n");
 80a9350:	482e      	ldr	r0, [pc, #184]	; (80a940c <StartCan2ReceiveTask+0x314>)
 80a9352:	f017 fbab 	bl	80c0aac <puts>
        data_bitmask[sensor_type] = 0x00;
 80a9356:	f897 355a 	ldrb.w	r3, [r7, #1370]	; 0x55a
 80a935a:	f107 0208 	add.w	r2, r7, #8
 80a935e:	2100      	movs	r1, #0
 80a9360:	54d1      	strb	r1, [r2, r3]
 80a9362:	e03e      	b.n	80a93e2 <StartCan2ReceiveTask+0x2ea>
      }
    } else if (event_type == SENSOR_CONFIG_RESP_MESSAGE) {
 80a9364:	f897 355b 	ldrb.w	r3, [r7, #1371]	; 0x55b
 80a9368:	2b03      	cmp	r3, #3
 80a936a:	d10a      	bne.n	80a9382 <StartCan2ReceiveTask+0x28a>
      //broadcast this message to AP through can1 broadcast task
      res = osMessageQueuePut(Can1BroadcastQHandle, &can_event_t, 0, 0);
 80a936c:	4b28      	ldr	r3, [pc, #160]	; (80a9410 <StartCan2ReceiveTask+0x318>)
 80a936e:	6818      	ldr	r0, [r3, #0]
 80a9370:	f207 5134 	addw	r1, r7, #1332	; 0x534
 80a9374:	2300      	movs	r3, #0
 80a9376:	2200      	movs	r2, #0
 80a9378:	f00d f844 	bl	80b6404 <osMessageQueuePut>
 80a937c:	f8c7 055c 	str.w	r0, [r7, #1372]	; 0x55c
 80a9380:	e02f      	b.n	80a93e2 <StartCan2ReceiveTask+0x2ea>
    } else if (event_type == SENSOR_OTA_MESSAGE) {
 80a9382:	f897 355b 	ldrb.w	r3, [r7, #1371]	; 0x55b
 80a9386:	2b04      	cmp	r3, #4
 80a9388:	d10a      	bne.n	80a93a0 <StartCan2ReceiveTask+0x2a8>
      //foward this message to can1 to tell master
      res = osMessageQueuePut(Can1BroadcastQHandle, &can_event_t, 0, 0);
 80a938a:	4b21      	ldr	r3, [pc, #132]	; (80a9410 <StartCan2ReceiveTask+0x318>)
 80a938c:	6818      	ldr	r0, [r3, #0]
 80a938e:	f207 5134 	addw	r1, r7, #1332	; 0x534
 80a9392:	2300      	movs	r3, #0
 80a9394:	2200      	movs	r2, #0
 80a9396:	f00d f835 	bl	80b6404 <osMessageQueuePut>
 80a939a:	f8c7 055c 	str.w	r0, [r7, #1372]	; 0x55c
 80a939e:	e020      	b.n	80a93e2 <StartCan2ReceiveTask+0x2ea>
    } else if (event_type == SENSOR_VERSION_MSG) {
 80a93a0:	f897 355b 	ldrb.w	r3, [r7, #1371]	; 0x55b
 80a93a4:	2b05      	cmp	r3, #5
 80a93a6:	d10a      	bne.n	80a93be <StartCan2ReceiveTask+0x2c6>
      //foward this message to can1 to tell master
      res = osMessageQueuePut(Can1BroadcastQHandle, &can_event_t, 0, 0);
 80a93a8:	4b19      	ldr	r3, [pc, #100]	; (80a9410 <StartCan2ReceiveTask+0x318>)
 80a93aa:	6818      	ldr	r0, [r3, #0]
 80a93ac:	f207 5134 	addw	r1, r7, #1332	; 0x534
 80a93b0:	2300      	movs	r3, #0
 80a93b2:	2200      	movs	r2, #0
 80a93b4:	f00d f826 	bl	80b6404 <osMessageQueuePut>
 80a93b8:	f8c7 055c 	str.w	r0, [r7, #1372]	; 0x55c
 80a93bc:	e011      	b.n	80a93e2 <StartCan2ReceiveTask+0x2ea>
    } else if (event_type == SENSOR_TIME_SYNC_MSG) {
 80a93be:	f897 355b 	ldrb.w	r3, [r7, #1371]	; 0x55b
 80a93c2:	2b06      	cmp	r3, #6
 80a93c4:	d10a      	bne.n	80a93dc <StartCan2ReceiveTask+0x2e4>
      //foward this message to can1 to tell master
      res = osMessageQueuePut(Can1BroadcastQHandle, &can_event_t, 0, 0);
 80a93c6:	4b12      	ldr	r3, [pc, #72]	; (80a9410 <StartCan2ReceiveTask+0x318>)
 80a93c8:	6818      	ldr	r0, [r3, #0]
 80a93ca:	f207 5134 	addw	r1, r7, #1332	; 0x534
 80a93ce:	2300      	movs	r3, #0
 80a93d0:	2200      	movs	r2, #0
 80a93d2:	f00d f817 	bl	80b6404 <osMessageQueuePut>
 80a93d6:	f8c7 055c 	str.w	r0, [r7, #1372]	; 0x55c
 80a93da:	e002      	b.n	80a93e2 <StartCan2ReceiveTask+0x2ea>
    } else {
      printf("Can2ReceiveQ unsupported msg \r\n");
 80a93dc:	480d      	ldr	r0, [pc, #52]	; (80a9414 <StartCan2ReceiveTask+0x31c>)
 80a93de:	f017 fb65 	bl	80c0aac <puts>
    }

    osDelay(1);
 80a93e2:	2001      	movs	r0, #1
 80a93e4:	f00c fe89 	bl	80b60fa <osDelay>
    res = osMessageQueueGet(Can2ReceiveQHandle, &can_event_t, 0, portMAX_DELAY);
 80a93e8:	e6a1      	b.n	80a912e <StartCan2ReceiveTask+0x36>
 80a93ea:	bf00      	nop
 80a93ec:	f3af 8000 	nop.w
 80a93f0:	00000000 	.word	0x00000000
 80a93f4:	40000000 	.word	0x40000000
 80a93f8:	2001c298 	.word	0x2001c298
 80a93fc:	080c5b40 	.word	0x080c5b40
 80a9400:	080c5b5c 	.word	0x080c5b5c
 80a9404:	080c5b7c 	.word	0x080c5b7c
 80a9408:	2001be08 	.word	0x2001be08
 80a940c:	080c5ba0 	.word	0x080c5ba0
 80a9410:	2001c004 	.word	0x2001c004
 80a9414:	080c5bc4 	.word	0x080c5bc4

080a9418 <StartUart2Task>:
 * @brief  Function implementing the Uart2Task thread.
 * @param  argument: Not used
 * @retval None
 */
void StartUart2Task(void *argument)
{
 80a9418:	b580      	push	{r7, lr}
 80a941a:	b0a2      	sub	sp, #136	; 0x88
 80a941c:	af00      	add	r7, sp, #0
 80a941e:	6078      	str	r0, [r7, #4]
  osStatus_t res;
  sensor_message_event_t sensor_msg_event;
  uint8_t uart_msg_q[UART_TX_CODE_LENGTH];

  for (;;) {
    res = osMessageQueueGet(Uart2MsgQHandle, uart_msg_q, 0, portMAX_DELAY);
 80a9420:	4b39      	ldr	r3, [pc, #228]	; (80a9508 <StartUart2Task+0xf0>)
 80a9422:	6818      	ldr	r0, [r3, #0]
 80a9424:	f107 0108 	add.w	r1, r7, #8
 80a9428:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a942c:	2200      	movs	r2, #0
 80a942e:	f00d f849 	bl	80b64c4 <osMessageQueueGet>
 80a9432:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
    printf("uart_rx_q: %s, size: %u \r\n", uart_msg_q, huart2.RxXferSize);
 80a9436:	4b35      	ldr	r3, [pc, #212]	; (80a950c <StartUart2Task+0xf4>)
 80a9438:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80a943a:	461a      	mov	r2, r3
 80a943c:	f107 0308 	add.w	r3, r7, #8
 80a9440:	4619      	mov	r1, r3
 80a9442:	4833      	ldr	r0, [pc, #204]	; (80a9510 <StartUart2Task+0xf8>)
 80a9444:	f017 fa96 	bl	80c0974 <iprintf>
    if (uart_msg_q[0] == 0xAA && uart_msg_q[1] == 0x55) {
 80a9448:	7a3b      	ldrb	r3, [r7, #8]
 80a944a:	2baa      	cmp	r3, #170	; 0xaa
 80a944c:	d12b      	bne.n	80a94a6 <StartUart2Task+0x8e>
 80a944e:	7a7b      	ldrb	r3, [r7, #9]
 80a9450:	2b55      	cmp	r3, #85	; 0x55
 80a9452:	d128      	bne.n	80a94a6 <StartUart2Task+0x8e>
      //printf("uart2 rx size: %u \r\n", huart2.RxXferSize);
      if (sensor_avaiable_check(uart_msg_q[2])) {
 80a9454:	7abb      	ldrb	r3, [r7, #10]
 80a9456:	4618      	mov	r0, r3
 80a9458:	f003 fa90 	bl	80ac97c <sensor_avaiable_check>
 80a945c:	4603      	mov	r3, r0
 80a945e:	2b00      	cmp	r3, #0
 80a9460:	d04d      	beq.n	80a94fe <StartUart2Task+0xe6>
        switch (uart_msg_q[3]) {
 80a9462:	7afb      	ldrb	r3, [r7, #11]
 80a9464:	2b02      	cmp	r3, #2
 80a9466:	d005      	beq.n	80a9474 <StartUart2Task+0x5c>
 80a9468:	2b02      	cmp	r3, #2
 80a946a:	dc05      	bgt.n	80a9478 <StartUart2Task+0x60>
 80a946c:	2b00      	cmp	r3, #0
 80a946e:	d005      	beq.n	80a947c <StartUart2Task+0x64>
 80a9470:	2b01      	cmp	r3, #1
          break;
        case SENSOR_CONFIG_SELFTEST:
          break;
        default:
          //do nothing
          break;
 80a9472:	e001      	b.n	80a9478 <StartUart2Task+0x60>
          break;
 80a9474:	bf00      	nop
 80a9476:	e002      	b.n	80a947e <StartUart2Task+0x66>
          break;
 80a9478:	bf00      	nop
 80a947a:	e000      	b.n	80a947e <StartUart2Task+0x66>
          break;
 80a947c:	bf00      	nop
        }
        sensor_msg_event.message_event_type = SENSOR_CONFIG_MESSAGE;
 80a947e:	2300      	movs	r3, #0
 80a9480:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        sensor_msg_event.message_event_t.config_event.config_type =
            uart_msg_q[3];
 80a9484:	7afb      	ldrb	r3, [r7, #11]
        sensor_msg_event.message_event_t.config_event.config_type =
 80a9486:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
        sensor_msg_event.message_event_t.config_event.sensor_type =
            uart_msg_q[2];
 80a948a:	7abb      	ldrb	r3, [r7, #10]
        sensor_msg_event.message_event_t.config_event.sensor_type =
 80a948c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        res = osMessageQueuePut(SensorMsgQHandle, &sensor_msg_event, 0, 0);
 80a9490:	4b20      	ldr	r3, [pc, #128]	; (80a9514 <StartUart2Task+0xfc>)
 80a9492:	6818      	ldr	r0, [r3, #0]
 80a9494:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80a9498:	2300      	movs	r3, #0
 80a949a:	2200      	movs	r2, #0
 80a949c:	f00c ffb2 	bl	80b6404 <osMessageQueuePut>
 80a94a0:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
      if (sensor_avaiable_check(uart_msg_q[2])) {
 80a94a4:	e02b      	b.n	80a94fe <StartUart2Task+0xe6>
      }
    } else if (uart_msg_q[0] == 0x5A && uart_msg_q[1] == 0xA5) {
 80a94a6:	7a3b      	ldrb	r3, [r7, #8]
 80a94a8:	2b5a      	cmp	r3, #90	; 0x5a
 80a94aa:	d10e      	bne.n	80a94ca <StartUart2Task+0xb2>
 80a94ac:	7a7b      	ldrb	r3, [r7, #9]
 80a94ae:	2ba5      	cmp	r3, #165	; 0xa5
 80a94b0:	d10b      	bne.n	80a94ca <StartUart2Task+0xb2>
      HAL_RetStaus =
          HAL_UART_Transmit(&huart2, uart_msg_q, UART_TX_CODE_LENGTH, 0xFFFF);
 80a94b2:	f107 0108 	add.w	r1, r7, #8
 80a94b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80a94ba:	221d      	movs	r2, #29
 80a94bc:	4813      	ldr	r0, [pc, #76]	; (80a950c <StartUart2Task+0xf4>)
 80a94be:	f00b fda8 	bl	80b5012 <HAL_UART_Transmit>
 80a94c2:	4603      	mov	r3, r0
 80a94c4:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
      HAL_RetStaus =
 80a94c8:	e019      	b.n	80a94fe <StartUart2Task+0xe6>
    } else if (uart_msg_q[0] == 0xA5 && uart_msg_q[1] == 0x5A) {
 80a94ca:	7a3b      	ldrb	r3, [r7, #8]
 80a94cc:	2ba5      	cmp	r3, #165	; 0xa5
 80a94ce:	d115      	bne.n	80a94fc <StartUart2Task+0xe4>
 80a94d0:	7a7b      	ldrb	r3, [r7, #9]
 80a94d2:	2b5a      	cmp	r3, #90	; 0x5a
 80a94d4:	d112      	bne.n	80a94fc <StartUart2Task+0xe4>
      switch (uart_msg_q[2]) {
 80a94d6:	7abb      	ldrb	r3, [r7, #10]
 80a94d8:	2b00      	cmp	r3, #0
 80a94da:	d107      	bne.n	80a94ec <StartUart2Task+0xd4>
      case 0:
        uart_log_print_enable = false;
 80a94dc:	4b0e      	ldr	r3, [pc, #56]	; (80a9518 <StartUart2Task+0x100>)
 80a94de:	2200      	movs	r2, #0
 80a94e0:	701a      	strb	r2, [r3, #0]
        platformInitPrams.use_uart_mode = 1;
 80a94e2:	4b0e      	ldr	r3, [pc, #56]	; (80a951c <StartUart2Task+0x104>)
 80a94e4:	2201      	movs	r2, #1
 80a94e6:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
        //HAL_UART_Receive_DMA(&huart2, uart_msg_code, UART_RX_CODE_LENGTH);
        break;
 80a94ea:	e008      	b.n	80a94fe <StartUart2Task+0xe6>
      default:
        uart_log_print_enable = true;
 80a94ec:	4b0a      	ldr	r3, [pc, #40]	; (80a9518 <StartUart2Task+0x100>)
 80a94ee:	2201      	movs	r2, #1
 80a94f0:	701a      	strb	r2, [r3, #0]
        platformInitPrams.use_uart_mode = 0;
 80a94f2:	4b0a      	ldr	r3, [pc, #40]	; (80a951c <StartUart2Task+0x104>)
 80a94f4:	2200      	movs	r2, #0
 80a94f6:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
        break;
 80a94fa:	e000      	b.n	80a94fe <StartUart2Task+0xe6>
      }
    }
 80a94fc:	bf00      	nop
    osDelay(1);
 80a94fe:	2001      	movs	r0, #1
 80a9500:	f00c fdfb 	bl	80b60fa <osDelay>
    res = osMessageQueueGet(Uart2MsgQHandle, uart_msg_q, 0, portMAX_DELAY);
 80a9504:	e78c      	b.n	80a9420 <StartUart2Task+0x8>
 80a9506:	bf00      	nop
 80a9508:	2001bf70 	.word	0x2001bf70
 80a950c:	2001c254 	.word	0x2001c254
 80a9510:	080c5be4 	.word	0x080c5be4
 80a9514:	2001bec8 	.word	0x2001bec8
 80a9518:	2000788c 	.word	0x2000788c
 80a951c:	2001c008 	.word	0x2001c008

080a9520 <StartSensorManagerTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartSensorManagerTask */
void StartSensorManagerTask(void *argument)
{
 80a9520:	b590      	push	{r4, r7, lr}
 80a9522:	b0c5      	sub	sp, #276	; 0x114
 80a9524:	af04      	add	r7, sp, #16
 80a9526:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for (;;) {
    //printf("waiting for sensor_msg_event \r\n");
    res =
        osMessageQueueGet(SensorMsgQHandle, &sensor_msg_event, 0,
 80a9528:	4b91      	ldr	r3, [pc, #580]	; (80a9770 <StartSensorManagerTask+0x250>)
 80a952a:	6818      	ldr	r0, [r3, #0]
 80a952c:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80a9530:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a9534:	2200      	movs	r2, #0
 80a9536:	f00c ffc5 	bl	80b64c4 <osMessageQueueGet>
 80a953a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
                          portMAX_DELAY);
    if (res) {
 80a953e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80a9542:	2b00      	cmp	r3, #0
 80a9544:	d001      	beq.n	80a954a <StartSensorManagerTask+0x2a>
      /* osMessageQueueGet Error */
      Error_Handler();
 80a9546:	f000 fae7 	bl	80a9b18 <Error_Handler>
    }
    //printf("smgr event: %d \r\n", sensor_msg_event.message_event_type);

    switch (sensor_msg_event.message_event_type) {
 80a954a:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 80a954e:	2b0d      	cmp	r3, #13
 80a9550:	f200 8109 	bhi.w	80a9766 <StartSensorManagerTask+0x246>
 80a9554:	a201      	add	r2, pc, #4	; (adr r2, 80a955c <StartSensorManagerTask+0x3c>)
 80a9556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80a955a:	bf00      	nop
 80a955c:	080a9595 	.word	0x080a9595
 80a9560:	080a9767 	.word	0x080a9767
 80a9564:	080a9767 	.word	0x080a9767
 80a9568:	080a9697 	.word	0x080a9697
 80a956c:	080a9767 	.word	0x080a9767
 80a9570:	080a9767 	.word	0x080a9767
 80a9574:	080a9767 	.word	0x080a9767
 80a9578:	080a9595 	.word	0x080a9595
 80a957c:	080a95d7 	.word	0x080a95d7
 80a9580:	080a961f 	.word	0x080a961f
 80a9584:	080a9685 	.word	0x080a9685
 80a9588:	080a965f 	.word	0x080a965f
 80a958c:	080a9673 	.word	0x080a9673
 80a9590:	080a972d 	.word	0x080a972d
    case SENSOR_DEBUG_CONFIG_MSG:
    case SENSOR_CONFIG_MESSAGE:
      //check sensor type and decide to enable timer
      if (!board_init_complete) {
 80a9594:	4b77      	ldr	r3, [pc, #476]	; (80a9774 <StartSensorManagerTask+0x254>)
 80a9596:	781b      	ldrb	r3, [r3, #0]
 80a9598:	f083 0301 	eor.w	r3, r3, #1
 80a959c:	b2db      	uxtb	r3, r3
 80a959e:	2b00      	cmp	r3, #0
 80a95a0:	d00a      	beq.n	80a95b8 <StartSensorManagerTask+0x98>
        //if init is not completed re-add this message to SensorMsgQ
        res = osMessageQueuePut(SensorMsgQHandle, &sensor_msg_event, 0, 0);
 80a95a2:	4b73      	ldr	r3, [pc, #460]	; (80a9770 <StartSensorManagerTask+0x250>)
 80a95a4:	6818      	ldr	r0, [r3, #0]
 80a95a6:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80a95aa:	2300      	movs	r3, #0
 80a95ac:	2200      	movs	r2, #0
 80a95ae:	f00c ff29 	bl	80b6404 <osMessageQueuePut>
 80a95b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
        break;
 80a95b6:	e0d7      	b.n	80a9768 <StartSensorManagerTask+0x248>
      }
      ret = sensor_config(sensor_msg_event.message_event_t.config_event);
 80a95b8:	466c      	mov	r4, sp
 80a95ba:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80a95be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80a95c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80a95c6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80a95ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80a95cc:	f003 fb7e 	bl	80acccc <sensor_config>
 80a95d0:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
      break;
 80a95d4:	e0c8      	b.n	80a9768 <StartSensorManagerTask+0x248>
    case SENSOR_TIMER_EVENT:
      if (sensor_msg_event.message_event_t.timer_event.timer_num == 1) {
 80a95d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80a95da:	2b01      	cmp	r3, #1
 80a95dc:	d104      	bne.n	80a95e8 <StartSensorManagerTask+0xc8>
        //os common timer for data polling
        ret = sensor_timer_handler();
 80a95de:	f003 ffbd 	bl	80ad55c <sensor_timer_handler>
 80a95e2:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
        config_event_t sensor_cfg_event = { 0 };
        sensor_cfg_event.config_type = SENSOR_CONFIG_TIMEOUT;
        //printf("timeout config event! %u\r\n", osKernelGetTickCount());
        ret = sensor_config(sensor_cfg_event);
      }
      break;
 80a95e6:	e0bf      	b.n	80a9768 <StartSensorManagerTask+0x248>
        config_event_t sensor_cfg_event = { 0 };
 80a95e8:	f107 0308 	add.w	r3, r7, #8
 80a95ec:	2200      	movs	r2, #0
 80a95ee:	601a      	str	r2, [r3, #0]
 80a95f0:	605a      	str	r2, [r3, #4]
 80a95f2:	609a      	str	r2, [r3, #8]
 80a95f4:	60da      	str	r2, [r3, #12]
 80a95f6:	611a      	str	r2, [r3, #16]
 80a95f8:	615a      	str	r2, [r3, #20]
 80a95fa:	619a      	str	r2, [r3, #24]
        sensor_cfg_event.config_type = SENSOR_CONFIG_TIMEOUT;
 80a95fc:	2306      	movs	r3, #6
 80a95fe:	727b      	strb	r3, [r7, #9]
        ret = sensor_config(sensor_cfg_event);
 80a9600:	466c      	mov	r4, sp
 80a9602:	f107 0318 	add.w	r3, r7, #24
 80a9606:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80a960a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80a960e:	f107 0308 	add.w	r3, r7, #8
 80a9612:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80a9614:	f003 fb5a 	bl	80acccc <sensor_config>
 80a9618:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
      break;
 80a961c:	e0a4      	b.n	80a9768 <StartSensorManagerTask+0x248>
    case SENSOR_INTERRUPT_EVENT:
      if (!board_init_complete) {
 80a961e:	4b55      	ldr	r3, [pc, #340]	; (80a9774 <StartSensorManagerTask+0x254>)
 80a9620:	781b      	ldrb	r3, [r3, #0]
 80a9622:	f083 0301 	eor.w	r3, r3, #1
 80a9626:	b2db      	uxtb	r3, r3
 80a9628:	2b00      	cmp	r3, #0
 80a962a:	d00a      	beq.n	80a9642 <StartSensorManagerTask+0x122>
        //if init is not completed re-add this message to SensorMsgQ
        res = osMessageQueuePut(SensorMsgQHandle, &sensor_msg_event, 0, 0);
 80a962c:	4b50      	ldr	r3, [pc, #320]	; (80a9770 <StartSensorManagerTask+0x250>)
 80a962e:	6818      	ldr	r0, [r3, #0]
 80a9630:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80a9634:	2300      	movs	r3, #0
 80a9636:	2200      	movs	r2, #0
 80a9638:	f00c fee4 	bl	80b6404 <osMessageQueuePut>
 80a963c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
        break;
 80a9640:	e092      	b.n	80a9768 <StartSensorManagerTask+0x248>
      }
      printf("interrupt event %d!\r\n",
 80a9642:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80a9646:	4619      	mov	r1, r3
 80a9648:	484b      	ldr	r0, [pc, #300]	; (80a9778 <StartSensorManagerTask+0x258>)
 80a964a:	f017 f993 	bl	80c0974 <iprintf>
             sensor_msg_event.message_event_t.interrupt_event.interrupt_num);
      ret =
          sensor_irq_handler(sensor_msg_event.message_event_t.interrupt_event);
 80a964e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80a9652:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80a9654:	f003 ffda 	bl	80ad60c <sensor_irq_handler>
 80a9658:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
      break;
 80a965c:	e084      	b.n	80a9768 <StartSensorManagerTask+0x248>
    case SENSOR_DATA_MESSAGE:
      //data message may come from can2 on other stm32 chip
      break;
    case SENSOR_ACTIVATE_COMPLETE_EVENT:
      printf("$$$activate done!\r\n");
 80a965e:	4847      	ldr	r0, [pc, #284]	; (80a977c <StartSensorManagerTask+0x25c>)
 80a9660:	f017 fa24 	bl	80c0aac <puts>
      osTimerStart(DataTimerHandle, DEFAULE_SAMPLE_RATE_MS);
 80a9664:	4b46      	ldr	r3, [pc, #280]	; (80a9780 <StartSensorManagerTask+0x260>)
 80a9666:	681b      	ldr	r3, [r3, #0]
 80a9668:	2114      	movs	r1, #20
 80a966a:	4618      	mov	r0, r3
 80a966c:	f00c fdf2 	bl	80b6254 <osTimerStart>
      break;
 80a9670:	e07a      	b.n	80a9768 <StartSensorManagerTask+0x248>
    case SENSOR_DEACTIVATE_COMPLETE_EVENT:
      printf("###deactivate done!\r\n");
 80a9672:	4844      	ldr	r0, [pc, #272]	; (80a9784 <StartSensorManagerTask+0x264>)
 80a9674:	f017 fa1a 	bl	80c0aac <puts>
      osTimerStop(DataTimerHandle);
 80a9678:	4b41      	ldr	r3, [pc, #260]	; (80a9780 <StartSensorManagerTask+0x260>)
 80a967a:	681b      	ldr	r3, [r3, #0]
 80a967c:	4618      	mov	r0, r3
 80a967e:	f00c fe17 	bl	80b62b0 <osTimerStop>
      break;
 80a9682:	e071      	b.n	80a9768 <StartSensorManagerTask+0x248>
    case SENSOR_INIT_COMPLETE_EVENT:
      printf
 80a9684:	2250      	movs	r2, #80	; 0x50
 80a9686:	2158      	movs	r1, #88	; 0x58
 80a9688:	483f      	ldr	r0, [pc, #252]	; (80a9788 <StartSensorManagerTask+0x268>)
 80a968a:	f017 f973 	bl	80c0974 <iprintf>
          ("@@@init done! sizeof sensor_message_event_t: %d, sensors_event_t: %d \r\n",
           sizeof(sensor_message_event_t), sizeof(sensors_event_t));
      //sensor_mainboard_check();
      board_init_complete = true;
 80a968e:	4b39      	ldr	r3, [pc, #228]	; (80a9774 <StartSensorManagerTask+0x254>)
 80a9690:	2201      	movs	r2, #1
 80a9692:	701a      	strb	r2, [r3, #0]
      break;
 80a9694:	e068      	b.n	80a9768 <StartSensorManagerTask+0x248>
    case SENSOR_CONFIG_RESP_MESSAGE:
      printf("***config resp msg!\r\n");
 80a9696:	483d      	ldr	r0, [pc, #244]	; (80a978c <StartSensorManagerTask+0x26c>)
 80a9698:	f017 fa08 	bl	80c0aac <puts>
      if (sensor_msg_event.message_event_t.resp_event.config_type ==
 80a969c:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 80a96a0:	2b03      	cmp	r3, #3
 80a96a2:	d114      	bne.n	80a96ce <StartSensorManagerTask+0x1ae>
          SENSOR_CONFIG_CALIBRATION) {
        if (sensor_msg_event.message_event_t.resp_event.cfg_data.resp_data[0] ==
 80a96a4:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80a96a8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80a96ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80a96b0:	d109      	bne.n	80a96c6 <StartSensorManagerTask+0x1a6>
            0) {
          //update flash to store calibration data
          update_calibration_data_to_flash(platformInitPrams.board_calidata);
 80a96b2:	4b37      	ldr	r3, [pc, #220]	; (80a9790 <StartSensorManagerTask+0x270>)
 80a96b4:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80a96b8:	4618      	mov	r0, r3
 80a96ba:	f7f9 fe0d 	bl	80a32d8 <update_calibration_data_to_flash>
          can_event_t.CanData.TxData[0] = 1;
 80a96be:	2301      	movs	r3, #1
 80a96c0:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
 80a96c4:	e015      	b.n	80a96f2 <StartSensorManagerTask+0x1d2>
        } else {
          can_event_t.CanData.TxData[0] = 0;
 80a96c6:	2300      	movs	r3, #0
 80a96c8:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
 80a96cc:	e011      	b.n	80a96f2 <StartSensorManagerTask+0x1d2>
        }
      } else if (sensor_msg_event.message_event_t.resp_event.config_type ==
 80a96ce:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 80a96d2:	2b02      	cmp	r3, #2
 80a96d4:	d10d      	bne.n	80a96f2 <StartSensorManagerTask+0x1d2>
                 SENSOR_CONFIG_SELFTEST) {
        if (sensor_msg_event.message_event_t.resp_event.cfg_data.resp_data[0] ==
 80a96d6:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80a96da:	eef5 7a40 	vcmp.f32	s15, #0.0
 80a96de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80a96e2:	d103      	bne.n	80a96ec <StartSensorManagerTask+0x1cc>
            0) {
          can_event_t.CanData.TxData[0] = 1;
 80a96e4:	2301      	movs	r3, #1
 80a96e6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
 80a96ea:	e002      	b.n	80a96f2 <StartSensorManagerTask+0x1d2>
        } else {
          can_event_t.CanData.TxData[0] = 0;
 80a96ec:	2300      	movs	r3, #0
 80a96ee:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
        }
      }
      //return to can1 when receive cfg resp message stands for calibration success
      can_event_t.CanHeader.TxHeader.StdId =
          (SENSOR_CONFIG_RESP_MESSAGE << SENSOR_EVENT_MESSAGE_BIT_SHIFT)
          | (sensor_msg_event.message_event_t.resp_event.
 80a96f2:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
             sensor_type << SENSOR_TYPE_BIT_SHIFT)
 80a96f6:	011b      	lsls	r3, r3, #4
          | (sensor_msg_event.message_event_t.resp_event.
 80a96f8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
          | sensor_msg_event.message_event_t.resp_event.config_type;
 80a96fc:	f897 20a9 	ldrb.w	r2, [r7, #169]	; 0xa9
 80a9700:	4313      	orrs	r3, r2
      can_event_t.CanHeader.TxHeader.StdId =
 80a9702:	62fb      	str	r3, [r7, #44]	; 0x2c
      can_event_t.CanHeader.TxHeader.ExtId = 0x0;
 80a9704:	2300      	movs	r3, #0
 80a9706:	633b      	str	r3, [r7, #48]	; 0x30
      can_event_t.CanHeader.TxHeader.RTR = CAN_RTR_DATA;
 80a9708:	2300      	movs	r3, #0
 80a970a:	63bb      	str	r3, [r7, #56]	; 0x38
      can_event_t.CanHeader.TxHeader.IDE = CAN_ID_STD;
 80a970c:	2300      	movs	r3, #0
 80a970e:	637b      	str	r3, [r7, #52]	; 0x34
      can_event_t.CanHeader.TxHeader.DLC = 8;
 80a9710:	2308      	movs	r3, #8
 80a9712:	63fb      	str	r3, [r7, #60]	; 0x3c
      can_event_t.CanHeader.TxHeader.TransmitGlobalTime = DISABLE;
 80a9714:	2300      	movs	r3, #0
 80a9716:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
      osMessageQueuePut(Can1BroadcastQHandle, &can_event_t, 0, 0);
 80a971a:	4b1e      	ldr	r3, [pc, #120]	; (80a9794 <StartSensorManagerTask+0x274>)
 80a971c:	6818      	ldr	r0, [r3, #0]
 80a971e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80a9722:	2300      	movs	r3, #0
 80a9724:	2200      	movs	r2, #0
 80a9726:	f00c fe6d 	bl	80b6404 <osMessageQueuePut>
      break;
 80a972a:	e01d      	b.n	80a9768 <StartSensorManagerTask+0x248>
    case SENSOR_BUS_ERROR_EVENT:
      can_event_t.CanHeader.TxHeader.StdId =
        (SENSOR_DEBUG_CONFIG_MSG << SENSOR_EVENT_MESSAGE_BIT_SHIFT)
        | (sensor_msg_event.message_event_t.resp_event.
 80a972c:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
           sensor_type << SENSOR_TYPE_BIT_SHIFT)
 80a9730:	011b      	lsls	r3, r3, #4
        | (sensor_msg_event.message_event_t.resp_event.
 80a9732:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
        | sensor_msg_event.message_event_t.resp_event.config_type;
 80a9736:	f897 20a9 	ldrb.w	r2, [r7, #169]	; 0xa9
 80a973a:	4313      	orrs	r3, r2
      can_event_t.CanHeader.TxHeader.StdId =
 80a973c:	62fb      	str	r3, [r7, #44]	; 0x2c
      can_event_t.CanHeader.TxHeader.ExtId = 0x0;
 80a973e:	2300      	movs	r3, #0
 80a9740:	633b      	str	r3, [r7, #48]	; 0x30
      can_event_t.CanHeader.TxHeader.RTR = CAN_RTR_DATA;
 80a9742:	2300      	movs	r3, #0
 80a9744:	63bb      	str	r3, [r7, #56]	; 0x38
      can_event_t.CanHeader.TxHeader.IDE = CAN_ID_STD;
 80a9746:	2300      	movs	r3, #0
 80a9748:	637b      	str	r3, [r7, #52]	; 0x34
      can_event_t.CanHeader.TxHeader.DLC = 8;
 80a974a:	2308      	movs	r3, #8
 80a974c:	63fb      	str	r3, [r7, #60]	; 0x3c
      can_event_t.CanHeader.TxHeader.TransmitGlobalTime = DISABLE;
 80a974e:	2300      	movs	r3, #0
 80a9750:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
      osMessageQueuePut(Can1BroadcastQHandle, &can_event_t, 0, 0);
 80a9754:	4b0f      	ldr	r3, [pc, #60]	; (80a9794 <StartSensorManagerTask+0x274>)
 80a9756:	6818      	ldr	r0, [r3, #0]
 80a9758:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80a975c:	2300      	movs	r3, #0
 80a975e:	2200      	movs	r2, #0
 80a9760:	f00c fe50 	bl	80b6404 <osMessageQueuePut>
      break;
 80a9764:	e000      	b.n	80a9768 <StartSensorManagerTask+0x248>
    default:
      break;
 80a9766:	bf00      	nop
    }

    osDelay(1);
 80a9768:	2001      	movs	r0, #1
 80a976a:	f00c fcc6 	bl	80b60fa <osDelay>
    res =
 80a976e:	e6db      	b.n	80a9528 <StartSensorManagerTask+0x8>
 80a9770:	2001bec8 	.word	0x2001bec8
 80a9774:	20008090 	.word	0x20008090
 80a9778:	080c5c00 	.word	0x080c5c00
 80a977c:	080c5c18 	.word	0x080c5c18
 80a9780:	2001c1ac 	.word	0x2001c1ac
 80a9784:	080c5c2c 	.word	0x080c5c2c
 80a9788:	080c5c44 	.word	0x080c5c44
 80a978c:	080c5c8c 	.word	0x080c5c8c
 80a9790:	2001c008 	.word	0x2001c008
 80a9794:	2001c004 	.word	0x2001c004

080a9798 <StartSensorDataProcesser>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartSensorDataProcesser */
void StartSensorDataProcesser(void *argument)
{
 80a9798:	b580      	push	{r7, lr}
 80a979a:	b0a8      	sub	sp, #160	; 0xa0
 80a979c:	af00      	add	r7, sp, #0
 80a979e:	6078      	str	r0, [r7, #4]
  // we use sensor data proc to update all sensor results to can1 broadcast task
  // sensor data proc is also used for fusion algo calc
  /* Infinite loop */
  for (;;) {
    //printf("waiting for sensor data \r\n");
    res = osMessageQueueGet(SensorDataQHandle, &sensor_data, 0, portMAX_DELAY);
 80a97a0:	4b6c      	ldr	r3, [pc, #432]	; (80a9954 <StartSensorDataProcesser+0x1bc>)
 80a97a2:	6818      	ldr	r0, [r3, #0]
 80a97a4:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80a97a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a97ac:	2200      	movs	r2, #0
 80a97ae:	f00c fe89 	bl	80b64c4 <osMessageQueueGet>
 80a97b2:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
    if (!board_init_complete) {
 80a97b6:	4b68      	ldr	r3, [pc, #416]	; (80a9958 <StartSensorDataProcesser+0x1c0>)
 80a97b8:	781b      	ldrb	r3, [r3, #0]
 80a97ba:	f083 0301 	eor.w	r3, r3, #1
 80a97be:	b2db      	uxtb	r3, r3
 80a97c0:	2b00      	cmp	r3, #0
 80a97c2:	d00a      	beq.n	80a97da <StartSensorDataProcesser+0x42>
      //if init is not completed re-add this message to SensorMsgQ
      res = osMessageQueuePut(SensorDataQHandle, &sensor_data, 0, 0);
 80a97c4:	4b63      	ldr	r3, [pc, #396]	; (80a9954 <StartSensorDataProcesser+0x1bc>)
 80a97c6:	6818      	ldr	r0, [r3, #0]
 80a97c8:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80a97cc:	2300      	movs	r3, #0
 80a97ce:	2200      	movs	r2, #0
 80a97d0:	f00c fe18 	bl	80b6404 <osMessageQueuePut>
 80a97d4:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
      continue;
 80a97d8:	e0bb      	b.n	80a9952 <StartSensorDataProcesser+0x1ba>
    }
    ret = sensor_data_handler(&sensor_data);
 80a97da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80a97de:	4618      	mov	r0, r3
 80a97e0:	f003 ff4a 	bl	80ad678 <sensor_data_handler>
 80a97e4:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
    if (((CAN1_ENABLED_SENSORBIT >> sensor_data.sensor_type) & 1)
 80a97e8:	4b5c      	ldr	r3, [pc, #368]	; (80a995c <StartSensorDataProcesser+0x1c4>)
 80a97ea:	881b      	ldrh	r3, [r3, #0]
 80a97ec:	461a      	mov	r2, r3
 80a97ee:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80a97f2:	fa42 f303 	asr.w	r3, r2, r3
 80a97f6:	f003 0301 	and.w	r3, r3, #1
 80a97fa:	2b00      	cmp	r3, #0
 80a97fc:	d117      	bne.n	80a982e <StartSensorDataProcesser+0x96>
        || ((CAN1_ENABLED_SENSORBIT >> SENSOR_TYPE_MAX) & 1)
 80a97fe:	4b57      	ldr	r3, [pc, #348]	; (80a995c <StartSensorDataProcesser+0x1c4>)
 80a9800:	881b      	ldrh	r3, [r3, #0]
 80a9802:	0bdb      	lsrs	r3, r3, #15
 80a9804:	b29b      	uxth	r3, r3
 80a9806:	f003 0301 	and.w	r3, r3, #1
 80a980a:	2b00      	cmp	r3, #0
 80a980c:	d10f      	bne.n	80a982e <StartSensorDataProcesser+0x96>
        || (sensor_data.accuracy == 0xFF)
 80a980e:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80a9812:	2bff      	cmp	r3, #255	; 0xff
 80a9814:	d00b      	beq.n	80a982e <StartSensorDataProcesser+0x96>
        || ((CAN1_GET_CALI_SENSORBIT >> sensor_data.sensor_type) & 1)) {
 80a9816:	4b52      	ldr	r3, [pc, #328]	; (80a9960 <StartSensorDataProcesser+0x1c8>)
 80a9818:	881b      	ldrh	r3, [r3, #0]
 80a981a:	461a      	mov	r2, r3
 80a981c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80a9820:	fa42 f303 	asr.w	r3, r2, r3
 80a9824:	f003 0301 	and.w	r3, r3, #1
 80a9828:	2b00      	cmp	r3, #0
 80a982a:	f000 808f 	beq.w	80a994c <StartSensorDataProcesser+0x1b4>
      data[0] = sensor_data.sensor_data_t.vec.data[0];
 80a982e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80a9830:	633b      	str	r3, [r7, #48]	; 0x30
      data[1] = sensor_data.sensor_data_t.vec.data[1];
 80a9832:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80a9834:	637b      	str	r3, [r7, #52]	; 0x34
      data[2] = sensor_data.sensor_data_t.vec.data[2];
 80a9836:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80a9838:	63bb      	str	r3, [r7, #56]	; 0x38
      data[3] = sensor_data.sensor_data_t.vec.data[3];
 80a983a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80a983c:	63fb      	str	r3, [r7, #60]	; 0x3c
      //printf("DataQ %d { %f, %f, %f, %f} \r\n", sensor_data.sensor_type, data[0], data[1], data[2], data[3]);
      //printf("u8: %d, float: %d, uint64_t: %d \r\n", sizeof(uint8_t), sizeof(float), sizeof(uint64_t));
      data_size = sensor_get_index_length(sensor_data.sensor_type);
 80a983e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80a9842:	4618      	mov	r0, r3
 80a9844:	f003 f8be 	bl	80ac9c4 <sensor_get_index_length>
 80a9848:	4603      	mov	r3, r0
 80a984a:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
      if (data_size != 0xFF) {
 80a984e:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80a9852:	2bff      	cmp	r3, #255	; 0xff
 80a9854:	d05f      	beq.n	80a9916 <StartSensorDataProcesser+0x17e>
        for (int i = 0; i < data_size; i++) {
 80a9856:	2300      	movs	r3, #0
 80a9858:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80a985c:	e02e      	b.n	80a98bc <StartSensorDataProcesser+0x124>
          can_event_t.CanHeader.TxHeader.StdId =
              (SENSOR_DATA_MESSAGE << SENSOR_EVENT_MESSAGE_BIT_SHIFT)
              | (sensor_data.sensor_type << SENSOR_TYPE_BIT_SHIFT)
 80a985e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80a9862:	011b      	lsls	r3, r3, #4
 80a9864:	f443 7280 	orr.w	r2, r3, #256	; 0x100
              | data_size;
 80a9868:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80a986c:	4313      	orrs	r3, r2
          can_event_t.CanHeader.TxHeader.StdId =
 80a986e:	60fb      	str	r3, [r7, #12]
          can_event_t.CanHeader.TxHeader.ExtId = 0x0;
 80a9870:	2300      	movs	r3, #0
 80a9872:	613b      	str	r3, [r7, #16]
          can_event_t.CanHeader.TxHeader.RTR = CAN_RTR_DATA;
 80a9874:	2300      	movs	r3, #0
 80a9876:	61bb      	str	r3, [r7, #24]
          can_event_t.CanHeader.TxHeader.IDE = CAN_ID_STD;
 80a9878:	2300      	movs	r3, #0
 80a987a:	617b      	str	r3, [r7, #20]
          can_event_t.CanHeader.TxHeader.DLC = 8;
 80a987c:	2308      	movs	r3, #8
 80a987e:	61fb      	str	r3, [r7, #28]
          can_event_t.CanHeader.TxHeader.TransmitGlobalTime = DISABLE;
 80a9880:	2300      	movs	r3, #0
 80a9882:	f887 3020 	strb.w	r3, [r7, #32]
          can_event_t.CanData.TxData[0] = i;
 80a9886:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80a988a:	b2db      	uxtb	r3, r3
 80a988c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
          memcpy(&can_event_t.CanData.TxData[1], &data[i], sizeof(float));
 80a9890:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80a9894:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80a9898:	009b      	lsls	r3, r3, #2
 80a989a:	4413      	add	r3, r2
 80a989c:	681b      	ldr	r3, [r3, #0]
 80a989e:	f8c7 3029 	str.w	r3, [r7, #41]	; 0x29
#if USE_P1
          osMessageQueuePut(Can1BroadcastQHandle, &can_event_t, 0, 0);
 80a98a2:	4b30      	ldr	r3, [pc, #192]	; (80a9964 <StartSensorDataProcesser+0x1cc>)
 80a98a4:	6818      	ldr	r0, [r3, #0]
 80a98a6:	f107 010c 	add.w	r1, r7, #12
 80a98aa:	2300      	movs	r3, #0
 80a98ac:	2200      	movs	r2, #0
 80a98ae:	f00c fda9 	bl	80b6404 <osMessageQueuePut>
        for (int i = 0; i < data_size; i++) {
 80a98b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80a98b6:	3301      	adds	r3, #1
 80a98b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80a98bc:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80a98c0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80a98c4:	429a      	cmp	r2, r3
 80a98c6:	dbca      	blt.n	80a985e <StartSensorDataProcesser+0xc6>
#endif
        }
        //add timestamp message to list-tail: Todo, check if this kind of method can be used
        can_event_t.CanHeader.TxHeader.StdId =
            (SENSOR_TIMESTAMP_MESSAGE << SENSOR_EVENT_MESSAGE_BIT_SHIFT)
            | (sensor_data.sensor_type << SENSOR_TYPE_BIT_SHIFT)
 80a98c8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80a98cc:	011b      	lsls	r3, r3, #4
 80a98ce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
            | data_size;
 80a98d2:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80a98d6:	4313      	orrs	r3, r2
        can_event_t.CanHeader.TxHeader.StdId =
 80a98d8:	60fb      	str	r3, [r7, #12]
        can_event_t.CanHeader.TxHeader.ExtId = 0x0;
 80a98da:	2300      	movs	r3, #0
 80a98dc:	613b      	str	r3, [r7, #16]
        can_event_t.CanHeader.TxHeader.RTR = CAN_RTR_DATA;
 80a98de:	2300      	movs	r3, #0
 80a98e0:	61bb      	str	r3, [r7, #24]
        can_event_t.CanHeader.TxHeader.IDE = CAN_ID_STD;
 80a98e2:	2300      	movs	r3, #0
 80a98e4:	617b      	str	r3, [r7, #20]
        can_event_t.CanHeader.TxHeader.DLC = 8;
 80a98e6:	2308      	movs	r3, #8
 80a98e8:	61fb      	str	r3, [r7, #28]
        can_event_t.CanHeader.TxHeader.TransmitGlobalTime = DISABLE;
 80a98ea:	2300      	movs	r3, #0
 80a98ec:	f887 3020 	strb.w	r3, [r7, #32]
        memcpy(&can_event_t.CanData.TxData[0], &sensor_data.timestamp, sizeof(uint64_t));       //add timestamp here to userd
 80a98f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80a98f4:	f103 0108 	add.w	r1, r3, #8
 80a98f8:	f107 030c 	add.w	r3, r7, #12
 80a98fc:	331c      	adds	r3, #28
 80a98fe:	2208      	movs	r2, #8
 80a9900:	4618      	mov	r0, r3
 80a9902:	f016 fb4d 	bl	80bffa0 <memcpy>
#if USE_P1
        osMessageQueuePut(Can1BroadcastQHandle, &can_event_t, 0, 0);
 80a9906:	4b17      	ldr	r3, [pc, #92]	; (80a9964 <StartSensorDataProcesser+0x1cc>)
 80a9908:	6818      	ldr	r0, [r3, #0]
 80a990a:	f107 010c 	add.w	r1, r7, #12
 80a990e:	2300      	movs	r3, #0
 80a9910:	2200      	movs	r2, #0
 80a9912:	f00c fd77 	bl	80b6404 <osMessageQueuePut>
#else
        osMessageQueuePut(Can2BroadcastQHandle, &can_event_t, 0, 0);
#endif
      }
      if ((CAN1_GET_CALI_SENSORBIT >> sensor_data.sensor_type) & 1) {
 80a9916:	4b12      	ldr	r3, [pc, #72]	; (80a9960 <StartSensorDataProcesser+0x1c8>)
 80a9918:	881b      	ldrh	r3, [r3, #0]
 80a991a:	461a      	mov	r2, r3
 80a991c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80a9920:	fa42 f303 	asr.w	r3, r2, r3
 80a9924:	f003 0301 	and.w	r3, r3, #1
 80a9928:	2b00      	cmp	r3, #0
 80a992a:	d00f      	beq.n	80a994c <StartSensorDataProcesser+0x1b4>
        CAN1_GET_CALI_SENSORBIT &= ~(1 << sensor_data.sensor_type);
 80a992c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80a9930:	461a      	mov	r2, r3
 80a9932:	2301      	movs	r3, #1
 80a9934:	4093      	lsls	r3, r2
 80a9936:	b21b      	sxth	r3, r3
 80a9938:	43db      	mvns	r3, r3
 80a993a:	b21a      	sxth	r2, r3
 80a993c:	4b08      	ldr	r3, [pc, #32]	; (80a9960 <StartSensorDataProcesser+0x1c8>)
 80a993e:	881b      	ldrh	r3, [r3, #0]
 80a9940:	b21b      	sxth	r3, r3
 80a9942:	4013      	ands	r3, r2
 80a9944:	b21b      	sxth	r3, r3
 80a9946:	b29a      	uxth	r2, r3
 80a9948:	4b05      	ldr	r3, [pc, #20]	; (80a9960 <StartSensorDataProcesser+0x1c8>)
 80a994a:	801a      	strh	r2, [r3, #0]
      }
    }
    osDelay(1);
 80a994c:	2001      	movs	r0, #1
 80a994e:	f00c fbd4 	bl	80b60fa <osDelay>
    res = osMessageQueueGet(SensorDataQHandle, &sensor_data, 0, portMAX_DELAY);
 80a9952:	e725      	b.n	80a97a0 <StartSensorDataProcesser+0x8>
 80a9954:	2001be08 	.word	0x2001be08
 80a9958:	20008090 	.word	0x20008090
 80a995c:	2000808c 	.word	0x2000808c
 80a9960:	2000808e 	.word	0x2000808e
 80a9964:	2001c004 	.word	0x2001c004

080a9968 <StartInitTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartInitTask */
void StartInitTask(void *argument)
{
 80a9968:	b580      	push	{r7, lr}
 80a996a:	b0a6      	sub	sp, #152	; 0x98
 80a996c:	af00      	add	r7, sp, #0
 80a996e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  sensor_message_event_t sensor_msg_event;
  can_message_event_t can_event_t;
  osStatus_t res;

  init_registered_sensors();
 80a9970:	f003 f89c 	bl	80acaac <init_registered_sensors>

  //update related sensor calibration data
  sensor_msg_event.message_event_type = SENSOR_CONFIG_MESSAGE;
 80a9974:	2300      	movs	r3, #0
 80a9976:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  sensor_msg_event.message_event_t.config_event.config_type =
 80a997a:	2304      	movs	r3, #4
 80a997c:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
      SENSOR_CONFIG_BIAS;
  sensor_msg_event.message_event_t.config_event.sensor_type =
 80a9980:	2300      	movs	r3, #0
 80a9982:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
      SENSOR_TYPE_ACCELEROMETER;
  res = osMessageQueuePut(SensorMsgQHandle, &sensor_msg_event, 0, 0);
 80a9986:	4b35      	ldr	r3, [pc, #212]	; (80a9a5c <StartInitTask+0xf4>)
 80a9988:	6818      	ldr	r0, [r3, #0]
 80a998a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80a998e:	2300      	movs	r3, #0
 80a9990:	2200      	movs	r2, #0
 80a9992:	f00c fd37 	bl	80b6404 <osMessageQueuePut>
 80a9996:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

  sensor_msg_event.message_event_type = SENSOR_CONFIG_MESSAGE;
 80a999a:	2300      	movs	r3, #0
 80a999c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  sensor_msg_event.message_event_t.config_event.config_type =
 80a99a0:	2304      	movs	r3, #4
 80a99a2:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
      SENSOR_CONFIG_BIAS;
  sensor_msg_event.message_event_t.config_event.sensor_type =
 80a99a6:	2302      	movs	r3, #2
 80a99a8:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
      SENSOR_TYPE_GYROSCOPE;
  res = osMessageQueuePut(SensorMsgQHandle, &sensor_msg_event, 0, 0);
 80a99ac:	4b2b      	ldr	r3, [pc, #172]	; (80a9a5c <StartInitTask+0xf4>)
 80a99ae:	6818      	ldr	r0, [r3, #0]
 80a99b0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80a99b4:	2300      	movs	r3, #0
 80a99b6:	2200      	movs	r2, #0
 80a99b8:	f00c fd24 	bl	80b6404 <osMessageQueuePut>
 80a99bc:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

  sensor_msg_event.message_event_type = SENSOR_CONFIG_MESSAGE;
 80a99c0:	2300      	movs	r3, #0
 80a99c2:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  sensor_msg_event.message_event_t.config_event.config_type =
 80a99c6:	2304      	movs	r3, #4
 80a99c8:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
      SENSOR_CONFIG_BIAS;
  sensor_msg_event.message_event_t.config_event.sensor_type = SENSOR_TYPE_LIGHT;
 80a99cc:	2303      	movs	r3, #3
 80a99ce:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
  res = osMessageQueuePut(SensorMsgQHandle, &sensor_msg_event, 0, 0);
 80a99d2:	4b22      	ldr	r3, [pc, #136]	; (80a9a5c <StartInitTask+0xf4>)
 80a99d4:	6818      	ldr	r0, [r3, #0]
 80a99d6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80a99da:	2300      	movs	r3, #0
 80a99dc:	2200      	movs	r2, #0
 80a99de:	f00c fd11 	bl	80b6404 <osMessageQueuePut>
 80a99e2:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

  sensor_msg_event.message_event_type = SENSOR_CONFIG_MESSAGE;
 80a99e6:	2300      	movs	r3, #0
 80a99e8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  sensor_msg_event.message_event_t.config_event.config_type =
 80a99ec:	2304      	movs	r3, #4
 80a99ee:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
      SENSOR_CONFIG_BIAS;
  sensor_msg_event.message_event_t.config_event.sensor_type =
 80a99f2:	2306      	movs	r3, #6
 80a99f4:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
      SENSOR_TYPE_PROXIMITY_BOT;
  res = osMessageQueuePut(SensorMsgQHandle, &sensor_msg_event, 0, 0);
 80a99f8:	4b18      	ldr	r3, [pc, #96]	; (80a9a5c <StartInitTask+0xf4>)
 80a99fa:	6818      	ldr	r0, [r3, #0]
 80a99fc:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80a9a00:	2300      	movs	r3, #0
 80a9a02:	2200      	movs	r2, #0
 80a9a04:	f00c fcfe 	bl	80b6404 <osMessageQueuePut>
 80a9a08:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

  can_event_t.CanHeader.TxHeader.StdId =
      (SENSOR_TIME_SYNC_MSG << SENSOR_EVENT_MESSAGE_BIT_SHIFT)
      | (boardID << SENSOR_TYPE_BIT_SHIFT)
 80a9a0c:	4b14      	ldr	r3, [pc, #80]	; (80a9a60 <StartInitTask+0xf8>)
 80a9a0e:	781b      	ldrb	r3, [r3, #0]
 80a9a10:	011b      	lsls	r3, r3, #4
      | 0xf;
 80a9a12:	f443 63c1 	orr.w	r3, r3, #1544	; 0x608
 80a9a16:	f043 0307 	orr.w	r3, r3, #7
  can_event_t.CanHeader.TxHeader.StdId =
 80a9a1a:	617b      	str	r3, [r7, #20]
  uint64_t current_time = sensor_get_timestamp();
 80a9a1c:	f003 fe74 	bl	80ad708 <sensor_get_timestamp>
 80a9a20:	4602      	mov	r2, r0
 80a9a22:	460b      	mov	r3, r1
 80a9a24:	e9c7 2302 	strd	r2, r3, [r7, #8]
  memcpy(&can_event_t.CanData.TxData[0], &current_time, sizeof(uint64_t));
 80a9a28:	f107 0108 	add.w	r1, r7, #8
 80a9a2c:	f107 0314 	add.w	r3, r7, #20
 80a9a30:	331c      	adds	r3, #28
 80a9a32:	2208      	movs	r2, #8
 80a9a34:	4618      	mov	r0, r3
 80a9a36:	f016 fab3 	bl	80bffa0 <memcpy>
  res = osMessageQueuePut(Can1BroadcastQHandle, &can_event_t, 0, 0);
 80a9a3a:	4b0a      	ldr	r3, [pc, #40]	; (80a9a64 <StartInitTask+0xfc>)
 80a9a3c:	6818      	ldr	r0, [r3, #0]
 80a9a3e:	f107 0114 	add.w	r1, r7, #20
 80a9a42:	2300      	movs	r3, #0
 80a9a44:	2200      	movs	r2, #0
 80a9a46:	f00c fcdd 	bl	80b6404 <osMessageQueuePut>
 80a9a4a:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

  for (;;) {
    osThreadSuspend(InitTaskHandle);
 80a9a4e:	4b06      	ldr	r3, [pc, #24]	; (80a9a68 <StartInitTask+0x100>)
 80a9a50:	681b      	ldr	r3, [r3, #0]
 80a9a52:	4618      	mov	r0, r3
 80a9a54:	f00c fb30 	bl	80b60b8 <osThreadSuspend>
 80a9a58:	e7f9      	b.n	80a9a4e <StartInitTask+0xe6>
 80a9a5a:	bf00      	nop
 80a9a5c:	2001bec8 	.word	0x2001bec8
 80a9a60:	20007886 	.word	0x20007886
 80a9a64:	2001c004 	.word	0x2001c004
 80a9a68:	2001becc 	.word	0x2001becc

080a9a6c <HAL_GPIO_EXTI_Callback>:
  }
  /* USER CODE END 5 */
}

void HAL_GPIO_EXTI_Callback(uint16_t gpio_pin)
{
 80a9a6c:	b580      	push	{r7, lr}
 80a9a6e:	b098      	sub	sp, #96	; 0x60
 80a9a70:	af00      	add	r7, sp, #0
 80a9a72:	4603      	mov	r3, r0
 80a9a74:	80fb      	strh	r3, [r7, #6]
  sensor_message_event_t sensor_msg_event;
  sensor_msg_event.message_event_type = SENSOR_INTERRUPT_EVENT;
 80a9a76:	2309      	movs	r3, #9
 80a9a78:	723b      	strb	r3, [r7, #8]
  sensor_msg_event.message_event_t.interrupt_event.interrupt_num = gpio_pin;
 80a9a7a:	88fb      	ldrh	r3, [r7, #6]
 80a9a7c:	613b      	str	r3, [r7, #16]
  osMessageQueuePut(SensorMsgQHandle, &sensor_msg_event, 0, 0);
 80a9a7e:	4b06      	ldr	r3, [pc, #24]	; (80a9a98 <HAL_GPIO_EXTI_Callback+0x2c>)
 80a9a80:	6818      	ldr	r0, [r3, #0]
 80a9a82:	f107 0108 	add.w	r1, r7, #8
 80a9a86:	2300      	movs	r3, #0
 80a9a88:	2200      	movs	r2, #0
 80a9a8a:	f00c fcbb 	bl	80b6404 <osMessageQueuePut>
}
 80a9a8e:	bf00      	nop
 80a9a90:	3760      	adds	r7, #96	; 0x60
 80a9a92:	46bd      	mov	sp, r7
 80a9a94:	bd80      	pop	{r7, pc}
 80a9a96:	bf00      	nop
 80a9a98:	2001bec8 	.word	0x2001bec8

080a9a9c <DataTimerCallback>:

/* USER CODE END 4 */

/* DataTimerCallback function */
void DataTimerCallback(void *argument)
{
 80a9a9c:	b580      	push	{r7, lr}
 80a9a9e:	b098      	sub	sp, #96	; 0x60
 80a9aa0:	af00      	add	r7, sp, #0
 80a9aa2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DataTimerCallback */
  sensor_message_event_t sensor_msg_event;
  sensor_msg_event.message_event_type = SENSOR_TIMER_EVENT;
 80a9aa4:	2308      	movs	r3, #8
 80a9aa6:	723b      	strb	r3, [r7, #8]
  sensor_msg_event.message_event_t.timer_event.timer_num = 1;
 80a9aa8:	2301      	movs	r3, #1
 80a9aaa:	613b      	str	r3, [r7, #16]
  osMessageQueuePut(SensorMsgQHandle, &sensor_msg_event, 0, 0);
 80a9aac:	4b05      	ldr	r3, [pc, #20]	; (80a9ac4 <DataTimerCallback+0x28>)
 80a9aae:	6818      	ldr	r0, [r3, #0]
 80a9ab0:	f107 0108 	add.w	r1, r7, #8
 80a9ab4:	2300      	movs	r3, #0
 80a9ab6:	2200      	movs	r2, #0
 80a9ab8:	f00c fca4 	bl	80b6404 <osMessageQueuePut>
  /* USER CODE END DataTimerCallback */
}
 80a9abc:	bf00      	nop
 80a9abe:	3760      	adds	r7, #96	; 0x60
 80a9ac0:	46bd      	mov	sp, r7
 80a9ac2:	bd80      	pop	{r7, pc}
 80a9ac4:	2001bec8 	.word	0x2001bec8

080a9ac8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 80a9ac8:	b580      	push	{r7, lr}
 80a9aca:	b09a      	sub	sp, #104	; 0x68
 80a9acc:	af00      	add	r7, sp, #0
 80a9ace:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80a9ad0:	687b      	ldr	r3, [r7, #4]
 80a9ad2:	681b      	ldr	r3, [r3, #0]
 80a9ad4:	4a0d      	ldr	r2, [pc, #52]	; (80a9b0c <HAL_TIM_PeriodElapsedCallback+0x44>)
 80a9ad6:	4293      	cmp	r3, r2
 80a9ad8:	d101      	bne.n	80a9ade <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80a9ada:	f005 fd97 	bl	80af60c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM3) {
 80a9ade:	687b      	ldr	r3, [r7, #4]
 80a9ae0:	681b      	ldr	r3, [r3, #0]
 80a9ae2:	4a0b      	ldr	r2, [pc, #44]	; (80a9b10 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80a9ae4:	4293      	cmp	r3, r2
 80a9ae6:	d10c      	bne.n	80a9b02 <HAL_TIM_PeriodElapsedCallback+0x3a>
    //clear update flag
    sensor_message_event_t sensor_msg_event;
    osStatus_t res;
    sensor_msg_event.message_event_type = SENSOR_TIMER_EVENT;
 80a9ae8:	2308      	movs	r3, #8
 80a9aea:	723b      	strb	r3, [r7, #8]
    sensor_msg_event.message_event_t.timer_event.timer_num = 3;
 80a9aec:	2303      	movs	r3, #3
 80a9aee:	613b      	str	r3, [r7, #16]
    res = osMessageQueuePut(SensorMsgQHandle, &sensor_msg_event, 0, 0);
 80a9af0:	4b08      	ldr	r3, [pc, #32]	; (80a9b14 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80a9af2:	6818      	ldr	r0, [r3, #0]
 80a9af4:	f107 0108 	add.w	r1, r7, #8
 80a9af8:	2300      	movs	r3, #0
 80a9afa:	2200      	movs	r2, #0
 80a9afc:	f00c fc82 	bl	80b6404 <osMessageQueuePut>
 80a9b00:	6678      	str	r0, [r7, #100]	; 0x64
  }
  /* USER CODE END Callback 1 */
}
 80a9b02:	bf00      	nop
 80a9b04:	3768      	adds	r7, #104	; 0x68
 80a9b06:	46bd      	mov	sp, r7
 80a9b08:	bd80      	pop	{r7, pc}
 80a9b0a:	bf00      	nop
 80a9b0c:	40010000 	.word	0x40010000
 80a9b10:	40000400 	.word	0x40000400
 80a9b14:	2001bec8 	.word	0x2001bec8

080a9b18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80a9b18:	b480      	push	{r7}
 80a9b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80a9b1c:	bf00      	nop
 80a9b1e:	46bd      	mov	sp, r7
 80a9b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a9b24:	4770      	bx	lr
	...

080a9b28 <rot_v_state_init>:
static bool rot_v_activated = false;

static float rot_v_quaternion[4] = { 1.0, 0.0, 0.0, 0.0 };
static float temp_roll, temp_pitch, temp_yaw;
void rot_v_state_init()
{
 80a9b28:	b5b0      	push	{r4, r5, r7, lr}
 80a9b2a:	b094      	sub	sp, #80	; 0x50
 80a9b2c:	af00      	add	r7, sp, #0

  float variance_1_temp[16] = { 1, 0, 0, 0,     // initial variance = I matrix
 80a9b2e:	4b42      	ldr	r3, [pc, #264]	; (80a9c38 <rot_v_state_init+0x110>)
 80a9b30:	463c      	mov	r4, r7
 80a9b32:	461d      	mov	r5, r3
 80a9b34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a9b36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a9b38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a9b3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a9b3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a9b3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a9b40:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80a9b44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1
  };

  posture_loc.posture_start = 5;
 80a9b48:	4b3c      	ldr	r3, [pc, #240]	; (80a9c3c <rot_v_state_init+0x114>)
 80a9b4a:	2205      	movs	r2, #5
 80a9b4c:	601a      	str	r2, [r3, #0]

  posture_loc.acc_correct = 0;
 80a9b4e:	4b3b      	ldr	r3, [pc, #236]	; (80a9c3c <rot_v_state_init+0x114>)
 80a9b50:	2200      	movs	r2, #0
 80a9b52:	605a      	str	r2, [r3, #4]
  posture_loc.mag_correct = 0;
 80a9b54:	4b39      	ldr	r3, [pc, #228]	; (80a9c3c <rot_v_state_init+0x114>)
 80a9b56:	2200      	movs	r2, #0
 80a9b58:	609a      	str	r2, [r3, #8]
  for (int i = 0; i < 4; i++) {
 80a9b5a:	2300      	movs	r3, #0
 80a9b5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 80a9b5e:	e014      	b.n	80a9b8a <rot_v_state_init+0x62>
    posture_loc.state[i] = 0;
 80a9b60:	4a36      	ldr	r2, [pc, #216]	; (80a9c3c <rot_v_state_init+0x114>)
 80a9b62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80a9b64:	3302      	adds	r3, #2
 80a9b66:	009b      	lsls	r3, r3, #2
 80a9b68:	4413      	add	r3, r2
 80a9b6a:	3304      	adds	r3, #4
 80a9b6c:	f04f 0200 	mov.w	r2, #0
 80a9b70:	601a      	str	r2, [r3, #0]
    posture_loc.state_1[i] = 0;
 80a9b72:	4a32      	ldr	r2, [pc, #200]	; (80a9c3c <rot_v_state_init+0x114>)
 80a9b74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80a9b76:	3306      	adds	r3, #6
 80a9b78:	009b      	lsls	r3, r3, #2
 80a9b7a:	4413      	add	r3, r2
 80a9b7c:	3304      	adds	r3, #4
 80a9b7e:	f04f 0200 	mov.w	r2, #0
 80a9b82:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < 4; i++) {
 80a9b84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80a9b86:	3301      	adds	r3, #1
 80a9b88:	64fb      	str	r3, [r7, #76]	; 0x4c
 80a9b8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80a9b8c:	2b03      	cmp	r3, #3
 80a9b8e:	dde7      	ble.n	80a9b60 <rot_v_state_init+0x38>
  }

  for (int i = 0; i < 16; i++)
 80a9b90:	2300      	movs	r3, #0
 80a9b92:	64bb      	str	r3, [r7, #72]	; 0x48
 80a9b94:	e010      	b.n	80a9bb8 <rot_v_state_init+0x90>
    posture_loc.variance_1[i] = variance_1_temp[i];
 80a9b96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80a9b98:	009b      	lsls	r3, r3, #2
 80a9b9a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80a9b9e:	4413      	add	r3, r2
 80a9ba0:	3b50      	subs	r3, #80	; 0x50
 80a9ba2:	681a      	ldr	r2, [r3, #0]
 80a9ba4:	4925      	ldr	r1, [pc, #148]	; (80a9c3c <rot_v_state_init+0x114>)
 80a9ba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80a9ba8:	330a      	adds	r3, #10
 80a9baa:	009b      	lsls	r3, r3, #2
 80a9bac:	440b      	add	r3, r1
 80a9bae:	3304      	adds	r3, #4
 80a9bb0:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < 16; i++)
 80a9bb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80a9bb4:	3301      	adds	r3, #1
 80a9bb6:	64bb      	str	r3, [r7, #72]	; 0x48
 80a9bb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80a9bba:	2b0f      	cmp	r3, #15
 80a9bbc:	ddeb      	ble.n	80a9b96 <rot_v_state_init+0x6e>

  for (int i = 0; i < 16; i++)
 80a9bbe:	2300      	movs	r3, #0
 80a9bc0:	647b      	str	r3, [r7, #68]	; 0x44
 80a9bc2:	e00b      	b.n	80a9bdc <rot_v_state_init+0xb4>
    posture_loc.A_1[i] = 0;
 80a9bc4:	4a1d      	ldr	r2, [pc, #116]	; (80a9c3c <rot_v_state_init+0x114>)
 80a9bc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80a9bc8:	331a      	adds	r3, #26
 80a9bca:	009b      	lsls	r3, r3, #2
 80a9bcc:	4413      	add	r3, r2
 80a9bce:	3304      	adds	r3, #4
 80a9bd0:	f04f 0200 	mov.w	r2, #0
 80a9bd4:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < 16; i++)
 80a9bd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80a9bd8:	3301      	adds	r3, #1
 80a9bda:	647b      	str	r3, [r7, #68]	; 0x44
 80a9bdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80a9bde:	2b0f      	cmp	r3, #15
 80a9be0:	ddf0      	ble.n	80a9bc4 <rot_v_state_init+0x9c>

  for (int i = 0; i < 3; i++) {
 80a9be2:	2300      	movs	r3, #0
 80a9be4:	643b      	str	r3, [r7, #64]	; 0x40
 80a9be6:	e01c      	b.n	80a9c22 <rot_v_state_init+0xfa>
    posture_loc.acc[i] = 0;
 80a9be8:	4a14      	ldr	r2, [pc, #80]	; (80a9c3c <rot_v_state_init+0x114>)
 80a9bea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80a9bec:	332a      	adds	r3, #42	; 0x2a
 80a9bee:	009b      	lsls	r3, r3, #2
 80a9bf0:	4413      	add	r3, r2
 80a9bf2:	3304      	adds	r3, #4
 80a9bf4:	f04f 0200 	mov.w	r2, #0
 80a9bf8:	601a      	str	r2, [r3, #0]
    posture_loc.gyro[i] = 0;
 80a9bfa:	4a10      	ldr	r2, [pc, #64]	; (80a9c3c <rot_v_state_init+0x114>)
 80a9bfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80a9bfe:	332e      	adds	r3, #46	; 0x2e
 80a9c00:	009b      	lsls	r3, r3, #2
 80a9c02:	4413      	add	r3, r2
 80a9c04:	f04f 0200 	mov.w	r2, #0
 80a9c08:	601a      	str	r2, [r3, #0]
    posture_loc.mag[i] = 0;
 80a9c0a:	4a0c      	ldr	r2, [pc, #48]	; (80a9c3c <rot_v_state_init+0x114>)
 80a9c0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80a9c0e:	3330      	adds	r3, #48	; 0x30
 80a9c10:	009b      	lsls	r3, r3, #2
 80a9c12:	4413      	add	r3, r2
 80a9c14:	3304      	adds	r3, #4
 80a9c16:	f04f 0200 	mov.w	r2, #0
 80a9c1a:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < 3; i++) {
 80a9c1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80a9c1e:	3301      	adds	r3, #1
 80a9c20:	643b      	str	r3, [r7, #64]	; 0x40
 80a9c22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80a9c24:	2b02      	cmp	r3, #2
 80a9c26:	dddf      	ble.n	80a9be8 <rot_v_state_init+0xc0>
  }

  printf("rot_v_state_init done !!!\r\n");
 80a9c28:	4805      	ldr	r0, [pc, #20]	; (80a9c40 <rot_v_state_init+0x118>)
 80a9c2a:	f016 ff3f 	bl	80c0aac <puts>
}
 80a9c2e:	bf00      	nop
 80a9c30:	3750      	adds	r7, #80	; 0x50
 80a9c32:	46bd      	mov	sp, r7
 80a9c34:	bdb0      	pop	{r4, r5, r7, pc}
 80a9c36:	bf00      	nop
 80a9c38:	080c5cc0 	.word	0x080c5cc0
 80a9c3c:	200080bc 	.word	0x200080bc
 80a9c40:	080c5ca4 	.word	0x080c5ca4

080a9c44 <matrix_multiply>:

static void matrix_multiply(float *A, float *B, float *C, int AR, int AC,
                            int BC)
{                               // AR = row of matrix A, AC = column of matrix A, BC = column of matrix B
 80a9c44:	b480      	push	{r7}
 80a9c46:	b08d      	sub	sp, #52	; 0x34
 80a9c48:	af00      	add	r7, sp, #0
 80a9c4a:	60f8      	str	r0, [r7, #12]
 80a9c4c:	60b9      	str	r1, [r7, #8]
 80a9c4e:	607a      	str	r2, [r7, #4]
 80a9c50:	603b      	str	r3, [r7, #0]
  float a_temp = 0, b_temp = 0, c_temp = 0;
 80a9c52:	f04f 0300 	mov.w	r3, #0
 80a9c56:	623b      	str	r3, [r7, #32]
 80a9c58:	f04f 0300 	mov.w	r3, #0
 80a9c5c:	61fb      	str	r3, [r7, #28]
 80a9c5e:	f04f 0300 	mov.w	r3, #0
 80a9c62:	61bb      	str	r3, [r7, #24]
  int i = 0, j = 0, k = 0, l = 0;
 80a9c64:	2300      	movs	r3, #0
 80a9c66:	62fb      	str	r3, [r7, #44]	; 0x2c
 80a9c68:	2300      	movs	r3, #0
 80a9c6a:	62bb      	str	r3, [r7, #40]	; 0x28
 80a9c6c:	2300      	movs	r3, #0
 80a9c6e:	627b      	str	r3, [r7, #36]	; 0x24
 80a9c70:	2300      	movs	r3, #0
 80a9c72:	617b      	str	r3, [r7, #20]

  for (i = 0; i < AR; i++) {
 80a9c74:	2300      	movs	r3, #0
 80a9c76:	62fb      	str	r3, [r7, #44]	; 0x2c
 80a9c78:	e052      	b.n	80a9d20 <matrix_multiply+0xdc>
    for (j = 0; j < BC; j++) {
 80a9c7a:	2300      	movs	r3, #0
 80a9c7c:	62bb      	str	r3, [r7, #40]	; 0x28
 80a9c7e:	e048      	b.n	80a9d12 <matrix_multiply+0xce>
      l = i * BC + j;
 80a9c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80a9c82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80a9c84:	fb02 f303 	mul.w	r3, r2, r3
 80a9c88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80a9c8a:	4413      	add	r3, r2
 80a9c8c:	617b      	str	r3, [r7, #20]
      C[l] = 0;
 80a9c8e:	697b      	ldr	r3, [r7, #20]
 80a9c90:	009b      	lsls	r3, r3, #2
 80a9c92:	687a      	ldr	r2, [r7, #4]
 80a9c94:	4413      	add	r3, r2
 80a9c96:	f04f 0200 	mov.w	r2, #0
 80a9c9a:	601a      	str	r2, [r3, #0]
      for (k = 0; k < AC; k++) {
 80a9c9c:	2300      	movs	r3, #0
 80a9c9e:	627b      	str	r3, [r7, #36]	; 0x24
 80a9ca0:	e030      	b.n	80a9d04 <matrix_multiply+0xc0>
        a_temp = A[i * AC + k];
 80a9ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80a9ca4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80a9ca6:	fb02 f203 	mul.w	r2, r2, r3
 80a9caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80a9cac:	4413      	add	r3, r2
 80a9cae:	009b      	lsls	r3, r3, #2
 80a9cb0:	68fa      	ldr	r2, [r7, #12]
 80a9cb2:	4413      	add	r3, r2
 80a9cb4:	681b      	ldr	r3, [r3, #0]
 80a9cb6:	623b      	str	r3, [r7, #32]
        b_temp = B[k * BC + j];
 80a9cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80a9cba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80a9cbc:	fb02 f203 	mul.w	r2, r2, r3
 80a9cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80a9cc2:	4413      	add	r3, r2
 80a9cc4:	009b      	lsls	r3, r3, #2
 80a9cc6:	68ba      	ldr	r2, [r7, #8]
 80a9cc8:	4413      	add	r3, r2
 80a9cca:	681b      	ldr	r3, [r3, #0]
 80a9ccc:	61fb      	str	r3, [r7, #28]
        c_temp = a_temp * b_temp;
 80a9cce:	ed97 7a08 	vldr	s14, [r7, #32]
 80a9cd2:	edd7 7a07 	vldr	s15, [r7, #28]
 80a9cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80a9cda:	edc7 7a06 	vstr	s15, [r7, #24]
        C[l] += c_temp;
 80a9cde:	697b      	ldr	r3, [r7, #20]
 80a9ce0:	009b      	lsls	r3, r3, #2
 80a9ce2:	687a      	ldr	r2, [r7, #4]
 80a9ce4:	4413      	add	r3, r2
 80a9ce6:	ed93 7a00 	vldr	s14, [r3]
 80a9cea:	697b      	ldr	r3, [r7, #20]
 80a9cec:	009b      	lsls	r3, r3, #2
 80a9cee:	687a      	ldr	r2, [r7, #4]
 80a9cf0:	4413      	add	r3, r2
 80a9cf2:	edd7 7a06 	vldr	s15, [r7, #24]
 80a9cf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80a9cfa:	edc3 7a00 	vstr	s15, [r3]
      for (k = 0; k < AC; k++) {
 80a9cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80a9d00:	3301      	adds	r3, #1
 80a9d02:	627b      	str	r3, [r7, #36]	; 0x24
 80a9d04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80a9d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80a9d08:	429a      	cmp	r2, r3
 80a9d0a:	dbca      	blt.n	80a9ca2 <matrix_multiply+0x5e>
    for (j = 0; j < BC; j++) {
 80a9d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80a9d0e:	3301      	adds	r3, #1
 80a9d10:	62bb      	str	r3, [r7, #40]	; 0x28
 80a9d12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80a9d14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80a9d16:	429a      	cmp	r2, r3
 80a9d18:	dbb2      	blt.n	80a9c80 <matrix_multiply+0x3c>
  for (i = 0; i < AR; i++) {
 80a9d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80a9d1c:	3301      	adds	r3, #1
 80a9d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80a9d20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80a9d22:	683b      	ldr	r3, [r7, #0]
 80a9d24:	429a      	cmp	r2, r3
 80a9d26:	dba8      	blt.n	80a9c7a <matrix_multiply+0x36>
      }
    }
  }
}
 80a9d28:	bf00      	nop
 80a9d2a:	bf00      	nop
 80a9d2c:	3734      	adds	r7, #52	; 0x34
 80a9d2e:	46bd      	mov	sp, r7
 80a9d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a9d34:	4770      	bx	lr

080a9d36 <matrix_multiply_trans>:

// matrix A * transpose of matrix B = matrix C
static void matrix_multiply_trans(float *A, float *B, float *C, int AR, int AC,
                                  int BR)
{                               // AR = row of matrix A, AC = column of matrix A, BC = row of matrix B
 80a9d36:	b480      	push	{r7}
 80a9d38:	b08d      	sub	sp, #52	; 0x34
 80a9d3a:	af00      	add	r7, sp, #0
 80a9d3c:	60f8      	str	r0, [r7, #12]
 80a9d3e:	60b9      	str	r1, [r7, #8]
 80a9d40:	607a      	str	r2, [r7, #4]
 80a9d42:	603b      	str	r3, [r7, #0]
  float a_temp = 0, b_temp = 0, c_temp = 0;
 80a9d44:	f04f 0300 	mov.w	r3, #0
 80a9d48:	623b      	str	r3, [r7, #32]
 80a9d4a:	f04f 0300 	mov.w	r3, #0
 80a9d4e:	61fb      	str	r3, [r7, #28]
 80a9d50:	f04f 0300 	mov.w	r3, #0
 80a9d54:	61bb      	str	r3, [r7, #24]
  int i = 0, j = 0, k = 0, l = 0;
 80a9d56:	2300      	movs	r3, #0
 80a9d58:	62fb      	str	r3, [r7, #44]	; 0x2c
 80a9d5a:	2300      	movs	r3, #0
 80a9d5c:	62bb      	str	r3, [r7, #40]	; 0x28
 80a9d5e:	2300      	movs	r3, #0
 80a9d60:	627b      	str	r3, [r7, #36]	; 0x24
 80a9d62:	2300      	movs	r3, #0
 80a9d64:	617b      	str	r3, [r7, #20]

  for (i = 0; i < AR; i++) {
 80a9d66:	2300      	movs	r3, #0
 80a9d68:	62fb      	str	r3, [r7, #44]	; 0x2c
 80a9d6a:	e052      	b.n	80a9e12 <matrix_multiply_trans+0xdc>
    for (j = 0; j < BR; j++) {
 80a9d6c:	2300      	movs	r3, #0
 80a9d6e:	62bb      	str	r3, [r7, #40]	; 0x28
 80a9d70:	e048      	b.n	80a9e04 <matrix_multiply_trans+0xce>
      l = i * BR + j;
 80a9d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80a9d74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80a9d76:	fb02 f303 	mul.w	r3, r2, r3
 80a9d7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80a9d7c:	4413      	add	r3, r2
 80a9d7e:	617b      	str	r3, [r7, #20]
      C[l] = 0;
 80a9d80:	697b      	ldr	r3, [r7, #20]
 80a9d82:	009b      	lsls	r3, r3, #2
 80a9d84:	687a      	ldr	r2, [r7, #4]
 80a9d86:	4413      	add	r3, r2
 80a9d88:	f04f 0200 	mov.w	r2, #0
 80a9d8c:	601a      	str	r2, [r3, #0]
      for (k = 0; k < AC; k++) {
 80a9d8e:	2300      	movs	r3, #0
 80a9d90:	627b      	str	r3, [r7, #36]	; 0x24
 80a9d92:	e030      	b.n	80a9df6 <matrix_multiply_trans+0xc0>
        a_temp = A[i * AC + k];
 80a9d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80a9d96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80a9d98:	fb02 f203 	mul.w	r2, r2, r3
 80a9d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80a9d9e:	4413      	add	r3, r2
 80a9da0:	009b      	lsls	r3, r3, #2
 80a9da2:	68fa      	ldr	r2, [r7, #12]
 80a9da4:	4413      	add	r3, r2
 80a9da6:	681b      	ldr	r3, [r3, #0]
 80a9da8:	623b      	str	r3, [r7, #32]
        b_temp = B[j * AC + k];
 80a9daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80a9dac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80a9dae:	fb02 f203 	mul.w	r2, r2, r3
 80a9db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80a9db4:	4413      	add	r3, r2
 80a9db6:	009b      	lsls	r3, r3, #2
 80a9db8:	68ba      	ldr	r2, [r7, #8]
 80a9dba:	4413      	add	r3, r2
 80a9dbc:	681b      	ldr	r3, [r3, #0]
 80a9dbe:	61fb      	str	r3, [r7, #28]
        c_temp = a_temp * b_temp;
 80a9dc0:	ed97 7a08 	vldr	s14, [r7, #32]
 80a9dc4:	edd7 7a07 	vldr	s15, [r7, #28]
 80a9dc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80a9dcc:	edc7 7a06 	vstr	s15, [r7, #24]
        C[l] += c_temp;
 80a9dd0:	697b      	ldr	r3, [r7, #20]
 80a9dd2:	009b      	lsls	r3, r3, #2
 80a9dd4:	687a      	ldr	r2, [r7, #4]
 80a9dd6:	4413      	add	r3, r2
 80a9dd8:	ed93 7a00 	vldr	s14, [r3]
 80a9ddc:	697b      	ldr	r3, [r7, #20]
 80a9dde:	009b      	lsls	r3, r3, #2
 80a9de0:	687a      	ldr	r2, [r7, #4]
 80a9de2:	4413      	add	r3, r2
 80a9de4:	edd7 7a06 	vldr	s15, [r7, #24]
 80a9de8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80a9dec:	edc3 7a00 	vstr	s15, [r3]
      for (k = 0; k < AC; k++) {
 80a9df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80a9df2:	3301      	adds	r3, #1
 80a9df4:	627b      	str	r3, [r7, #36]	; 0x24
 80a9df6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80a9df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80a9dfa:	429a      	cmp	r2, r3
 80a9dfc:	dbca      	blt.n	80a9d94 <matrix_multiply_trans+0x5e>
    for (j = 0; j < BR; j++) {
 80a9dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80a9e00:	3301      	adds	r3, #1
 80a9e02:	62bb      	str	r3, [r7, #40]	; 0x28
 80a9e04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80a9e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80a9e08:	429a      	cmp	r2, r3
 80a9e0a:	dbb2      	blt.n	80a9d72 <matrix_multiply_trans+0x3c>
  for (i = 0; i < AR; i++) {
 80a9e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80a9e0e:	3301      	adds	r3, #1
 80a9e10:	62fb      	str	r3, [r7, #44]	; 0x2c
 80a9e12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80a9e14:	683b      	ldr	r3, [r7, #0]
 80a9e16:	429a      	cmp	r2, r3
 80a9e18:	dba8      	blt.n	80a9d6c <matrix_multiply_trans+0x36>
      }
    }
  }
}
 80a9e1a:	bf00      	nop
 80a9e1c:	bf00      	nop
 80a9e1e:	3734      	adds	r7, #52	; 0x34
 80a9e20:	46bd      	mov	sp, r7
 80a9e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a9e26:	4770      	bx	lr

080a9e28 <ABAT>:

// matrix A * matrix B * transpose of matrix A = matrix C
static void ABAT(float *A, float *B, float *C, int AR, int AC)
{                               // AR = row of matrix A, AC = column of matrix A
 80a9e28:	b580      	push	{r7, lr}
 80a9e2a:	b096      	sub	sp, #88	; 0x58
 80a9e2c:	af02      	add	r7, sp, #8
 80a9e2e:	60f8      	str	r0, [r7, #12]
 80a9e30:	60b9      	str	r1, [r7, #8]
 80a9e32:	607a      	str	r2, [r7, #4]
 80a9e34:	603b      	str	r3, [r7, #0]
  float Temp[16] = { 0 };
 80a9e36:	f107 0310 	add.w	r3, r7, #16
 80a9e3a:	2240      	movs	r2, #64	; 0x40
 80a9e3c:	2100      	movs	r1, #0
 80a9e3e:	4618      	mov	r0, r3
 80a9e40:	f016 f8bc 	bl	80bffbc <memset>
  matrix_multiply(A, B, Temp, AR, AC, AC);
 80a9e44:	f107 0210 	add.w	r2, r7, #16
 80a9e48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80a9e4a:	9301      	str	r3, [sp, #4]
 80a9e4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80a9e4e:	9300      	str	r3, [sp, #0]
 80a9e50:	683b      	ldr	r3, [r7, #0]
 80a9e52:	68b9      	ldr	r1, [r7, #8]
 80a9e54:	68f8      	ldr	r0, [r7, #12]
 80a9e56:	f7ff fef5 	bl	80a9c44 <matrix_multiply>
  matrix_multiply_trans(Temp, A, C, AR, AC, AR);
 80a9e5a:	f107 0010 	add.w	r0, r7, #16
 80a9e5e:	683b      	ldr	r3, [r7, #0]
 80a9e60:	9301      	str	r3, [sp, #4]
 80a9e62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80a9e64:	9300      	str	r3, [sp, #0]
 80a9e66:	683b      	ldr	r3, [r7, #0]
 80a9e68:	687a      	ldr	r2, [r7, #4]
 80a9e6a:	68f9      	ldr	r1, [r7, #12]
 80a9e6c:	f7ff ff63 	bl	80a9d36 <matrix_multiply_trans>
}
 80a9e70:	bf00      	nop
 80a9e72:	3750      	adds	r7, #80	; 0x50
 80a9e74:	46bd      	mov	sp, r7
 80a9e76:	bd80      	pop	{r7, pc}

080a9e78 <matrix_inverse>:

// inverse of matrix A = matrix AI
static void matrix_inverse(float *A, float *AI)
{
 80a9e78:	b480      	push	{r7}
 80a9e7a:	b085      	sub	sp, #20
 80a9e7c:	af00      	add	r7, sp, #0
 80a9e7e:	6078      	str	r0, [r7, #4]
 80a9e80:	6039      	str	r1, [r7, #0]
  float det = 0, invdet = 0;
 80a9e82:	f04f 0300 	mov.w	r3, #0
 80a9e86:	60fb      	str	r3, [r7, #12]
 80a9e88:	f04f 0300 	mov.w	r3, #0
 80a9e8c:	60bb      	str	r3, [r7, #8]

  det = A[0] * (A[4] * A[8] - A[7] * A[5])
 80a9e8e:	687b      	ldr	r3, [r7, #4]
 80a9e90:	ed93 7a00 	vldr	s14, [r3]
 80a9e94:	687b      	ldr	r3, [r7, #4]
 80a9e96:	3310      	adds	r3, #16
 80a9e98:	edd3 6a00 	vldr	s13, [r3]
 80a9e9c:	687b      	ldr	r3, [r7, #4]
 80a9e9e:	3320      	adds	r3, #32
 80a9ea0:	edd3 7a00 	vldr	s15, [r3]
 80a9ea4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80a9ea8:	687b      	ldr	r3, [r7, #4]
 80a9eaa:	331c      	adds	r3, #28
 80a9eac:	ed93 6a00 	vldr	s12, [r3]
 80a9eb0:	687b      	ldr	r3, [r7, #4]
 80a9eb2:	3314      	adds	r3, #20
 80a9eb4:	edd3 7a00 	vldr	s15, [r3]
 80a9eb8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80a9ebc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80a9ec0:	ee27 7a27 	vmul.f32	s14, s14, s15
      - A[1] * (A[3] * A[8] - A[5] * A[6])
 80a9ec4:	687b      	ldr	r3, [r7, #4]
 80a9ec6:	3304      	adds	r3, #4
 80a9ec8:	edd3 6a00 	vldr	s13, [r3]
 80a9ecc:	687b      	ldr	r3, [r7, #4]
 80a9ece:	330c      	adds	r3, #12
 80a9ed0:	ed93 6a00 	vldr	s12, [r3]
 80a9ed4:	687b      	ldr	r3, [r7, #4]
 80a9ed6:	3320      	adds	r3, #32
 80a9ed8:	edd3 7a00 	vldr	s15, [r3]
 80a9edc:	ee26 6a27 	vmul.f32	s12, s12, s15
 80a9ee0:	687b      	ldr	r3, [r7, #4]
 80a9ee2:	3314      	adds	r3, #20
 80a9ee4:	edd3 5a00 	vldr	s11, [r3]
 80a9ee8:	687b      	ldr	r3, [r7, #4]
 80a9eea:	3318      	adds	r3, #24
 80a9eec:	edd3 7a00 	vldr	s15, [r3]
 80a9ef0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80a9ef4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80a9ef8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80a9efc:	ee37 7a67 	vsub.f32	s14, s14, s15
      + A[2] * (A[3] * A[7] - A[4] * A[6]);
 80a9f00:	687b      	ldr	r3, [r7, #4]
 80a9f02:	3308      	adds	r3, #8
 80a9f04:	edd3 6a00 	vldr	s13, [r3]
 80a9f08:	687b      	ldr	r3, [r7, #4]
 80a9f0a:	330c      	adds	r3, #12
 80a9f0c:	ed93 6a00 	vldr	s12, [r3]
 80a9f10:	687b      	ldr	r3, [r7, #4]
 80a9f12:	331c      	adds	r3, #28
 80a9f14:	edd3 7a00 	vldr	s15, [r3]
 80a9f18:	ee26 6a27 	vmul.f32	s12, s12, s15
 80a9f1c:	687b      	ldr	r3, [r7, #4]
 80a9f1e:	3310      	adds	r3, #16
 80a9f20:	edd3 5a00 	vldr	s11, [r3]
 80a9f24:	687b      	ldr	r3, [r7, #4]
 80a9f26:	3318      	adds	r3, #24
 80a9f28:	edd3 7a00 	vldr	s15, [r3]
 80a9f2c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80a9f30:	ee76 7a67 	vsub.f32	s15, s12, s15
 80a9f34:	ee66 7aa7 	vmul.f32	s15, s13, s15
  det = A[0] * (A[4] * A[8] - A[7] * A[5])
 80a9f38:	ee77 7a27 	vadd.f32	s15, s14, s15
 80a9f3c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (det >= 0 && det <= 0)
 80a9f40:	edd7 7a03 	vldr	s15, [r7, #12]
 80a9f44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80a9f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80a9f4c:	db07      	blt.n	80a9f5e <matrix_inverse+0xe6>
 80a9f4e:	edd7 7a03 	vldr	s15, [r7, #12]
 80a9f52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80a9f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80a9f5a:	f240 811a 	bls.w	80aa192 <matrix_inverse+0x31a>
    return;

  invdet = 1.0f / det;
 80a9f5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80a9f62:	ed97 7a03 	vldr	s14, [r7, #12]
 80a9f66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80a9f6a:	edc7 7a02 	vstr	s15, [r7, #8]

  AI[0] = (A[4] * A[8] - A[7] * A[5]) * invdet;
 80a9f6e:	687b      	ldr	r3, [r7, #4]
 80a9f70:	3310      	adds	r3, #16
 80a9f72:	ed93 7a00 	vldr	s14, [r3]
 80a9f76:	687b      	ldr	r3, [r7, #4]
 80a9f78:	3320      	adds	r3, #32
 80a9f7a:	edd3 7a00 	vldr	s15, [r3]
 80a9f7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80a9f82:	687b      	ldr	r3, [r7, #4]
 80a9f84:	331c      	adds	r3, #28
 80a9f86:	edd3 6a00 	vldr	s13, [r3]
 80a9f8a:	687b      	ldr	r3, [r7, #4]
 80a9f8c:	3314      	adds	r3, #20
 80a9f8e:	edd3 7a00 	vldr	s15, [r3]
 80a9f92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80a9f96:	ee37 7a67 	vsub.f32	s14, s14, s15
 80a9f9a:	edd7 7a02 	vldr	s15, [r7, #8]
 80a9f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80a9fa2:	683b      	ldr	r3, [r7, #0]
 80a9fa4:	edc3 7a00 	vstr	s15, [r3]
  AI[1] = -(A[1] * A[8] - A[2] * A[7]) * invdet;
 80a9fa8:	687b      	ldr	r3, [r7, #4]
 80a9faa:	3304      	adds	r3, #4
 80a9fac:	ed93 7a00 	vldr	s14, [r3]
 80a9fb0:	687b      	ldr	r3, [r7, #4]
 80a9fb2:	3320      	adds	r3, #32
 80a9fb4:	edd3 7a00 	vldr	s15, [r3]
 80a9fb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80a9fbc:	687b      	ldr	r3, [r7, #4]
 80a9fbe:	3308      	adds	r3, #8
 80a9fc0:	edd3 6a00 	vldr	s13, [r3]
 80a9fc4:	687b      	ldr	r3, [r7, #4]
 80a9fc6:	331c      	adds	r3, #28
 80a9fc8:	edd3 7a00 	vldr	s15, [r3]
 80a9fcc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80a9fd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80a9fd4:	eeb1 7a67 	vneg.f32	s14, s15
 80a9fd8:	683b      	ldr	r3, [r7, #0]
 80a9fda:	3304      	adds	r3, #4
 80a9fdc:	edd7 7a02 	vldr	s15, [r7, #8]
 80a9fe0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80a9fe4:	edc3 7a00 	vstr	s15, [r3]
  AI[2] = (A[1] * A[5] - A[2] * A[4]) * invdet;
 80a9fe8:	687b      	ldr	r3, [r7, #4]
 80a9fea:	3304      	adds	r3, #4
 80a9fec:	ed93 7a00 	vldr	s14, [r3]
 80a9ff0:	687b      	ldr	r3, [r7, #4]
 80a9ff2:	3314      	adds	r3, #20
 80a9ff4:	edd3 7a00 	vldr	s15, [r3]
 80a9ff8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80a9ffc:	687b      	ldr	r3, [r7, #4]
 80a9ffe:	3308      	adds	r3, #8
 80aa000:	edd3 6a00 	vldr	s13, [r3]
 80aa004:	687b      	ldr	r3, [r7, #4]
 80aa006:	3310      	adds	r3, #16
 80aa008:	edd3 7a00 	vldr	s15, [r3]
 80aa00c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80aa010:	ee37 7a67 	vsub.f32	s14, s14, s15
 80aa014:	683b      	ldr	r3, [r7, #0]
 80aa016:	3308      	adds	r3, #8
 80aa018:	edd7 7a02 	vldr	s15, [r7, #8]
 80aa01c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80aa020:	edc3 7a00 	vstr	s15, [r3]
  AI[3] = -(A[3] * A[8] - A[5] * A[6]) * invdet;
 80aa024:	687b      	ldr	r3, [r7, #4]
 80aa026:	330c      	adds	r3, #12
 80aa028:	ed93 7a00 	vldr	s14, [r3]
 80aa02c:	687b      	ldr	r3, [r7, #4]
 80aa02e:	3320      	adds	r3, #32
 80aa030:	edd3 7a00 	vldr	s15, [r3]
 80aa034:	ee27 7a27 	vmul.f32	s14, s14, s15
 80aa038:	687b      	ldr	r3, [r7, #4]
 80aa03a:	3314      	adds	r3, #20
 80aa03c:	edd3 6a00 	vldr	s13, [r3]
 80aa040:	687b      	ldr	r3, [r7, #4]
 80aa042:	3318      	adds	r3, #24
 80aa044:	edd3 7a00 	vldr	s15, [r3]
 80aa048:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80aa04c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80aa050:	eeb1 7a67 	vneg.f32	s14, s15
 80aa054:	683b      	ldr	r3, [r7, #0]
 80aa056:	330c      	adds	r3, #12
 80aa058:	edd7 7a02 	vldr	s15, [r7, #8]
 80aa05c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80aa060:	edc3 7a00 	vstr	s15, [r3]
  AI[4] = (A[0] * A[8] - A[2] * A[6]) * invdet;
 80aa064:	687b      	ldr	r3, [r7, #4]
 80aa066:	ed93 7a00 	vldr	s14, [r3]
 80aa06a:	687b      	ldr	r3, [r7, #4]
 80aa06c:	3320      	adds	r3, #32
 80aa06e:	edd3 7a00 	vldr	s15, [r3]
 80aa072:	ee27 7a27 	vmul.f32	s14, s14, s15
 80aa076:	687b      	ldr	r3, [r7, #4]
 80aa078:	3308      	adds	r3, #8
 80aa07a:	edd3 6a00 	vldr	s13, [r3]
 80aa07e:	687b      	ldr	r3, [r7, #4]
 80aa080:	3318      	adds	r3, #24
 80aa082:	edd3 7a00 	vldr	s15, [r3]
 80aa086:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80aa08a:	ee37 7a67 	vsub.f32	s14, s14, s15
 80aa08e:	683b      	ldr	r3, [r7, #0]
 80aa090:	3310      	adds	r3, #16
 80aa092:	edd7 7a02 	vldr	s15, [r7, #8]
 80aa096:	ee67 7a27 	vmul.f32	s15, s14, s15
 80aa09a:	edc3 7a00 	vstr	s15, [r3]
  AI[5] = -(A[0] * A[5] - A[3] * A[2]) * invdet;
 80aa09e:	687b      	ldr	r3, [r7, #4]
 80aa0a0:	ed93 7a00 	vldr	s14, [r3]
 80aa0a4:	687b      	ldr	r3, [r7, #4]
 80aa0a6:	3314      	adds	r3, #20
 80aa0a8:	edd3 7a00 	vldr	s15, [r3]
 80aa0ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80aa0b0:	687b      	ldr	r3, [r7, #4]
 80aa0b2:	330c      	adds	r3, #12
 80aa0b4:	edd3 6a00 	vldr	s13, [r3]
 80aa0b8:	687b      	ldr	r3, [r7, #4]
 80aa0ba:	3308      	adds	r3, #8
 80aa0bc:	edd3 7a00 	vldr	s15, [r3]
 80aa0c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80aa0c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80aa0c8:	eeb1 7a67 	vneg.f32	s14, s15
 80aa0cc:	683b      	ldr	r3, [r7, #0]
 80aa0ce:	3314      	adds	r3, #20
 80aa0d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80aa0d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80aa0d8:	edc3 7a00 	vstr	s15, [r3]
  AI[6] = (A[3] * A[7] - A[6] * A[4]) * invdet;
 80aa0dc:	687b      	ldr	r3, [r7, #4]
 80aa0de:	330c      	adds	r3, #12
 80aa0e0:	ed93 7a00 	vldr	s14, [r3]
 80aa0e4:	687b      	ldr	r3, [r7, #4]
 80aa0e6:	331c      	adds	r3, #28
 80aa0e8:	edd3 7a00 	vldr	s15, [r3]
 80aa0ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80aa0f0:	687b      	ldr	r3, [r7, #4]
 80aa0f2:	3318      	adds	r3, #24
 80aa0f4:	edd3 6a00 	vldr	s13, [r3]
 80aa0f8:	687b      	ldr	r3, [r7, #4]
 80aa0fa:	3310      	adds	r3, #16
 80aa0fc:	edd3 7a00 	vldr	s15, [r3]
 80aa100:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80aa104:	ee37 7a67 	vsub.f32	s14, s14, s15
 80aa108:	683b      	ldr	r3, [r7, #0]
 80aa10a:	3318      	adds	r3, #24
 80aa10c:	edd7 7a02 	vldr	s15, [r7, #8]
 80aa110:	ee67 7a27 	vmul.f32	s15, s14, s15
 80aa114:	edc3 7a00 	vstr	s15, [r3]
  AI[7] = -(A[0] * A[7] - A[6] * A[1]) * invdet;
 80aa118:	687b      	ldr	r3, [r7, #4]
 80aa11a:	ed93 7a00 	vldr	s14, [r3]
 80aa11e:	687b      	ldr	r3, [r7, #4]
 80aa120:	331c      	adds	r3, #28
 80aa122:	edd3 7a00 	vldr	s15, [r3]
 80aa126:	ee27 7a27 	vmul.f32	s14, s14, s15
 80aa12a:	687b      	ldr	r3, [r7, #4]
 80aa12c:	3318      	adds	r3, #24
 80aa12e:	edd3 6a00 	vldr	s13, [r3]
 80aa132:	687b      	ldr	r3, [r7, #4]
 80aa134:	3304      	adds	r3, #4
 80aa136:	edd3 7a00 	vldr	s15, [r3]
 80aa13a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80aa13e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80aa142:	eeb1 7a67 	vneg.f32	s14, s15
 80aa146:	683b      	ldr	r3, [r7, #0]
 80aa148:	331c      	adds	r3, #28
 80aa14a:	edd7 7a02 	vldr	s15, [r7, #8]
 80aa14e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80aa152:	edc3 7a00 	vstr	s15, [r3]
  AI[8] = (A[0] * A[4] - A[3] * A[1]) * invdet;
 80aa156:	687b      	ldr	r3, [r7, #4]
 80aa158:	ed93 7a00 	vldr	s14, [r3]
 80aa15c:	687b      	ldr	r3, [r7, #4]
 80aa15e:	3310      	adds	r3, #16
 80aa160:	edd3 7a00 	vldr	s15, [r3]
 80aa164:	ee27 7a27 	vmul.f32	s14, s14, s15
 80aa168:	687b      	ldr	r3, [r7, #4]
 80aa16a:	330c      	adds	r3, #12
 80aa16c:	edd3 6a00 	vldr	s13, [r3]
 80aa170:	687b      	ldr	r3, [r7, #4]
 80aa172:	3304      	adds	r3, #4
 80aa174:	edd3 7a00 	vldr	s15, [r3]
 80aa178:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80aa17c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80aa180:	683b      	ldr	r3, [r7, #0]
 80aa182:	3320      	adds	r3, #32
 80aa184:	edd7 7a02 	vldr	s15, [r7, #8]
 80aa188:	ee67 7a27 	vmul.f32	s15, s14, s15
 80aa18c:	edc3 7a00 	vstr	s15, [r3]
 80aa190:	e000      	b.n	80aa194 <matrix_inverse+0x31c>
    return;
 80aa192:	bf00      	nop
}
 80aa194:	3714      	adds	r7, #20
 80aa196:	46bd      	mov	sp, r7
 80aa198:	f85d 7b04 	ldr.w	r7, [sp], #4
 80aa19c:	4770      	bx	lr

080aa19e <matrix_length>:

// calculate total force of matirx elements
static float matrix_length(float *matrix, int size)
{
 80aa19e:	b580      	push	{r7, lr}
 80aa1a0:	b086      	sub	sp, #24
 80aa1a2:	af00      	add	r7, sp, #0
 80aa1a4:	6078      	str	r0, [r7, #4]
 80aa1a6:	6039      	str	r1, [r7, #0]
  float sum = 0, norm = 0, temp = 0;
 80aa1a8:	f04f 0300 	mov.w	r3, #0
 80aa1ac:	617b      	str	r3, [r7, #20]
 80aa1ae:	f04f 0300 	mov.w	r3, #0
 80aa1b2:	60fb      	str	r3, [r7, #12]
 80aa1b4:	f04f 0300 	mov.w	r3, #0
 80aa1b8:	60bb      	str	r3, [r7, #8]
  int i = 0;
 80aa1ba:	2300      	movs	r3, #0
 80aa1bc:	613b      	str	r3, [r7, #16]

  for (i = 0; i < size; i++) {
 80aa1be:	2300      	movs	r3, #0
 80aa1c0:	613b      	str	r3, [r7, #16]
 80aa1c2:	e01a      	b.n	80aa1fa <matrix_length+0x5c>
    temp = matrix[i] * matrix[i];
 80aa1c4:	693b      	ldr	r3, [r7, #16]
 80aa1c6:	009b      	lsls	r3, r3, #2
 80aa1c8:	687a      	ldr	r2, [r7, #4]
 80aa1ca:	4413      	add	r3, r2
 80aa1cc:	ed93 7a00 	vldr	s14, [r3]
 80aa1d0:	693b      	ldr	r3, [r7, #16]
 80aa1d2:	009b      	lsls	r3, r3, #2
 80aa1d4:	687a      	ldr	r2, [r7, #4]
 80aa1d6:	4413      	add	r3, r2
 80aa1d8:	edd3 7a00 	vldr	s15, [r3]
 80aa1dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80aa1e0:	edc7 7a02 	vstr	s15, [r7, #8]
    sum += temp;
 80aa1e4:	ed97 7a05 	vldr	s14, [r7, #20]
 80aa1e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80aa1ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80aa1f0:	edc7 7a05 	vstr	s15, [r7, #20]
  for (i = 0; i < size; i++) {
 80aa1f4:	693b      	ldr	r3, [r7, #16]
 80aa1f6:	3301      	adds	r3, #1
 80aa1f8:	613b      	str	r3, [r7, #16]
 80aa1fa:	693a      	ldr	r2, [r7, #16]
 80aa1fc:	683b      	ldr	r3, [r7, #0]
 80aa1fe:	429a      	cmp	r2, r3
 80aa200:	dbe0      	blt.n	80aa1c4 <matrix_length+0x26>
  }
  norm = sqrtf(sum);
 80aa202:	ed97 0a05 	vldr	s0, [r7, #20]
 80aa206:	f018 fdf5 	bl	80c2df4 <sqrtf>
 80aa20a:	ed87 0a03 	vstr	s0, [r7, #12]

  return norm;
 80aa20e:	68fb      	ldr	r3, [r7, #12]
 80aa210:	ee07 3a90 	vmov	s15, r3
}
 80aa214:	eeb0 0a67 	vmov.f32	s0, s15
 80aa218:	3718      	adds	r7, #24
 80aa21a:	46bd      	mov	sp, r7
 80aa21c:	bd80      	pop	{r7, pc}
	...

080aa220 <matrix_normalize>:

static void matrix_normalize(float *matrix, int size)
{
 80aa220:	b580      	push	{r7, lr}
 80aa222:	b086      	sub	sp, #24
 80aa224:	af00      	add	r7, sp, #0
 80aa226:	6078      	str	r0, [r7, #4]
 80aa228:	6039      	str	r1, [r7, #0]
  float sum = 0, norm = 0, temp = 0;
 80aa22a:	f04f 0300 	mov.w	r3, #0
 80aa22e:	617b      	str	r3, [r7, #20]
 80aa230:	f04f 0300 	mov.w	r3, #0
 80aa234:	613b      	str	r3, [r7, #16]
 80aa236:	f04f 0300 	mov.w	r3, #0
 80aa23a:	60bb      	str	r3, [r7, #8]
  int i = 0;
 80aa23c:	2300      	movs	r3, #0
 80aa23e:	60fb      	str	r3, [r7, #12]

  for (i = 0; i < size; i++) {
 80aa240:	2300      	movs	r3, #0
 80aa242:	60fb      	str	r3, [r7, #12]
 80aa244:	e01a      	b.n	80aa27c <matrix_normalize+0x5c>
    temp = matrix[i] * matrix[i];
 80aa246:	68fb      	ldr	r3, [r7, #12]
 80aa248:	009b      	lsls	r3, r3, #2
 80aa24a:	687a      	ldr	r2, [r7, #4]
 80aa24c:	4413      	add	r3, r2
 80aa24e:	ed93 7a00 	vldr	s14, [r3]
 80aa252:	68fb      	ldr	r3, [r7, #12]
 80aa254:	009b      	lsls	r3, r3, #2
 80aa256:	687a      	ldr	r2, [r7, #4]
 80aa258:	4413      	add	r3, r2
 80aa25a:	edd3 7a00 	vldr	s15, [r3]
 80aa25e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80aa262:	edc7 7a02 	vstr	s15, [r7, #8]
    sum += temp;
 80aa266:	ed97 7a05 	vldr	s14, [r7, #20]
 80aa26a:	edd7 7a02 	vldr	s15, [r7, #8]
 80aa26e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80aa272:	edc7 7a05 	vstr	s15, [r7, #20]
  for (i = 0; i < size; i++) {
 80aa276:	68fb      	ldr	r3, [r7, #12]
 80aa278:	3301      	adds	r3, #1
 80aa27a:	60fb      	str	r3, [r7, #12]
 80aa27c:	68fa      	ldr	r2, [r7, #12]
 80aa27e:	683b      	ldr	r3, [r7, #0]
 80aa280:	429a      	cmp	r2, r3
 80aa282:	dbe0      	blt.n	80aa246 <matrix_normalize+0x26>
  }

  norm = sqrtf(sum);
 80aa284:	ed97 0a05 	vldr	s0, [r7, #20]
 80aa288:	f018 fdb4 	bl	80c2df4 <sqrtf>
 80aa28c:	ed87 0a04 	vstr	s0, [r7, #16]
  if (norm >= 0 && norm <= 0)   // prevent divide by 0
 80aa290:	edd7 7a04 	vldr	s15, [r7, #16]
 80aa294:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80aa298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80aa29c:	db08      	blt.n	80aa2b0 <matrix_normalize+0x90>
 80aa29e:	edd7 7a04 	vldr	s15, [r7, #16]
 80aa2a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80aa2a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80aa2aa:	d801      	bhi.n	80aa2b0 <matrix_normalize+0x90>
    norm = 0.0000000001f;
 80aa2ac:	4b10      	ldr	r3, [pc, #64]	; (80aa2f0 <matrix_normalize+0xd0>)
 80aa2ae:	613b      	str	r3, [r7, #16]
  for (i = 0; i < size; i++)
 80aa2b0:	2300      	movs	r3, #0
 80aa2b2:	60fb      	str	r3, [r7, #12]
 80aa2b4:	e012      	b.n	80aa2dc <matrix_normalize+0xbc>
    matrix[i] /= norm;
 80aa2b6:	68fb      	ldr	r3, [r7, #12]
 80aa2b8:	009b      	lsls	r3, r3, #2
 80aa2ba:	687a      	ldr	r2, [r7, #4]
 80aa2bc:	4413      	add	r3, r2
 80aa2be:	edd3 6a00 	vldr	s13, [r3]
 80aa2c2:	68fb      	ldr	r3, [r7, #12]
 80aa2c4:	009b      	lsls	r3, r3, #2
 80aa2c6:	687a      	ldr	r2, [r7, #4]
 80aa2c8:	4413      	add	r3, r2
 80aa2ca:	ed97 7a04 	vldr	s14, [r7, #16]
 80aa2ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80aa2d2:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < size; i++)
 80aa2d6:	68fb      	ldr	r3, [r7, #12]
 80aa2d8:	3301      	adds	r3, #1
 80aa2da:	60fb      	str	r3, [r7, #12]
 80aa2dc:	68fa      	ldr	r2, [r7, #12]
 80aa2de:	683b      	ldr	r3, [r7, #0]
 80aa2e0:	429a      	cmp	r2, r3
 80aa2e2:	dbe8      	blt.n	80aa2b6 <matrix_normalize+0x96>
}
 80aa2e4:	bf00      	nop
 80aa2e6:	bf00      	nop
 80aa2e8:	3718      	adds	r7, #24
 80aa2ea:	46bd      	mov	sp, r7
 80aa2ec:	bd80      	pop	{r7, pc}
 80aa2ee:	bf00      	nop
 80aa2f0:	2edbe6ff 	.word	0x2edbe6ff

080aa2f4 <remap_coordinates>:

static void remap_coordinates(float *mapped, float *ori, float *coord)
{
 80aa2f4:	b480      	push	{r7}
 80aa2f6:	b089      	sub	sp, #36	; 0x24
 80aa2f8:	af00      	add	r7, sp, #0
 80aa2fa:	60f8      	str	r0, [r7, #12]
 80aa2fc:	60b9      	str	r1, [r7, #8]
 80aa2fe:	607a      	str	r2, [r7, #4]
  float sum = 0, temp = 0;
 80aa300:	f04f 0300 	mov.w	r3, #0
 80aa304:	61fb      	str	r3, [r7, #28]
 80aa306:	f04f 0300 	mov.w	r3, #0
 80aa30a:	613b      	str	r3, [r7, #16]
  int i = 0, j = 0;
 80aa30c:	2300      	movs	r3, #0
 80aa30e:	61bb      	str	r3, [r7, #24]
 80aa310:	2300      	movs	r3, #0
 80aa312:	617b      	str	r3, [r7, #20]

  for (i = 0; i < 3; i++) {
 80aa314:	2300      	movs	r3, #0
 80aa316:	61bb      	str	r3, [r7, #24]
 80aa318:	e031      	b.n	80aa37e <remap_coordinates+0x8a>
    sum = 0;
 80aa31a:	f04f 0300 	mov.w	r3, #0
 80aa31e:	61fb      	str	r3, [r7, #28]
    for (j = 0; j < 3; j++) {
 80aa320:	2300      	movs	r3, #0
 80aa322:	617b      	str	r3, [r7, #20]
 80aa324:	e01f      	b.n	80aa366 <remap_coordinates+0x72>
      temp = ori[j] * coord[i * 3 + j];
 80aa326:	697b      	ldr	r3, [r7, #20]
 80aa328:	009b      	lsls	r3, r3, #2
 80aa32a:	68ba      	ldr	r2, [r7, #8]
 80aa32c:	4413      	add	r3, r2
 80aa32e:	ed93 7a00 	vldr	s14, [r3]
 80aa332:	69ba      	ldr	r2, [r7, #24]
 80aa334:	4613      	mov	r3, r2
 80aa336:	005b      	lsls	r3, r3, #1
 80aa338:	441a      	add	r2, r3
 80aa33a:	697b      	ldr	r3, [r7, #20]
 80aa33c:	4413      	add	r3, r2
 80aa33e:	009b      	lsls	r3, r3, #2
 80aa340:	687a      	ldr	r2, [r7, #4]
 80aa342:	4413      	add	r3, r2
 80aa344:	edd3 7a00 	vldr	s15, [r3]
 80aa348:	ee67 7a27 	vmul.f32	s15, s14, s15
 80aa34c:	edc7 7a04 	vstr	s15, [r7, #16]
      sum += temp;
 80aa350:	ed97 7a07 	vldr	s14, [r7, #28]
 80aa354:	edd7 7a04 	vldr	s15, [r7, #16]
 80aa358:	ee77 7a27 	vadd.f32	s15, s14, s15
 80aa35c:	edc7 7a07 	vstr	s15, [r7, #28]
    for (j = 0; j < 3; j++) {
 80aa360:	697b      	ldr	r3, [r7, #20]
 80aa362:	3301      	adds	r3, #1
 80aa364:	617b      	str	r3, [r7, #20]
 80aa366:	697b      	ldr	r3, [r7, #20]
 80aa368:	2b02      	cmp	r3, #2
 80aa36a:	dddc      	ble.n	80aa326 <remap_coordinates+0x32>
    }
    mapped[i] = sum;
 80aa36c:	69bb      	ldr	r3, [r7, #24]
 80aa36e:	009b      	lsls	r3, r3, #2
 80aa370:	68fa      	ldr	r2, [r7, #12]
 80aa372:	4413      	add	r3, r2
 80aa374:	69fa      	ldr	r2, [r7, #28]
 80aa376:	601a      	str	r2, [r3, #0]
  for (i = 0; i < 3; i++) {
 80aa378:	69bb      	ldr	r3, [r7, #24]
 80aa37a:	3301      	adds	r3, #1
 80aa37c:	61bb      	str	r3, [r7, #24]
 80aa37e:	69bb      	ldr	r3, [r7, #24]
 80aa380:	2b02      	cmp	r3, #2
 80aa382:	ddca      	ble.n	80aa31a <remap_coordinates+0x26>
  }
}
 80aa384:	bf00      	nop
 80aa386:	bf00      	nop
 80aa388:	3724      	adds	r7, #36	; 0x24
 80aa38a:	46bd      	mov	sp, r7
 80aa38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80aa390:	4770      	bx	lr
 80aa392:	0000      	movs	r0, r0
 80aa394:	0000      	movs	r0, r0
	...

080aa398 <imu_Acc_LowPassFilter>:

static void imu_Acc_LowPassFilter(float *raw, float *filtered)
{
 80aa398:	b5b0      	push	{r4, r5, r7, lr}
 80aa39a:	b090      	sub	sp, #64	; 0x40
 80aa39c:	af00      	add	r7, sp, #0
 80aa39e:	6078      	str	r0, [r7, #4]
 80aa3a0:	6039      	str	r1, [r7, #0]
  //25Hz sample rate with 0.1Hz/0.5Hz cutoff freq.
  //Denominator
  //const double a0 = 1;
  const double a1 = -0.88135386020153494;
 80aa3a2:	a34d      	add	r3, pc, #308	; (adr r3, 80aa4d8 <imu_Acc_LowPassFilter+0x140>)
 80aa3a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80aa3a8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  //Numerator
  const double b0 = 0.059323069899232528;
 80aa3ac:	a34c      	add	r3, pc, #304	; (adr r3, 80aa4e0 <imu_Acc_LowPassFilter+0x148>)
 80aa3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80aa3b2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  const double b1 = 0.059323069899232528;
 80aa3b6:	a34a      	add	r3, pc, #296	; (adr r3, 80aa4e0 <imu_Acc_LowPassFilter+0x148>)
 80aa3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80aa3bc:	e9c7 2308 	strd	r2, r3, [r7, #32]

  static double x_1[3] = { 0 };
  static double y_1[3] = { 0 };

  double filter_double[3] = { 0 };
 80aa3c0:	f107 0308 	add.w	r3, r7, #8
 80aa3c4:	2200      	movs	r2, #0
 80aa3c6:	601a      	str	r2, [r3, #0]
 80aa3c8:	605a      	str	r2, [r3, #4]
 80aa3ca:	609a      	str	r2, [r3, #8]
 80aa3cc:	60da      	str	r2, [r3, #12]
 80aa3ce:	611a      	str	r2, [r3, #16]
 80aa3d0:	615a      	str	r2, [r3, #20]

  for (int i = 0; i < 3; i++) {
 80aa3d2:	2300      	movs	r3, #0
 80aa3d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80aa3d6:	e070      	b.n	80aa4ba <imu_Acc_LowPassFilter+0x122>
    filter_double[i] = b0 * (double)raw[i] + b1 * x_1[i] - a1 * y_1[i];
 80aa3d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80aa3da:	009b      	lsls	r3, r3, #2
 80aa3dc:	687a      	ldr	r2, [r7, #4]
 80aa3de:	4413      	add	r3, r2
 80aa3e0:	681b      	ldr	r3, [r3, #0]
 80aa3e2:	4618      	mov	r0, r3
 80aa3e4:	f7f6 f8b0 	bl	80a0548 <__aeabi_f2d>
 80aa3e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80aa3ec:	f7f6 f904 	bl	80a05f8 <__aeabi_dmul>
 80aa3f0:	4602      	mov	r2, r0
 80aa3f2:	460b      	mov	r3, r1
 80aa3f4:	4614      	mov	r4, r2
 80aa3f6:	461d      	mov	r5, r3
 80aa3f8:	4a35      	ldr	r2, [pc, #212]	; (80aa4d0 <imu_Acc_LowPassFilter+0x138>)
 80aa3fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80aa3fc:	00db      	lsls	r3, r3, #3
 80aa3fe:	4413      	add	r3, r2
 80aa400:	e9d3 0100 	ldrd	r0, r1, [r3]
 80aa404:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80aa408:	f7f6 f8f6 	bl	80a05f8 <__aeabi_dmul>
 80aa40c:	4602      	mov	r2, r0
 80aa40e:	460b      	mov	r3, r1
 80aa410:	4620      	mov	r0, r4
 80aa412:	4629      	mov	r1, r5
 80aa414:	f7f5 ff3a 	bl	80a028c <__adddf3>
 80aa418:	4602      	mov	r2, r0
 80aa41a:	460b      	mov	r3, r1
 80aa41c:	4614      	mov	r4, r2
 80aa41e:	461d      	mov	r5, r3
 80aa420:	4a2c      	ldr	r2, [pc, #176]	; (80aa4d4 <imu_Acc_LowPassFilter+0x13c>)
 80aa422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80aa424:	00db      	lsls	r3, r3, #3
 80aa426:	4413      	add	r3, r2
 80aa428:	e9d3 0100 	ldrd	r0, r1, [r3]
 80aa42c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80aa430:	f7f6 f8e2 	bl	80a05f8 <__aeabi_dmul>
 80aa434:	4602      	mov	r2, r0
 80aa436:	460b      	mov	r3, r1
 80aa438:	4620      	mov	r0, r4
 80aa43a:	4629      	mov	r1, r5
 80aa43c:	f7f5 ff24 	bl	80a0288 <__aeabi_dsub>
 80aa440:	4602      	mov	r2, r0
 80aa442:	460b      	mov	r3, r1
 80aa444:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80aa446:	00c9      	lsls	r1, r1, #3
 80aa448:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80aa44c:	4401      	add	r1, r0
 80aa44e:	3938      	subs	r1, #56	; 0x38
 80aa450:	e9c1 2300 	strd	r2, r3, [r1]

    x_1[i] = (double)raw[i];
 80aa454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80aa456:	009b      	lsls	r3, r3, #2
 80aa458:	687a      	ldr	r2, [r7, #4]
 80aa45a:	4413      	add	r3, r2
 80aa45c:	681b      	ldr	r3, [r3, #0]
 80aa45e:	4618      	mov	r0, r3
 80aa460:	f7f6 f872 	bl	80a0548 <__aeabi_f2d>
 80aa464:	4602      	mov	r2, r0
 80aa466:	460b      	mov	r3, r1
 80aa468:	4819      	ldr	r0, [pc, #100]	; (80aa4d0 <imu_Acc_LowPassFilter+0x138>)
 80aa46a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80aa46c:	00c9      	lsls	r1, r1, #3
 80aa46e:	4401      	add	r1, r0
 80aa470:	e9c1 2300 	strd	r2, r3, [r1]
    y_1[i] = filter_double[i];
 80aa474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80aa476:	00db      	lsls	r3, r3, #3
 80aa478:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80aa47c:	4413      	add	r3, r2
 80aa47e:	3b38      	subs	r3, #56	; 0x38
 80aa480:	e9d3 2300 	ldrd	r2, r3, [r3]
 80aa484:	4813      	ldr	r0, [pc, #76]	; (80aa4d4 <imu_Acc_LowPassFilter+0x13c>)
 80aa486:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80aa488:	00c9      	lsls	r1, r1, #3
 80aa48a:	4401      	add	r1, r0
 80aa48c:	e9c1 2300 	strd	r2, r3, [r1]

    filtered[i] = (float)filter_double[i];
 80aa490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80aa492:	00db      	lsls	r3, r3, #3
 80aa494:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80aa498:	4413      	add	r3, r2
 80aa49a:	3b38      	subs	r3, #56	; 0x38
 80aa49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80aa4a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80aa4a2:	0089      	lsls	r1, r1, #2
 80aa4a4:	6838      	ldr	r0, [r7, #0]
 80aa4a6:	1844      	adds	r4, r0, r1
 80aa4a8:	4610      	mov	r0, r2
 80aa4aa:	4619      	mov	r1, r3
 80aa4ac:	f7f6 fb9c 	bl	80a0be8 <__aeabi_d2f>
 80aa4b0:	4603      	mov	r3, r0
 80aa4b2:	6023      	str	r3, [r4, #0]
  for (int i = 0; i < 3; i++) {
 80aa4b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80aa4b6:	3301      	adds	r3, #1
 80aa4b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80aa4ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80aa4bc:	2b02      	cmp	r3, #2
 80aa4be:	dd8b      	ble.n	80aa3d8 <imu_Acc_LowPassFilter+0x40>
  }
}
 80aa4c0:	bf00      	nop
 80aa4c2:	bf00      	nop
 80aa4c4:	3740      	adds	r7, #64	; 0x40
 80aa4c6:	46bd      	mov	sp, r7
 80aa4c8:	bdb0      	pop	{r4, r5, r7, pc}
 80aa4ca:	bf00      	nop
 80aa4cc:	f3af 8000 	nop.w
 80aa4d0:	200081a0 	.word	0x200081a0
 80aa4d4:	200081b8 	.word	0x200081b8
 80aa4d8:	02b89b3a 	.word	0x02b89b3a
 80aa4dc:	bfec340d 	.word	0xbfec340d
 80aa4e0:	ea3b2630 	.word	0xea3b2630
 80aa4e4:	3fae5f97 	.word	0x3fae5f97

080aa4e8 <preprocess>:
    filtered[i] = (float)filter_double[i];
  }
}

static int preprocess(float *input_data, int data_type)
{
 80aa4e8:	b5b0      	push	{r4, r5, r7, lr}
 80aa4ea:	b096      	sub	sp, #88	; 0x58
 80aa4ec:	af00      	add	r7, sp, #0
 80aa4ee:	6078      	str	r0, [r7, #4]
 80aa4f0:	6039      	str	r1, [r7, #0]
  int i = 0;
 80aa4f2:	2300      	movs	r3, #0
 80aa4f4:	657b      	str	r3, [r7, #84]	; 0x54
  static float gyro_strength = -1;
  float ANDROID_AXES[] = { 1, 0, 0,     // Android axis: roll:90~-90, pitch:180~-180
 80aa4f6:	4b85      	ldr	r3, [pc, #532]	; (80aa70c <preprocess+0x224>)
 80aa4f8:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80aa4fc:	461d      	mov	r5, r3
 80aa4fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80aa500:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80aa502:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80aa504:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80aa506:	682b      	ldr	r3, [r5, #0]
 80aa508:	6023      	str	r3, [r4, #0]
    0, -1, 0, 0, 0, -1
  };
  if (data_type == SENSOR_TYPE_ACCELEROMETER
 80aa50a:	683b      	ldr	r3, [r7, #0]
 80aa50c:	2b00      	cmp	r3, #0
 80aa50e:	d002      	beq.n	80aa516 <preprocess+0x2e>
      || data_type == SENSOR_TYPE_MAGNETIC_FIELD) {
 80aa510:	683b      	ldr	r3, [r7, #0]
 80aa512:	2b01      	cmp	r3, #1
 80aa514:	d139      	bne.n	80aa58a <preprocess+0xa2>
    if (input_data[0] >= 0 && input_data[0] <= 0 && input_data[1] >= 0
 80aa516:	687b      	ldr	r3, [r7, #4]
 80aa518:	edd3 7a00 	vldr	s15, [r3]
 80aa51c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80aa520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80aa524:	db31      	blt.n	80aa58a <preprocess+0xa2>
 80aa526:	687b      	ldr	r3, [r7, #4]
 80aa528:	edd3 7a00 	vldr	s15, [r3]
 80aa52c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80aa530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80aa534:	d829      	bhi.n	80aa58a <preprocess+0xa2>
 80aa536:	687b      	ldr	r3, [r7, #4]
 80aa538:	3304      	adds	r3, #4
 80aa53a:	edd3 7a00 	vldr	s15, [r3]
 80aa53e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80aa542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80aa546:	db20      	blt.n	80aa58a <preprocess+0xa2>
        && input_data[1] <= 0 && input_data[2] >= 0 && input_data[2] <= 0) {
 80aa548:	687b      	ldr	r3, [r7, #4]
 80aa54a:	3304      	adds	r3, #4
 80aa54c:	edd3 7a00 	vldr	s15, [r3]
 80aa550:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80aa554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80aa558:	d817      	bhi.n	80aa58a <preprocess+0xa2>
 80aa55a:	687b      	ldr	r3, [r7, #4]
 80aa55c:	3308      	adds	r3, #8
 80aa55e:	edd3 7a00 	vldr	s15, [r3]
 80aa562:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80aa566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80aa56a:	db0e      	blt.n	80aa58a <preprocess+0xa2>
 80aa56c:	687b      	ldr	r3, [r7, #4]
 80aa56e:	3308      	adds	r3, #8
 80aa570:	edd3 7a00 	vldr	s15, [r3]
 80aa574:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80aa578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80aa57c:	d805      	bhi.n	80aa58a <preprocess+0xa2>
      printf("input_data are all zeros, return!\r\n");
 80aa57e:	4864      	ldr	r0, [pc, #400]	; (80aa710 <preprocess+0x228>)
 80aa580:	f016 fa94 	bl	80c0aac <puts>
      return -1;
 80aa584:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80aa588:	e0bc      	b.n	80aa704 <preprocess+0x21c>
    }
  }
  // transform to Android axis
  if (data_type == SENSOR_TYPE_ACCELEROMETER) {
 80aa58a:	683b      	ldr	r3, [r7, #0]
 80aa58c:	2b00      	cmp	r3, #0
 80aa58e:	f040 8097 	bne.w	80aa6c0 <preprocess+0x1d8>
    remap_coordinates(posture_loc.acc, input_data, ANDROID_AXES);
 80aa592:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80aa596:	461a      	mov	r2, r3
 80aa598:	6879      	ldr	r1, [r7, #4]
 80aa59a:	485e      	ldr	r0, [pc, #376]	; (80aa714 <preprocess+0x22c>)
 80aa59c:	f7ff feaa 	bl	80aa2f4 <remap_coordinates>
    for (i = 0; i < 3; i++)
 80aa5a0:	2300      	movs	r3, #0
 80aa5a2:	657b      	str	r3, [r7, #84]	; 0x54
 80aa5a4:	e016      	b.n	80aa5d4 <preprocess+0xec>
      posture_loc.acc[i] /= -9.80665f;
 80aa5a6:	4a5c      	ldr	r2, [pc, #368]	; (80aa718 <preprocess+0x230>)
 80aa5a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80aa5aa:	332a      	adds	r3, #42	; 0x2a
 80aa5ac:	009b      	lsls	r3, r3, #2
 80aa5ae:	4413      	add	r3, r2
 80aa5b0:	3304      	adds	r3, #4
 80aa5b2:	ed93 7a00 	vldr	s14, [r3]
 80aa5b6:	eddf 6a59 	vldr	s13, [pc, #356]	; 80aa71c <preprocess+0x234>
 80aa5ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80aa5be:	4a56      	ldr	r2, [pc, #344]	; (80aa718 <preprocess+0x230>)
 80aa5c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80aa5c2:	332a      	adds	r3, #42	; 0x2a
 80aa5c4:	009b      	lsls	r3, r3, #2
 80aa5c6:	4413      	add	r3, r2
 80aa5c8:	3304      	adds	r3, #4
 80aa5ca:	edc3 7a00 	vstr	s15, [r3]
    for (i = 0; i < 3; i++)
 80aa5ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80aa5d0:	3301      	adds	r3, #1
 80aa5d2:	657b      	str	r3, [r7, #84]	; 0x54
 80aa5d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80aa5d6:	2b02      	cmp	r3, #2
 80aa5d8:	dde5      	ble.n	80aa5a6 <preprocess+0xbe>
    float acc_strength = matrix_length(posture_loc.acc, 3);
 80aa5da:	2103      	movs	r1, #3
 80aa5dc:	484d      	ldr	r0, [pc, #308]	; (80aa714 <preprocess+0x22c>)
 80aa5de:	f7ff fdde 	bl	80aa19e <matrix_length>
 80aa5e2:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
    posture_loc.acc_correct = 0;
 80aa5e6:	4b4c      	ldr	r3, [pc, #304]	; (80aa718 <preprocess+0x230>)
 80aa5e8:	2200      	movs	r2, #0
 80aa5ea:	605a      	str	r2, [r3, #4]
    float acc_g_lpf_out[3] = { 0 };
 80aa5ec:	f107 0318 	add.w	r3, r7, #24
 80aa5f0:	2200      	movs	r2, #0
 80aa5f2:	601a      	str	r2, [r3, #0]
 80aa5f4:	605a      	str	r2, [r3, #4]
 80aa5f6:	609a      	str	r2, [r3, #8]
    imu_Acc_LowPassFilter(posture_loc.acc, acc_g_lpf_out);
 80aa5f8:	f107 0318 	add.w	r3, r7, #24
 80aa5fc:	4619      	mov	r1, r3
 80aa5fe:	4845      	ldr	r0, [pc, #276]	; (80aa714 <preprocess+0x22c>)
 80aa600:	f7ff feca 	bl	80aa398 <imu_Acc_LowPassFilter>
    //swl
    //if (gyro_strength > 0 && gyro_strength < 1.75f) { don't use gyro to restrict acc processing
    if (acc_strength < 1.15f && acc_strength > 0.85f) {
 80aa604:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80aa608:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80aa720 <preprocess+0x238>
 80aa60c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80aa610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80aa614:	d575      	bpl.n	80aa702 <preprocess+0x21a>
 80aa616:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80aa61a:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80aa724 <preprocess+0x23c>
 80aa61e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80aa622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80aa626:	dd6c      	ble.n	80aa702 <preprocess+0x21a>

      float acc_uncert_bias = fabs(acc_strength - 1.0f);
 80aa628:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80aa62c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80aa630:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80aa634:	eef0 7ae7 	vabs.f32	s15, s15
 80aa638:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      float total_uncertain[3] = { 0 };
 80aa63c:	f107 030c 	add.w	r3, r7, #12
 80aa640:	2200      	movs	r2, #0
 80aa642:	601a      	str	r2, [r3, #0]
 80aa644:	605a      	str	r2, [r3, #4]
 80aa646:	609a      	str	r2, [r3, #8]

      for (int i = 0; i < 3; i++) {
 80aa648:	2300      	movs	r3, #0
 80aa64a:	653b      	str	r3, [r7, #80]	; 0x50
 80aa64c:	e031      	b.n	80aa6b2 <preprocess+0x1ca>
//        total_uncertain[i] = fabs(posture_loc.acc[i] - acc_g_lpf_out[i])        //swl,use out?
//            + acc_uncert_bias;
//        total_uncertain[i] = fabs(posture_loc.acc[i] - acc_g_lpf_out[i]);


        if (total_uncertain[i] < 0.001f)        //min = 0.01 m/s2
 80aa64e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80aa650:	009b      	lsls	r3, r3, #2
 80aa652:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80aa656:	4413      	add	r3, r2
 80aa658:	3b4c      	subs	r3, #76	; 0x4c
 80aa65a:	edd3 7a00 	vldr	s15, [r3]
 80aa65e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80aa728 <preprocess+0x240>
 80aa662:	eef4 7ac7 	vcmpe.f32	s15, s14
 80aa666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80aa66a:	d507      	bpl.n	80aa67c <preprocess+0x194>
          total_uncertain[i] = 0.001f;
 80aa66c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80aa66e:	009b      	lsls	r3, r3, #2
 80aa670:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80aa674:	4413      	add	r3, r2
 80aa676:	3b4c      	subs	r3, #76	; 0x4c
 80aa678:	4a2c      	ldr	r2, [pc, #176]	; (80aa72c <preprocess+0x244>)
 80aa67a:	601a      	str	r2, [r3, #0]

        acc_correct_var[i] = total_uncertain[i] * total_uncertain[i];   //swl
 80aa67c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80aa67e:	009b      	lsls	r3, r3, #2
 80aa680:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80aa684:	4413      	add	r3, r2
 80aa686:	3b4c      	subs	r3, #76	; 0x4c
 80aa688:	ed93 7a00 	vldr	s14, [r3]
 80aa68c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80aa68e:	009b      	lsls	r3, r3, #2
 80aa690:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80aa694:	4413      	add	r3, r2
 80aa696:	3b4c      	subs	r3, #76	; 0x4c
 80aa698:	edd3 7a00 	vldr	s15, [r3]
 80aa69c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80aa6a0:	4a23      	ldr	r2, [pc, #140]	; (80aa730 <preprocess+0x248>)
 80aa6a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80aa6a4:	009b      	lsls	r3, r3, #2
 80aa6a6:	4413      	add	r3, r2
 80aa6a8:	edc3 7a00 	vstr	s15, [r3]
      for (int i = 0; i < 3; i++) {
 80aa6ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80aa6ae:	3301      	adds	r3, #1
 80aa6b0:	653b      	str	r3, [r7, #80]	; 0x50
 80aa6b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80aa6b4:	2b02      	cmp	r3, #2
 80aa6b6:	ddca      	ble.n	80aa64e <preprocess+0x166>
      }
      posture_loc.acc_correct = 1;
 80aa6b8:	4b17      	ldr	r3, [pc, #92]	; (80aa718 <preprocess+0x230>)
 80aa6ba:	2201      	movs	r2, #1
 80aa6bc:	605a      	str	r2, [r3, #4]
 80aa6be:	e020      	b.n	80aa702 <preprocess+0x21a>
    }
    //}
  } else if (data_type == SENSOR_TYPE_GYROSCOPE) {
 80aa6c0:	683b      	ldr	r3, [r7, #0]
 80aa6c2:	2b02      	cmp	r3, #2
 80aa6c4:	d110      	bne.n	80aa6e8 <preprocess+0x200>
    remap_coordinates(posture_loc.gyro, input_data, ANDROID_AXES);
 80aa6c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80aa6ca:	461a      	mov	r2, r3
 80aa6cc:	6879      	ldr	r1, [r7, #4]
 80aa6ce:	4819      	ldr	r0, [pc, #100]	; (80aa734 <preprocess+0x24c>)
 80aa6d0:	f7ff fe10 	bl	80aa2f4 <remap_coordinates>
    gyro_strength = matrix_length(posture_loc.gyro, 3);
 80aa6d4:	2103      	movs	r1, #3
 80aa6d6:	4817      	ldr	r0, [pc, #92]	; (80aa734 <preprocess+0x24c>)
 80aa6d8:	f7ff fd61 	bl	80aa19e <matrix_length>
 80aa6dc:	eef0 7a40 	vmov.f32	s15, s0
 80aa6e0:	4b15      	ldr	r3, [pc, #84]	; (80aa738 <preprocess+0x250>)
 80aa6e2:	edc3 7a00 	vstr	s15, [r3]
 80aa6e6:	e00c      	b.n	80aa702 <preprocess+0x21a>
  } else if (data_type == SENSOR_TYPE_MAGNETIC_FIELD) {
 80aa6e8:	683b      	ldr	r3, [r7, #0]
 80aa6ea:	2b01      	cmp	r3, #1
 80aa6ec:	d109      	bne.n	80aa702 <preprocess+0x21a>
    remap_coordinates(posture_loc.mag, input_data, ANDROID_AXES);
 80aa6ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80aa6f2:	461a      	mov	r2, r3
 80aa6f4:	6879      	ldr	r1, [r7, #4]
 80aa6f6:	4811      	ldr	r0, [pc, #68]	; (80aa73c <preprocess+0x254>)
 80aa6f8:	f7ff fdfc 	bl	80aa2f4 <remap_coordinates>
    posture_loc.mag_correct = 0;
 80aa6fc:	4b06      	ldr	r3, [pc, #24]	; (80aa718 <preprocess+0x230>)
 80aa6fe:	2200      	movs	r2, #0
 80aa700:	609a      	str	r2, [r3, #8]
  }
  return 0;
 80aa702:	2300      	movs	r3, #0
}
 80aa704:	4618      	mov	r0, r3
 80aa706:	3758      	adds	r7, #88	; 0x58
 80aa708:	46bd      	mov	sp, r7
 80aa70a:	bdb0      	pop	{r4, r5, r7, pc}
 80aa70c:	080c5d24 	.word	0x080c5d24
 80aa710:	080c5d00 	.word	0x080c5d00
 80aa714:	20008168 	.word	0x20008168
 80aa718:	200080bc 	.word	0x200080bc
 80aa71c:	c11ce80a 	.word	0xc11ce80a
 80aa720:	3f933333 	.word	0x3f933333
 80aa724:	3f59999a 	.word	0x3f59999a
 80aa728:	3a83126f 	.word	0x3a83126f
 80aa72c:	3a83126f 	.word	0x3a83126f
 80aa730:	20007890 	.word	0x20007890
 80aa734:	20008174 	.word	0x20008174
 80aa738:	200078ac 	.word	0x200078ac
 80aa73c:	20008180 	.word	0x20008180

080aa740 <setting_state>:

static void setting_state(float *acc, float *mag, float *state_1)
{                               // state_1: previous state
 80aa740:	b580      	push	{r7, lr}
 80aa742:	ed2d 8b02 	vpush	{d8}
 80aa746:	b092      	sub	sp, #72	; 0x48
 80aa748:	af00      	add	r7, sp, #0
 80aa74a:	60f8      	str	r0, [r7, #12]
 80aa74c:	60b9      	str	r1, [r7, #8]
 80aa74e:	607a      	str	r2, [r7, #4]
  float init_theta = 0, init_phi = 0, init_psi = 0;
 80aa750:	f04f 0300 	mov.w	r3, #0
 80aa754:	643b      	str	r3, [r7, #64]	; 0x40
 80aa756:	f04f 0300 	mov.w	r3, #0
 80aa75a:	647b      	str	r3, [r7, #68]	; 0x44
 80aa75c:	f04f 0300 	mov.w	r3, #0
 80aa760:	63fb      	str	r3, [r7, #60]	; 0x3c
  float cos_pitch = 0, sin_pitch = 0, cos_roll = 0, sin_roll = 0;
 80aa762:	f04f 0300 	mov.w	r3, #0
 80aa766:	63bb      	str	r3, [r7, #56]	; 0x38
 80aa768:	f04f 0300 	mov.w	r3, #0
 80aa76c:	637b      	str	r3, [r7, #52]	; 0x34
 80aa76e:	f04f 0300 	mov.w	r3, #0
 80aa772:	633b      	str	r3, [r7, #48]	; 0x30
 80aa774:	f04f 0300 	mov.w	r3, #0
 80aa778:	62fb      	str	r3, [r7, #44]	; 0x2c
  float cp2 = 0, sp2 = 0, cr2 = 0, sr2 = 0, cy2 = 0, sy2 = 0;
 80aa77a:	f04f 0300 	mov.w	r3, #0
 80aa77e:	62bb      	str	r3, [r7, #40]	; 0x28
 80aa780:	f04f 0300 	mov.w	r3, #0
 80aa784:	627b      	str	r3, [r7, #36]	; 0x24
 80aa786:	f04f 0300 	mov.w	r3, #0
 80aa78a:	623b      	str	r3, [r7, #32]
 80aa78c:	f04f 0300 	mov.w	r3, #0
 80aa790:	61fb      	str	r3, [r7, #28]
 80aa792:	f04f 0300 	mov.w	r3, #0
 80aa796:	61bb      	str	r3, [r7, #24]
 80aa798:	f04f 0300 	mov.w	r3, #0
 80aa79c:	617b      	str	r3, [r7, #20]

  // ===== use acc to calculate roll and pitch =====//
  init_theta = atan2f(-acc[0], sqrtf(acc[1] * acc[1] + acc[2] * acc[2]));
 80aa79e:	68fb      	ldr	r3, [r7, #12]
 80aa7a0:	edd3 7a00 	vldr	s15, [r3]
 80aa7a4:	eeb1 8a67 	vneg.f32	s16, s15
 80aa7a8:	68fb      	ldr	r3, [r7, #12]
 80aa7aa:	3304      	adds	r3, #4
 80aa7ac:	ed93 7a00 	vldr	s14, [r3]
 80aa7b0:	68fb      	ldr	r3, [r7, #12]
 80aa7b2:	3304      	adds	r3, #4
 80aa7b4:	edd3 7a00 	vldr	s15, [r3]
 80aa7b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80aa7bc:	68fb      	ldr	r3, [r7, #12]
 80aa7be:	3308      	adds	r3, #8
 80aa7c0:	edd3 6a00 	vldr	s13, [r3]
 80aa7c4:	68fb      	ldr	r3, [r7, #12]
 80aa7c6:	3308      	adds	r3, #8
 80aa7c8:	edd3 7a00 	vldr	s15, [r3]
 80aa7cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80aa7d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80aa7d4:	eeb0 0a67 	vmov.f32	s0, s15
 80aa7d8:	f018 fb0c 	bl	80c2df4 <sqrtf>
 80aa7dc:	eef0 7a40 	vmov.f32	s15, s0
 80aa7e0:	eef0 0a67 	vmov.f32	s1, s15
 80aa7e4:	eeb0 0a48 	vmov.f32	s0, s16
 80aa7e8:	f018 fb02 	bl	80c2df0 <atan2f>
 80aa7ec:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
  init_phi = atan2f(acc[1], acc[2]);
 80aa7f0:	68fb      	ldr	r3, [r7, #12]
 80aa7f2:	3304      	adds	r3, #4
 80aa7f4:	edd3 7a00 	vldr	s15, [r3]
 80aa7f8:	68fb      	ldr	r3, [r7, #12]
 80aa7fa:	3308      	adds	r3, #8
 80aa7fc:	ed93 7a00 	vldr	s14, [r3]
 80aa800:	eef0 0a47 	vmov.f32	s1, s14
 80aa804:	eeb0 0a67 	vmov.f32	s0, s15
 80aa808:	f018 faf2 	bl	80c2df0 <atan2f>
 80aa80c:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44

  if (acc[2] < 0) {
 80aa810:	68fb      	ldr	r3, [r7, #12]
 80aa812:	3308      	adds	r3, #8
 80aa814:	edd3 7a00 	vldr	s15, [r3]
 80aa818:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80aa81c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80aa820:	d517      	bpl.n	80aa852 <setting_state+0x112>
    if (init_phi < 0)
 80aa822:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80aa826:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80aa82a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80aa82e:	d508      	bpl.n	80aa842 <setting_state+0x102>
      init_phi = -_PI - init_phi;
 80aa830:	ed9f 7a91 	vldr	s14, [pc, #580]	; 80aaa78 <setting_state+0x338>
 80aa834:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80aa838:	ee77 7a67 	vsub.f32	s15, s14, s15
 80aa83c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
 80aa840:	e007      	b.n	80aa852 <setting_state+0x112>
    else
      init_phi = _PI - init_phi;
 80aa842:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 80aaa7c <setting_state+0x33c>
 80aa846:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80aa84a:	ee77 7a67 	vsub.f32	s15, s14, s15
 80aa84e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
  }

  cos_pitch = cosf(init_theta);
 80aa852:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 80aa856:	f018 f969 	bl	80c2b2c <cosf>
 80aa85a:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
  sin_pitch = sinf(init_theta);
 80aa85e:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 80aa862:	f018 f9a3 	bl	80c2bac <sinf>
 80aa866:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
  cos_roll = cosf(init_phi);
 80aa86a:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 80aa86e:	f018 f95d 	bl	80c2b2c <cosf>
 80aa872:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
  sin_roll = sinf(init_phi);
 80aa876:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 80aa87a:	f018 f997 	bl	80c2bac <sinf>
 80aa87e:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
  // ===== use acc to calculate roll and pitch =====//

  // ===== use mag to calculate yaw =====//
  init_psi = -atan2f(mag[0] * cos_pitch + mag[1] * sin_pitch * sin_roll
 80aa882:	68bb      	ldr	r3, [r7, #8]
 80aa884:	ed93 7a00 	vldr	s14, [r3]
 80aa888:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80aa88c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80aa890:	68bb      	ldr	r3, [r7, #8]
 80aa892:	3304      	adds	r3, #4
 80aa894:	edd3 6a00 	vldr	s13, [r3]
 80aa898:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80aa89c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80aa8a0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80aa8a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80aa8a8:	ee37 7a27 	vadd.f32	s14, s14, s15
                     + mag[2] * sin_pitch * cos_roll,
 80aa8ac:	68bb      	ldr	r3, [r7, #8]
 80aa8ae:	3308      	adds	r3, #8
 80aa8b0:	edd3 6a00 	vldr	s13, [r3]
 80aa8b4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80aa8b8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80aa8bc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80aa8c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
  init_psi = -atan2f(mag[0] * cos_pitch + mag[1] * sin_pitch * sin_roll
 80aa8c4:	ee37 6a27 	vadd.f32	s12, s14, s15
                     mag[2] * sin_roll - mag[1] * cos_roll);
 80aa8c8:	68bb      	ldr	r3, [r7, #8]
 80aa8ca:	3308      	adds	r3, #8
 80aa8cc:	ed93 7a00 	vldr	s14, [r3]
 80aa8d0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80aa8d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80aa8d8:	68bb      	ldr	r3, [r7, #8]
 80aa8da:	3304      	adds	r3, #4
 80aa8dc:	edd3 6a00 	vldr	s13, [r3]
 80aa8e0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80aa8e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
  init_psi = -atan2f(mag[0] * cos_pitch + mag[1] * sin_pitch * sin_roll
 80aa8e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80aa8ec:	eef0 0a67 	vmov.f32	s1, s15
 80aa8f0:	eeb0 0a46 	vmov.f32	s0, s12
 80aa8f4:	f018 fa7c 	bl	80c2df0 <atan2f>
 80aa8f8:	eef0 7a40 	vmov.f32	s15, s0
 80aa8fc:	eef1 7a67 	vneg.f32	s15, s15
 80aa900:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
  // ===== use mag to calculate yaw =====//

  // ===== convert euler angle to quaternion =====//
  cp2 = cosf(init_theta / 2.0f);
 80aa904:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80aa908:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80aa90c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80aa910:	eeb0 0a47 	vmov.f32	s0, s14
 80aa914:	f018 f90a 	bl	80c2b2c <cosf>
 80aa918:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
  sp2 = sinf(init_theta / 2.0f);
 80aa91c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80aa920:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80aa924:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80aa928:	eeb0 0a47 	vmov.f32	s0, s14
 80aa92c:	f018 f93e 	bl	80c2bac <sinf>
 80aa930:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
  cr2 = cosf(init_phi / 2.0f);
 80aa934:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80aa938:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80aa93c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80aa940:	eeb0 0a47 	vmov.f32	s0, s14
 80aa944:	f018 f8f2 	bl	80c2b2c <cosf>
 80aa948:	ed87 0a08 	vstr	s0, [r7, #32]
  sr2 = sinf(init_phi / 2.0f);
 80aa94c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80aa950:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80aa954:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80aa958:	eeb0 0a47 	vmov.f32	s0, s14
 80aa95c:	f018 f926 	bl	80c2bac <sinf>
 80aa960:	ed87 0a07 	vstr	s0, [r7, #28]
  cy2 = cosf(init_psi / 2.0f);
 80aa964:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80aa968:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80aa96c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80aa970:	eeb0 0a47 	vmov.f32	s0, s14
 80aa974:	f018 f8da 	bl	80c2b2c <cosf>
 80aa978:	ed87 0a06 	vstr	s0, [r7, #24]
  sy2 = sinf(init_psi / 2.0f);
 80aa97c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80aa980:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80aa984:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80aa988:	eeb0 0a47 	vmov.f32	s0, s14
 80aa98c:	f018 f90e 	bl	80c2bac <sinf>
 80aa990:	ed87 0a05 	vstr	s0, [r7, #20]

  state_1[0] = cy2 * cp2 * cr2 + sy2 * sp2 * sr2;
 80aa994:	ed97 7a06 	vldr	s14, [r7, #24]
 80aa998:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80aa99c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80aa9a0:	edd7 7a08 	vldr	s15, [r7, #32]
 80aa9a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80aa9a8:	edd7 6a05 	vldr	s13, [r7, #20]
 80aa9ac:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80aa9b0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80aa9b4:	edd7 7a07 	vldr	s15, [r7, #28]
 80aa9b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80aa9bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80aa9c0:	687b      	ldr	r3, [r7, #4]
 80aa9c2:	edc3 7a00 	vstr	s15, [r3]
  state_1[1] = cy2 * cp2 * sr2 - sy2 * sp2 * cr2;
 80aa9c6:	ed97 7a06 	vldr	s14, [r7, #24]
 80aa9ca:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80aa9ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80aa9d2:	edd7 7a07 	vldr	s15, [r7, #28]
 80aa9d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80aa9da:	edd7 6a05 	vldr	s13, [r7, #20]
 80aa9de:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80aa9e2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80aa9e6:	edd7 7a08 	vldr	s15, [r7, #32]
 80aa9ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80aa9ee:	687b      	ldr	r3, [r7, #4]
 80aa9f0:	3304      	adds	r3, #4
 80aa9f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80aa9f6:	edc3 7a00 	vstr	s15, [r3]
  state_1[2] = cy2 * sp2 * cr2 + sy2 * cp2 * sr2;
 80aa9fa:	ed97 7a06 	vldr	s14, [r7, #24]
 80aa9fe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80aaa02:	ee27 7a27 	vmul.f32	s14, s14, s15
 80aaa06:	edd7 7a08 	vldr	s15, [r7, #32]
 80aaa0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 80aaa0e:	edd7 6a05 	vldr	s13, [r7, #20]
 80aaa12:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80aaa16:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80aaa1a:	edd7 7a07 	vldr	s15, [r7, #28]
 80aaa1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80aaa22:	687b      	ldr	r3, [r7, #4]
 80aaa24:	3308      	adds	r3, #8
 80aaa26:	ee77 7a27 	vadd.f32	s15, s14, s15
 80aaa2a:	edc3 7a00 	vstr	s15, [r3]
  state_1[3] = sy2 * cp2 * cr2 - cy2 * sp2 * sr2;
 80aaa2e:	ed97 7a05 	vldr	s14, [r7, #20]
 80aaa32:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80aaa36:	ee27 7a27 	vmul.f32	s14, s14, s15
 80aaa3a:	edd7 7a08 	vldr	s15, [r7, #32]
 80aaa3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80aaa42:	edd7 6a06 	vldr	s13, [r7, #24]
 80aaa46:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80aaa4a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80aaa4e:	edd7 7a07 	vldr	s15, [r7, #28]
 80aaa52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80aaa56:	687b      	ldr	r3, [r7, #4]
 80aaa58:	330c      	adds	r3, #12
 80aaa5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 80aaa5e:	edc3 7a00 	vstr	s15, [r3]
  // ===== convert euler angle to quaternion =====//

  matrix_normalize(state_1, 4); // data of quaternion should be in 1~-1
 80aaa62:	2104      	movs	r1, #4
 80aaa64:	6878      	ldr	r0, [r7, #4]
 80aaa66:	f7ff fbdb 	bl	80aa220 <matrix_normalize>
}
 80aaa6a:	bf00      	nop
 80aaa6c:	3748      	adds	r7, #72	; 0x48
 80aaa6e:	46bd      	mov	sp, r7
 80aaa70:	ecbd 8b02 	vpop	{d8}
 80aaa74:	bd80      	pop	{r7, pc}
 80aaa76:	bf00      	nop
 80aaa78:	c0490fdb 	.word	0xc0490fdb
 80aaa7c:	40490fdb 	.word	0x40490fdb

080aaa80 <propagation>:

static void propagation(float *gyro, float deltaTime, float *state_p,
                        float *var_p, float *state_1, float *var_1, float *A_1)
{                               // state_p: predict state, var_p: predict variance, state_1: previous state, var_1: previous variance, A_1:previous matrix A, correct_level: correct level setting
 80aaa80:	b590      	push	{r4, r7, lr}
 80aaa82:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 80aaa86:	af02      	add	r7, sp, #8
 80aaa88:	f107 0414 	add.w	r4, r7, #20
 80aaa8c:	6020      	str	r0, [r4, #0]
 80aaa8e:	f107 0010 	add.w	r0, r7, #16
 80aaa92:	ed80 0a00 	vstr	s0, [r0]
 80aaa96:	f107 000c 	add.w	r0, r7, #12
 80aaa9a:	6001      	str	r1, [r0, #0]
 80aaa9c:	f107 0108 	add.w	r1, r7, #8
 80aaaa0:	600a      	str	r2, [r1, #0]
 80aaaa2:	1d3a      	adds	r2, r7, #4
 80aaaa4:	6013      	str	r3, [r2, #0]
  int i = 0;
 80aaaa6:	2300      	movs	r3, #0
 80aaaa8:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
  float gyro_half[3] = { 0 };
 80aaaac:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 80aaab0:	2200      	movs	r2, #0
 80aaab2:	601a      	str	r2, [r3, #0]
 80aaab4:	605a      	str	r2, [r3, #4]
 80aaab6:	609a      	str	r2, [r3, #8]
  float state_gain[4] = { 0 };
 80aaab8:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 80aaabc:	2200      	movs	r2, #0
 80aaabe:	601a      	str	r2, [r3, #0]
 80aaac0:	605a      	str	r2, [r3, #4]
 80aaac2:	609a      	str	r2, [r3, #8]
 80aaac4:	60da      	str	r2, [r3, #12]
  float sf_err = 0;
 80aaac6:	f04f 0300 	mov.w	r3, #0
 80aaaca:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
  float int_err = 0;
 80aaace:	f04f 0300 	mov.w	r3, #0
 80aaad2:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
  float A[16] = { 0 };
 80aaad6:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 80aaada:	2240      	movs	r2, #64	; 0x40
 80aaadc:	2100      	movs	r1, #0
 80aaade:	4618      	mov	r0, r3
 80aaae0:	f015 fa6c 	bl	80bffbc <memset>
  float A_mid[16] = { 0 };
 80aaae4:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 80aaae8:	2240      	movs	r2, #64	; 0x40
 80aaaea:	2100      	movs	r1, #0
 80aaaec:	4618      	mov	r0, r3
 80aaaee:	f015 fa65 	bl	80bffbc <memset>
  float A_tmp[16] = { 0 };
 80aaaf2:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80aaaf6:	2240      	movs	r2, #64	; 0x40
 80aaaf8:	2100      	movs	r1, #0
 80aaafa:	4618      	mov	r0, r3
 80aaafc:	f015 fa5e 	bl	80bffbc <memset>
  float G_mat[16] = { 0 };
 80aab00:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80aab04:	4618      	mov	r0, r3
 80aab06:	2340      	movs	r3, #64	; 0x40
 80aab08:	461a      	mov	r2, r3
 80aab0a:	2100      	movs	r1, #0
 80aab0c:	f015 fa56 	bl	80bffbc <memset>
  float W[12] = { 0 };
 80aab10:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80aab14:	4618      	mov	r0, r3
 80aab16:	2330      	movs	r3, #48	; 0x30
 80aab18:	461a      	mov	r2, r3
 80aab1a:	2100      	movs	r1, #0
 80aab1c:	f015 fa4e 	bl	80bffbc <memset>
  float R[9] = { 0 };
 80aab20:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80aab24:	4618      	mov	r0, r3
 80aab26:	2324      	movs	r3, #36	; 0x24
 80aab28:	461a      	mov	r2, r3
 80aab2a:	2100      	movs	r1, #0
 80aab2c:	f015 fa46 	bl	80bffbc <memset>
  float GVGT[16] = { 0 };
 80aab30:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80aab34:	4618      	mov	r0, r3
 80aab36:	2340      	movs	r3, #64	; 0x40
 80aab38:	461a      	mov	r2, r3
 80aab3a:	2100      	movs	r1, #0
 80aab3c:	f015 fa3e 	bl	80bffbc <memset>
  float WRWT[16] = { 0 };
 80aab40:	f107 0318 	add.w	r3, r7, #24
 80aab44:	4618      	mov	r0, r3
 80aab46:	2340      	movs	r3, #64	; 0x40
 80aab48:	461a      	mov	r2, r3
 80aab4a:	2100      	movs	r1, #0
 80aab4c:	f015 fa36 	bl	80bffbc <memset>

  gyro_half[0] = gyro[0] / 2.0f;
 80aab50:	f107 0314 	add.w	r3, r7, #20
 80aab54:	681b      	ldr	r3, [r3, #0]
 80aab56:	ed93 7a00 	vldr	s14, [r3]
 80aab5a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80aab5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80aab62:	edc7 7a7f 	vstr	s15, [r7, #508]	; 0x1fc
  gyro_half[1] = gyro[1] / 2.0f;
 80aab66:	f107 0314 	add.w	r3, r7, #20
 80aab6a:	681b      	ldr	r3, [r3, #0]
 80aab6c:	3304      	adds	r3, #4
 80aab6e:	ed93 7a00 	vldr	s14, [r3]
 80aab72:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80aab76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80aab7a:	edc7 7a80 	vstr	s15, [r7, #512]	; 0x200
  gyro_half[2] = gyro[2] / 2.0f;
 80aab7e:	f107 0314 	add.w	r3, r7, #20
 80aab82:	681b      	ldr	r3, [r3, #0]
 80aab84:	3308      	adds	r3, #8
 80aab86:	ed93 7a00 	vldr	s14, [r3]
 80aab8a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80aab8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80aab92:	edc7 7a81 	vstr	s15, [r7, #516]	; 0x204

  A[0] = 0;
 80aab96:	f04f 0300 	mov.w	r3, #0
 80aab9a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  A[1] = -gyro_half[0];
 80aab9e:	edd7 7a7f 	vldr	s15, [r7, #508]	; 0x1fc
 80aaba2:	eef1 7a67 	vneg.f32	s15, s15
 80aaba6:	edc7 7a6c 	vstr	s15, [r7, #432]	; 0x1b0
  A[2] = -gyro_half[1];
 80aabaa:	edd7 7a80 	vldr	s15, [r7, #512]	; 0x200
 80aabae:	eef1 7a67 	vneg.f32	s15, s15
 80aabb2:	edc7 7a6d 	vstr	s15, [r7, #436]	; 0x1b4
  A[3] = -gyro_half[2];
 80aabb6:	edd7 7a81 	vldr	s15, [r7, #516]	; 0x204
 80aabba:	eef1 7a67 	vneg.f32	s15, s15
 80aabbe:	edc7 7a6e 	vstr	s15, [r7, #440]	; 0x1b8
  A[4] = gyro_half[0];
 80aabc2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80aabc6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
  A[5] = 0;
 80aabca:	f04f 0300 	mov.w	r3, #0
 80aabce:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
  A[6] = gyro_half[2];
 80aabd2:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80aabd6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
  A[7] = -gyro_half[1];
 80aabda:	edd7 7a80 	vldr	s15, [r7, #512]	; 0x200
 80aabde:	eef1 7a67 	vneg.f32	s15, s15
 80aabe2:	edc7 7a72 	vstr	s15, [r7, #456]	; 0x1c8
  A[8] = gyro_half[1];
 80aabe6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80aabea:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  A[9] = -gyro_half[2];
 80aabee:	edd7 7a81 	vldr	s15, [r7, #516]	; 0x204
 80aabf2:	eef1 7a67 	vneg.f32	s15, s15
 80aabf6:	edc7 7a74 	vstr	s15, [r7, #464]	; 0x1d0
  A[10] = 0;
 80aabfa:	f04f 0300 	mov.w	r3, #0
 80aabfe:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
  A[11] = gyro_half[0];
 80aac02:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80aac06:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
  A[12] = gyro_half[2];
 80aac0a:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80aac0e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
  A[13] = gyro_half[1];
 80aac12:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80aac16:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
  A[14] = -gyro_half[0];
 80aac1a:	edd7 7a7f 	vldr	s15, [r7, #508]	; 0x1fc
 80aac1e:	eef1 7a67 	vneg.f32	s15, s15
 80aac22:	edc7 7a79 	vstr	s15, [r7, #484]	; 0x1e4
  A[15] = 0;
 80aac26:	f04f 0300 	mov.w	r3, #0
 80aac2a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

  for (i = 0; i < 16; i++)
 80aac2e:	2300      	movs	r3, #0
 80aac30:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 80aac34:	e02a      	b.n	80aac8c <propagation+0x20c>
    A_mid[i] = (A_1[i] + A[i]) * deltaTime / 2.0f;
 80aac36:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80aac3a:	009b      	lsls	r3, r3, #2
 80aac3c:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 80aac40:	4413      	add	r3, r2
 80aac42:	ed93 7a00 	vldr	s14, [r3]
 80aac46:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80aac4a:	009b      	lsls	r3, r3, #2
 80aac4c:	f507 7208 	add.w	r2, r7, #544	; 0x220
 80aac50:	4413      	add	r3, r2
 80aac52:	3b74      	subs	r3, #116	; 0x74
 80aac54:	edd3 7a00 	vldr	s15, [r3]
 80aac58:	ee37 7a27 	vadd.f32	s14, s14, s15
 80aac5c:	f107 0310 	add.w	r3, r7, #16
 80aac60:	edd3 7a00 	vldr	s15, [r3]
 80aac64:	ee27 7a27 	vmul.f32	s14, s14, s15
 80aac68:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80aac6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80aac70:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80aac74:	009b      	lsls	r3, r3, #2
 80aac76:	f507 7208 	add.w	r2, r7, #544	; 0x220
 80aac7a:	4413      	add	r3, r2
 80aac7c:	3bb4      	subs	r3, #180	; 0xb4
 80aac7e:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 16; i++)
 80aac82:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80aac86:	3301      	adds	r3, #1
 80aac88:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 80aac8c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80aac90:	2b0f      	cmp	r3, #15
 80aac92:	ddd0      	ble.n	80aac36 <propagation+0x1b6>
  for (i = 0; i < 16; i++)
 80aac94:	2300      	movs	r3, #0
 80aac96:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 80aac9a:	e01f      	b.n	80aacdc <propagation+0x25c>
    A_tmp[i] = A_1[i] * deltaTime / 2.0f;
 80aac9c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80aaca0:	009b      	lsls	r3, r3, #2
 80aaca2:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 80aaca6:	4413      	add	r3, r2
 80aaca8:	ed93 7a00 	vldr	s14, [r3]
 80aacac:	f107 0310 	add.w	r3, r7, #16
 80aacb0:	edd3 7a00 	vldr	s15, [r3]
 80aacb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80aacb8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80aacbc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80aacc0:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80aacc4:	009b      	lsls	r3, r3, #2
 80aacc6:	f507 7208 	add.w	r2, r7, #544	; 0x220
 80aacca:	4413      	add	r3, r2
 80aaccc:	3bf4      	subs	r3, #244	; 0xf4
 80aacce:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 16; i++)
 80aacd2:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80aacd6:	3301      	adds	r3, #1
 80aacd8:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 80aacdc:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80aace0:	2b0f      	cmp	r3, #15
 80aace2:	dddb      	ble.n	80aac9c <propagation+0x21c>
  A_tmp[0]++;                   // Add I matrix
 80aace4:	edd7 7a4b 	vldr	s15, [r7, #300]	; 0x12c
 80aace8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80aacec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80aacf0:	edc7 7a4b 	vstr	s15, [r7, #300]	; 0x12c
  A_tmp[5]++;
 80aacf4:	edd7 7a50 	vldr	s15, [r7, #320]	; 0x140
 80aacf8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80aacfc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80aad00:	edc7 7a50 	vstr	s15, [r7, #320]	; 0x140
  A_tmp[10]++;
 80aad04:	edd7 7a55 	vldr	s15, [r7, #340]	; 0x154
 80aad08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80aad0c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80aad10:	edc7 7a55 	vstr	s15, [r7, #340]	; 0x154
  A_tmp[15]++;
 80aad14:	edd7 7a5a 	vldr	s15, [r7, #360]	; 0x168
 80aad18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80aad1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80aad20:	edc7 7a5a 	vstr	s15, [r7, #360]	; 0x168

  matrix_multiply(A_mid, A_tmp, G_mat, 4, 4, 4);
 80aad24:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 80aad28:	f507 7196 	add.w	r1, r7, #300	; 0x12c
 80aad2c:	f507 70b6 	add.w	r0, r7, #364	; 0x16c
 80aad30:	2304      	movs	r3, #4
 80aad32:	9301      	str	r3, [sp, #4]
 80aad34:	2304      	movs	r3, #4
 80aad36:	9300      	str	r3, [sp, #0]
 80aad38:	2304      	movs	r3, #4
 80aad3a:	f7fe ff83 	bl	80a9c44 <matrix_multiply>
  G_mat[0]++;                   // Add I matrix
 80aad3e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80aad42:	edd3 7a00 	vldr	s15, [r3]
 80aad46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80aad4a:	ee77 7a87 	vadd.f32	s15, s15, s14
 80aad4e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80aad52:	edc3 7a00 	vstr	s15, [r3]
  G_mat[5]++;
 80aad56:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80aad5a:	edd3 7a05 	vldr	s15, [r3, #20]
 80aad5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80aad62:	ee77 7a87 	vadd.f32	s15, s15, s14
 80aad66:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80aad6a:	edc3 7a05 	vstr	s15, [r3, #20]
  G_mat[10]++;
 80aad6e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80aad72:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80aad76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80aad7a:	ee77 7a87 	vadd.f32	s15, s15, s14
 80aad7e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80aad82:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
  G_mat[15]++;
 80aad86:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80aad8a:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80aad8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80aad92:	ee77 7a87 	vadd.f32	s15, s15, s14
 80aad96:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80aad9a:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
  matrix_multiply(G_mat, state_1, state_p, 4, 4, 1);
 80aad9e:	f107 020c 	add.w	r2, r7, #12
 80aada2:	1d39      	adds	r1, r7, #4
 80aada4:	f107 00ec 	add.w	r0, r7, #236	; 0xec
 80aada8:	2301      	movs	r3, #1
 80aadaa:	9301      	str	r3, [sp, #4]
 80aadac:	2304      	movs	r3, #4
 80aadae:	9300      	str	r3, [sp, #0]
 80aadb0:	2304      	movs	r3, #4
 80aadb2:	6812      	ldr	r2, [r2, #0]
 80aadb4:	6809      	ldr	r1, [r1, #0]
 80aadb6:	f7fe ff45 	bl	80a9c44 <matrix_multiply>

  matrix_normalize(state_p, 4);
 80aadba:	f107 030c 	add.w	r3, r7, #12
 80aadbe:	2104      	movs	r1, #4
 80aadc0:	6818      	ldr	r0, [r3, #0]
 80aadc2:	f7ff fa2d 	bl	80aa220 <matrix_normalize>
  for (i = 0; i < 16; i++)
 80aadc6:	2300      	movs	r3, #0
 80aadc8:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 80aadcc:	e013      	b.n	80aadf6 <propagation+0x376>
    A_1[i] = A[i];
 80aadce:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80aadd2:	009b      	lsls	r3, r3, #2
 80aadd4:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 80aadd8:	4413      	add	r3, r2
 80aadda:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 80aadde:	0092      	lsls	r2, r2, #2
 80aade0:	f507 7108 	add.w	r1, r7, #544	; 0x220
 80aade4:	440a      	add	r2, r1
 80aade6:	3a74      	subs	r2, #116	; 0x74
 80aade8:	6812      	ldr	r2, [r2, #0]
 80aadea:	601a      	str	r2, [r3, #0]
  for (i = 0; i < 16; i++)
 80aadec:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80aadf0:	3301      	adds	r3, #1
 80aadf2:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 80aadf6:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80aadfa:	2b0f      	cmp	r3, #15
 80aadfc:	dde7      	ble.n	80aadce <propagation+0x34e>

  for (i = 0; i < 4; i++)
 80aadfe:	2300      	movs	r3, #0
 80aae00:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 80aae04:	e01b      	b.n	80aae3e <propagation+0x3be>
    state_gain[i] = state_1[i] * deltaTime;
 80aae06:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80aae0a:	009b      	lsls	r3, r3, #2
 80aae0c:	1d3a      	adds	r2, r7, #4
 80aae0e:	6812      	ldr	r2, [r2, #0]
 80aae10:	4413      	add	r3, r2
 80aae12:	ed93 7a00 	vldr	s14, [r3]
 80aae16:	f107 0310 	add.w	r3, r7, #16
 80aae1a:	edd3 7a00 	vldr	s15, [r3]
 80aae1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80aae22:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80aae26:	009b      	lsls	r3, r3, #2
 80aae28:	f507 7208 	add.w	r2, r7, #544	; 0x220
 80aae2c:	4413      	add	r3, r2
 80aae2e:	3b34      	subs	r3, #52	; 0x34
 80aae30:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 4; i++)
 80aae34:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80aae38:	3301      	adds	r3, #1
 80aae3a:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 80aae3e:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80aae42:	2b03      	cmp	r3, #3
 80aae44:	dddf      	ble.n	80aae06 <propagation+0x386>

  W[0] = -state_gain[1];
 80aae46:	edd7 7a7c 	vldr	s15, [r7, #496]	; 0x1f0
 80aae4a:	eef1 7a67 	vneg.f32	s15, s15
 80aae4e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80aae52:	edc3 7a00 	vstr	s15, [r3]
  W[1] = -state_gain[2];
 80aae56:	edd7 7a7d 	vldr	s15, [r7, #500]	; 0x1f4
 80aae5a:	eef1 7a67 	vneg.f32	s15, s15
 80aae5e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80aae62:	edc3 7a01 	vstr	s15, [r3, #4]
  W[2] = -state_gain[3];
 80aae66:	edd7 7a7e 	vldr	s15, [r7, #504]	; 0x1f8
 80aae6a:	eef1 7a67 	vneg.f32	s15, s15
 80aae6e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80aae72:	edc3 7a02 	vstr	s15, [r3, #8]
  W[3] = state_gain[0];
 80aae76:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 80aae7a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80aae7e:	60da      	str	r2, [r3, #12]
  W[4] = -state_gain[3];
 80aae80:	edd7 7a7e 	vldr	s15, [r7, #504]	; 0x1f8
 80aae84:	eef1 7a67 	vneg.f32	s15, s15
 80aae88:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80aae8c:	edc3 7a04 	vstr	s15, [r3, #16]
  W[5] = state_gain[2];
 80aae90:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 80aae94:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80aae98:	615a      	str	r2, [r3, #20]
  W[6] = state_gain[3];
 80aae9a:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 80aae9e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80aaea2:	619a      	str	r2, [r3, #24]
  W[7] = state_gain[0];
 80aaea4:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 80aaea8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80aaeac:	61da      	str	r2, [r3, #28]
  W[8] = -state_gain[1];
 80aaeae:	edd7 7a7c 	vldr	s15, [r7, #496]	; 0x1f0
 80aaeb2:	eef1 7a67 	vneg.f32	s15, s15
 80aaeb6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80aaeba:	edc3 7a08 	vstr	s15, [r3, #32]
  W[9] = -state_gain[2];
 80aaebe:	edd7 7a7d 	vldr	s15, [r7, #500]	; 0x1f4
 80aaec2:	eef1 7a67 	vneg.f32	s15, s15
 80aaec6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80aaeca:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
  W[10] = state_gain[1];
 80aaece:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 80aaed2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80aaed6:	629a      	str	r2, [r3, #40]	; 0x28
  W[11] = state_gain[0];
 80aaed8:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 80aaedc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80aaee0:	62da      	str	r2, [r3, #44]	; 0x2c

  // ===== correct level: default: 2% of 2000 dps & 0,07dps RMS noise===== //
  sf_err = 0.000001f;           //(0.02*w*0.05)^2
 80aaee2:	4b6e      	ldr	r3, [pc, #440]	; (80ab09c <propagation+0x61c>)
 80aaee4:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
  int_err = 0.00000002f;        //w^6 * 0.05^6
 80aaee8:	4b6d      	ldr	r3, [pc, #436]	; (80ab0a0 <propagation+0x620>)
 80aaeea:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214

  float w0_squre = gyro[0] * gyro[0];
 80aaeee:	f107 0314 	add.w	r3, r7, #20
 80aaef2:	681b      	ldr	r3, [r3, #0]
 80aaef4:	ed93 7a00 	vldr	s14, [r3]
 80aaef8:	f107 0314 	add.w	r3, r7, #20
 80aaefc:	681b      	ldr	r3, [r3, #0]
 80aaefe:	edd3 7a00 	vldr	s15, [r3]
 80aaf02:	ee67 7a27 	vmul.f32	s15, s14, s15
 80aaf06:	edc7 7a84 	vstr	s15, [r7, #528]	; 0x210
  float w1_squre = gyro[1] * gyro[1];
 80aaf0a:	f107 0314 	add.w	r3, r7, #20
 80aaf0e:	681b      	ldr	r3, [r3, #0]
 80aaf10:	3304      	adds	r3, #4
 80aaf12:	ed93 7a00 	vldr	s14, [r3]
 80aaf16:	f107 0314 	add.w	r3, r7, #20
 80aaf1a:	681b      	ldr	r3, [r3, #0]
 80aaf1c:	3304      	adds	r3, #4
 80aaf1e:	edd3 7a00 	vldr	s15, [r3]
 80aaf22:	ee67 7a27 	vmul.f32	s15, s14, s15
 80aaf26:	edc7 7a83 	vstr	s15, [r7, #524]	; 0x20c
  float w2_squre = gyro[2] * gyro[2];
 80aaf2a:	f107 0314 	add.w	r3, r7, #20
 80aaf2e:	681b      	ldr	r3, [r3, #0]
 80aaf30:	3308      	adds	r3, #8
 80aaf32:	ed93 7a00 	vldr	s14, [r3]
 80aaf36:	f107 0314 	add.w	r3, r7, #20
 80aaf3a:	681b      	ldr	r3, [r3, #0]
 80aaf3c:	3308      	adds	r3, #8
 80aaf3e:	edd3 7a00 	vldr	s15, [r3]
 80aaf42:	ee67 7a27 	vmul.f32	s15, s14, s15
 80aaf46:	edc7 7a82 	vstr	s15, [r7, #520]	; 0x208

  R[0] = (w0_squre * sf_err) + (w0_squre * w0_squre * w0_squre * int_err);
 80aaf4a:	ed97 7a84 	vldr	s14, [r7, #528]	; 0x210
 80aaf4e:	edd7 7a86 	vldr	s15, [r7, #536]	; 0x218
 80aaf52:	ee27 7a27 	vmul.f32	s14, s14, s15
 80aaf56:	edd7 7a84 	vldr	s15, [r7, #528]	; 0x210
 80aaf5a:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80aaf5e:	edd7 7a84 	vldr	s15, [r7, #528]	; 0x210
 80aaf62:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80aaf66:	edd7 7a85 	vldr	s15, [r7, #532]	; 0x214
 80aaf6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80aaf6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80aaf72:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80aaf76:	edc3 7a00 	vstr	s15, [r3]
  R[4] = (w1_squre * sf_err) + (w1_squre * w1_squre * w1_squre * int_err);
 80aaf7a:	ed97 7a83 	vldr	s14, [r7, #524]	; 0x20c
 80aaf7e:	edd7 7a86 	vldr	s15, [r7, #536]	; 0x218
 80aaf82:	ee27 7a27 	vmul.f32	s14, s14, s15
 80aaf86:	edd7 7a83 	vldr	s15, [r7, #524]	; 0x20c
 80aaf8a:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80aaf8e:	edd7 7a83 	vldr	s15, [r7, #524]	; 0x20c
 80aaf92:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80aaf96:	edd7 7a85 	vldr	s15, [r7, #532]	; 0x214
 80aaf9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80aaf9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80aafa2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80aafa6:	edc3 7a04 	vstr	s15, [r3, #16]
  R[8] = (w2_squre * sf_err) + (w2_squre * w2_squre * w2_squre * int_err);
 80aafaa:	ed97 7a82 	vldr	s14, [r7, #520]	; 0x208
 80aafae:	edd7 7a86 	vldr	s15, [r7, #536]	; 0x218
 80aafb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80aafb6:	edd7 7a82 	vldr	s15, [r7, #520]	; 0x208
 80aafba:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80aafbe:	edd7 7a82 	vldr	s15, [r7, #520]	; 0x208
 80aafc2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80aafc6:	edd7 7a85 	vldr	s15, [r7, #532]	; 0x214
 80aafca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80aafce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80aafd2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80aafd6:	edc3 7a08 	vstr	s15, [r3, #32]

  ABAT(G_mat, var_1, GVGT, 4, 4);
 80aafda:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80aafde:	f107 00ec 	add.w	r0, r7, #236	; 0xec
 80aafe2:	2304      	movs	r3, #4
 80aafe4:	9300      	str	r3, [sp, #0]
 80aafe6:	2304      	movs	r3, #4
 80aafe8:	f8d7 1230 	ldr.w	r1, [r7, #560]	; 0x230
 80aafec:	f7fe ff1c 	bl	80a9e28 <ABAT>
  ABAT(W, R, WRWT, 4, 3);
 80aaff0:	f107 0218 	add.w	r2, r7, #24
 80aaff4:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80aaff8:	f107 00bc 	add.w	r0, r7, #188	; 0xbc
 80aaffc:	2303      	movs	r3, #3
 80aaffe:	9300      	str	r3, [sp, #0]
 80ab000:	2304      	movs	r3, #4
 80ab002:	f7fe ff11 	bl	80a9e28 <ABAT>
  for (i = 0; i < 16; i++)
 80ab006:	2300      	movs	r3, #0
 80ab008:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 80ab00c:	e01f      	b.n	80ab04e <propagation+0x5ce>
    var_p[i] = GVGT[i] + WRWT[i];
 80ab00e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80ab012:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80ab016:	009b      	lsls	r3, r3, #2
 80ab018:	4413      	add	r3, r2
 80ab01a:	ed93 7a00 	vldr	s14, [r3]
 80ab01e:	f107 0218 	add.w	r2, r7, #24
 80ab022:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80ab026:	009b      	lsls	r3, r3, #2
 80ab028:	4413      	add	r3, r2
 80ab02a:	edd3 7a00 	vldr	s15, [r3]
 80ab02e:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80ab032:	009b      	lsls	r3, r3, #2
 80ab034:	f107 0208 	add.w	r2, r7, #8
 80ab038:	6812      	ldr	r2, [r2, #0]
 80ab03a:	4413      	add	r3, r2
 80ab03c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80ab040:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 16; i++)
 80ab044:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80ab048:	3301      	adds	r3, #1
 80ab04a:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 80ab04e:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80ab052:	2b0f      	cmp	r3, #15
 80ab054:	dddb      	ble.n	80ab00e <propagation+0x58e>
  for (i = 0; i < 4; i++)
 80ab056:	2300      	movs	r3, #0
 80ab058:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 80ab05c:	e013      	b.n	80ab086 <propagation+0x606>
    state_1[i] = state_p[i];
 80ab05e:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80ab062:	009b      	lsls	r3, r3, #2
 80ab064:	f107 020c 	add.w	r2, r7, #12
 80ab068:	6812      	ldr	r2, [r2, #0]
 80ab06a:	441a      	add	r2, r3
 80ab06c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80ab070:	009b      	lsls	r3, r3, #2
 80ab072:	1d39      	adds	r1, r7, #4
 80ab074:	6809      	ldr	r1, [r1, #0]
 80ab076:	440b      	add	r3, r1
 80ab078:	6812      	ldr	r2, [r2, #0]
 80ab07a:	601a      	str	r2, [r3, #0]
  for (i = 0; i < 4; i++)
 80ab07c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80ab080:	3301      	adds	r3, #1
 80ab082:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 80ab086:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80ab08a:	2b03      	cmp	r3, #3
 80ab08c:	dde7      	ble.n	80ab05e <propagation+0x5de>
}
 80ab08e:	bf00      	nop
 80ab090:	bf00      	nop
 80ab092:	f507 7709 	add.w	r7, r7, #548	; 0x224
 80ab096:	46bd      	mov	sp, r7
 80ab098:	bd90      	pop	{r4, r7, pc}
 80ab09a:	bf00      	nop
 80ab09c:	358637bd 	.word	0x358637bd
 80ab0a0:	32abcc77 	.word	0x32abcc77

080ab0a4 <acc_update>:

// Correction of EKF: use acc to correct pose
static void acc_update(float *acc_in, float *state_p, float *variance_p)
{                               // state_p: predict state, var_p: predict variance, correct_level: correct level setting
 80ab0a4:	b580      	push	{r7, lr}
 80ab0a6:	b0f0      	sub	sp, #448	; 0x1c0
 80ab0a8:	af02      	add	r7, sp, #8
 80ab0aa:	f107 030c 	add.w	r3, r7, #12
 80ab0ae:	6018      	str	r0, [r3, #0]
 80ab0b0:	f107 0308 	add.w	r3, r7, #8
 80ab0b4:	6019      	str	r1, [r3, #0]
 80ab0b6:	1d3b      	adds	r3, r7, #4
 80ab0b8:	601a      	str	r2, [r3, #0]
  int i = 0;
 80ab0ba:	2300      	movs	r3, #0
 80ab0bc:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
  float variance[16] = { 0 };
 80ab0c0:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 80ab0c4:	2240      	movs	r2, #64	; 0x40
 80ab0c6:	2100      	movs	r1, #0
 80ab0c8:	4618      	mov	r0, r3
 80ab0ca:	f014 ff77 	bl	80bffbc <memset>
  float acc[3] = { 0 };
 80ab0ce:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80ab0d2:	2200      	movs	r2, #0
 80ab0d4:	601a      	str	r2, [r3, #0]
 80ab0d6:	605a      	str	r2, [r3, #4]
 80ab0d8:	609a      	str	r2, [r3, #8]
  float Zt_Zp[3] = { 0 };
 80ab0da:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 80ab0de:	2200      	movs	r2, #0
 80ab0e0:	601a      	str	r2, [r3, #0]
 80ab0e2:	605a      	str	r2, [r3, #4]
 80ab0e4:	609a      	str	r2, [r3, #8]
  //float error = 0;
  float H[12] = { 0 };
 80ab0e6:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80ab0ea:	2230      	movs	r2, #48	; 0x30
 80ab0ec:	2100      	movs	r1, #0
 80ab0ee:	4618      	mov	r0, r3
 80ab0f0:	f014 ff64 	bl	80bffbc <memset>
  float HVHT[9] = { 0 };
 80ab0f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80ab0f8:	2224      	movs	r2, #36	; 0x24
 80ab0fa:	2100      	movs	r1, #0
 80ab0fc:	4618      	mov	r0, r3
 80ab0fe:	f014 ff5d 	bl	80bffbc <memset>
  float VHT[12] = { 0 };
 80ab102:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80ab106:	2230      	movs	r2, #48	; 0x30
 80ab108:	2100      	movs	r1, #0
 80ab10a:	4618      	mov	r0, r3
 80ab10c:	f014 ff56 	bl	80bffbc <memset>
  float phi[9] = { 0 };
 80ab110:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80ab114:	4618      	mov	r0, r3
 80ab116:	2324      	movs	r3, #36	; 0x24
 80ab118:	461a      	mov	r2, r3
 80ab11a:	2100      	movs	r1, #0
 80ab11c:	f014 ff4e 	bl	80bffbc <memset>
  float inv_phi[9] = { 0 };
 80ab120:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80ab124:	4618      	mov	r0, r3
 80ab126:	2324      	movs	r3, #36	; 0x24
 80ab128:	461a      	mov	r2, r3
 80ab12a:	2100      	movs	r1, #0
 80ab12c:	f014 ff46 	bl	80bffbc <memset>
  float K[12] = { 0 };
 80ab130:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80ab134:	4618      	mov	r0, r3
 80ab136:	2330      	movs	r3, #48	; 0x30
 80ab138:	461a      	mov	r2, r3
 80ab13a:	2100      	movs	r1, #0
 80ab13c:	f014 ff3e 	bl	80bffbc <memset>
  float KE[4] = { 0 };
 80ab140:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80ab144:	461a      	mov	r2, r3
 80ab146:	2300      	movs	r3, #0
 80ab148:	6013      	str	r3, [r2, #0]
 80ab14a:	6053      	str	r3, [r2, #4]
 80ab14c:	6093      	str	r3, [r2, #8]
 80ab14e:	60d3      	str	r3, [r2, #12]
  float KH[16] = { 0 };
 80ab150:	f107 0310 	add.w	r3, r7, #16
 80ab154:	4618      	mov	r0, r3
 80ab156:	2340      	movs	r3, #64	; 0x40
 80ab158:	461a      	mov	r2, r3
 80ab15a:	2100      	movs	r1, #0
 80ab15c:	f014 ff2e 	bl	80bffbc <memset>

  for (i = 0; i < 3; i++)
 80ab160:	2300      	movs	r3, #0
 80ab162:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 80ab166:	e014      	b.n	80ab192 <acc_update+0xee>
    acc[i] = acc_in[i];
 80ab168:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80ab16c:	009b      	lsls	r3, r3, #2
 80ab16e:	f107 020c 	add.w	r2, r7, #12
 80ab172:	6812      	ldr	r2, [r2, #0]
 80ab174:	4413      	add	r3, r2
 80ab176:	681a      	ldr	r2, [r3, #0]
 80ab178:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80ab17c:	009b      	lsls	r3, r3, #2
 80ab17e:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 80ab182:	440b      	add	r3, r1
 80ab184:	3b50      	subs	r3, #80	; 0x50
 80ab186:	601a      	str	r2, [r3, #0]
  for (i = 0; i < 3; i++)
 80ab188:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80ab18c:	3301      	adds	r3, #1
 80ab18e:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 80ab192:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80ab196:	2b02      	cmp	r3, #2
 80ab198:	dde6      	ble.n	80ab168 <acc_update+0xc4>

  matrix_normalize(acc, 3);
 80ab19a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80ab19e:	2103      	movs	r1, #3
 80ab1a0:	4618      	mov	r0, r3
 80ab1a2:	f7ff f83d 	bl	80aa220 <matrix_normalize>

  // this should be handling critical value, need or not? swl
//      if (acc[1] < 0.15f && acc[1] > -0.15f && acc[2] < 0.15f && acc[2] > -0.15f)
//              acc[1] *= (acc[2] * acc[2]);

  H[0] = -2 * state_p[2];
 80ab1a6:	f107 0308 	add.w	r3, r7, #8
 80ab1aa:	681b      	ldr	r3, [r3, #0]
 80ab1ac:	3308      	adds	r3, #8
 80ab1ae:	edd3 7a00 	vldr	s15, [r3]
 80ab1b2:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80ab1b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80ab1ba:	edc7 7a4b 	vstr	s15, [r7, #300]	; 0x12c
  H[1] = 2 * state_p[3];
 80ab1be:	f107 0308 	add.w	r3, r7, #8
 80ab1c2:	681b      	ldr	r3, [r3, #0]
 80ab1c4:	330c      	adds	r3, #12
 80ab1c6:	edd3 7a00 	vldr	s15, [r3]
 80ab1ca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80ab1ce:	edc7 7a4c 	vstr	s15, [r7, #304]	; 0x130
  H[2] = -2 * state_p[0];
 80ab1d2:	f107 0308 	add.w	r3, r7, #8
 80ab1d6:	681b      	ldr	r3, [r3, #0]
 80ab1d8:	edd3 7a00 	vldr	s15, [r3]
 80ab1dc:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80ab1e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80ab1e4:	edc7 7a4d 	vstr	s15, [r7, #308]	; 0x134
  H[3] = 2 * state_p[1];
 80ab1e8:	f107 0308 	add.w	r3, r7, #8
 80ab1ec:	681b      	ldr	r3, [r3, #0]
 80ab1ee:	3304      	adds	r3, #4
 80ab1f0:	edd3 7a00 	vldr	s15, [r3]
 80ab1f4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80ab1f8:	edc7 7a4e 	vstr	s15, [r7, #312]	; 0x138
  H[4] = 2 * state_p[1];
 80ab1fc:	f107 0308 	add.w	r3, r7, #8
 80ab200:	681b      	ldr	r3, [r3, #0]
 80ab202:	3304      	adds	r3, #4
 80ab204:	edd3 7a00 	vldr	s15, [r3]
 80ab208:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80ab20c:	edc7 7a4f 	vstr	s15, [r7, #316]	; 0x13c
  H[5] = 2 * state_p[0];
 80ab210:	f107 0308 	add.w	r3, r7, #8
 80ab214:	681b      	ldr	r3, [r3, #0]
 80ab216:	edd3 7a00 	vldr	s15, [r3]
 80ab21a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80ab21e:	edc7 7a50 	vstr	s15, [r7, #320]	; 0x140
  H[6] = 2 * state_p[3];
 80ab222:	f107 0308 	add.w	r3, r7, #8
 80ab226:	681b      	ldr	r3, [r3, #0]
 80ab228:	330c      	adds	r3, #12
 80ab22a:	edd3 7a00 	vldr	s15, [r3]
 80ab22e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80ab232:	edc7 7a51 	vstr	s15, [r7, #324]	; 0x144
  H[7] = 2 * state_p[2];
 80ab236:	f107 0308 	add.w	r3, r7, #8
 80ab23a:	681b      	ldr	r3, [r3, #0]
 80ab23c:	3308      	adds	r3, #8
 80ab23e:	edd3 7a00 	vldr	s15, [r3]
 80ab242:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80ab246:	edc7 7a52 	vstr	s15, [r7, #328]	; 0x148
  H[8] = 2 * state_p[0];
 80ab24a:	f107 0308 	add.w	r3, r7, #8
 80ab24e:	681b      	ldr	r3, [r3, #0]
 80ab250:	edd3 7a00 	vldr	s15, [r3]
 80ab254:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80ab258:	edc7 7a53 	vstr	s15, [r7, #332]	; 0x14c
  H[9] = -2 * state_p[1];
 80ab25c:	f107 0308 	add.w	r3, r7, #8
 80ab260:	681b      	ldr	r3, [r3, #0]
 80ab262:	3304      	adds	r3, #4
 80ab264:	edd3 7a00 	vldr	s15, [r3]
 80ab268:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80ab26c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80ab270:	edc7 7a54 	vstr	s15, [r7, #336]	; 0x150
  H[10] = -2 * state_p[2];
 80ab274:	f107 0308 	add.w	r3, r7, #8
 80ab278:	681b      	ldr	r3, [r3, #0]
 80ab27a:	3308      	adds	r3, #8
 80ab27c:	edd3 7a00 	vldr	s15, [r3]
 80ab280:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80ab284:	ee67 7a87 	vmul.f32	s15, s15, s14
 80ab288:	edc7 7a55 	vstr	s15, [r7, #340]	; 0x154
  H[11] = 2 * state_p[3];
 80ab28c:	f107 0308 	add.w	r3, r7, #8
 80ab290:	681b      	ldr	r3, [r3, #0]
 80ab292:	330c      	adds	r3, #12
 80ab294:	edd3 7a00 	vldr	s15, [r3]
 80ab298:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80ab29c:	edc7 7a56 	vstr	s15, [r7, #344]	; 0x158

  ABAT(H, variance_p, HVHT, 3, 4);
 80ab2a0:	f507 7284 	add.w	r2, r7, #264	; 0x108
 80ab2a4:	1d39      	adds	r1, r7, #4
 80ab2a6:	f507 7096 	add.w	r0, r7, #300	; 0x12c
 80ab2aa:	2304      	movs	r3, #4
 80ab2ac:	9300      	str	r3, [sp, #0]
 80ab2ae:	2303      	movs	r3, #3
 80ab2b0:	6809      	ldr	r1, [r1, #0]
 80ab2b2:	f7fe fdb9 	bl	80a9e28 <ABAT>
  for (i = 0; i < 9; i++)
 80ab2b6:	2300      	movs	r3, #0
 80ab2b8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 80ab2bc:	e013      	b.n	80ab2e6 <acc_update+0x242>
    phi[i] = HVHT[i];
 80ab2be:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80ab2c2:	009b      	lsls	r3, r3, #2
 80ab2c4:	f507 72dc 	add.w	r2, r7, #440	; 0x1b8
 80ab2c8:	4413      	add	r3, r2
 80ab2ca:	3bb0      	subs	r3, #176	; 0xb0
 80ab2cc:	681a      	ldr	r2, [r3, #0]
 80ab2ce:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 80ab2d2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80ab2d6:	009b      	lsls	r3, r3, #2
 80ab2d8:	440b      	add	r3, r1
 80ab2da:	601a      	str	r2, [r3, #0]
  for (i = 0; i < 9; i++)
 80ab2dc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80ab2e0:	3301      	adds	r3, #1
 80ab2e2:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 80ab2e6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80ab2ea:	2b08      	cmp	r3, #8
 80ab2ec:	dde7      	ble.n	80ab2be <acc_update+0x21a>
  error = 0.0001f;              //0.1 m/s2
  phi[0] += error;
  phi[4] += error;
  phi[8] += error;
#endif
  phi[0] += acc_correct_var[0]; //swl
 80ab2ee:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80ab2f2:	ed93 7a00 	vldr	s14, [r3]
 80ab2f6:	4b71      	ldr	r3, [pc, #452]	; (80ab4bc <acc_update+0x418>)
 80ab2f8:	edd3 7a00 	vldr	s15, [r3]
 80ab2fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80ab300:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80ab304:	edc3 7a00 	vstr	s15, [r3]
  phi[4] += acc_correct_var[1];
 80ab308:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80ab30c:	ed93 7a04 	vldr	s14, [r3, #16]
 80ab310:	4b6a      	ldr	r3, [pc, #424]	; (80ab4bc <acc_update+0x418>)
 80ab312:	edd3 7a01 	vldr	s15, [r3, #4]
 80ab316:	ee77 7a27 	vadd.f32	s15, s14, s15
 80ab31a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80ab31e:	edc3 7a04 	vstr	s15, [r3, #16]
  phi[8] += acc_correct_var[2];
 80ab322:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80ab326:	ed93 7a08 	vldr	s14, [r3, #32]
 80ab32a:	4b64      	ldr	r3, [pc, #400]	; (80ab4bc <acc_update+0x418>)
 80ab32c:	edd3 7a02 	vldr	s15, [r3, #8]
 80ab330:	ee77 7a27 	vadd.f32	s15, s14, s15
 80ab334:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80ab338:	edc3 7a08 	vstr	s15, [r3, #32]

  matrix_inverse(phi, inv_phi);
 80ab33c:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80ab340:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80ab344:	4611      	mov	r1, r2
 80ab346:	4618      	mov	r0, r3
 80ab348:	f7fe fd96 	bl	80a9e78 <matrix_inverse>

  // error = measurement data (acc) - predict data by gyro
  Zt_Zp[0] = acc[0] - 2 * (state_p[1] * state_p[3] - state_p[0] * state_p[2]);
 80ab34c:	ed97 7a5a 	vldr	s14, [r7, #360]	; 0x168
 80ab350:	f107 0308 	add.w	r3, r7, #8
 80ab354:	681b      	ldr	r3, [r3, #0]
 80ab356:	3304      	adds	r3, #4
 80ab358:	edd3 6a00 	vldr	s13, [r3]
 80ab35c:	f107 0308 	add.w	r3, r7, #8
 80ab360:	681b      	ldr	r3, [r3, #0]
 80ab362:	330c      	adds	r3, #12
 80ab364:	edd3 7a00 	vldr	s15, [r3]
 80ab368:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80ab36c:	f107 0308 	add.w	r3, r7, #8
 80ab370:	681b      	ldr	r3, [r3, #0]
 80ab372:	ed93 6a00 	vldr	s12, [r3]
 80ab376:	f107 0308 	add.w	r3, r7, #8
 80ab37a:	681b      	ldr	r3, [r3, #0]
 80ab37c:	3308      	adds	r3, #8
 80ab37e:	edd3 7a00 	vldr	s15, [r3]
 80ab382:	ee66 7a27 	vmul.f32	s15, s12, s15
 80ab386:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80ab38a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80ab38e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80ab392:	edc7 7a57 	vstr	s15, [r7, #348]	; 0x15c
  Zt_Zp[1] = acc[1] - 2 * (state_p[2] * state_p[3] + state_p[0] * state_p[1]);
 80ab396:	ed97 7a5b 	vldr	s14, [r7, #364]	; 0x16c
 80ab39a:	f107 0308 	add.w	r3, r7, #8
 80ab39e:	681b      	ldr	r3, [r3, #0]
 80ab3a0:	3308      	adds	r3, #8
 80ab3a2:	edd3 6a00 	vldr	s13, [r3]
 80ab3a6:	f107 0308 	add.w	r3, r7, #8
 80ab3aa:	681b      	ldr	r3, [r3, #0]
 80ab3ac:	330c      	adds	r3, #12
 80ab3ae:	edd3 7a00 	vldr	s15, [r3]
 80ab3b2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80ab3b6:	f107 0308 	add.w	r3, r7, #8
 80ab3ba:	681b      	ldr	r3, [r3, #0]
 80ab3bc:	ed93 6a00 	vldr	s12, [r3]
 80ab3c0:	f107 0308 	add.w	r3, r7, #8
 80ab3c4:	681b      	ldr	r3, [r3, #0]
 80ab3c6:	3304      	adds	r3, #4
 80ab3c8:	edd3 7a00 	vldr	s15, [r3]
 80ab3cc:	ee66 7a27 	vmul.f32	s15, s12, s15
 80ab3d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80ab3d4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80ab3d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80ab3dc:	edc7 7a58 	vstr	s15, [r7, #352]	; 0x160
  Zt_Zp[2] = acc[2]
 80ab3e0:	ed97 7a5c 	vldr	s14, [r7, #368]	; 0x170
      - (state_p[0] * state_p[0] - state_p[1] * state_p[1]
 80ab3e4:	f107 0308 	add.w	r3, r7, #8
 80ab3e8:	681b      	ldr	r3, [r3, #0]
 80ab3ea:	edd3 6a00 	vldr	s13, [r3]
 80ab3ee:	f107 0308 	add.w	r3, r7, #8
 80ab3f2:	681b      	ldr	r3, [r3, #0]
 80ab3f4:	edd3 7a00 	vldr	s15, [r3]
 80ab3f8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80ab3fc:	f107 0308 	add.w	r3, r7, #8
 80ab400:	681b      	ldr	r3, [r3, #0]
 80ab402:	3304      	adds	r3, #4
 80ab404:	ed93 6a00 	vldr	s12, [r3]
 80ab408:	f107 0308 	add.w	r3, r7, #8
 80ab40c:	681b      	ldr	r3, [r3, #0]
 80ab40e:	3304      	adds	r3, #4
 80ab410:	edd3 7a00 	vldr	s15, [r3]
 80ab414:	ee66 7a27 	vmul.f32	s15, s12, s15
 80ab418:	ee76 6ae7 	vsub.f32	s13, s13, s15
         - state_p[2] * state_p[2] + state_p[3] * state_p[3]);
 80ab41c:	f107 0308 	add.w	r3, r7, #8
 80ab420:	681b      	ldr	r3, [r3, #0]
 80ab422:	3308      	adds	r3, #8
 80ab424:	ed93 6a00 	vldr	s12, [r3]
 80ab428:	f107 0308 	add.w	r3, r7, #8
 80ab42c:	681b      	ldr	r3, [r3, #0]
 80ab42e:	3308      	adds	r3, #8
 80ab430:	edd3 7a00 	vldr	s15, [r3]
 80ab434:	ee66 7a27 	vmul.f32	s15, s12, s15
 80ab438:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80ab43c:	f107 0308 	add.w	r3, r7, #8
 80ab440:	681b      	ldr	r3, [r3, #0]
 80ab442:	330c      	adds	r3, #12
 80ab444:	ed93 6a00 	vldr	s12, [r3]
 80ab448:	f107 0308 	add.w	r3, r7, #8
 80ab44c:	681b      	ldr	r3, [r3, #0]
 80ab44e:	330c      	adds	r3, #12
 80ab450:	edd3 7a00 	vldr	s15, [r3]
 80ab454:	ee66 7a27 	vmul.f32	s15, s12, s15
 80ab458:	ee76 7aa7 	vadd.f32	s15, s13, s15
      - (state_p[0] * state_p[0] - state_p[1] * state_p[1]
 80ab45c:	ee77 7a67 	vsub.f32	s15, s14, s15
  Zt_Zp[2] = acc[2]
 80ab460:	edc7 7a59 	vstr	s15, [r7, #356]	; 0x164
  matrix_multiply_trans(variance_p, H, VHT, 4, 4, 3);
 80ab464:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 80ab468:	f507 7196 	add.w	r1, r7, #300	; 0x12c
 80ab46c:	1d38      	adds	r0, r7, #4
 80ab46e:	2303      	movs	r3, #3
 80ab470:	9301      	str	r3, [sp, #4]
 80ab472:	2304      	movs	r3, #4
 80ab474:	9300      	str	r3, [sp, #0]
 80ab476:	2304      	movs	r3, #4
 80ab478:	6800      	ldr	r0, [r0, #0]
 80ab47a:	f7fe fc5c 	bl	80a9d36 <matrix_multiply_trans>
  matrix_multiply(VHT, inv_phi, K, 4, 3, 3);    // K = gain value
 80ab47e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80ab482:	f107 0190 	add.w	r1, r7, #144	; 0x90
 80ab486:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 80ab48a:	2303      	movs	r3, #3
 80ab48c:	9301      	str	r3, [sp, #4]
 80ab48e:	2303      	movs	r3, #3
 80ab490:	9300      	str	r3, [sp, #0]
 80ab492:	2304      	movs	r3, #4
 80ab494:	f7fe fbd6 	bl	80a9c44 <matrix_multiply>
  matrix_multiply(K, Zt_Zp, KE, 4, 3, 1);       // KE = gain * error
 80ab498:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80ab49c:	f507 71ae 	add.w	r1, r7, #348	; 0x15c
 80ab4a0:	f107 0060 	add.w	r0, r7, #96	; 0x60
 80ab4a4:	2301      	movs	r3, #1
 80ab4a6:	9301      	str	r3, [sp, #4]
 80ab4a8:	2303      	movs	r3, #3
 80ab4aa:	9300      	str	r3, [sp, #0]
 80ab4ac:	2304      	movs	r3, #4
 80ab4ae:	f7fe fbc9 	bl	80a9c44 <matrix_multiply>

  for (i = 0; i < 4; i++)
 80ab4b2:	2300      	movs	r3, #0
 80ab4b4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 80ab4b8:	e025      	b.n	80ab506 <acc_update+0x462>
 80ab4ba:	bf00      	nop
 80ab4bc:	20007890 	.word	0x20007890
 80ab4c0:	00000000 	.word	0x00000000
    state_p[i] += KE[i];
 80ab4c4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80ab4c8:	009b      	lsls	r3, r3, #2
 80ab4ca:	f107 0208 	add.w	r2, r7, #8
 80ab4ce:	6812      	ldr	r2, [r2, #0]
 80ab4d0:	4413      	add	r3, r2
 80ab4d2:	ed93 7a00 	vldr	s14, [r3]
 80ab4d6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80ab4da:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80ab4de:	009b      	lsls	r3, r3, #2
 80ab4e0:	4413      	add	r3, r2
 80ab4e2:	edd3 7a00 	vldr	s15, [r3]
 80ab4e6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80ab4ea:	009b      	lsls	r3, r3, #2
 80ab4ec:	f107 0208 	add.w	r2, r7, #8
 80ab4f0:	6812      	ldr	r2, [r2, #0]
 80ab4f2:	4413      	add	r3, r2
 80ab4f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80ab4f8:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 4; i++)
 80ab4fc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80ab500:	3301      	adds	r3, #1
 80ab502:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 80ab506:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80ab50a:	2b03      	cmp	r3, #3
 80ab50c:	ddda      	ble.n	80ab4c4 <acc_update+0x420>

  matrix_multiply(K, H, KH, 4, 3, 4);
 80ab50e:	f107 0210 	add.w	r2, r7, #16
 80ab512:	f507 7196 	add.w	r1, r7, #300	; 0x12c
 80ab516:	f107 0060 	add.w	r0, r7, #96	; 0x60
 80ab51a:	2304      	movs	r3, #4
 80ab51c:	9301      	str	r3, [sp, #4]
 80ab51e:	2303      	movs	r3, #3
 80ab520:	9300      	str	r3, [sp, #0]
 80ab522:	2304      	movs	r3, #4
 80ab524:	f7fe fb8e 	bl	80a9c44 <matrix_multiply>
  KH[0] = 1 - KH[0];
 80ab528:	f107 0310 	add.w	r3, r7, #16
 80ab52c:	edd3 7a00 	vldr	s15, [r3]
 80ab530:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80ab534:	ee77 7a67 	vsub.f32	s15, s14, s15
 80ab538:	f107 0310 	add.w	r3, r7, #16
 80ab53c:	edc3 7a00 	vstr	s15, [r3]
  KH[1] = 0 - KH[1];
 80ab540:	f107 0310 	add.w	r3, r7, #16
 80ab544:	edd3 7a01 	vldr	s15, [r3, #4]
 80ab548:	ed1f 7a23 	vldr	s14, [pc, #-140]	; 80ab4c0 <acc_update+0x41c>
 80ab54c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80ab550:	f107 0310 	add.w	r3, r7, #16
 80ab554:	edc3 7a01 	vstr	s15, [r3, #4]
  KH[2] = 0 - KH[2];
 80ab558:	f107 0310 	add.w	r3, r7, #16
 80ab55c:	edd3 7a02 	vldr	s15, [r3, #8]
 80ab560:	ed1f 7a29 	vldr	s14, [pc, #-164]	; 80ab4c0 <acc_update+0x41c>
 80ab564:	ee77 7a67 	vsub.f32	s15, s14, s15
 80ab568:	f107 0310 	add.w	r3, r7, #16
 80ab56c:	edc3 7a02 	vstr	s15, [r3, #8]
  KH[3] = 0 - KH[3];
 80ab570:	f107 0310 	add.w	r3, r7, #16
 80ab574:	edd3 7a03 	vldr	s15, [r3, #12]
 80ab578:	ed1f 7a2f 	vldr	s14, [pc, #-188]	; 80ab4c0 <acc_update+0x41c>
 80ab57c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80ab580:	f107 0310 	add.w	r3, r7, #16
 80ab584:	edc3 7a03 	vstr	s15, [r3, #12]
  KH[4] = 0 - KH[4];
 80ab588:	f107 0310 	add.w	r3, r7, #16
 80ab58c:	edd3 7a04 	vldr	s15, [r3, #16]
 80ab590:	ed1f 7a35 	vldr	s14, [pc, #-212]	; 80ab4c0 <acc_update+0x41c>
 80ab594:	ee77 7a67 	vsub.f32	s15, s14, s15
 80ab598:	f107 0310 	add.w	r3, r7, #16
 80ab59c:	edc3 7a04 	vstr	s15, [r3, #16]
  KH[5] = 1 - KH[5];
 80ab5a0:	f107 0310 	add.w	r3, r7, #16
 80ab5a4:	edd3 7a05 	vldr	s15, [r3, #20]
 80ab5a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80ab5ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80ab5b0:	f107 0310 	add.w	r3, r7, #16
 80ab5b4:	edc3 7a05 	vstr	s15, [r3, #20]
  KH[6] = 0 - KH[6];
 80ab5b8:	f107 0310 	add.w	r3, r7, #16
 80ab5bc:	edd3 7a06 	vldr	s15, [r3, #24]
 80ab5c0:	ed1f 7a41 	vldr	s14, [pc, #-260]	; 80ab4c0 <acc_update+0x41c>
 80ab5c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80ab5c8:	f107 0310 	add.w	r3, r7, #16
 80ab5cc:	edc3 7a06 	vstr	s15, [r3, #24]
  KH[7] = 0 - KH[7];
 80ab5d0:	f107 0310 	add.w	r3, r7, #16
 80ab5d4:	edd3 7a07 	vldr	s15, [r3, #28]
 80ab5d8:	ed1f 7a47 	vldr	s14, [pc, #-284]	; 80ab4c0 <acc_update+0x41c>
 80ab5dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80ab5e0:	f107 0310 	add.w	r3, r7, #16
 80ab5e4:	edc3 7a07 	vstr	s15, [r3, #28]
  KH[8] = 0 - KH[8];
 80ab5e8:	f107 0310 	add.w	r3, r7, #16
 80ab5ec:	edd3 7a08 	vldr	s15, [r3, #32]
 80ab5f0:	ed1f 7a4d 	vldr	s14, [pc, #-308]	; 80ab4c0 <acc_update+0x41c>
 80ab5f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80ab5f8:	f107 0310 	add.w	r3, r7, #16
 80ab5fc:	edc3 7a08 	vstr	s15, [r3, #32]
  KH[9] = 0 - KH[9];
 80ab600:	f107 0310 	add.w	r3, r7, #16
 80ab604:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80ab608:	ed1f 7a53 	vldr	s14, [pc, #-332]	; 80ab4c0 <acc_update+0x41c>
 80ab60c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80ab610:	f107 0310 	add.w	r3, r7, #16
 80ab614:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
  KH[10] = 1 - KH[10];
 80ab618:	f107 0310 	add.w	r3, r7, #16
 80ab61c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80ab620:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80ab624:	ee77 7a67 	vsub.f32	s15, s14, s15
 80ab628:	f107 0310 	add.w	r3, r7, #16
 80ab62c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
  KH[11] = 0 - KH[11];
 80ab630:	f107 0310 	add.w	r3, r7, #16
 80ab634:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80ab638:	ed1f 7a5f 	vldr	s14, [pc, #-380]	; 80ab4c0 <acc_update+0x41c>
 80ab63c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80ab640:	f107 0310 	add.w	r3, r7, #16
 80ab644:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
  KH[12] = 0 - KH[12];
 80ab648:	f107 0310 	add.w	r3, r7, #16
 80ab64c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80ab650:	ed1f 7a65 	vldr	s14, [pc, #-404]	; 80ab4c0 <acc_update+0x41c>
 80ab654:	ee77 7a67 	vsub.f32	s15, s14, s15
 80ab658:	f107 0310 	add.w	r3, r7, #16
 80ab65c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
  KH[13] = 0 - KH[13];
 80ab660:	f107 0310 	add.w	r3, r7, #16
 80ab664:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80ab668:	ed1f 7a6b 	vldr	s14, [pc, #-428]	; 80ab4c0 <acc_update+0x41c>
 80ab66c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80ab670:	f107 0310 	add.w	r3, r7, #16
 80ab674:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
  KH[14] = 0 - KH[14];
 80ab678:	f107 0310 	add.w	r3, r7, #16
 80ab67c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80ab680:	ed1f 7a71 	vldr	s14, [pc, #-452]	; 80ab4c0 <acc_update+0x41c>
 80ab684:	ee77 7a67 	vsub.f32	s15, s14, s15
 80ab688:	f107 0310 	add.w	r3, r7, #16
 80ab68c:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
  KH[15] = 1 - KH[15];
 80ab690:	f107 0310 	add.w	r3, r7, #16
 80ab694:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80ab698:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80ab69c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80ab6a0:	f107 0310 	add.w	r3, r7, #16
 80ab6a4:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

  matrix_multiply(KH, variance_p, variance, 4, 4, 4);
 80ab6a8:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 80ab6ac:	1d39      	adds	r1, r7, #4
 80ab6ae:	f107 0010 	add.w	r0, r7, #16
 80ab6b2:	2304      	movs	r3, #4
 80ab6b4:	9301      	str	r3, [sp, #4]
 80ab6b6:	2304      	movs	r3, #4
 80ab6b8:	9300      	str	r3, [sp, #0]
 80ab6ba:	2304      	movs	r3, #4
 80ab6bc:	6809      	ldr	r1, [r1, #0]
 80ab6be:	f7fe fac1 	bl	80a9c44 <matrix_multiply>

  for (i = 0; i < 16; i++)
 80ab6c2:	2300      	movs	r3, #0
 80ab6c4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 80ab6c8:	e013      	b.n	80ab6f2 <acc_update+0x64e>
    variance_p[i] = variance[i];
 80ab6ca:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80ab6ce:	009b      	lsls	r3, r3, #2
 80ab6d0:	1d3a      	adds	r2, r7, #4
 80ab6d2:	6812      	ldr	r2, [r2, #0]
 80ab6d4:	4413      	add	r3, r2
 80ab6d6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80ab6da:	0092      	lsls	r2, r2, #2
 80ab6dc:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 80ab6e0:	440a      	add	r2, r1
 80ab6e2:	3a44      	subs	r2, #68	; 0x44
 80ab6e4:	6812      	ldr	r2, [r2, #0]
 80ab6e6:	601a      	str	r2, [r3, #0]
  for (i = 0; i < 16; i++)
 80ab6e8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80ab6ec:	3301      	adds	r3, #1
 80ab6ee:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 80ab6f2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80ab6f6:	2b0f      	cmp	r3, #15
 80ab6f8:	dde7      	ble.n	80ab6ca <acc_update+0x626>
}
 80ab6fa:	bf00      	nop
 80ab6fc:	bf00      	nop
 80ab6fe:	f507 77dc 	add.w	r7, r7, #440	; 0x1b8
 80ab702:	46bd      	mov	sp, r7
 80ab704:	bd80      	pop	{r7, pc}
 80ab706:	bf00      	nop

080ab708 <posture_update>:

static void posture_update(float dt, int data_type)
{
 80ab708:	b580      	push	{r7, lr}
 80ab70a:	b086      	sub	sp, #24
 80ab70c:	af02      	add	r7, sp, #8
 80ab70e:	ed87 0a01 	vstr	s0, [r7, #4]
 80ab712:	6038      	str	r0, [r7, #0]
  int i = 0;
 80ab714:	2300      	movs	r3, #0
 80ab716:	60fb      	str	r3, [r7, #12]
//      static float state_p[4] = { 0 };
  static float variance_p[16] =
      { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 };
  float singular_test_p = 0;
 80ab718:	f04f 0300 	mov.w	r3, #0
 80ab71c:	60bb      	str	r3, [r7, #8]

  if (posture_loc.posture_start > 0) {  // calculate initial pose when start
 80ab71e:	4b4e      	ldr	r3, [pc, #312]	; (80ab858 <posture_update+0x150>)
 80ab720:	681b      	ldr	r3, [r3, #0]
 80ab722:	2b00      	cmp	r3, #0
 80ab724:	dd29      	ble.n	80ab77a <posture_update+0x72>
    posture_loc.posture_start--;
 80ab726:	4b4c      	ldr	r3, [pc, #304]	; (80ab858 <posture_update+0x150>)
 80ab728:	681b      	ldr	r3, [r3, #0]
 80ab72a:	3b01      	subs	r3, #1
 80ab72c:	4a4a      	ldr	r2, [pc, #296]	; (80ab858 <posture_update+0x150>)
 80ab72e:	6013      	str	r3, [r2, #0]
    matrix_normalize(posture_loc.acc, 3);
 80ab730:	2103      	movs	r1, #3
 80ab732:	484a      	ldr	r0, [pc, #296]	; (80ab85c <posture_update+0x154>)
 80ab734:	f7fe fd74 	bl	80aa220 <matrix_normalize>

    setting_state(posture_loc.acc, posture_loc.mag, posture_loc.state_1);
 80ab738:	4a49      	ldr	r2, [pc, #292]	; (80ab860 <posture_update+0x158>)
 80ab73a:	494a      	ldr	r1, [pc, #296]	; (80ab864 <posture_update+0x15c>)
 80ab73c:	4847      	ldr	r0, [pc, #284]	; (80ab85c <posture_update+0x154>)
 80ab73e:	f7fe ffff 	bl	80aa740 <setting_state>
    for (i = 0; i < 4; i++)
 80ab742:	2300      	movs	r3, #0
 80ab744:	60fb      	str	r3, [r7, #12]
 80ab746:	e010      	b.n	80ab76a <posture_update+0x62>
      posture_loc.state[i] = posture_loc.state_1[i];
 80ab748:	4a43      	ldr	r2, [pc, #268]	; (80ab858 <posture_update+0x150>)
 80ab74a:	68fb      	ldr	r3, [r7, #12]
 80ab74c:	3306      	adds	r3, #6
 80ab74e:	009b      	lsls	r3, r3, #2
 80ab750:	4413      	add	r3, r2
 80ab752:	3304      	adds	r3, #4
 80ab754:	681a      	ldr	r2, [r3, #0]
 80ab756:	4940      	ldr	r1, [pc, #256]	; (80ab858 <posture_update+0x150>)
 80ab758:	68fb      	ldr	r3, [r7, #12]
 80ab75a:	3302      	adds	r3, #2
 80ab75c:	009b      	lsls	r3, r3, #2
 80ab75e:	440b      	add	r3, r1
 80ab760:	3304      	adds	r3, #4
 80ab762:	601a      	str	r2, [r3, #0]
    for (i = 0; i < 4; i++)
 80ab764:	68fb      	ldr	r3, [r7, #12]
 80ab766:	3301      	adds	r3, #1
 80ab768:	60fb      	str	r3, [r7, #12]
 80ab76a:	68fb      	ldr	r3, [r7, #12]
 80ab76c:	2b03      	cmp	r3, #3
 80ab76e:	ddeb      	ble.n	80ab748 <posture_update+0x40>
    matrix_normalize(posture_loc.state, 4);
 80ab770:	2104      	movs	r1, #4
 80ab772:	483d      	ldr	r0, [pc, #244]	; (80ab868 <posture_update+0x160>)
 80ab774:	f7fe fd54 	bl	80aa220 <matrix_normalize>
    }
    for (i = 0; i < 16; i++)
      posture_loc.variance_1[i] = variance_p[i];
    matrix_normalize(posture_loc.state, 4);     // data of rotation vector should be in 1~-1
  }
}
 80ab778:	e06a      	b.n	80ab850 <posture_update+0x148>
    if (data_type == SENSOR_TYPE_GYROSCOPE) {
 80ab77a:	683b      	ldr	r3, [r7, #0]
 80ab77c:	2b02      	cmp	r3, #2
 80ab77e:	d10c      	bne.n	80ab79a <posture_update+0x92>
      propagation(posture_loc.gyro, dt, posture_loc.state, variance_p,  // may be need update state_p to posture_loc.state
 80ab780:	4b3a      	ldr	r3, [pc, #232]	; (80ab86c <posture_update+0x164>)
 80ab782:	9301      	str	r3, [sp, #4]
 80ab784:	4b3a      	ldr	r3, [pc, #232]	; (80ab870 <posture_update+0x168>)
 80ab786:	9300      	str	r3, [sp, #0]
 80ab788:	4b35      	ldr	r3, [pc, #212]	; (80ab860 <posture_update+0x158>)
 80ab78a:	4a3a      	ldr	r2, [pc, #232]	; (80ab874 <posture_update+0x16c>)
 80ab78c:	4936      	ldr	r1, [pc, #216]	; (80ab868 <posture_update+0x160>)
 80ab78e:	ed97 0a01 	vldr	s0, [r7, #4]
 80ab792:	4839      	ldr	r0, [pc, #228]	; (80ab878 <posture_update+0x170>)
 80ab794:	f7ff f974 	bl	80aaa80 <propagation>
 80ab798:	e02a      	b.n	80ab7f0 <posture_update+0xe8>
    } else if (data_type == SENSOR_TYPE_ACCELEROMETER) {
 80ab79a:	683b      	ldr	r3, [r7, #0]
 80ab79c:	2b00      	cmp	r3, #0
 80ab79e:	d109      	bne.n	80ab7b4 <posture_update+0xac>
      if (posture_loc.acc_correct)      // acc correct if static, may be don't need this condition
 80ab7a0:	4b2d      	ldr	r3, [pc, #180]	; (80ab858 <posture_update+0x150>)
 80ab7a2:	685b      	ldr	r3, [r3, #4]
 80ab7a4:	2b00      	cmp	r3, #0
 80ab7a6:	d023      	beq.n	80ab7f0 <posture_update+0xe8>
        acc_update(posture_loc.acc, posture_loc.state, variance_p);     // may be need update state_p to posture_loc.state
 80ab7a8:	4a32      	ldr	r2, [pc, #200]	; (80ab874 <posture_update+0x16c>)
 80ab7aa:	492f      	ldr	r1, [pc, #188]	; (80ab868 <posture_update+0x160>)
 80ab7ac:	482b      	ldr	r0, [pc, #172]	; (80ab85c <posture_update+0x154>)
 80ab7ae:	f7ff fc79 	bl	80ab0a4 <acc_update>
 80ab7b2:	e01d      	b.n	80ab7f0 <posture_update+0xe8>
    } else if (data_type == SENSOR_TYPE_MAGNETIC_FIELD) {
 80ab7b4:	683b      	ldr	r3, [r7, #0]
 80ab7b6:	2b01      	cmp	r3, #1
 80ab7b8:	d11a      	bne.n	80ab7f0 <posture_update+0xe8>
      posture_loc.mag_correct = 0;      // disable mag correction
 80ab7ba:	4b27      	ldr	r3, [pc, #156]	; (80ab858 <posture_update+0x150>)
 80ab7bc:	2200      	movs	r2, #0
 80ab7be:	609a      	str	r2, [r3, #8]
      if (posture_loc.mag_correct)      // mag correct if static and no interference
 80ab7c0:	4b25      	ldr	r3, [pc, #148]	; (80ab858 <posture_update+0x150>)
 80ab7c2:	689b      	ldr	r3, [r3, #8]
 80ab7c4:	2b00      	cmp	r3, #0
 80ab7c6:	d013      	beq.n	80ab7f0 <posture_update+0xe8>
            posture_loc.state[1] * posture_loc.state[3] -
 80ab7c8:	4b23      	ldr	r3, [pc, #140]	; (80ab858 <posture_update+0x150>)
 80ab7ca:	ed93 7a04 	vldr	s14, [r3, #16]
 80ab7ce:	4b22      	ldr	r3, [pc, #136]	; (80ab858 <posture_update+0x150>)
 80ab7d0:	edd3 7a06 	vldr	s15, [r3, #24]
 80ab7d4:	ee27 7a27 	vmul.f32	s14, s14, s15
            posture_loc.state[0] * posture_loc.state[2];
 80ab7d8:	4b1f      	ldr	r3, [pc, #124]	; (80ab858 <posture_update+0x150>)
 80ab7da:	edd3 6a03 	vldr	s13, [r3, #12]
 80ab7de:	4b1e      	ldr	r3, [pc, #120]	; (80ab858 <posture_update+0x150>)
 80ab7e0:	edd3 7a05 	vldr	s15, [r3, #20]
 80ab7e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
        singular_test_p =
 80ab7e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80ab7ec:	edc7 7a02 	vstr	s15, [r7, #8]
    for (i = 0; i < 4; i++) {
 80ab7f0:	2300      	movs	r3, #0
 80ab7f2:	60fb      	str	r3, [r7, #12]
 80ab7f4:	e010      	b.n	80ab818 <posture_update+0x110>
      posture_loc.state_1[i] = posture_loc.state[i];
 80ab7f6:	4a18      	ldr	r2, [pc, #96]	; (80ab858 <posture_update+0x150>)
 80ab7f8:	68fb      	ldr	r3, [r7, #12]
 80ab7fa:	3302      	adds	r3, #2
 80ab7fc:	009b      	lsls	r3, r3, #2
 80ab7fe:	4413      	add	r3, r2
 80ab800:	3304      	adds	r3, #4
 80ab802:	681a      	ldr	r2, [r3, #0]
 80ab804:	4914      	ldr	r1, [pc, #80]	; (80ab858 <posture_update+0x150>)
 80ab806:	68fb      	ldr	r3, [r7, #12]
 80ab808:	3306      	adds	r3, #6
 80ab80a:	009b      	lsls	r3, r3, #2
 80ab80c:	440b      	add	r3, r1
 80ab80e:	3304      	adds	r3, #4
 80ab810:	601a      	str	r2, [r3, #0]
    for (i = 0; i < 4; i++) {
 80ab812:	68fb      	ldr	r3, [r7, #12]
 80ab814:	3301      	adds	r3, #1
 80ab816:	60fb      	str	r3, [r7, #12]
 80ab818:	68fb      	ldr	r3, [r7, #12]
 80ab81a:	2b03      	cmp	r3, #3
 80ab81c:	ddeb      	ble.n	80ab7f6 <posture_update+0xee>
    for (i = 0; i < 16; i++)
 80ab81e:	2300      	movs	r3, #0
 80ab820:	60fb      	str	r3, [r7, #12]
 80ab822:	e00e      	b.n	80ab842 <posture_update+0x13a>
      posture_loc.variance_1[i] = variance_p[i];
 80ab824:	4a13      	ldr	r2, [pc, #76]	; (80ab874 <posture_update+0x16c>)
 80ab826:	68fb      	ldr	r3, [r7, #12]
 80ab828:	009b      	lsls	r3, r3, #2
 80ab82a:	4413      	add	r3, r2
 80ab82c:	681a      	ldr	r2, [r3, #0]
 80ab82e:	490a      	ldr	r1, [pc, #40]	; (80ab858 <posture_update+0x150>)
 80ab830:	68fb      	ldr	r3, [r7, #12]
 80ab832:	330a      	adds	r3, #10
 80ab834:	009b      	lsls	r3, r3, #2
 80ab836:	440b      	add	r3, r1
 80ab838:	3304      	adds	r3, #4
 80ab83a:	601a      	str	r2, [r3, #0]
    for (i = 0; i < 16; i++)
 80ab83c:	68fb      	ldr	r3, [r7, #12]
 80ab83e:	3301      	adds	r3, #1
 80ab840:	60fb      	str	r3, [r7, #12]
 80ab842:	68fb      	ldr	r3, [r7, #12]
 80ab844:	2b0f      	cmp	r3, #15
 80ab846:	dded      	ble.n	80ab824 <posture_update+0x11c>
    matrix_normalize(posture_loc.state, 4);     // data of rotation vector should be in 1~-1
 80ab848:	2104      	movs	r1, #4
 80ab84a:	4807      	ldr	r0, [pc, #28]	; (80ab868 <posture_update+0x160>)
 80ab84c:	f7fe fce8 	bl	80aa220 <matrix_normalize>
}
 80ab850:	bf00      	nop
 80ab852:	3710      	adds	r7, #16
 80ab854:	46bd      	mov	sp, r7
 80ab856:	bd80      	pop	{r7, pc}
 80ab858:	200080bc 	.word	0x200080bc
 80ab85c:	20008168 	.word	0x20008168
 80ab860:	200080d8 	.word	0x200080d8
 80ab864:	20008180 	.word	0x20008180
 80ab868:	200080c8 	.word	0x200080c8
 80ab86c:	20008128 	.word	0x20008128
 80ab870:	200080e8 	.word	0x200080e8
 80ab874:	200078b0 	.word	0x200078b0
 80ab878:	20008174 	.word	0x20008174

080ab87c <posture>:

static int posture(float *input_data, float *rot_vec, float dt_s, int data_type)
{
 80ab87c:	b580      	push	{r7, lr}
 80ab87e:	b086      	sub	sp, #24
 80ab880:	af00      	add	r7, sp, #0
 80ab882:	60f8      	str	r0, [r7, #12]
 80ab884:	60b9      	str	r1, [r7, #8]
 80ab886:	ed87 0a01 	vstr	s0, [r7, #4]
 80ab88a:	603a      	str	r2, [r7, #0]
  int ret = 0;
 80ab88c:	2300      	movs	r3, #0
 80ab88e:	617b      	str	r3, [r7, #20]

  if (dt_s <= 0 || dt_s > 1.0f) {
 80ab890:	edd7 7a01 	vldr	s15, [r7, #4]
 80ab894:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80ab898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80ab89c:	d908      	bls.n	80ab8b0 <posture+0x34>
 80ab89e:	edd7 7a01 	vldr	s15, [r7, #4]
 80ab8a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80ab8a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80ab8aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80ab8ae:	dd05      	ble.n	80ab8bc <posture+0x40>
    printf("time diff is not right!!!\r\n");
 80ab8b0:	482c      	ldr	r0, [pc, #176]	; (80ab964 <posture+0xe8>)
 80ab8b2:	f015 f8fb 	bl	80c0aac <puts>
    return -1;                  // dt error
 80ab8b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80ab8ba:	e04e      	b.n	80ab95a <posture+0xde>
  }
  ret = preprocess(input_data, data_type);
 80ab8bc:	6839      	ldr	r1, [r7, #0]
 80ab8be:	68f8      	ldr	r0, [r7, #12]
 80ab8c0:	f7fe fe12 	bl	80aa4e8 <preprocess>
 80ab8c4:	6178      	str	r0, [r7, #20]
  if (ret < 0)
 80ab8c6:	697b      	ldr	r3, [r7, #20]
 80ab8c8:	2b00      	cmp	r3, #0
 80ab8ca:	da01      	bge.n	80ab8d0 <posture+0x54>
    return ret;
 80ab8cc:	697b      	ldr	r3, [r7, #20]
 80ab8ce:	e044      	b.n	80ab95a <posture+0xde>

  posture_update(dt_s, data_type);
 80ab8d0:	6838      	ldr	r0, [r7, #0]
 80ab8d2:	ed97 0a01 	vldr	s0, [r7, #4]
 80ab8d6:	f7ff ff17 	bl	80ab708 <posture_update>

  // get rotation vector
  if (posture_loc.state[0] > 0) {
 80ab8da:	4b23      	ldr	r3, [pc, #140]	; (80ab968 <posture+0xec>)
 80ab8dc:	edd3 7a03 	vldr	s15, [r3, #12]
 80ab8e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80ab8e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80ab8e8:	dd1b      	ble.n	80ab922 <posture+0xa6>
    rot_vec[0] = posture_loc.state[1];
 80ab8ea:	4b1f      	ldr	r3, [pc, #124]	; (80ab968 <posture+0xec>)
 80ab8ec:	691a      	ldr	r2, [r3, #16]
 80ab8ee:	68bb      	ldr	r3, [r7, #8]
 80ab8f0:	601a      	str	r2, [r3, #0]
    rot_vec[1] = -posture_loc.state[2];
 80ab8f2:	4b1d      	ldr	r3, [pc, #116]	; (80ab968 <posture+0xec>)
 80ab8f4:	edd3 7a05 	vldr	s15, [r3, #20]
 80ab8f8:	68bb      	ldr	r3, [r7, #8]
 80ab8fa:	3304      	adds	r3, #4
 80ab8fc:	eef1 7a67 	vneg.f32	s15, s15
 80ab900:	edc3 7a00 	vstr	s15, [r3]
    rot_vec[2] = -posture_loc.state[3];
 80ab904:	4b18      	ldr	r3, [pc, #96]	; (80ab968 <posture+0xec>)
 80ab906:	edd3 7a06 	vldr	s15, [r3, #24]
 80ab90a:	68bb      	ldr	r3, [r7, #8]
 80ab90c:	3308      	adds	r3, #8
 80ab90e:	eef1 7a67 	vneg.f32	s15, s15
 80ab912:	edc3 7a00 	vstr	s15, [r3]
    rot_vec[3] = posture_loc.state[0];
 80ab916:	68bb      	ldr	r3, [r7, #8]
 80ab918:	330c      	adds	r3, #12
 80ab91a:	4a13      	ldr	r2, [pc, #76]	; (80ab968 <posture+0xec>)
 80ab91c:	68d2      	ldr	r2, [r2, #12]
 80ab91e:	601a      	str	r2, [r3, #0]
 80ab920:	e01a      	b.n	80ab958 <posture+0xdc>
  } else {
    rot_vec[0] = -posture_loc.state[1];
 80ab922:	4b11      	ldr	r3, [pc, #68]	; (80ab968 <posture+0xec>)
 80ab924:	edd3 7a04 	vldr	s15, [r3, #16]
 80ab928:	eef1 7a67 	vneg.f32	s15, s15
 80ab92c:	68bb      	ldr	r3, [r7, #8]
 80ab92e:	edc3 7a00 	vstr	s15, [r3]
    rot_vec[1] = posture_loc.state[2];
 80ab932:	68bb      	ldr	r3, [r7, #8]
 80ab934:	3304      	adds	r3, #4
 80ab936:	4a0c      	ldr	r2, [pc, #48]	; (80ab968 <posture+0xec>)
 80ab938:	6952      	ldr	r2, [r2, #20]
 80ab93a:	601a      	str	r2, [r3, #0]
    rot_vec[2] = posture_loc.state[3];
 80ab93c:	68bb      	ldr	r3, [r7, #8]
 80ab93e:	3308      	adds	r3, #8
 80ab940:	4a09      	ldr	r2, [pc, #36]	; (80ab968 <posture+0xec>)
 80ab942:	6992      	ldr	r2, [r2, #24]
 80ab944:	601a      	str	r2, [r3, #0]
    rot_vec[3] = -posture_loc.state[0];
 80ab946:	4b08      	ldr	r3, [pc, #32]	; (80ab968 <posture+0xec>)
 80ab948:	edd3 7a03 	vldr	s15, [r3, #12]
 80ab94c:	68bb      	ldr	r3, [r7, #8]
 80ab94e:	330c      	adds	r3, #12
 80ab950:	eef1 7a67 	vneg.f32	s15, s15
 80ab954:	edc3 7a00 	vstr	s15, [r3]
  }

  return 0;
 80ab958:	2300      	movs	r3, #0
}
 80ab95a:	4618      	mov	r0, r3
 80ab95c:	3718      	adds	r7, #24
 80ab95e:	46bd      	mov	sp, r7
 80ab960:	bd80      	pop	{r7, pc}
 80ab962:	bf00      	nop
 80ab964:	080c5d48 	.word	0x080c5d48
 80ab968:	200080bc 	.word	0x200080bc

080ab96c <get_rot_mat>:

static void get_rot_mat(float *rot_vec, float *rot_mat)
{                               // rotation vector to rotation matrix
 80ab96c:	b480      	push	{r7}
 80ab96e:	b089      	sub	sp, #36	; 0x24
 80ab970:	af00      	add	r7, sp, #0
 80ab972:	6078      	str	r0, [r7, #4]
 80ab974:	6039      	str	r1, [r7, #0]
  int i = 0;
 80ab976:	2300      	movs	r3, #0
 80ab978:	61fb      	str	r3, [r7, #28]

  float state[4] = { 0 };
 80ab97a:	f107 030c 	add.w	r3, r7, #12
 80ab97e:	2200      	movs	r2, #0
 80ab980:	601a      	str	r2, [r3, #0]
 80ab982:	605a      	str	r2, [r3, #4]
 80ab984:	609a      	str	r2, [r3, #8]
 80ab986:	60da      	str	r2, [r3, #12]

  state[0] = rot_vec[3];
 80ab988:	687b      	ldr	r3, [r7, #4]
 80ab98a:	68db      	ldr	r3, [r3, #12]
 80ab98c:	60fb      	str	r3, [r7, #12]
  if (state[0] > 0) {
 80ab98e:	edd7 7a03 	vldr	s15, [r7, #12]
 80ab992:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80ab996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80ab99a:	dd13      	ble.n	80ab9c4 <get_rot_mat+0x58>
    state[1] = rot_vec[0];
 80ab99c:	687b      	ldr	r3, [r7, #4]
 80ab99e:	681b      	ldr	r3, [r3, #0]
 80ab9a0:	613b      	str	r3, [r7, #16]
    state[2] = -rot_vec[1];
 80ab9a2:	687b      	ldr	r3, [r7, #4]
 80ab9a4:	3304      	adds	r3, #4
 80ab9a6:	edd3 7a00 	vldr	s15, [r3]
 80ab9aa:	eef1 7a67 	vneg.f32	s15, s15
 80ab9ae:	edc7 7a05 	vstr	s15, [r7, #20]
    state[3] = -rot_vec[2];
 80ab9b2:	687b      	ldr	r3, [r7, #4]
 80ab9b4:	3308      	adds	r3, #8
 80ab9b6:	edd3 7a00 	vldr	s15, [r3]
 80ab9ba:	eef1 7a67 	vneg.f32	s15, s15
 80ab9be:	edc7 7a06 	vstr	s15, [r7, #24]
 80ab9c2:	e00c      	b.n	80ab9de <get_rot_mat+0x72>
  } else {
    state[1] = -rot_vec[0];
 80ab9c4:	687b      	ldr	r3, [r7, #4]
 80ab9c6:	edd3 7a00 	vldr	s15, [r3]
 80ab9ca:	eef1 7a67 	vneg.f32	s15, s15
 80ab9ce:	edc7 7a04 	vstr	s15, [r7, #16]
    state[2] = rot_vec[1];
 80ab9d2:	687b      	ldr	r3, [r7, #4]
 80ab9d4:	685b      	ldr	r3, [r3, #4]
 80ab9d6:	617b      	str	r3, [r7, #20]
    state[3] = rot_vec[2];
 80ab9d8:	687b      	ldr	r3, [r7, #4]
 80ab9da:	689b      	ldr	r3, [r3, #8]
 80ab9dc:	61bb      	str	r3, [r7, #24]
  }

  rot_mat[0] = (state[0] * state[0] + state[1] * state[1]
 80ab9de:	ed97 7a03 	vldr	s14, [r7, #12]
 80ab9e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80ab9e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80ab9ea:	edd7 6a04 	vldr	s13, [r7, #16]
 80ab9ee:	edd7 7a04 	vldr	s15, [r7, #16]
 80ab9f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80ab9f6:	ee37 7a27 	vadd.f32	s14, s14, s15
                - state[2] * state[2] - state[3] * state[3]);   // cos(theta)cos(psi)
 80ab9fa:	edd7 6a05 	vldr	s13, [r7, #20]
 80ab9fe:	edd7 7a05 	vldr	s15, [r7, #20]
 80aba02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80aba06:	ee37 7a67 	vsub.f32	s14, s14, s15
 80aba0a:	edd7 6a06 	vldr	s13, [r7, #24]
 80aba0e:	edd7 7a06 	vldr	s15, [r7, #24]
 80aba12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80aba16:	ee77 7a67 	vsub.f32	s15, s14, s15
  rot_mat[0] = (state[0] * state[0] + state[1] * state[1]
 80aba1a:	683b      	ldr	r3, [r7, #0]
 80aba1c:	edc3 7a00 	vstr	s15, [r3]
  rot_mat[1] = 2 * (state[1] * state[2] - state[0] * state[3]);
 80aba20:	ed97 7a04 	vldr	s14, [r7, #16]
 80aba24:	edd7 7a05 	vldr	s15, [r7, #20]
 80aba28:	ee27 7a27 	vmul.f32	s14, s14, s15
 80aba2c:	edd7 6a03 	vldr	s13, [r7, #12]
 80aba30:	edd7 7a06 	vldr	s15, [r7, #24]
 80aba34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80aba38:	ee77 7a67 	vsub.f32	s15, s14, s15
 80aba3c:	683b      	ldr	r3, [r7, #0]
 80aba3e:	3304      	adds	r3, #4
 80aba40:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80aba44:	edc3 7a00 	vstr	s15, [r3]
  rot_mat[2] = 2 * (state[1] * state[3] + state[0] * state[2]);
 80aba48:	ed97 7a04 	vldr	s14, [r7, #16]
 80aba4c:	edd7 7a06 	vldr	s15, [r7, #24]
 80aba50:	ee27 7a27 	vmul.f32	s14, s14, s15
 80aba54:	edd7 6a03 	vldr	s13, [r7, #12]
 80aba58:	edd7 7a05 	vldr	s15, [r7, #20]
 80aba5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80aba60:	ee77 7a27 	vadd.f32	s15, s14, s15
 80aba64:	683b      	ldr	r3, [r7, #0]
 80aba66:	3308      	adds	r3, #8
 80aba68:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80aba6c:	edc3 7a00 	vstr	s15, [r3]
  rot_mat[3] = 2 * (state[1] * state[2] + state[0] * state[3]); //  cos(theta)sin(psi)
 80aba70:	ed97 7a04 	vldr	s14, [r7, #16]
 80aba74:	edd7 7a05 	vldr	s15, [r7, #20]
 80aba78:	ee27 7a27 	vmul.f32	s14, s14, s15
 80aba7c:	edd7 6a03 	vldr	s13, [r7, #12]
 80aba80:	edd7 7a06 	vldr	s15, [r7, #24]
 80aba84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80aba88:	ee77 7a27 	vadd.f32	s15, s14, s15
 80aba8c:	683b      	ldr	r3, [r7, #0]
 80aba8e:	330c      	adds	r3, #12
 80aba90:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80aba94:	edc3 7a00 	vstr	s15, [r3]
  rot_mat[4] = (state[0] * state[0] - state[1] * state[1]
 80aba98:	ed97 7a03 	vldr	s14, [r7, #12]
 80aba9c:	edd7 7a03 	vldr	s15, [r7, #12]
 80abaa0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80abaa4:	edd7 6a04 	vldr	s13, [r7, #16]
 80abaa8:	edd7 7a04 	vldr	s15, [r7, #16]
 80abaac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80abab0:	ee37 7a67 	vsub.f32	s14, s14, s15
                + state[2] * state[2] - state[3] * state[3]);
 80abab4:	edd7 6a05 	vldr	s13, [r7, #20]
 80abab8:	edd7 7a05 	vldr	s15, [r7, #20]
 80ababc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80abac0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80abac4:	edd7 6a06 	vldr	s13, [r7, #24]
 80abac8:	edd7 7a06 	vldr	s15, [r7, #24]
 80abacc:	ee66 7aa7 	vmul.f32	s15, s13, s15
  rot_mat[4] = (state[0] * state[0] - state[1] * state[1]
 80abad0:	683b      	ldr	r3, [r7, #0]
 80abad2:	3310      	adds	r3, #16
                + state[2] * state[2] - state[3] * state[3]);
 80abad4:	ee77 7a67 	vsub.f32	s15, s14, s15
  rot_mat[4] = (state[0] * state[0] - state[1] * state[1]
 80abad8:	edc3 7a00 	vstr	s15, [r3]
  rot_mat[5] = 2 * (state[2] * state[3] - state[0] * state[1]);
 80abadc:	ed97 7a05 	vldr	s14, [r7, #20]
 80abae0:	edd7 7a06 	vldr	s15, [r7, #24]
 80abae4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80abae8:	edd7 6a03 	vldr	s13, [r7, #12]
 80abaec:	edd7 7a04 	vldr	s15, [r7, #16]
 80abaf0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80abaf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80abaf8:	683b      	ldr	r3, [r7, #0]
 80abafa:	3314      	adds	r3, #20
 80abafc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80abb00:	edc3 7a00 	vstr	s15, [r3]
  rot_mat[6] = 2 * (state[1] * state[3] - state[0] * state[2]); // -sin(theta)
 80abb04:	ed97 7a04 	vldr	s14, [r7, #16]
 80abb08:	edd7 7a06 	vldr	s15, [r7, #24]
 80abb0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80abb10:	edd7 6a03 	vldr	s13, [r7, #12]
 80abb14:	edd7 7a05 	vldr	s15, [r7, #20]
 80abb18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80abb1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80abb20:	683b      	ldr	r3, [r7, #0]
 80abb22:	3318      	adds	r3, #24
 80abb24:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80abb28:	edc3 7a00 	vstr	s15, [r3]
  rot_mat[7] = 2 * (state[0] * state[1] + state[2] * state[3]); //  cos(theta)sin(phi)
 80abb2c:	ed97 7a03 	vldr	s14, [r7, #12]
 80abb30:	edd7 7a04 	vldr	s15, [r7, #16]
 80abb34:	ee27 7a27 	vmul.f32	s14, s14, s15
 80abb38:	edd7 6a05 	vldr	s13, [r7, #20]
 80abb3c:	edd7 7a06 	vldr	s15, [r7, #24]
 80abb40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80abb44:	ee77 7a27 	vadd.f32	s15, s14, s15
 80abb48:	683b      	ldr	r3, [r7, #0]
 80abb4a:	331c      	adds	r3, #28
 80abb4c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80abb50:	edc3 7a00 	vstr	s15, [r3]
  rot_mat[8] = (state[0] * state[0] - state[1] * state[1]
 80abb54:	ed97 7a03 	vldr	s14, [r7, #12]
 80abb58:	edd7 7a03 	vldr	s15, [r7, #12]
 80abb5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80abb60:	edd7 6a04 	vldr	s13, [r7, #16]
 80abb64:	edd7 7a04 	vldr	s15, [r7, #16]
 80abb68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80abb6c:	ee37 7a67 	vsub.f32	s14, s14, s15
                - state[2] * state[2] + state[3] * state[3]);   // cos(theta)cos(phi)
 80abb70:	edd7 6a05 	vldr	s13, [r7, #20]
 80abb74:	edd7 7a05 	vldr	s15, [r7, #20]
 80abb78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80abb7c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80abb80:	edd7 6a06 	vldr	s13, [r7, #24]
 80abb84:	edd7 7a06 	vldr	s15, [r7, #24]
 80abb88:	ee66 7aa7 	vmul.f32	s15, s13, s15
  rot_mat[8] = (state[0] * state[0] - state[1] * state[1]
 80abb8c:	683b      	ldr	r3, [r7, #0]
 80abb8e:	3320      	adds	r3, #32
                - state[2] * state[2] + state[3] * state[3]);   // cos(theta)cos(phi)
 80abb90:	ee77 7a27 	vadd.f32	s15, s14, s15
  rot_mat[8] = (state[0] * state[0] - state[1] * state[1]
 80abb94:	edc3 7a00 	vstr	s15, [r3]

  // data of rotation matrix should be in 1~-1
  for (i = 0; i < 9; i++) {
 80abb98:	2300      	movs	r3, #0
 80abb9a:	61fb      	str	r3, [r7, #28]
 80abb9c:	e02a      	b.n	80abbf4 <get_rot_mat+0x288>
    if (rot_mat[i] > 1.0f)
 80abb9e:	69fb      	ldr	r3, [r7, #28]
 80abba0:	009b      	lsls	r3, r3, #2
 80abba2:	683a      	ldr	r2, [r7, #0]
 80abba4:	4413      	add	r3, r2
 80abba6:	edd3 7a00 	vldr	s15, [r3]
 80abbaa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80abbae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80abbb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80abbb6:	dd07      	ble.n	80abbc8 <get_rot_mat+0x25c>
      rot_mat[i] = 1.0f;
 80abbb8:	69fb      	ldr	r3, [r7, #28]
 80abbba:	009b      	lsls	r3, r3, #2
 80abbbc:	683a      	ldr	r2, [r7, #0]
 80abbbe:	4413      	add	r3, r2
 80abbc0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80abbc4:	601a      	str	r2, [r3, #0]
 80abbc6:	e012      	b.n	80abbee <get_rot_mat+0x282>
    else if (rot_mat[i] < -1.0f)
 80abbc8:	69fb      	ldr	r3, [r7, #28]
 80abbca:	009b      	lsls	r3, r3, #2
 80abbcc:	683a      	ldr	r2, [r7, #0]
 80abbce:	4413      	add	r3, r2
 80abbd0:	edd3 7a00 	vldr	s15, [r3]
 80abbd4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80abbd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80abbdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80abbe0:	d505      	bpl.n	80abbee <get_rot_mat+0x282>
      rot_mat[i] = -1.0f;
 80abbe2:	69fb      	ldr	r3, [r7, #28]
 80abbe4:	009b      	lsls	r3, r3, #2
 80abbe6:	683a      	ldr	r2, [r7, #0]
 80abbe8:	4413      	add	r3, r2
 80abbea:	4a07      	ldr	r2, [pc, #28]	; (80abc08 <get_rot_mat+0x29c>)
 80abbec:	601a      	str	r2, [r3, #0]
  for (i = 0; i < 9; i++) {
 80abbee:	69fb      	ldr	r3, [r7, #28]
 80abbf0:	3301      	adds	r3, #1
 80abbf2:	61fb      	str	r3, [r7, #28]
 80abbf4:	69fb      	ldr	r3, [r7, #28]
 80abbf6:	2b08      	cmp	r3, #8
 80abbf8:	ddd1      	ble.n	80abb9e <get_rot_mat+0x232>
  }
}
 80abbfa:	bf00      	nop
 80abbfc:	bf00      	nop
 80abbfe:	3724      	adds	r7, #36	; 0x24
 80abc00:	46bd      	mov	sp, r7
 80abc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 80abc06:	4770      	bx	lr
 80abc08:	bf800000 	.word	0xbf800000

080abc0c <get_rms>:
    vel_state_1[i] = vel_state[i];      //update (state)t-1
  }
}

static void get_rms(float *in, float *out_mean, float *out_rms)
{
 80abc0c:	b590      	push	{r4, r7, lr}
 80abc0e:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
 80abc12:	af00      	add	r7, sp, #0
 80abc14:	f107 030c 	add.w	r3, r7, #12
 80abc18:	6018      	str	r0, [r3, #0]
 80abc1a:	f107 0308 	add.w	r3, r7, #8
 80abc1e:	6019      	str	r1, [r3, #0]
 80abc20:	1d3b      	adds	r3, r7, #4
 80abc22:	601a      	str	r2, [r3, #0]
  static float gbuf[3][ALGO_ARRAY_SIZE] = { {0.0f} };
  float sum[3] = { 0 };
 80abc24:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80abc28:	2200      	movs	r2, #0
 80abc2a:	601a      	str	r2, [r3, #0]
 80abc2c:	605a      	str	r2, [r3, #4]
 80abc2e:	609a      	str	r2, [r3, #8]
  float mean_rms[3] = { 0 };
 80abc30:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 80abc34:	2200      	movs	r2, #0
 80abc36:	601a      	str	r2, [r3, #0]
 80abc38:	605a      	str	r2, [r3, #4]
 80abc3a:	609a      	str	r2, [r3, #8]
  float sum_rms[3] = { 0 };
 80abc3c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80abc40:	2200      	movs	r2, #0
 80abc42:	601a      	str	r2, [r3, #0]
 80abc44:	605a      	str	r2, [r3, #4]
 80abc46:	609a      	str	r2, [r3, #8]
  float tmp_window[3][ALGO_ARRAY_SIZE] = { {0.0f} };
 80abc48:	f107 0310 	add.w	r3, r7, #16
 80abc4c:	4618      	mov	r0, r3
 80abc4e:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
 80abc52:	461a      	mov	r2, r3
 80abc54:	2100      	movs	r1, #0
 80abc56:	f014 f9b1 	bl	80bffbc <memset>

  for (int i = 0; i < 3; i++) {
 80abc5a:	2300      	movs	r3, #0
 80abc5c:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 80abc60:	e0f4      	b.n	80abe4c <get_rms+0x240>

    memcpy(tmp_window, gbuf, sizeof(gbuf));
 80abc62:	f107 0310 	add.w	r3, r7, #16
 80abc66:	4a7f      	ldr	r2, [pc, #508]	; (80abe64 <get_rms+0x258>)
 80abc68:	4618      	mov	r0, r3
 80abc6a:	4611      	mov	r1, r2
 80abc6c:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
 80abc70:	461a      	mov	r2, r3
 80abc72:	f014 f995 	bl	80bffa0 <memcpy>
    memcpy(&gbuf[i][1], &tmp_window[i][0],
 80abc76:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80abc7a:	2298      	movs	r2, #152	; 0x98
 80abc7c:	fb02 f303 	mul.w	r3, r2, r3
 80abc80:	3304      	adds	r3, #4
 80abc82:	4a78      	ldr	r2, [pc, #480]	; (80abe64 <get_rms+0x258>)
 80abc84:	1898      	adds	r0, r3, r2
 80abc86:	f107 0210 	add.w	r2, r7, #16
 80abc8a:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80abc8e:	2198      	movs	r1, #152	; 0x98
 80abc90:	fb01 f303 	mul.w	r3, r1, r3
 80abc94:	4413      	add	r3, r2
 80abc96:	2294      	movs	r2, #148	; 0x94
 80abc98:	4619      	mov	r1, r3
 80abc9a:	f014 f981 	bl	80bffa0 <memcpy>
           (ALGO_ARRAY_SIZE - 1) * sizeof(float));
    gbuf[i][0] = in[i];
 80abc9e:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80abca2:	009b      	lsls	r3, r3, #2
 80abca4:	f107 020c 	add.w	r2, r7, #12
 80abca8:	6812      	ldr	r2, [r2, #0]
 80abcaa:	4413      	add	r3, r2
 80abcac:	681a      	ldr	r2, [r3, #0]
 80abcae:	496d      	ldr	r1, [pc, #436]	; (80abe64 <get_rms+0x258>)
 80abcb0:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80abcb4:	2098      	movs	r0, #152	; 0x98
 80abcb6:	fb00 f303 	mul.w	r3, r0, r3
 80abcba:	440b      	add	r3, r1
 80abcbc:	601a      	str	r2, [r3, #0]
    // TODO: simple moving average
    for (int k = 0; k < ALGO_ARRAY_SIZE; k++) {
 80abcbe:	2300      	movs	r3, #0
 80abcc0:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 80abcc4:	e025      	b.n	80abd12 <get_rms+0x106>
      sum[i] += gbuf[i][k];
 80abcc6:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80abcca:	009b      	lsls	r3, r3, #2
 80abccc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80abcd0:	4413      	add	r3, r2
 80abcd2:	3b18      	subs	r3, #24
 80abcd4:	ed93 7a00 	vldr	s14, [r3]
 80abcd8:	4962      	ldr	r1, [pc, #392]	; (80abe64 <get_rms+0x258>)
 80abcda:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80abcde:	2226      	movs	r2, #38	; 0x26
 80abce0:	fb02 f203 	mul.w	r2, r2, r3
 80abce4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80abce8:	4413      	add	r3, r2
 80abcea:	009b      	lsls	r3, r3, #2
 80abcec:	440b      	add	r3, r1
 80abcee:	edd3 7a00 	vldr	s15, [r3]
 80abcf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80abcf6:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80abcfa:	009b      	lsls	r3, r3, #2
 80abcfc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80abd00:	4413      	add	r3, r2
 80abd02:	3b18      	subs	r3, #24
 80abd04:	edc3 7a00 	vstr	s15, [r3]
    for (int k = 0; k < ALGO_ARRAY_SIZE; k++) {
 80abd08:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80abd0c:	3301      	adds	r3, #1
 80abd0e:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 80abd12:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80abd16:	2b25      	cmp	r3, #37	; 0x25
 80abd18:	ddd5      	ble.n	80abcc6 <get_rms+0xba>
    }

    mean_rms[i] = sum[i] / ALGO_ARRAY_SIZE;
 80abd1a:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80abd1e:	009b      	lsls	r3, r3, #2
 80abd20:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80abd24:	4413      	add	r3, r2
 80abd26:	3b18      	subs	r3, #24
 80abd28:	ed93 7a00 	vldr	s14, [r3]
 80abd2c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80abe68 <get_rms+0x25c>
 80abd30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80abd34:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80abd38:	009b      	lsls	r3, r3, #2
 80abd3a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80abd3e:	4413      	add	r3, r2
 80abd40:	3b24      	subs	r3, #36	; 0x24
 80abd42:	edc3 7a00 	vstr	s15, [r3]

    for (int m = 0; m < ALGO_ARRAY_SIZE; m++) {
 80abd46:	2300      	movs	r3, #0
 80abd48:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 80abd4c:	e04a      	b.n	80abde4 <get_rms+0x1d8>
      sum_rms[i] += ((gbuf[i][m] - mean_rms[i])
 80abd4e:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80abd52:	009b      	lsls	r3, r3, #2
 80abd54:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80abd58:	4413      	add	r3, r2
 80abd5a:	3b30      	subs	r3, #48	; 0x30
 80abd5c:	ed93 7a00 	vldr	s14, [r3]
 80abd60:	4940      	ldr	r1, [pc, #256]	; (80abe64 <get_rms+0x258>)
 80abd62:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80abd66:	2226      	movs	r2, #38	; 0x26
 80abd68:	fb02 f203 	mul.w	r2, r2, r3
 80abd6c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80abd70:	4413      	add	r3, r2
 80abd72:	009b      	lsls	r3, r3, #2
 80abd74:	440b      	add	r3, r1
 80abd76:	edd3 6a00 	vldr	s13, [r3]
 80abd7a:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80abd7e:	009b      	lsls	r3, r3, #2
 80abd80:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80abd84:	4413      	add	r3, r2
 80abd86:	3b24      	subs	r3, #36	; 0x24
 80abd88:	edd3 7a00 	vldr	s15, [r3]
 80abd8c:	ee76 6ae7 	vsub.f32	s13, s13, s15
                     * (gbuf[i][m] - mean_rms[i]));
 80abd90:	4934      	ldr	r1, [pc, #208]	; (80abe64 <get_rms+0x258>)
 80abd92:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80abd96:	2226      	movs	r2, #38	; 0x26
 80abd98:	fb02 f203 	mul.w	r2, r2, r3
 80abd9c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80abda0:	4413      	add	r3, r2
 80abda2:	009b      	lsls	r3, r3, #2
 80abda4:	440b      	add	r3, r1
 80abda6:	ed93 6a00 	vldr	s12, [r3]
 80abdaa:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80abdae:	009b      	lsls	r3, r3, #2
 80abdb0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80abdb4:	4413      	add	r3, r2
 80abdb6:	3b24      	subs	r3, #36	; 0x24
 80abdb8:	edd3 7a00 	vldr	s15, [r3]
 80abdbc:	ee76 7a67 	vsub.f32	s15, s12, s15
 80abdc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
      sum_rms[i] += ((gbuf[i][m] - mean_rms[i])
 80abdc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80abdc8:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80abdcc:	009b      	lsls	r3, r3, #2
 80abdce:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80abdd2:	4413      	add	r3, r2
 80abdd4:	3b30      	subs	r3, #48	; 0x30
 80abdd6:	edc3 7a00 	vstr	s15, [r3]
    for (int m = 0; m < ALGO_ARRAY_SIZE; m++) {
 80abdda:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80abdde:	3301      	adds	r3, #1
 80abde0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 80abde4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80abde8:	2b25      	cmp	r3, #37	; 0x25
 80abdea:	ddb0      	ble.n	80abd4e <get_rms+0x142>
    }
    out_rms[i] = sqrtf(sum_rms[i] / ALGO_ARRAY_SIZE);
 80abdec:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80abdf0:	009b      	lsls	r3, r3, #2
 80abdf2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80abdf6:	4413      	add	r3, r2
 80abdf8:	3b30      	subs	r3, #48	; 0x30
 80abdfa:	edd3 7a00 	vldr	s15, [r3]
 80abdfe:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80abe68 <get_rms+0x25c>
 80abe02:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80abe06:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80abe0a:	009b      	lsls	r3, r3, #2
 80abe0c:	1d3a      	adds	r2, r7, #4
 80abe0e:	6812      	ldr	r2, [r2, #0]
 80abe10:	18d4      	adds	r4, r2, r3
 80abe12:	eeb0 0a47 	vmov.f32	s0, s14
 80abe16:	f016 ffed 	bl	80c2df4 <sqrtf>
 80abe1a:	eef0 7a40 	vmov.f32	s15, s0
 80abe1e:	edc4 7a00 	vstr	s15, [r4]
    out_mean[i] = mean_rms[i];
 80abe22:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80abe26:	009b      	lsls	r3, r3, #2
 80abe28:	f107 0208 	add.w	r2, r7, #8
 80abe2c:	6812      	ldr	r2, [r2, #0]
 80abe2e:	4413      	add	r3, r2
 80abe30:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 80abe34:	0092      	lsls	r2, r2, #2
 80abe36:	f507 7102 	add.w	r1, r7, #520	; 0x208
 80abe3a:	440a      	add	r2, r1
 80abe3c:	3a24      	subs	r2, #36	; 0x24
 80abe3e:	6812      	ldr	r2, [r2, #0]
 80abe40:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < 3; i++) {
 80abe42:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80abe46:	3301      	adds	r3, #1
 80abe48:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 80abe4c:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80abe50:	2b02      	cmp	r3, #2
 80abe52:	f77f af06 	ble.w	80abc62 <get_rms+0x56>
  }
}
 80abe56:	bf00      	nop
 80abe58:	bf00      	nop
 80abe5a:	f507 7703 	add.w	r7, r7, #524	; 0x20c
 80abe5e:	46bd      	mov	sp, r7
 80abe60:	bd90      	pop	{r4, r7, pc}
 80abe62:	bf00      	nop
 80abe64:	200081d0 	.word	0x200081d0
 80abe68:	42180000 	.word	0x42180000
 80abe6c:	00000000 	.word	0x00000000

080abe70 <accLowPassFilter>:

  return ret;
}

void accLowPassFilter(float *raw, float *filtered)
{
 80abe70:	b5b0      	push	{r4, r5, r7, lr}
 80abe72:	b090      	sub	sp, #64	; 0x40
 80abe74:	af00      	add	r7, sp, #0
 80abe76:	6078      	str	r0, [r7, #4]
 80abe78:	6039      	str	r1, [r7, #0]
  //25Hz sample rate with 1Hz/2Hz cutoff freq.
  //Denominator
  //const double a0 = 1;
  const double a1 = -0.59062581160898153;
 80abe7a:	a34d      	add	r3, pc, #308	; (adr r3, 80abfb0 <accLowPassFilter+0x140>)
 80abe7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80abe80:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  //Numerator
  const double b0 = 0.20468709419550918;
 80abe84:	a34c      	add	r3, pc, #304	; (adr r3, 80abfb8 <accLowPassFilter+0x148>)
 80abe86:	e9d3 2300 	ldrd	r2, r3, [r3]
 80abe8a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  const double b1 = 0.20468709419550918;
 80abe8e:	a34a      	add	r3, pc, #296	; (adr r3, 80abfb8 <accLowPassFilter+0x148>)
 80abe90:	e9d3 2300 	ldrd	r2, r3, [r3]
 80abe94:	e9c7 2308 	strd	r2, r3, [r7, #32]

  static double x_1[3] = { 0 };
  static double y_1[3] = { 0 };

  double filter_double[3] = { 0 };
 80abe98:	f107 0308 	add.w	r3, r7, #8
 80abe9c:	2200      	movs	r2, #0
 80abe9e:	601a      	str	r2, [r3, #0]
 80abea0:	605a      	str	r2, [r3, #4]
 80abea2:	609a      	str	r2, [r3, #8]
 80abea4:	60da      	str	r2, [r3, #12]
 80abea6:	611a      	str	r2, [r3, #16]
 80abea8:	615a      	str	r2, [r3, #20]

  for (int i = 0; i < 3; i++) {
 80abeaa:	2300      	movs	r3, #0
 80abeac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80abeae:	e070      	b.n	80abf92 <accLowPassFilter+0x122>
    filter_double[i] = b0 * (double)raw[i] + b1 * x_1[i] - a1 * y_1[i];
 80abeb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80abeb2:	009b      	lsls	r3, r3, #2
 80abeb4:	687a      	ldr	r2, [r7, #4]
 80abeb6:	4413      	add	r3, r2
 80abeb8:	681b      	ldr	r3, [r3, #0]
 80abeba:	4618      	mov	r0, r3
 80abebc:	f7f4 fb44 	bl	80a0548 <__aeabi_f2d>
 80abec0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80abec4:	f7f4 fb98 	bl	80a05f8 <__aeabi_dmul>
 80abec8:	4602      	mov	r2, r0
 80abeca:	460b      	mov	r3, r1
 80abecc:	4614      	mov	r4, r2
 80abece:	461d      	mov	r5, r3
 80abed0:	4a35      	ldr	r2, [pc, #212]	; (80abfa8 <accLowPassFilter+0x138>)
 80abed2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80abed4:	00db      	lsls	r3, r3, #3
 80abed6:	4413      	add	r3, r2
 80abed8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80abedc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80abee0:	f7f4 fb8a 	bl	80a05f8 <__aeabi_dmul>
 80abee4:	4602      	mov	r2, r0
 80abee6:	460b      	mov	r3, r1
 80abee8:	4620      	mov	r0, r4
 80abeea:	4629      	mov	r1, r5
 80abeec:	f7f4 f9ce 	bl	80a028c <__adddf3>
 80abef0:	4602      	mov	r2, r0
 80abef2:	460b      	mov	r3, r1
 80abef4:	4614      	mov	r4, r2
 80abef6:	461d      	mov	r5, r3
 80abef8:	4a2c      	ldr	r2, [pc, #176]	; (80abfac <accLowPassFilter+0x13c>)
 80abefa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80abefc:	00db      	lsls	r3, r3, #3
 80abefe:	4413      	add	r3, r2
 80abf00:	e9d3 0100 	ldrd	r0, r1, [r3]
 80abf04:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80abf08:	f7f4 fb76 	bl	80a05f8 <__aeabi_dmul>
 80abf0c:	4602      	mov	r2, r0
 80abf0e:	460b      	mov	r3, r1
 80abf10:	4620      	mov	r0, r4
 80abf12:	4629      	mov	r1, r5
 80abf14:	f7f4 f9b8 	bl	80a0288 <__aeabi_dsub>
 80abf18:	4602      	mov	r2, r0
 80abf1a:	460b      	mov	r3, r1
 80abf1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80abf1e:	00c9      	lsls	r1, r1, #3
 80abf20:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80abf24:	4401      	add	r1, r0
 80abf26:	3938      	subs	r1, #56	; 0x38
 80abf28:	e9c1 2300 	strd	r2, r3, [r1]

    x_1[i] = (double)raw[i];
 80abf2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80abf2e:	009b      	lsls	r3, r3, #2
 80abf30:	687a      	ldr	r2, [r7, #4]
 80abf32:	4413      	add	r3, r2
 80abf34:	681b      	ldr	r3, [r3, #0]
 80abf36:	4618      	mov	r0, r3
 80abf38:	f7f4 fb06 	bl	80a0548 <__aeabi_f2d>
 80abf3c:	4602      	mov	r2, r0
 80abf3e:	460b      	mov	r3, r1
 80abf40:	4819      	ldr	r0, [pc, #100]	; (80abfa8 <accLowPassFilter+0x138>)
 80abf42:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80abf44:	00c9      	lsls	r1, r1, #3
 80abf46:	4401      	add	r1, r0
 80abf48:	e9c1 2300 	strd	r2, r3, [r1]
    y_1[i] = filter_double[i];
 80abf4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80abf4e:	00db      	lsls	r3, r3, #3
 80abf50:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80abf54:	4413      	add	r3, r2
 80abf56:	3b38      	subs	r3, #56	; 0x38
 80abf58:	e9d3 2300 	ldrd	r2, r3, [r3]
 80abf5c:	4813      	ldr	r0, [pc, #76]	; (80abfac <accLowPassFilter+0x13c>)
 80abf5e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80abf60:	00c9      	lsls	r1, r1, #3
 80abf62:	4401      	add	r1, r0
 80abf64:	e9c1 2300 	strd	r2, r3, [r1]

    filtered[i] = (float)filter_double[i];
 80abf68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80abf6a:	00db      	lsls	r3, r3, #3
 80abf6c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80abf70:	4413      	add	r3, r2
 80abf72:	3b38      	subs	r3, #56	; 0x38
 80abf74:	e9d3 2300 	ldrd	r2, r3, [r3]
 80abf78:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80abf7a:	0089      	lsls	r1, r1, #2
 80abf7c:	6838      	ldr	r0, [r7, #0]
 80abf7e:	1844      	adds	r4, r0, r1
 80abf80:	4610      	mov	r0, r2
 80abf82:	4619      	mov	r1, r3
 80abf84:	f7f4 fe30 	bl	80a0be8 <__aeabi_d2f>
 80abf88:	4603      	mov	r3, r0
 80abf8a:	6023      	str	r3, [r4, #0]
  for (int i = 0; i < 3; i++) {
 80abf8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80abf8e:	3301      	adds	r3, #1
 80abf90:	63fb      	str	r3, [r7, #60]	; 0x3c
 80abf92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80abf94:	2b02      	cmp	r3, #2
 80abf96:	dd8b      	ble.n	80abeb0 <accLowPassFilter+0x40>
  }
}
 80abf98:	bf00      	nop
 80abf9a:	bf00      	nop
 80abf9c:	3740      	adds	r7, #64	; 0x40
 80abf9e:	46bd      	mov	sp, r7
 80abfa0:	bdb0      	pop	{r4, r5, r7, pc}
 80abfa2:	bf00      	nop
 80abfa4:	f3af 8000 	nop.w
 80abfa8:	20008398 	.word	0x20008398
 80abfac:	200083b0 	.word	0x200083b0
 80abfb0:	1a2116cc 	.word	0x1a2116cc
 80abfb4:	bfe2e668 	.word	0xbfe2e668
 80abfb8:	cbbdd266 	.word	0xcbbdd266
 80abfbc:	3fca332f 	.word	0x3fca332f

080abfc0 <gyroLowPassFilter>:

static void gyroLowPassFilter(float *raw, float *filtered)
{
 80abfc0:	b5b0      	push	{r4, r5, r7, lr}
 80abfc2:	b090      	sub	sp, #64	; 0x40
 80abfc4:	af00      	add	r7, sp, #0
 80abfc6:	6078      	str	r0, [r7, #4]
 80abfc8:	6039      	str	r1, [r7, #0]
  //25Hz sample rate with 1Hz/3Hz cutoff freq.
  //Denominator
  //const double a0 = 1;
  const double a1 = -0.43177323588356381;
 80abfca:	a34d      	add	r3, pc, #308	; (adr r3, 80ac100 <gyroLowPassFilter+0x140>)
 80abfcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80abfd0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  //Numerator
  const double b0 = 0.28411338205821812;
 80abfd4:	a34c      	add	r3, pc, #304	; (adr r3, 80ac108 <gyroLowPassFilter+0x148>)
 80abfd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80abfda:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  const double b1 = 0.28411338205821812;
 80abfde:	a34a      	add	r3, pc, #296	; (adr r3, 80ac108 <gyroLowPassFilter+0x148>)
 80abfe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80abfe4:	e9c7 2308 	strd	r2, r3, [r7, #32]

  static double x_1[3] = { 0 };
  static double y_1[3] = { 0 };

  double filter_double[3] = { 0 };
 80abfe8:	f107 0308 	add.w	r3, r7, #8
 80abfec:	2200      	movs	r2, #0
 80abfee:	601a      	str	r2, [r3, #0]
 80abff0:	605a      	str	r2, [r3, #4]
 80abff2:	609a      	str	r2, [r3, #8]
 80abff4:	60da      	str	r2, [r3, #12]
 80abff6:	611a      	str	r2, [r3, #16]
 80abff8:	615a      	str	r2, [r3, #20]

  for (int i = 0; i < 3; i++) {
 80abffa:	2300      	movs	r3, #0
 80abffc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80abffe:	e070      	b.n	80ac0e2 <gyroLowPassFilter+0x122>
    filter_double[i] = b0 * (double)raw[i] + b1 * x_1[i] - a1 * y_1[i];
 80ac000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80ac002:	009b      	lsls	r3, r3, #2
 80ac004:	687a      	ldr	r2, [r7, #4]
 80ac006:	4413      	add	r3, r2
 80ac008:	681b      	ldr	r3, [r3, #0]
 80ac00a:	4618      	mov	r0, r3
 80ac00c:	f7f4 fa9c 	bl	80a0548 <__aeabi_f2d>
 80ac010:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80ac014:	f7f4 faf0 	bl	80a05f8 <__aeabi_dmul>
 80ac018:	4602      	mov	r2, r0
 80ac01a:	460b      	mov	r3, r1
 80ac01c:	4614      	mov	r4, r2
 80ac01e:	461d      	mov	r5, r3
 80ac020:	4a35      	ldr	r2, [pc, #212]	; (80ac0f8 <gyroLowPassFilter+0x138>)
 80ac022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80ac024:	00db      	lsls	r3, r3, #3
 80ac026:	4413      	add	r3, r2
 80ac028:	e9d3 0100 	ldrd	r0, r1, [r3]
 80ac02c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80ac030:	f7f4 fae2 	bl	80a05f8 <__aeabi_dmul>
 80ac034:	4602      	mov	r2, r0
 80ac036:	460b      	mov	r3, r1
 80ac038:	4620      	mov	r0, r4
 80ac03a:	4629      	mov	r1, r5
 80ac03c:	f7f4 f926 	bl	80a028c <__adddf3>
 80ac040:	4602      	mov	r2, r0
 80ac042:	460b      	mov	r3, r1
 80ac044:	4614      	mov	r4, r2
 80ac046:	461d      	mov	r5, r3
 80ac048:	4a2c      	ldr	r2, [pc, #176]	; (80ac0fc <gyroLowPassFilter+0x13c>)
 80ac04a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80ac04c:	00db      	lsls	r3, r3, #3
 80ac04e:	4413      	add	r3, r2
 80ac050:	e9d3 0100 	ldrd	r0, r1, [r3]
 80ac054:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80ac058:	f7f4 face 	bl	80a05f8 <__aeabi_dmul>
 80ac05c:	4602      	mov	r2, r0
 80ac05e:	460b      	mov	r3, r1
 80ac060:	4620      	mov	r0, r4
 80ac062:	4629      	mov	r1, r5
 80ac064:	f7f4 f910 	bl	80a0288 <__aeabi_dsub>
 80ac068:	4602      	mov	r2, r0
 80ac06a:	460b      	mov	r3, r1
 80ac06c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80ac06e:	00c9      	lsls	r1, r1, #3
 80ac070:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80ac074:	4401      	add	r1, r0
 80ac076:	3938      	subs	r1, #56	; 0x38
 80ac078:	e9c1 2300 	strd	r2, r3, [r1]

    x_1[i] = (double)raw[i];
 80ac07c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80ac07e:	009b      	lsls	r3, r3, #2
 80ac080:	687a      	ldr	r2, [r7, #4]
 80ac082:	4413      	add	r3, r2
 80ac084:	681b      	ldr	r3, [r3, #0]
 80ac086:	4618      	mov	r0, r3
 80ac088:	f7f4 fa5e 	bl	80a0548 <__aeabi_f2d>
 80ac08c:	4602      	mov	r2, r0
 80ac08e:	460b      	mov	r3, r1
 80ac090:	4819      	ldr	r0, [pc, #100]	; (80ac0f8 <gyroLowPassFilter+0x138>)
 80ac092:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80ac094:	00c9      	lsls	r1, r1, #3
 80ac096:	4401      	add	r1, r0
 80ac098:	e9c1 2300 	strd	r2, r3, [r1]
    y_1[i] = filter_double[i];
 80ac09c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80ac09e:	00db      	lsls	r3, r3, #3
 80ac0a0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80ac0a4:	4413      	add	r3, r2
 80ac0a6:	3b38      	subs	r3, #56	; 0x38
 80ac0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80ac0ac:	4813      	ldr	r0, [pc, #76]	; (80ac0fc <gyroLowPassFilter+0x13c>)
 80ac0ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80ac0b0:	00c9      	lsls	r1, r1, #3
 80ac0b2:	4401      	add	r1, r0
 80ac0b4:	e9c1 2300 	strd	r2, r3, [r1]

    filtered[i] = (float)filter_double[i];
 80ac0b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80ac0ba:	00db      	lsls	r3, r3, #3
 80ac0bc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80ac0c0:	4413      	add	r3, r2
 80ac0c2:	3b38      	subs	r3, #56	; 0x38
 80ac0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80ac0c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80ac0ca:	0089      	lsls	r1, r1, #2
 80ac0cc:	6838      	ldr	r0, [r7, #0]
 80ac0ce:	1844      	adds	r4, r0, r1
 80ac0d0:	4610      	mov	r0, r2
 80ac0d2:	4619      	mov	r1, r3
 80ac0d4:	f7f4 fd88 	bl	80a0be8 <__aeabi_d2f>
 80ac0d8:	4603      	mov	r3, r0
 80ac0da:	6023      	str	r3, [r4, #0]
  for (int i = 0; i < 3; i++) {
 80ac0dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80ac0de:	3301      	adds	r3, #1
 80ac0e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80ac0e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80ac0e4:	2b02      	cmp	r3, #2
 80ac0e6:	dd8b      	ble.n	80ac000 <gyroLowPassFilter+0x40>
  }
}
 80ac0e8:	bf00      	nop
 80ac0ea:	bf00      	nop
 80ac0ec:	3740      	adds	r7, #64	; 0x40
 80ac0ee:	46bd      	mov	sp, r7
 80ac0f0:	bdb0      	pop	{r4, r5, r7, pc}
 80ac0f2:	bf00      	nop
 80ac0f4:	f3af 8000 	nop.w
 80ac0f8:	200083c8 	.word	0x200083c8
 80ac0fc:	200083e0 	.word	0x200083e0
 80ac100:	35da1cad 	.word	0x35da1cad
 80ac104:	bfdba22c 	.word	0xbfdba22c
 80ac108:	e512f1aa 	.word	0xe512f1aa
 80ac10c:	3fd22ee9 	.word	0x3fd22ee9

080ac110 <rot_v_gyro_autocal>:

static int rot_v_gyro_autocal(float *in, float *bias, float *calibrated)
{
 80ac110:	b580      	push	{r7, lr}
 80ac112:	b094      	sub	sp, #80	; 0x50
 80ac114:	af00      	add	r7, sp, #0
 80ac116:	60f8      	str	r0, [r7, #12]
 80ac118:	60b9      	str	r1, [r7, #8]
 80ac11a:	607a      	str	r2, [r7, #4]
  float g_lpf_out_dps[3] = { 0.0f };
 80ac11c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80ac120:	2200      	movs	r2, #0
 80ac122:	601a      	str	r2, [r3, #0]
 80ac124:	605a      	str	r2, [r3, #4]
 80ac126:	609a      	str	r2, [r3, #8]
  float threeHz_gyro_mean[3] = { 0.0f }, threeHz_gyro_rms[3] = {
 80ac128:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80ac12c:	2200      	movs	r2, #0
 80ac12e:	601a      	str	r2, [r3, #0]
 80ac130:	605a      	str	r2, [r3, #4]
 80ac132:	609a      	str	r2, [r3, #8]
 80ac134:	f107 0320 	add.w	r3, r7, #32
 80ac138:	2200      	movs	r2, #0
 80ac13a:	601a      	str	r2, [r3, #0]
 80ac13c:	605a      	str	r2, [r3, #4]
 80ac13e:	609a      	str	r2, [r3, #8]
  0.0f};
  int calibration_success = 0;
 80ac140:	2300      	movs	r3, #0
 80ac142:	64fb      	str	r3, [r7, #76]	; 0x4c
  static unsigned int gyro_static_counter = 0;

  float in_dps[3] = { in[0] * RAD2DEG, in[1] * RAD2DEG, in[2] * RAD2DEG };
 80ac144:	68fb      	ldr	r3, [r7, #12]
 80ac146:	edd3 7a00 	vldr	s15, [r3]
 80ac14a:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80ac2fc <rot_v_gyro_autocal+0x1ec>
 80ac14e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80ac152:	edc7 7a05 	vstr	s15, [r7, #20]
 80ac156:	68fb      	ldr	r3, [r7, #12]
 80ac158:	3304      	adds	r3, #4
 80ac15a:	edd3 7a00 	vldr	s15, [r3]
 80ac15e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80ac2fc <rot_v_gyro_autocal+0x1ec>
 80ac162:	ee67 7a87 	vmul.f32	s15, s15, s14
 80ac166:	edc7 7a06 	vstr	s15, [r7, #24]
 80ac16a:	68fb      	ldr	r3, [r7, #12]
 80ac16c:	3308      	adds	r3, #8
 80ac16e:	edd3 7a00 	vldr	s15, [r3]
 80ac172:	ed9f 7a62 	vldr	s14, [pc, #392]	; 80ac2fc <rot_v_gyro_autocal+0x1ec>
 80ac176:	ee67 7a87 	vmul.f32	s15, s15, s14
 80ac17a:	edc7 7a07 	vstr	s15, [r7, #28]

  gyroLowPassFilter(in_dps, g_lpf_out_dps);
 80ac17e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80ac182:	f107 0314 	add.w	r3, r7, #20
 80ac186:	4611      	mov	r1, r2
 80ac188:	4618      	mov	r0, r3
 80ac18a:	f7ff ff19 	bl	80abfc0 <gyroLowPassFilter>

  get_rms(g_lpf_out_dps, threeHz_gyro_mean, threeHz_gyro_rms);
 80ac18e:	f107 0220 	add.w	r2, r7, #32
 80ac192:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80ac196:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80ac19a:	4618      	mov	r0, r3
 80ac19c:	f7ff fd36 	bl	80abc0c <get_rms>

  if (threeHz_gyro_rms[0] < PSD_STDEV &&        //dps-rms @ 0.014*sqrt(3)
 80ac1a0:	edd7 7a08 	vldr	s15, [r7, #32]
 80ac1a4:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80ac300 <rot_v_gyro_autocal+0x1f0>
 80ac1a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80ac1ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80ac1b0:	d559      	bpl.n	80ac266 <rot_v_gyro_autocal+0x156>
      threeHz_gyro_rms[1] < PSD_STDEV && threeHz_gyro_rms[2] < PSD_STDEV && fabs(threeHz_gyro_rms[0]) < 20 &&   // 20dps absolute
 80ac1b2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
  if (threeHz_gyro_rms[0] < PSD_STDEV &&        //dps-rms @ 0.014*sqrt(3)
 80ac1b6:	ed9f 7a52 	vldr	s14, [pc, #328]	; 80ac300 <rot_v_gyro_autocal+0x1f0>
 80ac1ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80ac1be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80ac1c2:	d550      	bpl.n	80ac266 <rot_v_gyro_autocal+0x156>
      threeHz_gyro_rms[1] < PSD_STDEV && threeHz_gyro_rms[2] < PSD_STDEV && fabs(threeHz_gyro_rms[0]) < 20 &&   // 20dps absolute
 80ac1c4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80ac1c8:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80ac300 <rot_v_gyro_autocal+0x1f0>
 80ac1cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80ac1d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80ac1d4:	d547      	bpl.n	80ac266 <rot_v_gyro_autocal+0x156>
 80ac1d6:	edd7 7a08 	vldr	s15, [r7, #32]
 80ac1da:	eef0 7ae7 	vabs.f32	s15, s15
 80ac1de:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80ac1e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80ac1e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80ac1ea:	d53c      	bpl.n	80ac266 <rot_v_gyro_autocal+0x156>
      fabs(threeHz_gyro_rms[1]) < 20 && fabs(threeHz_gyro_rms[2]) < 20) {
 80ac1ec:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80ac1f0:	eef0 7ae7 	vabs.f32	s15, s15
      threeHz_gyro_rms[1] < PSD_STDEV && threeHz_gyro_rms[2] < PSD_STDEV && fabs(threeHz_gyro_rms[0]) < 20 &&   // 20dps absolute
 80ac1f4:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80ac1f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80ac1fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80ac200:	d531      	bpl.n	80ac266 <rot_v_gyro_autocal+0x156>
      fabs(threeHz_gyro_rms[1]) < 20 && fabs(threeHz_gyro_rms[2]) < 20) {
 80ac202:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80ac206:	eef0 7ae7 	vabs.f32	s15, s15
 80ac20a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80ac20e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80ac212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80ac216:	d526      	bpl.n	80ac266 <rot_v_gyro_autocal+0x156>

    gyro_static_counter++;
 80ac218:	4b3a      	ldr	r3, [pc, #232]	; (80ac304 <rot_v_gyro_autocal+0x1f4>)
 80ac21a:	681b      	ldr	r3, [r3, #0]
 80ac21c:	3301      	adds	r3, #1
 80ac21e:	4a39      	ldr	r2, [pc, #228]	; (80ac304 <rot_v_gyro_autocal+0x1f4>)
 80ac220:	6013      	str	r3, [r2, #0]

    if (gyro_static_counter > ALGO_SAMPLE_HZ) { // update bias
 80ac222:	4b38      	ldr	r3, [pc, #224]	; (80ac304 <rot_v_gyro_autocal+0x1f4>)
 80ac224:	681b      	ldr	r3, [r3, #0]
 80ac226:	2b19      	cmp	r3, #25
 80ac228:	d920      	bls.n	80ac26c <rot_v_gyro_autocal+0x15c>

      calibration_success = 1;
 80ac22a:	2301      	movs	r3, #1
 80ac22c:	64fb      	str	r3, [r7, #76]	; 0x4c

      for (int i = 0; i < 3; i++)
 80ac22e:	2300      	movs	r3, #0
 80ac230:	64bb      	str	r3, [r7, #72]	; 0x48
 80ac232:	e014      	b.n	80ac25e <rot_v_gyro_autocal+0x14e>
        bias[i] = threeHz_gyro_mean[i] * DEG2RAD;
 80ac234:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80ac236:	009b      	lsls	r3, r3, #2
 80ac238:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80ac23c:	4413      	add	r3, r2
 80ac23e:	3b24      	subs	r3, #36	; 0x24
 80ac240:	edd3 7a00 	vldr	s15, [r3]
 80ac244:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80ac246:	009b      	lsls	r3, r3, #2
 80ac248:	68ba      	ldr	r2, [r7, #8]
 80ac24a:	4413      	add	r3, r2
 80ac24c:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80ac308 <rot_v_gyro_autocal+0x1f8>
 80ac250:	ee67 7a87 	vmul.f32	s15, s15, s14
 80ac254:	edc3 7a00 	vstr	s15, [r3]
      for (int i = 0; i < 3; i++)
 80ac258:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80ac25a:	3301      	adds	r3, #1
 80ac25c:	64bb      	str	r3, [r7, #72]	; 0x48
 80ac25e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80ac260:	2b02      	cmp	r3, #2
 80ac262:	dde7      	ble.n	80ac234 <rot_v_gyro_autocal+0x124>
    if (gyro_static_counter > ALGO_SAMPLE_HZ) { // update bias
 80ac264:	e002      	b.n	80ac26c <rot_v_gyro_autocal+0x15c>
    }
  } else {
    gyro_static_counter = 0;
 80ac266:	4b27      	ldr	r3, [pc, #156]	; (80ac304 <rot_v_gyro_autocal+0x1f4>)
 80ac268:	2200      	movs	r2, #0
 80ac26a:	601a      	str	r2, [r3, #0]
  }

  for (int i = 0; i < 3; i++) {
 80ac26c:	2300      	movs	r3, #0
 80ac26e:	647b      	str	r3, [r7, #68]	; 0x44
 80ac270:	e03b      	b.n	80ac2ea <rot_v_gyro_autocal+0x1da>

    if (bias[0] != 0 && bias[1] != 0 && bias[2] != 0)
 80ac272:	68bb      	ldr	r3, [r7, #8]
 80ac274:	edd3 7a00 	vldr	s15, [r3]
 80ac278:	eef5 7a40 	vcmp.f32	s15, #0.0
 80ac27c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80ac280:	d026      	beq.n	80ac2d0 <rot_v_gyro_autocal+0x1c0>
 80ac282:	68bb      	ldr	r3, [r7, #8]
 80ac284:	3304      	adds	r3, #4
 80ac286:	edd3 7a00 	vldr	s15, [r3]
 80ac28a:	eef5 7a40 	vcmp.f32	s15, #0.0
 80ac28e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80ac292:	d01d      	beq.n	80ac2d0 <rot_v_gyro_autocal+0x1c0>
 80ac294:	68bb      	ldr	r3, [r7, #8]
 80ac296:	3308      	adds	r3, #8
 80ac298:	edd3 7a00 	vldr	s15, [r3]
 80ac29c:	eef5 7a40 	vcmp.f32	s15, #0.0
 80ac2a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80ac2a4:	d014      	beq.n	80ac2d0 <rot_v_gyro_autocal+0x1c0>
      calibrated[i] = in[i] - bias[i];
 80ac2a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80ac2a8:	009b      	lsls	r3, r3, #2
 80ac2aa:	68fa      	ldr	r2, [r7, #12]
 80ac2ac:	4413      	add	r3, r2
 80ac2ae:	ed93 7a00 	vldr	s14, [r3]
 80ac2b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80ac2b4:	009b      	lsls	r3, r3, #2
 80ac2b6:	68ba      	ldr	r2, [r7, #8]
 80ac2b8:	4413      	add	r3, r2
 80ac2ba:	edd3 7a00 	vldr	s15, [r3]
 80ac2be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80ac2c0:	009b      	lsls	r3, r3, #2
 80ac2c2:	687a      	ldr	r2, [r7, #4]
 80ac2c4:	4413      	add	r3, r2
 80ac2c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80ac2ca:	edc3 7a00 	vstr	s15, [r3]
 80ac2ce:	e009      	b.n	80ac2e4 <rot_v_gyro_autocal+0x1d4>
    else
      calibrated[i] = in[i];
 80ac2d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80ac2d2:	009b      	lsls	r3, r3, #2
 80ac2d4:	68fa      	ldr	r2, [r7, #12]
 80ac2d6:	441a      	add	r2, r3
 80ac2d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80ac2da:	009b      	lsls	r3, r3, #2
 80ac2dc:	6879      	ldr	r1, [r7, #4]
 80ac2de:	440b      	add	r3, r1
 80ac2e0:	6812      	ldr	r2, [r2, #0]
 80ac2e2:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < 3; i++) {
 80ac2e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80ac2e6:	3301      	adds	r3, #1
 80ac2e8:	647b      	str	r3, [r7, #68]	; 0x44
 80ac2ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80ac2ec:	2b02      	cmp	r3, #2
 80ac2ee:	ddc0      	ble.n	80ac272 <rot_v_gyro_autocal+0x162>
  }

  return calibration_success;
 80ac2f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80ac2f2:	4618      	mov	r0, r3
 80ac2f4:	3750      	adds	r7, #80	; 0x50
 80ac2f6:	46bd      	mov	sp, r7
 80ac2f8:	bd80      	pop	{r7, pc}
 80ac2fa:	bf00      	nop
 80ac2fc:	42652ee1 	.word	0x42652ee1
 80ac300:	3cc49ba6 	.word	0x3cc49ba6
 80ac304:	200083f8 	.word	0x200083f8
 80ac308:	3c8efa35 	.word	0x3c8efa35

080ac30c <rot_v_fusion_acc>:

static void rot_v_fusion_acc(unsigned long long timestamp, float *acc)
{
 80ac30c:	b5b0      	push	{r4, r5, r7, lr}
 80ac30e:	ed2d 8b02 	vpush	{d8}
 80ac312:	b09a      	sub	sp, #104	; 0x68
 80ac314:	af00      	add	r7, sp, #0
 80ac316:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80ac31a:	607a      	str	r2, [r7, #4]
  float a_lpf_out[3] = { 0.0f };
 80ac31c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80ac320:	2200      	movs	r2, #0
 80ac322:	601a      	str	r2, [r3, #0]
 80ac324:	605a      	str	r2, [r3, #4]
 80ac326:	609a      	str	r2, [r3, #8]
  float a_magnitude, pitch, roll, yaw, momentum;

  static unsigned long long timestamp_previous = 0;
  float rot_vec[4] = { 0.0f };
 80ac328:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80ac32c:	2200      	movs	r2, #0
 80ac32e:	601a      	str	r2, [r3, #0]
 80ac330:	605a      	str	r2, [r3, #4]
 80ac332:	609a      	str	r2, [r3, #8]
 80ac334:	60da      	str	r2, [r3, #12]
  float rot_mat[9] = { 0.0f };
 80ac336:	f107 0310 	add.w	r3, r7, #16
 80ac33a:	2224      	movs	r2, #36	; 0x24
 80ac33c:	2100      	movs	r1, #0
 80ac33e:	4618      	mov	r0, r3
 80ac340:	f013 fe3c 	bl	80bffbc <memset>

  float dt_s = (float)(timestamp - timestamp_previous) / osKernelGetTickFreq(); //timestamp unit is us
 80ac344:	4b5a      	ldr	r3, [pc, #360]	; (80ac4b0 <rot_v_fusion_acc+0x1a4>)
 80ac346:	e9d3 2300 	ldrd	r2, r3, [r3]
 80ac34a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80ac34e:	1a84      	subs	r4, r0, r2
 80ac350:	eb61 0503 	sbc.w	r5, r1, r3
 80ac354:	4620      	mov	r0, r4
 80ac356:	4629      	mov	r1, r5
 80ac358:	f7f4 fd5e 	bl	80a0e18 <__aeabi_ul2f>
 80ac35c:	ee08 0a10 	vmov	s16, r0
 80ac360:	f009 fe0f 	bl	80b5f82 <osKernelGetTickFreq>
 80ac364:	ee07 0a90 	vmov	s15, r0
 80ac368:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80ac36c:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80ac370:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

  if (dt_s > 1)                 //need refine, 100ms duration is wrong
 80ac374:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80ac378:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80ac37c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80ac380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80ac384:	dd07      	ble.n	80ac396 <rot_v_fusion_acc+0x8a>
    printf("@@@ACC_TIME_ERROR %f ms\r\n", dt_s);
 80ac386:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80ac388:	f7f4 f8de 	bl	80a0548 <__aeabi_f2d>
 80ac38c:	4602      	mov	r2, r0
 80ac38e:	460b      	mov	r3, r1
 80ac390:	4848      	ldr	r0, [pc, #288]	; (80ac4b4 <rot_v_fusion_acc+0x1a8>)
 80ac392:	f014 faef 	bl	80c0974 <iprintf>

  //printf("acc_data: %d %f %f %f\r\n", timestamp, acc[0], acc[1], acc[2]);
  posture(acc, rot_vec, dt_s, (int)SENSOR_TYPE_ACCELEROMETER);
 80ac396:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80ac39a:	2200      	movs	r2, #0
 80ac39c:	ed97 0a19 	vldr	s0, [r7, #100]	; 0x64
 80ac3a0:	4619      	mov	r1, r3
 80ac3a2:	6878      	ldr	r0, [r7, #4]
 80ac3a4:	f7ff fa6a 	bl	80ab87c <posture>
  get_rot_mat(rot_vec, rot_mat);
 80ac3a8:	f107 0210 	add.w	r2, r7, #16
 80ac3ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80ac3b0:	4611      	mov	r1, r2
 80ac3b2:	4618      	mov	r0, r3
 80ac3b4:	f7ff fada 	bl	80ab96c <get_rot_mat>
  timestamp_previous = timestamp;
 80ac3b8:	493d      	ldr	r1, [pc, #244]	; (80ac4b0 <rot_v_fusion_acc+0x1a4>)
 80ac3ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80ac3be:	e9c1 2300 	strd	r2, r3, [r1]

  pitch = asinf(rot_mat[7]) * RAD2DEG;
 80ac3c2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80ac3c6:	eeb0 0a67 	vmov.f32	s0, s15
 80ac3ca:	f016 fcdf 	bl	80c2d8c <asinf>
 80ac3ce:	eef0 7a40 	vmov.f32	s15, s0
 80ac3d2:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80ac4b8 <rot_v_fusion_acc+0x1ac>
 80ac3d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80ac3da:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
  roll = asinf(-rot_mat[6]) * RAD2DEG;
 80ac3de:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80ac3e2:	eef1 7a67 	vneg.f32	s15, s15
 80ac3e6:	eeb0 0a67 	vmov.f32	s0, s15
 80ac3ea:	f016 fccf 	bl	80c2d8c <asinf>
 80ac3ee:	eef0 7a40 	vmov.f32	s15, s0
 80ac3f2:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80ac4b8 <rot_v_fusion_acc+0x1ac>
 80ac3f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80ac3fa:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
  yaw = asinf(rot_mat[8]) * RAD2DEG;
 80ac3fe:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80ac402:	eeb0 0a67 	vmov.f32	s0, s15
 80ac406:	f016 fcc1 	bl	80c2d8c <asinf>
 80ac40a:	eef0 7a40 	vmov.f32	s15, s0
 80ac40e:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80ac4b8 <rot_v_fusion_acc+0x1ac>
 80ac412:	ee67 7a87 	vmul.f32	s15, s15, s14
 80ac416:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
  temp_roll = roll;
 80ac41a:	4a28      	ldr	r2, [pc, #160]	; (80ac4bc <rot_v_fusion_acc+0x1b0>)
 80ac41c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80ac41e:	6013      	str	r3, [r2, #0]
  temp_pitch = pitch;
 80ac420:	4a27      	ldr	r2, [pc, #156]	; (80ac4c0 <rot_v_fusion_acc+0x1b4>)
 80ac422:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80ac424:	6013      	str	r3, [r2, #0]
  temp_yaw = yaw;
 80ac426:	4a27      	ldr	r2, [pc, #156]	; (80ac4c4 <rot_v_fusion_acc+0x1b8>)
 80ac428:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80ac42a:	6013      	str	r3, [r2, #0]
  //printf("eular after acc: %d %.1f %.1f %.1f\r\n", timestamp, yaw, pitch, roll);

  accLowPassFilter(acc, a_lpf_out);
 80ac42c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80ac430:	4619      	mov	r1, r3
 80ac432:	6878      	ldr	r0, [r7, #4]
 80ac434:	f7ff fd1c 	bl	80abe70 <accLowPassFilter>

  a_magnitude = sqrtf(a_lpf_out[0] * a_lpf_out[0] + a_lpf_out[1] * a_lpf_out[1]
 80ac438:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80ac43c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80ac440:	ee27 7a27 	vmul.f32	s14, s14, s15
 80ac444:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80ac448:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80ac44c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80ac450:	ee37 7a27 	vadd.f32	s14, s14, s15
                      + a_lpf_out[2] * a_lpf_out[2]);
 80ac454:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80ac458:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80ac45c:	ee66 7aa7 	vmul.f32	s15, s13, s15
  a_magnitude = sqrtf(a_lpf_out[0] * a_lpf_out[0] + a_lpf_out[1] * a_lpf_out[1]
 80ac460:	ee77 7a27 	vadd.f32	s15, s14, s15
 80ac464:	eeb0 0a67 	vmov.f32	s0, s15
 80ac468:	f016 fcc4 	bl	80c2df4 <sqrtf>
 80ac46c:	ed87 0a15 	vstr	s0, [r7, #84]	; 0x54
  momentum = (a_magnitude - GRAVITY);
 80ac470:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80ac474:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80ac4c8 <rot_v_fusion_acc+0x1bc>
 80ac478:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80ac47c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
  momentum *= momentum;
 80ac480:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80ac484:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80ac488:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

  rot_v_quaternion[0] = rot_vec[0];
 80ac48c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80ac48e:	4a0f      	ldr	r2, [pc, #60]	; (80ac4cc <rot_v_fusion_acc+0x1c0>)
 80ac490:	6013      	str	r3, [r2, #0]
  rot_v_quaternion[1] = rot_vec[1];
 80ac492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80ac494:	4a0d      	ldr	r2, [pc, #52]	; (80ac4cc <rot_v_fusion_acc+0x1c0>)
 80ac496:	6053      	str	r3, [r2, #4]
  rot_v_quaternion[2] = rot_vec[2];
 80ac498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80ac49a:	4a0c      	ldr	r2, [pc, #48]	; (80ac4cc <rot_v_fusion_acc+0x1c0>)
 80ac49c:	6093      	str	r3, [r2, #8]
  rot_v_quaternion[3] = rot_vec[3];
 80ac49e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80ac4a0:	4a0a      	ldr	r2, [pc, #40]	; (80ac4cc <rot_v_fusion_acc+0x1c0>)
 80ac4a2:	60d3      	str	r3, [r2, #12]
}
 80ac4a4:	bf00      	nop
 80ac4a6:	3768      	adds	r7, #104	; 0x68
 80ac4a8:	46bd      	mov	sp, r7
 80ac4aa:	ecbd 8b02 	vpop	{d8}
 80ac4ae:	bdb0      	pop	{r4, r5, r7, pc}
 80ac4b0:	20008400 	.word	0x20008400
 80ac4b4:	080c5d64 	.word	0x080c5d64
 80ac4b8:	42652ee1 	.word	0x42652ee1
 80ac4bc:	20008190 	.word	0x20008190
 80ac4c0:	20008194 	.word	0x20008194
 80ac4c4:	20008198 	.word	0x20008198
 80ac4c8:	411ce80a 	.word	0x411ce80a
 80ac4cc:	2000789c 	.word	0x2000789c

080ac4d0 <rot_v_fusion_gyro>:

static void rot_v_fusion_gyro(unsigned long long timestamp, float *gyro)
{
 80ac4d0:	b5b0      	push	{r4, r5, r7, lr}
 80ac4d2:	ed2d 8b02 	vpush	{d8}
 80ac4d6:	b09c      	sub	sp, #112	; 0x70
 80ac4d8:	af00      	add	r7, sp, #0
 80ac4da:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80ac4de:	607a      	str	r2, [r7, #4]
  float a_lpf_out[3] = { 0.0f };
 80ac4e0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80ac4e4:	2200      	movs	r2, #0
 80ac4e6:	601a      	str	r2, [r3, #0]
 80ac4e8:	605a      	str	r2, [r3, #4]
 80ac4ea:	609a      	str	r2, [r3, #8]
  float gyro_calibrated[3] = { 0.0f };
 80ac4ec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80ac4f0:	2200      	movs	r2, #0
 80ac4f2:	601a      	str	r2, [r3, #0]
 80ac4f4:	605a      	str	r2, [r3, #4]
 80ac4f6:	609a      	str	r2, [r3, #8]
  static float gyro_bias[3] = { 0.0f };

  float a_magnitude, pitch, roll, yaw, momentum;

  static unsigned long long timestamp_previous = 0;
  float rot_vec[4] = { 0.0f };
 80ac4f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80ac4fc:	2200      	movs	r2, #0
 80ac4fe:	601a      	str	r2, [r3, #0]
 80ac500:	605a      	str	r2, [r3, #4]
 80ac502:	609a      	str	r2, [r3, #8]
 80ac504:	60da      	str	r2, [r3, #12]
  float rot_mat[9] = { 0.0f };
 80ac506:	f107 0310 	add.w	r3, r7, #16
 80ac50a:	2224      	movs	r2, #36	; 0x24
 80ac50c:	2100      	movs	r1, #0
 80ac50e:	4618      	mov	r0, r3
 80ac510:	f013 fd54 	bl	80bffbc <memset>

  float dt_s = (float)(timestamp - timestamp_previous) / osKernelGetTickFreq(); //timestamp_ unit is ms
 80ac514:	4b4a      	ldr	r3, [pc, #296]	; (80ac640 <rot_v_fusion_gyro+0x170>)
 80ac516:	e9d3 2300 	ldrd	r2, r3, [r3]
 80ac51a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80ac51e:	1a84      	subs	r4, r0, r2
 80ac520:	eb61 0503 	sbc.w	r5, r1, r3
 80ac524:	4620      	mov	r0, r4
 80ac526:	4629      	mov	r1, r5
 80ac528:	f7f4 fc76 	bl	80a0e18 <__aeabi_ul2f>
 80ac52c:	ee08 0a10 	vmov	s16, r0
 80ac530:	f009 fd27 	bl	80b5f82 <osKernelGetTickFreq>
 80ac534:	ee07 0a90 	vmov	s15, r0
 80ac538:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80ac53c:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80ac540:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c

  if (dt_s > 1)                 //need refine, 1s duration is too big
 80ac544:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80ac548:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80ac54c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80ac550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80ac554:	dd07      	ble.n	80ac566 <rot_v_fusion_gyro+0x96>
    printf("@@@GYRO_TIME_ERROR %f ms\r\n", dt_s);
 80ac556:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80ac558:	f7f3 fff6 	bl	80a0548 <__aeabi_f2d>
 80ac55c:	4602      	mov	r2, r0
 80ac55e:	460b      	mov	r3, r1
 80ac560:	4838      	ldr	r0, [pc, #224]	; (80ac644 <rot_v_fusion_gyro+0x174>)
 80ac562:	f014 fa07 	bl	80c0974 <iprintf>

  //printf("gyro_data: %d %f %f %f\r\n", timestamp, gyro[0], gyro[1], gyro[2]);

  rot_v_gyro_autocal(gyro, gyro_bias, gyro_calibrated);
 80ac566:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80ac56a:	461a      	mov	r2, r3
 80ac56c:	4936      	ldr	r1, [pc, #216]	; (80ac648 <rot_v_fusion_gyro+0x178>)
 80ac56e:	6878      	ldr	r0, [r7, #4]
 80ac570:	f7ff fdce 	bl	80ac110 <rot_v_gyro_autocal>
  posture(gyro_calibrated, rot_vec, dt_s, (int)SENSOR_TYPE_GYROSCOPE);
 80ac574:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80ac578:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80ac57c:	2202      	movs	r2, #2
 80ac57e:	ed97 0a1b 	vldr	s0, [r7, #108]	; 0x6c
 80ac582:	4618      	mov	r0, r3
 80ac584:	f7ff f97a 	bl	80ab87c <posture>
  get_rot_mat(rot_vec, rot_mat);
 80ac588:	f107 0210 	add.w	r2, r7, #16
 80ac58c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80ac590:	4611      	mov	r1, r2
 80ac592:	4618      	mov	r0, r3
 80ac594:	f7ff f9ea 	bl	80ab96c <get_rot_mat>
  timestamp_previous = timestamp;
 80ac598:	4929      	ldr	r1, [pc, #164]	; (80ac640 <rot_v_fusion_gyro+0x170>)
 80ac59a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80ac59e:	e9c1 2300 	strd	r2, r3, [r1]

  pitch = asinf(rot_mat[7]) * RAD2DEG;
 80ac5a2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80ac5a6:	eeb0 0a67 	vmov.f32	s0, s15
 80ac5aa:	f016 fbef 	bl	80c2d8c <asinf>
 80ac5ae:	eef0 7a40 	vmov.f32	s15, s0
 80ac5b2:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80ac64c <rot_v_fusion_gyro+0x17c>
 80ac5b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80ac5ba:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
  roll = asinf(-rot_mat[6]) * RAD2DEG;
 80ac5be:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80ac5c2:	eef1 7a67 	vneg.f32	s15, s15
 80ac5c6:	eeb0 0a67 	vmov.f32	s0, s15
 80ac5ca:	f016 fbdf 	bl	80c2d8c <asinf>
 80ac5ce:	eef0 7a40 	vmov.f32	s15, s0
 80ac5d2:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80ac64c <rot_v_fusion_gyro+0x17c>
 80ac5d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80ac5da:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
  yaw = asinf(rot_mat[8]) * RAD2DEG;
 80ac5de:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80ac5e2:	eeb0 0a67 	vmov.f32	s0, s15
 80ac5e6:	f016 fbd1 	bl	80c2d8c <asinf>
 80ac5ea:	eef0 7a40 	vmov.f32	s15, s0
 80ac5ee:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80ac64c <rot_v_fusion_gyro+0x17c>
 80ac5f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80ac5f6:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
  temp_roll = roll;
 80ac5fa:	4a15      	ldr	r2, [pc, #84]	; (80ac650 <rot_v_fusion_gyro+0x180>)
 80ac5fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80ac5fe:	6013      	str	r3, [r2, #0]
  temp_pitch = pitch;
 80ac600:	4a14      	ldr	r2, [pc, #80]	; (80ac654 <rot_v_fusion_gyro+0x184>)
 80ac602:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80ac604:	6013      	str	r3, [r2, #0]
  temp_yaw = yaw;
 80ac606:	4a14      	ldr	r2, [pc, #80]	; (80ac658 <rot_v_fusion_gyro+0x188>)
 80ac608:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80ac60a:	6013      	str	r3, [r2, #0]
  //printf("eular_after_gyro: %llu %.1f %.1f %.1f\r\n", timestamp, yaw, pitch, roll);

  float gyro_momentum = matrix_length(gyro_calibrated, 3);
 80ac60c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80ac610:	2103      	movs	r1, #3
 80ac612:	4618      	mov	r0, r3
 80ac614:	f7fd fdc3 	bl	80aa19e <matrix_length>
 80ac618:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
  //-----------------------------Preprocess----------------------------------//
  rot_v_quaternion[0] = rot_vec[0];
 80ac61c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80ac61e:	4a0f      	ldr	r2, [pc, #60]	; (80ac65c <rot_v_fusion_gyro+0x18c>)
 80ac620:	6013      	str	r3, [r2, #0]
  rot_v_quaternion[1] = rot_vec[1];
 80ac622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80ac624:	4a0d      	ldr	r2, [pc, #52]	; (80ac65c <rot_v_fusion_gyro+0x18c>)
 80ac626:	6053      	str	r3, [r2, #4]
  rot_v_quaternion[2] = rot_vec[2];
 80ac628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80ac62a:	4a0c      	ldr	r2, [pc, #48]	; (80ac65c <rot_v_fusion_gyro+0x18c>)
 80ac62c:	6093      	str	r3, [r2, #8]
  rot_v_quaternion[3] = rot_vec[3];
 80ac62e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80ac630:	4a0a      	ldr	r2, [pc, #40]	; (80ac65c <rot_v_fusion_gyro+0x18c>)
 80ac632:	60d3      	str	r3, [r2, #12]
}
 80ac634:	bf00      	nop
 80ac636:	3770      	adds	r7, #112	; 0x70
 80ac638:	46bd      	mov	sp, r7
 80ac63a:	ecbd 8b02 	vpop	{d8}
 80ac63e:	bdb0      	pop	{r4, r5, r7, pc}
 80ac640:	20008408 	.word	0x20008408
 80ac644:	080c5d80 	.word	0x080c5d80
 80ac648:	20008410 	.word	0x20008410
 80ac64c:	42652ee1 	.word	0x42652ee1
 80ac650:	20008190 	.word	0x20008190
 80ac654:	20008194 	.word	0x20008194
 80ac658:	20008198 	.word	0x20008198
 80ac65c:	2000789c 	.word	0x2000789c

080ac660 <rotv_init>:

int rotv_init(void *para, void *para2)
{
 80ac660:	b580      	push	{r7, lr}
 80ac662:	b082      	sub	sp, #8
 80ac664:	af00      	add	r7, sp, #0
 80ac666:	6078      	str	r0, [r7, #4]
 80ac668:	6039      	str	r1, [r7, #0]
  rot_v_init_parms = (platform_prams *) para;
 80ac66a:	4a17      	ldr	r2, [pc, #92]	; (80ac6c8 <rotv_init+0x68>)
 80ac66c:	687b      	ldr	r3, [r7, #4]
 80ac66e:	6013      	str	r3, [r2, #0]
  sensor_ptr = (sensor_device **) para2;
 80ac670:	4a16      	ldr	r2, [pc, #88]	; (80ac6cc <rotv_init+0x6c>)
 80ac672:	683b      	ldr	r3, [r7, #0]
 80ac674:	6013      	str	r3, [r2, #0]
  rot_v_state_init();
 80ac676:	f7fd fa57 	bl	80a9b28 <rot_v_state_init>
  if ((sensor_ptr[SENSOR_TYPE_ACCELEROMETER] != NULL)
 80ac67a:	4b14      	ldr	r3, [pc, #80]	; (80ac6cc <rotv_init+0x6c>)
 80ac67c:	681b      	ldr	r3, [r3, #0]
 80ac67e:	681b      	ldr	r3, [r3, #0]
 80ac680:	2b00      	cmp	r3, #0
 80ac682:	d01a      	beq.n	80ac6ba <rotv_init+0x5a>
//      && (sensor_ptr[SENSOR_TYPE_MAGNETIC_FIELD] != NULL)
      && (sensor_ptr[SENSOR_TYPE_GYROSCOPE] != NULL)) {
 80ac684:	4b11      	ldr	r3, [pc, #68]	; (80ac6cc <rotv_init+0x6c>)
 80ac686:	681b      	ldr	r3, [r3, #0]
 80ac688:	3308      	adds	r3, #8
 80ac68a:	681b      	ldr	r3, [r3, #0]
 80ac68c:	2b00      	cmp	r3, #0
 80ac68e:	d014      	beq.n	80ac6ba <rotv_init+0x5a>
    if ((sensor_ptr[SENSOR_TYPE_ACCELEROMETER]->init_completed)
 80ac690:	4b0e      	ldr	r3, [pc, #56]	; (80ac6cc <rotv_init+0x6c>)
 80ac692:	681b      	ldr	r3, [r3, #0]
 80ac694:	681b      	ldr	r3, [r3, #0]
 80ac696:	7d1b      	ldrb	r3, [r3, #20]
 80ac698:	2b00      	cmp	r3, #0
 80ac69a:	d00b      	beq.n	80ac6b4 <rotv_init+0x54>
//          && (sensor_ptr[SENSOR_TYPE_MAGNETIC_FIELD]->init_completed)
        && (sensor_ptr[SENSOR_TYPE_GYROSCOPE]->init_completed)) {
 80ac69c:	4b0b      	ldr	r3, [pc, #44]	; (80ac6cc <rotv_init+0x6c>)
 80ac69e:	681b      	ldr	r3, [r3, #0]
 80ac6a0:	3308      	adds	r3, #8
 80ac6a2:	681b      	ldr	r3, [r3, #0]
 80ac6a4:	7d1b      	ldrb	r3, [r3, #20]
 80ac6a6:	2b00      	cmp	r3, #0
 80ac6a8:	d004      	beq.n	80ac6b4 <rotv_init+0x54>
      printf("all depending sensor enabled\r\n");
 80ac6aa:	4809      	ldr	r0, [pc, #36]	; (80ac6d0 <rotv_init+0x70>)
 80ac6ac:	f014 f9fe 	bl	80c0aac <puts>
      return SENSOR_SUCCESS;
 80ac6b0:	2300      	movs	r3, #0
 80ac6b2:	e004      	b.n	80ac6be <rotv_init+0x5e>
    } else {
      printf("depending sensor missing, init will exit with fail!\r\n");
 80ac6b4:	4807      	ldr	r0, [pc, #28]	; (80ac6d4 <rotv_init+0x74>)
 80ac6b6:	f014 f9f9 	bl	80c0aac <puts>
    }
  }

  return SENSOR_FAILED;
 80ac6ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80ac6be:	4618      	mov	r0, r3
 80ac6c0:	3708      	adds	r7, #8
 80ac6c2:	46bd      	mov	sp, r7
 80ac6c4:	bd80      	pop	{r7, pc}
 80ac6c6:	bf00      	nop
 80ac6c8:	200080b8 	.word	0x200080b8
 80ac6cc:	200080b4 	.word	0x200080b4
 80ac6d0:	080c5d9c 	.word	0x080c5d9c
 80ac6d4:	080c5dbc 	.word	0x080c5dbc

080ac6d8 <rotv_init_complete>:

int rotv_init_complete(void *para)
{
 80ac6d8:	b480      	push	{r7}
 80ac6da:	b083      	sub	sp, #12
 80ac6dc:	af00      	add	r7, sp, #0
 80ac6de:	6078      	str	r0, [r7, #4]
  return SENSOR_SUCCESS;
 80ac6e0:	2300      	movs	r3, #0
}
 80ac6e2:	4618      	mov	r0, r3
 80ac6e4:	370c      	adds	r7, #12
 80ac6e6:	46bd      	mov	sp, r7
 80ac6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ac6ec:	4770      	bx	lr
	...

080ac6f0 <rotv_enable>:

int rotv_enable()
{
 80ac6f0:	b580      	push	{r7, lr}
 80ac6f2:	b096      	sub	sp, #88	; 0x58
 80ac6f4:	af00      	add	r7, sp, #0
  sensor_message_event_t sensor_msg_event;
  osStatus_t res;
  if (sensor_activate_count == 0) {
 80ac6f6:	4b18      	ldr	r3, [pc, #96]	; (80ac758 <rotv_enable+0x68>)
 80ac6f8:	781b      	ldrb	r3, [r3, #0]
 80ac6fa:	2b00      	cmp	r3, #0
 80ac6fc:	d120      	bne.n	80ac740 <rotv_enable+0x50>
    sensor_msg_event.message_event_type = SENSOR_CONFIG_MESSAGE;
 80ac6fe:	2300      	movs	r3, #0
 80ac700:	703b      	strb	r3, [r7, #0]
    sensor_msg_event.message_event_t.config_event.config_type = SENSOR_ACTIVATE;
 80ac702:	2301      	movs	r3, #1
 80ac704:	727b      	strb	r3, [r7, #9]
    sensor_msg_event.message_event_t.config_event.sensor_type =
 80ac706:	2300      	movs	r3, #0
 80ac708:	723b      	strb	r3, [r7, #8]
        SENSOR_TYPE_ACCELEROMETER;
    osMessageQueuePut(rot_v_init_parms->SensorMessageQHandle, &sensor_msg_event,
 80ac70a:	4b14      	ldr	r3, [pc, #80]	; (80ac75c <rotv_enable+0x6c>)
 80ac70c:	681b      	ldr	r3, [r3, #0]
 80ac70e:	f8d3 00f4 	ldr.w	r0, [r3, #244]	; 0xf4
 80ac712:	4639      	mov	r1, r7
 80ac714:	2300      	movs	r3, #0
 80ac716:	2200      	movs	r2, #0
 80ac718:	f009 fe74 	bl	80b6404 <osMessageQueuePut>
                      0, 0);
    sensor_msg_event.message_event_type = SENSOR_CONFIG_MESSAGE;
 80ac71c:	2300      	movs	r3, #0
 80ac71e:	703b      	strb	r3, [r7, #0]
    sensor_msg_event.message_event_t.config_event.config_type = SENSOR_ACTIVATE;
 80ac720:	2301      	movs	r3, #1
 80ac722:	727b      	strb	r3, [r7, #9]
    sensor_msg_event.message_event_t.config_event.sensor_type =
 80ac724:	2302      	movs	r3, #2
 80ac726:	723b      	strb	r3, [r7, #8]
        SENSOR_TYPE_GYROSCOPE;
    osMessageQueuePut(rot_v_init_parms->SensorMessageQHandle, &sensor_msg_event,
 80ac728:	4b0c      	ldr	r3, [pc, #48]	; (80ac75c <rotv_enable+0x6c>)
 80ac72a:	681b      	ldr	r3, [r3, #0]
 80ac72c:	f8d3 00f4 	ldr.w	r0, [r3, #244]	; 0xf4
 80ac730:	4639      	mov	r1, r7
 80ac732:	2300      	movs	r3, #0
 80ac734:	2200      	movs	r2, #0
 80ac736:	f009 fe65 	bl	80b6404 <osMessageQueuePut>
                      0, 0);
/*		sensor_msg_event.message_event_type = SENSOR_CONFIG_MESSAGE;
		sensor_msg_event.message_event_t.config_event.config_type = SENSOR_ACTIVATE;
		sensor_msg_event.message_event_t.config_event.sensor_type = SENSOR_TYPE_MAGNETIC_FIELD;
		osMessageQueuePut(rot_v_init_parms->SensorMessageQHandle, &sensor_msg_event, 0, 0);*/
    rot_v_activated = true;
 80ac73a:	4b09      	ldr	r3, [pc, #36]	; (80ac760 <rotv_enable+0x70>)
 80ac73c:	2201      	movs	r2, #1
 80ac73e:	701a      	strb	r2, [r3, #0]
  }
  sensor_activate_count++;
 80ac740:	4b05      	ldr	r3, [pc, #20]	; (80ac758 <rotv_enable+0x68>)
 80ac742:	781b      	ldrb	r3, [r3, #0]
 80ac744:	3301      	adds	r3, #1
 80ac746:	b2da      	uxtb	r2, r3
 80ac748:	4b03      	ldr	r3, [pc, #12]	; (80ac758 <rotv_enable+0x68>)
 80ac74a:	701a      	strb	r2, [r3, #0]
}
 80ac74c:	bf00      	nop
 80ac74e:	4618      	mov	r0, r3
 80ac750:	3758      	adds	r7, #88	; 0x58
 80ac752:	46bd      	mov	sp, r7
 80ac754:	bd80      	pop	{r7, pc}
 80ac756:	bf00      	nop
 80ac758:	2000818c 	.word	0x2000818c
 80ac75c:	200080b8 	.word	0x200080b8
 80ac760:	2000818d 	.word	0x2000818d

080ac764 <rotv_disable>:

int rotv_disable()
{
 80ac764:	b580      	push	{r7, lr}
 80ac766:	b096      	sub	sp, #88	; 0x58
 80ac768:	af00      	add	r7, sp, #0
  sensor_message_event_t sensor_msg_event;
  osStatus_t res;
  sensor_activate_count--;
 80ac76a:	4b18      	ldr	r3, [pc, #96]	; (80ac7cc <rotv_disable+0x68>)
 80ac76c:	781b      	ldrb	r3, [r3, #0]
 80ac76e:	3b01      	subs	r3, #1
 80ac770:	b2da      	uxtb	r2, r3
 80ac772:	4b16      	ldr	r3, [pc, #88]	; (80ac7cc <rotv_disable+0x68>)
 80ac774:	701a      	strb	r2, [r3, #0]
  if (sensor_activate_count == 0) {
 80ac776:	4b15      	ldr	r3, [pc, #84]	; (80ac7cc <rotv_disable+0x68>)
 80ac778:	781b      	ldrb	r3, [r3, #0]
 80ac77a:	2b00      	cmp	r3, #0
 80ac77c:	d120      	bne.n	80ac7c0 <rotv_disable+0x5c>
    sensor_msg_event.message_event_type = SENSOR_CONFIG_MESSAGE;
 80ac77e:	2300      	movs	r3, #0
 80ac780:	703b      	strb	r3, [r7, #0]
    sensor_msg_event.message_event_t.config_event.config_type =
 80ac782:	2300      	movs	r3, #0
 80ac784:	727b      	strb	r3, [r7, #9]
        SENSOR_DEACTIVATE;
    sensor_msg_event.message_event_t.config_event.sensor_type =
 80ac786:	2300      	movs	r3, #0
 80ac788:	723b      	strb	r3, [r7, #8]
        SENSOR_TYPE_ACCELEROMETER;
    osMessageQueuePut(rot_v_init_parms->SensorMessageQHandle, &sensor_msg_event,
 80ac78a:	4b11      	ldr	r3, [pc, #68]	; (80ac7d0 <rotv_disable+0x6c>)
 80ac78c:	681b      	ldr	r3, [r3, #0]
 80ac78e:	f8d3 00f4 	ldr.w	r0, [r3, #244]	; 0xf4
 80ac792:	4639      	mov	r1, r7
 80ac794:	2300      	movs	r3, #0
 80ac796:	2200      	movs	r2, #0
 80ac798:	f009 fe34 	bl	80b6404 <osMessageQueuePut>
                      0, 0);
    sensor_msg_event.message_event_type = SENSOR_CONFIG_MESSAGE;
 80ac79c:	2300      	movs	r3, #0
 80ac79e:	703b      	strb	r3, [r7, #0]
    sensor_msg_event.message_event_t.config_event.config_type =
 80ac7a0:	2300      	movs	r3, #0
 80ac7a2:	727b      	strb	r3, [r7, #9]
        SENSOR_DEACTIVATE;
    sensor_msg_event.message_event_t.config_event.sensor_type =
 80ac7a4:	2302      	movs	r3, #2
 80ac7a6:	723b      	strb	r3, [r7, #8]
        SENSOR_TYPE_GYROSCOPE;
    osMessageQueuePut(rot_v_init_parms->SensorMessageQHandle, &sensor_msg_event,
 80ac7a8:	4b09      	ldr	r3, [pc, #36]	; (80ac7d0 <rotv_disable+0x6c>)
 80ac7aa:	681b      	ldr	r3, [r3, #0]
 80ac7ac:	f8d3 00f4 	ldr.w	r0, [r3, #244]	; 0xf4
 80ac7b0:	4639      	mov	r1, r7
 80ac7b2:	2300      	movs	r3, #0
 80ac7b4:	2200      	movs	r2, #0
 80ac7b6:	f009 fe25 	bl	80b6404 <osMessageQueuePut>
                      0, 0);
/*		sensor_msg_event.message_event_type = SENSOR_CONFIG_MESSAGE;
		sensor_msg_event.message_event_t.config_event.config_type = SENSOR_DEACTIVATE;
		sensor_msg_event.message_event_t.config_event.sensor_type = SENSOR_TYPE_MAGNETIC_FIELD;
		osMessageQueuePut(rot_v_init_parms->SensorMessageQHandle, &sensor_msg_event, 0, 0);*/
    rot_v_activated = false;
 80ac7ba:	4b06      	ldr	r3, [pc, #24]	; (80ac7d4 <rotv_disable+0x70>)
 80ac7bc:	2200      	movs	r2, #0
 80ac7be:	701a      	strb	r2, [r3, #0]
  }
}
 80ac7c0:	bf00      	nop
 80ac7c2:	4618      	mov	r0, r3
 80ac7c4:	3758      	adds	r7, #88	; 0x58
 80ac7c6:	46bd      	mov	sp, r7
 80ac7c8:	bd80      	pop	{r7, pc}
 80ac7ca:	bf00      	nop
 80ac7cc:	2000818c 	.word	0x2000818c
 80ac7d0:	200080b8 	.word	0x200080b8
 80ac7d4:	2000818d 	.word	0x2000818d

080ac7d8 <rotv_activate>:

int rotv_activate(bool activate)
{
 80ac7d8:	b580      	push	{r7, lr}
 80ac7da:	b082      	sub	sp, #8
 80ac7dc:	af00      	add	r7, sp, #0
 80ac7de:	4603      	mov	r3, r0
 80ac7e0:	71fb      	strb	r3, [r7, #7]
  if (activate) {
 80ac7e2:	79fb      	ldrb	r3, [r7, #7]
 80ac7e4:	2b00      	cmp	r3, #0
 80ac7e6:	d002      	beq.n	80ac7ee <rotv_activate+0x16>
    rotv_enable();
 80ac7e8:	f7ff ff82 	bl	80ac6f0 <rotv_enable>
 80ac7ec:	e001      	b.n	80ac7f2 <rotv_activate+0x1a>
  } else {
    rotv_disable();
 80ac7ee:	f7ff ffb9 	bl	80ac764 <rotv_disable>
  }
  return SENSOR_SUCCESS;
 80ac7f2:	2300      	movs	r3, #0
}
 80ac7f4:	4618      	mov	r0, r3
 80ac7f6:	3708      	adds	r7, #8
 80ac7f8:	46bd      	mov	sp, r7
 80ac7fa:	bd80      	pop	{r7, pc}

080ac7fc <rotv_publish_sensor_data>:

int rotv_publish_sensor_data(void *para)
{
 80ac7fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80ac800:	b09c      	sub	sp, #112	; 0x70
 80ac802:	af06      	add	r7, sp, #24
 80ac804:	6078      	str	r0, [r7, #4]
  /* Read samples in polling mode (no int) */
  sensors_event_t sensor_data = { 0 };
 80ac806:	f107 0308 	add.w	r3, r7, #8
 80ac80a:	2250      	movs	r2, #80	; 0x50
 80ac80c:	2100      	movs	r1, #0
 80ac80e:	4618      	mov	r0, r3
 80ac810:	f013 fbd4 	bl	80bffbc <memset>
  //printf("rotv_publish_sensor_data: %d \r\n", light_activated);
  if (rot_v_activated) {
 80ac814:	4b28      	ldr	r3, [pc, #160]	; (80ac8b8 <rotv_publish_sensor_data+0xbc>)
 80ac816:	781b      	ldrb	r3, [r3, #0]
 80ac818:	2b00      	cmp	r3, #0
 80ac81a:	d046      	beq.n	80ac8aa <rotv_publish_sensor_data+0xae>
    //send related messages to SensorDataQ
    sensor_data.sensor_type = SENSOR_TYPE_ROTATION_VECTOR;
 80ac81c:	230d      	movs	r3, #13
 80ac81e:	723b      	strb	r3, [r7, #8]
    sensor_data.accuracy = 3;
 80ac820:	2303      	movs	r3, #3
 80ac822:	727b      	strb	r3, [r7, #9]
    sensor_data.timestamp = sensor_get_timestamp();
 80ac824:	f000 ff70 	bl	80ad708 <sensor_get_timestamp>
 80ac828:	4602      	mov	r2, r0
 80ac82a:	460b      	mov	r3, r1
 80ac82c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    sensor_data.sensor_data_t.vec.data[0] = rot_v_quaternion[0];
 80ac830:	4b22      	ldr	r3, [pc, #136]	; (80ac8bc <rotv_publish_sensor_data+0xc0>)
 80ac832:	681b      	ldr	r3, [r3, #0]
 80ac834:	61bb      	str	r3, [r7, #24]
    sensor_data.sensor_data_t.vec.data[1] = rot_v_quaternion[1];
 80ac836:	4b21      	ldr	r3, [pc, #132]	; (80ac8bc <rotv_publish_sensor_data+0xc0>)
 80ac838:	685b      	ldr	r3, [r3, #4]
 80ac83a:	61fb      	str	r3, [r7, #28]
    sensor_data.sensor_data_t.vec.data[2] = rot_v_quaternion[2];
 80ac83c:	4b1f      	ldr	r3, [pc, #124]	; (80ac8bc <rotv_publish_sensor_data+0xc0>)
 80ac83e:	689b      	ldr	r3, [r3, #8]
 80ac840:	623b      	str	r3, [r7, #32]
    sensor_data.sensor_data_t.vec.data[3] = rot_v_quaternion[3];
 80ac842:	4b1e      	ldr	r3, [pc, #120]	; (80ac8bc <rotv_publish_sensor_data+0xc0>)
 80ac844:	68db      	ldr	r3, [r3, #12]
 80ac846:	627b      	str	r3, [r7, #36]	; 0x24
    //sensor_data.sensor_data_t.vec.data[0] = temp_roll;
    //sensor_data.sensor_data_t.vec.data[1] = temp_pitch;
    //sensor_data.sensor_data_t.vec.data[2] = temp_yaw;
    //sensor_data.sensor_data_t.vec.data[3] = 0;

    printf("rot_v quaternion %f %f %f %f\r\n", rot_v_quaternion[0],
 80ac848:	4b1c      	ldr	r3, [pc, #112]	; (80ac8bc <rotv_publish_sensor_data+0xc0>)
 80ac84a:	681b      	ldr	r3, [r3, #0]
 80ac84c:	4618      	mov	r0, r3
 80ac84e:	f7f3 fe7b 	bl	80a0548 <__aeabi_f2d>
 80ac852:	4682      	mov	sl, r0
 80ac854:	468b      	mov	fp, r1
           rot_v_quaternion[1], rot_v_quaternion[2], rot_v_quaternion[3]);
 80ac856:	4b19      	ldr	r3, [pc, #100]	; (80ac8bc <rotv_publish_sensor_data+0xc0>)
 80ac858:	685b      	ldr	r3, [r3, #4]
    printf("rot_v quaternion %f %f %f %f\r\n", rot_v_quaternion[0],
 80ac85a:	4618      	mov	r0, r3
 80ac85c:	f7f3 fe74 	bl	80a0548 <__aeabi_f2d>
 80ac860:	4604      	mov	r4, r0
 80ac862:	460d      	mov	r5, r1
           rot_v_quaternion[1], rot_v_quaternion[2], rot_v_quaternion[3]);
 80ac864:	4b15      	ldr	r3, [pc, #84]	; (80ac8bc <rotv_publish_sensor_data+0xc0>)
 80ac866:	689b      	ldr	r3, [r3, #8]
    printf("rot_v quaternion %f %f %f %f\r\n", rot_v_quaternion[0],
 80ac868:	4618      	mov	r0, r3
 80ac86a:	f7f3 fe6d 	bl	80a0548 <__aeabi_f2d>
 80ac86e:	4680      	mov	r8, r0
 80ac870:	4689      	mov	r9, r1
           rot_v_quaternion[1], rot_v_quaternion[2], rot_v_quaternion[3]);
 80ac872:	4b12      	ldr	r3, [pc, #72]	; (80ac8bc <rotv_publish_sensor_data+0xc0>)
 80ac874:	68db      	ldr	r3, [r3, #12]
    printf("rot_v quaternion %f %f %f %f\r\n", rot_v_quaternion[0],
 80ac876:	4618      	mov	r0, r3
 80ac878:	f7f3 fe66 	bl	80a0548 <__aeabi_f2d>
 80ac87c:	4602      	mov	r2, r0
 80ac87e:	460b      	mov	r3, r1
 80ac880:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80ac884:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80ac888:	e9cd 4500 	strd	r4, r5, [sp]
 80ac88c:	4652      	mov	r2, sl
 80ac88e:	465b      	mov	r3, fp
 80ac890:	480b      	ldr	r0, [pc, #44]	; (80ac8c0 <rotv_publish_sensor_data+0xc4>)
 80ac892:	f014 f86f 	bl	80c0974 <iprintf>

    osMessageQueuePut(rot_v_init_parms->SensorDataQHandle, &sensor_data, 0, 0);
 80ac896:	4b0b      	ldr	r3, [pc, #44]	; (80ac8c4 <rotv_publish_sensor_data+0xc8>)
 80ac898:	681b      	ldr	r3, [r3, #0]
 80ac89a:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 80ac89e:	f107 0108 	add.w	r1, r7, #8
 80ac8a2:	2300      	movs	r3, #0
 80ac8a4:	2200      	movs	r2, #0
 80ac8a6:	f009 fdad 	bl	80b6404 <osMessageQueuePut>
  }
  return SENSOR_SUCCESS;
 80ac8aa:	2300      	movs	r3, #0
}
 80ac8ac:	4618      	mov	r0, r3
 80ac8ae:	3758      	adds	r7, #88	; 0x58
 80ac8b0:	46bd      	mov	sp, r7
 80ac8b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80ac8b6:	bf00      	nop
 80ac8b8:	2000818d 	.word	0x2000818d
 80ac8bc:	2000789c 	.word	0x2000789c
 80ac8c0:	080c5df4 	.word	0x080c5df4
 80ac8c4:	200080b8 	.word	0x200080b8

080ac8c8 <rotv_config>:

int rotv_config(uint8_t config_type, void *para)
{
 80ac8c8:	b580      	push	{r7, lr}
 80ac8ca:	b086      	sub	sp, #24
 80ac8cc:	af00      	add	r7, sp, #0
 80ac8ce:	4603      	mov	r3, r0
 80ac8d0:	6039      	str	r1, [r7, #0]
 80ac8d2:	71fb      	strb	r3, [r7, #7]
  sensors_event_t *sensor_data;
  sensor_data = (sensors_event_t *) para;
 80ac8d4:	683b      	ldr	r3, [r7, #0]
 80ac8d6:	617b      	str	r3, [r7, #20]
  float raw_data[3] = { 0 };
 80ac8d8:	f107 0308 	add.w	r3, r7, #8
 80ac8dc:	2200      	movs	r2, #0
 80ac8de:	601a      	str	r2, [r3, #0]
 80ac8e0:	605a      	str	r2, [r3, #4]
 80ac8e2:	609a      	str	r2, [r3, #8]
  if (config_type == SENSOR_CONFIG_DATA) {
 80ac8e4:	79fb      	ldrb	r3, [r7, #7]
 80ac8e6:	2b07      	cmp	r3, #7
 80ac8e8:	d138      	bne.n	80ac95c <rotv_config+0x94>
    if (sensor_data->sensor_type == SENSOR_TYPE_ACCELEROMETER) {
 80ac8ea:	697b      	ldr	r3, [r7, #20]
 80ac8ec:	781b      	ldrb	r3, [r3, #0]
 80ac8ee:	2b00      	cmp	r3, #0
 80ac8f0:	d111      	bne.n	80ac916 <rotv_config+0x4e>
      raw_data[0] = sensor_data->sensor_data_t.vec.acceleration.v[0];
 80ac8f2:	697b      	ldr	r3, [r7, #20]
 80ac8f4:	691b      	ldr	r3, [r3, #16]
 80ac8f6:	60bb      	str	r3, [r7, #8]
      raw_data[1] = sensor_data->sensor_data_t.vec.acceleration.v[1];
 80ac8f8:	697b      	ldr	r3, [r7, #20]
 80ac8fa:	695b      	ldr	r3, [r3, #20]
 80ac8fc:	60fb      	str	r3, [r7, #12]
      raw_data[2] = sensor_data->sensor_data_t.vec.acceleration.v[2];
 80ac8fe:	697b      	ldr	r3, [r7, #20]
 80ac900:	699b      	ldr	r3, [r3, #24]
 80ac902:	613b      	str	r3, [r7, #16]

      rot_v_fusion_acc(sensor_data->timestamp, raw_data);
 80ac904:	697b      	ldr	r3, [r7, #20]
 80ac906:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80ac90a:	f107 0308 	add.w	r3, r7, #8
 80ac90e:	461a      	mov	r2, r3
 80ac910:	f7ff fcfc 	bl	80ac30c <rot_v_fusion_acc>
 80ac914:	e022      	b.n	80ac95c <rotv_config+0x94>

    } else if (sensor_data->sensor_type == SENSOR_TYPE_GYROSCOPE) {
 80ac916:	697b      	ldr	r3, [r7, #20]
 80ac918:	781b      	ldrb	r3, [r3, #0]
 80ac91a:	2b02      	cmp	r3, #2
 80ac91c:	d111      	bne.n	80ac942 <rotv_config+0x7a>
      raw_data[0] = sensor_data->sensor_data_t.vec.gyro.v[0];
 80ac91e:	697b      	ldr	r3, [r7, #20]
 80ac920:	691b      	ldr	r3, [r3, #16]
 80ac922:	60bb      	str	r3, [r7, #8]
      raw_data[1] = sensor_data->sensor_data_t.vec.gyro.v[1];
 80ac924:	697b      	ldr	r3, [r7, #20]
 80ac926:	695b      	ldr	r3, [r3, #20]
 80ac928:	60fb      	str	r3, [r7, #12]
      raw_data[2] = sensor_data->sensor_data_t.vec.gyro.v[2];
 80ac92a:	697b      	ldr	r3, [r7, #20]
 80ac92c:	699b      	ldr	r3, [r3, #24]
 80ac92e:	613b      	str	r3, [r7, #16]

      rot_v_fusion_gyro(sensor_data->timestamp, raw_data);
 80ac930:	697b      	ldr	r3, [r7, #20]
 80ac932:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80ac936:	f107 0308 	add.w	r3, r7, #8
 80ac93a:	461a      	mov	r2, r3
 80ac93c:	f7ff fdc8 	bl	80ac4d0 <rot_v_fusion_gyro>
 80ac940:	e00c      	b.n	80ac95c <rotv_config+0x94>

    } else if (sensor_data->sensor_type == SENSOR_TYPE_MAGNETIC_FIELD) {
 80ac942:	697b      	ldr	r3, [r7, #20]
 80ac944:	781b      	ldrb	r3, [r3, #0]
 80ac946:	2b01      	cmp	r3, #1
 80ac948:	d108      	bne.n	80ac95c <rotv_config+0x94>
      raw_data[0] = sensor_data->sensor_data_t.vec.magnetic.v[0];
 80ac94a:	697b      	ldr	r3, [r7, #20]
 80ac94c:	691b      	ldr	r3, [r3, #16]
 80ac94e:	60bb      	str	r3, [r7, #8]
      raw_data[1] = sensor_data->sensor_data_t.vec.magnetic.v[1];
 80ac950:	697b      	ldr	r3, [r7, #20]
 80ac952:	695b      	ldr	r3, [r3, #20]
 80ac954:	60fb      	str	r3, [r7, #12]
      raw_data[2] = sensor_data->sensor_data_t.vec.magnetic.v[2];
 80ac956:	697b      	ldr	r3, [r7, #20]
 80ac958:	699b      	ldr	r3, [r3, #24]
 80ac95a:	613b      	str	r3, [r7, #16]
    }
  }
  return SENSOR_SUCCESS;
 80ac95c:	2300      	movs	r3, #0
}
 80ac95e:	4618      	mov	r0, r3
 80ac960:	3718      	adds	r7, #24
 80ac962:	46bd      	mov	sp, r7
 80ac964:	bd80      	pop	{r7, pc}

080ac966 <rotv_publish_config_resp>:

int rotv_publish_config_resp(void *para)
{
 80ac966:	b480      	push	{r7}
 80ac968:	b083      	sub	sp, #12
 80ac96a:	af00      	add	r7, sp, #0
 80ac96c:	6078      	str	r0, [r7, #4]
  return SENSOR_SUCCESS;
 80ac96e:	2300      	movs	r3, #0
}
 80ac970:	4618      	mov	r0, r3
 80ac972:	370c      	adds	r7, #12
 80ac974:	46bd      	mov	sp, r7
 80ac976:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ac97a:	4770      	bx	lr

080ac97c <sensor_avaiable_check>:
  .sensor_op_ptr = &speedv_ops[0],
};

/* ======================================================================================================= */
bool sensor_avaiable_check(uint8_t sensor_type)
{
 80ac97c:	b480      	push	{r7}
 80ac97e:	b083      	sub	sp, #12
 80ac980:	af00      	add	r7, sp, #0
 80ac982:	4603      	mov	r3, r0
 80ac984:	71fb      	strb	r3, [r7, #7]
  if (sensor_type == SENSOR_TYPE_MAX) {
 80ac986:	79fb      	ldrb	r3, [r7, #7]
 80ac988:	2b0f      	cmp	r3, #15
 80ac98a:	d101      	bne.n	80ac990 <sensor_avaiable_check+0x14>
    return true;
 80ac98c:	2301      	movs	r3, #1
 80ac98e:	e011      	b.n	80ac9b4 <sensor_avaiable_check+0x38>
  } else if (sensor_type < SENSOR_TYPE_MAX) {
 80ac990:	79fb      	ldrb	r3, [r7, #7]
 80ac992:	2b0e      	cmp	r3, #14
 80ac994:	d80d      	bhi.n	80ac9b2 <sensor_avaiable_check+0x36>
    if (sensors[sensor_type] != NULL)
 80ac996:	79fb      	ldrb	r3, [r7, #7]
 80ac998:	4a09      	ldr	r2, [pc, #36]	; (80ac9c0 <sensor_avaiable_check+0x44>)
 80ac99a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80ac99e:	2b00      	cmp	r3, #0
 80ac9a0:	d005      	beq.n	80ac9ae <sensor_avaiable_check+0x32>
      return sensors[sensor_type]->init_completed;
 80ac9a2:	79fb      	ldrb	r3, [r7, #7]
 80ac9a4:	4a06      	ldr	r2, [pc, #24]	; (80ac9c0 <sensor_avaiable_check+0x44>)
 80ac9a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80ac9aa:	7d1b      	ldrb	r3, [r3, #20]
 80ac9ac:	e002      	b.n	80ac9b4 <sensor_avaiable_check+0x38>
    else
      return false;
 80ac9ae:	2300      	movs	r3, #0
 80ac9b0:	e000      	b.n	80ac9b4 <sensor_avaiable_check+0x38>
  } else {
    return false;
 80ac9b2:	2300      	movs	r3, #0
  }
}
 80ac9b4:	4618      	mov	r0, r3
 80ac9b6:	370c      	adds	r7, #12
 80ac9b8:	46bd      	mov	sp, r7
 80ac9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ac9be:	4770      	bx	lr
 80ac9c0:	2000841c 	.word	0x2000841c

080ac9c4 <sensor_get_index_length>:

  return false;
}

uint8_t sensor_get_index_length(uint8_t sensor_type)
{
 80ac9c4:	b480      	push	{r7}
 80ac9c6:	b083      	sub	sp, #12
 80ac9c8:	af00      	add	r7, sp, #0
 80ac9ca:	4603      	mov	r3, r0
 80ac9cc:	71fb      	strb	r3, [r7, #7]
  if (sensor_type < SENSOR_TYPE_MAX && sensors[sensor_type] != NULL) {
 80ac9ce:	79fb      	ldrb	r3, [r7, #7]
 80ac9d0:	2b0e      	cmp	r3, #14
 80ac9d2:	d80b      	bhi.n	80ac9ec <sensor_get_index_length+0x28>
 80ac9d4:	79fb      	ldrb	r3, [r7, #7]
 80ac9d6:	4a09      	ldr	r2, [pc, #36]	; (80ac9fc <sensor_get_index_length+0x38>)
 80ac9d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80ac9dc:	2b00      	cmp	r3, #0
 80ac9de:	d005      	beq.n	80ac9ec <sensor_get_index_length+0x28>
    return sensors[sensor_type]->axis_num;
 80ac9e0:	79fb      	ldrb	r3, [r7, #7]
 80ac9e2:	4a06      	ldr	r2, [pc, #24]	; (80ac9fc <sensor_get_index_length+0x38>)
 80ac9e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80ac9e8:	7d9b      	ldrb	r3, [r3, #22]
 80ac9ea:	e000      	b.n	80ac9ee <sensor_get_index_length+0x2a>
  } else {
    return 0xFF;
 80ac9ec:	23ff      	movs	r3, #255	; 0xff
  }
}
 80ac9ee:	4618      	mov	r0, r3
 80ac9f0:	370c      	adds	r7, #12
 80ac9f2:	46bd      	mov	sp, r7
 80ac9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ac9f8:	4770      	bx	lr
 80ac9fa:	bf00      	nop
 80ac9fc:	2000841c 	.word	0x2000841c

080aca00 <sensor_register>:

/* common register code starts from here */
void sensor_register(platform_prams * parms)
{
 80aca00:	b480      	push	{r7}
 80aca02:	b083      	sub	sp, #12
 80aca04:	af00      	add	r7, sp, #0
 80aca06:	6078      	str	r0, [r7, #4]
  //fill the sensors[SENSOR_TYPE_MAX] data struct for this chip
  platform_init_parms = parms;
 80aca08:	4a19      	ldr	r2, [pc, #100]	; (80aca70 <sensor_register+0x70>)
 80aca0a:	687b      	ldr	r3, [r7, #4]
 80aca0c:	6013      	str	r3, [r2, #0]

  op_timer = &platform_init_parms->OperateTimerHandle;
 80aca0e:	4b18      	ldr	r3, [pc, #96]	; (80aca70 <sensor_register+0x70>)
 80aca10:	681b      	ldr	r3, [r3, #0]
 80aca12:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80aca16:	4a17      	ldr	r2, [pc, #92]	; (80aca74 <sensor_register+0x74>)
 80aca18:	6013      	str	r3, [r2, #0]

  sensors[SENSOR_TYPE_ACCELEROMETER] = &acc_sensor;
 80aca1a:	4b17      	ldr	r3, [pc, #92]	; (80aca78 <sensor_register+0x78>)
 80aca1c:	4a17      	ldr	r2, [pc, #92]	; (80aca7c <sensor_register+0x7c>)
 80aca1e:	601a      	str	r2, [r3, #0]
  sensors[SENSOR_TYPE_GYROSCOPE] = &gyro_sensor;
 80aca20:	4b15      	ldr	r3, [pc, #84]	; (80aca78 <sensor_register+0x78>)
 80aca22:	4a17      	ldr	r2, [pc, #92]	; (80aca80 <sensor_register+0x80>)
 80aca24:	609a      	str	r2, [r3, #8]
  sensors[SENSOR_TYPE_MAGNETIC_FIELD] = &mag_sensor;
 80aca26:	4b14      	ldr	r3, [pc, #80]	; (80aca78 <sensor_register+0x78>)
 80aca28:	4a16      	ldr	r2, [pc, #88]	; (80aca84 <sensor_register+0x84>)
 80aca2a:	605a      	str	r2, [r3, #4]
  sensors[SENSOR_TYPE_LIGHT] = &light_sensor;
 80aca2c:	4b12      	ldr	r3, [pc, #72]	; (80aca78 <sensor_register+0x78>)
 80aca2e:	4a16      	ldr	r2, [pc, #88]	; (80aca88 <sensor_register+0x88>)
 80aca30:	60da      	str	r2, [r3, #12]
  sensors[SENSOR_TYPE_LED_HEAD] = &head_led_sensor;
 80aca32:	4b11      	ldr	r3, [pc, #68]	; (80aca78 <sensor_register+0x78>)
 80aca34:	4a15      	ldr	r2, [pc, #84]	; (80aca8c <sensor_register+0x8c>)
 80aca36:	611a      	str	r2, [r3, #16]
  sensors[SENSOR_TYPE_LED_REAR] = &rear_led_sensor;
 80aca38:	4b0f      	ldr	r3, [pc, #60]	; (80aca78 <sensor_register+0x78>)
 80aca3a:	4a15      	ldr	r2, [pc, #84]	; (80aca90 <sensor_register+0x90>)
 80aca3c:	625a      	str	r2, [r3, #36]	; 0x24
  sensors[SENSOR_TYPE_PROXIMITY_HEAD] = &head_prox_sensor;
 80aca3e:	4b0e      	ldr	r3, [pc, #56]	; (80aca78 <sensor_register+0x78>)
 80aca40:	4a14      	ldr	r2, [pc, #80]	; (80aca94 <sensor_register+0x94>)
 80aca42:	615a      	str	r2, [r3, #20]
  sensors[SENSOR_TYPE_PROXIMITY_REAR] = &rear_prox_sensor;
 80aca44:	4b0c      	ldr	r3, [pc, #48]	; (80aca78 <sensor_register+0x78>)
 80aca46:	4a14      	ldr	r2, [pc, #80]	; (80aca98 <sensor_register+0x98>)
 80aca48:	61da      	str	r2, [r3, #28]
  sensors[SENSOR_TYPE_LIGHT_SPEED] = &optical_sensor;
 80aca4a:	4b0b      	ldr	r3, [pc, #44]	; (80aca78 <sensor_register+0x78>)
 80aca4c:	4a13      	ldr	r2, [pc, #76]	; (80aca9c <sensor_register+0x9c>)
 80aca4e:	621a      	str	r2, [r3, #32]
  sensors[SENSOR_TYPE_ROTATION_VECTOR] = &rotv_sensor;
 80aca50:	4b09      	ldr	r3, [pc, #36]	; (80aca78 <sensor_register+0x78>)
 80aca52:	4a13      	ldr	r2, [pc, #76]	; (80acaa0 <sensor_register+0xa0>)
 80aca54:	635a      	str	r2, [r3, #52]	; 0x34
  sensors[SENSOR_TYPE_SPEED_VECTOR] = &speedv_sensor;
 80aca56:	4b08      	ldr	r3, [pc, #32]	; (80aca78 <sensor_register+0x78>)
 80aca58:	4a12      	ldr	r2, [pc, #72]	; (80acaa4 <sensor_register+0xa4>)
 80aca5a:	639a      	str	r2, [r3, #56]	; 0x38

  sensors[SENSOR_TYPE_PROXIMITY_BOT] = &tof_sensor;
 80aca5c:	4b06      	ldr	r3, [pc, #24]	; (80aca78 <sensor_register+0x78>)
 80aca5e:	4a12      	ldr	r2, [pc, #72]	; (80acaa8 <sensor_register+0xa8>)
 80aca60:	619a      	str	r2, [r3, #24]
  //register_acc_gyro(/* pointer to bus, pointer to sensor manager Q*/);
  //register_mag(/* pointer to bus, pointer to sensor manager Q*/);
  //register_als(/* pointer to bus, pointer to sensor manager Q*/);
}
 80aca62:	bf00      	nop
 80aca64:	370c      	adds	r7, #12
 80aca66:	46bd      	mov	sp, r7
 80aca68:	f85d 7b04 	ldr.w	r7, [sp], #4
 80aca6c:	4770      	bx	lr
 80aca6e:	bf00      	nop
 80aca70:	2000845c 	.word	0x2000845c
 80aca74:	2001c2cc 	.word	0x2001c2cc
 80aca78:	2000841c 	.word	0x2000841c
 80aca7c:	20007970 	.word	0x20007970
 80aca80:	20007924 	.word	0x20007924
 80aca84:	200079bc 	.word	0x200079bc
 80aca88:	20007a08 	.word	0x20007a08
 80aca8c:	20007ad0 	.word	0x20007ad0
 80aca90:	20007aec 	.word	0x20007aec
 80aca94:	20007b38 	.word	0x20007b38
 80aca98:	20007b54 	.word	0x20007b54
 80aca9c:	20007a54 	.word	0x20007a54
 80acaa0:	20007bec 	.word	0x20007bec
 80acaa4:	20007c38 	.word	0x20007c38
 80acaa8:	20007ba0 	.word	0x20007ba0

080acaac <init_registered_sensors>:

void init_registered_sensors()
{
 80acaac:	b5b0      	push	{r4, r5, r7, lr}
 80acaae:	b09a      	sub	sp, #104	; 0x68
 80acab0:	af00      	add	r7, sp, #0
  int res = SENSOR_SUCCESS;
 80acab2:	2300      	movs	r3, #0
 80acab4:	65fb      	str	r3, [r7, #92]	; 0x5c
  sensor_message_event_t sensor_msg_event;

  if (platform_init_parms != NULL) {
 80acab6:	4b59      	ldr	r3, [pc, #356]	; (80acc1c <init_registered_sensors+0x170>)
 80acab8:	681b      	ldr	r3, [r3, #0]
 80acaba:	2b00      	cmp	r3, #0
 80acabc:	f000 80a9 	beq.w	80acc12 <init_registered_sensors+0x166>
    for (int i = 0; i < SENSOR_TYPE_MAX; i++) {
 80acac0:	2300      	movs	r3, #0
 80acac2:	667b      	str	r3, [r7, #100]	; 0x64
 80acac4:	e095      	b.n	80acbf2 <init_registered_sensors+0x146>
      if (sensors[i] != NULL) {
 80acac6:	4a56      	ldr	r2, [pc, #344]	; (80acc20 <init_registered_sensors+0x174>)
 80acac8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80acaca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80acace:	2b00      	cmp	r3, #0
 80acad0:	f000 808c 	beq.w	80acbec <init_registered_sensors+0x140>
        if (platform_init_parms->boardID == REAR_BOARD && (i == 4 || i == 5)) { // REAR BOARD skip led and proximity on HEAD
 80acad4:	4b51      	ldr	r3, [pc, #324]	; (80acc1c <init_registered_sensors+0x170>)
 80acad6:	681b      	ldr	r3, [r3, #0]
 80acad8:	781b      	ldrb	r3, [r3, #0]
 80acada:	2b00      	cmp	r3, #0
 80acadc:	d105      	bne.n	80acaea <init_registered_sensors+0x3e>
 80acade:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80acae0:	2b04      	cmp	r3, #4
 80acae2:	d07e      	beq.n	80acbe2 <init_registered_sensors+0x136>
 80acae4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80acae6:	2b05      	cmp	r3, #5
 80acae8:	d07b      	beq.n	80acbe2 <init_registered_sensors+0x136>
          continue;
        }
        if (platform_init_parms->boardID == HEAD_BOARD && (i == 9 || i == 7)) { // HEAD BOARD skip led and proximity on REAR
 80acaea:	4b4c      	ldr	r3, [pc, #304]	; (80acc1c <init_registered_sensors+0x170>)
 80acaec:	681b      	ldr	r3, [r3, #0]
 80acaee:	781b      	ldrb	r3, [r3, #0]
 80acaf0:	2b03      	cmp	r3, #3
 80acaf2:	d105      	bne.n	80acb00 <init_registered_sensors+0x54>
 80acaf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80acaf6:	2b09      	cmp	r3, #9
 80acaf8:	d075      	beq.n	80acbe6 <init_registered_sensors+0x13a>
 80acafa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80acafc:	2b07      	cmp	r3, #7
 80acafe:	d072      	beq.n	80acbe6 <init_registered_sensors+0x13a>
          continue;
        }
        if (sensors[i]->init_completed) {
 80acb00:	4a47      	ldr	r2, [pc, #284]	; (80acc20 <init_registered_sensors+0x174>)
 80acb02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80acb04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80acb08:	7d1b      	ldrb	r3, [r3, #20]
 80acb0a:	2b00      	cmp	r3, #0
 80acb0c:	d16d      	bne.n	80acbea <init_registered_sensors+0x13e>
          continue;
        }

        for (int j = 0; j < MAX_AUTO_DETECT_DEV_NUM; j++) {
 80acb0e:	2300      	movs	r3, #0
 80acb10:	663b      	str	r3, [r7, #96]	; 0x60
 80acb12:	e062      	b.n	80acbda <init_registered_sensors+0x12e>
          if (sensors[i]->sensor_op_ptr[j].init != NULL) {
 80acb14:	4a42      	ldr	r2, [pc, #264]	; (80acc20 <init_registered_sensors+0x174>)
 80acb16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80acb18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80acb1c:	6999      	ldr	r1, [r3, #24]
 80acb1e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80acb20:	4613      	mov	r3, r2
 80acb22:	005b      	lsls	r3, r3, #1
 80acb24:	4413      	add	r3, r2
 80acb26:	00db      	lsls	r3, r3, #3
 80acb28:	440b      	add	r3, r1
 80acb2a:	681b      	ldr	r3, [r3, #0]
 80acb2c:	2b00      	cmp	r3, #0
 80acb2e:	d051      	beq.n	80acbd4 <init_registered_sensors+0x128>
            res =
                sensors[i]->sensor_op_ptr[j].init(platform_init_parms, sensors);
 80acb30:	4a3b      	ldr	r2, [pc, #236]	; (80acc20 <init_registered_sensors+0x174>)
 80acb32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80acb34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80acb38:	6999      	ldr	r1, [r3, #24]
 80acb3a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80acb3c:	4613      	mov	r3, r2
 80acb3e:	005b      	lsls	r3, r3, #1
 80acb40:	4413      	add	r3, r2
 80acb42:	00db      	lsls	r3, r3, #3
 80acb44:	440b      	add	r3, r1
 80acb46:	681b      	ldr	r3, [r3, #0]
 80acb48:	4a34      	ldr	r2, [pc, #208]	; (80acc1c <init_registered_sensors+0x170>)
 80acb4a:	6812      	ldr	r2, [r2, #0]
 80acb4c:	4934      	ldr	r1, [pc, #208]	; (80acc20 <init_registered_sensors+0x174>)
 80acb4e:	4610      	mov	r0, r2
 80acb50:	4798      	blx	r3
 80acb52:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (res == SENSOR_SUCCESS) {
 80acb54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80acb56:	2b00      	cmp	r3, #0
 80acb58:	d13c      	bne.n	80acbd4 <init_registered_sensors+0x128>
              res =
                  sensors[i]->sensor_op_ptr[j].
 80acb5a:	4a31      	ldr	r2, [pc, #196]	; (80acc20 <init_registered_sensors+0x174>)
 80acb5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80acb5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80acb62:	6999      	ldr	r1, [r3, #24]
 80acb64:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80acb66:	4613      	mov	r3, r2
 80acb68:	005b      	lsls	r3, r3, #1
 80acb6a:	4413      	add	r3, r2
 80acb6c:	00db      	lsls	r3, r3, #3
 80acb6e:	440b      	add	r3, r1
 80acb70:	685b      	ldr	r3, [r3, #4]
 80acb72:	4a2a      	ldr	r2, [pc, #168]	; (80acc1c <init_registered_sensors+0x170>)
 80acb74:	6812      	ldr	r2, [r2, #0]
 80acb76:	4610      	mov	r0, r2
 80acb78:	4798      	blx	r3
 80acb7a:	65f8      	str	r0, [r7, #92]	; 0x5c
                  init_complete(platform_init_parms);
              sensorAvaiableBitMask = sensorAvaiableBitMask | (1 << i);
 80acb7c:	2201      	movs	r2, #1
 80acb7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80acb80:	fa02 f303 	lsl.w	r3, r2, r3
 80acb84:	b21a      	sxth	r2, r3
 80acb86:	4b27      	ldr	r3, [pc, #156]	; (80acc24 <init_registered_sensors+0x178>)
 80acb88:	881b      	ldrh	r3, [r3, #0]
 80acb8a:	b21b      	sxth	r3, r3
 80acb8c:	4313      	orrs	r3, r2
 80acb8e:	b21b      	sxth	r3, r3
 80acb90:	b29a      	uxth	r2, r3
 80acb92:	4b24      	ldr	r3, [pc, #144]	; (80acc24 <init_registered_sensors+0x178>)
 80acb94:	801a      	strh	r2, [r3, #0]
              //always set the avaiable sensor_op_ptr to index 0 of array so that it is sample for smgr to use
              sensors[i]->sensor_op_ptr[0] = sensors[i]->sensor_op_ptr[j];
 80acb96:	4a22      	ldr	r2, [pc, #136]	; (80acc20 <init_registered_sensors+0x174>)
 80acb98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80acb9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80acb9e:	6999      	ldr	r1, [r3, #24]
 80acba0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80acba2:	4613      	mov	r3, r2
 80acba4:	005b      	lsls	r3, r3, #1
 80acba6:	4413      	add	r3, r2
 80acba8:	00db      	lsls	r3, r3, #3
 80acbaa:	4419      	add	r1, r3
 80acbac:	4a1c      	ldr	r2, [pc, #112]	; (80acc20 <init_registered_sensors+0x174>)
 80acbae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80acbb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80acbb4:	699b      	ldr	r3, [r3, #24]
 80acbb6:	461c      	mov	r4, r3
 80acbb8:	460d      	mov	r5, r1
 80acbba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80acbbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80acbbe:	e895 0003 	ldmia.w	r5, {r0, r1}
 80acbc2:	e884 0003 	stmia.w	r4, {r0, r1}
              sensors[i]->init_completed = true;
 80acbc6:	4a16      	ldr	r2, [pc, #88]	; (80acc20 <init_registered_sensors+0x174>)
 80acbc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80acbca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80acbce:	2201      	movs	r2, #1
 80acbd0:	751a      	strb	r2, [r3, #20]
              break;
 80acbd2:	e00b      	b.n	80acbec <init_registered_sensors+0x140>
        for (int j = 0; j < MAX_AUTO_DETECT_DEV_NUM; j++) {
 80acbd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80acbd6:	3301      	adds	r3, #1
 80acbd8:	663b      	str	r3, [r7, #96]	; 0x60
 80acbda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80acbdc:	2b01      	cmp	r3, #1
 80acbde:	dd99      	ble.n	80acb14 <init_registered_sensors+0x68>
 80acbe0:	e004      	b.n	80acbec <init_registered_sensors+0x140>
          continue;
 80acbe2:	bf00      	nop
 80acbe4:	e002      	b.n	80acbec <init_registered_sensors+0x140>
          continue;
 80acbe6:	bf00      	nop
 80acbe8:	e000      	b.n	80acbec <init_registered_sensors+0x140>
          continue;
 80acbea:	bf00      	nop
    for (int i = 0; i < SENSOR_TYPE_MAX; i++) {
 80acbec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80acbee:	3301      	adds	r3, #1
 80acbf0:	667b      	str	r3, [r7, #100]	; 0x64
 80acbf2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80acbf4:	2b0e      	cmp	r3, #14
 80acbf6:	f77f af66 	ble.w	80acac6 <init_registered_sensors+0x1a>
            }
          }
        }
      }
    }
    sensor_msg_event.message_event_type = SENSOR_INIT_COMPLETE_EVENT;
 80acbfa:	230a      	movs	r3, #10
 80acbfc:	703b      	strb	r3, [r7, #0]
    //notifiy smgr that init is completed
    osMessageQueuePut(platform_init_parms->SensorMessageQHandle,
 80acbfe:	4b07      	ldr	r3, [pc, #28]	; (80acc1c <init_registered_sensors+0x170>)
 80acc00:	681b      	ldr	r3, [r3, #0]
 80acc02:	f8d3 00f4 	ldr.w	r0, [r3, #244]	; 0xf4
 80acc06:	4639      	mov	r1, r7
 80acc08:	2300      	movs	r3, #0
 80acc0a:	2200      	movs	r2, #0
 80acc0c:	f009 fbfa 	bl	80b6404 <osMessageQueuePut>
                      &sensor_msg_event, 0, 0);
  } else {
    //sensor_register is not called successfully
  }
  return;
 80acc10:	bf00      	nop
 80acc12:	bf00      	nop
}
 80acc14:	3768      	adds	r7, #104	; 0x68
 80acc16:	46bd      	mov	sp, r7
 80acc18:	bdb0      	pop	{r4, r5, r7, pc}
 80acc1a:	bf00      	nop
 80acc1c:	2000845c 	.word	0x2000845c
 80acc20:	2000841c 	.word	0x2000841c
 80acc24:	2000845a 	.word	0x2000845a

080acc28 <sensor_op_timer_enable>:

int sensor_op_timer_enable(TIM_HandleTypeDef * htim)
{
 80acc28:	b580      	push	{r7, lr}
 80acc2a:	b084      	sub	sp, #16
 80acc2c:	af00      	add	r7, sp, #0
 80acc2e:	6078      	str	r0, [r7, #4]
  int res = SENSOR_SUCCESS;
 80acc30:	2300      	movs	r3, #0
 80acc32:	60fb      	str	r3, [r7, #12]

  if (htim == op_timer) {
 80acc34:	4b0d      	ldr	r3, [pc, #52]	; (80acc6c <sensor_op_timer_enable+0x44>)
 80acc36:	681b      	ldr	r3, [r3, #0]
 80acc38:	687a      	ldr	r2, [r7, #4]
 80acc3a:	429a      	cmp	r2, r3
 80acc3c:	d10d      	bne.n	80acc5a <sensor_op_timer_enable+0x32>
    if (platform_timer_enable_count == 0) {
 80acc3e:	4b0c      	ldr	r3, [pc, #48]	; (80acc70 <sensor_op_timer_enable+0x48>)
 80acc40:	881b      	ldrh	r3, [r3, #0]
 80acc42:	2b00      	cmp	r3, #0
 80acc44:	d102      	bne.n	80acc4c <sensor_op_timer_enable+0x24>
      HAL_TIM_Base_Start_IT(htim);
 80acc46:	6878      	ldr	r0, [r7, #4]
 80acc48:	f007 f96e 	bl	80b3f28 <HAL_TIM_Base_Start_IT>
    }
    platform_timer_enable_count++;
 80acc4c:	4b08      	ldr	r3, [pc, #32]	; (80acc70 <sensor_op_timer_enable+0x48>)
 80acc4e:	881b      	ldrh	r3, [r3, #0]
 80acc50:	3301      	adds	r3, #1
 80acc52:	b29a      	uxth	r2, r3
 80acc54:	4b06      	ldr	r3, [pc, #24]	; (80acc70 <sensor_op_timer_enable+0x48>)
 80acc56:	801a      	strh	r2, [r3, #0]
 80acc58:	e002      	b.n	80acc60 <sensor_op_timer_enable+0x38>
  } else {
    res = SENSOR_FAILED;
 80acc5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80acc5e:	60fb      	str	r3, [r7, #12]
  }

  return res;
 80acc60:	68fb      	ldr	r3, [r7, #12]
}
 80acc62:	4618      	mov	r0, r3
 80acc64:	3710      	adds	r7, #16
 80acc66:	46bd      	mov	sp, r7
 80acc68:	bd80      	pop	{r7, pc}
 80acc6a:	bf00      	nop
 80acc6c:	2001c2cc 	.word	0x2001c2cc
 80acc70:	20008460 	.word	0x20008460

080acc74 <sensor_op_timer_disable>:

int sensor_op_timer_disable(TIM_HandleTypeDef * htim)
{
 80acc74:	b580      	push	{r7, lr}
 80acc76:	b084      	sub	sp, #16
 80acc78:	af00      	add	r7, sp, #0
 80acc7a:	6078      	str	r0, [r7, #4]
  int res = SENSOR_SUCCESS;
 80acc7c:	2300      	movs	r3, #0
 80acc7e:	60fb      	str	r3, [r7, #12]

  if (htim == op_timer) {
 80acc80:	4b10      	ldr	r3, [pc, #64]	; (80accc4 <sensor_op_timer_disable+0x50>)
 80acc82:	681b      	ldr	r3, [r3, #0]
 80acc84:	687a      	ldr	r2, [r7, #4]
 80acc86:	429a      	cmp	r2, r3
 80acc88:	d114      	bne.n	80accb4 <sensor_op_timer_disable+0x40>
    if (platform_timer_enable_count == 0) {
 80acc8a:	4b0f      	ldr	r3, [pc, #60]	; (80accc8 <sensor_op_timer_disable+0x54>)
 80acc8c:	881b      	ldrh	r3, [r3, #0]
 80acc8e:	2b00      	cmp	r3, #0
 80acc90:	d102      	bne.n	80acc98 <sensor_op_timer_disable+0x24>
      return SENSOR_FAILED;
 80acc92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80acc96:	e011      	b.n	80accbc <sensor_op_timer_disable+0x48>
    }
    platform_timer_enable_count--;
 80acc98:	4b0b      	ldr	r3, [pc, #44]	; (80accc8 <sensor_op_timer_disable+0x54>)
 80acc9a:	881b      	ldrh	r3, [r3, #0]
 80acc9c:	3b01      	subs	r3, #1
 80acc9e:	b29a      	uxth	r2, r3
 80acca0:	4b09      	ldr	r3, [pc, #36]	; (80accc8 <sensor_op_timer_disable+0x54>)
 80acca2:	801a      	strh	r2, [r3, #0]
    if (platform_timer_enable_count == 0) {
 80acca4:	4b08      	ldr	r3, [pc, #32]	; (80accc8 <sensor_op_timer_disable+0x54>)
 80acca6:	881b      	ldrh	r3, [r3, #0]
 80acca8:	2b00      	cmp	r3, #0
 80accaa:	d106      	bne.n	80accba <sensor_op_timer_disable+0x46>
      HAL_TIM_Base_Stop_IT(htim);
 80accac:	6878      	ldr	r0, [r7, #4]
 80accae:	f007 f9ab 	bl	80b4008 <HAL_TIM_Base_Stop_IT>
 80accb2:	e002      	b.n	80accba <sensor_op_timer_disable+0x46>
    }
  } else {
    res = SENSOR_FAILED;
 80accb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80accb8:	60fb      	str	r3, [r7, #12]
  }
  return res;
 80accba:	68fb      	ldr	r3, [r7, #12]
}
 80accbc:	4618      	mov	r0, r3
 80accbe:	3710      	adds	r7, #16
 80accc0:	46bd      	mov	sp, r7
 80accc2:	bd80      	pop	{r7, pc}
 80accc4:	2001c2cc 	.word	0x2001c2cc
 80accc8:	20008460 	.word	0x20008460

080acccc <sensor_config>:

int sensor_config(config_event_t config_event)
{
 80acccc:	b084      	sub	sp, #16
 80accce:	b580      	push	{r7, lr}
 80accd0:	b0a4      	sub	sp, #144	; 0x90
 80accd2:	af00      	add	r7, sp, #0
 80accd4:	f107 0c98 	add.w	ip, r7, #152	; 0x98
 80accd8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  int res = SENSOR_SUCCESS;
 80accdc:	2300      	movs	r3, #0
 80accde:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  sensor_message_event_t sensor_msg_event;

  printf("config: %d, %d \r\n", config_event.config_type,
 80acce2:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 80acce6:	4619      	mov	r1, r3
         config_event.sensor_type);
 80acce8:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
  printf("config: %d, %d \r\n", config_event.config_type,
 80accec:	461a      	mov	r2, r3
 80accee:	48c4      	ldr	r0, [pc, #784]	; (80ad000 <sensor_config+0x334>)
 80accf0:	f013 fe40 	bl	80c0974 <iprintf>

  switch (config_event.config_type) {
 80accf4:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 80accf8:	2b09      	cmp	r3, #9
 80accfa:	f200 840b 	bhi.w	80ad514 <sensor_config+0x848>
 80accfe:	a201      	add	r2, pc, #4	; (adr r2, 80acd04 <sensor_config+0x38>)
 80acd00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80acd04:	080ad069 	.word	0x080ad069
 80acd08:	080acd8d 	.word	0x080acd8d
 80acd0c:	080ad305 	.word	0x080ad305
 80acd10:	080ad305 	.word	0x080ad305
 80acd14:	080ad4b1 	.word	0x080ad4b1
 80acd18:	080ad515 	.word	0x080ad515
 80acd1c:	080ad439 	.word	0x080ad439
 80acd20:	080ad515 	.word	0x080ad515
 80acd24:	080ad4b1 	.word	0x080ad4b1
 80acd28:	080acd2d 	.word	0x080acd2d
  case SENSOR_LED_MODE_CONFIG:
    if (config_event.sensor_type == SENSOR_TYPE_LED_HEAD
 80acd2c:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 80acd30:	2b04      	cmp	r3, #4
 80acd32:	d004      	beq.n	80acd3e <sensor_config+0x72>
        || config_event.sensor_type == SENSOR_TYPE_LED_REAR) {
 80acd34:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 80acd38:	2b09      	cmp	r3, #9
 80acd3a:	f040 83ed 	bne.w	80ad518 <sensor_config+0x84c>
      if (platform_init_parms != NULL) {
 80acd3e:	4bb1      	ldr	r3, [pc, #708]	; (80ad004 <sensor_config+0x338>)
 80acd40:	681b      	ldr	r3, [r3, #0]
 80acd42:	2b00      	cmp	r3, #0
 80acd44:	d020      	beq.n	80acd88 <sensor_config+0xbc>
        if (sensors[config_event.sensor_type] != NULL) {
 80acd46:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 80acd4a:	461a      	mov	r2, r3
 80acd4c:	4bae      	ldr	r3, [pc, #696]	; (80ad008 <sensor_config+0x33c>)
 80acd4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80acd52:	2b00      	cmp	r3, #0
 80acd54:	d018      	beq.n	80acd88 <sensor_config+0xbc>
          if (sensors[config_event.sensor_type]->init_completed) {
 80acd56:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 80acd5a:	461a      	mov	r2, r3
 80acd5c:	4baa      	ldr	r3, [pc, #680]	; (80ad008 <sensor_config+0x33c>)
 80acd5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80acd62:	7d1b      	ldrb	r3, [r3, #20]
 80acd64:	2b00      	cmp	r3, #0
 80acd66:	d00f      	beq.n	80acd88 <sensor_config+0xbc>
            res =
                sensors[config_event.sensor_type]->sensor_op_ptr[0].
 80acd68:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 80acd6c:	461a      	mov	r2, r3
 80acd6e:	4ba6      	ldr	r3, [pc, #664]	; (80ad008 <sensor_config+0x33c>)
 80acd70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80acd74:	699b      	ldr	r3, [r3, #24]
 80acd76:	691b      	ldr	r3, [r3, #16]
                config(config_event.config_type,
 80acd78:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
                sensors[config_event.sensor_type]->sensor_op_ptr[0].
 80acd7c:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 80acd80:	4610      	mov	r0, r2
 80acd82:	4798      	blx	r3
 80acd84:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
                       config_event.cfg_data.config_data_u8);
          }
        }
      }
      return SENSOR_SUCCESS;
 80acd88:	2300      	movs	r3, #0
 80acd8a:	e3d0      	b.n	80ad52e <sensor_config+0x862>
    }
    break;
  case SENSOR_ACTIVATE:
    if (config_event.sensor_type == SENSOR_TYPE_MAX) {
 80acd8c:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 80acd90:	2b0f      	cmp	r3, #15
 80acd92:	f040 80a1 	bne.w	80aced8 <sensor_config+0x20c>
      //default setting to run all sensor when start
      if (platform_init_parms != NULL) {
 80acd96:	4b9b      	ldr	r3, [pc, #620]	; (80ad004 <sensor_config+0x338>)
 80acd98:	681b      	ldr	r3, [r3, #0]
 80acd9a:	2b00      	cmp	r3, #0
 80acd9c:	f000 8098 	beq.w	80aced0 <sensor_config+0x204>
        for (int i = 0; i < SENSOR_TYPE_MAX; i++) {
 80acda0:	2300      	movs	r3, #0
 80acda2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80acda6:	e07d      	b.n	80acea4 <sensor_config+0x1d8>
          if (sensors[i] != NULL) {
 80acda8:	4a97      	ldr	r2, [pc, #604]	; (80ad008 <sensor_config+0x33c>)
 80acdaa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80acdae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80acdb2:	2b00      	cmp	r3, #0
 80acdb4:	d071      	beq.n	80ace9a <sensor_config+0x1ce>
            if (!sensors[i]->init_completed) {
 80acdb6:	4a94      	ldr	r2, [pc, #592]	; (80ad008 <sensor_config+0x33c>)
 80acdb8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80acdbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80acdc0:	7d1b      	ldrb	r3, [r3, #20]
 80acdc2:	f083 0301 	eor.w	r3, r3, #1
 80acdc6:	b2db      	uxtb	r3, r3
 80acdc8:	2b00      	cmp	r3, #0
 80acdca:	d163      	bne.n	80ace94 <sensor_config+0x1c8>
              continue;
            }
            if (sensors[i]->sensor_op_ptr[0].activate != NULL) {
 80acdcc:	4a8e      	ldr	r2, [pc, #568]	; (80ad008 <sensor_config+0x33c>)
 80acdce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80acdd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80acdd6:	699b      	ldr	r3, [r3, #24]
 80acdd8:	689b      	ldr	r3, [r3, #8]
 80acdda:	2b00      	cmp	r3, #0
 80acddc:	d05d      	beq.n	80ace9a <sensor_config+0x1ce>
              if (sensors[i]->activate_count == 0) {
 80acdde:	4a8a      	ldr	r2, [pc, #552]	; (80ad008 <sensor_config+0x33c>)
 80acde0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80acde4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80acde8:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80acdec:	2b00      	cmp	r3, #0
 80acdee:	d137      	bne.n	80ace60 <sensor_config+0x194>
                res = sensors[i]->sensor_op_ptr[0].activate(true);
 80acdf0:	4a85      	ldr	r2, [pc, #532]	; (80ad008 <sensor_config+0x33c>)
 80acdf2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80acdf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80acdfa:	699b      	ldr	r3, [r3, #24]
 80acdfc:	689b      	ldr	r3, [r3, #8]
 80acdfe:	2001      	movs	r0, #1
 80ace00:	4798      	blx	r3
 80ace02:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
                if (res == SENSOR_SUCCESS) {
 80ace06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80ace0a:	2b00      	cmp	r3, #0
 80ace0c:	d144      	bne.n	80ace98 <sensor_config+0x1cc>
                  sensors[i]->activate_count++;
 80ace0e:	4a7e      	ldr	r2, [pc, #504]	; (80ad008 <sensor_config+0x33c>)
 80ace10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80ace14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80ace18:	f993 2005 	ldrsb.w	r2, [r3, #5]
 80ace1c:	b2d2      	uxtb	r2, r2
 80ace1e:	3201      	adds	r2, #1
 80ace20:	b2d2      	uxtb	r2, r2
 80ace22:	b252      	sxtb	r2, r2
 80ace24:	715a      	strb	r2, [r3, #5]
                  sensorEnabledBitMask = sensorEnabledBitMask | (1 << i);
 80ace26:	2201      	movs	r2, #1
 80ace28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80ace2c:	fa02 f303 	lsl.w	r3, r2, r3
 80ace30:	b21a      	sxth	r2, r3
 80ace32:	4b76      	ldr	r3, [pc, #472]	; (80ad00c <sensor_config+0x340>)
 80ace34:	881b      	ldrh	r3, [r3, #0]
 80ace36:	b21b      	sxth	r3, r3
 80ace38:	4313      	orrs	r3, r2
 80ace3a:	b21b      	sxth	r3, r3
 80ace3c:	b29a      	uxth	r2, r3
 80ace3e:	4b73      	ldr	r3, [pc, #460]	; (80ad00c <sensor_config+0x340>)
 80ace40:	801a      	strh	r2, [r3, #0]
                  sensors[i]->activate = true;
 80ace42:	4a71      	ldr	r2, [pc, #452]	; (80ad008 <sensor_config+0x33c>)
 80ace44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80ace48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80ace4c:	2201      	movs	r2, #1
 80ace4e:	711a      	strb	r2, [r3, #4]
                  sensors[i]->sample_rate = DEFAULE_SAMPLE_RATE_MS;
 80ace50:	4a6d      	ldr	r2, [pc, #436]	; (80ad008 <sensor_config+0x33c>)
 80ace52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80ace56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80ace5a:	2214      	movs	r2, #20
 80ace5c:	80da      	strh	r2, [r3, #6]
 80ace5e:	e01c      	b.n	80ace9a <sensor_config+0x1ce>
                } else {
                  //continue enable flow
                  continue;
                }
              } else {
                sensors[i]->activate_count++;
 80ace60:	4a69      	ldr	r2, [pc, #420]	; (80ad008 <sensor_config+0x33c>)
 80ace62:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80ace66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80ace6a:	f993 2005 	ldrsb.w	r2, [r3, #5]
 80ace6e:	b2d2      	uxtb	r2, r2
 80ace70:	3201      	adds	r2, #1
 80ace72:	b2d2      	uxtb	r2, r2
 80ace74:	b252      	sxtb	r2, r2
 80ace76:	715a      	strb	r2, [r3, #5]
                printf("this sensor %d is already enable %d!\r\n", i,
                       sensors[i]->activate_count);
 80ace78:	4a63      	ldr	r2, [pc, #396]	; (80ad008 <sensor_config+0x33c>)
 80ace7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80ace7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80ace82:	f993 3005 	ldrsb.w	r3, [r3, #5]
                printf("this sensor %d is already enable %d!\r\n", i,
 80ace86:	461a      	mov	r2, r3
 80ace88:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80ace8c:	4860      	ldr	r0, [pc, #384]	; (80ad010 <sensor_config+0x344>)
 80ace8e:	f013 fd71 	bl	80c0974 <iprintf>
 80ace92:	e002      	b.n	80ace9a <sensor_config+0x1ce>
              continue;
 80ace94:	bf00      	nop
 80ace96:	e000      	b.n	80ace9a <sensor_config+0x1ce>
                  continue;
 80ace98:	bf00      	nop
        for (int i = 0; i < SENSOR_TYPE_MAX; i++) {
 80ace9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80ace9e:	3301      	adds	r3, #1
 80acea0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80acea4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80acea8:	2b0e      	cmp	r3, #14
 80aceaa:	f77f af7d 	ble.w	80acda8 <sensor_config+0xdc>
            } else {
              //assert here
            }
          }
        }
        printf("starting timer!!! \r\n");
 80aceae:	4859      	ldr	r0, [pc, #356]	; (80ad014 <sensor_config+0x348>)
 80aceb0:	f013 fdfc 	bl	80c0aac <puts>
        sensor_msg_event.message_event_type = SENSOR_ACTIVATE_COMPLETE_EVENT;
 80aceb4:	230b      	movs	r3, #11
 80aceb6:	f887 3020 	strb.w	r3, [r7, #32]
        //notifiy smgr that activate is completed
        osMessageQueuePut(platform_init_parms->SensorMessageQHandle,
 80aceba:	4b52      	ldr	r3, [pc, #328]	; (80ad004 <sensor_config+0x338>)
 80acebc:	681b      	ldr	r3, [r3, #0]
 80acebe:	f8d3 00f4 	ldr.w	r0, [r3, #244]	; 0xf4
 80acec2:	f107 0120 	add.w	r1, r7, #32
 80acec6:	2300      	movs	r3, #0
 80acec8:	2200      	movs	r2, #0
 80aceca:	f009 fa9b 	bl	80b6404 <osMessageQueuePut>
        printf("this sensor %d is already enable %d!\r\n",
               config_event.sensor_type,
               sensors[config_event.sensor_type]->activate_count);
      }
    }
    break;
 80acece:	e325      	b.n	80ad51c <sensor_config+0x850>
        printf("platform_init_parms == NULL!\r\n");
 80aced0:	4851      	ldr	r0, [pc, #324]	; (80ad018 <sensor_config+0x34c>)
 80aced2:	f013 fdeb 	bl	80c0aac <puts>
    break;
 80aced6:	e321      	b.n	80ad51c <sensor_config+0x850>
      if (!sensor_avaiable_check(config_event.sensor_type)) {
 80aced8:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 80acedc:	4618      	mov	r0, r3
 80acede:	f7ff fd4d 	bl	80ac97c <sensor_avaiable_check>
 80acee2:	4603      	mov	r3, r0
 80acee4:	f083 0301 	eor.w	r3, r3, #1
 80acee8:	b2db      	uxtb	r3, r3
 80aceea:	2b00      	cmp	r3, #0
 80aceec:	d002      	beq.n	80acef4 <sensor_config+0x228>
        return SENSOR_FAILED;
 80aceee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80acef2:	e31c      	b.n	80ad52e <sensor_config+0x862>
      if (platform_init_parms == NULL) {
 80acef4:	4b43      	ldr	r3, [pc, #268]	; (80ad004 <sensor_config+0x338>)
 80acef6:	681b      	ldr	r3, [r3, #0]
 80acef8:	2b00      	cmp	r3, #0
 80acefa:	d102      	bne.n	80acf02 <sensor_config+0x236>
        return SENSOR_FAILED;
 80acefc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80acf00:	e315      	b.n	80ad52e <sensor_config+0x862>
      bool is_first_user = false;
 80acf02:	2300      	movs	r3, #0
 80acf04:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
      if (sensors[config_event.sensor_type]->activate_count == 0) {
 80acf08:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 80acf0c:	461a      	mov	r2, r3
 80acf0e:	4b3e      	ldr	r3, [pc, #248]	; (80ad008 <sensor_config+0x33c>)
 80acf10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80acf14:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80acf18:	2b00      	cmp	r3, #0
 80acf1a:	f040 8088 	bne.w	80ad02e <sensor_config+0x362>
        if (!sensors[config_event.sensor_type]->activate) {
 80acf1e:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 80acf22:	461a      	mov	r2, r3
 80acf24:	4b38      	ldr	r3, [pc, #224]	; (80ad008 <sensor_config+0x33c>)
 80acf26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80acf2a:	791b      	ldrb	r3, [r3, #4]
 80acf2c:	f083 0301 	eor.w	r3, r3, #1
 80acf30:	b2db      	uxtb	r3, r3
 80acf32:	2b00      	cmp	r3, #0
 80acf34:	f000 82f2 	beq.w	80ad51c <sensor_config+0x850>
          if (sensors[config_event.sensor_type]->sensor_op_ptr[0].activate
 80acf38:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 80acf3c:	461a      	mov	r2, r3
 80acf3e:	4b32      	ldr	r3, [pc, #200]	; (80ad008 <sensor_config+0x33c>)
 80acf40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80acf44:	699b      	ldr	r3, [r3, #24]
 80acf46:	689b      	ldr	r3, [r3, #8]
 80acf48:	2b00      	cmp	r3, #0
 80acf4a:	f000 82e7 	beq.w	80ad51c <sensor_config+0x850>
                sensors[config_event.sensor_type]->sensor_op_ptr[0].
 80acf4e:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 80acf52:	461a      	mov	r2, r3
 80acf54:	4b2c      	ldr	r3, [pc, #176]	; (80ad008 <sensor_config+0x33c>)
 80acf56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80acf5a:	699b      	ldr	r3, [r3, #24]
 80acf5c:	689b      	ldr	r3, [r3, #8]
 80acf5e:	2001      	movs	r0, #1
 80acf60:	4798      	blx	r3
 80acf62:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
            if (res == SENSOR_SUCCESS) {
 80acf66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80acf6a:	2b00      	cmp	r3, #0
 80acf6c:	d158      	bne.n	80ad020 <sensor_config+0x354>
              if (sensorEnabledBitMask == 0x0000) {
 80acf6e:	4b27      	ldr	r3, [pc, #156]	; (80ad00c <sensor_config+0x340>)
 80acf70:	881b      	ldrh	r3, [r3, #0]
 80acf72:	2b00      	cmp	r3, #0
 80acf74:	d102      	bne.n	80acf7c <sensor_config+0x2b0>
                is_first_user = true;
 80acf76:	2301      	movs	r3, #1
 80acf78:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
              sensors[config_event.sensor_type]->activate_count++;
 80acf7c:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 80acf80:	461a      	mov	r2, r3
 80acf82:	4b21      	ldr	r3, [pc, #132]	; (80ad008 <sensor_config+0x33c>)
 80acf84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80acf88:	f993 2005 	ldrsb.w	r2, [r3, #5]
 80acf8c:	b2d2      	uxtb	r2, r2
 80acf8e:	3201      	adds	r2, #1
 80acf90:	b2d2      	uxtb	r2, r2
 80acf92:	b252      	sxtb	r2, r2
 80acf94:	715a      	strb	r2, [r3, #5]
                  sensorEnabledBitMask | (1 << config_event.sensor_type);
 80acf96:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 80acf9a:	461a      	mov	r2, r3
 80acf9c:	2301      	movs	r3, #1
 80acf9e:	4093      	lsls	r3, r2
 80acfa0:	b21a      	sxth	r2, r3
 80acfa2:	4b1a      	ldr	r3, [pc, #104]	; (80ad00c <sensor_config+0x340>)
 80acfa4:	881b      	ldrh	r3, [r3, #0]
 80acfa6:	b21b      	sxth	r3, r3
 80acfa8:	4313      	orrs	r3, r2
 80acfaa:	b21b      	sxth	r3, r3
 80acfac:	b29a      	uxth	r2, r3
              sensorEnabledBitMask =
 80acfae:	4b17      	ldr	r3, [pc, #92]	; (80ad00c <sensor_config+0x340>)
 80acfb0:	801a      	strh	r2, [r3, #0]
              sensors[config_event.sensor_type]->activate = true;
 80acfb2:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 80acfb6:	461a      	mov	r2, r3
 80acfb8:	4b13      	ldr	r3, [pc, #76]	; (80ad008 <sensor_config+0x33c>)
 80acfba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80acfbe:	2201      	movs	r2, #1
 80acfc0:	711a      	strb	r2, [r3, #4]
              sensors[config_event.sensor_type]->sample_rate =
 80acfc2:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 80acfc6:	461a      	mov	r2, r3
 80acfc8:	4b0f      	ldr	r3, [pc, #60]	; (80ad008 <sensor_config+0x33c>)
 80acfca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80acfce:	2214      	movs	r2, #20
 80acfd0:	80da      	strh	r2, [r3, #6]
              if (is_first_user) {
 80acfd2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80acfd6:	2b00      	cmp	r3, #0
 80acfd8:	f000 82a0 	beq.w	80ad51c <sensor_config+0x850>
                printf("first user starting timer!!! \r\n");
 80acfdc:	480f      	ldr	r0, [pc, #60]	; (80ad01c <sensor_config+0x350>)
 80acfde:	f013 fd65 	bl	80c0aac <puts>
                sensor_msg_event.message_event_type =
 80acfe2:	230b      	movs	r3, #11
 80acfe4:	f887 3020 	strb.w	r3, [r7, #32]
                osMessageQueuePut(platform_init_parms->SensorMessageQHandle,
 80acfe8:	4b06      	ldr	r3, [pc, #24]	; (80ad004 <sensor_config+0x338>)
 80acfea:	681b      	ldr	r3, [r3, #0]
 80acfec:	f8d3 00f4 	ldr.w	r0, [r3, #244]	; 0xf4
 80acff0:	f107 0120 	add.w	r1, r7, #32
 80acff4:	2300      	movs	r3, #0
 80acff6:	2200      	movs	r2, #0
 80acff8:	f009 fa04 	bl	80b6404 <osMessageQueuePut>
    break;
 80acffc:	e28e      	b.n	80ad51c <sensor_config+0x850>
 80acffe:	bf00      	nop
 80ad000:	080c5e68 	.word	0x080c5e68
 80ad004:	2000845c 	.word	0x2000845c
 80ad008:	2000841c 	.word	0x2000841c
 80ad00c:	20008458 	.word	0x20008458
 80ad010:	080c5e7c 	.word	0x080c5e7c
 80ad014:	080c5ea4 	.word	0x080c5ea4
 80ad018:	080c5eb8 	.word	0x080c5eb8
 80ad01c:	080c5ed8 	.word	0x080c5ed8
              printf("sensor %d enable failed \r\n", config_event.sensor_type);
 80ad020:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 80ad024:	4619      	mov	r1, r3
 80ad026:	48c2      	ldr	r0, [pc, #776]	; (80ad330 <sensor_config+0x664>)
 80ad028:	f013 fca4 	bl	80c0974 <iprintf>
              break;
 80ad02c:	e27d      	b.n	80ad52a <sensor_config+0x85e>
        sensors[config_event.sensor_type]->activate_count++;
 80ad02e:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 80ad032:	461a      	mov	r2, r3
 80ad034:	4bbf      	ldr	r3, [pc, #764]	; (80ad334 <sensor_config+0x668>)
 80ad036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80ad03a:	f993 2005 	ldrsb.w	r2, [r3, #5]
 80ad03e:	b2d2      	uxtb	r2, r2
 80ad040:	3201      	adds	r2, #1
 80ad042:	b2d2      	uxtb	r2, r2
 80ad044:	b252      	sxtb	r2, r2
 80ad046:	715a      	strb	r2, [r3, #5]
               config_event.sensor_type,
 80ad048:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
        printf("this sensor %d is already enable %d!\r\n",
 80ad04c:	4619      	mov	r1, r3
               sensors[config_event.sensor_type]->activate_count);
 80ad04e:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 80ad052:	461a      	mov	r2, r3
 80ad054:	4bb7      	ldr	r3, [pc, #732]	; (80ad334 <sensor_config+0x668>)
 80ad056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80ad05a:	f993 3005 	ldrsb.w	r3, [r3, #5]
        printf("this sensor %d is already enable %d!\r\n",
 80ad05e:	461a      	mov	r2, r3
 80ad060:	48b5      	ldr	r0, [pc, #724]	; (80ad338 <sensor_config+0x66c>)
 80ad062:	f013 fc87 	bl	80c0974 <iprintf>
    break;
 80ad066:	e259      	b.n	80ad51c <sensor_config+0x850>
  case SENSOR_DEACTIVATE:
    if (config_event.sensor_type == SENSOR_TYPE_MAX) {
 80ad068:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 80ad06c:	2b0f      	cmp	r3, #15
 80ad06e:	f040 809d 	bne.w	80ad1ac <sensor_config+0x4e0>
      //default setting to run all sensor when receive special sensor type
      if (platform_init_parms != NULL) {
 80ad072:	4bb2      	ldr	r3, [pc, #712]	; (80ad33c <sensor_config+0x670>)
 80ad074:	681b      	ldr	r3, [r3, #0]
 80ad076:	2b00      	cmp	r3, #0
 80ad078:	f000 8252 	beq.w	80ad520 <sensor_config+0x854>
        for (int i = 0; i < SENSOR_TYPE_MAX; i++) {
 80ad07c:	2300      	movs	r3, #0
 80ad07e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80ad082:	e080      	b.n	80ad186 <sensor_config+0x4ba>
          if (sensors[i] != NULL) {
 80ad084:	4aab      	ldr	r2, [pc, #684]	; (80ad334 <sensor_config+0x668>)
 80ad086:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80ad08a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80ad08e:	2b00      	cmp	r3, #0
 80ad090:	d074      	beq.n	80ad17c <sensor_config+0x4b0>
            if (!sensors[i]->init_completed) {
 80ad092:	4aa8      	ldr	r2, [pc, #672]	; (80ad334 <sensor_config+0x668>)
 80ad094:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80ad098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80ad09c:	7d1b      	ldrb	r3, [r3, #20]
 80ad09e:	f083 0301 	eor.w	r3, r3, #1
 80ad0a2:	b2db      	uxtb	r3, r3
 80ad0a4:	2b00      	cmp	r3, #0
 80ad0a6:	d168      	bne.n	80ad17a <sensor_config+0x4ae>
              continue;
            }
            if (sensors[i]->sensor_op_ptr[0].activate != NULL) {
 80ad0a8:	4aa2      	ldr	r2, [pc, #648]	; (80ad334 <sensor_config+0x668>)
 80ad0aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80ad0ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80ad0b2:	699b      	ldr	r3, [r3, #24]
 80ad0b4:	689b      	ldr	r3, [r3, #8]
 80ad0b6:	2b00      	cmp	r3, #0
 80ad0b8:	d060      	beq.n	80ad17c <sensor_config+0x4b0>
              sensors[i]->activate_count--;
 80ad0ba:	4a9e      	ldr	r2, [pc, #632]	; (80ad334 <sensor_config+0x668>)
 80ad0bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80ad0c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80ad0c4:	f993 2005 	ldrsb.w	r2, [r3, #5]
 80ad0c8:	b2d2      	uxtb	r2, r2
 80ad0ca:	3a01      	subs	r2, #1
 80ad0cc:	b2d2      	uxtb	r2, r2
 80ad0ce:	b252      	sxtb	r2, r2
 80ad0d0:	715a      	strb	r2, [r3, #5]
              if (sensors[i]->activate_count < 0) {
 80ad0d2:	4a98      	ldr	r2, [pc, #608]	; (80ad334 <sensor_config+0x668>)
 80ad0d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80ad0d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80ad0dc:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80ad0e0:	2b00      	cmp	r3, #0
 80ad0e2:	da0c      	bge.n	80ad0fe <sensor_config+0x432>
                printf("sensor %d is already disabled!\r\n", i);
 80ad0e4:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80ad0e8:	4895      	ldr	r0, [pc, #596]	; (80ad340 <sensor_config+0x674>)
 80ad0ea:	f013 fc43 	bl	80c0974 <iprintf>
                sensors[i]->activate_count = 0;
 80ad0ee:	4a91      	ldr	r2, [pc, #580]	; (80ad334 <sensor_config+0x668>)
 80ad0f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80ad0f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80ad0f8:	2200      	movs	r2, #0
 80ad0fa:	715a      	strb	r2, [r3, #5]
                continue;
 80ad0fc:	e03e      	b.n	80ad17c <sensor_config+0x4b0>
              }
              if (sensors[i]->activate_count == 0) {
 80ad0fe:	4a8d      	ldr	r2, [pc, #564]	; (80ad334 <sensor_config+0x668>)
 80ad100:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80ad104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80ad108:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80ad10c:	2b00      	cmp	r3, #0
 80ad10e:	d135      	bne.n	80ad17c <sensor_config+0x4b0>
                res = sensors[i]->sensor_op_ptr[0].activate(false);
 80ad110:	4a88      	ldr	r2, [pc, #544]	; (80ad334 <sensor_config+0x668>)
 80ad112:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80ad116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80ad11a:	699b      	ldr	r3, [r3, #24]
 80ad11c:	689b      	ldr	r3, [r3, #8]
 80ad11e:	2000      	movs	r0, #0
 80ad120:	4798      	blx	r3
 80ad122:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
                if (res == SENSOR_SUCCESS) {
 80ad126:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80ad12a:	2b00      	cmp	r3, #0
 80ad12c:	d11f      	bne.n	80ad16e <sensor_config+0x4a2>
                  sensorEnabledBitMask = sensorEnabledBitMask & (~(1 << i));
 80ad12e:	2201      	movs	r2, #1
 80ad130:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80ad134:	fa02 f303 	lsl.w	r3, r2, r3
 80ad138:	b21b      	sxth	r3, r3
 80ad13a:	43db      	mvns	r3, r3
 80ad13c:	b21a      	sxth	r2, r3
 80ad13e:	4b81      	ldr	r3, [pc, #516]	; (80ad344 <sensor_config+0x678>)
 80ad140:	881b      	ldrh	r3, [r3, #0]
 80ad142:	b21b      	sxth	r3, r3
 80ad144:	4013      	ands	r3, r2
 80ad146:	b21b      	sxth	r3, r3
 80ad148:	b29a      	uxth	r2, r3
 80ad14a:	4b7e      	ldr	r3, [pc, #504]	; (80ad344 <sensor_config+0x678>)
 80ad14c:	801a      	strh	r2, [r3, #0]
                  sensors[i]->activate = false;
 80ad14e:	4a79      	ldr	r2, [pc, #484]	; (80ad334 <sensor_config+0x668>)
 80ad150:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80ad154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80ad158:	2200      	movs	r2, #0
 80ad15a:	711a      	strb	r2, [r3, #4]
                  sensors[i]->sample_rate = 0xFFFF;
 80ad15c:	4a75      	ldr	r2, [pc, #468]	; (80ad334 <sensor_config+0x668>)
 80ad15e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80ad162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80ad166:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80ad16a:	80da      	strh	r2, [r3, #6]
 80ad16c:	e006      	b.n	80ad17c <sensor_config+0x4b0>
                } else {
                  printf("disable sensor %d failed\r\n", i);
 80ad16e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80ad172:	4875      	ldr	r0, [pc, #468]	; (80ad348 <sensor_config+0x67c>)
 80ad174:	f013 fbfe 	bl	80c0974 <iprintf>
                  continue;
 80ad178:	e000      	b.n	80ad17c <sensor_config+0x4b0>
              continue;
 80ad17a:	bf00      	nop
        for (int i = 0; i < SENSOR_TYPE_MAX; i++) {
 80ad17c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80ad180:	3301      	adds	r3, #1
 80ad182:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80ad186:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80ad18a:	2b0e      	cmp	r3, #14
 80ad18c:	f77f af7a 	ble.w	80ad084 <sensor_config+0x3b8>
            } else {
              //assert here
            }
          }
        }
        sensor_msg_event.message_event_type = SENSOR_DEACTIVATE_COMPLETE_EVENT;
 80ad190:	230c      	movs	r3, #12
 80ad192:	f887 3020 	strb.w	r3, [r7, #32]
        //notifiy smgr that deactivate is completed
        osMessageQueuePut(platform_init_parms->SensorMessageQHandle,
 80ad196:	4b69      	ldr	r3, [pc, #420]	; (80ad33c <sensor_config+0x670>)
 80ad198:	681b      	ldr	r3, [r3, #0]
 80ad19a:	f8d3 00f4 	ldr.w	r0, [r3, #244]	; 0xf4
 80ad19e:	f107 0120 	add.w	r1, r7, #32
 80ad1a2:	2300      	movs	r3, #0
 80ad1a4:	2200      	movs	r2, #0
 80ad1a6:	f009 f92d 	bl	80b6404 <osMessageQueuePut>
        } else {
          //assert here since sensors should not deactivated when activate count is 0
        }
      }
    }
    break;
 80ad1aa:	e1b9      	b.n	80ad520 <sensor_config+0x854>
      if (!sensor_avaiable_check(config_event.sensor_type)) {
 80ad1ac:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 80ad1b0:	4618      	mov	r0, r3
 80ad1b2:	f7ff fbe3 	bl	80ac97c <sensor_avaiable_check>
 80ad1b6:	4603      	mov	r3, r0
 80ad1b8:	f083 0301 	eor.w	r3, r3, #1
 80ad1bc:	b2db      	uxtb	r3, r3
 80ad1be:	2b00      	cmp	r3, #0
 80ad1c0:	d002      	beq.n	80ad1c8 <sensor_config+0x4fc>
        return SENSOR_FAILED;
 80ad1c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80ad1c6:	e1b2      	b.n	80ad52e <sensor_config+0x862>
      if (platform_init_parms == NULL) {
 80ad1c8:	4b5c      	ldr	r3, [pc, #368]	; (80ad33c <sensor_config+0x670>)
 80ad1ca:	681b      	ldr	r3, [r3, #0]
 80ad1cc:	2b00      	cmp	r3, #0
 80ad1ce:	d102      	bne.n	80ad1d6 <sensor_config+0x50a>
        return SENSOR_FAILED;
 80ad1d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80ad1d4:	e1ab      	b.n	80ad52e <sensor_config+0x862>
      sensors[config_event.sensor_type]->activate_count--;
 80ad1d6:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 80ad1da:	461a      	mov	r2, r3
 80ad1dc:	4b55      	ldr	r3, [pc, #340]	; (80ad334 <sensor_config+0x668>)
 80ad1de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80ad1e2:	f993 2005 	ldrsb.w	r2, [r3, #5]
 80ad1e6:	b2d2      	uxtb	r2, r2
 80ad1e8:	3a01      	subs	r2, #1
 80ad1ea:	b2d2      	uxtb	r2, r2
 80ad1ec:	b252      	sxtb	r2, r2
 80ad1ee:	715a      	strb	r2, [r3, #5]
      if (sensors[config_event.sensor_type]->activate_count < 0) {
 80ad1f0:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 80ad1f4:	461a      	mov	r2, r3
 80ad1f6:	4b4f      	ldr	r3, [pc, #316]	; (80ad334 <sensor_config+0x668>)
 80ad1f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80ad1fc:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80ad200:	2b00      	cmp	r3, #0
 80ad202:	da0f      	bge.n	80ad224 <sensor_config+0x558>
        printf("sensor %d is already disabled!\r\n", config_event.sensor_type);
 80ad204:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 80ad208:	4619      	mov	r1, r3
 80ad20a:	484d      	ldr	r0, [pc, #308]	; (80ad340 <sensor_config+0x674>)
 80ad20c:	f013 fbb2 	bl	80c0974 <iprintf>
        sensors[config_event.sensor_type]->activate_count = 0;
 80ad210:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 80ad214:	461a      	mov	r2, r3
 80ad216:	4b47      	ldr	r3, [pc, #284]	; (80ad334 <sensor_config+0x668>)
 80ad218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80ad21c:	2200      	movs	r2, #0
 80ad21e:	715a      	strb	r2, [r3, #5]
        return SENSOR_SUCCESS;
 80ad220:	2300      	movs	r3, #0
 80ad222:	e184      	b.n	80ad52e <sensor_config+0x862>
      if (sensors[config_event.sensor_type]->activate_count == 0) {
 80ad224:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 80ad228:	461a      	mov	r2, r3
 80ad22a:	4b42      	ldr	r3, [pc, #264]	; (80ad334 <sensor_config+0x668>)
 80ad22c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80ad230:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80ad234:	2b00      	cmp	r3, #0
 80ad236:	f040 8173 	bne.w	80ad520 <sensor_config+0x854>
        if (sensors[config_event.sensor_type]->activate) {
 80ad23a:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 80ad23e:	461a      	mov	r2, r3
 80ad240:	4b3c      	ldr	r3, [pc, #240]	; (80ad334 <sensor_config+0x668>)
 80ad242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80ad246:	791b      	ldrb	r3, [r3, #4]
 80ad248:	2b00      	cmp	r3, #0
 80ad24a:	f000 8169 	beq.w	80ad520 <sensor_config+0x854>
          if (sensors[config_event.sensor_type]->sensor_op_ptr[0].activate
 80ad24e:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 80ad252:	461a      	mov	r2, r3
 80ad254:	4b37      	ldr	r3, [pc, #220]	; (80ad334 <sensor_config+0x668>)
 80ad256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80ad25a:	699b      	ldr	r3, [r3, #24]
 80ad25c:	689b      	ldr	r3, [r3, #8]
 80ad25e:	2b00      	cmp	r3, #0
 80ad260:	d038      	beq.n	80ad2d4 <sensor_config+0x608>
                sensors[config_event.sensor_type]->sensor_op_ptr[0].
 80ad262:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 80ad266:	461a      	mov	r2, r3
 80ad268:	4b32      	ldr	r3, [pc, #200]	; (80ad334 <sensor_config+0x668>)
 80ad26a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80ad26e:	699b      	ldr	r3, [r3, #24]
 80ad270:	689b      	ldr	r3, [r3, #8]
 80ad272:	2000      	movs	r0, #0
 80ad274:	4798      	blx	r3
 80ad276:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
            if (res == SENSOR_SUCCESS) {
 80ad27a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80ad27e:	2b00      	cmp	r3, #0
 80ad280:	d121      	bne.n	80ad2c6 <sensor_config+0x5fa>
                  sensorEnabledBitMask & (~(1 << config_event.sensor_type));
 80ad282:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 80ad286:	461a      	mov	r2, r3
 80ad288:	2301      	movs	r3, #1
 80ad28a:	4093      	lsls	r3, r2
 80ad28c:	b21b      	sxth	r3, r3
 80ad28e:	43db      	mvns	r3, r3
 80ad290:	b21a      	sxth	r2, r3
 80ad292:	4b2c      	ldr	r3, [pc, #176]	; (80ad344 <sensor_config+0x678>)
 80ad294:	881b      	ldrh	r3, [r3, #0]
 80ad296:	b21b      	sxth	r3, r3
 80ad298:	4013      	ands	r3, r2
 80ad29a:	b21b      	sxth	r3, r3
 80ad29c:	b29a      	uxth	r2, r3
              sensorEnabledBitMask =
 80ad29e:	4b29      	ldr	r3, [pc, #164]	; (80ad344 <sensor_config+0x678>)
 80ad2a0:	801a      	strh	r2, [r3, #0]
              sensors[config_event.sensor_type]->activate = false;
 80ad2a2:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 80ad2a6:	461a      	mov	r2, r3
 80ad2a8:	4b22      	ldr	r3, [pc, #136]	; (80ad334 <sensor_config+0x668>)
 80ad2aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80ad2ae:	2200      	movs	r2, #0
 80ad2b0:	711a      	strb	r2, [r3, #4]
              sensors[config_event.sensor_type]->sample_rate = 0xFFFF;
 80ad2b2:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 80ad2b6:	461a      	mov	r2, r3
 80ad2b8:	4b1e      	ldr	r3, [pc, #120]	; (80ad334 <sensor_config+0x668>)
 80ad2ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80ad2be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80ad2c2:	80da      	strh	r2, [r3, #6]
 80ad2c4:	e006      	b.n	80ad2d4 <sensor_config+0x608>
              printf("sensor %d disable failed\r\n", config_event.sensor_type);
 80ad2c6:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 80ad2ca:	4619      	mov	r1, r3
 80ad2cc:	481f      	ldr	r0, [pc, #124]	; (80ad34c <sensor_config+0x680>)
 80ad2ce:	f013 fb51 	bl	80c0974 <iprintf>
              break;
 80ad2d2:	e12a      	b.n	80ad52a <sensor_config+0x85e>
          if (sensorEnabledBitMask == 0x0000) {
 80ad2d4:	4b1b      	ldr	r3, [pc, #108]	; (80ad344 <sensor_config+0x678>)
 80ad2d6:	881b      	ldrh	r3, [r3, #0]
 80ad2d8:	2b00      	cmp	r3, #0
 80ad2da:	f040 8121 	bne.w	80ad520 <sensor_config+0x854>
            if (platform_init_parms != NULL) {
 80ad2de:	4b17      	ldr	r3, [pc, #92]	; (80ad33c <sensor_config+0x670>)
 80ad2e0:	681b      	ldr	r3, [r3, #0]
 80ad2e2:	2b00      	cmp	r3, #0
 80ad2e4:	f000 811c 	beq.w	80ad520 <sensor_config+0x854>
              sensor_msg_event.message_event_type =
 80ad2e8:	230c      	movs	r3, #12
 80ad2ea:	f887 3020 	strb.w	r3, [r7, #32]
              osMessageQueuePut(platform_init_parms->SensorMessageQHandle,
 80ad2ee:	4b13      	ldr	r3, [pc, #76]	; (80ad33c <sensor_config+0x670>)
 80ad2f0:	681b      	ldr	r3, [r3, #0]
 80ad2f2:	f8d3 00f4 	ldr.w	r0, [r3, #244]	; 0xf4
 80ad2f6:	f107 0120 	add.w	r1, r7, #32
 80ad2fa:	2300      	movs	r3, #0
 80ad2fc:	2200      	movs	r2, #0
 80ad2fe:	f009 f881 	bl	80b6404 <osMessageQueuePut>
    break;
 80ad302:	e10d      	b.n	80ad520 <sensor_config+0x854>
  case SENSOR_CONFIG_SELFTEST:
  case SENSOR_CONFIG_CALIBRATION:
    if (config_event.sensor_type == SENSOR_TYPE_MAX) {
 80ad304:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 80ad308:	2b0f      	cmp	r3, #15
 80ad30a:	d103      	bne.n	80ad314 <sensor_config+0x648>
      //do not support All type calibration
      printf("selftest is not supporting SENSOR_TYPE_MAX \r\n");
 80ad30c:	4810      	ldr	r0, [pc, #64]	; (80ad350 <sensor_config+0x684>)
 80ad30e:	f013 fbcd 	bl	80c0aac <puts>
          printf("config ptr is NULL!\r\n");
          break;
        }
      }
    }
    break;
 80ad312:	e10a      	b.n	80ad52a <sensor_config+0x85e>
      if (!sensor_avaiable_check(config_event.sensor_type)) {
 80ad314:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 80ad318:	4618      	mov	r0, r3
 80ad31a:	f7ff fb2f 	bl	80ac97c <sensor_avaiable_check>
 80ad31e:	4603      	mov	r3, r0
 80ad320:	f083 0301 	eor.w	r3, r3, #1
 80ad324:	b2db      	uxtb	r3, r3
 80ad326:	2b00      	cmp	r3, #0
 80ad328:	d014      	beq.n	80ad354 <sensor_config+0x688>
        return SENSOR_FAILED;
 80ad32a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80ad32e:	e0fe      	b.n	80ad52e <sensor_config+0x862>
 80ad330:	080c5ef8 	.word	0x080c5ef8
 80ad334:	2000841c 	.word	0x2000841c
 80ad338:	080c5e7c 	.word	0x080c5e7c
 80ad33c:	2000845c 	.word	0x2000845c
 80ad340:	080c5f14 	.word	0x080c5f14
 80ad344:	20008458 	.word	0x20008458
 80ad348:	080c5f38 	.word	0x080c5f38
 80ad34c:	080c5f54 	.word	0x080c5f54
 80ad350:	080c5f70 	.word	0x080c5f70
      if (platform_init_parms == NULL) {
 80ad354:	4b79      	ldr	r3, [pc, #484]	; (80ad53c <sensor_config+0x870>)
 80ad356:	681b      	ldr	r3, [r3, #0]
 80ad358:	2b00      	cmp	r3, #0
 80ad35a:	d102      	bne.n	80ad362 <sensor_config+0x696>
        return SENSOR_FAILED;
 80ad35c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80ad360:	e0e5      	b.n	80ad52e <sensor_config+0x862>
      printf("sensor config cali/selftest\r\n");
 80ad362:	4877      	ldr	r0, [pc, #476]	; (80ad540 <sensor_config+0x874>)
 80ad364:	f013 fba2 	bl	80c0aac <puts>
      if (sensors[config_event.sensor_type]->activate) {
 80ad368:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 80ad36c:	461a      	mov	r2, r3
 80ad36e:	4b75      	ldr	r3, [pc, #468]	; (80ad544 <sensor_config+0x878>)
 80ad370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80ad374:	791b      	ldrb	r3, [r3, #4]
 80ad376:	2b00      	cmp	r3, #0
 80ad378:	d003      	beq.n	80ad382 <sensor_config+0x6b6>
        printf
 80ad37a:	4873      	ldr	r0, [pc, #460]	; (80ad548 <sensor_config+0x87c>)
 80ad37c:	f013 fb96 	bl	80c0aac <puts>
    break;
 80ad380:	e0d3      	b.n	80ad52a <sensor_config+0x85e>
        if (sensors[config_event.sensor_type]->sensor_op_ptr[0].config != NULL) {
 80ad382:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 80ad386:	461a      	mov	r2, r3
 80ad388:	4b6e      	ldr	r3, [pc, #440]	; (80ad544 <sensor_config+0x878>)
 80ad38a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80ad38e:	699b      	ldr	r3, [r3, #24]
 80ad390:	691b      	ldr	r3, [r3, #16]
 80ad392:	2b00      	cmp	r3, #0
 80ad394:	d04c      	beq.n	80ad430 <sensor_config+0x764>
              sensors[config_event.sensor_type]->sensor_op_ptr[0].
 80ad396:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 80ad39a:	461a      	mov	r2, r3
 80ad39c:	4b69      	ldr	r3, [pc, #420]	; (80ad544 <sensor_config+0x878>)
 80ad39e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80ad3a2:	699b      	ldr	r3, [r3, #24]
 80ad3a4:	691b      	ldr	r3, [r3, #16]
              config(config_event.config_type, platform_init_parms);
 80ad3a6:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
              sensors[config_event.sensor_type]->sensor_op_ptr[0].
 80ad3aa:	4964      	ldr	r1, [pc, #400]	; (80ad53c <sensor_config+0x870>)
 80ad3ac:	6809      	ldr	r1, [r1, #0]
 80ad3ae:	4610      	mov	r0, r2
 80ad3b0:	4798      	blx	r3
 80ad3b2:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
          if (platform_init_parms->use_uart_mode == 1) {
 80ad3b6:	4b61      	ldr	r3, [pc, #388]	; (80ad53c <sensor_config+0x870>)
 80ad3b8:	681b      	ldr	r3, [r3, #0]
 80ad3ba:	f893 3198 	ldrb.w	r3, [r3, #408]	; 0x198
 80ad3be:	2b01      	cmp	r3, #1
 80ad3c0:	d118      	bne.n	80ad3f4 <sensor_config+0x728>
            uint8_t uart_sensor_data[UART_TX_CODE_LENGTH] = { 0 };
 80ad3c2:	2300      	movs	r3, #0
 80ad3c4:	603b      	str	r3, [r7, #0]
 80ad3c6:	1d3b      	adds	r3, r7, #4
 80ad3c8:	2200      	movs	r2, #0
 80ad3ca:	601a      	str	r2, [r3, #0]
 80ad3cc:	605a      	str	r2, [r3, #4]
 80ad3ce:	609a      	str	r2, [r3, #8]
 80ad3d0:	60da      	str	r2, [r3, #12]
 80ad3d2:	611a      	str	r2, [r3, #16]
 80ad3d4:	615a      	str	r2, [r3, #20]
 80ad3d6:	761a      	strb	r2, [r3, #24]
            memcpy(&uart_sensor_data[0], res, sizeof(int));
 80ad3d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80ad3dc:	681b      	ldr	r3, [r3, #0]
 80ad3de:	603b      	str	r3, [r7, #0]
            osMessageQueuePut(platform_init_parms->UartReportQHandle,
 80ad3e0:	4b56      	ldr	r3, [pc, #344]	; (80ad53c <sensor_config+0x870>)
 80ad3e2:	681b      	ldr	r3, [r3, #0]
 80ad3e4:	f8d3 00fc 	ldr.w	r0, [r3, #252]	; 0xfc
 80ad3e8:	4639      	mov	r1, r7
 80ad3ea:	2300      	movs	r3, #0
 80ad3ec:	2200      	movs	r2, #0
 80ad3ee:	f009 f809 	bl	80b6404 <osMessageQueuePut>
    break;
 80ad3f2:	e09a      	b.n	80ad52a <sensor_config+0x85e>
            sensor_msg_event.message_event_type = SENSOR_CONFIG_RESP_MESSAGE;
 80ad3f4:	2303      	movs	r3, #3
 80ad3f6:	f887 3020 	strb.w	r3, [r7, #32]
                config_event.sensor_type;
 80ad3fa:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
            sensor_msg_event.message_event_t.resp_event.sensor_type =
 80ad3fe:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
                config_event.config_type;
 80ad402:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
            sensor_msg_event.message_event_t.resp_event.config_type =
 80ad406:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
            sensor_msg_event.message_event_t.resp_event.cfg_data.resp_data[0] =
 80ad40a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80ad40e:	ee07 3a90 	vmov	s15, r3
 80ad412:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80ad416:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            osMessageQueuePut(platform_init_parms->SensorMessageQHandle,
 80ad41a:	4b48      	ldr	r3, [pc, #288]	; (80ad53c <sensor_config+0x870>)
 80ad41c:	681b      	ldr	r3, [r3, #0]
 80ad41e:	f8d3 00f4 	ldr.w	r0, [r3, #244]	; 0xf4
 80ad422:	f107 0120 	add.w	r1, r7, #32
 80ad426:	2300      	movs	r3, #0
 80ad428:	2200      	movs	r2, #0
 80ad42a:	f008 ffeb 	bl	80b6404 <osMessageQueuePut>
    break;
 80ad42e:	e07c      	b.n	80ad52a <sensor_config+0x85e>
          printf("config ptr is NULL!\r\n");
 80ad430:	4846      	ldr	r0, [pc, #280]	; (80ad54c <sensor_config+0x880>)
 80ad432:	f013 fb3b 	bl	80c0aac <puts>
          break;
 80ad436:	e078      	b.n	80ad52a <sensor_config+0x85e>
  case SENSOR_CONFIG_TIMEOUT:
    if (platform_init_parms != NULL) {
 80ad438:	4b40      	ldr	r3, [pc, #256]	; (80ad53c <sensor_config+0x870>)
 80ad43a:	681b      	ldr	r3, [r3, #0]
 80ad43c:	2b00      	cmp	r3, #0
 80ad43e:	d071      	beq.n	80ad524 <sensor_config+0x858>
      for (int i = 0; i < sizeof(timeout_sensor_type) / sizeof(uint8_t);
 80ad440:	2300      	movs	r3, #0
 80ad442:	67fb      	str	r3, [r7, #124]	; 0x7c
 80ad444:	e030      	b.n	80ad4a8 <sensor_config+0x7dc>
           i = i + 1) {
        if (sensors[timeout_sensor_type[i]] != NULL) {
 80ad446:	4a42      	ldr	r2, [pc, #264]	; (80ad550 <sensor_config+0x884>)
 80ad448:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80ad44a:	4413      	add	r3, r2
 80ad44c:	781b      	ldrb	r3, [r3, #0]
 80ad44e:	461a      	mov	r2, r3
 80ad450:	4b3c      	ldr	r3, [pc, #240]	; (80ad544 <sensor_config+0x878>)
 80ad452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80ad456:	2b00      	cmp	r3, #0
 80ad458:	d023      	beq.n	80ad4a2 <sensor_config+0x7d6>
          if (sensors[timeout_sensor_type[i]]->activate) {
 80ad45a:	4a3d      	ldr	r2, [pc, #244]	; (80ad550 <sensor_config+0x884>)
 80ad45c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80ad45e:	4413      	add	r3, r2
 80ad460:	781b      	ldrb	r3, [r3, #0]
 80ad462:	461a      	mov	r2, r3
 80ad464:	4b37      	ldr	r3, [pc, #220]	; (80ad544 <sensor_config+0x878>)
 80ad466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80ad46a:	791b      	ldrb	r3, [r3, #4]
 80ad46c:	2b00      	cmp	r3, #0
 80ad46e:	d018      	beq.n	80ad4a2 <sensor_config+0x7d6>
            //printf("@@@SENSOR_CONFIG_TIMEOUT!\r\n");
            res =
                sensors[timeout_sensor_type[i]]->sensor_op_ptr[0].
 80ad470:	4a37      	ldr	r2, [pc, #220]	; (80ad550 <sensor_config+0x884>)
 80ad472:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80ad474:	4413      	add	r3, r2
 80ad476:	781b      	ldrb	r3, [r3, #0]
 80ad478:	461a      	mov	r2, r3
 80ad47a:	4b32      	ldr	r3, [pc, #200]	; (80ad544 <sensor_config+0x878>)
 80ad47c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80ad480:	699b      	ldr	r3, [r3, #24]
 80ad482:	691b      	ldr	r3, [r3, #16]
                config(config_event.config_type, platform_init_parms);
 80ad484:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
                sensors[timeout_sensor_type[i]]->sensor_op_ptr[0].
 80ad488:	492c      	ldr	r1, [pc, #176]	; (80ad53c <sensor_config+0x870>)
 80ad48a:	6809      	ldr	r1, [r1, #0]
 80ad48c:	4610      	mov	r0, r2
 80ad48e:	4798      	blx	r3
 80ad490:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
            if (res != SENSOR_SUCCESS) {
 80ad494:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80ad498:	2b00      	cmp	r3, #0
 80ad49a:	d002      	beq.n	80ad4a2 <sensor_config+0x7d6>
              printf("config failed for SENSOR_CONFIG_TIMEOUT\r\n");
 80ad49c:	482d      	ldr	r0, [pc, #180]	; (80ad554 <sensor_config+0x888>)
 80ad49e:	f013 fb05 	bl	80c0aac <puts>
           i = i + 1) {
 80ad4a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80ad4a4:	3301      	adds	r3, #1
 80ad4a6:	67fb      	str	r3, [r7, #124]	; 0x7c
      for (int i = 0; i < sizeof(timeout_sensor_type) / sizeof(uint8_t);
 80ad4a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80ad4aa:	2b02      	cmp	r3, #2
 80ad4ac:	d9cb      	bls.n	80ad446 <sensor_config+0x77a>
        }
      }
    } else {
      //assert here should be occured!
    }
    break;
 80ad4ae:	e039      	b.n	80ad524 <sensor_config+0x858>
  case SENSOR_CONFIG_BIAS:
  case SENSOR_CALIBRATION_RESULT:
    if (platform_init_parms != NULL) {
 80ad4b0:	4b22      	ldr	r3, [pc, #136]	; (80ad53c <sensor_config+0x870>)
 80ad4b2:	681b      	ldr	r3, [r3, #0]
 80ad4b4:	2b00      	cmp	r3, #0
 80ad4b6:	d037      	beq.n	80ad528 <sensor_config+0x85c>
      if (!sensor_avaiable_check(config_event.sensor_type)) {
 80ad4b8:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 80ad4bc:	4618      	mov	r0, r3
 80ad4be:	f7ff fa5d 	bl	80ac97c <sensor_avaiable_check>
 80ad4c2:	4603      	mov	r3, r0
 80ad4c4:	f083 0301 	eor.w	r3, r3, #1
 80ad4c8:	b2db      	uxtb	r3, r3
 80ad4ca:	2b00      	cmp	r3, #0
 80ad4cc:	d002      	beq.n	80ad4d4 <sensor_config+0x808>
        return SENSOR_FAILED;
 80ad4ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80ad4d2:	e02c      	b.n	80ad52e <sensor_config+0x862>
      }
      if (sensors[config_event.sensor_type] != NULL) {
 80ad4d4:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 80ad4d8:	461a      	mov	r2, r3
 80ad4da:	4b1a      	ldr	r3, [pc, #104]	; (80ad544 <sensor_config+0x878>)
 80ad4dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80ad4e0:	2b00      	cmp	r3, #0
 80ad4e2:	d021      	beq.n	80ad528 <sensor_config+0x85c>
        //printf("@@@SENSOR_CONFIG_BIAS!\r\n");
        res =
            sensors[config_event.sensor_type]->sensor_op_ptr[0].
 80ad4e4:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 80ad4e8:	461a      	mov	r2, r3
 80ad4ea:	4b16      	ldr	r3, [pc, #88]	; (80ad544 <sensor_config+0x878>)
 80ad4ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80ad4f0:	699b      	ldr	r3, [r3, #24]
 80ad4f2:	691b      	ldr	r3, [r3, #16]
            config(config_event.config_type, platform_init_parms);
 80ad4f4:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
            sensors[config_event.sensor_type]->sensor_op_ptr[0].
 80ad4f8:	4910      	ldr	r1, [pc, #64]	; (80ad53c <sensor_config+0x870>)
 80ad4fa:	6809      	ldr	r1, [r1, #0]
 80ad4fc:	4610      	mov	r0, r2
 80ad4fe:	4798      	blx	r3
 80ad500:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
        if (res != SENSOR_SUCCESS) {
 80ad504:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80ad508:	2b00      	cmp	r3, #0
 80ad50a:	d00d      	beq.n	80ad528 <sensor_config+0x85c>
          printf("config failed for SENSOR_CONFIG_BIAS\r\n");
 80ad50c:	4812      	ldr	r0, [pc, #72]	; (80ad558 <sensor_config+0x88c>)
 80ad50e:	f013 facd 	bl	80c0aac <puts>
        }
      }
    } else {
      //assert here should be occured!
    }
    break;
 80ad512:	e009      	b.n	80ad528 <sensor_config+0x85c>
  default:
    break;
 80ad514:	bf00      	nop
 80ad516:	e008      	b.n	80ad52a <sensor_config+0x85e>
    break;
 80ad518:	bf00      	nop
 80ad51a:	e006      	b.n	80ad52a <sensor_config+0x85e>
    break;
 80ad51c:	bf00      	nop
 80ad51e:	e004      	b.n	80ad52a <sensor_config+0x85e>
    break;
 80ad520:	bf00      	nop
 80ad522:	e002      	b.n	80ad52a <sensor_config+0x85e>
    break;
 80ad524:	bf00      	nop
 80ad526:	e000      	b.n	80ad52a <sensor_config+0x85e>
    break;
 80ad528:	bf00      	nop
  }

  return res;
 80ad52a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
}
 80ad52e:	4618      	mov	r0, r3
 80ad530:	3790      	adds	r7, #144	; 0x90
 80ad532:	46bd      	mov	sp, r7
 80ad534:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80ad538:	b004      	add	sp, #16
 80ad53a:	4770      	bx	lr
 80ad53c:	2000845c 	.word	0x2000845c
 80ad540:	080c5fa0 	.word	0x080c5fa0
 80ad544:	2000841c 	.word	0x2000841c
 80ad548:	080c5fc0 	.word	0x080c5fc0
 80ad54c:	080c6014 	.word	0x080c6014
 80ad550:	200078f0 	.word	0x200078f0
 80ad554:	080c602c 	.word	0x080c602c
 80ad558:	080c6058 	.word	0x080c6058

080ad55c <sensor_timer_handler>:

int sensor_timer_handler(void)
{
 80ad55c:	b580      	push	{r7, lr}
 80ad55e:	b082      	sub	sp, #8
 80ad560:	af00      	add	r7, sp, #0
  int res = SENSOR_SUCCESS;
 80ad562:	2300      	movs	r3, #0
 80ad564:	607b      	str	r3, [r7, #4]
  if (platform_init_parms != NULL) {
 80ad566:	4b27      	ldr	r3, [pc, #156]	; (80ad604 <sensor_timer_handler+0xa8>)
 80ad568:	681b      	ldr	r3, [r3, #0]
 80ad56a:	2b00      	cmp	r3, #0
 80ad56c:	d044      	beq.n	80ad5f8 <sensor_timer_handler+0x9c>
    for (int i = 0; i < SENSOR_TYPE_MAX; i++) {
 80ad56e:	2300      	movs	r3, #0
 80ad570:	603b      	str	r3, [r7, #0]
 80ad572:	e03e      	b.n	80ad5f2 <sensor_timer_handler+0x96>
      if (sensors[i] != NULL) {
 80ad574:	4a24      	ldr	r2, [pc, #144]	; (80ad608 <sensor_timer_handler+0xac>)
 80ad576:	683b      	ldr	r3, [r7, #0]
 80ad578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80ad57c:	2b00      	cmp	r3, #0
 80ad57e:	d035      	beq.n	80ad5ec <sensor_timer_handler+0x90>
        if (!sensors[i]->init_completed) {
 80ad580:	4a21      	ldr	r2, [pc, #132]	; (80ad608 <sensor_timer_handler+0xac>)
 80ad582:	683b      	ldr	r3, [r7, #0]
 80ad584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80ad588:	7d1b      	ldrb	r3, [r3, #20]
 80ad58a:	f083 0301 	eor.w	r3, r3, #1
 80ad58e:	b2db      	uxtb	r3, r3
 80ad590:	2b00      	cmp	r3, #0
 80ad592:	d126      	bne.n	80ad5e2 <sensor_timer_handler+0x86>
          continue;
        }
        if (!sensors[i]->activate) {
 80ad594:	4a1c      	ldr	r2, [pc, #112]	; (80ad608 <sensor_timer_handler+0xac>)
 80ad596:	683b      	ldr	r3, [r7, #0]
 80ad598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80ad59c:	791b      	ldrb	r3, [r3, #4]
 80ad59e:	f083 0301 	eor.w	r3, r3, #1
 80ad5a2:	b2db      	uxtb	r3, r3
 80ad5a4:	2b00      	cmp	r3, #0
 80ad5a6:	d11e      	bne.n	80ad5e6 <sensor_timer_handler+0x8a>
          continue;
        }
        if (sensors[i]->use_interrupt) {
 80ad5a8:	4a17      	ldr	r2, [pc, #92]	; (80ad608 <sensor_timer_handler+0xac>)
 80ad5aa:	683b      	ldr	r3, [r7, #0]
 80ad5ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80ad5b0:	7d5b      	ldrb	r3, [r3, #21]
 80ad5b2:	2b00      	cmp	r3, #0
 80ad5b4:	d119      	bne.n	80ad5ea <sensor_timer_handler+0x8e>
          continue;
        }

        if (sensors[i]->sensor_op_ptr[0].publish_sensor_data != NULL) {
 80ad5b6:	4a14      	ldr	r2, [pc, #80]	; (80ad608 <sensor_timer_handler+0xac>)
 80ad5b8:	683b      	ldr	r3, [r7, #0]
 80ad5ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80ad5be:	699b      	ldr	r3, [r3, #24]
 80ad5c0:	68db      	ldr	r3, [r3, #12]
 80ad5c2:	2b00      	cmp	r3, #0
 80ad5c4:	d012      	beq.n	80ad5ec <sensor_timer_handler+0x90>
          res =
              sensors[i]->sensor_op_ptr[0].
 80ad5c6:	4a10      	ldr	r2, [pc, #64]	; (80ad608 <sensor_timer_handler+0xac>)
 80ad5c8:	683b      	ldr	r3, [r7, #0]
 80ad5ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80ad5ce:	699b      	ldr	r3, [r3, #24]
 80ad5d0:	68db      	ldr	r3, [r3, #12]
 80ad5d2:	4a0c      	ldr	r2, [pc, #48]	; (80ad604 <sensor_timer_handler+0xa8>)
 80ad5d4:	6812      	ldr	r2, [r2, #0]
 80ad5d6:	4610      	mov	r0, r2
 80ad5d8:	4798      	blx	r3
 80ad5da:	6078      	str	r0, [r7, #4]
              publish_sensor_data(platform_init_parms);
          if (res == SENSOR_SUCCESS) {
 80ad5dc:	687b      	ldr	r3, [r7, #4]
 80ad5de:	2b00      	cmp	r3, #0
 80ad5e0:	e004      	b.n	80ad5ec <sensor_timer_handler+0x90>
          continue;
 80ad5e2:	bf00      	nop
 80ad5e4:	e002      	b.n	80ad5ec <sensor_timer_handler+0x90>
          continue;
 80ad5e6:	bf00      	nop
 80ad5e8:	e000      	b.n	80ad5ec <sensor_timer_handler+0x90>
          continue;
 80ad5ea:	bf00      	nop
    for (int i = 0; i < SENSOR_TYPE_MAX; i++) {
 80ad5ec:	683b      	ldr	r3, [r7, #0]
 80ad5ee:	3301      	adds	r3, #1
 80ad5f0:	603b      	str	r3, [r7, #0]
 80ad5f2:	683b      	ldr	r3, [r7, #0]
 80ad5f4:	2b0e      	cmp	r3, #14
 80ad5f6:	ddbd      	ble.n	80ad574 <sensor_timer_handler+0x18>
      }
    }
  } else {
    //register sensor is not called successfully
  }
  return res;
 80ad5f8:	687b      	ldr	r3, [r7, #4]
}
 80ad5fa:	4618      	mov	r0, r3
 80ad5fc:	3708      	adds	r7, #8
 80ad5fe:	46bd      	mov	sp, r7
 80ad600:	bd80      	pop	{r7, pc}
 80ad602:	bf00      	nop
 80ad604:	2000845c 	.word	0x2000845c
 80ad608:	2000841c 	.word	0x2000841c

080ad60c <sensor_irq_handler>:

int sensor_irq_handler(interrupt_event_t intr_event)
{
 80ad60c:	b590      	push	{r4, r7, lr}
 80ad60e:	b087      	sub	sp, #28
 80ad610:	af00      	add	r7, sp, #0
 80ad612:	463c      	mov	r4, r7
 80ad614:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  int res = SENSOR_SUCCESS;
 80ad618:	2300      	movs	r3, #0
 80ad61a:	613b      	str	r3, [r7, #16]
  if (platform_init_parms != NULL) {
 80ad61c:	4b13      	ldr	r3, [pc, #76]	; (80ad66c <sensor_irq_handler+0x60>)
 80ad61e:	681b      	ldr	r3, [r3, #0]
 80ad620:	2b00      	cmp	r3, #0
 80ad622:	d01e      	beq.n	80ad662 <sensor_irq_handler+0x56>
    for (int i = SENSOR_TYPE_PROXIMITY_HEAD; i <= SENSOR_TYPE_PROXIMITY_REAR;
 80ad624:	2305      	movs	r3, #5
 80ad626:	617b      	str	r3, [r7, #20]
 80ad628:	e018      	b.n	80ad65c <sensor_irq_handler+0x50>
         i = i + 2) {
      if (sensors[i] != NULL) {
 80ad62a:	4a11      	ldr	r2, [pc, #68]	; (80ad670 <sensor_irq_handler+0x64>)
 80ad62c:	697b      	ldr	r3, [r7, #20]
 80ad62e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80ad632:	2b00      	cmp	r3, #0
 80ad634:	d00f      	beq.n	80ad656 <sensor_irq_handler+0x4a>
        res =
            sensors[i]->sensor_op_ptr[0].publish_sensor_data(&intr_event.
 80ad636:	4a0e      	ldr	r2, [pc, #56]	; (80ad670 <sensor_irq_handler+0x64>)
 80ad638:	697b      	ldr	r3, [r7, #20]
 80ad63a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80ad63e:	699b      	ldr	r3, [r3, #24]
 80ad640:	68db      	ldr	r3, [r3, #12]
 80ad642:	463a      	mov	r2, r7
 80ad644:	4610      	mov	r0, r2
 80ad646:	4798      	blx	r3
 80ad648:	6138      	str	r0, [r7, #16]
                                                             interrupt_num);
        if (res != SENSOR_SUCCESS) {
 80ad64a:	693b      	ldr	r3, [r7, #16]
 80ad64c:	2b00      	cmp	r3, #0
 80ad64e:	d002      	beq.n	80ad656 <sensor_irq_handler+0x4a>
          printf("publish_sensor_data failed\r\n");
 80ad650:	4808      	ldr	r0, [pc, #32]	; (80ad674 <sensor_irq_handler+0x68>)
 80ad652:	f013 fa2b 	bl	80c0aac <puts>
         i = i + 2) {
 80ad656:	697b      	ldr	r3, [r7, #20]
 80ad658:	3302      	adds	r3, #2
 80ad65a:	617b      	str	r3, [r7, #20]
    for (int i = SENSOR_TYPE_PROXIMITY_HEAD; i <= SENSOR_TYPE_PROXIMITY_REAR;
 80ad65c:	697b      	ldr	r3, [r7, #20]
 80ad65e:	2b07      	cmp	r3, #7
 80ad660:	dde3      	ble.n	80ad62a <sensor_irq_handler+0x1e>
      }
    }
  } else {
    //assert here should be occured!
  }
  return 0;
 80ad662:	2300      	movs	r3, #0
}
 80ad664:	4618      	mov	r0, r3
 80ad666:	371c      	adds	r7, #28
 80ad668:	46bd      	mov	sp, r7
 80ad66a:	bd90      	pop	{r4, r7, pc}
 80ad66c:	2000845c 	.word	0x2000845c
 80ad670:	2000841c 	.word	0x2000841c
 80ad674:	080c6080 	.word	0x080c6080

080ad678 <sensor_data_handler>:

int sensor_data_handler(sensors_event_t * sensor_data)
{
 80ad678:	b580      	push	{r7, lr}
 80ad67a:	b082      	sub	sp, #8
 80ad67c:	af00      	add	r7, sp, #0
 80ad67e:	6078      	str	r0, [r7, #4]
  if (sensor_avaiable_check(SENSOR_TYPE_ROTATION_VECTOR)
 80ad680:	200d      	movs	r0, #13
 80ad682:	f7ff f97b 	bl	80ac97c <sensor_avaiable_check>
 80ad686:	4603      	mov	r3, r0
 80ad688:	2b00      	cmp	r3, #0
 80ad68a:	d017      	beq.n	80ad6bc <sensor_data_handler+0x44>
      && ((sensorEnabledBitMask >> SENSOR_TYPE_ROTATION_VECTOR) & 1)
 80ad68c:	4b1c      	ldr	r3, [pc, #112]	; (80ad700 <sensor_data_handler+0x88>)
 80ad68e:	881b      	ldrh	r3, [r3, #0]
 80ad690:	0b5b      	lsrs	r3, r3, #13
 80ad692:	b29b      	uxth	r3, r3
 80ad694:	f003 0301 	and.w	r3, r3, #1
 80ad698:	2b00      	cmp	r3, #0
 80ad69a:	d00f      	beq.n	80ad6bc <sensor_data_handler+0x44>
      && (sensor_data->sensor_type == SENSOR_TYPE_ACCELEROMETER
 80ad69c:	687b      	ldr	r3, [r7, #4]
 80ad69e:	781b      	ldrb	r3, [r3, #0]
 80ad6a0:	2b00      	cmp	r3, #0
 80ad6a2:	d003      	beq.n	80ad6ac <sensor_data_handler+0x34>
          || sensor_data->sensor_type == SENSOR_TYPE_GYROSCOPE
 80ad6a4:	687b      	ldr	r3, [r7, #4]
 80ad6a6:	781b      	ldrb	r3, [r3, #0]
 80ad6a8:	2b02      	cmp	r3, #2
 80ad6aa:	d107      	bne.n	80ad6bc <sensor_data_handler+0x44>
          // || sensor_data->sensor_type == SENSOR_TYPE_MAGNETIC_FIELD
      ))
    sensors[SENSOR_TYPE_ROTATION_VECTOR]->sensor_op_ptr[0].
 80ad6ac:	4b15      	ldr	r3, [pc, #84]	; (80ad704 <sensor_data_handler+0x8c>)
 80ad6ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80ad6b0:	699b      	ldr	r3, [r3, #24]
 80ad6b2:	691b      	ldr	r3, [r3, #16]
 80ad6b4:	6879      	ldr	r1, [r7, #4]
 80ad6b6:	2007      	movs	r0, #7
 80ad6b8:	4798      	blx	r3
 80ad6ba:	e01c      	b.n	80ad6f6 <sensor_data_handler+0x7e>
        config(SENSOR_CONFIG_DATA, sensor_data);
  else if (sensor_avaiable_check(SENSOR_TYPE_SPEED_VECTOR)
 80ad6bc:	200e      	movs	r0, #14
 80ad6be:	f7ff f95d 	bl	80ac97c <sensor_avaiable_check>
 80ad6c2:	4603      	mov	r3, r0
 80ad6c4:	2b00      	cmp	r3, #0
 80ad6c6:	d016      	beq.n	80ad6f6 <sensor_data_handler+0x7e>
           && ((sensorEnabledBitMask >> SENSOR_TYPE_SPEED_VECTOR) & 1)
 80ad6c8:	4b0d      	ldr	r3, [pc, #52]	; (80ad700 <sensor_data_handler+0x88>)
 80ad6ca:	881b      	ldrh	r3, [r3, #0]
 80ad6cc:	0b9b      	lsrs	r3, r3, #14
 80ad6ce:	b29b      	uxth	r3, r3
 80ad6d0:	f003 0301 	and.w	r3, r3, #1
 80ad6d4:	2b00      	cmp	r3, #0
 80ad6d6:	d00e      	beq.n	80ad6f6 <sensor_data_handler+0x7e>
           && (sensor_data->sensor_type == SENSOR_TYPE_LIGHT_SPEED
 80ad6d8:	687b      	ldr	r3, [r7, #4]
 80ad6da:	781b      	ldrb	r3, [r3, #0]
 80ad6dc:	2b08      	cmp	r3, #8
 80ad6de:	d003      	beq.n	80ad6e8 <sensor_data_handler+0x70>
               || sensor_data->sensor_type == SENSOR_TYPE_PROXIMITY_BOT))
 80ad6e0:	687b      	ldr	r3, [r7, #4]
 80ad6e2:	781b      	ldrb	r3, [r3, #0]
 80ad6e4:	2b06      	cmp	r3, #6
 80ad6e6:	d106      	bne.n	80ad6f6 <sensor_data_handler+0x7e>
    sensors[SENSOR_TYPE_SPEED_VECTOR]->sensor_op_ptr[0].
 80ad6e8:	4b06      	ldr	r3, [pc, #24]	; (80ad704 <sensor_data_handler+0x8c>)
 80ad6ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80ad6ec:	699b      	ldr	r3, [r3, #24]
 80ad6ee:	691b      	ldr	r3, [r3, #16]
 80ad6f0:	6879      	ldr	r1, [r7, #4]
 80ad6f2:	2007      	movs	r0, #7
 80ad6f4:	4798      	blx	r3
        config(SENSOR_CONFIG_DATA, sensor_data);
  return 0;
 80ad6f6:	2300      	movs	r3, #0
}
 80ad6f8:	4618      	mov	r0, r3
 80ad6fa:	3708      	adds	r7, #8
 80ad6fc:	46bd      	mov	sp, r7
 80ad6fe:	bd80      	pop	{r7, pc}
 80ad700:	20008458 	.word	0x20008458
 80ad704:	2000841c 	.word	0x2000841c

080ad708 <sensor_get_timestamp>:

#define MAX_U32_TIMESTAMP 0xFFFFFFFF

uint64_t sensor_get_timestamp()
{
 80ad708:	b5b0      	push	{r4, r5, r7, lr}
 80ad70a:	af00      	add	r7, sp, #0
  static uint64_t sensor_u64timestamp = 0;
  static uint64_t last_sensor_u64timestamp = 0;
  static uint8_t u32overflowcount = 0;
  static uint8_t u64overflowcount = 0;

  currentu32timestamp = osKernelGetTickCount();
 80ad70c:	f008 fc24 	bl	80b5f58 <osKernelGetTickCount>
 80ad710:	4603      	mov	r3, r0
 80ad712:	4a25      	ldr	r2, [pc, #148]	; (80ad7a8 <sensor_get_timestamp+0xa0>)
 80ad714:	6013      	str	r3, [r2, #0]

  if (currentu32timestamp < lastu32timestamp) {
 80ad716:	4b24      	ldr	r3, [pc, #144]	; (80ad7a8 <sensor_get_timestamp+0xa0>)
 80ad718:	681a      	ldr	r2, [r3, #0]
 80ad71a:	4b24      	ldr	r3, [pc, #144]	; (80ad7ac <sensor_get_timestamp+0xa4>)
 80ad71c:	681b      	ldr	r3, [r3, #0]
 80ad71e:	429a      	cmp	r2, r3
 80ad720:	d217      	bcs.n	80ad752 <sensor_get_timestamp+0x4a>
    u32overflowcount++;
 80ad722:	4b23      	ldr	r3, [pc, #140]	; (80ad7b0 <sensor_get_timestamp+0xa8>)
 80ad724:	781b      	ldrb	r3, [r3, #0]
 80ad726:	3301      	adds	r3, #1
 80ad728:	b2da      	uxtb	r2, r3
 80ad72a:	4b21      	ldr	r3, [pc, #132]	; (80ad7b0 <sensor_get_timestamp+0xa8>)
 80ad72c:	701a      	strb	r2, [r3, #0]
    sensor_u64timestamp = MAX_U32_TIMESTAMP * u32overflowcount;
 80ad72e:	4b20      	ldr	r3, [pc, #128]	; (80ad7b0 <sensor_get_timestamp+0xa8>)
 80ad730:	781b      	ldrb	r3, [r3, #0]
 80ad732:	425b      	negs	r3, r3
 80ad734:	461a      	mov	r2, r3
 80ad736:	f04f 0300 	mov.w	r3, #0
 80ad73a:	491e      	ldr	r1, [pc, #120]	; (80ad7b4 <sensor_get_timestamp+0xac>)
 80ad73c:	e9c1 2300 	strd	r2, r3, [r1]
    last_sensor_u64timestamp = MAX_U32_TIMESTAMP * u32overflowcount;
 80ad740:	4b1b      	ldr	r3, [pc, #108]	; (80ad7b0 <sensor_get_timestamp+0xa8>)
 80ad742:	781b      	ldrb	r3, [r3, #0]
 80ad744:	425b      	negs	r3, r3
 80ad746:	461a      	mov	r2, r3
 80ad748:	f04f 0300 	mov.w	r3, #0
 80ad74c:	491a      	ldr	r1, [pc, #104]	; (80ad7b8 <sensor_get_timestamp+0xb0>)
 80ad74e:	e9c1 2300 	strd	r2, r3, [r1]
  }

  if (u32overflowcount) {
 80ad752:	4b17      	ldr	r3, [pc, #92]	; (80ad7b0 <sensor_get_timestamp+0xa8>)
 80ad754:	781b      	ldrb	r3, [r3, #0]
 80ad756:	2b00      	cmp	r3, #0
 80ad758:	d00e      	beq.n	80ad778 <sensor_get_timestamp+0x70>
    sensor_u64timestamp = last_sensor_u64timestamp + currentu32timestamp;
 80ad75a:	4b13      	ldr	r3, [pc, #76]	; (80ad7a8 <sensor_get_timestamp+0xa0>)
 80ad75c:	681b      	ldr	r3, [r3, #0]
 80ad75e:	4618      	mov	r0, r3
 80ad760:	f04f 0100 	mov.w	r1, #0
 80ad764:	4b14      	ldr	r3, [pc, #80]	; (80ad7b8 <sensor_get_timestamp+0xb0>)
 80ad766:	e9d3 2300 	ldrd	r2, r3, [r3]
 80ad76a:	1884      	adds	r4, r0, r2
 80ad76c:	eb41 0503 	adc.w	r5, r1, r3
 80ad770:	4b10      	ldr	r3, [pc, #64]	; (80ad7b4 <sensor_get_timestamp+0xac>)
 80ad772:	e9c3 4500 	strd	r4, r5, [r3]
 80ad776:	e007      	b.n	80ad788 <sensor_get_timestamp+0x80>
  } else {
    sensor_u64timestamp = currentu32timestamp;
 80ad778:	4b0b      	ldr	r3, [pc, #44]	; (80ad7a8 <sensor_get_timestamp+0xa0>)
 80ad77a:	681b      	ldr	r3, [r3, #0]
 80ad77c:	461a      	mov	r2, r3
 80ad77e:	f04f 0300 	mov.w	r3, #0
 80ad782:	490c      	ldr	r1, [pc, #48]	; (80ad7b4 <sensor_get_timestamp+0xac>)
 80ad784:	e9c1 2300 	strd	r2, r3, [r1]
  }

  lastu32timestamp = currentu32timestamp;
 80ad788:	4b07      	ldr	r3, [pc, #28]	; (80ad7a8 <sensor_get_timestamp+0xa0>)
 80ad78a:	681b      	ldr	r3, [r3, #0]
 80ad78c:	4a07      	ldr	r2, [pc, #28]	; (80ad7ac <sensor_get_timestamp+0xa4>)
 80ad78e:	6013      	str	r3, [r2, #0]
  last_sensor_u64timestamp = sensor_u64timestamp;
 80ad790:	4b08      	ldr	r3, [pc, #32]	; (80ad7b4 <sensor_get_timestamp+0xac>)
 80ad792:	e9d3 2300 	ldrd	r2, r3, [r3]
 80ad796:	4908      	ldr	r1, [pc, #32]	; (80ad7b8 <sensor_get_timestamp+0xb0>)
 80ad798:	e9c1 2300 	strd	r2, r3, [r1]
  return sensor_u64timestamp;
 80ad79c:	4b05      	ldr	r3, [pc, #20]	; (80ad7b4 <sensor_get_timestamp+0xac>)
 80ad79e:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 80ad7a2:	4610      	mov	r0, r2
 80ad7a4:	4619      	mov	r1, r3
 80ad7a6:	bdb0      	pop	{r4, r5, r7, pc}
 80ad7a8:	20008464 	.word	0x20008464
 80ad7ac:	20008468 	.word	0x20008468
 80ad7b0:	2000846c 	.word	0x2000846c
 80ad7b4:	20008470 	.word	0x20008470
 80ad7b8:	20008478 	.word	0x20008478

080ad7bc <speedv_init>:
static uint64_t last_op_timestamp = 0;
static uint64_t current_op_timestamp = 0;
static float raw_optical_data[2] = { 0 };

int speedv_init(void *para, void *para2)
{
 80ad7bc:	b580      	push	{r7, lr}
 80ad7be:	b082      	sub	sp, #8
 80ad7c0:	af00      	add	r7, sp, #0
 80ad7c2:	6078      	str	r0, [r7, #4]
 80ad7c4:	6039      	str	r1, [r7, #0]
  speed_v_init_parms = (platform_prams *) para;
 80ad7c6:	4a17      	ldr	r2, [pc, #92]	; (80ad824 <speedv_init+0x68>)
 80ad7c8:	687b      	ldr	r3, [r7, #4]
 80ad7ca:	6013      	str	r3, [r2, #0]
  sensor_ptr = (sensor_device **) para2;
 80ad7cc:	4a16      	ldr	r2, [pc, #88]	; (80ad828 <speedv_init+0x6c>)
 80ad7ce:	683b      	ldr	r3, [r7, #0]
 80ad7d0:	6013      	str	r3, [r2, #0]

  if ((sensor_ptr[SENSOR_TYPE_PROXIMITY_BOT] != NULL)
 80ad7d2:	4b15      	ldr	r3, [pc, #84]	; (80ad828 <speedv_init+0x6c>)
 80ad7d4:	681b      	ldr	r3, [r3, #0]
 80ad7d6:	3318      	adds	r3, #24
 80ad7d8:	681b      	ldr	r3, [r3, #0]
 80ad7da:	2b00      	cmp	r3, #0
 80ad7dc:	d01b      	beq.n	80ad816 <speedv_init+0x5a>
      && (sensor_ptr[SENSOR_TYPE_LIGHT_SPEED] != NULL)) {
 80ad7de:	4b12      	ldr	r3, [pc, #72]	; (80ad828 <speedv_init+0x6c>)
 80ad7e0:	681b      	ldr	r3, [r3, #0]
 80ad7e2:	3320      	adds	r3, #32
 80ad7e4:	681b      	ldr	r3, [r3, #0]
 80ad7e6:	2b00      	cmp	r3, #0
 80ad7e8:	d015      	beq.n	80ad816 <speedv_init+0x5a>
    if ((sensor_ptr[SENSOR_TYPE_PROXIMITY_BOT]->init_completed)
 80ad7ea:	4b0f      	ldr	r3, [pc, #60]	; (80ad828 <speedv_init+0x6c>)
 80ad7ec:	681b      	ldr	r3, [r3, #0]
 80ad7ee:	3318      	adds	r3, #24
 80ad7f0:	681b      	ldr	r3, [r3, #0]
 80ad7f2:	7d1b      	ldrb	r3, [r3, #20]
 80ad7f4:	2b00      	cmp	r3, #0
 80ad7f6:	d00b      	beq.n	80ad810 <speedv_init+0x54>
        && (sensor_ptr[SENSOR_TYPE_LIGHT_SPEED]->init_completed)) {
 80ad7f8:	4b0b      	ldr	r3, [pc, #44]	; (80ad828 <speedv_init+0x6c>)
 80ad7fa:	681b      	ldr	r3, [r3, #0]
 80ad7fc:	3320      	adds	r3, #32
 80ad7fe:	681b      	ldr	r3, [r3, #0]
 80ad800:	7d1b      	ldrb	r3, [r3, #20]
 80ad802:	2b00      	cmp	r3, #0
 80ad804:	d004      	beq.n	80ad810 <speedv_init+0x54>
      printf("all depending sensor enabled\r\n");
 80ad806:	4809      	ldr	r0, [pc, #36]	; (80ad82c <speedv_init+0x70>)
 80ad808:	f013 f950 	bl	80c0aac <puts>
      return SENSOR_SUCCESS;
 80ad80c:	2300      	movs	r3, #0
 80ad80e:	e004      	b.n	80ad81a <speedv_init+0x5e>
    } else {
      printf("depending sensor missing, init will exit with fail!\r\n");
 80ad810:	4807      	ldr	r0, [pc, #28]	; (80ad830 <speedv_init+0x74>)
 80ad812:	f013 f94b 	bl	80c0aac <puts>
    }
  }

  return SENSOR_FAILED;
 80ad816:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80ad81a:	4618      	mov	r0, r3
 80ad81c:	3708      	adds	r7, #8
 80ad81e:	46bd      	mov	sp, r7
 80ad820:	bd80      	pop	{r7, pc}
 80ad822:	bf00      	nop
 80ad824:	20008484 	.word	0x20008484
 80ad828:	20008480 	.word	0x20008480
 80ad82c:	080c609c 	.word	0x080c609c
 80ad830:	080c60bc 	.word	0x080c60bc

080ad834 <speedv_init_complete>:

int speedv_init_complete(void *para)
{
 80ad834:	b480      	push	{r7}
 80ad836:	b083      	sub	sp, #12
 80ad838:	af00      	add	r7, sp, #0
 80ad83a:	6078      	str	r0, [r7, #4]
  return SENSOR_SUCCESS;
 80ad83c:	2300      	movs	r3, #0
}
 80ad83e:	4618      	mov	r0, r3
 80ad840:	370c      	adds	r7, #12
 80ad842:	46bd      	mov	sp, r7
 80ad844:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ad848:	4770      	bx	lr
	...

080ad84c <speedv_enable>:

int speedv_enable()
{
 80ad84c:	b580      	push	{r7, lr}
 80ad84e:	b096      	sub	sp, #88	; 0x58
 80ad850:	af00      	add	r7, sp, #0
  sensor_message_event_t sensor_msg_event;
  osStatus_t res;
  if (sensor_activate_count == 0) {
 80ad852:	4b18      	ldr	r3, [pc, #96]	; (80ad8b4 <speedv_enable+0x68>)
 80ad854:	781b      	ldrb	r3, [r3, #0]
 80ad856:	2b00      	cmp	r3, #0
 80ad858:	d120      	bne.n	80ad89c <speedv_enable+0x50>
    sensor_msg_event.message_event_type = SENSOR_CONFIG_MESSAGE;
 80ad85a:	2300      	movs	r3, #0
 80ad85c:	703b      	strb	r3, [r7, #0]
    sensor_msg_event.message_event_t.config_event.config_type = SENSOR_ACTIVATE;
 80ad85e:	2301      	movs	r3, #1
 80ad860:	727b      	strb	r3, [r7, #9]
    sensor_msg_event.message_event_t.config_event.sensor_type =
 80ad862:	2308      	movs	r3, #8
 80ad864:	723b      	strb	r3, [r7, #8]
        SENSOR_TYPE_LIGHT_SPEED;
    osMessageQueuePut(speed_v_init_parms->SensorMessageQHandle,
 80ad866:	4b14      	ldr	r3, [pc, #80]	; (80ad8b8 <speedv_enable+0x6c>)
 80ad868:	681b      	ldr	r3, [r3, #0]
 80ad86a:	f8d3 00f4 	ldr.w	r0, [r3, #244]	; 0xf4
 80ad86e:	4639      	mov	r1, r7
 80ad870:	2300      	movs	r3, #0
 80ad872:	2200      	movs	r2, #0
 80ad874:	f008 fdc6 	bl	80b6404 <osMessageQueuePut>
                      &sensor_msg_event, 0, 0);
    sensor_msg_event.message_event_type = SENSOR_CONFIG_MESSAGE;
 80ad878:	2300      	movs	r3, #0
 80ad87a:	703b      	strb	r3, [r7, #0]
    sensor_msg_event.message_event_t.config_event.config_type = SENSOR_ACTIVATE;
 80ad87c:	2301      	movs	r3, #1
 80ad87e:	727b      	strb	r3, [r7, #9]
    sensor_msg_event.message_event_t.config_event.sensor_type =
 80ad880:	2306      	movs	r3, #6
 80ad882:	723b      	strb	r3, [r7, #8]
        SENSOR_TYPE_PROXIMITY_BOT;
    osMessageQueuePut(speed_v_init_parms->SensorMessageQHandle,
 80ad884:	4b0c      	ldr	r3, [pc, #48]	; (80ad8b8 <speedv_enable+0x6c>)
 80ad886:	681b      	ldr	r3, [r3, #0]
 80ad888:	f8d3 00f4 	ldr.w	r0, [r3, #244]	; 0xf4
 80ad88c:	4639      	mov	r1, r7
 80ad88e:	2300      	movs	r3, #0
 80ad890:	2200      	movs	r2, #0
 80ad892:	f008 fdb7 	bl	80b6404 <osMessageQueuePut>
                      &sensor_msg_event, 0, 0);
    speed_v_activated = true;
 80ad896:	4b09      	ldr	r3, [pc, #36]	; (80ad8bc <speedv_enable+0x70>)
 80ad898:	2201      	movs	r2, #1
 80ad89a:	701a      	strb	r2, [r3, #0]
  }
  sensor_activate_count++;
 80ad89c:	4b05      	ldr	r3, [pc, #20]	; (80ad8b4 <speedv_enable+0x68>)
 80ad89e:	781b      	ldrb	r3, [r3, #0]
 80ad8a0:	3301      	adds	r3, #1
 80ad8a2:	b2da      	uxtb	r2, r3
 80ad8a4:	4b03      	ldr	r3, [pc, #12]	; (80ad8b4 <speedv_enable+0x68>)
 80ad8a6:	701a      	strb	r2, [r3, #0]
}
 80ad8a8:	bf00      	nop
 80ad8aa:	4618      	mov	r0, r3
 80ad8ac:	3758      	adds	r7, #88	; 0x58
 80ad8ae:	46bd      	mov	sp, r7
 80ad8b0:	bd80      	pop	{r7, pc}
 80ad8b2:	bf00      	nop
 80ad8b4:	20008489 	.word	0x20008489
 80ad8b8:	20008484 	.word	0x20008484
 80ad8bc:	20008488 	.word	0x20008488

080ad8c0 <speedv_disable>:

int speedv_disable()
{
 80ad8c0:	b580      	push	{r7, lr}
 80ad8c2:	b096      	sub	sp, #88	; 0x58
 80ad8c4:	af00      	add	r7, sp, #0
  sensor_message_event_t sensor_msg_event;
  osStatus_t res;
  sensor_activate_count--;
 80ad8c6:	4b18      	ldr	r3, [pc, #96]	; (80ad928 <speedv_disable+0x68>)
 80ad8c8:	781b      	ldrb	r3, [r3, #0]
 80ad8ca:	3b01      	subs	r3, #1
 80ad8cc:	b2da      	uxtb	r2, r3
 80ad8ce:	4b16      	ldr	r3, [pc, #88]	; (80ad928 <speedv_disable+0x68>)
 80ad8d0:	701a      	strb	r2, [r3, #0]
  if (sensor_activate_count == 0) {
 80ad8d2:	4b15      	ldr	r3, [pc, #84]	; (80ad928 <speedv_disable+0x68>)
 80ad8d4:	781b      	ldrb	r3, [r3, #0]
 80ad8d6:	2b00      	cmp	r3, #0
 80ad8d8:	d120      	bne.n	80ad91c <speedv_disable+0x5c>
    sensor_msg_event.message_event_type = SENSOR_CONFIG_MESSAGE;
 80ad8da:	2300      	movs	r3, #0
 80ad8dc:	703b      	strb	r3, [r7, #0]
    sensor_msg_event.message_event_t.config_event.config_type =
 80ad8de:	2300      	movs	r3, #0
 80ad8e0:	727b      	strb	r3, [r7, #9]
        SENSOR_DEACTIVATE;
    sensor_msg_event.message_event_t.config_event.sensor_type =
 80ad8e2:	2308      	movs	r3, #8
 80ad8e4:	723b      	strb	r3, [r7, #8]
        SENSOR_TYPE_LIGHT_SPEED;
    osMessageQueuePut(speed_v_init_parms->SensorMessageQHandle,
 80ad8e6:	4b11      	ldr	r3, [pc, #68]	; (80ad92c <speedv_disable+0x6c>)
 80ad8e8:	681b      	ldr	r3, [r3, #0]
 80ad8ea:	f8d3 00f4 	ldr.w	r0, [r3, #244]	; 0xf4
 80ad8ee:	4639      	mov	r1, r7
 80ad8f0:	2300      	movs	r3, #0
 80ad8f2:	2200      	movs	r2, #0
 80ad8f4:	f008 fd86 	bl	80b6404 <osMessageQueuePut>
                      &sensor_msg_event, 0, 0);
    sensor_msg_event.message_event_type = SENSOR_CONFIG_MESSAGE;
 80ad8f8:	2300      	movs	r3, #0
 80ad8fa:	703b      	strb	r3, [r7, #0]
    sensor_msg_event.message_event_t.config_event.config_type =
 80ad8fc:	2300      	movs	r3, #0
 80ad8fe:	727b      	strb	r3, [r7, #9]
        SENSOR_DEACTIVATE;
    sensor_msg_event.message_event_t.config_event.sensor_type =
 80ad900:	2306      	movs	r3, #6
 80ad902:	723b      	strb	r3, [r7, #8]
        SENSOR_TYPE_PROXIMITY_BOT;
    osMessageQueuePut(speed_v_init_parms->SensorMessageQHandle,
 80ad904:	4b09      	ldr	r3, [pc, #36]	; (80ad92c <speedv_disable+0x6c>)
 80ad906:	681b      	ldr	r3, [r3, #0]
 80ad908:	f8d3 00f4 	ldr.w	r0, [r3, #244]	; 0xf4
 80ad90c:	4639      	mov	r1, r7
 80ad90e:	2300      	movs	r3, #0
 80ad910:	2200      	movs	r2, #0
 80ad912:	f008 fd77 	bl	80b6404 <osMessageQueuePut>
                      &sensor_msg_event, 0, 0);
    speed_v_activated = false;
 80ad916:	4b06      	ldr	r3, [pc, #24]	; (80ad930 <speedv_disable+0x70>)
 80ad918:	2200      	movs	r2, #0
 80ad91a:	701a      	strb	r2, [r3, #0]
  }
}
 80ad91c:	bf00      	nop
 80ad91e:	4618      	mov	r0, r3
 80ad920:	3758      	adds	r7, #88	; 0x58
 80ad922:	46bd      	mov	sp, r7
 80ad924:	bd80      	pop	{r7, pc}
 80ad926:	bf00      	nop
 80ad928:	20008489 	.word	0x20008489
 80ad92c:	20008484 	.word	0x20008484
 80ad930:	20008488 	.word	0x20008488

080ad934 <speedv_activate>:

int speedv_activate(bool activate)
{
 80ad934:	b580      	push	{r7, lr}
 80ad936:	b082      	sub	sp, #8
 80ad938:	af00      	add	r7, sp, #0
 80ad93a:	4603      	mov	r3, r0
 80ad93c:	71fb      	strb	r3, [r7, #7]
  if (activate) {
 80ad93e:	79fb      	ldrb	r3, [r7, #7]
 80ad940:	2b00      	cmp	r3, #0
 80ad942:	d002      	beq.n	80ad94a <speedv_activate+0x16>
    speedv_enable();
 80ad944:	f7ff ff82 	bl	80ad84c <speedv_enable>
 80ad948:	e001      	b.n	80ad94e <speedv_activate+0x1a>
  } else {
    speedv_disable();
 80ad94a:	f7ff ffb9 	bl	80ad8c0 <speedv_disable>
  }
  return SENSOR_SUCCESS;
 80ad94e:	2300      	movs	r3, #0
}
 80ad950:	4618      	mov	r0, r3
 80ad952:	3708      	adds	r7, #8
 80ad954:	46bd      	mov	sp, r7
 80ad956:	bd80      	pop	{r7, pc}

080ad958 <speedv_publish_sensor_data>:

int speedv_publish_sensor_data(void *para)
{
 80ad958:	b5b0      	push	{r4, r5, r7, lr}
 80ad95a:	b098      	sub	sp, #96	; 0x60
 80ad95c:	af00      	add	r7, sp, #0
 80ad95e:	6078      	str	r0, [r7, #4]
  /* Read samples in polling mode (no int) */
  sensors_event_t sensor_data = { 0 };
 80ad960:	f107 0308 	add.w	r3, r7, #8
 80ad964:	2250      	movs	r2, #80	; 0x50
 80ad966:	2100      	movs	r1, #0
 80ad968:	4618      	mov	r0, r3
 80ad96a:	f012 fb27 	bl	80bffbc <memset>
  uint64_t difftime = 0;
 80ad96e:	f04f 0200 	mov.w	r2, #0
 80ad972:	f04f 0300 	mov.w	r3, #0
 80ad976:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  if (speed_v_activated) {
 80ad97a:	4b2d      	ldr	r3, [pc, #180]	; (80ada30 <speedv_publish_sensor_data+0xd8>)
 80ad97c:	781b      	ldrb	r3, [r3, #0]
 80ad97e:	2b00      	cmp	r3, #0
 80ad980:	d050      	beq.n	80ada24 <speedv_publish_sensor_data+0xcc>
    //send related messages to SensorDataQ
    sensor_data.sensor_type = SENSOR_TYPE_SPEED_VECTOR;
 80ad982:	230e      	movs	r3, #14
 80ad984:	723b      	strb	r3, [r7, #8]
    sensor_data.accuracy = 3;
 80ad986:	2303      	movs	r3, #3
 80ad988:	727b      	strb	r3, [r7, #9]
    sensor_data.timestamp = sensor_get_timestamp();
 80ad98a:	f7ff febd 	bl	80ad708 <sensor_get_timestamp>
 80ad98e:	4602      	mov	r2, r0
 80ad990:	460b      	mov	r3, r1
 80ad992:	e9c7 2304 	strd	r2, r3, [r7, #16]
    if (last_op_timestamp == 0)
 80ad996:	4b27      	ldr	r3, [pc, #156]	; (80ada34 <speedv_publish_sensor_data+0xdc>)
 80ad998:	e9d3 2300 	ldrd	r2, r3, [r3]
 80ad99c:	4313      	orrs	r3, r2
 80ad99e:	d106      	bne.n	80ad9ae <speedv_publish_sensor_data+0x56>
      last_op_timestamp = current_op_timestamp;
 80ad9a0:	4b25      	ldr	r3, [pc, #148]	; (80ada38 <speedv_publish_sensor_data+0xe0>)
 80ad9a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80ad9a6:	4923      	ldr	r1, [pc, #140]	; (80ada34 <speedv_publish_sensor_data+0xdc>)
 80ad9a8:	e9c1 2300 	strd	r2, r3, [r1]
 80ad9ac:	e03a      	b.n	80ada24 <speedv_publish_sensor_data+0xcc>
    else {
      difftime = current_op_timestamp - last_op_timestamp;
 80ad9ae:	4b22      	ldr	r3, [pc, #136]	; (80ada38 <speedv_publish_sensor_data+0xe0>)
 80ad9b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80ad9b4:	4b1f      	ldr	r3, [pc, #124]	; (80ada34 <speedv_publish_sensor_data+0xdc>)
 80ad9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80ad9ba:	1a84      	subs	r4, r0, r2
 80ad9bc:	eb61 0503 	sbc.w	r5, r1, r3
 80ad9c0:	e9c7 4516 	strd	r4, r5, [r7, #88]	; 0x58
      if (difftime > 0) {
 80ad9c4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80ad9c8:	4313      	orrs	r3, r2
 80ad9ca:	d02b      	beq.n	80ada24 <speedv_publish_sensor_data+0xcc>
        sensor_data.sensor_data_t.vec.data[0] =
        raw_optical_data[0] * raw_proximity_data / 1000;
 80ad9cc:	4b1b      	ldr	r3, [pc, #108]	; (80ada3c <speedv_publish_sensor_data+0xe4>)
 80ad9ce:	ed93 7a00 	vldr	s14, [r3]
 80ad9d2:	4b1b      	ldr	r3, [pc, #108]	; (80ada40 <speedv_publish_sensor_data+0xe8>)
 80ad9d4:	edd3 7a00 	vldr	s15, [r3]
 80ad9d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80ad9dc:	eddf 6a19 	vldr	s13, [pc, #100]	; 80ada44 <speedv_publish_sensor_data+0xec>
 80ad9e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
        sensor_data.sensor_data_t.vec.data[0] =
 80ad9e4:	edc7 7a06 	vstr	s15, [r7, #24]
        sensor_data.sensor_data_t.vec.data[1] =
        raw_optical_data[1] * raw_proximity_data / 1000;
 80ad9e8:	4b14      	ldr	r3, [pc, #80]	; (80ada3c <speedv_publish_sensor_data+0xe4>)
 80ad9ea:	ed93 7a01 	vldr	s14, [r3, #4]
 80ad9ee:	4b14      	ldr	r3, [pc, #80]	; (80ada40 <speedv_publish_sensor_data+0xe8>)
 80ad9f0:	edd3 7a00 	vldr	s15, [r3]
 80ad9f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80ad9f8:	eddf 6a12 	vldr	s13, [pc, #72]	; 80ada44 <speedv_publish_sensor_data+0xec>
 80ad9fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
        sensor_data.sensor_data_t.vec.data[1] =
 80ada00:	edc7 7a07 	vstr	s15, [r7, #28]
        osMessageQueuePut(speed_v_init_parms->SensorDataQHandle, &sensor_data, 0, 0);
 80ada04:	4b10      	ldr	r3, [pc, #64]	; (80ada48 <speedv_publish_sensor_data+0xf0>)
 80ada06:	681b      	ldr	r3, [r3, #0]
 80ada08:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 80ada0c:	f107 0108 	add.w	r1, r7, #8
 80ada10:	2300      	movs	r3, #0
 80ada12:	2200      	movs	r2, #0
 80ada14:	f008 fcf6 	bl	80b6404 <osMessageQueuePut>
        last_op_timestamp = current_op_timestamp;
 80ada18:	4b07      	ldr	r3, [pc, #28]	; (80ada38 <speedv_publish_sensor_data+0xe0>)
 80ada1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80ada1e:	4905      	ldr	r1, [pc, #20]	; (80ada34 <speedv_publish_sensor_data+0xdc>)
 80ada20:	e9c1 2300 	strd	r2, r3, [r1]
      }
    }
  }
  return SENSOR_SUCCESS;
 80ada24:	2300      	movs	r3, #0
}
 80ada26:	4618      	mov	r0, r3
 80ada28:	3760      	adds	r7, #96	; 0x60
 80ada2a:	46bd      	mov	sp, r7
 80ada2c:	bdb0      	pop	{r4, r5, r7, pc}
 80ada2e:	bf00      	nop
 80ada30:	20008488 	.word	0x20008488
 80ada34:	20008490 	.word	0x20008490
 80ada38:	20008498 	.word	0x20008498
 80ada3c:	200084a0 	.word	0x200084a0
 80ada40:	2000848c 	.word	0x2000848c
 80ada44:	447a0000 	.word	0x447a0000
 80ada48:	20008484 	.word	0x20008484

080ada4c <speedv_config>:

int speedv_config(uint8_t config_type, void *para)
{
 80ada4c:	b480      	push	{r7}
 80ada4e:	b085      	sub	sp, #20
 80ada50:	af00      	add	r7, sp, #0
 80ada52:	4603      	mov	r3, r0
 80ada54:	6039      	str	r1, [r7, #0]
 80ada56:	71fb      	strb	r3, [r7, #7]
  sensors_event_t *sensor_data;
  sensor_data = (sensors_event_t *) para;
 80ada58:	683b      	ldr	r3, [r7, #0]
 80ada5a:	60fb      	str	r3, [r7, #12]
  if (config_type == SENSOR_CONFIG_DATA) {
 80ada5c:	79fb      	ldrb	r3, [r7, #7]
 80ada5e:	2b07      	cmp	r3, #7
 80ada60:	d11a      	bne.n	80ada98 <speedv_config+0x4c>
    if (sensor_data->sensor_type == SENSOR_TYPE_LIGHT_SPEED) {
 80ada62:	68fb      	ldr	r3, [r7, #12]
 80ada64:	781b      	ldrb	r3, [r3, #0]
 80ada66:	2b08      	cmp	r3, #8
 80ada68:	d10e      	bne.n	80ada88 <speedv_config+0x3c>
      raw_optical_data[0] = sensor_data->sensor_data_t.vec.data[0];
 80ada6a:	68fb      	ldr	r3, [r7, #12]
 80ada6c:	691b      	ldr	r3, [r3, #16]
 80ada6e:	4a0e      	ldr	r2, [pc, #56]	; (80adaa8 <speedv_config+0x5c>)
 80ada70:	6013      	str	r3, [r2, #0]
      raw_optical_data[1] = sensor_data->sensor_data_t.vec.data[1];
 80ada72:	68fb      	ldr	r3, [r7, #12]
 80ada74:	695b      	ldr	r3, [r3, #20]
 80ada76:	4a0c      	ldr	r2, [pc, #48]	; (80adaa8 <speedv_config+0x5c>)
 80ada78:	6053      	str	r3, [r2, #4]
      current_op_timestamp = sensor_data->timestamp;
 80ada7a:	68fb      	ldr	r3, [r7, #12]
 80ada7c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80ada80:	490a      	ldr	r1, [pc, #40]	; (80adaac <speedv_config+0x60>)
 80ada82:	e9c1 2300 	strd	r2, r3, [r1]
 80ada86:	e007      	b.n	80ada98 <speedv_config+0x4c>
    } else if (sensor_data->sensor_type == SENSOR_TYPE_PROXIMITY_BOT) {
 80ada88:	68fb      	ldr	r3, [r7, #12]
 80ada8a:	781b      	ldrb	r3, [r3, #0]
 80ada8c:	2b06      	cmp	r3, #6
 80ada8e:	d103      	bne.n	80ada98 <speedv_config+0x4c>
      raw_proximity_data = sensor_data->sensor_data_t.vec.data[0];
 80ada90:	68fb      	ldr	r3, [r7, #12]
 80ada92:	691b      	ldr	r3, [r3, #16]
 80ada94:	4a06      	ldr	r2, [pc, #24]	; (80adab0 <speedv_config+0x64>)
 80ada96:	6013      	str	r3, [r2, #0]
    }
  }
  return SENSOR_SUCCESS;
 80ada98:	2300      	movs	r3, #0
}
 80ada9a:	4618      	mov	r0, r3
 80ada9c:	3714      	adds	r7, #20
 80ada9e:	46bd      	mov	sp, r7
 80adaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80adaa4:	4770      	bx	lr
 80adaa6:	bf00      	nop
 80adaa8:	200084a0 	.word	0x200084a0
 80adaac:	20008498 	.word	0x20008498
 80adab0:	2000848c 	.word	0x2000848c

080adab4 <speedv_publish_config_resp>:

int speedv_publish_config_resp(void *para)
{
 80adab4:	b480      	push	{r7}
 80adab6:	b083      	sub	sp, #12
 80adab8:	af00      	add	r7, sp, #0
 80adaba:	6078      	str	r0, [r7, #4]
  return SENSOR_SUCCESS;
 80adabc:	2300      	movs	r3, #0
}
 80adabe:	4618      	mov	r0, r3
 80adac0:	370c      	adds	r7, #12
 80adac2:	46bd      	mov	sp, r7
 80adac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80adac8:	4770      	bx	lr
	...

080adacc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef * htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80adacc:	b580      	push	{r7, lr}
 80adace:	b082      	sub	sp, #8
 80adad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80adad2:	2300      	movs	r3, #0
 80adad4:	607b      	str	r3, [r7, #4]
 80adad6:	4b12      	ldr	r3, [pc, #72]	; (80adb20 <HAL_MspInit+0x54>)
 80adad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80adada:	4a11      	ldr	r2, [pc, #68]	; (80adb20 <HAL_MspInit+0x54>)
 80adadc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80adae0:	6453      	str	r3, [r2, #68]	; 0x44
 80adae2:	4b0f      	ldr	r3, [pc, #60]	; (80adb20 <HAL_MspInit+0x54>)
 80adae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80adae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80adaea:	607b      	str	r3, [r7, #4]
 80adaec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80adaee:	2300      	movs	r3, #0
 80adaf0:	603b      	str	r3, [r7, #0]
 80adaf2:	4b0b      	ldr	r3, [pc, #44]	; (80adb20 <HAL_MspInit+0x54>)
 80adaf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80adaf6:	4a0a      	ldr	r2, [pc, #40]	; (80adb20 <HAL_MspInit+0x54>)
 80adaf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80adafc:	6413      	str	r3, [r2, #64]	; 0x40
 80adafe:	4b08      	ldr	r3, [pc, #32]	; (80adb20 <HAL_MspInit+0x54>)
 80adb00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80adb02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80adb06:	603b      	str	r3, [r7, #0]
 80adb08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init */
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80adb0a:	2200      	movs	r2, #0
 80adb0c:	210f      	movs	r1, #15
 80adb0e:	f06f 0001 	mvn.w	r0, #1
 80adb12:	f002 fcf3 	bl	80b04fc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80adb16:	bf00      	nop
 80adb18:	3708      	adds	r7, #8
 80adb1a:	46bd      	mov	sp, r7
 80adb1c:	bd80      	pop	{r7, pc}
 80adb1e:	bf00      	nop
 80adb20:	40023800 	.word	0x40023800

080adb24 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef * hcan)
{
 80adb24:	b580      	push	{r7, lr}
 80adb26:	b08c      	sub	sp, #48	; 0x30
 80adb28:	af00      	add	r7, sp, #0
 80adb2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80adb2c:	f107 031c 	add.w	r3, r7, #28
 80adb30:	2200      	movs	r2, #0
 80adb32:	601a      	str	r2, [r3, #0]
 80adb34:	605a      	str	r2, [r3, #4]
 80adb36:	609a      	str	r2, [r3, #8]
 80adb38:	60da      	str	r2, [r3, #12]
 80adb3a:	611a      	str	r2, [r3, #16]
  if (hcan->Instance == CAN1) {
 80adb3c:	687b      	ldr	r3, [r7, #4]
 80adb3e:	681b      	ldr	r3, [r3, #0]
 80adb40:	4a4a      	ldr	r2, [pc, #296]	; (80adc6c <HAL_CAN_MspInit+0x148>)
 80adb42:	4293      	cmp	r3, r2
 80adb44:	d13e      	bne.n	80adbc4 <HAL_CAN_MspInit+0xa0>
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80adb46:	4b4a      	ldr	r3, [pc, #296]	; (80adc70 <HAL_CAN_MspInit+0x14c>)
 80adb48:	681b      	ldr	r3, [r3, #0]
 80adb4a:	3301      	adds	r3, #1
 80adb4c:	4a48      	ldr	r2, [pc, #288]	; (80adc70 <HAL_CAN_MspInit+0x14c>)
 80adb4e:	6013      	str	r3, [r2, #0]
    if (HAL_RCC_CAN1_CLK_ENABLED == 1) {
 80adb50:	4b47      	ldr	r3, [pc, #284]	; (80adc70 <HAL_CAN_MspInit+0x14c>)
 80adb52:	681b      	ldr	r3, [r3, #0]
 80adb54:	2b01      	cmp	r3, #1
 80adb56:	d10d      	bne.n	80adb74 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80adb58:	2300      	movs	r3, #0
 80adb5a:	61bb      	str	r3, [r7, #24]
 80adb5c:	4b45      	ldr	r3, [pc, #276]	; (80adc74 <HAL_CAN_MspInit+0x150>)
 80adb5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80adb60:	4a44      	ldr	r2, [pc, #272]	; (80adc74 <HAL_CAN_MspInit+0x150>)
 80adb62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80adb66:	6413      	str	r3, [r2, #64]	; 0x40
 80adb68:	4b42      	ldr	r3, [pc, #264]	; (80adc74 <HAL_CAN_MspInit+0x150>)
 80adb6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80adb6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80adb70:	61bb      	str	r3, [r7, #24]
 80adb72:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80adb74:	2300      	movs	r3, #0
 80adb76:	617b      	str	r3, [r7, #20]
 80adb78:	4b3e      	ldr	r3, [pc, #248]	; (80adc74 <HAL_CAN_MspInit+0x150>)
 80adb7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80adb7c:	4a3d      	ldr	r2, [pc, #244]	; (80adc74 <HAL_CAN_MspInit+0x150>)
 80adb7e:	f043 0301 	orr.w	r3, r3, #1
 80adb82:	6313      	str	r3, [r2, #48]	; 0x30
 80adb84:	4b3b      	ldr	r3, [pc, #236]	; (80adc74 <HAL_CAN_MspInit+0x150>)
 80adb86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80adb88:	f003 0301 	and.w	r3, r3, #1
 80adb8c:	617b      	str	r3, [r7, #20]
 80adb8e:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 80adb90:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80adb94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80adb96:	2302      	movs	r3, #2
 80adb98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80adb9a:	2300      	movs	r3, #0
 80adb9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80adb9e:	2303      	movs	r3, #3
 80adba0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80adba2:	2309      	movs	r3, #9
 80adba4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80adba6:	f107 031c 	add.w	r3, r7, #28
 80adbaa:	4619      	mov	r1, r3
 80adbac:	4832      	ldr	r0, [pc, #200]	; (80adc78 <HAL_CAN_MspInit+0x154>)
 80adbae:	f003 fbb7 	bl	80b1320 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80adbb2:	2200      	movs	r2, #0
 80adbb4:	2105      	movs	r1, #5
 80adbb6:	2014      	movs	r0, #20
 80adbb8:	f002 fca0 	bl	80b04fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80adbbc:	2014      	movs	r0, #20
 80adbbe:	f002 fcb9 	bl	80b0534 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN CAN2_MspInit 1 */

    /* USER CODE END CAN2_MspInit 1 */
  }

}
 80adbc2:	e04f      	b.n	80adc64 <HAL_CAN_MspInit+0x140>
  } else if (hcan->Instance == CAN2) {
 80adbc4:	687b      	ldr	r3, [r7, #4]
 80adbc6:	681b      	ldr	r3, [r3, #0]
 80adbc8:	4a2c      	ldr	r2, [pc, #176]	; (80adc7c <HAL_CAN_MspInit+0x158>)
 80adbca:	4293      	cmp	r3, r2
 80adbcc:	d14a      	bne.n	80adc64 <HAL_CAN_MspInit+0x140>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80adbce:	2300      	movs	r3, #0
 80adbd0:	613b      	str	r3, [r7, #16]
 80adbd2:	4b28      	ldr	r3, [pc, #160]	; (80adc74 <HAL_CAN_MspInit+0x150>)
 80adbd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80adbd6:	4a27      	ldr	r2, [pc, #156]	; (80adc74 <HAL_CAN_MspInit+0x150>)
 80adbd8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80adbdc:	6413      	str	r3, [r2, #64]	; 0x40
 80adbde:	4b25      	ldr	r3, [pc, #148]	; (80adc74 <HAL_CAN_MspInit+0x150>)
 80adbe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80adbe2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80adbe6:	613b      	str	r3, [r7, #16]
 80adbe8:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80adbea:	4b21      	ldr	r3, [pc, #132]	; (80adc70 <HAL_CAN_MspInit+0x14c>)
 80adbec:	681b      	ldr	r3, [r3, #0]
 80adbee:	3301      	adds	r3, #1
 80adbf0:	4a1f      	ldr	r2, [pc, #124]	; (80adc70 <HAL_CAN_MspInit+0x14c>)
 80adbf2:	6013      	str	r3, [r2, #0]
    if (HAL_RCC_CAN1_CLK_ENABLED == 1) {
 80adbf4:	4b1e      	ldr	r3, [pc, #120]	; (80adc70 <HAL_CAN_MspInit+0x14c>)
 80adbf6:	681b      	ldr	r3, [r3, #0]
 80adbf8:	2b01      	cmp	r3, #1
 80adbfa:	d10d      	bne.n	80adc18 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80adbfc:	2300      	movs	r3, #0
 80adbfe:	60fb      	str	r3, [r7, #12]
 80adc00:	4b1c      	ldr	r3, [pc, #112]	; (80adc74 <HAL_CAN_MspInit+0x150>)
 80adc02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80adc04:	4a1b      	ldr	r2, [pc, #108]	; (80adc74 <HAL_CAN_MspInit+0x150>)
 80adc06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80adc0a:	6413      	str	r3, [r2, #64]	; 0x40
 80adc0c:	4b19      	ldr	r3, [pc, #100]	; (80adc74 <HAL_CAN_MspInit+0x150>)
 80adc0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80adc10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80adc14:	60fb      	str	r3, [r7, #12]
 80adc16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80adc18:	2300      	movs	r3, #0
 80adc1a:	60bb      	str	r3, [r7, #8]
 80adc1c:	4b15      	ldr	r3, [pc, #84]	; (80adc74 <HAL_CAN_MspInit+0x150>)
 80adc1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80adc20:	4a14      	ldr	r2, [pc, #80]	; (80adc74 <HAL_CAN_MspInit+0x150>)
 80adc22:	f043 0302 	orr.w	r3, r3, #2
 80adc26:	6313      	str	r3, [r2, #48]	; 0x30
 80adc28:	4b12      	ldr	r3, [pc, #72]	; (80adc74 <HAL_CAN_MspInit+0x150>)
 80adc2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80adc2c:	f003 0302 	and.w	r3, r3, #2
 80adc30:	60bb      	str	r3, [r7, #8]
 80adc32:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80adc34:	2360      	movs	r3, #96	; 0x60
 80adc36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80adc38:	2302      	movs	r3, #2
 80adc3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80adc3c:	2300      	movs	r3, #0
 80adc3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80adc40:	2303      	movs	r3, #3
 80adc42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80adc44:	2309      	movs	r3, #9
 80adc46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80adc48:	f107 031c 	add.w	r3, r7, #28
 80adc4c:	4619      	mov	r1, r3
 80adc4e:	480c      	ldr	r0, [pc, #48]	; (80adc80 <HAL_CAN_MspInit+0x15c>)
 80adc50:	f003 fb66 	bl	80b1320 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 80adc54:	2200      	movs	r2, #0
 80adc56:	2105      	movs	r1, #5
 80adc58:	2040      	movs	r0, #64	; 0x40
 80adc5a:	f002 fc4f 	bl	80b04fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80adc5e:	2040      	movs	r0, #64	; 0x40
 80adc60:	f002 fc68 	bl	80b0534 <HAL_NVIC_EnableIRQ>
}
 80adc64:	bf00      	nop
 80adc66:	3730      	adds	r7, #48	; 0x30
 80adc68:	46bd      	mov	sp, r7
 80adc6a:	bd80      	pop	{r7, pc}
 80adc6c:	40006400 	.word	0x40006400
 80adc70:	200084a8 	.word	0x200084a8
 80adc74:	40023800 	.word	0x40023800
 80adc78:	40020000 	.word	0x40020000
 80adc7c:	40006800 	.word	0x40006800
 80adc80:	40020400 	.word	0x40020400

080adc84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef * hi2c)
{
 80adc84:	b580      	push	{r7, lr}
 80adc86:	b08a      	sub	sp, #40	; 0x28
 80adc88:	af00      	add	r7, sp, #0
 80adc8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80adc8c:	f107 0314 	add.w	r3, r7, #20
 80adc90:	2200      	movs	r2, #0
 80adc92:	601a      	str	r2, [r3, #0]
 80adc94:	605a      	str	r2, [r3, #4]
 80adc96:	609a      	str	r2, [r3, #8]
 80adc98:	60da      	str	r2, [r3, #12]
 80adc9a:	611a      	str	r2, [r3, #16]
  if (hi2c->Instance == I2C2) {
 80adc9c:	687b      	ldr	r3, [r7, #4]
 80adc9e:	681b      	ldr	r3, [r3, #0]
 80adca0:	4a19      	ldr	r2, [pc, #100]	; (80add08 <HAL_I2C_MspInit+0x84>)
 80adca2:	4293      	cmp	r3, r2
 80adca4:	d12c      	bne.n	80add00 <HAL_I2C_MspInit+0x7c>
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80adca6:	2300      	movs	r3, #0
 80adca8:	613b      	str	r3, [r7, #16]
 80adcaa:	4b18      	ldr	r3, [pc, #96]	; (80add0c <HAL_I2C_MspInit+0x88>)
 80adcac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80adcae:	4a17      	ldr	r2, [pc, #92]	; (80add0c <HAL_I2C_MspInit+0x88>)
 80adcb0:	f043 0302 	orr.w	r3, r3, #2
 80adcb4:	6313      	str	r3, [r2, #48]	; 0x30
 80adcb6:	4b15      	ldr	r3, [pc, #84]	; (80add0c <HAL_I2C_MspInit+0x88>)
 80adcb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80adcba:	f003 0302 	and.w	r3, r3, #2
 80adcbe:	613b      	str	r3, [r7, #16]
 80adcc0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_11;
 80adcc2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80adcc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80adcc8:	2312      	movs	r3, #18
 80adcca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80adccc:	2301      	movs	r3, #1
 80adcce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80adcd0:	2303      	movs	r3, #3
 80adcd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80adcd4:	2304      	movs	r3, #4
 80adcd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80adcd8:	f107 0314 	add.w	r3, r7, #20
 80adcdc:	4619      	mov	r1, r3
 80adcde:	480c      	ldr	r0, [pc, #48]	; (80add10 <HAL_I2C_MspInit+0x8c>)
 80adce0:	f003 fb1e 	bl	80b1320 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80adce4:	2300      	movs	r3, #0
 80adce6:	60fb      	str	r3, [r7, #12]
 80adce8:	4b08      	ldr	r3, [pc, #32]	; (80add0c <HAL_I2C_MspInit+0x88>)
 80adcea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80adcec:	4a07      	ldr	r2, [pc, #28]	; (80add0c <HAL_I2C_MspInit+0x88>)
 80adcee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80adcf2:	6413      	str	r3, [r2, #64]	; 0x40
 80adcf4:	4b05      	ldr	r3, [pc, #20]	; (80add0c <HAL_I2C_MspInit+0x88>)
 80adcf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80adcf8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80adcfc:	60fb      	str	r3, [r7, #12]
 80adcfe:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 80add00:	bf00      	nop
 80add02:	3728      	adds	r7, #40	; 0x28
 80add04:	46bd      	mov	sp, r7
 80add06:	bd80      	pop	{r7, pc}
 80add08:	40005800 	.word	0x40005800
 80add0c:	40023800 	.word	0x40023800
 80add10:	40020400 	.word	0x40020400

080add14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef * hspi)
{
 80add14:	b580      	push	{r7, lr}
 80add16:	b08a      	sub	sp, #40	; 0x28
 80add18:	af00      	add	r7, sp, #0
 80add1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80add1c:	f107 0314 	add.w	r3, r7, #20
 80add20:	2200      	movs	r2, #0
 80add22:	601a      	str	r2, [r3, #0]
 80add24:	605a      	str	r2, [r3, #4]
 80add26:	609a      	str	r2, [r3, #8]
 80add28:	60da      	str	r2, [r3, #12]
 80add2a:	611a      	str	r2, [r3, #16]
  if (hspi->Instance == SPI1) {
 80add2c:	687b      	ldr	r3, [r7, #4]
 80add2e:	681b      	ldr	r3, [r3, #0]
 80add30:	4a19      	ldr	r2, [pc, #100]	; (80add98 <HAL_SPI_MspInit+0x84>)
 80add32:	4293      	cmp	r3, r2
 80add34:	d12b      	bne.n	80add8e <HAL_SPI_MspInit+0x7a>
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80add36:	2300      	movs	r3, #0
 80add38:	613b      	str	r3, [r7, #16]
 80add3a:	4b18      	ldr	r3, [pc, #96]	; (80add9c <HAL_SPI_MspInit+0x88>)
 80add3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80add3e:	4a17      	ldr	r2, [pc, #92]	; (80add9c <HAL_SPI_MspInit+0x88>)
 80add40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80add44:	6453      	str	r3, [r2, #68]	; 0x44
 80add46:	4b15      	ldr	r3, [pc, #84]	; (80add9c <HAL_SPI_MspInit+0x88>)
 80add48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80add4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80add4e:	613b      	str	r3, [r7, #16]
 80add50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80add52:	2300      	movs	r3, #0
 80add54:	60fb      	str	r3, [r7, #12]
 80add56:	4b11      	ldr	r3, [pc, #68]	; (80add9c <HAL_SPI_MspInit+0x88>)
 80add58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80add5a:	4a10      	ldr	r2, [pc, #64]	; (80add9c <HAL_SPI_MspInit+0x88>)
 80add5c:	f043 0301 	orr.w	r3, r3, #1
 80add60:	6313      	str	r3, [r2, #48]	; 0x30
 80add62:	4b0e      	ldr	r3, [pc, #56]	; (80add9c <HAL_SPI_MspInit+0x88>)
 80add64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80add66:	f003 0301 	and.w	r3, r3, #1
 80add6a:	60fb      	str	r3, [r7, #12]
 80add6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 80add6e:	23e0      	movs	r3, #224	; 0xe0
 80add70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80add72:	2302      	movs	r3, #2
 80add74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80add76:	2300      	movs	r3, #0
 80add78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80add7a:	2303      	movs	r3, #3
 80add7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80add7e:	2305      	movs	r3, #5
 80add80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80add82:	f107 0314 	add.w	r3, r7, #20
 80add86:	4619      	mov	r1, r3
 80add88:	4805      	ldr	r0, [pc, #20]	; (80adda0 <HAL_SPI_MspInit+0x8c>)
 80add8a:	f003 fac9 	bl	80b1320 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI1_MspInit 1 */

    /* USER CODE END SPI1_MspInit 1 */
  }

}
 80add8e:	bf00      	nop
 80add90:	3728      	adds	r7, #40	; 0x28
 80add92:	46bd      	mov	sp, r7
 80add94:	bd80      	pop	{r7, pc}
 80add96:	bf00      	nop
 80add98:	40013000 	.word	0x40013000
 80add9c:	40023800 	.word	0x40023800
 80adda0:	40020000 	.word	0x40020000

080adda4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef * htim_base)
{
 80adda4:	b580      	push	{r7, lr}
 80adda6:	b084      	sub	sp, #16
 80adda8:	af00      	add	r7, sp, #0
 80addaa:	6078      	str	r0, [r7, #4]
  if (htim_base->Instance == TIM2) {
 80addac:	687b      	ldr	r3, [r7, #4]
 80addae:	681b      	ldr	r3, [r3, #0]
 80addb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80addb4:	d10e      	bne.n	80addd4 <HAL_TIM_Base_MspInit+0x30>
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80addb6:	2300      	movs	r3, #0
 80addb8:	60fb      	str	r3, [r7, #12]
 80addba:	4b16      	ldr	r3, [pc, #88]	; (80ade14 <HAL_TIM_Base_MspInit+0x70>)
 80addbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80addbe:	4a15      	ldr	r2, [pc, #84]	; (80ade14 <HAL_TIM_Base_MspInit+0x70>)
 80addc0:	f043 0301 	orr.w	r3, r3, #1
 80addc4:	6413      	str	r3, [r2, #64]	; 0x40
 80addc6:	4b13      	ldr	r3, [pc, #76]	; (80ade14 <HAL_TIM_Base_MspInit+0x70>)
 80addc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80addca:	f003 0301 	and.w	r3, r3, #1
 80addce:	60fb      	str	r3, [r7, #12]
 80addd0:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 80addd2:	e01a      	b.n	80ade0a <HAL_TIM_Base_MspInit+0x66>
  } else if (htim_base->Instance == TIM3) {
 80addd4:	687b      	ldr	r3, [r7, #4]
 80addd6:	681b      	ldr	r3, [r3, #0]
 80addd8:	4a0f      	ldr	r2, [pc, #60]	; (80ade18 <HAL_TIM_Base_MspInit+0x74>)
 80addda:	4293      	cmp	r3, r2
 80adddc:	d115      	bne.n	80ade0a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80addde:	2300      	movs	r3, #0
 80adde0:	60bb      	str	r3, [r7, #8]
 80adde2:	4b0c      	ldr	r3, [pc, #48]	; (80ade14 <HAL_TIM_Base_MspInit+0x70>)
 80adde4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80adde6:	4a0b      	ldr	r2, [pc, #44]	; (80ade14 <HAL_TIM_Base_MspInit+0x70>)
 80adde8:	f043 0302 	orr.w	r3, r3, #2
 80addec:	6413      	str	r3, [r2, #64]	; 0x40
 80addee:	4b09      	ldr	r3, [pc, #36]	; (80ade14 <HAL_TIM_Base_MspInit+0x70>)
 80addf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80addf2:	f003 0302 	and.w	r3, r3, #2
 80addf6:	60bb      	str	r3, [r7, #8]
 80addf8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80addfa:	2200      	movs	r2, #0
 80addfc:	2105      	movs	r1, #5
 80addfe:	201d      	movs	r0, #29
 80ade00:	f002 fb7c 	bl	80b04fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80ade04:	201d      	movs	r0, #29
 80ade06:	f002 fb95 	bl	80b0534 <HAL_NVIC_EnableIRQ>
}
 80ade0a:	bf00      	nop
 80ade0c:	3710      	adds	r7, #16
 80ade0e:	46bd      	mov	sp, r7
 80ade10:	bd80      	pop	{r7, pc}
 80ade12:	bf00      	nop
 80ade14:	40023800 	.word	0x40023800
 80ade18:	40000400 	.word	0x40000400

080ade1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef * htim)
{
 80ade1c:	b580      	push	{r7, lr}
 80ade1e:	b088      	sub	sp, #32
 80ade20:	af00      	add	r7, sp, #0
 80ade22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80ade24:	f107 030c 	add.w	r3, r7, #12
 80ade28:	2200      	movs	r2, #0
 80ade2a:	601a      	str	r2, [r3, #0]
 80ade2c:	605a      	str	r2, [r3, #4]
 80ade2e:	609a      	str	r2, [r3, #8]
 80ade30:	60da      	str	r2, [r3, #12]
 80ade32:	611a      	str	r2, [r3, #16]
  if (htim->Instance == TIM2) {
 80ade34:	687b      	ldr	r3, [r7, #4]
 80ade36:	681b      	ldr	r3, [r3, #0]
 80ade38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80ade3c:	d11d      	bne.n	80ade7a <HAL_TIM_MspPostInit+0x5e>
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80ade3e:	2300      	movs	r3, #0
 80ade40:	60bb      	str	r3, [r7, #8]
 80ade42:	4b10      	ldr	r3, [pc, #64]	; (80ade84 <HAL_TIM_MspPostInit+0x68>)
 80ade44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80ade46:	4a0f      	ldr	r2, [pc, #60]	; (80ade84 <HAL_TIM_MspPostInit+0x68>)
 80ade48:	f043 0301 	orr.w	r3, r3, #1
 80ade4c:	6313      	str	r3, [r2, #48]	; 0x30
 80ade4e:	4b0d      	ldr	r3, [pc, #52]	; (80ade84 <HAL_TIM_MspPostInit+0x68>)
 80ade50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80ade52:	f003 0301 	and.w	r3, r3, #1
 80ade56:	60bb      	str	r3, [r7, #8]
 80ade58:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80ade5a:	2301      	movs	r3, #1
 80ade5c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80ade5e:	2302      	movs	r3, #2
 80ade60:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80ade62:	2300      	movs	r3, #0
 80ade64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80ade66:	2300      	movs	r3, #0
 80ade68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80ade6a:	2301      	movs	r3, #1
 80ade6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80ade6e:	f107 030c 	add.w	r3, r7, #12
 80ade72:	4619      	mov	r1, r3
 80ade74:	4804      	ldr	r0, [pc, #16]	; (80ade88 <HAL_TIM_MspPostInit+0x6c>)
 80ade76:	f003 fa53 	bl	80b1320 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80ade7a:	bf00      	nop
 80ade7c:	3720      	adds	r7, #32
 80ade7e:	46bd      	mov	sp, r7
 80ade80:	bd80      	pop	{r7, pc}
 80ade82:	bf00      	nop
 80ade84:	40023800 	.word	0x40023800
 80ade88:	40020000 	.word	0x40020000

080ade8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef * huart)
{
 80ade8c:	b580      	push	{r7, lr}
 80ade8e:	b08a      	sub	sp, #40	; 0x28
 80ade90:	af00      	add	r7, sp, #0
 80ade92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80ade94:	f107 0314 	add.w	r3, r7, #20
 80ade98:	2200      	movs	r2, #0
 80ade9a:	601a      	str	r2, [r3, #0]
 80ade9c:	605a      	str	r2, [r3, #4]
 80ade9e:	609a      	str	r2, [r3, #8]
 80adea0:	60da      	str	r2, [r3, #12]
 80adea2:	611a      	str	r2, [r3, #16]
  if (huart->Instance == USART2) {
 80adea4:	687b      	ldr	r3, [r7, #4]
 80adea6:	681b      	ldr	r3, [r3, #0]
 80adea8:	4a4c      	ldr	r2, [pc, #304]	; (80adfdc <HAL_UART_MspInit+0x150>)
 80adeaa:	4293      	cmp	r3, r2
 80adeac:	f040 8092 	bne.w	80adfd4 <HAL_UART_MspInit+0x148>
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80adeb0:	2300      	movs	r3, #0
 80adeb2:	613b      	str	r3, [r7, #16]
 80adeb4:	4b4a      	ldr	r3, [pc, #296]	; (80adfe0 <HAL_UART_MspInit+0x154>)
 80adeb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80adeb8:	4a49      	ldr	r2, [pc, #292]	; (80adfe0 <HAL_UART_MspInit+0x154>)
 80adeba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80adebe:	6413      	str	r3, [r2, #64]	; 0x40
 80adec0:	4b47      	ldr	r3, [pc, #284]	; (80adfe0 <HAL_UART_MspInit+0x154>)
 80adec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80adec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80adec8:	613b      	str	r3, [r7, #16]
 80adeca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80adecc:	2300      	movs	r3, #0
 80adece:	60fb      	str	r3, [r7, #12]
 80aded0:	4b43      	ldr	r3, [pc, #268]	; (80adfe0 <HAL_UART_MspInit+0x154>)
 80aded2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80aded4:	4a42      	ldr	r2, [pc, #264]	; (80adfe0 <HAL_UART_MspInit+0x154>)
 80aded6:	f043 0301 	orr.w	r3, r3, #1
 80adeda:	6313      	str	r3, [r2, #48]	; 0x30
 80adedc:	4b40      	ldr	r3, [pc, #256]	; (80adfe0 <HAL_UART_MspInit+0x154>)
 80adede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80adee0:	f003 0301 	and.w	r3, r3, #1
 80adee4:	60fb      	str	r3, [r7, #12]
 80adee6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 80adee8:	230c      	movs	r3, #12
 80adeea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80adeec:	2302      	movs	r3, #2
 80adeee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80adef0:	2300      	movs	r3, #0
 80adef2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80adef4:	2303      	movs	r3, #3
 80adef6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80adef8:	2307      	movs	r3, #7
 80adefa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80adefc:	f107 0314 	add.w	r3, r7, #20
 80adf00:	4619      	mov	r1, r3
 80adf02:	4838      	ldr	r0, [pc, #224]	; (80adfe4 <HAL_UART_MspInit+0x158>)
 80adf04:	f003 fa0c 	bl	80b1320 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80adf08:	4b37      	ldr	r3, [pc, #220]	; (80adfe8 <HAL_UART_MspInit+0x15c>)
 80adf0a:	4a38      	ldr	r2, [pc, #224]	; (80adfec <HAL_UART_MspInit+0x160>)
 80adf0c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80adf0e:	4b36      	ldr	r3, [pc, #216]	; (80adfe8 <HAL_UART_MspInit+0x15c>)
 80adf10:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80adf14:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80adf16:	4b34      	ldr	r3, [pc, #208]	; (80adfe8 <HAL_UART_MspInit+0x15c>)
 80adf18:	2200      	movs	r2, #0
 80adf1a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80adf1c:	4b32      	ldr	r3, [pc, #200]	; (80adfe8 <HAL_UART_MspInit+0x15c>)
 80adf1e:	2200      	movs	r2, #0
 80adf20:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80adf22:	4b31      	ldr	r3, [pc, #196]	; (80adfe8 <HAL_UART_MspInit+0x15c>)
 80adf24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80adf28:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80adf2a:	4b2f      	ldr	r3, [pc, #188]	; (80adfe8 <HAL_UART_MspInit+0x15c>)
 80adf2c:	2200      	movs	r2, #0
 80adf2e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80adf30:	4b2d      	ldr	r3, [pc, #180]	; (80adfe8 <HAL_UART_MspInit+0x15c>)
 80adf32:	2200      	movs	r2, #0
 80adf34:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80adf36:	4b2c      	ldr	r3, [pc, #176]	; (80adfe8 <HAL_UART_MspInit+0x15c>)
 80adf38:	f44f 7280 	mov.w	r2, #256	; 0x100
 80adf3c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80adf3e:	4b2a      	ldr	r3, [pc, #168]	; (80adfe8 <HAL_UART_MspInit+0x15c>)
 80adf40:	2200      	movs	r2, #0
 80adf42:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80adf44:	4b28      	ldr	r3, [pc, #160]	; (80adfe8 <HAL_UART_MspInit+0x15c>)
 80adf46:	2200      	movs	r2, #0
 80adf48:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK) {
 80adf4a:	4827      	ldr	r0, [pc, #156]	; (80adfe8 <HAL_UART_MspInit+0x15c>)
 80adf4c:	f002 fb0e 	bl	80b056c <HAL_DMA_Init>
 80adf50:	4603      	mov	r3, r0
 80adf52:	2b00      	cmp	r3, #0
 80adf54:	d001      	beq.n	80adf5a <HAL_UART_MspInit+0xce>
      Error_Handler();
 80adf56:	f7fb fddf 	bl	80a9b18 <Error_Handler>
    }

    __HAL_LINKDMA(huart, hdmarx, hdma_usart2_rx);
 80adf5a:	687b      	ldr	r3, [r7, #4]
 80adf5c:	4a22      	ldr	r2, [pc, #136]	; (80adfe8 <HAL_UART_MspInit+0x15c>)
 80adf5e:	639a      	str	r2, [r3, #56]	; 0x38
 80adf60:	4a21      	ldr	r2, [pc, #132]	; (80adfe8 <HAL_UART_MspInit+0x15c>)
 80adf62:	687b      	ldr	r3, [r7, #4]
 80adf64:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80adf66:	4b22      	ldr	r3, [pc, #136]	; (80adff0 <HAL_UART_MspInit+0x164>)
 80adf68:	4a22      	ldr	r2, [pc, #136]	; (80adff4 <HAL_UART_MspInit+0x168>)
 80adf6a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80adf6c:	4b20      	ldr	r3, [pc, #128]	; (80adff0 <HAL_UART_MspInit+0x164>)
 80adf6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80adf72:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80adf74:	4b1e      	ldr	r3, [pc, #120]	; (80adff0 <HAL_UART_MspInit+0x164>)
 80adf76:	2240      	movs	r2, #64	; 0x40
 80adf78:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80adf7a:	4b1d      	ldr	r3, [pc, #116]	; (80adff0 <HAL_UART_MspInit+0x164>)
 80adf7c:	2200      	movs	r2, #0
 80adf7e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80adf80:	4b1b      	ldr	r3, [pc, #108]	; (80adff0 <HAL_UART_MspInit+0x164>)
 80adf82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80adf86:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80adf88:	4b19      	ldr	r3, [pc, #100]	; (80adff0 <HAL_UART_MspInit+0x164>)
 80adf8a:	2200      	movs	r2, #0
 80adf8c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80adf8e:	4b18      	ldr	r3, [pc, #96]	; (80adff0 <HAL_UART_MspInit+0x164>)
 80adf90:	2200      	movs	r2, #0
 80adf92:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 80adf94:	4b16      	ldr	r3, [pc, #88]	; (80adff0 <HAL_UART_MspInit+0x164>)
 80adf96:	f44f 7280 	mov.w	r2, #256	; 0x100
 80adf9a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80adf9c:	4b14      	ldr	r3, [pc, #80]	; (80adff0 <HAL_UART_MspInit+0x164>)
 80adf9e:	2200      	movs	r2, #0
 80adfa0:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80adfa2:	4b13      	ldr	r3, [pc, #76]	; (80adff0 <HAL_UART_MspInit+0x164>)
 80adfa4:	2200      	movs	r2, #0
 80adfa6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK) {
 80adfa8:	4811      	ldr	r0, [pc, #68]	; (80adff0 <HAL_UART_MspInit+0x164>)
 80adfaa:	f002 fadf 	bl	80b056c <HAL_DMA_Init>
 80adfae:	4603      	mov	r3, r0
 80adfb0:	2b00      	cmp	r3, #0
 80adfb2:	d001      	beq.n	80adfb8 <HAL_UART_MspInit+0x12c>
      Error_Handler();
 80adfb4:	f7fb fdb0 	bl	80a9b18 <Error_Handler>
    }

    __HAL_LINKDMA(huart, hdmatx, hdma_usart2_tx);
 80adfb8:	687b      	ldr	r3, [r7, #4]
 80adfba:	4a0d      	ldr	r2, [pc, #52]	; (80adff0 <HAL_UART_MspInit+0x164>)
 80adfbc:	635a      	str	r2, [r3, #52]	; 0x34
 80adfbe:	4a0c      	ldr	r2, [pc, #48]	; (80adff0 <HAL_UART_MspInit+0x164>)
 80adfc0:	687b      	ldr	r3, [r7, #4]
 80adfc2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80adfc4:	2200      	movs	r2, #0
 80adfc6:	2105      	movs	r1, #5
 80adfc8:	2026      	movs	r0, #38	; 0x26
 80adfca:	f002 fa97 	bl	80b04fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80adfce:	2026      	movs	r0, #38	; 0x26
 80adfd0:	f002 fab0 	bl	80b0534 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 80adfd4:	bf00      	nop
 80adfd6:	3728      	adds	r7, #40	; 0x28
 80adfd8:	46bd      	mov	sp, r7
 80adfda:	bd80      	pop	{r7, pc}
 80adfdc:	40004400 	.word	0x40004400
 80adfe0:	40023800 	.word	0x40023800
 80adfe4:	40020000 	.word	0x40020000
 80adfe8:	2001be0c 	.word	0x2001be0c
 80adfec:	40026088 	.word	0x40026088
 80adff0:	2001bf7c 	.word	0x2001bf7c
 80adff4:	400260a0 	.word	0x400260a0

080adff8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80adff8:	b580      	push	{r7, lr}
 80adffa:	b08c      	sub	sp, #48	; 0x30
 80adffc:	af00      	add	r7, sp, #0
 80adffe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef clkconfig;
  uint32_t uwTimclock = 0;
 80ae000:	2300      	movs	r3, #0
 80ae002:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t uwPrescalerValue = 0;
 80ae004:	2300      	movs	r3, #0
 80ae006:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0);
 80ae008:	2200      	movs	r2, #0
 80ae00a:	6879      	ldr	r1, [r7, #4]
 80ae00c:	2019      	movs	r0, #25
 80ae00e:	f002 fa75 	bl	80b04fc <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80ae012:	2019      	movs	r0, #25
 80ae014:	f002 fa8e 	bl	80b0534 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80ae018:	2300      	movs	r3, #0
 80ae01a:	60fb      	str	r3, [r7, #12]
 80ae01c:	4b1f      	ldr	r3, [pc, #124]	; (80ae09c <HAL_InitTick+0xa4>)
 80ae01e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80ae020:	4a1e      	ldr	r2, [pc, #120]	; (80ae09c <HAL_InitTick+0xa4>)
 80ae022:	f043 0301 	orr.w	r3, r3, #1
 80ae026:	6453      	str	r3, [r2, #68]	; 0x44
 80ae028:	4b1c      	ldr	r3, [pc, #112]	; (80ae09c <HAL_InitTick+0xa4>)
 80ae02a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80ae02c:	f003 0301 	and.w	r3, r3, #1
 80ae030:	60fb      	str	r3, [r7, #12]
 80ae032:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80ae034:	f107 0210 	add.w	r2, r7, #16
 80ae038:	f107 0314 	add.w	r3, r7, #20
 80ae03c:	4611      	mov	r1, r2
 80ae03e:	4618      	mov	r0, r3
 80ae040:	f005 fbfa 	bl	80b3838 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2 * HAL_RCC_GetPCLK2Freq();
 80ae044:	f005 fbe4 	bl	80b3810 <HAL_RCC_GetPCLK2Freq>
 80ae048:	4603      	mov	r3, r0
 80ae04a:	005b      	lsls	r3, r3, #1
 80ae04c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80ae04e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80ae050:	4a13      	ldr	r2, [pc, #76]	; (80ae0a0 <HAL_InitTick+0xa8>)
 80ae052:	fba2 2303 	umull	r2, r3, r2, r3
 80ae056:	0c9b      	lsrs	r3, r3, #18
 80ae058:	3b01      	subs	r3, #1
 80ae05a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80ae05c:	4b11      	ldr	r3, [pc, #68]	; (80ae0a4 <HAL_InitTick+0xac>)
 80ae05e:	4a12      	ldr	r2, [pc, #72]	; (80ae0a8 <HAL_InitTick+0xb0>)
 80ae060:	601a      	str	r2, [r3, #0]
     + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
     + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
     + ClockDivision = 0
     + Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80ae062:	4b10      	ldr	r3, [pc, #64]	; (80ae0a4 <HAL_InitTick+0xac>)
 80ae064:	f240 32e7 	movw	r2, #999	; 0x3e7
 80ae068:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80ae06a:	4a0e      	ldr	r2, [pc, #56]	; (80ae0a4 <HAL_InitTick+0xac>)
 80ae06c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80ae06e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80ae070:	4b0c      	ldr	r3, [pc, #48]	; (80ae0a4 <HAL_InitTick+0xac>)
 80ae072:	2200      	movs	r2, #0
 80ae074:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80ae076:	4b0b      	ldr	r3, [pc, #44]	; (80ae0a4 <HAL_InitTick+0xac>)
 80ae078:	2200      	movs	r2, #0
 80ae07a:	609a      	str	r2, [r3, #8]
  if (HAL_TIM_Base_Init(&htim1) == HAL_OK) {
 80ae07c:	4809      	ldr	r0, [pc, #36]	; (80ae0a4 <HAL_InitTick+0xac>)
 80ae07e:	f005 ff03 	bl	80b3e88 <HAL_TIM_Base_Init>
 80ae082:	4603      	mov	r3, r0
 80ae084:	2b00      	cmp	r3, #0
 80ae086:	d104      	bne.n	80ae092 <HAL_InitTick+0x9a>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80ae088:	4806      	ldr	r0, [pc, #24]	; (80ae0a4 <HAL_InitTick+0xac>)
 80ae08a:	f005 ff4d 	bl	80b3f28 <HAL_TIM_Base_Start_IT>
 80ae08e:	4603      	mov	r3, r0
 80ae090:	e000      	b.n	80ae094 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80ae092:	2301      	movs	r3, #1
}
 80ae094:	4618      	mov	r0, r3
 80ae096:	3730      	adds	r7, #48	; 0x30
 80ae098:	46bd      	mov	sp, r7
 80ae09a:	bd80      	pop	{r7, pc}
 80ae09c:	40023800 	.word	0x40023800
 80ae0a0:	431bde83 	.word	0x431bde83
 80ae0a4:	2001c2d0 	.word	0x2001c2d0
 80ae0a8:	40010000 	.word	0x40010000

080ae0ac <__NVIC_SystemReset>:
{
 80ae0ac:	b480      	push	{r7}
 80ae0ae:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80ae0b0:	f3bf 8f4f 	dsb	sy
}
 80ae0b4:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80ae0b6:	4b06      	ldr	r3, [pc, #24]	; (80ae0d0 <__NVIC_SystemReset+0x24>)
 80ae0b8:	68db      	ldr	r3, [r3, #12]
 80ae0ba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80ae0be:	4904      	ldr	r1, [pc, #16]	; (80ae0d0 <__NVIC_SystemReset+0x24>)
 80ae0c0:	4b04      	ldr	r3, [pc, #16]	; (80ae0d4 <__NVIC_SystemReset+0x28>)
 80ae0c2:	4313      	orrs	r3, r2
 80ae0c4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80ae0c6:	f3bf 8f4f 	dsb	sy
}
 80ae0ca:	bf00      	nop
    __NOP();
 80ae0cc:	bf00      	nop
 80ae0ce:	e7fd      	b.n	80ae0cc <__NVIC_SystemReset+0x20>
 80ae0d0:	e000ed00 	.word	0xe000ed00
 80ae0d4:	05fa0004 	.word	0x05fa0004

080ae0d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80ae0d8:	b480      	push	{r7}
 80ae0da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1) {
 80ae0dc:	e7fe      	b.n	80ae0dc <NMI_Handler+0x4>

080ae0de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80ae0de:	b580      	push	{r7, lr}
 80ae0e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1) {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    __NVIC_SystemReset();
 80ae0e2:	f7ff ffe3 	bl	80ae0ac <__NVIC_SystemReset>

080ae0e6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80ae0e6:	b480      	push	{r7}
 80ae0e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1) {
 80ae0ea:	e7fe      	b.n	80ae0ea <MemManage_Handler+0x4>

080ae0ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80ae0ec:	b480      	push	{r7}
 80ae0ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1) {
 80ae0f0:	e7fe      	b.n	80ae0f0 <BusFault_Handler+0x4>

080ae0f2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80ae0f2:	b480      	push	{r7}
 80ae0f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1) {
 80ae0f6:	e7fe      	b.n	80ae0f6 <UsageFault_Handler+0x4>

080ae0f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80ae0f8:	b480      	push	{r7}
 80ae0fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80ae0fc:	bf00      	nop
 80ae0fe:	46bd      	mov	sp, r7
 80ae100:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ae104:	4770      	bx	lr

080ae106 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80ae106:	b580      	push	{r7, lr}
 80ae108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80ae10a:	2008      	movs	r0, #8
 80ae10c:	f003 fad6 	bl	80b16bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80ae110:	bf00      	nop
 80ae112:	bd80      	pop	{r7, pc}

080ae114 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80ae114:	b580      	push	{r7, lr}
 80ae116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80ae118:	4802      	ldr	r0, [pc, #8]	; (80ae124 <DMA1_Stream5_IRQHandler+0x10>)
 80ae11a:	f002 fbbf 	bl	80b089c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80ae11e:	bf00      	nop
 80ae120:	bd80      	pop	{r7, pc}
 80ae122:	bf00      	nop
 80ae124:	2001be0c 	.word	0x2001be0c

080ae128 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80ae128:	b580      	push	{r7, lr}
 80ae12a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80ae12c:	4802      	ldr	r0, [pc, #8]	; (80ae138 <DMA1_Stream6_IRQHandler+0x10>)
 80ae12e:	f002 fbb5 	bl	80b089c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80ae132:	bf00      	nop
 80ae134:	bd80      	pop	{r7, pc}
 80ae136:	bf00      	nop
 80ae138:	2001bf7c 	.word	0x2001bf7c

080ae13c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80ae13c:	b580      	push	{r7, lr}
 80ae13e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80ae140:	4802      	ldr	r0, [pc, #8]	; (80ae14c <CAN1_RX0_IRQHandler+0x10>)
 80ae142:	f001 feda 	bl	80afefa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80ae146:	bf00      	nop
 80ae148:	bd80      	pop	{r7, pc}
 80ae14a:	bf00      	nop
 80ae14c:	2001c29c 	.word	0x2001c29c

080ae150 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80ae150:	b580      	push	{r7, lr}
 80ae152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80ae154:	2040      	movs	r0, #64	; 0x40
 80ae156:	f003 fab1 	bl	80b16bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80ae15a:	bf00      	nop
 80ae15c:	bd80      	pop	{r7, pc}
	...

080ae160 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80ae160:	b580      	push	{r7, lr}
 80ae162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80ae164:	4802      	ldr	r0, [pc, #8]	; (80ae170 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80ae166:	f006 f830 	bl	80b41ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80ae16a:	bf00      	nop
 80ae16c:	bd80      	pop	{r7, pc}
 80ae16e:	bf00      	nop
 80ae170:	2001c2d0 	.word	0x2001c2d0

080ae174 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80ae174:	b580      	push	{r7, lr}
 80ae176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80ae178:	4802      	ldr	r0, [pc, #8]	; (80ae184 <TIM3_IRQHandler+0x10>)
 80ae17a:	f006 f826 	bl	80b41ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80ae17e:	bf00      	nop
 80ae180:	bd80      	pop	{r7, pc}
 80ae182:	bf00      	nop
 80ae184:	2001bed0 	.word	0x2001bed0

080ae188 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80ae188:	b580      	push	{r7, lr}
 80ae18a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80ae18c:	4802      	ldr	r0, [pc, #8]	; (80ae198 <USART2_IRQHandler+0x10>)
 80ae18e:	f007 f803 	bl	80b5198 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80ae192:	bf00      	nop
 80ae194:	bd80      	pop	{r7, pc}
 80ae196:	bf00      	nop
 80ae198:	2001c254 	.word	0x2001c254

080ae19c <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 80ae19c:	b580      	push	{r7, lr}
 80ae19e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80ae1a0:	4802      	ldr	r0, [pc, #8]	; (80ae1ac <CAN2_RX0_IRQHandler+0x10>)
 80ae1a2:	f001 feaa 	bl	80afefa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80ae1a6:	bf00      	nop
 80ae1a8:	bd80      	pop	{r7, pc}
 80ae1aa:	bf00      	nop
 80ae1ac:	2001bf48 	.word	0x2001bf48

080ae1b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80ae1b0:	b480      	push	{r7}
 80ae1b2:	af00      	add	r7, sp, #0
  return 1;
 80ae1b4:	2301      	movs	r3, #1
}
 80ae1b6:	4618      	mov	r0, r3
 80ae1b8:	46bd      	mov	sp, r7
 80ae1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ae1be:	4770      	bx	lr

080ae1c0 <_kill>:

int _kill(int pid, int sig)
{
 80ae1c0:	b580      	push	{r7, lr}
 80ae1c2:	b082      	sub	sp, #8
 80ae1c4:	af00      	add	r7, sp, #0
 80ae1c6:	6078      	str	r0, [r7, #4]
 80ae1c8:	6039      	str	r1, [r7, #0]
  errno = EINVAL;
 80ae1ca:	f011 febf 	bl	80bff4c <__errno>
 80ae1ce:	4603      	mov	r3, r0
 80ae1d0:	2216      	movs	r2, #22
 80ae1d2:	601a      	str	r2, [r3, #0]
  return -1;
 80ae1d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80ae1d8:	4618      	mov	r0, r3
 80ae1da:	3708      	adds	r7, #8
 80ae1dc:	46bd      	mov	sp, r7
 80ae1de:	bd80      	pop	{r7, pc}

080ae1e0 <_exit>:

void _exit(int status)
{
 80ae1e0:	b580      	push	{r7, lr}
 80ae1e2:	b082      	sub	sp, #8
 80ae1e4:	af00      	add	r7, sp, #0
 80ae1e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80ae1e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80ae1ec:	6878      	ldr	r0, [r7, #4]
 80ae1ee:	f7ff ffe7 	bl	80ae1c0 <_kill>
  while (1) {
 80ae1f2:	e7fe      	b.n	80ae1f2 <_exit+0x12>

080ae1f4 <_read>:
  }                             /* Make sure we hang here */
}

__attribute__ ((weak))
int _read(int file, char *ptr, int len)
{
 80ae1f4:	b580      	push	{r7, lr}
 80ae1f6:	b086      	sub	sp, #24
 80ae1f8:	af00      	add	r7, sp, #0
 80ae1fa:	60f8      	str	r0, [r7, #12]
 80ae1fc:	60b9      	str	r1, [r7, #8]
 80ae1fe:	607a      	str	r2, [r7, #4]
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80ae200:	2300      	movs	r3, #0
 80ae202:	617b      	str	r3, [r7, #20]
 80ae204:	e00a      	b.n	80ae21c <_read+0x28>
    *ptr++ = __io_getchar();
 80ae206:	f3af 8000 	nop.w
 80ae20a:	4601      	mov	r1, r0
 80ae20c:	68bb      	ldr	r3, [r7, #8]
 80ae20e:	1c5a      	adds	r2, r3, #1
 80ae210:	60ba      	str	r2, [r7, #8]
 80ae212:	b2ca      	uxtb	r2, r1
 80ae214:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80ae216:	697b      	ldr	r3, [r7, #20]
 80ae218:	3301      	adds	r3, #1
 80ae21a:	617b      	str	r3, [r7, #20]
 80ae21c:	697a      	ldr	r2, [r7, #20]
 80ae21e:	687b      	ldr	r3, [r7, #4]
 80ae220:	429a      	cmp	r2, r3
 80ae222:	dbf0      	blt.n	80ae206 <_read+0x12>
  }

  return len;
 80ae224:	687b      	ldr	r3, [r7, #4]
}
 80ae226:	4618      	mov	r0, r3
 80ae228:	3718      	adds	r7, #24
 80ae22a:	46bd      	mov	sp, r7
 80ae22c:	bd80      	pop	{r7, pc}

080ae22e <_write>:

__attribute__ ((weak))
int _write(int file, char *ptr, int len)
{
 80ae22e:	b580      	push	{r7, lr}
 80ae230:	b086      	sub	sp, #24
 80ae232:	af00      	add	r7, sp, #0
 80ae234:	60f8      	str	r0, [r7, #12]
 80ae236:	60b9      	str	r1, [r7, #8]
 80ae238:	607a      	str	r2, [r7, #4]
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80ae23a:	2300      	movs	r3, #0
 80ae23c:	617b      	str	r3, [r7, #20]
 80ae23e:	e009      	b.n	80ae254 <_write+0x26>
    __io_putchar(*ptr++);
 80ae240:	68bb      	ldr	r3, [r7, #8]
 80ae242:	1c5a      	adds	r2, r3, #1
 80ae244:	60ba      	str	r2, [r7, #8]
 80ae246:	781b      	ldrb	r3, [r3, #0]
 80ae248:	4618      	mov	r0, r3
 80ae24a:	f7fa fbe7 	bl	80a8a1c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80ae24e:	697b      	ldr	r3, [r7, #20]
 80ae250:	3301      	adds	r3, #1
 80ae252:	617b      	str	r3, [r7, #20]
 80ae254:	697a      	ldr	r2, [r7, #20]
 80ae256:	687b      	ldr	r3, [r7, #4]
 80ae258:	429a      	cmp	r2, r3
 80ae25a:	dbf1      	blt.n	80ae240 <_write+0x12>
  }
  return len;
 80ae25c:	687b      	ldr	r3, [r7, #4]
}
 80ae25e:	4618      	mov	r0, r3
 80ae260:	3718      	adds	r7, #24
 80ae262:	46bd      	mov	sp, r7
 80ae264:	bd80      	pop	{r7, pc}

080ae266 <_close>:

int _close(int file)
{
 80ae266:	b480      	push	{r7}
 80ae268:	b083      	sub	sp, #12
 80ae26a:	af00      	add	r7, sp, #0
 80ae26c:	6078      	str	r0, [r7, #4]
  return -1;
 80ae26e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80ae272:	4618      	mov	r0, r3
 80ae274:	370c      	adds	r7, #12
 80ae276:	46bd      	mov	sp, r7
 80ae278:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ae27c:	4770      	bx	lr

080ae27e <_fstat>:

int _fstat(int file, struct stat *st)
{
 80ae27e:	b480      	push	{r7}
 80ae280:	b083      	sub	sp, #12
 80ae282:	af00      	add	r7, sp, #0
 80ae284:	6078      	str	r0, [r7, #4]
 80ae286:	6039      	str	r1, [r7, #0]
  st->st_mode = S_IFCHR;
 80ae288:	683b      	ldr	r3, [r7, #0]
 80ae28a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80ae28e:	605a      	str	r2, [r3, #4]
  return 0;
 80ae290:	2300      	movs	r3, #0
}
 80ae292:	4618      	mov	r0, r3
 80ae294:	370c      	adds	r7, #12
 80ae296:	46bd      	mov	sp, r7
 80ae298:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ae29c:	4770      	bx	lr

080ae29e <_isatty>:

int _isatty(int file)
{
 80ae29e:	b480      	push	{r7}
 80ae2a0:	b083      	sub	sp, #12
 80ae2a2:	af00      	add	r7, sp, #0
 80ae2a4:	6078      	str	r0, [r7, #4]
  return 1;
 80ae2a6:	2301      	movs	r3, #1
}
 80ae2a8:	4618      	mov	r0, r3
 80ae2aa:	370c      	adds	r7, #12
 80ae2ac:	46bd      	mov	sp, r7
 80ae2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ae2b2:	4770      	bx	lr

080ae2b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80ae2b4:	b480      	push	{r7}
 80ae2b6:	b085      	sub	sp, #20
 80ae2b8:	af00      	add	r7, sp, #0
 80ae2ba:	60f8      	str	r0, [r7, #12]
 80ae2bc:	60b9      	str	r1, [r7, #8]
 80ae2be:	607a      	str	r2, [r7, #4]
  return 0;
 80ae2c0:	2300      	movs	r3, #0
}
 80ae2c2:	4618      	mov	r0, r3
 80ae2c4:	3714      	adds	r7, #20
 80ae2c6:	46bd      	mov	sp, r7
 80ae2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ae2cc:	4770      	bx	lr
	...

080ae2d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80ae2d0:	b580      	push	{r7, lr}
 80ae2d2:	b086      	sub	sp, #24
 80ae2d4:	af00      	add	r7, sp, #0
 80ae2d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end;          /* Symbol defined in the linker script */
  extern uint8_t _estack;       /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size;      /* Symbol defined in the linker script */
  const uint32_t stack_limit =
      (uint32_t) & _estack - (uint32_t) & _Min_Stack_Size;
 80ae2d8:	4a14      	ldr	r2, [pc, #80]	; (80ae32c <_sbrk+0x5c>)
 80ae2da:	4b15      	ldr	r3, [pc, #84]	; (80ae330 <_sbrk+0x60>)
  const uint32_t stack_limit =
 80ae2dc:	1ad3      	subs	r3, r2, r3
 80ae2de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *) stack_limit;
 80ae2e0:	697b      	ldr	r3, [r7, #20]
 80ae2e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end) {
 80ae2e4:	4b13      	ldr	r3, [pc, #76]	; (80ae334 <_sbrk+0x64>)
 80ae2e6:	681b      	ldr	r3, [r3, #0]
 80ae2e8:	2b00      	cmp	r3, #0
 80ae2ea:	d102      	bne.n	80ae2f2 <_sbrk+0x22>
    __sbrk_heap_end = &_end;
 80ae2ec:	4b11      	ldr	r3, [pc, #68]	; (80ae334 <_sbrk+0x64>)
 80ae2ee:	4a12      	ldr	r2, [pc, #72]	; (80ae338 <_sbrk+0x68>)
 80ae2f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap) {
 80ae2f2:	4b10      	ldr	r3, [pc, #64]	; (80ae334 <_sbrk+0x64>)
 80ae2f4:	681a      	ldr	r2, [r3, #0]
 80ae2f6:	687b      	ldr	r3, [r7, #4]
 80ae2f8:	4413      	add	r3, r2
 80ae2fa:	693a      	ldr	r2, [r7, #16]
 80ae2fc:	429a      	cmp	r2, r3
 80ae2fe:	d207      	bcs.n	80ae310 <_sbrk+0x40>
    errno = ENOMEM;
 80ae300:	f011 fe24 	bl	80bff4c <__errno>
 80ae304:	4603      	mov	r3, r0
 80ae306:	220c      	movs	r2, #12
 80ae308:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80ae30a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80ae30e:	e009      	b.n	80ae324 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80ae310:	4b08      	ldr	r3, [pc, #32]	; (80ae334 <_sbrk+0x64>)
 80ae312:	681b      	ldr	r3, [r3, #0]
 80ae314:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80ae316:	4b07      	ldr	r3, [pc, #28]	; (80ae334 <_sbrk+0x64>)
 80ae318:	681a      	ldr	r2, [r3, #0]
 80ae31a:	687b      	ldr	r3, [r7, #4]
 80ae31c:	4413      	add	r3, r2
 80ae31e:	4a05      	ldr	r2, [pc, #20]	; (80ae334 <_sbrk+0x64>)
 80ae320:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80ae322:	68fb      	ldr	r3, [r7, #12]
}
 80ae324:	4618      	mov	r0, r3
 80ae326:	3718      	adds	r7, #24
 80ae328:	46bd      	mov	sp, r7
 80ae32a:	bd80      	pop	{r7, pc}
 80ae32c:	20020000 	.word	0x20020000
 80ae330:	00000400 	.word	0x00000400
 80ae334:	200084ac 	.word	0x200084ac
 80ae338:	2001c398 	.word	0x2001c398

080ae33c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80ae33c:	b480      	push	{r7}
 80ae33e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------ */
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2));    /* set CP10 and CP11 Full Access */
 80ae340:	4b07      	ldr	r3, [pc, #28]	; (80ae360 <SystemInit+0x24>)
 80ae342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80ae346:	4a06      	ldr	r2, [pc, #24]	; (80ae360 <SystemInit+0x24>)
 80ae348:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80ae34c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------ */
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET;      /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET;     /* Vector Table Relocation in Internal FLASH */
 80ae350:	4b03      	ldr	r3, [pc, #12]	; (80ae360 <SystemInit+0x24>)
 80ae352:	4a04      	ldr	r2, [pc, #16]	; (80ae364 <SystemInit+0x28>)
 80ae354:	609a      	str	r2, [r3, #8]
#endif
}
 80ae356:	bf00      	nop
 80ae358:	46bd      	mov	sp, r7
 80ae35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ae35e:	4770      	bx	lr
 80ae360:	e000ed00 	.word	0xe000ed00
 80ae364:	080a0000 	.word	0x080a0000

080ae368 <send_device_xtalk_characterisation_config>:

FILE *fptr;

int32_t send_device_xtalk_characterisation_config(struct vl53l5_dev_handle_t
                                                  *pdev)
{
 80ae368:	b580      	push	{r7, lr}
 80ae36a:	f5ad 6dea 	sub.w	sp, sp, #1872	; 0x750
 80ae36e:	af00      	add	r7, sp, #0
 80ae370:	1d3b      	adds	r3, r7, #4
 80ae372:	6018      	str	r0, [r3, #0]
  int32_t status = STATUS_OK;
 80ae374:	2300      	movs	r3, #0
 80ae376:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
  uint8_t params_buff[] = VL53L5_CFG__XTALK_GEN1_1000__8X8_DATA;
 80ae37a:	f107 0308 	add.w	r3, r7, #8
 80ae37e:	4a0e      	ldr	r2, [pc, #56]	; (80ae3b8 <send_device_xtalk_characterisation_config+0x50>)
 80ae380:	4618      	mov	r0, r3
 80ae382:	4611      	mov	r1, r2
 80ae384:	f240 7344 	movw	r3, #1860	; 0x744
 80ae388:	461a      	mov	r2, r3
 80ae38a:	f011 fe09 	bl	80bffa0 <memcpy>

  printf("Setting config for xtalk characterisation...\r\n");
 80ae38e:	480b      	ldr	r0, [pc, #44]	; (80ae3bc <send_device_xtalk_characterisation_config+0x54>)
 80ae390:	f012 fb8c 	bl	80c0aac <puts>

  status = vl53l5_set_device_parameters(pdev, params_buff, sizeof(params_buff));
 80ae394:	f107 0108 	add.w	r1, r7, #8
 80ae398:	1d3b      	adds	r3, r7, #4
 80ae39a:	f240 7244 	movw	r2, #1860	; 0x744
 80ae39e:	6818      	ldr	r0, [r3, #0]
 80ae3a0:	f00d f9ec 	bl	80bb77c <vl53l5_set_device_parameters>
 80ae3a4:	f8c7 074c 	str.w	r0, [r7, #1868]	; 0x74c

  return status;
 80ae3a8:	f8d7 374c 	ldr.w	r3, [r7, #1868]	; 0x74c
}
 80ae3ac:	4618      	mov	r0, r3
 80ae3ae:	f507 67ea 	add.w	r7, r7, #1872	; 0x750
 80ae3b2:	46bd      	mov	sp, r7
 80ae3b4:	bd80      	pop	{r7, pc}
 80ae3b6:	bf00      	nop
 80ae3b8:	080c6124 	.word	0x080c6124
 80ae3bc:	080c60f4 	.word	0x080c60f4

080ae3c0 <calibrating_loop>:

int32_t calibrating_loop(struct vl53l5_dev_handle_t * pdev)
{
 80ae3c0:	b580      	push	{r7, lr}
 80ae3c2:	b086      	sub	sp, #24
 80ae3c4:	af00      	add	r7, sp, #0
 80ae3c6:	6078      	str	r0, [r7, #4]
  int32_t status = STATUS_OK;
 80ae3c8:	2300      	movs	r3, #0
 80ae3ca:	617b      	str	r3, [r7, #20]
  uint8_t n = 0;
 80ae3cc:	2300      	movs	r3, #0
 80ae3ce:	74fb      	strb	r3, [r7, #19]
  int cal_complete = 0;
 80ae3d0:	2300      	movs	r3, #0
 80ae3d2:	60fb      	str	r3, [r7, #12]

  printf("asking device to start ranging...\r\n");
 80ae3d4:	4821      	ldr	r0, [pc, #132]	; (80ae45c <calibrating_loop+0x9c>)
 80ae3d6:	f012 fb69 	bl	80c0aac <puts>

  status = vl53l5_start(pdev, NULL);
 80ae3da:	2100      	movs	r1, #0
 80ae3dc:	6878      	ldr	r0, [r7, #4]
 80ae3de:	f00d f896 	bl	80bb50e <vl53l5_start>
 80ae3e2:	6178      	str	r0, [r7, #20]
  if (status < STATUS_OK) {
 80ae3e4:	697b      	ldr	r3, [r7, #20]
 80ae3e6:	2b00      	cmp	r3, #0
 80ae3e8:	da1f      	bge.n	80ae42a <calibrating_loop+0x6a>
    printf("Start failed: %d\r\n", (int)status);
 80ae3ea:	6979      	ldr	r1, [r7, #20]
 80ae3ec:	481c      	ldr	r0, [pc, #112]	; (80ae460 <calibrating_loop+0xa0>)
 80ae3ee:	f012 fac1 	bl	80c0974 <iprintf>
    goto exit;
 80ae3f2:	e01e      	b.n	80ae432 <calibrating_loop+0x72>
  }

  while (cal_complete == 0) {
    /* Simulate a wait between subsequent checks of range results */
    vl53l5_wait_ms(pdev, 100);
 80ae3f4:	2164      	movs	r1, #100	; 0x64
 80ae3f6:	6878      	ldr	r0, [r7, #4]
 80ae3f8:	f010 fbb6 	bl	80beb68 <vl53l5_wait_ms>

    /* now check to see if range data is available */
    status = vl53l5_check_data_ready(pdev);
 80ae3fc:	6878      	ldr	r0, [r7, #4]
 80ae3fe:	f00d fc40 	bl	80bbc82 <vl53l5_check_data_ready>
 80ae402:	6178      	str	r0, [r7, #20]
    if (status < STATUS_OK) {
 80ae404:	697b      	ldr	r3, [r7, #20]
 80ae406:	2b00      	cmp	r3, #0
 80ae408:	da0c      	bge.n	80ae424 <calibrating_loop+0x64>
      if (status == VL53L5_NO_NEW_RANGE_DATA_ERROR) {
 80ae40a:	697b      	ldr	r3, [r7, #20]
 80ae40c:	f113 0f59 	cmn.w	r3, #89	; 0x59
 80ae410:	d103      	bne.n	80ae41a <calibrating_loop+0x5a>
        printf("waiting for new range data...\r\n");
 80ae412:	4814      	ldr	r0, [pc, #80]	; (80ae464 <calibrating_loop+0xa4>)
 80ae414:	f012 fb4a 	bl	80c0aac <puts>
        continue;
 80ae418:	e007      	b.n	80ae42a <calibrating_loop+0x6a>
      }
      printf("check_data_ready() error: status %d\r\n", (int)status);
 80ae41a:	6979      	ldr	r1, [r7, #20]
 80ae41c:	4812      	ldr	r0, [pc, #72]	; (80ae468 <calibrating_loop+0xa8>)
 80ae41e:	f012 faa9 	bl	80c0974 <iprintf>
      goto exit;
 80ae422:	e006      	b.n	80ae432 <calibrating_loop+0x72>
    } else {
      cal_complete = 1;
 80ae424:	2301      	movs	r3, #1
 80ae426:	60fb      	str	r3, [r7, #12]
    }
    goto exit;
 80ae428:	e003      	b.n	80ae432 <calibrating_loop+0x72>
  while (cal_complete == 0) {
 80ae42a:	68fb      	ldr	r3, [r7, #12]
 80ae42c:	2b00      	cmp	r3, #0
 80ae42e:	d0e1      	beq.n	80ae3f4 <calibrating_loop+0x34>
  }

exit:
 80ae430:	bf00      	nop
  printf("asking device to stop ranging...\r\n");
 80ae432:	480e      	ldr	r0, [pc, #56]	; (80ae46c <calibrating_loop+0xac>)
 80ae434:	f012 fb3a 	bl	80c0aac <puts>
  status = vl53l5_stop(pdev, NULL);
 80ae438:	2100      	movs	r1, #0
 80ae43a:	6878      	ldr	r0, [r7, #4]
 80ae43c:	f00d f8df 	bl	80bb5fe <vl53l5_stop>
 80ae440:	6178      	str	r0, [r7, #20]

  if (status < STATUS_OK) {
 80ae442:	697b      	ldr	r3, [r7, #20]
 80ae444:	2b00      	cmp	r3, #0
 80ae446:	da03      	bge.n	80ae450 <calibrating_loop+0x90>
    printf("Stop command failed: status %d\r\n", (int)status);
 80ae448:	6979      	ldr	r1, [r7, #20]
 80ae44a:	4809      	ldr	r0, [pc, #36]	; (80ae470 <calibrating_loop+0xb0>)
 80ae44c:	f012 fa92 	bl	80c0974 <iprintf>
  }

  return status;
 80ae450:	697b      	ldr	r3, [r7, #20]
}
 80ae452:	4618      	mov	r0, r3
 80ae454:	3718      	adds	r7, #24
 80ae456:	46bd      	mov	sp, r7
 80ae458:	bd80      	pop	{r7, pc}
 80ae45a:	bf00      	nop
 80ae45c:	080c6868 	.word	0x080c6868
 80ae460:	080c688c 	.word	0x080c688c
 80ae464:	080c68a0 	.word	0x080c68a0
 80ae468:	080c68c0 	.word	0x080c68c0
 80ae46c:	080c68e8 	.word	0x080c68e8
 80ae470:	080c690c 	.word	0x080c690c

080ae474 <save_cal_data>:

int save_cal_data(struct vl53l5_dev_handle_t *pdev)
{
 80ae474:	b5b0      	push	{r4, r5, r7, lr}
 80ae476:	f5ad 6dbc 	sub.w	sp, sp, #1504	; 0x5e0
 80ae47a:	af02      	add	r7, sp, #8
 80ae47c:	1d3b      	adds	r3, r7, #4
 80ae47e:	6018      	str	r0, [r3, #0]
  int i, j;
  int32_t status = STATUS_OK;
 80ae480:	2300      	movs	r3, #0
 80ae482:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc
  struct vl53l5_calibration_data_t cal_data = { 0 };
 80ae486:	f107 0308 	add.w	r3, r7, #8
 80ae48a:	4618      	mov	r0, r3
 80ae48c:	f44f 63b8 	mov.w	r3, #1472	; 0x5c0
 80ae490:	461a      	mov	r2, r3
 80ae492:	2100      	movs	r1, #0
 80ae494:	f011 fd92 	bl	80bffbc <memset>

// shape cali data
  status =
      vl53l5_get_device_parameters(pdev, _cal_data_shape_block_list,
 80ae498:	4b92      	ldr	r3, [pc, #584]	; (80ae6e4 <save_cal_data+0x270>)
 80ae49a:	681a      	ldr	r2, [r3, #0]
 80ae49c:	1d3b      	adds	r3, r7, #4
 80ae49e:	4992      	ldr	r1, [pc, #584]	; (80ae6e8 <save_cal_data+0x274>)
 80ae4a0:	6818      	ldr	r0, [r3, #0]
 80ae4a2:	f00d f93d 	bl	80bb720 <vl53l5_get_device_parameters>
 80ae4a6:	f8c7 05cc 	str.w	r0, [r7, #1484]	; 0x5cc
                                   _num_cal_shape_blocks);
  if (status < STATUS_OK) {
 80ae4aa:	f8d7 35cc 	ldr.w	r3, [r7, #1484]	; 0x5cc
 80ae4ae:	2b00      	cmp	r3, #0
 80ae4b0:	da05      	bge.n	80ae4be <save_cal_data+0x4a>
    printf("Getting calibration data failed: %d\r\n", (int)status);
 80ae4b2:	f8d7 15cc 	ldr.w	r1, [r7, #1484]	; 0x5cc
 80ae4b6:	488d      	ldr	r0, [pc, #564]	; (80ae6ec <save_cal_data+0x278>)
 80ae4b8:	f012 fa5c 	bl	80c0974 <iprintf>
    goto exit;
 80ae4bc:	e216      	b.n	80ae8ec <save_cal_data+0x478>
  } else
    printf("Calibration data received \r\n");
 80ae4be:	488c      	ldr	r0, [pc, #560]	; (80ae6f0 <save_cal_data+0x27c>)
 80ae4c0:	f012 faf4 	bl	80c0aac <puts>

  /* The data is available in the comms buffer. How the data is then
     stored is customer specific.  The last 4 bytes of data are not required
     and should be removed [00, 00, 00, 0f].
   */
  for (i = 3; i < VL53L5_COMMS_BUFF_COUNT(pdev) - 4; i += 4) {
 80ae4c4:	2303      	movs	r3, #3
 80ae4c6:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 80ae4ca:	e063      	b.n	80ae594 <save_cal_data+0x120>
    printf(fptr, "%02x, %02x, %02x, %02x \n", VL53L5_COMMS_BUFF(pdev)[i - 3],
 80ae4cc:	4b89      	ldr	r3, [pc, #548]	; (80ae6f4 <save_cal_data+0x280>)
 80ae4ce:	6818      	ldr	r0, [r3, #0]
 80ae4d0:	1d3b      	adds	r3, r7, #4
 80ae4d2:	681b      	ldr	r3, [r3, #0]
 80ae4d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80ae4d6:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 80ae4da:	3b03      	subs	r3, #3
 80ae4dc:	4413      	add	r3, r2
 80ae4de:	781b      	ldrb	r3, [r3, #0]
 80ae4e0:	461c      	mov	r4, r3
           VL53L5_COMMS_BUFF(pdev)[i - 2],
 80ae4e2:	1d3b      	adds	r3, r7, #4
 80ae4e4:	681b      	ldr	r3, [r3, #0]
 80ae4e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80ae4e8:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 80ae4ec:	3b02      	subs	r3, #2
 80ae4ee:	4413      	add	r3, r2
 80ae4f0:	781b      	ldrb	r3, [r3, #0]
    printf(fptr, "%02x, %02x, %02x, %02x \n", VL53L5_COMMS_BUFF(pdev)[i - 3],
 80ae4f2:	461d      	mov	r5, r3
           VL53L5_COMMS_BUFF(pdev)[i - 1], VL53L5_COMMS_BUFF(pdev)[i]);
 80ae4f4:	1d3b      	adds	r3, r7, #4
 80ae4f6:	681b      	ldr	r3, [r3, #0]
 80ae4f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80ae4fa:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 80ae4fe:	3b01      	subs	r3, #1
 80ae500:	4413      	add	r3, r2
 80ae502:	781b      	ldrb	r3, [r3, #0]
    printf(fptr, "%02x, %02x, %02x, %02x \n", VL53L5_COMMS_BUFF(pdev)[i - 3],
 80ae504:	4619      	mov	r1, r3
           VL53L5_COMMS_BUFF(pdev)[i - 1], VL53L5_COMMS_BUFF(pdev)[i]);
 80ae506:	1d3b      	adds	r3, r7, #4
 80ae508:	681b      	ldr	r3, [r3, #0]
 80ae50a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80ae50c:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 80ae510:	4413      	add	r3, r2
 80ae512:	781b      	ldrb	r3, [r3, #0]
    printf(fptr, "%02x, %02x, %02x, %02x \n", VL53L5_COMMS_BUFF(pdev)[i - 3],
 80ae514:	9301      	str	r3, [sp, #4]
 80ae516:	9100      	str	r1, [sp, #0]
 80ae518:	462b      	mov	r3, r5
 80ae51a:	4622      	mov	r2, r4
 80ae51c:	4976      	ldr	r1, [pc, #472]	; (80ae6f8 <save_cal_data+0x284>)
 80ae51e:	f012 fa29 	bl	80c0974 <iprintf>
    mtof_cali_data.shape_cali_data[i - 3] = VL53L5_COMMS_BUFF(pdev)[i - 3];
 80ae522:	1d3b      	adds	r3, r7, #4
 80ae524:	681b      	ldr	r3, [r3, #0]
 80ae526:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80ae528:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 80ae52c:	3b03      	subs	r3, #3
 80ae52e:	441a      	add	r2, r3
 80ae530:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 80ae534:	3b03      	subs	r3, #3
 80ae536:	7811      	ldrb	r1, [r2, #0]
 80ae538:	4a70      	ldr	r2, [pc, #448]	; (80ae6fc <save_cal_data+0x288>)
 80ae53a:	54d1      	strb	r1, [r2, r3]
    mtof_cali_data.shape_cali_data[i - 2] = VL53L5_COMMS_BUFF(pdev)[i - 2];
 80ae53c:	1d3b      	adds	r3, r7, #4
 80ae53e:	681b      	ldr	r3, [r3, #0]
 80ae540:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80ae542:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 80ae546:	3b02      	subs	r3, #2
 80ae548:	441a      	add	r2, r3
 80ae54a:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 80ae54e:	3b02      	subs	r3, #2
 80ae550:	7811      	ldrb	r1, [r2, #0]
 80ae552:	4a6a      	ldr	r2, [pc, #424]	; (80ae6fc <save_cal_data+0x288>)
 80ae554:	54d1      	strb	r1, [r2, r3]
    mtof_cali_data.shape_cali_data[i - 1] = VL53L5_COMMS_BUFF(pdev)[i - 1];
 80ae556:	1d3b      	adds	r3, r7, #4
 80ae558:	681b      	ldr	r3, [r3, #0]
 80ae55a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80ae55c:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 80ae560:	3b01      	subs	r3, #1
 80ae562:	441a      	add	r2, r3
 80ae564:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 80ae568:	3b01      	subs	r3, #1
 80ae56a:	7811      	ldrb	r1, [r2, #0]
 80ae56c:	4a63      	ldr	r2, [pc, #396]	; (80ae6fc <save_cal_data+0x288>)
 80ae56e:	54d1      	strb	r1, [r2, r3]
    mtof_cali_data.shape_cali_data[i] = VL53L5_COMMS_BUFF(pdev)[i];
 80ae570:	1d3b      	adds	r3, r7, #4
 80ae572:	681b      	ldr	r3, [r3, #0]
 80ae574:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80ae576:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 80ae57a:	4413      	add	r3, r2
 80ae57c:	7819      	ldrb	r1, [r3, #0]
 80ae57e:	4a5f      	ldr	r2, [pc, #380]	; (80ae6fc <save_cal_data+0x288>)
 80ae580:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 80ae584:	4413      	add	r3, r2
 80ae586:	460a      	mov	r2, r1
 80ae588:	701a      	strb	r2, [r3, #0]
  for (i = 3; i < VL53L5_COMMS_BUFF_COUNT(pdev) - 4; i += 4) {
 80ae58a:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 80ae58e:	3304      	adds	r3, #4
 80ae590:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 80ae594:	1d3b      	adds	r3, r7, #4
 80ae596:	681b      	ldr	r3, [r3, #0]
 80ae598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80ae59a:	1f1a      	subs	r2, r3, #4
 80ae59c:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 80ae5a0:	429a      	cmp	r2, r3
 80ae5a2:	d893      	bhi.n	80ae4cc <save_cal_data+0x58>
  }

  printf("Decoding calibration data \r\n");
 80ae5a4:	4856      	ldr	r0, [pc, #344]	; (80ae700 <save_cal_data+0x28c>)
 80ae5a6:	f012 fa81 	bl	80c0aac <puts>
  status = vl53l5_decode_calibration_data(pdev,
 80ae5aa:	1d3b      	adds	r3, r7, #4
 80ae5ac:	681b      	ldr	r3, [r3, #0]
 80ae5ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80ae5b0:	1d3b      	adds	r3, r7, #4
 80ae5b2:	681b      	ldr	r3, [r3, #0]
 80ae5b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80ae5b6:	f107 0108 	add.w	r1, r7, #8
 80ae5ba:	1d38      	adds	r0, r7, #4
 80ae5bc:	6800      	ldr	r0, [r0, #0]
 80ae5be:	f00c fc64 	bl	80bae8a <vl53l5_decode_calibration_data>
 80ae5c2:	f8c7 05cc 	str.w	r0, [r7, #1484]	; 0x5cc
                                          &cal_data,
                                          VL53L5_COMMS_BUFF(pdev),
                                          VL53L5_COMMS_BUFF_COUNT(pdev));

  if (status != STATUS_OK) {
 80ae5c6:	f8d7 35cc 	ldr.w	r3, [r7, #1484]	; 0x5cc
 80ae5ca:	2b00      	cmp	r3, #0
 80ae5cc:	d005      	beq.n	80ae5da <save_cal_data+0x166>
    printf("Decode calibration failed: %d\n", status);
 80ae5ce:	f8d7 15cc 	ldr.w	r1, [r7, #1484]	; 0x5cc
 80ae5d2:	484c      	ldr	r0, [pc, #304]	; (80ae704 <save_cal_data+0x290>)
 80ae5d4:	f012 f9ce 	bl	80c0974 <iprintf>
    goto exit;
 80ae5d8:	e188      	b.n	80ae8ec <save_cal_data+0x478>
    **
    ** Xtalk data
    **
    ****************************************************************************************/

  printf("Xtalk cal data \r\n");
 80ae5da:	484b      	ldr	r0, [pc, #300]	; (80ae708 <save_cal_data+0x294>)
 80ae5dc:	f012 fa66 	bl	80c0aac <puts>
  printf("\r\n");
 80ae5e0:	484a      	ldr	r0, [pc, #296]	; (80ae70c <save_cal_data+0x298>)
 80ae5e2:	f012 fa63 	bl	80c0aac <puts>

  printf("decoded cal__xtalk_cal_shape_median_phase = %4d  \r\n",
 80ae5e6:	f107 0308 	add.w	r3, r7, #8
 80ae5ea:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80ae5ee:	4619      	mov	r1, r3
 80ae5f0:	4847      	ldr	r0, [pc, #284]	; (80ae710 <save_cal_data+0x29c>)
 80ae5f2:	f012 f9bf 	bl	80c0974 <iprintf>
         cal_data.core.pxtalk_shape_meta.cal__xtalk_shape__median_phase);
  printf("decoded cal__xtalk_cal_shape_avg_count = %4d  \r\n",
         cal_data.core.pxtalk_shape_meta.cal__xtalk_shape__avg_count);
 80ae5f6:	f107 0308 	add.w	r3, r7, #8
 80ae5fa:	f8b3 3414 	ldrh.w	r3, [r3, #1044]	; 0x414
  printf("decoded cal__xtalk_cal_shape_avg_count = %4d  \r\n",
 80ae5fe:	4619      	mov	r1, r3
 80ae600:	4844      	ldr	r0, [pc, #272]	; (80ae714 <save_cal_data+0x2a0>)
 80ae602:	f012 f9b7 	bl	80c0974 <iprintf>
  printf("decoded cal__xtalk_cal_shape_no_of_bins = %4d  \r\n",
         cal_data.core.pxtalk_shape_meta.cal__xtalk_shape__no_of_bins);
 80ae606:	f107 0308 	add.w	r3, r7, #8
 80ae60a:	f893 3416 	ldrb.w	r3, [r3, #1046]	; 0x416
  printf("decoded cal__xtalk_cal_shape_no_of_bins = %4d  \r\n",
 80ae60e:	4619      	mov	r1, r3
 80ae610:	4841      	ldr	r0, [pc, #260]	; (80ae718 <save_cal_data+0x2a4>)
 80ae612:	f012 f9af 	bl	80c0974 <iprintf>
  printf("decoded cal__xtalk_cal_shape_normalisation_power = %4d  \r\n",
         cal_data.core.pxtalk_shape_meta.cal__xtalk_shape__normalisation_power);
 80ae616:	f107 0308 	add.w	r3, r7, #8
 80ae61a:	f893 3417 	ldrb.w	r3, [r3, #1047]	; 0x417
  printf("decoded cal__xtalk_cal_shape_normalisation_power = %4d  \r\n",
 80ae61e:	4619      	mov	r1, r3
 80ae620:	483e      	ldr	r0, [pc, #248]	; (80ae71c <save_cal_data+0x2a8>)
 80ae622:	f012 f9a7 	bl	80c0974 <iprintf>
  printf("decoded cal__xtalk_cal_shape_silicon_temp_degC = %4d  \r\n",
         cal_data.core.pxtalk_shape_meta.cal__xtalk_shape__silicon_temp_degc);
 80ae626:	f107 0308 	add.w	r3, r7, #8
 80ae62a:	f993 3418 	ldrsb.w	r3, [r3, #1048]	; 0x418
  printf("decoded cal__xtalk_cal_shape_silicon_temp_degC = %4d  \r\n",
 80ae62e:	4619      	mov	r1, r3
 80ae630:	483b      	ldr	r0, [pc, #236]	; (80ae720 <save_cal_data+0x2ac>)
 80ae632:	f012 f99f 	bl	80c0974 <iprintf>
  printf("decoded cal__xtalk_cal_shape_spare_0 = %4d  \r\n",
         cal_data.core.pxtalk_shape_meta.cal__xtalk_shape__spare_0);
 80ae636:	f107 0308 	add.w	r3, r7, #8
 80ae63a:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
  printf("decoded cal__xtalk_cal_shape_spare_0 = %4d  \r\n",
 80ae63e:	4619      	mov	r1, r3
 80ae640:	4838      	ldr	r0, [pc, #224]	; (80ae724 <save_cal_data+0x2b0>)
 80ae642:	f012 f997 	bl	80c0974 <iprintf>
  printf("decoded cal__xtalk_cal_shape_spare_1 = %4d  \r\n",
         cal_data.core.pxtalk_shape_meta.cal__xtalk_shape__spare_1);
 80ae646:	f107 0308 	add.w	r3, r7, #8
 80ae64a:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
  printf("decoded cal__xtalk_cal_shape_spare_1 = %4d  \r\n",
 80ae64e:	4619      	mov	r1, r3
 80ae650:	4835      	ldr	r0, [pc, #212]	; (80ae728 <save_cal_data+0x2b4>)
 80ae652:	f012 f98f 	bl	80c0974 <iprintf>
  printf("decoded cal__xtalk_cal_shape_spare_2 = %4d  \r\n",
         cal_data.core.pxtalk_shape_meta.cal__xtalk_shape__spare_2);
 80ae656:	f107 0308 	add.w	r3, r7, #8
 80ae65a:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
  printf("decoded cal__xtalk_cal_shape_spare_2 = %4d  \r\n",
 80ae65e:	4619      	mov	r1, r3
 80ae660:	4832      	ldr	r0, [pc, #200]	; (80ae72c <save_cal_data+0x2b8>)
 80ae662:	f012 f987 	bl	80c0974 <iprintf>
  printf("\r\n");
 80ae666:	4829      	ldr	r0, [pc, #164]	; (80ae70c <save_cal_data+0x298>)
 80ae668:	f012 fa20 	bl	80c0aac <puts>

  for (j = 0; j < 144; j++) {
 80ae66c:	2300      	movs	r3, #0
 80ae66e:	f8c7 35d0 	str.w	r3, [r7, #1488]	; 0x5d0
 80ae672:	e016      	b.n	80ae6a2 <save_cal_data+0x22e>
    printf("decoded data xtalk shape bin data[ %02d", j);
 80ae674:	f8d7 15d0 	ldr.w	r1, [r7, #1488]	; 0x5d0
 80ae678:	482d      	ldr	r0, [pc, #180]	; (80ae730 <save_cal_data+0x2bc>)
 80ae67a:	f012 f97b 	bl	80c0974 <iprintf>
    printf("] =  %04d  \r\n",
           cal_data.core.pxtalk_shape_data.cal__xtalk_shape__bin_data[j]);
 80ae67e:	f107 0208 	add.w	r2, r7, #8
 80ae682:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	; 0x5d0
 80ae686:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 80ae68a:	005b      	lsls	r3, r3, #1
 80ae68c:	4413      	add	r3, r2
 80ae68e:	889b      	ldrh	r3, [r3, #4]
    printf("] =  %04d  \r\n",
 80ae690:	4619      	mov	r1, r3
 80ae692:	4828      	ldr	r0, [pc, #160]	; (80ae734 <save_cal_data+0x2c0>)
 80ae694:	f012 f96e 	bl	80c0974 <iprintf>
  for (j = 0; j < 144; j++) {
 80ae698:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	; 0x5d0
 80ae69c:	3301      	adds	r3, #1
 80ae69e:	f8c7 35d0 	str.w	r3, [r7, #1488]	; 0x5d0
 80ae6a2:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	; 0x5d0
 80ae6a6:	2b8f      	cmp	r3, #143	; 0x8f
 80ae6a8:	dde4      	ble.n	80ae674 <save_cal_data+0x200>
  }
  printf("\r\n");
 80ae6aa:	4818      	ldr	r0, [pc, #96]	; (80ae70c <save_cal_data+0x298>)
 80ae6ac:	f012 f9fe 	bl	80c0aac <puts>

//   grid cali data
  status =
      vl53l5_get_device_parameters(pdev, _cal_data_grid_block_list,
 80ae6b0:	4b21      	ldr	r3, [pc, #132]	; (80ae738 <save_cal_data+0x2c4>)
 80ae6b2:	681a      	ldr	r2, [r3, #0]
 80ae6b4:	1d3b      	adds	r3, r7, #4
 80ae6b6:	4921      	ldr	r1, [pc, #132]	; (80ae73c <save_cal_data+0x2c8>)
 80ae6b8:	6818      	ldr	r0, [r3, #0]
 80ae6ba:	f00d f831 	bl	80bb720 <vl53l5_get_device_parameters>
 80ae6be:	f8c7 05cc 	str.w	r0, [r7, #1484]	; 0x5cc
                                   _num_cal_grid_blocks);
  if (status < STATUS_OK) {
 80ae6c2:	f8d7 35cc 	ldr.w	r3, [r7, #1484]	; 0x5cc
 80ae6c6:	2b00      	cmp	r3, #0
 80ae6c8:	da05      	bge.n	80ae6d6 <save_cal_data+0x262>
    printf("Getting calibration data failed: %d\r\n", (int)status);
 80ae6ca:	f8d7 15cc 	ldr.w	r1, [r7, #1484]	; 0x5cc
 80ae6ce:	4807      	ldr	r0, [pc, #28]	; (80ae6ec <save_cal_data+0x278>)
 80ae6d0:	f012 f950 	bl	80c0974 <iprintf>
    goto exit;
 80ae6d4:	e10a      	b.n	80ae8ec <save_cal_data+0x478>
  } else
    printf("Calibration data received \r\n");
 80ae6d6:	4806      	ldr	r0, [pc, #24]	; (80ae6f0 <save_cal_data+0x27c>)
 80ae6d8:	f012 f9e8 	bl	80c0aac <puts>
  /* The data is available in the comms buffer. How the data is then
     stored is customer specific.  The last 4 bytes of data are not required
     and should be removed [00, 00, 00, 0f].
   */

  for (i = 3; i < VL53L5_COMMS_BUFF_COUNT(pdev) - 4; i += 4) {
 80ae6dc:	2303      	movs	r3, #3
 80ae6de:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 80ae6e2:	e09c      	b.n	80ae81e <save_cal_data+0x3aa>
 80ae6e4:	20007c68 	.word	0x20007c68
 80ae6e8:	20007c5c 	.word	0x20007c5c
 80ae6ec:	080c6930 	.word	0x080c6930
 80ae6f0:	080c6958 	.word	0x080c6958
 80ae6f4:	2001c318 	.word	0x2001c318
 80ae6f8:	080c6974 	.word	0x080c6974
 80ae6fc:	20008538 	.word	0x20008538
 80ae700:	080c6990 	.word	0x080c6990
 80ae704:	080c69ac 	.word	0x080c69ac
 80ae708:	080c69cc 	.word	0x080c69cc
 80ae70c:	080c69e0 	.word	0x080c69e0
 80ae710:	080c69e4 	.word	0x080c69e4
 80ae714:	080c6a18 	.word	0x080c6a18
 80ae718:	080c6a4c 	.word	0x080c6a4c
 80ae71c:	080c6a80 	.word	0x080c6a80
 80ae720:	080c6abc 	.word	0x080c6abc
 80ae724:	080c6af8 	.word	0x080c6af8
 80ae728:	080c6b28 	.word	0x080c6b28
 80ae72c:	080c6b58 	.word	0x080c6b58
 80ae730:	080c6b88 	.word	0x080c6b88
 80ae734:	080c6bb0 	.word	0x080c6bb0
 80ae738:	20007ca8 	.word	0x20007ca8
 80ae73c:	20007c6c 	.word	0x20007c6c
    printf(fptr, "%02x, %02x, %02x, %02x \n", VL53L5_COMMS_BUFF(pdev)[i - 3],
 80ae740:	4b6e      	ldr	r3, [pc, #440]	; (80ae8fc <save_cal_data+0x488>)
 80ae742:	6818      	ldr	r0, [r3, #0]
 80ae744:	1d3b      	adds	r3, r7, #4
 80ae746:	681b      	ldr	r3, [r3, #0]
 80ae748:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80ae74a:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 80ae74e:	3b03      	subs	r3, #3
 80ae750:	4413      	add	r3, r2
 80ae752:	781b      	ldrb	r3, [r3, #0]
 80ae754:	461c      	mov	r4, r3
           VL53L5_COMMS_BUFF(pdev)[i - 2],
 80ae756:	1d3b      	adds	r3, r7, #4
 80ae758:	681b      	ldr	r3, [r3, #0]
 80ae75a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80ae75c:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 80ae760:	3b02      	subs	r3, #2
 80ae762:	4413      	add	r3, r2
 80ae764:	781b      	ldrb	r3, [r3, #0]
    printf(fptr, "%02x, %02x, %02x, %02x \n", VL53L5_COMMS_BUFF(pdev)[i - 3],
 80ae766:	461d      	mov	r5, r3
           VL53L5_COMMS_BUFF(pdev)[i - 1], VL53L5_COMMS_BUFF(pdev)[i]);
 80ae768:	1d3b      	adds	r3, r7, #4
 80ae76a:	681b      	ldr	r3, [r3, #0]
 80ae76c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80ae76e:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 80ae772:	3b01      	subs	r3, #1
 80ae774:	4413      	add	r3, r2
 80ae776:	781b      	ldrb	r3, [r3, #0]
    printf(fptr, "%02x, %02x, %02x, %02x \n", VL53L5_COMMS_BUFF(pdev)[i - 3],
 80ae778:	4619      	mov	r1, r3
           VL53L5_COMMS_BUFF(pdev)[i - 1], VL53L5_COMMS_BUFF(pdev)[i]);
 80ae77a:	1d3b      	adds	r3, r7, #4
 80ae77c:	681b      	ldr	r3, [r3, #0]
 80ae77e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80ae780:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 80ae784:	4413      	add	r3, r2
 80ae786:	781b      	ldrb	r3, [r3, #0]
    printf(fptr, "%02x, %02x, %02x, %02x \n", VL53L5_COMMS_BUFF(pdev)[i - 3],
 80ae788:	9301      	str	r3, [sp, #4]
 80ae78a:	9100      	str	r1, [sp, #0]
 80ae78c:	462b      	mov	r3, r5
 80ae78e:	4622      	mov	r2, r4
 80ae790:	495b      	ldr	r1, [pc, #364]	; (80ae900 <save_cal_data+0x48c>)
 80ae792:	f012 f8ef 	bl	80c0974 <iprintf>
    mtof_cali_data.grid_cali_data[i - 3] = VL53L5_COMMS_BUFF(pdev)[i - 3];
 80ae796:	1d3b      	adds	r3, r7, #4
 80ae798:	681b      	ldr	r3, [r3, #0]
 80ae79a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80ae79c:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 80ae7a0:	3b03      	subs	r3, #3
 80ae7a2:	441a      	add	r2, r3
 80ae7a4:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 80ae7a8:	3b03      	subs	r3, #3
 80ae7aa:	7811      	ldrb	r1, [r2, #0]
 80ae7ac:	4a55      	ldr	r2, [pc, #340]	; (80ae904 <save_cal_data+0x490>)
 80ae7ae:	4413      	add	r3, r2
 80ae7b0:	460a      	mov	r2, r1
 80ae7b2:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
    mtof_cali_data.grid_cali_data[i - 2] = VL53L5_COMMS_BUFF(pdev)[i - 2];
 80ae7b6:	1d3b      	adds	r3, r7, #4
 80ae7b8:	681b      	ldr	r3, [r3, #0]
 80ae7ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80ae7bc:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 80ae7c0:	3b02      	subs	r3, #2
 80ae7c2:	441a      	add	r2, r3
 80ae7c4:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 80ae7c8:	3b02      	subs	r3, #2
 80ae7ca:	7811      	ldrb	r1, [r2, #0]
 80ae7cc:	4a4d      	ldr	r2, [pc, #308]	; (80ae904 <save_cal_data+0x490>)
 80ae7ce:	4413      	add	r3, r2
 80ae7d0:	460a      	mov	r2, r1
 80ae7d2:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
    mtof_cali_data.grid_cali_data[i - 1] = VL53L5_COMMS_BUFF(pdev)[i - 1];
 80ae7d6:	1d3b      	adds	r3, r7, #4
 80ae7d8:	681b      	ldr	r3, [r3, #0]
 80ae7da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80ae7dc:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 80ae7e0:	3b01      	subs	r3, #1
 80ae7e2:	441a      	add	r2, r3
 80ae7e4:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 80ae7e8:	3b01      	subs	r3, #1
 80ae7ea:	7811      	ldrb	r1, [r2, #0]
 80ae7ec:	4a45      	ldr	r2, [pc, #276]	; (80ae904 <save_cal_data+0x490>)
 80ae7ee:	4413      	add	r3, r2
 80ae7f0:	460a      	mov	r2, r1
 80ae7f2:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
    mtof_cali_data.grid_cali_data[i] = VL53L5_COMMS_BUFF(pdev)[i];
 80ae7f6:	1d3b      	adds	r3, r7, #4
 80ae7f8:	681b      	ldr	r3, [r3, #0]
 80ae7fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80ae7fc:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 80ae800:	4413      	add	r3, r2
 80ae802:	7819      	ldrb	r1, [r3, #0]
 80ae804:	4a3f      	ldr	r2, [pc, #252]	; (80ae904 <save_cal_data+0x490>)
 80ae806:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 80ae80a:	4413      	add	r3, r2
 80ae80c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80ae810:	460a      	mov	r2, r1
 80ae812:	701a      	strb	r2, [r3, #0]
  for (i = 3; i < VL53L5_COMMS_BUFF_COUNT(pdev) - 4; i += 4) {
 80ae814:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 80ae818:	3304      	adds	r3, #4
 80ae81a:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 80ae81e:	1d3b      	adds	r3, r7, #4
 80ae820:	681b      	ldr	r3, [r3, #0]
 80ae822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80ae824:	1f1a      	subs	r2, r3, #4
 80ae826:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 80ae82a:	429a      	cmp	r2, r3
 80ae82c:	d888      	bhi.n	80ae740 <save_cal_data+0x2cc>
  }
  printf("Decoding calibration data \r\n");
 80ae82e:	4836      	ldr	r0, [pc, #216]	; (80ae908 <save_cal_data+0x494>)
 80ae830:	f012 f93c 	bl	80c0aac <puts>
  status = vl53l5_decode_calibration_data(pdev,
 80ae834:	1d3b      	adds	r3, r7, #4
 80ae836:	681b      	ldr	r3, [r3, #0]
 80ae838:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80ae83a:	1d3b      	adds	r3, r7, #4
 80ae83c:	681b      	ldr	r3, [r3, #0]
 80ae83e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80ae840:	f107 0108 	add.w	r1, r7, #8
 80ae844:	1d38      	adds	r0, r7, #4
 80ae846:	6800      	ldr	r0, [r0, #0]
 80ae848:	f00c fb1f 	bl	80bae8a <vl53l5_decode_calibration_data>
 80ae84c:	f8c7 05cc 	str.w	r0, [r7, #1484]	; 0x5cc
                                          &cal_data,
                                          VL53L5_COMMS_BUFF(pdev),
                                          VL53L5_COMMS_BUFF_COUNT(pdev));

  if (status != STATUS_OK) {
 80ae850:	f8d7 35cc 	ldr.w	r3, [r7, #1484]	; 0x5cc
 80ae854:	2b00      	cmp	r3, #0
 80ae856:	d005      	beq.n	80ae864 <save_cal_data+0x3f0>
    printf("Decode calibration failed: %d\n", status);
 80ae858:	f8d7 15cc 	ldr.w	r1, [r7, #1484]	; 0x5cc
 80ae85c:	482b      	ldr	r0, [pc, #172]	; (80ae90c <save_cal_data+0x498>)
 80ae85e:	f012 f889 	bl	80c0974 <iprintf>
    goto exit;
 80ae862:	e043      	b.n	80ae8ec <save_cal_data+0x478>
  }

  printf("\n----- Calibration xtalk grid -----\n");
 80ae864:	482a      	ldr	r0, [pc, #168]	; (80ae910 <save_cal_data+0x49c>)
 80ae866:	f012 f921 	bl	80c0aac <puts>
  uint32_t max_cross_talk = 0;
 80ae86a:	2300      	movs	r3, #0
 80ae86c:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
  for (j = 0; j < 64; j++) {
 80ae870:	2300      	movs	r3, #0
 80ae872:	f8c7 35d0 	str.w	r3, [r7, #1488]	; 0x5d0
 80ae876:	e030      	b.n	80ae8da <save_cal_data+0x466>
    if (cal_data.core.pxtalk_grid_rate.cal__grid_data__rate_kcps_per_spad[j] /
 80ae878:	f107 0308 	add.w	r3, r7, #8
 80ae87c:	f8d7 25d0 	ldr.w	r2, [r7, #1488]	; 0x5d0
 80ae880:	329c      	adds	r2, #156	; 0x9c
 80ae882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80ae886:	0adb      	lsrs	r3, r3, #11
 80ae888:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 80ae88c:	429a      	cmp	r2, r3
 80ae88e:	d209      	bcs.n	80ae8a4 <save_cal_data+0x430>
        2048 > max_cross_talk)
      max_cross_talk =
          cal_data.core.pxtalk_grid_rate.cal__grid_data__rate_kcps_per_spad[j] /
 80ae890:	f107 0308 	add.w	r3, r7, #8
 80ae894:	f8d7 25d0 	ldr.w	r2, [r7, #1488]	; 0x5d0
 80ae898:	329c      	adds	r2, #156	; 0x9c
 80ae89a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
      max_cross_talk =
 80ae89e:	0adb      	lsrs	r3, r3, #11
 80ae8a0:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
          2048;
    printf("%4x,",
           cal_data.core.pxtalk_grid_rate.
           cal__grid_data__rate_kcps_per_spad[j] / 2048);
 80ae8a4:	f107 0308 	add.w	r3, r7, #8
 80ae8a8:	f8d7 25d0 	ldr.w	r2, [r7, #1488]	; 0x5d0
 80ae8ac:	329c      	adds	r2, #156	; 0x9c
 80ae8ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    printf("%4x,",
 80ae8b2:	0adb      	lsrs	r3, r3, #11
 80ae8b4:	4619      	mov	r1, r3
 80ae8b6:	4817      	ldr	r0, [pc, #92]	; (80ae914 <save_cal_data+0x4a0>)
 80ae8b8:	f012 f85c 	bl	80c0974 <iprintf>
    if ((j + 1) % 8 == 0)
 80ae8bc:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	; 0x5d0
 80ae8c0:	3301      	adds	r3, #1
 80ae8c2:	f003 0307 	and.w	r3, r3, #7
 80ae8c6:	2b00      	cmp	r3, #0
 80ae8c8:	d102      	bne.n	80ae8d0 <save_cal_data+0x45c>
      printf("\n");
 80ae8ca:	200a      	movs	r0, #10
 80ae8cc:	f012 f86a 	bl	80c09a4 <putchar>
  for (j = 0; j < 64; j++) {
 80ae8d0:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	; 0x5d0
 80ae8d4:	3301      	adds	r3, #1
 80ae8d6:	f8c7 35d0 	str.w	r3, [r7, #1488]	; 0x5d0
 80ae8da:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	; 0x5d0
 80ae8de:	2b3f      	cmp	r3, #63	; 0x3f
 80ae8e0:	ddca      	ble.n	80ae878 <save_cal_data+0x404>
  }
  mtof_cali_data.max_cross_talk = max_cross_talk;
 80ae8e2:	4a08      	ldr	r2, [pc, #32]	; (80ae904 <save_cal_data+0x490>)
 80ae8e4:	f8d7 35c8 	ldr.w	r3, [r7, #1480]	; 0x5c8
 80ae8e8:	f8c2 3394 	str.w	r3, [r2, #916]	; 0x394
exit:
  return status;
 80ae8ec:	f8d7 35cc 	ldr.w	r3, [r7, #1484]	; 0x5cc
}
 80ae8f0:	4618      	mov	r0, r3
 80ae8f2:	f507 67bb 	add.w	r7, r7, #1496	; 0x5d8
 80ae8f6:	46bd      	mov	sp, r7
 80ae8f8:	bdb0      	pop	{r4, r5, r7, pc}
 80ae8fa:	bf00      	nop
 80ae8fc:	2001c318 	.word	0x2001c318
 80ae900:	080c6974 	.word	0x080c6974
 80ae904:	20008538 	.word	0x20008538
 80ae908:	080c6990 	.word	0x080c6990
 80ae90c:	080c69ac 	.word	0x080c69ac
 80ae910:	080c6bc0 	.word	0x080c6bc0
 80ae914:	080c6be4 	.word	0x080c6be4

080ae918 <load_cali_to_dev>:

int load_cali_to_dev(struct vl53l5_dev_handle_t *pdev)
{
 80ae918:	b580      	push	{r7, lr}
 80ae91a:	b084      	sub	sp, #16
 80ae91c:	af00      	add	r7, sp, #0
 80ae91e:	6078      	str	r0, [r7, #4]
  int32_t status = STATUS_OK;
 80ae920:	2300      	movs	r3, #0
 80ae922:	60fb      	str	r3, [r7, #12]
  if (mtof_cali_data.max_cross_talk != 0) {
 80ae924:	4b19      	ldr	r3, [pc, #100]	; (80ae98c <load_cali_to_dev+0x74>)
 80ae926:	f8d3 3394 	ldr.w	r3, [r3, #916]	; 0x394
 80ae92a:	2b00      	cmp	r3, #0
 80ae92c:	d021      	beq.n	80ae972 <load_cali_to_dev+0x5a>
    status =
        vl53l5_set_device_parameters(pdev, mtof_cali_data.shape_cali_data, 316);
 80ae92e:	f44f 729e 	mov.w	r2, #316	; 0x13c
 80ae932:	4916      	ldr	r1, [pc, #88]	; (80ae98c <load_cali_to_dev+0x74>)
 80ae934:	6878      	ldr	r0, [r7, #4]
 80ae936:	f00c ff21 	bl	80bb77c <vl53l5_set_device_parameters>
 80ae93a:	60f8      	str	r0, [r7, #12]
    if (status < STATUS_OK) {
 80ae93c:	68fb      	ldr	r3, [r7, #12]
 80ae93e:	2b00      	cmp	r3, #0
 80ae940:	da06      	bge.n	80ae950 <load_cali_to_dev+0x38>
      printf("Set shape cal data failed %d\n", status);
 80ae942:	68f9      	ldr	r1, [r7, #12]
 80ae944:	4812      	ldr	r0, [pc, #72]	; (80ae990 <load_cali_to_dev+0x78>)
 80ae946:	f012 f815 	bl	80c0974 <iprintf>
      return -1;
 80ae94a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80ae94e:	e018      	b.n	80ae982 <load_cali_to_dev+0x6a>
    }
    status =
        vl53l5_set_device_parameters(pdev, mtof_cali_data.grid_cali_data, 600);
 80ae950:	f44f 7216 	mov.w	r2, #600	; 0x258
 80ae954:	490f      	ldr	r1, [pc, #60]	; (80ae994 <load_cali_to_dev+0x7c>)
 80ae956:	6878      	ldr	r0, [r7, #4]
 80ae958:	f00c ff10 	bl	80bb77c <vl53l5_set_device_parameters>
 80ae95c:	60f8      	str	r0, [r7, #12]
    if (status < STATUS_OK) {
 80ae95e:	68fb      	ldr	r3, [r7, #12]
 80ae960:	2b00      	cmp	r3, #0
 80ae962:	da0d      	bge.n	80ae980 <load_cali_to_dev+0x68>
      printf("Set grid cal data failed %d\n", status);
 80ae964:	68f9      	ldr	r1, [r7, #12]
 80ae966:	480c      	ldr	r0, [pc, #48]	; (80ae998 <load_cali_to_dev+0x80>)
 80ae968:	f012 f804 	bl	80c0974 <iprintf>
      return -1;
 80ae96c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80ae970:	e007      	b.n	80ae982 <load_cali_to_dev+0x6a>
    }
  } else
    printf("mtof_cali_data.max_cross_talk = %u", mtof_cali_data.max_cross_talk);
 80ae972:	4b06      	ldr	r3, [pc, #24]	; (80ae98c <load_cali_to_dev+0x74>)
 80ae974:	f8d3 3394 	ldr.w	r3, [r3, #916]	; 0x394
 80ae978:	4619      	mov	r1, r3
 80ae97a:	4808      	ldr	r0, [pc, #32]	; (80ae99c <load_cali_to_dev+0x84>)
 80ae97c:	f011 fffa 	bl	80c0974 <iprintf>
  return 0;
 80ae980:	2300      	movs	r3, #0
}
 80ae982:	4618      	mov	r0, r3
 80ae984:	3710      	adds	r7, #16
 80ae986:	46bd      	mov	sp, r7
 80ae988:	bd80      	pop	{r7, pc}
 80ae98a:	bf00      	nop
 80ae98c:	20008538 	.word	0x20008538
 80ae990:	080c6bec 	.word	0x080c6bec
 80ae994:	20008674 	.word	0x20008674
 80ae998:	080c6c0c 	.word	0x080c6c0c
 80ae99c:	080c6c2c 	.word	0x080c6c2c

080ae9a0 <tof_platform_write>:
 *
 */

static int32_t tof_platform_write(void *handle, uint16_t reg, uint8_t * bufp,
                                  uint16_t len)
{
 80ae9a0:	b580      	push	{r7, lr}
 80ae9a2:	b086      	sub	sp, #24
 80ae9a4:	af02      	add	r7, sp, #8
 80ae9a6:	60f8      	str	r0, [r7, #12]
 80ae9a8:	607a      	str	r2, [r7, #4]
 80ae9aa:	461a      	mov	r2, r3
 80ae9ac:	460b      	mov	r3, r1
 80ae9ae:	817b      	strh	r3, [r7, #10]
 80ae9b0:	4613      	mov	r3, r2
 80ae9b2:	813b      	strh	r3, [r7, #8]
  if (handle == &tof_init_parms->spi_handle) {
 80ae9b4:	4b0b      	ldr	r3, [pc, #44]	; (80ae9e4 <tof_platform_write+0x44>)
 80ae9b6:	681b      	ldr	r3, [r3, #0]
 80ae9b8:	339c      	adds	r3, #156	; 0x9c
 80ae9ba:	68fa      	ldr	r2, [r7, #12]
 80ae9bc:	429a      	cmp	r2, r3
 80ae9be:	d10c      	bne.n	80ae9da <tof_platform_write+0x3a>
    BSP_SPI_16M_Write_Sequence(handle, dev.tof_cs_gpio_port, dev.tof_cs_pin, reg, bufp, len);
 80ae9c0:	4b09      	ldr	r3, [pc, #36]	; (80ae9e8 <tof_platform_write+0x48>)
 80ae9c2:	6959      	ldr	r1, [r3, #20]
 80ae9c4:	4b08      	ldr	r3, [pc, #32]	; (80ae9e8 <tof_platform_write+0x48>)
 80ae9c6:	699a      	ldr	r2, [r3, #24]
 80ae9c8:	893b      	ldrh	r3, [r7, #8]
 80ae9ca:	8978      	ldrh	r0, [r7, #10]
 80ae9cc:	9301      	str	r3, [sp, #4]
 80ae9ce:	687b      	ldr	r3, [r7, #4]
 80ae9d0:	9300      	str	r3, [sp, #0]
 80ae9d2:	4603      	mov	r3, r0
 80ae9d4:	68f8      	ldr	r0, [r7, #12]
 80ae9d6:	f00f ff92 	bl	80be8fe <BSP_SPI_16M_Write_Sequence>
  }

  return 0;
 80ae9da:	2300      	movs	r3, #0
}
 80ae9dc:	4618      	mov	r0, r3
 80ae9de:	3710      	adds	r7, #16
 80ae9e0:	46bd      	mov	sp, r7
 80ae9e2:	bd80      	pop	{r7, pc}
 80ae9e4:	200084c4 	.word	0x200084c4
 80ae9e8:	200084cc 	.word	0x200084cc

080ae9ec <tof_platform_read>:
 *
 */

static int32_t tof_platform_read(void *handle, uint16_t reg, uint8_t * bufp,
                                 uint16_t len)
{
 80ae9ec:	b580      	push	{r7, lr}
 80ae9ee:	b086      	sub	sp, #24
 80ae9f0:	af02      	add	r7, sp, #8
 80ae9f2:	60f8      	str	r0, [r7, #12]
 80ae9f4:	607a      	str	r2, [r7, #4]
 80ae9f6:	461a      	mov	r2, r3
 80ae9f8:	460b      	mov	r3, r1
 80ae9fa:	817b      	strh	r3, [r7, #10]
 80ae9fc:	4613      	mov	r3, r2
 80ae9fe:	813b      	strh	r3, [r7, #8]
  if (handle == &tof_init_parms->spi_handle) {
 80aea00:	4b0b      	ldr	r3, [pc, #44]	; (80aea30 <tof_platform_read+0x44>)
 80aea02:	681b      	ldr	r3, [r3, #0]
 80aea04:	339c      	adds	r3, #156	; 0x9c
 80aea06:	68fa      	ldr	r2, [r7, #12]
 80aea08:	429a      	cmp	r2, r3
 80aea0a:	d10c      	bne.n	80aea26 <tof_platform_read+0x3a>
    BSP_SPI_16M_Read_Sequence(handle, dev.tof_cs_gpio_port, dev.tof_cs_pin, reg, bufp, len);
 80aea0c:	4b09      	ldr	r3, [pc, #36]	; (80aea34 <tof_platform_read+0x48>)
 80aea0e:	6959      	ldr	r1, [r3, #20]
 80aea10:	4b08      	ldr	r3, [pc, #32]	; (80aea34 <tof_platform_read+0x48>)
 80aea12:	699a      	ldr	r2, [r3, #24]
 80aea14:	893b      	ldrh	r3, [r7, #8]
 80aea16:	8978      	ldrh	r0, [r7, #10]
 80aea18:	9301      	str	r3, [sp, #4]
 80aea1a:	687b      	ldr	r3, [r7, #4]
 80aea1c:	9300      	str	r3, [sp, #0]
 80aea1e:	4603      	mov	r3, r0
 80aea20:	68f8      	ldr	r0, [r7, #12]
 80aea22:	f00f ffb8 	bl	80be996 <BSP_SPI_16M_Read_Sequence>
  }

  return 0;
 80aea26:	2300      	movs	r3, #0
}
 80aea28:	4618      	mov	r0, r3
 80aea2a:	3710      	adds	r7, #16
 80aea2c:	46bd      	mov	sp, r7
 80aea2e:	bd80      	pop	{r7, pc}
 80aea30:	200084c4 	.word	0x200084c4
 80aea34:	200084cc 	.word	0x200084cc

080aea38 <tof_get_range_data>:

static void tof_get_range_data(struct vl53l5_dev_handle_t *pdev)
{
 80aea38:	b580      	push	{r7, lr}
 80aea3a:	b084      	sub	sp, #16
 80aea3c:	af00      	add	r7, sp, #0
 80aea3e:	6078      	str	r0, [r7, #4]
  int32_t status = ranging_loop(pdev);
 80aea40:	6878      	ldr	r0, [r7, #4]
 80aea42:	f000 fbf3 	bl	80af22c <ranging_loop>
 80aea46:	60f8      	str	r0, [r7, #12]
  if (status < STATUS_OK) {
 80aea48:	68fb      	ldr	r3, [r7, #12]
 80aea4a:	2b00      	cmp	r3, #0
 80aea4c:	da03      	bge.n	80aea56 <tof_get_range_data+0x1e>
    printf("ranging loop failed: %d\r\n", (int)status);
 80aea4e:	68f9      	ldr	r1, [r7, #12]
 80aea50:	4803      	ldr	r0, [pc, #12]	; (80aea60 <tof_get_range_data+0x28>)
 80aea52:	f011 ff8f 	bl	80c0974 <iprintf>
  }
}
 80aea56:	bf00      	nop
 80aea58:	3710      	adds	r7, #16
 80aea5a:	46bd      	mov	sp, r7
 80aea5c:	bd80      	pop	{r7, pc}
 80aea5e:	bf00      	nop
 80aea60:	080c6c50 	.word	0x080c6c50

080aea64 <tof_init>:
/*
 * @brief  platform specific initialization (platform dependent)
 */

int tof_init(void *para, void *para2)
{
 80aea64:	b580      	push	{r7, lr}
 80aea66:	b084      	sub	sp, #16
 80aea68:	af00      	add	r7, sp, #0
 80aea6a:	6078      	str	r0, [r7, #4]
 80aea6c:	6039      	str	r1, [r7, #0]

  tof_init_parms = (platform_prams *) para;
 80aea6e:	4a35      	ldr	r2, [pc, #212]	; (80aeb44 <tof_init+0xe0>)
 80aea70:	687b      	ldr	r3, [r7, #4]
 80aea72:	6013      	str	r3, [r2, #0]
  /* Initialize mems driver interface */
  tof_dev_ctx.write_reg = tof_platform_write;
 80aea74:	4b34      	ldr	r3, [pc, #208]	; (80aeb48 <tof_init+0xe4>)
 80aea76:	4a35      	ldr	r2, [pc, #212]	; (80aeb4c <tof_init+0xe8>)
 80aea78:	601a      	str	r2, [r3, #0]
  tof_dev_ctx.read_reg = tof_platform_read;
 80aea7a:	4b33      	ldr	r3, [pc, #204]	; (80aeb48 <tof_init+0xe4>)
 80aea7c:	4a34      	ldr	r2, [pc, #208]	; (80aeb50 <tof_init+0xec>)
 80aea7e:	605a      	str	r2, [r3, #4]
  dev.spi_handle = &tof_init_parms->spi_handle;
 80aea80:	4b30      	ldr	r3, [pc, #192]	; (80aeb44 <tof_init+0xe0>)
 80aea82:	681b      	ldr	r3, [r3, #0]
 80aea84:	339c      	adds	r3, #156	; 0x9c
 80aea86:	4a33      	ldr	r2, [pc, #204]	; (80aeb54 <tof_init+0xf0>)
 80aea88:	60d3      	str	r3, [r2, #12]
  dev.timer_handle = sensor_get_timestamp;
 80aea8a:	4b32      	ldr	r3, [pc, #200]	; (80aeb54 <tof_init+0xf0>)
 80aea8c:	4a32      	ldr	r2, [pc, #200]	; (80aeb58 <tof_init+0xf4>)
 80aea8e:	611a      	str	r2, [r3, #16]
  dev.tof_cs_gpio_port = tof_init_parms->tof_cs_gpio_port;
 80aea90:	4b2c      	ldr	r3, [pc, #176]	; (80aeb44 <tof_init+0xe0>)
 80aea92:	681b      	ldr	r3, [r3, #0]
 80aea94:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80aea98:	4a2e      	ldr	r2, [pc, #184]	; (80aeb54 <tof_init+0xf0>)
 80aea9a:	6153      	str	r3, [r2, #20]
  dev.tof_cs_pin = &tof_init_parms->tof_cs_pin;
 80aea9c:	4b29      	ldr	r3, [pc, #164]	; (80aeb44 <tof_init+0xe0>)
 80aea9e:	681b      	ldr	r3, [r3, #0]
 80aeaa0:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80aeaa4:	4a2b      	ldr	r2, [pc, #172]	; (80aeb54 <tof_init+0xf0>)
 80aeaa6:	6193      	str	r3, [r2, #24]
  /*power on */
  HAL_GPIO_WritePin(TOF_EN_GPIO_Port, TOF_EN_Pin, GPIO_PIN_SET);
 80aeaa8:	2201      	movs	r2, #1
 80aeaaa:	2120      	movs	r1, #32
 80aeaac:	482b      	ldr	r0, [pc, #172]	; (80aeb5c <tof_init+0xf8>)
 80aeaae:	f002 fdeb 	bl	80b1688 <HAL_GPIO_WritePin>
  osDelay(1);
 80aeab2:	2001      	movs	r0, #1
 80aeab4:	f007 fb21 	bl	80b60fa <osDelay>
  /*set cs high by default */
  HAL_GPIO_WritePin(TOF_CS_GPIO_Port, TOF_CS_Pin, GPIO_PIN_SET);
 80aeab8:	2201      	movs	r2, #1
 80aeaba:	2110      	movs	r1, #16
 80aeabc:	4828      	ldr	r0, [pc, #160]	; (80aeb60 <tof_init+0xfc>)
 80aeabe:	f002 fde3 	bl	80b1688 <HAL_GPIO_WritePin>
  osDelay(1);
 80aeac2:	2001      	movs	r0, #1
 80aeac4:	f007 fb19 	bl	80b60fa <osDelay>
  //uint8_t status = HAL_GPIO_ReadPin(TOF_CS_GPIO_Port, TOF_CS_Pin);
  //printf("TOF cs status: %u \r\n", status);

  uint8_t current = 0x0;
 80aeac8:	2300      	movs	r3, #0
 80aeaca:	73fb      	strb	r3, [r7, #15]

  printf("TOF current page: %u \r\n", current);
 80aeacc:	7bfb      	ldrb	r3, [r7, #15]
 80aeace:	4619      	mov	r1, r3
 80aead0:	4824      	ldr	r0, [pc, #144]	; (80aeb64 <tof_init+0x100>)
 80aead2:	f011 ff4f 	bl	80c0974 <iprintf>
  tof_platform_write(dev.spi_handle, (uint16_t) INITIAL_PAGE_ID,
 80aead6:	4b1f      	ldr	r3, [pc, #124]	; (80aeb54 <tof_init+0xf0>)
 80aead8:	68d8      	ldr	r0, [r3, #12]
 80aeada:	f107 020f 	add.w	r2, r7, #15
 80aeade:	2301      	movs	r3, #1
 80aeae0:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80aeae4:	f7ff ff5c 	bl	80ae9a0 <tof_platform_write>
                     &current, 1);

  /* Check ID */
  uint8_t id_0 = 0, id_1 = 0;
 80aeae8:	2300      	movs	r3, #0
 80aeaea:	73bb      	strb	r3, [r7, #14]
 80aeaec:	2300      	movs	r3, #0
 80aeaee:	737b      	strb	r3, [r7, #13]
  tof_platform_read(dev.spi_handle, (uint16_t) TOF_DEVICE_ID, &id_0, 1);
 80aeaf0:	4b18      	ldr	r3, [pc, #96]	; (80aeb54 <tof_init+0xf0>)
 80aeaf2:	68d8      	ldr	r0, [r3, #12]
 80aeaf4:	f107 020e 	add.w	r2, r7, #14
 80aeaf8:	2301      	movs	r3, #1
 80aeafa:	2100      	movs	r1, #0
 80aeafc:	f7ff ff76 	bl	80ae9ec <tof_platform_read>

  tof_platform_read(dev.spi_handle, (uint16_t) TOF_REVISION_ID, &id_1, 1);
 80aeb00:	4b14      	ldr	r3, [pc, #80]	; (80aeb54 <tof_init+0xf0>)
 80aeb02:	68d8      	ldr	r0, [r3, #12]
 80aeb04:	f107 020d 	add.w	r2, r7, #13
 80aeb08:	2301      	movs	r3, #1
 80aeb0a:	2101      	movs	r1, #1
 80aeb0c:	f7ff ff6e 	bl	80ae9ec <tof_platform_read>

  printf("TOF whoamI: 0x%x 0x%x %p\r\n", id_0, id_1, dev.spi_handle);
 80aeb10:	7bbb      	ldrb	r3, [r7, #14]
 80aeb12:	4619      	mov	r1, r3
 80aeb14:	7b7b      	ldrb	r3, [r7, #13]
 80aeb16:	461a      	mov	r2, r3
 80aeb18:	4b0e      	ldr	r3, [pc, #56]	; (80aeb54 <tof_init+0xf0>)
 80aeb1a:	68db      	ldr	r3, [r3, #12]
 80aeb1c:	4812      	ldr	r0, [pc, #72]	; (80aeb68 <tof_init+0x104>)
 80aeb1e:	f011 ff29 	bl	80c0974 <iprintf>

  if (id_0 != TOF_DEVICE_ID_VALUE || id_1 != TOF_REVISION_ID_VALUE) {
 80aeb22:	7bbb      	ldrb	r3, [r7, #14]
 80aeb24:	2bf0      	cmp	r3, #240	; 0xf0
 80aeb26:	d102      	bne.n	80aeb2e <tof_init+0xca>
 80aeb28:	7b7b      	ldrb	r3, [r7, #13]
 80aeb2a:	2b02      	cmp	r3, #2
 80aeb2c:	d005      	beq.n	80aeb3a <tof_init+0xd6>
    printf("init failed for TOF!\r\n");
 80aeb2e:	480f      	ldr	r0, [pc, #60]	; (80aeb6c <tof_init+0x108>)
 80aeb30:	f011 ffbc 	bl	80c0aac <puts>
    return SENSOR_FAILED;
 80aeb34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80aeb38:	e000      	b.n	80aeb3c <tof_init+0xd8>
  }
  return SENSOR_SUCCESS;
 80aeb3a:	2300      	movs	r3, #0
}
 80aeb3c:	4618      	mov	r0, r3
 80aeb3e:	3710      	adds	r7, #16
 80aeb40:	46bd      	mov	sp, r7
 80aeb42:	bd80      	pop	{r7, pc}
 80aeb44:	200084c4 	.word	0x200084c4
 80aeb48:	200084b8 	.word	0x200084b8
 80aeb4c:	080ae9a1 	.word	0x080ae9a1
 80aeb50:	080ae9ed 	.word	0x080ae9ed
 80aeb54:	200084cc 	.word	0x200084cc
 80aeb58:	080ad709 	.word	0x080ad709
 80aeb5c:	40020800 	.word	0x40020800
 80aeb60:	40020000 	.word	0x40020000
 80aeb64:	080c6c6c 	.word	0x080c6c6c
 80aeb68:	080c6c84 	.word	0x080c6c84
 80aeb6c:	080c6ca0 	.word	0x080c6ca0

080aeb70 <tof_enable>:

static int32_t tof_enable()
{
 80aeb70:	b580      	push	{r7, lr}
 80aeb72:	b082      	sub	sp, #8
 80aeb74:	af00      	add	r7, sp, #0
  int32_t status = 0;
 80aeb76:	2300      	movs	r3, #0
 80aeb78:	607b      	str	r3, [r7, #4]
  if (sensor_activate_count == 0) {
 80aeb7a:	4b55      	ldr	r3, [pc, #340]	; (80aecd0 <tof_enable+0x160>)
 80aeb7c:	781b      	ldrb	r3, [r3, #0]
 80aeb7e:	2b00      	cmp	r3, #0
 80aeb80:	d168      	bne.n	80aec54 <tof_enable+0xe4>
    tof_activated = true;
 80aeb82:	4b54      	ldr	r3, [pc, #336]	; (80aecd4 <tof_enable+0x164>)
 80aeb84:	2201      	movs	r2, #1
 80aeb86:	701a      	strb	r2, [r3, #0]
    int32_t status = STATUS_OK;
 80aeb88:	2300      	movs	r3, #0
 80aeb8a:	603b      	str	r3, [r7, #0]

    /* Platform specific data: running in SPI mode */
    dev.comms_type = VL53L5_SPI;
 80aeb8c:	4b52      	ldr	r3, [pc, #328]	; (80aecd8 <tof_enable+0x168>)
 80aeb8e:	2201      	movs	r2, #1
 80aeb90:	705a      	strb	r2, [r3, #1]

    /* set the fw buffer to be loaded into device RAM */
    printf("Setting up fw buffer.\r\n");
 80aeb92:	4852      	ldr	r0, [pc, #328]	; (80aecdc <tof_enable+0x16c>)
 80aeb94:	f011 ff8a 	bl	80c0aac <puts>
    VL53L5_ASSIGN_FW_BUFF(&dev, (uint8_t *) _fw_buffer, _fw_buff_count);
 80aeb98:	4b4f      	ldr	r3, [pc, #316]	; (80aecd8 <tof_enable+0x168>)
 80aeb9a:	4a51      	ldr	r2, [pc, #324]	; (80aece0 <tof_enable+0x170>)
 80aeb9c:	621a      	str	r2, [r3, #32]
 80aeb9e:	4b51      	ldr	r3, [pc, #324]	; (80aece4 <tof_enable+0x174>)
 80aeba0:	681b      	ldr	r3, [r3, #0]
 80aeba2:	4a4d      	ldr	r2, [pc, #308]	; (80aecd8 <tof_enable+0x168>)
 80aeba4:	6253      	str	r3, [r2, #36]	; 0x24

    /* Setup the comms buffer */
    VL53L5_ASSIGN_COMMS_BUFF(&dev, _comms_buffer, sizeof(_comms_buffer));
 80aeba6:	4b4c      	ldr	r3, [pc, #304]	; (80aecd8 <tof_enable+0x168>)
 80aeba8:	4a4f      	ldr	r2, [pc, #316]	; (80aece8 <tof_enable+0x178>)
 80aebaa:	629a      	str	r2, [r3, #40]	; 0x28
 80aebac:	4b4a      	ldr	r3, [pc, #296]	; (80aecd8 <tof_enable+0x168>)
 80aebae:	f240 728a 	movw	r2, #1930	; 0x78a
 80aebb2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Initialise platform and comms */
    printf("Initialising.\r\n");
 80aebb4:	484d      	ldr	r0, [pc, #308]	; (80aecec <tof_enable+0x17c>)
 80aebb6:	f011 ff79 	bl	80c0aac <puts>
    status = vl53l5_platform_init(&dev);
 80aebba:	4847      	ldr	r0, [pc, #284]	; (80aecd8 <tof_enable+0x168>)
 80aebbc:	f010 f854 	bl	80bec68 <vl53l5_platform_init>
 80aebc0:	6038      	str	r0, [r7, #0]
    if (status < STATUS_OK) {
 80aebc2:	683b      	ldr	r3, [r7, #0]
 80aebc4:	2b00      	cmp	r3, #0
 80aebc6:	da04      	bge.n	80aebd2 <tof_enable+0x62>
      printf("Platform init failed: %d\r\n", status);
 80aebc8:	6839      	ldr	r1, [r7, #0]
 80aebca:	4849      	ldr	r0, [pc, #292]	; (80aecf0 <tof_enable+0x180>)
 80aebcc:	f011 fed2 	bl	80c0974 <iprintf>
      goto exit;
 80aebd0:	e048      	b.n	80aec64 <tof_enable+0xf4>
    }
    // -------------------- set the high power mode ----------------
    // move the device in HP whatever its state is high power
    // already or low power with comms. But in case it has been set in LP
    // at the latest termination stage this call is mandatory
    dev.host_dev.power_state = VL53L5_POWER_STATE_LP_IDLE_COMMS;
 80aebd2:	4b41      	ldr	r3, [pc, #260]	; (80aecd8 <tof_enable+0x168>)
 80aebd4:	2203      	movs	r2, #3
 80aebd6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    status = vl53l5_set_power_mode(&dev, VL53L5_POWER_STATE_HP_IDLE);
 80aebda:	2104      	movs	r1, #4
 80aebdc:	483e      	ldr	r0, [pc, #248]	; (80aecd8 <tof_enable+0x168>)
 80aebde:	f00c fe27 	bl	80bb830 <vl53l5_set_power_mode>
 80aebe2:	6038      	str	r0, [r7, #0]
    if (status < STATUS_OK) {
 80aebe4:	683b      	ldr	r3, [r7, #0]
 80aebe6:	2b00      	cmp	r3, #0
 80aebe8:	da03      	bge.n	80aebf2 <tof_enable+0x82>
      printf
 80aebea:	4842      	ldr	r0, [pc, #264]	; (80aecf4 <tof_enable+0x184>)
 80aebec:	f011 ff5e 	bl	80c0aac <puts>
          ("Could not put the device in High Power. Is it already powered up ?\n");
      goto exit;
 80aebf0:	e038      	b.n	80aec64 <tof_enable+0xf4>
    }
    /* Initialise device */
    status = vl53l5_init(&dev);
 80aebf2:	4839      	ldr	r0, [pc, #228]	; (80aecd8 <tof_enable+0x168>)
 80aebf4:	f00c fbfc 	bl	80bb3f0 <vl53l5_init>
 80aebf8:	6038      	str	r0, [r7, #0]
    if (status < STATUS_OK) {
 80aebfa:	683b      	ldr	r3, [r7, #0]
 80aebfc:	2b00      	cmp	r3, #0
 80aebfe:	da04      	bge.n	80aec0a <tof_enable+0x9a>
      printf("Init failed: %d\r\n", status);
 80aec00:	6839      	ldr	r1, [r7, #0]
 80aec02:	483d      	ldr	r0, [pc, #244]	; (80aecf8 <tof_enable+0x188>)
 80aec04:	f011 feb6 	bl	80c0974 <iprintf>
      goto exit;
 80aec08:	e02c      	b.n	80aec64 <tof_enable+0xf4>
    }
    status = load_cali_to_dev(&dev);
 80aec0a:	4833      	ldr	r0, [pc, #204]	; (80aecd8 <tof_enable+0x168>)
 80aec0c:	f7ff fe84 	bl	80ae918 <load_cali_to_dev>
 80aec10:	6038      	str	r0, [r7, #0]
    if (status < STATUS_OK) {
 80aec12:	683b      	ldr	r3, [r7, #0]
 80aec14:	2b00      	cmp	r3, #0
 80aec16:	da04      	bge.n	80aec22 <tof_enable+0xb2>
      printf("load calidata to device failed: %d\r\n", status);
 80aec18:	6839      	ldr	r1, [r7, #0]
 80aec1a:	4838      	ldr	r0, [pc, #224]	; (80aecfc <tof_enable+0x18c>)
 80aec1c:	f011 feaa 	bl	80c0974 <iprintf>
      goto exit;
 80aec20:	e020      	b.n	80aec64 <tof_enable+0xf4>
    }

    status = send_device_config(&dev);
 80aec22:	482d      	ldr	r0, [pc, #180]	; (80aecd8 <tof_enable+0x168>)
 80aec24:	f000 fad6 	bl	80af1d4 <send_device_config>
 80aec28:	6038      	str	r0, [r7, #0]
    if (status < STATUS_OK) {
 80aec2a:	683b      	ldr	r3, [r7, #0]
 80aec2c:	2b00      	cmp	r3, #0
 80aec2e:	da04      	bge.n	80aec3a <tof_enable+0xca>
      printf("setting config failed: %d\r\n", status);
 80aec30:	6839      	ldr	r1, [r7, #0]
 80aec32:	4833      	ldr	r0, [pc, #204]	; (80aed00 <tof_enable+0x190>)
 80aec34:	f011 fe9e 	bl	80c0974 <iprintf>
      goto exit;
 80aec38:	e014      	b.n	80aec64 <tof_enable+0xf4>
    }
    status = vl53l5_start(&dev, NULL);
 80aec3a:	2100      	movs	r1, #0
 80aec3c:	4826      	ldr	r0, [pc, #152]	; (80aecd8 <tof_enable+0x168>)
 80aec3e:	f00c fc66 	bl	80bb50e <vl53l5_start>
 80aec42:	6038      	str	r0, [r7, #0]

    if (status < STATUS_OK) {
 80aec44:	683b      	ldr	r3, [r7, #0]
 80aec46:	2b00      	cmp	r3, #0
 80aec48:	da04      	bge.n	80aec54 <tof_enable+0xe4>
      printf("Start failed: %d\r\n", status);
 80aec4a:	6839      	ldr	r1, [r7, #0]
 80aec4c:	482d      	ldr	r0, [pc, #180]	; (80aed04 <tof_enable+0x194>)
 80aec4e:	f011 fe91 	bl	80c0974 <iprintf>
      goto exit;
 80aec52:	e007      	b.n	80aec64 <tof_enable+0xf4>
    }
  }
  sensor_activate_count++;
 80aec54:	4b1e      	ldr	r3, [pc, #120]	; (80aecd0 <tof_enable+0x160>)
 80aec56:	781b      	ldrb	r3, [r3, #0]
 80aec58:	3301      	adds	r3, #1
 80aec5a:	b2da      	uxtb	r2, r3
 80aec5c:	4b1c      	ldr	r3, [pc, #112]	; (80aecd0 <tof_enable+0x160>)
 80aec5e:	701a      	strb	r2, [r3, #0]

  return SENSOR_SUCCESS;
 80aec60:	2300      	movs	r3, #0
 80aec62:	e030      	b.n	80aecc6 <tof_enable+0x156>

exit:
  if (tof_activated) {
 80aec64:	4b1b      	ldr	r3, [pc, #108]	; (80aecd4 <tof_enable+0x164>)
 80aec66:	781b      	ldrb	r3, [r3, #0]
 80aec68:	2b00      	cmp	r3, #0
 80aec6a:	d02b      	beq.n	80aecc4 <tof_enable+0x154>
    if (status < STATUS_OK) {
 80aec6c:	687b      	ldr	r3, [r7, #4]
 80aec6e:	2b00      	cmp	r3, #0
 80aec70:	da08      	bge.n	80aec84 <tof_enable+0x114>
      status = vl53l5_read_device_error(&dev, status);
 80aec72:	6879      	ldr	r1, [r7, #4]
 80aec74:	4818      	ldr	r0, [pc, #96]	; (80aecd8 <tof_enable+0x168>)
 80aec76:	f00c fd22 	bl	80bb6be <vl53l5_read_device_error>
 80aec7a:	6078      	str	r0, [r7, #4]
      printf("tof enable failed: vl53l5_read_device_error status %d\r\n",
 80aec7c:	6879      	ldr	r1, [r7, #4]
 80aec7e:	4822      	ldr	r0, [pc, #136]	; (80aed08 <tof_enable+0x198>)
 80aec80:	f011 fe78 	bl	80c0974 <iprintf>
             status);
    }
    status = vl53l5_stop(&dev, NULL);
 80aec84:	2100      	movs	r1, #0
 80aec86:	4814      	ldr	r0, [pc, #80]	; (80aecd8 <tof_enable+0x168>)
 80aec88:	f00c fcb9 	bl	80bb5fe <vl53l5_stop>
 80aec8c:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) {
 80aec8e:	687b      	ldr	r3, [r7, #4]
 80aec90:	2b00      	cmp	r3, #0
 80aec92:	da03      	bge.n	80aec9c <tof_enable+0x12c>
      printf("tof_enable failed vl53l5_stop failed: status %d\r\n", status);
 80aec94:	6879      	ldr	r1, [r7, #4]
 80aec96:	481d      	ldr	r0, [pc, #116]	; (80aed0c <tof_enable+0x19c>)
 80aec98:	f011 fe6c 	bl	80c0974 <iprintf>
    }
    vl53l5_term(&dev);
 80aec9c:	480e      	ldr	r0, [pc, #56]	; (80aecd8 <tof_enable+0x168>)
 80aec9e:	f00c fc13 	bl	80bb4c8 <vl53l5_term>
    if (status < STATUS_OK) {
 80aeca2:	687b      	ldr	r3, [r7, #4]
 80aeca4:	2b00      	cmp	r3, #0
 80aeca6:	da03      	bge.n	80aecb0 <tof_enable+0x140>
      printf("tof_enable failed  vl53l5_term failed: status %d\r\n", status);
 80aeca8:	6879      	ldr	r1, [r7, #4]
 80aecaa:	4819      	ldr	r0, [pc, #100]	; (80aed10 <tof_enable+0x1a0>)
 80aecac:	f011 fe62 	bl	80c0974 <iprintf>
    }
    vl53l5_platform_terminate(&dev);
 80aecb0:	4809      	ldr	r0, [pc, #36]	; (80aecd8 <tof_enable+0x168>)
 80aecb2:	f010 f843 	bl	80bed3c <vl53l5_platform_terminate>
    if (status < STATUS_OK) {
 80aecb6:	687b      	ldr	r3, [r7, #4]
 80aecb8:	2b00      	cmp	r3, #0
 80aecba:	da03      	bge.n	80aecc4 <tof_enable+0x154>
      printf("tof_enable failed  platform term failed: status %d\r\n", status);
 80aecbc:	6879      	ldr	r1, [r7, #4]
 80aecbe:	4815      	ldr	r0, [pc, #84]	; (80aed14 <tof_enable+0x1a4>)
 80aecc0:	f011 fe58 	bl	80c0974 <iprintf>
    }
  }

  return status;
 80aecc4:	687b      	ldr	r3, [r7, #4]
}
 80aecc6:	4618      	mov	r0, r3
 80aecc8:	3708      	adds	r7, #8
 80aecca:	46bd      	mov	sp, r7
 80aeccc:	bd80      	pop	{r7, pc}
 80aecce:	bf00      	nop
 80aecd0:	200084c8 	.word	0x200084c8
 80aecd4:	200084c9 	.word	0x200084c9
 80aecd8:	200084cc 	.word	0x200084cc
 80aecdc:	080c6cb8 	.word	0x080c6cb8
 80aece0:	080c7a70 	.word	0x080c7a70
 80aece4:	20007c58 	.word	0x20007c58
 80aece8:	200088d0 	.word	0x200088d0
 80aecec:	080c6cd0 	.word	0x080c6cd0
 80aecf0:	080c6ce0 	.word	0x080c6ce0
 80aecf4:	080c6cfc 	.word	0x080c6cfc
 80aecf8:	080c6d40 	.word	0x080c6d40
 80aecfc:	080c6d54 	.word	0x080c6d54
 80aed00:	080c6d7c 	.word	0x080c6d7c
 80aed04:	080c688c 	.word	0x080c688c
 80aed08:	080c6d98 	.word	0x080c6d98
 80aed0c:	080c6dd0 	.word	0x080c6dd0
 80aed10:	080c6e04 	.word	0x080c6e04
 80aed14:	080c6e38 	.word	0x080c6e38

080aed18 <tof_disable>:

static int32_t tof_disable()
{
 80aed18:	b580      	push	{r7, lr}
 80aed1a:	b082      	sub	sp, #8
 80aed1c:	af00      	add	r7, sp, #0
  int32_t status = 0;
 80aed1e:	2300      	movs	r3, #0
 80aed20:	607b      	str	r3, [r7, #4]
  sensor_activate_count--;
 80aed22:	4b21      	ldr	r3, [pc, #132]	; (80aeda8 <tof_disable+0x90>)
 80aed24:	781b      	ldrb	r3, [r3, #0]
 80aed26:	3b01      	subs	r3, #1
 80aed28:	b2da      	uxtb	r2, r3
 80aed2a:	4b1f      	ldr	r3, [pc, #124]	; (80aeda8 <tof_disable+0x90>)
 80aed2c:	701a      	strb	r2, [r3, #0]
  if (sensor_activate_count == 0) {
 80aed2e:	4b1e      	ldr	r3, [pc, #120]	; (80aeda8 <tof_disable+0x90>)
 80aed30:	781b      	ldrb	r3, [r3, #0]
 80aed32:	2b00      	cmp	r3, #0
 80aed34:	d133      	bne.n	80aed9e <tof_disable+0x86>
    tof_activated = false;
 80aed36:	4b1d      	ldr	r3, [pc, #116]	; (80aedac <tof_disable+0x94>)
 80aed38:	2200      	movs	r2, #0
 80aed3a:	701a      	strb	r2, [r3, #0]
    printf("asking device to stop ranging...\r\n");
 80aed3c:	481c      	ldr	r0, [pc, #112]	; (80aedb0 <tof_disable+0x98>)
 80aed3e:	f011 feb5 	bl	80c0aac <puts>
    status = vl53l5_stop(&dev, NULL);
 80aed42:	2100      	movs	r1, #0
 80aed44:	481b      	ldr	r0, [pc, #108]	; (80aedb4 <tof_disable+0x9c>)
 80aed46:	f00c fc5a 	bl	80bb5fe <vl53l5_stop>
 80aed4a:	6078      	str	r0, [r7, #4]

    if (status < STATUS_OK) {
 80aed4c:	687b      	ldr	r3, [r7, #4]
 80aed4e:	2b00      	cmp	r3, #0
 80aed50:	da03      	bge.n	80aed5a <tof_disable+0x42>
      printf("Stop command failed: status %d\r\n", status);
 80aed52:	6879      	ldr	r1, [r7, #4]
 80aed54:	4818      	ldr	r0, [pc, #96]	; (80aedb8 <tof_disable+0xa0>)
 80aed56:	f011 fe0d 	bl	80c0974 <iprintf>
    }
    status = vl53l5_set_power_mode(&dev, VL53L5_POWER_STATE_LP_IDLE_COMMS);
 80aed5a:	2103      	movs	r1, #3
 80aed5c:	4815      	ldr	r0, [pc, #84]	; (80aedb4 <tof_disable+0x9c>)
 80aed5e:	f00c fd67 	bl	80bb830 <vl53l5_set_power_mode>
 80aed62:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) {
 80aed64:	687b      	ldr	r3, [r7, #4]
 80aed66:	2b00      	cmp	r3, #0
 80aed68:	da03      	bge.n	80aed72 <tof_disable+0x5a>
      printf("set device in low power idle fails : %d\n", status);
 80aed6a:	6879      	ldr	r1, [r7, #4]
 80aed6c:	4813      	ldr	r0, [pc, #76]	; (80aedbc <tof_disable+0xa4>)
 80aed6e:	f011 fe01 	bl	80c0974 <iprintf>
    }
    status = vl53l5_term(&dev);
 80aed72:	4810      	ldr	r0, [pc, #64]	; (80aedb4 <tof_disable+0x9c>)
 80aed74:	f00c fba8 	bl	80bb4c8 <vl53l5_term>
 80aed78:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) {
 80aed7a:	687b      	ldr	r3, [r7, #4]
 80aed7c:	2b00      	cmp	r3, #0
 80aed7e:	da03      	bge.n	80aed88 <tof_disable+0x70>
      printf("vl53l5_term fails : %d\n", status);
 80aed80:	6879      	ldr	r1, [r7, #4]
 80aed82:	480f      	ldr	r0, [pc, #60]	; (80aedc0 <tof_disable+0xa8>)
 80aed84:	f011 fdf6 	bl	80c0974 <iprintf>
    }

    status = vl53l5_platform_terminate(&dev);
 80aed88:	480a      	ldr	r0, [pc, #40]	; (80aedb4 <tof_disable+0x9c>)
 80aed8a:	f00f ffd7 	bl	80bed3c <vl53l5_platform_terminate>
 80aed8e:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) {
 80aed90:	687b      	ldr	r3, [r7, #4]
 80aed92:	2b00      	cmp	r3, #0
 80aed94:	da03      	bge.n	80aed9e <tof_disable+0x86>
      printf("vl53l5_platform_terminate fails : %d\n", status);
 80aed96:	6879      	ldr	r1, [r7, #4]
 80aed98:	480a      	ldr	r0, [pc, #40]	; (80aedc4 <tof_disable+0xac>)
 80aed9a:	f011 fdeb 	bl	80c0974 <iprintf>
    }
  }

  return status;
 80aed9e:	687b      	ldr	r3, [r7, #4]
}
 80aeda0:	4618      	mov	r0, r3
 80aeda2:	3708      	adds	r7, #8
 80aeda4:	46bd      	mov	sp, r7
 80aeda6:	bd80      	pop	{r7, pc}
 80aeda8:	200084c8 	.word	0x200084c8
 80aedac:	200084c9 	.word	0x200084c9
 80aedb0:	080c68e8 	.word	0x080c68e8
 80aedb4:	200084cc 	.word	0x200084cc
 80aedb8:	080c690c 	.word	0x080c690c
 80aedbc:	080c6e70 	.word	0x080c6e70
 80aedc0:	080c6e9c 	.word	0x080c6e9c
 80aedc4:	080c6eb4 	.word	0x080c6eb4

080aedc8 <tof_activate>:

int tof_activate(bool activate)
{
 80aedc8:	b580      	push	{r7, lr}
 80aedca:	b084      	sub	sp, #16
 80aedcc:	af00      	add	r7, sp, #0
 80aedce:	4603      	mov	r3, r0
 80aedd0:	71fb      	strb	r3, [r7, #7]
  int res = 0;
 80aedd2:	2300      	movs	r3, #0
 80aedd4:	60fb      	str	r3, [r7, #12]
  printf("tof_activate: %d \r\n", activate);
 80aedd6:	79fb      	ldrb	r3, [r7, #7]
 80aedd8:	4619      	mov	r1, r3
 80aedda:	4809      	ldr	r0, [pc, #36]	; (80aee00 <tof_activate+0x38>)
 80aeddc:	f011 fdca 	bl	80c0974 <iprintf>
  if (activate) {
 80aede0:	79fb      	ldrb	r3, [r7, #7]
 80aede2:	2b00      	cmp	r3, #0
 80aede4:	d003      	beq.n	80aedee <tof_activate+0x26>
    res = tof_enable();
 80aede6:	f7ff fec3 	bl	80aeb70 <tof_enable>
 80aedea:	60f8      	str	r0, [r7, #12]
 80aedec:	e002      	b.n	80aedf4 <tof_activate+0x2c>
  } else {
    res = tof_disable();
 80aedee:	f7ff ff93 	bl	80aed18 <tof_disable>
 80aedf2:	60f8      	str	r0, [r7, #12]
  }
  return res;
 80aedf4:	68fb      	ldr	r3, [r7, #12]
}
 80aedf6:	4618      	mov	r0, r3
 80aedf8:	3710      	adds	r7, #16
 80aedfa:	46bd      	mov	sp, r7
 80aedfc:	bd80      	pop	{r7, pc}
 80aedfe:	bf00      	nop
 80aee00:	080c6edc 	.word	0x080c6edc

080aee04 <tof_publish_sensor_data>:

/* Main Example --------------------------------------------------------------*/
int tof_publish_sensor_data(void *para)
{
 80aee04:	b580      	push	{r7, lr}
 80aee06:	b096      	sub	sp, #88	; 0x58
 80aee08:	af00      	add	r7, sp, #0
 80aee0a:	6078      	str	r0, [r7, #4]
  /* Read samples in polling mode (no int) */
  sensors_event_t sensor_data = { 0 };
 80aee0c:	f107 0308 	add.w	r3, r7, #8
 80aee10:	2250      	movs	r2, #80	; 0x50
 80aee12:	2100      	movs	r1, #0
 80aee14:	4618      	mov	r0, r3
 80aee16:	f011 f8d1 	bl	80bffbc <memset>
  //printf("tof_publish_sensor_data: %d \r\n", tof_activated);
  if (tof_activated) {
 80aee1a:	4b16      	ldr	r3, [pc, #88]	; (80aee74 <tof_publish_sensor_data+0x70>)
 80aee1c:	781b      	ldrb	r3, [r3, #0]
 80aee1e:	2b00      	cmp	r3, #0
 80aee20:	d022      	beq.n	80aee68 <tof_publish_sensor_data+0x64>
    // core process
    tof_get_range_data(&dev);
 80aee22:	4815      	ldr	r0, [pc, #84]	; (80aee78 <tof_publish_sensor_data+0x74>)
 80aee24:	f7ff fe08 	bl	80aea38 <tof_get_range_data>
    //send related messages to SensorDataQ
    sensor_data.sensor_type = SENSOR_TYPE_PROXIMITY_BOT;
 80aee28:	2306      	movs	r3, #6
 80aee2a:	723b      	strb	r3, [r7, #8]
    sensor_data.accuracy = 3;
 80aee2c:	2303      	movs	r3, #3
 80aee2e:	727b      	strb	r3, [r7, #9]
    sensor_data.timestamp = sensor_get_timestamp();
 80aee30:	f7fe fc6a 	bl	80ad708 <sensor_get_timestamp>
 80aee34:	4602      	mov	r2, r0
 80aee36:	460b      	mov	r3, r1
 80aee38:	e9c7 2304 	strd	r2, r3, [r7, #16]
    sensor_data.sensor_data_t.vec.data[0] = tof_range_data;
 80aee3c:	4b0f      	ldr	r3, [pc, #60]	; (80aee7c <tof_publish_sensor_data+0x78>)
 80aee3e:	681b      	ldr	r3, [r3, #0]
 80aee40:	61bb      	str	r3, [r7, #24]
    sensor_data.sensor_data_t.vec.data[1] =
        (float)mtof_cali_data.max_cross_talk;
 80aee42:	4b0f      	ldr	r3, [pc, #60]	; (80aee80 <tof_publish_sensor_data+0x7c>)
 80aee44:	f8d3 3394 	ldr.w	r3, [r3, #916]	; 0x394
 80aee48:	ee07 3a90 	vmov	s15, r3
 80aee4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    sensor_data.sensor_data_t.vec.data[1] =
 80aee50:	edc7 7a07 	vstr	s15, [r7, #28]
    osMessageQueuePut(tof_init_parms->SensorDataQHandle, &sensor_data, 0, 0);
 80aee54:	4b0b      	ldr	r3, [pc, #44]	; (80aee84 <tof_publish_sensor_data+0x80>)
 80aee56:	681b      	ldr	r3, [r3, #0]
 80aee58:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 80aee5c:	f107 0108 	add.w	r1, r7, #8
 80aee60:	2300      	movs	r3, #0
 80aee62:	2200      	movs	r2, #0
 80aee64:	f007 face 	bl	80b6404 <osMessageQueuePut>
  }
  return 0;
 80aee68:	2300      	movs	r3, #0
}
 80aee6a:	4618      	mov	r0, r3
 80aee6c:	3758      	adds	r7, #88	; 0x58
 80aee6e:	46bd      	mov	sp, r7
 80aee70:	bd80      	pop	{r7, pc}
 80aee72:	bf00      	nop
 80aee74:	200084c9 	.word	0x200084c9
 80aee78:	200084cc 	.word	0x200084cc
 80aee7c:	200084b0 	.word	0x200084b0
 80aee80:	20008538 	.word	0x20008538
 80aee84:	200084c4 	.word	0x200084c4

080aee88 <tof_calibration>:

int tof_calibration()
{
 80aee88:	b580      	push	{r7, lr}
 80aee8a:	b082      	sub	sp, #8
 80aee8c:	af00      	add	r7, sp, #0
  int status = 0;
 80aee8e:	2300      	movs	r3, #0
 80aee90:	607b      	str	r3, [r7, #4]

  /* Platform specific data: running in SPI mode */
  dev.comms_type = VL53L5_SPI;
 80aee92:	4b49      	ldr	r3, [pc, #292]	; (80aefb8 <tof_calibration+0x130>)
 80aee94:	2201      	movs	r2, #1
 80aee96:	705a      	strb	r2, [r3, #1]

  /* set the fw buffer to be loaded into device RAM */
  printf("Setting up fw buffer.\r\n");
 80aee98:	4848      	ldr	r0, [pc, #288]	; (80aefbc <tof_calibration+0x134>)
 80aee9a:	f011 fe07 	bl	80c0aac <puts>
  VL53L5_ASSIGN_FW_BUFF(&dev, (uint8_t *) _fw_buffer, _fw_buff_count);
 80aee9e:	4b46      	ldr	r3, [pc, #280]	; (80aefb8 <tof_calibration+0x130>)
 80aeea0:	4a47      	ldr	r2, [pc, #284]	; (80aefc0 <tof_calibration+0x138>)
 80aeea2:	621a      	str	r2, [r3, #32]
 80aeea4:	4b47      	ldr	r3, [pc, #284]	; (80aefc4 <tof_calibration+0x13c>)
 80aeea6:	681b      	ldr	r3, [r3, #0]
 80aeea8:	4a43      	ldr	r2, [pc, #268]	; (80aefb8 <tof_calibration+0x130>)
 80aeeaa:	6253      	str	r3, [r2, #36]	; 0x24

  /* Setup the comms buffer */
  VL53L5_ASSIGN_COMMS_BUFF(&dev, _comms_buffer, sizeof(_comms_buffer));
 80aeeac:	4b42      	ldr	r3, [pc, #264]	; (80aefb8 <tof_calibration+0x130>)
 80aeeae:	4a46      	ldr	r2, [pc, #280]	; (80aefc8 <tof_calibration+0x140>)
 80aeeb0:	629a      	str	r2, [r3, #40]	; 0x28
 80aeeb2:	4b41      	ldr	r3, [pc, #260]	; (80aefb8 <tof_calibration+0x130>)
 80aeeb4:	f240 728a 	movw	r2, #1930	; 0x78a
 80aeeb8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialise platform and comms */
  printf("Initialising.\r\n");
 80aeeba:	4844      	ldr	r0, [pc, #272]	; (80aefcc <tof_calibration+0x144>)
 80aeebc:	f011 fdf6 	bl	80c0aac <puts>
  status = vl53l5_platform_init(&dev);
 80aeec0:	483d      	ldr	r0, [pc, #244]	; (80aefb8 <tof_calibration+0x130>)
 80aeec2:	f00f fed1 	bl	80bec68 <vl53l5_platform_init>
 80aeec6:	6078      	str	r0, [r7, #4]
  if (status < STATUS_OK) {
 80aeec8:	687b      	ldr	r3, [r7, #4]
 80aeeca:	2b00      	cmp	r3, #0
 80aeecc:	da04      	bge.n	80aeed8 <tof_calibration+0x50>
    printf("Platform init failed: %d\r\n", (int)status);
 80aeece:	6879      	ldr	r1, [r7, #4]
 80aeed0:	483f      	ldr	r0, [pc, #252]	; (80aefd0 <tof_calibration+0x148>)
 80aeed2:	f011 fd4f 	bl	80c0974 <iprintf>
    goto exit;
 80aeed6:	e04a      	b.n	80aef6e <tof_calibration+0xe6>
  }

  /* Initialise device */
  status = vl53l5_init(&dev);
 80aeed8:	4837      	ldr	r0, [pc, #220]	; (80aefb8 <tof_calibration+0x130>)
 80aeeda:	f00c fa89 	bl	80bb3f0 <vl53l5_init>
 80aeede:	6078      	str	r0, [r7, #4]
  if (status < STATUS_OK) {
 80aeee0:	687b      	ldr	r3, [r7, #4]
 80aeee2:	2b00      	cmp	r3, #0
 80aeee4:	da04      	bge.n	80aeef0 <tof_calibration+0x68>
    printf("Init failed: %d\r\n", (int)status);
 80aeee6:	6879      	ldr	r1, [r7, #4]
 80aeee8:	483a      	ldr	r0, [pc, #232]	; (80aefd4 <tof_calibration+0x14c>)
 80aeeea:	f011 fd43 	bl	80c0974 <iprintf>
    goto exit;
 80aeeee:	e03e      	b.n	80aef6e <tof_calibration+0xe6>
  }

  /*reset device to clear memory */
  status = vl53l5_set_power_mode(&dev, VL53L5_POWER_STATE_ULP_IDLE);
 80aeef0:	2101      	movs	r1, #1
 80aeef2:	4831      	ldr	r0, [pc, #196]	; (80aefb8 <tof_calibration+0x130>)
 80aeef4:	f00c fc9c 	bl	80bb830 <vl53l5_set_power_mode>
 80aeef8:	6078      	str	r0, [r7, #4]
  if (status < STATUS_OK) {
 80aeefa:	687b      	ldr	r3, [r7, #4]
 80aeefc:	2b00      	cmp	r3, #0
 80aeefe:	da04      	bge.n	80aef0a <tof_calibration+0x82>
    printf("set_power_mode() failed: %d\r\n", (int)status);
 80aef00:	6879      	ldr	r1, [r7, #4]
 80aef02:	4835      	ldr	r0, [pc, #212]	; (80aefd8 <tof_calibration+0x150>)
 80aef04:	f011 fd36 	bl	80c0974 <iprintf>
    goto exit;
 80aef08:	e031      	b.n	80aef6e <tof_calibration+0xe6>
  }

  status = vl53l5_set_power_mode(&dev, VL53L5_POWER_STATE_HP_IDLE);
 80aef0a:	2104      	movs	r1, #4
 80aef0c:	482a      	ldr	r0, [pc, #168]	; (80aefb8 <tof_calibration+0x130>)
 80aef0e:	f00c fc8f 	bl	80bb830 <vl53l5_set_power_mode>
 80aef12:	6078      	str	r0, [r7, #4]
  if (status < STATUS_OK) {
 80aef14:	687b      	ldr	r3, [r7, #4]
 80aef16:	2b00      	cmp	r3, #0
 80aef18:	da04      	bge.n	80aef24 <tof_calibration+0x9c>
    printf("set_power_mode() failed: %d\r\n", (int)status);
 80aef1a:	6879      	ldr	r1, [r7, #4]
 80aef1c:	482e      	ldr	r0, [pc, #184]	; (80aefd8 <tof_calibration+0x150>)
 80aef1e:	f011 fd29 	bl	80c0974 <iprintf>
    goto exit;
 80aef22:	e024      	b.n	80aef6e <tof_calibration+0xe6>
  }

  status = send_device_xtalk_characterisation_config(&dev);
 80aef24:	4824      	ldr	r0, [pc, #144]	; (80aefb8 <tof_calibration+0x130>)
 80aef26:	f7ff fa1f 	bl	80ae368 <send_device_xtalk_characterisation_config>
 80aef2a:	6078      	str	r0, [r7, #4]
  if (status < STATUS_OK) {
 80aef2c:	687b      	ldr	r3, [r7, #4]
 80aef2e:	2b00      	cmp	r3, #0
 80aef30:	da04      	bge.n	80aef3c <tof_calibration+0xb4>
    printf("setting config failed: %d\r\n", (int)status);
 80aef32:	6879      	ldr	r1, [r7, #4]
 80aef34:	4829      	ldr	r0, [pc, #164]	; (80aefdc <tof_calibration+0x154>)
 80aef36:	f011 fd1d 	bl	80c0974 <iprintf>
    goto exit;
 80aef3a:	e018      	b.n	80aef6e <tof_calibration+0xe6>
  }

  status = calibrating_loop(&dev);
 80aef3c:	481e      	ldr	r0, [pc, #120]	; (80aefb8 <tof_calibration+0x130>)
 80aef3e:	f7ff fa3f 	bl	80ae3c0 <calibrating_loop>
 80aef42:	6078      	str	r0, [r7, #4]
  if (status < STATUS_OK) {
 80aef44:	687b      	ldr	r3, [r7, #4]
 80aef46:	2b00      	cmp	r3, #0
 80aef48:	da04      	bge.n	80aef54 <tof_calibration+0xcc>
    printf("ranging loop failed: %d\r\n", (int)status);
 80aef4a:	6879      	ldr	r1, [r7, #4]
 80aef4c:	4824      	ldr	r0, [pc, #144]	; (80aefe0 <tof_calibration+0x158>)
 80aef4e:	f011 fd11 	bl	80c0974 <iprintf>
    goto exit;
 80aef52:	e00c      	b.n	80aef6e <tof_calibration+0xe6>
  }

  status = save_cal_data(&dev);
 80aef54:	4818      	ldr	r0, [pc, #96]	; (80aefb8 <tof_calibration+0x130>)
 80aef56:	f7ff fa8d 	bl	80ae474 <save_cal_data>
 80aef5a:	6078      	str	r0, [r7, #4]
  if (status < STATUS_OK) {
 80aef5c:	687b      	ldr	r3, [r7, #4]
 80aef5e:	2b00      	cmp	r3, #0
 80aef60:	da04      	bge.n	80aef6c <tof_calibration+0xe4>
    printf("saving cal data failed: %d\r\n", (int)status);
 80aef62:	6879      	ldr	r1, [r7, #4]
 80aef64:	481f      	ldr	r0, [pc, #124]	; (80aefe4 <tof_calibration+0x15c>)
 80aef66:	f011 fd05 	bl	80c0974 <iprintf>
    goto exit;
 80aef6a:	e000      	b.n	80aef6e <tof_calibration+0xe6>
  }

exit:
 80aef6c:	bf00      	nop
   * If an error has occurred, run the error handler. In certain cases,
   * this error handler will return a more detailed error code due to
   * the failure occurring within device firmware. Otherwise, the original
   * status will be returned.
   */
  if (status < STATUS_OK) {
 80aef6e:	687b      	ldr	r3, [r7, #4]
 80aef70:	2b00      	cmp	r3, #0
 80aef72:	da04      	bge.n	80aef7e <tof_calibration+0xf6>
    status = vl53l5_read_device_error(&dev, status);
 80aef74:	6879      	ldr	r1, [r7, #4]
 80aef76:	4810      	ldr	r0, [pc, #64]	; (80aefb8 <tof_calibration+0x130>)
 80aef78:	f00c fba1 	bl	80bb6be <vl53l5_read_device_error>
 80aef7c:	6078      	str	r0, [r7, #4]
  }
  /* end session */
  printf("Example complete with status %d... terminating.\r\n", (int)status);
 80aef7e:	6879      	ldr	r1, [r7, #4]
 80aef80:	4819      	ldr	r0, [pc, #100]	; (80aefe8 <tof_calibration+0x160>)
 80aef82:	f011 fcf7 	bl	80c0974 <iprintf>

  vl53l5_term(&dev);
 80aef86:	480c      	ldr	r0, [pc, #48]	; (80aefb8 <tof_calibration+0x130>)
 80aef88:	f00c fa9e 	bl	80bb4c8 <vl53l5_term>
  if (status < STATUS_OK) {
 80aef8c:	687b      	ldr	r3, [r7, #4]
 80aef8e:	2b00      	cmp	r3, #0
 80aef90:	da03      	bge.n	80aef9a <tof_calibration+0x112>
    printf("saving cal data failed: %d\r\n", (int)status);
 80aef92:	6879      	ldr	r1, [r7, #4]
 80aef94:	4813      	ldr	r0, [pc, #76]	; (80aefe4 <tof_calibration+0x15c>)
 80aef96:	f011 fced 	bl	80c0974 <iprintf>
  }
  vl53l5_platform_terminate(&dev);
 80aef9a:	4807      	ldr	r0, [pc, #28]	; (80aefb8 <tof_calibration+0x130>)
 80aef9c:	f00f fece 	bl	80bed3c <vl53l5_platform_terminate>
  if (status < STATUS_OK) {
 80aefa0:	687b      	ldr	r3, [r7, #4]
 80aefa2:	2b00      	cmp	r3, #0
 80aefa4:	da03      	bge.n	80aefae <tof_calibration+0x126>
    printf("saving cal data failed: %d\r\n", (int)status);
 80aefa6:	6879      	ldr	r1, [r7, #4]
 80aefa8:	480e      	ldr	r0, [pc, #56]	; (80aefe4 <tof_calibration+0x15c>)
 80aefaa:	f011 fce3 	bl	80c0974 <iprintf>
  }
  return status;
 80aefae:	687b      	ldr	r3, [r7, #4]
}
 80aefb0:	4618      	mov	r0, r3
 80aefb2:	3708      	adds	r7, #8
 80aefb4:	46bd      	mov	sp, r7
 80aefb6:	bd80      	pop	{r7, pc}
 80aefb8:	200084cc 	.word	0x200084cc
 80aefbc:	080c6cb8 	.word	0x080c6cb8
 80aefc0:	080c7a70 	.word	0x080c7a70
 80aefc4:	20007c58 	.word	0x20007c58
 80aefc8:	200088d0 	.word	0x200088d0
 80aefcc:	080c6cd0 	.word	0x080c6cd0
 80aefd0:	080c6ce0 	.word	0x080c6ce0
 80aefd4:	080c6d40 	.word	0x080c6d40
 80aefd8:	080c6ef0 	.word	0x080c6ef0
 80aefdc:	080c6d7c 	.word	0x080c6d7c
 80aefe0:	080c6c50 	.word	0x080c6c50
 80aefe4:	080c6f10 	.word	0x080c6f10
 80aefe8:	080c6f30 	.word	0x080c6f30

080aefec <tof_init_complete>:

int tof_init_complete(void *para)
{
 80aefec:	b480      	push	{r7}
 80aefee:	b083      	sub	sp, #12
 80aeff0:	af00      	add	r7, sp, #0
 80aeff2:	6078      	str	r0, [r7, #4]
  //send init complete event to smgr?
  return SENSOR_SUCCESS;
 80aeff4:	2300      	movs	r3, #0
}
 80aeff6:	4618      	mov	r0, r3
 80aeff8:	370c      	adds	r7, #12
 80aeffa:	46bd      	mov	sp, r7
 80aeffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80af000:	4770      	bx	lr
	...

080af004 <tof_config>:

int tof_config(uint8_t config_type, void *para)
{
 80af004:	b580      	push	{r7, lr}
 80af006:	b098      	sub	sp, #96	; 0x60
 80af008:	af00      	add	r7, sp, #0
 80af00a:	4603      	mov	r3, r0
 80af00c:	6039      	str	r1, [r7, #0]
 80af00e:	71fb      	strb	r3, [r7, #7]
  //send init complete event to smgr?
  int res = SENSOR_SUCCESS;
 80af010:	2300      	movs	r3, #0
 80af012:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint8_t id_0 = 0, id_1 = 0;
 80af014:	2300      	movs	r3, #0
 80af016:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 80af01a:	2300      	movs	r3, #0
 80af01c:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
  sensors_event_t sensor_data = { 0 };
 80af020:	f107 0308 	add.w	r3, r7, #8
 80af024:	2250      	movs	r2, #80	; 0x50
 80af026:	2100      	movs	r1, #0
 80af028:	4618      	mov	r0, r3
 80af02a:	f010 ffc7 	bl	80bffbc <memset>

  switch (config_type) {
 80af02e:	79fb      	ldrb	r3, [r7, #7]
 80af030:	3b02      	subs	r3, #2
 80af032:	2b06      	cmp	r3, #6
 80af034:	f200 80ab 	bhi.w	80af18e <tof_config+0x18a>
 80af038:	a201      	add	r2, pc, #4	; (adr r2, 80af040 <tof_config+0x3c>)
 80af03a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80af03e:	bf00      	nop
 80af040:	080af05d 	.word	0x080af05d
 80af044:	080af0a7 	.word	0x080af0a7
 80af048:	080af0ff 	.word	0x080af0ff
 80af04c:	080af18f 	.word	0x080af18f
 80af050:	080af18f 	.word	0x080af18f
 80af054:	080af18f 	.word	0x080af18f
 80af058:	080af129 	.word	0x080af129
  case SENSOR_CONFIG_SELFTEST:
    printf("VL53L5 selftest message \r\n");
 80af05c:	4851      	ldr	r0, [pc, #324]	; (80af1a4 <tof_config+0x1a0>)
 80af05e:	f011 fd25 	bl	80c0aac <puts>
    tof_platform_read(dev.spi_handle, (uint16_t) TOF_DEVICE_ID, &id_0, 1);
 80af062:	4b51      	ldr	r3, [pc, #324]	; (80af1a8 <tof_config+0x1a4>)
 80af064:	68d8      	ldr	r0, [r3, #12]
 80af066:	f107 025b 	add.w	r2, r7, #91	; 0x5b
 80af06a:	2301      	movs	r3, #1
 80af06c:	2100      	movs	r1, #0
 80af06e:	f7ff fcbd 	bl	80ae9ec <tof_platform_read>

    tof_platform_read(dev.spi_handle, (uint16_t) TOF_REVISION_ID, &id_1, 1);
 80af072:	4b4d      	ldr	r3, [pc, #308]	; (80af1a8 <tof_config+0x1a4>)
 80af074:	68d8      	ldr	r0, [r3, #12]
 80af076:	f107 025a 	add.w	r2, r7, #90	; 0x5a
 80af07a:	2301      	movs	r3, #1
 80af07c:	2101      	movs	r1, #1
 80af07e:	f7ff fcb5 	bl	80ae9ec <tof_platform_read>

    //printf("TOF whoamI: 0x%x 0x%x %p\r\n", id_0, id_1,
    //        tof_dev_ctx.handle);

    if (id_0 != TOF_DEVICE_ID_VALUE || id_1 != TOF_REVISION_ID_VALUE) {
 80af082:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80af086:	2bf0      	cmp	r3, #240	; 0xf0
 80af088:	d103      	bne.n	80af092 <tof_config+0x8e>
 80af08a:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 80af08e:	2b02      	cmp	r3, #2
 80af090:	d005      	beq.n	80af09e <tof_config+0x9a>
      printf("selftest failed for VL53L5!\r\n");
 80af092:	4846      	ldr	r0, [pc, #280]	; (80af1ac <tof_config+0x1a8>)
 80af094:	f011 fd0a 	bl	80c0aac <puts>
      res = SENSOR_FAILED;
 80af098:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80af09c:	65fb      	str	r3, [r7, #92]	; 0x5c
    }
    printf("selftest success for VL53L5!\r\n");
 80af09e:	4844      	ldr	r0, [pc, #272]	; (80af1b0 <tof_config+0x1ac>)
 80af0a0:	f011 fd04 	bl	80c0aac <puts>
    break;
 80af0a4:	e078      	b.n	80af198 <tof_config+0x194>
  case SENSOR_CONFIG_CALIBRATION:
    res = tof_calibration();
 80af0a6:	f7ff feef 	bl	80aee88 <tof_calibration>
 80af0aa:	65f8      	str	r0, [r7, #92]	; 0x5c
    if (res == 0) {
 80af0ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80af0ae:	2b00      	cmp	r3, #0
 80af0b0:	d16f      	bne.n	80af192 <tof_config+0x18e>
      memcpy(&tof_init_parms->board_calidata->tof_cali_t, &mtof_cali_data,
 80af0b2:	4b40      	ldr	r3, [pc, #256]	; (80af1b4 <tof_config+0x1b0>)
 80af0b4:	681b      	ldr	r3, [r3, #0]
 80af0b6:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80af0ba:	3328      	adds	r3, #40	; 0x28
 80af0bc:	f44f 7266 	mov.w	r2, #920	; 0x398
 80af0c0:	493d      	ldr	r1, [pc, #244]	; (80af1b8 <tof_config+0x1b4>)
 80af0c2:	4618      	mov	r0, r3
 80af0c4:	f010 ff6c 	bl	80bffa0 <memcpy>
             sizeof(tof_cali_data));
      if (tof_init_parms->board_calidata->tof_cali_ver != DEFAULT_VERSION)
 80af0c8:	4b3a      	ldr	r3, [pc, #232]	; (80af1b4 <tof_config+0x1b0>)
 80af0ca:	681b      	ldr	r3, [r3, #0]
 80af0cc:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80af0d0:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 80af0d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80af0d8:	d009      	beq.n	80af0ee <tof_config+0xea>
        tof_init_parms->board_calidata->tof_cali_ver++;
 80af0da:	4b36      	ldr	r3, [pc, #216]	; (80af1b4 <tof_config+0x1b0>)
 80af0dc:	681b      	ldr	r3, [r3, #0]
 80af0de:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80af0e2:	f8d3 23c0 	ldr.w	r2, [r3, #960]	; 0x3c0
 80af0e6:	3201      	adds	r2, #1
 80af0e8:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
      else
        tof_init_parms->board_calidata->tof_cali_ver = 1;
    }
    break;
 80af0ec:	e051      	b.n	80af192 <tof_config+0x18e>
        tof_init_parms->board_calidata->tof_cali_ver = 1;
 80af0ee:	4b31      	ldr	r3, [pc, #196]	; (80af1b4 <tof_config+0x1b0>)
 80af0f0:	681b      	ldr	r3, [r3, #0]
 80af0f2:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80af0f6:	2201      	movs	r2, #1
 80af0f8:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
    break;
 80af0fc:	e049      	b.n	80af192 <tof_config+0x18e>
  case SENSOR_CONFIG_BIAS:
    //store calibrate sensor data to driver when boot up
    if (tof_init_parms->board_calidata->tof_cali_ver != DEFAULT_VERSION) {
 80af0fe:	4b2d      	ldr	r3, [pc, #180]	; (80af1b4 <tof_config+0x1b0>)
 80af100:	681b      	ldr	r3, [r3, #0]
 80af102:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80af106:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 80af10a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80af10e:	d042      	beq.n	80af196 <tof_config+0x192>
      memcpy(&mtof_cali_data, &tof_init_parms->board_calidata->tof_cali_t,
 80af110:	4b28      	ldr	r3, [pc, #160]	; (80af1b4 <tof_config+0x1b0>)
 80af112:	681b      	ldr	r3, [r3, #0]
 80af114:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80af118:	3328      	adds	r3, #40	; 0x28
 80af11a:	f44f 7266 	mov.w	r2, #920	; 0x398
 80af11e:	4619      	mov	r1, r3
 80af120:	4825      	ldr	r0, [pc, #148]	; (80af1b8 <tof_config+0x1b4>)
 80af122:	f010 ff3d 	bl	80bffa0 <memcpy>
             sizeof(tof_cali_data));
    }
    break;
 80af126:	e036      	b.n	80af196 <tof_config+0x192>
  case SENSOR_CALIBRATION_RESULT:
    sensor_data.sensor_type = SENSOR_TYPE_PROXIMITY_BOT;
 80af128:	2306      	movs	r3, #6
 80af12a:	723b      	strb	r3, [r7, #8]
    sensor_data.accuracy = 0xFF;
 80af12c:	23ff      	movs	r3, #255	; 0xff
 80af12e:	727b      	strb	r3, [r7, #9]
    sensor_data.timestamp = sensor_get_timestamp();
 80af130:	f7fe faea 	bl	80ad708 <sensor_get_timestamp>
 80af134:	4602      	mov	r2, r0
 80af136:	460b      	mov	r3, r1
 80af138:	e9c7 2304 	strd	r2, r3, [r7, #16]
    sensor_data.sensor_data_t.vec.data[0] =
        (float)tof_init_parms->board_calidata->tof_cali_t.max_cross_talk;
 80af13c:	4b1d      	ldr	r3, [pc, #116]	; (80af1b4 <tof_config+0x1b0>)
 80af13e:	681b      	ldr	r3, [r3, #0]
 80af140:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80af144:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80af148:	ee07 3a90 	vmov	s15, r3
 80af14c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    sensor_data.sensor_data_t.vec.data[0] =
 80af150:	edc7 7a06 	vstr	s15, [r7, #24]
    sensor_data.sensor_data_t.vec.data[1] =
        (float)tof_init_parms->board_calidata->tof_cali_ver;
 80af154:	4b17      	ldr	r3, [pc, #92]	; (80af1b4 <tof_config+0x1b0>)
 80af156:	681b      	ldr	r3, [r3, #0]
 80af158:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80af15c:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 80af160:	ee07 3a90 	vmov	s15, r3
 80af164:	eef8 7a67 	vcvt.f32.u32	s15, s15
    sensor_data.sensor_data_t.vec.data[1] =
 80af168:	edc7 7a07 	vstr	s15, [r7, #28]
    sensor_data.sensor_data_t.vec.data[2] = 0;
 80af16c:	f04f 0300 	mov.w	r3, #0
 80af170:	623b      	str	r3, [r7, #32]
    sensor_data.sensor_data_t.vec.data[3] = 0;
 80af172:	f04f 0300 	mov.w	r3, #0
 80af176:	627b      	str	r3, [r7, #36]	; 0x24
    osMessageQueuePut(tof_init_parms->SensorDataQHandle, &sensor_data, 0, 0);
 80af178:	4b0e      	ldr	r3, [pc, #56]	; (80af1b4 <tof_config+0x1b0>)
 80af17a:	681b      	ldr	r3, [r3, #0]
 80af17c:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 80af180:	f107 0108 	add.w	r1, r7, #8
 80af184:	2300      	movs	r3, #0
 80af186:	2200      	movs	r2, #0
 80af188:	f007 f93c 	bl	80b6404 <osMessageQueuePut>
    break;
 80af18c:	e004      	b.n	80af198 <tof_config+0x194>
  default:
    break;
 80af18e:	bf00      	nop
 80af190:	e002      	b.n	80af198 <tof_config+0x194>
    break;
 80af192:	bf00      	nop
 80af194:	e000      	b.n	80af198 <tof_config+0x194>
    break;
 80af196:	bf00      	nop
  }
  return res;
 80af198:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 80af19a:	4618      	mov	r0, r3
 80af19c:	3760      	adds	r7, #96	; 0x60
 80af19e:	46bd      	mov	sp, r7
 80af1a0:	bd80      	pop	{r7, pc}
 80af1a2:	bf00      	nop
 80af1a4:	080c6f64 	.word	0x080c6f64
 80af1a8:	200084cc 	.word	0x200084cc
 80af1ac:	080c6f80 	.word	0x080c6f80
 80af1b0:	080c6fa0 	.word	0x080c6fa0
 80af1b4:	200084c4 	.word	0x200084c4
 80af1b8:	20008538 	.word	0x20008538

080af1bc <tof_publish_config_resp>:

int tof_publish_config_resp(void *para)
{
 80af1bc:	b480      	push	{r7}
 80af1be:	b083      	sub	sp, #12
 80af1c0:	af00      	add	r7, sp, #0
 80af1c2:	6078      	str	r0, [r7, #4]
  //send init complete event to smgr?
  return SENSOR_SUCCESS;
 80af1c4:	2300      	movs	r3, #0
}
 80af1c6:	4618      	mov	r0, r3
 80af1c8:	370c      	adds	r7, #12
 80af1ca:	46bd      	mov	sp, r7
 80af1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80af1d0:	4770      	bx	lr
	...

080af1d4 <send_device_config>:

int32_t send_device_config(struct vl53l5_dev_handle_t * pdev)
{
 80af1d4:	b580      	push	{r7, lr}
 80af1d6:	f5ad 6dea 	sub.w	sp, sp, #1872	; 0x750
 80af1da:	af00      	add	r7, sp, #0
 80af1dc:	1d3b      	adds	r3, r7, #4
 80af1de:	6018      	str	r0, [r3, #0]
  int32_t status = STATUS_OK;
 80af1e0:	2300      	movs	r3, #0
 80af1e2:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
  uint8_t params_buff[] = VL53L5_CFG__BACK_TO_BACK__4X4__15HZ_DATA;
 80af1e6:	f107 0308 	add.w	r3, r7, #8
 80af1ea:	4a0e      	ldr	r2, [pc, #56]	; (80af224 <send_device_config+0x50>)
 80af1ec:	4618      	mov	r0, r3
 80af1ee:	4611      	mov	r1, r2
 80af1f0:	f240 7344 	movw	r3, #1860	; 0x744
 80af1f4:	461a      	mov	r2, r3
 80af1f6:	f010 fed3 	bl	80bffa0 <memcpy>

  printf("Setting config for 4x4 @ 15Hz...\r\n");
 80af1fa:	480b      	ldr	r0, [pc, #44]	; (80af228 <send_device_config+0x54>)
 80af1fc:	f011 fc56 	bl	80c0aac <puts>

  status = vl53l5_set_device_parameters(pdev, params_buff, sizeof(params_buff));
 80af200:	f107 0108 	add.w	r1, r7, #8
 80af204:	1d3b      	adds	r3, r7, #4
 80af206:	f240 7244 	movw	r2, #1860	; 0x744
 80af20a:	6818      	ldr	r0, [r3, #0]
 80af20c:	f00c fab6 	bl	80bb77c <vl53l5_set_device_parameters>
 80af210:	f8c7 074c 	str.w	r0, [r7, #1868]	; 0x74c

  return status;
 80af214:	f8d7 374c 	ldr.w	r3, [r7, #1868]	; 0x74c
}
 80af218:	4618      	mov	r0, r3
 80af21a:	f507 67ea 	add.w	r7, r7, #1872	; 0x750
 80af21e:	46bd      	mov	sp, r7
 80af220:	bd80      	pop	{r7, pc}
 80af222:	bf00      	nop
 80af224:	080c6fe4 	.word	0x080c6fe4
 80af228:	080c6fc0 	.word	0x080c6fc0

080af22c <ranging_loop>:

int32_t ranging_loop(struct vl53l5_dev_handle_t * pdev)
{
 80af22c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80af230:	f6ad 0d04 	subw	sp, sp, #2052	; 0x804
 80af234:	af00      	add	r7, sp, #0
 80af236:	1d3b      	adds	r3, r7, #4
 80af238:	6018      	str	r0, [r3, #0]
  int32_t status = STATUS_OK;
 80af23a:	2300      	movs	r3, #0
 80af23c:	f8c7 37dc 	str.w	r3, [r7, #2012]	; 0x7dc
  struct vl53l5_range_data_t range = { 0 };
 80af240:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80af244:	4618      	mov	r0, r3
 80af246:	f44f 63da 	mov.w	r3, #1744	; 0x6d0
 80af24a:	461a      	mov	r2, r3
 80af24c:	2100      	movs	r1, #0
 80af24e:	f010 feb5 	bl	80bffbc <memset>
  range_sum = 0;
 80af252:	4bc3      	ldr	r3, [pc, #780]	; (80af560 <ranging_loop+0x334>)
 80af254:	2200      	movs	r2, #0
 80af256:	601a      	str	r2, [r3, #0]
  int valid_range_num = 0;
 80af258:	2300      	movs	r3, #0
 80af25a:	f8c7 37fc 	str.w	r3, [r7, #2044]	; 0x7fc
  int64_t valid_range_peak_rate_sum = 0;
 80af25e:	f04f 0200 	mov.w	r2, #0
 80af262:	f04f 0300 	mov.w	r3, #0
 80af266:	f507 61fe 	add.w	r1, r7, #2032	; 0x7f0
 80af26a:	e9c1 2300 	strd	r2, r3, [r1]
  int64_t valid_range[16] = {0};
 80af26e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80af272:	4618      	mov	r0, r3
 80af274:	2380      	movs	r3, #128	; 0x80
 80af276:	461a      	mov	r2, r3
 80af278:	2100      	movs	r1, #0
 80af27a:	f010 fe9f 	bl	80bffbc <memset>
  int64_t valid_range_peak_rate[16] = {0};
 80af27e:	f107 0308 	add.w	r3, r7, #8
 80af282:	4618      	mov	r0, r3
 80af284:	2380      	movs	r3, #128	; 0x80
 80af286:	461a      	mov	r2, r3
 80af288:	2100      	movs	r1, #0
 80af28a:	f010 fe97 	bl	80bffbc <memset>
  do {
    /* now check to see if range data is available *///swl check < ok
    status = vl53l5_check_data_ready(pdev);
 80af28e:	1d3b      	adds	r3, r7, #4
 80af290:	6818      	ldr	r0, [r3, #0]
 80af292:	f00c fcf6 	bl	80bbc82 <vl53l5_check_data_ready>
 80af296:	f8c7 07dc 	str.w	r0, [r7, #2012]	; 0x7dc
    if (status == VL53L5_NO_NEW_RANGE_DATA_ERROR) {
 80af29a:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	; 0x7dc
 80af29e:	f113 0f59 	cmn.w	r3, #89	; 0x59
 80af2a2:	d105      	bne.n	80af2b0 <ranging_loop+0x84>
      //printf("waiting for new range data...\r\n");
      vl53l5_wait_ms(pdev, 25); //may be not proper
 80af2a4:	1d3b      	adds	r3, r7, #4
 80af2a6:	2119      	movs	r1, #25
 80af2a8:	6818      	ldr	r0, [r3, #0]
 80af2aa:	f00f fc5d 	bl	80beb68 <vl53l5_wait_ms>
    status = vl53l5_check_data_ready(pdev);
 80af2ae:	e7ee      	b.n	80af28e <ranging_loop+0x62>
    } else
      break;
 80af2b0:	bf00      	nop
  } while (1);

  /* when new data is ready, get the range data from the device */
  status = vl53l5_get_range_data(pdev);
 80af2b2:	1d3b      	adds	r3, r7, #4
 80af2b4:	6818      	ldr	r0, [r3, #0]
 80af2b6:	f00c fd36 	bl	80bbd26 <vl53l5_get_range_data>
 80af2ba:	f8c7 07dc 	str.w	r0, [r7, #2012]	; 0x7dc
  if (status < STATUS_OK) {
 80af2be:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	; 0x7dc
 80af2c2:	2b00      	cmp	r3, #0
 80af2c4:	da04      	bge.n	80af2d0 <ranging_loop+0xa4>
    printf("get_range_data() error: status %d\r\n", (int)status);
 80af2c6:	f8d7 17dc 	ldr.w	r1, [r7, #2012]	; 0x7dc
 80af2ca:	48a6      	ldr	r0, [pc, #664]	; (80af564 <ranging_loop+0x338>)
 80af2cc:	f011 fb52 	bl	80c0974 <iprintf>
  }

  /* Decode range data in comms buffer (OPTIONAL) */
  status = vl53l5_decode_range_data(pdev, &range);
 80af2d0:	f507 7284 	add.w	r2, r7, #264	; 0x108
 80af2d4:	1d3b      	adds	r3, r7, #4
 80af2d6:	4611      	mov	r1, r2
 80af2d8:	6818      	ldr	r0, [r3, #0]
 80af2da:	f00c fc94 	bl	80bbc06 <vl53l5_decode_range_data>
 80af2de:	f8c7 07dc 	str.w	r0, [r7, #2012]	; 0x7dc
  if (status < STATUS_OK) {
 80af2e2:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	; 0x7dc
 80af2e6:	2b00      	cmp	r3, #0
 80af2e8:	da05      	bge.n	80af2f6 <ranging_loop+0xca>
    printf("decode_range_data() failed %d\r\n", (int)status);
 80af2ea:	f8d7 17dc 	ldr.w	r1, [r7, #2012]	; 0x7dc
 80af2ee:	489e      	ldr	r0, [pc, #632]	; (80af568 <ranging_loop+0x33c>)
 80af2f0:	f011 fb40 	bl	80c0974 <iprintf>
 80af2f4:	e077      	b.n	80af3e6 <ranging_loop+0x1ba>
        }
*/
    //printf("per target data - 1st target: \r\n");
    //printf("status  median   peak_rate     \r\n");

    for (int i = 0; i < 4; i++) {       // Warning : Print for 4x4 ranging - this line controls the rows
 80af2f6:	2300      	movs	r3, #0
 80af2f8:	f8c7 37ec 	str.w	r3, [r7, #2028]	; 0x7ec
 80af2fc:	e06f      	b.n	80af3de <ranging_loop+0x1b2>
      for (int j = 0; j < 8; j = j + 2) {       //this line controls the columns
 80af2fe:	2300      	movs	r3, #0
 80af300:	f8c7 37e8 	str.w	r3, [r7, #2024]	; 0x7e8
 80af304:	e062      	b.n	80af3cc <ranging_loop+0x1a0>
        uint32_t idx = (j + i * 8);     //This line gets every second value - 2 targets - byte 0, 2, 4,...30
 80af306:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	; 0x7ec
 80af30a:	00da      	lsls	r2, r3, #3
 80af30c:	f8d7 37e8 	ldr.w	r3, [r7, #2024]	; 0x7e8
 80af310:	4413      	add	r3, r2
 80af312:	f8c7 37d8 	str.w	r3, [r7, #2008]	; 0x7d8
        //Z0T0, Z1T0, Z2T0, Z3T0
        //Z4T0, Z5T0, Z6T0, Z7T0
        //Z8T0, Z9T0, Z10T0, Z11T0
        //Z12T0, Z13T0, Z14T0, Z15T0
        if ((int)range.core.per_tgt_results.target_status[idx] == 5 || (int)range.core.per_tgt_results.target_status[idx] == 9) {
 80af316:	f507 7284 	add.w	r2, r7, #264	; 0x108
 80af31a:	f8d7 37d8 	ldr.w	r3, [r7, #2008]	; 0x7d8
 80af31e:	4413      	add	r3, r2
 80af320:	f503 63c5 	add.w	r3, r3, #1576	; 0x628
 80af324:	781b      	ldrb	r3, [r3, #0]
 80af326:	2b05      	cmp	r3, #5
 80af328:	d009      	beq.n	80af33e <ranging_loop+0x112>
 80af32a:	f507 7284 	add.w	r2, r7, #264	; 0x108
 80af32e:	f8d7 37d8 	ldr.w	r3, [r7, #2008]	; 0x7d8
 80af332:	4413      	add	r3, r2
 80af334:	f503 63c5 	add.w	r3, r3, #1576	; 0x628
 80af338:	781b      	ldrb	r3, [r3, #0]
 80af33a:	2b09      	cmp	r3, #9
 80af33c:	d141      	bne.n	80af3c2 <ranging_loop+0x196>
          if (range.core.per_tgt_results.median_range_mm[idx] / 4 > 0) {
 80af33e:	f507 7284 	add.w	r2, r7, #264	; 0x108
 80af342:	f8d7 37d8 	ldr.w	r3, [r7, #2008]	; 0x7d8
 80af346:	f503 7324 	add.w	r3, r3, #656	; 0x290
 80af34a:	005b      	lsls	r3, r3, #1
 80af34c:	4413      	add	r3, r2
 80af34e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80af352:	2b03      	cmp	r3, #3
 80af354:	dd35      	ble.n	80af3c2 <ranging_loop+0x196>
            valid_range[valid_range_num] = range.core.per_tgt_results.median_range_mm[idx] / 4;
 80af356:	f507 7284 	add.w	r2, r7, #264	; 0x108
 80af35a:	f8d7 37d8 	ldr.w	r3, [r7, #2008]	; 0x7d8
 80af35e:	f503 7324 	add.w	r3, r3, #656	; 0x290
 80af362:	005b      	lsls	r3, r3, #1
 80af364:	4413      	add	r3, r2
 80af366:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80af36a:	2b00      	cmp	r3, #0
 80af36c:	da00      	bge.n	80af370 <ranging_loop+0x144>
 80af36e:	3303      	adds	r3, #3
 80af370:	109b      	asrs	r3, r3, #2
 80af372:	b21b      	sxth	r3, r3
 80af374:	b21a      	sxth	r2, r3
 80af376:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80af37a:	f107 0088 	add.w	r0, r7, #136	; 0x88
 80af37e:	f8d7 17fc 	ldr.w	r1, [r7, #2044]	; 0x7fc
 80af382:	00c9      	lsls	r1, r1, #3
 80af384:	4401      	add	r1, r0
 80af386:	e9c1 2300 	strd	r2, r3, [r1]
            valid_range_peak_rate[valid_range_num] = (int)range.core.per_tgt_results.peak_rate_kcps_per_spad[idx] / 2048;
 80af38a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80af38e:	f8d7 27d8 	ldr.w	r2, [r7, #2008]	; 0x7d8
 80af392:	3286      	adds	r2, #134	; 0x86
 80af394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80af398:	2b00      	cmp	r3, #0
 80af39a:	da01      	bge.n	80af3a0 <ranging_loop+0x174>
 80af39c:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80af3a0:	12db      	asrs	r3, r3, #11
 80af3a2:	461a      	mov	r2, r3
 80af3a4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80af3a8:	f107 0008 	add.w	r0, r7, #8
 80af3ac:	f8d7 17fc 	ldr.w	r1, [r7, #2044]	; 0x7fc
 80af3b0:	00c9      	lsls	r1, r1, #3
 80af3b2:	4401      	add	r1, r0
 80af3b4:	e9c1 2300 	strd	r2, r3, [r1]
            valid_range_num++;
 80af3b8:	f8d7 37fc 	ldr.w	r3, [r7, #2044]	; 0x7fc
 80af3bc:	3301      	adds	r3, #1
 80af3be:	f8c7 37fc 	str.w	r3, [r7, #2044]	; 0x7fc
      for (int j = 0; j < 8; j = j + 2) {       //this line controls the columns
 80af3c2:	f8d7 37e8 	ldr.w	r3, [r7, #2024]	; 0x7e8
 80af3c6:	3302      	adds	r3, #2
 80af3c8:	f8c7 37e8 	str.w	r3, [r7, #2024]	; 0x7e8
 80af3cc:	f8d7 37e8 	ldr.w	r3, [r7, #2024]	; 0x7e8
 80af3d0:	2b07      	cmp	r3, #7
 80af3d2:	dd98      	ble.n	80af306 <ranging_loop+0xda>
    for (int i = 0; i < 4; i++) {       // Warning : Print for 4x4 ranging - this line controls the rows
 80af3d4:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	; 0x7ec
 80af3d8:	3301      	adds	r3, #1
 80af3da:	f8c7 37ec 	str.w	r3, [r7, #2028]	; 0x7ec
 80af3de:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	; 0x7ec
 80af3e2:	2b03      	cmp	r3, #3
 80af3e4:	dd8b      	ble.n	80af2fe <ranging_loop+0xd2>
      }
      //printf(" \r\n");
    }
  }

  if (valid_range_num != 0) {
 80af3e6:	f8d7 37fc 	ldr.w	r3, [r7, #2044]	; 0x7fc
 80af3ea:	2b00      	cmp	r3, #0
 80af3ec:	f000 80ac 	beq.w	80af548 <ranging_loop+0x31c>
    for (int i = 0; i < valid_range_num; i++) {
 80af3f0:	2300      	movs	r3, #0
 80af3f2:	f8c7 37e4 	str.w	r3, [r7, #2020]	; 0x7e4
 80af3f6:	e032      	b.n	80af45e <ranging_loop+0x232>
      if (valid_range_peak_rate[i] != 0)
 80af3f8:	f107 0208 	add.w	r2, r7, #8
 80af3fc:	f8d7 37e4 	ldr.w	r3, [r7, #2020]	; 0x7e4
 80af400:	00db      	lsls	r3, r3, #3
 80af402:	4413      	add	r3, r2
 80af404:	e9d3 2300 	ldrd	r2, r3, [r3]
 80af408:	4313      	orrs	r3, r2
 80af40a:	d023      	beq.n	80af454 <ranging_loop+0x228>
        valid_range_peak_rate_sum += valid_range_peak_rate[i] * valid_range_peak_rate[i];
 80af40c:	f107 0208 	add.w	r2, r7, #8
 80af410:	f8d7 37e4 	ldr.w	r3, [r7, #2020]	; 0x7e4
 80af414:	00db      	lsls	r3, r3, #3
 80af416:	4413      	add	r3, r2
 80af418:	e9d3 0100 	ldrd	r0, r1, [r3]
 80af41c:	f107 0208 	add.w	r2, r7, #8
 80af420:	f8d7 37e4 	ldr.w	r3, [r7, #2020]	; 0x7e4
 80af424:	00db      	lsls	r3, r3, #3
 80af426:	4413      	add	r3, r2
 80af428:	e9d3 2300 	ldrd	r2, r3, [r3]
 80af42c:	fb02 fc01 	mul.w	ip, r2, r1
 80af430:	fb00 f603 	mul.w	r6, r0, r3
 80af434:	4466      	add	r6, ip
 80af436:	fba0 2302 	umull	r2, r3, r0, r2
 80af43a:	18f1      	adds	r1, r6, r3
 80af43c:	460b      	mov	r3, r1
 80af43e:	f507 61fe 	add.w	r1, r7, #2032	; 0x7f0
 80af442:	e9d1 0100 	ldrd	r0, r1, [r1]
 80af446:	1884      	adds	r4, r0, r2
 80af448:	eb41 0503 	adc.w	r5, r1, r3
 80af44c:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 80af450:	e9c3 4500 	strd	r4, r5, [r3]
    for (int i = 0; i < valid_range_num; i++) {
 80af454:	f8d7 37e4 	ldr.w	r3, [r7, #2020]	; 0x7e4
 80af458:	3301      	adds	r3, #1
 80af45a:	f8c7 37e4 	str.w	r3, [r7, #2020]	; 0x7e4
 80af45e:	f8d7 27e4 	ldr.w	r2, [r7, #2020]	; 0x7e4
 80af462:	f8d7 37fc 	ldr.w	r3, [r7, #2044]	; 0x7fc
 80af466:	429a      	cmp	r2, r3
 80af468:	dbc6      	blt.n	80af3f8 <ranging_loop+0x1cc>
    }
    tof_range_data = 0.0;
 80af46a:	4b40      	ldr	r3, [pc, #256]	; (80af56c <ranging_loop+0x340>)
 80af46c:	f04f 0200 	mov.w	r2, #0
 80af470:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < valid_range_num; i++)
 80af472:	2300      	movs	r3, #0
 80af474:	f8c7 37e0 	str.w	r3, [r7, #2016]	; 0x7e0
 80af478:	e05b      	b.n	80af532 <ranging_loop+0x306>
      tof_range_data += (valid_range_peak_rate[i] * valid_range_peak_rate[i] * 1.0 / valid_range_peak_rate_sum) * valid_range[i];
 80af47a:	4b3c      	ldr	r3, [pc, #240]	; (80af56c <ranging_loop+0x340>)
 80af47c:	681b      	ldr	r3, [r3, #0]
 80af47e:	4618      	mov	r0, r3
 80af480:	f7f1 f862 	bl	80a0548 <__aeabi_f2d>
 80af484:	4604      	mov	r4, r0
 80af486:	460d      	mov	r5, r1
 80af488:	f107 0208 	add.w	r2, r7, #8
 80af48c:	f8d7 37e0 	ldr.w	r3, [r7, #2016]	; 0x7e0
 80af490:	00db      	lsls	r3, r3, #3
 80af492:	4413      	add	r3, r2
 80af494:	e9d3 0100 	ldrd	r0, r1, [r3]
 80af498:	f107 0208 	add.w	r2, r7, #8
 80af49c:	f8d7 37e0 	ldr.w	r3, [r7, #2016]	; 0x7e0
 80af4a0:	00db      	lsls	r3, r3, #3
 80af4a2:	4413      	add	r3, r2
 80af4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80af4a8:	fb02 fc01 	mul.w	ip, r2, r1
 80af4ac:	fb00 f603 	mul.w	r6, r0, r3
 80af4b0:	4466      	add	r6, ip
 80af4b2:	fba0 2302 	umull	r2, r3, r0, r2
 80af4b6:	18f1      	adds	r1, r6, r3
 80af4b8:	460b      	mov	r3, r1
 80af4ba:	4610      	mov	r0, r2
 80af4bc:	4619      	mov	r1, r3
 80af4be:	f7f1 f86d 	bl	80a059c <__aeabi_l2d>
 80af4c2:	4680      	mov	r8, r0
 80af4c4:	4689      	mov	r9, r1
 80af4c6:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 80af4ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80af4ce:	f7f1 f865 	bl	80a059c <__aeabi_l2d>
 80af4d2:	4602      	mov	r2, r0
 80af4d4:	460b      	mov	r3, r1
 80af4d6:	4640      	mov	r0, r8
 80af4d8:	4649      	mov	r1, r9
 80af4da:	f7f1 f9b7 	bl	80a084c <__aeabi_ddiv>
 80af4de:	4602      	mov	r2, r0
 80af4e0:	460b      	mov	r3, r1
 80af4e2:	4690      	mov	r8, r2
 80af4e4:	4699      	mov	r9, r3
 80af4e6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80af4ea:	f8d7 37e0 	ldr.w	r3, [r7, #2016]	; 0x7e0
 80af4ee:	00db      	lsls	r3, r3, #3
 80af4f0:	4413      	add	r3, r2
 80af4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80af4f6:	4610      	mov	r0, r2
 80af4f8:	4619      	mov	r1, r3
 80af4fa:	f7f1 f84f 	bl	80a059c <__aeabi_l2d>
 80af4fe:	4602      	mov	r2, r0
 80af500:	460b      	mov	r3, r1
 80af502:	4640      	mov	r0, r8
 80af504:	4649      	mov	r1, r9
 80af506:	f7f1 f877 	bl	80a05f8 <__aeabi_dmul>
 80af50a:	4602      	mov	r2, r0
 80af50c:	460b      	mov	r3, r1
 80af50e:	4620      	mov	r0, r4
 80af510:	4629      	mov	r1, r5
 80af512:	f7f0 febb 	bl	80a028c <__adddf3>
 80af516:	4602      	mov	r2, r0
 80af518:	460b      	mov	r3, r1
 80af51a:	4610      	mov	r0, r2
 80af51c:	4619      	mov	r1, r3
 80af51e:	f7f1 fb63 	bl	80a0be8 <__aeabi_d2f>
 80af522:	4603      	mov	r3, r0
 80af524:	4a11      	ldr	r2, [pc, #68]	; (80af56c <ranging_loop+0x340>)
 80af526:	6013      	str	r3, [r2, #0]
    for (int i = 0; i < valid_range_num; i++)
 80af528:	f8d7 37e0 	ldr.w	r3, [r7, #2016]	; 0x7e0
 80af52c:	3301      	adds	r3, #1
 80af52e:	f8c7 37e0 	str.w	r3, [r7, #2016]	; 0x7e0
 80af532:	f8d7 27e0 	ldr.w	r2, [r7, #2016]	; 0x7e0
 80af536:	f8d7 37fc 	ldr.w	r3, [r7, #2044]	; 0x7fc
 80af53a:	429a      	cmp	r2, r3
 80af53c:	db9d      	blt.n	80af47a <ranging_loop+0x24e>
    last_tof_range_data = tof_range_data;
 80af53e:	4b0b      	ldr	r3, [pc, #44]	; (80af56c <ranging_loop+0x340>)
 80af540:	681b      	ldr	r3, [r3, #0]
 80af542:	4a0b      	ldr	r2, [pc, #44]	; (80af570 <ranging_loop+0x344>)
 80af544:	6013      	str	r3, [r2, #0]
 80af546:	e003      	b.n	80af550 <ranging_loop+0x324>
  } else
    tof_range_data = last_tof_range_data;
 80af548:	4b09      	ldr	r3, [pc, #36]	; (80af570 <ranging_loop+0x344>)
 80af54a:	681b      	ldr	r3, [r3, #0]
 80af54c:	4a07      	ldr	r2, [pc, #28]	; (80af56c <ranging_loop+0x340>)
 80af54e:	6013      	str	r3, [r2, #0]
  return status;
 80af550:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	; 0x7dc
}
 80af554:	4618      	mov	r0, r3
 80af556:	f607 0704 	addw	r7, r7, #2052	; 0x804
 80af55a:	46bd      	mov	sp, r7
 80af55c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80af560:	200084b4 	.word	0x200084b4
 80af564:	080c7728 	.word	0x080c7728
 80af568:	080c774c 	.word	0x080c774c
 80af56c:	200084b0 	.word	0x200084b0
 80af570:	20008534 	.word	0x20008534

080af574 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80af574:	f8df d034 	ldr.w	sp, [pc, #52]	; 80af5ac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80af578:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80af57a:	e003      	b.n	80af584 <LoopCopyDataInit>

080af57c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80af57c:	4b0c      	ldr	r3, [pc, #48]	; (80af5b0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80af57e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80af580:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80af582:	3104      	adds	r1, #4

080af584 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80af584:	480b      	ldr	r0, [pc, #44]	; (80af5b4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80af586:	4b0c      	ldr	r3, [pc, #48]	; (80af5b8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80af588:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80af58a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80af58c:	d3f6      	bcc.n	80af57c <CopyDataInit>
  ldr  r2, =_sbss
 80af58e:	4a0b      	ldr	r2, [pc, #44]	; (80af5bc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80af590:	e002      	b.n	80af598 <LoopFillZerobss>

080af592 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80af592:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80af594:	f842 3b04 	str.w	r3, [r2], #4

080af598 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80af598:	4b09      	ldr	r3, [pc, #36]	; (80af5c0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80af59a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80af59c:	d3f9      	bcc.n	80af592 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80af59e:	f7fe fecd 	bl	80ae33c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80af5a2:	f010 fcd9 	bl	80bff58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80af5a6:	f7f8 fced 	bl	80a7f84 <main>
  bx  lr    
 80af5aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80af5ac:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80af5b0:	080ddaf0 	.word	0x080ddaf0
  ldr  r0, =_sdata
 80af5b4:	20007000 	.word	0x20007000
  ldr  r3, =_edata
 80af5b8:	20007e94 	.word	0x20007e94
  ldr  r2, =_sbss
 80af5bc:	20007e98 	.word	0x20007e98
  ldr  r3, = _ebss
 80af5c0:	2001c394 	.word	0x2001c394

080af5c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80af5c4:	e7fe      	b.n	80af5c4 <ADC_IRQHandler>
	...

080af5c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80af5c8:	b580      	push	{r7, lr}
 80af5ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80af5cc:	4b0e      	ldr	r3, [pc, #56]	; (80af608 <HAL_Init+0x40>)
 80af5ce:	681b      	ldr	r3, [r3, #0]
 80af5d0:	4a0d      	ldr	r2, [pc, #52]	; (80af608 <HAL_Init+0x40>)
 80af5d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80af5d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80af5d8:	4b0b      	ldr	r3, [pc, #44]	; (80af608 <HAL_Init+0x40>)
 80af5da:	681b      	ldr	r3, [r3, #0]
 80af5dc:	4a0a      	ldr	r2, [pc, #40]	; (80af608 <HAL_Init+0x40>)
 80af5de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80af5e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80af5e4:	4b08      	ldr	r3, [pc, #32]	; (80af608 <HAL_Init+0x40>)
 80af5e6:	681b      	ldr	r3, [r3, #0]
 80af5e8:	4a07      	ldr	r2, [pc, #28]	; (80af608 <HAL_Init+0x40>)
 80af5ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80af5ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80af5f0:	2003      	movs	r0, #3
 80af5f2:	f000 ff78 	bl	80b04e6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80af5f6:	2000      	movs	r0, #0
 80af5f8:	f7fe fcfe 	bl	80adff8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80af5fc:	f7fe fa66 	bl	80adacc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80af600:	2300      	movs	r3, #0
}
 80af602:	4618      	mov	r0, r3
 80af604:	bd80      	pop	{r7, pc}
 80af606:	bf00      	nop
 80af608:	40023c00 	.word	0x40023c00

080af60c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80af60c:	b480      	push	{r7}
 80af60e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80af610:	4b06      	ldr	r3, [pc, #24]	; (80af62c <HAL_IncTick+0x20>)
 80af612:	781b      	ldrb	r3, [r3, #0]
 80af614:	461a      	mov	r2, r3
 80af616:	4b06      	ldr	r3, [pc, #24]	; (80af630 <HAL_IncTick+0x24>)
 80af618:	681b      	ldr	r3, [r3, #0]
 80af61a:	4413      	add	r3, r2
 80af61c:	4a04      	ldr	r2, [pc, #16]	; (80af630 <HAL_IncTick+0x24>)
 80af61e:	6013      	str	r3, [r2, #0]
}
 80af620:	bf00      	nop
 80af622:	46bd      	mov	sp, r7
 80af624:	f85d 7b04 	ldr.w	r7, [sp], #4
 80af628:	4770      	bx	lr
 80af62a:	bf00      	nop
 80af62c:	20007cb0 	.word	0x20007cb0
 80af630:	2001c320 	.word	0x2001c320

080af634 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80af634:	b480      	push	{r7}
 80af636:	af00      	add	r7, sp, #0
  return uwTick;
 80af638:	4b03      	ldr	r3, [pc, #12]	; (80af648 <HAL_GetTick+0x14>)
 80af63a:	681b      	ldr	r3, [r3, #0]
}
 80af63c:	4618      	mov	r0, r3
 80af63e:	46bd      	mov	sp, r7
 80af640:	f85d 7b04 	ldr.w	r7, [sp], #4
 80af644:	4770      	bx	lr
 80af646:	bf00      	nop
 80af648:	2001c320 	.word	0x2001c320

080af64c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80af64c:	b580      	push	{r7, lr}
 80af64e:	b084      	sub	sp, #16
 80af650:	af00      	add	r7, sp, #0
 80af652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80af654:	f7ff ffee 	bl	80af634 <HAL_GetTick>
 80af658:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80af65a:	687b      	ldr	r3, [r7, #4]
 80af65c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80af65e:	68fb      	ldr	r3, [r7, #12]
 80af660:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80af664:	d005      	beq.n	80af672 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80af666:	4b0a      	ldr	r3, [pc, #40]	; (80af690 <HAL_Delay+0x44>)
 80af668:	781b      	ldrb	r3, [r3, #0]
 80af66a:	461a      	mov	r2, r3
 80af66c:	68fb      	ldr	r3, [r7, #12]
 80af66e:	4413      	add	r3, r2
 80af670:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80af672:	bf00      	nop
 80af674:	f7ff ffde 	bl	80af634 <HAL_GetTick>
 80af678:	4602      	mov	r2, r0
 80af67a:	68bb      	ldr	r3, [r7, #8]
 80af67c:	1ad3      	subs	r3, r2, r3
 80af67e:	68fa      	ldr	r2, [r7, #12]
 80af680:	429a      	cmp	r2, r3
 80af682:	d8f7      	bhi.n	80af674 <HAL_Delay+0x28>
  {
  }
}
 80af684:	bf00      	nop
 80af686:	bf00      	nop
 80af688:	3710      	adds	r7, #16
 80af68a:	46bd      	mov	sp, r7
 80af68c:	bd80      	pop	{r7, pc}
 80af68e:	bf00      	nop
 80af690:	20007cb0 	.word	0x20007cb0

080af694 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80af694:	b580      	push	{r7, lr}
 80af696:	b084      	sub	sp, #16
 80af698:	af00      	add	r7, sp, #0
 80af69a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80af69c:	687b      	ldr	r3, [r7, #4]
 80af69e:	2b00      	cmp	r3, #0
 80af6a0:	d101      	bne.n	80af6a6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80af6a2:	2301      	movs	r3, #1
 80af6a4:	e0ed      	b.n	80af882 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80af6a6:	687b      	ldr	r3, [r7, #4]
 80af6a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80af6ac:	b2db      	uxtb	r3, r3
 80af6ae:	2b00      	cmp	r3, #0
 80af6b0:	d102      	bne.n	80af6b8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80af6b2:	6878      	ldr	r0, [r7, #4]
 80af6b4:	f7fe fa36 	bl	80adb24 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80af6b8:	687b      	ldr	r3, [r7, #4]
 80af6ba:	681b      	ldr	r3, [r3, #0]
 80af6bc:	681a      	ldr	r2, [r3, #0]
 80af6be:	687b      	ldr	r3, [r7, #4]
 80af6c0:	681b      	ldr	r3, [r3, #0]
 80af6c2:	f022 0202 	bic.w	r2, r2, #2
 80af6c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80af6c8:	f7ff ffb4 	bl	80af634 <HAL_GetTick>
 80af6cc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80af6ce:	e012      	b.n	80af6f6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80af6d0:	f7ff ffb0 	bl	80af634 <HAL_GetTick>
 80af6d4:	4602      	mov	r2, r0
 80af6d6:	68fb      	ldr	r3, [r7, #12]
 80af6d8:	1ad3      	subs	r3, r2, r3
 80af6da:	2b0a      	cmp	r3, #10
 80af6dc:	d90b      	bls.n	80af6f6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80af6de:	687b      	ldr	r3, [r7, #4]
 80af6e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80af6e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80af6e6:	687b      	ldr	r3, [r7, #4]
 80af6e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80af6ea:	687b      	ldr	r3, [r7, #4]
 80af6ec:	2205      	movs	r2, #5
 80af6ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80af6f2:	2301      	movs	r3, #1
 80af6f4:	e0c5      	b.n	80af882 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80af6f6:	687b      	ldr	r3, [r7, #4]
 80af6f8:	681b      	ldr	r3, [r3, #0]
 80af6fa:	685b      	ldr	r3, [r3, #4]
 80af6fc:	f003 0302 	and.w	r3, r3, #2
 80af700:	2b00      	cmp	r3, #0
 80af702:	d1e5      	bne.n	80af6d0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80af704:	687b      	ldr	r3, [r7, #4]
 80af706:	681b      	ldr	r3, [r3, #0]
 80af708:	681a      	ldr	r2, [r3, #0]
 80af70a:	687b      	ldr	r3, [r7, #4]
 80af70c:	681b      	ldr	r3, [r3, #0]
 80af70e:	f042 0201 	orr.w	r2, r2, #1
 80af712:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80af714:	f7ff ff8e 	bl	80af634 <HAL_GetTick>
 80af718:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80af71a:	e012      	b.n	80af742 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80af71c:	f7ff ff8a 	bl	80af634 <HAL_GetTick>
 80af720:	4602      	mov	r2, r0
 80af722:	68fb      	ldr	r3, [r7, #12]
 80af724:	1ad3      	subs	r3, r2, r3
 80af726:	2b0a      	cmp	r3, #10
 80af728:	d90b      	bls.n	80af742 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80af72a:	687b      	ldr	r3, [r7, #4]
 80af72c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80af72e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80af732:	687b      	ldr	r3, [r7, #4]
 80af734:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80af736:	687b      	ldr	r3, [r7, #4]
 80af738:	2205      	movs	r2, #5
 80af73a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80af73e:	2301      	movs	r3, #1
 80af740:	e09f      	b.n	80af882 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80af742:	687b      	ldr	r3, [r7, #4]
 80af744:	681b      	ldr	r3, [r3, #0]
 80af746:	685b      	ldr	r3, [r3, #4]
 80af748:	f003 0301 	and.w	r3, r3, #1
 80af74c:	2b00      	cmp	r3, #0
 80af74e:	d0e5      	beq.n	80af71c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80af750:	687b      	ldr	r3, [r7, #4]
 80af752:	7e1b      	ldrb	r3, [r3, #24]
 80af754:	2b01      	cmp	r3, #1
 80af756:	d108      	bne.n	80af76a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80af758:	687b      	ldr	r3, [r7, #4]
 80af75a:	681b      	ldr	r3, [r3, #0]
 80af75c:	681a      	ldr	r2, [r3, #0]
 80af75e:	687b      	ldr	r3, [r7, #4]
 80af760:	681b      	ldr	r3, [r3, #0]
 80af762:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80af766:	601a      	str	r2, [r3, #0]
 80af768:	e007      	b.n	80af77a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80af76a:	687b      	ldr	r3, [r7, #4]
 80af76c:	681b      	ldr	r3, [r3, #0]
 80af76e:	681a      	ldr	r2, [r3, #0]
 80af770:	687b      	ldr	r3, [r7, #4]
 80af772:	681b      	ldr	r3, [r3, #0]
 80af774:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80af778:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80af77a:	687b      	ldr	r3, [r7, #4]
 80af77c:	7e5b      	ldrb	r3, [r3, #25]
 80af77e:	2b01      	cmp	r3, #1
 80af780:	d108      	bne.n	80af794 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80af782:	687b      	ldr	r3, [r7, #4]
 80af784:	681b      	ldr	r3, [r3, #0]
 80af786:	681a      	ldr	r2, [r3, #0]
 80af788:	687b      	ldr	r3, [r7, #4]
 80af78a:	681b      	ldr	r3, [r3, #0]
 80af78c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80af790:	601a      	str	r2, [r3, #0]
 80af792:	e007      	b.n	80af7a4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80af794:	687b      	ldr	r3, [r7, #4]
 80af796:	681b      	ldr	r3, [r3, #0]
 80af798:	681a      	ldr	r2, [r3, #0]
 80af79a:	687b      	ldr	r3, [r7, #4]
 80af79c:	681b      	ldr	r3, [r3, #0]
 80af79e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80af7a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80af7a4:	687b      	ldr	r3, [r7, #4]
 80af7a6:	7e9b      	ldrb	r3, [r3, #26]
 80af7a8:	2b01      	cmp	r3, #1
 80af7aa:	d108      	bne.n	80af7be <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80af7ac:	687b      	ldr	r3, [r7, #4]
 80af7ae:	681b      	ldr	r3, [r3, #0]
 80af7b0:	681a      	ldr	r2, [r3, #0]
 80af7b2:	687b      	ldr	r3, [r7, #4]
 80af7b4:	681b      	ldr	r3, [r3, #0]
 80af7b6:	f042 0220 	orr.w	r2, r2, #32
 80af7ba:	601a      	str	r2, [r3, #0]
 80af7bc:	e007      	b.n	80af7ce <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80af7be:	687b      	ldr	r3, [r7, #4]
 80af7c0:	681b      	ldr	r3, [r3, #0]
 80af7c2:	681a      	ldr	r2, [r3, #0]
 80af7c4:	687b      	ldr	r3, [r7, #4]
 80af7c6:	681b      	ldr	r3, [r3, #0]
 80af7c8:	f022 0220 	bic.w	r2, r2, #32
 80af7cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80af7ce:	687b      	ldr	r3, [r7, #4]
 80af7d0:	7edb      	ldrb	r3, [r3, #27]
 80af7d2:	2b01      	cmp	r3, #1
 80af7d4:	d108      	bne.n	80af7e8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80af7d6:	687b      	ldr	r3, [r7, #4]
 80af7d8:	681b      	ldr	r3, [r3, #0]
 80af7da:	681a      	ldr	r2, [r3, #0]
 80af7dc:	687b      	ldr	r3, [r7, #4]
 80af7de:	681b      	ldr	r3, [r3, #0]
 80af7e0:	f022 0210 	bic.w	r2, r2, #16
 80af7e4:	601a      	str	r2, [r3, #0]
 80af7e6:	e007      	b.n	80af7f8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80af7e8:	687b      	ldr	r3, [r7, #4]
 80af7ea:	681b      	ldr	r3, [r3, #0]
 80af7ec:	681a      	ldr	r2, [r3, #0]
 80af7ee:	687b      	ldr	r3, [r7, #4]
 80af7f0:	681b      	ldr	r3, [r3, #0]
 80af7f2:	f042 0210 	orr.w	r2, r2, #16
 80af7f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80af7f8:	687b      	ldr	r3, [r7, #4]
 80af7fa:	7f1b      	ldrb	r3, [r3, #28]
 80af7fc:	2b01      	cmp	r3, #1
 80af7fe:	d108      	bne.n	80af812 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80af800:	687b      	ldr	r3, [r7, #4]
 80af802:	681b      	ldr	r3, [r3, #0]
 80af804:	681a      	ldr	r2, [r3, #0]
 80af806:	687b      	ldr	r3, [r7, #4]
 80af808:	681b      	ldr	r3, [r3, #0]
 80af80a:	f042 0208 	orr.w	r2, r2, #8
 80af80e:	601a      	str	r2, [r3, #0]
 80af810:	e007      	b.n	80af822 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80af812:	687b      	ldr	r3, [r7, #4]
 80af814:	681b      	ldr	r3, [r3, #0]
 80af816:	681a      	ldr	r2, [r3, #0]
 80af818:	687b      	ldr	r3, [r7, #4]
 80af81a:	681b      	ldr	r3, [r3, #0]
 80af81c:	f022 0208 	bic.w	r2, r2, #8
 80af820:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80af822:	687b      	ldr	r3, [r7, #4]
 80af824:	7f5b      	ldrb	r3, [r3, #29]
 80af826:	2b01      	cmp	r3, #1
 80af828:	d108      	bne.n	80af83c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80af82a:	687b      	ldr	r3, [r7, #4]
 80af82c:	681b      	ldr	r3, [r3, #0]
 80af82e:	681a      	ldr	r2, [r3, #0]
 80af830:	687b      	ldr	r3, [r7, #4]
 80af832:	681b      	ldr	r3, [r3, #0]
 80af834:	f042 0204 	orr.w	r2, r2, #4
 80af838:	601a      	str	r2, [r3, #0]
 80af83a:	e007      	b.n	80af84c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80af83c:	687b      	ldr	r3, [r7, #4]
 80af83e:	681b      	ldr	r3, [r3, #0]
 80af840:	681a      	ldr	r2, [r3, #0]
 80af842:	687b      	ldr	r3, [r7, #4]
 80af844:	681b      	ldr	r3, [r3, #0]
 80af846:	f022 0204 	bic.w	r2, r2, #4
 80af84a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80af84c:	687b      	ldr	r3, [r7, #4]
 80af84e:	689a      	ldr	r2, [r3, #8]
 80af850:	687b      	ldr	r3, [r7, #4]
 80af852:	68db      	ldr	r3, [r3, #12]
 80af854:	431a      	orrs	r2, r3
 80af856:	687b      	ldr	r3, [r7, #4]
 80af858:	691b      	ldr	r3, [r3, #16]
 80af85a:	431a      	orrs	r2, r3
 80af85c:	687b      	ldr	r3, [r7, #4]
 80af85e:	695b      	ldr	r3, [r3, #20]
 80af860:	ea42 0103 	orr.w	r1, r2, r3
 80af864:	687b      	ldr	r3, [r7, #4]
 80af866:	685b      	ldr	r3, [r3, #4]
 80af868:	1e5a      	subs	r2, r3, #1
 80af86a:	687b      	ldr	r3, [r7, #4]
 80af86c:	681b      	ldr	r3, [r3, #0]
 80af86e:	430a      	orrs	r2, r1
 80af870:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80af872:	687b      	ldr	r3, [r7, #4]
 80af874:	2200      	movs	r2, #0
 80af876:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80af878:	687b      	ldr	r3, [r7, #4]
 80af87a:	2201      	movs	r2, #1
 80af87c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80af880:	2300      	movs	r3, #0
}
 80af882:	4618      	mov	r0, r3
 80af884:	3710      	adds	r7, #16
 80af886:	46bd      	mov	sp, r7
 80af888:	bd80      	pop	{r7, pc}
	...

080af88c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80af88c:	b480      	push	{r7}
 80af88e:	b087      	sub	sp, #28
 80af890:	af00      	add	r7, sp, #0
 80af892:	6078      	str	r0, [r7, #4]
 80af894:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80af896:	687b      	ldr	r3, [r7, #4]
 80af898:	681b      	ldr	r3, [r3, #0]
 80af89a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80af89c:	687b      	ldr	r3, [r7, #4]
 80af89e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80af8a2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80af8a4:	7cfb      	ldrb	r3, [r7, #19]
 80af8a6:	2b01      	cmp	r3, #1
 80af8a8:	d003      	beq.n	80af8b2 <HAL_CAN_ConfigFilter+0x26>
 80af8aa:	7cfb      	ldrb	r3, [r7, #19]
 80af8ac:	2b02      	cmp	r3, #2
 80af8ae:	f040 80be 	bne.w	80afa2e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80af8b2:	4b65      	ldr	r3, [pc, #404]	; (80afa48 <HAL_CAN_ConfigFilter+0x1bc>)
 80af8b4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80af8b6:	697b      	ldr	r3, [r7, #20]
 80af8b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80af8bc:	f043 0201 	orr.w	r2, r3, #1
 80af8c0:	697b      	ldr	r3, [r7, #20]
 80af8c2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80af8c6:	697b      	ldr	r3, [r7, #20]
 80af8c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80af8cc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80af8d0:	697b      	ldr	r3, [r7, #20]
 80af8d2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80af8d6:	697b      	ldr	r3, [r7, #20]
 80af8d8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80af8dc:	683b      	ldr	r3, [r7, #0]
 80af8de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80af8e0:	021b      	lsls	r3, r3, #8
 80af8e2:	431a      	orrs	r2, r3
 80af8e4:	697b      	ldr	r3, [r7, #20]
 80af8e6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80af8ea:	683b      	ldr	r3, [r7, #0]
 80af8ec:	695b      	ldr	r3, [r3, #20]
 80af8ee:	f003 031f 	and.w	r3, r3, #31
 80af8f2:	2201      	movs	r2, #1
 80af8f4:	fa02 f303 	lsl.w	r3, r2, r3
 80af8f8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80af8fa:	697b      	ldr	r3, [r7, #20]
 80af8fc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80af900:	68fb      	ldr	r3, [r7, #12]
 80af902:	43db      	mvns	r3, r3
 80af904:	401a      	ands	r2, r3
 80af906:	697b      	ldr	r3, [r7, #20]
 80af908:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80af90c:	683b      	ldr	r3, [r7, #0]
 80af90e:	69db      	ldr	r3, [r3, #28]
 80af910:	2b00      	cmp	r3, #0
 80af912:	d123      	bne.n	80af95c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80af914:	697b      	ldr	r3, [r7, #20]
 80af916:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80af91a:	68fb      	ldr	r3, [r7, #12]
 80af91c:	43db      	mvns	r3, r3
 80af91e:	401a      	ands	r2, r3
 80af920:	697b      	ldr	r3, [r7, #20]
 80af922:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80af926:	683b      	ldr	r3, [r7, #0]
 80af928:	68db      	ldr	r3, [r3, #12]
 80af92a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80af92c:	683b      	ldr	r3, [r7, #0]
 80af92e:	685b      	ldr	r3, [r3, #4]
 80af930:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80af932:	683a      	ldr	r2, [r7, #0]
 80af934:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80af936:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80af938:	697b      	ldr	r3, [r7, #20]
 80af93a:	3248      	adds	r2, #72	; 0x48
 80af93c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80af940:	683b      	ldr	r3, [r7, #0]
 80af942:	689b      	ldr	r3, [r3, #8]
 80af944:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80af946:	683b      	ldr	r3, [r7, #0]
 80af948:	681b      	ldr	r3, [r3, #0]
 80af94a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80af94c:	683b      	ldr	r3, [r7, #0]
 80af94e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80af950:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80af952:	6979      	ldr	r1, [r7, #20]
 80af954:	3348      	adds	r3, #72	; 0x48
 80af956:	00db      	lsls	r3, r3, #3
 80af958:	440b      	add	r3, r1
 80af95a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80af95c:	683b      	ldr	r3, [r7, #0]
 80af95e:	69db      	ldr	r3, [r3, #28]
 80af960:	2b01      	cmp	r3, #1
 80af962:	d122      	bne.n	80af9aa <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80af964:	697b      	ldr	r3, [r7, #20]
 80af966:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80af96a:	68fb      	ldr	r3, [r7, #12]
 80af96c:	431a      	orrs	r2, r3
 80af96e:	697b      	ldr	r3, [r7, #20]
 80af970:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80af974:	683b      	ldr	r3, [r7, #0]
 80af976:	681b      	ldr	r3, [r3, #0]
 80af978:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80af97a:	683b      	ldr	r3, [r7, #0]
 80af97c:	685b      	ldr	r3, [r3, #4]
 80af97e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80af980:	683a      	ldr	r2, [r7, #0]
 80af982:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80af984:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80af986:	697b      	ldr	r3, [r7, #20]
 80af988:	3248      	adds	r2, #72	; 0x48
 80af98a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80af98e:	683b      	ldr	r3, [r7, #0]
 80af990:	689b      	ldr	r3, [r3, #8]
 80af992:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80af994:	683b      	ldr	r3, [r7, #0]
 80af996:	68db      	ldr	r3, [r3, #12]
 80af998:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80af99a:	683b      	ldr	r3, [r7, #0]
 80af99c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80af99e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80af9a0:	6979      	ldr	r1, [r7, #20]
 80af9a2:	3348      	adds	r3, #72	; 0x48
 80af9a4:	00db      	lsls	r3, r3, #3
 80af9a6:	440b      	add	r3, r1
 80af9a8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80af9aa:	683b      	ldr	r3, [r7, #0]
 80af9ac:	699b      	ldr	r3, [r3, #24]
 80af9ae:	2b00      	cmp	r3, #0
 80af9b0:	d109      	bne.n	80af9c6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80af9b2:	697b      	ldr	r3, [r7, #20]
 80af9b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80af9b8:	68fb      	ldr	r3, [r7, #12]
 80af9ba:	43db      	mvns	r3, r3
 80af9bc:	401a      	ands	r2, r3
 80af9be:	697b      	ldr	r3, [r7, #20]
 80af9c0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80af9c4:	e007      	b.n	80af9d6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80af9c6:	697b      	ldr	r3, [r7, #20]
 80af9c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80af9cc:	68fb      	ldr	r3, [r7, #12]
 80af9ce:	431a      	orrs	r2, r3
 80af9d0:	697b      	ldr	r3, [r7, #20]
 80af9d2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80af9d6:	683b      	ldr	r3, [r7, #0]
 80af9d8:	691b      	ldr	r3, [r3, #16]
 80af9da:	2b00      	cmp	r3, #0
 80af9dc:	d109      	bne.n	80af9f2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80af9de:	697b      	ldr	r3, [r7, #20]
 80af9e0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80af9e4:	68fb      	ldr	r3, [r7, #12]
 80af9e6:	43db      	mvns	r3, r3
 80af9e8:	401a      	ands	r2, r3
 80af9ea:	697b      	ldr	r3, [r7, #20]
 80af9ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80af9f0:	e007      	b.n	80afa02 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80af9f2:	697b      	ldr	r3, [r7, #20]
 80af9f4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80af9f8:	68fb      	ldr	r3, [r7, #12]
 80af9fa:	431a      	orrs	r2, r3
 80af9fc:	697b      	ldr	r3, [r7, #20]
 80af9fe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80afa02:	683b      	ldr	r3, [r7, #0]
 80afa04:	6a1b      	ldr	r3, [r3, #32]
 80afa06:	2b01      	cmp	r3, #1
 80afa08:	d107      	bne.n	80afa1a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80afa0a:	697b      	ldr	r3, [r7, #20]
 80afa0c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80afa10:	68fb      	ldr	r3, [r7, #12]
 80afa12:	431a      	orrs	r2, r3
 80afa14:	697b      	ldr	r3, [r7, #20]
 80afa16:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80afa1a:	697b      	ldr	r3, [r7, #20]
 80afa1c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80afa20:	f023 0201 	bic.w	r2, r3, #1
 80afa24:	697b      	ldr	r3, [r7, #20]
 80afa26:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80afa2a:	2300      	movs	r3, #0
 80afa2c:	e006      	b.n	80afa3c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80afa2e:	687b      	ldr	r3, [r7, #4]
 80afa30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80afa32:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80afa36:	687b      	ldr	r3, [r7, #4]
 80afa38:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80afa3a:	2301      	movs	r3, #1
  }
}
 80afa3c:	4618      	mov	r0, r3
 80afa3e:	371c      	adds	r7, #28
 80afa40:	46bd      	mov	sp, r7
 80afa42:	f85d 7b04 	ldr.w	r7, [sp], #4
 80afa46:	4770      	bx	lr
 80afa48:	40006400 	.word	0x40006400

080afa4c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80afa4c:	b580      	push	{r7, lr}
 80afa4e:	b084      	sub	sp, #16
 80afa50:	af00      	add	r7, sp, #0
 80afa52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80afa54:	687b      	ldr	r3, [r7, #4]
 80afa56:	f893 3020 	ldrb.w	r3, [r3, #32]
 80afa5a:	b2db      	uxtb	r3, r3
 80afa5c:	2b01      	cmp	r3, #1
 80afa5e:	d12e      	bne.n	80afabe <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80afa60:	687b      	ldr	r3, [r7, #4]
 80afa62:	2202      	movs	r2, #2
 80afa64:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80afa68:	687b      	ldr	r3, [r7, #4]
 80afa6a:	681b      	ldr	r3, [r3, #0]
 80afa6c:	681a      	ldr	r2, [r3, #0]
 80afa6e:	687b      	ldr	r3, [r7, #4]
 80afa70:	681b      	ldr	r3, [r3, #0]
 80afa72:	f022 0201 	bic.w	r2, r2, #1
 80afa76:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80afa78:	f7ff fddc 	bl	80af634 <HAL_GetTick>
 80afa7c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80afa7e:	e012      	b.n	80afaa6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80afa80:	f7ff fdd8 	bl	80af634 <HAL_GetTick>
 80afa84:	4602      	mov	r2, r0
 80afa86:	68fb      	ldr	r3, [r7, #12]
 80afa88:	1ad3      	subs	r3, r2, r3
 80afa8a:	2b0a      	cmp	r3, #10
 80afa8c:	d90b      	bls.n	80afaa6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80afa8e:	687b      	ldr	r3, [r7, #4]
 80afa90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80afa92:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80afa96:	687b      	ldr	r3, [r7, #4]
 80afa98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80afa9a:	687b      	ldr	r3, [r7, #4]
 80afa9c:	2205      	movs	r2, #5
 80afa9e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80afaa2:	2301      	movs	r3, #1
 80afaa4:	e012      	b.n	80afacc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80afaa6:	687b      	ldr	r3, [r7, #4]
 80afaa8:	681b      	ldr	r3, [r3, #0]
 80afaaa:	685b      	ldr	r3, [r3, #4]
 80afaac:	f003 0301 	and.w	r3, r3, #1
 80afab0:	2b00      	cmp	r3, #0
 80afab2:	d1e5      	bne.n	80afa80 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80afab4:	687b      	ldr	r3, [r7, #4]
 80afab6:	2200      	movs	r2, #0
 80afab8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80afaba:	2300      	movs	r3, #0
 80afabc:	e006      	b.n	80afacc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80afabe:	687b      	ldr	r3, [r7, #4]
 80afac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80afac2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80afac6:	687b      	ldr	r3, [r7, #4]
 80afac8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80afaca:	2301      	movs	r3, #1
  }
}
 80afacc:	4618      	mov	r0, r3
 80aface:	3710      	adds	r7, #16
 80afad0:	46bd      	mov	sp, r7
 80afad2:	bd80      	pop	{r7, pc}

080afad4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80afad4:	b480      	push	{r7}
 80afad6:	b089      	sub	sp, #36	; 0x24
 80afad8:	af00      	add	r7, sp, #0
 80afada:	60f8      	str	r0, [r7, #12]
 80afadc:	60b9      	str	r1, [r7, #8]
 80afade:	607a      	str	r2, [r7, #4]
 80afae0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80afae2:	68fb      	ldr	r3, [r7, #12]
 80afae4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80afae8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80afaea:	68fb      	ldr	r3, [r7, #12]
 80afaec:	681b      	ldr	r3, [r3, #0]
 80afaee:	689b      	ldr	r3, [r3, #8]
 80afaf0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80afaf2:	7ffb      	ldrb	r3, [r7, #31]
 80afaf4:	2b01      	cmp	r3, #1
 80afaf6:	d003      	beq.n	80afb00 <HAL_CAN_AddTxMessage+0x2c>
 80afaf8:	7ffb      	ldrb	r3, [r7, #31]
 80afafa:	2b02      	cmp	r3, #2
 80afafc:	f040 80b8 	bne.w	80afc70 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80afb00:	69bb      	ldr	r3, [r7, #24]
 80afb02:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80afb06:	2b00      	cmp	r3, #0
 80afb08:	d10a      	bne.n	80afb20 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80afb0a:	69bb      	ldr	r3, [r7, #24]
 80afb0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80afb10:	2b00      	cmp	r3, #0
 80afb12:	d105      	bne.n	80afb20 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80afb14:	69bb      	ldr	r3, [r7, #24]
 80afb16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80afb1a:	2b00      	cmp	r3, #0
 80afb1c:	f000 80a0 	beq.w	80afc60 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80afb20:	69bb      	ldr	r3, [r7, #24]
 80afb22:	0e1b      	lsrs	r3, r3, #24
 80afb24:	f003 0303 	and.w	r3, r3, #3
 80afb28:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80afb2a:	697b      	ldr	r3, [r7, #20]
 80afb2c:	2b02      	cmp	r3, #2
 80afb2e:	d907      	bls.n	80afb40 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80afb30:	68fb      	ldr	r3, [r7, #12]
 80afb32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80afb34:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80afb38:	68fb      	ldr	r3, [r7, #12]
 80afb3a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80afb3c:	2301      	movs	r3, #1
 80afb3e:	e09e      	b.n	80afc7e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80afb40:	2201      	movs	r2, #1
 80afb42:	697b      	ldr	r3, [r7, #20]
 80afb44:	409a      	lsls	r2, r3
 80afb46:	683b      	ldr	r3, [r7, #0]
 80afb48:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80afb4a:	68bb      	ldr	r3, [r7, #8]
 80afb4c:	689b      	ldr	r3, [r3, #8]
 80afb4e:	2b00      	cmp	r3, #0
 80afb50:	d10d      	bne.n	80afb6e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80afb52:	68bb      	ldr	r3, [r7, #8]
 80afb54:	681b      	ldr	r3, [r3, #0]
 80afb56:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80afb58:	68bb      	ldr	r3, [r7, #8]
 80afb5a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80afb5c:	68f9      	ldr	r1, [r7, #12]
 80afb5e:	6809      	ldr	r1, [r1, #0]
 80afb60:	431a      	orrs	r2, r3
 80afb62:	697b      	ldr	r3, [r7, #20]
 80afb64:	3318      	adds	r3, #24
 80afb66:	011b      	lsls	r3, r3, #4
 80afb68:	440b      	add	r3, r1
 80afb6a:	601a      	str	r2, [r3, #0]
 80afb6c:	e00f      	b.n	80afb8e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80afb6e:	68bb      	ldr	r3, [r7, #8]
 80afb70:	685b      	ldr	r3, [r3, #4]
 80afb72:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80afb74:	68bb      	ldr	r3, [r7, #8]
 80afb76:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80afb78:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80afb7a:	68bb      	ldr	r3, [r7, #8]
 80afb7c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80afb7e:	68f9      	ldr	r1, [r7, #12]
 80afb80:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80afb82:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80afb84:	697b      	ldr	r3, [r7, #20]
 80afb86:	3318      	adds	r3, #24
 80afb88:	011b      	lsls	r3, r3, #4
 80afb8a:	440b      	add	r3, r1
 80afb8c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80afb8e:	68fb      	ldr	r3, [r7, #12]
 80afb90:	6819      	ldr	r1, [r3, #0]
 80afb92:	68bb      	ldr	r3, [r7, #8]
 80afb94:	691a      	ldr	r2, [r3, #16]
 80afb96:	697b      	ldr	r3, [r7, #20]
 80afb98:	3318      	adds	r3, #24
 80afb9a:	011b      	lsls	r3, r3, #4
 80afb9c:	440b      	add	r3, r1
 80afb9e:	3304      	adds	r3, #4
 80afba0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80afba2:	68bb      	ldr	r3, [r7, #8]
 80afba4:	7d1b      	ldrb	r3, [r3, #20]
 80afba6:	2b01      	cmp	r3, #1
 80afba8:	d111      	bne.n	80afbce <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80afbaa:	68fb      	ldr	r3, [r7, #12]
 80afbac:	681a      	ldr	r2, [r3, #0]
 80afbae:	697b      	ldr	r3, [r7, #20]
 80afbb0:	3318      	adds	r3, #24
 80afbb2:	011b      	lsls	r3, r3, #4
 80afbb4:	4413      	add	r3, r2
 80afbb6:	3304      	adds	r3, #4
 80afbb8:	681b      	ldr	r3, [r3, #0]
 80afbba:	68fa      	ldr	r2, [r7, #12]
 80afbbc:	6811      	ldr	r1, [r2, #0]
 80afbbe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80afbc2:	697b      	ldr	r3, [r7, #20]
 80afbc4:	3318      	adds	r3, #24
 80afbc6:	011b      	lsls	r3, r3, #4
 80afbc8:	440b      	add	r3, r1
 80afbca:	3304      	adds	r3, #4
 80afbcc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80afbce:	687b      	ldr	r3, [r7, #4]
 80afbd0:	3307      	adds	r3, #7
 80afbd2:	781b      	ldrb	r3, [r3, #0]
 80afbd4:	061a      	lsls	r2, r3, #24
 80afbd6:	687b      	ldr	r3, [r7, #4]
 80afbd8:	3306      	adds	r3, #6
 80afbda:	781b      	ldrb	r3, [r3, #0]
 80afbdc:	041b      	lsls	r3, r3, #16
 80afbde:	431a      	orrs	r2, r3
 80afbe0:	687b      	ldr	r3, [r7, #4]
 80afbe2:	3305      	adds	r3, #5
 80afbe4:	781b      	ldrb	r3, [r3, #0]
 80afbe6:	021b      	lsls	r3, r3, #8
 80afbe8:	4313      	orrs	r3, r2
 80afbea:	687a      	ldr	r2, [r7, #4]
 80afbec:	3204      	adds	r2, #4
 80afbee:	7812      	ldrb	r2, [r2, #0]
 80afbf0:	4610      	mov	r0, r2
 80afbf2:	68fa      	ldr	r2, [r7, #12]
 80afbf4:	6811      	ldr	r1, [r2, #0]
 80afbf6:	ea43 0200 	orr.w	r2, r3, r0
 80afbfa:	697b      	ldr	r3, [r7, #20]
 80afbfc:	011b      	lsls	r3, r3, #4
 80afbfe:	440b      	add	r3, r1
 80afc00:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80afc04:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80afc06:	687b      	ldr	r3, [r7, #4]
 80afc08:	3303      	adds	r3, #3
 80afc0a:	781b      	ldrb	r3, [r3, #0]
 80afc0c:	061a      	lsls	r2, r3, #24
 80afc0e:	687b      	ldr	r3, [r7, #4]
 80afc10:	3302      	adds	r3, #2
 80afc12:	781b      	ldrb	r3, [r3, #0]
 80afc14:	041b      	lsls	r3, r3, #16
 80afc16:	431a      	orrs	r2, r3
 80afc18:	687b      	ldr	r3, [r7, #4]
 80afc1a:	3301      	adds	r3, #1
 80afc1c:	781b      	ldrb	r3, [r3, #0]
 80afc1e:	021b      	lsls	r3, r3, #8
 80afc20:	4313      	orrs	r3, r2
 80afc22:	687a      	ldr	r2, [r7, #4]
 80afc24:	7812      	ldrb	r2, [r2, #0]
 80afc26:	4610      	mov	r0, r2
 80afc28:	68fa      	ldr	r2, [r7, #12]
 80afc2a:	6811      	ldr	r1, [r2, #0]
 80afc2c:	ea43 0200 	orr.w	r2, r3, r0
 80afc30:	697b      	ldr	r3, [r7, #20]
 80afc32:	011b      	lsls	r3, r3, #4
 80afc34:	440b      	add	r3, r1
 80afc36:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80afc3a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80afc3c:	68fb      	ldr	r3, [r7, #12]
 80afc3e:	681a      	ldr	r2, [r3, #0]
 80afc40:	697b      	ldr	r3, [r7, #20]
 80afc42:	3318      	adds	r3, #24
 80afc44:	011b      	lsls	r3, r3, #4
 80afc46:	4413      	add	r3, r2
 80afc48:	681b      	ldr	r3, [r3, #0]
 80afc4a:	68fa      	ldr	r2, [r7, #12]
 80afc4c:	6811      	ldr	r1, [r2, #0]
 80afc4e:	f043 0201 	orr.w	r2, r3, #1
 80afc52:	697b      	ldr	r3, [r7, #20]
 80afc54:	3318      	adds	r3, #24
 80afc56:	011b      	lsls	r3, r3, #4
 80afc58:	440b      	add	r3, r1
 80afc5a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80afc5c:	2300      	movs	r3, #0
 80afc5e:	e00e      	b.n	80afc7e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80afc60:	68fb      	ldr	r3, [r7, #12]
 80afc62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80afc64:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80afc68:	68fb      	ldr	r3, [r7, #12]
 80afc6a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80afc6c:	2301      	movs	r3, #1
 80afc6e:	e006      	b.n	80afc7e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80afc70:	68fb      	ldr	r3, [r7, #12]
 80afc72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80afc74:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80afc78:	68fb      	ldr	r3, [r7, #12]
 80afc7a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80afc7c:	2301      	movs	r3, #1
  }
}
 80afc7e:	4618      	mov	r0, r3
 80afc80:	3724      	adds	r7, #36	; 0x24
 80afc82:	46bd      	mov	sp, r7
 80afc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 80afc88:	4770      	bx	lr

080afc8a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80afc8a:	b480      	push	{r7}
 80afc8c:	b087      	sub	sp, #28
 80afc8e:	af00      	add	r7, sp, #0
 80afc90:	60f8      	str	r0, [r7, #12]
 80afc92:	60b9      	str	r1, [r7, #8]
 80afc94:	607a      	str	r2, [r7, #4]
 80afc96:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80afc98:	68fb      	ldr	r3, [r7, #12]
 80afc9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 80afc9e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80afca0:	7dfb      	ldrb	r3, [r7, #23]
 80afca2:	2b01      	cmp	r3, #1
 80afca4:	d003      	beq.n	80afcae <HAL_CAN_GetRxMessage+0x24>
 80afca6:	7dfb      	ldrb	r3, [r7, #23]
 80afca8:	2b02      	cmp	r3, #2
 80afcaa:	f040 80f3 	bne.w	80afe94 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80afcae:	68bb      	ldr	r3, [r7, #8]
 80afcb0:	2b00      	cmp	r3, #0
 80afcb2:	d10e      	bne.n	80afcd2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80afcb4:	68fb      	ldr	r3, [r7, #12]
 80afcb6:	681b      	ldr	r3, [r3, #0]
 80afcb8:	68db      	ldr	r3, [r3, #12]
 80afcba:	f003 0303 	and.w	r3, r3, #3
 80afcbe:	2b00      	cmp	r3, #0
 80afcc0:	d116      	bne.n	80afcf0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80afcc2:	68fb      	ldr	r3, [r7, #12]
 80afcc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80afcc6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80afcca:	68fb      	ldr	r3, [r7, #12]
 80afccc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80afcce:	2301      	movs	r3, #1
 80afcd0:	e0e7      	b.n	80afea2 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80afcd2:	68fb      	ldr	r3, [r7, #12]
 80afcd4:	681b      	ldr	r3, [r3, #0]
 80afcd6:	691b      	ldr	r3, [r3, #16]
 80afcd8:	f003 0303 	and.w	r3, r3, #3
 80afcdc:	2b00      	cmp	r3, #0
 80afcde:	d107      	bne.n	80afcf0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80afce0:	68fb      	ldr	r3, [r7, #12]
 80afce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80afce4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80afce8:	68fb      	ldr	r3, [r7, #12]
 80afcea:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80afcec:	2301      	movs	r3, #1
 80afcee:	e0d8      	b.n	80afea2 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80afcf0:	68fb      	ldr	r3, [r7, #12]
 80afcf2:	681a      	ldr	r2, [r3, #0]
 80afcf4:	68bb      	ldr	r3, [r7, #8]
 80afcf6:	331b      	adds	r3, #27
 80afcf8:	011b      	lsls	r3, r3, #4
 80afcfa:	4413      	add	r3, r2
 80afcfc:	681b      	ldr	r3, [r3, #0]
 80afcfe:	f003 0204 	and.w	r2, r3, #4
 80afd02:	687b      	ldr	r3, [r7, #4]
 80afd04:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80afd06:	687b      	ldr	r3, [r7, #4]
 80afd08:	689b      	ldr	r3, [r3, #8]
 80afd0a:	2b00      	cmp	r3, #0
 80afd0c:	d10c      	bne.n	80afd28 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80afd0e:	68fb      	ldr	r3, [r7, #12]
 80afd10:	681a      	ldr	r2, [r3, #0]
 80afd12:	68bb      	ldr	r3, [r7, #8]
 80afd14:	331b      	adds	r3, #27
 80afd16:	011b      	lsls	r3, r3, #4
 80afd18:	4413      	add	r3, r2
 80afd1a:	681b      	ldr	r3, [r3, #0]
 80afd1c:	0d5b      	lsrs	r3, r3, #21
 80afd1e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80afd22:	687b      	ldr	r3, [r7, #4]
 80afd24:	601a      	str	r2, [r3, #0]
 80afd26:	e00b      	b.n	80afd40 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80afd28:	68fb      	ldr	r3, [r7, #12]
 80afd2a:	681a      	ldr	r2, [r3, #0]
 80afd2c:	68bb      	ldr	r3, [r7, #8]
 80afd2e:	331b      	adds	r3, #27
 80afd30:	011b      	lsls	r3, r3, #4
 80afd32:	4413      	add	r3, r2
 80afd34:	681b      	ldr	r3, [r3, #0]
 80afd36:	08db      	lsrs	r3, r3, #3
 80afd38:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80afd3c:	687b      	ldr	r3, [r7, #4]
 80afd3e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80afd40:	68fb      	ldr	r3, [r7, #12]
 80afd42:	681a      	ldr	r2, [r3, #0]
 80afd44:	68bb      	ldr	r3, [r7, #8]
 80afd46:	331b      	adds	r3, #27
 80afd48:	011b      	lsls	r3, r3, #4
 80afd4a:	4413      	add	r3, r2
 80afd4c:	681b      	ldr	r3, [r3, #0]
 80afd4e:	f003 0202 	and.w	r2, r3, #2
 80afd52:	687b      	ldr	r3, [r7, #4]
 80afd54:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80afd56:	68fb      	ldr	r3, [r7, #12]
 80afd58:	681a      	ldr	r2, [r3, #0]
 80afd5a:	68bb      	ldr	r3, [r7, #8]
 80afd5c:	331b      	adds	r3, #27
 80afd5e:	011b      	lsls	r3, r3, #4
 80afd60:	4413      	add	r3, r2
 80afd62:	3304      	adds	r3, #4
 80afd64:	681b      	ldr	r3, [r3, #0]
 80afd66:	f003 020f 	and.w	r2, r3, #15
 80afd6a:	687b      	ldr	r3, [r7, #4]
 80afd6c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80afd6e:	68fb      	ldr	r3, [r7, #12]
 80afd70:	681a      	ldr	r2, [r3, #0]
 80afd72:	68bb      	ldr	r3, [r7, #8]
 80afd74:	331b      	adds	r3, #27
 80afd76:	011b      	lsls	r3, r3, #4
 80afd78:	4413      	add	r3, r2
 80afd7a:	3304      	adds	r3, #4
 80afd7c:	681b      	ldr	r3, [r3, #0]
 80afd7e:	0a1b      	lsrs	r3, r3, #8
 80afd80:	b2da      	uxtb	r2, r3
 80afd82:	687b      	ldr	r3, [r7, #4]
 80afd84:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80afd86:	68fb      	ldr	r3, [r7, #12]
 80afd88:	681a      	ldr	r2, [r3, #0]
 80afd8a:	68bb      	ldr	r3, [r7, #8]
 80afd8c:	331b      	adds	r3, #27
 80afd8e:	011b      	lsls	r3, r3, #4
 80afd90:	4413      	add	r3, r2
 80afd92:	3304      	adds	r3, #4
 80afd94:	681b      	ldr	r3, [r3, #0]
 80afd96:	0c1b      	lsrs	r3, r3, #16
 80afd98:	b29a      	uxth	r2, r3
 80afd9a:	687b      	ldr	r3, [r7, #4]
 80afd9c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80afd9e:	68fb      	ldr	r3, [r7, #12]
 80afda0:	681a      	ldr	r2, [r3, #0]
 80afda2:	68bb      	ldr	r3, [r7, #8]
 80afda4:	011b      	lsls	r3, r3, #4
 80afda6:	4413      	add	r3, r2
 80afda8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80afdac:	681b      	ldr	r3, [r3, #0]
 80afdae:	b2da      	uxtb	r2, r3
 80afdb0:	683b      	ldr	r3, [r7, #0]
 80afdb2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80afdb4:	68fb      	ldr	r3, [r7, #12]
 80afdb6:	681a      	ldr	r2, [r3, #0]
 80afdb8:	68bb      	ldr	r3, [r7, #8]
 80afdba:	011b      	lsls	r3, r3, #4
 80afdbc:	4413      	add	r3, r2
 80afdbe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80afdc2:	681b      	ldr	r3, [r3, #0]
 80afdc4:	0a1a      	lsrs	r2, r3, #8
 80afdc6:	683b      	ldr	r3, [r7, #0]
 80afdc8:	3301      	adds	r3, #1
 80afdca:	b2d2      	uxtb	r2, r2
 80afdcc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80afdce:	68fb      	ldr	r3, [r7, #12]
 80afdd0:	681a      	ldr	r2, [r3, #0]
 80afdd2:	68bb      	ldr	r3, [r7, #8]
 80afdd4:	011b      	lsls	r3, r3, #4
 80afdd6:	4413      	add	r3, r2
 80afdd8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80afddc:	681b      	ldr	r3, [r3, #0]
 80afdde:	0c1a      	lsrs	r2, r3, #16
 80afde0:	683b      	ldr	r3, [r7, #0]
 80afde2:	3302      	adds	r3, #2
 80afde4:	b2d2      	uxtb	r2, r2
 80afde6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80afde8:	68fb      	ldr	r3, [r7, #12]
 80afdea:	681a      	ldr	r2, [r3, #0]
 80afdec:	68bb      	ldr	r3, [r7, #8]
 80afdee:	011b      	lsls	r3, r3, #4
 80afdf0:	4413      	add	r3, r2
 80afdf2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80afdf6:	681b      	ldr	r3, [r3, #0]
 80afdf8:	0e1a      	lsrs	r2, r3, #24
 80afdfa:	683b      	ldr	r3, [r7, #0]
 80afdfc:	3303      	adds	r3, #3
 80afdfe:	b2d2      	uxtb	r2, r2
 80afe00:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80afe02:	68fb      	ldr	r3, [r7, #12]
 80afe04:	681a      	ldr	r2, [r3, #0]
 80afe06:	68bb      	ldr	r3, [r7, #8]
 80afe08:	011b      	lsls	r3, r3, #4
 80afe0a:	4413      	add	r3, r2
 80afe0c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80afe10:	681a      	ldr	r2, [r3, #0]
 80afe12:	683b      	ldr	r3, [r7, #0]
 80afe14:	3304      	adds	r3, #4
 80afe16:	b2d2      	uxtb	r2, r2
 80afe18:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80afe1a:	68fb      	ldr	r3, [r7, #12]
 80afe1c:	681a      	ldr	r2, [r3, #0]
 80afe1e:	68bb      	ldr	r3, [r7, #8]
 80afe20:	011b      	lsls	r3, r3, #4
 80afe22:	4413      	add	r3, r2
 80afe24:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80afe28:	681b      	ldr	r3, [r3, #0]
 80afe2a:	0a1a      	lsrs	r2, r3, #8
 80afe2c:	683b      	ldr	r3, [r7, #0]
 80afe2e:	3305      	adds	r3, #5
 80afe30:	b2d2      	uxtb	r2, r2
 80afe32:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80afe34:	68fb      	ldr	r3, [r7, #12]
 80afe36:	681a      	ldr	r2, [r3, #0]
 80afe38:	68bb      	ldr	r3, [r7, #8]
 80afe3a:	011b      	lsls	r3, r3, #4
 80afe3c:	4413      	add	r3, r2
 80afe3e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80afe42:	681b      	ldr	r3, [r3, #0]
 80afe44:	0c1a      	lsrs	r2, r3, #16
 80afe46:	683b      	ldr	r3, [r7, #0]
 80afe48:	3306      	adds	r3, #6
 80afe4a:	b2d2      	uxtb	r2, r2
 80afe4c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80afe4e:	68fb      	ldr	r3, [r7, #12]
 80afe50:	681a      	ldr	r2, [r3, #0]
 80afe52:	68bb      	ldr	r3, [r7, #8]
 80afe54:	011b      	lsls	r3, r3, #4
 80afe56:	4413      	add	r3, r2
 80afe58:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80afe5c:	681b      	ldr	r3, [r3, #0]
 80afe5e:	0e1a      	lsrs	r2, r3, #24
 80afe60:	683b      	ldr	r3, [r7, #0]
 80afe62:	3307      	adds	r3, #7
 80afe64:	b2d2      	uxtb	r2, r2
 80afe66:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80afe68:	68bb      	ldr	r3, [r7, #8]
 80afe6a:	2b00      	cmp	r3, #0
 80afe6c:	d108      	bne.n	80afe80 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80afe6e:	68fb      	ldr	r3, [r7, #12]
 80afe70:	681b      	ldr	r3, [r3, #0]
 80afe72:	68da      	ldr	r2, [r3, #12]
 80afe74:	68fb      	ldr	r3, [r7, #12]
 80afe76:	681b      	ldr	r3, [r3, #0]
 80afe78:	f042 0220 	orr.w	r2, r2, #32
 80afe7c:	60da      	str	r2, [r3, #12]
 80afe7e:	e007      	b.n	80afe90 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80afe80:	68fb      	ldr	r3, [r7, #12]
 80afe82:	681b      	ldr	r3, [r3, #0]
 80afe84:	691a      	ldr	r2, [r3, #16]
 80afe86:	68fb      	ldr	r3, [r7, #12]
 80afe88:	681b      	ldr	r3, [r3, #0]
 80afe8a:	f042 0220 	orr.w	r2, r2, #32
 80afe8e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80afe90:	2300      	movs	r3, #0
 80afe92:	e006      	b.n	80afea2 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80afe94:	68fb      	ldr	r3, [r7, #12]
 80afe96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80afe98:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80afe9c:	68fb      	ldr	r3, [r7, #12]
 80afe9e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80afea0:	2301      	movs	r3, #1
  }
}
 80afea2:	4618      	mov	r0, r3
 80afea4:	371c      	adds	r7, #28
 80afea6:	46bd      	mov	sp, r7
 80afea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80afeac:	4770      	bx	lr

080afeae <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80afeae:	b480      	push	{r7}
 80afeb0:	b085      	sub	sp, #20
 80afeb2:	af00      	add	r7, sp, #0
 80afeb4:	6078      	str	r0, [r7, #4]
 80afeb6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80afeb8:	687b      	ldr	r3, [r7, #4]
 80afeba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80afebe:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80afec0:	7bfb      	ldrb	r3, [r7, #15]
 80afec2:	2b01      	cmp	r3, #1
 80afec4:	d002      	beq.n	80afecc <HAL_CAN_ActivateNotification+0x1e>
 80afec6:	7bfb      	ldrb	r3, [r7, #15]
 80afec8:	2b02      	cmp	r3, #2
 80afeca:	d109      	bne.n	80afee0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80afecc:	687b      	ldr	r3, [r7, #4]
 80afece:	681b      	ldr	r3, [r3, #0]
 80afed0:	6959      	ldr	r1, [r3, #20]
 80afed2:	687b      	ldr	r3, [r7, #4]
 80afed4:	681b      	ldr	r3, [r3, #0]
 80afed6:	683a      	ldr	r2, [r7, #0]
 80afed8:	430a      	orrs	r2, r1
 80afeda:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80afedc:	2300      	movs	r3, #0
 80afede:	e006      	b.n	80afeee <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80afee0:	687b      	ldr	r3, [r7, #4]
 80afee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80afee4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80afee8:	687b      	ldr	r3, [r7, #4]
 80afeea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80afeec:	2301      	movs	r3, #1
  }
}
 80afeee:	4618      	mov	r0, r3
 80afef0:	3714      	adds	r7, #20
 80afef2:	46bd      	mov	sp, r7
 80afef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80afef8:	4770      	bx	lr

080afefa <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80afefa:	b580      	push	{r7, lr}
 80afefc:	b08a      	sub	sp, #40	; 0x28
 80afefe:	af00      	add	r7, sp, #0
 80aff00:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80aff02:	2300      	movs	r3, #0
 80aff04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80aff06:	687b      	ldr	r3, [r7, #4]
 80aff08:	681b      	ldr	r3, [r3, #0]
 80aff0a:	695b      	ldr	r3, [r3, #20]
 80aff0c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80aff0e:	687b      	ldr	r3, [r7, #4]
 80aff10:	681b      	ldr	r3, [r3, #0]
 80aff12:	685b      	ldr	r3, [r3, #4]
 80aff14:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80aff16:	687b      	ldr	r3, [r7, #4]
 80aff18:	681b      	ldr	r3, [r3, #0]
 80aff1a:	689b      	ldr	r3, [r3, #8]
 80aff1c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80aff1e:	687b      	ldr	r3, [r7, #4]
 80aff20:	681b      	ldr	r3, [r3, #0]
 80aff22:	68db      	ldr	r3, [r3, #12]
 80aff24:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80aff26:	687b      	ldr	r3, [r7, #4]
 80aff28:	681b      	ldr	r3, [r3, #0]
 80aff2a:	691b      	ldr	r3, [r3, #16]
 80aff2c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80aff2e:	687b      	ldr	r3, [r7, #4]
 80aff30:	681b      	ldr	r3, [r3, #0]
 80aff32:	699b      	ldr	r3, [r3, #24]
 80aff34:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80aff36:	6a3b      	ldr	r3, [r7, #32]
 80aff38:	f003 0301 	and.w	r3, r3, #1
 80aff3c:	2b00      	cmp	r3, #0
 80aff3e:	d07c      	beq.n	80b003a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80aff40:	69bb      	ldr	r3, [r7, #24]
 80aff42:	f003 0301 	and.w	r3, r3, #1
 80aff46:	2b00      	cmp	r3, #0
 80aff48:	d023      	beq.n	80aff92 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80aff4a:	687b      	ldr	r3, [r7, #4]
 80aff4c:	681b      	ldr	r3, [r3, #0]
 80aff4e:	2201      	movs	r2, #1
 80aff50:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80aff52:	69bb      	ldr	r3, [r7, #24]
 80aff54:	f003 0302 	and.w	r3, r3, #2
 80aff58:	2b00      	cmp	r3, #0
 80aff5a:	d003      	beq.n	80aff64 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80aff5c:	6878      	ldr	r0, [r7, #4]
 80aff5e:	f000 f983 	bl	80b0268 <HAL_CAN_TxMailbox0CompleteCallback>
 80aff62:	e016      	b.n	80aff92 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80aff64:	69bb      	ldr	r3, [r7, #24]
 80aff66:	f003 0304 	and.w	r3, r3, #4
 80aff6a:	2b00      	cmp	r3, #0
 80aff6c:	d004      	beq.n	80aff78 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80aff6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80aff70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80aff74:	627b      	str	r3, [r7, #36]	; 0x24
 80aff76:	e00c      	b.n	80aff92 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80aff78:	69bb      	ldr	r3, [r7, #24]
 80aff7a:	f003 0308 	and.w	r3, r3, #8
 80aff7e:	2b00      	cmp	r3, #0
 80aff80:	d004      	beq.n	80aff8c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80aff82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80aff84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80aff88:	627b      	str	r3, [r7, #36]	; 0x24
 80aff8a:	e002      	b.n	80aff92 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80aff8c:	6878      	ldr	r0, [r7, #4]
 80aff8e:	f000 f989 	bl	80b02a4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80aff92:	69bb      	ldr	r3, [r7, #24]
 80aff94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80aff98:	2b00      	cmp	r3, #0
 80aff9a:	d024      	beq.n	80affe6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80aff9c:	687b      	ldr	r3, [r7, #4]
 80aff9e:	681b      	ldr	r3, [r3, #0]
 80affa0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80affa4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80affa6:	69bb      	ldr	r3, [r7, #24]
 80affa8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80affac:	2b00      	cmp	r3, #0
 80affae:	d003      	beq.n	80affb8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80affb0:	6878      	ldr	r0, [r7, #4]
 80affb2:	f000 f963 	bl	80b027c <HAL_CAN_TxMailbox1CompleteCallback>
 80affb6:	e016      	b.n	80affe6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80affb8:	69bb      	ldr	r3, [r7, #24]
 80affba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80affbe:	2b00      	cmp	r3, #0
 80affc0:	d004      	beq.n	80affcc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80affc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80affc4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80affc8:	627b      	str	r3, [r7, #36]	; 0x24
 80affca:	e00c      	b.n	80affe6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80affcc:	69bb      	ldr	r3, [r7, #24]
 80affce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80affd2:	2b00      	cmp	r3, #0
 80affd4:	d004      	beq.n	80affe0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80affd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80affd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80affdc:	627b      	str	r3, [r7, #36]	; 0x24
 80affde:	e002      	b.n	80affe6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80affe0:	6878      	ldr	r0, [r7, #4]
 80affe2:	f000 f969 	bl	80b02b8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80affe6:	69bb      	ldr	r3, [r7, #24]
 80affe8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80affec:	2b00      	cmp	r3, #0
 80affee:	d024      	beq.n	80b003a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80afff0:	687b      	ldr	r3, [r7, #4]
 80afff2:	681b      	ldr	r3, [r3, #0]
 80afff4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80afff8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80afffa:	69bb      	ldr	r3, [r7, #24]
 80afffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80b0000:	2b00      	cmp	r3, #0
 80b0002:	d003      	beq.n	80b000c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80b0004:	6878      	ldr	r0, [r7, #4]
 80b0006:	f000 f943 	bl	80b0290 <HAL_CAN_TxMailbox2CompleteCallback>
 80b000a:	e016      	b.n	80b003a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80b000c:	69bb      	ldr	r3, [r7, #24]
 80b000e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80b0012:	2b00      	cmp	r3, #0
 80b0014:	d004      	beq.n	80b0020 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80b0016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b0018:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80b001c:	627b      	str	r3, [r7, #36]	; 0x24
 80b001e:	e00c      	b.n	80b003a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80b0020:	69bb      	ldr	r3, [r7, #24]
 80b0022:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80b0026:	2b00      	cmp	r3, #0
 80b0028:	d004      	beq.n	80b0034 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80b002a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b002c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80b0030:	627b      	str	r3, [r7, #36]	; 0x24
 80b0032:	e002      	b.n	80b003a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80b0034:	6878      	ldr	r0, [r7, #4]
 80b0036:	f000 f949 	bl	80b02cc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80b003a:	6a3b      	ldr	r3, [r7, #32]
 80b003c:	f003 0308 	and.w	r3, r3, #8
 80b0040:	2b00      	cmp	r3, #0
 80b0042:	d00c      	beq.n	80b005e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80b0044:	697b      	ldr	r3, [r7, #20]
 80b0046:	f003 0310 	and.w	r3, r3, #16
 80b004a:	2b00      	cmp	r3, #0
 80b004c:	d007      	beq.n	80b005e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80b004e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b0050:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80b0054:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80b0056:	687b      	ldr	r3, [r7, #4]
 80b0058:	681b      	ldr	r3, [r3, #0]
 80b005a:	2210      	movs	r2, #16
 80b005c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80b005e:	6a3b      	ldr	r3, [r7, #32]
 80b0060:	f003 0304 	and.w	r3, r3, #4
 80b0064:	2b00      	cmp	r3, #0
 80b0066:	d00b      	beq.n	80b0080 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80b0068:	697b      	ldr	r3, [r7, #20]
 80b006a:	f003 0308 	and.w	r3, r3, #8
 80b006e:	2b00      	cmp	r3, #0
 80b0070:	d006      	beq.n	80b0080 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80b0072:	687b      	ldr	r3, [r7, #4]
 80b0074:	681b      	ldr	r3, [r3, #0]
 80b0076:	2208      	movs	r2, #8
 80b0078:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80b007a:	6878      	ldr	r0, [r7, #4]
 80b007c:	f000 f930 	bl	80b02e0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80b0080:	6a3b      	ldr	r3, [r7, #32]
 80b0082:	f003 0302 	and.w	r3, r3, #2
 80b0086:	2b00      	cmp	r3, #0
 80b0088:	d009      	beq.n	80b009e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80b008a:	687b      	ldr	r3, [r7, #4]
 80b008c:	681b      	ldr	r3, [r3, #0]
 80b008e:	68db      	ldr	r3, [r3, #12]
 80b0090:	f003 0303 	and.w	r3, r3, #3
 80b0094:	2b00      	cmp	r3, #0
 80b0096:	d002      	beq.n	80b009e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80b0098:	6878      	ldr	r0, [r7, #4]
 80b009a:	f7f8 fcf1 	bl	80a8a80 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80b009e:	6a3b      	ldr	r3, [r7, #32]
 80b00a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80b00a4:	2b00      	cmp	r3, #0
 80b00a6:	d00c      	beq.n	80b00c2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80b00a8:	693b      	ldr	r3, [r7, #16]
 80b00aa:	f003 0310 	and.w	r3, r3, #16
 80b00ae:	2b00      	cmp	r3, #0
 80b00b0:	d007      	beq.n	80b00c2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80b00b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b00b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80b00b8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80b00ba:	687b      	ldr	r3, [r7, #4]
 80b00bc:	681b      	ldr	r3, [r3, #0]
 80b00be:	2210      	movs	r2, #16
 80b00c0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80b00c2:	6a3b      	ldr	r3, [r7, #32]
 80b00c4:	f003 0320 	and.w	r3, r3, #32
 80b00c8:	2b00      	cmp	r3, #0
 80b00ca:	d00b      	beq.n	80b00e4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80b00cc:	693b      	ldr	r3, [r7, #16]
 80b00ce:	f003 0308 	and.w	r3, r3, #8
 80b00d2:	2b00      	cmp	r3, #0
 80b00d4:	d006      	beq.n	80b00e4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80b00d6:	687b      	ldr	r3, [r7, #4]
 80b00d8:	681b      	ldr	r3, [r3, #0]
 80b00da:	2208      	movs	r2, #8
 80b00dc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80b00de:	6878      	ldr	r0, [r7, #4]
 80b00e0:	f000 f912 	bl	80b0308 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80b00e4:	6a3b      	ldr	r3, [r7, #32]
 80b00e6:	f003 0310 	and.w	r3, r3, #16
 80b00ea:	2b00      	cmp	r3, #0
 80b00ec:	d009      	beq.n	80b0102 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80b00ee:	687b      	ldr	r3, [r7, #4]
 80b00f0:	681b      	ldr	r3, [r3, #0]
 80b00f2:	691b      	ldr	r3, [r3, #16]
 80b00f4:	f003 0303 	and.w	r3, r3, #3
 80b00f8:	2b00      	cmp	r3, #0
 80b00fa:	d002      	beq.n	80b0102 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80b00fc:	6878      	ldr	r0, [r7, #4]
 80b00fe:	f000 f8f9 	bl	80b02f4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80b0102:	6a3b      	ldr	r3, [r7, #32]
 80b0104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80b0108:	2b00      	cmp	r3, #0
 80b010a:	d00b      	beq.n	80b0124 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80b010c:	69fb      	ldr	r3, [r7, #28]
 80b010e:	f003 0310 	and.w	r3, r3, #16
 80b0112:	2b00      	cmp	r3, #0
 80b0114:	d006      	beq.n	80b0124 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80b0116:	687b      	ldr	r3, [r7, #4]
 80b0118:	681b      	ldr	r3, [r3, #0]
 80b011a:	2210      	movs	r2, #16
 80b011c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80b011e:	6878      	ldr	r0, [r7, #4]
 80b0120:	f000 f8fc 	bl	80b031c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80b0124:	6a3b      	ldr	r3, [r7, #32]
 80b0126:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80b012a:	2b00      	cmp	r3, #0
 80b012c:	d00b      	beq.n	80b0146 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80b012e:	69fb      	ldr	r3, [r7, #28]
 80b0130:	f003 0308 	and.w	r3, r3, #8
 80b0134:	2b00      	cmp	r3, #0
 80b0136:	d006      	beq.n	80b0146 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80b0138:	687b      	ldr	r3, [r7, #4]
 80b013a:	681b      	ldr	r3, [r3, #0]
 80b013c:	2208      	movs	r2, #8
 80b013e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80b0140:	6878      	ldr	r0, [r7, #4]
 80b0142:	f000 f8f5 	bl	80b0330 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80b0146:	6a3b      	ldr	r3, [r7, #32]
 80b0148:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80b014c:	2b00      	cmp	r3, #0
 80b014e:	d07b      	beq.n	80b0248 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80b0150:	69fb      	ldr	r3, [r7, #28]
 80b0152:	f003 0304 	and.w	r3, r3, #4
 80b0156:	2b00      	cmp	r3, #0
 80b0158:	d072      	beq.n	80b0240 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80b015a:	6a3b      	ldr	r3, [r7, #32]
 80b015c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80b0160:	2b00      	cmp	r3, #0
 80b0162:	d008      	beq.n	80b0176 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80b0164:	68fb      	ldr	r3, [r7, #12]
 80b0166:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80b016a:	2b00      	cmp	r3, #0
 80b016c:	d003      	beq.n	80b0176 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80b016e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b0170:	f043 0301 	orr.w	r3, r3, #1
 80b0174:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80b0176:	6a3b      	ldr	r3, [r7, #32]
 80b0178:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80b017c:	2b00      	cmp	r3, #0
 80b017e:	d008      	beq.n	80b0192 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80b0180:	68fb      	ldr	r3, [r7, #12]
 80b0182:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80b0186:	2b00      	cmp	r3, #0
 80b0188:	d003      	beq.n	80b0192 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80b018a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b018c:	f043 0302 	orr.w	r3, r3, #2
 80b0190:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80b0192:	6a3b      	ldr	r3, [r7, #32]
 80b0194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80b0198:	2b00      	cmp	r3, #0
 80b019a:	d008      	beq.n	80b01ae <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80b019c:	68fb      	ldr	r3, [r7, #12]
 80b019e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80b01a2:	2b00      	cmp	r3, #0
 80b01a4:	d003      	beq.n	80b01ae <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80b01a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b01a8:	f043 0304 	orr.w	r3, r3, #4
 80b01ac:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80b01ae:	6a3b      	ldr	r3, [r7, #32]
 80b01b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80b01b4:	2b00      	cmp	r3, #0
 80b01b6:	d043      	beq.n	80b0240 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80b01b8:	68fb      	ldr	r3, [r7, #12]
 80b01ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80b01be:	2b00      	cmp	r3, #0
 80b01c0:	d03e      	beq.n	80b0240 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80b01c2:	68fb      	ldr	r3, [r7, #12]
 80b01c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80b01c8:	2b60      	cmp	r3, #96	; 0x60
 80b01ca:	d02b      	beq.n	80b0224 <HAL_CAN_IRQHandler+0x32a>
 80b01cc:	2b60      	cmp	r3, #96	; 0x60
 80b01ce:	d82e      	bhi.n	80b022e <HAL_CAN_IRQHandler+0x334>
 80b01d0:	2b50      	cmp	r3, #80	; 0x50
 80b01d2:	d022      	beq.n	80b021a <HAL_CAN_IRQHandler+0x320>
 80b01d4:	2b50      	cmp	r3, #80	; 0x50
 80b01d6:	d82a      	bhi.n	80b022e <HAL_CAN_IRQHandler+0x334>
 80b01d8:	2b40      	cmp	r3, #64	; 0x40
 80b01da:	d019      	beq.n	80b0210 <HAL_CAN_IRQHandler+0x316>
 80b01dc:	2b40      	cmp	r3, #64	; 0x40
 80b01de:	d826      	bhi.n	80b022e <HAL_CAN_IRQHandler+0x334>
 80b01e0:	2b30      	cmp	r3, #48	; 0x30
 80b01e2:	d010      	beq.n	80b0206 <HAL_CAN_IRQHandler+0x30c>
 80b01e4:	2b30      	cmp	r3, #48	; 0x30
 80b01e6:	d822      	bhi.n	80b022e <HAL_CAN_IRQHandler+0x334>
 80b01e8:	2b10      	cmp	r3, #16
 80b01ea:	d002      	beq.n	80b01f2 <HAL_CAN_IRQHandler+0x2f8>
 80b01ec:	2b20      	cmp	r3, #32
 80b01ee:	d005      	beq.n	80b01fc <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80b01f0:	e01d      	b.n	80b022e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80b01f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b01f4:	f043 0308 	orr.w	r3, r3, #8
 80b01f8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80b01fa:	e019      	b.n	80b0230 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80b01fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b01fe:	f043 0310 	orr.w	r3, r3, #16
 80b0202:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80b0204:	e014      	b.n	80b0230 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80b0206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b0208:	f043 0320 	orr.w	r3, r3, #32
 80b020c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80b020e:	e00f      	b.n	80b0230 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80b0210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b0212:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80b0216:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80b0218:	e00a      	b.n	80b0230 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80b021a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b021c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80b0220:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80b0222:	e005      	b.n	80b0230 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80b0224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b0226:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80b022a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80b022c:	e000      	b.n	80b0230 <HAL_CAN_IRQHandler+0x336>
            break;
 80b022e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80b0230:	687b      	ldr	r3, [r7, #4]
 80b0232:	681b      	ldr	r3, [r3, #0]
 80b0234:	699a      	ldr	r2, [r3, #24]
 80b0236:	687b      	ldr	r3, [r7, #4]
 80b0238:	681b      	ldr	r3, [r3, #0]
 80b023a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80b023e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80b0240:	687b      	ldr	r3, [r7, #4]
 80b0242:	681b      	ldr	r3, [r3, #0]
 80b0244:	2204      	movs	r2, #4
 80b0246:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80b0248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b024a:	2b00      	cmp	r3, #0
 80b024c:	d008      	beq.n	80b0260 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80b024e:	687b      	ldr	r3, [r7, #4]
 80b0250:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80b0252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b0254:	431a      	orrs	r2, r3
 80b0256:	687b      	ldr	r3, [r7, #4]
 80b0258:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80b025a:	6878      	ldr	r0, [r7, #4]
 80b025c:	f7f8 fc5a 	bl	80a8b14 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80b0260:	bf00      	nop
 80b0262:	3728      	adds	r7, #40	; 0x28
 80b0264:	46bd      	mov	sp, r7
 80b0266:	bd80      	pop	{r7, pc}

080b0268 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80b0268:	b480      	push	{r7}
 80b026a:	b083      	sub	sp, #12
 80b026c:	af00      	add	r7, sp, #0
 80b026e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80b0270:	bf00      	nop
 80b0272:	370c      	adds	r7, #12
 80b0274:	46bd      	mov	sp, r7
 80b0276:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b027a:	4770      	bx	lr

080b027c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80b027c:	b480      	push	{r7}
 80b027e:	b083      	sub	sp, #12
 80b0280:	af00      	add	r7, sp, #0
 80b0282:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80b0284:	bf00      	nop
 80b0286:	370c      	adds	r7, #12
 80b0288:	46bd      	mov	sp, r7
 80b028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b028e:	4770      	bx	lr

080b0290 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80b0290:	b480      	push	{r7}
 80b0292:	b083      	sub	sp, #12
 80b0294:	af00      	add	r7, sp, #0
 80b0296:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80b0298:	bf00      	nop
 80b029a:	370c      	adds	r7, #12
 80b029c:	46bd      	mov	sp, r7
 80b029e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b02a2:	4770      	bx	lr

080b02a4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80b02a4:	b480      	push	{r7}
 80b02a6:	b083      	sub	sp, #12
 80b02a8:	af00      	add	r7, sp, #0
 80b02aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80b02ac:	bf00      	nop
 80b02ae:	370c      	adds	r7, #12
 80b02b0:	46bd      	mov	sp, r7
 80b02b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b02b6:	4770      	bx	lr

080b02b8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80b02b8:	b480      	push	{r7}
 80b02ba:	b083      	sub	sp, #12
 80b02bc:	af00      	add	r7, sp, #0
 80b02be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80b02c0:	bf00      	nop
 80b02c2:	370c      	adds	r7, #12
 80b02c4:	46bd      	mov	sp, r7
 80b02c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b02ca:	4770      	bx	lr

080b02cc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80b02cc:	b480      	push	{r7}
 80b02ce:	b083      	sub	sp, #12
 80b02d0:	af00      	add	r7, sp, #0
 80b02d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80b02d4:	bf00      	nop
 80b02d6:	370c      	adds	r7, #12
 80b02d8:	46bd      	mov	sp, r7
 80b02da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b02de:	4770      	bx	lr

080b02e0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80b02e0:	b480      	push	{r7}
 80b02e2:	b083      	sub	sp, #12
 80b02e4:	af00      	add	r7, sp, #0
 80b02e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80b02e8:	bf00      	nop
 80b02ea:	370c      	adds	r7, #12
 80b02ec:	46bd      	mov	sp, r7
 80b02ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b02f2:	4770      	bx	lr

080b02f4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80b02f4:	b480      	push	{r7}
 80b02f6:	b083      	sub	sp, #12
 80b02f8:	af00      	add	r7, sp, #0
 80b02fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80b02fc:	bf00      	nop
 80b02fe:	370c      	adds	r7, #12
 80b0300:	46bd      	mov	sp, r7
 80b0302:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b0306:	4770      	bx	lr

080b0308 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80b0308:	b480      	push	{r7}
 80b030a:	b083      	sub	sp, #12
 80b030c:	af00      	add	r7, sp, #0
 80b030e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80b0310:	bf00      	nop
 80b0312:	370c      	adds	r7, #12
 80b0314:	46bd      	mov	sp, r7
 80b0316:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b031a:	4770      	bx	lr

080b031c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80b031c:	b480      	push	{r7}
 80b031e:	b083      	sub	sp, #12
 80b0320:	af00      	add	r7, sp, #0
 80b0322:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80b0324:	bf00      	nop
 80b0326:	370c      	adds	r7, #12
 80b0328:	46bd      	mov	sp, r7
 80b032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b032e:	4770      	bx	lr

080b0330 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80b0330:	b480      	push	{r7}
 80b0332:	b083      	sub	sp, #12
 80b0334:	af00      	add	r7, sp, #0
 80b0336:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80b0338:	bf00      	nop
 80b033a:	370c      	adds	r7, #12
 80b033c:	46bd      	mov	sp, r7
 80b033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b0342:	4770      	bx	lr

080b0344 <__NVIC_SetPriorityGrouping>:
{
 80b0344:	b480      	push	{r7}
 80b0346:	b085      	sub	sp, #20
 80b0348:	af00      	add	r7, sp, #0
 80b034a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80b034c:	687b      	ldr	r3, [r7, #4]
 80b034e:	f003 0307 	and.w	r3, r3, #7
 80b0352:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80b0354:	4b0c      	ldr	r3, [pc, #48]	; (80b0388 <__NVIC_SetPriorityGrouping+0x44>)
 80b0356:	68db      	ldr	r3, [r3, #12]
 80b0358:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80b035a:	68ba      	ldr	r2, [r7, #8]
 80b035c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80b0360:	4013      	ands	r3, r2
 80b0362:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80b0364:	68fb      	ldr	r3, [r7, #12]
 80b0366:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80b0368:	68bb      	ldr	r3, [r7, #8]
 80b036a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80b036c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80b0370:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80b0374:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80b0376:	4a04      	ldr	r2, [pc, #16]	; (80b0388 <__NVIC_SetPriorityGrouping+0x44>)
 80b0378:	68bb      	ldr	r3, [r7, #8]
 80b037a:	60d3      	str	r3, [r2, #12]
}
 80b037c:	bf00      	nop
 80b037e:	3714      	adds	r7, #20
 80b0380:	46bd      	mov	sp, r7
 80b0382:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b0386:	4770      	bx	lr
 80b0388:	e000ed00 	.word	0xe000ed00

080b038c <__NVIC_GetPriorityGrouping>:
{
 80b038c:	b480      	push	{r7}
 80b038e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80b0390:	4b04      	ldr	r3, [pc, #16]	; (80b03a4 <__NVIC_GetPriorityGrouping+0x18>)
 80b0392:	68db      	ldr	r3, [r3, #12]
 80b0394:	0a1b      	lsrs	r3, r3, #8
 80b0396:	f003 0307 	and.w	r3, r3, #7
}
 80b039a:	4618      	mov	r0, r3
 80b039c:	46bd      	mov	sp, r7
 80b039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b03a2:	4770      	bx	lr
 80b03a4:	e000ed00 	.word	0xe000ed00

080b03a8 <__NVIC_EnableIRQ>:
{
 80b03a8:	b480      	push	{r7}
 80b03aa:	b083      	sub	sp, #12
 80b03ac:	af00      	add	r7, sp, #0
 80b03ae:	4603      	mov	r3, r0
 80b03b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80b03b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80b03b6:	2b00      	cmp	r3, #0
 80b03b8:	db0b      	blt.n	80b03d2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80b03ba:	79fb      	ldrb	r3, [r7, #7]
 80b03bc:	f003 021f 	and.w	r2, r3, #31
 80b03c0:	4907      	ldr	r1, [pc, #28]	; (80b03e0 <__NVIC_EnableIRQ+0x38>)
 80b03c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80b03c6:	095b      	lsrs	r3, r3, #5
 80b03c8:	2001      	movs	r0, #1
 80b03ca:	fa00 f202 	lsl.w	r2, r0, r2
 80b03ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80b03d2:	bf00      	nop
 80b03d4:	370c      	adds	r7, #12
 80b03d6:	46bd      	mov	sp, r7
 80b03d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b03dc:	4770      	bx	lr
 80b03de:	bf00      	nop
 80b03e0:	e000e100 	.word	0xe000e100

080b03e4 <__NVIC_DisableIRQ>:
{
 80b03e4:	b480      	push	{r7}
 80b03e6:	b083      	sub	sp, #12
 80b03e8:	af00      	add	r7, sp, #0
 80b03ea:	4603      	mov	r3, r0
 80b03ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80b03ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80b03f2:	2b00      	cmp	r3, #0
 80b03f4:	db12      	blt.n	80b041c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80b03f6:	79fb      	ldrb	r3, [r7, #7]
 80b03f8:	f003 021f 	and.w	r2, r3, #31
 80b03fc:	490a      	ldr	r1, [pc, #40]	; (80b0428 <__NVIC_DisableIRQ+0x44>)
 80b03fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80b0402:	095b      	lsrs	r3, r3, #5
 80b0404:	2001      	movs	r0, #1
 80b0406:	fa00 f202 	lsl.w	r2, r0, r2
 80b040a:	3320      	adds	r3, #32
 80b040c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80b0410:	f3bf 8f4f 	dsb	sy
}
 80b0414:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80b0416:	f3bf 8f6f 	isb	sy
}
 80b041a:	bf00      	nop
}
 80b041c:	bf00      	nop
 80b041e:	370c      	adds	r7, #12
 80b0420:	46bd      	mov	sp, r7
 80b0422:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b0426:	4770      	bx	lr
 80b0428:	e000e100 	.word	0xe000e100

080b042c <__NVIC_SetPriority>:
{
 80b042c:	b480      	push	{r7}
 80b042e:	b083      	sub	sp, #12
 80b0430:	af00      	add	r7, sp, #0
 80b0432:	4603      	mov	r3, r0
 80b0434:	6039      	str	r1, [r7, #0]
 80b0436:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80b0438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80b043c:	2b00      	cmp	r3, #0
 80b043e:	db0a      	blt.n	80b0456 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80b0440:	683b      	ldr	r3, [r7, #0]
 80b0442:	b2da      	uxtb	r2, r3
 80b0444:	490c      	ldr	r1, [pc, #48]	; (80b0478 <__NVIC_SetPriority+0x4c>)
 80b0446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80b044a:	0112      	lsls	r2, r2, #4
 80b044c:	b2d2      	uxtb	r2, r2
 80b044e:	440b      	add	r3, r1
 80b0450:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80b0454:	e00a      	b.n	80b046c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80b0456:	683b      	ldr	r3, [r7, #0]
 80b0458:	b2da      	uxtb	r2, r3
 80b045a:	4908      	ldr	r1, [pc, #32]	; (80b047c <__NVIC_SetPriority+0x50>)
 80b045c:	79fb      	ldrb	r3, [r7, #7]
 80b045e:	f003 030f 	and.w	r3, r3, #15
 80b0462:	3b04      	subs	r3, #4
 80b0464:	0112      	lsls	r2, r2, #4
 80b0466:	b2d2      	uxtb	r2, r2
 80b0468:	440b      	add	r3, r1
 80b046a:	761a      	strb	r2, [r3, #24]
}
 80b046c:	bf00      	nop
 80b046e:	370c      	adds	r7, #12
 80b0470:	46bd      	mov	sp, r7
 80b0472:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b0476:	4770      	bx	lr
 80b0478:	e000e100 	.word	0xe000e100
 80b047c:	e000ed00 	.word	0xe000ed00

080b0480 <NVIC_EncodePriority>:
{
 80b0480:	b480      	push	{r7}
 80b0482:	b089      	sub	sp, #36	; 0x24
 80b0484:	af00      	add	r7, sp, #0
 80b0486:	60f8      	str	r0, [r7, #12]
 80b0488:	60b9      	str	r1, [r7, #8]
 80b048a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80b048c:	68fb      	ldr	r3, [r7, #12]
 80b048e:	f003 0307 	and.w	r3, r3, #7
 80b0492:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80b0494:	69fb      	ldr	r3, [r7, #28]
 80b0496:	f1c3 0307 	rsb	r3, r3, #7
 80b049a:	2b04      	cmp	r3, #4
 80b049c:	bf28      	it	cs
 80b049e:	2304      	movcs	r3, #4
 80b04a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80b04a2:	69fb      	ldr	r3, [r7, #28]
 80b04a4:	3304      	adds	r3, #4
 80b04a6:	2b06      	cmp	r3, #6
 80b04a8:	d902      	bls.n	80b04b0 <NVIC_EncodePriority+0x30>
 80b04aa:	69fb      	ldr	r3, [r7, #28]
 80b04ac:	3b03      	subs	r3, #3
 80b04ae:	e000      	b.n	80b04b2 <NVIC_EncodePriority+0x32>
 80b04b0:	2300      	movs	r3, #0
 80b04b2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80b04b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80b04b8:	69bb      	ldr	r3, [r7, #24]
 80b04ba:	fa02 f303 	lsl.w	r3, r2, r3
 80b04be:	43da      	mvns	r2, r3
 80b04c0:	68bb      	ldr	r3, [r7, #8]
 80b04c2:	401a      	ands	r2, r3
 80b04c4:	697b      	ldr	r3, [r7, #20]
 80b04c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80b04c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80b04cc:	697b      	ldr	r3, [r7, #20]
 80b04ce:	fa01 f303 	lsl.w	r3, r1, r3
 80b04d2:	43d9      	mvns	r1, r3
 80b04d4:	687b      	ldr	r3, [r7, #4]
 80b04d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80b04d8:	4313      	orrs	r3, r2
}
 80b04da:	4618      	mov	r0, r3
 80b04dc:	3724      	adds	r7, #36	; 0x24
 80b04de:	46bd      	mov	sp, r7
 80b04e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b04e4:	4770      	bx	lr

080b04e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80b04e6:	b580      	push	{r7, lr}
 80b04e8:	b082      	sub	sp, #8
 80b04ea:	af00      	add	r7, sp, #0
 80b04ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80b04ee:	6878      	ldr	r0, [r7, #4]
 80b04f0:	f7ff ff28 	bl	80b0344 <__NVIC_SetPriorityGrouping>
}
 80b04f4:	bf00      	nop
 80b04f6:	3708      	adds	r7, #8
 80b04f8:	46bd      	mov	sp, r7
 80b04fa:	bd80      	pop	{r7, pc}

080b04fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80b04fc:	b580      	push	{r7, lr}
 80b04fe:	b086      	sub	sp, #24
 80b0500:	af00      	add	r7, sp, #0
 80b0502:	4603      	mov	r3, r0
 80b0504:	60b9      	str	r1, [r7, #8]
 80b0506:	607a      	str	r2, [r7, #4]
 80b0508:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80b050a:	2300      	movs	r3, #0
 80b050c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80b050e:	f7ff ff3d 	bl	80b038c <__NVIC_GetPriorityGrouping>
 80b0512:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80b0514:	687a      	ldr	r2, [r7, #4]
 80b0516:	68b9      	ldr	r1, [r7, #8]
 80b0518:	6978      	ldr	r0, [r7, #20]
 80b051a:	f7ff ffb1 	bl	80b0480 <NVIC_EncodePriority>
 80b051e:	4602      	mov	r2, r0
 80b0520:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80b0524:	4611      	mov	r1, r2
 80b0526:	4618      	mov	r0, r3
 80b0528:	f7ff ff80 	bl	80b042c <__NVIC_SetPriority>
}
 80b052c:	bf00      	nop
 80b052e:	3718      	adds	r7, #24
 80b0530:	46bd      	mov	sp, r7
 80b0532:	bd80      	pop	{r7, pc}

080b0534 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80b0534:	b580      	push	{r7, lr}
 80b0536:	b082      	sub	sp, #8
 80b0538:	af00      	add	r7, sp, #0
 80b053a:	4603      	mov	r3, r0
 80b053c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80b053e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80b0542:	4618      	mov	r0, r3
 80b0544:	f7ff ff30 	bl	80b03a8 <__NVIC_EnableIRQ>
}
 80b0548:	bf00      	nop
 80b054a:	3708      	adds	r7, #8
 80b054c:	46bd      	mov	sp, r7
 80b054e:	bd80      	pop	{r7, pc}

080b0550 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80b0550:	b580      	push	{r7, lr}
 80b0552:	b082      	sub	sp, #8
 80b0554:	af00      	add	r7, sp, #0
 80b0556:	4603      	mov	r3, r0
 80b0558:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80b055a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80b055e:	4618      	mov	r0, r3
 80b0560:	f7ff ff40 	bl	80b03e4 <__NVIC_DisableIRQ>
}
 80b0564:	bf00      	nop
 80b0566:	3708      	adds	r7, #8
 80b0568:	46bd      	mov	sp, r7
 80b056a:	bd80      	pop	{r7, pc}

080b056c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80b056c:	b580      	push	{r7, lr}
 80b056e:	b086      	sub	sp, #24
 80b0570:	af00      	add	r7, sp, #0
 80b0572:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80b0574:	2300      	movs	r3, #0
 80b0576:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80b0578:	f7ff f85c 	bl	80af634 <HAL_GetTick>
 80b057c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80b057e:	687b      	ldr	r3, [r7, #4]
 80b0580:	2b00      	cmp	r3, #0
 80b0582:	d101      	bne.n	80b0588 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80b0584:	2301      	movs	r3, #1
 80b0586:	e099      	b.n	80b06bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80b0588:	687b      	ldr	r3, [r7, #4]
 80b058a:	2200      	movs	r2, #0
 80b058c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80b0590:	687b      	ldr	r3, [r7, #4]
 80b0592:	2202      	movs	r2, #2
 80b0594:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80b0598:	687b      	ldr	r3, [r7, #4]
 80b059a:	681b      	ldr	r3, [r3, #0]
 80b059c:	681a      	ldr	r2, [r3, #0]
 80b059e:	687b      	ldr	r3, [r7, #4]
 80b05a0:	681b      	ldr	r3, [r3, #0]
 80b05a2:	f022 0201 	bic.w	r2, r2, #1
 80b05a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80b05a8:	e00f      	b.n	80b05ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80b05aa:	f7ff f843 	bl	80af634 <HAL_GetTick>
 80b05ae:	4602      	mov	r2, r0
 80b05b0:	693b      	ldr	r3, [r7, #16]
 80b05b2:	1ad3      	subs	r3, r2, r3
 80b05b4:	2b05      	cmp	r3, #5
 80b05b6:	d908      	bls.n	80b05ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80b05b8:	687b      	ldr	r3, [r7, #4]
 80b05ba:	2220      	movs	r2, #32
 80b05bc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80b05be:	687b      	ldr	r3, [r7, #4]
 80b05c0:	2203      	movs	r2, #3
 80b05c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80b05c6:	2303      	movs	r3, #3
 80b05c8:	e078      	b.n	80b06bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80b05ca:	687b      	ldr	r3, [r7, #4]
 80b05cc:	681b      	ldr	r3, [r3, #0]
 80b05ce:	681b      	ldr	r3, [r3, #0]
 80b05d0:	f003 0301 	and.w	r3, r3, #1
 80b05d4:	2b00      	cmp	r3, #0
 80b05d6:	d1e8      	bne.n	80b05aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80b05d8:	687b      	ldr	r3, [r7, #4]
 80b05da:	681b      	ldr	r3, [r3, #0]
 80b05dc:	681b      	ldr	r3, [r3, #0]
 80b05de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80b05e0:	697a      	ldr	r2, [r7, #20]
 80b05e2:	4b38      	ldr	r3, [pc, #224]	; (80b06c4 <HAL_DMA_Init+0x158>)
 80b05e4:	4013      	ands	r3, r2
 80b05e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80b05e8:	687b      	ldr	r3, [r7, #4]
 80b05ea:	685a      	ldr	r2, [r3, #4]
 80b05ec:	687b      	ldr	r3, [r7, #4]
 80b05ee:	689b      	ldr	r3, [r3, #8]
 80b05f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80b05f2:	687b      	ldr	r3, [r7, #4]
 80b05f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80b05f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80b05f8:	687b      	ldr	r3, [r7, #4]
 80b05fa:	691b      	ldr	r3, [r3, #16]
 80b05fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80b05fe:	687b      	ldr	r3, [r7, #4]
 80b0600:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80b0602:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80b0604:	687b      	ldr	r3, [r7, #4]
 80b0606:	699b      	ldr	r3, [r3, #24]
 80b0608:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80b060a:	687b      	ldr	r3, [r7, #4]
 80b060c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80b060e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80b0610:	687b      	ldr	r3, [r7, #4]
 80b0612:	6a1b      	ldr	r3, [r3, #32]
 80b0614:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80b0616:	697a      	ldr	r2, [r7, #20]
 80b0618:	4313      	orrs	r3, r2
 80b061a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80b061c:	687b      	ldr	r3, [r7, #4]
 80b061e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80b0620:	2b04      	cmp	r3, #4
 80b0622:	d107      	bne.n	80b0634 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80b0624:	687b      	ldr	r3, [r7, #4]
 80b0626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80b0628:	687b      	ldr	r3, [r7, #4]
 80b062a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80b062c:	4313      	orrs	r3, r2
 80b062e:	697a      	ldr	r2, [r7, #20]
 80b0630:	4313      	orrs	r3, r2
 80b0632:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80b0634:	687b      	ldr	r3, [r7, #4]
 80b0636:	681b      	ldr	r3, [r3, #0]
 80b0638:	697a      	ldr	r2, [r7, #20]
 80b063a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80b063c:	687b      	ldr	r3, [r7, #4]
 80b063e:	681b      	ldr	r3, [r3, #0]
 80b0640:	695b      	ldr	r3, [r3, #20]
 80b0642:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80b0644:	697b      	ldr	r3, [r7, #20]
 80b0646:	f023 0307 	bic.w	r3, r3, #7
 80b064a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80b064c:	687b      	ldr	r3, [r7, #4]
 80b064e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80b0650:	697a      	ldr	r2, [r7, #20]
 80b0652:	4313      	orrs	r3, r2
 80b0654:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80b0656:	687b      	ldr	r3, [r7, #4]
 80b0658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80b065a:	2b04      	cmp	r3, #4
 80b065c:	d117      	bne.n	80b068e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80b065e:	687b      	ldr	r3, [r7, #4]
 80b0660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80b0662:	697a      	ldr	r2, [r7, #20]
 80b0664:	4313      	orrs	r3, r2
 80b0666:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80b0668:	687b      	ldr	r3, [r7, #4]
 80b066a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80b066c:	2b00      	cmp	r3, #0
 80b066e:	d00e      	beq.n	80b068e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80b0670:	6878      	ldr	r0, [r7, #4]
 80b0672:	f000 fb01 	bl	80b0c78 <DMA_CheckFifoParam>
 80b0676:	4603      	mov	r3, r0
 80b0678:	2b00      	cmp	r3, #0
 80b067a:	d008      	beq.n	80b068e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80b067c:	687b      	ldr	r3, [r7, #4]
 80b067e:	2240      	movs	r2, #64	; 0x40
 80b0680:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80b0682:	687b      	ldr	r3, [r7, #4]
 80b0684:	2201      	movs	r2, #1
 80b0686:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80b068a:	2301      	movs	r3, #1
 80b068c:	e016      	b.n	80b06bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80b068e:	687b      	ldr	r3, [r7, #4]
 80b0690:	681b      	ldr	r3, [r3, #0]
 80b0692:	697a      	ldr	r2, [r7, #20]
 80b0694:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80b0696:	6878      	ldr	r0, [r7, #4]
 80b0698:	f000 fab8 	bl	80b0c0c <DMA_CalcBaseAndBitshift>
 80b069c:	4603      	mov	r3, r0
 80b069e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80b06a0:	687b      	ldr	r3, [r7, #4]
 80b06a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80b06a4:	223f      	movs	r2, #63	; 0x3f
 80b06a6:	409a      	lsls	r2, r3
 80b06a8:	68fb      	ldr	r3, [r7, #12]
 80b06aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80b06ac:	687b      	ldr	r3, [r7, #4]
 80b06ae:	2200      	movs	r2, #0
 80b06b0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80b06b2:	687b      	ldr	r3, [r7, #4]
 80b06b4:	2201      	movs	r2, #1
 80b06b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80b06ba:	2300      	movs	r3, #0
}
 80b06bc:	4618      	mov	r0, r3
 80b06be:	3718      	adds	r7, #24
 80b06c0:	46bd      	mov	sp, r7
 80b06c2:	bd80      	pop	{r7, pc}
 80b06c4:	f010803f 	.word	0xf010803f

080b06c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80b06c8:	b580      	push	{r7, lr}
 80b06ca:	b086      	sub	sp, #24
 80b06cc:	af00      	add	r7, sp, #0
 80b06ce:	60f8      	str	r0, [r7, #12]
 80b06d0:	60b9      	str	r1, [r7, #8]
 80b06d2:	607a      	str	r2, [r7, #4]
 80b06d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80b06d6:	2300      	movs	r3, #0
 80b06d8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80b06da:	68fb      	ldr	r3, [r7, #12]
 80b06dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80b06de:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80b06e0:	68fb      	ldr	r3, [r7, #12]
 80b06e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80b06e6:	2b01      	cmp	r3, #1
 80b06e8:	d101      	bne.n	80b06ee <HAL_DMA_Start_IT+0x26>
 80b06ea:	2302      	movs	r3, #2
 80b06ec:	e040      	b.n	80b0770 <HAL_DMA_Start_IT+0xa8>
 80b06ee:	68fb      	ldr	r3, [r7, #12]
 80b06f0:	2201      	movs	r2, #1
 80b06f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80b06f6:	68fb      	ldr	r3, [r7, #12]
 80b06f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80b06fc:	b2db      	uxtb	r3, r3
 80b06fe:	2b01      	cmp	r3, #1
 80b0700:	d12f      	bne.n	80b0762 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80b0702:	68fb      	ldr	r3, [r7, #12]
 80b0704:	2202      	movs	r2, #2
 80b0706:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80b070a:	68fb      	ldr	r3, [r7, #12]
 80b070c:	2200      	movs	r2, #0
 80b070e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80b0710:	683b      	ldr	r3, [r7, #0]
 80b0712:	687a      	ldr	r2, [r7, #4]
 80b0714:	68b9      	ldr	r1, [r7, #8]
 80b0716:	68f8      	ldr	r0, [r7, #12]
 80b0718:	f000 fa4a 	bl	80b0bb0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80b071c:	68fb      	ldr	r3, [r7, #12]
 80b071e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80b0720:	223f      	movs	r2, #63	; 0x3f
 80b0722:	409a      	lsls	r2, r3
 80b0724:	693b      	ldr	r3, [r7, #16]
 80b0726:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80b0728:	68fb      	ldr	r3, [r7, #12]
 80b072a:	681b      	ldr	r3, [r3, #0]
 80b072c:	681a      	ldr	r2, [r3, #0]
 80b072e:	68fb      	ldr	r3, [r7, #12]
 80b0730:	681b      	ldr	r3, [r3, #0]
 80b0732:	f042 0216 	orr.w	r2, r2, #22
 80b0736:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80b0738:	68fb      	ldr	r3, [r7, #12]
 80b073a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80b073c:	2b00      	cmp	r3, #0
 80b073e:	d007      	beq.n	80b0750 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80b0740:	68fb      	ldr	r3, [r7, #12]
 80b0742:	681b      	ldr	r3, [r3, #0]
 80b0744:	681a      	ldr	r2, [r3, #0]
 80b0746:	68fb      	ldr	r3, [r7, #12]
 80b0748:	681b      	ldr	r3, [r3, #0]
 80b074a:	f042 0208 	orr.w	r2, r2, #8
 80b074e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80b0750:	68fb      	ldr	r3, [r7, #12]
 80b0752:	681b      	ldr	r3, [r3, #0]
 80b0754:	681a      	ldr	r2, [r3, #0]
 80b0756:	68fb      	ldr	r3, [r7, #12]
 80b0758:	681b      	ldr	r3, [r3, #0]
 80b075a:	f042 0201 	orr.w	r2, r2, #1
 80b075e:	601a      	str	r2, [r3, #0]
 80b0760:	e005      	b.n	80b076e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80b0762:	68fb      	ldr	r3, [r7, #12]
 80b0764:	2200      	movs	r2, #0
 80b0766:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80b076a:	2302      	movs	r3, #2
 80b076c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80b076e:	7dfb      	ldrb	r3, [r7, #23]
}
 80b0770:	4618      	mov	r0, r3
 80b0772:	3718      	adds	r7, #24
 80b0774:	46bd      	mov	sp, r7
 80b0776:	bd80      	pop	{r7, pc}

080b0778 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80b0778:	b580      	push	{r7, lr}
 80b077a:	b084      	sub	sp, #16
 80b077c:	af00      	add	r7, sp, #0
 80b077e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80b0780:	687b      	ldr	r3, [r7, #4]
 80b0782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80b0784:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80b0786:	f7fe ff55 	bl	80af634 <HAL_GetTick>
 80b078a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80b078c:	687b      	ldr	r3, [r7, #4]
 80b078e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80b0792:	b2db      	uxtb	r3, r3
 80b0794:	2b02      	cmp	r3, #2
 80b0796:	d008      	beq.n	80b07aa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80b0798:	687b      	ldr	r3, [r7, #4]
 80b079a:	2280      	movs	r2, #128	; 0x80
 80b079c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80b079e:	687b      	ldr	r3, [r7, #4]
 80b07a0:	2200      	movs	r2, #0
 80b07a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80b07a6:	2301      	movs	r3, #1
 80b07a8:	e052      	b.n	80b0850 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80b07aa:	687b      	ldr	r3, [r7, #4]
 80b07ac:	681b      	ldr	r3, [r3, #0]
 80b07ae:	681a      	ldr	r2, [r3, #0]
 80b07b0:	687b      	ldr	r3, [r7, #4]
 80b07b2:	681b      	ldr	r3, [r3, #0]
 80b07b4:	f022 0216 	bic.w	r2, r2, #22
 80b07b8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80b07ba:	687b      	ldr	r3, [r7, #4]
 80b07bc:	681b      	ldr	r3, [r3, #0]
 80b07be:	695a      	ldr	r2, [r3, #20]
 80b07c0:	687b      	ldr	r3, [r7, #4]
 80b07c2:	681b      	ldr	r3, [r3, #0]
 80b07c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80b07c8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80b07ca:	687b      	ldr	r3, [r7, #4]
 80b07cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80b07ce:	2b00      	cmp	r3, #0
 80b07d0:	d103      	bne.n	80b07da <HAL_DMA_Abort+0x62>
 80b07d2:	687b      	ldr	r3, [r7, #4]
 80b07d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80b07d6:	2b00      	cmp	r3, #0
 80b07d8:	d007      	beq.n	80b07ea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80b07da:	687b      	ldr	r3, [r7, #4]
 80b07dc:	681b      	ldr	r3, [r3, #0]
 80b07de:	681a      	ldr	r2, [r3, #0]
 80b07e0:	687b      	ldr	r3, [r7, #4]
 80b07e2:	681b      	ldr	r3, [r3, #0]
 80b07e4:	f022 0208 	bic.w	r2, r2, #8
 80b07e8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80b07ea:	687b      	ldr	r3, [r7, #4]
 80b07ec:	681b      	ldr	r3, [r3, #0]
 80b07ee:	681a      	ldr	r2, [r3, #0]
 80b07f0:	687b      	ldr	r3, [r7, #4]
 80b07f2:	681b      	ldr	r3, [r3, #0]
 80b07f4:	f022 0201 	bic.w	r2, r2, #1
 80b07f8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80b07fa:	e013      	b.n	80b0824 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80b07fc:	f7fe ff1a 	bl	80af634 <HAL_GetTick>
 80b0800:	4602      	mov	r2, r0
 80b0802:	68bb      	ldr	r3, [r7, #8]
 80b0804:	1ad3      	subs	r3, r2, r3
 80b0806:	2b05      	cmp	r3, #5
 80b0808:	d90c      	bls.n	80b0824 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80b080a:	687b      	ldr	r3, [r7, #4]
 80b080c:	2220      	movs	r2, #32
 80b080e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80b0810:	687b      	ldr	r3, [r7, #4]
 80b0812:	2200      	movs	r2, #0
 80b0814:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80b0818:	687b      	ldr	r3, [r7, #4]
 80b081a:	2203      	movs	r2, #3
 80b081c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80b0820:	2303      	movs	r3, #3
 80b0822:	e015      	b.n	80b0850 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80b0824:	687b      	ldr	r3, [r7, #4]
 80b0826:	681b      	ldr	r3, [r3, #0]
 80b0828:	681b      	ldr	r3, [r3, #0]
 80b082a:	f003 0301 	and.w	r3, r3, #1
 80b082e:	2b00      	cmp	r3, #0
 80b0830:	d1e4      	bne.n	80b07fc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80b0832:	687b      	ldr	r3, [r7, #4]
 80b0834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80b0836:	223f      	movs	r2, #63	; 0x3f
 80b0838:	409a      	lsls	r2, r3
 80b083a:	68fb      	ldr	r3, [r7, #12]
 80b083c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80b083e:	687b      	ldr	r3, [r7, #4]
 80b0840:	2200      	movs	r2, #0
 80b0842:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80b0846:	687b      	ldr	r3, [r7, #4]
 80b0848:	2201      	movs	r2, #1
 80b084a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80b084e:	2300      	movs	r3, #0
}
 80b0850:	4618      	mov	r0, r3
 80b0852:	3710      	adds	r7, #16
 80b0854:	46bd      	mov	sp, r7
 80b0856:	bd80      	pop	{r7, pc}

080b0858 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80b0858:	b480      	push	{r7}
 80b085a:	b083      	sub	sp, #12
 80b085c:	af00      	add	r7, sp, #0
 80b085e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80b0860:	687b      	ldr	r3, [r7, #4]
 80b0862:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80b0866:	b2db      	uxtb	r3, r3
 80b0868:	2b02      	cmp	r3, #2
 80b086a:	d004      	beq.n	80b0876 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80b086c:	687b      	ldr	r3, [r7, #4]
 80b086e:	2280      	movs	r2, #128	; 0x80
 80b0870:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80b0872:	2301      	movs	r3, #1
 80b0874:	e00c      	b.n	80b0890 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80b0876:	687b      	ldr	r3, [r7, #4]
 80b0878:	2205      	movs	r2, #5
 80b087a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80b087e:	687b      	ldr	r3, [r7, #4]
 80b0880:	681b      	ldr	r3, [r3, #0]
 80b0882:	681a      	ldr	r2, [r3, #0]
 80b0884:	687b      	ldr	r3, [r7, #4]
 80b0886:	681b      	ldr	r3, [r3, #0]
 80b0888:	f022 0201 	bic.w	r2, r2, #1
 80b088c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80b088e:	2300      	movs	r3, #0
}
 80b0890:	4618      	mov	r0, r3
 80b0892:	370c      	adds	r7, #12
 80b0894:	46bd      	mov	sp, r7
 80b0896:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b089a:	4770      	bx	lr

080b089c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80b089c:	b580      	push	{r7, lr}
 80b089e:	b086      	sub	sp, #24
 80b08a0:	af00      	add	r7, sp, #0
 80b08a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80b08a4:	2300      	movs	r3, #0
 80b08a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80b08a8:	4b92      	ldr	r3, [pc, #584]	; (80b0af4 <HAL_DMA_IRQHandler+0x258>)
 80b08aa:	681b      	ldr	r3, [r3, #0]
 80b08ac:	4a92      	ldr	r2, [pc, #584]	; (80b0af8 <HAL_DMA_IRQHandler+0x25c>)
 80b08ae:	fba2 2303 	umull	r2, r3, r2, r3
 80b08b2:	0a9b      	lsrs	r3, r3, #10
 80b08b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80b08b6:	687b      	ldr	r3, [r7, #4]
 80b08b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80b08ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80b08bc:	693b      	ldr	r3, [r7, #16]
 80b08be:	681b      	ldr	r3, [r3, #0]
 80b08c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80b08c2:	687b      	ldr	r3, [r7, #4]
 80b08c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80b08c6:	2208      	movs	r2, #8
 80b08c8:	409a      	lsls	r2, r3
 80b08ca:	68fb      	ldr	r3, [r7, #12]
 80b08cc:	4013      	ands	r3, r2
 80b08ce:	2b00      	cmp	r3, #0
 80b08d0:	d01a      	beq.n	80b0908 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80b08d2:	687b      	ldr	r3, [r7, #4]
 80b08d4:	681b      	ldr	r3, [r3, #0]
 80b08d6:	681b      	ldr	r3, [r3, #0]
 80b08d8:	f003 0304 	and.w	r3, r3, #4
 80b08dc:	2b00      	cmp	r3, #0
 80b08de:	d013      	beq.n	80b0908 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80b08e0:	687b      	ldr	r3, [r7, #4]
 80b08e2:	681b      	ldr	r3, [r3, #0]
 80b08e4:	681a      	ldr	r2, [r3, #0]
 80b08e6:	687b      	ldr	r3, [r7, #4]
 80b08e8:	681b      	ldr	r3, [r3, #0]
 80b08ea:	f022 0204 	bic.w	r2, r2, #4
 80b08ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80b08f0:	687b      	ldr	r3, [r7, #4]
 80b08f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80b08f4:	2208      	movs	r2, #8
 80b08f6:	409a      	lsls	r2, r3
 80b08f8:	693b      	ldr	r3, [r7, #16]
 80b08fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80b08fc:	687b      	ldr	r3, [r7, #4]
 80b08fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80b0900:	f043 0201 	orr.w	r2, r3, #1
 80b0904:	687b      	ldr	r3, [r7, #4]
 80b0906:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80b0908:	687b      	ldr	r3, [r7, #4]
 80b090a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80b090c:	2201      	movs	r2, #1
 80b090e:	409a      	lsls	r2, r3
 80b0910:	68fb      	ldr	r3, [r7, #12]
 80b0912:	4013      	ands	r3, r2
 80b0914:	2b00      	cmp	r3, #0
 80b0916:	d012      	beq.n	80b093e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80b0918:	687b      	ldr	r3, [r7, #4]
 80b091a:	681b      	ldr	r3, [r3, #0]
 80b091c:	695b      	ldr	r3, [r3, #20]
 80b091e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80b0922:	2b00      	cmp	r3, #0
 80b0924:	d00b      	beq.n	80b093e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80b0926:	687b      	ldr	r3, [r7, #4]
 80b0928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80b092a:	2201      	movs	r2, #1
 80b092c:	409a      	lsls	r2, r3
 80b092e:	693b      	ldr	r3, [r7, #16]
 80b0930:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80b0932:	687b      	ldr	r3, [r7, #4]
 80b0934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80b0936:	f043 0202 	orr.w	r2, r3, #2
 80b093a:	687b      	ldr	r3, [r7, #4]
 80b093c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80b093e:	687b      	ldr	r3, [r7, #4]
 80b0940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80b0942:	2204      	movs	r2, #4
 80b0944:	409a      	lsls	r2, r3
 80b0946:	68fb      	ldr	r3, [r7, #12]
 80b0948:	4013      	ands	r3, r2
 80b094a:	2b00      	cmp	r3, #0
 80b094c:	d012      	beq.n	80b0974 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80b094e:	687b      	ldr	r3, [r7, #4]
 80b0950:	681b      	ldr	r3, [r3, #0]
 80b0952:	681b      	ldr	r3, [r3, #0]
 80b0954:	f003 0302 	and.w	r3, r3, #2
 80b0958:	2b00      	cmp	r3, #0
 80b095a:	d00b      	beq.n	80b0974 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80b095c:	687b      	ldr	r3, [r7, #4]
 80b095e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80b0960:	2204      	movs	r2, #4
 80b0962:	409a      	lsls	r2, r3
 80b0964:	693b      	ldr	r3, [r7, #16]
 80b0966:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80b0968:	687b      	ldr	r3, [r7, #4]
 80b096a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80b096c:	f043 0204 	orr.w	r2, r3, #4
 80b0970:	687b      	ldr	r3, [r7, #4]
 80b0972:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80b0974:	687b      	ldr	r3, [r7, #4]
 80b0976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80b0978:	2210      	movs	r2, #16
 80b097a:	409a      	lsls	r2, r3
 80b097c:	68fb      	ldr	r3, [r7, #12]
 80b097e:	4013      	ands	r3, r2
 80b0980:	2b00      	cmp	r3, #0
 80b0982:	d043      	beq.n	80b0a0c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80b0984:	687b      	ldr	r3, [r7, #4]
 80b0986:	681b      	ldr	r3, [r3, #0]
 80b0988:	681b      	ldr	r3, [r3, #0]
 80b098a:	f003 0308 	and.w	r3, r3, #8
 80b098e:	2b00      	cmp	r3, #0
 80b0990:	d03c      	beq.n	80b0a0c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80b0992:	687b      	ldr	r3, [r7, #4]
 80b0994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80b0996:	2210      	movs	r2, #16
 80b0998:	409a      	lsls	r2, r3
 80b099a:	693b      	ldr	r3, [r7, #16]
 80b099c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80b099e:	687b      	ldr	r3, [r7, #4]
 80b09a0:	681b      	ldr	r3, [r3, #0]
 80b09a2:	681b      	ldr	r3, [r3, #0]
 80b09a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80b09a8:	2b00      	cmp	r3, #0
 80b09aa:	d018      	beq.n	80b09de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80b09ac:	687b      	ldr	r3, [r7, #4]
 80b09ae:	681b      	ldr	r3, [r3, #0]
 80b09b0:	681b      	ldr	r3, [r3, #0]
 80b09b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80b09b6:	2b00      	cmp	r3, #0
 80b09b8:	d108      	bne.n	80b09cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80b09ba:	687b      	ldr	r3, [r7, #4]
 80b09bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80b09be:	2b00      	cmp	r3, #0
 80b09c0:	d024      	beq.n	80b0a0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80b09c2:	687b      	ldr	r3, [r7, #4]
 80b09c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80b09c6:	6878      	ldr	r0, [r7, #4]
 80b09c8:	4798      	blx	r3
 80b09ca:	e01f      	b.n	80b0a0c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80b09cc:	687b      	ldr	r3, [r7, #4]
 80b09ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80b09d0:	2b00      	cmp	r3, #0
 80b09d2:	d01b      	beq.n	80b0a0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80b09d4:	687b      	ldr	r3, [r7, #4]
 80b09d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80b09d8:	6878      	ldr	r0, [r7, #4]
 80b09da:	4798      	blx	r3
 80b09dc:	e016      	b.n	80b0a0c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80b09de:	687b      	ldr	r3, [r7, #4]
 80b09e0:	681b      	ldr	r3, [r3, #0]
 80b09e2:	681b      	ldr	r3, [r3, #0]
 80b09e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80b09e8:	2b00      	cmp	r3, #0
 80b09ea:	d107      	bne.n	80b09fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80b09ec:	687b      	ldr	r3, [r7, #4]
 80b09ee:	681b      	ldr	r3, [r3, #0]
 80b09f0:	681a      	ldr	r2, [r3, #0]
 80b09f2:	687b      	ldr	r3, [r7, #4]
 80b09f4:	681b      	ldr	r3, [r3, #0]
 80b09f6:	f022 0208 	bic.w	r2, r2, #8
 80b09fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80b09fc:	687b      	ldr	r3, [r7, #4]
 80b09fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80b0a00:	2b00      	cmp	r3, #0
 80b0a02:	d003      	beq.n	80b0a0c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80b0a04:	687b      	ldr	r3, [r7, #4]
 80b0a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80b0a08:	6878      	ldr	r0, [r7, #4]
 80b0a0a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80b0a0c:	687b      	ldr	r3, [r7, #4]
 80b0a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80b0a10:	2220      	movs	r2, #32
 80b0a12:	409a      	lsls	r2, r3
 80b0a14:	68fb      	ldr	r3, [r7, #12]
 80b0a16:	4013      	ands	r3, r2
 80b0a18:	2b00      	cmp	r3, #0
 80b0a1a:	f000 808e 	beq.w	80b0b3a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80b0a1e:	687b      	ldr	r3, [r7, #4]
 80b0a20:	681b      	ldr	r3, [r3, #0]
 80b0a22:	681b      	ldr	r3, [r3, #0]
 80b0a24:	f003 0310 	and.w	r3, r3, #16
 80b0a28:	2b00      	cmp	r3, #0
 80b0a2a:	f000 8086 	beq.w	80b0b3a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80b0a2e:	687b      	ldr	r3, [r7, #4]
 80b0a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80b0a32:	2220      	movs	r2, #32
 80b0a34:	409a      	lsls	r2, r3
 80b0a36:	693b      	ldr	r3, [r7, #16]
 80b0a38:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80b0a3a:	687b      	ldr	r3, [r7, #4]
 80b0a3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80b0a40:	b2db      	uxtb	r3, r3
 80b0a42:	2b05      	cmp	r3, #5
 80b0a44:	d136      	bne.n	80b0ab4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80b0a46:	687b      	ldr	r3, [r7, #4]
 80b0a48:	681b      	ldr	r3, [r3, #0]
 80b0a4a:	681a      	ldr	r2, [r3, #0]
 80b0a4c:	687b      	ldr	r3, [r7, #4]
 80b0a4e:	681b      	ldr	r3, [r3, #0]
 80b0a50:	f022 0216 	bic.w	r2, r2, #22
 80b0a54:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80b0a56:	687b      	ldr	r3, [r7, #4]
 80b0a58:	681b      	ldr	r3, [r3, #0]
 80b0a5a:	695a      	ldr	r2, [r3, #20]
 80b0a5c:	687b      	ldr	r3, [r7, #4]
 80b0a5e:	681b      	ldr	r3, [r3, #0]
 80b0a60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80b0a64:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80b0a66:	687b      	ldr	r3, [r7, #4]
 80b0a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80b0a6a:	2b00      	cmp	r3, #0
 80b0a6c:	d103      	bne.n	80b0a76 <HAL_DMA_IRQHandler+0x1da>
 80b0a6e:	687b      	ldr	r3, [r7, #4]
 80b0a70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80b0a72:	2b00      	cmp	r3, #0
 80b0a74:	d007      	beq.n	80b0a86 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80b0a76:	687b      	ldr	r3, [r7, #4]
 80b0a78:	681b      	ldr	r3, [r3, #0]
 80b0a7a:	681a      	ldr	r2, [r3, #0]
 80b0a7c:	687b      	ldr	r3, [r7, #4]
 80b0a7e:	681b      	ldr	r3, [r3, #0]
 80b0a80:	f022 0208 	bic.w	r2, r2, #8
 80b0a84:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80b0a86:	687b      	ldr	r3, [r7, #4]
 80b0a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80b0a8a:	223f      	movs	r2, #63	; 0x3f
 80b0a8c:	409a      	lsls	r2, r3
 80b0a8e:	693b      	ldr	r3, [r7, #16]
 80b0a90:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80b0a92:	687b      	ldr	r3, [r7, #4]
 80b0a94:	2200      	movs	r2, #0
 80b0a96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80b0a9a:	687b      	ldr	r3, [r7, #4]
 80b0a9c:	2201      	movs	r2, #1
 80b0a9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80b0aa2:	687b      	ldr	r3, [r7, #4]
 80b0aa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80b0aa6:	2b00      	cmp	r3, #0
 80b0aa8:	d07d      	beq.n	80b0ba6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80b0aaa:	687b      	ldr	r3, [r7, #4]
 80b0aac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80b0aae:	6878      	ldr	r0, [r7, #4]
 80b0ab0:	4798      	blx	r3
        }
        return;
 80b0ab2:	e078      	b.n	80b0ba6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80b0ab4:	687b      	ldr	r3, [r7, #4]
 80b0ab6:	681b      	ldr	r3, [r3, #0]
 80b0ab8:	681b      	ldr	r3, [r3, #0]
 80b0aba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80b0abe:	2b00      	cmp	r3, #0
 80b0ac0:	d01c      	beq.n	80b0afc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80b0ac2:	687b      	ldr	r3, [r7, #4]
 80b0ac4:	681b      	ldr	r3, [r3, #0]
 80b0ac6:	681b      	ldr	r3, [r3, #0]
 80b0ac8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80b0acc:	2b00      	cmp	r3, #0
 80b0ace:	d108      	bne.n	80b0ae2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80b0ad0:	687b      	ldr	r3, [r7, #4]
 80b0ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80b0ad4:	2b00      	cmp	r3, #0
 80b0ad6:	d030      	beq.n	80b0b3a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80b0ad8:	687b      	ldr	r3, [r7, #4]
 80b0ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80b0adc:	6878      	ldr	r0, [r7, #4]
 80b0ade:	4798      	blx	r3
 80b0ae0:	e02b      	b.n	80b0b3a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80b0ae2:	687b      	ldr	r3, [r7, #4]
 80b0ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80b0ae6:	2b00      	cmp	r3, #0
 80b0ae8:	d027      	beq.n	80b0b3a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80b0aea:	687b      	ldr	r3, [r7, #4]
 80b0aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80b0aee:	6878      	ldr	r0, [r7, #4]
 80b0af0:	4798      	blx	r3
 80b0af2:	e022      	b.n	80b0b3a <HAL_DMA_IRQHandler+0x29e>
 80b0af4:	20007c54 	.word	0x20007c54
 80b0af8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80b0afc:	687b      	ldr	r3, [r7, #4]
 80b0afe:	681b      	ldr	r3, [r3, #0]
 80b0b00:	681b      	ldr	r3, [r3, #0]
 80b0b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80b0b06:	2b00      	cmp	r3, #0
 80b0b08:	d10f      	bne.n	80b0b2a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80b0b0a:	687b      	ldr	r3, [r7, #4]
 80b0b0c:	681b      	ldr	r3, [r3, #0]
 80b0b0e:	681a      	ldr	r2, [r3, #0]
 80b0b10:	687b      	ldr	r3, [r7, #4]
 80b0b12:	681b      	ldr	r3, [r3, #0]
 80b0b14:	f022 0210 	bic.w	r2, r2, #16
 80b0b18:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80b0b1a:	687b      	ldr	r3, [r7, #4]
 80b0b1c:	2200      	movs	r2, #0
 80b0b1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80b0b22:	687b      	ldr	r3, [r7, #4]
 80b0b24:	2201      	movs	r2, #1
 80b0b26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80b0b2a:	687b      	ldr	r3, [r7, #4]
 80b0b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80b0b2e:	2b00      	cmp	r3, #0
 80b0b30:	d003      	beq.n	80b0b3a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80b0b32:	687b      	ldr	r3, [r7, #4]
 80b0b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80b0b36:	6878      	ldr	r0, [r7, #4]
 80b0b38:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80b0b3a:	687b      	ldr	r3, [r7, #4]
 80b0b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80b0b3e:	2b00      	cmp	r3, #0
 80b0b40:	d032      	beq.n	80b0ba8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80b0b42:	687b      	ldr	r3, [r7, #4]
 80b0b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80b0b46:	f003 0301 	and.w	r3, r3, #1
 80b0b4a:	2b00      	cmp	r3, #0
 80b0b4c:	d022      	beq.n	80b0b94 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80b0b4e:	687b      	ldr	r3, [r7, #4]
 80b0b50:	2205      	movs	r2, #5
 80b0b52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80b0b56:	687b      	ldr	r3, [r7, #4]
 80b0b58:	681b      	ldr	r3, [r3, #0]
 80b0b5a:	681a      	ldr	r2, [r3, #0]
 80b0b5c:	687b      	ldr	r3, [r7, #4]
 80b0b5e:	681b      	ldr	r3, [r3, #0]
 80b0b60:	f022 0201 	bic.w	r2, r2, #1
 80b0b64:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80b0b66:	68bb      	ldr	r3, [r7, #8]
 80b0b68:	3301      	adds	r3, #1
 80b0b6a:	60bb      	str	r3, [r7, #8]
 80b0b6c:	697a      	ldr	r2, [r7, #20]
 80b0b6e:	429a      	cmp	r2, r3
 80b0b70:	d307      	bcc.n	80b0b82 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80b0b72:	687b      	ldr	r3, [r7, #4]
 80b0b74:	681b      	ldr	r3, [r3, #0]
 80b0b76:	681b      	ldr	r3, [r3, #0]
 80b0b78:	f003 0301 	and.w	r3, r3, #1
 80b0b7c:	2b00      	cmp	r3, #0
 80b0b7e:	d1f2      	bne.n	80b0b66 <HAL_DMA_IRQHandler+0x2ca>
 80b0b80:	e000      	b.n	80b0b84 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80b0b82:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80b0b84:	687b      	ldr	r3, [r7, #4]
 80b0b86:	2200      	movs	r2, #0
 80b0b88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80b0b8c:	687b      	ldr	r3, [r7, #4]
 80b0b8e:	2201      	movs	r2, #1
 80b0b90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80b0b94:	687b      	ldr	r3, [r7, #4]
 80b0b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80b0b98:	2b00      	cmp	r3, #0
 80b0b9a:	d005      	beq.n	80b0ba8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80b0b9c:	687b      	ldr	r3, [r7, #4]
 80b0b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80b0ba0:	6878      	ldr	r0, [r7, #4]
 80b0ba2:	4798      	blx	r3
 80b0ba4:	e000      	b.n	80b0ba8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80b0ba6:	bf00      	nop
    }
  }
}
 80b0ba8:	3718      	adds	r7, #24
 80b0baa:	46bd      	mov	sp, r7
 80b0bac:	bd80      	pop	{r7, pc}
 80b0bae:	bf00      	nop

080b0bb0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80b0bb0:	b480      	push	{r7}
 80b0bb2:	b085      	sub	sp, #20
 80b0bb4:	af00      	add	r7, sp, #0
 80b0bb6:	60f8      	str	r0, [r7, #12]
 80b0bb8:	60b9      	str	r1, [r7, #8]
 80b0bba:	607a      	str	r2, [r7, #4]
 80b0bbc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80b0bbe:	68fb      	ldr	r3, [r7, #12]
 80b0bc0:	681b      	ldr	r3, [r3, #0]
 80b0bc2:	681a      	ldr	r2, [r3, #0]
 80b0bc4:	68fb      	ldr	r3, [r7, #12]
 80b0bc6:	681b      	ldr	r3, [r3, #0]
 80b0bc8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80b0bcc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80b0bce:	68fb      	ldr	r3, [r7, #12]
 80b0bd0:	681b      	ldr	r3, [r3, #0]
 80b0bd2:	683a      	ldr	r2, [r7, #0]
 80b0bd4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80b0bd6:	68fb      	ldr	r3, [r7, #12]
 80b0bd8:	689b      	ldr	r3, [r3, #8]
 80b0bda:	2b40      	cmp	r3, #64	; 0x40
 80b0bdc:	d108      	bne.n	80b0bf0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80b0bde:	68fb      	ldr	r3, [r7, #12]
 80b0be0:	681b      	ldr	r3, [r3, #0]
 80b0be2:	687a      	ldr	r2, [r7, #4]
 80b0be4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80b0be6:	68fb      	ldr	r3, [r7, #12]
 80b0be8:	681b      	ldr	r3, [r3, #0]
 80b0bea:	68ba      	ldr	r2, [r7, #8]
 80b0bec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80b0bee:	e007      	b.n	80b0c00 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80b0bf0:	68fb      	ldr	r3, [r7, #12]
 80b0bf2:	681b      	ldr	r3, [r3, #0]
 80b0bf4:	68ba      	ldr	r2, [r7, #8]
 80b0bf6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80b0bf8:	68fb      	ldr	r3, [r7, #12]
 80b0bfa:	681b      	ldr	r3, [r3, #0]
 80b0bfc:	687a      	ldr	r2, [r7, #4]
 80b0bfe:	60da      	str	r2, [r3, #12]
}
 80b0c00:	bf00      	nop
 80b0c02:	3714      	adds	r7, #20
 80b0c04:	46bd      	mov	sp, r7
 80b0c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b0c0a:	4770      	bx	lr

080b0c0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80b0c0c:	b480      	push	{r7}
 80b0c0e:	b085      	sub	sp, #20
 80b0c10:	af00      	add	r7, sp, #0
 80b0c12:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80b0c14:	687b      	ldr	r3, [r7, #4]
 80b0c16:	681b      	ldr	r3, [r3, #0]
 80b0c18:	b2db      	uxtb	r3, r3
 80b0c1a:	3b10      	subs	r3, #16
 80b0c1c:	4a14      	ldr	r2, [pc, #80]	; (80b0c70 <DMA_CalcBaseAndBitshift+0x64>)
 80b0c1e:	fba2 2303 	umull	r2, r3, r2, r3
 80b0c22:	091b      	lsrs	r3, r3, #4
 80b0c24:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80b0c26:	4a13      	ldr	r2, [pc, #76]	; (80b0c74 <DMA_CalcBaseAndBitshift+0x68>)
 80b0c28:	68fb      	ldr	r3, [r7, #12]
 80b0c2a:	4413      	add	r3, r2
 80b0c2c:	781b      	ldrb	r3, [r3, #0]
 80b0c2e:	461a      	mov	r2, r3
 80b0c30:	687b      	ldr	r3, [r7, #4]
 80b0c32:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80b0c34:	68fb      	ldr	r3, [r7, #12]
 80b0c36:	2b03      	cmp	r3, #3
 80b0c38:	d909      	bls.n	80b0c4e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80b0c3a:	687b      	ldr	r3, [r7, #4]
 80b0c3c:	681b      	ldr	r3, [r3, #0]
 80b0c3e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80b0c42:	f023 0303 	bic.w	r3, r3, #3
 80b0c46:	1d1a      	adds	r2, r3, #4
 80b0c48:	687b      	ldr	r3, [r7, #4]
 80b0c4a:	659a      	str	r2, [r3, #88]	; 0x58
 80b0c4c:	e007      	b.n	80b0c5e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80b0c4e:	687b      	ldr	r3, [r7, #4]
 80b0c50:	681b      	ldr	r3, [r3, #0]
 80b0c52:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80b0c56:	f023 0303 	bic.w	r3, r3, #3
 80b0c5a:	687a      	ldr	r2, [r7, #4]
 80b0c5c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80b0c5e:	687b      	ldr	r3, [r7, #4]
 80b0c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80b0c62:	4618      	mov	r0, r3
 80b0c64:	3714      	adds	r7, #20
 80b0c66:	46bd      	mov	sp, r7
 80b0c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b0c6c:	4770      	bx	lr
 80b0c6e:	bf00      	nop
 80b0c70:	aaaaaaab 	.word	0xaaaaaaab
 80b0c74:	080dca88 	.word	0x080dca88

080b0c78 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80b0c78:	b480      	push	{r7}
 80b0c7a:	b085      	sub	sp, #20
 80b0c7c:	af00      	add	r7, sp, #0
 80b0c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80b0c80:	2300      	movs	r3, #0
 80b0c82:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80b0c84:	687b      	ldr	r3, [r7, #4]
 80b0c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80b0c88:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80b0c8a:	687b      	ldr	r3, [r7, #4]
 80b0c8c:	699b      	ldr	r3, [r3, #24]
 80b0c8e:	2b00      	cmp	r3, #0
 80b0c90:	d11f      	bne.n	80b0cd2 <DMA_CheckFifoParam+0x5a>
 80b0c92:	68bb      	ldr	r3, [r7, #8]
 80b0c94:	2b03      	cmp	r3, #3
 80b0c96:	d856      	bhi.n	80b0d46 <DMA_CheckFifoParam+0xce>
 80b0c98:	a201      	add	r2, pc, #4	; (adr r2, 80b0ca0 <DMA_CheckFifoParam+0x28>)
 80b0c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80b0c9e:	bf00      	nop
 80b0ca0:	080b0cb1 	.word	0x080b0cb1
 80b0ca4:	080b0cc3 	.word	0x080b0cc3
 80b0ca8:	080b0cb1 	.word	0x080b0cb1
 80b0cac:	080b0d47 	.word	0x080b0d47
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80b0cb0:	687b      	ldr	r3, [r7, #4]
 80b0cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80b0cb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80b0cb8:	2b00      	cmp	r3, #0
 80b0cba:	d046      	beq.n	80b0d4a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80b0cbc:	2301      	movs	r3, #1
 80b0cbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80b0cc0:	e043      	b.n	80b0d4a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80b0cc2:	687b      	ldr	r3, [r7, #4]
 80b0cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80b0cc6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80b0cca:	d140      	bne.n	80b0d4e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80b0ccc:	2301      	movs	r3, #1
 80b0cce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80b0cd0:	e03d      	b.n	80b0d4e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80b0cd2:	687b      	ldr	r3, [r7, #4]
 80b0cd4:	699b      	ldr	r3, [r3, #24]
 80b0cd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80b0cda:	d121      	bne.n	80b0d20 <DMA_CheckFifoParam+0xa8>
 80b0cdc:	68bb      	ldr	r3, [r7, #8]
 80b0cde:	2b03      	cmp	r3, #3
 80b0ce0:	d837      	bhi.n	80b0d52 <DMA_CheckFifoParam+0xda>
 80b0ce2:	a201      	add	r2, pc, #4	; (adr r2, 80b0ce8 <DMA_CheckFifoParam+0x70>)
 80b0ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80b0ce8:	080b0cf9 	.word	0x080b0cf9
 80b0cec:	080b0cff 	.word	0x080b0cff
 80b0cf0:	080b0cf9 	.word	0x080b0cf9
 80b0cf4:	080b0d11 	.word	0x080b0d11
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80b0cf8:	2301      	movs	r3, #1
 80b0cfa:	73fb      	strb	r3, [r7, #15]
      break;
 80b0cfc:	e030      	b.n	80b0d60 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80b0cfe:	687b      	ldr	r3, [r7, #4]
 80b0d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80b0d02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80b0d06:	2b00      	cmp	r3, #0
 80b0d08:	d025      	beq.n	80b0d56 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80b0d0a:	2301      	movs	r3, #1
 80b0d0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80b0d0e:	e022      	b.n	80b0d56 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80b0d10:	687b      	ldr	r3, [r7, #4]
 80b0d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80b0d14:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80b0d18:	d11f      	bne.n	80b0d5a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80b0d1a:	2301      	movs	r3, #1
 80b0d1c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80b0d1e:	e01c      	b.n	80b0d5a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80b0d20:	68bb      	ldr	r3, [r7, #8]
 80b0d22:	2b02      	cmp	r3, #2
 80b0d24:	d903      	bls.n	80b0d2e <DMA_CheckFifoParam+0xb6>
 80b0d26:	68bb      	ldr	r3, [r7, #8]
 80b0d28:	2b03      	cmp	r3, #3
 80b0d2a:	d003      	beq.n	80b0d34 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80b0d2c:	e018      	b.n	80b0d60 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80b0d2e:	2301      	movs	r3, #1
 80b0d30:	73fb      	strb	r3, [r7, #15]
      break;
 80b0d32:	e015      	b.n	80b0d60 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80b0d34:	687b      	ldr	r3, [r7, #4]
 80b0d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80b0d38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80b0d3c:	2b00      	cmp	r3, #0
 80b0d3e:	d00e      	beq.n	80b0d5e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80b0d40:	2301      	movs	r3, #1
 80b0d42:	73fb      	strb	r3, [r7, #15]
      break;
 80b0d44:	e00b      	b.n	80b0d5e <DMA_CheckFifoParam+0xe6>
      break;
 80b0d46:	bf00      	nop
 80b0d48:	e00a      	b.n	80b0d60 <DMA_CheckFifoParam+0xe8>
      break;
 80b0d4a:	bf00      	nop
 80b0d4c:	e008      	b.n	80b0d60 <DMA_CheckFifoParam+0xe8>
      break;
 80b0d4e:	bf00      	nop
 80b0d50:	e006      	b.n	80b0d60 <DMA_CheckFifoParam+0xe8>
      break;
 80b0d52:	bf00      	nop
 80b0d54:	e004      	b.n	80b0d60 <DMA_CheckFifoParam+0xe8>
      break;
 80b0d56:	bf00      	nop
 80b0d58:	e002      	b.n	80b0d60 <DMA_CheckFifoParam+0xe8>
      break;   
 80b0d5a:	bf00      	nop
 80b0d5c:	e000      	b.n	80b0d60 <DMA_CheckFifoParam+0xe8>
      break;
 80b0d5e:	bf00      	nop
    }
  } 
  
  return status; 
 80b0d60:	7bfb      	ldrb	r3, [r7, #15]
}
 80b0d62:	4618      	mov	r0, r3
 80b0d64:	3714      	adds	r7, #20
 80b0d66:	46bd      	mov	sp, r7
 80b0d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b0d6c:	4770      	bx	lr
 80b0d6e:	bf00      	nop

080b0d70 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80b0d70:	b580      	push	{r7, lr}
 80b0d72:	b086      	sub	sp, #24
 80b0d74:	af00      	add	r7, sp, #0
 80b0d76:	60f8      	str	r0, [r7, #12]
 80b0d78:	60b9      	str	r1, [r7, #8]
 80b0d7a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80b0d7e:	2301      	movs	r3, #1
 80b0d80:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80b0d82:	4b23      	ldr	r3, [pc, #140]	; (80b0e10 <HAL_FLASH_Program+0xa0>)
 80b0d84:	7e1b      	ldrb	r3, [r3, #24]
 80b0d86:	2b01      	cmp	r3, #1
 80b0d88:	d101      	bne.n	80b0d8e <HAL_FLASH_Program+0x1e>
 80b0d8a:	2302      	movs	r3, #2
 80b0d8c:	e03b      	b.n	80b0e06 <HAL_FLASH_Program+0x96>
 80b0d8e:	4b20      	ldr	r3, [pc, #128]	; (80b0e10 <HAL_FLASH_Program+0xa0>)
 80b0d90:	2201      	movs	r2, #1
 80b0d92:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80b0d94:	f24c 3050 	movw	r0, #50000	; 0xc350
 80b0d98:	f000 f870 	bl	80b0e7c <FLASH_WaitForLastOperation>
 80b0d9c:	4603      	mov	r3, r0
 80b0d9e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80b0da0:	7dfb      	ldrb	r3, [r7, #23]
 80b0da2:	2b00      	cmp	r3, #0
 80b0da4:	d12b      	bne.n	80b0dfe <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80b0da6:	68fb      	ldr	r3, [r7, #12]
 80b0da8:	2b00      	cmp	r3, #0
 80b0daa:	d105      	bne.n	80b0db8 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80b0dac:	783b      	ldrb	r3, [r7, #0]
 80b0dae:	4619      	mov	r1, r3
 80b0db0:	68b8      	ldr	r0, [r7, #8]
 80b0db2:	f000 f91b 	bl	80b0fec <FLASH_Program_Byte>
 80b0db6:	e016      	b.n	80b0de6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80b0db8:	68fb      	ldr	r3, [r7, #12]
 80b0dba:	2b01      	cmp	r3, #1
 80b0dbc:	d105      	bne.n	80b0dca <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80b0dbe:	883b      	ldrh	r3, [r7, #0]
 80b0dc0:	4619      	mov	r1, r3
 80b0dc2:	68b8      	ldr	r0, [r7, #8]
 80b0dc4:	f000 f8ee 	bl	80b0fa4 <FLASH_Program_HalfWord>
 80b0dc8:	e00d      	b.n	80b0de6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80b0dca:	68fb      	ldr	r3, [r7, #12]
 80b0dcc:	2b02      	cmp	r3, #2
 80b0dce:	d105      	bne.n	80b0ddc <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80b0dd0:	683b      	ldr	r3, [r7, #0]
 80b0dd2:	4619      	mov	r1, r3
 80b0dd4:	68b8      	ldr	r0, [r7, #8]
 80b0dd6:	f000 f8c3 	bl	80b0f60 <FLASH_Program_Word>
 80b0dda:	e004      	b.n	80b0de6 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80b0ddc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80b0de0:	68b8      	ldr	r0, [r7, #8]
 80b0de2:	f000 f88b 	bl	80b0efc <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80b0de6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80b0dea:	f000 f847 	bl	80b0e7c <FLASH_WaitForLastOperation>
 80b0dee:	4603      	mov	r3, r0
 80b0df0:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80b0df2:	4b08      	ldr	r3, [pc, #32]	; (80b0e14 <HAL_FLASH_Program+0xa4>)
 80b0df4:	691b      	ldr	r3, [r3, #16]
 80b0df6:	4a07      	ldr	r2, [pc, #28]	; (80b0e14 <HAL_FLASH_Program+0xa4>)
 80b0df8:	f023 0301 	bic.w	r3, r3, #1
 80b0dfc:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80b0dfe:	4b04      	ldr	r3, [pc, #16]	; (80b0e10 <HAL_FLASH_Program+0xa0>)
 80b0e00:	2200      	movs	r2, #0
 80b0e02:	761a      	strb	r2, [r3, #24]
  
  return status;
 80b0e04:	7dfb      	ldrb	r3, [r7, #23]
}
 80b0e06:	4618      	mov	r0, r3
 80b0e08:	3718      	adds	r7, #24
 80b0e0a:	46bd      	mov	sp, r7
 80b0e0c:	bd80      	pop	{r7, pc}
 80b0e0e:	bf00      	nop
 80b0e10:	2001c324 	.word	0x2001c324
 80b0e14:	40023c00 	.word	0x40023c00

080b0e18 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80b0e18:	b480      	push	{r7}
 80b0e1a:	b083      	sub	sp, #12
 80b0e1c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80b0e1e:	2300      	movs	r3, #0
 80b0e20:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80b0e22:	4b0b      	ldr	r3, [pc, #44]	; (80b0e50 <HAL_FLASH_Unlock+0x38>)
 80b0e24:	691b      	ldr	r3, [r3, #16]
 80b0e26:	2b00      	cmp	r3, #0
 80b0e28:	da0b      	bge.n	80b0e42 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80b0e2a:	4b09      	ldr	r3, [pc, #36]	; (80b0e50 <HAL_FLASH_Unlock+0x38>)
 80b0e2c:	4a09      	ldr	r2, [pc, #36]	; (80b0e54 <HAL_FLASH_Unlock+0x3c>)
 80b0e2e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80b0e30:	4b07      	ldr	r3, [pc, #28]	; (80b0e50 <HAL_FLASH_Unlock+0x38>)
 80b0e32:	4a09      	ldr	r2, [pc, #36]	; (80b0e58 <HAL_FLASH_Unlock+0x40>)
 80b0e34:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80b0e36:	4b06      	ldr	r3, [pc, #24]	; (80b0e50 <HAL_FLASH_Unlock+0x38>)
 80b0e38:	691b      	ldr	r3, [r3, #16]
 80b0e3a:	2b00      	cmp	r3, #0
 80b0e3c:	da01      	bge.n	80b0e42 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80b0e3e:	2301      	movs	r3, #1
 80b0e40:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80b0e42:	79fb      	ldrb	r3, [r7, #7]
}
 80b0e44:	4618      	mov	r0, r3
 80b0e46:	370c      	adds	r7, #12
 80b0e48:	46bd      	mov	sp, r7
 80b0e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b0e4e:	4770      	bx	lr
 80b0e50:	40023c00 	.word	0x40023c00
 80b0e54:	45670123 	.word	0x45670123
 80b0e58:	cdef89ab 	.word	0xcdef89ab

080b0e5c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80b0e5c:	b480      	push	{r7}
 80b0e5e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80b0e60:	4b05      	ldr	r3, [pc, #20]	; (80b0e78 <HAL_FLASH_Lock+0x1c>)
 80b0e62:	691b      	ldr	r3, [r3, #16]
 80b0e64:	4a04      	ldr	r2, [pc, #16]	; (80b0e78 <HAL_FLASH_Lock+0x1c>)
 80b0e66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80b0e6a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80b0e6c:	2300      	movs	r3, #0
}
 80b0e6e:	4618      	mov	r0, r3
 80b0e70:	46bd      	mov	sp, r7
 80b0e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b0e76:	4770      	bx	lr
 80b0e78:	40023c00 	.word	0x40023c00

080b0e7c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80b0e7c:	b580      	push	{r7, lr}
 80b0e7e:	b084      	sub	sp, #16
 80b0e80:	af00      	add	r7, sp, #0
 80b0e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80b0e84:	2300      	movs	r3, #0
 80b0e86:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80b0e88:	4b1a      	ldr	r3, [pc, #104]	; (80b0ef4 <FLASH_WaitForLastOperation+0x78>)
 80b0e8a:	2200      	movs	r2, #0
 80b0e8c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80b0e8e:	f7fe fbd1 	bl	80af634 <HAL_GetTick>
 80b0e92:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80b0e94:	e010      	b.n	80b0eb8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80b0e96:	687b      	ldr	r3, [r7, #4]
 80b0e98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80b0e9c:	d00c      	beq.n	80b0eb8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80b0e9e:	687b      	ldr	r3, [r7, #4]
 80b0ea0:	2b00      	cmp	r3, #0
 80b0ea2:	d007      	beq.n	80b0eb4 <FLASH_WaitForLastOperation+0x38>
 80b0ea4:	f7fe fbc6 	bl	80af634 <HAL_GetTick>
 80b0ea8:	4602      	mov	r2, r0
 80b0eaa:	68fb      	ldr	r3, [r7, #12]
 80b0eac:	1ad3      	subs	r3, r2, r3
 80b0eae:	687a      	ldr	r2, [r7, #4]
 80b0eb0:	429a      	cmp	r2, r3
 80b0eb2:	d201      	bcs.n	80b0eb8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80b0eb4:	2303      	movs	r3, #3
 80b0eb6:	e019      	b.n	80b0eec <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80b0eb8:	4b0f      	ldr	r3, [pc, #60]	; (80b0ef8 <FLASH_WaitForLastOperation+0x7c>)
 80b0eba:	68db      	ldr	r3, [r3, #12]
 80b0ebc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80b0ec0:	2b00      	cmp	r3, #0
 80b0ec2:	d1e8      	bne.n	80b0e96 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80b0ec4:	4b0c      	ldr	r3, [pc, #48]	; (80b0ef8 <FLASH_WaitForLastOperation+0x7c>)
 80b0ec6:	68db      	ldr	r3, [r3, #12]
 80b0ec8:	f003 0301 	and.w	r3, r3, #1
 80b0ecc:	2b00      	cmp	r3, #0
 80b0ece:	d002      	beq.n	80b0ed6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80b0ed0:	4b09      	ldr	r3, [pc, #36]	; (80b0ef8 <FLASH_WaitForLastOperation+0x7c>)
 80b0ed2:	2201      	movs	r2, #1
 80b0ed4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80b0ed6:	4b08      	ldr	r3, [pc, #32]	; (80b0ef8 <FLASH_WaitForLastOperation+0x7c>)
 80b0ed8:	68db      	ldr	r3, [r3, #12]
 80b0eda:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80b0ede:	2b00      	cmp	r3, #0
 80b0ee0:	d003      	beq.n	80b0eea <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80b0ee2:	f000 f8a5 	bl	80b1030 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80b0ee6:	2301      	movs	r3, #1
 80b0ee8:	e000      	b.n	80b0eec <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80b0eea:	2300      	movs	r3, #0
  
}  
 80b0eec:	4618      	mov	r0, r3
 80b0eee:	3710      	adds	r7, #16
 80b0ef0:	46bd      	mov	sp, r7
 80b0ef2:	bd80      	pop	{r7, pc}
 80b0ef4:	2001c324 	.word	0x2001c324
 80b0ef8:	40023c00 	.word	0x40023c00

080b0efc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80b0efc:	b480      	push	{r7}
 80b0efe:	b085      	sub	sp, #20
 80b0f00:	af00      	add	r7, sp, #0
 80b0f02:	60f8      	str	r0, [r7, #12]
 80b0f04:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80b0f08:	4b14      	ldr	r3, [pc, #80]	; (80b0f5c <FLASH_Program_DoubleWord+0x60>)
 80b0f0a:	691b      	ldr	r3, [r3, #16]
 80b0f0c:	4a13      	ldr	r2, [pc, #76]	; (80b0f5c <FLASH_Program_DoubleWord+0x60>)
 80b0f0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80b0f12:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80b0f14:	4b11      	ldr	r3, [pc, #68]	; (80b0f5c <FLASH_Program_DoubleWord+0x60>)
 80b0f16:	691b      	ldr	r3, [r3, #16]
 80b0f18:	4a10      	ldr	r2, [pc, #64]	; (80b0f5c <FLASH_Program_DoubleWord+0x60>)
 80b0f1a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80b0f1e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80b0f20:	4b0e      	ldr	r3, [pc, #56]	; (80b0f5c <FLASH_Program_DoubleWord+0x60>)
 80b0f22:	691b      	ldr	r3, [r3, #16]
 80b0f24:	4a0d      	ldr	r2, [pc, #52]	; (80b0f5c <FLASH_Program_DoubleWord+0x60>)
 80b0f26:	f043 0301 	orr.w	r3, r3, #1
 80b0f2a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80b0f2c:	68fb      	ldr	r3, [r7, #12]
 80b0f2e:	683a      	ldr	r2, [r7, #0]
 80b0f30:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80b0f32:	f3bf 8f6f 	isb	sy
}
 80b0f36:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80b0f38:	e9d7 0100 	ldrd	r0, r1, [r7]
 80b0f3c:	f04f 0200 	mov.w	r2, #0
 80b0f40:	f04f 0300 	mov.w	r3, #0
 80b0f44:	000a      	movs	r2, r1
 80b0f46:	2300      	movs	r3, #0
 80b0f48:	68f9      	ldr	r1, [r7, #12]
 80b0f4a:	3104      	adds	r1, #4
 80b0f4c:	4613      	mov	r3, r2
 80b0f4e:	600b      	str	r3, [r1, #0]
}
 80b0f50:	bf00      	nop
 80b0f52:	3714      	adds	r7, #20
 80b0f54:	46bd      	mov	sp, r7
 80b0f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b0f5a:	4770      	bx	lr
 80b0f5c:	40023c00 	.word	0x40023c00

080b0f60 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80b0f60:	b480      	push	{r7}
 80b0f62:	b083      	sub	sp, #12
 80b0f64:	af00      	add	r7, sp, #0
 80b0f66:	6078      	str	r0, [r7, #4]
 80b0f68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80b0f6a:	4b0d      	ldr	r3, [pc, #52]	; (80b0fa0 <FLASH_Program_Word+0x40>)
 80b0f6c:	691b      	ldr	r3, [r3, #16]
 80b0f6e:	4a0c      	ldr	r2, [pc, #48]	; (80b0fa0 <FLASH_Program_Word+0x40>)
 80b0f70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80b0f74:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80b0f76:	4b0a      	ldr	r3, [pc, #40]	; (80b0fa0 <FLASH_Program_Word+0x40>)
 80b0f78:	691b      	ldr	r3, [r3, #16]
 80b0f7a:	4a09      	ldr	r2, [pc, #36]	; (80b0fa0 <FLASH_Program_Word+0x40>)
 80b0f7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80b0f80:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80b0f82:	4b07      	ldr	r3, [pc, #28]	; (80b0fa0 <FLASH_Program_Word+0x40>)
 80b0f84:	691b      	ldr	r3, [r3, #16]
 80b0f86:	4a06      	ldr	r2, [pc, #24]	; (80b0fa0 <FLASH_Program_Word+0x40>)
 80b0f88:	f043 0301 	orr.w	r3, r3, #1
 80b0f8c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80b0f8e:	687b      	ldr	r3, [r7, #4]
 80b0f90:	683a      	ldr	r2, [r7, #0]
 80b0f92:	601a      	str	r2, [r3, #0]
}
 80b0f94:	bf00      	nop
 80b0f96:	370c      	adds	r7, #12
 80b0f98:	46bd      	mov	sp, r7
 80b0f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b0f9e:	4770      	bx	lr
 80b0fa0:	40023c00 	.word	0x40023c00

080b0fa4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80b0fa4:	b480      	push	{r7}
 80b0fa6:	b083      	sub	sp, #12
 80b0fa8:	af00      	add	r7, sp, #0
 80b0faa:	6078      	str	r0, [r7, #4]
 80b0fac:	460b      	mov	r3, r1
 80b0fae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80b0fb0:	4b0d      	ldr	r3, [pc, #52]	; (80b0fe8 <FLASH_Program_HalfWord+0x44>)
 80b0fb2:	691b      	ldr	r3, [r3, #16]
 80b0fb4:	4a0c      	ldr	r2, [pc, #48]	; (80b0fe8 <FLASH_Program_HalfWord+0x44>)
 80b0fb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80b0fba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80b0fbc:	4b0a      	ldr	r3, [pc, #40]	; (80b0fe8 <FLASH_Program_HalfWord+0x44>)
 80b0fbe:	691b      	ldr	r3, [r3, #16]
 80b0fc0:	4a09      	ldr	r2, [pc, #36]	; (80b0fe8 <FLASH_Program_HalfWord+0x44>)
 80b0fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80b0fc6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80b0fc8:	4b07      	ldr	r3, [pc, #28]	; (80b0fe8 <FLASH_Program_HalfWord+0x44>)
 80b0fca:	691b      	ldr	r3, [r3, #16]
 80b0fcc:	4a06      	ldr	r2, [pc, #24]	; (80b0fe8 <FLASH_Program_HalfWord+0x44>)
 80b0fce:	f043 0301 	orr.w	r3, r3, #1
 80b0fd2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80b0fd4:	687b      	ldr	r3, [r7, #4]
 80b0fd6:	887a      	ldrh	r2, [r7, #2]
 80b0fd8:	801a      	strh	r2, [r3, #0]
}
 80b0fda:	bf00      	nop
 80b0fdc:	370c      	adds	r7, #12
 80b0fde:	46bd      	mov	sp, r7
 80b0fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b0fe4:	4770      	bx	lr
 80b0fe6:	bf00      	nop
 80b0fe8:	40023c00 	.word	0x40023c00

080b0fec <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80b0fec:	b480      	push	{r7}
 80b0fee:	b083      	sub	sp, #12
 80b0ff0:	af00      	add	r7, sp, #0
 80b0ff2:	6078      	str	r0, [r7, #4]
 80b0ff4:	460b      	mov	r3, r1
 80b0ff6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80b0ff8:	4b0c      	ldr	r3, [pc, #48]	; (80b102c <FLASH_Program_Byte+0x40>)
 80b0ffa:	691b      	ldr	r3, [r3, #16]
 80b0ffc:	4a0b      	ldr	r2, [pc, #44]	; (80b102c <FLASH_Program_Byte+0x40>)
 80b0ffe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80b1002:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80b1004:	4b09      	ldr	r3, [pc, #36]	; (80b102c <FLASH_Program_Byte+0x40>)
 80b1006:	4a09      	ldr	r2, [pc, #36]	; (80b102c <FLASH_Program_Byte+0x40>)
 80b1008:	691b      	ldr	r3, [r3, #16]
 80b100a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80b100c:	4b07      	ldr	r3, [pc, #28]	; (80b102c <FLASH_Program_Byte+0x40>)
 80b100e:	691b      	ldr	r3, [r3, #16]
 80b1010:	4a06      	ldr	r2, [pc, #24]	; (80b102c <FLASH_Program_Byte+0x40>)
 80b1012:	f043 0301 	orr.w	r3, r3, #1
 80b1016:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80b1018:	687b      	ldr	r3, [r7, #4]
 80b101a:	78fa      	ldrb	r2, [r7, #3]
 80b101c:	701a      	strb	r2, [r3, #0]
}
 80b101e:	bf00      	nop
 80b1020:	370c      	adds	r7, #12
 80b1022:	46bd      	mov	sp, r7
 80b1024:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b1028:	4770      	bx	lr
 80b102a:	bf00      	nop
 80b102c:	40023c00 	.word	0x40023c00

080b1030 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80b1030:	b480      	push	{r7}
 80b1032:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80b1034:	4b27      	ldr	r3, [pc, #156]	; (80b10d4 <FLASH_SetErrorCode+0xa4>)
 80b1036:	68db      	ldr	r3, [r3, #12]
 80b1038:	f003 0310 	and.w	r3, r3, #16
 80b103c:	2b00      	cmp	r3, #0
 80b103e:	d008      	beq.n	80b1052 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80b1040:	4b25      	ldr	r3, [pc, #148]	; (80b10d8 <FLASH_SetErrorCode+0xa8>)
 80b1042:	69db      	ldr	r3, [r3, #28]
 80b1044:	f043 0310 	orr.w	r3, r3, #16
 80b1048:	4a23      	ldr	r2, [pc, #140]	; (80b10d8 <FLASH_SetErrorCode+0xa8>)
 80b104a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80b104c:	4b21      	ldr	r3, [pc, #132]	; (80b10d4 <FLASH_SetErrorCode+0xa4>)
 80b104e:	2210      	movs	r2, #16
 80b1050:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80b1052:	4b20      	ldr	r3, [pc, #128]	; (80b10d4 <FLASH_SetErrorCode+0xa4>)
 80b1054:	68db      	ldr	r3, [r3, #12]
 80b1056:	f003 0320 	and.w	r3, r3, #32
 80b105a:	2b00      	cmp	r3, #0
 80b105c:	d008      	beq.n	80b1070 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80b105e:	4b1e      	ldr	r3, [pc, #120]	; (80b10d8 <FLASH_SetErrorCode+0xa8>)
 80b1060:	69db      	ldr	r3, [r3, #28]
 80b1062:	f043 0308 	orr.w	r3, r3, #8
 80b1066:	4a1c      	ldr	r2, [pc, #112]	; (80b10d8 <FLASH_SetErrorCode+0xa8>)
 80b1068:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80b106a:	4b1a      	ldr	r3, [pc, #104]	; (80b10d4 <FLASH_SetErrorCode+0xa4>)
 80b106c:	2220      	movs	r2, #32
 80b106e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80b1070:	4b18      	ldr	r3, [pc, #96]	; (80b10d4 <FLASH_SetErrorCode+0xa4>)
 80b1072:	68db      	ldr	r3, [r3, #12]
 80b1074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80b1078:	2b00      	cmp	r3, #0
 80b107a:	d008      	beq.n	80b108e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80b107c:	4b16      	ldr	r3, [pc, #88]	; (80b10d8 <FLASH_SetErrorCode+0xa8>)
 80b107e:	69db      	ldr	r3, [r3, #28]
 80b1080:	f043 0304 	orr.w	r3, r3, #4
 80b1084:	4a14      	ldr	r2, [pc, #80]	; (80b10d8 <FLASH_SetErrorCode+0xa8>)
 80b1086:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80b1088:	4b12      	ldr	r3, [pc, #72]	; (80b10d4 <FLASH_SetErrorCode+0xa4>)
 80b108a:	2240      	movs	r2, #64	; 0x40
 80b108c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80b108e:	4b11      	ldr	r3, [pc, #68]	; (80b10d4 <FLASH_SetErrorCode+0xa4>)
 80b1090:	68db      	ldr	r3, [r3, #12]
 80b1092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80b1096:	2b00      	cmp	r3, #0
 80b1098:	d008      	beq.n	80b10ac <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80b109a:	4b0f      	ldr	r3, [pc, #60]	; (80b10d8 <FLASH_SetErrorCode+0xa8>)
 80b109c:	69db      	ldr	r3, [r3, #28]
 80b109e:	f043 0302 	orr.w	r3, r3, #2
 80b10a2:	4a0d      	ldr	r2, [pc, #52]	; (80b10d8 <FLASH_SetErrorCode+0xa8>)
 80b10a4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80b10a6:	4b0b      	ldr	r3, [pc, #44]	; (80b10d4 <FLASH_SetErrorCode+0xa4>)
 80b10a8:	2280      	movs	r2, #128	; 0x80
 80b10aa:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80b10ac:	4b09      	ldr	r3, [pc, #36]	; (80b10d4 <FLASH_SetErrorCode+0xa4>)
 80b10ae:	68db      	ldr	r3, [r3, #12]
 80b10b0:	f003 0302 	and.w	r3, r3, #2
 80b10b4:	2b00      	cmp	r3, #0
 80b10b6:	d008      	beq.n	80b10ca <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80b10b8:	4b07      	ldr	r3, [pc, #28]	; (80b10d8 <FLASH_SetErrorCode+0xa8>)
 80b10ba:	69db      	ldr	r3, [r3, #28]
 80b10bc:	f043 0320 	orr.w	r3, r3, #32
 80b10c0:	4a05      	ldr	r2, [pc, #20]	; (80b10d8 <FLASH_SetErrorCode+0xa8>)
 80b10c2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80b10c4:	4b03      	ldr	r3, [pc, #12]	; (80b10d4 <FLASH_SetErrorCode+0xa4>)
 80b10c6:	2202      	movs	r2, #2
 80b10c8:	60da      	str	r2, [r3, #12]
  }
}
 80b10ca:	bf00      	nop
 80b10cc:	46bd      	mov	sp, r7
 80b10ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b10d2:	4770      	bx	lr
 80b10d4:	40023c00 	.word	0x40023c00
 80b10d8:	2001c324 	.word	0x2001c324

080b10dc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80b10dc:	b580      	push	{r7, lr}
 80b10de:	b084      	sub	sp, #16
 80b10e0:	af00      	add	r7, sp, #0
 80b10e2:	6078      	str	r0, [r7, #4]
 80b10e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80b10e6:	2301      	movs	r3, #1
 80b10e8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80b10ea:	2300      	movs	r3, #0
 80b10ec:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80b10ee:	4b31      	ldr	r3, [pc, #196]	; (80b11b4 <HAL_FLASHEx_Erase+0xd8>)
 80b10f0:	7e1b      	ldrb	r3, [r3, #24]
 80b10f2:	2b01      	cmp	r3, #1
 80b10f4:	d101      	bne.n	80b10fa <HAL_FLASHEx_Erase+0x1e>
 80b10f6:	2302      	movs	r3, #2
 80b10f8:	e058      	b.n	80b11ac <HAL_FLASHEx_Erase+0xd0>
 80b10fa:	4b2e      	ldr	r3, [pc, #184]	; (80b11b4 <HAL_FLASHEx_Erase+0xd8>)
 80b10fc:	2201      	movs	r2, #1
 80b10fe:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80b1100:	f24c 3050 	movw	r0, #50000	; 0xc350
 80b1104:	f7ff feba 	bl	80b0e7c <FLASH_WaitForLastOperation>
 80b1108:	4603      	mov	r3, r0
 80b110a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80b110c:	7bfb      	ldrb	r3, [r7, #15]
 80b110e:	2b00      	cmp	r3, #0
 80b1110:	d148      	bne.n	80b11a4 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80b1112:	683b      	ldr	r3, [r7, #0]
 80b1114:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80b1118:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80b111a:	687b      	ldr	r3, [r7, #4]
 80b111c:	681b      	ldr	r3, [r3, #0]
 80b111e:	2b01      	cmp	r3, #1
 80b1120:	d115      	bne.n	80b114e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80b1122:	687b      	ldr	r3, [r7, #4]
 80b1124:	691b      	ldr	r3, [r3, #16]
 80b1126:	b2da      	uxtb	r2, r3
 80b1128:	687b      	ldr	r3, [r7, #4]
 80b112a:	685b      	ldr	r3, [r3, #4]
 80b112c:	4619      	mov	r1, r3
 80b112e:	4610      	mov	r0, r2
 80b1130:	f000 f844 	bl	80b11bc <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80b1134:	f24c 3050 	movw	r0, #50000	; 0xc350
 80b1138:	f7ff fea0 	bl	80b0e7c <FLASH_WaitForLastOperation>
 80b113c:	4603      	mov	r3, r0
 80b113e:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80b1140:	4b1d      	ldr	r3, [pc, #116]	; (80b11b8 <HAL_FLASHEx_Erase+0xdc>)
 80b1142:	691b      	ldr	r3, [r3, #16]
 80b1144:	4a1c      	ldr	r2, [pc, #112]	; (80b11b8 <HAL_FLASHEx_Erase+0xdc>)
 80b1146:	f023 0304 	bic.w	r3, r3, #4
 80b114a:	6113      	str	r3, [r2, #16]
 80b114c:	e028      	b.n	80b11a0 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80b114e:	687b      	ldr	r3, [r7, #4]
 80b1150:	689b      	ldr	r3, [r3, #8]
 80b1152:	60bb      	str	r3, [r7, #8]
 80b1154:	e01c      	b.n	80b1190 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80b1156:	687b      	ldr	r3, [r7, #4]
 80b1158:	691b      	ldr	r3, [r3, #16]
 80b115a:	b2db      	uxtb	r3, r3
 80b115c:	4619      	mov	r1, r3
 80b115e:	68b8      	ldr	r0, [r7, #8]
 80b1160:	f000 f850 	bl	80b1204 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80b1164:	f24c 3050 	movw	r0, #50000	; 0xc350
 80b1168:	f7ff fe88 	bl	80b0e7c <FLASH_WaitForLastOperation>
 80b116c:	4603      	mov	r3, r0
 80b116e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80b1170:	4b11      	ldr	r3, [pc, #68]	; (80b11b8 <HAL_FLASHEx_Erase+0xdc>)
 80b1172:	691b      	ldr	r3, [r3, #16]
 80b1174:	4a10      	ldr	r2, [pc, #64]	; (80b11b8 <HAL_FLASHEx_Erase+0xdc>)
 80b1176:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80b117a:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 80b117c:	7bfb      	ldrb	r3, [r7, #15]
 80b117e:	2b00      	cmp	r3, #0
 80b1180:	d003      	beq.n	80b118a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80b1182:	683b      	ldr	r3, [r7, #0]
 80b1184:	68ba      	ldr	r2, [r7, #8]
 80b1186:	601a      	str	r2, [r3, #0]
          break;
 80b1188:	e00a      	b.n	80b11a0 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80b118a:	68bb      	ldr	r3, [r7, #8]
 80b118c:	3301      	adds	r3, #1
 80b118e:	60bb      	str	r3, [r7, #8]
 80b1190:	687b      	ldr	r3, [r7, #4]
 80b1192:	68da      	ldr	r2, [r3, #12]
 80b1194:	687b      	ldr	r3, [r7, #4]
 80b1196:	689b      	ldr	r3, [r3, #8]
 80b1198:	4413      	add	r3, r2
 80b119a:	68ba      	ldr	r2, [r7, #8]
 80b119c:	429a      	cmp	r2, r3
 80b119e:	d3da      	bcc.n	80b1156 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 80b11a0:	f000 f878 	bl	80b1294 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80b11a4:	4b03      	ldr	r3, [pc, #12]	; (80b11b4 <HAL_FLASHEx_Erase+0xd8>)
 80b11a6:	2200      	movs	r2, #0
 80b11a8:	761a      	strb	r2, [r3, #24]

  return status;
 80b11aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80b11ac:	4618      	mov	r0, r3
 80b11ae:	3710      	adds	r7, #16
 80b11b0:	46bd      	mov	sp, r7
 80b11b2:	bd80      	pop	{r7, pc}
 80b11b4:	2001c324 	.word	0x2001c324
 80b11b8:	40023c00 	.word	0x40023c00

080b11bc <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80b11bc:	b480      	push	{r7}
 80b11be:	b083      	sub	sp, #12
 80b11c0:	af00      	add	r7, sp, #0
 80b11c2:	4603      	mov	r3, r0
 80b11c4:	6039      	str	r1, [r7, #0]
 80b11c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80b11c8:	4b0d      	ldr	r3, [pc, #52]	; (80b1200 <FLASH_MassErase+0x44>)
 80b11ca:	691b      	ldr	r3, [r3, #16]
 80b11cc:	4a0c      	ldr	r2, [pc, #48]	; (80b1200 <FLASH_MassErase+0x44>)
 80b11ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80b11d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80b11d4:	4b0a      	ldr	r3, [pc, #40]	; (80b1200 <FLASH_MassErase+0x44>)
 80b11d6:	691b      	ldr	r3, [r3, #16]
 80b11d8:	4a09      	ldr	r2, [pc, #36]	; (80b1200 <FLASH_MassErase+0x44>)
 80b11da:	f043 0304 	orr.w	r3, r3, #4
 80b11de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 80b11e0:	4b07      	ldr	r3, [pc, #28]	; (80b1200 <FLASH_MassErase+0x44>)
 80b11e2:	691a      	ldr	r2, [r3, #16]
 80b11e4:	79fb      	ldrb	r3, [r7, #7]
 80b11e6:	021b      	lsls	r3, r3, #8
 80b11e8:	4313      	orrs	r3, r2
 80b11ea:	4a05      	ldr	r2, [pc, #20]	; (80b1200 <FLASH_MassErase+0x44>)
 80b11ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80b11f0:	6113      	str	r3, [r2, #16]
}
 80b11f2:	bf00      	nop
 80b11f4:	370c      	adds	r7, #12
 80b11f6:	46bd      	mov	sp, r7
 80b11f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b11fc:	4770      	bx	lr
 80b11fe:	bf00      	nop
 80b1200:	40023c00 	.word	0x40023c00

080b1204 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80b1204:	b480      	push	{r7}
 80b1206:	b085      	sub	sp, #20
 80b1208:	af00      	add	r7, sp, #0
 80b120a:	6078      	str	r0, [r7, #4]
 80b120c:	460b      	mov	r3, r1
 80b120e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80b1210:	2300      	movs	r3, #0
 80b1212:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80b1214:	78fb      	ldrb	r3, [r7, #3]
 80b1216:	2b00      	cmp	r3, #0
 80b1218:	d102      	bne.n	80b1220 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80b121a:	2300      	movs	r3, #0
 80b121c:	60fb      	str	r3, [r7, #12]
 80b121e:	e010      	b.n	80b1242 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80b1220:	78fb      	ldrb	r3, [r7, #3]
 80b1222:	2b01      	cmp	r3, #1
 80b1224:	d103      	bne.n	80b122e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80b1226:	f44f 7380 	mov.w	r3, #256	; 0x100
 80b122a:	60fb      	str	r3, [r7, #12]
 80b122c:	e009      	b.n	80b1242 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80b122e:	78fb      	ldrb	r3, [r7, #3]
 80b1230:	2b02      	cmp	r3, #2
 80b1232:	d103      	bne.n	80b123c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80b1234:	f44f 7300 	mov.w	r3, #512	; 0x200
 80b1238:	60fb      	str	r3, [r7, #12]
 80b123a:	e002      	b.n	80b1242 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80b123c:	f44f 7340 	mov.w	r3, #768	; 0x300
 80b1240:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80b1242:	4b13      	ldr	r3, [pc, #76]	; (80b1290 <FLASH_Erase_Sector+0x8c>)
 80b1244:	691b      	ldr	r3, [r3, #16]
 80b1246:	4a12      	ldr	r2, [pc, #72]	; (80b1290 <FLASH_Erase_Sector+0x8c>)
 80b1248:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80b124c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80b124e:	4b10      	ldr	r3, [pc, #64]	; (80b1290 <FLASH_Erase_Sector+0x8c>)
 80b1250:	691a      	ldr	r2, [r3, #16]
 80b1252:	490f      	ldr	r1, [pc, #60]	; (80b1290 <FLASH_Erase_Sector+0x8c>)
 80b1254:	68fb      	ldr	r3, [r7, #12]
 80b1256:	4313      	orrs	r3, r2
 80b1258:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80b125a:	4b0d      	ldr	r3, [pc, #52]	; (80b1290 <FLASH_Erase_Sector+0x8c>)
 80b125c:	691b      	ldr	r3, [r3, #16]
 80b125e:	4a0c      	ldr	r2, [pc, #48]	; (80b1290 <FLASH_Erase_Sector+0x8c>)
 80b1260:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80b1264:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80b1266:	4b0a      	ldr	r3, [pc, #40]	; (80b1290 <FLASH_Erase_Sector+0x8c>)
 80b1268:	691a      	ldr	r2, [r3, #16]
 80b126a:	687b      	ldr	r3, [r7, #4]
 80b126c:	00db      	lsls	r3, r3, #3
 80b126e:	4313      	orrs	r3, r2
 80b1270:	4a07      	ldr	r2, [pc, #28]	; (80b1290 <FLASH_Erase_Sector+0x8c>)
 80b1272:	f043 0302 	orr.w	r3, r3, #2
 80b1276:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80b1278:	4b05      	ldr	r3, [pc, #20]	; (80b1290 <FLASH_Erase_Sector+0x8c>)
 80b127a:	691b      	ldr	r3, [r3, #16]
 80b127c:	4a04      	ldr	r2, [pc, #16]	; (80b1290 <FLASH_Erase_Sector+0x8c>)
 80b127e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80b1282:	6113      	str	r3, [r2, #16]
}
 80b1284:	bf00      	nop
 80b1286:	3714      	adds	r7, #20
 80b1288:	46bd      	mov	sp, r7
 80b128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b128e:	4770      	bx	lr
 80b1290:	40023c00 	.word	0x40023c00

080b1294 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80b1294:	b480      	push	{r7}
 80b1296:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 80b1298:	4b20      	ldr	r3, [pc, #128]	; (80b131c <FLASH_FlushCaches+0x88>)
 80b129a:	681b      	ldr	r3, [r3, #0]
 80b129c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80b12a0:	2b00      	cmp	r3, #0
 80b12a2:	d017      	beq.n	80b12d4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80b12a4:	4b1d      	ldr	r3, [pc, #116]	; (80b131c <FLASH_FlushCaches+0x88>)
 80b12a6:	681b      	ldr	r3, [r3, #0]
 80b12a8:	4a1c      	ldr	r2, [pc, #112]	; (80b131c <FLASH_FlushCaches+0x88>)
 80b12aa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80b12ae:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80b12b0:	4b1a      	ldr	r3, [pc, #104]	; (80b131c <FLASH_FlushCaches+0x88>)
 80b12b2:	681b      	ldr	r3, [r3, #0]
 80b12b4:	4a19      	ldr	r2, [pc, #100]	; (80b131c <FLASH_FlushCaches+0x88>)
 80b12b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80b12ba:	6013      	str	r3, [r2, #0]
 80b12bc:	4b17      	ldr	r3, [pc, #92]	; (80b131c <FLASH_FlushCaches+0x88>)
 80b12be:	681b      	ldr	r3, [r3, #0]
 80b12c0:	4a16      	ldr	r2, [pc, #88]	; (80b131c <FLASH_FlushCaches+0x88>)
 80b12c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80b12c6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80b12c8:	4b14      	ldr	r3, [pc, #80]	; (80b131c <FLASH_FlushCaches+0x88>)
 80b12ca:	681b      	ldr	r3, [r3, #0]
 80b12cc:	4a13      	ldr	r2, [pc, #76]	; (80b131c <FLASH_FlushCaches+0x88>)
 80b12ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80b12d2:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80b12d4:	4b11      	ldr	r3, [pc, #68]	; (80b131c <FLASH_FlushCaches+0x88>)
 80b12d6:	681b      	ldr	r3, [r3, #0]
 80b12d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80b12dc:	2b00      	cmp	r3, #0
 80b12de:	d017      	beq.n	80b1310 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80b12e0:	4b0e      	ldr	r3, [pc, #56]	; (80b131c <FLASH_FlushCaches+0x88>)
 80b12e2:	681b      	ldr	r3, [r3, #0]
 80b12e4:	4a0d      	ldr	r2, [pc, #52]	; (80b131c <FLASH_FlushCaches+0x88>)
 80b12e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80b12ea:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80b12ec:	4b0b      	ldr	r3, [pc, #44]	; (80b131c <FLASH_FlushCaches+0x88>)
 80b12ee:	681b      	ldr	r3, [r3, #0]
 80b12f0:	4a0a      	ldr	r2, [pc, #40]	; (80b131c <FLASH_FlushCaches+0x88>)
 80b12f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80b12f6:	6013      	str	r3, [r2, #0]
 80b12f8:	4b08      	ldr	r3, [pc, #32]	; (80b131c <FLASH_FlushCaches+0x88>)
 80b12fa:	681b      	ldr	r3, [r3, #0]
 80b12fc:	4a07      	ldr	r2, [pc, #28]	; (80b131c <FLASH_FlushCaches+0x88>)
 80b12fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80b1302:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80b1304:	4b05      	ldr	r3, [pc, #20]	; (80b131c <FLASH_FlushCaches+0x88>)
 80b1306:	681b      	ldr	r3, [r3, #0]
 80b1308:	4a04      	ldr	r2, [pc, #16]	; (80b131c <FLASH_FlushCaches+0x88>)
 80b130a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80b130e:	6013      	str	r3, [r2, #0]
  }
}
 80b1310:	bf00      	nop
 80b1312:	46bd      	mov	sp, r7
 80b1314:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b1318:	4770      	bx	lr
 80b131a:	bf00      	nop
 80b131c:	40023c00 	.word	0x40023c00

080b1320 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80b1320:	b480      	push	{r7}
 80b1322:	b089      	sub	sp, #36	; 0x24
 80b1324:	af00      	add	r7, sp, #0
 80b1326:	6078      	str	r0, [r7, #4]
 80b1328:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80b132a:	2300      	movs	r3, #0
 80b132c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80b132e:	2300      	movs	r3, #0
 80b1330:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80b1332:	2300      	movs	r3, #0
 80b1334:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80b1336:	2300      	movs	r3, #0
 80b1338:	61fb      	str	r3, [r7, #28]
 80b133a:	e16b      	b.n	80b1614 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80b133c:	2201      	movs	r2, #1
 80b133e:	69fb      	ldr	r3, [r7, #28]
 80b1340:	fa02 f303 	lsl.w	r3, r2, r3
 80b1344:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80b1346:	683b      	ldr	r3, [r7, #0]
 80b1348:	681b      	ldr	r3, [r3, #0]
 80b134a:	697a      	ldr	r2, [r7, #20]
 80b134c:	4013      	ands	r3, r2
 80b134e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80b1350:	693a      	ldr	r2, [r7, #16]
 80b1352:	697b      	ldr	r3, [r7, #20]
 80b1354:	429a      	cmp	r2, r3
 80b1356:	f040 815a 	bne.w	80b160e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80b135a:	683b      	ldr	r3, [r7, #0]
 80b135c:	685b      	ldr	r3, [r3, #4]
 80b135e:	f003 0303 	and.w	r3, r3, #3
 80b1362:	2b01      	cmp	r3, #1
 80b1364:	d005      	beq.n	80b1372 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80b1366:	683b      	ldr	r3, [r7, #0]
 80b1368:	685b      	ldr	r3, [r3, #4]
 80b136a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80b136e:	2b02      	cmp	r3, #2
 80b1370:	d130      	bne.n	80b13d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80b1372:	687b      	ldr	r3, [r7, #4]
 80b1374:	689b      	ldr	r3, [r3, #8]
 80b1376:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80b1378:	69fb      	ldr	r3, [r7, #28]
 80b137a:	005b      	lsls	r3, r3, #1
 80b137c:	2203      	movs	r2, #3
 80b137e:	fa02 f303 	lsl.w	r3, r2, r3
 80b1382:	43db      	mvns	r3, r3
 80b1384:	69ba      	ldr	r2, [r7, #24]
 80b1386:	4013      	ands	r3, r2
 80b1388:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80b138a:	683b      	ldr	r3, [r7, #0]
 80b138c:	68da      	ldr	r2, [r3, #12]
 80b138e:	69fb      	ldr	r3, [r7, #28]
 80b1390:	005b      	lsls	r3, r3, #1
 80b1392:	fa02 f303 	lsl.w	r3, r2, r3
 80b1396:	69ba      	ldr	r2, [r7, #24]
 80b1398:	4313      	orrs	r3, r2
 80b139a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80b139c:	687b      	ldr	r3, [r7, #4]
 80b139e:	69ba      	ldr	r2, [r7, #24]
 80b13a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80b13a2:	687b      	ldr	r3, [r7, #4]
 80b13a4:	685b      	ldr	r3, [r3, #4]
 80b13a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80b13a8:	2201      	movs	r2, #1
 80b13aa:	69fb      	ldr	r3, [r7, #28]
 80b13ac:	fa02 f303 	lsl.w	r3, r2, r3
 80b13b0:	43db      	mvns	r3, r3
 80b13b2:	69ba      	ldr	r2, [r7, #24]
 80b13b4:	4013      	ands	r3, r2
 80b13b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80b13b8:	683b      	ldr	r3, [r7, #0]
 80b13ba:	685b      	ldr	r3, [r3, #4]
 80b13bc:	091b      	lsrs	r3, r3, #4
 80b13be:	f003 0201 	and.w	r2, r3, #1
 80b13c2:	69fb      	ldr	r3, [r7, #28]
 80b13c4:	fa02 f303 	lsl.w	r3, r2, r3
 80b13c8:	69ba      	ldr	r2, [r7, #24]
 80b13ca:	4313      	orrs	r3, r2
 80b13cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80b13ce:	687b      	ldr	r3, [r7, #4]
 80b13d0:	69ba      	ldr	r2, [r7, #24]
 80b13d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80b13d4:	683b      	ldr	r3, [r7, #0]
 80b13d6:	685b      	ldr	r3, [r3, #4]
 80b13d8:	f003 0303 	and.w	r3, r3, #3
 80b13dc:	2b03      	cmp	r3, #3
 80b13de:	d017      	beq.n	80b1410 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80b13e0:	687b      	ldr	r3, [r7, #4]
 80b13e2:	68db      	ldr	r3, [r3, #12]
 80b13e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80b13e6:	69fb      	ldr	r3, [r7, #28]
 80b13e8:	005b      	lsls	r3, r3, #1
 80b13ea:	2203      	movs	r2, #3
 80b13ec:	fa02 f303 	lsl.w	r3, r2, r3
 80b13f0:	43db      	mvns	r3, r3
 80b13f2:	69ba      	ldr	r2, [r7, #24]
 80b13f4:	4013      	ands	r3, r2
 80b13f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80b13f8:	683b      	ldr	r3, [r7, #0]
 80b13fa:	689a      	ldr	r2, [r3, #8]
 80b13fc:	69fb      	ldr	r3, [r7, #28]
 80b13fe:	005b      	lsls	r3, r3, #1
 80b1400:	fa02 f303 	lsl.w	r3, r2, r3
 80b1404:	69ba      	ldr	r2, [r7, #24]
 80b1406:	4313      	orrs	r3, r2
 80b1408:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80b140a:	687b      	ldr	r3, [r7, #4]
 80b140c:	69ba      	ldr	r2, [r7, #24]
 80b140e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80b1410:	683b      	ldr	r3, [r7, #0]
 80b1412:	685b      	ldr	r3, [r3, #4]
 80b1414:	f003 0303 	and.w	r3, r3, #3
 80b1418:	2b02      	cmp	r3, #2
 80b141a:	d123      	bne.n	80b1464 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80b141c:	69fb      	ldr	r3, [r7, #28]
 80b141e:	08da      	lsrs	r2, r3, #3
 80b1420:	687b      	ldr	r3, [r7, #4]
 80b1422:	3208      	adds	r2, #8
 80b1424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80b1428:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80b142a:	69fb      	ldr	r3, [r7, #28]
 80b142c:	f003 0307 	and.w	r3, r3, #7
 80b1430:	009b      	lsls	r3, r3, #2
 80b1432:	220f      	movs	r2, #15
 80b1434:	fa02 f303 	lsl.w	r3, r2, r3
 80b1438:	43db      	mvns	r3, r3
 80b143a:	69ba      	ldr	r2, [r7, #24]
 80b143c:	4013      	ands	r3, r2
 80b143e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80b1440:	683b      	ldr	r3, [r7, #0]
 80b1442:	691a      	ldr	r2, [r3, #16]
 80b1444:	69fb      	ldr	r3, [r7, #28]
 80b1446:	f003 0307 	and.w	r3, r3, #7
 80b144a:	009b      	lsls	r3, r3, #2
 80b144c:	fa02 f303 	lsl.w	r3, r2, r3
 80b1450:	69ba      	ldr	r2, [r7, #24]
 80b1452:	4313      	orrs	r3, r2
 80b1454:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80b1456:	69fb      	ldr	r3, [r7, #28]
 80b1458:	08da      	lsrs	r2, r3, #3
 80b145a:	687b      	ldr	r3, [r7, #4]
 80b145c:	3208      	adds	r2, #8
 80b145e:	69b9      	ldr	r1, [r7, #24]
 80b1460:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80b1464:	687b      	ldr	r3, [r7, #4]
 80b1466:	681b      	ldr	r3, [r3, #0]
 80b1468:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80b146a:	69fb      	ldr	r3, [r7, #28]
 80b146c:	005b      	lsls	r3, r3, #1
 80b146e:	2203      	movs	r2, #3
 80b1470:	fa02 f303 	lsl.w	r3, r2, r3
 80b1474:	43db      	mvns	r3, r3
 80b1476:	69ba      	ldr	r2, [r7, #24]
 80b1478:	4013      	ands	r3, r2
 80b147a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80b147c:	683b      	ldr	r3, [r7, #0]
 80b147e:	685b      	ldr	r3, [r3, #4]
 80b1480:	f003 0203 	and.w	r2, r3, #3
 80b1484:	69fb      	ldr	r3, [r7, #28]
 80b1486:	005b      	lsls	r3, r3, #1
 80b1488:	fa02 f303 	lsl.w	r3, r2, r3
 80b148c:	69ba      	ldr	r2, [r7, #24]
 80b148e:	4313      	orrs	r3, r2
 80b1490:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80b1492:	687b      	ldr	r3, [r7, #4]
 80b1494:	69ba      	ldr	r2, [r7, #24]
 80b1496:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80b1498:	683b      	ldr	r3, [r7, #0]
 80b149a:	685b      	ldr	r3, [r3, #4]
 80b149c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80b14a0:	2b00      	cmp	r3, #0
 80b14a2:	f000 80b4 	beq.w	80b160e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80b14a6:	2300      	movs	r3, #0
 80b14a8:	60fb      	str	r3, [r7, #12]
 80b14aa:	4b60      	ldr	r3, [pc, #384]	; (80b162c <HAL_GPIO_Init+0x30c>)
 80b14ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80b14ae:	4a5f      	ldr	r2, [pc, #380]	; (80b162c <HAL_GPIO_Init+0x30c>)
 80b14b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80b14b4:	6453      	str	r3, [r2, #68]	; 0x44
 80b14b6:	4b5d      	ldr	r3, [pc, #372]	; (80b162c <HAL_GPIO_Init+0x30c>)
 80b14b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80b14ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80b14be:	60fb      	str	r3, [r7, #12]
 80b14c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80b14c2:	4a5b      	ldr	r2, [pc, #364]	; (80b1630 <HAL_GPIO_Init+0x310>)
 80b14c4:	69fb      	ldr	r3, [r7, #28]
 80b14c6:	089b      	lsrs	r3, r3, #2
 80b14c8:	3302      	adds	r3, #2
 80b14ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80b14ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80b14d0:	69fb      	ldr	r3, [r7, #28]
 80b14d2:	f003 0303 	and.w	r3, r3, #3
 80b14d6:	009b      	lsls	r3, r3, #2
 80b14d8:	220f      	movs	r2, #15
 80b14da:	fa02 f303 	lsl.w	r3, r2, r3
 80b14de:	43db      	mvns	r3, r3
 80b14e0:	69ba      	ldr	r2, [r7, #24]
 80b14e2:	4013      	ands	r3, r2
 80b14e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80b14e6:	687b      	ldr	r3, [r7, #4]
 80b14e8:	4a52      	ldr	r2, [pc, #328]	; (80b1634 <HAL_GPIO_Init+0x314>)
 80b14ea:	4293      	cmp	r3, r2
 80b14ec:	d02b      	beq.n	80b1546 <HAL_GPIO_Init+0x226>
 80b14ee:	687b      	ldr	r3, [r7, #4]
 80b14f0:	4a51      	ldr	r2, [pc, #324]	; (80b1638 <HAL_GPIO_Init+0x318>)
 80b14f2:	4293      	cmp	r3, r2
 80b14f4:	d025      	beq.n	80b1542 <HAL_GPIO_Init+0x222>
 80b14f6:	687b      	ldr	r3, [r7, #4]
 80b14f8:	4a50      	ldr	r2, [pc, #320]	; (80b163c <HAL_GPIO_Init+0x31c>)
 80b14fa:	4293      	cmp	r3, r2
 80b14fc:	d01f      	beq.n	80b153e <HAL_GPIO_Init+0x21e>
 80b14fe:	687b      	ldr	r3, [r7, #4]
 80b1500:	4a4f      	ldr	r2, [pc, #316]	; (80b1640 <HAL_GPIO_Init+0x320>)
 80b1502:	4293      	cmp	r3, r2
 80b1504:	d019      	beq.n	80b153a <HAL_GPIO_Init+0x21a>
 80b1506:	687b      	ldr	r3, [r7, #4]
 80b1508:	4a4e      	ldr	r2, [pc, #312]	; (80b1644 <HAL_GPIO_Init+0x324>)
 80b150a:	4293      	cmp	r3, r2
 80b150c:	d013      	beq.n	80b1536 <HAL_GPIO_Init+0x216>
 80b150e:	687b      	ldr	r3, [r7, #4]
 80b1510:	4a4d      	ldr	r2, [pc, #308]	; (80b1648 <HAL_GPIO_Init+0x328>)
 80b1512:	4293      	cmp	r3, r2
 80b1514:	d00d      	beq.n	80b1532 <HAL_GPIO_Init+0x212>
 80b1516:	687b      	ldr	r3, [r7, #4]
 80b1518:	4a4c      	ldr	r2, [pc, #304]	; (80b164c <HAL_GPIO_Init+0x32c>)
 80b151a:	4293      	cmp	r3, r2
 80b151c:	d007      	beq.n	80b152e <HAL_GPIO_Init+0x20e>
 80b151e:	687b      	ldr	r3, [r7, #4]
 80b1520:	4a4b      	ldr	r2, [pc, #300]	; (80b1650 <HAL_GPIO_Init+0x330>)
 80b1522:	4293      	cmp	r3, r2
 80b1524:	d101      	bne.n	80b152a <HAL_GPIO_Init+0x20a>
 80b1526:	2307      	movs	r3, #7
 80b1528:	e00e      	b.n	80b1548 <HAL_GPIO_Init+0x228>
 80b152a:	2308      	movs	r3, #8
 80b152c:	e00c      	b.n	80b1548 <HAL_GPIO_Init+0x228>
 80b152e:	2306      	movs	r3, #6
 80b1530:	e00a      	b.n	80b1548 <HAL_GPIO_Init+0x228>
 80b1532:	2305      	movs	r3, #5
 80b1534:	e008      	b.n	80b1548 <HAL_GPIO_Init+0x228>
 80b1536:	2304      	movs	r3, #4
 80b1538:	e006      	b.n	80b1548 <HAL_GPIO_Init+0x228>
 80b153a:	2303      	movs	r3, #3
 80b153c:	e004      	b.n	80b1548 <HAL_GPIO_Init+0x228>
 80b153e:	2302      	movs	r3, #2
 80b1540:	e002      	b.n	80b1548 <HAL_GPIO_Init+0x228>
 80b1542:	2301      	movs	r3, #1
 80b1544:	e000      	b.n	80b1548 <HAL_GPIO_Init+0x228>
 80b1546:	2300      	movs	r3, #0
 80b1548:	69fa      	ldr	r2, [r7, #28]
 80b154a:	f002 0203 	and.w	r2, r2, #3
 80b154e:	0092      	lsls	r2, r2, #2
 80b1550:	4093      	lsls	r3, r2
 80b1552:	69ba      	ldr	r2, [r7, #24]
 80b1554:	4313      	orrs	r3, r2
 80b1556:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80b1558:	4935      	ldr	r1, [pc, #212]	; (80b1630 <HAL_GPIO_Init+0x310>)
 80b155a:	69fb      	ldr	r3, [r7, #28]
 80b155c:	089b      	lsrs	r3, r3, #2
 80b155e:	3302      	adds	r3, #2
 80b1560:	69ba      	ldr	r2, [r7, #24]
 80b1562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80b1566:	4b3b      	ldr	r3, [pc, #236]	; (80b1654 <HAL_GPIO_Init+0x334>)
 80b1568:	681b      	ldr	r3, [r3, #0]
 80b156a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80b156c:	693b      	ldr	r3, [r7, #16]
 80b156e:	43db      	mvns	r3, r3
 80b1570:	69ba      	ldr	r2, [r7, #24]
 80b1572:	4013      	ands	r3, r2
 80b1574:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80b1576:	683b      	ldr	r3, [r7, #0]
 80b1578:	685b      	ldr	r3, [r3, #4]
 80b157a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80b157e:	2b00      	cmp	r3, #0
 80b1580:	d003      	beq.n	80b158a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80b1582:	69ba      	ldr	r2, [r7, #24]
 80b1584:	693b      	ldr	r3, [r7, #16]
 80b1586:	4313      	orrs	r3, r2
 80b1588:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80b158a:	4a32      	ldr	r2, [pc, #200]	; (80b1654 <HAL_GPIO_Init+0x334>)
 80b158c:	69bb      	ldr	r3, [r7, #24]
 80b158e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80b1590:	4b30      	ldr	r3, [pc, #192]	; (80b1654 <HAL_GPIO_Init+0x334>)
 80b1592:	685b      	ldr	r3, [r3, #4]
 80b1594:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80b1596:	693b      	ldr	r3, [r7, #16]
 80b1598:	43db      	mvns	r3, r3
 80b159a:	69ba      	ldr	r2, [r7, #24]
 80b159c:	4013      	ands	r3, r2
 80b159e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80b15a0:	683b      	ldr	r3, [r7, #0]
 80b15a2:	685b      	ldr	r3, [r3, #4]
 80b15a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80b15a8:	2b00      	cmp	r3, #0
 80b15aa:	d003      	beq.n	80b15b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80b15ac:	69ba      	ldr	r2, [r7, #24]
 80b15ae:	693b      	ldr	r3, [r7, #16]
 80b15b0:	4313      	orrs	r3, r2
 80b15b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80b15b4:	4a27      	ldr	r2, [pc, #156]	; (80b1654 <HAL_GPIO_Init+0x334>)
 80b15b6:	69bb      	ldr	r3, [r7, #24]
 80b15b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80b15ba:	4b26      	ldr	r3, [pc, #152]	; (80b1654 <HAL_GPIO_Init+0x334>)
 80b15bc:	689b      	ldr	r3, [r3, #8]
 80b15be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80b15c0:	693b      	ldr	r3, [r7, #16]
 80b15c2:	43db      	mvns	r3, r3
 80b15c4:	69ba      	ldr	r2, [r7, #24]
 80b15c6:	4013      	ands	r3, r2
 80b15c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80b15ca:	683b      	ldr	r3, [r7, #0]
 80b15cc:	685b      	ldr	r3, [r3, #4]
 80b15ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80b15d2:	2b00      	cmp	r3, #0
 80b15d4:	d003      	beq.n	80b15de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80b15d6:	69ba      	ldr	r2, [r7, #24]
 80b15d8:	693b      	ldr	r3, [r7, #16]
 80b15da:	4313      	orrs	r3, r2
 80b15dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80b15de:	4a1d      	ldr	r2, [pc, #116]	; (80b1654 <HAL_GPIO_Init+0x334>)
 80b15e0:	69bb      	ldr	r3, [r7, #24]
 80b15e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80b15e4:	4b1b      	ldr	r3, [pc, #108]	; (80b1654 <HAL_GPIO_Init+0x334>)
 80b15e6:	68db      	ldr	r3, [r3, #12]
 80b15e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80b15ea:	693b      	ldr	r3, [r7, #16]
 80b15ec:	43db      	mvns	r3, r3
 80b15ee:	69ba      	ldr	r2, [r7, #24]
 80b15f0:	4013      	ands	r3, r2
 80b15f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80b15f4:	683b      	ldr	r3, [r7, #0]
 80b15f6:	685b      	ldr	r3, [r3, #4]
 80b15f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80b15fc:	2b00      	cmp	r3, #0
 80b15fe:	d003      	beq.n	80b1608 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80b1600:	69ba      	ldr	r2, [r7, #24]
 80b1602:	693b      	ldr	r3, [r7, #16]
 80b1604:	4313      	orrs	r3, r2
 80b1606:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80b1608:	4a12      	ldr	r2, [pc, #72]	; (80b1654 <HAL_GPIO_Init+0x334>)
 80b160a:	69bb      	ldr	r3, [r7, #24]
 80b160c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80b160e:	69fb      	ldr	r3, [r7, #28]
 80b1610:	3301      	adds	r3, #1
 80b1612:	61fb      	str	r3, [r7, #28]
 80b1614:	69fb      	ldr	r3, [r7, #28]
 80b1616:	2b0f      	cmp	r3, #15
 80b1618:	f67f ae90 	bls.w	80b133c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80b161c:	bf00      	nop
 80b161e:	bf00      	nop
 80b1620:	3724      	adds	r7, #36	; 0x24
 80b1622:	46bd      	mov	sp, r7
 80b1624:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b1628:	4770      	bx	lr
 80b162a:	bf00      	nop
 80b162c:	40023800 	.word	0x40023800
 80b1630:	40013800 	.word	0x40013800
 80b1634:	40020000 	.word	0x40020000
 80b1638:	40020400 	.word	0x40020400
 80b163c:	40020800 	.word	0x40020800
 80b1640:	40020c00 	.word	0x40020c00
 80b1644:	40021000 	.word	0x40021000
 80b1648:	40021400 	.word	0x40021400
 80b164c:	40021800 	.word	0x40021800
 80b1650:	40021c00 	.word	0x40021c00
 80b1654:	40013c00 	.word	0x40013c00

080b1658 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80b1658:	b480      	push	{r7}
 80b165a:	b085      	sub	sp, #20
 80b165c:	af00      	add	r7, sp, #0
 80b165e:	6078      	str	r0, [r7, #4]
 80b1660:	460b      	mov	r3, r1
 80b1662:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80b1664:	687b      	ldr	r3, [r7, #4]
 80b1666:	691a      	ldr	r2, [r3, #16]
 80b1668:	887b      	ldrh	r3, [r7, #2]
 80b166a:	4013      	ands	r3, r2
 80b166c:	2b00      	cmp	r3, #0
 80b166e:	d002      	beq.n	80b1676 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80b1670:	2301      	movs	r3, #1
 80b1672:	73fb      	strb	r3, [r7, #15]
 80b1674:	e001      	b.n	80b167a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80b1676:	2300      	movs	r3, #0
 80b1678:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80b167a:	7bfb      	ldrb	r3, [r7, #15]
}
 80b167c:	4618      	mov	r0, r3
 80b167e:	3714      	adds	r7, #20
 80b1680:	46bd      	mov	sp, r7
 80b1682:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b1686:	4770      	bx	lr

080b1688 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80b1688:	b480      	push	{r7}
 80b168a:	b083      	sub	sp, #12
 80b168c:	af00      	add	r7, sp, #0
 80b168e:	6078      	str	r0, [r7, #4]
 80b1690:	460b      	mov	r3, r1
 80b1692:	807b      	strh	r3, [r7, #2]
 80b1694:	4613      	mov	r3, r2
 80b1696:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80b1698:	787b      	ldrb	r3, [r7, #1]
 80b169a:	2b00      	cmp	r3, #0
 80b169c:	d003      	beq.n	80b16a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80b169e:	887a      	ldrh	r2, [r7, #2]
 80b16a0:	687b      	ldr	r3, [r7, #4]
 80b16a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80b16a4:	e003      	b.n	80b16ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80b16a6:	887b      	ldrh	r3, [r7, #2]
 80b16a8:	041a      	lsls	r2, r3, #16
 80b16aa:	687b      	ldr	r3, [r7, #4]
 80b16ac:	619a      	str	r2, [r3, #24]
}
 80b16ae:	bf00      	nop
 80b16b0:	370c      	adds	r7, #12
 80b16b2:	46bd      	mov	sp, r7
 80b16b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b16b8:	4770      	bx	lr
	...

080b16bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80b16bc:	b580      	push	{r7, lr}
 80b16be:	b082      	sub	sp, #8
 80b16c0:	af00      	add	r7, sp, #0
 80b16c2:	4603      	mov	r3, r0
 80b16c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80b16c6:	4b08      	ldr	r3, [pc, #32]	; (80b16e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80b16c8:	695a      	ldr	r2, [r3, #20]
 80b16ca:	88fb      	ldrh	r3, [r7, #6]
 80b16cc:	4013      	ands	r3, r2
 80b16ce:	2b00      	cmp	r3, #0
 80b16d0:	d006      	beq.n	80b16e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80b16d2:	4a05      	ldr	r2, [pc, #20]	; (80b16e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80b16d4:	88fb      	ldrh	r3, [r7, #6]
 80b16d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80b16d8:	88fb      	ldrh	r3, [r7, #6]
 80b16da:	4618      	mov	r0, r3
 80b16dc:	f7f8 f9c6 	bl	80a9a6c <HAL_GPIO_EXTI_Callback>
  }
}
 80b16e0:	bf00      	nop
 80b16e2:	3708      	adds	r7, #8
 80b16e4:	46bd      	mov	sp, r7
 80b16e6:	bd80      	pop	{r7, pc}
 80b16e8:	40013c00 	.word	0x40013c00

080b16ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80b16ec:	b580      	push	{r7, lr}
 80b16ee:	b084      	sub	sp, #16
 80b16f0:	af00      	add	r7, sp, #0
 80b16f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80b16f4:	687b      	ldr	r3, [r7, #4]
 80b16f6:	2b00      	cmp	r3, #0
 80b16f8:	d101      	bne.n	80b16fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80b16fa:	2301      	movs	r3, #1
 80b16fc:	e12b      	b.n	80b1956 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80b16fe:	687b      	ldr	r3, [r7, #4]
 80b1700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80b1704:	b2db      	uxtb	r3, r3
 80b1706:	2b00      	cmp	r3, #0
 80b1708:	d106      	bne.n	80b1718 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80b170a:	687b      	ldr	r3, [r7, #4]
 80b170c:	2200      	movs	r2, #0
 80b170e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80b1712:	6878      	ldr	r0, [r7, #4]
 80b1714:	f7fc fab6 	bl	80adc84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80b1718:	687b      	ldr	r3, [r7, #4]
 80b171a:	2224      	movs	r2, #36	; 0x24
 80b171c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80b1720:	687b      	ldr	r3, [r7, #4]
 80b1722:	681b      	ldr	r3, [r3, #0]
 80b1724:	681a      	ldr	r2, [r3, #0]
 80b1726:	687b      	ldr	r3, [r7, #4]
 80b1728:	681b      	ldr	r3, [r3, #0]
 80b172a:	f022 0201 	bic.w	r2, r2, #1
 80b172e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80b1730:	687b      	ldr	r3, [r7, #4]
 80b1732:	681b      	ldr	r3, [r3, #0]
 80b1734:	681a      	ldr	r2, [r3, #0]
 80b1736:	687b      	ldr	r3, [r7, #4]
 80b1738:	681b      	ldr	r3, [r3, #0]
 80b173a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80b173e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80b1740:	687b      	ldr	r3, [r7, #4]
 80b1742:	681b      	ldr	r3, [r3, #0]
 80b1744:	681a      	ldr	r2, [r3, #0]
 80b1746:	687b      	ldr	r3, [r7, #4]
 80b1748:	681b      	ldr	r3, [r3, #0]
 80b174a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80b174e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80b1750:	f002 f84a 	bl	80b37e8 <HAL_RCC_GetPCLK1Freq>
 80b1754:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80b1756:	687b      	ldr	r3, [r7, #4]
 80b1758:	685b      	ldr	r3, [r3, #4]
 80b175a:	4a81      	ldr	r2, [pc, #516]	; (80b1960 <HAL_I2C_Init+0x274>)
 80b175c:	4293      	cmp	r3, r2
 80b175e:	d807      	bhi.n	80b1770 <HAL_I2C_Init+0x84>
 80b1760:	68fb      	ldr	r3, [r7, #12]
 80b1762:	4a80      	ldr	r2, [pc, #512]	; (80b1964 <HAL_I2C_Init+0x278>)
 80b1764:	4293      	cmp	r3, r2
 80b1766:	bf94      	ite	ls
 80b1768:	2301      	movls	r3, #1
 80b176a:	2300      	movhi	r3, #0
 80b176c:	b2db      	uxtb	r3, r3
 80b176e:	e006      	b.n	80b177e <HAL_I2C_Init+0x92>
 80b1770:	68fb      	ldr	r3, [r7, #12]
 80b1772:	4a7d      	ldr	r2, [pc, #500]	; (80b1968 <HAL_I2C_Init+0x27c>)
 80b1774:	4293      	cmp	r3, r2
 80b1776:	bf94      	ite	ls
 80b1778:	2301      	movls	r3, #1
 80b177a:	2300      	movhi	r3, #0
 80b177c:	b2db      	uxtb	r3, r3
 80b177e:	2b00      	cmp	r3, #0
 80b1780:	d001      	beq.n	80b1786 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80b1782:	2301      	movs	r3, #1
 80b1784:	e0e7      	b.n	80b1956 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80b1786:	68fb      	ldr	r3, [r7, #12]
 80b1788:	4a78      	ldr	r2, [pc, #480]	; (80b196c <HAL_I2C_Init+0x280>)
 80b178a:	fba2 2303 	umull	r2, r3, r2, r3
 80b178e:	0c9b      	lsrs	r3, r3, #18
 80b1790:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80b1792:	687b      	ldr	r3, [r7, #4]
 80b1794:	681b      	ldr	r3, [r3, #0]
 80b1796:	685b      	ldr	r3, [r3, #4]
 80b1798:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80b179c:	687b      	ldr	r3, [r7, #4]
 80b179e:	681b      	ldr	r3, [r3, #0]
 80b17a0:	68ba      	ldr	r2, [r7, #8]
 80b17a2:	430a      	orrs	r2, r1
 80b17a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80b17a6:	687b      	ldr	r3, [r7, #4]
 80b17a8:	681b      	ldr	r3, [r3, #0]
 80b17aa:	6a1b      	ldr	r3, [r3, #32]
 80b17ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80b17b0:	687b      	ldr	r3, [r7, #4]
 80b17b2:	685b      	ldr	r3, [r3, #4]
 80b17b4:	4a6a      	ldr	r2, [pc, #424]	; (80b1960 <HAL_I2C_Init+0x274>)
 80b17b6:	4293      	cmp	r3, r2
 80b17b8:	d802      	bhi.n	80b17c0 <HAL_I2C_Init+0xd4>
 80b17ba:	68bb      	ldr	r3, [r7, #8]
 80b17bc:	3301      	adds	r3, #1
 80b17be:	e009      	b.n	80b17d4 <HAL_I2C_Init+0xe8>
 80b17c0:	68bb      	ldr	r3, [r7, #8]
 80b17c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80b17c6:	fb02 f303 	mul.w	r3, r2, r3
 80b17ca:	4a69      	ldr	r2, [pc, #420]	; (80b1970 <HAL_I2C_Init+0x284>)
 80b17cc:	fba2 2303 	umull	r2, r3, r2, r3
 80b17d0:	099b      	lsrs	r3, r3, #6
 80b17d2:	3301      	adds	r3, #1
 80b17d4:	687a      	ldr	r2, [r7, #4]
 80b17d6:	6812      	ldr	r2, [r2, #0]
 80b17d8:	430b      	orrs	r3, r1
 80b17da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80b17dc:	687b      	ldr	r3, [r7, #4]
 80b17de:	681b      	ldr	r3, [r3, #0]
 80b17e0:	69db      	ldr	r3, [r3, #28]
 80b17e2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80b17e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80b17ea:	687b      	ldr	r3, [r7, #4]
 80b17ec:	685b      	ldr	r3, [r3, #4]
 80b17ee:	495c      	ldr	r1, [pc, #368]	; (80b1960 <HAL_I2C_Init+0x274>)
 80b17f0:	428b      	cmp	r3, r1
 80b17f2:	d819      	bhi.n	80b1828 <HAL_I2C_Init+0x13c>
 80b17f4:	68fb      	ldr	r3, [r7, #12]
 80b17f6:	1e59      	subs	r1, r3, #1
 80b17f8:	687b      	ldr	r3, [r7, #4]
 80b17fa:	685b      	ldr	r3, [r3, #4]
 80b17fc:	005b      	lsls	r3, r3, #1
 80b17fe:	fbb1 f3f3 	udiv	r3, r1, r3
 80b1802:	1c59      	adds	r1, r3, #1
 80b1804:	f640 73fc 	movw	r3, #4092	; 0xffc
 80b1808:	400b      	ands	r3, r1
 80b180a:	2b00      	cmp	r3, #0
 80b180c:	d00a      	beq.n	80b1824 <HAL_I2C_Init+0x138>
 80b180e:	68fb      	ldr	r3, [r7, #12]
 80b1810:	1e59      	subs	r1, r3, #1
 80b1812:	687b      	ldr	r3, [r7, #4]
 80b1814:	685b      	ldr	r3, [r3, #4]
 80b1816:	005b      	lsls	r3, r3, #1
 80b1818:	fbb1 f3f3 	udiv	r3, r1, r3
 80b181c:	3301      	adds	r3, #1
 80b181e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80b1822:	e051      	b.n	80b18c8 <HAL_I2C_Init+0x1dc>
 80b1824:	2304      	movs	r3, #4
 80b1826:	e04f      	b.n	80b18c8 <HAL_I2C_Init+0x1dc>
 80b1828:	687b      	ldr	r3, [r7, #4]
 80b182a:	689b      	ldr	r3, [r3, #8]
 80b182c:	2b00      	cmp	r3, #0
 80b182e:	d111      	bne.n	80b1854 <HAL_I2C_Init+0x168>
 80b1830:	68fb      	ldr	r3, [r7, #12]
 80b1832:	1e58      	subs	r0, r3, #1
 80b1834:	687b      	ldr	r3, [r7, #4]
 80b1836:	6859      	ldr	r1, [r3, #4]
 80b1838:	460b      	mov	r3, r1
 80b183a:	005b      	lsls	r3, r3, #1
 80b183c:	440b      	add	r3, r1
 80b183e:	fbb0 f3f3 	udiv	r3, r0, r3
 80b1842:	3301      	adds	r3, #1
 80b1844:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80b1848:	2b00      	cmp	r3, #0
 80b184a:	bf0c      	ite	eq
 80b184c:	2301      	moveq	r3, #1
 80b184e:	2300      	movne	r3, #0
 80b1850:	b2db      	uxtb	r3, r3
 80b1852:	e012      	b.n	80b187a <HAL_I2C_Init+0x18e>
 80b1854:	68fb      	ldr	r3, [r7, #12]
 80b1856:	1e58      	subs	r0, r3, #1
 80b1858:	687b      	ldr	r3, [r7, #4]
 80b185a:	6859      	ldr	r1, [r3, #4]
 80b185c:	460b      	mov	r3, r1
 80b185e:	009b      	lsls	r3, r3, #2
 80b1860:	440b      	add	r3, r1
 80b1862:	0099      	lsls	r1, r3, #2
 80b1864:	440b      	add	r3, r1
 80b1866:	fbb0 f3f3 	udiv	r3, r0, r3
 80b186a:	3301      	adds	r3, #1
 80b186c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80b1870:	2b00      	cmp	r3, #0
 80b1872:	bf0c      	ite	eq
 80b1874:	2301      	moveq	r3, #1
 80b1876:	2300      	movne	r3, #0
 80b1878:	b2db      	uxtb	r3, r3
 80b187a:	2b00      	cmp	r3, #0
 80b187c:	d001      	beq.n	80b1882 <HAL_I2C_Init+0x196>
 80b187e:	2301      	movs	r3, #1
 80b1880:	e022      	b.n	80b18c8 <HAL_I2C_Init+0x1dc>
 80b1882:	687b      	ldr	r3, [r7, #4]
 80b1884:	689b      	ldr	r3, [r3, #8]
 80b1886:	2b00      	cmp	r3, #0
 80b1888:	d10e      	bne.n	80b18a8 <HAL_I2C_Init+0x1bc>
 80b188a:	68fb      	ldr	r3, [r7, #12]
 80b188c:	1e58      	subs	r0, r3, #1
 80b188e:	687b      	ldr	r3, [r7, #4]
 80b1890:	6859      	ldr	r1, [r3, #4]
 80b1892:	460b      	mov	r3, r1
 80b1894:	005b      	lsls	r3, r3, #1
 80b1896:	440b      	add	r3, r1
 80b1898:	fbb0 f3f3 	udiv	r3, r0, r3
 80b189c:	3301      	adds	r3, #1
 80b189e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80b18a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80b18a6:	e00f      	b.n	80b18c8 <HAL_I2C_Init+0x1dc>
 80b18a8:	68fb      	ldr	r3, [r7, #12]
 80b18aa:	1e58      	subs	r0, r3, #1
 80b18ac:	687b      	ldr	r3, [r7, #4]
 80b18ae:	6859      	ldr	r1, [r3, #4]
 80b18b0:	460b      	mov	r3, r1
 80b18b2:	009b      	lsls	r3, r3, #2
 80b18b4:	440b      	add	r3, r1
 80b18b6:	0099      	lsls	r1, r3, #2
 80b18b8:	440b      	add	r3, r1
 80b18ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80b18be:	3301      	adds	r3, #1
 80b18c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80b18c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80b18c8:	6879      	ldr	r1, [r7, #4]
 80b18ca:	6809      	ldr	r1, [r1, #0]
 80b18cc:	4313      	orrs	r3, r2
 80b18ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80b18d0:	687b      	ldr	r3, [r7, #4]
 80b18d2:	681b      	ldr	r3, [r3, #0]
 80b18d4:	681b      	ldr	r3, [r3, #0]
 80b18d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80b18da:	687b      	ldr	r3, [r7, #4]
 80b18dc:	69da      	ldr	r2, [r3, #28]
 80b18de:	687b      	ldr	r3, [r7, #4]
 80b18e0:	6a1b      	ldr	r3, [r3, #32]
 80b18e2:	431a      	orrs	r2, r3
 80b18e4:	687b      	ldr	r3, [r7, #4]
 80b18e6:	681b      	ldr	r3, [r3, #0]
 80b18e8:	430a      	orrs	r2, r1
 80b18ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80b18ec:	687b      	ldr	r3, [r7, #4]
 80b18ee:	681b      	ldr	r3, [r3, #0]
 80b18f0:	689b      	ldr	r3, [r3, #8]
 80b18f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80b18f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80b18fa:	687a      	ldr	r2, [r7, #4]
 80b18fc:	6911      	ldr	r1, [r2, #16]
 80b18fe:	687a      	ldr	r2, [r7, #4]
 80b1900:	68d2      	ldr	r2, [r2, #12]
 80b1902:	4311      	orrs	r1, r2
 80b1904:	687a      	ldr	r2, [r7, #4]
 80b1906:	6812      	ldr	r2, [r2, #0]
 80b1908:	430b      	orrs	r3, r1
 80b190a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80b190c:	687b      	ldr	r3, [r7, #4]
 80b190e:	681b      	ldr	r3, [r3, #0]
 80b1910:	68db      	ldr	r3, [r3, #12]
 80b1912:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80b1916:	687b      	ldr	r3, [r7, #4]
 80b1918:	695a      	ldr	r2, [r3, #20]
 80b191a:	687b      	ldr	r3, [r7, #4]
 80b191c:	699b      	ldr	r3, [r3, #24]
 80b191e:	431a      	orrs	r2, r3
 80b1920:	687b      	ldr	r3, [r7, #4]
 80b1922:	681b      	ldr	r3, [r3, #0]
 80b1924:	430a      	orrs	r2, r1
 80b1926:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80b1928:	687b      	ldr	r3, [r7, #4]
 80b192a:	681b      	ldr	r3, [r3, #0]
 80b192c:	681a      	ldr	r2, [r3, #0]
 80b192e:	687b      	ldr	r3, [r7, #4]
 80b1930:	681b      	ldr	r3, [r3, #0]
 80b1932:	f042 0201 	orr.w	r2, r2, #1
 80b1936:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80b1938:	687b      	ldr	r3, [r7, #4]
 80b193a:	2200      	movs	r2, #0
 80b193c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80b193e:	687b      	ldr	r3, [r7, #4]
 80b1940:	2220      	movs	r2, #32
 80b1942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80b1946:	687b      	ldr	r3, [r7, #4]
 80b1948:	2200      	movs	r2, #0
 80b194a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80b194c:	687b      	ldr	r3, [r7, #4]
 80b194e:	2200      	movs	r2, #0
 80b1950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80b1954:	2300      	movs	r3, #0
}
 80b1956:	4618      	mov	r0, r3
 80b1958:	3710      	adds	r7, #16
 80b195a:	46bd      	mov	sp, r7
 80b195c:	bd80      	pop	{r7, pc}
 80b195e:	bf00      	nop
 80b1960:	000186a0 	.word	0x000186a0
 80b1964:	001e847f 	.word	0x001e847f
 80b1968:	003d08ff 	.word	0x003d08ff
 80b196c:	431bde83 	.word	0x431bde83
 80b1970:	10624dd3 	.word	0x10624dd3

080b1974 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80b1974:	b580      	push	{r7, lr}
 80b1976:	b088      	sub	sp, #32
 80b1978:	af02      	add	r7, sp, #8
 80b197a:	60f8      	str	r0, [r7, #12]
 80b197c:	607a      	str	r2, [r7, #4]
 80b197e:	461a      	mov	r2, r3
 80b1980:	460b      	mov	r3, r1
 80b1982:	817b      	strh	r3, [r7, #10]
 80b1984:	4613      	mov	r3, r2
 80b1986:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80b1988:	f7fd fe54 	bl	80af634 <HAL_GetTick>
 80b198c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80b198e:	68fb      	ldr	r3, [r7, #12]
 80b1990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80b1994:	b2db      	uxtb	r3, r3
 80b1996:	2b20      	cmp	r3, #32
 80b1998:	f040 80e0 	bne.w	80b1b5c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80b199c:	697b      	ldr	r3, [r7, #20]
 80b199e:	9300      	str	r3, [sp, #0]
 80b19a0:	2319      	movs	r3, #25
 80b19a2:	2201      	movs	r2, #1
 80b19a4:	4970      	ldr	r1, [pc, #448]	; (80b1b68 <HAL_I2C_Master_Transmit+0x1f4>)
 80b19a6:	68f8      	ldr	r0, [r7, #12]
 80b19a8:	f001 f8f6 	bl	80b2b98 <I2C_WaitOnFlagUntilTimeout>
 80b19ac:	4603      	mov	r3, r0
 80b19ae:	2b00      	cmp	r3, #0
 80b19b0:	d001      	beq.n	80b19b6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80b19b2:	2302      	movs	r3, #2
 80b19b4:	e0d3      	b.n	80b1b5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80b19b6:	68fb      	ldr	r3, [r7, #12]
 80b19b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80b19bc:	2b01      	cmp	r3, #1
 80b19be:	d101      	bne.n	80b19c4 <HAL_I2C_Master_Transmit+0x50>
 80b19c0:	2302      	movs	r3, #2
 80b19c2:	e0cc      	b.n	80b1b5e <HAL_I2C_Master_Transmit+0x1ea>
 80b19c4:	68fb      	ldr	r3, [r7, #12]
 80b19c6:	2201      	movs	r2, #1
 80b19c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80b19cc:	68fb      	ldr	r3, [r7, #12]
 80b19ce:	681b      	ldr	r3, [r3, #0]
 80b19d0:	681b      	ldr	r3, [r3, #0]
 80b19d2:	f003 0301 	and.w	r3, r3, #1
 80b19d6:	2b01      	cmp	r3, #1
 80b19d8:	d007      	beq.n	80b19ea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80b19da:	68fb      	ldr	r3, [r7, #12]
 80b19dc:	681b      	ldr	r3, [r3, #0]
 80b19de:	681a      	ldr	r2, [r3, #0]
 80b19e0:	68fb      	ldr	r3, [r7, #12]
 80b19e2:	681b      	ldr	r3, [r3, #0]
 80b19e4:	f042 0201 	orr.w	r2, r2, #1
 80b19e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80b19ea:	68fb      	ldr	r3, [r7, #12]
 80b19ec:	681b      	ldr	r3, [r3, #0]
 80b19ee:	681a      	ldr	r2, [r3, #0]
 80b19f0:	68fb      	ldr	r3, [r7, #12]
 80b19f2:	681b      	ldr	r3, [r3, #0]
 80b19f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80b19f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80b19fa:	68fb      	ldr	r3, [r7, #12]
 80b19fc:	2221      	movs	r2, #33	; 0x21
 80b19fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80b1a02:	68fb      	ldr	r3, [r7, #12]
 80b1a04:	2210      	movs	r2, #16
 80b1a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80b1a0a:	68fb      	ldr	r3, [r7, #12]
 80b1a0c:	2200      	movs	r2, #0
 80b1a0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80b1a10:	68fb      	ldr	r3, [r7, #12]
 80b1a12:	687a      	ldr	r2, [r7, #4]
 80b1a14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80b1a16:	68fb      	ldr	r3, [r7, #12]
 80b1a18:	893a      	ldrh	r2, [r7, #8]
 80b1a1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80b1a1c:	68fb      	ldr	r3, [r7, #12]
 80b1a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80b1a20:	b29a      	uxth	r2, r3
 80b1a22:	68fb      	ldr	r3, [r7, #12]
 80b1a24:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80b1a26:	68fb      	ldr	r3, [r7, #12]
 80b1a28:	4a50      	ldr	r2, [pc, #320]	; (80b1b6c <HAL_I2C_Master_Transmit+0x1f8>)
 80b1a2a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80b1a2c:	8979      	ldrh	r1, [r7, #10]
 80b1a2e:	697b      	ldr	r3, [r7, #20]
 80b1a30:	6a3a      	ldr	r2, [r7, #32]
 80b1a32:	68f8      	ldr	r0, [r7, #12]
 80b1a34:	f000 fde2 	bl	80b25fc <I2C_MasterRequestWrite>
 80b1a38:	4603      	mov	r3, r0
 80b1a3a:	2b00      	cmp	r3, #0
 80b1a3c:	d001      	beq.n	80b1a42 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80b1a3e:	2301      	movs	r3, #1
 80b1a40:	e08d      	b.n	80b1b5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80b1a42:	2300      	movs	r3, #0
 80b1a44:	613b      	str	r3, [r7, #16]
 80b1a46:	68fb      	ldr	r3, [r7, #12]
 80b1a48:	681b      	ldr	r3, [r3, #0]
 80b1a4a:	695b      	ldr	r3, [r3, #20]
 80b1a4c:	613b      	str	r3, [r7, #16]
 80b1a4e:	68fb      	ldr	r3, [r7, #12]
 80b1a50:	681b      	ldr	r3, [r3, #0]
 80b1a52:	699b      	ldr	r3, [r3, #24]
 80b1a54:	613b      	str	r3, [r7, #16]
 80b1a56:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80b1a58:	e066      	b.n	80b1b28 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80b1a5a:	697a      	ldr	r2, [r7, #20]
 80b1a5c:	6a39      	ldr	r1, [r7, #32]
 80b1a5e:	68f8      	ldr	r0, [r7, #12]
 80b1a60:	f001 f970 	bl	80b2d44 <I2C_WaitOnTXEFlagUntilTimeout>
 80b1a64:	4603      	mov	r3, r0
 80b1a66:	2b00      	cmp	r3, #0
 80b1a68:	d00d      	beq.n	80b1a86 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80b1a6a:	68fb      	ldr	r3, [r7, #12]
 80b1a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80b1a6e:	2b04      	cmp	r3, #4
 80b1a70:	d107      	bne.n	80b1a82 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80b1a72:	68fb      	ldr	r3, [r7, #12]
 80b1a74:	681b      	ldr	r3, [r3, #0]
 80b1a76:	681a      	ldr	r2, [r3, #0]
 80b1a78:	68fb      	ldr	r3, [r7, #12]
 80b1a7a:	681b      	ldr	r3, [r3, #0]
 80b1a7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80b1a80:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80b1a82:	2301      	movs	r3, #1
 80b1a84:	e06b      	b.n	80b1b5e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80b1a86:	68fb      	ldr	r3, [r7, #12]
 80b1a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80b1a8a:	781a      	ldrb	r2, [r3, #0]
 80b1a8c:	68fb      	ldr	r3, [r7, #12]
 80b1a8e:	681b      	ldr	r3, [r3, #0]
 80b1a90:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80b1a92:	68fb      	ldr	r3, [r7, #12]
 80b1a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80b1a96:	1c5a      	adds	r2, r3, #1
 80b1a98:	68fb      	ldr	r3, [r7, #12]
 80b1a9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80b1a9c:	68fb      	ldr	r3, [r7, #12]
 80b1a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80b1aa0:	b29b      	uxth	r3, r3
 80b1aa2:	3b01      	subs	r3, #1
 80b1aa4:	b29a      	uxth	r2, r3
 80b1aa6:	68fb      	ldr	r3, [r7, #12]
 80b1aa8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80b1aaa:	68fb      	ldr	r3, [r7, #12]
 80b1aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80b1aae:	3b01      	subs	r3, #1
 80b1ab0:	b29a      	uxth	r2, r3
 80b1ab2:	68fb      	ldr	r3, [r7, #12]
 80b1ab4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80b1ab6:	68fb      	ldr	r3, [r7, #12]
 80b1ab8:	681b      	ldr	r3, [r3, #0]
 80b1aba:	695b      	ldr	r3, [r3, #20]
 80b1abc:	f003 0304 	and.w	r3, r3, #4
 80b1ac0:	2b04      	cmp	r3, #4
 80b1ac2:	d11b      	bne.n	80b1afc <HAL_I2C_Master_Transmit+0x188>
 80b1ac4:	68fb      	ldr	r3, [r7, #12]
 80b1ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80b1ac8:	2b00      	cmp	r3, #0
 80b1aca:	d017      	beq.n	80b1afc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80b1acc:	68fb      	ldr	r3, [r7, #12]
 80b1ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80b1ad0:	781a      	ldrb	r2, [r3, #0]
 80b1ad2:	68fb      	ldr	r3, [r7, #12]
 80b1ad4:	681b      	ldr	r3, [r3, #0]
 80b1ad6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80b1ad8:	68fb      	ldr	r3, [r7, #12]
 80b1ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80b1adc:	1c5a      	adds	r2, r3, #1
 80b1ade:	68fb      	ldr	r3, [r7, #12]
 80b1ae0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80b1ae2:	68fb      	ldr	r3, [r7, #12]
 80b1ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80b1ae6:	b29b      	uxth	r3, r3
 80b1ae8:	3b01      	subs	r3, #1
 80b1aea:	b29a      	uxth	r2, r3
 80b1aec:	68fb      	ldr	r3, [r7, #12]
 80b1aee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80b1af0:	68fb      	ldr	r3, [r7, #12]
 80b1af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80b1af4:	3b01      	subs	r3, #1
 80b1af6:	b29a      	uxth	r2, r3
 80b1af8:	68fb      	ldr	r3, [r7, #12]
 80b1afa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80b1afc:	697a      	ldr	r2, [r7, #20]
 80b1afe:	6a39      	ldr	r1, [r7, #32]
 80b1b00:	68f8      	ldr	r0, [r7, #12]
 80b1b02:	f001 f960 	bl	80b2dc6 <I2C_WaitOnBTFFlagUntilTimeout>
 80b1b06:	4603      	mov	r3, r0
 80b1b08:	2b00      	cmp	r3, #0
 80b1b0a:	d00d      	beq.n	80b1b28 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80b1b0c:	68fb      	ldr	r3, [r7, #12]
 80b1b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80b1b10:	2b04      	cmp	r3, #4
 80b1b12:	d107      	bne.n	80b1b24 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80b1b14:	68fb      	ldr	r3, [r7, #12]
 80b1b16:	681b      	ldr	r3, [r3, #0]
 80b1b18:	681a      	ldr	r2, [r3, #0]
 80b1b1a:	68fb      	ldr	r3, [r7, #12]
 80b1b1c:	681b      	ldr	r3, [r3, #0]
 80b1b1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80b1b22:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80b1b24:	2301      	movs	r3, #1
 80b1b26:	e01a      	b.n	80b1b5e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80b1b28:	68fb      	ldr	r3, [r7, #12]
 80b1b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80b1b2c:	2b00      	cmp	r3, #0
 80b1b2e:	d194      	bne.n	80b1a5a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80b1b30:	68fb      	ldr	r3, [r7, #12]
 80b1b32:	681b      	ldr	r3, [r3, #0]
 80b1b34:	681a      	ldr	r2, [r3, #0]
 80b1b36:	68fb      	ldr	r3, [r7, #12]
 80b1b38:	681b      	ldr	r3, [r3, #0]
 80b1b3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80b1b3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80b1b40:	68fb      	ldr	r3, [r7, #12]
 80b1b42:	2220      	movs	r2, #32
 80b1b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80b1b48:	68fb      	ldr	r3, [r7, #12]
 80b1b4a:	2200      	movs	r2, #0
 80b1b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80b1b50:	68fb      	ldr	r3, [r7, #12]
 80b1b52:	2200      	movs	r2, #0
 80b1b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80b1b58:	2300      	movs	r3, #0
 80b1b5a:	e000      	b.n	80b1b5e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80b1b5c:	2302      	movs	r3, #2
  }
}
 80b1b5e:	4618      	mov	r0, r3
 80b1b60:	3718      	adds	r7, #24
 80b1b62:	46bd      	mov	sp, r7
 80b1b64:	bd80      	pop	{r7, pc}
 80b1b66:	bf00      	nop
 80b1b68:	00100002 	.word	0x00100002
 80b1b6c:	ffff0000 	.word	0xffff0000

080b1b70 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80b1b70:	b580      	push	{r7, lr}
 80b1b72:	b08c      	sub	sp, #48	; 0x30
 80b1b74:	af02      	add	r7, sp, #8
 80b1b76:	60f8      	str	r0, [r7, #12]
 80b1b78:	607a      	str	r2, [r7, #4]
 80b1b7a:	461a      	mov	r2, r3
 80b1b7c:	460b      	mov	r3, r1
 80b1b7e:	817b      	strh	r3, [r7, #10]
 80b1b80:	4613      	mov	r3, r2
 80b1b82:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80b1b84:	f7fd fd56 	bl	80af634 <HAL_GetTick>
 80b1b88:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80b1b8a:	68fb      	ldr	r3, [r7, #12]
 80b1b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80b1b90:	b2db      	uxtb	r3, r3
 80b1b92:	2b20      	cmp	r3, #32
 80b1b94:	f040 820b 	bne.w	80b1fae <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80b1b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b1b9a:	9300      	str	r3, [sp, #0]
 80b1b9c:	2319      	movs	r3, #25
 80b1b9e:	2201      	movs	r2, #1
 80b1ba0:	497c      	ldr	r1, [pc, #496]	; (80b1d94 <HAL_I2C_Master_Receive+0x224>)
 80b1ba2:	68f8      	ldr	r0, [r7, #12]
 80b1ba4:	f000 fff8 	bl	80b2b98 <I2C_WaitOnFlagUntilTimeout>
 80b1ba8:	4603      	mov	r3, r0
 80b1baa:	2b00      	cmp	r3, #0
 80b1bac:	d001      	beq.n	80b1bb2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80b1bae:	2302      	movs	r3, #2
 80b1bb0:	e1fe      	b.n	80b1fb0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80b1bb2:	68fb      	ldr	r3, [r7, #12]
 80b1bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80b1bb8:	2b01      	cmp	r3, #1
 80b1bba:	d101      	bne.n	80b1bc0 <HAL_I2C_Master_Receive+0x50>
 80b1bbc:	2302      	movs	r3, #2
 80b1bbe:	e1f7      	b.n	80b1fb0 <HAL_I2C_Master_Receive+0x440>
 80b1bc0:	68fb      	ldr	r3, [r7, #12]
 80b1bc2:	2201      	movs	r2, #1
 80b1bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80b1bc8:	68fb      	ldr	r3, [r7, #12]
 80b1bca:	681b      	ldr	r3, [r3, #0]
 80b1bcc:	681b      	ldr	r3, [r3, #0]
 80b1bce:	f003 0301 	and.w	r3, r3, #1
 80b1bd2:	2b01      	cmp	r3, #1
 80b1bd4:	d007      	beq.n	80b1be6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80b1bd6:	68fb      	ldr	r3, [r7, #12]
 80b1bd8:	681b      	ldr	r3, [r3, #0]
 80b1bda:	681a      	ldr	r2, [r3, #0]
 80b1bdc:	68fb      	ldr	r3, [r7, #12]
 80b1bde:	681b      	ldr	r3, [r3, #0]
 80b1be0:	f042 0201 	orr.w	r2, r2, #1
 80b1be4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80b1be6:	68fb      	ldr	r3, [r7, #12]
 80b1be8:	681b      	ldr	r3, [r3, #0]
 80b1bea:	681a      	ldr	r2, [r3, #0]
 80b1bec:	68fb      	ldr	r3, [r7, #12]
 80b1bee:	681b      	ldr	r3, [r3, #0]
 80b1bf0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80b1bf4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80b1bf6:	68fb      	ldr	r3, [r7, #12]
 80b1bf8:	2222      	movs	r2, #34	; 0x22
 80b1bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80b1bfe:	68fb      	ldr	r3, [r7, #12]
 80b1c00:	2210      	movs	r2, #16
 80b1c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80b1c06:	68fb      	ldr	r3, [r7, #12]
 80b1c08:	2200      	movs	r2, #0
 80b1c0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80b1c0c:	68fb      	ldr	r3, [r7, #12]
 80b1c0e:	687a      	ldr	r2, [r7, #4]
 80b1c10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80b1c12:	68fb      	ldr	r3, [r7, #12]
 80b1c14:	893a      	ldrh	r2, [r7, #8]
 80b1c16:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80b1c18:	68fb      	ldr	r3, [r7, #12]
 80b1c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80b1c1c:	b29a      	uxth	r2, r3
 80b1c1e:	68fb      	ldr	r3, [r7, #12]
 80b1c20:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80b1c22:	68fb      	ldr	r3, [r7, #12]
 80b1c24:	4a5c      	ldr	r2, [pc, #368]	; (80b1d98 <HAL_I2C_Master_Receive+0x228>)
 80b1c26:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80b1c28:	8979      	ldrh	r1, [r7, #10]
 80b1c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b1c2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80b1c2e:	68f8      	ldr	r0, [r7, #12]
 80b1c30:	f000 fd66 	bl	80b2700 <I2C_MasterRequestRead>
 80b1c34:	4603      	mov	r3, r0
 80b1c36:	2b00      	cmp	r3, #0
 80b1c38:	d001      	beq.n	80b1c3e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80b1c3a:	2301      	movs	r3, #1
 80b1c3c:	e1b8      	b.n	80b1fb0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80b1c3e:	68fb      	ldr	r3, [r7, #12]
 80b1c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80b1c42:	2b00      	cmp	r3, #0
 80b1c44:	d113      	bne.n	80b1c6e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80b1c46:	2300      	movs	r3, #0
 80b1c48:	623b      	str	r3, [r7, #32]
 80b1c4a:	68fb      	ldr	r3, [r7, #12]
 80b1c4c:	681b      	ldr	r3, [r3, #0]
 80b1c4e:	695b      	ldr	r3, [r3, #20]
 80b1c50:	623b      	str	r3, [r7, #32]
 80b1c52:	68fb      	ldr	r3, [r7, #12]
 80b1c54:	681b      	ldr	r3, [r3, #0]
 80b1c56:	699b      	ldr	r3, [r3, #24]
 80b1c58:	623b      	str	r3, [r7, #32]
 80b1c5a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80b1c5c:	68fb      	ldr	r3, [r7, #12]
 80b1c5e:	681b      	ldr	r3, [r3, #0]
 80b1c60:	681a      	ldr	r2, [r3, #0]
 80b1c62:	68fb      	ldr	r3, [r7, #12]
 80b1c64:	681b      	ldr	r3, [r3, #0]
 80b1c66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80b1c6a:	601a      	str	r2, [r3, #0]
 80b1c6c:	e18c      	b.n	80b1f88 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80b1c6e:	68fb      	ldr	r3, [r7, #12]
 80b1c70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80b1c72:	2b01      	cmp	r3, #1
 80b1c74:	d11b      	bne.n	80b1cae <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80b1c76:	68fb      	ldr	r3, [r7, #12]
 80b1c78:	681b      	ldr	r3, [r3, #0]
 80b1c7a:	681a      	ldr	r2, [r3, #0]
 80b1c7c:	68fb      	ldr	r3, [r7, #12]
 80b1c7e:	681b      	ldr	r3, [r3, #0]
 80b1c80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80b1c84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80b1c86:	2300      	movs	r3, #0
 80b1c88:	61fb      	str	r3, [r7, #28]
 80b1c8a:	68fb      	ldr	r3, [r7, #12]
 80b1c8c:	681b      	ldr	r3, [r3, #0]
 80b1c8e:	695b      	ldr	r3, [r3, #20]
 80b1c90:	61fb      	str	r3, [r7, #28]
 80b1c92:	68fb      	ldr	r3, [r7, #12]
 80b1c94:	681b      	ldr	r3, [r3, #0]
 80b1c96:	699b      	ldr	r3, [r3, #24]
 80b1c98:	61fb      	str	r3, [r7, #28]
 80b1c9a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80b1c9c:	68fb      	ldr	r3, [r7, #12]
 80b1c9e:	681b      	ldr	r3, [r3, #0]
 80b1ca0:	681a      	ldr	r2, [r3, #0]
 80b1ca2:	68fb      	ldr	r3, [r7, #12]
 80b1ca4:	681b      	ldr	r3, [r3, #0]
 80b1ca6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80b1caa:	601a      	str	r2, [r3, #0]
 80b1cac:	e16c      	b.n	80b1f88 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80b1cae:	68fb      	ldr	r3, [r7, #12]
 80b1cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80b1cb2:	2b02      	cmp	r3, #2
 80b1cb4:	d11b      	bne.n	80b1cee <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80b1cb6:	68fb      	ldr	r3, [r7, #12]
 80b1cb8:	681b      	ldr	r3, [r3, #0]
 80b1cba:	681a      	ldr	r2, [r3, #0]
 80b1cbc:	68fb      	ldr	r3, [r7, #12]
 80b1cbe:	681b      	ldr	r3, [r3, #0]
 80b1cc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80b1cc4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80b1cc6:	68fb      	ldr	r3, [r7, #12]
 80b1cc8:	681b      	ldr	r3, [r3, #0]
 80b1cca:	681a      	ldr	r2, [r3, #0]
 80b1ccc:	68fb      	ldr	r3, [r7, #12]
 80b1cce:	681b      	ldr	r3, [r3, #0]
 80b1cd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80b1cd4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80b1cd6:	2300      	movs	r3, #0
 80b1cd8:	61bb      	str	r3, [r7, #24]
 80b1cda:	68fb      	ldr	r3, [r7, #12]
 80b1cdc:	681b      	ldr	r3, [r3, #0]
 80b1cde:	695b      	ldr	r3, [r3, #20]
 80b1ce0:	61bb      	str	r3, [r7, #24]
 80b1ce2:	68fb      	ldr	r3, [r7, #12]
 80b1ce4:	681b      	ldr	r3, [r3, #0]
 80b1ce6:	699b      	ldr	r3, [r3, #24]
 80b1ce8:	61bb      	str	r3, [r7, #24]
 80b1cea:	69bb      	ldr	r3, [r7, #24]
 80b1cec:	e14c      	b.n	80b1f88 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80b1cee:	68fb      	ldr	r3, [r7, #12]
 80b1cf0:	681b      	ldr	r3, [r3, #0]
 80b1cf2:	681a      	ldr	r2, [r3, #0]
 80b1cf4:	68fb      	ldr	r3, [r7, #12]
 80b1cf6:	681b      	ldr	r3, [r3, #0]
 80b1cf8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80b1cfc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80b1cfe:	2300      	movs	r3, #0
 80b1d00:	617b      	str	r3, [r7, #20]
 80b1d02:	68fb      	ldr	r3, [r7, #12]
 80b1d04:	681b      	ldr	r3, [r3, #0]
 80b1d06:	695b      	ldr	r3, [r3, #20]
 80b1d08:	617b      	str	r3, [r7, #20]
 80b1d0a:	68fb      	ldr	r3, [r7, #12]
 80b1d0c:	681b      	ldr	r3, [r3, #0]
 80b1d0e:	699b      	ldr	r3, [r3, #24]
 80b1d10:	617b      	str	r3, [r7, #20]
 80b1d12:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80b1d14:	e138      	b.n	80b1f88 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80b1d16:	68fb      	ldr	r3, [r7, #12]
 80b1d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80b1d1a:	2b03      	cmp	r3, #3
 80b1d1c:	f200 80f1 	bhi.w	80b1f02 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80b1d20:	68fb      	ldr	r3, [r7, #12]
 80b1d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80b1d24:	2b01      	cmp	r3, #1
 80b1d26:	d123      	bne.n	80b1d70 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80b1d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80b1d2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80b1d2c:	68f8      	ldr	r0, [r7, #12]
 80b1d2e:	f001 f88b 	bl	80b2e48 <I2C_WaitOnRXNEFlagUntilTimeout>
 80b1d32:	4603      	mov	r3, r0
 80b1d34:	2b00      	cmp	r3, #0
 80b1d36:	d001      	beq.n	80b1d3c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80b1d38:	2301      	movs	r3, #1
 80b1d3a:	e139      	b.n	80b1fb0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80b1d3c:	68fb      	ldr	r3, [r7, #12]
 80b1d3e:	681b      	ldr	r3, [r3, #0]
 80b1d40:	691a      	ldr	r2, [r3, #16]
 80b1d42:	68fb      	ldr	r3, [r7, #12]
 80b1d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80b1d46:	b2d2      	uxtb	r2, r2
 80b1d48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80b1d4a:	68fb      	ldr	r3, [r7, #12]
 80b1d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80b1d4e:	1c5a      	adds	r2, r3, #1
 80b1d50:	68fb      	ldr	r3, [r7, #12]
 80b1d52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80b1d54:	68fb      	ldr	r3, [r7, #12]
 80b1d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80b1d58:	3b01      	subs	r3, #1
 80b1d5a:	b29a      	uxth	r2, r3
 80b1d5c:	68fb      	ldr	r3, [r7, #12]
 80b1d5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80b1d60:	68fb      	ldr	r3, [r7, #12]
 80b1d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80b1d64:	b29b      	uxth	r3, r3
 80b1d66:	3b01      	subs	r3, #1
 80b1d68:	b29a      	uxth	r2, r3
 80b1d6a:	68fb      	ldr	r3, [r7, #12]
 80b1d6c:	855a      	strh	r2, [r3, #42]	; 0x2a
 80b1d6e:	e10b      	b.n	80b1f88 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80b1d70:	68fb      	ldr	r3, [r7, #12]
 80b1d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80b1d74:	2b02      	cmp	r3, #2
 80b1d76:	d14e      	bne.n	80b1e16 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80b1d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b1d7a:	9300      	str	r3, [sp, #0]
 80b1d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80b1d7e:	2200      	movs	r2, #0
 80b1d80:	4906      	ldr	r1, [pc, #24]	; (80b1d9c <HAL_I2C_Master_Receive+0x22c>)
 80b1d82:	68f8      	ldr	r0, [r7, #12]
 80b1d84:	f000 ff08 	bl	80b2b98 <I2C_WaitOnFlagUntilTimeout>
 80b1d88:	4603      	mov	r3, r0
 80b1d8a:	2b00      	cmp	r3, #0
 80b1d8c:	d008      	beq.n	80b1da0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80b1d8e:	2301      	movs	r3, #1
 80b1d90:	e10e      	b.n	80b1fb0 <HAL_I2C_Master_Receive+0x440>
 80b1d92:	bf00      	nop
 80b1d94:	00100002 	.word	0x00100002
 80b1d98:	ffff0000 	.word	0xffff0000
 80b1d9c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80b1da0:	68fb      	ldr	r3, [r7, #12]
 80b1da2:	681b      	ldr	r3, [r3, #0]
 80b1da4:	681a      	ldr	r2, [r3, #0]
 80b1da6:	68fb      	ldr	r3, [r7, #12]
 80b1da8:	681b      	ldr	r3, [r3, #0]
 80b1daa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80b1dae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80b1db0:	68fb      	ldr	r3, [r7, #12]
 80b1db2:	681b      	ldr	r3, [r3, #0]
 80b1db4:	691a      	ldr	r2, [r3, #16]
 80b1db6:	68fb      	ldr	r3, [r7, #12]
 80b1db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80b1dba:	b2d2      	uxtb	r2, r2
 80b1dbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80b1dbe:	68fb      	ldr	r3, [r7, #12]
 80b1dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80b1dc2:	1c5a      	adds	r2, r3, #1
 80b1dc4:	68fb      	ldr	r3, [r7, #12]
 80b1dc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80b1dc8:	68fb      	ldr	r3, [r7, #12]
 80b1dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80b1dcc:	3b01      	subs	r3, #1
 80b1dce:	b29a      	uxth	r2, r3
 80b1dd0:	68fb      	ldr	r3, [r7, #12]
 80b1dd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80b1dd4:	68fb      	ldr	r3, [r7, #12]
 80b1dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80b1dd8:	b29b      	uxth	r3, r3
 80b1dda:	3b01      	subs	r3, #1
 80b1ddc:	b29a      	uxth	r2, r3
 80b1dde:	68fb      	ldr	r3, [r7, #12]
 80b1de0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80b1de2:	68fb      	ldr	r3, [r7, #12]
 80b1de4:	681b      	ldr	r3, [r3, #0]
 80b1de6:	691a      	ldr	r2, [r3, #16]
 80b1de8:	68fb      	ldr	r3, [r7, #12]
 80b1dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80b1dec:	b2d2      	uxtb	r2, r2
 80b1dee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80b1df0:	68fb      	ldr	r3, [r7, #12]
 80b1df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80b1df4:	1c5a      	adds	r2, r3, #1
 80b1df6:	68fb      	ldr	r3, [r7, #12]
 80b1df8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80b1dfa:	68fb      	ldr	r3, [r7, #12]
 80b1dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80b1dfe:	3b01      	subs	r3, #1
 80b1e00:	b29a      	uxth	r2, r3
 80b1e02:	68fb      	ldr	r3, [r7, #12]
 80b1e04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80b1e06:	68fb      	ldr	r3, [r7, #12]
 80b1e08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80b1e0a:	b29b      	uxth	r3, r3
 80b1e0c:	3b01      	subs	r3, #1
 80b1e0e:	b29a      	uxth	r2, r3
 80b1e10:	68fb      	ldr	r3, [r7, #12]
 80b1e12:	855a      	strh	r2, [r3, #42]	; 0x2a
 80b1e14:	e0b8      	b.n	80b1f88 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80b1e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b1e18:	9300      	str	r3, [sp, #0]
 80b1e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80b1e1c:	2200      	movs	r2, #0
 80b1e1e:	4966      	ldr	r1, [pc, #408]	; (80b1fb8 <HAL_I2C_Master_Receive+0x448>)
 80b1e20:	68f8      	ldr	r0, [r7, #12]
 80b1e22:	f000 feb9 	bl	80b2b98 <I2C_WaitOnFlagUntilTimeout>
 80b1e26:	4603      	mov	r3, r0
 80b1e28:	2b00      	cmp	r3, #0
 80b1e2a:	d001      	beq.n	80b1e30 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80b1e2c:	2301      	movs	r3, #1
 80b1e2e:	e0bf      	b.n	80b1fb0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80b1e30:	68fb      	ldr	r3, [r7, #12]
 80b1e32:	681b      	ldr	r3, [r3, #0]
 80b1e34:	681a      	ldr	r2, [r3, #0]
 80b1e36:	68fb      	ldr	r3, [r7, #12]
 80b1e38:	681b      	ldr	r3, [r3, #0]
 80b1e3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80b1e3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80b1e40:	68fb      	ldr	r3, [r7, #12]
 80b1e42:	681b      	ldr	r3, [r3, #0]
 80b1e44:	691a      	ldr	r2, [r3, #16]
 80b1e46:	68fb      	ldr	r3, [r7, #12]
 80b1e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80b1e4a:	b2d2      	uxtb	r2, r2
 80b1e4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80b1e4e:	68fb      	ldr	r3, [r7, #12]
 80b1e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80b1e52:	1c5a      	adds	r2, r3, #1
 80b1e54:	68fb      	ldr	r3, [r7, #12]
 80b1e56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80b1e58:	68fb      	ldr	r3, [r7, #12]
 80b1e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80b1e5c:	3b01      	subs	r3, #1
 80b1e5e:	b29a      	uxth	r2, r3
 80b1e60:	68fb      	ldr	r3, [r7, #12]
 80b1e62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80b1e64:	68fb      	ldr	r3, [r7, #12]
 80b1e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80b1e68:	b29b      	uxth	r3, r3
 80b1e6a:	3b01      	subs	r3, #1
 80b1e6c:	b29a      	uxth	r2, r3
 80b1e6e:	68fb      	ldr	r3, [r7, #12]
 80b1e70:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80b1e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b1e74:	9300      	str	r3, [sp, #0]
 80b1e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80b1e78:	2200      	movs	r2, #0
 80b1e7a:	494f      	ldr	r1, [pc, #316]	; (80b1fb8 <HAL_I2C_Master_Receive+0x448>)
 80b1e7c:	68f8      	ldr	r0, [r7, #12]
 80b1e7e:	f000 fe8b 	bl	80b2b98 <I2C_WaitOnFlagUntilTimeout>
 80b1e82:	4603      	mov	r3, r0
 80b1e84:	2b00      	cmp	r3, #0
 80b1e86:	d001      	beq.n	80b1e8c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80b1e88:	2301      	movs	r3, #1
 80b1e8a:	e091      	b.n	80b1fb0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80b1e8c:	68fb      	ldr	r3, [r7, #12]
 80b1e8e:	681b      	ldr	r3, [r3, #0]
 80b1e90:	681a      	ldr	r2, [r3, #0]
 80b1e92:	68fb      	ldr	r3, [r7, #12]
 80b1e94:	681b      	ldr	r3, [r3, #0]
 80b1e96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80b1e9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80b1e9c:	68fb      	ldr	r3, [r7, #12]
 80b1e9e:	681b      	ldr	r3, [r3, #0]
 80b1ea0:	691a      	ldr	r2, [r3, #16]
 80b1ea2:	68fb      	ldr	r3, [r7, #12]
 80b1ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80b1ea6:	b2d2      	uxtb	r2, r2
 80b1ea8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80b1eaa:	68fb      	ldr	r3, [r7, #12]
 80b1eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80b1eae:	1c5a      	adds	r2, r3, #1
 80b1eb0:	68fb      	ldr	r3, [r7, #12]
 80b1eb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80b1eb4:	68fb      	ldr	r3, [r7, #12]
 80b1eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80b1eb8:	3b01      	subs	r3, #1
 80b1eba:	b29a      	uxth	r2, r3
 80b1ebc:	68fb      	ldr	r3, [r7, #12]
 80b1ebe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80b1ec0:	68fb      	ldr	r3, [r7, #12]
 80b1ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80b1ec4:	b29b      	uxth	r3, r3
 80b1ec6:	3b01      	subs	r3, #1
 80b1ec8:	b29a      	uxth	r2, r3
 80b1eca:	68fb      	ldr	r3, [r7, #12]
 80b1ecc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80b1ece:	68fb      	ldr	r3, [r7, #12]
 80b1ed0:	681b      	ldr	r3, [r3, #0]
 80b1ed2:	691a      	ldr	r2, [r3, #16]
 80b1ed4:	68fb      	ldr	r3, [r7, #12]
 80b1ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80b1ed8:	b2d2      	uxtb	r2, r2
 80b1eda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80b1edc:	68fb      	ldr	r3, [r7, #12]
 80b1ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80b1ee0:	1c5a      	adds	r2, r3, #1
 80b1ee2:	68fb      	ldr	r3, [r7, #12]
 80b1ee4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80b1ee6:	68fb      	ldr	r3, [r7, #12]
 80b1ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80b1eea:	3b01      	subs	r3, #1
 80b1eec:	b29a      	uxth	r2, r3
 80b1eee:	68fb      	ldr	r3, [r7, #12]
 80b1ef0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80b1ef2:	68fb      	ldr	r3, [r7, #12]
 80b1ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80b1ef6:	b29b      	uxth	r3, r3
 80b1ef8:	3b01      	subs	r3, #1
 80b1efa:	b29a      	uxth	r2, r3
 80b1efc:	68fb      	ldr	r3, [r7, #12]
 80b1efe:	855a      	strh	r2, [r3, #42]	; 0x2a
 80b1f00:	e042      	b.n	80b1f88 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80b1f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80b1f04:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80b1f06:	68f8      	ldr	r0, [r7, #12]
 80b1f08:	f000 ff9e 	bl	80b2e48 <I2C_WaitOnRXNEFlagUntilTimeout>
 80b1f0c:	4603      	mov	r3, r0
 80b1f0e:	2b00      	cmp	r3, #0
 80b1f10:	d001      	beq.n	80b1f16 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80b1f12:	2301      	movs	r3, #1
 80b1f14:	e04c      	b.n	80b1fb0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80b1f16:	68fb      	ldr	r3, [r7, #12]
 80b1f18:	681b      	ldr	r3, [r3, #0]
 80b1f1a:	691a      	ldr	r2, [r3, #16]
 80b1f1c:	68fb      	ldr	r3, [r7, #12]
 80b1f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80b1f20:	b2d2      	uxtb	r2, r2
 80b1f22:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80b1f24:	68fb      	ldr	r3, [r7, #12]
 80b1f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80b1f28:	1c5a      	adds	r2, r3, #1
 80b1f2a:	68fb      	ldr	r3, [r7, #12]
 80b1f2c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80b1f2e:	68fb      	ldr	r3, [r7, #12]
 80b1f30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80b1f32:	3b01      	subs	r3, #1
 80b1f34:	b29a      	uxth	r2, r3
 80b1f36:	68fb      	ldr	r3, [r7, #12]
 80b1f38:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80b1f3a:	68fb      	ldr	r3, [r7, #12]
 80b1f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80b1f3e:	b29b      	uxth	r3, r3
 80b1f40:	3b01      	subs	r3, #1
 80b1f42:	b29a      	uxth	r2, r3
 80b1f44:	68fb      	ldr	r3, [r7, #12]
 80b1f46:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80b1f48:	68fb      	ldr	r3, [r7, #12]
 80b1f4a:	681b      	ldr	r3, [r3, #0]
 80b1f4c:	695b      	ldr	r3, [r3, #20]
 80b1f4e:	f003 0304 	and.w	r3, r3, #4
 80b1f52:	2b04      	cmp	r3, #4
 80b1f54:	d118      	bne.n	80b1f88 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80b1f56:	68fb      	ldr	r3, [r7, #12]
 80b1f58:	681b      	ldr	r3, [r3, #0]
 80b1f5a:	691a      	ldr	r2, [r3, #16]
 80b1f5c:	68fb      	ldr	r3, [r7, #12]
 80b1f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80b1f60:	b2d2      	uxtb	r2, r2
 80b1f62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80b1f64:	68fb      	ldr	r3, [r7, #12]
 80b1f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80b1f68:	1c5a      	adds	r2, r3, #1
 80b1f6a:	68fb      	ldr	r3, [r7, #12]
 80b1f6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80b1f6e:	68fb      	ldr	r3, [r7, #12]
 80b1f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80b1f72:	3b01      	subs	r3, #1
 80b1f74:	b29a      	uxth	r2, r3
 80b1f76:	68fb      	ldr	r3, [r7, #12]
 80b1f78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80b1f7a:	68fb      	ldr	r3, [r7, #12]
 80b1f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80b1f7e:	b29b      	uxth	r3, r3
 80b1f80:	3b01      	subs	r3, #1
 80b1f82:	b29a      	uxth	r2, r3
 80b1f84:	68fb      	ldr	r3, [r7, #12]
 80b1f86:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80b1f88:	68fb      	ldr	r3, [r7, #12]
 80b1f8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80b1f8c:	2b00      	cmp	r3, #0
 80b1f8e:	f47f aec2 	bne.w	80b1d16 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80b1f92:	68fb      	ldr	r3, [r7, #12]
 80b1f94:	2220      	movs	r2, #32
 80b1f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80b1f9a:	68fb      	ldr	r3, [r7, #12]
 80b1f9c:	2200      	movs	r2, #0
 80b1f9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80b1fa2:	68fb      	ldr	r3, [r7, #12]
 80b1fa4:	2200      	movs	r2, #0
 80b1fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80b1faa:	2300      	movs	r3, #0
 80b1fac:	e000      	b.n	80b1fb0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80b1fae:	2302      	movs	r3, #2
  }
}
 80b1fb0:	4618      	mov	r0, r3
 80b1fb2:	3728      	adds	r7, #40	; 0x28
 80b1fb4:	46bd      	mov	sp, r7
 80b1fb6:	bd80      	pop	{r7, pc}
 80b1fb8:	00010004 	.word	0x00010004

080b1fbc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80b1fbc:	b580      	push	{r7, lr}
 80b1fbe:	b088      	sub	sp, #32
 80b1fc0:	af02      	add	r7, sp, #8
 80b1fc2:	60f8      	str	r0, [r7, #12]
 80b1fc4:	4608      	mov	r0, r1
 80b1fc6:	4611      	mov	r1, r2
 80b1fc8:	461a      	mov	r2, r3
 80b1fca:	4603      	mov	r3, r0
 80b1fcc:	817b      	strh	r3, [r7, #10]
 80b1fce:	460b      	mov	r3, r1
 80b1fd0:	813b      	strh	r3, [r7, #8]
 80b1fd2:	4613      	mov	r3, r2
 80b1fd4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80b1fd6:	f7fd fb2d 	bl	80af634 <HAL_GetTick>
 80b1fda:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80b1fdc:	68fb      	ldr	r3, [r7, #12]
 80b1fde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80b1fe2:	b2db      	uxtb	r3, r3
 80b1fe4:	2b20      	cmp	r3, #32
 80b1fe6:	f040 80d9 	bne.w	80b219c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80b1fea:	697b      	ldr	r3, [r7, #20]
 80b1fec:	9300      	str	r3, [sp, #0]
 80b1fee:	2319      	movs	r3, #25
 80b1ff0:	2201      	movs	r2, #1
 80b1ff2:	496d      	ldr	r1, [pc, #436]	; (80b21a8 <HAL_I2C_Mem_Write+0x1ec>)
 80b1ff4:	68f8      	ldr	r0, [r7, #12]
 80b1ff6:	f000 fdcf 	bl	80b2b98 <I2C_WaitOnFlagUntilTimeout>
 80b1ffa:	4603      	mov	r3, r0
 80b1ffc:	2b00      	cmp	r3, #0
 80b1ffe:	d001      	beq.n	80b2004 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80b2000:	2302      	movs	r3, #2
 80b2002:	e0cc      	b.n	80b219e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80b2004:	68fb      	ldr	r3, [r7, #12]
 80b2006:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80b200a:	2b01      	cmp	r3, #1
 80b200c:	d101      	bne.n	80b2012 <HAL_I2C_Mem_Write+0x56>
 80b200e:	2302      	movs	r3, #2
 80b2010:	e0c5      	b.n	80b219e <HAL_I2C_Mem_Write+0x1e2>
 80b2012:	68fb      	ldr	r3, [r7, #12]
 80b2014:	2201      	movs	r2, #1
 80b2016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80b201a:	68fb      	ldr	r3, [r7, #12]
 80b201c:	681b      	ldr	r3, [r3, #0]
 80b201e:	681b      	ldr	r3, [r3, #0]
 80b2020:	f003 0301 	and.w	r3, r3, #1
 80b2024:	2b01      	cmp	r3, #1
 80b2026:	d007      	beq.n	80b2038 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80b2028:	68fb      	ldr	r3, [r7, #12]
 80b202a:	681b      	ldr	r3, [r3, #0]
 80b202c:	681a      	ldr	r2, [r3, #0]
 80b202e:	68fb      	ldr	r3, [r7, #12]
 80b2030:	681b      	ldr	r3, [r3, #0]
 80b2032:	f042 0201 	orr.w	r2, r2, #1
 80b2036:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80b2038:	68fb      	ldr	r3, [r7, #12]
 80b203a:	681b      	ldr	r3, [r3, #0]
 80b203c:	681a      	ldr	r2, [r3, #0]
 80b203e:	68fb      	ldr	r3, [r7, #12]
 80b2040:	681b      	ldr	r3, [r3, #0]
 80b2042:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80b2046:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80b2048:	68fb      	ldr	r3, [r7, #12]
 80b204a:	2221      	movs	r2, #33	; 0x21
 80b204c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80b2050:	68fb      	ldr	r3, [r7, #12]
 80b2052:	2240      	movs	r2, #64	; 0x40
 80b2054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80b2058:	68fb      	ldr	r3, [r7, #12]
 80b205a:	2200      	movs	r2, #0
 80b205c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80b205e:	68fb      	ldr	r3, [r7, #12]
 80b2060:	6a3a      	ldr	r2, [r7, #32]
 80b2062:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80b2064:	68fb      	ldr	r3, [r7, #12]
 80b2066:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80b2068:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80b206a:	68fb      	ldr	r3, [r7, #12]
 80b206c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80b206e:	b29a      	uxth	r2, r3
 80b2070:	68fb      	ldr	r3, [r7, #12]
 80b2072:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80b2074:	68fb      	ldr	r3, [r7, #12]
 80b2076:	4a4d      	ldr	r2, [pc, #308]	; (80b21ac <HAL_I2C_Mem_Write+0x1f0>)
 80b2078:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80b207a:	88f8      	ldrh	r0, [r7, #6]
 80b207c:	893a      	ldrh	r2, [r7, #8]
 80b207e:	8979      	ldrh	r1, [r7, #10]
 80b2080:	697b      	ldr	r3, [r7, #20]
 80b2082:	9301      	str	r3, [sp, #4]
 80b2084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80b2086:	9300      	str	r3, [sp, #0]
 80b2088:	4603      	mov	r3, r0
 80b208a:	68f8      	ldr	r0, [r7, #12]
 80b208c:	f000 fc06 	bl	80b289c <I2C_RequestMemoryWrite>
 80b2090:	4603      	mov	r3, r0
 80b2092:	2b00      	cmp	r3, #0
 80b2094:	d052      	beq.n	80b213c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80b2096:	2301      	movs	r3, #1
 80b2098:	e081      	b.n	80b219e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80b209a:	697a      	ldr	r2, [r7, #20]
 80b209c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80b209e:	68f8      	ldr	r0, [r7, #12]
 80b20a0:	f000 fe50 	bl	80b2d44 <I2C_WaitOnTXEFlagUntilTimeout>
 80b20a4:	4603      	mov	r3, r0
 80b20a6:	2b00      	cmp	r3, #0
 80b20a8:	d00d      	beq.n	80b20c6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80b20aa:	68fb      	ldr	r3, [r7, #12]
 80b20ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80b20ae:	2b04      	cmp	r3, #4
 80b20b0:	d107      	bne.n	80b20c2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80b20b2:	68fb      	ldr	r3, [r7, #12]
 80b20b4:	681b      	ldr	r3, [r3, #0]
 80b20b6:	681a      	ldr	r2, [r3, #0]
 80b20b8:	68fb      	ldr	r3, [r7, #12]
 80b20ba:	681b      	ldr	r3, [r3, #0]
 80b20bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80b20c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80b20c2:	2301      	movs	r3, #1
 80b20c4:	e06b      	b.n	80b219e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80b20c6:	68fb      	ldr	r3, [r7, #12]
 80b20c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80b20ca:	781a      	ldrb	r2, [r3, #0]
 80b20cc:	68fb      	ldr	r3, [r7, #12]
 80b20ce:	681b      	ldr	r3, [r3, #0]
 80b20d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80b20d2:	68fb      	ldr	r3, [r7, #12]
 80b20d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80b20d6:	1c5a      	adds	r2, r3, #1
 80b20d8:	68fb      	ldr	r3, [r7, #12]
 80b20da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80b20dc:	68fb      	ldr	r3, [r7, #12]
 80b20de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80b20e0:	3b01      	subs	r3, #1
 80b20e2:	b29a      	uxth	r2, r3
 80b20e4:	68fb      	ldr	r3, [r7, #12]
 80b20e6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80b20e8:	68fb      	ldr	r3, [r7, #12]
 80b20ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80b20ec:	b29b      	uxth	r3, r3
 80b20ee:	3b01      	subs	r3, #1
 80b20f0:	b29a      	uxth	r2, r3
 80b20f2:	68fb      	ldr	r3, [r7, #12]
 80b20f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80b20f6:	68fb      	ldr	r3, [r7, #12]
 80b20f8:	681b      	ldr	r3, [r3, #0]
 80b20fa:	695b      	ldr	r3, [r3, #20]
 80b20fc:	f003 0304 	and.w	r3, r3, #4
 80b2100:	2b04      	cmp	r3, #4
 80b2102:	d11b      	bne.n	80b213c <HAL_I2C_Mem_Write+0x180>
 80b2104:	68fb      	ldr	r3, [r7, #12]
 80b2106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80b2108:	2b00      	cmp	r3, #0
 80b210a:	d017      	beq.n	80b213c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80b210c:	68fb      	ldr	r3, [r7, #12]
 80b210e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80b2110:	781a      	ldrb	r2, [r3, #0]
 80b2112:	68fb      	ldr	r3, [r7, #12]
 80b2114:	681b      	ldr	r3, [r3, #0]
 80b2116:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80b2118:	68fb      	ldr	r3, [r7, #12]
 80b211a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80b211c:	1c5a      	adds	r2, r3, #1
 80b211e:	68fb      	ldr	r3, [r7, #12]
 80b2120:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80b2122:	68fb      	ldr	r3, [r7, #12]
 80b2124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80b2126:	3b01      	subs	r3, #1
 80b2128:	b29a      	uxth	r2, r3
 80b212a:	68fb      	ldr	r3, [r7, #12]
 80b212c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80b212e:	68fb      	ldr	r3, [r7, #12]
 80b2130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80b2132:	b29b      	uxth	r3, r3
 80b2134:	3b01      	subs	r3, #1
 80b2136:	b29a      	uxth	r2, r3
 80b2138:	68fb      	ldr	r3, [r7, #12]
 80b213a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80b213c:	68fb      	ldr	r3, [r7, #12]
 80b213e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80b2140:	2b00      	cmp	r3, #0
 80b2142:	d1aa      	bne.n	80b209a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80b2144:	697a      	ldr	r2, [r7, #20]
 80b2146:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80b2148:	68f8      	ldr	r0, [r7, #12]
 80b214a:	f000 fe3c 	bl	80b2dc6 <I2C_WaitOnBTFFlagUntilTimeout>
 80b214e:	4603      	mov	r3, r0
 80b2150:	2b00      	cmp	r3, #0
 80b2152:	d00d      	beq.n	80b2170 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80b2154:	68fb      	ldr	r3, [r7, #12]
 80b2156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80b2158:	2b04      	cmp	r3, #4
 80b215a:	d107      	bne.n	80b216c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80b215c:	68fb      	ldr	r3, [r7, #12]
 80b215e:	681b      	ldr	r3, [r3, #0]
 80b2160:	681a      	ldr	r2, [r3, #0]
 80b2162:	68fb      	ldr	r3, [r7, #12]
 80b2164:	681b      	ldr	r3, [r3, #0]
 80b2166:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80b216a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80b216c:	2301      	movs	r3, #1
 80b216e:	e016      	b.n	80b219e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80b2170:	68fb      	ldr	r3, [r7, #12]
 80b2172:	681b      	ldr	r3, [r3, #0]
 80b2174:	681a      	ldr	r2, [r3, #0]
 80b2176:	68fb      	ldr	r3, [r7, #12]
 80b2178:	681b      	ldr	r3, [r3, #0]
 80b217a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80b217e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80b2180:	68fb      	ldr	r3, [r7, #12]
 80b2182:	2220      	movs	r2, #32
 80b2184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80b2188:	68fb      	ldr	r3, [r7, #12]
 80b218a:	2200      	movs	r2, #0
 80b218c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80b2190:	68fb      	ldr	r3, [r7, #12]
 80b2192:	2200      	movs	r2, #0
 80b2194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80b2198:	2300      	movs	r3, #0
 80b219a:	e000      	b.n	80b219e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80b219c:	2302      	movs	r3, #2
  }
}
 80b219e:	4618      	mov	r0, r3
 80b21a0:	3718      	adds	r7, #24
 80b21a2:	46bd      	mov	sp, r7
 80b21a4:	bd80      	pop	{r7, pc}
 80b21a6:	bf00      	nop
 80b21a8:	00100002 	.word	0x00100002
 80b21ac:	ffff0000 	.word	0xffff0000

080b21b0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80b21b0:	b580      	push	{r7, lr}
 80b21b2:	b08c      	sub	sp, #48	; 0x30
 80b21b4:	af02      	add	r7, sp, #8
 80b21b6:	60f8      	str	r0, [r7, #12]
 80b21b8:	4608      	mov	r0, r1
 80b21ba:	4611      	mov	r1, r2
 80b21bc:	461a      	mov	r2, r3
 80b21be:	4603      	mov	r3, r0
 80b21c0:	817b      	strh	r3, [r7, #10]
 80b21c2:	460b      	mov	r3, r1
 80b21c4:	813b      	strh	r3, [r7, #8]
 80b21c6:	4613      	mov	r3, r2
 80b21c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80b21ca:	f7fd fa33 	bl	80af634 <HAL_GetTick>
 80b21ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80b21d0:	68fb      	ldr	r3, [r7, #12]
 80b21d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80b21d6:	b2db      	uxtb	r3, r3
 80b21d8:	2b20      	cmp	r3, #32
 80b21da:	f040 8208 	bne.w	80b25ee <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80b21de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b21e0:	9300      	str	r3, [sp, #0]
 80b21e2:	2319      	movs	r3, #25
 80b21e4:	2201      	movs	r2, #1
 80b21e6:	497b      	ldr	r1, [pc, #492]	; (80b23d4 <HAL_I2C_Mem_Read+0x224>)
 80b21e8:	68f8      	ldr	r0, [r7, #12]
 80b21ea:	f000 fcd5 	bl	80b2b98 <I2C_WaitOnFlagUntilTimeout>
 80b21ee:	4603      	mov	r3, r0
 80b21f0:	2b00      	cmp	r3, #0
 80b21f2:	d001      	beq.n	80b21f8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80b21f4:	2302      	movs	r3, #2
 80b21f6:	e1fb      	b.n	80b25f0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80b21f8:	68fb      	ldr	r3, [r7, #12]
 80b21fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80b21fe:	2b01      	cmp	r3, #1
 80b2200:	d101      	bne.n	80b2206 <HAL_I2C_Mem_Read+0x56>
 80b2202:	2302      	movs	r3, #2
 80b2204:	e1f4      	b.n	80b25f0 <HAL_I2C_Mem_Read+0x440>
 80b2206:	68fb      	ldr	r3, [r7, #12]
 80b2208:	2201      	movs	r2, #1
 80b220a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80b220e:	68fb      	ldr	r3, [r7, #12]
 80b2210:	681b      	ldr	r3, [r3, #0]
 80b2212:	681b      	ldr	r3, [r3, #0]
 80b2214:	f003 0301 	and.w	r3, r3, #1
 80b2218:	2b01      	cmp	r3, #1
 80b221a:	d007      	beq.n	80b222c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80b221c:	68fb      	ldr	r3, [r7, #12]
 80b221e:	681b      	ldr	r3, [r3, #0]
 80b2220:	681a      	ldr	r2, [r3, #0]
 80b2222:	68fb      	ldr	r3, [r7, #12]
 80b2224:	681b      	ldr	r3, [r3, #0]
 80b2226:	f042 0201 	orr.w	r2, r2, #1
 80b222a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80b222c:	68fb      	ldr	r3, [r7, #12]
 80b222e:	681b      	ldr	r3, [r3, #0]
 80b2230:	681a      	ldr	r2, [r3, #0]
 80b2232:	68fb      	ldr	r3, [r7, #12]
 80b2234:	681b      	ldr	r3, [r3, #0]
 80b2236:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80b223a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80b223c:	68fb      	ldr	r3, [r7, #12]
 80b223e:	2222      	movs	r2, #34	; 0x22
 80b2240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80b2244:	68fb      	ldr	r3, [r7, #12]
 80b2246:	2240      	movs	r2, #64	; 0x40
 80b2248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80b224c:	68fb      	ldr	r3, [r7, #12]
 80b224e:	2200      	movs	r2, #0
 80b2250:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80b2252:	68fb      	ldr	r3, [r7, #12]
 80b2254:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80b2256:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80b2258:	68fb      	ldr	r3, [r7, #12]
 80b225a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80b225c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80b225e:	68fb      	ldr	r3, [r7, #12]
 80b2260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80b2262:	b29a      	uxth	r2, r3
 80b2264:	68fb      	ldr	r3, [r7, #12]
 80b2266:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80b2268:	68fb      	ldr	r3, [r7, #12]
 80b226a:	4a5b      	ldr	r2, [pc, #364]	; (80b23d8 <HAL_I2C_Mem_Read+0x228>)
 80b226c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80b226e:	88f8      	ldrh	r0, [r7, #6]
 80b2270:	893a      	ldrh	r2, [r7, #8]
 80b2272:	8979      	ldrh	r1, [r7, #10]
 80b2274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b2276:	9301      	str	r3, [sp, #4]
 80b2278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80b227a:	9300      	str	r3, [sp, #0]
 80b227c:	4603      	mov	r3, r0
 80b227e:	68f8      	ldr	r0, [r7, #12]
 80b2280:	f000 fba2 	bl	80b29c8 <I2C_RequestMemoryRead>
 80b2284:	4603      	mov	r3, r0
 80b2286:	2b00      	cmp	r3, #0
 80b2288:	d001      	beq.n	80b228e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80b228a:	2301      	movs	r3, #1
 80b228c:	e1b0      	b.n	80b25f0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80b228e:	68fb      	ldr	r3, [r7, #12]
 80b2290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80b2292:	2b00      	cmp	r3, #0
 80b2294:	d113      	bne.n	80b22be <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80b2296:	2300      	movs	r3, #0
 80b2298:	623b      	str	r3, [r7, #32]
 80b229a:	68fb      	ldr	r3, [r7, #12]
 80b229c:	681b      	ldr	r3, [r3, #0]
 80b229e:	695b      	ldr	r3, [r3, #20]
 80b22a0:	623b      	str	r3, [r7, #32]
 80b22a2:	68fb      	ldr	r3, [r7, #12]
 80b22a4:	681b      	ldr	r3, [r3, #0]
 80b22a6:	699b      	ldr	r3, [r3, #24]
 80b22a8:	623b      	str	r3, [r7, #32]
 80b22aa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80b22ac:	68fb      	ldr	r3, [r7, #12]
 80b22ae:	681b      	ldr	r3, [r3, #0]
 80b22b0:	681a      	ldr	r2, [r3, #0]
 80b22b2:	68fb      	ldr	r3, [r7, #12]
 80b22b4:	681b      	ldr	r3, [r3, #0]
 80b22b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80b22ba:	601a      	str	r2, [r3, #0]
 80b22bc:	e184      	b.n	80b25c8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80b22be:	68fb      	ldr	r3, [r7, #12]
 80b22c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80b22c2:	2b01      	cmp	r3, #1
 80b22c4:	d11b      	bne.n	80b22fe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80b22c6:	68fb      	ldr	r3, [r7, #12]
 80b22c8:	681b      	ldr	r3, [r3, #0]
 80b22ca:	681a      	ldr	r2, [r3, #0]
 80b22cc:	68fb      	ldr	r3, [r7, #12]
 80b22ce:	681b      	ldr	r3, [r3, #0]
 80b22d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80b22d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80b22d6:	2300      	movs	r3, #0
 80b22d8:	61fb      	str	r3, [r7, #28]
 80b22da:	68fb      	ldr	r3, [r7, #12]
 80b22dc:	681b      	ldr	r3, [r3, #0]
 80b22de:	695b      	ldr	r3, [r3, #20]
 80b22e0:	61fb      	str	r3, [r7, #28]
 80b22e2:	68fb      	ldr	r3, [r7, #12]
 80b22e4:	681b      	ldr	r3, [r3, #0]
 80b22e6:	699b      	ldr	r3, [r3, #24]
 80b22e8:	61fb      	str	r3, [r7, #28]
 80b22ea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80b22ec:	68fb      	ldr	r3, [r7, #12]
 80b22ee:	681b      	ldr	r3, [r3, #0]
 80b22f0:	681a      	ldr	r2, [r3, #0]
 80b22f2:	68fb      	ldr	r3, [r7, #12]
 80b22f4:	681b      	ldr	r3, [r3, #0]
 80b22f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80b22fa:	601a      	str	r2, [r3, #0]
 80b22fc:	e164      	b.n	80b25c8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80b22fe:	68fb      	ldr	r3, [r7, #12]
 80b2300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80b2302:	2b02      	cmp	r3, #2
 80b2304:	d11b      	bne.n	80b233e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80b2306:	68fb      	ldr	r3, [r7, #12]
 80b2308:	681b      	ldr	r3, [r3, #0]
 80b230a:	681a      	ldr	r2, [r3, #0]
 80b230c:	68fb      	ldr	r3, [r7, #12]
 80b230e:	681b      	ldr	r3, [r3, #0]
 80b2310:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80b2314:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80b2316:	68fb      	ldr	r3, [r7, #12]
 80b2318:	681b      	ldr	r3, [r3, #0]
 80b231a:	681a      	ldr	r2, [r3, #0]
 80b231c:	68fb      	ldr	r3, [r7, #12]
 80b231e:	681b      	ldr	r3, [r3, #0]
 80b2320:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80b2324:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80b2326:	2300      	movs	r3, #0
 80b2328:	61bb      	str	r3, [r7, #24]
 80b232a:	68fb      	ldr	r3, [r7, #12]
 80b232c:	681b      	ldr	r3, [r3, #0]
 80b232e:	695b      	ldr	r3, [r3, #20]
 80b2330:	61bb      	str	r3, [r7, #24]
 80b2332:	68fb      	ldr	r3, [r7, #12]
 80b2334:	681b      	ldr	r3, [r3, #0]
 80b2336:	699b      	ldr	r3, [r3, #24]
 80b2338:	61bb      	str	r3, [r7, #24]
 80b233a:	69bb      	ldr	r3, [r7, #24]
 80b233c:	e144      	b.n	80b25c8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80b233e:	2300      	movs	r3, #0
 80b2340:	617b      	str	r3, [r7, #20]
 80b2342:	68fb      	ldr	r3, [r7, #12]
 80b2344:	681b      	ldr	r3, [r3, #0]
 80b2346:	695b      	ldr	r3, [r3, #20]
 80b2348:	617b      	str	r3, [r7, #20]
 80b234a:	68fb      	ldr	r3, [r7, #12]
 80b234c:	681b      	ldr	r3, [r3, #0]
 80b234e:	699b      	ldr	r3, [r3, #24]
 80b2350:	617b      	str	r3, [r7, #20]
 80b2352:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80b2354:	e138      	b.n	80b25c8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80b2356:	68fb      	ldr	r3, [r7, #12]
 80b2358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80b235a:	2b03      	cmp	r3, #3
 80b235c:	f200 80f1 	bhi.w	80b2542 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80b2360:	68fb      	ldr	r3, [r7, #12]
 80b2362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80b2364:	2b01      	cmp	r3, #1
 80b2366:	d123      	bne.n	80b23b0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80b2368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80b236a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80b236c:	68f8      	ldr	r0, [r7, #12]
 80b236e:	f000 fd6b 	bl	80b2e48 <I2C_WaitOnRXNEFlagUntilTimeout>
 80b2372:	4603      	mov	r3, r0
 80b2374:	2b00      	cmp	r3, #0
 80b2376:	d001      	beq.n	80b237c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80b2378:	2301      	movs	r3, #1
 80b237a:	e139      	b.n	80b25f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80b237c:	68fb      	ldr	r3, [r7, #12]
 80b237e:	681b      	ldr	r3, [r3, #0]
 80b2380:	691a      	ldr	r2, [r3, #16]
 80b2382:	68fb      	ldr	r3, [r7, #12]
 80b2384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80b2386:	b2d2      	uxtb	r2, r2
 80b2388:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80b238a:	68fb      	ldr	r3, [r7, #12]
 80b238c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80b238e:	1c5a      	adds	r2, r3, #1
 80b2390:	68fb      	ldr	r3, [r7, #12]
 80b2392:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80b2394:	68fb      	ldr	r3, [r7, #12]
 80b2396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80b2398:	3b01      	subs	r3, #1
 80b239a:	b29a      	uxth	r2, r3
 80b239c:	68fb      	ldr	r3, [r7, #12]
 80b239e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80b23a0:	68fb      	ldr	r3, [r7, #12]
 80b23a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80b23a4:	b29b      	uxth	r3, r3
 80b23a6:	3b01      	subs	r3, #1
 80b23a8:	b29a      	uxth	r2, r3
 80b23aa:	68fb      	ldr	r3, [r7, #12]
 80b23ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80b23ae:	e10b      	b.n	80b25c8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80b23b0:	68fb      	ldr	r3, [r7, #12]
 80b23b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80b23b4:	2b02      	cmp	r3, #2
 80b23b6:	d14e      	bne.n	80b2456 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80b23b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b23ba:	9300      	str	r3, [sp, #0]
 80b23bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80b23be:	2200      	movs	r2, #0
 80b23c0:	4906      	ldr	r1, [pc, #24]	; (80b23dc <HAL_I2C_Mem_Read+0x22c>)
 80b23c2:	68f8      	ldr	r0, [r7, #12]
 80b23c4:	f000 fbe8 	bl	80b2b98 <I2C_WaitOnFlagUntilTimeout>
 80b23c8:	4603      	mov	r3, r0
 80b23ca:	2b00      	cmp	r3, #0
 80b23cc:	d008      	beq.n	80b23e0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80b23ce:	2301      	movs	r3, #1
 80b23d0:	e10e      	b.n	80b25f0 <HAL_I2C_Mem_Read+0x440>
 80b23d2:	bf00      	nop
 80b23d4:	00100002 	.word	0x00100002
 80b23d8:	ffff0000 	.word	0xffff0000
 80b23dc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80b23e0:	68fb      	ldr	r3, [r7, #12]
 80b23e2:	681b      	ldr	r3, [r3, #0]
 80b23e4:	681a      	ldr	r2, [r3, #0]
 80b23e6:	68fb      	ldr	r3, [r7, #12]
 80b23e8:	681b      	ldr	r3, [r3, #0]
 80b23ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80b23ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80b23f0:	68fb      	ldr	r3, [r7, #12]
 80b23f2:	681b      	ldr	r3, [r3, #0]
 80b23f4:	691a      	ldr	r2, [r3, #16]
 80b23f6:	68fb      	ldr	r3, [r7, #12]
 80b23f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80b23fa:	b2d2      	uxtb	r2, r2
 80b23fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80b23fe:	68fb      	ldr	r3, [r7, #12]
 80b2400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80b2402:	1c5a      	adds	r2, r3, #1
 80b2404:	68fb      	ldr	r3, [r7, #12]
 80b2406:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80b2408:	68fb      	ldr	r3, [r7, #12]
 80b240a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80b240c:	3b01      	subs	r3, #1
 80b240e:	b29a      	uxth	r2, r3
 80b2410:	68fb      	ldr	r3, [r7, #12]
 80b2412:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80b2414:	68fb      	ldr	r3, [r7, #12]
 80b2416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80b2418:	b29b      	uxth	r3, r3
 80b241a:	3b01      	subs	r3, #1
 80b241c:	b29a      	uxth	r2, r3
 80b241e:	68fb      	ldr	r3, [r7, #12]
 80b2420:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80b2422:	68fb      	ldr	r3, [r7, #12]
 80b2424:	681b      	ldr	r3, [r3, #0]
 80b2426:	691a      	ldr	r2, [r3, #16]
 80b2428:	68fb      	ldr	r3, [r7, #12]
 80b242a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80b242c:	b2d2      	uxtb	r2, r2
 80b242e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80b2430:	68fb      	ldr	r3, [r7, #12]
 80b2432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80b2434:	1c5a      	adds	r2, r3, #1
 80b2436:	68fb      	ldr	r3, [r7, #12]
 80b2438:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80b243a:	68fb      	ldr	r3, [r7, #12]
 80b243c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80b243e:	3b01      	subs	r3, #1
 80b2440:	b29a      	uxth	r2, r3
 80b2442:	68fb      	ldr	r3, [r7, #12]
 80b2444:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80b2446:	68fb      	ldr	r3, [r7, #12]
 80b2448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80b244a:	b29b      	uxth	r3, r3
 80b244c:	3b01      	subs	r3, #1
 80b244e:	b29a      	uxth	r2, r3
 80b2450:	68fb      	ldr	r3, [r7, #12]
 80b2452:	855a      	strh	r2, [r3, #42]	; 0x2a
 80b2454:	e0b8      	b.n	80b25c8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80b2456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b2458:	9300      	str	r3, [sp, #0]
 80b245a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80b245c:	2200      	movs	r2, #0
 80b245e:	4966      	ldr	r1, [pc, #408]	; (80b25f8 <HAL_I2C_Mem_Read+0x448>)
 80b2460:	68f8      	ldr	r0, [r7, #12]
 80b2462:	f000 fb99 	bl	80b2b98 <I2C_WaitOnFlagUntilTimeout>
 80b2466:	4603      	mov	r3, r0
 80b2468:	2b00      	cmp	r3, #0
 80b246a:	d001      	beq.n	80b2470 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80b246c:	2301      	movs	r3, #1
 80b246e:	e0bf      	b.n	80b25f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80b2470:	68fb      	ldr	r3, [r7, #12]
 80b2472:	681b      	ldr	r3, [r3, #0]
 80b2474:	681a      	ldr	r2, [r3, #0]
 80b2476:	68fb      	ldr	r3, [r7, #12]
 80b2478:	681b      	ldr	r3, [r3, #0]
 80b247a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80b247e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80b2480:	68fb      	ldr	r3, [r7, #12]
 80b2482:	681b      	ldr	r3, [r3, #0]
 80b2484:	691a      	ldr	r2, [r3, #16]
 80b2486:	68fb      	ldr	r3, [r7, #12]
 80b2488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80b248a:	b2d2      	uxtb	r2, r2
 80b248c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80b248e:	68fb      	ldr	r3, [r7, #12]
 80b2490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80b2492:	1c5a      	adds	r2, r3, #1
 80b2494:	68fb      	ldr	r3, [r7, #12]
 80b2496:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80b2498:	68fb      	ldr	r3, [r7, #12]
 80b249a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80b249c:	3b01      	subs	r3, #1
 80b249e:	b29a      	uxth	r2, r3
 80b24a0:	68fb      	ldr	r3, [r7, #12]
 80b24a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80b24a4:	68fb      	ldr	r3, [r7, #12]
 80b24a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80b24a8:	b29b      	uxth	r3, r3
 80b24aa:	3b01      	subs	r3, #1
 80b24ac:	b29a      	uxth	r2, r3
 80b24ae:	68fb      	ldr	r3, [r7, #12]
 80b24b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80b24b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b24b4:	9300      	str	r3, [sp, #0]
 80b24b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80b24b8:	2200      	movs	r2, #0
 80b24ba:	494f      	ldr	r1, [pc, #316]	; (80b25f8 <HAL_I2C_Mem_Read+0x448>)
 80b24bc:	68f8      	ldr	r0, [r7, #12]
 80b24be:	f000 fb6b 	bl	80b2b98 <I2C_WaitOnFlagUntilTimeout>
 80b24c2:	4603      	mov	r3, r0
 80b24c4:	2b00      	cmp	r3, #0
 80b24c6:	d001      	beq.n	80b24cc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80b24c8:	2301      	movs	r3, #1
 80b24ca:	e091      	b.n	80b25f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80b24cc:	68fb      	ldr	r3, [r7, #12]
 80b24ce:	681b      	ldr	r3, [r3, #0]
 80b24d0:	681a      	ldr	r2, [r3, #0]
 80b24d2:	68fb      	ldr	r3, [r7, #12]
 80b24d4:	681b      	ldr	r3, [r3, #0]
 80b24d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80b24da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80b24dc:	68fb      	ldr	r3, [r7, #12]
 80b24de:	681b      	ldr	r3, [r3, #0]
 80b24e0:	691a      	ldr	r2, [r3, #16]
 80b24e2:	68fb      	ldr	r3, [r7, #12]
 80b24e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80b24e6:	b2d2      	uxtb	r2, r2
 80b24e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80b24ea:	68fb      	ldr	r3, [r7, #12]
 80b24ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80b24ee:	1c5a      	adds	r2, r3, #1
 80b24f0:	68fb      	ldr	r3, [r7, #12]
 80b24f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80b24f4:	68fb      	ldr	r3, [r7, #12]
 80b24f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80b24f8:	3b01      	subs	r3, #1
 80b24fa:	b29a      	uxth	r2, r3
 80b24fc:	68fb      	ldr	r3, [r7, #12]
 80b24fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80b2500:	68fb      	ldr	r3, [r7, #12]
 80b2502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80b2504:	b29b      	uxth	r3, r3
 80b2506:	3b01      	subs	r3, #1
 80b2508:	b29a      	uxth	r2, r3
 80b250a:	68fb      	ldr	r3, [r7, #12]
 80b250c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80b250e:	68fb      	ldr	r3, [r7, #12]
 80b2510:	681b      	ldr	r3, [r3, #0]
 80b2512:	691a      	ldr	r2, [r3, #16]
 80b2514:	68fb      	ldr	r3, [r7, #12]
 80b2516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80b2518:	b2d2      	uxtb	r2, r2
 80b251a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80b251c:	68fb      	ldr	r3, [r7, #12]
 80b251e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80b2520:	1c5a      	adds	r2, r3, #1
 80b2522:	68fb      	ldr	r3, [r7, #12]
 80b2524:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80b2526:	68fb      	ldr	r3, [r7, #12]
 80b2528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80b252a:	3b01      	subs	r3, #1
 80b252c:	b29a      	uxth	r2, r3
 80b252e:	68fb      	ldr	r3, [r7, #12]
 80b2530:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80b2532:	68fb      	ldr	r3, [r7, #12]
 80b2534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80b2536:	b29b      	uxth	r3, r3
 80b2538:	3b01      	subs	r3, #1
 80b253a:	b29a      	uxth	r2, r3
 80b253c:	68fb      	ldr	r3, [r7, #12]
 80b253e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80b2540:	e042      	b.n	80b25c8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80b2542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80b2544:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80b2546:	68f8      	ldr	r0, [r7, #12]
 80b2548:	f000 fc7e 	bl	80b2e48 <I2C_WaitOnRXNEFlagUntilTimeout>
 80b254c:	4603      	mov	r3, r0
 80b254e:	2b00      	cmp	r3, #0
 80b2550:	d001      	beq.n	80b2556 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80b2552:	2301      	movs	r3, #1
 80b2554:	e04c      	b.n	80b25f0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80b2556:	68fb      	ldr	r3, [r7, #12]
 80b2558:	681b      	ldr	r3, [r3, #0]
 80b255a:	691a      	ldr	r2, [r3, #16]
 80b255c:	68fb      	ldr	r3, [r7, #12]
 80b255e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80b2560:	b2d2      	uxtb	r2, r2
 80b2562:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80b2564:	68fb      	ldr	r3, [r7, #12]
 80b2566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80b2568:	1c5a      	adds	r2, r3, #1
 80b256a:	68fb      	ldr	r3, [r7, #12]
 80b256c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80b256e:	68fb      	ldr	r3, [r7, #12]
 80b2570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80b2572:	3b01      	subs	r3, #1
 80b2574:	b29a      	uxth	r2, r3
 80b2576:	68fb      	ldr	r3, [r7, #12]
 80b2578:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80b257a:	68fb      	ldr	r3, [r7, #12]
 80b257c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80b257e:	b29b      	uxth	r3, r3
 80b2580:	3b01      	subs	r3, #1
 80b2582:	b29a      	uxth	r2, r3
 80b2584:	68fb      	ldr	r3, [r7, #12]
 80b2586:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80b2588:	68fb      	ldr	r3, [r7, #12]
 80b258a:	681b      	ldr	r3, [r3, #0]
 80b258c:	695b      	ldr	r3, [r3, #20]
 80b258e:	f003 0304 	and.w	r3, r3, #4
 80b2592:	2b04      	cmp	r3, #4
 80b2594:	d118      	bne.n	80b25c8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80b2596:	68fb      	ldr	r3, [r7, #12]
 80b2598:	681b      	ldr	r3, [r3, #0]
 80b259a:	691a      	ldr	r2, [r3, #16]
 80b259c:	68fb      	ldr	r3, [r7, #12]
 80b259e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80b25a0:	b2d2      	uxtb	r2, r2
 80b25a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80b25a4:	68fb      	ldr	r3, [r7, #12]
 80b25a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80b25a8:	1c5a      	adds	r2, r3, #1
 80b25aa:	68fb      	ldr	r3, [r7, #12]
 80b25ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80b25ae:	68fb      	ldr	r3, [r7, #12]
 80b25b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80b25b2:	3b01      	subs	r3, #1
 80b25b4:	b29a      	uxth	r2, r3
 80b25b6:	68fb      	ldr	r3, [r7, #12]
 80b25b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80b25ba:	68fb      	ldr	r3, [r7, #12]
 80b25bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80b25be:	b29b      	uxth	r3, r3
 80b25c0:	3b01      	subs	r3, #1
 80b25c2:	b29a      	uxth	r2, r3
 80b25c4:	68fb      	ldr	r3, [r7, #12]
 80b25c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80b25c8:	68fb      	ldr	r3, [r7, #12]
 80b25ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80b25cc:	2b00      	cmp	r3, #0
 80b25ce:	f47f aec2 	bne.w	80b2356 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80b25d2:	68fb      	ldr	r3, [r7, #12]
 80b25d4:	2220      	movs	r2, #32
 80b25d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80b25da:	68fb      	ldr	r3, [r7, #12]
 80b25dc:	2200      	movs	r2, #0
 80b25de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80b25e2:	68fb      	ldr	r3, [r7, #12]
 80b25e4:	2200      	movs	r2, #0
 80b25e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80b25ea:	2300      	movs	r3, #0
 80b25ec:	e000      	b.n	80b25f0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80b25ee:	2302      	movs	r3, #2
  }
}
 80b25f0:	4618      	mov	r0, r3
 80b25f2:	3728      	adds	r7, #40	; 0x28
 80b25f4:	46bd      	mov	sp, r7
 80b25f6:	bd80      	pop	{r7, pc}
 80b25f8:	00010004 	.word	0x00010004

080b25fc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80b25fc:	b580      	push	{r7, lr}
 80b25fe:	b088      	sub	sp, #32
 80b2600:	af02      	add	r7, sp, #8
 80b2602:	60f8      	str	r0, [r7, #12]
 80b2604:	607a      	str	r2, [r7, #4]
 80b2606:	603b      	str	r3, [r7, #0]
 80b2608:	460b      	mov	r3, r1
 80b260a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80b260c:	68fb      	ldr	r3, [r7, #12]
 80b260e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80b2610:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80b2612:	697b      	ldr	r3, [r7, #20]
 80b2614:	2b08      	cmp	r3, #8
 80b2616:	d006      	beq.n	80b2626 <I2C_MasterRequestWrite+0x2a>
 80b2618:	697b      	ldr	r3, [r7, #20]
 80b261a:	2b01      	cmp	r3, #1
 80b261c:	d003      	beq.n	80b2626 <I2C_MasterRequestWrite+0x2a>
 80b261e:	697b      	ldr	r3, [r7, #20]
 80b2620:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80b2624:	d108      	bne.n	80b2638 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80b2626:	68fb      	ldr	r3, [r7, #12]
 80b2628:	681b      	ldr	r3, [r3, #0]
 80b262a:	681a      	ldr	r2, [r3, #0]
 80b262c:	68fb      	ldr	r3, [r7, #12]
 80b262e:	681b      	ldr	r3, [r3, #0]
 80b2630:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80b2634:	601a      	str	r2, [r3, #0]
 80b2636:	e00b      	b.n	80b2650 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80b2638:	68fb      	ldr	r3, [r7, #12]
 80b263a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80b263c:	2b12      	cmp	r3, #18
 80b263e:	d107      	bne.n	80b2650 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80b2640:	68fb      	ldr	r3, [r7, #12]
 80b2642:	681b      	ldr	r3, [r3, #0]
 80b2644:	681a      	ldr	r2, [r3, #0]
 80b2646:	68fb      	ldr	r3, [r7, #12]
 80b2648:	681b      	ldr	r3, [r3, #0]
 80b264a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80b264e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80b2650:	683b      	ldr	r3, [r7, #0]
 80b2652:	9300      	str	r3, [sp, #0]
 80b2654:	687b      	ldr	r3, [r7, #4]
 80b2656:	2200      	movs	r2, #0
 80b2658:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80b265c:	68f8      	ldr	r0, [r7, #12]
 80b265e:	f000 fa9b 	bl	80b2b98 <I2C_WaitOnFlagUntilTimeout>
 80b2662:	4603      	mov	r3, r0
 80b2664:	2b00      	cmp	r3, #0
 80b2666:	d00d      	beq.n	80b2684 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80b2668:	68fb      	ldr	r3, [r7, #12]
 80b266a:	681b      	ldr	r3, [r3, #0]
 80b266c:	681b      	ldr	r3, [r3, #0]
 80b266e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80b2672:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80b2676:	d103      	bne.n	80b2680 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80b2678:	68fb      	ldr	r3, [r7, #12]
 80b267a:	f44f 7200 	mov.w	r2, #512	; 0x200
 80b267e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80b2680:	2303      	movs	r3, #3
 80b2682:	e035      	b.n	80b26f0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80b2684:	68fb      	ldr	r3, [r7, #12]
 80b2686:	691b      	ldr	r3, [r3, #16]
 80b2688:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80b268c:	d108      	bne.n	80b26a0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80b268e:	897b      	ldrh	r3, [r7, #10]
 80b2690:	b2db      	uxtb	r3, r3
 80b2692:	461a      	mov	r2, r3
 80b2694:	68fb      	ldr	r3, [r7, #12]
 80b2696:	681b      	ldr	r3, [r3, #0]
 80b2698:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80b269c:	611a      	str	r2, [r3, #16]
 80b269e:	e01b      	b.n	80b26d8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80b26a0:	897b      	ldrh	r3, [r7, #10]
 80b26a2:	11db      	asrs	r3, r3, #7
 80b26a4:	b2db      	uxtb	r3, r3
 80b26a6:	f003 0306 	and.w	r3, r3, #6
 80b26aa:	b2db      	uxtb	r3, r3
 80b26ac:	f063 030f 	orn	r3, r3, #15
 80b26b0:	b2da      	uxtb	r2, r3
 80b26b2:	68fb      	ldr	r3, [r7, #12]
 80b26b4:	681b      	ldr	r3, [r3, #0]
 80b26b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80b26b8:	683b      	ldr	r3, [r7, #0]
 80b26ba:	687a      	ldr	r2, [r7, #4]
 80b26bc:	490e      	ldr	r1, [pc, #56]	; (80b26f8 <I2C_MasterRequestWrite+0xfc>)
 80b26be:	68f8      	ldr	r0, [r7, #12]
 80b26c0:	f000 fac1 	bl	80b2c46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80b26c4:	4603      	mov	r3, r0
 80b26c6:	2b00      	cmp	r3, #0
 80b26c8:	d001      	beq.n	80b26ce <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80b26ca:	2301      	movs	r3, #1
 80b26cc:	e010      	b.n	80b26f0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80b26ce:	897b      	ldrh	r3, [r7, #10]
 80b26d0:	b2da      	uxtb	r2, r3
 80b26d2:	68fb      	ldr	r3, [r7, #12]
 80b26d4:	681b      	ldr	r3, [r3, #0]
 80b26d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80b26d8:	683b      	ldr	r3, [r7, #0]
 80b26da:	687a      	ldr	r2, [r7, #4]
 80b26dc:	4907      	ldr	r1, [pc, #28]	; (80b26fc <I2C_MasterRequestWrite+0x100>)
 80b26de:	68f8      	ldr	r0, [r7, #12]
 80b26e0:	f000 fab1 	bl	80b2c46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80b26e4:	4603      	mov	r3, r0
 80b26e6:	2b00      	cmp	r3, #0
 80b26e8:	d001      	beq.n	80b26ee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80b26ea:	2301      	movs	r3, #1
 80b26ec:	e000      	b.n	80b26f0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80b26ee:	2300      	movs	r3, #0
}
 80b26f0:	4618      	mov	r0, r3
 80b26f2:	3718      	adds	r7, #24
 80b26f4:	46bd      	mov	sp, r7
 80b26f6:	bd80      	pop	{r7, pc}
 80b26f8:	00010008 	.word	0x00010008
 80b26fc:	00010002 	.word	0x00010002

080b2700 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80b2700:	b580      	push	{r7, lr}
 80b2702:	b088      	sub	sp, #32
 80b2704:	af02      	add	r7, sp, #8
 80b2706:	60f8      	str	r0, [r7, #12]
 80b2708:	607a      	str	r2, [r7, #4]
 80b270a:	603b      	str	r3, [r7, #0]
 80b270c:	460b      	mov	r3, r1
 80b270e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80b2710:	68fb      	ldr	r3, [r7, #12]
 80b2712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80b2714:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80b2716:	68fb      	ldr	r3, [r7, #12]
 80b2718:	681b      	ldr	r3, [r3, #0]
 80b271a:	681a      	ldr	r2, [r3, #0]
 80b271c:	68fb      	ldr	r3, [r7, #12]
 80b271e:	681b      	ldr	r3, [r3, #0]
 80b2720:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80b2724:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80b2726:	697b      	ldr	r3, [r7, #20]
 80b2728:	2b08      	cmp	r3, #8
 80b272a:	d006      	beq.n	80b273a <I2C_MasterRequestRead+0x3a>
 80b272c:	697b      	ldr	r3, [r7, #20]
 80b272e:	2b01      	cmp	r3, #1
 80b2730:	d003      	beq.n	80b273a <I2C_MasterRequestRead+0x3a>
 80b2732:	697b      	ldr	r3, [r7, #20]
 80b2734:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80b2738:	d108      	bne.n	80b274c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80b273a:	68fb      	ldr	r3, [r7, #12]
 80b273c:	681b      	ldr	r3, [r3, #0]
 80b273e:	681a      	ldr	r2, [r3, #0]
 80b2740:	68fb      	ldr	r3, [r7, #12]
 80b2742:	681b      	ldr	r3, [r3, #0]
 80b2744:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80b2748:	601a      	str	r2, [r3, #0]
 80b274a:	e00b      	b.n	80b2764 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80b274c:	68fb      	ldr	r3, [r7, #12]
 80b274e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80b2750:	2b11      	cmp	r3, #17
 80b2752:	d107      	bne.n	80b2764 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80b2754:	68fb      	ldr	r3, [r7, #12]
 80b2756:	681b      	ldr	r3, [r3, #0]
 80b2758:	681a      	ldr	r2, [r3, #0]
 80b275a:	68fb      	ldr	r3, [r7, #12]
 80b275c:	681b      	ldr	r3, [r3, #0]
 80b275e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80b2762:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80b2764:	683b      	ldr	r3, [r7, #0]
 80b2766:	9300      	str	r3, [sp, #0]
 80b2768:	687b      	ldr	r3, [r7, #4]
 80b276a:	2200      	movs	r2, #0
 80b276c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80b2770:	68f8      	ldr	r0, [r7, #12]
 80b2772:	f000 fa11 	bl	80b2b98 <I2C_WaitOnFlagUntilTimeout>
 80b2776:	4603      	mov	r3, r0
 80b2778:	2b00      	cmp	r3, #0
 80b277a:	d00d      	beq.n	80b2798 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80b277c:	68fb      	ldr	r3, [r7, #12]
 80b277e:	681b      	ldr	r3, [r3, #0]
 80b2780:	681b      	ldr	r3, [r3, #0]
 80b2782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80b2786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80b278a:	d103      	bne.n	80b2794 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80b278c:	68fb      	ldr	r3, [r7, #12]
 80b278e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80b2792:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80b2794:	2303      	movs	r3, #3
 80b2796:	e079      	b.n	80b288c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80b2798:	68fb      	ldr	r3, [r7, #12]
 80b279a:	691b      	ldr	r3, [r3, #16]
 80b279c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80b27a0:	d108      	bne.n	80b27b4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80b27a2:	897b      	ldrh	r3, [r7, #10]
 80b27a4:	b2db      	uxtb	r3, r3
 80b27a6:	f043 0301 	orr.w	r3, r3, #1
 80b27aa:	b2da      	uxtb	r2, r3
 80b27ac:	68fb      	ldr	r3, [r7, #12]
 80b27ae:	681b      	ldr	r3, [r3, #0]
 80b27b0:	611a      	str	r2, [r3, #16]
 80b27b2:	e05f      	b.n	80b2874 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80b27b4:	897b      	ldrh	r3, [r7, #10]
 80b27b6:	11db      	asrs	r3, r3, #7
 80b27b8:	b2db      	uxtb	r3, r3
 80b27ba:	f003 0306 	and.w	r3, r3, #6
 80b27be:	b2db      	uxtb	r3, r3
 80b27c0:	f063 030f 	orn	r3, r3, #15
 80b27c4:	b2da      	uxtb	r2, r3
 80b27c6:	68fb      	ldr	r3, [r7, #12]
 80b27c8:	681b      	ldr	r3, [r3, #0]
 80b27ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80b27cc:	683b      	ldr	r3, [r7, #0]
 80b27ce:	687a      	ldr	r2, [r7, #4]
 80b27d0:	4930      	ldr	r1, [pc, #192]	; (80b2894 <I2C_MasterRequestRead+0x194>)
 80b27d2:	68f8      	ldr	r0, [r7, #12]
 80b27d4:	f000 fa37 	bl	80b2c46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80b27d8:	4603      	mov	r3, r0
 80b27da:	2b00      	cmp	r3, #0
 80b27dc:	d001      	beq.n	80b27e2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80b27de:	2301      	movs	r3, #1
 80b27e0:	e054      	b.n	80b288c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80b27e2:	897b      	ldrh	r3, [r7, #10]
 80b27e4:	b2da      	uxtb	r2, r3
 80b27e6:	68fb      	ldr	r3, [r7, #12]
 80b27e8:	681b      	ldr	r3, [r3, #0]
 80b27ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80b27ec:	683b      	ldr	r3, [r7, #0]
 80b27ee:	687a      	ldr	r2, [r7, #4]
 80b27f0:	4929      	ldr	r1, [pc, #164]	; (80b2898 <I2C_MasterRequestRead+0x198>)
 80b27f2:	68f8      	ldr	r0, [r7, #12]
 80b27f4:	f000 fa27 	bl	80b2c46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80b27f8:	4603      	mov	r3, r0
 80b27fa:	2b00      	cmp	r3, #0
 80b27fc:	d001      	beq.n	80b2802 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80b27fe:	2301      	movs	r3, #1
 80b2800:	e044      	b.n	80b288c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80b2802:	2300      	movs	r3, #0
 80b2804:	613b      	str	r3, [r7, #16]
 80b2806:	68fb      	ldr	r3, [r7, #12]
 80b2808:	681b      	ldr	r3, [r3, #0]
 80b280a:	695b      	ldr	r3, [r3, #20]
 80b280c:	613b      	str	r3, [r7, #16]
 80b280e:	68fb      	ldr	r3, [r7, #12]
 80b2810:	681b      	ldr	r3, [r3, #0]
 80b2812:	699b      	ldr	r3, [r3, #24]
 80b2814:	613b      	str	r3, [r7, #16]
 80b2816:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80b2818:	68fb      	ldr	r3, [r7, #12]
 80b281a:	681b      	ldr	r3, [r3, #0]
 80b281c:	681a      	ldr	r2, [r3, #0]
 80b281e:	68fb      	ldr	r3, [r7, #12]
 80b2820:	681b      	ldr	r3, [r3, #0]
 80b2822:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80b2826:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80b2828:	683b      	ldr	r3, [r7, #0]
 80b282a:	9300      	str	r3, [sp, #0]
 80b282c:	687b      	ldr	r3, [r7, #4]
 80b282e:	2200      	movs	r2, #0
 80b2830:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80b2834:	68f8      	ldr	r0, [r7, #12]
 80b2836:	f000 f9af 	bl	80b2b98 <I2C_WaitOnFlagUntilTimeout>
 80b283a:	4603      	mov	r3, r0
 80b283c:	2b00      	cmp	r3, #0
 80b283e:	d00d      	beq.n	80b285c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80b2840:	68fb      	ldr	r3, [r7, #12]
 80b2842:	681b      	ldr	r3, [r3, #0]
 80b2844:	681b      	ldr	r3, [r3, #0]
 80b2846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80b284a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80b284e:	d103      	bne.n	80b2858 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80b2850:	68fb      	ldr	r3, [r7, #12]
 80b2852:	f44f 7200 	mov.w	r2, #512	; 0x200
 80b2856:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80b2858:	2303      	movs	r3, #3
 80b285a:	e017      	b.n	80b288c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80b285c:	897b      	ldrh	r3, [r7, #10]
 80b285e:	11db      	asrs	r3, r3, #7
 80b2860:	b2db      	uxtb	r3, r3
 80b2862:	f003 0306 	and.w	r3, r3, #6
 80b2866:	b2db      	uxtb	r3, r3
 80b2868:	f063 030e 	orn	r3, r3, #14
 80b286c:	b2da      	uxtb	r2, r3
 80b286e:	68fb      	ldr	r3, [r7, #12]
 80b2870:	681b      	ldr	r3, [r3, #0]
 80b2872:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80b2874:	683b      	ldr	r3, [r7, #0]
 80b2876:	687a      	ldr	r2, [r7, #4]
 80b2878:	4907      	ldr	r1, [pc, #28]	; (80b2898 <I2C_MasterRequestRead+0x198>)
 80b287a:	68f8      	ldr	r0, [r7, #12]
 80b287c:	f000 f9e3 	bl	80b2c46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80b2880:	4603      	mov	r3, r0
 80b2882:	2b00      	cmp	r3, #0
 80b2884:	d001      	beq.n	80b288a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80b2886:	2301      	movs	r3, #1
 80b2888:	e000      	b.n	80b288c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80b288a:	2300      	movs	r3, #0
}
 80b288c:	4618      	mov	r0, r3
 80b288e:	3718      	adds	r7, #24
 80b2890:	46bd      	mov	sp, r7
 80b2892:	bd80      	pop	{r7, pc}
 80b2894:	00010008 	.word	0x00010008
 80b2898:	00010002 	.word	0x00010002

080b289c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80b289c:	b580      	push	{r7, lr}
 80b289e:	b088      	sub	sp, #32
 80b28a0:	af02      	add	r7, sp, #8
 80b28a2:	60f8      	str	r0, [r7, #12]
 80b28a4:	4608      	mov	r0, r1
 80b28a6:	4611      	mov	r1, r2
 80b28a8:	461a      	mov	r2, r3
 80b28aa:	4603      	mov	r3, r0
 80b28ac:	817b      	strh	r3, [r7, #10]
 80b28ae:	460b      	mov	r3, r1
 80b28b0:	813b      	strh	r3, [r7, #8]
 80b28b2:	4613      	mov	r3, r2
 80b28b4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80b28b6:	68fb      	ldr	r3, [r7, #12]
 80b28b8:	681b      	ldr	r3, [r3, #0]
 80b28ba:	681a      	ldr	r2, [r3, #0]
 80b28bc:	68fb      	ldr	r3, [r7, #12]
 80b28be:	681b      	ldr	r3, [r3, #0]
 80b28c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80b28c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80b28c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b28c8:	9300      	str	r3, [sp, #0]
 80b28ca:	6a3b      	ldr	r3, [r7, #32]
 80b28cc:	2200      	movs	r2, #0
 80b28ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80b28d2:	68f8      	ldr	r0, [r7, #12]
 80b28d4:	f000 f960 	bl	80b2b98 <I2C_WaitOnFlagUntilTimeout>
 80b28d8:	4603      	mov	r3, r0
 80b28da:	2b00      	cmp	r3, #0
 80b28dc:	d00d      	beq.n	80b28fa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80b28de:	68fb      	ldr	r3, [r7, #12]
 80b28e0:	681b      	ldr	r3, [r3, #0]
 80b28e2:	681b      	ldr	r3, [r3, #0]
 80b28e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80b28e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80b28ec:	d103      	bne.n	80b28f6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80b28ee:	68fb      	ldr	r3, [r7, #12]
 80b28f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80b28f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80b28f6:	2303      	movs	r3, #3
 80b28f8:	e05f      	b.n	80b29ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80b28fa:	897b      	ldrh	r3, [r7, #10]
 80b28fc:	b2db      	uxtb	r3, r3
 80b28fe:	461a      	mov	r2, r3
 80b2900:	68fb      	ldr	r3, [r7, #12]
 80b2902:	681b      	ldr	r3, [r3, #0]
 80b2904:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80b2908:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80b290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b290c:	6a3a      	ldr	r2, [r7, #32]
 80b290e:	492d      	ldr	r1, [pc, #180]	; (80b29c4 <I2C_RequestMemoryWrite+0x128>)
 80b2910:	68f8      	ldr	r0, [r7, #12]
 80b2912:	f000 f998 	bl	80b2c46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80b2916:	4603      	mov	r3, r0
 80b2918:	2b00      	cmp	r3, #0
 80b291a:	d001      	beq.n	80b2920 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80b291c:	2301      	movs	r3, #1
 80b291e:	e04c      	b.n	80b29ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80b2920:	2300      	movs	r3, #0
 80b2922:	617b      	str	r3, [r7, #20]
 80b2924:	68fb      	ldr	r3, [r7, #12]
 80b2926:	681b      	ldr	r3, [r3, #0]
 80b2928:	695b      	ldr	r3, [r3, #20]
 80b292a:	617b      	str	r3, [r7, #20]
 80b292c:	68fb      	ldr	r3, [r7, #12]
 80b292e:	681b      	ldr	r3, [r3, #0]
 80b2930:	699b      	ldr	r3, [r3, #24]
 80b2932:	617b      	str	r3, [r7, #20]
 80b2934:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80b2936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80b2938:	6a39      	ldr	r1, [r7, #32]
 80b293a:	68f8      	ldr	r0, [r7, #12]
 80b293c:	f000 fa02 	bl	80b2d44 <I2C_WaitOnTXEFlagUntilTimeout>
 80b2940:	4603      	mov	r3, r0
 80b2942:	2b00      	cmp	r3, #0
 80b2944:	d00d      	beq.n	80b2962 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80b2946:	68fb      	ldr	r3, [r7, #12]
 80b2948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80b294a:	2b04      	cmp	r3, #4
 80b294c:	d107      	bne.n	80b295e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80b294e:	68fb      	ldr	r3, [r7, #12]
 80b2950:	681b      	ldr	r3, [r3, #0]
 80b2952:	681a      	ldr	r2, [r3, #0]
 80b2954:	68fb      	ldr	r3, [r7, #12]
 80b2956:	681b      	ldr	r3, [r3, #0]
 80b2958:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80b295c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80b295e:	2301      	movs	r3, #1
 80b2960:	e02b      	b.n	80b29ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80b2962:	88fb      	ldrh	r3, [r7, #6]
 80b2964:	2b01      	cmp	r3, #1
 80b2966:	d105      	bne.n	80b2974 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80b2968:	893b      	ldrh	r3, [r7, #8]
 80b296a:	b2da      	uxtb	r2, r3
 80b296c:	68fb      	ldr	r3, [r7, #12]
 80b296e:	681b      	ldr	r3, [r3, #0]
 80b2970:	611a      	str	r2, [r3, #16]
 80b2972:	e021      	b.n	80b29b8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80b2974:	893b      	ldrh	r3, [r7, #8]
 80b2976:	0a1b      	lsrs	r3, r3, #8
 80b2978:	b29b      	uxth	r3, r3
 80b297a:	b2da      	uxtb	r2, r3
 80b297c:	68fb      	ldr	r3, [r7, #12]
 80b297e:	681b      	ldr	r3, [r3, #0]
 80b2980:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80b2982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80b2984:	6a39      	ldr	r1, [r7, #32]
 80b2986:	68f8      	ldr	r0, [r7, #12]
 80b2988:	f000 f9dc 	bl	80b2d44 <I2C_WaitOnTXEFlagUntilTimeout>
 80b298c:	4603      	mov	r3, r0
 80b298e:	2b00      	cmp	r3, #0
 80b2990:	d00d      	beq.n	80b29ae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80b2992:	68fb      	ldr	r3, [r7, #12]
 80b2994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80b2996:	2b04      	cmp	r3, #4
 80b2998:	d107      	bne.n	80b29aa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80b299a:	68fb      	ldr	r3, [r7, #12]
 80b299c:	681b      	ldr	r3, [r3, #0]
 80b299e:	681a      	ldr	r2, [r3, #0]
 80b29a0:	68fb      	ldr	r3, [r7, #12]
 80b29a2:	681b      	ldr	r3, [r3, #0]
 80b29a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80b29a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80b29aa:	2301      	movs	r3, #1
 80b29ac:	e005      	b.n	80b29ba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80b29ae:	893b      	ldrh	r3, [r7, #8]
 80b29b0:	b2da      	uxtb	r2, r3
 80b29b2:	68fb      	ldr	r3, [r7, #12]
 80b29b4:	681b      	ldr	r3, [r3, #0]
 80b29b6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80b29b8:	2300      	movs	r3, #0
}
 80b29ba:	4618      	mov	r0, r3
 80b29bc:	3718      	adds	r7, #24
 80b29be:	46bd      	mov	sp, r7
 80b29c0:	bd80      	pop	{r7, pc}
 80b29c2:	bf00      	nop
 80b29c4:	00010002 	.word	0x00010002

080b29c8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80b29c8:	b580      	push	{r7, lr}
 80b29ca:	b088      	sub	sp, #32
 80b29cc:	af02      	add	r7, sp, #8
 80b29ce:	60f8      	str	r0, [r7, #12]
 80b29d0:	4608      	mov	r0, r1
 80b29d2:	4611      	mov	r1, r2
 80b29d4:	461a      	mov	r2, r3
 80b29d6:	4603      	mov	r3, r0
 80b29d8:	817b      	strh	r3, [r7, #10]
 80b29da:	460b      	mov	r3, r1
 80b29dc:	813b      	strh	r3, [r7, #8]
 80b29de:	4613      	mov	r3, r2
 80b29e0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80b29e2:	68fb      	ldr	r3, [r7, #12]
 80b29e4:	681b      	ldr	r3, [r3, #0]
 80b29e6:	681a      	ldr	r2, [r3, #0]
 80b29e8:	68fb      	ldr	r3, [r7, #12]
 80b29ea:	681b      	ldr	r3, [r3, #0]
 80b29ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80b29f0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80b29f2:	68fb      	ldr	r3, [r7, #12]
 80b29f4:	681b      	ldr	r3, [r3, #0]
 80b29f6:	681a      	ldr	r2, [r3, #0]
 80b29f8:	68fb      	ldr	r3, [r7, #12]
 80b29fa:	681b      	ldr	r3, [r3, #0]
 80b29fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80b2a00:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80b2a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b2a04:	9300      	str	r3, [sp, #0]
 80b2a06:	6a3b      	ldr	r3, [r7, #32]
 80b2a08:	2200      	movs	r2, #0
 80b2a0a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80b2a0e:	68f8      	ldr	r0, [r7, #12]
 80b2a10:	f000 f8c2 	bl	80b2b98 <I2C_WaitOnFlagUntilTimeout>
 80b2a14:	4603      	mov	r3, r0
 80b2a16:	2b00      	cmp	r3, #0
 80b2a18:	d00d      	beq.n	80b2a36 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80b2a1a:	68fb      	ldr	r3, [r7, #12]
 80b2a1c:	681b      	ldr	r3, [r3, #0]
 80b2a1e:	681b      	ldr	r3, [r3, #0]
 80b2a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80b2a24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80b2a28:	d103      	bne.n	80b2a32 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80b2a2a:	68fb      	ldr	r3, [r7, #12]
 80b2a2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80b2a30:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80b2a32:	2303      	movs	r3, #3
 80b2a34:	e0aa      	b.n	80b2b8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80b2a36:	897b      	ldrh	r3, [r7, #10]
 80b2a38:	b2db      	uxtb	r3, r3
 80b2a3a:	461a      	mov	r2, r3
 80b2a3c:	68fb      	ldr	r3, [r7, #12]
 80b2a3e:	681b      	ldr	r3, [r3, #0]
 80b2a40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80b2a44:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80b2a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b2a48:	6a3a      	ldr	r2, [r7, #32]
 80b2a4a:	4952      	ldr	r1, [pc, #328]	; (80b2b94 <I2C_RequestMemoryRead+0x1cc>)
 80b2a4c:	68f8      	ldr	r0, [r7, #12]
 80b2a4e:	f000 f8fa 	bl	80b2c46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80b2a52:	4603      	mov	r3, r0
 80b2a54:	2b00      	cmp	r3, #0
 80b2a56:	d001      	beq.n	80b2a5c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80b2a58:	2301      	movs	r3, #1
 80b2a5a:	e097      	b.n	80b2b8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80b2a5c:	2300      	movs	r3, #0
 80b2a5e:	617b      	str	r3, [r7, #20]
 80b2a60:	68fb      	ldr	r3, [r7, #12]
 80b2a62:	681b      	ldr	r3, [r3, #0]
 80b2a64:	695b      	ldr	r3, [r3, #20]
 80b2a66:	617b      	str	r3, [r7, #20]
 80b2a68:	68fb      	ldr	r3, [r7, #12]
 80b2a6a:	681b      	ldr	r3, [r3, #0]
 80b2a6c:	699b      	ldr	r3, [r3, #24]
 80b2a6e:	617b      	str	r3, [r7, #20]
 80b2a70:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80b2a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80b2a74:	6a39      	ldr	r1, [r7, #32]
 80b2a76:	68f8      	ldr	r0, [r7, #12]
 80b2a78:	f000 f964 	bl	80b2d44 <I2C_WaitOnTXEFlagUntilTimeout>
 80b2a7c:	4603      	mov	r3, r0
 80b2a7e:	2b00      	cmp	r3, #0
 80b2a80:	d00d      	beq.n	80b2a9e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80b2a82:	68fb      	ldr	r3, [r7, #12]
 80b2a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80b2a86:	2b04      	cmp	r3, #4
 80b2a88:	d107      	bne.n	80b2a9a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80b2a8a:	68fb      	ldr	r3, [r7, #12]
 80b2a8c:	681b      	ldr	r3, [r3, #0]
 80b2a8e:	681a      	ldr	r2, [r3, #0]
 80b2a90:	68fb      	ldr	r3, [r7, #12]
 80b2a92:	681b      	ldr	r3, [r3, #0]
 80b2a94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80b2a98:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80b2a9a:	2301      	movs	r3, #1
 80b2a9c:	e076      	b.n	80b2b8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80b2a9e:	88fb      	ldrh	r3, [r7, #6]
 80b2aa0:	2b01      	cmp	r3, #1
 80b2aa2:	d105      	bne.n	80b2ab0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80b2aa4:	893b      	ldrh	r3, [r7, #8]
 80b2aa6:	b2da      	uxtb	r2, r3
 80b2aa8:	68fb      	ldr	r3, [r7, #12]
 80b2aaa:	681b      	ldr	r3, [r3, #0]
 80b2aac:	611a      	str	r2, [r3, #16]
 80b2aae:	e021      	b.n	80b2af4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80b2ab0:	893b      	ldrh	r3, [r7, #8]
 80b2ab2:	0a1b      	lsrs	r3, r3, #8
 80b2ab4:	b29b      	uxth	r3, r3
 80b2ab6:	b2da      	uxtb	r2, r3
 80b2ab8:	68fb      	ldr	r3, [r7, #12]
 80b2aba:	681b      	ldr	r3, [r3, #0]
 80b2abc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80b2abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80b2ac0:	6a39      	ldr	r1, [r7, #32]
 80b2ac2:	68f8      	ldr	r0, [r7, #12]
 80b2ac4:	f000 f93e 	bl	80b2d44 <I2C_WaitOnTXEFlagUntilTimeout>
 80b2ac8:	4603      	mov	r3, r0
 80b2aca:	2b00      	cmp	r3, #0
 80b2acc:	d00d      	beq.n	80b2aea <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80b2ace:	68fb      	ldr	r3, [r7, #12]
 80b2ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80b2ad2:	2b04      	cmp	r3, #4
 80b2ad4:	d107      	bne.n	80b2ae6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80b2ad6:	68fb      	ldr	r3, [r7, #12]
 80b2ad8:	681b      	ldr	r3, [r3, #0]
 80b2ada:	681a      	ldr	r2, [r3, #0]
 80b2adc:	68fb      	ldr	r3, [r7, #12]
 80b2ade:	681b      	ldr	r3, [r3, #0]
 80b2ae0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80b2ae4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80b2ae6:	2301      	movs	r3, #1
 80b2ae8:	e050      	b.n	80b2b8c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80b2aea:	893b      	ldrh	r3, [r7, #8]
 80b2aec:	b2da      	uxtb	r2, r3
 80b2aee:	68fb      	ldr	r3, [r7, #12]
 80b2af0:	681b      	ldr	r3, [r3, #0]
 80b2af2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80b2af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80b2af6:	6a39      	ldr	r1, [r7, #32]
 80b2af8:	68f8      	ldr	r0, [r7, #12]
 80b2afa:	f000 f923 	bl	80b2d44 <I2C_WaitOnTXEFlagUntilTimeout>
 80b2afe:	4603      	mov	r3, r0
 80b2b00:	2b00      	cmp	r3, #0
 80b2b02:	d00d      	beq.n	80b2b20 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80b2b04:	68fb      	ldr	r3, [r7, #12]
 80b2b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80b2b08:	2b04      	cmp	r3, #4
 80b2b0a:	d107      	bne.n	80b2b1c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80b2b0c:	68fb      	ldr	r3, [r7, #12]
 80b2b0e:	681b      	ldr	r3, [r3, #0]
 80b2b10:	681a      	ldr	r2, [r3, #0]
 80b2b12:	68fb      	ldr	r3, [r7, #12]
 80b2b14:	681b      	ldr	r3, [r3, #0]
 80b2b16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80b2b1a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80b2b1c:	2301      	movs	r3, #1
 80b2b1e:	e035      	b.n	80b2b8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80b2b20:	68fb      	ldr	r3, [r7, #12]
 80b2b22:	681b      	ldr	r3, [r3, #0]
 80b2b24:	681a      	ldr	r2, [r3, #0]
 80b2b26:	68fb      	ldr	r3, [r7, #12]
 80b2b28:	681b      	ldr	r3, [r3, #0]
 80b2b2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80b2b2e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80b2b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b2b32:	9300      	str	r3, [sp, #0]
 80b2b34:	6a3b      	ldr	r3, [r7, #32]
 80b2b36:	2200      	movs	r2, #0
 80b2b38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80b2b3c:	68f8      	ldr	r0, [r7, #12]
 80b2b3e:	f000 f82b 	bl	80b2b98 <I2C_WaitOnFlagUntilTimeout>
 80b2b42:	4603      	mov	r3, r0
 80b2b44:	2b00      	cmp	r3, #0
 80b2b46:	d00d      	beq.n	80b2b64 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80b2b48:	68fb      	ldr	r3, [r7, #12]
 80b2b4a:	681b      	ldr	r3, [r3, #0]
 80b2b4c:	681b      	ldr	r3, [r3, #0]
 80b2b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80b2b52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80b2b56:	d103      	bne.n	80b2b60 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80b2b58:	68fb      	ldr	r3, [r7, #12]
 80b2b5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 80b2b5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80b2b60:	2303      	movs	r3, #3
 80b2b62:	e013      	b.n	80b2b8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80b2b64:	897b      	ldrh	r3, [r7, #10]
 80b2b66:	b2db      	uxtb	r3, r3
 80b2b68:	f043 0301 	orr.w	r3, r3, #1
 80b2b6c:	b2da      	uxtb	r2, r3
 80b2b6e:	68fb      	ldr	r3, [r7, #12]
 80b2b70:	681b      	ldr	r3, [r3, #0]
 80b2b72:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80b2b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b2b76:	6a3a      	ldr	r2, [r7, #32]
 80b2b78:	4906      	ldr	r1, [pc, #24]	; (80b2b94 <I2C_RequestMemoryRead+0x1cc>)
 80b2b7a:	68f8      	ldr	r0, [r7, #12]
 80b2b7c:	f000 f863 	bl	80b2c46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80b2b80:	4603      	mov	r3, r0
 80b2b82:	2b00      	cmp	r3, #0
 80b2b84:	d001      	beq.n	80b2b8a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80b2b86:	2301      	movs	r3, #1
 80b2b88:	e000      	b.n	80b2b8c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80b2b8a:	2300      	movs	r3, #0
}
 80b2b8c:	4618      	mov	r0, r3
 80b2b8e:	3718      	adds	r7, #24
 80b2b90:	46bd      	mov	sp, r7
 80b2b92:	bd80      	pop	{r7, pc}
 80b2b94:	00010002 	.word	0x00010002

080b2b98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80b2b98:	b580      	push	{r7, lr}
 80b2b9a:	b084      	sub	sp, #16
 80b2b9c:	af00      	add	r7, sp, #0
 80b2b9e:	60f8      	str	r0, [r7, #12]
 80b2ba0:	60b9      	str	r1, [r7, #8]
 80b2ba2:	603b      	str	r3, [r7, #0]
 80b2ba4:	4613      	mov	r3, r2
 80b2ba6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80b2ba8:	e025      	b.n	80b2bf6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80b2baa:	683b      	ldr	r3, [r7, #0]
 80b2bac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80b2bb0:	d021      	beq.n	80b2bf6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80b2bb2:	f7fc fd3f 	bl	80af634 <HAL_GetTick>
 80b2bb6:	4602      	mov	r2, r0
 80b2bb8:	69bb      	ldr	r3, [r7, #24]
 80b2bba:	1ad3      	subs	r3, r2, r3
 80b2bbc:	683a      	ldr	r2, [r7, #0]
 80b2bbe:	429a      	cmp	r2, r3
 80b2bc0:	d302      	bcc.n	80b2bc8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80b2bc2:	683b      	ldr	r3, [r7, #0]
 80b2bc4:	2b00      	cmp	r3, #0
 80b2bc6:	d116      	bne.n	80b2bf6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80b2bc8:	68fb      	ldr	r3, [r7, #12]
 80b2bca:	2200      	movs	r2, #0
 80b2bcc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80b2bce:	68fb      	ldr	r3, [r7, #12]
 80b2bd0:	2220      	movs	r2, #32
 80b2bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80b2bd6:	68fb      	ldr	r3, [r7, #12]
 80b2bd8:	2200      	movs	r2, #0
 80b2bda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80b2bde:	68fb      	ldr	r3, [r7, #12]
 80b2be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80b2be2:	f043 0220 	orr.w	r2, r3, #32
 80b2be6:	68fb      	ldr	r3, [r7, #12]
 80b2be8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80b2bea:	68fb      	ldr	r3, [r7, #12]
 80b2bec:	2200      	movs	r2, #0
 80b2bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80b2bf2:	2301      	movs	r3, #1
 80b2bf4:	e023      	b.n	80b2c3e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80b2bf6:	68bb      	ldr	r3, [r7, #8]
 80b2bf8:	0c1b      	lsrs	r3, r3, #16
 80b2bfa:	b2db      	uxtb	r3, r3
 80b2bfc:	2b01      	cmp	r3, #1
 80b2bfe:	d10d      	bne.n	80b2c1c <I2C_WaitOnFlagUntilTimeout+0x84>
 80b2c00:	68fb      	ldr	r3, [r7, #12]
 80b2c02:	681b      	ldr	r3, [r3, #0]
 80b2c04:	695b      	ldr	r3, [r3, #20]
 80b2c06:	43da      	mvns	r2, r3
 80b2c08:	68bb      	ldr	r3, [r7, #8]
 80b2c0a:	4013      	ands	r3, r2
 80b2c0c:	b29b      	uxth	r3, r3
 80b2c0e:	2b00      	cmp	r3, #0
 80b2c10:	bf0c      	ite	eq
 80b2c12:	2301      	moveq	r3, #1
 80b2c14:	2300      	movne	r3, #0
 80b2c16:	b2db      	uxtb	r3, r3
 80b2c18:	461a      	mov	r2, r3
 80b2c1a:	e00c      	b.n	80b2c36 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80b2c1c:	68fb      	ldr	r3, [r7, #12]
 80b2c1e:	681b      	ldr	r3, [r3, #0]
 80b2c20:	699b      	ldr	r3, [r3, #24]
 80b2c22:	43da      	mvns	r2, r3
 80b2c24:	68bb      	ldr	r3, [r7, #8]
 80b2c26:	4013      	ands	r3, r2
 80b2c28:	b29b      	uxth	r3, r3
 80b2c2a:	2b00      	cmp	r3, #0
 80b2c2c:	bf0c      	ite	eq
 80b2c2e:	2301      	moveq	r3, #1
 80b2c30:	2300      	movne	r3, #0
 80b2c32:	b2db      	uxtb	r3, r3
 80b2c34:	461a      	mov	r2, r3
 80b2c36:	79fb      	ldrb	r3, [r7, #7]
 80b2c38:	429a      	cmp	r2, r3
 80b2c3a:	d0b6      	beq.n	80b2baa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80b2c3c:	2300      	movs	r3, #0
}
 80b2c3e:	4618      	mov	r0, r3
 80b2c40:	3710      	adds	r7, #16
 80b2c42:	46bd      	mov	sp, r7
 80b2c44:	bd80      	pop	{r7, pc}

080b2c46 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80b2c46:	b580      	push	{r7, lr}
 80b2c48:	b084      	sub	sp, #16
 80b2c4a:	af00      	add	r7, sp, #0
 80b2c4c:	60f8      	str	r0, [r7, #12]
 80b2c4e:	60b9      	str	r1, [r7, #8]
 80b2c50:	607a      	str	r2, [r7, #4]
 80b2c52:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80b2c54:	e051      	b.n	80b2cfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80b2c56:	68fb      	ldr	r3, [r7, #12]
 80b2c58:	681b      	ldr	r3, [r3, #0]
 80b2c5a:	695b      	ldr	r3, [r3, #20]
 80b2c5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80b2c60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80b2c64:	d123      	bne.n	80b2cae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80b2c66:	68fb      	ldr	r3, [r7, #12]
 80b2c68:	681b      	ldr	r3, [r3, #0]
 80b2c6a:	681a      	ldr	r2, [r3, #0]
 80b2c6c:	68fb      	ldr	r3, [r7, #12]
 80b2c6e:	681b      	ldr	r3, [r3, #0]
 80b2c70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80b2c74:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80b2c76:	68fb      	ldr	r3, [r7, #12]
 80b2c78:	681b      	ldr	r3, [r3, #0]
 80b2c7a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80b2c7e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80b2c80:	68fb      	ldr	r3, [r7, #12]
 80b2c82:	2200      	movs	r2, #0
 80b2c84:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80b2c86:	68fb      	ldr	r3, [r7, #12]
 80b2c88:	2220      	movs	r2, #32
 80b2c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80b2c8e:	68fb      	ldr	r3, [r7, #12]
 80b2c90:	2200      	movs	r2, #0
 80b2c92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80b2c96:	68fb      	ldr	r3, [r7, #12]
 80b2c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80b2c9a:	f043 0204 	orr.w	r2, r3, #4
 80b2c9e:	68fb      	ldr	r3, [r7, #12]
 80b2ca0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80b2ca2:	68fb      	ldr	r3, [r7, #12]
 80b2ca4:	2200      	movs	r2, #0
 80b2ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80b2caa:	2301      	movs	r3, #1
 80b2cac:	e046      	b.n	80b2d3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80b2cae:	687b      	ldr	r3, [r7, #4]
 80b2cb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80b2cb4:	d021      	beq.n	80b2cfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80b2cb6:	f7fc fcbd 	bl	80af634 <HAL_GetTick>
 80b2cba:	4602      	mov	r2, r0
 80b2cbc:	683b      	ldr	r3, [r7, #0]
 80b2cbe:	1ad3      	subs	r3, r2, r3
 80b2cc0:	687a      	ldr	r2, [r7, #4]
 80b2cc2:	429a      	cmp	r2, r3
 80b2cc4:	d302      	bcc.n	80b2ccc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80b2cc6:	687b      	ldr	r3, [r7, #4]
 80b2cc8:	2b00      	cmp	r3, #0
 80b2cca:	d116      	bne.n	80b2cfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80b2ccc:	68fb      	ldr	r3, [r7, #12]
 80b2cce:	2200      	movs	r2, #0
 80b2cd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80b2cd2:	68fb      	ldr	r3, [r7, #12]
 80b2cd4:	2220      	movs	r2, #32
 80b2cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80b2cda:	68fb      	ldr	r3, [r7, #12]
 80b2cdc:	2200      	movs	r2, #0
 80b2cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80b2ce2:	68fb      	ldr	r3, [r7, #12]
 80b2ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80b2ce6:	f043 0220 	orr.w	r2, r3, #32
 80b2cea:	68fb      	ldr	r3, [r7, #12]
 80b2cec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80b2cee:	68fb      	ldr	r3, [r7, #12]
 80b2cf0:	2200      	movs	r2, #0
 80b2cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80b2cf6:	2301      	movs	r3, #1
 80b2cf8:	e020      	b.n	80b2d3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80b2cfa:	68bb      	ldr	r3, [r7, #8]
 80b2cfc:	0c1b      	lsrs	r3, r3, #16
 80b2cfe:	b2db      	uxtb	r3, r3
 80b2d00:	2b01      	cmp	r3, #1
 80b2d02:	d10c      	bne.n	80b2d1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80b2d04:	68fb      	ldr	r3, [r7, #12]
 80b2d06:	681b      	ldr	r3, [r3, #0]
 80b2d08:	695b      	ldr	r3, [r3, #20]
 80b2d0a:	43da      	mvns	r2, r3
 80b2d0c:	68bb      	ldr	r3, [r7, #8]
 80b2d0e:	4013      	ands	r3, r2
 80b2d10:	b29b      	uxth	r3, r3
 80b2d12:	2b00      	cmp	r3, #0
 80b2d14:	bf14      	ite	ne
 80b2d16:	2301      	movne	r3, #1
 80b2d18:	2300      	moveq	r3, #0
 80b2d1a:	b2db      	uxtb	r3, r3
 80b2d1c:	e00b      	b.n	80b2d36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80b2d1e:	68fb      	ldr	r3, [r7, #12]
 80b2d20:	681b      	ldr	r3, [r3, #0]
 80b2d22:	699b      	ldr	r3, [r3, #24]
 80b2d24:	43da      	mvns	r2, r3
 80b2d26:	68bb      	ldr	r3, [r7, #8]
 80b2d28:	4013      	ands	r3, r2
 80b2d2a:	b29b      	uxth	r3, r3
 80b2d2c:	2b00      	cmp	r3, #0
 80b2d2e:	bf14      	ite	ne
 80b2d30:	2301      	movne	r3, #1
 80b2d32:	2300      	moveq	r3, #0
 80b2d34:	b2db      	uxtb	r3, r3
 80b2d36:	2b00      	cmp	r3, #0
 80b2d38:	d18d      	bne.n	80b2c56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80b2d3a:	2300      	movs	r3, #0
}
 80b2d3c:	4618      	mov	r0, r3
 80b2d3e:	3710      	adds	r7, #16
 80b2d40:	46bd      	mov	sp, r7
 80b2d42:	bd80      	pop	{r7, pc}

080b2d44 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80b2d44:	b580      	push	{r7, lr}
 80b2d46:	b084      	sub	sp, #16
 80b2d48:	af00      	add	r7, sp, #0
 80b2d4a:	60f8      	str	r0, [r7, #12]
 80b2d4c:	60b9      	str	r1, [r7, #8]
 80b2d4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80b2d50:	e02d      	b.n	80b2dae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80b2d52:	68f8      	ldr	r0, [r7, #12]
 80b2d54:	f000 f8ce 	bl	80b2ef4 <I2C_IsAcknowledgeFailed>
 80b2d58:	4603      	mov	r3, r0
 80b2d5a:	2b00      	cmp	r3, #0
 80b2d5c:	d001      	beq.n	80b2d62 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80b2d5e:	2301      	movs	r3, #1
 80b2d60:	e02d      	b.n	80b2dbe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80b2d62:	68bb      	ldr	r3, [r7, #8]
 80b2d64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80b2d68:	d021      	beq.n	80b2dae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80b2d6a:	f7fc fc63 	bl	80af634 <HAL_GetTick>
 80b2d6e:	4602      	mov	r2, r0
 80b2d70:	687b      	ldr	r3, [r7, #4]
 80b2d72:	1ad3      	subs	r3, r2, r3
 80b2d74:	68ba      	ldr	r2, [r7, #8]
 80b2d76:	429a      	cmp	r2, r3
 80b2d78:	d302      	bcc.n	80b2d80 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80b2d7a:	68bb      	ldr	r3, [r7, #8]
 80b2d7c:	2b00      	cmp	r3, #0
 80b2d7e:	d116      	bne.n	80b2dae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80b2d80:	68fb      	ldr	r3, [r7, #12]
 80b2d82:	2200      	movs	r2, #0
 80b2d84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80b2d86:	68fb      	ldr	r3, [r7, #12]
 80b2d88:	2220      	movs	r2, #32
 80b2d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80b2d8e:	68fb      	ldr	r3, [r7, #12]
 80b2d90:	2200      	movs	r2, #0
 80b2d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80b2d96:	68fb      	ldr	r3, [r7, #12]
 80b2d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80b2d9a:	f043 0220 	orr.w	r2, r3, #32
 80b2d9e:	68fb      	ldr	r3, [r7, #12]
 80b2da0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80b2da2:	68fb      	ldr	r3, [r7, #12]
 80b2da4:	2200      	movs	r2, #0
 80b2da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80b2daa:	2301      	movs	r3, #1
 80b2dac:	e007      	b.n	80b2dbe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80b2dae:	68fb      	ldr	r3, [r7, #12]
 80b2db0:	681b      	ldr	r3, [r3, #0]
 80b2db2:	695b      	ldr	r3, [r3, #20]
 80b2db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80b2db8:	2b80      	cmp	r3, #128	; 0x80
 80b2dba:	d1ca      	bne.n	80b2d52 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80b2dbc:	2300      	movs	r3, #0
}
 80b2dbe:	4618      	mov	r0, r3
 80b2dc0:	3710      	adds	r7, #16
 80b2dc2:	46bd      	mov	sp, r7
 80b2dc4:	bd80      	pop	{r7, pc}

080b2dc6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80b2dc6:	b580      	push	{r7, lr}
 80b2dc8:	b084      	sub	sp, #16
 80b2dca:	af00      	add	r7, sp, #0
 80b2dcc:	60f8      	str	r0, [r7, #12]
 80b2dce:	60b9      	str	r1, [r7, #8]
 80b2dd0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80b2dd2:	e02d      	b.n	80b2e30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80b2dd4:	68f8      	ldr	r0, [r7, #12]
 80b2dd6:	f000 f88d 	bl	80b2ef4 <I2C_IsAcknowledgeFailed>
 80b2dda:	4603      	mov	r3, r0
 80b2ddc:	2b00      	cmp	r3, #0
 80b2dde:	d001      	beq.n	80b2de4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80b2de0:	2301      	movs	r3, #1
 80b2de2:	e02d      	b.n	80b2e40 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80b2de4:	68bb      	ldr	r3, [r7, #8]
 80b2de6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80b2dea:	d021      	beq.n	80b2e30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80b2dec:	f7fc fc22 	bl	80af634 <HAL_GetTick>
 80b2df0:	4602      	mov	r2, r0
 80b2df2:	687b      	ldr	r3, [r7, #4]
 80b2df4:	1ad3      	subs	r3, r2, r3
 80b2df6:	68ba      	ldr	r2, [r7, #8]
 80b2df8:	429a      	cmp	r2, r3
 80b2dfa:	d302      	bcc.n	80b2e02 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80b2dfc:	68bb      	ldr	r3, [r7, #8]
 80b2dfe:	2b00      	cmp	r3, #0
 80b2e00:	d116      	bne.n	80b2e30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80b2e02:	68fb      	ldr	r3, [r7, #12]
 80b2e04:	2200      	movs	r2, #0
 80b2e06:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80b2e08:	68fb      	ldr	r3, [r7, #12]
 80b2e0a:	2220      	movs	r2, #32
 80b2e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80b2e10:	68fb      	ldr	r3, [r7, #12]
 80b2e12:	2200      	movs	r2, #0
 80b2e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80b2e18:	68fb      	ldr	r3, [r7, #12]
 80b2e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80b2e1c:	f043 0220 	orr.w	r2, r3, #32
 80b2e20:	68fb      	ldr	r3, [r7, #12]
 80b2e22:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80b2e24:	68fb      	ldr	r3, [r7, #12]
 80b2e26:	2200      	movs	r2, #0
 80b2e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80b2e2c:	2301      	movs	r3, #1
 80b2e2e:	e007      	b.n	80b2e40 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80b2e30:	68fb      	ldr	r3, [r7, #12]
 80b2e32:	681b      	ldr	r3, [r3, #0]
 80b2e34:	695b      	ldr	r3, [r3, #20]
 80b2e36:	f003 0304 	and.w	r3, r3, #4
 80b2e3a:	2b04      	cmp	r3, #4
 80b2e3c:	d1ca      	bne.n	80b2dd4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80b2e3e:	2300      	movs	r3, #0
}
 80b2e40:	4618      	mov	r0, r3
 80b2e42:	3710      	adds	r7, #16
 80b2e44:	46bd      	mov	sp, r7
 80b2e46:	bd80      	pop	{r7, pc}

080b2e48 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80b2e48:	b580      	push	{r7, lr}
 80b2e4a:	b084      	sub	sp, #16
 80b2e4c:	af00      	add	r7, sp, #0
 80b2e4e:	60f8      	str	r0, [r7, #12]
 80b2e50:	60b9      	str	r1, [r7, #8]
 80b2e52:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80b2e54:	e042      	b.n	80b2edc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80b2e56:	68fb      	ldr	r3, [r7, #12]
 80b2e58:	681b      	ldr	r3, [r3, #0]
 80b2e5a:	695b      	ldr	r3, [r3, #20]
 80b2e5c:	f003 0310 	and.w	r3, r3, #16
 80b2e60:	2b10      	cmp	r3, #16
 80b2e62:	d119      	bne.n	80b2e98 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80b2e64:	68fb      	ldr	r3, [r7, #12]
 80b2e66:	681b      	ldr	r3, [r3, #0]
 80b2e68:	f06f 0210 	mvn.w	r2, #16
 80b2e6c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80b2e6e:	68fb      	ldr	r3, [r7, #12]
 80b2e70:	2200      	movs	r2, #0
 80b2e72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80b2e74:	68fb      	ldr	r3, [r7, #12]
 80b2e76:	2220      	movs	r2, #32
 80b2e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80b2e7c:	68fb      	ldr	r3, [r7, #12]
 80b2e7e:	2200      	movs	r2, #0
 80b2e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80b2e84:	68fb      	ldr	r3, [r7, #12]
 80b2e86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80b2e88:	68fb      	ldr	r3, [r7, #12]
 80b2e8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80b2e8c:	68fb      	ldr	r3, [r7, #12]
 80b2e8e:	2200      	movs	r2, #0
 80b2e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80b2e94:	2301      	movs	r3, #1
 80b2e96:	e029      	b.n	80b2eec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80b2e98:	f7fc fbcc 	bl	80af634 <HAL_GetTick>
 80b2e9c:	4602      	mov	r2, r0
 80b2e9e:	687b      	ldr	r3, [r7, #4]
 80b2ea0:	1ad3      	subs	r3, r2, r3
 80b2ea2:	68ba      	ldr	r2, [r7, #8]
 80b2ea4:	429a      	cmp	r2, r3
 80b2ea6:	d302      	bcc.n	80b2eae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80b2ea8:	68bb      	ldr	r3, [r7, #8]
 80b2eaa:	2b00      	cmp	r3, #0
 80b2eac:	d116      	bne.n	80b2edc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80b2eae:	68fb      	ldr	r3, [r7, #12]
 80b2eb0:	2200      	movs	r2, #0
 80b2eb2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80b2eb4:	68fb      	ldr	r3, [r7, #12]
 80b2eb6:	2220      	movs	r2, #32
 80b2eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80b2ebc:	68fb      	ldr	r3, [r7, #12]
 80b2ebe:	2200      	movs	r2, #0
 80b2ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80b2ec4:	68fb      	ldr	r3, [r7, #12]
 80b2ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80b2ec8:	f043 0220 	orr.w	r2, r3, #32
 80b2ecc:	68fb      	ldr	r3, [r7, #12]
 80b2ece:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80b2ed0:	68fb      	ldr	r3, [r7, #12]
 80b2ed2:	2200      	movs	r2, #0
 80b2ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80b2ed8:	2301      	movs	r3, #1
 80b2eda:	e007      	b.n	80b2eec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80b2edc:	68fb      	ldr	r3, [r7, #12]
 80b2ede:	681b      	ldr	r3, [r3, #0]
 80b2ee0:	695b      	ldr	r3, [r3, #20]
 80b2ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80b2ee6:	2b40      	cmp	r3, #64	; 0x40
 80b2ee8:	d1b5      	bne.n	80b2e56 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80b2eea:	2300      	movs	r3, #0
}
 80b2eec:	4618      	mov	r0, r3
 80b2eee:	3710      	adds	r7, #16
 80b2ef0:	46bd      	mov	sp, r7
 80b2ef2:	bd80      	pop	{r7, pc}

080b2ef4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80b2ef4:	b480      	push	{r7}
 80b2ef6:	b083      	sub	sp, #12
 80b2ef8:	af00      	add	r7, sp, #0
 80b2efa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80b2efc:	687b      	ldr	r3, [r7, #4]
 80b2efe:	681b      	ldr	r3, [r3, #0]
 80b2f00:	695b      	ldr	r3, [r3, #20]
 80b2f02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80b2f06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80b2f0a:	d11b      	bne.n	80b2f44 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80b2f0c:	687b      	ldr	r3, [r7, #4]
 80b2f0e:	681b      	ldr	r3, [r3, #0]
 80b2f10:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80b2f14:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80b2f16:	687b      	ldr	r3, [r7, #4]
 80b2f18:	2200      	movs	r2, #0
 80b2f1a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80b2f1c:	687b      	ldr	r3, [r7, #4]
 80b2f1e:	2220      	movs	r2, #32
 80b2f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80b2f24:	687b      	ldr	r3, [r7, #4]
 80b2f26:	2200      	movs	r2, #0
 80b2f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80b2f2c:	687b      	ldr	r3, [r7, #4]
 80b2f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80b2f30:	f043 0204 	orr.w	r2, r3, #4
 80b2f34:	687b      	ldr	r3, [r7, #4]
 80b2f36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80b2f38:	687b      	ldr	r3, [r7, #4]
 80b2f3a:	2200      	movs	r2, #0
 80b2f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80b2f40:	2301      	movs	r3, #1
 80b2f42:	e000      	b.n	80b2f46 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80b2f44:	2300      	movs	r3, #0
}
 80b2f46:	4618      	mov	r0, r3
 80b2f48:	370c      	adds	r7, #12
 80b2f4a:	46bd      	mov	sp, r7
 80b2f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b2f50:	4770      	bx	lr
	...

080b2f54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80b2f54:	b580      	push	{r7, lr}
 80b2f56:	b086      	sub	sp, #24
 80b2f58:	af00      	add	r7, sp, #0
 80b2f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80b2f5c:	687b      	ldr	r3, [r7, #4]
 80b2f5e:	2b00      	cmp	r3, #0
 80b2f60:	d101      	bne.n	80b2f66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80b2f62:	2301      	movs	r3, #1
 80b2f64:	e264      	b.n	80b3430 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80b2f66:	687b      	ldr	r3, [r7, #4]
 80b2f68:	681b      	ldr	r3, [r3, #0]
 80b2f6a:	f003 0301 	and.w	r3, r3, #1
 80b2f6e:	2b00      	cmp	r3, #0
 80b2f70:	d075      	beq.n	80b305e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80b2f72:	4ba3      	ldr	r3, [pc, #652]	; (80b3200 <HAL_RCC_OscConfig+0x2ac>)
 80b2f74:	689b      	ldr	r3, [r3, #8]
 80b2f76:	f003 030c 	and.w	r3, r3, #12
 80b2f7a:	2b04      	cmp	r3, #4
 80b2f7c:	d00c      	beq.n	80b2f98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80b2f7e:	4ba0      	ldr	r3, [pc, #640]	; (80b3200 <HAL_RCC_OscConfig+0x2ac>)
 80b2f80:	689b      	ldr	r3, [r3, #8]
 80b2f82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80b2f86:	2b08      	cmp	r3, #8
 80b2f88:	d112      	bne.n	80b2fb0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80b2f8a:	4b9d      	ldr	r3, [pc, #628]	; (80b3200 <HAL_RCC_OscConfig+0x2ac>)
 80b2f8c:	685b      	ldr	r3, [r3, #4]
 80b2f8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80b2f92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80b2f96:	d10b      	bne.n	80b2fb0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80b2f98:	4b99      	ldr	r3, [pc, #612]	; (80b3200 <HAL_RCC_OscConfig+0x2ac>)
 80b2f9a:	681b      	ldr	r3, [r3, #0]
 80b2f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80b2fa0:	2b00      	cmp	r3, #0
 80b2fa2:	d05b      	beq.n	80b305c <HAL_RCC_OscConfig+0x108>
 80b2fa4:	687b      	ldr	r3, [r7, #4]
 80b2fa6:	685b      	ldr	r3, [r3, #4]
 80b2fa8:	2b00      	cmp	r3, #0
 80b2faa:	d157      	bne.n	80b305c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80b2fac:	2301      	movs	r3, #1
 80b2fae:	e23f      	b.n	80b3430 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80b2fb0:	687b      	ldr	r3, [r7, #4]
 80b2fb2:	685b      	ldr	r3, [r3, #4]
 80b2fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80b2fb8:	d106      	bne.n	80b2fc8 <HAL_RCC_OscConfig+0x74>
 80b2fba:	4b91      	ldr	r3, [pc, #580]	; (80b3200 <HAL_RCC_OscConfig+0x2ac>)
 80b2fbc:	681b      	ldr	r3, [r3, #0]
 80b2fbe:	4a90      	ldr	r2, [pc, #576]	; (80b3200 <HAL_RCC_OscConfig+0x2ac>)
 80b2fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80b2fc4:	6013      	str	r3, [r2, #0]
 80b2fc6:	e01d      	b.n	80b3004 <HAL_RCC_OscConfig+0xb0>
 80b2fc8:	687b      	ldr	r3, [r7, #4]
 80b2fca:	685b      	ldr	r3, [r3, #4]
 80b2fcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80b2fd0:	d10c      	bne.n	80b2fec <HAL_RCC_OscConfig+0x98>
 80b2fd2:	4b8b      	ldr	r3, [pc, #556]	; (80b3200 <HAL_RCC_OscConfig+0x2ac>)
 80b2fd4:	681b      	ldr	r3, [r3, #0]
 80b2fd6:	4a8a      	ldr	r2, [pc, #552]	; (80b3200 <HAL_RCC_OscConfig+0x2ac>)
 80b2fd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80b2fdc:	6013      	str	r3, [r2, #0]
 80b2fde:	4b88      	ldr	r3, [pc, #544]	; (80b3200 <HAL_RCC_OscConfig+0x2ac>)
 80b2fe0:	681b      	ldr	r3, [r3, #0]
 80b2fe2:	4a87      	ldr	r2, [pc, #540]	; (80b3200 <HAL_RCC_OscConfig+0x2ac>)
 80b2fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80b2fe8:	6013      	str	r3, [r2, #0]
 80b2fea:	e00b      	b.n	80b3004 <HAL_RCC_OscConfig+0xb0>
 80b2fec:	4b84      	ldr	r3, [pc, #528]	; (80b3200 <HAL_RCC_OscConfig+0x2ac>)
 80b2fee:	681b      	ldr	r3, [r3, #0]
 80b2ff0:	4a83      	ldr	r2, [pc, #524]	; (80b3200 <HAL_RCC_OscConfig+0x2ac>)
 80b2ff2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80b2ff6:	6013      	str	r3, [r2, #0]
 80b2ff8:	4b81      	ldr	r3, [pc, #516]	; (80b3200 <HAL_RCC_OscConfig+0x2ac>)
 80b2ffa:	681b      	ldr	r3, [r3, #0]
 80b2ffc:	4a80      	ldr	r2, [pc, #512]	; (80b3200 <HAL_RCC_OscConfig+0x2ac>)
 80b2ffe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80b3002:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80b3004:	687b      	ldr	r3, [r7, #4]
 80b3006:	685b      	ldr	r3, [r3, #4]
 80b3008:	2b00      	cmp	r3, #0
 80b300a:	d013      	beq.n	80b3034 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80b300c:	f7fc fb12 	bl	80af634 <HAL_GetTick>
 80b3010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80b3012:	e008      	b.n	80b3026 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80b3014:	f7fc fb0e 	bl	80af634 <HAL_GetTick>
 80b3018:	4602      	mov	r2, r0
 80b301a:	693b      	ldr	r3, [r7, #16]
 80b301c:	1ad3      	subs	r3, r2, r3
 80b301e:	2b64      	cmp	r3, #100	; 0x64
 80b3020:	d901      	bls.n	80b3026 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80b3022:	2303      	movs	r3, #3
 80b3024:	e204      	b.n	80b3430 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80b3026:	4b76      	ldr	r3, [pc, #472]	; (80b3200 <HAL_RCC_OscConfig+0x2ac>)
 80b3028:	681b      	ldr	r3, [r3, #0]
 80b302a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80b302e:	2b00      	cmp	r3, #0
 80b3030:	d0f0      	beq.n	80b3014 <HAL_RCC_OscConfig+0xc0>
 80b3032:	e014      	b.n	80b305e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80b3034:	f7fc fafe 	bl	80af634 <HAL_GetTick>
 80b3038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80b303a:	e008      	b.n	80b304e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80b303c:	f7fc fafa 	bl	80af634 <HAL_GetTick>
 80b3040:	4602      	mov	r2, r0
 80b3042:	693b      	ldr	r3, [r7, #16]
 80b3044:	1ad3      	subs	r3, r2, r3
 80b3046:	2b64      	cmp	r3, #100	; 0x64
 80b3048:	d901      	bls.n	80b304e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80b304a:	2303      	movs	r3, #3
 80b304c:	e1f0      	b.n	80b3430 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80b304e:	4b6c      	ldr	r3, [pc, #432]	; (80b3200 <HAL_RCC_OscConfig+0x2ac>)
 80b3050:	681b      	ldr	r3, [r3, #0]
 80b3052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80b3056:	2b00      	cmp	r3, #0
 80b3058:	d1f0      	bne.n	80b303c <HAL_RCC_OscConfig+0xe8>
 80b305a:	e000      	b.n	80b305e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80b305c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80b305e:	687b      	ldr	r3, [r7, #4]
 80b3060:	681b      	ldr	r3, [r3, #0]
 80b3062:	f003 0302 	and.w	r3, r3, #2
 80b3066:	2b00      	cmp	r3, #0
 80b3068:	d063      	beq.n	80b3132 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80b306a:	4b65      	ldr	r3, [pc, #404]	; (80b3200 <HAL_RCC_OscConfig+0x2ac>)
 80b306c:	689b      	ldr	r3, [r3, #8]
 80b306e:	f003 030c 	and.w	r3, r3, #12
 80b3072:	2b00      	cmp	r3, #0
 80b3074:	d00b      	beq.n	80b308e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80b3076:	4b62      	ldr	r3, [pc, #392]	; (80b3200 <HAL_RCC_OscConfig+0x2ac>)
 80b3078:	689b      	ldr	r3, [r3, #8]
 80b307a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80b307e:	2b08      	cmp	r3, #8
 80b3080:	d11c      	bne.n	80b30bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80b3082:	4b5f      	ldr	r3, [pc, #380]	; (80b3200 <HAL_RCC_OscConfig+0x2ac>)
 80b3084:	685b      	ldr	r3, [r3, #4]
 80b3086:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80b308a:	2b00      	cmp	r3, #0
 80b308c:	d116      	bne.n	80b30bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80b308e:	4b5c      	ldr	r3, [pc, #368]	; (80b3200 <HAL_RCC_OscConfig+0x2ac>)
 80b3090:	681b      	ldr	r3, [r3, #0]
 80b3092:	f003 0302 	and.w	r3, r3, #2
 80b3096:	2b00      	cmp	r3, #0
 80b3098:	d005      	beq.n	80b30a6 <HAL_RCC_OscConfig+0x152>
 80b309a:	687b      	ldr	r3, [r7, #4]
 80b309c:	68db      	ldr	r3, [r3, #12]
 80b309e:	2b01      	cmp	r3, #1
 80b30a0:	d001      	beq.n	80b30a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80b30a2:	2301      	movs	r3, #1
 80b30a4:	e1c4      	b.n	80b3430 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80b30a6:	4b56      	ldr	r3, [pc, #344]	; (80b3200 <HAL_RCC_OscConfig+0x2ac>)
 80b30a8:	681b      	ldr	r3, [r3, #0]
 80b30aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80b30ae:	687b      	ldr	r3, [r7, #4]
 80b30b0:	691b      	ldr	r3, [r3, #16]
 80b30b2:	00db      	lsls	r3, r3, #3
 80b30b4:	4952      	ldr	r1, [pc, #328]	; (80b3200 <HAL_RCC_OscConfig+0x2ac>)
 80b30b6:	4313      	orrs	r3, r2
 80b30b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80b30ba:	e03a      	b.n	80b3132 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80b30bc:	687b      	ldr	r3, [r7, #4]
 80b30be:	68db      	ldr	r3, [r3, #12]
 80b30c0:	2b00      	cmp	r3, #0
 80b30c2:	d020      	beq.n	80b3106 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80b30c4:	4b4f      	ldr	r3, [pc, #316]	; (80b3204 <HAL_RCC_OscConfig+0x2b0>)
 80b30c6:	2201      	movs	r2, #1
 80b30c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80b30ca:	f7fc fab3 	bl	80af634 <HAL_GetTick>
 80b30ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80b30d0:	e008      	b.n	80b30e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80b30d2:	f7fc faaf 	bl	80af634 <HAL_GetTick>
 80b30d6:	4602      	mov	r2, r0
 80b30d8:	693b      	ldr	r3, [r7, #16]
 80b30da:	1ad3      	subs	r3, r2, r3
 80b30dc:	2b02      	cmp	r3, #2
 80b30de:	d901      	bls.n	80b30e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80b30e0:	2303      	movs	r3, #3
 80b30e2:	e1a5      	b.n	80b3430 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80b30e4:	4b46      	ldr	r3, [pc, #280]	; (80b3200 <HAL_RCC_OscConfig+0x2ac>)
 80b30e6:	681b      	ldr	r3, [r3, #0]
 80b30e8:	f003 0302 	and.w	r3, r3, #2
 80b30ec:	2b00      	cmp	r3, #0
 80b30ee:	d0f0      	beq.n	80b30d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80b30f0:	4b43      	ldr	r3, [pc, #268]	; (80b3200 <HAL_RCC_OscConfig+0x2ac>)
 80b30f2:	681b      	ldr	r3, [r3, #0]
 80b30f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80b30f8:	687b      	ldr	r3, [r7, #4]
 80b30fa:	691b      	ldr	r3, [r3, #16]
 80b30fc:	00db      	lsls	r3, r3, #3
 80b30fe:	4940      	ldr	r1, [pc, #256]	; (80b3200 <HAL_RCC_OscConfig+0x2ac>)
 80b3100:	4313      	orrs	r3, r2
 80b3102:	600b      	str	r3, [r1, #0]
 80b3104:	e015      	b.n	80b3132 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80b3106:	4b3f      	ldr	r3, [pc, #252]	; (80b3204 <HAL_RCC_OscConfig+0x2b0>)
 80b3108:	2200      	movs	r2, #0
 80b310a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80b310c:	f7fc fa92 	bl	80af634 <HAL_GetTick>
 80b3110:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80b3112:	e008      	b.n	80b3126 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80b3114:	f7fc fa8e 	bl	80af634 <HAL_GetTick>
 80b3118:	4602      	mov	r2, r0
 80b311a:	693b      	ldr	r3, [r7, #16]
 80b311c:	1ad3      	subs	r3, r2, r3
 80b311e:	2b02      	cmp	r3, #2
 80b3120:	d901      	bls.n	80b3126 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80b3122:	2303      	movs	r3, #3
 80b3124:	e184      	b.n	80b3430 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80b3126:	4b36      	ldr	r3, [pc, #216]	; (80b3200 <HAL_RCC_OscConfig+0x2ac>)
 80b3128:	681b      	ldr	r3, [r3, #0]
 80b312a:	f003 0302 	and.w	r3, r3, #2
 80b312e:	2b00      	cmp	r3, #0
 80b3130:	d1f0      	bne.n	80b3114 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80b3132:	687b      	ldr	r3, [r7, #4]
 80b3134:	681b      	ldr	r3, [r3, #0]
 80b3136:	f003 0308 	and.w	r3, r3, #8
 80b313a:	2b00      	cmp	r3, #0
 80b313c:	d030      	beq.n	80b31a0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80b313e:	687b      	ldr	r3, [r7, #4]
 80b3140:	695b      	ldr	r3, [r3, #20]
 80b3142:	2b00      	cmp	r3, #0
 80b3144:	d016      	beq.n	80b3174 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80b3146:	4b30      	ldr	r3, [pc, #192]	; (80b3208 <HAL_RCC_OscConfig+0x2b4>)
 80b3148:	2201      	movs	r2, #1
 80b314a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80b314c:	f7fc fa72 	bl	80af634 <HAL_GetTick>
 80b3150:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80b3152:	e008      	b.n	80b3166 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80b3154:	f7fc fa6e 	bl	80af634 <HAL_GetTick>
 80b3158:	4602      	mov	r2, r0
 80b315a:	693b      	ldr	r3, [r7, #16]
 80b315c:	1ad3      	subs	r3, r2, r3
 80b315e:	2b02      	cmp	r3, #2
 80b3160:	d901      	bls.n	80b3166 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80b3162:	2303      	movs	r3, #3
 80b3164:	e164      	b.n	80b3430 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80b3166:	4b26      	ldr	r3, [pc, #152]	; (80b3200 <HAL_RCC_OscConfig+0x2ac>)
 80b3168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80b316a:	f003 0302 	and.w	r3, r3, #2
 80b316e:	2b00      	cmp	r3, #0
 80b3170:	d0f0      	beq.n	80b3154 <HAL_RCC_OscConfig+0x200>
 80b3172:	e015      	b.n	80b31a0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80b3174:	4b24      	ldr	r3, [pc, #144]	; (80b3208 <HAL_RCC_OscConfig+0x2b4>)
 80b3176:	2200      	movs	r2, #0
 80b3178:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80b317a:	f7fc fa5b 	bl	80af634 <HAL_GetTick>
 80b317e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80b3180:	e008      	b.n	80b3194 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80b3182:	f7fc fa57 	bl	80af634 <HAL_GetTick>
 80b3186:	4602      	mov	r2, r0
 80b3188:	693b      	ldr	r3, [r7, #16]
 80b318a:	1ad3      	subs	r3, r2, r3
 80b318c:	2b02      	cmp	r3, #2
 80b318e:	d901      	bls.n	80b3194 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80b3190:	2303      	movs	r3, #3
 80b3192:	e14d      	b.n	80b3430 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80b3194:	4b1a      	ldr	r3, [pc, #104]	; (80b3200 <HAL_RCC_OscConfig+0x2ac>)
 80b3196:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80b3198:	f003 0302 	and.w	r3, r3, #2
 80b319c:	2b00      	cmp	r3, #0
 80b319e:	d1f0      	bne.n	80b3182 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80b31a0:	687b      	ldr	r3, [r7, #4]
 80b31a2:	681b      	ldr	r3, [r3, #0]
 80b31a4:	f003 0304 	and.w	r3, r3, #4
 80b31a8:	2b00      	cmp	r3, #0
 80b31aa:	f000 80a0 	beq.w	80b32ee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80b31ae:	2300      	movs	r3, #0
 80b31b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80b31b2:	4b13      	ldr	r3, [pc, #76]	; (80b3200 <HAL_RCC_OscConfig+0x2ac>)
 80b31b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80b31b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80b31ba:	2b00      	cmp	r3, #0
 80b31bc:	d10f      	bne.n	80b31de <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80b31be:	2300      	movs	r3, #0
 80b31c0:	60bb      	str	r3, [r7, #8]
 80b31c2:	4b0f      	ldr	r3, [pc, #60]	; (80b3200 <HAL_RCC_OscConfig+0x2ac>)
 80b31c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80b31c6:	4a0e      	ldr	r2, [pc, #56]	; (80b3200 <HAL_RCC_OscConfig+0x2ac>)
 80b31c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80b31cc:	6413      	str	r3, [r2, #64]	; 0x40
 80b31ce:	4b0c      	ldr	r3, [pc, #48]	; (80b3200 <HAL_RCC_OscConfig+0x2ac>)
 80b31d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80b31d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80b31d6:	60bb      	str	r3, [r7, #8]
 80b31d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80b31da:	2301      	movs	r3, #1
 80b31dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80b31de:	4b0b      	ldr	r3, [pc, #44]	; (80b320c <HAL_RCC_OscConfig+0x2b8>)
 80b31e0:	681b      	ldr	r3, [r3, #0]
 80b31e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80b31e6:	2b00      	cmp	r3, #0
 80b31e8:	d121      	bne.n	80b322e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80b31ea:	4b08      	ldr	r3, [pc, #32]	; (80b320c <HAL_RCC_OscConfig+0x2b8>)
 80b31ec:	681b      	ldr	r3, [r3, #0]
 80b31ee:	4a07      	ldr	r2, [pc, #28]	; (80b320c <HAL_RCC_OscConfig+0x2b8>)
 80b31f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80b31f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80b31f6:	f7fc fa1d 	bl	80af634 <HAL_GetTick>
 80b31fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80b31fc:	e011      	b.n	80b3222 <HAL_RCC_OscConfig+0x2ce>
 80b31fe:	bf00      	nop
 80b3200:	40023800 	.word	0x40023800
 80b3204:	42470000 	.word	0x42470000
 80b3208:	42470e80 	.word	0x42470e80
 80b320c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80b3210:	f7fc fa10 	bl	80af634 <HAL_GetTick>
 80b3214:	4602      	mov	r2, r0
 80b3216:	693b      	ldr	r3, [r7, #16]
 80b3218:	1ad3      	subs	r3, r2, r3
 80b321a:	2b02      	cmp	r3, #2
 80b321c:	d901      	bls.n	80b3222 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80b321e:	2303      	movs	r3, #3
 80b3220:	e106      	b.n	80b3430 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80b3222:	4b85      	ldr	r3, [pc, #532]	; (80b3438 <HAL_RCC_OscConfig+0x4e4>)
 80b3224:	681b      	ldr	r3, [r3, #0]
 80b3226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80b322a:	2b00      	cmp	r3, #0
 80b322c:	d0f0      	beq.n	80b3210 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80b322e:	687b      	ldr	r3, [r7, #4]
 80b3230:	689b      	ldr	r3, [r3, #8]
 80b3232:	2b01      	cmp	r3, #1
 80b3234:	d106      	bne.n	80b3244 <HAL_RCC_OscConfig+0x2f0>
 80b3236:	4b81      	ldr	r3, [pc, #516]	; (80b343c <HAL_RCC_OscConfig+0x4e8>)
 80b3238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80b323a:	4a80      	ldr	r2, [pc, #512]	; (80b343c <HAL_RCC_OscConfig+0x4e8>)
 80b323c:	f043 0301 	orr.w	r3, r3, #1
 80b3240:	6713      	str	r3, [r2, #112]	; 0x70
 80b3242:	e01c      	b.n	80b327e <HAL_RCC_OscConfig+0x32a>
 80b3244:	687b      	ldr	r3, [r7, #4]
 80b3246:	689b      	ldr	r3, [r3, #8]
 80b3248:	2b05      	cmp	r3, #5
 80b324a:	d10c      	bne.n	80b3266 <HAL_RCC_OscConfig+0x312>
 80b324c:	4b7b      	ldr	r3, [pc, #492]	; (80b343c <HAL_RCC_OscConfig+0x4e8>)
 80b324e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80b3250:	4a7a      	ldr	r2, [pc, #488]	; (80b343c <HAL_RCC_OscConfig+0x4e8>)
 80b3252:	f043 0304 	orr.w	r3, r3, #4
 80b3256:	6713      	str	r3, [r2, #112]	; 0x70
 80b3258:	4b78      	ldr	r3, [pc, #480]	; (80b343c <HAL_RCC_OscConfig+0x4e8>)
 80b325a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80b325c:	4a77      	ldr	r2, [pc, #476]	; (80b343c <HAL_RCC_OscConfig+0x4e8>)
 80b325e:	f043 0301 	orr.w	r3, r3, #1
 80b3262:	6713      	str	r3, [r2, #112]	; 0x70
 80b3264:	e00b      	b.n	80b327e <HAL_RCC_OscConfig+0x32a>
 80b3266:	4b75      	ldr	r3, [pc, #468]	; (80b343c <HAL_RCC_OscConfig+0x4e8>)
 80b3268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80b326a:	4a74      	ldr	r2, [pc, #464]	; (80b343c <HAL_RCC_OscConfig+0x4e8>)
 80b326c:	f023 0301 	bic.w	r3, r3, #1
 80b3270:	6713      	str	r3, [r2, #112]	; 0x70
 80b3272:	4b72      	ldr	r3, [pc, #456]	; (80b343c <HAL_RCC_OscConfig+0x4e8>)
 80b3274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80b3276:	4a71      	ldr	r2, [pc, #452]	; (80b343c <HAL_RCC_OscConfig+0x4e8>)
 80b3278:	f023 0304 	bic.w	r3, r3, #4
 80b327c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80b327e:	687b      	ldr	r3, [r7, #4]
 80b3280:	689b      	ldr	r3, [r3, #8]
 80b3282:	2b00      	cmp	r3, #0
 80b3284:	d015      	beq.n	80b32b2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80b3286:	f7fc f9d5 	bl	80af634 <HAL_GetTick>
 80b328a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80b328c:	e00a      	b.n	80b32a4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80b328e:	f7fc f9d1 	bl	80af634 <HAL_GetTick>
 80b3292:	4602      	mov	r2, r0
 80b3294:	693b      	ldr	r3, [r7, #16]
 80b3296:	1ad3      	subs	r3, r2, r3
 80b3298:	f241 3288 	movw	r2, #5000	; 0x1388
 80b329c:	4293      	cmp	r3, r2
 80b329e:	d901      	bls.n	80b32a4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80b32a0:	2303      	movs	r3, #3
 80b32a2:	e0c5      	b.n	80b3430 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80b32a4:	4b65      	ldr	r3, [pc, #404]	; (80b343c <HAL_RCC_OscConfig+0x4e8>)
 80b32a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80b32a8:	f003 0302 	and.w	r3, r3, #2
 80b32ac:	2b00      	cmp	r3, #0
 80b32ae:	d0ee      	beq.n	80b328e <HAL_RCC_OscConfig+0x33a>
 80b32b0:	e014      	b.n	80b32dc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80b32b2:	f7fc f9bf 	bl	80af634 <HAL_GetTick>
 80b32b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80b32b8:	e00a      	b.n	80b32d0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80b32ba:	f7fc f9bb 	bl	80af634 <HAL_GetTick>
 80b32be:	4602      	mov	r2, r0
 80b32c0:	693b      	ldr	r3, [r7, #16]
 80b32c2:	1ad3      	subs	r3, r2, r3
 80b32c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80b32c8:	4293      	cmp	r3, r2
 80b32ca:	d901      	bls.n	80b32d0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80b32cc:	2303      	movs	r3, #3
 80b32ce:	e0af      	b.n	80b3430 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80b32d0:	4b5a      	ldr	r3, [pc, #360]	; (80b343c <HAL_RCC_OscConfig+0x4e8>)
 80b32d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80b32d4:	f003 0302 	and.w	r3, r3, #2
 80b32d8:	2b00      	cmp	r3, #0
 80b32da:	d1ee      	bne.n	80b32ba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80b32dc:	7dfb      	ldrb	r3, [r7, #23]
 80b32de:	2b01      	cmp	r3, #1
 80b32e0:	d105      	bne.n	80b32ee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80b32e2:	4b56      	ldr	r3, [pc, #344]	; (80b343c <HAL_RCC_OscConfig+0x4e8>)
 80b32e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80b32e6:	4a55      	ldr	r2, [pc, #340]	; (80b343c <HAL_RCC_OscConfig+0x4e8>)
 80b32e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80b32ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80b32ee:	687b      	ldr	r3, [r7, #4]
 80b32f0:	699b      	ldr	r3, [r3, #24]
 80b32f2:	2b00      	cmp	r3, #0
 80b32f4:	f000 809b 	beq.w	80b342e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80b32f8:	4b50      	ldr	r3, [pc, #320]	; (80b343c <HAL_RCC_OscConfig+0x4e8>)
 80b32fa:	689b      	ldr	r3, [r3, #8]
 80b32fc:	f003 030c 	and.w	r3, r3, #12
 80b3300:	2b08      	cmp	r3, #8
 80b3302:	d05c      	beq.n	80b33be <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80b3304:	687b      	ldr	r3, [r7, #4]
 80b3306:	699b      	ldr	r3, [r3, #24]
 80b3308:	2b02      	cmp	r3, #2
 80b330a:	d141      	bne.n	80b3390 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80b330c:	4b4c      	ldr	r3, [pc, #304]	; (80b3440 <HAL_RCC_OscConfig+0x4ec>)
 80b330e:	2200      	movs	r2, #0
 80b3310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80b3312:	f7fc f98f 	bl	80af634 <HAL_GetTick>
 80b3316:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80b3318:	e008      	b.n	80b332c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80b331a:	f7fc f98b 	bl	80af634 <HAL_GetTick>
 80b331e:	4602      	mov	r2, r0
 80b3320:	693b      	ldr	r3, [r7, #16]
 80b3322:	1ad3      	subs	r3, r2, r3
 80b3324:	2b02      	cmp	r3, #2
 80b3326:	d901      	bls.n	80b332c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80b3328:	2303      	movs	r3, #3
 80b332a:	e081      	b.n	80b3430 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80b332c:	4b43      	ldr	r3, [pc, #268]	; (80b343c <HAL_RCC_OscConfig+0x4e8>)
 80b332e:	681b      	ldr	r3, [r3, #0]
 80b3330:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80b3334:	2b00      	cmp	r3, #0
 80b3336:	d1f0      	bne.n	80b331a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80b3338:	687b      	ldr	r3, [r7, #4]
 80b333a:	69da      	ldr	r2, [r3, #28]
 80b333c:	687b      	ldr	r3, [r7, #4]
 80b333e:	6a1b      	ldr	r3, [r3, #32]
 80b3340:	431a      	orrs	r2, r3
 80b3342:	687b      	ldr	r3, [r7, #4]
 80b3344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80b3346:	019b      	lsls	r3, r3, #6
 80b3348:	431a      	orrs	r2, r3
 80b334a:	687b      	ldr	r3, [r7, #4]
 80b334c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80b334e:	085b      	lsrs	r3, r3, #1
 80b3350:	3b01      	subs	r3, #1
 80b3352:	041b      	lsls	r3, r3, #16
 80b3354:	431a      	orrs	r2, r3
 80b3356:	687b      	ldr	r3, [r7, #4]
 80b3358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80b335a:	061b      	lsls	r3, r3, #24
 80b335c:	4937      	ldr	r1, [pc, #220]	; (80b343c <HAL_RCC_OscConfig+0x4e8>)
 80b335e:	4313      	orrs	r3, r2
 80b3360:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80b3362:	4b37      	ldr	r3, [pc, #220]	; (80b3440 <HAL_RCC_OscConfig+0x4ec>)
 80b3364:	2201      	movs	r2, #1
 80b3366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80b3368:	f7fc f964 	bl	80af634 <HAL_GetTick>
 80b336c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80b336e:	e008      	b.n	80b3382 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80b3370:	f7fc f960 	bl	80af634 <HAL_GetTick>
 80b3374:	4602      	mov	r2, r0
 80b3376:	693b      	ldr	r3, [r7, #16]
 80b3378:	1ad3      	subs	r3, r2, r3
 80b337a:	2b02      	cmp	r3, #2
 80b337c:	d901      	bls.n	80b3382 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80b337e:	2303      	movs	r3, #3
 80b3380:	e056      	b.n	80b3430 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80b3382:	4b2e      	ldr	r3, [pc, #184]	; (80b343c <HAL_RCC_OscConfig+0x4e8>)
 80b3384:	681b      	ldr	r3, [r3, #0]
 80b3386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80b338a:	2b00      	cmp	r3, #0
 80b338c:	d0f0      	beq.n	80b3370 <HAL_RCC_OscConfig+0x41c>
 80b338e:	e04e      	b.n	80b342e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80b3390:	4b2b      	ldr	r3, [pc, #172]	; (80b3440 <HAL_RCC_OscConfig+0x4ec>)
 80b3392:	2200      	movs	r2, #0
 80b3394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80b3396:	f7fc f94d 	bl	80af634 <HAL_GetTick>
 80b339a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80b339c:	e008      	b.n	80b33b0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80b339e:	f7fc f949 	bl	80af634 <HAL_GetTick>
 80b33a2:	4602      	mov	r2, r0
 80b33a4:	693b      	ldr	r3, [r7, #16]
 80b33a6:	1ad3      	subs	r3, r2, r3
 80b33a8:	2b02      	cmp	r3, #2
 80b33aa:	d901      	bls.n	80b33b0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80b33ac:	2303      	movs	r3, #3
 80b33ae:	e03f      	b.n	80b3430 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80b33b0:	4b22      	ldr	r3, [pc, #136]	; (80b343c <HAL_RCC_OscConfig+0x4e8>)
 80b33b2:	681b      	ldr	r3, [r3, #0]
 80b33b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80b33b8:	2b00      	cmp	r3, #0
 80b33ba:	d1f0      	bne.n	80b339e <HAL_RCC_OscConfig+0x44a>
 80b33bc:	e037      	b.n	80b342e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80b33be:	687b      	ldr	r3, [r7, #4]
 80b33c0:	699b      	ldr	r3, [r3, #24]
 80b33c2:	2b01      	cmp	r3, #1
 80b33c4:	d101      	bne.n	80b33ca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80b33c6:	2301      	movs	r3, #1
 80b33c8:	e032      	b.n	80b3430 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80b33ca:	4b1c      	ldr	r3, [pc, #112]	; (80b343c <HAL_RCC_OscConfig+0x4e8>)
 80b33cc:	685b      	ldr	r3, [r3, #4]
 80b33ce:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80b33d0:	687b      	ldr	r3, [r7, #4]
 80b33d2:	699b      	ldr	r3, [r3, #24]
 80b33d4:	2b01      	cmp	r3, #1
 80b33d6:	d028      	beq.n	80b342a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80b33d8:	68fb      	ldr	r3, [r7, #12]
 80b33da:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80b33de:	687b      	ldr	r3, [r7, #4]
 80b33e0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80b33e2:	429a      	cmp	r2, r3
 80b33e4:	d121      	bne.n	80b342a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80b33e6:	68fb      	ldr	r3, [r7, #12]
 80b33e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80b33ec:	687b      	ldr	r3, [r7, #4]
 80b33ee:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80b33f0:	429a      	cmp	r2, r3
 80b33f2:	d11a      	bne.n	80b342a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80b33f4:	68fa      	ldr	r2, [r7, #12]
 80b33f6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80b33fa:	4013      	ands	r3, r2
 80b33fc:	687a      	ldr	r2, [r7, #4]
 80b33fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80b3400:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80b3402:	4293      	cmp	r3, r2
 80b3404:	d111      	bne.n	80b342a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80b3406:	68fb      	ldr	r3, [r7, #12]
 80b3408:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80b340c:	687b      	ldr	r3, [r7, #4]
 80b340e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80b3410:	085b      	lsrs	r3, r3, #1
 80b3412:	3b01      	subs	r3, #1
 80b3414:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80b3416:	429a      	cmp	r2, r3
 80b3418:	d107      	bne.n	80b342a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80b341a:	68fb      	ldr	r3, [r7, #12]
 80b341c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80b3420:	687b      	ldr	r3, [r7, #4]
 80b3422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80b3424:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80b3426:	429a      	cmp	r2, r3
 80b3428:	d001      	beq.n	80b342e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80b342a:	2301      	movs	r3, #1
 80b342c:	e000      	b.n	80b3430 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80b342e:	2300      	movs	r3, #0
}
 80b3430:	4618      	mov	r0, r3
 80b3432:	3718      	adds	r7, #24
 80b3434:	46bd      	mov	sp, r7
 80b3436:	bd80      	pop	{r7, pc}
 80b3438:	40007000 	.word	0x40007000
 80b343c:	40023800 	.word	0x40023800
 80b3440:	42470060 	.word	0x42470060

080b3444 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80b3444:	b580      	push	{r7, lr}
 80b3446:	b084      	sub	sp, #16
 80b3448:	af00      	add	r7, sp, #0
 80b344a:	6078      	str	r0, [r7, #4]
 80b344c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80b344e:	687b      	ldr	r3, [r7, #4]
 80b3450:	2b00      	cmp	r3, #0
 80b3452:	d101      	bne.n	80b3458 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80b3454:	2301      	movs	r3, #1
 80b3456:	e0cc      	b.n	80b35f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80b3458:	4b68      	ldr	r3, [pc, #416]	; (80b35fc <HAL_RCC_ClockConfig+0x1b8>)
 80b345a:	681b      	ldr	r3, [r3, #0]
 80b345c:	f003 0307 	and.w	r3, r3, #7
 80b3460:	683a      	ldr	r2, [r7, #0]
 80b3462:	429a      	cmp	r2, r3
 80b3464:	d90c      	bls.n	80b3480 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80b3466:	4b65      	ldr	r3, [pc, #404]	; (80b35fc <HAL_RCC_ClockConfig+0x1b8>)
 80b3468:	683a      	ldr	r2, [r7, #0]
 80b346a:	b2d2      	uxtb	r2, r2
 80b346c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80b346e:	4b63      	ldr	r3, [pc, #396]	; (80b35fc <HAL_RCC_ClockConfig+0x1b8>)
 80b3470:	681b      	ldr	r3, [r3, #0]
 80b3472:	f003 0307 	and.w	r3, r3, #7
 80b3476:	683a      	ldr	r2, [r7, #0]
 80b3478:	429a      	cmp	r2, r3
 80b347a:	d001      	beq.n	80b3480 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80b347c:	2301      	movs	r3, #1
 80b347e:	e0b8      	b.n	80b35f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80b3480:	687b      	ldr	r3, [r7, #4]
 80b3482:	681b      	ldr	r3, [r3, #0]
 80b3484:	f003 0302 	and.w	r3, r3, #2
 80b3488:	2b00      	cmp	r3, #0
 80b348a:	d020      	beq.n	80b34ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80b348c:	687b      	ldr	r3, [r7, #4]
 80b348e:	681b      	ldr	r3, [r3, #0]
 80b3490:	f003 0304 	and.w	r3, r3, #4
 80b3494:	2b00      	cmp	r3, #0
 80b3496:	d005      	beq.n	80b34a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80b3498:	4b59      	ldr	r3, [pc, #356]	; (80b3600 <HAL_RCC_ClockConfig+0x1bc>)
 80b349a:	689b      	ldr	r3, [r3, #8]
 80b349c:	4a58      	ldr	r2, [pc, #352]	; (80b3600 <HAL_RCC_ClockConfig+0x1bc>)
 80b349e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80b34a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80b34a4:	687b      	ldr	r3, [r7, #4]
 80b34a6:	681b      	ldr	r3, [r3, #0]
 80b34a8:	f003 0308 	and.w	r3, r3, #8
 80b34ac:	2b00      	cmp	r3, #0
 80b34ae:	d005      	beq.n	80b34bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80b34b0:	4b53      	ldr	r3, [pc, #332]	; (80b3600 <HAL_RCC_ClockConfig+0x1bc>)
 80b34b2:	689b      	ldr	r3, [r3, #8]
 80b34b4:	4a52      	ldr	r2, [pc, #328]	; (80b3600 <HAL_RCC_ClockConfig+0x1bc>)
 80b34b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80b34ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80b34bc:	4b50      	ldr	r3, [pc, #320]	; (80b3600 <HAL_RCC_ClockConfig+0x1bc>)
 80b34be:	689b      	ldr	r3, [r3, #8]
 80b34c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80b34c4:	687b      	ldr	r3, [r7, #4]
 80b34c6:	689b      	ldr	r3, [r3, #8]
 80b34c8:	494d      	ldr	r1, [pc, #308]	; (80b3600 <HAL_RCC_ClockConfig+0x1bc>)
 80b34ca:	4313      	orrs	r3, r2
 80b34cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80b34ce:	687b      	ldr	r3, [r7, #4]
 80b34d0:	681b      	ldr	r3, [r3, #0]
 80b34d2:	f003 0301 	and.w	r3, r3, #1
 80b34d6:	2b00      	cmp	r3, #0
 80b34d8:	d044      	beq.n	80b3564 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80b34da:	687b      	ldr	r3, [r7, #4]
 80b34dc:	685b      	ldr	r3, [r3, #4]
 80b34de:	2b01      	cmp	r3, #1
 80b34e0:	d107      	bne.n	80b34f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80b34e2:	4b47      	ldr	r3, [pc, #284]	; (80b3600 <HAL_RCC_ClockConfig+0x1bc>)
 80b34e4:	681b      	ldr	r3, [r3, #0]
 80b34e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80b34ea:	2b00      	cmp	r3, #0
 80b34ec:	d119      	bne.n	80b3522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80b34ee:	2301      	movs	r3, #1
 80b34f0:	e07f      	b.n	80b35f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80b34f2:	687b      	ldr	r3, [r7, #4]
 80b34f4:	685b      	ldr	r3, [r3, #4]
 80b34f6:	2b02      	cmp	r3, #2
 80b34f8:	d003      	beq.n	80b3502 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80b34fa:	687b      	ldr	r3, [r7, #4]
 80b34fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80b34fe:	2b03      	cmp	r3, #3
 80b3500:	d107      	bne.n	80b3512 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80b3502:	4b3f      	ldr	r3, [pc, #252]	; (80b3600 <HAL_RCC_ClockConfig+0x1bc>)
 80b3504:	681b      	ldr	r3, [r3, #0]
 80b3506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80b350a:	2b00      	cmp	r3, #0
 80b350c:	d109      	bne.n	80b3522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80b350e:	2301      	movs	r3, #1
 80b3510:	e06f      	b.n	80b35f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80b3512:	4b3b      	ldr	r3, [pc, #236]	; (80b3600 <HAL_RCC_ClockConfig+0x1bc>)
 80b3514:	681b      	ldr	r3, [r3, #0]
 80b3516:	f003 0302 	and.w	r3, r3, #2
 80b351a:	2b00      	cmp	r3, #0
 80b351c:	d101      	bne.n	80b3522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80b351e:	2301      	movs	r3, #1
 80b3520:	e067      	b.n	80b35f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80b3522:	4b37      	ldr	r3, [pc, #220]	; (80b3600 <HAL_RCC_ClockConfig+0x1bc>)
 80b3524:	689b      	ldr	r3, [r3, #8]
 80b3526:	f023 0203 	bic.w	r2, r3, #3
 80b352a:	687b      	ldr	r3, [r7, #4]
 80b352c:	685b      	ldr	r3, [r3, #4]
 80b352e:	4934      	ldr	r1, [pc, #208]	; (80b3600 <HAL_RCC_ClockConfig+0x1bc>)
 80b3530:	4313      	orrs	r3, r2
 80b3532:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80b3534:	f7fc f87e 	bl	80af634 <HAL_GetTick>
 80b3538:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80b353a:	e00a      	b.n	80b3552 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80b353c:	f7fc f87a 	bl	80af634 <HAL_GetTick>
 80b3540:	4602      	mov	r2, r0
 80b3542:	68fb      	ldr	r3, [r7, #12]
 80b3544:	1ad3      	subs	r3, r2, r3
 80b3546:	f241 3288 	movw	r2, #5000	; 0x1388
 80b354a:	4293      	cmp	r3, r2
 80b354c:	d901      	bls.n	80b3552 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80b354e:	2303      	movs	r3, #3
 80b3550:	e04f      	b.n	80b35f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80b3552:	4b2b      	ldr	r3, [pc, #172]	; (80b3600 <HAL_RCC_ClockConfig+0x1bc>)
 80b3554:	689b      	ldr	r3, [r3, #8]
 80b3556:	f003 020c 	and.w	r2, r3, #12
 80b355a:	687b      	ldr	r3, [r7, #4]
 80b355c:	685b      	ldr	r3, [r3, #4]
 80b355e:	009b      	lsls	r3, r3, #2
 80b3560:	429a      	cmp	r2, r3
 80b3562:	d1eb      	bne.n	80b353c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80b3564:	4b25      	ldr	r3, [pc, #148]	; (80b35fc <HAL_RCC_ClockConfig+0x1b8>)
 80b3566:	681b      	ldr	r3, [r3, #0]
 80b3568:	f003 0307 	and.w	r3, r3, #7
 80b356c:	683a      	ldr	r2, [r7, #0]
 80b356e:	429a      	cmp	r2, r3
 80b3570:	d20c      	bcs.n	80b358c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80b3572:	4b22      	ldr	r3, [pc, #136]	; (80b35fc <HAL_RCC_ClockConfig+0x1b8>)
 80b3574:	683a      	ldr	r2, [r7, #0]
 80b3576:	b2d2      	uxtb	r2, r2
 80b3578:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80b357a:	4b20      	ldr	r3, [pc, #128]	; (80b35fc <HAL_RCC_ClockConfig+0x1b8>)
 80b357c:	681b      	ldr	r3, [r3, #0]
 80b357e:	f003 0307 	and.w	r3, r3, #7
 80b3582:	683a      	ldr	r2, [r7, #0]
 80b3584:	429a      	cmp	r2, r3
 80b3586:	d001      	beq.n	80b358c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80b3588:	2301      	movs	r3, #1
 80b358a:	e032      	b.n	80b35f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80b358c:	687b      	ldr	r3, [r7, #4]
 80b358e:	681b      	ldr	r3, [r3, #0]
 80b3590:	f003 0304 	and.w	r3, r3, #4
 80b3594:	2b00      	cmp	r3, #0
 80b3596:	d008      	beq.n	80b35aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80b3598:	4b19      	ldr	r3, [pc, #100]	; (80b3600 <HAL_RCC_ClockConfig+0x1bc>)
 80b359a:	689b      	ldr	r3, [r3, #8]
 80b359c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80b35a0:	687b      	ldr	r3, [r7, #4]
 80b35a2:	68db      	ldr	r3, [r3, #12]
 80b35a4:	4916      	ldr	r1, [pc, #88]	; (80b3600 <HAL_RCC_ClockConfig+0x1bc>)
 80b35a6:	4313      	orrs	r3, r2
 80b35a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80b35aa:	687b      	ldr	r3, [r7, #4]
 80b35ac:	681b      	ldr	r3, [r3, #0]
 80b35ae:	f003 0308 	and.w	r3, r3, #8
 80b35b2:	2b00      	cmp	r3, #0
 80b35b4:	d009      	beq.n	80b35ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80b35b6:	4b12      	ldr	r3, [pc, #72]	; (80b3600 <HAL_RCC_ClockConfig+0x1bc>)
 80b35b8:	689b      	ldr	r3, [r3, #8]
 80b35ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80b35be:	687b      	ldr	r3, [r7, #4]
 80b35c0:	691b      	ldr	r3, [r3, #16]
 80b35c2:	00db      	lsls	r3, r3, #3
 80b35c4:	490e      	ldr	r1, [pc, #56]	; (80b3600 <HAL_RCC_ClockConfig+0x1bc>)
 80b35c6:	4313      	orrs	r3, r2
 80b35c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80b35ca:	f000 f821 	bl	80b3610 <HAL_RCC_GetSysClockFreq>
 80b35ce:	4602      	mov	r2, r0
 80b35d0:	4b0b      	ldr	r3, [pc, #44]	; (80b3600 <HAL_RCC_ClockConfig+0x1bc>)
 80b35d2:	689b      	ldr	r3, [r3, #8]
 80b35d4:	091b      	lsrs	r3, r3, #4
 80b35d6:	f003 030f 	and.w	r3, r3, #15
 80b35da:	490a      	ldr	r1, [pc, #40]	; (80b3604 <HAL_RCC_ClockConfig+0x1c0>)
 80b35dc:	5ccb      	ldrb	r3, [r1, r3]
 80b35de:	fa22 f303 	lsr.w	r3, r2, r3
 80b35e2:	4a09      	ldr	r2, [pc, #36]	; (80b3608 <HAL_RCC_ClockConfig+0x1c4>)
 80b35e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80b35e6:	4b09      	ldr	r3, [pc, #36]	; (80b360c <HAL_RCC_ClockConfig+0x1c8>)
 80b35e8:	681b      	ldr	r3, [r3, #0]
 80b35ea:	4618      	mov	r0, r3
 80b35ec:	f7fa fd04 	bl	80adff8 <HAL_InitTick>

  return HAL_OK;
 80b35f0:	2300      	movs	r3, #0
}
 80b35f2:	4618      	mov	r0, r3
 80b35f4:	3710      	adds	r7, #16
 80b35f6:	46bd      	mov	sp, r7
 80b35f8:	bd80      	pop	{r7, pc}
 80b35fa:	bf00      	nop
 80b35fc:	40023c00 	.word	0x40023c00
 80b3600:	40023800 	.word	0x40023800
 80b3604:	080c7a58 	.word	0x080c7a58
 80b3608:	20007c54 	.word	0x20007c54
 80b360c:	20007cac 	.word	0x20007cac

080b3610 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80b3610:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80b3614:	b084      	sub	sp, #16
 80b3616:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80b3618:	2300      	movs	r3, #0
 80b361a:	607b      	str	r3, [r7, #4]
 80b361c:	2300      	movs	r3, #0
 80b361e:	60fb      	str	r3, [r7, #12]
 80b3620:	2300      	movs	r3, #0
 80b3622:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80b3624:	2300      	movs	r3, #0
 80b3626:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80b3628:	4b67      	ldr	r3, [pc, #412]	; (80b37c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80b362a:	689b      	ldr	r3, [r3, #8]
 80b362c:	f003 030c 	and.w	r3, r3, #12
 80b3630:	2b08      	cmp	r3, #8
 80b3632:	d00d      	beq.n	80b3650 <HAL_RCC_GetSysClockFreq+0x40>
 80b3634:	2b08      	cmp	r3, #8
 80b3636:	f200 80bd 	bhi.w	80b37b4 <HAL_RCC_GetSysClockFreq+0x1a4>
 80b363a:	2b00      	cmp	r3, #0
 80b363c:	d002      	beq.n	80b3644 <HAL_RCC_GetSysClockFreq+0x34>
 80b363e:	2b04      	cmp	r3, #4
 80b3640:	d003      	beq.n	80b364a <HAL_RCC_GetSysClockFreq+0x3a>
 80b3642:	e0b7      	b.n	80b37b4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80b3644:	4b61      	ldr	r3, [pc, #388]	; (80b37cc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80b3646:	60bb      	str	r3, [r7, #8]
       break;
 80b3648:	e0b7      	b.n	80b37ba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80b364a:	4b60      	ldr	r3, [pc, #384]	; (80b37cc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80b364c:	60bb      	str	r3, [r7, #8]
      break;
 80b364e:	e0b4      	b.n	80b37ba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80b3650:	4b5d      	ldr	r3, [pc, #372]	; (80b37c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80b3652:	685b      	ldr	r3, [r3, #4]
 80b3654:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80b3658:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80b365a:	4b5b      	ldr	r3, [pc, #364]	; (80b37c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80b365c:	685b      	ldr	r3, [r3, #4]
 80b365e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80b3662:	2b00      	cmp	r3, #0
 80b3664:	d04d      	beq.n	80b3702 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80b3666:	4b58      	ldr	r3, [pc, #352]	; (80b37c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80b3668:	685b      	ldr	r3, [r3, #4]
 80b366a:	099b      	lsrs	r3, r3, #6
 80b366c:	461a      	mov	r2, r3
 80b366e:	f04f 0300 	mov.w	r3, #0
 80b3672:	f240 10ff 	movw	r0, #511	; 0x1ff
 80b3676:	f04f 0100 	mov.w	r1, #0
 80b367a:	ea02 0800 	and.w	r8, r2, r0
 80b367e:	ea03 0901 	and.w	r9, r3, r1
 80b3682:	4640      	mov	r0, r8
 80b3684:	4649      	mov	r1, r9
 80b3686:	f04f 0200 	mov.w	r2, #0
 80b368a:	f04f 0300 	mov.w	r3, #0
 80b368e:	014b      	lsls	r3, r1, #5
 80b3690:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80b3694:	0142      	lsls	r2, r0, #5
 80b3696:	4610      	mov	r0, r2
 80b3698:	4619      	mov	r1, r3
 80b369a:	ebb0 0008 	subs.w	r0, r0, r8
 80b369e:	eb61 0109 	sbc.w	r1, r1, r9
 80b36a2:	f04f 0200 	mov.w	r2, #0
 80b36a6:	f04f 0300 	mov.w	r3, #0
 80b36aa:	018b      	lsls	r3, r1, #6
 80b36ac:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80b36b0:	0182      	lsls	r2, r0, #6
 80b36b2:	1a12      	subs	r2, r2, r0
 80b36b4:	eb63 0301 	sbc.w	r3, r3, r1
 80b36b8:	f04f 0000 	mov.w	r0, #0
 80b36bc:	f04f 0100 	mov.w	r1, #0
 80b36c0:	00d9      	lsls	r1, r3, #3
 80b36c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80b36c6:	00d0      	lsls	r0, r2, #3
 80b36c8:	4602      	mov	r2, r0
 80b36ca:	460b      	mov	r3, r1
 80b36cc:	eb12 0208 	adds.w	r2, r2, r8
 80b36d0:	eb43 0309 	adc.w	r3, r3, r9
 80b36d4:	f04f 0000 	mov.w	r0, #0
 80b36d8:	f04f 0100 	mov.w	r1, #0
 80b36dc:	0299      	lsls	r1, r3, #10
 80b36de:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80b36e2:	0290      	lsls	r0, r2, #10
 80b36e4:	4602      	mov	r2, r0
 80b36e6:	460b      	mov	r3, r1
 80b36e8:	4610      	mov	r0, r2
 80b36ea:	4619      	mov	r1, r3
 80b36ec:	687b      	ldr	r3, [r7, #4]
 80b36ee:	461a      	mov	r2, r3
 80b36f0:	f04f 0300 	mov.w	r3, #0
 80b36f4:	f7ed fbd6 	bl	80a0ea4 <__aeabi_uldivmod>
 80b36f8:	4602      	mov	r2, r0
 80b36fa:	460b      	mov	r3, r1
 80b36fc:	4613      	mov	r3, r2
 80b36fe:	60fb      	str	r3, [r7, #12]
 80b3700:	e04a      	b.n	80b3798 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80b3702:	4b31      	ldr	r3, [pc, #196]	; (80b37c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80b3704:	685b      	ldr	r3, [r3, #4]
 80b3706:	099b      	lsrs	r3, r3, #6
 80b3708:	461a      	mov	r2, r3
 80b370a:	f04f 0300 	mov.w	r3, #0
 80b370e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80b3712:	f04f 0100 	mov.w	r1, #0
 80b3716:	ea02 0400 	and.w	r4, r2, r0
 80b371a:	ea03 0501 	and.w	r5, r3, r1
 80b371e:	4620      	mov	r0, r4
 80b3720:	4629      	mov	r1, r5
 80b3722:	f04f 0200 	mov.w	r2, #0
 80b3726:	f04f 0300 	mov.w	r3, #0
 80b372a:	014b      	lsls	r3, r1, #5
 80b372c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80b3730:	0142      	lsls	r2, r0, #5
 80b3732:	4610      	mov	r0, r2
 80b3734:	4619      	mov	r1, r3
 80b3736:	1b00      	subs	r0, r0, r4
 80b3738:	eb61 0105 	sbc.w	r1, r1, r5
 80b373c:	f04f 0200 	mov.w	r2, #0
 80b3740:	f04f 0300 	mov.w	r3, #0
 80b3744:	018b      	lsls	r3, r1, #6
 80b3746:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80b374a:	0182      	lsls	r2, r0, #6
 80b374c:	1a12      	subs	r2, r2, r0
 80b374e:	eb63 0301 	sbc.w	r3, r3, r1
 80b3752:	f04f 0000 	mov.w	r0, #0
 80b3756:	f04f 0100 	mov.w	r1, #0
 80b375a:	00d9      	lsls	r1, r3, #3
 80b375c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80b3760:	00d0      	lsls	r0, r2, #3
 80b3762:	4602      	mov	r2, r0
 80b3764:	460b      	mov	r3, r1
 80b3766:	1912      	adds	r2, r2, r4
 80b3768:	eb45 0303 	adc.w	r3, r5, r3
 80b376c:	f04f 0000 	mov.w	r0, #0
 80b3770:	f04f 0100 	mov.w	r1, #0
 80b3774:	0299      	lsls	r1, r3, #10
 80b3776:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80b377a:	0290      	lsls	r0, r2, #10
 80b377c:	4602      	mov	r2, r0
 80b377e:	460b      	mov	r3, r1
 80b3780:	4610      	mov	r0, r2
 80b3782:	4619      	mov	r1, r3
 80b3784:	687b      	ldr	r3, [r7, #4]
 80b3786:	461a      	mov	r2, r3
 80b3788:	f04f 0300 	mov.w	r3, #0
 80b378c:	f7ed fb8a 	bl	80a0ea4 <__aeabi_uldivmod>
 80b3790:	4602      	mov	r2, r0
 80b3792:	460b      	mov	r3, r1
 80b3794:	4613      	mov	r3, r2
 80b3796:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80b3798:	4b0b      	ldr	r3, [pc, #44]	; (80b37c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80b379a:	685b      	ldr	r3, [r3, #4]
 80b379c:	0c1b      	lsrs	r3, r3, #16
 80b379e:	f003 0303 	and.w	r3, r3, #3
 80b37a2:	3301      	adds	r3, #1
 80b37a4:	005b      	lsls	r3, r3, #1
 80b37a6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80b37a8:	68fa      	ldr	r2, [r7, #12]
 80b37aa:	683b      	ldr	r3, [r7, #0]
 80b37ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80b37b0:	60bb      	str	r3, [r7, #8]
      break;
 80b37b2:	e002      	b.n	80b37ba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80b37b4:	4b05      	ldr	r3, [pc, #20]	; (80b37cc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80b37b6:	60bb      	str	r3, [r7, #8]
      break;
 80b37b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80b37ba:	68bb      	ldr	r3, [r7, #8]
}
 80b37bc:	4618      	mov	r0, r3
 80b37be:	3710      	adds	r7, #16
 80b37c0:	46bd      	mov	sp, r7
 80b37c2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80b37c6:	bf00      	nop
 80b37c8:	40023800 	.word	0x40023800
 80b37cc:	00f42400 	.word	0x00f42400

080b37d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80b37d0:	b480      	push	{r7}
 80b37d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80b37d4:	4b03      	ldr	r3, [pc, #12]	; (80b37e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80b37d6:	681b      	ldr	r3, [r3, #0]
}
 80b37d8:	4618      	mov	r0, r3
 80b37da:	46bd      	mov	sp, r7
 80b37dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b37e0:	4770      	bx	lr
 80b37e2:	bf00      	nop
 80b37e4:	20007c54 	.word	0x20007c54

080b37e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80b37e8:	b580      	push	{r7, lr}
 80b37ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80b37ec:	f7ff fff0 	bl	80b37d0 <HAL_RCC_GetHCLKFreq>
 80b37f0:	4602      	mov	r2, r0
 80b37f2:	4b05      	ldr	r3, [pc, #20]	; (80b3808 <HAL_RCC_GetPCLK1Freq+0x20>)
 80b37f4:	689b      	ldr	r3, [r3, #8]
 80b37f6:	0a9b      	lsrs	r3, r3, #10
 80b37f8:	f003 0307 	and.w	r3, r3, #7
 80b37fc:	4903      	ldr	r1, [pc, #12]	; (80b380c <HAL_RCC_GetPCLK1Freq+0x24>)
 80b37fe:	5ccb      	ldrb	r3, [r1, r3]
 80b3800:	fa22 f303 	lsr.w	r3, r2, r3
}
 80b3804:	4618      	mov	r0, r3
 80b3806:	bd80      	pop	{r7, pc}
 80b3808:	40023800 	.word	0x40023800
 80b380c:	080c7a68 	.word	0x080c7a68

080b3810 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80b3810:	b580      	push	{r7, lr}
 80b3812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80b3814:	f7ff ffdc 	bl	80b37d0 <HAL_RCC_GetHCLKFreq>
 80b3818:	4602      	mov	r2, r0
 80b381a:	4b05      	ldr	r3, [pc, #20]	; (80b3830 <HAL_RCC_GetPCLK2Freq+0x20>)
 80b381c:	689b      	ldr	r3, [r3, #8]
 80b381e:	0b5b      	lsrs	r3, r3, #13
 80b3820:	f003 0307 	and.w	r3, r3, #7
 80b3824:	4903      	ldr	r1, [pc, #12]	; (80b3834 <HAL_RCC_GetPCLK2Freq+0x24>)
 80b3826:	5ccb      	ldrb	r3, [r1, r3]
 80b3828:	fa22 f303 	lsr.w	r3, r2, r3
}
 80b382c:	4618      	mov	r0, r3
 80b382e:	bd80      	pop	{r7, pc}
 80b3830:	40023800 	.word	0x40023800
 80b3834:	080c7a68 	.word	0x080c7a68

080b3838 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80b3838:	b480      	push	{r7}
 80b383a:	b083      	sub	sp, #12
 80b383c:	af00      	add	r7, sp, #0
 80b383e:	6078      	str	r0, [r7, #4]
 80b3840:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80b3842:	687b      	ldr	r3, [r7, #4]
 80b3844:	220f      	movs	r2, #15
 80b3846:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80b3848:	4b12      	ldr	r3, [pc, #72]	; (80b3894 <HAL_RCC_GetClockConfig+0x5c>)
 80b384a:	689b      	ldr	r3, [r3, #8]
 80b384c:	f003 0203 	and.w	r2, r3, #3
 80b3850:	687b      	ldr	r3, [r7, #4]
 80b3852:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80b3854:	4b0f      	ldr	r3, [pc, #60]	; (80b3894 <HAL_RCC_GetClockConfig+0x5c>)
 80b3856:	689b      	ldr	r3, [r3, #8]
 80b3858:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80b385c:	687b      	ldr	r3, [r7, #4]
 80b385e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80b3860:	4b0c      	ldr	r3, [pc, #48]	; (80b3894 <HAL_RCC_GetClockConfig+0x5c>)
 80b3862:	689b      	ldr	r3, [r3, #8]
 80b3864:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80b3868:	687b      	ldr	r3, [r7, #4]
 80b386a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80b386c:	4b09      	ldr	r3, [pc, #36]	; (80b3894 <HAL_RCC_GetClockConfig+0x5c>)
 80b386e:	689b      	ldr	r3, [r3, #8]
 80b3870:	08db      	lsrs	r3, r3, #3
 80b3872:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80b3876:	687b      	ldr	r3, [r7, #4]
 80b3878:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80b387a:	4b07      	ldr	r3, [pc, #28]	; (80b3898 <HAL_RCC_GetClockConfig+0x60>)
 80b387c:	681b      	ldr	r3, [r3, #0]
 80b387e:	f003 0207 	and.w	r2, r3, #7
 80b3882:	683b      	ldr	r3, [r7, #0]
 80b3884:	601a      	str	r2, [r3, #0]
}
 80b3886:	bf00      	nop
 80b3888:	370c      	adds	r7, #12
 80b388a:	46bd      	mov	sp, r7
 80b388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b3890:	4770      	bx	lr
 80b3892:	bf00      	nop
 80b3894:	40023800 	.word	0x40023800
 80b3898:	40023c00 	.word	0x40023c00

080b389c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80b389c:	b580      	push	{r7, lr}
 80b389e:	b082      	sub	sp, #8
 80b38a0:	af00      	add	r7, sp, #0
 80b38a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80b38a4:	687b      	ldr	r3, [r7, #4]
 80b38a6:	2b00      	cmp	r3, #0
 80b38a8:	d101      	bne.n	80b38ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80b38aa:	2301      	movs	r3, #1
 80b38ac:	e07b      	b.n	80b39a6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80b38ae:	687b      	ldr	r3, [r7, #4]
 80b38b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80b38b2:	2b00      	cmp	r3, #0
 80b38b4:	d108      	bne.n	80b38c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80b38b6:	687b      	ldr	r3, [r7, #4]
 80b38b8:	685b      	ldr	r3, [r3, #4]
 80b38ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80b38be:	d009      	beq.n	80b38d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80b38c0:	687b      	ldr	r3, [r7, #4]
 80b38c2:	2200      	movs	r2, #0
 80b38c4:	61da      	str	r2, [r3, #28]
 80b38c6:	e005      	b.n	80b38d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80b38c8:	687b      	ldr	r3, [r7, #4]
 80b38ca:	2200      	movs	r2, #0
 80b38cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80b38ce:	687b      	ldr	r3, [r7, #4]
 80b38d0:	2200      	movs	r2, #0
 80b38d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80b38d4:	687b      	ldr	r3, [r7, #4]
 80b38d6:	2200      	movs	r2, #0
 80b38d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80b38da:	687b      	ldr	r3, [r7, #4]
 80b38dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80b38e0:	b2db      	uxtb	r3, r3
 80b38e2:	2b00      	cmp	r3, #0
 80b38e4:	d106      	bne.n	80b38f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80b38e6:	687b      	ldr	r3, [r7, #4]
 80b38e8:	2200      	movs	r2, #0
 80b38ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80b38ee:	6878      	ldr	r0, [r7, #4]
 80b38f0:	f7fa fa10 	bl	80add14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80b38f4:	687b      	ldr	r3, [r7, #4]
 80b38f6:	2202      	movs	r2, #2
 80b38f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80b38fc:	687b      	ldr	r3, [r7, #4]
 80b38fe:	681b      	ldr	r3, [r3, #0]
 80b3900:	681a      	ldr	r2, [r3, #0]
 80b3902:	687b      	ldr	r3, [r7, #4]
 80b3904:	681b      	ldr	r3, [r3, #0]
 80b3906:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80b390a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80b390c:	687b      	ldr	r3, [r7, #4]
 80b390e:	685b      	ldr	r3, [r3, #4]
 80b3910:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80b3914:	687b      	ldr	r3, [r7, #4]
 80b3916:	689b      	ldr	r3, [r3, #8]
 80b3918:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80b391c:	431a      	orrs	r2, r3
 80b391e:	687b      	ldr	r3, [r7, #4]
 80b3920:	68db      	ldr	r3, [r3, #12]
 80b3922:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80b3926:	431a      	orrs	r2, r3
 80b3928:	687b      	ldr	r3, [r7, #4]
 80b392a:	691b      	ldr	r3, [r3, #16]
 80b392c:	f003 0302 	and.w	r3, r3, #2
 80b3930:	431a      	orrs	r2, r3
 80b3932:	687b      	ldr	r3, [r7, #4]
 80b3934:	695b      	ldr	r3, [r3, #20]
 80b3936:	f003 0301 	and.w	r3, r3, #1
 80b393a:	431a      	orrs	r2, r3
 80b393c:	687b      	ldr	r3, [r7, #4]
 80b393e:	699b      	ldr	r3, [r3, #24]
 80b3940:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80b3944:	431a      	orrs	r2, r3
 80b3946:	687b      	ldr	r3, [r7, #4]
 80b3948:	69db      	ldr	r3, [r3, #28]
 80b394a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80b394e:	431a      	orrs	r2, r3
 80b3950:	687b      	ldr	r3, [r7, #4]
 80b3952:	6a1b      	ldr	r3, [r3, #32]
 80b3954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80b3958:	ea42 0103 	orr.w	r1, r2, r3
 80b395c:	687b      	ldr	r3, [r7, #4]
 80b395e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80b3960:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80b3964:	687b      	ldr	r3, [r7, #4]
 80b3966:	681b      	ldr	r3, [r3, #0]
 80b3968:	430a      	orrs	r2, r1
 80b396a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80b396c:	687b      	ldr	r3, [r7, #4]
 80b396e:	699b      	ldr	r3, [r3, #24]
 80b3970:	0c1b      	lsrs	r3, r3, #16
 80b3972:	f003 0104 	and.w	r1, r3, #4
 80b3976:	687b      	ldr	r3, [r7, #4]
 80b3978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80b397a:	f003 0210 	and.w	r2, r3, #16
 80b397e:	687b      	ldr	r3, [r7, #4]
 80b3980:	681b      	ldr	r3, [r3, #0]
 80b3982:	430a      	orrs	r2, r1
 80b3984:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80b3986:	687b      	ldr	r3, [r7, #4]
 80b3988:	681b      	ldr	r3, [r3, #0]
 80b398a:	69da      	ldr	r2, [r3, #28]
 80b398c:	687b      	ldr	r3, [r7, #4]
 80b398e:	681b      	ldr	r3, [r3, #0]
 80b3990:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80b3994:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80b3996:	687b      	ldr	r3, [r7, #4]
 80b3998:	2200      	movs	r2, #0
 80b399a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80b399c:	687b      	ldr	r3, [r7, #4]
 80b399e:	2201      	movs	r2, #1
 80b39a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80b39a4:	2300      	movs	r3, #0
}
 80b39a6:	4618      	mov	r0, r3
 80b39a8:	3708      	adds	r7, #8
 80b39aa:	46bd      	mov	sp, r7
 80b39ac:	bd80      	pop	{r7, pc}

080b39ae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80b39ae:	b580      	push	{r7, lr}
 80b39b0:	b08c      	sub	sp, #48	; 0x30
 80b39b2:	af00      	add	r7, sp, #0
 80b39b4:	60f8      	str	r0, [r7, #12]
 80b39b6:	60b9      	str	r1, [r7, #8]
 80b39b8:	607a      	str	r2, [r7, #4]
 80b39ba:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80b39bc:	2301      	movs	r3, #1
 80b39be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80b39c0:	2300      	movs	r3, #0
 80b39c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80b39c6:	68fb      	ldr	r3, [r7, #12]
 80b39c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80b39cc:	2b01      	cmp	r3, #1
 80b39ce:	d101      	bne.n	80b39d4 <HAL_SPI_TransmitReceive+0x26>
 80b39d0:	2302      	movs	r3, #2
 80b39d2:	e18a      	b.n	80b3cea <HAL_SPI_TransmitReceive+0x33c>
 80b39d4:	68fb      	ldr	r3, [r7, #12]
 80b39d6:	2201      	movs	r2, #1
 80b39d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80b39dc:	f7fb fe2a 	bl	80af634 <HAL_GetTick>
 80b39e0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80b39e2:	68fb      	ldr	r3, [r7, #12]
 80b39e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80b39e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80b39ec:	68fb      	ldr	r3, [r7, #12]
 80b39ee:	685b      	ldr	r3, [r3, #4]
 80b39f0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80b39f2:	887b      	ldrh	r3, [r7, #2]
 80b39f4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80b39f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80b39fa:	2b01      	cmp	r3, #1
 80b39fc:	d00f      	beq.n	80b3a1e <HAL_SPI_TransmitReceive+0x70>
 80b39fe:	69fb      	ldr	r3, [r7, #28]
 80b3a00:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80b3a04:	d107      	bne.n	80b3a16 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80b3a06:	68fb      	ldr	r3, [r7, #12]
 80b3a08:	689b      	ldr	r3, [r3, #8]
 80b3a0a:	2b00      	cmp	r3, #0
 80b3a0c:	d103      	bne.n	80b3a16 <HAL_SPI_TransmitReceive+0x68>
 80b3a0e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80b3a12:	2b04      	cmp	r3, #4
 80b3a14:	d003      	beq.n	80b3a1e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80b3a16:	2302      	movs	r3, #2
 80b3a18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80b3a1c:	e15b      	b.n	80b3cd6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80b3a1e:	68bb      	ldr	r3, [r7, #8]
 80b3a20:	2b00      	cmp	r3, #0
 80b3a22:	d005      	beq.n	80b3a30 <HAL_SPI_TransmitReceive+0x82>
 80b3a24:	687b      	ldr	r3, [r7, #4]
 80b3a26:	2b00      	cmp	r3, #0
 80b3a28:	d002      	beq.n	80b3a30 <HAL_SPI_TransmitReceive+0x82>
 80b3a2a:	887b      	ldrh	r3, [r7, #2]
 80b3a2c:	2b00      	cmp	r3, #0
 80b3a2e:	d103      	bne.n	80b3a38 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80b3a30:	2301      	movs	r3, #1
 80b3a32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80b3a36:	e14e      	b.n	80b3cd6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80b3a38:	68fb      	ldr	r3, [r7, #12]
 80b3a3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80b3a3e:	b2db      	uxtb	r3, r3
 80b3a40:	2b04      	cmp	r3, #4
 80b3a42:	d003      	beq.n	80b3a4c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80b3a44:	68fb      	ldr	r3, [r7, #12]
 80b3a46:	2205      	movs	r2, #5
 80b3a48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80b3a4c:	68fb      	ldr	r3, [r7, #12]
 80b3a4e:	2200      	movs	r2, #0
 80b3a50:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80b3a52:	68fb      	ldr	r3, [r7, #12]
 80b3a54:	687a      	ldr	r2, [r7, #4]
 80b3a56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80b3a58:	68fb      	ldr	r3, [r7, #12]
 80b3a5a:	887a      	ldrh	r2, [r7, #2]
 80b3a5c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80b3a5e:	68fb      	ldr	r3, [r7, #12]
 80b3a60:	887a      	ldrh	r2, [r7, #2]
 80b3a62:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80b3a64:	68fb      	ldr	r3, [r7, #12]
 80b3a66:	68ba      	ldr	r2, [r7, #8]
 80b3a68:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80b3a6a:	68fb      	ldr	r3, [r7, #12]
 80b3a6c:	887a      	ldrh	r2, [r7, #2]
 80b3a6e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80b3a70:	68fb      	ldr	r3, [r7, #12]
 80b3a72:	887a      	ldrh	r2, [r7, #2]
 80b3a74:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80b3a76:	68fb      	ldr	r3, [r7, #12]
 80b3a78:	2200      	movs	r2, #0
 80b3a7a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80b3a7c:	68fb      	ldr	r3, [r7, #12]
 80b3a7e:	2200      	movs	r2, #0
 80b3a80:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80b3a82:	68fb      	ldr	r3, [r7, #12]
 80b3a84:	681b      	ldr	r3, [r3, #0]
 80b3a86:	681b      	ldr	r3, [r3, #0]
 80b3a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80b3a8c:	2b40      	cmp	r3, #64	; 0x40
 80b3a8e:	d007      	beq.n	80b3aa0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80b3a90:	68fb      	ldr	r3, [r7, #12]
 80b3a92:	681b      	ldr	r3, [r3, #0]
 80b3a94:	681a      	ldr	r2, [r3, #0]
 80b3a96:	68fb      	ldr	r3, [r7, #12]
 80b3a98:	681b      	ldr	r3, [r3, #0]
 80b3a9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80b3a9e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80b3aa0:	68fb      	ldr	r3, [r7, #12]
 80b3aa2:	68db      	ldr	r3, [r3, #12]
 80b3aa4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80b3aa8:	d178      	bne.n	80b3b9c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80b3aaa:	68fb      	ldr	r3, [r7, #12]
 80b3aac:	685b      	ldr	r3, [r3, #4]
 80b3aae:	2b00      	cmp	r3, #0
 80b3ab0:	d002      	beq.n	80b3ab8 <HAL_SPI_TransmitReceive+0x10a>
 80b3ab2:	8b7b      	ldrh	r3, [r7, #26]
 80b3ab4:	2b01      	cmp	r3, #1
 80b3ab6:	d166      	bne.n	80b3b86 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80b3ab8:	68fb      	ldr	r3, [r7, #12]
 80b3aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80b3abc:	881a      	ldrh	r2, [r3, #0]
 80b3abe:	68fb      	ldr	r3, [r7, #12]
 80b3ac0:	681b      	ldr	r3, [r3, #0]
 80b3ac2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80b3ac4:	68fb      	ldr	r3, [r7, #12]
 80b3ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80b3ac8:	1c9a      	adds	r2, r3, #2
 80b3aca:	68fb      	ldr	r3, [r7, #12]
 80b3acc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80b3ace:	68fb      	ldr	r3, [r7, #12]
 80b3ad0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80b3ad2:	b29b      	uxth	r3, r3
 80b3ad4:	3b01      	subs	r3, #1
 80b3ad6:	b29a      	uxth	r2, r3
 80b3ad8:	68fb      	ldr	r3, [r7, #12]
 80b3ada:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80b3adc:	e053      	b.n	80b3b86 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80b3ade:	68fb      	ldr	r3, [r7, #12]
 80b3ae0:	681b      	ldr	r3, [r3, #0]
 80b3ae2:	689b      	ldr	r3, [r3, #8]
 80b3ae4:	f003 0302 	and.w	r3, r3, #2
 80b3ae8:	2b02      	cmp	r3, #2
 80b3aea:	d11b      	bne.n	80b3b24 <HAL_SPI_TransmitReceive+0x176>
 80b3aec:	68fb      	ldr	r3, [r7, #12]
 80b3aee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80b3af0:	b29b      	uxth	r3, r3
 80b3af2:	2b00      	cmp	r3, #0
 80b3af4:	d016      	beq.n	80b3b24 <HAL_SPI_TransmitReceive+0x176>
 80b3af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80b3af8:	2b01      	cmp	r3, #1
 80b3afa:	d113      	bne.n	80b3b24 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80b3afc:	68fb      	ldr	r3, [r7, #12]
 80b3afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80b3b00:	881a      	ldrh	r2, [r3, #0]
 80b3b02:	68fb      	ldr	r3, [r7, #12]
 80b3b04:	681b      	ldr	r3, [r3, #0]
 80b3b06:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80b3b08:	68fb      	ldr	r3, [r7, #12]
 80b3b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80b3b0c:	1c9a      	adds	r2, r3, #2
 80b3b0e:	68fb      	ldr	r3, [r7, #12]
 80b3b10:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80b3b12:	68fb      	ldr	r3, [r7, #12]
 80b3b14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80b3b16:	b29b      	uxth	r3, r3
 80b3b18:	3b01      	subs	r3, #1
 80b3b1a:	b29a      	uxth	r2, r3
 80b3b1c:	68fb      	ldr	r3, [r7, #12]
 80b3b1e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80b3b20:	2300      	movs	r3, #0
 80b3b22:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80b3b24:	68fb      	ldr	r3, [r7, #12]
 80b3b26:	681b      	ldr	r3, [r3, #0]
 80b3b28:	689b      	ldr	r3, [r3, #8]
 80b3b2a:	f003 0301 	and.w	r3, r3, #1
 80b3b2e:	2b01      	cmp	r3, #1
 80b3b30:	d119      	bne.n	80b3b66 <HAL_SPI_TransmitReceive+0x1b8>
 80b3b32:	68fb      	ldr	r3, [r7, #12]
 80b3b34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80b3b36:	b29b      	uxth	r3, r3
 80b3b38:	2b00      	cmp	r3, #0
 80b3b3a:	d014      	beq.n	80b3b66 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80b3b3c:	68fb      	ldr	r3, [r7, #12]
 80b3b3e:	681b      	ldr	r3, [r3, #0]
 80b3b40:	68da      	ldr	r2, [r3, #12]
 80b3b42:	68fb      	ldr	r3, [r7, #12]
 80b3b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80b3b46:	b292      	uxth	r2, r2
 80b3b48:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80b3b4a:	68fb      	ldr	r3, [r7, #12]
 80b3b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80b3b4e:	1c9a      	adds	r2, r3, #2
 80b3b50:	68fb      	ldr	r3, [r7, #12]
 80b3b52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80b3b54:	68fb      	ldr	r3, [r7, #12]
 80b3b56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80b3b58:	b29b      	uxth	r3, r3
 80b3b5a:	3b01      	subs	r3, #1
 80b3b5c:	b29a      	uxth	r2, r3
 80b3b5e:	68fb      	ldr	r3, [r7, #12]
 80b3b60:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80b3b62:	2301      	movs	r3, #1
 80b3b64:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80b3b66:	f7fb fd65 	bl	80af634 <HAL_GetTick>
 80b3b6a:	4602      	mov	r2, r0
 80b3b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b3b6e:	1ad3      	subs	r3, r2, r3
 80b3b70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80b3b72:	429a      	cmp	r2, r3
 80b3b74:	d807      	bhi.n	80b3b86 <HAL_SPI_TransmitReceive+0x1d8>
 80b3b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80b3b78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80b3b7c:	d003      	beq.n	80b3b86 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80b3b7e:	2303      	movs	r3, #3
 80b3b80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80b3b84:	e0a7      	b.n	80b3cd6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80b3b86:	68fb      	ldr	r3, [r7, #12]
 80b3b88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80b3b8a:	b29b      	uxth	r3, r3
 80b3b8c:	2b00      	cmp	r3, #0
 80b3b8e:	d1a6      	bne.n	80b3ade <HAL_SPI_TransmitReceive+0x130>
 80b3b90:	68fb      	ldr	r3, [r7, #12]
 80b3b92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80b3b94:	b29b      	uxth	r3, r3
 80b3b96:	2b00      	cmp	r3, #0
 80b3b98:	d1a1      	bne.n	80b3ade <HAL_SPI_TransmitReceive+0x130>
 80b3b9a:	e07c      	b.n	80b3c96 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80b3b9c:	68fb      	ldr	r3, [r7, #12]
 80b3b9e:	685b      	ldr	r3, [r3, #4]
 80b3ba0:	2b00      	cmp	r3, #0
 80b3ba2:	d002      	beq.n	80b3baa <HAL_SPI_TransmitReceive+0x1fc>
 80b3ba4:	8b7b      	ldrh	r3, [r7, #26]
 80b3ba6:	2b01      	cmp	r3, #1
 80b3ba8:	d16b      	bne.n	80b3c82 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80b3baa:	68fb      	ldr	r3, [r7, #12]
 80b3bac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80b3bae:	68fb      	ldr	r3, [r7, #12]
 80b3bb0:	681b      	ldr	r3, [r3, #0]
 80b3bb2:	330c      	adds	r3, #12
 80b3bb4:	7812      	ldrb	r2, [r2, #0]
 80b3bb6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80b3bb8:	68fb      	ldr	r3, [r7, #12]
 80b3bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80b3bbc:	1c5a      	adds	r2, r3, #1
 80b3bbe:	68fb      	ldr	r3, [r7, #12]
 80b3bc0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80b3bc2:	68fb      	ldr	r3, [r7, #12]
 80b3bc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80b3bc6:	b29b      	uxth	r3, r3
 80b3bc8:	3b01      	subs	r3, #1
 80b3bca:	b29a      	uxth	r2, r3
 80b3bcc:	68fb      	ldr	r3, [r7, #12]
 80b3bce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80b3bd0:	e057      	b.n	80b3c82 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80b3bd2:	68fb      	ldr	r3, [r7, #12]
 80b3bd4:	681b      	ldr	r3, [r3, #0]
 80b3bd6:	689b      	ldr	r3, [r3, #8]
 80b3bd8:	f003 0302 	and.w	r3, r3, #2
 80b3bdc:	2b02      	cmp	r3, #2
 80b3bde:	d11c      	bne.n	80b3c1a <HAL_SPI_TransmitReceive+0x26c>
 80b3be0:	68fb      	ldr	r3, [r7, #12]
 80b3be2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80b3be4:	b29b      	uxth	r3, r3
 80b3be6:	2b00      	cmp	r3, #0
 80b3be8:	d017      	beq.n	80b3c1a <HAL_SPI_TransmitReceive+0x26c>
 80b3bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80b3bec:	2b01      	cmp	r3, #1
 80b3bee:	d114      	bne.n	80b3c1a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80b3bf0:	68fb      	ldr	r3, [r7, #12]
 80b3bf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80b3bf4:	68fb      	ldr	r3, [r7, #12]
 80b3bf6:	681b      	ldr	r3, [r3, #0]
 80b3bf8:	330c      	adds	r3, #12
 80b3bfa:	7812      	ldrb	r2, [r2, #0]
 80b3bfc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80b3bfe:	68fb      	ldr	r3, [r7, #12]
 80b3c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80b3c02:	1c5a      	adds	r2, r3, #1
 80b3c04:	68fb      	ldr	r3, [r7, #12]
 80b3c06:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80b3c08:	68fb      	ldr	r3, [r7, #12]
 80b3c0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80b3c0c:	b29b      	uxth	r3, r3
 80b3c0e:	3b01      	subs	r3, #1
 80b3c10:	b29a      	uxth	r2, r3
 80b3c12:	68fb      	ldr	r3, [r7, #12]
 80b3c14:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80b3c16:	2300      	movs	r3, #0
 80b3c18:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80b3c1a:	68fb      	ldr	r3, [r7, #12]
 80b3c1c:	681b      	ldr	r3, [r3, #0]
 80b3c1e:	689b      	ldr	r3, [r3, #8]
 80b3c20:	f003 0301 	and.w	r3, r3, #1
 80b3c24:	2b01      	cmp	r3, #1
 80b3c26:	d119      	bne.n	80b3c5c <HAL_SPI_TransmitReceive+0x2ae>
 80b3c28:	68fb      	ldr	r3, [r7, #12]
 80b3c2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80b3c2c:	b29b      	uxth	r3, r3
 80b3c2e:	2b00      	cmp	r3, #0
 80b3c30:	d014      	beq.n	80b3c5c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80b3c32:	68fb      	ldr	r3, [r7, #12]
 80b3c34:	681b      	ldr	r3, [r3, #0]
 80b3c36:	68da      	ldr	r2, [r3, #12]
 80b3c38:	68fb      	ldr	r3, [r7, #12]
 80b3c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80b3c3c:	b2d2      	uxtb	r2, r2
 80b3c3e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80b3c40:	68fb      	ldr	r3, [r7, #12]
 80b3c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80b3c44:	1c5a      	adds	r2, r3, #1
 80b3c46:	68fb      	ldr	r3, [r7, #12]
 80b3c48:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80b3c4a:	68fb      	ldr	r3, [r7, #12]
 80b3c4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80b3c4e:	b29b      	uxth	r3, r3
 80b3c50:	3b01      	subs	r3, #1
 80b3c52:	b29a      	uxth	r2, r3
 80b3c54:	68fb      	ldr	r3, [r7, #12]
 80b3c56:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80b3c58:	2301      	movs	r3, #1
 80b3c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80b3c5c:	f7fb fcea 	bl	80af634 <HAL_GetTick>
 80b3c60:	4602      	mov	r2, r0
 80b3c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b3c64:	1ad3      	subs	r3, r2, r3
 80b3c66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80b3c68:	429a      	cmp	r2, r3
 80b3c6a:	d803      	bhi.n	80b3c74 <HAL_SPI_TransmitReceive+0x2c6>
 80b3c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80b3c6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80b3c72:	d102      	bne.n	80b3c7a <HAL_SPI_TransmitReceive+0x2cc>
 80b3c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80b3c76:	2b00      	cmp	r3, #0
 80b3c78:	d103      	bne.n	80b3c82 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80b3c7a:	2303      	movs	r3, #3
 80b3c7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80b3c80:	e029      	b.n	80b3cd6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80b3c82:	68fb      	ldr	r3, [r7, #12]
 80b3c84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80b3c86:	b29b      	uxth	r3, r3
 80b3c88:	2b00      	cmp	r3, #0
 80b3c8a:	d1a2      	bne.n	80b3bd2 <HAL_SPI_TransmitReceive+0x224>
 80b3c8c:	68fb      	ldr	r3, [r7, #12]
 80b3c8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80b3c90:	b29b      	uxth	r3, r3
 80b3c92:	2b00      	cmp	r3, #0
 80b3c94:	d19d      	bne.n	80b3bd2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80b3c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80b3c98:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80b3c9a:	68f8      	ldr	r0, [r7, #12]
 80b3c9c:	f000 f8b2 	bl	80b3e04 <SPI_EndRxTxTransaction>
 80b3ca0:	4603      	mov	r3, r0
 80b3ca2:	2b00      	cmp	r3, #0
 80b3ca4:	d006      	beq.n	80b3cb4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80b3ca6:	2301      	movs	r3, #1
 80b3ca8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80b3cac:	68fb      	ldr	r3, [r7, #12]
 80b3cae:	2220      	movs	r2, #32
 80b3cb0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80b3cb2:	e010      	b.n	80b3cd6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80b3cb4:	68fb      	ldr	r3, [r7, #12]
 80b3cb6:	689b      	ldr	r3, [r3, #8]
 80b3cb8:	2b00      	cmp	r3, #0
 80b3cba:	d10b      	bne.n	80b3cd4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80b3cbc:	2300      	movs	r3, #0
 80b3cbe:	617b      	str	r3, [r7, #20]
 80b3cc0:	68fb      	ldr	r3, [r7, #12]
 80b3cc2:	681b      	ldr	r3, [r3, #0]
 80b3cc4:	68db      	ldr	r3, [r3, #12]
 80b3cc6:	617b      	str	r3, [r7, #20]
 80b3cc8:	68fb      	ldr	r3, [r7, #12]
 80b3cca:	681b      	ldr	r3, [r3, #0]
 80b3ccc:	689b      	ldr	r3, [r3, #8]
 80b3cce:	617b      	str	r3, [r7, #20]
 80b3cd0:	697b      	ldr	r3, [r7, #20]
 80b3cd2:	e000      	b.n	80b3cd6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80b3cd4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80b3cd6:	68fb      	ldr	r3, [r7, #12]
 80b3cd8:	2201      	movs	r2, #1
 80b3cda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80b3cde:	68fb      	ldr	r3, [r7, #12]
 80b3ce0:	2200      	movs	r2, #0
 80b3ce2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80b3ce6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80b3cea:	4618      	mov	r0, r3
 80b3cec:	3730      	adds	r7, #48	; 0x30
 80b3cee:	46bd      	mov	sp, r7
 80b3cf0:	bd80      	pop	{r7, pc}
	...

080b3cf4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80b3cf4:	b580      	push	{r7, lr}
 80b3cf6:	b088      	sub	sp, #32
 80b3cf8:	af00      	add	r7, sp, #0
 80b3cfa:	60f8      	str	r0, [r7, #12]
 80b3cfc:	60b9      	str	r1, [r7, #8]
 80b3cfe:	603b      	str	r3, [r7, #0]
 80b3d00:	4613      	mov	r3, r2
 80b3d02:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80b3d04:	f7fb fc96 	bl	80af634 <HAL_GetTick>
 80b3d08:	4602      	mov	r2, r0
 80b3d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80b3d0c:	1a9b      	subs	r3, r3, r2
 80b3d0e:	683a      	ldr	r2, [r7, #0]
 80b3d10:	4413      	add	r3, r2
 80b3d12:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80b3d14:	f7fb fc8e 	bl	80af634 <HAL_GetTick>
 80b3d18:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80b3d1a:	4b39      	ldr	r3, [pc, #228]	; (80b3e00 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80b3d1c:	681b      	ldr	r3, [r3, #0]
 80b3d1e:	015b      	lsls	r3, r3, #5
 80b3d20:	0d1b      	lsrs	r3, r3, #20
 80b3d22:	69fa      	ldr	r2, [r7, #28]
 80b3d24:	fb02 f303 	mul.w	r3, r2, r3
 80b3d28:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80b3d2a:	e054      	b.n	80b3dd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80b3d2c:	683b      	ldr	r3, [r7, #0]
 80b3d2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80b3d32:	d050      	beq.n	80b3dd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80b3d34:	f7fb fc7e 	bl	80af634 <HAL_GetTick>
 80b3d38:	4602      	mov	r2, r0
 80b3d3a:	69bb      	ldr	r3, [r7, #24]
 80b3d3c:	1ad3      	subs	r3, r2, r3
 80b3d3e:	69fa      	ldr	r2, [r7, #28]
 80b3d40:	429a      	cmp	r2, r3
 80b3d42:	d902      	bls.n	80b3d4a <SPI_WaitFlagStateUntilTimeout+0x56>
 80b3d44:	69fb      	ldr	r3, [r7, #28]
 80b3d46:	2b00      	cmp	r3, #0
 80b3d48:	d13d      	bne.n	80b3dc6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80b3d4a:	68fb      	ldr	r3, [r7, #12]
 80b3d4c:	681b      	ldr	r3, [r3, #0]
 80b3d4e:	685a      	ldr	r2, [r3, #4]
 80b3d50:	68fb      	ldr	r3, [r7, #12]
 80b3d52:	681b      	ldr	r3, [r3, #0]
 80b3d54:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80b3d58:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80b3d5a:	68fb      	ldr	r3, [r7, #12]
 80b3d5c:	685b      	ldr	r3, [r3, #4]
 80b3d5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80b3d62:	d111      	bne.n	80b3d88 <SPI_WaitFlagStateUntilTimeout+0x94>
 80b3d64:	68fb      	ldr	r3, [r7, #12]
 80b3d66:	689b      	ldr	r3, [r3, #8]
 80b3d68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80b3d6c:	d004      	beq.n	80b3d78 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80b3d6e:	68fb      	ldr	r3, [r7, #12]
 80b3d70:	689b      	ldr	r3, [r3, #8]
 80b3d72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80b3d76:	d107      	bne.n	80b3d88 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80b3d78:	68fb      	ldr	r3, [r7, #12]
 80b3d7a:	681b      	ldr	r3, [r3, #0]
 80b3d7c:	681a      	ldr	r2, [r3, #0]
 80b3d7e:	68fb      	ldr	r3, [r7, #12]
 80b3d80:	681b      	ldr	r3, [r3, #0]
 80b3d82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80b3d86:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80b3d88:	68fb      	ldr	r3, [r7, #12]
 80b3d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80b3d8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80b3d90:	d10f      	bne.n	80b3db2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80b3d92:	68fb      	ldr	r3, [r7, #12]
 80b3d94:	681b      	ldr	r3, [r3, #0]
 80b3d96:	681a      	ldr	r2, [r3, #0]
 80b3d98:	68fb      	ldr	r3, [r7, #12]
 80b3d9a:	681b      	ldr	r3, [r3, #0]
 80b3d9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80b3da0:	601a      	str	r2, [r3, #0]
 80b3da2:	68fb      	ldr	r3, [r7, #12]
 80b3da4:	681b      	ldr	r3, [r3, #0]
 80b3da6:	681a      	ldr	r2, [r3, #0]
 80b3da8:	68fb      	ldr	r3, [r7, #12]
 80b3daa:	681b      	ldr	r3, [r3, #0]
 80b3dac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80b3db0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80b3db2:	68fb      	ldr	r3, [r7, #12]
 80b3db4:	2201      	movs	r2, #1
 80b3db6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80b3dba:	68fb      	ldr	r3, [r7, #12]
 80b3dbc:	2200      	movs	r2, #0
 80b3dbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80b3dc2:	2303      	movs	r3, #3
 80b3dc4:	e017      	b.n	80b3df6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80b3dc6:	697b      	ldr	r3, [r7, #20]
 80b3dc8:	2b00      	cmp	r3, #0
 80b3dca:	d101      	bne.n	80b3dd0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80b3dcc:	2300      	movs	r3, #0
 80b3dce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80b3dd0:	697b      	ldr	r3, [r7, #20]
 80b3dd2:	3b01      	subs	r3, #1
 80b3dd4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80b3dd6:	68fb      	ldr	r3, [r7, #12]
 80b3dd8:	681b      	ldr	r3, [r3, #0]
 80b3dda:	689a      	ldr	r2, [r3, #8]
 80b3ddc:	68bb      	ldr	r3, [r7, #8]
 80b3dde:	4013      	ands	r3, r2
 80b3de0:	68ba      	ldr	r2, [r7, #8]
 80b3de2:	429a      	cmp	r2, r3
 80b3de4:	bf0c      	ite	eq
 80b3de6:	2301      	moveq	r3, #1
 80b3de8:	2300      	movne	r3, #0
 80b3dea:	b2db      	uxtb	r3, r3
 80b3dec:	461a      	mov	r2, r3
 80b3dee:	79fb      	ldrb	r3, [r7, #7]
 80b3df0:	429a      	cmp	r2, r3
 80b3df2:	d19b      	bne.n	80b3d2c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80b3df4:	2300      	movs	r3, #0
}
 80b3df6:	4618      	mov	r0, r3
 80b3df8:	3720      	adds	r7, #32
 80b3dfa:	46bd      	mov	sp, r7
 80b3dfc:	bd80      	pop	{r7, pc}
 80b3dfe:	bf00      	nop
 80b3e00:	20007c54 	.word	0x20007c54

080b3e04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80b3e04:	b580      	push	{r7, lr}
 80b3e06:	b088      	sub	sp, #32
 80b3e08:	af02      	add	r7, sp, #8
 80b3e0a:	60f8      	str	r0, [r7, #12]
 80b3e0c:	60b9      	str	r1, [r7, #8]
 80b3e0e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80b3e10:	4b1b      	ldr	r3, [pc, #108]	; (80b3e80 <SPI_EndRxTxTransaction+0x7c>)
 80b3e12:	681b      	ldr	r3, [r3, #0]
 80b3e14:	4a1b      	ldr	r2, [pc, #108]	; (80b3e84 <SPI_EndRxTxTransaction+0x80>)
 80b3e16:	fba2 2303 	umull	r2, r3, r2, r3
 80b3e1a:	0d5b      	lsrs	r3, r3, #21
 80b3e1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80b3e20:	fb02 f303 	mul.w	r3, r2, r3
 80b3e24:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80b3e26:	68fb      	ldr	r3, [r7, #12]
 80b3e28:	685b      	ldr	r3, [r3, #4]
 80b3e2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80b3e2e:	d112      	bne.n	80b3e56 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80b3e30:	687b      	ldr	r3, [r7, #4]
 80b3e32:	9300      	str	r3, [sp, #0]
 80b3e34:	68bb      	ldr	r3, [r7, #8]
 80b3e36:	2200      	movs	r2, #0
 80b3e38:	2180      	movs	r1, #128	; 0x80
 80b3e3a:	68f8      	ldr	r0, [r7, #12]
 80b3e3c:	f7ff ff5a 	bl	80b3cf4 <SPI_WaitFlagStateUntilTimeout>
 80b3e40:	4603      	mov	r3, r0
 80b3e42:	2b00      	cmp	r3, #0
 80b3e44:	d016      	beq.n	80b3e74 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80b3e46:	68fb      	ldr	r3, [r7, #12]
 80b3e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80b3e4a:	f043 0220 	orr.w	r2, r3, #32
 80b3e4e:	68fb      	ldr	r3, [r7, #12]
 80b3e50:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80b3e52:	2303      	movs	r3, #3
 80b3e54:	e00f      	b.n	80b3e76 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80b3e56:	697b      	ldr	r3, [r7, #20]
 80b3e58:	2b00      	cmp	r3, #0
 80b3e5a:	d00a      	beq.n	80b3e72 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80b3e5c:	697b      	ldr	r3, [r7, #20]
 80b3e5e:	3b01      	subs	r3, #1
 80b3e60:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80b3e62:	68fb      	ldr	r3, [r7, #12]
 80b3e64:	681b      	ldr	r3, [r3, #0]
 80b3e66:	689b      	ldr	r3, [r3, #8]
 80b3e68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80b3e6c:	2b80      	cmp	r3, #128	; 0x80
 80b3e6e:	d0f2      	beq.n	80b3e56 <SPI_EndRxTxTransaction+0x52>
 80b3e70:	e000      	b.n	80b3e74 <SPI_EndRxTxTransaction+0x70>
        break;
 80b3e72:	bf00      	nop
  }

  return HAL_OK;
 80b3e74:	2300      	movs	r3, #0
}
 80b3e76:	4618      	mov	r0, r3
 80b3e78:	3718      	adds	r7, #24
 80b3e7a:	46bd      	mov	sp, r7
 80b3e7c:	bd80      	pop	{r7, pc}
 80b3e7e:	bf00      	nop
 80b3e80:	20007c54 	.word	0x20007c54
 80b3e84:	165e9f81 	.word	0x165e9f81

080b3e88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80b3e88:	b580      	push	{r7, lr}
 80b3e8a:	b082      	sub	sp, #8
 80b3e8c:	af00      	add	r7, sp, #0
 80b3e8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80b3e90:	687b      	ldr	r3, [r7, #4]
 80b3e92:	2b00      	cmp	r3, #0
 80b3e94:	d101      	bne.n	80b3e9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80b3e96:	2301      	movs	r3, #1
 80b3e98:	e041      	b.n	80b3f1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80b3e9a:	687b      	ldr	r3, [r7, #4]
 80b3e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80b3ea0:	b2db      	uxtb	r3, r3
 80b3ea2:	2b00      	cmp	r3, #0
 80b3ea4:	d106      	bne.n	80b3eb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80b3ea6:	687b      	ldr	r3, [r7, #4]
 80b3ea8:	2200      	movs	r2, #0
 80b3eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80b3eae:	6878      	ldr	r0, [r7, #4]
 80b3eb0:	f7f9 ff78 	bl	80adda4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80b3eb4:	687b      	ldr	r3, [r7, #4]
 80b3eb6:	2202      	movs	r2, #2
 80b3eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80b3ebc:	687b      	ldr	r3, [r7, #4]
 80b3ebe:	681a      	ldr	r2, [r3, #0]
 80b3ec0:	687b      	ldr	r3, [r7, #4]
 80b3ec2:	3304      	adds	r3, #4
 80b3ec4:	4619      	mov	r1, r3
 80b3ec6:	4610      	mov	r0, r2
 80b3ec8:	f000 fc8a 	bl	80b47e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80b3ecc:	687b      	ldr	r3, [r7, #4]
 80b3ece:	2201      	movs	r2, #1
 80b3ed0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80b3ed4:	687b      	ldr	r3, [r7, #4]
 80b3ed6:	2201      	movs	r2, #1
 80b3ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80b3edc:	687b      	ldr	r3, [r7, #4]
 80b3ede:	2201      	movs	r2, #1
 80b3ee0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80b3ee4:	687b      	ldr	r3, [r7, #4]
 80b3ee6:	2201      	movs	r2, #1
 80b3ee8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80b3eec:	687b      	ldr	r3, [r7, #4]
 80b3eee:	2201      	movs	r2, #1
 80b3ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80b3ef4:	687b      	ldr	r3, [r7, #4]
 80b3ef6:	2201      	movs	r2, #1
 80b3ef8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80b3efc:	687b      	ldr	r3, [r7, #4]
 80b3efe:	2201      	movs	r2, #1
 80b3f00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80b3f04:	687b      	ldr	r3, [r7, #4]
 80b3f06:	2201      	movs	r2, #1
 80b3f08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80b3f0c:	687b      	ldr	r3, [r7, #4]
 80b3f0e:	2201      	movs	r2, #1
 80b3f10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80b3f14:	687b      	ldr	r3, [r7, #4]
 80b3f16:	2201      	movs	r2, #1
 80b3f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80b3f1c:	2300      	movs	r3, #0
}
 80b3f1e:	4618      	mov	r0, r3
 80b3f20:	3708      	adds	r7, #8
 80b3f22:	46bd      	mov	sp, r7
 80b3f24:	bd80      	pop	{r7, pc}
	...

080b3f28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80b3f28:	b480      	push	{r7}
 80b3f2a:	b085      	sub	sp, #20
 80b3f2c:	af00      	add	r7, sp, #0
 80b3f2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80b3f30:	687b      	ldr	r3, [r7, #4]
 80b3f32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80b3f36:	b2db      	uxtb	r3, r3
 80b3f38:	2b01      	cmp	r3, #1
 80b3f3a:	d001      	beq.n	80b3f40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80b3f3c:	2301      	movs	r3, #1
 80b3f3e:	e04e      	b.n	80b3fde <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80b3f40:	687b      	ldr	r3, [r7, #4]
 80b3f42:	2202      	movs	r2, #2
 80b3f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80b3f48:	687b      	ldr	r3, [r7, #4]
 80b3f4a:	681b      	ldr	r3, [r3, #0]
 80b3f4c:	68da      	ldr	r2, [r3, #12]
 80b3f4e:	687b      	ldr	r3, [r7, #4]
 80b3f50:	681b      	ldr	r3, [r3, #0]
 80b3f52:	f042 0201 	orr.w	r2, r2, #1
 80b3f56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80b3f58:	687b      	ldr	r3, [r7, #4]
 80b3f5a:	681b      	ldr	r3, [r3, #0]
 80b3f5c:	4a23      	ldr	r2, [pc, #140]	; (80b3fec <HAL_TIM_Base_Start_IT+0xc4>)
 80b3f5e:	4293      	cmp	r3, r2
 80b3f60:	d022      	beq.n	80b3fa8 <HAL_TIM_Base_Start_IT+0x80>
 80b3f62:	687b      	ldr	r3, [r7, #4]
 80b3f64:	681b      	ldr	r3, [r3, #0]
 80b3f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80b3f6a:	d01d      	beq.n	80b3fa8 <HAL_TIM_Base_Start_IT+0x80>
 80b3f6c:	687b      	ldr	r3, [r7, #4]
 80b3f6e:	681b      	ldr	r3, [r3, #0]
 80b3f70:	4a1f      	ldr	r2, [pc, #124]	; (80b3ff0 <HAL_TIM_Base_Start_IT+0xc8>)
 80b3f72:	4293      	cmp	r3, r2
 80b3f74:	d018      	beq.n	80b3fa8 <HAL_TIM_Base_Start_IT+0x80>
 80b3f76:	687b      	ldr	r3, [r7, #4]
 80b3f78:	681b      	ldr	r3, [r3, #0]
 80b3f7a:	4a1e      	ldr	r2, [pc, #120]	; (80b3ff4 <HAL_TIM_Base_Start_IT+0xcc>)
 80b3f7c:	4293      	cmp	r3, r2
 80b3f7e:	d013      	beq.n	80b3fa8 <HAL_TIM_Base_Start_IT+0x80>
 80b3f80:	687b      	ldr	r3, [r7, #4]
 80b3f82:	681b      	ldr	r3, [r3, #0]
 80b3f84:	4a1c      	ldr	r2, [pc, #112]	; (80b3ff8 <HAL_TIM_Base_Start_IT+0xd0>)
 80b3f86:	4293      	cmp	r3, r2
 80b3f88:	d00e      	beq.n	80b3fa8 <HAL_TIM_Base_Start_IT+0x80>
 80b3f8a:	687b      	ldr	r3, [r7, #4]
 80b3f8c:	681b      	ldr	r3, [r3, #0]
 80b3f8e:	4a1b      	ldr	r2, [pc, #108]	; (80b3ffc <HAL_TIM_Base_Start_IT+0xd4>)
 80b3f90:	4293      	cmp	r3, r2
 80b3f92:	d009      	beq.n	80b3fa8 <HAL_TIM_Base_Start_IT+0x80>
 80b3f94:	687b      	ldr	r3, [r7, #4]
 80b3f96:	681b      	ldr	r3, [r3, #0]
 80b3f98:	4a19      	ldr	r2, [pc, #100]	; (80b4000 <HAL_TIM_Base_Start_IT+0xd8>)
 80b3f9a:	4293      	cmp	r3, r2
 80b3f9c:	d004      	beq.n	80b3fa8 <HAL_TIM_Base_Start_IT+0x80>
 80b3f9e:	687b      	ldr	r3, [r7, #4]
 80b3fa0:	681b      	ldr	r3, [r3, #0]
 80b3fa2:	4a18      	ldr	r2, [pc, #96]	; (80b4004 <HAL_TIM_Base_Start_IT+0xdc>)
 80b3fa4:	4293      	cmp	r3, r2
 80b3fa6:	d111      	bne.n	80b3fcc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80b3fa8:	687b      	ldr	r3, [r7, #4]
 80b3faa:	681b      	ldr	r3, [r3, #0]
 80b3fac:	689b      	ldr	r3, [r3, #8]
 80b3fae:	f003 0307 	and.w	r3, r3, #7
 80b3fb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80b3fb4:	68fb      	ldr	r3, [r7, #12]
 80b3fb6:	2b06      	cmp	r3, #6
 80b3fb8:	d010      	beq.n	80b3fdc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80b3fba:	687b      	ldr	r3, [r7, #4]
 80b3fbc:	681b      	ldr	r3, [r3, #0]
 80b3fbe:	681a      	ldr	r2, [r3, #0]
 80b3fc0:	687b      	ldr	r3, [r7, #4]
 80b3fc2:	681b      	ldr	r3, [r3, #0]
 80b3fc4:	f042 0201 	orr.w	r2, r2, #1
 80b3fc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80b3fca:	e007      	b.n	80b3fdc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80b3fcc:	687b      	ldr	r3, [r7, #4]
 80b3fce:	681b      	ldr	r3, [r3, #0]
 80b3fd0:	681a      	ldr	r2, [r3, #0]
 80b3fd2:	687b      	ldr	r3, [r7, #4]
 80b3fd4:	681b      	ldr	r3, [r3, #0]
 80b3fd6:	f042 0201 	orr.w	r2, r2, #1
 80b3fda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80b3fdc:	2300      	movs	r3, #0
}
 80b3fde:	4618      	mov	r0, r3
 80b3fe0:	3714      	adds	r7, #20
 80b3fe2:	46bd      	mov	sp, r7
 80b3fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b3fe8:	4770      	bx	lr
 80b3fea:	bf00      	nop
 80b3fec:	40010000 	.word	0x40010000
 80b3ff0:	40000400 	.word	0x40000400
 80b3ff4:	40000800 	.word	0x40000800
 80b3ff8:	40000c00 	.word	0x40000c00
 80b3ffc:	40010400 	.word	0x40010400
 80b4000:	40014000 	.word	0x40014000
 80b4004:	40001800 	.word	0x40001800

080b4008 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80b4008:	b480      	push	{r7}
 80b400a:	b083      	sub	sp, #12
 80b400c:	af00      	add	r7, sp, #0
 80b400e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80b4010:	687b      	ldr	r3, [r7, #4]
 80b4012:	681b      	ldr	r3, [r3, #0]
 80b4014:	68da      	ldr	r2, [r3, #12]
 80b4016:	687b      	ldr	r3, [r7, #4]
 80b4018:	681b      	ldr	r3, [r3, #0]
 80b401a:	f022 0201 	bic.w	r2, r2, #1
 80b401e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80b4020:	687b      	ldr	r3, [r7, #4]
 80b4022:	681b      	ldr	r3, [r3, #0]
 80b4024:	6a1a      	ldr	r2, [r3, #32]
 80b4026:	f241 1311 	movw	r3, #4369	; 0x1111
 80b402a:	4013      	ands	r3, r2
 80b402c:	2b00      	cmp	r3, #0
 80b402e:	d10f      	bne.n	80b4050 <HAL_TIM_Base_Stop_IT+0x48>
 80b4030:	687b      	ldr	r3, [r7, #4]
 80b4032:	681b      	ldr	r3, [r3, #0]
 80b4034:	6a1a      	ldr	r2, [r3, #32]
 80b4036:	f240 4344 	movw	r3, #1092	; 0x444
 80b403a:	4013      	ands	r3, r2
 80b403c:	2b00      	cmp	r3, #0
 80b403e:	d107      	bne.n	80b4050 <HAL_TIM_Base_Stop_IT+0x48>
 80b4040:	687b      	ldr	r3, [r7, #4]
 80b4042:	681b      	ldr	r3, [r3, #0]
 80b4044:	681a      	ldr	r2, [r3, #0]
 80b4046:	687b      	ldr	r3, [r7, #4]
 80b4048:	681b      	ldr	r3, [r3, #0]
 80b404a:	f022 0201 	bic.w	r2, r2, #1
 80b404e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80b4050:	687b      	ldr	r3, [r7, #4]
 80b4052:	2201      	movs	r2, #1
 80b4054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80b4058:	2300      	movs	r3, #0
}
 80b405a:	4618      	mov	r0, r3
 80b405c:	370c      	adds	r7, #12
 80b405e:	46bd      	mov	sp, r7
 80b4060:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b4064:	4770      	bx	lr

080b4066 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80b4066:	b580      	push	{r7, lr}
 80b4068:	b082      	sub	sp, #8
 80b406a:	af00      	add	r7, sp, #0
 80b406c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80b406e:	687b      	ldr	r3, [r7, #4]
 80b4070:	2b00      	cmp	r3, #0
 80b4072:	d101      	bne.n	80b4078 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80b4074:	2301      	movs	r3, #1
 80b4076:	e041      	b.n	80b40fc <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80b4078:	687b      	ldr	r3, [r7, #4]
 80b407a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80b407e:	b2db      	uxtb	r3, r3
 80b4080:	2b00      	cmp	r3, #0
 80b4082:	d106      	bne.n	80b4092 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80b4084:	687b      	ldr	r3, [r7, #4]
 80b4086:	2200      	movs	r2, #0
 80b4088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80b408c:	6878      	ldr	r0, [r7, #4]
 80b408e:	f000 f839 	bl	80b4104 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80b4092:	687b      	ldr	r3, [r7, #4]
 80b4094:	2202      	movs	r2, #2
 80b4096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80b409a:	687b      	ldr	r3, [r7, #4]
 80b409c:	681a      	ldr	r2, [r3, #0]
 80b409e:	687b      	ldr	r3, [r7, #4]
 80b40a0:	3304      	adds	r3, #4
 80b40a2:	4619      	mov	r1, r3
 80b40a4:	4610      	mov	r0, r2
 80b40a6:	f000 fb9b 	bl	80b47e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80b40aa:	687b      	ldr	r3, [r7, #4]
 80b40ac:	2201      	movs	r2, #1
 80b40ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80b40b2:	687b      	ldr	r3, [r7, #4]
 80b40b4:	2201      	movs	r2, #1
 80b40b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80b40ba:	687b      	ldr	r3, [r7, #4]
 80b40bc:	2201      	movs	r2, #1
 80b40be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80b40c2:	687b      	ldr	r3, [r7, #4]
 80b40c4:	2201      	movs	r2, #1
 80b40c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80b40ca:	687b      	ldr	r3, [r7, #4]
 80b40cc:	2201      	movs	r2, #1
 80b40ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80b40d2:	687b      	ldr	r3, [r7, #4]
 80b40d4:	2201      	movs	r2, #1
 80b40d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80b40da:	687b      	ldr	r3, [r7, #4]
 80b40dc:	2201      	movs	r2, #1
 80b40de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80b40e2:	687b      	ldr	r3, [r7, #4]
 80b40e4:	2201      	movs	r2, #1
 80b40e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80b40ea:	687b      	ldr	r3, [r7, #4]
 80b40ec:	2201      	movs	r2, #1
 80b40ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80b40f2:	687b      	ldr	r3, [r7, #4]
 80b40f4:	2201      	movs	r2, #1
 80b40f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80b40fa:	2300      	movs	r3, #0
}
 80b40fc:	4618      	mov	r0, r3
 80b40fe:	3708      	adds	r7, #8
 80b4100:	46bd      	mov	sp, r7
 80b4102:	bd80      	pop	{r7, pc}

080b4104 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80b4104:	b480      	push	{r7}
 80b4106:	b083      	sub	sp, #12
 80b4108:	af00      	add	r7, sp, #0
 80b410a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80b410c:	bf00      	nop
 80b410e:	370c      	adds	r7, #12
 80b4110:	46bd      	mov	sp, r7
 80b4112:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b4116:	4770      	bx	lr

080b4118 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80b4118:	b580      	push	{r7, lr}
 80b411a:	b082      	sub	sp, #8
 80b411c:	af00      	add	r7, sp, #0
 80b411e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80b4120:	687b      	ldr	r3, [r7, #4]
 80b4122:	2b00      	cmp	r3, #0
 80b4124:	d101      	bne.n	80b412a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80b4126:	2301      	movs	r3, #1
 80b4128:	e041      	b.n	80b41ae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80b412a:	687b      	ldr	r3, [r7, #4]
 80b412c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80b4130:	b2db      	uxtb	r3, r3
 80b4132:	2b00      	cmp	r3, #0
 80b4134:	d106      	bne.n	80b4144 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80b4136:	687b      	ldr	r3, [r7, #4]
 80b4138:	2200      	movs	r2, #0
 80b413a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80b413e:	6878      	ldr	r0, [r7, #4]
 80b4140:	f000 f839 	bl	80b41b6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80b4144:	687b      	ldr	r3, [r7, #4]
 80b4146:	2202      	movs	r2, #2
 80b4148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80b414c:	687b      	ldr	r3, [r7, #4]
 80b414e:	681a      	ldr	r2, [r3, #0]
 80b4150:	687b      	ldr	r3, [r7, #4]
 80b4152:	3304      	adds	r3, #4
 80b4154:	4619      	mov	r1, r3
 80b4156:	4610      	mov	r0, r2
 80b4158:	f000 fb42 	bl	80b47e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80b415c:	687b      	ldr	r3, [r7, #4]
 80b415e:	2201      	movs	r2, #1
 80b4160:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80b4164:	687b      	ldr	r3, [r7, #4]
 80b4166:	2201      	movs	r2, #1
 80b4168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80b416c:	687b      	ldr	r3, [r7, #4]
 80b416e:	2201      	movs	r2, #1
 80b4170:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80b4174:	687b      	ldr	r3, [r7, #4]
 80b4176:	2201      	movs	r2, #1
 80b4178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80b417c:	687b      	ldr	r3, [r7, #4]
 80b417e:	2201      	movs	r2, #1
 80b4180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80b4184:	687b      	ldr	r3, [r7, #4]
 80b4186:	2201      	movs	r2, #1
 80b4188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80b418c:	687b      	ldr	r3, [r7, #4]
 80b418e:	2201      	movs	r2, #1
 80b4190:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80b4194:	687b      	ldr	r3, [r7, #4]
 80b4196:	2201      	movs	r2, #1
 80b4198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80b419c:	687b      	ldr	r3, [r7, #4]
 80b419e:	2201      	movs	r2, #1
 80b41a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80b41a4:	687b      	ldr	r3, [r7, #4]
 80b41a6:	2201      	movs	r2, #1
 80b41a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80b41ac:	2300      	movs	r3, #0
}
 80b41ae:	4618      	mov	r0, r3
 80b41b0:	3708      	adds	r7, #8
 80b41b2:	46bd      	mov	sp, r7
 80b41b4:	bd80      	pop	{r7, pc}

080b41b6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80b41b6:	b480      	push	{r7}
 80b41b8:	b083      	sub	sp, #12
 80b41ba:	af00      	add	r7, sp, #0
 80b41bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80b41be:	bf00      	nop
 80b41c0:	370c      	adds	r7, #12
 80b41c2:	46bd      	mov	sp, r7
 80b41c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b41c8:	4770      	bx	lr

080b41ca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80b41ca:	b580      	push	{r7, lr}
 80b41cc:	b082      	sub	sp, #8
 80b41ce:	af00      	add	r7, sp, #0
 80b41d0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80b41d2:	687b      	ldr	r3, [r7, #4]
 80b41d4:	681b      	ldr	r3, [r3, #0]
 80b41d6:	691b      	ldr	r3, [r3, #16]
 80b41d8:	f003 0302 	and.w	r3, r3, #2
 80b41dc:	2b02      	cmp	r3, #2
 80b41de:	d122      	bne.n	80b4226 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80b41e0:	687b      	ldr	r3, [r7, #4]
 80b41e2:	681b      	ldr	r3, [r3, #0]
 80b41e4:	68db      	ldr	r3, [r3, #12]
 80b41e6:	f003 0302 	and.w	r3, r3, #2
 80b41ea:	2b02      	cmp	r3, #2
 80b41ec:	d11b      	bne.n	80b4226 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80b41ee:	687b      	ldr	r3, [r7, #4]
 80b41f0:	681b      	ldr	r3, [r3, #0]
 80b41f2:	f06f 0202 	mvn.w	r2, #2
 80b41f6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80b41f8:	687b      	ldr	r3, [r7, #4]
 80b41fa:	2201      	movs	r2, #1
 80b41fc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80b41fe:	687b      	ldr	r3, [r7, #4]
 80b4200:	681b      	ldr	r3, [r3, #0]
 80b4202:	699b      	ldr	r3, [r3, #24]
 80b4204:	f003 0303 	and.w	r3, r3, #3
 80b4208:	2b00      	cmp	r3, #0
 80b420a:	d003      	beq.n	80b4214 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80b420c:	6878      	ldr	r0, [r7, #4]
 80b420e:	f000 fac9 	bl	80b47a4 <HAL_TIM_IC_CaptureCallback>
 80b4212:	e005      	b.n	80b4220 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80b4214:	6878      	ldr	r0, [r7, #4]
 80b4216:	f000 fabb 	bl	80b4790 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80b421a:	6878      	ldr	r0, [r7, #4]
 80b421c:	f000 facc 	bl	80b47b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80b4220:	687b      	ldr	r3, [r7, #4]
 80b4222:	2200      	movs	r2, #0
 80b4224:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80b4226:	687b      	ldr	r3, [r7, #4]
 80b4228:	681b      	ldr	r3, [r3, #0]
 80b422a:	691b      	ldr	r3, [r3, #16]
 80b422c:	f003 0304 	and.w	r3, r3, #4
 80b4230:	2b04      	cmp	r3, #4
 80b4232:	d122      	bne.n	80b427a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80b4234:	687b      	ldr	r3, [r7, #4]
 80b4236:	681b      	ldr	r3, [r3, #0]
 80b4238:	68db      	ldr	r3, [r3, #12]
 80b423a:	f003 0304 	and.w	r3, r3, #4
 80b423e:	2b04      	cmp	r3, #4
 80b4240:	d11b      	bne.n	80b427a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80b4242:	687b      	ldr	r3, [r7, #4]
 80b4244:	681b      	ldr	r3, [r3, #0]
 80b4246:	f06f 0204 	mvn.w	r2, #4
 80b424a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80b424c:	687b      	ldr	r3, [r7, #4]
 80b424e:	2202      	movs	r2, #2
 80b4250:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80b4252:	687b      	ldr	r3, [r7, #4]
 80b4254:	681b      	ldr	r3, [r3, #0]
 80b4256:	699b      	ldr	r3, [r3, #24]
 80b4258:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80b425c:	2b00      	cmp	r3, #0
 80b425e:	d003      	beq.n	80b4268 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80b4260:	6878      	ldr	r0, [r7, #4]
 80b4262:	f000 fa9f 	bl	80b47a4 <HAL_TIM_IC_CaptureCallback>
 80b4266:	e005      	b.n	80b4274 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80b4268:	6878      	ldr	r0, [r7, #4]
 80b426a:	f000 fa91 	bl	80b4790 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80b426e:	6878      	ldr	r0, [r7, #4]
 80b4270:	f000 faa2 	bl	80b47b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80b4274:	687b      	ldr	r3, [r7, #4]
 80b4276:	2200      	movs	r2, #0
 80b4278:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80b427a:	687b      	ldr	r3, [r7, #4]
 80b427c:	681b      	ldr	r3, [r3, #0]
 80b427e:	691b      	ldr	r3, [r3, #16]
 80b4280:	f003 0308 	and.w	r3, r3, #8
 80b4284:	2b08      	cmp	r3, #8
 80b4286:	d122      	bne.n	80b42ce <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80b4288:	687b      	ldr	r3, [r7, #4]
 80b428a:	681b      	ldr	r3, [r3, #0]
 80b428c:	68db      	ldr	r3, [r3, #12]
 80b428e:	f003 0308 	and.w	r3, r3, #8
 80b4292:	2b08      	cmp	r3, #8
 80b4294:	d11b      	bne.n	80b42ce <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80b4296:	687b      	ldr	r3, [r7, #4]
 80b4298:	681b      	ldr	r3, [r3, #0]
 80b429a:	f06f 0208 	mvn.w	r2, #8
 80b429e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80b42a0:	687b      	ldr	r3, [r7, #4]
 80b42a2:	2204      	movs	r2, #4
 80b42a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80b42a6:	687b      	ldr	r3, [r7, #4]
 80b42a8:	681b      	ldr	r3, [r3, #0]
 80b42aa:	69db      	ldr	r3, [r3, #28]
 80b42ac:	f003 0303 	and.w	r3, r3, #3
 80b42b0:	2b00      	cmp	r3, #0
 80b42b2:	d003      	beq.n	80b42bc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80b42b4:	6878      	ldr	r0, [r7, #4]
 80b42b6:	f000 fa75 	bl	80b47a4 <HAL_TIM_IC_CaptureCallback>
 80b42ba:	e005      	b.n	80b42c8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80b42bc:	6878      	ldr	r0, [r7, #4]
 80b42be:	f000 fa67 	bl	80b4790 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80b42c2:	6878      	ldr	r0, [r7, #4]
 80b42c4:	f000 fa78 	bl	80b47b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80b42c8:	687b      	ldr	r3, [r7, #4]
 80b42ca:	2200      	movs	r2, #0
 80b42cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80b42ce:	687b      	ldr	r3, [r7, #4]
 80b42d0:	681b      	ldr	r3, [r3, #0]
 80b42d2:	691b      	ldr	r3, [r3, #16]
 80b42d4:	f003 0310 	and.w	r3, r3, #16
 80b42d8:	2b10      	cmp	r3, #16
 80b42da:	d122      	bne.n	80b4322 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80b42dc:	687b      	ldr	r3, [r7, #4]
 80b42de:	681b      	ldr	r3, [r3, #0]
 80b42e0:	68db      	ldr	r3, [r3, #12]
 80b42e2:	f003 0310 	and.w	r3, r3, #16
 80b42e6:	2b10      	cmp	r3, #16
 80b42e8:	d11b      	bne.n	80b4322 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80b42ea:	687b      	ldr	r3, [r7, #4]
 80b42ec:	681b      	ldr	r3, [r3, #0]
 80b42ee:	f06f 0210 	mvn.w	r2, #16
 80b42f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80b42f4:	687b      	ldr	r3, [r7, #4]
 80b42f6:	2208      	movs	r2, #8
 80b42f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80b42fa:	687b      	ldr	r3, [r7, #4]
 80b42fc:	681b      	ldr	r3, [r3, #0]
 80b42fe:	69db      	ldr	r3, [r3, #28]
 80b4300:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80b4304:	2b00      	cmp	r3, #0
 80b4306:	d003      	beq.n	80b4310 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80b4308:	6878      	ldr	r0, [r7, #4]
 80b430a:	f000 fa4b 	bl	80b47a4 <HAL_TIM_IC_CaptureCallback>
 80b430e:	e005      	b.n	80b431c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80b4310:	6878      	ldr	r0, [r7, #4]
 80b4312:	f000 fa3d 	bl	80b4790 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80b4316:	6878      	ldr	r0, [r7, #4]
 80b4318:	f000 fa4e 	bl	80b47b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80b431c:	687b      	ldr	r3, [r7, #4]
 80b431e:	2200      	movs	r2, #0
 80b4320:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80b4322:	687b      	ldr	r3, [r7, #4]
 80b4324:	681b      	ldr	r3, [r3, #0]
 80b4326:	691b      	ldr	r3, [r3, #16]
 80b4328:	f003 0301 	and.w	r3, r3, #1
 80b432c:	2b01      	cmp	r3, #1
 80b432e:	d10e      	bne.n	80b434e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80b4330:	687b      	ldr	r3, [r7, #4]
 80b4332:	681b      	ldr	r3, [r3, #0]
 80b4334:	68db      	ldr	r3, [r3, #12]
 80b4336:	f003 0301 	and.w	r3, r3, #1
 80b433a:	2b01      	cmp	r3, #1
 80b433c:	d107      	bne.n	80b434e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80b433e:	687b      	ldr	r3, [r7, #4]
 80b4340:	681b      	ldr	r3, [r3, #0]
 80b4342:	f06f 0201 	mvn.w	r2, #1
 80b4346:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80b4348:	6878      	ldr	r0, [r7, #4]
 80b434a:	f7f5 fbbd 	bl	80a9ac8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80b434e:	687b      	ldr	r3, [r7, #4]
 80b4350:	681b      	ldr	r3, [r3, #0]
 80b4352:	691b      	ldr	r3, [r3, #16]
 80b4354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80b4358:	2b80      	cmp	r3, #128	; 0x80
 80b435a:	d10e      	bne.n	80b437a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80b435c:	687b      	ldr	r3, [r7, #4]
 80b435e:	681b      	ldr	r3, [r3, #0]
 80b4360:	68db      	ldr	r3, [r3, #12]
 80b4362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80b4366:	2b80      	cmp	r3, #128	; 0x80
 80b4368:	d107      	bne.n	80b437a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80b436a:	687b      	ldr	r3, [r7, #4]
 80b436c:	681b      	ldr	r3, [r3, #0]
 80b436e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80b4372:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80b4374:	6878      	ldr	r0, [r7, #4]
 80b4376:	f000 fdf5 	bl	80b4f64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80b437a:	687b      	ldr	r3, [r7, #4]
 80b437c:	681b      	ldr	r3, [r3, #0]
 80b437e:	691b      	ldr	r3, [r3, #16]
 80b4380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80b4384:	2b40      	cmp	r3, #64	; 0x40
 80b4386:	d10e      	bne.n	80b43a6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80b4388:	687b      	ldr	r3, [r7, #4]
 80b438a:	681b      	ldr	r3, [r3, #0]
 80b438c:	68db      	ldr	r3, [r3, #12]
 80b438e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80b4392:	2b40      	cmp	r3, #64	; 0x40
 80b4394:	d107      	bne.n	80b43a6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80b4396:	687b      	ldr	r3, [r7, #4]
 80b4398:	681b      	ldr	r3, [r3, #0]
 80b439a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80b439e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80b43a0:	6878      	ldr	r0, [r7, #4]
 80b43a2:	f000 fa13 	bl	80b47cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80b43a6:	687b      	ldr	r3, [r7, #4]
 80b43a8:	681b      	ldr	r3, [r3, #0]
 80b43aa:	691b      	ldr	r3, [r3, #16]
 80b43ac:	f003 0320 	and.w	r3, r3, #32
 80b43b0:	2b20      	cmp	r3, #32
 80b43b2:	d10e      	bne.n	80b43d2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80b43b4:	687b      	ldr	r3, [r7, #4]
 80b43b6:	681b      	ldr	r3, [r3, #0]
 80b43b8:	68db      	ldr	r3, [r3, #12]
 80b43ba:	f003 0320 	and.w	r3, r3, #32
 80b43be:	2b20      	cmp	r3, #32
 80b43c0:	d107      	bne.n	80b43d2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80b43c2:	687b      	ldr	r3, [r7, #4]
 80b43c4:	681b      	ldr	r3, [r3, #0]
 80b43c6:	f06f 0220 	mvn.w	r2, #32
 80b43ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80b43cc:	6878      	ldr	r0, [r7, #4]
 80b43ce:	f000 fdbf 	bl	80b4f50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80b43d2:	bf00      	nop
 80b43d4:	3708      	adds	r7, #8
 80b43d6:	46bd      	mov	sp, r7
 80b43d8:	bd80      	pop	{r7, pc}
	...

080b43dc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80b43dc:	b580      	push	{r7, lr}
 80b43de:	b084      	sub	sp, #16
 80b43e0:	af00      	add	r7, sp, #0
 80b43e2:	60f8      	str	r0, [r7, #12]
 80b43e4:	60b9      	str	r1, [r7, #8]
 80b43e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80b43e8:	68fb      	ldr	r3, [r7, #12]
 80b43ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80b43ee:	2b01      	cmp	r3, #1
 80b43f0:	d101      	bne.n	80b43f6 <HAL_TIM_OC_ConfigChannel+0x1a>
 80b43f2:	2302      	movs	r3, #2
 80b43f4:	e046      	b.n	80b4484 <HAL_TIM_OC_ConfigChannel+0xa8>
 80b43f6:	68fb      	ldr	r3, [r7, #12]
 80b43f8:	2201      	movs	r2, #1
 80b43fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80b43fe:	687b      	ldr	r3, [r7, #4]
 80b4400:	2b0c      	cmp	r3, #12
 80b4402:	d839      	bhi.n	80b4478 <HAL_TIM_OC_ConfigChannel+0x9c>
 80b4404:	a201      	add	r2, pc, #4	; (adr r2, 80b440c <HAL_TIM_OC_ConfigChannel+0x30>)
 80b4406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80b440a:	bf00      	nop
 80b440c:	080b4441 	.word	0x080b4441
 80b4410:	080b4479 	.word	0x080b4479
 80b4414:	080b4479 	.word	0x080b4479
 80b4418:	080b4479 	.word	0x080b4479
 80b441c:	080b444f 	.word	0x080b444f
 80b4420:	080b4479 	.word	0x080b4479
 80b4424:	080b4479 	.word	0x080b4479
 80b4428:	080b4479 	.word	0x080b4479
 80b442c:	080b445d 	.word	0x080b445d
 80b4430:	080b4479 	.word	0x080b4479
 80b4434:	080b4479 	.word	0x080b4479
 80b4438:	080b4479 	.word	0x080b4479
 80b443c:	080b446b 	.word	0x080b446b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80b4440:	68fb      	ldr	r3, [r7, #12]
 80b4442:	681b      	ldr	r3, [r3, #0]
 80b4444:	68b9      	ldr	r1, [r7, #8]
 80b4446:	4618      	mov	r0, r3
 80b4448:	f000 fa6a 	bl	80b4920 <TIM_OC1_SetConfig>
      break;
 80b444c:	e015      	b.n	80b447a <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80b444e:	68fb      	ldr	r3, [r7, #12]
 80b4450:	681b      	ldr	r3, [r3, #0]
 80b4452:	68b9      	ldr	r1, [r7, #8]
 80b4454:	4618      	mov	r0, r3
 80b4456:	f000 fad3 	bl	80b4a00 <TIM_OC2_SetConfig>
      break;
 80b445a:	e00e      	b.n	80b447a <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80b445c:	68fb      	ldr	r3, [r7, #12]
 80b445e:	681b      	ldr	r3, [r3, #0]
 80b4460:	68b9      	ldr	r1, [r7, #8]
 80b4462:	4618      	mov	r0, r3
 80b4464:	f000 fb42 	bl	80b4aec <TIM_OC3_SetConfig>
      break;
 80b4468:	e007      	b.n	80b447a <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80b446a:	68fb      	ldr	r3, [r7, #12]
 80b446c:	681b      	ldr	r3, [r3, #0]
 80b446e:	68b9      	ldr	r1, [r7, #8]
 80b4470:	4618      	mov	r0, r3
 80b4472:	f000 fbaf 	bl	80b4bd4 <TIM_OC4_SetConfig>
      break;
 80b4476:	e000      	b.n	80b447a <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 80b4478:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80b447a:	68fb      	ldr	r3, [r7, #12]
 80b447c:	2200      	movs	r2, #0
 80b447e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80b4482:	2300      	movs	r3, #0
}
 80b4484:	4618      	mov	r0, r3
 80b4486:	3710      	adds	r7, #16
 80b4488:	46bd      	mov	sp, r7
 80b448a:	bd80      	pop	{r7, pc}

080b448c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80b448c:	b580      	push	{r7, lr}
 80b448e:	b084      	sub	sp, #16
 80b4490:	af00      	add	r7, sp, #0
 80b4492:	60f8      	str	r0, [r7, #12]
 80b4494:	60b9      	str	r1, [r7, #8]
 80b4496:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80b4498:	68fb      	ldr	r3, [r7, #12]
 80b449a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80b449e:	2b01      	cmp	r3, #1
 80b44a0:	d101      	bne.n	80b44a6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80b44a2:	2302      	movs	r3, #2
 80b44a4:	e0ac      	b.n	80b4600 <HAL_TIM_PWM_ConfigChannel+0x174>
 80b44a6:	68fb      	ldr	r3, [r7, #12]
 80b44a8:	2201      	movs	r2, #1
 80b44aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80b44ae:	687b      	ldr	r3, [r7, #4]
 80b44b0:	2b0c      	cmp	r3, #12
 80b44b2:	f200 809f 	bhi.w	80b45f4 <HAL_TIM_PWM_ConfigChannel+0x168>
 80b44b6:	a201      	add	r2, pc, #4	; (adr r2, 80b44bc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80b44b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80b44bc:	080b44f1 	.word	0x080b44f1
 80b44c0:	080b45f5 	.word	0x080b45f5
 80b44c4:	080b45f5 	.word	0x080b45f5
 80b44c8:	080b45f5 	.word	0x080b45f5
 80b44cc:	080b4531 	.word	0x080b4531
 80b44d0:	080b45f5 	.word	0x080b45f5
 80b44d4:	080b45f5 	.word	0x080b45f5
 80b44d8:	080b45f5 	.word	0x080b45f5
 80b44dc:	080b4573 	.word	0x080b4573
 80b44e0:	080b45f5 	.word	0x080b45f5
 80b44e4:	080b45f5 	.word	0x080b45f5
 80b44e8:	080b45f5 	.word	0x080b45f5
 80b44ec:	080b45b3 	.word	0x080b45b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80b44f0:	68fb      	ldr	r3, [r7, #12]
 80b44f2:	681b      	ldr	r3, [r3, #0]
 80b44f4:	68b9      	ldr	r1, [r7, #8]
 80b44f6:	4618      	mov	r0, r3
 80b44f8:	f000 fa12 	bl	80b4920 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80b44fc:	68fb      	ldr	r3, [r7, #12]
 80b44fe:	681b      	ldr	r3, [r3, #0]
 80b4500:	699a      	ldr	r2, [r3, #24]
 80b4502:	68fb      	ldr	r3, [r7, #12]
 80b4504:	681b      	ldr	r3, [r3, #0]
 80b4506:	f042 0208 	orr.w	r2, r2, #8
 80b450a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80b450c:	68fb      	ldr	r3, [r7, #12]
 80b450e:	681b      	ldr	r3, [r3, #0]
 80b4510:	699a      	ldr	r2, [r3, #24]
 80b4512:	68fb      	ldr	r3, [r7, #12]
 80b4514:	681b      	ldr	r3, [r3, #0]
 80b4516:	f022 0204 	bic.w	r2, r2, #4
 80b451a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80b451c:	68fb      	ldr	r3, [r7, #12]
 80b451e:	681b      	ldr	r3, [r3, #0]
 80b4520:	6999      	ldr	r1, [r3, #24]
 80b4522:	68bb      	ldr	r3, [r7, #8]
 80b4524:	691a      	ldr	r2, [r3, #16]
 80b4526:	68fb      	ldr	r3, [r7, #12]
 80b4528:	681b      	ldr	r3, [r3, #0]
 80b452a:	430a      	orrs	r2, r1
 80b452c:	619a      	str	r2, [r3, #24]
      break;
 80b452e:	e062      	b.n	80b45f6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80b4530:	68fb      	ldr	r3, [r7, #12]
 80b4532:	681b      	ldr	r3, [r3, #0]
 80b4534:	68b9      	ldr	r1, [r7, #8]
 80b4536:	4618      	mov	r0, r3
 80b4538:	f000 fa62 	bl	80b4a00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80b453c:	68fb      	ldr	r3, [r7, #12]
 80b453e:	681b      	ldr	r3, [r3, #0]
 80b4540:	699a      	ldr	r2, [r3, #24]
 80b4542:	68fb      	ldr	r3, [r7, #12]
 80b4544:	681b      	ldr	r3, [r3, #0]
 80b4546:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80b454a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80b454c:	68fb      	ldr	r3, [r7, #12]
 80b454e:	681b      	ldr	r3, [r3, #0]
 80b4550:	699a      	ldr	r2, [r3, #24]
 80b4552:	68fb      	ldr	r3, [r7, #12]
 80b4554:	681b      	ldr	r3, [r3, #0]
 80b4556:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80b455a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80b455c:	68fb      	ldr	r3, [r7, #12]
 80b455e:	681b      	ldr	r3, [r3, #0]
 80b4560:	6999      	ldr	r1, [r3, #24]
 80b4562:	68bb      	ldr	r3, [r7, #8]
 80b4564:	691b      	ldr	r3, [r3, #16]
 80b4566:	021a      	lsls	r2, r3, #8
 80b4568:	68fb      	ldr	r3, [r7, #12]
 80b456a:	681b      	ldr	r3, [r3, #0]
 80b456c:	430a      	orrs	r2, r1
 80b456e:	619a      	str	r2, [r3, #24]
      break;
 80b4570:	e041      	b.n	80b45f6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80b4572:	68fb      	ldr	r3, [r7, #12]
 80b4574:	681b      	ldr	r3, [r3, #0]
 80b4576:	68b9      	ldr	r1, [r7, #8]
 80b4578:	4618      	mov	r0, r3
 80b457a:	f000 fab7 	bl	80b4aec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80b457e:	68fb      	ldr	r3, [r7, #12]
 80b4580:	681b      	ldr	r3, [r3, #0]
 80b4582:	69da      	ldr	r2, [r3, #28]
 80b4584:	68fb      	ldr	r3, [r7, #12]
 80b4586:	681b      	ldr	r3, [r3, #0]
 80b4588:	f042 0208 	orr.w	r2, r2, #8
 80b458c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80b458e:	68fb      	ldr	r3, [r7, #12]
 80b4590:	681b      	ldr	r3, [r3, #0]
 80b4592:	69da      	ldr	r2, [r3, #28]
 80b4594:	68fb      	ldr	r3, [r7, #12]
 80b4596:	681b      	ldr	r3, [r3, #0]
 80b4598:	f022 0204 	bic.w	r2, r2, #4
 80b459c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80b459e:	68fb      	ldr	r3, [r7, #12]
 80b45a0:	681b      	ldr	r3, [r3, #0]
 80b45a2:	69d9      	ldr	r1, [r3, #28]
 80b45a4:	68bb      	ldr	r3, [r7, #8]
 80b45a6:	691a      	ldr	r2, [r3, #16]
 80b45a8:	68fb      	ldr	r3, [r7, #12]
 80b45aa:	681b      	ldr	r3, [r3, #0]
 80b45ac:	430a      	orrs	r2, r1
 80b45ae:	61da      	str	r2, [r3, #28]
      break;
 80b45b0:	e021      	b.n	80b45f6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80b45b2:	68fb      	ldr	r3, [r7, #12]
 80b45b4:	681b      	ldr	r3, [r3, #0]
 80b45b6:	68b9      	ldr	r1, [r7, #8]
 80b45b8:	4618      	mov	r0, r3
 80b45ba:	f000 fb0b 	bl	80b4bd4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80b45be:	68fb      	ldr	r3, [r7, #12]
 80b45c0:	681b      	ldr	r3, [r3, #0]
 80b45c2:	69da      	ldr	r2, [r3, #28]
 80b45c4:	68fb      	ldr	r3, [r7, #12]
 80b45c6:	681b      	ldr	r3, [r3, #0]
 80b45c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80b45cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80b45ce:	68fb      	ldr	r3, [r7, #12]
 80b45d0:	681b      	ldr	r3, [r3, #0]
 80b45d2:	69da      	ldr	r2, [r3, #28]
 80b45d4:	68fb      	ldr	r3, [r7, #12]
 80b45d6:	681b      	ldr	r3, [r3, #0]
 80b45d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80b45dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80b45de:	68fb      	ldr	r3, [r7, #12]
 80b45e0:	681b      	ldr	r3, [r3, #0]
 80b45e2:	69d9      	ldr	r1, [r3, #28]
 80b45e4:	68bb      	ldr	r3, [r7, #8]
 80b45e6:	691b      	ldr	r3, [r3, #16]
 80b45e8:	021a      	lsls	r2, r3, #8
 80b45ea:	68fb      	ldr	r3, [r7, #12]
 80b45ec:	681b      	ldr	r3, [r3, #0]
 80b45ee:	430a      	orrs	r2, r1
 80b45f0:	61da      	str	r2, [r3, #28]
      break;
 80b45f2:	e000      	b.n	80b45f6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80b45f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80b45f6:	68fb      	ldr	r3, [r7, #12]
 80b45f8:	2200      	movs	r2, #0
 80b45fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80b45fe:	2300      	movs	r3, #0
}
 80b4600:	4618      	mov	r0, r3
 80b4602:	3710      	adds	r7, #16
 80b4604:	46bd      	mov	sp, r7
 80b4606:	bd80      	pop	{r7, pc}

080b4608 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80b4608:	b580      	push	{r7, lr}
 80b460a:	b084      	sub	sp, #16
 80b460c:	af00      	add	r7, sp, #0
 80b460e:	6078      	str	r0, [r7, #4]
 80b4610:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80b4612:	687b      	ldr	r3, [r7, #4]
 80b4614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80b4618:	2b01      	cmp	r3, #1
 80b461a:	d101      	bne.n	80b4620 <HAL_TIM_ConfigClockSource+0x18>
 80b461c:	2302      	movs	r3, #2
 80b461e:	e0b3      	b.n	80b4788 <HAL_TIM_ConfigClockSource+0x180>
 80b4620:	687b      	ldr	r3, [r7, #4]
 80b4622:	2201      	movs	r2, #1
 80b4624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80b4628:	687b      	ldr	r3, [r7, #4]
 80b462a:	2202      	movs	r2, #2
 80b462c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80b4630:	687b      	ldr	r3, [r7, #4]
 80b4632:	681b      	ldr	r3, [r3, #0]
 80b4634:	689b      	ldr	r3, [r3, #8]
 80b4636:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80b4638:	68fb      	ldr	r3, [r7, #12]
 80b463a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80b463e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80b4640:	68fb      	ldr	r3, [r7, #12]
 80b4642:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80b4646:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80b4648:	687b      	ldr	r3, [r7, #4]
 80b464a:	681b      	ldr	r3, [r3, #0]
 80b464c:	68fa      	ldr	r2, [r7, #12]
 80b464e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80b4650:	683b      	ldr	r3, [r7, #0]
 80b4652:	681b      	ldr	r3, [r3, #0]
 80b4654:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80b4658:	d03e      	beq.n	80b46d8 <HAL_TIM_ConfigClockSource+0xd0>
 80b465a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80b465e:	f200 8087 	bhi.w	80b4770 <HAL_TIM_ConfigClockSource+0x168>
 80b4662:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80b4666:	f000 8085 	beq.w	80b4774 <HAL_TIM_ConfigClockSource+0x16c>
 80b466a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80b466e:	d87f      	bhi.n	80b4770 <HAL_TIM_ConfigClockSource+0x168>
 80b4670:	2b70      	cmp	r3, #112	; 0x70
 80b4672:	d01a      	beq.n	80b46aa <HAL_TIM_ConfigClockSource+0xa2>
 80b4674:	2b70      	cmp	r3, #112	; 0x70
 80b4676:	d87b      	bhi.n	80b4770 <HAL_TIM_ConfigClockSource+0x168>
 80b4678:	2b60      	cmp	r3, #96	; 0x60
 80b467a:	d050      	beq.n	80b471e <HAL_TIM_ConfigClockSource+0x116>
 80b467c:	2b60      	cmp	r3, #96	; 0x60
 80b467e:	d877      	bhi.n	80b4770 <HAL_TIM_ConfigClockSource+0x168>
 80b4680:	2b50      	cmp	r3, #80	; 0x50
 80b4682:	d03c      	beq.n	80b46fe <HAL_TIM_ConfigClockSource+0xf6>
 80b4684:	2b50      	cmp	r3, #80	; 0x50
 80b4686:	d873      	bhi.n	80b4770 <HAL_TIM_ConfigClockSource+0x168>
 80b4688:	2b40      	cmp	r3, #64	; 0x40
 80b468a:	d058      	beq.n	80b473e <HAL_TIM_ConfigClockSource+0x136>
 80b468c:	2b40      	cmp	r3, #64	; 0x40
 80b468e:	d86f      	bhi.n	80b4770 <HAL_TIM_ConfigClockSource+0x168>
 80b4690:	2b30      	cmp	r3, #48	; 0x30
 80b4692:	d064      	beq.n	80b475e <HAL_TIM_ConfigClockSource+0x156>
 80b4694:	2b30      	cmp	r3, #48	; 0x30
 80b4696:	d86b      	bhi.n	80b4770 <HAL_TIM_ConfigClockSource+0x168>
 80b4698:	2b20      	cmp	r3, #32
 80b469a:	d060      	beq.n	80b475e <HAL_TIM_ConfigClockSource+0x156>
 80b469c:	2b20      	cmp	r3, #32
 80b469e:	d867      	bhi.n	80b4770 <HAL_TIM_ConfigClockSource+0x168>
 80b46a0:	2b00      	cmp	r3, #0
 80b46a2:	d05c      	beq.n	80b475e <HAL_TIM_ConfigClockSource+0x156>
 80b46a4:	2b10      	cmp	r3, #16
 80b46a6:	d05a      	beq.n	80b475e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80b46a8:	e062      	b.n	80b4770 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80b46aa:	687b      	ldr	r3, [r7, #4]
 80b46ac:	6818      	ldr	r0, [r3, #0]
 80b46ae:	683b      	ldr	r3, [r7, #0]
 80b46b0:	6899      	ldr	r1, [r3, #8]
 80b46b2:	683b      	ldr	r3, [r7, #0]
 80b46b4:	685a      	ldr	r2, [r3, #4]
 80b46b6:	683b      	ldr	r3, [r7, #0]
 80b46b8:	68db      	ldr	r3, [r3, #12]
 80b46ba:	f000 fb5b 	bl	80b4d74 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80b46be:	687b      	ldr	r3, [r7, #4]
 80b46c0:	681b      	ldr	r3, [r3, #0]
 80b46c2:	689b      	ldr	r3, [r3, #8]
 80b46c4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80b46c6:	68fb      	ldr	r3, [r7, #12]
 80b46c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80b46cc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80b46ce:	687b      	ldr	r3, [r7, #4]
 80b46d0:	681b      	ldr	r3, [r3, #0]
 80b46d2:	68fa      	ldr	r2, [r7, #12]
 80b46d4:	609a      	str	r2, [r3, #8]
      break;
 80b46d6:	e04e      	b.n	80b4776 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80b46d8:	687b      	ldr	r3, [r7, #4]
 80b46da:	6818      	ldr	r0, [r3, #0]
 80b46dc:	683b      	ldr	r3, [r7, #0]
 80b46de:	6899      	ldr	r1, [r3, #8]
 80b46e0:	683b      	ldr	r3, [r7, #0]
 80b46e2:	685a      	ldr	r2, [r3, #4]
 80b46e4:	683b      	ldr	r3, [r7, #0]
 80b46e6:	68db      	ldr	r3, [r3, #12]
 80b46e8:	f000 fb44 	bl	80b4d74 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80b46ec:	687b      	ldr	r3, [r7, #4]
 80b46ee:	681b      	ldr	r3, [r3, #0]
 80b46f0:	689a      	ldr	r2, [r3, #8]
 80b46f2:	687b      	ldr	r3, [r7, #4]
 80b46f4:	681b      	ldr	r3, [r3, #0]
 80b46f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80b46fa:	609a      	str	r2, [r3, #8]
      break;
 80b46fc:	e03b      	b.n	80b4776 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80b46fe:	687b      	ldr	r3, [r7, #4]
 80b4700:	6818      	ldr	r0, [r3, #0]
 80b4702:	683b      	ldr	r3, [r7, #0]
 80b4704:	6859      	ldr	r1, [r3, #4]
 80b4706:	683b      	ldr	r3, [r7, #0]
 80b4708:	68db      	ldr	r3, [r3, #12]
 80b470a:	461a      	mov	r2, r3
 80b470c:	f000 fab8 	bl	80b4c80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80b4710:	687b      	ldr	r3, [r7, #4]
 80b4712:	681b      	ldr	r3, [r3, #0]
 80b4714:	2150      	movs	r1, #80	; 0x50
 80b4716:	4618      	mov	r0, r3
 80b4718:	f000 fb11 	bl	80b4d3e <TIM_ITRx_SetConfig>
      break;
 80b471c:	e02b      	b.n	80b4776 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80b471e:	687b      	ldr	r3, [r7, #4]
 80b4720:	6818      	ldr	r0, [r3, #0]
 80b4722:	683b      	ldr	r3, [r7, #0]
 80b4724:	6859      	ldr	r1, [r3, #4]
 80b4726:	683b      	ldr	r3, [r7, #0]
 80b4728:	68db      	ldr	r3, [r3, #12]
 80b472a:	461a      	mov	r2, r3
 80b472c:	f000 fad7 	bl	80b4cde <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80b4730:	687b      	ldr	r3, [r7, #4]
 80b4732:	681b      	ldr	r3, [r3, #0]
 80b4734:	2160      	movs	r1, #96	; 0x60
 80b4736:	4618      	mov	r0, r3
 80b4738:	f000 fb01 	bl	80b4d3e <TIM_ITRx_SetConfig>
      break;
 80b473c:	e01b      	b.n	80b4776 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80b473e:	687b      	ldr	r3, [r7, #4]
 80b4740:	6818      	ldr	r0, [r3, #0]
 80b4742:	683b      	ldr	r3, [r7, #0]
 80b4744:	6859      	ldr	r1, [r3, #4]
 80b4746:	683b      	ldr	r3, [r7, #0]
 80b4748:	68db      	ldr	r3, [r3, #12]
 80b474a:	461a      	mov	r2, r3
 80b474c:	f000 fa98 	bl	80b4c80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80b4750:	687b      	ldr	r3, [r7, #4]
 80b4752:	681b      	ldr	r3, [r3, #0]
 80b4754:	2140      	movs	r1, #64	; 0x40
 80b4756:	4618      	mov	r0, r3
 80b4758:	f000 faf1 	bl	80b4d3e <TIM_ITRx_SetConfig>
      break;
 80b475c:	e00b      	b.n	80b4776 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80b475e:	687b      	ldr	r3, [r7, #4]
 80b4760:	681a      	ldr	r2, [r3, #0]
 80b4762:	683b      	ldr	r3, [r7, #0]
 80b4764:	681b      	ldr	r3, [r3, #0]
 80b4766:	4619      	mov	r1, r3
 80b4768:	4610      	mov	r0, r2
 80b476a:	f000 fae8 	bl	80b4d3e <TIM_ITRx_SetConfig>
        break;
 80b476e:	e002      	b.n	80b4776 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80b4770:	bf00      	nop
 80b4772:	e000      	b.n	80b4776 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80b4774:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80b4776:	687b      	ldr	r3, [r7, #4]
 80b4778:	2201      	movs	r2, #1
 80b477a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80b477e:	687b      	ldr	r3, [r7, #4]
 80b4780:	2200      	movs	r2, #0
 80b4782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80b4786:	2300      	movs	r3, #0
}
 80b4788:	4618      	mov	r0, r3
 80b478a:	3710      	adds	r7, #16
 80b478c:	46bd      	mov	sp, r7
 80b478e:	bd80      	pop	{r7, pc}

080b4790 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80b4790:	b480      	push	{r7}
 80b4792:	b083      	sub	sp, #12
 80b4794:	af00      	add	r7, sp, #0
 80b4796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80b4798:	bf00      	nop
 80b479a:	370c      	adds	r7, #12
 80b479c:	46bd      	mov	sp, r7
 80b479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b47a2:	4770      	bx	lr

080b47a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80b47a4:	b480      	push	{r7}
 80b47a6:	b083      	sub	sp, #12
 80b47a8:	af00      	add	r7, sp, #0
 80b47aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80b47ac:	bf00      	nop
 80b47ae:	370c      	adds	r7, #12
 80b47b0:	46bd      	mov	sp, r7
 80b47b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b47b6:	4770      	bx	lr

080b47b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80b47b8:	b480      	push	{r7}
 80b47ba:	b083      	sub	sp, #12
 80b47bc:	af00      	add	r7, sp, #0
 80b47be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80b47c0:	bf00      	nop
 80b47c2:	370c      	adds	r7, #12
 80b47c4:	46bd      	mov	sp, r7
 80b47c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b47ca:	4770      	bx	lr

080b47cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80b47cc:	b480      	push	{r7}
 80b47ce:	b083      	sub	sp, #12
 80b47d0:	af00      	add	r7, sp, #0
 80b47d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80b47d4:	bf00      	nop
 80b47d6:	370c      	adds	r7, #12
 80b47d8:	46bd      	mov	sp, r7
 80b47da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b47de:	4770      	bx	lr

080b47e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80b47e0:	b480      	push	{r7}
 80b47e2:	b085      	sub	sp, #20
 80b47e4:	af00      	add	r7, sp, #0
 80b47e6:	6078      	str	r0, [r7, #4]
 80b47e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80b47ea:	687b      	ldr	r3, [r7, #4]
 80b47ec:	681b      	ldr	r3, [r3, #0]
 80b47ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80b47f0:	687b      	ldr	r3, [r7, #4]
 80b47f2:	4a40      	ldr	r2, [pc, #256]	; (80b48f4 <TIM_Base_SetConfig+0x114>)
 80b47f4:	4293      	cmp	r3, r2
 80b47f6:	d013      	beq.n	80b4820 <TIM_Base_SetConfig+0x40>
 80b47f8:	687b      	ldr	r3, [r7, #4]
 80b47fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80b47fe:	d00f      	beq.n	80b4820 <TIM_Base_SetConfig+0x40>
 80b4800:	687b      	ldr	r3, [r7, #4]
 80b4802:	4a3d      	ldr	r2, [pc, #244]	; (80b48f8 <TIM_Base_SetConfig+0x118>)
 80b4804:	4293      	cmp	r3, r2
 80b4806:	d00b      	beq.n	80b4820 <TIM_Base_SetConfig+0x40>
 80b4808:	687b      	ldr	r3, [r7, #4]
 80b480a:	4a3c      	ldr	r2, [pc, #240]	; (80b48fc <TIM_Base_SetConfig+0x11c>)
 80b480c:	4293      	cmp	r3, r2
 80b480e:	d007      	beq.n	80b4820 <TIM_Base_SetConfig+0x40>
 80b4810:	687b      	ldr	r3, [r7, #4]
 80b4812:	4a3b      	ldr	r2, [pc, #236]	; (80b4900 <TIM_Base_SetConfig+0x120>)
 80b4814:	4293      	cmp	r3, r2
 80b4816:	d003      	beq.n	80b4820 <TIM_Base_SetConfig+0x40>
 80b4818:	687b      	ldr	r3, [r7, #4]
 80b481a:	4a3a      	ldr	r2, [pc, #232]	; (80b4904 <TIM_Base_SetConfig+0x124>)
 80b481c:	4293      	cmp	r3, r2
 80b481e:	d108      	bne.n	80b4832 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80b4820:	68fb      	ldr	r3, [r7, #12]
 80b4822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80b4826:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80b4828:	683b      	ldr	r3, [r7, #0]
 80b482a:	685b      	ldr	r3, [r3, #4]
 80b482c:	68fa      	ldr	r2, [r7, #12]
 80b482e:	4313      	orrs	r3, r2
 80b4830:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80b4832:	687b      	ldr	r3, [r7, #4]
 80b4834:	4a2f      	ldr	r2, [pc, #188]	; (80b48f4 <TIM_Base_SetConfig+0x114>)
 80b4836:	4293      	cmp	r3, r2
 80b4838:	d02b      	beq.n	80b4892 <TIM_Base_SetConfig+0xb2>
 80b483a:	687b      	ldr	r3, [r7, #4]
 80b483c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80b4840:	d027      	beq.n	80b4892 <TIM_Base_SetConfig+0xb2>
 80b4842:	687b      	ldr	r3, [r7, #4]
 80b4844:	4a2c      	ldr	r2, [pc, #176]	; (80b48f8 <TIM_Base_SetConfig+0x118>)
 80b4846:	4293      	cmp	r3, r2
 80b4848:	d023      	beq.n	80b4892 <TIM_Base_SetConfig+0xb2>
 80b484a:	687b      	ldr	r3, [r7, #4]
 80b484c:	4a2b      	ldr	r2, [pc, #172]	; (80b48fc <TIM_Base_SetConfig+0x11c>)
 80b484e:	4293      	cmp	r3, r2
 80b4850:	d01f      	beq.n	80b4892 <TIM_Base_SetConfig+0xb2>
 80b4852:	687b      	ldr	r3, [r7, #4]
 80b4854:	4a2a      	ldr	r2, [pc, #168]	; (80b4900 <TIM_Base_SetConfig+0x120>)
 80b4856:	4293      	cmp	r3, r2
 80b4858:	d01b      	beq.n	80b4892 <TIM_Base_SetConfig+0xb2>
 80b485a:	687b      	ldr	r3, [r7, #4]
 80b485c:	4a29      	ldr	r2, [pc, #164]	; (80b4904 <TIM_Base_SetConfig+0x124>)
 80b485e:	4293      	cmp	r3, r2
 80b4860:	d017      	beq.n	80b4892 <TIM_Base_SetConfig+0xb2>
 80b4862:	687b      	ldr	r3, [r7, #4]
 80b4864:	4a28      	ldr	r2, [pc, #160]	; (80b4908 <TIM_Base_SetConfig+0x128>)
 80b4866:	4293      	cmp	r3, r2
 80b4868:	d013      	beq.n	80b4892 <TIM_Base_SetConfig+0xb2>
 80b486a:	687b      	ldr	r3, [r7, #4]
 80b486c:	4a27      	ldr	r2, [pc, #156]	; (80b490c <TIM_Base_SetConfig+0x12c>)
 80b486e:	4293      	cmp	r3, r2
 80b4870:	d00f      	beq.n	80b4892 <TIM_Base_SetConfig+0xb2>
 80b4872:	687b      	ldr	r3, [r7, #4]
 80b4874:	4a26      	ldr	r2, [pc, #152]	; (80b4910 <TIM_Base_SetConfig+0x130>)
 80b4876:	4293      	cmp	r3, r2
 80b4878:	d00b      	beq.n	80b4892 <TIM_Base_SetConfig+0xb2>
 80b487a:	687b      	ldr	r3, [r7, #4]
 80b487c:	4a25      	ldr	r2, [pc, #148]	; (80b4914 <TIM_Base_SetConfig+0x134>)
 80b487e:	4293      	cmp	r3, r2
 80b4880:	d007      	beq.n	80b4892 <TIM_Base_SetConfig+0xb2>
 80b4882:	687b      	ldr	r3, [r7, #4]
 80b4884:	4a24      	ldr	r2, [pc, #144]	; (80b4918 <TIM_Base_SetConfig+0x138>)
 80b4886:	4293      	cmp	r3, r2
 80b4888:	d003      	beq.n	80b4892 <TIM_Base_SetConfig+0xb2>
 80b488a:	687b      	ldr	r3, [r7, #4]
 80b488c:	4a23      	ldr	r2, [pc, #140]	; (80b491c <TIM_Base_SetConfig+0x13c>)
 80b488e:	4293      	cmp	r3, r2
 80b4890:	d108      	bne.n	80b48a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80b4892:	68fb      	ldr	r3, [r7, #12]
 80b4894:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80b4898:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80b489a:	683b      	ldr	r3, [r7, #0]
 80b489c:	68db      	ldr	r3, [r3, #12]
 80b489e:	68fa      	ldr	r2, [r7, #12]
 80b48a0:	4313      	orrs	r3, r2
 80b48a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80b48a4:	68fb      	ldr	r3, [r7, #12]
 80b48a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80b48aa:	683b      	ldr	r3, [r7, #0]
 80b48ac:	695b      	ldr	r3, [r3, #20]
 80b48ae:	4313      	orrs	r3, r2
 80b48b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80b48b2:	687b      	ldr	r3, [r7, #4]
 80b48b4:	68fa      	ldr	r2, [r7, #12]
 80b48b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80b48b8:	683b      	ldr	r3, [r7, #0]
 80b48ba:	689a      	ldr	r2, [r3, #8]
 80b48bc:	687b      	ldr	r3, [r7, #4]
 80b48be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80b48c0:	683b      	ldr	r3, [r7, #0]
 80b48c2:	681a      	ldr	r2, [r3, #0]
 80b48c4:	687b      	ldr	r3, [r7, #4]
 80b48c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80b48c8:	687b      	ldr	r3, [r7, #4]
 80b48ca:	4a0a      	ldr	r2, [pc, #40]	; (80b48f4 <TIM_Base_SetConfig+0x114>)
 80b48cc:	4293      	cmp	r3, r2
 80b48ce:	d003      	beq.n	80b48d8 <TIM_Base_SetConfig+0xf8>
 80b48d0:	687b      	ldr	r3, [r7, #4]
 80b48d2:	4a0c      	ldr	r2, [pc, #48]	; (80b4904 <TIM_Base_SetConfig+0x124>)
 80b48d4:	4293      	cmp	r3, r2
 80b48d6:	d103      	bne.n	80b48e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80b48d8:	683b      	ldr	r3, [r7, #0]
 80b48da:	691a      	ldr	r2, [r3, #16]
 80b48dc:	687b      	ldr	r3, [r7, #4]
 80b48de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80b48e0:	687b      	ldr	r3, [r7, #4]
 80b48e2:	2201      	movs	r2, #1
 80b48e4:	615a      	str	r2, [r3, #20]
}
 80b48e6:	bf00      	nop
 80b48e8:	3714      	adds	r7, #20
 80b48ea:	46bd      	mov	sp, r7
 80b48ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b48f0:	4770      	bx	lr
 80b48f2:	bf00      	nop
 80b48f4:	40010000 	.word	0x40010000
 80b48f8:	40000400 	.word	0x40000400
 80b48fc:	40000800 	.word	0x40000800
 80b4900:	40000c00 	.word	0x40000c00
 80b4904:	40010400 	.word	0x40010400
 80b4908:	40014000 	.word	0x40014000
 80b490c:	40014400 	.word	0x40014400
 80b4910:	40014800 	.word	0x40014800
 80b4914:	40001800 	.word	0x40001800
 80b4918:	40001c00 	.word	0x40001c00
 80b491c:	40002000 	.word	0x40002000

080b4920 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80b4920:	b480      	push	{r7}
 80b4922:	b087      	sub	sp, #28
 80b4924:	af00      	add	r7, sp, #0
 80b4926:	6078      	str	r0, [r7, #4]
 80b4928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80b492a:	687b      	ldr	r3, [r7, #4]
 80b492c:	6a1b      	ldr	r3, [r3, #32]
 80b492e:	f023 0201 	bic.w	r2, r3, #1
 80b4932:	687b      	ldr	r3, [r7, #4]
 80b4934:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80b4936:	687b      	ldr	r3, [r7, #4]
 80b4938:	6a1b      	ldr	r3, [r3, #32]
 80b493a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80b493c:	687b      	ldr	r3, [r7, #4]
 80b493e:	685b      	ldr	r3, [r3, #4]
 80b4940:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80b4942:	687b      	ldr	r3, [r7, #4]
 80b4944:	699b      	ldr	r3, [r3, #24]
 80b4946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80b4948:	68fb      	ldr	r3, [r7, #12]
 80b494a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80b494e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80b4950:	68fb      	ldr	r3, [r7, #12]
 80b4952:	f023 0303 	bic.w	r3, r3, #3
 80b4956:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80b4958:	683b      	ldr	r3, [r7, #0]
 80b495a:	681b      	ldr	r3, [r3, #0]
 80b495c:	68fa      	ldr	r2, [r7, #12]
 80b495e:	4313      	orrs	r3, r2
 80b4960:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80b4962:	697b      	ldr	r3, [r7, #20]
 80b4964:	f023 0302 	bic.w	r3, r3, #2
 80b4968:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80b496a:	683b      	ldr	r3, [r7, #0]
 80b496c:	689b      	ldr	r3, [r3, #8]
 80b496e:	697a      	ldr	r2, [r7, #20]
 80b4970:	4313      	orrs	r3, r2
 80b4972:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80b4974:	687b      	ldr	r3, [r7, #4]
 80b4976:	4a20      	ldr	r2, [pc, #128]	; (80b49f8 <TIM_OC1_SetConfig+0xd8>)
 80b4978:	4293      	cmp	r3, r2
 80b497a:	d003      	beq.n	80b4984 <TIM_OC1_SetConfig+0x64>
 80b497c:	687b      	ldr	r3, [r7, #4]
 80b497e:	4a1f      	ldr	r2, [pc, #124]	; (80b49fc <TIM_OC1_SetConfig+0xdc>)
 80b4980:	4293      	cmp	r3, r2
 80b4982:	d10c      	bne.n	80b499e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80b4984:	697b      	ldr	r3, [r7, #20]
 80b4986:	f023 0308 	bic.w	r3, r3, #8
 80b498a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80b498c:	683b      	ldr	r3, [r7, #0]
 80b498e:	68db      	ldr	r3, [r3, #12]
 80b4990:	697a      	ldr	r2, [r7, #20]
 80b4992:	4313      	orrs	r3, r2
 80b4994:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80b4996:	697b      	ldr	r3, [r7, #20]
 80b4998:	f023 0304 	bic.w	r3, r3, #4
 80b499c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80b499e:	687b      	ldr	r3, [r7, #4]
 80b49a0:	4a15      	ldr	r2, [pc, #84]	; (80b49f8 <TIM_OC1_SetConfig+0xd8>)
 80b49a2:	4293      	cmp	r3, r2
 80b49a4:	d003      	beq.n	80b49ae <TIM_OC1_SetConfig+0x8e>
 80b49a6:	687b      	ldr	r3, [r7, #4]
 80b49a8:	4a14      	ldr	r2, [pc, #80]	; (80b49fc <TIM_OC1_SetConfig+0xdc>)
 80b49aa:	4293      	cmp	r3, r2
 80b49ac:	d111      	bne.n	80b49d2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80b49ae:	693b      	ldr	r3, [r7, #16]
 80b49b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80b49b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80b49b6:	693b      	ldr	r3, [r7, #16]
 80b49b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80b49bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80b49be:	683b      	ldr	r3, [r7, #0]
 80b49c0:	695b      	ldr	r3, [r3, #20]
 80b49c2:	693a      	ldr	r2, [r7, #16]
 80b49c4:	4313      	orrs	r3, r2
 80b49c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80b49c8:	683b      	ldr	r3, [r7, #0]
 80b49ca:	699b      	ldr	r3, [r3, #24]
 80b49cc:	693a      	ldr	r2, [r7, #16]
 80b49ce:	4313      	orrs	r3, r2
 80b49d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80b49d2:	687b      	ldr	r3, [r7, #4]
 80b49d4:	693a      	ldr	r2, [r7, #16]
 80b49d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80b49d8:	687b      	ldr	r3, [r7, #4]
 80b49da:	68fa      	ldr	r2, [r7, #12]
 80b49dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80b49de:	683b      	ldr	r3, [r7, #0]
 80b49e0:	685a      	ldr	r2, [r3, #4]
 80b49e2:	687b      	ldr	r3, [r7, #4]
 80b49e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80b49e6:	687b      	ldr	r3, [r7, #4]
 80b49e8:	697a      	ldr	r2, [r7, #20]
 80b49ea:	621a      	str	r2, [r3, #32]
}
 80b49ec:	bf00      	nop
 80b49ee:	371c      	adds	r7, #28
 80b49f0:	46bd      	mov	sp, r7
 80b49f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b49f6:	4770      	bx	lr
 80b49f8:	40010000 	.word	0x40010000
 80b49fc:	40010400 	.word	0x40010400

080b4a00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80b4a00:	b480      	push	{r7}
 80b4a02:	b087      	sub	sp, #28
 80b4a04:	af00      	add	r7, sp, #0
 80b4a06:	6078      	str	r0, [r7, #4]
 80b4a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80b4a0a:	687b      	ldr	r3, [r7, #4]
 80b4a0c:	6a1b      	ldr	r3, [r3, #32]
 80b4a0e:	f023 0210 	bic.w	r2, r3, #16
 80b4a12:	687b      	ldr	r3, [r7, #4]
 80b4a14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80b4a16:	687b      	ldr	r3, [r7, #4]
 80b4a18:	6a1b      	ldr	r3, [r3, #32]
 80b4a1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80b4a1c:	687b      	ldr	r3, [r7, #4]
 80b4a1e:	685b      	ldr	r3, [r3, #4]
 80b4a20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80b4a22:	687b      	ldr	r3, [r7, #4]
 80b4a24:	699b      	ldr	r3, [r3, #24]
 80b4a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80b4a28:	68fb      	ldr	r3, [r7, #12]
 80b4a2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80b4a2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80b4a30:	68fb      	ldr	r3, [r7, #12]
 80b4a32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80b4a36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80b4a38:	683b      	ldr	r3, [r7, #0]
 80b4a3a:	681b      	ldr	r3, [r3, #0]
 80b4a3c:	021b      	lsls	r3, r3, #8
 80b4a3e:	68fa      	ldr	r2, [r7, #12]
 80b4a40:	4313      	orrs	r3, r2
 80b4a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80b4a44:	697b      	ldr	r3, [r7, #20]
 80b4a46:	f023 0320 	bic.w	r3, r3, #32
 80b4a4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80b4a4c:	683b      	ldr	r3, [r7, #0]
 80b4a4e:	689b      	ldr	r3, [r3, #8]
 80b4a50:	011b      	lsls	r3, r3, #4
 80b4a52:	697a      	ldr	r2, [r7, #20]
 80b4a54:	4313      	orrs	r3, r2
 80b4a56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80b4a58:	687b      	ldr	r3, [r7, #4]
 80b4a5a:	4a22      	ldr	r2, [pc, #136]	; (80b4ae4 <TIM_OC2_SetConfig+0xe4>)
 80b4a5c:	4293      	cmp	r3, r2
 80b4a5e:	d003      	beq.n	80b4a68 <TIM_OC2_SetConfig+0x68>
 80b4a60:	687b      	ldr	r3, [r7, #4]
 80b4a62:	4a21      	ldr	r2, [pc, #132]	; (80b4ae8 <TIM_OC2_SetConfig+0xe8>)
 80b4a64:	4293      	cmp	r3, r2
 80b4a66:	d10d      	bne.n	80b4a84 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80b4a68:	697b      	ldr	r3, [r7, #20]
 80b4a6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80b4a6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80b4a70:	683b      	ldr	r3, [r7, #0]
 80b4a72:	68db      	ldr	r3, [r3, #12]
 80b4a74:	011b      	lsls	r3, r3, #4
 80b4a76:	697a      	ldr	r2, [r7, #20]
 80b4a78:	4313      	orrs	r3, r2
 80b4a7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80b4a7c:	697b      	ldr	r3, [r7, #20]
 80b4a7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80b4a82:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80b4a84:	687b      	ldr	r3, [r7, #4]
 80b4a86:	4a17      	ldr	r2, [pc, #92]	; (80b4ae4 <TIM_OC2_SetConfig+0xe4>)
 80b4a88:	4293      	cmp	r3, r2
 80b4a8a:	d003      	beq.n	80b4a94 <TIM_OC2_SetConfig+0x94>
 80b4a8c:	687b      	ldr	r3, [r7, #4]
 80b4a8e:	4a16      	ldr	r2, [pc, #88]	; (80b4ae8 <TIM_OC2_SetConfig+0xe8>)
 80b4a90:	4293      	cmp	r3, r2
 80b4a92:	d113      	bne.n	80b4abc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80b4a94:	693b      	ldr	r3, [r7, #16]
 80b4a96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80b4a9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80b4a9c:	693b      	ldr	r3, [r7, #16]
 80b4a9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80b4aa2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80b4aa4:	683b      	ldr	r3, [r7, #0]
 80b4aa6:	695b      	ldr	r3, [r3, #20]
 80b4aa8:	009b      	lsls	r3, r3, #2
 80b4aaa:	693a      	ldr	r2, [r7, #16]
 80b4aac:	4313      	orrs	r3, r2
 80b4aae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80b4ab0:	683b      	ldr	r3, [r7, #0]
 80b4ab2:	699b      	ldr	r3, [r3, #24]
 80b4ab4:	009b      	lsls	r3, r3, #2
 80b4ab6:	693a      	ldr	r2, [r7, #16]
 80b4ab8:	4313      	orrs	r3, r2
 80b4aba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80b4abc:	687b      	ldr	r3, [r7, #4]
 80b4abe:	693a      	ldr	r2, [r7, #16]
 80b4ac0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80b4ac2:	687b      	ldr	r3, [r7, #4]
 80b4ac4:	68fa      	ldr	r2, [r7, #12]
 80b4ac6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80b4ac8:	683b      	ldr	r3, [r7, #0]
 80b4aca:	685a      	ldr	r2, [r3, #4]
 80b4acc:	687b      	ldr	r3, [r7, #4]
 80b4ace:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80b4ad0:	687b      	ldr	r3, [r7, #4]
 80b4ad2:	697a      	ldr	r2, [r7, #20]
 80b4ad4:	621a      	str	r2, [r3, #32]
}
 80b4ad6:	bf00      	nop
 80b4ad8:	371c      	adds	r7, #28
 80b4ada:	46bd      	mov	sp, r7
 80b4adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b4ae0:	4770      	bx	lr
 80b4ae2:	bf00      	nop
 80b4ae4:	40010000 	.word	0x40010000
 80b4ae8:	40010400 	.word	0x40010400

080b4aec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80b4aec:	b480      	push	{r7}
 80b4aee:	b087      	sub	sp, #28
 80b4af0:	af00      	add	r7, sp, #0
 80b4af2:	6078      	str	r0, [r7, #4]
 80b4af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80b4af6:	687b      	ldr	r3, [r7, #4]
 80b4af8:	6a1b      	ldr	r3, [r3, #32]
 80b4afa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80b4afe:	687b      	ldr	r3, [r7, #4]
 80b4b00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80b4b02:	687b      	ldr	r3, [r7, #4]
 80b4b04:	6a1b      	ldr	r3, [r3, #32]
 80b4b06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80b4b08:	687b      	ldr	r3, [r7, #4]
 80b4b0a:	685b      	ldr	r3, [r3, #4]
 80b4b0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80b4b0e:	687b      	ldr	r3, [r7, #4]
 80b4b10:	69db      	ldr	r3, [r3, #28]
 80b4b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80b4b14:	68fb      	ldr	r3, [r7, #12]
 80b4b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80b4b1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80b4b1c:	68fb      	ldr	r3, [r7, #12]
 80b4b1e:	f023 0303 	bic.w	r3, r3, #3
 80b4b22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80b4b24:	683b      	ldr	r3, [r7, #0]
 80b4b26:	681b      	ldr	r3, [r3, #0]
 80b4b28:	68fa      	ldr	r2, [r7, #12]
 80b4b2a:	4313      	orrs	r3, r2
 80b4b2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80b4b2e:	697b      	ldr	r3, [r7, #20]
 80b4b30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80b4b34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80b4b36:	683b      	ldr	r3, [r7, #0]
 80b4b38:	689b      	ldr	r3, [r3, #8]
 80b4b3a:	021b      	lsls	r3, r3, #8
 80b4b3c:	697a      	ldr	r2, [r7, #20]
 80b4b3e:	4313      	orrs	r3, r2
 80b4b40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80b4b42:	687b      	ldr	r3, [r7, #4]
 80b4b44:	4a21      	ldr	r2, [pc, #132]	; (80b4bcc <TIM_OC3_SetConfig+0xe0>)
 80b4b46:	4293      	cmp	r3, r2
 80b4b48:	d003      	beq.n	80b4b52 <TIM_OC3_SetConfig+0x66>
 80b4b4a:	687b      	ldr	r3, [r7, #4]
 80b4b4c:	4a20      	ldr	r2, [pc, #128]	; (80b4bd0 <TIM_OC3_SetConfig+0xe4>)
 80b4b4e:	4293      	cmp	r3, r2
 80b4b50:	d10d      	bne.n	80b4b6e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80b4b52:	697b      	ldr	r3, [r7, #20]
 80b4b54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80b4b58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80b4b5a:	683b      	ldr	r3, [r7, #0]
 80b4b5c:	68db      	ldr	r3, [r3, #12]
 80b4b5e:	021b      	lsls	r3, r3, #8
 80b4b60:	697a      	ldr	r2, [r7, #20]
 80b4b62:	4313      	orrs	r3, r2
 80b4b64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80b4b66:	697b      	ldr	r3, [r7, #20]
 80b4b68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80b4b6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80b4b6e:	687b      	ldr	r3, [r7, #4]
 80b4b70:	4a16      	ldr	r2, [pc, #88]	; (80b4bcc <TIM_OC3_SetConfig+0xe0>)
 80b4b72:	4293      	cmp	r3, r2
 80b4b74:	d003      	beq.n	80b4b7e <TIM_OC3_SetConfig+0x92>
 80b4b76:	687b      	ldr	r3, [r7, #4]
 80b4b78:	4a15      	ldr	r2, [pc, #84]	; (80b4bd0 <TIM_OC3_SetConfig+0xe4>)
 80b4b7a:	4293      	cmp	r3, r2
 80b4b7c:	d113      	bne.n	80b4ba6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80b4b7e:	693b      	ldr	r3, [r7, #16]
 80b4b80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80b4b84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80b4b86:	693b      	ldr	r3, [r7, #16]
 80b4b88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80b4b8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80b4b8e:	683b      	ldr	r3, [r7, #0]
 80b4b90:	695b      	ldr	r3, [r3, #20]
 80b4b92:	011b      	lsls	r3, r3, #4
 80b4b94:	693a      	ldr	r2, [r7, #16]
 80b4b96:	4313      	orrs	r3, r2
 80b4b98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80b4b9a:	683b      	ldr	r3, [r7, #0]
 80b4b9c:	699b      	ldr	r3, [r3, #24]
 80b4b9e:	011b      	lsls	r3, r3, #4
 80b4ba0:	693a      	ldr	r2, [r7, #16]
 80b4ba2:	4313      	orrs	r3, r2
 80b4ba4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80b4ba6:	687b      	ldr	r3, [r7, #4]
 80b4ba8:	693a      	ldr	r2, [r7, #16]
 80b4baa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80b4bac:	687b      	ldr	r3, [r7, #4]
 80b4bae:	68fa      	ldr	r2, [r7, #12]
 80b4bb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80b4bb2:	683b      	ldr	r3, [r7, #0]
 80b4bb4:	685a      	ldr	r2, [r3, #4]
 80b4bb6:	687b      	ldr	r3, [r7, #4]
 80b4bb8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80b4bba:	687b      	ldr	r3, [r7, #4]
 80b4bbc:	697a      	ldr	r2, [r7, #20]
 80b4bbe:	621a      	str	r2, [r3, #32]
}
 80b4bc0:	bf00      	nop
 80b4bc2:	371c      	adds	r7, #28
 80b4bc4:	46bd      	mov	sp, r7
 80b4bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b4bca:	4770      	bx	lr
 80b4bcc:	40010000 	.word	0x40010000
 80b4bd0:	40010400 	.word	0x40010400

080b4bd4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80b4bd4:	b480      	push	{r7}
 80b4bd6:	b087      	sub	sp, #28
 80b4bd8:	af00      	add	r7, sp, #0
 80b4bda:	6078      	str	r0, [r7, #4]
 80b4bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80b4bde:	687b      	ldr	r3, [r7, #4]
 80b4be0:	6a1b      	ldr	r3, [r3, #32]
 80b4be2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80b4be6:	687b      	ldr	r3, [r7, #4]
 80b4be8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80b4bea:	687b      	ldr	r3, [r7, #4]
 80b4bec:	6a1b      	ldr	r3, [r3, #32]
 80b4bee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80b4bf0:	687b      	ldr	r3, [r7, #4]
 80b4bf2:	685b      	ldr	r3, [r3, #4]
 80b4bf4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80b4bf6:	687b      	ldr	r3, [r7, #4]
 80b4bf8:	69db      	ldr	r3, [r3, #28]
 80b4bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80b4bfc:	68fb      	ldr	r3, [r7, #12]
 80b4bfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80b4c02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80b4c04:	68fb      	ldr	r3, [r7, #12]
 80b4c06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80b4c0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80b4c0c:	683b      	ldr	r3, [r7, #0]
 80b4c0e:	681b      	ldr	r3, [r3, #0]
 80b4c10:	021b      	lsls	r3, r3, #8
 80b4c12:	68fa      	ldr	r2, [r7, #12]
 80b4c14:	4313      	orrs	r3, r2
 80b4c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80b4c18:	693b      	ldr	r3, [r7, #16]
 80b4c1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80b4c1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80b4c20:	683b      	ldr	r3, [r7, #0]
 80b4c22:	689b      	ldr	r3, [r3, #8]
 80b4c24:	031b      	lsls	r3, r3, #12
 80b4c26:	693a      	ldr	r2, [r7, #16]
 80b4c28:	4313      	orrs	r3, r2
 80b4c2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80b4c2c:	687b      	ldr	r3, [r7, #4]
 80b4c2e:	4a12      	ldr	r2, [pc, #72]	; (80b4c78 <TIM_OC4_SetConfig+0xa4>)
 80b4c30:	4293      	cmp	r3, r2
 80b4c32:	d003      	beq.n	80b4c3c <TIM_OC4_SetConfig+0x68>
 80b4c34:	687b      	ldr	r3, [r7, #4]
 80b4c36:	4a11      	ldr	r2, [pc, #68]	; (80b4c7c <TIM_OC4_SetConfig+0xa8>)
 80b4c38:	4293      	cmp	r3, r2
 80b4c3a:	d109      	bne.n	80b4c50 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80b4c3c:	697b      	ldr	r3, [r7, #20]
 80b4c3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80b4c42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80b4c44:	683b      	ldr	r3, [r7, #0]
 80b4c46:	695b      	ldr	r3, [r3, #20]
 80b4c48:	019b      	lsls	r3, r3, #6
 80b4c4a:	697a      	ldr	r2, [r7, #20]
 80b4c4c:	4313      	orrs	r3, r2
 80b4c4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80b4c50:	687b      	ldr	r3, [r7, #4]
 80b4c52:	697a      	ldr	r2, [r7, #20]
 80b4c54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80b4c56:	687b      	ldr	r3, [r7, #4]
 80b4c58:	68fa      	ldr	r2, [r7, #12]
 80b4c5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80b4c5c:	683b      	ldr	r3, [r7, #0]
 80b4c5e:	685a      	ldr	r2, [r3, #4]
 80b4c60:	687b      	ldr	r3, [r7, #4]
 80b4c62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80b4c64:	687b      	ldr	r3, [r7, #4]
 80b4c66:	693a      	ldr	r2, [r7, #16]
 80b4c68:	621a      	str	r2, [r3, #32]
}
 80b4c6a:	bf00      	nop
 80b4c6c:	371c      	adds	r7, #28
 80b4c6e:	46bd      	mov	sp, r7
 80b4c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b4c74:	4770      	bx	lr
 80b4c76:	bf00      	nop
 80b4c78:	40010000 	.word	0x40010000
 80b4c7c:	40010400 	.word	0x40010400

080b4c80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80b4c80:	b480      	push	{r7}
 80b4c82:	b087      	sub	sp, #28
 80b4c84:	af00      	add	r7, sp, #0
 80b4c86:	60f8      	str	r0, [r7, #12]
 80b4c88:	60b9      	str	r1, [r7, #8]
 80b4c8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80b4c8c:	68fb      	ldr	r3, [r7, #12]
 80b4c8e:	6a1b      	ldr	r3, [r3, #32]
 80b4c90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80b4c92:	68fb      	ldr	r3, [r7, #12]
 80b4c94:	6a1b      	ldr	r3, [r3, #32]
 80b4c96:	f023 0201 	bic.w	r2, r3, #1
 80b4c9a:	68fb      	ldr	r3, [r7, #12]
 80b4c9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80b4c9e:	68fb      	ldr	r3, [r7, #12]
 80b4ca0:	699b      	ldr	r3, [r3, #24]
 80b4ca2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80b4ca4:	693b      	ldr	r3, [r7, #16]
 80b4ca6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80b4caa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80b4cac:	687b      	ldr	r3, [r7, #4]
 80b4cae:	011b      	lsls	r3, r3, #4
 80b4cb0:	693a      	ldr	r2, [r7, #16]
 80b4cb2:	4313      	orrs	r3, r2
 80b4cb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80b4cb6:	697b      	ldr	r3, [r7, #20]
 80b4cb8:	f023 030a 	bic.w	r3, r3, #10
 80b4cbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80b4cbe:	697a      	ldr	r2, [r7, #20]
 80b4cc0:	68bb      	ldr	r3, [r7, #8]
 80b4cc2:	4313      	orrs	r3, r2
 80b4cc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80b4cc6:	68fb      	ldr	r3, [r7, #12]
 80b4cc8:	693a      	ldr	r2, [r7, #16]
 80b4cca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80b4ccc:	68fb      	ldr	r3, [r7, #12]
 80b4cce:	697a      	ldr	r2, [r7, #20]
 80b4cd0:	621a      	str	r2, [r3, #32]
}
 80b4cd2:	bf00      	nop
 80b4cd4:	371c      	adds	r7, #28
 80b4cd6:	46bd      	mov	sp, r7
 80b4cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b4cdc:	4770      	bx	lr

080b4cde <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80b4cde:	b480      	push	{r7}
 80b4ce0:	b087      	sub	sp, #28
 80b4ce2:	af00      	add	r7, sp, #0
 80b4ce4:	60f8      	str	r0, [r7, #12]
 80b4ce6:	60b9      	str	r1, [r7, #8]
 80b4ce8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80b4cea:	68fb      	ldr	r3, [r7, #12]
 80b4cec:	6a1b      	ldr	r3, [r3, #32]
 80b4cee:	f023 0210 	bic.w	r2, r3, #16
 80b4cf2:	68fb      	ldr	r3, [r7, #12]
 80b4cf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80b4cf6:	68fb      	ldr	r3, [r7, #12]
 80b4cf8:	699b      	ldr	r3, [r3, #24]
 80b4cfa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80b4cfc:	68fb      	ldr	r3, [r7, #12]
 80b4cfe:	6a1b      	ldr	r3, [r3, #32]
 80b4d00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80b4d02:	697b      	ldr	r3, [r7, #20]
 80b4d04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80b4d08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80b4d0a:	687b      	ldr	r3, [r7, #4]
 80b4d0c:	031b      	lsls	r3, r3, #12
 80b4d0e:	697a      	ldr	r2, [r7, #20]
 80b4d10:	4313      	orrs	r3, r2
 80b4d12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80b4d14:	693b      	ldr	r3, [r7, #16]
 80b4d16:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80b4d1a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80b4d1c:	68bb      	ldr	r3, [r7, #8]
 80b4d1e:	011b      	lsls	r3, r3, #4
 80b4d20:	693a      	ldr	r2, [r7, #16]
 80b4d22:	4313      	orrs	r3, r2
 80b4d24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80b4d26:	68fb      	ldr	r3, [r7, #12]
 80b4d28:	697a      	ldr	r2, [r7, #20]
 80b4d2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80b4d2c:	68fb      	ldr	r3, [r7, #12]
 80b4d2e:	693a      	ldr	r2, [r7, #16]
 80b4d30:	621a      	str	r2, [r3, #32]
}
 80b4d32:	bf00      	nop
 80b4d34:	371c      	adds	r7, #28
 80b4d36:	46bd      	mov	sp, r7
 80b4d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b4d3c:	4770      	bx	lr

080b4d3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80b4d3e:	b480      	push	{r7}
 80b4d40:	b085      	sub	sp, #20
 80b4d42:	af00      	add	r7, sp, #0
 80b4d44:	6078      	str	r0, [r7, #4]
 80b4d46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80b4d48:	687b      	ldr	r3, [r7, #4]
 80b4d4a:	689b      	ldr	r3, [r3, #8]
 80b4d4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80b4d4e:	68fb      	ldr	r3, [r7, #12]
 80b4d50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80b4d54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80b4d56:	683a      	ldr	r2, [r7, #0]
 80b4d58:	68fb      	ldr	r3, [r7, #12]
 80b4d5a:	4313      	orrs	r3, r2
 80b4d5c:	f043 0307 	orr.w	r3, r3, #7
 80b4d60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80b4d62:	687b      	ldr	r3, [r7, #4]
 80b4d64:	68fa      	ldr	r2, [r7, #12]
 80b4d66:	609a      	str	r2, [r3, #8]
}
 80b4d68:	bf00      	nop
 80b4d6a:	3714      	adds	r7, #20
 80b4d6c:	46bd      	mov	sp, r7
 80b4d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b4d72:	4770      	bx	lr

080b4d74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80b4d74:	b480      	push	{r7}
 80b4d76:	b087      	sub	sp, #28
 80b4d78:	af00      	add	r7, sp, #0
 80b4d7a:	60f8      	str	r0, [r7, #12]
 80b4d7c:	60b9      	str	r1, [r7, #8]
 80b4d7e:	607a      	str	r2, [r7, #4]
 80b4d80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80b4d82:	68fb      	ldr	r3, [r7, #12]
 80b4d84:	689b      	ldr	r3, [r3, #8]
 80b4d86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80b4d88:	697b      	ldr	r3, [r7, #20]
 80b4d8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80b4d8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80b4d90:	683b      	ldr	r3, [r7, #0]
 80b4d92:	021a      	lsls	r2, r3, #8
 80b4d94:	687b      	ldr	r3, [r7, #4]
 80b4d96:	431a      	orrs	r2, r3
 80b4d98:	68bb      	ldr	r3, [r7, #8]
 80b4d9a:	4313      	orrs	r3, r2
 80b4d9c:	697a      	ldr	r2, [r7, #20]
 80b4d9e:	4313      	orrs	r3, r2
 80b4da0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80b4da2:	68fb      	ldr	r3, [r7, #12]
 80b4da4:	697a      	ldr	r2, [r7, #20]
 80b4da6:	609a      	str	r2, [r3, #8]
}
 80b4da8:	bf00      	nop
 80b4daa:	371c      	adds	r7, #28
 80b4dac:	46bd      	mov	sp, r7
 80b4dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b4db2:	4770      	bx	lr

080b4db4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80b4db4:	b480      	push	{r7}
 80b4db6:	b085      	sub	sp, #20
 80b4db8:	af00      	add	r7, sp, #0
 80b4dba:	6078      	str	r0, [r7, #4]
 80b4dbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80b4dbe:	687b      	ldr	r3, [r7, #4]
 80b4dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80b4dc4:	2b01      	cmp	r3, #1
 80b4dc6:	d101      	bne.n	80b4dcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80b4dc8:	2302      	movs	r3, #2
 80b4dca:	e05a      	b.n	80b4e82 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80b4dcc:	687b      	ldr	r3, [r7, #4]
 80b4dce:	2201      	movs	r2, #1
 80b4dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80b4dd4:	687b      	ldr	r3, [r7, #4]
 80b4dd6:	2202      	movs	r2, #2
 80b4dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80b4ddc:	687b      	ldr	r3, [r7, #4]
 80b4dde:	681b      	ldr	r3, [r3, #0]
 80b4de0:	685b      	ldr	r3, [r3, #4]
 80b4de2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80b4de4:	687b      	ldr	r3, [r7, #4]
 80b4de6:	681b      	ldr	r3, [r3, #0]
 80b4de8:	689b      	ldr	r3, [r3, #8]
 80b4dea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80b4dec:	68fb      	ldr	r3, [r7, #12]
 80b4dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80b4df2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80b4df4:	683b      	ldr	r3, [r7, #0]
 80b4df6:	681b      	ldr	r3, [r3, #0]
 80b4df8:	68fa      	ldr	r2, [r7, #12]
 80b4dfa:	4313      	orrs	r3, r2
 80b4dfc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80b4dfe:	687b      	ldr	r3, [r7, #4]
 80b4e00:	681b      	ldr	r3, [r3, #0]
 80b4e02:	68fa      	ldr	r2, [r7, #12]
 80b4e04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80b4e06:	687b      	ldr	r3, [r7, #4]
 80b4e08:	681b      	ldr	r3, [r3, #0]
 80b4e0a:	4a21      	ldr	r2, [pc, #132]	; (80b4e90 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80b4e0c:	4293      	cmp	r3, r2
 80b4e0e:	d022      	beq.n	80b4e56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80b4e10:	687b      	ldr	r3, [r7, #4]
 80b4e12:	681b      	ldr	r3, [r3, #0]
 80b4e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80b4e18:	d01d      	beq.n	80b4e56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80b4e1a:	687b      	ldr	r3, [r7, #4]
 80b4e1c:	681b      	ldr	r3, [r3, #0]
 80b4e1e:	4a1d      	ldr	r2, [pc, #116]	; (80b4e94 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80b4e20:	4293      	cmp	r3, r2
 80b4e22:	d018      	beq.n	80b4e56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80b4e24:	687b      	ldr	r3, [r7, #4]
 80b4e26:	681b      	ldr	r3, [r3, #0]
 80b4e28:	4a1b      	ldr	r2, [pc, #108]	; (80b4e98 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80b4e2a:	4293      	cmp	r3, r2
 80b4e2c:	d013      	beq.n	80b4e56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80b4e2e:	687b      	ldr	r3, [r7, #4]
 80b4e30:	681b      	ldr	r3, [r3, #0]
 80b4e32:	4a1a      	ldr	r2, [pc, #104]	; (80b4e9c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80b4e34:	4293      	cmp	r3, r2
 80b4e36:	d00e      	beq.n	80b4e56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80b4e38:	687b      	ldr	r3, [r7, #4]
 80b4e3a:	681b      	ldr	r3, [r3, #0]
 80b4e3c:	4a18      	ldr	r2, [pc, #96]	; (80b4ea0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80b4e3e:	4293      	cmp	r3, r2
 80b4e40:	d009      	beq.n	80b4e56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80b4e42:	687b      	ldr	r3, [r7, #4]
 80b4e44:	681b      	ldr	r3, [r3, #0]
 80b4e46:	4a17      	ldr	r2, [pc, #92]	; (80b4ea4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80b4e48:	4293      	cmp	r3, r2
 80b4e4a:	d004      	beq.n	80b4e56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80b4e4c:	687b      	ldr	r3, [r7, #4]
 80b4e4e:	681b      	ldr	r3, [r3, #0]
 80b4e50:	4a15      	ldr	r2, [pc, #84]	; (80b4ea8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80b4e52:	4293      	cmp	r3, r2
 80b4e54:	d10c      	bne.n	80b4e70 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80b4e56:	68bb      	ldr	r3, [r7, #8]
 80b4e58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80b4e5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80b4e5e:	683b      	ldr	r3, [r7, #0]
 80b4e60:	685b      	ldr	r3, [r3, #4]
 80b4e62:	68ba      	ldr	r2, [r7, #8]
 80b4e64:	4313      	orrs	r3, r2
 80b4e66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80b4e68:	687b      	ldr	r3, [r7, #4]
 80b4e6a:	681b      	ldr	r3, [r3, #0]
 80b4e6c:	68ba      	ldr	r2, [r7, #8]
 80b4e6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80b4e70:	687b      	ldr	r3, [r7, #4]
 80b4e72:	2201      	movs	r2, #1
 80b4e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80b4e78:	687b      	ldr	r3, [r7, #4]
 80b4e7a:	2200      	movs	r2, #0
 80b4e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80b4e80:	2300      	movs	r3, #0
}
 80b4e82:	4618      	mov	r0, r3
 80b4e84:	3714      	adds	r7, #20
 80b4e86:	46bd      	mov	sp, r7
 80b4e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b4e8c:	4770      	bx	lr
 80b4e8e:	bf00      	nop
 80b4e90:	40010000 	.word	0x40010000
 80b4e94:	40000400 	.word	0x40000400
 80b4e98:	40000800 	.word	0x40000800
 80b4e9c:	40000c00 	.word	0x40000c00
 80b4ea0:	40010400 	.word	0x40010400
 80b4ea4:	40014000 	.word	0x40014000
 80b4ea8:	40001800 	.word	0x40001800

080b4eac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80b4eac:	b480      	push	{r7}
 80b4eae:	b085      	sub	sp, #20
 80b4eb0:	af00      	add	r7, sp, #0
 80b4eb2:	6078      	str	r0, [r7, #4]
 80b4eb4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80b4eb6:	2300      	movs	r3, #0
 80b4eb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80b4eba:	687b      	ldr	r3, [r7, #4]
 80b4ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80b4ec0:	2b01      	cmp	r3, #1
 80b4ec2:	d101      	bne.n	80b4ec8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80b4ec4:	2302      	movs	r3, #2
 80b4ec6:	e03d      	b.n	80b4f44 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80b4ec8:	687b      	ldr	r3, [r7, #4]
 80b4eca:	2201      	movs	r2, #1
 80b4ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80b4ed0:	68fb      	ldr	r3, [r7, #12]
 80b4ed2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80b4ed6:	683b      	ldr	r3, [r7, #0]
 80b4ed8:	68db      	ldr	r3, [r3, #12]
 80b4eda:	4313      	orrs	r3, r2
 80b4edc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80b4ede:	68fb      	ldr	r3, [r7, #12]
 80b4ee0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80b4ee4:	683b      	ldr	r3, [r7, #0]
 80b4ee6:	689b      	ldr	r3, [r3, #8]
 80b4ee8:	4313      	orrs	r3, r2
 80b4eea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80b4eec:	68fb      	ldr	r3, [r7, #12]
 80b4eee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80b4ef2:	683b      	ldr	r3, [r7, #0]
 80b4ef4:	685b      	ldr	r3, [r3, #4]
 80b4ef6:	4313      	orrs	r3, r2
 80b4ef8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80b4efa:	68fb      	ldr	r3, [r7, #12]
 80b4efc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80b4f00:	683b      	ldr	r3, [r7, #0]
 80b4f02:	681b      	ldr	r3, [r3, #0]
 80b4f04:	4313      	orrs	r3, r2
 80b4f06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80b4f08:	68fb      	ldr	r3, [r7, #12]
 80b4f0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80b4f0e:	683b      	ldr	r3, [r7, #0]
 80b4f10:	691b      	ldr	r3, [r3, #16]
 80b4f12:	4313      	orrs	r3, r2
 80b4f14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80b4f16:	68fb      	ldr	r3, [r7, #12]
 80b4f18:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80b4f1c:	683b      	ldr	r3, [r7, #0]
 80b4f1e:	695b      	ldr	r3, [r3, #20]
 80b4f20:	4313      	orrs	r3, r2
 80b4f22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80b4f24:	68fb      	ldr	r3, [r7, #12]
 80b4f26:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80b4f2a:	683b      	ldr	r3, [r7, #0]
 80b4f2c:	69db      	ldr	r3, [r3, #28]
 80b4f2e:	4313      	orrs	r3, r2
 80b4f30:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80b4f32:	687b      	ldr	r3, [r7, #4]
 80b4f34:	681b      	ldr	r3, [r3, #0]
 80b4f36:	68fa      	ldr	r2, [r7, #12]
 80b4f38:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80b4f3a:	687b      	ldr	r3, [r7, #4]
 80b4f3c:	2200      	movs	r2, #0
 80b4f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80b4f42:	2300      	movs	r3, #0
}
 80b4f44:	4618      	mov	r0, r3
 80b4f46:	3714      	adds	r7, #20
 80b4f48:	46bd      	mov	sp, r7
 80b4f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b4f4e:	4770      	bx	lr

080b4f50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80b4f50:	b480      	push	{r7}
 80b4f52:	b083      	sub	sp, #12
 80b4f54:	af00      	add	r7, sp, #0
 80b4f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80b4f58:	bf00      	nop
 80b4f5a:	370c      	adds	r7, #12
 80b4f5c:	46bd      	mov	sp, r7
 80b4f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b4f62:	4770      	bx	lr

080b4f64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80b4f64:	b480      	push	{r7}
 80b4f66:	b083      	sub	sp, #12
 80b4f68:	af00      	add	r7, sp, #0
 80b4f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80b4f6c:	bf00      	nop
 80b4f6e:	370c      	adds	r7, #12
 80b4f70:	46bd      	mov	sp, r7
 80b4f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b4f76:	4770      	bx	lr

080b4f78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80b4f78:	b580      	push	{r7, lr}
 80b4f7a:	b082      	sub	sp, #8
 80b4f7c:	af00      	add	r7, sp, #0
 80b4f7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80b4f80:	687b      	ldr	r3, [r7, #4]
 80b4f82:	2b00      	cmp	r3, #0
 80b4f84:	d101      	bne.n	80b4f8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80b4f86:	2301      	movs	r3, #1
 80b4f88:	e03f      	b.n	80b500a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80b4f8a:	687b      	ldr	r3, [r7, #4]
 80b4f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80b4f90:	b2db      	uxtb	r3, r3
 80b4f92:	2b00      	cmp	r3, #0
 80b4f94:	d106      	bne.n	80b4fa4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80b4f96:	687b      	ldr	r3, [r7, #4]
 80b4f98:	2200      	movs	r2, #0
 80b4f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80b4f9e:	6878      	ldr	r0, [r7, #4]
 80b4fa0:	f7f8 ff74 	bl	80ade8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80b4fa4:	687b      	ldr	r3, [r7, #4]
 80b4fa6:	2224      	movs	r2, #36	; 0x24
 80b4fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80b4fac:	687b      	ldr	r3, [r7, #4]
 80b4fae:	681b      	ldr	r3, [r3, #0]
 80b4fb0:	68da      	ldr	r2, [r3, #12]
 80b4fb2:	687b      	ldr	r3, [r7, #4]
 80b4fb4:	681b      	ldr	r3, [r3, #0]
 80b4fb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80b4fba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80b4fbc:	6878      	ldr	r0, [r7, #4]
 80b4fbe:	f000 fd75 	bl	80b5aac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80b4fc2:	687b      	ldr	r3, [r7, #4]
 80b4fc4:	681b      	ldr	r3, [r3, #0]
 80b4fc6:	691a      	ldr	r2, [r3, #16]
 80b4fc8:	687b      	ldr	r3, [r7, #4]
 80b4fca:	681b      	ldr	r3, [r3, #0]
 80b4fcc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80b4fd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80b4fd2:	687b      	ldr	r3, [r7, #4]
 80b4fd4:	681b      	ldr	r3, [r3, #0]
 80b4fd6:	695a      	ldr	r2, [r3, #20]
 80b4fd8:	687b      	ldr	r3, [r7, #4]
 80b4fda:	681b      	ldr	r3, [r3, #0]
 80b4fdc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80b4fe0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80b4fe2:	687b      	ldr	r3, [r7, #4]
 80b4fe4:	681b      	ldr	r3, [r3, #0]
 80b4fe6:	68da      	ldr	r2, [r3, #12]
 80b4fe8:	687b      	ldr	r3, [r7, #4]
 80b4fea:	681b      	ldr	r3, [r3, #0]
 80b4fec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80b4ff0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80b4ff2:	687b      	ldr	r3, [r7, #4]
 80b4ff4:	2200      	movs	r2, #0
 80b4ff6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80b4ff8:	687b      	ldr	r3, [r7, #4]
 80b4ffa:	2220      	movs	r2, #32
 80b4ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80b5000:	687b      	ldr	r3, [r7, #4]
 80b5002:	2220      	movs	r2, #32
 80b5004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80b5008:	2300      	movs	r3, #0
}
 80b500a:	4618      	mov	r0, r3
 80b500c:	3708      	adds	r7, #8
 80b500e:	46bd      	mov	sp, r7
 80b5010:	bd80      	pop	{r7, pc}

080b5012 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80b5012:	b580      	push	{r7, lr}
 80b5014:	b08a      	sub	sp, #40	; 0x28
 80b5016:	af02      	add	r7, sp, #8
 80b5018:	60f8      	str	r0, [r7, #12]
 80b501a:	60b9      	str	r1, [r7, #8]
 80b501c:	603b      	str	r3, [r7, #0]
 80b501e:	4613      	mov	r3, r2
 80b5020:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80b5022:	2300      	movs	r3, #0
 80b5024:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80b5026:	68fb      	ldr	r3, [r7, #12]
 80b5028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80b502c:	b2db      	uxtb	r3, r3
 80b502e:	2b20      	cmp	r3, #32
 80b5030:	d17c      	bne.n	80b512c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80b5032:	68bb      	ldr	r3, [r7, #8]
 80b5034:	2b00      	cmp	r3, #0
 80b5036:	d002      	beq.n	80b503e <HAL_UART_Transmit+0x2c>
 80b5038:	88fb      	ldrh	r3, [r7, #6]
 80b503a:	2b00      	cmp	r3, #0
 80b503c:	d101      	bne.n	80b5042 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80b503e:	2301      	movs	r3, #1
 80b5040:	e075      	b.n	80b512e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80b5042:	68fb      	ldr	r3, [r7, #12]
 80b5044:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80b5048:	2b01      	cmp	r3, #1
 80b504a:	d101      	bne.n	80b5050 <HAL_UART_Transmit+0x3e>
 80b504c:	2302      	movs	r3, #2
 80b504e:	e06e      	b.n	80b512e <HAL_UART_Transmit+0x11c>
 80b5050:	68fb      	ldr	r3, [r7, #12]
 80b5052:	2201      	movs	r2, #1
 80b5054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80b5058:	68fb      	ldr	r3, [r7, #12]
 80b505a:	2200      	movs	r2, #0
 80b505c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80b505e:	68fb      	ldr	r3, [r7, #12]
 80b5060:	2221      	movs	r2, #33	; 0x21
 80b5062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80b5066:	f7fa fae5 	bl	80af634 <HAL_GetTick>
 80b506a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80b506c:	68fb      	ldr	r3, [r7, #12]
 80b506e:	88fa      	ldrh	r2, [r7, #6]
 80b5070:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80b5072:	68fb      	ldr	r3, [r7, #12]
 80b5074:	88fa      	ldrh	r2, [r7, #6]
 80b5076:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80b5078:	68fb      	ldr	r3, [r7, #12]
 80b507a:	689b      	ldr	r3, [r3, #8]
 80b507c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80b5080:	d108      	bne.n	80b5094 <HAL_UART_Transmit+0x82>
 80b5082:	68fb      	ldr	r3, [r7, #12]
 80b5084:	691b      	ldr	r3, [r3, #16]
 80b5086:	2b00      	cmp	r3, #0
 80b5088:	d104      	bne.n	80b5094 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80b508a:	2300      	movs	r3, #0
 80b508c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80b508e:	68bb      	ldr	r3, [r7, #8]
 80b5090:	61bb      	str	r3, [r7, #24]
 80b5092:	e003      	b.n	80b509c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80b5094:	68bb      	ldr	r3, [r7, #8]
 80b5096:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80b5098:	2300      	movs	r3, #0
 80b509a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80b509c:	68fb      	ldr	r3, [r7, #12]
 80b509e:	2200      	movs	r2, #0
 80b50a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80b50a4:	e02a      	b.n	80b50fc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80b50a6:	683b      	ldr	r3, [r7, #0]
 80b50a8:	9300      	str	r3, [sp, #0]
 80b50aa:	697b      	ldr	r3, [r7, #20]
 80b50ac:	2200      	movs	r2, #0
 80b50ae:	2180      	movs	r1, #128	; 0x80
 80b50b0:	68f8      	ldr	r0, [r7, #12]
 80b50b2:	f000 faf7 	bl	80b56a4 <UART_WaitOnFlagUntilTimeout>
 80b50b6:	4603      	mov	r3, r0
 80b50b8:	2b00      	cmp	r3, #0
 80b50ba:	d001      	beq.n	80b50c0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80b50bc:	2303      	movs	r3, #3
 80b50be:	e036      	b.n	80b512e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80b50c0:	69fb      	ldr	r3, [r7, #28]
 80b50c2:	2b00      	cmp	r3, #0
 80b50c4:	d10b      	bne.n	80b50de <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80b50c6:	69bb      	ldr	r3, [r7, #24]
 80b50c8:	881b      	ldrh	r3, [r3, #0]
 80b50ca:	461a      	mov	r2, r3
 80b50cc:	68fb      	ldr	r3, [r7, #12]
 80b50ce:	681b      	ldr	r3, [r3, #0]
 80b50d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80b50d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80b50d6:	69bb      	ldr	r3, [r7, #24]
 80b50d8:	3302      	adds	r3, #2
 80b50da:	61bb      	str	r3, [r7, #24]
 80b50dc:	e007      	b.n	80b50ee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80b50de:	69fb      	ldr	r3, [r7, #28]
 80b50e0:	781a      	ldrb	r2, [r3, #0]
 80b50e2:	68fb      	ldr	r3, [r7, #12]
 80b50e4:	681b      	ldr	r3, [r3, #0]
 80b50e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80b50e8:	69fb      	ldr	r3, [r7, #28]
 80b50ea:	3301      	adds	r3, #1
 80b50ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80b50ee:	68fb      	ldr	r3, [r7, #12]
 80b50f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80b50f2:	b29b      	uxth	r3, r3
 80b50f4:	3b01      	subs	r3, #1
 80b50f6:	b29a      	uxth	r2, r3
 80b50f8:	68fb      	ldr	r3, [r7, #12]
 80b50fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80b50fc:	68fb      	ldr	r3, [r7, #12]
 80b50fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80b5100:	b29b      	uxth	r3, r3
 80b5102:	2b00      	cmp	r3, #0
 80b5104:	d1cf      	bne.n	80b50a6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80b5106:	683b      	ldr	r3, [r7, #0]
 80b5108:	9300      	str	r3, [sp, #0]
 80b510a:	697b      	ldr	r3, [r7, #20]
 80b510c:	2200      	movs	r2, #0
 80b510e:	2140      	movs	r1, #64	; 0x40
 80b5110:	68f8      	ldr	r0, [r7, #12]
 80b5112:	f000 fac7 	bl	80b56a4 <UART_WaitOnFlagUntilTimeout>
 80b5116:	4603      	mov	r3, r0
 80b5118:	2b00      	cmp	r3, #0
 80b511a:	d001      	beq.n	80b5120 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80b511c:	2303      	movs	r3, #3
 80b511e:	e006      	b.n	80b512e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80b5120:	68fb      	ldr	r3, [r7, #12]
 80b5122:	2220      	movs	r2, #32
 80b5124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80b5128:	2300      	movs	r3, #0
 80b512a:	e000      	b.n	80b512e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80b512c:	2302      	movs	r3, #2
  }
}
 80b512e:	4618      	mov	r0, r3
 80b5130:	3720      	adds	r7, #32
 80b5132:	46bd      	mov	sp, r7
 80b5134:	bd80      	pop	{r7, pc}

080b5136 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80b5136:	b580      	push	{r7, lr}
 80b5138:	b084      	sub	sp, #16
 80b513a:	af00      	add	r7, sp, #0
 80b513c:	60f8      	str	r0, [r7, #12]
 80b513e:	60b9      	str	r1, [r7, #8]
 80b5140:	4613      	mov	r3, r2
 80b5142:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80b5144:	68fb      	ldr	r3, [r7, #12]
 80b5146:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80b514a:	b2db      	uxtb	r3, r3
 80b514c:	2b20      	cmp	r3, #32
 80b514e:	d11d      	bne.n	80b518c <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80b5150:	68bb      	ldr	r3, [r7, #8]
 80b5152:	2b00      	cmp	r3, #0
 80b5154:	d002      	beq.n	80b515c <HAL_UART_Receive_DMA+0x26>
 80b5156:	88fb      	ldrh	r3, [r7, #6]
 80b5158:	2b00      	cmp	r3, #0
 80b515a:	d101      	bne.n	80b5160 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80b515c:	2301      	movs	r3, #1
 80b515e:	e016      	b.n	80b518e <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80b5160:	68fb      	ldr	r3, [r7, #12]
 80b5162:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80b5166:	2b01      	cmp	r3, #1
 80b5168:	d101      	bne.n	80b516e <HAL_UART_Receive_DMA+0x38>
 80b516a:	2302      	movs	r3, #2
 80b516c:	e00f      	b.n	80b518e <HAL_UART_Receive_DMA+0x58>
 80b516e:	68fb      	ldr	r3, [r7, #12]
 80b5170:	2201      	movs	r2, #1
 80b5172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80b5176:	68fb      	ldr	r3, [r7, #12]
 80b5178:	2200      	movs	r2, #0
 80b517a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 80b517c:	88fb      	ldrh	r3, [r7, #6]
 80b517e:	461a      	mov	r2, r3
 80b5180:	68b9      	ldr	r1, [r7, #8]
 80b5182:	68f8      	ldr	r0, [r7, #12]
 80b5184:	f000 fad8 	bl	80b5738 <UART_Start_Receive_DMA>
 80b5188:	4603      	mov	r3, r0
 80b518a:	e000      	b.n	80b518e <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80b518c:	2302      	movs	r3, #2
  }
}
 80b518e:	4618      	mov	r0, r3
 80b5190:	3710      	adds	r7, #16
 80b5192:	46bd      	mov	sp, r7
 80b5194:	bd80      	pop	{r7, pc}
	...

080b5198 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80b5198:	b580      	push	{r7, lr}
 80b519a:	b08a      	sub	sp, #40	; 0x28
 80b519c:	af00      	add	r7, sp, #0
 80b519e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80b51a0:	687b      	ldr	r3, [r7, #4]
 80b51a2:	681b      	ldr	r3, [r3, #0]
 80b51a4:	681b      	ldr	r3, [r3, #0]
 80b51a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80b51a8:	687b      	ldr	r3, [r7, #4]
 80b51aa:	681b      	ldr	r3, [r3, #0]
 80b51ac:	68db      	ldr	r3, [r3, #12]
 80b51ae:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80b51b0:	687b      	ldr	r3, [r7, #4]
 80b51b2:	681b      	ldr	r3, [r3, #0]
 80b51b4:	695b      	ldr	r3, [r3, #20]
 80b51b6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80b51b8:	2300      	movs	r3, #0
 80b51ba:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80b51bc:	2300      	movs	r3, #0
 80b51be:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80b51c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b51c2:	f003 030f 	and.w	r3, r3, #15
 80b51c6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80b51c8:	69bb      	ldr	r3, [r7, #24]
 80b51ca:	2b00      	cmp	r3, #0
 80b51cc:	d10d      	bne.n	80b51ea <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80b51ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b51d0:	f003 0320 	and.w	r3, r3, #32
 80b51d4:	2b00      	cmp	r3, #0
 80b51d6:	d008      	beq.n	80b51ea <HAL_UART_IRQHandler+0x52>
 80b51d8:	6a3b      	ldr	r3, [r7, #32]
 80b51da:	f003 0320 	and.w	r3, r3, #32
 80b51de:	2b00      	cmp	r3, #0
 80b51e0:	d003      	beq.n	80b51ea <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80b51e2:	6878      	ldr	r0, [r7, #4]
 80b51e4:	f000 fbcb 	bl	80b597e <UART_Receive_IT>
      return;
 80b51e8:	e17c      	b.n	80b54e4 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80b51ea:	69bb      	ldr	r3, [r7, #24]
 80b51ec:	2b00      	cmp	r3, #0
 80b51ee:	f000 80b1 	beq.w	80b5354 <HAL_UART_IRQHandler+0x1bc>
 80b51f2:	69fb      	ldr	r3, [r7, #28]
 80b51f4:	f003 0301 	and.w	r3, r3, #1
 80b51f8:	2b00      	cmp	r3, #0
 80b51fa:	d105      	bne.n	80b5208 <HAL_UART_IRQHandler+0x70>
 80b51fc:	6a3b      	ldr	r3, [r7, #32]
 80b51fe:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80b5202:	2b00      	cmp	r3, #0
 80b5204:	f000 80a6 	beq.w	80b5354 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80b5208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b520a:	f003 0301 	and.w	r3, r3, #1
 80b520e:	2b00      	cmp	r3, #0
 80b5210:	d00a      	beq.n	80b5228 <HAL_UART_IRQHandler+0x90>
 80b5212:	6a3b      	ldr	r3, [r7, #32]
 80b5214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80b5218:	2b00      	cmp	r3, #0
 80b521a:	d005      	beq.n	80b5228 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80b521c:	687b      	ldr	r3, [r7, #4]
 80b521e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80b5220:	f043 0201 	orr.w	r2, r3, #1
 80b5224:	687b      	ldr	r3, [r7, #4]
 80b5226:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80b5228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b522a:	f003 0304 	and.w	r3, r3, #4
 80b522e:	2b00      	cmp	r3, #0
 80b5230:	d00a      	beq.n	80b5248 <HAL_UART_IRQHandler+0xb0>
 80b5232:	69fb      	ldr	r3, [r7, #28]
 80b5234:	f003 0301 	and.w	r3, r3, #1
 80b5238:	2b00      	cmp	r3, #0
 80b523a:	d005      	beq.n	80b5248 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80b523c:	687b      	ldr	r3, [r7, #4]
 80b523e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80b5240:	f043 0202 	orr.w	r2, r3, #2
 80b5244:	687b      	ldr	r3, [r7, #4]
 80b5246:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80b5248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b524a:	f003 0302 	and.w	r3, r3, #2
 80b524e:	2b00      	cmp	r3, #0
 80b5250:	d00a      	beq.n	80b5268 <HAL_UART_IRQHandler+0xd0>
 80b5252:	69fb      	ldr	r3, [r7, #28]
 80b5254:	f003 0301 	and.w	r3, r3, #1
 80b5258:	2b00      	cmp	r3, #0
 80b525a:	d005      	beq.n	80b5268 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80b525c:	687b      	ldr	r3, [r7, #4]
 80b525e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80b5260:	f043 0204 	orr.w	r2, r3, #4
 80b5264:	687b      	ldr	r3, [r7, #4]
 80b5266:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80b5268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b526a:	f003 0308 	and.w	r3, r3, #8
 80b526e:	2b00      	cmp	r3, #0
 80b5270:	d00f      	beq.n	80b5292 <HAL_UART_IRQHandler+0xfa>
 80b5272:	6a3b      	ldr	r3, [r7, #32]
 80b5274:	f003 0320 	and.w	r3, r3, #32
 80b5278:	2b00      	cmp	r3, #0
 80b527a:	d104      	bne.n	80b5286 <HAL_UART_IRQHandler+0xee>
 80b527c:	69fb      	ldr	r3, [r7, #28]
 80b527e:	f003 0301 	and.w	r3, r3, #1
 80b5282:	2b00      	cmp	r3, #0
 80b5284:	d005      	beq.n	80b5292 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80b5286:	687b      	ldr	r3, [r7, #4]
 80b5288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80b528a:	f043 0208 	orr.w	r2, r3, #8
 80b528e:	687b      	ldr	r3, [r7, #4]
 80b5290:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80b5292:	687b      	ldr	r3, [r7, #4]
 80b5294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80b5296:	2b00      	cmp	r3, #0
 80b5298:	f000 811f 	beq.w	80b54da <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80b529c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b529e:	f003 0320 	and.w	r3, r3, #32
 80b52a2:	2b00      	cmp	r3, #0
 80b52a4:	d007      	beq.n	80b52b6 <HAL_UART_IRQHandler+0x11e>
 80b52a6:	6a3b      	ldr	r3, [r7, #32]
 80b52a8:	f003 0320 	and.w	r3, r3, #32
 80b52ac:	2b00      	cmp	r3, #0
 80b52ae:	d002      	beq.n	80b52b6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80b52b0:	6878      	ldr	r0, [r7, #4]
 80b52b2:	f000 fb64 	bl	80b597e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80b52b6:	687b      	ldr	r3, [r7, #4]
 80b52b8:	681b      	ldr	r3, [r3, #0]
 80b52ba:	695b      	ldr	r3, [r3, #20]
 80b52bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80b52c0:	2b40      	cmp	r3, #64	; 0x40
 80b52c2:	bf0c      	ite	eq
 80b52c4:	2301      	moveq	r3, #1
 80b52c6:	2300      	movne	r3, #0
 80b52c8:	b2db      	uxtb	r3, r3
 80b52ca:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80b52cc:	687b      	ldr	r3, [r7, #4]
 80b52ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80b52d0:	f003 0308 	and.w	r3, r3, #8
 80b52d4:	2b00      	cmp	r3, #0
 80b52d6:	d102      	bne.n	80b52de <HAL_UART_IRQHandler+0x146>
 80b52d8:	697b      	ldr	r3, [r7, #20]
 80b52da:	2b00      	cmp	r3, #0
 80b52dc:	d031      	beq.n	80b5342 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80b52de:	6878      	ldr	r0, [r7, #4]
 80b52e0:	f000 faa4 	bl	80b582c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80b52e4:	687b      	ldr	r3, [r7, #4]
 80b52e6:	681b      	ldr	r3, [r3, #0]
 80b52e8:	695b      	ldr	r3, [r3, #20]
 80b52ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80b52ee:	2b40      	cmp	r3, #64	; 0x40
 80b52f0:	d123      	bne.n	80b533a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80b52f2:	687b      	ldr	r3, [r7, #4]
 80b52f4:	681b      	ldr	r3, [r3, #0]
 80b52f6:	695a      	ldr	r2, [r3, #20]
 80b52f8:	687b      	ldr	r3, [r7, #4]
 80b52fa:	681b      	ldr	r3, [r3, #0]
 80b52fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80b5300:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80b5302:	687b      	ldr	r3, [r7, #4]
 80b5304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80b5306:	2b00      	cmp	r3, #0
 80b5308:	d013      	beq.n	80b5332 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80b530a:	687b      	ldr	r3, [r7, #4]
 80b530c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80b530e:	4a77      	ldr	r2, [pc, #476]	; (80b54ec <HAL_UART_IRQHandler+0x354>)
 80b5310:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80b5312:	687b      	ldr	r3, [r7, #4]
 80b5314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80b5316:	4618      	mov	r0, r3
 80b5318:	f7fb fa9e 	bl	80b0858 <HAL_DMA_Abort_IT>
 80b531c:	4603      	mov	r3, r0
 80b531e:	2b00      	cmp	r3, #0
 80b5320:	d016      	beq.n	80b5350 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80b5322:	687b      	ldr	r3, [r7, #4]
 80b5324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80b5326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80b5328:	687a      	ldr	r2, [r7, #4]
 80b532a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80b532c:	4610      	mov	r0, r2
 80b532e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80b5330:	e00e      	b.n	80b5350 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80b5332:	6878      	ldr	r0, [r7, #4]
 80b5334:	f000 f8f0 	bl	80b5518 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80b5338:	e00a      	b.n	80b5350 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80b533a:	6878      	ldr	r0, [r7, #4]
 80b533c:	f000 f8ec 	bl	80b5518 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80b5340:	e006      	b.n	80b5350 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80b5342:	6878      	ldr	r0, [r7, #4]
 80b5344:	f000 f8e8 	bl	80b5518 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80b5348:	687b      	ldr	r3, [r7, #4]
 80b534a:	2200      	movs	r2, #0
 80b534c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80b534e:	e0c4      	b.n	80b54da <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80b5350:	bf00      	nop
    return;
 80b5352:	e0c2      	b.n	80b54da <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80b5354:	687b      	ldr	r3, [r7, #4]
 80b5356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80b5358:	2b01      	cmp	r3, #1
 80b535a:	f040 80a2 	bne.w	80b54a2 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80b535e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b5360:	f003 0310 	and.w	r3, r3, #16
 80b5364:	2b00      	cmp	r3, #0
 80b5366:	f000 809c 	beq.w	80b54a2 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80b536a:	6a3b      	ldr	r3, [r7, #32]
 80b536c:	f003 0310 	and.w	r3, r3, #16
 80b5370:	2b00      	cmp	r3, #0
 80b5372:	f000 8096 	beq.w	80b54a2 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80b5376:	2300      	movs	r3, #0
 80b5378:	60fb      	str	r3, [r7, #12]
 80b537a:	687b      	ldr	r3, [r7, #4]
 80b537c:	681b      	ldr	r3, [r3, #0]
 80b537e:	681b      	ldr	r3, [r3, #0]
 80b5380:	60fb      	str	r3, [r7, #12]
 80b5382:	687b      	ldr	r3, [r7, #4]
 80b5384:	681b      	ldr	r3, [r3, #0]
 80b5386:	685b      	ldr	r3, [r3, #4]
 80b5388:	60fb      	str	r3, [r7, #12]
 80b538a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80b538c:	687b      	ldr	r3, [r7, #4]
 80b538e:	681b      	ldr	r3, [r3, #0]
 80b5390:	695b      	ldr	r3, [r3, #20]
 80b5392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80b5396:	2b40      	cmp	r3, #64	; 0x40
 80b5398:	d14f      	bne.n	80b543a <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80b539a:	687b      	ldr	r3, [r7, #4]
 80b539c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80b539e:	681b      	ldr	r3, [r3, #0]
 80b53a0:	685b      	ldr	r3, [r3, #4]
 80b53a2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80b53a4:	8a3b      	ldrh	r3, [r7, #16]
 80b53a6:	2b00      	cmp	r3, #0
 80b53a8:	f000 8099 	beq.w	80b54de <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80b53ac:	687b      	ldr	r3, [r7, #4]
 80b53ae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80b53b0:	8a3a      	ldrh	r2, [r7, #16]
 80b53b2:	429a      	cmp	r2, r3
 80b53b4:	f080 8093 	bcs.w	80b54de <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80b53b8:	687b      	ldr	r3, [r7, #4]
 80b53ba:	8a3a      	ldrh	r2, [r7, #16]
 80b53bc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80b53be:	687b      	ldr	r3, [r7, #4]
 80b53c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80b53c2:	69db      	ldr	r3, [r3, #28]
 80b53c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80b53c8:	d02b      	beq.n	80b5422 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80b53ca:	687b      	ldr	r3, [r7, #4]
 80b53cc:	681b      	ldr	r3, [r3, #0]
 80b53ce:	68da      	ldr	r2, [r3, #12]
 80b53d0:	687b      	ldr	r3, [r7, #4]
 80b53d2:	681b      	ldr	r3, [r3, #0]
 80b53d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80b53d8:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80b53da:	687b      	ldr	r3, [r7, #4]
 80b53dc:	681b      	ldr	r3, [r3, #0]
 80b53de:	695a      	ldr	r2, [r3, #20]
 80b53e0:	687b      	ldr	r3, [r7, #4]
 80b53e2:	681b      	ldr	r3, [r3, #0]
 80b53e4:	f022 0201 	bic.w	r2, r2, #1
 80b53e8:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80b53ea:	687b      	ldr	r3, [r7, #4]
 80b53ec:	681b      	ldr	r3, [r3, #0]
 80b53ee:	695a      	ldr	r2, [r3, #20]
 80b53f0:	687b      	ldr	r3, [r7, #4]
 80b53f2:	681b      	ldr	r3, [r3, #0]
 80b53f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80b53f8:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80b53fa:	687b      	ldr	r3, [r7, #4]
 80b53fc:	2220      	movs	r2, #32
 80b53fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80b5402:	687b      	ldr	r3, [r7, #4]
 80b5404:	2200      	movs	r2, #0
 80b5406:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80b5408:	687b      	ldr	r3, [r7, #4]
 80b540a:	681b      	ldr	r3, [r3, #0]
 80b540c:	68da      	ldr	r2, [r3, #12]
 80b540e:	687b      	ldr	r3, [r7, #4]
 80b5410:	681b      	ldr	r3, [r3, #0]
 80b5412:	f022 0210 	bic.w	r2, r2, #16
 80b5416:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80b5418:	687b      	ldr	r3, [r7, #4]
 80b541a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80b541c:	4618      	mov	r0, r3
 80b541e:	f7fb f9ab 	bl	80b0778 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80b5422:	687b      	ldr	r3, [r7, #4]
 80b5424:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80b5426:	687b      	ldr	r3, [r7, #4]
 80b5428:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80b542a:	b29b      	uxth	r3, r3
 80b542c:	1ad3      	subs	r3, r2, r3
 80b542e:	b29b      	uxth	r3, r3
 80b5430:	4619      	mov	r1, r3
 80b5432:	6878      	ldr	r0, [r7, #4]
 80b5434:	f000 f87a 	bl	80b552c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80b5438:	e051      	b.n	80b54de <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80b543a:	687b      	ldr	r3, [r7, #4]
 80b543c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80b543e:	687b      	ldr	r3, [r7, #4]
 80b5440:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80b5442:	b29b      	uxth	r3, r3
 80b5444:	1ad3      	subs	r3, r2, r3
 80b5446:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80b5448:	687b      	ldr	r3, [r7, #4]
 80b544a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80b544c:	b29b      	uxth	r3, r3
 80b544e:	2b00      	cmp	r3, #0
 80b5450:	d047      	beq.n	80b54e2 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80b5452:	8a7b      	ldrh	r3, [r7, #18]
 80b5454:	2b00      	cmp	r3, #0
 80b5456:	d044      	beq.n	80b54e2 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80b5458:	687b      	ldr	r3, [r7, #4]
 80b545a:	681b      	ldr	r3, [r3, #0]
 80b545c:	68da      	ldr	r2, [r3, #12]
 80b545e:	687b      	ldr	r3, [r7, #4]
 80b5460:	681b      	ldr	r3, [r3, #0]
 80b5462:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80b5466:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80b5468:	687b      	ldr	r3, [r7, #4]
 80b546a:	681b      	ldr	r3, [r3, #0]
 80b546c:	695a      	ldr	r2, [r3, #20]
 80b546e:	687b      	ldr	r3, [r7, #4]
 80b5470:	681b      	ldr	r3, [r3, #0]
 80b5472:	f022 0201 	bic.w	r2, r2, #1
 80b5476:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80b5478:	687b      	ldr	r3, [r7, #4]
 80b547a:	2220      	movs	r2, #32
 80b547c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80b5480:	687b      	ldr	r3, [r7, #4]
 80b5482:	2200      	movs	r2, #0
 80b5484:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80b5486:	687b      	ldr	r3, [r7, #4]
 80b5488:	681b      	ldr	r3, [r3, #0]
 80b548a:	68da      	ldr	r2, [r3, #12]
 80b548c:	687b      	ldr	r3, [r7, #4]
 80b548e:	681b      	ldr	r3, [r3, #0]
 80b5490:	f022 0210 	bic.w	r2, r2, #16
 80b5494:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80b5496:	8a7b      	ldrh	r3, [r7, #18]
 80b5498:	4619      	mov	r1, r3
 80b549a:	6878      	ldr	r0, [r7, #4]
 80b549c:	f000 f846 	bl	80b552c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80b54a0:	e01f      	b.n	80b54e2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80b54a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b54a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80b54a8:	2b00      	cmp	r3, #0
 80b54aa:	d008      	beq.n	80b54be <HAL_UART_IRQHandler+0x326>
 80b54ac:	6a3b      	ldr	r3, [r7, #32]
 80b54ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80b54b2:	2b00      	cmp	r3, #0
 80b54b4:	d003      	beq.n	80b54be <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 80b54b6:	6878      	ldr	r0, [r7, #4]
 80b54b8:	f000 f9f9 	bl	80b58ae <UART_Transmit_IT>
    return;
 80b54bc:	e012      	b.n	80b54e4 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80b54be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b54c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80b54c4:	2b00      	cmp	r3, #0
 80b54c6:	d00d      	beq.n	80b54e4 <HAL_UART_IRQHandler+0x34c>
 80b54c8:	6a3b      	ldr	r3, [r7, #32]
 80b54ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80b54ce:	2b00      	cmp	r3, #0
 80b54d0:	d008      	beq.n	80b54e4 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80b54d2:	6878      	ldr	r0, [r7, #4]
 80b54d4:	f000 fa3b 	bl	80b594e <UART_EndTransmit_IT>
    return;
 80b54d8:	e004      	b.n	80b54e4 <HAL_UART_IRQHandler+0x34c>
    return;
 80b54da:	bf00      	nop
 80b54dc:	e002      	b.n	80b54e4 <HAL_UART_IRQHandler+0x34c>
      return;
 80b54de:	bf00      	nop
 80b54e0:	e000      	b.n	80b54e4 <HAL_UART_IRQHandler+0x34c>
      return;
 80b54e2:	bf00      	nop
  }
}
 80b54e4:	3728      	adds	r7, #40	; 0x28
 80b54e6:	46bd      	mov	sp, r7
 80b54e8:	bd80      	pop	{r7, pc}
 80b54ea:	bf00      	nop
 80b54ec:	080b5887 	.word	0x080b5887

080b54f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80b54f0:	b480      	push	{r7}
 80b54f2:	b083      	sub	sp, #12
 80b54f4:	af00      	add	r7, sp, #0
 80b54f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80b54f8:	bf00      	nop
 80b54fa:	370c      	adds	r7, #12
 80b54fc:	46bd      	mov	sp, r7
 80b54fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b5502:	4770      	bx	lr

080b5504 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80b5504:	b480      	push	{r7}
 80b5506:	b083      	sub	sp, #12
 80b5508:	af00      	add	r7, sp, #0
 80b550a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80b550c:	bf00      	nop
 80b550e:	370c      	adds	r7, #12
 80b5510:	46bd      	mov	sp, r7
 80b5512:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b5516:	4770      	bx	lr

080b5518 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80b5518:	b480      	push	{r7}
 80b551a:	b083      	sub	sp, #12
 80b551c:	af00      	add	r7, sp, #0
 80b551e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80b5520:	bf00      	nop
 80b5522:	370c      	adds	r7, #12
 80b5524:	46bd      	mov	sp, r7
 80b5526:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b552a:	4770      	bx	lr

080b552c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80b552c:	b480      	push	{r7}
 80b552e:	b083      	sub	sp, #12
 80b5530:	af00      	add	r7, sp, #0
 80b5532:	6078      	str	r0, [r7, #4]
 80b5534:	460b      	mov	r3, r1
 80b5536:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80b5538:	bf00      	nop
 80b553a:	370c      	adds	r7, #12
 80b553c:	46bd      	mov	sp, r7
 80b553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b5542:	4770      	bx	lr

080b5544 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80b5544:	b580      	push	{r7, lr}
 80b5546:	b084      	sub	sp, #16
 80b5548:	af00      	add	r7, sp, #0
 80b554a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80b554c:	687b      	ldr	r3, [r7, #4]
 80b554e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80b5550:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80b5552:	687b      	ldr	r3, [r7, #4]
 80b5554:	681b      	ldr	r3, [r3, #0]
 80b5556:	681b      	ldr	r3, [r3, #0]
 80b5558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80b555c:	2b00      	cmp	r3, #0
 80b555e:	d12a      	bne.n	80b55b6 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80b5560:	68fb      	ldr	r3, [r7, #12]
 80b5562:	2200      	movs	r2, #0
 80b5564:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80b5566:	68fb      	ldr	r3, [r7, #12]
 80b5568:	681b      	ldr	r3, [r3, #0]
 80b556a:	68da      	ldr	r2, [r3, #12]
 80b556c:	68fb      	ldr	r3, [r7, #12]
 80b556e:	681b      	ldr	r3, [r3, #0]
 80b5570:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80b5574:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80b5576:	68fb      	ldr	r3, [r7, #12]
 80b5578:	681b      	ldr	r3, [r3, #0]
 80b557a:	695a      	ldr	r2, [r3, #20]
 80b557c:	68fb      	ldr	r3, [r7, #12]
 80b557e:	681b      	ldr	r3, [r3, #0]
 80b5580:	f022 0201 	bic.w	r2, r2, #1
 80b5584:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80b5586:	68fb      	ldr	r3, [r7, #12]
 80b5588:	681b      	ldr	r3, [r3, #0]
 80b558a:	695a      	ldr	r2, [r3, #20]
 80b558c:	68fb      	ldr	r3, [r7, #12]
 80b558e:	681b      	ldr	r3, [r3, #0]
 80b5590:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80b5594:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80b5596:	68fb      	ldr	r3, [r7, #12]
 80b5598:	2220      	movs	r2, #32
 80b559a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80b559e:	68fb      	ldr	r3, [r7, #12]
 80b55a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80b55a2:	2b01      	cmp	r3, #1
 80b55a4:	d107      	bne.n	80b55b6 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80b55a6:	68fb      	ldr	r3, [r7, #12]
 80b55a8:	681b      	ldr	r3, [r3, #0]
 80b55aa:	68da      	ldr	r2, [r3, #12]
 80b55ac:	68fb      	ldr	r3, [r7, #12]
 80b55ae:	681b      	ldr	r3, [r3, #0]
 80b55b0:	f022 0210 	bic.w	r2, r2, #16
 80b55b4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80b55b6:	68fb      	ldr	r3, [r7, #12]
 80b55b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80b55ba:	2b01      	cmp	r3, #1
 80b55bc:	d106      	bne.n	80b55cc <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80b55be:	68fb      	ldr	r3, [r7, #12]
 80b55c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80b55c2:	4619      	mov	r1, r3
 80b55c4:	68f8      	ldr	r0, [r7, #12]
 80b55c6:	f7ff ffb1 	bl	80b552c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80b55ca:	e002      	b.n	80b55d2 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 80b55cc:	68f8      	ldr	r0, [r7, #12]
 80b55ce:	f7f3 fac5 	bl	80a8b5c <HAL_UART_RxCpltCallback>
}
 80b55d2:	bf00      	nop
 80b55d4:	3710      	adds	r7, #16
 80b55d6:	46bd      	mov	sp, r7
 80b55d8:	bd80      	pop	{r7, pc}

080b55da <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80b55da:	b580      	push	{r7, lr}
 80b55dc:	b084      	sub	sp, #16
 80b55de:	af00      	add	r7, sp, #0
 80b55e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80b55e2:	687b      	ldr	r3, [r7, #4]
 80b55e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80b55e6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80b55e8:	68fb      	ldr	r3, [r7, #12]
 80b55ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80b55ec:	2b01      	cmp	r3, #1
 80b55ee:	d108      	bne.n	80b5602 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80b55f0:	68fb      	ldr	r3, [r7, #12]
 80b55f2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80b55f4:	085b      	lsrs	r3, r3, #1
 80b55f6:	b29b      	uxth	r3, r3
 80b55f8:	4619      	mov	r1, r3
 80b55fa:	68f8      	ldr	r0, [r7, #12]
 80b55fc:	f7ff ff96 	bl	80b552c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80b5600:	e002      	b.n	80b5608 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80b5602:	68f8      	ldr	r0, [r7, #12]
 80b5604:	f7ff ff7e 	bl	80b5504 <HAL_UART_RxHalfCpltCallback>
}
 80b5608:	bf00      	nop
 80b560a:	3710      	adds	r7, #16
 80b560c:	46bd      	mov	sp, r7
 80b560e:	bd80      	pop	{r7, pc}

080b5610 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80b5610:	b580      	push	{r7, lr}
 80b5612:	b084      	sub	sp, #16
 80b5614:	af00      	add	r7, sp, #0
 80b5616:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80b5618:	2300      	movs	r3, #0
 80b561a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80b561c:	687b      	ldr	r3, [r7, #4]
 80b561e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80b5620:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80b5622:	68bb      	ldr	r3, [r7, #8]
 80b5624:	681b      	ldr	r3, [r3, #0]
 80b5626:	695b      	ldr	r3, [r3, #20]
 80b5628:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80b562c:	2b80      	cmp	r3, #128	; 0x80
 80b562e:	bf0c      	ite	eq
 80b5630:	2301      	moveq	r3, #1
 80b5632:	2300      	movne	r3, #0
 80b5634:	b2db      	uxtb	r3, r3
 80b5636:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80b5638:	68bb      	ldr	r3, [r7, #8]
 80b563a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80b563e:	b2db      	uxtb	r3, r3
 80b5640:	2b21      	cmp	r3, #33	; 0x21
 80b5642:	d108      	bne.n	80b5656 <UART_DMAError+0x46>
 80b5644:	68fb      	ldr	r3, [r7, #12]
 80b5646:	2b00      	cmp	r3, #0
 80b5648:	d005      	beq.n	80b5656 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80b564a:	68bb      	ldr	r3, [r7, #8]
 80b564c:	2200      	movs	r2, #0
 80b564e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80b5650:	68b8      	ldr	r0, [r7, #8]
 80b5652:	f000 f8d5 	bl	80b5800 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80b5656:	68bb      	ldr	r3, [r7, #8]
 80b5658:	681b      	ldr	r3, [r3, #0]
 80b565a:	695b      	ldr	r3, [r3, #20]
 80b565c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80b5660:	2b40      	cmp	r3, #64	; 0x40
 80b5662:	bf0c      	ite	eq
 80b5664:	2301      	moveq	r3, #1
 80b5666:	2300      	movne	r3, #0
 80b5668:	b2db      	uxtb	r3, r3
 80b566a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80b566c:	68bb      	ldr	r3, [r7, #8]
 80b566e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80b5672:	b2db      	uxtb	r3, r3
 80b5674:	2b22      	cmp	r3, #34	; 0x22
 80b5676:	d108      	bne.n	80b568a <UART_DMAError+0x7a>
 80b5678:	68fb      	ldr	r3, [r7, #12]
 80b567a:	2b00      	cmp	r3, #0
 80b567c:	d005      	beq.n	80b568a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80b567e:	68bb      	ldr	r3, [r7, #8]
 80b5680:	2200      	movs	r2, #0
 80b5682:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80b5684:	68b8      	ldr	r0, [r7, #8]
 80b5686:	f000 f8d1 	bl	80b582c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80b568a:	68bb      	ldr	r3, [r7, #8]
 80b568c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80b568e:	f043 0210 	orr.w	r2, r3, #16
 80b5692:	68bb      	ldr	r3, [r7, #8]
 80b5694:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80b5696:	68b8      	ldr	r0, [r7, #8]
 80b5698:	f7ff ff3e 	bl	80b5518 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80b569c:	bf00      	nop
 80b569e:	3710      	adds	r7, #16
 80b56a0:	46bd      	mov	sp, r7
 80b56a2:	bd80      	pop	{r7, pc}

080b56a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80b56a4:	b580      	push	{r7, lr}
 80b56a6:	b084      	sub	sp, #16
 80b56a8:	af00      	add	r7, sp, #0
 80b56aa:	60f8      	str	r0, [r7, #12]
 80b56ac:	60b9      	str	r1, [r7, #8]
 80b56ae:	603b      	str	r3, [r7, #0]
 80b56b0:	4613      	mov	r3, r2
 80b56b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80b56b4:	e02c      	b.n	80b5710 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80b56b6:	69bb      	ldr	r3, [r7, #24]
 80b56b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80b56bc:	d028      	beq.n	80b5710 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80b56be:	69bb      	ldr	r3, [r7, #24]
 80b56c0:	2b00      	cmp	r3, #0
 80b56c2:	d007      	beq.n	80b56d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80b56c4:	f7f9 ffb6 	bl	80af634 <HAL_GetTick>
 80b56c8:	4602      	mov	r2, r0
 80b56ca:	683b      	ldr	r3, [r7, #0]
 80b56cc:	1ad3      	subs	r3, r2, r3
 80b56ce:	69ba      	ldr	r2, [r7, #24]
 80b56d0:	429a      	cmp	r2, r3
 80b56d2:	d21d      	bcs.n	80b5710 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80b56d4:	68fb      	ldr	r3, [r7, #12]
 80b56d6:	681b      	ldr	r3, [r3, #0]
 80b56d8:	68da      	ldr	r2, [r3, #12]
 80b56da:	68fb      	ldr	r3, [r7, #12]
 80b56dc:	681b      	ldr	r3, [r3, #0]
 80b56de:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80b56e2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80b56e4:	68fb      	ldr	r3, [r7, #12]
 80b56e6:	681b      	ldr	r3, [r3, #0]
 80b56e8:	695a      	ldr	r2, [r3, #20]
 80b56ea:	68fb      	ldr	r3, [r7, #12]
 80b56ec:	681b      	ldr	r3, [r3, #0]
 80b56ee:	f022 0201 	bic.w	r2, r2, #1
 80b56f2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80b56f4:	68fb      	ldr	r3, [r7, #12]
 80b56f6:	2220      	movs	r2, #32
 80b56f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80b56fc:	68fb      	ldr	r3, [r7, #12]
 80b56fe:	2220      	movs	r2, #32
 80b5700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80b5704:	68fb      	ldr	r3, [r7, #12]
 80b5706:	2200      	movs	r2, #0
 80b5708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80b570c:	2303      	movs	r3, #3
 80b570e:	e00f      	b.n	80b5730 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80b5710:	68fb      	ldr	r3, [r7, #12]
 80b5712:	681b      	ldr	r3, [r3, #0]
 80b5714:	681a      	ldr	r2, [r3, #0]
 80b5716:	68bb      	ldr	r3, [r7, #8]
 80b5718:	4013      	ands	r3, r2
 80b571a:	68ba      	ldr	r2, [r7, #8]
 80b571c:	429a      	cmp	r2, r3
 80b571e:	bf0c      	ite	eq
 80b5720:	2301      	moveq	r3, #1
 80b5722:	2300      	movne	r3, #0
 80b5724:	b2db      	uxtb	r3, r3
 80b5726:	461a      	mov	r2, r3
 80b5728:	79fb      	ldrb	r3, [r7, #7]
 80b572a:	429a      	cmp	r2, r3
 80b572c:	d0c3      	beq.n	80b56b6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80b572e:	2300      	movs	r3, #0
}
 80b5730:	4618      	mov	r0, r3
 80b5732:	3710      	adds	r7, #16
 80b5734:	46bd      	mov	sp, r7
 80b5736:	bd80      	pop	{r7, pc}

080b5738 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80b5738:	b580      	push	{r7, lr}
 80b573a:	b086      	sub	sp, #24
 80b573c:	af00      	add	r7, sp, #0
 80b573e:	60f8      	str	r0, [r7, #12]
 80b5740:	60b9      	str	r1, [r7, #8]
 80b5742:	4613      	mov	r3, r2
 80b5744:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80b5746:	68ba      	ldr	r2, [r7, #8]
 80b5748:	68fb      	ldr	r3, [r7, #12]
 80b574a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80b574c:	68fb      	ldr	r3, [r7, #12]
 80b574e:	88fa      	ldrh	r2, [r7, #6]
 80b5750:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80b5752:	68fb      	ldr	r3, [r7, #12]
 80b5754:	2200      	movs	r2, #0
 80b5756:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80b5758:	68fb      	ldr	r3, [r7, #12]
 80b575a:	2222      	movs	r2, #34	; 0x22
 80b575c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80b5760:	68fb      	ldr	r3, [r7, #12]
 80b5762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80b5764:	4a23      	ldr	r2, [pc, #140]	; (80b57f4 <UART_Start_Receive_DMA+0xbc>)
 80b5766:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80b5768:	68fb      	ldr	r3, [r7, #12]
 80b576a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80b576c:	4a22      	ldr	r2, [pc, #136]	; (80b57f8 <UART_Start_Receive_DMA+0xc0>)
 80b576e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80b5770:	68fb      	ldr	r3, [r7, #12]
 80b5772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80b5774:	4a21      	ldr	r2, [pc, #132]	; (80b57fc <UART_Start_Receive_DMA+0xc4>)
 80b5776:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80b5778:	68fb      	ldr	r3, [r7, #12]
 80b577a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80b577c:	2200      	movs	r2, #0
 80b577e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80b5780:	f107 0308 	add.w	r3, r7, #8
 80b5784:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80b5786:	68fb      	ldr	r3, [r7, #12]
 80b5788:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80b578a:	68fb      	ldr	r3, [r7, #12]
 80b578c:	681b      	ldr	r3, [r3, #0]
 80b578e:	3304      	adds	r3, #4
 80b5790:	4619      	mov	r1, r3
 80b5792:	697b      	ldr	r3, [r7, #20]
 80b5794:	681a      	ldr	r2, [r3, #0]
 80b5796:	88fb      	ldrh	r3, [r7, #6]
 80b5798:	f7fa ff96 	bl	80b06c8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80b579c:	2300      	movs	r3, #0
 80b579e:	613b      	str	r3, [r7, #16]
 80b57a0:	68fb      	ldr	r3, [r7, #12]
 80b57a2:	681b      	ldr	r3, [r3, #0]
 80b57a4:	681b      	ldr	r3, [r3, #0]
 80b57a6:	613b      	str	r3, [r7, #16]
 80b57a8:	68fb      	ldr	r3, [r7, #12]
 80b57aa:	681b      	ldr	r3, [r3, #0]
 80b57ac:	685b      	ldr	r3, [r3, #4]
 80b57ae:	613b      	str	r3, [r7, #16]
 80b57b0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80b57b2:	68fb      	ldr	r3, [r7, #12]
 80b57b4:	2200      	movs	r2, #0
 80b57b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80b57ba:	68fb      	ldr	r3, [r7, #12]
 80b57bc:	681b      	ldr	r3, [r3, #0]
 80b57be:	68da      	ldr	r2, [r3, #12]
 80b57c0:	68fb      	ldr	r3, [r7, #12]
 80b57c2:	681b      	ldr	r3, [r3, #0]
 80b57c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80b57c8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80b57ca:	68fb      	ldr	r3, [r7, #12]
 80b57cc:	681b      	ldr	r3, [r3, #0]
 80b57ce:	695a      	ldr	r2, [r3, #20]
 80b57d0:	68fb      	ldr	r3, [r7, #12]
 80b57d2:	681b      	ldr	r3, [r3, #0]
 80b57d4:	f042 0201 	orr.w	r2, r2, #1
 80b57d8:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80b57da:	68fb      	ldr	r3, [r7, #12]
 80b57dc:	681b      	ldr	r3, [r3, #0]
 80b57de:	695a      	ldr	r2, [r3, #20]
 80b57e0:	68fb      	ldr	r3, [r7, #12]
 80b57e2:	681b      	ldr	r3, [r3, #0]
 80b57e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80b57e8:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80b57ea:	2300      	movs	r3, #0
}
 80b57ec:	4618      	mov	r0, r3
 80b57ee:	3718      	adds	r7, #24
 80b57f0:	46bd      	mov	sp, r7
 80b57f2:	bd80      	pop	{r7, pc}
 80b57f4:	080b5545 	.word	0x080b5545
 80b57f8:	080b55db 	.word	0x080b55db
 80b57fc:	080b5611 	.word	0x080b5611

080b5800 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80b5800:	b480      	push	{r7}
 80b5802:	b083      	sub	sp, #12
 80b5804:	af00      	add	r7, sp, #0
 80b5806:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80b5808:	687b      	ldr	r3, [r7, #4]
 80b580a:	681b      	ldr	r3, [r3, #0]
 80b580c:	68da      	ldr	r2, [r3, #12]
 80b580e:	687b      	ldr	r3, [r7, #4]
 80b5810:	681b      	ldr	r3, [r3, #0]
 80b5812:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80b5816:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80b5818:	687b      	ldr	r3, [r7, #4]
 80b581a:	2220      	movs	r2, #32
 80b581c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80b5820:	bf00      	nop
 80b5822:	370c      	adds	r7, #12
 80b5824:	46bd      	mov	sp, r7
 80b5826:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b582a:	4770      	bx	lr

080b582c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80b582c:	b480      	push	{r7}
 80b582e:	b083      	sub	sp, #12
 80b5830:	af00      	add	r7, sp, #0
 80b5832:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80b5834:	687b      	ldr	r3, [r7, #4]
 80b5836:	681b      	ldr	r3, [r3, #0]
 80b5838:	68da      	ldr	r2, [r3, #12]
 80b583a:	687b      	ldr	r3, [r7, #4]
 80b583c:	681b      	ldr	r3, [r3, #0]
 80b583e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80b5842:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80b5844:	687b      	ldr	r3, [r7, #4]
 80b5846:	681b      	ldr	r3, [r3, #0]
 80b5848:	695a      	ldr	r2, [r3, #20]
 80b584a:	687b      	ldr	r3, [r7, #4]
 80b584c:	681b      	ldr	r3, [r3, #0]
 80b584e:	f022 0201 	bic.w	r2, r2, #1
 80b5852:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80b5854:	687b      	ldr	r3, [r7, #4]
 80b5856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80b5858:	2b01      	cmp	r3, #1
 80b585a:	d107      	bne.n	80b586c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80b585c:	687b      	ldr	r3, [r7, #4]
 80b585e:	681b      	ldr	r3, [r3, #0]
 80b5860:	68da      	ldr	r2, [r3, #12]
 80b5862:	687b      	ldr	r3, [r7, #4]
 80b5864:	681b      	ldr	r3, [r3, #0]
 80b5866:	f022 0210 	bic.w	r2, r2, #16
 80b586a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80b586c:	687b      	ldr	r3, [r7, #4]
 80b586e:	2220      	movs	r2, #32
 80b5870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80b5874:	687b      	ldr	r3, [r7, #4]
 80b5876:	2200      	movs	r2, #0
 80b5878:	631a      	str	r2, [r3, #48]	; 0x30
}
 80b587a:	bf00      	nop
 80b587c:	370c      	adds	r7, #12
 80b587e:	46bd      	mov	sp, r7
 80b5880:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b5884:	4770      	bx	lr

080b5886 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80b5886:	b580      	push	{r7, lr}
 80b5888:	b084      	sub	sp, #16
 80b588a:	af00      	add	r7, sp, #0
 80b588c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80b588e:	687b      	ldr	r3, [r7, #4]
 80b5890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80b5892:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80b5894:	68fb      	ldr	r3, [r7, #12]
 80b5896:	2200      	movs	r2, #0
 80b5898:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80b589a:	68fb      	ldr	r3, [r7, #12]
 80b589c:	2200      	movs	r2, #0
 80b589e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80b58a0:	68f8      	ldr	r0, [r7, #12]
 80b58a2:	f7ff fe39 	bl	80b5518 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80b58a6:	bf00      	nop
 80b58a8:	3710      	adds	r7, #16
 80b58aa:	46bd      	mov	sp, r7
 80b58ac:	bd80      	pop	{r7, pc}

080b58ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80b58ae:	b480      	push	{r7}
 80b58b0:	b085      	sub	sp, #20
 80b58b2:	af00      	add	r7, sp, #0
 80b58b4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80b58b6:	687b      	ldr	r3, [r7, #4]
 80b58b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80b58bc:	b2db      	uxtb	r3, r3
 80b58be:	2b21      	cmp	r3, #33	; 0x21
 80b58c0:	d13e      	bne.n	80b5940 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80b58c2:	687b      	ldr	r3, [r7, #4]
 80b58c4:	689b      	ldr	r3, [r3, #8]
 80b58c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80b58ca:	d114      	bne.n	80b58f6 <UART_Transmit_IT+0x48>
 80b58cc:	687b      	ldr	r3, [r7, #4]
 80b58ce:	691b      	ldr	r3, [r3, #16]
 80b58d0:	2b00      	cmp	r3, #0
 80b58d2:	d110      	bne.n	80b58f6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80b58d4:	687b      	ldr	r3, [r7, #4]
 80b58d6:	6a1b      	ldr	r3, [r3, #32]
 80b58d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80b58da:	68fb      	ldr	r3, [r7, #12]
 80b58dc:	881b      	ldrh	r3, [r3, #0]
 80b58de:	461a      	mov	r2, r3
 80b58e0:	687b      	ldr	r3, [r7, #4]
 80b58e2:	681b      	ldr	r3, [r3, #0]
 80b58e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80b58e8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80b58ea:	687b      	ldr	r3, [r7, #4]
 80b58ec:	6a1b      	ldr	r3, [r3, #32]
 80b58ee:	1c9a      	adds	r2, r3, #2
 80b58f0:	687b      	ldr	r3, [r7, #4]
 80b58f2:	621a      	str	r2, [r3, #32]
 80b58f4:	e008      	b.n	80b5908 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80b58f6:	687b      	ldr	r3, [r7, #4]
 80b58f8:	6a1b      	ldr	r3, [r3, #32]
 80b58fa:	1c59      	adds	r1, r3, #1
 80b58fc:	687a      	ldr	r2, [r7, #4]
 80b58fe:	6211      	str	r1, [r2, #32]
 80b5900:	781a      	ldrb	r2, [r3, #0]
 80b5902:	687b      	ldr	r3, [r7, #4]
 80b5904:	681b      	ldr	r3, [r3, #0]
 80b5906:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80b5908:	687b      	ldr	r3, [r7, #4]
 80b590a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80b590c:	b29b      	uxth	r3, r3
 80b590e:	3b01      	subs	r3, #1
 80b5910:	b29b      	uxth	r3, r3
 80b5912:	687a      	ldr	r2, [r7, #4]
 80b5914:	4619      	mov	r1, r3
 80b5916:	84d1      	strh	r1, [r2, #38]	; 0x26
 80b5918:	2b00      	cmp	r3, #0
 80b591a:	d10f      	bne.n	80b593c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80b591c:	687b      	ldr	r3, [r7, #4]
 80b591e:	681b      	ldr	r3, [r3, #0]
 80b5920:	68da      	ldr	r2, [r3, #12]
 80b5922:	687b      	ldr	r3, [r7, #4]
 80b5924:	681b      	ldr	r3, [r3, #0]
 80b5926:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80b592a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80b592c:	687b      	ldr	r3, [r7, #4]
 80b592e:	681b      	ldr	r3, [r3, #0]
 80b5930:	68da      	ldr	r2, [r3, #12]
 80b5932:	687b      	ldr	r3, [r7, #4]
 80b5934:	681b      	ldr	r3, [r3, #0]
 80b5936:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80b593a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80b593c:	2300      	movs	r3, #0
 80b593e:	e000      	b.n	80b5942 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80b5940:	2302      	movs	r3, #2
  }
}
 80b5942:	4618      	mov	r0, r3
 80b5944:	3714      	adds	r7, #20
 80b5946:	46bd      	mov	sp, r7
 80b5948:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b594c:	4770      	bx	lr

080b594e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80b594e:	b580      	push	{r7, lr}
 80b5950:	b082      	sub	sp, #8
 80b5952:	af00      	add	r7, sp, #0
 80b5954:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80b5956:	687b      	ldr	r3, [r7, #4]
 80b5958:	681b      	ldr	r3, [r3, #0]
 80b595a:	68da      	ldr	r2, [r3, #12]
 80b595c:	687b      	ldr	r3, [r7, #4]
 80b595e:	681b      	ldr	r3, [r3, #0]
 80b5960:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80b5964:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80b5966:	687b      	ldr	r3, [r7, #4]
 80b5968:	2220      	movs	r2, #32
 80b596a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80b596e:	6878      	ldr	r0, [r7, #4]
 80b5970:	f7ff fdbe 	bl	80b54f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80b5974:	2300      	movs	r3, #0
}
 80b5976:	4618      	mov	r0, r3
 80b5978:	3708      	adds	r7, #8
 80b597a:	46bd      	mov	sp, r7
 80b597c:	bd80      	pop	{r7, pc}

080b597e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80b597e:	b580      	push	{r7, lr}
 80b5980:	b084      	sub	sp, #16
 80b5982:	af00      	add	r7, sp, #0
 80b5984:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80b5986:	687b      	ldr	r3, [r7, #4]
 80b5988:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80b598c:	b2db      	uxtb	r3, r3
 80b598e:	2b22      	cmp	r3, #34	; 0x22
 80b5990:	f040 8087 	bne.w	80b5aa2 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80b5994:	687b      	ldr	r3, [r7, #4]
 80b5996:	689b      	ldr	r3, [r3, #8]
 80b5998:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80b599c:	d117      	bne.n	80b59ce <UART_Receive_IT+0x50>
 80b599e:	687b      	ldr	r3, [r7, #4]
 80b59a0:	691b      	ldr	r3, [r3, #16]
 80b59a2:	2b00      	cmp	r3, #0
 80b59a4:	d113      	bne.n	80b59ce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80b59a6:	2300      	movs	r3, #0
 80b59a8:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80b59aa:	687b      	ldr	r3, [r7, #4]
 80b59ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80b59ae:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80b59b0:	687b      	ldr	r3, [r7, #4]
 80b59b2:	681b      	ldr	r3, [r3, #0]
 80b59b4:	685b      	ldr	r3, [r3, #4]
 80b59b6:	b29b      	uxth	r3, r3
 80b59b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80b59bc:	b29a      	uxth	r2, r3
 80b59be:	68bb      	ldr	r3, [r7, #8]
 80b59c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80b59c2:	687b      	ldr	r3, [r7, #4]
 80b59c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80b59c6:	1c9a      	adds	r2, r3, #2
 80b59c8:	687b      	ldr	r3, [r7, #4]
 80b59ca:	629a      	str	r2, [r3, #40]	; 0x28
 80b59cc:	e026      	b.n	80b5a1c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80b59ce:	687b      	ldr	r3, [r7, #4]
 80b59d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80b59d2:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80b59d4:	2300      	movs	r3, #0
 80b59d6:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80b59d8:	687b      	ldr	r3, [r7, #4]
 80b59da:	689b      	ldr	r3, [r3, #8]
 80b59dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80b59e0:	d007      	beq.n	80b59f2 <UART_Receive_IT+0x74>
 80b59e2:	687b      	ldr	r3, [r7, #4]
 80b59e4:	689b      	ldr	r3, [r3, #8]
 80b59e6:	2b00      	cmp	r3, #0
 80b59e8:	d10a      	bne.n	80b5a00 <UART_Receive_IT+0x82>
 80b59ea:	687b      	ldr	r3, [r7, #4]
 80b59ec:	691b      	ldr	r3, [r3, #16]
 80b59ee:	2b00      	cmp	r3, #0
 80b59f0:	d106      	bne.n	80b5a00 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80b59f2:	687b      	ldr	r3, [r7, #4]
 80b59f4:	681b      	ldr	r3, [r3, #0]
 80b59f6:	685b      	ldr	r3, [r3, #4]
 80b59f8:	b2da      	uxtb	r2, r3
 80b59fa:	68fb      	ldr	r3, [r7, #12]
 80b59fc:	701a      	strb	r2, [r3, #0]
 80b59fe:	e008      	b.n	80b5a12 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80b5a00:	687b      	ldr	r3, [r7, #4]
 80b5a02:	681b      	ldr	r3, [r3, #0]
 80b5a04:	685b      	ldr	r3, [r3, #4]
 80b5a06:	b2db      	uxtb	r3, r3
 80b5a08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80b5a0c:	b2da      	uxtb	r2, r3
 80b5a0e:	68fb      	ldr	r3, [r7, #12]
 80b5a10:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80b5a12:	687b      	ldr	r3, [r7, #4]
 80b5a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80b5a16:	1c5a      	adds	r2, r3, #1
 80b5a18:	687b      	ldr	r3, [r7, #4]
 80b5a1a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80b5a1c:	687b      	ldr	r3, [r7, #4]
 80b5a1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80b5a20:	b29b      	uxth	r3, r3
 80b5a22:	3b01      	subs	r3, #1
 80b5a24:	b29b      	uxth	r3, r3
 80b5a26:	687a      	ldr	r2, [r7, #4]
 80b5a28:	4619      	mov	r1, r3
 80b5a2a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80b5a2c:	2b00      	cmp	r3, #0
 80b5a2e:	d136      	bne.n	80b5a9e <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80b5a30:	687b      	ldr	r3, [r7, #4]
 80b5a32:	681b      	ldr	r3, [r3, #0]
 80b5a34:	68da      	ldr	r2, [r3, #12]
 80b5a36:	687b      	ldr	r3, [r7, #4]
 80b5a38:	681b      	ldr	r3, [r3, #0]
 80b5a3a:	f022 0220 	bic.w	r2, r2, #32
 80b5a3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80b5a40:	687b      	ldr	r3, [r7, #4]
 80b5a42:	681b      	ldr	r3, [r3, #0]
 80b5a44:	68da      	ldr	r2, [r3, #12]
 80b5a46:	687b      	ldr	r3, [r7, #4]
 80b5a48:	681b      	ldr	r3, [r3, #0]
 80b5a4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80b5a4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80b5a50:	687b      	ldr	r3, [r7, #4]
 80b5a52:	681b      	ldr	r3, [r3, #0]
 80b5a54:	695a      	ldr	r2, [r3, #20]
 80b5a56:	687b      	ldr	r3, [r7, #4]
 80b5a58:	681b      	ldr	r3, [r3, #0]
 80b5a5a:	f022 0201 	bic.w	r2, r2, #1
 80b5a5e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80b5a60:	687b      	ldr	r3, [r7, #4]
 80b5a62:	2220      	movs	r2, #32
 80b5a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80b5a68:	687b      	ldr	r3, [r7, #4]
 80b5a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80b5a6c:	2b01      	cmp	r3, #1
 80b5a6e:	d10e      	bne.n	80b5a8e <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80b5a70:	687b      	ldr	r3, [r7, #4]
 80b5a72:	681b      	ldr	r3, [r3, #0]
 80b5a74:	68da      	ldr	r2, [r3, #12]
 80b5a76:	687b      	ldr	r3, [r7, #4]
 80b5a78:	681b      	ldr	r3, [r3, #0]
 80b5a7a:	f022 0210 	bic.w	r2, r2, #16
 80b5a7e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80b5a80:	687b      	ldr	r3, [r7, #4]
 80b5a82:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80b5a84:	4619      	mov	r1, r3
 80b5a86:	6878      	ldr	r0, [r7, #4]
 80b5a88:	f7ff fd50 	bl	80b552c <HAL_UARTEx_RxEventCallback>
 80b5a8c:	e002      	b.n	80b5a94 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80b5a8e:	6878      	ldr	r0, [r7, #4]
 80b5a90:	f7f3 f864 	bl	80a8b5c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80b5a94:	687b      	ldr	r3, [r7, #4]
 80b5a96:	2200      	movs	r2, #0
 80b5a98:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 80b5a9a:	2300      	movs	r3, #0
 80b5a9c:	e002      	b.n	80b5aa4 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 80b5a9e:	2300      	movs	r3, #0
 80b5aa0:	e000      	b.n	80b5aa4 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 80b5aa2:	2302      	movs	r3, #2
  }
}
 80b5aa4:	4618      	mov	r0, r3
 80b5aa6:	3710      	adds	r7, #16
 80b5aa8:	46bd      	mov	sp, r7
 80b5aaa:	bd80      	pop	{r7, pc}

080b5aac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80b5aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80b5ab0:	b09f      	sub	sp, #124	; 0x7c
 80b5ab2:	af00      	add	r7, sp, #0
 80b5ab4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80b5ab6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80b5ab8:	681b      	ldr	r3, [r3, #0]
 80b5aba:	691b      	ldr	r3, [r3, #16]
 80b5abc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80b5ac0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80b5ac2:	68d9      	ldr	r1, [r3, #12]
 80b5ac4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80b5ac6:	681a      	ldr	r2, [r3, #0]
 80b5ac8:	ea40 0301 	orr.w	r3, r0, r1
 80b5acc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80b5ace:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80b5ad0:	689a      	ldr	r2, [r3, #8]
 80b5ad2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80b5ad4:	691b      	ldr	r3, [r3, #16]
 80b5ad6:	431a      	orrs	r2, r3
 80b5ad8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80b5ada:	695b      	ldr	r3, [r3, #20]
 80b5adc:	431a      	orrs	r2, r3
 80b5ade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80b5ae0:	69db      	ldr	r3, [r3, #28]
 80b5ae2:	4313      	orrs	r3, r2
 80b5ae4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80b5ae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80b5ae8:	681b      	ldr	r3, [r3, #0]
 80b5aea:	68db      	ldr	r3, [r3, #12]
 80b5aec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80b5af0:	f021 010c 	bic.w	r1, r1, #12
 80b5af4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80b5af6:	681a      	ldr	r2, [r3, #0]
 80b5af8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80b5afa:	430b      	orrs	r3, r1
 80b5afc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80b5afe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80b5b00:	681b      	ldr	r3, [r3, #0]
 80b5b02:	695b      	ldr	r3, [r3, #20]
 80b5b04:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80b5b08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80b5b0a:	6999      	ldr	r1, [r3, #24]
 80b5b0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80b5b0e:	681a      	ldr	r2, [r3, #0]
 80b5b10:	ea40 0301 	orr.w	r3, r0, r1
 80b5b14:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80b5b16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80b5b18:	681a      	ldr	r2, [r3, #0]
 80b5b1a:	4bc5      	ldr	r3, [pc, #788]	; (80b5e30 <UART_SetConfig+0x384>)
 80b5b1c:	429a      	cmp	r2, r3
 80b5b1e:	d004      	beq.n	80b5b2a <UART_SetConfig+0x7e>
 80b5b20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80b5b22:	681a      	ldr	r2, [r3, #0]
 80b5b24:	4bc3      	ldr	r3, [pc, #780]	; (80b5e34 <UART_SetConfig+0x388>)
 80b5b26:	429a      	cmp	r2, r3
 80b5b28:	d103      	bne.n	80b5b32 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80b5b2a:	f7fd fe71 	bl	80b3810 <HAL_RCC_GetPCLK2Freq>
 80b5b2e:	6778      	str	r0, [r7, #116]	; 0x74
 80b5b30:	e002      	b.n	80b5b38 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80b5b32:	f7fd fe59 	bl	80b37e8 <HAL_RCC_GetPCLK1Freq>
 80b5b36:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80b5b38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80b5b3a:	69db      	ldr	r3, [r3, #28]
 80b5b3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80b5b40:	f040 80b6 	bne.w	80b5cb0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80b5b44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80b5b46:	461c      	mov	r4, r3
 80b5b48:	f04f 0500 	mov.w	r5, #0
 80b5b4c:	4622      	mov	r2, r4
 80b5b4e:	462b      	mov	r3, r5
 80b5b50:	1891      	adds	r1, r2, r2
 80b5b52:	6439      	str	r1, [r7, #64]	; 0x40
 80b5b54:	415b      	adcs	r3, r3
 80b5b56:	647b      	str	r3, [r7, #68]	; 0x44
 80b5b58:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80b5b5c:	1912      	adds	r2, r2, r4
 80b5b5e:	eb45 0303 	adc.w	r3, r5, r3
 80b5b62:	f04f 0000 	mov.w	r0, #0
 80b5b66:	f04f 0100 	mov.w	r1, #0
 80b5b6a:	00d9      	lsls	r1, r3, #3
 80b5b6c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80b5b70:	00d0      	lsls	r0, r2, #3
 80b5b72:	4602      	mov	r2, r0
 80b5b74:	460b      	mov	r3, r1
 80b5b76:	1911      	adds	r1, r2, r4
 80b5b78:	6639      	str	r1, [r7, #96]	; 0x60
 80b5b7a:	416b      	adcs	r3, r5
 80b5b7c:	667b      	str	r3, [r7, #100]	; 0x64
 80b5b7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80b5b80:	685b      	ldr	r3, [r3, #4]
 80b5b82:	461a      	mov	r2, r3
 80b5b84:	f04f 0300 	mov.w	r3, #0
 80b5b88:	1891      	adds	r1, r2, r2
 80b5b8a:	63b9      	str	r1, [r7, #56]	; 0x38
 80b5b8c:	415b      	adcs	r3, r3
 80b5b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80b5b90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80b5b94:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80b5b98:	f7eb f984 	bl	80a0ea4 <__aeabi_uldivmod>
 80b5b9c:	4602      	mov	r2, r0
 80b5b9e:	460b      	mov	r3, r1
 80b5ba0:	4ba5      	ldr	r3, [pc, #660]	; (80b5e38 <UART_SetConfig+0x38c>)
 80b5ba2:	fba3 2302 	umull	r2, r3, r3, r2
 80b5ba6:	095b      	lsrs	r3, r3, #5
 80b5ba8:	011e      	lsls	r6, r3, #4
 80b5baa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80b5bac:	461c      	mov	r4, r3
 80b5bae:	f04f 0500 	mov.w	r5, #0
 80b5bb2:	4622      	mov	r2, r4
 80b5bb4:	462b      	mov	r3, r5
 80b5bb6:	1891      	adds	r1, r2, r2
 80b5bb8:	6339      	str	r1, [r7, #48]	; 0x30
 80b5bba:	415b      	adcs	r3, r3
 80b5bbc:	637b      	str	r3, [r7, #52]	; 0x34
 80b5bbe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80b5bc2:	1912      	adds	r2, r2, r4
 80b5bc4:	eb45 0303 	adc.w	r3, r5, r3
 80b5bc8:	f04f 0000 	mov.w	r0, #0
 80b5bcc:	f04f 0100 	mov.w	r1, #0
 80b5bd0:	00d9      	lsls	r1, r3, #3
 80b5bd2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80b5bd6:	00d0      	lsls	r0, r2, #3
 80b5bd8:	4602      	mov	r2, r0
 80b5bda:	460b      	mov	r3, r1
 80b5bdc:	1911      	adds	r1, r2, r4
 80b5bde:	65b9      	str	r1, [r7, #88]	; 0x58
 80b5be0:	416b      	adcs	r3, r5
 80b5be2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80b5be4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80b5be6:	685b      	ldr	r3, [r3, #4]
 80b5be8:	461a      	mov	r2, r3
 80b5bea:	f04f 0300 	mov.w	r3, #0
 80b5bee:	1891      	adds	r1, r2, r2
 80b5bf0:	62b9      	str	r1, [r7, #40]	; 0x28
 80b5bf2:	415b      	adcs	r3, r3
 80b5bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80b5bf6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80b5bfa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80b5bfe:	f7eb f951 	bl	80a0ea4 <__aeabi_uldivmod>
 80b5c02:	4602      	mov	r2, r0
 80b5c04:	460b      	mov	r3, r1
 80b5c06:	4b8c      	ldr	r3, [pc, #560]	; (80b5e38 <UART_SetConfig+0x38c>)
 80b5c08:	fba3 1302 	umull	r1, r3, r3, r2
 80b5c0c:	095b      	lsrs	r3, r3, #5
 80b5c0e:	2164      	movs	r1, #100	; 0x64
 80b5c10:	fb01 f303 	mul.w	r3, r1, r3
 80b5c14:	1ad3      	subs	r3, r2, r3
 80b5c16:	00db      	lsls	r3, r3, #3
 80b5c18:	3332      	adds	r3, #50	; 0x32
 80b5c1a:	4a87      	ldr	r2, [pc, #540]	; (80b5e38 <UART_SetConfig+0x38c>)
 80b5c1c:	fba2 2303 	umull	r2, r3, r2, r3
 80b5c20:	095b      	lsrs	r3, r3, #5
 80b5c22:	005b      	lsls	r3, r3, #1
 80b5c24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80b5c28:	441e      	add	r6, r3
 80b5c2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80b5c2c:	4618      	mov	r0, r3
 80b5c2e:	f04f 0100 	mov.w	r1, #0
 80b5c32:	4602      	mov	r2, r0
 80b5c34:	460b      	mov	r3, r1
 80b5c36:	1894      	adds	r4, r2, r2
 80b5c38:	623c      	str	r4, [r7, #32]
 80b5c3a:	415b      	adcs	r3, r3
 80b5c3c:	627b      	str	r3, [r7, #36]	; 0x24
 80b5c3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80b5c42:	1812      	adds	r2, r2, r0
 80b5c44:	eb41 0303 	adc.w	r3, r1, r3
 80b5c48:	f04f 0400 	mov.w	r4, #0
 80b5c4c:	f04f 0500 	mov.w	r5, #0
 80b5c50:	00dd      	lsls	r5, r3, #3
 80b5c52:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80b5c56:	00d4      	lsls	r4, r2, #3
 80b5c58:	4622      	mov	r2, r4
 80b5c5a:	462b      	mov	r3, r5
 80b5c5c:	1814      	adds	r4, r2, r0
 80b5c5e:	653c      	str	r4, [r7, #80]	; 0x50
 80b5c60:	414b      	adcs	r3, r1
 80b5c62:	657b      	str	r3, [r7, #84]	; 0x54
 80b5c64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80b5c66:	685b      	ldr	r3, [r3, #4]
 80b5c68:	461a      	mov	r2, r3
 80b5c6a:	f04f 0300 	mov.w	r3, #0
 80b5c6e:	1891      	adds	r1, r2, r2
 80b5c70:	61b9      	str	r1, [r7, #24]
 80b5c72:	415b      	adcs	r3, r3
 80b5c74:	61fb      	str	r3, [r7, #28]
 80b5c76:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80b5c7a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80b5c7e:	f7eb f911 	bl	80a0ea4 <__aeabi_uldivmod>
 80b5c82:	4602      	mov	r2, r0
 80b5c84:	460b      	mov	r3, r1
 80b5c86:	4b6c      	ldr	r3, [pc, #432]	; (80b5e38 <UART_SetConfig+0x38c>)
 80b5c88:	fba3 1302 	umull	r1, r3, r3, r2
 80b5c8c:	095b      	lsrs	r3, r3, #5
 80b5c8e:	2164      	movs	r1, #100	; 0x64
 80b5c90:	fb01 f303 	mul.w	r3, r1, r3
 80b5c94:	1ad3      	subs	r3, r2, r3
 80b5c96:	00db      	lsls	r3, r3, #3
 80b5c98:	3332      	adds	r3, #50	; 0x32
 80b5c9a:	4a67      	ldr	r2, [pc, #412]	; (80b5e38 <UART_SetConfig+0x38c>)
 80b5c9c:	fba2 2303 	umull	r2, r3, r2, r3
 80b5ca0:	095b      	lsrs	r3, r3, #5
 80b5ca2:	f003 0207 	and.w	r2, r3, #7
 80b5ca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80b5ca8:	681b      	ldr	r3, [r3, #0]
 80b5caa:	4432      	add	r2, r6
 80b5cac:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80b5cae:	e0b9      	b.n	80b5e24 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80b5cb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80b5cb2:	461c      	mov	r4, r3
 80b5cb4:	f04f 0500 	mov.w	r5, #0
 80b5cb8:	4622      	mov	r2, r4
 80b5cba:	462b      	mov	r3, r5
 80b5cbc:	1891      	adds	r1, r2, r2
 80b5cbe:	6139      	str	r1, [r7, #16]
 80b5cc0:	415b      	adcs	r3, r3
 80b5cc2:	617b      	str	r3, [r7, #20]
 80b5cc4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80b5cc8:	1912      	adds	r2, r2, r4
 80b5cca:	eb45 0303 	adc.w	r3, r5, r3
 80b5cce:	f04f 0000 	mov.w	r0, #0
 80b5cd2:	f04f 0100 	mov.w	r1, #0
 80b5cd6:	00d9      	lsls	r1, r3, #3
 80b5cd8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80b5cdc:	00d0      	lsls	r0, r2, #3
 80b5cde:	4602      	mov	r2, r0
 80b5ce0:	460b      	mov	r3, r1
 80b5ce2:	eb12 0804 	adds.w	r8, r2, r4
 80b5ce6:	eb43 0905 	adc.w	r9, r3, r5
 80b5cea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80b5cec:	685b      	ldr	r3, [r3, #4]
 80b5cee:	4618      	mov	r0, r3
 80b5cf0:	f04f 0100 	mov.w	r1, #0
 80b5cf4:	f04f 0200 	mov.w	r2, #0
 80b5cf8:	f04f 0300 	mov.w	r3, #0
 80b5cfc:	008b      	lsls	r3, r1, #2
 80b5cfe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80b5d02:	0082      	lsls	r2, r0, #2
 80b5d04:	4640      	mov	r0, r8
 80b5d06:	4649      	mov	r1, r9
 80b5d08:	f7eb f8cc 	bl	80a0ea4 <__aeabi_uldivmod>
 80b5d0c:	4602      	mov	r2, r0
 80b5d0e:	460b      	mov	r3, r1
 80b5d10:	4b49      	ldr	r3, [pc, #292]	; (80b5e38 <UART_SetConfig+0x38c>)
 80b5d12:	fba3 2302 	umull	r2, r3, r3, r2
 80b5d16:	095b      	lsrs	r3, r3, #5
 80b5d18:	011e      	lsls	r6, r3, #4
 80b5d1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80b5d1c:	4618      	mov	r0, r3
 80b5d1e:	f04f 0100 	mov.w	r1, #0
 80b5d22:	4602      	mov	r2, r0
 80b5d24:	460b      	mov	r3, r1
 80b5d26:	1894      	adds	r4, r2, r2
 80b5d28:	60bc      	str	r4, [r7, #8]
 80b5d2a:	415b      	adcs	r3, r3
 80b5d2c:	60fb      	str	r3, [r7, #12]
 80b5d2e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80b5d32:	1812      	adds	r2, r2, r0
 80b5d34:	eb41 0303 	adc.w	r3, r1, r3
 80b5d38:	f04f 0400 	mov.w	r4, #0
 80b5d3c:	f04f 0500 	mov.w	r5, #0
 80b5d40:	00dd      	lsls	r5, r3, #3
 80b5d42:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80b5d46:	00d4      	lsls	r4, r2, #3
 80b5d48:	4622      	mov	r2, r4
 80b5d4a:	462b      	mov	r3, r5
 80b5d4c:	1814      	adds	r4, r2, r0
 80b5d4e:	64bc      	str	r4, [r7, #72]	; 0x48
 80b5d50:	414b      	adcs	r3, r1
 80b5d52:	64fb      	str	r3, [r7, #76]	; 0x4c
 80b5d54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80b5d56:	685b      	ldr	r3, [r3, #4]
 80b5d58:	4618      	mov	r0, r3
 80b5d5a:	f04f 0100 	mov.w	r1, #0
 80b5d5e:	f04f 0200 	mov.w	r2, #0
 80b5d62:	f04f 0300 	mov.w	r3, #0
 80b5d66:	008b      	lsls	r3, r1, #2
 80b5d68:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80b5d6c:	0082      	lsls	r2, r0, #2
 80b5d6e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80b5d72:	f7eb f897 	bl	80a0ea4 <__aeabi_uldivmod>
 80b5d76:	4602      	mov	r2, r0
 80b5d78:	460b      	mov	r3, r1
 80b5d7a:	4b2f      	ldr	r3, [pc, #188]	; (80b5e38 <UART_SetConfig+0x38c>)
 80b5d7c:	fba3 1302 	umull	r1, r3, r3, r2
 80b5d80:	095b      	lsrs	r3, r3, #5
 80b5d82:	2164      	movs	r1, #100	; 0x64
 80b5d84:	fb01 f303 	mul.w	r3, r1, r3
 80b5d88:	1ad3      	subs	r3, r2, r3
 80b5d8a:	011b      	lsls	r3, r3, #4
 80b5d8c:	3332      	adds	r3, #50	; 0x32
 80b5d8e:	4a2a      	ldr	r2, [pc, #168]	; (80b5e38 <UART_SetConfig+0x38c>)
 80b5d90:	fba2 2303 	umull	r2, r3, r2, r3
 80b5d94:	095b      	lsrs	r3, r3, #5
 80b5d96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80b5d9a:	441e      	add	r6, r3
 80b5d9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80b5d9e:	4618      	mov	r0, r3
 80b5da0:	f04f 0100 	mov.w	r1, #0
 80b5da4:	4602      	mov	r2, r0
 80b5da6:	460b      	mov	r3, r1
 80b5da8:	1894      	adds	r4, r2, r2
 80b5daa:	603c      	str	r4, [r7, #0]
 80b5dac:	415b      	adcs	r3, r3
 80b5dae:	607b      	str	r3, [r7, #4]
 80b5db0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80b5db4:	1812      	adds	r2, r2, r0
 80b5db6:	eb41 0303 	adc.w	r3, r1, r3
 80b5dba:	f04f 0400 	mov.w	r4, #0
 80b5dbe:	f04f 0500 	mov.w	r5, #0
 80b5dc2:	00dd      	lsls	r5, r3, #3
 80b5dc4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80b5dc8:	00d4      	lsls	r4, r2, #3
 80b5dca:	4622      	mov	r2, r4
 80b5dcc:	462b      	mov	r3, r5
 80b5dce:	eb12 0a00 	adds.w	sl, r2, r0
 80b5dd2:	eb43 0b01 	adc.w	fp, r3, r1
 80b5dd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80b5dd8:	685b      	ldr	r3, [r3, #4]
 80b5dda:	4618      	mov	r0, r3
 80b5ddc:	f04f 0100 	mov.w	r1, #0
 80b5de0:	f04f 0200 	mov.w	r2, #0
 80b5de4:	f04f 0300 	mov.w	r3, #0
 80b5de8:	008b      	lsls	r3, r1, #2
 80b5dea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80b5dee:	0082      	lsls	r2, r0, #2
 80b5df0:	4650      	mov	r0, sl
 80b5df2:	4659      	mov	r1, fp
 80b5df4:	f7eb f856 	bl	80a0ea4 <__aeabi_uldivmod>
 80b5df8:	4602      	mov	r2, r0
 80b5dfa:	460b      	mov	r3, r1
 80b5dfc:	4b0e      	ldr	r3, [pc, #56]	; (80b5e38 <UART_SetConfig+0x38c>)
 80b5dfe:	fba3 1302 	umull	r1, r3, r3, r2
 80b5e02:	095b      	lsrs	r3, r3, #5
 80b5e04:	2164      	movs	r1, #100	; 0x64
 80b5e06:	fb01 f303 	mul.w	r3, r1, r3
 80b5e0a:	1ad3      	subs	r3, r2, r3
 80b5e0c:	011b      	lsls	r3, r3, #4
 80b5e0e:	3332      	adds	r3, #50	; 0x32
 80b5e10:	4a09      	ldr	r2, [pc, #36]	; (80b5e38 <UART_SetConfig+0x38c>)
 80b5e12:	fba2 2303 	umull	r2, r3, r2, r3
 80b5e16:	095b      	lsrs	r3, r3, #5
 80b5e18:	f003 020f 	and.w	r2, r3, #15
 80b5e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80b5e1e:	681b      	ldr	r3, [r3, #0]
 80b5e20:	4432      	add	r2, r6
 80b5e22:	609a      	str	r2, [r3, #8]
}
 80b5e24:	bf00      	nop
 80b5e26:	377c      	adds	r7, #124	; 0x7c
 80b5e28:	46bd      	mov	sp, r7
 80b5e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80b5e2e:	bf00      	nop
 80b5e30:	40011000 	.word	0x40011000
 80b5e34:	40011400 	.word	0x40011400
 80b5e38:	51eb851f 	.word	0x51eb851f

080b5e3c <__NVIC_SetPriority>:
{
 80b5e3c:	b480      	push	{r7}
 80b5e3e:	b083      	sub	sp, #12
 80b5e40:	af00      	add	r7, sp, #0
 80b5e42:	4603      	mov	r3, r0
 80b5e44:	6039      	str	r1, [r7, #0]
 80b5e46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80b5e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80b5e4c:	2b00      	cmp	r3, #0
 80b5e4e:	db0a      	blt.n	80b5e66 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80b5e50:	683b      	ldr	r3, [r7, #0]
 80b5e52:	b2da      	uxtb	r2, r3
 80b5e54:	490c      	ldr	r1, [pc, #48]	; (80b5e88 <__NVIC_SetPriority+0x4c>)
 80b5e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80b5e5a:	0112      	lsls	r2, r2, #4
 80b5e5c:	b2d2      	uxtb	r2, r2
 80b5e5e:	440b      	add	r3, r1
 80b5e60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80b5e64:	e00a      	b.n	80b5e7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80b5e66:	683b      	ldr	r3, [r7, #0]
 80b5e68:	b2da      	uxtb	r2, r3
 80b5e6a:	4908      	ldr	r1, [pc, #32]	; (80b5e8c <__NVIC_SetPriority+0x50>)
 80b5e6c:	79fb      	ldrb	r3, [r7, #7]
 80b5e6e:	f003 030f 	and.w	r3, r3, #15
 80b5e72:	3b04      	subs	r3, #4
 80b5e74:	0112      	lsls	r2, r2, #4
 80b5e76:	b2d2      	uxtb	r2, r2
 80b5e78:	440b      	add	r3, r1
 80b5e7a:	761a      	strb	r2, [r3, #24]
}
 80b5e7c:	bf00      	nop
 80b5e7e:	370c      	adds	r7, #12
 80b5e80:	46bd      	mov	sp, r7
 80b5e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b5e86:	4770      	bx	lr
 80b5e88:	e000e100 	.word	0xe000e100
 80b5e8c:	e000ed00 	.word	0xe000ed00

080b5e90 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80b5e90:	b580      	push	{r7, lr}
 80b5e92:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80b5e94:	4b05      	ldr	r3, [pc, #20]	; (80b5eac <SysTick_Handler+0x1c>)
 80b5e96:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80b5e98:	f002 f8a6 	bl	80b7fe8 <xTaskGetSchedulerState>
 80b5e9c:	4603      	mov	r3, r0
 80b5e9e:	2b01      	cmp	r3, #1
 80b5ea0:	d001      	beq.n	80b5ea6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80b5ea2:	f002 ff71 	bl	80b8d88 <xPortSysTickHandler>
  }
}
 80b5ea6:	bf00      	nop
 80b5ea8:	bd80      	pop	{r7, pc}
 80b5eaa:	bf00      	nop
 80b5eac:	e000e010 	.word	0xe000e010

080b5eb0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80b5eb0:	b580      	push	{r7, lr}
 80b5eb2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80b5eb4:	2100      	movs	r1, #0
 80b5eb6:	f06f 0004 	mvn.w	r0, #4
 80b5eba:	f7ff ffbf 	bl	80b5e3c <__NVIC_SetPriority>
#endif
}
 80b5ebe:	bf00      	nop
 80b5ec0:	bd80      	pop	{r7, pc}
	...

080b5ec4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80b5ec4:	b480      	push	{r7}
 80b5ec6:	b083      	sub	sp, #12
 80b5ec8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80b5eca:	f3ef 8305 	mrs	r3, IPSR
 80b5ece:	603b      	str	r3, [r7, #0]
  return(result);
 80b5ed0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80b5ed2:	2b00      	cmp	r3, #0
 80b5ed4:	d003      	beq.n	80b5ede <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80b5ed6:	f06f 0305 	mvn.w	r3, #5
 80b5eda:	607b      	str	r3, [r7, #4]
 80b5edc:	e00c      	b.n	80b5ef8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80b5ede:	4b0a      	ldr	r3, [pc, #40]	; (80b5f08 <osKernelInitialize+0x44>)
 80b5ee0:	681b      	ldr	r3, [r3, #0]
 80b5ee2:	2b00      	cmp	r3, #0
 80b5ee4:	d105      	bne.n	80b5ef2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80b5ee6:	4b08      	ldr	r3, [pc, #32]	; (80b5f08 <osKernelInitialize+0x44>)
 80b5ee8:	2201      	movs	r2, #1
 80b5eea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80b5eec:	2300      	movs	r3, #0
 80b5eee:	607b      	str	r3, [r7, #4]
 80b5ef0:	e002      	b.n	80b5ef8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80b5ef2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80b5ef6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80b5ef8:	687b      	ldr	r3, [r7, #4]
}
 80b5efa:	4618      	mov	r0, r3
 80b5efc:	370c      	adds	r7, #12
 80b5efe:	46bd      	mov	sp, r7
 80b5f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b5f04:	4770      	bx	lr
 80b5f06:	bf00      	nop
 80b5f08:	2000905c 	.word	0x2000905c

080b5f0c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80b5f0c:	b580      	push	{r7, lr}
 80b5f0e:	b082      	sub	sp, #8
 80b5f10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80b5f12:	f3ef 8305 	mrs	r3, IPSR
 80b5f16:	603b      	str	r3, [r7, #0]
  return(result);
 80b5f18:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80b5f1a:	2b00      	cmp	r3, #0
 80b5f1c:	d003      	beq.n	80b5f26 <osKernelStart+0x1a>
    stat = osErrorISR;
 80b5f1e:	f06f 0305 	mvn.w	r3, #5
 80b5f22:	607b      	str	r3, [r7, #4]
 80b5f24:	e010      	b.n	80b5f48 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80b5f26:	4b0b      	ldr	r3, [pc, #44]	; (80b5f54 <osKernelStart+0x48>)
 80b5f28:	681b      	ldr	r3, [r3, #0]
 80b5f2a:	2b01      	cmp	r3, #1
 80b5f2c:	d109      	bne.n	80b5f42 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80b5f2e:	f7ff ffbf 	bl	80b5eb0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80b5f32:	4b08      	ldr	r3, [pc, #32]	; (80b5f54 <osKernelStart+0x48>)
 80b5f34:	2202      	movs	r2, #2
 80b5f36:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80b5f38:	f001 fbfc 	bl	80b7734 <vTaskStartScheduler>
      stat = osOK;
 80b5f3c:	2300      	movs	r3, #0
 80b5f3e:	607b      	str	r3, [r7, #4]
 80b5f40:	e002      	b.n	80b5f48 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80b5f42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80b5f46:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80b5f48:	687b      	ldr	r3, [r7, #4]
}
 80b5f4a:	4618      	mov	r0, r3
 80b5f4c:	3708      	adds	r7, #8
 80b5f4e:	46bd      	mov	sp, r7
 80b5f50:	bd80      	pop	{r7, pc}
 80b5f52:	bf00      	nop
 80b5f54:	2000905c 	.word	0x2000905c

080b5f58 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80b5f58:	b580      	push	{r7, lr}
 80b5f5a:	b082      	sub	sp, #8
 80b5f5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80b5f5e:	f3ef 8305 	mrs	r3, IPSR
 80b5f62:	603b      	str	r3, [r7, #0]
  return(result);
 80b5f64:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80b5f66:	2b00      	cmp	r3, #0
 80b5f68:	d003      	beq.n	80b5f72 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80b5f6a:	f001 fd05 	bl	80b7978 <xTaskGetTickCountFromISR>
 80b5f6e:	6078      	str	r0, [r7, #4]
 80b5f70:	e002      	b.n	80b5f78 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80b5f72:	f001 fcf1 	bl	80b7958 <xTaskGetTickCount>
 80b5f76:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80b5f78:	687b      	ldr	r3, [r7, #4]
}
 80b5f7a:	4618      	mov	r0, r3
 80b5f7c:	3708      	adds	r7, #8
 80b5f7e:	46bd      	mov	sp, r7
 80b5f80:	bd80      	pop	{r7, pc}

080b5f82 <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 80b5f82:	b480      	push	{r7}
 80b5f84:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 80b5f86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 80b5f8a:	4618      	mov	r0, r3
 80b5f8c:	46bd      	mov	sp, r7
 80b5f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b5f92:	4770      	bx	lr

080b5f94 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80b5f94:	b580      	push	{r7, lr}
 80b5f96:	b08e      	sub	sp, #56	; 0x38
 80b5f98:	af04      	add	r7, sp, #16
 80b5f9a:	60f8      	str	r0, [r7, #12]
 80b5f9c:	60b9      	str	r1, [r7, #8]
 80b5f9e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80b5fa0:	2300      	movs	r3, #0
 80b5fa2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80b5fa4:	f3ef 8305 	mrs	r3, IPSR
 80b5fa8:	617b      	str	r3, [r7, #20]
  return(result);
 80b5faa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80b5fac:	2b00      	cmp	r3, #0
 80b5fae:	d17e      	bne.n	80b60ae <osThreadNew+0x11a>
 80b5fb0:	68fb      	ldr	r3, [r7, #12]
 80b5fb2:	2b00      	cmp	r3, #0
 80b5fb4:	d07b      	beq.n	80b60ae <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80b5fb6:	2380      	movs	r3, #128	; 0x80
 80b5fb8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80b5fba:	2318      	movs	r3, #24
 80b5fbc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80b5fbe:	2300      	movs	r3, #0
 80b5fc0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80b5fc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80b5fc6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80b5fc8:	687b      	ldr	r3, [r7, #4]
 80b5fca:	2b00      	cmp	r3, #0
 80b5fcc:	d045      	beq.n	80b605a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80b5fce:	687b      	ldr	r3, [r7, #4]
 80b5fd0:	681b      	ldr	r3, [r3, #0]
 80b5fd2:	2b00      	cmp	r3, #0
 80b5fd4:	d002      	beq.n	80b5fdc <osThreadNew+0x48>
        name = attr->name;
 80b5fd6:	687b      	ldr	r3, [r7, #4]
 80b5fd8:	681b      	ldr	r3, [r3, #0]
 80b5fda:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80b5fdc:	687b      	ldr	r3, [r7, #4]
 80b5fde:	699b      	ldr	r3, [r3, #24]
 80b5fe0:	2b00      	cmp	r3, #0
 80b5fe2:	d002      	beq.n	80b5fea <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80b5fe4:	687b      	ldr	r3, [r7, #4]
 80b5fe6:	699b      	ldr	r3, [r3, #24]
 80b5fe8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80b5fea:	69fb      	ldr	r3, [r7, #28]
 80b5fec:	2b00      	cmp	r3, #0
 80b5fee:	d008      	beq.n	80b6002 <osThreadNew+0x6e>
 80b5ff0:	69fb      	ldr	r3, [r7, #28]
 80b5ff2:	2b38      	cmp	r3, #56	; 0x38
 80b5ff4:	d805      	bhi.n	80b6002 <osThreadNew+0x6e>
 80b5ff6:	687b      	ldr	r3, [r7, #4]
 80b5ff8:	685b      	ldr	r3, [r3, #4]
 80b5ffa:	f003 0301 	and.w	r3, r3, #1
 80b5ffe:	2b00      	cmp	r3, #0
 80b6000:	d001      	beq.n	80b6006 <osThreadNew+0x72>
        return (NULL);
 80b6002:	2300      	movs	r3, #0
 80b6004:	e054      	b.n	80b60b0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80b6006:	687b      	ldr	r3, [r7, #4]
 80b6008:	695b      	ldr	r3, [r3, #20]
 80b600a:	2b00      	cmp	r3, #0
 80b600c:	d003      	beq.n	80b6016 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80b600e:	687b      	ldr	r3, [r7, #4]
 80b6010:	695b      	ldr	r3, [r3, #20]
 80b6012:	089b      	lsrs	r3, r3, #2
 80b6014:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80b6016:	687b      	ldr	r3, [r7, #4]
 80b6018:	689b      	ldr	r3, [r3, #8]
 80b601a:	2b00      	cmp	r3, #0
 80b601c:	d00e      	beq.n	80b603c <osThreadNew+0xa8>
 80b601e:	687b      	ldr	r3, [r7, #4]
 80b6020:	68db      	ldr	r3, [r3, #12]
 80b6022:	2b5b      	cmp	r3, #91	; 0x5b
 80b6024:	d90a      	bls.n	80b603c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80b6026:	687b      	ldr	r3, [r7, #4]
 80b6028:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80b602a:	2b00      	cmp	r3, #0
 80b602c:	d006      	beq.n	80b603c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80b602e:	687b      	ldr	r3, [r7, #4]
 80b6030:	695b      	ldr	r3, [r3, #20]
 80b6032:	2b00      	cmp	r3, #0
 80b6034:	d002      	beq.n	80b603c <osThreadNew+0xa8>
        mem = 1;
 80b6036:	2301      	movs	r3, #1
 80b6038:	61bb      	str	r3, [r7, #24]
 80b603a:	e010      	b.n	80b605e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80b603c:	687b      	ldr	r3, [r7, #4]
 80b603e:	689b      	ldr	r3, [r3, #8]
 80b6040:	2b00      	cmp	r3, #0
 80b6042:	d10c      	bne.n	80b605e <osThreadNew+0xca>
 80b6044:	687b      	ldr	r3, [r7, #4]
 80b6046:	68db      	ldr	r3, [r3, #12]
 80b6048:	2b00      	cmp	r3, #0
 80b604a:	d108      	bne.n	80b605e <osThreadNew+0xca>
 80b604c:	687b      	ldr	r3, [r7, #4]
 80b604e:	691b      	ldr	r3, [r3, #16]
 80b6050:	2b00      	cmp	r3, #0
 80b6052:	d104      	bne.n	80b605e <osThreadNew+0xca>
          mem = 0;
 80b6054:	2300      	movs	r3, #0
 80b6056:	61bb      	str	r3, [r7, #24]
 80b6058:	e001      	b.n	80b605e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80b605a:	2300      	movs	r3, #0
 80b605c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80b605e:	69bb      	ldr	r3, [r7, #24]
 80b6060:	2b01      	cmp	r3, #1
 80b6062:	d110      	bne.n	80b6086 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80b6064:	687b      	ldr	r3, [r7, #4]
 80b6066:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80b6068:	687a      	ldr	r2, [r7, #4]
 80b606a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80b606c:	9202      	str	r2, [sp, #8]
 80b606e:	9301      	str	r3, [sp, #4]
 80b6070:	69fb      	ldr	r3, [r7, #28]
 80b6072:	9300      	str	r3, [sp, #0]
 80b6074:	68bb      	ldr	r3, [r7, #8]
 80b6076:	6a3a      	ldr	r2, [r7, #32]
 80b6078:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80b607a:	68f8      	ldr	r0, [r7, #12]
 80b607c:	f001 f90e 	bl	80b729c <xTaskCreateStatic>
 80b6080:	4603      	mov	r3, r0
 80b6082:	613b      	str	r3, [r7, #16]
 80b6084:	e013      	b.n	80b60ae <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80b6086:	69bb      	ldr	r3, [r7, #24]
 80b6088:	2b00      	cmp	r3, #0
 80b608a:	d110      	bne.n	80b60ae <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80b608c:	6a3b      	ldr	r3, [r7, #32]
 80b608e:	b29a      	uxth	r2, r3
 80b6090:	f107 0310 	add.w	r3, r7, #16
 80b6094:	9301      	str	r3, [sp, #4]
 80b6096:	69fb      	ldr	r3, [r7, #28]
 80b6098:	9300      	str	r3, [sp, #0]
 80b609a:	68bb      	ldr	r3, [r7, #8]
 80b609c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80b609e:	68f8      	ldr	r0, [r7, #12]
 80b60a0:	f001 f959 	bl	80b7356 <xTaskCreate>
 80b60a4:	4603      	mov	r3, r0
 80b60a6:	2b01      	cmp	r3, #1
 80b60a8:	d001      	beq.n	80b60ae <osThreadNew+0x11a>
            hTask = NULL;
 80b60aa:	2300      	movs	r3, #0
 80b60ac:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80b60ae:	693b      	ldr	r3, [r7, #16]
}
 80b60b0:	4618      	mov	r0, r3
 80b60b2:	3728      	adds	r7, #40	; 0x28
 80b60b4:	46bd      	mov	sp, r7
 80b60b6:	bd80      	pop	{r7, pc}

080b60b8 <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 80b60b8:	b580      	push	{r7, lr}
 80b60ba:	b086      	sub	sp, #24
 80b60bc:	af00      	add	r7, sp, #0
 80b60be:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80b60c0:	687b      	ldr	r3, [r7, #4]
 80b60c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80b60c4:	f3ef 8305 	mrs	r3, IPSR
 80b60c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80b60ca:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80b60cc:	2b00      	cmp	r3, #0
 80b60ce:	d003      	beq.n	80b60d8 <osThreadSuspend+0x20>
    stat = osErrorISR;
 80b60d0:	f06f 0305 	mvn.w	r3, #5
 80b60d4:	617b      	str	r3, [r7, #20]
 80b60d6:	e00b      	b.n	80b60f0 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 80b60d8:	693b      	ldr	r3, [r7, #16]
 80b60da:	2b00      	cmp	r3, #0
 80b60dc:	d103      	bne.n	80b60e6 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 80b60de:	f06f 0303 	mvn.w	r3, #3
 80b60e2:	617b      	str	r3, [r7, #20]
 80b60e4:	e004      	b.n	80b60f0 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 80b60e6:	2300      	movs	r3, #0
 80b60e8:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 80b60ea:	6938      	ldr	r0, [r7, #16]
 80b60ec:	f001 faac 	bl	80b7648 <vTaskSuspend>
  }

  return (stat);
 80b60f0:	697b      	ldr	r3, [r7, #20]
}
 80b60f2:	4618      	mov	r0, r3
 80b60f4:	3718      	adds	r7, #24
 80b60f6:	46bd      	mov	sp, r7
 80b60f8:	bd80      	pop	{r7, pc}

080b60fa <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80b60fa:	b580      	push	{r7, lr}
 80b60fc:	b084      	sub	sp, #16
 80b60fe:	af00      	add	r7, sp, #0
 80b6100:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80b6102:	f3ef 8305 	mrs	r3, IPSR
 80b6106:	60bb      	str	r3, [r7, #8]
  return(result);
 80b6108:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80b610a:	2b00      	cmp	r3, #0
 80b610c:	d003      	beq.n	80b6116 <osDelay+0x1c>
    stat = osErrorISR;
 80b610e:	f06f 0305 	mvn.w	r3, #5
 80b6112:	60fb      	str	r3, [r7, #12]
 80b6114:	e007      	b.n	80b6126 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80b6116:	2300      	movs	r3, #0
 80b6118:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80b611a:	687b      	ldr	r3, [r7, #4]
 80b611c:	2b00      	cmp	r3, #0
 80b611e:	d002      	beq.n	80b6126 <osDelay+0x2c>
      vTaskDelay(ticks);
 80b6120:	6878      	ldr	r0, [r7, #4]
 80b6122:	f001 fa5d 	bl	80b75e0 <vTaskDelay>
    }
  }

  return (stat);
 80b6126:	68fb      	ldr	r3, [r7, #12]
}
 80b6128:	4618      	mov	r0, r3
 80b612a:	3710      	adds	r7, #16
 80b612c:	46bd      	mov	sp, r7
 80b612e:	bd80      	pop	{r7, pc}

080b6130 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 80b6130:	b580      	push	{r7, lr}
 80b6132:	b084      	sub	sp, #16
 80b6134:	af00      	add	r7, sp, #0
 80b6136:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 80b6138:	6878      	ldr	r0, [r7, #4]
 80b613a:	f002 fc46 	bl	80b89ca <pvTimerGetTimerID>
 80b613e:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 80b6140:	68fb      	ldr	r3, [r7, #12]
 80b6142:	2b00      	cmp	r3, #0
 80b6144:	d005      	beq.n	80b6152 <TimerCallback+0x22>
    callb->func (callb->arg);
 80b6146:	68fb      	ldr	r3, [r7, #12]
 80b6148:	681b      	ldr	r3, [r3, #0]
 80b614a:	68fa      	ldr	r2, [r7, #12]
 80b614c:	6852      	ldr	r2, [r2, #4]
 80b614e:	4610      	mov	r0, r2
 80b6150:	4798      	blx	r3
  }
}
 80b6152:	bf00      	nop
 80b6154:	3710      	adds	r7, #16
 80b6156:	46bd      	mov	sp, r7
 80b6158:	bd80      	pop	{r7, pc}
	...

080b615c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 80b615c:	b580      	push	{r7, lr}
 80b615e:	b08c      	sub	sp, #48	; 0x30
 80b6160:	af02      	add	r7, sp, #8
 80b6162:	60f8      	str	r0, [r7, #12]
 80b6164:	607a      	str	r2, [r7, #4]
 80b6166:	603b      	str	r3, [r7, #0]
 80b6168:	460b      	mov	r3, r1
 80b616a:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 80b616c:	2300      	movs	r3, #0
 80b616e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80b6170:	f3ef 8305 	mrs	r3, IPSR
 80b6174:	613b      	str	r3, [r7, #16]
  return(result);
 80b6176:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 80b6178:	2b00      	cmp	r3, #0
 80b617a:	d163      	bne.n	80b6244 <osTimerNew+0xe8>
 80b617c:	68fb      	ldr	r3, [r7, #12]
 80b617e:	2b00      	cmp	r3, #0
 80b6180:	d060      	beq.n	80b6244 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 80b6182:	2008      	movs	r0, #8
 80b6184:	f002 fe90 	bl	80b8ea8 <pvPortMalloc>
 80b6188:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 80b618a:	697b      	ldr	r3, [r7, #20]
 80b618c:	2b00      	cmp	r3, #0
 80b618e:	d059      	beq.n	80b6244 <osTimerNew+0xe8>
      callb->func = func;
 80b6190:	697b      	ldr	r3, [r7, #20]
 80b6192:	68fa      	ldr	r2, [r7, #12]
 80b6194:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 80b6196:	697b      	ldr	r3, [r7, #20]
 80b6198:	687a      	ldr	r2, [r7, #4]
 80b619a:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 80b619c:	7afb      	ldrb	r3, [r7, #11]
 80b619e:	2b00      	cmp	r3, #0
 80b61a0:	d102      	bne.n	80b61a8 <osTimerNew+0x4c>
        reload = pdFALSE;
 80b61a2:	2300      	movs	r3, #0
 80b61a4:	61fb      	str	r3, [r7, #28]
 80b61a6:	e001      	b.n	80b61ac <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 80b61a8:	2301      	movs	r3, #1
 80b61aa:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 80b61ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80b61b0:	61bb      	str	r3, [r7, #24]
      name = NULL;
 80b61b2:	2300      	movs	r3, #0
 80b61b4:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 80b61b6:	683b      	ldr	r3, [r7, #0]
 80b61b8:	2b00      	cmp	r3, #0
 80b61ba:	d01c      	beq.n	80b61f6 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 80b61bc:	683b      	ldr	r3, [r7, #0]
 80b61be:	681b      	ldr	r3, [r3, #0]
 80b61c0:	2b00      	cmp	r3, #0
 80b61c2:	d002      	beq.n	80b61ca <osTimerNew+0x6e>
          name = attr->name;
 80b61c4:	683b      	ldr	r3, [r7, #0]
 80b61c6:	681b      	ldr	r3, [r3, #0]
 80b61c8:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 80b61ca:	683b      	ldr	r3, [r7, #0]
 80b61cc:	689b      	ldr	r3, [r3, #8]
 80b61ce:	2b00      	cmp	r3, #0
 80b61d0:	d006      	beq.n	80b61e0 <osTimerNew+0x84>
 80b61d2:	683b      	ldr	r3, [r7, #0]
 80b61d4:	68db      	ldr	r3, [r3, #12]
 80b61d6:	2b2b      	cmp	r3, #43	; 0x2b
 80b61d8:	d902      	bls.n	80b61e0 <osTimerNew+0x84>
          mem = 1;
 80b61da:	2301      	movs	r3, #1
 80b61dc:	61bb      	str	r3, [r7, #24]
 80b61de:	e00c      	b.n	80b61fa <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80b61e0:	683b      	ldr	r3, [r7, #0]
 80b61e2:	689b      	ldr	r3, [r3, #8]
 80b61e4:	2b00      	cmp	r3, #0
 80b61e6:	d108      	bne.n	80b61fa <osTimerNew+0x9e>
 80b61e8:	683b      	ldr	r3, [r7, #0]
 80b61ea:	68db      	ldr	r3, [r3, #12]
 80b61ec:	2b00      	cmp	r3, #0
 80b61ee:	d104      	bne.n	80b61fa <osTimerNew+0x9e>
            mem = 0;
 80b61f0:	2300      	movs	r3, #0
 80b61f2:	61bb      	str	r3, [r7, #24]
 80b61f4:	e001      	b.n	80b61fa <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 80b61f6:	2300      	movs	r3, #0
 80b61f8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80b61fa:	69bb      	ldr	r3, [r7, #24]
 80b61fc:	2b01      	cmp	r3, #1
 80b61fe:	d10c      	bne.n	80b621a <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 80b6200:	683b      	ldr	r3, [r7, #0]
 80b6202:	689b      	ldr	r3, [r3, #8]
 80b6204:	9301      	str	r3, [sp, #4]
 80b6206:	4b12      	ldr	r3, [pc, #72]	; (80b6250 <osTimerNew+0xf4>)
 80b6208:	9300      	str	r3, [sp, #0]
 80b620a:	697b      	ldr	r3, [r7, #20]
 80b620c:	69fa      	ldr	r2, [r7, #28]
 80b620e:	2101      	movs	r1, #1
 80b6210:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80b6212:	f002 f832 	bl	80b827a <xTimerCreateStatic>
 80b6216:	6238      	str	r0, [r7, #32]
 80b6218:	e00b      	b.n	80b6232 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 80b621a:	69bb      	ldr	r3, [r7, #24]
 80b621c:	2b00      	cmp	r3, #0
 80b621e:	d108      	bne.n	80b6232 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 80b6220:	4b0b      	ldr	r3, [pc, #44]	; (80b6250 <osTimerNew+0xf4>)
 80b6222:	9300      	str	r3, [sp, #0]
 80b6224:	697b      	ldr	r3, [r7, #20]
 80b6226:	69fa      	ldr	r2, [r7, #28]
 80b6228:	2101      	movs	r1, #1
 80b622a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80b622c:	f002 f804 	bl	80b8238 <xTimerCreate>
 80b6230:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 80b6232:	6a3b      	ldr	r3, [r7, #32]
 80b6234:	2b00      	cmp	r3, #0
 80b6236:	d105      	bne.n	80b6244 <osTimerNew+0xe8>
 80b6238:	697b      	ldr	r3, [r7, #20]
 80b623a:	2b00      	cmp	r3, #0
 80b623c:	d002      	beq.n	80b6244 <osTimerNew+0xe8>
        vPortFree (callb);
 80b623e:	6978      	ldr	r0, [r7, #20]
 80b6240:	f002 fefe 	bl	80b9040 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 80b6244:	6a3b      	ldr	r3, [r7, #32]
}
 80b6246:	4618      	mov	r0, r3
 80b6248:	3728      	adds	r7, #40	; 0x28
 80b624a:	46bd      	mov	sp, r7
 80b624c:	bd80      	pop	{r7, pc}
 80b624e:	bf00      	nop
 80b6250:	080b6131 	.word	0x080b6131

080b6254 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 80b6254:	b580      	push	{r7, lr}
 80b6256:	b088      	sub	sp, #32
 80b6258:	af02      	add	r7, sp, #8
 80b625a:	6078      	str	r0, [r7, #4]
 80b625c:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 80b625e:	687b      	ldr	r3, [r7, #4]
 80b6260:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80b6262:	f3ef 8305 	mrs	r3, IPSR
 80b6266:	60fb      	str	r3, [r7, #12]
  return(result);
 80b6268:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80b626a:	2b00      	cmp	r3, #0
 80b626c:	d003      	beq.n	80b6276 <osTimerStart+0x22>
    stat = osErrorISR;
 80b626e:	f06f 0305 	mvn.w	r3, #5
 80b6272:	617b      	str	r3, [r7, #20]
 80b6274:	e017      	b.n	80b62a6 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 80b6276:	693b      	ldr	r3, [r7, #16]
 80b6278:	2b00      	cmp	r3, #0
 80b627a:	d103      	bne.n	80b6284 <osTimerStart+0x30>
    stat = osErrorParameter;
 80b627c:	f06f 0303 	mvn.w	r3, #3
 80b6280:	617b      	str	r3, [r7, #20]
 80b6282:	e010      	b.n	80b62a6 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 80b6284:	2300      	movs	r3, #0
 80b6286:	9300      	str	r3, [sp, #0]
 80b6288:	2300      	movs	r3, #0
 80b628a:	683a      	ldr	r2, [r7, #0]
 80b628c:	2104      	movs	r1, #4
 80b628e:	6938      	ldr	r0, [r7, #16]
 80b6290:	f002 f86c 	bl	80b836c <xTimerGenericCommand>
 80b6294:	4603      	mov	r3, r0
 80b6296:	2b01      	cmp	r3, #1
 80b6298:	d102      	bne.n	80b62a0 <osTimerStart+0x4c>
      stat = osOK;
 80b629a:	2300      	movs	r3, #0
 80b629c:	617b      	str	r3, [r7, #20]
 80b629e:	e002      	b.n	80b62a6 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 80b62a0:	f06f 0302 	mvn.w	r3, #2
 80b62a4:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80b62a6:	697b      	ldr	r3, [r7, #20]
}
 80b62a8:	4618      	mov	r0, r3
 80b62aa:	3718      	adds	r7, #24
 80b62ac:	46bd      	mov	sp, r7
 80b62ae:	bd80      	pop	{r7, pc}

080b62b0 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 80b62b0:	b580      	push	{r7, lr}
 80b62b2:	b088      	sub	sp, #32
 80b62b4:	af02      	add	r7, sp, #8
 80b62b6:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 80b62b8:	687b      	ldr	r3, [r7, #4]
 80b62ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80b62bc:	f3ef 8305 	mrs	r3, IPSR
 80b62c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80b62c2:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80b62c4:	2b00      	cmp	r3, #0
 80b62c6:	d003      	beq.n	80b62d0 <osTimerStop+0x20>
    stat = osErrorISR;
 80b62c8:	f06f 0305 	mvn.w	r3, #5
 80b62cc:	617b      	str	r3, [r7, #20]
 80b62ce:	e021      	b.n	80b6314 <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 80b62d0:	693b      	ldr	r3, [r7, #16]
 80b62d2:	2b00      	cmp	r3, #0
 80b62d4:	d103      	bne.n	80b62de <osTimerStop+0x2e>
    stat = osErrorParameter;
 80b62d6:	f06f 0303 	mvn.w	r3, #3
 80b62da:	617b      	str	r3, [r7, #20]
 80b62dc:	e01a      	b.n	80b6314 <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 80b62de:	6938      	ldr	r0, [r7, #16]
 80b62e0:	f002 fb4a 	bl	80b8978 <xTimerIsTimerActive>
 80b62e4:	4603      	mov	r3, r0
 80b62e6:	2b00      	cmp	r3, #0
 80b62e8:	d103      	bne.n	80b62f2 <osTimerStop+0x42>
      stat = osErrorResource;
 80b62ea:	f06f 0302 	mvn.w	r3, #2
 80b62ee:	617b      	str	r3, [r7, #20]
 80b62f0:	e010      	b.n	80b6314 <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 80b62f2:	2300      	movs	r3, #0
 80b62f4:	9300      	str	r3, [sp, #0]
 80b62f6:	2300      	movs	r3, #0
 80b62f8:	2200      	movs	r2, #0
 80b62fa:	2103      	movs	r1, #3
 80b62fc:	6938      	ldr	r0, [r7, #16]
 80b62fe:	f002 f835 	bl	80b836c <xTimerGenericCommand>
 80b6302:	4603      	mov	r3, r0
 80b6304:	2b01      	cmp	r3, #1
 80b6306:	d102      	bne.n	80b630e <osTimerStop+0x5e>
        stat = osOK;
 80b6308:	2300      	movs	r3, #0
 80b630a:	617b      	str	r3, [r7, #20]
 80b630c:	e002      	b.n	80b6314 <osTimerStop+0x64>
      } else {
        stat = osError;
 80b630e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80b6312:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80b6314:	697b      	ldr	r3, [r7, #20]
}
 80b6316:	4618      	mov	r0, r3
 80b6318:	3718      	adds	r7, #24
 80b631a:	46bd      	mov	sp, r7
 80b631c:	bd80      	pop	{r7, pc}

080b631e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80b631e:	b580      	push	{r7, lr}
 80b6320:	b08a      	sub	sp, #40	; 0x28
 80b6322:	af02      	add	r7, sp, #8
 80b6324:	60f8      	str	r0, [r7, #12]
 80b6326:	60b9      	str	r1, [r7, #8]
 80b6328:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80b632a:	2300      	movs	r3, #0
 80b632c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80b632e:	f3ef 8305 	mrs	r3, IPSR
 80b6332:	613b      	str	r3, [r7, #16]
  return(result);
 80b6334:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80b6336:	2b00      	cmp	r3, #0
 80b6338:	d15f      	bne.n	80b63fa <osMessageQueueNew+0xdc>
 80b633a:	68fb      	ldr	r3, [r7, #12]
 80b633c:	2b00      	cmp	r3, #0
 80b633e:	d05c      	beq.n	80b63fa <osMessageQueueNew+0xdc>
 80b6340:	68bb      	ldr	r3, [r7, #8]
 80b6342:	2b00      	cmp	r3, #0
 80b6344:	d059      	beq.n	80b63fa <osMessageQueueNew+0xdc>
    mem = -1;
 80b6346:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80b634a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80b634c:	687b      	ldr	r3, [r7, #4]
 80b634e:	2b00      	cmp	r3, #0
 80b6350:	d029      	beq.n	80b63a6 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80b6352:	687b      	ldr	r3, [r7, #4]
 80b6354:	689b      	ldr	r3, [r3, #8]
 80b6356:	2b00      	cmp	r3, #0
 80b6358:	d012      	beq.n	80b6380 <osMessageQueueNew+0x62>
 80b635a:	687b      	ldr	r3, [r7, #4]
 80b635c:	68db      	ldr	r3, [r3, #12]
 80b635e:	2b4f      	cmp	r3, #79	; 0x4f
 80b6360:	d90e      	bls.n	80b6380 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80b6362:	687b      	ldr	r3, [r7, #4]
 80b6364:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80b6366:	2b00      	cmp	r3, #0
 80b6368:	d00a      	beq.n	80b6380 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80b636a:	687b      	ldr	r3, [r7, #4]
 80b636c:	695a      	ldr	r2, [r3, #20]
 80b636e:	68fb      	ldr	r3, [r7, #12]
 80b6370:	68b9      	ldr	r1, [r7, #8]
 80b6372:	fb01 f303 	mul.w	r3, r1, r3
 80b6376:	429a      	cmp	r2, r3
 80b6378:	d302      	bcc.n	80b6380 <osMessageQueueNew+0x62>
        mem = 1;
 80b637a:	2301      	movs	r3, #1
 80b637c:	61bb      	str	r3, [r7, #24]
 80b637e:	e014      	b.n	80b63aa <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80b6380:	687b      	ldr	r3, [r7, #4]
 80b6382:	689b      	ldr	r3, [r3, #8]
 80b6384:	2b00      	cmp	r3, #0
 80b6386:	d110      	bne.n	80b63aa <osMessageQueueNew+0x8c>
 80b6388:	687b      	ldr	r3, [r7, #4]
 80b638a:	68db      	ldr	r3, [r3, #12]
 80b638c:	2b00      	cmp	r3, #0
 80b638e:	d10c      	bne.n	80b63aa <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80b6390:	687b      	ldr	r3, [r7, #4]
 80b6392:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80b6394:	2b00      	cmp	r3, #0
 80b6396:	d108      	bne.n	80b63aa <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80b6398:	687b      	ldr	r3, [r7, #4]
 80b639a:	695b      	ldr	r3, [r3, #20]
 80b639c:	2b00      	cmp	r3, #0
 80b639e:	d104      	bne.n	80b63aa <osMessageQueueNew+0x8c>
          mem = 0;
 80b63a0:	2300      	movs	r3, #0
 80b63a2:	61bb      	str	r3, [r7, #24]
 80b63a4:	e001      	b.n	80b63aa <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80b63a6:	2300      	movs	r3, #0
 80b63a8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80b63aa:	69bb      	ldr	r3, [r7, #24]
 80b63ac:	2b01      	cmp	r3, #1
 80b63ae:	d10b      	bne.n	80b63c8 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80b63b0:	687b      	ldr	r3, [r7, #4]
 80b63b2:	691a      	ldr	r2, [r3, #16]
 80b63b4:	687b      	ldr	r3, [r7, #4]
 80b63b6:	689b      	ldr	r3, [r3, #8]
 80b63b8:	2100      	movs	r1, #0
 80b63ba:	9100      	str	r1, [sp, #0]
 80b63bc:	68b9      	ldr	r1, [r7, #8]
 80b63be:	68f8      	ldr	r0, [r7, #12]
 80b63c0:	f000 fa2e 	bl	80b6820 <xQueueGenericCreateStatic>
 80b63c4:	61f8      	str	r0, [r7, #28]
 80b63c6:	e008      	b.n	80b63da <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80b63c8:	69bb      	ldr	r3, [r7, #24]
 80b63ca:	2b00      	cmp	r3, #0
 80b63cc:	d105      	bne.n	80b63da <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80b63ce:	2200      	movs	r2, #0
 80b63d0:	68b9      	ldr	r1, [r7, #8]
 80b63d2:	68f8      	ldr	r0, [r7, #12]
 80b63d4:	f000 fa9c 	bl	80b6910 <xQueueGenericCreate>
 80b63d8:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80b63da:	69fb      	ldr	r3, [r7, #28]
 80b63dc:	2b00      	cmp	r3, #0
 80b63de:	d00c      	beq.n	80b63fa <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80b63e0:	687b      	ldr	r3, [r7, #4]
 80b63e2:	2b00      	cmp	r3, #0
 80b63e4:	d003      	beq.n	80b63ee <osMessageQueueNew+0xd0>
        name = attr->name;
 80b63e6:	687b      	ldr	r3, [r7, #4]
 80b63e8:	681b      	ldr	r3, [r3, #0]
 80b63ea:	617b      	str	r3, [r7, #20]
 80b63ec:	e001      	b.n	80b63f2 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80b63ee:	2300      	movs	r3, #0
 80b63f0:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80b63f2:	6979      	ldr	r1, [r7, #20]
 80b63f4:	69f8      	ldr	r0, [r7, #28]
 80b63f6:	f000 fef3 	bl	80b71e0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80b63fa:	69fb      	ldr	r3, [r7, #28]
}
 80b63fc:	4618      	mov	r0, r3
 80b63fe:	3720      	adds	r7, #32
 80b6400:	46bd      	mov	sp, r7
 80b6402:	bd80      	pop	{r7, pc}

080b6404 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80b6404:	b580      	push	{r7, lr}
 80b6406:	b088      	sub	sp, #32
 80b6408:	af00      	add	r7, sp, #0
 80b640a:	60f8      	str	r0, [r7, #12]
 80b640c:	60b9      	str	r1, [r7, #8]
 80b640e:	603b      	str	r3, [r7, #0]
 80b6410:	4613      	mov	r3, r2
 80b6412:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80b6414:	68fb      	ldr	r3, [r7, #12]
 80b6416:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80b6418:	2300      	movs	r3, #0
 80b641a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80b641c:	f3ef 8305 	mrs	r3, IPSR
 80b6420:	617b      	str	r3, [r7, #20]
  return(result);
 80b6422:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80b6424:	2b00      	cmp	r3, #0
 80b6426:	d028      	beq.n	80b647a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80b6428:	69bb      	ldr	r3, [r7, #24]
 80b642a:	2b00      	cmp	r3, #0
 80b642c:	d005      	beq.n	80b643a <osMessageQueuePut+0x36>
 80b642e:	68bb      	ldr	r3, [r7, #8]
 80b6430:	2b00      	cmp	r3, #0
 80b6432:	d002      	beq.n	80b643a <osMessageQueuePut+0x36>
 80b6434:	683b      	ldr	r3, [r7, #0]
 80b6436:	2b00      	cmp	r3, #0
 80b6438:	d003      	beq.n	80b6442 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80b643a:	f06f 0303 	mvn.w	r3, #3
 80b643e:	61fb      	str	r3, [r7, #28]
 80b6440:	e038      	b.n	80b64b4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80b6442:	2300      	movs	r3, #0
 80b6444:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80b6446:	f107 0210 	add.w	r2, r7, #16
 80b644a:	2300      	movs	r3, #0
 80b644c:	68b9      	ldr	r1, [r7, #8]
 80b644e:	69b8      	ldr	r0, [r7, #24]
 80b6450:	f000 fbba 	bl	80b6bc8 <xQueueGenericSendFromISR>
 80b6454:	4603      	mov	r3, r0
 80b6456:	2b01      	cmp	r3, #1
 80b6458:	d003      	beq.n	80b6462 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80b645a:	f06f 0302 	mvn.w	r3, #2
 80b645e:	61fb      	str	r3, [r7, #28]
 80b6460:	e028      	b.n	80b64b4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80b6462:	693b      	ldr	r3, [r7, #16]
 80b6464:	2b00      	cmp	r3, #0
 80b6466:	d025      	beq.n	80b64b4 <osMessageQueuePut+0xb0>
 80b6468:	4b15      	ldr	r3, [pc, #84]	; (80b64c0 <osMessageQueuePut+0xbc>)
 80b646a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80b646e:	601a      	str	r2, [r3, #0]
 80b6470:	f3bf 8f4f 	dsb	sy
 80b6474:	f3bf 8f6f 	isb	sy
 80b6478:	e01c      	b.n	80b64b4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80b647a:	69bb      	ldr	r3, [r7, #24]
 80b647c:	2b00      	cmp	r3, #0
 80b647e:	d002      	beq.n	80b6486 <osMessageQueuePut+0x82>
 80b6480:	68bb      	ldr	r3, [r7, #8]
 80b6482:	2b00      	cmp	r3, #0
 80b6484:	d103      	bne.n	80b648e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80b6486:	f06f 0303 	mvn.w	r3, #3
 80b648a:	61fb      	str	r3, [r7, #28]
 80b648c:	e012      	b.n	80b64b4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80b648e:	2300      	movs	r3, #0
 80b6490:	683a      	ldr	r2, [r7, #0]
 80b6492:	68b9      	ldr	r1, [r7, #8]
 80b6494:	69b8      	ldr	r0, [r7, #24]
 80b6496:	f000 fa99 	bl	80b69cc <xQueueGenericSend>
 80b649a:	4603      	mov	r3, r0
 80b649c:	2b01      	cmp	r3, #1
 80b649e:	d009      	beq.n	80b64b4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80b64a0:	683b      	ldr	r3, [r7, #0]
 80b64a2:	2b00      	cmp	r3, #0
 80b64a4:	d003      	beq.n	80b64ae <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80b64a6:	f06f 0301 	mvn.w	r3, #1
 80b64aa:	61fb      	str	r3, [r7, #28]
 80b64ac:	e002      	b.n	80b64b4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80b64ae:	f06f 0302 	mvn.w	r3, #2
 80b64b2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80b64b4:	69fb      	ldr	r3, [r7, #28]
}
 80b64b6:	4618      	mov	r0, r3
 80b64b8:	3720      	adds	r7, #32
 80b64ba:	46bd      	mov	sp, r7
 80b64bc:	bd80      	pop	{r7, pc}
 80b64be:	bf00      	nop
 80b64c0:	e000ed04 	.word	0xe000ed04

080b64c4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80b64c4:	b580      	push	{r7, lr}
 80b64c6:	b088      	sub	sp, #32
 80b64c8:	af00      	add	r7, sp, #0
 80b64ca:	60f8      	str	r0, [r7, #12]
 80b64cc:	60b9      	str	r1, [r7, #8]
 80b64ce:	607a      	str	r2, [r7, #4]
 80b64d0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80b64d2:	68fb      	ldr	r3, [r7, #12]
 80b64d4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80b64d6:	2300      	movs	r3, #0
 80b64d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80b64da:	f3ef 8305 	mrs	r3, IPSR
 80b64de:	617b      	str	r3, [r7, #20]
  return(result);
 80b64e0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80b64e2:	2b00      	cmp	r3, #0
 80b64e4:	d028      	beq.n	80b6538 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80b64e6:	69bb      	ldr	r3, [r7, #24]
 80b64e8:	2b00      	cmp	r3, #0
 80b64ea:	d005      	beq.n	80b64f8 <osMessageQueueGet+0x34>
 80b64ec:	68bb      	ldr	r3, [r7, #8]
 80b64ee:	2b00      	cmp	r3, #0
 80b64f0:	d002      	beq.n	80b64f8 <osMessageQueueGet+0x34>
 80b64f2:	683b      	ldr	r3, [r7, #0]
 80b64f4:	2b00      	cmp	r3, #0
 80b64f6:	d003      	beq.n	80b6500 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80b64f8:	f06f 0303 	mvn.w	r3, #3
 80b64fc:	61fb      	str	r3, [r7, #28]
 80b64fe:	e037      	b.n	80b6570 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80b6500:	2300      	movs	r3, #0
 80b6502:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80b6504:	f107 0310 	add.w	r3, r7, #16
 80b6508:	461a      	mov	r2, r3
 80b650a:	68b9      	ldr	r1, [r7, #8]
 80b650c:	69b8      	ldr	r0, [r7, #24]
 80b650e:	f000 fcd7 	bl	80b6ec0 <xQueueReceiveFromISR>
 80b6512:	4603      	mov	r3, r0
 80b6514:	2b01      	cmp	r3, #1
 80b6516:	d003      	beq.n	80b6520 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80b6518:	f06f 0302 	mvn.w	r3, #2
 80b651c:	61fb      	str	r3, [r7, #28]
 80b651e:	e027      	b.n	80b6570 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80b6520:	693b      	ldr	r3, [r7, #16]
 80b6522:	2b00      	cmp	r3, #0
 80b6524:	d024      	beq.n	80b6570 <osMessageQueueGet+0xac>
 80b6526:	4b15      	ldr	r3, [pc, #84]	; (80b657c <osMessageQueueGet+0xb8>)
 80b6528:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80b652c:	601a      	str	r2, [r3, #0]
 80b652e:	f3bf 8f4f 	dsb	sy
 80b6532:	f3bf 8f6f 	isb	sy
 80b6536:	e01b      	b.n	80b6570 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80b6538:	69bb      	ldr	r3, [r7, #24]
 80b653a:	2b00      	cmp	r3, #0
 80b653c:	d002      	beq.n	80b6544 <osMessageQueueGet+0x80>
 80b653e:	68bb      	ldr	r3, [r7, #8]
 80b6540:	2b00      	cmp	r3, #0
 80b6542:	d103      	bne.n	80b654c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80b6544:	f06f 0303 	mvn.w	r3, #3
 80b6548:	61fb      	str	r3, [r7, #28]
 80b654a:	e011      	b.n	80b6570 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80b654c:	683a      	ldr	r2, [r7, #0]
 80b654e:	68b9      	ldr	r1, [r7, #8]
 80b6550:	69b8      	ldr	r0, [r7, #24]
 80b6552:	f000 fbd5 	bl	80b6d00 <xQueueReceive>
 80b6556:	4603      	mov	r3, r0
 80b6558:	2b01      	cmp	r3, #1
 80b655a:	d009      	beq.n	80b6570 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80b655c:	683b      	ldr	r3, [r7, #0]
 80b655e:	2b00      	cmp	r3, #0
 80b6560:	d003      	beq.n	80b656a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80b6562:	f06f 0301 	mvn.w	r3, #1
 80b6566:	61fb      	str	r3, [r7, #28]
 80b6568:	e002      	b.n	80b6570 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80b656a:	f06f 0302 	mvn.w	r3, #2
 80b656e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80b6570:	69fb      	ldr	r3, [r7, #28]
}
 80b6572:	4618      	mov	r0, r3
 80b6574:	3720      	adds	r7, #32
 80b6576:	46bd      	mov	sp, r7
 80b6578:	bd80      	pop	{r7, pc}
 80b657a:	bf00      	nop
 80b657c:	e000ed04 	.word	0xe000ed04

080b6580 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80b6580:	b480      	push	{r7}
 80b6582:	b085      	sub	sp, #20
 80b6584:	af00      	add	r7, sp, #0
 80b6586:	60f8      	str	r0, [r7, #12]
 80b6588:	60b9      	str	r1, [r7, #8]
 80b658a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80b658c:	68fb      	ldr	r3, [r7, #12]
 80b658e:	4a07      	ldr	r2, [pc, #28]	; (80b65ac <vApplicationGetIdleTaskMemory+0x2c>)
 80b6590:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80b6592:	68bb      	ldr	r3, [r7, #8]
 80b6594:	4a06      	ldr	r2, [pc, #24]	; (80b65b0 <vApplicationGetIdleTaskMemory+0x30>)
 80b6596:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80b6598:	687b      	ldr	r3, [r7, #4]
 80b659a:	2280      	movs	r2, #128	; 0x80
 80b659c:	601a      	str	r2, [r3, #0]
}
 80b659e:	bf00      	nop
 80b65a0:	3714      	adds	r7, #20
 80b65a2:	46bd      	mov	sp, r7
 80b65a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b65a8:	4770      	bx	lr
 80b65aa:	bf00      	nop
 80b65ac:	20009060 	.word	0x20009060
 80b65b0:	200090bc 	.word	0x200090bc

080b65b4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80b65b4:	b480      	push	{r7}
 80b65b6:	b085      	sub	sp, #20
 80b65b8:	af00      	add	r7, sp, #0
 80b65ba:	60f8      	str	r0, [r7, #12]
 80b65bc:	60b9      	str	r1, [r7, #8]
 80b65be:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80b65c0:	68fb      	ldr	r3, [r7, #12]
 80b65c2:	4a07      	ldr	r2, [pc, #28]	; (80b65e0 <vApplicationGetTimerTaskMemory+0x2c>)
 80b65c4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80b65c6:	68bb      	ldr	r3, [r7, #8]
 80b65c8:	4a06      	ldr	r2, [pc, #24]	; (80b65e4 <vApplicationGetTimerTaskMemory+0x30>)
 80b65ca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80b65cc:	687b      	ldr	r3, [r7, #4]
 80b65ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80b65d2:	601a      	str	r2, [r3, #0]
}
 80b65d4:	bf00      	nop
 80b65d6:	3714      	adds	r7, #20
 80b65d8:	46bd      	mov	sp, r7
 80b65da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b65de:	4770      	bx	lr
 80b65e0:	200092bc 	.word	0x200092bc
 80b65e4:	20009318 	.word	0x20009318

080b65e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80b65e8:	b480      	push	{r7}
 80b65ea:	b083      	sub	sp, #12
 80b65ec:	af00      	add	r7, sp, #0
 80b65ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80b65f0:	687b      	ldr	r3, [r7, #4]
 80b65f2:	f103 0208 	add.w	r2, r3, #8
 80b65f6:	687b      	ldr	r3, [r7, #4]
 80b65f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80b65fa:	687b      	ldr	r3, [r7, #4]
 80b65fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80b6600:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80b6602:	687b      	ldr	r3, [r7, #4]
 80b6604:	f103 0208 	add.w	r2, r3, #8
 80b6608:	687b      	ldr	r3, [r7, #4]
 80b660a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80b660c:	687b      	ldr	r3, [r7, #4]
 80b660e:	f103 0208 	add.w	r2, r3, #8
 80b6612:	687b      	ldr	r3, [r7, #4]
 80b6614:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80b6616:	687b      	ldr	r3, [r7, #4]
 80b6618:	2200      	movs	r2, #0
 80b661a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80b661c:	bf00      	nop
 80b661e:	370c      	adds	r7, #12
 80b6620:	46bd      	mov	sp, r7
 80b6622:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b6626:	4770      	bx	lr

080b6628 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80b6628:	b480      	push	{r7}
 80b662a:	b083      	sub	sp, #12
 80b662c:	af00      	add	r7, sp, #0
 80b662e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80b6630:	687b      	ldr	r3, [r7, #4]
 80b6632:	2200      	movs	r2, #0
 80b6634:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80b6636:	bf00      	nop
 80b6638:	370c      	adds	r7, #12
 80b663a:	46bd      	mov	sp, r7
 80b663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b6640:	4770      	bx	lr

080b6642 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80b6642:	b480      	push	{r7}
 80b6644:	b085      	sub	sp, #20
 80b6646:	af00      	add	r7, sp, #0
 80b6648:	6078      	str	r0, [r7, #4]
 80b664a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80b664c:	687b      	ldr	r3, [r7, #4]
 80b664e:	685b      	ldr	r3, [r3, #4]
 80b6650:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80b6652:	683b      	ldr	r3, [r7, #0]
 80b6654:	68fa      	ldr	r2, [r7, #12]
 80b6656:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80b6658:	68fb      	ldr	r3, [r7, #12]
 80b665a:	689a      	ldr	r2, [r3, #8]
 80b665c:	683b      	ldr	r3, [r7, #0]
 80b665e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80b6660:	68fb      	ldr	r3, [r7, #12]
 80b6662:	689b      	ldr	r3, [r3, #8]
 80b6664:	683a      	ldr	r2, [r7, #0]
 80b6666:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80b6668:	68fb      	ldr	r3, [r7, #12]
 80b666a:	683a      	ldr	r2, [r7, #0]
 80b666c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80b666e:	683b      	ldr	r3, [r7, #0]
 80b6670:	687a      	ldr	r2, [r7, #4]
 80b6672:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80b6674:	687b      	ldr	r3, [r7, #4]
 80b6676:	681b      	ldr	r3, [r3, #0]
 80b6678:	1c5a      	adds	r2, r3, #1
 80b667a:	687b      	ldr	r3, [r7, #4]
 80b667c:	601a      	str	r2, [r3, #0]
}
 80b667e:	bf00      	nop
 80b6680:	3714      	adds	r7, #20
 80b6682:	46bd      	mov	sp, r7
 80b6684:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b6688:	4770      	bx	lr

080b668a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80b668a:	b480      	push	{r7}
 80b668c:	b085      	sub	sp, #20
 80b668e:	af00      	add	r7, sp, #0
 80b6690:	6078      	str	r0, [r7, #4]
 80b6692:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80b6694:	683b      	ldr	r3, [r7, #0]
 80b6696:	681b      	ldr	r3, [r3, #0]
 80b6698:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80b669a:	68bb      	ldr	r3, [r7, #8]
 80b669c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80b66a0:	d103      	bne.n	80b66aa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80b66a2:	687b      	ldr	r3, [r7, #4]
 80b66a4:	691b      	ldr	r3, [r3, #16]
 80b66a6:	60fb      	str	r3, [r7, #12]
 80b66a8:	e00c      	b.n	80b66c4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80b66aa:	687b      	ldr	r3, [r7, #4]
 80b66ac:	3308      	adds	r3, #8
 80b66ae:	60fb      	str	r3, [r7, #12]
 80b66b0:	e002      	b.n	80b66b8 <vListInsert+0x2e>
 80b66b2:	68fb      	ldr	r3, [r7, #12]
 80b66b4:	685b      	ldr	r3, [r3, #4]
 80b66b6:	60fb      	str	r3, [r7, #12]
 80b66b8:	68fb      	ldr	r3, [r7, #12]
 80b66ba:	685b      	ldr	r3, [r3, #4]
 80b66bc:	681b      	ldr	r3, [r3, #0]
 80b66be:	68ba      	ldr	r2, [r7, #8]
 80b66c0:	429a      	cmp	r2, r3
 80b66c2:	d2f6      	bcs.n	80b66b2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80b66c4:	68fb      	ldr	r3, [r7, #12]
 80b66c6:	685a      	ldr	r2, [r3, #4]
 80b66c8:	683b      	ldr	r3, [r7, #0]
 80b66ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80b66cc:	683b      	ldr	r3, [r7, #0]
 80b66ce:	685b      	ldr	r3, [r3, #4]
 80b66d0:	683a      	ldr	r2, [r7, #0]
 80b66d2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80b66d4:	683b      	ldr	r3, [r7, #0]
 80b66d6:	68fa      	ldr	r2, [r7, #12]
 80b66d8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80b66da:	68fb      	ldr	r3, [r7, #12]
 80b66dc:	683a      	ldr	r2, [r7, #0]
 80b66de:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80b66e0:	683b      	ldr	r3, [r7, #0]
 80b66e2:	687a      	ldr	r2, [r7, #4]
 80b66e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80b66e6:	687b      	ldr	r3, [r7, #4]
 80b66e8:	681b      	ldr	r3, [r3, #0]
 80b66ea:	1c5a      	adds	r2, r3, #1
 80b66ec:	687b      	ldr	r3, [r7, #4]
 80b66ee:	601a      	str	r2, [r3, #0]
}
 80b66f0:	bf00      	nop
 80b66f2:	3714      	adds	r7, #20
 80b66f4:	46bd      	mov	sp, r7
 80b66f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b66fa:	4770      	bx	lr

080b66fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80b66fc:	b480      	push	{r7}
 80b66fe:	b085      	sub	sp, #20
 80b6700:	af00      	add	r7, sp, #0
 80b6702:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80b6704:	687b      	ldr	r3, [r7, #4]
 80b6706:	691b      	ldr	r3, [r3, #16]
 80b6708:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80b670a:	687b      	ldr	r3, [r7, #4]
 80b670c:	685b      	ldr	r3, [r3, #4]
 80b670e:	687a      	ldr	r2, [r7, #4]
 80b6710:	6892      	ldr	r2, [r2, #8]
 80b6712:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80b6714:	687b      	ldr	r3, [r7, #4]
 80b6716:	689b      	ldr	r3, [r3, #8]
 80b6718:	687a      	ldr	r2, [r7, #4]
 80b671a:	6852      	ldr	r2, [r2, #4]
 80b671c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80b671e:	68fb      	ldr	r3, [r7, #12]
 80b6720:	685b      	ldr	r3, [r3, #4]
 80b6722:	687a      	ldr	r2, [r7, #4]
 80b6724:	429a      	cmp	r2, r3
 80b6726:	d103      	bne.n	80b6730 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80b6728:	687b      	ldr	r3, [r7, #4]
 80b672a:	689a      	ldr	r2, [r3, #8]
 80b672c:	68fb      	ldr	r3, [r7, #12]
 80b672e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80b6730:	687b      	ldr	r3, [r7, #4]
 80b6732:	2200      	movs	r2, #0
 80b6734:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80b6736:	68fb      	ldr	r3, [r7, #12]
 80b6738:	681b      	ldr	r3, [r3, #0]
 80b673a:	1e5a      	subs	r2, r3, #1
 80b673c:	68fb      	ldr	r3, [r7, #12]
 80b673e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80b6740:	68fb      	ldr	r3, [r7, #12]
 80b6742:	681b      	ldr	r3, [r3, #0]
}
 80b6744:	4618      	mov	r0, r3
 80b6746:	3714      	adds	r7, #20
 80b6748:	46bd      	mov	sp, r7
 80b674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b674e:	4770      	bx	lr

080b6750 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80b6750:	b580      	push	{r7, lr}
 80b6752:	b084      	sub	sp, #16
 80b6754:	af00      	add	r7, sp, #0
 80b6756:	6078      	str	r0, [r7, #4]
 80b6758:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80b675a:	687b      	ldr	r3, [r7, #4]
 80b675c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80b675e:	68fb      	ldr	r3, [r7, #12]
 80b6760:	2b00      	cmp	r3, #0
 80b6762:	d10a      	bne.n	80b677a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80b6764:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b6768:	f383 8811 	msr	BASEPRI, r3
 80b676c:	f3bf 8f6f 	isb	sy
 80b6770:	f3bf 8f4f 	dsb	sy
 80b6774:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80b6776:	bf00      	nop
 80b6778:	e7fe      	b.n	80b6778 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80b677a:	f002 fa73 	bl	80b8c64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80b677e:	68fb      	ldr	r3, [r7, #12]
 80b6780:	681a      	ldr	r2, [r3, #0]
 80b6782:	68fb      	ldr	r3, [r7, #12]
 80b6784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80b6786:	68f9      	ldr	r1, [r7, #12]
 80b6788:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80b678a:	fb01 f303 	mul.w	r3, r1, r3
 80b678e:	441a      	add	r2, r3
 80b6790:	68fb      	ldr	r3, [r7, #12]
 80b6792:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80b6794:	68fb      	ldr	r3, [r7, #12]
 80b6796:	2200      	movs	r2, #0
 80b6798:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80b679a:	68fb      	ldr	r3, [r7, #12]
 80b679c:	681a      	ldr	r2, [r3, #0]
 80b679e:	68fb      	ldr	r3, [r7, #12]
 80b67a0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80b67a2:	68fb      	ldr	r3, [r7, #12]
 80b67a4:	681a      	ldr	r2, [r3, #0]
 80b67a6:	68fb      	ldr	r3, [r7, #12]
 80b67a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80b67aa:	3b01      	subs	r3, #1
 80b67ac:	68f9      	ldr	r1, [r7, #12]
 80b67ae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80b67b0:	fb01 f303 	mul.w	r3, r1, r3
 80b67b4:	441a      	add	r2, r3
 80b67b6:	68fb      	ldr	r3, [r7, #12]
 80b67b8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80b67ba:	68fb      	ldr	r3, [r7, #12]
 80b67bc:	22ff      	movs	r2, #255	; 0xff
 80b67be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80b67c2:	68fb      	ldr	r3, [r7, #12]
 80b67c4:	22ff      	movs	r2, #255	; 0xff
 80b67c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80b67ca:	683b      	ldr	r3, [r7, #0]
 80b67cc:	2b00      	cmp	r3, #0
 80b67ce:	d114      	bne.n	80b67fa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80b67d0:	68fb      	ldr	r3, [r7, #12]
 80b67d2:	691b      	ldr	r3, [r3, #16]
 80b67d4:	2b00      	cmp	r3, #0
 80b67d6:	d01a      	beq.n	80b680e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80b67d8:	68fb      	ldr	r3, [r7, #12]
 80b67da:	3310      	adds	r3, #16
 80b67dc:	4618      	mov	r0, r3
 80b67de:	f001 fa45 	bl	80b7c6c <xTaskRemoveFromEventList>
 80b67e2:	4603      	mov	r3, r0
 80b67e4:	2b00      	cmp	r3, #0
 80b67e6:	d012      	beq.n	80b680e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80b67e8:	4b0c      	ldr	r3, [pc, #48]	; (80b681c <xQueueGenericReset+0xcc>)
 80b67ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80b67ee:	601a      	str	r2, [r3, #0]
 80b67f0:	f3bf 8f4f 	dsb	sy
 80b67f4:	f3bf 8f6f 	isb	sy
 80b67f8:	e009      	b.n	80b680e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80b67fa:	68fb      	ldr	r3, [r7, #12]
 80b67fc:	3310      	adds	r3, #16
 80b67fe:	4618      	mov	r0, r3
 80b6800:	f7ff fef2 	bl	80b65e8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80b6804:	68fb      	ldr	r3, [r7, #12]
 80b6806:	3324      	adds	r3, #36	; 0x24
 80b6808:	4618      	mov	r0, r3
 80b680a:	f7ff feed 	bl	80b65e8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80b680e:	f002 fa59 	bl	80b8cc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80b6812:	2301      	movs	r3, #1
}
 80b6814:	4618      	mov	r0, r3
 80b6816:	3710      	adds	r7, #16
 80b6818:	46bd      	mov	sp, r7
 80b681a:	bd80      	pop	{r7, pc}
 80b681c:	e000ed04 	.word	0xe000ed04

080b6820 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80b6820:	b580      	push	{r7, lr}
 80b6822:	b08e      	sub	sp, #56	; 0x38
 80b6824:	af02      	add	r7, sp, #8
 80b6826:	60f8      	str	r0, [r7, #12]
 80b6828:	60b9      	str	r1, [r7, #8]
 80b682a:	607a      	str	r2, [r7, #4]
 80b682c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80b682e:	68fb      	ldr	r3, [r7, #12]
 80b6830:	2b00      	cmp	r3, #0
 80b6832:	d10a      	bne.n	80b684a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80b6834:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b6838:	f383 8811 	msr	BASEPRI, r3
 80b683c:	f3bf 8f6f 	isb	sy
 80b6840:	f3bf 8f4f 	dsb	sy
 80b6844:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80b6846:	bf00      	nop
 80b6848:	e7fe      	b.n	80b6848 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80b684a:	683b      	ldr	r3, [r7, #0]
 80b684c:	2b00      	cmp	r3, #0
 80b684e:	d10a      	bne.n	80b6866 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80b6850:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b6854:	f383 8811 	msr	BASEPRI, r3
 80b6858:	f3bf 8f6f 	isb	sy
 80b685c:	f3bf 8f4f 	dsb	sy
 80b6860:	627b      	str	r3, [r7, #36]	; 0x24
}
 80b6862:	bf00      	nop
 80b6864:	e7fe      	b.n	80b6864 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80b6866:	687b      	ldr	r3, [r7, #4]
 80b6868:	2b00      	cmp	r3, #0
 80b686a:	d002      	beq.n	80b6872 <xQueueGenericCreateStatic+0x52>
 80b686c:	68bb      	ldr	r3, [r7, #8]
 80b686e:	2b00      	cmp	r3, #0
 80b6870:	d001      	beq.n	80b6876 <xQueueGenericCreateStatic+0x56>
 80b6872:	2301      	movs	r3, #1
 80b6874:	e000      	b.n	80b6878 <xQueueGenericCreateStatic+0x58>
 80b6876:	2300      	movs	r3, #0
 80b6878:	2b00      	cmp	r3, #0
 80b687a:	d10a      	bne.n	80b6892 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80b687c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b6880:	f383 8811 	msr	BASEPRI, r3
 80b6884:	f3bf 8f6f 	isb	sy
 80b6888:	f3bf 8f4f 	dsb	sy
 80b688c:	623b      	str	r3, [r7, #32]
}
 80b688e:	bf00      	nop
 80b6890:	e7fe      	b.n	80b6890 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80b6892:	687b      	ldr	r3, [r7, #4]
 80b6894:	2b00      	cmp	r3, #0
 80b6896:	d102      	bne.n	80b689e <xQueueGenericCreateStatic+0x7e>
 80b6898:	68bb      	ldr	r3, [r7, #8]
 80b689a:	2b00      	cmp	r3, #0
 80b689c:	d101      	bne.n	80b68a2 <xQueueGenericCreateStatic+0x82>
 80b689e:	2301      	movs	r3, #1
 80b68a0:	e000      	b.n	80b68a4 <xQueueGenericCreateStatic+0x84>
 80b68a2:	2300      	movs	r3, #0
 80b68a4:	2b00      	cmp	r3, #0
 80b68a6:	d10a      	bne.n	80b68be <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80b68a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b68ac:	f383 8811 	msr	BASEPRI, r3
 80b68b0:	f3bf 8f6f 	isb	sy
 80b68b4:	f3bf 8f4f 	dsb	sy
 80b68b8:	61fb      	str	r3, [r7, #28]
}
 80b68ba:	bf00      	nop
 80b68bc:	e7fe      	b.n	80b68bc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80b68be:	2350      	movs	r3, #80	; 0x50
 80b68c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80b68c2:	697b      	ldr	r3, [r7, #20]
 80b68c4:	2b50      	cmp	r3, #80	; 0x50
 80b68c6:	d00a      	beq.n	80b68de <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80b68c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b68cc:	f383 8811 	msr	BASEPRI, r3
 80b68d0:	f3bf 8f6f 	isb	sy
 80b68d4:	f3bf 8f4f 	dsb	sy
 80b68d8:	61bb      	str	r3, [r7, #24]
}
 80b68da:	bf00      	nop
 80b68dc:	e7fe      	b.n	80b68dc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80b68de:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80b68e0:	683b      	ldr	r3, [r7, #0]
 80b68e2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80b68e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80b68e6:	2b00      	cmp	r3, #0
 80b68e8:	d00d      	beq.n	80b6906 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80b68ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80b68ec:	2201      	movs	r2, #1
 80b68ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80b68f2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80b68f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80b68f8:	9300      	str	r3, [sp, #0]
 80b68fa:	4613      	mov	r3, r2
 80b68fc:	687a      	ldr	r2, [r7, #4]
 80b68fe:	68b9      	ldr	r1, [r7, #8]
 80b6900:	68f8      	ldr	r0, [r7, #12]
 80b6902:	f000 f83f 	bl	80b6984 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80b6906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80b6908:	4618      	mov	r0, r3
 80b690a:	3730      	adds	r7, #48	; 0x30
 80b690c:	46bd      	mov	sp, r7
 80b690e:	bd80      	pop	{r7, pc}

080b6910 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80b6910:	b580      	push	{r7, lr}
 80b6912:	b08a      	sub	sp, #40	; 0x28
 80b6914:	af02      	add	r7, sp, #8
 80b6916:	60f8      	str	r0, [r7, #12]
 80b6918:	60b9      	str	r1, [r7, #8]
 80b691a:	4613      	mov	r3, r2
 80b691c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80b691e:	68fb      	ldr	r3, [r7, #12]
 80b6920:	2b00      	cmp	r3, #0
 80b6922:	d10a      	bne.n	80b693a <xQueueGenericCreate+0x2a>
	__asm volatile
 80b6924:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b6928:	f383 8811 	msr	BASEPRI, r3
 80b692c:	f3bf 8f6f 	isb	sy
 80b6930:	f3bf 8f4f 	dsb	sy
 80b6934:	613b      	str	r3, [r7, #16]
}
 80b6936:	bf00      	nop
 80b6938:	e7fe      	b.n	80b6938 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80b693a:	68fb      	ldr	r3, [r7, #12]
 80b693c:	68ba      	ldr	r2, [r7, #8]
 80b693e:	fb02 f303 	mul.w	r3, r2, r3
 80b6942:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80b6944:	69fb      	ldr	r3, [r7, #28]
 80b6946:	3350      	adds	r3, #80	; 0x50
 80b6948:	4618      	mov	r0, r3
 80b694a:	f002 faad 	bl	80b8ea8 <pvPortMalloc>
 80b694e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80b6950:	69bb      	ldr	r3, [r7, #24]
 80b6952:	2b00      	cmp	r3, #0
 80b6954:	d011      	beq.n	80b697a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80b6956:	69bb      	ldr	r3, [r7, #24]
 80b6958:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80b695a:	697b      	ldr	r3, [r7, #20]
 80b695c:	3350      	adds	r3, #80	; 0x50
 80b695e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80b6960:	69bb      	ldr	r3, [r7, #24]
 80b6962:	2200      	movs	r2, #0
 80b6964:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80b6968:	79fa      	ldrb	r2, [r7, #7]
 80b696a:	69bb      	ldr	r3, [r7, #24]
 80b696c:	9300      	str	r3, [sp, #0]
 80b696e:	4613      	mov	r3, r2
 80b6970:	697a      	ldr	r2, [r7, #20]
 80b6972:	68b9      	ldr	r1, [r7, #8]
 80b6974:	68f8      	ldr	r0, [r7, #12]
 80b6976:	f000 f805 	bl	80b6984 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80b697a:	69bb      	ldr	r3, [r7, #24]
	}
 80b697c:	4618      	mov	r0, r3
 80b697e:	3720      	adds	r7, #32
 80b6980:	46bd      	mov	sp, r7
 80b6982:	bd80      	pop	{r7, pc}

080b6984 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80b6984:	b580      	push	{r7, lr}
 80b6986:	b084      	sub	sp, #16
 80b6988:	af00      	add	r7, sp, #0
 80b698a:	60f8      	str	r0, [r7, #12]
 80b698c:	60b9      	str	r1, [r7, #8]
 80b698e:	607a      	str	r2, [r7, #4]
 80b6990:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80b6992:	68bb      	ldr	r3, [r7, #8]
 80b6994:	2b00      	cmp	r3, #0
 80b6996:	d103      	bne.n	80b69a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80b6998:	69bb      	ldr	r3, [r7, #24]
 80b699a:	69ba      	ldr	r2, [r7, #24]
 80b699c:	601a      	str	r2, [r3, #0]
 80b699e:	e002      	b.n	80b69a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80b69a0:	69bb      	ldr	r3, [r7, #24]
 80b69a2:	687a      	ldr	r2, [r7, #4]
 80b69a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80b69a6:	69bb      	ldr	r3, [r7, #24]
 80b69a8:	68fa      	ldr	r2, [r7, #12]
 80b69aa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80b69ac:	69bb      	ldr	r3, [r7, #24]
 80b69ae:	68ba      	ldr	r2, [r7, #8]
 80b69b0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80b69b2:	2101      	movs	r1, #1
 80b69b4:	69b8      	ldr	r0, [r7, #24]
 80b69b6:	f7ff fecb 	bl	80b6750 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80b69ba:	69bb      	ldr	r3, [r7, #24]
 80b69bc:	78fa      	ldrb	r2, [r7, #3]
 80b69be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80b69c2:	bf00      	nop
 80b69c4:	3710      	adds	r7, #16
 80b69c6:	46bd      	mov	sp, r7
 80b69c8:	bd80      	pop	{r7, pc}
	...

080b69cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80b69cc:	b580      	push	{r7, lr}
 80b69ce:	b08e      	sub	sp, #56	; 0x38
 80b69d0:	af00      	add	r7, sp, #0
 80b69d2:	60f8      	str	r0, [r7, #12]
 80b69d4:	60b9      	str	r1, [r7, #8]
 80b69d6:	607a      	str	r2, [r7, #4]
 80b69d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80b69da:	2300      	movs	r3, #0
 80b69dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80b69de:	68fb      	ldr	r3, [r7, #12]
 80b69e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80b69e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80b69e4:	2b00      	cmp	r3, #0
 80b69e6:	d10a      	bne.n	80b69fe <xQueueGenericSend+0x32>
	__asm volatile
 80b69e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b69ec:	f383 8811 	msr	BASEPRI, r3
 80b69f0:	f3bf 8f6f 	isb	sy
 80b69f4:	f3bf 8f4f 	dsb	sy
 80b69f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80b69fa:	bf00      	nop
 80b69fc:	e7fe      	b.n	80b69fc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80b69fe:	68bb      	ldr	r3, [r7, #8]
 80b6a00:	2b00      	cmp	r3, #0
 80b6a02:	d103      	bne.n	80b6a0c <xQueueGenericSend+0x40>
 80b6a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80b6a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80b6a08:	2b00      	cmp	r3, #0
 80b6a0a:	d101      	bne.n	80b6a10 <xQueueGenericSend+0x44>
 80b6a0c:	2301      	movs	r3, #1
 80b6a0e:	e000      	b.n	80b6a12 <xQueueGenericSend+0x46>
 80b6a10:	2300      	movs	r3, #0
 80b6a12:	2b00      	cmp	r3, #0
 80b6a14:	d10a      	bne.n	80b6a2c <xQueueGenericSend+0x60>
	__asm volatile
 80b6a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b6a1a:	f383 8811 	msr	BASEPRI, r3
 80b6a1e:	f3bf 8f6f 	isb	sy
 80b6a22:	f3bf 8f4f 	dsb	sy
 80b6a26:	627b      	str	r3, [r7, #36]	; 0x24
}
 80b6a28:	bf00      	nop
 80b6a2a:	e7fe      	b.n	80b6a2a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80b6a2c:	683b      	ldr	r3, [r7, #0]
 80b6a2e:	2b02      	cmp	r3, #2
 80b6a30:	d103      	bne.n	80b6a3a <xQueueGenericSend+0x6e>
 80b6a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80b6a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80b6a36:	2b01      	cmp	r3, #1
 80b6a38:	d101      	bne.n	80b6a3e <xQueueGenericSend+0x72>
 80b6a3a:	2301      	movs	r3, #1
 80b6a3c:	e000      	b.n	80b6a40 <xQueueGenericSend+0x74>
 80b6a3e:	2300      	movs	r3, #0
 80b6a40:	2b00      	cmp	r3, #0
 80b6a42:	d10a      	bne.n	80b6a5a <xQueueGenericSend+0x8e>
	__asm volatile
 80b6a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b6a48:	f383 8811 	msr	BASEPRI, r3
 80b6a4c:	f3bf 8f6f 	isb	sy
 80b6a50:	f3bf 8f4f 	dsb	sy
 80b6a54:	623b      	str	r3, [r7, #32]
}
 80b6a56:	bf00      	nop
 80b6a58:	e7fe      	b.n	80b6a58 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80b6a5a:	f001 fac5 	bl	80b7fe8 <xTaskGetSchedulerState>
 80b6a5e:	4603      	mov	r3, r0
 80b6a60:	2b00      	cmp	r3, #0
 80b6a62:	d102      	bne.n	80b6a6a <xQueueGenericSend+0x9e>
 80b6a64:	687b      	ldr	r3, [r7, #4]
 80b6a66:	2b00      	cmp	r3, #0
 80b6a68:	d101      	bne.n	80b6a6e <xQueueGenericSend+0xa2>
 80b6a6a:	2301      	movs	r3, #1
 80b6a6c:	e000      	b.n	80b6a70 <xQueueGenericSend+0xa4>
 80b6a6e:	2300      	movs	r3, #0
 80b6a70:	2b00      	cmp	r3, #0
 80b6a72:	d10a      	bne.n	80b6a8a <xQueueGenericSend+0xbe>
	__asm volatile
 80b6a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b6a78:	f383 8811 	msr	BASEPRI, r3
 80b6a7c:	f3bf 8f6f 	isb	sy
 80b6a80:	f3bf 8f4f 	dsb	sy
 80b6a84:	61fb      	str	r3, [r7, #28]
}
 80b6a86:	bf00      	nop
 80b6a88:	e7fe      	b.n	80b6a88 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80b6a8a:	f002 f8eb 	bl	80b8c64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80b6a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80b6a90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80b6a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80b6a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80b6a96:	429a      	cmp	r2, r3
 80b6a98:	d302      	bcc.n	80b6aa0 <xQueueGenericSend+0xd4>
 80b6a9a:	683b      	ldr	r3, [r7, #0]
 80b6a9c:	2b02      	cmp	r3, #2
 80b6a9e:	d129      	bne.n	80b6af4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80b6aa0:	683a      	ldr	r2, [r7, #0]
 80b6aa2:	68b9      	ldr	r1, [r7, #8]
 80b6aa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80b6aa6:	f000 fa8b 	bl	80b6fc0 <prvCopyDataToQueue>
 80b6aaa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80b6aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80b6aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80b6ab0:	2b00      	cmp	r3, #0
 80b6ab2:	d010      	beq.n	80b6ad6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80b6ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80b6ab6:	3324      	adds	r3, #36	; 0x24
 80b6ab8:	4618      	mov	r0, r3
 80b6aba:	f001 f8d7 	bl	80b7c6c <xTaskRemoveFromEventList>
 80b6abe:	4603      	mov	r3, r0
 80b6ac0:	2b00      	cmp	r3, #0
 80b6ac2:	d013      	beq.n	80b6aec <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80b6ac4:	4b3f      	ldr	r3, [pc, #252]	; (80b6bc4 <xQueueGenericSend+0x1f8>)
 80b6ac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80b6aca:	601a      	str	r2, [r3, #0]
 80b6acc:	f3bf 8f4f 	dsb	sy
 80b6ad0:	f3bf 8f6f 	isb	sy
 80b6ad4:	e00a      	b.n	80b6aec <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80b6ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80b6ad8:	2b00      	cmp	r3, #0
 80b6ada:	d007      	beq.n	80b6aec <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80b6adc:	4b39      	ldr	r3, [pc, #228]	; (80b6bc4 <xQueueGenericSend+0x1f8>)
 80b6ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80b6ae2:	601a      	str	r2, [r3, #0]
 80b6ae4:	f3bf 8f4f 	dsb	sy
 80b6ae8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80b6aec:	f002 f8ea 	bl	80b8cc4 <vPortExitCritical>
				return pdPASS;
 80b6af0:	2301      	movs	r3, #1
 80b6af2:	e063      	b.n	80b6bbc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80b6af4:	687b      	ldr	r3, [r7, #4]
 80b6af6:	2b00      	cmp	r3, #0
 80b6af8:	d103      	bne.n	80b6b02 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80b6afa:	f002 f8e3 	bl	80b8cc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80b6afe:	2300      	movs	r3, #0
 80b6b00:	e05c      	b.n	80b6bbc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80b6b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80b6b04:	2b00      	cmp	r3, #0
 80b6b06:	d106      	bne.n	80b6b16 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80b6b08:	f107 0314 	add.w	r3, r7, #20
 80b6b0c:	4618      	mov	r0, r3
 80b6b0e:	f001 f911 	bl	80b7d34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80b6b12:	2301      	movs	r3, #1
 80b6b14:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80b6b16:	f002 f8d5 	bl	80b8cc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80b6b1a:	f000 fe71 	bl	80b7800 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80b6b1e:	f002 f8a1 	bl	80b8c64 <vPortEnterCritical>
 80b6b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80b6b24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80b6b28:	b25b      	sxtb	r3, r3
 80b6b2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80b6b2e:	d103      	bne.n	80b6b38 <xQueueGenericSend+0x16c>
 80b6b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80b6b32:	2200      	movs	r2, #0
 80b6b34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80b6b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80b6b3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80b6b3e:	b25b      	sxtb	r3, r3
 80b6b40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80b6b44:	d103      	bne.n	80b6b4e <xQueueGenericSend+0x182>
 80b6b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80b6b48:	2200      	movs	r2, #0
 80b6b4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80b6b4e:	f002 f8b9 	bl	80b8cc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80b6b52:	1d3a      	adds	r2, r7, #4
 80b6b54:	f107 0314 	add.w	r3, r7, #20
 80b6b58:	4611      	mov	r1, r2
 80b6b5a:	4618      	mov	r0, r3
 80b6b5c:	f001 f900 	bl	80b7d60 <xTaskCheckForTimeOut>
 80b6b60:	4603      	mov	r3, r0
 80b6b62:	2b00      	cmp	r3, #0
 80b6b64:	d124      	bne.n	80b6bb0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80b6b66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80b6b68:	f000 fb22 	bl	80b71b0 <prvIsQueueFull>
 80b6b6c:	4603      	mov	r3, r0
 80b6b6e:	2b00      	cmp	r3, #0
 80b6b70:	d018      	beq.n	80b6ba4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80b6b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80b6b74:	3310      	adds	r3, #16
 80b6b76:	687a      	ldr	r2, [r7, #4]
 80b6b78:	4611      	mov	r1, r2
 80b6b7a:	4618      	mov	r0, r3
 80b6b7c:	f001 f826 	bl	80b7bcc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80b6b80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80b6b82:	f000 faad 	bl	80b70e0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80b6b86:	f000 fe49 	bl	80b781c <xTaskResumeAll>
 80b6b8a:	4603      	mov	r3, r0
 80b6b8c:	2b00      	cmp	r3, #0
 80b6b8e:	f47f af7c 	bne.w	80b6a8a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80b6b92:	4b0c      	ldr	r3, [pc, #48]	; (80b6bc4 <xQueueGenericSend+0x1f8>)
 80b6b94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80b6b98:	601a      	str	r2, [r3, #0]
 80b6b9a:	f3bf 8f4f 	dsb	sy
 80b6b9e:	f3bf 8f6f 	isb	sy
 80b6ba2:	e772      	b.n	80b6a8a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80b6ba4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80b6ba6:	f000 fa9b 	bl	80b70e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80b6baa:	f000 fe37 	bl	80b781c <xTaskResumeAll>
 80b6bae:	e76c      	b.n	80b6a8a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80b6bb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80b6bb2:	f000 fa95 	bl	80b70e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80b6bb6:	f000 fe31 	bl	80b781c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80b6bba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80b6bbc:	4618      	mov	r0, r3
 80b6bbe:	3738      	adds	r7, #56	; 0x38
 80b6bc0:	46bd      	mov	sp, r7
 80b6bc2:	bd80      	pop	{r7, pc}
 80b6bc4:	e000ed04 	.word	0xe000ed04

080b6bc8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80b6bc8:	b580      	push	{r7, lr}
 80b6bca:	b090      	sub	sp, #64	; 0x40
 80b6bcc:	af00      	add	r7, sp, #0
 80b6bce:	60f8      	str	r0, [r7, #12]
 80b6bd0:	60b9      	str	r1, [r7, #8]
 80b6bd2:	607a      	str	r2, [r7, #4]
 80b6bd4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80b6bd6:	68fb      	ldr	r3, [r7, #12]
 80b6bd8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80b6bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80b6bdc:	2b00      	cmp	r3, #0
 80b6bde:	d10a      	bne.n	80b6bf6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80b6be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b6be4:	f383 8811 	msr	BASEPRI, r3
 80b6be8:	f3bf 8f6f 	isb	sy
 80b6bec:	f3bf 8f4f 	dsb	sy
 80b6bf0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80b6bf2:	bf00      	nop
 80b6bf4:	e7fe      	b.n	80b6bf4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80b6bf6:	68bb      	ldr	r3, [r7, #8]
 80b6bf8:	2b00      	cmp	r3, #0
 80b6bfa:	d103      	bne.n	80b6c04 <xQueueGenericSendFromISR+0x3c>
 80b6bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80b6bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80b6c00:	2b00      	cmp	r3, #0
 80b6c02:	d101      	bne.n	80b6c08 <xQueueGenericSendFromISR+0x40>
 80b6c04:	2301      	movs	r3, #1
 80b6c06:	e000      	b.n	80b6c0a <xQueueGenericSendFromISR+0x42>
 80b6c08:	2300      	movs	r3, #0
 80b6c0a:	2b00      	cmp	r3, #0
 80b6c0c:	d10a      	bne.n	80b6c24 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80b6c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b6c12:	f383 8811 	msr	BASEPRI, r3
 80b6c16:	f3bf 8f6f 	isb	sy
 80b6c1a:	f3bf 8f4f 	dsb	sy
 80b6c1e:	627b      	str	r3, [r7, #36]	; 0x24
}
 80b6c20:	bf00      	nop
 80b6c22:	e7fe      	b.n	80b6c22 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80b6c24:	683b      	ldr	r3, [r7, #0]
 80b6c26:	2b02      	cmp	r3, #2
 80b6c28:	d103      	bne.n	80b6c32 <xQueueGenericSendFromISR+0x6a>
 80b6c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80b6c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80b6c2e:	2b01      	cmp	r3, #1
 80b6c30:	d101      	bne.n	80b6c36 <xQueueGenericSendFromISR+0x6e>
 80b6c32:	2301      	movs	r3, #1
 80b6c34:	e000      	b.n	80b6c38 <xQueueGenericSendFromISR+0x70>
 80b6c36:	2300      	movs	r3, #0
 80b6c38:	2b00      	cmp	r3, #0
 80b6c3a:	d10a      	bne.n	80b6c52 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80b6c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b6c40:	f383 8811 	msr	BASEPRI, r3
 80b6c44:	f3bf 8f6f 	isb	sy
 80b6c48:	f3bf 8f4f 	dsb	sy
 80b6c4c:	623b      	str	r3, [r7, #32]
}
 80b6c4e:	bf00      	nop
 80b6c50:	e7fe      	b.n	80b6c50 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80b6c52:	f002 f8e9 	bl	80b8e28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80b6c56:	f3ef 8211 	mrs	r2, BASEPRI
 80b6c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b6c5e:	f383 8811 	msr	BASEPRI, r3
 80b6c62:	f3bf 8f6f 	isb	sy
 80b6c66:	f3bf 8f4f 	dsb	sy
 80b6c6a:	61fa      	str	r2, [r7, #28]
 80b6c6c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80b6c6e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80b6c70:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80b6c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80b6c74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80b6c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80b6c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80b6c7a:	429a      	cmp	r2, r3
 80b6c7c:	d302      	bcc.n	80b6c84 <xQueueGenericSendFromISR+0xbc>
 80b6c7e:	683b      	ldr	r3, [r7, #0]
 80b6c80:	2b02      	cmp	r3, #2
 80b6c82:	d12f      	bne.n	80b6ce4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80b6c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80b6c86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80b6c8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80b6c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80b6c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80b6c92:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80b6c94:	683a      	ldr	r2, [r7, #0]
 80b6c96:	68b9      	ldr	r1, [r7, #8]
 80b6c98:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80b6c9a:	f000 f991 	bl	80b6fc0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80b6c9e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80b6ca2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80b6ca6:	d112      	bne.n	80b6cce <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80b6ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80b6caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80b6cac:	2b00      	cmp	r3, #0
 80b6cae:	d016      	beq.n	80b6cde <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80b6cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80b6cb2:	3324      	adds	r3, #36	; 0x24
 80b6cb4:	4618      	mov	r0, r3
 80b6cb6:	f000 ffd9 	bl	80b7c6c <xTaskRemoveFromEventList>
 80b6cba:	4603      	mov	r3, r0
 80b6cbc:	2b00      	cmp	r3, #0
 80b6cbe:	d00e      	beq.n	80b6cde <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80b6cc0:	687b      	ldr	r3, [r7, #4]
 80b6cc2:	2b00      	cmp	r3, #0
 80b6cc4:	d00b      	beq.n	80b6cde <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80b6cc6:	687b      	ldr	r3, [r7, #4]
 80b6cc8:	2201      	movs	r2, #1
 80b6cca:	601a      	str	r2, [r3, #0]
 80b6ccc:	e007      	b.n	80b6cde <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80b6cce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80b6cd2:	3301      	adds	r3, #1
 80b6cd4:	b2db      	uxtb	r3, r3
 80b6cd6:	b25a      	sxtb	r2, r3
 80b6cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80b6cda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80b6cde:	2301      	movs	r3, #1
 80b6ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80b6ce2:	e001      	b.n	80b6ce8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80b6ce4:	2300      	movs	r3, #0
 80b6ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80b6ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80b6cea:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80b6cec:	697b      	ldr	r3, [r7, #20]
 80b6cee:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80b6cf2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80b6cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80b6cf6:	4618      	mov	r0, r3
 80b6cf8:	3740      	adds	r7, #64	; 0x40
 80b6cfa:	46bd      	mov	sp, r7
 80b6cfc:	bd80      	pop	{r7, pc}
	...

080b6d00 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80b6d00:	b580      	push	{r7, lr}
 80b6d02:	b08c      	sub	sp, #48	; 0x30
 80b6d04:	af00      	add	r7, sp, #0
 80b6d06:	60f8      	str	r0, [r7, #12]
 80b6d08:	60b9      	str	r1, [r7, #8]
 80b6d0a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80b6d0c:	2300      	movs	r3, #0
 80b6d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80b6d10:	68fb      	ldr	r3, [r7, #12]
 80b6d12:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80b6d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80b6d16:	2b00      	cmp	r3, #0
 80b6d18:	d10a      	bne.n	80b6d30 <xQueueReceive+0x30>
	__asm volatile
 80b6d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b6d1e:	f383 8811 	msr	BASEPRI, r3
 80b6d22:	f3bf 8f6f 	isb	sy
 80b6d26:	f3bf 8f4f 	dsb	sy
 80b6d2a:	623b      	str	r3, [r7, #32]
}
 80b6d2c:	bf00      	nop
 80b6d2e:	e7fe      	b.n	80b6d2e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80b6d30:	68bb      	ldr	r3, [r7, #8]
 80b6d32:	2b00      	cmp	r3, #0
 80b6d34:	d103      	bne.n	80b6d3e <xQueueReceive+0x3e>
 80b6d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80b6d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80b6d3a:	2b00      	cmp	r3, #0
 80b6d3c:	d101      	bne.n	80b6d42 <xQueueReceive+0x42>
 80b6d3e:	2301      	movs	r3, #1
 80b6d40:	e000      	b.n	80b6d44 <xQueueReceive+0x44>
 80b6d42:	2300      	movs	r3, #0
 80b6d44:	2b00      	cmp	r3, #0
 80b6d46:	d10a      	bne.n	80b6d5e <xQueueReceive+0x5e>
	__asm volatile
 80b6d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b6d4c:	f383 8811 	msr	BASEPRI, r3
 80b6d50:	f3bf 8f6f 	isb	sy
 80b6d54:	f3bf 8f4f 	dsb	sy
 80b6d58:	61fb      	str	r3, [r7, #28]
}
 80b6d5a:	bf00      	nop
 80b6d5c:	e7fe      	b.n	80b6d5c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80b6d5e:	f001 f943 	bl	80b7fe8 <xTaskGetSchedulerState>
 80b6d62:	4603      	mov	r3, r0
 80b6d64:	2b00      	cmp	r3, #0
 80b6d66:	d102      	bne.n	80b6d6e <xQueueReceive+0x6e>
 80b6d68:	687b      	ldr	r3, [r7, #4]
 80b6d6a:	2b00      	cmp	r3, #0
 80b6d6c:	d101      	bne.n	80b6d72 <xQueueReceive+0x72>
 80b6d6e:	2301      	movs	r3, #1
 80b6d70:	e000      	b.n	80b6d74 <xQueueReceive+0x74>
 80b6d72:	2300      	movs	r3, #0
 80b6d74:	2b00      	cmp	r3, #0
 80b6d76:	d10a      	bne.n	80b6d8e <xQueueReceive+0x8e>
	__asm volatile
 80b6d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b6d7c:	f383 8811 	msr	BASEPRI, r3
 80b6d80:	f3bf 8f6f 	isb	sy
 80b6d84:	f3bf 8f4f 	dsb	sy
 80b6d88:	61bb      	str	r3, [r7, #24]
}
 80b6d8a:	bf00      	nop
 80b6d8c:	e7fe      	b.n	80b6d8c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80b6d8e:	f001 ff69 	bl	80b8c64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80b6d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80b6d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80b6d96:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80b6d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b6d9a:	2b00      	cmp	r3, #0
 80b6d9c:	d01f      	beq.n	80b6dde <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80b6d9e:	68b9      	ldr	r1, [r7, #8]
 80b6da0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80b6da2:	f000 f977 	bl	80b7094 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80b6da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b6da8:	1e5a      	subs	r2, r3, #1
 80b6daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80b6dac:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80b6dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80b6db0:	691b      	ldr	r3, [r3, #16]
 80b6db2:	2b00      	cmp	r3, #0
 80b6db4:	d00f      	beq.n	80b6dd6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80b6db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80b6db8:	3310      	adds	r3, #16
 80b6dba:	4618      	mov	r0, r3
 80b6dbc:	f000 ff56 	bl	80b7c6c <xTaskRemoveFromEventList>
 80b6dc0:	4603      	mov	r3, r0
 80b6dc2:	2b00      	cmp	r3, #0
 80b6dc4:	d007      	beq.n	80b6dd6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80b6dc6:	4b3d      	ldr	r3, [pc, #244]	; (80b6ebc <xQueueReceive+0x1bc>)
 80b6dc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80b6dcc:	601a      	str	r2, [r3, #0]
 80b6dce:	f3bf 8f4f 	dsb	sy
 80b6dd2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80b6dd6:	f001 ff75 	bl	80b8cc4 <vPortExitCritical>
				return pdPASS;
 80b6dda:	2301      	movs	r3, #1
 80b6ddc:	e069      	b.n	80b6eb2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80b6dde:	687b      	ldr	r3, [r7, #4]
 80b6de0:	2b00      	cmp	r3, #0
 80b6de2:	d103      	bne.n	80b6dec <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80b6de4:	f001 ff6e 	bl	80b8cc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80b6de8:	2300      	movs	r3, #0
 80b6dea:	e062      	b.n	80b6eb2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80b6dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80b6dee:	2b00      	cmp	r3, #0
 80b6df0:	d106      	bne.n	80b6e00 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80b6df2:	f107 0310 	add.w	r3, r7, #16
 80b6df6:	4618      	mov	r0, r3
 80b6df8:	f000 ff9c 	bl	80b7d34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80b6dfc:	2301      	movs	r3, #1
 80b6dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80b6e00:	f001 ff60 	bl	80b8cc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80b6e04:	f000 fcfc 	bl	80b7800 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80b6e08:	f001 ff2c 	bl	80b8c64 <vPortEnterCritical>
 80b6e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80b6e0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80b6e12:	b25b      	sxtb	r3, r3
 80b6e14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80b6e18:	d103      	bne.n	80b6e22 <xQueueReceive+0x122>
 80b6e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80b6e1c:	2200      	movs	r2, #0
 80b6e1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80b6e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80b6e24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80b6e28:	b25b      	sxtb	r3, r3
 80b6e2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80b6e2e:	d103      	bne.n	80b6e38 <xQueueReceive+0x138>
 80b6e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80b6e32:	2200      	movs	r2, #0
 80b6e34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80b6e38:	f001 ff44 	bl	80b8cc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80b6e3c:	1d3a      	adds	r2, r7, #4
 80b6e3e:	f107 0310 	add.w	r3, r7, #16
 80b6e42:	4611      	mov	r1, r2
 80b6e44:	4618      	mov	r0, r3
 80b6e46:	f000 ff8b 	bl	80b7d60 <xTaskCheckForTimeOut>
 80b6e4a:	4603      	mov	r3, r0
 80b6e4c:	2b00      	cmp	r3, #0
 80b6e4e:	d123      	bne.n	80b6e98 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80b6e50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80b6e52:	f000 f997 	bl	80b7184 <prvIsQueueEmpty>
 80b6e56:	4603      	mov	r3, r0
 80b6e58:	2b00      	cmp	r3, #0
 80b6e5a:	d017      	beq.n	80b6e8c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80b6e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80b6e5e:	3324      	adds	r3, #36	; 0x24
 80b6e60:	687a      	ldr	r2, [r7, #4]
 80b6e62:	4611      	mov	r1, r2
 80b6e64:	4618      	mov	r0, r3
 80b6e66:	f000 feb1 	bl	80b7bcc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80b6e6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80b6e6c:	f000 f938 	bl	80b70e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80b6e70:	f000 fcd4 	bl	80b781c <xTaskResumeAll>
 80b6e74:	4603      	mov	r3, r0
 80b6e76:	2b00      	cmp	r3, #0
 80b6e78:	d189      	bne.n	80b6d8e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80b6e7a:	4b10      	ldr	r3, [pc, #64]	; (80b6ebc <xQueueReceive+0x1bc>)
 80b6e7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80b6e80:	601a      	str	r2, [r3, #0]
 80b6e82:	f3bf 8f4f 	dsb	sy
 80b6e86:	f3bf 8f6f 	isb	sy
 80b6e8a:	e780      	b.n	80b6d8e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80b6e8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80b6e8e:	f000 f927 	bl	80b70e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80b6e92:	f000 fcc3 	bl	80b781c <xTaskResumeAll>
 80b6e96:	e77a      	b.n	80b6d8e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80b6e98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80b6e9a:	f000 f921 	bl	80b70e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80b6e9e:	f000 fcbd 	bl	80b781c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80b6ea2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80b6ea4:	f000 f96e 	bl	80b7184 <prvIsQueueEmpty>
 80b6ea8:	4603      	mov	r3, r0
 80b6eaa:	2b00      	cmp	r3, #0
 80b6eac:	f43f af6f 	beq.w	80b6d8e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80b6eb0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80b6eb2:	4618      	mov	r0, r3
 80b6eb4:	3730      	adds	r7, #48	; 0x30
 80b6eb6:	46bd      	mov	sp, r7
 80b6eb8:	bd80      	pop	{r7, pc}
 80b6eba:	bf00      	nop
 80b6ebc:	e000ed04 	.word	0xe000ed04

080b6ec0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80b6ec0:	b580      	push	{r7, lr}
 80b6ec2:	b08e      	sub	sp, #56	; 0x38
 80b6ec4:	af00      	add	r7, sp, #0
 80b6ec6:	60f8      	str	r0, [r7, #12]
 80b6ec8:	60b9      	str	r1, [r7, #8]
 80b6eca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80b6ecc:	68fb      	ldr	r3, [r7, #12]
 80b6ece:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80b6ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80b6ed2:	2b00      	cmp	r3, #0
 80b6ed4:	d10a      	bne.n	80b6eec <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80b6ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b6eda:	f383 8811 	msr	BASEPRI, r3
 80b6ede:	f3bf 8f6f 	isb	sy
 80b6ee2:	f3bf 8f4f 	dsb	sy
 80b6ee6:	623b      	str	r3, [r7, #32]
}
 80b6ee8:	bf00      	nop
 80b6eea:	e7fe      	b.n	80b6eea <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80b6eec:	68bb      	ldr	r3, [r7, #8]
 80b6eee:	2b00      	cmp	r3, #0
 80b6ef0:	d103      	bne.n	80b6efa <xQueueReceiveFromISR+0x3a>
 80b6ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80b6ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80b6ef6:	2b00      	cmp	r3, #0
 80b6ef8:	d101      	bne.n	80b6efe <xQueueReceiveFromISR+0x3e>
 80b6efa:	2301      	movs	r3, #1
 80b6efc:	e000      	b.n	80b6f00 <xQueueReceiveFromISR+0x40>
 80b6efe:	2300      	movs	r3, #0
 80b6f00:	2b00      	cmp	r3, #0
 80b6f02:	d10a      	bne.n	80b6f1a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80b6f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b6f08:	f383 8811 	msr	BASEPRI, r3
 80b6f0c:	f3bf 8f6f 	isb	sy
 80b6f10:	f3bf 8f4f 	dsb	sy
 80b6f14:	61fb      	str	r3, [r7, #28]
}
 80b6f16:	bf00      	nop
 80b6f18:	e7fe      	b.n	80b6f18 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80b6f1a:	f001 ff85 	bl	80b8e28 <vPortValidateInterruptPriority>
	__asm volatile
 80b6f1e:	f3ef 8211 	mrs	r2, BASEPRI
 80b6f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b6f26:	f383 8811 	msr	BASEPRI, r3
 80b6f2a:	f3bf 8f6f 	isb	sy
 80b6f2e:	f3bf 8f4f 	dsb	sy
 80b6f32:	61ba      	str	r2, [r7, #24]
 80b6f34:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80b6f36:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80b6f38:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80b6f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80b6f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80b6f3e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80b6f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80b6f42:	2b00      	cmp	r3, #0
 80b6f44:	d02f      	beq.n	80b6fa6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80b6f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80b6f48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80b6f4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80b6f50:	68b9      	ldr	r1, [r7, #8]
 80b6f52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80b6f54:	f000 f89e 	bl	80b7094 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80b6f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80b6f5a:	1e5a      	subs	r2, r3, #1
 80b6f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80b6f5e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80b6f60:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80b6f64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80b6f68:	d112      	bne.n	80b6f90 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80b6f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80b6f6c:	691b      	ldr	r3, [r3, #16]
 80b6f6e:	2b00      	cmp	r3, #0
 80b6f70:	d016      	beq.n	80b6fa0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80b6f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80b6f74:	3310      	adds	r3, #16
 80b6f76:	4618      	mov	r0, r3
 80b6f78:	f000 fe78 	bl	80b7c6c <xTaskRemoveFromEventList>
 80b6f7c:	4603      	mov	r3, r0
 80b6f7e:	2b00      	cmp	r3, #0
 80b6f80:	d00e      	beq.n	80b6fa0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80b6f82:	687b      	ldr	r3, [r7, #4]
 80b6f84:	2b00      	cmp	r3, #0
 80b6f86:	d00b      	beq.n	80b6fa0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80b6f88:	687b      	ldr	r3, [r7, #4]
 80b6f8a:	2201      	movs	r2, #1
 80b6f8c:	601a      	str	r2, [r3, #0]
 80b6f8e:	e007      	b.n	80b6fa0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80b6f90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80b6f94:	3301      	adds	r3, #1
 80b6f96:	b2db      	uxtb	r3, r3
 80b6f98:	b25a      	sxtb	r2, r3
 80b6f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80b6f9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80b6fa0:	2301      	movs	r3, #1
 80b6fa2:	637b      	str	r3, [r7, #52]	; 0x34
 80b6fa4:	e001      	b.n	80b6faa <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80b6fa6:	2300      	movs	r3, #0
 80b6fa8:	637b      	str	r3, [r7, #52]	; 0x34
 80b6faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80b6fac:	613b      	str	r3, [r7, #16]
	__asm volatile
 80b6fae:	693b      	ldr	r3, [r7, #16]
 80b6fb0:	f383 8811 	msr	BASEPRI, r3
}
 80b6fb4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80b6fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80b6fb8:	4618      	mov	r0, r3
 80b6fba:	3738      	adds	r7, #56	; 0x38
 80b6fbc:	46bd      	mov	sp, r7
 80b6fbe:	bd80      	pop	{r7, pc}

080b6fc0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80b6fc0:	b580      	push	{r7, lr}
 80b6fc2:	b086      	sub	sp, #24
 80b6fc4:	af00      	add	r7, sp, #0
 80b6fc6:	60f8      	str	r0, [r7, #12]
 80b6fc8:	60b9      	str	r1, [r7, #8]
 80b6fca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80b6fcc:	2300      	movs	r3, #0
 80b6fce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80b6fd0:	68fb      	ldr	r3, [r7, #12]
 80b6fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80b6fd4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80b6fd6:	68fb      	ldr	r3, [r7, #12]
 80b6fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80b6fda:	2b00      	cmp	r3, #0
 80b6fdc:	d10d      	bne.n	80b6ffa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80b6fde:	68fb      	ldr	r3, [r7, #12]
 80b6fe0:	681b      	ldr	r3, [r3, #0]
 80b6fe2:	2b00      	cmp	r3, #0
 80b6fe4:	d14d      	bne.n	80b7082 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80b6fe6:	68fb      	ldr	r3, [r7, #12]
 80b6fe8:	689b      	ldr	r3, [r3, #8]
 80b6fea:	4618      	mov	r0, r3
 80b6fec:	f001 f81a 	bl	80b8024 <xTaskPriorityDisinherit>
 80b6ff0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80b6ff2:	68fb      	ldr	r3, [r7, #12]
 80b6ff4:	2200      	movs	r2, #0
 80b6ff6:	609a      	str	r2, [r3, #8]
 80b6ff8:	e043      	b.n	80b7082 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80b6ffa:	687b      	ldr	r3, [r7, #4]
 80b6ffc:	2b00      	cmp	r3, #0
 80b6ffe:	d119      	bne.n	80b7034 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80b7000:	68fb      	ldr	r3, [r7, #12]
 80b7002:	6858      	ldr	r0, [r3, #4]
 80b7004:	68fb      	ldr	r3, [r7, #12]
 80b7006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80b7008:	461a      	mov	r2, r3
 80b700a:	68b9      	ldr	r1, [r7, #8]
 80b700c:	f008 ffc8 	bl	80bffa0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80b7010:	68fb      	ldr	r3, [r7, #12]
 80b7012:	685a      	ldr	r2, [r3, #4]
 80b7014:	68fb      	ldr	r3, [r7, #12]
 80b7016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80b7018:	441a      	add	r2, r3
 80b701a:	68fb      	ldr	r3, [r7, #12]
 80b701c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80b701e:	68fb      	ldr	r3, [r7, #12]
 80b7020:	685a      	ldr	r2, [r3, #4]
 80b7022:	68fb      	ldr	r3, [r7, #12]
 80b7024:	689b      	ldr	r3, [r3, #8]
 80b7026:	429a      	cmp	r2, r3
 80b7028:	d32b      	bcc.n	80b7082 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80b702a:	68fb      	ldr	r3, [r7, #12]
 80b702c:	681a      	ldr	r2, [r3, #0]
 80b702e:	68fb      	ldr	r3, [r7, #12]
 80b7030:	605a      	str	r2, [r3, #4]
 80b7032:	e026      	b.n	80b7082 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80b7034:	68fb      	ldr	r3, [r7, #12]
 80b7036:	68d8      	ldr	r0, [r3, #12]
 80b7038:	68fb      	ldr	r3, [r7, #12]
 80b703a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80b703c:	461a      	mov	r2, r3
 80b703e:	68b9      	ldr	r1, [r7, #8]
 80b7040:	f008 ffae 	bl	80bffa0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80b7044:	68fb      	ldr	r3, [r7, #12]
 80b7046:	68da      	ldr	r2, [r3, #12]
 80b7048:	68fb      	ldr	r3, [r7, #12]
 80b704a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80b704c:	425b      	negs	r3, r3
 80b704e:	441a      	add	r2, r3
 80b7050:	68fb      	ldr	r3, [r7, #12]
 80b7052:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80b7054:	68fb      	ldr	r3, [r7, #12]
 80b7056:	68da      	ldr	r2, [r3, #12]
 80b7058:	68fb      	ldr	r3, [r7, #12]
 80b705a:	681b      	ldr	r3, [r3, #0]
 80b705c:	429a      	cmp	r2, r3
 80b705e:	d207      	bcs.n	80b7070 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80b7060:	68fb      	ldr	r3, [r7, #12]
 80b7062:	689a      	ldr	r2, [r3, #8]
 80b7064:	68fb      	ldr	r3, [r7, #12]
 80b7066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80b7068:	425b      	negs	r3, r3
 80b706a:	441a      	add	r2, r3
 80b706c:	68fb      	ldr	r3, [r7, #12]
 80b706e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80b7070:	687b      	ldr	r3, [r7, #4]
 80b7072:	2b02      	cmp	r3, #2
 80b7074:	d105      	bne.n	80b7082 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80b7076:	693b      	ldr	r3, [r7, #16]
 80b7078:	2b00      	cmp	r3, #0
 80b707a:	d002      	beq.n	80b7082 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80b707c:	693b      	ldr	r3, [r7, #16]
 80b707e:	3b01      	subs	r3, #1
 80b7080:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80b7082:	693b      	ldr	r3, [r7, #16]
 80b7084:	1c5a      	adds	r2, r3, #1
 80b7086:	68fb      	ldr	r3, [r7, #12]
 80b7088:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80b708a:	697b      	ldr	r3, [r7, #20]
}
 80b708c:	4618      	mov	r0, r3
 80b708e:	3718      	adds	r7, #24
 80b7090:	46bd      	mov	sp, r7
 80b7092:	bd80      	pop	{r7, pc}

080b7094 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80b7094:	b580      	push	{r7, lr}
 80b7096:	b082      	sub	sp, #8
 80b7098:	af00      	add	r7, sp, #0
 80b709a:	6078      	str	r0, [r7, #4]
 80b709c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80b709e:	687b      	ldr	r3, [r7, #4]
 80b70a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80b70a2:	2b00      	cmp	r3, #0
 80b70a4:	d018      	beq.n	80b70d8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80b70a6:	687b      	ldr	r3, [r7, #4]
 80b70a8:	68da      	ldr	r2, [r3, #12]
 80b70aa:	687b      	ldr	r3, [r7, #4]
 80b70ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80b70ae:	441a      	add	r2, r3
 80b70b0:	687b      	ldr	r3, [r7, #4]
 80b70b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80b70b4:	687b      	ldr	r3, [r7, #4]
 80b70b6:	68da      	ldr	r2, [r3, #12]
 80b70b8:	687b      	ldr	r3, [r7, #4]
 80b70ba:	689b      	ldr	r3, [r3, #8]
 80b70bc:	429a      	cmp	r2, r3
 80b70be:	d303      	bcc.n	80b70c8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80b70c0:	687b      	ldr	r3, [r7, #4]
 80b70c2:	681a      	ldr	r2, [r3, #0]
 80b70c4:	687b      	ldr	r3, [r7, #4]
 80b70c6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80b70c8:	687b      	ldr	r3, [r7, #4]
 80b70ca:	68d9      	ldr	r1, [r3, #12]
 80b70cc:	687b      	ldr	r3, [r7, #4]
 80b70ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80b70d0:	461a      	mov	r2, r3
 80b70d2:	6838      	ldr	r0, [r7, #0]
 80b70d4:	f008 ff64 	bl	80bffa0 <memcpy>
	}
}
 80b70d8:	bf00      	nop
 80b70da:	3708      	adds	r7, #8
 80b70dc:	46bd      	mov	sp, r7
 80b70de:	bd80      	pop	{r7, pc}

080b70e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80b70e0:	b580      	push	{r7, lr}
 80b70e2:	b084      	sub	sp, #16
 80b70e4:	af00      	add	r7, sp, #0
 80b70e6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80b70e8:	f001 fdbc 	bl	80b8c64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80b70ec:	687b      	ldr	r3, [r7, #4]
 80b70ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80b70f2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80b70f4:	e011      	b.n	80b711a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80b70f6:	687b      	ldr	r3, [r7, #4]
 80b70f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80b70fa:	2b00      	cmp	r3, #0
 80b70fc:	d012      	beq.n	80b7124 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80b70fe:	687b      	ldr	r3, [r7, #4]
 80b7100:	3324      	adds	r3, #36	; 0x24
 80b7102:	4618      	mov	r0, r3
 80b7104:	f000 fdb2 	bl	80b7c6c <xTaskRemoveFromEventList>
 80b7108:	4603      	mov	r3, r0
 80b710a:	2b00      	cmp	r3, #0
 80b710c:	d001      	beq.n	80b7112 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80b710e:	f000 fe89 	bl	80b7e24 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80b7112:	7bfb      	ldrb	r3, [r7, #15]
 80b7114:	3b01      	subs	r3, #1
 80b7116:	b2db      	uxtb	r3, r3
 80b7118:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80b711a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80b711e:	2b00      	cmp	r3, #0
 80b7120:	dce9      	bgt.n	80b70f6 <prvUnlockQueue+0x16>
 80b7122:	e000      	b.n	80b7126 <prvUnlockQueue+0x46>
					break;
 80b7124:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80b7126:	687b      	ldr	r3, [r7, #4]
 80b7128:	22ff      	movs	r2, #255	; 0xff
 80b712a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80b712e:	f001 fdc9 	bl	80b8cc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80b7132:	f001 fd97 	bl	80b8c64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80b7136:	687b      	ldr	r3, [r7, #4]
 80b7138:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80b713c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80b713e:	e011      	b.n	80b7164 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80b7140:	687b      	ldr	r3, [r7, #4]
 80b7142:	691b      	ldr	r3, [r3, #16]
 80b7144:	2b00      	cmp	r3, #0
 80b7146:	d012      	beq.n	80b716e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80b7148:	687b      	ldr	r3, [r7, #4]
 80b714a:	3310      	adds	r3, #16
 80b714c:	4618      	mov	r0, r3
 80b714e:	f000 fd8d 	bl	80b7c6c <xTaskRemoveFromEventList>
 80b7152:	4603      	mov	r3, r0
 80b7154:	2b00      	cmp	r3, #0
 80b7156:	d001      	beq.n	80b715c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80b7158:	f000 fe64 	bl	80b7e24 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80b715c:	7bbb      	ldrb	r3, [r7, #14]
 80b715e:	3b01      	subs	r3, #1
 80b7160:	b2db      	uxtb	r3, r3
 80b7162:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80b7164:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80b7168:	2b00      	cmp	r3, #0
 80b716a:	dce9      	bgt.n	80b7140 <prvUnlockQueue+0x60>
 80b716c:	e000      	b.n	80b7170 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80b716e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80b7170:	687b      	ldr	r3, [r7, #4]
 80b7172:	22ff      	movs	r2, #255	; 0xff
 80b7174:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80b7178:	f001 fda4 	bl	80b8cc4 <vPortExitCritical>
}
 80b717c:	bf00      	nop
 80b717e:	3710      	adds	r7, #16
 80b7180:	46bd      	mov	sp, r7
 80b7182:	bd80      	pop	{r7, pc}

080b7184 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80b7184:	b580      	push	{r7, lr}
 80b7186:	b084      	sub	sp, #16
 80b7188:	af00      	add	r7, sp, #0
 80b718a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80b718c:	f001 fd6a 	bl	80b8c64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80b7190:	687b      	ldr	r3, [r7, #4]
 80b7192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80b7194:	2b00      	cmp	r3, #0
 80b7196:	d102      	bne.n	80b719e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80b7198:	2301      	movs	r3, #1
 80b719a:	60fb      	str	r3, [r7, #12]
 80b719c:	e001      	b.n	80b71a2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80b719e:	2300      	movs	r3, #0
 80b71a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80b71a2:	f001 fd8f 	bl	80b8cc4 <vPortExitCritical>

	return xReturn;
 80b71a6:	68fb      	ldr	r3, [r7, #12]
}
 80b71a8:	4618      	mov	r0, r3
 80b71aa:	3710      	adds	r7, #16
 80b71ac:	46bd      	mov	sp, r7
 80b71ae:	bd80      	pop	{r7, pc}

080b71b0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80b71b0:	b580      	push	{r7, lr}
 80b71b2:	b084      	sub	sp, #16
 80b71b4:	af00      	add	r7, sp, #0
 80b71b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80b71b8:	f001 fd54 	bl	80b8c64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80b71bc:	687b      	ldr	r3, [r7, #4]
 80b71be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80b71c0:	687b      	ldr	r3, [r7, #4]
 80b71c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80b71c4:	429a      	cmp	r2, r3
 80b71c6:	d102      	bne.n	80b71ce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80b71c8:	2301      	movs	r3, #1
 80b71ca:	60fb      	str	r3, [r7, #12]
 80b71cc:	e001      	b.n	80b71d2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80b71ce:	2300      	movs	r3, #0
 80b71d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80b71d2:	f001 fd77 	bl	80b8cc4 <vPortExitCritical>

	return xReturn;
 80b71d6:	68fb      	ldr	r3, [r7, #12]
}
 80b71d8:	4618      	mov	r0, r3
 80b71da:	3710      	adds	r7, #16
 80b71dc:	46bd      	mov	sp, r7
 80b71de:	bd80      	pop	{r7, pc}

080b71e0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80b71e0:	b480      	push	{r7}
 80b71e2:	b085      	sub	sp, #20
 80b71e4:	af00      	add	r7, sp, #0
 80b71e6:	6078      	str	r0, [r7, #4]
 80b71e8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80b71ea:	2300      	movs	r3, #0
 80b71ec:	60fb      	str	r3, [r7, #12]
 80b71ee:	e014      	b.n	80b721a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80b71f0:	4a0f      	ldr	r2, [pc, #60]	; (80b7230 <vQueueAddToRegistry+0x50>)
 80b71f2:	68fb      	ldr	r3, [r7, #12]
 80b71f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80b71f8:	2b00      	cmp	r3, #0
 80b71fa:	d10b      	bne.n	80b7214 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80b71fc:	490c      	ldr	r1, [pc, #48]	; (80b7230 <vQueueAddToRegistry+0x50>)
 80b71fe:	68fb      	ldr	r3, [r7, #12]
 80b7200:	683a      	ldr	r2, [r7, #0]
 80b7202:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80b7206:	4a0a      	ldr	r2, [pc, #40]	; (80b7230 <vQueueAddToRegistry+0x50>)
 80b7208:	68fb      	ldr	r3, [r7, #12]
 80b720a:	00db      	lsls	r3, r3, #3
 80b720c:	4413      	add	r3, r2
 80b720e:	687a      	ldr	r2, [r7, #4]
 80b7210:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80b7212:	e006      	b.n	80b7222 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80b7214:	68fb      	ldr	r3, [r7, #12]
 80b7216:	3301      	adds	r3, #1
 80b7218:	60fb      	str	r3, [r7, #12]
 80b721a:	68fb      	ldr	r3, [r7, #12]
 80b721c:	2b07      	cmp	r3, #7
 80b721e:	d9e7      	bls.n	80b71f0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80b7220:	bf00      	nop
 80b7222:	bf00      	nop
 80b7224:	3714      	adds	r7, #20
 80b7226:	46bd      	mov	sp, r7
 80b7228:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b722c:	4770      	bx	lr
 80b722e:	bf00      	nop
 80b7230:	2001c344 	.word	0x2001c344

080b7234 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80b7234:	b580      	push	{r7, lr}
 80b7236:	b086      	sub	sp, #24
 80b7238:	af00      	add	r7, sp, #0
 80b723a:	60f8      	str	r0, [r7, #12]
 80b723c:	60b9      	str	r1, [r7, #8]
 80b723e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80b7240:	68fb      	ldr	r3, [r7, #12]
 80b7242:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80b7244:	f001 fd0e 	bl	80b8c64 <vPortEnterCritical>
 80b7248:	697b      	ldr	r3, [r7, #20]
 80b724a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80b724e:	b25b      	sxtb	r3, r3
 80b7250:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80b7254:	d103      	bne.n	80b725e <vQueueWaitForMessageRestricted+0x2a>
 80b7256:	697b      	ldr	r3, [r7, #20]
 80b7258:	2200      	movs	r2, #0
 80b725a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80b725e:	697b      	ldr	r3, [r7, #20]
 80b7260:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80b7264:	b25b      	sxtb	r3, r3
 80b7266:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80b726a:	d103      	bne.n	80b7274 <vQueueWaitForMessageRestricted+0x40>
 80b726c:	697b      	ldr	r3, [r7, #20]
 80b726e:	2200      	movs	r2, #0
 80b7270:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80b7274:	f001 fd26 	bl	80b8cc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80b7278:	697b      	ldr	r3, [r7, #20]
 80b727a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80b727c:	2b00      	cmp	r3, #0
 80b727e:	d106      	bne.n	80b728e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80b7280:	697b      	ldr	r3, [r7, #20]
 80b7282:	3324      	adds	r3, #36	; 0x24
 80b7284:	687a      	ldr	r2, [r7, #4]
 80b7286:	68b9      	ldr	r1, [r7, #8]
 80b7288:	4618      	mov	r0, r3
 80b728a:	f000 fcc3 	bl	80b7c14 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80b728e:	6978      	ldr	r0, [r7, #20]
 80b7290:	f7ff ff26 	bl	80b70e0 <prvUnlockQueue>
	}
 80b7294:	bf00      	nop
 80b7296:	3718      	adds	r7, #24
 80b7298:	46bd      	mov	sp, r7
 80b729a:	bd80      	pop	{r7, pc}

080b729c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80b729c:	b580      	push	{r7, lr}
 80b729e:	b08e      	sub	sp, #56	; 0x38
 80b72a0:	af04      	add	r7, sp, #16
 80b72a2:	60f8      	str	r0, [r7, #12]
 80b72a4:	60b9      	str	r1, [r7, #8]
 80b72a6:	607a      	str	r2, [r7, #4]
 80b72a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80b72aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80b72ac:	2b00      	cmp	r3, #0
 80b72ae:	d10a      	bne.n	80b72c6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80b72b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b72b4:	f383 8811 	msr	BASEPRI, r3
 80b72b8:	f3bf 8f6f 	isb	sy
 80b72bc:	f3bf 8f4f 	dsb	sy
 80b72c0:	623b      	str	r3, [r7, #32]
}
 80b72c2:	bf00      	nop
 80b72c4:	e7fe      	b.n	80b72c4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80b72c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80b72c8:	2b00      	cmp	r3, #0
 80b72ca:	d10a      	bne.n	80b72e2 <xTaskCreateStatic+0x46>
	__asm volatile
 80b72cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b72d0:	f383 8811 	msr	BASEPRI, r3
 80b72d4:	f3bf 8f6f 	isb	sy
 80b72d8:	f3bf 8f4f 	dsb	sy
 80b72dc:	61fb      	str	r3, [r7, #28]
}
 80b72de:	bf00      	nop
 80b72e0:	e7fe      	b.n	80b72e0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80b72e2:	235c      	movs	r3, #92	; 0x5c
 80b72e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80b72e6:	693b      	ldr	r3, [r7, #16]
 80b72e8:	2b5c      	cmp	r3, #92	; 0x5c
 80b72ea:	d00a      	beq.n	80b7302 <xTaskCreateStatic+0x66>
	__asm volatile
 80b72ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b72f0:	f383 8811 	msr	BASEPRI, r3
 80b72f4:	f3bf 8f6f 	isb	sy
 80b72f8:	f3bf 8f4f 	dsb	sy
 80b72fc:	61bb      	str	r3, [r7, #24]
}
 80b72fe:	bf00      	nop
 80b7300:	e7fe      	b.n	80b7300 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80b7302:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80b7304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80b7306:	2b00      	cmp	r3, #0
 80b7308:	d01e      	beq.n	80b7348 <xTaskCreateStatic+0xac>
 80b730a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80b730c:	2b00      	cmp	r3, #0
 80b730e:	d01b      	beq.n	80b7348 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80b7310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80b7312:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80b7314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b7316:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80b7318:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80b731a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b731c:	2202      	movs	r2, #2
 80b731e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80b7322:	2300      	movs	r3, #0
 80b7324:	9303      	str	r3, [sp, #12]
 80b7326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b7328:	9302      	str	r3, [sp, #8]
 80b732a:	f107 0314 	add.w	r3, r7, #20
 80b732e:	9301      	str	r3, [sp, #4]
 80b7330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80b7332:	9300      	str	r3, [sp, #0]
 80b7334:	683b      	ldr	r3, [r7, #0]
 80b7336:	687a      	ldr	r2, [r7, #4]
 80b7338:	68b9      	ldr	r1, [r7, #8]
 80b733a:	68f8      	ldr	r0, [r7, #12]
 80b733c:	f000 f850 	bl	80b73e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80b7340:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80b7342:	f000 f8dd 	bl	80b7500 <prvAddNewTaskToReadyList>
 80b7346:	e001      	b.n	80b734c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80b7348:	2300      	movs	r3, #0
 80b734a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80b734c:	697b      	ldr	r3, [r7, #20]
	}
 80b734e:	4618      	mov	r0, r3
 80b7350:	3728      	adds	r7, #40	; 0x28
 80b7352:	46bd      	mov	sp, r7
 80b7354:	bd80      	pop	{r7, pc}

080b7356 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80b7356:	b580      	push	{r7, lr}
 80b7358:	b08c      	sub	sp, #48	; 0x30
 80b735a:	af04      	add	r7, sp, #16
 80b735c:	60f8      	str	r0, [r7, #12]
 80b735e:	60b9      	str	r1, [r7, #8]
 80b7360:	603b      	str	r3, [r7, #0]
 80b7362:	4613      	mov	r3, r2
 80b7364:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80b7366:	88fb      	ldrh	r3, [r7, #6]
 80b7368:	009b      	lsls	r3, r3, #2
 80b736a:	4618      	mov	r0, r3
 80b736c:	f001 fd9c 	bl	80b8ea8 <pvPortMalloc>
 80b7370:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80b7372:	697b      	ldr	r3, [r7, #20]
 80b7374:	2b00      	cmp	r3, #0
 80b7376:	d00e      	beq.n	80b7396 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80b7378:	205c      	movs	r0, #92	; 0x5c
 80b737a:	f001 fd95 	bl	80b8ea8 <pvPortMalloc>
 80b737e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80b7380:	69fb      	ldr	r3, [r7, #28]
 80b7382:	2b00      	cmp	r3, #0
 80b7384:	d003      	beq.n	80b738e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80b7386:	69fb      	ldr	r3, [r7, #28]
 80b7388:	697a      	ldr	r2, [r7, #20]
 80b738a:	631a      	str	r2, [r3, #48]	; 0x30
 80b738c:	e005      	b.n	80b739a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80b738e:	6978      	ldr	r0, [r7, #20]
 80b7390:	f001 fe56 	bl	80b9040 <vPortFree>
 80b7394:	e001      	b.n	80b739a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80b7396:	2300      	movs	r3, #0
 80b7398:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80b739a:	69fb      	ldr	r3, [r7, #28]
 80b739c:	2b00      	cmp	r3, #0
 80b739e:	d017      	beq.n	80b73d0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80b73a0:	69fb      	ldr	r3, [r7, #28]
 80b73a2:	2200      	movs	r2, #0
 80b73a4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80b73a8:	88fa      	ldrh	r2, [r7, #6]
 80b73aa:	2300      	movs	r3, #0
 80b73ac:	9303      	str	r3, [sp, #12]
 80b73ae:	69fb      	ldr	r3, [r7, #28]
 80b73b0:	9302      	str	r3, [sp, #8]
 80b73b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80b73b4:	9301      	str	r3, [sp, #4]
 80b73b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80b73b8:	9300      	str	r3, [sp, #0]
 80b73ba:	683b      	ldr	r3, [r7, #0]
 80b73bc:	68b9      	ldr	r1, [r7, #8]
 80b73be:	68f8      	ldr	r0, [r7, #12]
 80b73c0:	f000 f80e 	bl	80b73e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80b73c4:	69f8      	ldr	r0, [r7, #28]
 80b73c6:	f000 f89b 	bl	80b7500 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80b73ca:	2301      	movs	r3, #1
 80b73cc:	61bb      	str	r3, [r7, #24]
 80b73ce:	e002      	b.n	80b73d6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80b73d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80b73d4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80b73d6:	69bb      	ldr	r3, [r7, #24]
	}
 80b73d8:	4618      	mov	r0, r3
 80b73da:	3720      	adds	r7, #32
 80b73dc:	46bd      	mov	sp, r7
 80b73de:	bd80      	pop	{r7, pc}

080b73e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80b73e0:	b580      	push	{r7, lr}
 80b73e2:	b088      	sub	sp, #32
 80b73e4:	af00      	add	r7, sp, #0
 80b73e6:	60f8      	str	r0, [r7, #12]
 80b73e8:	60b9      	str	r1, [r7, #8]
 80b73ea:	607a      	str	r2, [r7, #4]
 80b73ec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80b73ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80b73f0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80b73f2:	687b      	ldr	r3, [r7, #4]
 80b73f4:	009b      	lsls	r3, r3, #2
 80b73f6:	461a      	mov	r2, r3
 80b73f8:	21a5      	movs	r1, #165	; 0xa5
 80b73fa:	f008 fddf 	bl	80bffbc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80b73fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80b7400:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80b7402:	687b      	ldr	r3, [r7, #4]
 80b7404:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80b7408:	3b01      	subs	r3, #1
 80b740a:	009b      	lsls	r3, r3, #2
 80b740c:	4413      	add	r3, r2
 80b740e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80b7410:	69bb      	ldr	r3, [r7, #24]
 80b7412:	f023 0307 	bic.w	r3, r3, #7
 80b7416:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80b7418:	69bb      	ldr	r3, [r7, #24]
 80b741a:	f003 0307 	and.w	r3, r3, #7
 80b741e:	2b00      	cmp	r3, #0
 80b7420:	d00a      	beq.n	80b7438 <prvInitialiseNewTask+0x58>
	__asm volatile
 80b7422:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b7426:	f383 8811 	msr	BASEPRI, r3
 80b742a:	f3bf 8f6f 	isb	sy
 80b742e:	f3bf 8f4f 	dsb	sy
 80b7432:	617b      	str	r3, [r7, #20]
}
 80b7434:	bf00      	nop
 80b7436:	e7fe      	b.n	80b7436 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80b7438:	68bb      	ldr	r3, [r7, #8]
 80b743a:	2b00      	cmp	r3, #0
 80b743c:	d01f      	beq.n	80b747e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80b743e:	2300      	movs	r3, #0
 80b7440:	61fb      	str	r3, [r7, #28]
 80b7442:	e012      	b.n	80b746a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80b7444:	68ba      	ldr	r2, [r7, #8]
 80b7446:	69fb      	ldr	r3, [r7, #28]
 80b7448:	4413      	add	r3, r2
 80b744a:	7819      	ldrb	r1, [r3, #0]
 80b744c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80b744e:	69fb      	ldr	r3, [r7, #28]
 80b7450:	4413      	add	r3, r2
 80b7452:	3334      	adds	r3, #52	; 0x34
 80b7454:	460a      	mov	r2, r1
 80b7456:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80b7458:	68ba      	ldr	r2, [r7, #8]
 80b745a:	69fb      	ldr	r3, [r7, #28]
 80b745c:	4413      	add	r3, r2
 80b745e:	781b      	ldrb	r3, [r3, #0]
 80b7460:	2b00      	cmp	r3, #0
 80b7462:	d006      	beq.n	80b7472 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80b7464:	69fb      	ldr	r3, [r7, #28]
 80b7466:	3301      	adds	r3, #1
 80b7468:	61fb      	str	r3, [r7, #28]
 80b746a:	69fb      	ldr	r3, [r7, #28]
 80b746c:	2b0f      	cmp	r3, #15
 80b746e:	d9e9      	bls.n	80b7444 <prvInitialiseNewTask+0x64>
 80b7470:	e000      	b.n	80b7474 <prvInitialiseNewTask+0x94>
			{
				break;
 80b7472:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80b7474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80b7476:	2200      	movs	r2, #0
 80b7478:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80b747c:	e003      	b.n	80b7486 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80b747e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80b7480:	2200      	movs	r2, #0
 80b7482:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80b7486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80b7488:	2b37      	cmp	r3, #55	; 0x37
 80b748a:	d901      	bls.n	80b7490 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80b748c:	2337      	movs	r3, #55	; 0x37
 80b748e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80b7490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80b7492:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80b7494:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80b7496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80b7498:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80b749a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80b749c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80b749e:	2200      	movs	r2, #0
 80b74a0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80b74a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80b74a4:	3304      	adds	r3, #4
 80b74a6:	4618      	mov	r0, r3
 80b74a8:	f7ff f8be 	bl	80b6628 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80b74ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80b74ae:	3318      	adds	r3, #24
 80b74b0:	4618      	mov	r0, r3
 80b74b2:	f7ff f8b9 	bl	80b6628 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80b74b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80b74b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80b74ba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80b74bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80b74be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80b74c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80b74c4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80b74c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80b74c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80b74ca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80b74cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80b74ce:	2200      	movs	r2, #0
 80b74d0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80b74d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80b74d4:	2200      	movs	r2, #0
 80b74d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80b74da:	683a      	ldr	r2, [r7, #0]
 80b74dc:	68f9      	ldr	r1, [r7, #12]
 80b74de:	69b8      	ldr	r0, [r7, #24]
 80b74e0:	f001 fa94 	bl	80b8a0c <pxPortInitialiseStack>
 80b74e4:	4602      	mov	r2, r0
 80b74e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80b74e8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80b74ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80b74ec:	2b00      	cmp	r3, #0
 80b74ee:	d002      	beq.n	80b74f6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80b74f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80b74f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80b74f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80b74f6:	bf00      	nop
 80b74f8:	3720      	adds	r7, #32
 80b74fa:	46bd      	mov	sp, r7
 80b74fc:	bd80      	pop	{r7, pc}
	...

080b7500 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80b7500:	b580      	push	{r7, lr}
 80b7502:	b082      	sub	sp, #8
 80b7504:	af00      	add	r7, sp, #0
 80b7506:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80b7508:	f001 fbac 	bl	80b8c64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80b750c:	4b2d      	ldr	r3, [pc, #180]	; (80b75c4 <prvAddNewTaskToReadyList+0xc4>)
 80b750e:	681b      	ldr	r3, [r3, #0]
 80b7510:	3301      	adds	r3, #1
 80b7512:	4a2c      	ldr	r2, [pc, #176]	; (80b75c4 <prvAddNewTaskToReadyList+0xc4>)
 80b7514:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80b7516:	4b2c      	ldr	r3, [pc, #176]	; (80b75c8 <prvAddNewTaskToReadyList+0xc8>)
 80b7518:	681b      	ldr	r3, [r3, #0]
 80b751a:	2b00      	cmp	r3, #0
 80b751c:	d109      	bne.n	80b7532 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80b751e:	4a2a      	ldr	r2, [pc, #168]	; (80b75c8 <prvAddNewTaskToReadyList+0xc8>)
 80b7520:	687b      	ldr	r3, [r7, #4]
 80b7522:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80b7524:	4b27      	ldr	r3, [pc, #156]	; (80b75c4 <prvAddNewTaskToReadyList+0xc4>)
 80b7526:	681b      	ldr	r3, [r3, #0]
 80b7528:	2b01      	cmp	r3, #1
 80b752a:	d110      	bne.n	80b754e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80b752c:	f000 fc9e 	bl	80b7e6c <prvInitialiseTaskLists>
 80b7530:	e00d      	b.n	80b754e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80b7532:	4b26      	ldr	r3, [pc, #152]	; (80b75cc <prvAddNewTaskToReadyList+0xcc>)
 80b7534:	681b      	ldr	r3, [r3, #0]
 80b7536:	2b00      	cmp	r3, #0
 80b7538:	d109      	bne.n	80b754e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80b753a:	4b23      	ldr	r3, [pc, #140]	; (80b75c8 <prvAddNewTaskToReadyList+0xc8>)
 80b753c:	681b      	ldr	r3, [r3, #0]
 80b753e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80b7540:	687b      	ldr	r3, [r7, #4]
 80b7542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80b7544:	429a      	cmp	r2, r3
 80b7546:	d802      	bhi.n	80b754e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80b7548:	4a1f      	ldr	r2, [pc, #124]	; (80b75c8 <prvAddNewTaskToReadyList+0xc8>)
 80b754a:	687b      	ldr	r3, [r7, #4]
 80b754c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80b754e:	4b20      	ldr	r3, [pc, #128]	; (80b75d0 <prvAddNewTaskToReadyList+0xd0>)
 80b7550:	681b      	ldr	r3, [r3, #0]
 80b7552:	3301      	adds	r3, #1
 80b7554:	4a1e      	ldr	r2, [pc, #120]	; (80b75d0 <prvAddNewTaskToReadyList+0xd0>)
 80b7556:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80b7558:	4b1d      	ldr	r3, [pc, #116]	; (80b75d0 <prvAddNewTaskToReadyList+0xd0>)
 80b755a:	681a      	ldr	r2, [r3, #0]
 80b755c:	687b      	ldr	r3, [r7, #4]
 80b755e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80b7560:	687b      	ldr	r3, [r7, #4]
 80b7562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80b7564:	4b1b      	ldr	r3, [pc, #108]	; (80b75d4 <prvAddNewTaskToReadyList+0xd4>)
 80b7566:	681b      	ldr	r3, [r3, #0]
 80b7568:	429a      	cmp	r2, r3
 80b756a:	d903      	bls.n	80b7574 <prvAddNewTaskToReadyList+0x74>
 80b756c:	687b      	ldr	r3, [r7, #4]
 80b756e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80b7570:	4a18      	ldr	r2, [pc, #96]	; (80b75d4 <prvAddNewTaskToReadyList+0xd4>)
 80b7572:	6013      	str	r3, [r2, #0]
 80b7574:	687b      	ldr	r3, [r7, #4]
 80b7576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80b7578:	4613      	mov	r3, r2
 80b757a:	009b      	lsls	r3, r3, #2
 80b757c:	4413      	add	r3, r2
 80b757e:	009b      	lsls	r3, r3, #2
 80b7580:	4a15      	ldr	r2, [pc, #84]	; (80b75d8 <prvAddNewTaskToReadyList+0xd8>)
 80b7582:	441a      	add	r2, r3
 80b7584:	687b      	ldr	r3, [r7, #4]
 80b7586:	3304      	adds	r3, #4
 80b7588:	4619      	mov	r1, r3
 80b758a:	4610      	mov	r0, r2
 80b758c:	f7ff f859 	bl	80b6642 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80b7590:	f001 fb98 	bl	80b8cc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80b7594:	4b0d      	ldr	r3, [pc, #52]	; (80b75cc <prvAddNewTaskToReadyList+0xcc>)
 80b7596:	681b      	ldr	r3, [r3, #0]
 80b7598:	2b00      	cmp	r3, #0
 80b759a:	d00e      	beq.n	80b75ba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80b759c:	4b0a      	ldr	r3, [pc, #40]	; (80b75c8 <prvAddNewTaskToReadyList+0xc8>)
 80b759e:	681b      	ldr	r3, [r3, #0]
 80b75a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80b75a2:	687b      	ldr	r3, [r7, #4]
 80b75a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80b75a6:	429a      	cmp	r2, r3
 80b75a8:	d207      	bcs.n	80b75ba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80b75aa:	4b0c      	ldr	r3, [pc, #48]	; (80b75dc <prvAddNewTaskToReadyList+0xdc>)
 80b75ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80b75b0:	601a      	str	r2, [r3, #0]
 80b75b2:	f3bf 8f4f 	dsb	sy
 80b75b6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80b75ba:	bf00      	nop
 80b75bc:	3708      	adds	r7, #8
 80b75be:	46bd      	mov	sp, r7
 80b75c0:	bd80      	pop	{r7, pc}
 80b75c2:	bf00      	nop
 80b75c4:	20009bec 	.word	0x20009bec
 80b75c8:	20009718 	.word	0x20009718
 80b75cc:	20009bf8 	.word	0x20009bf8
 80b75d0:	20009c08 	.word	0x20009c08
 80b75d4:	20009bf4 	.word	0x20009bf4
 80b75d8:	2000971c 	.word	0x2000971c
 80b75dc:	e000ed04 	.word	0xe000ed04

080b75e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80b75e0:	b580      	push	{r7, lr}
 80b75e2:	b084      	sub	sp, #16
 80b75e4:	af00      	add	r7, sp, #0
 80b75e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80b75e8:	2300      	movs	r3, #0
 80b75ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80b75ec:	687b      	ldr	r3, [r7, #4]
 80b75ee:	2b00      	cmp	r3, #0
 80b75f0:	d017      	beq.n	80b7622 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80b75f2:	4b13      	ldr	r3, [pc, #76]	; (80b7640 <vTaskDelay+0x60>)
 80b75f4:	681b      	ldr	r3, [r3, #0]
 80b75f6:	2b00      	cmp	r3, #0
 80b75f8:	d00a      	beq.n	80b7610 <vTaskDelay+0x30>
	__asm volatile
 80b75fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b75fe:	f383 8811 	msr	BASEPRI, r3
 80b7602:	f3bf 8f6f 	isb	sy
 80b7606:	f3bf 8f4f 	dsb	sy
 80b760a:	60bb      	str	r3, [r7, #8]
}
 80b760c:	bf00      	nop
 80b760e:	e7fe      	b.n	80b760e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80b7610:	f000 f8f6 	bl	80b7800 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80b7614:	2100      	movs	r1, #0
 80b7616:	6878      	ldr	r0, [r7, #4]
 80b7618:	f000 fd72 	bl	80b8100 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80b761c:	f000 f8fe 	bl	80b781c <xTaskResumeAll>
 80b7620:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80b7622:	68fb      	ldr	r3, [r7, #12]
 80b7624:	2b00      	cmp	r3, #0
 80b7626:	d107      	bne.n	80b7638 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80b7628:	4b06      	ldr	r3, [pc, #24]	; (80b7644 <vTaskDelay+0x64>)
 80b762a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80b762e:	601a      	str	r2, [r3, #0]
 80b7630:	f3bf 8f4f 	dsb	sy
 80b7634:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80b7638:	bf00      	nop
 80b763a:	3710      	adds	r7, #16
 80b763c:	46bd      	mov	sp, r7
 80b763e:	bd80      	pop	{r7, pc}
 80b7640:	20009c14 	.word	0x20009c14
 80b7644:	e000ed04 	.word	0xe000ed04

080b7648 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80b7648:	b580      	push	{r7, lr}
 80b764a:	b084      	sub	sp, #16
 80b764c:	af00      	add	r7, sp, #0
 80b764e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80b7650:	f001 fb08 	bl	80b8c64 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80b7654:	687b      	ldr	r3, [r7, #4]
 80b7656:	2b00      	cmp	r3, #0
 80b7658:	d102      	bne.n	80b7660 <vTaskSuspend+0x18>
 80b765a:	4b30      	ldr	r3, [pc, #192]	; (80b771c <vTaskSuspend+0xd4>)
 80b765c:	681b      	ldr	r3, [r3, #0]
 80b765e:	e000      	b.n	80b7662 <vTaskSuspend+0x1a>
 80b7660:	687b      	ldr	r3, [r7, #4]
 80b7662:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80b7664:	68fb      	ldr	r3, [r7, #12]
 80b7666:	3304      	adds	r3, #4
 80b7668:	4618      	mov	r0, r3
 80b766a:	f7ff f847 	bl	80b66fc <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80b766e:	68fb      	ldr	r3, [r7, #12]
 80b7670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80b7672:	2b00      	cmp	r3, #0
 80b7674:	d004      	beq.n	80b7680 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80b7676:	68fb      	ldr	r3, [r7, #12]
 80b7678:	3318      	adds	r3, #24
 80b767a:	4618      	mov	r0, r3
 80b767c:	f7ff f83e 	bl	80b66fc <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80b7680:	68fb      	ldr	r3, [r7, #12]
 80b7682:	3304      	adds	r3, #4
 80b7684:	4619      	mov	r1, r3
 80b7686:	4826      	ldr	r0, [pc, #152]	; (80b7720 <vTaskSuspend+0xd8>)
 80b7688:	f7fe ffdb 	bl	80b6642 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80b768c:	68fb      	ldr	r3, [r7, #12]
 80b768e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80b7692:	b2db      	uxtb	r3, r3
 80b7694:	2b01      	cmp	r3, #1
 80b7696:	d103      	bne.n	80b76a0 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80b7698:	68fb      	ldr	r3, [r7, #12]
 80b769a:	2200      	movs	r2, #0
 80b769c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80b76a0:	f001 fb10 	bl	80b8cc4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80b76a4:	4b1f      	ldr	r3, [pc, #124]	; (80b7724 <vTaskSuspend+0xdc>)
 80b76a6:	681b      	ldr	r3, [r3, #0]
 80b76a8:	2b00      	cmp	r3, #0
 80b76aa:	d005      	beq.n	80b76b8 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80b76ac:	f001 fada 	bl	80b8c64 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80b76b0:	f000 fc7a 	bl	80b7fa8 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80b76b4:	f001 fb06 	bl	80b8cc4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80b76b8:	4b18      	ldr	r3, [pc, #96]	; (80b771c <vTaskSuspend+0xd4>)
 80b76ba:	681b      	ldr	r3, [r3, #0]
 80b76bc:	68fa      	ldr	r2, [r7, #12]
 80b76be:	429a      	cmp	r2, r3
 80b76c0:	d127      	bne.n	80b7712 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 80b76c2:	4b18      	ldr	r3, [pc, #96]	; (80b7724 <vTaskSuspend+0xdc>)
 80b76c4:	681b      	ldr	r3, [r3, #0]
 80b76c6:	2b00      	cmp	r3, #0
 80b76c8:	d017      	beq.n	80b76fa <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80b76ca:	4b17      	ldr	r3, [pc, #92]	; (80b7728 <vTaskSuspend+0xe0>)
 80b76cc:	681b      	ldr	r3, [r3, #0]
 80b76ce:	2b00      	cmp	r3, #0
 80b76d0:	d00a      	beq.n	80b76e8 <vTaskSuspend+0xa0>
	__asm volatile
 80b76d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b76d6:	f383 8811 	msr	BASEPRI, r3
 80b76da:	f3bf 8f6f 	isb	sy
 80b76de:	f3bf 8f4f 	dsb	sy
 80b76e2:	60bb      	str	r3, [r7, #8]
}
 80b76e4:	bf00      	nop
 80b76e6:	e7fe      	b.n	80b76e6 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 80b76e8:	4b10      	ldr	r3, [pc, #64]	; (80b772c <vTaskSuspend+0xe4>)
 80b76ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80b76ee:	601a      	str	r2, [r3, #0]
 80b76f0:	f3bf 8f4f 	dsb	sy
 80b76f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80b76f8:	e00b      	b.n	80b7712 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80b76fa:	4b09      	ldr	r3, [pc, #36]	; (80b7720 <vTaskSuspend+0xd8>)
 80b76fc:	681a      	ldr	r2, [r3, #0]
 80b76fe:	4b0c      	ldr	r3, [pc, #48]	; (80b7730 <vTaskSuspend+0xe8>)
 80b7700:	681b      	ldr	r3, [r3, #0]
 80b7702:	429a      	cmp	r2, r3
 80b7704:	d103      	bne.n	80b770e <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 80b7706:	4b05      	ldr	r3, [pc, #20]	; (80b771c <vTaskSuspend+0xd4>)
 80b7708:	2200      	movs	r2, #0
 80b770a:	601a      	str	r2, [r3, #0]
	}
 80b770c:	e001      	b.n	80b7712 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 80b770e:	f000 f9ff 	bl	80b7b10 <vTaskSwitchContext>
	}
 80b7712:	bf00      	nop
 80b7714:	3710      	adds	r7, #16
 80b7716:	46bd      	mov	sp, r7
 80b7718:	bd80      	pop	{r7, pc}
 80b771a:	bf00      	nop
 80b771c:	20009718 	.word	0x20009718
 80b7720:	20009bd8 	.word	0x20009bd8
 80b7724:	20009bf8 	.word	0x20009bf8
 80b7728:	20009c14 	.word	0x20009c14
 80b772c:	e000ed04 	.word	0xe000ed04
 80b7730:	20009bec 	.word	0x20009bec

080b7734 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80b7734:	b580      	push	{r7, lr}
 80b7736:	b08a      	sub	sp, #40	; 0x28
 80b7738:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80b773a:	2300      	movs	r3, #0
 80b773c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80b773e:	2300      	movs	r3, #0
 80b7740:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80b7742:	463a      	mov	r2, r7
 80b7744:	1d39      	adds	r1, r7, #4
 80b7746:	f107 0308 	add.w	r3, r7, #8
 80b774a:	4618      	mov	r0, r3
 80b774c:	f7fe ff18 	bl	80b6580 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80b7750:	6839      	ldr	r1, [r7, #0]
 80b7752:	687b      	ldr	r3, [r7, #4]
 80b7754:	68ba      	ldr	r2, [r7, #8]
 80b7756:	9202      	str	r2, [sp, #8]
 80b7758:	9301      	str	r3, [sp, #4]
 80b775a:	2300      	movs	r3, #0
 80b775c:	9300      	str	r3, [sp, #0]
 80b775e:	2300      	movs	r3, #0
 80b7760:	460a      	mov	r2, r1
 80b7762:	4921      	ldr	r1, [pc, #132]	; (80b77e8 <vTaskStartScheduler+0xb4>)
 80b7764:	4821      	ldr	r0, [pc, #132]	; (80b77ec <vTaskStartScheduler+0xb8>)
 80b7766:	f7ff fd99 	bl	80b729c <xTaskCreateStatic>
 80b776a:	4603      	mov	r3, r0
 80b776c:	4a20      	ldr	r2, [pc, #128]	; (80b77f0 <vTaskStartScheduler+0xbc>)
 80b776e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80b7770:	4b1f      	ldr	r3, [pc, #124]	; (80b77f0 <vTaskStartScheduler+0xbc>)
 80b7772:	681b      	ldr	r3, [r3, #0]
 80b7774:	2b00      	cmp	r3, #0
 80b7776:	d002      	beq.n	80b777e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80b7778:	2301      	movs	r3, #1
 80b777a:	617b      	str	r3, [r7, #20]
 80b777c:	e001      	b.n	80b7782 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80b777e:	2300      	movs	r3, #0
 80b7780:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80b7782:	697b      	ldr	r3, [r7, #20]
 80b7784:	2b01      	cmp	r3, #1
 80b7786:	d102      	bne.n	80b778e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80b7788:	f000 fd0e 	bl	80b81a8 <xTimerCreateTimerTask>
 80b778c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80b778e:	697b      	ldr	r3, [r7, #20]
 80b7790:	2b01      	cmp	r3, #1
 80b7792:	d116      	bne.n	80b77c2 <vTaskStartScheduler+0x8e>
	__asm volatile
 80b7794:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b7798:	f383 8811 	msr	BASEPRI, r3
 80b779c:	f3bf 8f6f 	isb	sy
 80b77a0:	f3bf 8f4f 	dsb	sy
 80b77a4:	613b      	str	r3, [r7, #16]
}
 80b77a6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80b77a8:	4b12      	ldr	r3, [pc, #72]	; (80b77f4 <vTaskStartScheduler+0xc0>)
 80b77aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80b77ae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80b77b0:	4b11      	ldr	r3, [pc, #68]	; (80b77f8 <vTaskStartScheduler+0xc4>)
 80b77b2:	2201      	movs	r2, #1
 80b77b4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80b77b6:	4b11      	ldr	r3, [pc, #68]	; (80b77fc <vTaskStartScheduler+0xc8>)
 80b77b8:	2200      	movs	r2, #0
 80b77ba:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80b77bc:	f001 f9b0 	bl	80b8b20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80b77c0:	e00e      	b.n	80b77e0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80b77c2:	697b      	ldr	r3, [r7, #20]
 80b77c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80b77c8:	d10a      	bne.n	80b77e0 <vTaskStartScheduler+0xac>
	__asm volatile
 80b77ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b77ce:	f383 8811 	msr	BASEPRI, r3
 80b77d2:	f3bf 8f6f 	isb	sy
 80b77d6:	f3bf 8f4f 	dsb	sy
 80b77da:	60fb      	str	r3, [r7, #12]
}
 80b77dc:	bf00      	nop
 80b77de:	e7fe      	b.n	80b77de <vTaskStartScheduler+0xaa>
}
 80b77e0:	bf00      	nop
 80b77e2:	3718      	adds	r7, #24
 80b77e4:	46bd      	mov	sp, r7
 80b77e6:	bd80      	pop	{r7, pc}
 80b77e8:	080c776c 	.word	0x080c776c
 80b77ec:	080b7e3d 	.word	0x080b7e3d
 80b77f0:	20009c10 	.word	0x20009c10
 80b77f4:	20009c0c 	.word	0x20009c0c
 80b77f8:	20009bf8 	.word	0x20009bf8
 80b77fc:	20009bf0 	.word	0x20009bf0

080b7800 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80b7800:	b480      	push	{r7}
 80b7802:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80b7804:	4b04      	ldr	r3, [pc, #16]	; (80b7818 <vTaskSuspendAll+0x18>)
 80b7806:	681b      	ldr	r3, [r3, #0]
 80b7808:	3301      	adds	r3, #1
 80b780a:	4a03      	ldr	r2, [pc, #12]	; (80b7818 <vTaskSuspendAll+0x18>)
 80b780c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80b780e:	bf00      	nop
 80b7810:	46bd      	mov	sp, r7
 80b7812:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b7816:	4770      	bx	lr
 80b7818:	20009c14 	.word	0x20009c14

080b781c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80b781c:	b580      	push	{r7, lr}
 80b781e:	b084      	sub	sp, #16
 80b7820:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80b7822:	2300      	movs	r3, #0
 80b7824:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80b7826:	2300      	movs	r3, #0
 80b7828:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80b782a:	4b42      	ldr	r3, [pc, #264]	; (80b7934 <xTaskResumeAll+0x118>)
 80b782c:	681b      	ldr	r3, [r3, #0]
 80b782e:	2b00      	cmp	r3, #0
 80b7830:	d10a      	bne.n	80b7848 <xTaskResumeAll+0x2c>
	__asm volatile
 80b7832:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b7836:	f383 8811 	msr	BASEPRI, r3
 80b783a:	f3bf 8f6f 	isb	sy
 80b783e:	f3bf 8f4f 	dsb	sy
 80b7842:	603b      	str	r3, [r7, #0]
}
 80b7844:	bf00      	nop
 80b7846:	e7fe      	b.n	80b7846 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80b7848:	f001 fa0c 	bl	80b8c64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80b784c:	4b39      	ldr	r3, [pc, #228]	; (80b7934 <xTaskResumeAll+0x118>)
 80b784e:	681b      	ldr	r3, [r3, #0]
 80b7850:	3b01      	subs	r3, #1
 80b7852:	4a38      	ldr	r2, [pc, #224]	; (80b7934 <xTaskResumeAll+0x118>)
 80b7854:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80b7856:	4b37      	ldr	r3, [pc, #220]	; (80b7934 <xTaskResumeAll+0x118>)
 80b7858:	681b      	ldr	r3, [r3, #0]
 80b785a:	2b00      	cmp	r3, #0
 80b785c:	d162      	bne.n	80b7924 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80b785e:	4b36      	ldr	r3, [pc, #216]	; (80b7938 <xTaskResumeAll+0x11c>)
 80b7860:	681b      	ldr	r3, [r3, #0]
 80b7862:	2b00      	cmp	r3, #0
 80b7864:	d05e      	beq.n	80b7924 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80b7866:	e02f      	b.n	80b78c8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80b7868:	4b34      	ldr	r3, [pc, #208]	; (80b793c <xTaskResumeAll+0x120>)
 80b786a:	68db      	ldr	r3, [r3, #12]
 80b786c:	68db      	ldr	r3, [r3, #12]
 80b786e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80b7870:	68fb      	ldr	r3, [r7, #12]
 80b7872:	3318      	adds	r3, #24
 80b7874:	4618      	mov	r0, r3
 80b7876:	f7fe ff41 	bl	80b66fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80b787a:	68fb      	ldr	r3, [r7, #12]
 80b787c:	3304      	adds	r3, #4
 80b787e:	4618      	mov	r0, r3
 80b7880:	f7fe ff3c 	bl	80b66fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80b7884:	68fb      	ldr	r3, [r7, #12]
 80b7886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80b7888:	4b2d      	ldr	r3, [pc, #180]	; (80b7940 <xTaskResumeAll+0x124>)
 80b788a:	681b      	ldr	r3, [r3, #0]
 80b788c:	429a      	cmp	r2, r3
 80b788e:	d903      	bls.n	80b7898 <xTaskResumeAll+0x7c>
 80b7890:	68fb      	ldr	r3, [r7, #12]
 80b7892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80b7894:	4a2a      	ldr	r2, [pc, #168]	; (80b7940 <xTaskResumeAll+0x124>)
 80b7896:	6013      	str	r3, [r2, #0]
 80b7898:	68fb      	ldr	r3, [r7, #12]
 80b789a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80b789c:	4613      	mov	r3, r2
 80b789e:	009b      	lsls	r3, r3, #2
 80b78a0:	4413      	add	r3, r2
 80b78a2:	009b      	lsls	r3, r3, #2
 80b78a4:	4a27      	ldr	r2, [pc, #156]	; (80b7944 <xTaskResumeAll+0x128>)
 80b78a6:	441a      	add	r2, r3
 80b78a8:	68fb      	ldr	r3, [r7, #12]
 80b78aa:	3304      	adds	r3, #4
 80b78ac:	4619      	mov	r1, r3
 80b78ae:	4610      	mov	r0, r2
 80b78b0:	f7fe fec7 	bl	80b6642 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80b78b4:	68fb      	ldr	r3, [r7, #12]
 80b78b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80b78b8:	4b23      	ldr	r3, [pc, #140]	; (80b7948 <xTaskResumeAll+0x12c>)
 80b78ba:	681b      	ldr	r3, [r3, #0]
 80b78bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80b78be:	429a      	cmp	r2, r3
 80b78c0:	d302      	bcc.n	80b78c8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80b78c2:	4b22      	ldr	r3, [pc, #136]	; (80b794c <xTaskResumeAll+0x130>)
 80b78c4:	2201      	movs	r2, #1
 80b78c6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80b78c8:	4b1c      	ldr	r3, [pc, #112]	; (80b793c <xTaskResumeAll+0x120>)
 80b78ca:	681b      	ldr	r3, [r3, #0]
 80b78cc:	2b00      	cmp	r3, #0
 80b78ce:	d1cb      	bne.n	80b7868 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80b78d0:	68fb      	ldr	r3, [r7, #12]
 80b78d2:	2b00      	cmp	r3, #0
 80b78d4:	d001      	beq.n	80b78da <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80b78d6:	f000 fb67 	bl	80b7fa8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80b78da:	4b1d      	ldr	r3, [pc, #116]	; (80b7950 <xTaskResumeAll+0x134>)
 80b78dc:	681b      	ldr	r3, [r3, #0]
 80b78de:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80b78e0:	687b      	ldr	r3, [r7, #4]
 80b78e2:	2b00      	cmp	r3, #0
 80b78e4:	d010      	beq.n	80b7908 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80b78e6:	f000 f859 	bl	80b799c <xTaskIncrementTick>
 80b78ea:	4603      	mov	r3, r0
 80b78ec:	2b00      	cmp	r3, #0
 80b78ee:	d002      	beq.n	80b78f6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80b78f0:	4b16      	ldr	r3, [pc, #88]	; (80b794c <xTaskResumeAll+0x130>)
 80b78f2:	2201      	movs	r2, #1
 80b78f4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80b78f6:	687b      	ldr	r3, [r7, #4]
 80b78f8:	3b01      	subs	r3, #1
 80b78fa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80b78fc:	687b      	ldr	r3, [r7, #4]
 80b78fe:	2b00      	cmp	r3, #0
 80b7900:	d1f1      	bne.n	80b78e6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80b7902:	4b13      	ldr	r3, [pc, #76]	; (80b7950 <xTaskResumeAll+0x134>)
 80b7904:	2200      	movs	r2, #0
 80b7906:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80b7908:	4b10      	ldr	r3, [pc, #64]	; (80b794c <xTaskResumeAll+0x130>)
 80b790a:	681b      	ldr	r3, [r3, #0]
 80b790c:	2b00      	cmp	r3, #0
 80b790e:	d009      	beq.n	80b7924 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80b7910:	2301      	movs	r3, #1
 80b7912:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80b7914:	4b0f      	ldr	r3, [pc, #60]	; (80b7954 <xTaskResumeAll+0x138>)
 80b7916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80b791a:	601a      	str	r2, [r3, #0]
 80b791c:	f3bf 8f4f 	dsb	sy
 80b7920:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80b7924:	f001 f9ce 	bl	80b8cc4 <vPortExitCritical>

	return xAlreadyYielded;
 80b7928:	68bb      	ldr	r3, [r7, #8]
}
 80b792a:	4618      	mov	r0, r3
 80b792c:	3710      	adds	r7, #16
 80b792e:	46bd      	mov	sp, r7
 80b7930:	bd80      	pop	{r7, pc}
 80b7932:	bf00      	nop
 80b7934:	20009c14 	.word	0x20009c14
 80b7938:	20009bec 	.word	0x20009bec
 80b793c:	20009bac 	.word	0x20009bac
 80b7940:	20009bf4 	.word	0x20009bf4
 80b7944:	2000971c 	.word	0x2000971c
 80b7948:	20009718 	.word	0x20009718
 80b794c:	20009c00 	.word	0x20009c00
 80b7950:	20009bfc 	.word	0x20009bfc
 80b7954:	e000ed04 	.word	0xe000ed04

080b7958 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80b7958:	b480      	push	{r7}
 80b795a:	b083      	sub	sp, #12
 80b795c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80b795e:	4b05      	ldr	r3, [pc, #20]	; (80b7974 <xTaskGetTickCount+0x1c>)
 80b7960:	681b      	ldr	r3, [r3, #0]
 80b7962:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80b7964:	687b      	ldr	r3, [r7, #4]
}
 80b7966:	4618      	mov	r0, r3
 80b7968:	370c      	adds	r7, #12
 80b796a:	46bd      	mov	sp, r7
 80b796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b7970:	4770      	bx	lr
 80b7972:	bf00      	nop
 80b7974:	20009bf0 	.word	0x20009bf0

080b7978 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80b7978:	b580      	push	{r7, lr}
 80b797a:	b082      	sub	sp, #8
 80b797c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80b797e:	f001 fa53 	bl	80b8e28 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80b7982:	2300      	movs	r3, #0
 80b7984:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80b7986:	4b04      	ldr	r3, [pc, #16]	; (80b7998 <xTaskGetTickCountFromISR+0x20>)
 80b7988:	681b      	ldr	r3, [r3, #0]
 80b798a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80b798c:	683b      	ldr	r3, [r7, #0]
}
 80b798e:	4618      	mov	r0, r3
 80b7990:	3708      	adds	r7, #8
 80b7992:	46bd      	mov	sp, r7
 80b7994:	bd80      	pop	{r7, pc}
 80b7996:	bf00      	nop
 80b7998:	20009bf0 	.word	0x20009bf0

080b799c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80b799c:	b580      	push	{r7, lr}
 80b799e:	b086      	sub	sp, #24
 80b79a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80b79a2:	2300      	movs	r3, #0
 80b79a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80b79a6:	4b4f      	ldr	r3, [pc, #316]	; (80b7ae4 <xTaskIncrementTick+0x148>)
 80b79a8:	681b      	ldr	r3, [r3, #0]
 80b79aa:	2b00      	cmp	r3, #0
 80b79ac:	f040 808f 	bne.w	80b7ace <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80b79b0:	4b4d      	ldr	r3, [pc, #308]	; (80b7ae8 <xTaskIncrementTick+0x14c>)
 80b79b2:	681b      	ldr	r3, [r3, #0]
 80b79b4:	3301      	adds	r3, #1
 80b79b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80b79b8:	4a4b      	ldr	r2, [pc, #300]	; (80b7ae8 <xTaskIncrementTick+0x14c>)
 80b79ba:	693b      	ldr	r3, [r7, #16]
 80b79bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80b79be:	693b      	ldr	r3, [r7, #16]
 80b79c0:	2b00      	cmp	r3, #0
 80b79c2:	d120      	bne.n	80b7a06 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80b79c4:	4b49      	ldr	r3, [pc, #292]	; (80b7aec <xTaskIncrementTick+0x150>)
 80b79c6:	681b      	ldr	r3, [r3, #0]
 80b79c8:	681b      	ldr	r3, [r3, #0]
 80b79ca:	2b00      	cmp	r3, #0
 80b79cc:	d00a      	beq.n	80b79e4 <xTaskIncrementTick+0x48>
	__asm volatile
 80b79ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b79d2:	f383 8811 	msr	BASEPRI, r3
 80b79d6:	f3bf 8f6f 	isb	sy
 80b79da:	f3bf 8f4f 	dsb	sy
 80b79de:	603b      	str	r3, [r7, #0]
}
 80b79e0:	bf00      	nop
 80b79e2:	e7fe      	b.n	80b79e2 <xTaskIncrementTick+0x46>
 80b79e4:	4b41      	ldr	r3, [pc, #260]	; (80b7aec <xTaskIncrementTick+0x150>)
 80b79e6:	681b      	ldr	r3, [r3, #0]
 80b79e8:	60fb      	str	r3, [r7, #12]
 80b79ea:	4b41      	ldr	r3, [pc, #260]	; (80b7af0 <xTaskIncrementTick+0x154>)
 80b79ec:	681b      	ldr	r3, [r3, #0]
 80b79ee:	4a3f      	ldr	r2, [pc, #252]	; (80b7aec <xTaskIncrementTick+0x150>)
 80b79f0:	6013      	str	r3, [r2, #0]
 80b79f2:	4a3f      	ldr	r2, [pc, #252]	; (80b7af0 <xTaskIncrementTick+0x154>)
 80b79f4:	68fb      	ldr	r3, [r7, #12]
 80b79f6:	6013      	str	r3, [r2, #0]
 80b79f8:	4b3e      	ldr	r3, [pc, #248]	; (80b7af4 <xTaskIncrementTick+0x158>)
 80b79fa:	681b      	ldr	r3, [r3, #0]
 80b79fc:	3301      	adds	r3, #1
 80b79fe:	4a3d      	ldr	r2, [pc, #244]	; (80b7af4 <xTaskIncrementTick+0x158>)
 80b7a00:	6013      	str	r3, [r2, #0]
 80b7a02:	f000 fad1 	bl	80b7fa8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80b7a06:	4b3c      	ldr	r3, [pc, #240]	; (80b7af8 <xTaskIncrementTick+0x15c>)
 80b7a08:	681b      	ldr	r3, [r3, #0]
 80b7a0a:	693a      	ldr	r2, [r7, #16]
 80b7a0c:	429a      	cmp	r2, r3
 80b7a0e:	d349      	bcc.n	80b7aa4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80b7a10:	4b36      	ldr	r3, [pc, #216]	; (80b7aec <xTaskIncrementTick+0x150>)
 80b7a12:	681b      	ldr	r3, [r3, #0]
 80b7a14:	681b      	ldr	r3, [r3, #0]
 80b7a16:	2b00      	cmp	r3, #0
 80b7a18:	d104      	bne.n	80b7a24 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80b7a1a:	4b37      	ldr	r3, [pc, #220]	; (80b7af8 <xTaskIncrementTick+0x15c>)
 80b7a1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80b7a20:	601a      	str	r2, [r3, #0]
					break;
 80b7a22:	e03f      	b.n	80b7aa4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80b7a24:	4b31      	ldr	r3, [pc, #196]	; (80b7aec <xTaskIncrementTick+0x150>)
 80b7a26:	681b      	ldr	r3, [r3, #0]
 80b7a28:	68db      	ldr	r3, [r3, #12]
 80b7a2a:	68db      	ldr	r3, [r3, #12]
 80b7a2c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80b7a2e:	68bb      	ldr	r3, [r7, #8]
 80b7a30:	685b      	ldr	r3, [r3, #4]
 80b7a32:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80b7a34:	693a      	ldr	r2, [r7, #16]
 80b7a36:	687b      	ldr	r3, [r7, #4]
 80b7a38:	429a      	cmp	r2, r3
 80b7a3a:	d203      	bcs.n	80b7a44 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80b7a3c:	4a2e      	ldr	r2, [pc, #184]	; (80b7af8 <xTaskIncrementTick+0x15c>)
 80b7a3e:	687b      	ldr	r3, [r7, #4]
 80b7a40:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80b7a42:	e02f      	b.n	80b7aa4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80b7a44:	68bb      	ldr	r3, [r7, #8]
 80b7a46:	3304      	adds	r3, #4
 80b7a48:	4618      	mov	r0, r3
 80b7a4a:	f7fe fe57 	bl	80b66fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80b7a4e:	68bb      	ldr	r3, [r7, #8]
 80b7a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80b7a52:	2b00      	cmp	r3, #0
 80b7a54:	d004      	beq.n	80b7a60 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80b7a56:	68bb      	ldr	r3, [r7, #8]
 80b7a58:	3318      	adds	r3, #24
 80b7a5a:	4618      	mov	r0, r3
 80b7a5c:	f7fe fe4e 	bl	80b66fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80b7a60:	68bb      	ldr	r3, [r7, #8]
 80b7a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80b7a64:	4b25      	ldr	r3, [pc, #148]	; (80b7afc <xTaskIncrementTick+0x160>)
 80b7a66:	681b      	ldr	r3, [r3, #0]
 80b7a68:	429a      	cmp	r2, r3
 80b7a6a:	d903      	bls.n	80b7a74 <xTaskIncrementTick+0xd8>
 80b7a6c:	68bb      	ldr	r3, [r7, #8]
 80b7a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80b7a70:	4a22      	ldr	r2, [pc, #136]	; (80b7afc <xTaskIncrementTick+0x160>)
 80b7a72:	6013      	str	r3, [r2, #0]
 80b7a74:	68bb      	ldr	r3, [r7, #8]
 80b7a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80b7a78:	4613      	mov	r3, r2
 80b7a7a:	009b      	lsls	r3, r3, #2
 80b7a7c:	4413      	add	r3, r2
 80b7a7e:	009b      	lsls	r3, r3, #2
 80b7a80:	4a1f      	ldr	r2, [pc, #124]	; (80b7b00 <xTaskIncrementTick+0x164>)
 80b7a82:	441a      	add	r2, r3
 80b7a84:	68bb      	ldr	r3, [r7, #8]
 80b7a86:	3304      	adds	r3, #4
 80b7a88:	4619      	mov	r1, r3
 80b7a8a:	4610      	mov	r0, r2
 80b7a8c:	f7fe fdd9 	bl	80b6642 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80b7a90:	68bb      	ldr	r3, [r7, #8]
 80b7a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80b7a94:	4b1b      	ldr	r3, [pc, #108]	; (80b7b04 <xTaskIncrementTick+0x168>)
 80b7a96:	681b      	ldr	r3, [r3, #0]
 80b7a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80b7a9a:	429a      	cmp	r2, r3
 80b7a9c:	d3b8      	bcc.n	80b7a10 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80b7a9e:	2301      	movs	r3, #1
 80b7aa0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80b7aa2:	e7b5      	b.n	80b7a10 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80b7aa4:	4b17      	ldr	r3, [pc, #92]	; (80b7b04 <xTaskIncrementTick+0x168>)
 80b7aa6:	681b      	ldr	r3, [r3, #0]
 80b7aa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80b7aaa:	4915      	ldr	r1, [pc, #84]	; (80b7b00 <xTaskIncrementTick+0x164>)
 80b7aac:	4613      	mov	r3, r2
 80b7aae:	009b      	lsls	r3, r3, #2
 80b7ab0:	4413      	add	r3, r2
 80b7ab2:	009b      	lsls	r3, r3, #2
 80b7ab4:	440b      	add	r3, r1
 80b7ab6:	681b      	ldr	r3, [r3, #0]
 80b7ab8:	2b01      	cmp	r3, #1
 80b7aba:	d901      	bls.n	80b7ac0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80b7abc:	2301      	movs	r3, #1
 80b7abe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80b7ac0:	4b11      	ldr	r3, [pc, #68]	; (80b7b08 <xTaskIncrementTick+0x16c>)
 80b7ac2:	681b      	ldr	r3, [r3, #0]
 80b7ac4:	2b00      	cmp	r3, #0
 80b7ac6:	d007      	beq.n	80b7ad8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80b7ac8:	2301      	movs	r3, #1
 80b7aca:	617b      	str	r3, [r7, #20]
 80b7acc:	e004      	b.n	80b7ad8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80b7ace:	4b0f      	ldr	r3, [pc, #60]	; (80b7b0c <xTaskIncrementTick+0x170>)
 80b7ad0:	681b      	ldr	r3, [r3, #0]
 80b7ad2:	3301      	adds	r3, #1
 80b7ad4:	4a0d      	ldr	r2, [pc, #52]	; (80b7b0c <xTaskIncrementTick+0x170>)
 80b7ad6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80b7ad8:	697b      	ldr	r3, [r7, #20]
}
 80b7ada:	4618      	mov	r0, r3
 80b7adc:	3718      	adds	r7, #24
 80b7ade:	46bd      	mov	sp, r7
 80b7ae0:	bd80      	pop	{r7, pc}
 80b7ae2:	bf00      	nop
 80b7ae4:	20009c14 	.word	0x20009c14
 80b7ae8:	20009bf0 	.word	0x20009bf0
 80b7aec:	20009ba4 	.word	0x20009ba4
 80b7af0:	20009ba8 	.word	0x20009ba8
 80b7af4:	20009c04 	.word	0x20009c04
 80b7af8:	20009c0c 	.word	0x20009c0c
 80b7afc:	20009bf4 	.word	0x20009bf4
 80b7b00:	2000971c 	.word	0x2000971c
 80b7b04:	20009718 	.word	0x20009718
 80b7b08:	20009c00 	.word	0x20009c00
 80b7b0c:	20009bfc 	.word	0x20009bfc

080b7b10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80b7b10:	b480      	push	{r7}
 80b7b12:	b085      	sub	sp, #20
 80b7b14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80b7b16:	4b28      	ldr	r3, [pc, #160]	; (80b7bb8 <vTaskSwitchContext+0xa8>)
 80b7b18:	681b      	ldr	r3, [r3, #0]
 80b7b1a:	2b00      	cmp	r3, #0
 80b7b1c:	d003      	beq.n	80b7b26 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80b7b1e:	4b27      	ldr	r3, [pc, #156]	; (80b7bbc <vTaskSwitchContext+0xac>)
 80b7b20:	2201      	movs	r2, #1
 80b7b22:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80b7b24:	e041      	b.n	80b7baa <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80b7b26:	4b25      	ldr	r3, [pc, #148]	; (80b7bbc <vTaskSwitchContext+0xac>)
 80b7b28:	2200      	movs	r2, #0
 80b7b2a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80b7b2c:	4b24      	ldr	r3, [pc, #144]	; (80b7bc0 <vTaskSwitchContext+0xb0>)
 80b7b2e:	681b      	ldr	r3, [r3, #0]
 80b7b30:	60fb      	str	r3, [r7, #12]
 80b7b32:	e010      	b.n	80b7b56 <vTaskSwitchContext+0x46>
 80b7b34:	68fb      	ldr	r3, [r7, #12]
 80b7b36:	2b00      	cmp	r3, #0
 80b7b38:	d10a      	bne.n	80b7b50 <vTaskSwitchContext+0x40>
	__asm volatile
 80b7b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b7b3e:	f383 8811 	msr	BASEPRI, r3
 80b7b42:	f3bf 8f6f 	isb	sy
 80b7b46:	f3bf 8f4f 	dsb	sy
 80b7b4a:	607b      	str	r3, [r7, #4]
}
 80b7b4c:	bf00      	nop
 80b7b4e:	e7fe      	b.n	80b7b4e <vTaskSwitchContext+0x3e>
 80b7b50:	68fb      	ldr	r3, [r7, #12]
 80b7b52:	3b01      	subs	r3, #1
 80b7b54:	60fb      	str	r3, [r7, #12]
 80b7b56:	491b      	ldr	r1, [pc, #108]	; (80b7bc4 <vTaskSwitchContext+0xb4>)
 80b7b58:	68fa      	ldr	r2, [r7, #12]
 80b7b5a:	4613      	mov	r3, r2
 80b7b5c:	009b      	lsls	r3, r3, #2
 80b7b5e:	4413      	add	r3, r2
 80b7b60:	009b      	lsls	r3, r3, #2
 80b7b62:	440b      	add	r3, r1
 80b7b64:	681b      	ldr	r3, [r3, #0]
 80b7b66:	2b00      	cmp	r3, #0
 80b7b68:	d0e4      	beq.n	80b7b34 <vTaskSwitchContext+0x24>
 80b7b6a:	68fa      	ldr	r2, [r7, #12]
 80b7b6c:	4613      	mov	r3, r2
 80b7b6e:	009b      	lsls	r3, r3, #2
 80b7b70:	4413      	add	r3, r2
 80b7b72:	009b      	lsls	r3, r3, #2
 80b7b74:	4a13      	ldr	r2, [pc, #76]	; (80b7bc4 <vTaskSwitchContext+0xb4>)
 80b7b76:	4413      	add	r3, r2
 80b7b78:	60bb      	str	r3, [r7, #8]
 80b7b7a:	68bb      	ldr	r3, [r7, #8]
 80b7b7c:	685b      	ldr	r3, [r3, #4]
 80b7b7e:	685a      	ldr	r2, [r3, #4]
 80b7b80:	68bb      	ldr	r3, [r7, #8]
 80b7b82:	605a      	str	r2, [r3, #4]
 80b7b84:	68bb      	ldr	r3, [r7, #8]
 80b7b86:	685a      	ldr	r2, [r3, #4]
 80b7b88:	68bb      	ldr	r3, [r7, #8]
 80b7b8a:	3308      	adds	r3, #8
 80b7b8c:	429a      	cmp	r2, r3
 80b7b8e:	d104      	bne.n	80b7b9a <vTaskSwitchContext+0x8a>
 80b7b90:	68bb      	ldr	r3, [r7, #8]
 80b7b92:	685b      	ldr	r3, [r3, #4]
 80b7b94:	685a      	ldr	r2, [r3, #4]
 80b7b96:	68bb      	ldr	r3, [r7, #8]
 80b7b98:	605a      	str	r2, [r3, #4]
 80b7b9a:	68bb      	ldr	r3, [r7, #8]
 80b7b9c:	685b      	ldr	r3, [r3, #4]
 80b7b9e:	68db      	ldr	r3, [r3, #12]
 80b7ba0:	4a09      	ldr	r2, [pc, #36]	; (80b7bc8 <vTaskSwitchContext+0xb8>)
 80b7ba2:	6013      	str	r3, [r2, #0]
 80b7ba4:	4a06      	ldr	r2, [pc, #24]	; (80b7bc0 <vTaskSwitchContext+0xb0>)
 80b7ba6:	68fb      	ldr	r3, [r7, #12]
 80b7ba8:	6013      	str	r3, [r2, #0]
}
 80b7baa:	bf00      	nop
 80b7bac:	3714      	adds	r7, #20
 80b7bae:	46bd      	mov	sp, r7
 80b7bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b7bb4:	4770      	bx	lr
 80b7bb6:	bf00      	nop
 80b7bb8:	20009c14 	.word	0x20009c14
 80b7bbc:	20009c00 	.word	0x20009c00
 80b7bc0:	20009bf4 	.word	0x20009bf4
 80b7bc4:	2000971c 	.word	0x2000971c
 80b7bc8:	20009718 	.word	0x20009718

080b7bcc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80b7bcc:	b580      	push	{r7, lr}
 80b7bce:	b084      	sub	sp, #16
 80b7bd0:	af00      	add	r7, sp, #0
 80b7bd2:	6078      	str	r0, [r7, #4]
 80b7bd4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80b7bd6:	687b      	ldr	r3, [r7, #4]
 80b7bd8:	2b00      	cmp	r3, #0
 80b7bda:	d10a      	bne.n	80b7bf2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80b7bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b7be0:	f383 8811 	msr	BASEPRI, r3
 80b7be4:	f3bf 8f6f 	isb	sy
 80b7be8:	f3bf 8f4f 	dsb	sy
 80b7bec:	60fb      	str	r3, [r7, #12]
}
 80b7bee:	bf00      	nop
 80b7bf0:	e7fe      	b.n	80b7bf0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80b7bf2:	4b07      	ldr	r3, [pc, #28]	; (80b7c10 <vTaskPlaceOnEventList+0x44>)
 80b7bf4:	681b      	ldr	r3, [r3, #0]
 80b7bf6:	3318      	adds	r3, #24
 80b7bf8:	4619      	mov	r1, r3
 80b7bfa:	6878      	ldr	r0, [r7, #4]
 80b7bfc:	f7fe fd45 	bl	80b668a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80b7c00:	2101      	movs	r1, #1
 80b7c02:	6838      	ldr	r0, [r7, #0]
 80b7c04:	f000 fa7c 	bl	80b8100 <prvAddCurrentTaskToDelayedList>
}
 80b7c08:	bf00      	nop
 80b7c0a:	3710      	adds	r7, #16
 80b7c0c:	46bd      	mov	sp, r7
 80b7c0e:	bd80      	pop	{r7, pc}
 80b7c10:	20009718 	.word	0x20009718

080b7c14 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80b7c14:	b580      	push	{r7, lr}
 80b7c16:	b086      	sub	sp, #24
 80b7c18:	af00      	add	r7, sp, #0
 80b7c1a:	60f8      	str	r0, [r7, #12]
 80b7c1c:	60b9      	str	r1, [r7, #8]
 80b7c1e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80b7c20:	68fb      	ldr	r3, [r7, #12]
 80b7c22:	2b00      	cmp	r3, #0
 80b7c24:	d10a      	bne.n	80b7c3c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80b7c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b7c2a:	f383 8811 	msr	BASEPRI, r3
 80b7c2e:	f3bf 8f6f 	isb	sy
 80b7c32:	f3bf 8f4f 	dsb	sy
 80b7c36:	617b      	str	r3, [r7, #20]
}
 80b7c38:	bf00      	nop
 80b7c3a:	e7fe      	b.n	80b7c3a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80b7c3c:	4b0a      	ldr	r3, [pc, #40]	; (80b7c68 <vTaskPlaceOnEventListRestricted+0x54>)
 80b7c3e:	681b      	ldr	r3, [r3, #0]
 80b7c40:	3318      	adds	r3, #24
 80b7c42:	4619      	mov	r1, r3
 80b7c44:	68f8      	ldr	r0, [r7, #12]
 80b7c46:	f7fe fcfc 	bl	80b6642 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80b7c4a:	687b      	ldr	r3, [r7, #4]
 80b7c4c:	2b00      	cmp	r3, #0
 80b7c4e:	d002      	beq.n	80b7c56 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80b7c50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80b7c54:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80b7c56:	6879      	ldr	r1, [r7, #4]
 80b7c58:	68b8      	ldr	r0, [r7, #8]
 80b7c5a:	f000 fa51 	bl	80b8100 <prvAddCurrentTaskToDelayedList>
	}
 80b7c5e:	bf00      	nop
 80b7c60:	3718      	adds	r7, #24
 80b7c62:	46bd      	mov	sp, r7
 80b7c64:	bd80      	pop	{r7, pc}
 80b7c66:	bf00      	nop
 80b7c68:	20009718 	.word	0x20009718

080b7c6c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80b7c6c:	b580      	push	{r7, lr}
 80b7c6e:	b086      	sub	sp, #24
 80b7c70:	af00      	add	r7, sp, #0
 80b7c72:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80b7c74:	687b      	ldr	r3, [r7, #4]
 80b7c76:	68db      	ldr	r3, [r3, #12]
 80b7c78:	68db      	ldr	r3, [r3, #12]
 80b7c7a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80b7c7c:	693b      	ldr	r3, [r7, #16]
 80b7c7e:	2b00      	cmp	r3, #0
 80b7c80:	d10a      	bne.n	80b7c98 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80b7c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b7c86:	f383 8811 	msr	BASEPRI, r3
 80b7c8a:	f3bf 8f6f 	isb	sy
 80b7c8e:	f3bf 8f4f 	dsb	sy
 80b7c92:	60fb      	str	r3, [r7, #12]
}
 80b7c94:	bf00      	nop
 80b7c96:	e7fe      	b.n	80b7c96 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80b7c98:	693b      	ldr	r3, [r7, #16]
 80b7c9a:	3318      	adds	r3, #24
 80b7c9c:	4618      	mov	r0, r3
 80b7c9e:	f7fe fd2d 	bl	80b66fc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80b7ca2:	4b1e      	ldr	r3, [pc, #120]	; (80b7d1c <xTaskRemoveFromEventList+0xb0>)
 80b7ca4:	681b      	ldr	r3, [r3, #0]
 80b7ca6:	2b00      	cmp	r3, #0
 80b7ca8:	d11d      	bne.n	80b7ce6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80b7caa:	693b      	ldr	r3, [r7, #16]
 80b7cac:	3304      	adds	r3, #4
 80b7cae:	4618      	mov	r0, r3
 80b7cb0:	f7fe fd24 	bl	80b66fc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80b7cb4:	693b      	ldr	r3, [r7, #16]
 80b7cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80b7cb8:	4b19      	ldr	r3, [pc, #100]	; (80b7d20 <xTaskRemoveFromEventList+0xb4>)
 80b7cba:	681b      	ldr	r3, [r3, #0]
 80b7cbc:	429a      	cmp	r2, r3
 80b7cbe:	d903      	bls.n	80b7cc8 <xTaskRemoveFromEventList+0x5c>
 80b7cc0:	693b      	ldr	r3, [r7, #16]
 80b7cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80b7cc4:	4a16      	ldr	r2, [pc, #88]	; (80b7d20 <xTaskRemoveFromEventList+0xb4>)
 80b7cc6:	6013      	str	r3, [r2, #0]
 80b7cc8:	693b      	ldr	r3, [r7, #16]
 80b7cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80b7ccc:	4613      	mov	r3, r2
 80b7cce:	009b      	lsls	r3, r3, #2
 80b7cd0:	4413      	add	r3, r2
 80b7cd2:	009b      	lsls	r3, r3, #2
 80b7cd4:	4a13      	ldr	r2, [pc, #76]	; (80b7d24 <xTaskRemoveFromEventList+0xb8>)
 80b7cd6:	441a      	add	r2, r3
 80b7cd8:	693b      	ldr	r3, [r7, #16]
 80b7cda:	3304      	adds	r3, #4
 80b7cdc:	4619      	mov	r1, r3
 80b7cde:	4610      	mov	r0, r2
 80b7ce0:	f7fe fcaf 	bl	80b6642 <vListInsertEnd>
 80b7ce4:	e005      	b.n	80b7cf2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80b7ce6:	693b      	ldr	r3, [r7, #16]
 80b7ce8:	3318      	adds	r3, #24
 80b7cea:	4619      	mov	r1, r3
 80b7cec:	480e      	ldr	r0, [pc, #56]	; (80b7d28 <xTaskRemoveFromEventList+0xbc>)
 80b7cee:	f7fe fca8 	bl	80b6642 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80b7cf2:	693b      	ldr	r3, [r7, #16]
 80b7cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80b7cf6:	4b0d      	ldr	r3, [pc, #52]	; (80b7d2c <xTaskRemoveFromEventList+0xc0>)
 80b7cf8:	681b      	ldr	r3, [r3, #0]
 80b7cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80b7cfc:	429a      	cmp	r2, r3
 80b7cfe:	d905      	bls.n	80b7d0c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80b7d00:	2301      	movs	r3, #1
 80b7d02:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80b7d04:	4b0a      	ldr	r3, [pc, #40]	; (80b7d30 <xTaskRemoveFromEventList+0xc4>)
 80b7d06:	2201      	movs	r2, #1
 80b7d08:	601a      	str	r2, [r3, #0]
 80b7d0a:	e001      	b.n	80b7d10 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80b7d0c:	2300      	movs	r3, #0
 80b7d0e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80b7d10:	697b      	ldr	r3, [r7, #20]
}
 80b7d12:	4618      	mov	r0, r3
 80b7d14:	3718      	adds	r7, #24
 80b7d16:	46bd      	mov	sp, r7
 80b7d18:	bd80      	pop	{r7, pc}
 80b7d1a:	bf00      	nop
 80b7d1c:	20009c14 	.word	0x20009c14
 80b7d20:	20009bf4 	.word	0x20009bf4
 80b7d24:	2000971c 	.word	0x2000971c
 80b7d28:	20009bac 	.word	0x20009bac
 80b7d2c:	20009718 	.word	0x20009718
 80b7d30:	20009c00 	.word	0x20009c00

080b7d34 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80b7d34:	b480      	push	{r7}
 80b7d36:	b083      	sub	sp, #12
 80b7d38:	af00      	add	r7, sp, #0
 80b7d3a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80b7d3c:	4b06      	ldr	r3, [pc, #24]	; (80b7d58 <vTaskInternalSetTimeOutState+0x24>)
 80b7d3e:	681a      	ldr	r2, [r3, #0]
 80b7d40:	687b      	ldr	r3, [r7, #4]
 80b7d42:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80b7d44:	4b05      	ldr	r3, [pc, #20]	; (80b7d5c <vTaskInternalSetTimeOutState+0x28>)
 80b7d46:	681a      	ldr	r2, [r3, #0]
 80b7d48:	687b      	ldr	r3, [r7, #4]
 80b7d4a:	605a      	str	r2, [r3, #4]
}
 80b7d4c:	bf00      	nop
 80b7d4e:	370c      	adds	r7, #12
 80b7d50:	46bd      	mov	sp, r7
 80b7d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b7d56:	4770      	bx	lr
 80b7d58:	20009c04 	.word	0x20009c04
 80b7d5c:	20009bf0 	.word	0x20009bf0

080b7d60 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80b7d60:	b580      	push	{r7, lr}
 80b7d62:	b088      	sub	sp, #32
 80b7d64:	af00      	add	r7, sp, #0
 80b7d66:	6078      	str	r0, [r7, #4]
 80b7d68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80b7d6a:	687b      	ldr	r3, [r7, #4]
 80b7d6c:	2b00      	cmp	r3, #0
 80b7d6e:	d10a      	bne.n	80b7d86 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80b7d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b7d74:	f383 8811 	msr	BASEPRI, r3
 80b7d78:	f3bf 8f6f 	isb	sy
 80b7d7c:	f3bf 8f4f 	dsb	sy
 80b7d80:	613b      	str	r3, [r7, #16]
}
 80b7d82:	bf00      	nop
 80b7d84:	e7fe      	b.n	80b7d84 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80b7d86:	683b      	ldr	r3, [r7, #0]
 80b7d88:	2b00      	cmp	r3, #0
 80b7d8a:	d10a      	bne.n	80b7da2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80b7d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b7d90:	f383 8811 	msr	BASEPRI, r3
 80b7d94:	f3bf 8f6f 	isb	sy
 80b7d98:	f3bf 8f4f 	dsb	sy
 80b7d9c:	60fb      	str	r3, [r7, #12]
}
 80b7d9e:	bf00      	nop
 80b7da0:	e7fe      	b.n	80b7da0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80b7da2:	f000 ff5f 	bl	80b8c64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80b7da6:	4b1d      	ldr	r3, [pc, #116]	; (80b7e1c <xTaskCheckForTimeOut+0xbc>)
 80b7da8:	681b      	ldr	r3, [r3, #0]
 80b7daa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80b7dac:	687b      	ldr	r3, [r7, #4]
 80b7dae:	685b      	ldr	r3, [r3, #4]
 80b7db0:	69ba      	ldr	r2, [r7, #24]
 80b7db2:	1ad3      	subs	r3, r2, r3
 80b7db4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80b7db6:	683b      	ldr	r3, [r7, #0]
 80b7db8:	681b      	ldr	r3, [r3, #0]
 80b7dba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80b7dbe:	d102      	bne.n	80b7dc6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80b7dc0:	2300      	movs	r3, #0
 80b7dc2:	61fb      	str	r3, [r7, #28]
 80b7dc4:	e023      	b.n	80b7e0e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80b7dc6:	687b      	ldr	r3, [r7, #4]
 80b7dc8:	681a      	ldr	r2, [r3, #0]
 80b7dca:	4b15      	ldr	r3, [pc, #84]	; (80b7e20 <xTaskCheckForTimeOut+0xc0>)
 80b7dcc:	681b      	ldr	r3, [r3, #0]
 80b7dce:	429a      	cmp	r2, r3
 80b7dd0:	d007      	beq.n	80b7de2 <xTaskCheckForTimeOut+0x82>
 80b7dd2:	687b      	ldr	r3, [r7, #4]
 80b7dd4:	685b      	ldr	r3, [r3, #4]
 80b7dd6:	69ba      	ldr	r2, [r7, #24]
 80b7dd8:	429a      	cmp	r2, r3
 80b7dda:	d302      	bcc.n	80b7de2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80b7ddc:	2301      	movs	r3, #1
 80b7dde:	61fb      	str	r3, [r7, #28]
 80b7de0:	e015      	b.n	80b7e0e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80b7de2:	683b      	ldr	r3, [r7, #0]
 80b7de4:	681b      	ldr	r3, [r3, #0]
 80b7de6:	697a      	ldr	r2, [r7, #20]
 80b7de8:	429a      	cmp	r2, r3
 80b7dea:	d20b      	bcs.n	80b7e04 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80b7dec:	683b      	ldr	r3, [r7, #0]
 80b7dee:	681a      	ldr	r2, [r3, #0]
 80b7df0:	697b      	ldr	r3, [r7, #20]
 80b7df2:	1ad2      	subs	r2, r2, r3
 80b7df4:	683b      	ldr	r3, [r7, #0]
 80b7df6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80b7df8:	6878      	ldr	r0, [r7, #4]
 80b7dfa:	f7ff ff9b 	bl	80b7d34 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80b7dfe:	2300      	movs	r3, #0
 80b7e00:	61fb      	str	r3, [r7, #28]
 80b7e02:	e004      	b.n	80b7e0e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80b7e04:	683b      	ldr	r3, [r7, #0]
 80b7e06:	2200      	movs	r2, #0
 80b7e08:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80b7e0a:	2301      	movs	r3, #1
 80b7e0c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80b7e0e:	f000 ff59 	bl	80b8cc4 <vPortExitCritical>

	return xReturn;
 80b7e12:	69fb      	ldr	r3, [r7, #28]
}
 80b7e14:	4618      	mov	r0, r3
 80b7e16:	3720      	adds	r7, #32
 80b7e18:	46bd      	mov	sp, r7
 80b7e1a:	bd80      	pop	{r7, pc}
 80b7e1c:	20009bf0 	.word	0x20009bf0
 80b7e20:	20009c04 	.word	0x20009c04

080b7e24 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80b7e24:	b480      	push	{r7}
 80b7e26:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80b7e28:	4b03      	ldr	r3, [pc, #12]	; (80b7e38 <vTaskMissedYield+0x14>)
 80b7e2a:	2201      	movs	r2, #1
 80b7e2c:	601a      	str	r2, [r3, #0]
}
 80b7e2e:	bf00      	nop
 80b7e30:	46bd      	mov	sp, r7
 80b7e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b7e36:	4770      	bx	lr
 80b7e38:	20009c00 	.word	0x20009c00

080b7e3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80b7e3c:	b580      	push	{r7, lr}
 80b7e3e:	b082      	sub	sp, #8
 80b7e40:	af00      	add	r7, sp, #0
 80b7e42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80b7e44:	f000 f852 	bl	80b7eec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80b7e48:	4b06      	ldr	r3, [pc, #24]	; (80b7e64 <prvIdleTask+0x28>)
 80b7e4a:	681b      	ldr	r3, [r3, #0]
 80b7e4c:	2b01      	cmp	r3, #1
 80b7e4e:	d9f9      	bls.n	80b7e44 <prvIdleTask+0x8>
			{
				taskYIELD();
 80b7e50:	4b05      	ldr	r3, [pc, #20]	; (80b7e68 <prvIdleTask+0x2c>)
 80b7e52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80b7e56:	601a      	str	r2, [r3, #0]
 80b7e58:	f3bf 8f4f 	dsb	sy
 80b7e5c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80b7e60:	e7f0      	b.n	80b7e44 <prvIdleTask+0x8>
 80b7e62:	bf00      	nop
 80b7e64:	2000971c 	.word	0x2000971c
 80b7e68:	e000ed04 	.word	0xe000ed04

080b7e6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80b7e6c:	b580      	push	{r7, lr}
 80b7e6e:	b082      	sub	sp, #8
 80b7e70:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80b7e72:	2300      	movs	r3, #0
 80b7e74:	607b      	str	r3, [r7, #4]
 80b7e76:	e00c      	b.n	80b7e92 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80b7e78:	687a      	ldr	r2, [r7, #4]
 80b7e7a:	4613      	mov	r3, r2
 80b7e7c:	009b      	lsls	r3, r3, #2
 80b7e7e:	4413      	add	r3, r2
 80b7e80:	009b      	lsls	r3, r3, #2
 80b7e82:	4a12      	ldr	r2, [pc, #72]	; (80b7ecc <prvInitialiseTaskLists+0x60>)
 80b7e84:	4413      	add	r3, r2
 80b7e86:	4618      	mov	r0, r3
 80b7e88:	f7fe fbae 	bl	80b65e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80b7e8c:	687b      	ldr	r3, [r7, #4]
 80b7e8e:	3301      	adds	r3, #1
 80b7e90:	607b      	str	r3, [r7, #4]
 80b7e92:	687b      	ldr	r3, [r7, #4]
 80b7e94:	2b37      	cmp	r3, #55	; 0x37
 80b7e96:	d9ef      	bls.n	80b7e78 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80b7e98:	480d      	ldr	r0, [pc, #52]	; (80b7ed0 <prvInitialiseTaskLists+0x64>)
 80b7e9a:	f7fe fba5 	bl	80b65e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80b7e9e:	480d      	ldr	r0, [pc, #52]	; (80b7ed4 <prvInitialiseTaskLists+0x68>)
 80b7ea0:	f7fe fba2 	bl	80b65e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80b7ea4:	480c      	ldr	r0, [pc, #48]	; (80b7ed8 <prvInitialiseTaskLists+0x6c>)
 80b7ea6:	f7fe fb9f 	bl	80b65e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80b7eaa:	480c      	ldr	r0, [pc, #48]	; (80b7edc <prvInitialiseTaskLists+0x70>)
 80b7eac:	f7fe fb9c 	bl	80b65e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80b7eb0:	480b      	ldr	r0, [pc, #44]	; (80b7ee0 <prvInitialiseTaskLists+0x74>)
 80b7eb2:	f7fe fb99 	bl	80b65e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80b7eb6:	4b0b      	ldr	r3, [pc, #44]	; (80b7ee4 <prvInitialiseTaskLists+0x78>)
 80b7eb8:	4a05      	ldr	r2, [pc, #20]	; (80b7ed0 <prvInitialiseTaskLists+0x64>)
 80b7eba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80b7ebc:	4b0a      	ldr	r3, [pc, #40]	; (80b7ee8 <prvInitialiseTaskLists+0x7c>)
 80b7ebe:	4a05      	ldr	r2, [pc, #20]	; (80b7ed4 <prvInitialiseTaskLists+0x68>)
 80b7ec0:	601a      	str	r2, [r3, #0]
}
 80b7ec2:	bf00      	nop
 80b7ec4:	3708      	adds	r7, #8
 80b7ec6:	46bd      	mov	sp, r7
 80b7ec8:	bd80      	pop	{r7, pc}
 80b7eca:	bf00      	nop
 80b7ecc:	2000971c 	.word	0x2000971c
 80b7ed0:	20009b7c 	.word	0x20009b7c
 80b7ed4:	20009b90 	.word	0x20009b90
 80b7ed8:	20009bac 	.word	0x20009bac
 80b7edc:	20009bc0 	.word	0x20009bc0
 80b7ee0:	20009bd8 	.word	0x20009bd8
 80b7ee4:	20009ba4 	.word	0x20009ba4
 80b7ee8:	20009ba8 	.word	0x20009ba8

080b7eec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80b7eec:	b580      	push	{r7, lr}
 80b7eee:	b082      	sub	sp, #8
 80b7ef0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80b7ef2:	e019      	b.n	80b7f28 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80b7ef4:	f000 feb6 	bl	80b8c64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80b7ef8:	4b10      	ldr	r3, [pc, #64]	; (80b7f3c <prvCheckTasksWaitingTermination+0x50>)
 80b7efa:	68db      	ldr	r3, [r3, #12]
 80b7efc:	68db      	ldr	r3, [r3, #12]
 80b7efe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80b7f00:	687b      	ldr	r3, [r7, #4]
 80b7f02:	3304      	adds	r3, #4
 80b7f04:	4618      	mov	r0, r3
 80b7f06:	f7fe fbf9 	bl	80b66fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80b7f0a:	4b0d      	ldr	r3, [pc, #52]	; (80b7f40 <prvCheckTasksWaitingTermination+0x54>)
 80b7f0c:	681b      	ldr	r3, [r3, #0]
 80b7f0e:	3b01      	subs	r3, #1
 80b7f10:	4a0b      	ldr	r2, [pc, #44]	; (80b7f40 <prvCheckTasksWaitingTermination+0x54>)
 80b7f12:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80b7f14:	4b0b      	ldr	r3, [pc, #44]	; (80b7f44 <prvCheckTasksWaitingTermination+0x58>)
 80b7f16:	681b      	ldr	r3, [r3, #0]
 80b7f18:	3b01      	subs	r3, #1
 80b7f1a:	4a0a      	ldr	r2, [pc, #40]	; (80b7f44 <prvCheckTasksWaitingTermination+0x58>)
 80b7f1c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80b7f1e:	f000 fed1 	bl	80b8cc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80b7f22:	6878      	ldr	r0, [r7, #4]
 80b7f24:	f000 f810 	bl	80b7f48 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80b7f28:	4b06      	ldr	r3, [pc, #24]	; (80b7f44 <prvCheckTasksWaitingTermination+0x58>)
 80b7f2a:	681b      	ldr	r3, [r3, #0]
 80b7f2c:	2b00      	cmp	r3, #0
 80b7f2e:	d1e1      	bne.n	80b7ef4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80b7f30:	bf00      	nop
 80b7f32:	bf00      	nop
 80b7f34:	3708      	adds	r7, #8
 80b7f36:	46bd      	mov	sp, r7
 80b7f38:	bd80      	pop	{r7, pc}
 80b7f3a:	bf00      	nop
 80b7f3c:	20009bc0 	.word	0x20009bc0
 80b7f40:	20009bec 	.word	0x20009bec
 80b7f44:	20009bd4 	.word	0x20009bd4

080b7f48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80b7f48:	b580      	push	{r7, lr}
 80b7f4a:	b084      	sub	sp, #16
 80b7f4c:	af00      	add	r7, sp, #0
 80b7f4e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80b7f50:	687b      	ldr	r3, [r7, #4]
 80b7f52:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80b7f56:	2b00      	cmp	r3, #0
 80b7f58:	d108      	bne.n	80b7f6c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80b7f5a:	687b      	ldr	r3, [r7, #4]
 80b7f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80b7f5e:	4618      	mov	r0, r3
 80b7f60:	f001 f86e 	bl	80b9040 <vPortFree>
				vPortFree( pxTCB );
 80b7f64:	6878      	ldr	r0, [r7, #4]
 80b7f66:	f001 f86b 	bl	80b9040 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80b7f6a:	e018      	b.n	80b7f9e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80b7f6c:	687b      	ldr	r3, [r7, #4]
 80b7f6e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80b7f72:	2b01      	cmp	r3, #1
 80b7f74:	d103      	bne.n	80b7f7e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80b7f76:	6878      	ldr	r0, [r7, #4]
 80b7f78:	f001 f862 	bl	80b9040 <vPortFree>
	}
 80b7f7c:	e00f      	b.n	80b7f9e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80b7f7e:	687b      	ldr	r3, [r7, #4]
 80b7f80:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80b7f84:	2b02      	cmp	r3, #2
 80b7f86:	d00a      	beq.n	80b7f9e <prvDeleteTCB+0x56>
	__asm volatile
 80b7f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b7f8c:	f383 8811 	msr	BASEPRI, r3
 80b7f90:	f3bf 8f6f 	isb	sy
 80b7f94:	f3bf 8f4f 	dsb	sy
 80b7f98:	60fb      	str	r3, [r7, #12]
}
 80b7f9a:	bf00      	nop
 80b7f9c:	e7fe      	b.n	80b7f9c <prvDeleteTCB+0x54>
	}
 80b7f9e:	bf00      	nop
 80b7fa0:	3710      	adds	r7, #16
 80b7fa2:	46bd      	mov	sp, r7
 80b7fa4:	bd80      	pop	{r7, pc}
	...

080b7fa8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80b7fa8:	b480      	push	{r7}
 80b7faa:	b083      	sub	sp, #12
 80b7fac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80b7fae:	4b0c      	ldr	r3, [pc, #48]	; (80b7fe0 <prvResetNextTaskUnblockTime+0x38>)
 80b7fb0:	681b      	ldr	r3, [r3, #0]
 80b7fb2:	681b      	ldr	r3, [r3, #0]
 80b7fb4:	2b00      	cmp	r3, #0
 80b7fb6:	d104      	bne.n	80b7fc2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80b7fb8:	4b0a      	ldr	r3, [pc, #40]	; (80b7fe4 <prvResetNextTaskUnblockTime+0x3c>)
 80b7fba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80b7fbe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80b7fc0:	e008      	b.n	80b7fd4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80b7fc2:	4b07      	ldr	r3, [pc, #28]	; (80b7fe0 <prvResetNextTaskUnblockTime+0x38>)
 80b7fc4:	681b      	ldr	r3, [r3, #0]
 80b7fc6:	68db      	ldr	r3, [r3, #12]
 80b7fc8:	68db      	ldr	r3, [r3, #12]
 80b7fca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80b7fcc:	687b      	ldr	r3, [r7, #4]
 80b7fce:	685b      	ldr	r3, [r3, #4]
 80b7fd0:	4a04      	ldr	r2, [pc, #16]	; (80b7fe4 <prvResetNextTaskUnblockTime+0x3c>)
 80b7fd2:	6013      	str	r3, [r2, #0]
}
 80b7fd4:	bf00      	nop
 80b7fd6:	370c      	adds	r7, #12
 80b7fd8:	46bd      	mov	sp, r7
 80b7fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b7fde:	4770      	bx	lr
 80b7fe0:	20009ba4 	.word	0x20009ba4
 80b7fe4:	20009c0c 	.word	0x20009c0c

080b7fe8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80b7fe8:	b480      	push	{r7}
 80b7fea:	b083      	sub	sp, #12
 80b7fec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80b7fee:	4b0b      	ldr	r3, [pc, #44]	; (80b801c <xTaskGetSchedulerState+0x34>)
 80b7ff0:	681b      	ldr	r3, [r3, #0]
 80b7ff2:	2b00      	cmp	r3, #0
 80b7ff4:	d102      	bne.n	80b7ffc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80b7ff6:	2301      	movs	r3, #1
 80b7ff8:	607b      	str	r3, [r7, #4]
 80b7ffa:	e008      	b.n	80b800e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80b7ffc:	4b08      	ldr	r3, [pc, #32]	; (80b8020 <xTaskGetSchedulerState+0x38>)
 80b7ffe:	681b      	ldr	r3, [r3, #0]
 80b8000:	2b00      	cmp	r3, #0
 80b8002:	d102      	bne.n	80b800a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80b8004:	2302      	movs	r3, #2
 80b8006:	607b      	str	r3, [r7, #4]
 80b8008:	e001      	b.n	80b800e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80b800a:	2300      	movs	r3, #0
 80b800c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80b800e:	687b      	ldr	r3, [r7, #4]
	}
 80b8010:	4618      	mov	r0, r3
 80b8012:	370c      	adds	r7, #12
 80b8014:	46bd      	mov	sp, r7
 80b8016:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b801a:	4770      	bx	lr
 80b801c:	20009bf8 	.word	0x20009bf8
 80b8020:	20009c14 	.word	0x20009c14

080b8024 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80b8024:	b580      	push	{r7, lr}
 80b8026:	b086      	sub	sp, #24
 80b8028:	af00      	add	r7, sp, #0
 80b802a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80b802c:	687b      	ldr	r3, [r7, #4]
 80b802e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80b8030:	2300      	movs	r3, #0
 80b8032:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80b8034:	687b      	ldr	r3, [r7, #4]
 80b8036:	2b00      	cmp	r3, #0
 80b8038:	d056      	beq.n	80b80e8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80b803a:	4b2e      	ldr	r3, [pc, #184]	; (80b80f4 <xTaskPriorityDisinherit+0xd0>)
 80b803c:	681b      	ldr	r3, [r3, #0]
 80b803e:	693a      	ldr	r2, [r7, #16]
 80b8040:	429a      	cmp	r2, r3
 80b8042:	d00a      	beq.n	80b805a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80b8044:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b8048:	f383 8811 	msr	BASEPRI, r3
 80b804c:	f3bf 8f6f 	isb	sy
 80b8050:	f3bf 8f4f 	dsb	sy
 80b8054:	60fb      	str	r3, [r7, #12]
}
 80b8056:	bf00      	nop
 80b8058:	e7fe      	b.n	80b8058 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80b805a:	693b      	ldr	r3, [r7, #16]
 80b805c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80b805e:	2b00      	cmp	r3, #0
 80b8060:	d10a      	bne.n	80b8078 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80b8062:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b8066:	f383 8811 	msr	BASEPRI, r3
 80b806a:	f3bf 8f6f 	isb	sy
 80b806e:	f3bf 8f4f 	dsb	sy
 80b8072:	60bb      	str	r3, [r7, #8]
}
 80b8074:	bf00      	nop
 80b8076:	e7fe      	b.n	80b8076 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80b8078:	693b      	ldr	r3, [r7, #16]
 80b807a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80b807c:	1e5a      	subs	r2, r3, #1
 80b807e:	693b      	ldr	r3, [r7, #16]
 80b8080:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80b8082:	693b      	ldr	r3, [r7, #16]
 80b8084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80b8086:	693b      	ldr	r3, [r7, #16]
 80b8088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80b808a:	429a      	cmp	r2, r3
 80b808c:	d02c      	beq.n	80b80e8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80b808e:	693b      	ldr	r3, [r7, #16]
 80b8090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80b8092:	2b00      	cmp	r3, #0
 80b8094:	d128      	bne.n	80b80e8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80b8096:	693b      	ldr	r3, [r7, #16]
 80b8098:	3304      	adds	r3, #4
 80b809a:	4618      	mov	r0, r3
 80b809c:	f7fe fb2e 	bl	80b66fc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80b80a0:	693b      	ldr	r3, [r7, #16]
 80b80a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80b80a4:	693b      	ldr	r3, [r7, #16]
 80b80a6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80b80a8:	693b      	ldr	r3, [r7, #16]
 80b80aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80b80ac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80b80b0:	693b      	ldr	r3, [r7, #16]
 80b80b2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80b80b4:	693b      	ldr	r3, [r7, #16]
 80b80b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80b80b8:	4b0f      	ldr	r3, [pc, #60]	; (80b80f8 <xTaskPriorityDisinherit+0xd4>)
 80b80ba:	681b      	ldr	r3, [r3, #0]
 80b80bc:	429a      	cmp	r2, r3
 80b80be:	d903      	bls.n	80b80c8 <xTaskPriorityDisinherit+0xa4>
 80b80c0:	693b      	ldr	r3, [r7, #16]
 80b80c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80b80c4:	4a0c      	ldr	r2, [pc, #48]	; (80b80f8 <xTaskPriorityDisinherit+0xd4>)
 80b80c6:	6013      	str	r3, [r2, #0]
 80b80c8:	693b      	ldr	r3, [r7, #16]
 80b80ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80b80cc:	4613      	mov	r3, r2
 80b80ce:	009b      	lsls	r3, r3, #2
 80b80d0:	4413      	add	r3, r2
 80b80d2:	009b      	lsls	r3, r3, #2
 80b80d4:	4a09      	ldr	r2, [pc, #36]	; (80b80fc <xTaskPriorityDisinherit+0xd8>)
 80b80d6:	441a      	add	r2, r3
 80b80d8:	693b      	ldr	r3, [r7, #16]
 80b80da:	3304      	adds	r3, #4
 80b80dc:	4619      	mov	r1, r3
 80b80de:	4610      	mov	r0, r2
 80b80e0:	f7fe faaf 	bl	80b6642 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80b80e4:	2301      	movs	r3, #1
 80b80e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80b80e8:	697b      	ldr	r3, [r7, #20]
	}
 80b80ea:	4618      	mov	r0, r3
 80b80ec:	3718      	adds	r7, #24
 80b80ee:	46bd      	mov	sp, r7
 80b80f0:	bd80      	pop	{r7, pc}
 80b80f2:	bf00      	nop
 80b80f4:	20009718 	.word	0x20009718
 80b80f8:	20009bf4 	.word	0x20009bf4
 80b80fc:	2000971c 	.word	0x2000971c

080b8100 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80b8100:	b580      	push	{r7, lr}
 80b8102:	b084      	sub	sp, #16
 80b8104:	af00      	add	r7, sp, #0
 80b8106:	6078      	str	r0, [r7, #4]
 80b8108:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80b810a:	4b21      	ldr	r3, [pc, #132]	; (80b8190 <prvAddCurrentTaskToDelayedList+0x90>)
 80b810c:	681b      	ldr	r3, [r3, #0]
 80b810e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80b8110:	4b20      	ldr	r3, [pc, #128]	; (80b8194 <prvAddCurrentTaskToDelayedList+0x94>)
 80b8112:	681b      	ldr	r3, [r3, #0]
 80b8114:	3304      	adds	r3, #4
 80b8116:	4618      	mov	r0, r3
 80b8118:	f7fe faf0 	bl	80b66fc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80b811c:	687b      	ldr	r3, [r7, #4]
 80b811e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80b8122:	d10a      	bne.n	80b813a <prvAddCurrentTaskToDelayedList+0x3a>
 80b8124:	683b      	ldr	r3, [r7, #0]
 80b8126:	2b00      	cmp	r3, #0
 80b8128:	d007      	beq.n	80b813a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80b812a:	4b1a      	ldr	r3, [pc, #104]	; (80b8194 <prvAddCurrentTaskToDelayedList+0x94>)
 80b812c:	681b      	ldr	r3, [r3, #0]
 80b812e:	3304      	adds	r3, #4
 80b8130:	4619      	mov	r1, r3
 80b8132:	4819      	ldr	r0, [pc, #100]	; (80b8198 <prvAddCurrentTaskToDelayedList+0x98>)
 80b8134:	f7fe fa85 	bl	80b6642 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80b8138:	e026      	b.n	80b8188 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80b813a:	68fa      	ldr	r2, [r7, #12]
 80b813c:	687b      	ldr	r3, [r7, #4]
 80b813e:	4413      	add	r3, r2
 80b8140:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80b8142:	4b14      	ldr	r3, [pc, #80]	; (80b8194 <prvAddCurrentTaskToDelayedList+0x94>)
 80b8144:	681b      	ldr	r3, [r3, #0]
 80b8146:	68ba      	ldr	r2, [r7, #8]
 80b8148:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80b814a:	68ba      	ldr	r2, [r7, #8]
 80b814c:	68fb      	ldr	r3, [r7, #12]
 80b814e:	429a      	cmp	r2, r3
 80b8150:	d209      	bcs.n	80b8166 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80b8152:	4b12      	ldr	r3, [pc, #72]	; (80b819c <prvAddCurrentTaskToDelayedList+0x9c>)
 80b8154:	681a      	ldr	r2, [r3, #0]
 80b8156:	4b0f      	ldr	r3, [pc, #60]	; (80b8194 <prvAddCurrentTaskToDelayedList+0x94>)
 80b8158:	681b      	ldr	r3, [r3, #0]
 80b815a:	3304      	adds	r3, #4
 80b815c:	4619      	mov	r1, r3
 80b815e:	4610      	mov	r0, r2
 80b8160:	f7fe fa93 	bl	80b668a <vListInsert>
}
 80b8164:	e010      	b.n	80b8188 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80b8166:	4b0e      	ldr	r3, [pc, #56]	; (80b81a0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80b8168:	681a      	ldr	r2, [r3, #0]
 80b816a:	4b0a      	ldr	r3, [pc, #40]	; (80b8194 <prvAddCurrentTaskToDelayedList+0x94>)
 80b816c:	681b      	ldr	r3, [r3, #0]
 80b816e:	3304      	adds	r3, #4
 80b8170:	4619      	mov	r1, r3
 80b8172:	4610      	mov	r0, r2
 80b8174:	f7fe fa89 	bl	80b668a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80b8178:	4b0a      	ldr	r3, [pc, #40]	; (80b81a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80b817a:	681b      	ldr	r3, [r3, #0]
 80b817c:	68ba      	ldr	r2, [r7, #8]
 80b817e:	429a      	cmp	r2, r3
 80b8180:	d202      	bcs.n	80b8188 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80b8182:	4a08      	ldr	r2, [pc, #32]	; (80b81a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80b8184:	68bb      	ldr	r3, [r7, #8]
 80b8186:	6013      	str	r3, [r2, #0]
}
 80b8188:	bf00      	nop
 80b818a:	3710      	adds	r7, #16
 80b818c:	46bd      	mov	sp, r7
 80b818e:	bd80      	pop	{r7, pc}
 80b8190:	20009bf0 	.word	0x20009bf0
 80b8194:	20009718 	.word	0x20009718
 80b8198:	20009bd8 	.word	0x20009bd8
 80b819c:	20009ba8 	.word	0x20009ba8
 80b81a0:	20009ba4 	.word	0x20009ba4
 80b81a4:	20009c0c 	.word	0x20009c0c

080b81a8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80b81a8:	b580      	push	{r7, lr}
 80b81aa:	b08a      	sub	sp, #40	; 0x28
 80b81ac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80b81ae:	2300      	movs	r3, #0
 80b81b0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80b81b2:	f000 fba1 	bl	80b88f8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80b81b6:	4b1c      	ldr	r3, [pc, #112]	; (80b8228 <xTimerCreateTimerTask+0x80>)
 80b81b8:	681b      	ldr	r3, [r3, #0]
 80b81ba:	2b00      	cmp	r3, #0
 80b81bc:	d021      	beq.n	80b8202 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80b81be:	2300      	movs	r3, #0
 80b81c0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80b81c2:	2300      	movs	r3, #0
 80b81c4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80b81c6:	1d3a      	adds	r2, r7, #4
 80b81c8:	f107 0108 	add.w	r1, r7, #8
 80b81cc:	f107 030c 	add.w	r3, r7, #12
 80b81d0:	4618      	mov	r0, r3
 80b81d2:	f7fe f9ef 	bl	80b65b4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80b81d6:	6879      	ldr	r1, [r7, #4]
 80b81d8:	68bb      	ldr	r3, [r7, #8]
 80b81da:	68fa      	ldr	r2, [r7, #12]
 80b81dc:	9202      	str	r2, [sp, #8]
 80b81de:	9301      	str	r3, [sp, #4]
 80b81e0:	2302      	movs	r3, #2
 80b81e2:	9300      	str	r3, [sp, #0]
 80b81e4:	2300      	movs	r3, #0
 80b81e6:	460a      	mov	r2, r1
 80b81e8:	4910      	ldr	r1, [pc, #64]	; (80b822c <xTimerCreateTimerTask+0x84>)
 80b81ea:	4811      	ldr	r0, [pc, #68]	; (80b8230 <xTimerCreateTimerTask+0x88>)
 80b81ec:	f7ff f856 	bl	80b729c <xTaskCreateStatic>
 80b81f0:	4603      	mov	r3, r0
 80b81f2:	4a10      	ldr	r2, [pc, #64]	; (80b8234 <xTimerCreateTimerTask+0x8c>)
 80b81f4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80b81f6:	4b0f      	ldr	r3, [pc, #60]	; (80b8234 <xTimerCreateTimerTask+0x8c>)
 80b81f8:	681b      	ldr	r3, [r3, #0]
 80b81fa:	2b00      	cmp	r3, #0
 80b81fc:	d001      	beq.n	80b8202 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80b81fe:	2301      	movs	r3, #1
 80b8200:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80b8202:	697b      	ldr	r3, [r7, #20]
 80b8204:	2b00      	cmp	r3, #0
 80b8206:	d10a      	bne.n	80b821e <xTimerCreateTimerTask+0x76>
	__asm volatile
 80b8208:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b820c:	f383 8811 	msr	BASEPRI, r3
 80b8210:	f3bf 8f6f 	isb	sy
 80b8214:	f3bf 8f4f 	dsb	sy
 80b8218:	613b      	str	r3, [r7, #16]
}
 80b821a:	bf00      	nop
 80b821c:	e7fe      	b.n	80b821c <xTimerCreateTimerTask+0x74>
	return xReturn;
 80b821e:	697b      	ldr	r3, [r7, #20]
}
 80b8220:	4618      	mov	r0, r3
 80b8222:	3718      	adds	r7, #24
 80b8224:	46bd      	mov	sp, r7
 80b8226:	bd80      	pop	{r7, pc}
 80b8228:	20009c48 	.word	0x20009c48
 80b822c:	080c7774 	.word	0x080c7774
 80b8230:	080b84a1 	.word	0x080b84a1
 80b8234:	20009c4c 	.word	0x20009c4c

080b8238 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80b8238:	b580      	push	{r7, lr}
 80b823a:	b088      	sub	sp, #32
 80b823c:	af02      	add	r7, sp, #8
 80b823e:	60f8      	str	r0, [r7, #12]
 80b8240:	60b9      	str	r1, [r7, #8]
 80b8242:	607a      	str	r2, [r7, #4]
 80b8244:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80b8246:	202c      	movs	r0, #44	; 0x2c
 80b8248:	f000 fe2e 	bl	80b8ea8 <pvPortMalloc>
 80b824c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80b824e:	697b      	ldr	r3, [r7, #20]
 80b8250:	2b00      	cmp	r3, #0
 80b8252:	d00d      	beq.n	80b8270 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80b8254:	697b      	ldr	r3, [r7, #20]
 80b8256:	2200      	movs	r2, #0
 80b8258:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80b825c:	697b      	ldr	r3, [r7, #20]
 80b825e:	9301      	str	r3, [sp, #4]
 80b8260:	6a3b      	ldr	r3, [r7, #32]
 80b8262:	9300      	str	r3, [sp, #0]
 80b8264:	683b      	ldr	r3, [r7, #0]
 80b8266:	687a      	ldr	r2, [r7, #4]
 80b8268:	68b9      	ldr	r1, [r7, #8]
 80b826a:	68f8      	ldr	r0, [r7, #12]
 80b826c:	f000 f843 	bl	80b82f6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80b8270:	697b      	ldr	r3, [r7, #20]
	}
 80b8272:	4618      	mov	r0, r3
 80b8274:	3718      	adds	r7, #24
 80b8276:	46bd      	mov	sp, r7
 80b8278:	bd80      	pop	{r7, pc}

080b827a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80b827a:	b580      	push	{r7, lr}
 80b827c:	b08a      	sub	sp, #40	; 0x28
 80b827e:	af02      	add	r7, sp, #8
 80b8280:	60f8      	str	r0, [r7, #12]
 80b8282:	60b9      	str	r1, [r7, #8]
 80b8284:	607a      	str	r2, [r7, #4]
 80b8286:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80b8288:	232c      	movs	r3, #44	; 0x2c
 80b828a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80b828c:	693b      	ldr	r3, [r7, #16]
 80b828e:	2b2c      	cmp	r3, #44	; 0x2c
 80b8290:	d00a      	beq.n	80b82a8 <xTimerCreateStatic+0x2e>
	__asm volatile
 80b8292:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b8296:	f383 8811 	msr	BASEPRI, r3
 80b829a:	f3bf 8f6f 	isb	sy
 80b829e:	f3bf 8f4f 	dsb	sy
 80b82a2:	61bb      	str	r3, [r7, #24]
}
 80b82a4:	bf00      	nop
 80b82a6:	e7fe      	b.n	80b82a6 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80b82a8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80b82aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80b82ac:	2b00      	cmp	r3, #0
 80b82ae:	d10a      	bne.n	80b82c6 <xTimerCreateStatic+0x4c>
	__asm volatile
 80b82b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b82b4:	f383 8811 	msr	BASEPRI, r3
 80b82b8:	f3bf 8f6f 	isb	sy
 80b82bc:	f3bf 8f4f 	dsb	sy
 80b82c0:	617b      	str	r3, [r7, #20]
}
 80b82c2:	bf00      	nop
 80b82c4:	e7fe      	b.n	80b82c4 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80b82c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80b82c8:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80b82ca:	69fb      	ldr	r3, [r7, #28]
 80b82cc:	2b00      	cmp	r3, #0
 80b82ce:	d00d      	beq.n	80b82ec <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80b82d0:	69fb      	ldr	r3, [r7, #28]
 80b82d2:	2202      	movs	r2, #2
 80b82d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80b82d8:	69fb      	ldr	r3, [r7, #28]
 80b82da:	9301      	str	r3, [sp, #4]
 80b82dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80b82de:	9300      	str	r3, [sp, #0]
 80b82e0:	683b      	ldr	r3, [r7, #0]
 80b82e2:	687a      	ldr	r2, [r7, #4]
 80b82e4:	68b9      	ldr	r1, [r7, #8]
 80b82e6:	68f8      	ldr	r0, [r7, #12]
 80b82e8:	f000 f805 	bl	80b82f6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80b82ec:	69fb      	ldr	r3, [r7, #28]
	}
 80b82ee:	4618      	mov	r0, r3
 80b82f0:	3720      	adds	r7, #32
 80b82f2:	46bd      	mov	sp, r7
 80b82f4:	bd80      	pop	{r7, pc}

080b82f6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80b82f6:	b580      	push	{r7, lr}
 80b82f8:	b086      	sub	sp, #24
 80b82fa:	af00      	add	r7, sp, #0
 80b82fc:	60f8      	str	r0, [r7, #12]
 80b82fe:	60b9      	str	r1, [r7, #8]
 80b8300:	607a      	str	r2, [r7, #4]
 80b8302:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80b8304:	68bb      	ldr	r3, [r7, #8]
 80b8306:	2b00      	cmp	r3, #0
 80b8308:	d10a      	bne.n	80b8320 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 80b830a:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b830e:	f383 8811 	msr	BASEPRI, r3
 80b8312:	f3bf 8f6f 	isb	sy
 80b8316:	f3bf 8f4f 	dsb	sy
 80b831a:	617b      	str	r3, [r7, #20]
}
 80b831c:	bf00      	nop
 80b831e:	e7fe      	b.n	80b831e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80b8320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b8322:	2b00      	cmp	r3, #0
 80b8324:	d01e      	beq.n	80b8364 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80b8326:	f000 fae7 	bl	80b88f8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80b832a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b832c:	68fa      	ldr	r2, [r7, #12]
 80b832e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80b8330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b8332:	68ba      	ldr	r2, [r7, #8]
 80b8334:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80b8336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b8338:	683a      	ldr	r2, [r7, #0]
 80b833a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80b833c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b833e:	6a3a      	ldr	r2, [r7, #32]
 80b8340:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80b8342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b8344:	3304      	adds	r3, #4
 80b8346:	4618      	mov	r0, r3
 80b8348:	f7fe f96e 	bl	80b6628 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80b834c:	687b      	ldr	r3, [r7, #4]
 80b834e:	2b00      	cmp	r3, #0
 80b8350:	d008      	beq.n	80b8364 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80b8352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b8354:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80b8358:	f043 0304 	orr.w	r3, r3, #4
 80b835c:	b2da      	uxtb	r2, r3
 80b835e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b8360:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80b8364:	bf00      	nop
 80b8366:	3718      	adds	r7, #24
 80b8368:	46bd      	mov	sp, r7
 80b836a:	bd80      	pop	{r7, pc}

080b836c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80b836c:	b580      	push	{r7, lr}
 80b836e:	b08a      	sub	sp, #40	; 0x28
 80b8370:	af00      	add	r7, sp, #0
 80b8372:	60f8      	str	r0, [r7, #12]
 80b8374:	60b9      	str	r1, [r7, #8]
 80b8376:	607a      	str	r2, [r7, #4]
 80b8378:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80b837a:	2300      	movs	r3, #0
 80b837c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80b837e:	68fb      	ldr	r3, [r7, #12]
 80b8380:	2b00      	cmp	r3, #0
 80b8382:	d10a      	bne.n	80b839a <xTimerGenericCommand+0x2e>
	__asm volatile
 80b8384:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b8388:	f383 8811 	msr	BASEPRI, r3
 80b838c:	f3bf 8f6f 	isb	sy
 80b8390:	f3bf 8f4f 	dsb	sy
 80b8394:	623b      	str	r3, [r7, #32]
}
 80b8396:	bf00      	nop
 80b8398:	e7fe      	b.n	80b8398 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80b839a:	4b1a      	ldr	r3, [pc, #104]	; (80b8404 <xTimerGenericCommand+0x98>)
 80b839c:	681b      	ldr	r3, [r3, #0]
 80b839e:	2b00      	cmp	r3, #0
 80b83a0:	d02a      	beq.n	80b83f8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80b83a2:	68bb      	ldr	r3, [r7, #8]
 80b83a4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80b83a6:	687b      	ldr	r3, [r7, #4]
 80b83a8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80b83aa:	68fb      	ldr	r3, [r7, #12]
 80b83ac:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80b83ae:	68bb      	ldr	r3, [r7, #8]
 80b83b0:	2b05      	cmp	r3, #5
 80b83b2:	dc18      	bgt.n	80b83e6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80b83b4:	f7ff fe18 	bl	80b7fe8 <xTaskGetSchedulerState>
 80b83b8:	4603      	mov	r3, r0
 80b83ba:	2b02      	cmp	r3, #2
 80b83bc:	d109      	bne.n	80b83d2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80b83be:	4b11      	ldr	r3, [pc, #68]	; (80b8404 <xTimerGenericCommand+0x98>)
 80b83c0:	6818      	ldr	r0, [r3, #0]
 80b83c2:	f107 0110 	add.w	r1, r7, #16
 80b83c6:	2300      	movs	r3, #0
 80b83c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80b83ca:	f7fe faff 	bl	80b69cc <xQueueGenericSend>
 80b83ce:	6278      	str	r0, [r7, #36]	; 0x24
 80b83d0:	e012      	b.n	80b83f8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80b83d2:	4b0c      	ldr	r3, [pc, #48]	; (80b8404 <xTimerGenericCommand+0x98>)
 80b83d4:	6818      	ldr	r0, [r3, #0]
 80b83d6:	f107 0110 	add.w	r1, r7, #16
 80b83da:	2300      	movs	r3, #0
 80b83dc:	2200      	movs	r2, #0
 80b83de:	f7fe faf5 	bl	80b69cc <xQueueGenericSend>
 80b83e2:	6278      	str	r0, [r7, #36]	; 0x24
 80b83e4:	e008      	b.n	80b83f8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80b83e6:	4b07      	ldr	r3, [pc, #28]	; (80b8404 <xTimerGenericCommand+0x98>)
 80b83e8:	6818      	ldr	r0, [r3, #0]
 80b83ea:	f107 0110 	add.w	r1, r7, #16
 80b83ee:	2300      	movs	r3, #0
 80b83f0:	683a      	ldr	r2, [r7, #0]
 80b83f2:	f7fe fbe9 	bl	80b6bc8 <xQueueGenericSendFromISR>
 80b83f6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80b83f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80b83fa:	4618      	mov	r0, r3
 80b83fc:	3728      	adds	r7, #40	; 0x28
 80b83fe:	46bd      	mov	sp, r7
 80b8400:	bd80      	pop	{r7, pc}
 80b8402:	bf00      	nop
 80b8404:	20009c48 	.word	0x20009c48

080b8408 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80b8408:	b580      	push	{r7, lr}
 80b840a:	b088      	sub	sp, #32
 80b840c:	af02      	add	r7, sp, #8
 80b840e:	6078      	str	r0, [r7, #4]
 80b8410:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80b8412:	4b22      	ldr	r3, [pc, #136]	; (80b849c <prvProcessExpiredTimer+0x94>)
 80b8414:	681b      	ldr	r3, [r3, #0]
 80b8416:	68db      	ldr	r3, [r3, #12]
 80b8418:	68db      	ldr	r3, [r3, #12]
 80b841a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80b841c:	697b      	ldr	r3, [r7, #20]
 80b841e:	3304      	adds	r3, #4
 80b8420:	4618      	mov	r0, r3
 80b8422:	f7fe f96b 	bl	80b66fc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80b8426:	697b      	ldr	r3, [r7, #20]
 80b8428:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80b842c:	f003 0304 	and.w	r3, r3, #4
 80b8430:	2b00      	cmp	r3, #0
 80b8432:	d022      	beq.n	80b847a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80b8434:	697b      	ldr	r3, [r7, #20]
 80b8436:	699a      	ldr	r2, [r3, #24]
 80b8438:	687b      	ldr	r3, [r7, #4]
 80b843a:	18d1      	adds	r1, r2, r3
 80b843c:	687b      	ldr	r3, [r7, #4]
 80b843e:	683a      	ldr	r2, [r7, #0]
 80b8440:	6978      	ldr	r0, [r7, #20]
 80b8442:	f000 f8d1 	bl	80b85e8 <prvInsertTimerInActiveList>
 80b8446:	4603      	mov	r3, r0
 80b8448:	2b00      	cmp	r3, #0
 80b844a:	d01f      	beq.n	80b848c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80b844c:	2300      	movs	r3, #0
 80b844e:	9300      	str	r3, [sp, #0]
 80b8450:	2300      	movs	r3, #0
 80b8452:	687a      	ldr	r2, [r7, #4]
 80b8454:	2100      	movs	r1, #0
 80b8456:	6978      	ldr	r0, [r7, #20]
 80b8458:	f7ff ff88 	bl	80b836c <xTimerGenericCommand>
 80b845c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80b845e:	693b      	ldr	r3, [r7, #16]
 80b8460:	2b00      	cmp	r3, #0
 80b8462:	d113      	bne.n	80b848c <prvProcessExpiredTimer+0x84>
	__asm volatile
 80b8464:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b8468:	f383 8811 	msr	BASEPRI, r3
 80b846c:	f3bf 8f6f 	isb	sy
 80b8470:	f3bf 8f4f 	dsb	sy
 80b8474:	60fb      	str	r3, [r7, #12]
}
 80b8476:	bf00      	nop
 80b8478:	e7fe      	b.n	80b8478 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80b847a:	697b      	ldr	r3, [r7, #20]
 80b847c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80b8480:	f023 0301 	bic.w	r3, r3, #1
 80b8484:	b2da      	uxtb	r2, r3
 80b8486:	697b      	ldr	r3, [r7, #20]
 80b8488:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80b848c:	697b      	ldr	r3, [r7, #20]
 80b848e:	6a1b      	ldr	r3, [r3, #32]
 80b8490:	6978      	ldr	r0, [r7, #20]
 80b8492:	4798      	blx	r3
}
 80b8494:	bf00      	nop
 80b8496:	3718      	adds	r7, #24
 80b8498:	46bd      	mov	sp, r7
 80b849a:	bd80      	pop	{r7, pc}
 80b849c:	20009c40 	.word	0x20009c40

080b84a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80b84a0:	b580      	push	{r7, lr}
 80b84a2:	b084      	sub	sp, #16
 80b84a4:	af00      	add	r7, sp, #0
 80b84a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80b84a8:	f107 0308 	add.w	r3, r7, #8
 80b84ac:	4618      	mov	r0, r3
 80b84ae:	f000 f857 	bl	80b8560 <prvGetNextExpireTime>
 80b84b2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80b84b4:	68bb      	ldr	r3, [r7, #8]
 80b84b6:	4619      	mov	r1, r3
 80b84b8:	68f8      	ldr	r0, [r7, #12]
 80b84ba:	f000 f803 	bl	80b84c4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80b84be:	f000 f8d5 	bl	80b866c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80b84c2:	e7f1      	b.n	80b84a8 <prvTimerTask+0x8>

080b84c4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80b84c4:	b580      	push	{r7, lr}
 80b84c6:	b084      	sub	sp, #16
 80b84c8:	af00      	add	r7, sp, #0
 80b84ca:	6078      	str	r0, [r7, #4]
 80b84cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80b84ce:	f7ff f997 	bl	80b7800 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80b84d2:	f107 0308 	add.w	r3, r7, #8
 80b84d6:	4618      	mov	r0, r3
 80b84d8:	f000 f866 	bl	80b85a8 <prvSampleTimeNow>
 80b84dc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80b84de:	68bb      	ldr	r3, [r7, #8]
 80b84e0:	2b00      	cmp	r3, #0
 80b84e2:	d130      	bne.n	80b8546 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80b84e4:	683b      	ldr	r3, [r7, #0]
 80b84e6:	2b00      	cmp	r3, #0
 80b84e8:	d10a      	bne.n	80b8500 <prvProcessTimerOrBlockTask+0x3c>
 80b84ea:	687a      	ldr	r2, [r7, #4]
 80b84ec:	68fb      	ldr	r3, [r7, #12]
 80b84ee:	429a      	cmp	r2, r3
 80b84f0:	d806      	bhi.n	80b8500 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80b84f2:	f7ff f993 	bl	80b781c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80b84f6:	68f9      	ldr	r1, [r7, #12]
 80b84f8:	6878      	ldr	r0, [r7, #4]
 80b84fa:	f7ff ff85 	bl	80b8408 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80b84fe:	e024      	b.n	80b854a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80b8500:	683b      	ldr	r3, [r7, #0]
 80b8502:	2b00      	cmp	r3, #0
 80b8504:	d008      	beq.n	80b8518 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80b8506:	4b13      	ldr	r3, [pc, #76]	; (80b8554 <prvProcessTimerOrBlockTask+0x90>)
 80b8508:	681b      	ldr	r3, [r3, #0]
 80b850a:	681b      	ldr	r3, [r3, #0]
 80b850c:	2b00      	cmp	r3, #0
 80b850e:	d101      	bne.n	80b8514 <prvProcessTimerOrBlockTask+0x50>
 80b8510:	2301      	movs	r3, #1
 80b8512:	e000      	b.n	80b8516 <prvProcessTimerOrBlockTask+0x52>
 80b8514:	2300      	movs	r3, #0
 80b8516:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80b8518:	4b0f      	ldr	r3, [pc, #60]	; (80b8558 <prvProcessTimerOrBlockTask+0x94>)
 80b851a:	6818      	ldr	r0, [r3, #0]
 80b851c:	687a      	ldr	r2, [r7, #4]
 80b851e:	68fb      	ldr	r3, [r7, #12]
 80b8520:	1ad3      	subs	r3, r2, r3
 80b8522:	683a      	ldr	r2, [r7, #0]
 80b8524:	4619      	mov	r1, r3
 80b8526:	f7fe fe85 	bl	80b7234 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80b852a:	f7ff f977 	bl	80b781c <xTaskResumeAll>
 80b852e:	4603      	mov	r3, r0
 80b8530:	2b00      	cmp	r3, #0
 80b8532:	d10a      	bne.n	80b854a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80b8534:	4b09      	ldr	r3, [pc, #36]	; (80b855c <prvProcessTimerOrBlockTask+0x98>)
 80b8536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80b853a:	601a      	str	r2, [r3, #0]
 80b853c:	f3bf 8f4f 	dsb	sy
 80b8540:	f3bf 8f6f 	isb	sy
}
 80b8544:	e001      	b.n	80b854a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80b8546:	f7ff f969 	bl	80b781c <xTaskResumeAll>
}
 80b854a:	bf00      	nop
 80b854c:	3710      	adds	r7, #16
 80b854e:	46bd      	mov	sp, r7
 80b8550:	bd80      	pop	{r7, pc}
 80b8552:	bf00      	nop
 80b8554:	20009c44 	.word	0x20009c44
 80b8558:	20009c48 	.word	0x20009c48
 80b855c:	e000ed04 	.word	0xe000ed04

080b8560 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80b8560:	b480      	push	{r7}
 80b8562:	b085      	sub	sp, #20
 80b8564:	af00      	add	r7, sp, #0
 80b8566:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80b8568:	4b0e      	ldr	r3, [pc, #56]	; (80b85a4 <prvGetNextExpireTime+0x44>)
 80b856a:	681b      	ldr	r3, [r3, #0]
 80b856c:	681b      	ldr	r3, [r3, #0]
 80b856e:	2b00      	cmp	r3, #0
 80b8570:	d101      	bne.n	80b8576 <prvGetNextExpireTime+0x16>
 80b8572:	2201      	movs	r2, #1
 80b8574:	e000      	b.n	80b8578 <prvGetNextExpireTime+0x18>
 80b8576:	2200      	movs	r2, #0
 80b8578:	687b      	ldr	r3, [r7, #4]
 80b857a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80b857c:	687b      	ldr	r3, [r7, #4]
 80b857e:	681b      	ldr	r3, [r3, #0]
 80b8580:	2b00      	cmp	r3, #0
 80b8582:	d105      	bne.n	80b8590 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80b8584:	4b07      	ldr	r3, [pc, #28]	; (80b85a4 <prvGetNextExpireTime+0x44>)
 80b8586:	681b      	ldr	r3, [r3, #0]
 80b8588:	68db      	ldr	r3, [r3, #12]
 80b858a:	681b      	ldr	r3, [r3, #0]
 80b858c:	60fb      	str	r3, [r7, #12]
 80b858e:	e001      	b.n	80b8594 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80b8590:	2300      	movs	r3, #0
 80b8592:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80b8594:	68fb      	ldr	r3, [r7, #12]
}
 80b8596:	4618      	mov	r0, r3
 80b8598:	3714      	adds	r7, #20
 80b859a:	46bd      	mov	sp, r7
 80b859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b85a0:	4770      	bx	lr
 80b85a2:	bf00      	nop
 80b85a4:	20009c40 	.word	0x20009c40

080b85a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80b85a8:	b580      	push	{r7, lr}
 80b85aa:	b084      	sub	sp, #16
 80b85ac:	af00      	add	r7, sp, #0
 80b85ae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80b85b0:	f7ff f9d2 	bl	80b7958 <xTaskGetTickCount>
 80b85b4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80b85b6:	4b0b      	ldr	r3, [pc, #44]	; (80b85e4 <prvSampleTimeNow+0x3c>)
 80b85b8:	681b      	ldr	r3, [r3, #0]
 80b85ba:	68fa      	ldr	r2, [r7, #12]
 80b85bc:	429a      	cmp	r2, r3
 80b85be:	d205      	bcs.n	80b85cc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80b85c0:	f000 f936 	bl	80b8830 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80b85c4:	687b      	ldr	r3, [r7, #4]
 80b85c6:	2201      	movs	r2, #1
 80b85c8:	601a      	str	r2, [r3, #0]
 80b85ca:	e002      	b.n	80b85d2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80b85cc:	687b      	ldr	r3, [r7, #4]
 80b85ce:	2200      	movs	r2, #0
 80b85d0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80b85d2:	4a04      	ldr	r2, [pc, #16]	; (80b85e4 <prvSampleTimeNow+0x3c>)
 80b85d4:	68fb      	ldr	r3, [r7, #12]
 80b85d6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80b85d8:	68fb      	ldr	r3, [r7, #12]
}
 80b85da:	4618      	mov	r0, r3
 80b85dc:	3710      	adds	r7, #16
 80b85de:	46bd      	mov	sp, r7
 80b85e0:	bd80      	pop	{r7, pc}
 80b85e2:	bf00      	nop
 80b85e4:	20009c50 	.word	0x20009c50

080b85e8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80b85e8:	b580      	push	{r7, lr}
 80b85ea:	b086      	sub	sp, #24
 80b85ec:	af00      	add	r7, sp, #0
 80b85ee:	60f8      	str	r0, [r7, #12]
 80b85f0:	60b9      	str	r1, [r7, #8]
 80b85f2:	607a      	str	r2, [r7, #4]
 80b85f4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80b85f6:	2300      	movs	r3, #0
 80b85f8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80b85fa:	68fb      	ldr	r3, [r7, #12]
 80b85fc:	68ba      	ldr	r2, [r7, #8]
 80b85fe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80b8600:	68fb      	ldr	r3, [r7, #12]
 80b8602:	68fa      	ldr	r2, [r7, #12]
 80b8604:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80b8606:	68ba      	ldr	r2, [r7, #8]
 80b8608:	687b      	ldr	r3, [r7, #4]
 80b860a:	429a      	cmp	r2, r3
 80b860c:	d812      	bhi.n	80b8634 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80b860e:	687a      	ldr	r2, [r7, #4]
 80b8610:	683b      	ldr	r3, [r7, #0]
 80b8612:	1ad2      	subs	r2, r2, r3
 80b8614:	68fb      	ldr	r3, [r7, #12]
 80b8616:	699b      	ldr	r3, [r3, #24]
 80b8618:	429a      	cmp	r2, r3
 80b861a:	d302      	bcc.n	80b8622 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80b861c:	2301      	movs	r3, #1
 80b861e:	617b      	str	r3, [r7, #20]
 80b8620:	e01b      	b.n	80b865a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80b8622:	4b10      	ldr	r3, [pc, #64]	; (80b8664 <prvInsertTimerInActiveList+0x7c>)
 80b8624:	681a      	ldr	r2, [r3, #0]
 80b8626:	68fb      	ldr	r3, [r7, #12]
 80b8628:	3304      	adds	r3, #4
 80b862a:	4619      	mov	r1, r3
 80b862c:	4610      	mov	r0, r2
 80b862e:	f7fe f82c 	bl	80b668a <vListInsert>
 80b8632:	e012      	b.n	80b865a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80b8634:	687a      	ldr	r2, [r7, #4]
 80b8636:	683b      	ldr	r3, [r7, #0]
 80b8638:	429a      	cmp	r2, r3
 80b863a:	d206      	bcs.n	80b864a <prvInsertTimerInActiveList+0x62>
 80b863c:	68ba      	ldr	r2, [r7, #8]
 80b863e:	683b      	ldr	r3, [r7, #0]
 80b8640:	429a      	cmp	r2, r3
 80b8642:	d302      	bcc.n	80b864a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80b8644:	2301      	movs	r3, #1
 80b8646:	617b      	str	r3, [r7, #20]
 80b8648:	e007      	b.n	80b865a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80b864a:	4b07      	ldr	r3, [pc, #28]	; (80b8668 <prvInsertTimerInActiveList+0x80>)
 80b864c:	681a      	ldr	r2, [r3, #0]
 80b864e:	68fb      	ldr	r3, [r7, #12]
 80b8650:	3304      	adds	r3, #4
 80b8652:	4619      	mov	r1, r3
 80b8654:	4610      	mov	r0, r2
 80b8656:	f7fe f818 	bl	80b668a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80b865a:	697b      	ldr	r3, [r7, #20]
}
 80b865c:	4618      	mov	r0, r3
 80b865e:	3718      	adds	r7, #24
 80b8660:	46bd      	mov	sp, r7
 80b8662:	bd80      	pop	{r7, pc}
 80b8664:	20009c44 	.word	0x20009c44
 80b8668:	20009c40 	.word	0x20009c40

080b866c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80b866c:	b580      	push	{r7, lr}
 80b866e:	b08e      	sub	sp, #56	; 0x38
 80b8670:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80b8672:	e0ca      	b.n	80b880a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80b8674:	687b      	ldr	r3, [r7, #4]
 80b8676:	2b00      	cmp	r3, #0
 80b8678:	da18      	bge.n	80b86ac <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80b867a:	1d3b      	adds	r3, r7, #4
 80b867c:	3304      	adds	r3, #4
 80b867e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80b8680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80b8682:	2b00      	cmp	r3, #0
 80b8684:	d10a      	bne.n	80b869c <prvProcessReceivedCommands+0x30>
	__asm volatile
 80b8686:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b868a:	f383 8811 	msr	BASEPRI, r3
 80b868e:	f3bf 8f6f 	isb	sy
 80b8692:	f3bf 8f4f 	dsb	sy
 80b8696:	61fb      	str	r3, [r7, #28]
}
 80b8698:	bf00      	nop
 80b869a:	e7fe      	b.n	80b869a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80b869c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80b869e:	681b      	ldr	r3, [r3, #0]
 80b86a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80b86a2:	6850      	ldr	r0, [r2, #4]
 80b86a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80b86a6:	6892      	ldr	r2, [r2, #8]
 80b86a8:	4611      	mov	r1, r2
 80b86aa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80b86ac:	687b      	ldr	r3, [r7, #4]
 80b86ae:	2b00      	cmp	r3, #0
 80b86b0:	f2c0 80aa 	blt.w	80b8808 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80b86b4:	68fb      	ldr	r3, [r7, #12]
 80b86b6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80b86b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80b86ba:	695b      	ldr	r3, [r3, #20]
 80b86bc:	2b00      	cmp	r3, #0
 80b86be:	d004      	beq.n	80b86ca <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80b86c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80b86c2:	3304      	adds	r3, #4
 80b86c4:	4618      	mov	r0, r3
 80b86c6:	f7fe f819 	bl	80b66fc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80b86ca:	463b      	mov	r3, r7
 80b86cc:	4618      	mov	r0, r3
 80b86ce:	f7ff ff6b 	bl	80b85a8 <prvSampleTimeNow>
 80b86d2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80b86d4:	687b      	ldr	r3, [r7, #4]
 80b86d6:	2b09      	cmp	r3, #9
 80b86d8:	f200 8097 	bhi.w	80b880a <prvProcessReceivedCommands+0x19e>
 80b86dc:	a201      	add	r2, pc, #4	; (adr r2, 80b86e4 <prvProcessReceivedCommands+0x78>)
 80b86de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80b86e2:	bf00      	nop
 80b86e4:	080b870d 	.word	0x080b870d
 80b86e8:	080b870d 	.word	0x080b870d
 80b86ec:	080b870d 	.word	0x080b870d
 80b86f0:	080b8781 	.word	0x080b8781
 80b86f4:	080b8795 	.word	0x080b8795
 80b86f8:	080b87df 	.word	0x080b87df
 80b86fc:	080b870d 	.word	0x080b870d
 80b8700:	080b870d 	.word	0x080b870d
 80b8704:	080b8781 	.word	0x080b8781
 80b8708:	080b8795 	.word	0x080b8795
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80b870c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80b870e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80b8712:	f043 0301 	orr.w	r3, r3, #1
 80b8716:	b2da      	uxtb	r2, r3
 80b8718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80b871a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80b871e:	68ba      	ldr	r2, [r7, #8]
 80b8720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80b8722:	699b      	ldr	r3, [r3, #24]
 80b8724:	18d1      	adds	r1, r2, r3
 80b8726:	68bb      	ldr	r3, [r7, #8]
 80b8728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80b872a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80b872c:	f7ff ff5c 	bl	80b85e8 <prvInsertTimerInActiveList>
 80b8730:	4603      	mov	r3, r0
 80b8732:	2b00      	cmp	r3, #0
 80b8734:	d069      	beq.n	80b880a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80b8736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80b8738:	6a1b      	ldr	r3, [r3, #32]
 80b873a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80b873c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80b873e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80b8740:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80b8744:	f003 0304 	and.w	r3, r3, #4
 80b8748:	2b00      	cmp	r3, #0
 80b874a:	d05e      	beq.n	80b880a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80b874c:	68ba      	ldr	r2, [r7, #8]
 80b874e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80b8750:	699b      	ldr	r3, [r3, #24]
 80b8752:	441a      	add	r2, r3
 80b8754:	2300      	movs	r3, #0
 80b8756:	9300      	str	r3, [sp, #0]
 80b8758:	2300      	movs	r3, #0
 80b875a:	2100      	movs	r1, #0
 80b875c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80b875e:	f7ff fe05 	bl	80b836c <xTimerGenericCommand>
 80b8762:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80b8764:	6a3b      	ldr	r3, [r7, #32]
 80b8766:	2b00      	cmp	r3, #0
 80b8768:	d14f      	bne.n	80b880a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80b876a:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b876e:	f383 8811 	msr	BASEPRI, r3
 80b8772:	f3bf 8f6f 	isb	sy
 80b8776:	f3bf 8f4f 	dsb	sy
 80b877a:	61bb      	str	r3, [r7, #24]
}
 80b877c:	bf00      	nop
 80b877e:	e7fe      	b.n	80b877e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80b8780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80b8782:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80b8786:	f023 0301 	bic.w	r3, r3, #1
 80b878a:	b2da      	uxtb	r2, r3
 80b878c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80b878e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80b8792:	e03a      	b.n	80b880a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80b8794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80b8796:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80b879a:	f043 0301 	orr.w	r3, r3, #1
 80b879e:	b2da      	uxtb	r2, r3
 80b87a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80b87a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80b87a6:	68ba      	ldr	r2, [r7, #8]
 80b87a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80b87aa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80b87ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80b87ae:	699b      	ldr	r3, [r3, #24]
 80b87b0:	2b00      	cmp	r3, #0
 80b87b2:	d10a      	bne.n	80b87ca <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80b87b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b87b8:	f383 8811 	msr	BASEPRI, r3
 80b87bc:	f3bf 8f6f 	isb	sy
 80b87c0:	f3bf 8f4f 	dsb	sy
 80b87c4:	617b      	str	r3, [r7, #20]
}
 80b87c6:	bf00      	nop
 80b87c8:	e7fe      	b.n	80b87c8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80b87ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80b87cc:	699a      	ldr	r2, [r3, #24]
 80b87ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b87d0:	18d1      	adds	r1, r2, r3
 80b87d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b87d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80b87d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80b87d8:	f7ff ff06 	bl	80b85e8 <prvInsertTimerInActiveList>
					break;
 80b87dc:	e015      	b.n	80b880a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80b87de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80b87e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80b87e4:	f003 0302 	and.w	r3, r3, #2
 80b87e8:	2b00      	cmp	r3, #0
 80b87ea:	d103      	bne.n	80b87f4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80b87ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80b87ee:	f000 fc27 	bl	80b9040 <vPortFree>
 80b87f2:	e00a      	b.n	80b880a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80b87f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80b87f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80b87fa:	f023 0301 	bic.w	r3, r3, #1
 80b87fe:	b2da      	uxtb	r2, r3
 80b8800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80b8802:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80b8806:	e000      	b.n	80b880a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80b8808:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80b880a:	4b08      	ldr	r3, [pc, #32]	; (80b882c <prvProcessReceivedCommands+0x1c0>)
 80b880c:	681b      	ldr	r3, [r3, #0]
 80b880e:	1d39      	adds	r1, r7, #4
 80b8810:	2200      	movs	r2, #0
 80b8812:	4618      	mov	r0, r3
 80b8814:	f7fe fa74 	bl	80b6d00 <xQueueReceive>
 80b8818:	4603      	mov	r3, r0
 80b881a:	2b00      	cmp	r3, #0
 80b881c:	f47f af2a 	bne.w	80b8674 <prvProcessReceivedCommands+0x8>
	}
}
 80b8820:	bf00      	nop
 80b8822:	bf00      	nop
 80b8824:	3730      	adds	r7, #48	; 0x30
 80b8826:	46bd      	mov	sp, r7
 80b8828:	bd80      	pop	{r7, pc}
 80b882a:	bf00      	nop
 80b882c:	20009c48 	.word	0x20009c48

080b8830 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80b8830:	b580      	push	{r7, lr}
 80b8832:	b088      	sub	sp, #32
 80b8834:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80b8836:	e048      	b.n	80b88ca <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80b8838:	4b2d      	ldr	r3, [pc, #180]	; (80b88f0 <prvSwitchTimerLists+0xc0>)
 80b883a:	681b      	ldr	r3, [r3, #0]
 80b883c:	68db      	ldr	r3, [r3, #12]
 80b883e:	681b      	ldr	r3, [r3, #0]
 80b8840:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80b8842:	4b2b      	ldr	r3, [pc, #172]	; (80b88f0 <prvSwitchTimerLists+0xc0>)
 80b8844:	681b      	ldr	r3, [r3, #0]
 80b8846:	68db      	ldr	r3, [r3, #12]
 80b8848:	68db      	ldr	r3, [r3, #12]
 80b884a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80b884c:	68fb      	ldr	r3, [r7, #12]
 80b884e:	3304      	adds	r3, #4
 80b8850:	4618      	mov	r0, r3
 80b8852:	f7fd ff53 	bl	80b66fc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80b8856:	68fb      	ldr	r3, [r7, #12]
 80b8858:	6a1b      	ldr	r3, [r3, #32]
 80b885a:	68f8      	ldr	r0, [r7, #12]
 80b885c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80b885e:	68fb      	ldr	r3, [r7, #12]
 80b8860:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80b8864:	f003 0304 	and.w	r3, r3, #4
 80b8868:	2b00      	cmp	r3, #0
 80b886a:	d02e      	beq.n	80b88ca <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80b886c:	68fb      	ldr	r3, [r7, #12]
 80b886e:	699b      	ldr	r3, [r3, #24]
 80b8870:	693a      	ldr	r2, [r7, #16]
 80b8872:	4413      	add	r3, r2
 80b8874:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80b8876:	68ba      	ldr	r2, [r7, #8]
 80b8878:	693b      	ldr	r3, [r7, #16]
 80b887a:	429a      	cmp	r2, r3
 80b887c:	d90e      	bls.n	80b889c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80b887e:	68fb      	ldr	r3, [r7, #12]
 80b8880:	68ba      	ldr	r2, [r7, #8]
 80b8882:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80b8884:	68fb      	ldr	r3, [r7, #12]
 80b8886:	68fa      	ldr	r2, [r7, #12]
 80b8888:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80b888a:	4b19      	ldr	r3, [pc, #100]	; (80b88f0 <prvSwitchTimerLists+0xc0>)
 80b888c:	681a      	ldr	r2, [r3, #0]
 80b888e:	68fb      	ldr	r3, [r7, #12]
 80b8890:	3304      	adds	r3, #4
 80b8892:	4619      	mov	r1, r3
 80b8894:	4610      	mov	r0, r2
 80b8896:	f7fd fef8 	bl	80b668a <vListInsert>
 80b889a:	e016      	b.n	80b88ca <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80b889c:	2300      	movs	r3, #0
 80b889e:	9300      	str	r3, [sp, #0]
 80b88a0:	2300      	movs	r3, #0
 80b88a2:	693a      	ldr	r2, [r7, #16]
 80b88a4:	2100      	movs	r1, #0
 80b88a6:	68f8      	ldr	r0, [r7, #12]
 80b88a8:	f7ff fd60 	bl	80b836c <xTimerGenericCommand>
 80b88ac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80b88ae:	687b      	ldr	r3, [r7, #4]
 80b88b0:	2b00      	cmp	r3, #0
 80b88b2:	d10a      	bne.n	80b88ca <prvSwitchTimerLists+0x9a>
	__asm volatile
 80b88b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b88b8:	f383 8811 	msr	BASEPRI, r3
 80b88bc:	f3bf 8f6f 	isb	sy
 80b88c0:	f3bf 8f4f 	dsb	sy
 80b88c4:	603b      	str	r3, [r7, #0]
}
 80b88c6:	bf00      	nop
 80b88c8:	e7fe      	b.n	80b88c8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80b88ca:	4b09      	ldr	r3, [pc, #36]	; (80b88f0 <prvSwitchTimerLists+0xc0>)
 80b88cc:	681b      	ldr	r3, [r3, #0]
 80b88ce:	681b      	ldr	r3, [r3, #0]
 80b88d0:	2b00      	cmp	r3, #0
 80b88d2:	d1b1      	bne.n	80b8838 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80b88d4:	4b06      	ldr	r3, [pc, #24]	; (80b88f0 <prvSwitchTimerLists+0xc0>)
 80b88d6:	681b      	ldr	r3, [r3, #0]
 80b88d8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80b88da:	4b06      	ldr	r3, [pc, #24]	; (80b88f4 <prvSwitchTimerLists+0xc4>)
 80b88dc:	681b      	ldr	r3, [r3, #0]
 80b88de:	4a04      	ldr	r2, [pc, #16]	; (80b88f0 <prvSwitchTimerLists+0xc0>)
 80b88e0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80b88e2:	4a04      	ldr	r2, [pc, #16]	; (80b88f4 <prvSwitchTimerLists+0xc4>)
 80b88e4:	697b      	ldr	r3, [r7, #20]
 80b88e6:	6013      	str	r3, [r2, #0]
}
 80b88e8:	bf00      	nop
 80b88ea:	3718      	adds	r7, #24
 80b88ec:	46bd      	mov	sp, r7
 80b88ee:	bd80      	pop	{r7, pc}
 80b88f0:	20009c40 	.word	0x20009c40
 80b88f4:	20009c44 	.word	0x20009c44

080b88f8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80b88f8:	b580      	push	{r7, lr}
 80b88fa:	b082      	sub	sp, #8
 80b88fc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80b88fe:	f000 f9b1 	bl	80b8c64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80b8902:	4b15      	ldr	r3, [pc, #84]	; (80b8958 <prvCheckForValidListAndQueue+0x60>)
 80b8904:	681b      	ldr	r3, [r3, #0]
 80b8906:	2b00      	cmp	r3, #0
 80b8908:	d120      	bne.n	80b894c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80b890a:	4814      	ldr	r0, [pc, #80]	; (80b895c <prvCheckForValidListAndQueue+0x64>)
 80b890c:	f7fd fe6c 	bl	80b65e8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80b8910:	4813      	ldr	r0, [pc, #76]	; (80b8960 <prvCheckForValidListAndQueue+0x68>)
 80b8912:	f7fd fe69 	bl	80b65e8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80b8916:	4b13      	ldr	r3, [pc, #76]	; (80b8964 <prvCheckForValidListAndQueue+0x6c>)
 80b8918:	4a10      	ldr	r2, [pc, #64]	; (80b895c <prvCheckForValidListAndQueue+0x64>)
 80b891a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80b891c:	4b12      	ldr	r3, [pc, #72]	; (80b8968 <prvCheckForValidListAndQueue+0x70>)
 80b891e:	4a10      	ldr	r2, [pc, #64]	; (80b8960 <prvCheckForValidListAndQueue+0x68>)
 80b8920:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80b8922:	2300      	movs	r3, #0
 80b8924:	9300      	str	r3, [sp, #0]
 80b8926:	4b11      	ldr	r3, [pc, #68]	; (80b896c <prvCheckForValidListAndQueue+0x74>)
 80b8928:	4a11      	ldr	r2, [pc, #68]	; (80b8970 <prvCheckForValidListAndQueue+0x78>)
 80b892a:	2110      	movs	r1, #16
 80b892c:	200a      	movs	r0, #10
 80b892e:	f7fd ff77 	bl	80b6820 <xQueueGenericCreateStatic>
 80b8932:	4603      	mov	r3, r0
 80b8934:	4a08      	ldr	r2, [pc, #32]	; (80b8958 <prvCheckForValidListAndQueue+0x60>)
 80b8936:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80b8938:	4b07      	ldr	r3, [pc, #28]	; (80b8958 <prvCheckForValidListAndQueue+0x60>)
 80b893a:	681b      	ldr	r3, [r3, #0]
 80b893c:	2b00      	cmp	r3, #0
 80b893e:	d005      	beq.n	80b894c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80b8940:	4b05      	ldr	r3, [pc, #20]	; (80b8958 <prvCheckForValidListAndQueue+0x60>)
 80b8942:	681b      	ldr	r3, [r3, #0]
 80b8944:	490b      	ldr	r1, [pc, #44]	; (80b8974 <prvCheckForValidListAndQueue+0x7c>)
 80b8946:	4618      	mov	r0, r3
 80b8948:	f7fe fc4a 	bl	80b71e0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80b894c:	f000 f9ba 	bl	80b8cc4 <vPortExitCritical>
}
 80b8950:	bf00      	nop
 80b8952:	46bd      	mov	sp, r7
 80b8954:	bd80      	pop	{r7, pc}
 80b8956:	bf00      	nop
 80b8958:	20009c48 	.word	0x20009c48
 80b895c:	20009c18 	.word	0x20009c18
 80b8960:	20009c2c 	.word	0x20009c2c
 80b8964:	20009c40 	.word	0x20009c40
 80b8968:	20009c44 	.word	0x20009c44
 80b896c:	20009cf4 	.word	0x20009cf4
 80b8970:	20009c54 	.word	0x20009c54
 80b8974:	080c777c 	.word	0x080c777c

080b8978 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 80b8978:	b580      	push	{r7, lr}
 80b897a:	b086      	sub	sp, #24
 80b897c:	af00      	add	r7, sp, #0
 80b897e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 80b8980:	687b      	ldr	r3, [r7, #4]
 80b8982:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 80b8984:	687b      	ldr	r3, [r7, #4]
 80b8986:	2b00      	cmp	r3, #0
 80b8988:	d10a      	bne.n	80b89a0 <xTimerIsTimerActive+0x28>
	__asm volatile
 80b898a:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b898e:	f383 8811 	msr	BASEPRI, r3
 80b8992:	f3bf 8f6f 	isb	sy
 80b8996:	f3bf 8f4f 	dsb	sy
 80b899a:	60fb      	str	r3, [r7, #12]
}
 80b899c:	bf00      	nop
 80b899e:	e7fe      	b.n	80b899e <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 80b89a0:	f000 f960 	bl	80b8c64 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 80b89a4:	693b      	ldr	r3, [r7, #16]
 80b89a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80b89aa:	f003 0301 	and.w	r3, r3, #1
 80b89ae:	2b00      	cmp	r3, #0
 80b89b0:	d102      	bne.n	80b89b8 <xTimerIsTimerActive+0x40>
		{
			xReturn = pdFALSE;
 80b89b2:	2300      	movs	r3, #0
 80b89b4:	617b      	str	r3, [r7, #20]
 80b89b6:	e001      	b.n	80b89bc <xTimerIsTimerActive+0x44>
		}
		else
		{
			xReturn = pdTRUE;
 80b89b8:	2301      	movs	r3, #1
 80b89ba:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80b89bc:	f000 f982 	bl	80b8cc4 <vPortExitCritical>

	return xReturn;
 80b89c0:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 80b89c2:	4618      	mov	r0, r3
 80b89c4:	3718      	adds	r7, #24
 80b89c6:	46bd      	mov	sp, r7
 80b89c8:	bd80      	pop	{r7, pc}

080b89ca <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80b89ca:	b580      	push	{r7, lr}
 80b89cc:	b086      	sub	sp, #24
 80b89ce:	af00      	add	r7, sp, #0
 80b89d0:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 80b89d2:	687b      	ldr	r3, [r7, #4]
 80b89d4:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80b89d6:	687b      	ldr	r3, [r7, #4]
 80b89d8:	2b00      	cmp	r3, #0
 80b89da:	d10a      	bne.n	80b89f2 <pvTimerGetTimerID+0x28>
	__asm volatile
 80b89dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b89e0:	f383 8811 	msr	BASEPRI, r3
 80b89e4:	f3bf 8f6f 	isb	sy
 80b89e8:	f3bf 8f4f 	dsb	sy
 80b89ec:	60fb      	str	r3, [r7, #12]
}
 80b89ee:	bf00      	nop
 80b89f0:	e7fe      	b.n	80b89f0 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 80b89f2:	f000 f937 	bl	80b8c64 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80b89f6:	697b      	ldr	r3, [r7, #20]
 80b89f8:	69db      	ldr	r3, [r3, #28]
 80b89fa:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80b89fc:	f000 f962 	bl	80b8cc4 <vPortExitCritical>

	return pvReturn;
 80b8a00:	693b      	ldr	r3, [r7, #16]
}
 80b8a02:	4618      	mov	r0, r3
 80b8a04:	3718      	adds	r7, #24
 80b8a06:	46bd      	mov	sp, r7
 80b8a08:	bd80      	pop	{r7, pc}
	...

080b8a0c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80b8a0c:	b480      	push	{r7}
 80b8a0e:	b085      	sub	sp, #20
 80b8a10:	af00      	add	r7, sp, #0
 80b8a12:	60f8      	str	r0, [r7, #12]
 80b8a14:	60b9      	str	r1, [r7, #8]
 80b8a16:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80b8a18:	68fb      	ldr	r3, [r7, #12]
 80b8a1a:	3b04      	subs	r3, #4
 80b8a1c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80b8a1e:	68fb      	ldr	r3, [r7, #12]
 80b8a20:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80b8a24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80b8a26:	68fb      	ldr	r3, [r7, #12]
 80b8a28:	3b04      	subs	r3, #4
 80b8a2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80b8a2c:	68bb      	ldr	r3, [r7, #8]
 80b8a2e:	f023 0201 	bic.w	r2, r3, #1
 80b8a32:	68fb      	ldr	r3, [r7, #12]
 80b8a34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80b8a36:	68fb      	ldr	r3, [r7, #12]
 80b8a38:	3b04      	subs	r3, #4
 80b8a3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80b8a3c:	4a0c      	ldr	r2, [pc, #48]	; (80b8a70 <pxPortInitialiseStack+0x64>)
 80b8a3e:	68fb      	ldr	r3, [r7, #12]
 80b8a40:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80b8a42:	68fb      	ldr	r3, [r7, #12]
 80b8a44:	3b14      	subs	r3, #20
 80b8a46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80b8a48:	687a      	ldr	r2, [r7, #4]
 80b8a4a:	68fb      	ldr	r3, [r7, #12]
 80b8a4c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80b8a4e:	68fb      	ldr	r3, [r7, #12]
 80b8a50:	3b04      	subs	r3, #4
 80b8a52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80b8a54:	68fb      	ldr	r3, [r7, #12]
 80b8a56:	f06f 0202 	mvn.w	r2, #2
 80b8a5a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80b8a5c:	68fb      	ldr	r3, [r7, #12]
 80b8a5e:	3b20      	subs	r3, #32
 80b8a60:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80b8a62:	68fb      	ldr	r3, [r7, #12]
}
 80b8a64:	4618      	mov	r0, r3
 80b8a66:	3714      	adds	r7, #20
 80b8a68:	46bd      	mov	sp, r7
 80b8a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b8a6e:	4770      	bx	lr
 80b8a70:	080b8a75 	.word	0x080b8a75

080b8a74 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80b8a74:	b480      	push	{r7}
 80b8a76:	b085      	sub	sp, #20
 80b8a78:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80b8a7a:	2300      	movs	r3, #0
 80b8a7c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80b8a7e:	4b12      	ldr	r3, [pc, #72]	; (80b8ac8 <prvTaskExitError+0x54>)
 80b8a80:	681b      	ldr	r3, [r3, #0]
 80b8a82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80b8a86:	d00a      	beq.n	80b8a9e <prvTaskExitError+0x2a>
	__asm volatile
 80b8a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b8a8c:	f383 8811 	msr	BASEPRI, r3
 80b8a90:	f3bf 8f6f 	isb	sy
 80b8a94:	f3bf 8f4f 	dsb	sy
 80b8a98:	60fb      	str	r3, [r7, #12]
}
 80b8a9a:	bf00      	nop
 80b8a9c:	e7fe      	b.n	80b8a9c <prvTaskExitError+0x28>
	__asm volatile
 80b8a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b8aa2:	f383 8811 	msr	BASEPRI, r3
 80b8aa6:	f3bf 8f6f 	isb	sy
 80b8aaa:	f3bf 8f4f 	dsb	sy
 80b8aae:	60bb      	str	r3, [r7, #8]
}
 80b8ab0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80b8ab2:	bf00      	nop
 80b8ab4:	687b      	ldr	r3, [r7, #4]
 80b8ab6:	2b00      	cmp	r3, #0
 80b8ab8:	d0fc      	beq.n	80b8ab4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80b8aba:	bf00      	nop
 80b8abc:	bf00      	nop
 80b8abe:	3714      	adds	r7, #20
 80b8ac0:	46bd      	mov	sp, r7
 80b8ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b8ac6:	4770      	bx	lr
 80b8ac8:	20007cb4 	.word	0x20007cb4
 80b8acc:	00000000 	.word	0x00000000

080b8ad0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80b8ad0:	4b07      	ldr	r3, [pc, #28]	; (80b8af0 <pxCurrentTCBConst2>)
 80b8ad2:	6819      	ldr	r1, [r3, #0]
 80b8ad4:	6808      	ldr	r0, [r1, #0]
 80b8ad6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80b8ada:	f380 8809 	msr	PSP, r0
 80b8ade:	f3bf 8f6f 	isb	sy
 80b8ae2:	f04f 0000 	mov.w	r0, #0
 80b8ae6:	f380 8811 	msr	BASEPRI, r0
 80b8aea:	4770      	bx	lr
 80b8aec:	f3af 8000 	nop.w

080b8af0 <pxCurrentTCBConst2>:
 80b8af0:	20009718 	.word	0x20009718
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80b8af4:	bf00      	nop
 80b8af6:	bf00      	nop

080b8af8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80b8af8:	4808      	ldr	r0, [pc, #32]	; (80b8b1c <prvPortStartFirstTask+0x24>)
 80b8afa:	6800      	ldr	r0, [r0, #0]
 80b8afc:	6800      	ldr	r0, [r0, #0]
 80b8afe:	f380 8808 	msr	MSP, r0
 80b8b02:	f04f 0000 	mov.w	r0, #0
 80b8b06:	f380 8814 	msr	CONTROL, r0
 80b8b0a:	b662      	cpsie	i
 80b8b0c:	b661      	cpsie	f
 80b8b0e:	f3bf 8f4f 	dsb	sy
 80b8b12:	f3bf 8f6f 	isb	sy
 80b8b16:	df00      	svc	0
 80b8b18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80b8b1a:	bf00      	nop
 80b8b1c:	e000ed08 	.word	0xe000ed08

080b8b20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80b8b20:	b580      	push	{r7, lr}
 80b8b22:	b086      	sub	sp, #24
 80b8b24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80b8b26:	4b46      	ldr	r3, [pc, #280]	; (80b8c40 <xPortStartScheduler+0x120>)
 80b8b28:	681b      	ldr	r3, [r3, #0]
 80b8b2a:	4a46      	ldr	r2, [pc, #280]	; (80b8c44 <xPortStartScheduler+0x124>)
 80b8b2c:	4293      	cmp	r3, r2
 80b8b2e:	d10a      	bne.n	80b8b46 <xPortStartScheduler+0x26>
	__asm volatile
 80b8b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b8b34:	f383 8811 	msr	BASEPRI, r3
 80b8b38:	f3bf 8f6f 	isb	sy
 80b8b3c:	f3bf 8f4f 	dsb	sy
 80b8b40:	613b      	str	r3, [r7, #16]
}
 80b8b42:	bf00      	nop
 80b8b44:	e7fe      	b.n	80b8b44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80b8b46:	4b3e      	ldr	r3, [pc, #248]	; (80b8c40 <xPortStartScheduler+0x120>)
 80b8b48:	681b      	ldr	r3, [r3, #0]
 80b8b4a:	4a3f      	ldr	r2, [pc, #252]	; (80b8c48 <xPortStartScheduler+0x128>)
 80b8b4c:	4293      	cmp	r3, r2
 80b8b4e:	d10a      	bne.n	80b8b66 <xPortStartScheduler+0x46>
	__asm volatile
 80b8b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b8b54:	f383 8811 	msr	BASEPRI, r3
 80b8b58:	f3bf 8f6f 	isb	sy
 80b8b5c:	f3bf 8f4f 	dsb	sy
 80b8b60:	60fb      	str	r3, [r7, #12]
}
 80b8b62:	bf00      	nop
 80b8b64:	e7fe      	b.n	80b8b64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80b8b66:	4b39      	ldr	r3, [pc, #228]	; (80b8c4c <xPortStartScheduler+0x12c>)
 80b8b68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80b8b6a:	697b      	ldr	r3, [r7, #20]
 80b8b6c:	781b      	ldrb	r3, [r3, #0]
 80b8b6e:	b2db      	uxtb	r3, r3
 80b8b70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80b8b72:	697b      	ldr	r3, [r7, #20]
 80b8b74:	22ff      	movs	r2, #255	; 0xff
 80b8b76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80b8b78:	697b      	ldr	r3, [r7, #20]
 80b8b7a:	781b      	ldrb	r3, [r3, #0]
 80b8b7c:	b2db      	uxtb	r3, r3
 80b8b7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80b8b80:	78fb      	ldrb	r3, [r7, #3]
 80b8b82:	b2db      	uxtb	r3, r3
 80b8b84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80b8b88:	b2da      	uxtb	r2, r3
 80b8b8a:	4b31      	ldr	r3, [pc, #196]	; (80b8c50 <xPortStartScheduler+0x130>)
 80b8b8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80b8b8e:	4b31      	ldr	r3, [pc, #196]	; (80b8c54 <xPortStartScheduler+0x134>)
 80b8b90:	2207      	movs	r2, #7
 80b8b92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80b8b94:	e009      	b.n	80b8baa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80b8b96:	4b2f      	ldr	r3, [pc, #188]	; (80b8c54 <xPortStartScheduler+0x134>)
 80b8b98:	681b      	ldr	r3, [r3, #0]
 80b8b9a:	3b01      	subs	r3, #1
 80b8b9c:	4a2d      	ldr	r2, [pc, #180]	; (80b8c54 <xPortStartScheduler+0x134>)
 80b8b9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80b8ba0:	78fb      	ldrb	r3, [r7, #3]
 80b8ba2:	b2db      	uxtb	r3, r3
 80b8ba4:	005b      	lsls	r3, r3, #1
 80b8ba6:	b2db      	uxtb	r3, r3
 80b8ba8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80b8baa:	78fb      	ldrb	r3, [r7, #3]
 80b8bac:	b2db      	uxtb	r3, r3
 80b8bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80b8bb2:	2b80      	cmp	r3, #128	; 0x80
 80b8bb4:	d0ef      	beq.n	80b8b96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80b8bb6:	4b27      	ldr	r3, [pc, #156]	; (80b8c54 <xPortStartScheduler+0x134>)
 80b8bb8:	681b      	ldr	r3, [r3, #0]
 80b8bba:	f1c3 0307 	rsb	r3, r3, #7
 80b8bbe:	2b04      	cmp	r3, #4
 80b8bc0:	d00a      	beq.n	80b8bd8 <xPortStartScheduler+0xb8>
	__asm volatile
 80b8bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b8bc6:	f383 8811 	msr	BASEPRI, r3
 80b8bca:	f3bf 8f6f 	isb	sy
 80b8bce:	f3bf 8f4f 	dsb	sy
 80b8bd2:	60bb      	str	r3, [r7, #8]
}
 80b8bd4:	bf00      	nop
 80b8bd6:	e7fe      	b.n	80b8bd6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80b8bd8:	4b1e      	ldr	r3, [pc, #120]	; (80b8c54 <xPortStartScheduler+0x134>)
 80b8bda:	681b      	ldr	r3, [r3, #0]
 80b8bdc:	021b      	lsls	r3, r3, #8
 80b8bde:	4a1d      	ldr	r2, [pc, #116]	; (80b8c54 <xPortStartScheduler+0x134>)
 80b8be0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80b8be2:	4b1c      	ldr	r3, [pc, #112]	; (80b8c54 <xPortStartScheduler+0x134>)
 80b8be4:	681b      	ldr	r3, [r3, #0]
 80b8be6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80b8bea:	4a1a      	ldr	r2, [pc, #104]	; (80b8c54 <xPortStartScheduler+0x134>)
 80b8bec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80b8bee:	687b      	ldr	r3, [r7, #4]
 80b8bf0:	b2da      	uxtb	r2, r3
 80b8bf2:	697b      	ldr	r3, [r7, #20]
 80b8bf4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80b8bf6:	4b18      	ldr	r3, [pc, #96]	; (80b8c58 <xPortStartScheduler+0x138>)
 80b8bf8:	681b      	ldr	r3, [r3, #0]
 80b8bfa:	4a17      	ldr	r2, [pc, #92]	; (80b8c58 <xPortStartScheduler+0x138>)
 80b8bfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80b8c00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80b8c02:	4b15      	ldr	r3, [pc, #84]	; (80b8c58 <xPortStartScheduler+0x138>)
 80b8c04:	681b      	ldr	r3, [r3, #0]
 80b8c06:	4a14      	ldr	r2, [pc, #80]	; (80b8c58 <xPortStartScheduler+0x138>)
 80b8c08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80b8c0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80b8c0e:	f000 f8dd 	bl	80b8dcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80b8c12:	4b12      	ldr	r3, [pc, #72]	; (80b8c5c <xPortStartScheduler+0x13c>)
 80b8c14:	2200      	movs	r2, #0
 80b8c16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80b8c18:	f000 f8fc 	bl	80b8e14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80b8c1c:	4b10      	ldr	r3, [pc, #64]	; (80b8c60 <xPortStartScheduler+0x140>)
 80b8c1e:	681b      	ldr	r3, [r3, #0]
 80b8c20:	4a0f      	ldr	r2, [pc, #60]	; (80b8c60 <xPortStartScheduler+0x140>)
 80b8c22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80b8c26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80b8c28:	f7ff ff66 	bl	80b8af8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80b8c2c:	f7fe ff70 	bl	80b7b10 <vTaskSwitchContext>
	prvTaskExitError();
 80b8c30:	f7ff ff20 	bl	80b8a74 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80b8c34:	2300      	movs	r3, #0
}
 80b8c36:	4618      	mov	r0, r3
 80b8c38:	3718      	adds	r7, #24
 80b8c3a:	46bd      	mov	sp, r7
 80b8c3c:	bd80      	pop	{r7, pc}
 80b8c3e:	bf00      	nop
 80b8c40:	e000ed00 	.word	0xe000ed00
 80b8c44:	410fc271 	.word	0x410fc271
 80b8c48:	410fc270 	.word	0x410fc270
 80b8c4c:	e000e400 	.word	0xe000e400
 80b8c50:	20009d44 	.word	0x20009d44
 80b8c54:	20009d48 	.word	0x20009d48
 80b8c58:	e000ed20 	.word	0xe000ed20
 80b8c5c:	20007cb4 	.word	0x20007cb4
 80b8c60:	e000ef34 	.word	0xe000ef34

080b8c64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80b8c64:	b480      	push	{r7}
 80b8c66:	b083      	sub	sp, #12
 80b8c68:	af00      	add	r7, sp, #0
	__asm volatile
 80b8c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b8c6e:	f383 8811 	msr	BASEPRI, r3
 80b8c72:	f3bf 8f6f 	isb	sy
 80b8c76:	f3bf 8f4f 	dsb	sy
 80b8c7a:	607b      	str	r3, [r7, #4]
}
 80b8c7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80b8c7e:	4b0f      	ldr	r3, [pc, #60]	; (80b8cbc <vPortEnterCritical+0x58>)
 80b8c80:	681b      	ldr	r3, [r3, #0]
 80b8c82:	3301      	adds	r3, #1
 80b8c84:	4a0d      	ldr	r2, [pc, #52]	; (80b8cbc <vPortEnterCritical+0x58>)
 80b8c86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80b8c88:	4b0c      	ldr	r3, [pc, #48]	; (80b8cbc <vPortEnterCritical+0x58>)
 80b8c8a:	681b      	ldr	r3, [r3, #0]
 80b8c8c:	2b01      	cmp	r3, #1
 80b8c8e:	d10f      	bne.n	80b8cb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80b8c90:	4b0b      	ldr	r3, [pc, #44]	; (80b8cc0 <vPortEnterCritical+0x5c>)
 80b8c92:	681b      	ldr	r3, [r3, #0]
 80b8c94:	b2db      	uxtb	r3, r3
 80b8c96:	2b00      	cmp	r3, #0
 80b8c98:	d00a      	beq.n	80b8cb0 <vPortEnterCritical+0x4c>
	__asm volatile
 80b8c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b8c9e:	f383 8811 	msr	BASEPRI, r3
 80b8ca2:	f3bf 8f6f 	isb	sy
 80b8ca6:	f3bf 8f4f 	dsb	sy
 80b8caa:	603b      	str	r3, [r7, #0]
}
 80b8cac:	bf00      	nop
 80b8cae:	e7fe      	b.n	80b8cae <vPortEnterCritical+0x4a>
	}
}
 80b8cb0:	bf00      	nop
 80b8cb2:	370c      	adds	r7, #12
 80b8cb4:	46bd      	mov	sp, r7
 80b8cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b8cba:	4770      	bx	lr
 80b8cbc:	20007cb4 	.word	0x20007cb4
 80b8cc0:	e000ed04 	.word	0xe000ed04

080b8cc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80b8cc4:	b480      	push	{r7}
 80b8cc6:	b083      	sub	sp, #12
 80b8cc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80b8cca:	4b12      	ldr	r3, [pc, #72]	; (80b8d14 <vPortExitCritical+0x50>)
 80b8ccc:	681b      	ldr	r3, [r3, #0]
 80b8cce:	2b00      	cmp	r3, #0
 80b8cd0:	d10a      	bne.n	80b8ce8 <vPortExitCritical+0x24>
	__asm volatile
 80b8cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b8cd6:	f383 8811 	msr	BASEPRI, r3
 80b8cda:	f3bf 8f6f 	isb	sy
 80b8cde:	f3bf 8f4f 	dsb	sy
 80b8ce2:	607b      	str	r3, [r7, #4]
}
 80b8ce4:	bf00      	nop
 80b8ce6:	e7fe      	b.n	80b8ce6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80b8ce8:	4b0a      	ldr	r3, [pc, #40]	; (80b8d14 <vPortExitCritical+0x50>)
 80b8cea:	681b      	ldr	r3, [r3, #0]
 80b8cec:	3b01      	subs	r3, #1
 80b8cee:	4a09      	ldr	r2, [pc, #36]	; (80b8d14 <vPortExitCritical+0x50>)
 80b8cf0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80b8cf2:	4b08      	ldr	r3, [pc, #32]	; (80b8d14 <vPortExitCritical+0x50>)
 80b8cf4:	681b      	ldr	r3, [r3, #0]
 80b8cf6:	2b00      	cmp	r3, #0
 80b8cf8:	d105      	bne.n	80b8d06 <vPortExitCritical+0x42>
 80b8cfa:	2300      	movs	r3, #0
 80b8cfc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80b8cfe:	683b      	ldr	r3, [r7, #0]
 80b8d00:	f383 8811 	msr	BASEPRI, r3
}
 80b8d04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80b8d06:	bf00      	nop
 80b8d08:	370c      	adds	r7, #12
 80b8d0a:	46bd      	mov	sp, r7
 80b8d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b8d10:	4770      	bx	lr
 80b8d12:	bf00      	nop
 80b8d14:	20007cb4 	.word	0x20007cb4
	...

080b8d20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80b8d20:	f3ef 8009 	mrs	r0, PSP
 80b8d24:	f3bf 8f6f 	isb	sy
 80b8d28:	4b15      	ldr	r3, [pc, #84]	; (80b8d80 <pxCurrentTCBConst>)
 80b8d2a:	681a      	ldr	r2, [r3, #0]
 80b8d2c:	f01e 0f10 	tst.w	lr, #16
 80b8d30:	bf08      	it	eq
 80b8d32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80b8d36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80b8d3a:	6010      	str	r0, [r2, #0]
 80b8d3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80b8d40:	f04f 0050 	mov.w	r0, #80	; 0x50
 80b8d44:	f380 8811 	msr	BASEPRI, r0
 80b8d48:	f3bf 8f4f 	dsb	sy
 80b8d4c:	f3bf 8f6f 	isb	sy
 80b8d50:	f7fe fede 	bl	80b7b10 <vTaskSwitchContext>
 80b8d54:	f04f 0000 	mov.w	r0, #0
 80b8d58:	f380 8811 	msr	BASEPRI, r0
 80b8d5c:	bc09      	pop	{r0, r3}
 80b8d5e:	6819      	ldr	r1, [r3, #0]
 80b8d60:	6808      	ldr	r0, [r1, #0]
 80b8d62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80b8d66:	f01e 0f10 	tst.w	lr, #16
 80b8d6a:	bf08      	it	eq
 80b8d6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80b8d70:	f380 8809 	msr	PSP, r0
 80b8d74:	f3bf 8f6f 	isb	sy
 80b8d78:	4770      	bx	lr
 80b8d7a:	bf00      	nop
 80b8d7c:	f3af 8000 	nop.w

080b8d80 <pxCurrentTCBConst>:
 80b8d80:	20009718 	.word	0x20009718
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80b8d84:	bf00      	nop
 80b8d86:	bf00      	nop

080b8d88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80b8d88:	b580      	push	{r7, lr}
 80b8d8a:	b082      	sub	sp, #8
 80b8d8c:	af00      	add	r7, sp, #0
	__asm volatile
 80b8d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b8d92:	f383 8811 	msr	BASEPRI, r3
 80b8d96:	f3bf 8f6f 	isb	sy
 80b8d9a:	f3bf 8f4f 	dsb	sy
 80b8d9e:	607b      	str	r3, [r7, #4]
}
 80b8da0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80b8da2:	f7fe fdfb 	bl	80b799c <xTaskIncrementTick>
 80b8da6:	4603      	mov	r3, r0
 80b8da8:	2b00      	cmp	r3, #0
 80b8daa:	d003      	beq.n	80b8db4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80b8dac:	4b06      	ldr	r3, [pc, #24]	; (80b8dc8 <xPortSysTickHandler+0x40>)
 80b8dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80b8db2:	601a      	str	r2, [r3, #0]
 80b8db4:	2300      	movs	r3, #0
 80b8db6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80b8db8:	683b      	ldr	r3, [r7, #0]
 80b8dba:	f383 8811 	msr	BASEPRI, r3
}
 80b8dbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80b8dc0:	bf00      	nop
 80b8dc2:	3708      	adds	r7, #8
 80b8dc4:	46bd      	mov	sp, r7
 80b8dc6:	bd80      	pop	{r7, pc}
 80b8dc8:	e000ed04 	.word	0xe000ed04

080b8dcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80b8dcc:	b480      	push	{r7}
 80b8dce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80b8dd0:	4b0b      	ldr	r3, [pc, #44]	; (80b8e00 <vPortSetupTimerInterrupt+0x34>)
 80b8dd2:	2200      	movs	r2, #0
 80b8dd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80b8dd6:	4b0b      	ldr	r3, [pc, #44]	; (80b8e04 <vPortSetupTimerInterrupt+0x38>)
 80b8dd8:	2200      	movs	r2, #0
 80b8dda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80b8ddc:	4b0a      	ldr	r3, [pc, #40]	; (80b8e08 <vPortSetupTimerInterrupt+0x3c>)
 80b8dde:	681b      	ldr	r3, [r3, #0]
 80b8de0:	4a0a      	ldr	r2, [pc, #40]	; (80b8e0c <vPortSetupTimerInterrupt+0x40>)
 80b8de2:	fba2 2303 	umull	r2, r3, r2, r3
 80b8de6:	099b      	lsrs	r3, r3, #6
 80b8de8:	4a09      	ldr	r2, [pc, #36]	; (80b8e10 <vPortSetupTimerInterrupt+0x44>)
 80b8dea:	3b01      	subs	r3, #1
 80b8dec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80b8dee:	4b04      	ldr	r3, [pc, #16]	; (80b8e00 <vPortSetupTimerInterrupt+0x34>)
 80b8df0:	2207      	movs	r2, #7
 80b8df2:	601a      	str	r2, [r3, #0]
}
 80b8df4:	bf00      	nop
 80b8df6:	46bd      	mov	sp, r7
 80b8df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b8dfc:	4770      	bx	lr
 80b8dfe:	bf00      	nop
 80b8e00:	e000e010 	.word	0xe000e010
 80b8e04:	e000e018 	.word	0xe000e018
 80b8e08:	20007c54 	.word	0x20007c54
 80b8e0c:	10624dd3 	.word	0x10624dd3
 80b8e10:	e000e014 	.word	0xe000e014

080b8e14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80b8e14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80b8e24 <vPortEnableVFP+0x10>
 80b8e18:	6801      	ldr	r1, [r0, #0]
 80b8e1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80b8e1e:	6001      	str	r1, [r0, #0]
 80b8e20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80b8e22:	bf00      	nop
 80b8e24:	e000ed88 	.word	0xe000ed88

080b8e28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80b8e28:	b480      	push	{r7}
 80b8e2a:	b085      	sub	sp, #20
 80b8e2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80b8e2e:	f3ef 8305 	mrs	r3, IPSR
 80b8e32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80b8e34:	68fb      	ldr	r3, [r7, #12]
 80b8e36:	2b0f      	cmp	r3, #15
 80b8e38:	d914      	bls.n	80b8e64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80b8e3a:	4a17      	ldr	r2, [pc, #92]	; (80b8e98 <vPortValidateInterruptPriority+0x70>)
 80b8e3c:	68fb      	ldr	r3, [r7, #12]
 80b8e3e:	4413      	add	r3, r2
 80b8e40:	781b      	ldrb	r3, [r3, #0]
 80b8e42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80b8e44:	4b15      	ldr	r3, [pc, #84]	; (80b8e9c <vPortValidateInterruptPriority+0x74>)
 80b8e46:	781b      	ldrb	r3, [r3, #0]
 80b8e48:	7afa      	ldrb	r2, [r7, #11]
 80b8e4a:	429a      	cmp	r2, r3
 80b8e4c:	d20a      	bcs.n	80b8e64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80b8e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b8e52:	f383 8811 	msr	BASEPRI, r3
 80b8e56:	f3bf 8f6f 	isb	sy
 80b8e5a:	f3bf 8f4f 	dsb	sy
 80b8e5e:	607b      	str	r3, [r7, #4]
}
 80b8e60:	bf00      	nop
 80b8e62:	e7fe      	b.n	80b8e62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80b8e64:	4b0e      	ldr	r3, [pc, #56]	; (80b8ea0 <vPortValidateInterruptPriority+0x78>)
 80b8e66:	681b      	ldr	r3, [r3, #0]
 80b8e68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80b8e6c:	4b0d      	ldr	r3, [pc, #52]	; (80b8ea4 <vPortValidateInterruptPriority+0x7c>)
 80b8e6e:	681b      	ldr	r3, [r3, #0]
 80b8e70:	429a      	cmp	r2, r3
 80b8e72:	d90a      	bls.n	80b8e8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80b8e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b8e78:	f383 8811 	msr	BASEPRI, r3
 80b8e7c:	f3bf 8f6f 	isb	sy
 80b8e80:	f3bf 8f4f 	dsb	sy
 80b8e84:	603b      	str	r3, [r7, #0]
}
 80b8e86:	bf00      	nop
 80b8e88:	e7fe      	b.n	80b8e88 <vPortValidateInterruptPriority+0x60>
	}
 80b8e8a:	bf00      	nop
 80b8e8c:	3714      	adds	r7, #20
 80b8e8e:	46bd      	mov	sp, r7
 80b8e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b8e94:	4770      	bx	lr
 80b8e96:	bf00      	nop
 80b8e98:	e000e3f0 	.word	0xe000e3f0
 80b8e9c:	20009d44 	.word	0x20009d44
 80b8ea0:	e000ed0c 	.word	0xe000ed0c
 80b8ea4:	20009d48 	.word	0x20009d48

080b8ea8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80b8ea8:	b580      	push	{r7, lr}
 80b8eaa:	b08a      	sub	sp, #40	; 0x28
 80b8eac:	af00      	add	r7, sp, #0
 80b8eae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80b8eb0:	2300      	movs	r3, #0
 80b8eb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80b8eb4:	f7fe fca4 	bl	80b7800 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80b8eb8:	4b5b      	ldr	r3, [pc, #364]	; (80b9028 <pvPortMalloc+0x180>)
 80b8eba:	681b      	ldr	r3, [r3, #0]
 80b8ebc:	2b00      	cmp	r3, #0
 80b8ebe:	d101      	bne.n	80b8ec4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80b8ec0:	f000 f920 	bl	80b9104 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80b8ec4:	4b59      	ldr	r3, [pc, #356]	; (80b902c <pvPortMalloc+0x184>)
 80b8ec6:	681a      	ldr	r2, [r3, #0]
 80b8ec8:	687b      	ldr	r3, [r7, #4]
 80b8eca:	4013      	ands	r3, r2
 80b8ecc:	2b00      	cmp	r3, #0
 80b8ece:	f040 8093 	bne.w	80b8ff8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80b8ed2:	687b      	ldr	r3, [r7, #4]
 80b8ed4:	2b00      	cmp	r3, #0
 80b8ed6:	d01d      	beq.n	80b8f14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80b8ed8:	2208      	movs	r2, #8
 80b8eda:	687b      	ldr	r3, [r7, #4]
 80b8edc:	4413      	add	r3, r2
 80b8ede:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80b8ee0:	687b      	ldr	r3, [r7, #4]
 80b8ee2:	f003 0307 	and.w	r3, r3, #7
 80b8ee6:	2b00      	cmp	r3, #0
 80b8ee8:	d014      	beq.n	80b8f14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80b8eea:	687b      	ldr	r3, [r7, #4]
 80b8eec:	f023 0307 	bic.w	r3, r3, #7
 80b8ef0:	3308      	adds	r3, #8
 80b8ef2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80b8ef4:	687b      	ldr	r3, [r7, #4]
 80b8ef6:	f003 0307 	and.w	r3, r3, #7
 80b8efa:	2b00      	cmp	r3, #0
 80b8efc:	d00a      	beq.n	80b8f14 <pvPortMalloc+0x6c>
	__asm volatile
 80b8efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b8f02:	f383 8811 	msr	BASEPRI, r3
 80b8f06:	f3bf 8f6f 	isb	sy
 80b8f0a:	f3bf 8f4f 	dsb	sy
 80b8f0e:	617b      	str	r3, [r7, #20]
}
 80b8f10:	bf00      	nop
 80b8f12:	e7fe      	b.n	80b8f12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80b8f14:	687b      	ldr	r3, [r7, #4]
 80b8f16:	2b00      	cmp	r3, #0
 80b8f18:	d06e      	beq.n	80b8ff8 <pvPortMalloc+0x150>
 80b8f1a:	4b45      	ldr	r3, [pc, #276]	; (80b9030 <pvPortMalloc+0x188>)
 80b8f1c:	681b      	ldr	r3, [r3, #0]
 80b8f1e:	687a      	ldr	r2, [r7, #4]
 80b8f20:	429a      	cmp	r2, r3
 80b8f22:	d869      	bhi.n	80b8ff8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80b8f24:	4b43      	ldr	r3, [pc, #268]	; (80b9034 <pvPortMalloc+0x18c>)
 80b8f26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80b8f28:	4b42      	ldr	r3, [pc, #264]	; (80b9034 <pvPortMalloc+0x18c>)
 80b8f2a:	681b      	ldr	r3, [r3, #0]
 80b8f2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80b8f2e:	e004      	b.n	80b8f3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80b8f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b8f32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80b8f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b8f36:	681b      	ldr	r3, [r3, #0]
 80b8f38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80b8f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b8f3c:	685b      	ldr	r3, [r3, #4]
 80b8f3e:	687a      	ldr	r2, [r7, #4]
 80b8f40:	429a      	cmp	r2, r3
 80b8f42:	d903      	bls.n	80b8f4c <pvPortMalloc+0xa4>
 80b8f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b8f46:	681b      	ldr	r3, [r3, #0]
 80b8f48:	2b00      	cmp	r3, #0
 80b8f4a:	d1f1      	bne.n	80b8f30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80b8f4c:	4b36      	ldr	r3, [pc, #216]	; (80b9028 <pvPortMalloc+0x180>)
 80b8f4e:	681b      	ldr	r3, [r3, #0]
 80b8f50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80b8f52:	429a      	cmp	r2, r3
 80b8f54:	d050      	beq.n	80b8ff8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80b8f56:	6a3b      	ldr	r3, [r7, #32]
 80b8f58:	681b      	ldr	r3, [r3, #0]
 80b8f5a:	2208      	movs	r2, #8
 80b8f5c:	4413      	add	r3, r2
 80b8f5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80b8f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b8f62:	681a      	ldr	r2, [r3, #0]
 80b8f64:	6a3b      	ldr	r3, [r7, #32]
 80b8f66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80b8f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b8f6a:	685a      	ldr	r2, [r3, #4]
 80b8f6c:	687b      	ldr	r3, [r7, #4]
 80b8f6e:	1ad2      	subs	r2, r2, r3
 80b8f70:	2308      	movs	r3, #8
 80b8f72:	005b      	lsls	r3, r3, #1
 80b8f74:	429a      	cmp	r2, r3
 80b8f76:	d91f      	bls.n	80b8fb8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80b8f78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80b8f7a:	687b      	ldr	r3, [r7, #4]
 80b8f7c:	4413      	add	r3, r2
 80b8f7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80b8f80:	69bb      	ldr	r3, [r7, #24]
 80b8f82:	f003 0307 	and.w	r3, r3, #7
 80b8f86:	2b00      	cmp	r3, #0
 80b8f88:	d00a      	beq.n	80b8fa0 <pvPortMalloc+0xf8>
	__asm volatile
 80b8f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b8f8e:	f383 8811 	msr	BASEPRI, r3
 80b8f92:	f3bf 8f6f 	isb	sy
 80b8f96:	f3bf 8f4f 	dsb	sy
 80b8f9a:	613b      	str	r3, [r7, #16]
}
 80b8f9c:	bf00      	nop
 80b8f9e:	e7fe      	b.n	80b8f9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80b8fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b8fa2:	685a      	ldr	r2, [r3, #4]
 80b8fa4:	687b      	ldr	r3, [r7, #4]
 80b8fa6:	1ad2      	subs	r2, r2, r3
 80b8fa8:	69bb      	ldr	r3, [r7, #24]
 80b8faa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80b8fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b8fae:	687a      	ldr	r2, [r7, #4]
 80b8fb0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80b8fb2:	69b8      	ldr	r0, [r7, #24]
 80b8fb4:	f000 f908 	bl	80b91c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80b8fb8:	4b1d      	ldr	r3, [pc, #116]	; (80b9030 <pvPortMalloc+0x188>)
 80b8fba:	681a      	ldr	r2, [r3, #0]
 80b8fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b8fbe:	685b      	ldr	r3, [r3, #4]
 80b8fc0:	1ad3      	subs	r3, r2, r3
 80b8fc2:	4a1b      	ldr	r2, [pc, #108]	; (80b9030 <pvPortMalloc+0x188>)
 80b8fc4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80b8fc6:	4b1a      	ldr	r3, [pc, #104]	; (80b9030 <pvPortMalloc+0x188>)
 80b8fc8:	681a      	ldr	r2, [r3, #0]
 80b8fca:	4b1b      	ldr	r3, [pc, #108]	; (80b9038 <pvPortMalloc+0x190>)
 80b8fcc:	681b      	ldr	r3, [r3, #0]
 80b8fce:	429a      	cmp	r2, r3
 80b8fd0:	d203      	bcs.n	80b8fda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80b8fd2:	4b17      	ldr	r3, [pc, #92]	; (80b9030 <pvPortMalloc+0x188>)
 80b8fd4:	681b      	ldr	r3, [r3, #0]
 80b8fd6:	4a18      	ldr	r2, [pc, #96]	; (80b9038 <pvPortMalloc+0x190>)
 80b8fd8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80b8fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b8fdc:	685a      	ldr	r2, [r3, #4]
 80b8fde:	4b13      	ldr	r3, [pc, #76]	; (80b902c <pvPortMalloc+0x184>)
 80b8fe0:	681b      	ldr	r3, [r3, #0]
 80b8fe2:	431a      	orrs	r2, r3
 80b8fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b8fe6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80b8fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80b8fea:	2200      	movs	r2, #0
 80b8fec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80b8fee:	4b13      	ldr	r3, [pc, #76]	; (80b903c <pvPortMalloc+0x194>)
 80b8ff0:	681b      	ldr	r3, [r3, #0]
 80b8ff2:	3301      	adds	r3, #1
 80b8ff4:	4a11      	ldr	r2, [pc, #68]	; (80b903c <pvPortMalloc+0x194>)
 80b8ff6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80b8ff8:	f7fe fc10 	bl	80b781c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80b8ffc:	69fb      	ldr	r3, [r7, #28]
 80b8ffe:	f003 0307 	and.w	r3, r3, #7
 80b9002:	2b00      	cmp	r3, #0
 80b9004:	d00a      	beq.n	80b901c <pvPortMalloc+0x174>
	__asm volatile
 80b9006:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b900a:	f383 8811 	msr	BASEPRI, r3
 80b900e:	f3bf 8f6f 	isb	sy
 80b9012:	f3bf 8f4f 	dsb	sy
 80b9016:	60fb      	str	r3, [r7, #12]
}
 80b9018:	bf00      	nop
 80b901a:	e7fe      	b.n	80b901a <pvPortMalloc+0x172>
	return pvReturn;
 80b901c:	69fb      	ldr	r3, [r7, #28]
}
 80b901e:	4618      	mov	r0, r3
 80b9020:	3728      	adds	r7, #40	; 0x28
 80b9022:	46bd      	mov	sp, r7
 80b9024:	bd80      	pop	{r7, pc}
 80b9026:	bf00      	nop
 80b9028:	2001b554 	.word	0x2001b554
 80b902c:	2001b568 	.word	0x2001b568
 80b9030:	2001b558 	.word	0x2001b558
 80b9034:	2001b54c 	.word	0x2001b54c
 80b9038:	2001b55c 	.word	0x2001b55c
 80b903c:	2001b560 	.word	0x2001b560

080b9040 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80b9040:	b580      	push	{r7, lr}
 80b9042:	b086      	sub	sp, #24
 80b9044:	af00      	add	r7, sp, #0
 80b9046:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80b9048:	687b      	ldr	r3, [r7, #4]
 80b904a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80b904c:	687b      	ldr	r3, [r7, #4]
 80b904e:	2b00      	cmp	r3, #0
 80b9050:	d04d      	beq.n	80b90ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80b9052:	2308      	movs	r3, #8
 80b9054:	425b      	negs	r3, r3
 80b9056:	697a      	ldr	r2, [r7, #20]
 80b9058:	4413      	add	r3, r2
 80b905a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80b905c:	697b      	ldr	r3, [r7, #20]
 80b905e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80b9060:	693b      	ldr	r3, [r7, #16]
 80b9062:	685a      	ldr	r2, [r3, #4]
 80b9064:	4b24      	ldr	r3, [pc, #144]	; (80b90f8 <vPortFree+0xb8>)
 80b9066:	681b      	ldr	r3, [r3, #0]
 80b9068:	4013      	ands	r3, r2
 80b906a:	2b00      	cmp	r3, #0
 80b906c:	d10a      	bne.n	80b9084 <vPortFree+0x44>
	__asm volatile
 80b906e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b9072:	f383 8811 	msr	BASEPRI, r3
 80b9076:	f3bf 8f6f 	isb	sy
 80b907a:	f3bf 8f4f 	dsb	sy
 80b907e:	60fb      	str	r3, [r7, #12]
}
 80b9080:	bf00      	nop
 80b9082:	e7fe      	b.n	80b9082 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80b9084:	693b      	ldr	r3, [r7, #16]
 80b9086:	681b      	ldr	r3, [r3, #0]
 80b9088:	2b00      	cmp	r3, #0
 80b908a:	d00a      	beq.n	80b90a2 <vPortFree+0x62>
	__asm volatile
 80b908c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80b9090:	f383 8811 	msr	BASEPRI, r3
 80b9094:	f3bf 8f6f 	isb	sy
 80b9098:	f3bf 8f4f 	dsb	sy
 80b909c:	60bb      	str	r3, [r7, #8]
}
 80b909e:	bf00      	nop
 80b90a0:	e7fe      	b.n	80b90a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80b90a2:	693b      	ldr	r3, [r7, #16]
 80b90a4:	685a      	ldr	r2, [r3, #4]
 80b90a6:	4b14      	ldr	r3, [pc, #80]	; (80b90f8 <vPortFree+0xb8>)
 80b90a8:	681b      	ldr	r3, [r3, #0]
 80b90aa:	4013      	ands	r3, r2
 80b90ac:	2b00      	cmp	r3, #0
 80b90ae:	d01e      	beq.n	80b90ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80b90b0:	693b      	ldr	r3, [r7, #16]
 80b90b2:	681b      	ldr	r3, [r3, #0]
 80b90b4:	2b00      	cmp	r3, #0
 80b90b6:	d11a      	bne.n	80b90ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80b90b8:	693b      	ldr	r3, [r7, #16]
 80b90ba:	685a      	ldr	r2, [r3, #4]
 80b90bc:	4b0e      	ldr	r3, [pc, #56]	; (80b90f8 <vPortFree+0xb8>)
 80b90be:	681b      	ldr	r3, [r3, #0]
 80b90c0:	43db      	mvns	r3, r3
 80b90c2:	401a      	ands	r2, r3
 80b90c4:	693b      	ldr	r3, [r7, #16]
 80b90c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80b90c8:	f7fe fb9a 	bl	80b7800 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80b90cc:	693b      	ldr	r3, [r7, #16]
 80b90ce:	685a      	ldr	r2, [r3, #4]
 80b90d0:	4b0a      	ldr	r3, [pc, #40]	; (80b90fc <vPortFree+0xbc>)
 80b90d2:	681b      	ldr	r3, [r3, #0]
 80b90d4:	4413      	add	r3, r2
 80b90d6:	4a09      	ldr	r2, [pc, #36]	; (80b90fc <vPortFree+0xbc>)
 80b90d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80b90da:	6938      	ldr	r0, [r7, #16]
 80b90dc:	f000 f874 	bl	80b91c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80b90e0:	4b07      	ldr	r3, [pc, #28]	; (80b9100 <vPortFree+0xc0>)
 80b90e2:	681b      	ldr	r3, [r3, #0]
 80b90e4:	3301      	adds	r3, #1
 80b90e6:	4a06      	ldr	r2, [pc, #24]	; (80b9100 <vPortFree+0xc0>)
 80b90e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80b90ea:	f7fe fb97 	bl	80b781c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80b90ee:	bf00      	nop
 80b90f0:	3718      	adds	r7, #24
 80b90f2:	46bd      	mov	sp, r7
 80b90f4:	bd80      	pop	{r7, pc}
 80b90f6:	bf00      	nop
 80b90f8:	2001b568 	.word	0x2001b568
 80b90fc:	2001b558 	.word	0x2001b558
 80b9100:	2001b564 	.word	0x2001b564

080b9104 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80b9104:	b480      	push	{r7}
 80b9106:	b085      	sub	sp, #20
 80b9108:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80b910a:	f44f 338c 	mov.w	r3, #71680	; 0x11800
 80b910e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80b9110:	4b27      	ldr	r3, [pc, #156]	; (80b91b0 <prvHeapInit+0xac>)
 80b9112:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80b9114:	68fb      	ldr	r3, [r7, #12]
 80b9116:	f003 0307 	and.w	r3, r3, #7
 80b911a:	2b00      	cmp	r3, #0
 80b911c:	d00c      	beq.n	80b9138 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80b911e:	68fb      	ldr	r3, [r7, #12]
 80b9120:	3307      	adds	r3, #7
 80b9122:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80b9124:	68fb      	ldr	r3, [r7, #12]
 80b9126:	f023 0307 	bic.w	r3, r3, #7
 80b912a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80b912c:	68ba      	ldr	r2, [r7, #8]
 80b912e:	68fb      	ldr	r3, [r7, #12]
 80b9130:	1ad3      	subs	r3, r2, r3
 80b9132:	4a1f      	ldr	r2, [pc, #124]	; (80b91b0 <prvHeapInit+0xac>)
 80b9134:	4413      	add	r3, r2
 80b9136:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80b9138:	68fb      	ldr	r3, [r7, #12]
 80b913a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80b913c:	4a1d      	ldr	r2, [pc, #116]	; (80b91b4 <prvHeapInit+0xb0>)
 80b913e:	687b      	ldr	r3, [r7, #4]
 80b9140:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80b9142:	4b1c      	ldr	r3, [pc, #112]	; (80b91b4 <prvHeapInit+0xb0>)
 80b9144:	2200      	movs	r2, #0
 80b9146:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80b9148:	687b      	ldr	r3, [r7, #4]
 80b914a:	68ba      	ldr	r2, [r7, #8]
 80b914c:	4413      	add	r3, r2
 80b914e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80b9150:	2208      	movs	r2, #8
 80b9152:	68fb      	ldr	r3, [r7, #12]
 80b9154:	1a9b      	subs	r3, r3, r2
 80b9156:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80b9158:	68fb      	ldr	r3, [r7, #12]
 80b915a:	f023 0307 	bic.w	r3, r3, #7
 80b915e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80b9160:	68fb      	ldr	r3, [r7, #12]
 80b9162:	4a15      	ldr	r2, [pc, #84]	; (80b91b8 <prvHeapInit+0xb4>)
 80b9164:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80b9166:	4b14      	ldr	r3, [pc, #80]	; (80b91b8 <prvHeapInit+0xb4>)
 80b9168:	681b      	ldr	r3, [r3, #0]
 80b916a:	2200      	movs	r2, #0
 80b916c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80b916e:	4b12      	ldr	r3, [pc, #72]	; (80b91b8 <prvHeapInit+0xb4>)
 80b9170:	681b      	ldr	r3, [r3, #0]
 80b9172:	2200      	movs	r2, #0
 80b9174:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80b9176:	687b      	ldr	r3, [r7, #4]
 80b9178:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80b917a:	683b      	ldr	r3, [r7, #0]
 80b917c:	68fa      	ldr	r2, [r7, #12]
 80b917e:	1ad2      	subs	r2, r2, r3
 80b9180:	683b      	ldr	r3, [r7, #0]
 80b9182:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80b9184:	4b0c      	ldr	r3, [pc, #48]	; (80b91b8 <prvHeapInit+0xb4>)
 80b9186:	681a      	ldr	r2, [r3, #0]
 80b9188:	683b      	ldr	r3, [r7, #0]
 80b918a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80b918c:	683b      	ldr	r3, [r7, #0]
 80b918e:	685b      	ldr	r3, [r3, #4]
 80b9190:	4a0a      	ldr	r2, [pc, #40]	; (80b91bc <prvHeapInit+0xb8>)
 80b9192:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80b9194:	683b      	ldr	r3, [r7, #0]
 80b9196:	685b      	ldr	r3, [r3, #4]
 80b9198:	4a09      	ldr	r2, [pc, #36]	; (80b91c0 <prvHeapInit+0xbc>)
 80b919a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80b919c:	4b09      	ldr	r3, [pc, #36]	; (80b91c4 <prvHeapInit+0xc0>)
 80b919e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80b91a2:	601a      	str	r2, [r3, #0]
}
 80b91a4:	bf00      	nop
 80b91a6:	3714      	adds	r7, #20
 80b91a8:	46bd      	mov	sp, r7
 80b91aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b91ae:	4770      	bx	lr
 80b91b0:	20009d4c 	.word	0x20009d4c
 80b91b4:	2001b54c 	.word	0x2001b54c
 80b91b8:	2001b554 	.word	0x2001b554
 80b91bc:	2001b55c 	.word	0x2001b55c
 80b91c0:	2001b558 	.word	0x2001b558
 80b91c4:	2001b568 	.word	0x2001b568

080b91c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80b91c8:	b480      	push	{r7}
 80b91ca:	b085      	sub	sp, #20
 80b91cc:	af00      	add	r7, sp, #0
 80b91ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80b91d0:	4b28      	ldr	r3, [pc, #160]	; (80b9274 <prvInsertBlockIntoFreeList+0xac>)
 80b91d2:	60fb      	str	r3, [r7, #12]
 80b91d4:	e002      	b.n	80b91dc <prvInsertBlockIntoFreeList+0x14>
 80b91d6:	68fb      	ldr	r3, [r7, #12]
 80b91d8:	681b      	ldr	r3, [r3, #0]
 80b91da:	60fb      	str	r3, [r7, #12]
 80b91dc:	68fb      	ldr	r3, [r7, #12]
 80b91de:	681b      	ldr	r3, [r3, #0]
 80b91e0:	687a      	ldr	r2, [r7, #4]
 80b91e2:	429a      	cmp	r2, r3
 80b91e4:	d8f7      	bhi.n	80b91d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80b91e6:	68fb      	ldr	r3, [r7, #12]
 80b91e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80b91ea:	68fb      	ldr	r3, [r7, #12]
 80b91ec:	685b      	ldr	r3, [r3, #4]
 80b91ee:	68ba      	ldr	r2, [r7, #8]
 80b91f0:	4413      	add	r3, r2
 80b91f2:	687a      	ldr	r2, [r7, #4]
 80b91f4:	429a      	cmp	r2, r3
 80b91f6:	d108      	bne.n	80b920a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80b91f8:	68fb      	ldr	r3, [r7, #12]
 80b91fa:	685a      	ldr	r2, [r3, #4]
 80b91fc:	687b      	ldr	r3, [r7, #4]
 80b91fe:	685b      	ldr	r3, [r3, #4]
 80b9200:	441a      	add	r2, r3
 80b9202:	68fb      	ldr	r3, [r7, #12]
 80b9204:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80b9206:	68fb      	ldr	r3, [r7, #12]
 80b9208:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80b920a:	687b      	ldr	r3, [r7, #4]
 80b920c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80b920e:	687b      	ldr	r3, [r7, #4]
 80b9210:	685b      	ldr	r3, [r3, #4]
 80b9212:	68ba      	ldr	r2, [r7, #8]
 80b9214:	441a      	add	r2, r3
 80b9216:	68fb      	ldr	r3, [r7, #12]
 80b9218:	681b      	ldr	r3, [r3, #0]
 80b921a:	429a      	cmp	r2, r3
 80b921c:	d118      	bne.n	80b9250 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80b921e:	68fb      	ldr	r3, [r7, #12]
 80b9220:	681a      	ldr	r2, [r3, #0]
 80b9222:	4b15      	ldr	r3, [pc, #84]	; (80b9278 <prvInsertBlockIntoFreeList+0xb0>)
 80b9224:	681b      	ldr	r3, [r3, #0]
 80b9226:	429a      	cmp	r2, r3
 80b9228:	d00d      	beq.n	80b9246 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80b922a:	687b      	ldr	r3, [r7, #4]
 80b922c:	685a      	ldr	r2, [r3, #4]
 80b922e:	68fb      	ldr	r3, [r7, #12]
 80b9230:	681b      	ldr	r3, [r3, #0]
 80b9232:	685b      	ldr	r3, [r3, #4]
 80b9234:	441a      	add	r2, r3
 80b9236:	687b      	ldr	r3, [r7, #4]
 80b9238:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80b923a:	68fb      	ldr	r3, [r7, #12]
 80b923c:	681b      	ldr	r3, [r3, #0]
 80b923e:	681a      	ldr	r2, [r3, #0]
 80b9240:	687b      	ldr	r3, [r7, #4]
 80b9242:	601a      	str	r2, [r3, #0]
 80b9244:	e008      	b.n	80b9258 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80b9246:	4b0c      	ldr	r3, [pc, #48]	; (80b9278 <prvInsertBlockIntoFreeList+0xb0>)
 80b9248:	681a      	ldr	r2, [r3, #0]
 80b924a:	687b      	ldr	r3, [r7, #4]
 80b924c:	601a      	str	r2, [r3, #0]
 80b924e:	e003      	b.n	80b9258 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80b9250:	68fb      	ldr	r3, [r7, #12]
 80b9252:	681a      	ldr	r2, [r3, #0]
 80b9254:	687b      	ldr	r3, [r7, #4]
 80b9256:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80b9258:	68fa      	ldr	r2, [r7, #12]
 80b925a:	687b      	ldr	r3, [r7, #4]
 80b925c:	429a      	cmp	r2, r3
 80b925e:	d002      	beq.n	80b9266 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80b9260:	68fb      	ldr	r3, [r7, #12]
 80b9262:	687a      	ldr	r2, [r7, #4]
 80b9264:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80b9266:	bf00      	nop
 80b9268:	3714      	adds	r7, #20
 80b926a:	46bd      	mov	sp, r7
 80b926c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b9270:	4770      	bx	lr
 80b9272:	bf00      	nop
 80b9274:	2001b54c 	.word	0x2001b54c
 80b9278:	2001b554 	.word	0x2001b554

080b927c <ch201_gprmt_init>:
#include "ch_common.h"

uint8_t ch201_gprmt_init(ch_dev_t * dev_ptr, ch_group_t * grp_ptr,
                         uint8_t i2c_addr, uint8_t io_index,
                         uint8_t i2c_bus_index)
{
 80b927c:	b580      	push	{r7, lr}
 80b927e:	b084      	sub	sp, #16
 80b9280:	af00      	add	r7, sp, #0
 80b9282:	60f8      	str	r0, [r7, #12]
 80b9284:	60b9      	str	r1, [r7, #8]
 80b9286:	4611      	mov	r1, r2
 80b9288:	461a      	mov	r2, r3
 80b928a:	460b      	mov	r3, r1
 80b928c:	71fb      	strb	r3, [r7, #7]
 80b928e:	4613      	mov	r3, r2
 80b9290:	71bb      	strb	r3, [r7, #6]

  dev_ptr->part_number = CH201_PART_NUMBER;
 80b9292:	68fb      	ldr	r3, [r7, #12]
 80b9294:	22c9      	movs	r2, #201	; 0xc9
 80b9296:	839a      	strh	r2, [r3, #28]
  dev_ptr->app_i2c_address = i2c_addr;
 80b9298:	68fb      	ldr	r3, [r7, #12]
 80b929a:	79fa      	ldrb	r2, [r7, #7]
 80b929c:	765a      	strb	r2, [r3, #25]
  dev_ptr->io_index = io_index;
 80b929e:	68fb      	ldr	r3, [r7, #12]
 80b92a0:	79ba      	ldrb	r2, [r7, #6]
 80b92a2:	f883 2020 	strb.w	r2, [r3, #32]
  dev_ptr->i2c_bus_index = i2c_bus_index;
 80b92a6:	68fb      	ldr	r3, [r7, #12]
 80b92a8:	7e3a      	ldrb	r2, [r7, #24]
 80b92aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Init firmware-specific function pointers */
  dev_ptr->firmware = ch201_gprmt_fw;
 80b92ae:	68fb      	ldr	r3, [r7, #12]
 80b92b0:	4a32      	ldr	r2, [pc, #200]	; (80b937c <ch201_gprmt_init+0x100>)
 80b92b2:	631a      	str	r2, [r3, #48]	; 0x30
  dev_ptr->fw_version_string = ch201_gprmt_version;
 80b92b4:	4b32      	ldr	r3, [pc, #200]	; (80b9380 <ch201_gprmt_init+0x104>)
 80b92b6:	681a      	ldr	r2, [r3, #0]
 80b92b8:	68fb      	ldr	r3, [r7, #12]
 80b92ba:	62da      	str	r2, [r3, #44]	; 0x2c
  dev_ptr->ram_init = get_ram_ch201_gprmt_init_ptr();
 80b92bc:	f000 f89c 	bl	80b93f8 <get_ram_ch201_gprmt_init_ptr>
 80b92c0:	4602      	mov	r2, r0
 80b92c2:	68fb      	ldr	r3, [r7, #12]
 80b92c4:	635a      	str	r2, [r3, #52]	; 0x34
  dev_ptr->get_fw_ram_init_size = get_ch201_gprmt_fw_ram_init_size;
 80b92c6:	68fb      	ldr	r3, [r7, #12]
 80b92c8:	4a2e      	ldr	r2, [pc, #184]	; (80b9384 <ch201_gprmt_init+0x108>)
 80b92ca:	651a      	str	r2, [r3, #80]	; 0x50
  dev_ptr->get_fw_ram_init_addr = get_ch201_gprmt_fw_ram_init_addr;
 80b92cc:	68fb      	ldr	r3, [r7, #12]
 80b92ce:	4a2e      	ldr	r2, [pc, #184]	; (80b9388 <ch201_gprmt_init+0x10c>)
 80b92d0:	655a      	str	r2, [r3, #84]	; 0x54

  dev_ptr->prepare_pulse_timer = ch_common_prepare_pulse_timer;
 80b92d2:	68fb      	ldr	r3, [r7, #12]
 80b92d4:	4a2d      	ldr	r2, [pc, #180]	; (80b938c <ch201_gprmt_init+0x110>)
 80b92d6:	639a      	str	r2, [r3, #56]	; 0x38
  dev_ptr->store_pt_result = ch_common_store_pt_result;
 80b92d8:	68fb      	ldr	r3, [r7, #12]
 80b92da:	4a2d      	ldr	r2, [pc, #180]	; (80b9390 <ch201_gprmt_init+0x114>)
 80b92dc:	63da      	str	r2, [r3, #60]	; 0x3c
  dev_ptr->store_op_freq = ch_common_store_op_freq;
 80b92de:	68fb      	ldr	r3, [r7, #12]
 80b92e0:	4a2c      	ldr	r2, [pc, #176]	; (80b9394 <ch201_gprmt_init+0x118>)
 80b92e2:	641a      	str	r2, [r3, #64]	; 0x40
  dev_ptr->store_bandwidth = ch_common_store_bandwidth;
 80b92e4:	68fb      	ldr	r3, [r7, #12]
 80b92e6:	4a2c      	ldr	r2, [pc, #176]	; (80b9398 <ch201_gprmt_init+0x11c>)
 80b92e8:	645a      	str	r2, [r3, #68]	; 0x44
  dev_ptr->store_scalefactor = ch_common_store_scale_factor;
 80b92ea:	68fb      	ldr	r3, [r7, #12]
 80b92ec:	4a2b      	ldr	r2, [pc, #172]	; (80b939c <ch201_gprmt_init+0x120>)
 80b92ee:	649a      	str	r2, [r3, #72]	; 0x48
  dev_ptr->get_locked_state = ch_common_get_locked_state;
 80b92f0:	68fb      	ldr	r3, [r7, #12]
 80b92f2:	4a2b      	ldr	r2, [pc, #172]	; (80b93a0 <ch201_gprmt_init+0x124>)
 80b92f4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Init API function pointers */
  dev_ptr->api_funcs.fw_load = ch_common_fw_load;
 80b92f6:	68fb      	ldr	r3, [r7, #12]
 80b92f8:	4a2a      	ldr	r2, [pc, #168]	; (80b93a4 <ch201_gprmt_init+0x128>)
 80b92fa:	659a      	str	r2, [r3, #88]	; 0x58
  dev_ptr->api_funcs.set_mode = ch_common_set_mode;
 80b92fc:	68fb      	ldr	r3, [r7, #12]
 80b92fe:	4a2a      	ldr	r2, [pc, #168]	; (80b93a8 <ch201_gprmt_init+0x12c>)
 80b9300:	65da      	str	r2, [r3, #92]	; 0x5c
  dev_ptr->api_funcs.set_sample_interval = ch_common_set_sample_interval;
 80b9302:	68fb      	ldr	r3, [r7, #12]
 80b9304:	4a29      	ldr	r2, [pc, #164]	; (80b93ac <ch201_gprmt_init+0x130>)
 80b9306:	661a      	str	r2, [r3, #96]	; 0x60
  dev_ptr->api_funcs.set_num_samples = ch_common_set_num_samples;
 80b9308:	68fb      	ldr	r3, [r7, #12]
 80b930a:	4a29      	ldr	r2, [pc, #164]	; (80b93b0 <ch201_gprmt_init+0x134>)
 80b930c:	665a      	str	r2, [r3, #100]	; 0x64
  dev_ptr->api_funcs.set_max_range = ch_common_set_max_range;
 80b930e:	68fb      	ldr	r3, [r7, #12]
 80b9310:	4a28      	ldr	r2, [pc, #160]	; (80b93b4 <ch201_gprmt_init+0x138>)
 80b9312:	669a      	str	r2, [r3, #104]	; 0x68
  dev_ptr->api_funcs.set_static_range = NULL;   // not supported
 80b9314:	68fb      	ldr	r3, [r7, #12]
 80b9316:	2200      	movs	r2, #0
 80b9318:	671a      	str	r2, [r3, #112]	; 0x70
  dev_ptr->api_funcs.get_range = ch_common_get_range;
 80b931a:	68fb      	ldr	r3, [r7, #12]
 80b931c:	4a26      	ldr	r2, [pc, #152]	; (80b93b8 <ch201_gprmt_init+0x13c>)
 80b931e:	675a      	str	r2, [r3, #116]	; 0x74
  dev_ptr->api_funcs.get_amplitude = ch_common_get_amplitude;
 80b9320:	68fb      	ldr	r3, [r7, #12]
 80b9322:	4a26      	ldr	r2, [pc, #152]	; (80b93bc <ch201_gprmt_init+0x140>)
 80b9324:	679a      	str	r2, [r3, #120]	; 0x78
  dev_ptr->api_funcs.get_iq_data = ch_common_get_iq_data;
 80b9326:	68fb      	ldr	r3, [r7, #12]
 80b9328:	4a25      	ldr	r2, [pc, #148]	; (80b93c0 <ch201_gprmt_init+0x144>)
 80b932a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  dev_ptr->api_funcs.samples_to_mm = ch_common_samples_to_mm;
 80b932e:	68fb      	ldr	r3, [r7, #12]
 80b9330:	4a24      	ldr	r2, [pc, #144]	; (80b93c4 <ch201_gprmt_init+0x148>)
 80b9332:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  dev_ptr->api_funcs.mm_to_samples = ch_common_mm_to_samples;
 80b9336:	68fb      	ldr	r3, [r7, #12]
 80b9338:	4a23      	ldr	r2, [pc, #140]	; (80b93c8 <ch201_gprmt_init+0x14c>)
 80b933a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  dev_ptr->api_funcs.set_thresholds = ch_common_set_thresholds;
 80b933e:	68fb      	ldr	r3, [r7, #12]
 80b9340:	4a22      	ldr	r2, [pc, #136]	; (80b93cc <ch201_gprmt_init+0x150>)
 80b9342:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  dev_ptr->api_funcs.get_thresholds = ch_common_get_thresholds;
 80b9346:	68fb      	ldr	r3, [r7, #12]
 80b9348:	4a21      	ldr	r2, [pc, #132]	; (80b93d0 <ch201_gprmt_init+0x154>)
 80b934a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Init max sample count */
  dev_ptr->max_samples = CH201_GPRMT_MAX_SAMPLES;
 80b934e:	68fb      	ldr	r3, [r7, #12]
 80b9350:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 80b9354:	845a      	strh	r2, [r3, #34]	; 0x22

  /* This firmware does not use oversampling */
  dev_ptr->oversample = 0;
 80b9356:	68fb      	ldr	r3, [r7, #12]
 80b9358:	2200      	movs	r2, #0
 80b935a:	779a      	strb	r2, [r3, #30]

  /* Init device and group descriptor linkage */
  dev_ptr->group = grp_ptr;     // set parent group pointer
 80b935c:	68fb      	ldr	r3, [r7, #12]
 80b935e:	68ba      	ldr	r2, [r7, #8]
 80b9360:	601a      	str	r2, [r3, #0]
  grp_ptr->device[io_index] = dev_ptr;  // add to parent group
 80b9362:	79bb      	ldrb	r3, [r7, #6]
 80b9364:	68ba      	ldr	r2, [r7, #8]
 80b9366:	3304      	adds	r3, #4
 80b9368:	009b      	lsls	r3, r3, #2
 80b936a:	4413      	add	r3, r2
 80b936c:	68fa      	ldr	r2, [r7, #12]
 80b936e:	605a      	str	r2, [r3, #4]

  return 0;
 80b9370:	2300      	movs	r3, #0
}
 80b9372:	4618      	mov	r0, r3
 80b9374:	3710      	adds	r7, #16
 80b9376:	46bd      	mov	sp, r7
 80b9378:	bd80      	pop	{r7, pc}
 80b937a:	bf00      	nop
 80b937c:	080dcaac 	.word	0x080dcaac
 80b9380:	20007cb8 	.word	0x20007cb8
 80b9384:	080b93e7 	.word	0x080b93e7
 80b9388:	080b93d5 	.word	0x080b93d5
 80b938c:	080b9e59 	.word	0x080b9e59
 80b9390:	080b9e89 	.word	0x080b9e89
 80b9394:	080b9ec1 	.word	0x080b9ec1
 80b9398:	080b9f31 	.word	0x080b9f31
 80b939c:	080b9f45 	.word	0x080b9f45
 80b93a0:	080b9dfd 	.word	0x080b9dfd
 80b93a4:	080b99d3 	.word	0x080b99d3
 80b93a8:	080b990d 	.word	0x080b990d
 80b93ac:	080b9a1d 	.word	0x080b9a1d
 80b93b0:	080b9acb 	.word	0x080b9acb
 80b93b4:	080b9b33 	.word	0x080b9b33
 80b93b8:	080b9ced 	.word	0x080b9ced
 80b93bc:	080b9dbd 	.word	0x080b9dbd
 80b93c0:	080ba199 	.word	0x080ba199
 80b93c4:	080b9c9d 	.word	0x080b9c9d
 80b93c8:	080b9bb3 	.word	0x080b9bb3
 80b93cc:	080b9f8f 	.word	0x080b9f8f
 80b93d0:	080ba09b 	.word	0x080ba09b

080b93d4 <get_ch201_gprmt_fw_ram_init_addr>:
#define RAM_INIT_ADDRESS 2410

#define RAM_INIT_WRITE_SIZE   28

uint16_t get_ch201_gprmt_fw_ram_init_addr(void)
{
 80b93d4:	b480      	push	{r7}
 80b93d6:	af00      	add	r7, sp, #0
  return (uint16_t) RAM_INIT_ADDRESS;
 80b93d8:	f640 136a 	movw	r3, #2410	; 0x96a
}
 80b93dc:	4618      	mov	r0, r3
 80b93de:	46bd      	mov	sp, r7
 80b93e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b93e4:	4770      	bx	lr

080b93e6 <get_ch201_gprmt_fw_ram_init_size>:

uint16_t get_ch201_gprmt_fw_ram_init_size(void)
{
 80b93e6:	b480      	push	{r7}
 80b93e8:	af00      	add	r7, sp, #0
  return (uint16_t) RAM_INIT_WRITE_SIZE;
 80b93ea:	231c      	movs	r3, #28
}
 80b93ec:	4618      	mov	r0, r3
 80b93ee:	46bd      	mov	sp, r7
 80b93f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b93f4:	4770      	bx	lr
	...

080b93f8 <get_ram_ch201_gprmt_init_ptr>:
      0x00, 0x00, 0x00,
  0x00, 0xFA, 0x00, 0x00, 0x64, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x00,
};

const unsigned char *get_ram_ch201_gprmt_init_ptr(void)
{
 80b93f8:	b480      	push	{r7}
 80b93fa:	af00      	add	r7, sp, #0
  return &ram_ch201_gprmt_init[0];
 80b93fc:	4b02      	ldr	r3, [pc, #8]	; (80b9408 <get_ram_ch201_gprmt_init_ptr+0x10>)
}
 80b93fe:	4618      	mov	r0, r3
 80b9400:	46bd      	mov	sp, r7
 80b9402:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b9406:	4770      	bx	lr
 80b9408:	080dca90 	.word	0x080dca90

080b940c <ch_init>:
 *
 */

uint8_t ch_init(ch_dev_t * dev_ptr, ch_group_t * grp_ptr, uint8_t dev_num,
                ch_fw_init_func_t fw_init_func)
{
 80b940c:	b590      	push	{r4, r7, lr}
 80b940e:	b089      	sub	sp, #36	; 0x24
 80b9410:	af02      	add	r7, sp, #8
 80b9412:	60f8      	str	r0, [r7, #12]
 80b9414:	60b9      	str	r1, [r7, #8]
 80b9416:	603b      	str	r3, [r7, #0]
 80b9418:	4613      	mov	r3, r2
 80b941a:	71fb      	strb	r3, [r7, #7]

  uint8_t ret_val = RET_ERR;
 80b941c:	2301      	movs	r3, #1
 80b941e:	75fb      	strb	r3, [r7, #23]

  ch_i2c_info_t i2c_info;

  if (fw_init_func != NULL) {
 80b9420:	683b      	ldr	r3, [r7, #0]
 80b9422:	2b00      	cmp	r3, #0
 80b9424:	d019      	beq.n	80b945a <ch_init+0x4e>
    /* Get I2C parameters from BSP */
    ret_val = chbsp_i2c_get_info(grp_ptr, dev_num, &i2c_info);
 80b9426:	f107 0210 	add.w	r2, r7, #16
 80b942a:	79fb      	ldrb	r3, [r7, #7]
 80b942c:	4619      	mov	r1, r3
 80b942e:	68b8      	ldr	r0, [r7, #8]
 80b9430:	f7ea fbe4 	bl	80a3bfc <chbsp_i2c_get_info>
 80b9434:	4603      	mov	r3, r0
 80b9436:	75fb      	strb	r3, [r7, #23]

    if (ret_val == RET_OK) {
 80b9438:	7dfb      	ldrb	r3, [r7, #23]
 80b943a:	2b00      	cmp	r3, #0
 80b943c:	d10d      	bne.n	80b945a <ch_init+0x4e>
      /* Save special handling flags for Chirp driver */
      grp_ptr->i2c_drv_flags = i2c_info.drv_flags;
 80b943e:	8a7a      	ldrh	r2, [r7, #18]
 80b9440:	68bb      	ldr	r3, [r7, #8]
 80b9442:	809a      	strh	r2, [r3, #4]

      /* Call asic f/w init function passed in as parameter */
      ret_val =
          (*fw_init_func) (dev_ptr, grp_ptr, i2c_info.address, dev_num,
 80b9444:	7c3a      	ldrb	r2, [r7, #16]
 80b9446:	7c7b      	ldrb	r3, [r7, #17]
 80b9448:	79f9      	ldrb	r1, [r7, #7]
 80b944a:	9300      	str	r3, [sp, #0]
 80b944c:	683c      	ldr	r4, [r7, #0]
 80b944e:	460b      	mov	r3, r1
 80b9450:	68b9      	ldr	r1, [r7, #8]
 80b9452:	68f8      	ldr	r0, [r7, #12]
 80b9454:	47a0      	blx	r4
 80b9456:	4603      	mov	r3, r0
 80b9458:	75fb      	strb	r3, [r7, #23]
                           i2c_info.bus_num);
    }
  }

  return ret_val;
 80b945a:	7dfb      	ldrb	r3, [r7, #23]
}
 80b945c:	4618      	mov	r0, r3
 80b945e:	371c      	adds	r7, #28
 80b9460:	46bd      	mov	sp, r7
 80b9462:	bd90      	pop	{r4, r7, pc}

080b9464 <ch_get_config>:

uint8_t ch_get_config(ch_dev_t * dev_ptr, ch_config_t * config_ptr)
{
 80b9464:	b480      	push	{r7}
 80b9466:	b085      	sub	sp, #20
 80b9468:	af00      	add	r7, sp, #0
 80b946a:	6078      	str	r0, [r7, #4]
 80b946c:	6039      	str	r1, [r7, #0]
  uint8_t ret_val = 0;
 80b946e:	2300      	movs	r3, #0
 80b9470:	73fb      	strb	r3, [r7, #15]

  config_ptr->mode = dev_ptr->mode;
 80b9472:	687b      	ldr	r3, [r7, #4]
 80b9474:	791a      	ldrb	r2, [r3, #4]
 80b9476:	683b      	ldr	r3, [r7, #0]
 80b9478:	701a      	strb	r2, [r3, #0]
  config_ptr->max_range = dev_ptr->max_range;
 80b947a:	687b      	ldr	r3, [r7, #4]
 80b947c:	88da      	ldrh	r2, [r3, #6]
 80b947e:	683b      	ldr	r3, [r7, #0]
 80b9480:	805a      	strh	r2, [r3, #2]
  config_ptr->static_range = dev_ptr->static_range;
 80b9482:	687b      	ldr	r3, [r7, #4]
 80b9484:	891a      	ldrh	r2, [r3, #8]
 80b9486:	683b      	ldr	r3, [r7, #0]
 80b9488:	809a      	strh	r2, [r3, #4]
  config_ptr->sample_interval = dev_ptr->sample_interval;
 80b948a:	687b      	ldr	r3, [r7, #4]
 80b948c:	895a      	ldrh	r2, [r3, #10]
 80b948e:	683b      	ldr	r3, [r7, #0]
 80b9490:	80da      	strh	r2, [r3, #6]
  config_ptr->thresh_ptr = NULL;        // thresholds not returned here - use ch_get_thresholds()
 80b9492:	683b      	ldr	r3, [r7, #0]
 80b9494:	2200      	movs	r2, #0
 80b9496:	609a      	str	r2, [r3, #8]

  return ret_val;
 80b9498:	7bfb      	ldrb	r3, [r7, #15]
}
 80b949a:	4618      	mov	r0, r3
 80b949c:	3714      	adds	r7, #20
 80b949e:	46bd      	mov	sp, r7
 80b94a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b94a4:	4770      	bx	lr

080b94a6 <ch_set_config>:

uint8_t ch_set_config(ch_dev_t * dev_ptr, ch_config_t * config_ptr)
{
 80b94a6:	b580      	push	{r7, lr}
 80b94a8:	b084      	sub	sp, #16
 80b94aa:	af00      	add	r7, sp, #0
 80b94ac:	6078      	str	r0, [r7, #4]
 80b94ae:	6039      	str	r1, [r7, #0]
  uint8_t ret_val = 0;
 80b94b0:	2300      	movs	r3, #0
 80b94b2:	73fb      	strb	r3, [r7, #15]

  ret_val = ch_set_mode(dev_ptr, config_ptr->mode);     // set operating mode
 80b94b4:	683b      	ldr	r3, [r7, #0]
 80b94b6:	781b      	ldrb	r3, [r3, #0]
 80b94b8:	4619      	mov	r1, r3
 80b94ba:	6878      	ldr	r0, [r7, #4]
 80b94bc:	f000 f8cb 	bl	80b9656 <ch_set_mode>
 80b94c0:	4603      	mov	r3, r0
 80b94c2:	73fb      	strb	r3, [r7, #15]

  if (!ret_val) {
 80b94c4:	7bfb      	ldrb	r3, [r7, #15]
 80b94c6:	2b00      	cmp	r3, #0
 80b94c8:	d10b      	bne.n	80b94e2 <ch_set_config+0x3c>
    dev_ptr->mode = config_ptr->mode;
 80b94ca:	683b      	ldr	r3, [r7, #0]
 80b94cc:	781a      	ldrb	r2, [r3, #0]
 80b94ce:	687b      	ldr	r3, [r7, #4]
 80b94d0:	711a      	strb	r2, [r3, #4]

    ret_val = ch_set_max_range(dev_ptr, config_ptr->max_range); // set max range
 80b94d2:	683b      	ldr	r3, [r7, #0]
 80b94d4:	885b      	ldrh	r3, [r3, #2]
 80b94d6:	4619      	mov	r1, r3
 80b94d8:	6878      	ldr	r0, [r7, #4]
 80b94da:	f000 f904 	bl	80b96e6 <ch_set_max_range>
 80b94de:	4603      	mov	r3, r0
 80b94e0:	73fb      	strb	r3, [r7, #15]
  }

  if (!ret_val) {
 80b94e2:	7bfb      	ldrb	r3, [r7, #15]
 80b94e4:	2b00      	cmp	r3, #0
 80b94e6:	d112      	bne.n	80b950e <ch_set_config+0x68>

    if (dev_ptr->part_number == CH101_PART_NUMBER) {    // static rejection only on CH101
 80b94e8:	687b      	ldr	r3, [r7, #4]
 80b94ea:	8b9b      	ldrh	r3, [r3, #28]
 80b94ec:	2b65      	cmp	r3, #101	; 0x65
 80b94ee:	d10e      	bne.n	80b950e <ch_set_config+0x68>
      ret_val = ch_set_static_range(dev_ptr, config_ptr->static_range); // set static target rejection range
 80b94f0:	683b      	ldr	r3, [r7, #0]
 80b94f2:	889b      	ldrh	r3, [r3, #4]
 80b94f4:	4619      	mov	r1, r3
 80b94f6:	6878      	ldr	r0, [r7, #4]
 80b94f8:	f000 f90f 	bl	80b971a <ch_set_static_range>
 80b94fc:	4603      	mov	r3, r0
 80b94fe:	73fb      	strb	r3, [r7, #15]

      if (!ret_val) {
 80b9500:	7bfb      	ldrb	r3, [r7, #15]
 80b9502:	2b00      	cmp	r3, #0
 80b9504:	d103      	bne.n	80b950e <ch_set_config+0x68>
        dev_ptr->static_range = config_ptr->static_range;
 80b9506:	683b      	ldr	r3, [r7, #0]
 80b9508:	889a      	ldrh	r2, [r3, #4]
 80b950a:	687b      	ldr	r3, [r7, #4]
 80b950c:	811a      	strh	r2, [r3, #8]
      }
    }
  }

  if (!ret_val) {
 80b950e:	7bfb      	ldrb	r3, [r7, #15]
 80b9510:	2b00      	cmp	r3, #0
 80b9512:	d107      	bne.n	80b9524 <ch_set_config+0x7e>
    ret_val = ch_set_sample_interval(dev_ptr, config_ptr->sample_interval);     // set sample interval (free-run mode only)
 80b9514:	683b      	ldr	r3, [r7, #0]
 80b9516:	88db      	ldrh	r3, [r3, #6]
 80b9518:	4619      	mov	r1, r3
 80b951a:	6878      	ldr	r0, [r7, #4]
 80b951c:	f000 f8bc 	bl	80b9698 <ch_set_sample_interval>
 80b9520:	4603      	mov	r3, r0
 80b9522:	73fb      	strb	r3, [r7, #15]
  }

  if (!ret_val) {
 80b9524:	7bfb      	ldrb	r3, [r7, #15]
 80b9526:	2b00      	cmp	r3, #0
 80b9528:	d10f      	bne.n	80b954a <ch_set_config+0xa4>
    dev_ptr->sample_interval = config_ptr->sample_interval;
 80b952a:	683b      	ldr	r3, [r7, #0]
 80b952c:	88da      	ldrh	r2, [r3, #6]
 80b952e:	687b      	ldr	r3, [r7, #4]
 80b9530:	815a      	strh	r2, [r3, #10]

    if (dev_ptr->part_number == CH201_PART_NUMBER) {    // multi threshold only on CH201
 80b9532:	687b      	ldr	r3, [r7, #4]
 80b9534:	8b9b      	ldrh	r3, [r3, #28]
 80b9536:	2bc9      	cmp	r3, #201	; 0xc9
 80b9538:	d107      	bne.n	80b954a <ch_set_config+0xa4>
      ret_val = ch_set_thresholds(dev_ptr, config_ptr->thresh_ptr);     // set multiple thresholds
 80b953a:	683b      	ldr	r3, [r7, #0]
 80b953c:	689b      	ldr	r3, [r3, #8]
 80b953e:	4619      	mov	r1, r3
 80b9540:	6878      	ldr	r0, [r7, #4]
 80b9542:	f000 f99b 	bl	80b987c <ch_set_thresholds>
 80b9546:	4603      	mov	r3, r0
 80b9548:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret_val;
 80b954a:	7bfb      	ldrb	r3, [r7, #15]
}
 80b954c:	4618      	mov	r0, r3
 80b954e:	3710      	adds	r7, #16
 80b9550:	46bd      	mov	sp, r7
 80b9552:	bd80      	pop	{r7, pc}

080b9554 <ch_group_start>:

uint8_t ch_group_start(ch_group_t * grp_ptr)
{
 80b9554:	b580      	push	{r7, lr}
 80b9556:	b084      	sub	sp, #16
 80b9558:	af00      	add	r7, sp, #0
 80b955a:	6078      	str	r0, [r7, #4]
  uint8_t ret_val;

  ret_val = chdrv_group_start(grp_ptr);
 80b955c:	6878      	ldr	r0, [r7, #4]
 80b955e:	f001 fbbf 	bl	80bace0 <chdrv_group_start>
 80b9562:	4603      	mov	r3, r0
 80b9564:	73fb      	strb	r3, [r7, #15]

  return ret_val;
 80b9566:	7bfb      	ldrb	r3, [r7, #15]
}
 80b9568:	4618      	mov	r0, r3
 80b956a:	3710      	adds	r7, #16
 80b956c:	46bd      	mov	sp, r7
 80b956e:	bd80      	pop	{r7, pc}

080b9570 <ch_group_trigger>:
{
  chdrv_hw_trigger(dev_ptr);
}

void ch_group_trigger(ch_group_t * grp_ptr)
{
 80b9570:	b580      	push	{r7, lr}
 80b9572:	b082      	sub	sp, #8
 80b9574:	af00      	add	r7, sp, #0
 80b9576:	6078      	str	r0, [r7, #4]
  chdrv_group_hw_trigger(grp_ptr);
 80b9578:	6878      	ldr	r0, [r7, #4]
 80b957a:	f001 f8d2 	bl	80ba722 <chdrv_group_hw_trigger>
}
 80b957e:	bf00      	nop
 80b9580:	3708      	adds	r7, #8
 80b9582:	46bd      	mov	sp, r7
 80b9584:	bd80      	pop	{r7, pc}

080b9586 <ch_sensor_is_connected>:
    chdrv_group_soft_reset(grp_ptr);
  }
}

uint8_t ch_sensor_is_connected(ch_dev_t * dev_ptr)
{
 80b9586:	b480      	push	{r7}
 80b9588:	b083      	sub	sp, #12
 80b958a:	af00      	add	r7, sp, #0
 80b958c:	6078      	str	r0, [r7, #4]

  return dev_ptr->sensor_connected;
 80b958e:	687b      	ldr	r3, [r7, #4]
 80b9590:	7fdb      	ldrb	r3, [r3, #31]
}
 80b9592:	4618      	mov	r0, r3
 80b9594:	370c      	adds	r7, #12
 80b9596:	46bd      	mov	sp, r7
 80b9598:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b959c:	4770      	bx	lr

080b959e <ch_get_part_number>:

uint16_t ch_get_part_number(ch_dev_t * dev_ptr)
{
 80b959e:	b480      	push	{r7}
 80b95a0:	b083      	sub	sp, #12
 80b95a2:	af00      	add	r7, sp, #0
 80b95a4:	6078      	str	r0, [r7, #4]

  return dev_ptr->part_number;
 80b95a6:	687b      	ldr	r3, [r7, #4]
 80b95a8:	8b9b      	ldrh	r3, [r3, #28]
}
 80b95aa:	4618      	mov	r0, r3
 80b95ac:	370c      	adds	r7, #12
 80b95ae:	46bd      	mov	sp, r7
 80b95b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b95b4:	4770      	bx	lr

080b95b6 <ch_get_dev_num>:

uint8_t ch_get_dev_num(ch_dev_t * dev_ptr)
{
 80b95b6:	b480      	push	{r7}
 80b95b8:	b083      	sub	sp, #12
 80b95ba:	af00      	add	r7, sp, #0
 80b95bc:	6078      	str	r0, [r7, #4]

  return dev_ptr->io_index;
 80b95be:	687b      	ldr	r3, [r7, #4]
 80b95c0:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 80b95c4:	4618      	mov	r0, r3
 80b95c6:	370c      	adds	r7, #12
 80b95c8:	46bd      	mov	sp, r7
 80b95ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b95ce:	4770      	bx	lr

080b95d0 <ch_get_dev_ptr>:

ch_dev_t *ch_get_dev_ptr(ch_group_t * grp_ptr, uint8_t dev_num)
{
 80b95d0:	b480      	push	{r7}
 80b95d2:	b083      	sub	sp, #12
 80b95d4:	af00      	add	r7, sp, #0
 80b95d6:	6078      	str	r0, [r7, #4]
 80b95d8:	460b      	mov	r3, r1
 80b95da:	70fb      	strb	r3, [r7, #3]

  return grp_ptr->device[dev_num];
 80b95dc:	78fb      	ldrb	r3, [r7, #3]
 80b95de:	687a      	ldr	r2, [r7, #4]
 80b95e0:	3304      	adds	r3, #4
 80b95e2:	009b      	lsls	r3, r3, #2
 80b95e4:	4413      	add	r3, r2
 80b95e6:	685b      	ldr	r3, [r3, #4]
}
 80b95e8:	4618      	mov	r0, r3
 80b95ea:	370c      	adds	r7, #12
 80b95ec:	46bd      	mov	sp, r7
 80b95ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b95f2:	4770      	bx	lr

080b95f4 <ch_get_i2c_bus>:

  return dev_ptr->i2c_address;
}

uint8_t ch_get_i2c_bus(ch_dev_t * dev_ptr)
{
 80b95f4:	b480      	push	{r7}
 80b95f6:	b083      	sub	sp, #12
 80b95f8:	af00      	add	r7, sp, #0
 80b95fa:	6078      	str	r0, [r7, #4]

  return dev_ptr->i2c_bus_index;
 80b95fc:	687b      	ldr	r3, [r7, #4]
 80b95fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 80b9602:	4618      	mov	r0, r3
 80b9604:	370c      	adds	r7, #12
 80b9606:	46bd      	mov	sp, r7
 80b9608:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b960c:	4770      	bx	lr

080b960e <ch_get_num_ports>:

uint8_t ch_get_num_ports(ch_group_t * grp_ptr)
{
 80b960e:	b480      	push	{r7}
 80b9610:	b083      	sub	sp, #12
 80b9612:	af00      	add	r7, sp, #0
 80b9614:	6078      	str	r0, [r7, #4]

  return grp_ptr->num_ports;
 80b9616:	687b      	ldr	r3, [r7, #4]
 80b9618:	781b      	ldrb	r3, [r3, #0]
}
 80b961a:	4618      	mov	r0, r3
 80b961c:	370c      	adds	r7, #12
 80b961e:	46bd      	mov	sp, r7
 80b9620:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b9624:	4770      	bx	lr

080b9626 <ch_get_fw_version_string>:

char *ch_get_fw_version_string(ch_dev_t * dev_ptr)
{
 80b9626:	b480      	push	{r7}
 80b9628:	b083      	sub	sp, #12
 80b962a:	af00      	add	r7, sp, #0
 80b962c:	6078      	str	r0, [r7, #4]

  return dev_ptr->fw_version_string;
 80b962e:	687b      	ldr	r3, [r7, #4]
 80b9630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80b9632:	4618      	mov	r0, r3
 80b9634:	370c      	adds	r7, #12
 80b9636:	46bd      	mov	sp, r7
 80b9638:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b963c:	4770      	bx	lr

080b963e <ch_get_mode>:

ch_mode_t ch_get_mode(ch_dev_t * dev_ptr)
{
 80b963e:	b480      	push	{r7}
 80b9640:	b083      	sub	sp, #12
 80b9642:	af00      	add	r7, sp, #0
 80b9644:	6078      	str	r0, [r7, #4]

  return dev_ptr->mode;
 80b9646:	687b      	ldr	r3, [r7, #4]
 80b9648:	791b      	ldrb	r3, [r3, #4]
}
 80b964a:	4618      	mov	r0, r3
 80b964c:	370c      	adds	r7, #12
 80b964e:	46bd      	mov	sp, r7
 80b9650:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b9654:	4770      	bx	lr

080b9656 <ch_set_mode>:

uint8_t ch_set_mode(ch_dev_t * dev_ptr, ch_mode_t mode)
{
 80b9656:	b580      	push	{r7, lr}
 80b9658:	b084      	sub	sp, #16
 80b965a:	af00      	add	r7, sp, #0
 80b965c:	6078      	str	r0, [r7, #4]
 80b965e:	460b      	mov	r3, r1
 80b9660:	70fb      	strb	r3, [r7, #3]
  int ret_val = RET_ERR;
 80b9662:	2301      	movs	r3, #1
 80b9664:	60fb      	str	r3, [r7, #12]
  ch_set_mode_func_t func_ptr = dev_ptr->api_funcs.set_mode;
 80b9666:	687b      	ldr	r3, [r7, #4]
 80b9668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80b966a:	60bb      	str	r3, [r7, #8]

  if (func_ptr != NULL) {
 80b966c:	68bb      	ldr	r3, [r7, #8]
 80b966e:	2b00      	cmp	r3, #0
 80b9670:	d006      	beq.n	80b9680 <ch_set_mode+0x2a>
    ret_val = (*func_ptr) (dev_ptr, mode);
 80b9672:	78fa      	ldrb	r2, [r7, #3]
 80b9674:	68bb      	ldr	r3, [r7, #8]
 80b9676:	4611      	mov	r1, r2
 80b9678:	6878      	ldr	r0, [r7, #4]
 80b967a:	4798      	blx	r3
 80b967c:	4603      	mov	r3, r0
 80b967e:	60fb      	str	r3, [r7, #12]
  }

  if (ret_val == 0) {
 80b9680:	68fb      	ldr	r3, [r7, #12]
 80b9682:	2b00      	cmp	r3, #0
 80b9684:	d102      	bne.n	80b968c <ch_set_mode+0x36>
    dev_ptr->mode = mode;
 80b9686:	687b      	ldr	r3, [r7, #4]
 80b9688:	78fa      	ldrb	r2, [r7, #3]
 80b968a:	711a      	strb	r2, [r3, #4]
  }

  return ret_val;
 80b968c:	68fb      	ldr	r3, [r7, #12]
 80b968e:	b2db      	uxtb	r3, r3
}
 80b9690:	4618      	mov	r0, r3
 80b9692:	3710      	adds	r7, #16
 80b9694:	46bd      	mov	sp, r7
 80b9696:	bd80      	pop	{r7, pc}

080b9698 <ch_set_sample_interval>:

  return sample_interval;
}

uint8_t ch_set_sample_interval(ch_dev_t * dev_ptr, uint16_t sample_interval)
{
 80b9698:	b580      	push	{r7, lr}
 80b969a:	b084      	sub	sp, #16
 80b969c:	af00      	add	r7, sp, #0
 80b969e:	6078      	str	r0, [r7, #4]
 80b96a0:	460b      	mov	r3, r1
 80b96a2:	807b      	strh	r3, [r7, #2]
  int ret_val = RET_ERR;
 80b96a4:	2301      	movs	r3, #1
 80b96a6:	60fb      	str	r3, [r7, #12]
  ch_set_sample_interval_func_t func_ptr =
 80b96a8:	687b      	ldr	r3, [r7, #4]
 80b96aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80b96ac:	60bb      	str	r3, [r7, #8]
      dev_ptr->api_funcs.set_sample_interval;

  if (func_ptr != NULL) {
 80b96ae:	68bb      	ldr	r3, [r7, #8]
 80b96b0:	2b00      	cmp	r3, #0
 80b96b2:	d006      	beq.n	80b96c2 <ch_set_sample_interval+0x2a>
    ret_val = (*func_ptr) (dev_ptr, sample_interval);
 80b96b4:	887a      	ldrh	r2, [r7, #2]
 80b96b6:	68bb      	ldr	r3, [r7, #8]
 80b96b8:	4611      	mov	r1, r2
 80b96ba:	6878      	ldr	r0, [r7, #4]
 80b96bc:	4798      	blx	r3
 80b96be:	4603      	mov	r3, r0
 80b96c0:	60fb      	str	r3, [r7, #12]
  }

  return ret_val;
 80b96c2:	68fb      	ldr	r3, [r7, #12]
 80b96c4:	b2db      	uxtb	r3, r3
}
 80b96c6:	4618      	mov	r0, r3
 80b96c8:	3710      	adds	r7, #16
 80b96ca:	46bd      	mov	sp, r7
 80b96cc:	bd80      	pop	{r7, pc}

080b96ce <ch_get_num_samples>:

uint16_t ch_get_num_samples(ch_dev_t * dev_ptr)
{
 80b96ce:	b480      	push	{r7}
 80b96d0:	b083      	sub	sp, #12
 80b96d2:	af00      	add	r7, sp, #0
 80b96d4:	6078      	str	r0, [r7, #4]

  return dev_ptr->num_rx_samples;
 80b96d6:	687b      	ldr	r3, [r7, #4]
 80b96d8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
}
 80b96da:	4618      	mov	r0, r3
 80b96dc:	370c      	adds	r7, #12
 80b96de:	46bd      	mov	sp, r7
 80b96e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b96e4:	4770      	bx	lr

080b96e6 <ch_set_max_range>:

  return dev_ptr->max_range;
}

uint8_t ch_set_max_range(ch_dev_t * dev_ptr, uint16_t max_range)
{
 80b96e6:	b580      	push	{r7, lr}
 80b96e8:	b084      	sub	sp, #16
 80b96ea:	af00      	add	r7, sp, #0
 80b96ec:	6078      	str	r0, [r7, #4]
 80b96ee:	460b      	mov	r3, r1
 80b96f0:	807b      	strh	r3, [r7, #2]
  uint8_t ret_val = RET_ERR;
 80b96f2:	2301      	movs	r3, #1
 80b96f4:	73fb      	strb	r3, [r7, #15]
  ch_set_max_range_func_t func_ptr = dev_ptr->api_funcs.set_max_range;
 80b96f6:	687b      	ldr	r3, [r7, #4]
 80b96f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80b96fa:	60bb      	str	r3, [r7, #8]

  if (func_ptr != NULL) {
 80b96fc:	68bb      	ldr	r3, [r7, #8]
 80b96fe:	2b00      	cmp	r3, #0
 80b9700:	d006      	beq.n	80b9710 <ch_set_max_range+0x2a>
    ret_val = (*func_ptr) (dev_ptr, max_range);
 80b9702:	887a      	ldrh	r2, [r7, #2]
 80b9704:	68bb      	ldr	r3, [r7, #8]
 80b9706:	4611      	mov	r1, r2
 80b9708:	6878      	ldr	r0, [r7, #4]
 80b970a:	4798      	blx	r3
 80b970c:	4603      	mov	r3, r0
 80b970e:	73fb      	strb	r3, [r7, #15]
  }

  return ret_val;
 80b9710:	7bfb      	ldrb	r3, [r7, #15]
}
 80b9712:	4618      	mov	r0, r3
 80b9714:	3710      	adds	r7, #16
 80b9716:	46bd      	mov	sp, r7
 80b9718:	bd80      	pop	{r7, pc}

080b971a <ch_set_static_range>:

  return dev_ptr->static_range;
}

uint8_t ch_set_static_range(ch_dev_t * dev_ptr, uint16_t num_samples)
{
 80b971a:	b580      	push	{r7, lr}
 80b971c:	b084      	sub	sp, #16
 80b971e:	af00      	add	r7, sp, #0
 80b9720:	6078      	str	r0, [r7, #4]
 80b9722:	460b      	mov	r3, r1
 80b9724:	807b      	strh	r3, [r7, #2]
  uint8_t ret_val = RET_ERR;
 80b9726:	2301      	movs	r3, #1
 80b9728:	73fb      	strb	r3, [r7, #15]
  ch_set_static_range_func_t func_ptr = dev_ptr->api_funcs.set_static_range;
 80b972a:	687b      	ldr	r3, [r7, #4]
 80b972c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80b972e:	60bb      	str	r3, [r7, #8]

  if (func_ptr != NULL) {
 80b9730:	68bb      	ldr	r3, [r7, #8]
 80b9732:	2b00      	cmp	r3, #0
 80b9734:	d006      	beq.n	80b9744 <ch_set_static_range+0x2a>
    ret_val = (*func_ptr) (dev_ptr, num_samples);
 80b9736:	887a      	ldrh	r2, [r7, #2]
 80b9738:	68bb      	ldr	r3, [r7, #8]
 80b973a:	4611      	mov	r1, r2
 80b973c:	6878      	ldr	r0, [r7, #4]
 80b973e:	4798      	blx	r3
 80b9740:	4603      	mov	r3, r0
 80b9742:	73fb      	strb	r3, [r7, #15]
  }

  return ret_val;
 80b9744:	7bfb      	ldrb	r3, [r7, #15]
}
 80b9746:	4618      	mov	r0, r3
 80b9748:	3710      	adds	r7, #16
 80b974a:	46bd      	mov	sp, r7
 80b974c:	bd80      	pop	{r7, pc}

080b974e <ch_get_range>:

uint32_t ch_get_range(ch_dev_t * dev_ptr, ch_range_t range_type)
{
 80b974e:	b580      	push	{r7, lr}
 80b9750:	b084      	sub	sp, #16
 80b9752:	af00      	add	r7, sp, #0
 80b9754:	6078      	str	r0, [r7, #4]
 80b9756:	460b      	mov	r3, r1
 80b9758:	70fb      	strb	r3, [r7, #3]
  uint32_t range = 0;
 80b975a:	2300      	movs	r3, #0
 80b975c:	60fb      	str	r3, [r7, #12]
  ch_get_range_func_t func_ptr = dev_ptr->api_funcs.get_range;
 80b975e:	687b      	ldr	r3, [r7, #4]
 80b9760:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80b9762:	60bb      	str	r3, [r7, #8]

  if (func_ptr != NULL) {
 80b9764:	68bb      	ldr	r3, [r7, #8]
 80b9766:	2b00      	cmp	r3, #0
 80b9768:	d005      	beq.n	80b9776 <ch_get_range+0x28>
    range = (*func_ptr) (dev_ptr, range_type);
 80b976a:	78fa      	ldrb	r2, [r7, #3]
 80b976c:	68bb      	ldr	r3, [r7, #8]
 80b976e:	4611      	mov	r1, r2
 80b9770:	6878      	ldr	r0, [r7, #4]
 80b9772:	4798      	blx	r3
 80b9774:	60f8      	str	r0, [r7, #12]
  }

  return range;
 80b9776:	68fb      	ldr	r3, [r7, #12]
}
 80b9778:	4618      	mov	r0, r3
 80b977a:	3710      	adds	r7, #16
 80b977c:	46bd      	mov	sp, r7
 80b977e:	bd80      	pop	{r7, pc}

080b9780 <ch_get_amplitude>:

uint16_t ch_get_amplitude(ch_dev_t * dev_ptr)
{
 80b9780:	b580      	push	{r7, lr}
 80b9782:	b084      	sub	sp, #16
 80b9784:	af00      	add	r7, sp, #0
 80b9786:	6078      	str	r0, [r7, #4]
  int amplitude = 0;
 80b9788:	2300      	movs	r3, #0
 80b978a:	60fb      	str	r3, [r7, #12]
  ch_get_amplitude_func_t func_ptr = dev_ptr->api_funcs.get_amplitude;
 80b978c:	687b      	ldr	r3, [r7, #4]
 80b978e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80b9790:	60bb      	str	r3, [r7, #8]

  if (func_ptr != NULL) {
 80b9792:	68bb      	ldr	r3, [r7, #8]
 80b9794:	2b00      	cmp	r3, #0
 80b9796:	d004      	beq.n	80b97a2 <ch_get_amplitude+0x22>
    amplitude = (*func_ptr) (dev_ptr);
 80b9798:	68bb      	ldr	r3, [r7, #8]
 80b979a:	6878      	ldr	r0, [r7, #4]
 80b979c:	4798      	blx	r3
 80b979e:	4603      	mov	r3, r0
 80b97a0:	60fb      	str	r3, [r7, #12]
  }

  return amplitude;
 80b97a2:	68fb      	ldr	r3, [r7, #12]
 80b97a4:	b29b      	uxth	r3, r3
}
 80b97a6:	4618      	mov	r0, r3
 80b97a8:	3710      	adds	r7, #16
 80b97aa:	46bd      	mov	sp, r7
 80b97ac:	bd80      	pop	{r7, pc}

080b97ae <ch_get_frequency>:

  return dev_ptr->bandwidth;
}

uint32_t ch_get_frequency(ch_dev_t * dev_ptr)
{
 80b97ae:	b480      	push	{r7}
 80b97b0:	b083      	sub	sp, #12
 80b97b2:	af00      	add	r7, sp, #0
 80b97b4:	6078      	str	r0, [r7, #4]

  return dev_ptr->op_frequency;
 80b97b6:	687b      	ldr	r3, [r7, #4]
 80b97b8:	691b      	ldr	r3, [r3, #16]
}
 80b97ba:	4618      	mov	r0, r3
 80b97bc:	370c      	adds	r7, #12
 80b97be:	46bd      	mov	sp, r7
 80b97c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b97c4:	4770      	bx	lr

080b97c6 <ch_get_rtc_cal_pulselength>:

uint16_t ch_get_rtc_cal_pulselength(ch_dev_t * dev_ptr)
{
 80b97c6:	b480      	push	{r7}
 80b97c8:	b083      	sub	sp, #12
 80b97ca:	af00      	add	r7, sp, #0
 80b97cc:	6078      	str	r0, [r7, #4]

  return dev_ptr->group->rtc_cal_pulse_ms;
 80b97ce:	687b      	ldr	r3, [r7, #4]
 80b97d0:	681b      	ldr	r3, [r3, #0]
 80b97d2:	88db      	ldrh	r3, [r3, #6]
}
 80b97d4:	4618      	mov	r0, r3
 80b97d6:	370c      	adds	r7, #12
 80b97d8:	46bd      	mov	sp, r7
 80b97da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b97de:	4770      	bx	lr

080b97e0 <ch_get_rtc_cal_result>:

uint16_t ch_get_rtc_cal_result(ch_dev_t * dev_ptr)
{
 80b97e0:	b480      	push	{r7}
 80b97e2:	b083      	sub	sp, #12
 80b97e4:	af00      	add	r7, sp, #0
 80b97e6:	6078      	str	r0, [r7, #4]

  return dev_ptr->rtc_cal_result;
 80b97e8:	687b      	ldr	r3, [r7, #4]
 80b97ea:	899b      	ldrh	r3, [r3, #12]
}
 80b97ec:	4618      	mov	r0, r3
 80b97ee:	370c      	adds	r7, #12
 80b97f0:	46bd      	mov	sp, r7
 80b97f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b97f6:	4770      	bx	lr

080b97f8 <ch_get_iq_data>:
}

uint8_t ch_get_iq_data(ch_dev_t * dev_ptr, ch_iq_sample_t * buf_ptr,
                       uint16_t start_sample, uint16_t num_samples,
                       ch_io_mode_t mode)
{
 80b97f8:	b590      	push	{r4, r7, lr}
 80b97fa:	b089      	sub	sp, #36	; 0x24
 80b97fc:	af02      	add	r7, sp, #8
 80b97fe:	60f8      	str	r0, [r7, #12]
 80b9800:	60b9      	str	r1, [r7, #8]
 80b9802:	4611      	mov	r1, r2
 80b9804:	461a      	mov	r2, r3
 80b9806:	460b      	mov	r3, r1
 80b9808:	80fb      	strh	r3, [r7, #6]
 80b980a:	4613      	mov	r3, r2
 80b980c:	80bb      	strh	r3, [r7, #4]
  int ret_val = 0;
 80b980e:	2300      	movs	r3, #0
 80b9810:	617b      	str	r3, [r7, #20]
  ch_get_iq_data_func_t func_ptr = dev_ptr->api_funcs.get_iq_data;
 80b9812:	68fb      	ldr	r3, [r7, #12]
 80b9814:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80b9818:	613b      	str	r3, [r7, #16]

  if (func_ptr != NULL) {
 80b981a:	693b      	ldr	r3, [r7, #16]
 80b981c:	2b00      	cmp	r3, #0
 80b981e:	d00b      	beq.n	80b9838 <ch_get_iq_data+0x40>
    ret_val = (*func_ptr) (dev_ptr, buf_ptr, start_sample, num_samples, mode);
 80b9820:	88b9      	ldrh	r1, [r7, #4]
 80b9822:	88fa      	ldrh	r2, [r7, #6]
 80b9824:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80b9828:	9300      	str	r3, [sp, #0]
 80b982a:	693c      	ldr	r4, [r7, #16]
 80b982c:	460b      	mov	r3, r1
 80b982e:	68b9      	ldr	r1, [r7, #8]
 80b9830:	68f8      	ldr	r0, [r7, #12]
 80b9832:	47a0      	blx	r4
 80b9834:	4603      	mov	r3, r0
 80b9836:	617b      	str	r3, [r7, #20]
  }

  return ret_val;
 80b9838:	697b      	ldr	r3, [r7, #20]
 80b983a:	b2db      	uxtb	r3, r3
}
 80b983c:	4618      	mov	r0, r3
 80b983e:	371c      	adds	r7, #28
 80b9840:	46bd      	mov	sp, r7
 80b9842:	bd90      	pop	{r4, r7, pc}

080b9844 <ch_samples_to_mm>:

uint16_t ch_samples_to_mm(ch_dev_t * dev_ptr, uint16_t num_samples)
{
 80b9844:	b580      	push	{r7, lr}
 80b9846:	b084      	sub	sp, #16
 80b9848:	af00      	add	r7, sp, #0
 80b984a:	6078      	str	r0, [r7, #4]
 80b984c:	460b      	mov	r3, r1
 80b984e:	807b      	strh	r3, [r7, #2]
  int num_mm = 0;
 80b9850:	2300      	movs	r3, #0
 80b9852:	60fb      	str	r3, [r7, #12]
  ch_samples_to_mm_func_t func_ptr = dev_ptr->api_funcs.samples_to_mm;
 80b9854:	687b      	ldr	r3, [r7, #4]
 80b9856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80b985a:	60bb      	str	r3, [r7, #8]

  if (func_ptr != NULL) {
 80b985c:	68bb      	ldr	r3, [r7, #8]
 80b985e:	2b00      	cmp	r3, #0
 80b9860:	d006      	beq.n	80b9870 <ch_samples_to_mm+0x2c>
    num_mm = (*func_ptr) (dev_ptr, num_samples);
 80b9862:	887a      	ldrh	r2, [r7, #2]
 80b9864:	68bb      	ldr	r3, [r7, #8]
 80b9866:	4611      	mov	r1, r2
 80b9868:	6878      	ldr	r0, [r7, #4]
 80b986a:	4798      	blx	r3
 80b986c:	4603      	mov	r3, r0
 80b986e:	60fb      	str	r3, [r7, #12]
  }

  return num_mm;
 80b9870:	68fb      	ldr	r3, [r7, #12]
 80b9872:	b29b      	uxth	r3, r3
}
 80b9874:	4618      	mov	r0, r3
 80b9876:	3710      	adds	r7, #16
 80b9878:	46bd      	mov	sp, r7
 80b987a:	bd80      	pop	{r7, pc}

080b987c <ch_set_thresholds>:

  return num_samples;
}

uint8_t ch_set_thresholds(ch_dev_t * dev_ptr, ch_thresholds_t * thresh_ptr)
{
 80b987c:	b580      	push	{r7, lr}
 80b987e:	b084      	sub	sp, #16
 80b9880:	af00      	add	r7, sp, #0
 80b9882:	6078      	str	r0, [r7, #4]
 80b9884:	6039      	str	r1, [r7, #0]
  int ret_val = RET_ERR;
 80b9886:	2301      	movs	r3, #1
 80b9888:	60fb      	str	r3, [r7, #12]
  ch_set_thresholds_func_t func_ptr = dev_ptr->api_funcs.set_thresholds;
 80b988a:	687b      	ldr	r3, [r7, #4]
 80b988c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80b9890:	60bb      	str	r3, [r7, #8]

  if ((func_ptr != NULL) && (thresh_ptr != NULL)) {
 80b9892:	68bb      	ldr	r3, [r7, #8]
 80b9894:	2b00      	cmp	r3, #0
 80b9896:	d008      	beq.n	80b98aa <ch_set_thresholds+0x2e>
 80b9898:	683b      	ldr	r3, [r7, #0]
 80b989a:	2b00      	cmp	r3, #0
 80b989c:	d005      	beq.n	80b98aa <ch_set_thresholds+0x2e>
    ret_val = (*func_ptr) (dev_ptr, thresh_ptr);
 80b989e:	68bb      	ldr	r3, [r7, #8]
 80b98a0:	6839      	ldr	r1, [r7, #0]
 80b98a2:	6878      	ldr	r0, [r7, #4]
 80b98a4:	4798      	blx	r3
 80b98a6:	4603      	mov	r3, r0
 80b98a8:	60fb      	str	r3, [r7, #12]
  }

  return ret_val;
 80b98aa:	68fb      	ldr	r3, [r7, #12]
 80b98ac:	b2db      	uxtb	r3, r3
}
 80b98ae:	4618      	mov	r0, r3
 80b98b0:	3710      	adds	r7, #16
 80b98b2:	46bd      	mov	sp, r7
 80b98b4:	bd80      	pop	{r7, pc}

080b98b6 <ch_get_thresholds>:

uint8_t ch_get_thresholds(ch_dev_t * dev_ptr, ch_thresholds_t * thresh_ptr)
{
 80b98b6:	b580      	push	{r7, lr}
 80b98b8:	b084      	sub	sp, #16
 80b98ba:	af00      	add	r7, sp, #0
 80b98bc:	6078      	str	r0, [r7, #4]
 80b98be:	6039      	str	r1, [r7, #0]
  int ret_val = RET_ERR;
 80b98c0:	2301      	movs	r3, #1
 80b98c2:	60fb      	str	r3, [r7, #12]
  ch_get_thresholds_func_t func_ptr = dev_ptr->api_funcs.get_thresholds;
 80b98c4:	687b      	ldr	r3, [r7, #4]
 80b98c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80b98ca:	60bb      	str	r3, [r7, #8]

  if ((func_ptr != NULL) && (thresh_ptr != NULL)) {
 80b98cc:	68bb      	ldr	r3, [r7, #8]
 80b98ce:	2b00      	cmp	r3, #0
 80b98d0:	d008      	beq.n	80b98e4 <ch_get_thresholds+0x2e>
 80b98d2:	683b      	ldr	r3, [r7, #0]
 80b98d4:	2b00      	cmp	r3, #0
 80b98d6:	d005      	beq.n	80b98e4 <ch_get_thresholds+0x2e>
    ret_val = (*func_ptr) (dev_ptr, thresh_ptr);
 80b98d8:	68bb      	ldr	r3, [r7, #8]
 80b98da:	6839      	ldr	r1, [r7, #0]
 80b98dc:	6878      	ldr	r0, [r7, #4]
 80b98de:	4798      	blx	r3
 80b98e0:	4603      	mov	r3, r0
 80b98e2:	60fb      	str	r3, [r7, #12]
  }

  return ret_val;
 80b98e4:	68fb      	ldr	r3, [r7, #12]
 80b98e6:	b2db      	uxtb	r3, r3
}
 80b98e8:	4618      	mov	r0, r3
 80b98ea:	3710      	adds	r7, #16
 80b98ec:	46bd      	mov	sp, r7
 80b98ee:	bd80      	pop	{r7, pc}

080b98f0 <ch_io_int_callback_set>:
 *
 * \note
 */
void ch_io_int_callback_set(ch_group_t * grp_ptr,
                            ch_io_int_callback_t callback_func_ptr)
{
 80b98f0:	b480      	push	{r7}
 80b98f2:	b083      	sub	sp, #12
 80b98f4:	af00      	add	r7, sp, #0
 80b98f6:	6078      	str	r0, [r7, #4]
 80b98f8:	6039      	str	r1, [r7, #0]

  grp_ptr->io_int_callback = callback_func_ptr;
 80b98fa:	687b      	ldr	r3, [r7, #4]
 80b98fc:	683a      	ldr	r2, [r7, #0]
 80b98fe:	60da      	str	r2, [r3, #12]
}
 80b9900:	bf00      	nop
 80b9902:	370c      	adds	r7, #12
 80b9904:	46bd      	mov	sp, r7
 80b9906:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b990a:	4770      	bx	lr

080b990c <ch_common_set_mode>:
#include "soniclib.h"
#include "ch_common.h"
#include "chirp_bsp.h"

uint8_t ch_common_set_mode(ch_dev_t * dev_ptr, ch_mode_t mode)
{
 80b990c:	b580      	push	{r7, lr}
 80b990e:	b084      	sub	sp, #16
 80b9910:	af00      	add	r7, sp, #0
 80b9912:	6078      	str	r0, [r7, #4]
 80b9914:	460b      	mov	r3, r1
 80b9916:	70fb      	strb	r3, [r7, #3]
  uint8_t ret_val = 0;
 80b9918:	2300      	movs	r3, #0
 80b991a:	73fb      	strb	r3, [r7, #15]
  uint8_t opmode_reg;
  uint8_t period_reg;
  uint8_t tick_interval_reg;

  if (dev_ptr->part_number == CH101_PART_NUMBER) {
 80b991c:	687b      	ldr	r3, [r7, #4]
 80b991e:	8b9b      	ldrh	r3, [r3, #28]
 80b9920:	2b65      	cmp	r3, #101	; 0x65
 80b9922:	d106      	bne.n	80b9932 <ch_common_set_mode+0x26>
    opmode_reg = CH101_COMMON_REG_OPMODE;
 80b9924:	2301      	movs	r3, #1
 80b9926:	73bb      	strb	r3, [r7, #14]
    period_reg = CH101_COMMON_REG_PERIOD;
 80b9928:	2305      	movs	r3, #5
 80b992a:	737b      	strb	r3, [r7, #13]
    tick_interval_reg = CH101_COMMON_REG_TICK_INTERVAL;
 80b992c:	2302      	movs	r3, #2
 80b992e:	733b      	strb	r3, [r7, #12]
 80b9930:	e005      	b.n	80b993e <ch_common_set_mode+0x32>
  } else {
    opmode_reg = CH201_COMMON_REG_OPMODE;
 80b9932:	2301      	movs	r3, #1
 80b9934:	73bb      	strb	r3, [r7, #14]
    period_reg = CH201_COMMON_REG_PERIOD;
 80b9936:	2305      	movs	r3, #5
 80b9938:	737b      	strb	r3, [r7, #13]
    tick_interval_reg = CH201_COMMON_REG_TICK_INTERVAL;
 80b993a:	2302      	movs	r3, #2
 80b993c:	733b      	strb	r3, [r7, #12]
  }

  if (dev_ptr->sensor_connected) {
 80b993e:	687b      	ldr	r3, [r7, #4]
 80b9940:	7fdb      	ldrb	r3, [r3, #31]
 80b9942:	2b00      	cmp	r3, #0
 80b9944:	d03f      	beq.n	80b99c6 <ch_common_set_mode+0xba>
    switch (mode) {
 80b9946:	78fb      	ldrb	r3, [r7, #3]
 80b9948:	2b20      	cmp	r3, #32
 80b994a:	d031      	beq.n	80b99b0 <ch_common_set_mode+0xa4>
 80b994c:	2b20      	cmp	r3, #32
 80b994e:	dc37      	bgt.n	80b99c0 <ch_common_set_mode+0xb4>
 80b9950:	2b10      	cmp	r3, #16
 80b9952:	d025      	beq.n	80b99a0 <ch_common_set_mode+0x94>
 80b9954:	2b10      	cmp	r3, #16
 80b9956:	dc33      	bgt.n	80b99c0 <ch_common_set_mode+0xb4>
 80b9958:	2b00      	cmp	r3, #0
 80b995a:	d002      	beq.n	80b9962 <ch_common_set_mode+0x56>
 80b995c:	2b02      	cmp	r3, #2
 80b995e:	d017      	beq.n	80b9990 <ch_common_set_mode+0x84>
 80b9960:	e02e      	b.n	80b99c0 <ch_common_set_mode+0xb4>
    case CH_MODE_IDLE:
      chdrv_write_byte(dev_ptr, opmode_reg, CH_MODE_IDLE);
 80b9962:	7bbb      	ldrb	r3, [r7, #14]
 80b9964:	b29b      	uxth	r3, r3
 80b9966:	2200      	movs	r2, #0
 80b9968:	4619      	mov	r1, r3
 80b996a:	6878      	ldr	r0, [r7, #4]
 80b996c:	f000 fd31 	bl	80ba3d2 <chdrv_write_byte>
      chdrv_write_byte(dev_ptr, period_reg, 0);
 80b9970:	7b7b      	ldrb	r3, [r7, #13]
 80b9972:	b29b      	uxth	r3, r3
 80b9974:	2200      	movs	r2, #0
 80b9976:	4619      	mov	r1, r3
 80b9978:	6878      	ldr	r0, [r7, #4]
 80b997a:	f000 fd2a 	bl	80ba3d2 <chdrv_write_byte>
      chdrv_write_word(dev_ptr, tick_interval_reg, 2048);       // XXX need define
 80b997e:	7b3b      	ldrb	r3, [r7, #12]
 80b9980:	b29b      	uxth	r3, r3
 80b9982:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80b9986:	4619      	mov	r1, r3
 80b9988:	6878      	ldr	r0, [r7, #4]
 80b998a:	f000 fd3b 	bl	80ba404 <chdrv_write_word>
      break;
 80b998e:	e01b      	b.n	80b99c8 <ch_common_set_mode+0xbc>

    case CH_MODE_FREERUN:
      chdrv_write_byte(dev_ptr, opmode_reg, CH_MODE_FREERUN);
 80b9990:	7bbb      	ldrb	r3, [r7, #14]
 80b9992:	b29b      	uxth	r3, r3
 80b9994:	2202      	movs	r2, #2
 80b9996:	4619      	mov	r1, r3
 80b9998:	6878      	ldr	r0, [r7, #4]
 80b999a:	f000 fd1a 	bl	80ba3d2 <chdrv_write_byte>
      // XXX need to set period / tick interval (?)
      break;
 80b999e:	e013      	b.n	80b99c8 <ch_common_set_mode+0xbc>

    case CH_MODE_TRIGGERED_TX_RX:
      chdrv_write_byte(dev_ptr, opmode_reg, CH_MODE_TRIGGERED_TX_RX);
 80b99a0:	7bbb      	ldrb	r3, [r7, #14]
 80b99a2:	b29b      	uxth	r3, r3
 80b99a4:	2210      	movs	r2, #16
 80b99a6:	4619      	mov	r1, r3
 80b99a8:	6878      	ldr	r0, [r7, #4]
 80b99aa:	f000 fd12 	bl	80ba3d2 <chdrv_write_byte>
      break;
 80b99ae:	e00b      	b.n	80b99c8 <ch_common_set_mode+0xbc>

    case CH_MODE_TRIGGERED_RX_ONLY:
      chdrv_write_byte(dev_ptr, opmode_reg, CH_MODE_TRIGGERED_RX_ONLY);
 80b99b0:	7bbb      	ldrb	r3, [r7, #14]
 80b99b2:	b29b      	uxth	r3, r3
 80b99b4:	2220      	movs	r2, #32
 80b99b6:	4619      	mov	r1, r3
 80b99b8:	6878      	ldr	r0, [r7, #4]
 80b99ba:	f000 fd0a 	bl	80ba3d2 <chdrv_write_byte>
      break;
 80b99be:	e003      	b.n	80b99c8 <ch_common_set_mode+0xbc>

    default:
      ret_val = RET_ERR;        // return non-zero to indicate error
 80b99c0:	2301      	movs	r3, #1
 80b99c2:	73fb      	strb	r3, [r7, #15]
      break;
 80b99c4:	e000      	b.n	80b99c8 <ch_common_set_mode+0xbc>
    }
  }
 80b99c6:	bf00      	nop

  return ret_val;
 80b99c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80b99ca:	4618      	mov	r0, r3
 80b99cc:	3710      	adds	r7, #16
 80b99ce:	46bd      	mov	sp, r7
 80b99d0:	bd80      	pop	{r7, pc}

080b99d2 <ch_common_fw_load>:

uint8_t ch_common_fw_load(ch_dev_t * dev_ptr)
{
 80b99d2:	b580      	push	{r7, lr}
 80b99d4:	b084      	sub	sp, #16
 80b99d6:	af00      	add	r7, sp, #0
 80b99d8:	6078      	str	r0, [r7, #4]
  uint8_t ch_err = 0;
 80b99da:	2300      	movs	r3, #0
 80b99dc:	72fb      	strb	r3, [r7, #11]
  uint16_t prog_mem_addr;
  uint16_t fw_size;

  if (dev_ptr->part_number == CH101_PART_NUMBER) {
 80b99de:	687b      	ldr	r3, [r7, #4]
 80b99e0:	8b9b      	ldrh	r3, [r3, #28]
 80b99e2:	2b65      	cmp	r3, #101	; 0x65
 80b99e4:	d106      	bne.n	80b99f4 <ch_common_fw_load+0x22>
    prog_mem_addr = CH101_PROG_MEM_ADDR;
 80b99e6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80b99ea:	81fb      	strh	r3, [r7, #14]
    fw_size = CH101_FW_SIZE;
 80b99ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80b99f0:	81bb      	strh	r3, [r7, #12]
 80b99f2:	e005      	b.n	80b9a00 <ch_common_fw_load+0x2e>
  } else {
    prog_mem_addr = CH201_PROG_MEM_ADDR;
 80b99f4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80b99f8:	81fb      	strh	r3, [r7, #14]
    fw_size = CH201_FW_SIZE;
 80b99fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80b99fe:	81bb      	strh	r3, [r7, #12]
  }

  ch_err =
      chdrv_prog_mem_write(dev_ptr, prog_mem_addr,
                           (uint8_t *) dev_ptr->firmware, fw_size);
 80b9a00:	687b      	ldr	r3, [r7, #4]
 80b9a02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
      chdrv_prog_mem_write(dev_ptr, prog_mem_addr,
 80b9a04:	89bb      	ldrh	r3, [r7, #12]
 80b9a06:	89f9      	ldrh	r1, [r7, #14]
 80b9a08:	6878      	ldr	r0, [r7, #4]
 80b9a0a:	f000 fedf 	bl	80ba7cc <chdrv_prog_mem_write>
 80b9a0e:	4603      	mov	r3, r0
  ch_err =
 80b9a10:	72fb      	strb	r3, [r7, #11]
  return ch_err;
 80b9a12:	7afb      	ldrb	r3, [r7, #11]
}
 80b9a14:	4618      	mov	r0, r3
 80b9a16:	3710      	adds	r7, #16
 80b9a18:	46bd      	mov	sp, r7
 80b9a1a:	bd80      	pop	{r7, pc}

080b9a1c <ch_common_set_sample_interval>:

uint8_t ch_common_set_sample_interval(ch_dev_t * dev_ptr, uint16_t interval_ms)
{
 80b9a1c:	b580      	push	{r7, lr}
 80b9a1e:	b086      	sub	sp, #24
 80b9a20:	af00      	add	r7, sp, #0
 80b9a22:	6078      	str	r0, [r7, #4]
 80b9a24:	460b      	mov	r3, r1
 80b9a26:	807b      	strh	r3, [r7, #2]
  uint8_t period_reg;
  uint8_t tick_interval_reg;
  uint8_t ret_val = 0;
 80b9a28:	2300      	movs	r3, #0
 80b9a2a:	757b      	strb	r3, [r7, #21]

  if (dev_ptr->part_number == CH101_PART_NUMBER) {
 80b9a2c:	687b      	ldr	r3, [r7, #4]
 80b9a2e:	8b9b      	ldrh	r3, [r3, #28]
 80b9a30:	2b65      	cmp	r3, #101	; 0x65
 80b9a32:	d104      	bne.n	80b9a3e <ch_common_set_sample_interval+0x22>
    period_reg = CH101_COMMON_REG_PERIOD;
 80b9a34:	2305      	movs	r3, #5
 80b9a36:	75fb      	strb	r3, [r7, #23]
    tick_interval_reg = CH101_COMMON_REG_TICK_INTERVAL;
 80b9a38:	2302      	movs	r3, #2
 80b9a3a:	75bb      	strb	r3, [r7, #22]
 80b9a3c:	e003      	b.n	80b9a46 <ch_common_set_sample_interval+0x2a>
  } else {
    period_reg = CH201_COMMON_REG_PERIOD;
 80b9a3e:	2305      	movs	r3, #5
 80b9a40:	75fb      	strb	r3, [r7, #23]
    tick_interval_reg = CH201_COMMON_REG_TICK_INTERVAL;
 80b9a42:	2302      	movs	r3, #2
 80b9a44:	75bb      	strb	r3, [r7, #22]
  }

  if (dev_ptr->sensor_connected) {
 80b9a46:	687b      	ldr	r3, [r7, #4]
 80b9a48:	7fdb      	ldrb	r3, [r3, #31]
 80b9a4a:	2b00      	cmp	r3, #0
 80b9a4c:	d038      	beq.n	80b9ac0 <ch_common_set_sample_interval+0xa4>
    uint32_t sample_interval =
        dev_ptr->rtc_cal_result * interval_ms /
 80b9a4e:	687b      	ldr	r3, [r7, #4]
 80b9a50:	899b      	ldrh	r3, [r3, #12]
 80b9a52:	461a      	mov	r2, r3
 80b9a54:	887b      	ldrh	r3, [r7, #2]
 80b9a56:	fb03 f302 	mul.w	r3, r3, r2
        dev_ptr->group->rtc_cal_pulse_ms;
 80b9a5a:	687a      	ldr	r2, [r7, #4]
 80b9a5c:	6812      	ldr	r2, [r2, #0]
 80b9a5e:	88d2      	ldrh	r2, [r2, #6]
        dev_ptr->rtc_cal_result * interval_ms /
 80b9a60:	fb93 f3f2 	sdiv	r3, r3, r2
    uint32_t sample_interval =
 80b9a64:	60bb      	str	r3, [r7, #8]
    uint32_t period;

    if (interval_ms != 0) {
 80b9a66:	887b      	ldrh	r3, [r7, #2]
 80b9a68:	2b00      	cmp	r3, #0
 80b9a6a:	d009      	beq.n	80b9a80 <ch_common_set_sample_interval+0x64>
      period = (sample_interval / 2048) + 1;    // XXX need define
 80b9a6c:	68bb      	ldr	r3, [r7, #8]
 80b9a6e:	0adb      	lsrs	r3, r3, #11
 80b9a70:	3301      	adds	r3, #1
 80b9a72:	613b      	str	r3, [r7, #16]
      if (period > UINT8_MAX) { /* check if result fits in register */
 80b9a74:	693b      	ldr	r3, [r7, #16]
 80b9a76:	2bff      	cmp	r3, #255	; 0xff
 80b9a78:	d904      	bls.n	80b9a84 <ch_common_set_sample_interval+0x68>
        ret_val = 1;
 80b9a7a:	2301      	movs	r3, #1
 80b9a7c:	757b      	strb	r3, [r7, #21]
 80b9a7e:	e001      	b.n	80b9a84 <ch_common_set_sample_interval+0x68>
      }
    } else {
      period = 0;
 80b9a80:	2300      	movs	r3, #0
 80b9a82:	613b      	str	r3, [r7, #16]
    }

    if (ret_val == 0) {
 80b9a84:	7d7b      	ldrb	r3, [r7, #21]
 80b9a86:	2b00      	cmp	r3, #0
 80b9a88:	d11a      	bne.n	80b9ac0 <ch_common_set_sample_interval+0xa4>
      uint32_t tick_interval;

      if (period != 0) {
 80b9a8a:	693b      	ldr	r3, [r7, #16]
 80b9a8c:	2b00      	cmp	r3, #0
 80b9a8e:	d005      	beq.n	80b9a9c <ch_common_set_sample_interval+0x80>
        tick_interval = sample_interval / period;
 80b9a90:	68ba      	ldr	r2, [r7, #8]
 80b9a92:	693b      	ldr	r3, [r7, #16]
 80b9a94:	fbb2 f3f3 	udiv	r3, r2, r3
 80b9a98:	60fb      	str	r3, [r7, #12]
 80b9a9a:	e001      	b.n	80b9aa0 <ch_common_set_sample_interval+0x84>
      } else {
        tick_interval = 0;
 80b9a9c:	2300      	movs	r3, #0
 80b9a9e:	60fb      	str	r3, [r7, #12]
      char cbuf[80];
      snprintf(cbuf, sizeof(cbuf), "Set period=%lu, tick_interval=%lu\n",
               period, tick_interval);
      chbsp_print_str(cbuf);
#endif
      chdrv_write_byte(dev_ptr, period_reg, (uint8_t) period);
 80b9aa0:	7dfb      	ldrb	r3, [r7, #23]
 80b9aa2:	b29b      	uxth	r3, r3
 80b9aa4:	693a      	ldr	r2, [r7, #16]
 80b9aa6:	b2d2      	uxtb	r2, r2
 80b9aa8:	4619      	mov	r1, r3
 80b9aaa:	6878      	ldr	r0, [r7, #4]
 80b9aac:	f000 fc91 	bl	80ba3d2 <chdrv_write_byte>
      chdrv_write_word(dev_ptr, tick_interval_reg, (uint16_t) tick_interval);
 80b9ab0:	7dbb      	ldrb	r3, [r7, #22]
 80b9ab2:	b29b      	uxth	r3, r3
 80b9ab4:	68fa      	ldr	r2, [r7, #12]
 80b9ab6:	b292      	uxth	r2, r2
 80b9ab8:	4619      	mov	r1, r3
 80b9aba:	6878      	ldr	r0, [r7, #4]
 80b9abc:	f000 fca2 	bl	80ba404 <chdrv_write_word>
    }
  }

  return ret_val;
 80b9ac0:	7d7b      	ldrb	r3, [r7, #21]
}
 80b9ac2:	4618      	mov	r0, r3
 80b9ac4:	3718      	adds	r7, #24
 80b9ac6:	46bd      	mov	sp, r7
 80b9ac8:	bd80      	pop	{r7, pc}

080b9aca <ch_common_set_num_samples>:

// XXX    note uses actual num_samples, even for CH201
uint8_t ch_common_set_num_samples(ch_dev_t * dev_ptr, uint16_t num_samples)
{
 80b9aca:	b580      	push	{r7, lr}
 80b9acc:	b084      	sub	sp, #16
 80b9ace:	af00      	add	r7, sp, #0
 80b9ad0:	6078      	str	r0, [r7, #4]
 80b9ad2:	460b      	mov	r3, r1
 80b9ad4:	807b      	strh	r3, [r7, #2]
  uint8_t max_range_reg;
  uint8_t ret_val = 1;          // default is error (not connected or num_samples too big)
 80b9ad6:	2301      	movs	r3, #1
 80b9ad8:	73bb      	strb	r3, [r7, #14]

  if (dev_ptr->part_number == CH101_PART_NUMBER) {
 80b9ada:	687b      	ldr	r3, [r7, #4]
 80b9adc:	8b9b      	ldrh	r3, [r3, #28]
 80b9ade:	2b65      	cmp	r3, #101	; 0x65
 80b9ae0:	d102      	bne.n	80b9ae8 <ch_common_set_num_samples+0x1e>
    max_range_reg = CH101_COMMON_REG_MAX_RANGE;
 80b9ae2:	2307      	movs	r3, #7
 80b9ae4:	73fb      	strb	r3, [r7, #15]
 80b9ae6:	e004      	b.n	80b9af2 <ch_common_set_num_samples+0x28>
  } else {
    max_range_reg = CH201_COMMON_REG_MAX_RANGE;
 80b9ae8:	2307      	movs	r3, #7
 80b9aea:	73fb      	strb	r3, [r7, #15]
    num_samples /= 2;           // each internal count for CH201 represents 2 physical samples
 80b9aec:	887b      	ldrh	r3, [r7, #2]
 80b9aee:	085b      	lsrs	r3, r3, #1
 80b9af0:	807b      	strh	r3, [r7, #2]
  }

  if (dev_ptr->sensor_connected && (num_samples <= UINT8_MAX)) {
 80b9af2:	687b      	ldr	r3, [r7, #4]
 80b9af4:	7fdb      	ldrb	r3, [r3, #31]
 80b9af6:	2b00      	cmp	r3, #0
 80b9af8:	d00c      	beq.n	80b9b14 <ch_common_set_num_samples+0x4a>
 80b9afa:	887b      	ldrh	r3, [r7, #2]
 80b9afc:	2bff      	cmp	r3, #255	; 0xff
 80b9afe:	d809      	bhi.n	80b9b14 <ch_common_set_num_samples+0x4a>
    ret_val = chdrv_write_byte(dev_ptr, max_range_reg, num_samples);
 80b9b00:	7bfb      	ldrb	r3, [r7, #15]
 80b9b02:	b29b      	uxth	r3, r3
 80b9b04:	887a      	ldrh	r2, [r7, #2]
 80b9b06:	b2d2      	uxtb	r2, r2
 80b9b08:	4619      	mov	r1, r3
 80b9b0a:	6878      	ldr	r0, [r7, #4]
 80b9b0c:	f000 fc61 	bl	80ba3d2 <chdrv_write_byte>
 80b9b10:	4603      	mov	r3, r0
 80b9b12:	73bb      	strb	r3, [r7, #14]
  }

  if (!ret_val) {
 80b9b14:	7bbb      	ldrb	r3, [r7, #14]
 80b9b16:	2b00      	cmp	r3, #0
 80b9b18:	d103      	bne.n	80b9b22 <ch_common_set_num_samples+0x58>
    dev_ptr->num_rx_samples = num_samples;
 80b9b1a:	687b      	ldr	r3, [r7, #4]
 80b9b1c:	887a      	ldrh	r2, [r7, #2]
 80b9b1e:	849a      	strh	r2, [r3, #36]	; 0x24
 80b9b20:	e002      	b.n	80b9b28 <ch_common_set_num_samples+0x5e>
  } else {
    dev_ptr->num_rx_samples = 0;
 80b9b22:	687b      	ldr	r3, [r7, #4]
 80b9b24:	2200      	movs	r2, #0
 80b9b26:	849a      	strh	r2, [r3, #36]	; 0x24
  }

  return ret_val;
 80b9b28:	7bbb      	ldrb	r3, [r7, #14]
}
 80b9b2a:	4618      	mov	r0, r3
 80b9b2c:	3710      	adds	r7, #16
 80b9b2e:	46bd      	mov	sp, r7
 80b9b30:	bd80      	pop	{r7, pc}

080b9b32 <ch_common_set_max_range>:

uint8_t ch_common_set_max_range(ch_dev_t * dev_ptr, uint16_t max_range_mm)
{
 80b9b32:	b580      	push	{r7, lr}
 80b9b34:	b084      	sub	sp, #16
 80b9b36:	af00      	add	r7, sp, #0
 80b9b38:	6078      	str	r0, [r7, #4]
 80b9b3a:	460b      	mov	r3, r1
 80b9b3c:	807b      	strh	r3, [r7, #2]
  uint8_t ret_val;
  uint32_t num_samples;

  ret_val = (!dev_ptr->sensor_connected);
 80b9b3e:	687b      	ldr	r3, [r7, #4]
 80b9b40:	7fdb      	ldrb	r3, [r3, #31]
 80b9b42:	2b00      	cmp	r3, #0
 80b9b44:	bf0c      	ite	eq
 80b9b46:	2301      	moveq	r3, #1
 80b9b48:	2300      	movne	r3, #0
 80b9b4a:	b2db      	uxtb	r3, r3
 80b9b4c:	73fb      	strb	r3, [r7, #15]

  if (!ret_val) {
 80b9b4e:	7bfb      	ldrb	r3, [r7, #15]
 80b9b50:	2b00      	cmp	r3, #0
 80b9b52:	d11d      	bne.n	80b9b90 <ch_common_set_max_range+0x5e>
    num_samples = ch_common_mm_to_samples(dev_ptr, max_range_mm);
 80b9b54:	887b      	ldrh	r3, [r7, #2]
 80b9b56:	4619      	mov	r1, r3
 80b9b58:	6878      	ldr	r0, [r7, #4]
 80b9b5a:	f000 f82a 	bl	80b9bb2 <ch_common_mm_to_samples>
 80b9b5e:	4603      	mov	r3, r0
 80b9b60:	60bb      	str	r3, [r7, #8]

    if (num_samples > dev_ptr->max_samples) {
 80b9b62:	687b      	ldr	r3, [r7, #4]
 80b9b64:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80b9b66:	461a      	mov	r2, r3
 80b9b68:	68bb      	ldr	r3, [r7, #8]
 80b9b6a:	4293      	cmp	r3, r2
 80b9b6c:	d90d      	bls.n	80b9b8a <ch_common_set_max_range+0x58>
      num_samples = dev_ptr->max_samples;
 80b9b6e:	687b      	ldr	r3, [r7, #4]
 80b9b70:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80b9b72:	60bb      	str	r3, [r7, #8]
      dev_ptr->max_range = ch_samples_to_mm(dev_ptr, num_samples);      // store reduced max range
 80b9b74:	68bb      	ldr	r3, [r7, #8]
 80b9b76:	b29b      	uxth	r3, r3
 80b9b78:	4619      	mov	r1, r3
 80b9b7a:	6878      	ldr	r0, [r7, #4]
 80b9b7c:	f7ff fe62 	bl	80b9844 <ch_samples_to_mm>
 80b9b80:	4603      	mov	r3, r0
 80b9b82:	461a      	mov	r2, r3
 80b9b84:	687b      	ldr	r3, [r7, #4]
 80b9b86:	80da      	strh	r2, [r3, #6]
 80b9b88:	e002      	b.n	80b9b90 <ch_common_set_max_range+0x5e>
    } else {
      dev_ptr->max_range = max_range_mm;        // store user-specified max range
 80b9b8a:	687b      	ldr	r3, [r7, #4]
 80b9b8c:	887a      	ldrh	r2, [r7, #2]
 80b9b8e:	80da      	strh	r2, [r3, #6]
    snprintf(cbuf, sizeof(cbuf), "num_samples=%lu\n", num_samples);
    chbsp_print_str(cbuf);
#endif
  }

  if (!ret_val) {
 80b9b90:	7bfb      	ldrb	r3, [r7, #15]
 80b9b92:	2b00      	cmp	r3, #0
 80b9b94:	d108      	bne.n	80b9ba8 <ch_common_set_max_range+0x76>
    ret_val = ch_common_set_num_samples(dev_ptr, (uint8_t) num_samples);
 80b9b96:	68bb      	ldr	r3, [r7, #8]
 80b9b98:	b2db      	uxtb	r3, r3
 80b9b9a:	b29b      	uxth	r3, r3
 80b9b9c:	4619      	mov	r1, r3
 80b9b9e:	6878      	ldr	r0, [r7, #4]
 80b9ba0:	f7ff ff93 	bl	80b9aca <ch_common_set_num_samples>
 80b9ba4:	4603      	mov	r3, r0
 80b9ba6:	73fb      	strb	r3, [r7, #15]
  }
#ifdef CHDRV_DEBUG
  printf("Set samples: ret_val: %u  dev_ptr->num_rx_samples: %u\n", ret_val,
         dev_ptr->num_rx_samples);
#endif
  return ret_val;
 80b9ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 80b9baa:	4618      	mov	r0, r3
 80b9bac:	3710      	adds	r7, #16
 80b9bae:	46bd      	mov	sp, r7
 80b9bb0:	bd80      	pop	{r7, pc}

080b9bb2 <ch_common_mm_to_samples>:

uint16_t ch_common_mm_to_samples(ch_dev_t * dev_ptr, uint16_t num_mm)
{
 80b9bb2:	b580      	push	{r7, lr}
 80b9bb4:	b086      	sub	sp, #24
 80b9bb6:	af00      	add	r7, sp, #0
 80b9bb8:	6078      	str	r0, [r7, #4]
 80b9bba:	460b      	mov	r3, r1
 80b9bbc:	807b      	strh	r3, [r7, #2]
  uint8_t err;
  uint16_t scale_factor;
  uint32_t num_samples = 0;
 80b9bbe:	2300      	movs	r3, #0
 80b9bc0:	613b      	str	r3, [r7, #16]
  uint32_t divisor1;
  uint32_t divisor2 = (dev_ptr->group->rtc_cal_pulse_ms * CH_SPEEDOFSOUND_MPS);
 80b9bc2:	687b      	ldr	r3, [r7, #4]
 80b9bc4:	681b      	ldr	r3, [r3, #0]
 80b9bc6:	88db      	ldrh	r3, [r3, #6]
 80b9bc8:	461a      	mov	r2, r3
 80b9bca:	f240 1357 	movw	r3, #343	; 0x157
 80b9bce:	fb03 f302 	mul.w	r3, r3, r2
 80b9bd2:	60bb      	str	r3, [r7, #8]

  err = (!dev_ptr) || (!dev_ptr->sensor_connected);
 80b9bd4:	687b      	ldr	r3, [r7, #4]
 80b9bd6:	2b00      	cmp	r3, #0
 80b9bd8:	d003      	beq.n	80b9be2 <ch_common_mm_to_samples+0x30>
 80b9bda:	687b      	ldr	r3, [r7, #4]
 80b9bdc:	7fdb      	ldrb	r3, [r3, #31]
 80b9bde:	2b00      	cmp	r3, #0
 80b9be0:	d101      	bne.n	80b9be6 <ch_common_mm_to_samples+0x34>
 80b9be2:	2301      	movs	r3, #1
 80b9be4:	e000      	b.n	80b9be8 <ch_common_mm_to_samples+0x36>
 80b9be6:	2300      	movs	r3, #0
 80b9be8:	75fb      	strb	r3, [r7, #23]

  if (!err) {
 80b9bea:	7dfb      	ldrb	r3, [r7, #23]
 80b9bec:	2b00      	cmp	r3, #0
 80b9bee:	d114      	bne.n	80b9c1a <ch_common_mm_to_samples+0x68>
    if (dev_ptr->part_number == CH101_PART_NUMBER) {
 80b9bf0:	687b      	ldr	r3, [r7, #4]
 80b9bf2:	8b9b      	ldrh	r3, [r3, #28]
 80b9bf4:	2b65      	cmp	r3, #101	; 0x65
 80b9bf6:	d103      	bne.n	80b9c00 <ch_common_mm_to_samples+0x4e>
      divisor1 = 0x2000;        // (4*16*128)  XXX need define(s)
 80b9bf8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80b9bfc:	60fb      	str	r3, [r7, #12]
 80b9bfe:	e002      	b.n	80b9c06 <ch_common_mm_to_samples+0x54>
    } else {
      divisor1 = 0x4000;        // (4*16*128*2)  XXX need define(s)
 80b9c00:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80b9c04:	60fb      	str	r3, [r7, #12]
    }

    if (dev_ptr->scale_factor == 0) {
 80b9c06:	687b      	ldr	r3, [r7, #4]
 80b9c08:	8adb      	ldrh	r3, [r3, #22]
 80b9c0a:	2b00      	cmp	r3, #0
 80b9c0c:	d102      	bne.n	80b9c14 <ch_common_mm_to_samples+0x62>
      ch_common_store_scale_factor(dev_ptr);
 80b9c0e:	6878      	ldr	r0, [r7, #4]
 80b9c10:	f000 f998 	bl	80b9f44 <ch_common_store_scale_factor>
    }

    scale_factor = dev_ptr->scale_factor;
 80b9c14:	687b      	ldr	r3, [r7, #4]
 80b9c16:	8adb      	ldrh	r3, [r3, #22]
 80b9c18:	82bb      	strh	r3, [r7, #20]
  }

  if (!err) {
 80b9c1a:	7dfb      	ldrb	r3, [r7, #23]
 80b9c1c:	2b00      	cmp	r3, #0
 80b9c1e:	d121      	bne.n	80b9c64 <ch_common_mm_to_samples+0xb2>
    // Two steps of division to avoid needing a type larger than 32 bits
    // Ceiling division to ensure result is at least enough samples to meet specified range
    num_samples =
        ((dev_ptr->rtc_cal_result * scale_factor) + (divisor1 - 1)) / divisor1;
 80b9c20:	687b      	ldr	r3, [r7, #4]
 80b9c22:	899b      	ldrh	r3, [r3, #12]
 80b9c24:	461a      	mov	r2, r3
 80b9c26:	8abb      	ldrh	r3, [r7, #20]
 80b9c28:	fb03 f302 	mul.w	r3, r3, r2
 80b9c2c:	461a      	mov	r2, r3
 80b9c2e:	68fb      	ldr	r3, [r7, #12]
 80b9c30:	4413      	add	r3, r2
 80b9c32:	1e5a      	subs	r2, r3, #1
    num_samples =
 80b9c34:	68fb      	ldr	r3, [r7, #12]
 80b9c36:	fbb2 f3f3 	udiv	r3, r2, r3
 80b9c3a:	613b      	str	r3, [r7, #16]
    num_samples = ((num_samples * num_mm) + (divisor2 - 1)) / divisor2;
 80b9c3c:	887b      	ldrh	r3, [r7, #2]
 80b9c3e:	693a      	ldr	r2, [r7, #16]
 80b9c40:	fb02 f203 	mul.w	r2, r2, r3
 80b9c44:	68bb      	ldr	r3, [r7, #8]
 80b9c46:	4413      	add	r3, r2
 80b9c48:	1e5a      	subs	r2, r3, #1
 80b9c4a:	68bb      	ldr	r3, [r7, #8]
 80b9c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 80b9c50:	613b      	str	r3, [r7, #16]
    err = num_samples > UINT16_MAX;
 80b9c52:	693b      	ldr	r3, [r7, #16]
 80b9c54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80b9c58:	4293      	cmp	r3, r2
 80b9c5a:	bf8c      	ite	hi
 80b9c5c:	2301      	movhi	r3, #1
 80b9c5e:	2300      	movls	r3, #0
 80b9c60:	b2db      	uxtb	r3, r3
 80b9c62:	75fb      	strb	r3, [r7, #23]
  }

  if (!err) {
 80b9c64:	7dfb      	ldrb	r3, [r7, #23]
 80b9c66:	2b00      	cmp	r3, #0
 80b9c68:	d10d      	bne.n	80b9c86 <ch_common_mm_to_samples+0xd4>
    if (dev_ptr->part_number == CH201_PART_NUMBER) {
 80b9c6a:	687b      	ldr	r3, [r7, #4]
 80b9c6c:	8b9b      	ldrh	r3, [r3, #28]
 80b9c6e:	2bc9      	cmp	r3, #201	; 0xc9
 80b9c70:	d102      	bne.n	80b9c78 <ch_common_mm_to_samples+0xc6>
      num_samples *= 2;         // each internal count for CH201 represents 2 physical samples
 80b9c72:	693b      	ldr	r3, [r7, #16]
 80b9c74:	005b      	lsls	r3, r3, #1
 80b9c76:	613b      	str	r3, [r7, #16]
    }

    /* Adjust for oversampling, if used */
    num_samples <<= dev_ptr->oversample;
 80b9c78:	687b      	ldr	r3, [r7, #4]
 80b9c7a:	f993 301e 	ldrsb.w	r3, [r3, #30]
 80b9c7e:	461a      	mov	r2, r3
 80b9c80:	693b      	ldr	r3, [r7, #16]
 80b9c82:	4093      	lsls	r3, r2
 80b9c84:	613b      	str	r3, [r7, #16]
  }
  if (err) {
 80b9c86:	7dfb      	ldrb	r3, [r7, #23]
 80b9c88:	2b00      	cmp	r3, #0
 80b9c8a:	d001      	beq.n	80b9c90 <ch_common_mm_to_samples+0xde>
    num_samples = 0;            // return zero if error
 80b9c8c:	2300      	movs	r3, #0
 80b9c8e:	613b      	str	r3, [r7, #16]
  }

  return (uint16_t) num_samples;
 80b9c90:	693b      	ldr	r3, [r7, #16]
 80b9c92:	b29b      	uxth	r3, r3
}
 80b9c94:	4618      	mov	r0, r3
 80b9c96:	3718      	adds	r7, #24
 80b9c98:	46bd      	mov	sp, r7
 80b9c9a:	bd80      	pop	{r7, pc}

080b9c9c <ch_common_samples_to_mm>:

uint16_t ch_common_samples_to_mm(ch_dev_t * dev_ptr, uint16_t num_samples)
{
 80b9c9c:	b480      	push	{r7}
 80b9c9e:	b085      	sub	sp, #20
 80b9ca0:	af00      	add	r7, sp, #0
 80b9ca2:	6078      	str	r0, [r7, #4]
 80b9ca4:	460b      	mov	r3, r1
 80b9ca6:	807b      	strh	r3, [r7, #2]
  uint32_t num_mm = 0;
 80b9ca8:	2300      	movs	r3, #0
 80b9caa:	60fb      	str	r3, [r7, #12]
  uint32_t op_freq = dev_ptr->op_frequency;
 80b9cac:	687b      	ldr	r3, [r7, #4]
 80b9cae:	691b      	ldr	r3, [r3, #16]
 80b9cb0:	60bb      	str	r3, [r7, #8]

  if (op_freq != 0) {
 80b9cb2:	68bb      	ldr	r3, [r7, #8]
 80b9cb4:	2b00      	cmp	r3, #0
 80b9cb6:	d008      	beq.n	80b9cca <ch_common_samples_to_mm+0x2e>
    num_mm =
        ((uint32_t) num_samples * CH_SPEEDOFSOUND_MPS * 8 * 1000) / (op_freq *
 80b9cb8:	887b      	ldrh	r3, [r7, #2]
 80b9cba:	4a0b      	ldr	r2, [pc, #44]	; (80b9ce8 <ch_common_samples_to_mm+0x4c>)
 80b9cbc:	fb02 f203 	mul.w	r2, r2, r3
 80b9cc0:	68bb      	ldr	r3, [r7, #8]
 80b9cc2:	005b      	lsls	r3, r3, #1
    num_mm =
 80b9cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 80b9cc8:	60fb      	str	r3, [r7, #12]
                                                                     2);
  }

  /* Adjust for oversampling, if used */
  num_mm >>= dev_ptr->oversample;
 80b9cca:	687b      	ldr	r3, [r7, #4]
 80b9ccc:	f993 301e 	ldrsb.w	r3, [r3, #30]
 80b9cd0:	461a      	mov	r2, r3
 80b9cd2:	68fb      	ldr	r3, [r7, #12]
 80b9cd4:	40d3      	lsrs	r3, r2
 80b9cd6:	60fb      	str	r3, [r7, #12]

  return (uint16_t) num_mm;
 80b9cd8:	68fb      	ldr	r3, [r7, #12]
 80b9cda:	b29b      	uxth	r3, r3
}
 80b9cdc:	4618      	mov	r0, r3
 80b9cde:	3714      	adds	r7, #20
 80b9ce0:	46bd      	mov	sp, r7
 80b9ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b9ce6:	4770      	bx	lr
 80b9ce8:	0029dec0 	.word	0x0029dec0

080b9cec <ch_common_get_range>:
  }
  return ret_val;
}

uint32_t ch_common_get_range(ch_dev_t * dev_ptr, ch_range_t range_type)
{
 80b9cec:	b580      	push	{r7, lr}
 80b9cee:	b08a      	sub	sp, #40	; 0x28
 80b9cf0:	af00      	add	r7, sp, #0
 80b9cf2:	6078      	str	r0, [r7, #4]
 80b9cf4:	460b      	mov	r3, r1
 80b9cf6:	70fb      	strb	r3, [r7, #3]
  uint8_t tof_reg;
  uint32_t range = CH_NO_TARGET;
 80b9cf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80b9cfc:	623b      	str	r3, [r7, #32]
  uint16_t time_of_flight;
  uint16_t scale_factor;
  int err;

  if (dev_ptr->sensor_connected) {
 80b9cfe:	687b      	ldr	r3, [r7, #4]
 80b9d00:	7fdb      	ldrb	r3, [r3, #31]
 80b9d02:	2b00      	cmp	r3, #0
 80b9d04:	d055      	beq.n	80b9db2 <ch_common_get_range+0xc6>

    if (dev_ptr->part_number == CH101_PART_NUMBER) {
 80b9d06:	687b      	ldr	r3, [r7, #4]
 80b9d08:	8b9b      	ldrh	r3, [r3, #28]
 80b9d0a:	2b65      	cmp	r3, #101	; 0x65
 80b9d0c:	d103      	bne.n	80b9d16 <ch_common_get_range+0x2a>
      tof_reg = CH101_COMMON_REG_TOF;
 80b9d0e:	2318      	movs	r3, #24
 80b9d10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80b9d14:	e002      	b.n	80b9d1c <ch_common_get_range+0x30>
    } else {
      tof_reg = CH201_COMMON_REG_TOF;
 80b9d16:	2324      	movs	r3, #36	; 0x24
 80b9d18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    err = chdrv_read_word(dev_ptr, tof_reg, &time_of_flight);
 80b9d1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80b9d20:	b29b      	uxth	r3, r3
 80b9d22:	f107 020e 	add.w	r2, r7, #14
 80b9d26:	4619      	mov	r1, r3
 80b9d28:	6878      	ldr	r0, [r7, #4]
 80b9d2a:	f000 fbb1 	bl	80ba490 <chdrv_read_word>
 80b9d2e:	61f8      	str	r0, [r7, #28]

    if (!err && (time_of_flight != UINT16_MAX)) {       // If object detected
 80b9d30:	69fb      	ldr	r3, [r7, #28]
 80b9d32:	2b00      	cmp	r3, #0
 80b9d34:	d13d      	bne.n	80b9db2 <ch_common_get_range+0xc6>
 80b9d36:	89fb      	ldrh	r3, [r7, #14]
 80b9d38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80b9d3c:	4293      	cmp	r3, r2
 80b9d3e:	d038      	beq.n	80b9db2 <ch_common_get_range+0xc6>

      if (dev_ptr->scale_factor == 0) {
 80b9d40:	687b      	ldr	r3, [r7, #4]
 80b9d42:	8adb      	ldrh	r3, [r3, #22]
 80b9d44:	2b00      	cmp	r3, #0
 80b9d46:	d102      	bne.n	80b9d4e <ch_common_get_range+0x62>
        ch_common_store_scale_factor(dev_ptr);
 80b9d48:	6878      	ldr	r0, [r7, #4]
 80b9d4a:	f000 f8fb 	bl	80b9f44 <ch_common_store_scale_factor>
      }
      scale_factor = dev_ptr->scale_factor;
 80b9d4e:	687b      	ldr	r3, [r7, #4]
 80b9d50:	8adb      	ldrh	r3, [r3, #22]
 80b9d52:	837b      	strh	r3, [r7, #26]

      if (scale_factor != 0) {
 80b9d54:	8b7b      	ldrh	r3, [r7, #26]
 80b9d56:	2b00      	cmp	r3, #0
 80b9d58:	d02b      	beq.n	80b9db2 <ch_common_get_range+0xc6>
        uint32_t num =
            (CH_SPEEDOFSOUND_MPS * dev_ptr->group->rtc_cal_pulse_ms *
 80b9d5a:	687b      	ldr	r3, [r7, #4]
 80b9d5c:	681b      	ldr	r3, [r3, #0]
 80b9d5e:	88db      	ldrh	r3, [r3, #6]
             (uint32_t) time_of_flight);
 80b9d60:	89fa      	ldrh	r2, [r7, #14]
            (CH_SPEEDOFSOUND_MPS * dev_ptr->group->rtc_cal_pulse_ms *
 80b9d62:	fb02 f303 	mul.w	r3, r2, r3
        uint32_t num =
 80b9d66:	f240 1257 	movw	r2, #343	; 0x157
 80b9d6a:	fb02 f303 	mul.w	r3, r2, r3
 80b9d6e:	617b      	str	r3, [r7, #20]
        uint32_t den = ((uint32_t) dev_ptr->rtc_cal_result * (uint32_t) scale_factor) >> 11;    // XXX need define
 80b9d70:	687b      	ldr	r3, [r7, #4]
 80b9d72:	899b      	ldrh	r3, [r3, #12]
 80b9d74:	461a      	mov	r2, r3
 80b9d76:	8b7b      	ldrh	r3, [r7, #26]
 80b9d78:	fb03 f302 	mul.w	r3, r3, r2
 80b9d7c:	0adb      	lsrs	r3, r3, #11
 80b9d7e:	613b      	str	r3, [r7, #16]

        range = (num / den);
 80b9d80:	697a      	ldr	r2, [r7, #20]
 80b9d82:	693b      	ldr	r3, [r7, #16]
 80b9d84:	fbb2 f3f3 	udiv	r3, r2, r3
 80b9d88:	623b      	str	r3, [r7, #32]

        if (dev_ptr->part_number == CH201_PART_NUMBER) {
 80b9d8a:	687b      	ldr	r3, [r7, #4]
 80b9d8c:	8b9b      	ldrh	r3, [r3, #28]
 80b9d8e:	2bc9      	cmp	r3, #201	; 0xc9
 80b9d90:	d102      	bne.n	80b9d98 <ch_common_get_range+0xac>
          range *= 2;
 80b9d92:	6a3b      	ldr	r3, [r7, #32]
 80b9d94:	005b      	lsls	r3, r3, #1
 80b9d96:	623b      	str	r3, [r7, #32]
        }

        if (range_type == CH_RANGE_ECHO_ONE_WAY) {
 80b9d98:	78fb      	ldrb	r3, [r7, #3]
 80b9d9a:	2b00      	cmp	r3, #0
 80b9d9c:	d102      	bne.n	80b9da4 <ch_common_get_range+0xb8>
          range /= 2;
 80b9d9e:	6a3b      	ldr	r3, [r7, #32]
 80b9da0:	085b      	lsrs	r3, r3, #1
 80b9da2:	623b      	str	r3, [r7, #32]
        }

        /* Adjust for oversampling, if used */
        range >>= dev_ptr->oversample;
 80b9da4:	687b      	ldr	r3, [r7, #4]
 80b9da6:	f993 301e 	ldrsb.w	r3, [r3, #30]
 80b9daa:	461a      	mov	r2, r3
 80b9dac:	6a3b      	ldr	r3, [r7, #32]
 80b9dae:	40d3      	lsrs	r3, r2
 80b9db0:	623b      	str	r3, [r7, #32]

      }
    }
  }
  return range;
 80b9db2:	6a3b      	ldr	r3, [r7, #32]
}
 80b9db4:	4618      	mov	r0, r3
 80b9db6:	3728      	adds	r7, #40	; 0x28
 80b9db8:	46bd      	mov	sp, r7
 80b9dba:	bd80      	pop	{r7, pc}

080b9dbc <ch_common_get_amplitude>:

uint16_t ch_common_get_amplitude(ch_dev_t * dev_ptr)
{
 80b9dbc:	b580      	push	{r7, lr}
 80b9dbe:	b084      	sub	sp, #16
 80b9dc0:	af00      	add	r7, sp, #0
 80b9dc2:	6078      	str	r0, [r7, #4]
  uint8_t amplitude_reg;
  uint16_t amplitude = 0;
 80b9dc4:	2300      	movs	r3, #0
 80b9dc6:	81bb      	strh	r3, [r7, #12]

  if (dev_ptr->sensor_connected) {
 80b9dc8:	687b      	ldr	r3, [r7, #4]
 80b9dca:	7fdb      	ldrb	r3, [r3, #31]
 80b9dcc:	2b00      	cmp	r3, #0
 80b9dce:	d010      	beq.n	80b9df2 <ch_common_get_amplitude+0x36>
    if (dev_ptr->part_number == CH101_PART_NUMBER) {
 80b9dd0:	687b      	ldr	r3, [r7, #4]
 80b9dd2:	8b9b      	ldrh	r3, [r3, #28]
 80b9dd4:	2b65      	cmp	r3, #101	; 0x65
 80b9dd6:	d102      	bne.n	80b9dde <ch_common_get_amplitude+0x22>
      amplitude_reg = CH101_COMMON_REG_AMPLITUDE;
 80b9dd8:	231a      	movs	r3, #26
 80b9dda:	73fb      	strb	r3, [r7, #15]
 80b9ddc:	e001      	b.n	80b9de2 <ch_common_get_amplitude+0x26>
    } else {
      amplitude_reg = CH201_COMMON_REG_AMPLITUDE;
 80b9dde:	2326      	movs	r3, #38	; 0x26
 80b9de0:	73fb      	strb	r3, [r7, #15]
    }

    chdrv_read_word(dev_ptr, amplitude_reg, &amplitude);
 80b9de2:	7bfb      	ldrb	r3, [r7, #15]
 80b9de4:	b29b      	uxth	r3, r3
 80b9de6:	f107 020c 	add.w	r2, r7, #12
 80b9dea:	4619      	mov	r1, r3
 80b9dec:	6878      	ldr	r0, [r7, #4]
 80b9dee:	f000 fb4f 	bl	80ba490 <chdrv_read_word>
  }

  return amplitude;
 80b9df2:	89bb      	ldrh	r3, [r7, #12]
}
 80b9df4:	4618      	mov	r0, r3
 80b9df6:	3710      	adds	r7, #16
 80b9df8:	46bd      	mov	sp, r7
 80b9dfa:	bd80      	pop	{r7, pc}

080b9dfc <ch_common_get_locked_state>:

uint8_t ch_common_get_locked_state(ch_dev_t * dev_ptr)
{
 80b9dfc:	b580      	push	{r7, lr}
 80b9dfe:	b084      	sub	sp, #16
 80b9e00:	af00      	add	r7, sp, #0
 80b9e02:	6078      	str	r0, [r7, #4]
  uint8_t ready_reg;
  uint8_t lock_mask;
  uint8_t ret_val = 0;
 80b9e04:	2300      	movs	r3, #0
 80b9e06:	737b      	strb	r3, [r7, #13]

  if (dev_ptr->part_number == CH101_PART_NUMBER) {
 80b9e08:	687b      	ldr	r3, [r7, #4]
 80b9e0a:	8b9b      	ldrh	r3, [r3, #28]
 80b9e0c:	2b65      	cmp	r3, #101	; 0x65
 80b9e0e:	d104      	bne.n	80b9e1a <ch_common_get_locked_state+0x1e>
    ready_reg = CH101_COMMON_REG_READY;
 80b9e10:	2314      	movs	r3, #20
 80b9e12:	73fb      	strb	r3, [r7, #15]
    lock_mask = CH101_COMMON_READY_FREQ_LOCKED;
 80b9e14:	2302      	movs	r3, #2
 80b9e16:	73bb      	strb	r3, [r7, #14]
 80b9e18:	e003      	b.n	80b9e22 <ch_common_get_locked_state+0x26>
  } else {
    ready_reg = CH201_COMMON_REG_READY;
 80b9e1a:	2314      	movs	r3, #20
 80b9e1c:	73fb      	strb	r3, [r7, #15]
    lock_mask = CH201_COMMON_READY_FREQ_LOCKED;
 80b9e1e:	2302      	movs	r3, #2
 80b9e20:	73bb      	strb	r3, [r7, #14]
  }

  if (dev_ptr->sensor_connected) {
 80b9e22:	687b      	ldr	r3, [r7, #4]
 80b9e24:	7fdb      	ldrb	r3, [r3, #31]
 80b9e26:	2b00      	cmp	r3, #0
 80b9e28:	d011      	beq.n	80b9e4e <ch_common_get_locked_state+0x52>
    uint8_t ready_value = 0;
 80b9e2a:	2300      	movs	r3, #0
 80b9e2c:	733b      	strb	r3, [r7, #12]
    chdrv_read_byte(dev_ptr, ready_reg, &ready_value);
 80b9e2e:	7bfb      	ldrb	r3, [r7, #15]
 80b9e30:	b29b      	uxth	r3, r3
 80b9e32:	f107 020c 	add.w	r2, r7, #12
 80b9e36:	4619      	mov	r1, r3
 80b9e38:	6878      	ldr	r0, [r7, #4]
 80b9e3a:	f000 fb02 	bl	80ba442 <chdrv_read_byte>
    if (ready_value & lock_mask) {
 80b9e3e:	7b3a      	ldrb	r2, [r7, #12]
 80b9e40:	7bbb      	ldrb	r3, [r7, #14]
 80b9e42:	4013      	ands	r3, r2
 80b9e44:	b2db      	uxtb	r3, r3
 80b9e46:	2b00      	cmp	r3, #0
 80b9e48:	d001      	beq.n	80b9e4e <ch_common_get_locked_state+0x52>
      ret_val = 1;
 80b9e4a:	2301      	movs	r3, #1
 80b9e4c:	737b      	strb	r3, [r7, #13]
    }
  }
  return ret_val;
 80b9e4e:	7b7b      	ldrb	r3, [r7, #13]
}
 80b9e50:	4618      	mov	r0, r3
 80b9e52:	3710      	adds	r7, #16
 80b9e54:	46bd      	mov	sp, r7
 80b9e56:	bd80      	pop	{r7, pc}

080b9e58 <ch_common_prepare_pulse_timer>:

void ch_common_prepare_pulse_timer(ch_dev_t * dev_ptr)
{
 80b9e58:	b580      	push	{r7, lr}
 80b9e5a:	b084      	sub	sp, #16
 80b9e5c:	af00      	add	r7, sp, #0
 80b9e5e:	6078      	str	r0, [r7, #4]
  uint8_t cal_trig_reg;

  if (dev_ptr->part_number == CH101_PART_NUMBER) {
 80b9e60:	687b      	ldr	r3, [r7, #4]
 80b9e62:	8b9b      	ldrh	r3, [r3, #28]
 80b9e64:	2b65      	cmp	r3, #101	; 0x65
 80b9e66:	d102      	bne.n	80b9e6e <ch_common_prepare_pulse_timer+0x16>
    cal_trig_reg = CH101_COMMON_REG_CAL_TRIG;
 80b9e68:	2306      	movs	r3, #6
 80b9e6a:	73fb      	strb	r3, [r7, #15]
 80b9e6c:	e001      	b.n	80b9e72 <ch_common_prepare_pulse_timer+0x1a>
  } else {
    cal_trig_reg = CH201_COMMON_REG_CAL_TRIG;
 80b9e6e:	2306      	movs	r3, #6
 80b9e70:	73fb      	strb	r3, [r7, #15]
  }

  chdrv_write_byte(dev_ptr, cal_trig_reg, 0);
 80b9e72:	7bfb      	ldrb	r3, [r7, #15]
 80b9e74:	b29b      	uxth	r3, r3
 80b9e76:	2200      	movs	r2, #0
 80b9e78:	4619      	mov	r1, r3
 80b9e7a:	6878      	ldr	r0, [r7, #4]
 80b9e7c:	f000 faa9 	bl	80ba3d2 <chdrv_write_byte>
}
 80b9e80:	bf00      	nop
 80b9e82:	3710      	adds	r7, #16
 80b9e84:	46bd      	mov	sp, r7
 80b9e86:	bd80      	pop	{r7, pc}

080b9e88 <ch_common_store_pt_result>:

void ch_common_store_pt_result(ch_dev_t * dev_ptr)
{
 80b9e88:	b580      	push	{r7, lr}
 80b9e8a:	b084      	sub	sp, #16
 80b9e8c:	af00      	add	r7, sp, #0
 80b9e8e:	6078      	str	r0, [r7, #4]
  uint8_t pt_result_reg;
  uint16_t rtc_cal_result;

  if (dev_ptr->part_number == CH101_PART_NUMBER) {
 80b9e90:	687b      	ldr	r3, [r7, #4]
 80b9e92:	8b9b      	ldrh	r3, [r3, #28]
 80b9e94:	2b65      	cmp	r3, #101	; 0x65
 80b9e96:	d102      	bne.n	80b9e9e <ch_common_store_pt_result+0x16>
    pt_result_reg = CH101_COMMON_REG_CAL_RESULT;
 80b9e98:	230a      	movs	r3, #10
 80b9e9a:	73fb      	strb	r3, [r7, #15]
 80b9e9c:	e001      	b.n	80b9ea2 <ch_common_store_pt_result+0x1a>
  } else {
    pt_result_reg = CH201_COMMON_REG_CAL_RESULT;
 80b9e9e:	230a      	movs	r3, #10
 80b9ea0:	73fb      	strb	r3, [r7, #15]
  }

  chdrv_read_word(dev_ptr, pt_result_reg, &rtc_cal_result);
 80b9ea2:	7bfb      	ldrb	r3, [r7, #15]
 80b9ea4:	b29b      	uxth	r3, r3
 80b9ea6:	f107 020c 	add.w	r2, r7, #12
 80b9eaa:	4619      	mov	r1, r3
 80b9eac:	6878      	ldr	r0, [r7, #4]
 80b9eae:	f000 faef 	bl	80ba490 <chdrv_read_word>
  dev_ptr->rtc_cal_result = rtc_cal_result;
 80b9eb2:	89ba      	ldrh	r2, [r7, #12]
 80b9eb4:	687b      	ldr	r3, [r7, #4]
 80b9eb6:	819a      	strh	r2, [r3, #12]
}
 80b9eb8:	bf00      	nop
 80b9eba:	3710      	adds	r7, #16
 80b9ebc:	46bd      	mov	sp, r7
 80b9ebe:	bd80      	pop	{r7, pc}

080b9ec0 <ch_common_store_op_freq>:

void ch_common_store_op_freq(ch_dev_t * dev_ptr)
{
 80b9ec0:	b580      	push	{r7, lr}
 80b9ec2:	b088      	sub	sp, #32
 80b9ec4:	af00      	add	r7, sp, #0
 80b9ec6:	6078      	str	r0, [r7, #4]
  uint32_t freq_counter_cycles;
  uint32_t num;
  uint32_t den;
  uint32_t op_freq;

  if (dev_ptr->part_number == CH101_PART_NUMBER) {
 80b9ec8:	687b      	ldr	r3, [r7, #4]
 80b9eca:	8b9b      	ldrh	r3, [r3, #28]
 80b9ecc:	2b65      	cmp	r3, #101	; 0x65
 80b9ece:	d104      	bne.n	80b9eda <ch_common_store_op_freq+0x1a>
    tof_sf_reg = CH101_COMMON_REG_TOF_SF;
 80b9ed0:	2316      	movs	r3, #22
 80b9ed2:	77fb      	strb	r3, [r7, #31]
    freq_counter_cycles = CH101_FREQCOUNTERCYCLES;
 80b9ed4:	2380      	movs	r3, #128	; 0x80
 80b9ed6:	61bb      	str	r3, [r7, #24]
 80b9ed8:	e003      	b.n	80b9ee2 <ch_common_store_op_freq+0x22>
  } else {
    tof_sf_reg = CH201_COMMON_REG_TOF_SF;
 80b9eda:	2322      	movs	r3, #34	; 0x22
 80b9edc:	77fb      	strb	r3, [r7, #31]
    freq_counter_cycles = CH201_FREQCOUNTERCYCLES;
 80b9ede:	2380      	movs	r3, #128	; 0x80
 80b9ee0:	61bb      	str	r3, [r7, #24]
  }

  chdrv_read_word(dev_ptr, tof_sf_reg, &raw_freq);
 80b9ee2:	7ffb      	ldrb	r3, [r7, #31]
 80b9ee4:	b29b      	uxth	r3, r3
 80b9ee6:	f107 020a 	add.w	r2, r7, #10
 80b9eea:	4619      	mov	r1, r3
 80b9eec:	6878      	ldr	r0, [r7, #4]
 80b9eee:	f000 facf 	bl	80ba490 <chdrv_read_word>

  num =
      (uint32_t) (((dev_ptr->rtc_cal_result) * 1000U) /
 80b9ef2:	687b      	ldr	r3, [r7, #4]
 80b9ef4:	899b      	ldrh	r3, [r3, #12]
 80b9ef6:	461a      	mov	r2, r3
 80b9ef8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80b9efc:	fb03 f202 	mul.w	r2, r3, r2
                  (16U * freq_counter_cycles)) * (uint32_t) (raw_freq);
 80b9f00:	69bb      	ldr	r3, [r7, #24]
 80b9f02:	011b      	lsls	r3, r3, #4
      (uint32_t) (((dev_ptr->rtc_cal_result) * 1000U) /
 80b9f04:	fbb2 f3f3 	udiv	r3, r2, r3
                  (16U * freq_counter_cycles)) * (uint32_t) (raw_freq);
 80b9f08:	897a      	ldrh	r2, [r7, #10]
  num =
 80b9f0a:	fb02 f303 	mul.w	r3, r2, r3
 80b9f0e:	617b      	str	r3, [r7, #20]
  den = (uint32_t) (dev_ptr->group->rtc_cal_pulse_ms);
 80b9f10:	687b      	ldr	r3, [r7, #4]
 80b9f12:	681b      	ldr	r3, [r3, #0]
 80b9f14:	88db      	ldrh	r3, [r3, #6]
 80b9f16:	613b      	str	r3, [r7, #16]
  op_freq = (num / den);
 80b9f18:	697a      	ldr	r2, [r7, #20]
 80b9f1a:	693b      	ldr	r3, [r7, #16]
 80b9f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 80b9f20:	60fb      	str	r3, [r7, #12]

  dev_ptr->op_frequency = op_freq;
 80b9f22:	687b      	ldr	r3, [r7, #4]
 80b9f24:	68fa      	ldr	r2, [r7, #12]
 80b9f26:	611a      	str	r2, [r3, #16]
}
 80b9f28:	bf00      	nop
 80b9f2a:	3720      	adds	r7, #32
 80b9f2c:	46bd      	mov	sp, r7
 80b9f2e:	bd80      	pop	{r7, pc}

080b9f30 <ch_common_store_bandwidth>:

void ch_common_store_bandwidth(ch_dev_t * dev_ptr)
{
 80b9f30:	b480      	push	{r7}
 80b9f32:	b083      	sub	sp, #12
 80b9f34:	af00      	add	r7, sp, #0
 80b9f36:	6078      	str	r0, [r7, #4]
/*
 * Not supported in current GPR firmware
 */
}
 80b9f38:	bf00      	nop
 80b9f3a:	370c      	adds	r7, #12
 80b9f3c:	46bd      	mov	sp, r7
 80b9f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80b9f42:	4770      	bx	lr

080b9f44 <ch_common_store_scale_factor>:

void ch_common_store_scale_factor(ch_dev_t * dev_ptr)
{
 80b9f44:	b580      	push	{r7, lr}
 80b9f46:	b084      	sub	sp, #16
 80b9f48:	af00      	add	r7, sp, #0
 80b9f4a:	6078      	str	r0, [r7, #4]
  uint8_t err;
  uint8_t tof_sf_reg;
  uint16_t scale_factor;

  if (dev_ptr->part_number == CH101_PART_NUMBER) {
 80b9f4c:	687b      	ldr	r3, [r7, #4]
 80b9f4e:	8b9b      	ldrh	r3, [r3, #28]
 80b9f50:	2b65      	cmp	r3, #101	; 0x65
 80b9f52:	d102      	bne.n	80b9f5a <ch_common_store_scale_factor+0x16>
    tof_sf_reg = CH101_COMMON_REG_TOF_SF;
 80b9f54:	2316      	movs	r3, #22
 80b9f56:	73fb      	strb	r3, [r7, #15]
 80b9f58:	e001      	b.n	80b9f5e <ch_common_store_scale_factor+0x1a>
  } else {
    tof_sf_reg = CH201_COMMON_REG_TOF_SF;
 80b9f5a:	2322      	movs	r3, #34	; 0x22
 80b9f5c:	73fb      	strb	r3, [r7, #15]
  }

  err = chdrv_read_word(dev_ptr, tof_sf_reg, &scale_factor);
 80b9f5e:	7bfb      	ldrb	r3, [r7, #15]
 80b9f60:	b29b      	uxth	r3, r3
 80b9f62:	f107 020c 	add.w	r2, r7, #12
 80b9f66:	4619      	mov	r1, r3
 80b9f68:	6878      	ldr	r0, [r7, #4]
 80b9f6a:	f000 fa91 	bl	80ba490 <chdrv_read_word>
 80b9f6e:	4603      	mov	r3, r0
 80b9f70:	73bb      	strb	r3, [r7, #14]
  if (!err) {
 80b9f72:	7bbb      	ldrb	r3, [r7, #14]
 80b9f74:	2b00      	cmp	r3, #0
 80b9f76:	d103      	bne.n	80b9f80 <ch_common_store_scale_factor+0x3c>
    dev_ptr->scale_factor = scale_factor;
 80b9f78:	89ba      	ldrh	r2, [r7, #12]
 80b9f7a:	687b      	ldr	r3, [r7, #4]
 80b9f7c:	82da      	strh	r2, [r3, #22]
  } else {
    dev_ptr->scale_factor = 0;
  }
}
 80b9f7e:	e002      	b.n	80b9f86 <ch_common_store_scale_factor+0x42>
    dev_ptr->scale_factor = 0;
 80b9f80:	687b      	ldr	r3, [r7, #4]
 80b9f82:	2200      	movs	r2, #0
 80b9f84:	82da      	strh	r2, [r3, #22]
}
 80b9f86:	bf00      	nop
 80b9f88:	3710      	adds	r7, #16
 80b9f8a:	46bd      	mov	sp, r7
 80b9f8c:	bd80      	pop	{r7, pc}

080b9f8e <ch_common_set_thresholds>:

uint8_t ch_common_set_thresholds(ch_dev_t * dev_ptr,
                                 ch_thresholds_t * thresholds_ptr)
{
 80b9f8e:	b580      	push	{r7, lr}
 80b9f90:	b088      	sub	sp, #32
 80b9f92:	af00      	add	r7, sp, #0
 80b9f94:	6078      	str	r0, [r7, #4]
 80b9f96:	6039      	str	r1, [r7, #0]

  uint8_t thresh_len_reg = 0;   // offset of register for this threshold's length
 80b9f98:	2300      	movs	r3, #0
 80b9f9a:	77fb      	strb	r3, [r7, #31]
  uint8_t thresh_level_reg;     // threshold level reg (first in array)
  uint8_t max_num_thresholds;
  int ret_val = 1;              // default return = error
 80b9f9c:	2301      	movs	r3, #1
 80b9f9e:	61bb      	str	r3, [r7, #24]
  uint8_t thresh_num;
  uint8_t thresh_len;
  uint16_t thresh_level;
  uint16_t start_sample = 0;
 80b9fa0:	2300      	movs	r3, #0
 80b9fa2:	82bb      	strh	r3, [r7, #20]

  if (dev_ptr->sensor_connected) {
 80b9fa4:	687b      	ldr	r3, [r7, #4]
 80b9fa6:	7fdb      	ldrb	r3, [r3, #31]
 80b9fa8:	2b00      	cmp	r3, #0
 80b9faa:	d070      	beq.n	80ba08e <ch_common_set_thresholds+0x100>

    if (dev_ptr->part_number == CH101_PART_NUMBER) {
 80b9fac:	687b      	ldr	r3, [r7, #4]
 80b9fae:	8b9b      	ldrh	r3, [r3, #28]
 80b9fb0:	2b65      	cmp	r3, #101	; 0x65
 80b9fb2:	d102      	bne.n	80b9fba <ch_common_set_thresholds+0x2c>
      return ret_val;           // NOT SUPPORTED in CH101
 80b9fb4:	69bb      	ldr	r3, [r7, #24]
 80b9fb6:	b2db      	uxtb	r3, r3
 80b9fb8:	e06b      	b.n	80ba092 <ch_common_set_thresholds+0x104>

    } else {
      thresh_level_reg = CH201_COMMON_REG_THRESHOLDS;
 80b9fba:	2316      	movs	r3, #22
 80b9fbc:	74fb      	strb	r3, [r7, #19]
      max_num_thresholds = CH201_COMMON_NUM_THRESHOLDS;
 80b9fbe:	2306      	movs	r3, #6
 80b9fc0:	74bb      	strb	r3, [r7, #18]
    }

    for (thresh_num = 0; thresh_num < max_num_thresholds; thresh_num++) {
 80b9fc2:	2300      	movs	r3, #0
 80b9fc4:	75fb      	strb	r3, [r7, #23]
 80b9fc6:	e05c      	b.n	80ba082 <ch_common_set_thresholds+0xf4>

      if (thresh_num < (max_num_thresholds - 1)) {
 80b9fc8:	7dfa      	ldrb	r2, [r7, #23]
 80b9fca:	7cbb      	ldrb	r3, [r7, #18]
 80b9fcc:	3b01      	subs	r3, #1
 80b9fce:	429a      	cmp	r2, r3
 80b9fd0:	da0e      	bge.n	80b9ff0 <ch_common_set_thresholds+0x62>
        uint16_t next_start_sample =
            thresholds_ptr->threshold[thresh_num + 1].start_sample;
 80b9fd2:	7dfb      	ldrb	r3, [r7, #23]
 80b9fd4:	1c5a      	adds	r2, r3, #1
        uint16_t next_start_sample =
 80b9fd6:	683b      	ldr	r3, [r7, #0]
 80b9fd8:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 80b9fdc:	823b      	strh	r3, [r7, #16]

        thresh_len = (next_start_sample - start_sample);
 80b9fde:	8a3b      	ldrh	r3, [r7, #16]
 80b9fe0:	b2da      	uxtb	r2, r3
 80b9fe2:	8abb      	ldrh	r3, [r7, #20]
 80b9fe4:	b2db      	uxtb	r3, r3
 80b9fe6:	1ad3      	subs	r3, r2, r3
 80b9fe8:	75bb      	strb	r3, [r7, #22]
        start_sample = next_start_sample;
 80b9fea:	8a3b      	ldrh	r3, [r7, #16]
 80b9fec:	82bb      	strh	r3, [r7, #20]
 80b9fee:	e001      	b.n	80b9ff4 <ch_common_set_thresholds+0x66>
      } else {
        thresh_len = 0;
 80b9ff0:	2300      	movs	r3, #0
 80b9ff2:	75bb      	strb	r3, [r7, #22]
      }

      if (dev_ptr->part_number == CH201_PART_NUMBER) {
 80b9ff4:	687b      	ldr	r3, [r7, #4]
 80b9ff6:	8b9b      	ldrh	r3, [r3, #28]
 80b9ff8:	2bc9      	cmp	r3, #201	; 0xc9
 80b9ffa:	d122      	bne.n	80ba042 <ch_common_set_thresholds+0xb4>
        if (thresh_num == 0) {
 80b9ffc:	7dfb      	ldrb	r3, [r7, #23]
 80b9ffe:	2b00      	cmp	r3, #0
 80ba000:	d102      	bne.n	80ba008 <ch_common_set_thresholds+0x7a>
          thresh_len_reg = CH201_COMMON_REG_THRESH_LEN_0;
 80ba002:	2308      	movs	r3, #8
 80ba004:	77fb      	strb	r3, [r7, #31]
 80ba006:	e01c      	b.n	80ba042 <ch_common_set_thresholds+0xb4>
        } else if (thresh_num == 1) {
 80ba008:	7dfb      	ldrb	r3, [r7, #23]
 80ba00a:	2b01      	cmp	r3, #1
 80ba00c:	d102      	bne.n	80ba014 <ch_common_set_thresholds+0x86>
          thresh_len_reg = CH201_COMMON_REG_THRESH_LEN_1;
 80ba00e:	2309      	movs	r3, #9
 80ba010:	77fb      	strb	r3, [r7, #31]
 80ba012:	e016      	b.n	80ba042 <ch_common_set_thresholds+0xb4>
        } else if (thresh_num == 2) {
 80ba014:	7dfb      	ldrb	r3, [r7, #23]
 80ba016:	2b02      	cmp	r3, #2
 80ba018:	d102      	bne.n	80ba020 <ch_common_set_thresholds+0x92>
          thresh_len_reg = CH201_COMMON_REG_THRESH_LEN_2;
 80ba01a:	230c      	movs	r3, #12
 80ba01c:	77fb      	strb	r3, [r7, #31]
 80ba01e:	e010      	b.n	80ba042 <ch_common_set_thresholds+0xb4>
        } else if (thresh_num == 3) {
 80ba020:	7dfb      	ldrb	r3, [r7, #23]
 80ba022:	2b03      	cmp	r3, #3
 80ba024:	d102      	bne.n	80ba02c <ch_common_set_thresholds+0x9e>
          thresh_len_reg = CH201_COMMON_REG_THRESH_LEN_3;
 80ba026:	230d      	movs	r3, #13
 80ba028:	77fb      	strb	r3, [r7, #31]
 80ba02a:	e00a      	b.n	80ba042 <ch_common_set_thresholds+0xb4>
        } else if (thresh_num == 4) {
 80ba02c:	7dfb      	ldrb	r3, [r7, #23]
 80ba02e:	2b04      	cmp	r3, #4
 80ba030:	d102      	bne.n	80ba038 <ch_common_set_thresholds+0xaa>
          thresh_len_reg = CH201_COMMON_REG_THRESH_LEN_4;
 80ba032:	2315      	movs	r3, #21
 80ba034:	77fb      	strb	r3, [r7, #31]
 80ba036:	e004      	b.n	80ba042 <ch_common_set_thresholds+0xb4>
        } else if (thresh_num == 5) {
 80ba038:	7dfb      	ldrb	r3, [r7, #23]
 80ba03a:	2b05      	cmp	r3, #5
 80ba03c:	d101      	bne.n	80ba042 <ch_common_set_thresholds+0xb4>
          thresh_len_reg = 0;   // last threshold does not have length field - assumed to extend to end of data
 80ba03e:	2300      	movs	r3, #0
 80ba040:	77fb      	strb	r3, [r7, #31]
        }
      }

      if (thresh_len_reg != 0) {
 80ba042:	7ffb      	ldrb	r3, [r7, #31]
 80ba044:	2b00      	cmp	r3, #0
 80ba046:	d006      	beq.n	80ba056 <ch_common_set_thresholds+0xc8>
        chdrv_write_byte(dev_ptr, thresh_len_reg, thresh_len);  // set the length field (if any) for this threshold
 80ba048:	7ffb      	ldrb	r3, [r7, #31]
 80ba04a:	b29b      	uxth	r3, r3
 80ba04c:	7dba      	ldrb	r2, [r7, #22]
 80ba04e:	4619      	mov	r1, r3
 80ba050:	6878      	ldr	r0, [r7, #4]
 80ba052:	f000 f9be 	bl	80ba3d2 <chdrv_write_byte>
      }
      // write level to this threshold's entry in register array
      thresh_level = thresholds_ptr->threshold[thresh_num].level;
 80ba056:	7dfb      	ldrb	r3, [r7, #23]
 80ba058:	683a      	ldr	r2, [r7, #0]
 80ba05a:	009b      	lsls	r3, r3, #2
 80ba05c:	4413      	add	r3, r2
 80ba05e:	885b      	ldrh	r3, [r3, #2]
 80ba060:	81fb      	strh	r3, [r7, #14]
      chdrv_write_word(dev_ptr,
 80ba062:	7cfb      	ldrb	r3, [r7, #19]
 80ba064:	b29a      	uxth	r2, r3
                       (thresh_level_reg + (thresh_num * sizeof(uint16_t))),
 80ba066:	7dfb      	ldrb	r3, [r7, #23]
 80ba068:	b29b      	uxth	r3, r3
 80ba06a:	005b      	lsls	r3, r3, #1
 80ba06c:	b29b      	uxth	r3, r3
      chdrv_write_word(dev_ptr,
 80ba06e:	4413      	add	r3, r2
 80ba070:	b29b      	uxth	r3, r3
 80ba072:	89fa      	ldrh	r2, [r7, #14]
 80ba074:	4619      	mov	r1, r3
 80ba076:	6878      	ldr	r0, [r7, #4]
 80ba078:	f000 f9c4 	bl	80ba404 <chdrv_write_word>
    for (thresh_num = 0; thresh_num < max_num_thresholds; thresh_num++) {
 80ba07c:	7dfb      	ldrb	r3, [r7, #23]
 80ba07e:	3301      	adds	r3, #1
 80ba080:	75fb      	strb	r3, [r7, #23]
 80ba082:	7dfa      	ldrb	r2, [r7, #23]
 80ba084:	7cbb      	ldrb	r3, [r7, #18]
 80ba086:	429a      	cmp	r2, r3
 80ba088:	d39e      	bcc.n	80b9fc8 <ch_common_set_thresholds+0x3a>
                       thresh_level);
    }

    ret_val = 0;                // return OK
 80ba08a:	2300      	movs	r3, #0
 80ba08c:	61bb      	str	r3, [r7, #24]
  }
  return ret_val;
 80ba08e:	69bb      	ldr	r3, [r7, #24]
 80ba090:	b2db      	uxtb	r3, r3
}
 80ba092:	4618      	mov	r0, r3
 80ba094:	3720      	adds	r7, #32
 80ba096:	46bd      	mov	sp, r7
 80ba098:	bd80      	pop	{r7, pc}

080ba09a <ch_common_get_thresholds>:

uint8_t ch_common_get_thresholds(ch_dev_t * dev_ptr,
                                 ch_thresholds_t * thresholds_ptr)
{
 80ba09a:	b580      	push	{r7, lr}
 80ba09c:	b086      	sub	sp, #24
 80ba09e:	af00      	add	r7, sp, #0
 80ba0a0:	6078      	str	r0, [r7, #4]
 80ba0a2:	6039      	str	r1, [r7, #0]
  uint8_t thresh_len_reg = 0;   // offset of register for this threshold's length
 80ba0a4:	2300      	movs	r3, #0
 80ba0a6:	75fb      	strb	r3, [r7, #23]
  uint8_t thresh_level_reg;     // threshold level reg (first in array)
  uint8_t max_num_thresholds;
  uint8_t ret_val = 1;          // default = error return
 80ba0a8:	2301      	movs	r3, #1
 80ba0aa:	75bb      	strb	r3, [r7, #22]
  uint8_t thresh_num;
  uint8_t thresh_len = 0;       // number of samples described by each threshold
 80ba0ac:	2300      	movs	r3, #0
 80ba0ae:	73fb      	strb	r3, [r7, #15]
  uint16_t start_sample = 0;    // calculated start sample for each threshold
 80ba0b0:	2300      	movs	r3, #0
 80ba0b2:	827b      	strh	r3, [r7, #18]

  if (dev_ptr->sensor_connected && (thresholds_ptr != NULL)) {
 80ba0b4:	687b      	ldr	r3, [r7, #4]
 80ba0b6:	7fdb      	ldrb	r3, [r3, #31]
 80ba0b8:	2b00      	cmp	r3, #0
 80ba0ba:	d068      	beq.n	80ba18e <ch_common_get_thresholds+0xf4>
 80ba0bc:	683b      	ldr	r3, [r7, #0]
 80ba0be:	2b00      	cmp	r3, #0
 80ba0c0:	d065      	beq.n	80ba18e <ch_common_get_thresholds+0xf4>

    if (dev_ptr->part_number == CH101_PART_NUMBER) {
 80ba0c2:	687b      	ldr	r3, [r7, #4]
 80ba0c4:	8b9b      	ldrh	r3, [r3, #28]
 80ba0c6:	2b65      	cmp	r3, #101	; 0x65
 80ba0c8:	d101      	bne.n	80ba0ce <ch_common_get_thresholds+0x34>
      return ret_val;           // NOT SUPPORTED in CH101
 80ba0ca:	7dbb      	ldrb	r3, [r7, #22]
 80ba0cc:	e060      	b.n	80ba190 <ch_common_get_thresholds+0xf6>

    } else {
      thresh_level_reg = CH201_COMMON_REG_THRESHOLDS;
 80ba0ce:	2316      	movs	r3, #22
 80ba0d0:	747b      	strb	r3, [r7, #17]
      max_num_thresholds = CH201_COMMON_NUM_THRESHOLDS;
 80ba0d2:	2306      	movs	r3, #6
 80ba0d4:	743b      	strb	r3, [r7, #16]
    }

    for (thresh_num = 0; thresh_num < max_num_thresholds; thresh_num++) {
 80ba0d6:	2300      	movs	r3, #0
 80ba0d8:	757b      	strb	r3, [r7, #21]
 80ba0da:	e052      	b.n	80ba182 <ch_common_get_thresholds+0xe8>

      if (dev_ptr->part_number == CH201_PART_NUMBER) {
 80ba0dc:	687b      	ldr	r3, [r7, #4]
 80ba0de:	8b9b      	ldrh	r3, [r3, #28]
 80ba0e0:	2bc9      	cmp	r3, #201	; 0xc9
 80ba0e2:	d122      	bne.n	80ba12a <ch_common_get_thresholds+0x90>
        if (thresh_num == 0) {
 80ba0e4:	7d7b      	ldrb	r3, [r7, #21]
 80ba0e6:	2b00      	cmp	r3, #0
 80ba0e8:	d102      	bne.n	80ba0f0 <ch_common_get_thresholds+0x56>
          thresh_len_reg = CH201_COMMON_REG_THRESH_LEN_0;
 80ba0ea:	2308      	movs	r3, #8
 80ba0ec:	75fb      	strb	r3, [r7, #23]
 80ba0ee:	e01c      	b.n	80ba12a <ch_common_get_thresholds+0x90>
        } else if (thresh_num == 1) {
 80ba0f0:	7d7b      	ldrb	r3, [r7, #21]
 80ba0f2:	2b01      	cmp	r3, #1
 80ba0f4:	d102      	bne.n	80ba0fc <ch_common_get_thresholds+0x62>
          thresh_len_reg = CH201_COMMON_REG_THRESH_LEN_1;
 80ba0f6:	2309      	movs	r3, #9
 80ba0f8:	75fb      	strb	r3, [r7, #23]
 80ba0fa:	e016      	b.n	80ba12a <ch_common_get_thresholds+0x90>
        } else if (thresh_num == 2) {
 80ba0fc:	7d7b      	ldrb	r3, [r7, #21]
 80ba0fe:	2b02      	cmp	r3, #2
 80ba100:	d102      	bne.n	80ba108 <ch_common_get_thresholds+0x6e>
          thresh_len_reg = CH201_COMMON_REG_THRESH_LEN_2;
 80ba102:	230c      	movs	r3, #12
 80ba104:	75fb      	strb	r3, [r7, #23]
 80ba106:	e010      	b.n	80ba12a <ch_common_get_thresholds+0x90>
        } else if (thresh_num == 3) {
 80ba108:	7d7b      	ldrb	r3, [r7, #21]
 80ba10a:	2b03      	cmp	r3, #3
 80ba10c:	d102      	bne.n	80ba114 <ch_common_get_thresholds+0x7a>
          thresh_len_reg = CH201_COMMON_REG_THRESH_LEN_3;
 80ba10e:	230d      	movs	r3, #13
 80ba110:	75fb      	strb	r3, [r7, #23]
 80ba112:	e00a      	b.n	80ba12a <ch_common_get_thresholds+0x90>
        } else if (thresh_num == 4) {
 80ba114:	7d7b      	ldrb	r3, [r7, #21]
 80ba116:	2b04      	cmp	r3, #4
 80ba118:	d102      	bne.n	80ba120 <ch_common_get_thresholds+0x86>
          thresh_len_reg = CH201_COMMON_REG_THRESH_LEN_4;
 80ba11a:	2315      	movs	r3, #21
 80ba11c:	75fb      	strb	r3, [r7, #23]
 80ba11e:	e004      	b.n	80ba12a <ch_common_get_thresholds+0x90>
        } else if (thresh_num == 5) {
 80ba120:	7d7b      	ldrb	r3, [r7, #21]
 80ba122:	2b05      	cmp	r3, #5
 80ba124:	d101      	bne.n	80ba12a <ch_common_get_thresholds+0x90>
          thresh_len_reg = 0;   // last threshold does not have length field - assumed to extend to end of data
 80ba126:	2300      	movs	r3, #0
 80ba128:	75fb      	strb	r3, [r7, #23]
        }
      }

      if (thresh_len_reg != 0) {
 80ba12a:	7dfb      	ldrb	r3, [r7, #23]
 80ba12c:	2b00      	cmp	r3, #0
 80ba12e:	d008      	beq.n	80ba142 <ch_common_get_thresholds+0xa8>
        // read the length field register for this threshold
        chdrv_read_byte(dev_ptr, thresh_len_reg, &thresh_len);
 80ba130:	7dfb      	ldrb	r3, [r7, #23]
 80ba132:	b29b      	uxth	r3, r3
 80ba134:	f107 020f 	add.w	r2, r7, #15
 80ba138:	4619      	mov	r1, r3
 80ba13a:	6878      	ldr	r0, [r7, #4]
 80ba13c:	f000 f981 	bl	80ba442 <chdrv_read_byte>
 80ba140:	e001      	b.n	80ba146 <ch_common_get_thresholds+0xac>
      } else {
        thresh_len = 0;
 80ba142:	2300      	movs	r3, #0
 80ba144:	73fb      	strb	r3, [r7, #15]
      }

      thresholds_ptr->threshold[thresh_num].start_sample = start_sample;
 80ba146:	7d7a      	ldrb	r2, [r7, #21]
 80ba148:	683b      	ldr	r3, [r7, #0]
 80ba14a:	8a79      	ldrh	r1, [r7, #18]
 80ba14c:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      start_sample += thresh_len;       // increment start sample for next threshold
 80ba150:	7bfb      	ldrb	r3, [r7, #15]
 80ba152:	b29a      	uxth	r2, r3
 80ba154:	8a7b      	ldrh	r3, [r7, #18]
 80ba156:	4413      	add	r3, r2
 80ba158:	827b      	strh	r3, [r7, #18]

      // get level from this threshold's entry in register array
      chdrv_read_word(dev_ptr,
 80ba15a:	7c7b      	ldrb	r3, [r7, #17]
 80ba15c:	b29a      	uxth	r2, r3
                      (thresh_level_reg + (thresh_num * sizeof(uint16_t))),
 80ba15e:	7d7b      	ldrb	r3, [r7, #21]
 80ba160:	b29b      	uxth	r3, r3
 80ba162:	005b      	lsls	r3, r3, #1
 80ba164:	b29b      	uxth	r3, r3
      chdrv_read_word(dev_ptr,
 80ba166:	4413      	add	r3, r2
 80ba168:	b299      	uxth	r1, r3
                      &(thresholds_ptr->threshold[thresh_num].level));
 80ba16a:	7d7b      	ldrb	r3, [r7, #21]
      chdrv_read_word(dev_ptr,
 80ba16c:	009b      	lsls	r3, r3, #2
 80ba16e:	683a      	ldr	r2, [r7, #0]
 80ba170:	4413      	add	r3, r2
 80ba172:	3302      	adds	r3, #2
 80ba174:	461a      	mov	r2, r3
 80ba176:	6878      	ldr	r0, [r7, #4]
 80ba178:	f000 f98a 	bl	80ba490 <chdrv_read_word>
    for (thresh_num = 0; thresh_num < max_num_thresholds; thresh_num++) {
 80ba17c:	7d7b      	ldrb	r3, [r7, #21]
 80ba17e:	3301      	adds	r3, #1
 80ba180:	757b      	strb	r3, [r7, #21]
 80ba182:	7d7a      	ldrb	r2, [r7, #21]
 80ba184:	7c3b      	ldrb	r3, [r7, #16]
 80ba186:	429a      	cmp	r2, r3
 80ba188:	d3a8      	bcc.n	80ba0dc <ch_common_get_thresholds+0x42>

    }
    ret_val = 0;                // return OK
 80ba18a:	2300      	movs	r3, #0
 80ba18c:	75bb      	strb	r3, [r7, #22]
  }
  return ret_val;
 80ba18e:	7dbb      	ldrb	r3, [r7, #22]
}
 80ba190:	4618      	mov	r0, r3
 80ba192:	3718      	adds	r7, #24
 80ba194:	46bd      	mov	sp, r7
 80ba196:	bd80      	pop	{r7, pc}

080ba198 <ch_common_get_iq_data>:

uint8_t ch_common_get_iq_data(ch_dev_t * dev_ptr, ch_iq_sample_t * buf_ptr,
                              uint16_t start_sample, uint16_t num_samples,
                              ch_io_mode_t mode)
{
 80ba198:	b580      	push	{r7, lr}
 80ba19a:	b092      	sub	sp, #72	; 0x48
 80ba19c:	af04      	add	r7, sp, #16
 80ba19e:	60f8      	str	r0, [r7, #12]
 80ba1a0:	60b9      	str	r1, [r7, #8]
 80ba1a2:	4611      	mov	r1, r2
 80ba1a4:	461a      	mov	r2, r3
 80ba1a6:	460b      	mov	r3, r1
 80ba1a8:	80fb      	strh	r3, [r7, #6]
 80ba1aa:	4613      	mov	r3, r2
 80ba1ac:	80bb      	strh	r3, [r7, #4]
  uint16_t iq_data_addr;
  uint16_t max_samples;
  ch_group_t *grp_ptr = dev_ptr->group;
 80ba1ae:	68fb      	ldr	r3, [r7, #12]
 80ba1b0:	681b      	ldr	r3, [r3, #0]
 80ba1b2:	61fb      	str	r3, [r7, #28]
  int error = 1;
 80ba1b4:	2301      	movs	r3, #1
 80ba1b6:	633b      	str	r3, [r7, #48]	; 0x30
  uint8_t use_prog_read = 0;    // default = do not use low-level programming interface
 80ba1b8:	2300      	movs	r3, #0
 80ba1ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

#ifndef USE_STD_I2C_FOR_IQ
  if (grp_ptr->num_connected[dev_ptr->i2c_bus_index] == 1) {    // if only one device on this bus
 80ba1be:	68fb      	ldr	r3, [r7, #12]
 80ba1c0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80ba1c4:	461a      	mov	r2, r3
 80ba1c6:	69fb      	ldr	r3, [r7, #28]
 80ba1c8:	4413      	add	r3, r2
 80ba1ca:	7e1b      	ldrb	r3, [r3, #24]
 80ba1cc:	2b01      	cmp	r3, #1
 80ba1ce:	d102      	bne.n	80ba1d6 <ch_common_get_iq_data+0x3e>
    use_prog_read = 1;          //   use low-level interface
 80ba1d0:	2301      	movs	r3, #1
 80ba1d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }
#endif

  if (dev_ptr->part_number == CH101_PART_NUMBER) {
 80ba1d6:	68fb      	ldr	r3, [r7, #12]
 80ba1d8:	8b9b      	ldrh	r3, [r3, #28]
 80ba1da:	2b65      	cmp	r3, #101	; 0x65
 80ba1dc:	d102      	bne.n	80ba1e4 <ch_common_get_iq_data+0x4c>
    iq_data_addr = CH101_COMMON_REG_DATA;
 80ba1de:	231c      	movs	r3, #28
 80ba1e0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80ba1e2:	e001      	b.n	80ba1e8 <ch_common_get_iq_data+0x50>
  } else {
    iq_data_addr = CH201_COMMON_REG_DATA;
 80ba1e4:	2328      	movs	r3, #40	; 0x28
 80ba1e6:	86fb      	strh	r3, [r7, #54]	; 0x36
  }

  iq_data_addr += (start_sample * sizeof(ch_iq_sample_t));
 80ba1e8:	88fb      	ldrh	r3, [r7, #6]
 80ba1ea:	009b      	lsls	r3, r3, #2
 80ba1ec:	b29a      	uxth	r2, r3
 80ba1ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80ba1f0:	4413      	add	r3, r2
 80ba1f2:	86fb      	strh	r3, [r7, #54]	; 0x36

  if ((num_samples != 0)
 80ba1f4:	88bb      	ldrh	r3, [r7, #4]
 80ba1f6:	2b00      	cmp	r3, #0
 80ba1f8:	f000 80b1 	beq.w	80ba35e <ch_common_get_iq_data+0x1c6>
      && ((start_sample + num_samples) <= dev_ptr->max_samples)) {
 80ba1fc:	88fa      	ldrh	r2, [r7, #6]
 80ba1fe:	88bb      	ldrh	r3, [r7, #4]
 80ba200:	4413      	add	r3, r2
 80ba202:	68fa      	ldr	r2, [r7, #12]
 80ba204:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 80ba206:	4293      	cmp	r3, r2
 80ba208:	f300 80a9 	bgt.w	80ba35e <ch_common_get_iq_data+0x1c6>
    uint16_t num_bytes = (num_samples * sizeof(ch_iq_sample_t));
 80ba20c:	88bb      	ldrh	r3, [r7, #4]
 80ba20e:	009b      	lsls	r3, r3, #2
 80ba210:	837b      	strh	r3, [r7, #26]

    if (mode == CH_IO_MODE_BLOCK) {
 80ba212:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80ba216:	2b00      	cmp	r3, #0
 80ba218:	d16f      	bne.n	80ba2fa <ch_common_get_iq_data+0x162>
      /* blocking transfer */

      if (use_prog_read) {
 80ba21a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80ba21e:	2b00      	cmp	r3, #0
 80ba220:	d063      	beq.n	80ba2ea <ch_common_get_iq_data+0x152>
        /* use low-level programming interface for speed */

        int num_transfers =
            (num_bytes + (CH_PROG_XFER_SIZE - 1)) / CH_PROG_XFER_SIZE;
 80ba222:	8b7b      	ldrh	r3, [r7, #26]
 80ba224:	33ff      	adds	r3, #255	; 0xff
        int num_transfers =
 80ba226:	2b00      	cmp	r3, #0
 80ba228:	da00      	bge.n	80ba22c <ch_common_get_iq_data+0x94>
 80ba22a:	33ff      	adds	r3, #255	; 0xff
 80ba22c:	121b      	asrs	r3, r3, #8
 80ba22e:	617b      	str	r3, [r7, #20]
        int bytes_left = num_bytes;     // remaining bytes to read
 80ba230:	8b7b      	ldrh	r3, [r7, #26]
 80ba232:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Convert register offsets to full memory addresses */
        if (dev_ptr->part_number == CH101_PART_NUMBER) {
 80ba234:	68fb      	ldr	r3, [r7, #12]
 80ba236:	8b9b      	ldrh	r3, [r3, #28]
 80ba238:	2b65      	cmp	r3, #101	; 0x65
 80ba23a:	d104      	bne.n	80ba246 <ch_common_get_iq_data+0xae>
          iq_data_addr += CH101_DATA_MEM_ADDR + CH101_COMMON_I2CREGS_OFFSET;
 80ba23c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80ba23e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80ba242:	86fb      	strh	r3, [r7, #54]	; 0x36
 80ba244:	e003      	b.n	80ba24e <ch_common_get_iq_data+0xb6>
        } else {
          iq_data_addr += CH201_DATA_MEM_ADDR + CH201_COMMON_I2CREGS_OFFSET;
 80ba246:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80ba248:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80ba24c:	86fb      	strh	r3, [r7, #54]	; 0x36
        }

        chbsp_program_enable(dev_ptr);  // assert PROG pin
 80ba24e:	68f8      	ldr	r0, [r7, #12]
 80ba250:	f7e9 f8ae 	bl	80a33b0 <chbsp_program_enable>

        for (int xfer = 0; xfer < num_transfers; xfer++) {
 80ba254:	2300      	movs	r3, #0
 80ba256:	627b      	str	r3, [r7, #36]	; 0x24
 80ba258:	e03f      	b.n	80ba2da <ch_common_get_iq_data+0x142>
          int bytes_to_read;
          uint8_t message[] = { (0x80 | CH_PROG_REG_CTL), 0x09 };       // read burst command
 80ba25a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80ba25e:	823b      	strh	r3, [r7, #16]

          if (bytes_left > CH_PROG_XFER_SIZE) {
 80ba260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80ba262:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80ba266:	dd03      	ble.n	80ba270 <ch_common_get_iq_data+0xd8>
            bytes_to_read = CH_PROG_XFER_SIZE;
 80ba268:	f44f 7380 	mov.w	r3, #256	; 0x100
 80ba26c:	623b      	str	r3, [r7, #32]
 80ba26e:	e001      	b.n	80ba274 <ch_common_get_iq_data+0xdc>
          } else {
            bytes_to_read = bytes_left;
 80ba270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80ba272:	623b      	str	r3, [r7, #32]
          }
          chdrv_prog_write(dev_ptr, CH_PROG_REG_ADDR,
 80ba274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80ba276:	b29b      	uxth	r3, r3
 80ba278:	021b      	lsls	r3, r3, #8
 80ba27a:	b29a      	uxth	r2, r3
 80ba27c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80ba27e:	4413      	add	r3, r2
 80ba280:	b29b      	uxth	r3, r3
 80ba282:	461a      	mov	r2, r3
 80ba284:	2105      	movs	r1, #5
 80ba286:	68f8      	ldr	r0, [r7, #12]
 80ba288:	f000 fa76 	bl	80ba778 <chdrv_prog_write>
                           (iq_data_addr + (xfer * CH_PROG_XFER_SIZE)));
          chdrv_prog_write(dev_ptr, CH_PROG_REG_CNT, (bytes_to_read - 1));
 80ba28c:	6a3b      	ldr	r3, [r7, #32]
 80ba28e:	b29b      	uxth	r3, r3
 80ba290:	3b01      	subs	r3, #1
 80ba292:	b29b      	uxth	r3, r3
 80ba294:	461a      	mov	r2, r3
 80ba296:	2107      	movs	r1, #7
 80ba298:	68f8      	ldr	r0, [r7, #12]
 80ba29a:	f000 fa6d 	bl	80ba778 <chdrv_prog_write>
          error = chdrv_prog_i2c_write(dev_ptr, message, sizeof(message));
 80ba29e:	f107 0310 	add.w	r3, r7, #16
 80ba2a2:	2202      	movs	r2, #2
 80ba2a4:	4619      	mov	r1, r3
 80ba2a6:	68f8      	ldr	r0, [r7, #12]
 80ba2a8:	f000 f85f 	bl	80ba36a <chdrv_prog_i2c_write>
 80ba2ac:	6338      	str	r0, [r7, #48]	; 0x30
          error |=
              chdrv_prog_i2c_read(dev_ptr,
                                  ((uint8_t *) buf_ptr +
                                   (xfer * CH_PROG_XFER_SIZE)), bytes_to_read);
 80ba2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80ba2b0:	021b      	lsls	r3, r3, #8
 80ba2b2:	461a      	mov	r2, r3
              chdrv_prog_i2c_read(dev_ptr,
 80ba2b4:	68bb      	ldr	r3, [r7, #8]
 80ba2b6:	4413      	add	r3, r2
 80ba2b8:	6a3a      	ldr	r2, [r7, #32]
 80ba2ba:	b292      	uxth	r2, r2
 80ba2bc:	4619      	mov	r1, r3
 80ba2be:	68f8      	ldr	r0, [r7, #12]
 80ba2c0:	f000 f86d 	bl	80ba39e <chdrv_prog_i2c_read>
 80ba2c4:	4602      	mov	r2, r0
          error |=
 80ba2c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80ba2c8:	4313      	orrs	r3, r2
 80ba2ca:	633b      	str	r3, [r7, #48]	; 0x30

          bytes_left -= bytes_to_read;
 80ba2cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80ba2ce:	6a3b      	ldr	r3, [r7, #32]
 80ba2d0:	1ad3      	subs	r3, r2, r3
 80ba2d2:	62bb      	str	r3, [r7, #40]	; 0x28
        for (int xfer = 0; xfer < num_transfers; xfer++) {
 80ba2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80ba2d6:	3301      	adds	r3, #1
 80ba2d8:	627b      	str	r3, [r7, #36]	; 0x24
 80ba2da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80ba2dc:	697b      	ldr	r3, [r7, #20]
 80ba2de:	429a      	cmp	r2, r3
 80ba2e0:	dbbb      	blt.n	80ba25a <ch_common_get_iq_data+0xc2>
        }
        chbsp_program_disable(dev_ptr); // de-assert PROG pin
 80ba2e2:	68f8      	ldr	r0, [r7, #12]
 80ba2e4:	f7e9 f882 	bl	80a33ec <chbsp_program_disable>
 80ba2e8:	e039      	b.n	80ba35e <ch_common_get_iq_data+0x1c6>

      } else {                  /* if (use_prog_read) */
        /* use standard I2C interface */

        error =
            chdrv_burst_read(dev_ptr, iq_data_addr, (uint8_t *) buf_ptr,
 80ba2ea:	8b7b      	ldrh	r3, [r7, #26]
 80ba2ec:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 80ba2ee:	68ba      	ldr	r2, [r7, #8]
 80ba2f0:	68f8      	ldr	r0, [r7, #12]
 80ba2f2:	f000 f8b8 	bl	80ba466 <chdrv_burst_read>
 80ba2f6:	6338      	str	r0, [r7, #48]	; 0x30
 80ba2f8:	e031      	b.n	80ba35e <ch_common_get_iq_data+0x1c6>
      }

    } else {
      /* non-blocking transfer - queue a read transaction (must be started using ch_io_start_nb() ) */

      if (use_prog_read && (grp_ptr->i2c_drv_flags & I2C_DRV_FLAG_USE_PROG_NB)) {
 80ba2fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80ba2fe:	2b00      	cmp	r3, #0
 80ba300:	d020      	beq.n	80ba344 <ch_common_get_iq_data+0x1ac>
 80ba302:	69fb      	ldr	r3, [r7, #28]
 80ba304:	889b      	ldrh	r3, [r3, #4]
 80ba306:	f003 0302 	and.w	r3, r3, #2
 80ba30a:	2b00      	cmp	r3, #0
 80ba30c:	d01a      	beq.n	80ba344 <ch_common_get_iq_data+0x1ac>
        /* Use low-level programming interface to read data */

        /* Convert register offsets to full memory addresses */
        if (dev_ptr->part_number == CH101_PART_NUMBER) {
 80ba30e:	68fb      	ldr	r3, [r7, #12]
 80ba310:	8b9b      	ldrh	r3, [r3, #28]
 80ba312:	2b65      	cmp	r3, #101	; 0x65
 80ba314:	d104      	bne.n	80ba320 <ch_common_get_iq_data+0x188>
          iq_data_addr += (CH101_DATA_MEM_ADDR + CH101_COMMON_I2CREGS_OFFSET);
 80ba316:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80ba318:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80ba31c:	86fb      	strh	r3, [r7, #54]	; 0x36
 80ba31e:	e003      	b.n	80ba328 <ch_common_get_iq_data+0x190>
        } else {
          iq_data_addr += (CH201_DATA_MEM_ADDR + CH201_COMMON_I2CREGS_OFFSET);
 80ba320:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80ba322:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80ba326:	86fb      	strh	r3, [r7, #54]	; 0x36
        }

        error =
            chdrv_group_i2c_queue(grp_ptr, dev_ptr, 1, CHDRV_NB_TRANS_TYPE_PROG,
 80ba328:	68bb      	ldr	r3, [r7, #8]
 80ba32a:	9302      	str	r3, [sp, #8]
 80ba32c:	8b7b      	ldrh	r3, [r7, #26]
 80ba32e:	9301      	str	r3, [sp, #4]
 80ba330:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80ba332:	9300      	str	r3, [sp, #0]
 80ba334:	2301      	movs	r3, #1
 80ba336:	2201      	movs	r2, #1
 80ba338:	68f9      	ldr	r1, [r7, #12]
 80ba33a:	69f8      	ldr	r0, [r7, #28]
 80ba33c:	f000 f94e 	bl	80ba5dc <chdrv_group_i2c_queue>
 80ba340:	6338      	str	r0, [r7, #48]	; 0x30
        error =
 80ba342:	e00c      	b.n	80ba35e <ch_common_get_iq_data+0x1c6>
                                  iq_data_addr, num_bytes, (uint8_t *) buf_ptr);
      } else {
        /* Use regular I2C register interface to read data */
        error =
            chdrv_group_i2c_queue(grp_ptr, dev_ptr, 1, CHDRV_NB_TRANS_TYPE_STD,
 80ba344:	68bb      	ldr	r3, [r7, #8]
 80ba346:	9302      	str	r3, [sp, #8]
 80ba348:	8b7b      	ldrh	r3, [r7, #26]
 80ba34a:	9301      	str	r3, [sp, #4]
 80ba34c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80ba34e:	9300      	str	r3, [sp, #0]
 80ba350:	2300      	movs	r3, #0
 80ba352:	2201      	movs	r2, #1
 80ba354:	68f9      	ldr	r1, [r7, #12]
 80ba356:	69f8      	ldr	r0, [r7, #28]
 80ba358:	f000 f940 	bl	80ba5dc <chdrv_group_i2c_queue>
 80ba35c:	6338      	str	r0, [r7, #48]	; 0x30
                                  iq_data_addr, num_bytes, (uint8_t *) buf_ptr);
      }
    }
  }

  return error;
 80ba35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80ba360:	b2db      	uxtb	r3, r3
}
 80ba362:	4618      	mov	r0, r3
 80ba364:	3738      	adds	r7, #56	; 0x38
 80ba366:	46bd      	mov	sp, r7
 80ba368:	bd80      	pop	{r7, pc}

080ba36a <chdrv_prog_i2c_write>:
 *
 * This function writes bytes to the device using the programming I2C address.  The
 * PROG line for the device must have been asserted before this function is called.
 */
int chdrv_prog_i2c_write(ch_dev_t * dev_ptr, uint8_t * message, uint16_t len)
{
 80ba36a:	b580      	push	{r7, lr}
 80ba36c:	b086      	sub	sp, #24
 80ba36e:	af00      	add	r7, sp, #0
 80ba370:	60f8      	str	r0, [r7, #12]
 80ba372:	60b9      	str	r1, [r7, #8]
 80ba374:	4613      	mov	r3, r2
 80ba376:	80fb      	strh	r3, [r7, #6]

  dev_ptr->i2c_address = CH_I2C_ADDR_PROG;
 80ba378:	68fb      	ldr	r3, [r7, #12]
 80ba37a:	2245      	movs	r2, #69	; 0x45
 80ba37c:	761a      	strb	r2, [r3, #24]
  int ch_err = chbsp_i2c_write(dev_ptr, message, len);
 80ba37e:	88fb      	ldrh	r3, [r7, #6]
 80ba380:	461a      	mov	r2, r3
 80ba382:	68b9      	ldr	r1, [r7, #8]
 80ba384:	68f8      	ldr	r0, [r7, #12]
 80ba386:	f7e9 fabb 	bl	80a3900 <chbsp_i2c_write>
 80ba38a:	6178      	str	r0, [r7, #20]
  dev_ptr->i2c_address = dev_ptr->app_i2c_address;
 80ba38c:	68fb      	ldr	r3, [r7, #12]
 80ba38e:	7e5a      	ldrb	r2, [r3, #25]
 80ba390:	68fb      	ldr	r3, [r7, #12]
 80ba392:	761a      	strb	r2, [r3, #24]

  return ch_err;
 80ba394:	697b      	ldr	r3, [r7, #20]
}
 80ba396:	4618      	mov	r0, r3
 80ba398:	3718      	adds	r7, #24
 80ba39a:	46bd      	mov	sp, r7
 80ba39c:	bd80      	pop	{r7, pc}

080ba39e <chdrv_prog_i2c_read>:
 *
 * This function reads bytes from the device using the programming I2C address.  The
 * PROG line for the device must have been asserted before this function is called.
 */
int chdrv_prog_i2c_read(ch_dev_t * dev_ptr, uint8_t * message, uint16_t len)
{
 80ba39e:	b580      	push	{r7, lr}
 80ba3a0:	b086      	sub	sp, #24
 80ba3a2:	af00      	add	r7, sp, #0
 80ba3a4:	60f8      	str	r0, [r7, #12]
 80ba3a6:	60b9      	str	r1, [r7, #8]
 80ba3a8:	4613      	mov	r3, r2
 80ba3aa:	80fb      	strh	r3, [r7, #6]

  dev_ptr->i2c_address = CH_I2C_ADDR_PROG;
 80ba3ac:	68fb      	ldr	r3, [r7, #12]
 80ba3ae:	2245      	movs	r2, #69	; 0x45
 80ba3b0:	761a      	strb	r2, [r3, #24]
  int ch_err = chbsp_i2c_read(dev_ptr, message, len);
 80ba3b2:	88fb      	ldrh	r3, [r7, #6]
 80ba3b4:	461a      	mov	r2, r3
 80ba3b6:	68b9      	ldr	r1, [r7, #8]
 80ba3b8:	68f8      	ldr	r0, [r7, #12]
 80ba3ba:	f7e9 fb29 	bl	80a3a10 <chbsp_i2c_read>
 80ba3be:	6178      	str	r0, [r7, #20]
  dev_ptr->i2c_address = dev_ptr->app_i2c_address;
 80ba3c0:	68fb      	ldr	r3, [r7, #12]
 80ba3c2:	7e5a      	ldrb	r2, [r3, #25]
 80ba3c4:	68fb      	ldr	r3, [r7, #12]
 80ba3c6:	761a      	strb	r2, [r3, #24]

  return ch_err;
 80ba3c8:	697b      	ldr	r3, [r7, #20]
}
 80ba3ca:	4618      	mov	r0, r3
 80ba3cc:	3718      	adds	r7, #24
 80ba3ce:	46bd      	mov	sp, r7
 80ba3d0:	bd80      	pop	{r7, pc}

080ba3d2 <chdrv_write_byte>:
 * \param data_value	data value to transmit
 *
 * \return 0 if successful, non-zero otherwise
 */
int chdrv_write_byte(ch_dev_t * dev_ptr, uint16_t mem_addr, uint8_t data_value)
{
 80ba3d2:	b580      	push	{r7, lr}
 80ba3d4:	b084      	sub	sp, #16
 80ba3d6:	af00      	add	r7, sp, #0
 80ba3d8:	6078      	str	r0, [r7, #4]
 80ba3da:	460b      	mov	r3, r1
 80ba3dc:	807b      	strh	r3, [r7, #2]
 80ba3de:	4613      	mov	r3, r2
 80ba3e0:	707b      	strb	r3, [r7, #1]
  uint8_t message[] = { sizeof(data_value), data_value };       // insert byte count (1) at start of data
 80ba3e2:	2301      	movs	r3, #1
 80ba3e4:	723b      	strb	r3, [r7, #8]
 80ba3e6:	787b      	ldrb	r3, [r7, #1]
 80ba3e8:	727b      	strb	r3, [r7, #9]

  int ch_err = chbsp_i2c_mem_write(dev_ptr, mem_addr, message, sizeof(message));
 80ba3ea:	f107 0208 	add.w	r2, r7, #8
 80ba3ee:	8879      	ldrh	r1, [r7, #2]
 80ba3f0:	2302      	movs	r3, #2
 80ba3f2:	6878      	ldr	r0, [r7, #4]
 80ba3f4:	f7e9 fabc 	bl	80a3970 <chbsp_i2c_mem_write>
 80ba3f8:	60f8      	str	r0, [r7, #12]

  return ch_err;
 80ba3fa:	68fb      	ldr	r3, [r7, #12]
}
 80ba3fc:	4618      	mov	r0, r3
 80ba3fe:	3710      	adds	r7, #16
 80ba400:	46bd      	mov	sp, r7
 80ba402:	bd80      	pop	{r7, pc}

080ba404 <chdrv_write_word>:
 * \param data 		data value to transmit
 *
 * \return 0 if successful, non-zero otherwise
 */
int chdrv_write_word(ch_dev_t * dev_ptr, uint16_t mem_addr, uint16_t data_value)
{
 80ba404:	b580      	push	{r7, lr}
 80ba406:	b084      	sub	sp, #16
 80ba408:	af00      	add	r7, sp, #0
 80ba40a:	6078      	str	r0, [r7, #4]
 80ba40c:	460b      	mov	r3, r1
 80ba40e:	807b      	strh	r3, [r7, #2]
 80ba410:	4613      	mov	r3, r2
 80ba412:	803b      	strh	r3, [r7, #0]
  // First we write the register address, then the number of bytes we're writing

  // Place byte count (2) in first byte of message
  // Sensor is little-endian, so LSB goes in at the lower address
  uint8_t message[] =
 80ba414:	2302      	movs	r3, #2
 80ba416:	723b      	strb	r3, [r7, #8]
      { sizeof(data_value), (uint8_t) data_value, (uint8_t) (data_value >> 8) };
 80ba418:	883b      	ldrh	r3, [r7, #0]
 80ba41a:	b2db      	uxtb	r3, r3
  uint8_t message[] =
 80ba41c:	727b      	strb	r3, [r7, #9]
      { sizeof(data_value), (uint8_t) data_value, (uint8_t) (data_value >> 8) };
 80ba41e:	883b      	ldrh	r3, [r7, #0]
 80ba420:	0a1b      	lsrs	r3, r3, #8
 80ba422:	b29b      	uxth	r3, r3
 80ba424:	b2db      	uxtb	r3, r3
  uint8_t message[] =
 80ba426:	72bb      	strb	r3, [r7, #10]

  int ch_err = chbsp_i2c_mem_write(dev_ptr, mem_addr, message, sizeof(message));
 80ba428:	f107 0208 	add.w	r2, r7, #8
 80ba42c:	8879      	ldrh	r1, [r7, #2]
 80ba42e:	2303      	movs	r3, #3
 80ba430:	6878      	ldr	r0, [r7, #4]
 80ba432:	f7e9 fa9d 	bl	80a3970 <chbsp_i2c_mem_write>
 80ba436:	60f8      	str	r0, [r7, #12]

  return ch_err;
 80ba438:	68fb      	ldr	r3, [r7, #12]
}
 80ba43a:	4618      	mov	r0, r3
 80ba43c:	3710      	adds	r7, #16
 80ba43e:	46bd      	mov	sp, r7
 80ba440:	bd80      	pop	{r7, pc}

080ba442 <chdrv_read_byte>:
 * \param data 		pointer to receive buffer
 *
 * \return 0 if successful, non-zero otherwise
 */
int chdrv_read_byte(ch_dev_t * dev_ptr, uint16_t mem_addr, uint8_t * data)
{
 80ba442:	b580      	push	{r7, lr}
 80ba444:	b084      	sub	sp, #16
 80ba446:	af00      	add	r7, sp, #0
 80ba448:	60f8      	str	r0, [r7, #12]
 80ba44a:	460b      	mov	r3, r1
 80ba44c:	607a      	str	r2, [r7, #4]
 80ba44e:	817b      	strh	r3, [r7, #10]

  return (chbsp_i2c_mem_read(dev_ptr, mem_addr, data, 1));
 80ba450:	8979      	ldrh	r1, [r7, #10]
 80ba452:	2301      	movs	r3, #1
 80ba454:	687a      	ldr	r2, [r7, #4]
 80ba456:	68f8      	ldr	r0, [r7, #12]
 80ba458:	f7e9 fb26 	bl	80a3aa8 <chbsp_i2c_mem_read>
 80ba45c:	4603      	mov	r3, r0
}
 80ba45e:	4618      	mov	r0, r3
 80ba460:	3710      	adds	r7, #16
 80ba462:	46bd      	mov	sp, r7
 80ba464:	bd80      	pop	{r7, pc}

080ba466 <chdrv_burst_read>:
 *
 * \return 0 if successful, non-zero otherwise
 */
int chdrv_burst_read(ch_dev_t * dev_ptr, uint16_t mem_addr, uint8_t * data,
                     uint16_t num_bytes)
{
 80ba466:	b580      	push	{r7, lr}
 80ba468:	b084      	sub	sp, #16
 80ba46a:	af00      	add	r7, sp, #0
 80ba46c:	60f8      	str	r0, [r7, #12]
 80ba46e:	607a      	str	r2, [r7, #4]
 80ba470:	461a      	mov	r2, r3
 80ba472:	460b      	mov	r3, r1
 80ba474:	817b      	strh	r3, [r7, #10]
 80ba476:	4613      	mov	r3, r2
 80ba478:	813b      	strh	r3, [r7, #8]

  return (chbsp_i2c_mem_read(dev_ptr, mem_addr, data, num_bytes));
 80ba47a:	893b      	ldrh	r3, [r7, #8]
 80ba47c:	8979      	ldrh	r1, [r7, #10]
 80ba47e:	687a      	ldr	r2, [r7, #4]
 80ba480:	68f8      	ldr	r0, [r7, #12]
 80ba482:	f7e9 fb11 	bl	80a3aa8 <chbsp_i2c_mem_read>
 80ba486:	4603      	mov	r3, r0
}
 80ba488:	4618      	mov	r0, r3
 80ba48a:	3710      	adds	r7, #16
 80ba48c:	46bd      	mov	sp, r7
 80ba48e:	bd80      	pop	{r7, pc}

080ba490 <chdrv_read_word>:
 * \param data 		pointer to receive buffer
 *
 * \return 0 if successful, non-zero otherwise
 */
int chdrv_read_word(ch_dev_t * dev_ptr, uint16_t mem_addr, uint16_t * data)
{
 80ba490:	b580      	push	{r7, lr}
 80ba492:	b084      	sub	sp, #16
 80ba494:	af00      	add	r7, sp, #0
 80ba496:	60f8      	str	r0, [r7, #12]
 80ba498:	460b      	mov	r3, r1
 80ba49a:	607a      	str	r2, [r7, #4]
 80ba49c:	817b      	strh	r3, [r7, #10]
  //
  return (chbsp_i2c_mem_read(dev_ptr, mem_addr, (uint8_t *) data, 2));
 80ba49e:	8979      	ldrh	r1, [r7, #10]
 80ba4a0:	2302      	movs	r3, #2
 80ba4a2:	687a      	ldr	r2, [r7, #4]
 80ba4a4:	68f8      	ldr	r0, [r7, #12]
 80ba4a6:	f7e9 faff 	bl	80a3aa8 <chbsp_i2c_mem_read>
 80ba4aa:	4603      	mov	r3, r0
}
 80ba4ac:	4618      	mov	r0, r3
 80ba4ae:	3710      	adds	r7, #16
 80ba4b0:	46bd      	mov	sp, r7
 80ba4b2:	bd80      	pop	{r7, pc}

080ba4b4 <chdrv_group_measure_rtc>:
 * \note The calibration pulse is sent to all devices in the group at the same time.  Therefore 
 * all connected devices will see the same reference pulse length.
 * 
 */
void chdrv_group_measure_rtc(ch_group_t * grp_ptr)
{
 80ba4b4:	b580      	push	{r7, lr}
 80ba4b6:	b084      	sub	sp, #16
 80ba4b8:	af00      	add	r7, sp, #0
 80ba4ba:	6078      	str	r0, [r7, #4]
  uint8_t i;
  const uint32_t pulselength = grp_ptr->rtc_cal_pulse_ms;
 80ba4bc:	687b      	ldr	r3, [r7, #4]
 80ba4be:	88db      	ldrh	r3, [r3, #6]
 80ba4c0:	60bb      	str	r3, [r7, #8]

  /* Configure the host's side of the IO pin as a low output */
  chbsp_group_io_clear(grp_ptr);
 80ba4c2:	6878      	ldr	r0, [r7, #4]
 80ba4c4:	f7e9 f8b6 	bl	80a3634 <chbsp_group_io_clear>
  chbsp_group_set_io_dir_out(grp_ptr);
 80ba4c8:	6878      	ldr	r0, [r7, #4]
 80ba4ca:	f7e8 ffad 	bl	80a3428 <chbsp_group_set_io_dir_out>

  /* Set up RTC calibration */
  for (i = 0; i < grp_ptr->num_ports; i++) {
 80ba4ce:	2300      	movs	r3, #0
 80ba4d0:	73fb      	strb	r3, [r7, #15]
 80ba4d2:	e01a      	b.n	80ba50a <chdrv_group_measure_rtc+0x56>
    if (grp_ptr->device[i]->sensor_connected) {
 80ba4d4:	7bfb      	ldrb	r3, [r7, #15]
 80ba4d6:	687a      	ldr	r2, [r7, #4]
 80ba4d8:	3304      	adds	r3, #4
 80ba4da:	009b      	lsls	r3, r3, #2
 80ba4dc:	4413      	add	r3, r2
 80ba4de:	685b      	ldr	r3, [r3, #4]
 80ba4e0:	7fdb      	ldrb	r3, [r3, #31]
 80ba4e2:	2b00      	cmp	r3, #0
 80ba4e4:	d00e      	beq.n	80ba504 <chdrv_group_measure_rtc+0x50>
      grp_ptr->device[i]->prepare_pulse_timer(grp_ptr->device[i]);
 80ba4e6:	7bfb      	ldrb	r3, [r7, #15]
 80ba4e8:	687a      	ldr	r2, [r7, #4]
 80ba4ea:	3304      	adds	r3, #4
 80ba4ec:	009b      	lsls	r3, r3, #2
 80ba4ee:	4413      	add	r3, r2
 80ba4f0:	685b      	ldr	r3, [r3, #4]
 80ba4f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80ba4f4:	7bfb      	ldrb	r3, [r7, #15]
 80ba4f6:	6879      	ldr	r1, [r7, #4]
 80ba4f8:	3304      	adds	r3, #4
 80ba4fa:	009b      	lsls	r3, r3, #2
 80ba4fc:	440b      	add	r3, r1
 80ba4fe:	685b      	ldr	r3, [r3, #4]
 80ba500:	4618      	mov	r0, r3
 80ba502:	4790      	blx	r2
  for (i = 0; i < grp_ptr->num_ports; i++) {
 80ba504:	7bfb      	ldrb	r3, [r7, #15]
 80ba506:	3301      	adds	r3, #1
 80ba508:	73fb      	strb	r3, [r7, #15]
 80ba50a:	687b      	ldr	r3, [r7, #4]
 80ba50c:	781b      	ldrb	r3, [r3, #0]
 80ba50e:	7bfa      	ldrb	r2, [r7, #15]
 80ba510:	429a      	cmp	r2, r3
 80ba512:	d3df      	bcc.n	80ba4d4 <chdrv_group_measure_rtc+0x20>
    }
  }

  /* Trigger a pulse on the IO pin */
  chbsp_group_io_set(grp_ptr);
 80ba514:	6878      	ldr	r0, [r7, #4]
 80ba516:	f7e9 f8bd 	bl	80a3694 <chbsp_group_io_set>
  chbsp_delay_ms(pulselength);
 80ba51a:	68b8      	ldr	r0, [r7, #8]
 80ba51c:	f7e9 f9bc 	bl	80a3898 <chbsp_delay_ms>
  chbsp_group_io_clear(grp_ptr);
 80ba520:	6878      	ldr	r0, [r7, #4]
 80ba522:	f7e9 f887 	bl	80a3634 <chbsp_group_io_clear>

  chbsp_group_set_io_dir_in(grp_ptr);
 80ba526:	6878      	ldr	r0, [r7, #4]
 80ba528:	f7e8 ffba 	bl	80a34a0 <chbsp_group_set_io_dir_in>

  chbsp_delay_ms(1);
 80ba52c:	2001      	movs	r0, #1
 80ba52e:	f7e9 f9b3 	bl	80a3898 <chbsp_delay_ms>

  for (i = 0; i < grp_ptr->num_ports; i++) {
 80ba532:	2300      	movs	r3, #0
 80ba534:	73fb      	strb	r3, [r7, #15]
 80ba536:	e047      	b.n	80ba5c8 <chdrv_group_measure_rtc+0x114>
    if (grp_ptr->device[i]->sensor_connected) {
 80ba538:	7bfb      	ldrb	r3, [r7, #15]
 80ba53a:	687a      	ldr	r2, [r7, #4]
 80ba53c:	3304      	adds	r3, #4
 80ba53e:	009b      	lsls	r3, r3, #2
 80ba540:	4413      	add	r3, r2
 80ba542:	685b      	ldr	r3, [r3, #4]
 80ba544:	7fdb      	ldrb	r3, [r3, #31]
 80ba546:	2b00      	cmp	r3, #0
 80ba548:	d03b      	beq.n	80ba5c2 <chdrv_group_measure_rtc+0x10e>
      grp_ptr->device[i]->store_pt_result(grp_ptr->device[i]);
 80ba54a:	7bfb      	ldrb	r3, [r7, #15]
 80ba54c:	687a      	ldr	r2, [r7, #4]
 80ba54e:	3304      	adds	r3, #4
 80ba550:	009b      	lsls	r3, r3, #2
 80ba552:	4413      	add	r3, r2
 80ba554:	685b      	ldr	r3, [r3, #4]
 80ba556:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80ba558:	7bfb      	ldrb	r3, [r7, #15]
 80ba55a:	6879      	ldr	r1, [r7, #4]
 80ba55c:	3304      	adds	r3, #4
 80ba55e:	009b      	lsls	r3, r3, #2
 80ba560:	440b      	add	r3, r1
 80ba562:	685b      	ldr	r3, [r3, #4]
 80ba564:	4618      	mov	r0, r3
 80ba566:	4790      	blx	r2
      grp_ptr->device[i]->store_op_freq(grp_ptr->device[i]);
 80ba568:	7bfb      	ldrb	r3, [r7, #15]
 80ba56a:	687a      	ldr	r2, [r7, #4]
 80ba56c:	3304      	adds	r3, #4
 80ba56e:	009b      	lsls	r3, r3, #2
 80ba570:	4413      	add	r3, r2
 80ba572:	685b      	ldr	r3, [r3, #4]
 80ba574:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80ba576:	7bfb      	ldrb	r3, [r7, #15]
 80ba578:	6879      	ldr	r1, [r7, #4]
 80ba57a:	3304      	adds	r3, #4
 80ba57c:	009b      	lsls	r3, r3, #2
 80ba57e:	440b      	add	r3, r1
 80ba580:	685b      	ldr	r3, [r3, #4]
 80ba582:	4618      	mov	r0, r3
 80ba584:	4790      	blx	r2
      grp_ptr->device[i]->store_bandwidth(grp_ptr->device[i]);
 80ba586:	7bfb      	ldrb	r3, [r7, #15]
 80ba588:	687a      	ldr	r2, [r7, #4]
 80ba58a:	3304      	adds	r3, #4
 80ba58c:	009b      	lsls	r3, r3, #2
 80ba58e:	4413      	add	r3, r2
 80ba590:	685b      	ldr	r3, [r3, #4]
 80ba592:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80ba594:	7bfb      	ldrb	r3, [r7, #15]
 80ba596:	6879      	ldr	r1, [r7, #4]
 80ba598:	3304      	adds	r3, #4
 80ba59a:	009b      	lsls	r3, r3, #2
 80ba59c:	440b      	add	r3, r1
 80ba59e:	685b      	ldr	r3, [r3, #4]
 80ba5a0:	4618      	mov	r0, r3
 80ba5a2:	4790      	blx	r2
      grp_ptr->device[i]->store_scalefactor(grp_ptr->device[i]);
 80ba5a4:	7bfb      	ldrb	r3, [r7, #15]
 80ba5a6:	687a      	ldr	r2, [r7, #4]
 80ba5a8:	3304      	adds	r3, #4
 80ba5aa:	009b      	lsls	r3, r3, #2
 80ba5ac:	4413      	add	r3, r2
 80ba5ae:	685b      	ldr	r3, [r3, #4]
 80ba5b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80ba5b2:	7bfb      	ldrb	r3, [r7, #15]
 80ba5b4:	6879      	ldr	r1, [r7, #4]
 80ba5b6:	3304      	adds	r3, #4
 80ba5b8:	009b      	lsls	r3, r3, #2
 80ba5ba:	440b      	add	r3, r1
 80ba5bc:	685b      	ldr	r3, [r3, #4]
 80ba5be:	4618      	mov	r0, r3
 80ba5c0:	4790      	blx	r2
  for (i = 0; i < grp_ptr->num_ports; i++) {
 80ba5c2:	7bfb      	ldrb	r3, [r7, #15]
 80ba5c4:	3301      	adds	r3, #1
 80ba5c6:	73fb      	strb	r3, [r7, #15]
 80ba5c8:	687b      	ldr	r3, [r7, #4]
 80ba5ca:	781b      	ldrb	r3, [r3, #0]
 80ba5cc:	7bfa      	ldrb	r2, [r7, #15]
 80ba5ce:	429a      	cmp	r2, r3
 80ba5d0:	d3b2      	bcc.n	80ba538 <chdrv_group_measure_rtc+0x84>
    }
  }
}
 80ba5d2:	bf00      	nop
 80ba5d4:	bf00      	nop
 80ba5d6:	3710      	adds	r7, #16
 80ba5d8:	46bd      	mov	sp, r7
 80ba5da:	bd80      	pop	{r7, pc}

080ba5dc <chdrv_group_i2c_queue>:
 * \return 0 if successful, non-zero otherwise
 */
int chdrv_group_i2c_queue(ch_group_t * grp_ptr, ch_dev_t * dev_ptr,
                          uint8_t rd_wrb, uint8_t type, uint16_t addr,
                          uint16_t nbytes, uint8_t * data)
{
 80ba5dc:	b580      	push	{r7, lr}
 80ba5de:	b088      	sub	sp, #32
 80ba5e0:	af00      	add	r7, sp, #0
 80ba5e2:	60f8      	str	r0, [r7, #12]
 80ba5e4:	60b9      	str	r1, [r7, #8]
 80ba5e6:	4611      	mov	r1, r2
 80ba5e8:	461a      	mov	r2, r3
 80ba5ea:	460b      	mov	r3, r1
 80ba5ec:	71fb      	strb	r3, [r7, #7]
 80ba5ee:	4613      	mov	r3, r2
 80ba5f0:	71bb      	strb	r3, [r7, #6]

  uint8_t bus_num = ch_get_i2c_bus(dev_ptr);
 80ba5f2:	68b8      	ldr	r0, [r7, #8]
 80ba5f4:	f7fe fffe 	bl	80b95f4 <ch_get_i2c_bus>
 80ba5f8:	4603      	mov	r3, r0
 80ba5fa:	76fb      	strb	r3, [r7, #27]
  int ret_val;

  chdrv_i2c_queue_t *q = &(grp_ptr->i2c_queue[bus_num]);
 80ba5fc:	7efa      	ldrb	r2, [r7, #27]
 80ba5fe:	4613      	mov	r3, r2
 80ba600:	009b      	lsls	r3, r3, #2
 80ba602:	4413      	add	r3, r2
 80ba604:	009b      	lsls	r3, r3, #2
 80ba606:	3318      	adds	r3, #24
 80ba608:	68fa      	ldr	r2, [r7, #12]
 80ba60a:	4413      	add	r3, r2
 80ba60c:	3304      	adds	r3, #4
 80ba60e:	617b      	str	r3, [r7, #20]
  chdrv_i2c_transaction_t *t = &(q->transaction[q->len]);
 80ba610:	697b      	ldr	r3, [r7, #20]
 80ba612:	789b      	ldrb	r3, [r3, #2]
 80ba614:	011b      	lsls	r3, r3, #4
 80ba616:	697a      	ldr	r2, [r7, #20]
 80ba618:	4413      	add	r3, r2
 80ba61a:	3304      	adds	r3, #4
 80ba61c:	613b      	str	r3, [r7, #16]

  if (q->len < CHDRV_MAX_I2C_QUEUE_LENGTH) {
 80ba61e:	697b      	ldr	r3, [r7, #20]
 80ba620:	789b      	ldrb	r3, [r3, #2]
 80ba622:	2b00      	cmp	r3, #0
 80ba624:	d11d      	bne.n	80ba662 <chdrv_group_i2c_queue+0x86>
    t->databuf = data;
 80ba626:	693b      	ldr	r3, [r7, #16]
 80ba628:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80ba62a:	60da      	str	r2, [r3, #12]
    t->dev_ptr = dev_ptr;
 80ba62c:	693b      	ldr	r3, [r7, #16]
 80ba62e:	68ba      	ldr	r2, [r7, #8]
 80ba630:	609a      	str	r2, [r3, #8]
    t->addr = addr;
 80ba632:	693b      	ldr	r3, [r7, #16]
 80ba634:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80ba636:	809a      	strh	r2, [r3, #4]
    t->nbytes = nbytes;
 80ba638:	693b      	ldr	r3, [r7, #16]
 80ba63a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80ba63c:	80da      	strh	r2, [r3, #6]
    t->rd_wrb = rd_wrb;
 80ba63e:	693b      	ldr	r3, [r7, #16]
 80ba640:	79fa      	ldrb	r2, [r7, #7]
 80ba642:	705a      	strb	r2, [r3, #1]
    t->type = type;
 80ba644:	693b      	ldr	r3, [r7, #16]
 80ba646:	79ba      	ldrb	r2, [r7, #6]
 80ba648:	701a      	strb	r2, [r3, #0]
    t->xfer_num = 0;
 80ba64a:	693b      	ldr	r3, [r7, #16]
 80ba64c:	2200      	movs	r2, #0
 80ba64e:	709a      	strb	r2, [r3, #2]
    q->len++;
 80ba650:	697b      	ldr	r3, [r7, #20]
 80ba652:	789b      	ldrb	r3, [r3, #2]
 80ba654:	3301      	adds	r3, #1
 80ba656:	b2da      	uxtb	r2, r3
 80ba658:	697b      	ldr	r3, [r7, #20]
 80ba65a:	709a      	strb	r2, [r3, #2]
    ret_val = 0;
 80ba65c:	2300      	movs	r3, #0
 80ba65e:	61fb      	str	r3, [r7, #28]
 80ba660:	e001      	b.n	80ba666 <chdrv_group_i2c_queue+0x8a>
  } else {
    ret_val = 1;
 80ba662:	2301      	movs	r3, #1
 80ba664:	61fb      	str	r3, [r7, #28]
  }

  return ret_val;
 80ba666:	69fb      	ldr	r3, [r7, #28]
}
 80ba668:	4618      	mov	r0, r3
 80ba66a:	3720      	adds	r7, #32
 80ba66c:	46bd      	mov	sp, r7
 80ba66e:	bd80      	pop	{r7, pc}

080ba670 <chdrv_wait_for_lock>:
 *
 * After the sensor is programmed, it executes an internal start-up and self-test sequence. This function waits the
 * specified time in milliseconds for the sensor to finish this sequence.
 */
int chdrv_wait_for_lock(ch_dev_t * dev_ptr, uint16_t timeout_ms)
{
 80ba670:	b580      	push	{r7, lr}
 80ba672:	b084      	sub	sp, #16
 80ba674:	af00      	add	r7, sp, #0
 80ba676:	6078      	str	r0, [r7, #4]
 80ba678:	460b      	mov	r3, r1
 80ba67a:	807b      	strh	r3, [r7, #2]
  uint32_t start_time = chbsp_timestamp_ms();
 80ba67c:	f000 fbfd 	bl	80bae7a <chbsp_timestamp_ms>
 80ba680:	60b8      	str	r0, [r7, #8]
  int ch_err = !(dev_ptr->sensor_connected);
 80ba682:	687b      	ldr	r3, [r7, #4]
 80ba684:	7fdb      	ldrb	r3, [r3, #31]
 80ba686:	2b00      	cmp	r3, #0
 80ba688:	bf0c      	ite	eq
 80ba68a:	2301      	moveq	r3, #1
 80ba68c:	2300      	movne	r3, #0
 80ba68e:	b2db      	uxtb	r3, r3
 80ba690:	60fb      	str	r3, [r7, #12]

  while (!ch_err && !(dev_ptr->get_locked_state(dev_ptr))) {
 80ba692:	e00e      	b.n	80ba6b2 <chdrv_wait_for_lock+0x42>
    chbsp_delay_ms(10);
 80ba694:	200a      	movs	r0, #10
 80ba696:	f7e9 f8ff 	bl	80a3898 <chbsp_delay_ms>
    ch_err = ((chbsp_timestamp_ms() - start_time) > timeout_ms);
 80ba69a:	f000 fbee 	bl	80bae7a <chbsp_timestamp_ms>
 80ba69e:	4602      	mov	r2, r0
 80ba6a0:	68bb      	ldr	r3, [r7, #8]
 80ba6a2:	1ad2      	subs	r2, r2, r3
 80ba6a4:	887b      	ldrh	r3, [r7, #2]
 80ba6a6:	429a      	cmp	r2, r3
 80ba6a8:	bf8c      	ite	hi
 80ba6aa:	2301      	movhi	r3, #1
 80ba6ac:	2300      	movls	r3, #0
 80ba6ae:	b2db      	uxtb	r3, r3
 80ba6b0:	60fb      	str	r3, [r7, #12]
  while (!ch_err && !(dev_ptr->get_locked_state(dev_ptr))) {
 80ba6b2:	68fb      	ldr	r3, [r7, #12]
 80ba6b4:	2b00      	cmp	r3, #0
 80ba6b6:	d106      	bne.n	80ba6c6 <chdrv_wait_for_lock+0x56>
 80ba6b8:	687b      	ldr	r3, [r7, #4]
 80ba6ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80ba6bc:	6878      	ldr	r0, [r7, #4]
 80ba6be:	4798      	blx	r3
 80ba6c0:	4603      	mov	r3, r0
 80ba6c2:	2b00      	cmp	r3, #0
 80ba6c4:	d0e6      	beq.n	80ba694 <chdrv_wait_for_lock+0x24>
             dev_ptr->io_index);
    chbsp_print_str(cbuf);
  }
#endif

  return ch_err;
 80ba6c6:	68fb      	ldr	r3, [r7, #12]
}
 80ba6c8:	4618      	mov	r0, r3
 80ba6ca:	3710      	adds	r7, #16
 80ba6cc:	46bd      	mov	sp, r7
 80ba6ce:	bd80      	pop	{r7, pc}

080ba6d0 <chdrv_group_wait_for_lock>:
 * After each sensor is programmed, it executes an internal start-up and self-test sequence. This 
 * function waits for all sensor devices to finish this sequence.  For each device, the maximum 
 * time to wait is \a CHDRV_FREQLOCK_TIMEOUT_MS milliseconds.
 */
int chdrv_group_wait_for_lock(ch_group_t * grp_ptr)
{
 80ba6d0:	b580      	push	{r7, lr}
 80ba6d2:	b086      	sub	sp, #24
 80ba6d4:	af00      	add	r7, sp, #0
 80ba6d6:	6078      	str	r0, [r7, #4]
  int ch_err = 0;
 80ba6d8:	2300      	movs	r3, #0
 80ba6da:	617b      	str	r3, [r7, #20]

  for (uint8_t i = 0; i < grp_ptr->num_ports; i++) {
 80ba6dc:	2300      	movs	r3, #0
 80ba6de:	74fb      	strb	r3, [r7, #19]
 80ba6e0:	e015      	b.n	80ba70e <chdrv_group_wait_for_lock+0x3e>
    ch_dev_t *dev_ptr = grp_ptr->device[i];
 80ba6e2:	7cfb      	ldrb	r3, [r7, #19]
 80ba6e4:	687a      	ldr	r2, [r7, #4]
 80ba6e6:	3304      	adds	r3, #4
 80ba6e8:	009b      	lsls	r3, r3, #2
 80ba6ea:	4413      	add	r3, r2
 80ba6ec:	685b      	ldr	r3, [r3, #4]
 80ba6ee:	60fb      	str	r3, [r7, #12]

    if (dev_ptr->sensor_connected) {
 80ba6f0:	68fb      	ldr	r3, [r7, #12]
 80ba6f2:	7fdb      	ldrb	r3, [r3, #31]
 80ba6f4:	2b00      	cmp	r3, #0
 80ba6f6:	d007      	beq.n	80ba708 <chdrv_group_wait_for_lock+0x38>
      ch_err |= chdrv_wait_for_lock(dev_ptr, CHDRV_FREQLOCK_TIMEOUT_MS);
 80ba6f8:	2164      	movs	r1, #100	; 0x64
 80ba6fa:	68f8      	ldr	r0, [r7, #12]
 80ba6fc:	f7ff ffb8 	bl	80ba670 <chdrv_wait_for_lock>
 80ba700:	4602      	mov	r2, r0
 80ba702:	697b      	ldr	r3, [r7, #20]
 80ba704:	4313      	orrs	r3, r2
 80ba706:	617b      	str	r3, [r7, #20]
  for (uint8_t i = 0; i < grp_ptr->num_ports; i++) {
 80ba708:	7cfb      	ldrb	r3, [r7, #19]
 80ba70a:	3301      	adds	r3, #1
 80ba70c:	74fb      	strb	r3, [r7, #19]
 80ba70e:	687b      	ldr	r3, [r7, #4]
 80ba710:	781b      	ldrb	r3, [r3, #0]
 80ba712:	7cfa      	ldrb	r2, [r7, #19]
 80ba714:	429a      	cmp	r2, r3
 80ba716:	d3e4      	bcc.n	80ba6e2 <chdrv_group_wait_for_lock+0x12>
    }
  }
  return ch_err;
 80ba718:	697b      	ldr	r3, [r7, #20]
}
 80ba71a:	4618      	mov	r0, r3
 80ba71c:	3718      	adds	r7, #24
 80ba71e:	46bd      	mov	sp, r7
 80ba720:	bd80      	pop	{r7, pc}

080ba722 <chdrv_group_hw_trigger>:
 *
 * This function starts a triggered measurement on each sensor in a group, by briefly asserting the INT line to each device.  
 * Each sensor must have already been placed in hardware triggered mode before this function is called.
 */
int chdrv_group_hw_trigger(ch_group_t * grp_ptr)
{
 80ba722:	b580      	push	{r7, lr}
 80ba724:	b084      	sub	sp, #16
 80ba726:	af00      	add	r7, sp, #0
 80ba728:	6078      	str	r0, [r7, #4]
  int ch_err = !grp_ptr;
 80ba72a:	687b      	ldr	r3, [r7, #4]
 80ba72c:	2b00      	cmp	r3, #0
 80ba72e:	bf0c      	ite	eq
 80ba730:	2301      	moveq	r3, #1
 80ba732:	2300      	movne	r3, #0
 80ba734:	b2db      	uxtb	r3, r3
 80ba736:	60fb      	str	r3, [r7, #12]

  if (!ch_err) {
 80ba738:	68fb      	ldr	r3, [r7, #12]
 80ba73a:	2b00      	cmp	r3, #0
 80ba73c:	d117      	bne.n	80ba76e <chdrv_group_hw_trigger+0x4c>
    //Disable pin interrupt before triggering pulse
    chbsp_group_io_interrupt_disable(grp_ptr);
 80ba73e:	6878      	ldr	r0, [r7, #4]
 80ba740:	f7e9 f854 	bl	80a37ec <chbsp_group_io_interrupt_disable>

    // Generate pulse
    chbsp_group_set_io_dir_out(grp_ptr);
 80ba744:	6878      	ldr	r0, [r7, #4]
 80ba746:	f7e8 fe6f 	bl	80a3428 <chbsp_group_set_io_dir_out>
    chbsp_group_io_set(grp_ptr);
 80ba74a:	6878      	ldr	r0, [r7, #4]
 80ba74c:	f7e8 ffa2 	bl	80a3694 <chbsp_group_io_set>
    chbsp_delay_us(5);          // Pulse needs to be a minimum of 800ns long
 80ba750:	2005      	movs	r0, #5
 80ba752:	f7e9 f881 	bl	80a3858 <chbsp_delay_us>
    chbsp_group_io_clear(grp_ptr);
 80ba756:	6878      	ldr	r0, [r7, #4]
 80ba758:	f7e8 ff6c 	bl	80a3634 <chbsp_group_io_clear>
    chbsp_group_set_io_dir_in(grp_ptr);
 80ba75c:	6878      	ldr	r0, [r7, #4]
 80ba75e:	f7e8 fe9f 	bl	80a34a0 <chbsp_group_set_io_dir_in>

    // Delay a bit before re-enabling pin interrupt to avoid possibly triggering on falling-edge noise
    chbsp_delay_us(10);
 80ba762:	200a      	movs	r0, #10
 80ba764:	f7e9 f878 	bl	80a3858 <chbsp_delay_us>

    chbsp_group_io_interrupt_enable(grp_ptr);
 80ba768:	6878      	ldr	r0, [r7, #4]
 80ba76a:	f7e8 ffc3 	bl	80a36f4 <chbsp_group_io_interrupt_enable>
  }
  return ch_err;
 80ba76e:	68fb      	ldr	r3, [r7, #12]
}
 80ba770:	4618      	mov	r0, r3
 80ba772:	3710      	adds	r7, #16
 80ba774:	46bd      	mov	sp, r7
 80ba776:	bd80      	pop	{r7, pc}

080ba778 <chdrv_prog_write>:
 * \return 0 if write to sensor succeeded, non-zero otherwise
 *
 * This local function writes a value to a sensor programming register.
 */
int chdrv_prog_write(ch_dev_t * dev_ptr, uint8_t reg_addr, uint16_t data)
{
 80ba778:	b580      	push	{r7, lr}
 80ba77a:	b084      	sub	sp, #16
 80ba77c:	af00      	add	r7, sp, #0
 80ba77e:	6078      	str	r0, [r7, #4]
 80ba780:	460b      	mov	r3, r1
 80ba782:	70fb      	strb	r3, [r7, #3]
 80ba784:	4613      	mov	r3, r2
 80ba786:	803b      	strh	r3, [r7, #0]
  /* Set register address write bit */
  reg_addr |= 0x80;
 80ba788:	78fb      	ldrb	r3, [r7, #3]
 80ba78a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80ba78e:	70fb      	strb	r3, [r7, #3]

  /* Write the register address, followed by the value to be written */
  uint8_t message[] = { reg_addr, (uint8_t) data, (uint8_t) (data >> 8) };
 80ba790:	78fb      	ldrb	r3, [r7, #3]
 80ba792:	733b      	strb	r3, [r7, #12]
 80ba794:	883b      	ldrh	r3, [r7, #0]
 80ba796:	b2db      	uxtb	r3, r3
 80ba798:	737b      	strb	r3, [r7, #13]
 80ba79a:	883b      	ldrh	r3, [r7, #0]
 80ba79c:	0a1b      	lsrs	r3, r3, #8
 80ba79e:	b29b      	uxth	r3, r3
 80ba7a0:	b2db      	uxtb	r3, r3
 80ba7a2:	73bb      	strb	r3, [r7, #14]

  /* For the 2-byte registers, we also need to also write MSB after the LSB */
  return chdrv_prog_i2c_write(dev_ptr, message, (1 + CH_PROG_SIZEOF(reg_addr)));
 80ba7a4:	78fb      	ldrb	r3, [r7, #3]
 80ba7a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80ba7aa:	2b00      	cmp	r3, #0
 80ba7ac:	d001      	beq.n	80ba7b2 <chdrv_prog_write+0x3a>
 80ba7ae:	2202      	movs	r2, #2
 80ba7b0:	e000      	b.n	80ba7b4 <chdrv_prog_write+0x3c>
 80ba7b2:	2203      	movs	r2, #3
 80ba7b4:	f107 030c 	add.w	r3, r7, #12
 80ba7b8:	4619      	mov	r1, r3
 80ba7ba:	6878      	ldr	r0, [r7, #4]
 80ba7bc:	f7ff fdd5 	bl	80ba36a <chdrv_prog_i2c_write>
 80ba7c0:	4603      	mov	r3, r0
}
 80ba7c2:	4618      	mov	r0, r3
 80ba7c4:	3710      	adds	r7, #16
 80ba7c6:	46bd      	mov	sp, r7
 80ba7c8:	bd80      	pop	{r7, pc}
	...

080ba7cc <chdrv_prog_mem_write>:
 * This function writes to sensor memory using the low-level programming interface.  The type 
 * of write is automatically determined based on data length and target address alignment.
 */
int chdrv_prog_mem_write(ch_dev_t * dev_ptr, uint16_t addr, uint8_t * message,
                         uint16_t nbytes)
{
 80ba7cc:	b580      	push	{r7, lr}
 80ba7ce:	b086      	sub	sp, #24
 80ba7d0:	af00      	add	r7, sp, #0
 80ba7d2:	60f8      	str	r0, [r7, #12]
 80ba7d4:	607a      	str	r2, [r7, #4]
 80ba7d6:	461a      	mov	r2, r3
 80ba7d8:	460b      	mov	r3, r1
 80ba7da:	817b      	strh	r3, [r7, #10]
 80ba7dc:	4613      	mov	r3, r2
 80ba7de:	813b      	strh	r3, [r7, #8]
  int ch_err = (nbytes == 0);
 80ba7e0:	893b      	ldrh	r3, [r7, #8]
 80ba7e2:	2b00      	cmp	r3, #0
 80ba7e4:	bf0c      	ite	eq
 80ba7e6:	2301      	moveq	r3, #1
 80ba7e8:	2300      	movne	r3, #0
 80ba7ea:	b2db      	uxtb	r3, r3
 80ba7ec:	617b      	str	r3, [r7, #20]

  if (!ch_err) {
 80ba7ee:	697b      	ldr	r3, [r7, #20]
 80ba7f0:	2b00      	cmp	r3, #0
 80ba7f2:	d106      	bne.n	80ba802 <chdrv_prog_mem_write+0x36>
    ch_err = chdrv_prog_write(dev_ptr, CH_PROG_REG_ADDR, addr);
 80ba7f4:	897b      	ldrh	r3, [r7, #10]
 80ba7f6:	461a      	mov	r2, r3
 80ba7f8:	2105      	movs	r1, #5
 80ba7fa:	68f8      	ldr	r0, [r7, #12]
 80ba7fc:	f7ff ffbc 	bl	80ba778 <chdrv_prog_write>
 80ba800:	6178      	str	r0, [r7, #20]
  }

  if (nbytes == 1 || (nbytes == 2 && !(addr & 1))) {
 80ba802:	893b      	ldrh	r3, [r7, #8]
 80ba804:	2b01      	cmp	r3, #1
 80ba806:	d007      	beq.n	80ba818 <chdrv_prog_mem_write+0x4c>
 80ba808:	893b      	ldrh	r3, [r7, #8]
 80ba80a:	2b02      	cmp	r3, #2
 80ba80c:	d124      	bne.n	80ba858 <chdrv_prog_mem_write+0x8c>
 80ba80e:	897b      	ldrh	r3, [r7, #10]
 80ba810:	f003 0301 	and.w	r3, r3, #1
 80ba814:	2b00      	cmp	r3, #0
 80ba816:	d11f      	bne.n	80ba858 <chdrv_prog_mem_write+0x8c>
    uint16_t data = *((uint16_t *) message);
 80ba818:	687b      	ldr	r3, [r7, #4]
 80ba81a:	881b      	ldrh	r3, [r3, #0]
 80ba81c:	827b      	strh	r3, [r7, #18]
    if (!ch_err) {
 80ba81e:	697b      	ldr	r3, [r7, #20]
 80ba820:	2b00      	cmp	r3, #0
 80ba822:	d106      	bne.n	80ba832 <chdrv_prog_mem_write+0x66>
      ch_err = chdrv_prog_write(dev_ptr, CH_PROG_REG_DATA, data);
 80ba824:	8a7b      	ldrh	r3, [r7, #18]
 80ba826:	461a      	mov	r2, r3
 80ba828:	2106      	movs	r1, #6
 80ba82a:	68f8      	ldr	r0, [r7, #12]
 80ba82c:	f7ff ffa4 	bl	80ba778 <chdrv_prog_write>
 80ba830:	6178      	str	r0, [r7, #20]
    }
    if (!ch_err) {
 80ba832:	697b      	ldr	r3, [r7, #20]
 80ba834:	2b00      	cmp	r3, #0
 80ba836:	d12f      	bne.n	80ba898 <chdrv_prog_mem_write+0xcc>
      uint8_t opcode = (0x03 | ((nbytes == 1) ? 0x08 : 0x00));  // XXX need define
 80ba838:	893b      	ldrh	r3, [r7, #8]
 80ba83a:	2b01      	cmp	r3, #1
 80ba83c:	d101      	bne.n	80ba842 <chdrv_prog_mem_write+0x76>
 80ba83e:	230b      	movs	r3, #11
 80ba840:	e000      	b.n	80ba844 <chdrv_prog_mem_write+0x78>
 80ba842:	2303      	movs	r3, #3
 80ba844:	747b      	strb	r3, [r7, #17]

      ch_err = chdrv_prog_write(dev_ptr, CH_PROG_REG_CTL, opcode);
 80ba846:	7c7b      	ldrb	r3, [r7, #17]
 80ba848:	b29b      	uxth	r3, r3
 80ba84a:	461a      	mov	r2, r3
 80ba84c:	2144      	movs	r1, #68	; 0x44
 80ba84e:	68f8      	ldr	r0, [r7, #12]
 80ba850:	f7ff ff92 	bl	80ba778 <chdrv_prog_write>
 80ba854:	6178      	str	r0, [r7, #20]
  if (nbytes == 1 || (nbytes == 2 && !(addr & 1))) {
 80ba856:	e01f      	b.n	80ba898 <chdrv_prog_mem_write+0xcc>
    }
  } else {
    static const uint8_t burst_hdr[2] = { 0xC4, 0x0B }; // XXX need define

    if (!ch_err) {
 80ba858:	697b      	ldr	r3, [r7, #20]
 80ba85a:	2b00      	cmp	r3, #0
 80ba85c:	d108      	bne.n	80ba870 <chdrv_prog_mem_write+0xa4>
      ch_err = chdrv_prog_write(dev_ptr, CH_PROG_REG_CNT, (nbytes - 1));
 80ba85e:	893b      	ldrh	r3, [r7, #8]
 80ba860:	3b01      	subs	r3, #1
 80ba862:	b29b      	uxth	r3, r3
 80ba864:	461a      	mov	r2, r3
 80ba866:	2107      	movs	r1, #7
 80ba868:	68f8      	ldr	r0, [r7, #12]
 80ba86a:	f7ff ff85 	bl	80ba778 <chdrv_prog_write>
 80ba86e:	6178      	str	r0, [r7, #20]
    }
    if (!ch_err) {
 80ba870:	697b      	ldr	r3, [r7, #20]
 80ba872:	2b00      	cmp	r3, #0
 80ba874:	d105      	bne.n	80ba882 <chdrv_prog_mem_write+0xb6>
      ch_err =
          chdrv_prog_i2c_write(dev_ptr, (uint8_t *) burst_hdr,
 80ba876:	2202      	movs	r2, #2
 80ba878:	490a      	ldr	r1, [pc, #40]	; (80ba8a4 <chdrv_prog_mem_write+0xd8>)
 80ba87a:	68f8      	ldr	r0, [r7, #12]
 80ba87c:	f7ff fd75 	bl	80ba36a <chdrv_prog_i2c_write>
 80ba880:	6178      	str	r0, [r7, #20]
                               sizeof(burst_hdr));
    }
    if (!ch_err) {
 80ba882:	697b      	ldr	r3, [r7, #20]
 80ba884:	2b00      	cmp	r3, #0
 80ba886:	d108      	bne.n	80ba89a <chdrv_prog_mem_write+0xce>
      ch_err = chdrv_prog_i2c_write(dev_ptr, message, nbytes);
 80ba888:	893b      	ldrh	r3, [r7, #8]
 80ba88a:	461a      	mov	r2, r3
 80ba88c:	6879      	ldr	r1, [r7, #4]
 80ba88e:	68f8      	ldr	r0, [r7, #12]
 80ba890:	f7ff fd6b 	bl	80ba36a <chdrv_prog_i2c_write>
 80ba894:	6178      	str	r0, [r7, #20]
 80ba896:	e000      	b.n	80ba89a <chdrv_prog_mem_write+0xce>
  if (nbytes == 1 || (nbytes == 2 && !(addr & 1))) {
 80ba898:	bf00      	nop
    }
  }
  return ch_err;
 80ba89a:	697b      	ldr	r3, [r7, #20]
}
 80ba89c:	4618      	mov	r0, r3
 80ba89e:	3718      	adds	r7, #24
 80ba8a0:	46bd      	mov	sp, r7
 80ba8a2:	bd80      	pop	{r7, pc}
 80ba8a4:	080dd2ac 	.word	0x080dd2ac

080ba8a8 <chdrv_prog_read>:
 *
 * This local function reads a value from a sensor programming register.
 */
static int chdrv_prog_read(ch_dev_t * dev_ptr, uint8_t reg_addr,
                           uint16_t * data)
{
 80ba8a8:	b580      	push	{r7, lr}
 80ba8aa:	b088      	sub	sp, #32
 80ba8ac:	af00      	add	r7, sp, #0
 80ba8ae:	60f8      	str	r0, [r7, #12]
 80ba8b0:	460b      	mov	r3, r1
 80ba8b2:	607a      	str	r2, [r7, #4]
 80ba8b4:	72fb      	strb	r3, [r7, #11]
  uint8_t nbytes = CH_PROG_SIZEOF(reg_addr);
 80ba8b6:	7afb      	ldrb	r3, [r7, #11]
 80ba8b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80ba8bc:	2b00      	cmp	r3, #0
 80ba8be:	d001      	beq.n	80ba8c4 <chdrv_prog_read+0x1c>
 80ba8c0:	2301      	movs	r3, #1
 80ba8c2:	e000      	b.n	80ba8c6 <chdrv_prog_read+0x1e>
 80ba8c4:	2302      	movs	r3, #2
 80ba8c6:	76fb      	strb	r3, [r7, #27]

  uint8_t read_data[2];
  uint8_t message[1] = { 0x7F & reg_addr };
 80ba8c8:	7afb      	ldrb	r3, [r7, #11]
 80ba8ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80ba8ce:	b2db      	uxtb	r3, r3
 80ba8d0:	753b      	strb	r3, [r7, #20]

  int ch_err = chdrv_prog_i2c_write(dev_ptr, message, sizeof(message));
 80ba8d2:	f107 0314 	add.w	r3, r7, #20
 80ba8d6:	2201      	movs	r2, #1
 80ba8d8:	4619      	mov	r1, r3
 80ba8da:	68f8      	ldr	r0, [r7, #12]
 80ba8dc:	f7ff fd45 	bl	80ba36a <chdrv_prog_i2c_write>
 80ba8e0:	61f8      	str	r0, [r7, #28]

  if (!ch_err) {
 80ba8e2:	69fb      	ldr	r3, [r7, #28]
 80ba8e4:	2b00      	cmp	r3, #0
 80ba8e6:	d108      	bne.n	80ba8fa <chdrv_prog_read+0x52>
    ch_err = chdrv_prog_i2c_read(dev_ptr, read_data, nbytes);
 80ba8e8:	7efb      	ldrb	r3, [r7, #27]
 80ba8ea:	b29a      	uxth	r2, r3
 80ba8ec:	f107 0318 	add.w	r3, r7, #24
 80ba8f0:	4619      	mov	r1, r3
 80ba8f2:	68f8      	ldr	r0, [r7, #12]
 80ba8f4:	f7ff fd53 	bl	80ba39e <chdrv_prog_i2c_read>
 80ba8f8:	61f8      	str	r0, [r7, #28]
  }

  if (!ch_err) {
 80ba8fa:	69fb      	ldr	r3, [r7, #28]
 80ba8fc:	2b00      	cmp	r3, #0
 80ba8fe:	d111      	bne.n	80ba924 <chdrv_prog_read+0x7c>
    *data = read_data[0];
 80ba900:	7e3b      	ldrb	r3, [r7, #24]
 80ba902:	b29a      	uxth	r2, r3
 80ba904:	687b      	ldr	r3, [r7, #4]
 80ba906:	801a      	strh	r2, [r3, #0]
    if (nbytes > 1) {
 80ba908:	7efb      	ldrb	r3, [r7, #27]
 80ba90a:	2b01      	cmp	r3, #1
 80ba90c:	d90a      	bls.n	80ba924 <chdrv_prog_read+0x7c>
      *data |= (((uint16_t) read_data[1]) << 8);
 80ba90e:	687b      	ldr	r3, [r7, #4]
 80ba910:	881b      	ldrh	r3, [r3, #0]
 80ba912:	b21a      	sxth	r2, r3
 80ba914:	7e7b      	ldrb	r3, [r7, #25]
 80ba916:	021b      	lsls	r3, r3, #8
 80ba918:	b21b      	sxth	r3, r3
 80ba91a:	4313      	orrs	r3, r2
 80ba91c:	b21b      	sxth	r3, r3
 80ba91e:	b29a      	uxth	r2, r3
 80ba920:	687b      	ldr	r3, [r7, #4]
 80ba922:	801a      	strh	r2, [r3, #0]
    }
  }

  return ch_err;
 80ba924:	69fb      	ldr	r3, [r7, #28]
}
 80ba926:	4618      	mov	r0, r3
 80ba928:	3720      	adds	r7, #32
 80ba92a:	46bd      	mov	sp, r7
 80ba92c:	bd80      	pop	{r7, pc}

080ba92e <chdrv_write_firmware>:
 * This local function writes the sensor firmware image to the device.
 */
/*!
 */
static int chdrv_write_firmware(ch_dev_t * dev_ptr)
{
 80ba92e:	b580      	push	{r7, lr}
 80ba930:	b084      	sub	sp, #16
 80ba932:	af00      	add	r7, sp, #0
 80ba934:	6078      	str	r0, [r7, #4]
  ch_fw_load_func_t func_ptr = dev_ptr->api_funcs.fw_load;      // pointer to firmware load function
 80ba936:	687b      	ldr	r3, [r7, #4]
 80ba938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80ba93a:	60bb      	str	r3, [r7, #8]
  int ch_err = ((func_ptr == NULL) || (!dev_ptr->sensor_connected));
 80ba93c:	68bb      	ldr	r3, [r7, #8]
 80ba93e:	2b00      	cmp	r3, #0
 80ba940:	d003      	beq.n	80ba94a <chdrv_write_firmware+0x1c>
 80ba942:	687b      	ldr	r3, [r7, #4]
 80ba944:	7fdb      	ldrb	r3, [r3, #31]
 80ba946:	2b00      	cmp	r3, #0
 80ba948:	d101      	bne.n	80ba94e <chdrv_write_firmware+0x20>
 80ba94a:	2301      	movs	r3, #1
 80ba94c:	e000      	b.n	80ba950 <chdrv_write_firmware+0x22>
 80ba94e:	2300      	movs	r3, #0
 80ba950:	60fb      	str	r3, [r7, #12]
  if (!ch_err) {
    chbsp_print_str("chdrv_write_firmware\n");
  }
#endif

  if (!ch_err) {
 80ba952:	68fb      	ldr	r3, [r7, #12]
 80ba954:	2b00      	cmp	r3, #0
 80ba956:	d10a      	bne.n	80ba96e <chdrv_write_firmware+0x40>
#ifdef CHDRV_DEBUG
    chbsp_print_str("Programming Chirp sensor...\n");
    prog_time = chbsp_timestamp_ms();
#endif
    if (func_ptr != NULL) {
 80ba958:	68bb      	ldr	r3, [r7, #8]
 80ba95a:	2b00      	cmp	r3, #0
 80ba95c:	d005      	beq.n	80ba96a <chdrv_write_firmware+0x3c>
      ch_err = (*func_ptr) (dev_ptr);
 80ba95e:	68bb      	ldr	r3, [r7, #8]
 80ba960:	6878      	ldr	r0, [r7, #4]
 80ba962:	4798      	blx	r3
 80ba964:	4603      	mov	r3, r0
 80ba966:	60fb      	str	r3, [r7, #12]
 80ba968:	e001      	b.n	80ba96e <chdrv_write_firmware+0x40>
    } else {
      ch_err = 1;               // indicate error
 80ba96a:	2301      	movs	r3, #1
 80ba96c:	60fb      	str	r3, [r7, #12]
             prog_time);
    chbsp_print_str(cbuf);
  }
#endif

  return ch_err;
 80ba96e:	68fb      	ldr	r3, [r7, #12]
}
 80ba970:	4618      	mov	r0, r3
 80ba972:	3710      	adds	r7, #16
 80ba974:	46bd      	mov	sp, r7
 80ba976:	bd80      	pop	{r7, pc}

080ba978 <chdrv_init_ram>:
 * \return 0 if memory write succeeded, non-zero otherwise
 *
 * This local function initializes memory locations in the Chirp sensor, as required by the firmware image.
 */
static int chdrv_init_ram(ch_dev_t * dev_ptr)
{
 80ba978:	b580      	push	{r7, lr}
 80ba97a:	b084      	sub	sp, #16
 80ba97c:	af00      	add	r7, sp, #0
 80ba97e:	6078      	str	r0, [r7, #4]
  int ch_err = !dev_ptr || !dev_ptr->sensor_connected;
 80ba980:	687b      	ldr	r3, [r7, #4]
 80ba982:	2b00      	cmp	r3, #0
 80ba984:	d003      	beq.n	80ba98e <chdrv_init_ram+0x16>
 80ba986:	687b      	ldr	r3, [r7, #4]
 80ba988:	7fdb      	ldrb	r3, [r3, #31]
 80ba98a:	2b00      	cmp	r3, #0
 80ba98c:	d101      	bne.n	80ba992 <chdrv_init_ram+0x1a>
 80ba98e:	2301      	movs	r3, #1
 80ba990:	e000      	b.n	80ba994 <chdrv_init_ram+0x1c>
 80ba992:	2300      	movs	r3, #0
 80ba994:	60fb      	str	r3, [r7, #12]
  if (!ch_err) {
    chbsp_print_str("chdrv_init_ram\n");
  }
#endif

  if ((!ch_err) && (dev_ptr->get_fw_ram_init_size() != 0)) {    // if size is not zero, ram init data exists
 80ba996:	68fb      	ldr	r3, [r7, #12]
 80ba998:	2b00      	cmp	r3, #0
 80ba99a:	d11a      	bne.n	80ba9d2 <chdrv_init_ram+0x5a>
 80ba99c:	687b      	ldr	r3, [r7, #4]
 80ba99e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80ba9a0:	4798      	blx	r3
 80ba9a2:	4603      	mov	r3, r0
 80ba9a4:	2b00      	cmp	r3, #0
 80ba9a6:	d014      	beq.n	80ba9d2 <chdrv_init_ram+0x5a>
    uint16_t ram_address;
    uint16_t ram_bytecount;

    ram_address = dev_ptr->get_fw_ram_init_addr();
 80ba9a8:	687b      	ldr	r3, [r7, #4]
 80ba9aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80ba9ac:	4798      	blx	r3
 80ba9ae:	4603      	mov	r3, r0
 80ba9b0:	817b      	strh	r3, [r7, #10]
    ram_bytecount = dev_ptr->get_fw_ram_init_size();
 80ba9b2:	687b      	ldr	r3, [r7, #4]
 80ba9b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80ba9b6:	4798      	blx	r3
 80ba9b8:	4603      	mov	r3, r0
 80ba9ba:	813b      	strh	r3, [r7, #8]

    if (!ch_err) {
 80ba9bc:	68fb      	ldr	r3, [r7, #12]
 80ba9be:	2b00      	cmp	r3, #0
 80ba9c0:	d107      	bne.n	80ba9d2 <chdrv_init_ram+0x5a>
      chbsp_print_str("Loading RAM init data...\n");
      prog_time = chbsp_timestamp_ms();
#endif
      ch_err =
          chdrv_prog_mem_write(dev_ptr, ram_address,
                               (uint8_t *) dev_ptr->ram_init, ram_bytecount);
 80ba9c2:	687b      	ldr	r3, [r7, #4]
 80ba9c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
          chdrv_prog_mem_write(dev_ptr, ram_address,
 80ba9c6:	893b      	ldrh	r3, [r7, #8]
 80ba9c8:	8979      	ldrh	r1, [r7, #10]
 80ba9ca:	6878      	ldr	r0, [r7, #4]
 80ba9cc:	f7ff fefe 	bl	80ba7cc <chdrv_prog_mem_write>
 80ba9d0:	60f8      	str	r0, [r7, #12]
        chbsp_print_str(cbuf);
      }
#endif
    }
  }
  return ch_err;
 80ba9d2:	68fb      	ldr	r3, [r7, #12]
}
 80ba9d4:	4618      	mov	r0, r3
 80ba9d6:	3710      	adds	r7, #16
 80ba9d8:	46bd      	mov	sp, r7
 80ba9da:	bd80      	pop	{r7, pc}

080ba9dc <chdrv_reset_and_halt>:
 * This function resets and halts a sensor device by writing to the control registers.
 *
 * In order for the device to respond, the PROG pin for the device must be asserted before this function is called. 
 */
static int chdrv_reset_and_halt(ch_dev_t * dev_ptr)
{
 80ba9dc:	b580      	push	{r7, lr}
 80ba9de:	b084      	sub	sp, #16
 80ba9e0:	af00      	add	r7, sp, #0
 80ba9e2:	6078      	str	r0, [r7, #4]
  int ch_err = chdrv_prog_write(dev_ptr, CH_PROG_REG_CPU, 0x40);        // reset asic                   // XXX need define
 80ba9e4:	2240      	movs	r2, #64	; 0x40
 80ba9e6:	2142      	movs	r1, #66	; 0x42
 80ba9e8:	6878      	ldr	r0, [r7, #4]
 80ba9ea:	f7ff fec5 	bl	80ba778 <chdrv_prog_write>
 80ba9ee:	60f8      	str	r0, [r7, #12]

  ch_err |= chdrv_prog_write(dev_ptr, CH_PROG_REG_CPU, 0x11);   // halt asic and disable watchdog;                      // XXX need define
 80ba9f0:	2211      	movs	r2, #17
 80ba9f2:	2142      	movs	r1, #66	; 0x42
 80ba9f4:	6878      	ldr	r0, [r7, #4]
 80ba9f6:	f7ff febf 	bl	80ba778 <chdrv_prog_write>
 80ba9fa:	4602      	mov	r2, r0
 80ba9fc:	68fb      	ldr	r3, [r7, #12]
 80ba9fe:	4313      	orrs	r3, r2
 80baa00:	60fb      	str	r3, [r7, #12]

  return ch_err;
 80baa02:	68fb      	ldr	r3, [r7, #12]
}
 80baa04:	4618      	mov	r0, r3
 80baa06:	3710      	adds	r7, #16
 80baa08:	46bd      	mov	sp, r7
 80baa0a:	bd80      	pop	{r7, pc}

080baa0c <chdrv_prog_ping>:
 * the programming interface I2C address (0x45). 
 *
 * In order for the device to respond, the PROG pin for the device must be asserted before this function is called. 
 */
int chdrv_prog_ping(ch_dev_t * dev_ptr)
{
 80baa0c:	b580      	push	{r7, lr}
 80baa0e:	b084      	sub	sp, #16
 80baa10:	af00      	add	r7, sp, #0
 80baa12:	6078      	str	r0, [r7, #4]
  // Try a dummy write to the sensor to make sure it's connected and working
  uint16_t tmp;
  int ch_err;

  ch_err = chdrv_reset_and_halt(dev_ptr);
 80baa14:	6878      	ldr	r0, [r7, #4]
 80baa16:	f7ff ffe1 	bl	80ba9dc <chdrv_reset_and_halt>
 80baa1a:	60f8      	str	r0, [r7, #12]

  ch_err |= chdrv_prog_read(dev_ptr, CH_PROG_REG_PING, &tmp);
 80baa1c:	f107 030a 	add.w	r3, r7, #10
 80baa20:	461a      	mov	r2, r3
 80baa22:	2100      	movs	r1, #0
 80baa24:	6878      	ldr	r0, [r7, #4]
 80baa26:	f7ff ff3f 	bl	80ba8a8 <chdrv_prog_read>
 80baa2a:	4602      	mov	r2, r0
 80baa2c:	68fb      	ldr	r3, [r7, #12]
 80baa2e:	4313      	orrs	r3, r2
 80baa30:	60fb      	str	r3, [r7, #12]
    snprintf(cbuf, sizeof(cbuf), "Test I2C read: %04X\n", tmp);
    chbsp_print_str(cbuf);
  }
#endif

  return !(ch_err);
 80baa32:	68fb      	ldr	r3, [r7, #12]
 80baa34:	2b00      	cmp	r3, #0
 80baa36:	bf0c      	ite	eq
 80baa38:	2301      	moveq	r3, #1
 80baa3a:	2300      	movne	r3, #0
 80baa3c:	b2db      	uxtb	r3, r3
}
 80baa3e:	4618      	mov	r0, r3
 80baa40:	3710      	adds	r7, #16
 80baa42:	46bd      	mov	sp, r7
 80baa44:	bd80      	pop	{r7, pc}

080baa46 <chdrv_detect_and_program>:
 * function may be used to wait for this sequence to complete.
 *
 * \note This routine will leave the PROG pin de-asserted when it completes.
 */
int chdrv_detect_and_program(ch_dev_t * dev_ptr)
{
 80baa46:	b580      	push	{r7, lr}
 80baa48:	b086      	sub	sp, #24
 80baa4a:	af00      	add	r7, sp, #0
 80baa4c:	6078      	str	r0, [r7, #4]
  int ch_err = !dev_ptr;
 80baa4e:	687b      	ldr	r3, [r7, #4]
 80baa50:	2b00      	cmp	r3, #0
 80baa52:	bf0c      	ite	eq
 80baa54:	2301      	moveq	r3, #1
 80baa56:	2300      	movne	r3, #0
 80baa58:	b2db      	uxtb	r3, r3
 80baa5a:	617b      	str	r3, [r7, #20]
  if (ch_err) {
 80baa5c:	697b      	ldr	r3, [r7, #20]
 80baa5e:	2b00      	cmp	r3, #0
 80baa60:	d001      	beq.n	80baa66 <chdrv_detect_and_program+0x20>
    return ch_err;
 80baa62:	697b      	ldr	r3, [r7, #20]
 80baa64:	e08c      	b.n	80bab80 <chdrv_detect_and_program+0x13a>
  }

  chbsp_program_enable(dev_ptr);        // assert PROG pin
 80baa66:	6878      	ldr	r0, [r7, #4]
 80baa68:	f7e8 fca2 	bl	80a33b0 <chbsp_program_enable>

  if (chdrv_prog_ping(dev_ptr)) {       // if device found
 80baa6c:	6878      	ldr	r0, [r7, #4]
 80baa6e:	f7ff ffcd 	bl	80baa0c <chdrv_prog_ping>
 80baa72:	4603      	mov	r3, r0
 80baa74:	2b00      	cmp	r3, #0
 80baa76:	d06d      	beq.n	80bab54 <chdrv_detect_and_program+0x10e>
    dev_ptr->sensor_connected = 1;
 80baa78:	687b      	ldr	r3, [r7, #4]
 80baa7a:	2201      	movs	r2, #1
 80baa7c:	77da      	strb	r2, [r3, #31]

    // Call device discovery hook routine, if any
    chdrv_discovery_hook_t hook_ptr = dev_ptr->group->disco_hook;
 80baa7e:	687b      	ldr	r3, [r7, #4]
 80baa80:	681b      	ldr	r3, [r3, #0]
 80baa82:	689b      	ldr	r3, [r3, #8]
 80baa84:	613b      	str	r3, [r7, #16]
    if (hook_ptr != NULL) {
 80baa86:	693b      	ldr	r3, [r7, #16]
 80baa88:	2b00      	cmp	r3, #0
 80baa8a:	d004      	beq.n	80baa96 <chdrv_detect_and_program+0x50>
      ch_err = (*hook_ptr) (dev_ptr);   // hook routine can return error, will abort device init
 80baa8c:	693b      	ldr	r3, [r7, #16]
 80baa8e:	6878      	ldr	r0, [r7, #4]
 80baa90:	4798      	blx	r3
 80baa92:	4603      	mov	r3, r0
 80baa94:	617b      	str	r3, [r7, #20]
      snprintf(cbuf, sizeof(cbuf), "PROG_STAT: 0x%02X\n", prog_stat);
      chbsp_print_str(cbuf);
    }
#endif

    ch_err = chdrv_init_ram(dev_ptr) || // init ram values
 80baa96:	6878      	ldr	r0, [r7, #4]
 80baa98:	f7ff ff6e 	bl	80ba978 <chdrv_init_ram>
 80baa9c:	4603      	mov	r3, r0
        chdrv_write_firmware(dev_ptr) ||        // transfer program
 80baa9e:	2b00      	cmp	r3, #0
 80baaa0:	d10b      	bne.n	80baaba <chdrv_detect_and_program+0x74>
 80baaa2:	6878      	ldr	r0, [r7, #4]
 80baaa4:	f7ff ff43 	bl	80ba92e <chdrv_write_firmware>
 80baaa8:	4603      	mov	r3, r0
    ch_err = chdrv_init_ram(dev_ptr) || // init ram values
 80baaaa:	2b00      	cmp	r3, #0
 80baaac:	d105      	bne.n	80baaba <chdrv_detect_and_program+0x74>
        chdrv_reset_and_halt(dev_ptr);  // reset asic, since it was running mystery code before halt
 80baaae:	6878      	ldr	r0, [r7, #4]
 80baab0:	f7ff ff94 	bl	80ba9dc <chdrv_reset_and_halt>
 80baab4:	4603      	mov	r3, r0
        chdrv_write_firmware(dev_ptr) ||        // transfer program
 80baab6:	2b00      	cmp	r3, #0
 80baab8:	d001      	beq.n	80baabe <chdrv_detect_and_program+0x78>
 80baaba:	2301      	movs	r3, #1
 80baabc:	e000      	b.n	80baac0 <chdrv_detect_and_program+0x7a>
 80baabe:	2300      	movs	r3, #0
    ch_err = chdrv_init_ram(dev_ptr) || // init ram values
 80baac0:	617b      	str	r3, [r7, #20]
               dev_ptr->i2c_address);
      chbsp_print_str(cbuf);
    }
#endif

    if (!ch_err) {
 80baac2:	697b      	ldr	r3, [r7, #20]
 80baac4:	2b00      	cmp	r3, #0
 80baac6:	d109      	bne.n	80baadc <chdrv_detect_and_program+0x96>
      ch_err = chdrv_prog_mem_write(dev_ptr, 0x01C5, &dev_ptr->i2c_address, 1); // XXX need define
 80baac8:	687b      	ldr	r3, [r7, #4]
 80baaca:	f103 0218 	add.w	r2, r3, #24
 80baace:	2301      	movs	r3, #1
 80baad0:	f240 11c5 	movw	r1, #453	; 0x1c5
 80baad4:	6878      	ldr	r0, [r7, #4]
 80baad6:	f7ff fe79 	bl	80ba7cc <chdrv_prog_mem_write>
 80baada:	6178      	str	r0, [r7, #20]
    }

    /* Run charge pumps */
    if (!ch_err) {
 80baadc:	697b      	ldr	r3, [r7, #20]
 80baade:	2b00      	cmp	r3, #0
 80baae0:	d12e      	bne.n	80bab40 <chdrv_detect_and_program+0xfa>
      uint16_t write_val;
      write_val = 0x0200;       // XXX need defines
 80baae2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80baae6:	81fb      	strh	r3, [r7, #14]
      ch_err |= chdrv_prog_mem_write(dev_ptr, 0x01A6, (uint8_t *) & write_val, 2);      // PMUT.CNTRL4 = HVVSS_FON
 80baae8:	f107 020e 	add.w	r2, r7, #14
 80baaec:	2302      	movs	r3, #2
 80baaee:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 80baaf2:	6878      	ldr	r0, [r7, #4]
 80baaf4:	f7ff fe6a 	bl	80ba7cc <chdrv_prog_mem_write>
 80baaf8:	4602      	mov	r2, r0
 80baafa:	697b      	ldr	r3, [r7, #20]
 80baafc:	4313      	orrs	r3, r2
 80baafe:	617b      	str	r3, [r7, #20]
      chbsp_delay_ms(5);
 80bab00:	2005      	movs	r0, #5
 80bab02:	f7e8 fec9 	bl	80a3898 <chbsp_delay_ms>
      write_val = 0x0600;
 80bab06:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80bab0a:	81fb      	strh	r3, [r7, #14]
      ch_err = chdrv_prog_mem_write(dev_ptr, 0x01A6, (uint8_t *) & write_val, 2);       // PMUT.CNTRL4 = (HVVSS_FON | HVVDD_FON)
 80bab0c:	f107 020e 	add.w	r2, r7, #14
 80bab10:	2302      	movs	r3, #2
 80bab12:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 80bab16:	6878      	ldr	r0, [r7, #4]
 80bab18:	f7ff fe58 	bl	80ba7cc <chdrv_prog_mem_write>
 80bab1c:	6178      	str	r0, [r7, #20]
      chbsp_delay_ms(5);
 80bab1e:	2005      	movs	r0, #5
 80bab20:	f7e8 feba 	bl	80a3898 <chbsp_delay_ms>
      write_val = 0x0000;
 80bab24:	2300      	movs	r3, #0
 80bab26:	81fb      	strh	r3, [r7, #14]
      ch_err |= chdrv_prog_mem_write(dev_ptr, 0x01A6, (uint8_t *) & write_val, 2);      // PMUT.CNTRL4 = 0
 80bab28:	f107 020e 	add.w	r2, r7, #14
 80bab2c:	2302      	movs	r3, #2
 80bab2e:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 80bab32:	6878      	ldr	r0, [r7, #4]
 80bab34:	f7ff fe4a 	bl	80ba7cc <chdrv_prog_mem_write>
 80bab38:	4602      	mov	r2, r0
 80bab3a:	697b      	ldr	r3, [r7, #20]
 80bab3c:	4313      	orrs	r3, r2
 80bab3e:	617b      	str	r3, [r7, #20]
    }

    if (!ch_err) {
 80bab40:	697b      	ldr	r3, [r7, #20]
 80bab42:	2b00      	cmp	r3, #0
 80bab44:	d109      	bne.n	80bab5a <chdrv_detect_and_program+0x114>
      ch_err = chdrv_prog_write(dev_ptr, CH_PROG_REG_CPU, 2);   // Exit programming mode and run the chip
 80bab46:	2202      	movs	r2, #2
 80bab48:	2142      	movs	r1, #66	; 0x42
 80bab4a:	6878      	ldr	r0, [r7, #4]
 80bab4c:	f7ff fe14 	bl	80ba778 <chdrv_prog_write>
 80bab50:	6178      	str	r0, [r7, #20]
 80bab52:	e002      	b.n	80bab5a <chdrv_detect_and_program+0x114>
    }
  } else {
    dev_ptr->sensor_connected = 0;      // prog_ping failed - no device found
 80bab54:	687b      	ldr	r3, [r7, #4]
 80bab56:	2200      	movs	r2, #0
 80bab58:	77da      	strb	r2, [r3, #31]
  }

  chbsp_program_disable(dev_ptr);       // de-assert PROG pin
 80bab5a:	6878      	ldr	r0, [r7, #4]
 80bab5c:	f7e8 fc46 	bl	80a33ec <chbsp_program_disable>

  if (ch_err) {                 // if error, reinitialize I2C bus associated with this device
 80bab60:	697b      	ldr	r3, [r7, #20]
 80bab62:	2b00      	cmp	r3, #0
 80bab64:	d005      	beq.n	80bab72 <chdrv_detect_and_program+0x12c>
    chbsp_debug_toggle(CHDRV_DEBUG_PIN_NUM);
 80bab66:	2000      	movs	r0, #0
 80bab68:	f7e8 ffee 	bl	80a3b48 <chbsp_debug_toggle>
    chbsp_i2c_reset(dev_ptr);
 80bab6c:	6878      	ldr	r0, [r7, #4]
 80bab6e:	f7e8 fff7 	bl	80a3b60 <chbsp_i2c_reset>
  }

  if (ch_err) {
 80bab72:	697b      	ldr	r3, [r7, #20]
 80bab74:	2b00      	cmp	r3, #0
 80bab76:	d002      	beq.n	80bab7e <chdrv_detect_and_program+0x138>
    dev_ptr->sensor_connected = 0;      // only marked as connected if no errors
 80bab78:	687b      	ldr	r3, [r7, #4]
 80bab7a:	2200      	movs	r2, #0
 80bab7c:	77da      	strb	r2, [r3, #31]
  }

  return ch_err;
 80bab7e:	697b      	ldr	r3, [r7, #20]
}
 80bab80:	4618      	mov	r0, r3
 80bab82:	3718      	adds	r7, #24
 80bab84:	46bd      	mov	sp, r7
 80bab86:	bd80      	pop	{r7, pc}

080bab88 <chdrv_set_idle>:
 *
 * \note This routine writes to all devices simultaneously, so I2C signalling (i.e. ack's) on the bus may be driven by multiple
 * slaves at once.
 */
int chdrv_set_idle(ch_dev_t * dev_ptr)
{
 80bab88:	b580      	push	{r7, lr}
 80bab8a:	b084      	sub	sp, #16
 80bab8c:	af00      	add	r7, sp, #0
 80bab8e:	6078      	str	r0, [r7, #4]
  static const uint16_t idle_loop[2] = { 0x4003, 0xFFFC };      // XXX need define

  int ch_err =
      chdrv_prog_mem_write(dev_ptr, 0xFFFC, (uint8_t *) & idle_loop[0],
 80bab90:	2304      	movs	r3, #4
 80bab92:	4a11      	ldr	r2, [pc, #68]	; (80babd8 <chdrv_set_idle+0x50>)
 80bab94:	f64f 71fc 	movw	r1, #65532	; 0xfffc
 80bab98:	6878      	ldr	r0, [r7, #4]
 80bab9a:	f7ff fe17 	bl	80ba7cc <chdrv_prog_mem_write>
 80bab9e:	60f8      	str	r0, [r7, #12]
                           sizeof(idle_loop));
  if (!ch_err) {
 80baba0:	68fb      	ldr	r3, [r7, #12]
 80baba2:	2b00      	cmp	r3, #0
 80baba4:	d103      	bne.n	80babae <chdrv_set_idle+0x26>
    ch_err = chdrv_reset_and_halt(dev_ptr);
 80baba6:	6878      	ldr	r0, [r7, #4]
 80baba8:	f7ff ff18 	bl	80ba9dc <chdrv_reset_and_halt>
 80babac:	60f8      	str	r0, [r7, #12]
  }
  // keep wdt stopped after we exit programming mode
  uint16_t val = 0x5a80;        // XXX need define
 80babae:	f44f 43b5 	mov.w	r3, #23168	; 0x5a80
 80babb2:	817b      	strh	r3, [r7, #10]
  if (!ch_err) {
 80babb4:	68fb      	ldr	r3, [r7, #12]
 80babb6:	2b00      	cmp	r3, #0
 80babb8:	d108      	bne.n	80babcc <chdrv_set_idle+0x44>
    ch_err = chdrv_prog_mem_write(dev_ptr, 0x0120, (uint8_t *) & val, sizeof(val));     // XXX need define
 80babba:	f107 020a 	add.w	r2, r7, #10
 80babbe:	2302      	movs	r3, #2
 80babc0:	f44f 7190 	mov.w	r1, #288	; 0x120
 80babc4:	6878      	ldr	r0, [r7, #4]
 80babc6:	f7ff fe01 	bl	80ba7cc <chdrv_prog_mem_write>
 80babca:	60f8      	str	r0, [r7, #12]
  }

  return ch_err;
 80babcc:	68fb      	ldr	r3, [r7, #12]
}
 80babce:	4618      	mov	r0, r3
 80babd0:	3710      	adds	r7, #16
 80babd2:	46bd      	mov	sp, r7
 80babd4:	bd80      	pop	{r7, pc}
 80babd6:	bf00      	nop
 80babd8:	080dd2b0 	.word	0x080dd2b0

080babdc <chdrv_group_detect_and_program>:
 * \a chdrv_group_wait_for_lock() function may be used to wait for this sequence to complete on all devices in the group.
 *
 * \note This routine will leave the PROG pin de-asserted for all devices in the group when it completes.
 */
int chdrv_group_detect_and_program(ch_group_t * grp_ptr)
{
 80babdc:	b580      	push	{r7, lr}
 80babde:	b086      	sub	sp, #24
 80babe0:	af00      	add	r7, sp, #0
 80babe2:	6078      	str	r0, [r7, #4]
  int ch_err = 0;
 80babe4:	2300      	movs	r3, #0
 80babe6:	617b      	str	r3, [r7, #20]

  for (uint8_t i = 0; i < grp_ptr->num_ports; i++) {
 80babe8:	2300      	movs	r3, #0
 80babea:	74fb      	strb	r3, [r7, #19]
 80babec:	e01d      	b.n	80bac2a <chdrv_group_detect_and_program+0x4e>
    ch_dev_t *dev_ptr = grp_ptr->device[i];
 80babee:	7cfb      	ldrb	r3, [r7, #19]
 80babf0:	687a      	ldr	r2, [r7, #4]
 80babf2:	3304      	adds	r3, #4
 80babf4:	009b      	lsls	r3, r3, #2
 80babf6:	4413      	add	r3, r2
 80babf8:	685b      	ldr	r3, [r3, #4]
 80babfa:	60fb      	str	r3, [r7, #12]

    ch_err = chdrv_detect_and_program(dev_ptr);
 80babfc:	68f8      	ldr	r0, [r7, #12]
 80babfe:	f7ff ff22 	bl	80baa46 <chdrv_detect_and_program>
 80bac02:	6178      	str	r0, [r7, #20]

    if (!ch_err && dev_ptr->sensor_connected) {
 80bac04:	697b      	ldr	r3, [r7, #20]
 80bac06:	2b00      	cmp	r3, #0
 80bac08:	d109      	bne.n	80bac1e <chdrv_group_detect_and_program+0x42>
 80bac0a:	68fb      	ldr	r3, [r7, #12]
 80bac0c:	7fdb      	ldrb	r3, [r3, #31]
 80bac0e:	2b00      	cmp	r3, #0
 80bac10:	d005      	beq.n	80bac1e <chdrv_group_detect_and_program+0x42>
      grp_ptr->sensor_count++;
 80bac12:	687b      	ldr	r3, [r7, #4]
 80bac14:	789b      	ldrb	r3, [r3, #2]
 80bac16:	3301      	adds	r3, #1
 80bac18:	b2da      	uxtb	r2, r3
 80bac1a:	687b      	ldr	r3, [r7, #4]
 80bac1c:	709a      	strb	r2, [r3, #2]
    }

    if (ch_err) {
 80bac1e:	697b      	ldr	r3, [r7, #20]
 80bac20:	2b00      	cmp	r3, #0
 80bac22:	d108      	bne.n	80bac36 <chdrv_group_detect_and_program+0x5a>
  for (uint8_t i = 0; i < grp_ptr->num_ports; i++) {
 80bac24:	7cfb      	ldrb	r3, [r7, #19]
 80bac26:	3301      	adds	r3, #1
 80bac28:	74fb      	strb	r3, [r7, #19]
 80bac2a:	687b      	ldr	r3, [r7, #4]
 80bac2c:	781b      	ldrb	r3, [r3, #0]
 80bac2e:	7cfa      	ldrb	r2, [r7, #19]
 80bac30:	429a      	cmp	r2, r3
 80bac32:	d3dc      	bcc.n	80babee <chdrv_group_detect_and_program+0x12>
 80bac34:	e000      	b.n	80bac38 <chdrv_group_detect_and_program+0x5c>
      break;
 80bac36:	bf00      	nop
    }
  }
  return ch_err;
 80bac38:	697b      	ldr	r3, [r7, #20]
}
 80bac3a:	4618      	mov	r0, r3
 80bac3c:	3718      	adds	r7, #24
 80bac3e:	46bd      	mov	sp, r7
 80bac40:	bd80      	pop	{r7, pc}

080bac42 <chdrv_group_prepare>:
 * \return 0 if hardware initialization is successful, non-zero otherwise
 *
 * This function is called internally by \a chdrv_group_start().
 */
int chdrv_group_prepare(ch_group_t * grp_ptr)
{
 80bac42:	b580      	push	{r7, lr}
 80bac44:	b084      	sub	sp, #16
 80bac46:	af00      	add	r7, sp, #0
 80bac48:	6078      	str	r0, [r7, #4]
  int ch_err = !grp_ptr;
 80bac4a:	687b      	ldr	r3, [r7, #4]
 80bac4c:	2b00      	cmp	r3, #0
 80bac4e:	bf0c      	ite	eq
 80bac50:	2301      	moveq	r3, #1
 80bac52:	2300      	movne	r3, #0
 80bac54:	b2db      	uxtb	r3, r3
 80bac56:	60fb      	str	r3, [r7, #12]
  uint8_t i;

  if (!ch_err) {
 80bac58:	68fb      	ldr	r3, [r7, #12]
 80bac5a:	2b00      	cmp	r3, #0
 80bac5c:	d13b      	bne.n	80bacd6 <chdrv_group_prepare+0x94>
    grp_ptr->sensor_count = 0;
 80bac5e:	687b      	ldr	r3, [r7, #4]
 80bac60:	2200      	movs	r2, #0
 80bac62:	709a      	strb	r2, [r3, #2]

    for (i = 0; i < grp_ptr->num_i2c_buses; i++) {
 80bac64:	2300      	movs	r3, #0
 80bac66:	72fb      	strb	r3, [r7, #11]
 80bac68:	e02a      	b.n	80bacc0 <chdrv_group_prepare+0x7e>
      grp_ptr->i2c_queue[i].len = 0;
 80bac6a:	7afa      	ldrb	r2, [r7, #11]
 80bac6c:	6879      	ldr	r1, [r7, #4]
 80bac6e:	4613      	mov	r3, r2
 80bac70:	009b      	lsls	r3, r3, #2
 80bac72:	4413      	add	r3, r2
 80bac74:	009b      	lsls	r3, r3, #2
 80bac76:	440b      	add	r3, r1
 80bac78:	331e      	adds	r3, #30
 80bac7a:	2200      	movs	r2, #0
 80bac7c:	701a      	strb	r2, [r3, #0]
      grp_ptr->i2c_queue[i].idx = 0;
 80bac7e:	7afa      	ldrb	r2, [r7, #11]
 80bac80:	6879      	ldr	r1, [r7, #4]
 80bac82:	4613      	mov	r3, r2
 80bac84:	009b      	lsls	r3, r3, #2
 80bac86:	4413      	add	r3, r2
 80bac88:	009b      	lsls	r3, r3, #2
 80bac8a:	440b      	add	r3, r1
 80bac8c:	331f      	adds	r3, #31
 80bac8e:	2200      	movs	r2, #0
 80bac90:	701a      	strb	r2, [r3, #0]
      grp_ptr->i2c_queue[i].read_pending = 0;
 80bac92:	7afa      	ldrb	r2, [r7, #11]
 80bac94:	6879      	ldr	r1, [r7, #4]
 80bac96:	4613      	mov	r3, r2
 80bac98:	009b      	lsls	r3, r3, #2
 80bac9a:	4413      	add	r3, r2
 80bac9c:	009b      	lsls	r3, r3, #2
 80bac9e:	440b      	add	r3, r1
 80baca0:	331c      	adds	r3, #28
 80baca2:	2200      	movs	r2, #0
 80baca4:	701a      	strb	r2, [r3, #0]
      grp_ptr->i2c_queue[i].running = 0;
 80baca6:	7afa      	ldrb	r2, [r7, #11]
 80baca8:	6879      	ldr	r1, [r7, #4]
 80bacaa:	4613      	mov	r3, r2
 80bacac:	009b      	lsls	r3, r3, #2
 80bacae:	4413      	add	r3, r2
 80bacb0:	009b      	lsls	r3, r3, #2
 80bacb2:	440b      	add	r3, r1
 80bacb4:	331d      	adds	r3, #29
 80bacb6:	2200      	movs	r2, #0
 80bacb8:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < grp_ptr->num_i2c_buses; i++) {
 80bacba:	7afb      	ldrb	r3, [r7, #11]
 80bacbc:	3301      	adds	r3, #1
 80bacbe:	72fb      	strb	r3, [r7, #11]
 80bacc0:	687b      	ldr	r3, [r7, #4]
 80bacc2:	785b      	ldrb	r3, [r3, #1]
 80bacc4:	7afa      	ldrb	r2, [r7, #11]
 80bacc6:	429a      	cmp	r2, r3
 80bacc8:	d3cf      	bcc.n	80bac6a <chdrv_group_prepare+0x28>
    }

    chbsp_group_pin_init(grp_ptr);
 80bacca:	6878      	ldr	r0, [r7, #4]
 80baccc:	f7e8 fc04 	bl	80a34d8 <chbsp_group_pin_init>

    ch_err = chbsp_i2c_init();
 80bacd0:	f7e8 fdee 	bl	80a38b0 <chbsp_i2c_init>
 80bacd4:	60f8      	str	r0, [r7, #12]
  }

  return ch_err;
 80bacd6:	68fb      	ldr	r3, [r7, #12]
}
 80bacd8:	4618      	mov	r0, r3
 80bacda:	3710      	adds	r7, #16
 80bacdc:	46bd      	mov	sp, r7
 80bacde:	bd80      	pop	{r7, pc}

080bace0 <chdrv_group_start>:
 * This function assumes firmware-specific initialization has already been performed for each a ch_dev_t
 * descriptor for each sensor in the group.  See \a ch_init().
 */
#define CH_PROG_XFER_RETRY 4
int chdrv_group_start(ch_group_t * grp_ptr)
{
 80bace0:	b580      	push	{r7, lr}
 80bace2:	b08a      	sub	sp, #40	; 0x28
 80bace4:	af00      	add	r7, sp, #0
 80bace6:	6078      	str	r0, [r7, #4]
  int ch_err = !grp_ptr;
 80bace8:	687b      	ldr	r3, [r7, #4]
 80bacea:	2b00      	cmp	r3, #0
 80bacec:	bf0c      	ite	eq
 80bacee:	2301      	moveq	r3, #1
 80bacf0:	2300      	movne	r3, #0
 80bacf2:	b2db      	uxtb	r3, r3
 80bacf4:	627b      	str	r3, [r7, #36]	; 0x24
  int i;
  uint8_t prog_tries = 0;
 80bacf6:	2300      	movs	r3, #0
 80bacf8:	77fb      	strb	r3, [r7, #31]
  uint8_t i;
  char cbuf[80];
  const uint32_t start_time = chbsp_timestamp_ms();
#endif

  if (!ch_err) {
 80bacfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80bacfc:	2b00      	cmp	r3, #0
 80bacfe:	d103      	bne.n	80bad08 <chdrv_group_start+0x28>
    ch_err = chdrv_group_prepare(grp_ptr);
 80bad00:	6878      	ldr	r0, [r7, #4]
 80bad02:	f7ff ff9e 	bl	80bac42 <chdrv_group_prepare>
 80bad06:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ch_err) {
 80bad08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80bad0a:	2b00      	cmp	r3, #0
 80bad0c:	d001      	beq.n	80bad12 <chdrv_group_start+0x32>
    return ch_err;
 80bad0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80bad10:	e0af      	b.n	80bae72 <chdrv_group_start+0x192>
  }

RESET_AND_LOAD:
 80bad12:	bf00      	nop
  do {
    chbsp_reset_assert();
 80bad14:	f7e8 fb34 	bl	80a3380 <chbsp_reset_assert>
    for (i = 0; i < grp_ptr->num_ports; i++) {
 80bad18:	2300      	movs	r3, #0
 80bad1a:	623b      	str	r3, [r7, #32]
 80bad1c:	e00b      	b.n	80bad36 <chdrv_group_start+0x56>
      chbsp_program_enable(grp_ptr->device[i]);
 80bad1e:	687a      	ldr	r2, [r7, #4]
 80bad20:	6a3b      	ldr	r3, [r7, #32]
 80bad22:	3304      	adds	r3, #4
 80bad24:	009b      	lsls	r3, r3, #2
 80bad26:	4413      	add	r3, r2
 80bad28:	685b      	ldr	r3, [r3, #4]
 80bad2a:	4618      	mov	r0, r3
 80bad2c:	f7e8 fb40 	bl	80a33b0 <chbsp_program_enable>
    for (i = 0; i < grp_ptr->num_ports; i++) {
 80bad30:	6a3b      	ldr	r3, [r7, #32]
 80bad32:	3301      	adds	r3, #1
 80bad34:	623b      	str	r3, [r7, #32]
 80bad36:	687b      	ldr	r3, [r7, #4]
 80bad38:	781b      	ldrb	r3, [r3, #0]
 80bad3a:	461a      	mov	r2, r3
 80bad3c:	6a3b      	ldr	r3, [r7, #32]
 80bad3e:	4293      	cmp	r3, r2
 80bad40:	dbed      	blt.n	80bad1e <chdrv_group_start+0x3e>
    }
    chbsp_delay_ms(1);
 80bad42:	2001      	movs	r0, #1
 80bad44:	f7e8 fda8 	bl	80a3898 <chbsp_delay_ms>
    chbsp_reset_release();
 80bad48:	f7e8 fb26 	bl	80a3398 <chbsp_reset_release>

    /* For every i2c bus, set the devices idle in parallel, then disable programming mode for all devices on that bus
     * This is kludgey because we don't have a great way of iterating over the i2c buses */
    ch_dev_t *c_prev = grp_ptr->device[0];
 80bad4c:	687b      	ldr	r3, [r7, #4]
 80bad4e:	695b      	ldr	r3, [r3, #20]
 80bad50:	61bb      	str	r3, [r7, #24]
    chdrv_set_idle(c_prev);
 80bad52:	69b8      	ldr	r0, [r7, #24]
 80bad54:	f7ff ff18 	bl	80bab88 <chdrv_set_idle>
    for (i = 0; i < grp_ptr->num_ports; i++) {
 80bad58:	2300      	movs	r3, #0
 80bad5a:	623b      	str	r3, [r7, #32]
 80bad5c:	e019      	b.n	80bad92 <chdrv_group_start+0xb2>
      ch_dev_t *c = grp_ptr->device[i];
 80bad5e:	687a      	ldr	r2, [r7, #4]
 80bad60:	6a3b      	ldr	r3, [r7, #32]
 80bad62:	3304      	adds	r3, #4
 80bad64:	009b      	lsls	r3, r3, #2
 80bad66:	4413      	add	r3, r2
 80bad68:	685b      	ldr	r3, [r3, #4]
 80bad6a:	60bb      	str	r3, [r7, #8]

      if (c->i2c_bus_index != c_prev->i2c_bus_index) {
 80bad6c:	68bb      	ldr	r3, [r7, #8]
 80bad6e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80bad72:	69bb      	ldr	r3, [r7, #24]
 80bad74:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80bad78:	429a      	cmp	r2, r3
 80bad7a:	d002      	beq.n	80bad82 <chdrv_group_start+0xa2>
        chdrv_set_idle(c);
 80bad7c:	68b8      	ldr	r0, [r7, #8]
 80bad7e:	f7ff ff03 	bl	80bab88 <chdrv_set_idle>
      }

      chbsp_program_disable(c);
 80bad82:	68b8      	ldr	r0, [r7, #8]
 80bad84:	f7e8 fb32 	bl	80a33ec <chbsp_program_disable>
      c_prev = c;
 80bad88:	68bb      	ldr	r3, [r7, #8]
 80bad8a:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < grp_ptr->num_ports; i++) {
 80bad8c:	6a3b      	ldr	r3, [r7, #32]
 80bad8e:	3301      	adds	r3, #1
 80bad90:	623b      	str	r3, [r7, #32]
 80bad92:	687b      	ldr	r3, [r7, #4]
 80bad94:	781b      	ldrb	r3, [r3, #0]
 80bad96:	461a      	mov	r2, r3
 80bad98:	6a3b      	ldr	r3, [r7, #32]
 80bad9a:	4293      	cmp	r3, r2
 80bad9c:	dbdf      	blt.n	80bad5e <chdrv_group_start+0x7e>
    }

    ch_err = chdrv_group_detect_and_program(grp_ptr);
 80bad9e:	6878      	ldr	r0, [r7, #4]
 80bada0:	f7ff ff1c 	bl	80babdc <chdrv_group_detect_and_program>
 80bada4:	6278      	str	r0, [r7, #36]	; 0x24

  } while (ch_err && prog_tries++ < CH_PROG_XFER_RETRY);
 80bada6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80bada8:	2b00      	cmp	r3, #0
 80badaa:	d004      	beq.n	80badb6 <chdrv_group_start+0xd6>
 80badac:	7ffb      	ldrb	r3, [r7, #31]
 80badae:	1c5a      	adds	r2, r3, #1
 80badb0:	77fa      	strb	r2, [r7, #31]
 80badb2:	2b03      	cmp	r3, #3
 80badb4:	d9ad      	bls.n	80bad12 <chdrv_group_start+0x32>

  if (!ch_err) {
 80badb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80badb8:	2b00      	cmp	r3, #0
 80badba:	d107      	bne.n	80badcc <chdrv_group_start+0xec>
    ch_err = (grp_ptr->sensor_count == 0);
 80badbc:	687b      	ldr	r3, [r7, #4]
 80badbe:	789b      	ldrb	r3, [r3, #2]
 80badc0:	2b00      	cmp	r3, #0
 80badc2:	bf0c      	ite	eq
 80badc4:	2301      	moveq	r3, #1
 80badc6:	2300      	movne	r3, #0
 80badc8:	b2db      	uxtb	r3, r3
 80badca:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
#endif
  }

  if (!ch_err) {
 80badcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80badce:	2b00      	cmp	r3, #0
 80badd0:	d10c      	bne.n	80badec <chdrv_group_start+0x10c>
    ch_err = chdrv_group_wait_for_lock(grp_ptr);
 80badd2:	6878      	ldr	r0, [r7, #4]
 80badd4:	f7ff fc7c 	bl	80ba6d0 <chdrv_group_wait_for_lock>
 80badd8:	6278      	str	r0, [r7, #36]	; 0x24
    if (ch_err && prog_tries++ < CH_PROG_XFER_RETRY + 1) {
 80badda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80baddc:	2b00      	cmp	r3, #0
 80badde:	d005      	beq.n	80badec <chdrv_group_start+0x10c>
 80bade0:	7ffb      	ldrb	r3, [r7, #31]
 80bade2:	1c5a      	adds	r2, r3, #1
 80bade4:	77fa      	strb	r2, [r7, #31]
 80bade6:	2b04      	cmp	r3, #4
 80bade8:	d800      	bhi.n	80badec <chdrv_group_start+0x10c>
      goto RESET_AND_LOAD;
 80badea:	e793      	b.n	80bad14 <chdrv_group_start+0x34>
    }
  }

  if (!ch_err) {
 80badec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80badee:	2b00      	cmp	r3, #0
 80badf0:	d105      	bne.n	80badfe <chdrv_group_start+0x11e>
    snprintf(cbuf, sizeof(cbuf), "Frequency locked, %lu ms\n",
             chbsp_timestamp_ms() - start_time);
    chbsp_print_str(cbuf);
#endif

    chbsp_delay_ms(1);
 80badf2:	2001      	movs	r0, #1
 80badf4:	f7e8 fd50 	bl	80a3898 <chbsp_delay_ms>

    chdrv_group_measure_rtc(grp_ptr);
 80badf8:	6878      	ldr	r0, [r7, #4]
 80badfa:	f7ff fb5b 	bl	80ba4b4 <chdrv_group_measure_rtc>
    }
#endif
  }

  /* Put counts of connected devices per bus in group struct */
  for (int bus_num = 0; bus_num < grp_ptr->num_i2c_buses; bus_num++) {
 80badfe:	2300      	movs	r3, #0
 80bae00:	617b      	str	r3, [r7, #20]
 80bae02:	e008      	b.n	80bae16 <chdrv_group_start+0x136>
    grp_ptr->num_connected[bus_num] = 0;        // init all counts
 80bae04:	687a      	ldr	r2, [r7, #4]
 80bae06:	697b      	ldr	r3, [r7, #20]
 80bae08:	4413      	add	r3, r2
 80bae0a:	3318      	adds	r3, #24
 80bae0c:	2200      	movs	r2, #0
 80bae0e:	701a      	strb	r2, [r3, #0]
  for (int bus_num = 0; bus_num < grp_ptr->num_i2c_buses; bus_num++) {
 80bae10:	697b      	ldr	r3, [r7, #20]
 80bae12:	3301      	adds	r3, #1
 80bae14:	617b      	str	r3, [r7, #20]
 80bae16:	687b      	ldr	r3, [r7, #4]
 80bae18:	785b      	ldrb	r3, [r3, #1]
 80bae1a:	461a      	mov	r2, r3
 80bae1c:	697b      	ldr	r3, [r7, #20]
 80bae1e:	4293      	cmp	r3, r2
 80bae20:	dbf0      	blt.n	80bae04 <chdrv_group_start+0x124>
  }

  for (int dev_num = 0; dev_num < grp_ptr->num_ports; dev_num++) {
 80bae22:	2300      	movs	r3, #0
 80bae24:	613b      	str	r3, [r7, #16]
 80bae26:	e01d      	b.n	80bae64 <chdrv_group_start+0x184>
    ch_dev_t *dev_ptr = grp_ptr->device[dev_num];
 80bae28:	687a      	ldr	r2, [r7, #4]
 80bae2a:	693b      	ldr	r3, [r7, #16]
 80bae2c:	3304      	adds	r3, #4
 80bae2e:	009b      	lsls	r3, r3, #2
 80bae30:	4413      	add	r3, r2
 80bae32:	685b      	ldr	r3, [r3, #4]
 80bae34:	60fb      	str	r3, [r7, #12]

    if (dev_ptr->sensor_connected) {
 80bae36:	68fb      	ldr	r3, [r7, #12]
 80bae38:	7fdb      	ldrb	r3, [r3, #31]
 80bae3a:	2b00      	cmp	r3, #0
 80bae3c:	d00f      	beq.n	80bae5e <chdrv_group_start+0x17e>
      grp_ptr->num_connected[dev_ptr->i2c_bus_index] += 1;      // count one more on this bus
 80bae3e:	68fb      	ldr	r3, [r7, #12]
 80bae40:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80bae44:	461a      	mov	r2, r3
 80bae46:	687b      	ldr	r3, [r7, #4]
 80bae48:	4413      	add	r3, r2
 80bae4a:	7e1b      	ldrb	r3, [r3, #24]
 80bae4c:	68fa      	ldr	r2, [r7, #12]
 80bae4e:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80bae52:	4611      	mov	r1, r2
 80bae54:	3301      	adds	r3, #1
 80bae56:	b2da      	uxtb	r2, r3
 80bae58:	687b      	ldr	r3, [r7, #4]
 80bae5a:	440b      	add	r3, r1
 80bae5c:	761a      	strb	r2, [r3, #24]
  for (int dev_num = 0; dev_num < grp_ptr->num_ports; dev_num++) {
 80bae5e:	693b      	ldr	r3, [r7, #16]
 80bae60:	3301      	adds	r3, #1
 80bae62:	613b      	str	r3, [r7, #16]
 80bae64:	687b      	ldr	r3, [r7, #4]
 80bae66:	781b      	ldrb	r3, [r3, #0]
 80bae68:	461a      	mov	r2, r3
 80bae6a:	693b      	ldr	r3, [r7, #16]
 80bae6c:	4293      	cmp	r3, r2
 80bae6e:	dbdb      	blt.n	80bae28 <chdrv_group_start+0x148>
    }
  }

  return ch_err;
 80bae70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80bae72:	4618      	mov	r0, r3
 80bae74:	3728      	adds	r7, #40	; 0x28
 80bae76:	46bd      	mov	sp, r7
 80bae78:	bd80      	pop	{r7, pc}

080bae7a <chbsp_timestamp_ms>:
  (void)(str);
}

__attribute__ ((weak))
uint32_t chbsp_timestamp_ms()
{
 80bae7a:	b480      	push	{r7}
 80bae7c:	af00      	add	r7, sp, #0
  return 0;
 80bae7e:	2300      	movs	r3, #0
}
 80bae80:	4618      	mov	r0, r3
 80bae82:	46bd      	mov	sp, r7
 80bae84:	f85d 7b04 	ldr.w	r7, [sp], #4
 80bae88:	4770      	bx	lr

080bae8a <vl53l5_decode_calibration_data>:
 80bae8a:	b580      	push	{r7, lr}
 80bae8c:	b086      	sub	sp, #24
 80bae8e:	af00      	add	r7, sp, #0
 80bae90:	60f8      	str	r0, [r7, #12]
 80bae92:	60b9      	str	r1, [r7, #8]
 80bae94:	607a      	str	r2, [r7, #4]
 80bae96:	603b      	str	r3, [r7, #0]
 80bae98:	2300      	movs	r3, #0
 80bae9a:	617b      	str	r3, [r7, #20]
 80bae9c:	68fb      	ldr	r3, [r7, #12]
 80bae9e:	2b00      	cmp	r3, #0
 80baea0:	d103      	bne.n	80baeaa <vl53l5_decode_calibration_data+0x20>
 80baea2:	f06f 0303 	mvn.w	r3, #3
 80baea6:	617b      	str	r3, [r7, #20]
 80baea8:	e01e      	b.n	80baee8 <vl53l5_decode_calibration_data+0x5e>
 80baeaa:	68bb      	ldr	r3, [r7, #8]
 80baeac:	2b00      	cmp	r3, #0
 80baeae:	d103      	bne.n	80baeb8 <vl53l5_decode_calibration_data+0x2e>
 80baeb0:	f06f 0303 	mvn.w	r3, #3
 80baeb4:	617b      	str	r3, [r7, #20]
 80baeb6:	e017      	b.n	80baee8 <vl53l5_decode_calibration_data+0x5e>
 80baeb8:	68fb      	ldr	r3, [r7, #12]
 80baeba:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 80baebe:	2b00      	cmp	r3, #0
 80baec0:	d001      	beq.n	80baec6 <vl53l5_decode_calibration_data+0x3c>
 80baec2:	2300      	movs	r3, #0
 80baec4:	e001      	b.n	80baeca <vl53l5_decode_calibration_data+0x40>
 80baec6:	f06f 0362 	mvn.w	r3, #98	; 0x62
 80baeca:	617b      	str	r3, [r7, #20]
 80baecc:	697b      	ldr	r3, [r7, #20]
 80baece:	2b00      	cmp	r3, #0
 80baed0:	db09      	blt.n	80baee6 <vl53l5_decode_calibration_data+0x5c>
 80baed2:	68ba      	ldr	r2, [r7, #8]
 80baed4:	68fb      	ldr	r3, [r7, #12]
 80baed6:	655a      	str	r2, [r3, #84]	; 0x54
 80baed8:	683a      	ldr	r2, [r7, #0]
 80baeda:	6879      	ldr	r1, [r7, #4]
 80baedc:	68f8      	ldr	r0, [r7, #12]
 80baede:	f002 fb50 	bl	80bd582 <vl53l5_dci_decode_data>
 80baee2:	6178      	str	r0, [r7, #20]
 80baee4:	e000      	b.n	80baee8 <vl53l5_decode_calibration_data+0x5e>
 80baee6:	bf00      	nop
 80baee8:	68fb      	ldr	r3, [r7, #12]
 80baeea:	2b00      	cmp	r3, #0
 80baeec:	d002      	beq.n	80baef4 <vl53l5_decode_calibration_data+0x6a>
 80baeee:	68fb      	ldr	r3, [r7, #12]
 80baef0:	2200      	movs	r2, #0
 80baef2:	655a      	str	r2, [r3, #84]	; 0x54
 80baef4:	697b      	ldr	r3, [r7, #20]
 80baef6:	4618      	mov	r0, r3
 80baef8:	3718      	adds	r7, #24
 80baefa:	46bd      	mov	sp, r7
 80baefc:	bd80      	pop	{r7, pc}

080baefe <_check_flags_consistent>:
 80baefe:	b480      	push	{r7}
 80baf00:	b085      	sub	sp, #20
 80baf02:	af00      	add	r7, sp, #0
 80baf04:	6078      	str	r0, [r7, #4]
 80baf06:	2300      	movs	r3, #0
 80baf08:	60fb      	str	r3, [r7, #12]
 80baf0a:	687b      	ldr	r3, [r7, #4]
 80baf0c:	781b      	ldrb	r3, [r3, #0]
 80baf0e:	f003 0302 	and.w	r3, r3, #2
 80baf12:	b2db      	uxtb	r3, r3
 80baf14:	2b00      	cmp	r3, #0
 80baf16:	d009      	beq.n	80baf2c <_check_flags_consistent+0x2e>
 80baf18:	687b      	ldr	r3, [r7, #4]
 80baf1a:	781b      	ldrb	r3, [r3, #0]
 80baf1c:	f003 0301 	and.w	r3, r3, #1
 80baf20:	b2db      	uxtb	r3, r3
 80baf22:	2b00      	cmp	r3, #0
 80baf24:	d002      	beq.n	80baf2c <_check_flags_consistent+0x2e>
 80baf26:	f06f 0303 	mvn.w	r3, #3
 80baf2a:	60fb      	str	r3, [r7, #12]
 80baf2c:	68fb      	ldr	r3, [r7, #12]
 80baf2e:	4618      	mov	r0, r3
 80baf30:	3714      	adds	r7, #20
 80baf32:	46bd      	mov	sp, r7
 80baf34:	f85d 7b04 	ldr.w	r7, [sp], #4
 80baf38:	4770      	bx	lr

080baf3a <_write_byte>:
 80baf3a:	b580      	push	{r7, lr}
 80baf3c:	b082      	sub	sp, #8
 80baf3e:	af00      	add	r7, sp, #0
 80baf40:	6078      	str	r0, [r7, #4]
 80baf42:	460b      	mov	r3, r1
 80baf44:	807b      	strh	r3, [r7, #2]
 80baf46:	4613      	mov	r3, r2
 80baf48:	707b      	strb	r3, [r7, #1]
 80baf4a:	1c7a      	adds	r2, r7, #1
 80baf4c:	8879      	ldrh	r1, [r7, #2]
 80baf4e:	2301      	movs	r3, #1
 80baf50:	6878      	ldr	r0, [r7, #4]
 80baf52:	f003 fdb0 	bl	80beab6 <vl53l5_write_multi>
 80baf56:	4603      	mov	r3, r0
 80baf58:	4618      	mov	r0, r3
 80baf5a:	3708      	adds	r7, #8
 80baf5c:	46bd      	mov	sp, r7
 80baf5e:	bd80      	pop	{r7, pc}

080baf60 <_decode_start_range_return>:
 80baf60:	b580      	push	{r7, lr}
 80baf62:	b08a      	sub	sp, #40	; 0x28
 80baf64:	af00      	add	r7, sp, #0
 80baf66:	6078      	str	r0, [r7, #4]
 80baf68:	2300      	movs	r3, #0
 80baf6a:	627b      	str	r3, [r7, #36]	; 0x24
 80baf6c:	2300      	movs	r3, #0
 80baf6e:	623b      	str	r3, [r7, #32]
 80baf70:	2300      	movs	r3, #0
 80baf72:	61fb      	str	r3, [r7, #28]
 80baf74:	f107 030c 	add.w	r3, r7, #12
 80baf78:	2200      	movs	r2, #0
 80baf7a:	601a      	str	r2, [r3, #0]
 80baf7c:	605a      	str	r2, [r3, #4]
 80baf7e:	609a      	str	r2, [r3, #8]
 80baf80:	2310      	movs	r3, #16
 80baf82:	61bb      	str	r3, [r7, #24]
 80baf84:	687b      	ldr	r3, [r7, #4]
 80baf86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80baf88:	623b      	str	r3, [r7, #32]
 80baf8a:	6a3a      	ldr	r2, [r7, #32]
 80baf8c:	69bb      	ldr	r3, [r7, #24]
 80baf8e:	4413      	add	r3, r2
 80baf90:	781b      	ldrb	r3, [r3, #0]
 80baf92:	f003 030f 	and.w	r3, r3, #15
 80baf96:	2b0f      	cmp	r3, #15
 80baf98:	d003      	beq.n	80bafa2 <_decode_start_range_return+0x42>
 80baf9a:	f06f 0350 	mvn.w	r3, #80	; 0x50
 80baf9e:	627b      	str	r3, [r7, #36]	; 0x24
 80bafa0:	e055      	b.n	80bb04e <_decode_start_range_return+0xee>
 80bafa2:	6a39      	ldr	r1, [r7, #32]
 80bafa4:	2004      	movs	r0, #4
 80bafa6:	f002 ff7f 	bl	80bdea8 <vl53l5_decode_uint32_t>
 80bafaa:	61f8      	str	r0, [r7, #28]
 80bafac:	69fb      	ldr	r3, [r7, #28]
 80bafae:	4a2a      	ldr	r2, [pc, #168]	; (80bb058 <_decode_start_range_return+0xf8>)
 80bafb0:	4293      	cmp	r3, r2
 80bafb2:	d003      	beq.n	80bafbc <_decode_start_range_return+0x5c>
 80bafb4:	f06f 0349 	mvn.w	r3, #73	; 0x49
 80bafb8:	627b      	str	r3, [r7, #36]	; 0x24
 80bafba:	e048      	b.n	80bb04e <_decode_start_range_return+0xee>
 80bafbc:	6a3b      	ldr	r3, [r7, #32]
 80bafbe:	3304      	adds	r3, #4
 80bafc0:	623b      	str	r3, [r7, #32]
 80bafc2:	6a39      	ldr	r1, [r7, #32]
 80bafc4:	2002      	movs	r0, #2
 80bafc6:	f002 fed5 	bl	80bdd74 <vl53l5_decode_uint16_t>
 80bafca:	4603      	mov	r3, r0
 80bafcc:	81bb      	strh	r3, [r7, #12]
 80bafce:	6a3b      	ldr	r3, [r7, #32]
 80bafd0:	3302      	adds	r3, #2
 80bafd2:	623b      	str	r3, [r7, #32]
 80bafd4:	6a39      	ldr	r1, [r7, #32]
 80bafd6:	2002      	movs	r0, #2
 80bafd8:	f002 fecc 	bl	80bdd74 <vl53l5_decode_uint16_t>
 80bafdc:	4603      	mov	r3, r0
 80bafde:	81fb      	strh	r3, [r7, #14]
 80bafe0:	6a3b      	ldr	r3, [r7, #32]
 80bafe2:	3302      	adds	r3, #2
 80bafe4:	623b      	str	r3, [r7, #32]
 80bafe6:	6a39      	ldr	r1, [r7, #32]
 80bafe8:	2002      	movs	r0, #2
 80bafea:	f002 fec3 	bl	80bdd74 <vl53l5_decode_uint16_t>
 80bafee:	4603      	mov	r3, r0
 80baff0:	823b      	strh	r3, [r7, #16]
 80baff2:	6a3b      	ldr	r3, [r7, #32]
 80baff4:	3302      	adds	r3, #2
 80baff6:	623b      	str	r3, [r7, #32]
 80baff8:	6a39      	ldr	r1, [r7, #32]
 80baffa:	2002      	movs	r0, #2
 80baffc:	f002 feba 	bl	80bdd74 <vl53l5_decode_uint16_t>
 80bb000:	4603      	mov	r3, r0
 80bb002:	827b      	strh	r3, [r7, #18]
 80bb004:	6a3b      	ldr	r3, [r7, #32]
 80bb006:	3302      	adds	r3, #2
 80bb008:	623b      	str	r3, [r7, #32]
 80bb00a:	6a39      	ldr	r1, [r7, #32]
 80bb00c:	2002      	movs	r0, #2
 80bb00e:	f002 feb1 	bl	80bdd74 <vl53l5_decode_uint16_t>
 80bb012:	4603      	mov	r3, r0
 80bb014:	82bb      	strh	r3, [r7, #20]
 80bb016:	6a3b      	ldr	r3, [r7, #32]
 80bb018:	3302      	adds	r3, #2
 80bb01a:	623b      	str	r3, [r7, #32]
 80bb01c:	6a39      	ldr	r1, [r7, #32]
 80bb01e:	2002      	movs	r0, #2
 80bb020:	f002 fea8 	bl	80bdd74 <vl53l5_decode_uint16_t>
 80bb024:	4603      	mov	r3, r0
 80bb026:	82fb      	strh	r3, [r7, #22]
 80bb028:	8afa      	ldrh	r2, [r7, #22]
 80bb02a:	687b      	ldr	r3, [r7, #4]
 80bb02c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80bb030:	8a7b      	ldrh	r3, [r7, #18]
 80bb032:	3304      	adds	r3, #4
 80bb034:	b29a      	uxth	r2, r3
 80bb036:	687b      	ldr	r3, [r7, #4]
 80bb038:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80bb03c:	8aba      	ldrh	r2, [r7, #20]
 80bb03e:	8a7b      	ldrh	r3, [r7, #18]
 80bb040:	1ad3      	subs	r3, r2, r3
 80bb042:	b29b      	uxth	r3, r3
 80bb044:	3b04      	subs	r3, #4
 80bb046:	b29a      	uxth	r2, r3
 80bb048:	687b      	ldr	r3, [r7, #4]
 80bb04a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
 80bb04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80bb050:	4618      	mov	r0, r3
 80bb052:	3728      	adds	r7, #40	; 0x28
 80bb054:	46bd      	mov	sp, r7
 80bb056:	bd80      	pop	{r7, pc}
 80bb058:	544400c0 	.word	0x544400c0

080bb05c <_check_if_status_requires_handler>:
 80bb05c:	b480      	push	{r7}
 80bb05e:	b085      	sub	sp, #20
 80bb060:	af00      	add	r7, sp, #0
 80bb062:	6078      	str	r0, [r7, #4]
 80bb064:	2300      	movs	r3, #0
 80bb066:	73fb      	strb	r3, [r7, #15]
 80bb068:	687b      	ldr	r3, [r7, #4]
 80bb06a:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 80bb06e:	da06      	bge.n	80bb07e <_check_if_status_requires_handler+0x22>
 80bb070:	687b      	ldr	r3, [r7, #4]
 80bb072:	f1b3 4f7e 	cmp.w	r3, #4261412864	; 0xfe000000
 80bb076:	dd02      	ble.n	80bb07e <_check_if_status_requires_handler+0x22>
 80bb078:	2300      	movs	r3, #0
 80bb07a:	73fb      	strb	r3, [r7, #15]
 80bb07c:	e019      	b.n	80bb0b2 <_check_if_status_requires_handler+0x56>
 80bb07e:	687b      	ldr	r3, [r7, #4]
 80bb080:	f113 0f3c 	cmn.w	r3, #60	; 0x3c
 80bb084:	dc06      	bgt.n	80bb094 <_check_if_status_requires_handler+0x38>
 80bb086:	f113 0f43 	cmn.w	r3, #67	; 0x43
 80bb08a:	da0c      	bge.n	80bb0a6 <_check_if_status_requires_handler+0x4a>
 80bb08c:	f113 0f45 	cmn.w	r3, #69	; 0x45
 80bb090:	d009      	beq.n	80bb0a6 <_check_if_status_requires_handler+0x4a>
 80bb092:	e00b      	b.n	80bb0ac <_check_if_status_requires_handler+0x50>
 80bb094:	f113 0f38 	cmn.w	r3, #56	; 0x38
 80bb098:	db08      	blt.n	80bb0ac <_check_if_status_requires_handler+0x50>
 80bb09a:	f113 0f33 	cmn.w	r3, #51	; 0x33
 80bb09e:	dd02      	ble.n	80bb0a6 <_check_if_status_requires_handler+0x4a>
 80bb0a0:	f113 0f07 	cmn.w	r3, #7
 80bb0a4:	d102      	bne.n	80bb0ac <_check_if_status_requires_handler+0x50>
 80bb0a6:	2301      	movs	r3, #1
 80bb0a8:	73fb      	strb	r3, [r7, #15]
 80bb0aa:	e002      	b.n	80bb0b2 <_check_if_status_requires_handler+0x56>
 80bb0ac:	2300      	movs	r3, #0
 80bb0ae:	73fb      	strb	r3, [r7, #15]
 80bb0b0:	bf00      	nop
 80bb0b2:	7bfb      	ldrb	r3, [r7, #15]
 80bb0b4:	4618      	mov	r0, r3
 80bb0b6:	3714      	adds	r7, #20
 80bb0b8:	46bd      	mov	sp, r7
 80bb0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80bb0be:	4770      	bx	lr

080bb0c0 <_get_error_go2_status>:
 80bb0c0:	b580      	push	{r7, lr}
 80bb0c2:	b08a      	sub	sp, #40	; 0x28
 80bb0c4:	af02      	add	r7, sp, #8
 80bb0c6:	6078      	str	r0, [r7, #4]
 80bb0c8:	460b      	mov	r3, r1
 80bb0ca:	70fb      	strb	r3, [r7, #3]
 80bb0cc:	2300      	movs	r3, #0
 80bb0ce:	61fb      	str	r3, [r7, #28]
 80bb0d0:	f107 0310 	add.w	r3, r7, #16
 80bb0d4:	2200      	movs	r2, #0
 80bb0d6:	601a      	str	r2, [r3, #0]
 80bb0d8:	605a      	str	r2, [r3, #4]
 80bb0da:	609a      	str	r2, [r3, #8]
 80bb0dc:	f107 0208 	add.w	r2, r7, #8
 80bb0e0:	f107 010c 	add.w	r1, r7, #12
 80bb0e4:	78fb      	ldrb	r3, [r7, #3]
 80bb0e6:	9300      	str	r3, [sp, #0]
 80bb0e8:	2300      	movs	r3, #0
 80bb0ea:	6878      	ldr	r0, [r7, #4]
 80bb0ec:	f001 f864 	bl	80bc1b8 <vl53l5_check_status_registers>
 80bb0f0:	61f8      	str	r0, [r7, #28]
 80bb0f2:	69fb      	ldr	r3, [r7, #28]
 80bb0f4:	2b00      	cmp	r3, #0
 80bb0f6:	d15a      	bne.n	80bb1ae <_get_error_go2_status+0xee>
 80bb0f8:	7b3b      	ldrb	r3, [r7, #12]
 80bb0fa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80bb0fe:	b2db      	uxtb	r3, r3
 80bb100:	2b00      	cmp	r3, #0
 80bb102:	d008      	beq.n	80bb116 <_get_error_go2_status+0x56>
 80bb104:	7a3b      	ldrb	r3, [r7, #8]
 80bb106:	2b00      	cmp	r3, #0
 80bb108:	d053      	beq.n	80bb1b2 <_get_error_go2_status+0xf2>
 80bb10a:	230f      	movs	r3, #15
 80bb10c:	823b      	strh	r3, [r7, #16]
 80bb10e:	7a3b      	ldrb	r3, [r7, #8]
 80bb110:	b21b      	sxth	r3, r3
 80bb112:	827b      	strh	r3, [r7, #18]
 80bb114:	e040      	b.n	80bb198 <_get_error_go2_status+0xd8>
 80bb116:	7b3b      	ldrb	r3, [r7, #12]
 80bb118:	f003 0308 	and.w	r3, r3, #8
 80bb11c:	b2db      	uxtb	r3, r3
 80bb11e:	2b00      	cmp	r3, #0
 80bb120:	d105      	bne.n	80bb12e <_get_error_go2_status+0x6e>
 80bb122:	7a3b      	ldrb	r3, [r7, #8]
 80bb124:	f003 0308 	and.w	r3, r3, #8
 80bb128:	b2db      	uxtb	r3, r3
 80bb12a:	2b00      	cmp	r3, #0
 80bb12c:	d043      	beq.n	80bb1b6 <_get_error_go2_status+0xf6>
 80bb12e:	78fb      	ldrb	r3, [r7, #3]
 80bb130:	2b02      	cmp	r3, #2
 80bb132:	d007      	beq.n	80bb144 <_get_error_go2_status+0x84>
 80bb134:	2102      	movs	r1, #2
 80bb136:	6878      	ldr	r0, [r7, #4]
 80bb138:	f001 fd5c 	bl	80bcbf4 <vl53l5_set_page>
 80bb13c:	61f8      	str	r0, [r7, #28]
 80bb13e:	69fb      	ldr	r3, [r7, #28]
 80bb140:	2b00      	cmp	r3, #0
 80bb142:	d13a      	bne.n	80bb1ba <_get_error_go2_status+0xfa>
 80bb144:	7a3b      	ldrb	r3, [r7, #8]
 80bb146:	f003 0308 	and.w	r3, r3, #8
 80bb14a:	b2db      	uxtb	r3, r3
 80bb14c:	2b00      	cmp	r3, #0
 80bb14e:	d007      	beq.n	80bb160 <_get_error_go2_status+0xa0>
 80bb150:	f107 0310 	add.w	r3, r7, #16
 80bb154:	4619      	mov	r1, r3
 80bb156:	6878      	ldr	r0, [r7, #4]
 80bb158:	f001 f8fc 	bl	80bc354 <vl53l5_get_secondary_warning_info>
 80bb15c:	61f8      	str	r0, [r7, #28]
 80bb15e:	e006      	b.n	80bb16e <_get_error_go2_status+0xae>
 80bb160:	f107 0310 	add.w	r3, r7, #16
 80bb164:	4619      	mov	r1, r3
 80bb166:	6878      	ldr	r0, [r7, #4]
 80bb168:	f001 f8dc 	bl	80bc324 <vl53l5_get_secondary_error_info>
 80bb16c:	61f8      	str	r0, [r7, #28]
 80bb16e:	78fb      	ldrb	r3, [r7, #3]
 80bb170:	2b02      	cmp	r3, #2
 80bb172:	d00e      	beq.n	80bb192 <_get_error_go2_status+0xd2>
 80bb174:	69fb      	ldr	r3, [r7, #28]
 80bb176:	2b00      	cmp	r3, #0
 80bb178:	d005      	beq.n	80bb186 <_get_error_go2_status+0xc6>
 80bb17a:	78fb      	ldrb	r3, [r7, #3]
 80bb17c:	4619      	mov	r1, r3
 80bb17e:	6878      	ldr	r0, [r7, #4]
 80bb180:	f001 fd38 	bl	80bcbf4 <vl53l5_set_page>
 80bb184:	e005      	b.n	80bb192 <_get_error_go2_status+0xd2>
 80bb186:	78fb      	ldrb	r3, [r7, #3]
 80bb188:	4619      	mov	r1, r3
 80bb18a:	6878      	ldr	r0, [r7, #4]
 80bb18c:	f001 fd32 	bl	80bcbf4 <vl53l5_set_page>
 80bb190:	61f8      	str	r0, [r7, #28]
 80bb192:	69fb      	ldr	r3, [r7, #28]
 80bb194:	2b00      	cmp	r3, #0
 80bb196:	d112      	bne.n	80bb1be <_get_error_go2_status+0xfe>
 80bb198:	69fb      	ldr	r3, [r7, #28]
 80bb19a:	2b00      	cmp	r3, #0
 80bb19c:	d111      	bne.n	80bb1c2 <_get_error_go2_status+0x102>
 80bb19e:	f107 0310 	add.w	r3, r7, #16
 80bb1a2:	4619      	mov	r1, r3
 80bb1a4:	6878      	ldr	r0, [r7, #4]
 80bb1a6:	f001 f8ed 	bl	80bc384 <vl53l5_compose_fw_status_code>
 80bb1aa:	61f8      	str	r0, [r7, #28]
 80bb1ac:	e00a      	b.n	80bb1c4 <_get_error_go2_status+0x104>
 80bb1ae:	bf00      	nop
 80bb1b0:	e008      	b.n	80bb1c4 <_get_error_go2_status+0x104>
 80bb1b2:	bf00      	nop
 80bb1b4:	e006      	b.n	80bb1c4 <_get_error_go2_status+0x104>
 80bb1b6:	bf00      	nop
 80bb1b8:	e004      	b.n	80bb1c4 <_get_error_go2_status+0x104>
 80bb1ba:	bf00      	nop
 80bb1bc:	e002      	b.n	80bb1c4 <_get_error_go2_status+0x104>
 80bb1be:	bf00      	nop
 80bb1c0:	e000      	b.n	80bb1c4 <_get_error_go2_status+0x104>
 80bb1c2:	bf00      	nop
 80bb1c4:	69fb      	ldr	r3, [r7, #28]
 80bb1c6:	4618      	mov	r0, r3
 80bb1c8:	3720      	adds	r7, #32
 80bb1ca:	46bd      	mov	sp, r7
 80bb1cc:	bd80      	pop	{r7, pc}

080bb1ce <_get_dev_params>:
 80bb1ce:	b580      	push	{r7, lr}
 80bb1d0:	b086      	sub	sp, #24
 80bb1d2:	af00      	add	r7, sp, #0
 80bb1d4:	60f8      	str	r0, [r7, #12]
 80bb1d6:	60b9      	str	r1, [r7, #8]
 80bb1d8:	607a      	str	r2, [r7, #4]
 80bb1da:	70fb      	strb	r3, [r7, #3]
 80bb1dc:	2300      	movs	r3, #0
 80bb1de:	617b      	str	r3, [r7, #20]
 80bb1e0:	78fb      	ldrb	r3, [r7, #3]
 80bb1e2:	687a      	ldr	r2, [r7, #4]
 80bb1e4:	68b9      	ldr	r1, [r7, #8]
 80bb1e6:	68f8      	ldr	r0, [r7, #12]
 80bb1e8:	f000 fe7c 	bl	80bbee4 <vl53l5_encode_block_headers>
 80bb1ec:	6178      	str	r0, [r7, #20]
 80bb1ee:	697b      	ldr	r3, [r7, #20]
 80bb1f0:	2b00      	cmp	r3, #0
 80bb1f2:	d105      	bne.n	80bb200 <_get_dev_params+0x32>
 80bb1f4:	2102      	movs	r1, #2
 80bb1f6:	68f8      	ldr	r0, [r7, #12]
 80bb1f8:	f000 fef6 	bl	80bbfe8 <vl53l5_execute_command>
 80bb1fc:	6178      	str	r0, [r7, #20]
 80bb1fe:	e000      	b.n	80bb202 <_get_dev_params+0x34>
 80bb200:	bf00      	nop
 80bb202:	697b      	ldr	r3, [r7, #20]
 80bb204:	4618      	mov	r0, r3
 80bb206:	3718      	adds	r7, #24
 80bb208:	46bd      	mov	sp, r7
 80bb20a:	bd80      	pop	{r7, pc}

080bb20c <_set_xshut_bypass>:
 80bb20c:	b580      	push	{r7, lr}
 80bb20e:	b084      	sub	sp, #16
 80bb210:	af00      	add	r7, sp, #0
 80bb212:	6078      	str	r0, [r7, #4]
 80bb214:	460b      	mov	r3, r1
 80bb216:	70fb      	strb	r3, [r7, #3]
 80bb218:	2300      	movs	r3, #0
 80bb21a:	60fb      	str	r3, [r7, #12]
 80bb21c:	2100      	movs	r1, #0
 80bb21e:	6878      	ldr	r0, [r7, #4]
 80bb220:	f001 fce8 	bl	80bcbf4 <vl53l5_set_page>
 80bb224:	60f8      	str	r0, [r7, #12]
 80bb226:	68fb      	ldr	r3, [r7, #12]
 80bb228:	2b00      	cmp	r3, #0
 80bb22a:	db13      	blt.n	80bb254 <_set_xshut_bypass+0x48>
 80bb22c:	78fb      	ldrb	r3, [r7, #3]
 80bb22e:	4619      	mov	r1, r3
 80bb230:	6878      	ldr	r0, [r7, #4]
 80bb232:	f001 fd2d 	bl	80bcc90 <vl53l5_set_xshut_bypass>
 80bb236:	60f8      	str	r0, [r7, #12]
 80bb238:	68fb      	ldr	r3, [r7, #12]
 80bb23a:	2b00      	cmp	r3, #0
 80bb23c:	da04      	bge.n	80bb248 <_set_xshut_bypass+0x3c>
 80bb23e:	2102      	movs	r1, #2
 80bb240:	6878      	ldr	r0, [r7, #4]
 80bb242:	f001 fcd7 	bl	80bcbf4 <vl53l5_set_page>
 80bb246:	e006      	b.n	80bb256 <_set_xshut_bypass+0x4a>
 80bb248:	2102      	movs	r1, #2
 80bb24a:	6878      	ldr	r0, [r7, #4]
 80bb24c:	f001 fcd2 	bl	80bcbf4 <vl53l5_set_page>
 80bb250:	60f8      	str	r0, [r7, #12]
 80bb252:	e000      	b.n	80bb256 <_set_xshut_bypass+0x4a>
 80bb254:	bf00      	nop
 80bb256:	68fb      	ldr	r3, [r7, #12]
 80bb258:	4618      	mov	r0, r3
 80bb25a:	3710      	adds	r7, #16
 80bb25c:	46bd      	mov	sp, r7
 80bb25e:	bd80      	pop	{r7, pc}

080bb260 <_provoke_mcu_error>:
 80bb260:	b580      	push	{r7, lr}
 80bb262:	b084      	sub	sp, #16
 80bb264:	af00      	add	r7, sp, #0
 80bb266:	6078      	str	r0, [r7, #4]
 80bb268:	6039      	str	r1, [r7, #0]
 80bb26a:	2300      	movs	r3, #0
 80bb26c:	60fb      	str	r3, [r7, #12]
 80bb26e:	2216      	movs	r2, #22
 80bb270:	2115      	movs	r1, #21
 80bb272:	6878      	ldr	r0, [r7, #4]
 80bb274:	f7ff fe61 	bl	80baf3a <_write_byte>
 80bb278:	60f8      	str	r0, [r7, #12]
 80bb27a:	68fb      	ldr	r3, [r7, #12]
 80bb27c:	2b00      	cmp	r3, #0
 80bb27e:	db20      	blt.n	80bb2c2 <_provoke_mcu_error+0x62>
 80bb280:	2201      	movs	r2, #1
 80bb282:	2114      	movs	r1, #20
 80bb284:	6878      	ldr	r0, [r7, #4]
 80bb286:	f7ff fe58 	bl	80baf3a <_write_byte>
 80bb28a:	60f8      	str	r0, [r7, #12]
 80bb28c:	68fb      	ldr	r3, [r7, #12]
 80bb28e:	2b00      	cmp	r3, #0
 80bb290:	db1c      	blt.n	80bb2cc <_provoke_mcu_error+0x6c>
 80bb292:	230a      	movs	r3, #10
 80bb294:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80bb298:	2102      	movs	r1, #2
 80bb29a:	6878      	ldr	r0, [r7, #4]
 80bb29c:	f001 fd5b 	bl	80bcd56 <vl53l5_wait_mcu_boot>
 80bb2a0:	4602      	mov	r2, r0
 80bb2a2:	683b      	ldr	r3, [r7, #0]
 80bb2a4:	601a      	str	r2, [r3, #0]
 80bb2a6:	683b      	ldr	r3, [r7, #0]
 80bb2a8:	681b      	ldr	r3, [r3, #0]
 80bb2aa:	2b00      	cmp	r3, #0
 80bb2ac:	d10b      	bne.n	80bb2c6 <_provoke_mcu_error+0x66>
 80bb2ae:	f06f 0306 	mvn.w	r3, #6
 80bb2b2:	60fb      	str	r3, [r7, #12]
 80bb2b4:	bf00      	nop
 80bb2b6:	2200      	movs	r2, #0
 80bb2b8:	2114      	movs	r1, #20
 80bb2ba:	6878      	ldr	r0, [r7, #4]
 80bb2bc:	f7ff fe3d 	bl	80baf3a <_write_byte>
 80bb2c0:	e005      	b.n	80bb2ce <_provoke_mcu_error+0x6e>
 80bb2c2:	bf00      	nop
 80bb2c4:	e000      	b.n	80bb2c8 <_provoke_mcu_error+0x68>
 80bb2c6:	bf00      	nop
 80bb2c8:	68fb      	ldr	r3, [r7, #12]
 80bb2ca:	e006      	b.n	80bb2da <_provoke_mcu_error+0x7a>
 80bb2cc:	bf00      	nop
 80bb2ce:	2200      	movs	r2, #0
 80bb2d0:	2115      	movs	r1, #21
 80bb2d2:	6878      	ldr	r0, [r7, #4]
 80bb2d4:	f7ff fe31 	bl	80baf3a <_write_byte>
 80bb2d8:	68fb      	ldr	r3, [r7, #12]
 80bb2da:	4618      	mov	r0, r3
 80bb2dc:	3710      	adds	r7, #16
 80bb2de:	46bd      	mov	sp, r7
 80bb2e0:	bd80      	pop	{r7, pc}

080bb2e2 <_undo_provoke_mcu_error>:
 80bb2e2:	b580      	push	{r7, lr}
 80bb2e4:	b084      	sub	sp, #16
 80bb2e6:	af00      	add	r7, sp, #0
 80bb2e8:	6078      	str	r0, [r7, #4]
 80bb2ea:	2300      	movs	r3, #0
 80bb2ec:	60fb      	str	r3, [r7, #12]
 80bb2ee:	2200      	movs	r2, #0
 80bb2f0:	2114      	movs	r1, #20
 80bb2f2:	6878      	ldr	r0, [r7, #4]
 80bb2f4:	f7ff fe21 	bl	80baf3a <_write_byte>
 80bb2f8:	60f8      	str	r0, [r7, #12]
 80bb2fa:	68fb      	ldr	r3, [r7, #12]
 80bb2fc:	2b00      	cmp	r3, #0
 80bb2fe:	d005      	beq.n	80bb30c <_undo_provoke_mcu_error+0x2a>
 80bb300:	2200      	movs	r2, #0
 80bb302:	2115      	movs	r1, #21
 80bb304:	6878      	ldr	r0, [r7, #4]
 80bb306:	f7ff fe18 	bl	80baf3a <_write_byte>
 80bb30a:	e005      	b.n	80bb318 <_undo_provoke_mcu_error+0x36>
 80bb30c:	2200      	movs	r2, #0
 80bb30e:	2115      	movs	r1, #21
 80bb310:	6878      	ldr	r0, [r7, #4]
 80bb312:	f7ff fe12 	bl	80baf3a <_write_byte>
 80bb316:	60f8      	str	r0, [r7, #12]
 80bb318:	68fb      	ldr	r3, [r7, #12]
 80bb31a:	4618      	mov	r0, r3
 80bb31c:	3710      	adds	r7, #16
 80bb31e:	46bd      	mov	sp, r7
 80bb320:	bd80      	pop	{r7, pc}
	...

080bb324 <_force_timed_mode_stop>:
 80bb324:	b580      	push	{r7, lr}
 80bb326:	b086      	sub	sp, #24
 80bb328:	af00      	add	r7, sp, #0
 80bb32a:	6078      	str	r0, [r7, #4]
 80bb32c:	2300      	movs	r3, #0
 80bb32e:	617b      	str	r3, [r7, #20]
 80bb330:	2300      	movs	r3, #0
 80bb332:	60fb      	str	r3, [r7, #12]
 80bb334:	4b2d      	ldr	r3, [pc, #180]	; (80bb3ec <_force_timed_mode_stop+0xc8>)
 80bb336:	613b      	str	r3, [r7, #16]
 80bb338:	2100      	movs	r1, #0
 80bb33a:	6878      	ldr	r0, [r7, #4]
 80bb33c:	f001 fc5a 	bl	80bcbf4 <vl53l5_set_page>
 80bb340:	6178      	str	r0, [r7, #20]
 80bb342:	697b      	ldr	r3, [r7, #20]
 80bb344:	2b00      	cmp	r3, #0
 80bb346:	d14b      	bne.n	80bb3e0 <_force_timed_mode_stop+0xbc>
 80bb348:	f107 030c 	add.w	r3, r7, #12
 80bb34c:	4619      	mov	r1, r3
 80bb34e:	6878      	ldr	r0, [r7, #4]
 80bb350:	f7ff ff86 	bl	80bb260 <_provoke_mcu_error>
 80bb354:	6178      	str	r0, [r7, #20]
 80bb356:	697b      	ldr	r3, [r7, #20]
 80bb358:	2b00      	cmp	r3, #0
 80bb35a:	d125      	bne.n	80bb3a8 <_force_timed_mode_stop+0x84>
 80bb35c:	68fb      	ldr	r3, [r7, #12]
 80bb35e:	4618      	mov	r0, r3
 80bb360:	f7ff fe7c 	bl	80bb05c <_check_if_status_requires_handler>
 80bb364:	4603      	mov	r3, r0
 80bb366:	f083 0301 	eor.w	r3, r3, #1
 80bb36a:	b2db      	uxtb	r3, r3
 80bb36c:	2b00      	cmp	r3, #0
 80bb36e:	d002      	beq.n	80bb376 <_force_timed_mode_stop+0x52>
 80bb370:	68fb      	ldr	r3, [r7, #12]
 80bb372:	617b      	str	r3, [r7, #20]
 80bb374:	e00c      	b.n	80bb390 <_force_timed_mode_stop+0x6c>
 80bb376:	2100      	movs	r1, #0
 80bb378:	6878      	ldr	r0, [r7, #4]
 80bb37a:	f7ff fea1 	bl	80bb0c0 <_get_error_go2_status>
 80bb37e:	6178      	str	r0, [r7, #20]
 80bb380:	697a      	ldr	r2, [r7, #20]
 80bb382:	693b      	ldr	r3, [r7, #16]
 80bb384:	429a      	cmp	r2, r3
 80bb386:	d102      	bne.n	80bb38e <_force_timed_mode_stop+0x6a>
 80bb388:	2300      	movs	r3, #0
 80bb38a:	617b      	str	r3, [r7, #20]
 80bb38c:	e000      	b.n	80bb390 <_force_timed_mode_stop+0x6c>
 80bb38e:	bf00      	nop
 80bb390:	697b      	ldr	r3, [r7, #20]
 80bb392:	2b00      	cmp	r3, #0
 80bb394:	d003      	beq.n	80bb39e <_force_timed_mode_stop+0x7a>
 80bb396:	6878      	ldr	r0, [r7, #4]
 80bb398:	f7ff ffa3 	bl	80bb2e2 <_undo_provoke_mcu_error>
 80bb39c:	e005      	b.n	80bb3aa <_force_timed_mode_stop+0x86>
 80bb39e:	6878      	ldr	r0, [r7, #4]
 80bb3a0:	f7ff ff9f 	bl	80bb2e2 <_undo_provoke_mcu_error>
 80bb3a4:	6178      	str	r0, [r7, #20]
 80bb3a6:	e000      	b.n	80bb3aa <_force_timed_mode_stop+0x86>
 80bb3a8:	bf00      	nop
 80bb3aa:	697b      	ldr	r3, [r7, #20]
 80bb3ac:	2b00      	cmp	r3, #0
 80bb3ae:	d004      	beq.n	80bb3ba <_force_timed_mode_stop+0x96>
 80bb3b0:	2100      	movs	r1, #0
 80bb3b2:	6878      	ldr	r0, [r7, #4]
 80bb3b4:	f001 fc6c 	bl	80bcc90 <vl53l5_set_xshut_bypass>
 80bb3b8:	e004      	b.n	80bb3c4 <_force_timed_mode_stop+0xa0>
 80bb3ba:	2100      	movs	r1, #0
 80bb3bc:	6878      	ldr	r0, [r7, #4]
 80bb3be:	f001 fc67 	bl	80bcc90 <vl53l5_set_xshut_bypass>
 80bb3c2:	6178      	str	r0, [r7, #20]
 80bb3c4:	697b      	ldr	r3, [r7, #20]
 80bb3c6:	2b00      	cmp	r3, #0
 80bb3c8:	d004      	beq.n	80bb3d4 <_force_timed_mode_stop+0xb0>
 80bb3ca:	2102      	movs	r1, #2
 80bb3cc:	6878      	ldr	r0, [r7, #4]
 80bb3ce:	f001 fc11 	bl	80bcbf4 <vl53l5_set_page>
 80bb3d2:	e006      	b.n	80bb3e2 <_force_timed_mode_stop+0xbe>
 80bb3d4:	2102      	movs	r1, #2
 80bb3d6:	6878      	ldr	r0, [r7, #4]
 80bb3d8:	f001 fc0c 	bl	80bcbf4 <vl53l5_set_page>
 80bb3dc:	6178      	str	r0, [r7, #20]
 80bb3de:	e000      	b.n	80bb3e2 <_force_timed_mode_stop+0xbe>
 80bb3e0:	bf00      	nop
 80bb3e2:	697b      	ldr	r3, [r7, #20]
 80bb3e4:	4618      	mov	r0, r3
 80bb3e6:	3718      	adds	r7, #24
 80bb3e8:	46bd      	mov	sp, r7
 80bb3ea:	bd80      	pop	{r7, pc}
 80bb3ec:	e2048200 	.word	0xe2048200

080bb3f0 <vl53l5_init>:
 80bb3f0:	b580      	push	{r7, lr}
 80bb3f2:	b084      	sub	sp, #16
 80bb3f4:	af00      	add	r7, sp, #0
 80bb3f6:	6078      	str	r0, [r7, #4]
 80bb3f8:	2300      	movs	r3, #0
 80bb3fa:	60fb      	str	r3, [r7, #12]
 80bb3fc:	687b      	ldr	r3, [r7, #4]
 80bb3fe:	2b00      	cmp	r3, #0
 80bb400:	d103      	bne.n	80bb40a <vl53l5_init+0x1a>
 80bb402:	f06f 0303 	mvn.w	r3, #3
 80bb406:	60fb      	str	r3, [r7, #12]
 80bb408:	e059      	b.n	80bb4be <vl53l5_init+0xce>
 80bb40a:	687b      	ldr	r3, [r7, #4]
 80bb40c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80bb40e:	2b00      	cmp	r3, #0
 80bb410:	d103      	bne.n	80bb41a <vl53l5_init+0x2a>
 80bb412:	f06f 0303 	mvn.w	r3, #3
 80bb416:	60fb      	str	r3, [r7, #12]
 80bb418:	e051      	b.n	80bb4be <vl53l5_init+0xce>
 80bb41a:	6878      	ldr	r0, [r7, #4]
 80bb41c:	f001 fd70 	bl	80bcf00 <vl53l5_check_device_booted>
 80bb420:	60f8      	str	r0, [r7, #12]
 80bb422:	68fb      	ldr	r3, [r7, #12]
 80bb424:	2b00      	cmp	r3, #0
 80bb426:	db41      	blt.n	80bb4ac <vl53l5_init+0xbc>
 80bb428:	687b      	ldr	r3, [r7, #4]
 80bb42a:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80bb42e:	2b00      	cmp	r3, #0
 80bb430:	d011      	beq.n	80bb456 <vl53l5_init+0x66>
 80bb432:	687b      	ldr	r3, [r7, #4]
 80bb434:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80bb438:	2b04      	cmp	r3, #4
 80bb43a:	d10c      	bne.n	80bb456 <vl53l5_init+0x66>
 80bb43c:	687b      	ldr	r3, [r7, #4]
 80bb43e:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 80bb442:	f083 0301 	eor.w	r3, r3, #1
 80bb446:	b2db      	uxtb	r3, r3
 80bb448:	2b00      	cmp	r3, #0
 80bb44a:	d004      	beq.n	80bb456 <vl53l5_init+0x66>
 80bb44c:	6878      	ldr	r0, [r7, #4]
 80bb44e:	f000 fd09 	bl	80bbe64 <vl53l5_check_map_version>
 80bb452:	60f8      	str	r0, [r7, #12]
 80bb454:	e033      	b.n	80bb4be <vl53l5_init+0xce>
 80bb456:	687b      	ldr	r3, [r7, #4]
 80bb458:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80bb45c:	2b00      	cmp	r3, #0
 80bb45e:	d127      	bne.n	80bb4b0 <vl53l5_init+0xc0>
 80bb460:	6878      	ldr	r0, [r7, #4]
 80bb462:	f001 fdb9 	bl	80bcfd8 <vl53l5_check_rom_firmware_boot>
 80bb466:	60f8      	str	r0, [r7, #12]
 80bb468:	68fb      	ldr	r3, [r7, #12]
 80bb46a:	2b00      	cmp	r3, #0
 80bb46c:	db22      	blt.n	80bb4b4 <vl53l5_init+0xc4>
 80bb46e:	687b      	ldr	r3, [r7, #4]
 80bb470:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80bb474:	f083 0301 	eor.w	r3, r3, #1
 80bb478:	b2db      	uxtb	r3, r3
 80bb47a:	2b00      	cmp	r3, #0
 80bb47c:	d00a      	beq.n	80bb494 <vl53l5_init+0xa4>
 80bb47e:	687b      	ldr	r3, [r7, #4]
 80bb480:	6a1b      	ldr	r3, [r3, #32]
 80bb482:	2b00      	cmp	r3, #0
 80bb484:	d006      	beq.n	80bb494 <vl53l5_init+0xa4>
 80bb486:	6878      	ldr	r0, [r7, #4]
 80bb488:	f001 fb1f 	bl	80bcaca <vl53l5_load_firmware>
 80bb48c:	60f8      	str	r0, [r7, #12]
 80bb48e:	68fb      	ldr	r3, [r7, #12]
 80bb490:	2b00      	cmp	r3, #0
 80bb492:	db11      	blt.n	80bb4b8 <vl53l5_init+0xc8>
 80bb494:	6878      	ldr	r0, [r7, #4]
 80bb496:	f000 fce5 	bl	80bbe64 <vl53l5_check_map_version>
 80bb49a:	60f8      	str	r0, [r7, #12]
 80bb49c:	68fb      	ldr	r3, [r7, #12]
 80bb49e:	2b00      	cmp	r3, #0
 80bb4a0:	d10c      	bne.n	80bb4bc <vl53l5_init+0xcc>
 80bb4a2:	687b      	ldr	r3, [r7, #4]
 80bb4a4:	2204      	movs	r2, #4
 80bb4a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 80bb4aa:	e008      	b.n	80bb4be <vl53l5_init+0xce>
 80bb4ac:	bf00      	nop
 80bb4ae:	e006      	b.n	80bb4be <vl53l5_init+0xce>
 80bb4b0:	bf00      	nop
 80bb4b2:	e004      	b.n	80bb4be <vl53l5_init+0xce>
 80bb4b4:	bf00      	nop
 80bb4b6:	e002      	b.n	80bb4be <vl53l5_init+0xce>
 80bb4b8:	bf00      	nop
 80bb4ba:	e000      	b.n	80bb4be <vl53l5_init+0xce>
 80bb4bc:	bf00      	nop
 80bb4be:	68fb      	ldr	r3, [r7, #12]
 80bb4c0:	4618      	mov	r0, r3
 80bb4c2:	3710      	adds	r7, #16
 80bb4c4:	46bd      	mov	sp, r7
 80bb4c6:	bd80      	pop	{r7, pc}

080bb4c8 <vl53l5_term>:
 80bb4c8:	b480      	push	{r7}
 80bb4ca:	b085      	sub	sp, #20
 80bb4cc:	af00      	add	r7, sp, #0
 80bb4ce:	6078      	str	r0, [r7, #4]
 80bb4d0:	2300      	movs	r3, #0
 80bb4d2:	60fb      	str	r3, [r7, #12]
 80bb4d4:	687b      	ldr	r3, [r7, #4]
 80bb4d6:	2b00      	cmp	r3, #0
 80bb4d8:	d103      	bne.n	80bb4e2 <vl53l5_term+0x1a>
 80bb4da:	f06f 0303 	mvn.w	r3, #3
 80bb4de:	60fb      	str	r3, [r7, #12]
 80bb4e0:	e00e      	b.n	80bb500 <vl53l5_term+0x38>
 80bb4e2:	687b      	ldr	r3, [r7, #4]
 80bb4e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80bb4e6:	2b00      	cmp	r3, #0
 80bb4e8:	d103      	bne.n	80bb4f2 <vl53l5_term+0x2a>
 80bb4ea:	f06f 0303 	mvn.w	r3, #3
 80bb4ee:	60fb      	str	r3, [r7, #12]
 80bb4f0:	e006      	b.n	80bb500 <vl53l5_term+0x38>
 80bb4f2:	687b      	ldr	r3, [r7, #4]
 80bb4f4:	2200      	movs	r2, #0
 80bb4f6:	631a      	str	r2, [r3, #48]	; 0x30
 80bb4f8:	687b      	ldr	r3, [r7, #4]
 80bb4fa:	2200      	movs	r2, #0
 80bb4fc:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 80bb500:	68fb      	ldr	r3, [r7, #12]
 80bb502:	4618      	mov	r0, r3
 80bb504:	3714      	adds	r7, #20
 80bb506:	46bd      	mov	sp, r7
 80bb508:	f85d 7b04 	ldr.w	r7, [sp], #4
 80bb50c:	4770      	bx	lr

080bb50e <vl53l5_start>:
 80bb50e:	b580      	push	{r7, lr}
 80bb510:	b084      	sub	sp, #16
 80bb512:	af00      	add	r7, sp, #0
 80bb514:	6078      	str	r0, [r7, #4]
 80bb516:	6039      	str	r1, [r7, #0]
 80bb518:	2300      	movs	r3, #0
 80bb51a:	60fb      	str	r3, [r7, #12]
 80bb51c:	2300      	movs	r3, #0
 80bb51e:	72fb      	strb	r3, [r7, #11]
 80bb520:	687b      	ldr	r3, [r7, #4]
 80bb522:	2b00      	cmp	r3, #0
 80bb524:	d103      	bne.n	80bb52e <vl53l5_start+0x20>
 80bb526:	f06f 0303 	mvn.w	r3, #3
 80bb52a:	60fb      	str	r3, [r7, #12]
 80bb52c:	e062      	b.n	80bb5f4 <vl53l5_start+0xe6>
 80bb52e:	687b      	ldr	r3, [r7, #4]
 80bb530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80bb532:	2b00      	cmp	r3, #0
 80bb534:	d103      	bne.n	80bb53e <vl53l5_start+0x30>
 80bb536:	f06f 0303 	mvn.w	r3, #3
 80bb53a:	60fb      	str	r3, [r7, #12]
 80bb53c:	e05a      	b.n	80bb5f4 <vl53l5_start+0xe6>
 80bb53e:	687b      	ldr	r3, [r7, #4]
 80bb540:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 80bb544:	2b00      	cmp	r3, #0
 80bb546:	d001      	beq.n	80bb54c <vl53l5_start+0x3e>
 80bb548:	2300      	movs	r3, #0
 80bb54a:	e001      	b.n	80bb550 <vl53l5_start+0x42>
 80bb54c:	f06f 0362 	mvn.w	r3, #98	; 0x62
 80bb550:	60fb      	str	r3, [r7, #12]
 80bb552:	68fb      	ldr	r3, [r7, #12]
 80bb554:	2b00      	cmp	r3, #0
 80bb556:	db46      	blt.n	80bb5e6 <vl53l5_start+0xd8>
 80bb558:	683b      	ldr	r3, [r7, #0]
 80bb55a:	2b00      	cmp	r3, #0
 80bb55c:	d01e      	beq.n	80bb59c <vl53l5_start+0x8e>
 80bb55e:	6838      	ldr	r0, [r7, #0]
 80bb560:	f7ff fccd 	bl	80baefe <_check_flags_consistent>
 80bb564:	60f8      	str	r0, [r7, #12]
 80bb566:	68fb      	ldr	r3, [r7, #12]
 80bb568:	2b00      	cmp	r3, #0
 80bb56a:	d13e      	bne.n	80bb5ea <vl53l5_start+0xdc>
 80bb56c:	683b      	ldr	r3, [r7, #0]
 80bb56e:	781b      	ldrb	r3, [r3, #0]
 80bb570:	f003 0302 	and.w	r3, r3, #2
 80bb574:	b2db      	uxtb	r3, r3
 80bb576:	2b00      	cmp	r3, #0
 80bb578:	d106      	bne.n	80bb588 <vl53l5_start+0x7a>
 80bb57a:	683b      	ldr	r3, [r7, #0]
 80bb57c:	781b      	ldrb	r3, [r3, #0]
 80bb57e:	f003 0301 	and.w	r3, r3, #1
 80bb582:	b2db      	uxtb	r3, r3
 80bb584:	2b00      	cmp	r3, #0
 80bb586:	d009      	beq.n	80bb59c <vl53l5_start+0x8e>
 80bb588:	2101      	movs	r1, #1
 80bb58a:	6878      	ldr	r0, [r7, #4]
 80bb58c:	f7ff fe3e 	bl	80bb20c <_set_xshut_bypass>
 80bb590:	60f8      	str	r0, [r7, #12]
 80bb592:	68fb      	ldr	r3, [r7, #12]
 80bb594:	2b00      	cmp	r3, #0
 80bb596:	d12a      	bne.n	80bb5ee <vl53l5_start+0xe0>
 80bb598:	2301      	movs	r3, #1
 80bb59a:	72fb      	strb	r3, [r7, #11]
 80bb59c:	687b      	ldr	r3, [r7, #4]
 80bb59e:	2200      	movs	r2, #0
 80bb5a0:	631a      	str	r2, [r3, #48]	; 0x30
 80bb5a2:	2103      	movs	r1, #3
 80bb5a4:	6878      	ldr	r0, [r7, #4]
 80bb5a6:	f000 fd1f 	bl	80bbfe8 <vl53l5_execute_command>
 80bb5aa:	60f8      	str	r0, [r7, #12]
 80bb5ac:	68fb      	ldr	r3, [r7, #12]
 80bb5ae:	2b00      	cmp	r3, #0
 80bb5b0:	d10b      	bne.n	80bb5ca <vl53l5_start+0xbc>
 80bb5b2:	6878      	ldr	r0, [r7, #4]
 80bb5b4:	f7ff fcd4 	bl	80baf60 <_decode_start_range_return>
 80bb5b8:	60f8      	str	r0, [r7, #12]
 80bb5ba:	68fb      	ldr	r3, [r7, #12]
 80bb5bc:	2b00      	cmp	r3, #0
 80bb5be:	d106      	bne.n	80bb5ce <vl53l5_start+0xc0>
 80bb5c0:	687b      	ldr	r3, [r7, #4]
 80bb5c2:	22ff      	movs	r2, #255	; 0xff
 80bb5c4:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
 80bb5c8:	e002      	b.n	80bb5d0 <vl53l5_start+0xc2>
 80bb5ca:	bf00      	nop
 80bb5cc:	e000      	b.n	80bb5d0 <vl53l5_start+0xc2>
 80bb5ce:	bf00      	nop
 80bb5d0:	68fb      	ldr	r3, [r7, #12]
 80bb5d2:	2b00      	cmp	r3, #0
 80bb5d4:	d00d      	beq.n	80bb5f2 <vl53l5_start+0xe4>
 80bb5d6:	7afb      	ldrb	r3, [r7, #11]
 80bb5d8:	2b00      	cmp	r3, #0
 80bb5da:	d00a      	beq.n	80bb5f2 <vl53l5_start+0xe4>
 80bb5dc:	2100      	movs	r1, #0
 80bb5de:	6878      	ldr	r0, [r7, #4]
 80bb5e0:	f7ff fe14 	bl	80bb20c <_set_xshut_bypass>
 80bb5e4:	e006      	b.n	80bb5f4 <vl53l5_start+0xe6>
 80bb5e6:	bf00      	nop
 80bb5e8:	e004      	b.n	80bb5f4 <vl53l5_start+0xe6>
 80bb5ea:	bf00      	nop
 80bb5ec:	e002      	b.n	80bb5f4 <vl53l5_start+0xe6>
 80bb5ee:	bf00      	nop
 80bb5f0:	e000      	b.n	80bb5f4 <vl53l5_start+0xe6>
 80bb5f2:	bf00      	nop
 80bb5f4:	68fb      	ldr	r3, [r7, #12]
 80bb5f6:	4618      	mov	r0, r3
 80bb5f8:	3710      	adds	r7, #16
 80bb5fa:	46bd      	mov	sp, r7
 80bb5fc:	bd80      	pop	{r7, pc}

080bb5fe <vl53l5_stop>:
 80bb5fe:	b580      	push	{r7, lr}
 80bb600:	b084      	sub	sp, #16
 80bb602:	af00      	add	r7, sp, #0
 80bb604:	6078      	str	r0, [r7, #4]
 80bb606:	6039      	str	r1, [r7, #0]
 80bb608:	2300      	movs	r3, #0
 80bb60a:	60fb      	str	r3, [r7, #12]
 80bb60c:	687b      	ldr	r3, [r7, #4]
 80bb60e:	2b00      	cmp	r3, #0
 80bb610:	d103      	bne.n	80bb61a <vl53l5_stop+0x1c>
 80bb612:	f06f 0303 	mvn.w	r3, #3
 80bb616:	60fb      	str	r3, [r7, #12]
 80bb618:	e04c      	b.n	80bb6b4 <vl53l5_stop+0xb6>
 80bb61a:	687b      	ldr	r3, [r7, #4]
 80bb61c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80bb61e:	2b00      	cmp	r3, #0
 80bb620:	d103      	bne.n	80bb62a <vl53l5_stop+0x2c>
 80bb622:	f06f 0303 	mvn.w	r3, #3
 80bb626:	60fb      	str	r3, [r7, #12]
 80bb628:	e044      	b.n	80bb6b4 <vl53l5_stop+0xb6>
 80bb62a:	687b      	ldr	r3, [r7, #4]
 80bb62c:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 80bb630:	2b00      	cmp	r3, #0
 80bb632:	d001      	beq.n	80bb638 <vl53l5_stop+0x3a>
 80bb634:	2300      	movs	r3, #0
 80bb636:	e001      	b.n	80bb63c <vl53l5_stop+0x3e>
 80bb638:	f06f 0362 	mvn.w	r3, #98	; 0x62
 80bb63c:	60fb      	str	r3, [r7, #12]
 80bb63e:	68fb      	ldr	r3, [r7, #12]
 80bb640:	2b00      	cmp	r3, #0
 80bb642:	db34      	blt.n	80bb6ae <vl53l5_stop+0xb0>
 80bb644:	683b      	ldr	r3, [r7, #0]
 80bb646:	2b00      	cmp	r3, #0
 80bb648:	d026      	beq.n	80bb698 <vl53l5_stop+0x9a>
 80bb64a:	6838      	ldr	r0, [r7, #0]
 80bb64c:	f7ff fc57 	bl	80baefe <_check_flags_consistent>
 80bb650:	60f8      	str	r0, [r7, #12]
 80bb652:	68fb      	ldr	r3, [r7, #12]
 80bb654:	2b00      	cmp	r3, #0
 80bb656:	d12c      	bne.n	80bb6b2 <vl53l5_stop+0xb4>
 80bb658:	683b      	ldr	r3, [r7, #0]
 80bb65a:	781b      	ldrb	r3, [r3, #0]
 80bb65c:	f003 0302 	and.w	r3, r3, #2
 80bb660:	b2db      	uxtb	r3, r3
 80bb662:	2b00      	cmp	r3, #0
 80bb664:	d106      	bne.n	80bb674 <vl53l5_stop+0x76>
 80bb666:	683b      	ldr	r3, [r7, #0]
 80bb668:	781b      	ldrb	r3, [r3, #0]
 80bb66a:	f003 0301 	and.w	r3, r3, #1
 80bb66e:	b2db      	uxtb	r3, r3
 80bb670:	2b00      	cmp	r3, #0
 80bb672:	d006      	beq.n	80bb682 <vl53l5_stop+0x84>
 80bb674:	6878      	ldr	r0, [r7, #4]
 80bb676:	f7ff fe55 	bl	80bb324 <_force_timed_mode_stop>
 80bb67a:	60f8      	str	r0, [r7, #12]
 80bb67c:	68fb      	ldr	r3, [r7, #12]
 80bb67e:	2b00      	cmp	r3, #0
 80bb680:	e018      	b.n	80bb6b4 <vl53l5_stop+0xb6>
 80bb682:	687b      	ldr	r3, [r7, #4]
 80bb684:	2200      	movs	r2, #0
 80bb686:	631a      	str	r2, [r3, #48]	; 0x30
 80bb688:	2104      	movs	r1, #4
 80bb68a:	6878      	ldr	r0, [r7, #4]
 80bb68c:	f000 fcac 	bl	80bbfe8 <vl53l5_execute_command>
 80bb690:	60f8      	str	r0, [r7, #12]
 80bb692:	68fb      	ldr	r3, [r7, #12]
 80bb694:	2b00      	cmp	r3, #0
 80bb696:	e00d      	b.n	80bb6b4 <vl53l5_stop+0xb6>
 80bb698:	687b      	ldr	r3, [r7, #4]
 80bb69a:	2200      	movs	r2, #0
 80bb69c:	631a      	str	r2, [r3, #48]	; 0x30
 80bb69e:	2104      	movs	r1, #4
 80bb6a0:	6878      	ldr	r0, [r7, #4]
 80bb6a2:	f000 fca1 	bl	80bbfe8 <vl53l5_execute_command>
 80bb6a6:	60f8      	str	r0, [r7, #12]
 80bb6a8:	68fb      	ldr	r3, [r7, #12]
 80bb6aa:	2b00      	cmp	r3, #0
 80bb6ac:	e002      	b.n	80bb6b4 <vl53l5_stop+0xb6>
 80bb6ae:	bf00      	nop
 80bb6b0:	e000      	b.n	80bb6b4 <vl53l5_stop+0xb6>
 80bb6b2:	bf00      	nop
 80bb6b4:	68fb      	ldr	r3, [r7, #12]
 80bb6b6:	4618      	mov	r0, r3
 80bb6b8:	3710      	adds	r7, #16
 80bb6ba:	46bd      	mov	sp, r7
 80bb6bc:	bd80      	pop	{r7, pc}

080bb6be <vl53l5_read_device_error>:
 80bb6be:	b580      	push	{r7, lr}
 80bb6c0:	b084      	sub	sp, #16
 80bb6c2:	af00      	add	r7, sp, #0
 80bb6c4:	6078      	str	r0, [r7, #4]
 80bb6c6:	6039      	str	r1, [r7, #0]
 80bb6c8:	2300      	movs	r3, #0
 80bb6ca:	60fb      	str	r3, [r7, #12]
 80bb6cc:	687b      	ldr	r3, [r7, #4]
 80bb6ce:	2b00      	cmp	r3, #0
 80bb6d0:	d103      	bne.n	80bb6da <vl53l5_read_device_error+0x1c>
 80bb6d2:	f06f 0303 	mvn.w	r3, #3
 80bb6d6:	60fb      	str	r3, [r7, #12]
 80bb6d8:	e018      	b.n	80bb70c <vl53l5_read_device_error+0x4e>
 80bb6da:	687b      	ldr	r3, [r7, #4]
 80bb6dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80bb6de:	2b00      	cmp	r3, #0
 80bb6e0:	d103      	bne.n	80bb6ea <vl53l5_read_device_error+0x2c>
 80bb6e2:	f06f 0303 	mvn.w	r3, #3
 80bb6e6:	60fb      	str	r3, [r7, #12]
 80bb6e8:	e010      	b.n	80bb70c <vl53l5_read_device_error+0x4e>
 80bb6ea:	6838      	ldr	r0, [r7, #0]
 80bb6ec:	f7ff fcb6 	bl	80bb05c <_check_if_status_requires_handler>
 80bb6f0:	4603      	mov	r3, r0
 80bb6f2:	f083 0301 	eor.w	r3, r3, #1
 80bb6f6:	b2db      	uxtb	r3, r3
 80bb6f8:	2b00      	cmp	r3, #0
 80bb6fa:	d002      	beq.n	80bb702 <vl53l5_read_device_error+0x44>
 80bb6fc:	683b      	ldr	r3, [r7, #0]
 80bb6fe:	60fb      	str	r3, [r7, #12]
 80bb700:	e004      	b.n	80bb70c <vl53l5_read_device_error+0x4e>
 80bb702:	2102      	movs	r1, #2
 80bb704:	6878      	ldr	r0, [r7, #4]
 80bb706:	f7ff fcdb 	bl	80bb0c0 <_get_error_go2_status>
 80bb70a:	60f8      	str	r0, [r7, #12]
 80bb70c:	68fb      	ldr	r3, [r7, #12]
 80bb70e:	2b00      	cmp	r3, #0
 80bb710:	d101      	bne.n	80bb716 <vl53l5_read_device_error+0x58>
 80bb712:	683b      	ldr	r3, [r7, #0]
 80bb714:	60fb      	str	r3, [r7, #12]
 80bb716:	68fb      	ldr	r3, [r7, #12]
 80bb718:	4618      	mov	r0, r3
 80bb71a:	3710      	adds	r7, #16
 80bb71c:	46bd      	mov	sp, r7
 80bb71e:	bd80      	pop	{r7, pc}

080bb720 <vl53l5_get_device_parameters>:
 80bb720:	b580      	push	{r7, lr}
 80bb722:	b086      	sub	sp, #24
 80bb724:	af00      	add	r7, sp, #0
 80bb726:	60f8      	str	r0, [r7, #12]
 80bb728:	60b9      	str	r1, [r7, #8]
 80bb72a:	607a      	str	r2, [r7, #4]
 80bb72c:	2300      	movs	r3, #0
 80bb72e:	617b      	str	r3, [r7, #20]
 80bb730:	68fb      	ldr	r3, [r7, #12]
 80bb732:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 80bb736:	2b00      	cmp	r3, #0
 80bb738:	d001      	beq.n	80bb73e <vl53l5_get_device_parameters+0x1e>
 80bb73a:	2300      	movs	r3, #0
 80bb73c:	e001      	b.n	80bb742 <vl53l5_get_device_parameters+0x22>
 80bb73e:	f06f 0362 	mvn.w	r3, #98	; 0x62
 80bb742:	617b      	str	r3, [r7, #20]
 80bb744:	697b      	ldr	r3, [r7, #20]
 80bb746:	2b00      	cmp	r3, #0
 80bb748:	db10      	blt.n	80bb76c <vl53l5_get_device_parameters+0x4c>
 80bb74a:	2301      	movs	r3, #1
 80bb74c:	687a      	ldr	r2, [r7, #4]
 80bb74e:	68b9      	ldr	r1, [r7, #8]
 80bb750:	68f8      	ldr	r0, [r7, #12]
 80bb752:	f7ff fd3c 	bl	80bb1ce <_get_dev_params>
 80bb756:	6178      	str	r0, [r7, #20]
 80bb758:	697b      	ldr	r3, [r7, #20]
 80bb75a:	2b00      	cmp	r3, #0
 80bb75c:	d108      	bne.n	80bb770 <vl53l5_get_device_parameters+0x50>
 80bb75e:	68f8      	ldr	r0, [r7, #12]
 80bb760:	f000 fb2e 	bl	80bbdc0 <vl53l5_test_map_version>
 80bb764:	6178      	str	r0, [r7, #20]
 80bb766:	697b      	ldr	r3, [r7, #20]
 80bb768:	2b00      	cmp	r3, #0
 80bb76a:	e002      	b.n	80bb772 <vl53l5_get_device_parameters+0x52>
 80bb76c:	bf00      	nop
 80bb76e:	e000      	b.n	80bb772 <vl53l5_get_device_parameters+0x52>
 80bb770:	bf00      	nop
 80bb772:	697b      	ldr	r3, [r7, #20]
 80bb774:	4618      	mov	r0, r3
 80bb776:	3718      	adds	r7, #24
 80bb778:	46bd      	mov	sp, r7
 80bb77a:	bd80      	pop	{r7, pc}

080bb77c <vl53l5_set_device_parameters>:
 80bb77c:	b580      	push	{r7, lr}
 80bb77e:	b086      	sub	sp, #24
 80bb780:	af00      	add	r7, sp, #0
 80bb782:	60f8      	str	r0, [r7, #12]
 80bb784:	60b9      	str	r1, [r7, #8]
 80bb786:	607a      	str	r2, [r7, #4]
 80bb788:	2300      	movs	r3, #0
 80bb78a:	617b      	str	r3, [r7, #20]
 80bb78c:	68fb      	ldr	r3, [r7, #12]
 80bb78e:	2b00      	cmp	r3, #0
 80bb790:	d103      	bne.n	80bb79a <vl53l5_set_device_parameters+0x1e>
 80bb792:	f06f 0303 	mvn.w	r3, #3
 80bb796:	617b      	str	r3, [r7, #20]
 80bb798:	e045      	b.n	80bb826 <vl53l5_set_device_parameters+0xaa>
 80bb79a:	68bb      	ldr	r3, [r7, #8]
 80bb79c:	2b00      	cmp	r3, #0
 80bb79e:	d103      	bne.n	80bb7a8 <vl53l5_set_device_parameters+0x2c>
 80bb7a0:	f06f 0303 	mvn.w	r3, #3
 80bb7a4:	617b      	str	r3, [r7, #20]
 80bb7a6:	e03e      	b.n	80bb826 <vl53l5_set_device_parameters+0xaa>
 80bb7a8:	68fb      	ldr	r3, [r7, #12]
 80bb7aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80bb7ac:	2b00      	cmp	r3, #0
 80bb7ae:	d103      	bne.n	80bb7b8 <vl53l5_set_device_parameters+0x3c>
 80bb7b0:	f06f 0303 	mvn.w	r3, #3
 80bb7b4:	617b      	str	r3, [r7, #20]
 80bb7b6:	e036      	b.n	80bb826 <vl53l5_set_device_parameters+0xaa>
 80bb7b8:	68fb      	ldr	r3, [r7, #12]
 80bb7ba:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 80bb7be:	2b00      	cmp	r3, #0
 80bb7c0:	d001      	beq.n	80bb7c6 <vl53l5_set_device_parameters+0x4a>
 80bb7c2:	2300      	movs	r3, #0
 80bb7c4:	e001      	b.n	80bb7ca <vl53l5_set_device_parameters+0x4e>
 80bb7c6:	f06f 0362 	mvn.w	r3, #98	; 0x62
 80bb7ca:	617b      	str	r3, [r7, #20]
 80bb7cc:	697b      	ldr	r3, [r7, #20]
 80bb7ce:	2b00      	cmp	r3, #0
 80bb7d0:	db26      	blt.n	80bb820 <vl53l5_set_device_parameters+0xa4>
 80bb7d2:	68fb      	ldr	r3, [r7, #12]
 80bb7d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80bb7d6:	687a      	ldr	r2, [r7, #4]
 80bb7d8:	429a      	cmp	r2, r3
 80bb7da:	d903      	bls.n	80bb7e4 <vl53l5_set_device_parameters+0x68>
 80bb7dc:	f06f 035b 	mvn.w	r3, #91	; 0x5b
 80bb7e0:	617b      	str	r3, [r7, #20]
 80bb7e2:	e020      	b.n	80bb826 <vl53l5_set_device_parameters+0xaa>
 80bb7e4:	68fb      	ldr	r3, [r7, #12]
 80bb7e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80bb7e8:	68ba      	ldr	r2, [r7, #8]
 80bb7ea:	429a      	cmp	r2, r3
 80bb7ec:	d006      	beq.n	80bb7fc <vl53l5_set_device_parameters+0x80>
 80bb7ee:	68fb      	ldr	r3, [r7, #12]
 80bb7f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80bb7f2:	687a      	ldr	r2, [r7, #4]
 80bb7f4:	68b9      	ldr	r1, [r7, #8]
 80bb7f6:	4618      	mov	r0, r3
 80bb7f8:	f004 fbd2 	bl	80bffa0 <memcpy>
 80bb7fc:	68fb      	ldr	r3, [r7, #12]
 80bb7fe:	687a      	ldr	r2, [r7, #4]
 80bb800:	631a      	str	r2, [r3, #48]	; 0x30
 80bb802:	68f8      	ldr	r0, [r7, #12]
 80bb804:	f000 fadc 	bl	80bbdc0 <vl53l5_test_map_version>
 80bb808:	6178      	str	r0, [r7, #20]
 80bb80a:	697b      	ldr	r3, [r7, #20]
 80bb80c:	2b00      	cmp	r3, #0
 80bb80e:	d109      	bne.n	80bb824 <vl53l5_set_device_parameters+0xa8>
 80bb810:	2101      	movs	r1, #1
 80bb812:	68f8      	ldr	r0, [r7, #12]
 80bb814:	f000 fbe8 	bl	80bbfe8 <vl53l5_execute_command>
 80bb818:	6178      	str	r0, [r7, #20]
 80bb81a:	697b      	ldr	r3, [r7, #20]
 80bb81c:	2b00      	cmp	r3, #0
 80bb81e:	e002      	b.n	80bb826 <vl53l5_set_device_parameters+0xaa>
 80bb820:	bf00      	nop
 80bb822:	e000      	b.n	80bb826 <vl53l5_set_device_parameters+0xaa>
 80bb824:	bf00      	nop
 80bb826:	697b      	ldr	r3, [r7, #20]
 80bb828:	4618      	mov	r0, r3
 80bb82a:	3718      	adds	r7, #24
 80bb82c:	46bd      	mov	sp, r7
 80bb82e:	bd80      	pop	{r7, pc}

080bb830 <vl53l5_set_power_mode>:
 80bb830:	b580      	push	{r7, lr}
 80bb832:	b084      	sub	sp, #16
 80bb834:	af00      	add	r7, sp, #0
 80bb836:	6078      	str	r0, [r7, #4]
 80bb838:	460b      	mov	r3, r1
 80bb83a:	70fb      	strb	r3, [r7, #3]
 80bb83c:	2300      	movs	r3, #0
 80bb83e:	60fb      	str	r3, [r7, #12]
 80bb840:	687b      	ldr	r3, [r7, #4]
 80bb842:	2b00      	cmp	r3, #0
 80bb844:	d103      	bne.n	80bb84e <vl53l5_set_power_mode+0x1e>
 80bb846:	f06f 0303 	mvn.w	r3, #3
 80bb84a:	60fb      	str	r3, [r7, #12]
 80bb84c:	e044      	b.n	80bb8d8 <vl53l5_set_power_mode+0xa8>
 80bb84e:	687b      	ldr	r3, [r7, #4]
 80bb850:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80bb854:	2b00      	cmp	r3, #0
 80bb856:	d107      	bne.n	80bb868 <vl53l5_set_power_mode+0x38>
 80bb858:	687b      	ldr	r3, [r7, #4]
 80bb85a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80bb85e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80bb862:	b2db      	uxtb	r3, r3
 80bb864:	2b00      	cmp	r3, #0
 80bb866:	d004      	beq.n	80bb872 <vl53l5_set_power_mode+0x42>
 80bb868:	687b      	ldr	r3, [r7, #4]
 80bb86a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80bb86e:	2b05      	cmp	r3, #5
 80bb870:	d103      	bne.n	80bb87a <vl53l5_set_power_mode+0x4a>
 80bb872:	f06f 0329 	mvn.w	r3, #41	; 0x29
 80bb876:	60fb      	str	r3, [r7, #12]
 80bb878:	e02e      	b.n	80bb8d8 <vl53l5_set_power_mode+0xa8>
 80bb87a:	78fb      	ldrb	r3, [r7, #3]
 80bb87c:	2b03      	cmp	r3, #3
 80bb87e:	d00e      	beq.n	80bb89e <vl53l5_set_power_mode+0x6e>
 80bb880:	2b04      	cmp	r3, #4
 80bb882:	d002      	beq.n	80bb88a <vl53l5_set_power_mode+0x5a>
 80bb884:	2b01      	cmp	r3, #1
 80bb886:	d014      	beq.n	80bb8b2 <vl53l5_set_power_mode+0x82>
 80bb888:	e01d      	b.n	80bb8c6 <vl53l5_set_power_mode+0x96>
 80bb88a:	687b      	ldr	r3, [r7, #4]
 80bb88c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80bb890:	2b04      	cmp	r3, #4
 80bb892:	d01c      	beq.n	80bb8ce <vl53l5_set_power_mode+0x9e>
 80bb894:	6878      	ldr	r0, [r7, #4]
 80bb896:	f000 f8c9 	bl	80bba2c <_set_power_to_hp_idle>
 80bb89a:	60f8      	str	r0, [r7, #12]
 80bb89c:	e017      	b.n	80bb8ce <vl53l5_set_power_mode+0x9e>
 80bb89e:	687b      	ldr	r3, [r7, #4]
 80bb8a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80bb8a4:	2b03      	cmp	r3, #3
 80bb8a6:	d014      	beq.n	80bb8d2 <vl53l5_set_power_mode+0xa2>
 80bb8a8:	6878      	ldr	r0, [r7, #4]
 80bb8aa:	f000 f91a 	bl	80bbae2 <_set_power_to_lp_idle_comms>
 80bb8ae:	60f8      	str	r0, [r7, #12]
 80bb8b0:	e00f      	b.n	80bb8d2 <vl53l5_set_power_mode+0xa2>
 80bb8b2:	687b      	ldr	r3, [r7, #4]
 80bb8b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80bb8b8:	2b01      	cmp	r3, #1
 80bb8ba:	d00c      	beq.n	80bb8d6 <vl53l5_set_power_mode+0xa6>
 80bb8bc:	6878      	ldr	r0, [r7, #4]
 80bb8be:	f000 f960 	bl	80bbb82 <_set_power_to_ulp_idle>
 80bb8c2:	60f8      	str	r0, [r7, #12]
 80bb8c4:	e007      	b.n	80bb8d6 <vl53l5_set_power_mode+0xa6>
 80bb8c6:	f06f 0329 	mvn.w	r3, #41	; 0x29
 80bb8ca:	60fb      	str	r3, [r7, #12]
 80bb8cc:	e004      	b.n	80bb8d8 <vl53l5_set_power_mode+0xa8>
 80bb8ce:	bf00      	nop
 80bb8d0:	e002      	b.n	80bb8d8 <vl53l5_set_power_mode+0xa8>
 80bb8d2:	bf00      	nop
 80bb8d4:	e000      	b.n	80bb8d8 <vl53l5_set_power_mode+0xa8>
 80bb8d6:	bf00      	nop
 80bb8d8:	68fb      	ldr	r3, [r7, #12]
 80bb8da:	4618      	mov	r0, r3
 80bb8dc:	3710      	adds	r7, #16
 80bb8de:	46bd      	mov	sp, r7
 80bb8e0:	bd80      	pop	{r7, pc}

080bb8e2 <_go_to_hp_idle>:
 80bb8e2:	b580      	push	{r7, lr}
 80bb8e4:	b084      	sub	sp, #16
 80bb8e6:	af00      	add	r7, sp, #0
 80bb8e8:	6078      	str	r0, [r7, #4]
 80bb8ea:	2300      	movs	r3, #0
 80bb8ec:	60fb      	str	r3, [r7, #12]
 80bb8ee:	687b      	ldr	r3, [r7, #4]
 80bb8f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80bb8f4:	2b01      	cmp	r3, #1
 80bb8f6:	d111      	bne.n	80bb91c <_go_to_hp_idle+0x3a>
 80bb8f8:	2101      	movs	r1, #1
 80bb8fa:	6878      	ldr	r0, [r7, #4]
 80bb8fc:	f001 f9f0 	bl	80bcce0 <vl53l5_set_manual_xshut_state>
 80bb900:	60f8      	str	r0, [r7, #12]
 80bb902:	68fb      	ldr	r3, [r7, #12]
 80bb904:	2b00      	cmp	r3, #0
 80bb906:	db3d      	blt.n	80bb984 <_go_to_hp_idle+0xa2>
 80bb908:	2201      	movs	r2, #1
 80bb90a:	2101      	movs	r1, #1
 80bb90c:	6878      	ldr	r0, [r7, #4]
 80bb90e:	f001 f986 	bl	80bcc1e <vl53l5_set_regulators>
 80bb912:	60f8      	str	r0, [r7, #12]
 80bb914:	68fb      	ldr	r3, [r7, #12]
 80bb916:	2b00      	cmp	r3, #0
 80bb918:	da25      	bge.n	80bb966 <_go_to_hp_idle+0x84>
 80bb91a:	e036      	b.n	80bb98a <_go_to_hp_idle+0xa8>
 80bb91c:	687b      	ldr	r3, [r7, #4]
 80bb91e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80bb922:	2b03      	cmp	r3, #3
 80bb924:	d108      	bne.n	80bb938 <_go_to_hp_idle+0x56>
 80bb926:	2101      	movs	r1, #1
 80bb928:	6878      	ldr	r0, [r7, #4]
 80bb92a:	f001 f9d9 	bl	80bcce0 <vl53l5_set_manual_xshut_state>
 80bb92e:	60f8      	str	r0, [r7, #12]
 80bb930:	68fb      	ldr	r3, [r7, #12]
 80bb932:	2b00      	cmp	r3, #0
 80bb934:	da17      	bge.n	80bb966 <_go_to_hp_idle+0x84>
 80bb936:	e028      	b.n	80bb98a <_go_to_hp_idle+0xa8>
 80bb938:	687b      	ldr	r3, [r7, #4]
 80bb93a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80bb93e:	2b00      	cmp	r3, #0
 80bb940:	d10d      	bne.n	80bb95e <_go_to_hp_idle+0x7c>
 80bb942:	687b      	ldr	r3, [r7, #4]
 80bb944:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80bb948:	2b00      	cmp	r3, #0
 80bb94a:	d008      	beq.n	80bb95e <_go_to_hp_idle+0x7c>
 80bb94c:	2101      	movs	r1, #1
 80bb94e:	6878      	ldr	r0, [r7, #4]
 80bb950:	f001 f9c6 	bl	80bcce0 <vl53l5_set_manual_xshut_state>
 80bb954:	60f8      	str	r0, [r7, #12]
 80bb956:	68fb      	ldr	r3, [r7, #12]
 80bb958:	2b00      	cmp	r3, #0
 80bb95a:	da04      	bge.n	80bb966 <_go_to_hp_idle+0x84>
 80bb95c:	e015      	b.n	80bb98a <_go_to_hp_idle+0xa8>
 80bb95e:	f06f 0329 	mvn.w	r3, #41	; 0x29
 80bb962:	60fb      	str	r3, [r7, #12]
 80bb964:	e011      	b.n	80bb98a <_go_to_hp_idle+0xa8>
 80bb966:	2300      	movs	r3, #0
 80bb968:	2200      	movs	r2, #0
 80bb96a:	2101      	movs	r1, #1
 80bb96c:	6878      	ldr	r0, [r7, #4]
 80bb96e:	f001 f9f2 	bl	80bcd56 <vl53l5_wait_mcu_boot>
 80bb972:	60f8      	str	r0, [r7, #12]
 80bb974:	68fb      	ldr	r3, [r7, #12]
 80bb976:	2b00      	cmp	r3, #0
 80bb978:	db06      	blt.n	80bb988 <_go_to_hp_idle+0xa6>
 80bb97a:	687b      	ldr	r3, [r7, #4]
 80bb97c:	2204      	movs	r2, #4
 80bb97e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 80bb982:	e002      	b.n	80bb98a <_go_to_hp_idle+0xa8>
 80bb984:	bf00      	nop
 80bb986:	e000      	b.n	80bb98a <_go_to_hp_idle+0xa8>
 80bb988:	bf00      	nop
 80bb98a:	68fb      	ldr	r3, [r7, #12]
 80bb98c:	4618      	mov	r0, r3
 80bb98e:	3710      	adds	r7, #16
 80bb990:	46bd      	mov	sp, r7
 80bb992:	bd80      	pop	{r7, pc}

080bb994 <_go_to_lp_idle_comms>:
 80bb994:	b580      	push	{r7, lr}
 80bb996:	b084      	sub	sp, #16
 80bb998:	af00      	add	r7, sp, #0
 80bb99a:	6078      	str	r0, [r7, #4]
 80bb99c:	2300      	movs	r3, #0
 80bb99e:	60fb      	str	r3, [r7, #12]
 80bb9a0:	2100      	movs	r1, #0
 80bb9a2:	6878      	ldr	r0, [r7, #4]
 80bb9a4:	f001 f99c 	bl	80bcce0 <vl53l5_set_manual_xshut_state>
 80bb9a8:	60f8      	str	r0, [r7, #12]
 80bb9aa:	68fb      	ldr	r3, [r7, #12]
 80bb9ac:	2b00      	cmp	r3, #0
 80bb9ae:	db0e      	blt.n	80bb9ce <_go_to_lp_idle_comms+0x3a>
 80bb9b0:	2300      	movs	r3, #0
 80bb9b2:	2200      	movs	r2, #0
 80bb9b4:	2100      	movs	r1, #0
 80bb9b6:	6878      	ldr	r0, [r7, #4]
 80bb9b8:	f001 f9cd 	bl	80bcd56 <vl53l5_wait_mcu_boot>
 80bb9bc:	60f8      	str	r0, [r7, #12]
 80bb9be:	68fb      	ldr	r3, [r7, #12]
 80bb9c0:	2b00      	cmp	r3, #0
 80bb9c2:	db06      	blt.n	80bb9d2 <_go_to_lp_idle_comms+0x3e>
 80bb9c4:	687b      	ldr	r3, [r7, #4]
 80bb9c6:	2203      	movs	r2, #3
 80bb9c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 80bb9cc:	e002      	b.n	80bb9d4 <_go_to_lp_idle_comms+0x40>
 80bb9ce:	bf00      	nop
 80bb9d0:	e000      	b.n	80bb9d4 <_go_to_lp_idle_comms+0x40>
 80bb9d2:	bf00      	nop
 80bb9d4:	68fb      	ldr	r3, [r7, #12]
 80bb9d6:	4618      	mov	r0, r3
 80bb9d8:	3710      	adds	r7, #16
 80bb9da:	46bd      	mov	sp, r7
 80bb9dc:	bd80      	pop	{r7, pc}

080bb9de <_go_to_ulp_idle>:
 80bb9de:	b580      	push	{r7, lr}
 80bb9e0:	b084      	sub	sp, #16
 80bb9e2:	af00      	add	r7, sp, #0
 80bb9e4:	6078      	str	r0, [r7, #4]
 80bb9e6:	2300      	movs	r3, #0
 80bb9e8:	60fb      	str	r3, [r7, #12]
 80bb9ea:	6878      	ldr	r0, [r7, #4]
 80bb9ec:	f7ff ffd2 	bl	80bb994 <_go_to_lp_idle_comms>
 80bb9f0:	60f8      	str	r0, [r7, #12]
 80bb9f2:	68fb      	ldr	r3, [r7, #12]
 80bb9f4:	2b00      	cmp	r3, #0
 80bb9f6:	db11      	blt.n	80bba1c <_go_to_ulp_idle+0x3e>
 80bb9f8:	2200      	movs	r2, #0
 80bb9fa:	2100      	movs	r1, #0
 80bb9fc:	6878      	ldr	r0, [r7, #4]
 80bb9fe:	f001 f90e 	bl	80bcc1e <vl53l5_set_regulators>
 80bba02:	60f8      	str	r0, [r7, #12]
 80bba04:	68fb      	ldr	r3, [r7, #12]
 80bba06:	2b00      	cmp	r3, #0
 80bba08:	db0a      	blt.n	80bba20 <_go_to_ulp_idle+0x42>
 80bba0a:	687b      	ldr	r3, [r7, #4]
 80bba0c:	2200      	movs	r2, #0
 80bba0e:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 80bba12:	687b      	ldr	r3, [r7, #4]
 80bba14:	2201      	movs	r2, #1
 80bba16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 80bba1a:	e002      	b.n	80bba22 <_go_to_ulp_idle+0x44>
 80bba1c:	bf00      	nop
 80bba1e:	e000      	b.n	80bba22 <_go_to_ulp_idle+0x44>
 80bba20:	bf00      	nop
 80bba22:	68fb      	ldr	r3, [r7, #12]
 80bba24:	4618      	mov	r0, r3
 80bba26:	3710      	adds	r7, #16
 80bba28:	46bd      	mov	sp, r7
 80bba2a:	bd80      	pop	{r7, pc}

080bba2c <_set_power_to_hp_idle>:
 80bba2c:	b580      	push	{r7, lr}
 80bba2e:	b084      	sub	sp, #16
 80bba30:	af00      	add	r7, sp, #0
 80bba32:	6078      	str	r0, [r7, #4]
 80bba34:	2300      	movs	r3, #0
 80bba36:	60fb      	str	r3, [r7, #12]
 80bba38:	687b      	ldr	r3, [r7, #4]
 80bba3a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80bba3e:	72fb      	strb	r3, [r7, #11]
 80bba40:	2301      	movs	r3, #1
 80bba42:	72bb      	strb	r3, [r7, #10]
 80bba44:	687b      	ldr	r3, [r7, #4]
 80bba46:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80bba4a:	2b04      	cmp	r3, #4
 80bba4c:	d03d      	beq.n	80bbaca <_set_power_to_hp_idle+0x9e>
 80bba4e:	7abb      	ldrb	r3, [r7, #10]
 80bba50:	2b00      	cmp	r3, #0
 80bba52:	d007      	beq.n	80bba64 <_set_power_to_hp_idle+0x38>
 80bba54:	2100      	movs	r1, #0
 80bba56:	6878      	ldr	r0, [r7, #4]
 80bba58:	f001 f8cc 	bl	80bcbf4 <vl53l5_set_page>
 80bba5c:	60f8      	str	r0, [r7, #12]
 80bba5e:	68fb      	ldr	r3, [r7, #12]
 80bba60:	2b00      	cmp	r3, #0
 80bba62:	db04      	blt.n	80bba6e <_set_power_to_hp_idle+0x42>
 80bba64:	6878      	ldr	r0, [r7, #4]
 80bba66:	f7ff ff3c 	bl	80bb8e2 <_go_to_hp_idle>
 80bba6a:	60f8      	str	r0, [r7, #12]
 80bba6c:	e000      	b.n	80bba70 <_set_power_to_hp_idle+0x44>
 80bba6e:	bf00      	nop
 80bba70:	68fb      	ldr	r3, [r7, #12]
 80bba72:	2b00      	cmp	r3, #0
 80bba74:	d004      	beq.n	80bba80 <_set_power_to_hp_idle+0x54>
 80bba76:	2102      	movs	r1, #2
 80bba78:	6878      	ldr	r0, [r7, #4]
 80bba7a:	f001 f8bb 	bl	80bcbf4 <vl53l5_set_page>
 80bba7e:	e02b      	b.n	80bbad8 <_set_power_to_hp_idle+0xac>
 80bba80:	2102      	movs	r1, #2
 80bba82:	6878      	ldr	r0, [r7, #4]
 80bba84:	f001 f8b6 	bl	80bcbf4 <vl53l5_set_page>
 80bba88:	60f8      	str	r0, [r7, #12]
 80bba8a:	68fb      	ldr	r3, [r7, #12]
 80bba8c:	2b00      	cmp	r3, #0
 80bba8e:	d11e      	bne.n	80bbace <_set_power_to_hp_idle+0xa2>
 80bba90:	7afb      	ldrb	r3, [r7, #11]
 80bba92:	2b01      	cmp	r3, #1
 80bba94:	d10a      	bne.n	80bbaac <_set_power_to_hp_idle+0x80>
 80bba96:	687b      	ldr	r3, [r7, #4]
 80bba98:	6a1b      	ldr	r3, [r3, #32]
 80bba9a:	2b00      	cmp	r3, #0
 80bba9c:	d006      	beq.n	80bbaac <_set_power_to_hp_idle+0x80>
 80bba9e:	6878      	ldr	r0, [r7, #4]
 80bbaa0:	f001 f813 	bl	80bcaca <vl53l5_load_firmware>
 80bbaa4:	60f8      	str	r0, [r7, #12]
 80bbaa6:	68fb      	ldr	r3, [r7, #12]
 80bbaa8:	2b00      	cmp	r3, #0
 80bbaaa:	d112      	bne.n	80bbad2 <_set_power_to_hp_idle+0xa6>
 80bbaac:	7afb      	ldrb	r3, [r7, #11]
 80bbaae:	2b01      	cmp	r3, #1
 80bbab0:	d004      	beq.n	80bbabc <_set_power_to_hp_idle+0x90>
 80bbab2:	687b      	ldr	r3, [r7, #4]
 80bbab4:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80bbab8:	2b00      	cmp	r3, #0
 80bbaba:	d00c      	beq.n	80bbad6 <_set_power_to_hp_idle+0xaa>
 80bbabc:	6878      	ldr	r0, [r7, #4]
 80bbabe:	f000 f9d1 	bl	80bbe64 <vl53l5_check_map_version>
 80bbac2:	60f8      	str	r0, [r7, #12]
 80bbac4:	68fb      	ldr	r3, [r7, #12]
 80bbac6:	2b00      	cmp	r3, #0
 80bbac8:	e005      	b.n	80bbad6 <_set_power_to_hp_idle+0xaa>
 80bbaca:	bf00      	nop
 80bbacc:	e004      	b.n	80bbad8 <_set_power_to_hp_idle+0xac>
 80bbace:	bf00      	nop
 80bbad0:	e002      	b.n	80bbad8 <_set_power_to_hp_idle+0xac>
 80bbad2:	bf00      	nop
 80bbad4:	e000      	b.n	80bbad8 <_set_power_to_hp_idle+0xac>
 80bbad6:	bf00      	nop
 80bbad8:	68fb      	ldr	r3, [r7, #12]
 80bbada:	4618      	mov	r0, r3
 80bbadc:	3710      	adds	r7, #16
 80bbade:	46bd      	mov	sp, r7
 80bbae0:	bd80      	pop	{r7, pc}

080bbae2 <_set_power_to_lp_idle_comms>:
 80bbae2:	b580      	push	{r7, lr}
 80bbae4:	b084      	sub	sp, #16
 80bbae6:	af00      	add	r7, sp, #0
 80bbae8:	6078      	str	r0, [r7, #4]
 80bbaea:	2300      	movs	r3, #0
 80bbaec:	60fb      	str	r3, [r7, #12]
 80bbaee:	687b      	ldr	r3, [r7, #4]
 80bbaf0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80bbaf4:	72fb      	strb	r3, [r7, #11]
 80bbaf6:	2301      	movs	r3, #1
 80bbaf8:	72bb      	strb	r3, [r7, #10]
 80bbafa:	687b      	ldr	r3, [r7, #4]
 80bbafc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80bbb00:	2b03      	cmp	r3, #3
 80bbb02:	d034      	beq.n	80bbb6e <_set_power_to_lp_idle_comms+0x8c>
 80bbb04:	7afb      	ldrb	r3, [r7, #11]
 80bbb06:	2b01      	cmp	r3, #1
 80bbb08:	d106      	bne.n	80bbb18 <_set_power_to_lp_idle_comms+0x36>
 80bbb0a:	6878      	ldr	r0, [r7, #4]
 80bbb0c:	f7ff ff8e 	bl	80bba2c <_set_power_to_hp_idle>
 80bbb10:	60f8      	str	r0, [r7, #12]
 80bbb12:	68fb      	ldr	r3, [r7, #12]
 80bbb14:	2b00      	cmp	r3, #0
 80bbb16:	db2c      	blt.n	80bbb72 <_set_power_to_lp_idle_comms+0x90>
 80bbb18:	7abb      	ldrb	r3, [r7, #10]
 80bbb1a:	2b00      	cmp	r3, #0
 80bbb1c:	d007      	beq.n	80bbb2e <_set_power_to_lp_idle_comms+0x4c>
 80bbb1e:	2100      	movs	r1, #0
 80bbb20:	6878      	ldr	r0, [r7, #4]
 80bbb22:	f001 f867 	bl	80bcbf4 <vl53l5_set_page>
 80bbb26:	60f8      	str	r0, [r7, #12]
 80bbb28:	68fb      	ldr	r3, [r7, #12]
 80bbb2a:	2b00      	cmp	r3, #0
 80bbb2c:	db23      	blt.n	80bbb76 <_set_power_to_lp_idle_comms+0x94>
 80bbb2e:	687b      	ldr	r3, [r7, #4]
 80bbb30:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80bbb34:	2b04      	cmp	r3, #4
 80bbb36:	d006      	beq.n	80bbb46 <_set_power_to_lp_idle_comms+0x64>
 80bbb38:	6878      	ldr	r0, [r7, #4]
 80bbb3a:	f7ff fed2 	bl	80bb8e2 <_go_to_hp_idle>
 80bbb3e:	60f8      	str	r0, [r7, #12]
 80bbb40:	68fb      	ldr	r3, [r7, #12]
 80bbb42:	2b00      	cmp	r3, #0
 80bbb44:	db04      	blt.n	80bbb50 <_set_power_to_lp_idle_comms+0x6e>
 80bbb46:	6878      	ldr	r0, [r7, #4]
 80bbb48:	f7ff ff24 	bl	80bb994 <_go_to_lp_idle_comms>
 80bbb4c:	60f8      	str	r0, [r7, #12]
 80bbb4e:	e000      	b.n	80bbb52 <_set_power_to_lp_idle_comms+0x70>
 80bbb50:	bf00      	nop
 80bbb52:	68fb      	ldr	r3, [r7, #12]
 80bbb54:	2b00      	cmp	r3, #0
 80bbb56:	da04      	bge.n	80bbb62 <_set_power_to_lp_idle_comms+0x80>
 80bbb58:	2102      	movs	r1, #2
 80bbb5a:	6878      	ldr	r0, [r7, #4]
 80bbb5c:	f001 f84a 	bl	80bcbf4 <vl53l5_set_page>
 80bbb60:	e00a      	b.n	80bbb78 <_set_power_to_lp_idle_comms+0x96>
 80bbb62:	2102      	movs	r1, #2
 80bbb64:	6878      	ldr	r0, [r7, #4]
 80bbb66:	f001 f845 	bl	80bcbf4 <vl53l5_set_page>
 80bbb6a:	60f8      	str	r0, [r7, #12]
 80bbb6c:	e004      	b.n	80bbb78 <_set_power_to_lp_idle_comms+0x96>
 80bbb6e:	bf00      	nop
 80bbb70:	e002      	b.n	80bbb78 <_set_power_to_lp_idle_comms+0x96>
 80bbb72:	bf00      	nop
 80bbb74:	e000      	b.n	80bbb78 <_set_power_to_lp_idle_comms+0x96>
 80bbb76:	bf00      	nop
 80bbb78:	68fb      	ldr	r3, [r7, #12]
 80bbb7a:	4618      	mov	r0, r3
 80bbb7c:	3710      	adds	r7, #16
 80bbb7e:	46bd      	mov	sp, r7
 80bbb80:	bd80      	pop	{r7, pc}

080bbb82 <_set_power_to_ulp_idle>:
 80bbb82:	b580      	push	{r7, lr}
 80bbb84:	b084      	sub	sp, #16
 80bbb86:	af00      	add	r7, sp, #0
 80bbb88:	6078      	str	r0, [r7, #4]
 80bbb8a:	2300      	movs	r3, #0
 80bbb8c:	60fb      	str	r3, [r7, #12]
 80bbb8e:	2301      	movs	r3, #1
 80bbb90:	72fb      	strb	r3, [r7, #11]
 80bbb92:	687b      	ldr	r3, [r7, #4]
 80bbb94:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80bbb98:	2b01      	cmp	r3, #1
 80bbb9a:	d02c      	beq.n	80bbbf6 <_set_power_to_ulp_idle+0x74>
 80bbb9c:	7afb      	ldrb	r3, [r7, #11]
 80bbb9e:	2b00      	cmp	r3, #0
 80bbba0:	d007      	beq.n	80bbbb2 <_set_power_to_ulp_idle+0x30>
 80bbba2:	2100      	movs	r1, #0
 80bbba4:	6878      	ldr	r0, [r7, #4]
 80bbba6:	f001 f825 	bl	80bcbf4 <vl53l5_set_page>
 80bbbaa:	60f8      	str	r0, [r7, #12]
 80bbbac:	68fb      	ldr	r3, [r7, #12]
 80bbbae:	2b00      	cmp	r3, #0
 80bbbb0:	db23      	blt.n	80bbbfa <_set_power_to_ulp_idle+0x78>
 80bbbb2:	687b      	ldr	r3, [r7, #4]
 80bbbb4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80bbbb8:	2b04      	cmp	r3, #4
 80bbbba:	d006      	beq.n	80bbbca <_set_power_to_ulp_idle+0x48>
 80bbbbc:	6878      	ldr	r0, [r7, #4]
 80bbbbe:	f7ff fe90 	bl	80bb8e2 <_go_to_hp_idle>
 80bbbc2:	60f8      	str	r0, [r7, #12]
 80bbbc4:	68fb      	ldr	r3, [r7, #12]
 80bbbc6:	2b00      	cmp	r3, #0
 80bbbc8:	db06      	blt.n	80bbbd8 <_set_power_to_ulp_idle+0x56>
 80bbbca:	6878      	ldr	r0, [r7, #4]
 80bbbcc:	f7ff ff07 	bl	80bb9de <_go_to_ulp_idle>
 80bbbd0:	60f8      	str	r0, [r7, #12]
 80bbbd2:	68fb      	ldr	r3, [r7, #12]
 80bbbd4:	2b00      	cmp	r3, #0
 80bbbd6:	e000      	b.n	80bbbda <_set_power_to_ulp_idle+0x58>
 80bbbd8:	bf00      	nop
 80bbbda:	68fb      	ldr	r3, [r7, #12]
 80bbbdc:	2b00      	cmp	r3, #0
 80bbbde:	da04      	bge.n	80bbbea <_set_power_to_ulp_idle+0x68>
 80bbbe0:	2102      	movs	r1, #2
 80bbbe2:	6878      	ldr	r0, [r7, #4]
 80bbbe4:	f001 f806 	bl	80bcbf4 <vl53l5_set_page>
 80bbbe8:	e008      	b.n	80bbbfc <_set_power_to_ulp_idle+0x7a>
 80bbbea:	2102      	movs	r1, #2
 80bbbec:	6878      	ldr	r0, [r7, #4]
 80bbbee:	f001 f801 	bl	80bcbf4 <vl53l5_set_page>
 80bbbf2:	60f8      	str	r0, [r7, #12]
 80bbbf4:	e002      	b.n	80bbbfc <_set_power_to_ulp_idle+0x7a>
 80bbbf6:	bf00      	nop
 80bbbf8:	e000      	b.n	80bbbfc <_set_power_to_ulp_idle+0x7a>
 80bbbfa:	bf00      	nop
 80bbbfc:	68fb      	ldr	r3, [r7, #12]
 80bbbfe:	4618      	mov	r0, r3
 80bbc00:	3710      	adds	r7, #16
 80bbc02:	46bd      	mov	sp, r7
 80bbc04:	bd80      	pop	{r7, pc}

080bbc06 <vl53l5_decode_range_data>:
 80bbc06:	b580      	push	{r7, lr}
 80bbc08:	b084      	sub	sp, #16
 80bbc0a:	af00      	add	r7, sp, #0
 80bbc0c:	6078      	str	r0, [r7, #4]
 80bbc0e:	6039      	str	r1, [r7, #0]
 80bbc10:	2300      	movs	r3, #0
 80bbc12:	60fb      	str	r3, [r7, #12]
 80bbc14:	687b      	ldr	r3, [r7, #4]
 80bbc16:	2b00      	cmp	r3, #0
 80bbc18:	d103      	bne.n	80bbc22 <vl53l5_decode_range_data+0x1c>
 80bbc1a:	f06f 0303 	mvn.w	r3, #3
 80bbc1e:	60fb      	str	r3, [r7, #12]
 80bbc20:	e024      	b.n	80bbc6c <vl53l5_decode_range_data+0x66>
 80bbc22:	683b      	ldr	r3, [r7, #0]
 80bbc24:	2b00      	cmp	r3, #0
 80bbc26:	d103      	bne.n	80bbc30 <vl53l5_decode_range_data+0x2a>
 80bbc28:	f06f 0303 	mvn.w	r3, #3
 80bbc2c:	60fb      	str	r3, [r7, #12]
 80bbc2e:	e01d      	b.n	80bbc6c <vl53l5_decode_range_data+0x66>
 80bbc30:	687b      	ldr	r3, [r7, #4]
 80bbc32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80bbc34:	2b00      	cmp	r3, #0
 80bbc36:	d103      	bne.n	80bbc40 <vl53l5_decode_range_data+0x3a>
 80bbc38:	f06f 0303 	mvn.w	r3, #3
 80bbc3c:	60fb      	str	r3, [r7, #12]
 80bbc3e:	e015      	b.n	80bbc6c <vl53l5_decode_range_data+0x66>
 80bbc40:	687b      	ldr	r3, [r7, #4]
 80bbc42:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 80bbc46:	2b00      	cmp	r3, #0
 80bbc48:	d001      	beq.n	80bbc4e <vl53l5_decode_range_data+0x48>
 80bbc4a:	2300      	movs	r3, #0
 80bbc4c:	e001      	b.n	80bbc52 <vl53l5_decode_range_data+0x4c>
 80bbc4e:	f06f 0362 	mvn.w	r3, #98	; 0x62
 80bbc52:	60fb      	str	r3, [r7, #12]
 80bbc54:	68fb      	ldr	r3, [r7, #12]
 80bbc56:	2b00      	cmp	r3, #0
 80bbc58:	db07      	blt.n	80bbc6a <vl53l5_decode_range_data+0x64>
 80bbc5a:	683a      	ldr	r2, [r7, #0]
 80bbc5c:	687b      	ldr	r3, [r7, #4]
 80bbc5e:	651a      	str	r2, [r3, #80]	; 0x50
 80bbc60:	6878      	ldr	r0, [r7, #4]
 80bbc62:	f001 fc50 	bl	80bd506 <vl53l5_dci_decode_range_data>
 80bbc66:	60f8      	str	r0, [r7, #12]
 80bbc68:	e000      	b.n	80bbc6c <vl53l5_decode_range_data+0x66>
 80bbc6a:	bf00      	nop
 80bbc6c:	687b      	ldr	r3, [r7, #4]
 80bbc6e:	2b00      	cmp	r3, #0
 80bbc70:	d002      	beq.n	80bbc78 <vl53l5_decode_range_data+0x72>
 80bbc72:	687b      	ldr	r3, [r7, #4]
 80bbc74:	2200      	movs	r2, #0
 80bbc76:	651a      	str	r2, [r3, #80]	; 0x50
 80bbc78:	68fb      	ldr	r3, [r7, #12]
 80bbc7a:	4618      	mov	r0, r3
 80bbc7c:	3710      	adds	r7, #16
 80bbc7e:	46bd      	mov	sp, r7
 80bbc80:	bd80      	pop	{r7, pc}

080bbc82 <vl53l5_check_data_ready>:
 80bbc82:	b580      	push	{r7, lr}
 80bbc84:	b084      	sub	sp, #16
 80bbc86:	af00      	add	r7, sp, #0
 80bbc88:	6078      	str	r0, [r7, #4]
 80bbc8a:	2300      	movs	r3, #0
 80bbc8c:	60fb      	str	r3, [r7, #12]
 80bbc8e:	2300      	movs	r3, #0
 80bbc90:	72fb      	strb	r3, [r7, #11]
 80bbc92:	687b      	ldr	r3, [r7, #4]
 80bbc94:	2b00      	cmp	r3, #0
 80bbc96:	d103      	bne.n	80bbca0 <vl53l5_check_data_ready+0x1e>
 80bbc98:	f06f 0303 	mvn.w	r3, #3
 80bbc9c:	60fb      	str	r3, [r7, #12]
 80bbc9e:	e034      	b.n	80bbd0a <vl53l5_check_data_ready+0x88>
 80bbca0:	687b      	ldr	r3, [r7, #4]
 80bbca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80bbca4:	2b00      	cmp	r3, #0
 80bbca6:	d103      	bne.n	80bbcb0 <vl53l5_check_data_ready+0x2e>
 80bbca8:	f06f 0303 	mvn.w	r3, #3
 80bbcac:	60fb      	str	r3, [r7, #12]
 80bbcae:	e02c      	b.n	80bbd0a <vl53l5_check_data_ready+0x88>
 80bbcb0:	687b      	ldr	r3, [r7, #4]
 80bbcb2:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 80bbcb6:	2b00      	cmp	r3, #0
 80bbcb8:	d001      	beq.n	80bbcbe <vl53l5_check_data_ready+0x3c>
 80bbcba:	2300      	movs	r3, #0
 80bbcbc:	e001      	b.n	80bbcc2 <vl53l5_check_data_ready+0x40>
 80bbcbe:	f06f 0362 	mvn.w	r3, #98	; 0x62
 80bbcc2:	60fb      	str	r3, [r7, #12]
 80bbcc4:	68fb      	ldr	r3, [r7, #12]
 80bbcc6:	2b00      	cmp	r3, #0
 80bbcc8:	db1c      	blt.n	80bbd04 <vl53l5_check_data_ready+0x82>
 80bbcca:	687b      	ldr	r3, [r7, #4]
 80bbccc:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 80bbcd0:	72fb      	strb	r3, [r7, #11]
 80bbcd2:	6878      	ldr	r0, [r7, #4]
 80bbcd4:	f001 fed6 	bl	80bda84 <vl53l5_dci_get_device_info>
 80bbcd8:	60f8      	str	r0, [r7, #12]
 80bbcda:	68fb      	ldr	r3, [r7, #12]
 80bbcdc:	2b00      	cmp	r3, #0
 80bbcde:	db0b      	blt.n	80bbcf8 <vl53l5_check_data_ready+0x76>
 80bbce0:	7af9      	ldrb	r1, [r7, #11]
 80bbce2:	2301      	movs	r3, #1
 80bbce4:	2201      	movs	r2, #1
 80bbce6:	6878      	ldr	r0, [r7, #4]
 80bbce8:	f001 fef3 	bl	80bdad2 <vl53l5_dci_check_device_info>
 80bbcec:	60f8      	str	r0, [r7, #12]
 80bbcee:	68fb      	ldr	r3, [r7, #12]
 80bbcf0:	f113 0f3a 	cmn.w	r3, #58	; 0x3a
 80bbcf4:	d008      	beq.n	80bbd08 <vl53l5_check_data_ready+0x86>
 80bbcf6:	e000      	b.n	80bbcfa <vl53l5_check_data_ready+0x78>
 80bbcf8:	bf00      	nop
 80bbcfa:	687b      	ldr	r3, [r7, #4]
 80bbcfc:	7afa      	ldrb	r2, [r7, #11]
 80bbcfe:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
 80bbd02:	e002      	b.n	80bbd0a <vl53l5_check_data_ready+0x88>
 80bbd04:	bf00      	nop
 80bbd06:	e000      	b.n	80bbd0a <vl53l5_check_data_ready+0x88>
 80bbd08:	bf00      	nop
 80bbd0a:	68fb      	ldr	r3, [r7, #12]
 80bbd0c:	f113 0f3a 	cmn.w	r3, #58	; 0x3a
 80bbd10:	d003      	beq.n	80bbd1a <vl53l5_check_data_ready+0x98>
 80bbd12:	2b00      	cmp	r3, #0
 80bbd14:	d001      	beq.n	80bbd1a <vl53l5_check_data_ready+0x98>
 80bbd16:	f113 0f59 	cmn.w	r3, #89	; 0x59
 80bbd1a:	bf00      	nop
 80bbd1c:	68fb      	ldr	r3, [r7, #12]
 80bbd1e:	4618      	mov	r0, r3
 80bbd20:	3710      	adds	r7, #16
 80bbd22:	46bd      	mov	sp, r7
 80bbd24:	bd80      	pop	{r7, pc}

080bbd26 <vl53l5_get_range_data>:
 80bbd26:	b580      	push	{r7, lr}
 80bbd28:	b084      	sub	sp, #16
 80bbd2a:	af00      	add	r7, sp, #0
 80bbd2c:	6078      	str	r0, [r7, #4]
 80bbd2e:	2300      	movs	r3, #0
 80bbd30:	60fb      	str	r3, [r7, #12]
 80bbd32:	687b      	ldr	r3, [r7, #4]
 80bbd34:	2b00      	cmp	r3, #0
 80bbd36:	d103      	bne.n	80bbd40 <vl53l5_get_range_data+0x1a>
 80bbd38:	f06f 0303 	mvn.w	r3, #3
 80bbd3c:	60fb      	str	r3, [r7, #12]
 80bbd3e:	e01a      	b.n	80bbd76 <vl53l5_get_range_data+0x50>
 80bbd40:	687b      	ldr	r3, [r7, #4]
 80bbd42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80bbd44:	2b00      	cmp	r3, #0
 80bbd46:	d103      	bne.n	80bbd50 <vl53l5_get_range_data+0x2a>
 80bbd48:	f06f 0303 	mvn.w	r3, #3
 80bbd4c:	60fb      	str	r3, [r7, #12]
 80bbd4e:	e012      	b.n	80bbd76 <vl53l5_get_range_data+0x50>
 80bbd50:	687b      	ldr	r3, [r7, #4]
 80bbd52:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 80bbd56:	2b00      	cmp	r3, #0
 80bbd58:	d001      	beq.n	80bbd5e <vl53l5_get_range_data+0x38>
 80bbd5a:	2300      	movs	r3, #0
 80bbd5c:	e001      	b.n	80bbd62 <vl53l5_get_range_data+0x3c>
 80bbd5e:	f06f 0362 	mvn.w	r3, #98	; 0x62
 80bbd62:	60fb      	str	r3, [r7, #12]
 80bbd64:	68fb      	ldr	r3, [r7, #12]
 80bbd66:	2b00      	cmp	r3, #0
 80bbd68:	db04      	blt.n	80bbd74 <vl53l5_get_range_data+0x4e>
 80bbd6a:	6878      	ldr	r0, [r7, #4]
 80bbd6c:	f001 fe38 	bl	80bd9e0 <vl53l5_dci_read_range>
 80bbd70:	60f8      	str	r0, [r7, #12]
 80bbd72:	e000      	b.n	80bbd76 <vl53l5_get_range_data+0x50>
 80bbd74:	bf00      	nop
 80bbd76:	68fb      	ldr	r3, [r7, #12]
 80bbd78:	4618      	mov	r0, r3
 80bbd7a:	3710      	adds	r7, #16
 80bbd7c:	46bd      	mov	sp, r7
 80bbd7e:	bd80      	pop	{r7, pc}

080bbd80 <_test_end_block>:
 80bbd80:	b480      	push	{r7}
 80bbd82:	b087      	sub	sp, #28
 80bbd84:	af00      	add	r7, sp, #0
 80bbd86:	6078      	str	r0, [r7, #4]
 80bbd88:	2300      	movs	r3, #0
 80bbd8a:	613b      	str	r3, [r7, #16]
 80bbd8c:	2300      	movs	r3, #0
 80bbd8e:	617b      	str	r3, [r7, #20]
 80bbd90:	2308      	movs	r3, #8
 80bbd92:	60fb      	str	r3, [r7, #12]
 80bbd94:	687b      	ldr	r3, [r7, #4]
 80bbd96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80bbd98:	613b      	str	r3, [r7, #16]
 80bbd9a:	693a      	ldr	r2, [r7, #16]
 80bbd9c:	68fb      	ldr	r3, [r7, #12]
 80bbd9e:	4413      	add	r3, r2
 80bbda0:	781b      	ldrb	r3, [r3, #0]
 80bbda2:	f003 030f 	and.w	r3, r3, #15
 80bbda6:	2b0f      	cmp	r3, #15
 80bbda8:	d002      	beq.n	80bbdb0 <_test_end_block+0x30>
 80bbdaa:	f06f 0350 	mvn.w	r3, #80	; 0x50
 80bbdae:	617b      	str	r3, [r7, #20]
 80bbdb0:	697b      	ldr	r3, [r7, #20]
 80bbdb2:	4618      	mov	r0, r3
 80bbdb4:	371c      	adds	r7, #28
 80bbdb6:	46bd      	mov	sp, r7
 80bbdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80bbdbc:	4770      	bx	lr
	...

080bbdc0 <vl53l5_test_map_version>:
 80bbdc0:	b580      	push	{r7, lr}
 80bbdc2:	b086      	sub	sp, #24
 80bbdc4:	af00      	add	r7, sp, #0
 80bbdc6:	6078      	str	r0, [r7, #4]
 80bbdc8:	2300      	movs	r3, #0
 80bbdca:	617b      	str	r3, [r7, #20]
 80bbdcc:	2300      	movs	r3, #0
 80bbdce:	613b      	str	r3, [r7, #16]
 80bbdd0:	2300      	movs	r3, #0
 80bbdd2:	81fb      	strh	r3, [r7, #14]
 80bbdd4:	2300      	movs	r3, #0
 80bbdd6:	81bb      	strh	r3, [r7, #12]
 80bbdd8:	2300      	movs	r3, #0
 80bbdda:	60bb      	str	r3, [r7, #8]
 80bbddc:	687b      	ldr	r3, [r7, #4]
 80bbdde:	2b00      	cmp	r3, #0
 80bbde0:	d103      	bne.n	80bbdea <vl53l5_test_map_version+0x2a>
 80bbde2:	f06f 0303 	mvn.w	r3, #3
 80bbde6:	617b      	str	r3, [r7, #20]
 80bbde8:	e034      	b.n	80bbe54 <vl53l5_test_map_version+0x94>
 80bbdea:	687b      	ldr	r3, [r7, #4]
 80bbdec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80bbdee:	2b00      	cmp	r3, #0
 80bbdf0:	d103      	bne.n	80bbdfa <vl53l5_test_map_version+0x3a>
 80bbdf2:	f06f 0303 	mvn.w	r3, #3
 80bbdf6:	617b      	str	r3, [r7, #20]
 80bbdf8:	e02c      	b.n	80bbe54 <vl53l5_test_map_version+0x94>
 80bbdfa:	687b      	ldr	r3, [r7, #4]
 80bbdfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80bbdfe:	613b      	str	r3, [r7, #16]
 80bbe00:	6939      	ldr	r1, [r7, #16]
 80bbe02:	2004      	movs	r0, #4
 80bbe04:	f002 f850 	bl	80bdea8 <vl53l5_decode_uint32_t>
 80bbe08:	60b8      	str	r0, [r7, #8]
 80bbe0a:	68bb      	ldr	r3, [r7, #8]
 80bbe0c:	4a14      	ldr	r2, [pc, #80]	; (80bbe60 <vl53l5_test_map_version+0xa0>)
 80bbe0e:	4293      	cmp	r3, r2
 80bbe10:	d003      	beq.n	80bbe1a <vl53l5_test_map_version+0x5a>
 80bbe12:	f06f 0348 	mvn.w	r3, #72	; 0x48
 80bbe16:	617b      	str	r3, [r7, #20]
 80bbe18:	e01c      	b.n	80bbe54 <vl53l5_test_map_version+0x94>
 80bbe1a:	693b      	ldr	r3, [r7, #16]
 80bbe1c:	3304      	adds	r3, #4
 80bbe1e:	613b      	str	r3, [r7, #16]
 80bbe20:	6939      	ldr	r1, [r7, #16]
 80bbe22:	2002      	movs	r0, #2
 80bbe24:	f001 ffa6 	bl	80bdd74 <vl53l5_decode_uint16_t>
 80bbe28:	4603      	mov	r3, r0
 80bbe2a:	81fb      	strh	r3, [r7, #14]
 80bbe2c:	693b      	ldr	r3, [r7, #16]
 80bbe2e:	3302      	adds	r3, #2
 80bbe30:	613b      	str	r3, [r7, #16]
 80bbe32:	6939      	ldr	r1, [r7, #16]
 80bbe34:	2002      	movs	r0, #2
 80bbe36:	f001 ff9d 	bl	80bdd74 <vl53l5_decode_uint16_t>
 80bbe3a:	4603      	mov	r3, r0
 80bbe3c:	81bb      	strh	r3, [r7, #12]
 80bbe3e:	89fb      	ldrh	r3, [r7, #14]
 80bbe40:	2b0a      	cmp	r3, #10
 80bbe42:	d102      	bne.n	80bbe4a <vl53l5_test_map_version+0x8a>
 80bbe44:	89bb      	ldrh	r3, [r7, #12]
 80bbe46:	2b05      	cmp	r3, #5
 80bbe48:	d003      	beq.n	80bbe52 <vl53l5_test_map_version+0x92>
 80bbe4a:	f06f 034d 	mvn.w	r3, #77	; 0x4d
 80bbe4e:	617b      	str	r3, [r7, #20]
 80bbe50:	e000      	b.n	80bbe54 <vl53l5_test_map_version+0x94>
 80bbe52:	bf00      	nop
 80bbe54:	697b      	ldr	r3, [r7, #20]
 80bbe56:	4618      	mov	r0, r3
 80bbe58:	3718      	adds	r7, #24
 80bbe5a:	46bd      	mov	sp, r7
 80bbe5c:	bd80      	pop	{r7, pc}
 80bbe5e:	bf00      	nop
 80bbe60:	54000040 	.word	0x54000040

080bbe64 <vl53l5_check_map_version>:
 80bbe64:	b580      	push	{r7, lr}
 80bbe66:	b084      	sub	sp, #16
 80bbe68:	af00      	add	r7, sp, #0
 80bbe6a:	6078      	str	r0, [r7, #4]
 80bbe6c:	2300      	movs	r3, #0
 80bbe6e:	60fb      	str	r3, [r7, #12]
 80bbe70:	4b1b      	ldr	r3, [pc, #108]	; (80bbee0 <vl53l5_check_map_version+0x7c>)
 80bbe72:	60bb      	str	r3, [r7, #8]
 80bbe74:	687b      	ldr	r3, [r7, #4]
 80bbe76:	2200      	movs	r2, #0
 80bbe78:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 80bbe7c:	f107 0108 	add.w	r1, r7, #8
 80bbe80:	2300      	movs	r3, #0
 80bbe82:	2201      	movs	r2, #1
 80bbe84:	6878      	ldr	r0, [r7, #4]
 80bbe86:	f000 f82d 	bl	80bbee4 <vl53l5_encode_block_headers>
 80bbe8a:	60f8      	str	r0, [r7, #12]
 80bbe8c:	68fb      	ldr	r3, [r7, #12]
 80bbe8e:	2b00      	cmp	r3, #0
 80bbe90:	d11a      	bne.n	80bbec8 <vl53l5_check_map_version+0x64>
 80bbe92:	2102      	movs	r1, #2
 80bbe94:	6878      	ldr	r0, [r7, #4]
 80bbe96:	f000 f8a7 	bl	80bbfe8 <vl53l5_execute_command>
 80bbe9a:	60f8      	str	r0, [r7, #12]
 80bbe9c:	68fb      	ldr	r3, [r7, #12]
 80bbe9e:	2b00      	cmp	r3, #0
 80bbea0:	d114      	bne.n	80bbecc <vl53l5_check_map_version+0x68>
 80bbea2:	6878      	ldr	r0, [r7, #4]
 80bbea4:	f7ff ff6c 	bl	80bbd80 <_test_end_block>
 80bbea8:	60f8      	str	r0, [r7, #12]
 80bbeaa:	68fb      	ldr	r3, [r7, #12]
 80bbeac:	2b00      	cmp	r3, #0
 80bbeae:	d10f      	bne.n	80bbed0 <vl53l5_check_map_version+0x6c>
 80bbeb0:	6878      	ldr	r0, [r7, #4]
 80bbeb2:	f7ff ff85 	bl	80bbdc0 <vl53l5_test_map_version>
 80bbeb6:	60f8      	str	r0, [r7, #12]
 80bbeb8:	68fb      	ldr	r3, [r7, #12]
 80bbeba:	2b00      	cmp	r3, #0
 80bbebc:	d10a      	bne.n	80bbed4 <vl53l5_check_map_version+0x70>
 80bbebe:	687b      	ldr	r3, [r7, #4]
 80bbec0:	2201      	movs	r2, #1
 80bbec2:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 80bbec6:	e006      	b.n	80bbed6 <vl53l5_check_map_version+0x72>
 80bbec8:	bf00      	nop
 80bbeca:	e004      	b.n	80bbed6 <vl53l5_check_map_version+0x72>
 80bbecc:	bf00      	nop
 80bbece:	e002      	b.n	80bbed6 <vl53l5_check_map_version+0x72>
 80bbed0:	bf00      	nop
 80bbed2:	e000      	b.n	80bbed6 <vl53l5_check_map_version+0x72>
 80bbed4:	bf00      	nop
 80bbed6:	68fb      	ldr	r3, [r7, #12]
 80bbed8:	4618      	mov	r0, r3
 80bbeda:	3710      	adds	r7, #16
 80bbedc:	46bd      	mov	sp, r7
 80bbede:	bd80      	pop	{r7, pc}
 80bbee0:	54000040 	.word	0x54000040

080bbee4 <vl53l5_encode_block_headers>:
 80bbee4:	b580      	push	{r7, lr}
 80bbee6:	b088      	sub	sp, #32
 80bbee8:	af00      	add	r7, sp, #0
 80bbeea:	60f8      	str	r0, [r7, #12]
 80bbeec:	60b9      	str	r1, [r7, #8]
 80bbeee:	607a      	str	r2, [r7, #4]
 80bbef0:	70fb      	strb	r3, [r7, #3]
 80bbef2:	2300      	movs	r3, #0
 80bbef4:	61fb      	str	r3, [r7, #28]
 80bbef6:	687b      	ldr	r3, [r7, #4]
 80bbef8:	61bb      	str	r3, [r7, #24]
 80bbefa:	2300      	movs	r3, #0
 80bbefc:	617b      	str	r3, [r7, #20]
 80bbefe:	68fb      	ldr	r3, [r7, #12]
 80bbf00:	2b00      	cmp	r3, #0
 80bbf02:	d103      	bne.n	80bbf0c <vl53l5_encode_block_headers+0x28>
 80bbf04:	f06f 0303 	mvn.w	r3, #3
 80bbf08:	61fb      	str	r3, [r7, #28]
 80bbf0a:	e065      	b.n	80bbfd8 <vl53l5_encode_block_headers+0xf4>
 80bbf0c:	68bb      	ldr	r3, [r7, #8]
 80bbf0e:	2b00      	cmp	r3, #0
 80bbf10:	d103      	bne.n	80bbf1a <vl53l5_encode_block_headers+0x36>
 80bbf12:	f06f 0303 	mvn.w	r3, #3
 80bbf16:	61fb      	str	r3, [r7, #28]
 80bbf18:	e05e      	b.n	80bbfd8 <vl53l5_encode_block_headers+0xf4>
 80bbf1a:	687b      	ldr	r3, [r7, #4]
 80bbf1c:	2b00      	cmp	r3, #0
 80bbf1e:	d103      	bne.n	80bbf28 <vl53l5_encode_block_headers+0x44>
 80bbf20:	f06f 0303 	mvn.w	r3, #3
 80bbf24:	61fb      	str	r3, [r7, #28]
 80bbf26:	e057      	b.n	80bbfd8 <vl53l5_encode_block_headers+0xf4>
 80bbf28:	68fb      	ldr	r3, [r7, #12]
 80bbf2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80bbf2c:	2b00      	cmp	r3, #0
 80bbf2e:	d103      	bne.n	80bbf38 <vl53l5_encode_block_headers+0x54>
 80bbf30:	f06f 0303 	mvn.w	r3, #3
 80bbf34:	61fb      	str	r3, [r7, #28]
 80bbf36:	e04f      	b.n	80bbfd8 <vl53l5_encode_block_headers+0xf4>
 80bbf38:	78fb      	ldrb	r3, [r7, #3]
 80bbf3a:	2b00      	cmp	r3, #0
 80bbf3c:	d002      	beq.n	80bbf44 <vl53l5_encode_block_headers+0x60>
 80bbf3e:	69bb      	ldr	r3, [r7, #24]
 80bbf40:	3301      	adds	r3, #1
 80bbf42:	61bb      	str	r3, [r7, #24]
 80bbf44:	69bb      	ldr	r3, [r7, #24]
 80bbf46:	009a      	lsls	r2, r3, #2
 80bbf48:	68fb      	ldr	r3, [r7, #12]
 80bbf4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80bbf4c:	429a      	cmp	r2, r3
 80bbf4e:	d903      	bls.n	80bbf58 <vl53l5_encode_block_headers+0x74>
 80bbf50:	f06f 035b 	mvn.w	r3, #91	; 0x5b
 80bbf54:	61fb      	str	r3, [r7, #28]
 80bbf56:	e03f      	b.n	80bbfd8 <vl53l5_encode_block_headers+0xf4>
 80bbf58:	68fb      	ldr	r3, [r7, #12]
 80bbf5a:	2200      	movs	r2, #0
 80bbf5c:	631a      	str	r2, [r3, #48]	; 0x30
 80bbf5e:	78fb      	ldrb	r3, [r7, #3]
 80bbf60:	2b00      	cmp	r3, #0
 80bbf62:	d00e      	beq.n	80bbf82 <vl53l5_encode_block_headers+0x9e>
 80bbf64:	68fb      	ldr	r3, [r7, #12]
 80bbf66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80bbf68:	68fb      	ldr	r3, [r7, #12]
 80bbf6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80bbf6c:	4413      	add	r3, r2
 80bbf6e:	461a      	mov	r2, r3
 80bbf70:	2104      	movs	r1, #4
 80bbf72:	481c      	ldr	r0, [pc, #112]	; (80bbfe4 <vl53l5_encode_block_headers+0x100>)
 80bbf74:	f001 ff72 	bl	80bde5c <vl53l5_encode_uint32_t>
 80bbf78:	68fb      	ldr	r3, [r7, #12]
 80bbf7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80bbf7c:	1d1a      	adds	r2, r3, #4
 80bbf7e:	68fb      	ldr	r3, [r7, #12]
 80bbf80:	631a      	str	r2, [r3, #48]	; 0x30
 80bbf82:	2300      	movs	r3, #0
 80bbf84:	617b      	str	r3, [r7, #20]
 80bbf86:	e022      	b.n	80bbfce <vl53l5_encode_block_headers+0xea>
 80bbf88:	697b      	ldr	r3, [r7, #20]
 80bbf8a:	009b      	lsls	r3, r3, #2
 80bbf8c:	68ba      	ldr	r2, [r7, #8]
 80bbf8e:	4413      	add	r3, r2
 80bbf90:	681b      	ldr	r3, [r3, #0]
 80bbf92:	4a14      	ldr	r2, [pc, #80]	; (80bbfe4 <vl53l5_encode_block_headers+0x100>)
 80bbf94:	4293      	cmp	r3, r2
 80bbf96:	d102      	bne.n	80bbf9e <vl53l5_encode_block_headers+0xba>
 80bbf98:	78fb      	ldrb	r3, [r7, #3]
 80bbf9a:	2b00      	cmp	r3, #0
 80bbf9c:	d113      	bne.n	80bbfc6 <vl53l5_encode_block_headers+0xe2>
 80bbf9e:	697b      	ldr	r3, [r7, #20]
 80bbfa0:	009b      	lsls	r3, r3, #2
 80bbfa2:	68ba      	ldr	r2, [r7, #8]
 80bbfa4:	4413      	add	r3, r2
 80bbfa6:	6818      	ldr	r0, [r3, #0]
 80bbfa8:	68fb      	ldr	r3, [r7, #12]
 80bbfaa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80bbfac:	68fb      	ldr	r3, [r7, #12]
 80bbfae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80bbfb0:	4413      	add	r3, r2
 80bbfb2:	461a      	mov	r2, r3
 80bbfb4:	2104      	movs	r1, #4
 80bbfb6:	f001 ff51 	bl	80bde5c <vl53l5_encode_uint32_t>
 80bbfba:	68fb      	ldr	r3, [r7, #12]
 80bbfbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80bbfbe:	1d1a      	adds	r2, r3, #4
 80bbfc0:	68fb      	ldr	r3, [r7, #12]
 80bbfc2:	631a      	str	r2, [r3, #48]	; 0x30
 80bbfc4:	e000      	b.n	80bbfc8 <vl53l5_encode_block_headers+0xe4>
 80bbfc6:	bf00      	nop
 80bbfc8:	697b      	ldr	r3, [r7, #20]
 80bbfca:	3301      	adds	r3, #1
 80bbfcc:	617b      	str	r3, [r7, #20]
 80bbfce:	697a      	ldr	r2, [r7, #20]
 80bbfd0:	687b      	ldr	r3, [r7, #4]
 80bbfd2:	429a      	cmp	r2, r3
 80bbfd4:	d3d8      	bcc.n	80bbf88 <vl53l5_encode_block_headers+0xa4>
 80bbfd6:	bf00      	nop
 80bbfd8:	69fb      	ldr	r3, [r7, #28]
 80bbfda:	4618      	mov	r0, r3
 80bbfdc:	3720      	adds	r7, #32
 80bbfde:	46bd      	mov	sp, r7
 80bbfe0:	bd80      	pop	{r7, pc}
 80bbfe2:	bf00      	nop
 80bbfe4:	54000040 	.word	0x54000040

080bbfe8 <vl53l5_execute_command>:
 80bbfe8:	b580      	push	{r7, lr}
 80bbfea:	b084      	sub	sp, #16
 80bbfec:	af00      	add	r7, sp, #0
 80bbfee:	6078      	str	r0, [r7, #4]
 80bbff0:	460b      	mov	r3, r1
 80bbff2:	70fb      	strb	r3, [r7, #3]
 80bbff4:	2300      	movs	r3, #0
 80bbff6:	60fb      	str	r3, [r7, #12]
 80bbff8:	2300      	movs	r3, #0
 80bbffa:	72fb      	strb	r3, [r7, #11]
 80bbffc:	687b      	ldr	r3, [r7, #4]
 80bbffe:	2b00      	cmp	r3, #0
 80bc000:	d103      	bne.n	80bc00a <vl53l5_execute_command+0x22>
 80bc002:	f06f 0303 	mvn.w	r3, #3
 80bc006:	60fb      	str	r3, [r7, #12]
 80bc008:	e033      	b.n	80bc072 <vl53l5_execute_command+0x8a>
 80bc00a:	687b      	ldr	r3, [r7, #4]
 80bc00c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80bc00e:	2b00      	cmp	r3, #0
 80bc010:	d103      	bne.n	80bc01a <vl53l5_execute_command+0x32>
 80bc012:	f06f 0303 	mvn.w	r3, #3
 80bc016:	60fb      	str	r3, [r7, #12]
 80bc018:	e02b      	b.n	80bc072 <vl53l5_execute_command+0x8a>
 80bc01a:	687b      	ldr	r3, [r7, #4]
 80bc01c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80bc01e:	1c5a      	adds	r2, r3, #1
 80bc020:	687b      	ldr	r3, [r7, #4]
 80bc022:	635a      	str	r2, [r3, #52]	; 0x34
 80bc024:	687b      	ldr	r3, [r7, #4]
 80bc026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80bc028:	72fb      	strb	r3, [r7, #11]
 80bc02a:	7afa      	ldrb	r2, [r7, #11]
 80bc02c:	78fb      	ldrb	r3, [r7, #3]
 80bc02e:	4619      	mov	r1, r3
 80bc030:	6878      	ldr	r0, [r7, #4]
 80bc032:	f001 f821 	bl	80bd078 <vl53l5_dci_write_command>
 80bc036:	60f8      	str	r0, [r7, #12]
 80bc038:	68fb      	ldr	r3, [r7, #12]
 80bc03a:	2b00      	cmp	r3, #0
 80bc03c:	d114      	bne.n	80bc068 <vl53l5_execute_command+0x80>
 80bc03e:	7afb      	ldrb	r3, [r7, #11]
 80bc040:	2200      	movs	r2, #0
 80bc042:	4619      	mov	r1, r3
 80bc044:	6878      	ldr	r0, [r7, #4]
 80bc046:	f001 f8c6 	bl	80bd1d6 <vl53l5_dci_poll_command_status>
 80bc04a:	60f8      	str	r0, [r7, #12]
 80bc04c:	68fb      	ldr	r3, [r7, #12]
 80bc04e:	2b00      	cmp	r3, #0
 80bc050:	d10c      	bne.n	80bc06c <vl53l5_execute_command+0x84>
 80bc052:	78fb      	ldrb	r3, [r7, #3]
 80bc054:	2b02      	cmp	r3, #2
 80bc056:	d002      	beq.n	80bc05e <vl53l5_execute_command+0x76>
 80bc058:	78fb      	ldrb	r3, [r7, #3]
 80bc05a:	2b03      	cmp	r3, #3
 80bc05c:	d108      	bne.n	80bc070 <vl53l5_execute_command+0x88>
 80bc05e:	6878      	ldr	r0, [r7, #4]
 80bc060:	f001 f88b 	bl	80bd17a <vl53l5_dci_read_command>
 80bc064:	60f8      	str	r0, [r7, #12]
 80bc066:	e004      	b.n	80bc072 <vl53l5_execute_command+0x8a>
 80bc068:	bf00      	nop
 80bc06a:	e002      	b.n	80bc072 <vl53l5_execute_command+0x8a>
 80bc06c:	bf00      	nop
 80bc06e:	e000      	b.n	80bc072 <vl53l5_execute_command+0x8a>
 80bc070:	bf00      	nop
 80bc072:	68fb      	ldr	r3, [r7, #12]
 80bc074:	4618      	mov	r0, r3
 80bc076:	3710      	adds	r7, #16
 80bc078:	46bd      	mov	sp, r7
 80bc07a:	bd80      	pop	{r7, pc}

080bc07c <_get_status_struct>:
 80bc07c:	b580      	push	{r7, lr}
 80bc07e:	b088      	sub	sp, #32
 80bc080:	af00      	add	r7, sp, #0
 80bc082:	60f8      	str	r0, [r7, #12]
 80bc084:	60b9      	str	r1, [r7, #8]
 80bc086:	607a      	str	r2, [r7, #4]
 80bc088:	2300      	movs	r3, #0
 80bc08a:	61fb      	str	r3, [r7, #28]
 80bc08c:	2300      	movs	r3, #0
 80bc08e:	61bb      	str	r3, [r7, #24]
 80bc090:	2300      	movs	r3, #0
 80bc092:	617b      	str	r3, [r7, #20]
 80bc094:	68fb      	ldr	r3, [r7, #12]
 80bc096:	2b00      	cmp	r3, #0
 80bc098:	d103      	bne.n	80bc0a2 <_get_status_struct+0x26>
 80bc09a:	f06f 0303 	mvn.w	r3, #3
 80bc09e:	61fb      	str	r3, [r7, #28]
 80bc0a0:	e085      	b.n	80bc1ae <_get_status_struct+0x132>
 80bc0a2:	68bb      	ldr	r3, [r7, #8]
 80bc0a4:	2b00      	cmp	r3, #0
 80bc0a6:	d103      	bne.n	80bc0b0 <_get_status_struct+0x34>
 80bc0a8:	f06f 0303 	mvn.w	r3, #3
 80bc0ac:	61fb      	str	r3, [r7, #28]
 80bc0ae:	e07e      	b.n	80bc1ae <_get_status_struct+0x132>
 80bc0b0:	68fb      	ldr	r3, [r7, #12]
 80bc0b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80bc0b4:	2b00      	cmp	r3, #0
 80bc0b6:	d103      	bne.n	80bc0c0 <_get_status_struct+0x44>
 80bc0b8:	f06f 0303 	mvn.w	r3, #3
 80bc0bc:	61fb      	str	r3, [r7, #28]
 80bc0be:	e076      	b.n	80bc1ae <_get_status_struct+0x132>
 80bc0c0:	68fb      	ldr	r3, [r7, #12]
 80bc0c2:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 80bc0c6:	2b00      	cmp	r3, #0
 80bc0c8:	d001      	beq.n	80bc0ce <_get_status_struct+0x52>
 80bc0ca:	2300      	movs	r3, #0
 80bc0cc:	e001      	b.n	80bc0d2 <_get_status_struct+0x56>
 80bc0ce:	f06f 0362 	mvn.w	r3, #98	; 0x62
 80bc0d2:	61fb      	str	r3, [r7, #28]
 80bc0d4:	69fb      	ldr	r3, [r7, #28]
 80bc0d6:	2b00      	cmp	r3, #0
 80bc0d8:	db64      	blt.n	80bc1a4 <_get_status_struct+0x128>
 80bc0da:	1d39      	adds	r1, r7, #4
 80bc0dc:	2300      	movs	r3, #0
 80bc0de:	2201      	movs	r2, #1
 80bc0e0:	68f8      	ldr	r0, [r7, #12]
 80bc0e2:	f7ff feff 	bl	80bbee4 <vl53l5_encode_block_headers>
 80bc0e6:	61f8      	str	r0, [r7, #28]
 80bc0e8:	69fb      	ldr	r3, [r7, #28]
 80bc0ea:	2b00      	cmp	r3, #0
 80bc0ec:	d15c      	bne.n	80bc1a8 <_get_status_struct+0x12c>
 80bc0ee:	2102      	movs	r1, #2
 80bc0f0:	68f8      	ldr	r0, [r7, #12]
 80bc0f2:	f7ff ff79 	bl	80bbfe8 <vl53l5_execute_command>
 80bc0f6:	61f8      	str	r0, [r7, #28]
 80bc0f8:	69fb      	ldr	r3, [r7, #28]
 80bc0fa:	2b00      	cmp	r3, #0
 80bc0fc:	d156      	bne.n	80bc1ac <_get_status_struct+0x130>
 80bc0fe:	68fb      	ldr	r3, [r7, #12]
 80bc100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80bc102:	617b      	str	r3, [r7, #20]
 80bc104:	6979      	ldr	r1, [r7, #20]
 80bc106:	2004      	movs	r0, #4
 80bc108:	f001 fece 	bl	80bdea8 <vl53l5_decode_uint32_t>
 80bc10c:	61b8      	str	r0, [r7, #24]
 80bc10e:	687b      	ldr	r3, [r7, #4]
 80bc110:	69ba      	ldr	r2, [r7, #24]
 80bc112:	429a      	cmp	r2, r3
 80bc114:	d003      	beq.n	80bc11e <_get_status_struct+0xa2>
 80bc116:	f06f 0347 	mvn.w	r3, #71	; 0x47
 80bc11a:	61fb      	str	r3, [r7, #28]
 80bc11c:	e047      	b.n	80bc1ae <_get_status_struct+0x132>
 80bc11e:	697b      	ldr	r3, [r7, #20]
 80bc120:	3304      	adds	r3, #4
 80bc122:	617b      	str	r3, [r7, #20]
 80bc124:	6979      	ldr	r1, [r7, #20]
 80bc126:	2002      	movs	r0, #2
 80bc128:	f001 fe44 	bl	80bddb4 <vl53l5_decode_int16_t>
 80bc12c:	4603      	mov	r3, r0
 80bc12e:	461a      	mov	r2, r3
 80bc130:	68bb      	ldr	r3, [r7, #8]
 80bc132:	801a      	strh	r2, [r3, #0]
 80bc134:	697b      	ldr	r3, [r7, #20]
 80bc136:	3302      	adds	r3, #2
 80bc138:	617b      	str	r3, [r7, #20]
 80bc13a:	6979      	ldr	r1, [r7, #20]
 80bc13c:	2002      	movs	r0, #2
 80bc13e:	f001 fe39 	bl	80bddb4 <vl53l5_decode_int16_t>
 80bc142:	4603      	mov	r3, r0
 80bc144:	461a      	mov	r2, r3
 80bc146:	68bb      	ldr	r3, [r7, #8]
 80bc148:	805a      	strh	r2, [r3, #2]
 80bc14a:	697b      	ldr	r3, [r7, #20]
 80bc14c:	3302      	adds	r3, #2
 80bc14e:	617b      	str	r3, [r7, #20]
 80bc150:	6979      	ldr	r1, [r7, #20]
 80bc152:	2002      	movs	r0, #2
 80bc154:	f001 fe2e 	bl	80bddb4 <vl53l5_decode_int16_t>
 80bc158:	4603      	mov	r3, r0
 80bc15a:	461a      	mov	r2, r3
 80bc15c:	68bb      	ldr	r3, [r7, #8]
 80bc15e:	809a      	strh	r2, [r3, #4]
 80bc160:	697b      	ldr	r3, [r7, #20]
 80bc162:	3302      	adds	r3, #2
 80bc164:	617b      	str	r3, [r7, #20]
 80bc166:	6979      	ldr	r1, [r7, #20]
 80bc168:	2002      	movs	r0, #2
 80bc16a:	f001 fe03 	bl	80bdd74 <vl53l5_decode_uint16_t>
 80bc16e:	4603      	mov	r3, r0
 80bc170:	461a      	mov	r2, r3
 80bc172:	68bb      	ldr	r3, [r7, #8]
 80bc174:	80da      	strh	r2, [r3, #6]
 80bc176:	697b      	ldr	r3, [r7, #20]
 80bc178:	3302      	adds	r3, #2
 80bc17a:	617b      	str	r3, [r7, #20]
 80bc17c:	6979      	ldr	r1, [r7, #20]
 80bc17e:	2002      	movs	r0, #2
 80bc180:	f001 fdf8 	bl	80bdd74 <vl53l5_decode_uint16_t>
 80bc184:	4603      	mov	r3, r0
 80bc186:	461a      	mov	r2, r3
 80bc188:	68bb      	ldr	r3, [r7, #8]
 80bc18a:	811a      	strh	r2, [r3, #8]
 80bc18c:	697b      	ldr	r3, [r7, #20]
 80bc18e:	3302      	adds	r3, #2
 80bc190:	617b      	str	r3, [r7, #20]
 80bc192:	6979      	ldr	r1, [r7, #20]
 80bc194:	2002      	movs	r0, #2
 80bc196:	f001 fded 	bl	80bdd74 <vl53l5_decode_uint16_t>
 80bc19a:	4603      	mov	r3, r0
 80bc19c:	461a      	mov	r2, r3
 80bc19e:	68bb      	ldr	r3, [r7, #8]
 80bc1a0:	815a      	strh	r2, [r3, #10]
 80bc1a2:	e004      	b.n	80bc1ae <_get_status_struct+0x132>
 80bc1a4:	bf00      	nop
 80bc1a6:	e002      	b.n	80bc1ae <_get_status_struct+0x132>
 80bc1a8:	bf00      	nop
 80bc1aa:	e000      	b.n	80bc1ae <_get_status_struct+0x132>
 80bc1ac:	bf00      	nop
 80bc1ae:	69fb      	ldr	r3, [r7, #28]
 80bc1b0:	4618      	mov	r0, r3
 80bc1b2:	3720      	adds	r7, #32
 80bc1b4:	46bd      	mov	sp, r7
 80bc1b6:	bd80      	pop	{r7, pc}

080bc1b8 <vl53l5_check_status_registers>:
 80bc1b8:	b580      	push	{r7, lr}
 80bc1ba:	b086      	sub	sp, #24
 80bc1bc:	af00      	add	r7, sp, #0
 80bc1be:	60f8      	str	r0, [r7, #12]
 80bc1c0:	60b9      	str	r1, [r7, #8]
 80bc1c2:	607a      	str	r2, [r7, #4]
 80bc1c4:	70fb      	strb	r3, [r7, #3]
 80bc1c6:	2300      	movs	r3, #0
 80bc1c8:	617b      	str	r3, [r7, #20]
 80bc1ca:	2300      	movs	r3, #0
 80bc1cc:	74fb      	strb	r3, [r7, #19]
 80bc1ce:	68fb      	ldr	r3, [r7, #12]
 80bc1d0:	2b00      	cmp	r3, #0
 80bc1d2:	d103      	bne.n	80bc1dc <vl53l5_check_status_registers+0x24>
 80bc1d4:	f06f 0303 	mvn.w	r3, #3
 80bc1d8:	617b      	str	r3, [r7, #20]
 80bc1da:	e08e      	b.n	80bc2fa <vl53l5_check_status_registers+0x142>
 80bc1dc:	68bb      	ldr	r3, [r7, #8]
 80bc1de:	2b00      	cmp	r3, #0
 80bc1e0:	d103      	bne.n	80bc1ea <vl53l5_check_status_registers+0x32>
 80bc1e2:	f06f 0303 	mvn.w	r3, #3
 80bc1e6:	617b      	str	r3, [r7, #20]
 80bc1e8:	e087      	b.n	80bc2fa <vl53l5_check_status_registers+0x142>
 80bc1ea:	687b      	ldr	r3, [r7, #4]
 80bc1ec:	2b00      	cmp	r3, #0
 80bc1ee:	d103      	bne.n	80bc1f8 <vl53l5_check_status_registers+0x40>
 80bc1f0:	f06f 0303 	mvn.w	r3, #3
 80bc1f4:	617b      	str	r3, [r7, #20]
 80bc1f6:	e080      	b.n	80bc2fa <vl53l5_check_status_registers+0x142>
 80bc1f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80bc1fc:	2b00      	cmp	r3, #0
 80bc1fe:	d00d      	beq.n	80bc21c <vl53l5_check_status_registers+0x64>
 80bc200:	2300      	movs	r3, #0
 80bc202:	74fb      	strb	r3, [r7, #19]
 80bc204:	f107 0213 	add.w	r2, r7, #19
 80bc208:	2301      	movs	r3, #1
 80bc20a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80bc20e:	68f8      	ldr	r0, [r7, #12]
 80bc210:	f002 fc51 	bl	80beab6 <vl53l5_write_multi>
 80bc214:	6178      	str	r0, [r7, #20]
 80bc216:	697b      	ldr	r3, [r7, #20]
 80bc218:	2b00      	cmp	r3, #0
 80bc21a:	db6b      	blt.n	80bc2f4 <vl53l5_check_status_registers+0x13c>
 80bc21c:	68ba      	ldr	r2, [r7, #8]
 80bc21e:	2301      	movs	r3, #1
 80bc220:	2106      	movs	r1, #6
 80bc222:	68f8      	ldr	r0, [r7, #12]
 80bc224:	f002 fc64 	bl	80beaf0 <vl53l5_read_multi>
 80bc228:	6178      	str	r0, [r7, #20]
 80bc22a:	697b      	ldr	r3, [r7, #20]
 80bc22c:	2b00      	cmp	r3, #0
 80bc22e:	db3f      	blt.n	80bc2b0 <vl53l5_check_status_registers+0xf8>
 80bc230:	68bb      	ldr	r3, [r7, #8]
 80bc232:	781b      	ldrb	r3, [r3, #0]
 80bc234:	f003 0308 	and.w	r3, r3, #8
 80bc238:	b2db      	uxtb	r3, r3
 80bc23a:	2b00      	cmp	r3, #0
 80bc23c:	d00a      	beq.n	80bc254 <vl53l5_check_status_registers+0x9c>
 80bc23e:	68bb      	ldr	r3, [r7, #8]
 80bc240:	781b      	ldrb	r3, [r3, #0]
 80bc242:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80bc246:	b2db      	uxtb	r3, r3
 80bc248:	2b00      	cmp	r3, #0
 80bc24a:	d103      	bne.n	80bc254 <vl53l5_check_status_registers+0x9c>
 80bc24c:	687b      	ldr	r3, [r7, #4]
 80bc24e:	2200      	movs	r2, #0
 80bc250:	701a      	strb	r2, [r3, #0]
 80bc252:	e032      	b.n	80bc2ba <vl53l5_check_status_registers+0x102>
 80bc254:	687a      	ldr	r2, [r7, #4]
 80bc256:	2301      	movs	r3, #1
 80bc258:	2107      	movs	r1, #7
 80bc25a:	68f8      	ldr	r0, [r7, #12]
 80bc25c:	f002 fc48 	bl	80beaf0 <vl53l5_read_multi>
 80bc260:	6178      	str	r0, [r7, #20]
 80bc262:	697b      	ldr	r3, [r7, #20]
 80bc264:	2b00      	cmp	r3, #0
 80bc266:	db25      	blt.n	80bc2b4 <vl53l5_check_status_registers+0xfc>
 80bc268:	68bb      	ldr	r3, [r7, #8]
 80bc26a:	781b      	ldrb	r3, [r3, #0]
 80bc26c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80bc270:	b2db      	uxtb	r3, r3
 80bc272:	2b00      	cmp	r3, #0
 80bc274:	d007      	beq.n	80bc286 <vl53l5_check_status_registers+0xce>
 80bc276:	687b      	ldr	r3, [r7, #4]
 80bc278:	781b      	ldrb	r3, [r3, #0]
 80bc27a:	2b00      	cmp	r3, #0
 80bc27c:	d103      	bne.n	80bc286 <vl53l5_check_status_registers+0xce>
 80bc27e:	f06f 0343 	mvn.w	r3, #67	; 0x43
 80bc282:	617b      	str	r3, [r7, #20]
 80bc284:	e019      	b.n	80bc2ba <vl53l5_check_status_registers+0x102>
 80bc286:	68bb      	ldr	r3, [r7, #8]
 80bc288:	781b      	ldrb	r3, [r3, #0]
 80bc28a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80bc28e:	b2db      	uxtb	r3, r3
 80bc290:	2b00      	cmp	r3, #0
 80bc292:	d111      	bne.n	80bc2b8 <vl53l5_check_status_registers+0x100>
 80bc294:	78fb      	ldrb	r3, [r7, #3]
 80bc296:	2b00      	cmp	r3, #0
 80bc298:	d00e      	beq.n	80bc2b8 <vl53l5_check_status_registers+0x100>
 80bc29a:	687b      	ldr	r3, [r7, #4]
 80bc29c:	781b      	ldrb	r3, [r3, #0]
 80bc29e:	f003 0308 	and.w	r3, r3, #8
 80bc2a2:	b2db      	uxtb	r3, r3
 80bc2a4:	2b00      	cmp	r3, #0
 80bc2a6:	d007      	beq.n	80bc2b8 <vl53l5_check_status_registers+0x100>
 80bc2a8:	687b      	ldr	r3, [r7, #4]
 80bc2aa:	2200      	movs	r2, #0
 80bc2ac:	701a      	strb	r2, [r3, #0]
 80bc2ae:	e004      	b.n	80bc2ba <vl53l5_check_status_registers+0x102>
 80bc2b0:	bf00      	nop
 80bc2b2:	e002      	b.n	80bc2ba <vl53l5_check_status_registers+0x102>
 80bc2b4:	bf00      	nop
 80bc2b6:	e000      	b.n	80bc2ba <vl53l5_check_status_registers+0x102>
 80bc2b8:	bf00      	nop
 80bc2ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80bc2be:	2b00      	cmp	r3, #0
 80bc2c0:	d01a      	beq.n	80bc2f8 <vl53l5_check_status_registers+0x140>
 80bc2c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80bc2c6:	74fb      	strb	r3, [r7, #19]
 80bc2c8:	697b      	ldr	r3, [r7, #20]
 80bc2ca:	2b00      	cmp	r3, #0
 80bc2cc:	da08      	bge.n	80bc2e0 <vl53l5_check_status_registers+0x128>
 80bc2ce:	f107 0213 	add.w	r2, r7, #19
 80bc2d2:	2301      	movs	r3, #1
 80bc2d4:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80bc2d8:	68f8      	ldr	r0, [r7, #12]
 80bc2da:	f002 fbec 	bl	80beab6 <vl53l5_write_multi>
 80bc2de:	e00c      	b.n	80bc2fa <vl53l5_check_status_registers+0x142>
 80bc2e0:	f107 0213 	add.w	r2, r7, #19
 80bc2e4:	2301      	movs	r3, #1
 80bc2e6:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80bc2ea:	68f8      	ldr	r0, [r7, #12]
 80bc2ec:	f002 fbe3 	bl	80beab6 <vl53l5_write_multi>
 80bc2f0:	6178      	str	r0, [r7, #20]
 80bc2f2:	e002      	b.n	80bc2fa <vl53l5_check_status_registers+0x142>
 80bc2f4:	bf00      	nop
 80bc2f6:	e000      	b.n	80bc2fa <vl53l5_check_status_registers+0x142>
 80bc2f8:	bf00      	nop
 80bc2fa:	697b      	ldr	r3, [r7, #20]
 80bc2fc:	2b00      	cmp	r3, #0
 80bc2fe:	da0b      	bge.n	80bc318 <vl53l5_check_status_registers+0x160>
 80bc300:	68bb      	ldr	r3, [r7, #8]
 80bc302:	2b00      	cmp	r3, #0
 80bc304:	d002      	beq.n	80bc30c <vl53l5_check_status_registers+0x154>
 80bc306:	68bb      	ldr	r3, [r7, #8]
 80bc308:	2200      	movs	r2, #0
 80bc30a:	701a      	strb	r2, [r3, #0]
 80bc30c:	687b      	ldr	r3, [r7, #4]
 80bc30e:	2b00      	cmp	r3, #0
 80bc310:	d002      	beq.n	80bc318 <vl53l5_check_status_registers+0x160>
 80bc312:	687b      	ldr	r3, [r7, #4]
 80bc314:	2200      	movs	r2, #0
 80bc316:	701a      	strb	r2, [r3, #0]
 80bc318:	697b      	ldr	r3, [r7, #20]
 80bc31a:	4618      	mov	r0, r3
 80bc31c:	3718      	adds	r7, #24
 80bc31e:	46bd      	mov	sp, r7
 80bc320:	bd80      	pop	{r7, pc}
	...

080bc324 <vl53l5_get_secondary_error_info>:
 80bc324:	b580      	push	{r7, lr}
 80bc326:	b084      	sub	sp, #16
 80bc328:	af00      	add	r7, sp, #0
 80bc32a:	6078      	str	r0, [r7, #4]
 80bc32c:	6039      	str	r1, [r7, #0]
 80bc32e:	2300      	movs	r3, #0
 80bc330:	60fb      	str	r3, [r7, #12]
 80bc332:	4a07      	ldr	r2, [pc, #28]	; (80bc350 <vl53l5_get_secondary_error_info+0x2c>)
 80bc334:	6839      	ldr	r1, [r7, #0]
 80bc336:	6878      	ldr	r0, [r7, #4]
 80bc338:	f7ff fea0 	bl	80bc07c <_get_status_struct>
 80bc33c:	60f8      	str	r0, [r7, #12]
 80bc33e:	68fb      	ldr	r3, [r7, #12]
 80bc340:	2b00      	cmp	r3, #0
 80bc342:	bf00      	nop
 80bc344:	68fb      	ldr	r3, [r7, #12]
 80bc346:	4618      	mov	r0, r3
 80bc348:	3710      	adds	r7, #16
 80bc34a:	46bd      	mov	sp, r7
 80bc34c:	bd80      	pop	{r7, pc}
 80bc34e:	bf00      	nop
 80bc350:	56b000c0 	.word	0x56b000c0

080bc354 <vl53l5_get_secondary_warning_info>:
 80bc354:	b580      	push	{r7, lr}
 80bc356:	b084      	sub	sp, #16
 80bc358:	af00      	add	r7, sp, #0
 80bc35a:	6078      	str	r0, [r7, #4]
 80bc35c:	6039      	str	r1, [r7, #0]
 80bc35e:	2300      	movs	r3, #0
 80bc360:	60fb      	str	r3, [r7, #12]
 80bc362:	4a07      	ldr	r2, [pc, #28]	; (80bc380 <vl53l5_get_secondary_warning_info+0x2c>)
 80bc364:	6839      	ldr	r1, [r7, #0]
 80bc366:	6878      	ldr	r0, [r7, #4]
 80bc368:	f7ff fe88 	bl	80bc07c <_get_status_struct>
 80bc36c:	60f8      	str	r0, [r7, #12]
 80bc36e:	68fb      	ldr	r3, [r7, #12]
 80bc370:	2b00      	cmp	r3, #0
 80bc372:	bf00      	nop
 80bc374:	68fb      	ldr	r3, [r7, #12]
 80bc376:	4618      	mov	r0, r3
 80bc378:	3710      	adds	r7, #16
 80bc37a:	46bd      	mov	sp, r7
 80bc37c:	bd80      	pop	{r7, pc}
 80bc37e:	bf00      	nop
 80bc380:	56bc00c0 	.word	0x56bc00c0

080bc384 <vl53l5_compose_fw_status_code>:
 80bc384:	b480      	push	{r7}
 80bc386:	b087      	sub	sp, #28
 80bc388:	af00      	add	r7, sp, #0
 80bc38a:	6078      	str	r0, [r7, #4]
 80bc38c:	6039      	str	r1, [r7, #0]
 80bc38e:	2300      	movs	r3, #0
 80bc390:	617b      	str	r3, [r7, #20]
 80bc392:	2300      	movs	r3, #0
 80bc394:	613b      	str	r3, [r7, #16]
 80bc396:	2300      	movs	r3, #0
 80bc398:	60fb      	str	r3, [r7, #12]
 80bc39a:	687b      	ldr	r3, [r7, #4]
 80bc39c:	2b00      	cmp	r3, #0
 80bc39e:	d103      	bne.n	80bc3a8 <vl53l5_compose_fw_status_code+0x24>
 80bc3a0:	f06f 0303 	mvn.w	r3, #3
 80bc3a4:	617b      	str	r3, [r7, #20]
 80bc3a6:	e03a      	b.n	80bc41e <vl53l5_compose_fw_status_code+0x9a>
 80bc3a8:	683b      	ldr	r3, [r7, #0]
 80bc3aa:	2b00      	cmp	r3, #0
 80bc3ac:	d103      	bne.n	80bc3b6 <vl53l5_compose_fw_status_code+0x32>
 80bc3ae:	f06f 0303 	mvn.w	r3, #3
 80bc3b2:	617b      	str	r3, [r7, #20]
 80bc3b4:	e033      	b.n	80bc41e <vl53l5_compose_fw_status_code+0x9a>
 80bc3b6:	683b      	ldr	r3, [r7, #0]
 80bc3b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80bc3bc:	2b00      	cmp	r3, #0
 80bc3be:	d02d      	beq.n	80bc41c <vl53l5_compose_fw_status_code+0x98>
 80bc3c0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80bc3c4:	617b      	str	r3, [r7, #20]
 80bc3c6:	683b      	ldr	r3, [r7, #0]
 80bc3c8:	60fb      	str	r3, [r7, #12]
 80bc3ca:	68fb      	ldr	r3, [r7, #12]
 80bc3cc:	881b      	ldrh	r3, [r3, #0]
 80bc3ce:	061b      	lsls	r3, r3, #24
 80bc3d0:	693a      	ldr	r2, [r7, #16]
 80bc3d2:	4313      	orrs	r3, r2
 80bc3d4:	613b      	str	r3, [r7, #16]
 80bc3d6:	683b      	ldr	r3, [r7, #0]
 80bc3d8:	3302      	adds	r3, #2
 80bc3da:	60fb      	str	r3, [r7, #12]
 80bc3dc:	68fb      	ldr	r3, [r7, #12]
 80bc3de:	881b      	ldrh	r3, [r3, #0]
 80bc3e0:	041b      	lsls	r3, r3, #16
 80bc3e2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80bc3e6:	693a      	ldr	r2, [r7, #16]
 80bc3e8:	4313      	orrs	r3, r2
 80bc3ea:	613b      	str	r3, [r7, #16]
 80bc3ec:	683b      	ldr	r3, [r7, #0]
 80bc3ee:	3304      	adds	r3, #4
 80bc3f0:	60fb      	str	r3, [r7, #12]
 80bc3f2:	68fb      	ldr	r3, [r7, #12]
 80bc3f4:	881b      	ldrh	r3, [r3, #0]
 80bc3f6:	021b      	lsls	r3, r3, #8
 80bc3f8:	b29b      	uxth	r3, r3
 80bc3fa:	693a      	ldr	r2, [r7, #16]
 80bc3fc:	4313      	orrs	r3, r2
 80bc3fe:	613b      	str	r3, [r7, #16]
 80bc400:	683b      	ldr	r3, [r7, #0]
 80bc402:	330a      	adds	r3, #10
 80bc404:	60fb      	str	r3, [r7, #12]
 80bc406:	68fb      	ldr	r3, [r7, #12]
 80bc408:	881b      	ldrh	r3, [r3, #0]
 80bc40a:	b2db      	uxtb	r3, r3
 80bc40c:	693a      	ldr	r2, [r7, #16]
 80bc40e:	4313      	orrs	r3, r2
 80bc410:	613b      	str	r3, [r7, #16]
 80bc412:	693b      	ldr	r3, [r7, #16]
 80bc414:	697a      	ldr	r2, [r7, #20]
 80bc416:	4413      	add	r3, r2
 80bc418:	617b      	str	r3, [r7, #20]
 80bc41a:	e000      	b.n	80bc41e <vl53l5_compose_fw_status_code+0x9a>
 80bc41c:	bf00      	nop
 80bc41e:	697b      	ldr	r3, [r7, #20]
 80bc420:	4618      	mov	r0, r3
 80bc422:	371c      	adds	r7, #28
 80bc424:	46bd      	mov	sp, r7
 80bc426:	f85d 7b04 	ldr.w	r7, [sp], #4
 80bc42a:	4770      	bx	lr

080bc42c <_write_byte>:
 80bc42c:	b580      	push	{r7, lr}
 80bc42e:	b082      	sub	sp, #8
 80bc430:	af00      	add	r7, sp, #0
 80bc432:	6078      	str	r0, [r7, #4]
 80bc434:	460b      	mov	r3, r1
 80bc436:	807b      	strh	r3, [r7, #2]
 80bc438:	4613      	mov	r3, r2
 80bc43a:	707b      	strb	r3, [r7, #1]
 80bc43c:	1c7a      	adds	r2, r7, #1
 80bc43e:	8879      	ldrh	r1, [r7, #2]
 80bc440:	2301      	movs	r3, #1
 80bc442:	6878      	ldr	r0, [r7, #4]
 80bc444:	f002 fb37 	bl	80beab6 <vl53l5_write_multi>
 80bc448:	4603      	mov	r3, r0
 80bc44a:	4618      	mov	r0, r3
 80bc44c:	3708      	adds	r7, #8
 80bc44e:	46bd      	mov	sp, r7
 80bc450:	bd80      	pop	{r7, pc}

080bc452 <_read_byte>:
 80bc452:	b580      	push	{r7, lr}
 80bc454:	b084      	sub	sp, #16
 80bc456:	af00      	add	r7, sp, #0
 80bc458:	60f8      	str	r0, [r7, #12]
 80bc45a:	460b      	mov	r3, r1
 80bc45c:	607a      	str	r2, [r7, #4]
 80bc45e:	817b      	strh	r3, [r7, #10]
 80bc460:	8979      	ldrh	r1, [r7, #10]
 80bc462:	2301      	movs	r3, #1
 80bc464:	687a      	ldr	r2, [r7, #4]
 80bc466:	68f8      	ldr	r0, [r7, #12]
 80bc468:	f002 fb42 	bl	80beaf0 <vl53l5_read_multi>
 80bc46c:	4603      	mov	r3, r0
 80bc46e:	4618      	mov	r0, r3
 80bc470:	3710      	adds	r7, #16
 80bc472:	46bd      	mov	sp, r7
 80bc474:	bd80      	pop	{r7, pc}
	...

080bc478 <_check_fw_checksum>:
 80bc478:	b580      	push	{r7, lr}
 80bc47a:	b086      	sub	sp, #24
 80bc47c:	af00      	add	r7, sp, #0
 80bc47e:	6078      	str	r0, [r7, #4]
 80bc480:	2300      	movs	r3, #0
 80bc482:	617b      	str	r3, [r7, #20]
 80bc484:	2300      	movs	r3, #0
 80bc486:	613b      	str	r3, [r7, #16]
 80bc488:	2300      	movs	r3, #0
 80bc48a:	60bb      	str	r3, [r7, #8]
 80bc48c:	f642 73fc 	movw	r3, #12284	; 0x2ffc
 80bc490:	81fb      	strh	r3, [r7, #14]
 80bc492:	2300      	movs	r3, #0
 80bc494:	723b      	strb	r3, [r7, #8]
 80bc496:	f107 0208 	add.w	r2, r7, #8
 80bc49a:	89f9      	ldrh	r1, [r7, #14]
 80bc49c:	2304      	movs	r3, #4
 80bc49e:	6878      	ldr	r0, [r7, #4]
 80bc4a0:	f002 fb26 	bl	80beaf0 <vl53l5_read_multi>
 80bc4a4:	6178      	str	r0, [r7, #20]
 80bc4a6:	697b      	ldr	r3, [r7, #20]
 80bc4a8:	2b00      	cmp	r3, #0
 80bc4aa:	db1c      	blt.n	80bc4e6 <_check_fw_checksum+0x6e>
 80bc4ac:	f107 0308 	add.w	r3, r7, #8
 80bc4b0:	2104      	movs	r1, #4
 80bc4b2:	4618      	mov	r0, r3
 80bc4b4:	f001 fa52 	bl	80bd95c <vl53l5_dci_swap_buffer_byte_ordering>
 80bc4b8:	6178      	str	r0, [r7, #20]
 80bc4ba:	697b      	ldr	r3, [r7, #20]
 80bc4bc:	2b00      	cmp	r3, #0
 80bc4be:	db14      	blt.n	80bc4ea <_check_fw_checksum+0x72>
 80bc4c0:	7afb      	ldrb	r3, [r7, #11]
 80bc4c2:	061a      	lsls	r2, r3, #24
 80bc4c4:	7abb      	ldrb	r3, [r7, #10]
 80bc4c6:	041b      	lsls	r3, r3, #16
 80bc4c8:	431a      	orrs	r2, r3
 80bc4ca:	7a7b      	ldrb	r3, [r7, #9]
 80bc4cc:	021b      	lsls	r3, r3, #8
 80bc4ce:	4313      	orrs	r3, r2
 80bc4d0:	7a3a      	ldrb	r2, [r7, #8]
 80bc4d2:	4313      	orrs	r3, r2
 80bc4d4:	613b      	str	r3, [r7, #16]
 80bc4d6:	693b      	ldr	r3, [r7, #16]
 80bc4d8:	4a08      	ldr	r2, [pc, #32]	; (80bc4fc <_check_fw_checksum+0x84>)
 80bc4da:	4293      	cmp	r3, r2
 80bc4dc:	d007      	beq.n	80bc4ee <_check_fw_checksum+0x76>
 80bc4de:	f06f 032f 	mvn.w	r3, #47	; 0x2f
 80bc4e2:	617b      	str	r3, [r7, #20]
 80bc4e4:	e004      	b.n	80bc4f0 <_check_fw_checksum+0x78>
 80bc4e6:	bf00      	nop
 80bc4e8:	e002      	b.n	80bc4f0 <_check_fw_checksum+0x78>
 80bc4ea:	bf00      	nop
 80bc4ec:	e000      	b.n	80bc4f0 <_check_fw_checksum+0x78>
 80bc4ee:	bf00      	nop
 80bc4f0:	697b      	ldr	r3, [r7, #20]
 80bc4f2:	4618      	mov	r0, r3
 80bc4f4:	3718      	adds	r7, #24
 80bc4f6:	46bd      	mov	sp, r7
 80bc4f8:	bd80      	pop	{r7, pc}
 80bc4fa:	bf00      	nop
 80bc4fc:	749d4792 	.word	0x749d4792

080bc500 <_write_page>:
 80bc500:	b580      	push	{r7, lr}
 80bc502:	b088      	sub	sp, #32
 80bc504:	af00      	add	r7, sp, #0
 80bc506:	60f8      	str	r0, [r7, #12]
 80bc508:	607a      	str	r2, [r7, #4]
 80bc50a:	603b      	str	r3, [r7, #0]
 80bc50c:	460b      	mov	r3, r1
 80bc50e:	817b      	strh	r3, [r7, #10]
 80bc510:	2300      	movs	r3, #0
 80bc512:	617b      	str	r3, [r7, #20]
 80bc514:	2300      	movs	r3, #0
 80bc516:	61fb      	str	r3, [r7, #28]
 80bc518:	2300      	movs	r3, #0
 80bc51a:	613b      	str	r3, [r7, #16]
 80bc51c:	2300      	movs	r3, #0
 80bc51e:	61bb      	str	r3, [r7, #24]
 80bc520:	897a      	ldrh	r2, [r7, #10]
 80bc522:	683b      	ldr	r3, [r7, #0]
 80bc524:	4413      	add	r3, r2
 80bc526:	687a      	ldr	r2, [r7, #4]
 80bc528:	429a      	cmp	r2, r3
 80bc52a:	d902      	bls.n	80bc532 <_write_page+0x32>
 80bc52c:	683b      	ldr	r3, [r7, #0]
 80bc52e:	61fb      	str	r3, [r7, #28]
 80bc530:	e003      	b.n	80bc53a <_write_page+0x3a>
 80bc532:	897b      	ldrh	r3, [r7, #10]
 80bc534:	687a      	ldr	r2, [r7, #4]
 80bc536:	1ad3      	subs	r3, r2, r3
 80bc538:	61fb      	str	r3, [r7, #28]
 80bc53a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80bc53c:	681a      	ldr	r2, [r3, #0]
 80bc53e:	68fb      	ldr	r3, [r7, #12]
 80bc540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80bc542:	429a      	cmp	r2, r3
 80bc544:	d908      	bls.n	80bc558 <_write_page+0x58>
 80bc546:	68fb      	ldr	r3, [r7, #12]
 80bc548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80bc54a:	61bb      	str	r3, [r7, #24]
 80bc54c:	69fa      	ldr	r2, [r7, #28]
 80bc54e:	2100      	movs	r1, #0
 80bc550:	69b8      	ldr	r0, [r7, #24]
 80bc552:	f003 fd33 	bl	80bffbc <memset>
 80bc556:	e02b      	b.n	80bc5b0 <_write_page+0xb0>
 80bc558:	68fb      	ldr	r3, [r7, #12]
 80bc55a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80bc55c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80bc55e:	681b      	ldr	r3, [r3, #0]
 80bc560:	1ad3      	subs	r3, r2, r3
 80bc562:	69fa      	ldr	r2, [r7, #28]
 80bc564:	429a      	cmp	r2, r3
 80bc566:	d91d      	bls.n	80bc5a4 <_write_page+0xa4>
 80bc568:	68fb      	ldr	r3, [r7, #12]
 80bc56a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80bc56c:	61bb      	str	r3, [r7, #24]
 80bc56e:	68fb      	ldr	r3, [r7, #12]
 80bc570:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80bc572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80bc574:	681b      	ldr	r3, [r3, #0]
 80bc576:	1ad3      	subs	r3, r2, r3
 80bc578:	613b      	str	r3, [r7, #16]
 80bc57a:	68fb      	ldr	r3, [r7, #12]
 80bc57c:	6a1a      	ldr	r2, [r3, #32]
 80bc57e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80bc580:	681b      	ldr	r3, [r3, #0]
 80bc582:	4413      	add	r3, r2
 80bc584:	693a      	ldr	r2, [r7, #16]
 80bc586:	4619      	mov	r1, r3
 80bc588:	69b8      	ldr	r0, [r7, #24]
 80bc58a:	f003 fd09 	bl	80bffa0 <memcpy>
 80bc58e:	69ba      	ldr	r2, [r7, #24]
 80bc590:	693b      	ldr	r3, [r7, #16]
 80bc592:	18d0      	adds	r0, r2, r3
 80bc594:	69fa      	ldr	r2, [r7, #28]
 80bc596:	693b      	ldr	r3, [r7, #16]
 80bc598:	1ad3      	subs	r3, r2, r3
 80bc59a:	461a      	mov	r2, r3
 80bc59c:	2100      	movs	r1, #0
 80bc59e:	f003 fd0d 	bl	80bffbc <memset>
 80bc5a2:	e005      	b.n	80bc5b0 <_write_page+0xb0>
 80bc5a4:	68fb      	ldr	r3, [r7, #12]
 80bc5a6:	6a1a      	ldr	r2, [r3, #32]
 80bc5a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80bc5aa:	681b      	ldr	r3, [r3, #0]
 80bc5ac:	4413      	add	r3, r2
 80bc5ae:	61bb      	str	r3, [r7, #24]
 80bc5b0:	8979      	ldrh	r1, [r7, #10]
 80bc5b2:	69fb      	ldr	r3, [r7, #28]
 80bc5b4:	69ba      	ldr	r2, [r7, #24]
 80bc5b6:	68f8      	ldr	r0, [r7, #12]
 80bc5b8:	f002 fa7d 	bl	80beab6 <vl53l5_write_multi>
 80bc5bc:	6178      	str	r0, [r7, #20]
 80bc5be:	697b      	ldr	r3, [r7, #20]
 80bc5c0:	2b00      	cmp	r3, #0
 80bc5c2:	db06      	blt.n	80bc5d2 <_write_page+0xd2>
 80bc5c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80bc5c6:	681a      	ldr	r2, [r3, #0]
 80bc5c8:	69fb      	ldr	r3, [r7, #28]
 80bc5ca:	441a      	add	r2, r3
 80bc5cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80bc5ce:	601a      	str	r2, [r3, #0]
 80bc5d0:	e000      	b.n	80bc5d4 <_write_page+0xd4>
 80bc5d2:	bf00      	nop
 80bc5d4:	697b      	ldr	r3, [r7, #20]
 80bc5d6:	4618      	mov	r0, r3
 80bc5d8:	3720      	adds	r7, #32
 80bc5da:	46bd      	mov	sp, r7
 80bc5dc:	bd80      	pop	{r7, pc}

080bc5de <_reset_mcu_and_wait_boot>:
 80bc5de:	b580      	push	{r7, lr}
 80bc5e0:	b084      	sub	sp, #16
 80bc5e2:	af00      	add	r7, sp, #0
 80bc5e4:	6078      	str	r0, [r7, #4]
 80bc5e6:	2300      	movs	r3, #0
 80bc5e8:	60fb      	str	r3, [r7, #12]
 80bc5ea:	2300      	movs	r3, #0
 80bc5ec:	723b      	strb	r3, [r7, #8]
 80bc5ee:	2300      	movs	r3, #0
 80bc5f0:	727b      	strb	r3, [r7, #9]
 80bc5f2:	2342      	movs	r3, #66	; 0x42
 80bc5f4:	72bb      	strb	r3, [r7, #10]
 80bc5f6:	2300      	movs	r3, #0
 80bc5f8:	72fb      	strb	r3, [r7, #11]
 80bc5fa:	2200      	movs	r2, #0
 80bc5fc:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80bc600:	6878      	ldr	r0, [r7, #4]
 80bc602:	f7ff ff13 	bl	80bc42c <_write_byte>
 80bc606:	60f8      	str	r0, [r7, #12]
 80bc608:	68fb      	ldr	r3, [r7, #12]
 80bc60a:	2b00      	cmp	r3, #0
 80bc60c:	db2e      	blt.n	80bc66c <_reset_mcu_and_wait_boot+0x8e>
 80bc60e:	f107 0208 	add.w	r2, r7, #8
 80bc612:	2304      	movs	r3, #4
 80bc614:	f44f 718a 	mov.w	r1, #276	; 0x114
 80bc618:	6878      	ldr	r0, [r7, #4]
 80bc61a:	f002 fa4c 	bl	80beab6 <vl53l5_write_multi>
 80bc61e:	60f8      	str	r0, [r7, #12]
 80bc620:	68fb      	ldr	r3, [r7, #12]
 80bc622:	2b00      	cmp	r3, #0
 80bc624:	db24      	blt.n	80bc670 <_reset_mcu_and_wait_boot+0x92>
 80bc626:	2200      	movs	r2, #0
 80bc628:	210b      	movs	r1, #11
 80bc62a:	6878      	ldr	r0, [r7, #4]
 80bc62c:	f7ff fefe 	bl	80bc42c <_write_byte>
 80bc630:	60f8      	str	r0, [r7, #12]
 80bc632:	68fb      	ldr	r3, [r7, #12]
 80bc634:	2b00      	cmp	r3, #0
 80bc636:	db1d      	blt.n	80bc674 <_reset_mcu_and_wait_boot+0x96>
 80bc638:	2200      	movs	r2, #0
 80bc63a:	210c      	movs	r1, #12
 80bc63c:	6878      	ldr	r0, [r7, #4]
 80bc63e:	f7ff fef5 	bl	80bc42c <_write_byte>
 80bc642:	60f8      	str	r0, [r7, #12]
 80bc644:	68fb      	ldr	r3, [r7, #12]
 80bc646:	2b00      	cmp	r3, #0
 80bc648:	db16      	blt.n	80bc678 <_reset_mcu_and_wait_boot+0x9a>
 80bc64a:	2201      	movs	r2, #1
 80bc64c:	210b      	movs	r1, #11
 80bc64e:	6878      	ldr	r0, [r7, #4]
 80bc650:	f7ff feec 	bl	80bc42c <_write_byte>
 80bc654:	60f8      	str	r0, [r7, #12]
 80bc656:	68fb      	ldr	r3, [r7, #12]
 80bc658:	2b00      	cmp	r3, #0
 80bc65a:	db0f      	blt.n	80bc67c <_reset_mcu_and_wait_boot+0x9e>
 80bc65c:	2332      	movs	r3, #50	; 0x32
 80bc65e:	2200      	movs	r2, #0
 80bc660:	2101      	movs	r1, #1
 80bc662:	6878      	ldr	r0, [r7, #4]
 80bc664:	f000 fb77 	bl	80bcd56 <vl53l5_wait_mcu_boot>
 80bc668:	60f8      	str	r0, [r7, #12]
 80bc66a:	e008      	b.n	80bc67e <_reset_mcu_and_wait_boot+0xa0>
 80bc66c:	bf00      	nop
 80bc66e:	e006      	b.n	80bc67e <_reset_mcu_and_wait_boot+0xa0>
 80bc670:	bf00      	nop
 80bc672:	e004      	b.n	80bc67e <_reset_mcu_and_wait_boot+0xa0>
 80bc674:	bf00      	nop
 80bc676:	e002      	b.n	80bc67e <_reset_mcu_and_wait_boot+0xa0>
 80bc678:	bf00      	nop
 80bc67a:	e000      	b.n	80bc67e <_reset_mcu_and_wait_boot+0xa0>
 80bc67c:	bf00      	nop
 80bc67e:	68fb      	ldr	r3, [r7, #12]
 80bc680:	4618      	mov	r0, r3
 80bc682:	3710      	adds	r7, #16
 80bc684:	46bd      	mov	sp, r7
 80bc686:	bd80      	pop	{r7, pc}

080bc688 <_enable_host_access_to_go1_async>:
 80bc688:	b580      	push	{r7, lr}
 80bc68a:	b086      	sub	sp, #24
 80bc68c:	af00      	add	r7, sp, #0
 80bc68e:	6078      	str	r0, [r7, #4]
 80bc690:	2300      	movs	r3, #0
 80bc692:	617b      	str	r3, [r7, #20]
 80bc694:	2300      	movs	r3, #0
 80bc696:	613b      	str	r3, [r7, #16]
 80bc698:	2300      	movs	r3, #0
 80bc69a:	60fb      	str	r3, [r7, #12]
 80bc69c:	2300      	movs	r3, #0
 80bc69e:	72fb      	strb	r3, [r7, #11]
 80bc6a0:	2300      	movs	r3, #0
 80bc6a2:	72bb      	strb	r3, [r7, #10]
 80bc6a4:	2200      	movs	r2, #0
 80bc6a6:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80bc6aa:	6878      	ldr	r0, [r7, #4]
 80bc6ac:	f7ff febe 	bl	80bc42c <_write_byte>
 80bc6b0:	6178      	str	r0, [r7, #20]
 80bc6b2:	697b      	ldr	r3, [r7, #20]
 80bc6b4:	2b00      	cmp	r3, #0
 80bc6b6:	db77      	blt.n	80bc7a8 <_enable_host_access_to_go1_async+0x120>
 80bc6b8:	f107 030a 	add.w	r3, r7, #10
 80bc6bc:	461a      	mov	r2, r3
 80bc6be:	2101      	movs	r1, #1
 80bc6c0:	6878      	ldr	r0, [r7, #4]
 80bc6c2:	f7ff fec6 	bl	80bc452 <_read_byte>
 80bc6c6:	6178      	str	r0, [r7, #20]
 80bc6c8:	697b      	ldr	r3, [r7, #20]
 80bc6ca:	2b00      	cmp	r3, #0
 80bc6cc:	db6e      	blt.n	80bc7ac <_enable_host_access_to_go1_async+0x124>
 80bc6ce:	2202      	movs	r2, #2
 80bc6d0:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80bc6d4:	6878      	ldr	r0, [r7, #4]
 80bc6d6:	f7ff fea9 	bl	80bc42c <_write_byte>
 80bc6da:	6178      	str	r0, [r7, #20]
 80bc6dc:	697b      	ldr	r3, [r7, #20]
 80bc6de:	2b00      	cmp	r3, #0
 80bc6e0:	db66      	blt.n	80bc7b0 <_enable_host_access_to_go1_async+0x128>
 80bc6e2:	7abb      	ldrb	r3, [r7, #10]
 80bc6e4:	2b02      	cmp	r3, #2
 80bc6e6:	d003      	beq.n	80bc6f0 <_enable_host_access_to_go1_async+0x68>
 80bc6e8:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80bc6ec:	617b      	str	r3, [r7, #20]
 80bc6ee:	e06c      	b.n	80bc7ca <_enable_host_access_to_go1_async+0x142>
 80bc6f0:	220d      	movs	r2, #13
 80bc6f2:	2103      	movs	r1, #3
 80bc6f4:	6878      	ldr	r0, [r7, #4]
 80bc6f6:	f7ff fe99 	bl	80bc42c <_write_byte>
 80bc6fa:	6178      	str	r0, [r7, #20]
 80bc6fc:	697b      	ldr	r3, [r7, #20]
 80bc6fe:	2b00      	cmp	r3, #0
 80bc700:	db58      	blt.n	80bc7b4 <_enable_host_access_to_go1_async+0x12c>
 80bc702:	2201      	movs	r2, #1
 80bc704:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80bc708:	6878      	ldr	r0, [r7, #4]
 80bc70a:	f7ff fe8f 	bl	80bc42c <_write_byte>
 80bc70e:	6178      	str	r0, [r7, #20]
 80bc710:	697b      	ldr	r3, [r7, #20]
 80bc712:	2b00      	cmp	r3, #0
 80bc714:	db50      	blt.n	80bc7b8 <_enable_host_access_to_go1_async+0x130>
 80bc716:	2300      	movs	r3, #0
 80bc718:	72fb      	strb	r3, [r7, #11]
 80bc71a:	f107 0310 	add.w	r3, r7, #16
 80bc71e:	4619      	mov	r1, r3
 80bc720:	6878      	ldr	r0, [r7, #4]
 80bc722:	f002 fa61 	bl	80bebe8 <vl53l5_get_tick_count>
 80bc726:	6178      	str	r0, [r7, #20]
 80bc728:	697b      	ldr	r3, [r7, #20]
 80bc72a:	2b00      	cmp	r3, #0
 80bc72c:	db46      	blt.n	80bc7bc <_enable_host_access_to_go1_async+0x134>
 80bc72e:	e023      	b.n	80bc778 <_enable_host_access_to_go1_async+0xf0>
 80bc730:	f107 030b 	add.w	r3, r7, #11
 80bc734:	461a      	mov	r2, r3
 80bc736:	2121      	movs	r1, #33	; 0x21
 80bc738:	6878      	ldr	r0, [r7, #4]
 80bc73a:	f7ff fe8a 	bl	80bc452 <_read_byte>
 80bc73e:	6178      	str	r0, [r7, #20]
 80bc740:	697b      	ldr	r3, [r7, #20]
 80bc742:	2b00      	cmp	r3, #0
 80bc744:	db3c      	blt.n	80bc7c0 <_enable_host_access_to_go1_async+0x138>
 80bc746:	f107 030c 	add.w	r3, r7, #12
 80bc74a:	4619      	mov	r1, r3
 80bc74c:	6878      	ldr	r0, [r7, #4]
 80bc74e:	f002 fa4b 	bl	80bebe8 <vl53l5_get_tick_count>
 80bc752:	6178      	str	r0, [r7, #20]
 80bc754:	697b      	ldr	r3, [r7, #20]
 80bc756:	2b00      	cmp	r3, #0
 80bc758:	db34      	blt.n	80bc7c4 <_enable_host_access_to_go1_async+0x13c>
 80bc75a:	6939      	ldr	r1, [r7, #16]
 80bc75c:	68fa      	ldr	r2, [r7, #12]
 80bc75e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80bc762:	6878      	ldr	r0, [r7, #4]
 80bc764:	f002 fa5b 	bl	80bec1e <vl53l5_check_for_timeout>
 80bc768:	6178      	str	r0, [r7, #20]
 80bc76a:	697b      	ldr	r3, [r7, #20]
 80bc76c:	2b00      	cmp	r3, #0
 80bc76e:	da03      	bge.n	80bc778 <_enable_host_access_to_go1_async+0xf0>
 80bc770:	f06f 0333 	mvn.w	r3, #51	; 0x33
 80bc774:	617b      	str	r3, [r7, #20]
 80bc776:	e028      	b.n	80bc7ca <_enable_host_access_to_go1_async+0x142>
 80bc778:	7afb      	ldrb	r3, [r7, #11]
 80bc77a:	f003 0310 	and.w	r3, r3, #16
 80bc77e:	2b00      	cmp	r3, #0
 80bc780:	d0d6      	beq.n	80bc730 <_enable_host_access_to_go1_async+0xa8>
 80bc782:	2200      	movs	r2, #0
 80bc784:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80bc788:	6878      	ldr	r0, [r7, #4]
 80bc78a:	f7ff fe4f 	bl	80bc42c <_write_byte>
 80bc78e:	6178      	str	r0, [r7, #20]
 80bc790:	697b      	ldr	r3, [r7, #20]
 80bc792:	2b00      	cmp	r3, #0
 80bc794:	db18      	blt.n	80bc7c8 <_enable_host_access_to_go1_async+0x140>
 80bc796:	2201      	movs	r2, #1
 80bc798:	210c      	movs	r1, #12
 80bc79a:	6878      	ldr	r0, [r7, #4]
 80bc79c:	f7ff fe46 	bl	80bc42c <_write_byte>
 80bc7a0:	6178      	str	r0, [r7, #20]
 80bc7a2:	697b      	ldr	r3, [r7, #20]
 80bc7a4:	2b00      	cmp	r3, #0
 80bc7a6:	e010      	b.n	80bc7ca <_enable_host_access_to_go1_async+0x142>
 80bc7a8:	bf00      	nop
 80bc7aa:	e00e      	b.n	80bc7ca <_enable_host_access_to_go1_async+0x142>
 80bc7ac:	bf00      	nop
 80bc7ae:	e00c      	b.n	80bc7ca <_enable_host_access_to_go1_async+0x142>
 80bc7b0:	bf00      	nop
 80bc7b2:	e00a      	b.n	80bc7ca <_enable_host_access_to_go1_async+0x142>
 80bc7b4:	bf00      	nop
 80bc7b6:	e008      	b.n	80bc7ca <_enable_host_access_to_go1_async+0x142>
 80bc7b8:	bf00      	nop
 80bc7ba:	e006      	b.n	80bc7ca <_enable_host_access_to_go1_async+0x142>
 80bc7bc:	bf00      	nop
 80bc7be:	e004      	b.n	80bc7ca <_enable_host_access_to_go1_async+0x142>
 80bc7c0:	bf00      	nop
 80bc7c2:	e002      	b.n	80bc7ca <_enable_host_access_to_go1_async+0x142>
 80bc7c4:	bf00      	nop
 80bc7c6:	e000      	b.n	80bc7ca <_enable_host_access_to_go1_async+0x142>
 80bc7c8:	bf00      	nop
 80bc7ca:	697b      	ldr	r3, [r7, #20]
 80bc7cc:	4618      	mov	r0, r3
 80bc7ce:	3718      	adds	r7, #24
 80bc7d0:	46bd      	mov	sp, r7
 80bc7d2:	bd80      	pop	{r7, pc}

080bc7d4 <_set_to_power_on_status>:
 80bc7d4:	b580      	push	{r7, lr}
 80bc7d6:	b084      	sub	sp, #16
 80bc7d8:	af00      	add	r7, sp, #0
 80bc7da:	6078      	str	r0, [r7, #4]
 80bc7dc:	2300      	movs	r3, #0
 80bc7de:	60fb      	str	r3, [r7, #12]
 80bc7e0:	2200      	movs	r2, #0
 80bc7e2:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80bc7e6:	6878      	ldr	r0, [r7, #4]
 80bc7e8:	f7ff fe20 	bl	80bc42c <_write_byte>
 80bc7ec:	60f8      	str	r0, [r7, #12]
 80bc7ee:	68fb      	ldr	r3, [r7, #12]
 80bc7f0:	2b00      	cmp	r3, #0
 80bc7f2:	db77      	blt.n	80bc8e4 <_set_to_power_on_status+0x110>
 80bc7f4:	2200      	movs	r2, #0
 80bc7f6:	f240 1101 	movw	r1, #257	; 0x101
 80bc7fa:	6878      	ldr	r0, [r7, #4]
 80bc7fc:	f7ff fe16 	bl	80bc42c <_write_byte>
 80bc800:	60f8      	str	r0, [r7, #12]
 80bc802:	68fb      	ldr	r3, [r7, #12]
 80bc804:	2b00      	cmp	r3, #0
 80bc806:	db6f      	blt.n	80bc8e8 <_set_to_power_on_status+0x114>
 80bc808:	2200      	movs	r2, #0
 80bc80a:	f44f 7181 	mov.w	r1, #258	; 0x102
 80bc80e:	6878      	ldr	r0, [r7, #4]
 80bc810:	f7ff fe0c 	bl	80bc42c <_write_byte>
 80bc814:	60f8      	str	r0, [r7, #12]
 80bc816:	68fb      	ldr	r3, [r7, #12]
 80bc818:	2b00      	cmp	r3, #0
 80bc81a:	db67      	blt.n	80bc8ec <_set_to_power_on_status+0x118>
 80bc81c:	2201      	movs	r2, #1
 80bc81e:	f244 0102 	movw	r1, #16386	; 0x4002
 80bc822:	6878      	ldr	r0, [r7, #4]
 80bc824:	f7ff fe02 	bl	80bc42c <_write_byte>
 80bc828:	60f8      	str	r0, [r7, #12]
 80bc82a:	68fb      	ldr	r3, [r7, #12]
 80bc82c:	2b00      	cmp	r3, #0
 80bc82e:	db5f      	blt.n	80bc8f0 <_set_to_power_on_status+0x11c>
 80bc830:	2200      	movs	r2, #0
 80bc832:	f244 0102 	movw	r1, #16386	; 0x4002
 80bc836:	6878      	ldr	r0, [r7, #4]
 80bc838:	f7ff fdf8 	bl	80bc42c <_write_byte>
 80bc83c:	60f8      	str	r0, [r7, #12]
 80bc83e:	68fb      	ldr	r3, [r7, #12]
 80bc840:	2b00      	cmp	r3, #0
 80bc842:	db57      	blt.n	80bc8f4 <_set_to_power_on_status+0x120>
 80bc844:	2201      	movs	r2, #1
 80bc846:	f240 1103 	movw	r1, #259	; 0x103
 80bc84a:	6878      	ldr	r0, [r7, #4]
 80bc84c:	f7ff fdee 	bl	80bc42c <_write_byte>
 80bc850:	60f8      	str	r0, [r7, #12]
 80bc852:	68fb      	ldr	r3, [r7, #12]
 80bc854:	2b00      	cmp	r3, #0
 80bc856:	db4f      	blt.n	80bc8f8 <_set_to_power_on_status+0x124>
 80bc858:	2200      	movs	r2, #0
 80bc85a:	f244 010f 	movw	r1, #16399	; 0x400f
 80bc85e:	6878      	ldr	r0, [r7, #4]
 80bc860:	f7ff fde4 	bl	80bc42c <_write_byte>
 80bc864:	60f8      	str	r0, [r7, #12]
 80bc866:	68fb      	ldr	r3, [r7, #12]
 80bc868:	2b00      	cmp	r3, #0
 80bc86a:	db47      	blt.n	80bc8fc <_set_to_power_on_status+0x128>
 80bc86c:	2243      	movs	r2, #67	; 0x43
 80bc86e:	f240 211a 	movw	r1, #538	; 0x21a
 80bc872:	6878      	ldr	r0, [r7, #4]
 80bc874:	f7ff fdda 	bl	80bc42c <_write_byte>
 80bc878:	60f8      	str	r0, [r7, #12]
 80bc87a:	68fb      	ldr	r3, [r7, #12]
 80bc87c:	2b00      	cmp	r3, #0
 80bc87e:	db3f      	blt.n	80bc900 <_set_to_power_on_status+0x12c>
 80bc880:	2203      	movs	r2, #3
 80bc882:	f240 211a 	movw	r1, #538	; 0x21a
 80bc886:	6878      	ldr	r0, [r7, #4]
 80bc888:	f7ff fdd0 	bl	80bc42c <_write_byte>
 80bc88c:	60f8      	str	r0, [r7, #12]
 80bc88e:	68fb      	ldr	r3, [r7, #12]
 80bc890:	2b00      	cmp	r3, #0
 80bc892:	db37      	blt.n	80bc904 <_set_to_power_on_status+0x130>
 80bc894:	2201      	movs	r2, #1
 80bc896:	f240 211a 	movw	r1, #538	; 0x21a
 80bc89a:	6878      	ldr	r0, [r7, #4]
 80bc89c:	f7ff fdc6 	bl	80bc42c <_write_byte>
 80bc8a0:	60f8      	str	r0, [r7, #12]
 80bc8a2:	68fb      	ldr	r3, [r7, #12]
 80bc8a4:	2b00      	cmp	r3, #0
 80bc8a6:	db2f      	blt.n	80bc908 <_set_to_power_on_status+0x134>
 80bc8a8:	2200      	movs	r2, #0
 80bc8aa:	f240 211a 	movw	r1, #538	; 0x21a
 80bc8ae:	6878      	ldr	r0, [r7, #4]
 80bc8b0:	f7ff fdbc 	bl	80bc42c <_write_byte>
 80bc8b4:	60f8      	str	r0, [r7, #12]
 80bc8b6:	68fb      	ldr	r3, [r7, #12]
 80bc8b8:	2b00      	cmp	r3, #0
 80bc8ba:	db27      	blt.n	80bc90c <_set_to_power_on_status+0x138>
 80bc8bc:	2200      	movs	r2, #0
 80bc8be:	f240 2119 	movw	r1, #537	; 0x219
 80bc8c2:	6878      	ldr	r0, [r7, #4]
 80bc8c4:	f7ff fdb2 	bl	80bc42c <_write_byte>
 80bc8c8:	60f8      	str	r0, [r7, #12]
 80bc8ca:	68fb      	ldr	r3, [r7, #12]
 80bc8cc:	2b00      	cmp	r3, #0
 80bc8ce:	db1f      	blt.n	80bc910 <_set_to_power_on_status+0x13c>
 80bc8d0:	2200      	movs	r2, #0
 80bc8d2:	f240 211b 	movw	r1, #539	; 0x21b
 80bc8d6:	6878      	ldr	r0, [r7, #4]
 80bc8d8:	f7ff fda8 	bl	80bc42c <_write_byte>
 80bc8dc:	60f8      	str	r0, [r7, #12]
 80bc8de:	68fb      	ldr	r3, [r7, #12]
 80bc8e0:	2b00      	cmp	r3, #0
 80bc8e2:	e016      	b.n	80bc912 <_set_to_power_on_status+0x13e>
 80bc8e4:	bf00      	nop
 80bc8e6:	e014      	b.n	80bc912 <_set_to_power_on_status+0x13e>
 80bc8e8:	bf00      	nop
 80bc8ea:	e012      	b.n	80bc912 <_set_to_power_on_status+0x13e>
 80bc8ec:	bf00      	nop
 80bc8ee:	e010      	b.n	80bc912 <_set_to_power_on_status+0x13e>
 80bc8f0:	bf00      	nop
 80bc8f2:	e00e      	b.n	80bc912 <_set_to_power_on_status+0x13e>
 80bc8f4:	bf00      	nop
 80bc8f6:	e00c      	b.n	80bc912 <_set_to_power_on_status+0x13e>
 80bc8f8:	bf00      	nop
 80bc8fa:	e00a      	b.n	80bc912 <_set_to_power_on_status+0x13e>
 80bc8fc:	bf00      	nop
 80bc8fe:	e008      	b.n	80bc912 <_set_to_power_on_status+0x13e>
 80bc900:	bf00      	nop
 80bc902:	e006      	b.n	80bc912 <_set_to_power_on_status+0x13e>
 80bc904:	bf00      	nop
 80bc906:	e004      	b.n	80bc912 <_set_to_power_on_status+0x13e>
 80bc908:	bf00      	nop
 80bc90a:	e002      	b.n	80bc912 <_set_to_power_on_status+0x13e>
 80bc90c:	bf00      	nop
 80bc90e:	e000      	b.n	80bc912 <_set_to_power_on_status+0x13e>
 80bc910:	bf00      	nop
 80bc912:	68fb      	ldr	r3, [r7, #12]
 80bc914:	4618      	mov	r0, r3
 80bc916:	3710      	adds	r7, #16
 80bc918:	46bd      	mov	sp, r7
 80bc91a:	bd80      	pop	{r7, pc}

080bc91c <_wake_up_mcu>:
 80bc91c:	b580      	push	{r7, lr}
 80bc91e:	b084      	sub	sp, #16
 80bc920:	af00      	add	r7, sp, #0
 80bc922:	6078      	str	r0, [r7, #4]
 80bc924:	2300      	movs	r3, #0
 80bc926:	60fb      	str	r3, [r7, #12]
 80bc928:	2200      	movs	r2, #0
 80bc92a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80bc92e:	6878      	ldr	r0, [r7, #4]
 80bc930:	f7ff fd7c 	bl	80bc42c <_write_byte>
 80bc934:	60f8      	str	r0, [r7, #12]
 80bc936:	68fb      	ldr	r3, [r7, #12]
 80bc938:	2b00      	cmp	r3, #0
 80bc93a:	db24      	blt.n	80bc986 <_wake_up_mcu+0x6a>
 80bc93c:	2200      	movs	r2, #0
 80bc93e:	210c      	movs	r1, #12
 80bc940:	6878      	ldr	r0, [r7, #4]
 80bc942:	f7ff fd73 	bl	80bc42c <_write_byte>
 80bc946:	60f8      	str	r0, [r7, #12]
 80bc948:	68fb      	ldr	r3, [r7, #12]
 80bc94a:	2b00      	cmp	r3, #0
 80bc94c:	db1d      	blt.n	80bc98a <_wake_up_mcu+0x6e>
 80bc94e:	2201      	movs	r2, #1
 80bc950:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80bc954:	6878      	ldr	r0, [r7, #4]
 80bc956:	f7ff fd69 	bl	80bc42c <_write_byte>
 80bc95a:	60f8      	str	r0, [r7, #12]
 80bc95c:	68fb      	ldr	r3, [r7, #12]
 80bc95e:	2b00      	cmp	r3, #0
 80bc960:	db15      	blt.n	80bc98e <_wake_up_mcu+0x72>
 80bc962:	2207      	movs	r2, #7
 80bc964:	2120      	movs	r1, #32
 80bc966:	6878      	ldr	r0, [r7, #4]
 80bc968:	f7ff fd60 	bl	80bc42c <_write_byte>
 80bc96c:	60f8      	str	r0, [r7, #12]
 80bc96e:	68fb      	ldr	r3, [r7, #12]
 80bc970:	2b00      	cmp	r3, #0
 80bc972:	db0e      	blt.n	80bc992 <_wake_up_mcu+0x76>
 80bc974:	2206      	movs	r2, #6
 80bc976:	2120      	movs	r1, #32
 80bc978:	6878      	ldr	r0, [r7, #4]
 80bc97a:	f7ff fd57 	bl	80bc42c <_write_byte>
 80bc97e:	60f8      	str	r0, [r7, #12]
 80bc980:	68fb      	ldr	r3, [r7, #12]
 80bc982:	2b00      	cmp	r3, #0
 80bc984:	e006      	b.n	80bc994 <_wake_up_mcu+0x78>
 80bc986:	bf00      	nop
 80bc988:	e004      	b.n	80bc994 <_wake_up_mcu+0x78>
 80bc98a:	bf00      	nop
 80bc98c:	e002      	b.n	80bc994 <_wake_up_mcu+0x78>
 80bc98e:	bf00      	nop
 80bc990:	e000      	b.n	80bc994 <_wake_up_mcu+0x78>
 80bc992:	bf00      	nop
 80bc994:	68fb      	ldr	r3, [r7, #12]
 80bc996:	4618      	mov	r0, r3
 80bc998:	3710      	adds	r7, #16
 80bc99a:	46bd      	mov	sp, r7
 80bc99c:	bd80      	pop	{r7, pc}

080bc99e <_download_fw_to_ram>:
 80bc99e:	b580      	push	{r7, lr}
 80bc9a0:	b088      	sub	sp, #32
 80bc9a2:	af02      	add	r7, sp, #8
 80bc9a4:	6078      	str	r0, [r7, #4]
 80bc9a6:	2300      	movs	r3, #0
 80bc9a8:	617b      	str	r3, [r7, #20]
 80bc9aa:	2300      	movs	r3, #0
 80bc9ac:	827b      	strh	r3, [r7, #18]
 80bc9ae:	2309      	movs	r3, #9
 80bc9b0:	747b      	strb	r3, [r7, #17]
 80bc9b2:	2300      	movs	r3, #0
 80bc9b4:	60fb      	str	r3, [r7, #12]
 80bc9b6:	2300      	movs	r3, #0
 80bc9b8:	60bb      	str	r3, [r7, #8]
 80bc9ba:	2309      	movs	r3, #9
 80bc9bc:	747b      	strb	r3, [r7, #17]
 80bc9be:	e03b      	b.n	80bca38 <_download_fw_to_ram+0x9a>
 80bc9c0:	7c7b      	ldrb	r3, [r7, #17]
 80bc9c2:	461a      	mov	r2, r3
 80bc9c4:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80bc9c8:	6878      	ldr	r0, [r7, #4]
 80bc9ca:	f7ff fd2f 	bl	80bc42c <_write_byte>
 80bc9ce:	6178      	str	r0, [r7, #20]
 80bc9d0:	697b      	ldr	r3, [r7, #20]
 80bc9d2:	2b00      	cmp	r3, #0
 80bc9d4:	db34      	blt.n	80bca40 <_download_fw_to_ram+0xa2>
 80bc9d6:	7c7b      	ldrb	r3, [r7, #17]
 80bc9d8:	2b09      	cmp	r3, #9
 80bc9da:	d102      	bne.n	80bc9e2 <_download_fw_to_ram+0x44>
 80bc9dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80bc9e0:	60fb      	str	r3, [r7, #12]
 80bc9e2:	7c7b      	ldrb	r3, [r7, #17]
 80bc9e4:	2b0a      	cmp	r3, #10
 80bc9e6:	d102      	bne.n	80bc9ee <_download_fw_to_ram+0x50>
 80bc9e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80bc9ec:	60fb      	str	r3, [r7, #12]
 80bc9ee:	7c7b      	ldrb	r3, [r7, #17]
 80bc9f0:	2b0b      	cmp	r3, #11
 80bc9f2:	d102      	bne.n	80bc9fa <_download_fw_to_ram+0x5c>
 80bc9f4:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80bc9f8:	60fb      	str	r3, [r7, #12]
 80bc9fa:	2300      	movs	r3, #0
 80bc9fc:	827b      	strh	r3, [r7, #18]
 80bc9fe:	e014      	b.n	80bca2a <_download_fw_to_ram+0x8c>
 80bca00:	687b      	ldr	r3, [r7, #4]
 80bca02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80bca04:	8a79      	ldrh	r1, [r7, #18]
 80bca06:	f107 0308 	add.w	r3, r7, #8
 80bca0a:	9300      	str	r3, [sp, #0]
 80bca0c:	4613      	mov	r3, r2
 80bca0e:	68fa      	ldr	r2, [r7, #12]
 80bca10:	6878      	ldr	r0, [r7, #4]
 80bca12:	f7ff fd75 	bl	80bc500 <_write_page>
 80bca16:	6178      	str	r0, [r7, #20]
 80bca18:	697b      	ldr	r3, [r7, #20]
 80bca1a:	2b00      	cmp	r3, #0
 80bca1c:	d112      	bne.n	80bca44 <_download_fw_to_ram+0xa6>
 80bca1e:	687b      	ldr	r3, [r7, #4]
 80bca20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80bca22:	b29a      	uxth	r2, r3
 80bca24:	8a7b      	ldrh	r3, [r7, #18]
 80bca26:	4413      	add	r3, r2
 80bca28:	827b      	strh	r3, [r7, #18]
 80bca2a:	8a7b      	ldrh	r3, [r7, #18]
 80bca2c:	68fa      	ldr	r2, [r7, #12]
 80bca2e:	429a      	cmp	r2, r3
 80bca30:	d8e6      	bhi.n	80bca00 <_download_fw_to_ram+0x62>
 80bca32:	7c7b      	ldrb	r3, [r7, #17]
 80bca34:	3301      	adds	r3, #1
 80bca36:	747b      	strb	r3, [r7, #17]
 80bca38:	7c7b      	ldrb	r3, [r7, #17]
 80bca3a:	2b0b      	cmp	r3, #11
 80bca3c:	d9c0      	bls.n	80bc9c0 <_download_fw_to_ram+0x22>
 80bca3e:	e002      	b.n	80bca46 <_download_fw_to_ram+0xa8>
 80bca40:	bf00      	nop
 80bca42:	e000      	b.n	80bca46 <_download_fw_to_ram+0xa8>
 80bca44:	bf00      	nop
 80bca46:	697b      	ldr	r3, [r7, #20]
 80bca48:	4618      	mov	r0, r3
 80bca4a:	3718      	adds	r7, #24
 80bca4c:	46bd      	mov	sp, r7
 80bca4e:	bd80      	pop	{r7, pc}

080bca50 <_wait_for_boot_complete_before_fw_load>:
 80bca50:	b580      	push	{r7, lr}
 80bca52:	b084      	sub	sp, #16
 80bca54:	af00      	add	r7, sp, #0
 80bca56:	6078      	str	r0, [r7, #4]
 80bca58:	2300      	movs	r3, #0
 80bca5a:	60fb      	str	r3, [r7, #12]
 80bca5c:	6878      	ldr	r0, [r7, #4]
 80bca5e:	f7ff fe13 	bl	80bc688 <_enable_host_access_to_go1_async>
 80bca62:	60f8      	str	r0, [r7, #12]
 80bca64:	68fb      	ldr	r3, [r7, #12]
 80bca66:	2b00      	cmp	r3, #0
 80bca68:	db0d      	blt.n	80bca86 <_wait_for_boot_complete_before_fw_load+0x36>
 80bca6a:	6878      	ldr	r0, [r7, #4]
 80bca6c:	f7ff feb2 	bl	80bc7d4 <_set_to_power_on_status>
 80bca70:	60f8      	str	r0, [r7, #12]
 80bca72:	68fb      	ldr	r3, [r7, #12]
 80bca74:	2b00      	cmp	r3, #0
 80bca76:	db08      	blt.n	80bca8a <_wait_for_boot_complete_before_fw_load+0x3a>
 80bca78:	6878      	ldr	r0, [r7, #4]
 80bca7a:	f7ff ff4f 	bl	80bc91c <_wake_up_mcu>
 80bca7e:	60f8      	str	r0, [r7, #12]
 80bca80:	68fb      	ldr	r3, [r7, #12]
 80bca82:	2b00      	cmp	r3, #0
 80bca84:	e002      	b.n	80bca8c <_wait_for_boot_complete_before_fw_load+0x3c>
 80bca86:	bf00      	nop
 80bca88:	e000      	b.n	80bca8c <_wait_for_boot_complete_before_fw_load+0x3c>
 80bca8a:	bf00      	nop
 80bca8c:	68fb      	ldr	r3, [r7, #12]
 80bca8e:	4618      	mov	r0, r3
 80bca90:	3710      	adds	r7, #16
 80bca92:	46bd      	mov	sp, r7
 80bca94:	bd80      	pop	{r7, pc}

080bca96 <_wait_for_boot_complete_after_fw_load>:
 80bca96:	b580      	push	{r7, lr}
 80bca98:	b084      	sub	sp, #16
 80bca9a:	af00      	add	r7, sp, #0
 80bca9c:	6078      	str	r0, [r7, #4]
 80bca9e:	2300      	movs	r3, #0
 80bcaa0:	60fb      	str	r3, [r7, #12]
 80bcaa2:	6878      	ldr	r0, [r7, #4]
 80bcaa4:	f7ff fdf0 	bl	80bc688 <_enable_host_access_to_go1_async>
 80bcaa8:	60f8      	str	r0, [r7, #12]
 80bcaaa:	68fb      	ldr	r3, [r7, #12]
 80bcaac:	2b00      	cmp	r3, #0
 80bcaae:	db06      	blt.n	80bcabe <_wait_for_boot_complete_after_fw_load+0x28>
 80bcab0:	6878      	ldr	r0, [r7, #4]
 80bcab2:	f7ff fd94 	bl	80bc5de <_reset_mcu_and_wait_boot>
 80bcab6:	60f8      	str	r0, [r7, #12]
 80bcab8:	68fb      	ldr	r3, [r7, #12]
 80bcaba:	2b00      	cmp	r3, #0
 80bcabc:	e000      	b.n	80bcac0 <_wait_for_boot_complete_after_fw_load+0x2a>
 80bcabe:	bf00      	nop
 80bcac0:	68fb      	ldr	r3, [r7, #12]
 80bcac2:	4618      	mov	r0, r3
 80bcac4:	3710      	adds	r7, #16
 80bcac6:	46bd      	mov	sp, r7
 80bcac8:	bd80      	pop	{r7, pc}

080bcaca <vl53l5_load_firmware>:
 80bcaca:	b580      	push	{r7, lr}
 80bcacc:	b084      	sub	sp, #16
 80bcace:	af00      	add	r7, sp, #0
 80bcad0:	6078      	str	r0, [r7, #4]
 80bcad2:	2300      	movs	r3, #0
 80bcad4:	60fb      	str	r3, [r7, #12]
 80bcad6:	687b      	ldr	r3, [r7, #4]
 80bcad8:	2b00      	cmp	r3, #0
 80bcada:	d103      	bne.n	80bcae4 <vl53l5_load_firmware+0x1a>
 80bcadc:	f06f 0303 	mvn.w	r3, #3
 80bcae0:	60fb      	str	r3, [r7, #12]
 80bcae2:	e044      	b.n	80bcb6e <vl53l5_load_firmware+0xa4>
 80bcae4:	687b      	ldr	r3, [r7, #4]
 80bcae6:	6a1b      	ldr	r3, [r3, #32]
 80bcae8:	2b00      	cmp	r3, #0
 80bcaea:	d103      	bne.n	80bcaf4 <vl53l5_load_firmware+0x2a>
 80bcaec:	f06f 0338 	mvn.w	r3, #56	; 0x38
 80bcaf0:	60fb      	str	r3, [r7, #12]
 80bcaf2:	e03c      	b.n	80bcb6e <vl53l5_load_firmware+0xa4>
 80bcaf4:	687b      	ldr	r3, [r7, #4]
 80bcaf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80bcaf8:	2b00      	cmp	r3, #0
 80bcafa:	d103      	bne.n	80bcb04 <vl53l5_load_firmware+0x3a>
 80bcafc:	f06f 0338 	mvn.w	r3, #56	; 0x38
 80bcb00:	60fb      	str	r3, [r7, #12]
 80bcb02:	e034      	b.n	80bcb6e <vl53l5_load_firmware+0xa4>
 80bcb04:	687b      	ldr	r3, [r7, #4]
 80bcb06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80bcb08:	2b00      	cmp	r3, #0
 80bcb0a:	d103      	bne.n	80bcb14 <vl53l5_load_firmware+0x4a>
 80bcb0c:	f06f 0303 	mvn.w	r3, #3
 80bcb10:	60fb      	str	r3, [r7, #12]
 80bcb12:	e02c      	b.n	80bcb6e <vl53l5_load_firmware+0xa4>
 80bcb14:	6878      	ldr	r0, [r7, #4]
 80bcb16:	f7ff ff9b 	bl	80bca50 <_wait_for_boot_complete_before_fw_load>
 80bcb1a:	60f8      	str	r0, [r7, #12]
 80bcb1c:	68fb      	ldr	r3, [r7, #12]
 80bcb1e:	2b00      	cmp	r3, #0
 80bcb20:	db1e      	blt.n	80bcb60 <vl53l5_load_firmware+0x96>
 80bcb22:	6878      	ldr	r0, [r7, #4]
 80bcb24:	f7ff ff3b 	bl	80bc99e <_download_fw_to_ram>
 80bcb28:	60f8      	str	r0, [r7, #12]
 80bcb2a:	68fb      	ldr	r3, [r7, #12]
 80bcb2c:	2b00      	cmp	r3, #0
 80bcb2e:	db19      	blt.n	80bcb64 <vl53l5_load_firmware+0x9a>
 80bcb30:	6878      	ldr	r0, [r7, #4]
 80bcb32:	f7ff ffb0 	bl	80bca96 <_wait_for_boot_complete_after_fw_load>
 80bcb36:	60f8      	str	r0, [r7, #12]
 80bcb38:	68fb      	ldr	r3, [r7, #12]
 80bcb3a:	2b00      	cmp	r3, #0
 80bcb3c:	db14      	blt.n	80bcb68 <vl53l5_load_firmware+0x9e>
 80bcb3e:	2202      	movs	r2, #2
 80bcb40:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80bcb44:	6878      	ldr	r0, [r7, #4]
 80bcb46:	f7ff fc71 	bl	80bc42c <_write_byte>
 80bcb4a:	60f8      	str	r0, [r7, #12]
 80bcb4c:	68fb      	ldr	r3, [r7, #12]
 80bcb4e:	2b00      	cmp	r3, #0
 80bcb50:	db0c      	blt.n	80bcb6c <vl53l5_load_firmware+0xa2>
 80bcb52:	6878      	ldr	r0, [r7, #4]
 80bcb54:	f7ff fc90 	bl	80bc478 <_check_fw_checksum>
 80bcb58:	60f8      	str	r0, [r7, #12]
 80bcb5a:	68fb      	ldr	r3, [r7, #12]
 80bcb5c:	2b00      	cmp	r3, #0
 80bcb5e:	e006      	b.n	80bcb6e <vl53l5_load_firmware+0xa4>
 80bcb60:	bf00      	nop
 80bcb62:	e004      	b.n	80bcb6e <vl53l5_load_firmware+0xa4>
 80bcb64:	bf00      	nop
 80bcb66:	e002      	b.n	80bcb6e <vl53l5_load_firmware+0xa4>
 80bcb68:	bf00      	nop
 80bcb6a:	e000      	b.n	80bcb6e <vl53l5_load_firmware+0xa4>
 80bcb6c:	bf00      	nop
 80bcb6e:	68fb      	ldr	r3, [r7, #12]
 80bcb70:	2b00      	cmp	r3, #0
 80bcb72:	da05      	bge.n	80bcb80 <vl53l5_load_firmware+0xb6>
 80bcb74:	2202      	movs	r2, #2
 80bcb76:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80bcb7a:	6878      	ldr	r0, [r7, #4]
 80bcb7c:	f7ff fc56 	bl	80bc42c <_write_byte>
 80bcb80:	68fb      	ldr	r3, [r7, #12]
 80bcb82:	4618      	mov	r0, r3
 80bcb84:	3710      	adds	r7, #16
 80bcb86:	46bd      	mov	sp, r7
 80bcb88:	bd80      	pop	{r7, pc}

080bcb8a <vl53l5_register_read_modify_write>:
 80bcb8a:	b580      	push	{r7, lr}
 80bcb8c:	b084      	sub	sp, #16
 80bcb8e:	af00      	add	r7, sp, #0
 80bcb90:	6078      	str	r0, [r7, #4]
 80bcb92:	4608      	mov	r0, r1
 80bcb94:	4611      	mov	r1, r2
 80bcb96:	461a      	mov	r2, r3
 80bcb98:	4603      	mov	r3, r0
 80bcb9a:	807b      	strh	r3, [r7, #2]
 80bcb9c:	460b      	mov	r3, r1
 80bcb9e:	707b      	strb	r3, [r7, #1]
 80bcba0:	4613      	mov	r3, r2
 80bcba2:	703b      	strb	r3, [r7, #0]
 80bcba4:	2300      	movs	r3, #0
 80bcba6:	60fb      	str	r3, [r7, #12]
 80bcba8:	2300      	movs	r3, #0
 80bcbaa:	72fb      	strb	r3, [r7, #11]
 80bcbac:	f107 020b 	add.w	r2, r7, #11
 80bcbb0:	8879      	ldrh	r1, [r7, #2]
 80bcbb2:	2301      	movs	r3, #1
 80bcbb4:	6878      	ldr	r0, [r7, #4]
 80bcbb6:	f001 ff9b 	bl	80beaf0 <vl53l5_read_multi>
 80bcbba:	60f8      	str	r0, [r7, #12]
 80bcbbc:	68fb      	ldr	r3, [r7, #12]
 80bcbbe:	2b00      	cmp	r3, #0
 80bcbc0:	d112      	bne.n	80bcbe8 <vl53l5_register_read_modify_write+0x5e>
 80bcbc2:	7afa      	ldrb	r2, [r7, #11]
 80bcbc4:	787b      	ldrb	r3, [r7, #1]
 80bcbc6:	4013      	ands	r3, r2
 80bcbc8:	b2db      	uxtb	r3, r3
 80bcbca:	72fb      	strb	r3, [r7, #11]
 80bcbcc:	7afa      	ldrb	r2, [r7, #11]
 80bcbce:	783b      	ldrb	r3, [r7, #0]
 80bcbd0:	4313      	orrs	r3, r2
 80bcbd2:	b2db      	uxtb	r3, r3
 80bcbd4:	72fb      	strb	r3, [r7, #11]
 80bcbd6:	f107 020b 	add.w	r2, r7, #11
 80bcbda:	8879      	ldrh	r1, [r7, #2]
 80bcbdc:	2301      	movs	r3, #1
 80bcbde:	6878      	ldr	r0, [r7, #4]
 80bcbe0:	f001 ff69 	bl	80beab6 <vl53l5_write_multi>
 80bcbe4:	60f8      	str	r0, [r7, #12]
 80bcbe6:	e000      	b.n	80bcbea <vl53l5_register_read_modify_write+0x60>
 80bcbe8:	bf00      	nop
 80bcbea:	68fb      	ldr	r3, [r7, #12]
 80bcbec:	4618      	mov	r0, r3
 80bcbee:	3710      	adds	r7, #16
 80bcbf0:	46bd      	mov	sp, r7
 80bcbf2:	bd80      	pop	{r7, pc}

080bcbf4 <vl53l5_set_page>:
 80bcbf4:	b580      	push	{r7, lr}
 80bcbf6:	b084      	sub	sp, #16
 80bcbf8:	af00      	add	r7, sp, #0
 80bcbfa:	6078      	str	r0, [r7, #4]
 80bcbfc:	460b      	mov	r3, r1
 80bcbfe:	70fb      	strb	r3, [r7, #3]
 80bcc00:	2300      	movs	r3, #0
 80bcc02:	60fb      	str	r3, [r7, #12]
 80bcc04:	1cfa      	adds	r2, r7, #3
 80bcc06:	2301      	movs	r3, #1
 80bcc08:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80bcc0c:	6878      	ldr	r0, [r7, #4]
 80bcc0e:	f001 ff52 	bl	80beab6 <vl53l5_write_multi>
 80bcc12:	60f8      	str	r0, [r7, #12]
 80bcc14:	68fb      	ldr	r3, [r7, #12]
 80bcc16:	4618      	mov	r0, r3
 80bcc18:	3710      	adds	r7, #16
 80bcc1a:	46bd      	mov	sp, r7
 80bcc1c:	bd80      	pop	{r7, pc}

080bcc1e <vl53l5_set_regulators>:
 80bcc1e:	b580      	push	{r7, lr}
 80bcc20:	b084      	sub	sp, #16
 80bcc22:	af00      	add	r7, sp, #0
 80bcc24:	6078      	str	r0, [r7, #4]
 80bcc26:	460b      	mov	r3, r1
 80bcc28:	70fb      	strb	r3, [r7, #3]
 80bcc2a:	4613      	mov	r3, r2
 80bcc2c:	70bb      	strb	r3, [r7, #2]
 80bcc2e:	2300      	movs	r3, #0
 80bcc30:	60fb      	str	r3, [r7, #12]
 80bcc32:	2300      	movs	r3, #0
 80bcc34:	817b      	strh	r3, [r7, #10]
 80bcc36:	2300      	movs	r3, #0
 80bcc38:	727b      	strb	r3, [r7, #9]
 80bcc3a:	2300      	movs	r3, #0
 80bcc3c:	723b      	strb	r3, [r7, #8]
 80bcc3e:	23fc      	movs	r3, #252	; 0xfc
 80bcc40:	727b      	strb	r3, [r7, #9]
 80bcc42:	2300      	movs	r3, #0
 80bcc44:	723b      	strb	r3, [r7, #8]
 80bcc46:	78fb      	ldrb	r3, [r7, #3]
 80bcc48:	2b00      	cmp	r3, #0
 80bcc4a:	d001      	beq.n	80bcc50 <vl53l5_set_regulators+0x32>
 80bcc4c:	2200      	movs	r2, #0
 80bcc4e:	e000      	b.n	80bcc52 <vl53l5_set_regulators+0x34>
 80bcc50:	2202      	movs	r2, #2
 80bcc52:	f997 3008 	ldrsb.w	r3, [r7, #8]
 80bcc56:	4313      	orrs	r3, r2
 80bcc58:	b25b      	sxtb	r3, r3
 80bcc5a:	723b      	strb	r3, [r7, #8]
 80bcc5c:	78bb      	ldrb	r3, [r7, #2]
 80bcc5e:	2b00      	cmp	r3, #0
 80bcc60:	bf0c      	ite	eq
 80bcc62:	2301      	moveq	r3, #1
 80bcc64:	2300      	movne	r3, #0
 80bcc66:	b2db      	uxtb	r3, r3
 80bcc68:	b25a      	sxtb	r2, r3
 80bcc6a:	f997 3008 	ldrsb.w	r3, [r7, #8]
 80bcc6e:	4313      	orrs	r3, r2
 80bcc70:	b25b      	sxtb	r3, r3
 80bcc72:	723b      	strb	r3, [r7, #8]
 80bcc74:	230f      	movs	r3, #15
 80bcc76:	817b      	strh	r3, [r7, #10]
 80bcc78:	7a3b      	ldrb	r3, [r7, #8]
 80bcc7a:	7a7a      	ldrb	r2, [r7, #9]
 80bcc7c:	8979      	ldrh	r1, [r7, #10]
 80bcc7e:	6878      	ldr	r0, [r7, #4]
 80bcc80:	f7ff ff83 	bl	80bcb8a <vl53l5_register_read_modify_write>
 80bcc84:	60f8      	str	r0, [r7, #12]
 80bcc86:	68fb      	ldr	r3, [r7, #12]
 80bcc88:	4618      	mov	r0, r3
 80bcc8a:	3710      	adds	r7, #16
 80bcc8c:	46bd      	mov	sp, r7
 80bcc8e:	bd80      	pop	{r7, pc}

080bcc90 <vl53l5_set_xshut_bypass>:
 80bcc90:	b580      	push	{r7, lr}
 80bcc92:	b086      	sub	sp, #24
 80bcc94:	af00      	add	r7, sp, #0
 80bcc96:	6078      	str	r0, [r7, #4]
 80bcc98:	460b      	mov	r3, r1
 80bcc9a:	70fb      	strb	r3, [r7, #3]
 80bcc9c:	2300      	movs	r3, #0
 80bcc9e:	613b      	str	r3, [r7, #16]
 80bcca0:	2300      	movs	r3, #0
 80bcca2:	81fb      	strh	r3, [r7, #14]
 80bcca4:	2300      	movs	r3, #0
 80bcca6:	75fb      	strb	r3, [r7, #23]
 80bcca8:	2300      	movs	r3, #0
 80bccaa:	75bb      	strb	r3, [r7, #22]
 80bccac:	2309      	movs	r3, #9
 80bccae:	81fb      	strh	r3, [r7, #14]
 80bccb0:	78fb      	ldrb	r3, [r7, #3]
 80bccb2:	2b01      	cmp	r3, #1
 80bccb4:	d104      	bne.n	80bccc0 <vl53l5_set_xshut_bypass+0x30>
 80bccb6:	23ff      	movs	r3, #255	; 0xff
 80bccb8:	75fb      	strb	r3, [r7, #23]
 80bccba:	2301      	movs	r3, #1
 80bccbc:	75bb      	strb	r3, [r7, #22]
 80bccbe:	e003      	b.n	80bccc8 <vl53l5_set_xshut_bypass+0x38>
 80bccc0:	23fe      	movs	r3, #254	; 0xfe
 80bccc2:	75fb      	strb	r3, [r7, #23]
 80bccc4:	2300      	movs	r3, #0
 80bccc6:	75bb      	strb	r3, [r7, #22]
 80bccc8:	7dbb      	ldrb	r3, [r7, #22]
 80bccca:	7dfa      	ldrb	r2, [r7, #23]
 80bcccc:	89f9      	ldrh	r1, [r7, #14]
 80bccce:	6878      	ldr	r0, [r7, #4]
 80bccd0:	f7ff ff5b 	bl	80bcb8a <vl53l5_register_read_modify_write>
 80bccd4:	6138      	str	r0, [r7, #16]
 80bccd6:	693b      	ldr	r3, [r7, #16]
 80bccd8:	4618      	mov	r0, r3
 80bccda:	3718      	adds	r7, #24
 80bccdc:	46bd      	mov	sp, r7
 80bccde:	bd80      	pop	{r7, pc}

080bcce0 <vl53l5_set_manual_xshut_state>:
 80bcce0:	b580      	push	{r7, lr}
 80bcce2:	b084      	sub	sp, #16
 80bcce4:	af00      	add	r7, sp, #0
 80bcce6:	6078      	str	r0, [r7, #4]
 80bcce8:	460b      	mov	r3, r1
 80bccea:	70fb      	strb	r3, [r7, #3]
 80bccec:	2300      	movs	r3, #0
 80bccee:	60fb      	str	r3, [r7, #12]
 80bccf0:	2300      	movs	r3, #0
 80bccf2:	817b      	strh	r3, [r7, #10]
 80bccf4:	2300      	movs	r3, #0
 80bccf6:	727b      	strb	r3, [r7, #9]
 80bccf8:	2309      	movs	r3, #9
 80bccfa:	817b      	strh	r3, [r7, #10]
 80bccfc:	2300      	movs	r3, #0
 80bccfe:	727b      	strb	r3, [r7, #9]
 80bcd00:	f107 0209 	add.w	r2, r7, #9
 80bcd04:	8979      	ldrh	r1, [r7, #10]
 80bcd06:	2301      	movs	r3, #1
 80bcd08:	6878      	ldr	r0, [r7, #4]
 80bcd0a:	f001 fef1 	bl	80beaf0 <vl53l5_read_multi>
 80bcd0e:	60f8      	str	r0, [r7, #12]
 80bcd10:	68fb      	ldr	r3, [r7, #12]
 80bcd12:	2b00      	cmp	r3, #0
 80bcd14:	d119      	bne.n	80bcd4a <vl53l5_set_manual_xshut_state+0x6a>
 80bcd16:	7a7b      	ldrb	r3, [r7, #9]
 80bcd18:	f023 0307 	bic.w	r3, r3, #7
 80bcd1c:	b2db      	uxtb	r3, r3
 80bcd1e:	727b      	strb	r3, [r7, #9]
 80bcd20:	78fb      	ldrb	r3, [r7, #3]
 80bcd22:	2b00      	cmp	r3, #0
 80bcd24:	d001      	beq.n	80bcd2a <vl53l5_set_manual_xshut_state+0x4a>
 80bcd26:	2204      	movs	r2, #4
 80bcd28:	e000      	b.n	80bcd2c <vl53l5_set_manual_xshut_state+0x4c>
 80bcd2a:	2202      	movs	r2, #2
 80bcd2c:	7a7b      	ldrb	r3, [r7, #9]
 80bcd2e:	b25b      	sxtb	r3, r3
 80bcd30:	4313      	orrs	r3, r2
 80bcd32:	b25b      	sxtb	r3, r3
 80bcd34:	b2db      	uxtb	r3, r3
 80bcd36:	727b      	strb	r3, [r7, #9]
 80bcd38:	f107 0209 	add.w	r2, r7, #9
 80bcd3c:	8979      	ldrh	r1, [r7, #10]
 80bcd3e:	2301      	movs	r3, #1
 80bcd40:	6878      	ldr	r0, [r7, #4]
 80bcd42:	f001 feb8 	bl	80beab6 <vl53l5_write_multi>
 80bcd46:	60f8      	str	r0, [r7, #12]
 80bcd48:	e000      	b.n	80bcd4c <vl53l5_set_manual_xshut_state+0x6c>
 80bcd4a:	bf00      	nop
 80bcd4c:	68fb      	ldr	r3, [r7, #12]
 80bcd4e:	4618      	mov	r0, r3
 80bcd50:	3710      	adds	r7, #16
 80bcd52:	46bd      	mov	sp, r7
 80bcd54:	bd80      	pop	{r7, pc}

080bcd56 <vl53l5_wait_mcu_boot>:
 80bcd56:	b580      	push	{r7, lr}
 80bcd58:	b088      	sub	sp, #32
 80bcd5a:	af00      	add	r7, sp, #0
 80bcd5c:	60f8      	str	r0, [r7, #12]
 80bcd5e:	607a      	str	r2, [r7, #4]
 80bcd60:	603b      	str	r3, [r7, #0]
 80bcd62:	460b      	mov	r3, r1
 80bcd64:	72fb      	strb	r3, [r7, #11]
 80bcd66:	2300      	movs	r3, #0
 80bcd68:	61fb      	str	r3, [r7, #28]
 80bcd6a:	2300      	movs	r3, #0
 80bcd6c:	61bb      	str	r3, [r7, #24]
 80bcd6e:	2300      	movs	r3, #0
 80bcd70:	617b      	str	r3, [r7, #20]
 80bcd72:	f107 0318 	add.w	r3, r7, #24
 80bcd76:	4619      	mov	r1, r3
 80bcd78:	68f8      	ldr	r0, [r7, #12]
 80bcd7a:	f001 ff35 	bl	80bebe8 <vl53l5_get_tick_count>
 80bcd7e:	61f8      	str	r0, [r7, #28]
 80bcd80:	69fb      	ldr	r3, [r7, #28]
 80bcd82:	2b00      	cmp	r3, #0
 80bcd84:	f040 80ac 	bne.w	80bcee0 <vl53l5_wait_mcu_boot+0x18a>
 80bcd88:	687b      	ldr	r3, [r7, #4]
 80bcd8a:	2b00      	cmp	r3, #0
 80bcd8c:	d102      	bne.n	80bcd94 <vl53l5_wait_mcu_boot+0x3e>
 80bcd8e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80bcd92:	607b      	str	r3, [r7, #4]
 80bcd94:	683a      	ldr	r2, [r7, #0]
 80bcd96:	687b      	ldr	r3, [r7, #4]
 80bcd98:	429a      	cmp	r2, r3
 80bcd9a:	d901      	bls.n	80bcda0 <vl53l5_wait_mcu_boot+0x4a>
 80bcd9c:	687b      	ldr	r3, [r7, #4]
 80bcd9e:	603b      	str	r3, [r7, #0]
 80bcda0:	68fb      	ldr	r3, [r7, #12]
 80bcda2:	2200      	movs	r2, #0
 80bcda4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80bcda8:	68fb      	ldr	r3, [r7, #12]
 80bcdaa:	2200      	movs	r2, #0
 80bcdac:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 80bcdb0:	68fb      	ldr	r3, [r7, #12]
 80bcdb2:	f103 0258 	add.w	r2, r3, #88	; 0x58
 80bcdb6:	2301      	movs	r3, #1
 80bcdb8:	2106      	movs	r1, #6
 80bcdba:	68f8      	ldr	r0, [r7, #12]
 80bcdbc:	f001 fe98 	bl	80beaf0 <vl53l5_read_multi>
 80bcdc0:	61f8      	str	r0, [r7, #28]
 80bcdc2:	69fb      	ldr	r3, [r7, #28]
 80bcdc4:	2b00      	cmp	r3, #0
 80bcdc6:	f040 808d 	bne.w	80bcee4 <vl53l5_wait_mcu_boot+0x18e>
 80bcdca:	68fb      	ldr	r3, [r7, #12]
 80bcdcc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80bcdd0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80bcdd4:	b2db      	uxtb	r3, r3
 80bcdd6:	2b00      	cmp	r3, #0
 80bcdd8:	d018      	beq.n	80bce0c <vl53l5_wait_mcu_boot+0xb6>
 80bcdda:	68fb      	ldr	r3, [r7, #12]
 80bcddc:	f103 0259 	add.w	r2, r3, #89	; 0x59
 80bcde0:	2301      	movs	r3, #1
 80bcde2:	2107      	movs	r1, #7
 80bcde4:	68f8      	ldr	r0, [r7, #12]
 80bcde6:	f001 fe83 	bl	80beaf0 <vl53l5_read_multi>
 80bcdea:	61f8      	str	r0, [r7, #28]
 80bcdec:	69fb      	ldr	r3, [r7, #28]
 80bcdee:	2b00      	cmp	r3, #0
 80bcdf0:	d17a      	bne.n	80bcee8 <vl53l5_wait_mcu_boot+0x192>
 80bcdf2:	68fb      	ldr	r3, [r7, #12]
 80bcdf4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80bcdf8:	2b00      	cmp	r3, #0
 80bcdfa:	d003      	beq.n	80bce04 <vl53l5_wait_mcu_boot+0xae>
 80bcdfc:	f06f 033a 	mvn.w	r3, #58	; 0x3a
 80bce00:	61fb      	str	r3, [r7, #28]
 80bce02:	e078      	b.n	80bcef6 <vl53l5_wait_mcu_boot+0x1a0>
 80bce04:	f06f 0340 	mvn.w	r3, #64	; 0x40
 80bce08:	61fb      	str	r3, [r7, #28]
 80bce0a:	e074      	b.n	80bcef6 <vl53l5_wait_mcu_boot+0x1a0>
 80bce0c:	7afb      	ldrb	r3, [r7, #11]
 80bce0e:	2b02      	cmp	r3, #2
 80bce10:	d10b      	bne.n	80bce2a <vl53l5_wait_mcu_boot+0xd4>
 80bce12:	68fb      	ldr	r3, [r7, #12]
 80bce14:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80bce18:	f003 0308 	and.w	r3, r3, #8
 80bce1c:	b2db      	uxtb	r3, r3
 80bce1e:	2b00      	cmp	r3, #0
 80bce20:	d019      	beq.n	80bce56 <vl53l5_wait_mcu_boot+0x100>
 80bce22:	f06f 0344 	mvn.w	r3, #68	; 0x44
 80bce26:	61fb      	str	r3, [r7, #28]
 80bce28:	e065      	b.n	80bcef6 <vl53l5_wait_mcu_boot+0x1a0>
 80bce2a:	7afb      	ldrb	r3, [r7, #11]
 80bce2c:	2b01      	cmp	r3, #1
 80bce2e:	d107      	bne.n	80bce40 <vl53l5_wait_mcu_boot+0xea>
 80bce30:	68fb      	ldr	r3, [r7, #12]
 80bce32:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80bce36:	f003 0301 	and.w	r3, r3, #1
 80bce3a:	b2db      	uxtb	r3, r3
 80bce3c:	2b00      	cmp	r3, #0
 80bce3e:	d12e      	bne.n	80bce9e <vl53l5_wait_mcu_boot+0x148>
 80bce40:	7afb      	ldrb	r3, [r7, #11]
 80bce42:	2b00      	cmp	r3, #0
 80bce44:	d107      	bne.n	80bce56 <vl53l5_wait_mcu_boot+0x100>
 80bce46:	68fb      	ldr	r3, [r7, #12]
 80bce48:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80bce4c:	f003 0301 	and.w	r3, r3, #1
 80bce50:	b2db      	uxtb	r3, r3
 80bce52:	2b00      	cmp	r3, #0
 80bce54:	d023      	beq.n	80bce9e <vl53l5_wait_mcu_boot+0x148>
 80bce56:	f107 0314 	add.w	r3, r7, #20
 80bce5a:	4619      	mov	r1, r3
 80bce5c:	68f8      	ldr	r0, [r7, #12]
 80bce5e:	f001 fec3 	bl	80bebe8 <vl53l5_get_tick_count>
 80bce62:	61f8      	str	r0, [r7, #28]
 80bce64:	69fb      	ldr	r3, [r7, #28]
 80bce66:	2b00      	cmp	r3, #0
 80bce68:	d140      	bne.n	80bceec <vl53l5_wait_mcu_boot+0x196>
 80bce6a:	69b9      	ldr	r1, [r7, #24]
 80bce6c:	697a      	ldr	r2, [r7, #20]
 80bce6e:	687b      	ldr	r3, [r7, #4]
 80bce70:	68f8      	ldr	r0, [r7, #12]
 80bce72:	f001 fed4 	bl	80bec1e <vl53l5_check_for_timeout>
 80bce76:	61f8      	str	r0, [r7, #28]
 80bce78:	69fb      	ldr	r3, [r7, #28]
 80bce7a:	2b00      	cmp	r3, #0
 80bce7c:	d003      	beq.n	80bce86 <vl53l5_wait_mcu_boot+0x130>
 80bce7e:	f06f 0332 	mvn.w	r3, #50	; 0x32
 80bce82:	61fb      	str	r3, [r7, #28]
 80bce84:	e037      	b.n	80bcef6 <vl53l5_wait_mcu_boot+0x1a0>
 80bce86:	683b      	ldr	r3, [r7, #0]
 80bce88:	2b00      	cmp	r3, #0
 80bce8a:	d091      	beq.n	80bcdb0 <vl53l5_wait_mcu_boot+0x5a>
 80bce8c:	6839      	ldr	r1, [r7, #0]
 80bce8e:	68f8      	ldr	r0, [r7, #12]
 80bce90:	f001 fe6a 	bl	80beb68 <vl53l5_wait_ms>
 80bce94:	61f8      	str	r0, [r7, #28]
 80bce96:	69fb      	ldr	r3, [r7, #28]
 80bce98:	2b00      	cmp	r3, #0
 80bce9a:	d129      	bne.n	80bcef0 <vl53l5_wait_mcu_boot+0x19a>
 80bce9c:	e788      	b.n	80bcdb0 <vl53l5_wait_mcu_boot+0x5a>
 80bce9e:	bf00      	nop
 80bcea0:	68fb      	ldr	r3, [r7, #12]
 80bcea2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80bcea6:	f003 0308 	and.w	r3, r3, #8
 80bceaa:	b2db      	uxtb	r3, r3
 80bceac:	2b00      	cmp	r3, #0
 80bceae:	d021      	beq.n	80bcef4 <vl53l5_wait_mcu_boot+0x19e>
 80bceb0:	68fb      	ldr	r3, [r7, #12]
 80bceb2:	f103 0259 	add.w	r2, r3, #89	; 0x59
 80bceb6:	2301      	movs	r3, #1
 80bceb8:	2107      	movs	r1, #7
 80bceba:	68f8      	ldr	r0, [r7, #12]
 80bcebc:	f001 fe18 	bl	80beaf0 <vl53l5_read_multi>
 80bcec0:	68fb      	ldr	r3, [r7, #12]
 80bcec2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80bcec6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80bceca:	b2db      	uxtb	r3, r3
 80bcecc:	2b00      	cmp	r3, #0
 80bcece:	d003      	beq.n	80bced8 <vl53l5_wait_mcu_boot+0x182>
 80bced0:	f06f 0331 	mvn.w	r3, #49	; 0x31
 80bced4:	61fb      	str	r3, [r7, #28]
 80bced6:	e00e      	b.n	80bcef6 <vl53l5_wait_mcu_boot+0x1a0>
 80bced8:	f06f 0344 	mvn.w	r3, #68	; 0x44
 80bcedc:	61fb      	str	r3, [r7, #28]
 80bcede:	e00a      	b.n	80bcef6 <vl53l5_wait_mcu_boot+0x1a0>
 80bcee0:	bf00      	nop
 80bcee2:	e008      	b.n	80bcef6 <vl53l5_wait_mcu_boot+0x1a0>
 80bcee4:	bf00      	nop
 80bcee6:	e006      	b.n	80bcef6 <vl53l5_wait_mcu_boot+0x1a0>
 80bcee8:	bf00      	nop
 80bceea:	e004      	b.n	80bcef6 <vl53l5_wait_mcu_boot+0x1a0>
 80bceec:	bf00      	nop
 80bceee:	e002      	b.n	80bcef6 <vl53l5_wait_mcu_boot+0x1a0>
 80bcef0:	bf00      	nop
 80bcef2:	e000      	b.n	80bcef6 <vl53l5_wait_mcu_boot+0x1a0>
 80bcef4:	bf00      	nop
 80bcef6:	69fb      	ldr	r3, [r7, #28]
 80bcef8:	4618      	mov	r0, r3
 80bcefa:	3720      	adds	r7, #32
 80bcefc:	46bd      	mov	sp, r7
 80bcefe:	bd80      	pop	{r7, pc}

080bcf00 <vl53l5_check_device_booted>:
 80bcf00:	b580      	push	{r7, lr}
 80bcf02:	b084      	sub	sp, #16
 80bcf04:	af00      	add	r7, sp, #0
 80bcf06:	6078      	str	r0, [r7, #4]
 80bcf08:	2300      	movs	r3, #0
 80bcf0a:	60fb      	str	r3, [r7, #12]
 80bcf0c:	687b      	ldr	r3, [r7, #4]
 80bcf0e:	2200      	movs	r2, #0
 80bcf10:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 80bcf14:	2100      	movs	r1, #0
 80bcf16:	6878      	ldr	r0, [r7, #4]
 80bcf18:	f7ff fe6c 	bl	80bcbf4 <vl53l5_set_page>
 80bcf1c:	60f8      	str	r0, [r7, #12]
 80bcf1e:	68fb      	ldr	r3, [r7, #12]
 80bcf20:	2b00      	cmp	r3, #0
 80bcf22:	d123      	bne.n	80bcf6c <vl53l5_check_device_booted+0x6c>
 80bcf24:	687b      	ldr	r3, [r7, #4]
 80bcf26:	f103 0259 	add.w	r2, r3, #89	; 0x59
 80bcf2a:	2301      	movs	r3, #1
 80bcf2c:	2107      	movs	r1, #7
 80bcf2e:	6878      	ldr	r0, [r7, #4]
 80bcf30:	f001 fdde 	bl	80beaf0 <vl53l5_read_multi>
 80bcf34:	60f8      	str	r0, [r7, #12]
 80bcf36:	68fb      	ldr	r3, [r7, #12]
 80bcf38:	2b00      	cmp	r3, #0
 80bcf3a:	d111      	bne.n	80bcf60 <vl53l5_check_device_booted+0x60>
 80bcf3c:	687b      	ldr	r3, [r7, #4]
 80bcf3e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80bcf42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80bcf46:	b2db      	uxtb	r3, r3
 80bcf48:	2b00      	cmp	r3, #0
 80bcf4a:	d004      	beq.n	80bcf56 <vl53l5_check_device_booted+0x56>
 80bcf4c:	687b      	ldr	r3, [r7, #4]
 80bcf4e:	2201      	movs	r2, #1
 80bcf50:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 80bcf54:	e005      	b.n	80bcf62 <vl53l5_check_device_booted+0x62>
 80bcf56:	687b      	ldr	r3, [r7, #4]
 80bcf58:	2200      	movs	r2, #0
 80bcf5a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 80bcf5e:	e000      	b.n	80bcf62 <vl53l5_check_device_booted+0x62>
 80bcf60:	bf00      	nop
 80bcf62:	2102      	movs	r1, #2
 80bcf64:	6878      	ldr	r0, [r7, #4]
 80bcf66:	f7ff fe45 	bl	80bcbf4 <vl53l5_set_page>
 80bcf6a:	e000      	b.n	80bcf6e <vl53l5_check_device_booted+0x6e>
 80bcf6c:	bf00      	nop
 80bcf6e:	68fb      	ldr	r3, [r7, #12]
 80bcf70:	4618      	mov	r0, r3
 80bcf72:	3710      	adds	r7, #16
 80bcf74:	46bd      	mov	sp, r7
 80bcf76:	bd80      	pop	{r7, pc}

080bcf78 <_write_byte>:
 80bcf78:	b580      	push	{r7, lr}
 80bcf7a:	b082      	sub	sp, #8
 80bcf7c:	af00      	add	r7, sp, #0
 80bcf7e:	6078      	str	r0, [r7, #4]
 80bcf80:	460b      	mov	r3, r1
 80bcf82:	807b      	strh	r3, [r7, #2]
 80bcf84:	4613      	mov	r3, r2
 80bcf86:	707b      	strb	r3, [r7, #1]
 80bcf88:	1c7a      	adds	r2, r7, #1
 80bcf8a:	8879      	ldrh	r1, [r7, #2]
 80bcf8c:	2301      	movs	r3, #1
 80bcf8e:	6878      	ldr	r0, [r7, #4]
 80bcf90:	f001 fd91 	bl	80beab6 <vl53l5_write_multi>
 80bcf94:	4603      	mov	r3, r0
 80bcf96:	4618      	mov	r0, r3
 80bcf98:	3708      	adds	r7, #8
 80bcf9a:	46bd      	mov	sp, r7
 80bcf9c:	bd80      	pop	{r7, pc}

080bcf9e <_check_rom_firmware_boot_cut_1_2>:
 80bcf9e:	b580      	push	{r7, lr}
 80bcfa0:	b084      	sub	sp, #16
 80bcfa2:	af00      	add	r7, sp, #0
 80bcfa4:	6078      	str	r0, [r7, #4]
 80bcfa6:	2300      	movs	r3, #0
 80bcfa8:	60fb      	str	r3, [r7, #12]
 80bcfaa:	2300      	movs	r3, #0
 80bcfac:	2200      	movs	r2, #0
 80bcfae:	2101      	movs	r1, #1
 80bcfb0:	6878      	ldr	r0, [r7, #4]
 80bcfb2:	f7ff fed0 	bl	80bcd56 <vl53l5_wait_mcu_boot>
 80bcfb6:	60f8      	str	r0, [r7, #12]
 80bcfb8:	68fb      	ldr	r3, [r7, #12]
 80bcfba:	2b00      	cmp	r3, #0
 80bcfbc:	db06      	blt.n	80bcfcc <_check_rom_firmware_boot_cut_1_2+0x2e>
 80bcfbe:	2201      	movs	r2, #1
 80bcfc0:	210e      	movs	r1, #14
 80bcfc2:	6878      	ldr	r0, [r7, #4]
 80bcfc4:	f7ff ffd8 	bl	80bcf78 <_write_byte>
 80bcfc8:	60f8      	str	r0, [r7, #12]
 80bcfca:	e000      	b.n	80bcfce <_check_rom_firmware_boot_cut_1_2+0x30>
 80bcfcc:	bf00      	nop
 80bcfce:	68fb      	ldr	r3, [r7, #12]
 80bcfd0:	4618      	mov	r0, r3
 80bcfd2:	3710      	adds	r7, #16
 80bcfd4:	46bd      	mov	sp, r7
 80bcfd6:	bd80      	pop	{r7, pc}

080bcfd8 <vl53l5_check_rom_firmware_boot>:
 80bcfd8:	b580      	push	{r7, lr}
 80bcfda:	b084      	sub	sp, #16
 80bcfdc:	af00      	add	r7, sp, #0
 80bcfde:	6078      	str	r0, [r7, #4]
 80bcfe0:	2300      	movs	r3, #0
 80bcfe2:	60fb      	str	r3, [r7, #12]
 80bcfe4:	2300      	movs	r3, #0
 80bcfe6:	72fb      	strb	r3, [r7, #11]
 80bcfe8:	2300      	movs	r3, #0
 80bcfea:	72bb      	strb	r3, [r7, #10]
 80bcfec:	2100      	movs	r1, #0
 80bcfee:	6878      	ldr	r0, [r7, #4]
 80bcff0:	f7ff fe00 	bl	80bcbf4 <vl53l5_set_page>
 80bcff4:	60f8      	str	r0, [r7, #12]
 80bcff6:	68fb      	ldr	r3, [r7, #12]
 80bcff8:	2b00      	cmp	r3, #0
 80bcffa:	db37      	blt.n	80bd06c <vl53l5_check_rom_firmware_boot+0x94>
 80bcffc:	f107 020b 	add.w	r2, r7, #11
 80bd000:	2301      	movs	r3, #1
 80bd002:	2100      	movs	r1, #0
 80bd004:	6878      	ldr	r0, [r7, #4]
 80bd006:	f001 fd73 	bl	80beaf0 <vl53l5_read_multi>
 80bd00a:	60f8      	str	r0, [r7, #12]
 80bd00c:	68fb      	ldr	r3, [r7, #12]
 80bd00e:	2b00      	cmp	r3, #0
 80bd010:	db1b      	blt.n	80bd04a <vl53l5_check_rom_firmware_boot+0x72>
 80bd012:	f107 020a 	add.w	r2, r7, #10
 80bd016:	2301      	movs	r3, #1
 80bd018:	2101      	movs	r1, #1
 80bd01a:	6878      	ldr	r0, [r7, #4]
 80bd01c:	f001 fd68 	bl	80beaf0 <vl53l5_read_multi>
 80bd020:	60f8      	str	r0, [r7, #12]
 80bd022:	68fb      	ldr	r3, [r7, #12]
 80bd024:	2b00      	cmp	r3, #0
 80bd026:	db12      	blt.n	80bd04e <vl53l5_check_rom_firmware_boot+0x76>
 80bd028:	7afb      	ldrb	r3, [r7, #11]
 80bd02a:	2bf0      	cmp	r3, #240	; 0xf0
 80bd02c:	d109      	bne.n	80bd042 <vl53l5_check_rom_firmware_boot+0x6a>
 80bd02e:	7abb      	ldrb	r3, [r7, #10]
 80bd030:	2b02      	cmp	r3, #2
 80bd032:	d106      	bne.n	80bd042 <vl53l5_check_rom_firmware_boot+0x6a>
 80bd034:	6878      	ldr	r0, [r7, #4]
 80bd036:	f7ff ffb2 	bl	80bcf9e <_check_rom_firmware_boot_cut_1_2>
 80bd03a:	60f8      	str	r0, [r7, #12]
 80bd03c:	68fb      	ldr	r3, [r7, #12]
 80bd03e:	2b00      	cmp	r3, #0
 80bd040:	e006      	b.n	80bd050 <vl53l5_check_rom_firmware_boot+0x78>
 80bd042:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80bd046:	60fb      	str	r3, [r7, #12]
 80bd048:	e002      	b.n	80bd050 <vl53l5_check_rom_firmware_boot+0x78>
 80bd04a:	bf00      	nop
 80bd04c:	e000      	b.n	80bd050 <vl53l5_check_rom_firmware_boot+0x78>
 80bd04e:	bf00      	nop
 80bd050:	68fb      	ldr	r3, [r7, #12]
 80bd052:	2b00      	cmp	r3, #0
 80bd054:	d004      	beq.n	80bd060 <vl53l5_check_rom_firmware_boot+0x88>
 80bd056:	2102      	movs	r1, #2
 80bd058:	6878      	ldr	r0, [r7, #4]
 80bd05a:	f7ff fdcb 	bl	80bcbf4 <vl53l5_set_page>
 80bd05e:	e006      	b.n	80bd06e <vl53l5_check_rom_firmware_boot+0x96>
 80bd060:	2102      	movs	r1, #2
 80bd062:	6878      	ldr	r0, [r7, #4]
 80bd064:	f7ff fdc6 	bl	80bcbf4 <vl53l5_set_page>
 80bd068:	60f8      	str	r0, [r7, #12]
 80bd06a:	e000      	b.n	80bd06e <vl53l5_check_rom_firmware_boot+0x96>
 80bd06c:	bf00      	nop
 80bd06e:	68fb      	ldr	r3, [r7, #12]
 80bd070:	4618      	mov	r0, r3
 80bd072:	3710      	adds	r7, #16
 80bd074:	46bd      	mov	sp, r7
 80bd076:	bd80      	pop	{r7, pc}

080bd078 <vl53l5_dci_write_command>:
 80bd078:	b580      	push	{r7, lr}
 80bd07a:	b086      	sub	sp, #24
 80bd07c:	af00      	add	r7, sp, #0
 80bd07e:	6078      	str	r0, [r7, #4]
 80bd080:	460b      	mov	r3, r1
 80bd082:	70fb      	strb	r3, [r7, #3]
 80bd084:	4613      	mov	r3, r2
 80bd086:	70bb      	strb	r3, [r7, #2]
 80bd088:	2300      	movs	r3, #0
 80bd08a:	617b      	str	r3, [r7, #20]
 80bd08c:	2300      	movs	r3, #0
 80bd08e:	60bb      	str	r3, [r7, #8]
 80bd090:	2300      	movs	r3, #0
 80bd092:	613b      	str	r3, [r7, #16]
 80bd094:	2300      	movs	r3, #0
 80bd096:	60fb      	str	r3, [r7, #12]
 80bd098:	687b      	ldr	r3, [r7, #4]
 80bd09a:	2b00      	cmp	r3, #0
 80bd09c:	d103      	bne.n	80bd0a6 <vl53l5_dci_write_command+0x2e>
 80bd09e:	f06f 0303 	mvn.w	r3, #3
 80bd0a2:	617b      	str	r3, [r7, #20]
 80bd0a4:	e064      	b.n	80bd170 <vl53l5_dci_write_command+0xf8>
 80bd0a6:	687b      	ldr	r3, [r7, #4]
 80bd0a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80bd0aa:	2b00      	cmp	r3, #0
 80bd0ac:	d103      	bne.n	80bd0b6 <vl53l5_dci_write_command+0x3e>
 80bd0ae:	f06f 0303 	mvn.w	r3, #3
 80bd0b2:	617b      	str	r3, [r7, #20]
 80bd0b4:	e05c      	b.n	80bd170 <vl53l5_dci_write_command+0xf8>
 80bd0b6:	78fb      	ldrb	r3, [r7, #3]
 80bd0b8:	2b04      	cmp	r3, #4
 80bd0ba:	d903      	bls.n	80bd0c4 <vl53l5_dci_write_command+0x4c>
 80bd0bc:	f06f 034f 	mvn.w	r3, #79	; 0x4f
 80bd0c0:	617b      	str	r3, [r7, #20]
 80bd0c2:	e055      	b.n	80bd170 <vl53l5_dci_write_command+0xf8>
 80bd0c4:	687b      	ldr	r3, [r7, #4]
 80bd0c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80bd0c8:	687b      	ldr	r3, [r7, #4]
 80bd0ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80bd0cc:	1ad3      	subs	r3, r2, r3
 80bd0ce:	60bb      	str	r3, [r7, #8]
 80bd0d0:	2304      	movs	r3, #4
 80bd0d2:	613b      	str	r3, [r7, #16]
 80bd0d4:	687b      	ldr	r3, [r7, #4]
 80bd0d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80bd0d8:	2b00      	cmp	r3, #0
 80bd0da:	d002      	beq.n	80bd0e2 <vl53l5_dci_write_command+0x6a>
 80bd0dc:	693b      	ldr	r3, [r7, #16]
 80bd0de:	3304      	adds	r3, #4
 80bd0e0:	613b      	str	r3, [r7, #16]
 80bd0e2:	693a      	ldr	r2, [r7, #16]
 80bd0e4:	68bb      	ldr	r3, [r7, #8]
 80bd0e6:	429a      	cmp	r2, r3
 80bd0e8:	d903      	bls.n	80bd0f2 <vl53l5_dci_write_command+0x7a>
 80bd0ea:	f06f 035b 	mvn.w	r3, #91	; 0x5b
 80bd0ee:	617b      	str	r3, [r7, #20]
 80bd0f0:	e03e      	b.n	80bd170 <vl53l5_dci_write_command+0xf8>
 80bd0f2:	687b      	ldr	r3, [r7, #4]
 80bd0f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80bd0f6:	693b      	ldr	r3, [r7, #16]
 80bd0f8:	4413      	add	r3, r2
 80bd0fa:	f642 72f0 	movw	r2, #12272	; 0x2ff0
 80bd0fe:	4293      	cmp	r3, r2
 80bd100:	d903      	bls.n	80bd10a <vl53l5_dci_write_command+0x92>
 80bd102:	f06f 030d 	mvn.w	r3, #13
 80bd106:	617b      	str	r3, [r7, #20]
 80bd108:	e032      	b.n	80bd170 <vl53l5_dci_write_command+0xf8>
 80bd10a:	687b      	ldr	r3, [r7, #4]
 80bd10c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80bd10e:	687b      	ldr	r3, [r7, #4]
 80bd110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80bd112:	4413      	add	r3, r2
 80bd114:	60fb      	str	r3, [r7, #12]
 80bd116:	687b      	ldr	r3, [r7, #4]
 80bd118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80bd11a:	2b00      	cmp	r3, #0
 80bd11c:	d00c      	beq.n	80bd138 <vl53l5_dci_write_command+0xc0>
 80bd11e:	687b      	ldr	r3, [r7, #4]
 80bd120:	3330      	adds	r3, #48	; 0x30
 80bd122:	4619      	mov	r1, r3
 80bd124:	68f8      	ldr	r0, [r7, #12]
 80bd126:	f000 f89b 	bl	80bd260 <_encode_end_data_footer>
 80bd12a:	6178      	str	r0, [r7, #20]
 80bd12c:	68fb      	ldr	r3, [r7, #12]
 80bd12e:	3304      	adds	r3, #4
 80bd130:	60fb      	str	r3, [r7, #12]
 80bd132:	697b      	ldr	r3, [r7, #20]
 80bd134:	2b00      	cmp	r3, #0
 80bd136:	d118      	bne.n	80bd16a <vl53l5_dci_write_command+0xf2>
 80bd138:	687b      	ldr	r3, [r7, #4]
 80bd13a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80bd13e:	78bb      	ldrb	r3, [r7, #2]
 80bd140:	78fa      	ldrb	r2, [r7, #3]
 80bd142:	68f8      	ldr	r0, [r7, #12]
 80bd144:	f000 f8ab 	bl	80bd29e <_encode_command_footer>
 80bd148:	687b      	ldr	r3, [r7, #4]
 80bd14a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80bd14c:	687b      	ldr	r3, [r7, #4]
 80bd14e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80bd150:	4619      	mov	r1, r3
 80bd152:	4610      	mov	r0, r2
 80bd154:	f000 fc02 	bl	80bd95c <vl53l5_dci_swap_buffer_byte_ordering>
 80bd158:	6178      	str	r0, [r7, #20]
 80bd15a:	697b      	ldr	r3, [r7, #20]
 80bd15c:	2b00      	cmp	r3, #0
 80bd15e:	db06      	blt.n	80bd16e <vl53l5_dci_write_command+0xf6>
 80bd160:	6878      	ldr	r0, [r7, #4]
 80bd162:	f000 f8c0 	bl	80bd2e6 <_write_comms_buffer_to_command_ui>
 80bd166:	6178      	str	r0, [r7, #20]
 80bd168:	e002      	b.n	80bd170 <vl53l5_dci_write_command+0xf8>
 80bd16a:	bf00      	nop
 80bd16c:	e000      	b.n	80bd170 <vl53l5_dci_write_command+0xf8>
 80bd16e:	bf00      	nop
 80bd170:	697b      	ldr	r3, [r7, #20]
 80bd172:	4618      	mov	r0, r3
 80bd174:	3718      	adds	r7, #24
 80bd176:	46bd      	mov	sp, r7
 80bd178:	bd80      	pop	{r7, pc}

080bd17a <vl53l5_dci_read_command>:
 80bd17a:	b580      	push	{r7, lr}
 80bd17c:	b084      	sub	sp, #16
 80bd17e:	af00      	add	r7, sp, #0
 80bd180:	6078      	str	r0, [r7, #4]
 80bd182:	2300      	movs	r3, #0
 80bd184:	60fb      	str	r3, [r7, #12]
 80bd186:	687b      	ldr	r3, [r7, #4]
 80bd188:	2b00      	cmp	r3, #0
 80bd18a:	d103      	bne.n	80bd194 <vl53l5_dci_read_command+0x1a>
 80bd18c:	f06f 0303 	mvn.w	r3, #3
 80bd190:	60fb      	str	r3, [r7, #12]
 80bd192:	e01b      	b.n	80bd1cc <vl53l5_dci_read_command+0x52>
 80bd194:	687b      	ldr	r3, [r7, #4]
 80bd196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80bd198:	2b00      	cmp	r3, #0
 80bd19a:	d103      	bne.n	80bd1a4 <vl53l5_dci_read_command+0x2a>
 80bd19c:	f06f 0303 	mvn.w	r3, #3
 80bd1a0:	60fb      	str	r3, [r7, #12]
 80bd1a2:	e013      	b.n	80bd1cc <vl53l5_dci_read_command+0x52>
 80bd1a4:	6878      	ldr	r0, [r7, #4]
 80bd1a6:	f000 f8b9 	bl	80bd31c <_read_command_ui_to_comms_buffer>
 80bd1aa:	60f8      	str	r0, [r7, #12]
 80bd1ac:	68fb      	ldr	r3, [r7, #12]
 80bd1ae:	2b00      	cmp	r3, #0
 80bd1b0:	db0b      	blt.n	80bd1ca <vl53l5_dci_read_command+0x50>
 80bd1b2:	687b      	ldr	r3, [r7, #4]
 80bd1b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80bd1b6:	687b      	ldr	r3, [r7, #4]
 80bd1b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80bd1ba:	4619      	mov	r1, r3
 80bd1bc:	4610      	mov	r0, r2
 80bd1be:	f000 fbcd 	bl	80bd95c <vl53l5_dci_swap_buffer_byte_ordering>
 80bd1c2:	60f8      	str	r0, [r7, #12]
 80bd1c4:	68fb      	ldr	r3, [r7, #12]
 80bd1c6:	2b00      	cmp	r3, #0
 80bd1c8:	e000      	b.n	80bd1cc <vl53l5_dci_read_command+0x52>
 80bd1ca:	bf00      	nop
 80bd1cc:	68fb      	ldr	r3, [r7, #12]
 80bd1ce:	4618      	mov	r0, r3
 80bd1d0:	3710      	adds	r7, #16
 80bd1d2:	46bd      	mov	sp, r7
 80bd1d4:	bd80      	pop	{r7, pc}

080bd1d6 <vl53l5_dci_poll_command_status>:
 80bd1d6:	b580      	push	{r7, lr}
 80bd1d8:	b088      	sub	sp, #32
 80bd1da:	af02      	add	r7, sp, #8
 80bd1dc:	60f8      	str	r0, [r7, #12]
 80bd1de:	60b9      	str	r1, [r7, #8]
 80bd1e0:	607a      	str	r2, [r7, #4]
 80bd1e2:	2300      	movs	r3, #0
 80bd1e4:	617b      	str	r3, [r7, #20]
 80bd1e6:	2300      	movs	r3, #0
 80bd1e8:	613b      	str	r3, [r7, #16]
 80bd1ea:	68fb      	ldr	r3, [r7, #12]
 80bd1ec:	2b00      	cmp	r3, #0
 80bd1ee:	d103      	bne.n	80bd1f8 <vl53l5_dci_poll_command_status+0x22>
 80bd1f0:	f06f 0303 	mvn.w	r3, #3
 80bd1f4:	617b      	str	r3, [r7, #20]
 80bd1f6:	e02e      	b.n	80bd256 <vl53l5_dci_poll_command_status+0x80>
 80bd1f8:	687b      	ldr	r3, [r7, #4]
 80bd1fa:	2b00      	cmp	r3, #0
 80bd1fc:	d102      	bne.n	80bd204 <vl53l5_dci_poll_command_status+0x2e>
 80bd1fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80bd202:	607b      	str	r3, [r7, #4]
 80bd204:	f107 0310 	add.w	r3, r7, #16
 80bd208:	4619      	mov	r1, r3
 80bd20a:	68f8      	ldr	r0, [r7, #12]
 80bd20c:	f001 fcec 	bl	80bebe8 <vl53l5_get_tick_count>
 80bd210:	6178      	str	r0, [r7, #20]
 80bd212:	697b      	ldr	r3, [r7, #20]
 80bd214:	2b00      	cmp	r3, #0
 80bd216:	db1b      	blt.n	80bd250 <vl53l5_dci_poll_command_status+0x7a>
 80bd218:	693a      	ldr	r2, [r7, #16]
 80bd21a:	2300      	movs	r3, #0
 80bd21c:	9301      	str	r3, [sp, #4]
 80bd21e:	2301      	movs	r3, #1
 80bd220:	9300      	str	r3, [sp, #0]
 80bd222:	4613      	mov	r3, r2
 80bd224:	687a      	ldr	r2, [r7, #4]
 80bd226:	68b9      	ldr	r1, [r7, #8]
 80bd228:	68f8      	ldr	r0, [r7, #12]
 80bd22a:	f000 f8f9 	bl	80bd420 <_poll_command_status_block>
 80bd22e:	6178      	str	r0, [r7, #20]
 80bd230:	697b      	ldr	r3, [r7, #20]
 80bd232:	2b00      	cmp	r3, #0
 80bd234:	d10e      	bne.n	80bd254 <vl53l5_dci_poll_command_status+0x7e>
 80bd236:	693a      	ldr	r2, [r7, #16]
 80bd238:	2301      	movs	r3, #1
 80bd23a:	9301      	str	r3, [sp, #4]
 80bd23c:	2301      	movs	r3, #1
 80bd23e:	9300      	str	r3, [sp, #0]
 80bd240:	4613      	mov	r3, r2
 80bd242:	687a      	ldr	r2, [r7, #4]
 80bd244:	68b9      	ldr	r1, [r7, #8]
 80bd246:	68f8      	ldr	r0, [r7, #12]
 80bd248:	f000 f8ea 	bl	80bd420 <_poll_command_status_block>
 80bd24c:	6178      	str	r0, [r7, #20]
 80bd24e:	e002      	b.n	80bd256 <vl53l5_dci_poll_command_status+0x80>
 80bd250:	bf00      	nop
 80bd252:	e000      	b.n	80bd256 <vl53l5_dci_poll_command_status+0x80>
 80bd254:	bf00      	nop
 80bd256:	697b      	ldr	r3, [r7, #20]
 80bd258:	4618      	mov	r0, r3
 80bd25a:	3718      	adds	r7, #24
 80bd25c:	46bd      	mov	sp, r7
 80bd25e:	bd80      	pop	{r7, pc}

080bd260 <_encode_end_data_footer>:
 80bd260:	b580      	push	{r7, lr}
 80bd262:	b086      	sub	sp, #24
 80bd264:	af02      	add	r7, sp, #8
 80bd266:	6078      	str	r0, [r7, #4]
 80bd268:	6039      	str	r1, [r7, #0]
 80bd26a:	2300      	movs	r3, #0
 80bd26c:	60fb      	str	r3, [r7, #12]
 80bd26e:	683b      	ldr	r3, [r7, #0]
 80bd270:	681b      	ldr	r3, [r3, #0]
 80bd272:	1d19      	adds	r1, r3, #4
 80bd274:	2300      	movs	r3, #0
 80bd276:	9300      	str	r3, [sp, #0]
 80bd278:	2300      	movs	r3, #0
 80bd27a:	220f      	movs	r2, #15
 80bd27c:	6878      	ldr	r0, [r7, #4]
 80bd27e:	f000 fabf 	bl	80bd800 <vl53l5_dci_encode_block_header>
 80bd282:	60f8      	str	r0, [r7, #12]
 80bd284:	68fb      	ldr	r3, [r7, #12]
 80bd286:	2b00      	cmp	r3, #0
 80bd288:	d104      	bne.n	80bd294 <_encode_end_data_footer+0x34>
 80bd28a:	683b      	ldr	r3, [r7, #0]
 80bd28c:	681b      	ldr	r3, [r3, #0]
 80bd28e:	1d1a      	adds	r2, r3, #4
 80bd290:	683b      	ldr	r3, [r7, #0]
 80bd292:	601a      	str	r2, [r3, #0]
 80bd294:	68fb      	ldr	r3, [r7, #12]
 80bd296:	4618      	mov	r0, r3
 80bd298:	3710      	adds	r7, #16
 80bd29a:	46bd      	mov	sp, r7
 80bd29c:	bd80      	pop	{r7, pc}

080bd29e <_encode_command_footer>:
 80bd29e:	b580      	push	{r7, lr}
 80bd2a0:	b086      	sub	sp, #24
 80bd2a2:	af00      	add	r7, sp, #0
 80bd2a4:	60f8      	str	r0, [r7, #12]
 80bd2a6:	60b9      	str	r1, [r7, #8]
 80bd2a8:	4611      	mov	r1, r2
 80bd2aa:	461a      	mov	r2, r3
 80bd2ac:	460b      	mov	r3, r1
 80bd2ae:	71fb      	strb	r3, [r7, #7]
 80bd2b0:	4613      	mov	r3, r2
 80bd2b2:	71bb      	strb	r3, [r7, #6]
 80bd2b4:	2300      	movs	r3, #0
 80bd2b6:	617b      	str	r3, [r7, #20]
 80bd2b8:	68bb      	ldr	r3, [r7, #8]
 80bd2ba:	681b      	ldr	r3, [r3, #0]
 80bd2bc:	b29b      	uxth	r3, r3
 80bd2be:	82bb      	strh	r3, [r7, #20]
 80bd2c0:	79fb      	ldrb	r3, [r7, #7]
 80bd2c2:	75bb      	strb	r3, [r7, #22]
 80bd2c4:	79bb      	ldrb	r3, [r7, #6]
 80bd2c6:	75fb      	strb	r3, [r7, #23]
 80bd2c8:	697b      	ldr	r3, [r7, #20]
 80bd2ca:	68fa      	ldr	r2, [r7, #12]
 80bd2cc:	2104      	movs	r1, #4
 80bd2ce:	4618      	mov	r0, r3
 80bd2d0:	f000 fdc4 	bl	80bde5c <vl53l5_encode_uint32_t>
 80bd2d4:	68bb      	ldr	r3, [r7, #8]
 80bd2d6:	681b      	ldr	r3, [r3, #0]
 80bd2d8:	1d1a      	adds	r2, r3, #4
 80bd2da:	68bb      	ldr	r3, [r7, #8]
 80bd2dc:	601a      	str	r2, [r3, #0]
 80bd2de:	bf00      	nop
 80bd2e0:	3718      	adds	r7, #24
 80bd2e2:	46bd      	mov	sp, r7
 80bd2e4:	bd80      	pop	{r7, pc}

080bd2e6 <_write_comms_buffer_to_command_ui>:
 80bd2e6:	b580      	push	{r7, lr}
 80bd2e8:	b084      	sub	sp, #16
 80bd2ea:	af00      	add	r7, sp, #0
 80bd2ec:	6078      	str	r0, [r7, #4]
 80bd2ee:	2300      	movs	r3, #0
 80bd2f0:	60fb      	str	r3, [r7, #12]
 80bd2f2:	687b      	ldr	r3, [r7, #4]
 80bd2f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80bd2f6:	b29b      	uxth	r3, r3
 80bd2f8:	f5c3 533f 	rsb	r3, r3, #12224	; 0x2fc0
 80bd2fc:	3338      	adds	r3, #56	; 0x38
 80bd2fe:	817b      	strh	r3, [r7, #10]
 80bd300:	687b      	ldr	r3, [r7, #4]
 80bd302:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80bd304:	687b      	ldr	r3, [r7, #4]
 80bd306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80bd308:	8979      	ldrh	r1, [r7, #10]
 80bd30a:	6878      	ldr	r0, [r7, #4]
 80bd30c:	f001 fbd3 	bl	80beab6 <vl53l5_write_multi>
 80bd310:	60f8      	str	r0, [r7, #12]
 80bd312:	68fb      	ldr	r3, [r7, #12]
 80bd314:	4618      	mov	r0, r3
 80bd316:	3710      	adds	r7, #16
 80bd318:	46bd      	mov	sp, r7
 80bd31a:	bd80      	pop	{r7, pc}

080bd31c <_read_command_ui_to_comms_buffer>:
 80bd31c:	b580      	push	{r7, lr}
 80bd31e:	b084      	sub	sp, #16
 80bd320:	af00      	add	r7, sp, #0
 80bd322:	6078      	str	r0, [r7, #4]
 80bd324:	2300      	movs	r3, #0
 80bd326:	60fb      	str	r3, [r7, #12]
 80bd328:	2300      	movs	r3, #0
 80bd32a:	817b      	strh	r3, [r7, #10]
 80bd32c:	687b      	ldr	r3, [r7, #4]
 80bd32e:	2200      	movs	r2, #0
 80bd330:	631a      	str	r2, [r3, #48]	; 0x30
 80bd332:	687b      	ldr	r3, [r7, #4]
 80bd334:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80bd336:	461a      	mov	r2, r3
 80bd338:	687b      	ldr	r3, [r7, #4]
 80bd33a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80bd33c:	429a      	cmp	r2, r3
 80bd33e:	d903      	bls.n	80bd348 <_read_command_ui_to_comms_buffer+0x2c>
 80bd340:	f06f 035b 	mvn.w	r3, #91	; 0x5b
 80bd344:	60fb      	str	r3, [r7, #12]
 80bd346:	e02d      	b.n	80bd3a4 <_read_command_ui_to_comms_buffer+0x88>
 80bd348:	687b      	ldr	r3, [r7, #4]
 80bd34a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80bd34c:	f642 72f0 	movw	r2, #12272	; 0x2ff0
 80bd350:	4293      	cmp	r3, r2
 80bd352:	d903      	bls.n	80bd35c <_read_command_ui_to_comms_buffer+0x40>
 80bd354:	f06f 030d 	mvn.w	r3, #13
 80bd358:	60fb      	str	r3, [r7, #12]
 80bd35a:	e023      	b.n	80bd3a4 <_read_command_ui_to_comms_buffer+0x88>
 80bd35c:	687b      	ldr	r3, [r7, #4]
 80bd35e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80bd360:	f003 0303 	and.w	r3, r3, #3
 80bd364:	b29b      	uxth	r3, r3
 80bd366:	2b00      	cmp	r3, #0
 80bd368:	d003      	beq.n	80bd372 <_read_command_ui_to_comms_buffer+0x56>
 80bd36a:	f06f 0346 	mvn.w	r3, #70	; 0x46
 80bd36e:	60fb      	str	r3, [r7, #12]
 80bd370:	e018      	b.n	80bd3a4 <_read_command_ui_to_comms_buffer+0x88>
 80bd372:	687b      	ldr	r3, [r7, #4]
 80bd374:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80bd376:	f5c3 533f 	rsb	r3, r3, #12224	; 0x2fc0
 80bd37a:	3334      	adds	r3, #52	; 0x34
 80bd37c:	817b      	strh	r3, [r7, #10]
 80bd37e:	687b      	ldr	r3, [r7, #4]
 80bd380:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80bd382:	687b      	ldr	r3, [r7, #4]
 80bd384:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80bd386:	8979      	ldrh	r1, [r7, #10]
 80bd388:	6878      	ldr	r0, [r7, #4]
 80bd38a:	f001 fbb1 	bl	80beaf0 <vl53l5_read_multi>
 80bd38e:	60f8      	str	r0, [r7, #12]
 80bd390:	68fb      	ldr	r3, [r7, #12]
 80bd392:	2b00      	cmp	r3, #0
 80bd394:	d105      	bne.n	80bd3a2 <_read_command_ui_to_comms_buffer+0x86>
 80bd396:	687b      	ldr	r3, [r7, #4]
 80bd398:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80bd39a:	461a      	mov	r2, r3
 80bd39c:	687b      	ldr	r3, [r7, #4]
 80bd39e:	631a      	str	r2, [r3, #48]	; 0x30
 80bd3a0:	e000      	b.n	80bd3a4 <_read_command_ui_to_comms_buffer+0x88>
 80bd3a2:	bf00      	nop
 80bd3a4:	68fb      	ldr	r3, [r7, #12]
 80bd3a6:	4618      	mov	r0, r3
 80bd3a8:	3710      	adds	r7, #16
 80bd3aa:	46bd      	mov	sp, r7
 80bd3ac:	bd80      	pop	{r7, pc}

080bd3ae <_get_command_status>:
 80bd3ae:	b580      	push	{r7, lr}
 80bd3b0:	b084      	sub	sp, #16
 80bd3b2:	af00      	add	r7, sp, #0
 80bd3b4:	6078      	str	r0, [r7, #4]
 80bd3b6:	2300      	movs	r3, #0
 80bd3b8:	60fb      	str	r3, [r7, #12]
 80bd3ba:	687b      	ldr	r3, [r7, #4]
 80bd3bc:	2200      	movs	r2, #0
 80bd3be:	631a      	str	r2, [r3, #48]	; 0x30
 80bd3c0:	687b      	ldr	r3, [r7, #4]
 80bd3c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80bd3c4:	2304      	movs	r3, #4
 80bd3c6:	f642 71f8 	movw	r1, #12280	; 0x2ff8
 80bd3ca:	6878      	ldr	r0, [r7, #4]
 80bd3cc:	f001 fb90 	bl	80beaf0 <vl53l5_read_multi>
 80bd3d0:	60f8      	str	r0, [r7, #12]
 80bd3d2:	68fb      	ldr	r3, [r7, #12]
 80bd3d4:	2b00      	cmp	r3, #0
 80bd3d6:	db1b      	blt.n	80bd410 <_get_command_status+0x62>
 80bd3d8:	687b      	ldr	r3, [r7, #4]
 80bd3da:	2204      	movs	r2, #4
 80bd3dc:	631a      	str	r2, [r3, #48]	; 0x30
 80bd3de:	687b      	ldr	r3, [r7, #4]
 80bd3e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80bd3e2:	687b      	ldr	r3, [r7, #4]
 80bd3e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80bd3e6:	4619      	mov	r1, r3
 80bd3e8:	4610      	mov	r0, r2
 80bd3ea:	f000 fab7 	bl	80bd95c <vl53l5_dci_swap_buffer_byte_ordering>
 80bd3ee:	60f8      	str	r0, [r7, #12]
 80bd3f0:	68fb      	ldr	r3, [r7, #12]
 80bd3f2:	2b00      	cmp	r3, #0
 80bd3f4:	db0e      	blt.n	80bd414 <_get_command_status+0x66>
 80bd3f6:	687b      	ldr	r3, [r7, #4]
 80bd3f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80bd3fa:	b29a      	uxth	r2, r3
 80bd3fc:	687b      	ldr	r3, [r7, #4]
 80bd3fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80bd400:	4619      	mov	r1, r3
 80bd402:	4610      	mov	r0, r2
 80bd404:	f000 fd50 	bl	80bdea8 <vl53l5_decode_uint32_t>
 80bd408:	4602      	mov	r2, r0
 80bd40a:	687b      	ldr	r3, [r7, #4]
 80bd40c:	63da      	str	r2, [r3, #60]	; 0x3c
 80bd40e:	e002      	b.n	80bd416 <_get_command_status+0x68>
 80bd410:	bf00      	nop
 80bd412:	e000      	b.n	80bd416 <_get_command_status+0x68>
 80bd414:	bf00      	nop
 80bd416:	68fb      	ldr	r3, [r7, #12]
 80bd418:	4618      	mov	r0, r3
 80bd41a:	3710      	adds	r7, #16
 80bd41c:	46bd      	mov	sp, r7
 80bd41e:	bd80      	pop	{r7, pc}

080bd420 <_poll_command_status_block>:
 80bd420:	b580      	push	{r7, lr}
 80bd422:	b088      	sub	sp, #32
 80bd424:	af00      	add	r7, sp, #0
 80bd426:	60f8      	str	r0, [r7, #12]
 80bd428:	60b9      	str	r1, [r7, #8]
 80bd42a:	607a      	str	r2, [r7, #4]
 80bd42c:	603b      	str	r3, [r7, #0]
 80bd42e:	2300      	movs	r3, #0
 80bd430:	61fb      	str	r3, [r7, #28]
 80bd432:	2300      	movs	r3, #0
 80bd434:	617b      	str	r3, [r7, #20]
 80bd436:	2300      	movs	r3, #0
 80bd438:	76fb      	strb	r3, [r7, #27]
 80bd43a:	68f8      	ldr	r0, [r7, #12]
 80bd43c:	f7ff ffb7 	bl	80bd3ae <_get_command_status>
 80bd440:	61f8      	str	r0, [r7, #28]
 80bd442:	69fb      	ldr	r3, [r7, #28]
 80bd444:	2b00      	cmp	r3, #0
 80bd446:	db52      	blt.n	80bd4ee <_poll_command_status_block+0xce>
 80bd448:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80bd44c:	f083 0301 	eor.w	r3, r3, #1
 80bd450:	b2db      	uxtb	r3, r3
 80bd452:	2b00      	cmp	r3, #0
 80bd454:	d106      	bne.n	80bd464 <_poll_command_status_block+0x44>
 80bd456:	68fb      	ldr	r3, [r7, #12]
 80bd458:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80bd45c:	461a      	mov	r2, r3
 80bd45e:	68bb      	ldr	r3, [r7, #8]
 80bd460:	4293      	cmp	r3, r2
 80bd462:	d10d      	bne.n	80bd480 <_poll_command_status_block+0x60>
 80bd464:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80bd468:	f083 0301 	eor.w	r3, r3, #1
 80bd46c:	b2db      	uxtb	r3, r3
 80bd46e:	2b00      	cmp	r3, #0
 80bd470:	d104      	bne.n	80bd47c <_poll_command_status_block+0x5c>
 80bd472:	68fb      	ldr	r3, [r7, #12]
 80bd474:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80bd478:	2b03      	cmp	r3, #3
 80bd47a:	d101      	bne.n	80bd480 <_poll_command_status_block+0x60>
 80bd47c:	2301      	movs	r3, #1
 80bd47e:	e000      	b.n	80bd482 <_poll_command_status_block+0x62>
 80bd480:	2300      	movs	r3, #0
 80bd482:	76fb      	strb	r3, [r7, #27]
 80bd484:	7efb      	ldrb	r3, [r7, #27]
 80bd486:	f003 0301 	and.w	r3, r3, #1
 80bd48a:	76fb      	strb	r3, [r7, #27]
 80bd48c:	7efb      	ldrb	r3, [r7, #27]
 80bd48e:	2b00      	cmp	r3, #0
 80bd490:	d12f      	bne.n	80bd4f2 <_poll_command_status_block+0xd2>
 80bd492:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80bd496:	2b00      	cmp	r3, #0
 80bd498:	d008      	beq.n	80bd4ac <_poll_command_status_block+0x8c>
 80bd49a:	68fb      	ldr	r3, [r7, #12]
 80bd49c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80bd4a0:	2b04      	cmp	r3, #4
 80bd4a2:	d103      	bne.n	80bd4ac <_poll_command_status_block+0x8c>
 80bd4a4:	f06f 034e 	mvn.w	r3, #78	; 0x4e
 80bd4a8:	61fb      	str	r3, [r7, #28]
 80bd4aa:	e027      	b.n	80bd4fc <_poll_command_status_block+0xdc>
 80bd4ac:	f107 0314 	add.w	r3, r7, #20
 80bd4b0:	4619      	mov	r1, r3
 80bd4b2:	68f8      	ldr	r0, [r7, #12]
 80bd4b4:	f001 fb98 	bl	80bebe8 <vl53l5_get_tick_count>
 80bd4b8:	61f8      	str	r0, [r7, #28]
 80bd4ba:	69fb      	ldr	r3, [r7, #28]
 80bd4bc:	2b00      	cmp	r3, #0
 80bd4be:	db1a      	blt.n	80bd4f6 <_poll_command_status_block+0xd6>
 80bd4c0:	697a      	ldr	r2, [r7, #20]
 80bd4c2:	687b      	ldr	r3, [r7, #4]
 80bd4c4:	6839      	ldr	r1, [r7, #0]
 80bd4c6:	68f8      	ldr	r0, [r7, #12]
 80bd4c8:	f001 fba9 	bl	80bec1e <vl53l5_check_for_timeout>
 80bd4cc:	61f8      	str	r0, [r7, #28]
 80bd4ce:	69fb      	ldr	r3, [r7, #28]
 80bd4d0:	2b00      	cmp	r3, #0
 80bd4d2:	da03      	bge.n	80bd4dc <_poll_command_status_block+0xbc>
 80bd4d4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 80bd4d8:	61fb      	str	r3, [r7, #28]
 80bd4da:	e00f      	b.n	80bd4fc <_poll_command_status_block+0xdc>
 80bd4dc:	210a      	movs	r1, #10
 80bd4de:	68f8      	ldr	r0, [r7, #12]
 80bd4e0:	f001 fb42 	bl	80beb68 <vl53l5_wait_ms>
 80bd4e4:	61f8      	str	r0, [r7, #28]
 80bd4e6:	69fb      	ldr	r3, [r7, #28]
 80bd4e8:	2b00      	cmp	r3, #0
 80bd4ea:	db06      	blt.n	80bd4fa <_poll_command_status_block+0xda>
 80bd4ec:	e7a5      	b.n	80bd43a <_poll_command_status_block+0x1a>
 80bd4ee:	bf00      	nop
 80bd4f0:	e004      	b.n	80bd4fc <_poll_command_status_block+0xdc>
 80bd4f2:	bf00      	nop
 80bd4f4:	e002      	b.n	80bd4fc <_poll_command_status_block+0xdc>
 80bd4f6:	bf00      	nop
 80bd4f8:	e000      	b.n	80bd4fc <_poll_command_status_block+0xdc>
 80bd4fa:	bf00      	nop
 80bd4fc:	69fb      	ldr	r3, [r7, #28]
 80bd4fe:	4618      	mov	r0, r3
 80bd500:	3720      	adds	r7, #32
 80bd502:	46bd      	mov	sp, r7
 80bd504:	bd80      	pop	{r7, pc}

080bd506 <vl53l5_dci_decode_range_data>:
 80bd506:	b580      	push	{r7, lr}
 80bd508:	b086      	sub	sp, #24
 80bd50a:	af02      	add	r7, sp, #8
 80bd50c:	6078      	str	r0, [r7, #4]
 80bd50e:	2300      	movs	r3, #0
 80bd510:	60fb      	str	r3, [r7, #12]
 80bd512:	687b      	ldr	r3, [r7, #4]
 80bd514:	2b00      	cmp	r3, #0
 80bd516:	d103      	bne.n	80bd520 <vl53l5_dci_decode_range_data+0x1a>
 80bd518:	f06f 0303 	mvn.w	r3, #3
 80bd51c:	60fb      	str	r3, [r7, #12]
 80bd51e:	e02b      	b.n	80bd578 <vl53l5_dci_decode_range_data+0x72>
 80bd520:	687b      	ldr	r3, [r7, #4]
 80bd522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80bd524:	2b00      	cmp	r3, #0
 80bd526:	d103      	bne.n	80bd530 <vl53l5_dci_decode_range_data+0x2a>
 80bd528:	f06f 0303 	mvn.w	r3, #3
 80bd52c:	60fb      	str	r3, [r7, #12]
 80bd52e:	e023      	b.n	80bd578 <vl53l5_dci_decode_range_data+0x72>
 80bd530:	687b      	ldr	r3, [r7, #4]
 80bd532:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80bd536:	461a      	mov	r2, r3
 80bd538:	687b      	ldr	r3, [r7, #4]
 80bd53a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80bd53e:	4413      	add	r3, r2
 80bd540:	1d1a      	adds	r2, r3, #4
 80bd542:	687b      	ldr	r3, [r7, #4]
 80bd544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80bd546:	429a      	cmp	r2, r3
 80bd548:	d003      	beq.n	80bd552 <vl53l5_dci_decode_range_data+0x4c>
 80bd54a:	f06f 030a 	mvn.w	r3, #10
 80bd54e:	60fb      	str	r3, [r7, #12]
 80bd550:	e012      	b.n	80bd578 <vl53l5_dci_decode_range_data+0x72>
 80bd552:	687b      	ldr	r3, [r7, #4]
 80bd554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80bd556:	687a      	ldr	r2, [r7, #4]
 80bd558:	f8b2 2062 	ldrh.w	r2, [r2, #98]	; 0x62
 80bd55c:	1899      	adds	r1, r3, r2
 80bd55e:	687b      	ldr	r3, [r7, #4]
 80bd560:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80bd564:	461a      	mov	r2, r3
 80bd566:	2301      	movs	r3, #1
 80bd568:	9301      	str	r3, [sp, #4]
 80bd56a:	2300      	movs	r3, #0
 80bd56c:	9300      	str	r3, [sp, #0]
 80bd56e:	2300      	movs	r3, #0
 80bd570:	6878      	ldr	r0, [r7, #4]
 80bd572:	f000 f855 	bl	80bd620 <_decode_raw_data>
 80bd576:	60f8      	str	r0, [r7, #12]
 80bd578:	68fb      	ldr	r3, [r7, #12]
 80bd57a:	4618      	mov	r0, r3
 80bd57c:	3710      	adds	r7, #16
 80bd57e:	46bd      	mov	sp, r7
 80bd580:	bd80      	pop	{r7, pc}

080bd582 <vl53l5_dci_decode_data>:
 80bd582:	b580      	push	{r7, lr}
 80bd584:	b088      	sub	sp, #32
 80bd586:	af02      	add	r7, sp, #8
 80bd588:	60f8      	str	r0, [r7, #12]
 80bd58a:	60b9      	str	r1, [r7, #8]
 80bd58c:	607a      	str	r2, [r7, #4]
 80bd58e:	2300      	movs	r3, #0
 80bd590:	617b      	str	r3, [r7, #20]
 80bd592:	68fb      	ldr	r3, [r7, #12]
 80bd594:	2b00      	cmp	r3, #0
 80bd596:	d103      	bne.n	80bd5a0 <vl53l5_dci_decode_data+0x1e>
 80bd598:	f06f 0303 	mvn.w	r3, #3
 80bd59c:	617b      	str	r3, [r7, #20]
 80bd59e:	e012      	b.n	80bd5c6 <vl53l5_dci_decode_data+0x44>
 80bd5a0:	68fb      	ldr	r3, [r7, #12]
 80bd5a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80bd5a4:	2b00      	cmp	r3, #0
 80bd5a6:	d103      	bne.n	80bd5b0 <vl53l5_dci_decode_data+0x2e>
 80bd5a8:	f06f 0303 	mvn.w	r3, #3
 80bd5ac:	617b      	str	r3, [r7, #20]
 80bd5ae:	e00a      	b.n	80bd5c6 <vl53l5_dci_decode_data+0x44>
 80bd5b0:	2300      	movs	r3, #0
 80bd5b2:	9301      	str	r3, [sp, #4]
 80bd5b4:	2300      	movs	r3, #0
 80bd5b6:	9300      	str	r3, [sp, #0]
 80bd5b8:	2300      	movs	r3, #0
 80bd5ba:	687a      	ldr	r2, [r7, #4]
 80bd5bc:	68b9      	ldr	r1, [r7, #8]
 80bd5be:	68f8      	ldr	r0, [r7, #12]
 80bd5c0:	f000 f82e 	bl	80bd620 <_decode_raw_data>
 80bd5c4:	6178      	str	r0, [r7, #20]
 80bd5c6:	697b      	ldr	r3, [r7, #20]
 80bd5c8:	4618      	mov	r0, r3
 80bd5ca:	3718      	adds	r7, #24
 80bd5cc:	46bd      	mov	sp, r7
 80bd5ce:	bd80      	pop	{r7, pc}

080bd5d0 <_check_for_idx_match>:
 80bd5d0:	b480      	push	{r7}
 80bd5d2:	b087      	sub	sp, #28
 80bd5d4:	af00      	add	r7, sp, #0
 80bd5d6:	60b9      	str	r1, [r7, #8]
 80bd5d8:	607a      	str	r2, [r7, #4]
 80bd5da:	603b      	str	r3, [r7, #0]
 80bd5dc:	4603      	mov	r3, r0
 80bd5de:	81fb      	strh	r3, [r7, #14]
 80bd5e0:	2300      	movs	r3, #0
 80bd5e2:	617b      	str	r3, [r7, #20]
 80bd5e4:	2300      	movs	r3, #0
 80bd5e6:	617b      	str	r3, [r7, #20]
 80bd5e8:	e010      	b.n	80bd60c <_check_for_idx_match+0x3c>
 80bd5ea:	697b      	ldr	r3, [r7, #20]
 80bd5ec:	005b      	lsls	r3, r3, #1
 80bd5ee:	68ba      	ldr	r2, [r7, #8]
 80bd5f0:	4413      	add	r3, r2
 80bd5f2:	881b      	ldrh	r3, [r3, #0]
 80bd5f4:	89fa      	ldrh	r2, [r7, #14]
 80bd5f6:	429a      	cmp	r2, r3
 80bd5f8:	d105      	bne.n	80bd606 <_check_for_idx_match+0x36>
 80bd5fa:	683b      	ldr	r3, [r7, #0]
 80bd5fc:	681b      	ldr	r3, [r3, #0]
 80bd5fe:	1c5a      	adds	r2, r3, #1
 80bd600:	683b      	ldr	r3, [r7, #0]
 80bd602:	601a      	str	r2, [r3, #0]
 80bd604:	e006      	b.n	80bd614 <_check_for_idx_match+0x44>
 80bd606:	697b      	ldr	r3, [r7, #20]
 80bd608:	3301      	adds	r3, #1
 80bd60a:	617b      	str	r3, [r7, #20]
 80bd60c:	697a      	ldr	r2, [r7, #20]
 80bd60e:	687b      	ldr	r3, [r7, #4]
 80bd610:	429a      	cmp	r2, r3
 80bd612:	d3ea      	bcc.n	80bd5ea <_check_for_idx_match+0x1a>
 80bd614:	bf00      	nop
 80bd616:	371c      	adds	r7, #28
 80bd618:	46bd      	mov	sp, r7
 80bd61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 80bd61e:	4770      	bx	lr

080bd620 <_decode_raw_data>:
 80bd620:	b590      	push	{r4, r7, lr}
 80bd622:	b08d      	sub	sp, #52	; 0x34
 80bd624:	af02      	add	r7, sp, #8
 80bd626:	60f8      	str	r0, [r7, #12]
 80bd628:	60b9      	str	r1, [r7, #8]
 80bd62a:	607a      	str	r2, [r7, #4]
 80bd62c:	603b      	str	r3, [r7, #0]
 80bd62e:	2300      	movs	r3, #0
 80bd630:	627b      	str	r3, [r7, #36]	; 0x24
 80bd632:	2300      	movs	r3, #0
 80bd634:	777b      	strb	r3, [r7, #29]
 80bd636:	2300      	movs	r3, #0
 80bd638:	61bb      	str	r3, [r7, #24]
 80bd63a:	2300      	movs	r3, #0
 80bd63c:	82fb      	strh	r3, [r7, #22]
 80bd63e:	2300      	movs	r3, #0
 80bd640:	77bb      	strb	r3, [r7, #30]
 80bd642:	2300      	movs	r3, #0
 80bd644:	623b      	str	r3, [r7, #32]
 80bd646:	2300      	movs	r3, #0
 80bd648:	613b      	str	r3, [r7, #16]
 80bd64a:	2300      	movs	r3, #0
 80bd64c:	77fb      	strb	r3, [r7, #31]
 80bd64e:	683b      	ldr	r3, [r7, #0]
 80bd650:	2b00      	cmp	r3, #0
 80bd652:	d002      	beq.n	80bd65a <_decode_raw_data+0x3a>
 80bd654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80bd656:	2b00      	cmp	r3, #0
 80bd658:	d101      	bne.n	80bd65e <_decode_raw_data+0x3e>
 80bd65a:	2301      	movs	r3, #1
 80bd65c:	77fb      	strb	r3, [r7, #31]
 80bd65e:	68ba      	ldr	r2, [r7, #8]
 80bd660:	6a3b      	ldr	r3, [r7, #32]
 80bd662:	18d0      	adds	r0, r2, r3
 80bd664:	687a      	ldr	r2, [r7, #4]
 80bd666:	6a3b      	ldr	r3, [r7, #32]
 80bd668:	1ad1      	subs	r1, r2, r3
 80bd66a:	f107 0418 	add.w	r4, r7, #24
 80bd66e:	f107 021d 	add.w	r2, r7, #29
 80bd672:	f107 0316 	add.w	r3, r7, #22
 80bd676:	9300      	str	r3, [sp, #0]
 80bd678:	4623      	mov	r3, r4
 80bd67a:	f000 f907 	bl	80bd88c <vl53l5_dci_decode_block_header>
 80bd67e:	6278      	str	r0, [r7, #36]	; 0x24
 80bd680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80bd682:	2b00      	cmp	r3, #0
 80bd684:	db73      	blt.n	80bd76e <_decode_raw_data+0x14e>
 80bd686:	7f7b      	ldrb	r3, [r7, #29]
 80bd688:	2b0f      	cmp	r3, #15
 80bd68a:	d05e      	beq.n	80bd74a <_decode_raw_data+0x12a>
 80bd68c:	7f7b      	ldrb	r3, [r7, #29]
 80bd68e:	2b0d      	cmp	r3, #13
 80bd690:	d002      	beq.n	80bd698 <_decode_raw_data+0x78>
 80bd692:	7f7b      	ldrb	r3, [r7, #29]
 80bd694:	2b0e      	cmp	r3, #14
 80bd696:	d113      	bne.n	80bd6c0 <_decode_raw_data+0xa0>
 80bd698:	8afb      	ldrh	r3, [r7, #22]
 80bd69a:	77bb      	strb	r3, [r7, #30]
 80bd69c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80bd6a0:	f083 0301 	eor.w	r3, r3, #1
 80bd6a4:	b2db      	uxtb	r3, r3
 80bd6a6:	2b00      	cmp	r3, #0
 80bd6a8:	d006      	beq.n	80bd6b8 <_decode_raw_data+0x98>
 80bd6aa:	7fbb      	ldrb	r3, [r7, #30]
 80bd6ac:	2b00      	cmp	r3, #0
 80bd6ae:	d003      	beq.n	80bd6b8 <_decode_raw_data+0x98>
 80bd6b0:	f06f 0351 	mvn.w	r3, #81	; 0x51
 80bd6b4:	627b      	str	r3, [r7, #36]	; 0x24
 80bd6b6:	e05f      	b.n	80bd778 <_decode_raw_data+0x158>
 80bd6b8:	6a3b      	ldr	r3, [r7, #32]
 80bd6ba:	3304      	adds	r3, #4
 80bd6bc:	623b      	str	r3, [r7, #32]
 80bd6be:	e03f      	b.n	80bd740 <_decode_raw_data+0x120>
 80bd6c0:	7f7b      	ldrb	r3, [r7, #29]
 80bd6c2:	2b0c      	cmp	r3, #12
 80bd6c4:	d115      	bne.n	80bd6f2 <_decode_raw_data+0xd2>
 80bd6c6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80bd6ca:	f083 0301 	eor.w	r3, r3, #1
 80bd6ce:	b2db      	uxtb	r3, r3
 80bd6d0:	2b00      	cmp	r3, #0
 80bd6d2:	d003      	beq.n	80bd6dc <_decode_raw_data+0xbc>
 80bd6d4:	f06f 0309 	mvn.w	r3, #9
 80bd6d8:	627b      	str	r3, [r7, #36]	; 0x24
 80bd6da:	e04d      	b.n	80bd778 <_decode_raw_data+0x158>
 80bd6dc:	8afb      	ldrh	r3, [r7, #22]
 80bd6de:	2b00      	cmp	r3, #0
 80bd6e0:	d003      	beq.n	80bd6ea <_decode_raw_data+0xca>
 80bd6e2:	f06f 0309 	mvn.w	r3, #9
 80bd6e6:	627b      	str	r3, [r7, #36]	; 0x24
 80bd6e8:	e046      	b.n	80bd778 <_decode_raw_data+0x158>
 80bd6ea:	6a3b      	ldr	r3, [r7, #32]
 80bd6ec:	3304      	adds	r3, #4
 80bd6ee:	623b      	str	r3, [r7, #32]
 80bd6f0:	e026      	b.n	80bd740 <_decode_raw_data+0x120>
 80bd6f2:	6a3b      	ldr	r3, [r7, #32]
 80bd6f4:	3304      	adds	r3, #4
 80bd6f6:	623b      	str	r3, [r7, #32]
 80bd6f8:	8af8      	ldrh	r0, [r7, #22]
 80bd6fa:	69b9      	ldr	r1, [r7, #24]
 80bd6fc:	68ba      	ldr	r2, [r7, #8]
 80bd6fe:	6a3b      	ldr	r3, [r7, #32]
 80bd700:	441a      	add	r2, r3
 80bd702:	68fb      	ldr	r3, [r7, #12]
 80bd704:	f000 fbed 	bl	80bdee2 <vl53l5_decode_switch>
 80bd708:	6278      	str	r0, [r7, #36]	; 0x24
 80bd70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80bd70c:	2b00      	cmp	r3, #0
 80bd70e:	db30      	blt.n	80bd772 <_decode_raw_data+0x152>
 80bd710:	69bb      	ldr	r3, [r7, #24]
 80bd712:	6a3a      	ldr	r2, [r7, #32]
 80bd714:	4413      	add	r3, r2
 80bd716:	623b      	str	r3, [r7, #32]
 80bd718:	7ffb      	ldrb	r3, [r7, #31]
 80bd71a:	f083 0301 	eor.w	r3, r3, #1
 80bd71e:	b2db      	uxtb	r3, r3
 80bd720:	2b00      	cmp	r3, #0
 80bd722:	d00d      	beq.n	80bd740 <_decode_raw_data+0x120>
 80bd724:	8af8      	ldrh	r0, [r7, #22]
 80bd726:	f107 0310 	add.w	r3, r7, #16
 80bd72a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80bd72c:	6839      	ldr	r1, [r7, #0]
 80bd72e:	f7ff ff4f 	bl	80bd5d0 <_check_for_idx_match>
 80bd732:	693b      	ldr	r3, [r7, #16]
 80bd734:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80bd736:	429a      	cmp	r2, r3
 80bd738:	bf0c      	ite	eq
 80bd73a:	2301      	moveq	r3, #1
 80bd73c:	2300      	movne	r3, #0
 80bd73e:	77fb      	strb	r3, [r7, #31]
 80bd740:	6a3a      	ldr	r2, [r7, #32]
 80bd742:	687b      	ldr	r3, [r7, #4]
 80bd744:	429a      	cmp	r2, r3
 80bd746:	d38a      	bcc.n	80bd65e <_decode_raw_data+0x3e>
 80bd748:	e000      	b.n	80bd74c <_decode_raw_data+0x12c>
 80bd74a:	bf00      	nop
 80bd74c:	7f7b      	ldrb	r3, [r7, #29]
 80bd74e:	2b0f      	cmp	r3, #15
 80bd750:	d003      	beq.n	80bd75a <_decode_raw_data+0x13a>
 80bd752:	f06f 0350 	mvn.w	r3, #80	; 0x50
 80bd756:	627b      	str	r3, [r7, #36]	; 0x24
 80bd758:	e00e      	b.n	80bd778 <_decode_raw_data+0x158>
 80bd75a:	7ffb      	ldrb	r3, [r7, #31]
 80bd75c:	f083 0301 	eor.w	r3, r3, #1
 80bd760:	b2db      	uxtb	r3, r3
 80bd762:	2b00      	cmp	r3, #0
 80bd764:	d007      	beq.n	80bd776 <_decode_raw_data+0x156>
 80bd766:	f06f 0347 	mvn.w	r3, #71	; 0x47
 80bd76a:	627b      	str	r3, [r7, #36]	; 0x24
 80bd76c:	e004      	b.n	80bd778 <_decode_raw_data+0x158>
 80bd76e:	bf00      	nop
 80bd770:	e002      	b.n	80bd778 <_decode_raw_data+0x158>
 80bd772:	bf00      	nop
 80bd774:	e000      	b.n	80bd778 <_decode_raw_data+0x158>
 80bd776:	bf00      	nop
 80bd778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80bd77a:	4618      	mov	r0, r3
 80bd77c:	372c      	adds	r7, #44	; 0x2c
 80bd77e:	46bd      	mov	sp, r7
 80bd780:	bd90      	pop	{r4, r7, pc}

080bd782 <_calculate_block_header_size_field>:
 80bd782:	b480      	push	{r7}
 80bd784:	b087      	sub	sp, #28
 80bd786:	af00      	add	r7, sp, #0
 80bd788:	4603      	mov	r3, r0
 80bd78a:	60b9      	str	r1, [r7, #8]
 80bd78c:	607a      	str	r2, [r7, #4]
 80bd78e:	73fb      	strb	r3, [r7, #15]
 80bd790:	2300      	movs	r3, #0
 80bd792:	617b      	str	r3, [r7, #20]
 80bd794:	7bfb      	ldrb	r3, [r7, #15]
 80bd796:	2b0f      	cmp	r3, #15
 80bd798:	d903      	bls.n	80bd7a2 <_calculate_block_header_size_field+0x20>
 80bd79a:	f06f 0314 	mvn.w	r3, #20
 80bd79e:	617b      	str	r3, [r7, #20]
 80bd7a0:	e027      	b.n	80bd7f2 <_calculate_block_header_size_field+0x70>
 80bd7a2:	7bfb      	ldrb	r3, [r7, #15]
 80bd7a4:	2b00      	cmp	r3, #0
 80bd7a6:	d104      	bne.n	80bd7b2 <_calculate_block_header_size_field+0x30>
 80bd7a8:	68bb      	ldr	r3, [r7, #8]
 80bd7aa:	b29a      	uxth	r2, r3
 80bd7ac:	687b      	ldr	r3, [r7, #4]
 80bd7ae:	801a      	strh	r2, [r3, #0]
 80bd7b0:	e015      	b.n	80bd7de <_calculate_block_header_size_field+0x5c>
 80bd7b2:	7bfb      	ldrb	r3, [r7, #15]
 80bd7b4:	2b0b      	cmp	r3, #11
 80bd7b6:	d807      	bhi.n	80bd7c8 <_calculate_block_header_size_field+0x46>
 80bd7b8:	7bfb      	ldrb	r3, [r7, #15]
 80bd7ba:	68ba      	ldr	r2, [r7, #8]
 80bd7bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80bd7c0:	b29a      	uxth	r2, r3
 80bd7c2:	687b      	ldr	r3, [r7, #4]
 80bd7c4:	801a      	strh	r2, [r3, #0]
 80bd7c6:	e00a      	b.n	80bd7de <_calculate_block_header_size_field+0x5c>
 80bd7c8:	7bfb      	ldrb	r3, [r7, #15]
 80bd7ca:	2b0f      	cmp	r3, #15
 80bd7cc:	d103      	bne.n	80bd7d6 <_calculate_block_header_size_field+0x54>
 80bd7ce:	687b      	ldr	r3, [r7, #4]
 80bd7d0:	2200      	movs	r2, #0
 80bd7d2:	801a      	strh	r2, [r3, #0]
 80bd7d4:	e003      	b.n	80bd7de <_calculate_block_header_size_field+0x5c>
 80bd7d6:	f06f 0314 	mvn.w	r3, #20
 80bd7da:	617b      	str	r3, [r7, #20]
 80bd7dc:	e009      	b.n	80bd7f2 <_calculate_block_header_size_field+0x70>
 80bd7de:	687b      	ldr	r3, [r7, #4]
 80bd7e0:	881b      	ldrh	r3, [r3, #0]
 80bd7e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80bd7e6:	d303      	bcc.n	80bd7f0 <_calculate_block_header_size_field+0x6e>
 80bd7e8:	f06f 0315 	mvn.w	r3, #21
 80bd7ec:	617b      	str	r3, [r7, #20]
 80bd7ee:	e000      	b.n	80bd7f2 <_calculate_block_header_size_field+0x70>
 80bd7f0:	bf00      	nop
 80bd7f2:	697b      	ldr	r3, [r7, #20]
 80bd7f4:	4618      	mov	r0, r3
 80bd7f6:	371c      	adds	r7, #28
 80bd7f8:	46bd      	mov	sp, r7
 80bd7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80bd7fe:	4770      	bx	lr

080bd800 <vl53l5_dci_encode_block_header>:
 80bd800:	b580      	push	{r7, lr}
 80bd802:	b088      	sub	sp, #32
 80bd804:	af00      	add	r7, sp, #0
 80bd806:	60f8      	str	r0, [r7, #12]
 80bd808:	60b9      	str	r1, [r7, #8]
 80bd80a:	603b      	str	r3, [r7, #0]
 80bd80c:	4613      	mov	r3, r2
 80bd80e:	71fb      	strb	r3, [r7, #7]
 80bd810:	2300      	movs	r3, #0
 80bd812:	61fb      	str	r3, [r7, #28]
 80bd814:	2300      	movs	r3, #0
 80bd816:	837b      	strh	r3, [r7, #26]
 80bd818:	2300      	movs	r3, #0
 80bd81a:	617b      	str	r3, [r7, #20]
 80bd81c:	68fb      	ldr	r3, [r7, #12]
 80bd81e:	2b00      	cmp	r3, #0
 80bd820:	d103      	bne.n	80bd82a <vl53l5_dci_encode_block_header+0x2a>
 80bd822:	f06f 0303 	mvn.w	r3, #3
 80bd826:	61fb      	str	r3, [r7, #28]
 80bd828:	e02b      	b.n	80bd882 <vl53l5_dci_encode_block_header+0x82>
 80bd82a:	68bb      	ldr	r3, [r7, #8]
 80bd82c:	2b03      	cmp	r3, #3
 80bd82e:	d803      	bhi.n	80bd838 <vl53l5_dci_encode_block_header+0x38>
 80bd830:	f06f 035b 	mvn.w	r3, #91	; 0x5b
 80bd834:	61fb      	str	r3, [r7, #28]
 80bd836:	e024      	b.n	80bd882 <vl53l5_dci_encode_block_header+0x82>
 80bd838:	f107 021a 	add.w	r2, r7, #26
 80bd83c:	79fb      	ldrb	r3, [r7, #7]
 80bd83e:	6839      	ldr	r1, [r7, #0]
 80bd840:	4618      	mov	r0, r3
 80bd842:	f7ff ff9e 	bl	80bd782 <_calculate_block_header_size_field>
 80bd846:	61f8      	str	r0, [r7, #28]
 80bd848:	69fb      	ldr	r3, [r7, #28]
 80bd84a:	2b00      	cmp	r3, #0
 80bd84c:	db18      	blt.n	80bd880 <vl53l5_dci_encode_block_header+0x80>
 80bd84e:	79fb      	ldrb	r3, [r7, #7]
 80bd850:	f003 030f 	and.w	r3, r3, #15
 80bd854:	b2da      	uxtb	r2, r3
 80bd856:	7d3b      	ldrb	r3, [r7, #20]
 80bd858:	f362 0303 	bfi	r3, r2, #0, #4
 80bd85c:	753b      	strb	r3, [r7, #20]
 80bd85e:	8b7b      	ldrh	r3, [r7, #26]
 80bd860:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80bd864:	b29a      	uxth	r2, r3
 80bd866:	8abb      	ldrh	r3, [r7, #20]
 80bd868:	f362 130f 	bfi	r3, r2, #4, #12
 80bd86c:	82bb      	strh	r3, [r7, #20]
 80bd86e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80bd870:	82fb      	strh	r3, [r7, #22]
 80bd872:	697b      	ldr	r3, [r7, #20]
 80bd874:	68fa      	ldr	r2, [r7, #12]
 80bd876:	2104      	movs	r1, #4
 80bd878:	4618      	mov	r0, r3
 80bd87a:	f000 faef 	bl	80bde5c <vl53l5_encode_uint32_t>
 80bd87e:	e000      	b.n	80bd882 <vl53l5_dci_encode_block_header+0x82>
 80bd880:	bf00      	nop
 80bd882:	69fb      	ldr	r3, [r7, #28]
 80bd884:	4618      	mov	r0, r3
 80bd886:	3720      	adds	r7, #32
 80bd888:	46bd      	mov	sp, r7
 80bd88a:	bd80      	pop	{r7, pc}

080bd88c <vl53l5_dci_decode_block_header>:
 80bd88c:	b580      	push	{r7, lr}
 80bd88e:	b086      	sub	sp, #24
 80bd890:	af00      	add	r7, sp, #0
 80bd892:	60f8      	str	r0, [r7, #12]
 80bd894:	60b9      	str	r1, [r7, #8]
 80bd896:	607a      	str	r2, [r7, #4]
 80bd898:	603b      	str	r3, [r7, #0]
 80bd89a:	2300      	movs	r3, #0
 80bd89c:	617b      	str	r3, [r7, #20]
 80bd89e:	2300      	movs	r3, #0
 80bd8a0:	613b      	str	r3, [r7, #16]
 80bd8a2:	68fb      	ldr	r3, [r7, #12]
 80bd8a4:	2b00      	cmp	r3, #0
 80bd8a6:	d103      	bne.n	80bd8b0 <vl53l5_dci_decode_block_header+0x24>
 80bd8a8:	f06f 0303 	mvn.w	r3, #3
 80bd8ac:	617b      	str	r3, [r7, #20]
 80bd8ae:	e050      	b.n	80bd952 <vl53l5_dci_decode_block_header+0xc6>
 80bd8b0:	687b      	ldr	r3, [r7, #4]
 80bd8b2:	2b00      	cmp	r3, #0
 80bd8b4:	d103      	bne.n	80bd8be <vl53l5_dci_decode_block_header+0x32>
 80bd8b6:	f06f 0303 	mvn.w	r3, #3
 80bd8ba:	617b      	str	r3, [r7, #20]
 80bd8bc:	e049      	b.n	80bd952 <vl53l5_dci_decode_block_header+0xc6>
 80bd8be:	6a3b      	ldr	r3, [r7, #32]
 80bd8c0:	2b00      	cmp	r3, #0
 80bd8c2:	d103      	bne.n	80bd8cc <vl53l5_dci_decode_block_header+0x40>
 80bd8c4:	f06f 0303 	mvn.w	r3, #3
 80bd8c8:	617b      	str	r3, [r7, #20]
 80bd8ca:	e042      	b.n	80bd952 <vl53l5_dci_decode_block_header+0xc6>
 80bd8cc:	683b      	ldr	r3, [r7, #0]
 80bd8ce:	2b00      	cmp	r3, #0
 80bd8d0:	d103      	bne.n	80bd8da <vl53l5_dci_decode_block_header+0x4e>
 80bd8d2:	f06f 0303 	mvn.w	r3, #3
 80bd8d6:	617b      	str	r3, [r7, #20]
 80bd8d8:	e03b      	b.n	80bd952 <vl53l5_dci_decode_block_header+0xc6>
 80bd8da:	68bb      	ldr	r3, [r7, #8]
 80bd8dc:	2b03      	cmp	r3, #3
 80bd8de:	d803      	bhi.n	80bd8e8 <vl53l5_dci_decode_block_header+0x5c>
 80bd8e0:	f06f 035b 	mvn.w	r3, #91	; 0x5b
 80bd8e4:	617b      	str	r3, [r7, #20]
 80bd8e6:	e034      	b.n	80bd952 <vl53l5_dci_decode_block_header+0xc6>
 80bd8e8:	68f9      	ldr	r1, [r7, #12]
 80bd8ea:	2004      	movs	r0, #4
 80bd8ec:	f000 fadc 	bl	80bdea8 <vl53l5_decode_uint32_t>
 80bd8f0:	4603      	mov	r3, r0
 80bd8f2:	613b      	str	r3, [r7, #16]
 80bd8f4:	7c3b      	ldrb	r3, [r7, #16]
 80bd8f6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80bd8fa:	b2db      	uxtb	r3, r3
 80bd8fc:	461a      	mov	r2, r3
 80bd8fe:	687b      	ldr	r3, [r7, #4]
 80bd900:	701a      	strb	r2, [r3, #0]
 80bd902:	8a7a      	ldrh	r2, [r7, #18]
 80bd904:	6a3b      	ldr	r3, [r7, #32]
 80bd906:	801a      	strh	r2, [r3, #0]
 80bd908:	7c3b      	ldrb	r3, [r7, #16]
 80bd90a:	f003 030f 	and.w	r3, r3, #15
 80bd90e:	b2db      	uxtb	r3, r3
 80bd910:	2b00      	cmp	r3, #0
 80bd912:	d107      	bne.n	80bd924 <vl53l5_dci_decode_block_header+0x98>
 80bd914:	8a3b      	ldrh	r3, [r7, #16]
 80bd916:	f3c3 130b 	ubfx	r3, r3, #4, #12
 80bd91a:	b29b      	uxth	r3, r3
 80bd91c:	461a      	mov	r2, r3
 80bd91e:	683b      	ldr	r3, [r7, #0]
 80bd920:	601a      	str	r2, [r3, #0]
 80bd922:	e016      	b.n	80bd952 <vl53l5_dci_decode_block_header+0xc6>
 80bd924:	7c3b      	ldrb	r3, [r7, #16]
 80bd926:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80bd92a:	b2db      	uxtb	r3, r3
 80bd92c:	2b0b      	cmp	r3, #11
 80bd92e:	d80d      	bhi.n	80bd94c <vl53l5_dci_decode_block_header+0xc0>
 80bd930:	8a3b      	ldrh	r3, [r7, #16]
 80bd932:	f3c3 130b 	ubfx	r3, r3, #4, #12
 80bd936:	b29b      	uxth	r3, r3
 80bd938:	461a      	mov	r2, r3
 80bd93a:	7c3b      	ldrb	r3, [r7, #16]
 80bd93c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80bd940:	b2db      	uxtb	r3, r3
 80bd942:	fb03 f202 	mul.w	r2, r3, r2
 80bd946:	683b      	ldr	r3, [r7, #0]
 80bd948:	601a      	str	r2, [r3, #0]
 80bd94a:	e002      	b.n	80bd952 <vl53l5_dci_decode_block_header+0xc6>
 80bd94c:	683b      	ldr	r3, [r7, #0]
 80bd94e:	2200      	movs	r2, #0
 80bd950:	601a      	str	r2, [r3, #0]
 80bd952:	697b      	ldr	r3, [r7, #20]
 80bd954:	4618      	mov	r0, r3
 80bd956:	3718      	adds	r7, #24
 80bd958:	46bd      	mov	sp, r7
 80bd95a:	bd80      	pop	{r7, pc}

080bd95c <vl53l5_dci_swap_buffer_byte_ordering>:
 80bd95c:	b480      	push	{r7}
 80bd95e:	b087      	sub	sp, #28
 80bd960:	af00      	add	r7, sp, #0
 80bd962:	6078      	str	r0, [r7, #4]
 80bd964:	6039      	str	r1, [r7, #0]
 80bd966:	2300      	movs	r3, #0
 80bd968:	617b      	str	r3, [r7, #20]
 80bd96a:	2300      	movs	r3, #0
 80bd96c:	613b      	str	r3, [r7, #16]
 80bd96e:	687b      	ldr	r3, [r7, #4]
 80bd970:	2b00      	cmp	r3, #0
 80bd972:	d103      	bne.n	80bd97c <vl53l5_dci_swap_buffer_byte_ordering+0x20>
 80bd974:	f06f 0303 	mvn.w	r3, #3
 80bd978:	613b      	str	r3, [r7, #16]
 80bd97a:	e02a      	b.n	80bd9d2 <vl53l5_dci_swap_buffer_byte_ordering+0x76>
 80bd97c:	683b      	ldr	r3, [r7, #0]
 80bd97e:	f003 0303 	and.w	r3, r3, #3
 80bd982:	2b00      	cmp	r3, #0
 80bd984:	d020      	beq.n	80bd9c8 <vl53l5_dci_swap_buffer_byte_ordering+0x6c>
 80bd986:	f06f 0346 	mvn.w	r3, #70	; 0x46
 80bd98a:	613b      	str	r3, [r7, #16]
 80bd98c:	e021      	b.n	80bd9d2 <vl53l5_dci_swap_buffer_byte_ordering+0x76>
 80bd98e:	687b      	ldr	r3, [r7, #4]
 80bd990:	781b      	ldrb	r3, [r3, #0]
 80bd992:	73fb      	strb	r3, [r7, #15]
 80bd994:	687b      	ldr	r3, [r7, #4]
 80bd996:	78da      	ldrb	r2, [r3, #3]
 80bd998:	687b      	ldr	r3, [r7, #4]
 80bd99a:	701a      	strb	r2, [r3, #0]
 80bd99c:	687b      	ldr	r3, [r7, #4]
 80bd99e:	3303      	adds	r3, #3
 80bd9a0:	7bfa      	ldrb	r2, [r7, #15]
 80bd9a2:	701a      	strb	r2, [r3, #0]
 80bd9a4:	687b      	ldr	r3, [r7, #4]
 80bd9a6:	785b      	ldrb	r3, [r3, #1]
 80bd9a8:	73fb      	strb	r3, [r7, #15]
 80bd9aa:	687b      	ldr	r3, [r7, #4]
 80bd9ac:	3301      	adds	r3, #1
 80bd9ae:	687a      	ldr	r2, [r7, #4]
 80bd9b0:	7892      	ldrb	r2, [r2, #2]
 80bd9b2:	701a      	strb	r2, [r3, #0]
 80bd9b4:	687b      	ldr	r3, [r7, #4]
 80bd9b6:	3302      	adds	r3, #2
 80bd9b8:	7bfa      	ldrb	r2, [r7, #15]
 80bd9ba:	701a      	strb	r2, [r3, #0]
 80bd9bc:	697b      	ldr	r3, [r7, #20]
 80bd9be:	3304      	adds	r3, #4
 80bd9c0:	617b      	str	r3, [r7, #20]
 80bd9c2:	687b      	ldr	r3, [r7, #4]
 80bd9c4:	3304      	adds	r3, #4
 80bd9c6:	607b      	str	r3, [r7, #4]
 80bd9c8:	697a      	ldr	r2, [r7, #20]
 80bd9ca:	683b      	ldr	r3, [r7, #0]
 80bd9cc:	429a      	cmp	r2, r3
 80bd9ce:	d3de      	bcc.n	80bd98e <vl53l5_dci_swap_buffer_byte_ordering+0x32>
 80bd9d0:	bf00      	nop
 80bd9d2:	693b      	ldr	r3, [r7, #16]
 80bd9d4:	4618      	mov	r0, r3
 80bd9d6:	371c      	adds	r7, #28
 80bd9d8:	46bd      	mov	sp, r7
 80bd9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80bd9de:	4770      	bx	lr

080bd9e0 <vl53l5_dci_read_range>:
 80bd9e0:	b580      	push	{r7, lr}
 80bd9e2:	b086      	sub	sp, #24
 80bd9e4:	af00      	add	r7, sp, #0
 80bd9e6:	6078      	str	r0, [r7, #4]
 80bd9e8:	2300      	movs	r3, #0
 80bd9ea:	617b      	str	r3, [r7, #20]
 80bd9ec:	2300      	movs	r3, #0
 80bd9ee:	613b      	str	r3, [r7, #16]
 80bd9f0:	2300      	movs	r3, #0
 80bd9f2:	73fb      	strb	r3, [r7, #15]
 80bd9f4:	687b      	ldr	r3, [r7, #4]
 80bd9f6:	2b00      	cmp	r3, #0
 80bd9f8:	d103      	bne.n	80bda02 <vl53l5_dci_read_range+0x22>
 80bd9fa:	f06f 0303 	mvn.w	r3, #3
 80bd9fe:	617b      	str	r3, [r7, #20]
 80bda00:	e03b      	b.n	80bda7a <vl53l5_dci_read_range+0x9a>
 80bda02:	687b      	ldr	r3, [r7, #4]
 80bda04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80bda06:	2b00      	cmp	r3, #0
 80bda08:	d103      	bne.n	80bda12 <vl53l5_dci_read_range+0x32>
 80bda0a:	f06f 0303 	mvn.w	r3, #3
 80bda0e:	617b      	str	r3, [r7, #20]
 80bda10:	e033      	b.n	80bda7a <vl53l5_dci_read_range+0x9a>
 80bda12:	687b      	ldr	r3, [r7, #4]
 80bda14:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80bda18:	461a      	mov	r2, r3
 80bda1a:	687b      	ldr	r3, [r7, #4]
 80bda1c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80bda20:	4413      	add	r3, r2
 80bda22:	3304      	adds	r3, #4
 80bda24:	613b      	str	r3, [r7, #16]
 80bda26:	687b      	ldr	r3, [r7, #4]
 80bda28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80bda2a:	693a      	ldr	r2, [r7, #16]
 80bda2c:	429a      	cmp	r2, r3
 80bda2e:	d903      	bls.n	80bda38 <vl53l5_dci_read_range+0x58>
 80bda30:	f06f 030d 	mvn.w	r3, #13
 80bda34:	617b      	str	r3, [r7, #20]
 80bda36:	e020      	b.n	80bda7a <vl53l5_dci_read_range+0x9a>
 80bda38:	6939      	ldr	r1, [r7, #16]
 80bda3a:	6878      	ldr	r0, [r7, #4]
 80bda3c:	f000 f8d1 	bl	80bdbe2 <_read_range_ui>
 80bda40:	6178      	str	r0, [r7, #20]
 80bda42:	697b      	ldr	r3, [r7, #20]
 80bda44:	2b00      	cmp	r3, #0
 80bda46:	db15      	blt.n	80bda74 <vl53l5_dci_read_range+0x94>
 80bda48:	687b      	ldr	r3, [r7, #4]
 80bda4a:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 80bda4e:	73fb      	strb	r3, [r7, #15]
 80bda50:	6878      	ldr	r0, [r7, #4]
 80bda52:	f000 f8fb 	bl	80bdc4c <_decode_device_info_block>
 80bda56:	7bf9      	ldrb	r1, [r7, #15]
 80bda58:	2301      	movs	r3, #1
 80bda5a:	2201      	movs	r2, #1
 80bda5c:	6878      	ldr	r0, [r7, #4]
 80bda5e:	f000 f838 	bl	80bdad2 <vl53l5_dci_check_device_info>
 80bda62:	6178      	str	r0, [r7, #20]
 80bda64:	697b      	ldr	r3, [r7, #20]
 80bda66:	2b00      	cmp	r3, #0
 80bda68:	db06      	blt.n	80bda78 <vl53l5_dci_read_range+0x98>
 80bda6a:	6878      	ldr	r0, [r7, #4]
 80bda6c:	f000 f929 	bl	80bdcc2 <_check_range_header_footer>
 80bda70:	6178      	str	r0, [r7, #20]
 80bda72:	e002      	b.n	80bda7a <vl53l5_dci_read_range+0x9a>
 80bda74:	bf00      	nop
 80bda76:	e000      	b.n	80bda7a <vl53l5_dci_read_range+0x9a>
 80bda78:	bf00      	nop
 80bda7a:	697b      	ldr	r3, [r7, #20]
 80bda7c:	4618      	mov	r0, r3
 80bda7e:	3718      	adds	r7, #24
 80bda80:	46bd      	mov	sp, r7
 80bda82:	bd80      	pop	{r7, pc}

080bda84 <vl53l5_dci_get_device_info>:
 80bda84:	b580      	push	{r7, lr}
 80bda86:	b084      	sub	sp, #16
 80bda88:	af00      	add	r7, sp, #0
 80bda8a:	6078      	str	r0, [r7, #4]
 80bda8c:	2300      	movs	r3, #0
 80bda8e:	60fb      	str	r3, [r7, #12]
 80bda90:	687b      	ldr	r3, [r7, #4]
 80bda92:	2b00      	cmp	r3, #0
 80bda94:	d103      	bne.n	80bda9e <vl53l5_dci_get_device_info+0x1a>
 80bda96:	f06f 0303 	mvn.w	r3, #3
 80bda9a:	60fb      	str	r3, [r7, #12]
 80bda9c:	e014      	b.n	80bdac8 <vl53l5_dci_get_device_info+0x44>
 80bda9e:	687b      	ldr	r3, [r7, #4]
 80bdaa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80bdaa2:	2b00      	cmp	r3, #0
 80bdaa4:	d103      	bne.n	80bdaae <vl53l5_dci_get_device_info+0x2a>
 80bdaa6:	f06f 0303 	mvn.w	r3, #3
 80bdaaa:	60fb      	str	r3, [r7, #12]
 80bdaac:	e00c      	b.n	80bdac8 <vl53l5_dci_get_device_info+0x44>
 80bdaae:	2104      	movs	r1, #4
 80bdab0:	6878      	ldr	r0, [r7, #4]
 80bdab2:	f000 f896 	bl	80bdbe2 <_read_range_ui>
 80bdab6:	60f8      	str	r0, [r7, #12]
 80bdab8:	68fb      	ldr	r3, [r7, #12]
 80bdaba:	2b00      	cmp	r3, #0
 80bdabc:	db03      	blt.n	80bdac6 <vl53l5_dci_get_device_info+0x42>
 80bdabe:	6878      	ldr	r0, [r7, #4]
 80bdac0:	f000 f8c4 	bl	80bdc4c <_decode_device_info_block>
 80bdac4:	e000      	b.n	80bdac8 <vl53l5_dci_get_device_info+0x44>
 80bdac6:	bf00      	nop
 80bdac8:	68fb      	ldr	r3, [r7, #12]
 80bdaca:	4618      	mov	r0, r3
 80bdacc:	3710      	adds	r7, #16
 80bdace:	46bd      	mov	sp, r7
 80bdad0:	bd80      	pop	{r7, pc}

080bdad2 <vl53l5_dci_check_device_info>:
 80bdad2:	b480      	push	{r7}
 80bdad4:	b085      	sub	sp, #20
 80bdad6:	af00      	add	r7, sp, #0
 80bdad8:	6078      	str	r0, [r7, #4]
 80bdada:	4608      	mov	r0, r1
 80bdadc:	4611      	mov	r1, r2
 80bdade:	461a      	mov	r2, r3
 80bdae0:	4603      	mov	r3, r0
 80bdae2:	70fb      	strb	r3, [r7, #3]
 80bdae4:	460b      	mov	r3, r1
 80bdae6:	70bb      	strb	r3, [r7, #2]
 80bdae8:	4613      	mov	r3, r2
 80bdaea:	707b      	strb	r3, [r7, #1]
 80bdaec:	2300      	movs	r3, #0
 80bdaee:	60fb      	str	r3, [r7, #12]
 80bdaf0:	687b      	ldr	r3, [r7, #4]
 80bdaf2:	2b00      	cmp	r3, #0
 80bdaf4:	d103      	bne.n	80bdafe <vl53l5_dci_check_device_info+0x2c>
 80bdaf6:	f06f 0303 	mvn.w	r3, #3
 80bdafa:	60fb      	str	r3, [r7, #12]
 80bdafc:	e06a      	b.n	80bdbd4 <vl53l5_dci_check_device_info+0x102>
 80bdafe:	78bb      	ldrb	r3, [r7, #2]
 80bdb00:	f083 0301 	eor.w	r3, r3, #1
 80bdb04:	b2db      	uxtb	r3, r3
 80bdb06:	2b00      	cmp	r3, #0
 80bdb08:	d009      	beq.n	80bdb1e <vl53l5_dci_check_device_info+0x4c>
 80bdb0a:	787b      	ldrb	r3, [r7, #1]
 80bdb0c:	f083 0301 	eor.w	r3, r3, #1
 80bdb10:	b2db      	uxtb	r3, r3
 80bdb12:	2b00      	cmp	r3, #0
 80bdb14:	d003      	beq.n	80bdb1e <vl53l5_dci_check_device_info+0x4c>
 80bdb16:	f06f 0303 	mvn.w	r3, #3
 80bdb1a:	60fb      	str	r3, [r7, #12]
 80bdb1c:	e05a      	b.n	80bdbd4 <vl53l5_dci_check_device_info+0x102>
 80bdb1e:	687b      	ldr	r3, [r7, #4]
 80bdb20:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80bdb24:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80bdb28:	b2db      	uxtb	r3, r3
 80bdb2a:	2b00      	cmp	r3, #0
 80bdb2c:	d00c      	beq.n	80bdb48 <vl53l5_dci_check_device_info+0x76>
 80bdb2e:	687b      	ldr	r3, [r7, #4]
 80bdb30:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80bdb34:	2b00      	cmp	r3, #0
 80bdb36:	d003      	beq.n	80bdb40 <vl53l5_dci_check_device_info+0x6e>
 80bdb38:	f06f 0341 	mvn.w	r3, #65	; 0x41
 80bdb3c:	60fb      	str	r3, [r7, #12]
 80bdb3e:	e049      	b.n	80bdbd4 <vl53l5_dci_check_device_info+0x102>
 80bdb40:	f06f 0342 	mvn.w	r3, #66	; 0x42
 80bdb44:	60fb      	str	r3, [r7, #12]
 80bdb46:	e045      	b.n	80bdbd4 <vl53l5_dci_check_device_info+0x102>
 80bdb48:	687b      	ldr	r3, [r7, #4]
 80bdb4a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80bdb4e:	f003 0308 	and.w	r3, r3, #8
 80bdb52:	b2db      	uxtb	r3, r3
 80bdb54:	2b00      	cmp	r3, #0
 80bdb56:	d003      	beq.n	80bdb60 <vl53l5_dci_check_device_info+0x8e>
 80bdb58:	f06f 0341 	mvn.w	r3, #65	; 0x41
 80bdb5c:	60fb      	str	r3, [r7, #12]
 80bdb5e:	e039      	b.n	80bdbd4 <vl53l5_dci_check_device_info+0x102>
 80bdb60:	687b      	ldr	r3, [r7, #4]
 80bdb62:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80bdb66:	f003 0310 	and.w	r3, r3, #16
 80bdb6a:	b2db      	uxtb	r3, r3
 80bdb6c:	2b00      	cmp	r3, #0
 80bdb6e:	d007      	beq.n	80bdb80 <vl53l5_dci_check_device_info+0xae>
 80bdb70:	687b      	ldr	r3, [r7, #4]
 80bdb72:	22ff      	movs	r2, #255	; 0xff
 80bdb74:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
 80bdb78:	f06f 0339 	mvn.w	r3, #57	; 0x39
 80bdb7c:	60fb      	str	r3, [r7, #12]
 80bdb7e:	e029      	b.n	80bdbd4 <vl53l5_dci_check_device_info+0x102>
 80bdb80:	687b      	ldr	r3, [r7, #4]
 80bdb82:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80bdb86:	f003 0308 	and.w	r3, r3, #8
 80bdb8a:	b2db      	uxtb	r3, r3
 80bdb8c:	2b00      	cmp	r3, #0
 80bdb8e:	d008      	beq.n	80bdba2 <vl53l5_dci_check_device_info+0xd0>
 80bdb90:	687b      	ldr	r3, [r7, #4]
 80bdb92:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80bdb96:	2b00      	cmp	r3, #0
 80bdb98:	d003      	beq.n	80bdba2 <vl53l5_dci_check_device_info+0xd0>
 80bdb9a:	f06f 0341 	mvn.w	r3, #65	; 0x41
 80bdb9e:	60fb      	str	r3, [r7, #12]
 80bdba0:	e018      	b.n	80bdbd4 <vl53l5_dci_check_device_info+0x102>
 80bdba2:	78bb      	ldrb	r3, [r7, #2]
 80bdba4:	2b00      	cmp	r3, #0
 80bdba6:	d005      	beq.n	80bdbb4 <vl53l5_dci_check_device_info+0xe2>
 80bdba8:	687b      	ldr	r3, [r7, #4]
 80bdbaa:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 80bdbae:	78fa      	ldrb	r2, [r7, #3]
 80bdbb0:	429a      	cmp	r2, r3
 80bdbb2:	d00a      	beq.n	80bdbca <vl53l5_dci_check_device_info+0xf8>
 80bdbb4:	787b      	ldrb	r3, [r7, #1]
 80bdbb6:	2b00      	cmp	r3, #0
 80bdbb8:	d00b      	beq.n	80bdbd2 <vl53l5_dci_check_device_info+0x100>
 80bdbba:	687b      	ldr	r3, [r7, #4]
 80bdbbc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80bdbc0:	f003 0310 	and.w	r3, r3, #16
 80bdbc4:	b2db      	uxtb	r3, r3
 80bdbc6:	2b00      	cmp	r3, #0
 80bdbc8:	d103      	bne.n	80bdbd2 <vl53l5_dci_check_device_info+0x100>
 80bdbca:	f06f 0358 	mvn.w	r3, #88	; 0x58
 80bdbce:	60fb      	str	r3, [r7, #12]
 80bdbd0:	e000      	b.n	80bdbd4 <vl53l5_dci_check_device_info+0x102>
 80bdbd2:	bf00      	nop
 80bdbd4:	68fb      	ldr	r3, [r7, #12]
 80bdbd6:	4618      	mov	r0, r3
 80bdbd8:	3714      	adds	r7, #20
 80bdbda:	46bd      	mov	sp, r7
 80bdbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80bdbe0:	4770      	bx	lr

080bdbe2 <_read_range_ui>:
 80bdbe2:	b580      	push	{r7, lr}
 80bdbe4:	b086      	sub	sp, #24
 80bdbe6:	af00      	add	r7, sp, #0
 80bdbe8:	6078      	str	r0, [r7, #4]
 80bdbea:	6039      	str	r1, [r7, #0]
 80bdbec:	2300      	movs	r3, #0
 80bdbee:	617b      	str	r3, [r7, #20]
 80bdbf0:	687b      	ldr	r3, [r7, #4]
 80bdbf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80bdbf4:	613b      	str	r3, [r7, #16]
 80bdbf6:	687b      	ldr	r3, [r7, #4]
 80bdbf8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80bdbfc:	81fb      	strh	r3, [r7, #14]
 80bdbfe:	687b      	ldr	r3, [r7, #4]
 80bdc00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80bdc02:	683a      	ldr	r2, [r7, #0]
 80bdc04:	429a      	cmp	r2, r3
 80bdc06:	d903      	bls.n	80bdc10 <_read_range_ui+0x2e>
 80bdc08:	f06f 0303 	mvn.w	r3, #3
 80bdc0c:	617b      	str	r3, [r7, #20]
 80bdc0e:	e018      	b.n	80bdc42 <_read_range_ui+0x60>
 80bdc10:	687b      	ldr	r3, [r7, #4]
 80bdc12:	2200      	movs	r2, #0
 80bdc14:	631a      	str	r2, [r3, #48]	; 0x30
 80bdc16:	89f9      	ldrh	r1, [r7, #14]
 80bdc18:	683b      	ldr	r3, [r7, #0]
 80bdc1a:	693a      	ldr	r2, [r7, #16]
 80bdc1c:	6878      	ldr	r0, [r7, #4]
 80bdc1e:	f000 ff67 	bl	80beaf0 <vl53l5_read_multi>
 80bdc22:	6178      	str	r0, [r7, #20]
 80bdc24:	697b      	ldr	r3, [r7, #20]
 80bdc26:	2b00      	cmp	r3, #0
 80bdc28:	db0a      	blt.n	80bdc40 <_read_range_ui+0x5e>
 80bdc2a:	687b      	ldr	r3, [r7, #4]
 80bdc2c:	683a      	ldr	r2, [r7, #0]
 80bdc2e:	631a      	str	r2, [r3, #48]	; 0x30
 80bdc30:	687b      	ldr	r3, [r7, #4]
 80bdc32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80bdc34:	4619      	mov	r1, r3
 80bdc36:	6938      	ldr	r0, [r7, #16]
 80bdc38:	f7ff fe90 	bl	80bd95c <vl53l5_dci_swap_buffer_byte_ordering>
 80bdc3c:	6178      	str	r0, [r7, #20]
 80bdc3e:	e000      	b.n	80bdc42 <_read_range_ui+0x60>
 80bdc40:	bf00      	nop
 80bdc42:	697b      	ldr	r3, [r7, #20]
 80bdc44:	4618      	mov	r0, r3
 80bdc46:	3718      	adds	r7, #24
 80bdc48:	46bd      	mov	sp, r7
 80bdc4a:	bd80      	pop	{r7, pc}

080bdc4c <_decode_device_info_block>:
 80bdc4c:	b580      	push	{r7, lr}
 80bdc4e:	b084      	sub	sp, #16
 80bdc50:	af00      	add	r7, sp, #0
 80bdc52:	6078      	str	r0, [r7, #4]
 80bdc54:	687b      	ldr	r3, [r7, #4]
 80bdc56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80bdc58:	60fb      	str	r3, [r7, #12]
 80bdc5a:	68fb      	ldr	r3, [r7, #12]
 80bdc5c:	1c5a      	adds	r2, r3, #1
 80bdc5e:	60fa      	str	r2, [r7, #12]
 80bdc60:	4619      	mov	r1, r3
 80bdc62:	2001      	movs	r0, #1
 80bdc64:	f000 f869 	bl	80bdd3a <vl53l5_decode_uint8_t>
 80bdc68:	4603      	mov	r3, r0
 80bdc6a:	461a      	mov	r2, r3
 80bdc6c:	687b      	ldr	r3, [r7, #4]
 80bdc6e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80bdc72:	68fb      	ldr	r3, [r7, #12]
 80bdc74:	1c5a      	adds	r2, r3, #1
 80bdc76:	60fa      	str	r2, [r7, #12]
 80bdc78:	4619      	mov	r1, r3
 80bdc7a:	2001      	movs	r0, #1
 80bdc7c:	f000 f85d 	bl	80bdd3a <vl53l5_decode_uint8_t>
 80bdc80:	4603      	mov	r3, r0
 80bdc82:	461a      	mov	r2, r3
 80bdc84:	687b      	ldr	r3, [r7, #4]
 80bdc86:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 80bdc8a:	68fb      	ldr	r3, [r7, #12]
 80bdc8c:	1c5a      	adds	r2, r3, #1
 80bdc8e:	60fa      	str	r2, [r7, #12]
 80bdc90:	4619      	mov	r1, r3
 80bdc92:	2001      	movs	r0, #1
 80bdc94:	f000 f851 	bl	80bdd3a <vl53l5_decode_uint8_t>
 80bdc98:	4603      	mov	r3, r0
 80bdc9a:	461a      	mov	r2, r3
 80bdc9c:	687b      	ldr	r3, [r7, #4]
 80bdc9e:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 80bdca2:	68fb      	ldr	r3, [r7, #12]
 80bdca4:	1c5a      	adds	r2, r3, #1
 80bdca6:	60fa      	str	r2, [r7, #12]
 80bdca8:	4619      	mov	r1, r3
 80bdcaa:	2001      	movs	r0, #1
 80bdcac:	f000 f845 	bl	80bdd3a <vl53l5_decode_uint8_t>
 80bdcb0:	4603      	mov	r3, r0
 80bdcb2:	461a      	mov	r2, r3
 80bdcb4:	687b      	ldr	r3, [r7, #4]
 80bdcb6:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
 80bdcba:	bf00      	nop
 80bdcbc:	3710      	adds	r7, #16
 80bdcbe:	46bd      	mov	sp, r7
 80bdcc0:	bd80      	pop	{r7, pc}

080bdcc2 <_check_range_header_footer>:
 80bdcc2:	b580      	push	{r7, lr}
 80bdcc4:	b086      	sub	sp, #24
 80bdcc6:	af00      	add	r7, sp, #0
 80bdcc8:	6078      	str	r0, [r7, #4]
 80bdcca:	2300      	movs	r3, #0
 80bdccc:	617b      	str	r3, [r7, #20]
 80bdcce:	2300      	movs	r3, #0
 80bdcd0:	827b      	strh	r3, [r7, #18]
 80bdcd2:	2300      	movs	r3, #0
 80bdcd4:	823b      	strh	r3, [r7, #16]
 80bdcd6:	2300      	movs	r3, #0
 80bdcd8:	60fb      	str	r3, [r7, #12]
 80bdcda:	687b      	ldr	r3, [r7, #4]
 80bdcdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80bdcde:	687b      	ldr	r3, [r7, #4]
 80bdce0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80bdce4:	3b04      	subs	r3, #4
 80bdce6:	4413      	add	r3, r2
 80bdce8:	60fb      	str	r3, [r7, #12]
 80bdcea:	68f9      	ldr	r1, [r7, #12]
 80bdcec:	2002      	movs	r0, #2
 80bdcee:	f000 f841 	bl	80bdd74 <vl53l5_decode_uint16_t>
 80bdcf2:	4603      	mov	r3, r0
 80bdcf4:	827b      	strh	r3, [r7, #18]
 80bdcf6:	687b      	ldr	r3, [r7, #4]
 80bdcf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80bdcfa:	687b      	ldr	r3, [r7, #4]
 80bdcfc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80bdd00:	4619      	mov	r1, r3
 80bdd02:	687b      	ldr	r3, [r7, #4]
 80bdd04:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80bdd08:	440b      	add	r3, r1
 80bdd0a:	3b04      	subs	r3, #4
 80bdd0c:	4413      	add	r3, r2
 80bdd0e:	60fb      	str	r3, [r7, #12]
 80bdd10:	68f9      	ldr	r1, [r7, #12]
 80bdd12:	2002      	movs	r0, #2
 80bdd14:	f000 f82e 	bl	80bdd74 <vl53l5_decode_uint16_t>
 80bdd18:	4603      	mov	r3, r0
 80bdd1a:	823b      	strh	r3, [r7, #16]
 80bdd1c:	8a7a      	ldrh	r2, [r7, #18]
 80bdd1e:	8a3b      	ldrh	r3, [r7, #16]
 80bdd20:	429a      	cmp	r2, r3
 80bdd22:	d003      	beq.n	80bdd2c <_check_range_header_footer+0x6a>
 80bdd24:	f06f 0355 	mvn.w	r3, #85	; 0x55
 80bdd28:	617b      	str	r3, [r7, #20]
 80bdd2a:	e001      	b.n	80bdd30 <_check_range_header_footer+0x6e>
 80bdd2c:	2300      	movs	r3, #0
 80bdd2e:	617b      	str	r3, [r7, #20]
 80bdd30:	697b      	ldr	r3, [r7, #20]
 80bdd32:	4618      	mov	r0, r3
 80bdd34:	3718      	adds	r7, #24
 80bdd36:	46bd      	mov	sp, r7
 80bdd38:	bd80      	pop	{r7, pc}

080bdd3a <vl53l5_decode_uint8_t>:
 80bdd3a:	b480      	push	{r7}
 80bdd3c:	b083      	sub	sp, #12
 80bdd3e:	af00      	add	r7, sp, #0
 80bdd40:	4603      	mov	r3, r0
 80bdd42:	6039      	str	r1, [r7, #0]
 80bdd44:	80fb      	strh	r3, [r7, #6]
 80bdd46:	683b      	ldr	r3, [r7, #0]
 80bdd48:	781b      	ldrb	r3, [r3, #0]
 80bdd4a:	4618      	mov	r0, r3
 80bdd4c:	370c      	adds	r7, #12
 80bdd4e:	46bd      	mov	sp, r7
 80bdd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 80bdd54:	4770      	bx	lr

080bdd56 <vl53l5_decode_int8_t>:
 80bdd56:	b480      	push	{r7}
 80bdd58:	b083      	sub	sp, #12
 80bdd5a:	af00      	add	r7, sp, #0
 80bdd5c:	4603      	mov	r3, r0
 80bdd5e:	6039      	str	r1, [r7, #0]
 80bdd60:	80fb      	strh	r3, [r7, #6]
 80bdd62:	683b      	ldr	r3, [r7, #0]
 80bdd64:	781b      	ldrb	r3, [r3, #0]
 80bdd66:	b25b      	sxtb	r3, r3
 80bdd68:	4618      	mov	r0, r3
 80bdd6a:	370c      	adds	r7, #12
 80bdd6c:	46bd      	mov	sp, r7
 80bdd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80bdd72:	4770      	bx	lr

080bdd74 <vl53l5_decode_uint16_t>:
 80bdd74:	b480      	push	{r7}
 80bdd76:	b085      	sub	sp, #20
 80bdd78:	af00      	add	r7, sp, #0
 80bdd7a:	4603      	mov	r3, r0
 80bdd7c:	6039      	str	r1, [r7, #0]
 80bdd7e:	80fb      	strh	r3, [r7, #6]
 80bdd80:	2300      	movs	r3, #0
 80bdd82:	81fb      	strh	r3, [r7, #14]
 80bdd84:	e00a      	b.n	80bdd9c <vl53l5_decode_uint16_t+0x28>
 80bdd86:	89fb      	ldrh	r3, [r7, #14]
 80bdd88:	021b      	lsls	r3, r3, #8
 80bdd8a:	b21a      	sxth	r2, r3
 80bdd8c:	88fb      	ldrh	r3, [r7, #6]
 80bdd8e:	6839      	ldr	r1, [r7, #0]
 80bdd90:	440b      	add	r3, r1
 80bdd92:	781b      	ldrb	r3, [r3, #0]
 80bdd94:	b21b      	sxth	r3, r3
 80bdd96:	4313      	orrs	r3, r2
 80bdd98:	b21b      	sxth	r3, r3
 80bdd9a:	81fb      	strh	r3, [r7, #14]
 80bdd9c:	88fb      	ldrh	r3, [r7, #6]
 80bdd9e:	1e5a      	subs	r2, r3, #1
 80bdda0:	80fa      	strh	r2, [r7, #6]
 80bdda2:	2b00      	cmp	r3, #0
 80bdda4:	d1ef      	bne.n	80bdd86 <vl53l5_decode_uint16_t+0x12>
 80bdda6:	89fb      	ldrh	r3, [r7, #14]
 80bdda8:	4618      	mov	r0, r3
 80bddaa:	3714      	adds	r7, #20
 80bddac:	46bd      	mov	sp, r7
 80bddae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80bddb2:	4770      	bx	lr

080bddb4 <vl53l5_decode_int16_t>:
 80bddb4:	b480      	push	{r7}
 80bddb6:	b085      	sub	sp, #20
 80bddb8:	af00      	add	r7, sp, #0
 80bddba:	4603      	mov	r3, r0
 80bddbc:	6039      	str	r1, [r7, #0]
 80bddbe:	80fb      	strh	r3, [r7, #6]
 80bddc0:	2300      	movs	r3, #0
 80bddc2:	81fb      	strh	r3, [r7, #14]
 80bddc4:	88fb      	ldrh	r3, [r7, #6]
 80bddc6:	3b01      	subs	r3, #1
 80bddc8:	683a      	ldr	r2, [r7, #0]
 80bddca:	4413      	add	r3, r2
 80bddcc:	781b      	ldrb	r3, [r3, #0]
 80bddce:	b25b      	sxtb	r3, r3
 80bddd0:	2b00      	cmp	r3, #0
 80bddd2:	da0e      	bge.n	80bddf2 <vl53l5_decode_int16_t+0x3e>
 80bddd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80bddd8:	81fb      	strh	r3, [r7, #14]
 80bddda:	e00a      	b.n	80bddf2 <vl53l5_decode_int16_t+0x3e>
 80bdddc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80bdde0:	021b      	lsls	r3, r3, #8
 80bdde2:	b21a      	sxth	r2, r3
 80bdde4:	88fb      	ldrh	r3, [r7, #6]
 80bdde6:	6839      	ldr	r1, [r7, #0]
 80bdde8:	440b      	add	r3, r1
 80bddea:	781b      	ldrb	r3, [r3, #0]
 80bddec:	b21b      	sxth	r3, r3
 80bddee:	4313      	orrs	r3, r2
 80bddf0:	81fb      	strh	r3, [r7, #14]
 80bddf2:	88fb      	ldrh	r3, [r7, #6]
 80bddf4:	1e5a      	subs	r2, r3, #1
 80bddf6:	80fa      	strh	r2, [r7, #6]
 80bddf8:	2b00      	cmp	r3, #0
 80bddfa:	d1ef      	bne.n	80bdddc <vl53l5_decode_int16_t+0x28>
 80bddfc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80bde00:	4618      	mov	r0, r3
 80bde02:	3714      	adds	r7, #20
 80bde04:	46bd      	mov	sp, r7
 80bde06:	f85d 7b04 	ldr.w	r7, [sp], #4
 80bde0a:	4770      	bx	lr

080bde0c <vl53l5_decode_int32_t>:
 80bde0c:	b480      	push	{r7}
 80bde0e:	b085      	sub	sp, #20
 80bde10:	af00      	add	r7, sp, #0
 80bde12:	4603      	mov	r3, r0
 80bde14:	6039      	str	r1, [r7, #0]
 80bde16:	80fb      	strh	r3, [r7, #6]
 80bde18:	2300      	movs	r3, #0
 80bde1a:	60fb      	str	r3, [r7, #12]
 80bde1c:	88fb      	ldrh	r3, [r7, #6]
 80bde1e:	3b01      	subs	r3, #1
 80bde20:	683a      	ldr	r2, [r7, #0]
 80bde22:	4413      	add	r3, r2
 80bde24:	781b      	ldrb	r3, [r3, #0]
 80bde26:	b25b      	sxtb	r3, r3
 80bde28:	2b00      	cmp	r3, #0
 80bde2a:	da0b      	bge.n	80bde44 <vl53l5_decode_int32_t+0x38>
 80bde2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80bde30:	60fb      	str	r3, [r7, #12]
 80bde32:	e007      	b.n	80bde44 <vl53l5_decode_int32_t+0x38>
 80bde34:	68fb      	ldr	r3, [r7, #12]
 80bde36:	021b      	lsls	r3, r3, #8
 80bde38:	88fa      	ldrh	r2, [r7, #6]
 80bde3a:	6839      	ldr	r1, [r7, #0]
 80bde3c:	440a      	add	r2, r1
 80bde3e:	7812      	ldrb	r2, [r2, #0]
 80bde40:	4313      	orrs	r3, r2
 80bde42:	60fb      	str	r3, [r7, #12]
 80bde44:	88fb      	ldrh	r3, [r7, #6]
 80bde46:	1e5a      	subs	r2, r3, #1
 80bde48:	80fa      	strh	r2, [r7, #6]
 80bde4a:	2b00      	cmp	r3, #0
 80bde4c:	d1f2      	bne.n	80bde34 <vl53l5_decode_int32_t+0x28>
 80bde4e:	68fb      	ldr	r3, [r7, #12]
 80bde50:	4618      	mov	r0, r3
 80bde52:	3714      	adds	r7, #20
 80bde54:	46bd      	mov	sp, r7
 80bde56:	f85d 7b04 	ldr.w	r7, [sp], #4
 80bde5a:	4770      	bx	lr

080bde5c <vl53l5_encode_uint32_t>:
 80bde5c:	b480      	push	{r7}
 80bde5e:	b087      	sub	sp, #28
 80bde60:	af00      	add	r7, sp, #0
 80bde62:	60f8      	str	r0, [r7, #12]
 80bde64:	460b      	mov	r3, r1
 80bde66:	607a      	str	r2, [r7, #4]
 80bde68:	817b      	strh	r3, [r7, #10]
 80bde6a:	2300      	movs	r3, #0
 80bde6c:	82fb      	strh	r3, [r7, #22]
 80bde6e:	2300      	movs	r3, #0
 80bde70:	613b      	str	r3, [r7, #16]
 80bde72:	68fb      	ldr	r3, [r7, #12]
 80bde74:	613b      	str	r3, [r7, #16]
 80bde76:	2300      	movs	r3, #0
 80bde78:	82fb      	strh	r3, [r7, #22]
 80bde7a:	e00b      	b.n	80bde94 <vl53l5_encode_uint32_t+0x38>
 80bde7c:	8afb      	ldrh	r3, [r7, #22]
 80bde7e:	687a      	ldr	r2, [r7, #4]
 80bde80:	4413      	add	r3, r2
 80bde82:	693a      	ldr	r2, [r7, #16]
 80bde84:	b2d2      	uxtb	r2, r2
 80bde86:	701a      	strb	r2, [r3, #0]
 80bde88:	693b      	ldr	r3, [r7, #16]
 80bde8a:	0a1b      	lsrs	r3, r3, #8
 80bde8c:	613b      	str	r3, [r7, #16]
 80bde8e:	8afb      	ldrh	r3, [r7, #22]
 80bde90:	3301      	adds	r3, #1
 80bde92:	82fb      	strh	r3, [r7, #22]
 80bde94:	8afa      	ldrh	r2, [r7, #22]
 80bde96:	897b      	ldrh	r3, [r7, #10]
 80bde98:	429a      	cmp	r2, r3
 80bde9a:	d3ef      	bcc.n	80bde7c <vl53l5_encode_uint32_t+0x20>
 80bde9c:	bf00      	nop
 80bde9e:	371c      	adds	r7, #28
 80bdea0:	46bd      	mov	sp, r7
 80bdea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80bdea6:	4770      	bx	lr

080bdea8 <vl53l5_decode_uint32_t>:
 80bdea8:	b480      	push	{r7}
 80bdeaa:	b085      	sub	sp, #20
 80bdeac:	af00      	add	r7, sp, #0
 80bdeae:	4603      	mov	r3, r0
 80bdeb0:	6039      	str	r1, [r7, #0]
 80bdeb2:	80fb      	strh	r3, [r7, #6]
 80bdeb4:	2300      	movs	r3, #0
 80bdeb6:	60fb      	str	r3, [r7, #12]
 80bdeb8:	e007      	b.n	80bdeca <vl53l5_decode_uint32_t+0x22>
 80bdeba:	68fb      	ldr	r3, [r7, #12]
 80bdebc:	021b      	lsls	r3, r3, #8
 80bdebe:	88fa      	ldrh	r2, [r7, #6]
 80bdec0:	6839      	ldr	r1, [r7, #0]
 80bdec2:	440a      	add	r2, r1
 80bdec4:	7812      	ldrb	r2, [r2, #0]
 80bdec6:	4313      	orrs	r3, r2
 80bdec8:	60fb      	str	r3, [r7, #12]
 80bdeca:	88fb      	ldrh	r3, [r7, #6]
 80bdecc:	1e5a      	subs	r2, r3, #1
 80bdece:	80fa      	strh	r2, [r7, #6]
 80bded0:	2b00      	cmp	r3, #0
 80bded2:	d1f2      	bne.n	80bdeba <vl53l5_decode_uint32_t+0x12>
 80bded4:	68fb      	ldr	r3, [r7, #12]
 80bded6:	4618      	mov	r0, r3
 80bded8:	3714      	adds	r7, #20
 80bdeda:	46bd      	mov	sp, r7
 80bdedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80bdee0:	4770      	bx	lr

080bdee2 <vl53l5_decode_switch>:
 80bdee2:	b580      	push	{r7, lr}
 80bdee4:	b086      	sub	sp, #24
 80bdee6:	af00      	add	r7, sp, #0
 80bdee8:	60b9      	str	r1, [r7, #8]
 80bdeea:	607a      	str	r2, [r7, #4]
 80bdeec:	603b      	str	r3, [r7, #0]
 80bdeee:	4603      	mov	r3, r0
 80bdef0:	81fb      	strh	r3, [r7, #14]
 80bdef2:	2300      	movs	r3, #0
 80bdef4:	617b      	str	r3, [r7, #20]
 80bdef6:	89fb      	ldrh	r3, [r7, #14]
 80bdef8:	f5b3 4fa8 	cmp.w	r3, #21504	; 0x5400
 80bdefc:	d30c      	bcc.n	80bdf18 <vl53l5_decode_switch+0x36>
 80bdefe:	89fb      	ldrh	r3, [r7, #14]
 80bdf00:	f645 12c8 	movw	r2, #22984	; 0x59c8
 80bdf04:	4293      	cmp	r3, r2
 80bdf06:	d807      	bhi.n	80bdf18 <vl53l5_decode_switch+0x36>
 80bdf08:	89f8      	ldrh	r0, [r7, #14]
 80bdf0a:	683b      	ldr	r3, [r7, #0]
 80bdf0c:	687a      	ldr	r2, [r7, #4]
 80bdf0e:	68b9      	ldr	r1, [r7, #8]
 80bdf10:	f001 ffd9 	bl	80bfec6 <vl53l5_core_decode_cmd>
 80bdf14:	6178      	str	r0, [r7, #20]
 80bdf16:	e026      	b.n	80bdf66 <vl53l5_decode_switch+0x84>
 80bdf18:	89fb      	ldrh	r3, [r7, #14]
 80bdf1a:	f645 12cf 	movw	r2, #22991	; 0x59cf
 80bdf1e:	4293      	cmp	r3, r2
 80bdf20:	d90c      	bls.n	80bdf3c <vl53l5_decode_switch+0x5a>
 80bdf22:	89fb      	ldrh	r3, [r7, #14]
 80bdf24:	f24a 323c 	movw	r2, #41788	; 0xa33c
 80bdf28:	4293      	cmp	r3, r2
 80bdf2a:	d807      	bhi.n	80bdf3c <vl53l5_decode_switch+0x5a>
 80bdf2c:	89f8      	ldrh	r0, [r7, #14]
 80bdf2e:	683b      	ldr	r3, [r7, #0]
 80bdf30:	687a      	ldr	r2, [r7, #4]
 80bdf32:	68b9      	ldr	r1, [r7, #8]
 80bdf34:	f000 fbda 	bl	80be6ec <vl53l5_results_decode_cmd>
 80bdf38:	6178      	str	r0, [r7, #20]
 80bdf3a:	e014      	b.n	80bdf66 <vl53l5_decode_switch+0x84>
 80bdf3c:	89fb      	ldrh	r3, [r7, #14]
 80bdf3e:	f24a 3257 	movw	r2, #41815	; 0xa357
 80bdf42:	4293      	cmp	r3, r2
 80bdf44:	d90c      	bls.n	80bdf60 <vl53l5_decode_switch+0x7e>
 80bdf46:	89fb      	ldrh	r3, [r7, #14]
 80bdf48:	f64b 4280 	movw	r2, #48256	; 0xbc80
 80bdf4c:	4293      	cmp	r3, r2
 80bdf4e:	d807      	bhi.n	80bdf60 <vl53l5_decode_switch+0x7e>
 80bdf50:	89f8      	ldrh	r0, [r7, #14]
 80bdf52:	683b      	ldr	r3, [r7, #0]
 80bdf54:	687a      	ldr	r2, [r7, #4]
 80bdf56:	68b9      	ldr	r1, [r7, #8]
 80bdf58:	f001 fcac 	bl	80bf8b4 <vl53l5_calibration_decode_cmd>
 80bdf5c:	6178      	str	r0, [r7, #20]
 80bdf5e:	e002      	b.n	80bdf66 <vl53l5_decode_switch+0x84>
 80bdf60:	f06f 0308 	mvn.w	r3, #8
 80bdf64:	617b      	str	r3, [r7, #20]
 80bdf66:	697b      	ldr	r3, [r7, #20]
 80bdf68:	4618      	mov	r0, r3
 80bdf6a:	3718      	adds	r7, #24
 80bdf6c:	46bd      	mov	sp, r7
 80bdf6e:	bd80      	pop	{r7, pc}

080bdf70 <_decode_dci_grp_buf_meta_data>:
 80bdf70:	b580      	push	{r7, lr}
 80bdf72:	b088      	sub	sp, #32
 80bdf74:	af00      	add	r7, sp, #0
 80bdf76:	60f8      	str	r0, [r7, #12]
 80bdf78:	60b9      	str	r1, [r7, #8]
 80bdf7a:	607a      	str	r2, [r7, #4]
 80bdf7c:	2300      	movs	r3, #0
 80bdf7e:	61fb      	str	r3, [r7, #28]
 80bdf80:	2300      	movs	r3, #0
 80bdf82:	61bb      	str	r3, [r7, #24]
 80bdf84:	68bb      	ldr	r3, [r7, #8]
 80bdf86:	617b      	str	r3, [r7, #20]
 80bdf88:	68fb      	ldr	r3, [r7, #12]
 80bdf8a:	2b0c      	cmp	r3, #12
 80bdf8c:	d903      	bls.n	80bdf96 <_decode_dci_grp_buf_meta_data+0x26>
 80bdf8e:	f06f 0304 	mvn.w	r3, #4
 80bdf92:	61fb      	str	r3, [r7, #28]
 80bdf94:	e085      	b.n	80be0a2 <_decode_dci_grp_buf_meta_data+0x132>
 80bdf96:	6979      	ldr	r1, [r7, #20]
 80bdf98:	2004      	movs	r0, #4
 80bdf9a:	f7ff ff85 	bl	80bdea8 <vl53l5_decode_uint32_t>
 80bdf9e:	4602      	mov	r2, r0
 80bdfa0:	687b      	ldr	r3, [r7, #4]
 80bdfa2:	601a      	str	r2, [r3, #0]
 80bdfa4:	697b      	ldr	r3, [r7, #20]
 80bdfa6:	3304      	adds	r3, #4
 80bdfa8:	617b      	str	r3, [r7, #20]
 80bdfaa:	69bb      	ldr	r3, [r7, #24]
 80bdfac:	3304      	adds	r3, #4
 80bdfae:	61bb      	str	r3, [r7, #24]
 80bdfb0:	6979      	ldr	r1, [r7, #20]
 80bdfb2:	2001      	movs	r0, #1
 80bdfb4:	f7ff fec1 	bl	80bdd3a <vl53l5_decode_uint8_t>
 80bdfb8:	4603      	mov	r3, r0
 80bdfba:	461a      	mov	r2, r3
 80bdfbc:	687b      	ldr	r3, [r7, #4]
 80bdfbe:	711a      	strb	r2, [r3, #4]
 80bdfc0:	697b      	ldr	r3, [r7, #20]
 80bdfc2:	3301      	adds	r3, #1
 80bdfc4:	617b      	str	r3, [r7, #20]
 80bdfc6:	69bb      	ldr	r3, [r7, #24]
 80bdfc8:	3301      	adds	r3, #1
 80bdfca:	61bb      	str	r3, [r7, #24]
 80bdfcc:	6979      	ldr	r1, [r7, #20]
 80bdfce:	2001      	movs	r0, #1
 80bdfd0:	f7ff feb3 	bl	80bdd3a <vl53l5_decode_uint8_t>
 80bdfd4:	4603      	mov	r3, r0
 80bdfd6:	461a      	mov	r2, r3
 80bdfd8:	687b      	ldr	r3, [r7, #4]
 80bdfda:	715a      	strb	r2, [r3, #5]
 80bdfdc:	697b      	ldr	r3, [r7, #20]
 80bdfde:	3301      	adds	r3, #1
 80bdfe0:	617b      	str	r3, [r7, #20]
 80bdfe2:	69bb      	ldr	r3, [r7, #24]
 80bdfe4:	3301      	adds	r3, #1
 80bdfe6:	61bb      	str	r3, [r7, #24]
 80bdfe8:	6979      	ldr	r1, [r7, #20]
 80bdfea:	2001      	movs	r0, #1
 80bdfec:	f7ff fea5 	bl	80bdd3a <vl53l5_decode_uint8_t>
 80bdff0:	4603      	mov	r3, r0
 80bdff2:	461a      	mov	r2, r3
 80bdff4:	687b      	ldr	r3, [r7, #4]
 80bdff6:	719a      	strb	r2, [r3, #6]
 80bdff8:	697b      	ldr	r3, [r7, #20]
 80bdffa:	3301      	adds	r3, #1
 80bdffc:	617b      	str	r3, [r7, #20]
 80bdffe:	69bb      	ldr	r3, [r7, #24]
 80be000:	3301      	adds	r3, #1
 80be002:	61bb      	str	r3, [r7, #24]
 80be004:	6979      	ldr	r1, [r7, #20]
 80be006:	2001      	movs	r0, #1
 80be008:	f7ff fe97 	bl	80bdd3a <vl53l5_decode_uint8_t>
 80be00c:	4603      	mov	r3, r0
 80be00e:	461a      	mov	r2, r3
 80be010:	687b      	ldr	r3, [r7, #4]
 80be012:	71da      	strb	r2, [r3, #7]
 80be014:	697b      	ldr	r3, [r7, #20]
 80be016:	3301      	adds	r3, #1
 80be018:	617b      	str	r3, [r7, #20]
 80be01a:	69bb      	ldr	r3, [r7, #24]
 80be01c:	3301      	adds	r3, #1
 80be01e:	61bb      	str	r3, [r7, #24]
 80be020:	6979      	ldr	r1, [r7, #20]
 80be022:	2001      	movs	r0, #1
 80be024:	f7ff fe97 	bl	80bdd56 <vl53l5_decode_int8_t>
 80be028:	4603      	mov	r3, r0
 80be02a:	461a      	mov	r2, r3
 80be02c:	687b      	ldr	r3, [r7, #4]
 80be02e:	721a      	strb	r2, [r3, #8]
 80be030:	697b      	ldr	r3, [r7, #20]
 80be032:	3301      	adds	r3, #1
 80be034:	617b      	str	r3, [r7, #20]
 80be036:	69bb      	ldr	r3, [r7, #24]
 80be038:	3301      	adds	r3, #1
 80be03a:	61bb      	str	r3, [r7, #24]
 80be03c:	6979      	ldr	r1, [r7, #20]
 80be03e:	2001      	movs	r0, #1
 80be040:	f7ff fe7b 	bl	80bdd3a <vl53l5_decode_uint8_t>
 80be044:	4603      	mov	r3, r0
 80be046:	461a      	mov	r2, r3
 80be048:	687b      	ldr	r3, [r7, #4]
 80be04a:	725a      	strb	r2, [r3, #9]
 80be04c:	697b      	ldr	r3, [r7, #20]
 80be04e:	3301      	adds	r3, #1
 80be050:	617b      	str	r3, [r7, #20]
 80be052:	69bb      	ldr	r3, [r7, #24]
 80be054:	3301      	adds	r3, #1
 80be056:	61bb      	str	r3, [r7, #24]
 80be058:	6979      	ldr	r1, [r7, #20]
 80be05a:	2001      	movs	r0, #1
 80be05c:	f7ff fe6d 	bl	80bdd3a <vl53l5_decode_uint8_t>
 80be060:	4603      	mov	r3, r0
 80be062:	461a      	mov	r2, r3
 80be064:	687b      	ldr	r3, [r7, #4]
 80be066:	729a      	strb	r2, [r3, #10]
 80be068:	697b      	ldr	r3, [r7, #20]
 80be06a:	3301      	adds	r3, #1
 80be06c:	617b      	str	r3, [r7, #20]
 80be06e:	69bb      	ldr	r3, [r7, #24]
 80be070:	3301      	adds	r3, #1
 80be072:	61bb      	str	r3, [r7, #24]
 80be074:	6979      	ldr	r1, [r7, #20]
 80be076:	2001      	movs	r0, #1
 80be078:	f7ff fe5f 	bl	80bdd3a <vl53l5_decode_uint8_t>
 80be07c:	4603      	mov	r3, r0
 80be07e:	461a      	mov	r2, r3
 80be080:	687b      	ldr	r3, [r7, #4]
 80be082:	72da      	strb	r2, [r3, #11]
 80be084:	697b      	ldr	r3, [r7, #20]
 80be086:	3301      	adds	r3, #1
 80be088:	617b      	str	r3, [r7, #20]
 80be08a:	69bb      	ldr	r3, [r7, #24]
 80be08c:	3301      	adds	r3, #1
 80be08e:	61bb      	str	r3, [r7, #24]
 80be090:	68fa      	ldr	r2, [r7, #12]
 80be092:	69bb      	ldr	r3, [r7, #24]
 80be094:	429a      	cmp	r2, r3
 80be096:	d003      	beq.n	80be0a0 <_decode_dci_grp_buf_meta_data+0x130>
 80be098:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 80be09c:	61fb      	str	r3, [r7, #28]
 80be09e:	e000      	b.n	80be0a2 <_decode_dci_grp_buf_meta_data+0x132>
 80be0a0:	bf00      	nop
 80be0a2:	69fb      	ldr	r3, [r7, #28]
 80be0a4:	4618      	mov	r0, r3
 80be0a6:	3720      	adds	r7, #32
 80be0a8:	46bd      	mov	sp, r7
 80be0aa:	bd80      	pop	{r7, pc}

080be0ac <_decode_dci_grp_rng_common_data>:
 80be0ac:	b580      	push	{r7, lr}
 80be0ae:	b088      	sub	sp, #32
 80be0b0:	af00      	add	r7, sp, #0
 80be0b2:	60f8      	str	r0, [r7, #12]
 80be0b4:	60b9      	str	r1, [r7, #8]
 80be0b6:	607a      	str	r2, [r7, #4]
 80be0b8:	2300      	movs	r3, #0
 80be0ba:	61fb      	str	r3, [r7, #28]
 80be0bc:	2300      	movs	r3, #0
 80be0be:	61bb      	str	r3, [r7, #24]
 80be0c0:	68bb      	ldr	r3, [r7, #8]
 80be0c2:	617b      	str	r3, [r7, #20]
 80be0c4:	68fb      	ldr	r3, [r7, #12]
 80be0c6:	2b04      	cmp	r3, #4
 80be0c8:	d903      	bls.n	80be0d2 <_decode_dci_grp_rng_common_data+0x26>
 80be0ca:	f06f 0304 	mvn.w	r3, #4
 80be0ce:	61fb      	str	r3, [r7, #28]
 80be0d0:	e032      	b.n	80be138 <_decode_dci_grp_rng_common_data+0x8c>
 80be0d2:	6979      	ldr	r1, [r7, #20]
 80be0d4:	2002      	movs	r0, #2
 80be0d6:	f7ff fe4d 	bl	80bdd74 <vl53l5_decode_uint16_t>
 80be0da:	4603      	mov	r3, r0
 80be0dc:	461a      	mov	r2, r3
 80be0de:	687b      	ldr	r3, [r7, #4]
 80be0e0:	801a      	strh	r2, [r3, #0]
 80be0e2:	697b      	ldr	r3, [r7, #20]
 80be0e4:	3302      	adds	r3, #2
 80be0e6:	617b      	str	r3, [r7, #20]
 80be0e8:	69bb      	ldr	r3, [r7, #24]
 80be0ea:	3302      	adds	r3, #2
 80be0ec:	61bb      	str	r3, [r7, #24]
 80be0ee:	6979      	ldr	r1, [r7, #20]
 80be0f0:	2001      	movs	r0, #1
 80be0f2:	f7ff fe22 	bl	80bdd3a <vl53l5_decode_uint8_t>
 80be0f6:	4603      	mov	r3, r0
 80be0f8:	461a      	mov	r2, r3
 80be0fa:	687b      	ldr	r3, [r7, #4]
 80be0fc:	709a      	strb	r2, [r3, #2]
 80be0fe:	697b      	ldr	r3, [r7, #20]
 80be100:	3301      	adds	r3, #1
 80be102:	617b      	str	r3, [r7, #20]
 80be104:	69bb      	ldr	r3, [r7, #24]
 80be106:	3301      	adds	r3, #1
 80be108:	61bb      	str	r3, [r7, #24]
 80be10a:	6979      	ldr	r1, [r7, #20]
 80be10c:	2001      	movs	r0, #1
 80be10e:	f7ff fe14 	bl	80bdd3a <vl53l5_decode_uint8_t>
 80be112:	4603      	mov	r3, r0
 80be114:	461a      	mov	r2, r3
 80be116:	687b      	ldr	r3, [r7, #4]
 80be118:	70da      	strb	r2, [r3, #3]
 80be11a:	697b      	ldr	r3, [r7, #20]
 80be11c:	3301      	adds	r3, #1
 80be11e:	617b      	str	r3, [r7, #20]
 80be120:	69bb      	ldr	r3, [r7, #24]
 80be122:	3301      	adds	r3, #1
 80be124:	61bb      	str	r3, [r7, #24]
 80be126:	68fa      	ldr	r2, [r7, #12]
 80be128:	69bb      	ldr	r3, [r7, #24]
 80be12a:	429a      	cmp	r2, r3
 80be12c:	d003      	beq.n	80be136 <_decode_dci_grp_rng_common_data+0x8a>
 80be12e:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 80be132:	61fb      	str	r3, [r7, #28]
 80be134:	e000      	b.n	80be138 <_decode_dci_grp_rng_common_data+0x8c>
 80be136:	bf00      	nop
 80be138:	69fb      	ldr	r3, [r7, #28]
 80be13a:	4618      	mov	r0, r3
 80be13c:	3720      	adds	r7, #32
 80be13e:	46bd      	mov	sp, r7
 80be140:	bd80      	pop	{r7, pc}

080be142 <_decode_dci_grp_rng_per_zone_data_amb_rate_kcps_per_spad>:
 80be142:	b580      	push	{r7, lr}
 80be144:	b088      	sub	sp, #32
 80be146:	af00      	add	r7, sp, #0
 80be148:	60f8      	str	r0, [r7, #12]
 80be14a:	60b9      	str	r1, [r7, #8]
 80be14c:	607a      	str	r2, [r7, #4]
 80be14e:	2300      	movs	r3, #0
 80be150:	61fb      	str	r3, [r7, #28]
 80be152:	2300      	movs	r3, #0
 80be154:	61bb      	str	r3, [r7, #24]
 80be156:	68bb      	ldr	r3, [r7, #8]
 80be158:	617b      	str	r3, [r7, #20]
 80be15a:	2300      	movs	r3, #0
 80be15c:	613b      	str	r3, [r7, #16]
 80be15e:	68fb      	ldr	r3, [r7, #12]
 80be160:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80be164:	d915      	bls.n	80be192 <_decode_dci_grp_rng_per_zone_data_amb_rate_kcps_per_spad+0x50>
 80be166:	f06f 0304 	mvn.w	r3, #4
 80be16a:	61fb      	str	r3, [r7, #28]
 80be16c:	e01e      	b.n	80be1ac <_decode_dci_grp_rng_per_zone_data_amb_rate_kcps_per_spad+0x6a>
 80be16e:	6979      	ldr	r1, [r7, #20]
 80be170:	2004      	movs	r0, #4
 80be172:	f7ff fe99 	bl	80bdea8 <vl53l5_decode_uint32_t>
 80be176:	4601      	mov	r1, r0
 80be178:	687b      	ldr	r3, [r7, #4]
 80be17a:	693a      	ldr	r2, [r7, #16]
 80be17c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80be180:	697b      	ldr	r3, [r7, #20]
 80be182:	3304      	adds	r3, #4
 80be184:	617b      	str	r3, [r7, #20]
 80be186:	69bb      	ldr	r3, [r7, #24]
 80be188:	3304      	adds	r3, #4
 80be18a:	61bb      	str	r3, [r7, #24]
 80be18c:	693b      	ldr	r3, [r7, #16]
 80be18e:	3301      	adds	r3, #1
 80be190:	613b      	str	r3, [r7, #16]
 80be192:	69ba      	ldr	r2, [r7, #24]
 80be194:	68fb      	ldr	r3, [r7, #12]
 80be196:	429a      	cmp	r2, r3
 80be198:	d3e9      	bcc.n	80be16e <_decode_dci_grp_rng_per_zone_data_amb_rate_kcps_per_spad+0x2c>
 80be19a:	68fa      	ldr	r2, [r7, #12]
 80be19c:	69bb      	ldr	r3, [r7, #24]
 80be19e:	429a      	cmp	r2, r3
 80be1a0:	d003      	beq.n	80be1aa <_decode_dci_grp_rng_per_zone_data_amb_rate_kcps_per_spad+0x68>
 80be1a2:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 80be1a6:	61fb      	str	r3, [r7, #28]
 80be1a8:	e000      	b.n	80be1ac <_decode_dci_grp_rng_per_zone_data_amb_rate_kcps_per_spad+0x6a>
 80be1aa:	bf00      	nop
 80be1ac:	69fb      	ldr	r3, [r7, #28]
 80be1ae:	4618      	mov	r0, r3
 80be1b0:	3720      	adds	r7, #32
 80be1b2:	46bd      	mov	sp, r7
 80be1b4:	bd80      	pop	{r7, pc}

080be1b6 <_decode_dci_grp_rng_per_zone_data_amb_dmax_mm>:
 80be1b6:	b580      	push	{r7, lr}
 80be1b8:	b088      	sub	sp, #32
 80be1ba:	af00      	add	r7, sp, #0
 80be1bc:	60f8      	str	r0, [r7, #12]
 80be1be:	60b9      	str	r1, [r7, #8]
 80be1c0:	607a      	str	r2, [r7, #4]
 80be1c2:	2300      	movs	r3, #0
 80be1c4:	61fb      	str	r3, [r7, #28]
 80be1c6:	2300      	movs	r3, #0
 80be1c8:	61bb      	str	r3, [r7, #24]
 80be1ca:	68bb      	ldr	r3, [r7, #8]
 80be1cc:	617b      	str	r3, [r7, #20]
 80be1ce:	2300      	movs	r3, #0
 80be1d0:	613b      	str	r3, [r7, #16]
 80be1d2:	68fb      	ldr	r3, [r7, #12]
 80be1d4:	2b82      	cmp	r3, #130	; 0x82
 80be1d6:	d919      	bls.n	80be20c <_decode_dci_grp_rng_per_zone_data_amb_dmax_mm+0x56>
 80be1d8:	f06f 0304 	mvn.w	r3, #4
 80be1dc:	61fb      	str	r3, [r7, #28]
 80be1de:	e022      	b.n	80be226 <_decode_dci_grp_rng_per_zone_data_amb_dmax_mm+0x70>
 80be1e0:	6979      	ldr	r1, [r7, #20]
 80be1e2:	2002      	movs	r0, #2
 80be1e4:	f7ff fdc6 	bl	80bdd74 <vl53l5_decode_uint16_t>
 80be1e8:	4603      	mov	r3, r0
 80be1ea:	4619      	mov	r1, r3
 80be1ec:	687a      	ldr	r2, [r7, #4]
 80be1ee:	693b      	ldr	r3, [r7, #16]
 80be1f0:	3380      	adds	r3, #128	; 0x80
 80be1f2:	005b      	lsls	r3, r3, #1
 80be1f4:	4413      	add	r3, r2
 80be1f6:	460a      	mov	r2, r1
 80be1f8:	809a      	strh	r2, [r3, #4]
 80be1fa:	697b      	ldr	r3, [r7, #20]
 80be1fc:	3302      	adds	r3, #2
 80be1fe:	617b      	str	r3, [r7, #20]
 80be200:	69bb      	ldr	r3, [r7, #24]
 80be202:	3302      	adds	r3, #2
 80be204:	61bb      	str	r3, [r7, #24]
 80be206:	693b      	ldr	r3, [r7, #16]
 80be208:	3301      	adds	r3, #1
 80be20a:	613b      	str	r3, [r7, #16]
 80be20c:	69ba      	ldr	r2, [r7, #24]
 80be20e:	68fb      	ldr	r3, [r7, #12]
 80be210:	429a      	cmp	r2, r3
 80be212:	d3e5      	bcc.n	80be1e0 <_decode_dci_grp_rng_per_zone_data_amb_dmax_mm+0x2a>
 80be214:	68fa      	ldr	r2, [r7, #12]
 80be216:	69bb      	ldr	r3, [r7, #24]
 80be218:	429a      	cmp	r2, r3
 80be21a:	d003      	beq.n	80be224 <_decode_dci_grp_rng_per_zone_data_amb_dmax_mm+0x6e>
 80be21c:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 80be220:	61fb      	str	r3, [r7, #28]
 80be222:	e000      	b.n	80be226 <_decode_dci_grp_rng_per_zone_data_amb_dmax_mm+0x70>
 80be224:	bf00      	nop
 80be226:	69fb      	ldr	r3, [r7, #28]
 80be228:	4618      	mov	r0, r3
 80be22a:	3720      	adds	r7, #32
 80be22c:	46bd      	mov	sp, r7
 80be22e:	bd80      	pop	{r7, pc}

080be230 <_decode_dci_grp_rng_per_zone_data_rng_no_of_targets>:
 80be230:	b580      	push	{r7, lr}
 80be232:	b088      	sub	sp, #32
 80be234:	af00      	add	r7, sp, #0
 80be236:	60f8      	str	r0, [r7, #12]
 80be238:	60b9      	str	r1, [r7, #8]
 80be23a:	607a      	str	r2, [r7, #4]
 80be23c:	2300      	movs	r3, #0
 80be23e:	61fb      	str	r3, [r7, #28]
 80be240:	2300      	movs	r3, #0
 80be242:	61bb      	str	r3, [r7, #24]
 80be244:	68bb      	ldr	r3, [r7, #8]
 80be246:	617b      	str	r3, [r7, #20]
 80be248:	2300      	movs	r3, #0
 80be24a:	613b      	str	r3, [r7, #16]
 80be24c:	68fb      	ldr	r3, [r7, #12]
 80be24e:	2b41      	cmp	r3, #65	; 0x41
 80be250:	d919      	bls.n	80be286 <_decode_dci_grp_rng_per_zone_data_rng_no_of_targets+0x56>
 80be252:	f06f 0304 	mvn.w	r3, #4
 80be256:	61fb      	str	r3, [r7, #28]
 80be258:	e022      	b.n	80be2a0 <_decode_dci_grp_rng_per_zone_data_rng_no_of_targets+0x70>
 80be25a:	6979      	ldr	r1, [r7, #20]
 80be25c:	2001      	movs	r0, #1
 80be25e:	f7ff fd6c 	bl	80bdd3a <vl53l5_decode_uint8_t>
 80be262:	4603      	mov	r3, r0
 80be264:	4619      	mov	r1, r3
 80be266:	687a      	ldr	r2, [r7, #4]
 80be268:	693b      	ldr	r3, [r7, #16]
 80be26a:	4413      	add	r3, r2
 80be26c:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 80be270:	460a      	mov	r2, r1
 80be272:	701a      	strb	r2, [r3, #0]
 80be274:	697b      	ldr	r3, [r7, #20]
 80be276:	3301      	adds	r3, #1
 80be278:	617b      	str	r3, [r7, #20]
 80be27a:	69bb      	ldr	r3, [r7, #24]
 80be27c:	3301      	adds	r3, #1
 80be27e:	61bb      	str	r3, [r7, #24]
 80be280:	693b      	ldr	r3, [r7, #16]
 80be282:	3301      	adds	r3, #1
 80be284:	613b      	str	r3, [r7, #16]
 80be286:	69ba      	ldr	r2, [r7, #24]
 80be288:	68fb      	ldr	r3, [r7, #12]
 80be28a:	429a      	cmp	r2, r3
 80be28c:	d3e5      	bcc.n	80be25a <_decode_dci_grp_rng_per_zone_data_rng_no_of_targets+0x2a>
 80be28e:	68fa      	ldr	r2, [r7, #12]
 80be290:	69bb      	ldr	r3, [r7, #24]
 80be292:	429a      	cmp	r2, r3
 80be294:	d003      	beq.n	80be29e <_decode_dci_grp_rng_per_zone_data_rng_no_of_targets+0x6e>
 80be296:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 80be29a:	61fb      	str	r3, [r7, #28]
 80be29c:	e000      	b.n	80be2a0 <_decode_dci_grp_rng_per_zone_data_rng_no_of_targets+0x70>
 80be29e:	bf00      	nop
 80be2a0:	69fb      	ldr	r3, [r7, #28]
 80be2a2:	4618      	mov	r0, r3
 80be2a4:	3720      	adds	r7, #32
 80be2a6:	46bd      	mov	sp, r7
 80be2a8:	bd80      	pop	{r7, pc}

080be2aa <_decode_dci_grp_rng_per_zone_data_rng_zone_id>:
 80be2aa:	b580      	push	{r7, lr}
 80be2ac:	b088      	sub	sp, #32
 80be2ae:	af00      	add	r7, sp, #0
 80be2b0:	60f8      	str	r0, [r7, #12]
 80be2b2:	60b9      	str	r1, [r7, #8]
 80be2b4:	607a      	str	r2, [r7, #4]
 80be2b6:	2300      	movs	r3, #0
 80be2b8:	61fb      	str	r3, [r7, #28]
 80be2ba:	2300      	movs	r3, #0
 80be2bc:	61bb      	str	r3, [r7, #24]
 80be2be:	68bb      	ldr	r3, [r7, #8]
 80be2c0:	617b      	str	r3, [r7, #20]
 80be2c2:	2300      	movs	r3, #0
 80be2c4:	613b      	str	r3, [r7, #16]
 80be2c6:	68fb      	ldr	r3, [r7, #12]
 80be2c8:	2b41      	cmp	r3, #65	; 0x41
 80be2ca:	d919      	bls.n	80be300 <_decode_dci_grp_rng_per_zone_data_rng_zone_id+0x56>
 80be2cc:	f06f 0304 	mvn.w	r3, #4
 80be2d0:	61fb      	str	r3, [r7, #28]
 80be2d2:	e022      	b.n	80be31a <_decode_dci_grp_rng_per_zone_data_rng_zone_id+0x70>
 80be2d4:	6979      	ldr	r1, [r7, #20]
 80be2d6:	2001      	movs	r0, #1
 80be2d8:	f7ff fd2f 	bl	80bdd3a <vl53l5_decode_uint8_t>
 80be2dc:	4603      	mov	r3, r0
 80be2de:	4619      	mov	r1, r3
 80be2e0:	687a      	ldr	r2, [r7, #4]
 80be2e2:	693b      	ldr	r3, [r7, #16]
 80be2e4:	4413      	add	r3, r2
 80be2e6:	f203 13c7 	addw	r3, r3, #455	; 0x1c7
 80be2ea:	460a      	mov	r2, r1
 80be2ec:	701a      	strb	r2, [r3, #0]
 80be2ee:	697b      	ldr	r3, [r7, #20]
 80be2f0:	3301      	adds	r3, #1
 80be2f2:	617b      	str	r3, [r7, #20]
 80be2f4:	69bb      	ldr	r3, [r7, #24]
 80be2f6:	3301      	adds	r3, #1
 80be2f8:	61bb      	str	r3, [r7, #24]
 80be2fa:	693b      	ldr	r3, [r7, #16]
 80be2fc:	3301      	adds	r3, #1
 80be2fe:	613b      	str	r3, [r7, #16]
 80be300:	69ba      	ldr	r2, [r7, #24]
 80be302:	68fb      	ldr	r3, [r7, #12]
 80be304:	429a      	cmp	r2, r3
 80be306:	d3e5      	bcc.n	80be2d4 <_decode_dci_grp_rng_per_zone_data_rng_zone_id+0x2a>
 80be308:	68fa      	ldr	r2, [r7, #12]
 80be30a:	69bb      	ldr	r3, [r7, #24]
 80be30c:	429a      	cmp	r2, r3
 80be30e:	d003      	beq.n	80be318 <_decode_dci_grp_rng_per_zone_data_rng_zone_id+0x6e>
 80be310:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 80be314:	61fb      	str	r3, [r7, #28]
 80be316:	e000      	b.n	80be31a <_decode_dci_grp_rng_per_zone_data_rng_zone_id+0x70>
 80be318:	bf00      	nop
 80be31a:	69fb      	ldr	r3, [r7, #28]
 80be31c:	4618      	mov	r0, r3
 80be31e:	3720      	adds	r7, #32
 80be320:	46bd      	mov	sp, r7
 80be322:	bd80      	pop	{r7, pc}

080be324 <_decode_dci_grp_rng_per_target_data_peak_rate_kcps_per_spad>:
 80be324:	b580      	push	{r7, lr}
 80be326:	b088      	sub	sp, #32
 80be328:	af00      	add	r7, sp, #0
 80be32a:	60f8      	str	r0, [r7, #12]
 80be32c:	60b9      	str	r1, [r7, #8]
 80be32e:	607a      	str	r2, [r7, #4]
 80be330:	2300      	movs	r3, #0
 80be332:	61fb      	str	r3, [r7, #28]
 80be334:	2300      	movs	r3, #0
 80be336:	61bb      	str	r3, [r7, #24]
 80be338:	68bb      	ldr	r3, [r7, #8]
 80be33a:	617b      	str	r3, [r7, #20]
 80be33c:	2300      	movs	r3, #0
 80be33e:	613b      	str	r3, [r7, #16]
 80be340:	68fb      	ldr	r3, [r7, #12]
 80be342:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 80be346:	d915      	bls.n	80be374 <_decode_dci_grp_rng_per_target_data_peak_rate_kcps_per_spad+0x50>
 80be348:	f06f 0304 	mvn.w	r3, #4
 80be34c:	61fb      	str	r3, [r7, #28]
 80be34e:	e01e      	b.n	80be38e <_decode_dci_grp_rng_per_target_data_peak_rate_kcps_per_spad+0x6a>
 80be350:	6979      	ldr	r1, [r7, #20]
 80be352:	2004      	movs	r0, #4
 80be354:	f7ff fda8 	bl	80bdea8 <vl53l5_decode_uint32_t>
 80be358:	4601      	mov	r1, r0
 80be35a:	687b      	ldr	r3, [r7, #4]
 80be35c:	693a      	ldr	r2, [r7, #16]
 80be35e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80be362:	697b      	ldr	r3, [r7, #20]
 80be364:	3304      	adds	r3, #4
 80be366:	617b      	str	r3, [r7, #20]
 80be368:	69bb      	ldr	r3, [r7, #24]
 80be36a:	3304      	adds	r3, #4
 80be36c:	61bb      	str	r3, [r7, #24]
 80be36e:	693b      	ldr	r3, [r7, #16]
 80be370:	3301      	adds	r3, #1
 80be372:	613b      	str	r3, [r7, #16]
 80be374:	69ba      	ldr	r2, [r7, #24]
 80be376:	68fb      	ldr	r3, [r7, #12]
 80be378:	429a      	cmp	r2, r3
 80be37a:	d3e9      	bcc.n	80be350 <_decode_dci_grp_rng_per_target_data_peak_rate_kcps_per_spad+0x2c>
 80be37c:	68fa      	ldr	r2, [r7, #12]
 80be37e:	69bb      	ldr	r3, [r7, #24]
 80be380:	429a      	cmp	r2, r3
 80be382:	d003      	beq.n	80be38c <_decode_dci_grp_rng_per_target_data_peak_rate_kcps_per_spad+0x68>
 80be384:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 80be388:	61fb      	str	r3, [r7, #28]
 80be38a:	e000      	b.n	80be38e <_decode_dci_grp_rng_per_target_data_peak_rate_kcps_per_spad+0x6a>
 80be38c:	bf00      	nop
 80be38e:	69fb      	ldr	r3, [r7, #28]
 80be390:	4618      	mov	r0, r3
 80be392:	3720      	adds	r7, #32
 80be394:	46bd      	mov	sp, r7
 80be396:	bd80      	pop	{r7, pc}

080be398 <_decode_dci_grp_rng_per_target_data_range_sigma_mm>:
 80be398:	b580      	push	{r7, lr}
 80be39a:	b088      	sub	sp, #32
 80be39c:	af00      	add	r7, sp, #0
 80be39e:	60f8      	str	r0, [r7, #12]
 80be3a0:	60b9      	str	r1, [r7, #8]
 80be3a2:	607a      	str	r2, [r7, #4]
 80be3a4:	2300      	movs	r3, #0
 80be3a6:	61fb      	str	r3, [r7, #28]
 80be3a8:	2300      	movs	r3, #0
 80be3aa:	61bb      	str	r3, [r7, #24]
 80be3ac:	68bb      	ldr	r3, [r7, #8]
 80be3ae:	617b      	str	r3, [r7, #20]
 80be3b0:	2300      	movs	r3, #0
 80be3b2:	613b      	str	r3, [r7, #16]
 80be3b4:	68fb      	ldr	r3, [r7, #12]
 80be3b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80be3ba:	d918      	bls.n	80be3ee <_decode_dci_grp_rng_per_target_data_range_sigma_mm+0x56>
 80be3bc:	f06f 0304 	mvn.w	r3, #4
 80be3c0:	61fb      	str	r3, [r7, #28]
 80be3c2:	e021      	b.n	80be408 <_decode_dci_grp_rng_per_target_data_range_sigma_mm+0x70>
 80be3c4:	6979      	ldr	r1, [r7, #20]
 80be3c6:	2002      	movs	r0, #2
 80be3c8:	f7ff fcd4 	bl	80bdd74 <vl53l5_decode_uint16_t>
 80be3cc:	4603      	mov	r3, r0
 80be3ce:	4619      	mov	r1, r3
 80be3d0:	687b      	ldr	r3, [r7, #4]
 80be3d2:	693a      	ldr	r2, [r7, #16]
 80be3d4:	f502 7282 	add.w	r2, r2, #260	; 0x104
 80be3d8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80be3dc:	697b      	ldr	r3, [r7, #20]
 80be3de:	3302      	adds	r3, #2
 80be3e0:	617b      	str	r3, [r7, #20]
 80be3e2:	69bb      	ldr	r3, [r7, #24]
 80be3e4:	3302      	adds	r3, #2
 80be3e6:	61bb      	str	r3, [r7, #24]
 80be3e8:	693b      	ldr	r3, [r7, #16]
 80be3ea:	3301      	adds	r3, #1
 80be3ec:	613b      	str	r3, [r7, #16]
 80be3ee:	69ba      	ldr	r2, [r7, #24]
 80be3f0:	68fb      	ldr	r3, [r7, #12]
 80be3f2:	429a      	cmp	r2, r3
 80be3f4:	d3e6      	bcc.n	80be3c4 <_decode_dci_grp_rng_per_target_data_range_sigma_mm+0x2c>
 80be3f6:	68fa      	ldr	r2, [r7, #12]
 80be3f8:	69bb      	ldr	r3, [r7, #24]
 80be3fa:	429a      	cmp	r2, r3
 80be3fc:	d003      	beq.n	80be406 <_decode_dci_grp_rng_per_target_data_range_sigma_mm+0x6e>
 80be3fe:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 80be402:	61fb      	str	r3, [r7, #28]
 80be404:	e000      	b.n	80be408 <_decode_dci_grp_rng_per_target_data_range_sigma_mm+0x70>
 80be406:	bf00      	nop
 80be408:	69fb      	ldr	r3, [r7, #28]
 80be40a:	4618      	mov	r0, r3
 80be40c:	3720      	adds	r7, #32
 80be40e:	46bd      	mov	sp, r7
 80be410:	bd80      	pop	{r7, pc}

080be412 <_decode_dci_grp_rng_per_target_data_median_range_mm>:
 80be412:	b580      	push	{r7, lr}
 80be414:	b088      	sub	sp, #32
 80be416:	af00      	add	r7, sp, #0
 80be418:	60f8      	str	r0, [r7, #12]
 80be41a:	60b9      	str	r1, [r7, #8]
 80be41c:	607a      	str	r2, [r7, #4]
 80be41e:	2300      	movs	r3, #0
 80be420:	61fb      	str	r3, [r7, #28]
 80be422:	2300      	movs	r3, #0
 80be424:	61bb      	str	r3, [r7, #24]
 80be426:	68bb      	ldr	r3, [r7, #8]
 80be428:	617b      	str	r3, [r7, #20]
 80be42a:	2300      	movs	r3, #0
 80be42c:	613b      	str	r3, [r7, #16]
 80be42e:	68fb      	ldr	r3, [r7, #12]
 80be430:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80be434:	d91a      	bls.n	80be46c <_decode_dci_grp_rng_per_target_data_median_range_mm+0x5a>
 80be436:	f06f 0304 	mvn.w	r3, #4
 80be43a:	61fb      	str	r3, [r7, #28]
 80be43c:	e023      	b.n	80be486 <_decode_dci_grp_rng_per_target_data_median_range_mm+0x74>
 80be43e:	6979      	ldr	r1, [r7, #20]
 80be440:	2002      	movs	r0, #2
 80be442:	f7ff fcb7 	bl	80bddb4 <vl53l5_decode_int16_t>
 80be446:	4603      	mov	r3, r0
 80be448:	4619      	mov	r1, r3
 80be44a:	687a      	ldr	r2, [r7, #4]
 80be44c:	693b      	ldr	r3, [r7, #16]
 80be44e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80be452:	005b      	lsls	r3, r3, #1
 80be454:	4413      	add	r3, r2
 80be456:	460a      	mov	r2, r1
 80be458:	809a      	strh	r2, [r3, #4]
 80be45a:	697b      	ldr	r3, [r7, #20]
 80be45c:	3302      	adds	r3, #2
 80be45e:	617b      	str	r3, [r7, #20]
 80be460:	69bb      	ldr	r3, [r7, #24]
 80be462:	3302      	adds	r3, #2
 80be464:	61bb      	str	r3, [r7, #24]
 80be466:	693b      	ldr	r3, [r7, #16]
 80be468:	3301      	adds	r3, #1
 80be46a:	613b      	str	r3, [r7, #16]
 80be46c:	69ba      	ldr	r2, [r7, #24]
 80be46e:	68fb      	ldr	r3, [r7, #12]
 80be470:	429a      	cmp	r2, r3
 80be472:	d3e4      	bcc.n	80be43e <_decode_dci_grp_rng_per_target_data_median_range_mm+0x2c>
 80be474:	68fa      	ldr	r2, [r7, #12]
 80be476:	69bb      	ldr	r3, [r7, #24]
 80be478:	429a      	cmp	r2, r3
 80be47a:	d003      	beq.n	80be484 <_decode_dci_grp_rng_per_target_data_median_range_mm+0x72>
 80be47c:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 80be480:	61fb      	str	r3, [r7, #28]
 80be482:	e000      	b.n	80be486 <_decode_dci_grp_rng_per_target_data_median_range_mm+0x74>
 80be484:	bf00      	nop
 80be486:	69fb      	ldr	r3, [r7, #28]
 80be488:	4618      	mov	r0, r3
 80be48a:	3720      	adds	r7, #32
 80be48c:	46bd      	mov	sp, r7
 80be48e:	bd80      	pop	{r7, pc}

080be490 <_decode_dci_grp_rng_per_target_data_target_status>:
 80be490:	b580      	push	{r7, lr}
 80be492:	b088      	sub	sp, #32
 80be494:	af00      	add	r7, sp, #0
 80be496:	60f8      	str	r0, [r7, #12]
 80be498:	60b9      	str	r1, [r7, #8]
 80be49a:	607a      	str	r2, [r7, #4]
 80be49c:	2300      	movs	r3, #0
 80be49e:	61fb      	str	r3, [r7, #28]
 80be4a0:	2300      	movs	r3, #0
 80be4a2:	61bb      	str	r3, [r7, #24]
 80be4a4:	68bb      	ldr	r3, [r7, #8]
 80be4a6:	617b      	str	r3, [r7, #20]
 80be4a8:	2300      	movs	r3, #0
 80be4aa:	613b      	str	r3, [r7, #16]
 80be4ac:	68fb      	ldr	r3, [r7, #12]
 80be4ae:	2b82      	cmp	r3, #130	; 0x82
 80be4b0:	d919      	bls.n	80be4e6 <_decode_dci_grp_rng_per_target_data_target_status+0x56>
 80be4b2:	f06f 0304 	mvn.w	r3, #4
 80be4b6:	61fb      	str	r3, [r7, #28]
 80be4b8:	e022      	b.n	80be500 <_decode_dci_grp_rng_per_target_data_target_status+0x70>
 80be4ba:	6979      	ldr	r1, [r7, #20]
 80be4bc:	2001      	movs	r0, #1
 80be4be:	f7ff fc3c 	bl	80bdd3a <vl53l5_decode_uint8_t>
 80be4c2:	4603      	mov	r3, r0
 80be4c4:	4619      	mov	r1, r3
 80be4c6:	687a      	ldr	r2, [r7, #4]
 80be4c8:	693b      	ldr	r3, [r7, #16]
 80be4ca:	4413      	add	r3, r2
 80be4cc:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80be4d0:	460a      	mov	r2, r1
 80be4d2:	701a      	strb	r2, [r3, #0]
 80be4d4:	697b      	ldr	r3, [r7, #20]
 80be4d6:	3301      	adds	r3, #1
 80be4d8:	617b      	str	r3, [r7, #20]
 80be4da:	69bb      	ldr	r3, [r7, #24]
 80be4dc:	3301      	adds	r3, #1
 80be4de:	61bb      	str	r3, [r7, #24]
 80be4e0:	693b      	ldr	r3, [r7, #16]
 80be4e2:	3301      	adds	r3, #1
 80be4e4:	613b      	str	r3, [r7, #16]
 80be4e6:	69ba      	ldr	r2, [r7, #24]
 80be4e8:	68fb      	ldr	r3, [r7, #12]
 80be4ea:	429a      	cmp	r2, r3
 80be4ec:	d3e5      	bcc.n	80be4ba <_decode_dci_grp_rng_per_target_data_target_status+0x2a>
 80be4ee:	68fa      	ldr	r2, [r7, #12]
 80be4f0:	69bb      	ldr	r3, [r7, #24]
 80be4f2:	429a      	cmp	r2, r3
 80be4f4:	d003      	beq.n	80be4fe <_decode_dci_grp_rng_per_target_data_target_status+0x6e>
 80be4f6:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 80be4fa:	61fb      	str	r3, [r7, #28]
 80be4fc:	e000      	b.n	80be500 <_decode_dci_grp_rng_per_target_data_target_status+0x70>
 80be4fe:	bf00      	nop
 80be500:	69fb      	ldr	r3, [r7, #28]
 80be502:	4618      	mov	r0, r3
 80be504:	3720      	adds	r7, #32
 80be506:	46bd      	mov	sp, r7
 80be508:	bd80      	pop	{r7, pc}

080be50a <_decode_ztsa_zone_thresh_status_bytes>:
 80be50a:	b580      	push	{r7, lr}
 80be50c:	b088      	sub	sp, #32
 80be50e:	af00      	add	r7, sp, #0
 80be510:	60f8      	str	r0, [r7, #12]
 80be512:	60b9      	str	r1, [r7, #8]
 80be514:	607a      	str	r2, [r7, #4]
 80be516:	2300      	movs	r3, #0
 80be518:	61fb      	str	r3, [r7, #28]
 80be51a:	2300      	movs	r3, #0
 80be51c:	61bb      	str	r3, [r7, #24]
 80be51e:	68bb      	ldr	r3, [r7, #8]
 80be520:	617b      	str	r3, [r7, #20]
 80be522:	2300      	movs	r3, #0
 80be524:	613b      	str	r3, [r7, #16]
 80be526:	68fb      	ldr	r3, [r7, #12]
 80be528:	2b08      	cmp	r3, #8
 80be52a:	d917      	bls.n	80be55c <_decode_ztsa_zone_thresh_status_bytes+0x52>
 80be52c:	f06f 0304 	mvn.w	r3, #4
 80be530:	61fb      	str	r3, [r7, #28]
 80be532:	e020      	b.n	80be576 <_decode_ztsa_zone_thresh_status_bytes+0x6c>
 80be534:	6979      	ldr	r1, [r7, #20]
 80be536:	2001      	movs	r0, #1
 80be538:	f7ff fbff 	bl	80bdd3a <vl53l5_decode_uint8_t>
 80be53c:	4603      	mov	r3, r0
 80be53e:	4619      	mov	r1, r3
 80be540:	687a      	ldr	r2, [r7, #4]
 80be542:	693b      	ldr	r3, [r7, #16]
 80be544:	4413      	add	r3, r2
 80be546:	460a      	mov	r2, r1
 80be548:	701a      	strb	r2, [r3, #0]
 80be54a:	697b      	ldr	r3, [r7, #20]
 80be54c:	3301      	adds	r3, #1
 80be54e:	617b      	str	r3, [r7, #20]
 80be550:	69bb      	ldr	r3, [r7, #24]
 80be552:	3301      	adds	r3, #1
 80be554:	61bb      	str	r3, [r7, #24]
 80be556:	693b      	ldr	r3, [r7, #16]
 80be558:	3301      	adds	r3, #1
 80be55a:	613b      	str	r3, [r7, #16]
 80be55c:	69ba      	ldr	r2, [r7, #24]
 80be55e:	68fb      	ldr	r3, [r7, #12]
 80be560:	429a      	cmp	r2, r3
 80be562:	d3e7      	bcc.n	80be534 <_decode_ztsa_zone_thresh_status_bytes+0x2a>
 80be564:	68fa      	ldr	r2, [r7, #12]
 80be566:	69bb      	ldr	r3, [r7, #24]
 80be568:	429a      	cmp	r2, r3
 80be56a:	d003      	beq.n	80be574 <_decode_ztsa_zone_thresh_status_bytes+0x6a>
 80be56c:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 80be570:	61fb      	str	r3, [r7, #28]
 80be572:	e000      	b.n	80be576 <_decode_ztsa_zone_thresh_status_bytes+0x6c>
 80be574:	bf00      	nop
 80be576:	69fb      	ldr	r3, [r7, #28]
 80be578:	4618      	mov	r0, r3
 80be57a:	3720      	adds	r7, #32
 80be57c:	46bd      	mov	sp, r7
 80be57e:	bd80      	pop	{r7, pc}

080be580 <_decode_dci_grp_dyn_xtalk_persistent_data>:
 80be580:	b580      	push	{r7, lr}
 80be582:	b088      	sub	sp, #32
 80be584:	af00      	add	r7, sp, #0
 80be586:	60f8      	str	r0, [r7, #12]
 80be588:	60b9      	str	r1, [r7, #8]
 80be58a:	607a      	str	r2, [r7, #4]
 80be58c:	2300      	movs	r3, #0
 80be58e:	61fb      	str	r3, [r7, #28]
 80be590:	2300      	movs	r3, #0
 80be592:	61bb      	str	r3, [r7, #24]
 80be594:	68bb      	ldr	r3, [r7, #8]
 80be596:	617b      	str	r3, [r7, #20]
 80be598:	68fb      	ldr	r3, [r7, #12]
 80be59a:	2b1c      	cmp	r3, #28
 80be59c:	d903      	bls.n	80be5a6 <_decode_dci_grp_dyn_xtalk_persistent_data+0x26>
 80be59e:	f06f 0304 	mvn.w	r3, #4
 80be5a2:	61fb      	str	r3, [r7, #28]
 80be5a4:	e09d      	b.n	80be6e2 <_decode_dci_grp_dyn_xtalk_persistent_data+0x162>
 80be5a6:	6979      	ldr	r1, [r7, #20]
 80be5a8:	2004      	movs	r0, #4
 80be5aa:	f7ff fc7d 	bl	80bdea8 <vl53l5_decode_uint32_t>
 80be5ae:	4602      	mov	r2, r0
 80be5b0:	687b      	ldr	r3, [r7, #4]
 80be5b2:	601a      	str	r2, [r3, #0]
 80be5b4:	697b      	ldr	r3, [r7, #20]
 80be5b6:	3304      	adds	r3, #4
 80be5b8:	617b      	str	r3, [r7, #20]
 80be5ba:	69bb      	ldr	r3, [r7, #24]
 80be5bc:	3304      	adds	r3, #4
 80be5be:	61bb      	str	r3, [r7, #24]
 80be5c0:	6979      	ldr	r1, [r7, #20]
 80be5c2:	2004      	movs	r0, #4
 80be5c4:	f7ff fc70 	bl	80bdea8 <vl53l5_decode_uint32_t>
 80be5c8:	4602      	mov	r2, r0
 80be5ca:	687b      	ldr	r3, [r7, #4]
 80be5cc:	605a      	str	r2, [r3, #4]
 80be5ce:	697b      	ldr	r3, [r7, #20]
 80be5d0:	3304      	adds	r3, #4
 80be5d2:	617b      	str	r3, [r7, #20]
 80be5d4:	69bb      	ldr	r3, [r7, #24]
 80be5d6:	3304      	adds	r3, #4
 80be5d8:	61bb      	str	r3, [r7, #24]
 80be5da:	6979      	ldr	r1, [r7, #20]
 80be5dc:	2004      	movs	r0, #4
 80be5de:	f7ff fc63 	bl	80bdea8 <vl53l5_decode_uint32_t>
 80be5e2:	4602      	mov	r2, r0
 80be5e4:	687b      	ldr	r3, [r7, #4]
 80be5e6:	609a      	str	r2, [r3, #8]
 80be5e8:	697b      	ldr	r3, [r7, #20]
 80be5ea:	3304      	adds	r3, #4
 80be5ec:	617b      	str	r3, [r7, #20]
 80be5ee:	69bb      	ldr	r3, [r7, #24]
 80be5f0:	3304      	adds	r3, #4
 80be5f2:	61bb      	str	r3, [r7, #24]
 80be5f4:	6979      	ldr	r1, [r7, #20]
 80be5f6:	2004      	movs	r0, #4
 80be5f8:	f7ff fc08 	bl	80bde0c <vl53l5_decode_int32_t>
 80be5fc:	4602      	mov	r2, r0
 80be5fe:	687b      	ldr	r3, [r7, #4]
 80be600:	60da      	str	r2, [r3, #12]
 80be602:	697b      	ldr	r3, [r7, #20]
 80be604:	3304      	adds	r3, #4
 80be606:	617b      	str	r3, [r7, #20]
 80be608:	69bb      	ldr	r3, [r7, #24]
 80be60a:	3304      	adds	r3, #4
 80be60c:	61bb      	str	r3, [r7, #24]
 80be60e:	6979      	ldr	r1, [r7, #20]
 80be610:	2004      	movs	r0, #4
 80be612:	f7ff fbfb 	bl	80bde0c <vl53l5_decode_int32_t>
 80be616:	4602      	mov	r2, r0
 80be618:	687b      	ldr	r3, [r7, #4]
 80be61a:	611a      	str	r2, [r3, #16]
 80be61c:	697b      	ldr	r3, [r7, #20]
 80be61e:	3304      	adds	r3, #4
 80be620:	617b      	str	r3, [r7, #20]
 80be622:	69bb      	ldr	r3, [r7, #24]
 80be624:	3304      	adds	r3, #4
 80be626:	61bb      	str	r3, [r7, #24]
 80be628:	6979      	ldr	r1, [r7, #20]
 80be62a:	2002      	movs	r0, #2
 80be62c:	f7ff fba2 	bl	80bdd74 <vl53l5_decode_uint16_t>
 80be630:	4603      	mov	r3, r0
 80be632:	461a      	mov	r2, r3
 80be634:	687b      	ldr	r3, [r7, #4]
 80be636:	829a      	strh	r2, [r3, #20]
 80be638:	697b      	ldr	r3, [r7, #20]
 80be63a:	3302      	adds	r3, #2
 80be63c:	617b      	str	r3, [r7, #20]
 80be63e:	69bb      	ldr	r3, [r7, #24]
 80be640:	3302      	adds	r3, #2
 80be642:	61bb      	str	r3, [r7, #24]
 80be644:	6979      	ldr	r1, [r7, #20]
 80be646:	2002      	movs	r0, #2
 80be648:	f7ff fb94 	bl	80bdd74 <vl53l5_decode_uint16_t>
 80be64c:	4603      	mov	r3, r0
 80be64e:	461a      	mov	r2, r3
 80be650:	687b      	ldr	r3, [r7, #4]
 80be652:	82da      	strh	r2, [r3, #22]
 80be654:	697b      	ldr	r3, [r7, #20]
 80be656:	3302      	adds	r3, #2
 80be658:	617b      	str	r3, [r7, #20]
 80be65a:	69bb      	ldr	r3, [r7, #24]
 80be65c:	3302      	adds	r3, #2
 80be65e:	61bb      	str	r3, [r7, #24]
 80be660:	6979      	ldr	r1, [r7, #20]
 80be662:	2001      	movs	r0, #1
 80be664:	f7ff fb69 	bl	80bdd3a <vl53l5_decode_uint8_t>
 80be668:	4603      	mov	r3, r0
 80be66a:	461a      	mov	r2, r3
 80be66c:	687b      	ldr	r3, [r7, #4]
 80be66e:	761a      	strb	r2, [r3, #24]
 80be670:	697b      	ldr	r3, [r7, #20]
 80be672:	3301      	adds	r3, #1
 80be674:	617b      	str	r3, [r7, #20]
 80be676:	69bb      	ldr	r3, [r7, #24]
 80be678:	3301      	adds	r3, #1
 80be67a:	61bb      	str	r3, [r7, #24]
 80be67c:	6979      	ldr	r1, [r7, #20]
 80be67e:	2001      	movs	r0, #1
 80be680:	f7ff fb5b 	bl	80bdd3a <vl53l5_decode_uint8_t>
 80be684:	4603      	mov	r3, r0
 80be686:	461a      	mov	r2, r3
 80be688:	687b      	ldr	r3, [r7, #4]
 80be68a:	765a      	strb	r2, [r3, #25]
 80be68c:	697b      	ldr	r3, [r7, #20]
 80be68e:	3301      	adds	r3, #1
 80be690:	617b      	str	r3, [r7, #20]
 80be692:	69bb      	ldr	r3, [r7, #24]
 80be694:	3301      	adds	r3, #1
 80be696:	61bb      	str	r3, [r7, #24]
 80be698:	6979      	ldr	r1, [r7, #20]
 80be69a:	2001      	movs	r0, #1
 80be69c:	f7ff fb4d 	bl	80bdd3a <vl53l5_decode_uint8_t>
 80be6a0:	4603      	mov	r3, r0
 80be6a2:	461a      	mov	r2, r3
 80be6a4:	687b      	ldr	r3, [r7, #4]
 80be6a6:	769a      	strb	r2, [r3, #26]
 80be6a8:	697b      	ldr	r3, [r7, #20]
 80be6aa:	3301      	adds	r3, #1
 80be6ac:	617b      	str	r3, [r7, #20]
 80be6ae:	69bb      	ldr	r3, [r7, #24]
 80be6b0:	3301      	adds	r3, #1
 80be6b2:	61bb      	str	r3, [r7, #24]
 80be6b4:	6979      	ldr	r1, [r7, #20]
 80be6b6:	2001      	movs	r0, #1
 80be6b8:	f7ff fb3f 	bl	80bdd3a <vl53l5_decode_uint8_t>
 80be6bc:	4603      	mov	r3, r0
 80be6be:	461a      	mov	r2, r3
 80be6c0:	687b      	ldr	r3, [r7, #4]
 80be6c2:	76da      	strb	r2, [r3, #27]
 80be6c4:	697b      	ldr	r3, [r7, #20]
 80be6c6:	3301      	adds	r3, #1
 80be6c8:	617b      	str	r3, [r7, #20]
 80be6ca:	69bb      	ldr	r3, [r7, #24]
 80be6cc:	3301      	adds	r3, #1
 80be6ce:	61bb      	str	r3, [r7, #24]
 80be6d0:	68fa      	ldr	r2, [r7, #12]
 80be6d2:	69bb      	ldr	r3, [r7, #24]
 80be6d4:	429a      	cmp	r2, r3
 80be6d6:	d003      	beq.n	80be6e0 <_decode_dci_grp_dyn_xtalk_persistent_data+0x160>
 80be6d8:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 80be6dc:	61fb      	str	r3, [r7, #28]
 80be6de:	e000      	b.n	80be6e2 <_decode_dci_grp_dyn_xtalk_persistent_data+0x162>
 80be6e0:	bf00      	nop
 80be6e2:	69fb      	ldr	r3, [r7, #28]
 80be6e4:	4618      	mov	r0, r3
 80be6e6:	3720      	adds	r7, #32
 80be6e8:	46bd      	mov	sp, r7
 80be6ea:	bd80      	pop	{r7, pc}

080be6ec <vl53l5_results_decode_cmd>:
 80be6ec:	b580      	push	{r7, lr}
 80be6ee:	b086      	sub	sp, #24
 80be6f0:	af00      	add	r7, sp, #0
 80be6f2:	60b9      	str	r1, [r7, #8]
 80be6f4:	607a      	str	r2, [r7, #4]
 80be6f6:	603b      	str	r3, [r7, #0]
 80be6f8:	4603      	mov	r3, r0
 80be6fa:	81fb      	strh	r3, [r7, #14]
 80be6fc:	2300      	movs	r3, #0
 80be6fe:	617b      	str	r3, [r7, #20]
 80be700:	89fb      	ldrh	r3, [r7, #14]
 80be702:	f645 522c 	movw	r2, #23852	; 0x5d2c
 80be706:	4293      	cmp	r3, r2
 80be708:	d06c      	beq.n	80be7e4 <vl53l5_results_decode_cmd+0xf8>
 80be70a:	f645 522c 	movw	r2, #23852	; 0x5d2c
 80be70e:	4293      	cmp	r3, r2
 80be710:	dc19      	bgt.n	80be746 <vl53l5_results_decode_cmd+0x5a>
 80be712:	f645 12ec 	movw	r2, #23020	; 0x59ec
 80be716:	4293      	cmp	r3, r2
 80be718:	d046      	beq.n	80be7a8 <vl53l5_results_decode_cmd+0xbc>
 80be71a:	f645 12ec 	movw	r2, #23020	; 0x59ec
 80be71e:	4293      	cmp	r3, r2
 80be720:	dc08      	bgt.n	80be734 <vl53l5_results_decode_cmd+0x48>
 80be722:	f645 12d0 	movw	r2, #22992	; 0x59d0
 80be726:	4293      	cmp	r3, r2
 80be728:	d02b      	beq.n	80be782 <vl53l5_results_decode_cmd+0x96>
 80be72a:	f645 12dc 	movw	r2, #23004	; 0x59dc
 80be72e:	4293      	cmp	r3, r2
 80be730:	d030      	beq.n	80be794 <vl53l5_results_decode_cmd+0xa8>
 80be732:	e0a3      	b.n	80be87c <vl53l5_results_decode_cmd+0x190>
 80be734:	f645 32ec 	movw	r2, #23532	; 0x5bec
 80be738:	4293      	cmp	r3, r2
 80be73a:	d03f      	beq.n	80be7bc <vl53l5_results_decode_cmd+0xd0>
 80be73c:	f645 42ec 	movw	r2, #23788	; 0x5cec
 80be740:	4293      	cmp	r3, r2
 80be742:	d045      	beq.n	80be7d0 <vl53l5_results_decode_cmd+0xe4>
 80be744:	e09a      	b.n	80be87c <vl53l5_results_decode_cmd+0x190>
 80be746:	f646 32ac 	movw	r2, #27564	; 0x6bac
 80be74a:	4293      	cmp	r3, r2
 80be74c:	d06a      	beq.n	80be824 <vl53l5_results_decode_cmd+0x138>
 80be74e:	f646 32ac 	movw	r2, #27564	; 0x6bac
 80be752:	4293      	cmp	r3, r2
 80be754:	dc08      	bgt.n	80be768 <vl53l5_results_decode_cmd+0x7c>
 80be756:	f645 52ac 	movw	r2, #23980	; 0x5dac
 80be75a:	4293      	cmp	r3, r2
 80be75c:	d04c      	beq.n	80be7f8 <vl53l5_results_decode_cmd+0x10c>
 80be75e:	f646 12ac 	movw	r2, #27052	; 0x69ac
 80be762:	4293      	cmp	r3, r2
 80be764:	d053      	beq.n	80be80e <vl53l5_results_decode_cmd+0x122>
 80be766:	e089      	b.n	80be87c <vl53l5_results_decode_cmd+0x190>
 80be768:	f24a 3234 	movw	r2, #41780	; 0xa334
 80be76c:	4293      	cmp	r3, r2
 80be76e:	d06f      	beq.n	80be850 <vl53l5_results_decode_cmd+0x164>
 80be770:	f24a 323c 	movw	r2, #41788	; 0xa33c
 80be774:	4293      	cmp	r3, r2
 80be776:	d076      	beq.n	80be866 <vl53l5_results_decode_cmd+0x17a>
 80be778:	f247 02ac 	movw	r2, #28844	; 0x70ac
 80be77c:	4293      	cmp	r3, r2
 80be77e:	d05c      	beq.n	80be83a <vl53l5_results_decode_cmd+0x14e>
 80be780:	e07c      	b.n	80be87c <vl53l5_results_decode_cmd+0x190>
 80be782:	683b      	ldr	r3, [r7, #0]
 80be784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80be786:	461a      	mov	r2, r3
 80be788:	6879      	ldr	r1, [r7, #4]
 80be78a:	68b8      	ldr	r0, [r7, #8]
 80be78c:	f7ff fbf0 	bl	80bdf70 <_decode_dci_grp_buf_meta_data>
 80be790:	6178      	str	r0, [r7, #20]
 80be792:	e077      	b.n	80be884 <vl53l5_results_decode_cmd+0x198>
 80be794:	683b      	ldr	r3, [r7, #0]
 80be796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80be798:	330c      	adds	r3, #12
 80be79a:	461a      	mov	r2, r3
 80be79c:	6879      	ldr	r1, [r7, #4]
 80be79e:	68b8      	ldr	r0, [r7, #8]
 80be7a0:	f7ff fc84 	bl	80be0ac <_decode_dci_grp_rng_common_data>
 80be7a4:	6178      	str	r0, [r7, #20]
 80be7a6:	e06d      	b.n	80be884 <vl53l5_results_decode_cmd+0x198>
 80be7a8:	683b      	ldr	r3, [r7, #0]
 80be7aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80be7ac:	3310      	adds	r3, #16
 80be7ae:	461a      	mov	r2, r3
 80be7b0:	6879      	ldr	r1, [r7, #4]
 80be7b2:	68b8      	ldr	r0, [r7, #8]
 80be7b4:	f7ff fcc5 	bl	80be142 <_decode_dci_grp_rng_per_zone_data_amb_rate_kcps_per_spad>
 80be7b8:	6178      	str	r0, [r7, #20]
 80be7ba:	e063      	b.n	80be884 <vl53l5_results_decode_cmd+0x198>
 80be7bc:	683b      	ldr	r3, [r7, #0]
 80be7be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80be7c0:	3310      	adds	r3, #16
 80be7c2:	461a      	mov	r2, r3
 80be7c4:	6879      	ldr	r1, [r7, #4]
 80be7c6:	68b8      	ldr	r0, [r7, #8]
 80be7c8:	f7ff fcf5 	bl	80be1b6 <_decode_dci_grp_rng_per_zone_data_amb_dmax_mm>
 80be7cc:	6178      	str	r0, [r7, #20]
 80be7ce:	e059      	b.n	80be884 <vl53l5_results_decode_cmd+0x198>
 80be7d0:	683b      	ldr	r3, [r7, #0]
 80be7d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80be7d4:	3310      	adds	r3, #16
 80be7d6:	461a      	mov	r2, r3
 80be7d8:	6879      	ldr	r1, [r7, #4]
 80be7da:	68b8      	ldr	r0, [r7, #8]
 80be7dc:	f7ff fd28 	bl	80be230 <_decode_dci_grp_rng_per_zone_data_rng_no_of_targets>
 80be7e0:	6178      	str	r0, [r7, #20]
 80be7e2:	e04f      	b.n	80be884 <vl53l5_results_decode_cmd+0x198>
 80be7e4:	683b      	ldr	r3, [r7, #0]
 80be7e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80be7e8:	3310      	adds	r3, #16
 80be7ea:	461a      	mov	r2, r3
 80be7ec:	6879      	ldr	r1, [r7, #4]
 80be7ee:	68b8      	ldr	r0, [r7, #8]
 80be7f0:	f7ff fd5b 	bl	80be2aa <_decode_dci_grp_rng_per_zone_data_rng_zone_id>
 80be7f4:	6178      	str	r0, [r7, #20]
 80be7f6:	e045      	b.n	80be884 <vl53l5_results_decode_cmd+0x198>
 80be7f8:	683b      	ldr	r3, [r7, #0]
 80be7fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80be7fc:	f503 7306 	add.w	r3, r3, #536	; 0x218
 80be800:	461a      	mov	r2, r3
 80be802:	6879      	ldr	r1, [r7, #4]
 80be804:	68b8      	ldr	r0, [r7, #8]
 80be806:	f7ff fd8d 	bl	80be324 <_decode_dci_grp_rng_per_target_data_peak_rate_kcps_per_spad>
 80be80a:	6178      	str	r0, [r7, #20]
 80be80c:	e03a      	b.n	80be884 <vl53l5_results_decode_cmd+0x198>
 80be80e:	683b      	ldr	r3, [r7, #0]
 80be810:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80be812:	f503 7306 	add.w	r3, r3, #536	; 0x218
 80be816:	461a      	mov	r2, r3
 80be818:	6879      	ldr	r1, [r7, #4]
 80be81a:	68b8      	ldr	r0, [r7, #8]
 80be81c:	f7ff fdbc 	bl	80be398 <_decode_dci_grp_rng_per_target_data_range_sigma_mm>
 80be820:	6178      	str	r0, [r7, #20]
 80be822:	e02f      	b.n	80be884 <vl53l5_results_decode_cmd+0x198>
 80be824:	683b      	ldr	r3, [r7, #0]
 80be826:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80be828:	f503 7306 	add.w	r3, r3, #536	; 0x218
 80be82c:	461a      	mov	r2, r3
 80be82e:	6879      	ldr	r1, [r7, #4]
 80be830:	68b8      	ldr	r0, [r7, #8]
 80be832:	f7ff fdee 	bl	80be412 <_decode_dci_grp_rng_per_target_data_median_range_mm>
 80be836:	6178      	str	r0, [r7, #20]
 80be838:	e024      	b.n	80be884 <vl53l5_results_decode_cmd+0x198>
 80be83a:	683b      	ldr	r3, [r7, #0]
 80be83c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80be83e:	f503 7306 	add.w	r3, r3, #536	; 0x218
 80be842:	461a      	mov	r2, r3
 80be844:	6879      	ldr	r1, [r7, #4]
 80be846:	68b8      	ldr	r0, [r7, #8]
 80be848:	f7ff fe22 	bl	80be490 <_decode_dci_grp_rng_per_target_data_target_status>
 80be84c:	6178      	str	r0, [r7, #20]
 80be84e:	e019      	b.n	80be884 <vl53l5_results_decode_cmd+0x198>
 80be850:	683b      	ldr	r3, [r7, #0]
 80be852:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80be854:	f203 63ac 	addw	r3, r3, #1708	; 0x6ac
 80be858:	461a      	mov	r2, r3
 80be85a:	6879      	ldr	r1, [r7, #4]
 80be85c:	68b8      	ldr	r0, [r7, #8]
 80be85e:	f7ff fe54 	bl	80be50a <_decode_ztsa_zone_thresh_status_bytes>
 80be862:	6178      	str	r0, [r7, #20]
 80be864:	e00e      	b.n	80be884 <vl53l5_results_decode_cmd+0x198>
 80be866:	683b      	ldr	r3, [r7, #0]
 80be868:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80be86a:	f203 63b4 	addw	r3, r3, #1716	; 0x6b4
 80be86e:	461a      	mov	r2, r3
 80be870:	6879      	ldr	r1, [r7, #4]
 80be872:	68b8      	ldr	r0, [r7, #8]
 80be874:	f7ff fe84 	bl	80be580 <_decode_dci_grp_dyn_xtalk_persistent_data>
 80be878:	6178      	str	r0, [r7, #20]
 80be87a:	e003      	b.n	80be884 <vl53l5_results_decode_cmd+0x198>
 80be87c:	f06f 0308 	mvn.w	r3, #8
 80be880:	617b      	str	r3, [r7, #20]
 80be882:	bf00      	nop
 80be884:	697b      	ldr	r3, [r7, #20]
 80be886:	4618      	mov	r0, r3
 80be888:	3718      	adds	r7, #24
 80be88a:	46bd      	mov	sp, r7
 80be88c:	bd80      	pop	{r7, pc}
	...

080be890 <SPIx_WriteRead>:
 80be890:	b580      	push	{r7, lr}
 80be892:	b086      	sub	sp, #24
 80be894:	af02      	add	r7, sp, #8
 80be896:	6078      	str	r0, [r7, #4]
 80be898:	460b      	mov	r3, r1
 80be89a:	70fb      	strb	r3, [r7, #3]
 80be89c:	4b0a      	ldr	r3, [pc, #40]	; (80be8c8 <SPIx_WriteRead+0x38>)
 80be89e:	681b      	ldr	r3, [r3, #0]
 80be8a0:	f107 020f 	add.w	r2, r7, #15
 80be8a4:	1cf9      	adds	r1, r7, #3
 80be8a6:	9300      	str	r3, [sp, #0]
 80be8a8:	2301      	movs	r3, #1
 80be8aa:	6878      	ldr	r0, [r7, #4]
 80be8ac:	f7f5 f87f 	bl	80b39ae <HAL_SPI_TransmitReceive>
 80be8b0:	4603      	mov	r3, r0
 80be8b2:	2b00      	cmp	r3, #0
 80be8b4:	d002      	beq.n	80be8bc <SPIx_WriteRead+0x2c>
 80be8b6:	4805      	ldr	r0, [pc, #20]	; (80be8cc <SPIx_WriteRead+0x3c>)
 80be8b8:	f002 f8f8 	bl	80c0aac <puts>
 80be8bc:	7bfb      	ldrb	r3, [r7, #15]
 80be8be:	4618      	mov	r0, r3
 80be8c0:	3710      	adds	r7, #16
 80be8c2:	46bd      	mov	sp, r7
 80be8c4:	bd80      	pop	{r7, pc}
 80be8c6:	bf00      	nop
 80be8c8:	20007cbc 	.word	0x20007cbc
 80be8cc:	080c7798 	.word	0x080c7798

080be8d0 <BSP_SPI_Set_CS>:
 80be8d0:	b580      	push	{r7, lr}
 80be8d2:	b082      	sub	sp, #8
 80be8d4:	af00      	add	r7, sp, #0
 80be8d6:	6078      	str	r0, [r7, #4]
 80be8d8:	460b      	mov	r3, r1
 80be8da:	807b      	strh	r3, [r7, #2]
 80be8dc:	4613      	mov	r3, r2
 80be8de:	707b      	strb	r3, [r7, #1]
 80be8e0:	8879      	ldrh	r1, [r7, #2]
 80be8e2:	787b      	ldrb	r3, [r7, #1]
 80be8e4:	2b01      	cmp	r3, #1
 80be8e6:	bf14      	ite	ne
 80be8e8:	2301      	movne	r3, #1
 80be8ea:	2300      	moveq	r3, #0
 80be8ec:	b2db      	uxtb	r3, r3
 80be8ee:	461a      	mov	r2, r3
 80be8f0:	6878      	ldr	r0, [r7, #4]
 80be8f2:	f7f2 fec9 	bl	80b1688 <HAL_GPIO_WritePin>
 80be8f6:	bf00      	nop
 80be8f8:	3708      	adds	r7, #8
 80be8fa:	46bd      	mov	sp, r7
 80be8fc:	bd80      	pop	{r7, pc}

080be8fe <BSP_SPI_16M_Write_Sequence>:
 80be8fe:	b580      	push	{r7, lr}
 80be900:	b086      	sub	sp, #24
 80be902:	af00      	add	r7, sp, #0
 80be904:	60f8      	str	r0, [r7, #12]
 80be906:	60b9      	str	r1, [r7, #8]
 80be908:	607a      	str	r2, [r7, #4]
 80be90a:	807b      	strh	r3, [r7, #2]
 80be90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80be90e:	617b      	str	r3, [r7, #20]
 80be910:	687b      	ldr	r3, [r7, #4]
 80be912:	881b      	ldrh	r3, [r3, #0]
 80be914:	2201      	movs	r2, #1
 80be916:	4619      	mov	r1, r3
 80be918:	68b8      	ldr	r0, [r7, #8]
 80be91a:	f7ff ffd9 	bl	80be8d0 <BSP_SPI_Set_CS>
 80be91e:	887a      	ldrh	r2, [r7, #2]
 80be920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80be922:	4413      	add	r3, r2
 80be924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80be928:	d304      	bcc.n	80be934 <BSP_SPI_16M_Write_Sequence+0x36>
 80be92a:	887b      	ldrh	r3, [r7, #2]
 80be92c:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80be930:	33ff      	adds	r3, #255	; 0xff
 80be932:	617b      	str	r3, [r7, #20]
 80be934:	887b      	ldrh	r3, [r7, #2]
 80be936:	0a1b      	lsrs	r3, r3, #8
 80be938:	b29b      	uxth	r3, r3
 80be93a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80be93e:	b29b      	uxth	r3, r3
 80be940:	b2db      	uxtb	r3, r3
 80be942:	4619      	mov	r1, r3
 80be944:	68f8      	ldr	r0, [r7, #12]
 80be946:	f7ff ffa3 	bl	80be890 <SPIx_WriteRead>
 80be94a:	887b      	ldrh	r3, [r7, #2]
 80be94c:	b2db      	uxtb	r3, r3
 80be94e:	4619      	mov	r1, r3
 80be950:	68f8      	ldr	r0, [r7, #12]
 80be952:	f7ff ff9d 	bl	80be890 <SPIx_WriteRead>
 80be956:	887b      	ldrh	r3, [r7, #2]
 80be958:	827b      	strh	r3, [r7, #18]
 80be95a:	e00a      	b.n	80be972 <BSP_SPI_16M_Write_Sequence+0x74>
 80be95c:	6a3b      	ldr	r3, [r7, #32]
 80be95e:	1c5a      	adds	r2, r3, #1
 80be960:	623a      	str	r2, [r7, #32]
 80be962:	781b      	ldrb	r3, [r3, #0]
 80be964:	4619      	mov	r1, r3
 80be966:	68f8      	ldr	r0, [r7, #12]
 80be968:	f7ff ff92 	bl	80be890 <SPIx_WriteRead>
 80be96c:	8a7b      	ldrh	r3, [r7, #18]
 80be96e:	3301      	adds	r3, #1
 80be970:	827b      	strh	r3, [r7, #18]
 80be972:	8a7a      	ldrh	r2, [r7, #18]
 80be974:	8879      	ldrh	r1, [r7, #2]
 80be976:	697b      	ldr	r3, [r7, #20]
 80be978:	440b      	add	r3, r1
 80be97a:	429a      	cmp	r2, r3
 80be97c:	d3ee      	bcc.n	80be95c <BSP_SPI_16M_Write_Sequence+0x5e>
 80be97e:	687b      	ldr	r3, [r7, #4]
 80be980:	881b      	ldrh	r3, [r3, #0]
 80be982:	2200      	movs	r2, #0
 80be984:	4619      	mov	r1, r3
 80be986:	68b8      	ldr	r0, [r7, #8]
 80be988:	f7ff ffa2 	bl	80be8d0 <BSP_SPI_Set_CS>
 80be98c:	2300      	movs	r3, #0
 80be98e:	4618      	mov	r0, r3
 80be990:	3718      	adds	r7, #24
 80be992:	46bd      	mov	sp, r7
 80be994:	bd80      	pop	{r7, pc}

080be996 <BSP_SPI_16M_Read_Sequence>:
 80be996:	b590      	push	{r4, r7, lr}
 80be998:	b087      	sub	sp, #28
 80be99a:	af00      	add	r7, sp, #0
 80be99c:	60f8      	str	r0, [r7, #12]
 80be99e:	60b9      	str	r1, [r7, #8]
 80be9a0:	607a      	str	r2, [r7, #4]
 80be9a2:	807b      	strh	r3, [r7, #2]
 80be9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80be9a6:	617b      	str	r3, [r7, #20]
 80be9a8:	687b      	ldr	r3, [r7, #4]
 80be9aa:	881b      	ldrh	r3, [r3, #0]
 80be9ac:	2201      	movs	r2, #1
 80be9ae:	4619      	mov	r1, r3
 80be9b0:	68b8      	ldr	r0, [r7, #8]
 80be9b2:	f7ff ff8d 	bl	80be8d0 <BSP_SPI_Set_CS>
 80be9b6:	887a      	ldrh	r2, [r7, #2]
 80be9b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80be9ba:	4413      	add	r3, r2
 80be9bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80be9c0:	d304      	bcc.n	80be9cc <BSP_SPI_16M_Read_Sequence+0x36>
 80be9c2:	887b      	ldrh	r3, [r7, #2]
 80be9c4:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80be9c8:	33ff      	adds	r3, #255	; 0xff
 80be9ca:	617b      	str	r3, [r7, #20]
 80be9cc:	887b      	ldrh	r3, [r7, #2]
 80be9ce:	0a1b      	lsrs	r3, r3, #8
 80be9d0:	b2db      	uxtb	r3, r3
 80be9d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80be9d6:	b2db      	uxtb	r3, r3
 80be9d8:	4619      	mov	r1, r3
 80be9da:	68f8      	ldr	r0, [r7, #12]
 80be9dc:	f7ff ff58 	bl	80be890 <SPIx_WriteRead>
 80be9e0:	887b      	ldrh	r3, [r7, #2]
 80be9e2:	b2db      	uxtb	r3, r3
 80be9e4:	4619      	mov	r1, r3
 80be9e6:	68f8      	ldr	r0, [r7, #12]
 80be9e8:	f7ff ff52 	bl	80be890 <SPIx_WriteRead>
 80be9ec:	887b      	ldrh	r3, [r7, #2]
 80be9ee:	827b      	strh	r3, [r7, #18]
 80be9f0:	e00b      	b.n	80bea0a <BSP_SPI_16M_Read_Sequence+0x74>
 80be9f2:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80be9f4:	1c63      	adds	r3, r4, #1
 80be9f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80be9f8:	2100      	movs	r1, #0
 80be9fa:	68f8      	ldr	r0, [r7, #12]
 80be9fc:	f7ff ff48 	bl	80be890 <SPIx_WriteRead>
 80bea00:	4603      	mov	r3, r0
 80bea02:	7023      	strb	r3, [r4, #0]
 80bea04:	8a7b      	ldrh	r3, [r7, #18]
 80bea06:	3301      	adds	r3, #1
 80bea08:	827b      	strh	r3, [r7, #18]
 80bea0a:	8a7a      	ldrh	r2, [r7, #18]
 80bea0c:	8879      	ldrh	r1, [r7, #2]
 80bea0e:	697b      	ldr	r3, [r7, #20]
 80bea10:	440b      	add	r3, r1
 80bea12:	429a      	cmp	r2, r3
 80bea14:	d3ed      	bcc.n	80be9f2 <BSP_SPI_16M_Read_Sequence+0x5c>
 80bea16:	687b      	ldr	r3, [r7, #4]
 80bea18:	881b      	ldrh	r3, [r3, #0]
 80bea1a:	2200      	movs	r2, #0
 80bea1c:	4619      	mov	r1, r3
 80bea1e:	68b8      	ldr	r0, [r7, #8]
 80bea20:	f7ff ff56 	bl	80be8d0 <BSP_SPI_Set_CS>
 80bea24:	2300      	movs	r3, #0
 80bea26:	4618      	mov	r0, r3
 80bea28:	371c      	adds	r7, #28
 80bea2a:	46bd      	mov	sp, r7
 80bea2c:	bd90      	pop	{r4, r7, pc}

080bea2e <timeGetTime>:
 80bea2e:	b084      	sub	sp, #16
 80bea30:	b598      	push	{r3, r4, r7, lr}
 80bea32:	af00      	add	r7, sp, #0
 80bea34:	f107 0410 	add.w	r4, r7, #16
 80bea38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80bea3c:	6a3b      	ldr	r3, [r7, #32]
 80bea3e:	4798      	blx	r3
 80bea40:	4603      	mov	r3, r0
 80bea42:	460c      	mov	r4, r1
 80bea44:	4618      	mov	r0, r3
 80bea46:	46bd      	mov	sp, r7
 80bea48:	e8bd 4098 	ldmia.w	sp!, {r3, r4, r7, lr}
 80bea4c:	b004      	add	sp, #16
 80bea4e:	4770      	bx	lr

080bea50 <_calculate_twos_complement_uint32>:
 80bea50:	b480      	push	{r7}
 80bea52:	b085      	sub	sp, #20
 80bea54:	af00      	add	r7, sp, #0
 80bea56:	6078      	str	r0, [r7, #4]
 80bea58:	2300      	movs	r3, #0
 80bea5a:	60fb      	str	r3, [r7, #12]
 80bea5c:	687b      	ldr	r3, [r7, #4]
 80bea5e:	425b      	negs	r3, r3
 80bea60:	60fb      	str	r3, [r7, #12]
 80bea62:	68fb      	ldr	r3, [r7, #12]
 80bea64:	4618      	mov	r0, r3
 80bea66:	3714      	adds	r7, #20
 80bea68:	46bd      	mov	sp, r7
 80bea6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 80bea6e:	4770      	bx	lr

080bea70 <vl53l5_comms_initialise>:
 80bea70:	b480      	push	{r7}
 80bea72:	b085      	sub	sp, #20
 80bea74:	af00      	add	r7, sp, #0
 80bea76:	6078      	str	r0, [r7, #4]
 80bea78:	2300      	movs	r3, #0
 80bea7a:	60fb      	str	r3, [r7, #12]
 80bea7c:	687b      	ldr	r3, [r7, #4]
 80bea7e:	785b      	ldrb	r3, [r3, #1]
 80bea80:	2b01      	cmp	r3, #1
 80bea82:	d003      	beq.n	80bea8c <vl53l5_comms_initialise+0x1c>
 80bea84:	f06f 035d 	mvn.w	r3, #93	; 0x5d
 80bea88:	60fb      	str	r3, [r7, #12]
 80bea8a:	e000      	b.n	80bea8e <vl53l5_comms_initialise+0x1e>
 80bea8c:	bf00      	nop
 80bea8e:	68fb      	ldr	r3, [r7, #12]
 80bea90:	4618      	mov	r0, r3
 80bea92:	3714      	adds	r7, #20
 80bea94:	46bd      	mov	sp, r7
 80bea96:	f85d 7b04 	ldr.w	r7, [sp], #4
 80bea9a:	4770      	bx	lr

080bea9c <vl53l5_comms_close>:
 80bea9c:	b480      	push	{r7}
 80bea9e:	b085      	sub	sp, #20
 80beaa0:	af00      	add	r7, sp, #0
 80beaa2:	6078      	str	r0, [r7, #4]
 80beaa4:	2300      	movs	r3, #0
 80beaa6:	60fb      	str	r3, [r7, #12]
 80beaa8:	68fb      	ldr	r3, [r7, #12]
 80beaaa:	4618      	mov	r0, r3
 80beaac:	3714      	adds	r7, #20
 80beaae:	46bd      	mov	sp, r7
 80beab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80beab4:	4770      	bx	lr

080beab6 <vl53l5_write_multi>:
 80beab6:	b590      	push	{r4, r7, lr}
 80beab8:	b089      	sub	sp, #36	; 0x24
 80beaba:	af02      	add	r7, sp, #8
 80beabc:	60f8      	str	r0, [r7, #12]
 80beabe:	607a      	str	r2, [r7, #4]
 80beac0:	603b      	str	r3, [r7, #0]
 80beac2:	460b      	mov	r3, r1
 80beac4:	817b      	strh	r3, [r7, #10]
 80beac6:	2300      	movs	r3, #0
 80beac8:	617b      	str	r3, [r7, #20]
 80beaca:	68fb      	ldr	r3, [r7, #12]
 80beacc:	68d8      	ldr	r0, [r3, #12]
 80beace:	68fb      	ldr	r3, [r7, #12]
 80bead0:	6959      	ldr	r1, [r3, #20]
 80bead2:	68fb      	ldr	r3, [r7, #12]
 80bead4:	699a      	ldr	r2, [r3, #24]
 80bead6:	897c      	ldrh	r4, [r7, #10]
 80bead8:	683b      	ldr	r3, [r7, #0]
 80beada:	9301      	str	r3, [sp, #4]
 80beadc:	687b      	ldr	r3, [r7, #4]
 80beade:	9300      	str	r3, [sp, #0]
 80beae0:	4623      	mov	r3, r4
 80beae2:	f7ff ff0c 	bl	80be8fe <BSP_SPI_16M_Write_Sequence>
 80beae6:	697b      	ldr	r3, [r7, #20]
 80beae8:	4618      	mov	r0, r3
 80beaea:	371c      	adds	r7, #28
 80beaec:	46bd      	mov	sp, r7
 80beaee:	bd90      	pop	{r4, r7, pc}

080beaf0 <vl53l5_read_multi>:
 80beaf0:	b590      	push	{r4, r7, lr}
 80beaf2:	b089      	sub	sp, #36	; 0x24
 80beaf4:	af02      	add	r7, sp, #8
 80beaf6:	60f8      	str	r0, [r7, #12]
 80beaf8:	607a      	str	r2, [r7, #4]
 80beafa:	603b      	str	r3, [r7, #0]
 80beafc:	460b      	mov	r3, r1
 80beafe:	817b      	strh	r3, [r7, #10]
 80beb00:	2300      	movs	r3, #0
 80beb02:	617b      	str	r3, [r7, #20]
 80beb04:	68fb      	ldr	r3, [r7, #12]
 80beb06:	68d8      	ldr	r0, [r3, #12]
 80beb08:	68fb      	ldr	r3, [r7, #12]
 80beb0a:	6959      	ldr	r1, [r3, #20]
 80beb0c:	68fb      	ldr	r3, [r7, #12]
 80beb0e:	699a      	ldr	r2, [r3, #24]
 80beb10:	897c      	ldrh	r4, [r7, #10]
 80beb12:	683b      	ldr	r3, [r7, #0]
 80beb14:	9301      	str	r3, [sp, #4]
 80beb16:	687b      	ldr	r3, [r7, #4]
 80beb18:	9300      	str	r3, [sp, #0]
 80beb1a:	4623      	mov	r3, r4
 80beb1c:	f7ff ff3b 	bl	80be996 <BSP_SPI_16M_Read_Sequence>
 80beb20:	697b      	ldr	r3, [r7, #20]
 80beb22:	4618      	mov	r0, r3
 80beb24:	371c      	adds	r7, #28
 80beb26:	46bd      	mov	sp, r7
 80beb28:	bd90      	pop	{r4, r7, pc}
	...

080beb2c <vl53l5_wait_us>:
 80beb2c:	b580      	push	{r7, lr}
 80beb2e:	b084      	sub	sp, #16
 80beb30:	af00      	add	r7, sp, #0
 80beb32:	6078      	str	r0, [r7, #4]
 80beb34:	6039      	str	r1, [r7, #0]
 80beb36:	2300      	movs	r3, #0
 80beb38:	60fb      	str	r3, [r7, #12]
 80beb3a:	683b      	ldr	r3, [r7, #0]
 80beb3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80beb40:	d305      	bcc.n	80beb4e <vl53l5_wait_us+0x22>
 80beb42:	683b      	ldr	r3, [r7, #0]
 80beb44:	4a07      	ldr	r2, [pc, #28]	; (80beb64 <vl53l5_wait_us+0x38>)
 80beb46:	fba2 2303 	umull	r2, r3, r2, r3
 80beb4a:	099b      	lsrs	r3, r3, #6
 80beb4c:	e000      	b.n	80beb50 <vl53l5_wait_us+0x24>
 80beb4e:	2301      	movs	r3, #1
 80beb50:	60bb      	str	r3, [r7, #8]
 80beb52:	68b8      	ldr	r0, [r7, #8]
 80beb54:	f7f0 fd7a 	bl	80af64c <HAL_Delay>
 80beb58:	68fb      	ldr	r3, [r7, #12]
 80beb5a:	4618      	mov	r0, r3
 80beb5c:	3710      	adds	r7, #16
 80beb5e:	46bd      	mov	sp, r7
 80beb60:	bd80      	pop	{r7, pc}
 80beb62:	bf00      	nop
 80beb64:	10624dd3 	.word	0x10624dd3

080beb68 <vl53l5_wait_ms>:
 80beb68:	b580      	push	{r7, lr}
 80beb6a:	b082      	sub	sp, #8
 80beb6c:	af00      	add	r7, sp, #0
 80beb6e:	6078      	str	r0, [r7, #4]
 80beb70:	6039      	str	r1, [r7, #0]
 80beb72:	683b      	ldr	r3, [r7, #0]
 80beb74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80beb78:	fb02 f303 	mul.w	r3, r2, r3
 80beb7c:	4619      	mov	r1, r3
 80beb7e:	6878      	ldr	r0, [r7, #4]
 80beb80:	f7ff ffd4 	bl	80beb2c <vl53l5_wait_us>
 80beb84:	4603      	mov	r3, r0
 80beb86:	4618      	mov	r0, r3
 80beb88:	3708      	adds	r7, #8
 80beb8a:	46bd      	mov	sp, r7
 80beb8c:	bd80      	pop	{r7, pc}

080beb8e <vl53l5_gpio_low_power_control>:
 80beb8e:	b480      	push	{r7}
 80beb90:	b085      	sub	sp, #20
 80beb92:	af00      	add	r7, sp, #0
 80beb94:	6078      	str	r0, [r7, #4]
 80beb96:	460b      	mov	r3, r1
 80beb98:	70fb      	strb	r3, [r7, #3]
 80beb9a:	2300      	movs	r3, #0
 80beb9c:	60fb      	str	r3, [r7, #12]
 80beb9e:	68fb      	ldr	r3, [r7, #12]
 80beba0:	4618      	mov	r0, r3
 80beba2:	3714      	adds	r7, #20
 80beba4:	46bd      	mov	sp, r7
 80beba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80bebaa:	4770      	bx	lr

080bebac <vl53l5_gpio_comms_select>:
 80bebac:	b480      	push	{r7}
 80bebae:	b085      	sub	sp, #20
 80bebb0:	af00      	add	r7, sp, #0
 80bebb2:	6078      	str	r0, [r7, #4]
 80bebb4:	460b      	mov	r3, r1
 80bebb6:	70fb      	strb	r3, [r7, #3]
 80bebb8:	2300      	movs	r3, #0
 80bebba:	60fb      	str	r3, [r7, #12]
 80bebbc:	68fb      	ldr	r3, [r7, #12]
 80bebbe:	4618      	mov	r0, r3
 80bebc0:	3714      	adds	r7, #20
 80bebc2:	46bd      	mov	sp, r7
 80bebc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80bebc8:	4770      	bx	lr

080bebca <vl53l5_gpio_power_enable>:
 80bebca:	b480      	push	{r7}
 80bebcc:	b085      	sub	sp, #20
 80bebce:	af00      	add	r7, sp, #0
 80bebd0:	6078      	str	r0, [r7, #4]
 80bebd2:	460b      	mov	r3, r1
 80bebd4:	70fb      	strb	r3, [r7, #3]
 80bebd6:	2300      	movs	r3, #0
 80bebd8:	60fb      	str	r3, [r7, #12]
 80bebda:	68fb      	ldr	r3, [r7, #12]
 80bebdc:	4618      	mov	r0, r3
 80bebde:	3714      	adds	r7, #20
 80bebe0:	46bd      	mov	sp, r7
 80bebe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80bebe6:	4770      	bx	lr

080bebe8 <vl53l5_get_tick_count>:
 80bebe8:	b590      	push	{r4, r7, lr}
 80bebea:	b09b      	sub	sp, #108	; 0x6c
 80bebec:	af16      	add	r7, sp, #88	; 0x58
 80bebee:	6078      	str	r0, [r7, #4]
 80bebf0:	6039      	str	r1, [r7, #0]
 80bebf2:	2300      	movs	r3, #0
 80bebf4:	60fb      	str	r3, [r7, #12]
 80bebf6:	687c      	ldr	r4, [r7, #4]
 80bebf8:	4668      	mov	r0, sp
 80bebfa:	f104 0310 	add.w	r3, r4, #16
 80bebfe:	2258      	movs	r2, #88	; 0x58
 80bec00:	4619      	mov	r1, r3
 80bec02:	f001 f9cd 	bl	80bffa0 <memcpy>
 80bec06:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80bec0a:	f7ff ff10 	bl	80bea2e <timeGetTime>
 80bec0e:	4602      	mov	r2, r0
 80bec10:	683b      	ldr	r3, [r7, #0]
 80bec12:	601a      	str	r2, [r3, #0]
 80bec14:	68fb      	ldr	r3, [r7, #12]
 80bec16:	4618      	mov	r0, r3
 80bec18:	3714      	adds	r7, #20
 80bec1a:	46bd      	mov	sp, r7
 80bec1c:	bd90      	pop	{r4, r7, pc}

080bec1e <vl53l5_check_for_timeout>:
 80bec1e:	b580      	push	{r7, lr}
 80bec20:	b086      	sub	sp, #24
 80bec22:	af00      	add	r7, sp, #0
 80bec24:	60f8      	str	r0, [r7, #12]
 80bec26:	60b9      	str	r1, [r7, #8]
 80bec28:	607a      	str	r2, [r7, #4]
 80bec2a:	603b      	str	r3, [r7, #0]
 80bec2c:	2300      	movs	r3, #0
 80bec2e:	617b      	str	r3, [r7, #20]
 80bec30:	68ba      	ldr	r2, [r7, #8]
 80bec32:	687b      	ldr	r3, [r7, #4]
 80bec34:	429a      	cmp	r2, r3
 80bec36:	d804      	bhi.n	80bec42 <vl53l5_check_for_timeout+0x24>
 80bec38:	687a      	ldr	r2, [r7, #4]
 80bec3a:	68bb      	ldr	r3, [r7, #8]
 80bec3c:	1ad3      	subs	r3, r2, r3
 80bec3e:	613b      	str	r3, [r7, #16]
 80bec40:	e006      	b.n	80bec50 <vl53l5_check_for_timeout+0x32>
 80bec42:	68b8      	ldr	r0, [r7, #8]
 80bec44:	f7ff ff04 	bl	80bea50 <_calculate_twos_complement_uint32>
 80bec48:	4602      	mov	r2, r0
 80bec4a:	687b      	ldr	r3, [r7, #4]
 80bec4c:	4413      	add	r3, r2
 80bec4e:	613b      	str	r3, [r7, #16]
 80bec50:	693a      	ldr	r2, [r7, #16]
 80bec52:	683b      	ldr	r3, [r7, #0]
 80bec54:	429a      	cmp	r2, r3
 80bec56:	d902      	bls.n	80bec5e <vl53l5_check_for_timeout+0x40>
 80bec58:	f06f 0306 	mvn.w	r3, #6
 80bec5c:	617b      	str	r3, [r7, #20]
 80bec5e:	697b      	ldr	r3, [r7, #20]
 80bec60:	4618      	mov	r0, r3
 80bec62:	3718      	adds	r7, #24
 80bec64:	46bd      	mov	sp, r7
 80bec66:	bd80      	pop	{r7, pc}

080bec68 <vl53l5_platform_init>:
 80bec68:	b580      	push	{r7, lr}
 80bec6a:	b084      	sub	sp, #16
 80bec6c:	af00      	add	r7, sp, #0
 80bec6e:	6078      	str	r0, [r7, #4]
 80bec70:	2300      	movs	r3, #0
 80bec72:	60fb      	str	r3, [r7, #12]
 80bec74:	6878      	ldr	r0, [r7, #4]
 80bec76:	f7ff fefb 	bl	80bea70 <vl53l5_comms_initialise>
 80bec7a:	60f8      	str	r0, [r7, #12]
 80bec7c:	68fb      	ldr	r3, [r7, #12]
 80bec7e:	2b00      	cmp	r3, #0
 80bec80:	d14a      	bne.n	80bed18 <vl53l5_platform_init+0xb0>
 80bec82:	2100      	movs	r1, #0
 80bec84:	6878      	ldr	r0, [r7, #4]
 80bec86:	f7ff ff82 	bl	80beb8e <vl53l5_gpio_low_power_control>
 80bec8a:	60f8      	str	r0, [r7, #12]
 80bec8c:	68fb      	ldr	r3, [r7, #12]
 80bec8e:	2b00      	cmp	r3, #0
 80bec90:	d144      	bne.n	80bed1c <vl53l5_platform_init+0xb4>
 80bec92:	2100      	movs	r1, #0
 80bec94:	6878      	ldr	r0, [r7, #4]
 80bec96:	f7ff ff98 	bl	80bebca <vl53l5_gpio_power_enable>
 80bec9a:	60f8      	str	r0, [r7, #12]
 80bec9c:	68fb      	ldr	r3, [r7, #12]
 80bec9e:	2b00      	cmp	r3, #0
 80beca0:	d13e      	bne.n	80bed20 <vl53l5_platform_init+0xb8>
 80beca2:	687b      	ldr	r3, [r7, #4]
 80beca4:	785b      	ldrb	r3, [r3, #1]
 80beca6:	2b00      	cmp	r3, #0
 80beca8:	d105      	bne.n	80becb6 <vl53l5_platform_init+0x4e>
 80becaa:	2100      	movs	r1, #0
 80becac:	6878      	ldr	r0, [r7, #4]
 80becae:	f7ff ff7d 	bl	80bebac <vl53l5_gpio_comms_select>
 80becb2:	60f8      	str	r0, [r7, #12]
 80becb4:	e00c      	b.n	80becd0 <vl53l5_platform_init+0x68>
 80becb6:	687b      	ldr	r3, [r7, #4]
 80becb8:	785b      	ldrb	r3, [r3, #1]
 80becba:	2b01      	cmp	r3, #1
 80becbc:	d105      	bne.n	80becca <vl53l5_platform_init+0x62>
 80becbe:	2101      	movs	r1, #1
 80becc0:	6878      	ldr	r0, [r7, #4]
 80becc2:	f7ff ff73 	bl	80bebac <vl53l5_gpio_comms_select>
 80becc6:	60f8      	str	r0, [r7, #12]
 80becc8:	e002      	b.n	80becd0 <vl53l5_platform_init+0x68>
 80becca:	f06f 035c 	mvn.w	r3, #92	; 0x5c
 80becce:	60fb      	str	r3, [r7, #12]
 80becd0:	68fb      	ldr	r3, [r7, #12]
 80becd2:	2b00      	cmp	r3, #0
 80becd4:	d126      	bne.n	80bed24 <vl53l5_platform_init+0xbc>
 80becd6:	f242 7110 	movw	r1, #10000	; 0x2710
 80becda:	6878      	ldr	r0, [r7, #4]
 80becdc:	f7ff ff26 	bl	80beb2c <vl53l5_wait_us>
 80bece0:	60f8      	str	r0, [r7, #12]
 80bece2:	68fb      	ldr	r3, [r7, #12]
 80bece4:	2b00      	cmp	r3, #0
 80bece6:	d11f      	bne.n	80bed28 <vl53l5_platform_init+0xc0>
 80bece8:	2101      	movs	r1, #1
 80becea:	6878      	ldr	r0, [r7, #4]
 80becec:	f7ff ff4f 	bl	80beb8e <vl53l5_gpio_low_power_control>
 80becf0:	60f8      	str	r0, [r7, #12]
 80becf2:	68fb      	ldr	r3, [r7, #12]
 80becf4:	2b00      	cmp	r3, #0
 80becf6:	d119      	bne.n	80bed2c <vl53l5_platform_init+0xc4>
 80becf8:	2101      	movs	r1, #1
 80becfa:	6878      	ldr	r0, [r7, #4]
 80becfc:	f7ff ff65 	bl	80bebca <vl53l5_gpio_power_enable>
 80bed00:	60f8      	str	r0, [r7, #12]
 80bed02:	68fb      	ldr	r3, [r7, #12]
 80bed04:	2b00      	cmp	r3, #0
 80bed06:	d113      	bne.n	80bed30 <vl53l5_platform_init+0xc8>
 80bed08:	21c8      	movs	r1, #200	; 0xc8
 80bed0a:	6878      	ldr	r0, [r7, #4]
 80bed0c:	f7ff ff0e 	bl	80beb2c <vl53l5_wait_us>
 80bed10:	60f8      	str	r0, [r7, #12]
 80bed12:	68fb      	ldr	r3, [r7, #12]
 80bed14:	2b00      	cmp	r3, #0
 80bed16:	e00c      	b.n	80bed32 <vl53l5_platform_init+0xca>
 80bed18:	bf00      	nop
 80bed1a:	e00a      	b.n	80bed32 <vl53l5_platform_init+0xca>
 80bed1c:	bf00      	nop
 80bed1e:	e008      	b.n	80bed32 <vl53l5_platform_init+0xca>
 80bed20:	bf00      	nop
 80bed22:	e006      	b.n	80bed32 <vl53l5_platform_init+0xca>
 80bed24:	bf00      	nop
 80bed26:	e004      	b.n	80bed32 <vl53l5_platform_init+0xca>
 80bed28:	bf00      	nop
 80bed2a:	e002      	b.n	80bed32 <vl53l5_platform_init+0xca>
 80bed2c:	bf00      	nop
 80bed2e:	e000      	b.n	80bed32 <vl53l5_platform_init+0xca>
 80bed30:	bf00      	nop
 80bed32:	68fb      	ldr	r3, [r7, #12]
 80bed34:	4618      	mov	r0, r3
 80bed36:	3710      	adds	r7, #16
 80bed38:	46bd      	mov	sp, r7
 80bed3a:	bd80      	pop	{r7, pc}

080bed3c <vl53l5_platform_terminate>:
 80bed3c:	b580      	push	{r7, lr}
 80bed3e:	b084      	sub	sp, #16
 80bed40:	af00      	add	r7, sp, #0
 80bed42:	6078      	str	r0, [r7, #4]
 80bed44:	2300      	movs	r3, #0
 80bed46:	60fb      	str	r3, [r7, #12]
 80bed48:	2100      	movs	r1, #0
 80bed4a:	6878      	ldr	r0, [r7, #4]
 80bed4c:	f7ff ff3d 	bl	80bebca <vl53l5_gpio_power_enable>
 80bed50:	60f8      	str	r0, [r7, #12]
 80bed52:	68fb      	ldr	r3, [r7, #12]
 80bed54:	2b00      	cmp	r3, #0
 80bed56:	d106      	bne.n	80bed66 <vl53l5_platform_terminate+0x2a>
 80bed58:	6878      	ldr	r0, [r7, #4]
 80bed5a:	f7ff fe9f 	bl	80bea9c <vl53l5_comms_close>
 80bed5e:	60f8      	str	r0, [r7, #12]
 80bed60:	68fb      	ldr	r3, [r7, #12]
 80bed62:	2b00      	cmp	r3, #0
 80bed64:	e000      	b.n	80bed68 <vl53l5_platform_terminate+0x2c>
 80bed66:	bf00      	nop
 80bed68:	68fb      	ldr	r3, [r7, #12]
 80bed6a:	4618      	mov	r0, r3
 80bed6c:	3710      	adds	r7, #16
 80bed6e:	46bd      	mov	sp, r7
 80bed70:	bd80      	pop	{r7, pc}

080bed72 <_decode_cal_grp_ref_spad_info>:
 80bed72:	b580      	push	{r7, lr}
 80bed74:	b088      	sub	sp, #32
 80bed76:	af00      	add	r7, sp, #0
 80bed78:	60f8      	str	r0, [r7, #12]
 80bed7a:	60b9      	str	r1, [r7, #8]
 80bed7c:	607a      	str	r2, [r7, #4]
 80bed7e:	2300      	movs	r3, #0
 80bed80:	61fb      	str	r3, [r7, #28]
 80bed82:	2300      	movs	r3, #0
 80bed84:	61bb      	str	r3, [r7, #24]
 80bed86:	68bb      	ldr	r3, [r7, #8]
 80bed88:	617b      	str	r3, [r7, #20]
 80bed8a:	68fb      	ldr	r3, [r7, #12]
 80bed8c:	2b08      	cmp	r3, #8
 80bed8e:	d903      	bls.n	80bed98 <_decode_cal_grp_ref_spad_info+0x26>
 80bed90:	f06f 0304 	mvn.w	r3, #4
 80bed94:	61fb      	str	r3, [r7, #28]
 80bed96:	e078      	b.n	80bee8a <_decode_cal_grp_ref_spad_info+0x118>
 80bed98:	6979      	ldr	r1, [r7, #20]
 80bed9a:	2001      	movs	r0, #1
 80bed9c:	f7fe ffcd 	bl	80bdd3a <vl53l5_decode_uint8_t>
 80beda0:	4603      	mov	r3, r0
 80beda2:	461a      	mov	r2, r3
 80beda4:	687b      	ldr	r3, [r7, #4]
 80beda6:	701a      	strb	r2, [r3, #0]
 80beda8:	697b      	ldr	r3, [r7, #20]
 80bedaa:	3301      	adds	r3, #1
 80bedac:	617b      	str	r3, [r7, #20]
 80bedae:	69bb      	ldr	r3, [r7, #24]
 80bedb0:	3301      	adds	r3, #1
 80bedb2:	61bb      	str	r3, [r7, #24]
 80bedb4:	6979      	ldr	r1, [r7, #20]
 80bedb6:	2001      	movs	r0, #1
 80bedb8:	f7fe ffbf 	bl	80bdd3a <vl53l5_decode_uint8_t>
 80bedbc:	4603      	mov	r3, r0
 80bedbe:	461a      	mov	r2, r3
 80bedc0:	687b      	ldr	r3, [r7, #4]
 80bedc2:	705a      	strb	r2, [r3, #1]
 80bedc4:	697b      	ldr	r3, [r7, #20]
 80bedc6:	3301      	adds	r3, #1
 80bedc8:	617b      	str	r3, [r7, #20]
 80bedca:	69bb      	ldr	r3, [r7, #24]
 80bedcc:	3301      	adds	r3, #1
 80bedce:	61bb      	str	r3, [r7, #24]
 80bedd0:	6979      	ldr	r1, [r7, #20]
 80bedd2:	2001      	movs	r0, #1
 80bedd4:	f7fe ffb1 	bl	80bdd3a <vl53l5_decode_uint8_t>
 80bedd8:	4603      	mov	r3, r0
 80bedda:	461a      	mov	r2, r3
 80beddc:	687b      	ldr	r3, [r7, #4]
 80bedde:	709a      	strb	r2, [r3, #2]
 80bede0:	697b      	ldr	r3, [r7, #20]
 80bede2:	3301      	adds	r3, #1
 80bede4:	617b      	str	r3, [r7, #20]
 80bede6:	69bb      	ldr	r3, [r7, #24]
 80bede8:	3301      	adds	r3, #1
 80bedea:	61bb      	str	r3, [r7, #24]
 80bedec:	6979      	ldr	r1, [r7, #20]
 80bedee:	2001      	movs	r0, #1
 80bedf0:	f7fe ffa3 	bl	80bdd3a <vl53l5_decode_uint8_t>
 80bedf4:	4603      	mov	r3, r0
 80bedf6:	461a      	mov	r2, r3
 80bedf8:	687b      	ldr	r3, [r7, #4]
 80bedfa:	70da      	strb	r2, [r3, #3]
 80bedfc:	697b      	ldr	r3, [r7, #20]
 80bedfe:	3301      	adds	r3, #1
 80bee00:	617b      	str	r3, [r7, #20]
 80bee02:	69bb      	ldr	r3, [r7, #24]
 80bee04:	3301      	adds	r3, #1
 80bee06:	61bb      	str	r3, [r7, #24]
 80bee08:	6979      	ldr	r1, [r7, #20]
 80bee0a:	2001      	movs	r0, #1
 80bee0c:	f7fe ff95 	bl	80bdd3a <vl53l5_decode_uint8_t>
 80bee10:	4603      	mov	r3, r0
 80bee12:	461a      	mov	r2, r3
 80bee14:	687b      	ldr	r3, [r7, #4]
 80bee16:	711a      	strb	r2, [r3, #4]
 80bee18:	697b      	ldr	r3, [r7, #20]
 80bee1a:	3301      	adds	r3, #1
 80bee1c:	617b      	str	r3, [r7, #20]
 80bee1e:	69bb      	ldr	r3, [r7, #24]
 80bee20:	3301      	adds	r3, #1
 80bee22:	61bb      	str	r3, [r7, #24]
 80bee24:	6979      	ldr	r1, [r7, #20]
 80bee26:	2001      	movs	r0, #1
 80bee28:	f7fe ff87 	bl	80bdd3a <vl53l5_decode_uint8_t>
 80bee2c:	4603      	mov	r3, r0
 80bee2e:	461a      	mov	r2, r3
 80bee30:	687b      	ldr	r3, [r7, #4]
 80bee32:	715a      	strb	r2, [r3, #5]
 80bee34:	697b      	ldr	r3, [r7, #20]
 80bee36:	3301      	adds	r3, #1
 80bee38:	617b      	str	r3, [r7, #20]
 80bee3a:	69bb      	ldr	r3, [r7, #24]
 80bee3c:	3301      	adds	r3, #1
 80bee3e:	61bb      	str	r3, [r7, #24]
 80bee40:	6979      	ldr	r1, [r7, #20]
 80bee42:	2001      	movs	r0, #1
 80bee44:	f7fe ff79 	bl	80bdd3a <vl53l5_decode_uint8_t>
 80bee48:	4603      	mov	r3, r0
 80bee4a:	461a      	mov	r2, r3
 80bee4c:	687b      	ldr	r3, [r7, #4]
 80bee4e:	719a      	strb	r2, [r3, #6]
 80bee50:	697b      	ldr	r3, [r7, #20]
 80bee52:	3301      	adds	r3, #1
 80bee54:	617b      	str	r3, [r7, #20]
 80bee56:	69bb      	ldr	r3, [r7, #24]
 80bee58:	3301      	adds	r3, #1
 80bee5a:	61bb      	str	r3, [r7, #24]
 80bee5c:	6979      	ldr	r1, [r7, #20]
 80bee5e:	2001      	movs	r0, #1
 80bee60:	f7fe ff6b 	bl	80bdd3a <vl53l5_decode_uint8_t>
 80bee64:	4603      	mov	r3, r0
 80bee66:	461a      	mov	r2, r3
 80bee68:	687b      	ldr	r3, [r7, #4]
 80bee6a:	71da      	strb	r2, [r3, #7]
 80bee6c:	697b      	ldr	r3, [r7, #20]
 80bee6e:	3301      	adds	r3, #1
 80bee70:	617b      	str	r3, [r7, #20]
 80bee72:	69bb      	ldr	r3, [r7, #24]
 80bee74:	3301      	adds	r3, #1
 80bee76:	61bb      	str	r3, [r7, #24]
 80bee78:	68fa      	ldr	r2, [r7, #12]
 80bee7a:	69bb      	ldr	r3, [r7, #24]
 80bee7c:	429a      	cmp	r2, r3
 80bee7e:	d003      	beq.n	80bee88 <_decode_cal_grp_ref_spad_info+0x116>
 80bee80:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 80bee84:	61fb      	str	r3, [r7, #28]
 80bee86:	e000      	b.n	80bee8a <_decode_cal_grp_ref_spad_info+0x118>
 80bee88:	bf00      	nop
 80bee8a:	69fb      	ldr	r3, [r7, #28]
 80bee8c:	4618      	mov	r0, r3
 80bee8e:	3720      	adds	r7, #32
 80bee90:	46bd      	mov	sp, r7
 80bee92:	bd80      	pop	{r7, pc}

080bee94 <_decode_cal_grp_grid_meta>:
 80bee94:	b580      	push	{r7, lr}
 80bee96:	b088      	sub	sp, #32
 80bee98:	af00      	add	r7, sp, #0
 80bee9a:	60f8      	str	r0, [r7, #12]
 80bee9c:	60b9      	str	r1, [r7, #8]
 80bee9e:	607a      	str	r2, [r7, #4]
 80beea0:	2300      	movs	r3, #0
 80beea2:	61fb      	str	r3, [r7, #28]
 80beea4:	2300      	movs	r3, #0
 80beea6:	61bb      	str	r3, [r7, #24]
 80beea8:	68bb      	ldr	r3, [r7, #8]
 80beeaa:	617b      	str	r3, [r7, #20]
 80beeac:	68fb      	ldr	r3, [r7, #12]
 80beeae:	2b0c      	cmp	r3, #12
 80beeb0:	d903      	bls.n	80beeba <_decode_cal_grp_grid_meta+0x26>
 80beeb2:	f06f 0304 	mvn.w	r3, #4
 80beeb6:	61fb      	str	r3, [r7, #28]
 80beeb8:	e094      	b.n	80befe4 <_decode_cal_grp_grid_meta+0x150>
 80beeba:	6979      	ldr	r1, [r7, #20]
 80beebc:	2002      	movs	r0, #2
 80beebe:	f7fe ff79 	bl	80bddb4 <vl53l5_decode_int16_t>
 80beec2:	4603      	mov	r3, r0
 80beec4:	461a      	mov	r2, r3
 80beec6:	687b      	ldr	r3, [r7, #4]
 80beec8:	801a      	strh	r2, [r3, #0]
 80beeca:	697b      	ldr	r3, [r7, #20]
 80beecc:	3302      	adds	r3, #2
 80beece:	617b      	str	r3, [r7, #20]
 80beed0:	69bb      	ldr	r3, [r7, #24]
 80beed2:	3302      	adds	r3, #2
 80beed4:	61bb      	str	r3, [r7, #24]
 80beed6:	6979      	ldr	r1, [r7, #20]
 80beed8:	2002      	movs	r0, #2
 80beeda:	f7fe ff4b 	bl	80bdd74 <vl53l5_decode_uint16_t>
 80beede:	4603      	mov	r3, r0
 80beee0:	461a      	mov	r2, r3
 80beee2:	687b      	ldr	r3, [r7, #4]
 80beee4:	805a      	strh	r2, [r3, #2]
 80beee6:	697b      	ldr	r3, [r7, #20]
 80beee8:	3302      	adds	r3, #2
 80beeea:	617b      	str	r3, [r7, #20]
 80beeec:	69bb      	ldr	r3, [r7, #24]
 80beeee:	3302      	adds	r3, #2
 80beef0:	61bb      	str	r3, [r7, #24]
 80beef2:	6979      	ldr	r1, [r7, #20]
 80beef4:	2001      	movs	r0, #1
 80beef6:	f7fe ff2e 	bl	80bdd56 <vl53l5_decode_int8_t>
 80beefa:	4603      	mov	r3, r0
 80beefc:	461a      	mov	r2, r3
 80beefe:	687b      	ldr	r3, [r7, #4]
 80bef00:	711a      	strb	r2, [r3, #4]
 80bef02:	697b      	ldr	r3, [r7, #20]
 80bef04:	3301      	adds	r3, #1
 80bef06:	617b      	str	r3, [r7, #20]
 80bef08:	69bb      	ldr	r3, [r7, #24]
 80bef0a:	3301      	adds	r3, #1
 80bef0c:	61bb      	str	r3, [r7, #24]
 80bef0e:	6979      	ldr	r1, [r7, #20]
 80bef10:	2001      	movs	r0, #1
 80bef12:	f7fe ff12 	bl	80bdd3a <vl53l5_decode_uint8_t>
 80bef16:	4603      	mov	r3, r0
 80bef18:	461a      	mov	r2, r3
 80bef1a:	687b      	ldr	r3, [r7, #4]
 80bef1c:	715a      	strb	r2, [r3, #5]
 80bef1e:	697b      	ldr	r3, [r7, #20]
 80bef20:	3301      	adds	r3, #1
 80bef22:	617b      	str	r3, [r7, #20]
 80bef24:	69bb      	ldr	r3, [r7, #24]
 80bef26:	3301      	adds	r3, #1
 80bef28:	61bb      	str	r3, [r7, #24]
 80bef2a:	6979      	ldr	r1, [r7, #20]
 80bef2c:	2001      	movs	r0, #1
 80bef2e:	f7fe ff04 	bl	80bdd3a <vl53l5_decode_uint8_t>
 80bef32:	4603      	mov	r3, r0
 80bef34:	461a      	mov	r2, r3
 80bef36:	687b      	ldr	r3, [r7, #4]
 80bef38:	719a      	strb	r2, [r3, #6]
 80bef3a:	697b      	ldr	r3, [r7, #20]
 80bef3c:	3301      	adds	r3, #1
 80bef3e:	617b      	str	r3, [r7, #20]
 80bef40:	69bb      	ldr	r3, [r7, #24]
 80bef42:	3301      	adds	r3, #1
 80bef44:	61bb      	str	r3, [r7, #24]
 80bef46:	6979      	ldr	r1, [r7, #20]
 80bef48:	2001      	movs	r0, #1
 80bef4a:	f7fe fef6 	bl	80bdd3a <vl53l5_decode_uint8_t>
 80bef4e:	4603      	mov	r3, r0
 80bef50:	461a      	mov	r2, r3
 80bef52:	687b      	ldr	r3, [r7, #4]
 80bef54:	71da      	strb	r2, [r3, #7]
 80bef56:	697b      	ldr	r3, [r7, #20]
 80bef58:	3301      	adds	r3, #1
 80bef5a:	617b      	str	r3, [r7, #20]
 80bef5c:	69bb      	ldr	r3, [r7, #24]
 80bef5e:	3301      	adds	r3, #1
 80bef60:	61bb      	str	r3, [r7, #24]
 80bef62:	6979      	ldr	r1, [r7, #20]
 80bef64:	2001      	movs	r0, #1
 80bef66:	f7fe fee8 	bl	80bdd3a <vl53l5_decode_uint8_t>
 80bef6a:	4603      	mov	r3, r0
 80bef6c:	461a      	mov	r2, r3
 80bef6e:	687b      	ldr	r3, [r7, #4]
 80bef70:	721a      	strb	r2, [r3, #8]
 80bef72:	697b      	ldr	r3, [r7, #20]
 80bef74:	3301      	adds	r3, #1
 80bef76:	617b      	str	r3, [r7, #20]
 80bef78:	69bb      	ldr	r3, [r7, #24]
 80bef7a:	3301      	adds	r3, #1
 80bef7c:	61bb      	str	r3, [r7, #24]
 80bef7e:	6979      	ldr	r1, [r7, #20]
 80bef80:	2001      	movs	r0, #1
 80bef82:	f7fe feda 	bl	80bdd3a <vl53l5_decode_uint8_t>
 80bef86:	4603      	mov	r3, r0
 80bef88:	461a      	mov	r2, r3
 80bef8a:	687b      	ldr	r3, [r7, #4]
 80bef8c:	725a      	strb	r2, [r3, #9]
 80bef8e:	697b      	ldr	r3, [r7, #20]
 80bef90:	3301      	adds	r3, #1
 80bef92:	617b      	str	r3, [r7, #20]
 80bef94:	69bb      	ldr	r3, [r7, #24]
 80bef96:	3301      	adds	r3, #1
 80bef98:	61bb      	str	r3, [r7, #24]
 80bef9a:	6979      	ldr	r1, [r7, #20]
 80bef9c:	2001      	movs	r0, #1
 80bef9e:	f7fe fecc 	bl	80bdd3a <vl53l5_decode_uint8_t>
 80befa2:	4603      	mov	r3, r0
 80befa4:	461a      	mov	r2, r3
 80befa6:	687b      	ldr	r3, [r7, #4]
 80befa8:	729a      	strb	r2, [r3, #10]
 80befaa:	697b      	ldr	r3, [r7, #20]
 80befac:	3301      	adds	r3, #1
 80befae:	617b      	str	r3, [r7, #20]
 80befb0:	69bb      	ldr	r3, [r7, #24]
 80befb2:	3301      	adds	r3, #1
 80befb4:	61bb      	str	r3, [r7, #24]
 80befb6:	6979      	ldr	r1, [r7, #20]
 80befb8:	2001      	movs	r0, #1
 80befba:	f7fe febe 	bl	80bdd3a <vl53l5_decode_uint8_t>
 80befbe:	4603      	mov	r3, r0
 80befc0:	461a      	mov	r2, r3
 80befc2:	687b      	ldr	r3, [r7, #4]
 80befc4:	72da      	strb	r2, [r3, #11]
 80befc6:	697b      	ldr	r3, [r7, #20]
 80befc8:	3301      	adds	r3, #1
 80befca:	617b      	str	r3, [r7, #20]
 80befcc:	69bb      	ldr	r3, [r7, #24]
 80befce:	3301      	adds	r3, #1
 80befd0:	61bb      	str	r3, [r7, #24]
 80befd2:	68fa      	ldr	r2, [r7, #12]
 80befd4:	69bb      	ldr	r3, [r7, #24]
 80befd6:	429a      	cmp	r2, r3
 80befd8:	d003      	beq.n	80befe2 <_decode_cal_grp_grid_meta+0x14e>
 80befda:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 80befde:	61fb      	str	r3, [r7, #28]
 80befe0:	e000      	b.n	80befe4 <_decode_cal_grp_grid_meta+0x150>
 80befe2:	bf00      	nop
 80befe4:	69fb      	ldr	r3, [r7, #28]
 80befe6:	4618      	mov	r0, r3
 80befe8:	3720      	adds	r7, #32
 80befea:	46bd      	mov	sp, r7
 80befec:	bd80      	pop	{r7, pc}

080befee <_decode_cal_grp_phase_stats>:
 80befee:	b580      	push	{r7, lr}
 80beff0:	b088      	sub	sp, #32
 80beff2:	af00      	add	r7, sp, #0
 80beff4:	60f8      	str	r0, [r7, #12]
 80beff6:	60b9      	str	r1, [r7, #8]
 80beff8:	607a      	str	r2, [r7, #4]
 80beffa:	2300      	movs	r3, #0
 80beffc:	61fb      	str	r3, [r7, #28]
 80beffe:	2300      	movs	r3, #0
 80bf000:	61bb      	str	r3, [r7, #24]
 80bf002:	68bb      	ldr	r3, [r7, #8]
 80bf004:	617b      	str	r3, [r7, #20]
 80bf006:	68fb      	ldr	r3, [r7, #12]
 80bf008:	2b14      	cmp	r3, #20
 80bf00a:	d903      	bls.n	80bf014 <_decode_cal_grp_phase_stats+0x26>
 80bf00c:	f06f 0304 	mvn.w	r3, #4
 80bf010:	61fb      	str	r3, [r7, #28]
 80bf012:	e067      	b.n	80bf0e4 <_decode_cal_grp_phase_stats+0xf6>
 80bf014:	6979      	ldr	r1, [r7, #20]
 80bf016:	2004      	movs	r0, #4
 80bf018:	f7fe ff46 	bl	80bdea8 <vl53l5_decode_uint32_t>
 80bf01c:	4602      	mov	r2, r0
 80bf01e:	687b      	ldr	r3, [r7, #4]
 80bf020:	601a      	str	r2, [r3, #0]
 80bf022:	697b      	ldr	r3, [r7, #20]
 80bf024:	3304      	adds	r3, #4
 80bf026:	617b      	str	r3, [r7, #20]
 80bf028:	69bb      	ldr	r3, [r7, #24]
 80bf02a:	3304      	adds	r3, #4
 80bf02c:	61bb      	str	r3, [r7, #24]
 80bf02e:	6979      	ldr	r1, [r7, #20]
 80bf030:	2004      	movs	r0, #4
 80bf032:	f7fe ff39 	bl	80bdea8 <vl53l5_decode_uint32_t>
 80bf036:	4602      	mov	r2, r0
 80bf038:	687b      	ldr	r3, [r7, #4]
 80bf03a:	605a      	str	r2, [r3, #4]
 80bf03c:	697b      	ldr	r3, [r7, #20]
 80bf03e:	3304      	adds	r3, #4
 80bf040:	617b      	str	r3, [r7, #20]
 80bf042:	69bb      	ldr	r3, [r7, #24]
 80bf044:	3304      	adds	r3, #4
 80bf046:	61bb      	str	r3, [r7, #24]
 80bf048:	6979      	ldr	r1, [r7, #20]
 80bf04a:	2004      	movs	r0, #4
 80bf04c:	f7fe ff2c 	bl	80bdea8 <vl53l5_decode_uint32_t>
 80bf050:	4602      	mov	r2, r0
 80bf052:	687b      	ldr	r3, [r7, #4]
 80bf054:	609a      	str	r2, [r3, #8]
 80bf056:	697b      	ldr	r3, [r7, #20]
 80bf058:	3304      	adds	r3, #4
 80bf05a:	617b      	str	r3, [r7, #20]
 80bf05c:	69bb      	ldr	r3, [r7, #24]
 80bf05e:	3304      	adds	r3, #4
 80bf060:	61bb      	str	r3, [r7, #24]
 80bf062:	6979      	ldr	r1, [r7, #20]
 80bf064:	2002      	movs	r0, #2
 80bf066:	f7fe fe85 	bl	80bdd74 <vl53l5_decode_uint16_t>
 80bf06a:	4603      	mov	r3, r0
 80bf06c:	461a      	mov	r2, r3
 80bf06e:	687b      	ldr	r3, [r7, #4]
 80bf070:	819a      	strh	r2, [r3, #12]
 80bf072:	697b      	ldr	r3, [r7, #20]
 80bf074:	3302      	adds	r3, #2
 80bf076:	617b      	str	r3, [r7, #20]
 80bf078:	69bb      	ldr	r3, [r7, #24]
 80bf07a:	3302      	adds	r3, #2
 80bf07c:	61bb      	str	r3, [r7, #24]
 80bf07e:	6979      	ldr	r1, [r7, #20]
 80bf080:	2002      	movs	r0, #2
 80bf082:	f7fe fe77 	bl	80bdd74 <vl53l5_decode_uint16_t>
 80bf086:	4603      	mov	r3, r0
 80bf088:	461a      	mov	r2, r3
 80bf08a:	687b      	ldr	r3, [r7, #4]
 80bf08c:	81da      	strh	r2, [r3, #14]
 80bf08e:	697b      	ldr	r3, [r7, #20]
 80bf090:	3302      	adds	r3, #2
 80bf092:	617b      	str	r3, [r7, #20]
 80bf094:	69bb      	ldr	r3, [r7, #24]
 80bf096:	3302      	adds	r3, #2
 80bf098:	61bb      	str	r3, [r7, #24]
 80bf09a:	6979      	ldr	r1, [r7, #20]
 80bf09c:	2002      	movs	r0, #2
 80bf09e:	f7fe fe69 	bl	80bdd74 <vl53l5_decode_uint16_t>
 80bf0a2:	4603      	mov	r3, r0
 80bf0a4:	461a      	mov	r2, r3
 80bf0a6:	687b      	ldr	r3, [r7, #4]
 80bf0a8:	821a      	strh	r2, [r3, #16]
 80bf0aa:	697b      	ldr	r3, [r7, #20]
 80bf0ac:	3302      	adds	r3, #2
 80bf0ae:	617b      	str	r3, [r7, #20]
 80bf0b0:	69bb      	ldr	r3, [r7, #24]
 80bf0b2:	3302      	adds	r3, #2
 80bf0b4:	61bb      	str	r3, [r7, #24]
 80bf0b6:	6979      	ldr	r1, [r7, #20]
 80bf0b8:	2002      	movs	r0, #2
 80bf0ba:	f7fe fe5b 	bl	80bdd74 <vl53l5_decode_uint16_t>
 80bf0be:	4603      	mov	r3, r0
 80bf0c0:	461a      	mov	r2, r3
 80bf0c2:	687b      	ldr	r3, [r7, #4]
 80bf0c4:	825a      	strh	r2, [r3, #18]
 80bf0c6:	697b      	ldr	r3, [r7, #20]
 80bf0c8:	3302      	adds	r3, #2
 80bf0ca:	617b      	str	r3, [r7, #20]
 80bf0cc:	69bb      	ldr	r3, [r7, #24]
 80bf0ce:	3302      	adds	r3, #2
 80bf0d0:	61bb      	str	r3, [r7, #24]
 80bf0d2:	68fa      	ldr	r2, [r7, #12]
 80bf0d4:	69bb      	ldr	r3, [r7, #24]
 80bf0d6:	429a      	cmp	r2, r3
 80bf0d8:	d003      	beq.n	80bf0e2 <_decode_cal_grp_phase_stats+0xf4>
 80bf0da:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 80bf0de:	61fb      	str	r3, [r7, #28]
 80bf0e0:	e000      	b.n	80bf0e4 <_decode_cal_grp_phase_stats+0xf6>
 80bf0e2:	bf00      	nop
 80bf0e4:	69fb      	ldr	r3, [r7, #28]
 80bf0e6:	4618      	mov	r0, r3
 80bf0e8:	3720      	adds	r7, #32
 80bf0ea:	46bd      	mov	sp, r7
 80bf0ec:	bd80      	pop	{r7, pc}

080bf0ee <_decode_cal_grp_temperature_stats>:
 80bf0ee:	b580      	push	{r7, lr}
 80bf0f0:	b088      	sub	sp, #32
 80bf0f2:	af00      	add	r7, sp, #0
 80bf0f4:	60f8      	str	r0, [r7, #12]
 80bf0f6:	60b9      	str	r1, [r7, #8]
 80bf0f8:	607a      	str	r2, [r7, #4]
 80bf0fa:	2300      	movs	r3, #0
 80bf0fc:	61fb      	str	r3, [r7, #28]
 80bf0fe:	2300      	movs	r3, #0
 80bf100:	61bb      	str	r3, [r7, #24]
 80bf102:	68bb      	ldr	r3, [r7, #8]
 80bf104:	617b      	str	r3, [r7, #20]
 80bf106:	68fb      	ldr	r3, [r7, #12]
 80bf108:	2b04      	cmp	r3, #4
 80bf10a:	d903      	bls.n	80bf114 <_decode_cal_grp_temperature_stats+0x26>
 80bf10c:	f06f 0304 	mvn.w	r3, #4
 80bf110:	61fb      	str	r3, [r7, #28]
 80bf112:	e040      	b.n	80bf196 <_decode_cal_grp_temperature_stats+0xa8>
 80bf114:	6979      	ldr	r1, [r7, #20]
 80bf116:	2001      	movs	r0, #1
 80bf118:	f7fe fe1d 	bl	80bdd56 <vl53l5_decode_int8_t>
 80bf11c:	4603      	mov	r3, r0
 80bf11e:	461a      	mov	r2, r3
 80bf120:	687b      	ldr	r3, [r7, #4]
 80bf122:	701a      	strb	r2, [r3, #0]
 80bf124:	697b      	ldr	r3, [r7, #20]
 80bf126:	3301      	adds	r3, #1
 80bf128:	617b      	str	r3, [r7, #20]
 80bf12a:	69bb      	ldr	r3, [r7, #24]
 80bf12c:	3301      	adds	r3, #1
 80bf12e:	61bb      	str	r3, [r7, #24]
 80bf130:	6979      	ldr	r1, [r7, #20]
 80bf132:	2001      	movs	r0, #1
 80bf134:	f7fe fe0f 	bl	80bdd56 <vl53l5_decode_int8_t>
 80bf138:	4603      	mov	r3, r0
 80bf13a:	461a      	mov	r2, r3
 80bf13c:	687b      	ldr	r3, [r7, #4]
 80bf13e:	705a      	strb	r2, [r3, #1]
 80bf140:	697b      	ldr	r3, [r7, #20]
 80bf142:	3301      	adds	r3, #1
 80bf144:	617b      	str	r3, [r7, #20]
 80bf146:	69bb      	ldr	r3, [r7, #24]
 80bf148:	3301      	adds	r3, #1
 80bf14a:	61bb      	str	r3, [r7, #24]
 80bf14c:	6979      	ldr	r1, [r7, #20]
 80bf14e:	2001      	movs	r0, #1
 80bf150:	f7fe fe01 	bl	80bdd56 <vl53l5_decode_int8_t>
 80bf154:	4603      	mov	r3, r0
 80bf156:	461a      	mov	r2, r3
 80bf158:	687b      	ldr	r3, [r7, #4]
 80bf15a:	709a      	strb	r2, [r3, #2]
 80bf15c:	697b      	ldr	r3, [r7, #20]
 80bf15e:	3301      	adds	r3, #1
 80bf160:	617b      	str	r3, [r7, #20]
 80bf162:	69bb      	ldr	r3, [r7, #24]
 80bf164:	3301      	adds	r3, #1
 80bf166:	61bb      	str	r3, [r7, #24]
 80bf168:	6979      	ldr	r1, [r7, #20]
 80bf16a:	2001      	movs	r0, #1
 80bf16c:	f7fe fdf3 	bl	80bdd56 <vl53l5_decode_int8_t>
 80bf170:	4603      	mov	r3, r0
 80bf172:	461a      	mov	r2, r3
 80bf174:	687b      	ldr	r3, [r7, #4]
 80bf176:	70da      	strb	r2, [r3, #3]
 80bf178:	697b      	ldr	r3, [r7, #20]
 80bf17a:	3301      	adds	r3, #1
 80bf17c:	617b      	str	r3, [r7, #20]
 80bf17e:	69bb      	ldr	r3, [r7, #24]
 80bf180:	3301      	adds	r3, #1
 80bf182:	61bb      	str	r3, [r7, #24]
 80bf184:	68fa      	ldr	r2, [r7, #12]
 80bf186:	69bb      	ldr	r3, [r7, #24]
 80bf188:	429a      	cmp	r2, r3
 80bf18a:	d003      	beq.n	80bf194 <_decode_cal_grp_temperature_stats+0xa6>
 80bf18c:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 80bf190:	61fb      	str	r3, [r7, #28]
 80bf192:	e000      	b.n	80bf196 <_decode_cal_grp_temperature_stats+0xa8>
 80bf194:	bf00      	nop
 80bf196:	69fb      	ldr	r3, [r7, #28]
 80bf198:	4618      	mov	r0, r3
 80bf19a:	3720      	adds	r7, #32
 80bf19c:	46bd      	mov	sp, r7
 80bf19e:	bd80      	pop	{r7, pc}

080bf1a0 <_decode_cggdrkps_cal_grid_data_rate_kcps_per_spad>:
 80bf1a0:	b580      	push	{r7, lr}
 80bf1a2:	b088      	sub	sp, #32
 80bf1a4:	af00      	add	r7, sp, #0
 80bf1a6:	60f8      	str	r0, [r7, #12]
 80bf1a8:	60b9      	str	r1, [r7, #8]
 80bf1aa:	607a      	str	r2, [r7, #4]
 80bf1ac:	2300      	movs	r3, #0
 80bf1ae:	61fb      	str	r3, [r7, #28]
 80bf1b0:	2300      	movs	r3, #0
 80bf1b2:	61bb      	str	r3, [r7, #24]
 80bf1b4:	68bb      	ldr	r3, [r7, #8]
 80bf1b6:	617b      	str	r3, [r7, #20]
 80bf1b8:	2300      	movs	r3, #0
 80bf1ba:	613b      	str	r3, [r7, #16]
 80bf1bc:	68fb      	ldr	r3, [r7, #12]
 80bf1be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80bf1c2:	d915      	bls.n	80bf1f0 <_decode_cggdrkps_cal_grid_data_rate_kcps_per_spad+0x50>
 80bf1c4:	f06f 0304 	mvn.w	r3, #4
 80bf1c8:	61fb      	str	r3, [r7, #28]
 80bf1ca:	e01e      	b.n	80bf20a <_decode_cggdrkps_cal_grid_data_rate_kcps_per_spad+0x6a>
 80bf1cc:	6979      	ldr	r1, [r7, #20]
 80bf1ce:	2004      	movs	r0, #4
 80bf1d0:	f7fe fe6a 	bl	80bdea8 <vl53l5_decode_uint32_t>
 80bf1d4:	4601      	mov	r1, r0
 80bf1d6:	687b      	ldr	r3, [r7, #4]
 80bf1d8:	693a      	ldr	r2, [r7, #16]
 80bf1da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80bf1de:	697b      	ldr	r3, [r7, #20]
 80bf1e0:	3304      	adds	r3, #4
 80bf1e2:	617b      	str	r3, [r7, #20]
 80bf1e4:	69bb      	ldr	r3, [r7, #24]
 80bf1e6:	3304      	adds	r3, #4
 80bf1e8:	61bb      	str	r3, [r7, #24]
 80bf1ea:	693b      	ldr	r3, [r7, #16]
 80bf1ec:	3301      	adds	r3, #1
 80bf1ee:	613b      	str	r3, [r7, #16]
 80bf1f0:	69ba      	ldr	r2, [r7, #24]
 80bf1f2:	68fb      	ldr	r3, [r7, #12]
 80bf1f4:	429a      	cmp	r2, r3
 80bf1f6:	d3e9      	bcc.n	80bf1cc <_decode_cggdrkps_cal_grid_data_rate_kcps_per_spad+0x2c>
 80bf1f8:	68fa      	ldr	r2, [r7, #12]
 80bf1fa:	69bb      	ldr	r3, [r7, #24]
 80bf1fc:	429a      	cmp	r2, r3
 80bf1fe:	d003      	beq.n	80bf208 <_decode_cggdrkps_cal_grid_data_rate_kcps_per_spad+0x68>
 80bf200:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 80bf204:	61fb      	str	r3, [r7, #28]
 80bf206:	e000      	b.n	80bf20a <_decode_cggdrkps_cal_grid_data_rate_kcps_per_spad+0x6a>
 80bf208:	bf00      	nop
 80bf20a:	69fb      	ldr	r3, [r7, #28]
 80bf20c:	4618      	mov	r0, r3
 80bf20e:	3720      	adds	r7, #32
 80bf210:	46bd      	mov	sp, r7
 80bf212:	bd80      	pop	{r7, pc}

080bf214 <_decode_cggdesc_cal_grid_data_effective_spad_count>:
 80bf214:	b580      	push	{r7, lr}
 80bf216:	b088      	sub	sp, #32
 80bf218:	af00      	add	r7, sp, #0
 80bf21a:	60f8      	str	r0, [r7, #12]
 80bf21c:	60b9      	str	r1, [r7, #8]
 80bf21e:	607a      	str	r2, [r7, #4]
 80bf220:	2300      	movs	r3, #0
 80bf222:	61fb      	str	r3, [r7, #28]
 80bf224:	2300      	movs	r3, #0
 80bf226:	61bb      	str	r3, [r7, #24]
 80bf228:	68bb      	ldr	r3, [r7, #8]
 80bf22a:	617b      	str	r3, [r7, #20]
 80bf22c:	2300      	movs	r3, #0
 80bf22e:	613b      	str	r3, [r7, #16]
 80bf230:	68fb      	ldr	r3, [r7, #12]
 80bf232:	2b80      	cmp	r3, #128	; 0x80
 80bf234:	d916      	bls.n	80bf264 <_decode_cggdesc_cal_grid_data_effective_spad_count+0x50>
 80bf236:	f06f 0304 	mvn.w	r3, #4
 80bf23a:	61fb      	str	r3, [r7, #28]
 80bf23c:	e01f      	b.n	80bf27e <_decode_cggdesc_cal_grid_data_effective_spad_count+0x6a>
 80bf23e:	6979      	ldr	r1, [r7, #20]
 80bf240:	2002      	movs	r0, #2
 80bf242:	f7fe fd97 	bl	80bdd74 <vl53l5_decode_uint16_t>
 80bf246:	4603      	mov	r3, r0
 80bf248:	4619      	mov	r1, r3
 80bf24a:	687b      	ldr	r3, [r7, #4]
 80bf24c:	693a      	ldr	r2, [r7, #16]
 80bf24e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80bf252:	697b      	ldr	r3, [r7, #20]
 80bf254:	3302      	adds	r3, #2
 80bf256:	617b      	str	r3, [r7, #20]
 80bf258:	69bb      	ldr	r3, [r7, #24]
 80bf25a:	3302      	adds	r3, #2
 80bf25c:	61bb      	str	r3, [r7, #24]
 80bf25e:	693b      	ldr	r3, [r7, #16]
 80bf260:	3301      	adds	r3, #1
 80bf262:	613b      	str	r3, [r7, #16]
 80bf264:	69ba      	ldr	r2, [r7, #24]
 80bf266:	68fb      	ldr	r3, [r7, #12]
 80bf268:	429a      	cmp	r2, r3
 80bf26a:	d3e8      	bcc.n	80bf23e <_decode_cggdesc_cal_grid_data_effective_spad_count+0x2a>
 80bf26c:	68fa      	ldr	r2, [r7, #12]
 80bf26e:	69bb      	ldr	r3, [r7, #24]
 80bf270:	429a      	cmp	r2, r3
 80bf272:	d003      	beq.n	80bf27c <_decode_cggdesc_cal_grid_data_effective_spad_count+0x68>
 80bf274:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 80bf278:	61fb      	str	r3, [r7, #28]
 80bf27a:	e000      	b.n	80bf27e <_decode_cggdesc_cal_grid_data_effective_spad_count+0x6a>
 80bf27c:	bf00      	nop
 80bf27e:	69fb      	ldr	r3, [r7, #28]
 80bf280:	4618      	mov	r0, r3
 80bf282:	3720      	adds	r7, #32
 80bf284:	46bd      	mov	sp, r7
 80bf286:	bd80      	pop	{r7, pc}

080bf288 <_decode_cal_grp_grid_data_range_mm_cal_grid_data_range_mm>:
 80bf288:	b580      	push	{r7, lr}
 80bf28a:	b088      	sub	sp, #32
 80bf28c:	af00      	add	r7, sp, #0
 80bf28e:	60f8      	str	r0, [r7, #12]
 80bf290:	60b9      	str	r1, [r7, #8]
 80bf292:	607a      	str	r2, [r7, #4]
 80bf294:	2300      	movs	r3, #0
 80bf296:	61fb      	str	r3, [r7, #28]
 80bf298:	2300      	movs	r3, #0
 80bf29a:	61bb      	str	r3, [r7, #24]
 80bf29c:	68bb      	ldr	r3, [r7, #8]
 80bf29e:	617b      	str	r3, [r7, #20]
 80bf2a0:	2300      	movs	r3, #0
 80bf2a2:	613b      	str	r3, [r7, #16]
 80bf2a4:	68fb      	ldr	r3, [r7, #12]
 80bf2a6:	2b80      	cmp	r3, #128	; 0x80
 80bf2a8:	d916      	bls.n	80bf2d8 <_decode_cal_grp_grid_data_range_mm_cal_grid_data_range_mm+0x50>
 80bf2aa:	f06f 0304 	mvn.w	r3, #4
 80bf2ae:	61fb      	str	r3, [r7, #28]
 80bf2b0:	e01f      	b.n	80bf2f2 <_decode_cal_grp_grid_data_range_mm_cal_grid_data_range_mm+0x6a>
 80bf2b2:	6979      	ldr	r1, [r7, #20]
 80bf2b4:	2002      	movs	r0, #2
 80bf2b6:	f7fe fd7d 	bl	80bddb4 <vl53l5_decode_int16_t>
 80bf2ba:	4603      	mov	r3, r0
 80bf2bc:	4619      	mov	r1, r3
 80bf2be:	687b      	ldr	r3, [r7, #4]
 80bf2c0:	693a      	ldr	r2, [r7, #16]
 80bf2c2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80bf2c6:	697b      	ldr	r3, [r7, #20]
 80bf2c8:	3302      	adds	r3, #2
 80bf2ca:	617b      	str	r3, [r7, #20]
 80bf2cc:	69bb      	ldr	r3, [r7, #24]
 80bf2ce:	3302      	adds	r3, #2
 80bf2d0:	61bb      	str	r3, [r7, #24]
 80bf2d2:	693b      	ldr	r3, [r7, #16]
 80bf2d4:	3301      	adds	r3, #1
 80bf2d6:	613b      	str	r3, [r7, #16]
 80bf2d8:	69ba      	ldr	r2, [r7, #24]
 80bf2da:	68fb      	ldr	r3, [r7, #12]
 80bf2dc:	429a      	cmp	r2, r3
 80bf2de:	d3e8      	bcc.n	80bf2b2 <_decode_cal_grp_grid_data_range_mm_cal_grid_data_range_mm+0x2a>
 80bf2e0:	68fa      	ldr	r2, [r7, #12]
 80bf2e2:	69bb      	ldr	r3, [r7, #24]
 80bf2e4:	429a      	cmp	r2, r3
 80bf2e6:	d003      	beq.n	80bf2f0 <_decode_cal_grp_grid_data_range_mm_cal_grid_data_range_mm+0x68>
 80bf2e8:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 80bf2ec:	61fb      	str	r3, [r7, #28]
 80bf2ee:	e000      	b.n	80bf2f2 <_decode_cal_grp_grid_data_range_mm_cal_grid_data_range_mm+0x6a>
 80bf2f0:	bf00      	nop
 80bf2f2:	69fb      	ldr	r3, [r7, #28]
 80bf2f4:	4618      	mov	r0, r3
 80bf2f6:	3720      	adds	r7, #32
 80bf2f8:	46bd      	mov	sp, r7
 80bf2fa:	bd80      	pop	{r7, pc}

080bf2fc <_decode_cal_grp_status>:
 80bf2fc:	b580      	push	{r7, lr}
 80bf2fe:	b088      	sub	sp, #32
 80bf300:	af00      	add	r7, sp, #0
 80bf302:	60f8      	str	r0, [r7, #12]
 80bf304:	60b9      	str	r1, [r7, #8]
 80bf306:	607a      	str	r2, [r7, #4]
 80bf308:	2300      	movs	r3, #0
 80bf30a:	61fb      	str	r3, [r7, #28]
 80bf30c:	2300      	movs	r3, #0
 80bf30e:	61bb      	str	r3, [r7, #24]
 80bf310:	68bb      	ldr	r3, [r7, #8]
 80bf312:	617b      	str	r3, [r7, #20]
 80bf314:	68fb      	ldr	r3, [r7, #12]
 80bf316:	2b10      	cmp	r3, #16
 80bf318:	d903      	bls.n	80bf322 <_decode_cal_grp_status+0x26>
 80bf31a:	f06f 0304 	mvn.w	r3, #4
 80bf31e:	61fb      	str	r3, [r7, #28]
 80bf320:	e03c      	b.n	80bf39c <_decode_cal_grp_status+0xa0>
 80bf322:	6979      	ldr	r1, [r7, #20]
 80bf324:	2004      	movs	r0, #4
 80bf326:	f7fe fd71 	bl	80bde0c <vl53l5_decode_int32_t>
 80bf32a:	4602      	mov	r2, r0
 80bf32c:	687b      	ldr	r3, [r7, #4]
 80bf32e:	601a      	str	r2, [r3, #0]
 80bf330:	697b      	ldr	r3, [r7, #20]
 80bf332:	3304      	adds	r3, #4
 80bf334:	617b      	str	r3, [r7, #20]
 80bf336:	69bb      	ldr	r3, [r7, #24]
 80bf338:	3304      	adds	r3, #4
 80bf33a:	61bb      	str	r3, [r7, #24]
 80bf33c:	6979      	ldr	r1, [r7, #20]
 80bf33e:	2004      	movs	r0, #4
 80bf340:	f7fe fd64 	bl	80bde0c <vl53l5_decode_int32_t>
 80bf344:	4602      	mov	r2, r0
 80bf346:	687b      	ldr	r3, [r7, #4]
 80bf348:	605a      	str	r2, [r3, #4]
 80bf34a:	697b      	ldr	r3, [r7, #20]
 80bf34c:	3304      	adds	r3, #4
 80bf34e:	617b      	str	r3, [r7, #20]
 80bf350:	69bb      	ldr	r3, [r7, #24]
 80bf352:	3304      	adds	r3, #4
 80bf354:	61bb      	str	r3, [r7, #24]
 80bf356:	6979      	ldr	r1, [r7, #20]
 80bf358:	2004      	movs	r0, #4
 80bf35a:	f7fe fd57 	bl	80bde0c <vl53l5_decode_int32_t>
 80bf35e:	4602      	mov	r2, r0
 80bf360:	687b      	ldr	r3, [r7, #4]
 80bf362:	609a      	str	r2, [r3, #8]
 80bf364:	697b      	ldr	r3, [r7, #20]
 80bf366:	3304      	adds	r3, #4
 80bf368:	617b      	str	r3, [r7, #20]
 80bf36a:	69bb      	ldr	r3, [r7, #24]
 80bf36c:	3304      	adds	r3, #4
 80bf36e:	61bb      	str	r3, [r7, #24]
 80bf370:	6979      	ldr	r1, [r7, #20]
 80bf372:	2004      	movs	r0, #4
 80bf374:	f7fe fd4a 	bl	80bde0c <vl53l5_decode_int32_t>
 80bf378:	4602      	mov	r2, r0
 80bf37a:	687b      	ldr	r3, [r7, #4]
 80bf37c:	60da      	str	r2, [r3, #12]
 80bf37e:	697b      	ldr	r3, [r7, #20]
 80bf380:	3304      	adds	r3, #4
 80bf382:	617b      	str	r3, [r7, #20]
 80bf384:	69bb      	ldr	r3, [r7, #24]
 80bf386:	3304      	adds	r3, #4
 80bf388:	61bb      	str	r3, [r7, #24]
 80bf38a:	68fa      	ldr	r2, [r7, #12]
 80bf38c:	69bb      	ldr	r3, [r7, #24]
 80bf38e:	429a      	cmp	r2, r3
 80bf390:	d003      	beq.n	80bf39a <_decode_cal_grp_status+0x9e>
 80bf392:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 80bf396:	61fb      	str	r3, [r7, #28]
 80bf398:	e000      	b.n	80bf39c <_decode_cal_grp_status+0xa0>
 80bf39a:	bf00      	nop
 80bf39c:	69fb      	ldr	r3, [r7, #28]
 80bf39e:	4618      	mov	r0, r3
 80bf3a0:	3720      	adds	r7, #32
 80bf3a2:	46bd      	mov	sp, r7
 80bf3a4:	bd80      	pop	{r7, pc}

080bf3a6 <_decode_cal_grp_xtalk_shape_meta>:
 80bf3a6:	b580      	push	{r7, lr}
 80bf3a8:	b088      	sub	sp, #32
 80bf3aa:	af00      	add	r7, sp, #0
 80bf3ac:	60f8      	str	r0, [r7, #12]
 80bf3ae:	60b9      	str	r1, [r7, #8]
 80bf3b0:	607a      	str	r2, [r7, #4]
 80bf3b2:	2300      	movs	r3, #0
 80bf3b4:	61fb      	str	r3, [r7, #28]
 80bf3b6:	2300      	movs	r3, #0
 80bf3b8:	61bb      	str	r3, [r7, #24]
 80bf3ba:	68bb      	ldr	r3, [r7, #8]
 80bf3bc:	617b      	str	r3, [r7, #20]
 80bf3be:	68fb      	ldr	r3, [r7, #12]
 80bf3c0:	2b0c      	cmp	r3, #12
 80bf3c2:	d903      	bls.n	80bf3cc <_decode_cal_grp_xtalk_shape_meta+0x26>
 80bf3c4:	f06f 0304 	mvn.w	r3, #4
 80bf3c8:	61fb      	str	r3, [r7, #28]
 80bf3ca:	e077      	b.n	80bf4bc <_decode_cal_grp_xtalk_shape_meta+0x116>
 80bf3cc:	6979      	ldr	r1, [r7, #20]
 80bf3ce:	2004      	movs	r0, #4
 80bf3d0:	f7fe fd6a 	bl	80bdea8 <vl53l5_decode_uint32_t>
 80bf3d4:	4602      	mov	r2, r0
 80bf3d6:	687b      	ldr	r3, [r7, #4]
 80bf3d8:	601a      	str	r2, [r3, #0]
 80bf3da:	697b      	ldr	r3, [r7, #20]
 80bf3dc:	3304      	adds	r3, #4
 80bf3de:	617b      	str	r3, [r7, #20]
 80bf3e0:	69bb      	ldr	r3, [r7, #24]
 80bf3e2:	3304      	adds	r3, #4
 80bf3e4:	61bb      	str	r3, [r7, #24]
 80bf3e6:	6979      	ldr	r1, [r7, #20]
 80bf3e8:	2002      	movs	r0, #2
 80bf3ea:	f7fe fcc3 	bl	80bdd74 <vl53l5_decode_uint16_t>
 80bf3ee:	4603      	mov	r3, r0
 80bf3f0:	461a      	mov	r2, r3
 80bf3f2:	687b      	ldr	r3, [r7, #4]
 80bf3f4:	809a      	strh	r2, [r3, #4]
 80bf3f6:	697b      	ldr	r3, [r7, #20]
 80bf3f8:	3302      	adds	r3, #2
 80bf3fa:	617b      	str	r3, [r7, #20]
 80bf3fc:	69bb      	ldr	r3, [r7, #24]
 80bf3fe:	3302      	adds	r3, #2
 80bf400:	61bb      	str	r3, [r7, #24]
 80bf402:	6979      	ldr	r1, [r7, #20]
 80bf404:	2001      	movs	r0, #1
 80bf406:	f7fe fc98 	bl	80bdd3a <vl53l5_decode_uint8_t>
 80bf40a:	4603      	mov	r3, r0
 80bf40c:	461a      	mov	r2, r3
 80bf40e:	687b      	ldr	r3, [r7, #4]
 80bf410:	719a      	strb	r2, [r3, #6]
 80bf412:	697b      	ldr	r3, [r7, #20]
 80bf414:	3301      	adds	r3, #1
 80bf416:	617b      	str	r3, [r7, #20]
 80bf418:	69bb      	ldr	r3, [r7, #24]
 80bf41a:	3301      	adds	r3, #1
 80bf41c:	61bb      	str	r3, [r7, #24]
 80bf41e:	6979      	ldr	r1, [r7, #20]
 80bf420:	2001      	movs	r0, #1
 80bf422:	f7fe fc8a 	bl	80bdd3a <vl53l5_decode_uint8_t>
 80bf426:	4603      	mov	r3, r0
 80bf428:	461a      	mov	r2, r3
 80bf42a:	687b      	ldr	r3, [r7, #4]
 80bf42c:	71da      	strb	r2, [r3, #7]
 80bf42e:	697b      	ldr	r3, [r7, #20]
 80bf430:	3301      	adds	r3, #1
 80bf432:	617b      	str	r3, [r7, #20]
 80bf434:	69bb      	ldr	r3, [r7, #24]
 80bf436:	3301      	adds	r3, #1
 80bf438:	61bb      	str	r3, [r7, #24]
 80bf43a:	6979      	ldr	r1, [r7, #20]
 80bf43c:	2001      	movs	r0, #1
 80bf43e:	f7fe fc8a 	bl	80bdd56 <vl53l5_decode_int8_t>
 80bf442:	4603      	mov	r3, r0
 80bf444:	461a      	mov	r2, r3
 80bf446:	687b      	ldr	r3, [r7, #4]
 80bf448:	721a      	strb	r2, [r3, #8]
 80bf44a:	697b      	ldr	r3, [r7, #20]
 80bf44c:	3301      	adds	r3, #1
 80bf44e:	617b      	str	r3, [r7, #20]
 80bf450:	69bb      	ldr	r3, [r7, #24]
 80bf452:	3301      	adds	r3, #1
 80bf454:	61bb      	str	r3, [r7, #24]
 80bf456:	6979      	ldr	r1, [r7, #20]
 80bf458:	2001      	movs	r0, #1
 80bf45a:	f7fe fc6e 	bl	80bdd3a <vl53l5_decode_uint8_t>
 80bf45e:	4603      	mov	r3, r0
 80bf460:	461a      	mov	r2, r3
 80bf462:	687b      	ldr	r3, [r7, #4]
 80bf464:	725a      	strb	r2, [r3, #9]
 80bf466:	697b      	ldr	r3, [r7, #20]
 80bf468:	3301      	adds	r3, #1
 80bf46a:	617b      	str	r3, [r7, #20]
 80bf46c:	69bb      	ldr	r3, [r7, #24]
 80bf46e:	3301      	adds	r3, #1
 80bf470:	61bb      	str	r3, [r7, #24]
 80bf472:	6979      	ldr	r1, [r7, #20]
 80bf474:	2001      	movs	r0, #1
 80bf476:	f7fe fc60 	bl	80bdd3a <vl53l5_decode_uint8_t>
 80bf47a:	4603      	mov	r3, r0
 80bf47c:	461a      	mov	r2, r3
 80bf47e:	687b      	ldr	r3, [r7, #4]
 80bf480:	729a      	strb	r2, [r3, #10]
 80bf482:	697b      	ldr	r3, [r7, #20]
 80bf484:	3301      	adds	r3, #1
 80bf486:	617b      	str	r3, [r7, #20]
 80bf488:	69bb      	ldr	r3, [r7, #24]
 80bf48a:	3301      	adds	r3, #1
 80bf48c:	61bb      	str	r3, [r7, #24]
 80bf48e:	6979      	ldr	r1, [r7, #20]
 80bf490:	2001      	movs	r0, #1
 80bf492:	f7fe fc52 	bl	80bdd3a <vl53l5_decode_uint8_t>
 80bf496:	4603      	mov	r3, r0
 80bf498:	461a      	mov	r2, r3
 80bf49a:	687b      	ldr	r3, [r7, #4]
 80bf49c:	72da      	strb	r2, [r3, #11]
 80bf49e:	697b      	ldr	r3, [r7, #20]
 80bf4a0:	3301      	adds	r3, #1
 80bf4a2:	617b      	str	r3, [r7, #20]
 80bf4a4:	69bb      	ldr	r3, [r7, #24]
 80bf4a6:	3301      	adds	r3, #1
 80bf4a8:	61bb      	str	r3, [r7, #24]
 80bf4aa:	68fa      	ldr	r2, [r7, #12]
 80bf4ac:	69bb      	ldr	r3, [r7, #24]
 80bf4ae:	429a      	cmp	r2, r3
 80bf4b0:	d003      	beq.n	80bf4ba <_decode_cal_grp_xtalk_shape_meta+0x114>
 80bf4b2:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 80bf4b6:	61fb      	str	r3, [r7, #28]
 80bf4b8:	e000      	b.n	80bf4bc <_decode_cal_grp_xtalk_shape_meta+0x116>
 80bf4ba:	bf00      	nop
 80bf4bc:	69fb      	ldr	r3, [r7, #28]
 80bf4be:	4618      	mov	r0, r3
 80bf4c0:	3720      	adds	r7, #32
 80bf4c2:	46bd      	mov	sp, r7
 80bf4c4:	bd80      	pop	{r7, pc}

080bf4c6 <_decode_cal_grp_xtalk_shape_data_cal_xtalk_shape_bin_data>:
 80bf4c6:	b580      	push	{r7, lr}
 80bf4c8:	b088      	sub	sp, #32
 80bf4ca:	af00      	add	r7, sp, #0
 80bf4cc:	60f8      	str	r0, [r7, #12]
 80bf4ce:	60b9      	str	r1, [r7, #8]
 80bf4d0:	607a      	str	r2, [r7, #4]
 80bf4d2:	2300      	movs	r3, #0
 80bf4d4:	61fb      	str	r3, [r7, #28]
 80bf4d6:	2300      	movs	r3, #0
 80bf4d8:	61bb      	str	r3, [r7, #24]
 80bf4da:	68bb      	ldr	r3, [r7, #8]
 80bf4dc:	617b      	str	r3, [r7, #20]
 80bf4de:	2300      	movs	r3, #0
 80bf4e0:	613b      	str	r3, [r7, #16]
 80bf4e2:	68fb      	ldr	r3, [r7, #12]
 80bf4e4:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 80bf4e8:	d916      	bls.n	80bf518 <_decode_cal_grp_xtalk_shape_data_cal_xtalk_shape_bin_data+0x52>
 80bf4ea:	f06f 0304 	mvn.w	r3, #4
 80bf4ee:	61fb      	str	r3, [r7, #28]
 80bf4f0:	e01f      	b.n	80bf532 <_decode_cal_grp_xtalk_shape_data_cal_xtalk_shape_bin_data+0x6c>
 80bf4f2:	6979      	ldr	r1, [r7, #20]
 80bf4f4:	2002      	movs	r0, #2
 80bf4f6:	f7fe fc3d 	bl	80bdd74 <vl53l5_decode_uint16_t>
 80bf4fa:	4603      	mov	r3, r0
 80bf4fc:	4619      	mov	r1, r3
 80bf4fe:	687b      	ldr	r3, [r7, #4]
 80bf500:	693a      	ldr	r2, [r7, #16]
 80bf502:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80bf506:	697b      	ldr	r3, [r7, #20]
 80bf508:	3302      	adds	r3, #2
 80bf50a:	617b      	str	r3, [r7, #20]
 80bf50c:	69bb      	ldr	r3, [r7, #24]
 80bf50e:	3302      	adds	r3, #2
 80bf510:	61bb      	str	r3, [r7, #24]
 80bf512:	693b      	ldr	r3, [r7, #16]
 80bf514:	3301      	adds	r3, #1
 80bf516:	613b      	str	r3, [r7, #16]
 80bf518:	69ba      	ldr	r2, [r7, #24]
 80bf51a:	68fb      	ldr	r3, [r7, #12]
 80bf51c:	429a      	cmp	r2, r3
 80bf51e:	d3e8      	bcc.n	80bf4f2 <_decode_cal_grp_xtalk_shape_data_cal_xtalk_shape_bin_data+0x2c>
 80bf520:	68fa      	ldr	r2, [r7, #12]
 80bf522:	69bb      	ldr	r3, [r7, #24]
 80bf524:	429a      	cmp	r2, r3
 80bf526:	d003      	beq.n	80bf530 <_decode_cal_grp_xtalk_shape_data_cal_xtalk_shape_bin_data+0x6a>
 80bf528:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 80bf52c:	61fb      	str	r3, [r7, #28]
 80bf52e:	e000      	b.n	80bf532 <_decode_cal_grp_xtalk_shape_data_cal_xtalk_shape_bin_data+0x6c>
 80bf530:	bf00      	nop
 80bf532:	69fb      	ldr	r3, [r7, #28]
 80bf534:	4618      	mov	r0, r3
 80bf536:	3720      	adds	r7, #32
 80bf538:	46bd      	mov	sp, r7
 80bf53a:	bd80      	pop	{r7, pc}

080bf53c <_decode_cal_grp_xtalk_mon_meta_data>:
 80bf53c:	b580      	push	{r7, lr}
 80bf53e:	b088      	sub	sp, #32
 80bf540:	af00      	add	r7, sp, #0
 80bf542:	60f8      	str	r0, [r7, #12]
 80bf544:	60b9      	str	r1, [r7, #8]
 80bf546:	607a      	str	r2, [r7, #4]
 80bf548:	2300      	movs	r3, #0
 80bf54a:	61fb      	str	r3, [r7, #28]
 80bf54c:	2300      	movs	r3, #0
 80bf54e:	61bb      	str	r3, [r7, #24]
 80bf550:	68bb      	ldr	r3, [r7, #8]
 80bf552:	617b      	str	r3, [r7, #20]
 80bf554:	68fb      	ldr	r3, [r7, #12]
 80bf556:	2b04      	cmp	r3, #4
 80bf558:	d903      	bls.n	80bf562 <_decode_cal_grp_xtalk_mon_meta_data+0x26>
 80bf55a:	f06f 0304 	mvn.w	r3, #4
 80bf55e:	61fb      	str	r3, [r7, #28]
 80bf560:	e040      	b.n	80bf5e4 <_decode_cal_grp_xtalk_mon_meta_data+0xa8>
 80bf562:	6979      	ldr	r1, [r7, #20]
 80bf564:	2001      	movs	r0, #1
 80bf566:	f7fe fbe8 	bl	80bdd3a <vl53l5_decode_uint8_t>
 80bf56a:	4603      	mov	r3, r0
 80bf56c:	461a      	mov	r2, r3
 80bf56e:	687b      	ldr	r3, [r7, #4]
 80bf570:	701a      	strb	r2, [r3, #0]
 80bf572:	697b      	ldr	r3, [r7, #20]
 80bf574:	3301      	adds	r3, #1
 80bf576:	617b      	str	r3, [r7, #20]
 80bf578:	69bb      	ldr	r3, [r7, #24]
 80bf57a:	3301      	adds	r3, #1
 80bf57c:	61bb      	str	r3, [r7, #24]
 80bf57e:	6979      	ldr	r1, [r7, #20]
 80bf580:	2001      	movs	r0, #1
 80bf582:	f7fe fbda 	bl	80bdd3a <vl53l5_decode_uint8_t>
 80bf586:	4603      	mov	r3, r0
 80bf588:	461a      	mov	r2, r3
 80bf58a:	687b      	ldr	r3, [r7, #4]
 80bf58c:	705a      	strb	r2, [r3, #1]
 80bf58e:	697b      	ldr	r3, [r7, #20]
 80bf590:	3301      	adds	r3, #1
 80bf592:	617b      	str	r3, [r7, #20]
 80bf594:	69bb      	ldr	r3, [r7, #24]
 80bf596:	3301      	adds	r3, #1
 80bf598:	61bb      	str	r3, [r7, #24]
 80bf59a:	6979      	ldr	r1, [r7, #20]
 80bf59c:	2001      	movs	r0, #1
 80bf59e:	f7fe fbcc 	bl	80bdd3a <vl53l5_decode_uint8_t>
 80bf5a2:	4603      	mov	r3, r0
 80bf5a4:	461a      	mov	r2, r3
 80bf5a6:	687b      	ldr	r3, [r7, #4]
 80bf5a8:	709a      	strb	r2, [r3, #2]
 80bf5aa:	697b      	ldr	r3, [r7, #20]
 80bf5ac:	3301      	adds	r3, #1
 80bf5ae:	617b      	str	r3, [r7, #20]
 80bf5b0:	69bb      	ldr	r3, [r7, #24]
 80bf5b2:	3301      	adds	r3, #1
 80bf5b4:	61bb      	str	r3, [r7, #24]
 80bf5b6:	6979      	ldr	r1, [r7, #20]
 80bf5b8:	2001      	movs	r0, #1
 80bf5ba:	f7fe fbcc 	bl	80bdd56 <vl53l5_decode_int8_t>
 80bf5be:	4603      	mov	r3, r0
 80bf5c0:	461a      	mov	r2, r3
 80bf5c2:	687b      	ldr	r3, [r7, #4]
 80bf5c4:	70da      	strb	r2, [r3, #3]
 80bf5c6:	697b      	ldr	r3, [r7, #20]
 80bf5c8:	3301      	adds	r3, #1
 80bf5ca:	617b      	str	r3, [r7, #20]
 80bf5cc:	69bb      	ldr	r3, [r7, #24]
 80bf5ce:	3301      	adds	r3, #1
 80bf5d0:	61bb      	str	r3, [r7, #24]
 80bf5d2:	68fa      	ldr	r2, [r7, #12]
 80bf5d4:	69bb      	ldr	r3, [r7, #24]
 80bf5d6:	429a      	cmp	r2, r3
 80bf5d8:	d003      	beq.n	80bf5e2 <_decode_cal_grp_xtalk_mon_meta_data+0xa6>
 80bf5da:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 80bf5de:	61fb      	str	r3, [r7, #28]
 80bf5e0:	e000      	b.n	80bf5e4 <_decode_cal_grp_xtalk_mon_meta_data+0xa8>
 80bf5e2:	bf00      	nop
 80bf5e4:	69fb      	ldr	r3, [r7, #28]
 80bf5e6:	4618      	mov	r0, r3
 80bf5e8:	3720      	adds	r7, #32
 80bf5ea:	46bd      	mov	sp, r7
 80bf5ec:	bd80      	pop	{r7, pc}

080bf5ee <_decode_cal_grp_xtalk_mon_zones_cal_xmon_zone_x_off>:
 80bf5ee:	b580      	push	{r7, lr}
 80bf5f0:	b088      	sub	sp, #32
 80bf5f2:	af00      	add	r7, sp, #0
 80bf5f4:	60f8      	str	r0, [r7, #12]
 80bf5f6:	60b9      	str	r1, [r7, #8]
 80bf5f8:	607a      	str	r2, [r7, #4]
 80bf5fa:	2300      	movs	r3, #0
 80bf5fc:	61fb      	str	r3, [r7, #28]
 80bf5fe:	2300      	movs	r3, #0
 80bf600:	61bb      	str	r3, [r7, #24]
 80bf602:	68bb      	ldr	r3, [r7, #8]
 80bf604:	617b      	str	r3, [r7, #20]
 80bf606:	2300      	movs	r3, #0
 80bf608:	613b      	str	r3, [r7, #16]
 80bf60a:	68fb      	ldr	r3, [r7, #12]
 80bf60c:	2b08      	cmp	r3, #8
 80bf60e:	d917      	bls.n	80bf640 <_decode_cal_grp_xtalk_mon_zones_cal_xmon_zone_x_off+0x52>
 80bf610:	f06f 0304 	mvn.w	r3, #4
 80bf614:	61fb      	str	r3, [r7, #28]
 80bf616:	e020      	b.n	80bf65a <_decode_cal_grp_xtalk_mon_zones_cal_xmon_zone_x_off+0x6c>
 80bf618:	6979      	ldr	r1, [r7, #20]
 80bf61a:	2001      	movs	r0, #1
 80bf61c:	f7fe fb8d 	bl	80bdd3a <vl53l5_decode_uint8_t>
 80bf620:	4603      	mov	r3, r0
 80bf622:	4619      	mov	r1, r3
 80bf624:	687a      	ldr	r2, [r7, #4]
 80bf626:	693b      	ldr	r3, [r7, #16]
 80bf628:	4413      	add	r3, r2
 80bf62a:	460a      	mov	r2, r1
 80bf62c:	701a      	strb	r2, [r3, #0]
 80bf62e:	697b      	ldr	r3, [r7, #20]
 80bf630:	3301      	adds	r3, #1
 80bf632:	617b      	str	r3, [r7, #20]
 80bf634:	69bb      	ldr	r3, [r7, #24]
 80bf636:	3301      	adds	r3, #1
 80bf638:	61bb      	str	r3, [r7, #24]
 80bf63a:	693b      	ldr	r3, [r7, #16]
 80bf63c:	3301      	adds	r3, #1
 80bf63e:	613b      	str	r3, [r7, #16]
 80bf640:	69ba      	ldr	r2, [r7, #24]
 80bf642:	68fb      	ldr	r3, [r7, #12]
 80bf644:	429a      	cmp	r2, r3
 80bf646:	d3e7      	bcc.n	80bf618 <_decode_cal_grp_xtalk_mon_zones_cal_xmon_zone_x_off+0x2a>
 80bf648:	68fa      	ldr	r2, [r7, #12]
 80bf64a:	69bb      	ldr	r3, [r7, #24]
 80bf64c:	429a      	cmp	r2, r3
 80bf64e:	d003      	beq.n	80bf658 <_decode_cal_grp_xtalk_mon_zones_cal_xmon_zone_x_off+0x6a>
 80bf650:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 80bf654:	61fb      	str	r3, [r7, #28]
 80bf656:	e000      	b.n	80bf65a <_decode_cal_grp_xtalk_mon_zones_cal_xmon_zone_x_off+0x6c>
 80bf658:	bf00      	nop
 80bf65a:	69fb      	ldr	r3, [r7, #28]
 80bf65c:	4618      	mov	r0, r3
 80bf65e:	3720      	adds	r7, #32
 80bf660:	46bd      	mov	sp, r7
 80bf662:	bd80      	pop	{r7, pc}

080bf664 <_decode_cal_grp_xtalk_mon_zones_cal_xmon_zone_y_off>:
 80bf664:	b580      	push	{r7, lr}
 80bf666:	b088      	sub	sp, #32
 80bf668:	af00      	add	r7, sp, #0
 80bf66a:	60f8      	str	r0, [r7, #12]
 80bf66c:	60b9      	str	r1, [r7, #8]
 80bf66e:	607a      	str	r2, [r7, #4]
 80bf670:	2300      	movs	r3, #0
 80bf672:	61fb      	str	r3, [r7, #28]
 80bf674:	2300      	movs	r3, #0
 80bf676:	61bb      	str	r3, [r7, #24]
 80bf678:	68bb      	ldr	r3, [r7, #8]
 80bf67a:	617b      	str	r3, [r7, #20]
 80bf67c:	2300      	movs	r3, #0
 80bf67e:	613b      	str	r3, [r7, #16]
 80bf680:	68fb      	ldr	r3, [r7, #12]
 80bf682:	2b08      	cmp	r3, #8
 80bf684:	d918      	bls.n	80bf6b8 <_decode_cal_grp_xtalk_mon_zones_cal_xmon_zone_y_off+0x54>
 80bf686:	f06f 0304 	mvn.w	r3, #4
 80bf68a:	61fb      	str	r3, [r7, #28]
 80bf68c:	e021      	b.n	80bf6d2 <_decode_cal_grp_xtalk_mon_zones_cal_xmon_zone_y_off+0x6e>
 80bf68e:	6979      	ldr	r1, [r7, #20]
 80bf690:	2001      	movs	r0, #1
 80bf692:	f7fe fb52 	bl	80bdd3a <vl53l5_decode_uint8_t>
 80bf696:	4603      	mov	r3, r0
 80bf698:	4619      	mov	r1, r3
 80bf69a:	687a      	ldr	r2, [r7, #4]
 80bf69c:	693b      	ldr	r3, [r7, #16]
 80bf69e:	4413      	add	r3, r2
 80bf6a0:	3308      	adds	r3, #8
 80bf6a2:	460a      	mov	r2, r1
 80bf6a4:	701a      	strb	r2, [r3, #0]
 80bf6a6:	697b      	ldr	r3, [r7, #20]
 80bf6a8:	3301      	adds	r3, #1
 80bf6aa:	617b      	str	r3, [r7, #20]
 80bf6ac:	69bb      	ldr	r3, [r7, #24]
 80bf6ae:	3301      	adds	r3, #1
 80bf6b0:	61bb      	str	r3, [r7, #24]
 80bf6b2:	693b      	ldr	r3, [r7, #16]
 80bf6b4:	3301      	adds	r3, #1
 80bf6b6:	613b      	str	r3, [r7, #16]
 80bf6b8:	69ba      	ldr	r2, [r7, #24]
 80bf6ba:	68fb      	ldr	r3, [r7, #12]
 80bf6bc:	429a      	cmp	r2, r3
 80bf6be:	d3e6      	bcc.n	80bf68e <_decode_cal_grp_xtalk_mon_zones_cal_xmon_zone_y_off+0x2a>
 80bf6c0:	68fa      	ldr	r2, [r7, #12]
 80bf6c2:	69bb      	ldr	r3, [r7, #24]
 80bf6c4:	429a      	cmp	r2, r3
 80bf6c6:	d003      	beq.n	80bf6d0 <_decode_cal_grp_xtalk_mon_zones_cal_xmon_zone_y_off+0x6c>
 80bf6c8:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 80bf6cc:	61fb      	str	r3, [r7, #28]
 80bf6ce:	e000      	b.n	80bf6d2 <_decode_cal_grp_xtalk_mon_zones_cal_xmon_zone_y_off+0x6e>
 80bf6d0:	bf00      	nop
 80bf6d2:	69fb      	ldr	r3, [r7, #28]
 80bf6d4:	4618      	mov	r0, r3
 80bf6d6:	3720      	adds	r7, #32
 80bf6d8:	46bd      	mov	sp, r7
 80bf6da:	bd80      	pop	{r7, pc}

080bf6dc <_decode_cal_grp_xtalk_mon_zones_cal_xmon_zone_width>:
 80bf6dc:	b580      	push	{r7, lr}
 80bf6de:	b088      	sub	sp, #32
 80bf6e0:	af00      	add	r7, sp, #0
 80bf6e2:	60f8      	str	r0, [r7, #12]
 80bf6e4:	60b9      	str	r1, [r7, #8]
 80bf6e6:	607a      	str	r2, [r7, #4]
 80bf6e8:	2300      	movs	r3, #0
 80bf6ea:	61fb      	str	r3, [r7, #28]
 80bf6ec:	2300      	movs	r3, #0
 80bf6ee:	61bb      	str	r3, [r7, #24]
 80bf6f0:	68bb      	ldr	r3, [r7, #8]
 80bf6f2:	617b      	str	r3, [r7, #20]
 80bf6f4:	2300      	movs	r3, #0
 80bf6f6:	613b      	str	r3, [r7, #16]
 80bf6f8:	68fb      	ldr	r3, [r7, #12]
 80bf6fa:	2b08      	cmp	r3, #8
 80bf6fc:	d918      	bls.n	80bf730 <_decode_cal_grp_xtalk_mon_zones_cal_xmon_zone_width+0x54>
 80bf6fe:	f06f 0304 	mvn.w	r3, #4
 80bf702:	61fb      	str	r3, [r7, #28]
 80bf704:	e021      	b.n	80bf74a <_decode_cal_grp_xtalk_mon_zones_cal_xmon_zone_width+0x6e>
 80bf706:	6979      	ldr	r1, [r7, #20]
 80bf708:	2001      	movs	r0, #1
 80bf70a:	f7fe fb16 	bl	80bdd3a <vl53l5_decode_uint8_t>
 80bf70e:	4603      	mov	r3, r0
 80bf710:	4619      	mov	r1, r3
 80bf712:	687a      	ldr	r2, [r7, #4]
 80bf714:	693b      	ldr	r3, [r7, #16]
 80bf716:	4413      	add	r3, r2
 80bf718:	3310      	adds	r3, #16
 80bf71a:	460a      	mov	r2, r1
 80bf71c:	701a      	strb	r2, [r3, #0]
 80bf71e:	697b      	ldr	r3, [r7, #20]
 80bf720:	3301      	adds	r3, #1
 80bf722:	617b      	str	r3, [r7, #20]
 80bf724:	69bb      	ldr	r3, [r7, #24]
 80bf726:	3301      	adds	r3, #1
 80bf728:	61bb      	str	r3, [r7, #24]
 80bf72a:	693b      	ldr	r3, [r7, #16]
 80bf72c:	3301      	adds	r3, #1
 80bf72e:	613b      	str	r3, [r7, #16]
 80bf730:	69ba      	ldr	r2, [r7, #24]
 80bf732:	68fb      	ldr	r3, [r7, #12]
 80bf734:	429a      	cmp	r2, r3
 80bf736:	d3e6      	bcc.n	80bf706 <_decode_cal_grp_xtalk_mon_zones_cal_xmon_zone_width+0x2a>
 80bf738:	68fa      	ldr	r2, [r7, #12]
 80bf73a:	69bb      	ldr	r3, [r7, #24]
 80bf73c:	429a      	cmp	r2, r3
 80bf73e:	d003      	beq.n	80bf748 <_decode_cal_grp_xtalk_mon_zones_cal_xmon_zone_width+0x6c>
 80bf740:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 80bf744:	61fb      	str	r3, [r7, #28]
 80bf746:	e000      	b.n	80bf74a <_decode_cal_grp_xtalk_mon_zones_cal_xmon_zone_width+0x6e>
 80bf748:	bf00      	nop
 80bf74a:	69fb      	ldr	r3, [r7, #28]
 80bf74c:	4618      	mov	r0, r3
 80bf74e:	3720      	adds	r7, #32
 80bf750:	46bd      	mov	sp, r7
 80bf752:	bd80      	pop	{r7, pc}

080bf754 <_decode_cal_grp_xtalk_mon_zones_cal_xmon_zone_height>:
 80bf754:	b580      	push	{r7, lr}
 80bf756:	b088      	sub	sp, #32
 80bf758:	af00      	add	r7, sp, #0
 80bf75a:	60f8      	str	r0, [r7, #12]
 80bf75c:	60b9      	str	r1, [r7, #8]
 80bf75e:	607a      	str	r2, [r7, #4]
 80bf760:	2300      	movs	r3, #0
 80bf762:	61fb      	str	r3, [r7, #28]
 80bf764:	2300      	movs	r3, #0
 80bf766:	61bb      	str	r3, [r7, #24]
 80bf768:	68bb      	ldr	r3, [r7, #8]
 80bf76a:	617b      	str	r3, [r7, #20]
 80bf76c:	2300      	movs	r3, #0
 80bf76e:	613b      	str	r3, [r7, #16]
 80bf770:	68fb      	ldr	r3, [r7, #12]
 80bf772:	2b08      	cmp	r3, #8
 80bf774:	d918      	bls.n	80bf7a8 <_decode_cal_grp_xtalk_mon_zones_cal_xmon_zone_height+0x54>
 80bf776:	f06f 0304 	mvn.w	r3, #4
 80bf77a:	61fb      	str	r3, [r7, #28]
 80bf77c:	e021      	b.n	80bf7c2 <_decode_cal_grp_xtalk_mon_zones_cal_xmon_zone_height+0x6e>
 80bf77e:	6979      	ldr	r1, [r7, #20]
 80bf780:	2001      	movs	r0, #1
 80bf782:	f7fe fada 	bl	80bdd3a <vl53l5_decode_uint8_t>
 80bf786:	4603      	mov	r3, r0
 80bf788:	4619      	mov	r1, r3
 80bf78a:	687a      	ldr	r2, [r7, #4]
 80bf78c:	693b      	ldr	r3, [r7, #16]
 80bf78e:	4413      	add	r3, r2
 80bf790:	3318      	adds	r3, #24
 80bf792:	460a      	mov	r2, r1
 80bf794:	701a      	strb	r2, [r3, #0]
 80bf796:	697b      	ldr	r3, [r7, #20]
 80bf798:	3301      	adds	r3, #1
 80bf79a:	617b      	str	r3, [r7, #20]
 80bf79c:	69bb      	ldr	r3, [r7, #24]
 80bf79e:	3301      	adds	r3, #1
 80bf7a0:	61bb      	str	r3, [r7, #24]
 80bf7a2:	693b      	ldr	r3, [r7, #16]
 80bf7a4:	3301      	adds	r3, #1
 80bf7a6:	613b      	str	r3, [r7, #16]
 80bf7a8:	69ba      	ldr	r2, [r7, #24]
 80bf7aa:	68fb      	ldr	r3, [r7, #12]
 80bf7ac:	429a      	cmp	r2, r3
 80bf7ae:	d3e6      	bcc.n	80bf77e <_decode_cal_grp_xtalk_mon_zones_cal_xmon_zone_height+0x2a>
 80bf7b0:	68fa      	ldr	r2, [r7, #12]
 80bf7b2:	69bb      	ldr	r3, [r7, #24]
 80bf7b4:	429a      	cmp	r2, r3
 80bf7b6:	d003      	beq.n	80bf7c0 <_decode_cal_grp_xtalk_mon_zones_cal_xmon_zone_height+0x6c>
 80bf7b8:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 80bf7bc:	61fb      	str	r3, [r7, #28]
 80bf7be:	e000      	b.n	80bf7c2 <_decode_cal_grp_xtalk_mon_zones_cal_xmon_zone_height+0x6e>
 80bf7c0:	bf00      	nop
 80bf7c2:	69fb      	ldr	r3, [r7, #28]
 80bf7c4:	4618      	mov	r0, r3
 80bf7c6:	3720      	adds	r7, #32
 80bf7c8:	46bd      	mov	sp, r7
 80bf7ca:	bd80      	pop	{r7, pc}

080bf7cc <_decode_cal_grp_xtalk_mon_data_cal_xmon_zone_rate_kcps_spad>:
 80bf7cc:	b580      	push	{r7, lr}
 80bf7ce:	b088      	sub	sp, #32
 80bf7d0:	af00      	add	r7, sp, #0
 80bf7d2:	60f8      	str	r0, [r7, #12]
 80bf7d4:	60b9      	str	r1, [r7, #8]
 80bf7d6:	607a      	str	r2, [r7, #4]
 80bf7d8:	2300      	movs	r3, #0
 80bf7da:	61fb      	str	r3, [r7, #28]
 80bf7dc:	2300      	movs	r3, #0
 80bf7de:	61bb      	str	r3, [r7, #24]
 80bf7e0:	68bb      	ldr	r3, [r7, #8]
 80bf7e2:	617b      	str	r3, [r7, #20]
 80bf7e4:	2300      	movs	r3, #0
 80bf7e6:	613b      	str	r3, [r7, #16]
 80bf7e8:	68fb      	ldr	r3, [r7, #12]
 80bf7ea:	2b20      	cmp	r3, #32
 80bf7ec:	d915      	bls.n	80bf81a <_decode_cal_grp_xtalk_mon_data_cal_xmon_zone_rate_kcps_spad+0x4e>
 80bf7ee:	f06f 0304 	mvn.w	r3, #4
 80bf7f2:	61fb      	str	r3, [r7, #28]
 80bf7f4:	e01e      	b.n	80bf834 <_decode_cal_grp_xtalk_mon_data_cal_xmon_zone_rate_kcps_spad+0x68>
 80bf7f6:	6979      	ldr	r1, [r7, #20]
 80bf7f8:	2004      	movs	r0, #4
 80bf7fa:	f7fe fb55 	bl	80bdea8 <vl53l5_decode_uint32_t>
 80bf7fe:	4601      	mov	r1, r0
 80bf800:	687b      	ldr	r3, [r7, #4]
 80bf802:	693a      	ldr	r2, [r7, #16]
 80bf804:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80bf808:	697b      	ldr	r3, [r7, #20]
 80bf80a:	3304      	adds	r3, #4
 80bf80c:	617b      	str	r3, [r7, #20]
 80bf80e:	69bb      	ldr	r3, [r7, #24]
 80bf810:	3304      	adds	r3, #4
 80bf812:	61bb      	str	r3, [r7, #24]
 80bf814:	693b      	ldr	r3, [r7, #16]
 80bf816:	3301      	adds	r3, #1
 80bf818:	613b      	str	r3, [r7, #16]
 80bf81a:	69ba      	ldr	r2, [r7, #24]
 80bf81c:	68fb      	ldr	r3, [r7, #12]
 80bf81e:	429a      	cmp	r2, r3
 80bf820:	d3e9      	bcc.n	80bf7f6 <_decode_cal_grp_xtalk_mon_data_cal_xmon_zone_rate_kcps_spad+0x2a>
 80bf822:	68fa      	ldr	r2, [r7, #12]
 80bf824:	69bb      	ldr	r3, [r7, #24]
 80bf826:	429a      	cmp	r2, r3
 80bf828:	d003      	beq.n	80bf832 <_decode_cal_grp_xtalk_mon_data_cal_xmon_zone_rate_kcps_spad+0x66>
 80bf82a:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 80bf82e:	61fb      	str	r3, [r7, #28]
 80bf830:	e000      	b.n	80bf834 <_decode_cal_grp_xtalk_mon_data_cal_xmon_zone_rate_kcps_spad+0x68>
 80bf832:	bf00      	nop
 80bf834:	69fb      	ldr	r3, [r7, #28]
 80bf836:	4618      	mov	r0, r3
 80bf838:	3720      	adds	r7, #32
 80bf83a:	46bd      	mov	sp, r7
 80bf83c:	bd80      	pop	{r7, pc}

080bf83e <_decode_cal_grp_xtalk_mon_data_cal_xmon_zone_avg_count>:
 80bf83e:	b580      	push	{r7, lr}
 80bf840:	b088      	sub	sp, #32
 80bf842:	af00      	add	r7, sp, #0
 80bf844:	60f8      	str	r0, [r7, #12]
 80bf846:	60b9      	str	r1, [r7, #8]
 80bf848:	607a      	str	r2, [r7, #4]
 80bf84a:	2300      	movs	r3, #0
 80bf84c:	61fb      	str	r3, [r7, #28]
 80bf84e:	2300      	movs	r3, #0
 80bf850:	61bb      	str	r3, [r7, #24]
 80bf852:	68bb      	ldr	r3, [r7, #8]
 80bf854:	617b      	str	r3, [r7, #20]
 80bf856:	2300      	movs	r3, #0
 80bf858:	613b      	str	r3, [r7, #16]
 80bf85a:	68fb      	ldr	r3, [r7, #12]
 80bf85c:	2b10      	cmp	r3, #16
 80bf85e:	d917      	bls.n	80bf890 <_decode_cal_grp_xtalk_mon_data_cal_xmon_zone_avg_count+0x52>
 80bf860:	f06f 0304 	mvn.w	r3, #4
 80bf864:	61fb      	str	r3, [r7, #28]
 80bf866:	e020      	b.n	80bf8aa <_decode_cal_grp_xtalk_mon_data_cal_xmon_zone_avg_count+0x6c>
 80bf868:	6979      	ldr	r1, [r7, #20]
 80bf86a:	2002      	movs	r0, #2
 80bf86c:	f7fe fa82 	bl	80bdd74 <vl53l5_decode_uint16_t>
 80bf870:	4603      	mov	r3, r0
 80bf872:	4619      	mov	r1, r3
 80bf874:	687b      	ldr	r3, [r7, #4]
 80bf876:	693a      	ldr	r2, [r7, #16]
 80bf878:	3210      	adds	r2, #16
 80bf87a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80bf87e:	697b      	ldr	r3, [r7, #20]
 80bf880:	3302      	adds	r3, #2
 80bf882:	617b      	str	r3, [r7, #20]
 80bf884:	69bb      	ldr	r3, [r7, #24]
 80bf886:	3302      	adds	r3, #2
 80bf888:	61bb      	str	r3, [r7, #24]
 80bf88a:	693b      	ldr	r3, [r7, #16]
 80bf88c:	3301      	adds	r3, #1
 80bf88e:	613b      	str	r3, [r7, #16]
 80bf890:	69ba      	ldr	r2, [r7, #24]
 80bf892:	68fb      	ldr	r3, [r7, #12]
 80bf894:	429a      	cmp	r2, r3
 80bf896:	d3e7      	bcc.n	80bf868 <_decode_cal_grp_xtalk_mon_data_cal_xmon_zone_avg_count+0x2a>
 80bf898:	68fa      	ldr	r2, [r7, #12]
 80bf89a:	69bb      	ldr	r3, [r7, #24]
 80bf89c:	429a      	cmp	r2, r3
 80bf89e:	d003      	beq.n	80bf8a8 <_decode_cal_grp_xtalk_mon_data_cal_xmon_zone_avg_count+0x6a>
 80bf8a0:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 80bf8a4:	61fb      	str	r3, [r7, #28]
 80bf8a6:	e000      	b.n	80bf8aa <_decode_cal_grp_xtalk_mon_data_cal_xmon_zone_avg_count+0x6c>
 80bf8a8:	bf00      	nop
 80bf8aa:	69fb      	ldr	r3, [r7, #28]
 80bf8ac:	4618      	mov	r0, r3
 80bf8ae:	3720      	adds	r7, #32
 80bf8b0:	46bd      	mov	sp, r7
 80bf8b2:	bd80      	pop	{r7, pc}

080bf8b4 <vl53l5_calibration_decode_cmd>:
 80bf8b4:	b580      	push	{r7, lr}
 80bf8b6:	b086      	sub	sp, #24
 80bf8b8:	af00      	add	r7, sp, #0
 80bf8ba:	60b9      	str	r1, [r7, #8]
 80bf8bc:	607a      	str	r2, [r7, #4]
 80bf8be:	603b      	str	r3, [r7, #0]
 80bf8c0:	4603      	mov	r3, r0
 80bf8c2:	81fb      	strh	r3, [r7, #14]
 80bf8c4:	2300      	movs	r3, #0
 80bf8c6:	617b      	str	r3, [r7, #20]
 80bf8c8:	89fb      	ldrh	r3, [r7, #14]
 80bf8ca:	f64a 1220 	movw	r2, #43296	; 0xa920
 80bf8ce:	4293      	cmp	r3, r2
 80bf8d0:	f000 812f 	beq.w	80bfb32 <vl53l5_calibration_decode_cmd+0x27e>
 80bf8d4:	f64a 1220 	movw	r2, #43296	; 0xa920
 80bf8d8:	4293      	cmp	r3, r2
 80bf8da:	dc50      	bgt.n	80bf97e <vl53l5_calibration_decode_cmd+0xca>
 80bf8dc:	f24a 5218 	movw	r2, #42264	; 0xa518
 80bf8e0:	4293      	cmp	r3, r2
 80bf8e2:	f000 80d9 	beq.w	80bfa98 <vl53l5_calibration_decode_cmd+0x1e4>
 80bf8e6:	f24a 5218 	movw	r2, #42264	; 0xa518
 80bf8ea:	4293      	cmp	r3, r2
 80bf8ec:	dc23      	bgt.n	80bf936 <vl53l5_calibration_decode_cmd+0x82>
 80bf8ee:	f24a 3280 	movw	r2, #41856	; 0xa380
 80bf8f2:	4293      	cmp	r3, r2
 80bf8f4:	f000 80a7 	beq.w	80bfa46 <vl53l5_calibration_decode_cmd+0x192>
 80bf8f8:	f24a 3280 	movw	r2, #41856	; 0xa380
 80bf8fc:	4293      	cmp	r3, r2
 80bf8fe:	dc0a      	bgt.n	80bf916 <vl53l5_calibration_decode_cmd+0x62>
 80bf900:	f24a 3258 	movw	r2, #41816	; 0xa358
 80bf904:	4293      	cmp	r3, r2
 80bf906:	f000 808b 	beq.w	80bfa20 <vl53l5_calibration_decode_cmd+0x16c>
 80bf90a:	f24a 3274 	movw	r2, #41844	; 0xa374
 80bf90e:	4293      	cmp	r3, r2
 80bf910:	f000 808f 	beq.w	80bfa32 <vl53l5_calibration_decode_cmd+0x17e>
 80bf914:	e1a7      	b.n	80bfc66 <vl53l5_calibration_decode_cmd+0x3b2>
 80bf916:	f24a 3298 	movw	r2, #41880	; 0xa398
 80bf91a:	4293      	cmp	r3, r2
 80bf91c:	f000 80a7 	beq.w	80bfa6e <vl53l5_calibration_decode_cmd+0x1ba>
 80bf920:	f24a 4298 	movw	r2, #42136	; 0xa498
 80bf924:	4293      	cmp	r3, r2
 80bf926:	f000 80ac 	beq.w	80bfa82 <vl53l5_calibration_decode_cmd+0x1ce>
 80bf92a:	f24a 3294 	movw	r2, #41876	; 0xa394
 80bf92e:	4293      	cmp	r3, r2
 80bf930:	f000 8093 	beq.w	80bfa5a <vl53l5_calibration_decode_cmd+0x1a6>
 80bf934:	e197      	b.n	80bfc66 <vl53l5_calibration_decode_cmd+0x3b2>
 80bf936:	f24a 72fc 	movw	r2, #43004	; 0xa7fc
 80bf93a:	4293      	cmp	r3, r2
 80bf93c:	f000 80cd 	beq.w	80bfada <vl53l5_calibration_decode_cmd+0x226>
 80bf940:	f24a 72fc 	movw	r2, #43004	; 0xa7fc
 80bf944:	4293      	cmp	r3, r2
 80bf946:	dc0a      	bgt.n	80bf95e <vl53l5_calibration_decode_cmd+0xaa>
 80bf948:	f24a 5298 	movw	r2, #42392	; 0xa598
 80bf94c:	4293      	cmp	r3, r2
 80bf94e:	f000 80ae 	beq.w	80bfaae <vl53l5_calibration_decode_cmd+0x1fa>
 80bf952:	f24a 52a8 	movw	r2, #42408	; 0xa5a8
 80bf956:	4293      	cmp	r3, r2
 80bf958:	f000 80b4 	beq.w	80bfac4 <vl53l5_calibration_decode_cmd+0x210>
 80bf95c:	e183      	b.n	80bfc66 <vl53l5_calibration_decode_cmd+0x3b2>
 80bf95e:	f64a 021c 	movw	r2, #43036	; 0xa81c
 80bf962:	4293      	cmp	r3, r2
 80bf964:	f000 80cf 	beq.w	80bfb06 <vl53l5_calibration_decode_cmd+0x252>
 80bf968:	f64a 0220 	movw	r2, #43040	; 0xa820
 80bf96c:	4293      	cmp	r3, r2
 80bf96e:	f000 80d5 	beq.w	80bfb1c <vl53l5_calibration_decode_cmd+0x268>
 80bf972:	f64a 0208 	movw	r2, #43016	; 0xa808
 80bf976:	4293      	cmp	r3, r2
 80bf978:	f000 80ba 	beq.w	80bfaf0 <vl53l5_calibration_decode_cmd+0x23c>
 80bf97c:	e173      	b.n	80bfc66 <vl53l5_calibration_decode_cmd+0x3b2>
 80bf97e:	f64a 6280 	movw	r2, #44672	; 0xae80
 80bf982:	4293      	cmp	r3, r2
 80bf984:	f000 8122 	beq.w	80bfbcc <vl53l5_calibration_decode_cmd+0x318>
 80bf988:	f64a 6280 	movw	r2, #44672	; 0xae80
 80bf98c:	4293      	cmp	r3, r2
 80bf98e:	dc23      	bgt.n	80bf9d8 <vl53l5_calibration_decode_cmd+0x124>
 80bf990:	f64a 5248 	movw	r2, #44360	; 0xad48
 80bf994:	4293      	cmp	r3, r2
 80bf996:	f000 80ed 	beq.w	80bfb74 <vl53l5_calibration_decode_cmd+0x2c0>
 80bf99a:	f64a 5248 	movw	r2, #44360	; 0xad48
 80bf99e:	4293      	cmp	r3, r2
 80bf9a0:	dc0a      	bgt.n	80bf9b8 <vl53l5_calibration_decode_cmd+0x104>
 80bf9a2:	f64a 12a0 	movw	r2, #43424	; 0xa9a0
 80bf9a6:	4293      	cmp	r3, r2
 80bf9a8:	f000 80ce 	beq.w	80bfb48 <vl53l5_calibration_decode_cmd+0x294>
 80bf9ac:	f64a 12b0 	movw	r2, #43440	; 0xa9b0
 80bf9b0:	4293      	cmp	r3, r2
 80bf9b2:	f000 80d4 	beq.w	80bfb5e <vl53l5_calibration_decode_cmd+0x2aa>
 80bf9b6:	e156      	b.n	80bfc66 <vl53l5_calibration_decode_cmd+0x3b2>
 80bf9b8:	f64a 6274 	movw	r2, #44660	; 0xae74
 80bf9bc:	4293      	cmp	r3, r2
 80bf9be:	f000 80ef 	beq.w	80bfba0 <vl53l5_calibration_decode_cmd+0x2ec>
 80bf9c2:	f64a 6278 	movw	r2, #44664	; 0xae78
 80bf9c6:	4293      	cmp	r3, r2
 80bf9c8:	f000 80f5 	beq.w	80bfbb6 <vl53l5_calibration_decode_cmd+0x302>
 80bf9cc:	f64a 5254 	movw	r2, #44372	; 0xad54
 80bf9d0:	4293      	cmp	r3, r2
 80bf9d2:	f000 80da 	beq.w	80bfb8a <vl53l5_calibration_decode_cmd+0x2d6>
 80bf9d6:	e146      	b.n	80bfc66 <vl53l5_calibration_decode_cmd+0x3b2>
 80bf9d8:	f64a 6298 	movw	r2, #44696	; 0xae98
 80bf9dc:	4293      	cmp	r3, r2
 80bf9de:	f000 8116 	beq.w	80bfc0e <vl53l5_calibration_decode_cmd+0x35a>
 80bf9e2:	f64a 6298 	movw	r2, #44696	; 0xae98
 80bf9e6:	4293      	cmp	r3, r2
 80bf9e8:	dc0a      	bgt.n	80bfa00 <vl53l5_calibration_decode_cmd+0x14c>
 80bf9ea:	f64a 6288 	movw	r2, #44680	; 0xae88
 80bf9ee:	4293      	cmp	r3, r2
 80bf9f0:	f000 80f7 	beq.w	80bfbe2 <vl53l5_calibration_decode_cmd+0x32e>
 80bf9f4:	f64a 6290 	movw	r2, #44688	; 0xae90
 80bf9f8:	4293      	cmp	r3, r2
 80bf9fa:	f000 80fd 	beq.w	80bfbf8 <vl53l5_calibration_decode_cmd+0x344>
 80bf9fe:	e132      	b.n	80bfc66 <vl53l5_calibration_decode_cmd+0x3b2>
 80bfa00:	f24b 22f8 	movw	r2, #45816	; 0xb2f8
 80bfa04:	4293      	cmp	r3, r2
 80bfa06:	f000 8118 	beq.w	80bfc3a <vl53l5_calibration_decode_cmd+0x386>
 80bfa0a:	f24b 3218 	movw	r2, #45848	; 0xb318
 80bfa0e:	4293      	cmp	r3, r2
 80bfa10:	f000 811e 	beq.w	80bfc50 <vl53l5_calibration_decode_cmd+0x39c>
 80bfa14:	f64a 62b8 	movw	r2, #44728	; 0xaeb8
 80bfa18:	4293      	cmp	r3, r2
 80bfa1a:	f000 8103 	beq.w	80bfc24 <vl53l5_calibration_decode_cmd+0x370>
 80bfa1e:	e122      	b.n	80bfc66 <vl53l5_calibration_decode_cmd+0x3b2>
 80bfa20:	683b      	ldr	r3, [r7, #0]
 80bfa22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80bfa24:	461a      	mov	r2, r3
 80bfa26:	6879      	ldr	r1, [r7, #4]
 80bfa28:	68b8      	ldr	r0, [r7, #8]
 80bfa2a:	f7ff f9a2 	bl	80bed72 <_decode_cal_grp_ref_spad_info>
 80bfa2e:	6178      	str	r0, [r7, #20]
 80bfa30:	e11d      	b.n	80bfc6e <vl53l5_calibration_decode_cmd+0x3ba>
 80bfa32:	683b      	ldr	r3, [r7, #0]
 80bfa34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80bfa36:	3308      	adds	r3, #8
 80bfa38:	461a      	mov	r2, r3
 80bfa3a:	6879      	ldr	r1, [r7, #4]
 80bfa3c:	68b8      	ldr	r0, [r7, #8]
 80bfa3e:	f7ff fa29 	bl	80bee94 <_decode_cal_grp_grid_meta>
 80bfa42:	6178      	str	r0, [r7, #20]
 80bfa44:	e113      	b.n	80bfc6e <vl53l5_calibration_decode_cmd+0x3ba>
 80bfa46:	683b      	ldr	r3, [r7, #0]
 80bfa48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80bfa4a:	3314      	adds	r3, #20
 80bfa4c:	461a      	mov	r2, r3
 80bfa4e:	6879      	ldr	r1, [r7, #4]
 80bfa50:	68b8      	ldr	r0, [r7, #8]
 80bfa52:	f7ff facc 	bl	80befee <_decode_cal_grp_phase_stats>
 80bfa56:	6178      	str	r0, [r7, #20]
 80bfa58:	e109      	b.n	80bfc6e <vl53l5_calibration_decode_cmd+0x3ba>
 80bfa5a:	683b      	ldr	r3, [r7, #0]
 80bfa5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80bfa5e:	3328      	adds	r3, #40	; 0x28
 80bfa60:	461a      	mov	r2, r3
 80bfa62:	6879      	ldr	r1, [r7, #4]
 80bfa64:	68b8      	ldr	r0, [r7, #8]
 80bfa66:	f7ff fb42 	bl	80bf0ee <_decode_cal_grp_temperature_stats>
 80bfa6a:	6178      	str	r0, [r7, #20]
 80bfa6c:	e0ff      	b.n	80bfc6e <vl53l5_calibration_decode_cmd+0x3ba>
 80bfa6e:	683b      	ldr	r3, [r7, #0]
 80bfa70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80bfa72:	332c      	adds	r3, #44	; 0x2c
 80bfa74:	461a      	mov	r2, r3
 80bfa76:	6879      	ldr	r1, [r7, #4]
 80bfa78:	68b8      	ldr	r0, [r7, #8]
 80bfa7a:	f7ff fb91 	bl	80bf1a0 <_decode_cggdrkps_cal_grid_data_rate_kcps_per_spad>
 80bfa7e:	6178      	str	r0, [r7, #20]
 80bfa80:	e0f5      	b.n	80bfc6e <vl53l5_calibration_decode_cmd+0x3ba>
 80bfa82:	683b      	ldr	r3, [r7, #0]
 80bfa84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80bfa86:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 80bfa8a:	461a      	mov	r2, r3
 80bfa8c:	6879      	ldr	r1, [r7, #4]
 80bfa8e:	68b8      	ldr	r0, [r7, #8]
 80bfa90:	f7ff fbc0 	bl	80bf214 <_decode_cggdesc_cal_grid_data_effective_spad_count>
 80bfa94:	6178      	str	r0, [r7, #20]
 80bfa96:	e0ea      	b.n	80bfc6e <vl53l5_calibration_decode_cmd+0x3ba>
 80bfa98:	683b      	ldr	r3, [r7, #0]
 80bfa9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80bfa9c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80bfaa0:	461a      	mov	r2, r3
 80bfaa2:	6879      	ldr	r1, [r7, #4]
 80bfaa4:	68b8      	ldr	r0, [r7, #8]
 80bfaa6:	f7ff fbef 	bl	80bf288 <_decode_cal_grp_grid_data_range_mm_cal_grid_data_range_mm>
 80bfaaa:	6178      	str	r0, [r7, #20]
 80bfaac:	e0df      	b.n	80bfc6e <vl53l5_calibration_decode_cmd+0x3ba>
 80bfaae:	683b      	ldr	r3, [r7, #0]
 80bfab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80bfab2:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 80bfab6:	461a      	mov	r2, r3
 80bfab8:	6879      	ldr	r1, [r7, #4]
 80bfaba:	68b8      	ldr	r0, [r7, #8]
 80bfabc:	f7ff fc1e 	bl	80bf2fc <_decode_cal_grp_status>
 80bfac0:	6178      	str	r0, [r7, #20]
 80bfac2:	e0d4      	b.n	80bfc6e <vl53l5_calibration_decode_cmd+0x3ba>
 80bfac4:	683b      	ldr	r3, [r7, #0]
 80bfac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80bfac8:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 80bfacc:	461a      	mov	r2, r3
 80bface:	6879      	ldr	r1, [r7, #4]
 80bfad0:	68b8      	ldr	r0, [r7, #8]
 80bfad2:	f7ff fc13 	bl	80bf2fc <_decode_cal_grp_status>
 80bfad6:	6178      	str	r0, [r7, #20]
 80bfad8:	e0c9      	b.n	80bfc6e <vl53l5_calibration_decode_cmd+0x3ba>
 80bfada:	683b      	ldr	r3, [r7, #0]
 80bfadc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80bfade:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80bfae2:	461a      	mov	r2, r3
 80bfae4:	6879      	ldr	r1, [r7, #4]
 80bfae6:	68b8      	ldr	r0, [r7, #8]
 80bfae8:	f7ff f9d4 	bl	80bee94 <_decode_cal_grp_grid_meta>
 80bfaec:	6178      	str	r0, [r7, #20]
 80bfaee:	e0be      	b.n	80bfc6e <vl53l5_calibration_decode_cmd+0x3ba>
 80bfaf0:	683b      	ldr	r3, [r7, #0]
 80bfaf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80bfaf4:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80bfaf8:	461a      	mov	r2, r3
 80bfafa:	6879      	ldr	r1, [r7, #4]
 80bfafc:	68b8      	ldr	r0, [r7, #8]
 80bfafe:	f7ff fa76 	bl	80befee <_decode_cal_grp_phase_stats>
 80bfb02:	6178      	str	r0, [r7, #20]
 80bfb04:	e0b3      	b.n	80bfc6e <vl53l5_calibration_decode_cmd+0x3ba>
 80bfb06:	683b      	ldr	r3, [r7, #0]
 80bfb08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80bfb0a:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 80bfb0e:	461a      	mov	r2, r3
 80bfb10:	6879      	ldr	r1, [r7, #4]
 80bfb12:	68b8      	ldr	r0, [r7, #8]
 80bfb14:	f7ff faeb 	bl	80bf0ee <_decode_cal_grp_temperature_stats>
 80bfb18:	6178      	str	r0, [r7, #20]
 80bfb1a:	e0a8      	b.n	80bfc6e <vl53l5_calibration_decode_cmd+0x3ba>
 80bfb1c:	683b      	ldr	r3, [r7, #0]
 80bfb1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80bfb20:	f503 731c 	add.w	r3, r3, #624	; 0x270
 80bfb24:	461a      	mov	r2, r3
 80bfb26:	6879      	ldr	r1, [r7, #4]
 80bfb28:	68b8      	ldr	r0, [r7, #8]
 80bfb2a:	f7ff fb39 	bl	80bf1a0 <_decode_cggdrkps_cal_grid_data_rate_kcps_per_spad>
 80bfb2e:	6178      	str	r0, [r7, #20]
 80bfb30:	e09d      	b.n	80bfc6e <vl53l5_calibration_decode_cmd+0x3ba>
 80bfb32:	683b      	ldr	r3, [r7, #0]
 80bfb34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80bfb36:	f503 735c 	add.w	r3, r3, #880	; 0x370
 80bfb3a:	461a      	mov	r2, r3
 80bfb3c:	6879      	ldr	r1, [r7, #4]
 80bfb3e:	68b8      	ldr	r0, [r7, #8]
 80bfb40:	f7ff fb68 	bl	80bf214 <_decode_cggdesc_cal_grid_data_effective_spad_count>
 80bfb44:	6178      	str	r0, [r7, #20]
 80bfb46:	e092      	b.n	80bfc6e <vl53l5_calibration_decode_cmd+0x3ba>
 80bfb48:	683b      	ldr	r3, [r7, #0]
 80bfb4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80bfb4c:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 80bfb50:	461a      	mov	r2, r3
 80bfb52:	6879      	ldr	r1, [r7, #4]
 80bfb54:	68b8      	ldr	r0, [r7, #8]
 80bfb56:	f7ff fbd1 	bl	80bf2fc <_decode_cal_grp_status>
 80bfb5a:	6178      	str	r0, [r7, #20]
 80bfb5c:	e087      	b.n	80bfc6e <vl53l5_calibration_decode_cmd+0x3ba>
 80bfb5e:	683b      	ldr	r3, [r7, #0]
 80bfb60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80bfb62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80bfb66:	461a      	mov	r2, r3
 80bfb68:	6879      	ldr	r1, [r7, #4]
 80bfb6a:	68b8      	ldr	r0, [r7, #8]
 80bfb6c:	f7ff fbc6 	bl	80bf2fc <_decode_cal_grp_status>
 80bfb70:	6178      	str	r0, [r7, #20]
 80bfb72:	e07c      	b.n	80bfc6e <vl53l5_calibration_decode_cmd+0x3ba>
 80bfb74:	683b      	ldr	r3, [r7, #0]
 80bfb76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80bfb78:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80bfb7c:	461a      	mov	r2, r3
 80bfb7e:	6879      	ldr	r1, [r7, #4]
 80bfb80:	68b8      	ldr	r0, [r7, #8]
 80bfb82:	f7ff fc10 	bl	80bf3a6 <_decode_cal_grp_xtalk_shape_meta>
 80bfb86:	6178      	str	r0, [r7, #20]
 80bfb88:	e071      	b.n	80bfc6e <vl53l5_calibration_decode_cmd+0x3ba>
 80bfb8a:	683b      	ldr	r3, [r7, #0]
 80bfb8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80bfb8e:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80bfb92:	461a      	mov	r2, r3
 80bfb94:	6879      	ldr	r1, [r7, #4]
 80bfb96:	68b8      	ldr	r0, [r7, #8]
 80bfb98:	f7ff fc95 	bl	80bf4c6 <_decode_cal_grp_xtalk_shape_data_cal_xtalk_shape_bin_data>
 80bfb9c:	6178      	str	r0, [r7, #20]
 80bfb9e:	e066      	b.n	80bfc6e <vl53l5_calibration_decode_cmd+0x3ba>
 80bfba0:	683b      	ldr	r3, [r7, #0]
 80bfba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80bfba4:	f203 533c 	addw	r3, r3, #1340	; 0x53c
 80bfba8:	461a      	mov	r2, r3
 80bfbaa:	6879      	ldr	r1, [r7, #4]
 80bfbac:	68b8      	ldr	r0, [r7, #8]
 80bfbae:	f7ff fcc5 	bl	80bf53c <_decode_cal_grp_xtalk_mon_meta_data>
 80bfbb2:	6178      	str	r0, [r7, #20]
 80bfbb4:	e05b      	b.n	80bfc6e <vl53l5_calibration_decode_cmd+0x3ba>
 80bfbb6:	683b      	ldr	r3, [r7, #0]
 80bfbb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80bfbba:	f503 63a8 	add.w	r3, r3, #1344	; 0x540
 80bfbbe:	461a      	mov	r2, r3
 80bfbc0:	6879      	ldr	r1, [r7, #4]
 80bfbc2:	68b8      	ldr	r0, [r7, #8]
 80bfbc4:	f7ff fd13 	bl	80bf5ee <_decode_cal_grp_xtalk_mon_zones_cal_xmon_zone_x_off>
 80bfbc8:	6178      	str	r0, [r7, #20]
 80bfbca:	e050      	b.n	80bfc6e <vl53l5_calibration_decode_cmd+0x3ba>
 80bfbcc:	683b      	ldr	r3, [r7, #0]
 80bfbce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80bfbd0:	f503 63a8 	add.w	r3, r3, #1344	; 0x540
 80bfbd4:	461a      	mov	r2, r3
 80bfbd6:	6879      	ldr	r1, [r7, #4]
 80bfbd8:	68b8      	ldr	r0, [r7, #8]
 80bfbda:	f7ff fd43 	bl	80bf664 <_decode_cal_grp_xtalk_mon_zones_cal_xmon_zone_y_off>
 80bfbde:	6178      	str	r0, [r7, #20]
 80bfbe0:	e045      	b.n	80bfc6e <vl53l5_calibration_decode_cmd+0x3ba>
 80bfbe2:	683b      	ldr	r3, [r7, #0]
 80bfbe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80bfbe6:	f503 63a8 	add.w	r3, r3, #1344	; 0x540
 80bfbea:	461a      	mov	r2, r3
 80bfbec:	6879      	ldr	r1, [r7, #4]
 80bfbee:	68b8      	ldr	r0, [r7, #8]
 80bfbf0:	f7ff fd74 	bl	80bf6dc <_decode_cal_grp_xtalk_mon_zones_cal_xmon_zone_width>
 80bfbf4:	6178      	str	r0, [r7, #20]
 80bfbf6:	e03a      	b.n	80bfc6e <vl53l5_calibration_decode_cmd+0x3ba>
 80bfbf8:	683b      	ldr	r3, [r7, #0]
 80bfbfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80bfbfc:	f503 63a8 	add.w	r3, r3, #1344	; 0x540
 80bfc00:	461a      	mov	r2, r3
 80bfc02:	6879      	ldr	r1, [r7, #4]
 80bfc04:	68b8      	ldr	r0, [r7, #8]
 80bfc06:	f7ff fda5 	bl	80bf754 <_decode_cal_grp_xtalk_mon_zones_cal_xmon_zone_height>
 80bfc0a:	6178      	str	r0, [r7, #20]
 80bfc0c:	e02f      	b.n	80bfc6e <vl53l5_calibration_decode_cmd+0x3ba>
 80bfc0e:	683b      	ldr	r3, [r7, #0]
 80bfc10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80bfc12:	f503 63ac 	add.w	r3, r3, #1376	; 0x560
 80bfc16:	461a      	mov	r2, r3
 80bfc18:	6879      	ldr	r1, [r7, #4]
 80bfc1a:	68b8      	ldr	r0, [r7, #8]
 80bfc1c:	f7ff fdd6 	bl	80bf7cc <_decode_cal_grp_xtalk_mon_data_cal_xmon_zone_rate_kcps_spad>
 80bfc20:	6178      	str	r0, [r7, #20]
 80bfc22:	e024      	b.n	80bfc6e <vl53l5_calibration_decode_cmd+0x3ba>
 80bfc24:	683b      	ldr	r3, [r7, #0]
 80bfc26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80bfc28:	f503 63ac 	add.w	r3, r3, #1376	; 0x560
 80bfc2c:	461a      	mov	r2, r3
 80bfc2e:	6879      	ldr	r1, [r7, #4]
 80bfc30:	68b8      	ldr	r0, [r7, #8]
 80bfc32:	f7ff fe04 	bl	80bf83e <_decode_cal_grp_xtalk_mon_data_cal_xmon_zone_avg_count>
 80bfc36:	6178      	str	r0, [r7, #20]
 80bfc38:	e019      	b.n	80bfc6e <vl53l5_calibration_decode_cmd+0x3ba>
 80bfc3a:	683b      	ldr	r3, [r7, #0]
 80bfc3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80bfc3e:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 80bfc42:	461a      	mov	r2, r3
 80bfc44:	6879      	ldr	r1, [r7, #4]
 80bfc46:	68b8      	ldr	r0, [r7, #8]
 80bfc48:	f7ff fdc0 	bl	80bf7cc <_decode_cal_grp_xtalk_mon_data_cal_xmon_zone_rate_kcps_spad>
 80bfc4c:	6178      	str	r0, [r7, #20]
 80bfc4e:	e00e      	b.n	80bfc6e <vl53l5_calibration_decode_cmd+0x3ba>
 80bfc50:	683b      	ldr	r3, [r7, #0]
 80bfc52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80bfc54:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 80bfc58:	461a      	mov	r2, r3
 80bfc5a:	6879      	ldr	r1, [r7, #4]
 80bfc5c:	68b8      	ldr	r0, [r7, #8]
 80bfc5e:	f7ff fdee 	bl	80bf83e <_decode_cal_grp_xtalk_mon_data_cal_xmon_zone_avg_count>
 80bfc62:	6178      	str	r0, [r7, #20]
 80bfc64:	e003      	b.n	80bfc6e <vl53l5_calibration_decode_cmd+0x3ba>
 80bfc66:	f06f 0308 	mvn.w	r3, #8
 80bfc6a:	617b      	str	r3, [r7, #20]
 80bfc6c:	bf00      	nop
 80bfc6e:	697b      	ldr	r3, [r7, #20]
 80bfc70:	4618      	mov	r0, r3
 80bfc72:	3718      	adds	r7, #24
 80bfc74:	46bd      	mov	sp, r7
 80bfc76:	bd80      	pop	{r7, pc}

080bfc78 <_decode_dci_grp_map_version>:
 80bfc78:	b580      	push	{r7, lr}
 80bfc7a:	b088      	sub	sp, #32
 80bfc7c:	af00      	add	r7, sp, #0
 80bfc7e:	60f8      	str	r0, [r7, #12]
 80bfc80:	60b9      	str	r1, [r7, #8]
 80bfc82:	607a      	str	r2, [r7, #4]
 80bfc84:	2300      	movs	r3, #0
 80bfc86:	61fb      	str	r3, [r7, #28]
 80bfc88:	2300      	movs	r3, #0
 80bfc8a:	61bb      	str	r3, [r7, #24]
 80bfc8c:	68bb      	ldr	r3, [r7, #8]
 80bfc8e:	617b      	str	r3, [r7, #20]
 80bfc90:	68fb      	ldr	r3, [r7, #12]
 80bfc92:	2b04      	cmp	r3, #4
 80bfc94:	d903      	bls.n	80bfc9e <_decode_dci_grp_map_version+0x26>
 80bfc96:	f06f 0304 	mvn.w	r3, #4
 80bfc9a:	61fb      	str	r3, [r7, #28]
 80bfc9c:	e024      	b.n	80bfce8 <_decode_dci_grp_map_version+0x70>
 80bfc9e:	6979      	ldr	r1, [r7, #20]
 80bfca0:	2002      	movs	r0, #2
 80bfca2:	f7fe f867 	bl	80bdd74 <vl53l5_decode_uint16_t>
 80bfca6:	4603      	mov	r3, r0
 80bfca8:	461a      	mov	r2, r3
 80bfcaa:	687b      	ldr	r3, [r7, #4]
 80bfcac:	801a      	strh	r2, [r3, #0]
 80bfcae:	697b      	ldr	r3, [r7, #20]
 80bfcb0:	3302      	adds	r3, #2
 80bfcb2:	617b      	str	r3, [r7, #20]
 80bfcb4:	69bb      	ldr	r3, [r7, #24]
 80bfcb6:	3302      	adds	r3, #2
 80bfcb8:	61bb      	str	r3, [r7, #24]
 80bfcba:	6979      	ldr	r1, [r7, #20]
 80bfcbc:	2002      	movs	r0, #2
 80bfcbe:	f7fe f859 	bl	80bdd74 <vl53l5_decode_uint16_t>
 80bfcc2:	4603      	mov	r3, r0
 80bfcc4:	461a      	mov	r2, r3
 80bfcc6:	687b      	ldr	r3, [r7, #4]
 80bfcc8:	805a      	strh	r2, [r3, #2]
 80bfcca:	697b      	ldr	r3, [r7, #20]
 80bfccc:	3302      	adds	r3, #2
 80bfcce:	617b      	str	r3, [r7, #20]
 80bfcd0:	69bb      	ldr	r3, [r7, #24]
 80bfcd2:	3302      	adds	r3, #2
 80bfcd4:	61bb      	str	r3, [r7, #24]
 80bfcd6:	68fa      	ldr	r2, [r7, #12]
 80bfcd8:	69bb      	ldr	r3, [r7, #24]
 80bfcda:	429a      	cmp	r2, r3
 80bfcdc:	d003      	beq.n	80bfce6 <_decode_dci_grp_map_version+0x6e>
 80bfcde:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 80bfce2:	61fb      	str	r3, [r7, #28]
 80bfce4:	e000      	b.n	80bfce8 <_decode_dci_grp_map_version+0x70>
 80bfce6:	bf00      	nop
 80bfce8:	69fb      	ldr	r3, [r7, #28]
 80bfcea:	4618      	mov	r0, r3
 80bfcec:	3720      	adds	r7, #32
 80bfcee:	46bd      	mov	sp, r7
 80bfcf0:	bd80      	pop	{r7, pc}

080bfcf2 <_decode_dci_grp_silicon_temperature_data>:
 80bfcf2:	b580      	push	{r7, lr}
 80bfcf4:	b088      	sub	sp, #32
 80bfcf6:	af00      	add	r7, sp, #0
 80bfcf8:	60f8      	str	r0, [r7, #12]
 80bfcfa:	60b9      	str	r1, [r7, #8]
 80bfcfc:	607a      	str	r2, [r7, #4]
 80bfcfe:	2300      	movs	r3, #0
 80bfd00:	61fb      	str	r3, [r7, #28]
 80bfd02:	2300      	movs	r3, #0
 80bfd04:	61bb      	str	r3, [r7, #24]
 80bfd06:	68bb      	ldr	r3, [r7, #8]
 80bfd08:	617b      	str	r3, [r7, #20]
 80bfd0a:	68fb      	ldr	r3, [r7, #12]
 80bfd0c:	2b04      	cmp	r3, #4
 80bfd0e:	d903      	bls.n	80bfd18 <_decode_dci_grp_silicon_temperature_data+0x26>
 80bfd10:	f06f 0304 	mvn.w	r3, #4
 80bfd14:	61fb      	str	r3, [r7, #28]
 80bfd16:	e040      	b.n	80bfd9a <_decode_dci_grp_silicon_temperature_data+0xa8>
 80bfd18:	6979      	ldr	r1, [r7, #20]
 80bfd1a:	2001      	movs	r0, #1
 80bfd1c:	f7fe f81b 	bl	80bdd56 <vl53l5_decode_int8_t>
 80bfd20:	4603      	mov	r3, r0
 80bfd22:	461a      	mov	r2, r3
 80bfd24:	687b      	ldr	r3, [r7, #4]
 80bfd26:	701a      	strb	r2, [r3, #0]
 80bfd28:	697b      	ldr	r3, [r7, #20]
 80bfd2a:	3301      	adds	r3, #1
 80bfd2c:	617b      	str	r3, [r7, #20]
 80bfd2e:	69bb      	ldr	r3, [r7, #24]
 80bfd30:	3301      	adds	r3, #1
 80bfd32:	61bb      	str	r3, [r7, #24]
 80bfd34:	6979      	ldr	r1, [r7, #20]
 80bfd36:	2001      	movs	r0, #1
 80bfd38:	f7fe f80d 	bl	80bdd56 <vl53l5_decode_int8_t>
 80bfd3c:	4603      	mov	r3, r0
 80bfd3e:	461a      	mov	r2, r3
 80bfd40:	687b      	ldr	r3, [r7, #4]
 80bfd42:	705a      	strb	r2, [r3, #1]
 80bfd44:	697b      	ldr	r3, [r7, #20]
 80bfd46:	3301      	adds	r3, #1
 80bfd48:	617b      	str	r3, [r7, #20]
 80bfd4a:	69bb      	ldr	r3, [r7, #24]
 80bfd4c:	3301      	adds	r3, #1
 80bfd4e:	61bb      	str	r3, [r7, #24]
 80bfd50:	6979      	ldr	r1, [r7, #20]
 80bfd52:	2001      	movs	r0, #1
 80bfd54:	f7fd ffff 	bl	80bdd56 <vl53l5_decode_int8_t>
 80bfd58:	4603      	mov	r3, r0
 80bfd5a:	461a      	mov	r2, r3
 80bfd5c:	687b      	ldr	r3, [r7, #4]
 80bfd5e:	709a      	strb	r2, [r3, #2]
 80bfd60:	697b      	ldr	r3, [r7, #20]
 80bfd62:	3301      	adds	r3, #1
 80bfd64:	617b      	str	r3, [r7, #20]
 80bfd66:	69bb      	ldr	r3, [r7, #24]
 80bfd68:	3301      	adds	r3, #1
 80bfd6a:	61bb      	str	r3, [r7, #24]
 80bfd6c:	6979      	ldr	r1, [r7, #20]
 80bfd6e:	2001      	movs	r0, #1
 80bfd70:	f7fd fff1 	bl	80bdd56 <vl53l5_decode_int8_t>
 80bfd74:	4603      	mov	r3, r0
 80bfd76:	461a      	mov	r2, r3
 80bfd78:	687b      	ldr	r3, [r7, #4]
 80bfd7a:	70da      	strb	r2, [r3, #3]
 80bfd7c:	697b      	ldr	r3, [r7, #20]
 80bfd7e:	3301      	adds	r3, #1
 80bfd80:	617b      	str	r3, [r7, #20]
 80bfd82:	69bb      	ldr	r3, [r7, #24]
 80bfd84:	3301      	adds	r3, #1
 80bfd86:	61bb      	str	r3, [r7, #24]
 80bfd88:	68fa      	ldr	r2, [r7, #12]
 80bfd8a:	69bb      	ldr	r3, [r7, #24]
 80bfd8c:	429a      	cmp	r2, r3
 80bfd8e:	d003      	beq.n	80bfd98 <_decode_dci_grp_silicon_temperature_data+0xa6>
 80bfd90:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 80bfd94:	61fb      	str	r3, [r7, #28]
 80bfd96:	e000      	b.n	80bfd9a <_decode_dci_grp_silicon_temperature_data+0xa8>
 80bfd98:	bf00      	nop
 80bfd9a:	69fb      	ldr	r3, [r7, #28]
 80bfd9c:	4618      	mov	r0, r3
 80bfd9e:	3720      	adds	r7, #32
 80bfda0:	46bd      	mov	sp, r7
 80bfda2:	bd80      	pop	{r7, pc}

080bfda4 <_decode_dci_grp_zone_cfg>:
 80bfda4:	b580      	push	{r7, lr}
 80bfda6:	b088      	sub	sp, #32
 80bfda8:	af00      	add	r7, sp, #0
 80bfdaa:	60f8      	str	r0, [r7, #12]
 80bfdac:	60b9      	str	r1, [r7, #8]
 80bfdae:	607a      	str	r2, [r7, #4]
 80bfdb0:	2300      	movs	r3, #0
 80bfdb2:	61fb      	str	r3, [r7, #28]
 80bfdb4:	2300      	movs	r3, #0
 80bfdb6:	61bb      	str	r3, [r7, #24]
 80bfdb8:	68bb      	ldr	r3, [r7, #8]
 80bfdba:	617b      	str	r3, [r7, #20]
 80bfdbc:	68fb      	ldr	r3, [r7, #12]
 80bfdbe:	2b08      	cmp	r3, #8
 80bfdc0:	d903      	bls.n	80bfdca <_decode_dci_grp_zone_cfg+0x26>
 80bfdc2:	f06f 0304 	mvn.w	r3, #4
 80bfdc6:	61fb      	str	r3, [r7, #28]
 80bfdc8:	e078      	b.n	80bfebc <_decode_dci_grp_zone_cfg+0x118>
 80bfdca:	6979      	ldr	r1, [r7, #20]
 80bfdcc:	2001      	movs	r0, #1
 80bfdce:	f7fd ffb4 	bl	80bdd3a <vl53l5_decode_uint8_t>
 80bfdd2:	4603      	mov	r3, r0
 80bfdd4:	461a      	mov	r2, r3
 80bfdd6:	687b      	ldr	r3, [r7, #4]
 80bfdd8:	701a      	strb	r2, [r3, #0]
 80bfdda:	697b      	ldr	r3, [r7, #20]
 80bfddc:	3301      	adds	r3, #1
 80bfdde:	617b      	str	r3, [r7, #20]
 80bfde0:	69bb      	ldr	r3, [r7, #24]
 80bfde2:	3301      	adds	r3, #1
 80bfde4:	61bb      	str	r3, [r7, #24]
 80bfde6:	6979      	ldr	r1, [r7, #20]
 80bfde8:	2001      	movs	r0, #1
 80bfdea:	f7fd ffa6 	bl	80bdd3a <vl53l5_decode_uint8_t>
 80bfdee:	4603      	mov	r3, r0
 80bfdf0:	461a      	mov	r2, r3
 80bfdf2:	687b      	ldr	r3, [r7, #4]
 80bfdf4:	705a      	strb	r2, [r3, #1]
 80bfdf6:	697b      	ldr	r3, [r7, #20]
 80bfdf8:	3301      	adds	r3, #1
 80bfdfa:	617b      	str	r3, [r7, #20]
 80bfdfc:	69bb      	ldr	r3, [r7, #24]
 80bfdfe:	3301      	adds	r3, #1
 80bfe00:	61bb      	str	r3, [r7, #24]
 80bfe02:	6979      	ldr	r1, [r7, #20]
 80bfe04:	2001      	movs	r0, #1
 80bfe06:	f7fd ff98 	bl	80bdd3a <vl53l5_decode_uint8_t>
 80bfe0a:	4603      	mov	r3, r0
 80bfe0c:	461a      	mov	r2, r3
 80bfe0e:	687b      	ldr	r3, [r7, #4]
 80bfe10:	709a      	strb	r2, [r3, #2]
 80bfe12:	697b      	ldr	r3, [r7, #20]
 80bfe14:	3301      	adds	r3, #1
 80bfe16:	617b      	str	r3, [r7, #20]
 80bfe18:	69bb      	ldr	r3, [r7, #24]
 80bfe1a:	3301      	adds	r3, #1
 80bfe1c:	61bb      	str	r3, [r7, #24]
 80bfe1e:	6979      	ldr	r1, [r7, #20]
 80bfe20:	2001      	movs	r0, #1
 80bfe22:	f7fd ff8a 	bl	80bdd3a <vl53l5_decode_uint8_t>
 80bfe26:	4603      	mov	r3, r0
 80bfe28:	461a      	mov	r2, r3
 80bfe2a:	687b      	ldr	r3, [r7, #4]
 80bfe2c:	70da      	strb	r2, [r3, #3]
 80bfe2e:	697b      	ldr	r3, [r7, #20]
 80bfe30:	3301      	adds	r3, #1
 80bfe32:	617b      	str	r3, [r7, #20]
 80bfe34:	69bb      	ldr	r3, [r7, #24]
 80bfe36:	3301      	adds	r3, #1
 80bfe38:	61bb      	str	r3, [r7, #24]
 80bfe3a:	6979      	ldr	r1, [r7, #20]
 80bfe3c:	2001      	movs	r0, #1
 80bfe3e:	f7fd ff7c 	bl	80bdd3a <vl53l5_decode_uint8_t>
 80bfe42:	4603      	mov	r3, r0
 80bfe44:	461a      	mov	r2, r3
 80bfe46:	687b      	ldr	r3, [r7, #4]
 80bfe48:	711a      	strb	r2, [r3, #4]
 80bfe4a:	697b      	ldr	r3, [r7, #20]
 80bfe4c:	3301      	adds	r3, #1
 80bfe4e:	617b      	str	r3, [r7, #20]
 80bfe50:	69bb      	ldr	r3, [r7, #24]
 80bfe52:	3301      	adds	r3, #1
 80bfe54:	61bb      	str	r3, [r7, #24]
 80bfe56:	6979      	ldr	r1, [r7, #20]
 80bfe58:	2001      	movs	r0, #1
 80bfe5a:	f7fd ff6e 	bl	80bdd3a <vl53l5_decode_uint8_t>
 80bfe5e:	4603      	mov	r3, r0
 80bfe60:	461a      	mov	r2, r3
 80bfe62:	687b      	ldr	r3, [r7, #4]
 80bfe64:	715a      	strb	r2, [r3, #5]
 80bfe66:	697b      	ldr	r3, [r7, #20]
 80bfe68:	3301      	adds	r3, #1
 80bfe6a:	617b      	str	r3, [r7, #20]
 80bfe6c:	69bb      	ldr	r3, [r7, #24]
 80bfe6e:	3301      	adds	r3, #1
 80bfe70:	61bb      	str	r3, [r7, #24]
 80bfe72:	6979      	ldr	r1, [r7, #20]
 80bfe74:	2001      	movs	r0, #1
 80bfe76:	f7fd ff60 	bl	80bdd3a <vl53l5_decode_uint8_t>
 80bfe7a:	4603      	mov	r3, r0
 80bfe7c:	461a      	mov	r2, r3
 80bfe7e:	687b      	ldr	r3, [r7, #4]
 80bfe80:	719a      	strb	r2, [r3, #6]
 80bfe82:	697b      	ldr	r3, [r7, #20]
 80bfe84:	3301      	adds	r3, #1
 80bfe86:	617b      	str	r3, [r7, #20]
 80bfe88:	69bb      	ldr	r3, [r7, #24]
 80bfe8a:	3301      	adds	r3, #1
 80bfe8c:	61bb      	str	r3, [r7, #24]
 80bfe8e:	6979      	ldr	r1, [r7, #20]
 80bfe90:	2001      	movs	r0, #1
 80bfe92:	f7fd ff52 	bl	80bdd3a <vl53l5_decode_uint8_t>
 80bfe96:	4603      	mov	r3, r0
 80bfe98:	461a      	mov	r2, r3
 80bfe9a:	687b      	ldr	r3, [r7, #4]
 80bfe9c:	71da      	strb	r2, [r3, #7]
 80bfe9e:	697b      	ldr	r3, [r7, #20]
 80bfea0:	3301      	adds	r3, #1
 80bfea2:	617b      	str	r3, [r7, #20]
 80bfea4:	69bb      	ldr	r3, [r7, #24]
 80bfea6:	3301      	adds	r3, #1
 80bfea8:	61bb      	str	r3, [r7, #24]
 80bfeaa:	68fa      	ldr	r2, [r7, #12]
 80bfeac:	69bb      	ldr	r3, [r7, #24]
 80bfeae:	429a      	cmp	r2, r3
 80bfeb0:	d003      	beq.n	80bfeba <_decode_dci_grp_zone_cfg+0x116>
 80bfeb2:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 80bfeb6:	61fb      	str	r3, [r7, #28]
 80bfeb8:	e000      	b.n	80bfebc <_decode_dci_grp_zone_cfg+0x118>
 80bfeba:	bf00      	nop
 80bfebc:	69fb      	ldr	r3, [r7, #28]
 80bfebe:	4618      	mov	r0, r3
 80bfec0:	3720      	adds	r7, #32
 80bfec2:	46bd      	mov	sp, r7
 80bfec4:	bd80      	pop	{r7, pc}

080bfec6 <vl53l5_core_decode_cmd>:
 80bfec6:	b580      	push	{r7, lr}
 80bfec8:	b086      	sub	sp, #24
 80bfeca:	af00      	add	r7, sp, #0
 80bfecc:	60b9      	str	r1, [r7, #8]
 80bfece:	607a      	str	r2, [r7, #4]
 80bfed0:	603b      	str	r3, [r7, #0]
 80bfed2:	4603      	mov	r3, r0
 80bfed4:	81fb      	strh	r3, [r7, #14]
 80bfed6:	2300      	movs	r3, #0
 80bfed8:	617b      	str	r3, [r7, #20]
 80bfeda:	89fb      	ldrh	r3, [r7, #14]
 80bfedc:	f245 4250 	movw	r2, #21584	; 0x5450
 80bfee0:	4293      	cmp	r3, r2
 80bfee2:	d00f      	beq.n	80bff04 <vl53l5_core_decode_cmd+0x3e>
 80bfee4:	f245 4254 	movw	r2, #21588	; 0x5454
 80bfee8:	4293      	cmp	r3, r2
 80bfeea:	d014      	beq.n	80bff16 <vl53l5_core_decode_cmd+0x50>
 80bfeec:	f5b3 4fa8 	cmp.w	r3, #21504	; 0x5400
 80bfef0:	d11a      	bne.n	80bff28 <vl53l5_core_decode_cmd+0x62>
 80bfef2:	683b      	ldr	r3, [r7, #0]
 80bfef4:	3340      	adds	r3, #64	; 0x40
 80bfef6:	461a      	mov	r2, r3
 80bfef8:	6879      	ldr	r1, [r7, #4]
 80bfefa:	68b8      	ldr	r0, [r7, #8]
 80bfefc:	f7ff febc 	bl	80bfc78 <_decode_dci_grp_map_version>
 80bff00:	6178      	str	r0, [r7, #20]
 80bff02:	e015      	b.n	80bff30 <vl53l5_core_decode_cmd+0x6a>
 80bff04:	683b      	ldr	r3, [r7, #0]
 80bff06:	3344      	adds	r3, #68	; 0x44
 80bff08:	461a      	mov	r2, r3
 80bff0a:	6879      	ldr	r1, [r7, #4]
 80bff0c:	68b8      	ldr	r0, [r7, #8]
 80bff0e:	f7ff fef0 	bl	80bfcf2 <_decode_dci_grp_silicon_temperature_data>
 80bff12:	6178      	str	r0, [r7, #20]
 80bff14:	e00c      	b.n	80bff30 <vl53l5_core_decode_cmd+0x6a>
 80bff16:	683b      	ldr	r3, [r7, #0]
 80bff18:	3348      	adds	r3, #72	; 0x48
 80bff1a:	461a      	mov	r2, r3
 80bff1c:	6879      	ldr	r1, [r7, #4]
 80bff1e:	68b8      	ldr	r0, [r7, #8]
 80bff20:	f7ff ff40 	bl	80bfda4 <_decode_dci_grp_zone_cfg>
 80bff24:	6178      	str	r0, [r7, #20]
 80bff26:	e003      	b.n	80bff30 <vl53l5_core_decode_cmd+0x6a>
 80bff28:	f06f 0308 	mvn.w	r3, #8
 80bff2c:	617b      	str	r3, [r7, #20]
 80bff2e:	bf00      	nop
 80bff30:	697b      	ldr	r3, [r7, #20]
 80bff32:	4618      	mov	r0, r3
 80bff34:	3718      	adds	r7, #24
 80bff36:	46bd      	mov	sp, r7
 80bff38:	bd80      	pop	{r7, pc}
	...

080bff3c <calloc>:
 80bff3c:	4b02      	ldr	r3, [pc, #8]	; (80bff48 <calloc+0xc>)
 80bff3e:	460a      	mov	r2, r1
 80bff40:	4601      	mov	r1, r0
 80bff42:	6818      	ldr	r0, [r3, #0]
 80bff44:	f000 b842 	b.w	80bffcc <_calloc_r>
 80bff48:	20007cc0 	.word	0x20007cc0

080bff4c <__errno>:
 80bff4c:	4b01      	ldr	r3, [pc, #4]	; (80bff54 <__errno+0x8>)
 80bff4e:	6818      	ldr	r0, [r3, #0]
 80bff50:	4770      	bx	lr
 80bff52:	bf00      	nop
 80bff54:	20007cc0 	.word	0x20007cc0

080bff58 <__libc_init_array>:
 80bff58:	b570      	push	{r4, r5, r6, lr}
 80bff5a:	4d0d      	ldr	r5, [pc, #52]	; (80bff90 <__libc_init_array+0x38>)
 80bff5c:	4c0d      	ldr	r4, [pc, #52]	; (80bff94 <__libc_init_array+0x3c>)
 80bff5e:	1b64      	subs	r4, r4, r5
 80bff60:	10a4      	asrs	r4, r4, #2
 80bff62:	2600      	movs	r6, #0
 80bff64:	42a6      	cmp	r6, r4
 80bff66:	d109      	bne.n	80bff7c <__libc_init_array+0x24>
 80bff68:	4d0b      	ldr	r5, [pc, #44]	; (80bff98 <__libc_init_array+0x40>)
 80bff6a:	4c0c      	ldr	r4, [pc, #48]	; (80bff9c <__libc_init_array+0x44>)
 80bff6c:	f004 fdfc 	bl	80c4b68 <_init>
 80bff70:	1b64      	subs	r4, r4, r5
 80bff72:	10a4      	asrs	r4, r4, #2
 80bff74:	2600      	movs	r6, #0
 80bff76:	42a6      	cmp	r6, r4
 80bff78:	d105      	bne.n	80bff86 <__libc_init_array+0x2e>
 80bff7a:	bd70      	pop	{r4, r5, r6, pc}
 80bff7c:	f855 3b04 	ldr.w	r3, [r5], #4
 80bff80:	4798      	blx	r3
 80bff82:	3601      	adds	r6, #1
 80bff84:	e7ee      	b.n	80bff64 <__libc_init_array+0xc>
 80bff86:	f855 3b04 	ldr.w	r3, [r5], #4
 80bff8a:	4798      	blx	r3
 80bff8c:	3601      	adds	r6, #1
 80bff8e:	e7f2      	b.n	80bff76 <__libc_init_array+0x1e>
 80bff90:	080ddae8 	.word	0x080ddae8
 80bff94:	080ddae8 	.word	0x080ddae8
 80bff98:	080ddae8 	.word	0x080ddae8
 80bff9c:	080ddaec 	.word	0x080ddaec

080bffa0 <memcpy>:
 80bffa0:	440a      	add	r2, r1
 80bffa2:	4291      	cmp	r1, r2
 80bffa4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80bffa8:	d100      	bne.n	80bffac <memcpy+0xc>
 80bffaa:	4770      	bx	lr
 80bffac:	b510      	push	{r4, lr}
 80bffae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80bffb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80bffb6:	4291      	cmp	r1, r2
 80bffb8:	d1f9      	bne.n	80bffae <memcpy+0xe>
 80bffba:	bd10      	pop	{r4, pc}

080bffbc <memset>:
 80bffbc:	4402      	add	r2, r0
 80bffbe:	4603      	mov	r3, r0
 80bffc0:	4293      	cmp	r3, r2
 80bffc2:	d100      	bne.n	80bffc6 <memset+0xa>
 80bffc4:	4770      	bx	lr
 80bffc6:	f803 1b01 	strb.w	r1, [r3], #1
 80bffca:	e7f9      	b.n	80bffc0 <memset+0x4>

080bffcc <_calloc_r>:
 80bffcc:	b513      	push	{r0, r1, r4, lr}
 80bffce:	434a      	muls	r2, r1
 80bffd0:	4611      	mov	r1, r2
 80bffd2:	9201      	str	r2, [sp, #4]
 80bffd4:	f000 f80a 	bl	80bffec <_malloc_r>
 80bffd8:	4604      	mov	r4, r0
 80bffda:	b118      	cbz	r0, 80bffe4 <_calloc_r+0x18>
 80bffdc:	9a01      	ldr	r2, [sp, #4]
 80bffde:	2100      	movs	r1, #0
 80bffe0:	f7ff ffec 	bl	80bffbc <memset>
 80bffe4:	4620      	mov	r0, r4
 80bffe6:	b002      	add	sp, #8
 80bffe8:	bd10      	pop	{r4, pc}
	...

080bffec <_malloc_r>:
 80bffec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80bffee:	1ccd      	adds	r5, r1, #3
 80bfff0:	f025 0503 	bic.w	r5, r5, #3
 80bfff4:	3508      	adds	r5, #8
 80bfff6:	2d0c      	cmp	r5, #12
 80bfff8:	bf38      	it	cc
 80bfffa:	250c      	movcc	r5, #12
 80bfffc:	2d00      	cmp	r5, #0
 80bfffe:	4606      	mov	r6, r0
 80c0000:	db01      	blt.n	80c0006 <_malloc_r+0x1a>
 80c0002:	42a9      	cmp	r1, r5
 80c0004:	d903      	bls.n	80c000e <_malloc_r+0x22>
 80c0006:	230c      	movs	r3, #12
 80c0008:	6033      	str	r3, [r6, #0]
 80c000a:	2000      	movs	r0, #0
 80c000c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80c000e:	f001 fecb 	bl	80c1da8 <__malloc_lock>
 80c0012:	4921      	ldr	r1, [pc, #132]	; (80c0098 <_malloc_r+0xac>)
 80c0014:	680a      	ldr	r2, [r1, #0]
 80c0016:	4614      	mov	r4, r2
 80c0018:	b99c      	cbnz	r4, 80c0042 <_malloc_r+0x56>
 80c001a:	4f20      	ldr	r7, [pc, #128]	; (80c009c <_malloc_r+0xb0>)
 80c001c:	683b      	ldr	r3, [r7, #0]
 80c001e:	b923      	cbnz	r3, 80c002a <_malloc_r+0x3e>
 80c0020:	4621      	mov	r1, r4
 80c0022:	4630      	mov	r0, r6
 80c0024:	f000 fd4a 	bl	80c0abc <_sbrk_r>
 80c0028:	6038      	str	r0, [r7, #0]
 80c002a:	4629      	mov	r1, r5
 80c002c:	4630      	mov	r0, r6
 80c002e:	f000 fd45 	bl	80c0abc <_sbrk_r>
 80c0032:	1c43      	adds	r3, r0, #1
 80c0034:	d123      	bne.n	80c007e <_malloc_r+0x92>
 80c0036:	230c      	movs	r3, #12
 80c0038:	6033      	str	r3, [r6, #0]
 80c003a:	4630      	mov	r0, r6
 80c003c:	f001 feba 	bl	80c1db4 <__malloc_unlock>
 80c0040:	e7e3      	b.n	80c000a <_malloc_r+0x1e>
 80c0042:	6823      	ldr	r3, [r4, #0]
 80c0044:	1b5b      	subs	r3, r3, r5
 80c0046:	d417      	bmi.n	80c0078 <_malloc_r+0x8c>
 80c0048:	2b0b      	cmp	r3, #11
 80c004a:	d903      	bls.n	80c0054 <_malloc_r+0x68>
 80c004c:	6023      	str	r3, [r4, #0]
 80c004e:	441c      	add	r4, r3
 80c0050:	6025      	str	r5, [r4, #0]
 80c0052:	e004      	b.n	80c005e <_malloc_r+0x72>
 80c0054:	6863      	ldr	r3, [r4, #4]
 80c0056:	42a2      	cmp	r2, r4
 80c0058:	bf0c      	ite	eq
 80c005a:	600b      	streq	r3, [r1, #0]
 80c005c:	6053      	strne	r3, [r2, #4]
 80c005e:	4630      	mov	r0, r6
 80c0060:	f001 fea8 	bl	80c1db4 <__malloc_unlock>
 80c0064:	f104 000b 	add.w	r0, r4, #11
 80c0068:	1d23      	adds	r3, r4, #4
 80c006a:	f020 0007 	bic.w	r0, r0, #7
 80c006e:	1ac2      	subs	r2, r0, r3
 80c0070:	d0cc      	beq.n	80c000c <_malloc_r+0x20>
 80c0072:	1a1b      	subs	r3, r3, r0
 80c0074:	50a3      	str	r3, [r4, r2]
 80c0076:	e7c9      	b.n	80c000c <_malloc_r+0x20>
 80c0078:	4622      	mov	r2, r4
 80c007a:	6864      	ldr	r4, [r4, #4]
 80c007c:	e7cc      	b.n	80c0018 <_malloc_r+0x2c>
 80c007e:	1cc4      	adds	r4, r0, #3
 80c0080:	f024 0403 	bic.w	r4, r4, #3
 80c0084:	42a0      	cmp	r0, r4
 80c0086:	d0e3      	beq.n	80c0050 <_malloc_r+0x64>
 80c0088:	1a21      	subs	r1, r4, r0
 80c008a:	4630      	mov	r0, r6
 80c008c:	f000 fd16 	bl	80c0abc <_sbrk_r>
 80c0090:	3001      	adds	r0, #1
 80c0092:	d1dd      	bne.n	80c0050 <_malloc_r+0x64>
 80c0094:	e7cf      	b.n	80c0036 <_malloc_r+0x4a>
 80c0096:	bf00      	nop
 80c0098:	2001b56c 	.word	0x2001b56c
 80c009c:	2001b570 	.word	0x2001b570

080c00a0 <__cvt>:
 80c00a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80c00a4:	ec55 4b10 	vmov	r4, r5, d0
 80c00a8:	2d00      	cmp	r5, #0
 80c00aa:	460e      	mov	r6, r1
 80c00ac:	4619      	mov	r1, r3
 80c00ae:	462b      	mov	r3, r5
 80c00b0:	bfbb      	ittet	lt
 80c00b2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80c00b6:	461d      	movlt	r5, r3
 80c00b8:	2300      	movge	r3, #0
 80c00ba:	232d      	movlt	r3, #45	; 0x2d
 80c00bc:	700b      	strb	r3, [r1, #0]
 80c00be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80c00c0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80c00c4:	4691      	mov	r9, r2
 80c00c6:	f023 0820 	bic.w	r8, r3, #32
 80c00ca:	bfbc      	itt	lt
 80c00cc:	4622      	movlt	r2, r4
 80c00ce:	4614      	movlt	r4, r2
 80c00d0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80c00d4:	d005      	beq.n	80c00e2 <__cvt+0x42>
 80c00d6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80c00da:	d100      	bne.n	80c00de <__cvt+0x3e>
 80c00dc:	3601      	adds	r6, #1
 80c00de:	2102      	movs	r1, #2
 80c00e0:	e000      	b.n	80c00e4 <__cvt+0x44>
 80c00e2:	2103      	movs	r1, #3
 80c00e4:	ab03      	add	r3, sp, #12
 80c00e6:	9301      	str	r3, [sp, #4]
 80c00e8:	ab02      	add	r3, sp, #8
 80c00ea:	9300      	str	r3, [sp, #0]
 80c00ec:	ec45 4b10 	vmov	d0, r4, r5
 80c00f0:	4653      	mov	r3, sl
 80c00f2:	4632      	mov	r2, r6
 80c00f4:	f000 fe40 	bl	80c0d78 <_dtoa_r>
 80c00f8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80c00fc:	4607      	mov	r7, r0
 80c00fe:	d102      	bne.n	80c0106 <__cvt+0x66>
 80c0100:	f019 0f01 	tst.w	r9, #1
 80c0104:	d022      	beq.n	80c014c <__cvt+0xac>
 80c0106:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80c010a:	eb07 0906 	add.w	r9, r7, r6
 80c010e:	d110      	bne.n	80c0132 <__cvt+0x92>
 80c0110:	783b      	ldrb	r3, [r7, #0]
 80c0112:	2b30      	cmp	r3, #48	; 0x30
 80c0114:	d10a      	bne.n	80c012c <__cvt+0x8c>
 80c0116:	2200      	movs	r2, #0
 80c0118:	2300      	movs	r3, #0
 80c011a:	4620      	mov	r0, r4
 80c011c:	4629      	mov	r1, r5
 80c011e:	f7e0 fcd3 	bl	80a0ac8 <__aeabi_dcmpeq>
 80c0122:	b918      	cbnz	r0, 80c012c <__cvt+0x8c>
 80c0124:	f1c6 0601 	rsb	r6, r6, #1
 80c0128:	f8ca 6000 	str.w	r6, [sl]
 80c012c:	f8da 3000 	ldr.w	r3, [sl]
 80c0130:	4499      	add	r9, r3
 80c0132:	2200      	movs	r2, #0
 80c0134:	2300      	movs	r3, #0
 80c0136:	4620      	mov	r0, r4
 80c0138:	4629      	mov	r1, r5
 80c013a:	f7e0 fcc5 	bl	80a0ac8 <__aeabi_dcmpeq>
 80c013e:	b108      	cbz	r0, 80c0144 <__cvt+0xa4>
 80c0140:	f8cd 900c 	str.w	r9, [sp, #12]
 80c0144:	2230      	movs	r2, #48	; 0x30
 80c0146:	9b03      	ldr	r3, [sp, #12]
 80c0148:	454b      	cmp	r3, r9
 80c014a:	d307      	bcc.n	80c015c <__cvt+0xbc>
 80c014c:	9b03      	ldr	r3, [sp, #12]
 80c014e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80c0150:	1bdb      	subs	r3, r3, r7
 80c0152:	4638      	mov	r0, r7
 80c0154:	6013      	str	r3, [r2, #0]
 80c0156:	b004      	add	sp, #16
 80c0158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80c015c:	1c59      	adds	r1, r3, #1
 80c015e:	9103      	str	r1, [sp, #12]
 80c0160:	701a      	strb	r2, [r3, #0]
 80c0162:	e7f0      	b.n	80c0146 <__cvt+0xa6>

080c0164 <__exponent>:
 80c0164:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80c0166:	4603      	mov	r3, r0
 80c0168:	2900      	cmp	r1, #0
 80c016a:	bfb8      	it	lt
 80c016c:	4249      	neglt	r1, r1
 80c016e:	f803 2b02 	strb.w	r2, [r3], #2
 80c0172:	bfb4      	ite	lt
 80c0174:	222d      	movlt	r2, #45	; 0x2d
 80c0176:	222b      	movge	r2, #43	; 0x2b
 80c0178:	2909      	cmp	r1, #9
 80c017a:	7042      	strb	r2, [r0, #1]
 80c017c:	dd2a      	ble.n	80c01d4 <__exponent+0x70>
 80c017e:	f10d 0407 	add.w	r4, sp, #7
 80c0182:	46a4      	mov	ip, r4
 80c0184:	270a      	movs	r7, #10
 80c0186:	46a6      	mov	lr, r4
 80c0188:	460a      	mov	r2, r1
 80c018a:	fb91 f6f7 	sdiv	r6, r1, r7
 80c018e:	fb07 1516 	mls	r5, r7, r6, r1
 80c0192:	3530      	adds	r5, #48	; 0x30
 80c0194:	2a63      	cmp	r2, #99	; 0x63
 80c0196:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80c019a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80c019e:	4631      	mov	r1, r6
 80c01a0:	dcf1      	bgt.n	80c0186 <__exponent+0x22>
 80c01a2:	3130      	adds	r1, #48	; 0x30
 80c01a4:	f1ae 0502 	sub.w	r5, lr, #2
 80c01a8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80c01ac:	1c44      	adds	r4, r0, #1
 80c01ae:	4629      	mov	r1, r5
 80c01b0:	4561      	cmp	r1, ip
 80c01b2:	d30a      	bcc.n	80c01ca <__exponent+0x66>
 80c01b4:	f10d 0209 	add.w	r2, sp, #9
 80c01b8:	eba2 020e 	sub.w	r2, r2, lr
 80c01bc:	4565      	cmp	r5, ip
 80c01be:	bf88      	it	hi
 80c01c0:	2200      	movhi	r2, #0
 80c01c2:	4413      	add	r3, r2
 80c01c4:	1a18      	subs	r0, r3, r0
 80c01c6:	b003      	add	sp, #12
 80c01c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80c01ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80c01ce:	f804 2f01 	strb.w	r2, [r4, #1]!
 80c01d2:	e7ed      	b.n	80c01b0 <__exponent+0x4c>
 80c01d4:	2330      	movs	r3, #48	; 0x30
 80c01d6:	3130      	adds	r1, #48	; 0x30
 80c01d8:	7083      	strb	r3, [r0, #2]
 80c01da:	70c1      	strb	r1, [r0, #3]
 80c01dc:	1d03      	adds	r3, r0, #4
 80c01de:	e7f1      	b.n	80c01c4 <__exponent+0x60>

080c01e0 <_printf_float>:
 80c01e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80c01e4:	ed2d 8b02 	vpush	{d8}
 80c01e8:	b08d      	sub	sp, #52	; 0x34
 80c01ea:	460c      	mov	r4, r1
 80c01ec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80c01f0:	4616      	mov	r6, r2
 80c01f2:	461f      	mov	r7, r3
 80c01f4:	4605      	mov	r5, r0
 80c01f6:	f001 fd63 	bl	80c1cc0 <_localeconv_r>
 80c01fa:	f8d0 a000 	ldr.w	sl, [r0]
 80c01fe:	4650      	mov	r0, sl
 80c0200:	f7df ffe6 	bl	80a01d0 <strlen>
 80c0204:	2300      	movs	r3, #0
 80c0206:	930a      	str	r3, [sp, #40]	; 0x28
 80c0208:	6823      	ldr	r3, [r4, #0]
 80c020a:	9305      	str	r3, [sp, #20]
 80c020c:	f8d8 3000 	ldr.w	r3, [r8]
 80c0210:	f894 b018 	ldrb.w	fp, [r4, #24]
 80c0214:	3307      	adds	r3, #7
 80c0216:	f023 0307 	bic.w	r3, r3, #7
 80c021a:	f103 0208 	add.w	r2, r3, #8
 80c021e:	f8c8 2000 	str.w	r2, [r8]
 80c0222:	e9d3 2300 	ldrd	r2, r3, [r3]
 80c0226:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80c022a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80c022e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80c0232:	9307      	str	r3, [sp, #28]
 80c0234:	f8cd 8018 	str.w	r8, [sp, #24]
 80c0238:	ee08 0a10 	vmov	s16, r0
 80c023c:	4b9f      	ldr	r3, [pc, #636]	; (80c04bc <_printf_float+0x2dc>)
 80c023e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80c0242:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80c0246:	f7e0 fc71 	bl	80a0b2c <__aeabi_dcmpun>
 80c024a:	bb88      	cbnz	r0, 80c02b0 <_printf_float+0xd0>
 80c024c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80c0250:	4b9a      	ldr	r3, [pc, #616]	; (80c04bc <_printf_float+0x2dc>)
 80c0252:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80c0256:	f7e0 fc4b 	bl	80a0af0 <__aeabi_dcmple>
 80c025a:	bb48      	cbnz	r0, 80c02b0 <_printf_float+0xd0>
 80c025c:	2200      	movs	r2, #0
 80c025e:	2300      	movs	r3, #0
 80c0260:	4640      	mov	r0, r8
 80c0262:	4649      	mov	r1, r9
 80c0264:	f7e0 fc3a 	bl	80a0adc <__aeabi_dcmplt>
 80c0268:	b110      	cbz	r0, 80c0270 <_printf_float+0x90>
 80c026a:	232d      	movs	r3, #45	; 0x2d
 80c026c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80c0270:	4b93      	ldr	r3, [pc, #588]	; (80c04c0 <_printf_float+0x2e0>)
 80c0272:	4894      	ldr	r0, [pc, #592]	; (80c04c4 <_printf_float+0x2e4>)
 80c0274:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80c0278:	bf94      	ite	ls
 80c027a:	4698      	movls	r8, r3
 80c027c:	4680      	movhi	r8, r0
 80c027e:	2303      	movs	r3, #3
 80c0280:	6123      	str	r3, [r4, #16]
 80c0282:	9b05      	ldr	r3, [sp, #20]
 80c0284:	f023 0204 	bic.w	r2, r3, #4
 80c0288:	6022      	str	r2, [r4, #0]
 80c028a:	f04f 0900 	mov.w	r9, #0
 80c028e:	9700      	str	r7, [sp, #0]
 80c0290:	4633      	mov	r3, r6
 80c0292:	aa0b      	add	r2, sp, #44	; 0x2c
 80c0294:	4621      	mov	r1, r4
 80c0296:	4628      	mov	r0, r5
 80c0298:	f000 f9d8 	bl	80c064c <_printf_common>
 80c029c:	3001      	adds	r0, #1
 80c029e:	f040 8090 	bne.w	80c03c2 <_printf_float+0x1e2>
 80c02a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80c02a6:	b00d      	add	sp, #52	; 0x34
 80c02a8:	ecbd 8b02 	vpop	{d8}
 80c02ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80c02b0:	4642      	mov	r2, r8
 80c02b2:	464b      	mov	r3, r9
 80c02b4:	4640      	mov	r0, r8
 80c02b6:	4649      	mov	r1, r9
 80c02b8:	f7e0 fc38 	bl	80a0b2c <__aeabi_dcmpun>
 80c02bc:	b140      	cbz	r0, 80c02d0 <_printf_float+0xf0>
 80c02be:	464b      	mov	r3, r9
 80c02c0:	2b00      	cmp	r3, #0
 80c02c2:	bfbc      	itt	lt
 80c02c4:	232d      	movlt	r3, #45	; 0x2d
 80c02c6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80c02ca:	487f      	ldr	r0, [pc, #508]	; (80c04c8 <_printf_float+0x2e8>)
 80c02cc:	4b7f      	ldr	r3, [pc, #508]	; (80c04cc <_printf_float+0x2ec>)
 80c02ce:	e7d1      	b.n	80c0274 <_printf_float+0x94>
 80c02d0:	6863      	ldr	r3, [r4, #4]
 80c02d2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80c02d6:	9206      	str	r2, [sp, #24]
 80c02d8:	1c5a      	adds	r2, r3, #1
 80c02da:	d13f      	bne.n	80c035c <_printf_float+0x17c>
 80c02dc:	2306      	movs	r3, #6
 80c02de:	6063      	str	r3, [r4, #4]
 80c02e0:	9b05      	ldr	r3, [sp, #20]
 80c02e2:	6861      	ldr	r1, [r4, #4]
 80c02e4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80c02e8:	2300      	movs	r3, #0
 80c02ea:	9303      	str	r3, [sp, #12]
 80c02ec:	ab0a      	add	r3, sp, #40	; 0x28
 80c02ee:	e9cd b301 	strd	fp, r3, [sp, #4]
 80c02f2:	ab09      	add	r3, sp, #36	; 0x24
 80c02f4:	ec49 8b10 	vmov	d0, r8, r9
 80c02f8:	9300      	str	r3, [sp, #0]
 80c02fa:	6022      	str	r2, [r4, #0]
 80c02fc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80c0300:	4628      	mov	r0, r5
 80c0302:	f7ff fecd 	bl	80c00a0 <__cvt>
 80c0306:	9b06      	ldr	r3, [sp, #24]
 80c0308:	9909      	ldr	r1, [sp, #36]	; 0x24
 80c030a:	2b47      	cmp	r3, #71	; 0x47
 80c030c:	4680      	mov	r8, r0
 80c030e:	d108      	bne.n	80c0322 <_printf_float+0x142>
 80c0310:	1cc8      	adds	r0, r1, #3
 80c0312:	db02      	blt.n	80c031a <_printf_float+0x13a>
 80c0314:	6863      	ldr	r3, [r4, #4]
 80c0316:	4299      	cmp	r1, r3
 80c0318:	dd41      	ble.n	80c039e <_printf_float+0x1be>
 80c031a:	f1ab 0b02 	sub.w	fp, fp, #2
 80c031e:	fa5f fb8b 	uxtb.w	fp, fp
 80c0322:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80c0326:	d820      	bhi.n	80c036a <_printf_float+0x18a>
 80c0328:	3901      	subs	r1, #1
 80c032a:	465a      	mov	r2, fp
 80c032c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80c0330:	9109      	str	r1, [sp, #36]	; 0x24
 80c0332:	f7ff ff17 	bl	80c0164 <__exponent>
 80c0336:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80c0338:	1813      	adds	r3, r2, r0
 80c033a:	2a01      	cmp	r2, #1
 80c033c:	4681      	mov	r9, r0
 80c033e:	6123      	str	r3, [r4, #16]
 80c0340:	dc02      	bgt.n	80c0348 <_printf_float+0x168>
 80c0342:	6822      	ldr	r2, [r4, #0]
 80c0344:	07d2      	lsls	r2, r2, #31
 80c0346:	d501      	bpl.n	80c034c <_printf_float+0x16c>
 80c0348:	3301      	adds	r3, #1
 80c034a:	6123      	str	r3, [r4, #16]
 80c034c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80c0350:	2b00      	cmp	r3, #0
 80c0352:	d09c      	beq.n	80c028e <_printf_float+0xae>
 80c0354:	232d      	movs	r3, #45	; 0x2d
 80c0356:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80c035a:	e798      	b.n	80c028e <_printf_float+0xae>
 80c035c:	9a06      	ldr	r2, [sp, #24]
 80c035e:	2a47      	cmp	r2, #71	; 0x47
 80c0360:	d1be      	bne.n	80c02e0 <_printf_float+0x100>
 80c0362:	2b00      	cmp	r3, #0
 80c0364:	d1bc      	bne.n	80c02e0 <_printf_float+0x100>
 80c0366:	2301      	movs	r3, #1
 80c0368:	e7b9      	b.n	80c02de <_printf_float+0xfe>
 80c036a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80c036e:	d118      	bne.n	80c03a2 <_printf_float+0x1c2>
 80c0370:	2900      	cmp	r1, #0
 80c0372:	6863      	ldr	r3, [r4, #4]
 80c0374:	dd0b      	ble.n	80c038e <_printf_float+0x1ae>
 80c0376:	6121      	str	r1, [r4, #16]
 80c0378:	b913      	cbnz	r3, 80c0380 <_printf_float+0x1a0>
 80c037a:	6822      	ldr	r2, [r4, #0]
 80c037c:	07d0      	lsls	r0, r2, #31
 80c037e:	d502      	bpl.n	80c0386 <_printf_float+0x1a6>
 80c0380:	3301      	adds	r3, #1
 80c0382:	440b      	add	r3, r1
 80c0384:	6123      	str	r3, [r4, #16]
 80c0386:	65a1      	str	r1, [r4, #88]	; 0x58
 80c0388:	f04f 0900 	mov.w	r9, #0
 80c038c:	e7de      	b.n	80c034c <_printf_float+0x16c>
 80c038e:	b913      	cbnz	r3, 80c0396 <_printf_float+0x1b6>
 80c0390:	6822      	ldr	r2, [r4, #0]
 80c0392:	07d2      	lsls	r2, r2, #31
 80c0394:	d501      	bpl.n	80c039a <_printf_float+0x1ba>
 80c0396:	3302      	adds	r3, #2
 80c0398:	e7f4      	b.n	80c0384 <_printf_float+0x1a4>
 80c039a:	2301      	movs	r3, #1
 80c039c:	e7f2      	b.n	80c0384 <_printf_float+0x1a4>
 80c039e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80c03a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80c03a4:	4299      	cmp	r1, r3
 80c03a6:	db05      	blt.n	80c03b4 <_printf_float+0x1d4>
 80c03a8:	6823      	ldr	r3, [r4, #0]
 80c03aa:	6121      	str	r1, [r4, #16]
 80c03ac:	07d8      	lsls	r0, r3, #31
 80c03ae:	d5ea      	bpl.n	80c0386 <_printf_float+0x1a6>
 80c03b0:	1c4b      	adds	r3, r1, #1
 80c03b2:	e7e7      	b.n	80c0384 <_printf_float+0x1a4>
 80c03b4:	2900      	cmp	r1, #0
 80c03b6:	bfd4      	ite	le
 80c03b8:	f1c1 0202 	rsble	r2, r1, #2
 80c03bc:	2201      	movgt	r2, #1
 80c03be:	4413      	add	r3, r2
 80c03c0:	e7e0      	b.n	80c0384 <_printf_float+0x1a4>
 80c03c2:	6823      	ldr	r3, [r4, #0]
 80c03c4:	055a      	lsls	r2, r3, #21
 80c03c6:	d407      	bmi.n	80c03d8 <_printf_float+0x1f8>
 80c03c8:	6923      	ldr	r3, [r4, #16]
 80c03ca:	4642      	mov	r2, r8
 80c03cc:	4631      	mov	r1, r6
 80c03ce:	4628      	mov	r0, r5
 80c03d0:	47b8      	blx	r7
 80c03d2:	3001      	adds	r0, #1
 80c03d4:	d12c      	bne.n	80c0430 <_printf_float+0x250>
 80c03d6:	e764      	b.n	80c02a2 <_printf_float+0xc2>
 80c03d8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80c03dc:	f240 80e0 	bls.w	80c05a0 <_printf_float+0x3c0>
 80c03e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80c03e4:	2200      	movs	r2, #0
 80c03e6:	2300      	movs	r3, #0
 80c03e8:	f7e0 fb6e 	bl	80a0ac8 <__aeabi_dcmpeq>
 80c03ec:	2800      	cmp	r0, #0
 80c03ee:	d034      	beq.n	80c045a <_printf_float+0x27a>
 80c03f0:	4a37      	ldr	r2, [pc, #220]	; (80c04d0 <_printf_float+0x2f0>)
 80c03f2:	2301      	movs	r3, #1
 80c03f4:	4631      	mov	r1, r6
 80c03f6:	4628      	mov	r0, r5
 80c03f8:	47b8      	blx	r7
 80c03fa:	3001      	adds	r0, #1
 80c03fc:	f43f af51 	beq.w	80c02a2 <_printf_float+0xc2>
 80c0400:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80c0404:	429a      	cmp	r2, r3
 80c0406:	db02      	blt.n	80c040e <_printf_float+0x22e>
 80c0408:	6823      	ldr	r3, [r4, #0]
 80c040a:	07d8      	lsls	r0, r3, #31
 80c040c:	d510      	bpl.n	80c0430 <_printf_float+0x250>
 80c040e:	ee18 3a10 	vmov	r3, s16
 80c0412:	4652      	mov	r2, sl
 80c0414:	4631      	mov	r1, r6
 80c0416:	4628      	mov	r0, r5
 80c0418:	47b8      	blx	r7
 80c041a:	3001      	adds	r0, #1
 80c041c:	f43f af41 	beq.w	80c02a2 <_printf_float+0xc2>
 80c0420:	f04f 0800 	mov.w	r8, #0
 80c0424:	f104 091a 	add.w	r9, r4, #26
 80c0428:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80c042a:	3b01      	subs	r3, #1
 80c042c:	4543      	cmp	r3, r8
 80c042e:	dc09      	bgt.n	80c0444 <_printf_float+0x264>
 80c0430:	6823      	ldr	r3, [r4, #0]
 80c0432:	079b      	lsls	r3, r3, #30
 80c0434:	f100 8105 	bmi.w	80c0642 <_printf_float+0x462>
 80c0438:	68e0      	ldr	r0, [r4, #12]
 80c043a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80c043c:	4298      	cmp	r0, r3
 80c043e:	bfb8      	it	lt
 80c0440:	4618      	movlt	r0, r3
 80c0442:	e730      	b.n	80c02a6 <_printf_float+0xc6>
 80c0444:	2301      	movs	r3, #1
 80c0446:	464a      	mov	r2, r9
 80c0448:	4631      	mov	r1, r6
 80c044a:	4628      	mov	r0, r5
 80c044c:	47b8      	blx	r7
 80c044e:	3001      	adds	r0, #1
 80c0450:	f43f af27 	beq.w	80c02a2 <_printf_float+0xc2>
 80c0454:	f108 0801 	add.w	r8, r8, #1
 80c0458:	e7e6      	b.n	80c0428 <_printf_float+0x248>
 80c045a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80c045c:	2b00      	cmp	r3, #0
 80c045e:	dc39      	bgt.n	80c04d4 <_printf_float+0x2f4>
 80c0460:	4a1b      	ldr	r2, [pc, #108]	; (80c04d0 <_printf_float+0x2f0>)
 80c0462:	2301      	movs	r3, #1
 80c0464:	4631      	mov	r1, r6
 80c0466:	4628      	mov	r0, r5
 80c0468:	47b8      	blx	r7
 80c046a:	3001      	adds	r0, #1
 80c046c:	f43f af19 	beq.w	80c02a2 <_printf_float+0xc2>
 80c0470:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80c0474:	4313      	orrs	r3, r2
 80c0476:	d102      	bne.n	80c047e <_printf_float+0x29e>
 80c0478:	6823      	ldr	r3, [r4, #0]
 80c047a:	07d9      	lsls	r1, r3, #31
 80c047c:	d5d8      	bpl.n	80c0430 <_printf_float+0x250>
 80c047e:	ee18 3a10 	vmov	r3, s16
 80c0482:	4652      	mov	r2, sl
 80c0484:	4631      	mov	r1, r6
 80c0486:	4628      	mov	r0, r5
 80c0488:	47b8      	blx	r7
 80c048a:	3001      	adds	r0, #1
 80c048c:	f43f af09 	beq.w	80c02a2 <_printf_float+0xc2>
 80c0490:	f04f 0900 	mov.w	r9, #0
 80c0494:	f104 0a1a 	add.w	sl, r4, #26
 80c0498:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80c049a:	425b      	negs	r3, r3
 80c049c:	454b      	cmp	r3, r9
 80c049e:	dc01      	bgt.n	80c04a4 <_printf_float+0x2c4>
 80c04a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80c04a2:	e792      	b.n	80c03ca <_printf_float+0x1ea>
 80c04a4:	2301      	movs	r3, #1
 80c04a6:	4652      	mov	r2, sl
 80c04a8:	4631      	mov	r1, r6
 80c04aa:	4628      	mov	r0, r5
 80c04ac:	47b8      	blx	r7
 80c04ae:	3001      	adds	r0, #1
 80c04b0:	f43f aef7 	beq.w	80c02a2 <_printf_float+0xc2>
 80c04b4:	f109 0901 	add.w	r9, r9, #1
 80c04b8:	e7ee      	b.n	80c0498 <_printf_float+0x2b8>
 80c04ba:	bf00      	nop
 80c04bc:	7fefffff 	.word	0x7fefffff
 80c04c0:	080dd2b8 	.word	0x080dd2b8
 80c04c4:	080dd2bc 	.word	0x080dd2bc
 80c04c8:	080dd2c4 	.word	0x080dd2c4
 80c04cc:	080dd2c0 	.word	0x080dd2c0
 80c04d0:	080dd2c8 	.word	0x080dd2c8
 80c04d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80c04d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80c04d8:	429a      	cmp	r2, r3
 80c04da:	bfa8      	it	ge
 80c04dc:	461a      	movge	r2, r3
 80c04de:	2a00      	cmp	r2, #0
 80c04e0:	4691      	mov	r9, r2
 80c04e2:	dc37      	bgt.n	80c0554 <_printf_float+0x374>
 80c04e4:	f04f 0b00 	mov.w	fp, #0
 80c04e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80c04ec:	f104 021a 	add.w	r2, r4, #26
 80c04f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80c04f2:	9305      	str	r3, [sp, #20]
 80c04f4:	eba3 0309 	sub.w	r3, r3, r9
 80c04f8:	455b      	cmp	r3, fp
 80c04fa:	dc33      	bgt.n	80c0564 <_printf_float+0x384>
 80c04fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80c0500:	429a      	cmp	r2, r3
 80c0502:	db3b      	blt.n	80c057c <_printf_float+0x39c>
 80c0504:	6823      	ldr	r3, [r4, #0]
 80c0506:	07da      	lsls	r2, r3, #31
 80c0508:	d438      	bmi.n	80c057c <_printf_float+0x39c>
 80c050a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80c050c:	9b05      	ldr	r3, [sp, #20]
 80c050e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80c0510:	1ad3      	subs	r3, r2, r3
 80c0512:	eba2 0901 	sub.w	r9, r2, r1
 80c0516:	4599      	cmp	r9, r3
 80c0518:	bfa8      	it	ge
 80c051a:	4699      	movge	r9, r3
 80c051c:	f1b9 0f00 	cmp.w	r9, #0
 80c0520:	dc35      	bgt.n	80c058e <_printf_float+0x3ae>
 80c0522:	f04f 0800 	mov.w	r8, #0
 80c0526:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80c052a:	f104 0a1a 	add.w	sl, r4, #26
 80c052e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80c0532:	1a9b      	subs	r3, r3, r2
 80c0534:	eba3 0309 	sub.w	r3, r3, r9
 80c0538:	4543      	cmp	r3, r8
 80c053a:	f77f af79 	ble.w	80c0430 <_printf_float+0x250>
 80c053e:	2301      	movs	r3, #1
 80c0540:	4652      	mov	r2, sl
 80c0542:	4631      	mov	r1, r6
 80c0544:	4628      	mov	r0, r5
 80c0546:	47b8      	blx	r7
 80c0548:	3001      	adds	r0, #1
 80c054a:	f43f aeaa 	beq.w	80c02a2 <_printf_float+0xc2>
 80c054e:	f108 0801 	add.w	r8, r8, #1
 80c0552:	e7ec      	b.n	80c052e <_printf_float+0x34e>
 80c0554:	4613      	mov	r3, r2
 80c0556:	4631      	mov	r1, r6
 80c0558:	4642      	mov	r2, r8
 80c055a:	4628      	mov	r0, r5
 80c055c:	47b8      	blx	r7
 80c055e:	3001      	adds	r0, #1
 80c0560:	d1c0      	bne.n	80c04e4 <_printf_float+0x304>
 80c0562:	e69e      	b.n	80c02a2 <_printf_float+0xc2>
 80c0564:	2301      	movs	r3, #1
 80c0566:	4631      	mov	r1, r6
 80c0568:	4628      	mov	r0, r5
 80c056a:	9205      	str	r2, [sp, #20]
 80c056c:	47b8      	blx	r7
 80c056e:	3001      	adds	r0, #1
 80c0570:	f43f ae97 	beq.w	80c02a2 <_printf_float+0xc2>
 80c0574:	9a05      	ldr	r2, [sp, #20]
 80c0576:	f10b 0b01 	add.w	fp, fp, #1
 80c057a:	e7b9      	b.n	80c04f0 <_printf_float+0x310>
 80c057c:	ee18 3a10 	vmov	r3, s16
 80c0580:	4652      	mov	r2, sl
 80c0582:	4631      	mov	r1, r6
 80c0584:	4628      	mov	r0, r5
 80c0586:	47b8      	blx	r7
 80c0588:	3001      	adds	r0, #1
 80c058a:	d1be      	bne.n	80c050a <_printf_float+0x32a>
 80c058c:	e689      	b.n	80c02a2 <_printf_float+0xc2>
 80c058e:	9a05      	ldr	r2, [sp, #20]
 80c0590:	464b      	mov	r3, r9
 80c0592:	4442      	add	r2, r8
 80c0594:	4631      	mov	r1, r6
 80c0596:	4628      	mov	r0, r5
 80c0598:	47b8      	blx	r7
 80c059a:	3001      	adds	r0, #1
 80c059c:	d1c1      	bne.n	80c0522 <_printf_float+0x342>
 80c059e:	e680      	b.n	80c02a2 <_printf_float+0xc2>
 80c05a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80c05a2:	2a01      	cmp	r2, #1
 80c05a4:	dc01      	bgt.n	80c05aa <_printf_float+0x3ca>
 80c05a6:	07db      	lsls	r3, r3, #31
 80c05a8:	d538      	bpl.n	80c061c <_printf_float+0x43c>
 80c05aa:	2301      	movs	r3, #1
 80c05ac:	4642      	mov	r2, r8
 80c05ae:	4631      	mov	r1, r6
 80c05b0:	4628      	mov	r0, r5
 80c05b2:	47b8      	blx	r7
 80c05b4:	3001      	adds	r0, #1
 80c05b6:	f43f ae74 	beq.w	80c02a2 <_printf_float+0xc2>
 80c05ba:	ee18 3a10 	vmov	r3, s16
 80c05be:	4652      	mov	r2, sl
 80c05c0:	4631      	mov	r1, r6
 80c05c2:	4628      	mov	r0, r5
 80c05c4:	47b8      	blx	r7
 80c05c6:	3001      	adds	r0, #1
 80c05c8:	f43f ae6b 	beq.w	80c02a2 <_printf_float+0xc2>
 80c05cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80c05d0:	2200      	movs	r2, #0
 80c05d2:	2300      	movs	r3, #0
 80c05d4:	f7e0 fa78 	bl	80a0ac8 <__aeabi_dcmpeq>
 80c05d8:	b9d8      	cbnz	r0, 80c0612 <_printf_float+0x432>
 80c05da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80c05dc:	f108 0201 	add.w	r2, r8, #1
 80c05e0:	3b01      	subs	r3, #1
 80c05e2:	4631      	mov	r1, r6
 80c05e4:	4628      	mov	r0, r5
 80c05e6:	47b8      	blx	r7
 80c05e8:	3001      	adds	r0, #1
 80c05ea:	d10e      	bne.n	80c060a <_printf_float+0x42a>
 80c05ec:	e659      	b.n	80c02a2 <_printf_float+0xc2>
 80c05ee:	2301      	movs	r3, #1
 80c05f0:	4652      	mov	r2, sl
 80c05f2:	4631      	mov	r1, r6
 80c05f4:	4628      	mov	r0, r5
 80c05f6:	47b8      	blx	r7
 80c05f8:	3001      	adds	r0, #1
 80c05fa:	f43f ae52 	beq.w	80c02a2 <_printf_float+0xc2>
 80c05fe:	f108 0801 	add.w	r8, r8, #1
 80c0602:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80c0604:	3b01      	subs	r3, #1
 80c0606:	4543      	cmp	r3, r8
 80c0608:	dcf1      	bgt.n	80c05ee <_printf_float+0x40e>
 80c060a:	464b      	mov	r3, r9
 80c060c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80c0610:	e6dc      	b.n	80c03cc <_printf_float+0x1ec>
 80c0612:	f04f 0800 	mov.w	r8, #0
 80c0616:	f104 0a1a 	add.w	sl, r4, #26
 80c061a:	e7f2      	b.n	80c0602 <_printf_float+0x422>
 80c061c:	2301      	movs	r3, #1
 80c061e:	4642      	mov	r2, r8
 80c0620:	e7df      	b.n	80c05e2 <_printf_float+0x402>
 80c0622:	2301      	movs	r3, #1
 80c0624:	464a      	mov	r2, r9
 80c0626:	4631      	mov	r1, r6
 80c0628:	4628      	mov	r0, r5
 80c062a:	47b8      	blx	r7
 80c062c:	3001      	adds	r0, #1
 80c062e:	f43f ae38 	beq.w	80c02a2 <_printf_float+0xc2>
 80c0632:	f108 0801 	add.w	r8, r8, #1
 80c0636:	68e3      	ldr	r3, [r4, #12]
 80c0638:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80c063a:	1a5b      	subs	r3, r3, r1
 80c063c:	4543      	cmp	r3, r8
 80c063e:	dcf0      	bgt.n	80c0622 <_printf_float+0x442>
 80c0640:	e6fa      	b.n	80c0438 <_printf_float+0x258>
 80c0642:	f04f 0800 	mov.w	r8, #0
 80c0646:	f104 0919 	add.w	r9, r4, #25
 80c064a:	e7f4      	b.n	80c0636 <_printf_float+0x456>

080c064c <_printf_common>:
 80c064c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80c0650:	4616      	mov	r6, r2
 80c0652:	4699      	mov	r9, r3
 80c0654:	688a      	ldr	r2, [r1, #8]
 80c0656:	690b      	ldr	r3, [r1, #16]
 80c0658:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80c065c:	4293      	cmp	r3, r2
 80c065e:	bfb8      	it	lt
 80c0660:	4613      	movlt	r3, r2
 80c0662:	6033      	str	r3, [r6, #0]
 80c0664:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80c0668:	4607      	mov	r7, r0
 80c066a:	460c      	mov	r4, r1
 80c066c:	b10a      	cbz	r2, 80c0672 <_printf_common+0x26>
 80c066e:	3301      	adds	r3, #1
 80c0670:	6033      	str	r3, [r6, #0]
 80c0672:	6823      	ldr	r3, [r4, #0]
 80c0674:	0699      	lsls	r1, r3, #26
 80c0676:	bf42      	ittt	mi
 80c0678:	6833      	ldrmi	r3, [r6, #0]
 80c067a:	3302      	addmi	r3, #2
 80c067c:	6033      	strmi	r3, [r6, #0]
 80c067e:	6825      	ldr	r5, [r4, #0]
 80c0680:	f015 0506 	ands.w	r5, r5, #6
 80c0684:	d106      	bne.n	80c0694 <_printf_common+0x48>
 80c0686:	f104 0a19 	add.w	sl, r4, #25
 80c068a:	68e3      	ldr	r3, [r4, #12]
 80c068c:	6832      	ldr	r2, [r6, #0]
 80c068e:	1a9b      	subs	r3, r3, r2
 80c0690:	42ab      	cmp	r3, r5
 80c0692:	dc26      	bgt.n	80c06e2 <_printf_common+0x96>
 80c0694:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80c0698:	1e13      	subs	r3, r2, #0
 80c069a:	6822      	ldr	r2, [r4, #0]
 80c069c:	bf18      	it	ne
 80c069e:	2301      	movne	r3, #1
 80c06a0:	0692      	lsls	r2, r2, #26
 80c06a2:	d42b      	bmi.n	80c06fc <_printf_common+0xb0>
 80c06a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80c06a8:	4649      	mov	r1, r9
 80c06aa:	4638      	mov	r0, r7
 80c06ac:	47c0      	blx	r8
 80c06ae:	3001      	adds	r0, #1
 80c06b0:	d01e      	beq.n	80c06f0 <_printf_common+0xa4>
 80c06b2:	6823      	ldr	r3, [r4, #0]
 80c06b4:	68e5      	ldr	r5, [r4, #12]
 80c06b6:	6832      	ldr	r2, [r6, #0]
 80c06b8:	f003 0306 	and.w	r3, r3, #6
 80c06bc:	2b04      	cmp	r3, #4
 80c06be:	bf08      	it	eq
 80c06c0:	1aad      	subeq	r5, r5, r2
 80c06c2:	68a3      	ldr	r3, [r4, #8]
 80c06c4:	6922      	ldr	r2, [r4, #16]
 80c06c6:	bf0c      	ite	eq
 80c06c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80c06cc:	2500      	movne	r5, #0
 80c06ce:	4293      	cmp	r3, r2
 80c06d0:	bfc4      	itt	gt
 80c06d2:	1a9b      	subgt	r3, r3, r2
 80c06d4:	18ed      	addgt	r5, r5, r3
 80c06d6:	2600      	movs	r6, #0
 80c06d8:	341a      	adds	r4, #26
 80c06da:	42b5      	cmp	r5, r6
 80c06dc:	d11a      	bne.n	80c0714 <_printf_common+0xc8>
 80c06de:	2000      	movs	r0, #0
 80c06e0:	e008      	b.n	80c06f4 <_printf_common+0xa8>
 80c06e2:	2301      	movs	r3, #1
 80c06e4:	4652      	mov	r2, sl
 80c06e6:	4649      	mov	r1, r9
 80c06e8:	4638      	mov	r0, r7
 80c06ea:	47c0      	blx	r8
 80c06ec:	3001      	adds	r0, #1
 80c06ee:	d103      	bne.n	80c06f8 <_printf_common+0xac>
 80c06f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80c06f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80c06f8:	3501      	adds	r5, #1
 80c06fa:	e7c6      	b.n	80c068a <_printf_common+0x3e>
 80c06fc:	18e1      	adds	r1, r4, r3
 80c06fe:	1c5a      	adds	r2, r3, #1
 80c0700:	2030      	movs	r0, #48	; 0x30
 80c0702:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80c0706:	4422      	add	r2, r4
 80c0708:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80c070c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80c0710:	3302      	adds	r3, #2
 80c0712:	e7c7      	b.n	80c06a4 <_printf_common+0x58>
 80c0714:	2301      	movs	r3, #1
 80c0716:	4622      	mov	r2, r4
 80c0718:	4649      	mov	r1, r9
 80c071a:	4638      	mov	r0, r7
 80c071c:	47c0      	blx	r8
 80c071e:	3001      	adds	r0, #1
 80c0720:	d0e6      	beq.n	80c06f0 <_printf_common+0xa4>
 80c0722:	3601      	adds	r6, #1
 80c0724:	e7d9      	b.n	80c06da <_printf_common+0x8e>
	...

080c0728 <_printf_i>:
 80c0728:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80c072c:	460c      	mov	r4, r1
 80c072e:	4691      	mov	r9, r2
 80c0730:	7e27      	ldrb	r7, [r4, #24]
 80c0732:	990c      	ldr	r1, [sp, #48]	; 0x30
 80c0734:	2f78      	cmp	r7, #120	; 0x78
 80c0736:	4680      	mov	r8, r0
 80c0738:	469a      	mov	sl, r3
 80c073a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80c073e:	d807      	bhi.n	80c0750 <_printf_i+0x28>
 80c0740:	2f62      	cmp	r7, #98	; 0x62
 80c0742:	d80a      	bhi.n	80c075a <_printf_i+0x32>
 80c0744:	2f00      	cmp	r7, #0
 80c0746:	f000 80d8 	beq.w	80c08fa <_printf_i+0x1d2>
 80c074a:	2f58      	cmp	r7, #88	; 0x58
 80c074c:	f000 80a3 	beq.w	80c0896 <_printf_i+0x16e>
 80c0750:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80c0754:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80c0758:	e03a      	b.n	80c07d0 <_printf_i+0xa8>
 80c075a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80c075e:	2b15      	cmp	r3, #21
 80c0760:	d8f6      	bhi.n	80c0750 <_printf_i+0x28>
 80c0762:	a001      	add	r0, pc, #4	; (adr r0, 80c0768 <_printf_i+0x40>)
 80c0764:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80c0768:	080c07c1 	.word	0x080c07c1
 80c076c:	080c07d5 	.word	0x080c07d5
 80c0770:	080c0751 	.word	0x080c0751
 80c0774:	080c0751 	.word	0x080c0751
 80c0778:	080c0751 	.word	0x080c0751
 80c077c:	080c0751 	.word	0x080c0751
 80c0780:	080c07d5 	.word	0x080c07d5
 80c0784:	080c0751 	.word	0x080c0751
 80c0788:	080c0751 	.word	0x080c0751
 80c078c:	080c0751 	.word	0x080c0751
 80c0790:	080c0751 	.word	0x080c0751
 80c0794:	080c08e1 	.word	0x080c08e1
 80c0798:	080c0805 	.word	0x080c0805
 80c079c:	080c08c3 	.word	0x080c08c3
 80c07a0:	080c0751 	.word	0x080c0751
 80c07a4:	080c0751 	.word	0x080c0751
 80c07a8:	080c0903 	.word	0x080c0903
 80c07ac:	080c0751 	.word	0x080c0751
 80c07b0:	080c0805 	.word	0x080c0805
 80c07b4:	080c0751 	.word	0x080c0751
 80c07b8:	080c0751 	.word	0x080c0751
 80c07bc:	080c08cb 	.word	0x080c08cb
 80c07c0:	680b      	ldr	r3, [r1, #0]
 80c07c2:	1d1a      	adds	r2, r3, #4
 80c07c4:	681b      	ldr	r3, [r3, #0]
 80c07c6:	600a      	str	r2, [r1, #0]
 80c07c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80c07cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80c07d0:	2301      	movs	r3, #1
 80c07d2:	e0a3      	b.n	80c091c <_printf_i+0x1f4>
 80c07d4:	6825      	ldr	r5, [r4, #0]
 80c07d6:	6808      	ldr	r0, [r1, #0]
 80c07d8:	062e      	lsls	r6, r5, #24
 80c07da:	f100 0304 	add.w	r3, r0, #4
 80c07de:	d50a      	bpl.n	80c07f6 <_printf_i+0xce>
 80c07e0:	6805      	ldr	r5, [r0, #0]
 80c07e2:	600b      	str	r3, [r1, #0]
 80c07e4:	2d00      	cmp	r5, #0
 80c07e6:	da03      	bge.n	80c07f0 <_printf_i+0xc8>
 80c07e8:	232d      	movs	r3, #45	; 0x2d
 80c07ea:	426d      	negs	r5, r5
 80c07ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80c07f0:	485e      	ldr	r0, [pc, #376]	; (80c096c <_printf_i+0x244>)
 80c07f2:	230a      	movs	r3, #10
 80c07f4:	e019      	b.n	80c082a <_printf_i+0x102>
 80c07f6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80c07fa:	6805      	ldr	r5, [r0, #0]
 80c07fc:	600b      	str	r3, [r1, #0]
 80c07fe:	bf18      	it	ne
 80c0800:	b22d      	sxthne	r5, r5
 80c0802:	e7ef      	b.n	80c07e4 <_printf_i+0xbc>
 80c0804:	680b      	ldr	r3, [r1, #0]
 80c0806:	6825      	ldr	r5, [r4, #0]
 80c0808:	1d18      	adds	r0, r3, #4
 80c080a:	6008      	str	r0, [r1, #0]
 80c080c:	0628      	lsls	r0, r5, #24
 80c080e:	d501      	bpl.n	80c0814 <_printf_i+0xec>
 80c0810:	681d      	ldr	r5, [r3, #0]
 80c0812:	e002      	b.n	80c081a <_printf_i+0xf2>
 80c0814:	0669      	lsls	r1, r5, #25
 80c0816:	d5fb      	bpl.n	80c0810 <_printf_i+0xe8>
 80c0818:	881d      	ldrh	r5, [r3, #0]
 80c081a:	4854      	ldr	r0, [pc, #336]	; (80c096c <_printf_i+0x244>)
 80c081c:	2f6f      	cmp	r7, #111	; 0x6f
 80c081e:	bf0c      	ite	eq
 80c0820:	2308      	moveq	r3, #8
 80c0822:	230a      	movne	r3, #10
 80c0824:	2100      	movs	r1, #0
 80c0826:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80c082a:	6866      	ldr	r6, [r4, #4]
 80c082c:	60a6      	str	r6, [r4, #8]
 80c082e:	2e00      	cmp	r6, #0
 80c0830:	bfa2      	ittt	ge
 80c0832:	6821      	ldrge	r1, [r4, #0]
 80c0834:	f021 0104 	bicge.w	r1, r1, #4
 80c0838:	6021      	strge	r1, [r4, #0]
 80c083a:	b90d      	cbnz	r5, 80c0840 <_printf_i+0x118>
 80c083c:	2e00      	cmp	r6, #0
 80c083e:	d04d      	beq.n	80c08dc <_printf_i+0x1b4>
 80c0840:	4616      	mov	r6, r2
 80c0842:	fbb5 f1f3 	udiv	r1, r5, r3
 80c0846:	fb03 5711 	mls	r7, r3, r1, r5
 80c084a:	5dc7      	ldrb	r7, [r0, r7]
 80c084c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80c0850:	462f      	mov	r7, r5
 80c0852:	42bb      	cmp	r3, r7
 80c0854:	460d      	mov	r5, r1
 80c0856:	d9f4      	bls.n	80c0842 <_printf_i+0x11a>
 80c0858:	2b08      	cmp	r3, #8
 80c085a:	d10b      	bne.n	80c0874 <_printf_i+0x14c>
 80c085c:	6823      	ldr	r3, [r4, #0]
 80c085e:	07df      	lsls	r7, r3, #31
 80c0860:	d508      	bpl.n	80c0874 <_printf_i+0x14c>
 80c0862:	6923      	ldr	r3, [r4, #16]
 80c0864:	6861      	ldr	r1, [r4, #4]
 80c0866:	4299      	cmp	r1, r3
 80c0868:	bfde      	ittt	le
 80c086a:	2330      	movle	r3, #48	; 0x30
 80c086c:	f806 3c01 	strble.w	r3, [r6, #-1]
 80c0870:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80c0874:	1b92      	subs	r2, r2, r6
 80c0876:	6122      	str	r2, [r4, #16]
 80c0878:	f8cd a000 	str.w	sl, [sp]
 80c087c:	464b      	mov	r3, r9
 80c087e:	aa03      	add	r2, sp, #12
 80c0880:	4621      	mov	r1, r4
 80c0882:	4640      	mov	r0, r8
 80c0884:	f7ff fee2 	bl	80c064c <_printf_common>
 80c0888:	3001      	adds	r0, #1
 80c088a:	d14c      	bne.n	80c0926 <_printf_i+0x1fe>
 80c088c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80c0890:	b004      	add	sp, #16
 80c0892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80c0896:	4835      	ldr	r0, [pc, #212]	; (80c096c <_printf_i+0x244>)
 80c0898:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80c089c:	6823      	ldr	r3, [r4, #0]
 80c089e:	680e      	ldr	r6, [r1, #0]
 80c08a0:	061f      	lsls	r7, r3, #24
 80c08a2:	f856 5b04 	ldr.w	r5, [r6], #4
 80c08a6:	600e      	str	r6, [r1, #0]
 80c08a8:	d514      	bpl.n	80c08d4 <_printf_i+0x1ac>
 80c08aa:	07d9      	lsls	r1, r3, #31
 80c08ac:	bf44      	itt	mi
 80c08ae:	f043 0320 	orrmi.w	r3, r3, #32
 80c08b2:	6023      	strmi	r3, [r4, #0]
 80c08b4:	b91d      	cbnz	r5, 80c08be <_printf_i+0x196>
 80c08b6:	6823      	ldr	r3, [r4, #0]
 80c08b8:	f023 0320 	bic.w	r3, r3, #32
 80c08bc:	6023      	str	r3, [r4, #0]
 80c08be:	2310      	movs	r3, #16
 80c08c0:	e7b0      	b.n	80c0824 <_printf_i+0xfc>
 80c08c2:	6823      	ldr	r3, [r4, #0]
 80c08c4:	f043 0320 	orr.w	r3, r3, #32
 80c08c8:	6023      	str	r3, [r4, #0]
 80c08ca:	2378      	movs	r3, #120	; 0x78
 80c08cc:	4828      	ldr	r0, [pc, #160]	; (80c0970 <_printf_i+0x248>)
 80c08ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80c08d2:	e7e3      	b.n	80c089c <_printf_i+0x174>
 80c08d4:	065e      	lsls	r6, r3, #25
 80c08d6:	bf48      	it	mi
 80c08d8:	b2ad      	uxthmi	r5, r5
 80c08da:	e7e6      	b.n	80c08aa <_printf_i+0x182>
 80c08dc:	4616      	mov	r6, r2
 80c08de:	e7bb      	b.n	80c0858 <_printf_i+0x130>
 80c08e0:	680b      	ldr	r3, [r1, #0]
 80c08e2:	6826      	ldr	r6, [r4, #0]
 80c08e4:	6960      	ldr	r0, [r4, #20]
 80c08e6:	1d1d      	adds	r5, r3, #4
 80c08e8:	600d      	str	r5, [r1, #0]
 80c08ea:	0635      	lsls	r5, r6, #24
 80c08ec:	681b      	ldr	r3, [r3, #0]
 80c08ee:	d501      	bpl.n	80c08f4 <_printf_i+0x1cc>
 80c08f0:	6018      	str	r0, [r3, #0]
 80c08f2:	e002      	b.n	80c08fa <_printf_i+0x1d2>
 80c08f4:	0671      	lsls	r1, r6, #25
 80c08f6:	d5fb      	bpl.n	80c08f0 <_printf_i+0x1c8>
 80c08f8:	8018      	strh	r0, [r3, #0]
 80c08fa:	2300      	movs	r3, #0
 80c08fc:	6123      	str	r3, [r4, #16]
 80c08fe:	4616      	mov	r6, r2
 80c0900:	e7ba      	b.n	80c0878 <_printf_i+0x150>
 80c0902:	680b      	ldr	r3, [r1, #0]
 80c0904:	1d1a      	adds	r2, r3, #4
 80c0906:	600a      	str	r2, [r1, #0]
 80c0908:	681e      	ldr	r6, [r3, #0]
 80c090a:	6862      	ldr	r2, [r4, #4]
 80c090c:	2100      	movs	r1, #0
 80c090e:	4630      	mov	r0, r6
 80c0910:	f7df fc66 	bl	80a01e0 <memchr>
 80c0914:	b108      	cbz	r0, 80c091a <_printf_i+0x1f2>
 80c0916:	1b80      	subs	r0, r0, r6
 80c0918:	6060      	str	r0, [r4, #4]
 80c091a:	6863      	ldr	r3, [r4, #4]
 80c091c:	6123      	str	r3, [r4, #16]
 80c091e:	2300      	movs	r3, #0
 80c0920:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80c0924:	e7a8      	b.n	80c0878 <_printf_i+0x150>
 80c0926:	6923      	ldr	r3, [r4, #16]
 80c0928:	4632      	mov	r2, r6
 80c092a:	4649      	mov	r1, r9
 80c092c:	4640      	mov	r0, r8
 80c092e:	47d0      	blx	sl
 80c0930:	3001      	adds	r0, #1
 80c0932:	d0ab      	beq.n	80c088c <_printf_i+0x164>
 80c0934:	6823      	ldr	r3, [r4, #0]
 80c0936:	079b      	lsls	r3, r3, #30
 80c0938:	d413      	bmi.n	80c0962 <_printf_i+0x23a>
 80c093a:	68e0      	ldr	r0, [r4, #12]
 80c093c:	9b03      	ldr	r3, [sp, #12]
 80c093e:	4298      	cmp	r0, r3
 80c0940:	bfb8      	it	lt
 80c0942:	4618      	movlt	r0, r3
 80c0944:	e7a4      	b.n	80c0890 <_printf_i+0x168>
 80c0946:	2301      	movs	r3, #1
 80c0948:	4632      	mov	r2, r6
 80c094a:	4649      	mov	r1, r9
 80c094c:	4640      	mov	r0, r8
 80c094e:	47d0      	blx	sl
 80c0950:	3001      	adds	r0, #1
 80c0952:	d09b      	beq.n	80c088c <_printf_i+0x164>
 80c0954:	3501      	adds	r5, #1
 80c0956:	68e3      	ldr	r3, [r4, #12]
 80c0958:	9903      	ldr	r1, [sp, #12]
 80c095a:	1a5b      	subs	r3, r3, r1
 80c095c:	42ab      	cmp	r3, r5
 80c095e:	dcf2      	bgt.n	80c0946 <_printf_i+0x21e>
 80c0960:	e7eb      	b.n	80c093a <_printf_i+0x212>
 80c0962:	2500      	movs	r5, #0
 80c0964:	f104 0619 	add.w	r6, r4, #25
 80c0968:	e7f5      	b.n	80c0956 <_printf_i+0x22e>
 80c096a:	bf00      	nop
 80c096c:	080dd2ca 	.word	0x080dd2ca
 80c0970:	080dd2db 	.word	0x080dd2db

080c0974 <iprintf>:
 80c0974:	b40f      	push	{r0, r1, r2, r3}
 80c0976:	4b0a      	ldr	r3, [pc, #40]	; (80c09a0 <iprintf+0x2c>)
 80c0978:	b513      	push	{r0, r1, r4, lr}
 80c097a:	681c      	ldr	r4, [r3, #0]
 80c097c:	b124      	cbz	r4, 80c0988 <iprintf+0x14>
 80c097e:	69a3      	ldr	r3, [r4, #24]
 80c0980:	b913      	cbnz	r3, 80c0988 <iprintf+0x14>
 80c0982:	4620      	mov	r0, r4
 80c0984:	f001 f8fe 	bl	80c1b84 <__sinit>
 80c0988:	ab05      	add	r3, sp, #20
 80c098a:	9a04      	ldr	r2, [sp, #16]
 80c098c:	68a1      	ldr	r1, [r4, #8]
 80c098e:	9301      	str	r3, [sp, #4]
 80c0990:	4620      	mov	r0, r4
 80c0992:	f001 fe0d 	bl	80c25b0 <_vfiprintf_r>
 80c0996:	b002      	add	sp, #8
 80c0998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80c099c:	b004      	add	sp, #16
 80c099e:	4770      	bx	lr
 80c09a0:	20007cc0 	.word	0x20007cc0

080c09a4 <putchar>:
 80c09a4:	4b09      	ldr	r3, [pc, #36]	; (80c09cc <putchar+0x28>)
 80c09a6:	b513      	push	{r0, r1, r4, lr}
 80c09a8:	681c      	ldr	r4, [r3, #0]
 80c09aa:	4601      	mov	r1, r0
 80c09ac:	b134      	cbz	r4, 80c09bc <putchar+0x18>
 80c09ae:	69a3      	ldr	r3, [r4, #24]
 80c09b0:	b923      	cbnz	r3, 80c09bc <putchar+0x18>
 80c09b2:	9001      	str	r0, [sp, #4]
 80c09b4:	4620      	mov	r0, r4
 80c09b6:	f001 f8e5 	bl	80c1b84 <__sinit>
 80c09ba:	9901      	ldr	r1, [sp, #4]
 80c09bc:	68a2      	ldr	r2, [r4, #8]
 80c09be:	4620      	mov	r0, r4
 80c09c0:	b002      	add	sp, #8
 80c09c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80c09c6:	f001 bf23 	b.w	80c2810 <_putc_r>
 80c09ca:	bf00      	nop
 80c09cc:	20007cc0 	.word	0x20007cc0

080c09d0 <_puts_r>:
 80c09d0:	b570      	push	{r4, r5, r6, lr}
 80c09d2:	460e      	mov	r6, r1
 80c09d4:	4605      	mov	r5, r0
 80c09d6:	b118      	cbz	r0, 80c09e0 <_puts_r+0x10>
 80c09d8:	6983      	ldr	r3, [r0, #24]
 80c09da:	b90b      	cbnz	r3, 80c09e0 <_puts_r+0x10>
 80c09dc:	f001 f8d2 	bl	80c1b84 <__sinit>
 80c09e0:	69ab      	ldr	r3, [r5, #24]
 80c09e2:	68ac      	ldr	r4, [r5, #8]
 80c09e4:	b913      	cbnz	r3, 80c09ec <_puts_r+0x1c>
 80c09e6:	4628      	mov	r0, r5
 80c09e8:	f001 f8cc 	bl	80c1b84 <__sinit>
 80c09ec:	4b2c      	ldr	r3, [pc, #176]	; (80c0aa0 <_puts_r+0xd0>)
 80c09ee:	429c      	cmp	r4, r3
 80c09f0:	d120      	bne.n	80c0a34 <_puts_r+0x64>
 80c09f2:	686c      	ldr	r4, [r5, #4]
 80c09f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80c09f6:	07db      	lsls	r3, r3, #31
 80c09f8:	d405      	bmi.n	80c0a06 <_puts_r+0x36>
 80c09fa:	89a3      	ldrh	r3, [r4, #12]
 80c09fc:	0598      	lsls	r0, r3, #22
 80c09fe:	d402      	bmi.n	80c0a06 <_puts_r+0x36>
 80c0a00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80c0a02:	f001 f962 	bl	80c1cca <__retarget_lock_acquire_recursive>
 80c0a06:	89a3      	ldrh	r3, [r4, #12]
 80c0a08:	0719      	lsls	r1, r3, #28
 80c0a0a:	d51d      	bpl.n	80c0a48 <_puts_r+0x78>
 80c0a0c:	6923      	ldr	r3, [r4, #16]
 80c0a0e:	b1db      	cbz	r3, 80c0a48 <_puts_r+0x78>
 80c0a10:	3e01      	subs	r6, #1
 80c0a12:	68a3      	ldr	r3, [r4, #8]
 80c0a14:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80c0a18:	3b01      	subs	r3, #1
 80c0a1a:	60a3      	str	r3, [r4, #8]
 80c0a1c:	bb39      	cbnz	r1, 80c0a6e <_puts_r+0x9e>
 80c0a1e:	2b00      	cmp	r3, #0
 80c0a20:	da38      	bge.n	80c0a94 <_puts_r+0xc4>
 80c0a22:	4622      	mov	r2, r4
 80c0a24:	210a      	movs	r1, #10
 80c0a26:	4628      	mov	r0, r5
 80c0a28:	f000 f858 	bl	80c0adc <__swbuf_r>
 80c0a2c:	3001      	adds	r0, #1
 80c0a2e:	d011      	beq.n	80c0a54 <_puts_r+0x84>
 80c0a30:	250a      	movs	r5, #10
 80c0a32:	e011      	b.n	80c0a58 <_puts_r+0x88>
 80c0a34:	4b1b      	ldr	r3, [pc, #108]	; (80c0aa4 <_puts_r+0xd4>)
 80c0a36:	429c      	cmp	r4, r3
 80c0a38:	d101      	bne.n	80c0a3e <_puts_r+0x6e>
 80c0a3a:	68ac      	ldr	r4, [r5, #8]
 80c0a3c:	e7da      	b.n	80c09f4 <_puts_r+0x24>
 80c0a3e:	4b1a      	ldr	r3, [pc, #104]	; (80c0aa8 <_puts_r+0xd8>)
 80c0a40:	429c      	cmp	r4, r3
 80c0a42:	bf08      	it	eq
 80c0a44:	68ec      	ldreq	r4, [r5, #12]
 80c0a46:	e7d5      	b.n	80c09f4 <_puts_r+0x24>
 80c0a48:	4621      	mov	r1, r4
 80c0a4a:	4628      	mov	r0, r5
 80c0a4c:	f000 f898 	bl	80c0b80 <__swsetup_r>
 80c0a50:	2800      	cmp	r0, #0
 80c0a52:	d0dd      	beq.n	80c0a10 <_puts_r+0x40>
 80c0a54:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80c0a58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80c0a5a:	07da      	lsls	r2, r3, #31
 80c0a5c:	d405      	bmi.n	80c0a6a <_puts_r+0x9a>
 80c0a5e:	89a3      	ldrh	r3, [r4, #12]
 80c0a60:	059b      	lsls	r3, r3, #22
 80c0a62:	d402      	bmi.n	80c0a6a <_puts_r+0x9a>
 80c0a64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80c0a66:	f001 f931 	bl	80c1ccc <__retarget_lock_release_recursive>
 80c0a6a:	4628      	mov	r0, r5
 80c0a6c:	bd70      	pop	{r4, r5, r6, pc}
 80c0a6e:	2b00      	cmp	r3, #0
 80c0a70:	da04      	bge.n	80c0a7c <_puts_r+0xac>
 80c0a72:	69a2      	ldr	r2, [r4, #24]
 80c0a74:	429a      	cmp	r2, r3
 80c0a76:	dc06      	bgt.n	80c0a86 <_puts_r+0xb6>
 80c0a78:	290a      	cmp	r1, #10
 80c0a7a:	d004      	beq.n	80c0a86 <_puts_r+0xb6>
 80c0a7c:	6823      	ldr	r3, [r4, #0]
 80c0a7e:	1c5a      	adds	r2, r3, #1
 80c0a80:	6022      	str	r2, [r4, #0]
 80c0a82:	7019      	strb	r1, [r3, #0]
 80c0a84:	e7c5      	b.n	80c0a12 <_puts_r+0x42>
 80c0a86:	4622      	mov	r2, r4
 80c0a88:	4628      	mov	r0, r5
 80c0a8a:	f000 f827 	bl	80c0adc <__swbuf_r>
 80c0a8e:	3001      	adds	r0, #1
 80c0a90:	d1bf      	bne.n	80c0a12 <_puts_r+0x42>
 80c0a92:	e7df      	b.n	80c0a54 <_puts_r+0x84>
 80c0a94:	6823      	ldr	r3, [r4, #0]
 80c0a96:	250a      	movs	r5, #10
 80c0a98:	1c5a      	adds	r2, r3, #1
 80c0a9a:	6022      	str	r2, [r4, #0]
 80c0a9c:	701d      	strb	r5, [r3, #0]
 80c0a9e:	e7db      	b.n	80c0a58 <_puts_r+0x88>
 80c0aa0:	080dd3a0 	.word	0x080dd3a0
 80c0aa4:	080dd3c0 	.word	0x080dd3c0
 80c0aa8:	080dd380 	.word	0x080dd380

080c0aac <puts>:
 80c0aac:	4b02      	ldr	r3, [pc, #8]	; (80c0ab8 <puts+0xc>)
 80c0aae:	4601      	mov	r1, r0
 80c0ab0:	6818      	ldr	r0, [r3, #0]
 80c0ab2:	f7ff bf8d 	b.w	80c09d0 <_puts_r>
 80c0ab6:	bf00      	nop
 80c0ab8:	20007cc0 	.word	0x20007cc0

080c0abc <_sbrk_r>:
 80c0abc:	b538      	push	{r3, r4, r5, lr}
 80c0abe:	4d06      	ldr	r5, [pc, #24]	; (80c0ad8 <_sbrk_r+0x1c>)
 80c0ac0:	2300      	movs	r3, #0
 80c0ac2:	4604      	mov	r4, r0
 80c0ac4:	4608      	mov	r0, r1
 80c0ac6:	602b      	str	r3, [r5, #0]
 80c0ac8:	f7ed fc02 	bl	80ae2d0 <_sbrk>
 80c0acc:	1c43      	adds	r3, r0, #1
 80c0ace:	d102      	bne.n	80c0ad6 <_sbrk_r+0x1a>
 80c0ad0:	682b      	ldr	r3, [r5, #0]
 80c0ad2:	b103      	cbz	r3, 80c0ad6 <_sbrk_r+0x1a>
 80c0ad4:	6023      	str	r3, [r4, #0]
 80c0ad6:	bd38      	pop	{r3, r4, r5, pc}
 80c0ad8:	2001c390 	.word	0x2001c390

080c0adc <__swbuf_r>:
 80c0adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80c0ade:	460e      	mov	r6, r1
 80c0ae0:	4614      	mov	r4, r2
 80c0ae2:	4605      	mov	r5, r0
 80c0ae4:	b118      	cbz	r0, 80c0aee <__swbuf_r+0x12>
 80c0ae6:	6983      	ldr	r3, [r0, #24]
 80c0ae8:	b90b      	cbnz	r3, 80c0aee <__swbuf_r+0x12>
 80c0aea:	f001 f84b 	bl	80c1b84 <__sinit>
 80c0aee:	4b21      	ldr	r3, [pc, #132]	; (80c0b74 <__swbuf_r+0x98>)
 80c0af0:	429c      	cmp	r4, r3
 80c0af2:	d12b      	bne.n	80c0b4c <__swbuf_r+0x70>
 80c0af4:	686c      	ldr	r4, [r5, #4]
 80c0af6:	69a3      	ldr	r3, [r4, #24]
 80c0af8:	60a3      	str	r3, [r4, #8]
 80c0afa:	89a3      	ldrh	r3, [r4, #12]
 80c0afc:	071a      	lsls	r2, r3, #28
 80c0afe:	d52f      	bpl.n	80c0b60 <__swbuf_r+0x84>
 80c0b00:	6923      	ldr	r3, [r4, #16]
 80c0b02:	b36b      	cbz	r3, 80c0b60 <__swbuf_r+0x84>
 80c0b04:	6923      	ldr	r3, [r4, #16]
 80c0b06:	6820      	ldr	r0, [r4, #0]
 80c0b08:	1ac0      	subs	r0, r0, r3
 80c0b0a:	6963      	ldr	r3, [r4, #20]
 80c0b0c:	b2f6      	uxtb	r6, r6
 80c0b0e:	4283      	cmp	r3, r0
 80c0b10:	4637      	mov	r7, r6
 80c0b12:	dc04      	bgt.n	80c0b1e <__swbuf_r+0x42>
 80c0b14:	4621      	mov	r1, r4
 80c0b16:	4628      	mov	r0, r5
 80c0b18:	f000 ffa0 	bl	80c1a5c <_fflush_r>
 80c0b1c:	bb30      	cbnz	r0, 80c0b6c <__swbuf_r+0x90>
 80c0b1e:	68a3      	ldr	r3, [r4, #8]
 80c0b20:	3b01      	subs	r3, #1
 80c0b22:	60a3      	str	r3, [r4, #8]
 80c0b24:	6823      	ldr	r3, [r4, #0]
 80c0b26:	1c5a      	adds	r2, r3, #1
 80c0b28:	6022      	str	r2, [r4, #0]
 80c0b2a:	701e      	strb	r6, [r3, #0]
 80c0b2c:	6963      	ldr	r3, [r4, #20]
 80c0b2e:	3001      	adds	r0, #1
 80c0b30:	4283      	cmp	r3, r0
 80c0b32:	d004      	beq.n	80c0b3e <__swbuf_r+0x62>
 80c0b34:	89a3      	ldrh	r3, [r4, #12]
 80c0b36:	07db      	lsls	r3, r3, #31
 80c0b38:	d506      	bpl.n	80c0b48 <__swbuf_r+0x6c>
 80c0b3a:	2e0a      	cmp	r6, #10
 80c0b3c:	d104      	bne.n	80c0b48 <__swbuf_r+0x6c>
 80c0b3e:	4621      	mov	r1, r4
 80c0b40:	4628      	mov	r0, r5
 80c0b42:	f000 ff8b 	bl	80c1a5c <_fflush_r>
 80c0b46:	b988      	cbnz	r0, 80c0b6c <__swbuf_r+0x90>
 80c0b48:	4638      	mov	r0, r7
 80c0b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80c0b4c:	4b0a      	ldr	r3, [pc, #40]	; (80c0b78 <__swbuf_r+0x9c>)
 80c0b4e:	429c      	cmp	r4, r3
 80c0b50:	d101      	bne.n	80c0b56 <__swbuf_r+0x7a>
 80c0b52:	68ac      	ldr	r4, [r5, #8]
 80c0b54:	e7cf      	b.n	80c0af6 <__swbuf_r+0x1a>
 80c0b56:	4b09      	ldr	r3, [pc, #36]	; (80c0b7c <__swbuf_r+0xa0>)
 80c0b58:	429c      	cmp	r4, r3
 80c0b5a:	bf08      	it	eq
 80c0b5c:	68ec      	ldreq	r4, [r5, #12]
 80c0b5e:	e7ca      	b.n	80c0af6 <__swbuf_r+0x1a>
 80c0b60:	4621      	mov	r1, r4
 80c0b62:	4628      	mov	r0, r5
 80c0b64:	f000 f80c 	bl	80c0b80 <__swsetup_r>
 80c0b68:	2800      	cmp	r0, #0
 80c0b6a:	d0cb      	beq.n	80c0b04 <__swbuf_r+0x28>
 80c0b6c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80c0b70:	e7ea      	b.n	80c0b48 <__swbuf_r+0x6c>
 80c0b72:	bf00      	nop
 80c0b74:	080dd3a0 	.word	0x080dd3a0
 80c0b78:	080dd3c0 	.word	0x080dd3c0
 80c0b7c:	080dd380 	.word	0x080dd380

080c0b80 <__swsetup_r>:
 80c0b80:	4b32      	ldr	r3, [pc, #200]	; (80c0c4c <__swsetup_r+0xcc>)
 80c0b82:	b570      	push	{r4, r5, r6, lr}
 80c0b84:	681d      	ldr	r5, [r3, #0]
 80c0b86:	4606      	mov	r6, r0
 80c0b88:	460c      	mov	r4, r1
 80c0b8a:	b125      	cbz	r5, 80c0b96 <__swsetup_r+0x16>
 80c0b8c:	69ab      	ldr	r3, [r5, #24]
 80c0b8e:	b913      	cbnz	r3, 80c0b96 <__swsetup_r+0x16>
 80c0b90:	4628      	mov	r0, r5
 80c0b92:	f000 fff7 	bl	80c1b84 <__sinit>
 80c0b96:	4b2e      	ldr	r3, [pc, #184]	; (80c0c50 <__swsetup_r+0xd0>)
 80c0b98:	429c      	cmp	r4, r3
 80c0b9a:	d10f      	bne.n	80c0bbc <__swsetup_r+0x3c>
 80c0b9c:	686c      	ldr	r4, [r5, #4]
 80c0b9e:	89a3      	ldrh	r3, [r4, #12]
 80c0ba0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80c0ba4:	0719      	lsls	r1, r3, #28
 80c0ba6:	d42c      	bmi.n	80c0c02 <__swsetup_r+0x82>
 80c0ba8:	06dd      	lsls	r5, r3, #27
 80c0baa:	d411      	bmi.n	80c0bd0 <__swsetup_r+0x50>
 80c0bac:	2309      	movs	r3, #9
 80c0bae:	6033      	str	r3, [r6, #0]
 80c0bb0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80c0bb4:	81a3      	strh	r3, [r4, #12]
 80c0bb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80c0bba:	e03e      	b.n	80c0c3a <__swsetup_r+0xba>
 80c0bbc:	4b25      	ldr	r3, [pc, #148]	; (80c0c54 <__swsetup_r+0xd4>)
 80c0bbe:	429c      	cmp	r4, r3
 80c0bc0:	d101      	bne.n	80c0bc6 <__swsetup_r+0x46>
 80c0bc2:	68ac      	ldr	r4, [r5, #8]
 80c0bc4:	e7eb      	b.n	80c0b9e <__swsetup_r+0x1e>
 80c0bc6:	4b24      	ldr	r3, [pc, #144]	; (80c0c58 <__swsetup_r+0xd8>)
 80c0bc8:	429c      	cmp	r4, r3
 80c0bca:	bf08      	it	eq
 80c0bcc:	68ec      	ldreq	r4, [r5, #12]
 80c0bce:	e7e6      	b.n	80c0b9e <__swsetup_r+0x1e>
 80c0bd0:	0758      	lsls	r0, r3, #29
 80c0bd2:	d512      	bpl.n	80c0bfa <__swsetup_r+0x7a>
 80c0bd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80c0bd6:	b141      	cbz	r1, 80c0bea <__swsetup_r+0x6a>
 80c0bd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80c0bdc:	4299      	cmp	r1, r3
 80c0bde:	d002      	beq.n	80c0be6 <__swsetup_r+0x66>
 80c0be0:	4630      	mov	r0, r6
 80c0be2:	f001 fc6b 	bl	80c24bc <_free_r>
 80c0be6:	2300      	movs	r3, #0
 80c0be8:	6363      	str	r3, [r4, #52]	; 0x34
 80c0bea:	89a3      	ldrh	r3, [r4, #12]
 80c0bec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80c0bf0:	81a3      	strh	r3, [r4, #12]
 80c0bf2:	2300      	movs	r3, #0
 80c0bf4:	6063      	str	r3, [r4, #4]
 80c0bf6:	6923      	ldr	r3, [r4, #16]
 80c0bf8:	6023      	str	r3, [r4, #0]
 80c0bfa:	89a3      	ldrh	r3, [r4, #12]
 80c0bfc:	f043 0308 	orr.w	r3, r3, #8
 80c0c00:	81a3      	strh	r3, [r4, #12]
 80c0c02:	6923      	ldr	r3, [r4, #16]
 80c0c04:	b94b      	cbnz	r3, 80c0c1a <__swsetup_r+0x9a>
 80c0c06:	89a3      	ldrh	r3, [r4, #12]
 80c0c08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80c0c0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80c0c10:	d003      	beq.n	80c0c1a <__swsetup_r+0x9a>
 80c0c12:	4621      	mov	r1, r4
 80c0c14:	4630      	mov	r0, r6
 80c0c16:	f001 f87f 	bl	80c1d18 <__smakebuf_r>
 80c0c1a:	89a0      	ldrh	r0, [r4, #12]
 80c0c1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80c0c20:	f010 0301 	ands.w	r3, r0, #1
 80c0c24:	d00a      	beq.n	80c0c3c <__swsetup_r+0xbc>
 80c0c26:	2300      	movs	r3, #0
 80c0c28:	60a3      	str	r3, [r4, #8]
 80c0c2a:	6963      	ldr	r3, [r4, #20]
 80c0c2c:	425b      	negs	r3, r3
 80c0c2e:	61a3      	str	r3, [r4, #24]
 80c0c30:	6923      	ldr	r3, [r4, #16]
 80c0c32:	b943      	cbnz	r3, 80c0c46 <__swsetup_r+0xc6>
 80c0c34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80c0c38:	d1ba      	bne.n	80c0bb0 <__swsetup_r+0x30>
 80c0c3a:	bd70      	pop	{r4, r5, r6, pc}
 80c0c3c:	0781      	lsls	r1, r0, #30
 80c0c3e:	bf58      	it	pl
 80c0c40:	6963      	ldrpl	r3, [r4, #20]
 80c0c42:	60a3      	str	r3, [r4, #8]
 80c0c44:	e7f4      	b.n	80c0c30 <__swsetup_r+0xb0>
 80c0c46:	2000      	movs	r0, #0
 80c0c48:	e7f7      	b.n	80c0c3a <__swsetup_r+0xba>
 80c0c4a:	bf00      	nop
 80c0c4c:	20007cc0 	.word	0x20007cc0
 80c0c50:	080dd3a0 	.word	0x080dd3a0
 80c0c54:	080dd3c0 	.word	0x080dd3c0
 80c0c58:	080dd380 	.word	0x080dd380

080c0c5c <quorem>:
 80c0c5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80c0c60:	6903      	ldr	r3, [r0, #16]
 80c0c62:	690c      	ldr	r4, [r1, #16]
 80c0c64:	42a3      	cmp	r3, r4
 80c0c66:	4607      	mov	r7, r0
 80c0c68:	f2c0 8081 	blt.w	80c0d6e <quorem+0x112>
 80c0c6c:	3c01      	subs	r4, #1
 80c0c6e:	f101 0814 	add.w	r8, r1, #20
 80c0c72:	f100 0514 	add.w	r5, r0, #20
 80c0c76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80c0c7a:	9301      	str	r3, [sp, #4]
 80c0c7c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80c0c80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80c0c84:	3301      	adds	r3, #1
 80c0c86:	429a      	cmp	r2, r3
 80c0c88:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80c0c8c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80c0c90:	fbb2 f6f3 	udiv	r6, r2, r3
 80c0c94:	d331      	bcc.n	80c0cfa <quorem+0x9e>
 80c0c96:	f04f 0e00 	mov.w	lr, #0
 80c0c9a:	4640      	mov	r0, r8
 80c0c9c:	46ac      	mov	ip, r5
 80c0c9e:	46f2      	mov	sl, lr
 80c0ca0:	f850 2b04 	ldr.w	r2, [r0], #4
 80c0ca4:	b293      	uxth	r3, r2
 80c0ca6:	fb06 e303 	mla	r3, r6, r3, lr
 80c0caa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80c0cae:	b29b      	uxth	r3, r3
 80c0cb0:	ebaa 0303 	sub.w	r3, sl, r3
 80c0cb4:	0c12      	lsrs	r2, r2, #16
 80c0cb6:	f8dc a000 	ldr.w	sl, [ip]
 80c0cba:	fb06 e202 	mla	r2, r6, r2, lr
 80c0cbe:	fa13 f38a 	uxtah	r3, r3, sl
 80c0cc2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80c0cc6:	fa1f fa82 	uxth.w	sl, r2
 80c0cca:	f8dc 2000 	ldr.w	r2, [ip]
 80c0cce:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80c0cd2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80c0cd6:	b29b      	uxth	r3, r3
 80c0cd8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80c0cdc:	4581      	cmp	r9, r0
 80c0cde:	f84c 3b04 	str.w	r3, [ip], #4
 80c0ce2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80c0ce6:	d2db      	bcs.n	80c0ca0 <quorem+0x44>
 80c0ce8:	f855 300b 	ldr.w	r3, [r5, fp]
 80c0cec:	b92b      	cbnz	r3, 80c0cfa <quorem+0x9e>
 80c0cee:	9b01      	ldr	r3, [sp, #4]
 80c0cf0:	3b04      	subs	r3, #4
 80c0cf2:	429d      	cmp	r5, r3
 80c0cf4:	461a      	mov	r2, r3
 80c0cf6:	d32e      	bcc.n	80c0d56 <quorem+0xfa>
 80c0cf8:	613c      	str	r4, [r7, #16]
 80c0cfa:	4638      	mov	r0, r7
 80c0cfc:	f001 fade 	bl	80c22bc <__mcmp>
 80c0d00:	2800      	cmp	r0, #0
 80c0d02:	db24      	blt.n	80c0d4e <quorem+0xf2>
 80c0d04:	3601      	adds	r6, #1
 80c0d06:	4628      	mov	r0, r5
 80c0d08:	f04f 0c00 	mov.w	ip, #0
 80c0d0c:	f858 2b04 	ldr.w	r2, [r8], #4
 80c0d10:	f8d0 e000 	ldr.w	lr, [r0]
 80c0d14:	b293      	uxth	r3, r2
 80c0d16:	ebac 0303 	sub.w	r3, ip, r3
 80c0d1a:	0c12      	lsrs	r2, r2, #16
 80c0d1c:	fa13 f38e 	uxtah	r3, r3, lr
 80c0d20:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80c0d24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80c0d28:	b29b      	uxth	r3, r3
 80c0d2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80c0d2e:	45c1      	cmp	r9, r8
 80c0d30:	f840 3b04 	str.w	r3, [r0], #4
 80c0d34:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80c0d38:	d2e8      	bcs.n	80c0d0c <quorem+0xb0>
 80c0d3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80c0d3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80c0d42:	b922      	cbnz	r2, 80c0d4e <quorem+0xf2>
 80c0d44:	3b04      	subs	r3, #4
 80c0d46:	429d      	cmp	r5, r3
 80c0d48:	461a      	mov	r2, r3
 80c0d4a:	d30a      	bcc.n	80c0d62 <quorem+0x106>
 80c0d4c:	613c      	str	r4, [r7, #16]
 80c0d4e:	4630      	mov	r0, r6
 80c0d50:	b003      	add	sp, #12
 80c0d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80c0d56:	6812      	ldr	r2, [r2, #0]
 80c0d58:	3b04      	subs	r3, #4
 80c0d5a:	2a00      	cmp	r2, #0
 80c0d5c:	d1cc      	bne.n	80c0cf8 <quorem+0x9c>
 80c0d5e:	3c01      	subs	r4, #1
 80c0d60:	e7c7      	b.n	80c0cf2 <quorem+0x96>
 80c0d62:	6812      	ldr	r2, [r2, #0]
 80c0d64:	3b04      	subs	r3, #4
 80c0d66:	2a00      	cmp	r2, #0
 80c0d68:	d1f0      	bne.n	80c0d4c <quorem+0xf0>
 80c0d6a:	3c01      	subs	r4, #1
 80c0d6c:	e7eb      	b.n	80c0d46 <quorem+0xea>
 80c0d6e:	2000      	movs	r0, #0
 80c0d70:	e7ee      	b.n	80c0d50 <quorem+0xf4>
 80c0d72:	0000      	movs	r0, r0
 80c0d74:	0000      	movs	r0, r0
	...

080c0d78 <_dtoa_r>:
 80c0d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80c0d7c:	ed2d 8b02 	vpush	{d8}
 80c0d80:	ec57 6b10 	vmov	r6, r7, d0
 80c0d84:	b095      	sub	sp, #84	; 0x54
 80c0d86:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80c0d88:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80c0d8c:	9105      	str	r1, [sp, #20]
 80c0d8e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80c0d92:	4604      	mov	r4, r0
 80c0d94:	9209      	str	r2, [sp, #36]	; 0x24
 80c0d96:	930f      	str	r3, [sp, #60]	; 0x3c
 80c0d98:	b975      	cbnz	r5, 80c0db8 <_dtoa_r+0x40>
 80c0d9a:	2010      	movs	r0, #16
 80c0d9c:	f000 fffc 	bl	80c1d98 <malloc>
 80c0da0:	4602      	mov	r2, r0
 80c0da2:	6260      	str	r0, [r4, #36]	; 0x24
 80c0da4:	b920      	cbnz	r0, 80c0db0 <_dtoa_r+0x38>
 80c0da6:	4bb2      	ldr	r3, [pc, #712]	; (80c1070 <_dtoa_r+0x2f8>)
 80c0da8:	21ea      	movs	r1, #234	; 0xea
 80c0daa:	48b2      	ldr	r0, [pc, #712]	; (80c1074 <_dtoa_r+0x2fc>)
 80c0dac:	f001 fdce 	bl	80c294c <__assert_func>
 80c0db0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80c0db4:	6005      	str	r5, [r0, #0]
 80c0db6:	60c5      	str	r5, [r0, #12]
 80c0db8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80c0dba:	6819      	ldr	r1, [r3, #0]
 80c0dbc:	b151      	cbz	r1, 80c0dd4 <_dtoa_r+0x5c>
 80c0dbe:	685a      	ldr	r2, [r3, #4]
 80c0dc0:	604a      	str	r2, [r1, #4]
 80c0dc2:	2301      	movs	r3, #1
 80c0dc4:	4093      	lsls	r3, r2
 80c0dc6:	608b      	str	r3, [r1, #8]
 80c0dc8:	4620      	mov	r0, r4
 80c0dca:	f001 f839 	bl	80c1e40 <_Bfree>
 80c0dce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80c0dd0:	2200      	movs	r2, #0
 80c0dd2:	601a      	str	r2, [r3, #0]
 80c0dd4:	1e3b      	subs	r3, r7, #0
 80c0dd6:	bfb9      	ittee	lt
 80c0dd8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80c0ddc:	9303      	strlt	r3, [sp, #12]
 80c0dde:	2300      	movge	r3, #0
 80c0de0:	f8c8 3000 	strge.w	r3, [r8]
 80c0de4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80c0de8:	4ba3      	ldr	r3, [pc, #652]	; (80c1078 <_dtoa_r+0x300>)
 80c0dea:	bfbc      	itt	lt
 80c0dec:	2201      	movlt	r2, #1
 80c0dee:	f8c8 2000 	strlt.w	r2, [r8]
 80c0df2:	ea33 0309 	bics.w	r3, r3, r9
 80c0df6:	d11b      	bne.n	80c0e30 <_dtoa_r+0xb8>
 80c0df8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80c0dfa:	f242 730f 	movw	r3, #9999	; 0x270f
 80c0dfe:	6013      	str	r3, [r2, #0]
 80c0e00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80c0e04:	4333      	orrs	r3, r6
 80c0e06:	f000 857a 	beq.w	80c18fe <_dtoa_r+0xb86>
 80c0e0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80c0e0c:	b963      	cbnz	r3, 80c0e28 <_dtoa_r+0xb0>
 80c0e0e:	4b9b      	ldr	r3, [pc, #620]	; (80c107c <_dtoa_r+0x304>)
 80c0e10:	e024      	b.n	80c0e5c <_dtoa_r+0xe4>
 80c0e12:	4b9b      	ldr	r3, [pc, #620]	; (80c1080 <_dtoa_r+0x308>)
 80c0e14:	9300      	str	r3, [sp, #0]
 80c0e16:	3308      	adds	r3, #8
 80c0e18:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80c0e1a:	6013      	str	r3, [r2, #0]
 80c0e1c:	9800      	ldr	r0, [sp, #0]
 80c0e1e:	b015      	add	sp, #84	; 0x54
 80c0e20:	ecbd 8b02 	vpop	{d8}
 80c0e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80c0e28:	4b94      	ldr	r3, [pc, #592]	; (80c107c <_dtoa_r+0x304>)
 80c0e2a:	9300      	str	r3, [sp, #0]
 80c0e2c:	3303      	adds	r3, #3
 80c0e2e:	e7f3      	b.n	80c0e18 <_dtoa_r+0xa0>
 80c0e30:	ed9d 7b02 	vldr	d7, [sp, #8]
 80c0e34:	2200      	movs	r2, #0
 80c0e36:	ec51 0b17 	vmov	r0, r1, d7
 80c0e3a:	2300      	movs	r3, #0
 80c0e3c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80c0e40:	f7df fe42 	bl	80a0ac8 <__aeabi_dcmpeq>
 80c0e44:	4680      	mov	r8, r0
 80c0e46:	b158      	cbz	r0, 80c0e60 <_dtoa_r+0xe8>
 80c0e48:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80c0e4a:	2301      	movs	r3, #1
 80c0e4c:	6013      	str	r3, [r2, #0]
 80c0e4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80c0e50:	2b00      	cmp	r3, #0
 80c0e52:	f000 8551 	beq.w	80c18f8 <_dtoa_r+0xb80>
 80c0e56:	488b      	ldr	r0, [pc, #556]	; (80c1084 <_dtoa_r+0x30c>)
 80c0e58:	6018      	str	r0, [r3, #0]
 80c0e5a:	1e43      	subs	r3, r0, #1
 80c0e5c:	9300      	str	r3, [sp, #0]
 80c0e5e:	e7dd      	b.n	80c0e1c <_dtoa_r+0xa4>
 80c0e60:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80c0e64:	aa12      	add	r2, sp, #72	; 0x48
 80c0e66:	a913      	add	r1, sp, #76	; 0x4c
 80c0e68:	4620      	mov	r0, r4
 80c0e6a:	f001 facb 	bl	80c2404 <__d2b>
 80c0e6e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80c0e72:	4683      	mov	fp, r0
 80c0e74:	2d00      	cmp	r5, #0
 80c0e76:	d07c      	beq.n	80c0f72 <_dtoa_r+0x1fa>
 80c0e78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80c0e7a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80c0e7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80c0e82:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80c0e86:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80c0e8a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80c0e8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80c0e92:	4b7d      	ldr	r3, [pc, #500]	; (80c1088 <_dtoa_r+0x310>)
 80c0e94:	2200      	movs	r2, #0
 80c0e96:	4630      	mov	r0, r6
 80c0e98:	4639      	mov	r1, r7
 80c0e9a:	f7df f9f5 	bl	80a0288 <__aeabi_dsub>
 80c0e9e:	a36e      	add	r3, pc, #440	; (adr r3, 80c1058 <_dtoa_r+0x2e0>)
 80c0ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80c0ea4:	f7df fba8 	bl	80a05f8 <__aeabi_dmul>
 80c0ea8:	a36d      	add	r3, pc, #436	; (adr r3, 80c1060 <_dtoa_r+0x2e8>)
 80c0eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80c0eae:	f7df f9ed 	bl	80a028c <__adddf3>
 80c0eb2:	4606      	mov	r6, r0
 80c0eb4:	4628      	mov	r0, r5
 80c0eb6:	460f      	mov	r7, r1
 80c0eb8:	f7df fb34 	bl	80a0524 <__aeabi_i2d>
 80c0ebc:	a36a      	add	r3, pc, #424	; (adr r3, 80c1068 <_dtoa_r+0x2f0>)
 80c0ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 80c0ec2:	f7df fb99 	bl	80a05f8 <__aeabi_dmul>
 80c0ec6:	4602      	mov	r2, r0
 80c0ec8:	460b      	mov	r3, r1
 80c0eca:	4630      	mov	r0, r6
 80c0ecc:	4639      	mov	r1, r7
 80c0ece:	f7df f9dd 	bl	80a028c <__adddf3>
 80c0ed2:	4606      	mov	r6, r0
 80c0ed4:	460f      	mov	r7, r1
 80c0ed6:	f7df fe3f 	bl	80a0b58 <__aeabi_d2iz>
 80c0eda:	2200      	movs	r2, #0
 80c0edc:	4682      	mov	sl, r0
 80c0ede:	2300      	movs	r3, #0
 80c0ee0:	4630      	mov	r0, r6
 80c0ee2:	4639      	mov	r1, r7
 80c0ee4:	f7df fdfa 	bl	80a0adc <__aeabi_dcmplt>
 80c0ee8:	b148      	cbz	r0, 80c0efe <_dtoa_r+0x186>
 80c0eea:	4650      	mov	r0, sl
 80c0eec:	f7df fb1a 	bl	80a0524 <__aeabi_i2d>
 80c0ef0:	4632      	mov	r2, r6
 80c0ef2:	463b      	mov	r3, r7
 80c0ef4:	f7df fde8 	bl	80a0ac8 <__aeabi_dcmpeq>
 80c0ef8:	b908      	cbnz	r0, 80c0efe <_dtoa_r+0x186>
 80c0efa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80c0efe:	f1ba 0f16 	cmp.w	sl, #22
 80c0f02:	d854      	bhi.n	80c0fae <_dtoa_r+0x236>
 80c0f04:	4b61      	ldr	r3, [pc, #388]	; (80c108c <_dtoa_r+0x314>)
 80c0f06:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80c0f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80c0f0e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80c0f12:	f7df fde3 	bl	80a0adc <__aeabi_dcmplt>
 80c0f16:	2800      	cmp	r0, #0
 80c0f18:	d04b      	beq.n	80c0fb2 <_dtoa_r+0x23a>
 80c0f1a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80c0f1e:	2300      	movs	r3, #0
 80c0f20:	930e      	str	r3, [sp, #56]	; 0x38
 80c0f22:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80c0f24:	1b5d      	subs	r5, r3, r5
 80c0f26:	1e6b      	subs	r3, r5, #1
 80c0f28:	9304      	str	r3, [sp, #16]
 80c0f2a:	bf43      	ittte	mi
 80c0f2c:	2300      	movmi	r3, #0
 80c0f2e:	f1c5 0801 	rsbmi	r8, r5, #1
 80c0f32:	9304      	strmi	r3, [sp, #16]
 80c0f34:	f04f 0800 	movpl.w	r8, #0
 80c0f38:	f1ba 0f00 	cmp.w	sl, #0
 80c0f3c:	db3b      	blt.n	80c0fb6 <_dtoa_r+0x23e>
 80c0f3e:	9b04      	ldr	r3, [sp, #16]
 80c0f40:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80c0f44:	4453      	add	r3, sl
 80c0f46:	9304      	str	r3, [sp, #16]
 80c0f48:	2300      	movs	r3, #0
 80c0f4a:	9306      	str	r3, [sp, #24]
 80c0f4c:	9b05      	ldr	r3, [sp, #20]
 80c0f4e:	2b09      	cmp	r3, #9
 80c0f50:	d869      	bhi.n	80c1026 <_dtoa_r+0x2ae>
 80c0f52:	2b05      	cmp	r3, #5
 80c0f54:	bfc4      	itt	gt
 80c0f56:	3b04      	subgt	r3, #4
 80c0f58:	9305      	strgt	r3, [sp, #20]
 80c0f5a:	9b05      	ldr	r3, [sp, #20]
 80c0f5c:	f1a3 0302 	sub.w	r3, r3, #2
 80c0f60:	bfcc      	ite	gt
 80c0f62:	2500      	movgt	r5, #0
 80c0f64:	2501      	movle	r5, #1
 80c0f66:	2b03      	cmp	r3, #3
 80c0f68:	d869      	bhi.n	80c103e <_dtoa_r+0x2c6>
 80c0f6a:	e8df f003 	tbb	[pc, r3]
 80c0f6e:	4e2c      	.short	0x4e2c
 80c0f70:	5a4c      	.short	0x5a4c
 80c0f72:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80c0f76:	441d      	add	r5, r3
 80c0f78:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80c0f7c:	2b20      	cmp	r3, #32
 80c0f7e:	bfc1      	itttt	gt
 80c0f80:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80c0f84:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80c0f88:	fa09 f303 	lslgt.w	r3, r9, r3
 80c0f8c:	fa26 f000 	lsrgt.w	r0, r6, r0
 80c0f90:	bfda      	itte	le
 80c0f92:	f1c3 0320 	rsble	r3, r3, #32
 80c0f96:	fa06 f003 	lslle.w	r0, r6, r3
 80c0f9a:	4318      	orrgt	r0, r3
 80c0f9c:	f7df fab2 	bl	80a0504 <__aeabi_ui2d>
 80c0fa0:	2301      	movs	r3, #1
 80c0fa2:	4606      	mov	r6, r0
 80c0fa4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80c0fa8:	3d01      	subs	r5, #1
 80c0faa:	9310      	str	r3, [sp, #64]	; 0x40
 80c0fac:	e771      	b.n	80c0e92 <_dtoa_r+0x11a>
 80c0fae:	2301      	movs	r3, #1
 80c0fb0:	e7b6      	b.n	80c0f20 <_dtoa_r+0x1a8>
 80c0fb2:	900e      	str	r0, [sp, #56]	; 0x38
 80c0fb4:	e7b5      	b.n	80c0f22 <_dtoa_r+0x1aa>
 80c0fb6:	f1ca 0300 	rsb	r3, sl, #0
 80c0fba:	9306      	str	r3, [sp, #24]
 80c0fbc:	2300      	movs	r3, #0
 80c0fbe:	eba8 080a 	sub.w	r8, r8, sl
 80c0fc2:	930d      	str	r3, [sp, #52]	; 0x34
 80c0fc4:	e7c2      	b.n	80c0f4c <_dtoa_r+0x1d4>
 80c0fc6:	2300      	movs	r3, #0
 80c0fc8:	9308      	str	r3, [sp, #32]
 80c0fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80c0fcc:	2b00      	cmp	r3, #0
 80c0fce:	dc39      	bgt.n	80c1044 <_dtoa_r+0x2cc>
 80c0fd0:	f04f 0901 	mov.w	r9, #1
 80c0fd4:	f8cd 9004 	str.w	r9, [sp, #4]
 80c0fd8:	464b      	mov	r3, r9
 80c0fda:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80c0fde:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80c0fe0:	2200      	movs	r2, #0
 80c0fe2:	6042      	str	r2, [r0, #4]
 80c0fe4:	2204      	movs	r2, #4
 80c0fe6:	f102 0614 	add.w	r6, r2, #20
 80c0fea:	429e      	cmp	r6, r3
 80c0fec:	6841      	ldr	r1, [r0, #4]
 80c0fee:	d92f      	bls.n	80c1050 <_dtoa_r+0x2d8>
 80c0ff0:	4620      	mov	r0, r4
 80c0ff2:	f000 fee5 	bl	80c1dc0 <_Balloc>
 80c0ff6:	9000      	str	r0, [sp, #0]
 80c0ff8:	2800      	cmp	r0, #0
 80c0ffa:	d14b      	bne.n	80c1094 <_dtoa_r+0x31c>
 80c0ffc:	4b24      	ldr	r3, [pc, #144]	; (80c1090 <_dtoa_r+0x318>)
 80c0ffe:	4602      	mov	r2, r0
 80c1000:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80c1004:	e6d1      	b.n	80c0daa <_dtoa_r+0x32>
 80c1006:	2301      	movs	r3, #1
 80c1008:	e7de      	b.n	80c0fc8 <_dtoa_r+0x250>
 80c100a:	2300      	movs	r3, #0
 80c100c:	9308      	str	r3, [sp, #32]
 80c100e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80c1010:	eb0a 0903 	add.w	r9, sl, r3
 80c1014:	f109 0301 	add.w	r3, r9, #1
 80c1018:	2b01      	cmp	r3, #1
 80c101a:	9301      	str	r3, [sp, #4]
 80c101c:	bfb8      	it	lt
 80c101e:	2301      	movlt	r3, #1
 80c1020:	e7dd      	b.n	80c0fde <_dtoa_r+0x266>
 80c1022:	2301      	movs	r3, #1
 80c1024:	e7f2      	b.n	80c100c <_dtoa_r+0x294>
 80c1026:	2501      	movs	r5, #1
 80c1028:	2300      	movs	r3, #0
 80c102a:	9305      	str	r3, [sp, #20]
 80c102c:	9508      	str	r5, [sp, #32]
 80c102e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80c1032:	2200      	movs	r2, #0
 80c1034:	f8cd 9004 	str.w	r9, [sp, #4]
 80c1038:	2312      	movs	r3, #18
 80c103a:	9209      	str	r2, [sp, #36]	; 0x24
 80c103c:	e7cf      	b.n	80c0fde <_dtoa_r+0x266>
 80c103e:	2301      	movs	r3, #1
 80c1040:	9308      	str	r3, [sp, #32]
 80c1042:	e7f4      	b.n	80c102e <_dtoa_r+0x2b6>
 80c1044:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80c1048:	f8cd 9004 	str.w	r9, [sp, #4]
 80c104c:	464b      	mov	r3, r9
 80c104e:	e7c6      	b.n	80c0fde <_dtoa_r+0x266>
 80c1050:	3101      	adds	r1, #1
 80c1052:	6041      	str	r1, [r0, #4]
 80c1054:	0052      	lsls	r2, r2, #1
 80c1056:	e7c6      	b.n	80c0fe6 <_dtoa_r+0x26e>
 80c1058:	636f4361 	.word	0x636f4361
 80c105c:	3fd287a7 	.word	0x3fd287a7
 80c1060:	8b60c8b3 	.word	0x8b60c8b3
 80c1064:	3fc68a28 	.word	0x3fc68a28
 80c1068:	509f79fb 	.word	0x509f79fb
 80c106c:	3fd34413 	.word	0x3fd34413
 80c1070:	080dd2f9 	.word	0x080dd2f9
 80c1074:	080dd310 	.word	0x080dd310
 80c1078:	7ff00000 	.word	0x7ff00000
 80c107c:	080dd2f5 	.word	0x080dd2f5
 80c1080:	080dd2ec 	.word	0x080dd2ec
 80c1084:	080dd2c9 	.word	0x080dd2c9
 80c1088:	3ff80000 	.word	0x3ff80000
 80c108c:	080dd468 	.word	0x080dd468
 80c1090:	080dd36f 	.word	0x080dd36f
 80c1094:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80c1096:	9a00      	ldr	r2, [sp, #0]
 80c1098:	601a      	str	r2, [r3, #0]
 80c109a:	9b01      	ldr	r3, [sp, #4]
 80c109c:	2b0e      	cmp	r3, #14
 80c109e:	f200 80ad 	bhi.w	80c11fc <_dtoa_r+0x484>
 80c10a2:	2d00      	cmp	r5, #0
 80c10a4:	f000 80aa 	beq.w	80c11fc <_dtoa_r+0x484>
 80c10a8:	f1ba 0f00 	cmp.w	sl, #0
 80c10ac:	dd36      	ble.n	80c111c <_dtoa_r+0x3a4>
 80c10ae:	4ac3      	ldr	r2, [pc, #780]	; (80c13bc <_dtoa_r+0x644>)
 80c10b0:	f00a 030f 	and.w	r3, sl, #15
 80c10b4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80c10b8:	ed93 7b00 	vldr	d7, [r3]
 80c10bc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80c10c0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80c10c4:	eeb0 8a47 	vmov.f32	s16, s14
 80c10c8:	eef0 8a67 	vmov.f32	s17, s15
 80c10cc:	d016      	beq.n	80c10fc <_dtoa_r+0x384>
 80c10ce:	4bbc      	ldr	r3, [pc, #752]	; (80c13c0 <_dtoa_r+0x648>)
 80c10d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80c10d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80c10d8:	f7df fbb8 	bl	80a084c <__aeabi_ddiv>
 80c10dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80c10e0:	f007 070f 	and.w	r7, r7, #15
 80c10e4:	2503      	movs	r5, #3
 80c10e6:	4eb6      	ldr	r6, [pc, #728]	; (80c13c0 <_dtoa_r+0x648>)
 80c10e8:	b957      	cbnz	r7, 80c1100 <_dtoa_r+0x388>
 80c10ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80c10ee:	ec53 2b18 	vmov	r2, r3, d8
 80c10f2:	f7df fbab 	bl	80a084c <__aeabi_ddiv>
 80c10f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80c10fa:	e029      	b.n	80c1150 <_dtoa_r+0x3d8>
 80c10fc:	2502      	movs	r5, #2
 80c10fe:	e7f2      	b.n	80c10e6 <_dtoa_r+0x36e>
 80c1100:	07f9      	lsls	r1, r7, #31
 80c1102:	d508      	bpl.n	80c1116 <_dtoa_r+0x39e>
 80c1104:	ec51 0b18 	vmov	r0, r1, d8
 80c1108:	e9d6 2300 	ldrd	r2, r3, [r6]
 80c110c:	f7df fa74 	bl	80a05f8 <__aeabi_dmul>
 80c1110:	ec41 0b18 	vmov	d8, r0, r1
 80c1114:	3501      	adds	r5, #1
 80c1116:	107f      	asrs	r7, r7, #1
 80c1118:	3608      	adds	r6, #8
 80c111a:	e7e5      	b.n	80c10e8 <_dtoa_r+0x370>
 80c111c:	f000 80a6 	beq.w	80c126c <_dtoa_r+0x4f4>
 80c1120:	f1ca 0600 	rsb	r6, sl, #0
 80c1124:	4ba5      	ldr	r3, [pc, #660]	; (80c13bc <_dtoa_r+0x644>)
 80c1126:	4fa6      	ldr	r7, [pc, #664]	; (80c13c0 <_dtoa_r+0x648>)
 80c1128:	f006 020f 	and.w	r2, r6, #15
 80c112c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80c1130:	e9d3 2300 	ldrd	r2, r3, [r3]
 80c1134:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80c1138:	f7df fa5e 	bl	80a05f8 <__aeabi_dmul>
 80c113c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80c1140:	1136      	asrs	r6, r6, #4
 80c1142:	2300      	movs	r3, #0
 80c1144:	2502      	movs	r5, #2
 80c1146:	2e00      	cmp	r6, #0
 80c1148:	f040 8085 	bne.w	80c1256 <_dtoa_r+0x4de>
 80c114c:	2b00      	cmp	r3, #0
 80c114e:	d1d2      	bne.n	80c10f6 <_dtoa_r+0x37e>
 80c1150:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80c1152:	2b00      	cmp	r3, #0
 80c1154:	f000 808c 	beq.w	80c1270 <_dtoa_r+0x4f8>
 80c1158:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80c115c:	4b99      	ldr	r3, [pc, #612]	; (80c13c4 <_dtoa_r+0x64c>)
 80c115e:	2200      	movs	r2, #0
 80c1160:	4630      	mov	r0, r6
 80c1162:	4639      	mov	r1, r7
 80c1164:	f7df fcba 	bl	80a0adc <__aeabi_dcmplt>
 80c1168:	2800      	cmp	r0, #0
 80c116a:	f000 8081 	beq.w	80c1270 <_dtoa_r+0x4f8>
 80c116e:	9b01      	ldr	r3, [sp, #4]
 80c1170:	2b00      	cmp	r3, #0
 80c1172:	d07d      	beq.n	80c1270 <_dtoa_r+0x4f8>
 80c1174:	f1b9 0f00 	cmp.w	r9, #0
 80c1178:	dd3c      	ble.n	80c11f4 <_dtoa_r+0x47c>
 80c117a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80c117e:	9307      	str	r3, [sp, #28]
 80c1180:	2200      	movs	r2, #0
 80c1182:	4b91      	ldr	r3, [pc, #580]	; (80c13c8 <_dtoa_r+0x650>)
 80c1184:	4630      	mov	r0, r6
 80c1186:	4639      	mov	r1, r7
 80c1188:	f7df fa36 	bl	80a05f8 <__aeabi_dmul>
 80c118c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80c1190:	3501      	adds	r5, #1
 80c1192:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80c1196:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80c119a:	4628      	mov	r0, r5
 80c119c:	f7df f9c2 	bl	80a0524 <__aeabi_i2d>
 80c11a0:	4632      	mov	r2, r6
 80c11a2:	463b      	mov	r3, r7
 80c11a4:	f7df fa28 	bl	80a05f8 <__aeabi_dmul>
 80c11a8:	4b88      	ldr	r3, [pc, #544]	; (80c13cc <_dtoa_r+0x654>)
 80c11aa:	2200      	movs	r2, #0
 80c11ac:	f7df f86e 	bl	80a028c <__adddf3>
 80c11b0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80c11b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80c11b8:	9303      	str	r3, [sp, #12]
 80c11ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80c11bc:	2b00      	cmp	r3, #0
 80c11be:	d15c      	bne.n	80c127a <_dtoa_r+0x502>
 80c11c0:	4b83      	ldr	r3, [pc, #524]	; (80c13d0 <_dtoa_r+0x658>)
 80c11c2:	2200      	movs	r2, #0
 80c11c4:	4630      	mov	r0, r6
 80c11c6:	4639      	mov	r1, r7
 80c11c8:	f7df f85e 	bl	80a0288 <__aeabi_dsub>
 80c11cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80c11d0:	4606      	mov	r6, r0
 80c11d2:	460f      	mov	r7, r1
 80c11d4:	f7df fca0 	bl	80a0b18 <__aeabi_dcmpgt>
 80c11d8:	2800      	cmp	r0, #0
 80c11da:	f040 8296 	bne.w	80c170a <_dtoa_r+0x992>
 80c11de:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80c11e2:	4630      	mov	r0, r6
 80c11e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80c11e8:	4639      	mov	r1, r7
 80c11ea:	f7df fc77 	bl	80a0adc <__aeabi_dcmplt>
 80c11ee:	2800      	cmp	r0, #0
 80c11f0:	f040 8288 	bne.w	80c1704 <_dtoa_r+0x98c>
 80c11f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80c11f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80c11fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80c11fe:	2b00      	cmp	r3, #0
 80c1200:	f2c0 8158 	blt.w	80c14b4 <_dtoa_r+0x73c>
 80c1204:	f1ba 0f0e 	cmp.w	sl, #14
 80c1208:	f300 8154 	bgt.w	80c14b4 <_dtoa_r+0x73c>
 80c120c:	4b6b      	ldr	r3, [pc, #428]	; (80c13bc <_dtoa_r+0x644>)
 80c120e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80c1212:	e9d3 8900 	ldrd	r8, r9, [r3]
 80c1216:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80c1218:	2b00      	cmp	r3, #0
 80c121a:	f280 80e3 	bge.w	80c13e4 <_dtoa_r+0x66c>
 80c121e:	9b01      	ldr	r3, [sp, #4]
 80c1220:	2b00      	cmp	r3, #0
 80c1222:	f300 80df 	bgt.w	80c13e4 <_dtoa_r+0x66c>
 80c1226:	f040 826d 	bne.w	80c1704 <_dtoa_r+0x98c>
 80c122a:	4b69      	ldr	r3, [pc, #420]	; (80c13d0 <_dtoa_r+0x658>)
 80c122c:	2200      	movs	r2, #0
 80c122e:	4640      	mov	r0, r8
 80c1230:	4649      	mov	r1, r9
 80c1232:	f7df f9e1 	bl	80a05f8 <__aeabi_dmul>
 80c1236:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80c123a:	f7df fc63 	bl	80a0b04 <__aeabi_dcmpge>
 80c123e:	9e01      	ldr	r6, [sp, #4]
 80c1240:	4637      	mov	r7, r6
 80c1242:	2800      	cmp	r0, #0
 80c1244:	f040 8243 	bne.w	80c16ce <_dtoa_r+0x956>
 80c1248:	9d00      	ldr	r5, [sp, #0]
 80c124a:	2331      	movs	r3, #49	; 0x31
 80c124c:	f805 3b01 	strb.w	r3, [r5], #1
 80c1250:	f10a 0a01 	add.w	sl, sl, #1
 80c1254:	e23f      	b.n	80c16d6 <_dtoa_r+0x95e>
 80c1256:	07f2      	lsls	r2, r6, #31
 80c1258:	d505      	bpl.n	80c1266 <_dtoa_r+0x4ee>
 80c125a:	e9d7 2300 	ldrd	r2, r3, [r7]
 80c125e:	f7df f9cb 	bl	80a05f8 <__aeabi_dmul>
 80c1262:	3501      	adds	r5, #1
 80c1264:	2301      	movs	r3, #1
 80c1266:	1076      	asrs	r6, r6, #1
 80c1268:	3708      	adds	r7, #8
 80c126a:	e76c      	b.n	80c1146 <_dtoa_r+0x3ce>
 80c126c:	2502      	movs	r5, #2
 80c126e:	e76f      	b.n	80c1150 <_dtoa_r+0x3d8>
 80c1270:	9b01      	ldr	r3, [sp, #4]
 80c1272:	f8cd a01c 	str.w	sl, [sp, #28]
 80c1276:	930c      	str	r3, [sp, #48]	; 0x30
 80c1278:	e78d      	b.n	80c1196 <_dtoa_r+0x41e>
 80c127a:	9900      	ldr	r1, [sp, #0]
 80c127c:	980c      	ldr	r0, [sp, #48]	; 0x30
 80c127e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80c1280:	4b4e      	ldr	r3, [pc, #312]	; (80c13bc <_dtoa_r+0x644>)
 80c1282:	ed9d 7b02 	vldr	d7, [sp, #8]
 80c1286:	4401      	add	r1, r0
 80c1288:	9102      	str	r1, [sp, #8]
 80c128a:	9908      	ldr	r1, [sp, #32]
 80c128c:	eeb0 8a47 	vmov.f32	s16, s14
 80c1290:	eef0 8a67 	vmov.f32	s17, s15
 80c1294:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80c1298:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80c129c:	2900      	cmp	r1, #0
 80c129e:	d045      	beq.n	80c132c <_dtoa_r+0x5b4>
 80c12a0:	494c      	ldr	r1, [pc, #304]	; (80c13d4 <_dtoa_r+0x65c>)
 80c12a2:	2000      	movs	r0, #0
 80c12a4:	f7df fad2 	bl	80a084c <__aeabi_ddiv>
 80c12a8:	ec53 2b18 	vmov	r2, r3, d8
 80c12ac:	f7de ffec 	bl	80a0288 <__aeabi_dsub>
 80c12b0:	9d00      	ldr	r5, [sp, #0]
 80c12b2:	ec41 0b18 	vmov	d8, r0, r1
 80c12b6:	4639      	mov	r1, r7
 80c12b8:	4630      	mov	r0, r6
 80c12ba:	f7df fc4d 	bl	80a0b58 <__aeabi_d2iz>
 80c12be:	900c      	str	r0, [sp, #48]	; 0x30
 80c12c0:	f7df f930 	bl	80a0524 <__aeabi_i2d>
 80c12c4:	4602      	mov	r2, r0
 80c12c6:	460b      	mov	r3, r1
 80c12c8:	4630      	mov	r0, r6
 80c12ca:	4639      	mov	r1, r7
 80c12cc:	f7de ffdc 	bl	80a0288 <__aeabi_dsub>
 80c12d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80c12d2:	3330      	adds	r3, #48	; 0x30
 80c12d4:	f805 3b01 	strb.w	r3, [r5], #1
 80c12d8:	ec53 2b18 	vmov	r2, r3, d8
 80c12dc:	4606      	mov	r6, r0
 80c12de:	460f      	mov	r7, r1
 80c12e0:	f7df fbfc 	bl	80a0adc <__aeabi_dcmplt>
 80c12e4:	2800      	cmp	r0, #0
 80c12e6:	d165      	bne.n	80c13b4 <_dtoa_r+0x63c>
 80c12e8:	4632      	mov	r2, r6
 80c12ea:	463b      	mov	r3, r7
 80c12ec:	4935      	ldr	r1, [pc, #212]	; (80c13c4 <_dtoa_r+0x64c>)
 80c12ee:	2000      	movs	r0, #0
 80c12f0:	f7de ffca 	bl	80a0288 <__aeabi_dsub>
 80c12f4:	ec53 2b18 	vmov	r2, r3, d8
 80c12f8:	f7df fbf0 	bl	80a0adc <__aeabi_dcmplt>
 80c12fc:	2800      	cmp	r0, #0
 80c12fe:	f040 80b9 	bne.w	80c1474 <_dtoa_r+0x6fc>
 80c1302:	9b02      	ldr	r3, [sp, #8]
 80c1304:	429d      	cmp	r5, r3
 80c1306:	f43f af75 	beq.w	80c11f4 <_dtoa_r+0x47c>
 80c130a:	4b2f      	ldr	r3, [pc, #188]	; (80c13c8 <_dtoa_r+0x650>)
 80c130c:	ec51 0b18 	vmov	r0, r1, d8
 80c1310:	2200      	movs	r2, #0
 80c1312:	f7df f971 	bl	80a05f8 <__aeabi_dmul>
 80c1316:	4b2c      	ldr	r3, [pc, #176]	; (80c13c8 <_dtoa_r+0x650>)
 80c1318:	ec41 0b18 	vmov	d8, r0, r1
 80c131c:	2200      	movs	r2, #0
 80c131e:	4630      	mov	r0, r6
 80c1320:	4639      	mov	r1, r7
 80c1322:	f7df f969 	bl	80a05f8 <__aeabi_dmul>
 80c1326:	4606      	mov	r6, r0
 80c1328:	460f      	mov	r7, r1
 80c132a:	e7c4      	b.n	80c12b6 <_dtoa_r+0x53e>
 80c132c:	ec51 0b17 	vmov	r0, r1, d7
 80c1330:	f7df f962 	bl	80a05f8 <__aeabi_dmul>
 80c1334:	9b02      	ldr	r3, [sp, #8]
 80c1336:	9d00      	ldr	r5, [sp, #0]
 80c1338:	930c      	str	r3, [sp, #48]	; 0x30
 80c133a:	ec41 0b18 	vmov	d8, r0, r1
 80c133e:	4639      	mov	r1, r7
 80c1340:	4630      	mov	r0, r6
 80c1342:	f7df fc09 	bl	80a0b58 <__aeabi_d2iz>
 80c1346:	9011      	str	r0, [sp, #68]	; 0x44
 80c1348:	f7df f8ec 	bl	80a0524 <__aeabi_i2d>
 80c134c:	4602      	mov	r2, r0
 80c134e:	460b      	mov	r3, r1
 80c1350:	4630      	mov	r0, r6
 80c1352:	4639      	mov	r1, r7
 80c1354:	f7de ff98 	bl	80a0288 <__aeabi_dsub>
 80c1358:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80c135a:	3330      	adds	r3, #48	; 0x30
 80c135c:	f805 3b01 	strb.w	r3, [r5], #1
 80c1360:	9b02      	ldr	r3, [sp, #8]
 80c1362:	429d      	cmp	r5, r3
 80c1364:	4606      	mov	r6, r0
 80c1366:	460f      	mov	r7, r1
 80c1368:	f04f 0200 	mov.w	r2, #0
 80c136c:	d134      	bne.n	80c13d8 <_dtoa_r+0x660>
 80c136e:	4b19      	ldr	r3, [pc, #100]	; (80c13d4 <_dtoa_r+0x65c>)
 80c1370:	ec51 0b18 	vmov	r0, r1, d8
 80c1374:	f7de ff8a 	bl	80a028c <__adddf3>
 80c1378:	4602      	mov	r2, r0
 80c137a:	460b      	mov	r3, r1
 80c137c:	4630      	mov	r0, r6
 80c137e:	4639      	mov	r1, r7
 80c1380:	f7df fbca 	bl	80a0b18 <__aeabi_dcmpgt>
 80c1384:	2800      	cmp	r0, #0
 80c1386:	d175      	bne.n	80c1474 <_dtoa_r+0x6fc>
 80c1388:	ec53 2b18 	vmov	r2, r3, d8
 80c138c:	4911      	ldr	r1, [pc, #68]	; (80c13d4 <_dtoa_r+0x65c>)
 80c138e:	2000      	movs	r0, #0
 80c1390:	f7de ff7a 	bl	80a0288 <__aeabi_dsub>
 80c1394:	4602      	mov	r2, r0
 80c1396:	460b      	mov	r3, r1
 80c1398:	4630      	mov	r0, r6
 80c139a:	4639      	mov	r1, r7
 80c139c:	f7df fb9e 	bl	80a0adc <__aeabi_dcmplt>
 80c13a0:	2800      	cmp	r0, #0
 80c13a2:	f43f af27 	beq.w	80c11f4 <_dtoa_r+0x47c>
 80c13a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80c13a8:	1e6b      	subs	r3, r5, #1
 80c13aa:	930c      	str	r3, [sp, #48]	; 0x30
 80c13ac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80c13b0:	2b30      	cmp	r3, #48	; 0x30
 80c13b2:	d0f8      	beq.n	80c13a6 <_dtoa_r+0x62e>
 80c13b4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80c13b8:	e04a      	b.n	80c1450 <_dtoa_r+0x6d8>
 80c13ba:	bf00      	nop
 80c13bc:	080dd468 	.word	0x080dd468
 80c13c0:	080dd440 	.word	0x080dd440
 80c13c4:	3ff00000 	.word	0x3ff00000
 80c13c8:	40240000 	.word	0x40240000
 80c13cc:	401c0000 	.word	0x401c0000
 80c13d0:	40140000 	.word	0x40140000
 80c13d4:	3fe00000 	.word	0x3fe00000
 80c13d8:	4baf      	ldr	r3, [pc, #700]	; (80c1698 <_dtoa_r+0x920>)
 80c13da:	f7df f90d 	bl	80a05f8 <__aeabi_dmul>
 80c13de:	4606      	mov	r6, r0
 80c13e0:	460f      	mov	r7, r1
 80c13e2:	e7ac      	b.n	80c133e <_dtoa_r+0x5c6>
 80c13e4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80c13e8:	9d00      	ldr	r5, [sp, #0]
 80c13ea:	4642      	mov	r2, r8
 80c13ec:	464b      	mov	r3, r9
 80c13ee:	4630      	mov	r0, r6
 80c13f0:	4639      	mov	r1, r7
 80c13f2:	f7df fa2b 	bl	80a084c <__aeabi_ddiv>
 80c13f6:	f7df fbaf 	bl	80a0b58 <__aeabi_d2iz>
 80c13fa:	9002      	str	r0, [sp, #8]
 80c13fc:	f7df f892 	bl	80a0524 <__aeabi_i2d>
 80c1400:	4642      	mov	r2, r8
 80c1402:	464b      	mov	r3, r9
 80c1404:	f7df f8f8 	bl	80a05f8 <__aeabi_dmul>
 80c1408:	4602      	mov	r2, r0
 80c140a:	460b      	mov	r3, r1
 80c140c:	4630      	mov	r0, r6
 80c140e:	4639      	mov	r1, r7
 80c1410:	f7de ff3a 	bl	80a0288 <__aeabi_dsub>
 80c1414:	9e02      	ldr	r6, [sp, #8]
 80c1416:	9f01      	ldr	r7, [sp, #4]
 80c1418:	3630      	adds	r6, #48	; 0x30
 80c141a:	f805 6b01 	strb.w	r6, [r5], #1
 80c141e:	9e00      	ldr	r6, [sp, #0]
 80c1420:	1bae      	subs	r6, r5, r6
 80c1422:	42b7      	cmp	r7, r6
 80c1424:	4602      	mov	r2, r0
 80c1426:	460b      	mov	r3, r1
 80c1428:	d137      	bne.n	80c149a <_dtoa_r+0x722>
 80c142a:	f7de ff2f 	bl	80a028c <__adddf3>
 80c142e:	4642      	mov	r2, r8
 80c1430:	464b      	mov	r3, r9
 80c1432:	4606      	mov	r6, r0
 80c1434:	460f      	mov	r7, r1
 80c1436:	f7df fb6f 	bl	80a0b18 <__aeabi_dcmpgt>
 80c143a:	b9c8      	cbnz	r0, 80c1470 <_dtoa_r+0x6f8>
 80c143c:	4642      	mov	r2, r8
 80c143e:	464b      	mov	r3, r9
 80c1440:	4630      	mov	r0, r6
 80c1442:	4639      	mov	r1, r7
 80c1444:	f7df fb40 	bl	80a0ac8 <__aeabi_dcmpeq>
 80c1448:	b110      	cbz	r0, 80c1450 <_dtoa_r+0x6d8>
 80c144a:	9b02      	ldr	r3, [sp, #8]
 80c144c:	07d9      	lsls	r1, r3, #31
 80c144e:	d40f      	bmi.n	80c1470 <_dtoa_r+0x6f8>
 80c1450:	4620      	mov	r0, r4
 80c1452:	4659      	mov	r1, fp
 80c1454:	f000 fcf4 	bl	80c1e40 <_Bfree>
 80c1458:	2300      	movs	r3, #0
 80c145a:	702b      	strb	r3, [r5, #0]
 80c145c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80c145e:	f10a 0001 	add.w	r0, sl, #1
 80c1462:	6018      	str	r0, [r3, #0]
 80c1464:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80c1466:	2b00      	cmp	r3, #0
 80c1468:	f43f acd8 	beq.w	80c0e1c <_dtoa_r+0xa4>
 80c146c:	601d      	str	r5, [r3, #0]
 80c146e:	e4d5      	b.n	80c0e1c <_dtoa_r+0xa4>
 80c1470:	f8cd a01c 	str.w	sl, [sp, #28]
 80c1474:	462b      	mov	r3, r5
 80c1476:	461d      	mov	r5, r3
 80c1478:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80c147c:	2a39      	cmp	r2, #57	; 0x39
 80c147e:	d108      	bne.n	80c1492 <_dtoa_r+0x71a>
 80c1480:	9a00      	ldr	r2, [sp, #0]
 80c1482:	429a      	cmp	r2, r3
 80c1484:	d1f7      	bne.n	80c1476 <_dtoa_r+0x6fe>
 80c1486:	9a07      	ldr	r2, [sp, #28]
 80c1488:	9900      	ldr	r1, [sp, #0]
 80c148a:	3201      	adds	r2, #1
 80c148c:	9207      	str	r2, [sp, #28]
 80c148e:	2230      	movs	r2, #48	; 0x30
 80c1490:	700a      	strb	r2, [r1, #0]
 80c1492:	781a      	ldrb	r2, [r3, #0]
 80c1494:	3201      	adds	r2, #1
 80c1496:	701a      	strb	r2, [r3, #0]
 80c1498:	e78c      	b.n	80c13b4 <_dtoa_r+0x63c>
 80c149a:	4b7f      	ldr	r3, [pc, #508]	; (80c1698 <_dtoa_r+0x920>)
 80c149c:	2200      	movs	r2, #0
 80c149e:	f7df f8ab 	bl	80a05f8 <__aeabi_dmul>
 80c14a2:	2200      	movs	r2, #0
 80c14a4:	2300      	movs	r3, #0
 80c14a6:	4606      	mov	r6, r0
 80c14a8:	460f      	mov	r7, r1
 80c14aa:	f7df fb0d 	bl	80a0ac8 <__aeabi_dcmpeq>
 80c14ae:	2800      	cmp	r0, #0
 80c14b0:	d09b      	beq.n	80c13ea <_dtoa_r+0x672>
 80c14b2:	e7cd      	b.n	80c1450 <_dtoa_r+0x6d8>
 80c14b4:	9a08      	ldr	r2, [sp, #32]
 80c14b6:	2a00      	cmp	r2, #0
 80c14b8:	f000 80c4 	beq.w	80c1644 <_dtoa_r+0x8cc>
 80c14bc:	9a05      	ldr	r2, [sp, #20]
 80c14be:	2a01      	cmp	r2, #1
 80c14c0:	f300 80a8 	bgt.w	80c1614 <_dtoa_r+0x89c>
 80c14c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80c14c6:	2a00      	cmp	r2, #0
 80c14c8:	f000 80a0 	beq.w	80c160c <_dtoa_r+0x894>
 80c14cc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80c14d0:	9e06      	ldr	r6, [sp, #24]
 80c14d2:	4645      	mov	r5, r8
 80c14d4:	9a04      	ldr	r2, [sp, #16]
 80c14d6:	2101      	movs	r1, #1
 80c14d8:	441a      	add	r2, r3
 80c14da:	4620      	mov	r0, r4
 80c14dc:	4498      	add	r8, r3
 80c14de:	9204      	str	r2, [sp, #16]
 80c14e0:	f000 fd6a 	bl	80c1fb8 <__i2b>
 80c14e4:	4607      	mov	r7, r0
 80c14e6:	2d00      	cmp	r5, #0
 80c14e8:	dd0b      	ble.n	80c1502 <_dtoa_r+0x78a>
 80c14ea:	9b04      	ldr	r3, [sp, #16]
 80c14ec:	2b00      	cmp	r3, #0
 80c14ee:	dd08      	ble.n	80c1502 <_dtoa_r+0x78a>
 80c14f0:	42ab      	cmp	r3, r5
 80c14f2:	9a04      	ldr	r2, [sp, #16]
 80c14f4:	bfa8      	it	ge
 80c14f6:	462b      	movge	r3, r5
 80c14f8:	eba8 0803 	sub.w	r8, r8, r3
 80c14fc:	1aed      	subs	r5, r5, r3
 80c14fe:	1ad3      	subs	r3, r2, r3
 80c1500:	9304      	str	r3, [sp, #16]
 80c1502:	9b06      	ldr	r3, [sp, #24]
 80c1504:	b1fb      	cbz	r3, 80c1546 <_dtoa_r+0x7ce>
 80c1506:	9b08      	ldr	r3, [sp, #32]
 80c1508:	2b00      	cmp	r3, #0
 80c150a:	f000 809f 	beq.w	80c164c <_dtoa_r+0x8d4>
 80c150e:	2e00      	cmp	r6, #0
 80c1510:	dd11      	ble.n	80c1536 <_dtoa_r+0x7be>
 80c1512:	4639      	mov	r1, r7
 80c1514:	4632      	mov	r2, r6
 80c1516:	4620      	mov	r0, r4
 80c1518:	f000 fe0a 	bl	80c2130 <__pow5mult>
 80c151c:	465a      	mov	r2, fp
 80c151e:	4601      	mov	r1, r0
 80c1520:	4607      	mov	r7, r0
 80c1522:	4620      	mov	r0, r4
 80c1524:	f000 fd5e 	bl	80c1fe4 <__multiply>
 80c1528:	4659      	mov	r1, fp
 80c152a:	9007      	str	r0, [sp, #28]
 80c152c:	4620      	mov	r0, r4
 80c152e:	f000 fc87 	bl	80c1e40 <_Bfree>
 80c1532:	9b07      	ldr	r3, [sp, #28]
 80c1534:	469b      	mov	fp, r3
 80c1536:	9b06      	ldr	r3, [sp, #24]
 80c1538:	1b9a      	subs	r2, r3, r6
 80c153a:	d004      	beq.n	80c1546 <_dtoa_r+0x7ce>
 80c153c:	4659      	mov	r1, fp
 80c153e:	4620      	mov	r0, r4
 80c1540:	f000 fdf6 	bl	80c2130 <__pow5mult>
 80c1544:	4683      	mov	fp, r0
 80c1546:	2101      	movs	r1, #1
 80c1548:	4620      	mov	r0, r4
 80c154a:	f000 fd35 	bl	80c1fb8 <__i2b>
 80c154e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80c1550:	2b00      	cmp	r3, #0
 80c1552:	4606      	mov	r6, r0
 80c1554:	dd7c      	ble.n	80c1650 <_dtoa_r+0x8d8>
 80c1556:	461a      	mov	r2, r3
 80c1558:	4601      	mov	r1, r0
 80c155a:	4620      	mov	r0, r4
 80c155c:	f000 fde8 	bl	80c2130 <__pow5mult>
 80c1560:	9b05      	ldr	r3, [sp, #20]
 80c1562:	2b01      	cmp	r3, #1
 80c1564:	4606      	mov	r6, r0
 80c1566:	dd76      	ble.n	80c1656 <_dtoa_r+0x8de>
 80c1568:	2300      	movs	r3, #0
 80c156a:	9306      	str	r3, [sp, #24]
 80c156c:	6933      	ldr	r3, [r6, #16]
 80c156e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80c1572:	6918      	ldr	r0, [r3, #16]
 80c1574:	f000 fcd0 	bl	80c1f18 <__hi0bits>
 80c1578:	f1c0 0020 	rsb	r0, r0, #32
 80c157c:	9b04      	ldr	r3, [sp, #16]
 80c157e:	4418      	add	r0, r3
 80c1580:	f010 001f 	ands.w	r0, r0, #31
 80c1584:	f000 8086 	beq.w	80c1694 <_dtoa_r+0x91c>
 80c1588:	f1c0 0320 	rsb	r3, r0, #32
 80c158c:	2b04      	cmp	r3, #4
 80c158e:	dd7f      	ble.n	80c1690 <_dtoa_r+0x918>
 80c1590:	f1c0 001c 	rsb	r0, r0, #28
 80c1594:	9b04      	ldr	r3, [sp, #16]
 80c1596:	4403      	add	r3, r0
 80c1598:	4480      	add	r8, r0
 80c159a:	4405      	add	r5, r0
 80c159c:	9304      	str	r3, [sp, #16]
 80c159e:	f1b8 0f00 	cmp.w	r8, #0
 80c15a2:	dd05      	ble.n	80c15b0 <_dtoa_r+0x838>
 80c15a4:	4659      	mov	r1, fp
 80c15a6:	4642      	mov	r2, r8
 80c15a8:	4620      	mov	r0, r4
 80c15aa:	f000 fe1b 	bl	80c21e4 <__lshift>
 80c15ae:	4683      	mov	fp, r0
 80c15b0:	9b04      	ldr	r3, [sp, #16]
 80c15b2:	2b00      	cmp	r3, #0
 80c15b4:	dd05      	ble.n	80c15c2 <_dtoa_r+0x84a>
 80c15b6:	4631      	mov	r1, r6
 80c15b8:	461a      	mov	r2, r3
 80c15ba:	4620      	mov	r0, r4
 80c15bc:	f000 fe12 	bl	80c21e4 <__lshift>
 80c15c0:	4606      	mov	r6, r0
 80c15c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80c15c4:	2b00      	cmp	r3, #0
 80c15c6:	d069      	beq.n	80c169c <_dtoa_r+0x924>
 80c15c8:	4631      	mov	r1, r6
 80c15ca:	4658      	mov	r0, fp
 80c15cc:	f000 fe76 	bl	80c22bc <__mcmp>
 80c15d0:	2800      	cmp	r0, #0
 80c15d2:	da63      	bge.n	80c169c <_dtoa_r+0x924>
 80c15d4:	2300      	movs	r3, #0
 80c15d6:	4659      	mov	r1, fp
 80c15d8:	220a      	movs	r2, #10
 80c15da:	4620      	mov	r0, r4
 80c15dc:	f000 fc52 	bl	80c1e84 <__multadd>
 80c15e0:	9b08      	ldr	r3, [sp, #32]
 80c15e2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80c15e6:	4683      	mov	fp, r0
 80c15e8:	2b00      	cmp	r3, #0
 80c15ea:	f000 818f 	beq.w	80c190c <_dtoa_r+0xb94>
 80c15ee:	4639      	mov	r1, r7
 80c15f0:	2300      	movs	r3, #0
 80c15f2:	220a      	movs	r2, #10
 80c15f4:	4620      	mov	r0, r4
 80c15f6:	f000 fc45 	bl	80c1e84 <__multadd>
 80c15fa:	f1b9 0f00 	cmp.w	r9, #0
 80c15fe:	4607      	mov	r7, r0
 80c1600:	f300 808e 	bgt.w	80c1720 <_dtoa_r+0x9a8>
 80c1604:	9b05      	ldr	r3, [sp, #20]
 80c1606:	2b02      	cmp	r3, #2
 80c1608:	dc50      	bgt.n	80c16ac <_dtoa_r+0x934>
 80c160a:	e089      	b.n	80c1720 <_dtoa_r+0x9a8>
 80c160c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80c160e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80c1612:	e75d      	b.n	80c14d0 <_dtoa_r+0x758>
 80c1614:	9b01      	ldr	r3, [sp, #4]
 80c1616:	1e5e      	subs	r6, r3, #1
 80c1618:	9b06      	ldr	r3, [sp, #24]
 80c161a:	42b3      	cmp	r3, r6
 80c161c:	bfbf      	itttt	lt
 80c161e:	9b06      	ldrlt	r3, [sp, #24]
 80c1620:	9606      	strlt	r6, [sp, #24]
 80c1622:	1af2      	sublt	r2, r6, r3
 80c1624:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80c1626:	bfb6      	itet	lt
 80c1628:	189b      	addlt	r3, r3, r2
 80c162a:	1b9e      	subge	r6, r3, r6
 80c162c:	930d      	strlt	r3, [sp, #52]	; 0x34
 80c162e:	9b01      	ldr	r3, [sp, #4]
 80c1630:	bfb8      	it	lt
 80c1632:	2600      	movlt	r6, #0
 80c1634:	2b00      	cmp	r3, #0
 80c1636:	bfb5      	itete	lt
 80c1638:	eba8 0503 	sublt.w	r5, r8, r3
 80c163c:	9b01      	ldrge	r3, [sp, #4]
 80c163e:	2300      	movlt	r3, #0
 80c1640:	4645      	movge	r5, r8
 80c1642:	e747      	b.n	80c14d4 <_dtoa_r+0x75c>
 80c1644:	9e06      	ldr	r6, [sp, #24]
 80c1646:	9f08      	ldr	r7, [sp, #32]
 80c1648:	4645      	mov	r5, r8
 80c164a:	e74c      	b.n	80c14e6 <_dtoa_r+0x76e>
 80c164c:	9a06      	ldr	r2, [sp, #24]
 80c164e:	e775      	b.n	80c153c <_dtoa_r+0x7c4>
 80c1650:	9b05      	ldr	r3, [sp, #20]
 80c1652:	2b01      	cmp	r3, #1
 80c1654:	dc18      	bgt.n	80c1688 <_dtoa_r+0x910>
 80c1656:	9b02      	ldr	r3, [sp, #8]
 80c1658:	b9b3      	cbnz	r3, 80c1688 <_dtoa_r+0x910>
 80c165a:	9b03      	ldr	r3, [sp, #12]
 80c165c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80c1660:	b9a3      	cbnz	r3, 80c168c <_dtoa_r+0x914>
 80c1662:	9b03      	ldr	r3, [sp, #12]
 80c1664:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80c1668:	0d1b      	lsrs	r3, r3, #20
 80c166a:	051b      	lsls	r3, r3, #20
 80c166c:	b12b      	cbz	r3, 80c167a <_dtoa_r+0x902>
 80c166e:	9b04      	ldr	r3, [sp, #16]
 80c1670:	3301      	adds	r3, #1
 80c1672:	9304      	str	r3, [sp, #16]
 80c1674:	f108 0801 	add.w	r8, r8, #1
 80c1678:	2301      	movs	r3, #1
 80c167a:	9306      	str	r3, [sp, #24]
 80c167c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80c167e:	2b00      	cmp	r3, #0
 80c1680:	f47f af74 	bne.w	80c156c <_dtoa_r+0x7f4>
 80c1684:	2001      	movs	r0, #1
 80c1686:	e779      	b.n	80c157c <_dtoa_r+0x804>
 80c1688:	2300      	movs	r3, #0
 80c168a:	e7f6      	b.n	80c167a <_dtoa_r+0x902>
 80c168c:	9b02      	ldr	r3, [sp, #8]
 80c168e:	e7f4      	b.n	80c167a <_dtoa_r+0x902>
 80c1690:	d085      	beq.n	80c159e <_dtoa_r+0x826>
 80c1692:	4618      	mov	r0, r3
 80c1694:	301c      	adds	r0, #28
 80c1696:	e77d      	b.n	80c1594 <_dtoa_r+0x81c>
 80c1698:	40240000 	.word	0x40240000
 80c169c:	9b01      	ldr	r3, [sp, #4]
 80c169e:	2b00      	cmp	r3, #0
 80c16a0:	dc38      	bgt.n	80c1714 <_dtoa_r+0x99c>
 80c16a2:	9b05      	ldr	r3, [sp, #20]
 80c16a4:	2b02      	cmp	r3, #2
 80c16a6:	dd35      	ble.n	80c1714 <_dtoa_r+0x99c>
 80c16a8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80c16ac:	f1b9 0f00 	cmp.w	r9, #0
 80c16b0:	d10d      	bne.n	80c16ce <_dtoa_r+0x956>
 80c16b2:	4631      	mov	r1, r6
 80c16b4:	464b      	mov	r3, r9
 80c16b6:	2205      	movs	r2, #5
 80c16b8:	4620      	mov	r0, r4
 80c16ba:	f000 fbe3 	bl	80c1e84 <__multadd>
 80c16be:	4601      	mov	r1, r0
 80c16c0:	4606      	mov	r6, r0
 80c16c2:	4658      	mov	r0, fp
 80c16c4:	f000 fdfa 	bl	80c22bc <__mcmp>
 80c16c8:	2800      	cmp	r0, #0
 80c16ca:	f73f adbd 	bgt.w	80c1248 <_dtoa_r+0x4d0>
 80c16ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80c16d0:	9d00      	ldr	r5, [sp, #0]
 80c16d2:	ea6f 0a03 	mvn.w	sl, r3
 80c16d6:	f04f 0800 	mov.w	r8, #0
 80c16da:	4631      	mov	r1, r6
 80c16dc:	4620      	mov	r0, r4
 80c16de:	f000 fbaf 	bl	80c1e40 <_Bfree>
 80c16e2:	2f00      	cmp	r7, #0
 80c16e4:	f43f aeb4 	beq.w	80c1450 <_dtoa_r+0x6d8>
 80c16e8:	f1b8 0f00 	cmp.w	r8, #0
 80c16ec:	d005      	beq.n	80c16fa <_dtoa_r+0x982>
 80c16ee:	45b8      	cmp	r8, r7
 80c16f0:	d003      	beq.n	80c16fa <_dtoa_r+0x982>
 80c16f2:	4641      	mov	r1, r8
 80c16f4:	4620      	mov	r0, r4
 80c16f6:	f000 fba3 	bl	80c1e40 <_Bfree>
 80c16fa:	4639      	mov	r1, r7
 80c16fc:	4620      	mov	r0, r4
 80c16fe:	f000 fb9f 	bl	80c1e40 <_Bfree>
 80c1702:	e6a5      	b.n	80c1450 <_dtoa_r+0x6d8>
 80c1704:	2600      	movs	r6, #0
 80c1706:	4637      	mov	r7, r6
 80c1708:	e7e1      	b.n	80c16ce <_dtoa_r+0x956>
 80c170a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80c170c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80c1710:	4637      	mov	r7, r6
 80c1712:	e599      	b.n	80c1248 <_dtoa_r+0x4d0>
 80c1714:	9b08      	ldr	r3, [sp, #32]
 80c1716:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80c171a:	2b00      	cmp	r3, #0
 80c171c:	f000 80fd 	beq.w	80c191a <_dtoa_r+0xba2>
 80c1720:	2d00      	cmp	r5, #0
 80c1722:	dd05      	ble.n	80c1730 <_dtoa_r+0x9b8>
 80c1724:	4639      	mov	r1, r7
 80c1726:	462a      	mov	r2, r5
 80c1728:	4620      	mov	r0, r4
 80c172a:	f000 fd5b 	bl	80c21e4 <__lshift>
 80c172e:	4607      	mov	r7, r0
 80c1730:	9b06      	ldr	r3, [sp, #24]
 80c1732:	2b00      	cmp	r3, #0
 80c1734:	d05c      	beq.n	80c17f0 <_dtoa_r+0xa78>
 80c1736:	6879      	ldr	r1, [r7, #4]
 80c1738:	4620      	mov	r0, r4
 80c173a:	f000 fb41 	bl	80c1dc0 <_Balloc>
 80c173e:	4605      	mov	r5, r0
 80c1740:	b928      	cbnz	r0, 80c174e <_dtoa_r+0x9d6>
 80c1742:	4b80      	ldr	r3, [pc, #512]	; (80c1944 <_dtoa_r+0xbcc>)
 80c1744:	4602      	mov	r2, r0
 80c1746:	f240 21ea 	movw	r1, #746	; 0x2ea
 80c174a:	f7ff bb2e 	b.w	80c0daa <_dtoa_r+0x32>
 80c174e:	693a      	ldr	r2, [r7, #16]
 80c1750:	3202      	adds	r2, #2
 80c1752:	0092      	lsls	r2, r2, #2
 80c1754:	f107 010c 	add.w	r1, r7, #12
 80c1758:	300c      	adds	r0, #12
 80c175a:	f7fe fc21 	bl	80bffa0 <memcpy>
 80c175e:	2201      	movs	r2, #1
 80c1760:	4629      	mov	r1, r5
 80c1762:	4620      	mov	r0, r4
 80c1764:	f000 fd3e 	bl	80c21e4 <__lshift>
 80c1768:	9b00      	ldr	r3, [sp, #0]
 80c176a:	3301      	adds	r3, #1
 80c176c:	9301      	str	r3, [sp, #4]
 80c176e:	9b00      	ldr	r3, [sp, #0]
 80c1770:	444b      	add	r3, r9
 80c1772:	9307      	str	r3, [sp, #28]
 80c1774:	9b02      	ldr	r3, [sp, #8]
 80c1776:	f003 0301 	and.w	r3, r3, #1
 80c177a:	46b8      	mov	r8, r7
 80c177c:	9306      	str	r3, [sp, #24]
 80c177e:	4607      	mov	r7, r0
 80c1780:	9b01      	ldr	r3, [sp, #4]
 80c1782:	4631      	mov	r1, r6
 80c1784:	3b01      	subs	r3, #1
 80c1786:	4658      	mov	r0, fp
 80c1788:	9302      	str	r3, [sp, #8]
 80c178a:	f7ff fa67 	bl	80c0c5c <quorem>
 80c178e:	4603      	mov	r3, r0
 80c1790:	3330      	adds	r3, #48	; 0x30
 80c1792:	9004      	str	r0, [sp, #16]
 80c1794:	4641      	mov	r1, r8
 80c1796:	4658      	mov	r0, fp
 80c1798:	9308      	str	r3, [sp, #32]
 80c179a:	f000 fd8f 	bl	80c22bc <__mcmp>
 80c179e:	463a      	mov	r2, r7
 80c17a0:	4681      	mov	r9, r0
 80c17a2:	4631      	mov	r1, r6
 80c17a4:	4620      	mov	r0, r4
 80c17a6:	f000 fda5 	bl	80c22f4 <__mdiff>
 80c17aa:	68c2      	ldr	r2, [r0, #12]
 80c17ac:	9b08      	ldr	r3, [sp, #32]
 80c17ae:	4605      	mov	r5, r0
 80c17b0:	bb02      	cbnz	r2, 80c17f4 <_dtoa_r+0xa7c>
 80c17b2:	4601      	mov	r1, r0
 80c17b4:	4658      	mov	r0, fp
 80c17b6:	f000 fd81 	bl	80c22bc <__mcmp>
 80c17ba:	9b08      	ldr	r3, [sp, #32]
 80c17bc:	4602      	mov	r2, r0
 80c17be:	4629      	mov	r1, r5
 80c17c0:	4620      	mov	r0, r4
 80c17c2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80c17c6:	f000 fb3b 	bl	80c1e40 <_Bfree>
 80c17ca:	9b05      	ldr	r3, [sp, #20]
 80c17cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80c17ce:	9d01      	ldr	r5, [sp, #4]
 80c17d0:	ea43 0102 	orr.w	r1, r3, r2
 80c17d4:	9b06      	ldr	r3, [sp, #24]
 80c17d6:	430b      	orrs	r3, r1
 80c17d8:	9b08      	ldr	r3, [sp, #32]
 80c17da:	d10d      	bne.n	80c17f8 <_dtoa_r+0xa80>
 80c17dc:	2b39      	cmp	r3, #57	; 0x39
 80c17de:	d029      	beq.n	80c1834 <_dtoa_r+0xabc>
 80c17e0:	f1b9 0f00 	cmp.w	r9, #0
 80c17e4:	dd01      	ble.n	80c17ea <_dtoa_r+0xa72>
 80c17e6:	9b04      	ldr	r3, [sp, #16]
 80c17e8:	3331      	adds	r3, #49	; 0x31
 80c17ea:	9a02      	ldr	r2, [sp, #8]
 80c17ec:	7013      	strb	r3, [r2, #0]
 80c17ee:	e774      	b.n	80c16da <_dtoa_r+0x962>
 80c17f0:	4638      	mov	r0, r7
 80c17f2:	e7b9      	b.n	80c1768 <_dtoa_r+0x9f0>
 80c17f4:	2201      	movs	r2, #1
 80c17f6:	e7e2      	b.n	80c17be <_dtoa_r+0xa46>
 80c17f8:	f1b9 0f00 	cmp.w	r9, #0
 80c17fc:	db06      	blt.n	80c180c <_dtoa_r+0xa94>
 80c17fe:	9905      	ldr	r1, [sp, #20]
 80c1800:	ea41 0909 	orr.w	r9, r1, r9
 80c1804:	9906      	ldr	r1, [sp, #24]
 80c1806:	ea59 0101 	orrs.w	r1, r9, r1
 80c180a:	d120      	bne.n	80c184e <_dtoa_r+0xad6>
 80c180c:	2a00      	cmp	r2, #0
 80c180e:	ddec      	ble.n	80c17ea <_dtoa_r+0xa72>
 80c1810:	4659      	mov	r1, fp
 80c1812:	2201      	movs	r2, #1
 80c1814:	4620      	mov	r0, r4
 80c1816:	9301      	str	r3, [sp, #4]
 80c1818:	f000 fce4 	bl	80c21e4 <__lshift>
 80c181c:	4631      	mov	r1, r6
 80c181e:	4683      	mov	fp, r0
 80c1820:	f000 fd4c 	bl	80c22bc <__mcmp>
 80c1824:	2800      	cmp	r0, #0
 80c1826:	9b01      	ldr	r3, [sp, #4]
 80c1828:	dc02      	bgt.n	80c1830 <_dtoa_r+0xab8>
 80c182a:	d1de      	bne.n	80c17ea <_dtoa_r+0xa72>
 80c182c:	07da      	lsls	r2, r3, #31
 80c182e:	d5dc      	bpl.n	80c17ea <_dtoa_r+0xa72>
 80c1830:	2b39      	cmp	r3, #57	; 0x39
 80c1832:	d1d8      	bne.n	80c17e6 <_dtoa_r+0xa6e>
 80c1834:	9a02      	ldr	r2, [sp, #8]
 80c1836:	2339      	movs	r3, #57	; 0x39
 80c1838:	7013      	strb	r3, [r2, #0]
 80c183a:	462b      	mov	r3, r5
 80c183c:	461d      	mov	r5, r3
 80c183e:	3b01      	subs	r3, #1
 80c1840:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80c1844:	2a39      	cmp	r2, #57	; 0x39
 80c1846:	d050      	beq.n	80c18ea <_dtoa_r+0xb72>
 80c1848:	3201      	adds	r2, #1
 80c184a:	701a      	strb	r2, [r3, #0]
 80c184c:	e745      	b.n	80c16da <_dtoa_r+0x962>
 80c184e:	2a00      	cmp	r2, #0
 80c1850:	dd03      	ble.n	80c185a <_dtoa_r+0xae2>
 80c1852:	2b39      	cmp	r3, #57	; 0x39
 80c1854:	d0ee      	beq.n	80c1834 <_dtoa_r+0xabc>
 80c1856:	3301      	adds	r3, #1
 80c1858:	e7c7      	b.n	80c17ea <_dtoa_r+0xa72>
 80c185a:	9a01      	ldr	r2, [sp, #4]
 80c185c:	9907      	ldr	r1, [sp, #28]
 80c185e:	f802 3c01 	strb.w	r3, [r2, #-1]
 80c1862:	428a      	cmp	r2, r1
 80c1864:	d02a      	beq.n	80c18bc <_dtoa_r+0xb44>
 80c1866:	4659      	mov	r1, fp
 80c1868:	2300      	movs	r3, #0
 80c186a:	220a      	movs	r2, #10
 80c186c:	4620      	mov	r0, r4
 80c186e:	f000 fb09 	bl	80c1e84 <__multadd>
 80c1872:	45b8      	cmp	r8, r7
 80c1874:	4683      	mov	fp, r0
 80c1876:	f04f 0300 	mov.w	r3, #0
 80c187a:	f04f 020a 	mov.w	r2, #10
 80c187e:	4641      	mov	r1, r8
 80c1880:	4620      	mov	r0, r4
 80c1882:	d107      	bne.n	80c1894 <_dtoa_r+0xb1c>
 80c1884:	f000 fafe 	bl	80c1e84 <__multadd>
 80c1888:	4680      	mov	r8, r0
 80c188a:	4607      	mov	r7, r0
 80c188c:	9b01      	ldr	r3, [sp, #4]
 80c188e:	3301      	adds	r3, #1
 80c1890:	9301      	str	r3, [sp, #4]
 80c1892:	e775      	b.n	80c1780 <_dtoa_r+0xa08>
 80c1894:	f000 faf6 	bl	80c1e84 <__multadd>
 80c1898:	4639      	mov	r1, r7
 80c189a:	4680      	mov	r8, r0
 80c189c:	2300      	movs	r3, #0
 80c189e:	220a      	movs	r2, #10
 80c18a0:	4620      	mov	r0, r4
 80c18a2:	f000 faef 	bl	80c1e84 <__multadd>
 80c18a6:	4607      	mov	r7, r0
 80c18a8:	e7f0      	b.n	80c188c <_dtoa_r+0xb14>
 80c18aa:	f1b9 0f00 	cmp.w	r9, #0
 80c18ae:	9a00      	ldr	r2, [sp, #0]
 80c18b0:	bfcc      	ite	gt
 80c18b2:	464d      	movgt	r5, r9
 80c18b4:	2501      	movle	r5, #1
 80c18b6:	4415      	add	r5, r2
 80c18b8:	f04f 0800 	mov.w	r8, #0
 80c18bc:	4659      	mov	r1, fp
 80c18be:	2201      	movs	r2, #1
 80c18c0:	4620      	mov	r0, r4
 80c18c2:	9301      	str	r3, [sp, #4]
 80c18c4:	f000 fc8e 	bl	80c21e4 <__lshift>
 80c18c8:	4631      	mov	r1, r6
 80c18ca:	4683      	mov	fp, r0
 80c18cc:	f000 fcf6 	bl	80c22bc <__mcmp>
 80c18d0:	2800      	cmp	r0, #0
 80c18d2:	dcb2      	bgt.n	80c183a <_dtoa_r+0xac2>
 80c18d4:	d102      	bne.n	80c18dc <_dtoa_r+0xb64>
 80c18d6:	9b01      	ldr	r3, [sp, #4]
 80c18d8:	07db      	lsls	r3, r3, #31
 80c18da:	d4ae      	bmi.n	80c183a <_dtoa_r+0xac2>
 80c18dc:	462b      	mov	r3, r5
 80c18de:	461d      	mov	r5, r3
 80c18e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80c18e4:	2a30      	cmp	r2, #48	; 0x30
 80c18e6:	d0fa      	beq.n	80c18de <_dtoa_r+0xb66>
 80c18e8:	e6f7      	b.n	80c16da <_dtoa_r+0x962>
 80c18ea:	9a00      	ldr	r2, [sp, #0]
 80c18ec:	429a      	cmp	r2, r3
 80c18ee:	d1a5      	bne.n	80c183c <_dtoa_r+0xac4>
 80c18f0:	f10a 0a01 	add.w	sl, sl, #1
 80c18f4:	2331      	movs	r3, #49	; 0x31
 80c18f6:	e779      	b.n	80c17ec <_dtoa_r+0xa74>
 80c18f8:	4b13      	ldr	r3, [pc, #76]	; (80c1948 <_dtoa_r+0xbd0>)
 80c18fa:	f7ff baaf 	b.w	80c0e5c <_dtoa_r+0xe4>
 80c18fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80c1900:	2b00      	cmp	r3, #0
 80c1902:	f47f aa86 	bne.w	80c0e12 <_dtoa_r+0x9a>
 80c1906:	4b11      	ldr	r3, [pc, #68]	; (80c194c <_dtoa_r+0xbd4>)
 80c1908:	f7ff baa8 	b.w	80c0e5c <_dtoa_r+0xe4>
 80c190c:	f1b9 0f00 	cmp.w	r9, #0
 80c1910:	dc03      	bgt.n	80c191a <_dtoa_r+0xba2>
 80c1912:	9b05      	ldr	r3, [sp, #20]
 80c1914:	2b02      	cmp	r3, #2
 80c1916:	f73f aec9 	bgt.w	80c16ac <_dtoa_r+0x934>
 80c191a:	9d00      	ldr	r5, [sp, #0]
 80c191c:	4631      	mov	r1, r6
 80c191e:	4658      	mov	r0, fp
 80c1920:	f7ff f99c 	bl	80c0c5c <quorem>
 80c1924:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80c1928:	f805 3b01 	strb.w	r3, [r5], #1
 80c192c:	9a00      	ldr	r2, [sp, #0]
 80c192e:	1aaa      	subs	r2, r5, r2
 80c1930:	4591      	cmp	r9, r2
 80c1932:	ddba      	ble.n	80c18aa <_dtoa_r+0xb32>
 80c1934:	4659      	mov	r1, fp
 80c1936:	2300      	movs	r3, #0
 80c1938:	220a      	movs	r2, #10
 80c193a:	4620      	mov	r0, r4
 80c193c:	f000 faa2 	bl	80c1e84 <__multadd>
 80c1940:	4683      	mov	fp, r0
 80c1942:	e7eb      	b.n	80c191c <_dtoa_r+0xba4>
 80c1944:	080dd36f 	.word	0x080dd36f
 80c1948:	080dd2c8 	.word	0x080dd2c8
 80c194c:	080dd2ec 	.word	0x080dd2ec

080c1950 <__sflush_r>:
 80c1950:	898a      	ldrh	r2, [r1, #12]
 80c1952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80c1956:	4605      	mov	r5, r0
 80c1958:	0710      	lsls	r0, r2, #28
 80c195a:	460c      	mov	r4, r1
 80c195c:	d458      	bmi.n	80c1a10 <__sflush_r+0xc0>
 80c195e:	684b      	ldr	r3, [r1, #4]
 80c1960:	2b00      	cmp	r3, #0
 80c1962:	dc05      	bgt.n	80c1970 <__sflush_r+0x20>
 80c1964:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80c1966:	2b00      	cmp	r3, #0
 80c1968:	dc02      	bgt.n	80c1970 <__sflush_r+0x20>
 80c196a:	2000      	movs	r0, #0
 80c196c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80c1970:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80c1972:	2e00      	cmp	r6, #0
 80c1974:	d0f9      	beq.n	80c196a <__sflush_r+0x1a>
 80c1976:	2300      	movs	r3, #0
 80c1978:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80c197c:	682f      	ldr	r7, [r5, #0]
 80c197e:	602b      	str	r3, [r5, #0]
 80c1980:	d032      	beq.n	80c19e8 <__sflush_r+0x98>
 80c1982:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80c1984:	89a3      	ldrh	r3, [r4, #12]
 80c1986:	075a      	lsls	r2, r3, #29
 80c1988:	d505      	bpl.n	80c1996 <__sflush_r+0x46>
 80c198a:	6863      	ldr	r3, [r4, #4]
 80c198c:	1ac0      	subs	r0, r0, r3
 80c198e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80c1990:	b10b      	cbz	r3, 80c1996 <__sflush_r+0x46>
 80c1992:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80c1994:	1ac0      	subs	r0, r0, r3
 80c1996:	2300      	movs	r3, #0
 80c1998:	4602      	mov	r2, r0
 80c199a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80c199c:	6a21      	ldr	r1, [r4, #32]
 80c199e:	4628      	mov	r0, r5
 80c19a0:	47b0      	blx	r6
 80c19a2:	1c43      	adds	r3, r0, #1
 80c19a4:	89a3      	ldrh	r3, [r4, #12]
 80c19a6:	d106      	bne.n	80c19b6 <__sflush_r+0x66>
 80c19a8:	6829      	ldr	r1, [r5, #0]
 80c19aa:	291d      	cmp	r1, #29
 80c19ac:	d82c      	bhi.n	80c1a08 <__sflush_r+0xb8>
 80c19ae:	4a2a      	ldr	r2, [pc, #168]	; (80c1a58 <__sflush_r+0x108>)
 80c19b0:	40ca      	lsrs	r2, r1
 80c19b2:	07d6      	lsls	r6, r2, #31
 80c19b4:	d528      	bpl.n	80c1a08 <__sflush_r+0xb8>
 80c19b6:	2200      	movs	r2, #0
 80c19b8:	6062      	str	r2, [r4, #4]
 80c19ba:	04d9      	lsls	r1, r3, #19
 80c19bc:	6922      	ldr	r2, [r4, #16]
 80c19be:	6022      	str	r2, [r4, #0]
 80c19c0:	d504      	bpl.n	80c19cc <__sflush_r+0x7c>
 80c19c2:	1c42      	adds	r2, r0, #1
 80c19c4:	d101      	bne.n	80c19ca <__sflush_r+0x7a>
 80c19c6:	682b      	ldr	r3, [r5, #0]
 80c19c8:	b903      	cbnz	r3, 80c19cc <__sflush_r+0x7c>
 80c19ca:	6560      	str	r0, [r4, #84]	; 0x54
 80c19cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80c19ce:	602f      	str	r7, [r5, #0]
 80c19d0:	2900      	cmp	r1, #0
 80c19d2:	d0ca      	beq.n	80c196a <__sflush_r+0x1a>
 80c19d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80c19d8:	4299      	cmp	r1, r3
 80c19da:	d002      	beq.n	80c19e2 <__sflush_r+0x92>
 80c19dc:	4628      	mov	r0, r5
 80c19de:	f000 fd6d 	bl	80c24bc <_free_r>
 80c19e2:	2000      	movs	r0, #0
 80c19e4:	6360      	str	r0, [r4, #52]	; 0x34
 80c19e6:	e7c1      	b.n	80c196c <__sflush_r+0x1c>
 80c19e8:	6a21      	ldr	r1, [r4, #32]
 80c19ea:	2301      	movs	r3, #1
 80c19ec:	4628      	mov	r0, r5
 80c19ee:	47b0      	blx	r6
 80c19f0:	1c41      	adds	r1, r0, #1
 80c19f2:	d1c7      	bne.n	80c1984 <__sflush_r+0x34>
 80c19f4:	682b      	ldr	r3, [r5, #0]
 80c19f6:	2b00      	cmp	r3, #0
 80c19f8:	d0c4      	beq.n	80c1984 <__sflush_r+0x34>
 80c19fa:	2b1d      	cmp	r3, #29
 80c19fc:	d001      	beq.n	80c1a02 <__sflush_r+0xb2>
 80c19fe:	2b16      	cmp	r3, #22
 80c1a00:	d101      	bne.n	80c1a06 <__sflush_r+0xb6>
 80c1a02:	602f      	str	r7, [r5, #0]
 80c1a04:	e7b1      	b.n	80c196a <__sflush_r+0x1a>
 80c1a06:	89a3      	ldrh	r3, [r4, #12]
 80c1a08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80c1a0c:	81a3      	strh	r3, [r4, #12]
 80c1a0e:	e7ad      	b.n	80c196c <__sflush_r+0x1c>
 80c1a10:	690f      	ldr	r7, [r1, #16]
 80c1a12:	2f00      	cmp	r7, #0
 80c1a14:	d0a9      	beq.n	80c196a <__sflush_r+0x1a>
 80c1a16:	0793      	lsls	r3, r2, #30
 80c1a18:	680e      	ldr	r6, [r1, #0]
 80c1a1a:	bf08      	it	eq
 80c1a1c:	694b      	ldreq	r3, [r1, #20]
 80c1a1e:	600f      	str	r7, [r1, #0]
 80c1a20:	bf18      	it	ne
 80c1a22:	2300      	movne	r3, #0
 80c1a24:	eba6 0807 	sub.w	r8, r6, r7
 80c1a28:	608b      	str	r3, [r1, #8]
 80c1a2a:	f1b8 0f00 	cmp.w	r8, #0
 80c1a2e:	dd9c      	ble.n	80c196a <__sflush_r+0x1a>
 80c1a30:	6a21      	ldr	r1, [r4, #32]
 80c1a32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80c1a34:	4643      	mov	r3, r8
 80c1a36:	463a      	mov	r2, r7
 80c1a38:	4628      	mov	r0, r5
 80c1a3a:	47b0      	blx	r6
 80c1a3c:	2800      	cmp	r0, #0
 80c1a3e:	dc06      	bgt.n	80c1a4e <__sflush_r+0xfe>
 80c1a40:	89a3      	ldrh	r3, [r4, #12]
 80c1a42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80c1a46:	81a3      	strh	r3, [r4, #12]
 80c1a48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80c1a4c:	e78e      	b.n	80c196c <__sflush_r+0x1c>
 80c1a4e:	4407      	add	r7, r0
 80c1a50:	eba8 0800 	sub.w	r8, r8, r0
 80c1a54:	e7e9      	b.n	80c1a2a <__sflush_r+0xda>
 80c1a56:	bf00      	nop
 80c1a58:	20400001 	.word	0x20400001

080c1a5c <_fflush_r>:
 80c1a5c:	b538      	push	{r3, r4, r5, lr}
 80c1a5e:	690b      	ldr	r3, [r1, #16]
 80c1a60:	4605      	mov	r5, r0
 80c1a62:	460c      	mov	r4, r1
 80c1a64:	b913      	cbnz	r3, 80c1a6c <_fflush_r+0x10>
 80c1a66:	2500      	movs	r5, #0
 80c1a68:	4628      	mov	r0, r5
 80c1a6a:	bd38      	pop	{r3, r4, r5, pc}
 80c1a6c:	b118      	cbz	r0, 80c1a76 <_fflush_r+0x1a>
 80c1a6e:	6983      	ldr	r3, [r0, #24]
 80c1a70:	b90b      	cbnz	r3, 80c1a76 <_fflush_r+0x1a>
 80c1a72:	f000 f887 	bl	80c1b84 <__sinit>
 80c1a76:	4b14      	ldr	r3, [pc, #80]	; (80c1ac8 <_fflush_r+0x6c>)
 80c1a78:	429c      	cmp	r4, r3
 80c1a7a:	d11b      	bne.n	80c1ab4 <_fflush_r+0x58>
 80c1a7c:	686c      	ldr	r4, [r5, #4]
 80c1a7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80c1a82:	2b00      	cmp	r3, #0
 80c1a84:	d0ef      	beq.n	80c1a66 <_fflush_r+0xa>
 80c1a86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80c1a88:	07d0      	lsls	r0, r2, #31
 80c1a8a:	d404      	bmi.n	80c1a96 <_fflush_r+0x3a>
 80c1a8c:	0599      	lsls	r1, r3, #22
 80c1a8e:	d402      	bmi.n	80c1a96 <_fflush_r+0x3a>
 80c1a90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80c1a92:	f000 f91a 	bl	80c1cca <__retarget_lock_acquire_recursive>
 80c1a96:	4628      	mov	r0, r5
 80c1a98:	4621      	mov	r1, r4
 80c1a9a:	f7ff ff59 	bl	80c1950 <__sflush_r>
 80c1a9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80c1aa0:	07da      	lsls	r2, r3, #31
 80c1aa2:	4605      	mov	r5, r0
 80c1aa4:	d4e0      	bmi.n	80c1a68 <_fflush_r+0xc>
 80c1aa6:	89a3      	ldrh	r3, [r4, #12]
 80c1aa8:	059b      	lsls	r3, r3, #22
 80c1aaa:	d4dd      	bmi.n	80c1a68 <_fflush_r+0xc>
 80c1aac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80c1aae:	f000 f90d 	bl	80c1ccc <__retarget_lock_release_recursive>
 80c1ab2:	e7d9      	b.n	80c1a68 <_fflush_r+0xc>
 80c1ab4:	4b05      	ldr	r3, [pc, #20]	; (80c1acc <_fflush_r+0x70>)
 80c1ab6:	429c      	cmp	r4, r3
 80c1ab8:	d101      	bne.n	80c1abe <_fflush_r+0x62>
 80c1aba:	68ac      	ldr	r4, [r5, #8]
 80c1abc:	e7df      	b.n	80c1a7e <_fflush_r+0x22>
 80c1abe:	4b04      	ldr	r3, [pc, #16]	; (80c1ad0 <_fflush_r+0x74>)
 80c1ac0:	429c      	cmp	r4, r3
 80c1ac2:	bf08      	it	eq
 80c1ac4:	68ec      	ldreq	r4, [r5, #12]
 80c1ac6:	e7da      	b.n	80c1a7e <_fflush_r+0x22>
 80c1ac8:	080dd3a0 	.word	0x080dd3a0
 80c1acc:	080dd3c0 	.word	0x080dd3c0
 80c1ad0:	080dd380 	.word	0x080dd380

080c1ad4 <std>:
 80c1ad4:	2300      	movs	r3, #0
 80c1ad6:	b510      	push	{r4, lr}
 80c1ad8:	4604      	mov	r4, r0
 80c1ada:	e9c0 3300 	strd	r3, r3, [r0]
 80c1ade:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80c1ae2:	6083      	str	r3, [r0, #8]
 80c1ae4:	8181      	strh	r1, [r0, #12]
 80c1ae6:	6643      	str	r3, [r0, #100]	; 0x64
 80c1ae8:	81c2      	strh	r2, [r0, #14]
 80c1aea:	6183      	str	r3, [r0, #24]
 80c1aec:	4619      	mov	r1, r3
 80c1aee:	2208      	movs	r2, #8
 80c1af0:	305c      	adds	r0, #92	; 0x5c
 80c1af2:	f7fe fa63 	bl	80bffbc <memset>
 80c1af6:	4b05      	ldr	r3, [pc, #20]	; (80c1b0c <std+0x38>)
 80c1af8:	6263      	str	r3, [r4, #36]	; 0x24
 80c1afa:	4b05      	ldr	r3, [pc, #20]	; (80c1b10 <std+0x3c>)
 80c1afc:	62a3      	str	r3, [r4, #40]	; 0x28
 80c1afe:	4b05      	ldr	r3, [pc, #20]	; (80c1b14 <std+0x40>)
 80c1b00:	62e3      	str	r3, [r4, #44]	; 0x2c
 80c1b02:	4b05      	ldr	r3, [pc, #20]	; (80c1b18 <std+0x44>)
 80c1b04:	6224      	str	r4, [r4, #32]
 80c1b06:	6323      	str	r3, [r4, #48]	; 0x30
 80c1b08:	bd10      	pop	{r4, pc}
 80c1b0a:	bf00      	nop
 80c1b0c:	080c28a1 	.word	0x080c28a1
 80c1b10:	080c28c3 	.word	0x080c28c3
 80c1b14:	080c28fb 	.word	0x080c28fb
 80c1b18:	080c291f 	.word	0x080c291f

080c1b1c <_cleanup_r>:
 80c1b1c:	4901      	ldr	r1, [pc, #4]	; (80c1b24 <_cleanup_r+0x8>)
 80c1b1e:	f000 b8af 	b.w	80c1c80 <_fwalk_reent>
 80c1b22:	bf00      	nop
 80c1b24:	080c1a5d 	.word	0x080c1a5d

080c1b28 <__sfmoreglue>:
 80c1b28:	b570      	push	{r4, r5, r6, lr}
 80c1b2a:	1e4a      	subs	r2, r1, #1
 80c1b2c:	2568      	movs	r5, #104	; 0x68
 80c1b2e:	4355      	muls	r5, r2
 80c1b30:	460e      	mov	r6, r1
 80c1b32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80c1b36:	f7fe fa59 	bl	80bffec <_malloc_r>
 80c1b3a:	4604      	mov	r4, r0
 80c1b3c:	b140      	cbz	r0, 80c1b50 <__sfmoreglue+0x28>
 80c1b3e:	2100      	movs	r1, #0
 80c1b40:	e9c0 1600 	strd	r1, r6, [r0]
 80c1b44:	300c      	adds	r0, #12
 80c1b46:	60a0      	str	r0, [r4, #8]
 80c1b48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80c1b4c:	f7fe fa36 	bl	80bffbc <memset>
 80c1b50:	4620      	mov	r0, r4
 80c1b52:	bd70      	pop	{r4, r5, r6, pc}

080c1b54 <__sfp_lock_acquire>:
 80c1b54:	4801      	ldr	r0, [pc, #4]	; (80c1b5c <__sfp_lock_acquire+0x8>)
 80c1b56:	f000 b8b8 	b.w	80c1cca <__retarget_lock_acquire_recursive>
 80c1b5a:	bf00      	nop
 80c1b5c:	2001c38c 	.word	0x2001c38c

080c1b60 <__sfp_lock_release>:
 80c1b60:	4801      	ldr	r0, [pc, #4]	; (80c1b68 <__sfp_lock_release+0x8>)
 80c1b62:	f000 b8b3 	b.w	80c1ccc <__retarget_lock_release_recursive>
 80c1b66:	bf00      	nop
 80c1b68:	2001c38c 	.word	0x2001c38c

080c1b6c <__sinit_lock_acquire>:
 80c1b6c:	4801      	ldr	r0, [pc, #4]	; (80c1b74 <__sinit_lock_acquire+0x8>)
 80c1b6e:	f000 b8ac 	b.w	80c1cca <__retarget_lock_acquire_recursive>
 80c1b72:	bf00      	nop
 80c1b74:	2001c387 	.word	0x2001c387

080c1b78 <__sinit_lock_release>:
 80c1b78:	4801      	ldr	r0, [pc, #4]	; (80c1b80 <__sinit_lock_release+0x8>)
 80c1b7a:	f000 b8a7 	b.w	80c1ccc <__retarget_lock_release_recursive>
 80c1b7e:	bf00      	nop
 80c1b80:	2001c387 	.word	0x2001c387

080c1b84 <__sinit>:
 80c1b84:	b510      	push	{r4, lr}
 80c1b86:	4604      	mov	r4, r0
 80c1b88:	f7ff fff0 	bl	80c1b6c <__sinit_lock_acquire>
 80c1b8c:	69a3      	ldr	r3, [r4, #24]
 80c1b8e:	b11b      	cbz	r3, 80c1b98 <__sinit+0x14>
 80c1b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80c1b94:	f7ff bff0 	b.w	80c1b78 <__sinit_lock_release>
 80c1b98:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80c1b9c:	6523      	str	r3, [r4, #80]	; 0x50
 80c1b9e:	4b13      	ldr	r3, [pc, #76]	; (80c1bec <__sinit+0x68>)
 80c1ba0:	4a13      	ldr	r2, [pc, #76]	; (80c1bf0 <__sinit+0x6c>)
 80c1ba2:	681b      	ldr	r3, [r3, #0]
 80c1ba4:	62a2      	str	r2, [r4, #40]	; 0x28
 80c1ba6:	42a3      	cmp	r3, r4
 80c1ba8:	bf04      	itt	eq
 80c1baa:	2301      	moveq	r3, #1
 80c1bac:	61a3      	streq	r3, [r4, #24]
 80c1bae:	4620      	mov	r0, r4
 80c1bb0:	f000 f820 	bl	80c1bf4 <__sfp>
 80c1bb4:	6060      	str	r0, [r4, #4]
 80c1bb6:	4620      	mov	r0, r4
 80c1bb8:	f000 f81c 	bl	80c1bf4 <__sfp>
 80c1bbc:	60a0      	str	r0, [r4, #8]
 80c1bbe:	4620      	mov	r0, r4
 80c1bc0:	f000 f818 	bl	80c1bf4 <__sfp>
 80c1bc4:	2200      	movs	r2, #0
 80c1bc6:	60e0      	str	r0, [r4, #12]
 80c1bc8:	2104      	movs	r1, #4
 80c1bca:	6860      	ldr	r0, [r4, #4]
 80c1bcc:	f7ff ff82 	bl	80c1ad4 <std>
 80c1bd0:	68a0      	ldr	r0, [r4, #8]
 80c1bd2:	2201      	movs	r2, #1
 80c1bd4:	2109      	movs	r1, #9
 80c1bd6:	f7ff ff7d 	bl	80c1ad4 <std>
 80c1bda:	68e0      	ldr	r0, [r4, #12]
 80c1bdc:	2202      	movs	r2, #2
 80c1bde:	2112      	movs	r1, #18
 80c1be0:	f7ff ff78 	bl	80c1ad4 <std>
 80c1be4:	2301      	movs	r3, #1
 80c1be6:	61a3      	str	r3, [r4, #24]
 80c1be8:	e7d2      	b.n	80c1b90 <__sinit+0xc>
 80c1bea:	bf00      	nop
 80c1bec:	080dd2b4 	.word	0x080dd2b4
 80c1bf0:	080c1b1d 	.word	0x080c1b1d

080c1bf4 <__sfp>:
 80c1bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80c1bf6:	4607      	mov	r7, r0
 80c1bf8:	f7ff ffac 	bl	80c1b54 <__sfp_lock_acquire>
 80c1bfc:	4b1e      	ldr	r3, [pc, #120]	; (80c1c78 <__sfp+0x84>)
 80c1bfe:	681e      	ldr	r6, [r3, #0]
 80c1c00:	69b3      	ldr	r3, [r6, #24]
 80c1c02:	b913      	cbnz	r3, 80c1c0a <__sfp+0x16>
 80c1c04:	4630      	mov	r0, r6
 80c1c06:	f7ff ffbd 	bl	80c1b84 <__sinit>
 80c1c0a:	3648      	adds	r6, #72	; 0x48
 80c1c0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80c1c10:	3b01      	subs	r3, #1
 80c1c12:	d503      	bpl.n	80c1c1c <__sfp+0x28>
 80c1c14:	6833      	ldr	r3, [r6, #0]
 80c1c16:	b30b      	cbz	r3, 80c1c5c <__sfp+0x68>
 80c1c18:	6836      	ldr	r6, [r6, #0]
 80c1c1a:	e7f7      	b.n	80c1c0c <__sfp+0x18>
 80c1c1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80c1c20:	b9d5      	cbnz	r5, 80c1c58 <__sfp+0x64>
 80c1c22:	4b16      	ldr	r3, [pc, #88]	; (80c1c7c <__sfp+0x88>)
 80c1c24:	60e3      	str	r3, [r4, #12]
 80c1c26:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80c1c2a:	6665      	str	r5, [r4, #100]	; 0x64
 80c1c2c:	f000 f84c 	bl	80c1cc8 <__retarget_lock_init_recursive>
 80c1c30:	f7ff ff96 	bl	80c1b60 <__sfp_lock_release>
 80c1c34:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80c1c38:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80c1c3c:	6025      	str	r5, [r4, #0]
 80c1c3e:	61a5      	str	r5, [r4, #24]
 80c1c40:	2208      	movs	r2, #8
 80c1c42:	4629      	mov	r1, r5
 80c1c44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80c1c48:	f7fe f9b8 	bl	80bffbc <memset>
 80c1c4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80c1c50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80c1c54:	4620      	mov	r0, r4
 80c1c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80c1c58:	3468      	adds	r4, #104	; 0x68
 80c1c5a:	e7d9      	b.n	80c1c10 <__sfp+0x1c>
 80c1c5c:	2104      	movs	r1, #4
 80c1c5e:	4638      	mov	r0, r7
 80c1c60:	f7ff ff62 	bl	80c1b28 <__sfmoreglue>
 80c1c64:	4604      	mov	r4, r0
 80c1c66:	6030      	str	r0, [r6, #0]
 80c1c68:	2800      	cmp	r0, #0
 80c1c6a:	d1d5      	bne.n	80c1c18 <__sfp+0x24>
 80c1c6c:	f7ff ff78 	bl	80c1b60 <__sfp_lock_release>
 80c1c70:	230c      	movs	r3, #12
 80c1c72:	603b      	str	r3, [r7, #0]
 80c1c74:	e7ee      	b.n	80c1c54 <__sfp+0x60>
 80c1c76:	bf00      	nop
 80c1c78:	080dd2b4 	.word	0x080dd2b4
 80c1c7c:	ffff0001 	.word	0xffff0001

080c1c80 <_fwalk_reent>:
 80c1c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80c1c84:	4606      	mov	r6, r0
 80c1c86:	4688      	mov	r8, r1
 80c1c88:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80c1c8c:	2700      	movs	r7, #0
 80c1c8e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80c1c92:	f1b9 0901 	subs.w	r9, r9, #1
 80c1c96:	d505      	bpl.n	80c1ca4 <_fwalk_reent+0x24>
 80c1c98:	6824      	ldr	r4, [r4, #0]
 80c1c9a:	2c00      	cmp	r4, #0
 80c1c9c:	d1f7      	bne.n	80c1c8e <_fwalk_reent+0xe>
 80c1c9e:	4638      	mov	r0, r7
 80c1ca0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80c1ca4:	89ab      	ldrh	r3, [r5, #12]
 80c1ca6:	2b01      	cmp	r3, #1
 80c1ca8:	d907      	bls.n	80c1cba <_fwalk_reent+0x3a>
 80c1caa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80c1cae:	3301      	adds	r3, #1
 80c1cb0:	d003      	beq.n	80c1cba <_fwalk_reent+0x3a>
 80c1cb2:	4629      	mov	r1, r5
 80c1cb4:	4630      	mov	r0, r6
 80c1cb6:	47c0      	blx	r8
 80c1cb8:	4307      	orrs	r7, r0
 80c1cba:	3568      	adds	r5, #104	; 0x68
 80c1cbc:	e7e9      	b.n	80c1c92 <_fwalk_reent+0x12>
	...

080c1cc0 <_localeconv_r>:
 80c1cc0:	4800      	ldr	r0, [pc, #0]	; (80c1cc4 <_localeconv_r+0x4>)
 80c1cc2:	4770      	bx	lr
 80c1cc4:	20007e14 	.word	0x20007e14

080c1cc8 <__retarget_lock_init_recursive>:
 80c1cc8:	4770      	bx	lr

080c1cca <__retarget_lock_acquire_recursive>:
 80c1cca:	4770      	bx	lr

080c1ccc <__retarget_lock_release_recursive>:
 80c1ccc:	4770      	bx	lr

080c1cce <__swhatbuf_r>:
 80c1cce:	b570      	push	{r4, r5, r6, lr}
 80c1cd0:	460e      	mov	r6, r1
 80c1cd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80c1cd6:	2900      	cmp	r1, #0
 80c1cd8:	b096      	sub	sp, #88	; 0x58
 80c1cda:	4614      	mov	r4, r2
 80c1cdc:	461d      	mov	r5, r3
 80c1cde:	da07      	bge.n	80c1cf0 <__swhatbuf_r+0x22>
 80c1ce0:	2300      	movs	r3, #0
 80c1ce2:	602b      	str	r3, [r5, #0]
 80c1ce4:	89b3      	ldrh	r3, [r6, #12]
 80c1ce6:	061a      	lsls	r2, r3, #24
 80c1ce8:	d410      	bmi.n	80c1d0c <__swhatbuf_r+0x3e>
 80c1cea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80c1cee:	e00e      	b.n	80c1d0e <__swhatbuf_r+0x40>
 80c1cf0:	466a      	mov	r2, sp
 80c1cf2:	f000 fe6b 	bl	80c29cc <_fstat_r>
 80c1cf6:	2800      	cmp	r0, #0
 80c1cf8:	dbf2      	blt.n	80c1ce0 <__swhatbuf_r+0x12>
 80c1cfa:	9a01      	ldr	r2, [sp, #4]
 80c1cfc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80c1d00:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80c1d04:	425a      	negs	r2, r3
 80c1d06:	415a      	adcs	r2, r3
 80c1d08:	602a      	str	r2, [r5, #0]
 80c1d0a:	e7ee      	b.n	80c1cea <__swhatbuf_r+0x1c>
 80c1d0c:	2340      	movs	r3, #64	; 0x40
 80c1d0e:	2000      	movs	r0, #0
 80c1d10:	6023      	str	r3, [r4, #0]
 80c1d12:	b016      	add	sp, #88	; 0x58
 80c1d14:	bd70      	pop	{r4, r5, r6, pc}
	...

080c1d18 <__smakebuf_r>:
 80c1d18:	898b      	ldrh	r3, [r1, #12]
 80c1d1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80c1d1c:	079d      	lsls	r5, r3, #30
 80c1d1e:	4606      	mov	r6, r0
 80c1d20:	460c      	mov	r4, r1
 80c1d22:	d507      	bpl.n	80c1d34 <__smakebuf_r+0x1c>
 80c1d24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80c1d28:	6023      	str	r3, [r4, #0]
 80c1d2a:	6123      	str	r3, [r4, #16]
 80c1d2c:	2301      	movs	r3, #1
 80c1d2e:	6163      	str	r3, [r4, #20]
 80c1d30:	b002      	add	sp, #8
 80c1d32:	bd70      	pop	{r4, r5, r6, pc}
 80c1d34:	ab01      	add	r3, sp, #4
 80c1d36:	466a      	mov	r2, sp
 80c1d38:	f7ff ffc9 	bl	80c1cce <__swhatbuf_r>
 80c1d3c:	9900      	ldr	r1, [sp, #0]
 80c1d3e:	4605      	mov	r5, r0
 80c1d40:	4630      	mov	r0, r6
 80c1d42:	f7fe f953 	bl	80bffec <_malloc_r>
 80c1d46:	b948      	cbnz	r0, 80c1d5c <__smakebuf_r+0x44>
 80c1d48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80c1d4c:	059a      	lsls	r2, r3, #22
 80c1d4e:	d4ef      	bmi.n	80c1d30 <__smakebuf_r+0x18>
 80c1d50:	f023 0303 	bic.w	r3, r3, #3
 80c1d54:	f043 0302 	orr.w	r3, r3, #2
 80c1d58:	81a3      	strh	r3, [r4, #12]
 80c1d5a:	e7e3      	b.n	80c1d24 <__smakebuf_r+0xc>
 80c1d5c:	4b0d      	ldr	r3, [pc, #52]	; (80c1d94 <__smakebuf_r+0x7c>)
 80c1d5e:	62b3      	str	r3, [r6, #40]	; 0x28
 80c1d60:	89a3      	ldrh	r3, [r4, #12]
 80c1d62:	6020      	str	r0, [r4, #0]
 80c1d64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80c1d68:	81a3      	strh	r3, [r4, #12]
 80c1d6a:	9b00      	ldr	r3, [sp, #0]
 80c1d6c:	6163      	str	r3, [r4, #20]
 80c1d6e:	9b01      	ldr	r3, [sp, #4]
 80c1d70:	6120      	str	r0, [r4, #16]
 80c1d72:	b15b      	cbz	r3, 80c1d8c <__smakebuf_r+0x74>
 80c1d74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80c1d78:	4630      	mov	r0, r6
 80c1d7a:	f000 fe39 	bl	80c29f0 <_isatty_r>
 80c1d7e:	b128      	cbz	r0, 80c1d8c <__smakebuf_r+0x74>
 80c1d80:	89a3      	ldrh	r3, [r4, #12]
 80c1d82:	f023 0303 	bic.w	r3, r3, #3
 80c1d86:	f043 0301 	orr.w	r3, r3, #1
 80c1d8a:	81a3      	strh	r3, [r4, #12]
 80c1d8c:	89a0      	ldrh	r0, [r4, #12]
 80c1d8e:	4305      	orrs	r5, r0
 80c1d90:	81a5      	strh	r5, [r4, #12]
 80c1d92:	e7cd      	b.n	80c1d30 <__smakebuf_r+0x18>
 80c1d94:	080c1b1d 	.word	0x080c1b1d

080c1d98 <malloc>:
 80c1d98:	4b02      	ldr	r3, [pc, #8]	; (80c1da4 <malloc+0xc>)
 80c1d9a:	4601      	mov	r1, r0
 80c1d9c:	6818      	ldr	r0, [r3, #0]
 80c1d9e:	f7fe b925 	b.w	80bffec <_malloc_r>
 80c1da2:	bf00      	nop
 80c1da4:	20007cc0 	.word	0x20007cc0

080c1da8 <__malloc_lock>:
 80c1da8:	4801      	ldr	r0, [pc, #4]	; (80c1db0 <__malloc_lock+0x8>)
 80c1daa:	f7ff bf8e 	b.w	80c1cca <__retarget_lock_acquire_recursive>
 80c1dae:	bf00      	nop
 80c1db0:	2001c388 	.word	0x2001c388

080c1db4 <__malloc_unlock>:
 80c1db4:	4801      	ldr	r0, [pc, #4]	; (80c1dbc <__malloc_unlock+0x8>)
 80c1db6:	f7ff bf89 	b.w	80c1ccc <__retarget_lock_release_recursive>
 80c1dba:	bf00      	nop
 80c1dbc:	2001c388 	.word	0x2001c388

080c1dc0 <_Balloc>:
 80c1dc0:	b570      	push	{r4, r5, r6, lr}
 80c1dc2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80c1dc4:	4604      	mov	r4, r0
 80c1dc6:	460d      	mov	r5, r1
 80c1dc8:	b976      	cbnz	r6, 80c1de8 <_Balloc+0x28>
 80c1dca:	2010      	movs	r0, #16
 80c1dcc:	f7ff ffe4 	bl	80c1d98 <malloc>
 80c1dd0:	4602      	mov	r2, r0
 80c1dd2:	6260      	str	r0, [r4, #36]	; 0x24
 80c1dd4:	b920      	cbnz	r0, 80c1de0 <_Balloc+0x20>
 80c1dd6:	4b18      	ldr	r3, [pc, #96]	; (80c1e38 <_Balloc+0x78>)
 80c1dd8:	4818      	ldr	r0, [pc, #96]	; (80c1e3c <_Balloc+0x7c>)
 80c1dda:	2166      	movs	r1, #102	; 0x66
 80c1ddc:	f000 fdb6 	bl	80c294c <__assert_func>
 80c1de0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80c1de4:	6006      	str	r6, [r0, #0]
 80c1de6:	60c6      	str	r6, [r0, #12]
 80c1de8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80c1dea:	68f3      	ldr	r3, [r6, #12]
 80c1dec:	b183      	cbz	r3, 80c1e10 <_Balloc+0x50>
 80c1dee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80c1df0:	68db      	ldr	r3, [r3, #12]
 80c1df2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80c1df6:	b9b8      	cbnz	r0, 80c1e28 <_Balloc+0x68>
 80c1df8:	2101      	movs	r1, #1
 80c1dfa:	fa01 f605 	lsl.w	r6, r1, r5
 80c1dfe:	1d72      	adds	r2, r6, #5
 80c1e00:	0092      	lsls	r2, r2, #2
 80c1e02:	4620      	mov	r0, r4
 80c1e04:	f7fe f8e2 	bl	80bffcc <_calloc_r>
 80c1e08:	b160      	cbz	r0, 80c1e24 <_Balloc+0x64>
 80c1e0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80c1e0e:	e00e      	b.n	80c1e2e <_Balloc+0x6e>
 80c1e10:	2221      	movs	r2, #33	; 0x21
 80c1e12:	2104      	movs	r1, #4
 80c1e14:	4620      	mov	r0, r4
 80c1e16:	f7fe f8d9 	bl	80bffcc <_calloc_r>
 80c1e1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80c1e1c:	60f0      	str	r0, [r6, #12]
 80c1e1e:	68db      	ldr	r3, [r3, #12]
 80c1e20:	2b00      	cmp	r3, #0
 80c1e22:	d1e4      	bne.n	80c1dee <_Balloc+0x2e>
 80c1e24:	2000      	movs	r0, #0
 80c1e26:	bd70      	pop	{r4, r5, r6, pc}
 80c1e28:	6802      	ldr	r2, [r0, #0]
 80c1e2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80c1e2e:	2300      	movs	r3, #0
 80c1e30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80c1e34:	e7f7      	b.n	80c1e26 <_Balloc+0x66>
 80c1e36:	bf00      	nop
 80c1e38:	080dd2f9 	.word	0x080dd2f9
 80c1e3c:	080dd3e0 	.word	0x080dd3e0

080c1e40 <_Bfree>:
 80c1e40:	b570      	push	{r4, r5, r6, lr}
 80c1e42:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80c1e44:	4605      	mov	r5, r0
 80c1e46:	460c      	mov	r4, r1
 80c1e48:	b976      	cbnz	r6, 80c1e68 <_Bfree+0x28>
 80c1e4a:	2010      	movs	r0, #16
 80c1e4c:	f7ff ffa4 	bl	80c1d98 <malloc>
 80c1e50:	4602      	mov	r2, r0
 80c1e52:	6268      	str	r0, [r5, #36]	; 0x24
 80c1e54:	b920      	cbnz	r0, 80c1e60 <_Bfree+0x20>
 80c1e56:	4b09      	ldr	r3, [pc, #36]	; (80c1e7c <_Bfree+0x3c>)
 80c1e58:	4809      	ldr	r0, [pc, #36]	; (80c1e80 <_Bfree+0x40>)
 80c1e5a:	218a      	movs	r1, #138	; 0x8a
 80c1e5c:	f000 fd76 	bl	80c294c <__assert_func>
 80c1e60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80c1e64:	6006      	str	r6, [r0, #0]
 80c1e66:	60c6      	str	r6, [r0, #12]
 80c1e68:	b13c      	cbz	r4, 80c1e7a <_Bfree+0x3a>
 80c1e6a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80c1e6c:	6862      	ldr	r2, [r4, #4]
 80c1e6e:	68db      	ldr	r3, [r3, #12]
 80c1e70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80c1e74:	6021      	str	r1, [r4, #0]
 80c1e76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80c1e7a:	bd70      	pop	{r4, r5, r6, pc}
 80c1e7c:	080dd2f9 	.word	0x080dd2f9
 80c1e80:	080dd3e0 	.word	0x080dd3e0

080c1e84 <__multadd>:
 80c1e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80c1e88:	690e      	ldr	r6, [r1, #16]
 80c1e8a:	4607      	mov	r7, r0
 80c1e8c:	4698      	mov	r8, r3
 80c1e8e:	460c      	mov	r4, r1
 80c1e90:	f101 0014 	add.w	r0, r1, #20
 80c1e94:	2300      	movs	r3, #0
 80c1e96:	6805      	ldr	r5, [r0, #0]
 80c1e98:	b2a9      	uxth	r1, r5
 80c1e9a:	fb02 8101 	mla	r1, r2, r1, r8
 80c1e9e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80c1ea2:	0c2d      	lsrs	r5, r5, #16
 80c1ea4:	fb02 c505 	mla	r5, r2, r5, ip
 80c1ea8:	b289      	uxth	r1, r1
 80c1eaa:	3301      	adds	r3, #1
 80c1eac:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80c1eb0:	429e      	cmp	r6, r3
 80c1eb2:	f840 1b04 	str.w	r1, [r0], #4
 80c1eb6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80c1eba:	dcec      	bgt.n	80c1e96 <__multadd+0x12>
 80c1ebc:	f1b8 0f00 	cmp.w	r8, #0
 80c1ec0:	d022      	beq.n	80c1f08 <__multadd+0x84>
 80c1ec2:	68a3      	ldr	r3, [r4, #8]
 80c1ec4:	42b3      	cmp	r3, r6
 80c1ec6:	dc19      	bgt.n	80c1efc <__multadd+0x78>
 80c1ec8:	6861      	ldr	r1, [r4, #4]
 80c1eca:	4638      	mov	r0, r7
 80c1ecc:	3101      	adds	r1, #1
 80c1ece:	f7ff ff77 	bl	80c1dc0 <_Balloc>
 80c1ed2:	4605      	mov	r5, r0
 80c1ed4:	b928      	cbnz	r0, 80c1ee2 <__multadd+0x5e>
 80c1ed6:	4602      	mov	r2, r0
 80c1ed8:	4b0d      	ldr	r3, [pc, #52]	; (80c1f10 <__multadd+0x8c>)
 80c1eda:	480e      	ldr	r0, [pc, #56]	; (80c1f14 <__multadd+0x90>)
 80c1edc:	21b5      	movs	r1, #181	; 0xb5
 80c1ede:	f000 fd35 	bl	80c294c <__assert_func>
 80c1ee2:	6922      	ldr	r2, [r4, #16]
 80c1ee4:	3202      	adds	r2, #2
 80c1ee6:	f104 010c 	add.w	r1, r4, #12
 80c1eea:	0092      	lsls	r2, r2, #2
 80c1eec:	300c      	adds	r0, #12
 80c1eee:	f7fe f857 	bl	80bffa0 <memcpy>
 80c1ef2:	4621      	mov	r1, r4
 80c1ef4:	4638      	mov	r0, r7
 80c1ef6:	f7ff ffa3 	bl	80c1e40 <_Bfree>
 80c1efa:	462c      	mov	r4, r5
 80c1efc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80c1f00:	3601      	adds	r6, #1
 80c1f02:	f8c3 8014 	str.w	r8, [r3, #20]
 80c1f06:	6126      	str	r6, [r4, #16]
 80c1f08:	4620      	mov	r0, r4
 80c1f0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80c1f0e:	bf00      	nop
 80c1f10:	080dd36f 	.word	0x080dd36f
 80c1f14:	080dd3e0 	.word	0x080dd3e0

080c1f18 <__hi0bits>:
 80c1f18:	0c03      	lsrs	r3, r0, #16
 80c1f1a:	041b      	lsls	r3, r3, #16
 80c1f1c:	b9d3      	cbnz	r3, 80c1f54 <__hi0bits+0x3c>
 80c1f1e:	0400      	lsls	r0, r0, #16
 80c1f20:	2310      	movs	r3, #16
 80c1f22:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80c1f26:	bf04      	itt	eq
 80c1f28:	0200      	lsleq	r0, r0, #8
 80c1f2a:	3308      	addeq	r3, #8
 80c1f2c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80c1f30:	bf04      	itt	eq
 80c1f32:	0100      	lsleq	r0, r0, #4
 80c1f34:	3304      	addeq	r3, #4
 80c1f36:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80c1f3a:	bf04      	itt	eq
 80c1f3c:	0080      	lsleq	r0, r0, #2
 80c1f3e:	3302      	addeq	r3, #2
 80c1f40:	2800      	cmp	r0, #0
 80c1f42:	db05      	blt.n	80c1f50 <__hi0bits+0x38>
 80c1f44:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80c1f48:	f103 0301 	add.w	r3, r3, #1
 80c1f4c:	bf08      	it	eq
 80c1f4e:	2320      	moveq	r3, #32
 80c1f50:	4618      	mov	r0, r3
 80c1f52:	4770      	bx	lr
 80c1f54:	2300      	movs	r3, #0
 80c1f56:	e7e4      	b.n	80c1f22 <__hi0bits+0xa>

080c1f58 <__lo0bits>:
 80c1f58:	6803      	ldr	r3, [r0, #0]
 80c1f5a:	f013 0207 	ands.w	r2, r3, #7
 80c1f5e:	4601      	mov	r1, r0
 80c1f60:	d00b      	beq.n	80c1f7a <__lo0bits+0x22>
 80c1f62:	07da      	lsls	r2, r3, #31
 80c1f64:	d424      	bmi.n	80c1fb0 <__lo0bits+0x58>
 80c1f66:	0798      	lsls	r0, r3, #30
 80c1f68:	bf49      	itett	mi
 80c1f6a:	085b      	lsrmi	r3, r3, #1
 80c1f6c:	089b      	lsrpl	r3, r3, #2
 80c1f6e:	2001      	movmi	r0, #1
 80c1f70:	600b      	strmi	r3, [r1, #0]
 80c1f72:	bf5c      	itt	pl
 80c1f74:	600b      	strpl	r3, [r1, #0]
 80c1f76:	2002      	movpl	r0, #2
 80c1f78:	4770      	bx	lr
 80c1f7a:	b298      	uxth	r0, r3
 80c1f7c:	b9b0      	cbnz	r0, 80c1fac <__lo0bits+0x54>
 80c1f7e:	0c1b      	lsrs	r3, r3, #16
 80c1f80:	2010      	movs	r0, #16
 80c1f82:	f013 0fff 	tst.w	r3, #255	; 0xff
 80c1f86:	bf04      	itt	eq
 80c1f88:	0a1b      	lsreq	r3, r3, #8
 80c1f8a:	3008      	addeq	r0, #8
 80c1f8c:	071a      	lsls	r2, r3, #28
 80c1f8e:	bf04      	itt	eq
 80c1f90:	091b      	lsreq	r3, r3, #4
 80c1f92:	3004      	addeq	r0, #4
 80c1f94:	079a      	lsls	r2, r3, #30
 80c1f96:	bf04      	itt	eq
 80c1f98:	089b      	lsreq	r3, r3, #2
 80c1f9a:	3002      	addeq	r0, #2
 80c1f9c:	07da      	lsls	r2, r3, #31
 80c1f9e:	d403      	bmi.n	80c1fa8 <__lo0bits+0x50>
 80c1fa0:	085b      	lsrs	r3, r3, #1
 80c1fa2:	f100 0001 	add.w	r0, r0, #1
 80c1fa6:	d005      	beq.n	80c1fb4 <__lo0bits+0x5c>
 80c1fa8:	600b      	str	r3, [r1, #0]
 80c1faa:	4770      	bx	lr
 80c1fac:	4610      	mov	r0, r2
 80c1fae:	e7e8      	b.n	80c1f82 <__lo0bits+0x2a>
 80c1fb0:	2000      	movs	r0, #0
 80c1fb2:	4770      	bx	lr
 80c1fb4:	2020      	movs	r0, #32
 80c1fb6:	4770      	bx	lr

080c1fb8 <__i2b>:
 80c1fb8:	b510      	push	{r4, lr}
 80c1fba:	460c      	mov	r4, r1
 80c1fbc:	2101      	movs	r1, #1
 80c1fbe:	f7ff feff 	bl	80c1dc0 <_Balloc>
 80c1fc2:	4602      	mov	r2, r0
 80c1fc4:	b928      	cbnz	r0, 80c1fd2 <__i2b+0x1a>
 80c1fc6:	4b05      	ldr	r3, [pc, #20]	; (80c1fdc <__i2b+0x24>)
 80c1fc8:	4805      	ldr	r0, [pc, #20]	; (80c1fe0 <__i2b+0x28>)
 80c1fca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80c1fce:	f000 fcbd 	bl	80c294c <__assert_func>
 80c1fd2:	2301      	movs	r3, #1
 80c1fd4:	6144      	str	r4, [r0, #20]
 80c1fd6:	6103      	str	r3, [r0, #16]
 80c1fd8:	bd10      	pop	{r4, pc}
 80c1fda:	bf00      	nop
 80c1fdc:	080dd36f 	.word	0x080dd36f
 80c1fe0:	080dd3e0 	.word	0x080dd3e0

080c1fe4 <__multiply>:
 80c1fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80c1fe8:	4614      	mov	r4, r2
 80c1fea:	690a      	ldr	r2, [r1, #16]
 80c1fec:	6923      	ldr	r3, [r4, #16]
 80c1fee:	429a      	cmp	r2, r3
 80c1ff0:	bfb8      	it	lt
 80c1ff2:	460b      	movlt	r3, r1
 80c1ff4:	460d      	mov	r5, r1
 80c1ff6:	bfbc      	itt	lt
 80c1ff8:	4625      	movlt	r5, r4
 80c1ffa:	461c      	movlt	r4, r3
 80c1ffc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80c2000:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80c2004:	68ab      	ldr	r3, [r5, #8]
 80c2006:	6869      	ldr	r1, [r5, #4]
 80c2008:	eb0a 0709 	add.w	r7, sl, r9
 80c200c:	42bb      	cmp	r3, r7
 80c200e:	b085      	sub	sp, #20
 80c2010:	bfb8      	it	lt
 80c2012:	3101      	addlt	r1, #1
 80c2014:	f7ff fed4 	bl	80c1dc0 <_Balloc>
 80c2018:	b930      	cbnz	r0, 80c2028 <__multiply+0x44>
 80c201a:	4602      	mov	r2, r0
 80c201c:	4b42      	ldr	r3, [pc, #264]	; (80c2128 <__multiply+0x144>)
 80c201e:	4843      	ldr	r0, [pc, #268]	; (80c212c <__multiply+0x148>)
 80c2020:	f240 115d 	movw	r1, #349	; 0x15d
 80c2024:	f000 fc92 	bl	80c294c <__assert_func>
 80c2028:	f100 0614 	add.w	r6, r0, #20
 80c202c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80c2030:	4633      	mov	r3, r6
 80c2032:	2200      	movs	r2, #0
 80c2034:	4543      	cmp	r3, r8
 80c2036:	d31e      	bcc.n	80c2076 <__multiply+0x92>
 80c2038:	f105 0c14 	add.w	ip, r5, #20
 80c203c:	f104 0314 	add.w	r3, r4, #20
 80c2040:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80c2044:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80c2048:	9202      	str	r2, [sp, #8]
 80c204a:	ebac 0205 	sub.w	r2, ip, r5
 80c204e:	3a15      	subs	r2, #21
 80c2050:	f022 0203 	bic.w	r2, r2, #3
 80c2054:	3204      	adds	r2, #4
 80c2056:	f105 0115 	add.w	r1, r5, #21
 80c205a:	458c      	cmp	ip, r1
 80c205c:	bf38      	it	cc
 80c205e:	2204      	movcc	r2, #4
 80c2060:	9201      	str	r2, [sp, #4]
 80c2062:	9a02      	ldr	r2, [sp, #8]
 80c2064:	9303      	str	r3, [sp, #12]
 80c2066:	429a      	cmp	r2, r3
 80c2068:	d808      	bhi.n	80c207c <__multiply+0x98>
 80c206a:	2f00      	cmp	r7, #0
 80c206c:	dc55      	bgt.n	80c211a <__multiply+0x136>
 80c206e:	6107      	str	r7, [r0, #16]
 80c2070:	b005      	add	sp, #20
 80c2072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80c2076:	f843 2b04 	str.w	r2, [r3], #4
 80c207a:	e7db      	b.n	80c2034 <__multiply+0x50>
 80c207c:	f8b3 a000 	ldrh.w	sl, [r3]
 80c2080:	f1ba 0f00 	cmp.w	sl, #0
 80c2084:	d020      	beq.n	80c20c8 <__multiply+0xe4>
 80c2086:	f105 0e14 	add.w	lr, r5, #20
 80c208a:	46b1      	mov	r9, r6
 80c208c:	2200      	movs	r2, #0
 80c208e:	f85e 4b04 	ldr.w	r4, [lr], #4
 80c2092:	f8d9 b000 	ldr.w	fp, [r9]
 80c2096:	b2a1      	uxth	r1, r4
 80c2098:	fa1f fb8b 	uxth.w	fp, fp
 80c209c:	fb0a b101 	mla	r1, sl, r1, fp
 80c20a0:	4411      	add	r1, r2
 80c20a2:	f8d9 2000 	ldr.w	r2, [r9]
 80c20a6:	0c24      	lsrs	r4, r4, #16
 80c20a8:	0c12      	lsrs	r2, r2, #16
 80c20aa:	fb0a 2404 	mla	r4, sl, r4, r2
 80c20ae:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80c20b2:	b289      	uxth	r1, r1
 80c20b4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80c20b8:	45f4      	cmp	ip, lr
 80c20ba:	f849 1b04 	str.w	r1, [r9], #4
 80c20be:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80c20c2:	d8e4      	bhi.n	80c208e <__multiply+0xaa>
 80c20c4:	9901      	ldr	r1, [sp, #4]
 80c20c6:	5072      	str	r2, [r6, r1]
 80c20c8:	9a03      	ldr	r2, [sp, #12]
 80c20ca:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80c20ce:	3304      	adds	r3, #4
 80c20d0:	f1b9 0f00 	cmp.w	r9, #0
 80c20d4:	d01f      	beq.n	80c2116 <__multiply+0x132>
 80c20d6:	6834      	ldr	r4, [r6, #0]
 80c20d8:	f105 0114 	add.w	r1, r5, #20
 80c20dc:	46b6      	mov	lr, r6
 80c20de:	f04f 0a00 	mov.w	sl, #0
 80c20e2:	880a      	ldrh	r2, [r1, #0]
 80c20e4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80c20e8:	fb09 b202 	mla	r2, r9, r2, fp
 80c20ec:	4492      	add	sl, r2
 80c20ee:	b2a4      	uxth	r4, r4
 80c20f0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80c20f4:	f84e 4b04 	str.w	r4, [lr], #4
 80c20f8:	f851 4b04 	ldr.w	r4, [r1], #4
 80c20fc:	f8be 2000 	ldrh.w	r2, [lr]
 80c2100:	0c24      	lsrs	r4, r4, #16
 80c2102:	fb09 2404 	mla	r4, r9, r4, r2
 80c2106:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80c210a:	458c      	cmp	ip, r1
 80c210c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80c2110:	d8e7      	bhi.n	80c20e2 <__multiply+0xfe>
 80c2112:	9a01      	ldr	r2, [sp, #4]
 80c2114:	50b4      	str	r4, [r6, r2]
 80c2116:	3604      	adds	r6, #4
 80c2118:	e7a3      	b.n	80c2062 <__multiply+0x7e>
 80c211a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80c211e:	2b00      	cmp	r3, #0
 80c2120:	d1a5      	bne.n	80c206e <__multiply+0x8a>
 80c2122:	3f01      	subs	r7, #1
 80c2124:	e7a1      	b.n	80c206a <__multiply+0x86>
 80c2126:	bf00      	nop
 80c2128:	080dd36f 	.word	0x080dd36f
 80c212c:	080dd3e0 	.word	0x080dd3e0

080c2130 <__pow5mult>:
 80c2130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80c2134:	4615      	mov	r5, r2
 80c2136:	f012 0203 	ands.w	r2, r2, #3
 80c213a:	4606      	mov	r6, r0
 80c213c:	460f      	mov	r7, r1
 80c213e:	d007      	beq.n	80c2150 <__pow5mult+0x20>
 80c2140:	4c25      	ldr	r4, [pc, #148]	; (80c21d8 <__pow5mult+0xa8>)
 80c2142:	3a01      	subs	r2, #1
 80c2144:	2300      	movs	r3, #0
 80c2146:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80c214a:	f7ff fe9b 	bl	80c1e84 <__multadd>
 80c214e:	4607      	mov	r7, r0
 80c2150:	10ad      	asrs	r5, r5, #2
 80c2152:	d03d      	beq.n	80c21d0 <__pow5mult+0xa0>
 80c2154:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80c2156:	b97c      	cbnz	r4, 80c2178 <__pow5mult+0x48>
 80c2158:	2010      	movs	r0, #16
 80c215a:	f7ff fe1d 	bl	80c1d98 <malloc>
 80c215e:	4602      	mov	r2, r0
 80c2160:	6270      	str	r0, [r6, #36]	; 0x24
 80c2162:	b928      	cbnz	r0, 80c2170 <__pow5mult+0x40>
 80c2164:	4b1d      	ldr	r3, [pc, #116]	; (80c21dc <__pow5mult+0xac>)
 80c2166:	481e      	ldr	r0, [pc, #120]	; (80c21e0 <__pow5mult+0xb0>)
 80c2168:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80c216c:	f000 fbee 	bl	80c294c <__assert_func>
 80c2170:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80c2174:	6004      	str	r4, [r0, #0]
 80c2176:	60c4      	str	r4, [r0, #12]
 80c2178:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80c217c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80c2180:	b94c      	cbnz	r4, 80c2196 <__pow5mult+0x66>
 80c2182:	f240 2171 	movw	r1, #625	; 0x271
 80c2186:	4630      	mov	r0, r6
 80c2188:	f7ff ff16 	bl	80c1fb8 <__i2b>
 80c218c:	2300      	movs	r3, #0
 80c218e:	f8c8 0008 	str.w	r0, [r8, #8]
 80c2192:	4604      	mov	r4, r0
 80c2194:	6003      	str	r3, [r0, #0]
 80c2196:	f04f 0900 	mov.w	r9, #0
 80c219a:	07eb      	lsls	r3, r5, #31
 80c219c:	d50a      	bpl.n	80c21b4 <__pow5mult+0x84>
 80c219e:	4639      	mov	r1, r7
 80c21a0:	4622      	mov	r2, r4
 80c21a2:	4630      	mov	r0, r6
 80c21a4:	f7ff ff1e 	bl	80c1fe4 <__multiply>
 80c21a8:	4639      	mov	r1, r7
 80c21aa:	4680      	mov	r8, r0
 80c21ac:	4630      	mov	r0, r6
 80c21ae:	f7ff fe47 	bl	80c1e40 <_Bfree>
 80c21b2:	4647      	mov	r7, r8
 80c21b4:	106d      	asrs	r5, r5, #1
 80c21b6:	d00b      	beq.n	80c21d0 <__pow5mult+0xa0>
 80c21b8:	6820      	ldr	r0, [r4, #0]
 80c21ba:	b938      	cbnz	r0, 80c21cc <__pow5mult+0x9c>
 80c21bc:	4622      	mov	r2, r4
 80c21be:	4621      	mov	r1, r4
 80c21c0:	4630      	mov	r0, r6
 80c21c2:	f7ff ff0f 	bl	80c1fe4 <__multiply>
 80c21c6:	6020      	str	r0, [r4, #0]
 80c21c8:	f8c0 9000 	str.w	r9, [r0]
 80c21cc:	4604      	mov	r4, r0
 80c21ce:	e7e4      	b.n	80c219a <__pow5mult+0x6a>
 80c21d0:	4638      	mov	r0, r7
 80c21d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80c21d6:	bf00      	nop
 80c21d8:	080dd530 	.word	0x080dd530
 80c21dc:	080dd2f9 	.word	0x080dd2f9
 80c21e0:	080dd3e0 	.word	0x080dd3e0

080c21e4 <__lshift>:
 80c21e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80c21e8:	460c      	mov	r4, r1
 80c21ea:	6849      	ldr	r1, [r1, #4]
 80c21ec:	6923      	ldr	r3, [r4, #16]
 80c21ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80c21f2:	68a3      	ldr	r3, [r4, #8]
 80c21f4:	4607      	mov	r7, r0
 80c21f6:	4691      	mov	r9, r2
 80c21f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80c21fc:	f108 0601 	add.w	r6, r8, #1
 80c2200:	42b3      	cmp	r3, r6
 80c2202:	db0b      	blt.n	80c221c <__lshift+0x38>
 80c2204:	4638      	mov	r0, r7
 80c2206:	f7ff fddb 	bl	80c1dc0 <_Balloc>
 80c220a:	4605      	mov	r5, r0
 80c220c:	b948      	cbnz	r0, 80c2222 <__lshift+0x3e>
 80c220e:	4602      	mov	r2, r0
 80c2210:	4b28      	ldr	r3, [pc, #160]	; (80c22b4 <__lshift+0xd0>)
 80c2212:	4829      	ldr	r0, [pc, #164]	; (80c22b8 <__lshift+0xd4>)
 80c2214:	f240 11d9 	movw	r1, #473	; 0x1d9
 80c2218:	f000 fb98 	bl	80c294c <__assert_func>
 80c221c:	3101      	adds	r1, #1
 80c221e:	005b      	lsls	r3, r3, #1
 80c2220:	e7ee      	b.n	80c2200 <__lshift+0x1c>
 80c2222:	2300      	movs	r3, #0
 80c2224:	f100 0114 	add.w	r1, r0, #20
 80c2228:	f100 0210 	add.w	r2, r0, #16
 80c222c:	4618      	mov	r0, r3
 80c222e:	4553      	cmp	r3, sl
 80c2230:	db33      	blt.n	80c229a <__lshift+0xb6>
 80c2232:	6920      	ldr	r0, [r4, #16]
 80c2234:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80c2238:	f104 0314 	add.w	r3, r4, #20
 80c223c:	f019 091f 	ands.w	r9, r9, #31
 80c2240:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80c2244:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80c2248:	d02b      	beq.n	80c22a2 <__lshift+0xbe>
 80c224a:	f1c9 0e20 	rsb	lr, r9, #32
 80c224e:	468a      	mov	sl, r1
 80c2250:	2200      	movs	r2, #0
 80c2252:	6818      	ldr	r0, [r3, #0]
 80c2254:	fa00 f009 	lsl.w	r0, r0, r9
 80c2258:	4302      	orrs	r2, r0
 80c225a:	f84a 2b04 	str.w	r2, [sl], #4
 80c225e:	f853 2b04 	ldr.w	r2, [r3], #4
 80c2262:	459c      	cmp	ip, r3
 80c2264:	fa22 f20e 	lsr.w	r2, r2, lr
 80c2268:	d8f3      	bhi.n	80c2252 <__lshift+0x6e>
 80c226a:	ebac 0304 	sub.w	r3, ip, r4
 80c226e:	3b15      	subs	r3, #21
 80c2270:	f023 0303 	bic.w	r3, r3, #3
 80c2274:	3304      	adds	r3, #4
 80c2276:	f104 0015 	add.w	r0, r4, #21
 80c227a:	4584      	cmp	ip, r0
 80c227c:	bf38      	it	cc
 80c227e:	2304      	movcc	r3, #4
 80c2280:	50ca      	str	r2, [r1, r3]
 80c2282:	b10a      	cbz	r2, 80c2288 <__lshift+0xa4>
 80c2284:	f108 0602 	add.w	r6, r8, #2
 80c2288:	3e01      	subs	r6, #1
 80c228a:	4638      	mov	r0, r7
 80c228c:	612e      	str	r6, [r5, #16]
 80c228e:	4621      	mov	r1, r4
 80c2290:	f7ff fdd6 	bl	80c1e40 <_Bfree>
 80c2294:	4628      	mov	r0, r5
 80c2296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80c229a:	f842 0f04 	str.w	r0, [r2, #4]!
 80c229e:	3301      	adds	r3, #1
 80c22a0:	e7c5      	b.n	80c222e <__lshift+0x4a>
 80c22a2:	3904      	subs	r1, #4
 80c22a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80c22a8:	f841 2f04 	str.w	r2, [r1, #4]!
 80c22ac:	459c      	cmp	ip, r3
 80c22ae:	d8f9      	bhi.n	80c22a4 <__lshift+0xc0>
 80c22b0:	e7ea      	b.n	80c2288 <__lshift+0xa4>
 80c22b2:	bf00      	nop
 80c22b4:	080dd36f 	.word	0x080dd36f
 80c22b8:	080dd3e0 	.word	0x080dd3e0

080c22bc <__mcmp>:
 80c22bc:	b530      	push	{r4, r5, lr}
 80c22be:	6902      	ldr	r2, [r0, #16]
 80c22c0:	690c      	ldr	r4, [r1, #16]
 80c22c2:	1b12      	subs	r2, r2, r4
 80c22c4:	d10e      	bne.n	80c22e4 <__mcmp+0x28>
 80c22c6:	f100 0314 	add.w	r3, r0, #20
 80c22ca:	3114      	adds	r1, #20
 80c22cc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80c22d0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80c22d4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80c22d8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80c22dc:	42a5      	cmp	r5, r4
 80c22de:	d003      	beq.n	80c22e8 <__mcmp+0x2c>
 80c22e0:	d305      	bcc.n	80c22ee <__mcmp+0x32>
 80c22e2:	2201      	movs	r2, #1
 80c22e4:	4610      	mov	r0, r2
 80c22e6:	bd30      	pop	{r4, r5, pc}
 80c22e8:	4283      	cmp	r3, r0
 80c22ea:	d3f3      	bcc.n	80c22d4 <__mcmp+0x18>
 80c22ec:	e7fa      	b.n	80c22e4 <__mcmp+0x28>
 80c22ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80c22f2:	e7f7      	b.n	80c22e4 <__mcmp+0x28>

080c22f4 <__mdiff>:
 80c22f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80c22f8:	460c      	mov	r4, r1
 80c22fa:	4606      	mov	r6, r0
 80c22fc:	4611      	mov	r1, r2
 80c22fe:	4620      	mov	r0, r4
 80c2300:	4617      	mov	r7, r2
 80c2302:	f7ff ffdb 	bl	80c22bc <__mcmp>
 80c2306:	1e05      	subs	r5, r0, #0
 80c2308:	d110      	bne.n	80c232c <__mdiff+0x38>
 80c230a:	4629      	mov	r1, r5
 80c230c:	4630      	mov	r0, r6
 80c230e:	f7ff fd57 	bl	80c1dc0 <_Balloc>
 80c2312:	b930      	cbnz	r0, 80c2322 <__mdiff+0x2e>
 80c2314:	4b39      	ldr	r3, [pc, #228]	; (80c23fc <__mdiff+0x108>)
 80c2316:	4602      	mov	r2, r0
 80c2318:	f240 2132 	movw	r1, #562	; 0x232
 80c231c:	4838      	ldr	r0, [pc, #224]	; (80c2400 <__mdiff+0x10c>)
 80c231e:	f000 fb15 	bl	80c294c <__assert_func>
 80c2322:	2301      	movs	r3, #1
 80c2324:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80c2328:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80c232c:	bfa4      	itt	ge
 80c232e:	463b      	movge	r3, r7
 80c2330:	4627      	movge	r7, r4
 80c2332:	4630      	mov	r0, r6
 80c2334:	6879      	ldr	r1, [r7, #4]
 80c2336:	bfa6      	itte	ge
 80c2338:	461c      	movge	r4, r3
 80c233a:	2500      	movge	r5, #0
 80c233c:	2501      	movlt	r5, #1
 80c233e:	f7ff fd3f 	bl	80c1dc0 <_Balloc>
 80c2342:	b920      	cbnz	r0, 80c234e <__mdiff+0x5a>
 80c2344:	4b2d      	ldr	r3, [pc, #180]	; (80c23fc <__mdiff+0x108>)
 80c2346:	4602      	mov	r2, r0
 80c2348:	f44f 7110 	mov.w	r1, #576	; 0x240
 80c234c:	e7e6      	b.n	80c231c <__mdiff+0x28>
 80c234e:	693e      	ldr	r6, [r7, #16]
 80c2350:	60c5      	str	r5, [r0, #12]
 80c2352:	6925      	ldr	r5, [r4, #16]
 80c2354:	f107 0114 	add.w	r1, r7, #20
 80c2358:	f104 0914 	add.w	r9, r4, #20
 80c235c:	f100 0e14 	add.w	lr, r0, #20
 80c2360:	f107 0210 	add.w	r2, r7, #16
 80c2364:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80c2368:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80c236c:	46f2      	mov	sl, lr
 80c236e:	2700      	movs	r7, #0
 80c2370:	f859 3b04 	ldr.w	r3, [r9], #4
 80c2374:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80c2378:	fa1f f883 	uxth.w	r8, r3
 80c237c:	fa17 f78b 	uxtah	r7, r7, fp
 80c2380:	0c1b      	lsrs	r3, r3, #16
 80c2382:	eba7 0808 	sub.w	r8, r7, r8
 80c2386:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80c238a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80c238e:	fa1f f888 	uxth.w	r8, r8
 80c2392:	141f      	asrs	r7, r3, #16
 80c2394:	454d      	cmp	r5, r9
 80c2396:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80c239a:	f84a 3b04 	str.w	r3, [sl], #4
 80c239e:	d8e7      	bhi.n	80c2370 <__mdiff+0x7c>
 80c23a0:	1b2b      	subs	r3, r5, r4
 80c23a2:	3b15      	subs	r3, #21
 80c23a4:	f023 0303 	bic.w	r3, r3, #3
 80c23a8:	3304      	adds	r3, #4
 80c23aa:	3415      	adds	r4, #21
 80c23ac:	42a5      	cmp	r5, r4
 80c23ae:	bf38      	it	cc
 80c23b0:	2304      	movcc	r3, #4
 80c23b2:	4419      	add	r1, r3
 80c23b4:	4473      	add	r3, lr
 80c23b6:	469e      	mov	lr, r3
 80c23b8:	460d      	mov	r5, r1
 80c23ba:	4565      	cmp	r5, ip
 80c23bc:	d30e      	bcc.n	80c23dc <__mdiff+0xe8>
 80c23be:	f10c 0203 	add.w	r2, ip, #3
 80c23c2:	1a52      	subs	r2, r2, r1
 80c23c4:	f022 0203 	bic.w	r2, r2, #3
 80c23c8:	3903      	subs	r1, #3
 80c23ca:	458c      	cmp	ip, r1
 80c23cc:	bf38      	it	cc
 80c23ce:	2200      	movcc	r2, #0
 80c23d0:	441a      	add	r2, r3
 80c23d2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80c23d6:	b17b      	cbz	r3, 80c23f8 <__mdiff+0x104>
 80c23d8:	6106      	str	r6, [r0, #16]
 80c23da:	e7a5      	b.n	80c2328 <__mdiff+0x34>
 80c23dc:	f855 8b04 	ldr.w	r8, [r5], #4
 80c23e0:	fa17 f488 	uxtah	r4, r7, r8
 80c23e4:	1422      	asrs	r2, r4, #16
 80c23e6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80c23ea:	b2a4      	uxth	r4, r4
 80c23ec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80c23f0:	f84e 4b04 	str.w	r4, [lr], #4
 80c23f4:	1417      	asrs	r7, r2, #16
 80c23f6:	e7e0      	b.n	80c23ba <__mdiff+0xc6>
 80c23f8:	3e01      	subs	r6, #1
 80c23fa:	e7ea      	b.n	80c23d2 <__mdiff+0xde>
 80c23fc:	080dd36f 	.word	0x080dd36f
 80c2400:	080dd3e0 	.word	0x080dd3e0

080c2404 <__d2b>:
 80c2404:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80c2408:	4689      	mov	r9, r1
 80c240a:	2101      	movs	r1, #1
 80c240c:	ec57 6b10 	vmov	r6, r7, d0
 80c2410:	4690      	mov	r8, r2
 80c2412:	f7ff fcd5 	bl	80c1dc0 <_Balloc>
 80c2416:	4604      	mov	r4, r0
 80c2418:	b930      	cbnz	r0, 80c2428 <__d2b+0x24>
 80c241a:	4602      	mov	r2, r0
 80c241c:	4b25      	ldr	r3, [pc, #148]	; (80c24b4 <__d2b+0xb0>)
 80c241e:	4826      	ldr	r0, [pc, #152]	; (80c24b8 <__d2b+0xb4>)
 80c2420:	f240 310a 	movw	r1, #778	; 0x30a
 80c2424:	f000 fa92 	bl	80c294c <__assert_func>
 80c2428:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80c242c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80c2430:	bb35      	cbnz	r5, 80c2480 <__d2b+0x7c>
 80c2432:	2e00      	cmp	r6, #0
 80c2434:	9301      	str	r3, [sp, #4]
 80c2436:	d028      	beq.n	80c248a <__d2b+0x86>
 80c2438:	4668      	mov	r0, sp
 80c243a:	9600      	str	r6, [sp, #0]
 80c243c:	f7ff fd8c 	bl	80c1f58 <__lo0bits>
 80c2440:	9900      	ldr	r1, [sp, #0]
 80c2442:	b300      	cbz	r0, 80c2486 <__d2b+0x82>
 80c2444:	9a01      	ldr	r2, [sp, #4]
 80c2446:	f1c0 0320 	rsb	r3, r0, #32
 80c244a:	fa02 f303 	lsl.w	r3, r2, r3
 80c244e:	430b      	orrs	r3, r1
 80c2450:	40c2      	lsrs	r2, r0
 80c2452:	6163      	str	r3, [r4, #20]
 80c2454:	9201      	str	r2, [sp, #4]
 80c2456:	9b01      	ldr	r3, [sp, #4]
 80c2458:	61a3      	str	r3, [r4, #24]
 80c245a:	2b00      	cmp	r3, #0
 80c245c:	bf14      	ite	ne
 80c245e:	2202      	movne	r2, #2
 80c2460:	2201      	moveq	r2, #1
 80c2462:	6122      	str	r2, [r4, #16]
 80c2464:	b1d5      	cbz	r5, 80c249c <__d2b+0x98>
 80c2466:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80c246a:	4405      	add	r5, r0
 80c246c:	f8c9 5000 	str.w	r5, [r9]
 80c2470:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80c2474:	f8c8 0000 	str.w	r0, [r8]
 80c2478:	4620      	mov	r0, r4
 80c247a:	b003      	add	sp, #12
 80c247c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80c2480:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80c2484:	e7d5      	b.n	80c2432 <__d2b+0x2e>
 80c2486:	6161      	str	r1, [r4, #20]
 80c2488:	e7e5      	b.n	80c2456 <__d2b+0x52>
 80c248a:	a801      	add	r0, sp, #4
 80c248c:	f7ff fd64 	bl	80c1f58 <__lo0bits>
 80c2490:	9b01      	ldr	r3, [sp, #4]
 80c2492:	6163      	str	r3, [r4, #20]
 80c2494:	2201      	movs	r2, #1
 80c2496:	6122      	str	r2, [r4, #16]
 80c2498:	3020      	adds	r0, #32
 80c249a:	e7e3      	b.n	80c2464 <__d2b+0x60>
 80c249c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80c24a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80c24a4:	f8c9 0000 	str.w	r0, [r9]
 80c24a8:	6918      	ldr	r0, [r3, #16]
 80c24aa:	f7ff fd35 	bl	80c1f18 <__hi0bits>
 80c24ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80c24b2:	e7df      	b.n	80c2474 <__d2b+0x70>
 80c24b4:	080dd36f 	.word	0x080dd36f
 80c24b8:	080dd3e0 	.word	0x080dd3e0

080c24bc <_free_r>:
 80c24bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80c24be:	2900      	cmp	r1, #0
 80c24c0:	d048      	beq.n	80c2554 <_free_r+0x98>
 80c24c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80c24c6:	9001      	str	r0, [sp, #4]
 80c24c8:	2b00      	cmp	r3, #0
 80c24ca:	f1a1 0404 	sub.w	r4, r1, #4
 80c24ce:	bfb8      	it	lt
 80c24d0:	18e4      	addlt	r4, r4, r3
 80c24d2:	f7ff fc69 	bl	80c1da8 <__malloc_lock>
 80c24d6:	4a20      	ldr	r2, [pc, #128]	; (80c2558 <_free_r+0x9c>)
 80c24d8:	9801      	ldr	r0, [sp, #4]
 80c24da:	6813      	ldr	r3, [r2, #0]
 80c24dc:	4615      	mov	r5, r2
 80c24de:	b933      	cbnz	r3, 80c24ee <_free_r+0x32>
 80c24e0:	6063      	str	r3, [r4, #4]
 80c24e2:	6014      	str	r4, [r2, #0]
 80c24e4:	b003      	add	sp, #12
 80c24e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80c24ea:	f7ff bc63 	b.w	80c1db4 <__malloc_unlock>
 80c24ee:	42a3      	cmp	r3, r4
 80c24f0:	d90b      	bls.n	80c250a <_free_r+0x4e>
 80c24f2:	6821      	ldr	r1, [r4, #0]
 80c24f4:	1862      	adds	r2, r4, r1
 80c24f6:	4293      	cmp	r3, r2
 80c24f8:	bf04      	itt	eq
 80c24fa:	681a      	ldreq	r2, [r3, #0]
 80c24fc:	685b      	ldreq	r3, [r3, #4]
 80c24fe:	6063      	str	r3, [r4, #4]
 80c2500:	bf04      	itt	eq
 80c2502:	1852      	addeq	r2, r2, r1
 80c2504:	6022      	streq	r2, [r4, #0]
 80c2506:	602c      	str	r4, [r5, #0]
 80c2508:	e7ec      	b.n	80c24e4 <_free_r+0x28>
 80c250a:	461a      	mov	r2, r3
 80c250c:	685b      	ldr	r3, [r3, #4]
 80c250e:	b10b      	cbz	r3, 80c2514 <_free_r+0x58>
 80c2510:	42a3      	cmp	r3, r4
 80c2512:	d9fa      	bls.n	80c250a <_free_r+0x4e>
 80c2514:	6811      	ldr	r1, [r2, #0]
 80c2516:	1855      	adds	r5, r2, r1
 80c2518:	42a5      	cmp	r5, r4
 80c251a:	d10b      	bne.n	80c2534 <_free_r+0x78>
 80c251c:	6824      	ldr	r4, [r4, #0]
 80c251e:	4421      	add	r1, r4
 80c2520:	1854      	adds	r4, r2, r1
 80c2522:	42a3      	cmp	r3, r4
 80c2524:	6011      	str	r1, [r2, #0]
 80c2526:	d1dd      	bne.n	80c24e4 <_free_r+0x28>
 80c2528:	681c      	ldr	r4, [r3, #0]
 80c252a:	685b      	ldr	r3, [r3, #4]
 80c252c:	6053      	str	r3, [r2, #4]
 80c252e:	4421      	add	r1, r4
 80c2530:	6011      	str	r1, [r2, #0]
 80c2532:	e7d7      	b.n	80c24e4 <_free_r+0x28>
 80c2534:	d902      	bls.n	80c253c <_free_r+0x80>
 80c2536:	230c      	movs	r3, #12
 80c2538:	6003      	str	r3, [r0, #0]
 80c253a:	e7d3      	b.n	80c24e4 <_free_r+0x28>
 80c253c:	6825      	ldr	r5, [r4, #0]
 80c253e:	1961      	adds	r1, r4, r5
 80c2540:	428b      	cmp	r3, r1
 80c2542:	bf04      	itt	eq
 80c2544:	6819      	ldreq	r1, [r3, #0]
 80c2546:	685b      	ldreq	r3, [r3, #4]
 80c2548:	6063      	str	r3, [r4, #4]
 80c254a:	bf04      	itt	eq
 80c254c:	1949      	addeq	r1, r1, r5
 80c254e:	6021      	streq	r1, [r4, #0]
 80c2550:	6054      	str	r4, [r2, #4]
 80c2552:	e7c7      	b.n	80c24e4 <_free_r+0x28>
 80c2554:	b003      	add	sp, #12
 80c2556:	bd30      	pop	{r4, r5, pc}
 80c2558:	2001b56c 	.word	0x2001b56c

080c255c <__sfputc_r>:
 80c255c:	6893      	ldr	r3, [r2, #8]
 80c255e:	3b01      	subs	r3, #1
 80c2560:	2b00      	cmp	r3, #0
 80c2562:	b410      	push	{r4}
 80c2564:	6093      	str	r3, [r2, #8]
 80c2566:	da08      	bge.n	80c257a <__sfputc_r+0x1e>
 80c2568:	6994      	ldr	r4, [r2, #24]
 80c256a:	42a3      	cmp	r3, r4
 80c256c:	db01      	blt.n	80c2572 <__sfputc_r+0x16>
 80c256e:	290a      	cmp	r1, #10
 80c2570:	d103      	bne.n	80c257a <__sfputc_r+0x1e>
 80c2572:	f85d 4b04 	ldr.w	r4, [sp], #4
 80c2576:	f7fe bab1 	b.w	80c0adc <__swbuf_r>
 80c257a:	6813      	ldr	r3, [r2, #0]
 80c257c:	1c58      	adds	r0, r3, #1
 80c257e:	6010      	str	r0, [r2, #0]
 80c2580:	7019      	strb	r1, [r3, #0]
 80c2582:	4608      	mov	r0, r1
 80c2584:	f85d 4b04 	ldr.w	r4, [sp], #4
 80c2588:	4770      	bx	lr

080c258a <__sfputs_r>:
 80c258a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80c258c:	4606      	mov	r6, r0
 80c258e:	460f      	mov	r7, r1
 80c2590:	4614      	mov	r4, r2
 80c2592:	18d5      	adds	r5, r2, r3
 80c2594:	42ac      	cmp	r4, r5
 80c2596:	d101      	bne.n	80c259c <__sfputs_r+0x12>
 80c2598:	2000      	movs	r0, #0
 80c259a:	e007      	b.n	80c25ac <__sfputs_r+0x22>
 80c259c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80c25a0:	463a      	mov	r2, r7
 80c25a2:	4630      	mov	r0, r6
 80c25a4:	f7ff ffda 	bl	80c255c <__sfputc_r>
 80c25a8:	1c43      	adds	r3, r0, #1
 80c25aa:	d1f3      	bne.n	80c2594 <__sfputs_r+0xa>
 80c25ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080c25b0 <_vfiprintf_r>:
 80c25b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80c25b4:	460d      	mov	r5, r1
 80c25b6:	b09d      	sub	sp, #116	; 0x74
 80c25b8:	4614      	mov	r4, r2
 80c25ba:	4698      	mov	r8, r3
 80c25bc:	4606      	mov	r6, r0
 80c25be:	b118      	cbz	r0, 80c25c8 <_vfiprintf_r+0x18>
 80c25c0:	6983      	ldr	r3, [r0, #24]
 80c25c2:	b90b      	cbnz	r3, 80c25c8 <_vfiprintf_r+0x18>
 80c25c4:	f7ff fade 	bl	80c1b84 <__sinit>
 80c25c8:	4b89      	ldr	r3, [pc, #548]	; (80c27f0 <_vfiprintf_r+0x240>)
 80c25ca:	429d      	cmp	r5, r3
 80c25cc:	d11b      	bne.n	80c2606 <_vfiprintf_r+0x56>
 80c25ce:	6875      	ldr	r5, [r6, #4]
 80c25d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80c25d2:	07d9      	lsls	r1, r3, #31
 80c25d4:	d405      	bmi.n	80c25e2 <_vfiprintf_r+0x32>
 80c25d6:	89ab      	ldrh	r3, [r5, #12]
 80c25d8:	059a      	lsls	r2, r3, #22
 80c25da:	d402      	bmi.n	80c25e2 <_vfiprintf_r+0x32>
 80c25dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80c25de:	f7ff fb74 	bl	80c1cca <__retarget_lock_acquire_recursive>
 80c25e2:	89ab      	ldrh	r3, [r5, #12]
 80c25e4:	071b      	lsls	r3, r3, #28
 80c25e6:	d501      	bpl.n	80c25ec <_vfiprintf_r+0x3c>
 80c25e8:	692b      	ldr	r3, [r5, #16]
 80c25ea:	b9eb      	cbnz	r3, 80c2628 <_vfiprintf_r+0x78>
 80c25ec:	4629      	mov	r1, r5
 80c25ee:	4630      	mov	r0, r6
 80c25f0:	f7fe fac6 	bl	80c0b80 <__swsetup_r>
 80c25f4:	b1c0      	cbz	r0, 80c2628 <_vfiprintf_r+0x78>
 80c25f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80c25f8:	07dc      	lsls	r4, r3, #31
 80c25fa:	d50e      	bpl.n	80c261a <_vfiprintf_r+0x6a>
 80c25fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80c2600:	b01d      	add	sp, #116	; 0x74
 80c2602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80c2606:	4b7b      	ldr	r3, [pc, #492]	; (80c27f4 <_vfiprintf_r+0x244>)
 80c2608:	429d      	cmp	r5, r3
 80c260a:	d101      	bne.n	80c2610 <_vfiprintf_r+0x60>
 80c260c:	68b5      	ldr	r5, [r6, #8]
 80c260e:	e7df      	b.n	80c25d0 <_vfiprintf_r+0x20>
 80c2610:	4b79      	ldr	r3, [pc, #484]	; (80c27f8 <_vfiprintf_r+0x248>)
 80c2612:	429d      	cmp	r5, r3
 80c2614:	bf08      	it	eq
 80c2616:	68f5      	ldreq	r5, [r6, #12]
 80c2618:	e7da      	b.n	80c25d0 <_vfiprintf_r+0x20>
 80c261a:	89ab      	ldrh	r3, [r5, #12]
 80c261c:	0598      	lsls	r0, r3, #22
 80c261e:	d4ed      	bmi.n	80c25fc <_vfiprintf_r+0x4c>
 80c2620:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80c2622:	f7ff fb53 	bl	80c1ccc <__retarget_lock_release_recursive>
 80c2626:	e7e9      	b.n	80c25fc <_vfiprintf_r+0x4c>
 80c2628:	2300      	movs	r3, #0
 80c262a:	9309      	str	r3, [sp, #36]	; 0x24
 80c262c:	2320      	movs	r3, #32
 80c262e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80c2632:	f8cd 800c 	str.w	r8, [sp, #12]
 80c2636:	2330      	movs	r3, #48	; 0x30
 80c2638:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80c27fc <_vfiprintf_r+0x24c>
 80c263c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80c2640:	f04f 0901 	mov.w	r9, #1
 80c2644:	4623      	mov	r3, r4
 80c2646:	469a      	mov	sl, r3
 80c2648:	f813 2b01 	ldrb.w	r2, [r3], #1
 80c264c:	b10a      	cbz	r2, 80c2652 <_vfiprintf_r+0xa2>
 80c264e:	2a25      	cmp	r2, #37	; 0x25
 80c2650:	d1f9      	bne.n	80c2646 <_vfiprintf_r+0x96>
 80c2652:	ebba 0b04 	subs.w	fp, sl, r4
 80c2656:	d00b      	beq.n	80c2670 <_vfiprintf_r+0xc0>
 80c2658:	465b      	mov	r3, fp
 80c265a:	4622      	mov	r2, r4
 80c265c:	4629      	mov	r1, r5
 80c265e:	4630      	mov	r0, r6
 80c2660:	f7ff ff93 	bl	80c258a <__sfputs_r>
 80c2664:	3001      	adds	r0, #1
 80c2666:	f000 80aa 	beq.w	80c27be <_vfiprintf_r+0x20e>
 80c266a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80c266c:	445a      	add	r2, fp
 80c266e:	9209      	str	r2, [sp, #36]	; 0x24
 80c2670:	f89a 3000 	ldrb.w	r3, [sl]
 80c2674:	2b00      	cmp	r3, #0
 80c2676:	f000 80a2 	beq.w	80c27be <_vfiprintf_r+0x20e>
 80c267a:	2300      	movs	r3, #0
 80c267c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80c2680:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80c2684:	f10a 0a01 	add.w	sl, sl, #1
 80c2688:	9304      	str	r3, [sp, #16]
 80c268a:	9307      	str	r3, [sp, #28]
 80c268c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80c2690:	931a      	str	r3, [sp, #104]	; 0x68
 80c2692:	4654      	mov	r4, sl
 80c2694:	2205      	movs	r2, #5
 80c2696:	f814 1b01 	ldrb.w	r1, [r4], #1
 80c269a:	4858      	ldr	r0, [pc, #352]	; (80c27fc <_vfiprintf_r+0x24c>)
 80c269c:	f7dd fda0 	bl	80a01e0 <memchr>
 80c26a0:	9a04      	ldr	r2, [sp, #16]
 80c26a2:	b9d8      	cbnz	r0, 80c26dc <_vfiprintf_r+0x12c>
 80c26a4:	06d1      	lsls	r1, r2, #27
 80c26a6:	bf44      	itt	mi
 80c26a8:	2320      	movmi	r3, #32
 80c26aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80c26ae:	0713      	lsls	r3, r2, #28
 80c26b0:	bf44      	itt	mi
 80c26b2:	232b      	movmi	r3, #43	; 0x2b
 80c26b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80c26b8:	f89a 3000 	ldrb.w	r3, [sl]
 80c26bc:	2b2a      	cmp	r3, #42	; 0x2a
 80c26be:	d015      	beq.n	80c26ec <_vfiprintf_r+0x13c>
 80c26c0:	9a07      	ldr	r2, [sp, #28]
 80c26c2:	4654      	mov	r4, sl
 80c26c4:	2000      	movs	r0, #0
 80c26c6:	f04f 0c0a 	mov.w	ip, #10
 80c26ca:	4621      	mov	r1, r4
 80c26cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80c26d0:	3b30      	subs	r3, #48	; 0x30
 80c26d2:	2b09      	cmp	r3, #9
 80c26d4:	d94e      	bls.n	80c2774 <_vfiprintf_r+0x1c4>
 80c26d6:	b1b0      	cbz	r0, 80c2706 <_vfiprintf_r+0x156>
 80c26d8:	9207      	str	r2, [sp, #28]
 80c26da:	e014      	b.n	80c2706 <_vfiprintf_r+0x156>
 80c26dc:	eba0 0308 	sub.w	r3, r0, r8
 80c26e0:	fa09 f303 	lsl.w	r3, r9, r3
 80c26e4:	4313      	orrs	r3, r2
 80c26e6:	9304      	str	r3, [sp, #16]
 80c26e8:	46a2      	mov	sl, r4
 80c26ea:	e7d2      	b.n	80c2692 <_vfiprintf_r+0xe2>
 80c26ec:	9b03      	ldr	r3, [sp, #12]
 80c26ee:	1d19      	adds	r1, r3, #4
 80c26f0:	681b      	ldr	r3, [r3, #0]
 80c26f2:	9103      	str	r1, [sp, #12]
 80c26f4:	2b00      	cmp	r3, #0
 80c26f6:	bfbb      	ittet	lt
 80c26f8:	425b      	neglt	r3, r3
 80c26fa:	f042 0202 	orrlt.w	r2, r2, #2
 80c26fe:	9307      	strge	r3, [sp, #28]
 80c2700:	9307      	strlt	r3, [sp, #28]
 80c2702:	bfb8      	it	lt
 80c2704:	9204      	strlt	r2, [sp, #16]
 80c2706:	7823      	ldrb	r3, [r4, #0]
 80c2708:	2b2e      	cmp	r3, #46	; 0x2e
 80c270a:	d10c      	bne.n	80c2726 <_vfiprintf_r+0x176>
 80c270c:	7863      	ldrb	r3, [r4, #1]
 80c270e:	2b2a      	cmp	r3, #42	; 0x2a
 80c2710:	d135      	bne.n	80c277e <_vfiprintf_r+0x1ce>
 80c2712:	9b03      	ldr	r3, [sp, #12]
 80c2714:	1d1a      	adds	r2, r3, #4
 80c2716:	681b      	ldr	r3, [r3, #0]
 80c2718:	9203      	str	r2, [sp, #12]
 80c271a:	2b00      	cmp	r3, #0
 80c271c:	bfb8      	it	lt
 80c271e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80c2722:	3402      	adds	r4, #2
 80c2724:	9305      	str	r3, [sp, #20]
 80c2726:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80c280c <_vfiprintf_r+0x25c>
 80c272a:	7821      	ldrb	r1, [r4, #0]
 80c272c:	2203      	movs	r2, #3
 80c272e:	4650      	mov	r0, sl
 80c2730:	f7dd fd56 	bl	80a01e0 <memchr>
 80c2734:	b140      	cbz	r0, 80c2748 <_vfiprintf_r+0x198>
 80c2736:	2340      	movs	r3, #64	; 0x40
 80c2738:	eba0 000a 	sub.w	r0, r0, sl
 80c273c:	fa03 f000 	lsl.w	r0, r3, r0
 80c2740:	9b04      	ldr	r3, [sp, #16]
 80c2742:	4303      	orrs	r3, r0
 80c2744:	3401      	adds	r4, #1
 80c2746:	9304      	str	r3, [sp, #16]
 80c2748:	f814 1b01 	ldrb.w	r1, [r4], #1
 80c274c:	482c      	ldr	r0, [pc, #176]	; (80c2800 <_vfiprintf_r+0x250>)
 80c274e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80c2752:	2206      	movs	r2, #6
 80c2754:	f7dd fd44 	bl	80a01e0 <memchr>
 80c2758:	2800      	cmp	r0, #0
 80c275a:	d03f      	beq.n	80c27dc <_vfiprintf_r+0x22c>
 80c275c:	4b29      	ldr	r3, [pc, #164]	; (80c2804 <_vfiprintf_r+0x254>)
 80c275e:	bb1b      	cbnz	r3, 80c27a8 <_vfiprintf_r+0x1f8>
 80c2760:	9b03      	ldr	r3, [sp, #12]
 80c2762:	3307      	adds	r3, #7
 80c2764:	f023 0307 	bic.w	r3, r3, #7
 80c2768:	3308      	adds	r3, #8
 80c276a:	9303      	str	r3, [sp, #12]
 80c276c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80c276e:	443b      	add	r3, r7
 80c2770:	9309      	str	r3, [sp, #36]	; 0x24
 80c2772:	e767      	b.n	80c2644 <_vfiprintf_r+0x94>
 80c2774:	fb0c 3202 	mla	r2, ip, r2, r3
 80c2778:	460c      	mov	r4, r1
 80c277a:	2001      	movs	r0, #1
 80c277c:	e7a5      	b.n	80c26ca <_vfiprintf_r+0x11a>
 80c277e:	2300      	movs	r3, #0
 80c2780:	3401      	adds	r4, #1
 80c2782:	9305      	str	r3, [sp, #20]
 80c2784:	4619      	mov	r1, r3
 80c2786:	f04f 0c0a 	mov.w	ip, #10
 80c278a:	4620      	mov	r0, r4
 80c278c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80c2790:	3a30      	subs	r2, #48	; 0x30
 80c2792:	2a09      	cmp	r2, #9
 80c2794:	d903      	bls.n	80c279e <_vfiprintf_r+0x1ee>
 80c2796:	2b00      	cmp	r3, #0
 80c2798:	d0c5      	beq.n	80c2726 <_vfiprintf_r+0x176>
 80c279a:	9105      	str	r1, [sp, #20]
 80c279c:	e7c3      	b.n	80c2726 <_vfiprintf_r+0x176>
 80c279e:	fb0c 2101 	mla	r1, ip, r1, r2
 80c27a2:	4604      	mov	r4, r0
 80c27a4:	2301      	movs	r3, #1
 80c27a6:	e7f0      	b.n	80c278a <_vfiprintf_r+0x1da>
 80c27a8:	ab03      	add	r3, sp, #12
 80c27aa:	9300      	str	r3, [sp, #0]
 80c27ac:	462a      	mov	r2, r5
 80c27ae:	4b16      	ldr	r3, [pc, #88]	; (80c2808 <_vfiprintf_r+0x258>)
 80c27b0:	a904      	add	r1, sp, #16
 80c27b2:	4630      	mov	r0, r6
 80c27b4:	f7fd fd14 	bl	80c01e0 <_printf_float>
 80c27b8:	4607      	mov	r7, r0
 80c27ba:	1c78      	adds	r0, r7, #1
 80c27bc:	d1d6      	bne.n	80c276c <_vfiprintf_r+0x1bc>
 80c27be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80c27c0:	07d9      	lsls	r1, r3, #31
 80c27c2:	d405      	bmi.n	80c27d0 <_vfiprintf_r+0x220>
 80c27c4:	89ab      	ldrh	r3, [r5, #12]
 80c27c6:	059a      	lsls	r2, r3, #22
 80c27c8:	d402      	bmi.n	80c27d0 <_vfiprintf_r+0x220>
 80c27ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80c27cc:	f7ff fa7e 	bl	80c1ccc <__retarget_lock_release_recursive>
 80c27d0:	89ab      	ldrh	r3, [r5, #12]
 80c27d2:	065b      	lsls	r3, r3, #25
 80c27d4:	f53f af12 	bmi.w	80c25fc <_vfiprintf_r+0x4c>
 80c27d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80c27da:	e711      	b.n	80c2600 <_vfiprintf_r+0x50>
 80c27dc:	ab03      	add	r3, sp, #12
 80c27de:	9300      	str	r3, [sp, #0]
 80c27e0:	462a      	mov	r2, r5
 80c27e2:	4b09      	ldr	r3, [pc, #36]	; (80c2808 <_vfiprintf_r+0x258>)
 80c27e4:	a904      	add	r1, sp, #16
 80c27e6:	4630      	mov	r0, r6
 80c27e8:	f7fd ff9e 	bl	80c0728 <_printf_i>
 80c27ec:	e7e4      	b.n	80c27b8 <_vfiprintf_r+0x208>
 80c27ee:	bf00      	nop
 80c27f0:	080dd3a0 	.word	0x080dd3a0
 80c27f4:	080dd3c0 	.word	0x080dd3c0
 80c27f8:	080dd380 	.word	0x080dd380
 80c27fc:	080dd53c 	.word	0x080dd53c
 80c2800:	080dd546 	.word	0x080dd546
 80c2804:	080c01e1 	.word	0x080c01e1
 80c2808:	080c258b 	.word	0x080c258b
 80c280c:	080dd542 	.word	0x080dd542

080c2810 <_putc_r>:
 80c2810:	b570      	push	{r4, r5, r6, lr}
 80c2812:	460d      	mov	r5, r1
 80c2814:	4614      	mov	r4, r2
 80c2816:	4606      	mov	r6, r0
 80c2818:	b118      	cbz	r0, 80c2822 <_putc_r+0x12>
 80c281a:	6983      	ldr	r3, [r0, #24]
 80c281c:	b90b      	cbnz	r3, 80c2822 <_putc_r+0x12>
 80c281e:	f7ff f9b1 	bl	80c1b84 <__sinit>
 80c2822:	4b1c      	ldr	r3, [pc, #112]	; (80c2894 <_putc_r+0x84>)
 80c2824:	429c      	cmp	r4, r3
 80c2826:	d124      	bne.n	80c2872 <_putc_r+0x62>
 80c2828:	6874      	ldr	r4, [r6, #4]
 80c282a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80c282c:	07d8      	lsls	r0, r3, #31
 80c282e:	d405      	bmi.n	80c283c <_putc_r+0x2c>
 80c2830:	89a3      	ldrh	r3, [r4, #12]
 80c2832:	0599      	lsls	r1, r3, #22
 80c2834:	d402      	bmi.n	80c283c <_putc_r+0x2c>
 80c2836:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80c2838:	f7ff fa47 	bl	80c1cca <__retarget_lock_acquire_recursive>
 80c283c:	68a3      	ldr	r3, [r4, #8]
 80c283e:	3b01      	subs	r3, #1
 80c2840:	2b00      	cmp	r3, #0
 80c2842:	60a3      	str	r3, [r4, #8]
 80c2844:	da05      	bge.n	80c2852 <_putc_r+0x42>
 80c2846:	69a2      	ldr	r2, [r4, #24]
 80c2848:	4293      	cmp	r3, r2
 80c284a:	db1c      	blt.n	80c2886 <_putc_r+0x76>
 80c284c:	b2eb      	uxtb	r3, r5
 80c284e:	2b0a      	cmp	r3, #10
 80c2850:	d019      	beq.n	80c2886 <_putc_r+0x76>
 80c2852:	6823      	ldr	r3, [r4, #0]
 80c2854:	1c5a      	adds	r2, r3, #1
 80c2856:	6022      	str	r2, [r4, #0]
 80c2858:	701d      	strb	r5, [r3, #0]
 80c285a:	b2ed      	uxtb	r5, r5
 80c285c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80c285e:	07da      	lsls	r2, r3, #31
 80c2860:	d405      	bmi.n	80c286e <_putc_r+0x5e>
 80c2862:	89a3      	ldrh	r3, [r4, #12]
 80c2864:	059b      	lsls	r3, r3, #22
 80c2866:	d402      	bmi.n	80c286e <_putc_r+0x5e>
 80c2868:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80c286a:	f7ff fa2f 	bl	80c1ccc <__retarget_lock_release_recursive>
 80c286e:	4628      	mov	r0, r5
 80c2870:	bd70      	pop	{r4, r5, r6, pc}
 80c2872:	4b09      	ldr	r3, [pc, #36]	; (80c2898 <_putc_r+0x88>)
 80c2874:	429c      	cmp	r4, r3
 80c2876:	d101      	bne.n	80c287c <_putc_r+0x6c>
 80c2878:	68b4      	ldr	r4, [r6, #8]
 80c287a:	e7d6      	b.n	80c282a <_putc_r+0x1a>
 80c287c:	4b07      	ldr	r3, [pc, #28]	; (80c289c <_putc_r+0x8c>)
 80c287e:	429c      	cmp	r4, r3
 80c2880:	bf08      	it	eq
 80c2882:	68f4      	ldreq	r4, [r6, #12]
 80c2884:	e7d1      	b.n	80c282a <_putc_r+0x1a>
 80c2886:	4629      	mov	r1, r5
 80c2888:	4622      	mov	r2, r4
 80c288a:	4630      	mov	r0, r6
 80c288c:	f7fe f926 	bl	80c0adc <__swbuf_r>
 80c2890:	4605      	mov	r5, r0
 80c2892:	e7e3      	b.n	80c285c <_putc_r+0x4c>
 80c2894:	080dd3a0 	.word	0x080dd3a0
 80c2898:	080dd3c0 	.word	0x080dd3c0
 80c289c:	080dd380 	.word	0x080dd380

080c28a0 <__sread>:
 80c28a0:	b510      	push	{r4, lr}
 80c28a2:	460c      	mov	r4, r1
 80c28a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80c28a8:	f000 f8d6 	bl	80c2a58 <_read_r>
 80c28ac:	2800      	cmp	r0, #0
 80c28ae:	bfab      	itete	ge
 80c28b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80c28b2:	89a3      	ldrhlt	r3, [r4, #12]
 80c28b4:	181b      	addge	r3, r3, r0
 80c28b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80c28ba:	bfac      	ite	ge
 80c28bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80c28be:	81a3      	strhlt	r3, [r4, #12]
 80c28c0:	bd10      	pop	{r4, pc}

080c28c2 <__swrite>:
 80c28c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80c28c6:	461f      	mov	r7, r3
 80c28c8:	898b      	ldrh	r3, [r1, #12]
 80c28ca:	05db      	lsls	r3, r3, #23
 80c28cc:	4605      	mov	r5, r0
 80c28ce:	460c      	mov	r4, r1
 80c28d0:	4616      	mov	r6, r2
 80c28d2:	d505      	bpl.n	80c28e0 <__swrite+0x1e>
 80c28d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80c28d8:	2302      	movs	r3, #2
 80c28da:	2200      	movs	r2, #0
 80c28dc:	f000 f898 	bl	80c2a10 <_lseek_r>
 80c28e0:	89a3      	ldrh	r3, [r4, #12]
 80c28e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80c28e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80c28ea:	81a3      	strh	r3, [r4, #12]
 80c28ec:	4632      	mov	r2, r6
 80c28ee:	463b      	mov	r3, r7
 80c28f0:	4628      	mov	r0, r5
 80c28f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80c28f6:	f000 b817 	b.w	80c2928 <_write_r>

080c28fa <__sseek>:
 80c28fa:	b510      	push	{r4, lr}
 80c28fc:	460c      	mov	r4, r1
 80c28fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80c2902:	f000 f885 	bl	80c2a10 <_lseek_r>
 80c2906:	1c43      	adds	r3, r0, #1
 80c2908:	89a3      	ldrh	r3, [r4, #12]
 80c290a:	bf15      	itete	ne
 80c290c:	6560      	strne	r0, [r4, #84]	; 0x54
 80c290e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80c2912:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80c2916:	81a3      	strheq	r3, [r4, #12]
 80c2918:	bf18      	it	ne
 80c291a:	81a3      	strhne	r3, [r4, #12]
 80c291c:	bd10      	pop	{r4, pc}

080c291e <__sclose>:
 80c291e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80c2922:	f000 b831 	b.w	80c2988 <_close_r>
	...

080c2928 <_write_r>:
 80c2928:	b538      	push	{r3, r4, r5, lr}
 80c292a:	4d07      	ldr	r5, [pc, #28]	; (80c2948 <_write_r+0x20>)
 80c292c:	4604      	mov	r4, r0
 80c292e:	4608      	mov	r0, r1
 80c2930:	4611      	mov	r1, r2
 80c2932:	2200      	movs	r2, #0
 80c2934:	602a      	str	r2, [r5, #0]
 80c2936:	461a      	mov	r2, r3
 80c2938:	f7eb fc79 	bl	80ae22e <_write>
 80c293c:	1c43      	adds	r3, r0, #1
 80c293e:	d102      	bne.n	80c2946 <_write_r+0x1e>
 80c2940:	682b      	ldr	r3, [r5, #0]
 80c2942:	b103      	cbz	r3, 80c2946 <_write_r+0x1e>
 80c2944:	6023      	str	r3, [r4, #0]
 80c2946:	bd38      	pop	{r3, r4, r5, pc}
 80c2948:	2001c390 	.word	0x2001c390

080c294c <__assert_func>:
 80c294c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80c294e:	4614      	mov	r4, r2
 80c2950:	461a      	mov	r2, r3
 80c2952:	4b09      	ldr	r3, [pc, #36]	; (80c2978 <__assert_func+0x2c>)
 80c2954:	681b      	ldr	r3, [r3, #0]
 80c2956:	4605      	mov	r5, r0
 80c2958:	68d8      	ldr	r0, [r3, #12]
 80c295a:	b14c      	cbz	r4, 80c2970 <__assert_func+0x24>
 80c295c:	4b07      	ldr	r3, [pc, #28]	; (80c297c <__assert_func+0x30>)
 80c295e:	9100      	str	r1, [sp, #0]
 80c2960:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80c2964:	4906      	ldr	r1, [pc, #24]	; (80c2980 <__assert_func+0x34>)
 80c2966:	462b      	mov	r3, r5
 80c2968:	f000 f81e 	bl	80c29a8 <fiprintf>
 80c296c:	f000 f893 	bl	80c2a96 <abort>
 80c2970:	4b04      	ldr	r3, [pc, #16]	; (80c2984 <__assert_func+0x38>)
 80c2972:	461c      	mov	r4, r3
 80c2974:	e7f3      	b.n	80c295e <__assert_func+0x12>
 80c2976:	bf00      	nop
 80c2978:	20007cc0 	.word	0x20007cc0
 80c297c:	080dd54d 	.word	0x080dd54d
 80c2980:	080dd55a 	.word	0x080dd55a
 80c2984:	080dd588 	.word	0x080dd588

080c2988 <_close_r>:
 80c2988:	b538      	push	{r3, r4, r5, lr}
 80c298a:	4d06      	ldr	r5, [pc, #24]	; (80c29a4 <_close_r+0x1c>)
 80c298c:	2300      	movs	r3, #0
 80c298e:	4604      	mov	r4, r0
 80c2990:	4608      	mov	r0, r1
 80c2992:	602b      	str	r3, [r5, #0]
 80c2994:	f7eb fc67 	bl	80ae266 <_close>
 80c2998:	1c43      	adds	r3, r0, #1
 80c299a:	d102      	bne.n	80c29a2 <_close_r+0x1a>
 80c299c:	682b      	ldr	r3, [r5, #0]
 80c299e:	b103      	cbz	r3, 80c29a2 <_close_r+0x1a>
 80c29a0:	6023      	str	r3, [r4, #0]
 80c29a2:	bd38      	pop	{r3, r4, r5, pc}
 80c29a4:	2001c390 	.word	0x2001c390

080c29a8 <fiprintf>:
 80c29a8:	b40e      	push	{r1, r2, r3}
 80c29aa:	b503      	push	{r0, r1, lr}
 80c29ac:	4601      	mov	r1, r0
 80c29ae:	ab03      	add	r3, sp, #12
 80c29b0:	4805      	ldr	r0, [pc, #20]	; (80c29c8 <fiprintf+0x20>)
 80c29b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80c29b6:	6800      	ldr	r0, [r0, #0]
 80c29b8:	9301      	str	r3, [sp, #4]
 80c29ba:	f7ff fdf9 	bl	80c25b0 <_vfiprintf_r>
 80c29be:	b002      	add	sp, #8
 80c29c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80c29c4:	b003      	add	sp, #12
 80c29c6:	4770      	bx	lr
 80c29c8:	20007cc0 	.word	0x20007cc0

080c29cc <_fstat_r>:
 80c29cc:	b538      	push	{r3, r4, r5, lr}
 80c29ce:	4d07      	ldr	r5, [pc, #28]	; (80c29ec <_fstat_r+0x20>)
 80c29d0:	2300      	movs	r3, #0
 80c29d2:	4604      	mov	r4, r0
 80c29d4:	4608      	mov	r0, r1
 80c29d6:	4611      	mov	r1, r2
 80c29d8:	602b      	str	r3, [r5, #0]
 80c29da:	f7eb fc50 	bl	80ae27e <_fstat>
 80c29de:	1c43      	adds	r3, r0, #1
 80c29e0:	d102      	bne.n	80c29e8 <_fstat_r+0x1c>
 80c29e2:	682b      	ldr	r3, [r5, #0]
 80c29e4:	b103      	cbz	r3, 80c29e8 <_fstat_r+0x1c>
 80c29e6:	6023      	str	r3, [r4, #0]
 80c29e8:	bd38      	pop	{r3, r4, r5, pc}
 80c29ea:	bf00      	nop
 80c29ec:	2001c390 	.word	0x2001c390

080c29f0 <_isatty_r>:
 80c29f0:	b538      	push	{r3, r4, r5, lr}
 80c29f2:	4d06      	ldr	r5, [pc, #24]	; (80c2a0c <_isatty_r+0x1c>)
 80c29f4:	2300      	movs	r3, #0
 80c29f6:	4604      	mov	r4, r0
 80c29f8:	4608      	mov	r0, r1
 80c29fa:	602b      	str	r3, [r5, #0]
 80c29fc:	f7eb fc4f 	bl	80ae29e <_isatty>
 80c2a00:	1c43      	adds	r3, r0, #1
 80c2a02:	d102      	bne.n	80c2a0a <_isatty_r+0x1a>
 80c2a04:	682b      	ldr	r3, [r5, #0]
 80c2a06:	b103      	cbz	r3, 80c2a0a <_isatty_r+0x1a>
 80c2a08:	6023      	str	r3, [r4, #0]
 80c2a0a:	bd38      	pop	{r3, r4, r5, pc}
 80c2a0c:	2001c390 	.word	0x2001c390

080c2a10 <_lseek_r>:
 80c2a10:	b538      	push	{r3, r4, r5, lr}
 80c2a12:	4d07      	ldr	r5, [pc, #28]	; (80c2a30 <_lseek_r+0x20>)
 80c2a14:	4604      	mov	r4, r0
 80c2a16:	4608      	mov	r0, r1
 80c2a18:	4611      	mov	r1, r2
 80c2a1a:	2200      	movs	r2, #0
 80c2a1c:	602a      	str	r2, [r5, #0]
 80c2a1e:	461a      	mov	r2, r3
 80c2a20:	f7eb fc48 	bl	80ae2b4 <_lseek>
 80c2a24:	1c43      	adds	r3, r0, #1
 80c2a26:	d102      	bne.n	80c2a2e <_lseek_r+0x1e>
 80c2a28:	682b      	ldr	r3, [r5, #0]
 80c2a2a:	b103      	cbz	r3, 80c2a2e <_lseek_r+0x1e>
 80c2a2c:	6023      	str	r3, [r4, #0]
 80c2a2e:	bd38      	pop	{r3, r4, r5, pc}
 80c2a30:	2001c390 	.word	0x2001c390

080c2a34 <__ascii_mbtowc>:
 80c2a34:	b082      	sub	sp, #8
 80c2a36:	b901      	cbnz	r1, 80c2a3a <__ascii_mbtowc+0x6>
 80c2a38:	a901      	add	r1, sp, #4
 80c2a3a:	b142      	cbz	r2, 80c2a4e <__ascii_mbtowc+0x1a>
 80c2a3c:	b14b      	cbz	r3, 80c2a52 <__ascii_mbtowc+0x1e>
 80c2a3e:	7813      	ldrb	r3, [r2, #0]
 80c2a40:	600b      	str	r3, [r1, #0]
 80c2a42:	7812      	ldrb	r2, [r2, #0]
 80c2a44:	1e10      	subs	r0, r2, #0
 80c2a46:	bf18      	it	ne
 80c2a48:	2001      	movne	r0, #1
 80c2a4a:	b002      	add	sp, #8
 80c2a4c:	4770      	bx	lr
 80c2a4e:	4610      	mov	r0, r2
 80c2a50:	e7fb      	b.n	80c2a4a <__ascii_mbtowc+0x16>
 80c2a52:	f06f 0001 	mvn.w	r0, #1
 80c2a56:	e7f8      	b.n	80c2a4a <__ascii_mbtowc+0x16>

080c2a58 <_read_r>:
 80c2a58:	b538      	push	{r3, r4, r5, lr}
 80c2a5a:	4d07      	ldr	r5, [pc, #28]	; (80c2a78 <_read_r+0x20>)
 80c2a5c:	4604      	mov	r4, r0
 80c2a5e:	4608      	mov	r0, r1
 80c2a60:	4611      	mov	r1, r2
 80c2a62:	2200      	movs	r2, #0
 80c2a64:	602a      	str	r2, [r5, #0]
 80c2a66:	461a      	mov	r2, r3
 80c2a68:	f7eb fbc4 	bl	80ae1f4 <_read>
 80c2a6c:	1c43      	adds	r3, r0, #1
 80c2a6e:	d102      	bne.n	80c2a76 <_read_r+0x1e>
 80c2a70:	682b      	ldr	r3, [r5, #0]
 80c2a72:	b103      	cbz	r3, 80c2a76 <_read_r+0x1e>
 80c2a74:	6023      	str	r3, [r4, #0]
 80c2a76:	bd38      	pop	{r3, r4, r5, pc}
 80c2a78:	2001c390 	.word	0x2001c390

080c2a7c <__ascii_wctomb>:
 80c2a7c:	b149      	cbz	r1, 80c2a92 <__ascii_wctomb+0x16>
 80c2a7e:	2aff      	cmp	r2, #255	; 0xff
 80c2a80:	bf85      	ittet	hi
 80c2a82:	238a      	movhi	r3, #138	; 0x8a
 80c2a84:	6003      	strhi	r3, [r0, #0]
 80c2a86:	700a      	strbls	r2, [r1, #0]
 80c2a88:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80c2a8c:	bf98      	it	ls
 80c2a8e:	2001      	movls	r0, #1
 80c2a90:	4770      	bx	lr
 80c2a92:	4608      	mov	r0, r1
 80c2a94:	4770      	bx	lr

080c2a96 <abort>:
 80c2a96:	b508      	push	{r3, lr}
 80c2a98:	2006      	movs	r0, #6
 80c2a9a:	f000 f82b 	bl	80c2af4 <raise>
 80c2a9e:	2001      	movs	r0, #1
 80c2aa0:	f7eb fb9e 	bl	80ae1e0 <_exit>

080c2aa4 <_raise_r>:
 80c2aa4:	291f      	cmp	r1, #31
 80c2aa6:	b538      	push	{r3, r4, r5, lr}
 80c2aa8:	4604      	mov	r4, r0
 80c2aaa:	460d      	mov	r5, r1
 80c2aac:	d904      	bls.n	80c2ab8 <_raise_r+0x14>
 80c2aae:	2316      	movs	r3, #22
 80c2ab0:	6003      	str	r3, [r0, #0]
 80c2ab2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80c2ab6:	bd38      	pop	{r3, r4, r5, pc}
 80c2ab8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80c2aba:	b112      	cbz	r2, 80c2ac2 <_raise_r+0x1e>
 80c2abc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80c2ac0:	b94b      	cbnz	r3, 80c2ad6 <_raise_r+0x32>
 80c2ac2:	4620      	mov	r0, r4
 80c2ac4:	f000 f830 	bl	80c2b28 <_getpid_r>
 80c2ac8:	462a      	mov	r2, r5
 80c2aca:	4601      	mov	r1, r0
 80c2acc:	4620      	mov	r0, r4
 80c2ace:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80c2ad2:	f000 b817 	b.w	80c2b04 <_kill_r>
 80c2ad6:	2b01      	cmp	r3, #1
 80c2ad8:	d00a      	beq.n	80c2af0 <_raise_r+0x4c>
 80c2ada:	1c59      	adds	r1, r3, #1
 80c2adc:	d103      	bne.n	80c2ae6 <_raise_r+0x42>
 80c2ade:	2316      	movs	r3, #22
 80c2ae0:	6003      	str	r3, [r0, #0]
 80c2ae2:	2001      	movs	r0, #1
 80c2ae4:	e7e7      	b.n	80c2ab6 <_raise_r+0x12>
 80c2ae6:	2400      	movs	r4, #0
 80c2ae8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80c2aec:	4628      	mov	r0, r5
 80c2aee:	4798      	blx	r3
 80c2af0:	2000      	movs	r0, #0
 80c2af2:	e7e0      	b.n	80c2ab6 <_raise_r+0x12>

080c2af4 <raise>:
 80c2af4:	4b02      	ldr	r3, [pc, #8]	; (80c2b00 <raise+0xc>)
 80c2af6:	4601      	mov	r1, r0
 80c2af8:	6818      	ldr	r0, [r3, #0]
 80c2afa:	f7ff bfd3 	b.w	80c2aa4 <_raise_r>
 80c2afe:	bf00      	nop
 80c2b00:	20007cc0 	.word	0x20007cc0

080c2b04 <_kill_r>:
 80c2b04:	b538      	push	{r3, r4, r5, lr}
 80c2b06:	4d07      	ldr	r5, [pc, #28]	; (80c2b24 <_kill_r+0x20>)
 80c2b08:	2300      	movs	r3, #0
 80c2b0a:	4604      	mov	r4, r0
 80c2b0c:	4608      	mov	r0, r1
 80c2b0e:	4611      	mov	r1, r2
 80c2b10:	602b      	str	r3, [r5, #0]
 80c2b12:	f7eb fb55 	bl	80ae1c0 <_kill>
 80c2b16:	1c43      	adds	r3, r0, #1
 80c2b18:	d102      	bne.n	80c2b20 <_kill_r+0x1c>
 80c2b1a:	682b      	ldr	r3, [r5, #0]
 80c2b1c:	b103      	cbz	r3, 80c2b20 <_kill_r+0x1c>
 80c2b1e:	6023      	str	r3, [r4, #0]
 80c2b20:	bd38      	pop	{r3, r4, r5, pc}
 80c2b22:	bf00      	nop
 80c2b24:	2001c390 	.word	0x2001c390

080c2b28 <_getpid_r>:
 80c2b28:	f7eb bb42 	b.w	80ae1b0 <_getpid>

080c2b2c <cosf>:
 80c2b2c:	ee10 3a10 	vmov	r3, s0
 80c2b30:	b507      	push	{r0, r1, r2, lr}
 80c2b32:	4a1c      	ldr	r2, [pc, #112]	; (80c2ba4 <cosf+0x78>)
 80c2b34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80c2b38:	4293      	cmp	r3, r2
 80c2b3a:	dc04      	bgt.n	80c2b46 <cosf+0x1a>
 80c2b3c:	eddf 0a1a 	vldr	s1, [pc, #104]	; 80c2ba8 <cosf+0x7c>
 80c2b40:	f001 fa1a 	bl	80c3f78 <__kernel_cosf>
 80c2b44:	e004      	b.n	80c2b50 <cosf+0x24>
 80c2b46:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80c2b4a:	db04      	blt.n	80c2b56 <cosf+0x2a>
 80c2b4c:	ee30 0a40 	vsub.f32	s0, s0, s0
 80c2b50:	b003      	add	sp, #12
 80c2b52:	f85d fb04 	ldr.w	pc, [sp], #4
 80c2b56:	4668      	mov	r0, sp
 80c2b58:	f001 f8ce 	bl	80c3cf8 <__ieee754_rem_pio2f>
 80c2b5c:	f000 0003 	and.w	r0, r0, #3
 80c2b60:	2801      	cmp	r0, #1
 80c2b62:	d007      	beq.n	80c2b74 <cosf+0x48>
 80c2b64:	2802      	cmp	r0, #2
 80c2b66:	d00e      	beq.n	80c2b86 <cosf+0x5a>
 80c2b68:	b9a0      	cbnz	r0, 80c2b94 <cosf+0x68>
 80c2b6a:	eddd 0a01 	vldr	s1, [sp, #4]
 80c2b6e:	ed9d 0a00 	vldr	s0, [sp]
 80c2b72:	e7e5      	b.n	80c2b40 <cosf+0x14>
 80c2b74:	eddd 0a01 	vldr	s1, [sp, #4]
 80c2b78:	ed9d 0a00 	vldr	s0, [sp]
 80c2b7c:	f001 fce6 	bl	80c454c <__kernel_sinf>
 80c2b80:	eeb1 0a40 	vneg.f32	s0, s0
 80c2b84:	e7e4      	b.n	80c2b50 <cosf+0x24>
 80c2b86:	eddd 0a01 	vldr	s1, [sp, #4]
 80c2b8a:	ed9d 0a00 	vldr	s0, [sp]
 80c2b8e:	f001 f9f3 	bl	80c3f78 <__kernel_cosf>
 80c2b92:	e7f5      	b.n	80c2b80 <cosf+0x54>
 80c2b94:	eddd 0a01 	vldr	s1, [sp, #4]
 80c2b98:	ed9d 0a00 	vldr	s0, [sp]
 80c2b9c:	2001      	movs	r0, #1
 80c2b9e:	f001 fcd5 	bl	80c454c <__kernel_sinf>
 80c2ba2:	e7d5      	b.n	80c2b50 <cosf+0x24>
 80c2ba4:	3f490fd8 	.word	0x3f490fd8
 80c2ba8:	00000000 	.word	0x00000000

080c2bac <sinf>:
 80c2bac:	ee10 3a10 	vmov	r3, s0
 80c2bb0:	b507      	push	{r0, r1, r2, lr}
 80c2bb2:	4a1d      	ldr	r2, [pc, #116]	; (80c2c28 <sinf+0x7c>)
 80c2bb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80c2bb8:	4293      	cmp	r3, r2
 80c2bba:	dc05      	bgt.n	80c2bc8 <sinf+0x1c>
 80c2bbc:	eddf 0a1b 	vldr	s1, [pc, #108]	; 80c2c2c <sinf+0x80>
 80c2bc0:	2000      	movs	r0, #0
 80c2bc2:	f001 fcc3 	bl	80c454c <__kernel_sinf>
 80c2bc6:	e004      	b.n	80c2bd2 <sinf+0x26>
 80c2bc8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80c2bcc:	db04      	blt.n	80c2bd8 <sinf+0x2c>
 80c2bce:	ee30 0a40 	vsub.f32	s0, s0, s0
 80c2bd2:	b003      	add	sp, #12
 80c2bd4:	f85d fb04 	ldr.w	pc, [sp], #4
 80c2bd8:	4668      	mov	r0, sp
 80c2bda:	f001 f88d 	bl	80c3cf8 <__ieee754_rem_pio2f>
 80c2bde:	f000 0003 	and.w	r0, r0, #3
 80c2be2:	2801      	cmp	r0, #1
 80c2be4:	d008      	beq.n	80c2bf8 <sinf+0x4c>
 80c2be6:	2802      	cmp	r0, #2
 80c2be8:	d00d      	beq.n	80c2c06 <sinf+0x5a>
 80c2bea:	b9b0      	cbnz	r0, 80c2c1a <sinf+0x6e>
 80c2bec:	eddd 0a01 	vldr	s1, [sp, #4]
 80c2bf0:	ed9d 0a00 	vldr	s0, [sp]
 80c2bf4:	2001      	movs	r0, #1
 80c2bf6:	e7e4      	b.n	80c2bc2 <sinf+0x16>
 80c2bf8:	eddd 0a01 	vldr	s1, [sp, #4]
 80c2bfc:	ed9d 0a00 	vldr	s0, [sp]
 80c2c00:	f001 f9ba 	bl	80c3f78 <__kernel_cosf>
 80c2c04:	e7e5      	b.n	80c2bd2 <sinf+0x26>
 80c2c06:	eddd 0a01 	vldr	s1, [sp, #4]
 80c2c0a:	ed9d 0a00 	vldr	s0, [sp]
 80c2c0e:	2001      	movs	r0, #1
 80c2c10:	f001 fc9c 	bl	80c454c <__kernel_sinf>
 80c2c14:	eeb1 0a40 	vneg.f32	s0, s0
 80c2c18:	e7db      	b.n	80c2bd2 <sinf+0x26>
 80c2c1a:	eddd 0a01 	vldr	s1, [sp, #4]
 80c2c1e:	ed9d 0a00 	vldr	s0, [sp]
 80c2c22:	f001 f9a9 	bl	80c3f78 <__kernel_cosf>
 80c2c26:	e7f5      	b.n	80c2c14 <sinf+0x68>
 80c2c28:	3f490fd8 	.word	0x3f490fd8
 80c2c2c:	00000000 	.word	0x00000000

080c2c30 <pow>:
 80c2c30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80c2c34:	ec59 8b10 	vmov	r8, r9, d0
 80c2c38:	ec57 6b11 	vmov	r6, r7, d1
 80c2c3c:	f000 f900 	bl	80c2e40 <__ieee754_pow>
 80c2c40:	4b4e      	ldr	r3, [pc, #312]	; (80c2d7c <pow+0x14c>)
 80c2c42:	f993 3000 	ldrsb.w	r3, [r3]
 80c2c46:	3301      	adds	r3, #1
 80c2c48:	ec55 4b10 	vmov	r4, r5, d0
 80c2c4c:	d015      	beq.n	80c2c7a <pow+0x4a>
 80c2c4e:	4632      	mov	r2, r6
 80c2c50:	463b      	mov	r3, r7
 80c2c52:	4630      	mov	r0, r6
 80c2c54:	4639      	mov	r1, r7
 80c2c56:	f7dd ff69 	bl	80a0b2c <__aeabi_dcmpun>
 80c2c5a:	b970      	cbnz	r0, 80c2c7a <pow+0x4a>
 80c2c5c:	4642      	mov	r2, r8
 80c2c5e:	464b      	mov	r3, r9
 80c2c60:	4640      	mov	r0, r8
 80c2c62:	4649      	mov	r1, r9
 80c2c64:	f7dd ff62 	bl	80a0b2c <__aeabi_dcmpun>
 80c2c68:	2200      	movs	r2, #0
 80c2c6a:	2300      	movs	r3, #0
 80c2c6c:	b148      	cbz	r0, 80c2c82 <pow+0x52>
 80c2c6e:	4630      	mov	r0, r6
 80c2c70:	4639      	mov	r1, r7
 80c2c72:	f7dd ff29 	bl	80a0ac8 <__aeabi_dcmpeq>
 80c2c76:	2800      	cmp	r0, #0
 80c2c78:	d17d      	bne.n	80c2d76 <pow+0x146>
 80c2c7a:	ec45 4b10 	vmov	d0, r4, r5
 80c2c7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80c2c82:	4640      	mov	r0, r8
 80c2c84:	4649      	mov	r1, r9
 80c2c86:	f7dd ff1f 	bl	80a0ac8 <__aeabi_dcmpeq>
 80c2c8a:	b1e0      	cbz	r0, 80c2cc6 <pow+0x96>
 80c2c8c:	2200      	movs	r2, #0
 80c2c8e:	2300      	movs	r3, #0
 80c2c90:	4630      	mov	r0, r6
 80c2c92:	4639      	mov	r1, r7
 80c2c94:	f7dd ff18 	bl	80a0ac8 <__aeabi_dcmpeq>
 80c2c98:	2800      	cmp	r0, #0
 80c2c9a:	d16c      	bne.n	80c2d76 <pow+0x146>
 80c2c9c:	ec47 6b10 	vmov	d0, r6, r7
 80c2ca0:	f001 fca5 	bl	80c45ee <finite>
 80c2ca4:	2800      	cmp	r0, #0
 80c2ca6:	d0e8      	beq.n	80c2c7a <pow+0x4a>
 80c2ca8:	2200      	movs	r2, #0
 80c2caa:	2300      	movs	r3, #0
 80c2cac:	4630      	mov	r0, r6
 80c2cae:	4639      	mov	r1, r7
 80c2cb0:	f7dd ff14 	bl	80a0adc <__aeabi_dcmplt>
 80c2cb4:	2800      	cmp	r0, #0
 80c2cb6:	d0e0      	beq.n	80c2c7a <pow+0x4a>
 80c2cb8:	f7fd f948 	bl	80bff4c <__errno>
 80c2cbc:	2321      	movs	r3, #33	; 0x21
 80c2cbe:	6003      	str	r3, [r0, #0]
 80c2cc0:	2400      	movs	r4, #0
 80c2cc2:	4d2f      	ldr	r5, [pc, #188]	; (80c2d80 <pow+0x150>)
 80c2cc4:	e7d9      	b.n	80c2c7a <pow+0x4a>
 80c2cc6:	ec45 4b10 	vmov	d0, r4, r5
 80c2cca:	f001 fc90 	bl	80c45ee <finite>
 80c2cce:	bbb8      	cbnz	r0, 80c2d40 <pow+0x110>
 80c2cd0:	ec49 8b10 	vmov	d0, r8, r9
 80c2cd4:	f001 fc8b 	bl	80c45ee <finite>
 80c2cd8:	b390      	cbz	r0, 80c2d40 <pow+0x110>
 80c2cda:	ec47 6b10 	vmov	d0, r6, r7
 80c2cde:	f001 fc86 	bl	80c45ee <finite>
 80c2ce2:	b368      	cbz	r0, 80c2d40 <pow+0x110>
 80c2ce4:	4622      	mov	r2, r4
 80c2ce6:	462b      	mov	r3, r5
 80c2ce8:	4620      	mov	r0, r4
 80c2cea:	4629      	mov	r1, r5
 80c2cec:	f7dd ff1e 	bl	80a0b2c <__aeabi_dcmpun>
 80c2cf0:	b160      	cbz	r0, 80c2d0c <pow+0xdc>
 80c2cf2:	f7fd f92b 	bl	80bff4c <__errno>
 80c2cf6:	2321      	movs	r3, #33	; 0x21
 80c2cf8:	6003      	str	r3, [r0, #0]
 80c2cfa:	2200      	movs	r2, #0
 80c2cfc:	2300      	movs	r3, #0
 80c2cfe:	4610      	mov	r0, r2
 80c2d00:	4619      	mov	r1, r3
 80c2d02:	f7dd fda3 	bl	80a084c <__aeabi_ddiv>
 80c2d06:	4604      	mov	r4, r0
 80c2d08:	460d      	mov	r5, r1
 80c2d0a:	e7b6      	b.n	80c2c7a <pow+0x4a>
 80c2d0c:	f7fd f91e 	bl	80bff4c <__errno>
 80c2d10:	2322      	movs	r3, #34	; 0x22
 80c2d12:	6003      	str	r3, [r0, #0]
 80c2d14:	2200      	movs	r2, #0
 80c2d16:	2300      	movs	r3, #0
 80c2d18:	4640      	mov	r0, r8
 80c2d1a:	4649      	mov	r1, r9
 80c2d1c:	f7dd fede 	bl	80a0adc <__aeabi_dcmplt>
 80c2d20:	2400      	movs	r4, #0
 80c2d22:	b158      	cbz	r0, 80c2d3c <pow+0x10c>
 80c2d24:	ec47 6b10 	vmov	d0, r6, r7
 80c2d28:	f001 fc76 	bl	80c4618 <rint>
 80c2d2c:	4632      	mov	r2, r6
 80c2d2e:	ec51 0b10 	vmov	r0, r1, d0
 80c2d32:	463b      	mov	r3, r7
 80c2d34:	f7dd fec8 	bl	80a0ac8 <__aeabi_dcmpeq>
 80c2d38:	2800      	cmp	r0, #0
 80c2d3a:	d0c2      	beq.n	80c2cc2 <pow+0x92>
 80c2d3c:	4d11      	ldr	r5, [pc, #68]	; (80c2d84 <pow+0x154>)
 80c2d3e:	e79c      	b.n	80c2c7a <pow+0x4a>
 80c2d40:	2200      	movs	r2, #0
 80c2d42:	2300      	movs	r3, #0
 80c2d44:	4620      	mov	r0, r4
 80c2d46:	4629      	mov	r1, r5
 80c2d48:	f7dd febe 	bl	80a0ac8 <__aeabi_dcmpeq>
 80c2d4c:	2800      	cmp	r0, #0
 80c2d4e:	d094      	beq.n	80c2c7a <pow+0x4a>
 80c2d50:	ec49 8b10 	vmov	d0, r8, r9
 80c2d54:	f001 fc4b 	bl	80c45ee <finite>
 80c2d58:	2800      	cmp	r0, #0
 80c2d5a:	d08e      	beq.n	80c2c7a <pow+0x4a>
 80c2d5c:	ec47 6b10 	vmov	d0, r6, r7
 80c2d60:	f001 fc45 	bl	80c45ee <finite>
 80c2d64:	2800      	cmp	r0, #0
 80c2d66:	d088      	beq.n	80c2c7a <pow+0x4a>
 80c2d68:	f7fd f8f0 	bl	80bff4c <__errno>
 80c2d6c:	2322      	movs	r3, #34	; 0x22
 80c2d6e:	6003      	str	r3, [r0, #0]
 80c2d70:	2400      	movs	r4, #0
 80c2d72:	2500      	movs	r5, #0
 80c2d74:	e781      	b.n	80c2c7a <pow+0x4a>
 80c2d76:	4d04      	ldr	r5, [pc, #16]	; (80c2d88 <pow+0x158>)
 80c2d78:	2400      	movs	r4, #0
 80c2d7a:	e77e      	b.n	80c2c7a <pow+0x4a>
 80c2d7c:	20007e90 	.word	0x20007e90
 80c2d80:	fff00000 	.word	0xfff00000
 80c2d84:	7ff00000 	.word	0x7ff00000
 80c2d88:	3ff00000 	.word	0x3ff00000

080c2d8c <asinf>:
 80c2d8c:	b508      	push	{r3, lr}
 80c2d8e:	ed2d 8b02 	vpush	{d8}
 80c2d92:	eeb0 8a40 	vmov.f32	s16, s0
 80c2d96:	f000 fe29 	bl	80c39ec <__ieee754_asinf>
 80c2d9a:	4b13      	ldr	r3, [pc, #76]	; (80c2de8 <asinf+0x5c>)
 80c2d9c:	f993 3000 	ldrsb.w	r3, [r3]
 80c2da0:	3301      	adds	r3, #1
 80c2da2:	eef0 8a40 	vmov.f32	s17, s0
 80c2da6:	d01a      	beq.n	80c2dde <asinf+0x52>
 80c2da8:	eeb4 8a48 	vcmp.f32	s16, s16
 80c2dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80c2db0:	d615      	bvs.n	80c2dde <asinf+0x52>
 80c2db2:	eeb0 0a48 	vmov.f32	s0, s16
 80c2db6:	f001 fe15 	bl	80c49e4 <fabsf>
 80c2dba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80c2dbe:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80c2dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80c2dc6:	dd0a      	ble.n	80c2dde <asinf+0x52>
 80c2dc8:	f7fd f8c0 	bl	80bff4c <__errno>
 80c2dcc:	ecbd 8b02 	vpop	{d8}
 80c2dd0:	2321      	movs	r3, #33	; 0x21
 80c2dd2:	6003      	str	r3, [r0, #0]
 80c2dd4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80c2dd8:	4804      	ldr	r0, [pc, #16]	; (80c2dec <asinf+0x60>)
 80c2dda:	f001 be4d 	b.w	80c4a78 <nanf>
 80c2dde:	eeb0 0a68 	vmov.f32	s0, s17
 80c2de2:	ecbd 8b02 	vpop	{d8}
 80c2de6:	bd08      	pop	{r3, pc}
 80c2de8:	20007e90 	.word	0x20007e90
 80c2dec:	080dd588 	.word	0x080dd588

080c2df0 <atan2f>:
 80c2df0:	f000 bee2 	b.w	80c3bb8 <__ieee754_atan2f>

080c2df4 <sqrtf>:
 80c2df4:	b508      	push	{r3, lr}
 80c2df6:	ed2d 8b02 	vpush	{d8}
 80c2dfa:	eeb0 8a40 	vmov.f32	s16, s0
 80c2dfe:	f001 f8b7 	bl	80c3f70 <__ieee754_sqrtf>
 80c2e02:	4b0d      	ldr	r3, [pc, #52]	; (80c2e38 <sqrtf+0x44>)
 80c2e04:	f993 3000 	ldrsb.w	r3, [r3]
 80c2e08:	3301      	adds	r3, #1
 80c2e0a:	d011      	beq.n	80c2e30 <sqrtf+0x3c>
 80c2e0c:	eeb4 8a48 	vcmp.f32	s16, s16
 80c2e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80c2e14:	d60c      	bvs.n	80c2e30 <sqrtf+0x3c>
 80c2e16:	eddf 8a09 	vldr	s17, [pc, #36]	; 80c2e3c <sqrtf+0x48>
 80c2e1a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80c2e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80c2e22:	d505      	bpl.n	80c2e30 <sqrtf+0x3c>
 80c2e24:	f7fd f892 	bl	80bff4c <__errno>
 80c2e28:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80c2e2c:	2321      	movs	r3, #33	; 0x21
 80c2e2e:	6003      	str	r3, [r0, #0]
 80c2e30:	ecbd 8b02 	vpop	{d8}
 80c2e34:	bd08      	pop	{r3, pc}
 80c2e36:	bf00      	nop
 80c2e38:	20007e90 	.word	0x20007e90
 80c2e3c:	00000000 	.word	0x00000000

080c2e40 <__ieee754_pow>:
 80c2e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80c2e44:	ed2d 8b06 	vpush	{d8-d10}
 80c2e48:	b08d      	sub	sp, #52	; 0x34
 80c2e4a:	ed8d 1b02 	vstr	d1, [sp, #8]
 80c2e4e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 80c2e52:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80c2e56:	ea56 0100 	orrs.w	r1, r6, r0
 80c2e5a:	ec53 2b10 	vmov	r2, r3, d0
 80c2e5e:	f000 84d1 	beq.w	80c3804 <__ieee754_pow+0x9c4>
 80c2e62:	497f      	ldr	r1, [pc, #508]	; (80c3060 <__ieee754_pow+0x220>)
 80c2e64:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80c2e68:	428c      	cmp	r4, r1
 80c2e6a:	ee10 8a10 	vmov	r8, s0
 80c2e6e:	4699      	mov	r9, r3
 80c2e70:	dc09      	bgt.n	80c2e86 <__ieee754_pow+0x46>
 80c2e72:	d103      	bne.n	80c2e7c <__ieee754_pow+0x3c>
 80c2e74:	b97a      	cbnz	r2, 80c2e96 <__ieee754_pow+0x56>
 80c2e76:	42a6      	cmp	r6, r4
 80c2e78:	dd02      	ble.n	80c2e80 <__ieee754_pow+0x40>
 80c2e7a:	e00c      	b.n	80c2e96 <__ieee754_pow+0x56>
 80c2e7c:	428e      	cmp	r6, r1
 80c2e7e:	dc02      	bgt.n	80c2e86 <__ieee754_pow+0x46>
 80c2e80:	428e      	cmp	r6, r1
 80c2e82:	d110      	bne.n	80c2ea6 <__ieee754_pow+0x66>
 80c2e84:	b178      	cbz	r0, 80c2ea6 <__ieee754_pow+0x66>
 80c2e86:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80c2e8a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80c2e8e:	ea54 0308 	orrs.w	r3, r4, r8
 80c2e92:	f000 84b7 	beq.w	80c3804 <__ieee754_pow+0x9c4>
 80c2e96:	4873      	ldr	r0, [pc, #460]	; (80c3064 <__ieee754_pow+0x224>)
 80c2e98:	b00d      	add	sp, #52	; 0x34
 80c2e9a:	ecbd 8b06 	vpop	{d8-d10}
 80c2e9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80c2ea2:	f001 bbb1 	b.w	80c4608 <nan>
 80c2ea6:	f1b9 0f00 	cmp.w	r9, #0
 80c2eaa:	da36      	bge.n	80c2f1a <__ieee754_pow+0xda>
 80c2eac:	496e      	ldr	r1, [pc, #440]	; (80c3068 <__ieee754_pow+0x228>)
 80c2eae:	428e      	cmp	r6, r1
 80c2eb0:	dc51      	bgt.n	80c2f56 <__ieee754_pow+0x116>
 80c2eb2:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 80c2eb6:	428e      	cmp	r6, r1
 80c2eb8:	f340 84af 	ble.w	80c381a <__ieee754_pow+0x9da>
 80c2ebc:	1531      	asrs	r1, r6, #20
 80c2ebe:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80c2ec2:	2914      	cmp	r1, #20
 80c2ec4:	dd0f      	ble.n	80c2ee6 <__ieee754_pow+0xa6>
 80c2ec6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 80c2eca:	fa20 fc01 	lsr.w	ip, r0, r1
 80c2ece:	fa0c f101 	lsl.w	r1, ip, r1
 80c2ed2:	4281      	cmp	r1, r0
 80c2ed4:	f040 84a1 	bne.w	80c381a <__ieee754_pow+0x9da>
 80c2ed8:	f00c 0c01 	and.w	ip, ip, #1
 80c2edc:	f1cc 0102 	rsb	r1, ip, #2
 80c2ee0:	9100      	str	r1, [sp, #0]
 80c2ee2:	b180      	cbz	r0, 80c2f06 <__ieee754_pow+0xc6>
 80c2ee4:	e059      	b.n	80c2f9a <__ieee754_pow+0x15a>
 80c2ee6:	2800      	cmp	r0, #0
 80c2ee8:	d155      	bne.n	80c2f96 <__ieee754_pow+0x156>
 80c2eea:	f1c1 0114 	rsb	r1, r1, #20
 80c2eee:	fa46 fc01 	asr.w	ip, r6, r1
 80c2ef2:	fa0c f101 	lsl.w	r1, ip, r1
 80c2ef6:	42b1      	cmp	r1, r6
 80c2ef8:	f040 848c 	bne.w	80c3814 <__ieee754_pow+0x9d4>
 80c2efc:	f00c 0c01 	and.w	ip, ip, #1
 80c2f00:	f1cc 0102 	rsb	r1, ip, #2
 80c2f04:	9100      	str	r1, [sp, #0]
 80c2f06:	4959      	ldr	r1, [pc, #356]	; (80c306c <__ieee754_pow+0x22c>)
 80c2f08:	428e      	cmp	r6, r1
 80c2f0a:	d12d      	bne.n	80c2f68 <__ieee754_pow+0x128>
 80c2f0c:	2f00      	cmp	r7, #0
 80c2f0e:	da79      	bge.n	80c3004 <__ieee754_pow+0x1c4>
 80c2f10:	4956      	ldr	r1, [pc, #344]	; (80c306c <__ieee754_pow+0x22c>)
 80c2f12:	2000      	movs	r0, #0
 80c2f14:	f7dd fc9a 	bl	80a084c <__aeabi_ddiv>
 80c2f18:	e016      	b.n	80c2f48 <__ieee754_pow+0x108>
 80c2f1a:	2100      	movs	r1, #0
 80c2f1c:	9100      	str	r1, [sp, #0]
 80c2f1e:	2800      	cmp	r0, #0
 80c2f20:	d13b      	bne.n	80c2f9a <__ieee754_pow+0x15a>
 80c2f22:	494f      	ldr	r1, [pc, #316]	; (80c3060 <__ieee754_pow+0x220>)
 80c2f24:	428e      	cmp	r6, r1
 80c2f26:	d1ee      	bne.n	80c2f06 <__ieee754_pow+0xc6>
 80c2f28:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80c2f2c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80c2f30:	ea53 0308 	orrs.w	r3, r3, r8
 80c2f34:	f000 8466 	beq.w	80c3804 <__ieee754_pow+0x9c4>
 80c2f38:	4b4d      	ldr	r3, [pc, #308]	; (80c3070 <__ieee754_pow+0x230>)
 80c2f3a:	429c      	cmp	r4, r3
 80c2f3c:	dd0d      	ble.n	80c2f5a <__ieee754_pow+0x11a>
 80c2f3e:	2f00      	cmp	r7, #0
 80c2f40:	f280 8464 	bge.w	80c380c <__ieee754_pow+0x9cc>
 80c2f44:	2000      	movs	r0, #0
 80c2f46:	2100      	movs	r1, #0
 80c2f48:	ec41 0b10 	vmov	d0, r0, r1
 80c2f4c:	b00d      	add	sp, #52	; 0x34
 80c2f4e:	ecbd 8b06 	vpop	{d8-d10}
 80c2f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80c2f56:	2102      	movs	r1, #2
 80c2f58:	e7e0      	b.n	80c2f1c <__ieee754_pow+0xdc>
 80c2f5a:	2f00      	cmp	r7, #0
 80c2f5c:	daf2      	bge.n	80c2f44 <__ieee754_pow+0x104>
 80c2f5e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 80c2f62:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80c2f66:	e7ef      	b.n	80c2f48 <__ieee754_pow+0x108>
 80c2f68:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80c2f6c:	d104      	bne.n	80c2f78 <__ieee754_pow+0x138>
 80c2f6e:	4610      	mov	r0, r2
 80c2f70:	4619      	mov	r1, r3
 80c2f72:	f7dd fb41 	bl	80a05f8 <__aeabi_dmul>
 80c2f76:	e7e7      	b.n	80c2f48 <__ieee754_pow+0x108>
 80c2f78:	493e      	ldr	r1, [pc, #248]	; (80c3074 <__ieee754_pow+0x234>)
 80c2f7a:	428f      	cmp	r7, r1
 80c2f7c:	d10d      	bne.n	80c2f9a <__ieee754_pow+0x15a>
 80c2f7e:	f1b9 0f00 	cmp.w	r9, #0
 80c2f82:	db0a      	blt.n	80c2f9a <__ieee754_pow+0x15a>
 80c2f84:	ec43 2b10 	vmov	d0, r2, r3
 80c2f88:	b00d      	add	sp, #52	; 0x34
 80c2f8a:	ecbd 8b06 	vpop	{d8-d10}
 80c2f8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80c2f92:	f000 bc77 	b.w	80c3884 <__ieee754_sqrt>
 80c2f96:	2100      	movs	r1, #0
 80c2f98:	9100      	str	r1, [sp, #0]
 80c2f9a:	ec43 2b10 	vmov	d0, r2, r3
 80c2f9e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80c2fa2:	f001 fb1b 	bl	80c45dc <fabs>
 80c2fa6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80c2faa:	ec51 0b10 	vmov	r0, r1, d0
 80c2fae:	f1b8 0f00 	cmp.w	r8, #0
 80c2fb2:	d12a      	bne.n	80c300a <__ieee754_pow+0x1ca>
 80c2fb4:	b12c      	cbz	r4, 80c2fc2 <__ieee754_pow+0x182>
 80c2fb6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 80c306c <__ieee754_pow+0x22c>
 80c2fba:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 80c2fbe:	45e6      	cmp	lr, ip
 80c2fc0:	d123      	bne.n	80c300a <__ieee754_pow+0x1ca>
 80c2fc2:	2f00      	cmp	r7, #0
 80c2fc4:	da05      	bge.n	80c2fd2 <__ieee754_pow+0x192>
 80c2fc6:	4602      	mov	r2, r0
 80c2fc8:	460b      	mov	r3, r1
 80c2fca:	2000      	movs	r0, #0
 80c2fcc:	4927      	ldr	r1, [pc, #156]	; (80c306c <__ieee754_pow+0x22c>)
 80c2fce:	f7dd fc3d 	bl	80a084c <__aeabi_ddiv>
 80c2fd2:	f1b9 0f00 	cmp.w	r9, #0
 80c2fd6:	dab7      	bge.n	80c2f48 <__ieee754_pow+0x108>
 80c2fd8:	9b00      	ldr	r3, [sp, #0]
 80c2fda:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80c2fde:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80c2fe2:	4323      	orrs	r3, r4
 80c2fe4:	d108      	bne.n	80c2ff8 <__ieee754_pow+0x1b8>
 80c2fe6:	4602      	mov	r2, r0
 80c2fe8:	460b      	mov	r3, r1
 80c2fea:	4610      	mov	r0, r2
 80c2fec:	4619      	mov	r1, r3
 80c2fee:	f7dd f94b 	bl	80a0288 <__aeabi_dsub>
 80c2ff2:	4602      	mov	r2, r0
 80c2ff4:	460b      	mov	r3, r1
 80c2ff6:	e78d      	b.n	80c2f14 <__ieee754_pow+0xd4>
 80c2ff8:	9b00      	ldr	r3, [sp, #0]
 80c2ffa:	2b01      	cmp	r3, #1
 80c2ffc:	d1a4      	bne.n	80c2f48 <__ieee754_pow+0x108>
 80c2ffe:	4602      	mov	r2, r0
 80c3000:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80c3004:	4610      	mov	r0, r2
 80c3006:	4619      	mov	r1, r3
 80c3008:	e79e      	b.n	80c2f48 <__ieee754_pow+0x108>
 80c300a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 80c300e:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 80c3012:	950a      	str	r5, [sp, #40]	; 0x28
 80c3014:	9d00      	ldr	r5, [sp, #0]
 80c3016:	46ac      	mov	ip, r5
 80c3018:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80c301a:	ea5c 0505 	orrs.w	r5, ip, r5
 80c301e:	d0e4      	beq.n	80c2fea <__ieee754_pow+0x1aa>
 80c3020:	4b15      	ldr	r3, [pc, #84]	; (80c3078 <__ieee754_pow+0x238>)
 80c3022:	429e      	cmp	r6, r3
 80c3024:	f340 80fc 	ble.w	80c3220 <__ieee754_pow+0x3e0>
 80c3028:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80c302c:	429e      	cmp	r6, r3
 80c302e:	4b10      	ldr	r3, [pc, #64]	; (80c3070 <__ieee754_pow+0x230>)
 80c3030:	dd07      	ble.n	80c3042 <__ieee754_pow+0x202>
 80c3032:	429c      	cmp	r4, r3
 80c3034:	dc0a      	bgt.n	80c304c <__ieee754_pow+0x20c>
 80c3036:	2f00      	cmp	r7, #0
 80c3038:	da84      	bge.n	80c2f44 <__ieee754_pow+0x104>
 80c303a:	a307      	add	r3, pc, #28	; (adr r3, 80c3058 <__ieee754_pow+0x218>)
 80c303c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80c3040:	e795      	b.n	80c2f6e <__ieee754_pow+0x12e>
 80c3042:	429c      	cmp	r4, r3
 80c3044:	dbf7      	blt.n	80c3036 <__ieee754_pow+0x1f6>
 80c3046:	4b09      	ldr	r3, [pc, #36]	; (80c306c <__ieee754_pow+0x22c>)
 80c3048:	429c      	cmp	r4, r3
 80c304a:	dd17      	ble.n	80c307c <__ieee754_pow+0x23c>
 80c304c:	2f00      	cmp	r7, #0
 80c304e:	dcf4      	bgt.n	80c303a <__ieee754_pow+0x1fa>
 80c3050:	e778      	b.n	80c2f44 <__ieee754_pow+0x104>
 80c3052:	bf00      	nop
 80c3054:	f3af 8000 	nop.w
 80c3058:	8800759c 	.word	0x8800759c
 80c305c:	7e37e43c 	.word	0x7e37e43c
 80c3060:	7ff00000 	.word	0x7ff00000
 80c3064:	080dd588 	.word	0x080dd588
 80c3068:	433fffff 	.word	0x433fffff
 80c306c:	3ff00000 	.word	0x3ff00000
 80c3070:	3fefffff 	.word	0x3fefffff
 80c3074:	3fe00000 	.word	0x3fe00000
 80c3078:	41e00000 	.word	0x41e00000
 80c307c:	4b64      	ldr	r3, [pc, #400]	; (80c3210 <__ieee754_pow+0x3d0>)
 80c307e:	2200      	movs	r2, #0
 80c3080:	f7dd f902 	bl	80a0288 <__aeabi_dsub>
 80c3084:	a356      	add	r3, pc, #344	; (adr r3, 80c31e0 <__ieee754_pow+0x3a0>)
 80c3086:	e9d3 2300 	ldrd	r2, r3, [r3]
 80c308a:	4604      	mov	r4, r0
 80c308c:	460d      	mov	r5, r1
 80c308e:	f7dd fab3 	bl	80a05f8 <__aeabi_dmul>
 80c3092:	a355      	add	r3, pc, #340	; (adr r3, 80c31e8 <__ieee754_pow+0x3a8>)
 80c3094:	e9d3 2300 	ldrd	r2, r3, [r3]
 80c3098:	4606      	mov	r6, r0
 80c309a:	460f      	mov	r7, r1
 80c309c:	4620      	mov	r0, r4
 80c309e:	4629      	mov	r1, r5
 80c30a0:	f7dd faaa 	bl	80a05f8 <__aeabi_dmul>
 80c30a4:	4b5b      	ldr	r3, [pc, #364]	; (80c3214 <__ieee754_pow+0x3d4>)
 80c30a6:	4682      	mov	sl, r0
 80c30a8:	468b      	mov	fp, r1
 80c30aa:	2200      	movs	r2, #0
 80c30ac:	4620      	mov	r0, r4
 80c30ae:	4629      	mov	r1, r5
 80c30b0:	f7dd faa2 	bl	80a05f8 <__aeabi_dmul>
 80c30b4:	4602      	mov	r2, r0
 80c30b6:	460b      	mov	r3, r1
 80c30b8:	a14d      	add	r1, pc, #308	; (adr r1, 80c31f0 <__ieee754_pow+0x3b0>)
 80c30ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80c30be:	f7dd f8e3 	bl	80a0288 <__aeabi_dsub>
 80c30c2:	4622      	mov	r2, r4
 80c30c4:	462b      	mov	r3, r5
 80c30c6:	f7dd fa97 	bl	80a05f8 <__aeabi_dmul>
 80c30ca:	4602      	mov	r2, r0
 80c30cc:	460b      	mov	r3, r1
 80c30ce:	2000      	movs	r0, #0
 80c30d0:	4951      	ldr	r1, [pc, #324]	; (80c3218 <__ieee754_pow+0x3d8>)
 80c30d2:	f7dd f8d9 	bl	80a0288 <__aeabi_dsub>
 80c30d6:	4622      	mov	r2, r4
 80c30d8:	4680      	mov	r8, r0
 80c30da:	4689      	mov	r9, r1
 80c30dc:	462b      	mov	r3, r5
 80c30de:	4620      	mov	r0, r4
 80c30e0:	4629      	mov	r1, r5
 80c30e2:	f7dd fa89 	bl	80a05f8 <__aeabi_dmul>
 80c30e6:	4602      	mov	r2, r0
 80c30e8:	460b      	mov	r3, r1
 80c30ea:	4640      	mov	r0, r8
 80c30ec:	4649      	mov	r1, r9
 80c30ee:	f7dd fa83 	bl	80a05f8 <__aeabi_dmul>
 80c30f2:	a341      	add	r3, pc, #260	; (adr r3, 80c31f8 <__ieee754_pow+0x3b8>)
 80c30f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80c30f8:	f7dd fa7e 	bl	80a05f8 <__aeabi_dmul>
 80c30fc:	4602      	mov	r2, r0
 80c30fe:	460b      	mov	r3, r1
 80c3100:	4650      	mov	r0, sl
 80c3102:	4659      	mov	r1, fp
 80c3104:	f7dd f8c0 	bl	80a0288 <__aeabi_dsub>
 80c3108:	4602      	mov	r2, r0
 80c310a:	460b      	mov	r3, r1
 80c310c:	4680      	mov	r8, r0
 80c310e:	4689      	mov	r9, r1
 80c3110:	4630      	mov	r0, r6
 80c3112:	4639      	mov	r1, r7
 80c3114:	f7dd f8ba 	bl	80a028c <__adddf3>
 80c3118:	2400      	movs	r4, #0
 80c311a:	4632      	mov	r2, r6
 80c311c:	463b      	mov	r3, r7
 80c311e:	4620      	mov	r0, r4
 80c3120:	460d      	mov	r5, r1
 80c3122:	f7dd f8b1 	bl	80a0288 <__aeabi_dsub>
 80c3126:	4602      	mov	r2, r0
 80c3128:	460b      	mov	r3, r1
 80c312a:	4640      	mov	r0, r8
 80c312c:	4649      	mov	r1, r9
 80c312e:	f7dd f8ab 	bl	80a0288 <__aeabi_dsub>
 80c3132:	9b00      	ldr	r3, [sp, #0]
 80c3134:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80c3136:	3b01      	subs	r3, #1
 80c3138:	4313      	orrs	r3, r2
 80c313a:	4682      	mov	sl, r0
 80c313c:	468b      	mov	fp, r1
 80c313e:	f040 81f1 	bne.w	80c3524 <__ieee754_pow+0x6e4>
 80c3142:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80c3200 <__ieee754_pow+0x3c0>
 80c3146:	eeb0 8a47 	vmov.f32	s16, s14
 80c314a:	eef0 8a67 	vmov.f32	s17, s15
 80c314e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80c3152:	2600      	movs	r6, #0
 80c3154:	4632      	mov	r2, r6
 80c3156:	463b      	mov	r3, r7
 80c3158:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80c315c:	f7dd f894 	bl	80a0288 <__aeabi_dsub>
 80c3160:	4622      	mov	r2, r4
 80c3162:	462b      	mov	r3, r5
 80c3164:	f7dd fa48 	bl	80a05f8 <__aeabi_dmul>
 80c3168:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80c316c:	4680      	mov	r8, r0
 80c316e:	4689      	mov	r9, r1
 80c3170:	4650      	mov	r0, sl
 80c3172:	4659      	mov	r1, fp
 80c3174:	f7dd fa40 	bl	80a05f8 <__aeabi_dmul>
 80c3178:	4602      	mov	r2, r0
 80c317a:	460b      	mov	r3, r1
 80c317c:	4640      	mov	r0, r8
 80c317e:	4649      	mov	r1, r9
 80c3180:	f7dd f884 	bl	80a028c <__adddf3>
 80c3184:	4632      	mov	r2, r6
 80c3186:	463b      	mov	r3, r7
 80c3188:	4680      	mov	r8, r0
 80c318a:	4689      	mov	r9, r1
 80c318c:	4620      	mov	r0, r4
 80c318e:	4629      	mov	r1, r5
 80c3190:	f7dd fa32 	bl	80a05f8 <__aeabi_dmul>
 80c3194:	460b      	mov	r3, r1
 80c3196:	4604      	mov	r4, r0
 80c3198:	460d      	mov	r5, r1
 80c319a:	4602      	mov	r2, r0
 80c319c:	4649      	mov	r1, r9
 80c319e:	4640      	mov	r0, r8
 80c31a0:	f7dd f874 	bl	80a028c <__adddf3>
 80c31a4:	4b1d      	ldr	r3, [pc, #116]	; (80c321c <__ieee754_pow+0x3dc>)
 80c31a6:	4299      	cmp	r1, r3
 80c31a8:	ec45 4b19 	vmov	d9, r4, r5
 80c31ac:	4606      	mov	r6, r0
 80c31ae:	460f      	mov	r7, r1
 80c31b0:	468b      	mov	fp, r1
 80c31b2:	f340 82fe 	ble.w	80c37b2 <__ieee754_pow+0x972>
 80c31b6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80c31ba:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80c31be:	4303      	orrs	r3, r0
 80c31c0:	f000 81f0 	beq.w	80c35a4 <__ieee754_pow+0x764>
 80c31c4:	a310      	add	r3, pc, #64	; (adr r3, 80c3208 <__ieee754_pow+0x3c8>)
 80c31c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80c31ca:	ec51 0b18 	vmov	r0, r1, d8
 80c31ce:	f7dd fa13 	bl	80a05f8 <__aeabi_dmul>
 80c31d2:	a30d      	add	r3, pc, #52	; (adr r3, 80c3208 <__ieee754_pow+0x3c8>)
 80c31d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80c31d8:	e6cb      	b.n	80c2f72 <__ieee754_pow+0x132>
 80c31da:	bf00      	nop
 80c31dc:	f3af 8000 	nop.w
 80c31e0:	60000000 	.word	0x60000000
 80c31e4:	3ff71547 	.word	0x3ff71547
 80c31e8:	f85ddf44 	.word	0xf85ddf44
 80c31ec:	3e54ae0b 	.word	0x3e54ae0b
 80c31f0:	55555555 	.word	0x55555555
 80c31f4:	3fd55555 	.word	0x3fd55555
 80c31f8:	652b82fe 	.word	0x652b82fe
 80c31fc:	3ff71547 	.word	0x3ff71547
 80c3200:	00000000 	.word	0x00000000
 80c3204:	bff00000 	.word	0xbff00000
 80c3208:	8800759c 	.word	0x8800759c
 80c320c:	7e37e43c 	.word	0x7e37e43c
 80c3210:	3ff00000 	.word	0x3ff00000
 80c3214:	3fd00000 	.word	0x3fd00000
 80c3218:	3fe00000 	.word	0x3fe00000
 80c321c:	408fffff 	.word	0x408fffff
 80c3220:	4bd7      	ldr	r3, [pc, #860]	; (80c3580 <__ieee754_pow+0x740>)
 80c3222:	ea03 0309 	and.w	r3, r3, r9
 80c3226:	2200      	movs	r2, #0
 80c3228:	b92b      	cbnz	r3, 80c3236 <__ieee754_pow+0x3f6>
 80c322a:	4bd6      	ldr	r3, [pc, #856]	; (80c3584 <__ieee754_pow+0x744>)
 80c322c:	f7dd f9e4 	bl	80a05f8 <__aeabi_dmul>
 80c3230:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80c3234:	460c      	mov	r4, r1
 80c3236:	1523      	asrs	r3, r4, #20
 80c3238:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80c323c:	4413      	add	r3, r2
 80c323e:	9309      	str	r3, [sp, #36]	; 0x24
 80c3240:	4bd1      	ldr	r3, [pc, #836]	; (80c3588 <__ieee754_pow+0x748>)
 80c3242:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80c3246:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80c324a:	429c      	cmp	r4, r3
 80c324c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80c3250:	dd08      	ble.n	80c3264 <__ieee754_pow+0x424>
 80c3252:	4bce      	ldr	r3, [pc, #824]	; (80c358c <__ieee754_pow+0x74c>)
 80c3254:	429c      	cmp	r4, r3
 80c3256:	f340 8163 	ble.w	80c3520 <__ieee754_pow+0x6e0>
 80c325a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80c325c:	3301      	adds	r3, #1
 80c325e:	9309      	str	r3, [sp, #36]	; 0x24
 80c3260:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80c3264:	2400      	movs	r4, #0
 80c3266:	00e3      	lsls	r3, r4, #3
 80c3268:	930b      	str	r3, [sp, #44]	; 0x2c
 80c326a:	4bc9      	ldr	r3, [pc, #804]	; (80c3590 <__ieee754_pow+0x750>)
 80c326c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80c3270:	ed93 7b00 	vldr	d7, [r3]
 80c3274:	4629      	mov	r1, r5
 80c3276:	ec53 2b17 	vmov	r2, r3, d7
 80c327a:	eeb0 8a47 	vmov.f32	s16, s14
 80c327e:	eef0 8a67 	vmov.f32	s17, s15
 80c3282:	4682      	mov	sl, r0
 80c3284:	f7dd f800 	bl	80a0288 <__aeabi_dsub>
 80c3288:	4652      	mov	r2, sl
 80c328a:	4606      	mov	r6, r0
 80c328c:	460f      	mov	r7, r1
 80c328e:	462b      	mov	r3, r5
 80c3290:	ec51 0b18 	vmov	r0, r1, d8
 80c3294:	f7dc fffa 	bl	80a028c <__adddf3>
 80c3298:	4602      	mov	r2, r0
 80c329a:	460b      	mov	r3, r1
 80c329c:	2000      	movs	r0, #0
 80c329e:	49bd      	ldr	r1, [pc, #756]	; (80c3594 <__ieee754_pow+0x754>)
 80c32a0:	f7dd fad4 	bl	80a084c <__aeabi_ddiv>
 80c32a4:	ec41 0b19 	vmov	d9, r0, r1
 80c32a8:	4602      	mov	r2, r0
 80c32aa:	460b      	mov	r3, r1
 80c32ac:	4630      	mov	r0, r6
 80c32ae:	4639      	mov	r1, r7
 80c32b0:	f7dd f9a2 	bl	80a05f8 <__aeabi_dmul>
 80c32b4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80c32b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80c32bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80c32c0:	2300      	movs	r3, #0
 80c32c2:	9304      	str	r3, [sp, #16]
 80c32c4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80c32c8:	46ab      	mov	fp, r5
 80c32ca:	106d      	asrs	r5, r5, #1
 80c32cc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80c32d0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80c32d4:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80c32d8:	2200      	movs	r2, #0
 80c32da:	4640      	mov	r0, r8
 80c32dc:	4649      	mov	r1, r9
 80c32de:	4614      	mov	r4, r2
 80c32e0:	461d      	mov	r5, r3
 80c32e2:	f7dd f989 	bl	80a05f8 <__aeabi_dmul>
 80c32e6:	4602      	mov	r2, r0
 80c32e8:	460b      	mov	r3, r1
 80c32ea:	4630      	mov	r0, r6
 80c32ec:	4639      	mov	r1, r7
 80c32ee:	f7dc ffcb 	bl	80a0288 <__aeabi_dsub>
 80c32f2:	ec53 2b18 	vmov	r2, r3, d8
 80c32f6:	4606      	mov	r6, r0
 80c32f8:	460f      	mov	r7, r1
 80c32fa:	4620      	mov	r0, r4
 80c32fc:	4629      	mov	r1, r5
 80c32fe:	f7dc ffc3 	bl	80a0288 <__aeabi_dsub>
 80c3302:	4602      	mov	r2, r0
 80c3304:	460b      	mov	r3, r1
 80c3306:	4650      	mov	r0, sl
 80c3308:	4659      	mov	r1, fp
 80c330a:	f7dc ffbd 	bl	80a0288 <__aeabi_dsub>
 80c330e:	4642      	mov	r2, r8
 80c3310:	464b      	mov	r3, r9
 80c3312:	f7dd f971 	bl	80a05f8 <__aeabi_dmul>
 80c3316:	4602      	mov	r2, r0
 80c3318:	460b      	mov	r3, r1
 80c331a:	4630      	mov	r0, r6
 80c331c:	4639      	mov	r1, r7
 80c331e:	f7dc ffb3 	bl	80a0288 <__aeabi_dsub>
 80c3322:	ec53 2b19 	vmov	r2, r3, d9
 80c3326:	f7dd f967 	bl	80a05f8 <__aeabi_dmul>
 80c332a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80c332e:	ec41 0b18 	vmov	d8, r0, r1
 80c3332:	4610      	mov	r0, r2
 80c3334:	4619      	mov	r1, r3
 80c3336:	f7dd f95f 	bl	80a05f8 <__aeabi_dmul>
 80c333a:	a37d      	add	r3, pc, #500	; (adr r3, 80c3530 <__ieee754_pow+0x6f0>)
 80c333c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80c3340:	4604      	mov	r4, r0
 80c3342:	460d      	mov	r5, r1
 80c3344:	f7dd f958 	bl	80a05f8 <__aeabi_dmul>
 80c3348:	a37b      	add	r3, pc, #492	; (adr r3, 80c3538 <__ieee754_pow+0x6f8>)
 80c334a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80c334e:	f7dc ff9d 	bl	80a028c <__adddf3>
 80c3352:	4622      	mov	r2, r4
 80c3354:	462b      	mov	r3, r5
 80c3356:	f7dd f94f 	bl	80a05f8 <__aeabi_dmul>
 80c335a:	a379      	add	r3, pc, #484	; (adr r3, 80c3540 <__ieee754_pow+0x700>)
 80c335c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80c3360:	f7dc ff94 	bl	80a028c <__adddf3>
 80c3364:	4622      	mov	r2, r4
 80c3366:	462b      	mov	r3, r5
 80c3368:	f7dd f946 	bl	80a05f8 <__aeabi_dmul>
 80c336c:	a376      	add	r3, pc, #472	; (adr r3, 80c3548 <__ieee754_pow+0x708>)
 80c336e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80c3372:	f7dc ff8b 	bl	80a028c <__adddf3>
 80c3376:	4622      	mov	r2, r4
 80c3378:	462b      	mov	r3, r5
 80c337a:	f7dd f93d 	bl	80a05f8 <__aeabi_dmul>
 80c337e:	a374      	add	r3, pc, #464	; (adr r3, 80c3550 <__ieee754_pow+0x710>)
 80c3380:	e9d3 2300 	ldrd	r2, r3, [r3]
 80c3384:	f7dc ff82 	bl	80a028c <__adddf3>
 80c3388:	4622      	mov	r2, r4
 80c338a:	462b      	mov	r3, r5
 80c338c:	f7dd f934 	bl	80a05f8 <__aeabi_dmul>
 80c3390:	a371      	add	r3, pc, #452	; (adr r3, 80c3558 <__ieee754_pow+0x718>)
 80c3392:	e9d3 2300 	ldrd	r2, r3, [r3]
 80c3396:	f7dc ff79 	bl	80a028c <__adddf3>
 80c339a:	4622      	mov	r2, r4
 80c339c:	4606      	mov	r6, r0
 80c339e:	460f      	mov	r7, r1
 80c33a0:	462b      	mov	r3, r5
 80c33a2:	4620      	mov	r0, r4
 80c33a4:	4629      	mov	r1, r5
 80c33a6:	f7dd f927 	bl	80a05f8 <__aeabi_dmul>
 80c33aa:	4602      	mov	r2, r0
 80c33ac:	460b      	mov	r3, r1
 80c33ae:	4630      	mov	r0, r6
 80c33b0:	4639      	mov	r1, r7
 80c33b2:	f7dd f921 	bl	80a05f8 <__aeabi_dmul>
 80c33b6:	4642      	mov	r2, r8
 80c33b8:	4604      	mov	r4, r0
 80c33ba:	460d      	mov	r5, r1
 80c33bc:	464b      	mov	r3, r9
 80c33be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80c33c2:	f7dc ff63 	bl	80a028c <__adddf3>
 80c33c6:	ec53 2b18 	vmov	r2, r3, d8
 80c33ca:	f7dd f915 	bl	80a05f8 <__aeabi_dmul>
 80c33ce:	4622      	mov	r2, r4
 80c33d0:	462b      	mov	r3, r5
 80c33d2:	f7dc ff5b 	bl	80a028c <__adddf3>
 80c33d6:	4642      	mov	r2, r8
 80c33d8:	4682      	mov	sl, r0
 80c33da:	468b      	mov	fp, r1
 80c33dc:	464b      	mov	r3, r9
 80c33de:	4640      	mov	r0, r8
 80c33e0:	4649      	mov	r1, r9
 80c33e2:	f7dd f909 	bl	80a05f8 <__aeabi_dmul>
 80c33e6:	4b6c      	ldr	r3, [pc, #432]	; (80c3598 <__ieee754_pow+0x758>)
 80c33e8:	2200      	movs	r2, #0
 80c33ea:	4606      	mov	r6, r0
 80c33ec:	460f      	mov	r7, r1
 80c33ee:	f7dc ff4d 	bl	80a028c <__adddf3>
 80c33f2:	4652      	mov	r2, sl
 80c33f4:	465b      	mov	r3, fp
 80c33f6:	f7dc ff49 	bl	80a028c <__adddf3>
 80c33fa:	9c04      	ldr	r4, [sp, #16]
 80c33fc:	460d      	mov	r5, r1
 80c33fe:	4622      	mov	r2, r4
 80c3400:	460b      	mov	r3, r1
 80c3402:	4640      	mov	r0, r8
 80c3404:	4649      	mov	r1, r9
 80c3406:	f7dd f8f7 	bl	80a05f8 <__aeabi_dmul>
 80c340a:	4b63      	ldr	r3, [pc, #396]	; (80c3598 <__ieee754_pow+0x758>)
 80c340c:	4680      	mov	r8, r0
 80c340e:	4689      	mov	r9, r1
 80c3410:	2200      	movs	r2, #0
 80c3412:	4620      	mov	r0, r4
 80c3414:	4629      	mov	r1, r5
 80c3416:	f7dc ff37 	bl	80a0288 <__aeabi_dsub>
 80c341a:	4632      	mov	r2, r6
 80c341c:	463b      	mov	r3, r7
 80c341e:	f7dc ff33 	bl	80a0288 <__aeabi_dsub>
 80c3422:	4602      	mov	r2, r0
 80c3424:	460b      	mov	r3, r1
 80c3426:	4650      	mov	r0, sl
 80c3428:	4659      	mov	r1, fp
 80c342a:	f7dc ff2d 	bl	80a0288 <__aeabi_dsub>
 80c342e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80c3432:	f7dd f8e1 	bl	80a05f8 <__aeabi_dmul>
 80c3436:	4622      	mov	r2, r4
 80c3438:	4606      	mov	r6, r0
 80c343a:	460f      	mov	r7, r1
 80c343c:	462b      	mov	r3, r5
 80c343e:	ec51 0b18 	vmov	r0, r1, d8
 80c3442:	f7dd f8d9 	bl	80a05f8 <__aeabi_dmul>
 80c3446:	4602      	mov	r2, r0
 80c3448:	460b      	mov	r3, r1
 80c344a:	4630      	mov	r0, r6
 80c344c:	4639      	mov	r1, r7
 80c344e:	f7dc ff1d 	bl	80a028c <__adddf3>
 80c3452:	4606      	mov	r6, r0
 80c3454:	460f      	mov	r7, r1
 80c3456:	4602      	mov	r2, r0
 80c3458:	460b      	mov	r3, r1
 80c345a:	4640      	mov	r0, r8
 80c345c:	4649      	mov	r1, r9
 80c345e:	f7dc ff15 	bl	80a028c <__adddf3>
 80c3462:	9c04      	ldr	r4, [sp, #16]
 80c3464:	a33e      	add	r3, pc, #248	; (adr r3, 80c3560 <__ieee754_pow+0x720>)
 80c3466:	e9d3 2300 	ldrd	r2, r3, [r3]
 80c346a:	4620      	mov	r0, r4
 80c346c:	460d      	mov	r5, r1
 80c346e:	f7dd f8c3 	bl	80a05f8 <__aeabi_dmul>
 80c3472:	4642      	mov	r2, r8
 80c3474:	ec41 0b18 	vmov	d8, r0, r1
 80c3478:	464b      	mov	r3, r9
 80c347a:	4620      	mov	r0, r4
 80c347c:	4629      	mov	r1, r5
 80c347e:	f7dc ff03 	bl	80a0288 <__aeabi_dsub>
 80c3482:	4602      	mov	r2, r0
 80c3484:	460b      	mov	r3, r1
 80c3486:	4630      	mov	r0, r6
 80c3488:	4639      	mov	r1, r7
 80c348a:	f7dc fefd 	bl	80a0288 <__aeabi_dsub>
 80c348e:	a336      	add	r3, pc, #216	; (adr r3, 80c3568 <__ieee754_pow+0x728>)
 80c3490:	e9d3 2300 	ldrd	r2, r3, [r3]
 80c3494:	f7dd f8b0 	bl	80a05f8 <__aeabi_dmul>
 80c3498:	a335      	add	r3, pc, #212	; (adr r3, 80c3570 <__ieee754_pow+0x730>)
 80c349a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80c349e:	4606      	mov	r6, r0
 80c34a0:	460f      	mov	r7, r1
 80c34a2:	4620      	mov	r0, r4
 80c34a4:	4629      	mov	r1, r5
 80c34a6:	f7dd f8a7 	bl	80a05f8 <__aeabi_dmul>
 80c34aa:	4602      	mov	r2, r0
 80c34ac:	460b      	mov	r3, r1
 80c34ae:	4630      	mov	r0, r6
 80c34b0:	4639      	mov	r1, r7
 80c34b2:	f7dc feeb 	bl	80a028c <__adddf3>
 80c34b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80c34b8:	4b38      	ldr	r3, [pc, #224]	; (80c359c <__ieee754_pow+0x75c>)
 80c34ba:	4413      	add	r3, r2
 80c34bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80c34c0:	f7dc fee4 	bl	80a028c <__adddf3>
 80c34c4:	4682      	mov	sl, r0
 80c34c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80c34c8:	468b      	mov	fp, r1
 80c34ca:	f7dd f82b 	bl	80a0524 <__aeabi_i2d>
 80c34ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80c34d0:	4b33      	ldr	r3, [pc, #204]	; (80c35a0 <__ieee754_pow+0x760>)
 80c34d2:	4413      	add	r3, r2
 80c34d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80c34d8:	4606      	mov	r6, r0
 80c34da:	460f      	mov	r7, r1
 80c34dc:	4652      	mov	r2, sl
 80c34de:	465b      	mov	r3, fp
 80c34e0:	ec51 0b18 	vmov	r0, r1, d8
 80c34e4:	f7dc fed2 	bl	80a028c <__adddf3>
 80c34e8:	4642      	mov	r2, r8
 80c34ea:	464b      	mov	r3, r9
 80c34ec:	f7dc fece 	bl	80a028c <__adddf3>
 80c34f0:	4632      	mov	r2, r6
 80c34f2:	463b      	mov	r3, r7
 80c34f4:	f7dc feca 	bl	80a028c <__adddf3>
 80c34f8:	9c04      	ldr	r4, [sp, #16]
 80c34fa:	4632      	mov	r2, r6
 80c34fc:	463b      	mov	r3, r7
 80c34fe:	4620      	mov	r0, r4
 80c3500:	460d      	mov	r5, r1
 80c3502:	f7dc fec1 	bl	80a0288 <__aeabi_dsub>
 80c3506:	4642      	mov	r2, r8
 80c3508:	464b      	mov	r3, r9
 80c350a:	f7dc febd 	bl	80a0288 <__aeabi_dsub>
 80c350e:	ec53 2b18 	vmov	r2, r3, d8
 80c3512:	f7dc feb9 	bl	80a0288 <__aeabi_dsub>
 80c3516:	4602      	mov	r2, r0
 80c3518:	460b      	mov	r3, r1
 80c351a:	4650      	mov	r0, sl
 80c351c:	4659      	mov	r1, fp
 80c351e:	e606      	b.n	80c312e <__ieee754_pow+0x2ee>
 80c3520:	2401      	movs	r4, #1
 80c3522:	e6a0      	b.n	80c3266 <__ieee754_pow+0x426>
 80c3524:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80c3578 <__ieee754_pow+0x738>
 80c3528:	e60d      	b.n	80c3146 <__ieee754_pow+0x306>
 80c352a:	bf00      	nop
 80c352c:	f3af 8000 	nop.w
 80c3530:	4a454eef 	.word	0x4a454eef
 80c3534:	3fca7e28 	.word	0x3fca7e28
 80c3538:	93c9db65 	.word	0x93c9db65
 80c353c:	3fcd864a 	.word	0x3fcd864a
 80c3540:	a91d4101 	.word	0xa91d4101
 80c3544:	3fd17460 	.word	0x3fd17460
 80c3548:	518f264d 	.word	0x518f264d
 80c354c:	3fd55555 	.word	0x3fd55555
 80c3550:	db6fabff 	.word	0xdb6fabff
 80c3554:	3fdb6db6 	.word	0x3fdb6db6
 80c3558:	33333303 	.word	0x33333303
 80c355c:	3fe33333 	.word	0x3fe33333
 80c3560:	e0000000 	.word	0xe0000000
 80c3564:	3feec709 	.word	0x3feec709
 80c3568:	dc3a03fd 	.word	0xdc3a03fd
 80c356c:	3feec709 	.word	0x3feec709
 80c3570:	145b01f5 	.word	0x145b01f5
 80c3574:	be3e2fe0 	.word	0xbe3e2fe0
 80c3578:	00000000 	.word	0x00000000
 80c357c:	3ff00000 	.word	0x3ff00000
 80c3580:	7ff00000 	.word	0x7ff00000
 80c3584:	43400000 	.word	0x43400000
 80c3588:	0003988e 	.word	0x0003988e
 80c358c:	000bb679 	.word	0x000bb679
 80c3590:	080dd698 	.word	0x080dd698
 80c3594:	3ff00000 	.word	0x3ff00000
 80c3598:	40080000 	.word	0x40080000
 80c359c:	080dd6b8 	.word	0x080dd6b8
 80c35a0:	080dd6a8 	.word	0x080dd6a8
 80c35a4:	a3b5      	add	r3, pc, #724	; (adr r3, 80c387c <__ieee754_pow+0xa3c>)
 80c35a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80c35aa:	4640      	mov	r0, r8
 80c35ac:	4649      	mov	r1, r9
 80c35ae:	f7dc fe6d 	bl	80a028c <__adddf3>
 80c35b2:	4622      	mov	r2, r4
 80c35b4:	ec41 0b1a 	vmov	d10, r0, r1
 80c35b8:	462b      	mov	r3, r5
 80c35ba:	4630      	mov	r0, r6
 80c35bc:	4639      	mov	r1, r7
 80c35be:	f7dc fe63 	bl	80a0288 <__aeabi_dsub>
 80c35c2:	4602      	mov	r2, r0
 80c35c4:	460b      	mov	r3, r1
 80c35c6:	ec51 0b1a 	vmov	r0, r1, d10
 80c35ca:	f7dd faa5 	bl	80a0b18 <__aeabi_dcmpgt>
 80c35ce:	2800      	cmp	r0, #0
 80c35d0:	f47f adf8 	bne.w	80c31c4 <__ieee754_pow+0x384>
 80c35d4:	4aa4      	ldr	r2, [pc, #656]	; (80c3868 <__ieee754_pow+0xa28>)
 80c35d6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80c35da:	4293      	cmp	r3, r2
 80c35dc:	f340 810b 	ble.w	80c37f6 <__ieee754_pow+0x9b6>
 80c35e0:	151b      	asrs	r3, r3, #20
 80c35e2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80c35e6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80c35ea:	fa4a f303 	asr.w	r3, sl, r3
 80c35ee:	445b      	add	r3, fp
 80c35f0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80c35f4:	4e9d      	ldr	r6, [pc, #628]	; (80c386c <__ieee754_pow+0xa2c>)
 80c35f6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80c35fa:	4116      	asrs	r6, r2
 80c35fc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80c3600:	2000      	movs	r0, #0
 80c3602:	ea23 0106 	bic.w	r1, r3, r6
 80c3606:	f1c2 0214 	rsb	r2, r2, #20
 80c360a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80c360e:	fa4a fa02 	asr.w	sl, sl, r2
 80c3612:	f1bb 0f00 	cmp.w	fp, #0
 80c3616:	4602      	mov	r2, r0
 80c3618:	460b      	mov	r3, r1
 80c361a:	4620      	mov	r0, r4
 80c361c:	4629      	mov	r1, r5
 80c361e:	bfb8      	it	lt
 80c3620:	f1ca 0a00 	rsblt	sl, sl, #0
 80c3624:	f7dc fe30 	bl	80a0288 <__aeabi_dsub>
 80c3628:	ec41 0b19 	vmov	d9, r0, r1
 80c362c:	4642      	mov	r2, r8
 80c362e:	464b      	mov	r3, r9
 80c3630:	ec51 0b19 	vmov	r0, r1, d9
 80c3634:	f7dc fe2a 	bl	80a028c <__adddf3>
 80c3638:	2400      	movs	r4, #0
 80c363a:	a379      	add	r3, pc, #484	; (adr r3, 80c3820 <__ieee754_pow+0x9e0>)
 80c363c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80c3640:	4620      	mov	r0, r4
 80c3642:	460d      	mov	r5, r1
 80c3644:	f7dc ffd8 	bl	80a05f8 <__aeabi_dmul>
 80c3648:	ec53 2b19 	vmov	r2, r3, d9
 80c364c:	4606      	mov	r6, r0
 80c364e:	460f      	mov	r7, r1
 80c3650:	4620      	mov	r0, r4
 80c3652:	4629      	mov	r1, r5
 80c3654:	f7dc fe18 	bl	80a0288 <__aeabi_dsub>
 80c3658:	4602      	mov	r2, r0
 80c365a:	460b      	mov	r3, r1
 80c365c:	4640      	mov	r0, r8
 80c365e:	4649      	mov	r1, r9
 80c3660:	f7dc fe12 	bl	80a0288 <__aeabi_dsub>
 80c3664:	a370      	add	r3, pc, #448	; (adr r3, 80c3828 <__ieee754_pow+0x9e8>)
 80c3666:	e9d3 2300 	ldrd	r2, r3, [r3]
 80c366a:	f7dc ffc5 	bl	80a05f8 <__aeabi_dmul>
 80c366e:	a370      	add	r3, pc, #448	; (adr r3, 80c3830 <__ieee754_pow+0x9f0>)
 80c3670:	e9d3 2300 	ldrd	r2, r3, [r3]
 80c3674:	4680      	mov	r8, r0
 80c3676:	4689      	mov	r9, r1
 80c3678:	4620      	mov	r0, r4
 80c367a:	4629      	mov	r1, r5
 80c367c:	f7dc ffbc 	bl	80a05f8 <__aeabi_dmul>
 80c3680:	4602      	mov	r2, r0
 80c3682:	460b      	mov	r3, r1
 80c3684:	4640      	mov	r0, r8
 80c3686:	4649      	mov	r1, r9
 80c3688:	f7dc fe00 	bl	80a028c <__adddf3>
 80c368c:	4604      	mov	r4, r0
 80c368e:	460d      	mov	r5, r1
 80c3690:	4602      	mov	r2, r0
 80c3692:	460b      	mov	r3, r1
 80c3694:	4630      	mov	r0, r6
 80c3696:	4639      	mov	r1, r7
 80c3698:	f7dc fdf8 	bl	80a028c <__adddf3>
 80c369c:	4632      	mov	r2, r6
 80c369e:	463b      	mov	r3, r7
 80c36a0:	4680      	mov	r8, r0
 80c36a2:	4689      	mov	r9, r1
 80c36a4:	f7dc fdf0 	bl	80a0288 <__aeabi_dsub>
 80c36a8:	4602      	mov	r2, r0
 80c36aa:	460b      	mov	r3, r1
 80c36ac:	4620      	mov	r0, r4
 80c36ae:	4629      	mov	r1, r5
 80c36b0:	f7dc fdea 	bl	80a0288 <__aeabi_dsub>
 80c36b4:	4642      	mov	r2, r8
 80c36b6:	4606      	mov	r6, r0
 80c36b8:	460f      	mov	r7, r1
 80c36ba:	464b      	mov	r3, r9
 80c36bc:	4640      	mov	r0, r8
 80c36be:	4649      	mov	r1, r9
 80c36c0:	f7dc ff9a 	bl	80a05f8 <__aeabi_dmul>
 80c36c4:	a35c      	add	r3, pc, #368	; (adr r3, 80c3838 <__ieee754_pow+0x9f8>)
 80c36c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80c36ca:	4604      	mov	r4, r0
 80c36cc:	460d      	mov	r5, r1
 80c36ce:	f7dc ff93 	bl	80a05f8 <__aeabi_dmul>
 80c36d2:	a35b      	add	r3, pc, #364	; (adr r3, 80c3840 <__ieee754_pow+0xa00>)
 80c36d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80c36d8:	f7dc fdd6 	bl	80a0288 <__aeabi_dsub>
 80c36dc:	4622      	mov	r2, r4
 80c36de:	462b      	mov	r3, r5
 80c36e0:	f7dc ff8a 	bl	80a05f8 <__aeabi_dmul>
 80c36e4:	a358      	add	r3, pc, #352	; (adr r3, 80c3848 <__ieee754_pow+0xa08>)
 80c36e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80c36ea:	f7dc fdcf 	bl	80a028c <__adddf3>
 80c36ee:	4622      	mov	r2, r4
 80c36f0:	462b      	mov	r3, r5
 80c36f2:	f7dc ff81 	bl	80a05f8 <__aeabi_dmul>
 80c36f6:	a356      	add	r3, pc, #344	; (adr r3, 80c3850 <__ieee754_pow+0xa10>)
 80c36f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80c36fc:	f7dc fdc4 	bl	80a0288 <__aeabi_dsub>
 80c3700:	4622      	mov	r2, r4
 80c3702:	462b      	mov	r3, r5
 80c3704:	f7dc ff78 	bl	80a05f8 <__aeabi_dmul>
 80c3708:	a353      	add	r3, pc, #332	; (adr r3, 80c3858 <__ieee754_pow+0xa18>)
 80c370a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80c370e:	f7dc fdbd 	bl	80a028c <__adddf3>
 80c3712:	4622      	mov	r2, r4
 80c3714:	462b      	mov	r3, r5
 80c3716:	f7dc ff6f 	bl	80a05f8 <__aeabi_dmul>
 80c371a:	4602      	mov	r2, r0
 80c371c:	460b      	mov	r3, r1
 80c371e:	4640      	mov	r0, r8
 80c3720:	4649      	mov	r1, r9
 80c3722:	f7dc fdb1 	bl	80a0288 <__aeabi_dsub>
 80c3726:	4604      	mov	r4, r0
 80c3728:	460d      	mov	r5, r1
 80c372a:	4602      	mov	r2, r0
 80c372c:	460b      	mov	r3, r1
 80c372e:	4640      	mov	r0, r8
 80c3730:	4649      	mov	r1, r9
 80c3732:	f7dc ff61 	bl	80a05f8 <__aeabi_dmul>
 80c3736:	2200      	movs	r2, #0
 80c3738:	ec41 0b19 	vmov	d9, r0, r1
 80c373c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80c3740:	4620      	mov	r0, r4
 80c3742:	4629      	mov	r1, r5
 80c3744:	f7dc fda0 	bl	80a0288 <__aeabi_dsub>
 80c3748:	4602      	mov	r2, r0
 80c374a:	460b      	mov	r3, r1
 80c374c:	ec51 0b19 	vmov	r0, r1, d9
 80c3750:	f7dd f87c 	bl	80a084c <__aeabi_ddiv>
 80c3754:	4632      	mov	r2, r6
 80c3756:	4604      	mov	r4, r0
 80c3758:	460d      	mov	r5, r1
 80c375a:	463b      	mov	r3, r7
 80c375c:	4640      	mov	r0, r8
 80c375e:	4649      	mov	r1, r9
 80c3760:	f7dc ff4a 	bl	80a05f8 <__aeabi_dmul>
 80c3764:	4632      	mov	r2, r6
 80c3766:	463b      	mov	r3, r7
 80c3768:	f7dc fd90 	bl	80a028c <__adddf3>
 80c376c:	4602      	mov	r2, r0
 80c376e:	460b      	mov	r3, r1
 80c3770:	4620      	mov	r0, r4
 80c3772:	4629      	mov	r1, r5
 80c3774:	f7dc fd88 	bl	80a0288 <__aeabi_dsub>
 80c3778:	4642      	mov	r2, r8
 80c377a:	464b      	mov	r3, r9
 80c377c:	f7dc fd84 	bl	80a0288 <__aeabi_dsub>
 80c3780:	460b      	mov	r3, r1
 80c3782:	4602      	mov	r2, r0
 80c3784:	493a      	ldr	r1, [pc, #232]	; (80c3870 <__ieee754_pow+0xa30>)
 80c3786:	2000      	movs	r0, #0
 80c3788:	f7dc fd7e 	bl	80a0288 <__aeabi_dsub>
 80c378c:	e9cd 0100 	strd	r0, r1, [sp]
 80c3790:	9b01      	ldr	r3, [sp, #4]
 80c3792:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80c3796:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80c379a:	da2f      	bge.n	80c37fc <__ieee754_pow+0x9bc>
 80c379c:	4650      	mov	r0, sl
 80c379e:	ed9d 0b00 	vldr	d0, [sp]
 80c37a2:	f000 ffc5 	bl	80c4730 <scalbn>
 80c37a6:	ec51 0b10 	vmov	r0, r1, d0
 80c37aa:	ec53 2b18 	vmov	r2, r3, d8
 80c37ae:	f7ff bbe0 	b.w	80c2f72 <__ieee754_pow+0x132>
 80c37b2:	4b30      	ldr	r3, [pc, #192]	; (80c3874 <__ieee754_pow+0xa34>)
 80c37b4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80c37b8:	429e      	cmp	r6, r3
 80c37ba:	f77f af0b 	ble.w	80c35d4 <__ieee754_pow+0x794>
 80c37be:	4b2e      	ldr	r3, [pc, #184]	; (80c3878 <__ieee754_pow+0xa38>)
 80c37c0:	440b      	add	r3, r1
 80c37c2:	4303      	orrs	r3, r0
 80c37c4:	d00b      	beq.n	80c37de <__ieee754_pow+0x99e>
 80c37c6:	a326      	add	r3, pc, #152	; (adr r3, 80c3860 <__ieee754_pow+0xa20>)
 80c37c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80c37cc:	ec51 0b18 	vmov	r0, r1, d8
 80c37d0:	f7dc ff12 	bl	80a05f8 <__aeabi_dmul>
 80c37d4:	a322      	add	r3, pc, #136	; (adr r3, 80c3860 <__ieee754_pow+0xa20>)
 80c37d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80c37da:	f7ff bbca 	b.w	80c2f72 <__ieee754_pow+0x132>
 80c37de:	4622      	mov	r2, r4
 80c37e0:	462b      	mov	r3, r5
 80c37e2:	f7dc fd51 	bl	80a0288 <__aeabi_dsub>
 80c37e6:	4642      	mov	r2, r8
 80c37e8:	464b      	mov	r3, r9
 80c37ea:	f7dd f98b 	bl	80a0b04 <__aeabi_dcmpge>
 80c37ee:	2800      	cmp	r0, #0
 80c37f0:	f43f aef0 	beq.w	80c35d4 <__ieee754_pow+0x794>
 80c37f4:	e7e7      	b.n	80c37c6 <__ieee754_pow+0x986>
 80c37f6:	f04f 0a00 	mov.w	sl, #0
 80c37fa:	e717      	b.n	80c362c <__ieee754_pow+0x7ec>
 80c37fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80c3800:	4619      	mov	r1, r3
 80c3802:	e7d2      	b.n	80c37aa <__ieee754_pow+0x96a>
 80c3804:	491a      	ldr	r1, [pc, #104]	; (80c3870 <__ieee754_pow+0xa30>)
 80c3806:	2000      	movs	r0, #0
 80c3808:	f7ff bb9e 	b.w	80c2f48 <__ieee754_pow+0x108>
 80c380c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80c3810:	f7ff bb9a 	b.w	80c2f48 <__ieee754_pow+0x108>
 80c3814:	9000      	str	r0, [sp, #0]
 80c3816:	f7ff bb76 	b.w	80c2f06 <__ieee754_pow+0xc6>
 80c381a:	2100      	movs	r1, #0
 80c381c:	f7ff bb60 	b.w	80c2ee0 <__ieee754_pow+0xa0>
 80c3820:	00000000 	.word	0x00000000
 80c3824:	3fe62e43 	.word	0x3fe62e43
 80c3828:	fefa39ef 	.word	0xfefa39ef
 80c382c:	3fe62e42 	.word	0x3fe62e42
 80c3830:	0ca86c39 	.word	0x0ca86c39
 80c3834:	be205c61 	.word	0xbe205c61
 80c3838:	72bea4d0 	.word	0x72bea4d0
 80c383c:	3e663769 	.word	0x3e663769
 80c3840:	c5d26bf1 	.word	0xc5d26bf1
 80c3844:	3ebbbd41 	.word	0x3ebbbd41
 80c3848:	af25de2c 	.word	0xaf25de2c
 80c384c:	3f11566a 	.word	0x3f11566a
 80c3850:	16bebd93 	.word	0x16bebd93
 80c3854:	3f66c16c 	.word	0x3f66c16c
 80c3858:	5555553e 	.word	0x5555553e
 80c385c:	3fc55555 	.word	0x3fc55555
 80c3860:	c2f8f359 	.word	0xc2f8f359
 80c3864:	01a56e1f 	.word	0x01a56e1f
 80c3868:	3fe00000 	.word	0x3fe00000
 80c386c:	000fffff 	.word	0x000fffff
 80c3870:	3ff00000 	.word	0x3ff00000
 80c3874:	4090cbff 	.word	0x4090cbff
 80c3878:	3f6f3400 	.word	0x3f6f3400
 80c387c:	652b82fe 	.word	0x652b82fe
 80c3880:	3c971547 	.word	0x3c971547

080c3884 <__ieee754_sqrt>:
 80c3884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80c3888:	ec55 4b10 	vmov	r4, r5, d0
 80c388c:	4e56      	ldr	r6, [pc, #344]	; (80c39e8 <__ieee754_sqrt+0x164>)
 80c388e:	43ae      	bics	r6, r5
 80c3890:	ee10 0a10 	vmov	r0, s0
 80c3894:	ee10 3a10 	vmov	r3, s0
 80c3898:	4629      	mov	r1, r5
 80c389a:	462a      	mov	r2, r5
 80c389c:	d110      	bne.n	80c38c0 <__ieee754_sqrt+0x3c>
 80c389e:	ee10 2a10 	vmov	r2, s0
 80c38a2:	462b      	mov	r3, r5
 80c38a4:	f7dc fea8 	bl	80a05f8 <__aeabi_dmul>
 80c38a8:	4602      	mov	r2, r0
 80c38aa:	460b      	mov	r3, r1
 80c38ac:	4620      	mov	r0, r4
 80c38ae:	4629      	mov	r1, r5
 80c38b0:	f7dc fcec 	bl	80a028c <__adddf3>
 80c38b4:	4604      	mov	r4, r0
 80c38b6:	460d      	mov	r5, r1
 80c38b8:	ec45 4b10 	vmov	d0, r4, r5
 80c38bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80c38c0:	2d00      	cmp	r5, #0
 80c38c2:	dc10      	bgt.n	80c38e6 <__ieee754_sqrt+0x62>
 80c38c4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80c38c8:	4330      	orrs	r0, r6
 80c38ca:	d0f5      	beq.n	80c38b8 <__ieee754_sqrt+0x34>
 80c38cc:	b15d      	cbz	r5, 80c38e6 <__ieee754_sqrt+0x62>
 80c38ce:	ee10 2a10 	vmov	r2, s0
 80c38d2:	462b      	mov	r3, r5
 80c38d4:	ee10 0a10 	vmov	r0, s0
 80c38d8:	f7dc fcd6 	bl	80a0288 <__aeabi_dsub>
 80c38dc:	4602      	mov	r2, r0
 80c38de:	460b      	mov	r3, r1
 80c38e0:	f7dc ffb4 	bl	80a084c <__aeabi_ddiv>
 80c38e4:	e7e6      	b.n	80c38b4 <__ieee754_sqrt+0x30>
 80c38e6:	1509      	asrs	r1, r1, #20
 80c38e8:	d076      	beq.n	80c39d8 <__ieee754_sqrt+0x154>
 80c38ea:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80c38ee:	07ce      	lsls	r6, r1, #31
 80c38f0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80c38f4:	bf5e      	ittt	pl
 80c38f6:	0fda      	lsrpl	r2, r3, #31
 80c38f8:	005b      	lslpl	r3, r3, #1
 80c38fa:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80c38fe:	0fda      	lsrs	r2, r3, #31
 80c3900:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80c3904:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80c3908:	2000      	movs	r0, #0
 80c390a:	106d      	asrs	r5, r5, #1
 80c390c:	005b      	lsls	r3, r3, #1
 80c390e:	f04f 0e16 	mov.w	lr, #22
 80c3912:	4684      	mov	ip, r0
 80c3914:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80c3918:	eb0c 0401 	add.w	r4, ip, r1
 80c391c:	4294      	cmp	r4, r2
 80c391e:	bfde      	ittt	le
 80c3920:	1b12      	suble	r2, r2, r4
 80c3922:	eb04 0c01 	addle.w	ip, r4, r1
 80c3926:	1840      	addle	r0, r0, r1
 80c3928:	0052      	lsls	r2, r2, #1
 80c392a:	f1be 0e01 	subs.w	lr, lr, #1
 80c392e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80c3932:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80c3936:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80c393a:	d1ed      	bne.n	80c3918 <__ieee754_sqrt+0x94>
 80c393c:	4671      	mov	r1, lr
 80c393e:	2720      	movs	r7, #32
 80c3940:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80c3944:	4562      	cmp	r2, ip
 80c3946:	eb04 060e 	add.w	r6, r4, lr
 80c394a:	dc02      	bgt.n	80c3952 <__ieee754_sqrt+0xce>
 80c394c:	d113      	bne.n	80c3976 <__ieee754_sqrt+0xf2>
 80c394e:	429e      	cmp	r6, r3
 80c3950:	d811      	bhi.n	80c3976 <__ieee754_sqrt+0xf2>
 80c3952:	2e00      	cmp	r6, #0
 80c3954:	eb06 0e04 	add.w	lr, r6, r4
 80c3958:	da43      	bge.n	80c39e2 <__ieee754_sqrt+0x15e>
 80c395a:	f1be 0f00 	cmp.w	lr, #0
 80c395e:	db40      	blt.n	80c39e2 <__ieee754_sqrt+0x15e>
 80c3960:	f10c 0801 	add.w	r8, ip, #1
 80c3964:	eba2 020c 	sub.w	r2, r2, ip
 80c3968:	429e      	cmp	r6, r3
 80c396a:	bf88      	it	hi
 80c396c:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 80c3970:	1b9b      	subs	r3, r3, r6
 80c3972:	4421      	add	r1, r4
 80c3974:	46c4      	mov	ip, r8
 80c3976:	0052      	lsls	r2, r2, #1
 80c3978:	3f01      	subs	r7, #1
 80c397a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80c397e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80c3982:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80c3986:	d1dd      	bne.n	80c3944 <__ieee754_sqrt+0xc0>
 80c3988:	4313      	orrs	r3, r2
 80c398a:	d006      	beq.n	80c399a <__ieee754_sqrt+0x116>
 80c398c:	1c4c      	adds	r4, r1, #1
 80c398e:	bf13      	iteet	ne
 80c3990:	3101      	addne	r1, #1
 80c3992:	3001      	addeq	r0, #1
 80c3994:	4639      	moveq	r1, r7
 80c3996:	f021 0101 	bicne.w	r1, r1, #1
 80c399a:	1043      	asrs	r3, r0, #1
 80c399c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80c39a0:	0849      	lsrs	r1, r1, #1
 80c39a2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80c39a6:	07c2      	lsls	r2, r0, #31
 80c39a8:	bf48      	it	mi
 80c39aa:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80c39ae:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80c39b2:	460c      	mov	r4, r1
 80c39b4:	463d      	mov	r5, r7
 80c39b6:	e77f      	b.n	80c38b8 <__ieee754_sqrt+0x34>
 80c39b8:	0ada      	lsrs	r2, r3, #11
 80c39ba:	3815      	subs	r0, #21
 80c39bc:	055b      	lsls	r3, r3, #21
 80c39be:	2a00      	cmp	r2, #0
 80c39c0:	d0fa      	beq.n	80c39b8 <__ieee754_sqrt+0x134>
 80c39c2:	02d7      	lsls	r7, r2, #11
 80c39c4:	d50a      	bpl.n	80c39dc <__ieee754_sqrt+0x158>
 80c39c6:	f1c1 0420 	rsb	r4, r1, #32
 80c39ca:	fa23 f404 	lsr.w	r4, r3, r4
 80c39ce:	1e4d      	subs	r5, r1, #1
 80c39d0:	408b      	lsls	r3, r1
 80c39d2:	4322      	orrs	r2, r4
 80c39d4:	1b41      	subs	r1, r0, r5
 80c39d6:	e788      	b.n	80c38ea <__ieee754_sqrt+0x66>
 80c39d8:	4608      	mov	r0, r1
 80c39da:	e7f0      	b.n	80c39be <__ieee754_sqrt+0x13a>
 80c39dc:	0052      	lsls	r2, r2, #1
 80c39de:	3101      	adds	r1, #1
 80c39e0:	e7ef      	b.n	80c39c2 <__ieee754_sqrt+0x13e>
 80c39e2:	46e0      	mov	r8, ip
 80c39e4:	e7be      	b.n	80c3964 <__ieee754_sqrt+0xe0>
 80c39e6:	bf00      	nop
 80c39e8:	7ff00000 	.word	0x7ff00000

080c39ec <__ieee754_asinf>:
 80c39ec:	b538      	push	{r3, r4, r5, lr}
 80c39ee:	ee10 5a10 	vmov	r5, s0
 80c39f2:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80c39f6:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80c39fa:	ed2d 8b04 	vpush	{d8-d9}
 80c39fe:	d10c      	bne.n	80c3a1a <__ieee754_asinf+0x2e>
 80c3a00:	eddf 7a5d 	vldr	s15, [pc, #372]	; 80c3b78 <__ieee754_asinf+0x18c>
 80c3a04:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80c3b7c <__ieee754_asinf+0x190>
 80c3a08:	ee60 7a27 	vmul.f32	s15, s0, s15
 80c3a0c:	eee0 7a07 	vfma.f32	s15, s0, s14
 80c3a10:	eeb0 0a67 	vmov.f32	s0, s15
 80c3a14:	ecbd 8b04 	vpop	{d8-d9}
 80c3a18:	bd38      	pop	{r3, r4, r5, pc}
 80c3a1a:	dd04      	ble.n	80c3a26 <__ieee754_asinf+0x3a>
 80c3a1c:	ee70 7a40 	vsub.f32	s15, s0, s0
 80c3a20:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80c3a24:	e7f6      	b.n	80c3a14 <__ieee754_asinf+0x28>
 80c3a26:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80c3a2a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80c3a2e:	da0b      	bge.n	80c3a48 <__ieee754_asinf+0x5c>
 80c3a30:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 80c3a34:	da52      	bge.n	80c3adc <__ieee754_asinf+0xf0>
 80c3a36:	eddf 7a52 	vldr	s15, [pc, #328]	; 80c3b80 <__ieee754_asinf+0x194>
 80c3a3a:	ee70 7a27 	vadd.f32	s15, s0, s15
 80c3a3e:	eef4 7ae8 	vcmpe.f32	s15, s17
 80c3a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80c3a46:	dce5      	bgt.n	80c3a14 <__ieee754_asinf+0x28>
 80c3a48:	f000 ffcc 	bl	80c49e4 <fabsf>
 80c3a4c:	ee38 0ac0 	vsub.f32	s0, s17, s0
 80c3a50:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 80c3a54:	ee20 8a08 	vmul.f32	s16, s0, s16
 80c3a58:	eddf 7a4a 	vldr	s15, [pc, #296]	; 80c3b84 <__ieee754_asinf+0x198>
 80c3a5c:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80c3b88 <__ieee754_asinf+0x19c>
 80c3a60:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 80c3b8c <__ieee754_asinf+0x1a0>
 80c3a64:	eea8 7a27 	vfma.f32	s14, s16, s15
 80c3a68:	eddf 7a49 	vldr	s15, [pc, #292]	; 80c3b90 <__ieee754_asinf+0x1a4>
 80c3a6c:	eee7 7a08 	vfma.f32	s15, s14, s16
 80c3a70:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80c3b94 <__ieee754_asinf+0x1a8>
 80c3a74:	eea7 7a88 	vfma.f32	s14, s15, s16
 80c3a78:	eddf 7a47 	vldr	s15, [pc, #284]	; 80c3b98 <__ieee754_asinf+0x1ac>
 80c3a7c:	eee7 7a08 	vfma.f32	s15, s14, s16
 80c3a80:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80c3b9c <__ieee754_asinf+0x1b0>
 80c3a84:	eea7 9a88 	vfma.f32	s18, s15, s16
 80c3a88:	eddf 7a45 	vldr	s15, [pc, #276]	; 80c3ba0 <__ieee754_asinf+0x1b4>
 80c3a8c:	eee8 7a07 	vfma.f32	s15, s16, s14
 80c3a90:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80c3ba4 <__ieee754_asinf+0x1b8>
 80c3a94:	eea7 7a88 	vfma.f32	s14, s15, s16
 80c3a98:	eddf 7a43 	vldr	s15, [pc, #268]	; 80c3ba8 <__ieee754_asinf+0x1bc>
 80c3a9c:	eee7 7a08 	vfma.f32	s15, s14, s16
 80c3aa0:	eeb0 0a48 	vmov.f32	s0, s16
 80c3aa4:	eee7 8a88 	vfma.f32	s17, s15, s16
 80c3aa8:	f000 fa62 	bl	80c3f70 <__ieee754_sqrtf>
 80c3aac:	4b3f      	ldr	r3, [pc, #252]	; (80c3bac <__ieee754_asinf+0x1c0>)
 80c3aae:	ee29 9a08 	vmul.f32	s18, s18, s16
 80c3ab2:	429c      	cmp	r4, r3
 80c3ab4:	ee89 6a28 	vdiv.f32	s12, s18, s17
 80c3ab8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80c3abc:	dd3d      	ble.n	80c3b3a <__ieee754_asinf+0x14e>
 80c3abe:	eea0 0a06 	vfma.f32	s0, s0, s12
 80c3ac2:	eddf 7a3b 	vldr	s15, [pc, #236]	; 80c3bb0 <__ieee754_asinf+0x1c4>
 80c3ac6:	eee0 7a26 	vfma.f32	s15, s0, s13
 80c3aca:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80c3b7c <__ieee754_asinf+0x190>
 80c3ace:	ee30 0a67 	vsub.f32	s0, s0, s15
 80c3ad2:	2d00      	cmp	r5, #0
 80c3ad4:	bfd8      	it	le
 80c3ad6:	eeb1 0a40 	vnegle.f32	s0, s0
 80c3ada:	e79b      	b.n	80c3a14 <__ieee754_asinf+0x28>
 80c3adc:	ee60 7a00 	vmul.f32	s15, s0, s0
 80c3ae0:	eddf 6a28 	vldr	s13, [pc, #160]	; 80c3b84 <__ieee754_asinf+0x198>
 80c3ae4:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80c3b88 <__ieee754_asinf+0x19c>
 80c3ae8:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 80c3b9c <__ieee754_asinf+0x1b0>
 80c3aec:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80c3af0:	eddf 6a27 	vldr	s13, [pc, #156]	; 80c3b90 <__ieee754_asinf+0x1a4>
 80c3af4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80c3af8:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80c3b94 <__ieee754_asinf+0x1a8>
 80c3afc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80c3b00:	eddf 6a25 	vldr	s13, [pc, #148]	; 80c3b98 <__ieee754_asinf+0x1ac>
 80c3b04:	eee7 6a27 	vfma.f32	s13, s14, s15
 80c3b08:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80c3b8c <__ieee754_asinf+0x1a0>
 80c3b0c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80c3b10:	eddf 6a23 	vldr	s13, [pc, #140]	; 80c3ba0 <__ieee754_asinf+0x1b4>
 80c3b14:	eee7 6a86 	vfma.f32	s13, s15, s12
 80c3b18:	ed9f 6a22 	vldr	s12, [pc, #136]	; 80c3ba4 <__ieee754_asinf+0x1b8>
 80c3b1c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80c3b20:	eddf 6a21 	vldr	s13, [pc, #132]	; 80c3ba8 <__ieee754_asinf+0x1bc>
 80c3b24:	eee6 6a27 	vfma.f32	s13, s12, s15
 80c3b28:	ee27 7a27 	vmul.f32	s14, s14, s15
 80c3b2c:	eee6 8aa7 	vfma.f32	s17, s13, s15
 80c3b30:	eec7 7a28 	vdiv.f32	s15, s14, s17
 80c3b34:	eea0 0a27 	vfma.f32	s0, s0, s15
 80c3b38:	e76c      	b.n	80c3a14 <__ieee754_asinf+0x28>
 80c3b3a:	ee10 3a10 	vmov	r3, s0
 80c3b3e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80c3b42:	f023 030f 	bic.w	r3, r3, #15
 80c3b46:	ee07 3a10 	vmov	s14, r3
 80c3b4a:	eea7 8a47 	vfms.f32	s16, s14, s14
 80c3b4e:	ee70 7a07 	vadd.f32	s15, s0, s14
 80c3b52:	ee30 0a00 	vadd.f32	s0, s0, s0
 80c3b56:	eec8 5a27 	vdiv.f32	s11, s16, s15
 80c3b5a:	eddf 7a07 	vldr	s15, [pc, #28]	; 80c3b78 <__ieee754_asinf+0x18c>
 80c3b5e:	eee5 7ae6 	vfms.f32	s15, s11, s13
 80c3b62:	eed0 7a06 	vfnms.f32	s15, s0, s12
 80c3b66:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80c3bb4 <__ieee754_asinf+0x1c8>
 80c3b6a:	eeb0 6a40 	vmov.f32	s12, s0
 80c3b6e:	eea7 6a66 	vfms.f32	s12, s14, s13
 80c3b72:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80c3b76:	e7aa      	b.n	80c3ace <__ieee754_asinf+0xe2>
 80c3b78:	b33bbd2e 	.word	0xb33bbd2e
 80c3b7c:	3fc90fdb 	.word	0x3fc90fdb
 80c3b80:	7149f2ca 	.word	0x7149f2ca
 80c3b84:	3811ef08 	.word	0x3811ef08
 80c3b88:	3a4f7f04 	.word	0x3a4f7f04
 80c3b8c:	3e2aaaab 	.word	0x3e2aaaab
 80c3b90:	bd241146 	.word	0xbd241146
 80c3b94:	3e4e0aa8 	.word	0x3e4e0aa8
 80c3b98:	bea6b090 	.word	0xbea6b090
 80c3b9c:	3d9dc62e 	.word	0x3d9dc62e
 80c3ba0:	bf303361 	.word	0xbf303361
 80c3ba4:	4001572d 	.word	0x4001572d
 80c3ba8:	c019d139 	.word	0xc019d139
 80c3bac:	3f799999 	.word	0x3f799999
 80c3bb0:	333bbd2e 	.word	0x333bbd2e
 80c3bb4:	3f490fdb 	.word	0x3f490fdb

080c3bb8 <__ieee754_atan2f>:
 80c3bb8:	ee10 2a90 	vmov	r2, s1
 80c3bbc:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80c3bc0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80c3bc4:	b510      	push	{r4, lr}
 80c3bc6:	eef0 7a40 	vmov.f32	s15, s0
 80c3bca:	dc06      	bgt.n	80c3bda <__ieee754_atan2f+0x22>
 80c3bcc:	ee10 0a10 	vmov	r0, s0
 80c3bd0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80c3bd4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80c3bd8:	dd04      	ble.n	80c3be4 <__ieee754_atan2f+0x2c>
 80c3bda:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80c3bde:	eeb0 0a67 	vmov.f32	s0, s15
 80c3be2:	bd10      	pop	{r4, pc}
 80c3be4:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80c3be8:	d103      	bne.n	80c3bf2 <__ieee754_atan2f+0x3a>
 80c3bea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80c3bee:	f000 be25 	b.w	80c483c <atanf>
 80c3bf2:	1794      	asrs	r4, r2, #30
 80c3bf4:	f004 0402 	and.w	r4, r4, #2
 80c3bf8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80c3bfc:	b943      	cbnz	r3, 80c3c10 <__ieee754_atan2f+0x58>
 80c3bfe:	2c02      	cmp	r4, #2
 80c3c00:	d05e      	beq.n	80c3cc0 <__ieee754_atan2f+0x108>
 80c3c02:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80c3cd4 <__ieee754_atan2f+0x11c>
 80c3c06:	2c03      	cmp	r4, #3
 80c3c08:	bf08      	it	eq
 80c3c0a:	eef0 7a47 	vmoveq.f32	s15, s14
 80c3c0e:	e7e6      	b.n	80c3bde <__ieee754_atan2f+0x26>
 80c3c10:	b941      	cbnz	r1, 80c3c24 <__ieee754_atan2f+0x6c>
 80c3c12:	eddf 7a31 	vldr	s15, [pc, #196]	; 80c3cd8 <__ieee754_atan2f+0x120>
 80c3c16:	ed9f 0a31 	vldr	s0, [pc, #196]	; 80c3cdc <__ieee754_atan2f+0x124>
 80c3c1a:	2800      	cmp	r0, #0
 80c3c1c:	bfb8      	it	lt
 80c3c1e:	eef0 7a40 	vmovlt.f32	s15, s0
 80c3c22:	e7dc      	b.n	80c3bde <__ieee754_atan2f+0x26>
 80c3c24:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80c3c28:	d110      	bne.n	80c3c4c <__ieee754_atan2f+0x94>
 80c3c2a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80c3c2e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80c3c32:	d107      	bne.n	80c3c44 <__ieee754_atan2f+0x8c>
 80c3c34:	2c02      	cmp	r4, #2
 80c3c36:	d846      	bhi.n	80c3cc6 <__ieee754_atan2f+0x10e>
 80c3c38:	4b29      	ldr	r3, [pc, #164]	; (80c3ce0 <__ieee754_atan2f+0x128>)
 80c3c3a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80c3c3e:	edd4 7a00 	vldr	s15, [r4]
 80c3c42:	e7cc      	b.n	80c3bde <__ieee754_atan2f+0x26>
 80c3c44:	2c02      	cmp	r4, #2
 80c3c46:	d841      	bhi.n	80c3ccc <__ieee754_atan2f+0x114>
 80c3c48:	4b26      	ldr	r3, [pc, #152]	; (80c3ce4 <__ieee754_atan2f+0x12c>)
 80c3c4a:	e7f6      	b.n	80c3c3a <__ieee754_atan2f+0x82>
 80c3c4c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80c3c50:	d0df      	beq.n	80c3c12 <__ieee754_atan2f+0x5a>
 80c3c52:	1a5b      	subs	r3, r3, r1
 80c3c54:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 80c3c58:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80c3c5c:	da1a      	bge.n	80c3c94 <__ieee754_atan2f+0xdc>
 80c3c5e:	2a00      	cmp	r2, #0
 80c3c60:	da01      	bge.n	80c3c66 <__ieee754_atan2f+0xae>
 80c3c62:	313c      	adds	r1, #60	; 0x3c
 80c3c64:	db19      	blt.n	80c3c9a <__ieee754_atan2f+0xe2>
 80c3c66:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80c3c6a:	f000 febb 	bl	80c49e4 <fabsf>
 80c3c6e:	f000 fde5 	bl	80c483c <atanf>
 80c3c72:	eef0 7a40 	vmov.f32	s15, s0
 80c3c76:	2c01      	cmp	r4, #1
 80c3c78:	d012      	beq.n	80c3ca0 <__ieee754_atan2f+0xe8>
 80c3c7a:	2c02      	cmp	r4, #2
 80c3c7c:	d017      	beq.n	80c3cae <__ieee754_atan2f+0xf6>
 80c3c7e:	2c00      	cmp	r4, #0
 80c3c80:	d0ad      	beq.n	80c3bde <__ieee754_atan2f+0x26>
 80c3c82:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80c3ce8 <__ieee754_atan2f+0x130>
 80c3c86:	ee77 7a80 	vadd.f32	s15, s15, s0
 80c3c8a:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80c3cec <__ieee754_atan2f+0x134>
 80c3c8e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80c3c92:	e7a4      	b.n	80c3bde <__ieee754_atan2f+0x26>
 80c3c94:	eddf 7a10 	vldr	s15, [pc, #64]	; 80c3cd8 <__ieee754_atan2f+0x120>
 80c3c98:	e7ed      	b.n	80c3c76 <__ieee754_atan2f+0xbe>
 80c3c9a:	eddf 7a15 	vldr	s15, [pc, #84]	; 80c3cf0 <__ieee754_atan2f+0x138>
 80c3c9e:	e7ea      	b.n	80c3c76 <__ieee754_atan2f+0xbe>
 80c3ca0:	ee17 3a90 	vmov	r3, s15
 80c3ca4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80c3ca8:	ee07 3a90 	vmov	s15, r3
 80c3cac:	e797      	b.n	80c3bde <__ieee754_atan2f+0x26>
 80c3cae:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80c3ce8 <__ieee754_atan2f+0x130>
 80c3cb2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80c3cb6:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80c3cec <__ieee754_atan2f+0x134>
 80c3cba:	ee70 7a67 	vsub.f32	s15, s0, s15
 80c3cbe:	e78e      	b.n	80c3bde <__ieee754_atan2f+0x26>
 80c3cc0:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80c3cec <__ieee754_atan2f+0x134>
 80c3cc4:	e78b      	b.n	80c3bde <__ieee754_atan2f+0x26>
 80c3cc6:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80c3cf4 <__ieee754_atan2f+0x13c>
 80c3cca:	e788      	b.n	80c3bde <__ieee754_atan2f+0x26>
 80c3ccc:	eddf 7a08 	vldr	s15, [pc, #32]	; 80c3cf0 <__ieee754_atan2f+0x138>
 80c3cd0:	e785      	b.n	80c3bde <__ieee754_atan2f+0x26>
 80c3cd2:	bf00      	nop
 80c3cd4:	c0490fdb 	.word	0xc0490fdb
 80c3cd8:	3fc90fdb 	.word	0x3fc90fdb
 80c3cdc:	bfc90fdb 	.word	0xbfc90fdb
 80c3ce0:	080dd6c8 	.word	0x080dd6c8
 80c3ce4:	080dd6d4 	.word	0x080dd6d4
 80c3ce8:	33bbbd2e 	.word	0x33bbbd2e
 80c3cec:	40490fdb 	.word	0x40490fdb
 80c3cf0:	00000000 	.word	0x00000000
 80c3cf4:	3f490fdb 	.word	0x3f490fdb

080c3cf8 <__ieee754_rem_pio2f>:
 80c3cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80c3cfa:	ee10 6a10 	vmov	r6, s0
 80c3cfe:	4b8e      	ldr	r3, [pc, #568]	; (80c3f38 <__ieee754_rem_pio2f+0x240>)
 80c3d00:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80c3d04:	429d      	cmp	r5, r3
 80c3d06:	b087      	sub	sp, #28
 80c3d08:	eef0 7a40 	vmov.f32	s15, s0
 80c3d0c:	4604      	mov	r4, r0
 80c3d0e:	dc05      	bgt.n	80c3d1c <__ieee754_rem_pio2f+0x24>
 80c3d10:	2300      	movs	r3, #0
 80c3d12:	ed80 0a00 	vstr	s0, [r0]
 80c3d16:	6043      	str	r3, [r0, #4]
 80c3d18:	2000      	movs	r0, #0
 80c3d1a:	e01a      	b.n	80c3d52 <__ieee754_rem_pio2f+0x5a>
 80c3d1c:	4b87      	ldr	r3, [pc, #540]	; (80c3f3c <__ieee754_rem_pio2f+0x244>)
 80c3d1e:	429d      	cmp	r5, r3
 80c3d20:	dc46      	bgt.n	80c3db0 <__ieee754_rem_pio2f+0xb8>
 80c3d22:	2e00      	cmp	r6, #0
 80c3d24:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80c3f40 <__ieee754_rem_pio2f+0x248>
 80c3d28:	4b86      	ldr	r3, [pc, #536]	; (80c3f44 <__ieee754_rem_pio2f+0x24c>)
 80c3d2a:	f025 050f 	bic.w	r5, r5, #15
 80c3d2e:	dd1f      	ble.n	80c3d70 <__ieee754_rem_pio2f+0x78>
 80c3d30:	429d      	cmp	r5, r3
 80c3d32:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80c3d36:	d00e      	beq.n	80c3d56 <__ieee754_rem_pio2f+0x5e>
 80c3d38:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80c3f48 <__ieee754_rem_pio2f+0x250>
 80c3d3c:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80c3d40:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80c3d44:	ed80 0a00 	vstr	s0, [r0]
 80c3d48:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80c3d4c:	2001      	movs	r0, #1
 80c3d4e:	edc4 7a01 	vstr	s15, [r4, #4]
 80c3d52:	b007      	add	sp, #28
 80c3d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80c3d56:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80c3f4c <__ieee754_rem_pio2f+0x254>
 80c3d5a:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80c3f50 <__ieee754_rem_pio2f+0x258>
 80c3d5e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80c3d62:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80c3d66:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80c3d6a:	edc0 6a00 	vstr	s13, [r0]
 80c3d6e:	e7eb      	b.n	80c3d48 <__ieee754_rem_pio2f+0x50>
 80c3d70:	429d      	cmp	r5, r3
 80c3d72:	ee77 7a80 	vadd.f32	s15, s15, s0
 80c3d76:	d00e      	beq.n	80c3d96 <__ieee754_rem_pio2f+0x9e>
 80c3d78:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80c3f48 <__ieee754_rem_pio2f+0x250>
 80c3d7c:	ee37 0a87 	vadd.f32	s0, s15, s14
 80c3d80:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80c3d84:	ed80 0a00 	vstr	s0, [r0]
 80c3d88:	ee77 7a87 	vadd.f32	s15, s15, s14
 80c3d8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80c3d90:	edc4 7a01 	vstr	s15, [r4, #4]
 80c3d94:	e7dd      	b.n	80c3d52 <__ieee754_rem_pio2f+0x5a>
 80c3d96:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 80c3f4c <__ieee754_rem_pio2f+0x254>
 80c3d9a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80c3f50 <__ieee754_rem_pio2f+0x258>
 80c3d9e:	ee77 7a80 	vadd.f32	s15, s15, s0
 80c3da2:	ee77 6a87 	vadd.f32	s13, s15, s14
 80c3da6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80c3daa:	edc0 6a00 	vstr	s13, [r0]
 80c3dae:	e7eb      	b.n	80c3d88 <__ieee754_rem_pio2f+0x90>
 80c3db0:	4b68      	ldr	r3, [pc, #416]	; (80c3f54 <__ieee754_rem_pio2f+0x25c>)
 80c3db2:	429d      	cmp	r5, r3
 80c3db4:	dc72      	bgt.n	80c3e9c <__ieee754_rem_pio2f+0x1a4>
 80c3db6:	f000 fe15 	bl	80c49e4 <fabsf>
 80c3dba:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80c3f58 <__ieee754_rem_pio2f+0x260>
 80c3dbe:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80c3dc2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80c3dc6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80c3dca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80c3dce:	ee17 0a90 	vmov	r0, s15
 80c3dd2:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80c3f40 <__ieee754_rem_pio2f+0x248>
 80c3dd6:	eea7 0a67 	vfms.f32	s0, s14, s15
 80c3dda:	281f      	cmp	r0, #31
 80c3ddc:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80c3f48 <__ieee754_rem_pio2f+0x250>
 80c3de0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80c3de4:	eeb1 6a47 	vneg.f32	s12, s14
 80c3de8:	ee70 6a67 	vsub.f32	s13, s0, s15
 80c3dec:	ee16 2a90 	vmov	r2, s13
 80c3df0:	dc1c      	bgt.n	80c3e2c <__ieee754_rem_pio2f+0x134>
 80c3df2:	495a      	ldr	r1, [pc, #360]	; (80c3f5c <__ieee754_rem_pio2f+0x264>)
 80c3df4:	1e47      	subs	r7, r0, #1
 80c3df6:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80c3dfa:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80c3dfe:	428b      	cmp	r3, r1
 80c3e00:	d014      	beq.n	80c3e2c <__ieee754_rem_pio2f+0x134>
 80c3e02:	6022      	str	r2, [r4, #0]
 80c3e04:	ed94 7a00 	vldr	s14, [r4]
 80c3e08:	ee30 0a47 	vsub.f32	s0, s0, s14
 80c3e0c:	2e00      	cmp	r6, #0
 80c3e0e:	ee30 0a67 	vsub.f32	s0, s0, s15
 80c3e12:	ed84 0a01 	vstr	s0, [r4, #4]
 80c3e16:	da9c      	bge.n	80c3d52 <__ieee754_rem_pio2f+0x5a>
 80c3e18:	eeb1 7a47 	vneg.f32	s14, s14
 80c3e1c:	eeb1 0a40 	vneg.f32	s0, s0
 80c3e20:	ed84 7a00 	vstr	s14, [r4]
 80c3e24:	ed84 0a01 	vstr	s0, [r4, #4]
 80c3e28:	4240      	negs	r0, r0
 80c3e2a:	e792      	b.n	80c3d52 <__ieee754_rem_pio2f+0x5a>
 80c3e2c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80c3e30:	15eb      	asrs	r3, r5, #23
 80c3e32:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 80c3e36:	2d08      	cmp	r5, #8
 80c3e38:	dde3      	ble.n	80c3e02 <__ieee754_rem_pio2f+0x10a>
 80c3e3a:	eddf 7a44 	vldr	s15, [pc, #272]	; 80c3f4c <__ieee754_rem_pio2f+0x254>
 80c3e3e:	eef0 6a40 	vmov.f32	s13, s0
 80c3e42:	eee6 6a27 	vfma.f32	s13, s12, s15
 80c3e46:	ee30 0a66 	vsub.f32	s0, s0, s13
 80c3e4a:	eea6 0a27 	vfma.f32	s0, s12, s15
 80c3e4e:	eddf 7a40 	vldr	s15, [pc, #256]	; 80c3f50 <__ieee754_rem_pio2f+0x258>
 80c3e52:	ee97 0a27 	vfnms.f32	s0, s14, s15
 80c3e56:	ee76 5ac0 	vsub.f32	s11, s13, s0
 80c3e5a:	eef0 7a40 	vmov.f32	s15, s0
 80c3e5e:	ee15 2a90 	vmov	r2, s11
 80c3e62:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80c3e66:	1a5b      	subs	r3, r3, r1
 80c3e68:	2b19      	cmp	r3, #25
 80c3e6a:	dc04      	bgt.n	80c3e76 <__ieee754_rem_pio2f+0x17e>
 80c3e6c:	edc4 5a00 	vstr	s11, [r4]
 80c3e70:	eeb0 0a66 	vmov.f32	s0, s13
 80c3e74:	e7c6      	b.n	80c3e04 <__ieee754_rem_pio2f+0x10c>
 80c3e76:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80c3f60 <__ieee754_rem_pio2f+0x268>
 80c3e7a:	eeb0 0a66 	vmov.f32	s0, s13
 80c3e7e:	eea6 0a25 	vfma.f32	s0, s12, s11
 80c3e82:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80c3e86:	eddf 6a37 	vldr	s13, [pc, #220]	; 80c3f64 <__ieee754_rem_pio2f+0x26c>
 80c3e8a:	eee6 7a25 	vfma.f32	s15, s12, s11
 80c3e8e:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80c3e92:	ee30 7a67 	vsub.f32	s14, s0, s15
 80c3e96:	ed84 7a00 	vstr	s14, [r4]
 80c3e9a:	e7b3      	b.n	80c3e04 <__ieee754_rem_pio2f+0x10c>
 80c3e9c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80c3ea0:	db06      	blt.n	80c3eb0 <__ieee754_rem_pio2f+0x1b8>
 80c3ea2:	ee70 7a40 	vsub.f32	s15, s0, s0
 80c3ea6:	edc0 7a01 	vstr	s15, [r0, #4]
 80c3eaa:	edc0 7a00 	vstr	s15, [r0]
 80c3eae:	e733      	b.n	80c3d18 <__ieee754_rem_pio2f+0x20>
 80c3eb0:	15ea      	asrs	r2, r5, #23
 80c3eb2:	3a86      	subs	r2, #134	; 0x86
 80c3eb4:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80c3eb8:	ee07 3a90 	vmov	s15, r3
 80c3ebc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80c3ec0:	eddf 6a29 	vldr	s13, [pc, #164]	; 80c3f68 <__ieee754_rem_pio2f+0x270>
 80c3ec4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80c3ec8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80c3ecc:	ed8d 7a03 	vstr	s14, [sp, #12]
 80c3ed0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80c3ed4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80c3ed8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80c3edc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80c3ee0:	ed8d 7a04 	vstr	s14, [sp, #16]
 80c3ee4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80c3ee8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80c3eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80c3ef0:	edcd 7a05 	vstr	s15, [sp, #20]
 80c3ef4:	d11e      	bne.n	80c3f34 <__ieee754_rem_pio2f+0x23c>
 80c3ef6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80c3efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80c3efe:	bf14      	ite	ne
 80c3f00:	2302      	movne	r3, #2
 80c3f02:	2301      	moveq	r3, #1
 80c3f04:	4919      	ldr	r1, [pc, #100]	; (80c3f6c <__ieee754_rem_pio2f+0x274>)
 80c3f06:	9101      	str	r1, [sp, #4]
 80c3f08:	2102      	movs	r1, #2
 80c3f0a:	9100      	str	r1, [sp, #0]
 80c3f0c:	a803      	add	r0, sp, #12
 80c3f0e:	4621      	mov	r1, r4
 80c3f10:	f000 f892 	bl	80c4038 <__kernel_rem_pio2f>
 80c3f14:	2e00      	cmp	r6, #0
 80c3f16:	f6bf af1c 	bge.w	80c3d52 <__ieee754_rem_pio2f+0x5a>
 80c3f1a:	edd4 7a00 	vldr	s15, [r4]
 80c3f1e:	eef1 7a67 	vneg.f32	s15, s15
 80c3f22:	edc4 7a00 	vstr	s15, [r4]
 80c3f26:	edd4 7a01 	vldr	s15, [r4, #4]
 80c3f2a:	eef1 7a67 	vneg.f32	s15, s15
 80c3f2e:	edc4 7a01 	vstr	s15, [r4, #4]
 80c3f32:	e779      	b.n	80c3e28 <__ieee754_rem_pio2f+0x130>
 80c3f34:	2303      	movs	r3, #3
 80c3f36:	e7e5      	b.n	80c3f04 <__ieee754_rem_pio2f+0x20c>
 80c3f38:	3f490fd8 	.word	0x3f490fd8
 80c3f3c:	4016cbe3 	.word	0x4016cbe3
 80c3f40:	3fc90f80 	.word	0x3fc90f80
 80c3f44:	3fc90fd0 	.word	0x3fc90fd0
 80c3f48:	37354443 	.word	0x37354443
 80c3f4c:	37354400 	.word	0x37354400
 80c3f50:	2e85a308 	.word	0x2e85a308
 80c3f54:	43490f80 	.word	0x43490f80
 80c3f58:	3f22f984 	.word	0x3f22f984
 80c3f5c:	080dd6e0 	.word	0x080dd6e0
 80c3f60:	2e85a300 	.word	0x2e85a300
 80c3f64:	248d3132 	.word	0x248d3132
 80c3f68:	43800000 	.word	0x43800000
 80c3f6c:	080dd760 	.word	0x080dd760

080c3f70 <__ieee754_sqrtf>:
 80c3f70:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80c3f74:	4770      	bx	lr
	...

080c3f78 <__kernel_cosf>:
 80c3f78:	ee10 3a10 	vmov	r3, s0
 80c3f7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80c3f80:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80c3f84:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80c3f88:	da05      	bge.n	80c3f96 <__kernel_cosf+0x1e>
 80c3f8a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80c3f8e:	ee17 2a90 	vmov	r2, s15
 80c3f92:	2a00      	cmp	r2, #0
 80c3f94:	d03d      	beq.n	80c4012 <__kernel_cosf+0x9a>
 80c3f96:	ee60 5a00 	vmul.f32	s11, s0, s0
 80c3f9a:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80c4018 <__kernel_cosf+0xa0>
 80c3f9e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80c401c <__kernel_cosf+0xa4>
 80c3fa2:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80c4020 <__kernel_cosf+0xa8>
 80c3fa6:	4a1f      	ldr	r2, [pc, #124]	; (80c4024 <__kernel_cosf+0xac>)
 80c3fa8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80c3fac:	4293      	cmp	r3, r2
 80c3fae:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80c4028 <__kernel_cosf+0xb0>
 80c3fb2:	eee7 7a25 	vfma.f32	s15, s14, s11
 80c3fb6:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80c402c <__kernel_cosf+0xb4>
 80c3fba:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80c3fbe:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80c4030 <__kernel_cosf+0xb8>
 80c3fc2:	eee7 7a25 	vfma.f32	s15, s14, s11
 80c3fc6:	eeb0 7a66 	vmov.f32	s14, s13
 80c3fca:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80c3fce:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80c3fd2:	ee65 7aa6 	vmul.f32	s15, s11, s13
 80c3fd6:	ee67 6a25 	vmul.f32	s13, s14, s11
 80c3fda:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 80c3fde:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80c3fe2:	dc04      	bgt.n	80c3fee <__kernel_cosf+0x76>
 80c3fe4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80c3fe8:	ee36 0a47 	vsub.f32	s0, s12, s14
 80c3fec:	4770      	bx	lr
 80c3fee:	4a11      	ldr	r2, [pc, #68]	; (80c4034 <__kernel_cosf+0xbc>)
 80c3ff0:	4293      	cmp	r3, r2
 80c3ff2:	bfda      	itte	le
 80c3ff4:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80c3ff8:	ee06 3a90 	vmovle	s13, r3
 80c3ffc:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 80c4000:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80c4004:	ee36 0a66 	vsub.f32	s0, s12, s13
 80c4008:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80c400c:	ee30 0a67 	vsub.f32	s0, s0, s15
 80c4010:	4770      	bx	lr
 80c4012:	eeb0 0a46 	vmov.f32	s0, s12
 80c4016:	4770      	bx	lr
 80c4018:	ad47d74e 	.word	0xad47d74e
 80c401c:	310f74f6 	.word	0x310f74f6
 80c4020:	3d2aaaab 	.word	0x3d2aaaab
 80c4024:	3e999999 	.word	0x3e999999
 80c4028:	b493f27c 	.word	0xb493f27c
 80c402c:	37d00d01 	.word	0x37d00d01
 80c4030:	bab60b61 	.word	0xbab60b61
 80c4034:	3f480000 	.word	0x3f480000

080c4038 <__kernel_rem_pio2f>:
 80c4038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80c403c:	ed2d 8b04 	vpush	{d8-d9}
 80c4040:	b0d7      	sub	sp, #348	; 0x15c
 80c4042:	4616      	mov	r6, r2
 80c4044:	4698      	mov	r8, r3
 80c4046:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80c4048:	4bbb      	ldr	r3, [pc, #748]	; (80c4338 <__kernel_rem_pio2f+0x300>)
 80c404a:	9001      	str	r0, [sp, #4]
 80c404c:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 80c4050:	1d33      	adds	r3, r6, #4
 80c4052:	460d      	mov	r5, r1
 80c4054:	f108 39ff 	add.w	r9, r8, #4294967295	; 0xffffffff
 80c4058:	db29      	blt.n	80c40ae <__kernel_rem_pio2f+0x76>
 80c405a:	1ef1      	subs	r1, r6, #3
 80c405c:	bf48      	it	mi
 80c405e:	1d31      	addmi	r1, r6, #4
 80c4060:	10c9      	asrs	r1, r1, #3
 80c4062:	1c4c      	adds	r4, r1, #1
 80c4064:	00e3      	lsls	r3, r4, #3
 80c4066:	9302      	str	r3, [sp, #8]
 80c4068:	9b65      	ldr	r3, [sp, #404]	; 0x194
 80c406a:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 80c4348 <__kernel_rem_pio2f+0x310>
 80c406e:	eba1 0009 	sub.w	r0, r1, r9
 80c4072:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 80c4076:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 80c407a:	eb07 0c09 	add.w	ip, r7, r9
 80c407e:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 80c4082:	2300      	movs	r3, #0
 80c4084:	4563      	cmp	r3, ip
 80c4086:	dd14      	ble.n	80c40b2 <__kernel_rem_pio2f+0x7a>
 80c4088:	ab1a      	add	r3, sp, #104	; 0x68
 80c408a:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 80c408e:	46cc      	mov	ip, r9
 80c4090:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 80c4094:	f1c8 0b01 	rsb	fp, r8, #1
 80c4098:	eb0b 020c 	add.w	r2, fp, ip
 80c409c:	4297      	cmp	r7, r2
 80c409e:	db27      	blt.n	80c40f0 <__kernel_rem_pio2f+0xb8>
 80c40a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80c40a4:	eddf 7aa8 	vldr	s15, [pc, #672]	; 80c4348 <__kernel_rem_pio2f+0x310>
 80c40a8:	4618      	mov	r0, r3
 80c40aa:	2200      	movs	r2, #0
 80c40ac:	e016      	b.n	80c40dc <__kernel_rem_pio2f+0xa4>
 80c40ae:	2100      	movs	r1, #0
 80c40b0:	e7d7      	b.n	80c4062 <__kernel_rem_pio2f+0x2a>
 80c40b2:	42d8      	cmn	r0, r3
 80c40b4:	bf5d      	ittte	pl
 80c40b6:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 80c40ba:	ee07 2a90 	vmovpl	s15, r2
 80c40be:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80c40c2:	eef0 7a47 	vmovmi.f32	s15, s14
 80c40c6:	ecea 7a01 	vstmia	sl!, {s15}
 80c40ca:	3301      	adds	r3, #1
 80c40cc:	e7da      	b.n	80c4084 <__kernel_rem_pio2f+0x4c>
 80c40ce:	ecfe 6a01 	vldmia	lr!, {s13}
 80c40d2:	ed90 7a00 	vldr	s14, [r0]
 80c40d6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80c40da:	3201      	adds	r2, #1
 80c40dc:	454a      	cmp	r2, r9
 80c40de:	f1a0 0004 	sub.w	r0, r0, #4
 80c40e2:	ddf4      	ble.n	80c40ce <__kernel_rem_pio2f+0x96>
 80c40e4:	ecea 7a01 	vstmia	sl!, {s15}
 80c40e8:	3304      	adds	r3, #4
 80c40ea:	f10c 0c01 	add.w	ip, ip, #1
 80c40ee:	e7d3      	b.n	80c4098 <__kernel_rem_pio2f+0x60>
 80c40f0:	ab06      	add	r3, sp, #24
 80c40f2:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 80c40f6:	9304      	str	r3, [sp, #16]
 80c40f8:	9b65      	ldr	r3, [sp, #404]	; 0x194
 80c40fa:	eddf 8a92 	vldr	s17, [pc, #584]	; 80c4344 <__kernel_rem_pio2f+0x30c>
 80c40fe:	ed9f 9a90 	vldr	s18, [pc, #576]	; 80c4340 <__kernel_rem_pio2f+0x308>
 80c4102:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80c4106:	9303      	str	r3, [sp, #12]
 80c4108:	46ba      	mov	sl, r7
 80c410a:	ab56      	add	r3, sp, #344	; 0x158
 80c410c:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80c4110:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 80c4114:	ab06      	add	r3, sp, #24
 80c4116:	4618      	mov	r0, r3
 80c4118:	4652      	mov	r2, sl
 80c411a:	2a00      	cmp	r2, #0
 80c411c:	dc51      	bgt.n	80c41c2 <__kernel_rem_pio2f+0x18a>
 80c411e:	4620      	mov	r0, r4
 80c4120:	9305      	str	r3, [sp, #20]
 80c4122:	f000 fcaf 	bl	80c4a84 <scalbnf>
 80c4126:	eeb0 8a40 	vmov.f32	s16, s0
 80c412a:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80c412e:	ee28 0a00 	vmul.f32	s0, s16, s0
 80c4132:	f000 fc5f 	bl	80c49f4 <floorf>
 80c4136:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80c413a:	eea0 8a67 	vfms.f32	s16, s0, s15
 80c413e:	2c00      	cmp	r4, #0
 80c4140:	9b05      	ldr	r3, [sp, #20]
 80c4142:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80c4146:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80c414a:	edcd 7a00 	vstr	s15, [sp]
 80c414e:	ee38 8a40 	vsub.f32	s16, s16, s0
 80c4152:	dd4b      	ble.n	80c41ec <__kernel_rem_pio2f+0x1b4>
 80c4154:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 80c4158:	aa06      	add	r2, sp, #24
 80c415a:	f1c4 0e08 	rsb	lr, r4, #8
 80c415e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80c4162:	ee17 1a90 	vmov	r1, s15
 80c4166:	fa42 f00e 	asr.w	r0, r2, lr
 80c416a:	4401      	add	r1, r0
 80c416c:	9100      	str	r1, [sp, #0]
 80c416e:	fa00 f00e 	lsl.w	r0, r0, lr
 80c4172:	a906      	add	r1, sp, #24
 80c4174:	1a12      	subs	r2, r2, r0
 80c4176:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80c417a:	f1c4 0007 	rsb	r0, r4, #7
 80c417e:	fa42 fb00 	asr.w	fp, r2, r0
 80c4182:	f1bb 0f00 	cmp.w	fp, #0
 80c4186:	dd43      	ble.n	80c4210 <__kernel_rem_pio2f+0x1d8>
 80c4188:	9a00      	ldr	r2, [sp, #0]
 80c418a:	f04f 0e00 	mov.w	lr, #0
 80c418e:	3201      	adds	r2, #1
 80c4190:	9200      	str	r2, [sp, #0]
 80c4192:	4670      	mov	r0, lr
 80c4194:	45f2      	cmp	sl, lr
 80c4196:	dc6c      	bgt.n	80c4272 <__kernel_rem_pio2f+0x23a>
 80c4198:	2c00      	cmp	r4, #0
 80c419a:	dd04      	ble.n	80c41a6 <__kernel_rem_pio2f+0x16e>
 80c419c:	2c01      	cmp	r4, #1
 80c419e:	d079      	beq.n	80c4294 <__kernel_rem_pio2f+0x25c>
 80c41a0:	2c02      	cmp	r4, #2
 80c41a2:	f000 8082 	beq.w	80c42aa <__kernel_rem_pio2f+0x272>
 80c41a6:	f1bb 0f02 	cmp.w	fp, #2
 80c41aa:	d131      	bne.n	80c4210 <__kernel_rem_pio2f+0x1d8>
 80c41ac:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80c41b0:	ee30 8a48 	vsub.f32	s16, s0, s16
 80c41b4:	b360      	cbz	r0, 80c4210 <__kernel_rem_pio2f+0x1d8>
 80c41b6:	4620      	mov	r0, r4
 80c41b8:	f000 fc64 	bl	80c4a84 <scalbnf>
 80c41bc:	ee38 8a40 	vsub.f32	s16, s16, s0
 80c41c0:	e026      	b.n	80c4210 <__kernel_rem_pio2f+0x1d8>
 80c41c2:	ee60 7a28 	vmul.f32	s15, s0, s17
 80c41c6:	3a01      	subs	r2, #1
 80c41c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80c41cc:	a942      	add	r1, sp, #264	; 0x108
 80c41ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80c41d2:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 80c41d6:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80c41da:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80c41de:	eca0 0a01 	vstmia	r0!, {s0}
 80c41e2:	ed9c 0a00 	vldr	s0, [ip]
 80c41e6:	ee37 0a80 	vadd.f32	s0, s15, s0
 80c41ea:	e796      	b.n	80c411a <__kernel_rem_pio2f+0xe2>
 80c41ec:	d107      	bne.n	80c41fe <__kernel_rem_pio2f+0x1c6>
 80c41ee:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 80c41f2:	a906      	add	r1, sp, #24
 80c41f4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80c41f8:	ea4f 2b22 	mov.w	fp, r2, asr #8
 80c41fc:	e7c1      	b.n	80c4182 <__kernel_rem_pio2f+0x14a>
 80c41fe:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80c4202:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80c4206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80c420a:	da2f      	bge.n	80c426c <__kernel_rem_pio2f+0x234>
 80c420c:	f04f 0b00 	mov.w	fp, #0
 80c4210:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80c4214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80c4218:	f040 8098 	bne.w	80c434c <__kernel_rem_pio2f+0x314>
 80c421c:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80c4220:	469c      	mov	ip, r3
 80c4222:	2200      	movs	r2, #0
 80c4224:	45bc      	cmp	ip, r7
 80c4226:	da48      	bge.n	80c42ba <__kernel_rem_pio2f+0x282>
 80c4228:	2a00      	cmp	r2, #0
 80c422a:	d05f      	beq.n	80c42ec <__kernel_rem_pio2f+0x2b4>
 80c422c:	aa06      	add	r2, sp, #24
 80c422e:	3c08      	subs	r4, #8
 80c4230:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80c4234:	2900      	cmp	r1, #0
 80c4236:	d07d      	beq.n	80c4334 <__kernel_rem_pio2f+0x2fc>
 80c4238:	4620      	mov	r0, r4
 80c423a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80c423e:	9301      	str	r3, [sp, #4]
 80c4240:	f000 fc20 	bl	80c4a84 <scalbnf>
 80c4244:	9b01      	ldr	r3, [sp, #4]
 80c4246:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80c4344 <__kernel_rem_pio2f+0x30c>
 80c424a:	4619      	mov	r1, r3
 80c424c:	2900      	cmp	r1, #0
 80c424e:	f280 80af 	bge.w	80c43b0 <__kernel_rem_pio2f+0x378>
 80c4252:	4618      	mov	r0, r3
 80c4254:	2400      	movs	r4, #0
 80c4256:	2800      	cmp	r0, #0
 80c4258:	f2c0 80d0 	blt.w	80c43fc <__kernel_rem_pio2f+0x3c4>
 80c425c:	a942      	add	r1, sp, #264	; 0x108
 80c425e:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 80c4262:	4a36      	ldr	r2, [pc, #216]	; (80c433c <__kernel_rem_pio2f+0x304>)
 80c4264:	eddf 7a38 	vldr	s15, [pc, #224]	; 80c4348 <__kernel_rem_pio2f+0x310>
 80c4268:	2100      	movs	r1, #0
 80c426a:	e0bb      	b.n	80c43e4 <__kernel_rem_pio2f+0x3ac>
 80c426c:	f04f 0b02 	mov.w	fp, #2
 80c4270:	e78a      	b.n	80c4188 <__kernel_rem_pio2f+0x150>
 80c4272:	681a      	ldr	r2, [r3, #0]
 80c4274:	b948      	cbnz	r0, 80c428a <__kernel_rem_pio2f+0x252>
 80c4276:	b11a      	cbz	r2, 80c4280 <__kernel_rem_pio2f+0x248>
 80c4278:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80c427c:	601a      	str	r2, [r3, #0]
 80c427e:	2201      	movs	r2, #1
 80c4280:	f10e 0e01 	add.w	lr, lr, #1
 80c4284:	3304      	adds	r3, #4
 80c4286:	4610      	mov	r0, r2
 80c4288:	e784      	b.n	80c4194 <__kernel_rem_pio2f+0x15c>
 80c428a:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 80c428e:	601a      	str	r2, [r3, #0]
 80c4290:	4602      	mov	r2, r0
 80c4292:	e7f5      	b.n	80c4280 <__kernel_rem_pio2f+0x248>
 80c4294:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 80c4298:	ab06      	add	r3, sp, #24
 80c429a:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80c429e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80c42a2:	aa06      	add	r2, sp, #24
 80c42a4:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 80c42a8:	e77d      	b.n	80c41a6 <__kernel_rem_pio2f+0x16e>
 80c42aa:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 80c42ae:	ab06      	add	r3, sp, #24
 80c42b0:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80c42b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80c42b8:	e7f3      	b.n	80c42a2 <__kernel_rem_pio2f+0x26a>
 80c42ba:	a906      	add	r1, sp, #24
 80c42bc:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 80c42c0:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80c42c4:	4302      	orrs	r2, r0
 80c42c6:	e7ad      	b.n	80c4224 <__kernel_rem_pio2f+0x1ec>
 80c42c8:	3001      	adds	r0, #1
 80c42ca:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80c42ce:	2a00      	cmp	r2, #0
 80c42d0:	d0fa      	beq.n	80c42c8 <__kernel_rem_pio2f+0x290>
 80c42d2:	a91a      	add	r1, sp, #104	; 0x68
 80c42d4:	eb0a 0208 	add.w	r2, sl, r8
 80c42d8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80c42dc:	f10a 0301 	add.w	r3, sl, #1
 80c42e0:	eb0a 0100 	add.w	r1, sl, r0
 80c42e4:	4299      	cmp	r1, r3
 80c42e6:	da04      	bge.n	80c42f2 <__kernel_rem_pio2f+0x2ba>
 80c42e8:	468a      	mov	sl, r1
 80c42ea:	e70e      	b.n	80c410a <__kernel_rem_pio2f+0xd2>
 80c42ec:	9b04      	ldr	r3, [sp, #16]
 80c42ee:	2001      	movs	r0, #1
 80c42f0:	e7eb      	b.n	80c42ca <__kernel_rem_pio2f+0x292>
 80c42f2:	9803      	ldr	r0, [sp, #12]
 80c42f4:	f8dd c004 	ldr.w	ip, [sp, #4]
 80c42f8:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80c42fc:	9000      	str	r0, [sp, #0]
 80c42fe:	ee07 0a90 	vmov	s15, r0
 80c4302:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80c4306:	2000      	movs	r0, #0
 80c4308:	ece2 7a01 	vstmia	r2!, {s15}
 80c430c:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80c4348 <__kernel_rem_pio2f+0x310>
 80c4310:	4696      	mov	lr, r2
 80c4312:	4548      	cmp	r0, r9
 80c4314:	dd06      	ble.n	80c4324 <__kernel_rem_pio2f+0x2ec>
 80c4316:	a842      	add	r0, sp, #264	; 0x108
 80c4318:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80c431c:	edc0 7a00 	vstr	s15, [r0]
 80c4320:	3301      	adds	r3, #1
 80c4322:	e7df      	b.n	80c42e4 <__kernel_rem_pio2f+0x2ac>
 80c4324:	ecfc 6a01 	vldmia	ip!, {s13}
 80c4328:	ed3e 7a01 	vldmdb	lr!, {s14}
 80c432c:	3001      	adds	r0, #1
 80c432e:	eee6 7a87 	vfma.f32	s15, s13, s14
 80c4332:	e7ee      	b.n	80c4312 <__kernel_rem_pio2f+0x2da>
 80c4334:	3b01      	subs	r3, #1
 80c4336:	e779      	b.n	80c422c <__kernel_rem_pio2f+0x1f4>
 80c4338:	080ddaa4 	.word	0x080ddaa4
 80c433c:	080dda78 	.word	0x080dda78
 80c4340:	43800000 	.word	0x43800000
 80c4344:	3b800000 	.word	0x3b800000
 80c4348:	00000000 	.word	0x00000000
 80c434c:	9b02      	ldr	r3, [sp, #8]
 80c434e:	eeb0 0a48 	vmov.f32	s0, s16
 80c4352:	1b98      	subs	r0, r3, r6
 80c4354:	f000 fb96 	bl	80c4a84 <scalbnf>
 80c4358:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 80c4340 <__kernel_rem_pio2f+0x308>
 80c435c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80c4360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80c4364:	db1b      	blt.n	80c439e <__kernel_rem_pio2f+0x366>
 80c4366:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80c4344 <__kernel_rem_pio2f+0x30c>
 80c436a:	ee60 7a27 	vmul.f32	s15, s0, s15
 80c436e:	aa06      	add	r2, sp, #24
 80c4370:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80c4374:	a906      	add	r1, sp, #24
 80c4376:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80c437a:	3408      	adds	r4, #8
 80c437c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80c4380:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80c4384:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80c4388:	ee10 3a10 	vmov	r3, s0
 80c438c:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 80c4390:	ee17 2a90 	vmov	r2, s15
 80c4394:	f10a 0301 	add.w	r3, sl, #1
 80c4398:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80c439c:	e74c      	b.n	80c4238 <__kernel_rem_pio2f+0x200>
 80c439e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80c43a2:	aa06      	add	r2, sp, #24
 80c43a4:	ee10 3a10 	vmov	r3, s0
 80c43a8:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 80c43ac:	4653      	mov	r3, sl
 80c43ae:	e743      	b.n	80c4238 <__kernel_rem_pio2f+0x200>
 80c43b0:	aa42      	add	r2, sp, #264	; 0x108
 80c43b2:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 80c43b6:	aa06      	add	r2, sp, #24
 80c43b8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80c43bc:	9201      	str	r2, [sp, #4]
 80c43be:	ee07 2a90 	vmov	s15, r2
 80c43c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80c43c6:	3901      	subs	r1, #1
 80c43c8:	ee67 7a80 	vmul.f32	s15, s15, s0
 80c43cc:	ee20 0a07 	vmul.f32	s0, s0, s14
 80c43d0:	edc0 7a00 	vstr	s15, [r0]
 80c43d4:	e73a      	b.n	80c424c <__kernel_rem_pio2f+0x214>
 80c43d6:	ecf2 6a01 	vldmia	r2!, {s13}
 80c43da:	ecb6 7a01 	vldmia	r6!, {s14}
 80c43de:	eee6 7a87 	vfma.f32	s15, s13, s14
 80c43e2:	3101      	adds	r1, #1
 80c43e4:	42b9      	cmp	r1, r7
 80c43e6:	dc01      	bgt.n	80c43ec <__kernel_rem_pio2f+0x3b4>
 80c43e8:	428c      	cmp	r4, r1
 80c43ea:	daf4      	bge.n	80c43d6 <__kernel_rem_pio2f+0x39e>
 80c43ec:	aa56      	add	r2, sp, #344	; 0x158
 80c43ee:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 80c43f2:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 80c43f6:	3801      	subs	r0, #1
 80c43f8:	3401      	adds	r4, #1
 80c43fa:	e72c      	b.n	80c4256 <__kernel_rem_pio2f+0x21e>
 80c43fc:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80c43fe:	2a02      	cmp	r2, #2
 80c4400:	dc0a      	bgt.n	80c4418 <__kernel_rem_pio2f+0x3e0>
 80c4402:	2a00      	cmp	r2, #0
 80c4404:	dc61      	bgt.n	80c44ca <__kernel_rem_pio2f+0x492>
 80c4406:	d03c      	beq.n	80c4482 <__kernel_rem_pio2f+0x44a>
 80c4408:	9b00      	ldr	r3, [sp, #0]
 80c440a:	f003 0007 	and.w	r0, r3, #7
 80c440e:	b057      	add	sp, #348	; 0x15c
 80c4410:	ecbd 8b04 	vpop	{d8-d9}
 80c4414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80c4418:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80c441a:	2a03      	cmp	r2, #3
 80c441c:	d1f4      	bne.n	80c4408 <__kernel_rem_pio2f+0x3d0>
 80c441e:	aa2e      	add	r2, sp, #184	; 0xb8
 80c4420:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80c4424:	4608      	mov	r0, r1
 80c4426:	461c      	mov	r4, r3
 80c4428:	2c00      	cmp	r4, #0
 80c442a:	f1a0 0004 	sub.w	r0, r0, #4
 80c442e:	dc59      	bgt.n	80c44e4 <__kernel_rem_pio2f+0x4ac>
 80c4430:	4618      	mov	r0, r3
 80c4432:	2801      	cmp	r0, #1
 80c4434:	f1a1 0104 	sub.w	r1, r1, #4
 80c4438:	dc64      	bgt.n	80c4504 <__kernel_rem_pio2f+0x4cc>
 80c443a:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 80c4348 <__kernel_rem_pio2f+0x310>
 80c443e:	2b01      	cmp	r3, #1
 80c4440:	dc70      	bgt.n	80c4524 <__kernel_rem_pio2f+0x4ec>
 80c4442:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 80c4446:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 80c444a:	f1bb 0f00 	cmp.w	fp, #0
 80c444e:	d172      	bne.n	80c4536 <__kernel_rem_pio2f+0x4fe>
 80c4450:	edc5 6a00 	vstr	s13, [r5]
 80c4454:	ed85 7a01 	vstr	s14, [r5, #4]
 80c4458:	edc5 7a02 	vstr	s15, [r5, #8]
 80c445c:	e7d4      	b.n	80c4408 <__kernel_rem_pio2f+0x3d0>
 80c445e:	aa2e      	add	r2, sp, #184	; 0xb8
 80c4460:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80c4464:	ed91 7a00 	vldr	s14, [r1]
 80c4468:	ee77 7a87 	vadd.f32	s15, s15, s14
 80c446c:	3b01      	subs	r3, #1
 80c446e:	2b00      	cmp	r3, #0
 80c4470:	daf5      	bge.n	80c445e <__kernel_rem_pio2f+0x426>
 80c4472:	f1bb 0f00 	cmp.w	fp, #0
 80c4476:	d001      	beq.n	80c447c <__kernel_rem_pio2f+0x444>
 80c4478:	eef1 7a67 	vneg.f32	s15, s15
 80c447c:	edc5 7a00 	vstr	s15, [r5]
 80c4480:	e7c2      	b.n	80c4408 <__kernel_rem_pio2f+0x3d0>
 80c4482:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 80c4348 <__kernel_rem_pio2f+0x310>
 80c4486:	e7f2      	b.n	80c446e <__kernel_rem_pio2f+0x436>
 80c4488:	aa2e      	add	r2, sp, #184	; 0xb8
 80c448a:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 80c448e:	edd0 7a00 	vldr	s15, [r0]
 80c4492:	ee37 7a27 	vadd.f32	s14, s14, s15
 80c4496:	3901      	subs	r1, #1
 80c4498:	2900      	cmp	r1, #0
 80c449a:	daf5      	bge.n	80c4488 <__kernel_rem_pio2f+0x450>
 80c449c:	f1bb 0f00 	cmp.w	fp, #0
 80c44a0:	d017      	beq.n	80c44d2 <__kernel_rem_pio2f+0x49a>
 80c44a2:	eef1 7a47 	vneg.f32	s15, s14
 80c44a6:	edc5 7a00 	vstr	s15, [r5]
 80c44aa:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 80c44ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80c44b2:	a82f      	add	r0, sp, #188	; 0xbc
 80c44b4:	2101      	movs	r1, #1
 80c44b6:	428b      	cmp	r3, r1
 80c44b8:	da0e      	bge.n	80c44d8 <__kernel_rem_pio2f+0x4a0>
 80c44ba:	f1bb 0f00 	cmp.w	fp, #0
 80c44be:	d001      	beq.n	80c44c4 <__kernel_rem_pio2f+0x48c>
 80c44c0:	eef1 7a67 	vneg.f32	s15, s15
 80c44c4:	edc5 7a01 	vstr	s15, [r5, #4]
 80c44c8:	e79e      	b.n	80c4408 <__kernel_rem_pio2f+0x3d0>
 80c44ca:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 80c4348 <__kernel_rem_pio2f+0x310>
 80c44ce:	4619      	mov	r1, r3
 80c44d0:	e7e2      	b.n	80c4498 <__kernel_rem_pio2f+0x460>
 80c44d2:	eef0 7a47 	vmov.f32	s15, s14
 80c44d6:	e7e6      	b.n	80c44a6 <__kernel_rem_pio2f+0x46e>
 80c44d8:	ecb0 7a01 	vldmia	r0!, {s14}
 80c44dc:	3101      	adds	r1, #1
 80c44de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80c44e2:	e7e8      	b.n	80c44b6 <__kernel_rem_pio2f+0x47e>
 80c44e4:	edd0 7a00 	vldr	s15, [r0]
 80c44e8:	edd0 6a01 	vldr	s13, [r0, #4]
 80c44ec:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80c44f0:	3c01      	subs	r4, #1
 80c44f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80c44f6:	ed80 7a00 	vstr	s14, [r0]
 80c44fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80c44fe:	edc0 7a01 	vstr	s15, [r0, #4]
 80c4502:	e791      	b.n	80c4428 <__kernel_rem_pio2f+0x3f0>
 80c4504:	edd1 7a00 	vldr	s15, [r1]
 80c4508:	edd1 6a01 	vldr	s13, [r1, #4]
 80c450c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80c4510:	3801      	subs	r0, #1
 80c4512:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80c4516:	ed81 7a00 	vstr	s14, [r1]
 80c451a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80c451e:	edc1 7a01 	vstr	s15, [r1, #4]
 80c4522:	e786      	b.n	80c4432 <__kernel_rem_pio2f+0x3fa>
 80c4524:	aa2e      	add	r2, sp, #184	; 0xb8
 80c4526:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80c452a:	ed91 7a00 	vldr	s14, [r1]
 80c452e:	3b01      	subs	r3, #1
 80c4530:	ee77 7a87 	vadd.f32	s15, s15, s14
 80c4534:	e783      	b.n	80c443e <__kernel_rem_pio2f+0x406>
 80c4536:	eef1 6a66 	vneg.f32	s13, s13
 80c453a:	eeb1 7a47 	vneg.f32	s14, s14
 80c453e:	edc5 6a00 	vstr	s13, [r5]
 80c4542:	ed85 7a01 	vstr	s14, [r5, #4]
 80c4546:	eef1 7a67 	vneg.f32	s15, s15
 80c454a:	e785      	b.n	80c4458 <__kernel_rem_pio2f+0x420>

080c454c <__kernel_sinf>:
 80c454c:	ee10 3a10 	vmov	r3, s0
 80c4550:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80c4554:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80c4558:	da04      	bge.n	80c4564 <__kernel_sinf+0x18>
 80c455a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80c455e:	ee17 3a90 	vmov	r3, s15
 80c4562:	b35b      	cbz	r3, 80c45bc <__kernel_sinf+0x70>
 80c4564:	ee20 7a00 	vmul.f32	s14, s0, s0
 80c4568:	eddf 7a15 	vldr	s15, [pc, #84]	; 80c45c0 <__kernel_sinf+0x74>
 80c456c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80c45c4 <__kernel_sinf+0x78>
 80c4570:	eea7 6a27 	vfma.f32	s12, s14, s15
 80c4574:	eddf 7a14 	vldr	s15, [pc, #80]	; 80c45c8 <__kernel_sinf+0x7c>
 80c4578:	eee6 7a07 	vfma.f32	s15, s12, s14
 80c457c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80c45cc <__kernel_sinf+0x80>
 80c4580:	eea7 6a87 	vfma.f32	s12, s15, s14
 80c4584:	eddf 7a12 	vldr	s15, [pc, #72]	; 80c45d0 <__kernel_sinf+0x84>
 80c4588:	ee60 6a07 	vmul.f32	s13, s0, s14
 80c458c:	eee6 7a07 	vfma.f32	s15, s12, s14
 80c4590:	b930      	cbnz	r0, 80c45a0 <__kernel_sinf+0x54>
 80c4592:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80c45d4 <__kernel_sinf+0x88>
 80c4596:	eea7 6a27 	vfma.f32	s12, s14, s15
 80c459a:	eea6 0a26 	vfma.f32	s0, s12, s13
 80c459e:	4770      	bx	lr
 80c45a0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80c45a4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80c45a8:	eee0 7a86 	vfma.f32	s15, s1, s12
 80c45ac:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80c45b0:	eddf 7a09 	vldr	s15, [pc, #36]	; 80c45d8 <__kernel_sinf+0x8c>
 80c45b4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80c45b8:	ee30 0a60 	vsub.f32	s0, s0, s1
 80c45bc:	4770      	bx	lr
 80c45be:	bf00      	nop
 80c45c0:	2f2ec9d3 	.word	0x2f2ec9d3
 80c45c4:	b2d72f34 	.word	0xb2d72f34
 80c45c8:	3638ef1b 	.word	0x3638ef1b
 80c45cc:	b9500d01 	.word	0xb9500d01
 80c45d0:	3c088889 	.word	0x3c088889
 80c45d4:	be2aaaab 	.word	0xbe2aaaab
 80c45d8:	3e2aaaab 	.word	0x3e2aaaab

080c45dc <fabs>:
 80c45dc:	ec51 0b10 	vmov	r0, r1, d0
 80c45e0:	ee10 2a10 	vmov	r2, s0
 80c45e4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80c45e8:	ec43 2b10 	vmov	d0, r2, r3
 80c45ec:	4770      	bx	lr

080c45ee <finite>:
 80c45ee:	b082      	sub	sp, #8
 80c45f0:	ed8d 0b00 	vstr	d0, [sp]
 80c45f4:	9801      	ldr	r0, [sp, #4]
 80c45f6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80c45fa:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80c45fe:	0fc0      	lsrs	r0, r0, #31
 80c4600:	b002      	add	sp, #8
 80c4602:	4770      	bx	lr
 80c4604:	0000      	movs	r0, r0
	...

080c4608 <nan>:
 80c4608:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80c4610 <nan+0x8>
 80c460c:	4770      	bx	lr
 80c460e:	bf00      	nop
 80c4610:	00000000 	.word	0x00000000
 80c4614:	7ff80000 	.word	0x7ff80000

080c4618 <rint>:
 80c4618:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80c461a:	ec51 0b10 	vmov	r0, r1, d0
 80c461e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80c4622:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80c4626:	2e13      	cmp	r6, #19
 80c4628:	ee10 4a10 	vmov	r4, s0
 80c462c:	460b      	mov	r3, r1
 80c462e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80c4632:	dc58      	bgt.n	80c46e6 <rint+0xce>
 80c4634:	2e00      	cmp	r6, #0
 80c4636:	da2b      	bge.n	80c4690 <rint+0x78>
 80c4638:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80c463c:	4302      	orrs	r2, r0
 80c463e:	d023      	beq.n	80c4688 <rint+0x70>
 80c4640:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80c4644:	4302      	orrs	r2, r0
 80c4646:	4254      	negs	r4, r2
 80c4648:	4314      	orrs	r4, r2
 80c464a:	0c4b      	lsrs	r3, r1, #17
 80c464c:	0b24      	lsrs	r4, r4, #12
 80c464e:	045b      	lsls	r3, r3, #17
 80c4650:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80c4654:	ea44 0103 	orr.w	r1, r4, r3
 80c4658:	4b32      	ldr	r3, [pc, #200]	; (80c4724 <rint+0x10c>)
 80c465a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80c465e:	e9d3 6700 	ldrd	r6, r7, [r3]
 80c4662:	4602      	mov	r2, r0
 80c4664:	460b      	mov	r3, r1
 80c4666:	4630      	mov	r0, r6
 80c4668:	4639      	mov	r1, r7
 80c466a:	f7db fe0f 	bl	80a028c <__adddf3>
 80c466e:	e9cd 0100 	strd	r0, r1, [sp]
 80c4672:	463b      	mov	r3, r7
 80c4674:	e9dd 0100 	ldrd	r0, r1, [sp]
 80c4678:	4632      	mov	r2, r6
 80c467a:	f7db fe05 	bl	80a0288 <__aeabi_dsub>
 80c467e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80c4682:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80c4686:	4639      	mov	r1, r7
 80c4688:	ec41 0b10 	vmov	d0, r0, r1
 80c468c:	b003      	add	sp, #12
 80c468e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80c4690:	4a25      	ldr	r2, [pc, #148]	; (80c4728 <rint+0x110>)
 80c4692:	4132      	asrs	r2, r6
 80c4694:	ea01 0702 	and.w	r7, r1, r2
 80c4698:	4307      	orrs	r7, r0
 80c469a:	d0f5      	beq.n	80c4688 <rint+0x70>
 80c469c:	0851      	lsrs	r1, r2, #1
 80c469e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 80c46a2:	4314      	orrs	r4, r2
 80c46a4:	d00c      	beq.n	80c46c0 <rint+0xa8>
 80c46a6:	ea23 0201 	bic.w	r2, r3, r1
 80c46aa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80c46ae:	2e13      	cmp	r6, #19
 80c46b0:	fa43 f606 	asr.w	r6, r3, r6
 80c46b4:	bf0c      	ite	eq
 80c46b6:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80c46ba:	2400      	movne	r4, #0
 80c46bc:	ea42 0306 	orr.w	r3, r2, r6
 80c46c0:	4918      	ldr	r1, [pc, #96]	; (80c4724 <rint+0x10c>)
 80c46c2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80c46c6:	4622      	mov	r2, r4
 80c46c8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80c46cc:	4620      	mov	r0, r4
 80c46ce:	4629      	mov	r1, r5
 80c46d0:	f7db fddc 	bl	80a028c <__adddf3>
 80c46d4:	e9cd 0100 	strd	r0, r1, [sp]
 80c46d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80c46dc:	4622      	mov	r2, r4
 80c46de:	462b      	mov	r3, r5
 80c46e0:	f7db fdd2 	bl	80a0288 <__aeabi_dsub>
 80c46e4:	e7d0      	b.n	80c4688 <rint+0x70>
 80c46e6:	2e33      	cmp	r6, #51	; 0x33
 80c46e8:	dd07      	ble.n	80c46fa <rint+0xe2>
 80c46ea:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80c46ee:	d1cb      	bne.n	80c4688 <rint+0x70>
 80c46f0:	ee10 2a10 	vmov	r2, s0
 80c46f4:	f7db fdca 	bl	80a028c <__adddf3>
 80c46f8:	e7c6      	b.n	80c4688 <rint+0x70>
 80c46fa:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80c46fe:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80c4702:	40d6      	lsrs	r6, r2
 80c4704:	4230      	tst	r0, r6
 80c4706:	d0bf      	beq.n	80c4688 <rint+0x70>
 80c4708:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 80c470c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 80c4710:	bf1f      	itttt	ne
 80c4712:	ea24 0101 	bicne.w	r1, r4, r1
 80c4716:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80c471a:	fa44 f202 	asrne.w	r2, r4, r2
 80c471e:	ea41 0402 	orrne.w	r4, r1, r2
 80c4722:	e7cd      	b.n	80c46c0 <rint+0xa8>
 80c4724:	080ddab0 	.word	0x080ddab0
 80c4728:	000fffff 	.word	0x000fffff
 80c472c:	00000000 	.word	0x00000000

080c4730 <scalbn>:
 80c4730:	b570      	push	{r4, r5, r6, lr}
 80c4732:	ec55 4b10 	vmov	r4, r5, d0
 80c4736:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80c473a:	4606      	mov	r6, r0
 80c473c:	462b      	mov	r3, r5
 80c473e:	b99a      	cbnz	r2, 80c4768 <scalbn+0x38>
 80c4740:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80c4744:	4323      	orrs	r3, r4
 80c4746:	d036      	beq.n	80c47b6 <scalbn+0x86>
 80c4748:	4b39      	ldr	r3, [pc, #228]	; (80c4830 <scalbn+0x100>)
 80c474a:	4629      	mov	r1, r5
 80c474c:	ee10 0a10 	vmov	r0, s0
 80c4750:	2200      	movs	r2, #0
 80c4752:	f7db ff51 	bl	80a05f8 <__aeabi_dmul>
 80c4756:	4b37      	ldr	r3, [pc, #220]	; (80c4834 <scalbn+0x104>)
 80c4758:	429e      	cmp	r6, r3
 80c475a:	4604      	mov	r4, r0
 80c475c:	460d      	mov	r5, r1
 80c475e:	da10      	bge.n	80c4782 <scalbn+0x52>
 80c4760:	a32b      	add	r3, pc, #172	; (adr r3, 80c4810 <scalbn+0xe0>)
 80c4762:	e9d3 2300 	ldrd	r2, r3, [r3]
 80c4766:	e03a      	b.n	80c47de <scalbn+0xae>
 80c4768:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80c476c:	428a      	cmp	r2, r1
 80c476e:	d10c      	bne.n	80c478a <scalbn+0x5a>
 80c4770:	ee10 2a10 	vmov	r2, s0
 80c4774:	4620      	mov	r0, r4
 80c4776:	4629      	mov	r1, r5
 80c4778:	f7db fd88 	bl	80a028c <__adddf3>
 80c477c:	4604      	mov	r4, r0
 80c477e:	460d      	mov	r5, r1
 80c4780:	e019      	b.n	80c47b6 <scalbn+0x86>
 80c4782:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80c4786:	460b      	mov	r3, r1
 80c4788:	3a36      	subs	r2, #54	; 0x36
 80c478a:	4432      	add	r2, r6
 80c478c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80c4790:	428a      	cmp	r2, r1
 80c4792:	dd08      	ble.n	80c47a6 <scalbn+0x76>
 80c4794:	2d00      	cmp	r5, #0
 80c4796:	a120      	add	r1, pc, #128	; (adr r1, 80c4818 <scalbn+0xe8>)
 80c4798:	e9d1 0100 	ldrd	r0, r1, [r1]
 80c479c:	da1c      	bge.n	80c47d8 <scalbn+0xa8>
 80c479e:	a120      	add	r1, pc, #128	; (adr r1, 80c4820 <scalbn+0xf0>)
 80c47a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80c47a4:	e018      	b.n	80c47d8 <scalbn+0xa8>
 80c47a6:	2a00      	cmp	r2, #0
 80c47a8:	dd08      	ble.n	80c47bc <scalbn+0x8c>
 80c47aa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80c47ae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80c47b2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80c47b6:	ec45 4b10 	vmov	d0, r4, r5
 80c47ba:	bd70      	pop	{r4, r5, r6, pc}
 80c47bc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80c47c0:	da19      	bge.n	80c47f6 <scalbn+0xc6>
 80c47c2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80c47c6:	429e      	cmp	r6, r3
 80c47c8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80c47cc:	dd0a      	ble.n	80c47e4 <scalbn+0xb4>
 80c47ce:	a112      	add	r1, pc, #72	; (adr r1, 80c4818 <scalbn+0xe8>)
 80c47d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80c47d4:	2b00      	cmp	r3, #0
 80c47d6:	d1e2      	bne.n	80c479e <scalbn+0x6e>
 80c47d8:	a30f      	add	r3, pc, #60	; (adr r3, 80c4818 <scalbn+0xe8>)
 80c47da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80c47de:	f7db ff0b 	bl	80a05f8 <__aeabi_dmul>
 80c47e2:	e7cb      	b.n	80c477c <scalbn+0x4c>
 80c47e4:	a10a      	add	r1, pc, #40	; (adr r1, 80c4810 <scalbn+0xe0>)
 80c47e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80c47ea:	2b00      	cmp	r3, #0
 80c47ec:	d0b8      	beq.n	80c4760 <scalbn+0x30>
 80c47ee:	a10e      	add	r1, pc, #56	; (adr r1, 80c4828 <scalbn+0xf8>)
 80c47f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80c47f4:	e7b4      	b.n	80c4760 <scalbn+0x30>
 80c47f6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80c47fa:	3236      	adds	r2, #54	; 0x36
 80c47fc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80c4800:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80c4804:	4620      	mov	r0, r4
 80c4806:	4b0c      	ldr	r3, [pc, #48]	; (80c4838 <scalbn+0x108>)
 80c4808:	2200      	movs	r2, #0
 80c480a:	e7e8      	b.n	80c47de <scalbn+0xae>
 80c480c:	f3af 8000 	nop.w
 80c4810:	c2f8f359 	.word	0xc2f8f359
 80c4814:	01a56e1f 	.word	0x01a56e1f
 80c4818:	8800759c 	.word	0x8800759c
 80c481c:	7e37e43c 	.word	0x7e37e43c
 80c4820:	8800759c 	.word	0x8800759c
 80c4824:	fe37e43c 	.word	0xfe37e43c
 80c4828:	c2f8f359 	.word	0xc2f8f359
 80c482c:	81a56e1f 	.word	0x81a56e1f
 80c4830:	43500000 	.word	0x43500000
 80c4834:	ffff3cb0 	.word	0xffff3cb0
 80c4838:	3c900000 	.word	0x3c900000

080c483c <atanf>:
 80c483c:	b538      	push	{r3, r4, r5, lr}
 80c483e:	ee10 5a10 	vmov	r5, s0
 80c4842:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80c4846:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 80c484a:	eef0 7a40 	vmov.f32	s15, s0
 80c484e:	db10      	blt.n	80c4872 <atanf+0x36>
 80c4850:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80c4854:	dd04      	ble.n	80c4860 <atanf+0x24>
 80c4856:	ee70 7a00 	vadd.f32	s15, s0, s0
 80c485a:	eeb0 0a67 	vmov.f32	s0, s15
 80c485e:	bd38      	pop	{r3, r4, r5, pc}
 80c4860:	eddf 7a4d 	vldr	s15, [pc, #308]	; 80c4998 <atanf+0x15c>
 80c4864:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 80c499c <atanf+0x160>
 80c4868:	2d00      	cmp	r5, #0
 80c486a:	bfd8      	it	le
 80c486c:	eef0 7a40 	vmovle.f32	s15, s0
 80c4870:	e7f3      	b.n	80c485a <atanf+0x1e>
 80c4872:	4b4b      	ldr	r3, [pc, #300]	; (80c49a0 <atanf+0x164>)
 80c4874:	429c      	cmp	r4, r3
 80c4876:	dc10      	bgt.n	80c489a <atanf+0x5e>
 80c4878:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 80c487c:	da0a      	bge.n	80c4894 <atanf+0x58>
 80c487e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80c49a4 <atanf+0x168>
 80c4882:	ee30 7a07 	vadd.f32	s14, s0, s14
 80c4886:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80c488a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80c488e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80c4892:	dce2      	bgt.n	80c485a <atanf+0x1e>
 80c4894:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80c4898:	e013      	b.n	80c48c2 <atanf+0x86>
 80c489a:	f000 f8a3 	bl	80c49e4 <fabsf>
 80c489e:	4b42      	ldr	r3, [pc, #264]	; (80c49a8 <atanf+0x16c>)
 80c48a0:	429c      	cmp	r4, r3
 80c48a2:	dc4f      	bgt.n	80c4944 <atanf+0x108>
 80c48a4:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80c48a8:	429c      	cmp	r4, r3
 80c48aa:	dc41      	bgt.n	80c4930 <atanf+0xf4>
 80c48ac:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80c48b0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80c48b4:	eea0 7a27 	vfma.f32	s14, s0, s15
 80c48b8:	2300      	movs	r3, #0
 80c48ba:	ee30 0a27 	vadd.f32	s0, s0, s15
 80c48be:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80c48c2:	1c5a      	adds	r2, r3, #1
 80c48c4:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80c48c8:	eddf 5a38 	vldr	s11, [pc, #224]	; 80c49ac <atanf+0x170>
 80c48cc:	ed9f 6a38 	vldr	s12, [pc, #224]	; 80c49b0 <atanf+0x174>
 80c48d0:	ed9f 5a38 	vldr	s10, [pc, #224]	; 80c49b4 <atanf+0x178>
 80c48d4:	ed9f 0a38 	vldr	s0, [pc, #224]	; 80c49b8 <atanf+0x17c>
 80c48d8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80c48dc:	eea7 6a25 	vfma.f32	s12, s14, s11
 80c48e0:	eddf 5a36 	vldr	s11, [pc, #216]	; 80c49bc <atanf+0x180>
 80c48e4:	eee6 5a07 	vfma.f32	s11, s12, s14
 80c48e8:	ed9f 6a35 	vldr	s12, [pc, #212]	; 80c49c0 <atanf+0x184>
 80c48ec:	eea5 6a87 	vfma.f32	s12, s11, s14
 80c48f0:	eddf 5a34 	vldr	s11, [pc, #208]	; 80c49c4 <atanf+0x188>
 80c48f4:	eee6 5a07 	vfma.f32	s11, s12, s14
 80c48f8:	ed9f 6a33 	vldr	s12, [pc, #204]	; 80c49c8 <atanf+0x18c>
 80c48fc:	eea5 6a87 	vfma.f32	s12, s11, s14
 80c4900:	eddf 5a32 	vldr	s11, [pc, #200]	; 80c49cc <atanf+0x190>
 80c4904:	eee7 5a05 	vfma.f32	s11, s14, s10
 80c4908:	ed9f 5a31 	vldr	s10, [pc, #196]	; 80c49d0 <atanf+0x194>
 80c490c:	eea5 5a87 	vfma.f32	s10, s11, s14
 80c4910:	eddf 5a30 	vldr	s11, [pc, #192]	; 80c49d4 <atanf+0x198>
 80c4914:	eee5 5a07 	vfma.f32	s11, s10, s14
 80c4918:	eea5 0a87 	vfma.f32	s0, s11, s14
 80c491c:	ee20 0a07 	vmul.f32	s0, s0, s14
 80c4920:	eea6 0a26 	vfma.f32	s0, s12, s13
 80c4924:	ee27 0a80 	vmul.f32	s0, s15, s0
 80c4928:	d121      	bne.n	80c496e <atanf+0x132>
 80c492a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80c492e:	e794      	b.n	80c485a <atanf+0x1e>
 80c4930:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80c4934:	ee30 7a67 	vsub.f32	s14, s0, s15
 80c4938:	ee30 0a27 	vadd.f32	s0, s0, s15
 80c493c:	2301      	movs	r3, #1
 80c493e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80c4942:	e7be      	b.n	80c48c2 <atanf+0x86>
 80c4944:	4b24      	ldr	r3, [pc, #144]	; (80c49d8 <atanf+0x19c>)
 80c4946:	429c      	cmp	r4, r3
 80c4948:	dc0b      	bgt.n	80c4962 <atanf+0x126>
 80c494a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80c494e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80c4952:	eea0 7a27 	vfma.f32	s14, s0, s15
 80c4956:	2302      	movs	r3, #2
 80c4958:	ee70 6a67 	vsub.f32	s13, s0, s15
 80c495c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80c4960:	e7af      	b.n	80c48c2 <atanf+0x86>
 80c4962:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80c4966:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80c496a:	2303      	movs	r3, #3
 80c496c:	e7a9      	b.n	80c48c2 <atanf+0x86>
 80c496e:	4a1b      	ldr	r2, [pc, #108]	; (80c49dc <atanf+0x1a0>)
 80c4970:	491b      	ldr	r1, [pc, #108]	; (80c49e0 <atanf+0x1a4>)
 80c4972:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80c4976:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80c497a:	ed93 7a00 	vldr	s14, [r3]
 80c497e:	ee30 0a47 	vsub.f32	s0, s0, s14
 80c4982:	2d00      	cmp	r5, #0
 80c4984:	ee70 7a67 	vsub.f32	s15, s0, s15
 80c4988:	ed92 0a00 	vldr	s0, [r2]
 80c498c:	ee70 7a67 	vsub.f32	s15, s0, s15
 80c4990:	bfb8      	it	lt
 80c4992:	eef1 7a67 	vneglt.f32	s15, s15
 80c4996:	e760      	b.n	80c485a <atanf+0x1e>
 80c4998:	3fc90fdb 	.word	0x3fc90fdb
 80c499c:	bfc90fdb 	.word	0xbfc90fdb
 80c49a0:	3edfffff 	.word	0x3edfffff
 80c49a4:	7149f2ca 	.word	0x7149f2ca
 80c49a8:	3f97ffff 	.word	0x3f97ffff
 80c49ac:	3c8569d7 	.word	0x3c8569d7
 80c49b0:	3d4bda59 	.word	0x3d4bda59
 80c49b4:	bd15a221 	.word	0xbd15a221
 80c49b8:	be4ccccd 	.word	0xbe4ccccd
 80c49bc:	3d886b35 	.word	0x3d886b35
 80c49c0:	3dba2e6e 	.word	0x3dba2e6e
 80c49c4:	3e124925 	.word	0x3e124925
 80c49c8:	3eaaaaab 	.word	0x3eaaaaab
 80c49cc:	bd6ef16b 	.word	0xbd6ef16b
 80c49d0:	bd9d8795 	.word	0xbd9d8795
 80c49d4:	bde38e38 	.word	0xbde38e38
 80c49d8:	401bffff 	.word	0x401bffff
 80c49dc:	080ddac0 	.word	0x080ddac0
 80c49e0:	080ddad0 	.word	0x080ddad0

080c49e4 <fabsf>:
 80c49e4:	ee10 3a10 	vmov	r3, s0
 80c49e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80c49ec:	ee00 3a10 	vmov	s0, r3
 80c49f0:	4770      	bx	lr
	...

080c49f4 <floorf>:
 80c49f4:	ee10 3a10 	vmov	r3, s0
 80c49f8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80c49fc:	3a7f      	subs	r2, #127	; 0x7f
 80c49fe:	2a16      	cmp	r2, #22
 80c4a00:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80c4a04:	dc2a      	bgt.n	80c4a5c <floorf+0x68>
 80c4a06:	2a00      	cmp	r2, #0
 80c4a08:	da11      	bge.n	80c4a2e <floorf+0x3a>
 80c4a0a:	eddf 7a18 	vldr	s15, [pc, #96]	; 80c4a6c <floorf+0x78>
 80c4a0e:	ee30 0a27 	vadd.f32	s0, s0, s15
 80c4a12:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80c4a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80c4a1a:	dd05      	ble.n	80c4a28 <floorf+0x34>
 80c4a1c:	2b00      	cmp	r3, #0
 80c4a1e:	da23      	bge.n	80c4a68 <floorf+0x74>
 80c4a20:	4a13      	ldr	r2, [pc, #76]	; (80c4a70 <floorf+0x7c>)
 80c4a22:	2900      	cmp	r1, #0
 80c4a24:	bf18      	it	ne
 80c4a26:	4613      	movne	r3, r2
 80c4a28:	ee00 3a10 	vmov	s0, r3
 80c4a2c:	4770      	bx	lr
 80c4a2e:	4911      	ldr	r1, [pc, #68]	; (80c4a74 <floorf+0x80>)
 80c4a30:	4111      	asrs	r1, r2
 80c4a32:	420b      	tst	r3, r1
 80c4a34:	d0fa      	beq.n	80c4a2c <floorf+0x38>
 80c4a36:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80c4a6c <floorf+0x78>
 80c4a3a:	ee30 0a27 	vadd.f32	s0, s0, s15
 80c4a3e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80c4a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80c4a46:	ddef      	ble.n	80c4a28 <floorf+0x34>
 80c4a48:	2b00      	cmp	r3, #0
 80c4a4a:	bfbe      	ittt	lt
 80c4a4c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80c4a50:	fa40 f202 	asrlt.w	r2, r0, r2
 80c4a54:	189b      	addlt	r3, r3, r2
 80c4a56:	ea23 0301 	bic.w	r3, r3, r1
 80c4a5a:	e7e5      	b.n	80c4a28 <floorf+0x34>
 80c4a5c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80c4a60:	d3e4      	bcc.n	80c4a2c <floorf+0x38>
 80c4a62:	ee30 0a00 	vadd.f32	s0, s0, s0
 80c4a66:	4770      	bx	lr
 80c4a68:	2300      	movs	r3, #0
 80c4a6a:	e7dd      	b.n	80c4a28 <floorf+0x34>
 80c4a6c:	7149f2ca 	.word	0x7149f2ca
 80c4a70:	bf800000 	.word	0xbf800000
 80c4a74:	007fffff 	.word	0x007fffff

080c4a78 <nanf>:
 80c4a78:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80c4a80 <nanf+0x8>
 80c4a7c:	4770      	bx	lr
 80c4a7e:	bf00      	nop
 80c4a80:	7fc00000 	.word	0x7fc00000

080c4a84 <scalbnf>:
 80c4a84:	ee10 3a10 	vmov	r3, s0
 80c4a88:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80c4a8c:	d025      	beq.n	80c4ada <scalbnf+0x56>
 80c4a8e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80c4a92:	d302      	bcc.n	80c4a9a <scalbnf+0x16>
 80c4a94:	ee30 0a00 	vadd.f32	s0, s0, s0
 80c4a98:	4770      	bx	lr
 80c4a9a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80c4a9e:	d122      	bne.n	80c4ae6 <scalbnf+0x62>
 80c4aa0:	4b2a      	ldr	r3, [pc, #168]	; (80c4b4c <scalbnf+0xc8>)
 80c4aa2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80c4b50 <scalbnf+0xcc>
 80c4aa6:	4298      	cmp	r0, r3
 80c4aa8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80c4aac:	db16      	blt.n	80c4adc <scalbnf+0x58>
 80c4aae:	ee10 3a10 	vmov	r3, s0
 80c4ab2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80c4ab6:	3a19      	subs	r2, #25
 80c4ab8:	4402      	add	r2, r0
 80c4aba:	2afe      	cmp	r2, #254	; 0xfe
 80c4abc:	dd15      	ble.n	80c4aea <scalbnf+0x66>
 80c4abe:	ee10 3a10 	vmov	r3, s0
 80c4ac2:	eddf 7a24 	vldr	s15, [pc, #144]	; 80c4b54 <scalbnf+0xd0>
 80c4ac6:	eddf 6a24 	vldr	s13, [pc, #144]	; 80c4b58 <scalbnf+0xd4>
 80c4aca:	2b00      	cmp	r3, #0
 80c4acc:	eeb0 7a67 	vmov.f32	s14, s15
 80c4ad0:	bfb8      	it	lt
 80c4ad2:	eef0 7a66 	vmovlt.f32	s15, s13
 80c4ad6:	ee27 0a27 	vmul.f32	s0, s14, s15
 80c4ada:	4770      	bx	lr
 80c4adc:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80c4b5c <scalbnf+0xd8>
 80c4ae0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80c4ae4:	4770      	bx	lr
 80c4ae6:	0dd2      	lsrs	r2, r2, #23
 80c4ae8:	e7e6      	b.n	80c4ab8 <scalbnf+0x34>
 80c4aea:	2a00      	cmp	r2, #0
 80c4aec:	dd06      	ble.n	80c4afc <scalbnf+0x78>
 80c4aee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80c4af2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80c4af6:	ee00 3a10 	vmov	s0, r3
 80c4afa:	4770      	bx	lr
 80c4afc:	f112 0f16 	cmn.w	r2, #22
 80c4b00:	da1a      	bge.n	80c4b38 <scalbnf+0xb4>
 80c4b02:	f24c 3350 	movw	r3, #50000	; 0xc350
 80c4b06:	4298      	cmp	r0, r3
 80c4b08:	ee10 3a10 	vmov	r3, s0
 80c4b0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80c4b10:	dd0a      	ble.n	80c4b28 <scalbnf+0xa4>
 80c4b12:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80c4b54 <scalbnf+0xd0>
 80c4b16:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80c4b58 <scalbnf+0xd4>
 80c4b1a:	eef0 7a40 	vmov.f32	s15, s0
 80c4b1e:	2b00      	cmp	r3, #0
 80c4b20:	bf18      	it	ne
 80c4b22:	eeb0 0a47 	vmovne.f32	s0, s14
 80c4b26:	e7db      	b.n	80c4ae0 <scalbnf+0x5c>
 80c4b28:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80c4b5c <scalbnf+0xd8>
 80c4b2c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80c4b60 <scalbnf+0xdc>
 80c4b30:	eef0 7a40 	vmov.f32	s15, s0
 80c4b34:	2b00      	cmp	r3, #0
 80c4b36:	e7f3      	b.n	80c4b20 <scalbnf+0x9c>
 80c4b38:	3219      	adds	r2, #25
 80c4b3a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80c4b3e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80c4b42:	eddf 7a08 	vldr	s15, [pc, #32]	; 80c4b64 <scalbnf+0xe0>
 80c4b46:	ee07 3a10 	vmov	s14, r3
 80c4b4a:	e7c4      	b.n	80c4ad6 <scalbnf+0x52>
 80c4b4c:	ffff3cb0 	.word	0xffff3cb0
 80c4b50:	4c000000 	.word	0x4c000000
 80c4b54:	7149f2ca 	.word	0x7149f2ca
 80c4b58:	f149f2ca 	.word	0xf149f2ca
 80c4b5c:	0da24260 	.word	0x0da24260
 80c4b60:	8da24260 	.word	0x8da24260
 80c4b64:	33000000 	.word	0x33000000

080c4b68 <_init>:
 80c4b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80c4b6a:	bf00      	nop
 80c4b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80c4b6e:	bc08      	pop	{r3}
 80c4b70:	469e      	mov	lr, r3
 80c4b72:	4770      	bx	lr

080c4b74 <_fini>:
 80c4b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80c4b76:	bf00      	nop
 80c4b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80c4b7a:	bc08      	pop	{r3}
 80c4b7c:	469e      	mov	lr, r3
 80c4b7e:	4770      	bx	lr
