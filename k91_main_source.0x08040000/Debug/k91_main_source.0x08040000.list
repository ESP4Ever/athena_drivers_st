
k91_main_source.0x08040000.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08040000  08040000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000249f0  08040190  08040190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00018f60  08064b80  08064b80  00034b80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0807dae0  0807dae0  00057e94  2**0
                  CONTENTS
  4 .ARM          00000008  0807dae0  0807dae0  0004dae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0807dae8  0807dae8  00057e94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0807dae8  0807dae8  0004dae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0807daec  0807daec  0004daec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000e94  20007000  0807daf0  00057000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000144fc  20007e98  0807e984  00057e98  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2001c394  0807e984  0005c394  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00057e94  2**0
                  CONTENTS, READONLY
 12 .debug_info   0007e906  00000000  00000000  00057ec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000bfd0  00000000  00000000  000d67ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003c58  00000000  00000000  000e27a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003848  00000000  00000000  000e63f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003498a  00000000  00000000  000e9c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00048773  00000000  00000000  0011e5ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001b1e0a  00000000  00000000  00166d3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000ce  00000000  00000000  00318b47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000112e0  00000000  00000000  00318c18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08040190 <__do_global_dtors_aux>:
 8040190:	b510      	push	{r4, lr}
 8040192:	4c05      	ldr	r4, [pc, #20]	; (80401a8 <__do_global_dtors_aux+0x18>)
 8040194:	7823      	ldrb	r3, [r4, #0]
 8040196:	b933      	cbnz	r3, 80401a6 <__do_global_dtors_aux+0x16>
 8040198:	4b04      	ldr	r3, [pc, #16]	; (80401ac <__do_global_dtors_aux+0x1c>)
 804019a:	b113      	cbz	r3, 80401a2 <__do_global_dtors_aux+0x12>
 804019c:	4804      	ldr	r0, [pc, #16]	; (80401b0 <__do_global_dtors_aux+0x20>)
 804019e:	f3af 8000 	nop.w
 80401a2:	2301      	movs	r3, #1
 80401a4:	7023      	strb	r3, [r4, #0]
 80401a6:	bd10      	pop	{r4, pc}
 80401a8:	20007e98 	.word	0x20007e98
 80401ac:	00000000 	.word	0x00000000
 80401b0:	08064b68 	.word	0x08064b68

080401b4 <frame_dummy>:
 80401b4:	b508      	push	{r3, lr}
 80401b6:	4b03      	ldr	r3, [pc, #12]	; (80401c4 <frame_dummy+0x10>)
 80401b8:	b11b      	cbz	r3, 80401c2 <frame_dummy+0xe>
 80401ba:	4903      	ldr	r1, [pc, #12]	; (80401c8 <frame_dummy+0x14>)
 80401bc:	4803      	ldr	r0, [pc, #12]	; (80401cc <frame_dummy+0x18>)
 80401be:	f3af 8000 	nop.w
 80401c2:	bd08      	pop	{r3, pc}
 80401c4:	00000000 	.word	0x00000000
 80401c8:	20007e9c 	.word	0x20007e9c
 80401cc:	08064b68 	.word	0x08064b68

080401d0 <strlen>:
 80401d0:	4603      	mov	r3, r0
 80401d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80401d6:	2a00      	cmp	r2, #0
 80401d8:	d1fb      	bne.n	80401d2 <strlen+0x2>
 80401da:	1a18      	subs	r0, r3, r0
 80401dc:	3801      	subs	r0, #1
 80401de:	4770      	bx	lr

080401e0 <memchr>:
 80401e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80401e4:	2a10      	cmp	r2, #16
 80401e6:	db2b      	blt.n	8040240 <memchr+0x60>
 80401e8:	f010 0f07 	tst.w	r0, #7
 80401ec:	d008      	beq.n	8040200 <memchr+0x20>
 80401ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80401f2:	3a01      	subs	r2, #1
 80401f4:	428b      	cmp	r3, r1
 80401f6:	d02d      	beq.n	8040254 <memchr+0x74>
 80401f8:	f010 0f07 	tst.w	r0, #7
 80401fc:	b342      	cbz	r2, 8040250 <memchr+0x70>
 80401fe:	d1f6      	bne.n	80401ee <memchr+0xe>
 8040200:	b4f0      	push	{r4, r5, r6, r7}
 8040202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8040206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 804020a:	f022 0407 	bic.w	r4, r2, #7
 804020e:	f07f 0700 	mvns.w	r7, #0
 8040212:	2300      	movs	r3, #0
 8040214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8040218:	3c08      	subs	r4, #8
 804021a:	ea85 0501 	eor.w	r5, r5, r1
 804021e:	ea86 0601 	eor.w	r6, r6, r1
 8040222:	fa85 f547 	uadd8	r5, r5, r7
 8040226:	faa3 f587 	sel	r5, r3, r7
 804022a:	fa86 f647 	uadd8	r6, r6, r7
 804022e:	faa5 f687 	sel	r6, r5, r7
 8040232:	b98e      	cbnz	r6, 8040258 <memchr+0x78>
 8040234:	d1ee      	bne.n	8040214 <memchr+0x34>
 8040236:	bcf0      	pop	{r4, r5, r6, r7}
 8040238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 804023c:	f002 0207 	and.w	r2, r2, #7
 8040240:	b132      	cbz	r2, 8040250 <memchr+0x70>
 8040242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8040246:	3a01      	subs	r2, #1
 8040248:	ea83 0301 	eor.w	r3, r3, r1
 804024c:	b113      	cbz	r3, 8040254 <memchr+0x74>
 804024e:	d1f8      	bne.n	8040242 <memchr+0x62>
 8040250:	2000      	movs	r0, #0
 8040252:	4770      	bx	lr
 8040254:	3801      	subs	r0, #1
 8040256:	4770      	bx	lr
 8040258:	2d00      	cmp	r5, #0
 804025a:	bf06      	itte	eq
 804025c:	4635      	moveq	r5, r6
 804025e:	3803      	subeq	r0, #3
 8040260:	3807      	subne	r0, #7
 8040262:	f015 0f01 	tst.w	r5, #1
 8040266:	d107      	bne.n	8040278 <memchr+0x98>
 8040268:	3001      	adds	r0, #1
 804026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 804026e:	bf02      	ittt	eq
 8040270:	3001      	addeq	r0, #1
 8040272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8040276:	3001      	addeq	r0, #1
 8040278:	bcf0      	pop	{r4, r5, r6, r7}
 804027a:	3801      	subs	r0, #1
 804027c:	4770      	bx	lr
 804027e:	bf00      	nop

08040280 <__aeabi_drsub>:
 8040280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8040284:	e002      	b.n	804028c <__adddf3>
 8040286:	bf00      	nop

08040288 <__aeabi_dsub>:
 8040288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0804028c <__adddf3>:
 804028c:	b530      	push	{r4, r5, lr}
 804028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8040292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8040296:	ea94 0f05 	teq	r4, r5
 804029a:	bf08      	it	eq
 804029c:	ea90 0f02 	teqeq	r0, r2
 80402a0:	bf1f      	itttt	ne
 80402a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80402a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80402aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80402ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80402b2:	f000 80e2 	beq.w	804047a <__adddf3+0x1ee>
 80402b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80402ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80402be:	bfb8      	it	lt
 80402c0:	426d      	neglt	r5, r5
 80402c2:	dd0c      	ble.n	80402de <__adddf3+0x52>
 80402c4:	442c      	add	r4, r5
 80402c6:	ea80 0202 	eor.w	r2, r0, r2
 80402ca:	ea81 0303 	eor.w	r3, r1, r3
 80402ce:	ea82 0000 	eor.w	r0, r2, r0
 80402d2:	ea83 0101 	eor.w	r1, r3, r1
 80402d6:	ea80 0202 	eor.w	r2, r0, r2
 80402da:	ea81 0303 	eor.w	r3, r1, r3
 80402de:	2d36      	cmp	r5, #54	; 0x36
 80402e0:	bf88      	it	hi
 80402e2:	bd30      	pophi	{r4, r5, pc}
 80402e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80402e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80402ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80402f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80402f4:	d002      	beq.n	80402fc <__adddf3+0x70>
 80402f6:	4240      	negs	r0, r0
 80402f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80402fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8040300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8040304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8040308:	d002      	beq.n	8040310 <__adddf3+0x84>
 804030a:	4252      	negs	r2, r2
 804030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8040310:	ea94 0f05 	teq	r4, r5
 8040314:	f000 80a7 	beq.w	8040466 <__adddf3+0x1da>
 8040318:	f1a4 0401 	sub.w	r4, r4, #1
 804031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8040320:	db0d      	blt.n	804033e <__adddf3+0xb2>
 8040322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8040326:	fa22 f205 	lsr.w	r2, r2, r5
 804032a:	1880      	adds	r0, r0, r2
 804032c:	f141 0100 	adc.w	r1, r1, #0
 8040330:	fa03 f20e 	lsl.w	r2, r3, lr
 8040334:	1880      	adds	r0, r0, r2
 8040336:	fa43 f305 	asr.w	r3, r3, r5
 804033a:	4159      	adcs	r1, r3
 804033c:	e00e      	b.n	804035c <__adddf3+0xd0>
 804033e:	f1a5 0520 	sub.w	r5, r5, #32
 8040342:	f10e 0e20 	add.w	lr, lr, #32
 8040346:	2a01      	cmp	r2, #1
 8040348:	fa03 fc0e 	lsl.w	ip, r3, lr
 804034c:	bf28      	it	cs
 804034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8040352:	fa43 f305 	asr.w	r3, r3, r5
 8040356:	18c0      	adds	r0, r0, r3
 8040358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 804035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8040360:	d507      	bpl.n	8040372 <__adddf3+0xe6>
 8040362:	f04f 0e00 	mov.w	lr, #0
 8040366:	f1dc 0c00 	rsbs	ip, ip, #0
 804036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 804036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8040372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8040376:	d31b      	bcc.n	80403b0 <__adddf3+0x124>
 8040378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 804037c:	d30c      	bcc.n	8040398 <__adddf3+0x10c>
 804037e:	0849      	lsrs	r1, r1, #1
 8040380:	ea5f 0030 	movs.w	r0, r0, rrx
 8040384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8040388:	f104 0401 	add.w	r4, r4, #1
 804038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8040390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8040394:	f080 809a 	bcs.w	80404cc <__adddf3+0x240>
 8040398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 804039c:	bf08      	it	eq
 804039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80403a2:	f150 0000 	adcs.w	r0, r0, #0
 80403a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80403aa:	ea41 0105 	orr.w	r1, r1, r5
 80403ae:	bd30      	pop	{r4, r5, pc}
 80403b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80403b4:	4140      	adcs	r0, r0
 80403b6:	eb41 0101 	adc.w	r1, r1, r1
 80403ba:	3c01      	subs	r4, #1
 80403bc:	bf28      	it	cs
 80403be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80403c2:	d2e9      	bcs.n	8040398 <__adddf3+0x10c>
 80403c4:	f091 0f00 	teq	r1, #0
 80403c8:	bf04      	itt	eq
 80403ca:	4601      	moveq	r1, r0
 80403cc:	2000      	moveq	r0, #0
 80403ce:	fab1 f381 	clz	r3, r1
 80403d2:	bf08      	it	eq
 80403d4:	3320      	addeq	r3, #32
 80403d6:	f1a3 030b 	sub.w	r3, r3, #11
 80403da:	f1b3 0220 	subs.w	r2, r3, #32
 80403de:	da0c      	bge.n	80403fa <__adddf3+0x16e>
 80403e0:	320c      	adds	r2, #12
 80403e2:	dd08      	ble.n	80403f6 <__adddf3+0x16a>
 80403e4:	f102 0c14 	add.w	ip, r2, #20
 80403e8:	f1c2 020c 	rsb	r2, r2, #12
 80403ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80403f0:	fa21 f102 	lsr.w	r1, r1, r2
 80403f4:	e00c      	b.n	8040410 <__adddf3+0x184>
 80403f6:	f102 0214 	add.w	r2, r2, #20
 80403fa:	bfd8      	it	le
 80403fc:	f1c2 0c20 	rsble	ip, r2, #32
 8040400:	fa01 f102 	lsl.w	r1, r1, r2
 8040404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8040408:	bfdc      	itt	le
 804040a:	ea41 010c 	orrle.w	r1, r1, ip
 804040e:	4090      	lslle	r0, r2
 8040410:	1ae4      	subs	r4, r4, r3
 8040412:	bfa2      	ittt	ge
 8040414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8040418:	4329      	orrge	r1, r5
 804041a:	bd30      	popge	{r4, r5, pc}
 804041c:	ea6f 0404 	mvn.w	r4, r4
 8040420:	3c1f      	subs	r4, #31
 8040422:	da1c      	bge.n	804045e <__adddf3+0x1d2>
 8040424:	340c      	adds	r4, #12
 8040426:	dc0e      	bgt.n	8040446 <__adddf3+0x1ba>
 8040428:	f104 0414 	add.w	r4, r4, #20
 804042c:	f1c4 0220 	rsb	r2, r4, #32
 8040430:	fa20 f004 	lsr.w	r0, r0, r4
 8040434:	fa01 f302 	lsl.w	r3, r1, r2
 8040438:	ea40 0003 	orr.w	r0, r0, r3
 804043c:	fa21 f304 	lsr.w	r3, r1, r4
 8040440:	ea45 0103 	orr.w	r1, r5, r3
 8040444:	bd30      	pop	{r4, r5, pc}
 8040446:	f1c4 040c 	rsb	r4, r4, #12
 804044a:	f1c4 0220 	rsb	r2, r4, #32
 804044e:	fa20 f002 	lsr.w	r0, r0, r2
 8040452:	fa01 f304 	lsl.w	r3, r1, r4
 8040456:	ea40 0003 	orr.w	r0, r0, r3
 804045a:	4629      	mov	r1, r5
 804045c:	bd30      	pop	{r4, r5, pc}
 804045e:	fa21 f004 	lsr.w	r0, r1, r4
 8040462:	4629      	mov	r1, r5
 8040464:	bd30      	pop	{r4, r5, pc}
 8040466:	f094 0f00 	teq	r4, #0
 804046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 804046e:	bf06      	itte	eq
 8040470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8040474:	3401      	addeq	r4, #1
 8040476:	3d01      	subne	r5, #1
 8040478:	e74e      	b.n	8040318 <__adddf3+0x8c>
 804047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 804047e:	bf18      	it	ne
 8040480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8040484:	d029      	beq.n	80404da <__adddf3+0x24e>
 8040486:	ea94 0f05 	teq	r4, r5
 804048a:	bf08      	it	eq
 804048c:	ea90 0f02 	teqeq	r0, r2
 8040490:	d005      	beq.n	804049e <__adddf3+0x212>
 8040492:	ea54 0c00 	orrs.w	ip, r4, r0
 8040496:	bf04      	itt	eq
 8040498:	4619      	moveq	r1, r3
 804049a:	4610      	moveq	r0, r2
 804049c:	bd30      	pop	{r4, r5, pc}
 804049e:	ea91 0f03 	teq	r1, r3
 80404a2:	bf1e      	ittt	ne
 80404a4:	2100      	movne	r1, #0
 80404a6:	2000      	movne	r0, #0
 80404a8:	bd30      	popne	{r4, r5, pc}
 80404aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80404ae:	d105      	bne.n	80404bc <__adddf3+0x230>
 80404b0:	0040      	lsls	r0, r0, #1
 80404b2:	4149      	adcs	r1, r1
 80404b4:	bf28      	it	cs
 80404b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80404ba:	bd30      	pop	{r4, r5, pc}
 80404bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80404c0:	bf3c      	itt	cc
 80404c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80404c6:	bd30      	popcc	{r4, r5, pc}
 80404c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80404cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80404d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80404d4:	f04f 0000 	mov.w	r0, #0
 80404d8:	bd30      	pop	{r4, r5, pc}
 80404da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80404de:	bf1a      	itte	ne
 80404e0:	4619      	movne	r1, r3
 80404e2:	4610      	movne	r0, r2
 80404e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80404e8:	bf1c      	itt	ne
 80404ea:	460b      	movne	r3, r1
 80404ec:	4602      	movne	r2, r0
 80404ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80404f2:	bf06      	itte	eq
 80404f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80404f8:	ea91 0f03 	teqeq	r1, r3
 80404fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8040500:	bd30      	pop	{r4, r5, pc}
 8040502:	bf00      	nop

08040504 <__aeabi_ui2d>:
 8040504:	f090 0f00 	teq	r0, #0
 8040508:	bf04      	itt	eq
 804050a:	2100      	moveq	r1, #0
 804050c:	4770      	bxeq	lr
 804050e:	b530      	push	{r4, r5, lr}
 8040510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8040514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8040518:	f04f 0500 	mov.w	r5, #0
 804051c:	f04f 0100 	mov.w	r1, #0
 8040520:	e750      	b.n	80403c4 <__adddf3+0x138>
 8040522:	bf00      	nop

08040524 <__aeabi_i2d>:
 8040524:	f090 0f00 	teq	r0, #0
 8040528:	bf04      	itt	eq
 804052a:	2100      	moveq	r1, #0
 804052c:	4770      	bxeq	lr
 804052e:	b530      	push	{r4, r5, lr}
 8040530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8040534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8040538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 804053c:	bf48      	it	mi
 804053e:	4240      	negmi	r0, r0
 8040540:	f04f 0100 	mov.w	r1, #0
 8040544:	e73e      	b.n	80403c4 <__adddf3+0x138>
 8040546:	bf00      	nop

08040548 <__aeabi_f2d>:
 8040548:	0042      	lsls	r2, r0, #1
 804054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 804054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8040552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8040556:	bf1f      	itttt	ne
 8040558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 804055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8040560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8040564:	4770      	bxne	lr
 8040566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 804056a:	bf08      	it	eq
 804056c:	4770      	bxeq	lr
 804056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8040572:	bf04      	itt	eq
 8040574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8040578:	4770      	bxeq	lr
 804057a:	b530      	push	{r4, r5, lr}
 804057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8040580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8040584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8040588:	e71c      	b.n	80403c4 <__adddf3+0x138>
 804058a:	bf00      	nop

0804058c <__aeabi_ul2d>:
 804058c:	ea50 0201 	orrs.w	r2, r0, r1
 8040590:	bf08      	it	eq
 8040592:	4770      	bxeq	lr
 8040594:	b530      	push	{r4, r5, lr}
 8040596:	f04f 0500 	mov.w	r5, #0
 804059a:	e00a      	b.n	80405b2 <__aeabi_l2d+0x16>

0804059c <__aeabi_l2d>:
 804059c:	ea50 0201 	orrs.w	r2, r0, r1
 80405a0:	bf08      	it	eq
 80405a2:	4770      	bxeq	lr
 80405a4:	b530      	push	{r4, r5, lr}
 80405a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80405aa:	d502      	bpl.n	80405b2 <__aeabi_l2d+0x16>
 80405ac:	4240      	negs	r0, r0
 80405ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80405b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80405b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80405ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80405be:	f43f aed8 	beq.w	8040372 <__adddf3+0xe6>
 80405c2:	f04f 0203 	mov.w	r2, #3
 80405c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80405ca:	bf18      	it	ne
 80405cc:	3203      	addne	r2, #3
 80405ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80405d2:	bf18      	it	ne
 80405d4:	3203      	addne	r2, #3
 80405d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80405da:	f1c2 0320 	rsb	r3, r2, #32
 80405de:	fa00 fc03 	lsl.w	ip, r0, r3
 80405e2:	fa20 f002 	lsr.w	r0, r0, r2
 80405e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80405ea:	ea40 000e 	orr.w	r0, r0, lr
 80405ee:	fa21 f102 	lsr.w	r1, r1, r2
 80405f2:	4414      	add	r4, r2
 80405f4:	e6bd      	b.n	8040372 <__adddf3+0xe6>
 80405f6:	bf00      	nop

080405f8 <__aeabi_dmul>:
 80405f8:	b570      	push	{r4, r5, r6, lr}
 80405fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80405fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8040602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8040606:	bf1d      	ittte	ne
 8040608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 804060c:	ea94 0f0c 	teqne	r4, ip
 8040610:	ea95 0f0c 	teqne	r5, ip
 8040614:	f000 f8de 	bleq	80407d4 <__aeabi_dmul+0x1dc>
 8040618:	442c      	add	r4, r5
 804061a:	ea81 0603 	eor.w	r6, r1, r3
 804061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8040622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8040626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 804062a:	bf18      	it	ne
 804062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8040630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8040634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8040638:	d038      	beq.n	80406ac <__aeabi_dmul+0xb4>
 804063a:	fba0 ce02 	umull	ip, lr, r0, r2
 804063e:	f04f 0500 	mov.w	r5, #0
 8040642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8040646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 804064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 804064e:	f04f 0600 	mov.w	r6, #0
 8040652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8040656:	f09c 0f00 	teq	ip, #0
 804065a:	bf18      	it	ne
 804065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8040660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8040664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8040668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 804066c:	d204      	bcs.n	8040678 <__aeabi_dmul+0x80>
 804066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8040672:	416d      	adcs	r5, r5
 8040674:	eb46 0606 	adc.w	r6, r6, r6
 8040678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 804067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8040680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8040684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8040688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 804068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8040690:	bf88      	it	hi
 8040692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8040696:	d81e      	bhi.n	80406d6 <__aeabi_dmul+0xde>
 8040698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 804069c:	bf08      	it	eq
 804069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80406a2:	f150 0000 	adcs.w	r0, r0, #0
 80406a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80406aa:	bd70      	pop	{r4, r5, r6, pc}
 80406ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80406b0:	ea46 0101 	orr.w	r1, r6, r1
 80406b4:	ea40 0002 	orr.w	r0, r0, r2
 80406b8:	ea81 0103 	eor.w	r1, r1, r3
 80406bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80406c0:	bfc2      	ittt	gt
 80406c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80406c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80406ca:	bd70      	popgt	{r4, r5, r6, pc}
 80406cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80406d0:	f04f 0e00 	mov.w	lr, #0
 80406d4:	3c01      	subs	r4, #1
 80406d6:	f300 80ab 	bgt.w	8040830 <__aeabi_dmul+0x238>
 80406da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80406de:	bfde      	ittt	le
 80406e0:	2000      	movle	r0, #0
 80406e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80406e6:	bd70      	pople	{r4, r5, r6, pc}
 80406e8:	f1c4 0400 	rsb	r4, r4, #0
 80406ec:	3c20      	subs	r4, #32
 80406ee:	da35      	bge.n	804075c <__aeabi_dmul+0x164>
 80406f0:	340c      	adds	r4, #12
 80406f2:	dc1b      	bgt.n	804072c <__aeabi_dmul+0x134>
 80406f4:	f104 0414 	add.w	r4, r4, #20
 80406f8:	f1c4 0520 	rsb	r5, r4, #32
 80406fc:	fa00 f305 	lsl.w	r3, r0, r5
 8040700:	fa20 f004 	lsr.w	r0, r0, r4
 8040704:	fa01 f205 	lsl.w	r2, r1, r5
 8040708:	ea40 0002 	orr.w	r0, r0, r2
 804070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8040710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8040714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8040718:	fa21 f604 	lsr.w	r6, r1, r4
 804071c:	eb42 0106 	adc.w	r1, r2, r6
 8040720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8040724:	bf08      	it	eq
 8040726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 804072a:	bd70      	pop	{r4, r5, r6, pc}
 804072c:	f1c4 040c 	rsb	r4, r4, #12
 8040730:	f1c4 0520 	rsb	r5, r4, #32
 8040734:	fa00 f304 	lsl.w	r3, r0, r4
 8040738:	fa20 f005 	lsr.w	r0, r0, r5
 804073c:	fa01 f204 	lsl.w	r2, r1, r4
 8040740:	ea40 0002 	orr.w	r0, r0, r2
 8040744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8040748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 804074c:	f141 0100 	adc.w	r1, r1, #0
 8040750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8040754:	bf08      	it	eq
 8040756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 804075a:	bd70      	pop	{r4, r5, r6, pc}
 804075c:	f1c4 0520 	rsb	r5, r4, #32
 8040760:	fa00 f205 	lsl.w	r2, r0, r5
 8040764:	ea4e 0e02 	orr.w	lr, lr, r2
 8040768:	fa20 f304 	lsr.w	r3, r0, r4
 804076c:	fa01 f205 	lsl.w	r2, r1, r5
 8040770:	ea43 0302 	orr.w	r3, r3, r2
 8040774:	fa21 f004 	lsr.w	r0, r1, r4
 8040778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 804077c:	fa21 f204 	lsr.w	r2, r1, r4
 8040780:	ea20 0002 	bic.w	r0, r0, r2
 8040784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8040788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 804078c:	bf08      	it	eq
 804078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8040792:	bd70      	pop	{r4, r5, r6, pc}
 8040794:	f094 0f00 	teq	r4, #0
 8040798:	d10f      	bne.n	80407ba <__aeabi_dmul+0x1c2>
 804079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 804079e:	0040      	lsls	r0, r0, #1
 80407a0:	eb41 0101 	adc.w	r1, r1, r1
 80407a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80407a8:	bf08      	it	eq
 80407aa:	3c01      	subeq	r4, #1
 80407ac:	d0f7      	beq.n	804079e <__aeabi_dmul+0x1a6>
 80407ae:	ea41 0106 	orr.w	r1, r1, r6
 80407b2:	f095 0f00 	teq	r5, #0
 80407b6:	bf18      	it	ne
 80407b8:	4770      	bxne	lr
 80407ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80407be:	0052      	lsls	r2, r2, #1
 80407c0:	eb43 0303 	adc.w	r3, r3, r3
 80407c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80407c8:	bf08      	it	eq
 80407ca:	3d01      	subeq	r5, #1
 80407cc:	d0f7      	beq.n	80407be <__aeabi_dmul+0x1c6>
 80407ce:	ea43 0306 	orr.w	r3, r3, r6
 80407d2:	4770      	bx	lr
 80407d4:	ea94 0f0c 	teq	r4, ip
 80407d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80407dc:	bf18      	it	ne
 80407de:	ea95 0f0c 	teqne	r5, ip
 80407e2:	d00c      	beq.n	80407fe <__aeabi_dmul+0x206>
 80407e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80407e8:	bf18      	it	ne
 80407ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80407ee:	d1d1      	bne.n	8040794 <__aeabi_dmul+0x19c>
 80407f0:	ea81 0103 	eor.w	r1, r1, r3
 80407f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80407f8:	f04f 0000 	mov.w	r0, #0
 80407fc:	bd70      	pop	{r4, r5, r6, pc}
 80407fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8040802:	bf06      	itte	eq
 8040804:	4610      	moveq	r0, r2
 8040806:	4619      	moveq	r1, r3
 8040808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 804080c:	d019      	beq.n	8040842 <__aeabi_dmul+0x24a>
 804080e:	ea94 0f0c 	teq	r4, ip
 8040812:	d102      	bne.n	804081a <__aeabi_dmul+0x222>
 8040814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8040818:	d113      	bne.n	8040842 <__aeabi_dmul+0x24a>
 804081a:	ea95 0f0c 	teq	r5, ip
 804081e:	d105      	bne.n	804082c <__aeabi_dmul+0x234>
 8040820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8040824:	bf1c      	itt	ne
 8040826:	4610      	movne	r0, r2
 8040828:	4619      	movne	r1, r3
 804082a:	d10a      	bne.n	8040842 <__aeabi_dmul+0x24a>
 804082c:	ea81 0103 	eor.w	r1, r1, r3
 8040830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8040834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8040838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 804083c:	f04f 0000 	mov.w	r0, #0
 8040840:	bd70      	pop	{r4, r5, r6, pc}
 8040842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8040846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 804084a:	bd70      	pop	{r4, r5, r6, pc}

0804084c <__aeabi_ddiv>:
 804084c:	b570      	push	{r4, r5, r6, lr}
 804084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8040852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8040856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 804085a:	bf1d      	ittte	ne
 804085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8040860:	ea94 0f0c 	teqne	r4, ip
 8040864:	ea95 0f0c 	teqne	r5, ip
 8040868:	f000 f8a7 	bleq	80409ba <__aeabi_ddiv+0x16e>
 804086c:	eba4 0405 	sub.w	r4, r4, r5
 8040870:	ea81 0e03 	eor.w	lr, r1, r3
 8040874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8040878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 804087c:	f000 8088 	beq.w	8040990 <__aeabi_ddiv+0x144>
 8040880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8040884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8040888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 804088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8040890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8040894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8040898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 804089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80408a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80408a4:	429d      	cmp	r5, r3
 80408a6:	bf08      	it	eq
 80408a8:	4296      	cmpeq	r6, r2
 80408aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80408ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80408b2:	d202      	bcs.n	80408ba <__aeabi_ddiv+0x6e>
 80408b4:	085b      	lsrs	r3, r3, #1
 80408b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80408ba:	1ab6      	subs	r6, r6, r2
 80408bc:	eb65 0503 	sbc.w	r5, r5, r3
 80408c0:	085b      	lsrs	r3, r3, #1
 80408c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80408c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80408ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80408ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80408d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80408d6:	bf22      	ittt	cs
 80408d8:	1ab6      	subcs	r6, r6, r2
 80408da:	4675      	movcs	r5, lr
 80408dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80408e0:	085b      	lsrs	r3, r3, #1
 80408e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80408e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80408ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80408ee:	bf22      	ittt	cs
 80408f0:	1ab6      	subcs	r6, r6, r2
 80408f2:	4675      	movcs	r5, lr
 80408f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80408f8:	085b      	lsrs	r3, r3, #1
 80408fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80408fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8040902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8040906:	bf22      	ittt	cs
 8040908:	1ab6      	subcs	r6, r6, r2
 804090a:	4675      	movcs	r5, lr
 804090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8040910:	085b      	lsrs	r3, r3, #1
 8040912:	ea4f 0232 	mov.w	r2, r2, rrx
 8040916:	ebb6 0e02 	subs.w	lr, r6, r2
 804091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 804091e:	bf22      	ittt	cs
 8040920:	1ab6      	subcs	r6, r6, r2
 8040922:	4675      	movcs	r5, lr
 8040924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8040928:	ea55 0e06 	orrs.w	lr, r5, r6
 804092c:	d018      	beq.n	8040960 <__aeabi_ddiv+0x114>
 804092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8040932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8040936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 804093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 804093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8040942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8040946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 804094a:	d1c0      	bne.n	80408ce <__aeabi_ddiv+0x82>
 804094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8040950:	d10b      	bne.n	804096a <__aeabi_ddiv+0x11e>
 8040952:	ea41 0100 	orr.w	r1, r1, r0
 8040956:	f04f 0000 	mov.w	r0, #0
 804095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 804095e:	e7b6      	b.n	80408ce <__aeabi_ddiv+0x82>
 8040960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8040964:	bf04      	itt	eq
 8040966:	4301      	orreq	r1, r0
 8040968:	2000      	moveq	r0, #0
 804096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 804096e:	bf88      	it	hi
 8040970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8040974:	f63f aeaf 	bhi.w	80406d6 <__aeabi_dmul+0xde>
 8040978:	ebb5 0c03 	subs.w	ip, r5, r3
 804097c:	bf04      	itt	eq
 804097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8040982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8040986:	f150 0000 	adcs.w	r0, r0, #0
 804098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 804098e:	bd70      	pop	{r4, r5, r6, pc}
 8040990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8040994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8040998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 804099c:	bfc2      	ittt	gt
 804099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80409a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80409a6:	bd70      	popgt	{r4, r5, r6, pc}
 80409a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80409ac:	f04f 0e00 	mov.w	lr, #0
 80409b0:	3c01      	subs	r4, #1
 80409b2:	e690      	b.n	80406d6 <__aeabi_dmul+0xde>
 80409b4:	ea45 0e06 	orr.w	lr, r5, r6
 80409b8:	e68d      	b.n	80406d6 <__aeabi_dmul+0xde>
 80409ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80409be:	ea94 0f0c 	teq	r4, ip
 80409c2:	bf08      	it	eq
 80409c4:	ea95 0f0c 	teqeq	r5, ip
 80409c8:	f43f af3b 	beq.w	8040842 <__aeabi_dmul+0x24a>
 80409cc:	ea94 0f0c 	teq	r4, ip
 80409d0:	d10a      	bne.n	80409e8 <__aeabi_ddiv+0x19c>
 80409d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80409d6:	f47f af34 	bne.w	8040842 <__aeabi_dmul+0x24a>
 80409da:	ea95 0f0c 	teq	r5, ip
 80409de:	f47f af25 	bne.w	804082c <__aeabi_dmul+0x234>
 80409e2:	4610      	mov	r0, r2
 80409e4:	4619      	mov	r1, r3
 80409e6:	e72c      	b.n	8040842 <__aeabi_dmul+0x24a>
 80409e8:	ea95 0f0c 	teq	r5, ip
 80409ec:	d106      	bne.n	80409fc <__aeabi_ddiv+0x1b0>
 80409ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80409f2:	f43f aefd 	beq.w	80407f0 <__aeabi_dmul+0x1f8>
 80409f6:	4610      	mov	r0, r2
 80409f8:	4619      	mov	r1, r3
 80409fa:	e722      	b.n	8040842 <__aeabi_dmul+0x24a>
 80409fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8040a00:	bf18      	it	ne
 8040a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8040a06:	f47f aec5 	bne.w	8040794 <__aeabi_dmul+0x19c>
 8040a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8040a0e:	f47f af0d 	bne.w	804082c <__aeabi_dmul+0x234>
 8040a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8040a16:	f47f aeeb 	bne.w	80407f0 <__aeabi_dmul+0x1f8>
 8040a1a:	e712      	b.n	8040842 <__aeabi_dmul+0x24a>

08040a1c <__gedf2>:
 8040a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8040a20:	e006      	b.n	8040a30 <__cmpdf2+0x4>
 8040a22:	bf00      	nop

08040a24 <__ledf2>:
 8040a24:	f04f 0c01 	mov.w	ip, #1
 8040a28:	e002      	b.n	8040a30 <__cmpdf2+0x4>
 8040a2a:	bf00      	nop

08040a2c <__cmpdf2>:
 8040a2c:	f04f 0c01 	mov.w	ip, #1
 8040a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8040a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8040a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8040a40:	bf18      	it	ne
 8040a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8040a46:	d01b      	beq.n	8040a80 <__cmpdf2+0x54>
 8040a48:	b001      	add	sp, #4
 8040a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8040a4e:	bf0c      	ite	eq
 8040a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8040a54:	ea91 0f03 	teqne	r1, r3
 8040a58:	bf02      	ittt	eq
 8040a5a:	ea90 0f02 	teqeq	r0, r2
 8040a5e:	2000      	moveq	r0, #0
 8040a60:	4770      	bxeq	lr
 8040a62:	f110 0f00 	cmn.w	r0, #0
 8040a66:	ea91 0f03 	teq	r1, r3
 8040a6a:	bf58      	it	pl
 8040a6c:	4299      	cmppl	r1, r3
 8040a6e:	bf08      	it	eq
 8040a70:	4290      	cmpeq	r0, r2
 8040a72:	bf2c      	ite	cs
 8040a74:	17d8      	asrcs	r0, r3, #31
 8040a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8040a7a:	f040 0001 	orr.w	r0, r0, #1
 8040a7e:	4770      	bx	lr
 8040a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8040a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040a88:	d102      	bne.n	8040a90 <__cmpdf2+0x64>
 8040a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8040a8e:	d107      	bne.n	8040aa0 <__cmpdf2+0x74>
 8040a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8040a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040a98:	d1d6      	bne.n	8040a48 <__cmpdf2+0x1c>
 8040a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8040a9e:	d0d3      	beq.n	8040a48 <__cmpdf2+0x1c>
 8040aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8040aa4:	4770      	bx	lr
 8040aa6:	bf00      	nop

08040aa8 <__aeabi_cdrcmple>:
 8040aa8:	4684      	mov	ip, r0
 8040aaa:	4610      	mov	r0, r2
 8040aac:	4662      	mov	r2, ip
 8040aae:	468c      	mov	ip, r1
 8040ab0:	4619      	mov	r1, r3
 8040ab2:	4663      	mov	r3, ip
 8040ab4:	e000      	b.n	8040ab8 <__aeabi_cdcmpeq>
 8040ab6:	bf00      	nop

08040ab8 <__aeabi_cdcmpeq>:
 8040ab8:	b501      	push	{r0, lr}
 8040aba:	f7ff ffb7 	bl	8040a2c <__cmpdf2>
 8040abe:	2800      	cmp	r0, #0
 8040ac0:	bf48      	it	mi
 8040ac2:	f110 0f00 	cmnmi.w	r0, #0
 8040ac6:	bd01      	pop	{r0, pc}

08040ac8 <__aeabi_dcmpeq>:
 8040ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040acc:	f7ff fff4 	bl	8040ab8 <__aeabi_cdcmpeq>
 8040ad0:	bf0c      	ite	eq
 8040ad2:	2001      	moveq	r0, #1
 8040ad4:	2000      	movne	r0, #0
 8040ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8040ada:	bf00      	nop

08040adc <__aeabi_dcmplt>:
 8040adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040ae0:	f7ff ffea 	bl	8040ab8 <__aeabi_cdcmpeq>
 8040ae4:	bf34      	ite	cc
 8040ae6:	2001      	movcc	r0, #1
 8040ae8:	2000      	movcs	r0, #0
 8040aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8040aee:	bf00      	nop

08040af0 <__aeabi_dcmple>:
 8040af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040af4:	f7ff ffe0 	bl	8040ab8 <__aeabi_cdcmpeq>
 8040af8:	bf94      	ite	ls
 8040afa:	2001      	movls	r0, #1
 8040afc:	2000      	movhi	r0, #0
 8040afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8040b02:	bf00      	nop

08040b04 <__aeabi_dcmpge>:
 8040b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040b08:	f7ff ffce 	bl	8040aa8 <__aeabi_cdrcmple>
 8040b0c:	bf94      	ite	ls
 8040b0e:	2001      	movls	r0, #1
 8040b10:	2000      	movhi	r0, #0
 8040b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8040b16:	bf00      	nop

08040b18 <__aeabi_dcmpgt>:
 8040b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040b1c:	f7ff ffc4 	bl	8040aa8 <__aeabi_cdrcmple>
 8040b20:	bf34      	ite	cc
 8040b22:	2001      	movcc	r0, #1
 8040b24:	2000      	movcs	r0, #0
 8040b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8040b2a:	bf00      	nop

08040b2c <__aeabi_dcmpun>:
 8040b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8040b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040b34:	d102      	bne.n	8040b3c <__aeabi_dcmpun+0x10>
 8040b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8040b3a:	d10a      	bne.n	8040b52 <__aeabi_dcmpun+0x26>
 8040b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8040b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040b44:	d102      	bne.n	8040b4c <__aeabi_dcmpun+0x20>
 8040b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8040b4a:	d102      	bne.n	8040b52 <__aeabi_dcmpun+0x26>
 8040b4c:	f04f 0000 	mov.w	r0, #0
 8040b50:	4770      	bx	lr
 8040b52:	f04f 0001 	mov.w	r0, #1
 8040b56:	4770      	bx	lr

08040b58 <__aeabi_d2iz>:
 8040b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8040b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8040b60:	d215      	bcs.n	8040b8e <__aeabi_d2iz+0x36>
 8040b62:	d511      	bpl.n	8040b88 <__aeabi_d2iz+0x30>
 8040b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8040b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8040b6c:	d912      	bls.n	8040b94 <__aeabi_d2iz+0x3c>
 8040b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8040b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8040b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8040b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8040b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8040b82:	bf18      	it	ne
 8040b84:	4240      	negne	r0, r0
 8040b86:	4770      	bx	lr
 8040b88:	f04f 0000 	mov.w	r0, #0
 8040b8c:	4770      	bx	lr
 8040b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8040b92:	d105      	bne.n	8040ba0 <__aeabi_d2iz+0x48>
 8040b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8040b98:	bf08      	it	eq
 8040b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8040b9e:	4770      	bx	lr
 8040ba0:	f04f 0000 	mov.w	r0, #0
 8040ba4:	4770      	bx	lr
 8040ba6:	bf00      	nop

08040ba8 <__aeabi_d2uiz>:
 8040ba8:	004a      	lsls	r2, r1, #1
 8040baa:	d211      	bcs.n	8040bd0 <__aeabi_d2uiz+0x28>
 8040bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8040bb0:	d211      	bcs.n	8040bd6 <__aeabi_d2uiz+0x2e>
 8040bb2:	d50d      	bpl.n	8040bd0 <__aeabi_d2uiz+0x28>
 8040bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8040bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8040bbc:	d40e      	bmi.n	8040bdc <__aeabi_d2uiz+0x34>
 8040bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8040bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8040bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8040bca:	fa23 f002 	lsr.w	r0, r3, r2
 8040bce:	4770      	bx	lr
 8040bd0:	f04f 0000 	mov.w	r0, #0
 8040bd4:	4770      	bx	lr
 8040bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8040bda:	d102      	bne.n	8040be2 <__aeabi_d2uiz+0x3a>
 8040bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8040be0:	4770      	bx	lr
 8040be2:	f04f 0000 	mov.w	r0, #0
 8040be6:	4770      	bx	lr

08040be8 <__aeabi_d2f>:
 8040be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8040bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8040bf0:	bf24      	itt	cs
 8040bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8040bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8040bfa:	d90d      	bls.n	8040c18 <__aeabi_d2f+0x30>
 8040bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8040c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8040c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8040c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8040c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8040c10:	bf08      	it	eq
 8040c12:	f020 0001 	biceq.w	r0, r0, #1
 8040c16:	4770      	bx	lr
 8040c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8040c1c:	d121      	bne.n	8040c62 <__aeabi_d2f+0x7a>
 8040c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8040c22:	bfbc      	itt	lt
 8040c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8040c28:	4770      	bxlt	lr
 8040c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8040c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8040c32:	f1c2 0218 	rsb	r2, r2, #24
 8040c36:	f1c2 0c20 	rsb	ip, r2, #32
 8040c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8040c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8040c42:	bf18      	it	ne
 8040c44:	f040 0001 	orrne.w	r0, r0, #1
 8040c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8040c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8040c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8040c54:	ea40 000c 	orr.w	r0, r0, ip
 8040c58:	fa23 f302 	lsr.w	r3, r3, r2
 8040c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8040c60:	e7cc      	b.n	8040bfc <__aeabi_d2f+0x14>
 8040c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8040c66:	d107      	bne.n	8040c78 <__aeabi_d2f+0x90>
 8040c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8040c6c:	bf1e      	ittt	ne
 8040c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8040c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8040c76:	4770      	bxne	lr
 8040c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8040c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8040c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8040c84:	4770      	bx	lr
 8040c86:	bf00      	nop

08040c88 <__aeabi_frsub>:
 8040c88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8040c8c:	e002      	b.n	8040c94 <__addsf3>
 8040c8e:	bf00      	nop

08040c90 <__aeabi_fsub>:
 8040c90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08040c94 <__addsf3>:
 8040c94:	0042      	lsls	r2, r0, #1
 8040c96:	bf1f      	itttt	ne
 8040c98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8040c9c:	ea92 0f03 	teqne	r2, r3
 8040ca0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8040ca4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8040ca8:	d06a      	beq.n	8040d80 <__addsf3+0xec>
 8040caa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8040cae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8040cb2:	bfc1      	itttt	gt
 8040cb4:	18d2      	addgt	r2, r2, r3
 8040cb6:	4041      	eorgt	r1, r0
 8040cb8:	4048      	eorgt	r0, r1
 8040cba:	4041      	eorgt	r1, r0
 8040cbc:	bfb8      	it	lt
 8040cbe:	425b      	neglt	r3, r3
 8040cc0:	2b19      	cmp	r3, #25
 8040cc2:	bf88      	it	hi
 8040cc4:	4770      	bxhi	lr
 8040cc6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8040cca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8040cce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8040cd2:	bf18      	it	ne
 8040cd4:	4240      	negne	r0, r0
 8040cd6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8040cda:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8040cde:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8040ce2:	bf18      	it	ne
 8040ce4:	4249      	negne	r1, r1
 8040ce6:	ea92 0f03 	teq	r2, r3
 8040cea:	d03f      	beq.n	8040d6c <__addsf3+0xd8>
 8040cec:	f1a2 0201 	sub.w	r2, r2, #1
 8040cf0:	fa41 fc03 	asr.w	ip, r1, r3
 8040cf4:	eb10 000c 	adds.w	r0, r0, ip
 8040cf8:	f1c3 0320 	rsb	r3, r3, #32
 8040cfc:	fa01 f103 	lsl.w	r1, r1, r3
 8040d00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8040d04:	d502      	bpl.n	8040d0c <__addsf3+0x78>
 8040d06:	4249      	negs	r1, r1
 8040d08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8040d0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8040d10:	d313      	bcc.n	8040d3a <__addsf3+0xa6>
 8040d12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8040d16:	d306      	bcc.n	8040d26 <__addsf3+0x92>
 8040d18:	0840      	lsrs	r0, r0, #1
 8040d1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8040d1e:	f102 0201 	add.w	r2, r2, #1
 8040d22:	2afe      	cmp	r2, #254	; 0xfe
 8040d24:	d251      	bcs.n	8040dca <__addsf3+0x136>
 8040d26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8040d2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8040d2e:	bf08      	it	eq
 8040d30:	f020 0001 	biceq.w	r0, r0, #1
 8040d34:	ea40 0003 	orr.w	r0, r0, r3
 8040d38:	4770      	bx	lr
 8040d3a:	0049      	lsls	r1, r1, #1
 8040d3c:	eb40 0000 	adc.w	r0, r0, r0
 8040d40:	3a01      	subs	r2, #1
 8040d42:	bf28      	it	cs
 8040d44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8040d48:	d2ed      	bcs.n	8040d26 <__addsf3+0x92>
 8040d4a:	fab0 fc80 	clz	ip, r0
 8040d4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8040d52:	ebb2 020c 	subs.w	r2, r2, ip
 8040d56:	fa00 f00c 	lsl.w	r0, r0, ip
 8040d5a:	bfaa      	itet	ge
 8040d5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8040d60:	4252      	neglt	r2, r2
 8040d62:	4318      	orrge	r0, r3
 8040d64:	bfbc      	itt	lt
 8040d66:	40d0      	lsrlt	r0, r2
 8040d68:	4318      	orrlt	r0, r3
 8040d6a:	4770      	bx	lr
 8040d6c:	f092 0f00 	teq	r2, #0
 8040d70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8040d74:	bf06      	itte	eq
 8040d76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8040d7a:	3201      	addeq	r2, #1
 8040d7c:	3b01      	subne	r3, #1
 8040d7e:	e7b5      	b.n	8040cec <__addsf3+0x58>
 8040d80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8040d84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8040d88:	bf18      	it	ne
 8040d8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8040d8e:	d021      	beq.n	8040dd4 <__addsf3+0x140>
 8040d90:	ea92 0f03 	teq	r2, r3
 8040d94:	d004      	beq.n	8040da0 <__addsf3+0x10c>
 8040d96:	f092 0f00 	teq	r2, #0
 8040d9a:	bf08      	it	eq
 8040d9c:	4608      	moveq	r0, r1
 8040d9e:	4770      	bx	lr
 8040da0:	ea90 0f01 	teq	r0, r1
 8040da4:	bf1c      	itt	ne
 8040da6:	2000      	movne	r0, #0
 8040da8:	4770      	bxne	lr
 8040daa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8040dae:	d104      	bne.n	8040dba <__addsf3+0x126>
 8040db0:	0040      	lsls	r0, r0, #1
 8040db2:	bf28      	it	cs
 8040db4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8040db8:	4770      	bx	lr
 8040dba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8040dbe:	bf3c      	itt	cc
 8040dc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8040dc4:	4770      	bxcc	lr
 8040dc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8040dca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8040dce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8040dd2:	4770      	bx	lr
 8040dd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8040dd8:	bf16      	itet	ne
 8040dda:	4608      	movne	r0, r1
 8040ddc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8040de0:	4601      	movne	r1, r0
 8040de2:	0242      	lsls	r2, r0, #9
 8040de4:	bf06      	itte	eq
 8040de6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8040dea:	ea90 0f01 	teqeq	r0, r1
 8040dee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8040df2:	4770      	bx	lr

08040df4 <__aeabi_ui2f>:
 8040df4:	f04f 0300 	mov.w	r3, #0
 8040df8:	e004      	b.n	8040e04 <__aeabi_i2f+0x8>
 8040dfa:	bf00      	nop

08040dfc <__aeabi_i2f>:
 8040dfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8040e00:	bf48      	it	mi
 8040e02:	4240      	negmi	r0, r0
 8040e04:	ea5f 0c00 	movs.w	ip, r0
 8040e08:	bf08      	it	eq
 8040e0a:	4770      	bxeq	lr
 8040e0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8040e10:	4601      	mov	r1, r0
 8040e12:	f04f 0000 	mov.w	r0, #0
 8040e16:	e01c      	b.n	8040e52 <__aeabi_l2f+0x2a>

08040e18 <__aeabi_ul2f>:
 8040e18:	ea50 0201 	orrs.w	r2, r0, r1
 8040e1c:	bf08      	it	eq
 8040e1e:	4770      	bxeq	lr
 8040e20:	f04f 0300 	mov.w	r3, #0
 8040e24:	e00a      	b.n	8040e3c <__aeabi_l2f+0x14>
 8040e26:	bf00      	nop

08040e28 <__aeabi_l2f>:
 8040e28:	ea50 0201 	orrs.w	r2, r0, r1
 8040e2c:	bf08      	it	eq
 8040e2e:	4770      	bxeq	lr
 8040e30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8040e34:	d502      	bpl.n	8040e3c <__aeabi_l2f+0x14>
 8040e36:	4240      	negs	r0, r0
 8040e38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8040e3c:	ea5f 0c01 	movs.w	ip, r1
 8040e40:	bf02      	ittt	eq
 8040e42:	4684      	moveq	ip, r0
 8040e44:	4601      	moveq	r1, r0
 8040e46:	2000      	moveq	r0, #0
 8040e48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8040e4c:	bf08      	it	eq
 8040e4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8040e52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8040e56:	fabc f28c 	clz	r2, ip
 8040e5a:	3a08      	subs	r2, #8
 8040e5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8040e60:	db10      	blt.n	8040e84 <__aeabi_l2f+0x5c>
 8040e62:	fa01 fc02 	lsl.w	ip, r1, r2
 8040e66:	4463      	add	r3, ip
 8040e68:	fa00 fc02 	lsl.w	ip, r0, r2
 8040e6c:	f1c2 0220 	rsb	r2, r2, #32
 8040e70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8040e74:	fa20 f202 	lsr.w	r2, r0, r2
 8040e78:	eb43 0002 	adc.w	r0, r3, r2
 8040e7c:	bf08      	it	eq
 8040e7e:	f020 0001 	biceq.w	r0, r0, #1
 8040e82:	4770      	bx	lr
 8040e84:	f102 0220 	add.w	r2, r2, #32
 8040e88:	fa01 fc02 	lsl.w	ip, r1, r2
 8040e8c:	f1c2 0220 	rsb	r2, r2, #32
 8040e90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8040e94:	fa21 f202 	lsr.w	r2, r1, r2
 8040e98:	eb43 0002 	adc.w	r0, r3, r2
 8040e9c:	bf08      	it	eq
 8040e9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8040ea2:	4770      	bx	lr

08040ea4 <__aeabi_uldivmod>:
 8040ea4:	b953      	cbnz	r3, 8040ebc <__aeabi_uldivmod+0x18>
 8040ea6:	b94a      	cbnz	r2, 8040ebc <__aeabi_uldivmod+0x18>
 8040ea8:	2900      	cmp	r1, #0
 8040eaa:	bf08      	it	eq
 8040eac:	2800      	cmpeq	r0, #0
 8040eae:	bf1c      	itt	ne
 8040eb0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8040eb4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8040eb8:	f000 b96e 	b.w	8041198 <__aeabi_idiv0>
 8040ebc:	f1ad 0c08 	sub.w	ip, sp, #8
 8040ec0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8040ec4:	f000 f806 	bl	8040ed4 <__udivmoddi4>
 8040ec8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8040ecc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8040ed0:	b004      	add	sp, #16
 8040ed2:	4770      	bx	lr

08040ed4 <__udivmoddi4>:
 8040ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8040ed8:	9d08      	ldr	r5, [sp, #32]
 8040eda:	4604      	mov	r4, r0
 8040edc:	468c      	mov	ip, r1
 8040ede:	2b00      	cmp	r3, #0
 8040ee0:	f040 8083 	bne.w	8040fea <__udivmoddi4+0x116>
 8040ee4:	428a      	cmp	r2, r1
 8040ee6:	4617      	mov	r7, r2
 8040ee8:	d947      	bls.n	8040f7a <__udivmoddi4+0xa6>
 8040eea:	fab2 f282 	clz	r2, r2
 8040eee:	b142      	cbz	r2, 8040f02 <__udivmoddi4+0x2e>
 8040ef0:	f1c2 0020 	rsb	r0, r2, #32
 8040ef4:	fa24 f000 	lsr.w	r0, r4, r0
 8040ef8:	4091      	lsls	r1, r2
 8040efa:	4097      	lsls	r7, r2
 8040efc:	ea40 0c01 	orr.w	ip, r0, r1
 8040f00:	4094      	lsls	r4, r2
 8040f02:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8040f06:	0c23      	lsrs	r3, r4, #16
 8040f08:	fbbc f6f8 	udiv	r6, ip, r8
 8040f0c:	fa1f fe87 	uxth.w	lr, r7
 8040f10:	fb08 c116 	mls	r1, r8, r6, ip
 8040f14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8040f18:	fb06 f10e 	mul.w	r1, r6, lr
 8040f1c:	4299      	cmp	r1, r3
 8040f1e:	d909      	bls.n	8040f34 <__udivmoddi4+0x60>
 8040f20:	18fb      	adds	r3, r7, r3
 8040f22:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8040f26:	f080 8119 	bcs.w	804115c <__udivmoddi4+0x288>
 8040f2a:	4299      	cmp	r1, r3
 8040f2c:	f240 8116 	bls.w	804115c <__udivmoddi4+0x288>
 8040f30:	3e02      	subs	r6, #2
 8040f32:	443b      	add	r3, r7
 8040f34:	1a5b      	subs	r3, r3, r1
 8040f36:	b2a4      	uxth	r4, r4
 8040f38:	fbb3 f0f8 	udiv	r0, r3, r8
 8040f3c:	fb08 3310 	mls	r3, r8, r0, r3
 8040f40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8040f44:	fb00 fe0e 	mul.w	lr, r0, lr
 8040f48:	45a6      	cmp	lr, r4
 8040f4a:	d909      	bls.n	8040f60 <__udivmoddi4+0x8c>
 8040f4c:	193c      	adds	r4, r7, r4
 8040f4e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8040f52:	f080 8105 	bcs.w	8041160 <__udivmoddi4+0x28c>
 8040f56:	45a6      	cmp	lr, r4
 8040f58:	f240 8102 	bls.w	8041160 <__udivmoddi4+0x28c>
 8040f5c:	3802      	subs	r0, #2
 8040f5e:	443c      	add	r4, r7
 8040f60:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8040f64:	eba4 040e 	sub.w	r4, r4, lr
 8040f68:	2600      	movs	r6, #0
 8040f6a:	b11d      	cbz	r5, 8040f74 <__udivmoddi4+0xa0>
 8040f6c:	40d4      	lsrs	r4, r2
 8040f6e:	2300      	movs	r3, #0
 8040f70:	e9c5 4300 	strd	r4, r3, [r5]
 8040f74:	4631      	mov	r1, r6
 8040f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040f7a:	b902      	cbnz	r2, 8040f7e <__udivmoddi4+0xaa>
 8040f7c:	deff      	udf	#255	; 0xff
 8040f7e:	fab2 f282 	clz	r2, r2
 8040f82:	2a00      	cmp	r2, #0
 8040f84:	d150      	bne.n	8041028 <__udivmoddi4+0x154>
 8040f86:	1bcb      	subs	r3, r1, r7
 8040f88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8040f8c:	fa1f f887 	uxth.w	r8, r7
 8040f90:	2601      	movs	r6, #1
 8040f92:	fbb3 fcfe 	udiv	ip, r3, lr
 8040f96:	0c21      	lsrs	r1, r4, #16
 8040f98:	fb0e 331c 	mls	r3, lr, ip, r3
 8040f9c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8040fa0:	fb08 f30c 	mul.w	r3, r8, ip
 8040fa4:	428b      	cmp	r3, r1
 8040fa6:	d907      	bls.n	8040fb8 <__udivmoddi4+0xe4>
 8040fa8:	1879      	adds	r1, r7, r1
 8040faa:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8040fae:	d202      	bcs.n	8040fb6 <__udivmoddi4+0xe2>
 8040fb0:	428b      	cmp	r3, r1
 8040fb2:	f200 80e9 	bhi.w	8041188 <__udivmoddi4+0x2b4>
 8040fb6:	4684      	mov	ip, r0
 8040fb8:	1ac9      	subs	r1, r1, r3
 8040fba:	b2a3      	uxth	r3, r4
 8040fbc:	fbb1 f0fe 	udiv	r0, r1, lr
 8040fc0:	fb0e 1110 	mls	r1, lr, r0, r1
 8040fc4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8040fc8:	fb08 f800 	mul.w	r8, r8, r0
 8040fcc:	45a0      	cmp	r8, r4
 8040fce:	d907      	bls.n	8040fe0 <__udivmoddi4+0x10c>
 8040fd0:	193c      	adds	r4, r7, r4
 8040fd2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8040fd6:	d202      	bcs.n	8040fde <__udivmoddi4+0x10a>
 8040fd8:	45a0      	cmp	r8, r4
 8040fda:	f200 80d9 	bhi.w	8041190 <__udivmoddi4+0x2bc>
 8040fde:	4618      	mov	r0, r3
 8040fe0:	eba4 0408 	sub.w	r4, r4, r8
 8040fe4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8040fe8:	e7bf      	b.n	8040f6a <__udivmoddi4+0x96>
 8040fea:	428b      	cmp	r3, r1
 8040fec:	d909      	bls.n	8041002 <__udivmoddi4+0x12e>
 8040fee:	2d00      	cmp	r5, #0
 8040ff0:	f000 80b1 	beq.w	8041156 <__udivmoddi4+0x282>
 8040ff4:	2600      	movs	r6, #0
 8040ff6:	e9c5 0100 	strd	r0, r1, [r5]
 8040ffa:	4630      	mov	r0, r6
 8040ffc:	4631      	mov	r1, r6
 8040ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8041002:	fab3 f683 	clz	r6, r3
 8041006:	2e00      	cmp	r6, #0
 8041008:	d14a      	bne.n	80410a0 <__udivmoddi4+0x1cc>
 804100a:	428b      	cmp	r3, r1
 804100c:	d302      	bcc.n	8041014 <__udivmoddi4+0x140>
 804100e:	4282      	cmp	r2, r0
 8041010:	f200 80b8 	bhi.w	8041184 <__udivmoddi4+0x2b0>
 8041014:	1a84      	subs	r4, r0, r2
 8041016:	eb61 0103 	sbc.w	r1, r1, r3
 804101a:	2001      	movs	r0, #1
 804101c:	468c      	mov	ip, r1
 804101e:	2d00      	cmp	r5, #0
 8041020:	d0a8      	beq.n	8040f74 <__udivmoddi4+0xa0>
 8041022:	e9c5 4c00 	strd	r4, ip, [r5]
 8041026:	e7a5      	b.n	8040f74 <__udivmoddi4+0xa0>
 8041028:	f1c2 0320 	rsb	r3, r2, #32
 804102c:	fa20 f603 	lsr.w	r6, r0, r3
 8041030:	4097      	lsls	r7, r2
 8041032:	fa01 f002 	lsl.w	r0, r1, r2
 8041036:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 804103a:	40d9      	lsrs	r1, r3
 804103c:	4330      	orrs	r0, r6
 804103e:	0c03      	lsrs	r3, r0, #16
 8041040:	fbb1 f6fe 	udiv	r6, r1, lr
 8041044:	fa1f f887 	uxth.w	r8, r7
 8041048:	fb0e 1116 	mls	r1, lr, r6, r1
 804104c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8041050:	fb06 f108 	mul.w	r1, r6, r8
 8041054:	4299      	cmp	r1, r3
 8041056:	fa04 f402 	lsl.w	r4, r4, r2
 804105a:	d909      	bls.n	8041070 <__udivmoddi4+0x19c>
 804105c:	18fb      	adds	r3, r7, r3
 804105e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8041062:	f080 808d 	bcs.w	8041180 <__udivmoddi4+0x2ac>
 8041066:	4299      	cmp	r1, r3
 8041068:	f240 808a 	bls.w	8041180 <__udivmoddi4+0x2ac>
 804106c:	3e02      	subs	r6, #2
 804106e:	443b      	add	r3, r7
 8041070:	1a5b      	subs	r3, r3, r1
 8041072:	b281      	uxth	r1, r0
 8041074:	fbb3 f0fe 	udiv	r0, r3, lr
 8041078:	fb0e 3310 	mls	r3, lr, r0, r3
 804107c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8041080:	fb00 f308 	mul.w	r3, r0, r8
 8041084:	428b      	cmp	r3, r1
 8041086:	d907      	bls.n	8041098 <__udivmoddi4+0x1c4>
 8041088:	1879      	adds	r1, r7, r1
 804108a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 804108e:	d273      	bcs.n	8041178 <__udivmoddi4+0x2a4>
 8041090:	428b      	cmp	r3, r1
 8041092:	d971      	bls.n	8041178 <__udivmoddi4+0x2a4>
 8041094:	3802      	subs	r0, #2
 8041096:	4439      	add	r1, r7
 8041098:	1acb      	subs	r3, r1, r3
 804109a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 804109e:	e778      	b.n	8040f92 <__udivmoddi4+0xbe>
 80410a0:	f1c6 0c20 	rsb	ip, r6, #32
 80410a4:	fa03 f406 	lsl.w	r4, r3, r6
 80410a8:	fa22 f30c 	lsr.w	r3, r2, ip
 80410ac:	431c      	orrs	r4, r3
 80410ae:	fa20 f70c 	lsr.w	r7, r0, ip
 80410b2:	fa01 f306 	lsl.w	r3, r1, r6
 80410b6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80410ba:	fa21 f10c 	lsr.w	r1, r1, ip
 80410be:	431f      	orrs	r7, r3
 80410c0:	0c3b      	lsrs	r3, r7, #16
 80410c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80410c6:	fa1f f884 	uxth.w	r8, r4
 80410ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80410ce:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80410d2:	fb09 fa08 	mul.w	sl, r9, r8
 80410d6:	458a      	cmp	sl, r1
 80410d8:	fa02 f206 	lsl.w	r2, r2, r6
 80410dc:	fa00 f306 	lsl.w	r3, r0, r6
 80410e0:	d908      	bls.n	80410f4 <__udivmoddi4+0x220>
 80410e2:	1861      	adds	r1, r4, r1
 80410e4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80410e8:	d248      	bcs.n	804117c <__udivmoddi4+0x2a8>
 80410ea:	458a      	cmp	sl, r1
 80410ec:	d946      	bls.n	804117c <__udivmoddi4+0x2a8>
 80410ee:	f1a9 0902 	sub.w	r9, r9, #2
 80410f2:	4421      	add	r1, r4
 80410f4:	eba1 010a 	sub.w	r1, r1, sl
 80410f8:	b2bf      	uxth	r7, r7
 80410fa:	fbb1 f0fe 	udiv	r0, r1, lr
 80410fe:	fb0e 1110 	mls	r1, lr, r0, r1
 8041102:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8041106:	fb00 f808 	mul.w	r8, r0, r8
 804110a:	45b8      	cmp	r8, r7
 804110c:	d907      	bls.n	804111e <__udivmoddi4+0x24a>
 804110e:	19e7      	adds	r7, r4, r7
 8041110:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8041114:	d22e      	bcs.n	8041174 <__udivmoddi4+0x2a0>
 8041116:	45b8      	cmp	r8, r7
 8041118:	d92c      	bls.n	8041174 <__udivmoddi4+0x2a0>
 804111a:	3802      	subs	r0, #2
 804111c:	4427      	add	r7, r4
 804111e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8041122:	eba7 0708 	sub.w	r7, r7, r8
 8041126:	fba0 8902 	umull	r8, r9, r0, r2
 804112a:	454f      	cmp	r7, r9
 804112c:	46c6      	mov	lr, r8
 804112e:	4649      	mov	r1, r9
 8041130:	d31a      	bcc.n	8041168 <__udivmoddi4+0x294>
 8041132:	d017      	beq.n	8041164 <__udivmoddi4+0x290>
 8041134:	b15d      	cbz	r5, 804114e <__udivmoddi4+0x27a>
 8041136:	ebb3 020e 	subs.w	r2, r3, lr
 804113a:	eb67 0701 	sbc.w	r7, r7, r1
 804113e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8041142:	40f2      	lsrs	r2, r6
 8041144:	ea4c 0202 	orr.w	r2, ip, r2
 8041148:	40f7      	lsrs	r7, r6
 804114a:	e9c5 2700 	strd	r2, r7, [r5]
 804114e:	2600      	movs	r6, #0
 8041150:	4631      	mov	r1, r6
 8041152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8041156:	462e      	mov	r6, r5
 8041158:	4628      	mov	r0, r5
 804115a:	e70b      	b.n	8040f74 <__udivmoddi4+0xa0>
 804115c:	4606      	mov	r6, r0
 804115e:	e6e9      	b.n	8040f34 <__udivmoddi4+0x60>
 8041160:	4618      	mov	r0, r3
 8041162:	e6fd      	b.n	8040f60 <__udivmoddi4+0x8c>
 8041164:	4543      	cmp	r3, r8
 8041166:	d2e5      	bcs.n	8041134 <__udivmoddi4+0x260>
 8041168:	ebb8 0e02 	subs.w	lr, r8, r2
 804116c:	eb69 0104 	sbc.w	r1, r9, r4
 8041170:	3801      	subs	r0, #1
 8041172:	e7df      	b.n	8041134 <__udivmoddi4+0x260>
 8041174:	4608      	mov	r0, r1
 8041176:	e7d2      	b.n	804111e <__udivmoddi4+0x24a>
 8041178:	4660      	mov	r0, ip
 804117a:	e78d      	b.n	8041098 <__udivmoddi4+0x1c4>
 804117c:	4681      	mov	r9, r0
 804117e:	e7b9      	b.n	80410f4 <__udivmoddi4+0x220>
 8041180:	4666      	mov	r6, ip
 8041182:	e775      	b.n	8041070 <__udivmoddi4+0x19c>
 8041184:	4630      	mov	r0, r6
 8041186:	e74a      	b.n	804101e <__udivmoddi4+0x14a>
 8041188:	f1ac 0c02 	sub.w	ip, ip, #2
 804118c:	4439      	add	r1, r7
 804118e:	e713      	b.n	8040fb8 <__udivmoddi4+0xe4>
 8041190:	3802      	subs	r0, #2
 8041192:	443c      	add	r4, r7
 8041194:	e724      	b.n	8040fe0 <__udivmoddi4+0x10c>
 8041196:	bf00      	nop

08041198 <__aeabi_idiv0>:
 8041198:	4770      	bx	lr
 804119a:	bf00      	nop

0804119c <AKS_ConvertCoordinate>:
static uint8_t sensor_activate_count = 0;
static bool mag_activated = false;

void AKS_ConvertCoordinate(int32_t vec[3], const uint8_t axis_order[3],
                           const uint8_t axis_sign[3])
{
 804119c:	b480      	push	{r7}
 804119e:	b089      	sub	sp, #36	; 0x24
 80411a0:	af00      	add	r7, sp, #0
 80411a2:	60f8      	str	r0, [r7, #12]
 80411a4:	60b9      	str	r1, [r7, #8]
 80411a6:	607a      	str	r2, [r7, #4]
  int32_t val32[3];
  uint8_t i;

  /* Axis conversion */
  for (i = 0; i < 3; i++) {
 80411a8:	2300      	movs	r3, #0
 80411aa:	77fb      	strb	r3, [r7, #31]
 80411ac:	e026      	b.n	80411fc <AKS_ConvertCoordinate+0x60>
    val32[i] = vec[axis_order[i]];
 80411ae:	7ffb      	ldrb	r3, [r7, #31]
 80411b0:	68ba      	ldr	r2, [r7, #8]
 80411b2:	4413      	add	r3, r2
 80411b4:	781b      	ldrb	r3, [r3, #0]
 80411b6:	009b      	lsls	r3, r3, #2
 80411b8:	68fa      	ldr	r2, [r7, #12]
 80411ba:	441a      	add	r2, r3
 80411bc:	7ffb      	ldrb	r3, [r7, #31]
 80411be:	6812      	ldr	r2, [r2, #0]
 80411c0:	009b      	lsls	r3, r3, #2
 80411c2:	f107 0120 	add.w	r1, r7, #32
 80411c6:	440b      	add	r3, r1
 80411c8:	f843 2c10 	str.w	r2, [r3, #-16]

    if (axis_sign[i]) {
 80411cc:	7ffb      	ldrb	r3, [r7, #31]
 80411ce:	687a      	ldr	r2, [r7, #4]
 80411d0:	4413      	add	r3, r2
 80411d2:	781b      	ldrb	r3, [r3, #0]
 80411d4:	2b00      	cmp	r3, #0
 80411d6:	d00e      	beq.n	80411f6 <AKS_ConvertCoordinate+0x5a>
      val32[i] *= -1;
 80411d8:	7ffb      	ldrb	r3, [r7, #31]
 80411da:	009b      	lsls	r3, r3, #2
 80411dc:	f107 0220 	add.w	r2, r7, #32
 80411e0:	4413      	add	r3, r2
 80411e2:	f853 2c10 	ldr.w	r2, [r3, #-16]
 80411e6:	7ffb      	ldrb	r3, [r7, #31]
 80411e8:	4252      	negs	r2, r2
 80411ea:	009b      	lsls	r3, r3, #2
 80411ec:	f107 0120 	add.w	r1, r7, #32
 80411f0:	440b      	add	r3, r1
 80411f2:	f843 2c10 	str.w	r2, [r3, #-16]
  for (i = 0; i < 3; i++) {
 80411f6:	7ffb      	ldrb	r3, [r7, #31]
 80411f8:	3301      	adds	r3, #1
 80411fa:	77fb      	strb	r3, [r7, #31]
 80411fc:	7ffb      	ldrb	r3, [r7, #31]
 80411fe:	2b02      	cmp	r3, #2
 8041200:	d9d5      	bls.n	80411ae <AKS_ConvertCoordinate+0x12>
    }
  }

  /* Copy to argument */
  for (i = 0; i < 3; i++) {
 8041202:	2300      	movs	r3, #0
 8041204:	77fb      	strb	r3, [r7, #31]
 8041206:	e00e      	b.n	8041226 <AKS_ConvertCoordinate+0x8a>
    vec[i] = val32[i];
 8041208:	7ffb      	ldrb	r3, [r7, #31]
 804120a:	7ffa      	ldrb	r2, [r7, #31]
 804120c:	0092      	lsls	r2, r2, #2
 804120e:	68f9      	ldr	r1, [r7, #12]
 8041210:	440a      	add	r2, r1
 8041212:	009b      	lsls	r3, r3, #2
 8041214:	f107 0120 	add.w	r1, r7, #32
 8041218:	440b      	add	r3, r1
 804121a:	f853 3c10 	ldr.w	r3, [r3, #-16]
 804121e:	6013      	str	r3, [r2, #0]
  for (i = 0; i < 3; i++) {
 8041220:	7ffb      	ldrb	r3, [r7, #31]
 8041222:	3301      	adds	r3, #1
 8041224:	77fb      	strb	r3, [r7, #31]
 8041226:	7ffb      	ldrb	r3, [r7, #31]
 8041228:	2b02      	cmp	r3, #2
 804122a:	d9ed      	bls.n	8041208 <AKS_ConvertCoordinate+0x6c>
  }
}
 804122c:	bf00      	nop
 804122e:	bf00      	nop
 8041230:	3724      	adds	r7, #36	; 0x24
 8041232:	46bd      	mov	sp, r7
 8041234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041238:	4770      	bx	lr
	...

0804123c <platform_write>:
 * @param  len       number of consecutive register to write
 *
 */
static int32_t platform_write(void *handle, uint8_t reg, uint8_t * bufp,
                              uint16_t len)
{
 804123c:	b580      	push	{r7, lr}
 804123e:	b088      	sub	sp, #32
 8041240:	af04      	add	r7, sp, #16
 8041242:	60f8      	str	r0, [r7, #12]
 8041244:	607a      	str	r2, [r7, #4]
 8041246:	461a      	mov	r2, r3
 8041248:	460b      	mov	r3, r1
 804124a:	72fb      	strb	r3, [r7, #11]
 804124c:	4613      	mov	r3, r2
 804124e:	813b      	strh	r3, [r7, #8]
  if (handle == &mag_init_parms->i2c_handle) {
 8041250:	4b0c      	ldr	r3, [pc, #48]	; (8041284 <platform_write+0x48>)
 8041252:	681b      	ldr	r3, [r3, #0]
 8041254:	3304      	adds	r3, #4
 8041256:	68fa      	ldr	r2, [r7, #12]
 8041258:	429a      	cmp	r2, r3
 804125a:	d10d      	bne.n	8041278 <platform_write+0x3c>
    //printf("start i2c write, \r\n");
    HAL_I2C_Mem_Write(handle, MAGNETOMETER_SLAVE_ADDR, reg,
 804125c:	7afb      	ldrb	r3, [r7, #11]
 804125e:	b29a      	uxth	r2, r3
 8041260:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8041264:	9302      	str	r3, [sp, #8]
 8041266:	893b      	ldrh	r3, [r7, #8]
 8041268:	9301      	str	r3, [sp, #4]
 804126a:	687b      	ldr	r3, [r7, #4]
 804126c:	9300      	str	r3, [sp, #0]
 804126e:	2301      	movs	r3, #1
 8041270:	2118      	movs	r1, #24
 8041272:	68f8      	ldr	r0, [r7, #12]
 8041274:	f010 fea2 	bl	8051fbc <HAL_I2C_Mem_Write>
                      I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  }

  return 0;
 8041278:	2300      	movs	r3, #0
}
 804127a:	4618      	mov	r0, r3
 804127c:	3710      	adds	r7, #16
 804127e:	46bd      	mov	sp, r7
 8041280:	bd80      	pop	{r7, pc}
 8041282:	bf00      	nop
 8041284:	20007ec8 	.word	0x20007ec8

08041288 <platform_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t * bufp,
                             uint16_t len)
{
 8041288:	b580      	push	{r7, lr}
 804128a:	b088      	sub	sp, #32
 804128c:	af04      	add	r7, sp, #16
 804128e:	60f8      	str	r0, [r7, #12]
 8041290:	607a      	str	r2, [r7, #4]
 8041292:	461a      	mov	r2, r3
 8041294:	460b      	mov	r3, r1
 8041296:	72fb      	strb	r3, [r7, #11]
 8041298:	4613      	mov	r3, r2
 804129a:	813b      	strh	r3, [r7, #8]
  if (handle == &mag_init_parms->i2c_handle) {
 804129c:	4b0c      	ldr	r3, [pc, #48]	; (80412d0 <platform_read+0x48>)
 804129e:	681b      	ldr	r3, [r3, #0]
 80412a0:	3304      	adds	r3, #4
 80412a2:	68fa      	ldr	r2, [r7, #12]
 80412a4:	429a      	cmp	r2, r3
 80412a6:	d10d      	bne.n	80412c4 <platform_read+0x3c>
    //printf("start i2c read, \r\n");
    HAL_I2C_Mem_Read(handle, MAGNETOMETER_SLAVE_ADDR, reg,
 80412a8:	7afb      	ldrb	r3, [r7, #11]
 80412aa:	b29a      	uxth	r2, r3
 80412ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80412b0:	9302      	str	r3, [sp, #8]
 80412b2:	893b      	ldrh	r3, [r7, #8]
 80412b4:	9301      	str	r3, [sp, #4]
 80412b6:	687b      	ldr	r3, [r7, #4]
 80412b8:	9300      	str	r3, [sp, #0]
 80412ba:	2301      	movs	r3, #1
 80412bc:	2118      	movs	r1, #24
 80412be:	68f8      	ldr	r0, [r7, #12]
 80412c0:	f010 ff76 	bl	80521b0 <HAL_I2C_Mem_Read>
                     I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  }

  return 0;
 80412c4:	2300      	movs	r3, #0
}
 80412c6:	4618      	mov	r0, r3
 80412c8:	3710      	adds	r7, #16
 80412ca:	46bd      	mov	sp, r7
 80412cc:	bd80      	pop	{r7, pc}
 80412ce:	bf00      	nop
 80412d0:	20007ec8 	.word	0x20007ec8

080412d4 <ak09918_mag_init_complete>:

int ak09918_mag_init_complete(void *para)
{
 80412d4:	b480      	push	{r7}
 80412d6:	b083      	sub	sp, #12
 80412d8:	af00      	add	r7, sp, #0
 80412da:	6078      	str	r0, [r7, #4]
  return AKM_SUCCESS;
 80412dc:	2300      	movs	r3, #0
}
 80412de:	4618      	mov	r0, r3
 80412e0:	370c      	adds	r7, #12
 80412e2:	46bd      	mov	sp, r7
 80412e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80412e8:	4770      	bx	lr
	...

080412ec <ak099xx_start>:

int16_t ak099xx_start(stmdev_ctx_t * ctx)
{
 80412ec:	b580      	push	{r7, lr}
 80412ee:	b084      	sub	sp, #16
 80412f0:	af00      	add	r7, sp, #0
 80412f2:	6078      	str	r0, [r7, #4]
  int32_t ret = 0;
 80412f4:	2300      	movs	r3, #0
 80412f6:	60fb      	str	r3, [r7, #12]
  if (sensor_activate_count == 0) {
 80412f8:	4b0b      	ldr	r3, [pc, #44]	; (8041328 <ak099xx_start+0x3c>)
 80412fa:	781b      	ldrb	r3, [r3, #0]
 80412fc:	2b00      	cmp	r3, #0
 80412fe:	d107      	bne.n	8041310 <ak099xx_start+0x24>
    mag_activated = true;
 8041300:	4b0a      	ldr	r3, [pc, #40]	; (804132c <ak099xx_start+0x40>)
 8041302:	2201      	movs	r2, #1
 8041304:	701a      	strb	r2, [r3, #0]
    /* 50 - 100 Hz */
    ret = ak099xx_set_mode(ctx, AK099XX_MODE_CONT_MEASURE_MODE4);
 8041306:	2108      	movs	r1, #8
 8041308:	6878      	ldr	r0, [r7, #4]
 804130a:	f000 f98d 	bl	8041628 <ak099xx_set_mode>
 804130e:	60f8      	str	r0, [r7, #12]
  }
  sensor_activate_count++;
 8041310:	4b05      	ldr	r3, [pc, #20]	; (8041328 <ak099xx_start+0x3c>)
 8041312:	781b      	ldrb	r3, [r3, #0]
 8041314:	3301      	adds	r3, #1
 8041316:	b2da      	uxtb	r2, r3
 8041318:	4b03      	ldr	r3, [pc, #12]	; (8041328 <ak099xx_start+0x3c>)
 804131a:	701a      	strb	r2, [r3, #0]
  return ret;
 804131c:	68fb      	ldr	r3, [r7, #12]
 804131e:	b21b      	sxth	r3, r3
}
 8041320:	4618      	mov	r0, r3
 8041322:	3710      	adds	r7, #16
 8041324:	46bd      	mov	sp, r7
 8041326:	bd80      	pop	{r7, pc}
 8041328:	20007ecc 	.word	0x20007ecc
 804132c:	20007ecd 	.word	0x20007ecd

08041330 <ak099xx_stop>:

int16_t ak099xx_stop(stmdev_ctx_t * ctx)
{
 8041330:	b580      	push	{r7, lr}
 8041332:	b084      	sub	sp, #16
 8041334:	af00      	add	r7, sp, #0
 8041336:	6078      	str	r0, [r7, #4]
  int32_t ret = 0;
 8041338:	2300      	movs	r3, #0
 804133a:	60fb      	str	r3, [r7, #12]
  sensor_activate_count--;
 804133c:	4b0b      	ldr	r3, [pc, #44]	; (804136c <ak099xx_stop+0x3c>)
 804133e:	781b      	ldrb	r3, [r3, #0]
 8041340:	3b01      	subs	r3, #1
 8041342:	b2da      	uxtb	r2, r3
 8041344:	4b09      	ldr	r3, [pc, #36]	; (804136c <ak099xx_stop+0x3c>)
 8041346:	701a      	strb	r2, [r3, #0]
  if (sensor_activate_count == 0) {
 8041348:	4b08      	ldr	r3, [pc, #32]	; (804136c <ak099xx_stop+0x3c>)
 804134a:	781b      	ldrb	r3, [r3, #0]
 804134c:	2b00      	cmp	r3, #0
 804134e:	d107      	bne.n	8041360 <ak099xx_stop+0x30>
    mag_activated = false;
 8041350:	4b07      	ldr	r3, [pc, #28]	; (8041370 <ak099xx_stop+0x40>)
 8041352:	2200      	movs	r2, #0
 8041354:	701a      	strb	r2, [r3, #0]
    /* 50 - 100 Hz */
    ret = ak099xx_set_mode(ctx, AK099XX_MODE_POWER_DOWN);
 8041356:	2100      	movs	r1, #0
 8041358:	6878      	ldr	r0, [r7, #4]
 804135a:	f000 f965 	bl	8041628 <ak099xx_set_mode>
 804135e:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8041360:	68fb      	ldr	r3, [r7, #12]
 8041362:	b21b      	sxth	r3, r3
}
 8041364:	4618      	mov	r0, r3
 8041366:	3710      	adds	r7, #16
 8041368:	46bd      	mov	sp, r7
 804136a:	bd80      	pop	{r7, pc}
 804136c:	20007ecc 	.word	0x20007ecc
 8041370:	20007ecd 	.word	0x20007ecd

08041374 <ak09918_mag_activate>:

int ak09918_mag_activate(bool activate)
{
 8041374:	b580      	push	{r7, lr}
 8041376:	b084      	sub	sp, #16
 8041378:	af00      	add	r7, sp, #0
 804137a:	4603      	mov	r3, r0
 804137c:	71fb      	strb	r3, [r7, #7]
  int res = 0;
 804137e:	2300      	movs	r3, #0
 8041380:	60fb      	str	r3, [r7, #12]
  printf("ak09918_mag_activate: %d \r\n", activate);
 8041382:	79fb      	ldrb	r3, [r7, #7]
 8041384:	4619      	mov	r1, r3
 8041386:	480b      	ldr	r0, [pc, #44]	; (80413b4 <ak09918_mag_activate+0x40>)
 8041388:	f01f faf4 	bl	8060974 <iprintf>
  if (activate) {
 804138c:	79fb      	ldrb	r3, [r7, #7]
 804138e:	2b00      	cmp	r3, #0
 8041390:	d005      	beq.n	804139e <ak09918_mag_activate+0x2a>
    res = ak099xx_start(&dev_ctx);
 8041392:	4809      	ldr	r0, [pc, #36]	; (80413b8 <ak09918_mag_activate+0x44>)
 8041394:	f7ff ffaa 	bl	80412ec <ak099xx_start>
 8041398:	4603      	mov	r3, r0
 804139a:	60fb      	str	r3, [r7, #12]
 804139c:	e004      	b.n	80413a8 <ak09918_mag_activate+0x34>
  } else {
    res = ak099xx_stop(&dev_ctx);
 804139e:	4806      	ldr	r0, [pc, #24]	; (80413b8 <ak09918_mag_activate+0x44>)
 80413a0:	f7ff ffc6 	bl	8041330 <ak099xx_stop>
 80413a4:	4603      	mov	r3, r0
 80413a6:	60fb      	str	r3, [r7, #12]
  }
  return res;
 80413a8:	68fb      	ldr	r3, [r7, #12]
}
 80413aa:	4618      	mov	r0, r3
 80413ac:	3710      	adds	r7, #16
 80413ae:	46bd      	mov	sp, r7
 80413b0:	bd80      	pop	{r7, pc}
 80413b2:	bf00      	nop
 80413b4:	08064b80 	.word	0x08064b80
 80413b8:	20007ebc 	.word	0x20007ebc

080413bc <ak09918_mag_publish_sensor_data>:

int ak09918_mag_publish_sensor_data(void *para)
{
 80413bc:	b580      	push	{r7, lr}
 80413be:	b0a4      	sub	sp, #144	; 0x90
 80413c0:	af00      	add	r7, sp, #0
 80413c2:	6078      	str	r0, [r7, #4]
  struct AKM_SENSOR_DATA data;
  int fret = AKM_SUCCESS, ready = 0;
 80413c4:	2300      	movs	r3, #0
 80413c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80413ca:	2300      	movs	r3, #0
 80413cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t num = 1;
 80413d0:	2301      	movs	r3, #1
 80413d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  sensors_event_t sensor_data = { 0 };
 80413d6:	f107 0308 	add.w	r3, r7, #8
 80413da:	2250      	movs	r2, #80	; 0x50
 80413dc:	2100      	movs	r1, #0
 80413de:	4618      	mov	r0, r3
 80413e0:	f01e fdec 	bl	805ffbc <memset>

  ready = ak099xx_check_rdy(&dev_ctx);
 80413e4:	482c      	ldr	r0, [pc, #176]	; (8041498 <ak09918_mag_publish_sensor_data+0xdc>)
 80413e6:	f000 f97a 	bl	80416de <ak099xx_check_rdy>
 80413ea:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
  if (ready == 1 && mag_activated) {
 80413ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80413f2:	2b01      	cmp	r3, #1
 80413f4:	d149      	bne.n	804148a <ak09918_mag_publish_sensor_data+0xce>
 80413f6:	4b29      	ldr	r3, [pc, #164]	; (804149c <ak09918_mag_publish_sensor_data+0xe0>)
 80413f8:	781b      	ldrb	r3, [r3, #0]
 80413fa:	2b00      	cmp	r3, #0
 80413fc:	d045      	beq.n	804148a <ak09918_mag_publish_sensor_data+0xce>
    fret = ak099xx_get_data(&dev_ctx, &data, &num);
 80413fe:	f107 025f 	add.w	r2, r7, #95	; 0x5f
 8041402:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8041406:	4619      	mov	r1, r3
 8041408:	4823      	ldr	r0, [pc, #140]	; (8041498 <ak09918_mag_publish_sensor_data+0xdc>)
 804140a:	f000 f985 	bl	8041718 <ak099xx_get_data>
 804140e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    AKS_ConvertCoordinate(data.u.v, g_mag_axis_order, g_mag_axis_sign);
 8041412:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8041416:	4a22      	ldr	r2, [pc, #136]	; (80414a0 <ak09918_mag_publish_sensor_data+0xe4>)
 8041418:	4922      	ldr	r1, [pc, #136]	; (80414a4 <ak09918_mag_publish_sensor_data+0xe8>)
 804141a:	4618      	mov	r0, r3
 804141c:	f7ff febe 	bl	804119c <AKS_ConvertCoordinate>

    //send related messages to SensorDataQ
    sensor_data.sensor_type = SENSOR_TYPE_MAGNETIC_FIELD;
 8041420:	2301      	movs	r3, #1
 8041422:	723b      	strb	r3, [r7, #8]
    sensor_data.accuracy = 3;
 8041424:	2303      	movs	r3, #3
 8041426:	727b      	strb	r3, [r7, #9]
    sensor_data.timestamp = sensor_get_timestamp();
 8041428:	f00c f96e 	bl	804d708 <sensor_get_timestamp>
 804142c:	4602      	mov	r2, r0
 804142e:	460b      	mov	r3, r1
 8041430:	e9c7 2304 	strd	r2, r3, [r7, #16]
    sensor_data.sensor_data_t.vec.data[0] = data.u.v[0] / 65535.0f;     //convert Q16 to uT
 8041434:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8041436:	ee07 3a90 	vmov	s15, r3
 804143a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 804143e:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80414a8 <ak09918_mag_publish_sensor_data+0xec>
 8041442:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8041446:	edc7 7a06 	vstr	s15, [r7, #24]
    sensor_data.sensor_data_t.vec.data[1] = data.u.v[1] / 65535.0f;
 804144a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 804144c:	ee07 3a90 	vmov	s15, r3
 8041450:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8041454:	eddf 6a14 	vldr	s13, [pc, #80]	; 80414a8 <ak09918_mag_publish_sensor_data+0xec>
 8041458:	eec7 7a26 	vdiv.f32	s15, s14, s13
 804145c:	edc7 7a07 	vstr	s15, [r7, #28]
    sensor_data.sensor_data_t.vec.data[2] = data.u.v[2] / 65535.0f;
 8041460:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8041462:	ee07 3a90 	vmov	s15, r3
 8041466:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 804146a:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80414a8 <ak09918_mag_publish_sensor_data+0xec>
 804146e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8041472:	edc7 7a08 	vstr	s15, [r7, #32]
    osMessageQueuePut(mag_init_parms->SensorDataQHandle, &sensor_data, 0, 0);
 8041476:	4b0d      	ldr	r3, [pc, #52]	; (80414ac <ak09918_mag_publish_sensor_data+0xf0>)
 8041478:	681b      	ldr	r3, [r3, #0]
 804147a:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 804147e:	f107 0108 	add.w	r1, r7, #8
 8041482:	2300      	movs	r3, #0
 8041484:	2200      	movs	r2, #0
 8041486:	f014 ffbd 	bl	8056404 <osMessageQueuePut>
  }

  return fret;
 804148a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
}
 804148e:	4618      	mov	r0, r3
 8041490:	3790      	adds	r7, #144	; 0x90
 8041492:	46bd      	mov	sp, r7
 8041494:	bd80      	pop	{r7, pc}
 8041496:	bf00      	nop
 8041498:	20007ebc 	.word	0x20007ebc
 804149c:	20007ecd 	.word	0x20007ecd
 80414a0:	20007eb8 	.word	0x20007eb8
 80414a4:	20007eb4 	.word	0x20007eb4
 80414a8:	477fff00 	.word	0x477fff00
 80414ac:	20007ec8 	.word	0x20007ec8

080414b0 <ak09918_mag_init>:

int ak09918_mag_init(void *para1, void *para2)
{
 80414b0:	b580      	push	{r7, lr}
 80414b2:	b084      	sub	sp, #16
 80414b4:	af00      	add	r7, sp, #0
 80414b6:	6078      	str	r0, [r7, #4]
 80414b8:	6039      	str	r1, [r7, #0]
  mag_init_parms = (platform_prams *) para1;
 80414ba:	4a26      	ldr	r2, [pc, #152]	; (8041554 <ak09918_mag_init+0xa4>)
 80414bc:	687b      	ldr	r3, [r7, #4]
 80414be:	6013      	str	r3, [r2, #0]
  int fret;
  uint16_t WhoAmI = 0;
 80414c0:	2300      	movs	r3, #0
 80414c2:	817b      	strh	r3, [r7, #10]
  dev_ctx.write_reg = platform_write;
 80414c4:	4b24      	ldr	r3, [pc, #144]	; (8041558 <ak09918_mag_init+0xa8>)
 80414c6:	4a25      	ldr	r2, [pc, #148]	; (804155c <ak09918_mag_init+0xac>)
 80414c8:	601a      	str	r2, [r3, #0]
  dev_ctx.read_reg = platform_read;
 80414ca:	4b23      	ldr	r3, [pc, #140]	; (8041558 <ak09918_mag_init+0xa8>)
 80414cc:	4a24      	ldr	r2, [pc, #144]	; (8041560 <ak09918_mag_init+0xb0>)
 80414ce:	605a      	str	r2, [r3, #4]
  dev_ctx.handle = &mag_init_parms->i2c_handle;
 80414d0:	4b20      	ldr	r3, [pc, #128]	; (8041554 <ak09918_mag_init+0xa4>)
 80414d2:	681b      	ldr	r3, [r3, #0]
 80414d4:	3304      	adds	r3, #4
 80414d6:	4a20      	ldr	r2, [pc, #128]	; (8041558 <ak09918_mag_init+0xa8>)
 80414d8:	6093      	str	r3, [r2, #8]

  //call who I am function here to check if HW pressent
  fret = ak099xx_get_WhoAmI(&dev_ctx, &WhoAmI);
 80414da:	f107 030a 	add.w	r3, r7, #10
 80414de:	4619      	mov	r1, r3
 80414e0:	481d      	ldr	r0, [pc, #116]	; (8041558 <ak09918_mag_init+0xa8>)
 80414e2:	f000 f8c3 	bl	804166c <ak099xx_get_WhoAmI>
 80414e6:	60f8      	str	r0, [r7, #12]
  if (fret != AKM_SUCCESS) {
 80414e8:	68fb      	ldr	r3, [r7, #12]
 80414ea:	2b00      	cmp	r3, #0
 80414ec:	d001      	beq.n	80414f2 <ak09918_mag_init+0x42>
    return fret;
 80414ee:	68fb      	ldr	r3, [r7, #12]
 80414f0:	e02b      	b.n	804154a <ak09918_mag_init+0x9a>
  }

  printf("ak09918_mag_init WhoAmI: 0x%x\r\n", WhoAmI);
 80414f2:	897b      	ldrh	r3, [r7, #10]
 80414f4:	4619      	mov	r1, r3
 80414f6:	481b      	ldr	r0, [pc, #108]	; (8041564 <ak09918_mag_init+0xb4>)
 80414f8:	f01f fa3c 	bl	8060974 <iprintf>
  if (WhoAmI != AK09918_WIA_VAL) {
 80414fc:	897b      	ldrh	r3, [r7, #10]
 80414fe:	f640 4248 	movw	r2, #3144	; 0xc48
 8041502:	4293      	cmp	r3, r2
 8041504:	d005      	beq.n	8041512 <ak09918_mag_init+0x62>
    printf("ak09918_mag_init failed!\r\n");
 8041506:	4818      	ldr	r0, [pc, #96]	; (8041568 <ak09918_mag_init+0xb8>)
 8041508:	f01f fad0 	bl	8060aac <puts>
    return AKM_ERROR;
 804150c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8041510:	e01b      	b.n	804154a <ak09918_mag_init+0x9a>
  }

  fret = ak099xx_soft_reset(&dev_ctx);
 8041512:	4811      	ldr	r0, [pc, #68]	; (8041558 <ak09918_mag_init+0xa8>)
 8041514:	f000 f8cb 	bl	80416ae <ak099xx_soft_reset>
 8041518:	60f8      	str	r0, [r7, #12]
  if (fret != AKM_SUCCESS) {
 804151a:	68fb      	ldr	r3, [r7, #12]
 804151c:	2b00      	cmp	r3, #0
 804151e:	d001      	beq.n	8041524 <ak09918_mag_init+0x74>
    return fret;
 8041520:	68fb      	ldr	r3, [r7, #12]
 8041522:	e012      	b.n	804154a <ak09918_mag_init+0x9a>
  }

  /* axis conversion parameter */
  g_mag_axis_order[0] = AKM_CUSTOM_MAG_AXIS_ORDER_X;
 8041524:	4b11      	ldr	r3, [pc, #68]	; (804156c <ak09918_mag_init+0xbc>)
 8041526:	2200      	movs	r2, #0
 8041528:	701a      	strb	r2, [r3, #0]
  g_mag_axis_order[1] = AKM_CUSTOM_MAG_AXIS_ORDER_Y;
 804152a:	4b10      	ldr	r3, [pc, #64]	; (804156c <ak09918_mag_init+0xbc>)
 804152c:	2201      	movs	r2, #1
 804152e:	705a      	strb	r2, [r3, #1]
  g_mag_axis_order[2] = AKM_CUSTOM_MAG_AXIS_ORDER_Z;
 8041530:	4b0e      	ldr	r3, [pc, #56]	; (804156c <ak09918_mag_init+0xbc>)
 8041532:	2202      	movs	r2, #2
 8041534:	709a      	strb	r2, [r3, #2]
  g_mag_axis_sign[0] = AKM_CUSTOM_MAG_AXIS_SIGN_X;
 8041536:	4b0e      	ldr	r3, [pc, #56]	; (8041570 <ak09918_mag_init+0xc0>)
 8041538:	2200      	movs	r2, #0
 804153a:	701a      	strb	r2, [r3, #0]
  g_mag_axis_sign[1] = AKM_CUSTOM_MAG_AXIS_SIGN_Y;
 804153c:	4b0c      	ldr	r3, [pc, #48]	; (8041570 <ak09918_mag_init+0xc0>)
 804153e:	2200      	movs	r2, #0
 8041540:	705a      	strb	r2, [r3, #1]
  g_mag_axis_sign[2] = AKM_CUSTOM_MAG_AXIS_SIGN_Z;
 8041542:	4b0b      	ldr	r3, [pc, #44]	; (8041570 <ak09918_mag_init+0xc0>)
 8041544:	2200      	movs	r2, #0
 8041546:	709a      	strb	r2, [r3, #2]

  return AKM_SUCCESS;
 8041548:	2300      	movs	r3, #0
}
 804154a:	4618      	mov	r0, r3
 804154c:	3710      	adds	r7, #16
 804154e:	46bd      	mov	sp, r7
 8041550:	bd80      	pop	{r7, pc}
 8041552:	bf00      	nop
 8041554:	20007ec8 	.word	0x20007ec8
 8041558:	20007ebc 	.word	0x20007ebc
 804155c:	0804123d 	.word	0x0804123d
 8041560:	08041289 	.word	0x08041289
 8041564:	08064b9c 	.word	0x08064b9c
 8041568:	08064bbc 	.word	0x08064bbc
 804156c:	20007eb4 	.word	0x20007eb4
 8041570:	20007eb8 	.word	0x20007eb8

08041574 <ak09918_mag_config>:

int ak09918_mag_config(uint8_t config_type, void *para)
{
 8041574:	b580      	push	{r7, lr}
 8041576:	b084      	sub	sp, #16
 8041578:	af00      	add	r7, sp, #0
 804157a:	4603      	mov	r3, r0
 804157c:	6039      	str	r1, [r7, #0]
 804157e:	71fb      	strb	r3, [r7, #7]
  int res = 0;
 8041580:	2300      	movs	r3, #0
 8041582:	60fb      	str	r3, [r7, #12]
  switch (config_type) {
 8041584:	79fb      	ldrb	r3, [r7, #7]
 8041586:	2b02      	cmp	r3, #2
 8041588:	d108      	bne.n	804159c <ak09918_mag_config+0x28>
  case SENSOR_CONFIG_SELFTEST:
    printf("mag selftest message \r\n");
 804158a:	4807      	ldr	r0, [pc, #28]	; (80415a8 <ak09918_mag_config+0x34>)
 804158c:	f01f fa8e 	bl	8060aac <puts>
    res = ak09918_self_test(&dev_ctx);
 8041590:	4806      	ldr	r0, [pc, #24]	; (80415ac <ak09918_mag_config+0x38>)
 8041592:	f000 f957 	bl	8041844 <ak09918_self_test>
 8041596:	4603      	mov	r3, r0
 8041598:	60fb      	str	r3, [r7, #12]
    break;
 804159a:	e000      	b.n	804159e <ak09918_mag_config+0x2a>
  default:
    break;
 804159c:	bf00      	nop
  }
  return res;
 804159e:	68fb      	ldr	r3, [r7, #12]
}
 80415a0:	4618      	mov	r0, r3
 80415a2:	3710      	adds	r7, #16
 80415a4:	46bd      	mov	sp, r7
 80415a6:	bd80      	pop	{r7, pc}
 80415a8:	08064bd8 	.word	0x08064bd8
 80415ac:	20007ebc 	.word	0x20007ebc

080415b0 <ak09918_mag_publish_config_resp>:

int ak09918_mag_publish_config_resp(void *para)
{
 80415b0:	b480      	push	{r7}
 80415b2:	b083      	sub	sp, #12
 80415b4:	af00      	add	r7, sp, #0
 80415b6:	6078      	str	r0, [r7, #4]
  return AKM_SUCCESS;
 80415b8:	2300      	movs	r3, #0
}
 80415ba:	4618      	mov	r0, r3
 80415bc:	370c      	adds	r7, #12
 80415be:	46bd      	mov	sp, r7
 80415c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80415c4:	4770      	bx	lr

080415c6 <ak09918_read_reg>:
 * @retval          interface status (MANDATORY: return 0 -> no Error)
 *
 */
int32_t ak09918_read_reg(stmdev_ctx_t * ctx, uint8_t reg, uint8_t * data,
                         uint16_t len)
{
 80415c6:	b590      	push	{r4, r7, lr}
 80415c8:	b087      	sub	sp, #28
 80415ca:	af00      	add	r7, sp, #0
 80415cc:	60f8      	str	r0, [r7, #12]
 80415ce:	607a      	str	r2, [r7, #4]
 80415d0:	461a      	mov	r2, r3
 80415d2:	460b      	mov	r3, r1
 80415d4:	72fb      	strb	r3, [r7, #11]
 80415d6:	4613      	mov	r3, r2
 80415d8:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80415da:	68fb      	ldr	r3, [r7, #12]
 80415dc:	685c      	ldr	r4, [r3, #4]
 80415de:	68fb      	ldr	r3, [r7, #12]
 80415e0:	6898      	ldr	r0, [r3, #8]
 80415e2:	893b      	ldrh	r3, [r7, #8]
 80415e4:	7af9      	ldrb	r1, [r7, #11]
 80415e6:	687a      	ldr	r2, [r7, #4]
 80415e8:	47a0      	blx	r4
 80415ea:	6178      	str	r0, [r7, #20]
  return ret;
 80415ec:	697b      	ldr	r3, [r7, #20]
}
 80415ee:	4618      	mov	r0, r3
 80415f0:	371c      	adds	r7, #28
 80415f2:	46bd      	mov	sp, r7
 80415f4:	bd90      	pop	{r4, r7, pc}

080415f6 <ak09918_write_reg>:
 * @retval          interface status (MANDATORY: return 0 -> no Error)
 *
 */
int32_t ak09918_write_reg(stmdev_ctx_t * ctx, uint8_t reg, uint8_t * data,
                          uint16_t len)
{
 80415f6:	b590      	push	{r4, r7, lr}
 80415f8:	b087      	sub	sp, #28
 80415fa:	af00      	add	r7, sp, #0
 80415fc:	60f8      	str	r0, [r7, #12]
 80415fe:	607a      	str	r2, [r7, #4]
 8041600:	461a      	mov	r2, r3
 8041602:	460b      	mov	r3, r1
 8041604:	72fb      	strb	r3, [r7, #11]
 8041606:	4613      	mov	r3, r2
 8041608:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 804160a:	68fb      	ldr	r3, [r7, #12]
 804160c:	681c      	ldr	r4, [r3, #0]
 804160e:	68fb      	ldr	r3, [r7, #12]
 8041610:	6898      	ldr	r0, [r3, #8]
 8041612:	893b      	ldrh	r3, [r7, #8]
 8041614:	7af9      	ldrb	r1, [r7, #11]
 8041616:	687a      	ldr	r2, [r7, #4]
 8041618:	47a0      	blx	r4
 804161a:	6178      	str	r0, [r7, #20]
  return ret;
 804161c:	697b      	ldr	r3, [r7, #20]
}
 804161e:	4618      	mov	r0, r3
 8041620:	371c      	adds	r7, #28
 8041622:	46bd      	mov	sp, r7
 8041624:	bd90      	pop	{r4, r7, pc}
	...

08041628 <ak099xx_set_mode>:

/******************************************************************************/
/***** AKS public APIs ********************************************************/

int32_t ak099xx_set_mode(stmdev_ctx_t * ctx, const uint8_t mode)
{
 8041628:	b580      	push	{r7, lr}
 804162a:	b084      	sub	sp, #16
 804162c:	af00      	add	r7, sp, #0
 804162e:	6078      	str	r0, [r7, #4]
 8041630:	460b      	mov	r3, r1
 8041632:	70fb      	strb	r3, [r7, #3]
  uint8_t i2cData;
  int32_t fret;

  i2cData = mode;
 8041634:	78fb      	ldrb	r3, [r7, #3]
 8041636:	72fb      	strb	r3, [r7, #11]
  printf("ak099xx_set_mode: 0x%x\r\n", mode);
 8041638:	78fb      	ldrb	r3, [r7, #3]
 804163a:	4619      	mov	r1, r3
 804163c:	480a      	ldr	r0, [pc, #40]	; (8041668 <ak099xx_set_mode+0x40>)
 804163e:	f01f f999 	bl	8060974 <iprintf>
  fret = ak09918_write_reg(ctx, AK099XX_REG_CNTL2, &i2cData, 1);
 8041642:	f107 020b 	add.w	r2, r7, #11
 8041646:	2301      	movs	r3, #1
 8041648:	2131      	movs	r1, #49	; 0x31
 804164a:	6878      	ldr	r0, [r7, #4]
 804164c:	f7ff ffd3 	bl	80415f6 <ak09918_write_reg>
 8041650:	60f8      	str	r0, [r7, #12]
  if (fret != AKM_SUCCESS) {
 8041652:	68fb      	ldr	r3, [r7, #12]
 8041654:	2b00      	cmp	r3, #0
 8041656:	d001      	beq.n	804165c <ak099xx_set_mode+0x34>
    return fret;
 8041658:	68fb      	ldr	r3, [r7, #12]
 804165a:	e000      	b.n	804165e <ak099xx_set_mode+0x36>
  }

  return AKM_SUCCESS;
 804165c:	2300      	movs	r3, #0
}
 804165e:	4618      	mov	r0, r3
 8041660:	3710      	adds	r7, #16
 8041662:	46bd      	mov	sp, r7
 8041664:	bd80      	pop	{r7, pc}
 8041666:	bf00      	nop
 8041668:	08064bf0 	.word	0x08064bf0

0804166c <ak099xx_get_WhoAmI>:

int32_t ak099xx_get_WhoAmI(stmdev_ctx_t * ctx, uint16_t * WhoAmI)
{
 804166c:	b580      	push	{r7, lr}
 804166e:	b084      	sub	sp, #16
 8041670:	af00      	add	r7, sp, #0
 8041672:	6078      	str	r0, [r7, #4]
 8041674:	6039      	str	r1, [r7, #0]
  uint8_t i2cData[4];
  int32_t fret;

  /* Read WIA */
  fret = ak09918_read_reg(ctx, AK099XX_REG_WIA1, i2cData, 4);
 8041676:	f107 0208 	add.w	r2, r7, #8
 804167a:	2304      	movs	r3, #4
 804167c:	2100      	movs	r1, #0
 804167e:	6878      	ldr	r0, [r7, #4]
 8041680:	f7ff ffa1 	bl	80415c6 <ak09918_read_reg>
 8041684:	60f8      	str	r0, [r7, #12]

  if (fret != AKM_SUCCESS) {
 8041686:	68fb      	ldr	r3, [r7, #12]
 8041688:	2b00      	cmp	r3, #0
 804168a:	d001      	beq.n	8041690 <ak099xx_get_WhoAmI+0x24>
    return fret;
 804168c:	68fb      	ldr	r3, [r7, #12]
 804168e:	e00a      	b.n	80416a6 <ak099xx_get_WhoAmI+0x3a>
  }

  /* Store device id (actually, it is company id.) */
  *WhoAmI = (((uint16_t) i2cData[1] << 8) | i2cData[0]);
 8041690:	7a7b      	ldrb	r3, [r7, #9]
 8041692:	021b      	lsls	r3, r3, #8
 8041694:	b21a      	sxth	r2, r3
 8041696:	7a3b      	ldrb	r3, [r7, #8]
 8041698:	b21b      	sxth	r3, r3
 804169a:	4313      	orrs	r3, r2
 804169c:	b21b      	sxth	r3, r3
 804169e:	b29a      	uxth	r2, r3
 80416a0:	683b      	ldr	r3, [r7, #0]
 80416a2:	801a      	strh	r2, [r3, #0]
  return AKM_SUCCESS;
 80416a4:	2300      	movs	r3, #0
}
 80416a6:	4618      	mov	r0, r3
 80416a8:	3710      	adds	r7, #16
 80416aa:	46bd      	mov	sp, r7
 80416ac:	bd80      	pop	{r7, pc}

080416ae <ak099xx_soft_reset>:

int32_t ak099xx_soft_reset(stmdev_ctx_t * ctx)
{
 80416ae:	b580      	push	{r7, lr}
 80416b0:	b084      	sub	sp, #16
 80416b2:	af00      	add	r7, sp, #0
 80416b4:	6078      	str	r0, [r7, #4]
  uint8_t i2cData;
  int32_t fret;

  /* Soft Reset */
  i2cData = AK099XX_SOFT_RESET;
 80416b6:	2301      	movs	r3, #1
 80416b8:	72fb      	strb	r3, [r7, #11]
  fret = ak09918_write_reg(ctx, AK099XX_REG_CNTL3, &i2cData, 1);
 80416ba:	f107 020b 	add.w	r2, r7, #11
 80416be:	2301      	movs	r3, #1
 80416c0:	2132      	movs	r1, #50	; 0x32
 80416c2:	6878      	ldr	r0, [r7, #4]
 80416c4:	f7ff ff97 	bl	80415f6 <ak09918_write_reg>
 80416c8:	60f8      	str	r0, [r7, #12]

  if (fret != AKM_SUCCESS) {
 80416ca:	68fb      	ldr	r3, [r7, #12]
 80416cc:	2b00      	cmp	r3, #0
 80416ce:	d001      	beq.n	80416d4 <ak099xx_soft_reset+0x26>
    return fret;
 80416d0:	68fb      	ldr	r3, [r7, #12]
 80416d2:	e000      	b.n	80416d6 <ak099xx_soft_reset+0x28>
  }

  return AKM_SUCCESS;
 80416d4:	2300      	movs	r3, #0
}
 80416d6:	4618      	mov	r0, r3
 80416d8:	3710      	adds	r7, #16
 80416da:	46bd      	mov	sp, r7
 80416dc:	bd80      	pop	{r7, pc}

080416de <ak099xx_check_rdy>:

int32_t ak099xx_check_rdy(stmdev_ctx_t * ctx)
{
 80416de:	b580      	push	{r7, lr}
 80416e0:	b084      	sub	sp, #16
 80416e2:	af00      	add	r7, sp, #0
 80416e4:	6078      	str	r0, [r7, #4]
  uint8_t i2cData;
  int32_t fret;

  /* Check DRDY bit of ST1 register */
  fret = ak09918_read_reg(ctx, AK099XX_REG_ST1, &i2cData, 1);
 80416e6:	f107 020b 	add.w	r2, r7, #11
 80416ea:	2301      	movs	r3, #1
 80416ec:	2110      	movs	r1, #16
 80416ee:	6878      	ldr	r0, [r7, #4]
 80416f0:	f7ff ff69 	bl	80415c6 <ak09918_read_reg>
 80416f4:	60f8      	str	r0, [r7, #12]
  //printf("ak099xx_check_rdy reg: 0x%x\r\n", i2cData);
  if (fret != AKM_SUCCESS) {
 80416f6:	68fb      	ldr	r3, [r7, #12]
 80416f8:	2b00      	cmp	r3, #0
 80416fa:	d001      	beq.n	8041700 <ak099xx_check_rdy+0x22>
    //printf("ak099xx_check_rdy error: %d\r\n", fret);
    return 0;
 80416fc:	2300      	movs	r3, #0
 80416fe:	e007      	b.n	8041710 <ak099xx_check_rdy+0x32>
  }

  /* AK09911/09912/09913 has only one data.
   * So, return is 0 or 1. */
  if (i2cData & 0x01) {
 8041700:	7afb      	ldrb	r3, [r7, #11]
 8041702:	f003 0301 	and.w	r3, r3, #1
 8041706:	2b00      	cmp	r3, #0
 8041708:	d001      	beq.n	804170e <ak099xx_check_rdy+0x30>
    //printf("ak099xx_check_rdy success\r\n");
    return 1;
 804170a:	2301      	movs	r3, #1
 804170c:	e000      	b.n	8041710 <ak099xx_check_rdy+0x32>
  } else {
    //printf("ak099xx_check_rdy failed\r\n");
    return 0;
 804170e:	2300      	movs	r3, #0
  }
}
 8041710:	4618      	mov	r0, r3
 8041712:	3710      	adds	r7, #16
 8041714:	46bd      	mov	sp, r7
 8041716:	bd80      	pop	{r7, pc}

08041718 <ak099xx_get_data>:

int32_t ak099xx_get_data(stmdev_ctx_t * ctx, struct AKM_SENSOR_DATA * data,
                         uint8_t * num)
{
 8041718:	b580      	push	{r7, lr}
 804171a:	b08a      	sub	sp, #40	; 0x28
 804171c:	af00      	add	r7, sp, #0
 804171e:	60f8      	str	r0, [r7, #12]
 8041720:	60b9      	str	r1, [r7, #8]
 8041722:	607a      	str	r2, [r7, #4]
  int16_t tmp;
  int32_t fret;
  uint8_t i;

  /* check arg */
  if (*num < 1) {
 8041724:	687b      	ldr	r3, [r7, #4]
 8041726:	781b      	ldrb	r3, [r3, #0]
 8041728:	2b00      	cmp	r3, #0
 804172a:	d102      	bne.n	8041732 <ak099xx_get_data+0x1a>
    return AKM_ERR_INVALID_ARG;
 804172c:	f06f 0301 	mvn.w	r3, #1
 8041730:	e04a      	b.n	80417c8 <ak099xx_get_data+0xb0>
  }

  /* Read data */
  fret = ak09918_read_reg(ctx, AK099XX_REG_ST1, i2cData, AK099XX_BDATA_SIZE);
 8041732:	f107 0214 	add.w	r2, r7, #20
 8041736:	2309      	movs	r3, #9
 8041738:	2110      	movs	r1, #16
 804173a:	68f8      	ldr	r0, [r7, #12]
 804173c:	f7ff ff43 	bl	80415c6 <ak09918_read_reg>
 8041740:	6238      	str	r0, [r7, #32]

  if (fret != AKM_SUCCESS) {
 8041742:	6a3b      	ldr	r3, [r7, #32]
 8041744:	2b00      	cmp	r3, #0
 8041746:	d004      	beq.n	8041752 <ak099xx_get_data+0x3a>
    printf("AK099XX_REG_ST1 read error!\r\n");
 8041748:	4821      	ldr	r0, [pc, #132]	; (80417d0 <ak099xx_get_data+0xb8>)
 804174a:	f01f f9af 	bl	8060aac <puts>
    return fret;
 804174e:	6a3b      	ldr	r3, [r7, #32]
 8041750:	e03a      	b.n	80417c8 <ak099xx_get_data+0xb0>
  }

  for (i = 0; i < 3; i++) {
 8041752:	2300      	movs	r3, #0
 8041754:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8041758:	e026      	b.n	80417a8 <ak099xx_get_data+0x90>
    /* convert to int16 data */
    tmp = MAKE_S16(i2cData[i * 2 + 2], i2cData[i * 2 + 1]);
 804175a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 804175e:	3301      	adds	r3, #1
 8041760:	005b      	lsls	r3, r3, #1
 8041762:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8041766:	4413      	add	r3, r2
 8041768:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 804176c:	021b      	lsls	r3, r3, #8
 804176e:	b21a      	sxth	r2, r3
 8041770:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8041774:	005b      	lsls	r3, r3, #1
 8041776:	3301      	adds	r3, #1
 8041778:	f107 0128 	add.w	r1, r7, #40	; 0x28
 804177c:	440b      	add	r3, r1
 804177e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8041782:	b21b      	sxth	r3, r3
 8041784:	4313      	orrs	r3, r2
 8041786:	83fb      	strh	r3, [r7, #30]
    /* multiply ASA and convert to micro tesla in Q16 */
    data->u.v[i] = tmp * SENS_0150_Q16;
 8041788:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 804178c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8041790:	f242 6166 	movw	r1, #9830	; 0x2666
 8041794:	fb01 f103 	mul.w	r1, r1, r3
 8041798:	68bb      	ldr	r3, [r7, #8]
 804179a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < 3; i++) {
 804179e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80417a2:	3301      	adds	r3, #1
 80417a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80417a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80417ac:	2b02      	cmp	r3, #2
 80417ae:	d9d4      	bls.n	804175a <ak099xx_get_data+0x42>
  }

  //printf("mag data: { 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x } \r\n", i2cData[1], i2cData[2], i2cData[3], i2cData[4], i2cData[5], i2cData[6]);
  //data->timestamp = 

  data->status[0] = i2cData[0];
 80417b0:	7d3b      	ldrb	r3, [r7, #20]
 80417b2:	b21a      	sxth	r2, r3
 80417b4:	68bb      	ldr	r3, [r7, #8]
 80417b6:	841a      	strh	r2, [r3, #32]
  data->status[1] = i2cData[AK099XX_BDATA_SIZE - 1];
 80417b8:	7f3b      	ldrb	r3, [r7, #28]
 80417ba:	b21a      	sxth	r2, r3
 80417bc:	68bb      	ldr	r3, [r7, #8]
 80417be:	845a      	strh	r2, [r3, #34]	; 0x22
  *num = 1;
 80417c0:	687b      	ldr	r3, [r7, #4]
 80417c2:	2201      	movs	r2, #1
 80417c4:	701a      	strb	r2, [r3, #0]
  return AKM_SUCCESS;
 80417c6:	2300      	movs	r3, #0
}
 80417c8:	4618      	mov	r0, r3
 80417ca:	3728      	adds	r7, #40	; 0x28
 80417cc:	46bd      	mov	sp, r7
 80417ce:	bd80      	pop	{r7, pc}
 80417d0:	08064c0c 	.word	0x08064c0c

080417d4 <aks_fst_test_data>:
#define TLIMIT_LO_SLF_ST2    0
#define TLIMIT_HI_SLF_ST2    0

int16_t aks_fst_test_data(uint16_t testno, int16_t testdata, int16_t lolimit,
                          int16_t hilimit)
{
 80417d4:	b590      	push	{r4, r7, lr}
 80417d6:	b083      	sub	sp, #12
 80417d8:	af00      	add	r7, sp, #0
 80417da:	4604      	mov	r4, r0
 80417dc:	4608      	mov	r0, r1
 80417de:	4611      	mov	r1, r2
 80417e0:	461a      	mov	r2, r3
 80417e2:	4623      	mov	r3, r4
 80417e4:	80fb      	strh	r3, [r7, #6]
 80417e6:	4603      	mov	r3, r0
 80417e8:	80bb      	strh	r3, [r7, #4]
 80417ea:	460b      	mov	r3, r1
 80417ec:	807b      	strh	r3, [r7, #2]
 80417ee:	4613      	mov	r3, r2
 80417f0:	803b      	strh	r3, [r7, #0]
  if ((lolimit <= testdata) && (testdata <= hilimit)) {
 80417f2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80417f6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80417fa:	429a      	cmp	r2, r3
 80417fc:	dc07      	bgt.n	804180e <aks_fst_test_data+0x3a>
 80417fe:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8041802:	f9b7 3000 	ldrsh.w	r3, [r7]
 8041806:	429a      	cmp	r2, r3
 8041808:	dc01      	bgt.n	804180e <aks_fst_test_data+0x3a>
    return AKM_SUCCESS;
 804180a:	2300      	movs	r3, #0
 804180c:	e008      	b.n	8041820 <aks_fst_test_data+0x4c>
  } else {
    printf("aks_fst_test_data failed %u %d! \r\n", testno, testdata);
 804180e:	88fb      	ldrh	r3, [r7, #6]
 8041810:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8041814:	4619      	mov	r1, r3
 8041816:	4804      	ldr	r0, [pc, #16]	; (8041828 <aks_fst_test_data+0x54>)
 8041818:	f01f f8ac 	bl	8060974 <iprintf>
    return AKM_ERROR;
 804181c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 8041820:	4618      	mov	r0, r3
 8041822:	370c      	adds	r7, #12
 8041824:	46bd      	mov	sp, r7
 8041826:	bd90      	pop	{r4, r7, pc}
 8041828:	08064c2c 	.word	0x08064c2c

0804182c <platform_delay>:
 *
 * @param  ms        delay in ms
 *
 */
static void platform_delay(uint32_t ms)
{
 804182c:	b580      	push	{r7, lr}
 804182e:	b082      	sub	sp, #8
 8041830:	af00      	add	r7, sp, #0
 8041832:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 8041834:	6878      	ldr	r0, [r7, #4]
 8041836:	f00d ff09 	bl	804f64c <HAL_Delay>
}
 804183a:	bf00      	nop
 804183c:	3708      	adds	r7, #8
 804183e:	46bd      	mov	sp, r7
 8041840:	bd80      	pop	{r7, pc}
	...

08041844 <ak09918_self_test>:
/*
 * \result upper_16bit test number
 * \result lower_16bit test result data.
 */
int16_t ak09918_self_test(stmdev_ctx_t * ctx)
{
 8041844:	b580      	push	{r7, lr}
 8041846:	b088      	sub	sp, #32
 8041848:	af00      	add	r7, sp, #0
 804184a:	6078      	str	r0, [r7, #4]
        /**********************************************************************
	 * Step 1
	 **********************************************************************/

  /* Soft Reset */
  fret = ak099xx_soft_reset(ctx);
 804184c:	6878      	ldr	r0, [r7, #4]
 804184e:	f7ff ff2e 	bl	80416ae <ak099xx_soft_reset>
 8041852:	4603      	mov	r3, r0
 8041854:	83fb      	strh	r3, [r7, #30]

  if (AKM_SUCCESS != fret) {
 8041856:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 804185a:	2b00      	cmp	r3, #0
 804185c:	d006      	beq.n	804186c <ak09918_self_test+0x28>
    printf("ak099xx_soft_reset failed result = %d\r\n", fret);  //(TLIMIT_NO_RST)
 804185e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8041862:	4619      	mov	r1, r3
 8041864:	48a8      	ldr	r0, [pc, #672]	; (8041b08 <ak09918_self_test+0x2c4>)
 8041866:	f01f f885 	bl	8060974 <iprintf>
    goto SELFTEST_FAIL;
 804186a:	e143      	b.n	8041af4 <ak09918_self_test+0x2b0>
  }

  /* Wait over 1000 us */
  platform_delay(1);
 804186c:	2001      	movs	r0, #1
 804186e:	f7ff ffdd 	bl	804182c <platform_delay>

  /* Read values. */
  fret = ak09918_read_reg(ctx, AK099XX_REG_WIA1, i2cData, 2);
 8041872:	f107 020c 	add.w	r2, r7, #12
 8041876:	2302      	movs	r3, #2
 8041878:	2100      	movs	r1, #0
 804187a:	6878      	ldr	r0, [r7, #4]
 804187c:	f7ff fea3 	bl	80415c6 <ak09918_read_reg>
 8041880:	4603      	mov	r3, r0
 8041882:	83fb      	strh	r3, [r7, #30]

  if (AKM_SUCCESS != fret) {
 8041884:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8041888:	2b00      	cmp	r3, #0
 804188a:	d006      	beq.n	804189a <ak09918_self_test+0x56>
    printf("ak09918_read_reg AK099XX_REG_WIA1 failed result = %d\r\n", fret);   //TLIMIT_NO_RST_READ
 804188c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8041890:	4619      	mov	r1, r3
 8041892:	489e      	ldr	r0, [pc, #632]	; (8041b0c <ak09918_self_test+0x2c8>)
 8041894:	f01f f86e 	bl	8060974 <iprintf>
    goto SELFTEST_FAIL;
 8041898:	e12c      	b.n	8041af4 <ak09918_self_test+0x2b0>
  }

  AKM_CHECK_IN_THRESHOLD(TLIMIT_NO_RST_WIA1, i2cData[0], TLIMIT_LO_RST_WIA1,
 804189a:	7b3b      	ldrb	r3, [r7, #12]
 804189c:	b219      	sxth	r1, r3
 804189e:	2348      	movs	r3, #72	; 0x48
 80418a0:	2248      	movs	r2, #72	; 0x48
 80418a2:	f240 1003 	movw	r0, #259	; 0x103
 80418a6:	f7ff ff95 	bl	80417d4 <aks_fst_test_data>
 80418aa:	4603      	mov	r3, r0
 80418ac:	2b00      	cmp	r3, #0
 80418ae:	f040 810a 	bne.w	8041ac6 <ak09918_self_test+0x282>
                         TLIMIT_HI_RST_WIA1);
  AKM_CHECK_IN_THRESHOLD(TLIMIT_NO_RST_WIA2, i2cData[1], TLIMIT_LO_RST_WIA2,
 80418b2:	7b7b      	ldrb	r3, [r7, #13]
 80418b4:	b219      	sxth	r1, r3
 80418b6:	230c      	movs	r3, #12
 80418b8:	220c      	movs	r2, #12
 80418ba:	f44f 7082 	mov.w	r0, #260	; 0x104
 80418be:	f7ff ff89 	bl	80417d4 <aks_fst_test_data>
 80418c2:	4603      	mov	r3, r0
 80418c4:	2b00      	cmp	r3, #0
 80418c6:	f040 8100 	bne.w	8041aca <ak09918_self_test+0x286>
        /**********************************************************************
	 * Step 2
	 **********************************************************************/

  /* Set to SNG measurement pattern. */
  fret = ak099xx_set_mode(ctx, AK099XX_MODE_SNG_MEASURE);
 80418ca:	2101      	movs	r1, #1
 80418cc:	6878      	ldr	r0, [r7, #4]
 80418ce:	f7ff feab 	bl	8041628 <ak099xx_set_mode>
 80418d2:	4603      	mov	r3, r0
 80418d4:	83fb      	strh	r3, [r7, #30]

  if (AKM_SUCCESS != fret) {
 80418d6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80418da:	2b00      	cmp	r3, #0
 80418dc:	d006      	beq.n	80418ec <ak09918_self_test+0xa8>
    printf("ak09918_set_mode AK099XX_MODE_SNG_MEASURE failed result = %d\r\n", fret);   //TLIMIT_NO_SNG_CNTL2
 80418de:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80418e2:	4619      	mov	r1, r3
 80418e4:	488a      	ldr	r0, [pc, #552]	; (8041b10 <ak09918_self_test+0x2cc>)
 80418e6:	f01f f845 	bl	8060974 <iprintf>
    goto SELFTEST_FAIL;
 80418ea:	e103      	b.n	8041af4 <ak09918_self_test+0x2b0>
  }

  /* Wait for single measurement. */
  platform_delay(10);
 80418ec:	200a      	movs	r0, #10
 80418ee:	f7ff ff9d 	bl	804182c <platform_delay>

  /*
   * Get measurement data from AK09918
   * ST1 + (HXL/H) + (HYL/H) + (HZL/H) + TMPS + ST2 = 9bytes */
  fret = ak09918_read_reg(ctx, AK099XX_REG_ST1, i2cData, AK099XX_BDATA_SIZE);
 80418f2:	f107 020c 	add.w	r2, r7, #12
 80418f6:	2309      	movs	r3, #9
 80418f8:	2110      	movs	r1, #16
 80418fa:	6878      	ldr	r0, [r7, #4]
 80418fc:	f7ff fe63 	bl	80415c6 <ak09918_read_reg>
 8041900:	4603      	mov	r3, r0
 8041902:	83fb      	strh	r3, [r7, #30]

  if (AKM_SUCCESS != fret) {
 8041904:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8041908:	2b00      	cmp	r3, #0
 804190a:	d006      	beq.n	804191a <ak09918_self_test+0xd6>
    printf("ak09918_read_reg AK099XX_REG_ST1 failed result = %d\r\n", fret);    //TLIMIT_NO_SNG_WAIT
 804190c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8041910:	4619      	mov	r1, r3
 8041912:	4880      	ldr	r0, [pc, #512]	; (8041b14 <ak09918_self_test+0x2d0>)
 8041914:	f01f f82e 	bl	8060974 <iprintf>
    goto SELFTEST_FAIL;
 8041918:	e0ec      	b.n	8041af4 <ak09918_self_test+0x2b0>
  }

  /* Convert to 16-bit integer value. */
  xval_i16 = (int16_t) (((uint16_t) i2cData[1]) | ((uint16_t) i2cData[2] << 8));
 804191a:	7b7b      	ldrb	r3, [r7, #13]
 804191c:	b21a      	sxth	r2, r3
 804191e:	7bbb      	ldrb	r3, [r7, #14]
 8041920:	021b      	lsls	r3, r3, #8
 8041922:	b21b      	sxth	r3, r3
 8041924:	4313      	orrs	r3, r2
 8041926:	83bb      	strh	r3, [r7, #28]
  yval_i16 = (int16_t) (((uint16_t) i2cData[3]) | ((uint16_t) i2cData[4] << 8));
 8041928:	7bfb      	ldrb	r3, [r7, #15]
 804192a:	b21a      	sxth	r2, r3
 804192c:	7c3b      	ldrb	r3, [r7, #16]
 804192e:	021b      	lsls	r3, r3, #8
 8041930:	b21b      	sxth	r3, r3
 8041932:	4313      	orrs	r3, r2
 8041934:	837b      	strh	r3, [r7, #26]
  zval_i16 = (int16_t) (((uint16_t) i2cData[5]) | ((uint16_t) i2cData[6] << 8));
 8041936:	7c7b      	ldrb	r3, [r7, #17]
 8041938:	b21a      	sxth	r2, r3
 804193a:	7cbb      	ldrb	r3, [r7, #18]
 804193c:	021b      	lsls	r3, r3, #8
 804193e:	b21b      	sxth	r3, r3
 8041940:	4313      	orrs	r3, r2
 8041942:	833b      	strh	r3, [r7, #24]

  AKM_CHECK_IN_THRESHOLD(TLIMIT_NO_SNG_ST1, i2cData[0], TLIMIT_LO_SNG_ST1,
 8041944:	7b3b      	ldrb	r3, [r7, #12]
 8041946:	b219      	sxth	r1, r3
 8041948:	2301      	movs	r3, #1
 804194a:	2201      	movs	r2, #1
 804194c:	f240 2003 	movw	r0, #515	; 0x203
 8041950:	f7ff ff40 	bl	80417d4 <aks_fst_test_data>
 8041954:	4603      	mov	r3, r0
 8041956:	2b00      	cmp	r3, #0
 8041958:	f040 80b9 	bne.w	8041ace <ak09918_self_test+0x28a>
                         TLIMIT_HI_SNG_ST1);
  AKM_CHECK_IN_THRESHOLD(TLIMIT_NO_SNG_HX, xval_i16, TLIMIT_LO_SNG_HX,
 804195c:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 8041960:	f647 73ef 	movw	r3, #32751	; 0x7fef
 8041964:	4a6c      	ldr	r2, [pc, #432]	; (8041b18 <ak09918_self_test+0x2d4>)
 8041966:	f44f 7001 	mov.w	r0, #516	; 0x204
 804196a:	f7ff ff33 	bl	80417d4 <aks_fst_test_data>
 804196e:	4603      	mov	r3, r0
 8041970:	2b00      	cmp	r3, #0
 8041972:	f040 80ae 	bne.w	8041ad2 <ak09918_self_test+0x28e>
                         TLIMIT_HI_SNG_HX);
  AKM_CHECK_IN_THRESHOLD(TLIMIT_NO_SNG_HY, yval_i16, TLIMIT_LO_SNG_HY,
 8041976:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 804197a:	f647 73ef 	movw	r3, #32751	; 0x7fef
 804197e:	4a66      	ldr	r2, [pc, #408]	; (8041b18 <ak09918_self_test+0x2d4>)
 8041980:	f240 2006 	movw	r0, #518	; 0x206
 8041984:	f7ff ff26 	bl	80417d4 <aks_fst_test_data>
 8041988:	4603      	mov	r3, r0
 804198a:	2b00      	cmp	r3, #0
 804198c:	f040 80a3 	bne.w	8041ad6 <ak09918_self_test+0x292>
                         TLIMIT_HI_SNG_HY);
  AKM_CHECK_IN_THRESHOLD(TLIMIT_NO_SNG_HZ, zval_i16, TLIMIT_LO_SNG_HZ,
 8041990:	f9b7 1018 	ldrsh.w	r1, [r7, #24]
 8041994:	f647 73ef 	movw	r3, #32751	; 0x7fef
 8041998:	4a5f      	ldr	r2, [pc, #380]	; (8041b18 <ak09918_self_test+0x2d4>)
 804199a:	f44f 7002 	mov.w	r0, #520	; 0x208
 804199e:	f7ff ff19 	bl	80417d4 <aks_fst_test_data>
 80419a2:	4603      	mov	r3, r0
 80419a4:	2b00      	cmp	r3, #0
 80419a6:	f040 8098 	bne.w	8041ada <ak09918_self_test+0x296>
                         TLIMIT_HI_SNG_HZ);
  AKM_CHECK_IN_THRESHOLD(TLIMIT_NO_SNG_ST2, (i2cData[8] & TLIMIT_ST2_MASK),
 80419aa:	7d3b      	ldrb	r3, [r7, #20]
 80419ac:	b21b      	sxth	r3, r3
 80419ae:	f003 0308 	and.w	r3, r3, #8
 80419b2:	b219      	sxth	r1, r3
 80419b4:	2300      	movs	r3, #0
 80419b6:	2200      	movs	r2, #0
 80419b8:	f240 200a 	movw	r0, #522	; 0x20a
 80419bc:	f7ff ff0a 	bl	80417d4 <aks_fst_test_data>
 80419c0:	4603      	mov	r3, r0
 80419c2:	2b00      	cmp	r3, #0
 80419c4:	f040 808b 	bne.w	8041ade <ak09918_self_test+0x29a>
                         TLIMIT_LO_SNG_ST2, TLIMIT_HI_SNG_ST2);

  /* Set to self-test mode. */
  fret = ak099xx_set_mode(ctx, AK099XX_MODE_SELF_TEST);
 80419c8:	2110      	movs	r1, #16
 80419ca:	6878      	ldr	r0, [r7, #4]
 80419cc:	f7ff fe2c 	bl	8041628 <ak099xx_set_mode>
 80419d0:	4603      	mov	r3, r0
 80419d2:	83fb      	strh	r3, [r7, #30]

  if (AKM_SUCCESS != fret) {
 80419d4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80419d8:	2b00      	cmp	r3, #0
 80419da:	d006      	beq.n	80419ea <ak09918_self_test+0x1a6>
    printf("ak09918_set_mode AK099XX_MODE_SELF_TEST failed result = %d\r\n", fret);     //TLIMIT_NO_SNG_CNTL2
 80419dc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80419e0:	4619      	mov	r1, r3
 80419e2:	484e      	ldr	r0, [pc, #312]	; (8041b1c <ak09918_self_test+0x2d8>)
 80419e4:	f01e ffc6 	bl	8060974 <iprintf>
    goto SELFTEST_FAIL;
 80419e8:	e084      	b.n	8041af4 <ak09918_self_test+0x2b0>
  }

  /* Wait for self-test measurement. */
  /* Maximum time for measurement is 8.2 ms */
  /* Refer to datasheet p.6 */
  platform_delay(9);
 80419ea:	2009      	movs	r0, #9
 80419ec:	f7ff ff1e 	bl	804182c <platform_delay>

  /*
   * Get measurement data from AK09918
   * ST1 + (HXL + HXH) + (HYL + HYH) + (HZL + HZH) + TMPS + ST2 = 9bytes */
  fret = ak09918_read_reg(ctx, AK099XX_REG_ST1, i2cData, AK099XX_BDATA_SIZE);
 80419f0:	f107 020c 	add.w	r2, r7, #12
 80419f4:	2309      	movs	r3, #9
 80419f6:	2110      	movs	r1, #16
 80419f8:	6878      	ldr	r0, [r7, #4]
 80419fa:	f7ff fde4 	bl	80415c6 <ak09918_read_reg>
 80419fe:	4603      	mov	r3, r0
 8041a00:	83fb      	strh	r3, [r7, #30]

  if (AKM_SUCCESS != fret) {
 8041a02:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8041a06:	2b00      	cmp	r3, #0
 8041a08:	d006      	beq.n	8041a18 <ak09918_self_test+0x1d4>
    printf("ak09918_read_reg AK099XX_REG_ST1 failed result = %d\r\n", fret);    //TLIMIT_NO_SLF_WAIT
 8041a0a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8041a0e:	4619      	mov	r1, r3
 8041a10:	4840      	ldr	r0, [pc, #256]	; (8041b14 <ak09918_self_test+0x2d0>)
 8041a12:	f01e ffaf 	bl	8060974 <iprintf>
    goto SELFTEST_FAIL;
 8041a16:	e06d      	b.n	8041af4 <ak09918_self_test+0x2b0>
  }

  /* Convert to 16-bit integer value. */
  xval_i16 = (int16_t) (((uint16_t) i2cData[1]) | ((uint16_t) i2cData[2] << 8));
 8041a18:	7b7b      	ldrb	r3, [r7, #13]
 8041a1a:	b21a      	sxth	r2, r3
 8041a1c:	7bbb      	ldrb	r3, [r7, #14]
 8041a1e:	021b      	lsls	r3, r3, #8
 8041a20:	b21b      	sxth	r3, r3
 8041a22:	4313      	orrs	r3, r2
 8041a24:	83bb      	strh	r3, [r7, #28]
  yval_i16 = (int16_t) (((uint16_t) i2cData[3]) | ((uint16_t) i2cData[4] << 8));
 8041a26:	7bfb      	ldrb	r3, [r7, #15]
 8041a28:	b21a      	sxth	r2, r3
 8041a2a:	7c3b      	ldrb	r3, [r7, #16]
 8041a2c:	021b      	lsls	r3, r3, #8
 8041a2e:	b21b      	sxth	r3, r3
 8041a30:	4313      	orrs	r3, r2
 8041a32:	837b      	strh	r3, [r7, #26]
  zval_i16 = (int16_t) (((uint16_t) i2cData[5]) | ((uint16_t) i2cData[6] << 8));
 8041a34:	7c7b      	ldrb	r3, [r7, #17]
 8041a36:	b21a      	sxth	r2, r3
 8041a38:	7cbb      	ldrb	r3, [r7, #18]
 8041a3a:	021b      	lsls	r3, r3, #8
 8041a3c:	b21b      	sxth	r3, r3
 8041a3e:	4313      	orrs	r3, r2
 8041a40:	833b      	strh	r3, [r7, #24]

  AKM_CHECK_IN_THRESHOLD(TLIMIT_NO_SLF_ST1, i2cData[0], TLIMIT_LO_SLF_ST1,
 8041a42:	7b3b      	ldrb	r3, [r7, #12]
 8041a44:	b219      	sxth	r1, r3
 8041a46:	2301      	movs	r3, #1
 8041a48:	2201      	movs	r2, #1
 8041a4a:	f240 200d 	movw	r0, #525	; 0x20d
 8041a4e:	f7ff fec1 	bl	80417d4 <aks_fst_test_data>
 8041a52:	4603      	mov	r3, r0
 8041a54:	2b00      	cmp	r3, #0
 8041a56:	d144      	bne.n	8041ae2 <ak09918_self_test+0x29e>
                         TLIMIT_HI_SLF_ST1);
  AKM_CHECK_IN_THRESHOLD(TLIMIT_NO_SLF_RVHX, xval_i16, TLIMIT_LO_SLF_RVHX,
 8041a58:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 8041a5c:	23c8      	movs	r3, #200	; 0xc8
 8041a5e:	f06f 02c7 	mvn.w	r2, #199	; 0xc7
 8041a62:	f240 200e 	movw	r0, #526	; 0x20e
 8041a66:	f7ff feb5 	bl	80417d4 <aks_fst_test_data>
 8041a6a:	4603      	mov	r3, r0
 8041a6c:	2b00      	cmp	r3, #0
 8041a6e:	d13a      	bne.n	8041ae6 <ak09918_self_test+0x2a2>
                         TLIMIT_HI_SLF_RVHX);
  AKM_CHECK_IN_THRESHOLD(TLIMIT_NO_SLF_RVHY, yval_i16, TLIMIT_LO_SLF_RVHY,
 8041a70:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 8041a74:	23c8      	movs	r3, #200	; 0xc8
 8041a76:	f06f 02c7 	mvn.w	r2, #199	; 0xc7
 8041a7a:	f44f 7004 	mov.w	r0, #528	; 0x210
 8041a7e:	f7ff fea9 	bl	80417d4 <aks_fst_test_data>
 8041a82:	4603      	mov	r3, r0
 8041a84:	2b00      	cmp	r3, #0
 8041a86:	d130      	bne.n	8041aea <ak09918_self_test+0x2a6>
                         TLIMIT_HI_SLF_RVHY);
  AKM_CHECK_IN_THRESHOLD(TLIMIT_NO_SLF_RVHZ, zval_i16, TLIMIT_LO_SLF_RVHZ,
 8041a88:	f9b7 1018 	ldrsh.w	r1, [r7, #24]
 8041a8c:	f06f 03c7 	mvn.w	r3, #199	; 0xc7
 8041a90:	4a23      	ldr	r2, [pc, #140]	; (8041b20 <ak09918_self_test+0x2dc>)
 8041a92:	f240 2012 	movw	r0, #530	; 0x212
 8041a96:	f7ff fe9d 	bl	80417d4 <aks_fst_test_data>
 8041a9a:	4603      	mov	r3, r0
 8041a9c:	2b00      	cmp	r3, #0
 8041a9e:	d126      	bne.n	8041aee <ak09918_self_test+0x2aa>
                         TLIMIT_HI_SLF_RVHZ);
  AKM_CHECK_IN_THRESHOLD(TLIMIT_NO_SLF_ST2, (i2cData[8] & TLIMIT_ST2_MASK),
 8041aa0:	7d3b      	ldrb	r3, [r7, #20]
 8041aa2:	b21b      	sxth	r3, r3
 8041aa4:	f003 0308 	and.w	r3, r3, #8
 8041aa8:	b219      	sxth	r1, r3
 8041aaa:	2300      	movs	r3, #0
 8041aac:	2200      	movs	r2, #0
 8041aae:	f44f 7005 	mov.w	r0, #532	; 0x214
 8041ab2:	f7ff fe8f 	bl	80417d4 <aks_fst_test_data>
 8041ab6:	4603      	mov	r3, r0
 8041ab8:	2b00      	cmp	r3, #0
 8041aba:	d11a      	bne.n	8041af2 <ak09918_self_test+0x2ae>
                         TLIMIT_LO_SLF_ST2, TLIMIT_HI_SLF_ST2);

  printf("ak09918_self_test success\r\n");
 8041abc:	4819      	ldr	r0, [pc, #100]	; (8041b24 <ak09918_self_test+0x2e0>)
 8041abe:	f01e fff5 	bl	8060aac <puts>
  return AKM_SUCCESS;
 8041ac2:	2300      	movs	r3, #0
 8041ac4:	e01b      	b.n	8041afe <ak09918_self_test+0x2ba>
  AKM_CHECK_IN_THRESHOLD(TLIMIT_NO_RST_WIA1, i2cData[0], TLIMIT_LO_RST_WIA1,
 8041ac6:	bf00      	nop
 8041ac8:	e014      	b.n	8041af4 <ak09918_self_test+0x2b0>
  AKM_CHECK_IN_THRESHOLD(TLIMIT_NO_RST_WIA2, i2cData[1], TLIMIT_LO_RST_WIA2,
 8041aca:	bf00      	nop
 8041acc:	e012      	b.n	8041af4 <ak09918_self_test+0x2b0>
  AKM_CHECK_IN_THRESHOLD(TLIMIT_NO_SNG_ST1, i2cData[0], TLIMIT_LO_SNG_ST1,
 8041ace:	bf00      	nop
 8041ad0:	e010      	b.n	8041af4 <ak09918_self_test+0x2b0>
  AKM_CHECK_IN_THRESHOLD(TLIMIT_NO_SNG_HX, xval_i16, TLIMIT_LO_SNG_HX,
 8041ad2:	bf00      	nop
 8041ad4:	e00e      	b.n	8041af4 <ak09918_self_test+0x2b0>
  AKM_CHECK_IN_THRESHOLD(TLIMIT_NO_SNG_HY, yval_i16, TLIMIT_LO_SNG_HY,
 8041ad6:	bf00      	nop
 8041ad8:	e00c      	b.n	8041af4 <ak09918_self_test+0x2b0>
  AKM_CHECK_IN_THRESHOLD(TLIMIT_NO_SNG_HZ, zval_i16, TLIMIT_LO_SNG_HZ,
 8041ada:	bf00      	nop
 8041adc:	e00a      	b.n	8041af4 <ak09918_self_test+0x2b0>
  AKM_CHECK_IN_THRESHOLD(TLIMIT_NO_SNG_ST2, (i2cData[8] & TLIMIT_ST2_MASK),
 8041ade:	bf00      	nop
 8041ae0:	e008      	b.n	8041af4 <ak09918_self_test+0x2b0>
  AKM_CHECK_IN_THRESHOLD(TLIMIT_NO_SLF_ST1, i2cData[0], TLIMIT_LO_SLF_ST1,
 8041ae2:	bf00      	nop
 8041ae4:	e006      	b.n	8041af4 <ak09918_self_test+0x2b0>
  AKM_CHECK_IN_THRESHOLD(TLIMIT_NO_SLF_RVHX, xval_i16, TLIMIT_LO_SLF_RVHX,
 8041ae6:	bf00      	nop
 8041ae8:	e004      	b.n	8041af4 <ak09918_self_test+0x2b0>
  AKM_CHECK_IN_THRESHOLD(TLIMIT_NO_SLF_RVHY, yval_i16, TLIMIT_LO_SLF_RVHY,
 8041aea:	bf00      	nop
 8041aec:	e002      	b.n	8041af4 <ak09918_self_test+0x2b0>
  AKM_CHECK_IN_THRESHOLD(TLIMIT_NO_SLF_RVHZ, zval_i16, TLIMIT_LO_SLF_RVHZ,
 8041aee:	bf00      	nop
 8041af0:	e000      	b.n	8041af4 <ak09918_self_test+0x2b0>
  AKM_CHECK_IN_THRESHOLD(TLIMIT_NO_SLF_ST2, (i2cData[8] & TLIMIT_ST2_MASK),
 8041af2:	bf00      	nop

SELFTEST_FAIL:
  printf("ak09918_self_test failed\r\n");
 8041af4:	480c      	ldr	r0, [pc, #48]	; (8041b28 <ak09918_self_test+0x2e4>)
 8041af6:	f01e ffd9 	bl	8060aac <puts>
  return AKM_ERROR;
 8041afa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8041afe:	4618      	mov	r0, r3
 8041b00:	3720      	adds	r7, #32
 8041b02:	46bd      	mov	sp, r7
 8041b04:	bd80      	pop	{r7, pc}
 8041b06:	bf00      	nop
 8041b08:	08064c50 	.word	0x08064c50
 8041b0c:	08064c78 	.word	0x08064c78
 8041b10:	08064cb0 	.word	0x08064cb0
 8041b14:	08064cf0 	.word	0x08064cf0
 8041b18:	ffff8011 	.word	0xffff8011
 8041b1c:	08064d28 	.word	0x08064d28
 8041b20:	fffffc18 	.word	0xfffffc18
 8041b24:	08064d68 	.word	0x08064d68
 8041b28:	08064d84 	.word	0x08064d84

08041b2c <swapint>:

/* Extern variables ----------------------------------------------------------*/

/* Swap the contents of 'a' and 'b' */
void swapint(int *a, int *b)
{
 8041b2c:	b480      	push	{r7}
 8041b2e:	b085      	sub	sp, #20
 8041b30:	af00      	add	r7, sp, #0
 8041b32:	6078      	str	r0, [r7, #4]
 8041b34:	6039      	str	r1, [r7, #0]
  int temp = *a;
 8041b36:	687b      	ldr	r3, [r7, #4]
 8041b38:	681b      	ldr	r3, [r3, #0]
 8041b3a:	60fb      	str	r3, [r7, #12]
  *a = *b;
 8041b3c:	683b      	ldr	r3, [r7, #0]
 8041b3e:	681a      	ldr	r2, [r3, #0]
 8041b40:	687b      	ldr	r3, [r7, #4]
 8041b42:	601a      	str	r2, [r3, #0]
  *b = temp;
 8041b44:	683b      	ldr	r3, [r7, #0]
 8041b46:	68fa      	ldr	r2, [r7, #12]
 8041b48:	601a      	str	r2, [r3, #0]
}
 8041b4a:	bf00      	nop
 8041b4c:	3714      	adds	r7, #20
 8041b4e:	46bd      	mov	sp, r7
 8041b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041b54:	4770      	bx	lr

08041b56 <swapfloat>:

/* Swap the contents of 'a' and 'b' */
void swapfloat(float *a, float *b)
{
 8041b56:	b480      	push	{r7}
 8041b58:	b085      	sub	sp, #20
 8041b5a:	af00      	add	r7, sp, #0
 8041b5c:	6078      	str	r0, [r7, #4]
 8041b5e:	6039      	str	r1, [r7, #0]
  float temp = *a;
 8041b60:	687b      	ldr	r3, [r7, #4]
 8041b62:	681b      	ldr	r3, [r3, #0]
 8041b64:	60fb      	str	r3, [r7, #12]
  *a = *b;
 8041b66:	683b      	ldr	r3, [r7, #0]
 8041b68:	681a      	ldr	r2, [r3, #0]
 8041b6a:	687b      	ldr	r3, [r7, #4]
 8041b6c:	601a      	str	r2, [r3, #0]
  *b = temp;
 8041b6e:	683b      	ldr	r3, [r7, #0]
 8041b70:	68fa      	ldr	r2, [r7, #12]
 8041b72:	601a      	str	r2, [r3, #0]
}
 8041b74:	bf00      	nop
 8041b76:	3714      	adds	r7, #20
 8041b78:	46bd      	mov	sp, r7
 8041b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041b7e:	4770      	bx	lr

08041b80 <get_insertion_index>:
  }
}

/* Figures out where to insert a new value for our streaming median */
int get_insertion_index(int *ages, int len)
{
 8041b80:	b480      	push	{r7}
 8041b82:	b085      	sub	sp, #20
 8041b84:	af00      	add	r7, sp, #0
 8041b86:	6078      	str	r0, [r7, #4]
 8041b88:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < len; i++) {
 8041b8a:	2300      	movs	r3, #0
 8041b8c:	60fb      	str	r3, [r7, #12]
 8041b8e:	e014      	b.n	8041bba <get_insertion_index+0x3a>
    // Replace an invalid value index or the oldest value index
    if ((0 == ages[i]) || (len + 1 == ages[i])) {
 8041b90:	68fb      	ldr	r3, [r7, #12]
 8041b92:	009b      	lsls	r3, r3, #2
 8041b94:	687a      	ldr	r2, [r7, #4]
 8041b96:	4413      	add	r3, r2
 8041b98:	681b      	ldr	r3, [r3, #0]
 8041b9a:	2b00      	cmp	r3, #0
 8041b9c:	d008      	beq.n	8041bb0 <get_insertion_index+0x30>
 8041b9e:	683b      	ldr	r3, [r7, #0]
 8041ba0:	1c5a      	adds	r2, r3, #1
 8041ba2:	68fb      	ldr	r3, [r7, #12]
 8041ba4:	009b      	lsls	r3, r3, #2
 8041ba6:	6879      	ldr	r1, [r7, #4]
 8041ba8:	440b      	add	r3, r1
 8041baa:	681b      	ldr	r3, [r3, #0]
 8041bac:	429a      	cmp	r2, r3
 8041bae:	d101      	bne.n	8041bb4 <get_insertion_index+0x34>
      return i;
 8041bb0:	68fb      	ldr	r3, [r7, #12]
 8041bb2:	e007      	b.n	8041bc4 <get_insertion_index+0x44>
  for (int i = 0; i < len; i++) {
 8041bb4:	68fb      	ldr	r3, [r7, #12]
 8041bb6:	3301      	adds	r3, #1
 8041bb8:	60fb      	str	r3, [r7, #12]
 8041bba:	68fa      	ldr	r2, [r7, #12]
 8041bbc:	683b      	ldr	r3, [r7, #0]
 8041bbe:	429a      	cmp	r2, r3
 8041bc0:	dbe6      	blt.n	8041b90 <get_insertion_index+0x10>
    }
  }
  return 0;// We should never reach this return statement
 8041bc2:	2300      	movs	r3, #0
}
 8041bc4:	4618      	mov	r0, r3
 8041bc6:	3714      	adds	r7, #20
 8041bc8:	46bd      	mov	sp, r7
 8041bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041bce:	4770      	bx	lr

08041bd0 <streaming_median>:
/*
Return a new median based on the new input value
Leverage the fact that we don't need to sort the entire history array each time
*/
float streaming_median(float new_val, float *values, int *ages, int len)
{
 8041bd0:	b580      	push	{r7, lr}
 8041bd2:	b088      	sub	sp, #32
 8041bd4:	af00      	add	r7, sp, #0
 8041bd6:	ed87 0a03 	vstr	s0, [r7, #12]
 8041bda:	60b8      	str	r0, [r7, #8]
 8041bdc:	6079      	str	r1, [r7, #4]
 8041bde:	603a      	str	r2, [r7, #0]
  int i;
  int num_valid = len;  // Initially assume that all stored values are valid
 8041be0:	683b      	ldr	r3, [r7, #0]
 8041be2:	61bb      	str	r3, [r7, #24]
  int index;

  for (i = 0; i < len; i++) {
 8041be4:	2300      	movs	r3, #0
 8041be6:	61fb      	str	r3, [r7, #28]
 8041be8:	e014      	b.n	8041c14 <streaming_median+0x44>
    if (0 != ages[i])
 8041bea:	69fb      	ldr	r3, [r7, #28]
 8041bec:	009b      	lsls	r3, r3, #2
 8041bee:	687a      	ldr	r2, [r7, #4]
 8041bf0:	4413      	add	r3, r2
 8041bf2:	681b      	ldr	r3, [r3, #0]
 8041bf4:	2b00      	cmp	r3, #0
 8041bf6:	d007      	beq.n	8041c08 <streaming_median+0x38>
      ages[i]++;      // An age of '0' means there is not a valid value for that index
 8041bf8:	69fb      	ldr	r3, [r7, #28]
 8041bfa:	009b      	lsls	r3, r3, #2
 8041bfc:	687a      	ldr	r2, [r7, #4]
 8041bfe:	4413      	add	r3, r2
 8041c00:	681a      	ldr	r2, [r3, #0]
 8041c02:	3201      	adds	r2, #1
 8041c04:	601a      	str	r2, [r3, #0]
 8041c06:	e002      	b.n	8041c0e <streaming_median+0x3e>
    else
      num_valid--;    // We have one fewer valid values than initially assumed
 8041c08:	69bb      	ldr	r3, [r7, #24]
 8041c0a:	3b01      	subs	r3, #1
 8041c0c:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < len; i++) {
 8041c0e:	69fb      	ldr	r3, [r7, #28]
 8041c10:	3301      	adds	r3, #1
 8041c12:	61fb      	str	r3, [r7, #28]
 8041c14:	69fa      	ldr	r2, [r7, #28]
 8041c16:	683b      	ldr	r3, [r7, #0]
 8041c18:	429a      	cmp	r2, r3
 8041c1a:	dbe6      	blt.n	8041bea <streaming_median+0x1a>
  }                   // All of the values are now older by one sample

  index = get_insertion_index(ages, len);    // We want to replace the oldest value with our new value
 8041c1c:	6839      	ldr	r1, [r7, #0]
 8041c1e:	6878      	ldr	r0, [r7, #4]
 8041c20:	f7ff ffae 	bl	8041b80 <get_insertion_index>
 8041c24:	6178      	str	r0, [r7, #20]
  ages[index] = 1;                           // Indicate that the value at index 'index' is new - '1' is the lowest valid age
 8041c26:	697b      	ldr	r3, [r7, #20]
 8041c28:	009b      	lsls	r3, r3, #2
 8041c2a:	687a      	ldr	r2, [r7, #4]
 8041c2c:	4413      	add	r3, r2
 8041c2e:	2201      	movs	r2, #1
 8041c30:	601a      	str	r2, [r3, #0]
  values[index] = new_val;                   // Store the new value in it's proper location
 8041c32:	697b      	ldr	r3, [r7, #20]
 8041c34:	009b      	lsls	r3, r3, #2
 8041c36:	68ba      	ldr	r2, [r7, #8]
 8041c38:	4413      	add	r3, r2
 8041c3a:	68fa      	ldr	r2, [r7, #12]
 8041c3c:	601a      	str	r2, [r3, #0]
  if (num_valid < len)
 8041c3e:	69ba      	ldr	r2, [r7, #24]
 8041c40:	683b      	ldr	r3, [r7, #0]
 8041c42:	429a      	cmp	r2, r3
 8041c44:	da22      	bge.n	8041c8c <streaming_median+0xbc>
    num_valid++;                             // We just replaced an invalid value index
 8041c46:	69bb      	ldr	r3, [r7, #24]
 8041c48:	3301      	adds	r3, #1
 8041c4a:	61bb      	str	r3, [r7, #24]

  while ((index > 0) && (values[index] > values[index - 1])) {
 8041c4c:	e01e      	b.n	8041c8c <streaming_median+0xbc>
    swapfloat(&values[index], &values[index - 1]);    // Swap the values
 8041c4e:	697b      	ldr	r3, [r7, #20]
 8041c50:	009b      	lsls	r3, r3, #2
 8041c52:	68ba      	ldr	r2, [r7, #8]
 8041c54:	18d0      	adds	r0, r2, r3
 8041c56:	697b      	ldr	r3, [r7, #20]
 8041c58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8041c5c:	3b01      	subs	r3, #1
 8041c5e:	009b      	lsls	r3, r3, #2
 8041c60:	68ba      	ldr	r2, [r7, #8]
 8041c62:	4413      	add	r3, r2
 8041c64:	4619      	mov	r1, r3
 8041c66:	f7ff ff76 	bl	8041b56 <swapfloat>
    swapint(&ages[index], &ages[index - 1]);          // Swap the ages corresponding to each value
 8041c6a:	697b      	ldr	r3, [r7, #20]
 8041c6c:	009b      	lsls	r3, r3, #2
 8041c6e:	687a      	ldr	r2, [r7, #4]
 8041c70:	18d0      	adds	r0, r2, r3
 8041c72:	697b      	ldr	r3, [r7, #20]
 8041c74:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8041c78:	3b01      	subs	r3, #1
 8041c7a:	009b      	lsls	r3, r3, #2
 8041c7c:	687a      	ldr	r2, [r7, #4]
 8041c7e:	4413      	add	r3, r2
 8041c80:	4619      	mov	r1, r3
 8041c82:	f7ff ff53 	bl	8041b2c <swapint>
    index--;                                          // Now check the next value down
 8041c86:	697b      	ldr	r3, [r7, #20]
 8041c88:	3b01      	subs	r3, #1
 8041c8a:	617b      	str	r3, [r7, #20]
  while ((index > 0) && (values[index] > values[index - 1])) {
 8041c8c:	697b      	ldr	r3, [r7, #20]
 8041c8e:	2b00      	cmp	r3, #0
 8041c90:	dd2f      	ble.n	8041cf2 <streaming_median+0x122>
 8041c92:	697b      	ldr	r3, [r7, #20]
 8041c94:	009b      	lsls	r3, r3, #2
 8041c96:	68ba      	ldr	r2, [r7, #8]
 8041c98:	4413      	add	r3, r2
 8041c9a:	ed93 7a00 	vldr	s14, [r3]
 8041c9e:	697b      	ldr	r3, [r7, #20]
 8041ca0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8041ca4:	3b01      	subs	r3, #1
 8041ca6:	009b      	lsls	r3, r3, #2
 8041ca8:	68ba      	ldr	r2, [r7, #8]
 8041caa:	4413      	add	r3, r2
 8041cac:	edd3 7a00 	vldr	s15, [r3]
 8041cb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8041cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8041cb8:	dcc9      	bgt.n	8041c4e <streaming_median+0x7e>
  }

  while ((index < len - 1) && (values[index] < values[index + 1])) {
 8041cba:	e01a      	b.n	8041cf2 <streaming_median+0x122>
    swapfloat(&values[index], &values[index + 1]);    // Swap the values
 8041cbc:	697b      	ldr	r3, [r7, #20]
 8041cbe:	009b      	lsls	r3, r3, #2
 8041cc0:	68ba      	ldr	r2, [r7, #8]
 8041cc2:	18d0      	adds	r0, r2, r3
 8041cc4:	697b      	ldr	r3, [r7, #20]
 8041cc6:	3301      	adds	r3, #1
 8041cc8:	009b      	lsls	r3, r3, #2
 8041cca:	68ba      	ldr	r2, [r7, #8]
 8041ccc:	4413      	add	r3, r2
 8041cce:	4619      	mov	r1, r3
 8041cd0:	f7ff ff41 	bl	8041b56 <swapfloat>
    swapint(&ages[index], &ages[index + 1]);          // Swap the ages corresponding to each value
 8041cd4:	697b      	ldr	r3, [r7, #20]
 8041cd6:	009b      	lsls	r3, r3, #2
 8041cd8:	687a      	ldr	r2, [r7, #4]
 8041cda:	18d0      	adds	r0, r2, r3
 8041cdc:	697b      	ldr	r3, [r7, #20]
 8041cde:	3301      	adds	r3, #1
 8041ce0:	009b      	lsls	r3, r3, #2
 8041ce2:	687a      	ldr	r2, [r7, #4]
 8041ce4:	4413      	add	r3, r2
 8041ce6:	4619      	mov	r1, r3
 8041ce8:	f7ff ff20 	bl	8041b2c <swapint>
    index++;                                          // Now check the next value up
 8041cec:	697b      	ldr	r3, [r7, #20]
 8041cee:	3301      	adds	r3, #1
 8041cf0:	617b      	str	r3, [r7, #20]
  while ((index < len - 1) && (values[index] < values[index + 1])) {
 8041cf2:	683b      	ldr	r3, [r7, #0]
 8041cf4:	3b01      	subs	r3, #1
 8041cf6:	697a      	ldr	r2, [r7, #20]
 8041cf8:	429a      	cmp	r2, r3
 8041cfa:	da11      	bge.n	8041d20 <streaming_median+0x150>
 8041cfc:	697b      	ldr	r3, [r7, #20]
 8041cfe:	009b      	lsls	r3, r3, #2
 8041d00:	68ba      	ldr	r2, [r7, #8]
 8041d02:	4413      	add	r3, r2
 8041d04:	ed93 7a00 	vldr	s14, [r3]
 8041d08:	697b      	ldr	r3, [r7, #20]
 8041d0a:	3301      	adds	r3, #1
 8041d0c:	009b      	lsls	r3, r3, #2
 8041d0e:	68ba      	ldr	r2, [r7, #8]
 8041d10:	4413      	add	r3, r2
 8041d12:	edd3 7a00 	vldr	s15, [r3]
 8041d16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8041d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8041d1e:	d4cd      	bmi.n	8041cbc <streaming_median+0xec>
  }

  return (values[1]+values[2]+values[3]) / 3;
 8041d20:	68bb      	ldr	r3, [r7, #8]
 8041d22:	3304      	adds	r3, #4
 8041d24:	ed93 7a00 	vldr	s14, [r3]
 8041d28:	68bb      	ldr	r3, [r7, #8]
 8041d2a:	3308      	adds	r3, #8
 8041d2c:	edd3 7a00 	vldr	s15, [r3]
 8041d30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8041d34:	68bb      	ldr	r3, [r7, #8]
 8041d36:	330c      	adds	r3, #12
 8041d38:	edd3 7a00 	vldr	s15, [r3]
 8041d3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8041d40:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8041d44:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8041d48:	eef0 7a66 	vmov.f32	s15, s13
}
 8041d4c:	eeb0 0a67 	vmov.f32	s0, s15
 8041d50:	3720      	adds	r7, #32
 8041d52:	46bd      	mov	sp, r7
 8041d54:	bd80      	pop	{r7, pc}
	...

08041d58 <bf2092_platform_write>:
 * @param  len       number of consecutive register to write
 *
 */
static int32_t bf2092_platform_write(void *handle, uint8_t reg, uint8_t * bufp,
                                     uint16_t len)
{
 8041d58:	b580      	push	{r7, lr}
 8041d5a:	b088      	sub	sp, #32
 8041d5c:	af04      	add	r7, sp, #16
 8041d5e:	60f8      	str	r0, [r7, #12]
 8041d60:	607a      	str	r2, [r7, #4]
 8041d62:	461a      	mov	r2, r3
 8041d64:	460b      	mov	r3, r1
 8041d66:	72fb      	strb	r3, [r7, #11]
 8041d68:	4613      	mov	r3, r2
 8041d6a:	813b      	strh	r3, [r7, #8]
  if (handle == &optical_init_parms->i2c_handle) {
 8041d6c:	4b0c      	ldr	r3, [pc, #48]	; (8041da0 <bf2092_platform_write+0x48>)
 8041d6e:	681b      	ldr	r3, [r3, #0]
 8041d70:	3304      	adds	r3, #4
 8041d72:	68fa      	ldr	r2, [r7, #12]
 8041d74:	429a      	cmp	r2, r3
 8041d76:	d10d      	bne.n	8041d94 <bf2092_platform_write+0x3c>
    //printf("start i2c write, \r\n");
    HAL_I2C_Mem_Write(handle, (uint16_t) BF2092_I2C_COMUNICATE_ADD, reg,
 8041d78:	7afb      	ldrb	r3, [r7, #11]
 8041d7a:	b29a      	uxth	r2, r3
 8041d7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8041d80:	9302      	str	r3, [sp, #8]
 8041d82:	893b      	ldrh	r3, [r7, #8]
 8041d84:	9301      	str	r3, [sp, #4]
 8041d86:	687b      	ldr	r3, [r7, #4]
 8041d88:	9300      	str	r3, [sp, #0]
 8041d8a:	2301      	movs	r3, #1
 8041d8c:	21dc      	movs	r1, #220	; 0xdc
 8041d8e:	68f8      	ldr	r0, [r7, #12]
 8041d90:	f010 f914 	bl	8051fbc <HAL_I2C_Mem_Write>
                      I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  }

  return 0;
 8041d94:	2300      	movs	r3, #0
}
 8041d96:	4618      	mov	r0, r3
 8041d98:	3710      	adds	r7, #16
 8041d9a:	46bd      	mov	sp, r7
 8041d9c:	bd80      	pop	{r7, pc}
 8041d9e:	bf00      	nop
 8041da0:	20007ee0 	.word	0x20007ee0

08041da4 <bf2092_platform_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t bf2092_platform_read(void *handle, uint8_t reg, uint8_t * bufp,
                                    uint16_t len)
{
 8041da4:	b580      	push	{r7, lr}
 8041da6:	b088      	sub	sp, #32
 8041da8:	af04      	add	r7, sp, #16
 8041daa:	60f8      	str	r0, [r7, #12]
 8041dac:	607a      	str	r2, [r7, #4]
 8041dae:	461a      	mov	r2, r3
 8041db0:	460b      	mov	r3, r1
 8041db2:	72fb      	strb	r3, [r7, #11]
 8041db4:	4613      	mov	r3, r2
 8041db6:	813b      	strh	r3, [r7, #8]
  if (handle == &optical_init_parms->i2c_handle) {
 8041db8:	4b0c      	ldr	r3, [pc, #48]	; (8041dec <bf2092_platform_read+0x48>)
 8041dba:	681b      	ldr	r3, [r3, #0]
 8041dbc:	3304      	adds	r3, #4
 8041dbe:	68fa      	ldr	r2, [r7, #12]
 8041dc0:	429a      	cmp	r2, r3
 8041dc2:	d10d      	bne.n	8041de0 <bf2092_platform_read+0x3c>
    //printf("start i2c read, \r\n");
    HAL_I2C_Mem_Read(handle, (uint16_t) BF2092_I2C_COMUNICATE_ADD, reg,
 8041dc4:	7afb      	ldrb	r3, [r7, #11]
 8041dc6:	b29a      	uxth	r2, r3
 8041dc8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8041dcc:	9302      	str	r3, [sp, #8]
 8041dce:	893b      	ldrh	r3, [r7, #8]
 8041dd0:	9301      	str	r3, [sp, #4]
 8041dd2:	687b      	ldr	r3, [r7, #4]
 8041dd4:	9300      	str	r3, [sp, #0]
 8041dd6:	2301      	movs	r3, #1
 8041dd8:	21dc      	movs	r1, #220	; 0xdc
 8041dda:	68f8      	ldr	r0, [r7, #12]
 8041ddc:	f010 f9e8 	bl	80521b0 <HAL_I2C_Mem_Read>
                     I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  }

  return 0;
 8041de0:	2300      	movs	r3, #0
}
 8041de2:	4618      	mov	r0, r3
 8041de4:	3710      	adds	r7, #16
 8041de6:	46bd      	mov	sp, r7
 8041de8:	bd80      	pop	{r7, pc}
 8041dea:	bf00      	nop
 8041dec:	20007ee0 	.word	0x20007ee0

08041df0 <bf2092_driver_reset>:
 * NAME       : bf2092_driver_reset
 * FUNCTION   : reset bf2092 register
 * REMARKS    :
 *****************************************************************************/
static int bf2092_driver_reset(stmdev_ctx_t * ctx)
{
 8041df0:	b580      	push	{r7, lr}
 8041df2:	b084      	sub	sp, #16
 8041df4:	af00      	add	r7, sp, #0
 8041df6:	6078      	str	r0, [r7, #4]
  int result = 0;
 8041df8:	2300      	movs	r3, #0
 8041dfa:	60fb      	str	r3, [r7, #12]
  /* set soft reset */
  uint8_t reset_value = 0x01;
 8041dfc:	2301      	movs	r3, #1
 8041dfe:	72fb      	strb	r3, [r7, #11]
  bf2092_platform_write(ctx->handle, RESET_REG, &reset_value, 1);
 8041e00:	687b      	ldr	r3, [r7, #4]
 8041e02:	6898      	ldr	r0, [r3, #8]
 8041e04:	f107 020b 	add.w	r2, r7, #11
 8041e08:	2301      	movs	r3, #1
 8041e0a:	21f2      	movs	r1, #242	; 0xf2
 8041e0c:	f7ff ffa4 	bl	8041d58 <bf2092_platform_write>
  return (result);
 8041e10:	68fb      	ldr	r3, [r7, #12]
}
 8041e12:	4618      	mov	r0, r3
 8041e14:	3710      	adds	r7, #16
 8041e16:	46bd      	mov	sp, r7
 8041e18:	bd80      	pop	{r7, pc}

08041e1a <bf2092_check_raw_data_quality>:

static int bf2092_check_raw_data_quality(stmdev_ctx_t * ctx)
{
 8041e1a:	b580      	push	{r7, lr}
 8041e1c:	b084      	sub	sp, #16
 8041e1e:	af00      	add	r7, sp, #0
 8041e20:	6078      	str	r0, [r7, #4]
  uint8_t imagequality;
  bf2092_platform_read(ctx->handle, IMAGE_Q_REG, &imagequality, 1);
 8041e22:	687b      	ldr	r3, [r7, #4]
 8041e24:	6898      	ldr	r0, [r3, #8]
 8041e26:	f107 020f 	add.w	r2, r7, #15
 8041e2a:	2301      	movs	r3, #1
 8041e2c:	2157      	movs	r1, #87	; 0x57
 8041e2e:	f7ff ffb9 	bl	8041da4 <bf2092_platform_read>
  if (imagequality < 5)
 8041e32:	7bfb      	ldrb	r3, [r7, #15]
 8041e34:	2b04      	cmp	r3, #4
 8041e36:	d802      	bhi.n	8041e3e <bf2092_check_raw_data_quality+0x24>
    return -1;
 8041e38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8041e3c:	e00e      	b.n	8041e5c <bf2092_check_raw_data_quality+0x42>
  uint8_t lightquality;
  bf2092_platform_read(ctx->handle, LIGHT_Q_REG, &lightquality, 1);
 8041e3e:	687b      	ldr	r3, [r7, #4]
 8041e40:	6898      	ldr	r0, [r3, #8]
 8041e42:	f107 020e 	add.w	r2, r7, #14
 8041e46:	2301      	movs	r3, #1
 8041e48:	21a1      	movs	r1, #161	; 0xa1
 8041e4a:	f7ff ffab 	bl	8041da4 <bf2092_platform_read>
  if (lightquality < 10)
 8041e4e:	7bbb      	ldrb	r3, [r7, #14]
 8041e50:	2b09      	cmp	r3, #9
 8041e52:	d802      	bhi.n	8041e5a <bf2092_check_raw_data_quality+0x40>
    return -1;
 8041e54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8041e58:	e000      	b.n	8041e5c <bf2092_check_raw_data_quality+0x42>
  return 0;
 8041e5a:	2300      	movs	r3, #0
}
 8041e5c:	4618      	mov	r0, r3
 8041e5e:	3710      	adds	r7, #16
 8041e60:	46bd      	mov	sp, r7
 8041e62:	bd80      	pop	{r7, pc}

08041e64 <bf2092_get_raw_data>:

static void bf2092_get_raw_data(stmdev_ctx_t * ctx)
{
 8041e64:	b580      	push	{r7, lr}
 8041e66:	b084      	sub	sp, #16
 8041e68:	af00      	add	r7, sp, #0
 8041e6a:	6078      	str	r0, [r7, #4]
  uint8_t dataready;
  bf2092_platform_read(ctx->handle, DATA_READY_REG, &dataready, 1);
 8041e6c:	687b      	ldr	r3, [r7, #4]
 8041e6e:	6898      	ldr	r0, [r3, #8]
 8041e70:	f107 020f 	add.w	r2, r7, #15
 8041e74:	2301      	movs	r3, #1
 8041e76:	2153      	movs	r1, #83	; 0x53
 8041e78:	f7ff ff94 	bl	8041da4 <bf2092_platform_read>
  if (dataready & HIGHESTBITMASK) {     //check bit7, if 1, data ready, if 0 not ready
 8041e7c:	7bfb      	ldrb	r3, [r7, #15]
 8041e7e:	b25b      	sxtb	r3, r3
 8041e80:	2b00      	cmp	r3, #0
 8041e82:	da1e      	bge.n	8041ec2 <bf2092_get_raw_data+0x5e>
    bf2092_platform_read(ctx->handle, DATA_X_REG, &bf2092_raw_data[0], 1);
 8041e84:	687b      	ldr	r3, [r7, #4]
 8041e86:	6898      	ldr	r0, [r3, #8]
 8041e88:	2301      	movs	r3, #1
 8041e8a:	4a11      	ldr	r2, [pc, #68]	; (8041ed0 <bf2092_get_raw_data+0x6c>)
 8041e8c:	2154      	movs	r1, #84	; 0x54
 8041e8e:	f7ff ff89 	bl	8041da4 <bf2092_platform_read>
    bf2092_platform_read(ctx->handle, DATA_Y_REG, &bf2092_raw_data[1], 1);
 8041e92:	687b      	ldr	r3, [r7, #4]
 8041e94:	6898      	ldr	r0, [r3, #8]
 8041e96:	2301      	movs	r3, #1
 8041e98:	4a0e      	ldr	r2, [pc, #56]	; (8041ed4 <bf2092_get_raw_data+0x70>)
 8041e9a:	2155      	movs	r1, #85	; 0x55
 8041e9c:	f7ff ff82 	bl	8041da4 <bf2092_platform_read>
    is_env_good = bf2092_check_raw_data_quality(ctx);
 8041ea0:	6878      	ldr	r0, [r7, #4]
 8041ea2:	f7ff ffba 	bl	8041e1a <bf2092_check_raw_data_quality>
 8041ea6:	4603      	mov	r3, r0
 8041ea8:	4a0b      	ldr	r2, [pc, #44]	; (8041ed8 <bf2092_get_raw_data+0x74>)
 8041eaa:	6013      	str	r3, [r2, #0]
    if (is_env_good < 0) {
 8041eac:	4b0a      	ldr	r3, [pc, #40]	; (8041ed8 <bf2092_get_raw_data+0x74>)
 8041eae:	681b      	ldr	r3, [r3, #0]
 8041eb0:	2b00      	cmp	r3, #0
 8041eb2:	da09      	bge.n	8041ec8 <bf2092_get_raw_data+0x64>
      bf2092_raw_data[0] = 0;
 8041eb4:	4b06      	ldr	r3, [pc, #24]	; (8041ed0 <bf2092_get_raw_data+0x6c>)
 8041eb6:	2200      	movs	r2, #0
 8041eb8:	701a      	strb	r2, [r3, #0]
      bf2092_raw_data[1] = 0;
 8041eba:	4b05      	ldr	r3, [pc, #20]	; (8041ed0 <bf2092_get_raw_data+0x6c>)
 8041ebc:	2200      	movs	r2, #0
 8041ebe:	705a      	strb	r2, [r3, #1]
 8041ec0:	e002      	b.n	8041ec8 <bf2092_get_raw_data+0x64>
/* 		if ((bf2092_raw_data[0]&(~HIGHESTBITMASK)) < 3)
			bf2092_raw_data[0] = 0;
		if ((bf2092_raw_data[1]&(~HIGHESTBITMASK)) < 3)
			bf2092_raw_data[1] = 0;*/
  } else
    printf("bf2092 data not ready!!!\r\n");
 8041ec2:	4806      	ldr	r0, [pc, #24]	; (8041edc <bf2092_get_raw_data+0x78>)
 8041ec4:	f01e fdf2 	bl	8060aac <puts>
}
 8041ec8:	3710      	adds	r7, #16
 8041eca:	46bd      	mov	sp, r7
 8041ecc:	bd80      	pop	{r7, pc}
 8041ece:	bf00      	nop
 8041ed0:	20007ed0 	.word	0x20007ed0
 8041ed4:	20007ed1 	.word	0x20007ed1
 8041ed8:	20007000 	.word	0x20007000
 8041edc:	08064da0 	.word	0x08064da0

08041ee0 <bf2092_init_client>:

/*************** Initialze Functions ******************/
static int bf2092_init_client(stmdev_ctx_t * ctx)
{
 8041ee0:	b580      	push	{r7, lr}
 8041ee2:	b084      	sub	sp, #16
 8041ee4:	af00      	add	r7, sp, #0
 8041ee6:	6078      	str	r0, [r7, #4]
  int result = 0;
 8041ee8:	2300      	movs	r3, #0
 8041eea:	60fb      	str	r3, [r7, #12]
  uint8_t tmp = 0x00;
 8041eec:	2300      	movs	r3, #0
 8041eee:	72fb      	strb	r3, [r7, #11]
  bf2092_platform_write(ctx->handle, COM7, &tmp, 1);
 8041ef0:	687b      	ldr	r3, [r7, #4]
 8041ef2:	6898      	ldr	r0, [r3, #8]
 8041ef4:	f107 020b 	add.w	r2, r7, #11
 8041ef8:	2301      	movs	r3, #1
 8041efa:	2107      	movs	r1, #7
 8041efc:	f7ff ff2c 	bl	8041d58 <bf2092_platform_write>
  tmp = 0x03;
 8041f00:	2303      	movs	r3, #3
 8041f02:	72fb      	strb	r3, [r7, #11]
  bf2092_platform_write(ctx->handle, ISPBYPS, &tmp, 1);
 8041f04:	687b      	ldr	r3, [r7, #4]
 8041f06:	6898      	ldr	r0, [r3, #8]
 8041f08:	f107 020b 	add.w	r2, r7, #11
 8041f0c:	2301      	movs	r3, #1
 8041f0e:	21f1      	movs	r1, #241	; 0xf1
 8041f10:	f7ff ff22 	bl	8041d58 <bf2092_platform_write>
  tmp = 0xa5;
 8041f14:	23a5      	movs	r3, #165	; 0xa5
 8041f16:	72fb      	strb	r3, [r7, #11]
  bf2092_platform_write(ctx->handle, REG_CTR0, &tmp, 1);
 8041f18:	687b      	ldr	r3, [r7, #4]
 8041f1a:	6898      	ldr	r0, [r3, #8]
 8041f1c:	f107 020b 	add.w	r2, r7, #11
 8041f20:	2301      	movs	r3, #1
 8041f22:	21e0      	movs	r1, #224	; 0xe0
 8041f24:	f7ff ff18 	bl	8041d58 <bf2092_platform_write>
  tmp = 0x44;
 8041f28:	2344      	movs	r3, #68	; 0x44
 8041f2a:	72fb      	strb	r3, [r7, #11]
  bf2092_platform_write(ctx->handle, REG_CTR2, &tmp, 1);
 8041f2c:	687b      	ldr	r3, [r7, #4]
 8041f2e:	6898      	ldr	r0, [r3, #8]
 8041f30:	f107 020b 	add.w	r2, r7, #11
 8041f34:	2301      	movs	r3, #1
 8041f36:	21e2      	movs	r1, #226	; 0xe2
 8041f38:	f7ff ff0e 	bl	8041d58 <bf2092_platform_write>
  tmp = 0x24;
 8041f3c:	2324      	movs	r3, #36	; 0x24
 8041f3e:	72fb      	strb	r3, [r7, #11]
  bf2092_platform_write(ctx->handle, REG_CTR3, &tmp, 1);
 8041f40:	687b      	ldr	r3, [r7, #4]
 8041f42:	6898      	ldr	r0, [r3, #8]
 8041f44:	f107 020b 	add.w	r2, r7, #11
 8041f48:	2301      	movs	r3, #1
 8041f4a:	21e3      	movs	r1, #227	; 0xe3
 8041f4c:	f7ff ff04 	bl	8041d58 <bf2092_platform_write>
  tmp = 0x09;
 8041f50:	2309      	movs	r3, #9
 8041f52:	72fb      	strb	r3, [r7, #11]
  bf2092_platform_write(ctx->handle, REG_CTR4, &tmp, 1);
 8041f54:	687b      	ldr	r3, [r7, #4]
 8041f56:	6898      	ldr	r0, [r3, #8]
 8041f58:	f107 020b 	add.w	r2, r7, #11
 8041f5c:	2301      	movs	r3, #1
 8041f5e:	21e4      	movs	r1, #228	; 0xe4
 8041f60:	f7ff fefa 	bl	8041d58 <bf2092_platform_write>
  tmp = 0x7c;
 8041f64:	237c      	movs	r3, #124	; 0x7c
 8041f66:	72fb      	strb	r3, [r7, #11]
  bf2092_platform_write(ctx->handle, REG_CTR5, &tmp, 1);
 8041f68:	687b      	ldr	r3, [r7, #4]
 8041f6a:	6898      	ldr	r0, [r3, #8]
 8041f6c:	f107 020b 	add.w	r2, r7, #11
 8041f70:	2301      	movs	r3, #1
 8041f72:	21e5      	movs	r1, #229	; 0xe5
 8041f74:	f7ff fef0 	bl	8041d58 <bf2092_platform_write>
  tmp = 0x7e;
 8041f78:	237e      	movs	r3, #126	; 0x7e
 8041f7a:	72fb      	strb	r3, [r7, #11]
  bf2092_platform_write(ctx->handle, REG_CTR6, &tmp, 1);
 8041f7c:	687b      	ldr	r3, [r7, #4]
 8041f7e:	6898      	ldr	r0, [r3, #8]
 8041f80:	f107 020b 	add.w	r2, r7, #11
 8041f84:	2301      	movs	r3, #1
 8041f86:	21e6      	movs	r1, #230	; 0xe6
 8041f88:	f7ff fee6 	bl	8041d58 <bf2092_platform_write>
  tmp = 0xc0;
 8041f8c:	23c0      	movs	r3, #192	; 0xc0
 8041f8e:	72fb      	strb	r3, [r7, #11]
  bf2092_platform_write(ctx->handle, REG_CTR7, &tmp, 1);
 8041f90:	687b      	ldr	r3, [r7, #4]
 8041f92:	6898      	ldr	r0, [r3, #8]
 8041f94:	f107 020b 	add.w	r2, r7, #11
 8041f98:	2301      	movs	r3, #1
 8041f9a:	21e7      	movs	r1, #231	; 0xe7
 8041f9c:	f7ff fedc 	bl	8041d58 <bf2092_platform_write>
  tmp = 0x12;
 8041fa0:	2312      	movs	r3, #18
 8041fa2:	72fb      	strb	r3, [r7, #11]
  bf2092_platform_write(ctx->handle, DIN_SET1, &tmp, 1);
 8041fa4:	687b      	ldr	r3, [r7, #4]
 8041fa6:	6898      	ldr	r0, [r3, #8]
 8041fa8:	f107 020b 	add.w	r2, r7, #11
 8041fac:	2301      	movs	r3, #1
 8041fae:	2118      	movs	r1, #24
 8041fb0:	f7ff fed2 	bl	8041d58 <bf2092_platform_write>
  tmp = 0x23;
 8041fb4:	2323      	movs	r3, #35	; 0x23
 8041fb6:	72fb      	strb	r3, [r7, #11]
  bf2092_platform_write(ctx->handle, COUTER3, &tmp, 1);
 8041fb8:	687b      	ldr	r3, [r7, #4]
 8041fba:	6898      	ldr	r0, [r3, #8]
 8041fbc:	f107 020b 	add.w	r2, r7, #11
 8041fc0:	2301      	movs	r3, #1
 8041fc2:	2166      	movs	r1, #102	; 0x66
 8041fc4:	f7ff fec8 	bl	8041d58 <bf2092_platform_write>
  tmp = 0x24;
 8041fc8:	2324      	movs	r3, #36	; 0x24
 8041fca:	72fb      	strb	r3, [r7, #11]
  bf2092_platform_write(ctx->handle, COUTER9, &tmp, 1);
 8041fcc:	687b      	ldr	r3, [r7, #4]
 8041fce:	6898      	ldr	r0, [r3, #8]
 8041fd0:	f107 020b 	add.w	r2, r7, #11
 8041fd4:	2301      	movs	r3, #1
 8041fd6:	216c      	movs	r1, #108	; 0x6c
 8041fd8:	f7ff febe 	bl	8041d58 <bf2092_platform_write>
  tmp = 0x25;
 8041fdc:	2325      	movs	r3, #37	; 0x25
 8041fde:	72fb      	strb	r3, [r7, #11]
  bf2092_platform_write(ctx->handle, COUTER10, &tmp, 1);
 8041fe0:	687b      	ldr	r3, [r7, #4]
 8041fe2:	6898      	ldr	r0, [r3, #8]
 8041fe4:	f107 020b 	add.w	r2, r7, #11
 8041fe8:	2301      	movs	r3, #1
 8041fea:	216d      	movs	r1, #109	; 0x6d
 8041fec:	f7ff feb4 	bl	8041d58 <bf2092_platform_write>
  tmp = 0x06;
 8041ff0:	2306      	movs	r3, #6
 8041ff2:	72fb      	strb	r3, [r7, #11]
  bf2092_platform_write(ctx->handle, INT_TIM_TH, &tmp, 1);
 8041ff4:	687b      	ldr	r3, [r7, #4]
 8041ff6:	6898      	ldr	r0, [r3, #8]
 8041ff8:	f107 020b 	add.w	r2, r7, #11
 8041ffc:	2301      	movs	r3, #1
 8041ffe:	21b3      	movs	r1, #179	; 0xb3
 8042000:	f7ff feaa 	bl	8041d58 <bf2092_platform_write>
  tmp = 0x00;
 8042004:	2300      	movs	r3, #0
 8042006:	72fb      	strb	r3, [r7, #11]
  bf2092_platform_write(ctx->handle, BPS_PARAH, &tmp, 1);
 8042008:	687b      	ldr	r3, [r7, #4]
 804200a:	6898      	ldr	r0, [r3, #8]
 804200c:	f107 020b 	add.w	r2, r7, #11
 8042010:	2301      	movs	r3, #1
 8042012:	21d3      	movs	r1, #211	; 0xd3
 8042014:	f7ff fea0 	bl	8041d58 <bf2092_platform_write>
  tmp = 0xe4;
 8042018:	23e4      	movs	r3, #228	; 0xe4
 804201a:	72fb      	strb	r3, [r7, #11]
  bf2092_platform_write(ctx->handle, BPS_PARAL, &tmp, 1);
 804201c:	687b      	ldr	r3, [r7, #4]
 804201e:	6898      	ldr	r0, [r3, #8]
 8042020:	f107 020b 	add.w	r2, r7, #11
 8042024:	2301      	movs	r3, #1
 8042026:	21d4      	movs	r1, #212	; 0xd4
 8042028:	f7ff fe96 	bl	8041d58 <bf2092_platform_write>
  tmp = 0x08;
 804202c:	2308      	movs	r3, #8
 804202e:	72fb      	strb	r3, [r7, #11]
  bf2092_platform_write(ctx->handle, UART_REG, &tmp, 1);
 8042030:	687b      	ldr	r3, [r7, #4]
 8042032:	6898      	ldr	r0, [r3, #8]
 8042034:	f107 020b 	add.w	r2, r7, #11
 8042038:	2301      	movs	r3, #1
 804203a:	215c      	movs	r1, #92	; 0x5c
 804203c:	f7ff fe8c 	bl	8041d58 <bf2092_platform_write>
  tmp = 0x40;
 8042040:	2340      	movs	r3, #64	; 0x40
 8042042:	72fb      	strb	r3, [r7, #11]
  bf2092_platform_write(ctx->handle, SC_CNTL1, &tmp, 1);
 8042044:	687b      	ldr	r3, [r7, #4]
 8042046:	6898      	ldr	r0, [r3, #8]
 8042048:	f107 020b 	add.w	r2, r7, #11
 804204c:	2301      	movs	r3, #1
 804204e:	2101      	movs	r1, #1
 8042050:	f7ff fe82 	bl	8041d58 <bf2092_platform_write>
  tmp = 0xb3;
 8042054:	23b3      	movs	r3, #179	; 0xb3
 8042056:	72fb      	strb	r3, [r7, #11]
  bf2092_platform_write(ctx->handle, MODE_CNTL, &tmp, 1);
 8042058:	687b      	ldr	r3, [r7, #4]
 804205a:	6898      	ldr	r0, [r3, #8]
 804205c:	f107 020b 	add.w	r2, r7, #11
 8042060:	2301      	movs	r3, #1
 8042062:	212a      	movs	r1, #42	; 0x2a
 8042064:	f7ff fe78 	bl	8041d58 <bf2092_platform_write>
  tmp = 0x01;
 8042068:	2301      	movs	r3, #1
 804206a:	72fb      	strb	r3, [r7, #11]
  bf2092_platform_write(ctx->handle, INT_MAX_I2C, &tmp, 1);
 804206c:	687b      	ldr	r3, [r7, #4]
 804206e:	6898      	ldr	r0, [r3, #8]
 8042070:	f107 020b 	add.w	r2, r7, #11
 8042074:	2301      	movs	r3, #1
 8042076:	21a6      	movs	r1, #166	; 0xa6
 8042078:	f7ff fe6e 	bl	8041d58 <bf2092_platform_write>
  tmp = 0xca;
 804207c:	23ca      	movs	r3, #202	; 0xca
 804207e:	72fb      	strb	r3, [r7, #11]
  bf2092_platform_write(ctx->handle, INT_STEP_50, &tmp, 1);
 8042080:	687b      	ldr	r3, [r7, #4]
 8042082:	6898      	ldr	r0, [r3, #8]
 8042084:	f107 020b 	add.w	r2, r7, #11
 8042088:	2301      	movs	r3, #1
 804208a:	21a8      	movs	r1, #168	; 0xa8
 804208c:	f7ff fe64 	bl	8041d58 <bf2092_platform_write>
  tmp = 0xd6;
 8042090:	23d6      	movs	r3, #214	; 0xd6
 8042092:	72fb      	strb	r3, [r7, #11]
  bf2092_platform_write(ctx->handle, INT_STEP_60, &tmp, 1);
 8042094:	687b      	ldr	r3, [r7, #4]
 8042096:	6898      	ldr	r0, [r3, #8]
 8042098:	f107 020b 	add.w	r2, r7, #11
 804209c:	2301      	movs	r3, #1
 804209e:	21a9      	movs	r1, #169	; 0xa9
 80420a0:	f7ff fe5a 	bl	8041d58 <bf2092_platform_write>
  tmp = 0x19;
 80420a4:	2319      	movs	r3, #25
 80420a6:	72fb      	strb	r3, [r7, #11]
  bf2092_platform_write(ctx->handle, DM_ROWL_AF_PIX, &tmp, 1);
 80420a8:	687b      	ldr	r3, [r7, #4]
 80420aa:	6898      	ldr	r0, [r3, #8]
 80420ac:	f107 020b 	add.w	r2, r7, #11
 80420b0:	2301      	movs	r3, #1
 80420b2:	2105      	movs	r1, #5
 80420b4:	f7ff fe50 	bl	8041d58 <bf2092_platform_write>
  tmp = 0xff;
 80420b8:	23ff      	movs	r3, #255	; 0xff
 80420ba:	72fb      	strb	r3, [r7, #11]
  bf2092_platform_write(ctx->handle, GLB_MAX3, &tmp, 1);
 80420bc:	687b      	ldr	r3, [r7, #4]
 80420be:	6898      	ldr	r0, [r3, #8]
 80420c0:	f107 020b 	add.w	r2, r7, #11
 80420c4:	2301      	movs	r3, #1
 80420c6:	21b9      	movs	r1, #185	; 0xb9
 80420c8:	f7ff fe46 	bl	8041d58 <bf2092_platform_write>
  tmp = 0xf4;
 80420cc:	23f4      	movs	r3, #244	; 0xf4
 80420ce:	72fb      	strb	r3, [r7, #11]
  bf2092_platform_write(ctx->handle, SPEED_PLL, &tmp, 1);
 80420d0:	687b      	ldr	r3, [r7, #4]
 80420d2:	6898      	ldr	r0, [r3, #8]
 80420d4:	f107 020b 	add.w	r2, r7, #11
 80420d8:	2301      	movs	r3, #1
 80420da:	21e1      	movs	r1, #225	; 0xe1
 80420dc:	f7ff fe3c 	bl	8041d58 <bf2092_platform_write>

  return (result);
 80420e0:	68fb      	ldr	r3, [r7, #12]
}
 80420e2:	4618      	mov	r0, r3
 80420e4:	3710      	adds	r7, #16
 80420e6:	46bd      	mov	sp, r7
 80420e8:	bd80      	pop	{r7, pc}
	...

080420ec <bf2092_optical_init>:

/*
 * @brief  platform specific initialization (platform dependent)
 */
int bf2092_optical_init(void *para, void *para2)
{
 80420ec:	b580      	push	{r7, lr}
 80420ee:	b084      	sub	sp, #16
 80420f0:	af00      	add	r7, sp, #0
 80420f2:	6078      	str	r0, [r7, #4]
 80420f4:	6039      	str	r1, [r7, #0]
  optical_init_parms = (platform_prams *) para;
 80420f6:	4a23      	ldr	r2, [pc, #140]	; (8042184 <bf2092_optical_init+0x98>)
 80420f8:	687b      	ldr	r3, [r7, #4]
 80420fa:	6013      	str	r3, [r2, #0]
  /* Initialize mems driver interface */
  optical_dev_ctx.write_reg = bf2092_platform_write;
 80420fc:	4b22      	ldr	r3, [pc, #136]	; (8042188 <bf2092_optical_init+0x9c>)
 80420fe:	4a23      	ldr	r2, [pc, #140]	; (804218c <bf2092_optical_init+0xa0>)
 8042100:	601a      	str	r2, [r3, #0]
  optical_dev_ctx.read_reg = bf2092_platform_read;
 8042102:	4b21      	ldr	r3, [pc, #132]	; (8042188 <bf2092_optical_init+0x9c>)
 8042104:	4a22      	ldr	r2, [pc, #136]	; (8042190 <bf2092_optical_init+0xa4>)
 8042106:	605a      	str	r2, [r3, #4]
  optical_dev_ctx.handle = &optical_init_parms->i2c_handle;
 8042108:	4b1e      	ldr	r3, [pc, #120]	; (8042184 <bf2092_optical_init+0x98>)
 804210a:	681b      	ldr	r3, [r3, #0]
 804210c:	3304      	adds	r3, #4
 804210e:	4a1e      	ldr	r2, [pc, #120]	; (8042188 <bf2092_optical_init+0x9c>)
 8042110:	6093      	str	r3, [r2, #8]
  /* power up */
  HAL_GPIO_WritePin(GUANGLIU_EN_GPIO_Port, GUANGLIU_EN_Pin, GPIO_PIN_SET);
 8042112:	2201      	movs	r2, #1
 8042114:	2110      	movs	r1, #16
 8042116:	481f      	ldr	r0, [pc, #124]	; (8042194 <bf2092_optical_init+0xa8>)
 8042118:	f00f fab6 	bl	8051688 <HAL_GPIO_WritePin>
  osDelay(2);
 804211c:	2002      	movs	r0, #2
 804211e:	f013 ffec 	bl	80560fa <osDelay>
  /* Check device ID */
  uint8_t id_0, id_1;
  bf2092_platform_read(optical_dev_ctx.handle, (uint8_t) BF2092_REG_PART_ID_0,
 8042122:	4b19      	ldr	r3, [pc, #100]	; (8042188 <bf2092_optical_init+0x9c>)
 8042124:	6898      	ldr	r0, [r3, #8]
 8042126:	f107 020f 	add.w	r2, r7, #15
 804212a:	2301      	movs	r3, #1
 804212c:	21fc      	movs	r1, #252	; 0xfc
 804212e:	f7ff fe39 	bl	8041da4 <bf2092_platform_read>
                       &id_0, 1);

  bf2092_platform_read(optical_dev_ctx.handle, (uint8_t) BF2092_REG_PART_ID_1,
 8042132:	4b15      	ldr	r3, [pc, #84]	; (8042188 <bf2092_optical_init+0x9c>)
 8042134:	6898      	ldr	r0, [r3, #8]
 8042136:	f107 020e 	add.w	r2, r7, #14
 804213a:	2301      	movs	r3, #1
 804213c:	21fd      	movs	r1, #253	; 0xfd
 804213e:	f7ff fe31 	bl	8041da4 <bf2092_platform_read>
                       &id_1, 1);

  printf("bF2092 whoamI: 0x%x 0x%x %p \r\n", id_0, id_1,
 8042142:	7bfb      	ldrb	r3, [r7, #15]
 8042144:	4619      	mov	r1, r3
 8042146:	7bbb      	ldrb	r3, [r7, #14]
 8042148:	461a      	mov	r2, r3
 804214a:	4b0f      	ldr	r3, [pc, #60]	; (8042188 <bf2092_optical_init+0x9c>)
 804214c:	689b      	ldr	r3, [r3, #8]
 804214e:	4812      	ldr	r0, [pc, #72]	; (8042198 <bf2092_optical_init+0xac>)
 8042150:	f01e fc10 	bl	8060974 <iprintf>
         optical_dev_ctx.handle);

  if (id_0 != BF2092_REG_PART_ID_0_VALUE || id_1 != BF2092_REG_PART_ID_1_VALUE) {
 8042154:	7bfb      	ldrb	r3, [r7, #15]
 8042156:	2b20      	cmp	r3, #32
 8042158:	d102      	bne.n	8042160 <bf2092_optical_init+0x74>
 804215a:	7bbb      	ldrb	r3, [r7, #14]
 804215c:	2b92      	cmp	r3, #146	; 0x92
 804215e:	d005      	beq.n	804216c <bf2092_optical_init+0x80>
    printf("init failed for bf2092!\r\n");
 8042160:	480e      	ldr	r0, [pc, #56]	; (804219c <bf2092_optical_init+0xb0>)
 8042162:	f01e fca3 	bl	8060aac <puts>
    return SENSOR_FAILED;
 8042166:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 804216a:	e006      	b.n	804217a <bf2092_optical_init+0x8e>
  }
  // soft reset
  bf2092_driver_reset(&optical_dev_ctx);
 804216c:	4806      	ldr	r0, [pc, #24]	; (8042188 <bf2092_optical_init+0x9c>)
 804216e:	f7ff fe3f 	bl	8041df0 <bf2092_driver_reset>

  /* Restore default configuration */
  bf2092_init_client(&optical_dev_ctx);
 8042172:	4805      	ldr	r0, [pc, #20]	; (8042188 <bf2092_optical_init+0x9c>)
 8042174:	f7ff feb4 	bl	8041ee0 <bf2092_init_client>
  return SENSOR_SUCCESS;
 8042178:	2300      	movs	r3, #0
}
 804217a:	4618      	mov	r0, r3
 804217c:	3710      	adds	r7, #16
 804217e:	46bd      	mov	sp, r7
 8042180:	bd80      	pop	{r7, pc}
 8042182:	bf00      	nop
 8042184:	20007ee0 	.word	0x20007ee0
 8042188:	20007ed4 	.word	0x20007ed4
 804218c:	08041d59 	.word	0x08041d59
 8042190:	08041da5 	.word	0x08041da5
 8042194:	40020800 	.word	0x40020800
 8042198:	08064dbc 	.word	0x08064dbc
 804219c:	08064ddc 	.word	0x08064ddc

080421a0 <bf2092_enable>:

static int32_t bf2092_enable()
{
 80421a0:	b580      	push	{r7, lr}
 80421a2:	b082      	sub	sp, #8
 80421a4:	af00      	add	r7, sp, #0
  int32_t ret = 0;
 80421a6:	2300      	movs	r3, #0
 80421a8:	607b      	str	r3, [r7, #4]
  uint8_t STATUS;
  ret = bf2092_platform_read(&optical_dev_ctx, ENABLE_REG, &STATUS, 1);
 80421aa:	1cfa      	adds	r2, r7, #3
 80421ac:	2301      	movs	r3, #1
 80421ae:	21e7      	movs	r1, #231	; 0xe7
 80421b0:	4813      	ldr	r0, [pc, #76]	; (8042200 <bf2092_enable+0x60>)
 80421b2:	f7ff fdf7 	bl	8041da4 <bf2092_platform_read>
 80421b6:	6078      	str	r0, [r7, #4]
  if (sensor_activate_count == 0) {
 80421b8:	4b12      	ldr	r3, [pc, #72]	; (8042204 <bf2092_enable+0x64>)
 80421ba:	781b      	ldrb	r3, [r3, #0]
 80421bc:	2b00      	cmp	r3, #0
 80421be:	d113      	bne.n	80421e8 <bf2092_enable+0x48>
    if ((STATUS & 0x01) != 1) {
 80421c0:	78fb      	ldrb	r3, [r7, #3]
 80421c2:	f003 0301 	and.w	r3, r3, #1
 80421c6:	2b00      	cmp	r3, #0
 80421c8:	d10b      	bne.n	80421e2 <bf2092_enable+0x42>
      STATUS |= 0X01;           //bit 0 set to 1
 80421ca:	78fb      	ldrb	r3, [r7, #3]
 80421cc:	f043 0301 	orr.w	r3, r3, #1
 80421d0:	b2db      	uxtb	r3, r3
 80421d2:	70fb      	strb	r3, [r7, #3]
      ret = bf2092_platform_write(&optical_dev_ctx, ENABLE_REG, &STATUS, 1);
 80421d4:	1cfa      	adds	r2, r7, #3
 80421d6:	2301      	movs	r3, #1
 80421d8:	21e7      	movs	r1, #231	; 0xe7
 80421da:	4809      	ldr	r0, [pc, #36]	; (8042200 <bf2092_enable+0x60>)
 80421dc:	f7ff fdbc 	bl	8041d58 <bf2092_platform_write>
 80421e0:	6078      	str	r0, [r7, #4]
    }
    optical_activated = true;
 80421e2:	4b09      	ldr	r3, [pc, #36]	; (8042208 <bf2092_enable+0x68>)
 80421e4:	2201      	movs	r2, #1
 80421e6:	701a      	strb	r2, [r3, #0]
  }
  sensor_activate_count++;
 80421e8:	4b06      	ldr	r3, [pc, #24]	; (8042204 <bf2092_enable+0x64>)
 80421ea:	781b      	ldrb	r3, [r3, #0]
 80421ec:	3301      	adds	r3, #1
 80421ee:	b2da      	uxtb	r2, r3
 80421f0:	4b04      	ldr	r3, [pc, #16]	; (8042204 <bf2092_enable+0x64>)
 80421f2:	701a      	strb	r2, [r3, #0]
  return ret;
 80421f4:	687b      	ldr	r3, [r7, #4]
}
 80421f6:	4618      	mov	r0, r3
 80421f8:	3708      	adds	r7, #8
 80421fa:	46bd      	mov	sp, r7
 80421fc:	bd80      	pop	{r7, pc}
 80421fe:	bf00      	nop
 8042200:	20007ed4 	.word	0x20007ed4
 8042204:	20007ee4 	.word	0x20007ee4
 8042208:	20007ee5 	.word	0x20007ee5

0804220c <bf2092_disable>:

static int32_t bf2092_disable()
{
 804220c:	b580      	push	{r7, lr}
 804220e:	b082      	sub	sp, #8
 8042210:	af00      	add	r7, sp, #0
  int32_t ret = 0;
 8042212:	2300      	movs	r3, #0
 8042214:	607b      	str	r3, [r7, #4]
  uint8_t STATUS;
  sensor_activate_count--;
 8042216:	4b15      	ldr	r3, [pc, #84]	; (804226c <bf2092_disable+0x60>)
 8042218:	781b      	ldrb	r3, [r3, #0]
 804221a:	3b01      	subs	r3, #1
 804221c:	b2da      	uxtb	r2, r3
 804221e:	4b13      	ldr	r3, [pc, #76]	; (804226c <bf2092_disable+0x60>)
 8042220:	701a      	strb	r2, [r3, #0]
  ret = bf2092_platform_read(&optical_dev_ctx, ENABLE_REG, &STATUS, 1);
 8042222:	1cfa      	adds	r2, r7, #3
 8042224:	2301      	movs	r3, #1
 8042226:	21e7      	movs	r1, #231	; 0xe7
 8042228:	4811      	ldr	r0, [pc, #68]	; (8042270 <bf2092_disable+0x64>)
 804222a:	f7ff fdbb 	bl	8041da4 <bf2092_platform_read>
 804222e:	6078      	str	r0, [r7, #4]
  if (sensor_activate_count == 0) {
 8042230:	4b0e      	ldr	r3, [pc, #56]	; (804226c <bf2092_disable+0x60>)
 8042232:	781b      	ldrb	r3, [r3, #0]
 8042234:	2b00      	cmp	r3, #0
 8042236:	d113      	bne.n	8042260 <bf2092_disable+0x54>
    if ((STATUS & 0x01) == 1) {
 8042238:	78fb      	ldrb	r3, [r7, #3]
 804223a:	f003 0301 	and.w	r3, r3, #1
 804223e:	2b00      	cmp	r3, #0
 8042240:	d00b      	beq.n	804225a <bf2092_disable+0x4e>
      STATUS &= (~0x01);        //bit 0 set to 0
 8042242:	78fb      	ldrb	r3, [r7, #3]
 8042244:	f023 0301 	bic.w	r3, r3, #1
 8042248:	b2db      	uxtb	r3, r3
 804224a:	70fb      	strb	r3, [r7, #3]
      ret = bf2092_platform_write(&optical_dev_ctx, ENABLE_REG, &STATUS, 1);
 804224c:	1cfa      	adds	r2, r7, #3
 804224e:	2301      	movs	r3, #1
 8042250:	21e7      	movs	r1, #231	; 0xe7
 8042252:	4807      	ldr	r0, [pc, #28]	; (8042270 <bf2092_disable+0x64>)
 8042254:	f7ff fd80 	bl	8041d58 <bf2092_platform_write>
 8042258:	6078      	str	r0, [r7, #4]
    }
    optical_activated = false;
 804225a:	4b06      	ldr	r3, [pc, #24]	; (8042274 <bf2092_disable+0x68>)
 804225c:	2200      	movs	r2, #0
 804225e:	701a      	strb	r2, [r3, #0]
  }
  return ret;
 8042260:	687b      	ldr	r3, [r7, #4]
}
 8042262:	4618      	mov	r0, r3
 8042264:	3708      	adds	r7, #8
 8042266:	46bd      	mov	sp, r7
 8042268:	bd80      	pop	{r7, pc}
 804226a:	bf00      	nop
 804226c:	20007ee4 	.word	0x20007ee4
 8042270:	20007ed4 	.word	0x20007ed4
 8042274:	20007ee5 	.word	0x20007ee5

08042278 <bf2092_optical_activate>:

int bf2092_optical_activate(bool activate)
{
 8042278:	b580      	push	{r7, lr}
 804227a:	b084      	sub	sp, #16
 804227c:	af00      	add	r7, sp, #0
 804227e:	4603      	mov	r3, r0
 8042280:	71fb      	strb	r3, [r7, #7]
  int res = 0;
 8042282:	2300      	movs	r3, #0
 8042284:	60fb      	str	r3, [r7, #12]
  printf("bf2092_optical_activate: %d \r\n", activate);
 8042286:	79fb      	ldrb	r3, [r7, #7]
 8042288:	4619      	mov	r1, r3
 804228a:	4809      	ldr	r0, [pc, #36]	; (80422b0 <bf2092_optical_activate+0x38>)
 804228c:	f01e fb72 	bl	8060974 <iprintf>
  if (activate) {
 8042290:	79fb      	ldrb	r3, [r7, #7]
 8042292:	2b00      	cmp	r3, #0
 8042294:	d003      	beq.n	804229e <bf2092_optical_activate+0x26>
    res = bf2092_enable();
 8042296:	f7ff ff83 	bl	80421a0 <bf2092_enable>
 804229a:	60f8      	str	r0, [r7, #12]
 804229c:	e002      	b.n	80422a4 <bf2092_optical_activate+0x2c>
  } else {
    res = bf2092_disable();
 804229e:	f7ff ffb5 	bl	804220c <bf2092_disable>
 80422a2:	60f8      	str	r0, [r7, #12]
  }
  return res;
 80422a4:	68fb      	ldr	r3, [r7, #12]
}
 80422a6:	4618      	mov	r0, r3
 80422a8:	3710      	adds	r7, #16
 80422aa:	46bd      	mov	sp, r7
 80422ac:	bd80      	pop	{r7, pc}
 80422ae:	bf00      	nop
 80422b0:	08064df8 	.word	0x08064df8

080422b4 <bf2092_publish_sensor_data>:

int bf2092_publish_sensor_data(void *para)
{
 80422b4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80422b8:	b09a      	sub	sp, #104	; 0x68
 80422ba:	af00      	add	r7, sp, #0
 80422bc:	6078      	str	r0, [r7, #4]
  /* Read samples in polling mode (no int) */
  sensors_event_t sensor_data = { 0 };
 80422be:	f107 0308 	add.w	r3, r7, #8
 80422c2:	2250      	movs	r2, #80	; 0x50
 80422c4:	2100      	movs	r1, #0
 80422c6:	4618      	mov	r0, r3
 80422c8:	f01d fe78 	bl	805ffbc <memset>
  float x= 0.0f;
 80422cc:	f04f 0300 	mov.w	r3, #0
 80422d0:	667b      	str	r3, [r7, #100]	; 0x64
  float y = 0.0f;
 80422d2:	f04f 0300 	mov.w	r3, #0
 80422d6:	663b      	str	r3, [r7, #96]	; 0x60
  float xaverage = 0.0f;
 80422d8:	f04f 0300 	mov.w	r3, #0
 80422dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  float yaverage = 0.0f;
 80422de:	f04f 0300 	mov.w	r3, #0
 80422e2:	65bb      	str	r3, [r7, #88]	; 0x58
  if (optical_activated) {
 80422e4:	4b6d      	ldr	r3, [pc, #436]	; (804249c <bf2092_publish_sensor_data+0x1e8>)
 80422e6:	781b      	ldrb	r3, [r3, #0]
 80422e8:	2b00      	cmp	r3, #0
 80422ea:	f000 80d1 	beq.w	8042490 <bf2092_publish_sensor_data+0x1dc>
    // core process
    bf2092_get_raw_data(&optical_dev_ctx);
 80422ee:	486c      	ldr	r0, [pc, #432]	; (80424a0 <bf2092_publish_sensor_data+0x1ec>)
 80422f0:	f7ff fdb8 	bl	8041e64 <bf2092_get_raw_data>
    //send related messages to SensorDataQ
    sensor_data.sensor_type = SENSOR_TYPE_LIGHT_SPEED;
 80422f4:	2308      	movs	r3, #8
 80422f6:	723b      	strb	r3, [r7, #8]
    sensor_data.accuracy = 3;
 80422f8:	2303      	movs	r3, #3
 80422fa:	727b      	strb	r3, [r7, #9]
    sensor_data.timestamp = sensor_get_timestamp();
 80422fc:	f00b fa04 	bl	804d708 <sensor_get_timestamp>
 8042300:	4602      	mov	r2, r0
 8042302:	460b      	mov	r3, r1
 8042304:	e9c7 2304 	strd	r2, r3, [r7, #16]
    current_timestamp = sensor_data.timestamp;
 8042308:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 804230c:	4965      	ldr	r1, [pc, #404]	; (80424a4 <bf2092_publish_sensor_data+0x1f0>)
 804230e:	e9c1 2300 	strd	r2, r3, [r1]
    if (is_env_good >= 0) {
 8042312:	4b65      	ldr	r3, [pc, #404]	; (80424a8 <bf2092_publish_sensor_data+0x1f4>)
 8042314:	681b      	ldr	r3, [r3, #0]
 8042316:	2b00      	cmp	r3, #0
 8042318:	f2c0 80ba 	blt.w	8042490 <bf2092_publish_sensor_data+0x1dc>

      x = -(bf2092_raw_data[0] & (~HIGHESTBITMASK)) * coeff_of_bf2092;
 804231c:	4b63      	ldr	r3, [pc, #396]	; (80424ac <bf2092_publish_sensor_data+0x1f8>)
 804231e:	781b      	ldrb	r3, [r3, #0]
 8042320:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8042324:	425b      	negs	r3, r3
 8042326:	ee07 3a90 	vmov	s15, r3
 804232a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 804232e:	ed9f 7a60 	vldr	s14, [pc, #384]	; 80424b0 <bf2092_publish_sensor_data+0x1fc>
 8042332:	ee67 7a87 	vmul.f32	s15, s15, s14
 8042336:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
      if (((bf2092_raw_data[0] & HIGHESTBITMASK) >> 7) == 1)    //back, -;front +;
 804233a:	4b5c      	ldr	r3, [pc, #368]	; (80424ac <bf2092_publish_sensor_data+0x1f8>)
 804233c:	781b      	ldrb	r3, [r3, #0]
 804233e:	09db      	lsrs	r3, r3, #7
 8042340:	b2db      	uxtb	r3, r3
 8042342:	2b01      	cmp	r3, #1
 8042344:	d105      	bne.n	8042352 <bf2092_publish_sensor_data+0x9e>
        x = -x;
 8042346:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 804234a:	eef1 7a67 	vneg.f32	s15, s15
 804234e:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

      y = -(bf2092_raw_data[1] & (~HIGHESTBITMASK)) * coeff_of_bf2092;
 8042352:	4b56      	ldr	r3, [pc, #344]	; (80424ac <bf2092_publish_sensor_data+0x1f8>)
 8042354:	785b      	ldrb	r3, [r3, #1]
 8042356:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 804235a:	425b      	negs	r3, r3
 804235c:	ee07 3a90 	vmov	s15, r3
 8042360:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8042364:	ed9f 7a52 	vldr	s14, [pc, #328]	; 80424b0 <bf2092_publish_sensor_data+0x1fc>
 8042368:	ee67 7a87 	vmul.f32	s15, s15, s14
 804236c:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      if (((bf2092_raw_data[1] & HIGHESTBITMASK) >> 7) == 1)    //left, -;right +;
 8042370:	4b4e      	ldr	r3, [pc, #312]	; (80424ac <bf2092_publish_sensor_data+0x1f8>)
 8042372:	785b      	ldrb	r3, [r3, #1]
 8042374:	09db      	lsrs	r3, r3, #7
 8042376:	b2db      	uxtb	r3, r3
 8042378:	2b01      	cmp	r3, #1
 804237a:	d105      	bne.n	8042388 <bf2092_publish_sensor_data+0xd4>
        y = -y;
 804237c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8042380:	eef1 7a67 	vneg.f32	s15, s15
 8042384:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

      if (last_timestamp == 0)
 8042388:	4b4a      	ldr	r3, [pc, #296]	; (80424b4 <bf2092_publish_sensor_data+0x200>)
 804238a:	e9d3 2300 	ldrd	r2, r3, [r3]
 804238e:	4313      	orrs	r3, r2
 8042390:	d106      	bne.n	80423a0 <bf2092_publish_sensor_data+0xec>
        last_timestamp = current_timestamp;
 8042392:	4b44      	ldr	r3, [pc, #272]	; (80424a4 <bf2092_publish_sensor_data+0x1f0>)
 8042394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042398:	4946      	ldr	r1, [pc, #280]	; (80424b4 <bf2092_publish_sensor_data+0x200>)
 804239a:	e9c1 2300 	strd	r2, r3, [r1]
 804239e:	e077      	b.n	8042490 <bf2092_publish_sensor_data+0x1dc>
      else {
        xaverage = streaming_median(x / (current_timestamp - last_timestamp) * 1000, x_history_values, x_history_ages, maxCount);
 80423a0:	4b40      	ldr	r3, [pc, #256]	; (80424a4 <bf2092_publish_sensor_data+0x1f0>)
 80423a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80423a6:	4b43      	ldr	r3, [pc, #268]	; (80424b4 <bf2092_publish_sensor_data+0x200>)
 80423a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80423ac:	ebb0 0802 	subs.w	r8, r0, r2
 80423b0:	eb61 0903 	sbc.w	r9, r1, r3
 80423b4:	4640      	mov	r0, r8
 80423b6:	4649      	mov	r1, r9
 80423b8:	f7fe fd2e 	bl	8040e18 <__aeabi_ul2f>
 80423bc:	ee06 0a90 	vmov	s13, r0
 80423c0:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80423c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80423c8:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80424b8 <bf2092_publish_sensor_data+0x204>
 80423cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80423d0:	2205      	movs	r2, #5
 80423d2:	493a      	ldr	r1, [pc, #232]	; (80424bc <bf2092_publish_sensor_data+0x208>)
 80423d4:	483a      	ldr	r0, [pc, #232]	; (80424c0 <bf2092_publish_sensor_data+0x20c>)
 80423d6:	eeb0 0a67 	vmov.f32	s0, s15
 80423da:	f7ff fbf9 	bl	8041bd0 <streaming_median>
 80423de:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
        yaverage = streaming_median(y / (current_timestamp - last_timestamp) * 1000, y_history_values, y_history_ages, maxCount);
 80423e2:	4b30      	ldr	r3, [pc, #192]	; (80424a4 <bf2092_publish_sensor_data+0x1f0>)
 80423e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80423e8:	4b32      	ldr	r3, [pc, #200]	; (80424b4 <bf2092_publish_sensor_data+0x200>)
 80423ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80423ee:	1a84      	subs	r4, r0, r2
 80423f0:	eb61 0503 	sbc.w	r5, r1, r3
 80423f4:	4620      	mov	r0, r4
 80423f6:	4629      	mov	r1, r5
 80423f8:	f7fe fd0e 	bl	8040e18 <__aeabi_ul2f>
 80423fc:	ee06 0a90 	vmov	s13, r0
 8042400:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8042404:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8042408:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80424b8 <bf2092_publish_sensor_data+0x204>
 804240c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8042410:	2205      	movs	r2, #5
 8042412:	492c      	ldr	r1, [pc, #176]	; (80424c4 <bf2092_publish_sensor_data+0x210>)
 8042414:	482c      	ldr	r0, [pc, #176]	; (80424c8 <bf2092_publish_sensor_data+0x214>)
 8042416:	eeb0 0a67 	vmov.f32	s0, s15
 804241a:	f7ff fbd9 	bl	8041bd0 <streaming_median>
 804241e:	ed87 0a16 	vstr	s0, [r7, #88]	; 0x58
        idx++;
 8042422:	4b2a      	ldr	r3, [pc, #168]	; (80424cc <bf2092_publish_sensor_data+0x218>)
 8042424:	681b      	ldr	r3, [r3, #0]
 8042426:	3301      	adds	r3, #1
 8042428:	4a28      	ldr	r2, [pc, #160]	; (80424cc <bf2092_publish_sensor_data+0x218>)
 804242a:	6013      	str	r3, [r2, #0]
        if (idx == maxCount && complete_data_array_init == 0) {
 804242c:	4b27      	ldr	r3, [pc, #156]	; (80424cc <bf2092_publish_sensor_data+0x218>)
 804242e:	681b      	ldr	r3, [r3, #0]
 8042430:	2b05      	cmp	r3, #5
 8042432:	d109      	bne.n	8042448 <bf2092_publish_sensor_data+0x194>
 8042434:	4b26      	ldr	r3, [pc, #152]	; (80424d0 <bf2092_publish_sensor_data+0x21c>)
 8042436:	681b      	ldr	r3, [r3, #0]
 8042438:	2b00      	cmp	r3, #0
 804243a:	d105      	bne.n	8042448 <bf2092_publish_sensor_data+0x194>
          idx = 0;
 804243c:	4b23      	ldr	r3, [pc, #140]	; (80424cc <bf2092_publish_sensor_data+0x218>)
 804243e:	2200      	movs	r2, #0
 8042440:	601a      	str	r2, [r3, #0]
          complete_data_array_init = 1;
 8042442:	4b23      	ldr	r3, [pc, #140]	; (80424d0 <bf2092_publish_sensor_data+0x21c>)
 8042444:	2201      	movs	r2, #1
 8042446:	601a      	str	r2, [r3, #0]
        }
        if (idx == maxCount)
 8042448:	4b20      	ldr	r3, [pc, #128]	; (80424cc <bf2092_publish_sensor_data+0x218>)
 804244a:	681b      	ldr	r3, [r3, #0]
 804244c:	2b05      	cmp	r3, #5
 804244e:	d102      	bne.n	8042456 <bf2092_publish_sensor_data+0x1a2>
          idx = 0;
 8042450:	4b1e      	ldr	r3, [pc, #120]	; (80424cc <bf2092_publish_sensor_data+0x218>)
 8042452:	2200      	movs	r2, #0
 8042454:	601a      	str	r2, [r3, #0]

        if (complete_data_array_init) {
 8042456:	4b1e      	ldr	r3, [pc, #120]	; (80424d0 <bf2092_publish_sensor_data+0x21c>)
 8042458:	681b      	ldr	r3, [r3, #0]
 804245a:	2b00      	cmp	r3, #0
 804245c:	d004      	beq.n	8042468 <bf2092_publish_sensor_data+0x1b4>
          sensor_data.sensor_data_t.vec.data[0] = xaverage;
 804245e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8042460:	61bb      	str	r3, [r7, #24]
          sensor_data.sensor_data_t.vec.data[1] = yaverage;
 8042462:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8042464:	61fb      	str	r3, [r7, #28]
 8042466:	e003      	b.n	8042470 <bf2092_publish_sensor_data+0x1bc>
        } else {
          sensor_data.sensor_data_t.vec.data[0] = x;
 8042468:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 804246a:	61bb      	str	r3, [r7, #24]
          sensor_data.sensor_data_t.vec.data[1] = y;
 804246c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 804246e:	61fb      	str	r3, [r7, #28]
        }
        osMessageQueuePut(optical_init_parms->SensorDataQHandle, &sensor_data,
 8042470:	4b18      	ldr	r3, [pc, #96]	; (80424d4 <bf2092_publish_sensor_data+0x220>)
 8042472:	681b      	ldr	r3, [r3, #0]
 8042474:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 8042478:	f107 0108 	add.w	r1, r7, #8
 804247c:	2300      	movs	r3, #0
 804247e:	2200      	movs	r2, #0
 8042480:	f013 ffc0 	bl	8056404 <osMessageQueuePut>
                        0, 0);
        last_timestamp = current_timestamp;
 8042484:	4b07      	ldr	r3, [pc, #28]	; (80424a4 <bf2092_publish_sensor_data+0x1f0>)
 8042486:	e9d3 2300 	ldrd	r2, r3, [r3]
 804248a:	490a      	ldr	r1, [pc, #40]	; (80424b4 <bf2092_publish_sensor_data+0x200>)
 804248c:	e9c1 2300 	strd	r2, r3, [r1]
      }
    }
  }
  return 0;
 8042490:	2300      	movs	r3, #0
}
 8042492:	4618      	mov	r0, r3
 8042494:	3768      	adds	r7, #104	; 0x68
 8042496:	46bd      	mov	sp, r7
 8042498:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 804249c:	20007ee5 	.word	0x20007ee5
 80424a0:	20007ed4 	.word	0x20007ed4
 80424a4:	20007ef0 	.word	0x20007ef0
 80424a8:	20007000 	.word	0x20007000
 80424ac:	20007ed0 	.word	0x20007ed0
 80424b0:	3b347c74 	.word	0x3b347c74
 80424b4:	20007ef8 	.word	0x20007ef8
 80424b8:	447a0000 	.word	0x447a0000
 80424bc:	20007f14 	.word	0x20007f14
 80424c0:	20007f00 	.word	0x20007f00
 80424c4:	20007f3c 	.word	0x20007f3c
 80424c8:	20007f28 	.word	0x20007f28
 80424cc:	20007eec 	.word	0x20007eec
 80424d0:	20007ee8 	.word	0x20007ee8
 80424d4:	20007ee0 	.word	0x20007ee0

080424d8 <bf2092_init_complete>:

int bf2092_init_complete(void *para)
{
 80424d8:	b480      	push	{r7}
 80424da:	b083      	sub	sp, #12
 80424dc:	af00      	add	r7, sp, #0
 80424de:	6078      	str	r0, [r7, #4]
  return SENSOR_SUCCESS;
 80424e0:	2300      	movs	r3, #0
}
 80424e2:	4618      	mov	r0, r3
 80424e4:	370c      	adds	r7, #12
 80424e6:	46bd      	mov	sp, r7
 80424e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80424ec:	4770      	bx	lr
	...

080424f0 <bf2092_config>:

int bf2092_config(uint8_t config_type, void *para)
{
 80424f0:	b580      	push	{r7, lr}
 80424f2:	b084      	sub	sp, #16
 80424f4:	af00      	add	r7, sp, #0
 80424f6:	4603      	mov	r3, r0
 80424f8:	6039      	str	r1, [r7, #0]
 80424fa:	71fb      	strb	r3, [r7, #7]
  int res = SENSOR_SUCCESS;
 80424fc:	2300      	movs	r3, #0
 80424fe:	60fb      	str	r3, [r7, #12]
  uint8_t id_0, id_1;

  switch (config_type) {
 8042500:	79fb      	ldrb	r3, [r7, #7]
 8042502:	2b02      	cmp	r3, #2
 8042504:	d11f      	bne.n	8042546 <bf2092_config+0x56>
  case SENSOR_CONFIG_SELFTEST:
    /* Check device ID */
    bf2092_platform_read(optical_dev_ctx.handle, (uint8_t) BF2092_REG_PART_ID_0,
 8042506:	4b14      	ldr	r3, [pc, #80]	; (8042558 <bf2092_config+0x68>)
 8042508:	6898      	ldr	r0, [r3, #8]
 804250a:	f107 020b 	add.w	r2, r7, #11
 804250e:	2301      	movs	r3, #1
 8042510:	21fc      	movs	r1, #252	; 0xfc
 8042512:	f7ff fc47 	bl	8041da4 <bf2092_platform_read>
                         &id_0, 1);

    bf2092_platform_read(optical_dev_ctx.handle, (uint8_t) BF2092_REG_PART_ID_1,
 8042516:	4b10      	ldr	r3, [pc, #64]	; (8042558 <bf2092_config+0x68>)
 8042518:	6898      	ldr	r0, [r3, #8]
 804251a:	f107 020a 	add.w	r2, r7, #10
 804251e:	2301      	movs	r3, #1
 8042520:	21fd      	movs	r1, #253	; 0xfd
 8042522:	f7ff fc3f 	bl	8041da4 <bf2092_platform_read>
                         &id_1, 1);

    if (id_0 != BF2092_REG_PART_ID_0_VALUE
 8042526:	7afb      	ldrb	r3, [r7, #11]
 8042528:	2b20      	cmp	r3, #32
 804252a:	d102      	bne.n	8042532 <bf2092_config+0x42>
        || id_1 != BF2092_REG_PART_ID_1_VALUE) {
 804252c:	7abb      	ldrb	r3, [r7, #10]
 804252e:	2b92      	cmp	r3, #146	; 0x92
 8042530:	d005      	beq.n	804253e <bf2092_config+0x4e>
      printf("selftest failed for bf2092!\r\n");
 8042532:	480a      	ldr	r0, [pc, #40]	; (804255c <bf2092_config+0x6c>)
 8042534:	f01e faba 	bl	8060aac <puts>
      res = SENSOR_FAILED;
 8042538:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 804253c:	60fb      	str	r3, [r7, #12]
    }
    printf("selftest success for bf2092!\r\n");
 804253e:	4808      	ldr	r0, [pc, #32]	; (8042560 <bf2092_config+0x70>)
 8042540:	f01e fab4 	bl	8060aac <puts>
    break;
 8042544:	e003      	b.n	804254e <bf2092_config+0x5e>
  default:
    printf("unsupported config command\n\r");
 8042546:	4807      	ldr	r0, [pc, #28]	; (8042564 <bf2092_config+0x74>)
 8042548:	f01e fa14 	bl	8060974 <iprintf>
    break;
 804254c:	bf00      	nop
  }
  return res;
 804254e:	68fb      	ldr	r3, [r7, #12]
}
 8042550:	4618      	mov	r0, r3
 8042552:	3710      	adds	r7, #16
 8042554:	46bd      	mov	sp, r7
 8042556:	bd80      	pop	{r7, pc}
 8042558:	20007ed4 	.word	0x20007ed4
 804255c:	08064e18 	.word	0x08064e18
 8042560:	08064e38 	.word	0x08064e38
 8042564:	08064e58 	.word	0x08064e58

08042568 <bf2092_publish_config_resp>:

int bf2092_publish_config_resp(void *para)
{
 8042568:	b480      	push	{r7}
 804256a:	b083      	sub	sp, #12
 804256c:	af00      	add	r7, sp, #0
 804256e:	6078      	str	r0, [r7, #4]
  //send init complete event to smgr?
  return SENSOR_SUCCESS;
 8042570:	2300      	movs	r3, #0
}
 8042572:	4618      	mov	r0, r3
 8042574:	370c      	adds	r7, #12
 8042576:	46bd      	mov	sp, r7
 8042578:	f85d 7b04 	ldr.w	r7, [sp], #4
 804257c:	4770      	bx	lr
	...

08042580 <light_platform_write>:
 * @param  len       number of consecutive register to write
 *
 */
static int32_t light_platform_write(void *handle, uint8_t reg, uint8_t * bufp,
                                    uint16_t len)
{
 8042580:	b580      	push	{r7, lr}
 8042582:	b088      	sub	sp, #32
 8042584:	af04      	add	r7, sp, #16
 8042586:	60f8      	str	r0, [r7, #12]
 8042588:	607a      	str	r2, [r7, #4]
 804258a:	461a      	mov	r2, r3
 804258c:	460b      	mov	r3, r1
 804258e:	72fb      	strb	r3, [r7, #11]
 8042590:	4613      	mov	r3, r2
 8042592:	813b      	strh	r3, [r7, #8]
  if (handle == &light_init_parms->i2c_handle) {
 8042594:	4b0c      	ldr	r3, [pc, #48]	; (80425c8 <light_platform_write+0x48>)
 8042596:	681b      	ldr	r3, [r3, #0]
 8042598:	3304      	adds	r3, #4
 804259a:	68fa      	ldr	r2, [r7, #12]
 804259c:	429a      	cmp	r2, r3
 804259e:	d10d      	bne.n	80425bc <light_platform_write+0x3c>
    //printf("start i2c write, \r\n");
    HAL_I2C_Mem_Write(handle, (uint16_t) BU27030_I2C_COMUNICATE_ADD, reg,
 80425a0:	7afb      	ldrb	r3, [r7, #11]
 80425a2:	b29a      	uxth	r2, r3
 80425a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80425a8:	9302      	str	r3, [sp, #8]
 80425aa:	893b      	ldrh	r3, [r7, #8]
 80425ac:	9301      	str	r3, [sp, #4]
 80425ae:	687b      	ldr	r3, [r7, #4]
 80425b0:	9300      	str	r3, [sp, #0]
 80425b2:	2301      	movs	r3, #1
 80425b4:	2170      	movs	r1, #112	; 0x70
 80425b6:	68f8      	ldr	r0, [r7, #12]
 80425b8:	f00f fd00 	bl	8051fbc <HAL_I2C_Mem_Write>
                      I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  }

  return 0;
 80425bc:	2300      	movs	r3, #0
}
 80425be:	4618      	mov	r0, r3
 80425c0:	3710      	adds	r7, #16
 80425c2:	46bd      	mov	sp, r7
 80425c4:	bd80      	pop	{r7, pc}
 80425c6:	bf00      	nop
 80425c8:	20007f64 	.word	0x20007f64

080425cc <light_platform_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t light_platform_read(void *handle, uint8_t reg, uint8_t * bufp,
                                   uint16_t len)
{
 80425cc:	b580      	push	{r7, lr}
 80425ce:	b088      	sub	sp, #32
 80425d0:	af04      	add	r7, sp, #16
 80425d2:	60f8      	str	r0, [r7, #12]
 80425d4:	607a      	str	r2, [r7, #4]
 80425d6:	461a      	mov	r2, r3
 80425d8:	460b      	mov	r3, r1
 80425da:	72fb      	strb	r3, [r7, #11]
 80425dc:	4613      	mov	r3, r2
 80425de:	813b      	strh	r3, [r7, #8]
  if (handle == &light_init_parms->i2c_handle) {
 80425e0:	4b0c      	ldr	r3, [pc, #48]	; (8042614 <light_platform_read+0x48>)
 80425e2:	681b      	ldr	r3, [r3, #0]
 80425e4:	3304      	adds	r3, #4
 80425e6:	68fa      	ldr	r2, [r7, #12]
 80425e8:	429a      	cmp	r2, r3
 80425ea:	d10d      	bne.n	8042608 <light_platform_read+0x3c>
    //printf("start i2c read, \r\n");
    HAL_I2C_Mem_Read(handle, (uint16_t) BU27030_I2C_COMUNICATE_ADD, reg,
 80425ec:	7afb      	ldrb	r3, [r7, #11]
 80425ee:	b29a      	uxth	r2, r3
 80425f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80425f4:	9302      	str	r3, [sp, #8]
 80425f6:	893b      	ldrh	r3, [r7, #8]
 80425f8:	9301      	str	r3, [sp, #4]
 80425fa:	687b      	ldr	r3, [r7, #4]
 80425fc:	9300      	str	r3, [sp, #0]
 80425fe:	2301      	movs	r3, #1
 8042600:	2170      	movs	r1, #112	; 0x70
 8042602:	68f8      	ldr	r0, [r7, #12]
 8042604:	f00f fdd4 	bl	80521b0 <HAL_I2C_Mem_Read>
                     I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  }

  return 0;
 8042608:	2300      	movs	r3, #0
}
 804260a:	4618      	mov	r0, r3
 804260c:	3710      	adds	r7, #16
 804260e:	46bd      	mov	sp, r7
 8042610:	bd80      	pop	{r7, pc}
 8042612:	bf00      	nop
 8042614:	20007f64 	.word	0x20007f64

08042618 <platform_delay>:
 *
 * @param  ms        delay in ms
 *
 */
static void platform_delay(uint32_t ms)
{
 8042618:	b580      	push	{r7, lr}
 804261a:	b082      	sub	sp, #8
 804261c:	af00      	add	r7, sp, #0
 804261e:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 8042620:	6878      	ldr	r0, [r7, #4]
 8042622:	f00d f813 	bl	804f64c <HAL_Delay>
}
 8042626:	bf00      	nop
 8042628:	3708      	adds	r7, #8
 804262a:	46bd      	mov	sp, r7
 804262c:	bd80      	pop	{r7, pc}

0804262e <bu27030_driver_reset>:
 * NAME       : bu27030_driver_reset
 * FUNCTION   : reset BU27030 register
 * REMARKS    :
 *****************************************************************************/
static int bu27030_driver_reset(stmdev_ctx_t * ctx)
{
 804262e:	b580      	push	{r7, lr}
 8042630:	b084      	sub	sp, #16
 8042632:	af00      	add	r7, sp, #0
 8042634:	6078      	str	r0, [r7, #4]
  int result = 0;
 8042636:	2300      	movs	r3, #0
 8042638:	60fb      	str	r3, [r7, #12]
  /* set soft reset */
  uint8_t BU27030_RST = (1 << 7);
 804263a:	2380      	movs	r3, #128	; 0x80
 804263c:	72fb      	strb	r3, [r7, #11]
  result |= light_platform_write(ctx->handle, BU27030_REG_SOFT_RST,
 804263e:	687b      	ldr	r3, [r7, #4]
 8042640:	6898      	ldr	r0, [r3, #8]
 8042642:	f107 020b 	add.w	r2, r7, #11
 8042646:	2301      	movs	r3, #1
 8042648:	2140      	movs	r1, #64	; 0x40
 804264a:	f7ff ff99 	bl	8042580 <light_platform_write>
 804264e:	4602      	mov	r2, r0
 8042650:	68fb      	ldr	r3, [r7, #12]
 8042652:	4313      	orrs	r3, r2
 8042654:	60fb      	str	r3, [r7, #12]
                                 &BU27030_RST, 1);
  return (result);
 8042656:	68fb      	ldr	r3, [r7, #12]
}
 8042658:	4618      	mov	r0, r3
 804265a:	3710      	adds	r7, #16
 804265c:	46bd      	mov	sp, r7
 804265e:	bd80      	pop	{r7, pc}

08042660 <bu27030_init_client>:

/*************** Initialze Functions ******************/
static int bu27030_init_client(stmdev_ctx_t * ctx)
{
 8042660:	b580      	push	{r7, lr}
 8042662:	b084      	sub	sp, #16
 8042664:	af00      	add	r7, sp, #0
 8042666:	6078      	str	r0, [r7, #4]
  int result = 0;
 8042668:	2300      	movs	r3, #0
 804266a:	60fb      	str	r3, [r7, #12]

  /* execute software reset */
  result = bu27030_driver_reset(ctx);
 804266c:	6878      	ldr	r0, [r7, #4]
 804266e:	f7ff ffde 	bl	804262e <bu27030_driver_reset>
 8042672:	60f8      	str	r0, [r7, #12]
  if (result != 0) {
 8042674:	68fb      	ldr	r3, [r7, #12]
 8042676:	2b00      	cmp	r3, #0
 8042678:	d001      	beq.n	804267e <bu27030_init_client+0x1e>
    return (result);
 804267a:	68fb      	ldr	r3, [r7, #12]
 804267c:	e01d      	b.n	80426ba <bu27030_init_client+0x5a>
  }
  uint8_t MEASURE_100MS = 0;    //100ms
 804267e:	2300      	movs	r3, #0
 8042680:	72fb      	strb	r3, [r7, #11]
  uint8_t MEASURE_DEFAULT_GAIN = (0x02 << 4) | (0x02);
 8042682:	2322      	movs	r3, #34	; 0x22
 8042684:	72bb      	strb	r3, [r7, #10]

  result = light_platform_write(ctx->handle, BU27030_REG_TIMING,
 8042686:	687b      	ldr	r3, [r7, #4]
 8042688:	6898      	ldr	r0, [r3, #8]
 804268a:	f107 020b 	add.w	r2, r7, #11
 804268e:	2301      	movs	r3, #1
 8042690:	2141      	movs	r1, #65	; 0x41
 8042692:	f7ff ff75 	bl	8042580 <light_platform_write>
 8042696:	60f8      	str	r0, [r7, #12]
                                &MEASURE_100MS, 1);
  if (result == 0) {
 8042698:	68fb      	ldr	r3, [r7, #12]
 804269a:	2b00      	cmp	r3, #0
 804269c:	d109      	bne.n	80426b2 <bu27030_init_client+0x52>
    //gain0 gain1 : 1X, 1X
    result = light_platform_write(ctx->handle, BU27030_REG_GAIN,
 804269e:	687b      	ldr	r3, [r7, #4]
 80426a0:	6898      	ldr	r0, [r3, #8]
 80426a2:	f107 020a 	add.w	r2, r7, #10
 80426a6:	2301      	movs	r3, #1
 80426a8:	2142      	movs	r1, #66	; 0x42
 80426aa:	f7ff ff69 	bl	8042580 <light_platform_write>
 80426ae:	60f8      	str	r0, [r7, #12]
 80426b0:	e002      	b.n	80426b8 <bu27030_init_client+0x58>
                                  &MEASURE_DEFAULT_GAIN, 1);
  } else {
    printf(" I2c write failed! \r\n");
 80426b2:	4804      	ldr	r0, [pc, #16]	; (80426c4 <bu27030_init_client+0x64>)
 80426b4:	f01e f9fa 	bl	8060aac <puts>
  }

  return (result);
 80426b8:	68fb      	ldr	r3, [r7, #12]
}
 80426ba:	4618      	mov	r0, r3
 80426bc:	3710      	adds	r7, #16
 80426be:	46bd      	mov	sp, r7
 80426c0:	bd80      	pop	{r7, pc}
 80426c2:	bf00      	nop
 80426c4:	08064e78 	.word	0x08064e78

080426c8 <bu27030_calculate_light>:
 *
 * @Returns: lux value or failed.
 */
static int bu27030_calculate_light(READ_DATA_ARG data, unsigned char gain,
                                   unsigned char time)
{
 80426c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80426ca:	b093      	sub	sp, #76	; 0x4c
 80426cc:	af06      	add	r7, sp, #24
 80426ce:	f107 0408 	add.w	r4, r7, #8
 80426d2:	e884 0003 	stmia.w	r4, {r0, r1}
 80426d6:	4611      	mov	r1, r2
 80426d8:	461a      	mov	r2, r3
 80426da:	460b      	mov	r3, r1
 80426dc:	71fb      	strb	r3, [r7, #7]
 80426de:	4613      	mov	r3, r2
 80426e0:	71bb      	strb	r3, [r7, #6]
  float lx, tmp1, tmp2;
  CALC_DATA calculated_data;

  /* set the value of measured als data */
  calculated_data.als_time = time_table[time & 0x1];
 80426e2:	79bb      	ldrb	r3, [r7, #6]
 80426e4:	f003 0301 	and.w	r3, r3, #1
 80426e8:	4ab4      	ldr	r2, [pc, #720]	; (80429bc <bu27030_calculate_light+0x2f4>)
 80426ea:	5cd3      	ldrb	r3, [r2, r3]
 80426ec:	753b      	strb	r3, [r7, #20]
  calculated_data.gain0 = gain_table[gain >> 4];
 80426ee:	79fb      	ldrb	r3, [r7, #7]
 80426f0:	091b      	lsrs	r3, r3, #4
 80426f2:	b2db      	uxtb	r3, r3
 80426f4:	461a      	mov	r2, r3
 80426f6:	4bb2      	ldr	r3, [pc, #712]	; (80429c0 <bu27030_calculate_light+0x2f8>)
 80426f8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80426fc:	82fb      	strh	r3, [r7, #22]
  calculated_data.gain1 = gain_table[gain & DATA1_GAIN_MASK];
 80426fe:	79fb      	ldrb	r3, [r7, #7]
 8042700:	f003 030f 	and.w	r3, r3, #15
 8042704:	4aae      	ldr	r2, [pc, #696]	; (80429c0 <bu27030_calculate_light+0x2f8>)
 8042706:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 804270a:	833b      	strh	r3, [r7, #24]
  calculated_data.als_data0 = data.data0;
 804270c:	68bb      	ldr	r3, [r7, #8]
 804270e:	61fb      	str	r3, [r7, #28]
  calculated_data.als_data1 = data.data1;
 8042710:	68fb      	ldr	r3, [r7, #12]
 8042712:	623b      	str	r3, [r7, #32]

  if (data.data0 == 0xFFFF) {
 8042714:	68bb      	ldr	r3, [r7, #8]
 8042716:	f64f 72ff 	movw	r2, #65535	; 0xffff
 804271a:	4293      	cmp	r3, r2
 804271c:	d105      	bne.n	804272a <bu27030_calculate_light+0x62>
    printf("Data0 is 0xFFFF, return max lux 65535.\r\n");
 804271e:	48a9      	ldr	r0, [pc, #676]	; (80429c4 <bu27030_calculate_light+0x2fc>)
 8042720:	f01e f9c4 	bl	8060aac <puts>
    return 65535;
 8042724:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8042728:	e143      	b.n	80429b2 <bu27030_calculate_light+0x2ea>
  }

  if (!calculated_data.als_time || !calculated_data.gain0
 804272a:	7d3b      	ldrb	r3, [r7, #20]
 804272c:	2b00      	cmp	r3, #0
 804272e:	d005      	beq.n	804273c <bu27030_calculate_light+0x74>
 8042730:	8afb      	ldrh	r3, [r7, #22]
 8042732:	2b00      	cmp	r3, #0
 8042734:	d002      	beq.n	804273c <bu27030_calculate_light+0x74>
      || !calculated_data.gain1) {
 8042736:	8b3b      	ldrh	r3, [r7, #24]
 8042738:	2b00      	cmp	r3, #0
 804273a:	d109      	bne.n	8042750 <bu27030_calculate_light+0x88>
    printf("parameter error, als_time:%d, gain0:%d, gain1:%d",
           calculated_data.als_time, calculated_data.gain0,
 804273c:	7d3b      	ldrb	r3, [r7, #20]
    printf("parameter error, als_time:%d, gain0:%d, gain1:%d",
 804273e:	4619      	mov	r1, r3
           calculated_data.als_time, calculated_data.gain0,
 8042740:	8afb      	ldrh	r3, [r7, #22]
    printf("parameter error, als_time:%d, gain0:%d, gain1:%d",
 8042742:	461a      	mov	r2, r3
           calculated_data.gain1);
 8042744:	8b3b      	ldrh	r3, [r7, #24]
    printf("parameter error, als_time:%d, gain0:%d, gain1:%d",
 8042746:	48a0      	ldr	r0, [pc, #640]	; (80429c8 <bu27030_calculate_light+0x300>)
 8042748:	f01e f914 	bl	8060974 <iprintf>
    return 0;
 804274c:	2300      	movs	r3, #0
 804274e:	e130      	b.n	80429b2 <bu27030_calculate_light+0x2ea>
  }

  calculated_data.als_data0 = data.data0 * DATA_TRANSFER_COFF
 8042750:	68bb      	ldr	r3, [r7, #8]
 8042752:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8042756:	fb02 f303 	mul.w	r3, r2, r3
      / calculated_data.als_time / calculated_data.gain0;
 804275a:	7d3a      	ldrb	r2, [r7, #20]
 804275c:	fbb3 f3f2 	udiv	r3, r3, r2
 8042760:	8afa      	ldrh	r2, [r7, #22]
 8042762:	fbb3 f3f2 	udiv	r3, r3, r2
  calculated_data.als_data0 = data.data0 * DATA_TRANSFER_COFF
 8042766:	61fb      	str	r3, [r7, #28]
  calculated_data.als_data1 = data.data1 * DATA_TRANSFER_COFF
 8042768:	68fb      	ldr	r3, [r7, #12]
 804276a:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 804276e:	fb02 f303 	mul.w	r3, r2, r3
      / calculated_data.als_time / calculated_data.gain1;
 8042772:	7d3a      	ldrb	r2, [r7, #20]
 8042774:	fbb3 f3f2 	udiv	r3, r3, r2
 8042778:	8b3a      	ldrh	r2, [r7, #24]
 804277a:	fbb3 f3f2 	udiv	r3, r3, r2
  calculated_data.als_data1 = data.data1 * DATA_TRANSFER_COFF
 804277e:	623b      	str	r3, [r7, #32]

  if (calculated_data.als_data1 <
 8042780:	6a3b      	ldr	r3, [r7, #32]
 8042782:	ee07 3a90 	vmov	s15, r3
 8042786:	eeb8 7a67 	vcvt.f32.u32	s14, s15
      calculated_data.als_data0 * data_coefficient[0]) {
 804278a:	69fb      	ldr	r3, [r7, #28]
 804278c:	ee07 3a90 	vmov	s15, r3
 8042790:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8042794:	eddf 6a8d 	vldr	s13, [pc, #564]	; 80429cc <bu27030_calculate_light+0x304>
 8042798:	ee67 7aa6 	vmul.f32	s15, s15, s13
  if (calculated_data.als_data1 <
 804279c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80427a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80427a4:	d52c      	bpl.n	8042800 <bu27030_calculate_light+0x138>
    tmp1 =
        data_coefficient[1] * calculated_data.als_data0 +
 80427a6:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 80429d0 <bu27030_calculate_light+0x308>
 80427aa:	69fb      	ldr	r3, [r7, #28]
 80427ac:	ee07 3a90 	vmov	s15, r3
 80427b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80427b4:	ee27 7a27 	vmul.f32	s14, s14, s15
        data_coefficient[2] * calculated_data.als_data1;
 80427b8:	eddf 6a86 	vldr	s13, [pc, #536]	; 80429d4 <bu27030_calculate_light+0x30c>
 80427bc:	6a3b      	ldr	r3, [r7, #32]
 80427be:	ee07 3a90 	vmov	s15, r3
 80427c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80427c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
    tmp1 =
 80427ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80427ce:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    tmp2 =
        ((calculated_data.als_data1 / calculated_data.als_data0 -
 80427d2:	6a3a      	ldr	r2, [r7, #32]
 80427d4:	69fb      	ldr	r3, [r7, #28]
 80427d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80427da:	ee07 3a90 	vmov	s15, r3
 80427de:	eef8 7a67 	vcvt.f32.u32	s15, s15
          data_coefficient[3]) * data_coefficient[4] + 1.0);
 80427e2:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80429d8 <bu27030_calculate_light+0x310>
        ((calculated_data.als_data1 / calculated_data.als_data0 -
 80427e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
          data_coefficient[3]) * data_coefficient[4] + 1.0);
 80427ea:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 80429dc <bu27030_calculate_light+0x314>
 80427ee:	ee67 7a87 	vmul.f32	s15, s15, s14
    tmp2 =
 80427f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80427f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80427fa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 80427fe:	e0ab      	b.n	8042958 <bu27030_calculate_light+0x290>
  } else if (calculated_data.als_data1 <
 8042800:	6a3b      	ldr	r3, [r7, #32]
 8042802:	ee07 3a90 	vmov	s15, r3
 8042806:	eeb8 7a67 	vcvt.f32.u32	s14, s15
             calculated_data.als_data0 * data_coefficient[5]) {
 804280a:	69fb      	ldr	r3, [r7, #28]
 804280c:	ee07 3a90 	vmov	s15, r3
 8042810:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8042814:	eddf 6a72 	vldr	s13, [pc, #456]	; 80429e0 <bu27030_calculate_light+0x318>
 8042818:	ee67 7aa6 	vmul.f32	s15, s15, s13
  } else if (calculated_data.als_data1 <
 804281c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8042820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8042824:	d52c      	bpl.n	8042880 <bu27030_calculate_light+0x1b8>
    tmp1 =
        data_coefficient[6] * calculated_data.als_data0 +
 8042826:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 80429d0 <bu27030_calculate_light+0x308>
 804282a:	69fb      	ldr	r3, [r7, #28]
 804282c:	ee07 3a90 	vmov	s15, r3
 8042830:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8042834:	ee27 7a27 	vmul.f32	s14, s14, s15
        data_coefficient[7] * calculated_data.als_data1;
 8042838:	eddf 6a66 	vldr	s13, [pc, #408]	; 80429d4 <bu27030_calculate_light+0x30c>
 804283c:	6a3b      	ldr	r3, [r7, #32]
 804283e:	ee07 3a90 	vmov	s15, r3
 8042842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8042846:	ee66 7aa7 	vmul.f32	s15, s13, s15
    tmp1 =
 804284a:	ee77 7a27 	vadd.f32	s15, s14, s15
 804284e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    tmp2 =
        ((calculated_data.als_data1 / calculated_data.als_data0 -
 8042852:	6a3a      	ldr	r2, [r7, #32]
 8042854:	69fb      	ldr	r3, [r7, #28]
 8042856:	fbb2 f3f3 	udiv	r3, r2, r3
 804285a:	ee07 3a90 	vmov	s15, r3
 804285e:	eef8 7a67 	vcvt.f32.u32	s15, s15
          data_coefficient[8]) * data_coefficient[9] + 1.0);
 8042862:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80429d8 <bu27030_calculate_light+0x310>
        ((calculated_data.als_data1 / calculated_data.als_data0 -
 8042866:	ee77 7ac7 	vsub.f32	s15, s15, s14
          data_coefficient[8]) * data_coefficient[9] + 1.0);
 804286a:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80429e4 <bu27030_calculate_light+0x31c>
 804286e:	ee67 7a87 	vmul.f32	s15, s15, s14
    tmp2 =
 8042872:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8042876:	ee77 7a87 	vadd.f32	s15, s15, s14
 804287a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 804287e:	e06b      	b.n	8042958 <bu27030_calculate_light+0x290>
  } else if (calculated_data.als_data1 <
 8042880:	6a3b      	ldr	r3, [r7, #32]
 8042882:	ee07 3a90 	vmov	s15, r3
 8042886:	eeb8 7a67 	vcvt.f32.u32	s14, s15
             calculated_data.als_data0 * data_coefficient[10]) {
 804288a:	69fb      	ldr	r3, [r7, #28]
 804288c:	ee07 3a90 	vmov	s15, r3
 8042890:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8042894:	eddf 6a54 	vldr	s13, [pc, #336]	; 80429e8 <bu27030_calculate_light+0x320>
 8042898:	ee67 7aa6 	vmul.f32	s15, s15, s13
  } else if (calculated_data.als_data1 <
 804289c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80428a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80428a4:	d52c      	bpl.n	8042900 <bu27030_calculate_light+0x238>
    tmp1 =
        data_coefficient[11] * calculated_data.als_data0 +
 80428a6:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80429d0 <bu27030_calculate_light+0x308>
 80428aa:	69fb      	ldr	r3, [r7, #28]
 80428ac:	ee07 3a90 	vmov	s15, r3
 80428b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80428b4:	ee27 7a27 	vmul.f32	s14, s14, s15
        data_coefficient[12] * calculated_data.als_data1;
 80428b8:	eddf 6a4c 	vldr	s13, [pc, #304]	; 80429ec <bu27030_calculate_light+0x324>
 80428bc:	6a3b      	ldr	r3, [r7, #32]
 80428be:	ee07 3a90 	vmov	s15, r3
 80428c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80428c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
    tmp1 =
 80428ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80428ce:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    tmp2 =
        ((calculated_data.als_data1 / calculated_data.als_data0 -
 80428d2:	6a3a      	ldr	r2, [r7, #32]
 80428d4:	69fb      	ldr	r3, [r7, #28]
 80428d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80428da:	ee07 3a90 	vmov	s15, r3
 80428de:	eef8 7a67 	vcvt.f32.u32	s15, s15
          data_coefficient[13]) * data_coefficient[14] + 1.0);
 80428e2:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80429f0 <bu27030_calculate_light+0x328>
        ((calculated_data.als_data1 / calculated_data.als_data0 -
 80428e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
          data_coefficient[13]) * data_coefficient[14] + 1.0);
 80428ea:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 80428ee:	ee67 7a87 	vmul.f32	s15, s15, s14
    tmp2 =
 80428f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80428f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80428fa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 80428fe:	e02b      	b.n	8042958 <bu27030_calculate_light+0x290>
  } else {
    tmp1 =
        data_coefficient[15] * calculated_data.als_data0 +
 8042900:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80429d0 <bu27030_calculate_light+0x308>
 8042904:	69fb      	ldr	r3, [r7, #28]
 8042906:	ee07 3a90 	vmov	s15, r3
 804290a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 804290e:	ee27 7a27 	vmul.f32	s14, s14, s15
        data_coefficient[16] * calculated_data.als_data1;
 8042912:	eddf 6a36 	vldr	s13, [pc, #216]	; 80429ec <bu27030_calculate_light+0x324>
 8042916:	6a3b      	ldr	r3, [r7, #32]
 8042918:	ee07 3a90 	vmov	s15, r3
 804291c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8042920:	ee66 7aa7 	vmul.f32	s15, s13, s15
    tmp1 =
 8042924:	ee77 7a27 	vadd.f32	s15, s14, s15
 8042928:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    tmp2 =
        ((calculated_data.als_data1 / calculated_data.als_data0 -
 804292c:	6a3a      	ldr	r2, [r7, #32]
 804292e:	69fb      	ldr	r3, [r7, #28]
 8042930:	fbb2 f3f3 	udiv	r3, r2, r3
 8042934:	ee07 3a90 	vmov	s15, r3
 8042938:	eef8 7a67 	vcvt.f32.u32	s15, s15
          data_coefficient[17]) * data_coefficient[18] + 1.0);
 804293c:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80429f4 <bu27030_calculate_light+0x32c>
        ((calculated_data.als_data1 / calculated_data.als_data0 -
 8042940:	ee77 7ac7 	vsub.f32	s15, s15, s14
          data_coefficient[17]) * data_coefficient[18] + 1.0);
 8042944:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80429f8 <bu27030_calculate_light+0x330>
 8042948:	ee67 7a87 	vmul.f32	s15, s15, s14
    tmp2 =
 804294c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8042950:	ee77 7a87 	vadd.f32	s15, s15, s14
 8042954:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  }

  lx = tmp1 * tmp2;
 8042958:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 804295c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8042960:	ee67 7a27 	vmul.f32	s15, s14, s15
 8042964:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

  if (lx < 0) {
 8042968:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 804296c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8042970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8042974:	d505      	bpl.n	8042982 <bu27030_calculate_light+0x2ba>
    lx = 0;
 8042976:	f04f 0300 	mov.w	r3, #0
 804297a:	62fb      	str	r3, [r7, #44]	; 0x2c
    printf("lx is minus, error!!!\r\n");
 804297c:	481f      	ldr	r0, [pc, #124]	; (80429fc <bu27030_calculate_light+0x334>)
 804297e:	f01e f895 	bl	8060aac <puts>
  }

  printf("lux:%ld, data0=%d, data1=%d, gain0=%d, gain1=%d, als_time:%d\r\n",
 8042982:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8042984:	f7fd fde0 	bl	8040548 <__aeabi_f2d>
 8042988:	4602      	mov	r2, r0
 804298a:	460b      	mov	r3, r1
 804298c:	68b9      	ldr	r1, [r7, #8]
 804298e:	68f8      	ldr	r0, [r7, #12]
         lx, data.data0, data.data1, calculated_data.gain0,
 8042990:	8afc      	ldrh	r4, [r7, #22]
         calculated_data.gain1, calculated_data.als_time);
 8042992:	8b3d      	ldrh	r5, [r7, #24]
 8042994:	7d3e      	ldrb	r6, [r7, #20]
  printf("lux:%ld, data0=%d, data1=%d, gain0=%d, gain1=%d, als_time:%d\r\n",
 8042996:	9604      	str	r6, [sp, #16]
 8042998:	9503      	str	r5, [sp, #12]
 804299a:	9402      	str	r4, [sp, #8]
 804299c:	9001      	str	r0, [sp, #4]
 804299e:	9100      	str	r1, [sp, #0]
 80429a0:	4817      	ldr	r0, [pc, #92]	; (8042a00 <bu27030_calculate_light+0x338>)
 80429a2:	f01d ffe7 	bl	8060974 <iprintf>

  return (int)(lx);
 80429a6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80429aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80429ae:	ee17 3a90 	vmov	r3, s15
}
 80429b2:	4618      	mov	r0, r3
 80429b4:	3734      	adds	r7, #52	; 0x34
 80429b6:	46bd      	mov	sp, r7
 80429b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80429ba:	bf00      	nop
 80429bc:	080677b0 	.word	0x080677b0
 80429c0:	080677b4 	.word	0x080677b4
 80429c4:	08064e90 	.word	0x08064e90
 80429c8:	08064eb8 	.word	0x08064eb8
 80429cc:	3e947ae1 	.word	0x3e947ae1
 80429d0:	3ad7be98 	.word	0x3ad7be98
 80429d4:	b984a516 	.word	0xb984a516
 80429d8:	be947ae1 	.word	0xbe947ae1
 80429dc:	00000000 	.word	0x00000000
 80429e0:	3eb33333 	.word	0x3eb33333
 80429e4:	40baa7f0 	.word	0x40baa7f0
 80429e8:	3ecccccd 	.word	0x3ecccccd
 80429ec:	bb25ce5b 	.word	0xbb25ce5b
 80429f0:	be91eb85 	.word	0xbe91eb85
 80429f4:	be96872b 	.word	0xbe96872b
 80429f8:	bfb56042 	.word	0xbfb56042
 80429fc:	08064eec 	.word	0x08064eec
 8042a00:	08064f04 	.word	0x08064f04

08042a04 <bu27030_auto_change_gain0>:

int bu27030_auto_change_gain0(stmdev_ctx_t * ctx, unsigned int data0)
{
 8042a04:	b580      	push	{r7, lr}
 8042a06:	b084      	sub	sp, #16
 8042a08:	af00      	add	r7, sp, #0
 8042a0a:	6078      	str	r0, [r7, #4]
 8042a0c:	6039      	str	r1, [r7, #0]
  unsigned char target_gain = 0;
 8042a0e:	2300      	movs	r3, #0
 8042a10:	727b      	strb	r3, [r7, #9]
  unsigned short curret_gain0 = 0;
 8042a12:	2300      	movs	r3, #0
 8042a14:	817b      	strh	r3, [r7, #10]
  uint8_t buffer;

  int gain_changed = 0;
 8042a16:	2300      	movs	r3, #0
 8042a18:	60fb      	str	r3, [r7, #12]

  if (!ctx) {
 8042a1a:	687b      	ldr	r3, [r7, #4]
 8042a1c:	2b00      	cmp	r3, #0
 8042a1e:	d104      	bne.n	8042a2a <bu27030_auto_change_gain0+0x26>
    printf("Parameter error !!! \r\n");
 8042a20:	4838      	ldr	r0, [pc, #224]	; (8042b04 <bu27030_auto_change_gain0+0x100>)
 8042a22:	f01e f843 	bl	8060aac <puts>
    return gain_changed;
 8042a26:	68fb      	ldr	r3, [r7, #12]
 8042a28:	e068      	b.n	8042afc <bu27030_auto_change_gain0+0xf8>
  }
  //get gain reg_value
  light_platform_read(ctx->handle, BU27030_REG_GAIN, &buffer, 1);
 8042a2a:	687b      	ldr	r3, [r7, #4]
 8042a2c:	6898      	ldr	r0, [r3, #8]
 8042a2e:	f107 0208 	add.w	r2, r7, #8
 8042a32:	2301      	movs	r3, #1
 8042a34:	2142      	movs	r1, #66	; 0x42
 8042a36:	f7ff fdc9 	bl	80425cc <light_platform_read>
  if (buffer < 0) {
    printf("Read data from IC error.\r\n");
    return gain_changed;
  }
  //gain0
  curret_gain0 = gain_table[buffer >> 4];
 8042a3a:	7a3b      	ldrb	r3, [r7, #8]
 8042a3c:	091b      	lsrs	r3, r3, #4
 8042a3e:	b2db      	uxtb	r3, r3
 8042a40:	461a      	mov	r2, r3
 8042a42:	4b31      	ldr	r3, [pc, #196]	; (8042b08 <bu27030_auto_change_gain0+0x104>)
 8042a44:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8042a48:	817b      	strh	r3, [r7, #10]
  if (data0 > BU27030_SATURATION_THRESH) {
 8042a4a:	683b      	ldr	r3, [r7, #0]
 8042a4c:	f64e 2260 	movw	r2, #60000	; 0xea60
 8042a50:	4293      	cmp	r3, r2
 8042a52:	d91b      	bls.n	8042a8c <bu27030_auto_change_gain0+0x88>
    if (curret_gain0 > BU27030_32X) {   //current is  256X
 8042a54:	897b      	ldrh	r3, [r7, #10]
 8042a56:	2b20      	cmp	r3, #32
 8042a58:	d90a      	bls.n	8042a70 <bu27030_auto_change_gain0+0x6c>
      target_gain = DATA0_GAIN_X32 | (buffer & DATA1_GAIN_MASK);
 8042a5a:	7a3b      	ldrb	r3, [r7, #8]
 8042a5c:	b25b      	sxtb	r3, r3
 8042a5e:	f003 030f 	and.w	r3, r3, #15
 8042a62:	b25b      	sxtb	r3, r3
 8042a64:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8042a68:	b25b      	sxtb	r3, r3
 8042a6a:	b2db      	uxtb	r3, r3
 8042a6c:	727b      	strb	r3, [r7, #9]
 8042a6e:	e02b      	b.n	8042ac8 <bu27030_auto_change_gain0+0xc4>
    } else if (curret_gain0 > BU27030_1X) {     //current is 32X
 8042a70:	897b      	ldrh	r3, [r7, #10]
 8042a72:	2b01      	cmp	r3, #1
 8042a74:	d928      	bls.n	8042ac8 <bu27030_auto_change_gain0+0xc4>
      target_gain = DATA0_GAIN_X1 | (buffer & DATA1_GAIN_MASK);
 8042a76:	7a3b      	ldrb	r3, [r7, #8]
 8042a78:	b25b      	sxtb	r3, r3
 8042a7a:	f003 030f 	and.w	r3, r3, #15
 8042a7e:	b25b      	sxtb	r3, r3
 8042a80:	f043 0320 	orr.w	r3, r3, #32
 8042a84:	b25b      	sxtb	r3, r3
 8042a86:	b2db      	uxtb	r3, r3
 8042a88:	727b      	strb	r3, [r7, #9]
 8042a8a:	e01d      	b.n	8042ac8 <bu27030_auto_change_gain0+0xc4>
    }
  } else if (data0 < BU27030_INSUFFICIENCE_THRESH) {
 8042a8c:	683b      	ldr	r3, [r7, #0]
 8042a8e:	2b63      	cmp	r3, #99	; 0x63
 8042a90:	d81a      	bhi.n	8042ac8 <bu27030_auto_change_gain0+0xc4>
    if (curret_gain0 < BU27030_32X) {   //current is  1X
 8042a92:	897b      	ldrh	r3, [r7, #10]
 8042a94:	2b1f      	cmp	r3, #31
 8042a96:	d80a      	bhi.n	8042aae <bu27030_auto_change_gain0+0xaa>
      target_gain = DATA0_GAIN_X32 | (buffer & DATA1_GAIN_MASK);
 8042a98:	7a3b      	ldrb	r3, [r7, #8]
 8042a9a:	b25b      	sxtb	r3, r3
 8042a9c:	f003 030f 	and.w	r3, r3, #15
 8042aa0:	b25b      	sxtb	r3, r3
 8042aa2:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8042aa6:	b25b      	sxtb	r3, r3
 8042aa8:	b2db      	uxtb	r3, r3
 8042aaa:	727b      	strb	r3, [r7, #9]
 8042aac:	e00c      	b.n	8042ac8 <bu27030_auto_change_gain0+0xc4>
    } else if (curret_gain0 < BU27030_256X) {   //current is 32X
 8042aae:	897b      	ldrh	r3, [r7, #10]
 8042ab0:	2bff      	cmp	r3, #255	; 0xff
 8042ab2:	d809      	bhi.n	8042ac8 <bu27030_auto_change_gain0+0xc4>
      target_gain = DATA0_GAIN_X256 | (buffer & DATA1_GAIN_MASK);
 8042ab4:	7a3b      	ldrb	r3, [r7, #8]
 8042ab6:	b25b      	sxtb	r3, r3
 8042ab8:	f003 030f 	and.w	r3, r3, #15
 8042abc:	b25b      	sxtb	r3, r3
 8042abe:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8042ac2:	b25b      	sxtb	r3, r3
 8042ac4:	b2db      	uxtb	r3, r3
 8042ac6:	727b      	strb	r3, [r7, #9]
    }
  }

  if (target_gain) {
 8042ac8:	7a7b      	ldrb	r3, [r7, #9]
 8042aca:	2b00      	cmp	r3, #0
 8042acc:	d015      	beq.n	8042afa <bu27030_auto_change_gain0+0xf6>
    gain_changed = 1;
 8042ace:	2301      	movs	r3, #1
 8042ad0:	60fb      	str	r3, [r7, #12]
    light_platform_write(ctx->handle, BU27030_REG_GAIN, &target_gain, 1);
 8042ad2:	687b      	ldr	r3, [r7, #4]
 8042ad4:	6898      	ldr	r0, [r3, #8]
 8042ad6:	f107 0209 	add.w	r2, r7, #9
 8042ada:	2301      	movs	r3, #1
 8042adc:	2142      	movs	r1, #66	; 0x42
 8042ade:	f7ff fd4f 	bl	8042580 <light_platform_write>
    printf("bu27030_auto_change_gain current_gain0=%d, target=%d\r\n",
 8042ae2:	8979      	ldrh	r1, [r7, #10]
           curret_gain0, gain_table[target_gain >> 4]);
 8042ae4:	7a7b      	ldrb	r3, [r7, #9]
 8042ae6:	091b      	lsrs	r3, r3, #4
 8042ae8:	b2db      	uxtb	r3, r3
 8042aea:	461a      	mov	r2, r3
 8042aec:	4b06      	ldr	r3, [pc, #24]	; (8042b08 <bu27030_auto_change_gain0+0x104>)
 8042aee:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    printf("bu27030_auto_change_gain current_gain0=%d, target=%d\r\n",
 8042af2:	461a      	mov	r2, r3
 8042af4:	4805      	ldr	r0, [pc, #20]	; (8042b0c <bu27030_auto_change_gain0+0x108>)
 8042af6:	f01d ff3d 	bl	8060974 <iprintf>
  }

  return gain_changed;
 8042afa:	68fb      	ldr	r3, [r7, #12]
}
 8042afc:	4618      	mov	r0, r3
 8042afe:	3710      	adds	r7, #16
 8042b00:	46bd      	mov	sp, r7
 8042b02:	bd80      	pop	{r7, pc}
 8042b04:	08064f44 	.word	0x08064f44
 8042b08:	080677b4 	.word	0x080677b4
 8042b0c:	08064f5c 	.word	0x08064f5c

08042b10 <bu27030_auto_change_gain1>:

int bu27030_auto_change_gain1(stmdev_ctx_t * ctx, unsigned int data1)
{
 8042b10:	b580      	push	{r7, lr}
 8042b12:	b084      	sub	sp, #16
 8042b14:	af00      	add	r7, sp, #0
 8042b16:	6078      	str	r0, [r7, #4]
 8042b18:	6039      	str	r1, [r7, #0]

  unsigned char target_gain = 0;
 8042b1a:	2300      	movs	r3, #0
 8042b1c:	727b      	strb	r3, [r7, #9]
  unsigned short curret_gain1 = 0;
 8042b1e:	2300      	movs	r3, #0
 8042b20:	817b      	strh	r3, [r7, #10]
  uint8_t buffer;
  int gain_changed = 0;
 8042b22:	2300      	movs	r3, #0
 8042b24:	60fb      	str	r3, [r7, #12]
  if (!ctx) {
 8042b26:	687b      	ldr	r3, [r7, #4]
 8042b28:	2b00      	cmp	r3, #0
 8042b2a:	d104      	bne.n	8042b36 <bu27030_auto_change_gain1+0x26>
    printf("Parameter error !!! \r\n");
 8042b2c:	4837      	ldr	r0, [pc, #220]	; (8042c0c <bu27030_auto_change_gain1+0xfc>)
 8042b2e:	f01d ffbd 	bl	8060aac <puts>
    return gain_changed;
 8042b32:	68fb      	ldr	r3, [r7, #12]
 8042b34:	e066      	b.n	8042c04 <bu27030_auto_change_gain1+0xf4>
  }
  //get gain reg_value
  light_platform_read(ctx->handle, BU27030_REG_GAIN, &buffer, 1);
 8042b36:	687b      	ldr	r3, [r7, #4]
 8042b38:	6898      	ldr	r0, [r3, #8]
 8042b3a:	f107 0208 	add.w	r2, r7, #8
 8042b3e:	2301      	movs	r3, #1
 8042b40:	2142      	movs	r1, #66	; 0x42
 8042b42:	f7ff fd43 	bl	80425cc <light_platform_read>
  if (buffer < 0) {
    printf("Read data from IC error.\r\n");
    return gain_changed;
  }

  curret_gain1 = gain_table[buffer & DATA1_GAIN_MASK];
 8042b46:	7a3b      	ldrb	r3, [r7, #8]
 8042b48:	f003 030f 	and.w	r3, r3, #15
 8042b4c:	4a30      	ldr	r2, [pc, #192]	; (8042c10 <bu27030_auto_change_gain1+0x100>)
 8042b4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8042b52:	817b      	strh	r3, [r7, #10]
  if (data1 > BU27030_SATURATION_THRESH) {
 8042b54:	683b      	ldr	r3, [r7, #0]
 8042b56:	f64e 2260 	movw	r2, #60000	; 0xea60
 8042b5a:	4293      	cmp	r3, r2
 8042b5c:	d91b      	bls.n	8042b96 <bu27030_auto_change_gain1+0x86>
    if (curret_gain1 > BU27030_32X) {   //current is  256X
 8042b5e:	897b      	ldrh	r3, [r7, #10]
 8042b60:	2b20      	cmp	r3, #32
 8042b62:	d90a      	bls.n	8042b7a <bu27030_auto_change_gain1+0x6a>
      target_gain = DATA1_GAIN_X32 | (buffer & DATA0_GAIN_MASK);
 8042b64:	7a3b      	ldrb	r3, [r7, #8]
 8042b66:	b25b      	sxtb	r3, r3
 8042b68:	f023 030f 	bic.w	r3, r3, #15
 8042b6c:	b25b      	sxtb	r3, r3
 8042b6e:	f043 030a 	orr.w	r3, r3, #10
 8042b72:	b25b      	sxtb	r3, r3
 8042b74:	b2db      	uxtb	r3, r3
 8042b76:	727b      	strb	r3, [r7, #9]
 8042b78:	e02b      	b.n	8042bd2 <bu27030_auto_change_gain1+0xc2>
    } else if (curret_gain1 > BU27030_1X) {     //current is 32X
 8042b7a:	897b      	ldrh	r3, [r7, #10]
 8042b7c:	2b01      	cmp	r3, #1
 8042b7e:	d928      	bls.n	8042bd2 <bu27030_auto_change_gain1+0xc2>
      target_gain = DATA1_GAIN_X1 | (buffer & DATA0_GAIN_MASK);
 8042b80:	7a3b      	ldrb	r3, [r7, #8]
 8042b82:	b25b      	sxtb	r3, r3
 8042b84:	f023 030f 	bic.w	r3, r3, #15
 8042b88:	b25b      	sxtb	r3, r3
 8042b8a:	f043 0302 	orr.w	r3, r3, #2
 8042b8e:	b25b      	sxtb	r3, r3
 8042b90:	b2db      	uxtb	r3, r3
 8042b92:	727b      	strb	r3, [r7, #9]
 8042b94:	e01d      	b.n	8042bd2 <bu27030_auto_change_gain1+0xc2>
    }
  } else if (data1 < BU27030_INSUFFICIENCE_THRESH) {
 8042b96:	683b      	ldr	r3, [r7, #0]
 8042b98:	2b63      	cmp	r3, #99	; 0x63
 8042b9a:	d81a      	bhi.n	8042bd2 <bu27030_auto_change_gain1+0xc2>
    if (curret_gain1 < BU27030_32X) {   //current is  1X
 8042b9c:	897b      	ldrh	r3, [r7, #10]
 8042b9e:	2b1f      	cmp	r3, #31
 8042ba0:	d80a      	bhi.n	8042bb8 <bu27030_auto_change_gain1+0xa8>
      target_gain = DATA1_GAIN_X32 | (buffer & DATA0_GAIN_MASK);
 8042ba2:	7a3b      	ldrb	r3, [r7, #8]
 8042ba4:	b25b      	sxtb	r3, r3
 8042ba6:	f023 030f 	bic.w	r3, r3, #15
 8042baa:	b25b      	sxtb	r3, r3
 8042bac:	f043 030a 	orr.w	r3, r3, #10
 8042bb0:	b25b      	sxtb	r3, r3
 8042bb2:	b2db      	uxtb	r3, r3
 8042bb4:	727b      	strb	r3, [r7, #9]
 8042bb6:	e00c      	b.n	8042bd2 <bu27030_auto_change_gain1+0xc2>
    } else if (curret_gain1 < BU27030_256X) {   //current is 32X
 8042bb8:	897b      	ldrh	r3, [r7, #10]
 8042bba:	2bff      	cmp	r3, #255	; 0xff
 8042bbc:	d809      	bhi.n	8042bd2 <bu27030_auto_change_gain1+0xc2>
      target_gain = DATA1_GAIN_X256 | (buffer & DATA0_GAIN_MASK);
 8042bbe:	7a3b      	ldrb	r3, [r7, #8]
 8042bc0:	b25b      	sxtb	r3, r3
 8042bc2:	f023 030f 	bic.w	r3, r3, #15
 8042bc6:	b25b      	sxtb	r3, r3
 8042bc8:	f043 030c 	orr.w	r3, r3, #12
 8042bcc:	b25b      	sxtb	r3, r3
 8042bce:	b2db      	uxtb	r3, r3
 8042bd0:	727b      	strb	r3, [r7, #9]
    }
  }

  if (target_gain) {
 8042bd2:	7a7b      	ldrb	r3, [r7, #9]
 8042bd4:	2b00      	cmp	r3, #0
 8042bd6:	d014      	beq.n	8042c02 <bu27030_auto_change_gain1+0xf2>
    gain_changed = 1;
 8042bd8:	2301      	movs	r3, #1
 8042bda:	60fb      	str	r3, [r7, #12]
    light_platform_write(ctx->handle, BU27030_REG_GAIN, &target_gain, 1);
 8042bdc:	687b      	ldr	r3, [r7, #4]
 8042bde:	6898      	ldr	r0, [r3, #8]
 8042be0:	f107 0209 	add.w	r2, r7, #9
 8042be4:	2301      	movs	r3, #1
 8042be6:	2142      	movs	r1, #66	; 0x42
 8042be8:	f7ff fcca 	bl	8042580 <light_platform_write>
    printf("bu27030_auto_change_gain1 current_gain1=%d, target=%d\r\n",
 8042bec:	8979      	ldrh	r1, [r7, #10]
           curret_gain1, gain_table[target_gain & DATA1_GAIN_MASK]);
 8042bee:	7a7b      	ldrb	r3, [r7, #9]
 8042bf0:	f003 030f 	and.w	r3, r3, #15
 8042bf4:	4a06      	ldr	r2, [pc, #24]	; (8042c10 <bu27030_auto_change_gain1+0x100>)
 8042bf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    printf("bu27030_auto_change_gain1 current_gain1=%d, target=%d\r\n",
 8042bfa:	461a      	mov	r2, r3
 8042bfc:	4805      	ldr	r0, [pc, #20]	; (8042c14 <bu27030_auto_change_gain1+0x104>)
 8042bfe:	f01d feb9 	bl	8060974 <iprintf>
  }

  return gain_changed;
 8042c02:	68fb      	ldr	r3, [r7, #12]
}
 8042c04:	4618      	mov	r0, r3
 8042c06:	3710      	adds	r7, #16
 8042c08:	46bd      	mov	sp, r7
 8042c0a:	bd80      	pop	{r7, pc}
 8042c0c:	08064f44 	.word	0x08064f44
 8042c10:	080677b4 	.word	0x080677b4
 8042c14:	08064f94 	.word	0x08064f94

08042c18 <bu27030_get_raw_data_and_calculated_lux_without_scale>:

/* ALS polling routine */
static void bu27030_get_raw_data_and_calculated_lux_without_scale(stmdev_ctx_t *
                                                                  ctx)
{
 8042c18:	b580      	push	{r7, lr}
 8042c1a:	b086      	sub	sp, #24
 8042c1c:	af00      	add	r7, sp, #0
 8042c1e:	6078      	str	r0, [r7, #4]
  uint8_t tmp = 0;
 8042c20:	2300      	movs	r3, #0
 8042c22:	73fb      	strb	r3, [r7, #15]
  int gain_changed = 0;
 8042c24:	2300      	movs	r3, #0
 8042c26:	617b      	str	r3, [r7, #20]

  //get valid from BU27030_REG_CONTROL(0x43)
  light_platform_read(ctx->handle, BU27030_REG_CONTROL, &tmp, 1);
 8042c28:	687b      	ldr	r3, [r7, #4]
 8042c2a:	6898      	ldr	r0, [r3, #8]
 8042c2c:	f107 020f 	add.w	r2, r7, #15
 8042c30:	2301      	movs	r3, #1
 8042c32:	2143      	movs	r1, #67	; 0x43
 8042c34:	f7ff fcca 	bl	80425cc <light_platform_read>
  if (tmp < 0) {
    printf("Read data from IC error.\r\n");
    return;
  }
  uint8_t POWER_ON = 1;
 8042c38:	2301      	movs	r3, #1
 8042c3a:	73bb      	strb	r3, [r7, #14]
  if (0 == (tmp & POWER_ON)) {
 8042c3c:	7bfa      	ldrb	r2, [r7, #15]
 8042c3e:	7bbb      	ldrb	r3, [r7, #14]
 8042c40:	4013      	ands	r3, r2
 8042c42:	b2db      	uxtb	r3, r3
 8042c44:	2b00      	cmp	r3, #0
 8042c46:	d10d      	bne.n	8042c64 <bu27030_get_raw_data_and_calculated_lux_without_scale+0x4c>
    printf(" ic is abnormal, re-initialize, and re-enable \r\n");
 8042c48:	4848      	ldr	r0, [pc, #288]	; (8042d6c <bu27030_get_raw_data_and_calculated_lux_without_scale+0x154>)
 8042c4a:	f01d ff2f 	bl	8060aac <puts>
    bu27030_init_client(ctx);
 8042c4e:	6878      	ldr	r0, [r7, #4]
 8042c50:	f7ff fd06 	bl	8042660 <bu27030_init_client>
    light_platform_write(ctx->handle, BU27030_REG_CONTROL, &POWER_ON, 1);
 8042c54:	687b      	ldr	r3, [r7, #4]
 8042c56:	6898      	ldr	r0, [r3, #8]
 8042c58:	f107 020e 	add.w	r2, r7, #14
 8042c5c:	2301      	movs	r3, #1
 8042c5e:	2143      	movs	r1, #67	; 0x43
 8042c60:	f7ff fc8e 	bl	8042580 <light_platform_write>
  }
  //BU27030_WARNING("Data valid BU27030_REG_CONTROL(0x%x) = 0x%x\n", BU27030_REG_CONTROL, result);
  if ((tmp & ALS_VALID_HIGH) == 0) {    //not valid
 8042c64:	7bfb      	ldrb	r3, [r7, #15]
 8042c66:	b25b      	sxtb	r3, r3
 8042c68:	2b00      	cmp	r3, #0
 8042c6a:	db03      	blt.n	8042c74 <bu27030_get_raw_data_and_calculated_lux_without_scale+0x5c>
    printf("Data Not valid. But it does not matter, please ignore it.\r\n");
 8042c6c:	4840      	ldr	r0, [pc, #256]	; (8042d70 <bu27030_get_raw_data_and_calculated_lux_without_scale+0x158>)
 8042c6e:	f01d ff1d 	bl	8060aac <puts>
 8042c72:	e077      	b.n	8042d64 <bu27030_get_raw_data_and_calculated_lux_without_scale+0x14c>
  } else {
    unsigned char gain = 0;
 8042c74:	2300      	movs	r3, #0
 8042c76:	74fb      	strb	r3, [r7, #19]
    unsigned char time = 0;
 8042c78:	2300      	movs	r3, #0
 8042c7a:	74bb      	strb	r3, [r7, #18]

    //read data0
    uint8_t data0_0, data0_1;
    light_platform_read(ctx->handle, BU27030_REG_DATA0_0, &data0_0, 1);
 8042c7c:	687b      	ldr	r3, [r7, #4]
 8042c7e:	6898      	ldr	r0, [r3, #8]
 8042c80:	f107 020d 	add.w	r2, r7, #13
 8042c84:	2301      	movs	r3, #1
 8042c86:	2150      	movs	r1, #80	; 0x50
 8042c88:	f7ff fca0 	bl	80425cc <light_platform_read>
    light_platform_read(ctx->handle, BU27030_REG_DATA0_1, &data0_1, 1);
 8042c8c:	687b      	ldr	r3, [r7, #4]
 8042c8e:	6898      	ldr	r0, [r3, #8]
 8042c90:	f107 020c 	add.w	r2, r7, #12
 8042c94:	2301      	movs	r3, #1
 8042c96:	2151      	movs	r1, #81	; 0x51
 8042c98:	f7ff fc98 	bl	80425cc <light_platform_read>
    uint16_t tmp_data = (uint16_t) data0_1;
 8042c9c:	7b3b      	ldrb	r3, [r7, #12]
 8042c9e:	823b      	strh	r3, [r7, #16]
    tmp_data = (tmp_data << 8) | data0_0;
 8042ca0:	8a3b      	ldrh	r3, [r7, #16]
 8042ca2:	021b      	lsls	r3, r3, #8
 8042ca4:	b21a      	sxth	r2, r3
 8042ca6:	7b7b      	ldrb	r3, [r7, #13]
 8042ca8:	b21b      	sxth	r3, r3
 8042caa:	4313      	orrs	r3, r2
 8042cac:	b21b      	sxth	r3, r3
 8042cae:	823b      	strh	r3, [r7, #16]

    if (tmp_data < 0) {
      printf("%s: i2c read data0 fail.\r\n", __func__);
      return;
    }
    data.data0 = (unsigned int)tmp_data;
 8042cb0:	8a3b      	ldrh	r3, [r7, #16]
 8042cb2:	4a30      	ldr	r2, [pc, #192]	; (8042d74 <bu27030_get_raw_data_and_calculated_lux_without_scale+0x15c>)
 8042cb4:	6013      	str	r3, [r2, #0]

    //read data1
    uint8_t data1_0, data1_1;
    light_platform_read(ctx->handle, BU27030_REG_DATA1_0, &data1_0, 1);
 8042cb6:	687b      	ldr	r3, [r7, #4]
 8042cb8:	6898      	ldr	r0, [r3, #8]
 8042cba:	f107 020b 	add.w	r2, r7, #11
 8042cbe:	2301      	movs	r3, #1
 8042cc0:	2152      	movs	r1, #82	; 0x52
 8042cc2:	f7ff fc83 	bl	80425cc <light_platform_read>
    light_platform_read(ctx->handle, BU27030_REG_DATA1_1, &data1_1, 1);
 8042cc6:	687b      	ldr	r3, [r7, #4]
 8042cc8:	6898      	ldr	r0, [r3, #8]
 8042cca:	f107 020a 	add.w	r2, r7, #10
 8042cce:	2301      	movs	r3, #1
 8042cd0:	2153      	movs	r1, #83	; 0x53
 8042cd2:	f7ff fc7b 	bl	80425cc <light_platform_read>
    tmp_data = (uint16_t) data1_1;
 8042cd6:	7abb      	ldrb	r3, [r7, #10]
 8042cd8:	823b      	strh	r3, [r7, #16]
    tmp_data = (tmp_data << 8) | data1_0;
 8042cda:	8a3b      	ldrh	r3, [r7, #16]
 8042cdc:	021b      	lsls	r3, r3, #8
 8042cde:	b21a      	sxth	r2, r3
 8042ce0:	7afb      	ldrb	r3, [r7, #11]
 8042ce2:	b21b      	sxth	r3, r3
 8042ce4:	4313      	orrs	r3, r2
 8042ce6:	b21b      	sxth	r3, r3
 8042ce8:	823b      	strh	r3, [r7, #16]

    if (tmp_data < 0) {
      printf("%s: i2c read data1 fail.\r\n", __func__);
      return;
    }
    data.data1 = (unsigned int)tmp_data;
 8042cea:	8a3b      	ldrh	r3, [r7, #16]
 8042cec:	4a21      	ldr	r2, [pc, #132]	; (8042d74 <bu27030_get_raw_data_and_calculated_lux_without_scale+0x15c>)
 8042cee:	6053      	str	r3, [r2, #4]

    //read gain
    light_platform_read(ctx->handle, BU27030_REG_GAIN, &tmp, 1);
 8042cf0:	687b      	ldr	r3, [r7, #4]
 8042cf2:	6898      	ldr	r0, [r3, #8]
 8042cf4:	f107 020f 	add.w	r2, r7, #15
 8042cf8:	2301      	movs	r3, #1
 8042cfa:	2142      	movs	r1, #66	; 0x42
 8042cfc:	f7ff fc66 	bl	80425cc <light_platform_read>
    if (tmp < 0) {
      printf("%s: i2c read gain fail.\r\n", __func__);
      return;
    }
    gain = (unsigned char)tmp;
 8042d00:	7bfb      	ldrb	r3, [r7, #15]
 8042d02:	74fb      	strb	r3, [r7, #19]

#if AGC_SUPPORT
    //auto change gain
    //Be noted: if agc was enabled, you must make sure that agc can not be happened on the first time.
    //Then you should set the default value carefullly in bu27030_init_client() to avoid data overflow on the first time.
    gain_changed = bu27030_auto_change_gain0(ctx, data.data0);
 8042d04:	4b1b      	ldr	r3, [pc, #108]	; (8042d74 <bu27030_get_raw_data_and_calculated_lux_without_scale+0x15c>)
 8042d06:	681b      	ldr	r3, [r3, #0]
 8042d08:	4619      	mov	r1, r3
 8042d0a:	6878      	ldr	r0, [r7, #4]
 8042d0c:	f7ff fe7a 	bl	8042a04 <bu27030_auto_change_gain0>
 8042d10:	6178      	str	r0, [r7, #20]
    gain_changed |= bu27030_auto_change_gain1(ctx, data.data1);
 8042d12:	4b18      	ldr	r3, [pc, #96]	; (8042d74 <bu27030_get_raw_data_and_calculated_lux_without_scale+0x15c>)
 8042d14:	685b      	ldr	r3, [r3, #4]
 8042d16:	4619      	mov	r1, r3
 8042d18:	6878      	ldr	r0, [r7, #4]
 8042d1a:	f7ff fef9 	bl	8042b10 <bu27030_auto_change_gain1>
 8042d1e:	4602      	mov	r2, r0
 8042d20:	697b      	ldr	r3, [r7, #20]
 8042d22:	4313      	orrs	r3, r2
 8042d24:	617b      	str	r3, [r7, #20]
    if (gain_changed) {
 8042d26:	697b      	ldr	r3, [r7, #20]
 8042d28:	2b00      	cmp	r3, #0
 8042d2a:	d004      	beq.n	8042d36 <bu27030_get_raw_data_and_calculated_lux_without_scale+0x11e>
      printf("%s: gain changed return.\r\n", __func__);
 8042d2c:	4912      	ldr	r1, [pc, #72]	; (8042d78 <bu27030_get_raw_data_and_calculated_lux_without_scale+0x160>)
 8042d2e:	4813      	ldr	r0, [pc, #76]	; (8042d7c <bu27030_get_raw_data_and_calculated_lux_without_scale+0x164>)
 8042d30:	f01d fe20 	bl	8060974 <iprintf>
 8042d34:	e016      	b.n	8042d64 <bu27030_get_raw_data_and_calculated_lux_without_scale+0x14c>
      return;
    }
#endif

    //read time
    light_platform_read(ctx->handle, BU27030_REG_TIMING, &tmp, 1);
 8042d36:	687b      	ldr	r3, [r7, #4]
 8042d38:	6898      	ldr	r0, [r3, #8]
 8042d3a:	f107 020f 	add.w	r2, r7, #15
 8042d3e:	2301      	movs	r3, #1
 8042d40:	2141      	movs	r1, #65	; 0x41
 8042d42:	f7ff fc43 	bl	80425cc <light_platform_read>
    if (tmp < 0) {
      printf("%s: i2c read time fail.\r\n", __func__);
      return;
    }

    time = (unsigned char)tmp;
 8042d46:	7bfb      	ldrb	r3, [r7, #15]
 8042d48:	74bb      	strb	r3, [r7, #18]
    light_data = (float)bu27030_calculate_light(data, gain, time);
 8042d4a:	7cbb      	ldrb	r3, [r7, #18]
 8042d4c:	7cfa      	ldrb	r2, [r7, #19]
 8042d4e:	4909      	ldr	r1, [pc, #36]	; (8042d74 <bu27030_get_raw_data_and_calculated_lux_without_scale+0x15c>)
 8042d50:	c903      	ldmia	r1, {r0, r1}
 8042d52:	f7ff fcb9 	bl	80426c8 <bu27030_calculate_light>
 8042d56:	ee07 0a90 	vmov	s15, r0
 8042d5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8042d5e:	4b08      	ldr	r3, [pc, #32]	; (8042d80 <bu27030_get_raw_data_and_calculated_lux_without_scale+0x168>)
 8042d60:	edc3 7a00 	vstr	s15, [r3]
  }
}
 8042d64:	3718      	adds	r7, #24
 8042d66:	46bd      	mov	sp, r7
 8042d68:	bd80      	pop	{r7, pc}
 8042d6a:	bf00      	nop
 8042d6c:	08064fcc 	.word	0x08064fcc
 8042d70:	08064ffc 	.word	0x08064ffc
 8042d74:	20007f6c 	.word	0x20007f6c
 8042d78:	080677d4 	.word	0x080677d4
 8042d7c:	08065038 	.word	0x08065038
 8042d80:	20007f50 	.word	0x20007f50
 8042d84:	00000000 	.word	0x00000000

08042d88 <bu27030_light_calibration>:

static int bu27030_light_calibration(stmdev_ctx_t * ctx, float *lux_scale)
{
 8042d88:	b5b0      	push	{r4, r5, r7, lr}
 8042d8a:	b092      	sub	sp, #72	; 0x48
 8042d8c:	af00      	add	r7, sp, #0
 8042d8e:	6078      	str	r0, [r7, #4]
 8042d90:	6039      	str	r1, [r7, #0]
  int cali_loop_count = 0;
 8042d92:	2300      	movs	r3, #0
 8042d94:	647b      	str	r3, [r7, #68]	; 0x44
  float raw_data_for_cali[NUM_FOR_CALI_SCALE];
  memset(raw_data_for_cali, 0, sizeof(raw_data_for_cali));
 8042d96:	f107 0308 	add.w	r3, r7, #8
 8042d9a:	2228      	movs	r2, #40	; 0x28
 8042d9c:	2100      	movs	r1, #0
 8042d9e:	4618      	mov	r0, r3
 8042da0:	f01d f90c 	bl	805ffbc <memset>
  do {
    bu27030_get_raw_data_and_calculated_lux_without_scale(&light_dev_ctx);
 8042da4:	4856      	ldr	r0, [pc, #344]	; (8042f00 <bu27030_light_calibration+0x178>)
 8042da6:	f7ff ff37 	bl	8042c18 <bu27030_get_raw_data_and_calculated_lux_without_scale>
    cali_loop_count++;
 8042daa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8042dac:	3301      	adds	r3, #1
 8042dae:	647b      	str	r3, [r7, #68]	; 0x44
    platform_delay(100);        //mesasure_time is 100ms one time
 8042db0:	2064      	movs	r0, #100	; 0x64
 8042db2:	f7ff fc31 	bl	8042618 <platform_delay>
    if (cali_loop_count > skip_num) {
 8042db6:	4b53      	ldr	r3, [pc, #332]	; (8042f04 <bu27030_light_calibration+0x17c>)
 8042db8:	681b      	ldr	r3, [r3, #0]
 8042dba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8042dbc:	429a      	cmp	r2, r3
 8042dbe:	dd0c      	ble.n	8042dda <bu27030_light_calibration+0x52>
      raw_data_for_cali[cali_loop_count - skip_num - 1] = light_data;   // need consider again or atime changed
 8042dc0:	4b50      	ldr	r3, [pc, #320]	; (8042f04 <bu27030_light_calibration+0x17c>)
 8042dc2:	681b      	ldr	r3, [r3, #0]
 8042dc4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8042dc6:	1ad3      	subs	r3, r2, r3
 8042dc8:	3b01      	subs	r3, #1
 8042dca:	4a4f      	ldr	r2, [pc, #316]	; (8042f08 <bu27030_light_calibration+0x180>)
 8042dcc:	6812      	ldr	r2, [r2, #0]
 8042dce:	009b      	lsls	r3, r3, #2
 8042dd0:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8042dd4:	440b      	add	r3, r1
 8042dd6:	3b40      	subs	r3, #64	; 0x40
 8042dd8:	601a      	str	r2, [r3, #0]
    }
  } while (cali_loop_count - skip_num <= NUM_FOR_CALI_SCALE);
 8042dda:	4b4a      	ldr	r3, [pc, #296]	; (8042f04 <bu27030_light_calibration+0x17c>)
 8042ddc:	681b      	ldr	r3, [r3, #0]
 8042dde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8042de0:	1ad3      	subs	r3, r2, r3
 8042de2:	2b0a      	cmp	r3, #10
 8042de4:	ddde      	ble.n	8042da4 <bu27030_light_calibration+0x1c>

  float sumed_raw_data = 0;
 8042de6:	f04f 0300 	mov.w	r3, #0
 8042dea:	643b      	str	r3, [r7, #64]	; 0x40
  for (int i = 0; i < NUM_FOR_CALI_SCALE; i++) {
 8042dec:	2300      	movs	r3, #0
 8042dee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8042df0:	e010      	b.n	8042e14 <bu27030_light_calibration+0x8c>
    sumed_raw_data += raw_data_for_cali[i];
 8042df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8042df4:	009b      	lsls	r3, r3, #2
 8042df6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8042dfa:	4413      	add	r3, r2
 8042dfc:	3b40      	subs	r3, #64	; 0x40
 8042dfe:	edd3 7a00 	vldr	s15, [r3]
 8042e02:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8042e06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8042e0a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
  for (int i = 0; i < NUM_FOR_CALI_SCALE; i++) {
 8042e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8042e10:	3301      	adds	r3, #1
 8042e12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8042e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8042e16:	2b09      	cmp	r3, #9
 8042e18:	ddeb      	ble.n	8042df2 <bu27030_light_calibration+0x6a>
  }

  float average = sumed_raw_data / NUM_FOR_CALI_SCALE;
 8042e1a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8042e1e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8042e22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8042e26:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
  float var = 0;
 8042e2a:	f04f 0300 	mov.w	r3, #0
 8042e2e:	63bb      	str	r3, [r7, #56]	; 0x38
  for (int j = 0; j <= NUM_FOR_CALI_SCALE; j++) {
 8042e30:	2300      	movs	r3, #0
 8042e32:	637b      	str	r3, [r7, #52]	; 0x34
 8042e34:	e036      	b.n	8042ea4 <bu27030_light_calibration+0x11c>
    var += pow(raw_data_for_cali[j] - average, 2) / NUM_FOR_CALI_SCALE; //var
 8042e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8042e38:	009b      	lsls	r3, r3, #2
 8042e3a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8042e3e:	4413      	add	r3, r2
 8042e40:	3b40      	subs	r3, #64	; 0x40
 8042e42:	ed93 7a00 	vldr	s14, [r3]
 8042e46:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8042e4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8042e4e:	ee17 0a90 	vmov	r0, s15
 8042e52:	f7fd fb79 	bl	8040548 <__aeabi_f2d>
 8042e56:	4602      	mov	r2, r0
 8042e58:	460b      	mov	r3, r1
 8042e5a:	ed9f 1b27 	vldr	d1, [pc, #156]	; 8042ef8 <bu27030_light_calibration+0x170>
 8042e5e:	ec43 2b10 	vmov	d0, r2, r3
 8042e62:	f01f fee5 	bl	8062c30 <pow>
 8042e66:	ec51 0b10 	vmov	r0, r1, d0
 8042e6a:	f04f 0200 	mov.w	r2, #0
 8042e6e:	4b27      	ldr	r3, [pc, #156]	; (8042f0c <bu27030_light_calibration+0x184>)
 8042e70:	f7fd fcec 	bl	804084c <__aeabi_ddiv>
 8042e74:	4602      	mov	r2, r0
 8042e76:	460b      	mov	r3, r1
 8042e78:	4614      	mov	r4, r2
 8042e7a:	461d      	mov	r5, r3
 8042e7c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8042e7e:	f7fd fb63 	bl	8040548 <__aeabi_f2d>
 8042e82:	4602      	mov	r2, r0
 8042e84:	460b      	mov	r3, r1
 8042e86:	4620      	mov	r0, r4
 8042e88:	4629      	mov	r1, r5
 8042e8a:	f7fd f9ff 	bl	804028c <__adddf3>
 8042e8e:	4602      	mov	r2, r0
 8042e90:	460b      	mov	r3, r1
 8042e92:	4610      	mov	r0, r2
 8042e94:	4619      	mov	r1, r3
 8042e96:	f7fd fea7 	bl	8040be8 <__aeabi_d2f>
 8042e9a:	4603      	mov	r3, r0
 8042e9c:	63bb      	str	r3, [r7, #56]	; 0x38
  for (int j = 0; j <= NUM_FOR_CALI_SCALE; j++) {
 8042e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8042ea0:	3301      	adds	r3, #1
 8042ea2:	637b      	str	r3, [r7, #52]	; 0x34
 8042ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8042ea6:	2b0a      	cmp	r3, #10
 8042ea8:	ddc5      	ble.n	8042e36 <bu27030_light_calibration+0xae>
  }

  //float standard = pow(var,0.5);//std

  if (var > 100 || average < 100) {
 8042eaa:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8042eae:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8042f10 <bu27030_light_calibration+0x188>
 8042eb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8042eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8042eba:	dc08      	bgt.n	8042ece <bu27030_light_calibration+0x146>
 8042ebc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8042ec0:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8042f10 <bu27030_light_calibration+0x188>
 8042ec4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8042ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8042ecc:	d505      	bpl.n	8042eda <bu27030_light_calibration+0x152>
    printf("data does not meet requiement!");
 8042ece:	4811      	ldr	r0, [pc, #68]	; (8042f14 <bu27030_light_calibration+0x18c>)
 8042ed0:	f01d fd50 	bl	8060974 <iprintf>
    return -1;
 8042ed4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8042ed8:	e00a      	b.n	8042ef0 <bu27030_light_calibration+0x168>
  }
  *lux_scale = target_lux / average;
 8042eda:	4b0f      	ldr	r3, [pc, #60]	; (8042f18 <bu27030_light_calibration+0x190>)
 8042edc:	edd3 6a00 	vldr	s13, [r3]
 8042ee0:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8042ee4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8042ee8:	683b      	ldr	r3, [r7, #0]
 8042eea:	edc3 7a00 	vstr	s15, [r3]
  return 0;
 8042eee:	2300      	movs	r3, #0
}
 8042ef0:	4618      	mov	r0, r3
 8042ef2:	3748      	adds	r7, #72	; 0x48
 8042ef4:	46bd      	mov	sp, r7
 8042ef6:	bdb0      	pop	{r4, r5, r7, pc}
 8042ef8:	00000000 	.word	0x00000000
 8042efc:	40000000 	.word	0x40000000
 8042f00:	20007f58 	.word	0x20007f58
 8042f04:	20007008 	.word	0x20007008
 8042f08:	20007f50 	.word	0x20007f50
 8042f0c:	40240000 	.word	0x40240000
 8042f10:	42c80000 	.word	0x42c80000
 8042f14:	08065054 	.word	0x08065054
 8042f18:	2000700c 	.word	0x2000700c

08042f1c <bu27030_light_init>:

/*
 * @brief  platform specific initialization (platform dependent)
 */
int bu27030_light_init(void *para, void *para2)
{
 8042f1c:	b580      	push	{r7, lr}
 8042f1e:	b082      	sub	sp, #8
 8042f20:	af00      	add	r7, sp, #0
 8042f22:	6078      	str	r0, [r7, #4]
 8042f24:	6039      	str	r1, [r7, #0]
  light_init_parms = (platform_prams *) para;
 8042f26:	4a18      	ldr	r2, [pc, #96]	; (8042f88 <bu27030_light_init+0x6c>)
 8042f28:	687b      	ldr	r3, [r7, #4]
 8042f2a:	6013      	str	r3, [r2, #0]
  /* Initialize mems driver interface */
  light_dev_ctx.write_reg = light_platform_write;
 8042f2c:	4b17      	ldr	r3, [pc, #92]	; (8042f8c <bu27030_light_init+0x70>)
 8042f2e:	4a18      	ldr	r2, [pc, #96]	; (8042f90 <bu27030_light_init+0x74>)
 8042f30:	601a      	str	r2, [r3, #0]
  light_dev_ctx.read_reg = light_platform_read;
 8042f32:	4b16      	ldr	r3, [pc, #88]	; (8042f8c <bu27030_light_init+0x70>)
 8042f34:	4a17      	ldr	r2, [pc, #92]	; (8042f94 <bu27030_light_init+0x78>)
 8042f36:	605a      	str	r2, [r3, #4]
  light_dev_ctx.handle = &light_init_parms->i2c_handle;
 8042f38:	4b13      	ldr	r3, [pc, #76]	; (8042f88 <bu27030_light_init+0x6c>)
 8042f3a:	681b      	ldr	r3, [r3, #0]
 8042f3c:	3304      	adds	r3, #4
 8042f3e:	4a13      	ldr	r2, [pc, #76]	; (8042f8c <bu27030_light_init+0x70>)
 8042f40:	6093      	str	r3, [r2, #8]

  /* Check device ID */
  light_platform_read(light_dev_ctx.handle, (uint8_t) BU27030_REG_PART_ID,
 8042f42:	4b12      	ldr	r3, [pc, #72]	; (8042f8c <bu27030_light_init+0x70>)
 8042f44:	6898      	ldr	r0, [r3, #8]
 8042f46:	2301      	movs	r3, #1
 8042f48:	4a13      	ldr	r2, [pc, #76]	; (8042f98 <bu27030_light_init+0x7c>)
 8042f4a:	2192      	movs	r1, #146	; 0x92
 8042f4c:	f7ff fb3e 	bl	80425cc <light_platform_read>
                      &whoamI, 1);

  printf("bu27030 whoamI: 0x%x %p %x \r\n", whoamI, light_dev_ctx.handle,
 8042f50:	4b11      	ldr	r3, [pc, #68]	; (8042f98 <bu27030_light_init+0x7c>)
 8042f52:	781b      	ldrb	r3, [r3, #0]
 8042f54:	4619      	mov	r1, r3
 8042f56:	4b0d      	ldr	r3, [pc, #52]	; (8042f8c <bu27030_light_init+0x70>)
 8042f58:	689a      	ldr	r2, [r3, #8]
 8042f5a:	2392      	movs	r3, #146	; 0x92
 8042f5c:	480f      	ldr	r0, [pc, #60]	; (8042f9c <bu27030_light_init+0x80>)
 8042f5e:	f01d fd09 	bl	8060974 <iprintf>
         (uint8_t) BU27030_REG_PART_ID);

  if (whoamI != BU27030_PART_ID_VALUE) {
 8042f62:	4b0d      	ldr	r3, [pc, #52]	; (8042f98 <bu27030_light_init+0x7c>)
 8042f64:	781b      	ldrb	r3, [r3, #0]
 8042f66:	2be0      	cmp	r3, #224	; 0xe0
 8042f68:	d005      	beq.n	8042f76 <bu27030_light_init+0x5a>
    printf("init failed for bu27030!\r\n");
 8042f6a:	480d      	ldr	r0, [pc, #52]	; (8042fa0 <bu27030_light_init+0x84>)
 8042f6c:	f01d fd9e 	bl	8060aac <puts>
    return SENSOR_FAILED;
 8042f70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8042f74:	e003      	b.n	8042f7e <bu27030_light_init+0x62>
  }

  /* Restore default configuration */
  bu27030_init_client(&light_dev_ctx);
 8042f76:	4805      	ldr	r0, [pc, #20]	; (8042f8c <bu27030_light_init+0x70>)
 8042f78:	f7ff fb72 	bl	8042660 <bu27030_init_client>

  return SENSOR_SUCCESS;
 8042f7c:	2300      	movs	r3, #0
}
 8042f7e:	4618      	mov	r0, r3
 8042f80:	3708      	adds	r7, #8
 8042f82:	46bd      	mov	sp, r7
 8042f84:	bd80      	pop	{r7, pc}
 8042f86:	bf00      	nop
 8042f88:	20007f64 	.word	0x20007f64
 8042f8c:	20007f58 	.word	0x20007f58
 8042f90:	08042581 	.word	0x08042581
 8042f94:	080425cd 	.word	0x080425cd
 8042f98:	20007f54 	.word	0x20007f54
 8042f9c:	08065074 	.word	0x08065074
 8042fa0:	08065094 	.word	0x08065094

08042fa4 <bu27030_enable>:

static int32_t bu27030_enable()
{
 8042fa4:	b580      	push	{r7, lr}
 8042fa6:	b082      	sub	sp, #8
 8042fa8:	af00      	add	r7, sp, #0
  int32_t ret = 0;
 8042faa:	2300      	movs	r3, #0
 8042fac:	607b      	str	r3, [r7, #4]
  uint8_t POWER_ON = 1;
 8042fae:	2301      	movs	r3, #1
 8042fb0:	70fb      	strb	r3, [r7, #3]
  if (sensor_activate_count == 0) {
 8042fb2:	4b0c      	ldr	r3, [pc, #48]	; (8042fe4 <bu27030_enable+0x40>)
 8042fb4:	781b      	ldrb	r3, [r3, #0]
 8042fb6:	2b00      	cmp	r3, #0
 8042fb8:	d109      	bne.n	8042fce <bu27030_enable+0x2a>
    ret = light_platform_write(&light_dev_ctx, BU27030_REG_CONTROL,
 8042fba:	1cfa      	adds	r2, r7, #3
 8042fbc:	2301      	movs	r3, #1
 8042fbe:	2143      	movs	r1, #67	; 0x43
 8042fc0:	4809      	ldr	r0, [pc, #36]	; (8042fe8 <bu27030_enable+0x44>)
 8042fc2:	f7ff fadd 	bl	8042580 <light_platform_write>
 8042fc6:	6078      	str	r0, [r7, #4]
                               &POWER_ON, 1);
    light_activated = true;
 8042fc8:	4b08      	ldr	r3, [pc, #32]	; (8042fec <bu27030_enable+0x48>)
 8042fca:	2201      	movs	r2, #1
 8042fcc:	701a      	strb	r2, [r3, #0]
  }
  sensor_activate_count++;
 8042fce:	4b05      	ldr	r3, [pc, #20]	; (8042fe4 <bu27030_enable+0x40>)
 8042fd0:	781b      	ldrb	r3, [r3, #0]
 8042fd2:	3301      	adds	r3, #1
 8042fd4:	b2da      	uxtb	r2, r3
 8042fd6:	4b03      	ldr	r3, [pc, #12]	; (8042fe4 <bu27030_enable+0x40>)
 8042fd8:	701a      	strb	r2, [r3, #0]
  return ret;
 8042fda:	687b      	ldr	r3, [r7, #4]
}
 8042fdc:	4618      	mov	r0, r3
 8042fde:	3708      	adds	r7, #8
 8042fe0:	46bd      	mov	sp, r7
 8042fe2:	bd80      	pop	{r7, pc}
 8042fe4:	20007f68 	.word	0x20007f68
 8042fe8:	20007f58 	.word	0x20007f58
 8042fec:	20007f69 	.word	0x20007f69

08042ff0 <bu27030_disable>:

static int32_t bu27030_disable()
{
 8042ff0:	b580      	push	{r7, lr}
 8042ff2:	b082      	sub	sp, #8
 8042ff4:	af00      	add	r7, sp, #0
  int32_t ret = 0;
 8042ff6:	2300      	movs	r3, #0
 8042ff8:	607b      	str	r3, [r7, #4]
  uint8_t POWER_OFF = 0;
 8042ffa:	2300      	movs	r3, #0
 8042ffc:	70fb      	strb	r3, [r7, #3]
  sensor_activate_count--;
 8042ffe:	4b0c      	ldr	r3, [pc, #48]	; (8043030 <bu27030_disable+0x40>)
 8043000:	781b      	ldrb	r3, [r3, #0]
 8043002:	3b01      	subs	r3, #1
 8043004:	b2da      	uxtb	r2, r3
 8043006:	4b0a      	ldr	r3, [pc, #40]	; (8043030 <bu27030_disable+0x40>)
 8043008:	701a      	strb	r2, [r3, #0]

  if (sensor_activate_count == 0) {
 804300a:	4b09      	ldr	r3, [pc, #36]	; (8043030 <bu27030_disable+0x40>)
 804300c:	781b      	ldrb	r3, [r3, #0]
 804300e:	2b00      	cmp	r3, #0
 8043010:	d109      	bne.n	8043026 <bu27030_disable+0x36>
    ret = light_platform_write(&light_dev_ctx, BU27030_REG_CONTROL,
 8043012:	1cfa      	adds	r2, r7, #3
 8043014:	2301      	movs	r3, #1
 8043016:	2143      	movs	r1, #67	; 0x43
 8043018:	4806      	ldr	r0, [pc, #24]	; (8043034 <bu27030_disable+0x44>)
 804301a:	f7ff fab1 	bl	8042580 <light_platform_write>
 804301e:	6078      	str	r0, [r7, #4]
                               &POWER_OFF, 1);
    light_activated = false;
 8043020:	4b05      	ldr	r3, [pc, #20]	; (8043038 <bu27030_disable+0x48>)
 8043022:	2200      	movs	r2, #0
 8043024:	701a      	strb	r2, [r3, #0]
  }
  return ret;
 8043026:	687b      	ldr	r3, [r7, #4]
}
 8043028:	4618      	mov	r0, r3
 804302a:	3708      	adds	r7, #8
 804302c:	46bd      	mov	sp, r7
 804302e:	bd80      	pop	{r7, pc}
 8043030:	20007f68 	.word	0x20007f68
 8043034:	20007f58 	.word	0x20007f58
 8043038:	20007f69 	.word	0x20007f69

0804303c <bu27030_light_activate>:

int bu27030_light_activate(bool activate)
{
 804303c:	b580      	push	{r7, lr}
 804303e:	b084      	sub	sp, #16
 8043040:	af00      	add	r7, sp, #0
 8043042:	4603      	mov	r3, r0
 8043044:	71fb      	strb	r3, [r7, #7]
  int res = 0;
 8043046:	2300      	movs	r3, #0
 8043048:	60fb      	str	r3, [r7, #12]
  printf("bu27030_light_activate: %d \r\n", activate);
 804304a:	79fb      	ldrb	r3, [r7, #7]
 804304c:	4619      	mov	r1, r3
 804304e:	4809      	ldr	r0, [pc, #36]	; (8043074 <bu27030_light_activate+0x38>)
 8043050:	f01d fc90 	bl	8060974 <iprintf>
  if (activate) {
 8043054:	79fb      	ldrb	r3, [r7, #7]
 8043056:	2b00      	cmp	r3, #0
 8043058:	d003      	beq.n	8043062 <bu27030_light_activate+0x26>
    res = bu27030_enable();
 804305a:	f7ff ffa3 	bl	8042fa4 <bu27030_enable>
 804305e:	60f8      	str	r0, [r7, #12]
 8043060:	e002      	b.n	8043068 <bu27030_light_activate+0x2c>
  } else {
    res = bu27030_disable();
 8043062:	f7ff ffc5 	bl	8042ff0 <bu27030_disable>
 8043066:	60f8      	str	r0, [r7, #12]
  }
  return res;
 8043068:	68fb      	ldr	r3, [r7, #12]
}
 804306a:	4618      	mov	r0, r3
 804306c:	3710      	adds	r7, #16
 804306e:	46bd      	mov	sp, r7
 8043070:	bd80      	pop	{r7, pc}
 8043072:	bf00      	nop
 8043074:	080650b0 	.word	0x080650b0

08043078 <bu27030_publish_sensor_data>:

/* Main Example --------------------------------------------------------------*/
int bu27030_publish_sensor_data(void *para)
{
 8043078:	b580      	push	{r7, lr}
 804307a:	b096      	sub	sp, #88	; 0x58
 804307c:	af00      	add	r7, sp, #0
 804307e:	6078      	str	r0, [r7, #4]
  /* Read samples in polling mode (no int) */
  sensors_event_t sensor_data = { 0 };
 8043080:	f107 0308 	add.w	r3, r7, #8
 8043084:	2250      	movs	r2, #80	; 0x50
 8043086:	2100      	movs	r1, #0
 8043088:	4618      	mov	r0, r3
 804308a:	f01c ff97 	bl	805ffbc <memset>
  //printf("bu27030_publish_sensor_data: %d \r\n", light_activated);
  if (light_activated) {
 804308e:	4b1e      	ldr	r3, [pc, #120]	; (8043108 <bu27030_publish_sensor_data+0x90>)
 8043090:	781b      	ldrb	r3, [r3, #0]
 8043092:	2b00      	cmp	r3, #0
 8043094:	d033      	beq.n	80430fe <bu27030_publish_sensor_data+0x86>
    // core process
    bu27030_get_raw_data_and_calculated_lux_without_scale(&light_dev_ctx);
 8043096:	481d      	ldr	r0, [pc, #116]	; (804310c <bu27030_publish_sensor_data+0x94>)
 8043098:	f7ff fdbe 	bl	8042c18 <bu27030_get_raw_data_and_calculated_lux_without_scale>
    //send related messages to SensorDataQ
    sensor_data.sensor_type = SENSOR_TYPE_LIGHT;
 804309c:	2303      	movs	r3, #3
 804309e:	723b      	strb	r3, [r7, #8]
    sensor_data.accuracy = 3;
 80430a0:	2303      	movs	r3, #3
 80430a2:	727b      	strb	r3, [r7, #9]
    sensor_data.timestamp = sensor_get_timestamp();
 80430a4:	f00a fb30 	bl	804d708 <sensor_get_timestamp>
 80430a8:	4602      	mov	r2, r0
 80430aa:	460b      	mov	r3, r1
 80430ac:	e9c7 2304 	strd	r2, r3, [r7, #16]
    sensor_data.sensor_data_t.vec.data[0] = light_data * light_scale;
 80430b0:	4b17      	ldr	r3, [pc, #92]	; (8043110 <bu27030_publish_sensor_data+0x98>)
 80430b2:	ed93 7a00 	vldr	s14, [r3]
 80430b6:	4b17      	ldr	r3, [pc, #92]	; (8043114 <bu27030_publish_sensor_data+0x9c>)
 80430b8:	edd3 7a00 	vldr	s15, [r3]
 80430bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80430c0:	edc7 7a06 	vstr	s15, [r7, #24]
    sensor_data.sensor_data_t.vec.data[1] = light_data;
 80430c4:	4b12      	ldr	r3, [pc, #72]	; (8043110 <bu27030_publish_sensor_data+0x98>)
 80430c6:	681b      	ldr	r3, [r3, #0]
 80430c8:	61fb      	str	r3, [r7, #28]
    sensor_data.sensor_data_t.vec.data[2] = data.data0;
 80430ca:	4b13      	ldr	r3, [pc, #76]	; (8043118 <bu27030_publish_sensor_data+0xa0>)
 80430cc:	681b      	ldr	r3, [r3, #0]
 80430ce:	ee07 3a90 	vmov	s15, r3
 80430d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80430d6:	edc7 7a08 	vstr	s15, [r7, #32]
    sensor_data.sensor_data_t.vec.data[3] = data.data1;
 80430da:	4b0f      	ldr	r3, [pc, #60]	; (8043118 <bu27030_publish_sensor_data+0xa0>)
 80430dc:	685b      	ldr	r3, [r3, #4]
 80430de:	ee07 3a90 	vmov	s15, r3
 80430e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80430e6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    osMessageQueuePut(light_init_parms->SensorDataQHandle, &sensor_data, 0, 0);
 80430ea:	4b0c      	ldr	r3, [pc, #48]	; (804311c <bu27030_publish_sensor_data+0xa4>)
 80430ec:	681b      	ldr	r3, [r3, #0]
 80430ee:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 80430f2:	f107 0108 	add.w	r1, r7, #8
 80430f6:	2300      	movs	r3, #0
 80430f8:	2200      	movs	r2, #0
 80430fa:	f013 f983 	bl	8056404 <osMessageQueuePut>
  }
  return 0;
 80430fe:	2300      	movs	r3, #0
}
 8043100:	4618      	mov	r0, r3
 8043102:	3758      	adds	r7, #88	; 0x58
 8043104:	46bd      	mov	sp, r7
 8043106:	bd80      	pop	{r7, pc}
 8043108:	20007f69 	.word	0x20007f69
 804310c:	20007f58 	.word	0x20007f58
 8043110:	20007f50 	.word	0x20007f50
 8043114:	20007004 	.word	0x20007004
 8043118:	20007f6c 	.word	0x20007f6c
 804311c:	20007f64 	.word	0x20007f64

08043120 <bu27030_init_complete>:

int bu27030_init_complete(void *para)
{
 8043120:	b480      	push	{r7}
 8043122:	b083      	sub	sp, #12
 8043124:	af00      	add	r7, sp, #0
 8043126:	6078      	str	r0, [r7, #4]
  //send init complete event to smgr?
  return SENSOR_SUCCESS;
 8043128:	2300      	movs	r3, #0
}
 804312a:	4618      	mov	r0, r3
 804312c:	370c      	adds	r7, #12
 804312e:	46bd      	mov	sp, r7
 8043130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043134:	4770      	bx	lr
	...

08043138 <bu27030_config>:

int bu27030_config(uint8_t config_type, void *para)
{
 8043138:	b580      	push	{r7, lr}
 804313a:	b09a      	sub	sp, #104	; 0x68
 804313c:	af00      	add	r7, sp, #0
 804313e:	4603      	mov	r3, r0
 8043140:	6039      	str	r1, [r7, #0]
 8043142:	71fb      	strb	r3, [r7, #7]
  //send init complete event to smgr?
  int res = 0;
 8043144:	2300      	movs	r3, #0
 8043146:	667b      	str	r3, [r7, #100]	; 0x64
  sensors_event_t sensor_data = { 0 };
 8043148:	f107 0310 	add.w	r3, r7, #16
 804314c:	2250      	movs	r2, #80	; 0x50
 804314e:	2100      	movs	r1, #0
 8043150:	4618      	mov	r0, r3
 8043152:	f01c ff33 	bl	805ffbc <memset>

  switch (config_type) {
 8043156:	79fb      	ldrb	r3, [r7, #7]
 8043158:	3b02      	subs	r3, #2
 804315a:	2b06      	cmp	r3, #6
 804315c:	f200 809a 	bhi.w	8043294 <bu27030_config+0x15c>
 8043160:	a201      	add	r2, pc, #4	; (adr r2, 8043168 <bu27030_config+0x30>)
 8043162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8043166:	bf00      	nop
 8043168:	08043185 	.word	0x08043185
 804316c:	0804318d 	.word	0x0804318d
 8043170:	0804320b 	.word	0x0804320b
 8043174:	08043295 	.word	0x08043295
 8043178:	08043295 	.word	0x08043295
 804317c:	08043295 	.word	0x08043295
 8043180:	08043243 	.word	0x08043243
  case SENSOR_CONFIG_SELFTEST:
    printf("bu27030 selftest message \r\n");
 8043184:	4848      	ldr	r0, [pc, #288]	; (80432a8 <bu27030_config+0x170>)
 8043186:	f01d fc91 	bl	8060aac <puts>
    break;
 804318a:	e088      	b.n	804329e <bu27030_config+0x166>
  case SENSOR_CONFIG_CALIBRATION:
    printf("bu27030 cali message \r\n");
 804318c:	4847      	ldr	r0, [pc, #284]	; (80432ac <bu27030_config+0x174>)
 804318e:	f01d fc8d 	bl	8060aac <puts>
    bu27030_init_client(&light_dev_ctx);
 8043192:	4847      	ldr	r0, [pc, #284]	; (80432b0 <bu27030_config+0x178>)
 8043194:	f7ff fa64 	bl	8042660 <bu27030_init_client>
    uint8_t POWER_ON = 1;
 8043198:	2301      	movs	r3, #1
 804319a:	73fb      	strb	r3, [r7, #15]
    uint8_t POWER_OFF = 0;
 804319c:	2300      	movs	r3, #0
 804319e:	73bb      	strb	r3, [r7, #14]
    light_platform_write(&light_dev_ctx, BU27030_REG_CONTROL, &POWER_ON, 1);
 80431a0:	f107 020f 	add.w	r2, r7, #15
 80431a4:	2301      	movs	r3, #1
 80431a6:	2143      	movs	r1, #67	; 0x43
 80431a8:	4841      	ldr	r0, [pc, #260]	; (80432b0 <bu27030_config+0x178>)
 80431aa:	f7ff f9e9 	bl	8042580 <light_platform_write>
    res = bu27030_light_calibration(&light_dev_ctx, &light_scale);
 80431ae:	4941      	ldr	r1, [pc, #260]	; (80432b4 <bu27030_config+0x17c>)
 80431b0:	483f      	ldr	r0, [pc, #252]	; (80432b0 <bu27030_config+0x178>)
 80431b2:	f7ff fde9 	bl	8042d88 <bu27030_light_calibration>
 80431b6:	6678      	str	r0, [r7, #100]	; 0x64

    light_platform_write(&light_dev_ctx, BU27030_REG_CONTROL, &POWER_OFF, 1);
 80431b8:	f107 020e 	add.w	r2, r7, #14
 80431bc:	2301      	movs	r3, #1
 80431be:	2143      	movs	r1, #67	; 0x43
 80431c0:	483b      	ldr	r0, [pc, #236]	; (80432b0 <bu27030_config+0x178>)
 80431c2:	f7ff f9dd 	bl	8042580 <light_platform_write>
    if (res == 0) {
 80431c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80431c8:	2b00      	cmp	r3, #0
 80431ca:	d165      	bne.n	8043298 <bu27030_config+0x160>
      memcpy(&light_init_parms->board_calidata->lux_scale, &light_scale,
 80431cc:	4b3a      	ldr	r3, [pc, #232]	; (80432b8 <bu27030_config+0x180>)
 80431ce:	681b      	ldr	r3, [r3, #0]
 80431d0:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80431d4:	3320      	adds	r3, #32
 80431d6:	4a37      	ldr	r2, [pc, #220]	; (80432b4 <bu27030_config+0x17c>)
 80431d8:	6812      	ldr	r2, [r2, #0]
 80431da:	601a      	str	r2, [r3, #0]
             sizeof(float));
      if (light_init_parms->board_calidata->light_cali_ver != DEFAULT_VERSION)
 80431dc:	4b36      	ldr	r3, [pc, #216]	; (80432b8 <bu27030_config+0x180>)
 80431de:	681b      	ldr	r3, [r3, #0]
 80431e0:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80431e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80431e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80431ea:	d007      	beq.n	80431fc <bu27030_config+0xc4>
        light_init_parms->board_calidata->light_cali_ver++;
 80431ec:	4b32      	ldr	r3, [pc, #200]	; (80432b8 <bu27030_config+0x180>)
 80431ee:	681b      	ldr	r3, [r3, #0]
 80431f0:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80431f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80431f6:	3201      	adds	r2, #1
 80431f8:	625a      	str	r2, [r3, #36]	; 0x24
      else
        light_init_parms->board_calidata->light_cali_ver = 1;
    }
    break;
 80431fa:	e04d      	b.n	8043298 <bu27030_config+0x160>
        light_init_parms->board_calidata->light_cali_ver = 1;
 80431fc:	4b2e      	ldr	r3, [pc, #184]	; (80432b8 <bu27030_config+0x180>)
 80431fe:	681b      	ldr	r3, [r3, #0]
 8043200:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8043204:	2201      	movs	r2, #1
 8043206:	625a      	str	r2, [r3, #36]	; 0x24
    break;
 8043208:	e046      	b.n	8043298 <bu27030_config+0x160>
  case SENSOR_CONFIG_BIAS:
    //store calibrate sensor data to driver when boot up
    if (light_init_parms->board_calidata->light_cali_ver != DEFAULT_VERSION) {
 804320a:	4b2b      	ldr	r3, [pc, #172]	; (80432b8 <bu27030_config+0x180>)
 804320c:	681b      	ldr	r3, [r3, #0]
 804320e:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8043212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043214:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8043218:	d040      	beq.n	804329c <bu27030_config+0x164>
      memcpy(&light_scale, &light_init_parms->board_calidata->lux_scale,
 804321a:	4b27      	ldr	r3, [pc, #156]	; (80432b8 <bu27030_config+0x180>)
 804321c:	681b      	ldr	r3, [r3, #0]
 804321e:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8043222:	3320      	adds	r3, #32
 8043224:	681b      	ldr	r3, [r3, #0]
 8043226:	461a      	mov	r2, r3
 8043228:	4b22      	ldr	r3, [pc, #136]	; (80432b4 <bu27030_config+0x17c>)
 804322a:	601a      	str	r2, [r3, #0]
             sizeof(float));
      printf("light_scale data: {%f} \r\n", light_scale);
 804322c:	4b21      	ldr	r3, [pc, #132]	; (80432b4 <bu27030_config+0x17c>)
 804322e:	681b      	ldr	r3, [r3, #0]
 8043230:	4618      	mov	r0, r3
 8043232:	f7fd f989 	bl	8040548 <__aeabi_f2d>
 8043236:	4602      	mov	r2, r0
 8043238:	460b      	mov	r3, r1
 804323a:	4820      	ldr	r0, [pc, #128]	; (80432bc <bu27030_config+0x184>)
 804323c:	f01d fb9a 	bl	8060974 <iprintf>
    }
    break;
 8043240:	e02c      	b.n	804329c <bu27030_config+0x164>
  case SENSOR_CALIBRATION_RESULT:
    sensor_data.sensor_type = SENSOR_TYPE_LIGHT;
 8043242:	2303      	movs	r3, #3
 8043244:	743b      	strb	r3, [r7, #16]
    sensor_data.accuracy = 0xFF;
 8043246:	23ff      	movs	r3, #255	; 0xff
 8043248:	747b      	strb	r3, [r7, #17]
    sensor_data.timestamp = sensor_get_timestamp();
 804324a:	f00a fa5d 	bl	804d708 <sensor_get_timestamp>
 804324e:	4602      	mov	r2, r0
 8043250:	460b      	mov	r3, r1
 8043252:	e9c7 2306 	strd	r2, r3, [r7, #24]
    sensor_data.sensor_data_t.vec.data[0] = light_scale;
 8043256:	4b17      	ldr	r3, [pc, #92]	; (80432b4 <bu27030_config+0x17c>)
 8043258:	681b      	ldr	r3, [r3, #0]
 804325a:	623b      	str	r3, [r7, #32]
    sensor_data.sensor_data_t.vec.data[1] =
        (float)light_init_parms->board_calidata->light_cali_ver;
 804325c:	4b16      	ldr	r3, [pc, #88]	; (80432b8 <bu27030_config+0x180>)
 804325e:	681b      	ldr	r3, [r3, #0]
 8043260:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8043264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043266:	ee07 3a90 	vmov	s15, r3
 804326a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    sensor_data.sensor_data_t.vec.data[1] =
 804326e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    sensor_data.sensor_data_t.vec.data[2] = 0;
 8043272:	f04f 0300 	mov.w	r3, #0
 8043276:	62bb      	str	r3, [r7, #40]	; 0x28
    sensor_data.sensor_data_t.vec.data[3] = 0;
 8043278:	f04f 0300 	mov.w	r3, #0
 804327c:	62fb      	str	r3, [r7, #44]	; 0x2c
    osMessageQueuePut(light_init_parms->SensorDataQHandle, &sensor_data, 0, 0);
 804327e:	4b0e      	ldr	r3, [pc, #56]	; (80432b8 <bu27030_config+0x180>)
 8043280:	681b      	ldr	r3, [r3, #0]
 8043282:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 8043286:	f107 0110 	add.w	r1, r7, #16
 804328a:	2300      	movs	r3, #0
 804328c:	2200      	movs	r2, #0
 804328e:	f013 f8b9 	bl	8056404 <osMessageQueuePut>
    break;
 8043292:	e004      	b.n	804329e <bu27030_config+0x166>
  default:
    break;
 8043294:	bf00      	nop
 8043296:	e002      	b.n	804329e <bu27030_config+0x166>
    break;
 8043298:	bf00      	nop
 804329a:	e000      	b.n	804329e <bu27030_config+0x166>
    break;
 804329c:	bf00      	nop
  }
  return res;
 804329e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 80432a0:	4618      	mov	r0, r3
 80432a2:	3768      	adds	r7, #104	; 0x68
 80432a4:	46bd      	mov	sp, r7
 80432a6:	bd80      	pop	{r7, pc}
 80432a8:	080650d0 	.word	0x080650d0
 80432ac:	080650ec 	.word	0x080650ec
 80432b0:	20007f58 	.word	0x20007f58
 80432b4:	20007004 	.word	0x20007004
 80432b8:	20007f64 	.word	0x20007f64
 80432bc:	08065104 	.word	0x08065104

080432c0 <bu27030_publish_config_resp>:

int bu27030_publish_config_resp(void *para)
{
 80432c0:	b480      	push	{r7}
 80432c2:	b083      	sub	sp, #12
 80432c4:	af00      	add	r7, sp, #0
 80432c6:	6078      	str	r0, [r7, #4]
  //send init complete event to smgr?
  return SENSOR_SUCCESS;
 80432c8:	2300      	movs	r3, #0
}
 80432ca:	4618      	mov	r0, r3
 80432cc:	370c      	adds	r7, #12
 80432ce:	46bd      	mov	sp, r7
 80432d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80432d4:	4770      	bx	lr
	...

080432d8 <update_calibration_data_to_flash>:
#include "flash_interface.h"
#include "calibration_data.h"

int update_calibration_data_to_flash(calibrationData * cali_data)
{
 80432d8:	b580      	push	{r7, lr}
 80432da:	b086      	sub	sp, #24
 80432dc:	af00      	add	r7, sp, #0
 80432de:	6078      	str	r0, [r7, #4]
  int ret = -1, count = 0;
 80432e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80432e4:	613b      	str	r3, [r7, #16]
 80432e6:	2300      	movs	r3, #0
 80432e8:	617b      	str	r3, [r7, #20]
  uint32_t calibration_data_size = 0;
 80432ea:	2300      	movs	r3, #0
 80432ec:	60fb      	str	r3, [r7, #12]
  uint32_t *calibration_data_ptr = NULL;
 80432ee:	2300      	movs	r3, #0
 80432f0:	60bb      	str	r3, [r7, #8]
  calibration_data_ptr = cali_data;
 80432f2:	687b      	ldr	r3, [r7, #4]
 80432f4:	60bb      	str	r3, [r7, #8]
  //return byte num of calibration data
  if (sizeof(calibrationData) % 4 == 0) {
    calibration_data_size = sizeof(calibrationData) / 4;
 80432f6:	23f1      	movs	r3, #241	; 0xf1
 80432f8:	60fb      	str	r3, [r7, #12]
  } else {
    calibration_data_size = sizeof(calibrationData) / 4 + 1;
  }

  flash_unlock();
 80432fa:	f001 f99d 	bl	8044638 <flash_unlock>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |
 80432fe:	4b12      	ldr	r3, [pc, #72]	; (8043348 <update_calibration_data_to_flash+0x70>)
 8043300:	22f2      	movs	r2, #242	; 0xf2
 8043302:	60da      	str	r2, [r3, #12]
                         FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR |
                         FLASH_FLAG_PGSERR);
  flash_erase_by_sector(FLASH_CALIBRATION_DATA, 1);
 8043304:	2101      	movs	r1, #1
 8043306:	4811      	ldr	r0, [pc, #68]	; (804334c <update_calibration_data_to_flash+0x74>)
 8043308:	f001 f9b2 	bl	8044670 <flash_erase_by_sector>
  do {
    flash_program_by_word(FLASH_CALIBRATION_DATA + count * 4,
 804330c:	697b      	ldr	r3, [r7, #20]
 804330e:	009b      	lsls	r3, r3, #2
 8043310:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8043314:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
                          *(calibration_data_ptr + count));
 8043318:	697a      	ldr	r2, [r7, #20]
 804331a:	0092      	lsls	r2, r2, #2
 804331c:	68b9      	ldr	r1, [r7, #8]
 804331e:	440a      	add	r2, r1
    flash_program_by_word(FLASH_CALIBRATION_DATA + count * 4,
 8043320:	6812      	ldr	r2, [r2, #0]
 8043322:	4611      	mov	r1, r2
 8043324:	4618      	mov	r0, r3
 8043326:	f001 f9d3 	bl	80446d0 <flash_program_by_word>
    count++;
 804332a:	697b      	ldr	r3, [r7, #20]
 804332c:	3301      	adds	r3, #1
 804332e:	617b      	str	r3, [r7, #20]
  } while (count < calibration_data_size);
 8043330:	697b      	ldr	r3, [r7, #20]
 8043332:	68fa      	ldr	r2, [r7, #12]
 8043334:	429a      	cmp	r2, r3
 8043336:	d8e9      	bhi.n	804330c <update_calibration_data_to_flash+0x34>

  flash_lock();
 8043338:	f001 f98c 	bl	8044654 <flash_lock>
}
 804333c:	bf00      	nop
 804333e:	4618      	mov	r0, r3
 8043340:	3718      	adds	r7, #24
 8043342:	46bd      	mov	sp, r7
 8043344:	bd80      	pop	{r7, pc}
 8043346:	bf00      	nop
 8043348:	40023c00 	.word	0x40023c00
 804334c:	08020000 	.word	0x08020000

08043350 <chbsp_board_init>:
 *
 * \note This function performs all necessary initialization on the board.
 */

void chbsp_board_init(ch_group_t * grp_ptr)
{
 8043350:	b480      	push	{r7}
 8043352:	b083      	sub	sp, #12
 8043354:	af00      	add	r7, sp, #0
 8043356:	6078      	str	r0, [r7, #4]

  /* Make local copy of group pointer */
  sensor_group_ptr = grp_ptr;
 8043358:	4a08      	ldr	r2, [pc, #32]	; (804337c <chbsp_board_init+0x2c>)
 804335a:	687b      	ldr	r3, [r7, #4]
 804335c:	6013      	str	r3, [r2, #0]

  /* Initialize group descriptor */
  grp_ptr->num_ports = CHBSP_MAX_DEVICES;
 804335e:	687b      	ldr	r3, [r7, #4]
 8043360:	2201      	movs	r2, #1
 8043362:	701a      	strb	r2, [r3, #0]
  grp_ptr->num_i2c_buses = CHBSP_NUM_I2C_BUSES;
 8043364:	687b      	ldr	r3, [r7, #4]
 8043366:	2201      	movs	r2, #1
 8043368:	705a      	strb	r2, [r3, #1]
  grp_ptr->rtc_cal_pulse_ms = CHBSP_RTC_CAL_PULSE_MS;
 804336a:	687b      	ldr	r3, [r7, #4]
 804336c:	2264      	movs	r2, #100	; 0x64
 804336e:	80da      	strh	r2, [r3, #6]

  //HAL_PWR_DisableSleepOnExit();
}
 8043370:	bf00      	nop
 8043372:	370c      	adds	r7, #12
 8043374:	46bd      	mov	sp, r7
 8043376:	f85d 7b04 	ldr.w	r7, [sp], #4
 804337a:	4770      	bx	lr
 804337c:	2001b5d4 	.word	0x2001b5d4

08043380 <chbsp_reset_assert>:
 * \brief Assert the reset pin
 *
 * \note This function should drive the Chirp sensor reset pin low.
 */
void chbsp_reset_assert(void)
{
 8043380:	b580      	push	{r7, lr}
 8043382:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(RESET_N_PORT, RESET_N_PIN, RESET_N_ASSERTED_LEVEL);
 8043384:	2200      	movs	r2, #0
 8043386:	2104      	movs	r1, #4
 8043388:	4802      	ldr	r0, [pc, #8]	; (8043394 <chbsp_reset_assert+0x14>)
 804338a:	f00e f97d 	bl	8051688 <HAL_GPIO_WritePin>
}
 804338e:	bf00      	nop
 8043390:	bd80      	pop	{r7, pc}
 8043392:	bf00      	nop
 8043394:	40020800 	.word	0x40020800

08043398 <chbsp_reset_release>:
 * \brief Deassert the reset pin
 *
 * \note This function should drive the Chirp sensor reset pin high (or open drain if there is a pull-up).
 */
void chbsp_reset_release(void)
{
 8043398:	b580      	push	{r7, lr}
 804339a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(RESET_N_PORT, RESET_N_PIN, RESET_N_DEASSERTED_LEVEL);
 804339c:	2201      	movs	r2, #1
 804339e:	2104      	movs	r1, #4
 80433a0:	4802      	ldr	r0, [pc, #8]	; (80433ac <chbsp_reset_release+0x14>)
 80433a2:	f00e f971 	bl	8051688 <HAL_GPIO_WritePin>
}
 80433a6:	bf00      	nop
 80433a8:	bd80      	pop	{r7, pc}
 80433aa:	bf00      	nop
 80433ac:	40020800 	.word	0x40020800

080433b0 <chbsp_program_enable>:
 * \brief Assert the PROG pin
 *
 * \note This function should drive the Chirp sensor PROG pin high on the specified port.
 */
void chbsp_program_enable(ch_dev_t * dev_ptr)
{
 80433b0:	b580      	push	{r7, lr}
 80433b2:	b082      	sub	sp, #8
 80433b4:	af00      	add	r7, sp, #0
 80433b6:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(chirp_port_prog[dev_ptr->io_index],
 80433b8:	687b      	ldr	r3, [r7, #4]
 80433ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80433be:	461a      	mov	r2, r3
 80433c0:	4b08      	ldr	r3, [pc, #32]	; (80433e4 <chbsp_program_enable+0x34>)
 80433c2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
                    chirp_pin_prog[dev_ptr->io_index], PROG_ASSERTED_LEVEL);
 80433c6:	687b      	ldr	r3, [r7, #4]
 80433c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80433cc:	461a      	mov	r2, r3
  HAL_GPIO_WritePin(chirp_port_prog[dev_ptr->io_index],
 80433ce:	4b06      	ldr	r3, [pc, #24]	; (80433e8 <chbsp_program_enable+0x38>)
 80433d0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80433d4:	2201      	movs	r2, #1
 80433d6:	4619      	mov	r1, r3
 80433d8:	f00e f956 	bl	8051688 <HAL_GPIO_WritePin>
}
 80433dc:	bf00      	nop
 80433de:	3708      	adds	r7, #8
 80433e0:	46bd      	mov	sp, r7
 80433e2:	bd80      	pop	{r7, pc}
 80433e4:	20007018 	.word	0x20007018
 80433e8:	20007014 	.word	0x20007014

080433ec <chbsp_program_disable>:
 * \brief Deassert the PROG pin
 *
 * \note This function should drive the Chirp sensor PROG pin low on the specified port.
 */
void chbsp_program_disable(ch_dev_t * dev_ptr)
{
 80433ec:	b580      	push	{r7, lr}
 80433ee:	b082      	sub	sp, #8
 80433f0:	af00      	add	r7, sp, #0
 80433f2:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(chirp_port_prog[dev_ptr->io_index],
 80433f4:	687b      	ldr	r3, [r7, #4]
 80433f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80433fa:	461a      	mov	r2, r3
 80433fc:	4b08      	ldr	r3, [pc, #32]	; (8043420 <chbsp_program_disable+0x34>)
 80433fe:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
                    chirp_pin_prog[dev_ptr->io_index], PROG_DEASSERTED_LEVEL);
 8043402:	687b      	ldr	r3, [r7, #4]
 8043404:	f893 3020 	ldrb.w	r3, [r3, #32]
 8043408:	461a      	mov	r2, r3
  HAL_GPIO_WritePin(chirp_port_prog[dev_ptr->io_index],
 804340a:	4b06      	ldr	r3, [pc, #24]	; (8043424 <chbsp_program_disable+0x38>)
 804340c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8043410:	2200      	movs	r2, #0
 8043412:	4619      	mov	r1, r3
 8043414:	f00e f938 	bl	8051688 <HAL_GPIO_WritePin>
}
 8043418:	bf00      	nop
 804341a:	3708      	adds	r7, #8
 804341c:	46bd      	mov	sp, r7
 804341e:	bd80      	pop	{r7, pc}
 8043420:	20007018 	.word	0x20007018
 8043424:	20007014 	.word	0x20007014

08043428 <chbsp_group_set_io_dir_out>:
 * \brief Configure the host side of the CH101 interrupt pin as an output
 *
 * \note
 */
void chbsp_group_set_io_dir_out(ch_group_t * grp_ptr)
{
 8043428:	b580      	push	{r7, lr}
 804342a:	b08a      	sub	sp, #40	; 0x28
 804342c:	af00      	add	r7, sp, #0
 804342e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;
  uint16_t iomask = 0;
 8043430:	2300      	movs	r3, #0
 8043432:	84fb      	strh	r3, [r7, #38]	; 0x26
  int i;
  for (i = 0; i < grp_ptr->num_ports; i++) {
 8043434:	2300      	movs	r3, #0
 8043436:	623b      	str	r3, [r7, #32]
 8043438:	e012      	b.n	8043460 <chbsp_group_set_io_dir_out+0x38>
    if (grp_ptr->device[i]->sensor_connected) {
 804343a:	687a      	ldr	r2, [r7, #4]
 804343c:	6a3b      	ldr	r3, [r7, #32]
 804343e:	3304      	adds	r3, #4
 8043440:	009b      	lsls	r3, r3, #2
 8043442:	4413      	add	r3, r2
 8043444:	685b      	ldr	r3, [r3, #4]
 8043446:	7fdb      	ldrb	r3, [r3, #31]
 8043448:	2b00      	cmp	r3, #0
 804344a:	d006      	beq.n	804345a <chbsp_group_set_io_dir_out+0x32>
      iomask |= chirp_pin_io[i];
 804344c:	4a12      	ldr	r2, [pc, #72]	; (8043498 <chbsp_group_set_io_dir_out+0x70>)
 804344e:	6a3b      	ldr	r3, [r7, #32]
 8043450:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8043454:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8043456:	4313      	orrs	r3, r2
 8043458:	84fb      	strh	r3, [r7, #38]	; 0x26
  for (i = 0; i < grp_ptr->num_ports; i++) {
 804345a:	6a3b      	ldr	r3, [r7, #32]
 804345c:	3301      	adds	r3, #1
 804345e:	623b      	str	r3, [r7, #32]
 8043460:	687b      	ldr	r3, [r7, #4]
 8043462:	781b      	ldrb	r3, [r3, #0]
 8043464:	461a      	mov	r2, r3
 8043466:	6a3b      	ldr	r3, [r7, #32]
 8043468:	4293      	cmp	r3, r2
 804346a:	dbe6      	blt.n	804343a <chbsp_group_set_io_dir_out+0x12>
    }
  }
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 804346c:	2301      	movs	r3, #1
 804346e:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pin = iomask;
 8043470:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8043472:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8043474:	2300      	movs	r3, #0
 8043476:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(CM_IO_PORT, &GPIO_InitStructure);
 8043478:	f107 030c 	add.w	r3, r7, #12
 804347c:	4619      	mov	r1, r3
 804347e:	4807      	ldr	r0, [pc, #28]	; (804349c <chbsp_group_set_io_dir_out+0x74>)
 8043480:	f00d ff4e 	bl	8051320 <HAL_GPIO_Init>

  //set PC10 to low to make the gpio output enable
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8043484:	2200      	movs	r2, #0
 8043486:	f44f 6180 	mov.w	r1, #1024	; 0x400
 804348a:	4804      	ldr	r0, [pc, #16]	; (804349c <chbsp_group_set_io_dir_out+0x74>)
 804348c:	f00e f8fc 	bl	8051688 <HAL_GPIO_WritePin>
}
 8043490:	bf00      	nop
 8043492:	3728      	adds	r7, #40	; 0x28
 8043494:	46bd      	mov	sp, r7
 8043496:	bd80      	pop	{r7, pc}
 8043498:	2000701c 	.word	0x2000701c
 804349c:	40020800 	.word	0x40020800

080434a0 <chbsp_group_set_io_dir_in>:
 * \brief Configure the host side of the CH101 interrupt pin as an input
 *
 * \note This function assumes a bidirectional level shifter is interfacing the ICs.
 */
void chbsp_group_set_io_dir_in(ch_group_t * grp_ptr)
{
 80434a0:	b580      	push	{r7, lr}
 80434a2:	b088      	sub	sp, #32
 80434a4:	af00      	add	r7, sp, #0
 80434a6:	6078      	str	r0, [r7, #4]

  //set PC10 to high to make the int input enable
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 80434a8:	2201      	movs	r2, #1
 80434aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80434ae:	4809      	ldr	r0, [pc, #36]	; (80434d4 <chbsp_group_set_io_dir_in+0x34>)
 80434b0:	f00e f8ea 	bl	8051688 <HAL_GPIO_WritePin>

  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80434b4:	2300      	movs	r3, #0
 80434b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pin = IO_PIN_ALL;
 80434b8:	2308      	movs	r3, #8
 80434ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80434bc:	2300      	movs	r3, #0
 80434be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(CM_IO_PORT, &GPIO_InitStructure);
 80434c0:	f107 030c 	add.w	r3, r7, #12
 80434c4:	4619      	mov	r1, r3
 80434c6:	4803      	ldr	r0, [pc, #12]	; (80434d4 <chbsp_group_set_io_dir_in+0x34>)
 80434c8:	f00d ff2a 	bl	8051320 <HAL_GPIO_Init>
}
 80434cc:	bf00      	nop
 80434ce:	3720      	adds	r7, #32
 80434d0:	46bd      	mov	sp, r7
 80434d2:	bd80      	pop	{r7, pc}
 80434d4:	40020800 	.word	0x40020800

080434d8 <chbsp_group_pin_init>:
 * \brief Initialize the I/O pins.
 *
 * Configure reset and program pins as outputs. Assert reset and program. Configure IO pin as input.
 */
void chbsp_group_pin_init(ch_group_t * grp_ptr)
{
 80434d8:	b580      	push	{r7, lr}
 80434da:	b08c      	sub	sp, #48	; 0x30
 80434dc:	af00      	add	r7, sp, #0
 80434de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable necessary clocks */
  RESET_N_PORT_ENABLE();
 80434e0:	2300      	movs	r3, #0
 80434e2:	617b      	str	r3, [r7, #20]
 80434e4:	4b4c      	ldr	r3, [pc, #304]	; (8043618 <chbsp_group_pin_init+0x140>)
 80434e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80434e8:	4a4b      	ldr	r2, [pc, #300]	; (8043618 <chbsp_group_pin_init+0x140>)
 80434ea:	f043 0304 	orr.w	r3, r3, #4
 80434ee:	6313      	str	r3, [r2, #48]	; 0x30
 80434f0:	4b49      	ldr	r3, [pc, #292]	; (8043618 <chbsp_group_pin_init+0x140>)
 80434f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80434f4:	f003 0304 	and.w	r3, r3, #4
 80434f8:	617b      	str	r3, [r7, #20]
 80434fa:	697b      	ldr	r3, [r7, #20]
  PROG0_PORT_ENABLE();
 80434fc:	2300      	movs	r3, #0
 80434fe:	613b      	str	r3, [r7, #16]
 8043500:	4b45      	ldr	r3, [pc, #276]	; (8043618 <chbsp_group_pin_init+0x140>)
 8043502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8043504:	4a44      	ldr	r2, [pc, #272]	; (8043618 <chbsp_group_pin_init+0x140>)
 8043506:	f043 0304 	orr.w	r3, r3, #4
 804350a:	6313      	str	r3, [r2, #48]	; 0x30
 804350c:	4b42      	ldr	r3, [pc, #264]	; (8043618 <chbsp_group_pin_init+0x140>)
 804350e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8043510:	f003 0304 	and.w	r3, r3, #4
 8043514:	613b      	str	r3, [r7, #16]
 8043516:	693b      	ldr	r3, [r7, #16]
  //PROG1_PORT_ENABLE();
  CM_IO_PORT_ENABLE();
 8043518:	2300      	movs	r3, #0
 804351a:	60fb      	str	r3, [r7, #12]
 804351c:	4b3e      	ldr	r3, [pc, #248]	; (8043618 <chbsp_group_pin_init+0x140>)
 804351e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8043520:	4a3d      	ldr	r2, [pc, #244]	; (8043618 <chbsp_group_pin_init+0x140>)
 8043522:	f043 0304 	orr.w	r3, r3, #4
 8043526:	6313      	str	r3, [r2, #48]	; 0x30
 8043528:	4b3b      	ldr	r3, [pc, #236]	; (8043618 <chbsp_group_pin_init+0x140>)
 804352a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804352c:	f003 0304 	and.w	r3, r3, #4
 8043530:	60fb      	str	r3, [r7, #12]
 8043532:	68fb      	ldr	r3, [r7, #12]

  /* Initialize reset */
  GPIO_InitStructure.Mode = RESET_N_MODE;
 8043534:	2301      	movs	r3, #1
 8043536:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8043538:	2300      	movs	r3, #0
 804353a:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pin = RESET_N_PIN;
 804353c:	2304      	movs	r3, #4
 804353e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RESET_N_PORT, &GPIO_InitStructure);
 8043540:	f107 0318 	add.w	r3, r7, #24
 8043544:	4619      	mov	r1, r3
 8043546:	4835      	ldr	r0, [pc, #212]	; (804361c <chbsp_group_pin_init+0x144>)
 8043548:	f00d feea 	bl	8051320 <HAL_GPIO_Init>
  chbsp_reset_assert();
 804354c:	f7ff ff18 	bl	8043380 <chbsp_reset_assert>

  /* Initialize program pins */
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8043550:	2301      	movs	r3, #1
 8043552:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8043554:	2300      	movs	r3, #0
 8043556:	623b      	str	r3, [r7, #32]
  uint8_t i;
  for (i = 0; i < grp_ptr->num_ports; i++) {
 8043558:	2300      	movs	r3, #0
 804355a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 804355e:	e01f      	b.n	80435a0 <chbsp_group_pin_init+0xc8>
    GPIO_InitStructure.Pin = chirp_pin_prog[i];
 8043560:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8043564:	4a2e      	ldr	r2, [pc, #184]	; (8043620 <chbsp_group_pin_init+0x148>)
 8043566:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 804356a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(chirp_port_prog[i], &GPIO_InitStructure);
 804356c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8043570:	4a2c      	ldr	r2, [pc, #176]	; (8043624 <chbsp_group_pin_init+0x14c>)
 8043572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8043576:	f107 0218 	add.w	r2, r7, #24
 804357a:	4611      	mov	r1, r2
 804357c:	4618      	mov	r0, r3
 804357e:	f00d fecf 	bl	8051320 <HAL_GPIO_Init>
    chbsp_program_enable(grp_ptr->device[i]);
 8043582:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8043586:	687a      	ldr	r2, [r7, #4]
 8043588:	3304      	adds	r3, #4
 804358a:	009b      	lsls	r3, r3, #2
 804358c:	4413      	add	r3, r2
 804358e:	685b      	ldr	r3, [r3, #4]
 8043590:	4618      	mov	r0, r3
 8043592:	f7ff ff0d 	bl	80433b0 <chbsp_program_enable>
  for (i = 0; i < grp_ptr->num_ports; i++) {
 8043596:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 804359a:	3301      	adds	r3, #1
 804359c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80435a0:	687b      	ldr	r3, [r7, #4]
 80435a2:	781b      	ldrb	r3, [r3, #0]
 80435a4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80435a8:	429a      	cmp	r2, r3
 80435aa:	d3d9      	bcc.n	8043560 <chbsp_group_pin_init+0x88>
  }

  /* Initialize IO pins */
  chbsp_group_set_io_dir_in(grp_ptr);
 80435ac:	6878      	ldr	r0, [r7, #4]
 80435ae:	f7ff ff77 	bl	80434a0 <chbsp_group_set_io_dir_in>
  for (i = 0; i < grp_ptr->num_ports; i++) {
 80435b2:	2300      	movs	r3, #0
 80435b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80435b8:	e022      	b.n	8043600 <chbsp_group_pin_init+0x128>
    __HAL_GPIO_EXTI_CLEAR_FLAG(chirp_pin_io[i]);
 80435ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80435be:	4a1a      	ldr	r2, [pc, #104]	; (8043628 <chbsp_group_pin_init+0x150>)
 80435c0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80435c4:	4b19      	ldr	r3, [pc, #100]	; (804362c <chbsp_group_pin_init+0x154>)
 80435c6:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(chirp_pin_io[i]);
 80435c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80435cc:	4a16      	ldr	r2, [pc, #88]	; (8043628 <chbsp_group_pin_init+0x150>)
 80435ce:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80435d2:	4b16      	ldr	r3, [pc, #88]	; (804362c <chbsp_group_pin_init+0x154>)
 80435d4:	615a      	str	r2, [r3, #20]
    HAL_NVIC_SetPriority(chirp_pin_io_irq[i], CH_SENSOR_IRQ_PRIORITY, 0);
 80435d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80435da:	4a15      	ldr	r2, [pc, #84]	; (8043630 <chbsp_group_pin_init+0x158>)
 80435dc:	56d3      	ldrsb	r3, [r2, r3]
 80435de:	2200      	movs	r2, #0
 80435e0:	210f      	movs	r1, #15
 80435e2:	4618      	mov	r0, r3
 80435e4:	f00c ff8a 	bl	80504fc <HAL_NVIC_SetPriority>
    HAL_NVIC_DisableIRQ(chirp_pin_io_irq[i]);
 80435e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80435ec:	4a10      	ldr	r2, [pc, #64]	; (8043630 <chbsp_group_pin_init+0x158>)
 80435ee:	56d3      	ldrsb	r3, [r2, r3]
 80435f0:	4618      	mov	r0, r3
 80435f2:	f00c ffad 	bl	8050550 <HAL_NVIC_DisableIRQ>
  for (i = 0; i < grp_ptr->num_ports; i++) {
 80435f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80435fa:	3301      	adds	r3, #1
 80435fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8043600:	687b      	ldr	r3, [r7, #4]
 8043602:	781b      	ldrb	r3, [r3, #0]
 8043604:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8043608:	429a      	cmp	r2, r3
 804360a:	d3d6      	bcc.n	80435ba <chbsp_group_pin_init+0xe2>
  }
  //cmPinInterruptDisable(grp_ptr);
}
 804360c:	bf00      	nop
 804360e:	bf00      	nop
 8043610:	3730      	adds	r7, #48	; 0x30
 8043612:	46bd      	mov	sp, r7
 8043614:	bd80      	pop	{r7, pc}
 8043616:	bf00      	nop
 8043618:	40023800 	.word	0x40023800
 804361c:	40020800 	.word	0x40020800
 8043620:	20007014 	.word	0x20007014
 8043624:	20007018 	.word	0x20007018
 8043628:	2000701c 	.word	0x2000701c
 804362c:	40013c00 	.word	0x40013c00
 8043630:	20007020 	.word	0x20007020

08043634 <chbsp_group_io_clear>:
 * \brief Set the IO pin low.
 *
 * \note If directly coupled to the Chirp sensor it is recommended to use a passive pull-down to ensure the supply is never shorted through the I/O.
 */
void chbsp_group_io_clear(ch_group_t * grp_ptr)
{
 8043634:	b580      	push	{r7, lr}
 8043636:	b084      	sub	sp, #16
 8043638:	af00      	add	r7, sp, #0
 804363a:	6078      	str	r0, [r7, #4]
  uint16_t iomask = 0;
 804363c:	2300      	movs	r3, #0
 804363e:	81fb      	strh	r3, [r7, #14]
  int i;
  for (i = 0; i < grp_ptr->num_ports; i++) {
 8043640:	2300      	movs	r3, #0
 8043642:	60bb      	str	r3, [r7, #8]
 8043644:	e012      	b.n	804366c <chbsp_group_io_clear+0x38>
    if (grp_ptr->device[i]->sensor_connected) {
 8043646:	687a      	ldr	r2, [r7, #4]
 8043648:	68bb      	ldr	r3, [r7, #8]
 804364a:	3304      	adds	r3, #4
 804364c:	009b      	lsls	r3, r3, #2
 804364e:	4413      	add	r3, r2
 8043650:	685b      	ldr	r3, [r3, #4]
 8043652:	7fdb      	ldrb	r3, [r3, #31]
 8043654:	2b00      	cmp	r3, #0
 8043656:	d006      	beq.n	8043666 <chbsp_group_io_clear+0x32>
      iomask |= chirp_pin_io[i];
 8043658:	4a0c      	ldr	r2, [pc, #48]	; (804368c <chbsp_group_io_clear+0x58>)
 804365a:	68bb      	ldr	r3, [r7, #8]
 804365c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8043660:	89fb      	ldrh	r3, [r7, #14]
 8043662:	4313      	orrs	r3, r2
 8043664:	81fb      	strh	r3, [r7, #14]
  for (i = 0; i < grp_ptr->num_ports; i++) {
 8043666:	68bb      	ldr	r3, [r7, #8]
 8043668:	3301      	adds	r3, #1
 804366a:	60bb      	str	r3, [r7, #8]
 804366c:	687b      	ldr	r3, [r7, #4]
 804366e:	781b      	ldrb	r3, [r3, #0]
 8043670:	461a      	mov	r2, r3
 8043672:	68bb      	ldr	r3, [r7, #8]
 8043674:	4293      	cmp	r3, r2
 8043676:	dbe6      	blt.n	8043646 <chbsp_group_io_clear+0x12>
    }
  }
  HAL_GPIO_WritePin(CM_IO_PORT, iomask, GPIO_PIN_RESET);
 8043678:	89fb      	ldrh	r3, [r7, #14]
 804367a:	2200      	movs	r2, #0
 804367c:	4619      	mov	r1, r3
 804367e:	4804      	ldr	r0, [pc, #16]	; (8043690 <chbsp_group_io_clear+0x5c>)
 8043680:	f00e f802 	bl	8051688 <HAL_GPIO_WritePin>
}
 8043684:	bf00      	nop
 8043686:	3710      	adds	r7, #16
 8043688:	46bd      	mov	sp, r7
 804368a:	bd80      	pop	{r7, pc}
 804368c:	2000701c 	.word	0x2000701c
 8043690:	40020800 	.word	0x40020800

08043694 <chbsp_group_io_set>:
 * \brief Set the IO pin high.
 *
 * \note
 */
void chbsp_group_io_set(ch_group_t * grp_ptr)
{
 8043694:	b580      	push	{r7, lr}
 8043696:	b084      	sub	sp, #16
 8043698:	af00      	add	r7, sp, #0
 804369a:	6078      	str	r0, [r7, #4]
  uint16_t iomask = 0;
 804369c:	2300      	movs	r3, #0
 804369e:	81fb      	strh	r3, [r7, #14]
  int i;
  for (i = 0; i < grp_ptr->num_ports; i++) {
 80436a0:	2300      	movs	r3, #0
 80436a2:	60bb      	str	r3, [r7, #8]
 80436a4:	e012      	b.n	80436cc <chbsp_group_io_set+0x38>
    if (grp_ptr->device[i]->sensor_connected) {
 80436a6:	687a      	ldr	r2, [r7, #4]
 80436a8:	68bb      	ldr	r3, [r7, #8]
 80436aa:	3304      	adds	r3, #4
 80436ac:	009b      	lsls	r3, r3, #2
 80436ae:	4413      	add	r3, r2
 80436b0:	685b      	ldr	r3, [r3, #4]
 80436b2:	7fdb      	ldrb	r3, [r3, #31]
 80436b4:	2b00      	cmp	r3, #0
 80436b6:	d006      	beq.n	80436c6 <chbsp_group_io_set+0x32>
      iomask |= chirp_pin_io[i];
 80436b8:	4a0c      	ldr	r2, [pc, #48]	; (80436ec <chbsp_group_io_set+0x58>)
 80436ba:	68bb      	ldr	r3, [r7, #8]
 80436bc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80436c0:	89fb      	ldrh	r3, [r7, #14]
 80436c2:	4313      	orrs	r3, r2
 80436c4:	81fb      	strh	r3, [r7, #14]
  for (i = 0; i < grp_ptr->num_ports; i++) {
 80436c6:	68bb      	ldr	r3, [r7, #8]
 80436c8:	3301      	adds	r3, #1
 80436ca:	60bb      	str	r3, [r7, #8]
 80436cc:	687b      	ldr	r3, [r7, #4]
 80436ce:	781b      	ldrb	r3, [r3, #0]
 80436d0:	461a      	mov	r2, r3
 80436d2:	68bb      	ldr	r3, [r7, #8]
 80436d4:	4293      	cmp	r3, r2
 80436d6:	dbe6      	blt.n	80436a6 <chbsp_group_io_set+0x12>
    }
  }
  HAL_GPIO_WritePin(CM_IO_PORT, iomask, GPIO_PIN_SET);
 80436d8:	89fb      	ldrh	r3, [r7, #14]
 80436da:	2201      	movs	r2, #1
 80436dc:	4619      	mov	r1, r3
 80436de:	4804      	ldr	r0, [pc, #16]	; (80436f0 <chbsp_group_io_set+0x5c>)
 80436e0:	f00d ffd2 	bl	8051688 <HAL_GPIO_WritePin>
}
 80436e4:	bf00      	nop
 80436e6:	3710      	adds	r7, #16
 80436e8:	46bd      	mov	sp, r7
 80436ea:	bd80      	pop	{r7, pc}
 80436ec:	2000701c 	.word	0x2000701c
 80436f0:	40020800 	.word	0x40020800

080436f4 <chbsp_group_io_interrupt_enable>:
 * \brief Enable the interrupt
 *
 * \note
 */
void chbsp_group_io_interrupt_enable(ch_group_t * grp_ptr)
{
 80436f4:	b580      	push	{r7, lr}
 80436f6:	b084      	sub	sp, #16
 80436f8:	af00      	add	r7, sp, #0
 80436fa:	6078      	str	r0, [r7, #4]
  uint8_t i;

  for (i = 0; i < grp_ptr->num_ports; i++) {
 80436fc:	2300      	movs	r3, #0
 80436fe:	73fb      	strb	r3, [r7, #15]
 8043700:	e00b      	b.n	804371a <chbsp_group_io_interrupt_enable+0x26>
    //printf("chbsp_group_io_interrupt_enable! %u\r\n", osKernelGetTickCount());
    chbsp_io_interrupt_enable(grp_ptr->device[i]);
 8043702:	7bfb      	ldrb	r3, [r7, #15]
 8043704:	687a      	ldr	r2, [r7, #4]
 8043706:	3304      	adds	r3, #4
 8043708:	009b      	lsls	r3, r3, #2
 804370a:	4413      	add	r3, r2
 804370c:	685b      	ldr	r3, [r3, #4]
 804370e:	4618      	mov	r0, r3
 8043710:	f000 f80e 	bl	8043730 <chbsp_io_interrupt_enable>
  for (i = 0; i < grp_ptr->num_ports; i++) {
 8043714:	7bfb      	ldrb	r3, [r7, #15]
 8043716:	3301      	adds	r3, #1
 8043718:	73fb      	strb	r3, [r7, #15]
 804371a:	687b      	ldr	r3, [r7, #4]
 804371c:	781b      	ldrb	r3, [r3, #0]
 804371e:	7bfa      	ldrb	r2, [r7, #15]
 8043720:	429a      	cmp	r2, r3
 8043722:	d3ee      	bcc.n	8043702 <chbsp_group_io_interrupt_enable+0xe>
  }
}
 8043724:	bf00      	nop
 8043726:	bf00      	nop
 8043728:	3710      	adds	r7, #16
 804372a:	46bd      	mov	sp, r7
 804372c:	bd80      	pop	{r7, pc}
	...

08043730 <chbsp_io_interrupt_enable>:

void chbsp_io_interrupt_enable(ch_dev_t * dev_ptr)
{
 8043730:	b580      	push	{r7, lr}
 8043732:	b088      	sub	sp, #32
 8043734:	af00      	add	r7, sp, #0
 8043736:	6078      	str	r0, [r7, #4]
  if (dev_ptr->sensor_connected) {
 8043738:	687b      	ldr	r3, [r7, #4]
 804373a:	7fdb      	ldrb	r3, [r3, #31]
 804373c:	2b00      	cmp	r3, #0
 804373e:	d045      	beq.n	80437cc <chbsp_io_interrupt_enable+0x9c>
    GPIO_InitTypeDef GPIO_InitStructure;
    //printf("chbsp_io_interrupt_enable: %d\r\n", dev_ptr->io_index);
    /* Enable GPIOA clock */
    CM_IO_PORT_ENABLE();
 8043740:	2300      	movs	r3, #0
 8043742:	60bb      	str	r3, [r7, #8]
 8043744:	4b23      	ldr	r3, [pc, #140]	; (80437d4 <chbsp_io_interrupt_enable+0xa4>)
 8043746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8043748:	4a22      	ldr	r2, [pc, #136]	; (80437d4 <chbsp_io_interrupt_enable+0xa4>)
 804374a:	f043 0304 	orr.w	r3, r3, #4
 804374e:	6313      	str	r3, [r2, #48]	; 0x30
 8043750:	4b20      	ldr	r3, [pc, #128]	; (80437d4 <chbsp_io_interrupt_enable+0xa4>)
 8043752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8043754:	f003 0304 	and.w	r3, r3, #4
 8043758:	60bb      	str	r3, [r7, #8]
 804375a:	68bb      	ldr	r3, [r7, #8]

    /* Configure PA0 pin as input pull down */
    __HAL_GPIO_EXTI_CLEAR_FLAG(chirp_pin_io[dev_ptr->io_index]);
 804375c:	687b      	ldr	r3, [r7, #4]
 804375e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8043762:	461a      	mov	r2, r3
 8043764:	4b1c      	ldr	r3, [pc, #112]	; (80437d8 <chbsp_io_interrupt_enable+0xa8>)
 8043766:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 804376a:	4b1c      	ldr	r3, [pc, #112]	; (80437dc <chbsp_io_interrupt_enable+0xac>)
 804376c:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(chirp_pin_io[dev_ptr->io_index]);
 804376e:	687b      	ldr	r3, [r7, #4]
 8043770:	f893 3020 	ldrb.w	r3, [r3, #32]
 8043774:	461a      	mov	r2, r3
 8043776:	4b18      	ldr	r3, [pc, #96]	; (80437d8 <chbsp_io_interrupt_enable+0xa8>)
 8043778:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 804377c:	4b17      	ldr	r3, [pc, #92]	; (80437dc <chbsp_io_interrupt_enable+0xac>)
 804377e:	615a      	str	r2, [r3, #20]
    GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8043780:	4b17      	ldr	r3, [pc, #92]	; (80437e0 <chbsp_io_interrupt_enable+0xb0>)
 8043782:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull = GPIO_NOPULL;
 8043784:	2300      	movs	r3, #0
 8043786:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Pin = chirp_pin_io[dev_ptr->io_index];
 8043788:	687b      	ldr	r3, [r7, #4]
 804378a:	f893 3020 	ldrb.w	r3, [r3, #32]
 804378e:	461a      	mov	r2, r3
 8043790:	4b11      	ldr	r3, [pc, #68]	; (80437d8 <chbsp_io_interrupt_enable+0xa8>)
 8043792:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8043796:	60fb      	str	r3, [r7, #12]

    HAL_GPIO_Init(CM_IO_PORT, &GPIO_InitStructure);
 8043798:	f107 030c 	add.w	r3, r7, #12
 804379c:	4619      	mov	r1, r3
 804379e:	4811      	ldr	r0, [pc, #68]	; (80437e4 <chbsp_io_interrupt_enable+0xb4>)
 80437a0:	f00d fdbe 	bl	8051320 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(chirp_pin_io_irq[dev_ptr->io_index],
 80437a4:	687b      	ldr	r3, [r7, #4]
 80437a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80437aa:	461a      	mov	r2, r3
 80437ac:	4b0e      	ldr	r3, [pc, #56]	; (80437e8 <chbsp_io_interrupt_enable+0xb8>)
 80437ae:	569b      	ldrsb	r3, [r3, r2]
 80437b0:	2200      	movs	r2, #0
 80437b2:	210f      	movs	r1, #15
 80437b4:	4618      	mov	r0, r3
 80437b6:	f00c fea1 	bl	80504fc <HAL_NVIC_SetPriority>
                         CH_SENSOR_IRQ_PRIORITY, 0);
    HAL_NVIC_EnableIRQ(chirp_pin_io_irq[dev_ptr->io_index]);
 80437ba:	687b      	ldr	r3, [r7, #4]
 80437bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80437c0:	461a      	mov	r2, r3
 80437c2:	4b09      	ldr	r3, [pc, #36]	; (80437e8 <chbsp_io_interrupt_enable+0xb8>)
 80437c4:	569b      	ldrsb	r3, [r3, r2]
 80437c6:	4618      	mov	r0, r3
 80437c8:	f00c feb4 	bl	8050534 <HAL_NVIC_EnableIRQ>
  }
}
 80437cc:	bf00      	nop
 80437ce:	3720      	adds	r7, #32
 80437d0:	46bd      	mov	sp, r7
 80437d2:	bd80      	pop	{r7, pc}
 80437d4:	40023800 	.word	0x40023800
 80437d8:	2000701c 	.word	0x2000701c
 80437dc:	40013c00 	.word	0x40013c00
 80437e0:	10110000 	.word	0x10110000
 80437e4:	40020800 	.word	0x40020800
 80437e8:	20007020 	.word	0x20007020

080437ec <chbsp_group_io_interrupt_disable>:
 * \brief Disable the interrupt
 *
 * \note
 */
void chbsp_group_io_interrupt_disable(ch_group_t * grp_ptr)
{
 80437ec:	b580      	push	{r7, lr}
 80437ee:	b084      	sub	sp, #16
 80437f0:	af00      	add	r7, sp, #0
 80437f2:	6078      	str	r0, [r7, #4]

  uint8_t i;
  for (i = 0; i < grp_ptr->num_ports; i++) {
 80437f4:	2300      	movs	r3, #0
 80437f6:	73fb      	strb	r3, [r7, #15]
 80437f8:	e00b      	b.n	8043812 <chbsp_group_io_interrupt_disable+0x26>
    //printf("chbsp_io_interrupt_disable! %u\r\n", osKernelGetTickCount());
    chbsp_io_interrupt_disable(grp_ptr->device[i]);
 80437fa:	7bfb      	ldrb	r3, [r7, #15]
 80437fc:	687a      	ldr	r2, [r7, #4]
 80437fe:	3304      	adds	r3, #4
 8043800:	009b      	lsls	r3, r3, #2
 8043802:	4413      	add	r3, r2
 8043804:	685b      	ldr	r3, [r3, #4]
 8043806:	4618      	mov	r0, r3
 8043808:	f000 f80e 	bl	8043828 <chbsp_io_interrupt_disable>
  for (i = 0; i < grp_ptr->num_ports; i++) {
 804380c:	7bfb      	ldrb	r3, [r7, #15]
 804380e:	3301      	adds	r3, #1
 8043810:	73fb      	strb	r3, [r7, #15]
 8043812:	687b      	ldr	r3, [r7, #4]
 8043814:	781b      	ldrb	r3, [r3, #0]
 8043816:	7bfa      	ldrb	r2, [r7, #15]
 8043818:	429a      	cmp	r2, r3
 804381a:	d3ee      	bcc.n	80437fa <chbsp_group_io_interrupt_disable+0xe>
  }
}
 804381c:	bf00      	nop
 804381e:	bf00      	nop
 8043820:	3710      	adds	r7, #16
 8043822:	46bd      	mov	sp, r7
 8043824:	bd80      	pop	{r7, pc}
	...

08043828 <chbsp_io_interrupt_disable>:

void chbsp_io_interrupt_disable(ch_dev_t * dev_ptr)
{
 8043828:	b580      	push	{r7, lr}
 804382a:	b082      	sub	sp, #8
 804382c:	af00      	add	r7, sp, #0
 804382e:	6078      	str	r0, [r7, #4]

  if (dev_ptr->sensor_connected) {
 8043830:	687b      	ldr	r3, [r7, #4]
 8043832:	7fdb      	ldrb	r3, [r3, #31]
 8043834:	2b00      	cmp	r3, #0
 8043836:	d008      	beq.n	804384a <chbsp_io_interrupt_disable+0x22>
    /* Configure PA0 pin as input floating */
    //printf("chbsp_group_io_interrupt_disable: %d\r\n", dev_ptr->io_index);
    HAL_NVIC_DisableIRQ(chirp_pin_io_irq[dev_ptr->io_index]);
 8043838:	687b      	ldr	r3, [r7, #4]
 804383a:	f893 3020 	ldrb.w	r3, [r3, #32]
 804383e:	461a      	mov	r2, r3
 8043840:	4b04      	ldr	r3, [pc, #16]	; (8043854 <chbsp_io_interrupt_disable+0x2c>)
 8043842:	569b      	ldrsb	r3, [r3, r2]
 8043844:	4618      	mov	r0, r3
 8043846:	f00c fe83 	bl	8050550 <HAL_NVIC_DisableIRQ>
  }
}
 804384a:	bf00      	nop
 804384c:	3708      	adds	r7, #8
 804384e:	46bd      	mov	sp, r7
 8043850:	bd80      	pop	{r7, pc}
 8043852:	bf00      	nop
 8043854:	20007020 	.word	0x20007020

08043858 <chbsp_delay_us>:
 * \brief Busy wait delay for us microseconds
 *
 * \note
 */
void chbsp_delay_us(uint32_t us)
{
 8043858:	b580      	push	{r7, lr}
 804385a:	b084      	sub	sp, #16
 804385c:	af00      	add	r7, sp, #0
 804385e:	6078      	str	r0, [r7, #4]
  uint32_t cycles_per_us = HAL_RCC_GetSysClockFreq() / 10000000;
 8043860:	f00f fed6 	bl	8053610 <HAL_RCC_GetSysClockFreq>
 8043864:	4603      	mov	r3, r0
 8043866:	4a0b      	ldr	r2, [pc, #44]	; (8043894 <chbsp_delay_us+0x3c>)
 8043868:	fba2 2303 	umull	r2, r3, r2, r3
 804386c:	0d9b      	lsrs	r3, r3, #22
 804386e:	60fb      	str	r3, [r7, #12]
  volatile uint32_t i;

  for (i = 0; i < (us * cycles_per_us); i++) {
 8043870:	2300      	movs	r3, #0
 8043872:	60bb      	str	r3, [r7, #8]
 8043874:	e002      	b.n	804387c <chbsp_delay_us+0x24>
 8043876:	68bb      	ldr	r3, [r7, #8]
 8043878:	3301      	adds	r3, #1
 804387a:	60bb      	str	r3, [r7, #8]
 804387c:	687b      	ldr	r3, [r7, #4]
 804387e:	68fa      	ldr	r2, [r7, #12]
 8043880:	fb02 f203 	mul.w	r2, r2, r3
 8043884:	68bb      	ldr	r3, [r7, #8]
 8043886:	429a      	cmp	r2, r3
 8043888:	d8f5      	bhi.n	8043876 <chbsp_delay_us+0x1e>
    ;
  }
}
 804388a:	bf00      	nop
 804388c:	bf00      	nop
 804388e:	3710      	adds	r7, #16
 8043890:	46bd      	mov	sp, r7
 8043892:	bd80      	pop	{r7, pc}
 8043894:	6b5fca6b 	.word	0x6b5fca6b

08043898 <chbsp_delay_ms>:
 * \brief Busy wait delay for ms milliseconds
 *
 * \note
 */
void chbsp_delay_ms(uint32_t ms)
{
 8043898:	b580      	push	{r7, lr}
 804389a:	b082      	sub	sp, #8
 804389c:	af00      	add	r7, sp, #0
 804389e:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 80438a0:	6878      	ldr	r0, [r7, #4]
 80438a2:	f00b fed3 	bl	804f64c <HAL_Delay>
}
 80438a6:	bf00      	nop
 80438a8:	3708      	adds	r7, #8
 80438aa:	46bd      	mov	sp, r7
 80438ac:	bd80      	pop	{r7, pc}
	...

080438b0 <chbsp_i2c_init>:
/*!
 * \brief Initialize the host's I2C hardware.
 * Return 0 if successful, non-zero otherwise
 */
int chbsp_i2c_init(void)
{
 80438b0:	b580      	push	{r7, lr}
 80438b2:	b082      	sub	sp, #8
 80438b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef res = HAL_OK;
 80438b6:	2300      	movs	r3, #0
 80438b8:	71fb      	strb	r3, [r7, #7]

  //cp chirp_init_parms->i2chandle to hi2c[0] using memory cpy
  if (chirp_init_parms != NULL) {
 80438ba:	4b0e      	ldr	r3, [pc, #56]	; (80438f4 <chbsp_i2c_init+0x44>)
 80438bc:	681b      	ldr	r3, [r3, #0]
 80438be:	2b00      	cmp	r3, #0
 80438c0:	d009      	beq.n	80438d6 <chbsp_i2c_init+0x26>
    hi2c[0] = chirp_init_parms->i2c_handle;
 80438c2:	4b0c      	ldr	r3, [pc, #48]	; (80438f4 <chbsp_i2c_init+0x44>)
 80438c4:	681b      	ldr	r3, [r3, #0]
 80438c6:	4a0c      	ldr	r2, [pc, #48]	; (80438f8 <chbsp_i2c_init+0x48>)
 80438c8:	4610      	mov	r0, r2
 80438ca:	3304      	adds	r3, #4
 80438cc:	2254      	movs	r2, #84	; 0x54
 80438ce:	4619      	mov	r1, r3
 80438d0:	f01c fb66 	bl	805ffa0 <memcpy>
 80438d4:	e004      	b.n	80438e0 <chbsp_i2c_init+0x30>
  } else {
    printf("chirp_init_pram is NULL!\r\n");
 80438d6:	4809      	ldr	r0, [pc, #36]	; (80438fc <chbsp_i2c_init+0x4c>)
 80438d8:	f01d f8e8 	bl	8060aac <puts>
    res = HAL_ERROR;
 80438dc:	2301      	movs	r3, #1
 80438de:	71fb      	strb	r3, [r7, #7]
  }

  return (res != HAL_OK);
 80438e0:	79fb      	ldrb	r3, [r7, #7]
 80438e2:	2b00      	cmp	r3, #0
 80438e4:	bf14      	ite	ne
 80438e6:	2301      	movne	r3, #1
 80438e8:	2300      	moveq	r3, #0
 80438ea:	b2db      	uxtb	r3, r3
}
 80438ec:	4618      	mov	r0, r3
 80438ee:	3708      	adds	r7, #8
 80438f0:	46bd      	mov	sp, r7
 80438f2:	bd80      	pop	{r7, pc}
 80438f4:	20007f84 	.word	0x20007f84
 80438f8:	2001bd88 	.word	0x2001bd88
 80438fc:	08065120 	.word	0x08065120

08043900 <chbsp_i2c_write>:
 *
 * \note The blocking-mode driver does not always seem to wait for the bus to be free.  This function checks the busy flag
 * explicitly.
 */
int chbsp_i2c_write(ch_dev_t * dev_ptr, uint8_t * data, uint16_t n)
{
 8043900:	b580      	push	{r7, lr}
 8043902:	b088      	sub	sp, #32
 8043904:	af02      	add	r7, sp, #8
 8043906:	60f8      	str	r0, [r7, #12]
 8043908:	60b9      	str	r1, [r7, #8]
 804390a:	4613      	mov	r3, r2
 804390c:	80fb      	strh	r3, [r7, #6]
  int error = (HAL_I2C_Master_Transmit(&hi2c[dev_ptr->i2c_bus_index],
 804390e:	68fb      	ldr	r3, [r7, #12]
 8043910:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8043914:	461a      	mov	r2, r3
 8043916:	2354      	movs	r3, #84	; 0x54
 8043918:	fb03 f302 	mul.w	r3, r3, r2
 804391c:	4a13      	ldr	r2, [pc, #76]	; (804396c <chbsp_i2c_write+0x6c>)
 804391e:	1898      	adds	r0, r3, r2
                                       (uint16_t) (dev_ptr->i2c_address) << 1,
 8043920:	68fb      	ldr	r3, [r7, #12]
 8043922:	7e1b      	ldrb	r3, [r3, #24]
 8043924:	b29b      	uxth	r3, r3
  int error = (HAL_I2C_Master_Transmit(&hi2c[dev_ptr->i2c_bus_index],
 8043926:	005b      	lsls	r3, r3, #1
 8043928:	b299      	uxth	r1, r3
 804392a:	88fb      	ldrh	r3, [r7, #6]
 804392c:	f242 7210 	movw	r2, #10000	; 0x2710
 8043930:	9200      	str	r2, [sp, #0]
 8043932:	68ba      	ldr	r2, [r7, #8]
 8043934:	f00e f81e 	bl	8051974 <HAL_I2C_Master_Transmit>
 8043938:	4603      	mov	r3, r0
 804393a:	617b      	str	r3, [r7, #20]
                                       data, n, 10000));

  if (!error) {
 804393c:	697b      	ldr	r3, [r7, #20]
 804393e:	2b00      	cmp	r3, #0
 8043940:	d10f      	bne.n	8043962 <chbsp_i2c_write+0x62>
    while (__HAL_I2C_GET_FLAG(&hi2c[dev_ptr->i2c_bus_index], I2C_FLAG_BUSY)) {
 8043942:	bf00      	nop
 8043944:	68fb      	ldr	r3, [r7, #12]
 8043946:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 804394a:	4619      	mov	r1, r3
 804394c:	4a07      	ldr	r2, [pc, #28]	; (804396c <chbsp_i2c_write+0x6c>)
 804394e:	2354      	movs	r3, #84	; 0x54
 8043950:	fb03 f301 	mul.w	r3, r3, r1
 8043954:	4413      	add	r3, r2
 8043956:	681b      	ldr	r3, [r3, #0]
 8043958:	699b      	ldr	r3, [r3, #24]
 804395a:	f003 0302 	and.w	r3, r3, #2
 804395e:	2b02      	cmp	r3, #2
 8043960:	d0f0      	beq.n	8043944 <chbsp_i2c_write+0x44>
      ;                         // wait here until bus not busy
    }
  } else {
    //printf("sensor i2c write Error:%d\n",error);
  }
  return error;
 8043962:	697b      	ldr	r3, [r7, #20]
}
 8043964:	4618      	mov	r0, r3
 8043966:	3718      	adds	r7, #24
 8043968:	46bd      	mov	sp, r7
 804396a:	bd80      	pop	{r7, pc}
 804396c:	2001bd88 	.word	0x2001bd88

08043970 <chbsp_i2c_mem_write>:

// XXX need comment block
int chbsp_i2c_mem_write(ch_dev_t * dev_ptr, uint16_t mem_addr,
                        uint8_t * data_ptr, uint16_t num_bytes)
{
 8043970:	b580      	push	{r7, lr}
 8043972:	b08c      	sub	sp, #48	; 0x30
 8043974:	af04      	add	r7, sp, #16
 8043976:	60f8      	str	r0, [r7, #12]
 8043978:	607a      	str	r2, [r7, #4]
 804397a:	461a      	mov	r2, r3
 804397c:	460b      	mov	r3, r1
 804397e:	817b      	strh	r3, [r7, #10]
 8043980:	4613      	mov	r3, r2
 8043982:	813b      	strh	r3, [r7, #8]
  I2C_HandleTypeDef *handle = &hi2c[dev_ptr->i2c_bus_index];
 8043984:	68fb      	ldr	r3, [r7, #12]
 8043986:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 804398a:	461a      	mov	r2, r3
 804398c:	2354      	movs	r3, #84	; 0x54
 804398e:	fb03 f302 	mul.w	r3, r3, r2
 8043992:	4a1c      	ldr	r2, [pc, #112]	; (8043a04 <chbsp_i2c_mem_write+0x94>)
 8043994:	4413      	add	r3, r2
 8043996:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef hal_status;
  uint16_t dev_addr = (dev_ptr->i2c_address << 1);      // I2C address for device (shifted)
 8043998:	68fb      	ldr	r3, [r7, #12]
 804399a:	7e1b      	ldrb	r3, [r3, #24]
 804399c:	b29b      	uxth	r3, r3
 804399e:	005b      	lsls	r3, r3, #1
 80439a0:	82fb      	strh	r3, [r7, #22]
  int ret_val = 1;
 80439a2:	2301      	movs	r3, #1
 80439a4:	61fb      	str	r3, [r7, #28]

#if 1
  printf("chbsp_i2c_mem_write:  calling HAL_I2C_Mem_Read(0x%x, 0x%x, 0x%x, %d, 0x%x, %d, %d)\r\n",      // XXX debug
 80439a6:	8afa      	ldrh	r2, [r7, #22]
 80439a8:	8979      	ldrh	r1, [r7, #10]
 80439aa:	893b      	ldrh	r3, [r7, #8]
 80439ac:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80439b0:	9003      	str	r0, [sp, #12]
 80439b2:	9302      	str	r3, [sp, #8]
 80439b4:	687b      	ldr	r3, [r7, #4]
 80439b6:	9301      	str	r3, [sp, #4]
 80439b8:	2301      	movs	r3, #1
 80439ba:	9300      	str	r3, [sp, #0]
 80439bc:	460b      	mov	r3, r1
 80439be:	69b9      	ldr	r1, [r7, #24]
 80439c0:	4811      	ldr	r0, [pc, #68]	; (8043a08 <chbsp_i2c_mem_write+0x98>)
 80439c2:	f01c ffd7 	bl	8060974 <iprintf>
         handle, dev_addr, mem_addr, sizeof(uint8_t), data_ptr, num_bytes, I2C_TIMEOUT);        // XXX debug
#endif

  hal_status = HAL_I2C_Mem_Write(handle, dev_addr, mem_addr, sizeof(uint8_t),
 80439c6:	897a      	ldrh	r2, [r7, #10]
 80439c8:	8af9      	ldrh	r1, [r7, #22]
 80439ca:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80439ce:	9302      	str	r3, [sp, #8]
 80439d0:	893b      	ldrh	r3, [r7, #8]
 80439d2:	9301      	str	r3, [sp, #4]
 80439d4:	687b      	ldr	r3, [r7, #4]
 80439d6:	9300      	str	r3, [sp, #0]
 80439d8:	2301      	movs	r3, #1
 80439da:	69b8      	ldr	r0, [r7, #24]
 80439dc:	f00e faee 	bl	8051fbc <HAL_I2C_Mem_Write>
 80439e0:	4603      	mov	r3, r0
 80439e2:	757b      	strb	r3, [r7, #21]
                                 data_ptr, num_bytes, I2C_TIMEOUT);
#if 1
  printf(" chbsp_i2c_mem_write hal_status = 0x%x\r\n", hal_status);     // XXX debug
 80439e4:	7d7b      	ldrb	r3, [r7, #21]
 80439e6:	4619      	mov	r1, r3
 80439e8:	4808      	ldr	r0, [pc, #32]	; (8043a0c <chbsp_i2c_mem_write+0x9c>)
 80439ea:	f01c ffc3 	bl	8060974 <iprintf>
#endif
  if (hal_status == HAL_OK) {
 80439ee:	7d7b      	ldrb	r3, [r7, #21]
 80439f0:	2b00      	cmp	r3, #0
 80439f2:	d101      	bne.n	80439f8 <chbsp_i2c_mem_write+0x88>
    ret_val = 0;                // indicate success
 80439f4:	2300      	movs	r3, #0
 80439f6:	61fb      	str	r3, [r7, #28]
  }

  return ret_val;
 80439f8:	69fb      	ldr	r3, [r7, #28]

}
 80439fa:	4618      	mov	r0, r3
 80439fc:	3720      	adds	r7, #32
 80439fe:	46bd      	mov	sp, r7
 8043a00:	bd80      	pop	{r7, pc}
 8043a02:	bf00      	nop
 8043a04:	2001bd88 	.word	0x2001bd88
 8043a08:	0806513c 	.word	0x0806513c
 8043a0c:	08065194 	.word	0x08065194

08043a10 <chbsp_i2c_read>:
 * \note The blocking-mode driver does not always seem to wait for the bus to be free.  This function checks the busy flag
 * explicitly.
 */
//#define I2CDEBUG
int chbsp_i2c_read(ch_dev_t * dev_ptr, uint8_t * data, uint16_t len)
{
 8043a10:	b580      	push	{r7, lr}
 8043a12:	b088      	sub	sp, #32
 8043a14:	af02      	add	r7, sp, #8
 8043a16:	60f8      	str	r0, [r7, #12]
 8043a18:	60b9      	str	r1, [r7, #8]
 8043a1a:	4613      	mov	r3, r2
 8043a1c:	80fb      	strh	r3, [r7, #6]
#ifdef I2CDEBUG
  int32_t timeout = 10000000;
#endif
  int error = (HAL_I2C_Master_Receive(&hi2c[dev_ptr->i2c_bus_index],
 8043a1e:	68fb      	ldr	r3, [r7, #12]
 8043a20:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8043a24:	461a      	mov	r2, r3
 8043a26:	2354      	movs	r3, #84	; 0x54
 8043a28:	fb03 f302 	mul.w	r3, r3, r2
 8043a2c:	4a1c      	ldr	r2, [pc, #112]	; (8043aa0 <chbsp_i2c_read+0x90>)
 8043a2e:	1898      	adds	r0, r3, r2
                                      (uint16_t) (dev_ptr->i2c_address) << 1,
 8043a30:	68fb      	ldr	r3, [r7, #12]
 8043a32:	7e1b      	ldrb	r3, [r3, #24]
 8043a34:	b29b      	uxth	r3, r3
  int error = (HAL_I2C_Master_Receive(&hi2c[dev_ptr->i2c_bus_index],
 8043a36:	005b      	lsls	r3, r3, #1
 8043a38:	b299      	uxth	r1, r3
 8043a3a:	88fb      	ldrh	r3, [r7, #6]
 8043a3c:	2264      	movs	r2, #100	; 0x64
 8043a3e:	9200      	str	r2, [sp, #0]
 8043a40:	68ba      	ldr	r2, [r7, #8]
 8043a42:	f00e f895 	bl	8051b70 <HAL_I2C_Master_Receive>
 8043a46:	4603      	mov	r3, r0
                                      data, len, 100) != HAL_OK);
 8043a48:	2b00      	cmp	r3, #0
 8043a4a:	bf14      	ite	ne
 8043a4c:	2301      	movne	r3, #1
 8043a4e:	2300      	moveq	r3, #0
 8043a50:	b2db      	uxtb	r3, r3
  int error = (HAL_I2C_Master_Receive(&hi2c[dev_ptr->i2c_bus_index],
 8043a52:	617b      	str	r3, [r7, #20]
  if (!error)
 8043a54:	697b      	ldr	r3, [r7, #20]
 8043a56:	2b00      	cmp	r3, #0
 8043a58:	d10f      	bne.n	8043a7a <chbsp_i2c_read+0x6a>
#ifdef I2CDEBUG
    if (timeout == 10000000)
      printf("len: %u\n", len);
#endif
  while (__HAL_I2C_GET_FLAG(&hi2c[dev_ptr->i2c_bus_index], I2C_FLAG_BUSY)) {
 8043a5a:	bf00      	nop
 8043a5c:	68fb      	ldr	r3, [r7, #12]
 8043a5e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8043a62:	4619      	mov	r1, r3
 8043a64:	4a0e      	ldr	r2, [pc, #56]	; (8043aa0 <chbsp_i2c_read+0x90>)
 8043a66:	2354      	movs	r3, #84	; 0x54
 8043a68:	fb03 f301 	mul.w	r3, r3, r1
 8043a6c:	4413      	add	r3, r2
 8043a6e:	681b      	ldr	r3, [r3, #0]
 8043a70:	699b      	ldr	r3, [r3, #24]
 8043a72:	f003 0302 	and.w	r3, r3, #2
 8043a76:	2b02      	cmp	r3, #2
 8043a78:	d0f0      	beq.n	8043a5c <chbsp_i2c_read+0x4c>
    if (timeout < 0) {
      printf("i2c Timed out!!!!!!!!!!!!!!!\n");
    }
#endif
  }
  if (error) {
 8043a7a:	697b      	ldr	r3, [r7, #20]
 8043a7c:	2b00      	cmp	r3, #0
 8043a7e:	d009      	beq.n	8043a94 <chbsp_i2c_read+0x84>
    printf("i2c error: %u ! %u:%u\n", error, dev_ptr->i2c_bus_index,
 8043a80:	68fb      	ldr	r3, [r7, #12]
 8043a82:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8043a86:	461a      	mov	r2, r3
           dev_ptr->i2c_address);
 8043a88:	68fb      	ldr	r3, [r7, #12]
 8043a8a:	7e1b      	ldrb	r3, [r3, #24]
    printf("i2c error: %u ! %u:%u\n", error, dev_ptr->i2c_bus_index,
 8043a8c:	6979      	ldr	r1, [r7, #20]
 8043a8e:	4805      	ldr	r0, [pc, #20]	; (8043aa4 <chbsp_i2c_read+0x94>)
 8043a90:	f01c ff70 	bl	8060974 <iprintf>
  }
  return error;
 8043a94:	697b      	ldr	r3, [r7, #20]
}
 8043a96:	4618      	mov	r0, r3
 8043a98:	3718      	adds	r7, #24
 8043a9a:	46bd      	mov	sp, r7
 8043a9c:	bd80      	pop	{r7, pc}
 8043a9e:	bf00      	nop
 8043aa0:	2001bd88 	.word	0x2001bd88
 8043aa4:	080651c0 	.word	0x080651c0

08043aa8 <chbsp_i2c_mem_read>:

// XXX need comment block
//
int chbsp_i2c_mem_read(ch_dev_t * dev_ptr, uint16_t mem_addr,
                       uint8_t * data_ptr, uint16_t num_bytes)
{
 8043aa8:	b580      	push	{r7, lr}
 8043aaa:	b08c      	sub	sp, #48	; 0x30
 8043aac:	af04      	add	r7, sp, #16
 8043aae:	60f8      	str	r0, [r7, #12]
 8043ab0:	607a      	str	r2, [r7, #4]
 8043ab2:	461a      	mov	r2, r3
 8043ab4:	460b      	mov	r3, r1
 8043ab6:	817b      	strh	r3, [r7, #10]
 8043ab8:	4613      	mov	r3, r2
 8043aba:	813b      	strh	r3, [r7, #8]
  I2C_HandleTypeDef *handle = &hi2c[dev_ptr->i2c_bus_index];
 8043abc:	68fb      	ldr	r3, [r7, #12]
 8043abe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8043ac2:	461a      	mov	r2, r3
 8043ac4:	2354      	movs	r3, #84	; 0x54
 8043ac6:	fb03 f302 	mul.w	r3, r3, r2
 8043aca:	4a1c      	ldr	r2, [pc, #112]	; (8043b3c <chbsp_i2c_mem_read+0x94>)
 8043acc:	4413      	add	r3, r2
 8043ace:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef hal_status;
  uint16_t dev_addr = (dev_ptr->i2c_address << 1);      // I2C address for device (shifted)
 8043ad0:	68fb      	ldr	r3, [r7, #12]
 8043ad2:	7e1b      	ldrb	r3, [r3, #24]
 8043ad4:	b29b      	uxth	r3, r3
 8043ad6:	005b      	lsls	r3, r3, #1
 8043ad8:	82fb      	strh	r3, [r7, #22]
  int ret_val = 1;
 8043ada:	2301      	movs	r3, #1
 8043adc:	61fb      	str	r3, [r7, #28]

#if 1
  printf("chbsp_i2c_mem_read:  calling HAL_I2C_Mem_Read(0x%x, 0x%x, 0x%x, %d, 0x%x, %d, %d)\r\n",       // XXX debug
 8043ade:	8afa      	ldrh	r2, [r7, #22]
 8043ae0:	8979      	ldrh	r1, [r7, #10]
 8043ae2:	893b      	ldrh	r3, [r7, #8]
 8043ae4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8043ae8:	9003      	str	r0, [sp, #12]
 8043aea:	9302      	str	r3, [sp, #8]
 8043aec:	687b      	ldr	r3, [r7, #4]
 8043aee:	9301      	str	r3, [sp, #4]
 8043af0:	2301      	movs	r3, #1
 8043af2:	9300      	str	r3, [sp, #0]
 8043af4:	460b      	mov	r3, r1
 8043af6:	69b9      	ldr	r1, [r7, #24]
 8043af8:	4811      	ldr	r0, [pc, #68]	; (8043b40 <chbsp_i2c_mem_read+0x98>)
 8043afa:	f01c ff3b 	bl	8060974 <iprintf>
         handle, dev_addr, mem_addr, sizeof(uint8_t), data_ptr, num_bytes, I2C_TIMEOUT);        // XXX debug
#endif
  hal_status = HAL_I2C_Mem_Read(handle, dev_addr, mem_addr, sizeof(uint8_t),
 8043afe:	897a      	ldrh	r2, [r7, #10]
 8043b00:	8af9      	ldrh	r1, [r7, #22]
 8043b02:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8043b06:	9302      	str	r3, [sp, #8]
 8043b08:	893b      	ldrh	r3, [r7, #8]
 8043b0a:	9301      	str	r3, [sp, #4]
 8043b0c:	687b      	ldr	r3, [r7, #4]
 8043b0e:	9300      	str	r3, [sp, #0]
 8043b10:	2301      	movs	r3, #1
 8043b12:	69b8      	ldr	r0, [r7, #24]
 8043b14:	f00e fb4c 	bl	80521b0 <HAL_I2C_Mem_Read>
 8043b18:	4603      	mov	r3, r0
 8043b1a:	757b      	strb	r3, [r7, #21]
                                data_ptr, num_bytes, I2C_TIMEOUT);

#if 1
  printf("chbsp_i2c_mem_read hal_status = 0x%x\r\n", hal_status);       // XXX debug
 8043b1c:	7d7b      	ldrb	r3, [r7, #21]
 8043b1e:	4619      	mov	r1, r3
 8043b20:	4808      	ldr	r0, [pc, #32]	; (8043b44 <chbsp_i2c_mem_read+0x9c>)
 8043b22:	f01c ff27 	bl	8060974 <iprintf>
#endif

  if (hal_status == HAL_OK) {
 8043b26:	7d7b      	ldrb	r3, [r7, #21]
 8043b28:	2b00      	cmp	r3, #0
 8043b2a:	d101      	bne.n	8043b30 <chbsp_i2c_mem_read+0x88>
    ret_val = 0;                // indicate success
 8043b2c:	2300      	movs	r3, #0
 8043b2e:	61fb      	str	r3, [r7, #28]
  }

  return ret_val;
 8043b30:	69fb      	ldr	r3, [r7, #28]
}
 8043b32:	4618      	mov	r0, r3
 8043b34:	3720      	adds	r7, #32
 8043b36:	46bd      	mov	sp, r7
 8043b38:	bd80      	pop	{r7, pc}
 8043b3a:	bf00      	nop
 8043b3c:	2001bd88 	.word	0x2001bd88
 8043b40:	080651d8 	.word	0x080651d8
 8043b44:	0806522c 	.word	0x0806522c

08043b48 <chbsp_debug_toggle>:
{
  //DBG_PIN_OFF(dbg_pin_num);
}

void chbsp_debug_toggle(uint8_t dbg_pin_num)
{
 8043b48:	b480      	push	{r7}
 8043b4a:	b083      	sub	sp, #12
 8043b4c:	af00      	add	r7, sp, #0
 8043b4e:	4603      	mov	r3, r0
 8043b50:	71fb      	strb	r3, [r7, #7]
  //DBG_PIN_TOGGLE(dbg_pin_num);
}
 8043b52:	bf00      	nop
 8043b54:	370c      	adds	r7, #12
 8043b56:	46bd      	mov	sp, r7
 8043b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043b5c:	4770      	bx	lr
	...

08043b60 <chbsp_i2c_reset>:

void chbsp_i2c_reset(ch_dev_t * dev_ptr)
{
 8043b60:	b580      	push	{r7, lr}
 8043b62:	b082      	sub	sp, #8
 8043b64:	af00      	add	r7, sp, #0
 8043b66:	6078      	str	r0, [r7, #4]
  HAL_I2C_Init(&hi2c[dev_ptr->i2c_bus_index]);
 8043b68:	687b      	ldr	r3, [r7, #4]
 8043b6a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8043b6e:	461a      	mov	r2, r3
 8043b70:	2354      	movs	r3, #84	; 0x54
 8043b72:	fb03 f302 	mul.w	r3, r3, r2
 8043b76:	4a04      	ldr	r2, [pc, #16]	; (8043b88 <chbsp_i2c_reset+0x28>)
 8043b78:	4413      	add	r3, r2
 8043b7a:	4618      	mov	r0, r3
 8043b7c:	f00d fdb6 	bl	80516ec <HAL_I2C_Init>
}
 8043b80:	bf00      	nop
 8043b82:	3708      	adds	r7, #8
 8043b84:	46bd      	mov	sp, r7
 8043b86:	bd80      	pop	{r7, pc}
 8043b88:	2001bd88 	.word	0x2001bd88

08043b8c <chbsp_periodic_timer_init>:
 * This function should set up a timer with a resolution of 20us.
 * This will be used to set the interval between pulses on the base station
 */
uint8_t chbsp_periodic_timer_init(uint16_t interval_ms,
                                  ch_timer_callback_t callback_func_ptr)
{
 8043b8c:	b580      	push	{r7, lr}
 8043b8e:	b082      	sub	sp, #8
 8043b90:	af00      	add	r7, sp, #0
 8043b92:	4603      	mov	r3, r0
 8043b94:	6039      	str	r1, [r7, #0]
 8043b96:	80fb      	strh	r3, [r7, #6]

  periodic_timer_callback_ptr = callback_func_ptr;
 8043b98:	4a0b      	ldr	r2, [pc, #44]	; (8043bc8 <chbsp_periodic_timer_init+0x3c>)
 8043b9a:	683b      	ldr	r3, [r7, #0]
 8043b9c:	6013      	str	r3, [r2, #0]
  periodic_timer_interval_ms = interval_ms;
 8043b9e:	4a0b      	ldr	r2, [pc, #44]	; (8043bcc <chbsp_periodic_timer_init+0x40>)
 8043ba0:	88fb      	ldrh	r3, [r7, #6]
 8043ba2:	8013      	strh	r3, [r2, #0]

  /*
   * Set timer up with resolution of 320ns
   *
   */
  if (chirp_init_parms != NULL) {
 8043ba4:	4b0a      	ldr	r3, [pc, #40]	; (8043bd0 <chbsp_periodic_timer_init+0x44>)
 8043ba6:	681b      	ldr	r3, [r3, #0]
 8043ba8:	2b00      	cmp	r3, #0
 8043baa:	d006      	beq.n	8043bba <chbsp_periodic_timer_init+0x2e>
    tim3 = &chirp_init_parms->OperateTimerHandle;
 8043bac:	4b08      	ldr	r3, [pc, #32]	; (8043bd0 <chbsp_periodic_timer_init+0x44>)
 8043bae:	681b      	ldr	r3, [r3, #0]
 8043bb0:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8043bb4:	4a07      	ldr	r2, [pc, #28]	; (8043bd4 <chbsp_periodic_timer_init+0x48>)
 8043bb6:	6013      	str	r3, [r2, #0]
 8043bb8:	e001      	b.n	8043bbe <chbsp_periodic_timer_init+0x32>
  } else {
    Error_Handler();
 8043bba:	f005 ffad 	bl	8049b18 <Error_Handler>
  }

  return 0;
 8043bbe:	2300      	movs	r3, #0
}
 8043bc0:	4618      	mov	r0, r3
 8043bc2:	3708      	adds	r7, #8
 8043bc4:	46bd      	mov	sp, r7
 8043bc6:	bd80      	pop	{r7, pc}
 8043bc8:	20007f7c 	.word	0x20007f7c
 8043bcc:	20007f80 	.word	0x20007f80
 8043bd0:	20007f84 	.word	0x20007f84
 8043bd4:	2001bce8 	.word	0x2001bce8

08043bd8 <chbsp_periodic_timer_handler>:

/*
 * This function is called by the timer interrupt to indicate that the periodic timer has expired.
 */
void chbsp_periodic_timer_handler(void)
{
 8043bd8:	b580      	push	{r7, lr}
 8043bda:	b082      	sub	sp, #8
 8043bdc:	af00      	add	r7, sp, #0
  ch_timer_callback_t func_ptr = periodic_timer_callback_ptr;
 8043bde:	4b06      	ldr	r3, [pc, #24]	; (8043bf8 <chbsp_periodic_timer_handler+0x20>)
 8043be0:	681b      	ldr	r3, [r3, #0]
 8043be2:	607b      	str	r3, [r7, #4]
  //printf("chbsp_periodic_timer_handler: %p\r\n", func_ptr);
  if (func_ptr != NULL) {
 8043be4:	687b      	ldr	r3, [r7, #4]
 8043be6:	2b00      	cmp	r3, #0
 8043be8:	d001      	beq.n	8043bee <chbsp_periodic_timer_handler+0x16>
    //printf("chbsp_periodic_timer_handler\r\n");
    (*func_ptr) ();             // call application timer callback routine
 8043bea:	687b      	ldr	r3, [r7, #4]
 8043bec:	4798      	blx	r3
  }
}
 8043bee:	bf00      	nop
 8043bf0:	3708      	adds	r7, #8
 8043bf2:	46bd      	mov	sp, r7
 8043bf4:	bd80      	pop	{r7, pc}
 8043bf6:	bf00      	nop
 8043bf8:	20007f7c 	.word	0x20007f7c

08043bfc <chbsp_i2c_get_info>:
 *
 * Note: grp_ptr is not used by this implementation - all I2C addresses are from same set
 */
uint8_t chbsp_i2c_get_info(ch_group_t * grp_ptr, uint8_t io_index,
                           ch_i2c_info_t * info_ptr)
{
 8043bfc:	b480      	push	{r7}
 8043bfe:	b087      	sub	sp, #28
 8043c00:	af00      	add	r7, sp, #0
 8043c02:	60f8      	str	r0, [r7, #12]
 8043c04:	460b      	mov	r3, r1
 8043c06:	607a      	str	r2, [r7, #4]
 8043c08:	72fb      	strb	r3, [r7, #11]
  uint8_t ret_val = 1;
 8043c0a:	2301      	movs	r3, #1
 8043c0c:	75fb      	strb	r3, [r7, #23]

  if (io_index < CHBSP_MAX_DEVICES) {
 8043c0e:	7afb      	ldrb	r3, [r7, #11]
 8043c10:	2b00      	cmp	r3, #0
 8043c12:	d10e      	bne.n	8043c32 <chbsp_i2c_get_info+0x36>
    info_ptr->address = chirp_i2c_addrs[io_index];
 8043c14:	7afb      	ldrb	r3, [r7, #11]
 8043c16:	4a0a      	ldr	r2, [pc, #40]	; (8043c40 <chbsp_i2c_get_info+0x44>)
 8043c18:	5cd2      	ldrb	r2, [r2, r3]
 8043c1a:	687b      	ldr	r3, [r7, #4]
 8043c1c:	701a      	strb	r2, [r3, #0]
    info_ptr->bus_num = chirp_i2c_buses[io_index];
 8043c1e:	7afb      	ldrb	r3, [r7, #11]
 8043c20:	4a08      	ldr	r2, [pc, #32]	; (8043c44 <chbsp_i2c_get_info+0x48>)
 8043c22:	5cd2      	ldrb	r2, [r2, r3]
 8043c24:	687b      	ldr	r3, [r7, #4]
 8043c26:	705a      	strb	r2, [r3, #1]

    info_ptr->drv_flags = I2C_DRV_FLAGS;        // i2c driver special handling flags, from board header file
 8043c28:	687b      	ldr	r3, [r7, #4]
 8043c2a:	2203      	movs	r2, #3
 8043c2c:	805a      	strh	r2, [r3, #2]

    ret_val = 0;
 8043c2e:	2300      	movs	r3, #0
 8043c30:	75fb      	strb	r3, [r7, #23]
  }

  return ret_val;
 8043c32:	7dfb      	ldrb	r3, [r7, #23]
}
 8043c34:	4618      	mov	r0, r3
 8043c36:	371c      	adds	r7, #28
 8043c38:	46bd      	mov	sp, r7
 8043c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043c3e:	4770      	bx	lr
 8043c40:	20007010 	.word	0x20007010
 8043c44:	20007f78 	.word	0x20007f78

08043c48 <periodic_timer_callback>:
 * This callback function is registered by the call to chbsp_periodic_timer_init() 
 * in main().
 */

static void periodic_timer_callback(void)
{
 8043c48:	b580      	push	{r7, lr}
 8043c4a:	af00      	add	r7, sp, #0
  //printf("periodic_timer_callback\r\n");
  ch_group_trigger(&chirp_group);
 8043c4c:	4802      	ldr	r0, [pc, #8]	; (8043c58 <periodic_timer_callback+0x10>)
 8043c4e:	f015 fc8f 	bl	8059570 <ch_group_trigger>
}
 8043c52:	bf00      	nop
 8043c54:	bd80      	pop	{r7, pc}
 8043c56:	bf00      	nop
 8043c58:	2001b574 	.word	0x2001b574

08043c5c <sensor_int_callback>:
 *
 * This callback function is registered by the call to ch_io_int_callback_set() 
 * in main().
 */
static void sensor_int_callback(ch_group_t * grp_ptr, uint8_t dev_num)
{
 8043c5c:	b580      	push	{r7, lr}
 8043c5e:	b084      	sub	sp, #16
 8043c60:	af00      	add	r7, sp, #0
 8043c62:	6078      	str	r0, [r7, #4]
 8043c64:	460b      	mov	r3, r1
 8043c66:	70fb      	strb	r3, [r7, #3]
  ch_dev_t *dev_ptr = ch_get_dev_ptr(grp_ptr, dev_num);
 8043c68:	78fb      	ldrb	r3, [r7, #3]
 8043c6a:	4619      	mov	r1, r3
 8043c6c:	6878      	ldr	r0, [r7, #4]
 8043c6e:	f015 fcaf 	bl	80595d0 <ch_get_dev_ptr>
 8043c72:	60f8      	str	r0, [r7, #12]

  data_ready_devices |= (1 << dev_num); // add to data-ready bit mask
 8043c74:	78fb      	ldrb	r3, [r7, #3]
 8043c76:	2201      	movs	r2, #1
 8043c78:	fa02 f303 	lsl.w	r3, r2, r3
 8043c7c:	461a      	mov	r2, r3
 8043c7e:	4b10      	ldr	r3, [pc, #64]	; (8043cc0 <sensor_int_callback+0x64>)
 8043c80:	681b      	ldr	r3, [r3, #0]
 8043c82:	4313      	orrs	r3, r2
 8043c84:	4a0e      	ldr	r2, [pc, #56]	; (8043cc0 <sensor_int_callback+0x64>)
 8043c86:	6013      	str	r3, [r2, #0]

  if (data_ready_devices == active_devices) {
 8043c88:	4b0d      	ldr	r3, [pc, #52]	; (8043cc0 <sensor_int_callback+0x64>)
 8043c8a:	681a      	ldr	r2, [r3, #0]
 8043c8c:	4b0d      	ldr	r3, [pc, #52]	; (8043cc4 <sensor_int_callback+0x68>)
 8043c8e:	681b      	ldr	r3, [r3, #0]
 8043c90:	429a      	cmp	r2, r3
 8043c92:	d111      	bne.n	8043cb8 <sensor_int_callback+0x5c>
    /* All active sensors have interrupted after performing a measurement */
    data_ready_devices = 0;
 8043c94:	4b0a      	ldr	r3, [pc, #40]	; (8043cc0 <sensor_int_callback+0x64>)
 8043c96:	2200      	movs	r2, #0
 8043c98:	601a      	str	r2, [r3, #0]

    /* Set data-ready flag - it will be checked in main() loop */
    taskflags |= DATA_READY_FLAG;
 8043c9a:	4b0b      	ldr	r3, [pc, #44]	; (8043cc8 <sensor_int_callback+0x6c>)
 8043c9c:	681b      	ldr	r3, [r3, #0]
 8043c9e:	f043 0301 	orr.w	r3, r3, #1
 8043ca2:	4a09      	ldr	r2, [pc, #36]	; (8043cc8 <sensor_int_callback+0x6c>)
 8043ca4:	6013      	str	r3, [r2, #0]

    /* Disable interrupt unless in free-running mode
     *   It will automatically be re-enabled during the next trigger 
     */
    if (ch_get_mode(dev_ptr) != CH_MODE_FREERUN) {
 8043ca6:	68f8      	ldr	r0, [r7, #12]
 8043ca8:	f015 fcc9 	bl	805963e <ch_get_mode>
 8043cac:	4603      	mov	r3, r0
 8043cae:	2b02      	cmp	r3, #2
 8043cb0:	d002      	beq.n	8043cb8 <sensor_int_callback+0x5c>
      chbsp_group_io_interrupt_disable(grp_ptr);
 8043cb2:	6878      	ldr	r0, [r7, #4]
 8043cb4:	f7ff fd9a 	bl	80437ec <chbsp_group_io_interrupt_disable>
    }
  }
}
 8043cb8:	bf00      	nop
 8043cba:	3710      	adds	r7, #16
 8043cbc:	46bd      	mov	sp, r7
 8043cbe:	bd80      	pop	{r7, pc}
 8043cc0:	20007f90 	.word	0x20007f90
 8043cc4:	20007f8c 	.word	0x20007f8c
 8043cc8:	20007f88 	.word	0x20007f88

08043ccc <display_config_info>:
 *
 * For CH201 sensors only, the multiple detection threshold values are also 
 * displayed.
 */
static uint8_t display_config_info(ch_dev_t * dev_ptr)
{
 8043ccc:	b580      	push	{r7, lr}
 8043cce:	b090      	sub	sp, #64	; 0x40
 8043cd0:	af00      	add	r7, sp, #0
 8043cd2:	6078      	str	r0, [r7, #4]
  ch_config_t read_config;
  uint8_t chirp_error;
  uint8_t dev_num = ch_get_dev_num(dev_ptr);
 8043cd4:	6878      	ldr	r0, [r7, #4]
 8043cd6:	f015 fc6e 	bl	80595b6 <ch_get_dev_num>
 8043cda:	4603      	mov	r3, r0
 8043cdc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Read configuration values for the device into ch_config_t structure */
  chirp_error = ch_get_config(dev_ptr, &read_config);
 8043ce0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8043ce4:	4619      	mov	r1, r3
 8043ce6:	6878      	ldr	r0, [r7, #4]
 8043ce8:	f015 fbbc 	bl	8059464 <ch_get_config>
 8043cec:	4603      	mov	r3, r0
 8043cee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (!chirp_error) {
 8043cf2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8043cf6:	2b00      	cmp	r3, #0
 8043cf8:	d169      	bne.n	8043dce <display_config_info+0x102>
    char *mode_string;

    switch (read_config.mode) {
 8043cfa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8043cfe:	2b20      	cmp	r3, #32
 8043d00:	d013      	beq.n	8043d2a <display_config_info+0x5e>
 8043d02:	2b20      	cmp	r3, #32
 8043d04:	dc14      	bgt.n	8043d30 <display_config_info+0x64>
 8043d06:	2b10      	cmp	r3, #16
 8043d08:	d00c      	beq.n	8043d24 <display_config_info+0x58>
 8043d0a:	2b10      	cmp	r3, #16
 8043d0c:	dc10      	bgt.n	8043d30 <display_config_info+0x64>
 8043d0e:	2b00      	cmp	r3, #0
 8043d10:	d002      	beq.n	8043d18 <display_config_info+0x4c>
 8043d12:	2b02      	cmp	r3, #2
 8043d14:	d003      	beq.n	8043d1e <display_config_info+0x52>
 8043d16:	e00b      	b.n	8043d30 <display_config_info+0x64>
    case CH_MODE_IDLE:
      mode_string = "IDLE";
 8043d18:	4b33      	ldr	r3, [pc, #204]	; (8043de8 <display_config_info+0x11c>)
 8043d1a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8043d1c:	e00a      	b.n	8043d34 <display_config_info+0x68>
    case CH_MODE_FREERUN:
      mode_string = "FREERUN";
 8043d1e:	4b33      	ldr	r3, [pc, #204]	; (8043dec <display_config_info+0x120>)
 8043d20:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8043d22:	e007      	b.n	8043d34 <display_config_info+0x68>
    case CH_MODE_TRIGGERED_TX_RX:
      mode_string = "TRIGGERED_TX_RX";
 8043d24:	4b32      	ldr	r3, [pc, #200]	; (8043df0 <display_config_info+0x124>)
 8043d26:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8043d28:	e004      	b.n	8043d34 <display_config_info+0x68>
    case CH_MODE_TRIGGERED_RX_ONLY:
      mode_string = "TRIGGERED_RX_ONLY";
 8043d2a:	4b32      	ldr	r3, [pc, #200]	; (8043df4 <display_config_info+0x128>)
 8043d2c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8043d2e:	e001      	b.n	8043d34 <display_config_info+0x68>
    default:
      mode_string = "UNKNOWN";
 8043d30:	4b31      	ldr	r3, [pc, #196]	; (8043df8 <display_config_info+0x12c>)
 8043d32:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Display sensor number, mode and max range */
    printf("Sensor %d:\tmax_range=%dmm \tmode=%s  \r\n", dev_num,
 8043d34:	f897 1033 	ldrb.w	r1, [r7, #51]	; 0x33
           read_config.max_range, mode_string);
 8043d38:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    printf("Sensor %d:\tmax_range=%dmm \tmode=%s  \r\n", dev_num,
 8043d3a:	461a      	mov	r2, r3
 8043d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8043d3e:	482f      	ldr	r0, [pc, #188]	; (8043dfc <display_config_info+0x130>)
 8043d40:	f01c fe18 	bl	8060974 <iprintf>

    /* Display static target rejection range, if used */
    if (read_config.static_range != 0) {
 8043d44:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8043d46:	2b00      	cmp	r3, #0
 8043d48:	d004      	beq.n	8043d54 <display_config_info+0x88>
      printf("static_range=%d samples \r\n", read_config.static_range);
 8043d4a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8043d4c:	4619      	mov	r1, r3
 8043d4e:	482c      	ldr	r0, [pc, #176]	; (8043e00 <display_config_info+0x134>)
 8043d50:	f01c fe10 	bl	8060974 <iprintf>
    }

    /* Display detection thresholds (only supported on CH201) */
    if (ch_get_part_number(dev_ptr) == CH201_PART_NUMBER) {
 8043d54:	6878      	ldr	r0, [r7, #4]
 8043d56:	f015 fc22 	bl	805959e <ch_get_part_number>
 8043d5a:	4603      	mov	r3, r0
 8043d5c:	2bc9      	cmp	r3, #201	; 0xc9
 8043d5e:	d132      	bne.n	8043dc6 <display_config_info+0xfa>
      ch_thresholds_t read_thresholds;

      /* Get threshold values in structure */
      chirp_error = ch_get_thresholds(dev_ptr, &read_thresholds);
 8043d60:	f107 030c 	add.w	r3, r7, #12
 8043d64:	4619      	mov	r1, r3
 8043d66:	6878      	ldr	r0, [r7, #4]
 8043d68:	f015 fda5 	bl	80598b6 <ch_get_thresholds>
 8043d6c:	4603      	mov	r3, r0
 8043d6e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

      if (!chirp_error) {
 8043d72:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8043d76:	2b00      	cmp	r3, #0
 8043d78:	d11f      	bne.n	8043dba <display_config_info+0xee>
        printf("\r\n  Detection thresholds:\r\n");
 8043d7a:	4822      	ldr	r0, [pc, #136]	; (8043e04 <display_config_info+0x138>)
 8043d7c:	f01c fe96 	bl	8060aac <puts>
        for (int i = 0; i < CH_NUM_THRESHOLDS; i++) {
 8043d80:	2300      	movs	r3, #0
 8043d82:	637b      	str	r3, [r7, #52]	; 0x34
 8043d84:	e015      	b.n	8043db2 <display_config_info+0xe6>
          printf("     %d\tstart: %2d\tlevel: %d\r\n", i,
                 read_thresholds.threshold[i].start_sample,
 8043d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8043d88:	009b      	lsls	r3, r3, #2
 8043d8a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8043d8e:	4413      	add	r3, r2
 8043d90:	f833 3c34 	ldrh.w	r3, [r3, #-52]
          printf("     %d\tstart: %2d\tlevel: %d\r\n", i,
 8043d94:	461a      	mov	r2, r3
                 read_thresholds.threshold[i].level);
 8043d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8043d98:	009b      	lsls	r3, r3, #2
 8043d9a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8043d9e:	440b      	add	r3, r1
 8043da0:	f833 3c32 	ldrh.w	r3, [r3, #-50]
          printf("     %d\tstart: %2d\tlevel: %d\r\n", i,
 8043da4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8043da6:	4818      	ldr	r0, [pc, #96]	; (8043e08 <display_config_info+0x13c>)
 8043da8:	f01c fde4 	bl	8060974 <iprintf>
        for (int i = 0; i < CH_NUM_THRESHOLDS; i++) {
 8043dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8043dae:	3301      	adds	r3, #1
 8043db0:	637b      	str	r3, [r7, #52]	; 0x34
 8043db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8043db4:	2b05      	cmp	r3, #5
 8043db6:	dde6      	ble.n	8043d86 <display_config_info+0xba>
 8043db8:	e005      	b.n	8043dc6 <display_config_info+0xfa>
        }
      } else {
        printf(" Device %d: Error during ch_get_thresholds()\r\n", dev_num);
 8043dba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8043dbe:	4619      	mov	r1, r3
 8043dc0:	4812      	ldr	r0, [pc, #72]	; (8043e0c <display_config_info+0x140>)
 8043dc2:	f01c fdd7 	bl	8060974 <iprintf>
      }
    }
    printf("\n");
 8043dc6:	200a      	movs	r0, #10
 8043dc8:	f01c fdec 	bl	80609a4 <putchar>
 8043dcc:	e005      	b.n	8043dda <display_config_info+0x10e>

  } else {
    printf(" Device %d: Error during ch_get_config()\r\n", dev_num);
 8043dce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8043dd2:	4619      	mov	r1, r3
 8043dd4:	480e      	ldr	r0, [pc, #56]	; (8043e10 <display_config_info+0x144>)
 8043dd6:	f01c fdcd 	bl	8060974 <iprintf>
  }

  return chirp_error;
 8043dda:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8043dde:	4618      	mov	r0, r3
 8043de0:	3740      	adds	r7, #64	; 0x40
 8043de2:	46bd      	mov	sp, r7
 8043de4:	bd80      	pop	{r7, pc}
 8043de6:	bf00      	nop
 8043de8:	08065254 	.word	0x08065254
 8043dec:	0806525c 	.word	0x0806525c
 8043df0:	08065264 	.word	0x08065264
 8043df4:	08065274 	.word	0x08065274
 8043df8:	08065288 	.word	0x08065288
 8043dfc:	08065290 	.word	0x08065290
 8043e00:	080652b8 	.word	0x080652b8
 8043e04:	080652d4 	.word	0x080652d4
 8043e08:	080652f0 	.word	0x080652f0
 8043e0c:	08065310 	.word	0x08065310
 8043e10:	08065340 	.word	0x08065340

08043e14 <handle_data_ready>:
 * If a non-blocking I/Q is read is initiated, a callback routine will be called
 * when the operation is complete.  The callback routine must have been 
 * registered using the ch_io_complete_callback_set function.
 */
static uint8_t handle_data_ready(ch_group_t * grp_ptr)
{
 8043e14:	b5b0      	push	{r4, r5, r7, lr}
 8043e16:	b09e      	sub	sp, #120	; 0x78
 8043e18:	af02      	add	r7, sp, #8
 8043e1a:	6078      	str	r0, [r7, #4]
  uint8_t dev_num;
  int error;
  int num_samples = 0;
 8043e1c:	2300      	movs	r3, #0
 8043e1e:	66bb      	str	r3, [r7, #104]	; 0x68
  uint16_t start_sample = 0;
 8043e20:	2300      	movs	r3, #0
 8043e22:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
  uint8_t iq_data_addr;
  uint8_t ret_val = 0;
 8043e26:	2300      	movs	r3, #0
 8043e28:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  sensors_event_t sensor_data = { 0 };
 8043e2c:	f107 0308 	add.w	r3, r7, #8
 8043e30:	2250      	movs	r2, #80	; 0x50
 8043e32:	2100      	movs	r1, #0
 8043e34:	4618      	mov	r0, r3
 8043e36:	f01c f8c1 	bl	805ffbc <memset>
   *   This loop will write the sensor data to this application's "chirp_data"
   *   array.  Each sensor has a separate chirp_data_t structure in that 
   *   array, so the device number is used as an index.
   */

  for (dev_num = 0; dev_num < ch_get_num_ports(grp_ptr); dev_num++) {
 8043e3a:	2300      	movs	r3, #0
 8043e3c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8043e40:	e12b      	b.n	804409a <handle_data_ready+0x286>
    ch_dev_t *dev_ptr = ch_get_dev_ptr(grp_ptr, dev_num);
 8043e42:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8043e46:	4619      	mov	r1, r3
 8043e48:	6878      	ldr	r0, [r7, #4]
 8043e4a:	f015 fbc1 	bl	80595d0 <ch_get_dev_ptr>
 8043e4e:	6638      	str	r0, [r7, #96]	; 0x60

    if (ch_sensor_is_connected(dev_ptr)) {
 8043e50:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8043e52:	f015 fb98 	bl	8059586 <ch_sensor_is_connected>
 8043e56:	4603      	mov	r3, r0
 8043e58:	2b00      	cmp	r3, #0
 8043e5a:	f000 8119 	beq.w	8044090 <handle_data_ready+0x27c>
       *   For sensor in transmit/receive mode, report one-way echo 
       *   distance,  For sensor(s) in receive-only mode, report direct 
       *   one-way distance from transmitting sensor 
       */

      if (ch_get_mode(dev_ptr) == CH_MODE_TRIGGERED_RX_ONLY) {
 8043e5e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8043e60:	f015 fbed 	bl	805963e <ch_get_mode>
 8043e64:	4603      	mov	r3, r0
 8043e66:	2b20      	cmp	r3, #32
 8043e68:	d10e      	bne.n	8043e88 <handle_data_ready+0x74>
        chirp_data[dev_num].range = ch_get_range(dev_ptr, CH_RANGE_DIRECT);
 8043e6a:	f897 406f 	ldrb.w	r4, [r7, #111]	; 0x6f
 8043e6e:	2102      	movs	r1, #2
 8043e70:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8043e72:	f015 fc6c 	bl	805974e <ch_get_range>
 8043e76:	4602      	mov	r2, r0
 8043e78:	4990      	ldr	r1, [pc, #576]	; (80440bc <handle_data_ready+0x2a8>)
 8043e7a:	f44f 63e2 	mov.w	r3, #1808	; 0x710
 8043e7e:	fb03 f304 	mul.w	r3, r3, r4
 8043e82:	440b      	add	r3, r1
 8043e84:	601a      	str	r2, [r3, #0]
 8043e86:	e00d      	b.n	8043ea4 <handle_data_ready+0x90>
      } else {
        chirp_data[dev_num].range = ch_get_range(dev_ptr,
 8043e88:	f897 406f 	ldrb.w	r4, [r7, #111]	; 0x6f
 8043e8c:	2100      	movs	r1, #0
 8043e8e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8043e90:	f015 fc5d 	bl	805974e <ch_get_range>
 8043e94:	4602      	mov	r2, r0
 8043e96:	4989      	ldr	r1, [pc, #548]	; (80440bc <handle_data_ready+0x2a8>)
 8043e98:	f44f 63e2 	mov.w	r3, #1808	; 0x710
 8043e9c:	fb03 f304 	mul.w	r3, r3, r4
 8043ea0:	440b      	add	r3, r1
 8043ea2:	601a      	str	r2, [r3, #0]
                                                 CH_RANGE_ECHO_ONE_WAY);
      }

      if (chirp_data[dev_num].range == CH_NO_TARGET) {
 8043ea4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8043ea8:	4a84      	ldr	r2, [pc, #528]	; (80440bc <handle_data_ready+0x2a8>)
 8043eaa:	f44f 61e2 	mov.w	r1, #1808	; 0x710
 8043eae:	fb01 f303 	mul.w	r3, r1, r3
 8043eb2:	4413      	add	r3, r2
 8043eb4:	681b      	ldr	r3, [r3, #0]
 8043eb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8043eba:	d13d      	bne.n	8043f38 <handle_data_ready+0x124>
        /* No target object was detected - no range value */

        //chirp_data[dev_num].amplitude = 0; /* no updated amplitude */
        chirp_data[dev_num].amplitude = ch_get_amplitude(dev_ptr);
 8043ebc:	f897 406f 	ldrb.w	r4, [r7, #111]	; 0x6f
 8043ec0:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8043ec2:	f015 fc5d 	bl	8059780 <ch_get_amplitude>
 8043ec6:	4603      	mov	r3, r0
 8043ec8:	4619      	mov	r1, r3
 8043eca:	4a7c      	ldr	r2, [pc, #496]	; (80440bc <handle_data_ready+0x2a8>)
 8043ecc:	f44f 63e2 	mov.w	r3, #1808	; 0x710
 8043ed0:	fb03 f304 	mul.w	r3, r3, r4
 8043ed4:	4413      	add	r3, r2
 8043ed6:	3304      	adds	r3, #4
 8043ed8:	460a      	mov	r2, r1
 8043eda:	801a      	strh	r2, [r3, #0]
        printf("Port %d:          no target found        \r\n", dev_num);
 8043edc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8043ee0:	4619      	mov	r1, r3
 8043ee2:	4877      	ldr	r0, [pc, #476]	; (80440c0 <handle_data_ready+0x2ac>)
 8043ee4:	f01c fd46 	bl	8060974 <iprintf>

        if (chirp_data[dev_num].amplitude > 3000) {
 8043ee8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8043eec:	4a73      	ldr	r2, [pc, #460]	; (80440bc <handle_data_ready+0x2a8>)
 8043eee:	f44f 61e2 	mov.w	r1, #1808	; 0x710
 8043ef2:	fb01 f303 	mul.w	r3, r1, r3
 8043ef6:	4413      	add	r3, r2
 8043ef8:	3304      	adds	r3, #4
 8043efa:	881b      	ldrh	r3, [r3, #0]
 8043efc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8043f00:	4293      	cmp	r3, r2
 8043f02:	d951      	bls.n	8043fa8 <handle_data_ready+0x194>
          printf("ch_get_amplitude: %u, cover very near occurred! \r\n",
                 chirp_data[dev_num].amplitude);
 8043f04:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8043f08:	4a6c      	ldr	r2, [pc, #432]	; (80440bc <handle_data_ready+0x2a8>)
 8043f0a:	f44f 61e2 	mov.w	r1, #1808	; 0x710
 8043f0e:	fb01 f303 	mul.w	r3, r1, r3
 8043f12:	4413      	add	r3, r2
 8043f14:	3304      	adds	r3, #4
 8043f16:	881b      	ldrh	r3, [r3, #0]
          printf("ch_get_amplitude: %u, cover very near occurred! \r\n",
 8043f18:	4619      	mov	r1, r3
 8043f1a:	486a      	ldr	r0, [pc, #424]	; (80440c4 <handle_data_ready+0x2b0>)
 8043f1c:	f01c fd2a 	bl	8060974 <iprintf>
          chirp_data[dev_num].range = 200.0f * 32.0f;
 8043f20:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8043f24:	4a65      	ldr	r2, [pc, #404]	; (80440bc <handle_data_ready+0x2a8>)
 8043f26:	f44f 61e2 	mov.w	r1, #1808	; 0x710
 8043f2a:	fb01 f303 	mul.w	r3, r1, r3
 8043f2e:	4413      	add	r3, r2
 8043f30:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8043f34:	601a      	str	r2, [r3, #0]
 8043f36:	e037      	b.n	8043fa8 <handle_data_ready+0x194>
      } else {
        /* Target object was successfully detected (range available) */

        /* Get the new amplitude value - it's only updated if range 
         * was successfully measured.  */
        chirp_data[dev_num].amplitude = ch_get_amplitude(dev_ptr);
 8043f38:	f897 406f 	ldrb.w	r4, [r7, #111]	; 0x6f
 8043f3c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8043f3e:	f015 fc1f 	bl	8059780 <ch_get_amplitude>
 8043f42:	4603      	mov	r3, r0
 8043f44:	4619      	mov	r1, r3
 8043f46:	4a5d      	ldr	r2, [pc, #372]	; (80440bc <handle_data_ready+0x2a8>)
 8043f48:	f44f 63e2 	mov.w	r3, #1808	; 0x710
 8043f4c:	fb03 f304 	mul.w	r3, r3, r4
 8043f50:	4413      	add	r3, r2
 8043f52:	3304      	adds	r3, #4
 8043f54:	460a      	mov	r2, r1
 8043f56:	801a      	strh	r2, [r3, #0]

        printf("Port %d:  Range: %0.1f mm  Amplitude: %u  \r\n",
 8043f58:	f897 406f 	ldrb.w	r4, [r7, #111]	; 0x6f
               dev_num, (float)chirp_data[dev_num].range / 32.0f,
 8043f5c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8043f60:	4a56      	ldr	r2, [pc, #344]	; (80440bc <handle_data_ready+0x2a8>)
 8043f62:	f44f 61e2 	mov.w	r1, #1808	; 0x710
 8043f66:	fb01 f303 	mul.w	r3, r1, r3
 8043f6a:	4413      	add	r3, r2
 8043f6c:	681b      	ldr	r3, [r3, #0]
 8043f6e:	ee07 3a90 	vmov	s15, r3
 8043f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043f76:	ed9f 7a54 	vldr	s14, [pc, #336]	; 80440c8 <handle_data_ready+0x2b4>
 8043f7a:	eec7 6a87 	vdiv.f32	s13, s15, s14
        printf("Port %d:  Range: %0.1f mm  Amplitude: %u  \r\n",
 8043f7e:	ee16 0a90 	vmov	r0, s13
 8043f82:	f7fc fae1 	bl	8040548 <__aeabi_f2d>
 8043f86:	4602      	mov	r2, r0
 8043f88:	460b      	mov	r3, r1
               chirp_data[dev_num].amplitude);
 8043f8a:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
 8043f8e:	484b      	ldr	r0, [pc, #300]	; (80440bc <handle_data_ready+0x2a8>)
 8043f90:	f44f 65e2 	mov.w	r5, #1808	; 0x710
 8043f94:	fb05 f101 	mul.w	r1, r5, r1
 8043f98:	4401      	add	r1, r0
 8043f9a:	3104      	adds	r1, #4
 8043f9c:	8809      	ldrh	r1, [r1, #0]
        printf("Port %d:  Range: %0.1f mm  Amplitude: %u  \r\n",
 8043f9e:	9100      	str	r1, [sp, #0]
 8043fa0:	4621      	mov	r1, r4
 8043fa2:	484a      	ldr	r0, [pc, #296]	; (80440cc <handle_data_ready+0x2b8>)
 8043fa4:	f01c fce6 	bl	8060974 <iprintf>
      }

      /* Get number of active samples in this measurement */
      num_samples = ch_get_num_samples(dev_ptr);
 8043fa8:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8043faa:	f015 fb90 	bl	80596ce <ch_get_num_samples>
 8043fae:	4603      	mov	r3, r0
 8043fb0:	66bb      	str	r3, [r7, #104]	; 0x68
      chirp_data[dev_num].num_samples = num_samples;
 8043fb2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8043fb6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8043fb8:	b290      	uxth	r0, r2
 8043fba:	4a40      	ldr	r2, [pc, #256]	; (80440bc <handle_data_ready+0x2a8>)
 8043fbc:	f44f 61e2 	mov.w	r1, #1808	; 0x710
 8043fc0:	fb01 f303 	mul.w	r3, r1, r3
 8043fc4:	4413      	add	r3, r2
 8043fc6:	3306      	adds	r3, #6
 8043fc8:	4602      	mov	r2, r0
 8043fca:	801a      	strh	r2, [r3, #0]

      /* Read full IQ data from device into buffer or queue read 
       * request, based on build-time options  */

      /* Reading I/Q data in normal, blocking mode */
      error = ch_get_iq_data(dev_ptr, chirp_data[dev_num].iq_data,
 8043fcc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8043fd0:	f44f 62e2 	mov.w	r2, #1808	; 0x710
 8043fd4:	fb02 f303 	mul.w	r3, r2, r3
 8043fd8:	3308      	adds	r3, #8
 8043fda:	4a38      	ldr	r2, [pc, #224]	; (80440bc <handle_data_ready+0x2a8>)
 8043fdc:	1899      	adds	r1, r3, r2
 8043fde:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8043fe0:	b29b      	uxth	r3, r3
 8043fe2:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8043fe6:	2000      	movs	r0, #0
 8043fe8:	9000      	str	r0, [sp, #0]
 8043fea:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8043fec:	f015 fc04 	bl	80597f8 <ch_get_iq_data>
 8043ff0:	4603      	mov	r3, r0
 8043ff2:	65fb      	str	r3, [r7, #92]	; 0x5c
                             start_sample, num_samples, CH_IO_MODE_BLOCK);

      if (!error) {
 8043ff4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8043ff6:	2b00      	cmp	r3, #0
 8043ff8:	d104      	bne.n	8044004 <handle_data_ready+0x1f0>
        printf("     %d IQ samples copied \r\n", num_samples);
 8043ffa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8043ffc:	4834      	ldr	r0, [pc, #208]	; (80440d0 <handle_data_ready+0x2bc>)
 8043ffe:	f01c fcb9 	bl	8060974 <iprintf>
 8044002:	e003      	b.n	804400c <handle_data_ready+0x1f8>
      } else {
        printf("     Error reading %d IQ samples \r\n", num_samples);
 8044004:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8044006:	4833      	ldr	r0, [pc, #204]	; (80440d4 <handle_data_ready+0x2c0>)
 8044008:	f01c fcb4 	bl	8060974 <iprintf>
      }

      //send related messages to SensorDataQ
      if (uitralsonic_proximity_enabled) {
 804400c:	4b32      	ldr	r3, [pc, #200]	; (80440d8 <handle_data_ready+0x2c4>)
 804400e:	781b      	ldrb	r3, [r3, #0]
 8044010:	2b00      	cmp	r3, #0
 8044012:	d03d      	beq.n	8044090 <handle_data_ready+0x27c>
        sensor_data.sensor_type = SENSOR_TYPE_PROXIMITY_HEAD;
 8044014:	2305      	movs	r3, #5
 8044016:	723b      	strb	r3, [r7, #8]
        if (chirp_init_parms->boardID == REAR_BOARD) {
 8044018:	4b30      	ldr	r3, [pc, #192]	; (80440dc <handle_data_ready+0x2c8>)
 804401a:	681b      	ldr	r3, [r3, #0]
 804401c:	781b      	ldrb	r3, [r3, #0]
 804401e:	2b00      	cmp	r3, #0
 8044020:	d101      	bne.n	8044026 <handle_data_ready+0x212>
          sensor_data.sensor_type = SENSOR_TYPE_PROXIMITY_REAR;
 8044022:	2307      	movs	r3, #7
 8044024:	723b      	strb	r3, [r7, #8]
        }
        sensor_data.accuracy = 3;
 8044026:	2303      	movs	r3, #3
 8044028:	727b      	strb	r3, [r7, #9]
        sensor_data.timestamp = sensor_get_timestamp();
 804402a:	f009 fb6d 	bl	804d708 <sensor_get_timestamp>
 804402e:	4602      	mov	r2, r0
 8044030:	460b      	mov	r3, r1
 8044032:	e9c7 2304 	strd	r2, r3, [r7, #16]
        sensor_data.sensor_data_t.vec.data[0] =
            (float)chirp_data[dev_num].range / 32.0f;
 8044036:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 804403a:	4a20      	ldr	r2, [pc, #128]	; (80440bc <handle_data_ready+0x2a8>)
 804403c:	f44f 61e2 	mov.w	r1, #1808	; 0x710
 8044040:	fb01 f303 	mul.w	r3, r1, r3
 8044044:	4413      	add	r3, r2
 8044046:	681b      	ldr	r3, [r3, #0]
 8044048:	ee07 3a90 	vmov	s15, r3
 804404c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8044050:	eddf 6a1d 	vldr	s13, [pc, #116]	; 80440c8 <handle_data_ready+0x2b4>
 8044054:	eec7 7a26 	vdiv.f32	s15, s14, s13
        sensor_data.sensor_data_t.vec.data[0] =
 8044058:	edc7 7a06 	vstr	s15, [r7, #24]
        sensor_data.sensor_data_t.vec.data[1] =
            (float)chirp_data[dev_num].amplitude;
 804405c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8044060:	4a16      	ldr	r2, [pc, #88]	; (80440bc <handle_data_ready+0x2a8>)
 8044062:	f44f 61e2 	mov.w	r1, #1808	; 0x710
 8044066:	fb01 f303 	mul.w	r3, r1, r3
 804406a:	4413      	add	r3, r2
 804406c:	3304      	adds	r3, #4
 804406e:	881b      	ldrh	r3, [r3, #0]
 8044070:	ee07 3a90 	vmov	s15, r3
 8044074:	eef8 7a67 	vcvt.f32.u32	s15, s15
        sensor_data.sensor_data_t.vec.data[1] =
 8044078:	edc7 7a07 	vstr	s15, [r7, #28]
        osMessageQueuePut(chirp_init_parms->SensorDataQHandle, &sensor_data,
 804407c:	4b17      	ldr	r3, [pc, #92]	; (80440dc <handle_data_ready+0x2c8>)
 804407e:	681b      	ldr	r3, [r3, #0]
 8044080:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 8044084:	f107 0108 	add.w	r1, r7, #8
 8044088:	2300      	movs	r3, #0
 804408a:	2200      	movs	r2, #0
 804408c:	f012 f9ba 	bl	8056404 <osMessageQueuePut>
  for (dev_num = 0; dev_num < ch_get_num_ports(grp_ptr); dev_num++) {
 8044090:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8044094:	3301      	adds	r3, #1
 8044096:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 804409a:	6878      	ldr	r0, [r7, #4]
 804409c:	f015 fab7 	bl	805960e <ch_get_num_ports>
 80440a0:	4603      	mov	r3, r0
 80440a2:	461a      	mov	r2, r3
 80440a4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80440a8:	4293      	cmp	r3, r2
 80440aa:	f4ff aeca 	bcc.w	8043e42 <handle_data_ready+0x2e>
                          0, 0);
      }
    }
  }

  return ret_val;
 80440ae:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
}
 80440b2:	4618      	mov	r0, r3
 80440b4:	3770      	adds	r7, #112	; 0x70
 80440b6:	46bd      	mov	sp, r7
 80440b8:	bdb0      	pop	{r4, r5, r7, pc}
 80440ba:	bf00      	nop
 80440bc:	2001b5d8 	.word	0x2001b5d8
 80440c0:	0806536c 	.word	0x0806536c
 80440c4:	08065398 	.word	0x08065398
 80440c8:	42000000 	.word	0x42000000
 80440cc:	080653cc 	.word	0x080653cc
 80440d0:	080653fc 	.word	0x080653fc
 80440d4:	0806541c 	.word	0x0806541c
 80440d8:	20007f79 	.word	0x20007f79
 80440dc:	20007f84 	.word	0x20007f84

080440e0 <prox_init>:
  return 0;
}

/* ------------------------------------------ public functions starts from here ---------------------------------*/
int prox_init(void *para1, void *para2)
{
 80440e0:	b580      	push	{r7, lr}
 80440e2:	b086      	sub	sp, #24
 80440e4:	af00      	add	r7, sp, #0
 80440e6:	6078      	str	r0, [r7, #4]
 80440e8:	6039      	str	r1, [r7, #0]
  chirp_init_parms = (platform_prams *) para1;
 80440ea:	4a2e      	ldr	r2, [pc, #184]	; (80441a4 <prox_init+0xc4>)
 80440ec:	687b      	ldr	r3, [r7, #4]
 80440ee:	6013      	str	r3, [r2, #0]

  ch_group_t *grp_ptr = &chirp_group;
 80440f0:	4b2d      	ldr	r3, [pc, #180]	; (80441a8 <prox_init+0xc8>)
 80440f2:	613b      	str	r3, [r7, #16]
  uint8_t chirp_error = 0;
 80440f4:	2300      	movs	r3, #0
 80440f6:	75fb      	strb	r3, [r7, #23]
  uint8_t num_ports;
  uint8_t dev_num;

  /* if REAR BOARD, use related source */
  if (chirp_init_parms->boardID == REAR_BOARD) {
 80440f8:	4b2a      	ldr	r3, [pc, #168]	; (80441a4 <prox_init+0xc4>)
 80440fa:	681b      	ldr	r3, [r3, #0]
 80440fc:	781b      	ldrb	r3, [r3, #0]
 80440fe:	2b00      	cmp	r3, #0
 8044100:	d105      	bne.n	804410e <prox_init+0x2e>
    chirp_pin_prog[0] = PROG1_PIN;
 8044102:	4b2a      	ldr	r3, [pc, #168]	; (80441ac <prox_init+0xcc>)
 8044104:	2201      	movs	r2, #1
 8044106:	801a      	strh	r2, [r3, #0]
    chirp_port_prog[0] = PROG1_PORT;
 8044108:	4b29      	ldr	r3, [pc, #164]	; (80441b0 <prox_init+0xd0>)
 804410a:	4a2a      	ldr	r2, [pc, #168]	; (80441b4 <prox_init+0xd4>)
 804410c:	601a      	str	r2, [r3, #0]
  }

  chbsp_board_init(grp_ptr);
 804410e:	6938      	ldr	r0, [r7, #16]
 8044110:	f7ff f91e 	bl	8043350 <chbsp_board_init>

  num_ports = ch_get_num_ports(grp_ptr);
 8044114:	6938      	ldr	r0, [r7, #16]
 8044116:	f015 fa7a 	bl	805960e <ch_get_num_ports>
 804411a:	4603      	mov	r3, r0
 804411c:	73fb      	strb	r3, [r7, #15]

  for (dev_num = 0; dev_num < num_ports; dev_num++) {
 804411e:	2300      	movs	r3, #0
 8044120:	75bb      	strb	r3, [r7, #22]
 8044122:	e014      	b.n	804414e <prox_init+0x6e>
    ch_dev_t *dev_ptr = &(chirp_devices[dev_num]);      // init struct in array
 8044124:	7dbb      	ldrb	r3, [r7, #22]
 8044126:	2298      	movs	r2, #152	; 0x98
 8044128:	fb02 f303 	mul.w	r3, r2, r3
 804412c:	4a22      	ldr	r2, [pc, #136]	; (80441b8 <prox_init+0xd8>)
 804412e:	4413      	add	r3, r2
 8044130:	60bb      	str	r3, [r7, #8]
    chirp_error |= ch_init(dev_ptr, grp_ptr, dev_num,
 8044132:	7dba      	ldrb	r2, [r7, #22]
 8044134:	4b21      	ldr	r3, [pc, #132]	; (80441bc <prox_init+0xdc>)
 8044136:	6939      	ldr	r1, [r7, #16]
 8044138:	68b8      	ldr	r0, [r7, #8]
 804413a:	f015 f967 	bl	805940c <ch_init>
 804413e:	4603      	mov	r3, r0
 8044140:	461a      	mov	r2, r3
 8044142:	7dfb      	ldrb	r3, [r7, #23]
 8044144:	4313      	orrs	r3, r2
 8044146:	75fb      	strb	r3, [r7, #23]
  for (dev_num = 0; dev_num < num_ports; dev_num++) {
 8044148:	7dbb      	ldrb	r3, [r7, #22]
 804414a:	3301      	adds	r3, #1
 804414c:	75bb      	strb	r3, [r7, #22]
 804414e:	7dba      	ldrb	r2, [r7, #22]
 8044150:	7bfb      	ldrb	r3, [r7, #15]
 8044152:	429a      	cmp	r2, r3
 8044154:	d3e6      	bcc.n	8044124 <prox_init+0x44>
                           CHIRP_SENSOR_FW_INIT_FUNC);
  }

  if (chirp_error == 0) {
 8044156:	7dfb      	ldrb	r3, [r7, #23]
 8044158:	2b00      	cmp	r3, #0
 804415a:	d107      	bne.n	804416c <prox_init+0x8c>
    printf("starting group... \r\n");
 804415c:	4818      	ldr	r0, [pc, #96]	; (80441c0 <prox_init+0xe0>)
 804415e:	f01c fca5 	bl	8060aac <puts>
    chirp_error = ch_group_start(grp_ptr);
 8044162:	6938      	ldr	r0, [r7, #16]
 8044164:	f015 f9f6 	bl	8059554 <ch_group_start>
 8044168:	4603      	mov	r3, r0
 804416a:	75fb      	strb	r3, [r7, #23]
  }

  if (chirp_error == 0) {
 804416c:	7dfb      	ldrb	r3, [r7, #23]
 804416e:	2b00      	cmp	r3, #0
 8044170:	d103      	bne.n	804417a <prox_init+0x9a>
    printf("OK\r\n");
 8044172:	4814      	ldr	r0, [pc, #80]	; (80441c4 <prox_init+0xe4>)
 8044174:	f01c fc9a 	bl	8060aac <puts>
 8044178:	e004      	b.n	8044184 <prox_init+0xa4>
  } else {
    printf("FAILED: %d\r\n", chirp_error);
 804417a:	7dfb      	ldrb	r3, [r7, #23]
 804417c:	4619      	mov	r1, r3
 804417e:	4812      	ldr	r0, [pc, #72]	; (80441c8 <prox_init+0xe8>)
 8044180:	f01c fbf8 	bl	8060974 <iprintf>
  }
  printf("\r\n");
 8044184:	4811      	ldr	r0, [pc, #68]	; (80441cc <prox_init+0xec>)
 8044186:	f01c fc91 	bl	8060aac <puts>

  chbsp_periodic_timer_init(MEASUREMENT_INTERVAL_MS, periodic_timer_callback);
 804418a:	4911      	ldr	r1, [pc, #68]	; (80441d0 <prox_init+0xf0>)
 804418c:	2064      	movs	r0, #100	; 0x64
 804418e:	f7ff fcfd 	bl	8043b8c <chbsp_periodic_timer_init>

  ch_io_int_callback_set(grp_ptr, sensor_int_callback);
 8044192:	4910      	ldr	r1, [pc, #64]	; (80441d4 <prox_init+0xf4>)
 8044194:	6938      	ldr	r0, [r7, #16]
 8044196:	f015 fbab 	bl	80598f0 <ch_io_int_callback_set>

  return chirp_error;
 804419a:	7dfb      	ldrb	r3, [r7, #23]
}
 804419c:	4618      	mov	r0, r3
 804419e:	3718      	adds	r7, #24
 80441a0:	46bd      	mov	sp, r7
 80441a2:	bd80      	pop	{r7, pc}
 80441a4:	20007f84 	.word	0x20007f84
 80441a8:	2001b574 	.word	0x2001b574
 80441ac:	20007014 	.word	0x20007014
 80441b0:	20007018 	.word	0x20007018
 80441b4:	40020800 	.word	0x40020800
 80441b8:	2001bcec 	.word	0x2001bcec
 80441bc:	0805927d 	.word	0x0805927d
 80441c0:	08065464 	.word	0x08065464
 80441c4:	08065478 	.word	0x08065478
 80441c8:	0806547c 	.word	0x0806547c
 80441cc:	0806548c 	.word	0x0806548c
 80441d0:	08043c49 	.word	0x08043c49
 80441d4:	08043c5d 	.word	0x08043c5d

080441d8 <prox_init_complete>:

int prox_init_complete(void *para)
{
 80441d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80441dc:	b08a      	sub	sp, #40	; 0x28
 80441de:	af04      	add	r7, sp, #16
 80441e0:	6078      	str	r0, [r7, #4]
  ch_group_t *grp_ptr = &chirp_group;
 80441e2:	4b25      	ldr	r3, [pc, #148]	; (8044278 <prox_init_complete+0xa0>)
 80441e4:	613b      	str	r3, [r7, #16]
  uint8_t num_ports;
  uint8_t dev_num;

  num_ports = ch_get_num_ports(grp_ptr);
 80441e6:	6938      	ldr	r0, [r7, #16]
 80441e8:	f015 fa11 	bl	805960e <ch_get_num_ports>
 80441ec:	4603      	mov	r3, r0
 80441ee:	73fb      	strb	r3, [r7, #15]

  printf("Sensor\tType \t   Freq\t\t RTC Cal \tFirmware\r\n");
 80441f0:	4822      	ldr	r0, [pc, #136]	; (804427c <prox_init_complete+0xa4>)
 80441f2:	f01c fc5b 	bl	8060aac <puts>

  for (dev_num = 0; dev_num < num_ports; dev_num++) {
 80441f6:	2300      	movs	r3, #0
 80441f8:	75fb      	strb	r3, [r7, #23]
 80441fa:	e030      	b.n	804425e <prox_init_complete+0x86>
    ch_dev_t *dev_ptr = ch_get_dev_ptr(grp_ptr, dev_num);
 80441fc:	7dfb      	ldrb	r3, [r7, #23]
 80441fe:	4619      	mov	r1, r3
 8044200:	6938      	ldr	r0, [r7, #16]
 8044202:	f015 f9e5 	bl	80595d0 <ch_get_dev_ptr>
 8044206:	60b8      	str	r0, [r7, #8]

    if (ch_sensor_is_connected(dev_ptr)) {
 8044208:	68b8      	ldr	r0, [r7, #8]
 804420a:	f015 f9bc 	bl	8059586 <ch_sensor_is_connected>
 804420e:	4603      	mov	r3, r0
 8044210:	2b00      	cmp	r3, #0
 8044212:	d021      	beq.n	8044258 <prox_init_complete+0x80>

      printf("%d\tCH%d\t %u Hz\t%lu@%ums\t%s\r\n", dev_num,
 8044214:	7dfc      	ldrb	r4, [r7, #23]
             ch_get_part_number(dev_ptr), ch_get_frequency(dev_ptr),
 8044216:	68b8      	ldr	r0, [r7, #8]
 8044218:	f015 f9c1 	bl	805959e <ch_get_part_number>
 804421c:	4603      	mov	r3, r0
      printf("%d\tCH%d\t %u Hz\t%lu@%ums\t%s\r\n", dev_num,
 804421e:	4698      	mov	r8, r3
 8044220:	68b8      	ldr	r0, [r7, #8]
 8044222:	f015 fac4 	bl	80597ae <ch_get_frequency>
 8044226:	4605      	mov	r5, r0
             ch_get_rtc_cal_result(dev_ptr),
 8044228:	68b8      	ldr	r0, [r7, #8]
 804422a:	f015 fad9 	bl	80597e0 <ch_get_rtc_cal_result>
 804422e:	4603      	mov	r3, r0
      printf("%d\tCH%d\t %u Hz\t%lu@%ums\t%s\r\n", dev_num,
 8044230:	461e      	mov	r6, r3
             ch_get_rtc_cal_pulselength(dev_ptr),
 8044232:	68b8      	ldr	r0, [r7, #8]
 8044234:	f015 fac7 	bl	80597c6 <ch_get_rtc_cal_pulselength>
 8044238:	4603      	mov	r3, r0
      printf("%d\tCH%d\t %u Hz\t%lu@%ums\t%s\r\n", dev_num,
 804423a:	603b      	str	r3, [r7, #0]
 804423c:	68b8      	ldr	r0, [r7, #8]
 804423e:	f015 f9f2 	bl	8059626 <ch_get_fw_version_string>
 8044242:	4603      	mov	r3, r0
 8044244:	9302      	str	r3, [sp, #8]
 8044246:	683b      	ldr	r3, [r7, #0]
 8044248:	9301      	str	r3, [sp, #4]
 804424a:	9600      	str	r6, [sp, #0]
 804424c:	462b      	mov	r3, r5
 804424e:	4642      	mov	r2, r8
 8044250:	4621      	mov	r1, r4
 8044252:	480b      	ldr	r0, [pc, #44]	; (8044280 <prox_init_complete+0xa8>)
 8044254:	f01c fb8e 	bl	8060974 <iprintf>
  for (dev_num = 0; dev_num < num_ports; dev_num++) {
 8044258:	7dfb      	ldrb	r3, [r7, #23]
 804425a:	3301      	adds	r3, #1
 804425c:	75fb      	strb	r3, [r7, #23]
 804425e:	7dfa      	ldrb	r2, [r7, #23]
 8044260:	7bfb      	ldrb	r3, [r7, #15]
 8044262:	429a      	cmp	r2, r3
 8044264:	d3ca      	bcc.n	80441fc <prox_init_complete+0x24>
             ch_get_fw_version_string(dev_ptr));
    }
  }
  printf("\r\n");
 8044266:	4807      	ldr	r0, [pc, #28]	; (8044284 <prox_init_complete+0xac>)
 8044268:	f01c fc20 	bl	8060aac <puts>

  return 0;
 804426c:	2300      	movs	r3, #0
}
 804426e:	4618      	mov	r0, r3
 8044270:	3718      	adds	r7, #24
 8044272:	46bd      	mov	sp, r7
 8044274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8044278:	2001b574 	.word	0x2001b574
 804427c:	08065490 	.word	0x08065490
 8044280:	080654bc 	.word	0x080654bc
 8044284:	0806548c 	.word	0x0806548c

08044288 <prox_activate>:

int prox_activate(bool activate)
{
 8044288:	b580      	push	{r7, lr}
 804428a:	b08a      	sub	sp, #40	; 0x28
 804428c:	af00      	add	r7, sp, #0
 804428e:	4603      	mov	r3, r0
 8044290:	71fb      	strb	r3, [r7, #7]
  ch_group_t *grp_ptr = &chirp_group;
 8044292:	4b5a      	ldr	r3, [pc, #360]	; (80443fc <prox_activate+0x174>)
 8044294:	623b      	str	r3, [r7, #32]
  uint8_t chirp_error = 0;
 8044296:	2300      	movs	r3, #0
 8044298:	77fb      	strb	r3, [r7, #31]
  uint8_t num_connected = 0;
 804429a:	2300      	movs	r3, #0
 804429c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t num_ports;
  uint8_t dev_num;

  num_ports = ch_get_num_ports(grp_ptr);
 80442a0:	6a38      	ldr	r0, [r7, #32]
 80442a2:	f015 f9b4 	bl	805960e <ch_get_num_ports>
 80442a6:	4603      	mov	r3, r0
 80442a8:	77bb      	strb	r3, [r7, #30]

  if (activate) {
 80442aa:	79fb      	ldrb	r3, [r7, #7]
 80442ac:	2b00      	cmp	r3, #0
 80442ae:	f000 8086 	beq.w	80443be <prox_activate+0x136>
    //enable
    if (sensor_activate_count == 0) {
 80442b2:	4b53      	ldr	r3, [pc, #332]	; (8044400 <prox_activate+0x178>)
 80442b4:	781b      	ldrb	r3, [r3, #0]
 80442b6:	2b00      	cmp	r3, #0
 80442b8:	d17a      	bne.n	80443b0 <prox_activate+0x128>
      for (dev_num = 0; dev_num < num_ports; dev_num++) {
 80442ba:	2300      	movs	r3, #0
 80442bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80442c0:	e069      	b.n	8044396 <prox_activate+0x10e>
        printf("Configuring sensor(s)...， dev_num: %d, num_ports: %d\r\n",
 80442c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80442c6:	7fba      	ldrb	r2, [r7, #30]
 80442c8:	4619      	mov	r1, r3
 80442ca:	484e      	ldr	r0, [pc, #312]	; (8044404 <prox_activate+0x17c>)
 80442cc:	f01c fb52 	bl	8060974 <iprintf>
               dev_num, num_ports);
        ch_config_t dev_config;
        ch_dev_t *dev_ptr = ch_get_dev_ptr(grp_ptr, dev_num);
 80442d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80442d4:	4619      	mov	r1, r3
 80442d6:	6a38      	ldr	r0, [r7, #32]
 80442d8:	f015 f97a 	bl	80595d0 <ch_get_dev_ptr>
 80442dc:	61b8      	str	r0, [r7, #24]

        if (ch_sensor_is_connected(dev_ptr)) {
 80442de:	69b8      	ldr	r0, [r7, #24]
 80442e0:	f015 f951 	bl	8059586 <ch_sensor_is_connected>
 80442e4:	4603      	mov	r3, r0
 80442e6:	2b00      	cmp	r3, #0
 80442e8:	d050      	beq.n	804438c <prox_activate+0x104>
           *   All connected sensors are placed in hardware triggered mode.
           *   The first connected (lowest numbered) sensor will transmit and
           *   receive, all others will only receive.
           */

          num_connected++;      // count one more connected
 80442ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80442ee:	3301      	adds	r3, #1
 80442f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          active_devices |= (1 << dev_num);     // add to active device bit mask
 80442f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80442f8:	2201      	movs	r2, #1
 80442fa:	fa02 f303 	lsl.w	r3, r2, r3
 80442fe:	461a      	mov	r2, r3
 8044300:	4b41      	ldr	r3, [pc, #260]	; (8044408 <prox_activate+0x180>)
 8044302:	681b      	ldr	r3, [r3, #0]
 8044304:	4313      	orrs	r3, r2
 8044306:	4a40      	ldr	r2, [pc, #256]	; (8044408 <prox_activate+0x180>)
 8044308:	6013      	str	r3, [r2, #0]

          if (num_connected == 1) {     // if this is the first sensor
 804430a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 804430e:	2b01      	cmp	r3, #1
 8044310:	d107      	bne.n	8044322 <prox_activate+0x9a>
            dev_config.mode = CH_MODE_TRIGGERED_TX_RX;
 8044312:	2310      	movs	r3, #16
 8044314:	733b      	strb	r3, [r7, #12]
            printf("****mode: %d\r\n", dev_config.mode);
 8044316:	7b3b      	ldrb	r3, [r7, #12]
 8044318:	4619      	mov	r1, r3
 804431a:	483c      	ldr	r0, [pc, #240]	; (804440c <prox_activate+0x184>)
 804431c:	f01c fb2a 	bl	8060974 <iprintf>
 8044320:	e001      	b.n	8044326 <prox_activate+0x9e>
          } else {
            dev_config.mode = CH_MODE_TRIGGERED_RX_ONLY;
 8044322:	2320      	movs	r3, #32
 8044324:	733b      	strb	r3, [r7, #12]
          }

          /* Init config structure with values from hello_chirp.h */
          dev_config.max_range = CHIRP_SENSOR_MAX_RANGE_MM;
 8044326:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 804432a:	81fb      	strh	r3, [r7, #14]
          dev_config.static_range = CHIRP_SENSOR_STATIC_RANGE;
 804432c:	2300      	movs	r3, #0
 804432e:	823b      	strh	r3, [r7, #16]
          dev_config.sample_interval = CHIRP_SENSOR_SAMPLE_INTERVAL;
 8044330:	2300      	movs	r3, #0
 8044332:	827b      	strh	r3, [r7, #18]

          /* Set detection thresholds (CH201 only) */
          if (ch_get_part_number(dev_ptr) == CH201_PART_NUMBER) {
 8044334:	69b8      	ldr	r0, [r7, #24]
 8044336:	f015 f932 	bl	805959e <ch_get_part_number>
 804433a:	4603      	mov	r3, r0
 804433c:	2bc9      	cmp	r3, #201	; 0xc9
 804433e:	d102      	bne.n	8044346 <prox_activate+0xbe>
            /* Set pointer to struct containing detection thresholds */
            dev_config.thresh_ptr = &chirp_ch201_thresholds;
 8044340:	4b33      	ldr	r3, [pc, #204]	; (8044410 <prox_activate+0x188>)
 8044342:	617b      	str	r3, [r7, #20]
 8044344:	e001      	b.n	804434a <prox_activate+0xc2>
          } else {
            dev_config.thresh_ptr = 0;
 8044346:	2300      	movs	r3, #0
 8044348:	617b      	str	r3, [r7, #20]
          }

          /* Apply sensor configuration */
          chirp_error = ch_set_config(dev_ptr, &dev_config);
 804434a:	f107 030c 	add.w	r3, r7, #12
 804434e:	4619      	mov	r1, r3
 8044350:	69b8      	ldr	r0, [r7, #24]
 8044352:	f015 f8a8 	bl	80594a6 <ch_set_config>
 8044356:	4603      	mov	r3, r0
 8044358:	77fb      	strb	r3, [r7, #31]

          /* Enable sensor interrupt if using free-running mode
           *   Note that interrupt is automatically enabled if using
           *   triggered modes.
           */
          if ((!chirp_error) && (dev_config.mode == CH_MODE_FREERUN)) {
 804435a:	7ffb      	ldrb	r3, [r7, #31]
 804435c:	2b00      	cmp	r3, #0
 804435e:	d108      	bne.n	8044372 <prox_activate+0xea>
 8044360:	7b3b      	ldrb	r3, [r7, #12]
 8044362:	2b02      	cmp	r3, #2
 8044364:	d105      	bne.n	8044372 <prox_activate+0xea>
            printf("chirp interrupt enabled\r\n");
 8044366:	482b      	ldr	r0, [pc, #172]	; (8044414 <prox_activate+0x18c>)
 8044368:	f01c fba0 	bl	8060aac <puts>
            chbsp_io_interrupt_enable(dev_ptr);
 804436c:	69b8      	ldr	r0, [r7, #24]
 804436e:	f7ff f9df 	bl	8043730 <chbsp_io_interrupt_enable>
          }

          /* Read back and display config settings */
          if (!chirp_error) {
 8044372:	7ffb      	ldrb	r3, [r7, #31]
 8044374:	2b00      	cmp	r3, #0
 8044376:	d103      	bne.n	8044380 <prox_activate+0xf8>
            display_config_info(dev_ptr);
 8044378:	69b8      	ldr	r0, [r7, #24]
 804437a:	f7ff fca7 	bl	8043ccc <display_config_info>
 804437e:	e005      	b.n	804438c <prox_activate+0x104>
          } else {
            printf("Device %d: Error during ch_set_config() \r\n", dev_num);
 8044380:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8044384:	4619      	mov	r1, r3
 8044386:	4824      	ldr	r0, [pc, #144]	; (8044418 <prox_activate+0x190>)
 8044388:	f01c faf4 	bl	8060974 <iprintf>
      for (dev_num = 0; dev_num < num_ports; dev_num++) {
 804438c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8044390:	3301      	adds	r3, #1
 8044392:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8044396:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 804439a:	7fbb      	ldrb	r3, [r7, #30]
 804439c:	429a      	cmp	r2, r3
 804439e:	d390      	bcc.n	80442c2 <prox_activate+0x3a>
          }
        }
      }
      sensor_op_timer_enable(tim3);
 80443a0:	4b1e      	ldr	r3, [pc, #120]	; (804441c <prox_activate+0x194>)
 80443a2:	681b      	ldr	r3, [r3, #0]
 80443a4:	4618      	mov	r0, r3
 80443a6:	f008 fc3f 	bl	804cc28 <sensor_op_timer_enable>
      uitralsonic_proximity_enabled = true;
 80443aa:	4b1d      	ldr	r3, [pc, #116]	; (8044420 <prox_activate+0x198>)
 80443ac:	2201      	movs	r2, #1
 80443ae:	701a      	strb	r2, [r3, #0]
    }
    sensor_activate_count++;
 80443b0:	4b13      	ldr	r3, [pc, #76]	; (8044400 <prox_activate+0x178>)
 80443b2:	781b      	ldrb	r3, [r3, #0]
 80443b4:	3301      	adds	r3, #1
 80443b6:	b2da      	uxtb	r2, r3
 80443b8:	4b11      	ldr	r3, [pc, #68]	; (8044400 <prox_activate+0x178>)
 80443ba:	701a      	strb	r2, [r3, #0]
 80443bc:	e018      	b.n	80443f0 <prox_activate+0x168>
  } else {
    if (sensor_activate_count == 0) {
 80443be:	4b10      	ldr	r3, [pc, #64]	; (8044400 <prox_activate+0x178>)
 80443c0:	781b      	ldrb	r3, [r3, #0]
 80443c2:	2b00      	cmp	r3, #0
 80443c4:	d102      	bne.n	80443cc <prox_activate+0x144>
      return SENSOR_FAILED;
 80443c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80443ca:	e012      	b.n	80443f2 <prox_activate+0x16a>
    }
    sensor_activate_count--;
 80443cc:	4b0c      	ldr	r3, [pc, #48]	; (8044400 <prox_activate+0x178>)
 80443ce:	781b      	ldrb	r3, [r3, #0]
 80443d0:	3b01      	subs	r3, #1
 80443d2:	b2da      	uxtb	r2, r3
 80443d4:	4b0a      	ldr	r3, [pc, #40]	; (8044400 <prox_activate+0x178>)
 80443d6:	701a      	strb	r2, [r3, #0]
    if (sensor_activate_count == 0) {
 80443d8:	4b09      	ldr	r3, [pc, #36]	; (8044400 <prox_activate+0x178>)
 80443da:	781b      	ldrb	r3, [r3, #0]
 80443dc:	2b00      	cmp	r3, #0
 80443de:	d107      	bne.n	80443f0 <prox_activate+0x168>
      sensor_op_timer_disable(tim3);
 80443e0:	4b0e      	ldr	r3, [pc, #56]	; (804441c <prox_activate+0x194>)
 80443e2:	681b      	ldr	r3, [r3, #0]
 80443e4:	4618      	mov	r0, r3
 80443e6:	f008 fc45 	bl	804cc74 <sensor_op_timer_disable>
      uitralsonic_proximity_enabled = false;
 80443ea:	4b0d      	ldr	r3, [pc, #52]	; (8044420 <prox_activate+0x198>)
 80443ec:	2200      	movs	r2, #0
 80443ee:	701a      	strb	r2, [r3, #0]
    }
  }

  return 0;
 80443f0:	2300      	movs	r3, #0
}
 80443f2:	4618      	mov	r0, r3
 80443f4:	3728      	adds	r7, #40	; 0x28
 80443f6:	46bd      	mov	sp, r7
 80443f8:	bd80      	pop	{r7, pc}
 80443fa:	bf00      	nop
 80443fc:	2001b574 	.word	0x2001b574
 8044400:	20007f74 	.word	0x20007f74
 8044404:	080654dc 	.word	0x080654dc
 8044408:	20007f8c 	.word	0x20007f8c
 804440c:	08065518 	.word	0x08065518
 8044410:	20007024 	.word	0x20007024
 8044414:	08065528 	.word	0x08065528
 8044418:	08065544 	.word	0x08065544
 804441c:	2001bce8 	.word	0x2001bce8
 8044420:	20007f79 	.word	0x20007f79

08044424 <prox_publish_sensor_data>:

int prox_publish_sensor_data(void *para)
{
 8044424:	b580      	push	{r7, lr}
 8044426:	b088      	sub	sp, #32
 8044428:	af00      	add	r7, sp, #0
 804442a:	6078      	str	r0, [r7, #4]
  int gpio_pin = 0;
 804442c:	2300      	movs	r3, #0
 804442e:	60fb      	str	r3, [r7, #12]
 8044430:	687b      	ldr	r3, [r7, #4]
 8044432:	681b      	ldr	r3, [r3, #0]
  memcpy(&gpio_pin, para, sizeof(int));
 8044434:	60fb      	str	r3, [r7, #12]
  ch_group_t *grp_ptr = &chirp_group;
 8044436:	4b1d      	ldr	r3, [pc, #116]	; (80444ac <prox_publish_sensor_data+0x88>)
 8044438:	61bb      	str	r3, [r7, #24]
  ch_io_int_callback_t func_ptr = sensor_group_ptr->io_int_callback;
 804443a:	4b1d      	ldr	r3, [pc, #116]	; (80444b0 <prox_publish_sensor_data+0x8c>)
 804443c:	681b      	ldr	r3, [r3, #0]
 804443e:	68db      	ldr	r3, [r3, #12]
 8044440:	617b      	str	r3, [r7, #20]
  uint8_t num_ports = sensor_group_ptr->num_ports;
 8044442:	4b1b      	ldr	r3, [pc, #108]	; (80444b0 <prox_publish_sensor_data+0x8c>)
 8044444:	681b      	ldr	r3, [r3, #0]
 8044446:	781b      	ldrb	r3, [r3, #0]
 8044448:	74fb      	strb	r3, [r7, #19]
  uint8_t pin_found = 0;
 804444a:	2300      	movs	r3, #0
 804444c:	77fb      	strb	r3, [r7, #31]
  uint8_t idx;

  printf("prox publish sensor event gpio: %d\r\n", gpio_pin);
 804444e:	68fb      	ldr	r3, [r7, #12]
 8044450:	4619      	mov	r1, r3
 8044452:	4818      	ldr	r0, [pc, #96]	; (80444b4 <prox_publish_sensor_data+0x90>)
 8044454:	f01c fa8e 	bl	8060974 <iprintf>

  if (func_ptr != NULL) {
 8044458:	697b      	ldr	r3, [r7, #20]
 804445a:	2b00      	cmp	r3, #0
 804445c:	d020      	beq.n	80444a0 <prox_publish_sensor_data+0x7c>
    for (idx = 0; idx < num_ports; idx++) {
 804445e:	2300      	movs	r3, #0
 8044460:	77bb      	strb	r3, [r7, #30]
 8044462:	e00d      	b.n	8044480 <prox_publish_sensor_data+0x5c>
      if (gpio_pin == chirp_pin_io[idx]) {
 8044464:	7fbb      	ldrb	r3, [r7, #30]
 8044466:	4a14      	ldr	r2, [pc, #80]	; (80444b8 <prox_publish_sensor_data+0x94>)
 8044468:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 804446c:	461a      	mov	r2, r3
 804446e:	68fb      	ldr	r3, [r7, #12]
 8044470:	429a      	cmp	r2, r3
 8044472:	d102      	bne.n	804447a <prox_publish_sensor_data+0x56>
        pin_found = 1;
 8044474:	2301      	movs	r3, #1
 8044476:	77fb      	strb	r3, [r7, #31]
        break;
 8044478:	e006      	b.n	8044488 <prox_publish_sensor_data+0x64>
    for (idx = 0; idx < num_ports; idx++) {
 804447a:	7fbb      	ldrb	r3, [r7, #30]
 804447c:	3301      	adds	r3, #1
 804447e:	77bb      	strb	r3, [r7, #30]
 8044480:	7fba      	ldrb	r2, [r7, #30]
 8044482:	7cfb      	ldrb	r3, [r7, #19]
 8044484:	429a      	cmp	r2, r3
 8044486:	d3ed      	bcc.n	8044464 <prox_publish_sensor_data+0x40>
      }
    }

    if (pin_found) {
 8044488:	7ffb      	ldrb	r3, [r7, #31]
 804448a:	2b00      	cmp	r3, #0
 804448c:	d008      	beq.n	80444a0 <prox_publish_sensor_data+0x7c>
      // Call application callback function - pass I/O index to identify interrupting device
      (*func_ptr) (sensor_group_ptr, idx);
 804448e:	4b08      	ldr	r3, [pc, #32]	; (80444b0 <prox_publish_sensor_data+0x8c>)
 8044490:	681a      	ldr	r2, [r3, #0]
 8044492:	7fb9      	ldrb	r1, [r7, #30]
 8044494:	697b      	ldr	r3, [r7, #20]
 8044496:	4610      	mov	r0, r2
 8044498:	4798      	blx	r3
      handle_data_ready(grp_ptr);
 804449a:	69b8      	ldr	r0, [r7, #24]
 804449c:	f7ff fcba 	bl	8043e14 <handle_data_ready>
    }
  }
  return 0;
 80444a0:	2300      	movs	r3, #0
}
 80444a2:	4618      	mov	r0, r3
 80444a4:	3720      	adds	r7, #32
 80444a6:	46bd      	mov	sp, r7
 80444a8:	bd80      	pop	{r7, pc}
 80444aa:	bf00      	nop
 80444ac:	2001b574 	.word	0x2001b574
 80444b0:	2001b5d4 	.word	0x2001b5d4
 80444b4:	08065570 	.word	0x08065570
 80444b8:	2000701c 	.word	0x2000701c

080444bc <prox_config>:

int prox_config(uint8_t config_type, void *para)
{
 80444bc:	b580      	push	{r7, lr}
 80444be:	b084      	sub	sp, #16
 80444c0:	af00      	add	r7, sp, #0
 80444c2:	4603      	mov	r3, r0
 80444c4:	6039      	str	r1, [r7, #0]
 80444c6:	71fb      	strb	r3, [r7, #7]
  int res = 0;
 80444c8:	2300      	movs	r3, #0
 80444ca:	60fb      	str	r3, [r7, #12]
  switch (config_type) {
 80444cc:	79fb      	ldrb	r3, [r7, #7]
 80444ce:	2b06      	cmp	r3, #6
 80444d0:	d102      	bne.n	80444d8 <prox_config+0x1c>
  case SENSOR_CONFIG_TIMEOUT:
    //printf("@@@SENSOR_CONFIG_TIMEOUT!\r\n");
    chbsp_periodic_timer_handler();
 80444d2:	f7ff fb81 	bl	8043bd8 <chbsp_periodic_timer_handler>
    break;
 80444d6:	e000      	b.n	80444da <prox_config+0x1e>
  default:
    break;
 80444d8:	bf00      	nop
  }
  return res;
 80444da:	68fb      	ldr	r3, [r7, #12]
}
 80444dc:	4618      	mov	r0, r3
 80444de:	3710      	adds	r7, #16
 80444e0:	46bd      	mov	sp, r7
 80444e2:	bd80      	pop	{r7, pc}

080444e4 <prox_publish_config_resp>:

int prox_publish_config_resp(void *para)
{
 80444e4:	b480      	push	{r7}
 80444e6:	b083      	sub	sp, #12
 80444e8:	af00      	add	r7, sp, #0
 80444ea:	6078      	str	r0, [r7, #4]
  return 0;
 80444ec:	2300      	movs	r3, #0
}
 80444ee:	4618      	mov	r0, r3
 80444f0:	370c      	adds	r7, #12
 80444f2:	46bd      	mov	sp, r7
 80444f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80444f8:	4770      	bx	lr
	...

080444fc <GetSector>:
  * @brief  Gets the sector of a given address
  * @param  None
  * @retval The sector of a given address
  */
static uint32_t GetSector(uint32_t Address)
{
 80444fc:	b480      	push	{r7}
 80444fe:	b085      	sub	sp, #20
 8044500:	af00      	add	r7, sp, #0
 8044502:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 8044504:	2300      	movs	r3, #0
 8044506:	60fb      	str	r3, [r7, #12]

  if ((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0)) {
 8044508:	687b      	ldr	r3, [r7, #4]
 804450a:	4a40      	ldr	r2, [pc, #256]	; (804460c <GetSector+0x110>)
 804450c:	4293      	cmp	r3, r2
 804450e:	d206      	bcs.n	804451e <GetSector+0x22>
 8044510:	687b      	ldr	r3, [r7, #4]
 8044512:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8044516:	d302      	bcc.n	804451e <GetSector+0x22>
    sector = FLASH_SECTOR_0;
 8044518:	2300      	movs	r3, #0
 804451a:	60fb      	str	r3, [r7, #12]
 804451c:	e06f      	b.n	80445fe <GetSector+0x102>
  } else if ((Address < ADDR_FLASH_SECTOR_2)
 804451e:	687b      	ldr	r3, [r7, #4]
 8044520:	4a3b      	ldr	r2, [pc, #236]	; (8044610 <GetSector+0x114>)
 8044522:	4293      	cmp	r3, r2
 8044524:	d206      	bcs.n	8044534 <GetSector+0x38>
             && (Address >= ADDR_FLASH_SECTOR_1)) {
 8044526:	687b      	ldr	r3, [r7, #4]
 8044528:	4a38      	ldr	r2, [pc, #224]	; (804460c <GetSector+0x110>)
 804452a:	4293      	cmp	r3, r2
 804452c:	d302      	bcc.n	8044534 <GetSector+0x38>
    sector = FLASH_SECTOR_1;
 804452e:	2301      	movs	r3, #1
 8044530:	60fb      	str	r3, [r7, #12]
 8044532:	e064      	b.n	80445fe <GetSector+0x102>
  } else if ((Address < ADDR_FLASH_SECTOR_3)
 8044534:	687b      	ldr	r3, [r7, #4]
 8044536:	4a37      	ldr	r2, [pc, #220]	; (8044614 <GetSector+0x118>)
 8044538:	4293      	cmp	r3, r2
 804453a:	d206      	bcs.n	804454a <GetSector+0x4e>
             && (Address >= ADDR_FLASH_SECTOR_2)) {
 804453c:	687b      	ldr	r3, [r7, #4]
 804453e:	4a34      	ldr	r2, [pc, #208]	; (8044610 <GetSector+0x114>)
 8044540:	4293      	cmp	r3, r2
 8044542:	d302      	bcc.n	804454a <GetSector+0x4e>
    sector = FLASH_SECTOR_2;
 8044544:	2302      	movs	r3, #2
 8044546:	60fb      	str	r3, [r7, #12]
 8044548:	e059      	b.n	80445fe <GetSector+0x102>
  } else if ((Address < ADDR_FLASH_SECTOR_4)
 804454a:	687b      	ldr	r3, [r7, #4]
 804454c:	4a32      	ldr	r2, [pc, #200]	; (8044618 <GetSector+0x11c>)
 804454e:	4293      	cmp	r3, r2
 8044550:	d806      	bhi.n	8044560 <GetSector+0x64>
             && (Address >= ADDR_FLASH_SECTOR_3)) {
 8044552:	687b      	ldr	r3, [r7, #4]
 8044554:	4a2f      	ldr	r2, [pc, #188]	; (8044614 <GetSector+0x118>)
 8044556:	4293      	cmp	r3, r2
 8044558:	d302      	bcc.n	8044560 <GetSector+0x64>
    sector = FLASH_SECTOR_3;
 804455a:	2303      	movs	r3, #3
 804455c:	60fb      	str	r3, [r7, #12]
 804455e:	e04e      	b.n	80445fe <GetSector+0x102>
  } else if ((Address < ADDR_FLASH_SECTOR_5)
 8044560:	687b      	ldr	r3, [r7, #4]
 8044562:	4a2e      	ldr	r2, [pc, #184]	; (804461c <GetSector+0x120>)
 8044564:	4293      	cmp	r3, r2
 8044566:	d806      	bhi.n	8044576 <GetSector+0x7a>
             && (Address >= ADDR_FLASH_SECTOR_4)) {
 8044568:	687b      	ldr	r3, [r7, #4]
 804456a:	4a2b      	ldr	r2, [pc, #172]	; (8044618 <GetSector+0x11c>)
 804456c:	4293      	cmp	r3, r2
 804456e:	d902      	bls.n	8044576 <GetSector+0x7a>
    sector = FLASH_SECTOR_4;
 8044570:	2304      	movs	r3, #4
 8044572:	60fb      	str	r3, [r7, #12]
 8044574:	e043      	b.n	80445fe <GetSector+0x102>
  } else if ((Address < ADDR_FLASH_SECTOR_6)
 8044576:	687b      	ldr	r3, [r7, #4]
 8044578:	4a29      	ldr	r2, [pc, #164]	; (8044620 <GetSector+0x124>)
 804457a:	4293      	cmp	r3, r2
 804457c:	d806      	bhi.n	804458c <GetSector+0x90>
             && (Address >= ADDR_FLASH_SECTOR_5)) {
 804457e:	687b      	ldr	r3, [r7, #4]
 8044580:	4a26      	ldr	r2, [pc, #152]	; (804461c <GetSector+0x120>)
 8044582:	4293      	cmp	r3, r2
 8044584:	d902      	bls.n	804458c <GetSector+0x90>
    sector = FLASH_SECTOR_5;
 8044586:	2305      	movs	r3, #5
 8044588:	60fb      	str	r3, [r7, #12]
 804458a:	e038      	b.n	80445fe <GetSector+0x102>
  } else if ((Address < ADDR_FLASH_SECTOR_7)
 804458c:	687b      	ldr	r3, [r7, #4]
 804458e:	4a25      	ldr	r2, [pc, #148]	; (8044624 <GetSector+0x128>)
 8044590:	4293      	cmp	r3, r2
 8044592:	d806      	bhi.n	80445a2 <GetSector+0xa6>
             && (Address >= ADDR_FLASH_SECTOR_6)) {
 8044594:	687b      	ldr	r3, [r7, #4]
 8044596:	4a22      	ldr	r2, [pc, #136]	; (8044620 <GetSector+0x124>)
 8044598:	4293      	cmp	r3, r2
 804459a:	d902      	bls.n	80445a2 <GetSector+0xa6>
    sector = FLASH_SECTOR_6;
 804459c:	2306      	movs	r3, #6
 804459e:	60fb      	str	r3, [r7, #12]
 80445a0:	e02d      	b.n	80445fe <GetSector+0x102>
  } else if ((Address < ADDR_FLASH_SECTOR_8)
 80445a2:	687b      	ldr	r3, [r7, #4]
 80445a4:	4a20      	ldr	r2, [pc, #128]	; (8044628 <GetSector+0x12c>)
 80445a6:	4293      	cmp	r3, r2
 80445a8:	d806      	bhi.n	80445b8 <GetSector+0xbc>
             && (Address >= ADDR_FLASH_SECTOR_7)) {
 80445aa:	687b      	ldr	r3, [r7, #4]
 80445ac:	4a1d      	ldr	r2, [pc, #116]	; (8044624 <GetSector+0x128>)
 80445ae:	4293      	cmp	r3, r2
 80445b0:	d902      	bls.n	80445b8 <GetSector+0xbc>
    sector = FLASH_SECTOR_7;
 80445b2:	2307      	movs	r3, #7
 80445b4:	60fb      	str	r3, [r7, #12]
 80445b6:	e022      	b.n	80445fe <GetSector+0x102>
  } else if ((Address < ADDR_FLASH_SECTOR_9)
 80445b8:	687b      	ldr	r3, [r7, #4]
 80445ba:	4a1c      	ldr	r2, [pc, #112]	; (804462c <GetSector+0x130>)
 80445bc:	4293      	cmp	r3, r2
 80445be:	d806      	bhi.n	80445ce <GetSector+0xd2>
             && (Address >= ADDR_FLASH_SECTOR_8)) {
 80445c0:	687b      	ldr	r3, [r7, #4]
 80445c2:	4a19      	ldr	r2, [pc, #100]	; (8044628 <GetSector+0x12c>)
 80445c4:	4293      	cmp	r3, r2
 80445c6:	d902      	bls.n	80445ce <GetSector+0xd2>
    sector = FLASH_SECTOR_8;
 80445c8:	2308      	movs	r3, #8
 80445ca:	60fb      	str	r3, [r7, #12]
 80445cc:	e017      	b.n	80445fe <GetSector+0x102>
  } else if ((Address < ADDR_FLASH_SECTOR_10)
 80445ce:	687b      	ldr	r3, [r7, #4]
 80445d0:	4a17      	ldr	r2, [pc, #92]	; (8044630 <GetSector+0x134>)
 80445d2:	4293      	cmp	r3, r2
 80445d4:	d806      	bhi.n	80445e4 <GetSector+0xe8>
             && (Address >= ADDR_FLASH_SECTOR_9)) {
 80445d6:	687b      	ldr	r3, [r7, #4]
 80445d8:	4a14      	ldr	r2, [pc, #80]	; (804462c <GetSector+0x130>)
 80445da:	4293      	cmp	r3, r2
 80445dc:	d902      	bls.n	80445e4 <GetSector+0xe8>
    sector = FLASH_SECTOR_9;
 80445de:	2309      	movs	r3, #9
 80445e0:	60fb      	str	r3, [r7, #12]
 80445e2:	e00c      	b.n	80445fe <GetSector+0x102>
  } else if ((Address < ADDR_FLASH_SECTOR_11)
 80445e4:	687b      	ldr	r3, [r7, #4]
 80445e6:	4a13      	ldr	r2, [pc, #76]	; (8044634 <GetSector+0x138>)
 80445e8:	4293      	cmp	r3, r2
 80445ea:	d806      	bhi.n	80445fa <GetSector+0xfe>
             && (Address >= ADDR_FLASH_SECTOR_10)) {
 80445ec:	687b      	ldr	r3, [r7, #4]
 80445ee:	4a10      	ldr	r2, [pc, #64]	; (8044630 <GetSector+0x134>)
 80445f0:	4293      	cmp	r3, r2
 80445f2:	d902      	bls.n	80445fa <GetSector+0xfe>
    sector = FLASH_SECTOR_10;
 80445f4:	230a      	movs	r3, #10
 80445f6:	60fb      	str	r3, [r7, #12]
 80445f8:	e001      	b.n	80445fe <GetSector+0x102>
  } else {                      /* (Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_11) */

    sector = FLASH_SECTOR_11;
 80445fa:	230b      	movs	r3, #11
 80445fc:	60fb      	str	r3, [r7, #12]
  }

  return sector;
 80445fe:	68fb      	ldr	r3, [r7, #12]
}
 8044600:	4618      	mov	r0, r3
 8044602:	3714      	adds	r7, #20
 8044604:	46bd      	mov	sp, r7
 8044606:	f85d 7b04 	ldr.w	r7, [sp], #4
 804460a:	4770      	bx	lr
 804460c:	08004000 	.word	0x08004000
 8044610:	08008000 	.word	0x08008000
 8044614:	0800c000 	.word	0x0800c000
 8044618:	0800ffff 	.word	0x0800ffff
 804461c:	0801ffff 	.word	0x0801ffff
 8044620:	0803ffff 	.word	0x0803ffff
 8044624:	0805ffff 	.word	0x0805ffff
 8044628:	0807ffff 	.word	0x0807ffff
 804462c:	0809ffff 	.word	0x0809ffff
 8044630:	080bffff 	.word	0x080bffff
 8044634:	080dffff 	.word	0x080dffff

08044638 <flash_unlock>:
  }
  return sectorsize;
}

uint32_t flash_unlock(void)
{
 8044638:	b580      	push	{r7, lr}
 804463a:	b082      	sub	sp, #8
 804463c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef ret = 0;
 804463e:	2300      	movs	r3, #0
 8044640:	71fb      	strb	r3, [r7, #7]
  ret = HAL_FLASH_Unlock();
 8044642:	f00c fbe9 	bl	8050e18 <HAL_FLASH_Unlock>
 8044646:	4603      	mov	r3, r0
 8044648:	71fb      	strb	r3, [r7, #7]
  return ret;
 804464a:	79fb      	ldrb	r3, [r7, #7]
}
 804464c:	4618      	mov	r0, r3
 804464e:	3708      	adds	r7, #8
 8044650:	46bd      	mov	sp, r7
 8044652:	bd80      	pop	{r7, pc}

08044654 <flash_lock>:

uint32_t flash_lock(void)
{
 8044654:	b580      	push	{r7, lr}
 8044656:	b082      	sub	sp, #8
 8044658:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef ret = 0;
 804465a:	2300      	movs	r3, #0
 804465c:	71fb      	strb	r3, [r7, #7]
  ret = HAL_FLASH_Lock();
 804465e:	f00c fbfd 	bl	8050e5c <HAL_FLASH_Lock>
 8044662:	4603      	mov	r3, r0
 8044664:	71fb      	strb	r3, [r7, #7]
  return ret;
 8044666:	79fb      	ldrb	r3, [r7, #7]
}
 8044668:	4618      	mov	r0, r3
 804466a:	3708      	adds	r7, #8
 804466c:	46bd      	mov	sp, r7
 804466e:	bd80      	pop	{r7, pc}

08044670 <flash_erase_by_sector>:

uint32_t flash_erase_by_sector(uint32_t start_address, uint8_t sector_num)
{
 8044670:	b580      	push	{r7, lr}
 8044672:	b086      	sub	sp, #24
 8044674:	af00      	add	r7, sp, #0
 8044676:	6078      	str	r0, [r7, #4]
 8044678:	460b      	mov	r3, r1
 804467a:	70fb      	strb	r3, [r7, #3]
  uint32_t FirstSector = 0, NbOfSectors = 0;
 804467c:	2300      	movs	r3, #0
 804467e:	617b      	str	r3, [r7, #20]
 8044680:	2300      	movs	r3, #0
 8044682:	613b      	str	r3, [r7, #16]
  uint32_t SectorError = 0;
 8044684:	2300      	movs	r3, #0
 8044686:	60fb      	str	r3, [r7, #12]

  /* Get the 1st sector to erase */
  FirstSector = GetSector(start_address);
 8044688:	6878      	ldr	r0, [r7, #4]
 804468a:	f7ff ff37 	bl	80444fc <GetSector>
 804468e:	6178      	str	r0, [r7, #20]
  /* Get the number of sector to erase from 1st sector */
  NbOfSectors = sector_num;
 8044690:	78fb      	ldrb	r3, [r7, #3]
 8044692:	613b      	str	r3, [r7, #16]

  /* Fill EraseInit structure */
  EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8044694:	4b0d      	ldr	r3, [pc, #52]	; (80446cc <flash_erase_by_sector+0x5c>)
 8044696:	2200      	movs	r2, #0
 8044698:	601a      	str	r2, [r3, #0]
  EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 804469a:	4b0c      	ldr	r3, [pc, #48]	; (80446cc <flash_erase_by_sector+0x5c>)
 804469c:	2202      	movs	r2, #2
 804469e:	611a      	str	r2, [r3, #16]
  EraseInitStruct.Sector = FirstSector;
 80446a0:	4a0a      	ldr	r2, [pc, #40]	; (80446cc <flash_erase_by_sector+0x5c>)
 80446a2:	697b      	ldr	r3, [r7, #20]
 80446a4:	6093      	str	r3, [r2, #8]
  EraseInitStruct.NbSectors = NbOfSectors;
 80446a6:	4a09      	ldr	r2, [pc, #36]	; (80446cc <flash_erase_by_sector+0x5c>)
 80446a8:	693b      	ldr	r3, [r7, #16]
 80446aa:	60d3      	str	r3, [r2, #12]
  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) != HAL_OK) {
 80446ac:	f107 030c 	add.w	r3, r7, #12
 80446b0:	4619      	mov	r1, r3
 80446b2:	4806      	ldr	r0, [pc, #24]	; (80446cc <flash_erase_by_sector+0x5c>)
 80446b4:	f00c fd12 	bl	80510dc <HAL_FLASHEx_Erase>
 80446b8:	4603      	mov	r3, r0
 80446ba:	2b00      	cmp	r3, #0
 80446bc:	d001      	beq.n	80446c2 <flash_erase_by_sector+0x52>
       user can call function 'HAL_FLASH_GetError()'
     */
    /*
       FLASH_ErrorTypeDef errorcode = HAL_FLASH_GetError();
     */
    Error_Handler();
 80446be:	f005 fa2b 	bl	8049b18 <Error_Handler>
  }
}
 80446c2:	bf00      	nop
 80446c4:	4618      	mov	r0, r3
 80446c6:	3718      	adds	r7, #24
 80446c8:	46bd      	mov	sp, r7
 80446ca:	bd80      	pop	{r7, pc}
 80446cc:	20007f94 	.word	0x20007f94

080446d0 <flash_program_by_word>:

uint32_t flash_program_by_word(uint32_t address, uint32_t data)
{
 80446d0:	b580      	push	{r7, lr}
 80446d2:	b082      	sub	sp, #8
 80446d4:	af00      	add	r7, sp, #0
 80446d6:	6078      	str	r0, [r7, #4]
 80446d8:	6039      	str	r1, [r7, #0]
  if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data) == HAL_OK) {
 80446da:	683b      	ldr	r3, [r7, #0]
 80446dc:	461a      	mov	r2, r3
 80446de:	f04f 0300 	mov.w	r3, #0
 80446e2:	6879      	ldr	r1, [r7, #4]
 80446e4:	2002      	movs	r0, #2
 80446e6:	f00c fb43 	bl	8050d70 <HAL_FLASH_Program>
 80446ea:	4603      	mov	r3, r0
 80446ec:	2b00      	cmp	r3, #0
 80446ee:	d101      	bne.n	80446f4 <flash_program_by_word+0x24>
    return HAL_OK;
 80446f0:	2300      	movs	r3, #0
 80446f2:	e001      	b.n	80446f8 <flash_program_by_word+0x28>
    /* Error occurred while writing data in Flash memory. 
       User can add here some code to deal with this error */
    /*
       FLASH_ErrorTypeDef errorcode = HAL_FLASH_GetError();
     */
    Error_Handler();
 80446f4:	f005 fa10 	bl	8049b18 <Error_Handler>
  }
}
 80446f8:	4618      	mov	r0, r3
 80446fa:	3708      	adds	r7, #8
 80446fc:	46bd      	mov	sp, r7
 80446fe:	bd80      	pop	{r7, pc}

08044700 <flash_update_boot_magic_number>:
  flash_program_by_word(FLASH_OTAINFO_ADD + 8, temp_ota_info.updating_app_id);

}

void flash_update_boot_magic_number(void)
{
 8044700:	b580      	push	{r7, lr}
 8044702:	b084      	sub	sp, #16
 8044704:	af00      	add	r7, sp, #0
  otaInfo temp_ota_info = { 0 };
 8044706:	1d3b      	adds	r3, r7, #4
 8044708:	2200      	movs	r2, #0
 804470a:	601a      	str	r2, [r3, #0]
 804470c:	605a      	str	r2, [r3, #4]
 804470e:	609a      	str	r2, [r3, #8]

  temp_ota_info.boot_mode = RAM_MAGIC_WORD;
 8044710:	f648 13ab 	movw	r3, #35243	; 0x89ab
 8044714:	607b      	str	r3, [r7, #4]
  temp_ota_info.using_app_id = flashOtaInfo.using_app_id;
 8044716:	4b0e      	ldr	r3, [pc, #56]	; (8044750 <flash_update_boot_magic_number+0x50>)
 8044718:	685b      	ldr	r3, [r3, #4]
 804471a:	60bb      	str	r3, [r7, #8]
  temp_ota_info.updating_app_id = flashOtaInfo.updating_app_id;
 804471c:	4b0c      	ldr	r3, [pc, #48]	; (8044750 <flash_update_boot_magic_number+0x50>)
 804471e:	689b      	ldr	r3, [r3, #8]
 8044720:	60fb      	str	r3, [r7, #12]

  flash_erase_by_sector(FLASH_OTAINFO_ADD, 1);
 8044722:	2101      	movs	r1, #1
 8044724:	480a      	ldr	r0, [pc, #40]	; (8044750 <flash_update_boot_magic_number+0x50>)
 8044726:	f7ff ffa3 	bl	8044670 <flash_erase_by_sector>

  flash_program_by_word(FLASH_OTAINFO_ADD, temp_ota_info.boot_mode);
 804472a:	687b      	ldr	r3, [r7, #4]
 804472c:	4619      	mov	r1, r3
 804472e:	4808      	ldr	r0, [pc, #32]	; (8044750 <flash_update_boot_magic_number+0x50>)
 8044730:	f7ff ffce 	bl	80446d0 <flash_program_by_word>
  flash_program_by_word(FLASH_OTAINFO_ADD + 4, temp_ota_info.using_app_id);
 8044734:	68bb      	ldr	r3, [r7, #8]
 8044736:	4619      	mov	r1, r3
 8044738:	4806      	ldr	r0, [pc, #24]	; (8044754 <flash_update_boot_magic_number+0x54>)
 804473a:	f7ff ffc9 	bl	80446d0 <flash_program_by_word>
  flash_program_by_word(FLASH_OTAINFO_ADD + 8, temp_ota_info.updating_app_id);
 804473e:	68fb      	ldr	r3, [r7, #12]
 8044740:	4619      	mov	r1, r3
 8044742:	4805      	ldr	r0, [pc, #20]	; (8044758 <flash_update_boot_magic_number+0x58>)
 8044744:	f7ff ffc4 	bl	80446d0 <flash_program_by_word>

}
 8044748:	bf00      	nop
 804474a:	3710      	adds	r7, #16
 804474c:	46bd      	mov	sp, r7
 804474e:	bd80      	pop	{r7, pc}
 8044750:	08010000 	.word	0x08010000
 8044754:	08010004 	.word	0x08010004
 8044758:	08010008 	.word	0x08010008

0804475c <headled_platform_write>:
 * @param  len       number of consecutive register to write
 *
 */
static int32_t headled_platform_write(void *handle, uint8_t reg, uint8_t * bufp,
                                      uint16_t len)
{
 804475c:	b580      	push	{r7, lr}
 804475e:	b088      	sub	sp, #32
 8044760:	af04      	add	r7, sp, #16
 8044762:	60f8      	str	r0, [r7, #12]
 8044764:	607a      	str	r2, [r7, #4]
 8044766:	461a      	mov	r2, r3
 8044768:	460b      	mov	r3, r1
 804476a:	72fb      	strb	r3, [r7, #11]
 804476c:	4613      	mov	r3, r2
 804476e:	813b      	strh	r3, [r7, #8]
  if (handle == &headled_init_parms->i2c_handle) {
 8044770:	4b0c      	ldr	r3, [pc, #48]	; (80447a4 <headled_platform_write+0x48>)
 8044772:	681b      	ldr	r3, [r3, #0]
 8044774:	3304      	adds	r3, #4
 8044776:	68fa      	ldr	r2, [r7, #12]
 8044778:	429a      	cmp	r2, r3
 804477a:	d10d      	bne.n	8044798 <headled_platform_write+0x3c>
    HAL_I2C_Mem_Write(handle, (uint16_t) HEAD_LED_AW21036_I2C_COMUNICATE_ADD,
 804477c:	7afb      	ldrb	r3, [r7, #11]
 804477e:	b29a      	uxth	r2, r3
 8044780:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8044784:	9302      	str	r3, [sp, #8]
 8044786:	893b      	ldrh	r3, [r7, #8]
 8044788:	9301      	str	r3, [sp, #4]
 804478a:	687b      	ldr	r3, [r7, #4]
 804478c:	9300      	str	r3, [sp, #0]
 804478e:	2301      	movs	r3, #1
 8044790:	2168      	movs	r1, #104	; 0x68
 8044792:	68f8      	ldr	r0, [r7, #12]
 8044794:	f00d fc12 	bl	8051fbc <HAL_I2C_Mem_Write>
                      reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  }

  return 0;
 8044798:	2300      	movs	r3, #0
}
 804479a:	4618      	mov	r0, r3
 804479c:	3710      	adds	r7, #16
 804479e:	46bd      	mov	sp, r7
 80447a0:	bd80      	pop	{r7, pc}
 80447a2:	bf00      	nop
 80447a4:	20007fb4 	.word	0x20007fb4

080447a8 <headled_platform_read>:
 *
 */

static int32_t headled_platform_read(void *handle, uint8_t reg, uint8_t * bufp,
                                     uint16_t len)
{
 80447a8:	b580      	push	{r7, lr}
 80447aa:	b088      	sub	sp, #32
 80447ac:	af04      	add	r7, sp, #16
 80447ae:	60f8      	str	r0, [r7, #12]
 80447b0:	607a      	str	r2, [r7, #4]
 80447b2:	461a      	mov	r2, r3
 80447b4:	460b      	mov	r3, r1
 80447b6:	72fb      	strb	r3, [r7, #11]
 80447b8:	4613      	mov	r3, r2
 80447ba:	813b      	strh	r3, [r7, #8]
  if (handle == &headled_init_parms->i2c_handle) {
 80447bc:	4b0c      	ldr	r3, [pc, #48]	; (80447f0 <headled_platform_read+0x48>)
 80447be:	681b      	ldr	r3, [r3, #0]
 80447c0:	3304      	adds	r3, #4
 80447c2:	68fa      	ldr	r2, [r7, #12]
 80447c4:	429a      	cmp	r2, r3
 80447c6:	d10d      	bne.n	80447e4 <headled_platform_read+0x3c>
    HAL_I2C_Mem_Read(handle, (uint16_t) HEAD_LED_AW21036_I2C_COMUNICATE_ADD,
 80447c8:	7afb      	ldrb	r3, [r7, #11]
 80447ca:	b29a      	uxth	r2, r3
 80447cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80447d0:	9302      	str	r3, [sp, #8]
 80447d2:	893b      	ldrh	r3, [r7, #8]
 80447d4:	9301      	str	r3, [sp, #4]
 80447d6:	687b      	ldr	r3, [r7, #4]
 80447d8:	9300      	str	r3, [sp, #0]
 80447da:	2301      	movs	r3, #1
 80447dc:	2168      	movs	r1, #104	; 0x68
 80447de:	68f8      	ldr	r0, [r7, #12]
 80447e0:	f00d fce6 	bl	80521b0 <HAL_I2C_Mem_Read>
                     reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  }

  return 0;
 80447e4:	2300      	movs	r3, #0
}
 80447e6:	4618      	mov	r0, r3
 80447e8:	3710      	adds	r7, #16
 80447ea:	46bd      	mov	sp, r7
 80447ec:	bd80      	pop	{r7, pc}
 80447ee:	bf00      	nop
 80447f0:	20007fb4 	.word	0x20007fb4

080447f4 <aw21036_i2c_write_bits>:

static int aw21036_i2c_write_bits(void *handle,
                                  unsigned char reg_addr, unsigned int mask,
                                  unsigned char reg_data)
{
 80447f4:	b580      	push	{r7, lr}
 80447f6:	b086      	sub	sp, #24
 80447f8:	af00      	add	r7, sp, #0
 80447fa:	60f8      	str	r0, [r7, #12]
 80447fc:	607a      	str	r2, [r7, #4]
 80447fe:	461a      	mov	r2, r3
 8044800:	460b      	mov	r3, r1
 8044802:	72fb      	strb	r3, [r7, #11]
 8044804:	4613      	mov	r3, r2
 8044806:	72bb      	strb	r3, [r7, #10]
  uint8_t reg_val;
  headled_platform_read(handle, reg_addr, &reg_val, 1);
 8044808:	f107 0217 	add.w	r2, r7, #23
 804480c:	7af9      	ldrb	r1, [r7, #11]
 804480e:	2301      	movs	r3, #1
 8044810:	68f8      	ldr	r0, [r7, #12]
 8044812:	f7ff ffc9 	bl	80447a8 <headled_platform_read>
  reg_val &= mask;
 8044816:	687b      	ldr	r3, [r7, #4]
 8044818:	b2da      	uxtb	r2, r3
 804481a:	7dfb      	ldrb	r3, [r7, #23]
 804481c:	4013      	ands	r3, r2
 804481e:	b2db      	uxtb	r3, r3
 8044820:	75fb      	strb	r3, [r7, #23]
  reg_val |= reg_data;
 8044822:	7dfa      	ldrb	r2, [r7, #23]
 8044824:	7abb      	ldrb	r3, [r7, #10]
 8044826:	4313      	orrs	r3, r2
 8044828:	b2db      	uxtb	r3, r3
 804482a:	75fb      	strb	r3, [r7, #23]
  headled_platform_write(handle, reg_addr, &reg_val, 1);
 804482c:	f107 0217 	add.w	r2, r7, #23
 8044830:	7af9      	ldrb	r1, [r7, #11]
 8044832:	2301      	movs	r3, #1
 8044834:	68f8      	ldr	r0, [r7, #12]
 8044836:	f7ff ff91 	bl	804475c <headled_platform_write>
  return 0;
 804483a:	2300      	movs	r3, #0
}
 804483c:	4618      	mov	r0, r3
 804483e:	3718      	adds	r7, #24
 8044840:	46bd      	mov	sp, r7
 8044842:	bd80      	pop	{r7, pc}

08044844 <aw21036_chip_enable>:

static int aw21036_chip_enable(void *handle, bool flag)
{
 8044844:	b580      	push	{r7, lr}
 8044846:	b082      	sub	sp, #8
 8044848:	af00      	add	r7, sp, #0
 804484a:	6078      	str	r0, [r7, #4]
 804484c:	460b      	mov	r3, r1
 804484e:	70fb      	strb	r3, [r7, #3]
  if (flag)
 8044850:	78fb      	ldrb	r3, [r7, #3]
 8044852:	2b00      	cmp	r3, #0
 8044854:	d007      	beq.n	8044866 <aw21036_chip_enable+0x22>
    aw21036_i2c_write_bits(handle, AW21036_REG_GCR,
 8044856:	2301      	movs	r3, #1
 8044858:	f06f 0201 	mvn.w	r2, #1
 804485c:	2100      	movs	r1, #0
 804485e:	6878      	ldr	r0, [r7, #4]
 8044860:	f7ff ffc8 	bl	80447f4 <aw21036_i2c_write_bits>
 8044864:	e006      	b.n	8044874 <aw21036_chip_enable+0x30>
                           AW21036_BIT_GCR_CHIPEN_MASK,
                           AW21036_BIT_GCR_CHIPEN_ENABLE);
  else
    aw21036_i2c_write_bits(handle, AW21036_REG_GCR,
 8044866:	2300      	movs	r3, #0
 8044868:	f06f 0201 	mvn.w	r2, #1
 804486c:	2100      	movs	r1, #0
 804486e:	6878      	ldr	r0, [r7, #4]
 8044870:	f7ff ffc0 	bl	80447f4 <aw21036_i2c_write_bits>
                           AW21036_BIT_GCR_CHIPEN_MASK,
                           AW21036_BIT_GCR_CHIPEN_DISABLE);

  return 0;
 8044874:	2300      	movs	r3, #0
}
 8044876:	4618      	mov	r0, r3
 8044878:	3708      	adds	r7, #8
 804487a:	46bd      	mov	sp, r7
 804487c:	bd80      	pop	{r7, pc}
	...

08044880 <aw21036_pwm_freq_cfg>:

static int aw21036_pwm_freq_cfg(void *handle, struct aw21036 *aw21036)
{
 8044880:	b580      	push	{r7, lr}
 8044882:	b082      	sub	sp, #8
 8044884:	af00      	add	r7, sp, #0
 8044886:	6078      	str	r0, [r7, #4]
 8044888:	6039      	str	r1, [r7, #0]
  printf("%s: enter\r\n", __func__);
 804488a:	490c      	ldr	r1, [pc, #48]	; (80448bc <aw21036_pwm_freq_cfg+0x3c>)
 804488c:	480c      	ldr	r0, [pc, #48]	; (80448c0 <aw21036_pwm_freq_cfg+0x40>)
 804488e:	f01c f871 	bl	8060974 <iprintf>

  aw21036_i2c_write_bits(handle, AW21036_REG_GCR,
                         AW21036_BIT_GCR_CLKFRQ_MASK, aw21036->pwm_freq);
 8044892:	683b      	ldr	r3, [r7, #0]
 8044894:	68db      	ldr	r3, [r3, #12]
  aw21036_i2c_write_bits(handle, AW21036_REG_GCR,
 8044896:	b2db      	uxtb	r3, r3
 8044898:	f06f 0270 	mvn.w	r2, #112	; 0x70
 804489c:	2100      	movs	r1, #0
 804489e:	6878      	ldr	r0, [r7, #4]
 80448a0:	f7ff ffa8 	bl	80447f4 <aw21036_i2c_write_bits>
  printf("%s: osc clk freq: 0x%x\r\n", __func__, aw21036->pwm_freq);
 80448a4:	683b      	ldr	r3, [r7, #0]
 80448a6:	68db      	ldr	r3, [r3, #12]
 80448a8:	461a      	mov	r2, r3
 80448aa:	4904      	ldr	r1, [pc, #16]	; (80448bc <aw21036_pwm_freq_cfg+0x3c>)
 80448ac:	4805      	ldr	r0, [pc, #20]	; (80448c4 <aw21036_pwm_freq_cfg+0x44>)
 80448ae:	f01c f861 	bl	8060974 <iprintf>

  return 0;
 80448b2:	2300      	movs	r3, #0
}
 80448b4:	4618      	mov	r0, r3
 80448b6:	3708      	adds	r7, #8
 80448b8:	46bd      	mov	sp, r7
 80448ba:	bd80      	pop	{r7, pc}
 80448bc:	0806780c 	.word	0x0806780c
 80448c0:	08065598 	.word	0x08065598
 80448c4:	080655a4 	.word	0x080655a4

080448c8 <aw21036_update_cfg_array>:
 *
 *****************************************************/
static void aw21036_update_cfg_array(void *handle,
                                     unsigned char *p_cfg_data,
                                     unsigned int cfg_size)
{
 80448c8:	b580      	push	{r7, lr}
 80448ca:	b086      	sub	sp, #24
 80448cc:	af00      	add	r7, sp, #0
 80448ce:	60f8      	str	r0, [r7, #12]
 80448d0:	60b9      	str	r1, [r7, #8]
 80448d2:	607a      	str	r2, [r7, #4]
  unsigned int i = 0;
 80448d4:	2300      	movs	r3, #0
 80448d6:	617b      	str	r3, [r7, #20]

  for (i = 0; i < cfg_size; i += 2)
 80448d8:	2300      	movs	r3, #0
 80448da:	617b      	str	r3, [r7, #20]
 80448dc:	e00e      	b.n	80448fc <aw21036_update_cfg_array+0x34>
    headled_platform_write(handle, p_cfg_data[i], &p_cfg_data[i + 1], 1);
 80448de:	68ba      	ldr	r2, [r7, #8]
 80448e0:	697b      	ldr	r3, [r7, #20]
 80448e2:	4413      	add	r3, r2
 80448e4:	7819      	ldrb	r1, [r3, #0]
 80448e6:	697b      	ldr	r3, [r7, #20]
 80448e8:	3301      	adds	r3, #1
 80448ea:	68ba      	ldr	r2, [r7, #8]
 80448ec:	441a      	add	r2, r3
 80448ee:	2301      	movs	r3, #1
 80448f0:	68f8      	ldr	r0, [r7, #12]
 80448f2:	f7ff ff33 	bl	804475c <headled_platform_write>
  for (i = 0; i < cfg_size; i += 2)
 80448f6:	697b      	ldr	r3, [r7, #20]
 80448f8:	3302      	adds	r3, #2
 80448fa:	617b      	str	r3, [r7, #20]
 80448fc:	697a      	ldr	r2, [r7, #20]
 80448fe:	687b      	ldr	r3, [r7, #4]
 8044900:	429a      	cmp	r2, r3
 8044902:	d3ec      	bcc.n	80448de <aw21036_update_cfg_array+0x16>
}
 8044904:	bf00      	nop
 8044906:	bf00      	nop
 8044908:	3718      	adds	r7, #24
 804490a:	46bd      	mov	sp, r7
 804490c:	bd80      	pop	{r7, pc}
	...

08044910 <aw21036_cfg_update>:

static int aw21036_cfg_update(void *handle, struct aw21036 *aw21036)
{
 8044910:	b580      	push	{r7, lr}
 8044912:	b082      	sub	sp, #8
 8044914:	af00      	add	r7, sp, #0
 8044916:	6078      	str	r0, [r7, #4]
 8044918:	6039      	str	r1, [r7, #0]
  printf("%s: enter\r\n", __func__);
 804491a:	490c      	ldr	r1, [pc, #48]	; (804494c <aw21036_cfg_update+0x3c>)
 804491c:	480c      	ldr	r0, [pc, #48]	; (8044950 <aw21036_cfg_update+0x40>)
 804491e:	f01c f829 	bl	8060974 <iprintf>
  aw21036_update_cfg_array(handle,
                           (aw21036_cfg_array[aw21036->effect].p),
 8044922:	683b      	ldr	r3, [r7, #0]
 8044924:	7d1b      	ldrb	r3, [r3, #20]
 8044926:	461a      	mov	r2, r3
  aw21036_update_cfg_array(handle,
 8044928:	4b0a      	ldr	r3, [pc, #40]	; (8044954 <aw21036_cfg_update+0x44>)
 804492a:	f853 1032 	ldr.w	r1, [r3, r2, lsl #3]
                           aw21036_cfg_array[aw21036->effect].count);
 804492e:	683b      	ldr	r3, [r7, #0]
 8044930:	7d1b      	ldrb	r3, [r3, #20]
  aw21036_update_cfg_array(handle,
 8044932:	4a08      	ldr	r2, [pc, #32]	; (8044954 <aw21036_cfg_update+0x44>)
 8044934:	00db      	lsls	r3, r3, #3
 8044936:	4413      	add	r3, r2
 8044938:	685b      	ldr	r3, [r3, #4]
 804493a:	461a      	mov	r2, r3
 804493c:	6878      	ldr	r0, [r7, #4]
 804493e:	f7ff ffc3 	bl	80448c8 <aw21036_update_cfg_array>
  return 0;
 8044942:	2300      	movs	r3, #0
}
 8044944:	4618      	mov	r0, r3
 8044946:	3708      	adds	r7, #8
 8044948:	46bd      	mov	sp, r7
 804494a:	bd80      	pop	{r7, pc}
 804494c:	08067824 	.word	0x08067824
 8044950:	08065598 	.word	0x08065598
 8044954:	200077f8 	.word	0x200077f8

08044958 <aw21036_led_init>:
/******************************************************
 *
 * led class dev
 ******************************************************/
static int aw21036_led_init(void *handle, struct aw21036 *aw21036)
{
 8044958:	b580      	push	{r7, lr}
 804495a:	b084      	sub	sp, #16
 804495c:	af00      	add	r7, sp, #0
 804495e:	6078      	str	r0, [r7, #4]
 8044960:	6039      	str	r1, [r7, #0]
  printf("%s: enter\r\n", __func__);
 8044962:	4915      	ldr	r1, [pc, #84]	; (80449b8 <aw21036_led_init+0x60>)
 8044964:	4815      	ldr	r0, [pc, #84]	; (80449bc <aw21036_led_init+0x64>)
 8044966:	f01c f805 	bl	8060974 <iprintf>
  uint8_t reg_val = 0x00;
 804496a:	2300      	movs	r3, #0
 804496c:	73fb      	strb	r3, [r7, #15]
  headled_platform_write(handle, AW21036_REG_RESET, &reg_val, 1);
 804496e:	f107 020f 	add.w	r2, r7, #15
 8044972:	2301      	movs	r3, #1
 8044974:	217f      	movs	r1, #127	; 0x7f
 8044976:	6878      	ldr	r0, [r7, #4]
 8044978:	f7ff fef0 	bl	804475c <headled_platform_write>
  osDelay(5);
 804497c:	2005      	movs	r0, #5
 804497e:	f011 fbbc 	bl	80560fa <osDelay>
  aw21036_chip_enable(handle, true);
 8044982:	2101      	movs	r1, #1
 8044984:	6878      	ldr	r0, [r7, #4]
 8044986:	f7ff ff5d 	bl	8044844 <aw21036_chip_enable>
  osDelay(5);
 804498a:	2005      	movs	r0, #5
 804498c:	f011 fbb5 	bl	80560fa <osDelay>

  aw21036_pwm_freq_cfg(handle, aw21036);
 8044990:	6839      	ldr	r1, [r7, #0]
 8044992:	6878      	ldr	r0, [r7, #4]
 8044994:	f7ff ff74 	bl	8044880 <aw21036_pwm_freq_cfg>

  aw21036_i2c_write_bits(handle, AW21036_REG_GCR,
 8044998:	2380      	movs	r3, #128	; 0x80
 804499a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 804499e:	2100      	movs	r1, #0
 80449a0:	6878      	ldr	r0, [r7, #4]
 80449a2:	f7ff ff27 	bl	80447f4 <aw21036_i2c_write_bits>
                         AW21036_BIT_GCR_APSE_MASK,
                         AW21036_BIT_GCR_APSE_ENABLE);
  printf("%s: DONE!\r\n", __func__);
 80449a6:	4904      	ldr	r1, [pc, #16]	; (80449b8 <aw21036_led_init+0x60>)
 80449a8:	4805      	ldr	r0, [pc, #20]	; (80449c0 <aw21036_led_init+0x68>)
 80449aa:	f01b ffe3 	bl	8060974 <iprintf>
  return 0;
 80449ae:	2300      	movs	r3, #0
}
 80449b0:	4618      	mov	r0, r3
 80449b2:	3710      	adds	r7, #16
 80449b4:	46bd      	mov	sp, r7
 80449b6:	bd80      	pop	{r7, pc}
 80449b8:	08067838 	.word	0x08067838
 80449bc:	08065598 	.word	0x08065598
 80449c0:	080655c0 	.word	0x080655c0

080449c4 <headled_hw_reset>:
 * NAME       : led_hw_reset
 * FUNCTION   : reset led
 * REMARKS    :
 *****************************************************************************/
static int headled_hw_reset(stmdev_ctx_t * ctx)
{
 80449c4:	b580      	push	{r7, lr}
 80449c6:	b082      	sub	sp, #8
 80449c8:	af00      	add	r7, sp, #0
 80449ca:	6078      	str	r0, [r7, #4]
  if (ctx != NULL) {
 80449cc:	687b      	ldr	r3, [r7, #4]
 80449ce:	2b00      	cmp	r3, #0
 80449d0:	d012      	beq.n	80449f8 <headled_hw_reset+0x34>
    HAL_GPIO_WritePin(HEAD_AND_REAR_LED_DRIVER_EN_GPIO_Port,
 80449d2:	2200      	movs	r2, #0
 80449d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80449d8:	480c      	ldr	r0, [pc, #48]	; (8044a0c <headled_hw_reset+0x48>)
 80449da:	f00c fe55 	bl	8051688 <HAL_GPIO_WritePin>
                      HEAD_AND_REAR_LED_DRIVER_EN_Pin, GPIO_PIN_RESET);
    osDelay(1);
 80449de:	2001      	movs	r0, #1
 80449e0:	f011 fb8b 	bl	80560fa <osDelay>
    HAL_GPIO_WritePin(HEAD_AND_REAR_LED_DRIVER_EN_GPIO_Port,
 80449e4:	2201      	movs	r2, #1
 80449e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80449ea:	4808      	ldr	r0, [pc, #32]	; (8044a0c <headled_hw_reset+0x48>)
 80449ec:	f00c fe4c 	bl	8051688 <HAL_GPIO_WritePin>
                      HEAD_AND_REAR_LED_DRIVER_EN_Pin, GPIO_PIN_SET);
    osDelay(1);
 80449f0:	2001      	movs	r0, #1
 80449f2:	f011 fb82 	bl	80560fa <osDelay>
 80449f6:	e003      	b.n	8044a00 <headled_hw_reset+0x3c>
  } else {
    printf("%s: failed\r\n", __func__);
 80449f8:	4905      	ldr	r1, [pc, #20]	; (8044a10 <headled_hw_reset+0x4c>)
 80449fa:	4806      	ldr	r0, [pc, #24]	; (8044a14 <headled_hw_reset+0x50>)
 80449fc:	f01b ffba 	bl	8060974 <iprintf>
  }
  return 0;
 8044a00:	2300      	movs	r3, #0
}
 8044a02:	4618      	mov	r0, r3
 8044a04:	3708      	adds	r7, #8
 8044a06:	46bd      	mov	sp, r7
 8044a08:	bd80      	pop	{r7, pc}
 8044a0a:	bf00      	nop
 8044a0c:	40020400 	.word	0x40020400
 8044a10:	0806784c 	.word	0x0806784c
 8044a14:	080655cc 	.word	0x080655cc

08044a18 <headled_init>:

int headled_init(void *para, void *para2)
{
 8044a18:	b580      	push	{r7, lr}
 8044a1a:	b084      	sub	sp, #16
 8044a1c:	af00      	add	r7, sp, #0
 8044a1e:	6078      	str	r0, [r7, #4]
 8044a20:	6039      	str	r1, [r7, #0]
  headled_init_parms = (platform_prams *) para;
 8044a22:	4a2d      	ldr	r2, [pc, #180]	; (8044ad8 <headled_init+0xc0>)
 8044a24:	687b      	ldr	r3, [r7, #4]
 8044a26:	6013      	str	r3, [r2, #0]
  /* Initialize mems driver interface */
  headled_dev_ctx.write_reg = headled_platform_write;
 8044a28:	4b2c      	ldr	r3, [pc, #176]	; (8044adc <headled_init+0xc4>)
 8044a2a:	4a2d      	ldr	r2, [pc, #180]	; (8044ae0 <headled_init+0xc8>)
 8044a2c:	601a      	str	r2, [r3, #0]
  headled_dev_ctx.read_reg = headled_platform_read;
 8044a2e:	4b2b      	ldr	r3, [pc, #172]	; (8044adc <headled_init+0xc4>)
 8044a30:	4a2c      	ldr	r2, [pc, #176]	; (8044ae4 <headled_init+0xcc>)
 8044a32:	605a      	str	r2, [r3, #4]
  headled_dev_ctx.handle = &headled_init_parms->i2c_handle;
 8044a34:	4b28      	ldr	r3, [pc, #160]	; (8044ad8 <headled_init+0xc0>)
 8044a36:	681b      	ldr	r3, [r3, #0]
 8044a38:	3304      	adds	r3, #4
 8044a3a:	4a28      	ldr	r2, [pc, #160]	; (8044adc <headled_init+0xc4>)
 8044a3c:	6093      	str	r3, [r2, #8]

  /* hardware reset */
  headled_hw_reset(&headled_dev_ctx);
 8044a3e:	4827      	ldr	r0, [pc, #156]	; (8044adc <headled_init+0xc4>)
 8044a40:	f7ff ffc0 	bl	80449c4 <headled_hw_reset>

  //osDelay(1);
  /* aw21036 chip id */
  uint8_t reg_val, ver_val;
  headled_platform_read(headled_dev_ctx.handle, AW21036_REG_RESET, &reg_val, 1);
 8044a44:	4b25      	ldr	r3, [pc, #148]	; (8044adc <headled_init+0xc4>)
 8044a46:	6898      	ldr	r0, [r3, #8]
 8044a48:	f107 020f 	add.w	r2, r7, #15
 8044a4c:	2301      	movs	r3, #1
 8044a4e:	217f      	movs	r1, #127	; 0x7f
 8044a50:	f7ff feaa 	bl	80447a8 <headled_platform_read>
  printf("led_init reg_id 0x%x\r\n", reg_val);
 8044a54:	7bfb      	ldrb	r3, [r7, #15]
 8044a56:	4619      	mov	r1, r3
 8044a58:	4823      	ldr	r0, [pc, #140]	; (8044ae8 <headled_init+0xd0>)
 8044a5a:	f01b ff8b 	bl	8060974 <iprintf>
  osDelay(1);
 8044a5e:	2001      	movs	r0, #1
 8044a60:	f011 fb4b 	bl	80560fa <osDelay>
  headled_platform_read(headled_dev_ctx.handle, AW21036_REG_VER, &ver_val, 1);
 8044a64:	4b1d      	ldr	r3, [pc, #116]	; (8044adc <headled_init+0xc4>)
 8044a66:	6898      	ldr	r0, [r3, #8]
 8044a68:	f107 020e 	add.w	r2, r7, #14
 8044a6c:	2301      	movs	r3, #1
 8044a6e:	217e      	movs	r1, #126	; 0x7e
 8044a70:	f7ff fe9a 	bl	80447a8 <headled_platform_read>
  printf("led_init ver_id 0x%x\r\n", ver_val);
 8044a74:	7bbb      	ldrb	r3, [r7, #14]
 8044a76:	4619      	mov	r1, r3
 8044a78:	481c      	ldr	r0, [pc, #112]	; (8044aec <headled_init+0xd4>)
 8044a7a:	f01b ff7b 	bl	8060974 <iprintf>
  osDelay(1);
 8044a7e:	2001      	movs	r0, #1
 8044a80:	f011 fb3b 	bl	80560fa <osDelay>
  if (reg_val != AW21036_CHIPID || ver_val != AW21036_CHIP_VERSION)
 8044a84:	7bfb      	ldrb	r3, [r7, #15]
 8044a86:	2b18      	cmp	r3, #24
 8044a88:	d102      	bne.n	8044a90 <headled_init+0x78>
 8044a8a:	7bbb      	ldrb	r3, [r7, #14]
 8044a8c:	2ba8      	cmp	r3, #168	; 0xa8
 8044a8e:	d002      	beq.n	8044a96 <headled_init+0x7e>
    return SENSOR_FAILED;
 8044a90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8044a94:	e01b      	b.n	8044ace <headled_init+0xb6>
  maw21036.chipid = reg_val;
 8044a96:	7bfa      	ldrb	r2, [r7, #15]
 8044a98:	4b15      	ldr	r3, [pc, #84]	; (8044af0 <headled_init+0xd8>)
 8044a9a:	705a      	strb	r2, [r3, #1]
  maw21036.led_current = LED_CURRENT_MAX;
 8044a9c:	4b14      	ldr	r3, [pc, #80]	; (8044af0 <headled_init+0xd8>)
 8044a9e:	220f      	movs	r2, #15
 8044aa0:	611a      	str	r2, [r3, #16]
  maw21036.pwm_freq = 1;
 8044aa2:	4b13      	ldr	r3, [pc, #76]	; (8044af0 <headled_init+0xd8>)
 8044aa4:	2201      	movs	r2, #1
 8044aa6:	60da      	str	r2, [r3, #12]
  maw21036.imax = 1;
 8044aa8:	4b11      	ldr	r3, [pc, #68]	; (8044af0 <headled_init+0xd8>)
 8044aaa:	2201      	movs	r2, #1
 8044aac:	605a      	str	r2, [r3, #4]
  aw21036_led_init(headled_dev_ctx.handle, &maw21036);
 8044aae:	4b0b      	ldr	r3, [pc, #44]	; (8044adc <headled_init+0xc4>)
 8044ab0:	689b      	ldr	r3, [r3, #8]
 8044ab2:	490f      	ldr	r1, [pc, #60]	; (8044af0 <headled_init+0xd8>)
 8044ab4:	4618      	mov	r0, r3
 8044ab6:	f7ff ff4f 	bl	8044958 <aw21036_led_init>
  maw21036.effect = 1;
 8044aba:	4b0d      	ldr	r3, [pc, #52]	; (8044af0 <headled_init+0xd8>)
 8044abc:	2201      	movs	r2, #1
 8044abe:	751a      	strb	r2, [r3, #20]
  aw21036_cfg_update(headled_dev_ctx.handle, &maw21036);
 8044ac0:	4b06      	ldr	r3, [pc, #24]	; (8044adc <headled_init+0xc4>)
 8044ac2:	689b      	ldr	r3, [r3, #8]
 8044ac4:	490a      	ldr	r1, [pc, #40]	; (8044af0 <headled_init+0xd8>)
 8044ac6:	4618      	mov	r0, r3
 8044ac8:	f7ff ff22 	bl	8044910 <aw21036_cfg_update>
  return SENSOR_SUCCESS;
 8044acc:	2300      	movs	r3, #0
}
 8044ace:	4618      	mov	r0, r3
 8044ad0:	3710      	adds	r7, #16
 8044ad2:	46bd      	mov	sp, r7
 8044ad4:	bd80      	pop	{r7, pc}
 8044ad6:	bf00      	nop
 8044ad8:	20007fb4 	.word	0x20007fb4
 8044adc:	20007fa8 	.word	0x20007fa8
 8044ae0:	0804475d 	.word	0x0804475d
 8044ae4:	080447a9 	.word	0x080447a9
 8044ae8:	080655dc 	.word	0x080655dc
 8044aec:	080655f4 	.word	0x080655f4
 8044af0:	20007fbc 	.word	0x20007fbc

08044af4 <headled_enable>:

static int32_t headled_enable()
{
 8044af4:	b480      	push	{r7}
 8044af6:	b083      	sub	sp, #12
 8044af8:	af00      	add	r7, sp, #0
  int32_t ret = 0;
 8044afa:	2300      	movs	r3, #0
 8044afc:	607b      	str	r3, [r7, #4]

  if (sensor_activate_count == 0) {
 8044afe:	4b0a      	ldr	r3, [pc, #40]	; (8044b28 <headled_enable+0x34>)
 8044b00:	781b      	ldrb	r3, [r3, #0]
 8044b02:	2b00      	cmp	r3, #0
 8044b04:	d102      	bne.n	8044b0c <headled_enable+0x18>
    headled_activated = true;
 8044b06:	4b09      	ldr	r3, [pc, #36]	; (8044b2c <headled_enable+0x38>)
 8044b08:	2201      	movs	r2, #1
 8044b0a:	701a      	strb	r2, [r3, #0]
  }
  sensor_activate_count++;
 8044b0c:	4b06      	ldr	r3, [pc, #24]	; (8044b28 <headled_enable+0x34>)
 8044b0e:	781b      	ldrb	r3, [r3, #0]
 8044b10:	3301      	adds	r3, #1
 8044b12:	b2da      	uxtb	r2, r3
 8044b14:	4b04      	ldr	r3, [pc, #16]	; (8044b28 <headled_enable+0x34>)
 8044b16:	701a      	strb	r2, [r3, #0]
  return ret;
 8044b18:	687b      	ldr	r3, [r7, #4]
}
 8044b1a:	4618      	mov	r0, r3
 8044b1c:	370c      	adds	r7, #12
 8044b1e:	46bd      	mov	sp, r7
 8044b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044b24:	4770      	bx	lr
 8044b26:	bf00      	nop
 8044b28:	20007fb8 	.word	0x20007fb8
 8044b2c:	20007fb9 	.word	0x20007fb9

08044b30 <headled_disable>:

static int32_t headled_disable()
{
 8044b30:	b480      	push	{r7}
 8044b32:	b083      	sub	sp, #12
 8044b34:	af00      	add	r7, sp, #0
  int32_t ret = 0;
 8044b36:	2300      	movs	r3, #0
 8044b38:	607b      	str	r3, [r7, #4]
  sensor_activate_count--;
 8044b3a:	4b0a      	ldr	r3, [pc, #40]	; (8044b64 <headled_disable+0x34>)
 8044b3c:	781b      	ldrb	r3, [r3, #0]
 8044b3e:	3b01      	subs	r3, #1
 8044b40:	b2da      	uxtb	r2, r3
 8044b42:	4b08      	ldr	r3, [pc, #32]	; (8044b64 <headled_disable+0x34>)
 8044b44:	701a      	strb	r2, [r3, #0]
  if (sensor_activate_count == 0) {
 8044b46:	4b07      	ldr	r3, [pc, #28]	; (8044b64 <headled_disable+0x34>)
 8044b48:	781b      	ldrb	r3, [r3, #0]
 8044b4a:	2b00      	cmp	r3, #0
 8044b4c:	d102      	bne.n	8044b54 <headled_disable+0x24>
    headled_activated = false;
 8044b4e:	4b06      	ldr	r3, [pc, #24]	; (8044b68 <headled_disable+0x38>)
 8044b50:	2200      	movs	r2, #0
 8044b52:	701a      	strb	r2, [r3, #0]
  }
  return ret;
 8044b54:	687b      	ldr	r3, [r7, #4]
}
 8044b56:	4618      	mov	r0, r3
 8044b58:	370c      	adds	r7, #12
 8044b5a:	46bd      	mov	sp, r7
 8044b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044b60:	4770      	bx	lr
 8044b62:	bf00      	nop
 8044b64:	20007fb8 	.word	0x20007fb8
 8044b68:	20007fb9 	.word	0x20007fb9

08044b6c <headled_activate>:

int headled_activate(bool activate)
{
 8044b6c:	b580      	push	{r7, lr}
 8044b6e:	b084      	sub	sp, #16
 8044b70:	af00      	add	r7, sp, #0
 8044b72:	4603      	mov	r3, r0
 8044b74:	71fb      	strb	r3, [r7, #7]
  int res = 0;
 8044b76:	2300      	movs	r3, #0
 8044b78:	60fb      	str	r3, [r7, #12]
  printf("head led_activate: %d\r\n", activate);
 8044b7a:	79fb      	ldrb	r3, [r7, #7]
 8044b7c:	4619      	mov	r1, r3
 8044b7e:	4809      	ldr	r0, [pc, #36]	; (8044ba4 <headled_activate+0x38>)
 8044b80:	f01b fef8 	bl	8060974 <iprintf>
  if (activate) {
 8044b84:	79fb      	ldrb	r3, [r7, #7]
 8044b86:	2b00      	cmp	r3, #0
 8044b88:	d003      	beq.n	8044b92 <headled_activate+0x26>
    res = headled_enable();
 8044b8a:	f7ff ffb3 	bl	8044af4 <headled_enable>
 8044b8e:	60f8      	str	r0, [r7, #12]
 8044b90:	e002      	b.n	8044b98 <headled_activate+0x2c>
  } else {
    res = headled_disable();
 8044b92:	f7ff ffcd 	bl	8044b30 <headled_disable>
 8044b96:	60f8      	str	r0, [r7, #12]
  }
  return res;
 8044b98:	68fb      	ldr	r3, [r7, #12]
}
 8044b9a:	4618      	mov	r0, r3
 8044b9c:	3710      	adds	r7, #16
 8044b9e:	46bd      	mov	sp, r7
 8044ba0:	bd80      	pop	{r7, pc}
 8044ba2:	bf00      	nop
 8044ba4:	0806560c 	.word	0x0806560c

08044ba8 <headled_init_complete>:

int headled_init_complete(void *para)
{
 8044ba8:	b480      	push	{r7}
 8044baa:	b083      	sub	sp, #12
 8044bac:	af00      	add	r7, sp, #0
 8044bae:	6078      	str	r0, [r7, #4]
  //send init complete event to smgr?
  return SENSOR_SUCCESS;
 8044bb0:	2300      	movs	r3, #0
}
 8044bb2:	4618      	mov	r0, r3
 8044bb4:	370c      	adds	r7, #12
 8044bb6:	46bd      	mov	sp, r7
 8044bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044bbc:	4770      	bx	lr
	...

08044bc0 <headled_config>:

int headled_config(uint8_t config, void *para)
{
 8044bc0:	b580      	push	{r7, lr}
 8044bc2:	b084      	sub	sp, #16
 8044bc4:	af00      	add	r7, sp, #0
 8044bc6:	4603      	mov	r3, r0
 8044bc8:	6039      	str	r1, [r7, #0]
 8044bca:	71fb      	strb	r3, [r7, #7]
  //send init complete event to smgr?

  uint8_t *config_data = NULL;
 8044bcc:	2300      	movs	r3, #0
 8044bce:	60fb      	str	r3, [r7, #12]
  config_data = (uint8_t *) para;
 8044bd0:	683b      	ldr	r3, [r7, #0]
 8044bd2:	60fb      	str	r3, [r7, #12]

  switch (config) {
 8044bd4:	79fb      	ldrb	r3, [r7, #7]
 8044bd6:	2b06      	cmp	r3, #6
 8044bd8:	d105      	bne.n	8044be6 <headled_config+0x26>
  case SENSOR_CONFIG_TIMEOUT:
    printf("@@@SENSOR_CONFIG_TIMEOUT!\r\n");
 8044bda:	482a      	ldr	r0, [pc, #168]	; (8044c84 <headled_config+0xc4>)
 8044bdc:	f01b ff66 	bl	8060aac <puts>
    headled_flow_water();
 8044be0:	f000 f86c 	bl	8044cbc <headled_flow_water>
    break;
 8044be4:	e048      	b.n	8044c78 <headled_config+0xb8>
  default:
    maw21036.effect = 0;
 8044be6:	4b28      	ldr	r3, [pc, #160]	; (8044c88 <headled_config+0xc8>)
 8044be8:	2200      	movs	r2, #0
 8044bea:	751a      	strb	r2, [r3, #20]
    aw21036_cfg_update(headled_dev_ctx.handle, &maw21036);
 8044bec:	4b27      	ldr	r3, [pc, #156]	; (8044c8c <headled_config+0xcc>)
 8044bee:	689b      	ldr	r3, [r3, #8]
 8044bf0:	4925      	ldr	r1, [pc, #148]	; (8044c88 <headled_config+0xc8>)
 8044bf2:	4618      	mov	r0, r3
 8044bf4:	f7ff fe8c 	bl	8044910 <aw21036_cfg_update>
    uint8_t config_type = config_data[0] & 0x0F;
 8044bf8:	68fb      	ldr	r3, [r7, #12]
 8044bfa:	781b      	ldrb	r3, [r3, #0]
 8044bfc:	f003 030f 	and.w	r3, r3, #15
 8044c00:	72fb      	strb	r3, [r7, #11]
    if (((config_data[0] >> 4) & 0x0F) == 0) {
 8044c02:	68fb      	ldr	r3, [r7, #12]
 8044c04:	781b      	ldrb	r3, [r3, #0]
 8044c06:	091b      	lsrs	r3, r3, #4
 8044c08:	b2db      	uxtb	r3, r3
 8044c0a:	f003 030f 	and.w	r3, r3, #15
 8044c0e:	2b00      	cmp	r3, #0
 8044c10:	d131      	bne.n	8044c76 <headled_config+0xb6>
      //0 off;1 white;2 red;3 green;4 blue; 5 white breathforever; 6 red breathforever; 7 green breathforever; 8 blue breathforever
      if (config_type == FLOW_WATER_COFIG_TYPE) {
 8044c12:	7afb      	ldrb	r3, [r7, #11]
 8044c14:	2b0f      	cmp	r3, #15
 8044c16:	d10b      	bne.n	8044c30 <headled_config+0x70>
        sensor_op_timer_enable(tim3);
 8044c18:	4b1d      	ldr	r3, [pc, #116]	; (8044c90 <headled_config+0xd0>)
 8044c1a:	681b      	ldr	r3, [r3, #0]
 8044c1c:	4618      	mov	r0, r3
 8044c1e:	f008 f803 	bl	804cc28 <sensor_op_timer_enable>
        head_flow_water_effect = true;
 8044c22:	4b1c      	ldr	r3, [pc, #112]	; (8044c94 <headled_config+0xd4>)
 8044c24:	2201      	movs	r2, #1
 8044c26:	701a      	strb	r2, [r3, #0]
        head_flow_water_tick = 0;
 8044c28:	4b1b      	ldr	r3, [pc, #108]	; (8044c98 <headled_config+0xd8>)
 8044c2a:	2200      	movs	r2, #0
 8044c2c:	701a      	strb	r2, [r3, #0]
          maw21036.effect = 1;
          aw21036_cfg_update(headled_dev_ctx.handle, &maw21036);
        }
      }
    }
    break;
 8044c2e:	e022      	b.n	8044c76 <headled_config+0xb6>
        sensor_op_timer_disable(tim3);
 8044c30:	4b17      	ldr	r3, [pc, #92]	; (8044c90 <headled_config+0xd0>)
 8044c32:	681b      	ldr	r3, [r3, #0]
 8044c34:	4618      	mov	r0, r3
 8044c36:	f008 f81d 	bl	804cc74 <sensor_op_timer_disable>
        head_flow_water_effect = false;
 8044c3a:	4b16      	ldr	r3, [pc, #88]	; (8044c94 <headled_config+0xd4>)
 8044c3c:	2200      	movs	r2, #0
 8044c3e:	701a      	strb	r2, [r3, #0]
        maw21036.effect = config_type;
 8044c40:	4a11      	ldr	r2, [pc, #68]	; (8044c88 <headled_config+0xc8>)
 8044c42:	7afb      	ldrb	r3, [r7, #11]
 8044c44:	7513      	strb	r3, [r2, #20]
        if (maw21036.effect < ARRAY_SIZE(aw21036_cfg_array))
 8044c46:	4b10      	ldr	r3, [pc, #64]	; (8044c88 <headled_config+0xc8>)
 8044c48:	7d1b      	ldrb	r3, [r3, #20]
 8044c4a:	2b0b      	cmp	r3, #11
 8044c4c:	d806      	bhi.n	8044c5c <headled_config+0x9c>
          aw21036_cfg_update(headled_dev_ctx.handle, &maw21036);
 8044c4e:	4b0f      	ldr	r3, [pc, #60]	; (8044c8c <headled_config+0xcc>)
 8044c50:	689b      	ldr	r3, [r3, #8]
 8044c52:	490d      	ldr	r1, [pc, #52]	; (8044c88 <headled_config+0xc8>)
 8044c54:	4618      	mov	r0, r3
 8044c56:	f7ff fe5b 	bl	8044910 <aw21036_cfg_update>
    break;
 8044c5a:	e00c      	b.n	8044c76 <headled_config+0xb6>
          printf("%s: effect out of range!\r\n", __func__);
 8044c5c:	490f      	ldr	r1, [pc, #60]	; (8044c9c <headled_config+0xdc>)
 8044c5e:	4810      	ldr	r0, [pc, #64]	; (8044ca0 <headled_config+0xe0>)
 8044c60:	f01b fe88 	bl	8060974 <iprintf>
          maw21036.effect = 1;
 8044c64:	4b08      	ldr	r3, [pc, #32]	; (8044c88 <headled_config+0xc8>)
 8044c66:	2201      	movs	r2, #1
 8044c68:	751a      	strb	r2, [r3, #20]
          aw21036_cfg_update(headled_dev_ctx.handle, &maw21036);
 8044c6a:	4b08      	ldr	r3, [pc, #32]	; (8044c8c <headled_config+0xcc>)
 8044c6c:	689b      	ldr	r3, [r3, #8]
 8044c6e:	4906      	ldr	r1, [pc, #24]	; (8044c88 <headled_config+0xc8>)
 8044c70:	4618      	mov	r0, r3
 8044c72:	f7ff fe4d 	bl	8044910 <aw21036_cfg_update>
    break;
 8044c76:	bf00      	nop
  }
  return SENSOR_SUCCESS;
 8044c78:	2300      	movs	r3, #0
}
 8044c7a:	4618      	mov	r0, r3
 8044c7c:	3710      	adds	r7, #16
 8044c7e:	46bd      	mov	sp, r7
 8044c80:	bd80      	pop	{r7, pc}
 8044c82:	bf00      	nop
 8044c84:	08065624 	.word	0x08065624
 8044c88:	20007fbc 	.word	0x20007fbc
 8044c8c:	20007fa8 	.word	0x20007fa8
 8044c90:	2001bce8 	.word	0x2001bce8
 8044c94:	20007fbb 	.word	0x20007fbb
 8044c98:	20007fba 	.word	0x20007fba
 8044c9c:	08067860 	.word	0x08067860
 8044ca0:	08065640 	.word	0x08065640

08044ca4 <headled_publish_config_resp>:

int headled_publish_config_resp(void *para)
{
 8044ca4:	b480      	push	{r7}
 8044ca6:	b083      	sub	sp, #12
 8044ca8:	af00      	add	r7, sp, #0
 8044caa:	6078      	str	r0, [r7, #4]
  //send init complete event to smgr?
  return SENSOR_SUCCESS;
 8044cac:	2300      	movs	r3, #0
}
 8044cae:	4618      	mov	r0, r3
 8044cb0:	370c      	adds	r7, #12
 8044cb2:	46bd      	mov	sp, r7
 8044cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044cb8:	4770      	bx	lr
	...

08044cbc <headled_flow_water>:

void headled_flow_water(void)
{
 8044cbc:	b580      	push	{r7, lr}
 8044cbe:	af00      	add	r7, sp, #0
  //printf("Enter headled_flow_water!");
  if (head_flow_water_effect) {
 8044cc0:	4b7e      	ldr	r3, [pc, #504]	; (8044ebc <headled_flow_water+0x200>)
 8044cc2:	781b      	ldrb	r3, [r3, #0]
 8044cc4:	2b00      	cmp	r3, #0
 8044cc6:	f000 8146 	beq.w	8044f56 <headled_flow_water+0x29a>
    if (first_start_head_flow_water) {
 8044cca:	4b7d      	ldr	r3, [pc, #500]	; (8044ec0 <headled_flow_water+0x204>)
 8044ccc:	781b      	ldrb	r3, [r3, #0]
 8044cce:	2b00      	cmp	r3, #0
 8044cd0:	d00c      	beq.n	8044cec <headled_flow_water+0x30>
      //printf("head_flow_water_effect:%d !\r\n",head_flow_water_effect);
      first_start_head_flow_water = false;
 8044cd2:	4b7b      	ldr	r3, [pc, #492]	; (8044ec0 <headled_flow_water+0x204>)
 8044cd4:	2200      	movs	r2, #0
 8044cd6:	701a      	strb	r2, [r3, #0]
      aw21036_update_cfg_array(headled_dev_ctx.handle,
 8044cd8:	4b7a      	ldr	r3, [pc, #488]	; (8044ec4 <headled_flow_water+0x208>)
 8044cda:	689b      	ldr	r3, [r3, #8]
 8044cdc:	4a7a      	ldr	r2, [pc, #488]	; (8044ec8 <headled_flow_water+0x20c>)
 8044cde:	6891      	ldr	r1, [r2, #8]
 8044ce0:	4a79      	ldr	r2, [pc, #484]	; (8044ec8 <headled_flow_water+0x20c>)
 8044ce2:	68d2      	ldr	r2, [r2, #12]
 8044ce4:	4618      	mov	r0, r3
 8044ce6:	f7ff fdef 	bl	80448c8 <aw21036_update_cfg_array>

  } else {

  }

}
 8044cea:	e134      	b.n	8044f56 <headled_flow_water+0x29a>
      if (head_flow_water_tick >= 0 && head_flow_water_tick < 9) {
 8044cec:	4b77      	ldr	r3, [pc, #476]	; (8044ecc <headled_flow_water+0x210>)
 8044cee:	781b      	ldrb	r3, [r3, #0]
 8044cf0:	2b08      	cmp	r3, #8
 8044cf2:	d825      	bhi.n	8044d40 <headled_flow_water+0x84>
        headled_platform_write(headled_dev_ctx.handle,
 8044cf4:	4b73      	ldr	r3, [pc, #460]	; (8044ec4 <headled_flow_water+0x208>)
 8044cf6:	6898      	ldr	r0, [r3, #8]
 8044cf8:	4b74      	ldr	r3, [pc, #464]	; (8044ecc <headled_flow_water+0x210>)
 8044cfa:	781b      	ldrb	r3, [r3, #0]
 8044cfc:	461a      	mov	r2, r3
 8044cfe:	4b74      	ldr	r3, [pc, #464]	; (8044ed0 <headled_flow_water+0x214>)
 8044d00:	5c99      	ldrb	r1, [r3, r2]
 8044d02:	2301      	movs	r3, #1
 8044d04:	4a73      	ldr	r2, [pc, #460]	; (8044ed4 <headled_flow_water+0x218>)
 8044d06:	f7ff fd29 	bl	804475c <headled_platform_write>
        headled_platform_write(headled_dev_ctx.handle,
 8044d0a:	4b6e      	ldr	r3, [pc, #440]	; (8044ec4 <headled_flow_water+0x208>)
 8044d0c:	6898      	ldr	r0, [r3, #8]
                               LED_R_COL_REG[head_flow_water_tick] - 1,
 8044d0e:	4b6f      	ldr	r3, [pc, #444]	; (8044ecc <headled_flow_water+0x210>)
 8044d10:	781b      	ldrb	r3, [r3, #0]
 8044d12:	461a      	mov	r2, r3
 8044d14:	4b6e      	ldr	r3, [pc, #440]	; (8044ed0 <headled_flow_water+0x214>)
 8044d16:	5c9b      	ldrb	r3, [r3, r2]
        headled_platform_write(headled_dev_ctx.handle,
 8044d18:	3b01      	subs	r3, #1
 8044d1a:	b2d9      	uxtb	r1, r3
 8044d1c:	2301      	movs	r3, #1
 8044d1e:	4a6e      	ldr	r2, [pc, #440]	; (8044ed8 <headled_flow_water+0x21c>)
 8044d20:	f7ff fd1c 	bl	804475c <headled_platform_write>
        headled_platform_write(headled_dev_ctx.handle,
 8044d24:	4b67      	ldr	r3, [pc, #412]	; (8044ec4 <headled_flow_water+0x208>)
 8044d26:	6898      	ldr	r0, [r3, #8]
                               LED_R_COL_REG[head_flow_water_tick] - 2,
 8044d28:	4b68      	ldr	r3, [pc, #416]	; (8044ecc <headled_flow_water+0x210>)
 8044d2a:	781b      	ldrb	r3, [r3, #0]
 8044d2c:	461a      	mov	r2, r3
 8044d2e:	4b68      	ldr	r3, [pc, #416]	; (8044ed0 <headled_flow_water+0x214>)
 8044d30:	5c9b      	ldrb	r3, [r3, r2]
        headled_platform_write(headled_dev_ctx.handle,
 8044d32:	3b02      	subs	r3, #2
 8044d34:	b2d9      	uxtb	r1, r3
 8044d36:	2301      	movs	r3, #1
 8044d38:	4a67      	ldr	r2, [pc, #412]	; (8044ed8 <headled_flow_water+0x21c>)
 8044d3a:	f7ff fd0f 	bl	804475c <headled_platform_write>
 8044d3e:	e0fd      	b.n	8044f3c <headled_flow_water+0x280>
      } else if (head_flow_water_tick >= 9 && head_flow_water_tick < 18) {
 8044d40:	4b62      	ldr	r3, [pc, #392]	; (8044ecc <headled_flow_water+0x210>)
 8044d42:	781b      	ldrb	r3, [r3, #0]
 8044d44:	2b08      	cmp	r3, #8
 8044d46:	d92c      	bls.n	8044da2 <headled_flow_water+0xe6>
 8044d48:	4b60      	ldr	r3, [pc, #384]	; (8044ecc <headled_flow_water+0x210>)
 8044d4a:	781b      	ldrb	r3, [r3, #0]
 8044d4c:	2b11      	cmp	r3, #17
 8044d4e:	d828      	bhi.n	8044da2 <headled_flow_water+0xe6>
        headled_platform_write(headled_dev_ctx.handle,
 8044d50:	4b5c      	ldr	r3, [pc, #368]	; (8044ec4 <headled_flow_water+0x208>)
 8044d52:	6898      	ldr	r0, [r3, #8]
                               LED_R_COL_REG[17 - head_flow_water_tick],
 8044d54:	4b5d      	ldr	r3, [pc, #372]	; (8044ecc <headled_flow_water+0x210>)
 8044d56:	781b      	ldrb	r3, [r3, #0]
 8044d58:	f1c3 0311 	rsb	r3, r3, #17
        headled_platform_write(headled_dev_ctx.handle,
 8044d5c:	4a5c      	ldr	r2, [pc, #368]	; (8044ed0 <headled_flow_water+0x214>)
 8044d5e:	5cd1      	ldrb	r1, [r2, r3]
 8044d60:	2301      	movs	r3, #1
 8044d62:	4a5d      	ldr	r2, [pc, #372]	; (8044ed8 <headled_flow_water+0x21c>)
 8044d64:	f7ff fcfa 	bl	804475c <headled_platform_write>
        headled_platform_write(headled_dev_ctx.handle,
 8044d68:	4b56      	ldr	r3, [pc, #344]	; (8044ec4 <headled_flow_water+0x208>)
 8044d6a:	6898      	ldr	r0, [r3, #8]
                               LED_R_COL_REG[17 - head_flow_water_tick] - 1,
 8044d6c:	4b57      	ldr	r3, [pc, #348]	; (8044ecc <headled_flow_water+0x210>)
 8044d6e:	781b      	ldrb	r3, [r3, #0]
 8044d70:	f1c3 0311 	rsb	r3, r3, #17
 8044d74:	4a56      	ldr	r2, [pc, #344]	; (8044ed0 <headled_flow_water+0x214>)
 8044d76:	5cd3      	ldrb	r3, [r2, r3]
        headled_platform_write(headled_dev_ctx.handle,
 8044d78:	3b01      	subs	r3, #1
 8044d7a:	b2d9      	uxtb	r1, r3
 8044d7c:	2301      	movs	r3, #1
 8044d7e:	4a55      	ldr	r2, [pc, #340]	; (8044ed4 <headled_flow_water+0x218>)
 8044d80:	f7ff fcec 	bl	804475c <headled_platform_write>
        headled_platform_write(headled_dev_ctx.handle,
 8044d84:	4b4f      	ldr	r3, [pc, #316]	; (8044ec4 <headled_flow_water+0x208>)
 8044d86:	6898      	ldr	r0, [r3, #8]
                               LED_R_COL_REG[17 - head_flow_water_tick] - 2,
 8044d88:	4b50      	ldr	r3, [pc, #320]	; (8044ecc <headled_flow_water+0x210>)
 8044d8a:	781b      	ldrb	r3, [r3, #0]
 8044d8c:	f1c3 0311 	rsb	r3, r3, #17
 8044d90:	4a4f      	ldr	r2, [pc, #316]	; (8044ed0 <headled_flow_water+0x214>)
 8044d92:	5cd3      	ldrb	r3, [r2, r3]
        headled_platform_write(headled_dev_ctx.handle,
 8044d94:	3b02      	subs	r3, #2
 8044d96:	b2d9      	uxtb	r1, r3
 8044d98:	2301      	movs	r3, #1
 8044d9a:	4a4f      	ldr	r2, [pc, #316]	; (8044ed8 <headled_flow_water+0x21c>)
 8044d9c:	f7ff fcde 	bl	804475c <headled_platform_write>
 8044da0:	e0cc      	b.n	8044f3c <headled_flow_water+0x280>
      } else if (head_flow_water_tick >= 18 && head_flow_water_tick < 27) {
 8044da2:	4b4a      	ldr	r3, [pc, #296]	; (8044ecc <headled_flow_water+0x210>)
 8044da4:	781b      	ldrb	r3, [r3, #0]
 8044da6:	2b11      	cmp	r3, #17
 8044da8:	d929      	bls.n	8044dfe <headled_flow_water+0x142>
 8044daa:	4b48      	ldr	r3, [pc, #288]	; (8044ecc <headled_flow_water+0x210>)
 8044dac:	781b      	ldrb	r3, [r3, #0]
 8044dae:	2b1a      	cmp	r3, #26
 8044db0:	d825      	bhi.n	8044dfe <headled_flow_water+0x142>
        headled_platform_write(headled_dev_ctx.handle,
 8044db2:	4b44      	ldr	r3, [pc, #272]	; (8044ec4 <headled_flow_water+0x208>)
 8044db4:	6898      	ldr	r0, [r3, #8]
                               LED_R_COL_REG[head_flow_water_tick - 18],
 8044db6:	4b45      	ldr	r3, [pc, #276]	; (8044ecc <headled_flow_water+0x210>)
 8044db8:	781b      	ldrb	r3, [r3, #0]
 8044dba:	3b12      	subs	r3, #18
        headled_platform_write(headled_dev_ctx.handle,
 8044dbc:	4a44      	ldr	r2, [pc, #272]	; (8044ed0 <headled_flow_water+0x214>)
 8044dbe:	5cd1      	ldrb	r1, [r2, r3]
 8044dc0:	2301      	movs	r3, #1
 8044dc2:	4a45      	ldr	r2, [pc, #276]	; (8044ed8 <headled_flow_water+0x21c>)
 8044dc4:	f7ff fcca 	bl	804475c <headled_platform_write>
        headled_platform_write(headled_dev_ctx.handle,
 8044dc8:	4b3e      	ldr	r3, [pc, #248]	; (8044ec4 <headled_flow_water+0x208>)
 8044dca:	6898      	ldr	r0, [r3, #8]
                               LED_R_COL_REG[head_flow_water_tick - 18] - 1,
 8044dcc:	4b3f      	ldr	r3, [pc, #252]	; (8044ecc <headled_flow_water+0x210>)
 8044dce:	781b      	ldrb	r3, [r3, #0]
 8044dd0:	3b12      	subs	r3, #18
 8044dd2:	4a3f      	ldr	r2, [pc, #252]	; (8044ed0 <headled_flow_water+0x214>)
 8044dd4:	5cd3      	ldrb	r3, [r2, r3]
        headled_platform_write(headled_dev_ctx.handle,
 8044dd6:	3b01      	subs	r3, #1
 8044dd8:	b2d9      	uxtb	r1, r3
 8044dda:	2301      	movs	r3, #1
 8044ddc:	4a3e      	ldr	r2, [pc, #248]	; (8044ed8 <headled_flow_water+0x21c>)
 8044dde:	f7ff fcbd 	bl	804475c <headled_platform_write>
        headled_platform_write(headled_dev_ctx.handle,
 8044de2:	4b38      	ldr	r3, [pc, #224]	; (8044ec4 <headled_flow_water+0x208>)
 8044de4:	6898      	ldr	r0, [r3, #8]
                               LED_R_COL_REG[head_flow_water_tick - 18] - 2,
 8044de6:	4b39      	ldr	r3, [pc, #228]	; (8044ecc <headled_flow_water+0x210>)
 8044de8:	781b      	ldrb	r3, [r3, #0]
 8044dea:	3b12      	subs	r3, #18
 8044dec:	4a38      	ldr	r2, [pc, #224]	; (8044ed0 <headled_flow_water+0x214>)
 8044dee:	5cd3      	ldrb	r3, [r2, r3]
        headled_platform_write(headled_dev_ctx.handle,
 8044df0:	3b02      	subs	r3, #2
 8044df2:	b2d9      	uxtb	r1, r3
 8044df4:	2301      	movs	r3, #1
 8044df6:	4a37      	ldr	r2, [pc, #220]	; (8044ed4 <headled_flow_water+0x218>)
 8044df8:	f7ff fcb0 	bl	804475c <headled_platform_write>
 8044dfc:	e09e      	b.n	8044f3c <headled_flow_water+0x280>
      } else if (head_flow_water_tick >= 27 && head_flow_water_tick < 36) {
 8044dfe:	4b33      	ldr	r3, [pc, #204]	; (8044ecc <headled_flow_water+0x210>)
 8044e00:	781b      	ldrb	r3, [r3, #0]
 8044e02:	2b1a      	cmp	r3, #26
 8044e04:	d92c      	bls.n	8044e60 <headled_flow_water+0x1a4>
 8044e06:	4b31      	ldr	r3, [pc, #196]	; (8044ecc <headled_flow_water+0x210>)
 8044e08:	781b      	ldrb	r3, [r3, #0]
 8044e0a:	2b23      	cmp	r3, #35	; 0x23
 8044e0c:	d828      	bhi.n	8044e60 <headled_flow_water+0x1a4>
        headled_platform_write(headled_dev_ctx.handle,
 8044e0e:	4b2d      	ldr	r3, [pc, #180]	; (8044ec4 <headled_flow_water+0x208>)
 8044e10:	6898      	ldr	r0, [r3, #8]
                               LED_R_COL_REG[35 - head_flow_water_tick],
 8044e12:	4b2e      	ldr	r3, [pc, #184]	; (8044ecc <headled_flow_water+0x210>)
 8044e14:	781b      	ldrb	r3, [r3, #0]
 8044e16:	f1c3 0323 	rsb	r3, r3, #35	; 0x23
        headled_platform_write(headled_dev_ctx.handle,
 8044e1a:	4a2d      	ldr	r2, [pc, #180]	; (8044ed0 <headled_flow_water+0x214>)
 8044e1c:	5cd1      	ldrb	r1, [r2, r3]
 8044e1e:	2301      	movs	r3, #1
 8044e20:	4a2c      	ldr	r2, [pc, #176]	; (8044ed4 <headled_flow_water+0x218>)
 8044e22:	f7ff fc9b 	bl	804475c <headled_platform_write>
        headled_platform_write(headled_dev_ctx.handle,
 8044e26:	4b27      	ldr	r3, [pc, #156]	; (8044ec4 <headled_flow_water+0x208>)
 8044e28:	6898      	ldr	r0, [r3, #8]
                               LED_R_COL_REG[35 - head_flow_water_tick] - 1,
 8044e2a:	4b28      	ldr	r3, [pc, #160]	; (8044ecc <headled_flow_water+0x210>)
 8044e2c:	781b      	ldrb	r3, [r3, #0]
 8044e2e:	f1c3 0323 	rsb	r3, r3, #35	; 0x23
 8044e32:	4a27      	ldr	r2, [pc, #156]	; (8044ed0 <headled_flow_water+0x214>)
 8044e34:	5cd3      	ldrb	r3, [r2, r3]
        headled_platform_write(headled_dev_ctx.handle,
 8044e36:	3b01      	subs	r3, #1
 8044e38:	b2d9      	uxtb	r1, r3
 8044e3a:	2301      	movs	r3, #1
 8044e3c:	4a26      	ldr	r2, [pc, #152]	; (8044ed8 <headled_flow_water+0x21c>)
 8044e3e:	f7ff fc8d 	bl	804475c <headled_platform_write>
        headled_platform_write(headled_dev_ctx.handle,
 8044e42:	4b20      	ldr	r3, [pc, #128]	; (8044ec4 <headled_flow_water+0x208>)
 8044e44:	6898      	ldr	r0, [r3, #8]
                               LED_R_COL_REG[35 - head_flow_water_tick] - 2,
 8044e46:	4b21      	ldr	r3, [pc, #132]	; (8044ecc <headled_flow_water+0x210>)
 8044e48:	781b      	ldrb	r3, [r3, #0]
 8044e4a:	f1c3 0323 	rsb	r3, r3, #35	; 0x23
 8044e4e:	4a20      	ldr	r2, [pc, #128]	; (8044ed0 <headled_flow_water+0x214>)
 8044e50:	5cd3      	ldrb	r3, [r2, r3]
        headled_platform_write(headled_dev_ctx.handle,
 8044e52:	3b02      	subs	r3, #2
 8044e54:	b2d9      	uxtb	r1, r3
 8044e56:	2301      	movs	r3, #1
 8044e58:	4a1f      	ldr	r2, [pc, #124]	; (8044ed8 <headled_flow_water+0x21c>)
 8044e5a:	f7ff fc7f 	bl	804475c <headled_platform_write>
 8044e5e:	e06d      	b.n	8044f3c <headled_flow_water+0x280>
      } else if (head_flow_water_tick >= 36 && head_flow_water_tick < 45) {
 8044e60:	4b1a      	ldr	r3, [pc, #104]	; (8044ecc <headled_flow_water+0x210>)
 8044e62:	781b      	ldrb	r3, [r3, #0]
 8044e64:	2b23      	cmp	r3, #35	; 0x23
 8044e66:	d939      	bls.n	8044edc <headled_flow_water+0x220>
 8044e68:	4b18      	ldr	r3, [pc, #96]	; (8044ecc <headled_flow_water+0x210>)
 8044e6a:	781b      	ldrb	r3, [r3, #0]
 8044e6c:	2b2c      	cmp	r3, #44	; 0x2c
 8044e6e:	d835      	bhi.n	8044edc <headled_flow_water+0x220>
        headled_platform_write(headled_dev_ctx.handle,
 8044e70:	4b14      	ldr	r3, [pc, #80]	; (8044ec4 <headled_flow_water+0x208>)
 8044e72:	6898      	ldr	r0, [r3, #8]
                               LED_R_COL_REG[head_flow_water_tick - 36],
 8044e74:	4b15      	ldr	r3, [pc, #84]	; (8044ecc <headled_flow_water+0x210>)
 8044e76:	781b      	ldrb	r3, [r3, #0]
 8044e78:	3b24      	subs	r3, #36	; 0x24
        headled_platform_write(headled_dev_ctx.handle,
 8044e7a:	4a15      	ldr	r2, [pc, #84]	; (8044ed0 <headled_flow_water+0x214>)
 8044e7c:	5cd1      	ldrb	r1, [r2, r3]
 8044e7e:	2301      	movs	r3, #1
 8044e80:	4a15      	ldr	r2, [pc, #84]	; (8044ed8 <headled_flow_water+0x21c>)
 8044e82:	f7ff fc6b 	bl	804475c <headled_platform_write>
        headled_platform_write(headled_dev_ctx.handle,
 8044e86:	4b0f      	ldr	r3, [pc, #60]	; (8044ec4 <headled_flow_water+0x208>)
 8044e88:	6898      	ldr	r0, [r3, #8]
                               LED_R_COL_REG[head_flow_water_tick - 36] - 1,
 8044e8a:	4b10      	ldr	r3, [pc, #64]	; (8044ecc <headled_flow_water+0x210>)
 8044e8c:	781b      	ldrb	r3, [r3, #0]
 8044e8e:	3b24      	subs	r3, #36	; 0x24
 8044e90:	4a0f      	ldr	r2, [pc, #60]	; (8044ed0 <headled_flow_water+0x214>)
 8044e92:	5cd3      	ldrb	r3, [r2, r3]
        headled_platform_write(headled_dev_ctx.handle,
 8044e94:	3b01      	subs	r3, #1
 8044e96:	b2d9      	uxtb	r1, r3
 8044e98:	2301      	movs	r3, #1
 8044e9a:	4a0e      	ldr	r2, [pc, #56]	; (8044ed4 <headled_flow_water+0x218>)
 8044e9c:	f7ff fc5e 	bl	804475c <headled_platform_write>
        headled_platform_write(headled_dev_ctx.handle,
 8044ea0:	4b08      	ldr	r3, [pc, #32]	; (8044ec4 <headled_flow_water+0x208>)
 8044ea2:	6898      	ldr	r0, [r3, #8]
                               LED_R_COL_REG[head_flow_water_tick - 36] - 2,
 8044ea4:	4b09      	ldr	r3, [pc, #36]	; (8044ecc <headled_flow_water+0x210>)
 8044ea6:	781b      	ldrb	r3, [r3, #0]
 8044ea8:	3b24      	subs	r3, #36	; 0x24
 8044eaa:	4a09      	ldr	r2, [pc, #36]	; (8044ed0 <headled_flow_water+0x214>)
 8044eac:	5cd3      	ldrb	r3, [r2, r3]
        headled_platform_write(headled_dev_ctx.handle,
 8044eae:	3b02      	subs	r3, #2
 8044eb0:	b2d9      	uxtb	r1, r3
 8044eb2:	2301      	movs	r3, #1
 8044eb4:	4a08      	ldr	r2, [pc, #32]	; (8044ed8 <headled_flow_water+0x21c>)
 8044eb6:	f7ff fc51 	bl	804475c <headled_platform_write>
 8044eba:	e03f      	b.n	8044f3c <headled_flow_water+0x280>
 8044ebc:	20007fbb 	.word	0x20007fbb
 8044ec0:	200077f4 	.word	0x200077f4
 8044ec4:	20007fa8 	.word	0x20007fa8
 8044ec8:	200077f8 	.word	0x200077f8
 8044ecc:	20007fba 	.word	0x20007fba
 8044ed0:	20007040 	.word	0x20007040
 8044ed4:	2000703d 	.word	0x2000703d
 8044ed8:	2000703c 	.word	0x2000703c
      } else if (head_flow_water_tick >= 45 && head_flow_water_tick < 54) {
 8044edc:	4b1f      	ldr	r3, [pc, #124]	; (8044f5c <headled_flow_water+0x2a0>)
 8044ede:	781b      	ldrb	r3, [r3, #0]
 8044ee0:	2b2c      	cmp	r3, #44	; 0x2c
 8044ee2:	d92b      	bls.n	8044f3c <headled_flow_water+0x280>
 8044ee4:	4b1d      	ldr	r3, [pc, #116]	; (8044f5c <headled_flow_water+0x2a0>)
 8044ee6:	781b      	ldrb	r3, [r3, #0]
 8044ee8:	2b35      	cmp	r3, #53	; 0x35
 8044eea:	d827      	bhi.n	8044f3c <headled_flow_water+0x280>
        headled_platform_write(headled_dev_ctx.handle,
 8044eec:	4b1c      	ldr	r3, [pc, #112]	; (8044f60 <headled_flow_water+0x2a4>)
 8044eee:	6898      	ldr	r0, [r3, #8]
                               LED_R_COL_REG[53 - head_flow_water_tick],
 8044ef0:	4b1a      	ldr	r3, [pc, #104]	; (8044f5c <headled_flow_water+0x2a0>)
 8044ef2:	781b      	ldrb	r3, [r3, #0]
 8044ef4:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
        headled_platform_write(headled_dev_ctx.handle,
 8044ef8:	4a1a      	ldr	r2, [pc, #104]	; (8044f64 <headled_flow_water+0x2a8>)
 8044efa:	5cd1      	ldrb	r1, [r2, r3]
 8044efc:	2301      	movs	r3, #1
 8044efe:	4a1a      	ldr	r2, [pc, #104]	; (8044f68 <headled_flow_water+0x2ac>)
 8044f00:	f7ff fc2c 	bl	804475c <headled_platform_write>
        headled_platform_write(headled_dev_ctx.handle,
 8044f04:	4b16      	ldr	r3, [pc, #88]	; (8044f60 <headled_flow_water+0x2a4>)
 8044f06:	6898      	ldr	r0, [r3, #8]
                               LED_R_COL_REG[53 - head_flow_water_tick] - 1,
 8044f08:	4b14      	ldr	r3, [pc, #80]	; (8044f5c <headled_flow_water+0x2a0>)
 8044f0a:	781b      	ldrb	r3, [r3, #0]
 8044f0c:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
 8044f10:	4a14      	ldr	r2, [pc, #80]	; (8044f64 <headled_flow_water+0x2a8>)
 8044f12:	5cd3      	ldrb	r3, [r2, r3]
        headled_platform_write(headled_dev_ctx.handle,
 8044f14:	3b01      	subs	r3, #1
 8044f16:	b2d9      	uxtb	r1, r3
 8044f18:	2301      	movs	r3, #1
 8044f1a:	4a13      	ldr	r2, [pc, #76]	; (8044f68 <headled_flow_water+0x2ac>)
 8044f1c:	f7ff fc1e 	bl	804475c <headled_platform_write>
        headled_platform_write(headled_dev_ctx.handle,
 8044f20:	4b0f      	ldr	r3, [pc, #60]	; (8044f60 <headled_flow_water+0x2a4>)
 8044f22:	6898      	ldr	r0, [r3, #8]
                               LED_R_COL_REG[53 - head_flow_water_tick] - 2,
 8044f24:	4b0d      	ldr	r3, [pc, #52]	; (8044f5c <headled_flow_water+0x2a0>)
 8044f26:	781b      	ldrb	r3, [r3, #0]
 8044f28:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
 8044f2c:	4a0d      	ldr	r2, [pc, #52]	; (8044f64 <headled_flow_water+0x2a8>)
 8044f2e:	5cd3      	ldrb	r3, [r2, r3]
        headled_platform_write(headled_dev_ctx.handle,
 8044f30:	3b02      	subs	r3, #2
 8044f32:	b2d9      	uxtb	r1, r3
 8044f34:	2301      	movs	r3, #1
 8044f36:	4a0d      	ldr	r2, [pc, #52]	; (8044f6c <headled_flow_water+0x2b0>)
 8044f38:	f7ff fc10 	bl	804475c <headled_platform_write>
      head_flow_water_tick = head_flow_water_tick + 1;
 8044f3c:	4b07      	ldr	r3, [pc, #28]	; (8044f5c <headled_flow_water+0x2a0>)
 8044f3e:	781b      	ldrb	r3, [r3, #0]
 8044f40:	3301      	adds	r3, #1
 8044f42:	b2da      	uxtb	r2, r3
 8044f44:	4b05      	ldr	r3, [pc, #20]	; (8044f5c <headled_flow_water+0x2a0>)
 8044f46:	701a      	strb	r2, [r3, #0]
      if (head_flow_water_tick >= 54) {
 8044f48:	4b04      	ldr	r3, [pc, #16]	; (8044f5c <headled_flow_water+0x2a0>)
 8044f4a:	781b      	ldrb	r3, [r3, #0]
 8044f4c:	2b35      	cmp	r3, #53	; 0x35
 8044f4e:	d902      	bls.n	8044f56 <headled_flow_water+0x29a>
        head_flow_water_tick = 0;
 8044f50:	4b02      	ldr	r3, [pc, #8]	; (8044f5c <headled_flow_water+0x2a0>)
 8044f52:	2200      	movs	r2, #0
 8044f54:	701a      	strb	r2, [r3, #0]
}
 8044f56:	bf00      	nop
 8044f58:	bd80      	pop	{r7, pc}
 8044f5a:	bf00      	nop
 8044f5c:	20007fba 	.word	0x20007fba
 8044f60:	20007fa8 	.word	0x20007fa8
 8044f64:	20007040 	.word	0x20007040
 8044f68:	2000703c 	.word	0x2000703c
 8044f6c:	2000703d 	.word	0x2000703d

08044f70 <led_platform_write>:
 * @param  len       number of consecutive register to write
 *
 */
static int32_t led_platform_write(void *handle, uint8_t reg, uint8_t * bufp,
                                  uint16_t len)
{
 8044f70:	b580      	push	{r7, lr}
 8044f72:	b088      	sub	sp, #32
 8044f74:	af04      	add	r7, sp, #16
 8044f76:	60f8      	str	r0, [r7, #12]
 8044f78:	607a      	str	r2, [r7, #4]
 8044f7a:	461a      	mov	r2, r3
 8044f7c:	460b      	mov	r3, r1
 8044f7e:	72fb      	strb	r3, [r7, #11]
 8044f80:	4613      	mov	r3, r2
 8044f82:	813b      	strh	r3, [r7, #8]
  if (handle == &led_init_parms->i2c_handle) {
 8044f84:	4b16      	ldr	r3, [pc, #88]	; (8044fe0 <led_platform_write+0x70>)
 8044f86:	681b      	ldr	r3, [r3, #0]
 8044f88:	3304      	adds	r3, #4
 8044f8a:	68fa      	ldr	r2, [r7, #12]
 8044f8c:	429a      	cmp	r2, r3
 8044f8e:	d121      	bne.n	8044fd4 <led_platform_write+0x64>
    if (led_init_parms->boardID == REAR_BOARD) {
 8044f90:	4b13      	ldr	r3, [pc, #76]	; (8044fe0 <led_platform_write+0x70>)
 8044f92:	681b      	ldr	r3, [r3, #0]
 8044f94:	781b      	ldrb	r3, [r3, #0]
 8044f96:	2b00      	cmp	r3, #0
 8044f98:	d10e      	bne.n	8044fb8 <led_platform_write+0x48>
      HAL_I2C_Mem_Write(handle, (uint16_t) REAR_LED_I2C_COMUNICATE_ADD, reg,
 8044f9a:	7afb      	ldrb	r3, [r7, #11]
 8044f9c:	b29a      	uxth	r2, r3
 8044f9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8044fa2:	9302      	str	r3, [sp, #8]
 8044fa4:	893b      	ldrh	r3, [r7, #8]
 8044fa6:	9301      	str	r3, [sp, #4]
 8044fa8:	687b      	ldr	r3, [r7, #4]
 8044faa:	9300      	str	r3, [sp, #0]
 8044fac:	2301      	movs	r3, #1
 8044fae:	21b6      	movs	r1, #182	; 0xb6
 8044fb0:	68f8      	ldr	r0, [r7, #12]
 8044fb2:	f00d f803 	bl	8051fbc <HAL_I2C_Mem_Write>
 8044fb6:	e00d      	b.n	8044fd4 <led_platform_write+0x64>
                        I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
    } else {
      HAL_I2C_Mem_Write(handle, (uint16_t) HEAD_LED_I2C_COMUNICATE_ADD, reg,
 8044fb8:	7afb      	ldrb	r3, [r7, #11]
 8044fba:	b29a      	uxth	r2, r3
 8044fbc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8044fc0:	9302      	str	r3, [sp, #8]
 8044fc2:	893b      	ldrh	r3, [r7, #8]
 8044fc4:	9301      	str	r3, [sp, #4]
 8044fc6:	687b      	ldr	r3, [r7, #4]
 8044fc8:	9300      	str	r3, [sp, #0]
 8044fca:	2301      	movs	r3, #1
 8044fcc:	21b0      	movs	r1, #176	; 0xb0
 8044fce:	68f8      	ldr	r0, [r7, #12]
 8044fd0:	f00c fff4 	bl	8051fbc <HAL_I2C_Mem_Write>
                        I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
    }
  }

  return 0;
 8044fd4:	2300      	movs	r3, #0
}
 8044fd6:	4618      	mov	r0, r3
 8044fd8:	3710      	adds	r7, #16
 8044fda:	46bd      	mov	sp, r7
 8044fdc:	bd80      	pop	{r7, pc}
 8044fde:	bf00      	nop
 8044fe0:	20007fe8 	.word	0x20007fe8

08044fe4 <led_platform_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t led_platform_read(void *handle, uint8_t reg, uint8_t * bufp,
                                 uint16_t len)
{
 8044fe4:	b580      	push	{r7, lr}
 8044fe6:	b088      	sub	sp, #32
 8044fe8:	af04      	add	r7, sp, #16
 8044fea:	60f8      	str	r0, [r7, #12]
 8044fec:	607a      	str	r2, [r7, #4]
 8044fee:	461a      	mov	r2, r3
 8044ff0:	460b      	mov	r3, r1
 8044ff2:	72fb      	strb	r3, [r7, #11]
 8044ff4:	4613      	mov	r3, r2
 8044ff6:	813b      	strh	r3, [r7, #8]
  if (handle == &led_init_parms->i2c_handle) {
 8044ff8:	4b16      	ldr	r3, [pc, #88]	; (8045054 <led_platform_read+0x70>)
 8044ffa:	681b      	ldr	r3, [r3, #0]
 8044ffc:	3304      	adds	r3, #4
 8044ffe:	68fa      	ldr	r2, [r7, #12]
 8045000:	429a      	cmp	r2, r3
 8045002:	d121      	bne.n	8045048 <led_platform_read+0x64>
    if (led_init_parms->boardID == REAR_BOARD) {
 8045004:	4b13      	ldr	r3, [pc, #76]	; (8045054 <led_platform_read+0x70>)
 8045006:	681b      	ldr	r3, [r3, #0]
 8045008:	781b      	ldrb	r3, [r3, #0]
 804500a:	2b00      	cmp	r3, #0
 804500c:	d10e      	bne.n	804502c <led_platform_read+0x48>
      HAL_I2C_Mem_Read(handle, (uint16_t) REAR_LED_I2C_COMUNICATE_ADD, reg,
 804500e:	7afb      	ldrb	r3, [r7, #11]
 8045010:	b29a      	uxth	r2, r3
 8045012:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8045016:	9302      	str	r3, [sp, #8]
 8045018:	893b      	ldrh	r3, [r7, #8]
 804501a:	9301      	str	r3, [sp, #4]
 804501c:	687b      	ldr	r3, [r7, #4]
 804501e:	9300      	str	r3, [sp, #0]
 8045020:	2301      	movs	r3, #1
 8045022:	21b6      	movs	r1, #182	; 0xb6
 8045024:	68f8      	ldr	r0, [r7, #12]
 8045026:	f00d f8c3 	bl	80521b0 <HAL_I2C_Mem_Read>
 804502a:	e00d      	b.n	8045048 <led_platform_read+0x64>
                       I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
    } else {
      HAL_I2C_Mem_Read(handle, (uint16_t) HEAD_LED_I2C_COMUNICATE_ADD, reg,
 804502c:	7afb      	ldrb	r3, [r7, #11]
 804502e:	b29a      	uxth	r2, r3
 8045030:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8045034:	9302      	str	r3, [sp, #8]
 8045036:	893b      	ldrh	r3, [r7, #8]
 8045038:	9301      	str	r3, [sp, #4]
 804503a:	687b      	ldr	r3, [r7, #4]
 804503c:	9300      	str	r3, [sp, #0]
 804503e:	2301      	movs	r3, #1
 8045040:	21b0      	movs	r1, #176	; 0xb0
 8045042:	68f8      	ldr	r0, [r7, #12]
 8045044:	f00d f8b4 	bl	80521b0 <HAL_I2C_Mem_Read>
                       I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
    }
  }

  return 0;
 8045048:	2300      	movs	r3, #0
}
 804504a:	4618      	mov	r0, r3
 804504c:	3710      	adds	r7, #16
 804504e:	46bd      	mov	sp, r7
 8045050:	bd80      	pop	{r7, pc}
 8045052:	bf00      	nop
 8045054:	20007fe8 	.word	0x20007fe8

08045058 <aw9110_led_blink>:

static void aw9110_led_blink(stmdev_ctx_t * ctx, struct aw9110B *aw9110,
                             uint8_t * brightness, uint8_t enablebits)
{
 8045058:	b580      	push	{r7, lr}
 804505a:	b086      	sub	sp, #24
 804505c:	af00      	add	r7, sp, #0
 804505e:	60f8      	str	r0, [r7, #12]
 8045060:	60b9      	str	r1, [r7, #8]
 8045062:	607a      	str	r2, [r7, #4]
 8045064:	70fb      	strb	r3, [r7, #3]
  uint8_t tmp;

  if (enablebits) {
 8045066:	78fb      	ldrb	r3, [r7, #3]
 8045068:	2b00      	cmp	r3, #0
 804506a:	f000 8093 	beq.w	8045194 <aw9110_led_blink+0x13c>
    tmp = 0x00;
 804506e:	2300      	movs	r3, #0
 8045070:	74fb      	strb	r3, [r7, #19]
    led_platform_write(ctx->handle, REG_WORK_MODE_P0, &tmp, 1); // led mode
 8045072:	68fb      	ldr	r3, [r7, #12]
 8045074:	6898      	ldr	r0, [r3, #8]
 8045076:	f107 0213 	add.w	r2, r7, #19
 804507a:	2301      	movs	r3, #1
 804507c:	2112      	movs	r1, #18
 804507e:	f7ff ff77 	bl	8044f70 <led_platform_write>
    led_platform_write(ctx->handle, REG_WORK_MODE_P1, &tmp, 1); // led mode
 8045082:	68fb      	ldr	r3, [r7, #12]
 8045084:	6898      	ldr	r0, [r3, #8]
 8045086:	f107 0213 	add.w	r2, r7, #19
 804508a:	2301      	movs	r3, #1
 804508c:	2113      	movs	r1, #19
 804508e:	f7ff ff6f 	bl	8044f70 <led_platform_write>
    tmp = enablebits;
 8045092:	78fb      	ldrb	r3, [r7, #3]
 8045094:	74fb      	strb	r3, [r7, #19]
    led_platform_write(ctx->handle, REG_EN_BREATH, &tmp, 1);    // enable breath
 8045096:	68fb      	ldr	r3, [r7, #12]
 8045098:	6898      	ldr	r0, [r3, #8]
 804509a:	f107 0213 	add.w	r2, r7, #19
 804509e:	2301      	movs	r3, #1
 80450a0:	2114      	movs	r1, #20
 80450a2:	f7ff ff65 	bl	8044f70 <led_platform_write>
    tmp = (enablebits >> 4) & 0x03;
 80450a6:	78fb      	ldrb	r3, [r7, #3]
 80450a8:	091b      	lsrs	r3, r3, #4
 80450aa:	b2db      	uxtb	r3, r3
 80450ac:	f003 0303 	and.w	r3, r3, #3
 80450b0:	b2db      	uxtb	r3, r3
 80450b2:	74fb      	strb	r3, [r7, #19]
    led_platform_write(ctx->handle, REG_CONFIG_P0, &tmp, 1);    // blink mode
 80450b4:	68fb      	ldr	r3, [r7, #12]
 80450b6:	6898      	ldr	r0, [r3, #8]
 80450b8:	f107 0213 	add.w	r2, r7, #19
 80450bc:	2301      	movs	r3, #1
 80450be:	2104      	movs	r1, #4
 80450c0:	f7ff ff56 	bl	8044f70 <led_platform_write>
    tmp = enablebits & 0x0f;
 80450c4:	78fb      	ldrb	r3, [r7, #3]
 80450c6:	f003 030f 	and.w	r3, r3, #15
 80450ca:	b2db      	uxtb	r3, r3
 80450cc:	74fb      	strb	r3, [r7, #19]
    led_platform_write(ctx->handle, REG_CONFIG_P1, &tmp, 1);    // blink mode
 80450ce:	68fb      	ldr	r3, [r7, #12]
 80450d0:	6898      	ldr	r0, [r3, #8]
 80450d2:	f107 0213 	add.w	r2, r7, #19
 80450d6:	2301      	movs	r3, #1
 80450d8:	2105      	movs	r1, #5
 80450da:	f7ff ff49 	bl	8044f70 <led_platform_write>
    tmp = (aw9110->fall_time << 3) | (aw9110->rise_time);
 80450de:	68bb      	ldr	r3, [r7, #8]
 80450e0:	68db      	ldr	r3, [r3, #12]
 80450e2:	00db      	lsls	r3, r3, #3
 80450e4:	b25a      	sxtb	r2, r3
 80450e6:	68bb      	ldr	r3, [r7, #8]
 80450e8:	685b      	ldr	r3, [r3, #4]
 80450ea:	b25b      	sxtb	r3, r3
 80450ec:	4313      	orrs	r3, r2
 80450ee:	b25b      	sxtb	r3, r3
 80450f0:	b2db      	uxtb	r3, r3
 80450f2:	74fb      	strb	r3, [r7, #19]
    led_platform_write(ctx->handle, REG_FADE_TIME, &tmp, 1);    // fade time
 80450f4:	68fb      	ldr	r3, [r7, #12]
 80450f6:	6898      	ldr	r0, [r3, #8]
 80450f8:	f107 0213 	add.w	r2, r7, #19
 80450fc:	2301      	movs	r3, #1
 80450fe:	2115      	movs	r1, #21
 8045100:	f7ff ff36 	bl	8044f70 <led_platform_write>
    tmp = (aw9110->off_time << 3) | (aw9110->on_time);
 8045104:	68bb      	ldr	r3, [r7, #8]
 8045106:	691b      	ldr	r3, [r3, #16]
 8045108:	00db      	lsls	r3, r3, #3
 804510a:	b25a      	sxtb	r2, r3
 804510c:	68bb      	ldr	r3, [r7, #8]
 804510e:	689b      	ldr	r3, [r3, #8]
 8045110:	b25b      	sxtb	r3, r3
 8045112:	4313      	orrs	r3, r2
 8045114:	b25b      	sxtb	r3, r3
 8045116:	b2db      	uxtb	r3, r3
 8045118:	74fb      	strb	r3, [r7, #19]
    led_platform_write(ctx->handle, REG_FULL_TIME, &tmp, 1);    // on/off time
 804511a:	68fb      	ldr	r3, [r7, #12]
 804511c:	6898      	ldr	r0, [r3, #8]
 804511e:	f107 0213 	add.w	r2, r7, #19
 8045122:	2301      	movs	r3, #1
 8045124:	2116      	movs	r1, #22
 8045126:	f7ff ff23 	bl	8044f70 <led_platform_write>
    for (int i = 0; i < 6; i++) {
 804512a:	2300      	movs	r3, #0
 804512c:	617b      	str	r3, [r7, #20]
 804512e:	e024      	b.n	804517a <aw9110_led_blink+0x122>
      if ((enablebits >> i) & 0x01) {
 8045130:	78fa      	ldrb	r2, [r7, #3]
 8045132:	697b      	ldr	r3, [r7, #20]
 8045134:	fa42 f303 	asr.w	r3, r2, r3
 8045138:	f003 0301 	and.w	r3, r3, #1
 804513c:	2b00      	cmp	r3, #0
 804513e:	d00c      	beq.n	804515a <aw9110_led_blink+0x102>
        led_platform_write(ctx->handle, REG_DIM00 + i, &brightness[i], 1);      // dimming
 8045140:	68fb      	ldr	r3, [r7, #12]
 8045142:	6898      	ldr	r0, [r3, #8]
 8045144:	697b      	ldr	r3, [r7, #20]
 8045146:	b2db      	uxtb	r3, r3
 8045148:	3320      	adds	r3, #32
 804514a:	b2d9      	uxtb	r1, r3
 804514c:	697b      	ldr	r3, [r7, #20]
 804514e:	687a      	ldr	r2, [r7, #4]
 8045150:	441a      	add	r2, r3
 8045152:	2301      	movs	r3, #1
 8045154:	f7ff ff0c 	bl	8044f70 <led_platform_write>
 8045158:	e00c      	b.n	8045174 <aw9110_led_blink+0x11c>
      }
      else {
    	  tmp = 0x00;
 804515a:	2300      	movs	r3, #0
 804515c:	74fb      	strb	r3, [r7, #19]
    	  led_platform_write(ctx->handle, REG_DIM00 + i, &tmp, 1);      // dimming
 804515e:	68fb      	ldr	r3, [r7, #12]
 8045160:	6898      	ldr	r0, [r3, #8]
 8045162:	697b      	ldr	r3, [r7, #20]
 8045164:	b2db      	uxtb	r3, r3
 8045166:	3320      	adds	r3, #32
 8045168:	b2d9      	uxtb	r1, r3
 804516a:	f107 0213 	add.w	r2, r7, #19
 804516e:	2301      	movs	r3, #1
 8045170:	f7ff fefe 	bl	8044f70 <led_platform_write>
    for (int i = 0; i < 6; i++) {
 8045174:	697b      	ldr	r3, [r7, #20]
 8045176:	3301      	adds	r3, #1
 8045178:	617b      	str	r3, [r7, #20]
 804517a:	697b      	ldr	r3, [r7, #20]
 804517c:	2b05      	cmp	r3, #5
 804517e:	ddd7      	ble.n	8045130 <aw9110_led_blink+0xd8>
      }
    }
    tmp = 0x83;                 //| aw9110->imax;
 8045180:	2383      	movs	r3, #131	; 0x83
 8045182:	74fb      	strb	r3, [r7, #19]
    led_platform_write(ctx->handle, REG_CTRL, &tmp, 1); // blink enable | imax
 8045184:	68fb      	ldr	r3, [r7, #12]
 8045186:	6898      	ldr	r0, [r3, #8]
 8045188:	f107 0213 	add.w	r2, r7, #19
 804518c:	2301      	movs	r3, #1
 804518e:	2111      	movs	r1, #17
 8045190:	f7ff feee 	bl	8044f70 <led_platform_write>
  }
}
 8045194:	bf00      	nop
 8045196:	3718      	adds	r7, #24
 8045198:	46bd      	mov	sp, r7
 804519a:	bd80      	pop	{r7, pc}

0804519c <aw9110_led_off>:

static int aw9110_led_off(stmdev_ctx_t * ctx)
{
 804519c:	b580      	push	{r7, lr}
 804519e:	b084      	sub	sp, #16
 80451a0:	af00      	add	r7, sp, #0
 80451a2:	6078      	str	r0, [r7, #4]
  uint8_t tmp = 0x00;
 80451a4:	2300      	movs	r3, #0
 80451a6:	72fb      	strb	r3, [r7, #11]
  led_platform_write(ctx->handle, REG_WORK_MODE_P0, &tmp, 1);   // led mode
 80451a8:	687b      	ldr	r3, [r7, #4]
 80451aa:	6898      	ldr	r0, [r3, #8]
 80451ac:	f107 020b 	add.w	r2, r7, #11
 80451b0:	2301      	movs	r3, #1
 80451b2:	2112      	movs	r1, #18
 80451b4:	f7ff fedc 	bl	8044f70 <led_platform_write>
  led_platform_write(ctx->handle, REG_WORK_MODE_P1, &tmp, 1);   // led mode
 80451b8:	687b      	ldr	r3, [r7, #4]
 80451ba:	6898      	ldr	r0, [r3, #8]
 80451bc:	f107 020b 	add.w	r2, r7, #11
 80451c0:	2301      	movs	r3, #1
 80451c2:	2113      	movs	r1, #19
 80451c4:	f7ff fed4 	bl	8044f70 <led_platform_write>
  led_platform_write(ctx->handle, REG_EN_BREATH, &tmp, 1);      // disable breath
 80451c8:	687b      	ldr	r3, [r7, #4]
 80451ca:	6898      	ldr	r0, [r3, #8]
 80451cc:	f107 020b 	add.w	r2, r7, #11
 80451d0:	2301      	movs	r3, #1
 80451d2:	2114      	movs	r1, #20
 80451d4:	f7ff fecc 	bl	8044f70 <led_platform_write>
  tmp = 0x03;
 80451d8:	2303      	movs	r3, #3
 80451da:	72fb      	strb	r3, [r7, #11]
  led_platform_write(ctx->handle, REG_CTRL, &tmp, 1);   // imax
 80451dc:	687b      	ldr	r3, [r7, #4]
 80451de:	6898      	ldr	r0, [r3, #8]
 80451e0:	f107 020b 	add.w	r2, r7, #11
 80451e4:	2301      	movs	r3, #1
 80451e6:	2111      	movs	r1, #17
 80451e8:	f7ff fec2 	bl	8044f70 <led_platform_write>
  tmp = 0x00;
 80451ec:	2300      	movs	r3, #0
 80451ee:	72fb      	strb	r3, [r7, #11]
  for (int i = 0; i < 6; i++) {
 80451f0:	2300      	movs	r3, #0
 80451f2:	60fb      	str	r3, [r7, #12]
 80451f4:	e00d      	b.n	8045212 <aw9110_led_off+0x76>
    led_platform_write(ctx->handle, REG_DIM00 + i, &tmp, 1);    // dimming
 80451f6:	687b      	ldr	r3, [r7, #4]
 80451f8:	6898      	ldr	r0, [r3, #8]
 80451fa:	68fb      	ldr	r3, [r7, #12]
 80451fc:	b2db      	uxtb	r3, r3
 80451fe:	3320      	adds	r3, #32
 8045200:	b2d9      	uxtb	r1, r3
 8045202:	f107 020b 	add.w	r2, r7, #11
 8045206:	2301      	movs	r3, #1
 8045208:	f7ff feb2 	bl	8044f70 <led_platform_write>
  for (int i = 0; i < 6; i++) {
 804520c:	68fb      	ldr	r3, [r7, #12]
 804520e:	3301      	adds	r3, #1
 8045210:	60fb      	str	r3, [r7, #12]
 8045212:	68fb      	ldr	r3, [r7, #12]
 8045214:	2b05      	cmp	r3, #5
 8045216:	ddee      	ble.n	80451f6 <aw9110_led_off+0x5a>
  }
}
 8045218:	bf00      	nop
 804521a:	4618      	mov	r0, r3
 804521c:	3710      	adds	r7, #16
 804521e:	46bd      	mov	sp, r7
 8045220:	bd80      	pop	{r7, pc}

08045222 <aw9110_led_on>:

static int aw9110_led_on(stmdev_ctx_t * ctx, uint8_t * brightness,
                         uint8_t enablebits)
{
 8045222:	b580      	push	{r7, lr}
 8045224:	b086      	sub	sp, #24
 8045226:	af00      	add	r7, sp, #0
 8045228:	60f8      	str	r0, [r7, #12]
 804522a:	60b9      	str	r1, [r7, #8]
 804522c:	4613      	mov	r3, r2
 804522e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0x00;
 8045230:	2300      	movs	r3, #0
 8045232:	74fb      	strb	r3, [r7, #19]
  led_platform_write(ctx->handle, REG_WORK_MODE_P0, &tmp, 1);   // led mode
 8045234:	68fb      	ldr	r3, [r7, #12]
 8045236:	6898      	ldr	r0, [r3, #8]
 8045238:	f107 0213 	add.w	r2, r7, #19
 804523c:	2301      	movs	r3, #1
 804523e:	2112      	movs	r1, #18
 8045240:	f7ff fe96 	bl	8044f70 <led_platform_write>
  led_platform_write(ctx->handle, REG_WORK_MODE_P1, &tmp, 1);   // led mode
 8045244:	68fb      	ldr	r3, [r7, #12]
 8045246:	6898      	ldr	r0, [r3, #8]
 8045248:	f107 0213 	add.w	r2, r7, #19
 804524c:	2301      	movs	r3, #1
 804524e:	2113      	movs	r1, #19
 8045250:	f7ff fe8e 	bl	8044f70 <led_platform_write>
  led_platform_write(ctx->handle, REG_EN_BREATH, &tmp, 1);    // enable breath
 8045254:	68fb      	ldr	r3, [r7, #12]
 8045256:	6898      	ldr	r0, [r3, #8]
 8045258:	f107 0213 	add.w	r2, r7, #19
 804525c:	2301      	movs	r3, #1
 804525e:	2114      	movs	r1, #20
 8045260:	f7ff fe86 	bl	8044f70 <led_platform_write>
  tmp = 0x03;
 8045264:	2303      	movs	r3, #3
 8045266:	74fb      	strb	r3, [r7, #19]
  led_platform_write(ctx->handle, REG_CTRL, &tmp, 1);   // imax
 8045268:	68fb      	ldr	r3, [r7, #12]
 804526a:	6898      	ldr	r0, [r3, #8]
 804526c:	f107 0213 	add.w	r2, r7, #19
 8045270:	2301      	movs	r3, #1
 8045272:	2111      	movs	r1, #17
 8045274:	f7ff fe7c 	bl	8044f70 <led_platform_write>
  for (int i = 0; i < 6; i++) {
 8045278:	2300      	movs	r3, #0
 804527a:	617b      	str	r3, [r7, #20]
 804527c:	e016      	b.n	80452ac <aw9110_led_on+0x8a>
    if ((enablebits >> i) & 0x01) {
 804527e:	79fa      	ldrb	r2, [r7, #7]
 8045280:	697b      	ldr	r3, [r7, #20]
 8045282:	fa42 f303 	asr.w	r3, r2, r3
 8045286:	f003 0301 	and.w	r3, r3, #1
 804528a:	2b00      	cmp	r3, #0
 804528c:	d00b      	beq.n	80452a6 <aw9110_led_on+0x84>
      led_platform_write(ctx->handle, REG_DIM00 + i, &brightness[i], 1);        // lighting on
 804528e:	68fb      	ldr	r3, [r7, #12]
 8045290:	6898      	ldr	r0, [r3, #8]
 8045292:	697b      	ldr	r3, [r7, #20]
 8045294:	b2db      	uxtb	r3, r3
 8045296:	3320      	adds	r3, #32
 8045298:	b2d9      	uxtb	r1, r3
 804529a:	697b      	ldr	r3, [r7, #20]
 804529c:	68ba      	ldr	r2, [r7, #8]
 804529e:	441a      	add	r2, r3
 80452a0:	2301      	movs	r3, #1
 80452a2:	f7ff fe65 	bl	8044f70 <led_platform_write>
  for (int i = 0; i < 6; i++) {
 80452a6:	697b      	ldr	r3, [r7, #20]
 80452a8:	3301      	adds	r3, #1
 80452aa:	617b      	str	r3, [r7, #20]
 80452ac:	697b      	ldr	r3, [r7, #20]
 80452ae:	2b05      	cmp	r3, #5
 80452b0:	dde5      	ble.n	804527e <aw9110_led_on+0x5c>
    }
  }
}
 80452b2:	bf00      	nop
 80452b4:	4618      	mov	r0, r3
 80452b6:	3718      	adds	r7, #24
 80452b8:	46bd      	mov	sp, r7
 80452ba:	bd80      	pop	{r7, pc}

080452bc <led_hw_reset>:
 * NAME       : led_hw_reset
 * FUNCTION   : reset led
 * REMARKS    :
 *****************************************************************************/
static int led_hw_reset(stmdev_ctx_t * ctx)
{
 80452bc:	b580      	push	{r7, lr}
 80452be:	b082      	sub	sp, #8
 80452c0:	af00      	add	r7, sp, #0
 80452c2:	6078      	str	r0, [r7, #4]
  if (ctx != NULL) {
 80452c4:	687b      	ldr	r3, [r7, #4]
 80452c6:	2b00      	cmp	r3, #0
 80452c8:	d012      	beq.n	80452f0 <led_hw_reset+0x34>
    HAL_GPIO_WritePin(HEAD_AND_REAR_LED_DRIVER_EN_GPIO_Port,
 80452ca:	2200      	movs	r2, #0
 80452cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80452d0:	480c      	ldr	r0, [pc, #48]	; (8045304 <led_hw_reset+0x48>)
 80452d2:	f00c f9d9 	bl	8051688 <HAL_GPIO_WritePin>
                      HEAD_AND_REAR_LED_DRIVER_EN_Pin, GPIO_PIN_RESET);
    osDelay(1);
 80452d6:	2001      	movs	r0, #1
 80452d8:	f010 ff0f 	bl	80560fa <osDelay>
    HAL_GPIO_WritePin(HEAD_AND_REAR_LED_DRIVER_EN_GPIO_Port,
 80452dc:	2201      	movs	r2, #1
 80452de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80452e2:	4808      	ldr	r0, [pc, #32]	; (8045304 <led_hw_reset+0x48>)
 80452e4:	f00c f9d0 	bl	8051688 <HAL_GPIO_WritePin>
                      HEAD_AND_REAR_LED_DRIVER_EN_Pin, GPIO_PIN_SET);
    osDelay(1);
 80452e8:	2001      	movs	r0, #1
 80452ea:	f010 ff06 	bl	80560fa <osDelay>
 80452ee:	e003      	b.n	80452f8 <led_hw_reset+0x3c>
  } else {
    printf("%s: failed\n", __func__);
 80452f0:	4905      	ldr	r1, [pc, #20]	; (8045308 <led_hw_reset+0x4c>)
 80452f2:	4806      	ldr	r0, [pc, #24]	; (804530c <led_hw_reset+0x50>)
 80452f4:	f01b fb3e 	bl	8060974 <iprintf>
  }
  return 0;
 80452f8:	2300      	movs	r3, #0
}
 80452fa:	4618      	mov	r0, r3
 80452fc:	3708      	adds	r7, #8
 80452fe:	46bd      	mov	sp, r7
 8045300:	bd80      	pop	{r7, pc}
 8045302:	bf00      	nop
 8045304:	40020400 	.word	0x40020400
 8045308:	08067870 	.word	0x08067870
 804530c:	0806566c 	.word	0x0806566c

08045310 <led_init>:

/*
 * @brief  platform specific initialization (platform dependent)
 */
int led_init(void *para, void *para2)
{
 8045310:	b580      	push	{r7, lr}
 8045312:	b084      	sub	sp, #16
 8045314:	af00      	add	r7, sp, #0
 8045316:	6078      	str	r0, [r7, #4]
 8045318:	6039      	str	r1, [r7, #0]
  led_init_parms = (platform_prams *) para;
 804531a:	4a18      	ldr	r2, [pc, #96]	; (804537c <led_init+0x6c>)
 804531c:	687b      	ldr	r3, [r7, #4]
 804531e:	6013      	str	r3, [r2, #0]
  /* Initialize mems driver interface */
  led_dev_ctx.write_reg = led_platform_write;
 8045320:	4b17      	ldr	r3, [pc, #92]	; (8045380 <led_init+0x70>)
 8045322:	4a18      	ldr	r2, [pc, #96]	; (8045384 <led_init+0x74>)
 8045324:	601a      	str	r2, [r3, #0]
  led_dev_ctx.read_reg = led_platform_read;
 8045326:	4b16      	ldr	r3, [pc, #88]	; (8045380 <led_init+0x70>)
 8045328:	4a17      	ldr	r2, [pc, #92]	; (8045388 <led_init+0x78>)
 804532a:	605a      	str	r2, [r3, #4]
  led_dev_ctx.handle = &led_init_parms->i2c_handle;
 804532c:	4b13      	ldr	r3, [pc, #76]	; (804537c <led_init+0x6c>)
 804532e:	681b      	ldr	r3, [r3, #0]
 8045330:	3304      	adds	r3, #4
 8045332:	4a13      	ldr	r2, [pc, #76]	; (8045380 <led_init+0x70>)
 8045334:	6093      	str	r3, [r2, #8]

  /* hardware reset */
  led_hw_reset(&led_dev_ctx);
 8045336:	4812      	ldr	r0, [pc, #72]	; (8045380 <led_init+0x70>)
 8045338:	f7ff ffc0 	bl	80452bc <led_hw_reset>
  /* aw9110 chip id */
  uint8_t reg_val;
  led_platform_read(led_dev_ctx.handle, REG_ID, &reg_val, 1);
 804533c:	4b10      	ldr	r3, [pc, #64]	; (8045380 <led_init+0x70>)
 804533e:	6898      	ldr	r0, [r3, #8]
 8045340:	f107 020f 	add.w	r2, r7, #15
 8045344:	2301      	movs	r3, #1
 8045346:	2110      	movs	r1, #16
 8045348:	f7ff fe4c 	bl	8044fe4 <led_platform_read>
  printf("led_init reg_id 0x%x\r\n", reg_val);
 804534c:	7bfb      	ldrb	r3, [r7, #15]
 804534e:	4619      	mov	r1, r3
 8045350:	480e      	ldr	r0, [pc, #56]	; (804538c <led_init+0x7c>)
 8045352:	f01b fb0f 	bl	8060974 <iprintf>
  osDelay(1);
 8045356:	2001      	movs	r0, #1
 8045358:	f010 fecf 	bl	80560fa <osDelay>
  if (reg_val != AW9110_ID)
 804535c:	7bfb      	ldrb	r3, [r7, #15]
 804535e:	2b23      	cmp	r3, #35	; 0x23
 8045360:	d002      	beq.n	8045368 <led_init+0x58>
    return SENSOR_FAILED;
 8045362:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8045366:	e005      	b.n	8045374 <led_init+0x64>
  aw9110_led_on(&led_dev_ctx, brightnessarray, 0x09);
 8045368:	2209      	movs	r2, #9
 804536a:	4909      	ldr	r1, [pc, #36]	; (8045390 <led_init+0x80>)
 804536c:	4804      	ldr	r0, [pc, #16]	; (8045380 <led_init+0x70>)
 804536e:	f7ff ff58 	bl	8045222 <aw9110_led_on>

  return SENSOR_SUCCESS;
 8045372:	2300      	movs	r3, #0
}
 8045374:	4618      	mov	r0, r3
 8045376:	3710      	adds	r7, #16
 8045378:	46bd      	mov	sp, r7
 804537a:	bd80      	pop	{r7, pc}
 804537c:	20007fe8 	.word	0x20007fe8
 8045380:	20007fdc 	.word	0x20007fdc
 8045384:	08044f71 	.word	0x08044f71
 8045388:	08044fe5 	.word	0x08044fe5
 804538c:	08065678 	.word	0x08065678
 8045390:	20007880 	.word	0x20007880

08045394 <led_enable>:

static int32_t led_enable()
{
 8045394:	b480      	push	{r7}
 8045396:	b083      	sub	sp, #12
 8045398:	af00      	add	r7, sp, #0
  int32_t ret = 0;
 804539a:	2300      	movs	r3, #0
 804539c:	607b      	str	r3, [r7, #4]

  if (sensor_activate_count == 0) {
 804539e:	4b0a      	ldr	r3, [pc, #40]	; (80453c8 <led_enable+0x34>)
 80453a0:	781b      	ldrb	r3, [r3, #0]
 80453a2:	2b00      	cmp	r3, #0
 80453a4:	d102      	bne.n	80453ac <led_enable+0x18>
    led_activated = true;
 80453a6:	4b09      	ldr	r3, [pc, #36]	; (80453cc <led_enable+0x38>)
 80453a8:	2201      	movs	r2, #1
 80453aa:	701a      	strb	r2, [r3, #0]
  }
  sensor_activate_count++;
 80453ac:	4b06      	ldr	r3, [pc, #24]	; (80453c8 <led_enable+0x34>)
 80453ae:	781b      	ldrb	r3, [r3, #0]
 80453b0:	3301      	adds	r3, #1
 80453b2:	b2da      	uxtb	r2, r3
 80453b4:	4b04      	ldr	r3, [pc, #16]	; (80453c8 <led_enable+0x34>)
 80453b6:	701a      	strb	r2, [r3, #0]
  return ret;
 80453b8:	687b      	ldr	r3, [r7, #4]
}
 80453ba:	4618      	mov	r0, r3
 80453bc:	370c      	adds	r7, #12
 80453be:	46bd      	mov	sp, r7
 80453c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80453c4:	4770      	bx	lr
 80453c6:	bf00      	nop
 80453c8:	20007fec 	.word	0x20007fec
 80453cc:	20007fed 	.word	0x20007fed

080453d0 <led_disable>:

static int32_t led_disable()
{
 80453d0:	b480      	push	{r7}
 80453d2:	b083      	sub	sp, #12
 80453d4:	af00      	add	r7, sp, #0
  int32_t ret = 0;
 80453d6:	2300      	movs	r3, #0
 80453d8:	607b      	str	r3, [r7, #4]
  sensor_activate_count--;
 80453da:	4b0a      	ldr	r3, [pc, #40]	; (8045404 <led_disable+0x34>)
 80453dc:	781b      	ldrb	r3, [r3, #0]
 80453de:	3b01      	subs	r3, #1
 80453e0:	b2da      	uxtb	r2, r3
 80453e2:	4b08      	ldr	r3, [pc, #32]	; (8045404 <led_disable+0x34>)
 80453e4:	701a      	strb	r2, [r3, #0]
  if (sensor_activate_count == 0) {
 80453e6:	4b07      	ldr	r3, [pc, #28]	; (8045404 <led_disable+0x34>)
 80453e8:	781b      	ldrb	r3, [r3, #0]
 80453ea:	2b00      	cmp	r3, #0
 80453ec:	d102      	bne.n	80453f4 <led_disable+0x24>
    led_activated = false;
 80453ee:	4b06      	ldr	r3, [pc, #24]	; (8045408 <led_disable+0x38>)
 80453f0:	2200      	movs	r2, #0
 80453f2:	701a      	strb	r2, [r3, #0]
  }
  return ret;
 80453f4:	687b      	ldr	r3, [r7, #4]
}
 80453f6:	4618      	mov	r0, r3
 80453f8:	370c      	adds	r7, #12
 80453fa:	46bd      	mov	sp, r7
 80453fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045400:	4770      	bx	lr
 8045402:	bf00      	nop
 8045404:	20007fec 	.word	0x20007fec
 8045408:	20007fed 	.word	0x20007fed

0804540c <led_activate>:

int led_activate(bool activate)
{
 804540c:	b580      	push	{r7, lr}
 804540e:	b084      	sub	sp, #16
 8045410:	af00      	add	r7, sp, #0
 8045412:	4603      	mov	r3, r0
 8045414:	71fb      	strb	r3, [r7, #7]
  int res = 0;
 8045416:	2300      	movs	r3, #0
 8045418:	60fb      	str	r3, [r7, #12]
  printf("led_activate: %d \r\n", activate);
 804541a:	79fb      	ldrb	r3, [r7, #7]
 804541c:	4619      	mov	r1, r3
 804541e:	4809      	ldr	r0, [pc, #36]	; (8045444 <led_activate+0x38>)
 8045420:	f01b faa8 	bl	8060974 <iprintf>
  if (activate) {
 8045424:	79fb      	ldrb	r3, [r7, #7]
 8045426:	2b00      	cmp	r3, #0
 8045428:	d003      	beq.n	8045432 <led_activate+0x26>
    res = led_enable();
 804542a:	f7ff ffb3 	bl	8045394 <led_enable>
 804542e:	60f8      	str	r0, [r7, #12]
 8045430:	e002      	b.n	8045438 <led_activate+0x2c>
  } else {
    res = led_disable();
 8045432:	f7ff ffcd 	bl	80453d0 <led_disable>
 8045436:	60f8      	str	r0, [r7, #12]
  }
  return res;
 8045438:	68fb      	ldr	r3, [r7, #12]
}
 804543a:	4618      	mov	r0, r3
 804543c:	3710      	adds	r7, #16
 804543e:	46bd      	mov	sp, r7
 8045440:	bd80      	pop	{r7, pc}
 8045442:	bf00      	nop
 8045444:	08065690 	.word	0x08065690

08045448 <led_init_complete>:

int led_init_complete(void *para)
{
 8045448:	b480      	push	{r7}
 804544a:	b083      	sub	sp, #12
 804544c:	af00      	add	r7, sp, #0
 804544e:	6078      	str	r0, [r7, #4]
  //send init complete event to smgr?
  return SENSOR_SUCCESS;
 8045450:	2300      	movs	r3, #0
}
 8045452:	4618      	mov	r0, r3
 8045454:	370c      	adds	r7, #12
 8045456:	46bd      	mov	sp, r7
 8045458:	f85d 7b04 	ldr.w	r7, [sp], #4
 804545c:	4770      	bx	lr
	...

08045460 <led_config>:

//out5-->out0
int led_config(uint8_t config, void *para)
{
 8045460:	b580      	push	{r7, lr}
 8045462:	b084      	sub	sp, #16
 8045464:	af00      	add	r7, sp, #0
 8045466:	4603      	mov	r3, r0
 8045468:	6039      	str	r1, [r7, #0]
 804546a:	71fb      	strb	r3, [r7, #7]
  //send init complete event to smgr?

  uint8_t *config_data = NULL;
 804546c:	2300      	movs	r3, #0
 804546e:	60fb      	str	r3, [r7, #12]
  config_data = (uint8_t *) para;
 8045470:	683b      	ldr	r3, [r7, #0]
 8045472:	60fb      	str	r3, [r7, #12]

  aw9110_led_off(&led_dev_ctx);
 8045474:	4838      	ldr	r0, [pc, #224]	; (8045558 <led_config+0xf8>)
 8045476:	f7ff fe91 	bl	804519c <aw9110_led_off>
  uint8_t config_type = config_data[0] & 0x0F;
 804547a:	68fb      	ldr	r3, [r7, #12]
 804547c:	781b      	ldrb	r3, [r3, #0]
 804547e:	f003 030f 	and.w	r3, r3, #15
 8045482:	72fb      	strb	r3, [r7, #11]
  if (((config_data[0] >> 4) & 0x0F) == 0) {
 8045484:	68fb      	ldr	r3, [r7, #12]
 8045486:	781b      	ldrb	r3, [r3, #0]
 8045488:	091b      	lsrs	r3, r3, #4
 804548a:	b2db      	uxtb	r3, r3
 804548c:	f003 030f 	and.w	r3, r3, #15
 8045490:	2b00      	cmp	r3, #0
 8045492:	d145      	bne.n	8045520 <led_config+0xc0>
    switch (config_type) {
 8045494:	7afb      	ldrb	r3, [r7, #11]
 8045496:	2b06      	cmp	r3, #6
 8045498:	d83c      	bhi.n	8045514 <led_config+0xb4>
 804549a:	a201      	add	r2, pc, #4	; (adr r2, 80454a0 <led_config+0x40>)
 804549c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80454a0:	080454bd 	.word	0x080454bd
 80454a4:	080454c5 	.word	0x080454c5
 80454a8:	080454d1 	.word	0x080454d1
 80454ac:	080454df 	.word	0x080454df
 80454b0:	080454ed 	.word	0x080454ed
 80454b4:	080454f9 	.word	0x080454f9
 80454b8:	08045507 	.word	0x08045507
    case 0:
      aw9110_led_off(&led_dev_ctx);
 80454bc:	4826      	ldr	r0, [pc, #152]	; (8045558 <led_config+0xf8>)
 80454be:	f7ff fe6d 	bl	804519c <aw9110_led_off>
      break;
 80454c2:	e043      	b.n	804554c <led_config+0xec>
    case 1:
      aw9110_led_on(&led_dev_ctx, brightnessarray, 0x09);       // red lighting
 80454c4:	2209      	movs	r2, #9
 80454c6:	4925      	ldr	r1, [pc, #148]	; (804555c <led_config+0xfc>)
 80454c8:	4823      	ldr	r0, [pc, #140]	; (8045558 <led_config+0xf8>)
 80454ca:	f7ff feaa 	bl	8045222 <aw9110_led_on>
      break;
 80454ce:	e03d      	b.n	804554c <led_config+0xec>
    case 2:
      aw9110_led_blink(&led_dev_ctx, &aw9110_breath, brightnessarray, 0x09);    // red breathing
 80454d0:	2309      	movs	r3, #9
 80454d2:	4a22      	ldr	r2, [pc, #136]	; (804555c <led_config+0xfc>)
 80454d4:	4922      	ldr	r1, [pc, #136]	; (8045560 <led_config+0x100>)
 80454d6:	4820      	ldr	r0, [pc, #128]	; (8045558 <led_config+0xf8>)
 80454d8:	f7ff fdbe 	bl	8045058 <aw9110_led_blink>
      break;
 80454dc:	e036      	b.n	804554c <led_config+0xec>
    case 3:
      aw9110_led_blink(&led_dev_ctx, &aw9110_blink, brightnessarray, 0x09);     // red blinking
 80454de:	2309      	movs	r3, #9
 80454e0:	4a1e      	ldr	r2, [pc, #120]	; (804555c <led_config+0xfc>)
 80454e2:	4920      	ldr	r1, [pc, #128]	; (8045564 <led_config+0x104>)
 80454e4:	481c      	ldr	r0, [pc, #112]	; (8045558 <led_config+0xf8>)
 80454e6:	f7ff fdb7 	bl	8045058 <aw9110_led_blink>
      break;
 80454ea:	e02f      	b.n	804554c <led_config+0xec>
    case 4:
      aw9110_led_on(&led_dev_ctx, brightnessarray, (0x09 << 1));       // green lighting
 80454ec:	2212      	movs	r2, #18
 80454ee:	491b      	ldr	r1, [pc, #108]	; (804555c <led_config+0xfc>)
 80454f0:	4819      	ldr	r0, [pc, #100]	; (8045558 <led_config+0xf8>)
 80454f2:	f7ff fe96 	bl	8045222 <aw9110_led_on>
      break;
 80454f6:	e029      	b.n	804554c <led_config+0xec>
    case 5:
      aw9110_led_blink(&led_dev_ctx, &aw9110_breath, brightnessarray, (0x09 << 1));    // green breathing
 80454f8:	2312      	movs	r3, #18
 80454fa:	4a18      	ldr	r2, [pc, #96]	; (804555c <led_config+0xfc>)
 80454fc:	4918      	ldr	r1, [pc, #96]	; (8045560 <led_config+0x100>)
 80454fe:	4816      	ldr	r0, [pc, #88]	; (8045558 <led_config+0xf8>)
 8045500:	f7ff fdaa 	bl	8045058 <aw9110_led_blink>
      break;
 8045504:	e022      	b.n	804554c <led_config+0xec>
    case 6:
      aw9110_led_blink(&led_dev_ctx, &aw9110_blink, brightnessarray, (0x09 << 1));     // green blinking
 8045506:	2312      	movs	r3, #18
 8045508:	4a14      	ldr	r2, [pc, #80]	; (804555c <led_config+0xfc>)
 804550a:	4916      	ldr	r1, [pc, #88]	; (8045564 <led_config+0x104>)
 804550c:	4812      	ldr	r0, [pc, #72]	; (8045558 <led_config+0xf8>)
 804550e:	f7ff fda3 	bl	8045058 <aw9110_led_blink>
      break;
 8045512:	e01b      	b.n	804554c <led_config+0xec>
    default:
      aw9110_led_on(&led_dev_ctx, brightnessarray, 0x09);       // red lighting
 8045514:	2209      	movs	r2, #9
 8045516:	4911      	ldr	r1, [pc, #68]	; (804555c <led_config+0xfc>)
 8045518:	480f      	ldr	r0, [pc, #60]	; (8045558 <led_config+0xf8>)
 804551a:	f7ff fe82 	bl	8045222 <aw9110_led_on>
      break;
 804551e:	e015      	b.n	804554c <led_config+0xec>
    }
  } else if (((config_data[0] >> 4) & 0x0F) == 2) {
 8045520:	68fb      	ldr	r3, [r7, #12]
 8045522:	781b      	ldrb	r3, [r3, #0]
 8045524:	091b      	lsrs	r3, r3, #4
 8045526:	b2db      	uxtb	r3, r3
 8045528:	f003 030f 	and.w	r3, r3, #15
 804552c:	2b02      	cmp	r3, #2
 804552e:	d10d      	bne.n	804554c <led_config+0xec>
	  if (config_type == 0) {
 8045530:	7afb      	ldrb	r3, [r7, #11]
 8045532:	2b00      	cmp	r3, #0
 8045534:	d105      	bne.n	8045542 <led_config+0xe2>
		  aw9110_led_on(&led_dev_ctx, brightnessarray, 0x3f);       // White lighting
 8045536:	223f      	movs	r2, #63	; 0x3f
 8045538:	4908      	ldr	r1, [pc, #32]	; (804555c <led_config+0xfc>)
 804553a:	4807      	ldr	r0, [pc, #28]	; (8045558 <led_config+0xf8>)
 804553c:	f7ff fe71 	bl	8045222 <aw9110_led_on>
 8045540:	e004      	b.n	804554c <led_config+0xec>
	  } else {
		  aw9110_led_on(&led_dev_ctx, brightnessarray, 0x09);       // red lighting
 8045542:	2209      	movs	r2, #9
 8045544:	4905      	ldr	r1, [pc, #20]	; (804555c <led_config+0xfc>)
 8045546:	4804      	ldr	r0, [pc, #16]	; (8045558 <led_config+0xf8>)
 8045548:	f7ff fe6b 	bl	8045222 <aw9110_led_on>
	  }
  }
  return SENSOR_SUCCESS;
 804554c:	2300      	movs	r3, #0
}
 804554e:	4618      	mov	r0, r3
 8045550:	3710      	adds	r7, #16
 8045552:	46bd      	mov	sp, r7
 8045554:	bd80      	pop	{r7, pc}
 8045556:	bf00      	nop
 8045558:	20007fdc 	.word	0x20007fdc
 804555c:	20007880 	.word	0x20007880
 8045560:	20007858 	.word	0x20007858
 8045564:	2000786c 	.word	0x2000786c

08045568 <led_publish_config_resp>:

int led_publish_config_resp(void *para)
{
 8045568:	b480      	push	{r7}
 804556a:	b083      	sub	sp, #12
 804556c:	af00      	add	r7, sp, #0
 804556e:	6078      	str	r0, [r7, #4]
  //send init complete event to smgr?
  return SENSOR_SUCCESS;
 8045570:	2300      	movs	r3, #0
}
 8045572:	4618      	mov	r0, r3
 8045574:	370c      	adds	r7, #12
 8045576:	46bd      	mov	sp, r7
 8045578:	f85d 7b04 	ldr.w	r7, [sp], #4
 804557c:	4770      	bx	lr
	...

08045580 <cal_process_sample>:
/* Extern variables ----------------------------------------------------------*/

/* Private functions ---------------------------------------------------------*/
static enum cal_state_e cal_process_sample(sensor_info_type * cal_data,
                                           float *input)
{
 8045580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8045582:	b087      	sub	sp, #28
 8045584:	af02      	add	r7, sp, #8
 8045586:	6078      	str	r0, [r7, #4]
 8045588:	6039      	str	r1, [r7, #0]
  uint8_t i;

  if (cal_data->cal_state != CAL_STATE_START) {
 804558a:	687b      	ldr	r3, [r7, #4]
 804558c:	7b1b      	ldrb	r3, [r3, #12]
 804558e:	2b00      	cmp	r3, #0
 8045590:	d001      	beq.n	8045596 <cal_process_sample+0x16>
    return CAL_STATE_UNKNOWN;
 8045592:	2301      	movs	r3, #1
 8045594:	e17a      	b.n	804588c <cal_process_sample+0x30c>
  }

  if (cal_data->cal_dynm_data.sample_count == 0) {
 8045596:	687b      	ldr	r3, [r7, #4]
 8045598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 804559a:	2b00      	cmp	r3, #0
 804559c:	d123      	bne.n	80455e6 <cal_process_sample+0x66>
    for (i = 0; i < cal_data->cal_config.cols; i++) {
 804559e:	2300      	movs	r3, #0
 80455a0:	73fb      	strb	r3, [r7, #15]
 80455a2:	e01b      	b.n	80455dc <cal_process_sample+0x5c>
      cal_data->cal_dynm_data.sample_sum[i] = 0;
 80455a4:	7bfb      	ldrb	r3, [r7, #15]
 80455a6:	687a      	ldr	r2, [r7, #4]
 80455a8:	3312      	adds	r3, #18
 80455aa:	009b      	lsls	r3, r3, #2
 80455ac:	4413      	add	r3, r2
 80455ae:	f04f 0200 	mov.w	r2, #0
 80455b2:	601a      	str	r2, [r3, #0]
      cal_data->cal_dynm_data.sample_sqsum[i] = 0;
 80455b4:	7bfb      	ldrb	r3, [r7, #15]
 80455b6:	687a      	ldr	r2, [r7, #4]
 80455b8:	330e      	adds	r3, #14
 80455ba:	009b      	lsls	r3, r3, #2
 80455bc:	4413      	add	r3, r2
 80455be:	3304      	adds	r3, #4
 80455c0:	f04f 0200 	mov.w	r2, #0
 80455c4:	601a      	str	r2, [r3, #0]
      cal_data->cal_dynm_data.variance[i] = 0;
 80455c6:	7bfb      	ldrb	r3, [r7, #15]
 80455c8:	687a      	ldr	r2, [r7, #4]
 80455ca:	330c      	adds	r3, #12
 80455cc:	009b      	lsls	r3, r3, #2
 80455ce:	4413      	add	r3, r2
 80455d0:	f04f 0200 	mov.w	r2, #0
 80455d4:	601a      	str	r2, [r3, #0]
    for (i = 0; i < cal_data->cal_config.cols; i++) {
 80455d6:	7bfb      	ldrb	r3, [r7, #15]
 80455d8:	3301      	adds	r3, #1
 80455da:	73fb      	strb	r3, [r7, #15]
 80455dc:	7bfa      	ldrb	r2, [r7, #15]
 80455de:	687b      	ldr	r3, [r7, #4]
 80455e0:	691b      	ldr	r3, [r3, #16]
 80455e2:	429a      	cmp	r2, r3
 80455e4:	dbde      	blt.n	80455a4 <cal_process_sample+0x24>
    }
  }

  cal_data->cal_dynm_data.sample_count++;
 80455e6:	687b      	ldr	r3, [r7, #4]
 80455e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80455ea:	1c5a      	adds	r2, r3, #1
 80455ec:	687b      	ldr	r3, [r7, #4]
 80455ee:	655a      	str	r2, [r3, #84]	; 0x54

  for (i = 0; i < cal_data->cal_config.cols; i++) {
 80455f0:	2300      	movs	r3, #0
 80455f2:	73fb      	strb	r3, [r7, #15]
 80455f4:	e038      	b.n	8045668 <cal_process_sample+0xe8>
    cal_data->cal_dynm_data.sample_sum[i] += input[i];
 80455f6:	7bfb      	ldrb	r3, [r7, #15]
 80455f8:	687a      	ldr	r2, [r7, #4]
 80455fa:	3312      	adds	r3, #18
 80455fc:	009b      	lsls	r3, r3, #2
 80455fe:	4413      	add	r3, r2
 8045600:	ed93 7a00 	vldr	s14, [r3]
 8045604:	7bfb      	ldrb	r3, [r7, #15]
 8045606:	009b      	lsls	r3, r3, #2
 8045608:	683a      	ldr	r2, [r7, #0]
 804560a:	4413      	add	r3, r2
 804560c:	edd3 7a00 	vldr	s15, [r3]
 8045610:	7bfb      	ldrb	r3, [r7, #15]
 8045612:	ee77 7a27 	vadd.f32	s15, s14, s15
 8045616:	687a      	ldr	r2, [r7, #4]
 8045618:	3312      	adds	r3, #18
 804561a:	009b      	lsls	r3, r3, #2
 804561c:	4413      	add	r3, r2
 804561e:	edc3 7a00 	vstr	s15, [r3]
    cal_data->cal_dynm_data.sample_sqsum[i] += (input[i] * input[i]);
 8045622:	7bfb      	ldrb	r3, [r7, #15]
 8045624:	687a      	ldr	r2, [r7, #4]
 8045626:	330e      	adds	r3, #14
 8045628:	009b      	lsls	r3, r3, #2
 804562a:	4413      	add	r3, r2
 804562c:	3304      	adds	r3, #4
 804562e:	ed93 7a00 	vldr	s14, [r3]
 8045632:	7bfb      	ldrb	r3, [r7, #15]
 8045634:	009b      	lsls	r3, r3, #2
 8045636:	683a      	ldr	r2, [r7, #0]
 8045638:	4413      	add	r3, r2
 804563a:	edd3 6a00 	vldr	s13, [r3]
 804563e:	7bfb      	ldrb	r3, [r7, #15]
 8045640:	009b      	lsls	r3, r3, #2
 8045642:	683a      	ldr	r2, [r7, #0]
 8045644:	4413      	add	r3, r2
 8045646:	edd3 7a00 	vldr	s15, [r3]
 804564a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 804564e:	7bfb      	ldrb	r3, [r7, #15]
 8045650:	ee77 7a27 	vadd.f32	s15, s14, s15
 8045654:	687a      	ldr	r2, [r7, #4]
 8045656:	330e      	adds	r3, #14
 8045658:	009b      	lsls	r3, r3, #2
 804565a:	4413      	add	r3, r2
 804565c:	3304      	adds	r3, #4
 804565e:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < cal_data->cal_config.cols; i++) {
 8045662:	7bfb      	ldrb	r3, [r7, #15]
 8045664:	3301      	adds	r3, #1
 8045666:	73fb      	strb	r3, [r7, #15]
 8045668:	7bfa      	ldrb	r2, [r7, #15]
 804566a:	687b      	ldr	r3, [r7, #4]
 804566c:	691b      	ldr	r3, [r3, #16]
 804566e:	429a      	cmp	r2, r3
 8045670:	dbc1      	blt.n	80455f6 <cal_process_sample+0x76>
  }

  if (cal_data->cal_dynm_data.sample_count == cal_data->cal_config.num_samples) {
 8045672:	687b      	ldr	r3, [r7, #4]
 8045674:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8045676:	687b      	ldr	r3, [r7, #4]
 8045678:	695b      	ldr	r3, [r3, #20]
 804567a:	429a      	cmp	r2, r3
 804567c:	f040 8105 	bne.w	804588a <cal_process_sample+0x30a>
    float varT;

    for (i = 0; i < cal_data->cal_config.cols; i++) {
 8045680:	2300      	movs	r3, #0
 8045682:	73fb      	strb	r3, [r7, #15]
 8045684:	e0d6      	b.n	8045834 <cal_process_sample+0x2b4>
      varT = (cal_data->cal_dynm_data.sample_sum[i]
 8045686:	7bfb      	ldrb	r3, [r7, #15]
 8045688:	687a      	ldr	r2, [r7, #4]
 804568a:	3312      	adds	r3, #18
 804568c:	009b      	lsls	r3, r3, #2
 804568e:	4413      	add	r3, r2
 8045690:	ed93 7a00 	vldr	s14, [r3]
              * cal_data->cal_dynm_data.sample_sum[i]);
 8045694:	7bfb      	ldrb	r3, [r7, #15]
 8045696:	687a      	ldr	r2, [r7, #4]
 8045698:	3312      	adds	r3, #18
 804569a:	009b      	lsls	r3, r3, #2
 804569c:	4413      	add	r3, r2
 804569e:	edd3 7a00 	vldr	s15, [r3]
      varT = (cal_data->cal_dynm_data.sample_sum[i]
 80456a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80456a6:	edc7 7a02 	vstr	s15, [r7, #8]

      cal_data->cal_dynm_data.variance[i] =
          (cal_data->cal_dynm_data.sample_sqsum[i]
 80456aa:	7bfb      	ldrb	r3, [r7, #15]
 80456ac:	687a      	ldr	r2, [r7, #4]
 80456ae:	330e      	adds	r3, #14
 80456b0:	009b      	lsls	r3, r3, #2
 80456b2:	4413      	add	r3, r2
 80456b4:	3304      	adds	r3, #4
 80456b6:	ed93 7a00 	vldr	s14, [r3]
           - (varT / cal_data->cal_config.num_samples))
 80456ba:	687b      	ldr	r3, [r7, #4]
 80456bc:	695b      	ldr	r3, [r3, #20]
 80456be:	ee07 3a90 	vmov	s15, r3
 80456c2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80456c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80456ca:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80456ce:	ee77 6a67 	vsub.f32	s13, s14, s15
          / cal_data->cal_config.num_samples;
 80456d2:	687b      	ldr	r3, [r7, #4]
 80456d4:	695b      	ldr	r3, [r3, #20]
 80456d6:	ee07 3a90 	vmov	s15, r3
 80456da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      cal_data->cal_dynm_data.variance[i] =
 80456de:	7bfb      	ldrb	r3, [r7, #15]
          / cal_data->cal_config.num_samples;
 80456e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
      cal_data->cal_dynm_data.variance[i] =
 80456e4:	687a      	ldr	r2, [r7, #4]
 80456e6:	330c      	adds	r3, #12
 80456e8:	009b      	lsls	r3, r3, #2
 80456ea:	4413      	add	r3, r2
 80456ec:	edc3 7a00 	vstr	s15, [r3]

      if (cal_data->cal_dynm_data.variance[i]
 80456f0:	7bfb      	ldrb	r3, [r7, #15]
 80456f2:	687a      	ldr	r2, [r7, #4]
 80456f4:	330c      	adds	r3, #12
 80456f6:	009b      	lsls	r3, r3, #2
 80456f8:	4413      	add	r3, r2
 80456fa:	ed93 7a00 	vldr	s14, [r3]
          > cal_data->cal_config.variance_threshold) {
 80456fe:	687b      	ldr	r3, [r7, #4]
 8045700:	edd3 7a06 	vldr	s15, [r3, #24]
      if (cal_data->cal_dynm_data.variance[i]
 8045704:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8045708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 804570c:	dd1f      	ble.n	804574e <cal_process_sample+0x1ce>
        printf
 804570e:	7bfe      	ldrb	r6, [r7, #15]
            ("Variance exceeded, restarting algorithm. index: %i; variance: %9.4f; variance threshold: %9.4f",
             i, cal_data->cal_dynm_data.variance[i],
 8045710:	7bfb      	ldrb	r3, [r7, #15]
 8045712:	687a      	ldr	r2, [r7, #4]
 8045714:	330c      	adds	r3, #12
 8045716:	009b      	lsls	r3, r3, #2
 8045718:	4413      	add	r3, r2
 804571a:	681b      	ldr	r3, [r3, #0]
        printf
 804571c:	4618      	mov	r0, r3
 804571e:	f7fa ff13 	bl	8040548 <__aeabi_f2d>
 8045722:	4604      	mov	r4, r0
 8045724:	460d      	mov	r5, r1
             cal_data->cal_config.variance_threshold);
 8045726:	687b      	ldr	r3, [r7, #4]
 8045728:	699b      	ldr	r3, [r3, #24]
        printf
 804572a:	4618      	mov	r0, r3
 804572c:	f7fa ff0c 	bl	8040548 <__aeabi_f2d>
 8045730:	4602      	mov	r2, r0
 8045732:	460b      	mov	r3, r1
 8045734:	e9cd 2300 	strd	r2, r3, [sp]
 8045738:	4622      	mov	r2, r4
 804573a:	462b      	mov	r3, r5
 804573c:	4631      	mov	r1, r6
 804573e:	4855      	ldr	r0, [pc, #340]	; (8045894 <cal_process_sample+0x314>)
 8045740:	f01b f918 	bl	8060974 <iprintf>
        //indicate motion state detected, reset algorithm state
        cal_data->cal_dynm_data.sample_count = 0;
 8045744:	687b      	ldr	r3, [r7, #4]
 8045746:	2200      	movs	r2, #0
 8045748:	655a      	str	r2, [r3, #84]	; 0x54
        return CAL_STATE_MOVING;
 804574a:	2303      	movs	r3, #3
 804574c:	e09e      	b.n	804588c <cal_process_sample+0x30c>
      } else if ((0 == cal_data->cal_dynm_data.variance[i])
 804574e:	7bfb      	ldrb	r3, [r7, #15]
 8045750:	687a      	ldr	r2, [r7, #4]
 8045752:	330c      	adds	r3, #12
 8045754:	009b      	lsls	r3, r3, #2
 8045756:	4413      	add	r3, r2
 8045758:	edd3 7a00 	vldr	s15, [r3]
 804575c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8045760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8045764:	d118      	bne.n	8045798 <cal_process_sample+0x218>
                 && cal_data->cal_config.check_zero_variance) {
 8045766:	687b      	ldr	r3, [r7, #4]
 8045768:	7f1b      	ldrb	r3, [r3, #28]
 804576a:	2b00      	cmp	r3, #0
 804576c:	d014      	beq.n	8045798 <cal_process_sample+0x218>
        printf
 804576e:	7bfc      	ldrb	r4, [r7, #15]
            ("Zero variance found, restarting algorithm. index: %i; variance: %9.4f",
             i, cal_data->cal_dynm_data.variance[i]);
 8045770:	7bfb      	ldrb	r3, [r7, #15]
 8045772:	687a      	ldr	r2, [r7, #4]
 8045774:	330c      	adds	r3, #12
 8045776:	009b      	lsls	r3, r3, #2
 8045778:	4413      	add	r3, r2
 804577a:	681b      	ldr	r3, [r3, #0]
        printf
 804577c:	4618      	mov	r0, r3
 804577e:	f7fa fee3 	bl	8040548 <__aeabi_f2d>
 8045782:	4602      	mov	r2, r0
 8045784:	460b      	mov	r3, r1
 8045786:	4621      	mov	r1, r4
 8045788:	4843      	ldr	r0, [pc, #268]	; (8045898 <cal_process_sample+0x318>)
 804578a:	f01b f8f3 	bl	8060974 <iprintf>

        cal_data->cal_dynm_data.sample_count = 0;
 804578e:	687b      	ldr	r3, [r7, #4]
 8045790:	2200      	movs	r2, #0
 8045792:	655a      	str	r2, [r3, #84]	; 0x54
        return CAL_STATE_NO_VAR;
 8045794:	2304      	movs	r3, #4
 8045796:	e079      	b.n	804588c <cal_process_sample+0x30c>
      } else if (fabsf(cal_data->cal_dynm_data.sample_sum[i]
 8045798:	7bfb      	ldrb	r3, [r7, #15]
 804579a:	687a      	ldr	r2, [r7, #4]
 804579c:	3312      	adds	r3, #18
 804579e:	009b      	lsls	r3, r3, #2
 80457a0:	4413      	add	r3, r2
 80457a2:	edd3 6a00 	vldr	s13, [r3]
                       / cal_data->cal_config.num_samples)
 80457a6:	687b      	ldr	r3, [r7, #4]
 80457a8:	695b      	ldr	r3, [r3, #20]
 80457aa:	ee07 3a90 	vmov	s15, r3
 80457ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80457b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
      } else if (fabsf(cal_data->cal_dynm_data.sample_sum[i]
 80457b6:	eeb0 7ae7 	vabs.f32	s14, s15
                 > cal_data->cal_config.bias_thresholds[i]) {
 80457ba:	7bfb      	ldrb	r3, [r7, #15]
 80457bc:	687a      	ldr	r2, [r7, #4]
 80457be:	3308      	adds	r3, #8
 80457c0:	009b      	lsls	r3, r3, #2
 80457c2:	4413      	add	r3, r2
 80457c4:	edd3 7a00 	vldr	s15, [r3]
      } else if (fabsf(cal_data->cal_dynm_data.sample_sum[i]
 80457c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80457cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80457d0:	dd2d      	ble.n	804582e <cal_process_sample+0x2ae>
        printf
 80457d2:	7bfe      	ldrb	r6, [r7, #15]
            ("High BIAS found, restarting algorithm. index: %i; bias: %9.4f, threshold: %9.4f",
             i, cal_data->cal_dynm_data.sample_sum[i]
 80457d4:	7bfb      	ldrb	r3, [r7, #15]
 80457d6:	687a      	ldr	r2, [r7, #4]
 80457d8:	3312      	adds	r3, #18
 80457da:	009b      	lsls	r3, r3, #2
 80457dc:	4413      	add	r3, r2
 80457de:	ed93 7a00 	vldr	s14, [r3]
             / cal_data->cal_config.num_samples,
 80457e2:	687b      	ldr	r3, [r7, #4]
 80457e4:	695b      	ldr	r3, [r3, #20]
 80457e6:	ee07 3a90 	vmov	s15, r3
 80457ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80457ee:	eec7 6a27 	vdiv.f32	s13, s14, s15
        printf
 80457f2:	ee16 0a90 	vmov	r0, s13
 80457f6:	f7fa fea7 	bl	8040548 <__aeabi_f2d>
 80457fa:	4604      	mov	r4, r0
 80457fc:	460d      	mov	r5, r1
             cal_data->cal_config.bias_thresholds[i]);
 80457fe:	7bfb      	ldrb	r3, [r7, #15]
 8045800:	687a      	ldr	r2, [r7, #4]
 8045802:	3308      	adds	r3, #8
 8045804:	009b      	lsls	r3, r3, #2
 8045806:	4413      	add	r3, r2
 8045808:	681b      	ldr	r3, [r3, #0]
        printf
 804580a:	4618      	mov	r0, r3
 804580c:	f7fa fe9c 	bl	8040548 <__aeabi_f2d>
 8045810:	4602      	mov	r2, r0
 8045812:	460b      	mov	r3, r1
 8045814:	e9cd 2300 	strd	r2, r3, [sp]
 8045818:	4622      	mov	r2, r4
 804581a:	462b      	mov	r3, r5
 804581c:	4631      	mov	r1, r6
 804581e:	481f      	ldr	r0, [pc, #124]	; (804589c <cal_process_sample+0x31c>)
 8045820:	f01b f8a8 	bl	8060974 <iprintf>

        cal_data->cal_dynm_data.sample_count = 0;
 8045824:	687b      	ldr	r3, [r7, #4]
 8045826:	2200      	movs	r2, #0
 8045828:	655a      	str	r2, [r3, #84]	; 0x54
        return CAL_STATE_HI_BIAS;
 804582a:	2305      	movs	r3, #5
 804582c:	e02e      	b.n	804588c <cal_process_sample+0x30c>
    for (i = 0; i < cal_data->cal_config.cols; i++) {
 804582e:	7bfb      	ldrb	r3, [r7, #15]
 8045830:	3301      	adds	r3, #1
 8045832:	73fb      	strb	r3, [r7, #15]
 8045834:	7bfa      	ldrb	r2, [r7, #15]
 8045836:	687b      	ldr	r3, [r7, #4]
 8045838:	691b      	ldr	r3, [r3, #16]
 804583a:	429a      	cmp	r2, r3
 804583c:	f6ff af23 	blt.w	8045686 <cal_process_sample+0x106>
      }
    }

    for (i = 0; i < cal_data->cal_config.cols; i++) {
 8045840:	2300      	movs	r3, #0
 8045842:	73fb      	strb	r3, [r7, #15]
 8045844:	e017      	b.n	8045876 <cal_process_sample+0x2f6>
      cal_data->offset[i] = cal_data->cal_dynm_data.sample_sum[i]
 8045846:	7bfb      	ldrb	r3, [r7, #15]
 8045848:	687a      	ldr	r2, [r7, #4]
 804584a:	3312      	adds	r3, #18
 804584c:	009b      	lsls	r3, r3, #2
 804584e:	4413      	add	r3, r2
 8045850:	edd3 6a00 	vldr	s13, [r3]
          / cal_data->cal_config.num_samples;
 8045854:	687b      	ldr	r3, [r7, #4]
 8045856:	695b      	ldr	r3, [r3, #20]
 8045858:	ee07 3a90 	vmov	s15, r3
 804585c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      cal_data->offset[i] = cal_data->cal_dynm_data.sample_sum[i]
 8045860:	7bfb      	ldrb	r3, [r7, #15]
          / cal_data->cal_config.num_samples;
 8045862:	eec6 7a87 	vdiv.f32	s15, s13, s14
      cal_data->offset[i] = cal_data->cal_dynm_data.sample_sum[i]
 8045866:	687a      	ldr	r2, [r7, #4]
 8045868:	009b      	lsls	r3, r3, #2
 804586a:	4413      	add	r3, r2
 804586c:	edc3 7a00 	vstr	s15, [r3]
    for (i = 0; i < cal_data->cal_config.cols; i++) {
 8045870:	7bfb      	ldrb	r3, [r7, #15]
 8045872:	3301      	adds	r3, #1
 8045874:	73fb      	strb	r3, [r7, #15]
 8045876:	7bfa      	ldrb	r2, [r7, #15]
 8045878:	687b      	ldr	r3, [r7, #4]
 804587a:	691b      	ldr	r3, [r3, #16]
 804587c:	429a      	cmp	r2, r3
 804587e:	dbe2      	blt.n	8045846 <cal_process_sample+0x2c6>
    }

    cal_data->cal_state = CAL_STATE_SUCCESS;
 8045880:	687b      	ldr	r3, [r7, #4]
 8045882:	2202      	movs	r2, #2
 8045884:	731a      	strb	r2, [r3, #12]
    return CAL_STATE_SUCCESS;
 8045886:	2302      	movs	r3, #2
 8045888:	e000      	b.n	804588c <cal_process_sample+0x30c>
  }

  return CAL_STATE_UNKNOWN;
 804588a:	2301      	movs	r3, #1
}
 804588c:	4618      	mov	r0, r3
 804588e:	3714      	adds	r7, #20
 8045890:	46bd      	mov	sp, r7
 8045892:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8045894:	080656a4 	.word	0x080656a4
 8045898:	08065704 	.word	0x08065704
 804589c:	0806574c 	.word	0x0806574c

080458a0 <lsm6dso_reinit_device>:
 */
static void platform_delay(uint32_t ms);

/* Main function --------------------------------------------------------------*/
static void lsm6dso_reinit_device(stmdev_ctx_t * ctx)
{
 80458a0:	b580      	push	{r7, lr}
 80458a2:	b084      	sub	sp, #16
 80458a4:	af00      	add	r7, sp, #0
 80458a6:	6078      	str	r0, [r7, #4]
  uint8_t rst;

  lsm6dso_reset_set(ctx, PROPERTY_ENABLE);
 80458a8:	2101      	movs	r1, #1
 80458aa:	6878      	ldr	r0, [r7, #4]
 80458ac:	f002 f9bc 	bl	8047c28 <lsm6dso_reset_set>

  do {
    lsm6dso_reset_get(ctx, &rst);
 80458b0:	f107 030f 	add.w	r3, r7, #15
 80458b4:	4619      	mov	r1, r3
 80458b6:	6878      	ldr	r0, [r7, #4]
 80458b8:	f002 f9dc 	bl	8047c74 <lsm6dso_reset_get>
  } while (rst);
 80458bc:	7bfb      	ldrb	r3, [r7, #15]
 80458be:	2b00      	cmp	r3, #0
 80458c0:	d1f6      	bne.n	80458b0 <lsm6dso_reinit_device+0x10>

  lsm6dso_block_data_update_set(ctx, PROPERTY_DISABLE);
 80458c2:	2100      	movs	r1, #0
 80458c4:	6878      	ldr	r0, [r7, #4]
 80458c6:	f002 f8c3 	bl	8047a50 <lsm6dso_block_data_update_set>
  /* Disable I3C interface */
  lsm6dso_i3c_disable_set(ctx, LSM6DSO_I3C_DISABLE);
 80458ca:	2180      	movs	r1, #128	; 0x80
 80458cc:	6878      	ldr	r0, [r7, #4]
 80458ce:	f002 fa94 	bl	8047dfa <lsm6dso_i3c_disable_set>
  /* Set Output Data Rate */
  lsm6dso_xl_data_rate_set(ctx, LSM6DSO_XL_ODR_104Hz);
 80458d2:	2104      	movs	r1, #4
 80458d4:	6878      	ldr	r0, [r7, #4]
 80458d6:	f001 fe9d 	bl	8047614 <lsm6dso_xl_data_rate_set>
  lsm6dso_gy_data_rate_set(ctx, LSM6DSO_GY_ODR_104Hz);
 80458da:	2104      	movs	r1, #4
 80458dc:	6878      	ldr	r0, [r7, #4]
 80458de:	f001 ffbb 	bl	8047858 <lsm6dso_gy_data_rate_set>
  /* Set full scale */
  lsm6dso_xl_full_scale_set(ctx, LSM6DSO_8g);
 80458e2:	2103      	movs	r1, #3
 80458e4:	6878      	ldr	r0, [r7, #4]
 80458e6:	f001 fe6f 	bl	80475c8 <lsm6dso_xl_full_scale_set>
  lsm6dso_gy_full_scale_set(ctx, LSM6DSO_1000dps);
 80458ea:	2104      	movs	r1, #4
 80458ec:	6878      	ldr	r0, [r7, #4]
 80458ee:	f001 ff8d 	bl	804780c <lsm6dso_gy_full_scale_set>
  /* Configure filtering chain(No aux interface)
   * Accelerometer - LPF1 + LPF2 path
   */
  lsm6dso_xl_hp_path_on_out_set(ctx, LSM6DSO_LP_ODR_DIV_100);
 80458f2:	2104      	movs	r1, #4
 80458f4:	6878      	ldr	r0, [r7, #4]
 80458f6:	f002 fa48 	bl	8047d8a <lsm6dso_xl_hp_path_on_out_set>
  lsm6dso_xl_filter_lp2_set(ctx, PROPERTY_ENABLE);
 80458fa:	2101      	movs	r1, #1
 80458fc:	6878      	ldr	r0, [r7, #4]
 80458fe:	f002 fa1e 	bl	8047d3e <lsm6dso_xl_filter_lp2_set>
}
 8045902:	bf00      	nop
 8045904:	3710      	adds	r7, #16
 8045906:	46bd      	mov	sp, r7
 8045908:	bd80      	pop	{r7, pc}
	...

0804590c <lsm6dso_acc_self_test>:

int32_t lsm6dso_acc_self_test(stmdev_ctx_t * ctx)
{
 804590c:	b580      	push	{r7, lr}
 804590e:	b090      	sub	sp, #64	; 0x40
 8045910:	af00      	add	r7, sp, #0
 8045912:	6078      	str	r0, [r7, #4]
  uint8_t rst;
  uint8_t i;
  uint8_t j;

  /* Restore default configuration */
  lsm6dso_reset_set(ctx, PROPERTY_ENABLE);
 8045914:	2101      	movs	r1, #1
 8045916:	6878      	ldr	r0, [r7, #4]
 8045918:	f002 f986 	bl	8047c28 <lsm6dso_reset_set>

  do {
    lsm6dso_reset_get(ctx, &rst);
 804591c:	f107 030e 	add.w	r3, r7, #14
 8045920:	4619      	mov	r1, r3
 8045922:	6878      	ldr	r0, [r7, #4]
 8045924:	f002 f9a6 	bl	8047c74 <lsm6dso_reset_get>
  } while (rst);
 8045928:	7bbb      	ldrb	r3, [r7, #14]
 804592a:	2b00      	cmp	r3, #0
 804592c:	d1f6      	bne.n	804591c <lsm6dso_acc_self_test+0x10>

  /* Disable I3C interface */
  lsm6dso_i3c_disable_set(ctx, LSM6DSO_I3C_DISABLE);
 804592e:	2180      	movs	r1, #128	; 0x80
 8045930:	6878      	ldr	r0, [r7, #4]
 8045932:	f002 fa62 	bl	8047dfa <lsm6dso_i3c_disable_set>
  /* Enable Block Data Update */
  lsm6dso_block_data_update_set(ctx, PROPERTY_ENABLE);
 8045936:	2101      	movs	r1, #1
 8045938:	6878      	ldr	r0, [r7, #4]
 804593a:	f002 f889 	bl	8047a50 <lsm6dso_block_data_update_set>

  /*
   * Accelerometer Self Test
   */
  /* Set Output Data Rate */
  lsm6dso_xl_data_rate_set(ctx, LSM6DSO_XL_ODR_52Hz);
 804593e:	2103      	movs	r1, #3
 8045940:	6878      	ldr	r0, [r7, #4]
 8045942:	f001 fe67 	bl	8047614 <lsm6dso_xl_data_rate_set>
  /* Set full scale */
  lsm6dso_xl_full_scale_set(ctx, LSM6DSO_4g);
 8045946:	2102      	movs	r1, #2
 8045948:	6878      	ldr	r0, [r7, #4]
 804594a:	f001 fe3d 	bl	80475c8 <lsm6dso_xl_full_scale_set>
  /* Wait stable output */
  platform_delay(100);
 804594e:	2064      	movs	r0, #100	; 0x64
 8045950:	f000 fddc 	bl	804650c <platform_delay>

  /* Check if new value available */
  do {
    lsm6dso_xl_flag_data_ready_get(ctx, &drdy);
 8045954:	f107 030f 	add.w	r3, r7, #15
 8045958:	4619      	mov	r1, r3
 804595a:	6878      	ldr	r0, [r7, #4]
 804595c:	f002 f8af 	bl	8047abe <lsm6dso_xl_flag_data_ready_get>
  } while (!drdy);
 8045960:	7bfb      	ldrb	r3, [r7, #15]
 8045962:	2b00      	cmp	r3, #0
 8045964:	d0f6      	beq.n	8045954 <lsm6dso_acc_self_test+0x48>

  /* Read dummy data and discard it */
  lsm6dso_acceleration_raw_get(ctx, data_raw.u8bit);
 8045966:	f107 0334 	add.w	r3, r7, #52	; 0x34
 804596a:	4619      	mov	r1, r3
 804596c:	6878      	ldr	r0, [r7, #4]
 804596e:	f002 f913 	bl	8047b98 <lsm6dso_acceleration_raw_get>
  /* Read 5 sample and get the average vale for each axis */
  memset(val_st_off, 0x00, 3 * sizeof(float));
 8045972:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8045976:	220c      	movs	r2, #12
 8045978:	2100      	movs	r1, #0
 804597a:	4618      	mov	r0, r3
 804597c:	f01a fb1e 	bl	805ffbc <memset>

  for (i = 0; i < 5; i++) {
 8045980:	2300      	movs	r3, #0
 8045982:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8045986:	e041      	b.n	8045a0c <lsm6dso_acc_self_test+0x100>
    /* Check if new value available */
    do {
      lsm6dso_xl_flag_data_ready_get(ctx, &drdy);
 8045988:	f107 030f 	add.w	r3, r7, #15
 804598c:	4619      	mov	r1, r3
 804598e:	6878      	ldr	r0, [r7, #4]
 8045990:	f002 f895 	bl	8047abe <lsm6dso_xl_flag_data_ready_get>
    } while (!drdy);
 8045994:	7bfb      	ldrb	r3, [r7, #15]
 8045996:	2b00      	cmp	r3, #0
 8045998:	d0f6      	beq.n	8045988 <lsm6dso_acc_self_test+0x7c>

    /* Read data and accumulate the mg value */
    lsm6dso_acceleration_raw_get(ctx, data_raw.u8bit);
 804599a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 804599e:	4619      	mov	r1, r3
 80459a0:	6878      	ldr	r0, [r7, #4]
 80459a2:	f002 f8f9 	bl	8047b98 <lsm6dso_acceleration_raw_get>

    for (j = 0; j < 3; j++) {
 80459a6:	2300      	movs	r3, #0
 80459a8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80459ac:	e025      	b.n	80459fa <lsm6dso_acc_self_test+0xee>
      val_st_off[j] += lsm6dso_from_fs4_to_mg(data_raw.i16bit[j]);
 80459ae:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80459b2:	005b      	lsls	r3, r3, #1
 80459b4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80459b8:	4413      	add	r3, r2
 80459ba:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 80459be:	4618      	mov	r0, r3
 80459c0:	f001 fd86 	bl	80474d0 <lsm6dso_from_fs4_to_mg>
 80459c4:	eeb0 7a40 	vmov.f32	s14, s0
 80459c8:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80459cc:	009b      	lsls	r3, r3, #2
 80459ce:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80459d2:	4413      	add	r3, r2
 80459d4:	3b18      	subs	r3, #24
 80459d6:	edd3 7a00 	vldr	s15, [r3]
 80459da:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80459de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80459e2:	009b      	lsls	r3, r3, #2
 80459e4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80459e8:	4413      	add	r3, r2
 80459ea:	3b18      	subs	r3, #24
 80459ec:	edc3 7a00 	vstr	s15, [r3]
    for (j = 0; j < 3; j++) {
 80459f0:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80459f4:	3301      	adds	r3, #1
 80459f6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80459fa:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80459fe:	2b02      	cmp	r3, #2
 8045a00:	d9d5      	bls.n	80459ae <lsm6dso_acc_self_test+0xa2>
  for (i = 0; i < 5; i++) {
 8045a02:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8045a06:	3301      	adds	r3, #1
 8045a08:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8045a0c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8045a10:	2b04      	cmp	r3, #4
 8045a12:	d9b9      	bls.n	8045988 <lsm6dso_acc_self_test+0x7c>
    }
  }

  /* Calculate the mg average values */
  for (i = 0; i < 3; i++) {
 8045a14:	2300      	movs	r3, #0
 8045a16:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8045a1a:	e01a      	b.n	8045a52 <lsm6dso_acc_self_test+0x146>
    val_st_off[i] /= 5.0f;
 8045a1c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8045a20:	009b      	lsls	r3, r3, #2
 8045a22:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8045a26:	4413      	add	r3, r2
 8045a28:	3b18      	subs	r3, #24
 8045a2a:	ed93 7a00 	vldr	s14, [r3]
 8045a2e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8045a32:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8045a36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8045a3a:	009b      	lsls	r3, r3, #2
 8045a3c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8045a40:	4413      	add	r3, r2
 8045a42:	3b18      	subs	r3, #24
 8045a44:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 3; i++) {
 8045a48:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8045a4c:	3301      	adds	r3, #1
 8045a4e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8045a52:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8045a56:	2b02      	cmp	r3, #2
 8045a58:	d9e0      	bls.n	8045a1c <lsm6dso_acc_self_test+0x110>
  }

  /* Enable Self Test positive (or negative) */
  lsm6dso_xl_self_test_set(ctx, LSM6DSO_XL_ST_NEGATIVE);
 8045a5a:	2102      	movs	r1, #2
 8045a5c:	6878      	ldr	r0, [r7, #4]
 8045a5e:	f002 f922 	bl	8047ca6 <lsm6dso_xl_self_test_set>
  //lsm6dso_xl_self_test_set(ctx, LSM6DSO_XL_ST_POSITIVE);
  /* Wait stable output */
  platform_delay(100);
 8045a62:	2064      	movs	r0, #100	; 0x64
 8045a64:	f000 fd52 	bl	804650c <platform_delay>

  /* Check if new value available */
  do {
    lsm6dso_xl_flag_data_ready_get(ctx, &drdy);
 8045a68:	f107 030f 	add.w	r3, r7, #15
 8045a6c:	4619      	mov	r1, r3
 8045a6e:	6878      	ldr	r0, [r7, #4]
 8045a70:	f002 f825 	bl	8047abe <lsm6dso_xl_flag_data_ready_get>
  } while (!drdy);
 8045a74:	7bfb      	ldrb	r3, [r7, #15]
 8045a76:	2b00      	cmp	r3, #0
 8045a78:	d0f6      	beq.n	8045a68 <lsm6dso_acc_self_test+0x15c>

  /* Read dummy data and discard it */
  lsm6dso_acceleration_raw_get(ctx, data_raw.u8bit);
 8045a7a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8045a7e:	4619      	mov	r1, r3
 8045a80:	6878      	ldr	r0, [r7, #4]
 8045a82:	f002 f889 	bl	8047b98 <lsm6dso_acceleration_raw_get>
  /* Read 5 sample and get the average vale for each axis */
  memset(val_st_on, 0x00, 3 * sizeof(float));
 8045a86:	f107 031c 	add.w	r3, r7, #28
 8045a8a:	220c      	movs	r2, #12
 8045a8c:	2100      	movs	r1, #0
 8045a8e:	4618      	mov	r0, r3
 8045a90:	f01a fa94 	bl	805ffbc <memset>

  for (i = 0; i < 5; i++) {
 8045a94:	2300      	movs	r3, #0
 8045a96:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8045a9a:	e041      	b.n	8045b20 <lsm6dso_acc_self_test+0x214>
    /* Check if new value available */
    do {
      lsm6dso_xl_flag_data_ready_get(ctx, &drdy);
 8045a9c:	f107 030f 	add.w	r3, r7, #15
 8045aa0:	4619      	mov	r1, r3
 8045aa2:	6878      	ldr	r0, [r7, #4]
 8045aa4:	f002 f80b 	bl	8047abe <lsm6dso_xl_flag_data_ready_get>
    } while (!drdy);
 8045aa8:	7bfb      	ldrb	r3, [r7, #15]
 8045aaa:	2b00      	cmp	r3, #0
 8045aac:	d0f6      	beq.n	8045a9c <lsm6dso_acc_self_test+0x190>

    /* Read data and accumulate the mg value */
    lsm6dso_acceleration_raw_get(ctx, data_raw.u8bit);
 8045aae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8045ab2:	4619      	mov	r1, r3
 8045ab4:	6878      	ldr	r0, [r7, #4]
 8045ab6:	f002 f86f 	bl	8047b98 <lsm6dso_acceleration_raw_get>

    for (j = 0; j < 3; j++) {
 8045aba:	2300      	movs	r3, #0
 8045abc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8045ac0:	e025      	b.n	8045b0e <lsm6dso_acc_self_test+0x202>
      val_st_on[j] += lsm6dso_from_fs4_to_mg(data_raw.i16bit[j]);
 8045ac2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8045ac6:	005b      	lsls	r3, r3, #1
 8045ac8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8045acc:	4413      	add	r3, r2
 8045ace:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 8045ad2:	4618      	mov	r0, r3
 8045ad4:	f001 fcfc 	bl	80474d0 <lsm6dso_from_fs4_to_mg>
 8045ad8:	eeb0 7a40 	vmov.f32	s14, s0
 8045adc:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8045ae0:	009b      	lsls	r3, r3, #2
 8045ae2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8045ae6:	4413      	add	r3, r2
 8045ae8:	3b24      	subs	r3, #36	; 0x24
 8045aea:	edd3 7a00 	vldr	s15, [r3]
 8045aee:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8045af2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8045af6:	009b      	lsls	r3, r3, #2
 8045af8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8045afc:	4413      	add	r3, r2
 8045afe:	3b24      	subs	r3, #36	; 0x24
 8045b00:	edc3 7a00 	vstr	s15, [r3]
    for (j = 0; j < 3; j++) {
 8045b04:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8045b08:	3301      	adds	r3, #1
 8045b0a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8045b0e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8045b12:	2b02      	cmp	r3, #2
 8045b14:	d9d5      	bls.n	8045ac2 <lsm6dso_acc_self_test+0x1b6>
  for (i = 0; i < 5; i++) {
 8045b16:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8045b1a:	3301      	adds	r3, #1
 8045b1c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8045b20:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8045b24:	2b04      	cmp	r3, #4
 8045b26:	d9b9      	bls.n	8045a9c <lsm6dso_acc_self_test+0x190>
    }
  }

  /* Calculate the mg average values */
  for (i = 0; i < 3; i++) {
 8045b28:	2300      	movs	r3, #0
 8045b2a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8045b2e:	e01a      	b.n	8045b66 <lsm6dso_acc_self_test+0x25a>
    val_st_on[i] /= 5.0f;
 8045b30:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8045b34:	009b      	lsls	r3, r3, #2
 8045b36:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8045b3a:	4413      	add	r3, r2
 8045b3c:	3b24      	subs	r3, #36	; 0x24
 8045b3e:	ed93 7a00 	vldr	s14, [r3]
 8045b42:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8045b46:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8045b4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8045b4e:	009b      	lsls	r3, r3, #2
 8045b50:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8045b54:	4413      	add	r3, r2
 8045b56:	3b24      	subs	r3, #36	; 0x24
 8045b58:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 3; i++) {
 8045b5c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8045b60:	3301      	adds	r3, #1
 8045b62:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8045b66:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8045b6a:	2b02      	cmp	r3, #2
 8045b6c:	d9e0      	bls.n	8045b30 <lsm6dso_acc_self_test+0x224>
  }

  /* Calculate the mg values for self test */
  for (i = 0; i < 3; i++) {
 8045b6e:	2300      	movs	r3, #0
 8045b70:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8045b74:	e023      	b.n	8045bbe <lsm6dso_acc_self_test+0x2b2>
    test_val[i] = fabs((val_st_on[i] - val_st_off[i]));
 8045b76:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8045b7a:	009b      	lsls	r3, r3, #2
 8045b7c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8045b80:	4413      	add	r3, r2
 8045b82:	3b24      	subs	r3, #36	; 0x24
 8045b84:	ed93 7a00 	vldr	s14, [r3]
 8045b88:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8045b8c:	009b      	lsls	r3, r3, #2
 8045b8e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8045b92:	4413      	add	r3, r2
 8045b94:	3b18      	subs	r3, #24
 8045b96:	edd3 7a00 	vldr	s15, [r3]
 8045b9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8045b9e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8045ba2:	eef0 7ae7 	vabs.f32	s15, s15
 8045ba6:	009b      	lsls	r3, r3, #2
 8045ba8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8045bac:	4413      	add	r3, r2
 8045bae:	3b30      	subs	r3, #48	; 0x30
 8045bb0:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 3; i++) {
 8045bb4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8045bb8:	3301      	adds	r3, #1
 8045bba:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8045bbe:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8045bc2:	2b02      	cmp	r3, #2
 8045bc4:	d9d7      	bls.n	8045b76 <lsm6dso_acc_self_test+0x26a>
  }

  /* Check self test limit */
  st_result = ST_PASS;
 8045bc6:	2301      	movs	r3, #1
 8045bc8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  for (i = 0; i < 3; i++) {
 8045bcc:	2300      	movs	r3, #0
 8045bce:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8045bd2:	e027      	b.n	8045c24 <lsm6dso_acc_self_test+0x318>
    if ((MIN_ST_LIMIT_mg > test_val[i])
 8045bd4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8045bd8:	009b      	lsls	r3, r3, #2
 8045bda:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8045bde:	4413      	add	r3, r2
 8045be0:	3b30      	subs	r3, #48	; 0x30
 8045be2:	edd3 7a00 	vldr	s15, [r3]
 8045be6:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8045c74 <lsm6dso_acc_self_test+0x368>
 8045bea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8045bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8045bf2:	d40f      	bmi.n	8045c14 <lsm6dso_acc_self_test+0x308>
        || (test_val[i] > MAX_ST_LIMIT_mg)) {
 8045bf4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8045bf8:	009b      	lsls	r3, r3, #2
 8045bfa:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8045bfe:	4413      	add	r3, r2
 8045c00:	3b30      	subs	r3, #48	; 0x30
 8045c02:	edd3 7a00 	vldr	s15, [r3]
 8045c06:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8045c78 <lsm6dso_acc_self_test+0x36c>
 8045c0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8045c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8045c12:	dd02      	ble.n	8045c1a <lsm6dso_acc_self_test+0x30e>
      st_result = ST_FAIL;
 8045c14:	2300      	movs	r3, #0
 8045c16:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  for (i = 0; i < 3; i++) {
 8045c1a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8045c1e:	3301      	adds	r3, #1
 8045c20:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8045c24:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8045c28:	2b02      	cmp	r3, #2
 8045c2a:	d9d3      	bls.n	8045bd4 <lsm6dso_acc_self_test+0x2c8>
    }
  }

  /* Disable Self Test */
  lsm6dso_xl_self_test_set(ctx, LSM6DSO_XL_ST_DISABLE);
 8045c2c:	2100      	movs	r1, #0
 8045c2e:	6878      	ldr	r0, [r7, #4]
 8045c30:	f002 f839 	bl	8047ca6 <lsm6dso_xl_self_test_set>
  /* Disable sensor. */
  lsm6dso_xl_data_rate_set(ctx, LSM6DSO_XL_ODR_OFF);
 8045c34:	2100      	movs	r1, #0
 8045c36:	6878      	ldr	r0, [r7, #4]
 8045c38:	f001 fcec 	bl	8047614 <lsm6dso_xl_data_rate_set>

  lsm6dso_reinit_device(ctx);
 8045c3c:	6878      	ldr	r0, [r7, #4]
 8045c3e:	f7ff fe2f 	bl	80458a0 <lsm6dso_reinit_device>

  printf("lsm6dso_acc_self_test result: %d\r\n", st_result);
 8045c42:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8045c46:	4619      	mov	r1, r3
 8045c48:	480c      	ldr	r0, [pc, #48]	; (8045c7c <lsm6dso_acc_self_test+0x370>)
 8045c4a:	f01a fe93 	bl	8060974 <iprintf>
  if (st_result == ST_PASS) {
 8045c4e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8045c52:	2b01      	cmp	r3, #1
 8045c54:	d104      	bne.n	8045c60 <lsm6dso_acc_self_test+0x354>
    printf("lsm6dso_acc_self_test success\r\n");
 8045c56:	480a      	ldr	r0, [pc, #40]	; (8045c80 <lsm6dso_acc_self_test+0x374>)
 8045c58:	f01a ff28 	bl	8060aac <puts>
    return 0;
 8045c5c:	2300      	movs	r3, #0
 8045c5e:	e004      	b.n	8045c6a <lsm6dso_acc_self_test+0x35e>
  } else {
    printf("lsm6dso_acc_self_test failed\r\n");
 8045c60:	4808      	ldr	r0, [pc, #32]	; (8045c84 <lsm6dso_acc_self_test+0x378>)
 8045c62:	f01a ff23 	bl	8060aac <puts>
    return -1;
 8045c66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 8045c6a:	4618      	mov	r0, r3
 8045c6c:	3740      	adds	r7, #64	; 0x40
 8045c6e:	46bd      	mov	sp, r7
 8045c70:	bd80      	pop	{r7, pc}
 8045c72:	bf00      	nop
 8045c74:	42480000 	.word	0x42480000
 8045c78:	44d48000 	.word	0x44d48000
 8045c7c:	0806579c 	.word	0x0806579c
 8045c80:	080657c0 	.word	0x080657c0
 8045c84:	080657e0 	.word	0x080657e0

08045c88 <lsm6dso_gyro_self_test>:

int32_t lsm6dso_gyro_self_test(stmdev_ctx_t * ctx)
{
 8045c88:	b580      	push	{r7, lr}
 8045c8a:	b090      	sub	sp, #64	; 0x40
 8045c8c:	af00      	add	r7, sp, #0
 8045c8e:	6078      	str	r0, [r7, #4]
  uint8_t rst;
  uint8_t i;
  uint8_t j;

  /* Restore default configuration */
  lsm6dso_reset_set(ctx, PROPERTY_ENABLE);
 8045c90:	2101      	movs	r1, #1
 8045c92:	6878      	ldr	r0, [r7, #4]
 8045c94:	f001 ffc8 	bl	8047c28 <lsm6dso_reset_set>

  do {
    lsm6dso_reset_get(ctx, &rst);
 8045c98:	f107 030e 	add.w	r3, r7, #14
 8045c9c:	4619      	mov	r1, r3
 8045c9e:	6878      	ldr	r0, [r7, #4]
 8045ca0:	f001 ffe8 	bl	8047c74 <lsm6dso_reset_get>
  } while (rst);
 8045ca4:	7bbb      	ldrb	r3, [r7, #14]
 8045ca6:	2b00      	cmp	r3, #0
 8045ca8:	d1f6      	bne.n	8045c98 <lsm6dso_gyro_self_test+0x10>

  /* Disable I3C interface */
  lsm6dso_i3c_disable_set(ctx, LSM6DSO_I3C_DISABLE);
 8045caa:	2180      	movs	r1, #128	; 0x80
 8045cac:	6878      	ldr	r0, [r7, #4]
 8045cae:	f002 f8a4 	bl	8047dfa <lsm6dso_i3c_disable_set>
  /* Enable Block Data Update */
  lsm6dso_block_data_update_set(ctx, PROPERTY_ENABLE);
 8045cb2:	2101      	movs	r1, #1
 8045cb4:	6878      	ldr	r0, [r7, #4]
 8045cb6:	f001 fecb 	bl	8047a50 <lsm6dso_block_data_update_set>

  /*
   * Gyroscope Self Test
   */
  /* Set Output Data Rate */
  lsm6dso_gy_data_rate_set(ctx, LSM6DSO_GY_ODR_208Hz);
 8045cba:	2105      	movs	r1, #5
 8045cbc:	6878      	ldr	r0, [r7, #4]
 8045cbe:	f001 fdcb 	bl	8047858 <lsm6dso_gy_data_rate_set>
  /* Set full scale */
  lsm6dso_gy_full_scale_set(ctx, LSM6DSO_2000dps);
 8045cc2:	2106      	movs	r1, #6
 8045cc4:	6878      	ldr	r0, [r7, #4]
 8045cc6:	f001 fda1 	bl	804780c <lsm6dso_gy_full_scale_set>
  /* Wait stable output */
  platform_delay(100);
 8045cca:	2064      	movs	r0, #100	; 0x64
 8045ccc:	f000 fc1e 	bl	804650c <platform_delay>

  /* Check if new value available */
  do {
    lsm6dso_gy_flag_data_ready_get(ctx, &drdy);
 8045cd0:	f107 030f 	add.w	r3, r7, #15
 8045cd4:	4619      	mov	r1, r3
 8045cd6:	6878      	ldr	r0, [r7, #4]
 8045cd8:	f001 ff0a 	bl	8047af0 <lsm6dso_gy_flag_data_ready_get>
  } while (!drdy);
 8045cdc:	7bfb      	ldrb	r3, [r7, #15]
 8045cde:	2b00      	cmp	r3, #0
 8045ce0:	d0f6      	beq.n	8045cd0 <lsm6dso_gyro_self_test+0x48>

  /* Read dummy data and discard it */
  lsm6dso_angular_rate_raw_get(ctx, data_raw.u8bit);
 8045ce2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8045ce6:	4619      	mov	r1, r3
 8045ce8:	6878      	ldr	r0, [r7, #4]
 8045cea:	f001 ff44 	bl	8047b76 <lsm6dso_angular_rate_raw_get>
  /* Read 5 sample and get the average vale for each axis */
  memset(val_st_off, 0x00, 3 * sizeof(float));
 8045cee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8045cf2:	220c      	movs	r2, #12
 8045cf4:	2100      	movs	r1, #0
 8045cf6:	4618      	mov	r0, r3
 8045cf8:	f01a f960 	bl	805ffbc <memset>

  for (i = 0; i < 5; i++) {
 8045cfc:	2300      	movs	r3, #0
 8045cfe:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8045d02:	e041      	b.n	8045d88 <lsm6dso_gyro_self_test+0x100>
    /* Check if new value available */
    do {
      lsm6dso_xl_flag_data_ready_get(ctx, &drdy);
 8045d04:	f107 030f 	add.w	r3, r7, #15
 8045d08:	4619      	mov	r1, r3
 8045d0a:	6878      	ldr	r0, [r7, #4]
 8045d0c:	f001 fed7 	bl	8047abe <lsm6dso_xl_flag_data_ready_get>
    } while (!drdy);
 8045d10:	7bfb      	ldrb	r3, [r7, #15]
 8045d12:	2b00      	cmp	r3, #0
 8045d14:	d0f6      	beq.n	8045d04 <lsm6dso_gyro_self_test+0x7c>

    /* Read data and accumulate the mg value */
    lsm6dso_angular_rate_raw_get(ctx, data_raw.u8bit);
 8045d16:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8045d1a:	4619      	mov	r1, r3
 8045d1c:	6878      	ldr	r0, [r7, #4]
 8045d1e:	f001 ff2a 	bl	8047b76 <lsm6dso_angular_rate_raw_get>

    for (j = 0; j < 3; j++) {
 8045d22:	2300      	movs	r3, #0
 8045d24:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8045d28:	e025      	b.n	8045d76 <lsm6dso_gyro_self_test+0xee>
      val_st_off[j] += lsm6dso_from_fs2000_to_mdps(data_raw.i16bit[j]);
 8045d2a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8045d2e:	005b      	lsls	r3, r3, #1
 8045d30:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8045d34:	4413      	add	r3, r2
 8045d36:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 8045d3a:	4618      	mov	r0, r3
 8045d3c:	f001 fc10 	bl	8047560 <lsm6dso_from_fs2000_to_mdps>
 8045d40:	eeb0 7a40 	vmov.f32	s14, s0
 8045d44:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8045d48:	009b      	lsls	r3, r3, #2
 8045d4a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8045d4e:	4413      	add	r3, r2
 8045d50:	3b18      	subs	r3, #24
 8045d52:	edd3 7a00 	vldr	s15, [r3]
 8045d56:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8045d5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8045d5e:	009b      	lsls	r3, r3, #2
 8045d60:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8045d64:	4413      	add	r3, r2
 8045d66:	3b18      	subs	r3, #24
 8045d68:	edc3 7a00 	vstr	s15, [r3]
    for (j = 0; j < 3; j++) {
 8045d6c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8045d70:	3301      	adds	r3, #1
 8045d72:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8045d76:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8045d7a:	2b02      	cmp	r3, #2
 8045d7c:	d9d5      	bls.n	8045d2a <lsm6dso_gyro_self_test+0xa2>
  for (i = 0; i < 5; i++) {
 8045d7e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8045d82:	3301      	adds	r3, #1
 8045d84:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8045d88:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8045d8c:	2b04      	cmp	r3, #4
 8045d8e:	d9b9      	bls.n	8045d04 <lsm6dso_gyro_self_test+0x7c>
    }
  }

  /* Calculate the mg average values */
  for (i = 0; i < 3; i++) {
 8045d90:	2300      	movs	r3, #0
 8045d92:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8045d96:	e01a      	b.n	8045dce <lsm6dso_gyro_self_test+0x146>
    val_st_off[i] /= 5.0f;
 8045d98:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8045d9c:	009b      	lsls	r3, r3, #2
 8045d9e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8045da2:	4413      	add	r3, r2
 8045da4:	3b18      	subs	r3, #24
 8045da6:	ed93 7a00 	vldr	s14, [r3]
 8045daa:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8045dae:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8045db2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8045db6:	009b      	lsls	r3, r3, #2
 8045db8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8045dbc:	4413      	add	r3, r2
 8045dbe:	3b18      	subs	r3, #24
 8045dc0:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 3; i++) {
 8045dc4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8045dc8:	3301      	adds	r3, #1
 8045dca:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8045dce:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8045dd2:	2b02      	cmp	r3, #2
 8045dd4:	d9e0      	bls.n	8045d98 <lsm6dso_gyro_self_test+0x110>
  }

  /* Enable Self Test positive (or negative) */
  lsm6dso_gy_self_test_set(ctx, LSM6DSO_GY_ST_POSITIVE);
 8045dd6:	2101      	movs	r1, #1
 8045dd8:	6878      	ldr	r0, [r7, #4]
 8045dda:	f001 ff8a 	bl	8047cf2 <lsm6dso_gy_self_test_set>
  //lsm6dso_gy_self_test_set(ctx, LIS2DH12_GY_ST_NEGATIVE);
  /* Wait stable output */
  platform_delay(100);
 8045dde:	2064      	movs	r0, #100	; 0x64
 8045de0:	f000 fb94 	bl	804650c <platform_delay>
  /* Read 5 sample and get the average vale for each axis */
  memset(val_st_on, 0x00, 3 * sizeof(float));
 8045de4:	f107 031c 	add.w	r3, r7, #28
 8045de8:	220c      	movs	r2, #12
 8045dea:	2100      	movs	r1, #0
 8045dec:	4618      	mov	r0, r3
 8045dee:	f01a f8e5 	bl	805ffbc <memset>

  for (i = 0; i < 5; i++) {
 8045df2:	2300      	movs	r3, #0
 8045df4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8045df8:	e041      	b.n	8045e7e <lsm6dso_gyro_self_test+0x1f6>
    /* Check if new value available */
    do {
      lsm6dso_xl_flag_data_ready_get(ctx, &drdy);
 8045dfa:	f107 030f 	add.w	r3, r7, #15
 8045dfe:	4619      	mov	r1, r3
 8045e00:	6878      	ldr	r0, [r7, #4]
 8045e02:	f001 fe5c 	bl	8047abe <lsm6dso_xl_flag_data_ready_get>
    } while (!drdy);
 8045e06:	7bfb      	ldrb	r3, [r7, #15]
 8045e08:	2b00      	cmp	r3, #0
 8045e0a:	d0f6      	beq.n	8045dfa <lsm6dso_gyro_self_test+0x172>

    /* Read data and accumulate the mg value */
    lsm6dso_angular_rate_raw_get(ctx, data_raw.u8bit);
 8045e0c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8045e10:	4619      	mov	r1, r3
 8045e12:	6878      	ldr	r0, [r7, #4]
 8045e14:	f001 feaf 	bl	8047b76 <lsm6dso_angular_rate_raw_get>

    for (j = 0; j < 3; j++) {
 8045e18:	2300      	movs	r3, #0
 8045e1a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8045e1e:	e025      	b.n	8045e6c <lsm6dso_gyro_self_test+0x1e4>
      val_st_on[j] += lsm6dso_from_fs2000_to_mdps(data_raw.i16bit[j]);
 8045e20:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8045e24:	005b      	lsls	r3, r3, #1
 8045e26:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8045e2a:	4413      	add	r3, r2
 8045e2c:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 8045e30:	4618      	mov	r0, r3
 8045e32:	f001 fb95 	bl	8047560 <lsm6dso_from_fs2000_to_mdps>
 8045e36:	eeb0 7a40 	vmov.f32	s14, s0
 8045e3a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8045e3e:	009b      	lsls	r3, r3, #2
 8045e40:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8045e44:	4413      	add	r3, r2
 8045e46:	3b24      	subs	r3, #36	; 0x24
 8045e48:	edd3 7a00 	vldr	s15, [r3]
 8045e4c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8045e50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8045e54:	009b      	lsls	r3, r3, #2
 8045e56:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8045e5a:	4413      	add	r3, r2
 8045e5c:	3b24      	subs	r3, #36	; 0x24
 8045e5e:	edc3 7a00 	vstr	s15, [r3]
    for (j = 0; j < 3; j++) {
 8045e62:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8045e66:	3301      	adds	r3, #1
 8045e68:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8045e6c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8045e70:	2b02      	cmp	r3, #2
 8045e72:	d9d5      	bls.n	8045e20 <lsm6dso_gyro_self_test+0x198>
  for (i = 0; i < 5; i++) {
 8045e74:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8045e78:	3301      	adds	r3, #1
 8045e7a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8045e7e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8045e82:	2b04      	cmp	r3, #4
 8045e84:	d9b9      	bls.n	8045dfa <lsm6dso_gyro_self_test+0x172>
    }
  }

  /* Calculate the mg average values */
  for (i = 0; i < 3; i++) {
 8045e86:	2300      	movs	r3, #0
 8045e88:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8045e8c:	e01a      	b.n	8045ec4 <lsm6dso_gyro_self_test+0x23c>
    val_st_on[i] /= 5.0f;
 8045e8e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8045e92:	009b      	lsls	r3, r3, #2
 8045e94:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8045e98:	4413      	add	r3, r2
 8045e9a:	3b24      	subs	r3, #36	; 0x24
 8045e9c:	ed93 7a00 	vldr	s14, [r3]
 8045ea0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8045ea4:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8045ea8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8045eac:	009b      	lsls	r3, r3, #2
 8045eae:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8045eb2:	4413      	add	r3, r2
 8045eb4:	3b24      	subs	r3, #36	; 0x24
 8045eb6:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 3; i++) {
 8045eba:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8045ebe:	3301      	adds	r3, #1
 8045ec0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8045ec4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8045ec8:	2b02      	cmp	r3, #2
 8045eca:	d9e0      	bls.n	8045e8e <lsm6dso_gyro_self_test+0x206>
  }

  /* Calculate the mg values for self test */
  for (i = 0; i < 3; i++) {
 8045ecc:	2300      	movs	r3, #0
 8045ece:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8045ed2:	e023      	b.n	8045f1c <lsm6dso_gyro_self_test+0x294>
    test_val[i] = fabs((val_st_on[i] - val_st_off[i]));
 8045ed4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8045ed8:	009b      	lsls	r3, r3, #2
 8045eda:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8045ede:	4413      	add	r3, r2
 8045ee0:	3b24      	subs	r3, #36	; 0x24
 8045ee2:	ed93 7a00 	vldr	s14, [r3]
 8045ee6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8045eea:	009b      	lsls	r3, r3, #2
 8045eec:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8045ef0:	4413      	add	r3, r2
 8045ef2:	3b18      	subs	r3, #24
 8045ef4:	edd3 7a00 	vldr	s15, [r3]
 8045ef8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8045efc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8045f00:	eef0 7ae7 	vabs.f32	s15, s15
 8045f04:	009b      	lsls	r3, r3, #2
 8045f06:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8045f0a:	4413      	add	r3, r2
 8045f0c:	3b30      	subs	r3, #48	; 0x30
 8045f0e:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 3; i++) {
 8045f12:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8045f16:	3301      	adds	r3, #1
 8045f18:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8045f1c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8045f20:	2b02      	cmp	r3, #2
 8045f22:	d9d7      	bls.n	8045ed4 <lsm6dso_gyro_self_test+0x24c>
  }

  /* Check self test limit */
  st_result = ST_PASS;
 8045f24:	2301      	movs	r3, #1
 8045f26:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  for (i = 0; i < 3; i++) {
 8045f2a:	2300      	movs	r3, #0
 8045f2c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8045f30:	e027      	b.n	8045f82 <lsm6dso_gyro_self_test+0x2fa>
    if ((MIN_ST_LIMIT_mdps > test_val[i])
 8045f32:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8045f36:	009b      	lsls	r3, r3, #2
 8045f38:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8045f3c:	4413      	add	r3, r2
 8045f3e:	3b30      	subs	r3, #48	; 0x30
 8045f40:	edd3 7a00 	vldr	s15, [r3]
 8045f44:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8045fd0 <lsm6dso_gyro_self_test+0x348>
 8045f48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8045f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8045f50:	d40f      	bmi.n	8045f72 <lsm6dso_gyro_self_test+0x2ea>
        || (test_val[i] > MAX_ST_LIMIT_mdps)) {
 8045f52:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8045f56:	009b      	lsls	r3, r3, #2
 8045f58:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8045f5c:	4413      	add	r3, r2
 8045f5e:	3b30      	subs	r3, #48	; 0x30
 8045f60:	edd3 7a00 	vldr	s15, [r3]
 8045f64:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8045fd4 <lsm6dso_gyro_self_test+0x34c>
 8045f68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8045f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8045f70:	dd02      	ble.n	8045f78 <lsm6dso_gyro_self_test+0x2f0>
      st_result = ST_FAIL;
 8045f72:	2300      	movs	r3, #0
 8045f74:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  for (i = 0; i < 3; i++) {
 8045f78:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8045f7c:	3301      	adds	r3, #1
 8045f7e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8045f82:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8045f86:	2b02      	cmp	r3, #2
 8045f88:	d9d3      	bls.n	8045f32 <lsm6dso_gyro_self_test+0x2aa>
    }
  }

  /* Disable Self Test */
  lsm6dso_gy_self_test_set(ctx, LSM6DSO_GY_ST_DISABLE);
 8045f8a:	2100      	movs	r1, #0
 8045f8c:	6878      	ldr	r0, [r7, #4]
 8045f8e:	f001 feb0 	bl	8047cf2 <lsm6dso_gy_self_test_set>
  /* Disable sensor. */
  lsm6dso_xl_data_rate_set(ctx, LSM6DSO_GY_ODR_OFF);
 8045f92:	2100      	movs	r1, #0
 8045f94:	6878      	ldr	r0, [r7, #4]
 8045f96:	f001 fb3d 	bl	8047614 <lsm6dso_xl_data_rate_set>

  lsm6dso_reinit_device(ctx);
 8045f9a:	6878      	ldr	r0, [r7, #4]
 8045f9c:	f7ff fc80 	bl	80458a0 <lsm6dso_reinit_device>

  printf("lsm6dso_gyro_self_test result: %d\r\n", st_result);
 8045fa0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8045fa4:	4619      	mov	r1, r3
 8045fa6:	480c      	ldr	r0, [pc, #48]	; (8045fd8 <lsm6dso_gyro_self_test+0x350>)
 8045fa8:	f01a fce4 	bl	8060974 <iprintf>
  if (st_result == ST_PASS) {
 8045fac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8045fb0:	2b01      	cmp	r3, #1
 8045fb2:	d104      	bne.n	8045fbe <lsm6dso_gyro_self_test+0x336>
    printf("lsm6dso_gyro_self_test success\r\n");
 8045fb4:	4809      	ldr	r0, [pc, #36]	; (8045fdc <lsm6dso_gyro_self_test+0x354>)
 8045fb6:	f01a fd79 	bl	8060aac <puts>
    return 0;
 8045fba:	2300      	movs	r3, #0
 8045fbc:	e004      	b.n	8045fc8 <lsm6dso_gyro_self_test+0x340>
  } else {
    printf("lsm6dso_gyro_self_test failed\r\n");
 8045fbe:	4808      	ldr	r0, [pc, #32]	; (8045fe0 <lsm6dso_gyro_self_test+0x358>)
 8045fc0:	f01a fd74 	bl	8060aac <puts>
    return -1;
 8045fc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 8045fc8:	4618      	mov	r0, r3
 8045fca:	3740      	adds	r7, #64	; 0x40
 8045fcc:	46bd      	mov	sp, r7
 8045fce:	bd80      	pop	{r7, pc}
 8045fd0:	48127c00 	.word	0x48127c00
 8045fd4:	492ae600 	.word	0x492ae600
 8045fd8:	08065800 	.word	0x08065800
 8045fdc:	08065824 	.word	0x08065824
 8045fe0:	08065844 	.word	0x08065844

08045fe4 <lsm6dso_acc_calibration>:

int32_t lsm6dso_acc_calibration(stmdev_ctx_t * ctx, float *offset)
{
 8045fe4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8045fe8:	b0a5      	sub	sp, #148	; 0x94
 8045fea:	af04      	add	r7, sp, #16
 8045fec:	6078      	str	r0, [r7, #4]
 8045fee:	6039      	str	r1, [r7, #0]
  axis1bit16_t data_raw_temperature;
  float temperature_degC;
  float acceleration[3];
  sensor_info_type acc_info;

  acc_info.cal_config.cols = 3;
 8045ff0:	2303      	movs	r3, #3
 8045ff2:	61fb      	str	r3, [r7, #28]
  acc_info.cal_config.num_samples = 50;
 8045ff4:	2332      	movs	r3, #50	; 0x32
 8045ff6:	623b      	str	r3, [r7, #32]
  acc_info.cal_config.variance_threshold = 10.0;
 8045ff8:	4b88      	ldr	r3, [pc, #544]	; (804621c <lsm6dso_acc_calibration+0x238>)
 8045ffa:	627b      	str	r3, [r7, #36]	; 0x24
  acc_info.cal_config.check_zero_variance = true;
 8045ffc:	2301      	movs	r3, #1
 8045ffe:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  acc_info.cal_config.bias_thresholds[0] = 2.0;
 8046002:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8046006:	62fb      	str	r3, [r7, #44]	; 0x2c
  acc_info.cal_config.bias_thresholds[1] = 2.0;
 8046008:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 804600c:	633b      	str	r3, [r7, #48]	; 0x30
  acc_info.cal_config.bias_thresholds[2] = 2.0;
 804600e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8046012:	637b      	str	r3, [r7, #52]	; 0x34
  acc_info.cal_config.count = 0;
 8046014:	2300      	movs	r3, #0
 8046016:	63bb      	str	r3, [r7, #56]	; 0x38
  acc_info.cal_dynm_data.sample_count = 0;
 8046018:	2300      	movs	r3, #0
 804601a:	663b      	str	r3, [r7, #96]	; 0x60
  acc_info.cal_state = CAL_STATE_START;
 804601c:	2300      	movs	r3, #0
 804601e:	763b      	strb	r3, [r7, #24]

  lsm6dso_reinit_device(ctx);
 8046020:	6878      	ldr	r0, [r7, #4]
 8046022:	f7ff fc3d 	bl	80458a0 <lsm6dso_reinit_device>
  lsm6dso_block_data_update_set(ctx, PROPERTY_ENABLE);
 8046026:	2101      	movs	r1, #1
 8046028:	6878      	ldr	r0, [r7, #4]
 804602a:	f001 fd11 	bl	8047a50 <lsm6dso_block_data_update_set>
  PID_Init(&imu_pid_struct, PID_TARGET_TEMP);
 804602e:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 8046220 <lsm6dso_acc_calibration+0x23c>
 8046032:	487c      	ldr	r0, [pc, #496]	; (8046224 <lsm6dso_acc_calibration+0x240>)
 8046034:	f000 fa83 	bl	804653e <PID_Init>
  pid_pwm_control(PWM_ACTIVATE, 0);
 8046038:	2100      	movs	r1, #0
 804603a:	2000      	movs	r0, #0
 804603c:	f000 fa71 	bl	8046522 <pid_pwm_control>

  platform_delay(20);
 8046040:	2014      	movs	r0, #20
 8046042:	f000 fa63 	bl	804650c <platform_delay>

  do {
    //printf("reading acc data\r\n");
    lsm6dso_xl_flag_data_ready_get(ctx, &reg);
 8046046:	f107 037b 	add.w	r3, r7, #123	; 0x7b
 804604a:	4619      	mov	r1, r3
 804604c:	6878      	ldr	r0, [r7, #4]
 804604e:	f001 fd36 	bl	8047abe <lsm6dso_xl_flag_data_ready_get>
    if (reg) {
 8046052:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8046056:	2b00      	cmp	r3, #0
 8046058:	f000 8098 	beq.w	804618c <lsm6dso_acc_calibration+0x1a8>
      /* Read acceleration field data */
      memset(data_raw_acceleration.u8bit, 0x00, 3 * sizeof(int16_t));
 804605c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8046060:	2206      	movs	r2, #6
 8046062:	2100      	movs	r1, #0
 8046064:	4618      	mov	r0, r3
 8046066:	f019 ffa9 	bl	805ffbc <memset>
      lsm6dso_acceleration_raw_get(ctx, data_raw_acceleration.u8bit);
 804606a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 804606e:	4619      	mov	r1, r3
 8046070:	6878      	ldr	r0, [r7, #4]
 8046072:	f001 fd91 	bl	8047b98 <lsm6dso_acceleration_raw_get>
      acceleration[0] =
          lsm6dso_from_fs8_to_mg(data_raw_acceleration.i16bit[0]) *
 8046076:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 804607a:	4618      	mov	r0, r3
 804607c:	f001 fa40 	bl	8047500 <lsm6dso_from_fs8_to_mg>
 8046080:	eef0 7a40 	vmov.f32	s15, s0
 8046084:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8046228 <lsm6dso_acc_calibration+0x244>
 8046088:	ee27 7a87 	vmul.f32	s14, s15, s14
          GRAVITY_EARTH / 1000.0f;
 804608c:	eddf 6a67 	vldr	s13, [pc, #412]	; 804622c <lsm6dso_acc_calibration+0x248>
 8046090:	eec7 7a26 	vdiv.f32	s15, s14, s13
      acceleration[0] =
 8046094:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
      acceleration[1] =
          lsm6dso_from_fs8_to_mg(data_raw_acceleration.i16bit[1]) *
 8046098:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 804609c:	4618      	mov	r0, r3
 804609e:	f001 fa2f 	bl	8047500 <lsm6dso_from_fs8_to_mg>
 80460a2:	eef0 7a40 	vmov.f32	s15, s0
 80460a6:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8046228 <lsm6dso_acc_calibration+0x244>
 80460aa:	ee27 7a87 	vmul.f32	s14, s15, s14
          GRAVITY_EARTH / 1000.0f;
 80460ae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 804622c <lsm6dso_acc_calibration+0x248>
 80460b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
      acceleration[1] =
 80460b6:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
      acceleration[2] =
          lsm6dso_from_fs8_to_mg(data_raw_acceleration.i16bit[2]) *
 80460ba:	f9b7 3078 	ldrsh.w	r3, [r7, #120]	; 0x78
 80460be:	4618      	mov	r0, r3
 80460c0:	f001 fa1e 	bl	8047500 <lsm6dso_from_fs8_to_mg>
 80460c4:	eef0 7a40 	vmov.f32	s15, s0
 80460c8:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8046228 <lsm6dso_acc_calibration+0x244>
 80460cc:	ee27 7a87 	vmul.f32	s14, s15, s14
          GRAVITY_EARTH / 1000.0f;
 80460d0:	eddf 6a56 	vldr	s13, [pc, #344]	; 804622c <lsm6dso_acc_calibration+0x248>
 80460d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
      acceleration[2] =
 80460d8:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c

      printf("%d, {%f, %f, %f}\r\n", acc_info.cal_config.count,
 80460dc:	6bbe      	ldr	r6, [r7, #56]	; 0x38
             acceleration[0], acceleration[1], acceleration[2]);
 80460de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
      printf("%d, {%f, %f, %f}\r\n", acc_info.cal_config.count,
 80460e0:	4618      	mov	r0, r3
 80460e2:	f7fa fa31 	bl	8040548 <__aeabi_f2d>
 80460e6:	4680      	mov	r8, r0
 80460e8:	4689      	mov	r9, r1
             acceleration[0], acceleration[1], acceleration[2]);
 80460ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
      printf("%d, {%f, %f, %f}\r\n", acc_info.cal_config.count,
 80460ec:	4618      	mov	r0, r3
 80460ee:	f7fa fa2b 	bl	8040548 <__aeabi_f2d>
 80460f2:	4604      	mov	r4, r0
 80460f4:	460d      	mov	r5, r1
             acceleration[0], acceleration[1], acceleration[2]);
 80460f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
      printf("%d, {%f, %f, %f}\r\n", acc_info.cal_config.count,
 80460f8:	4618      	mov	r0, r3
 80460fa:	f7fa fa25 	bl	8040548 <__aeabi_f2d>
 80460fe:	4602      	mov	r2, r0
 8046100:	460b      	mov	r3, r1
 8046102:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8046106:	e9cd 4500 	strd	r4, r5, [sp]
 804610a:	4642      	mov	r2, r8
 804610c:	464b      	mov	r3, r9
 804610e:	4631      	mov	r1, r6
 8046110:	4847      	ldr	r0, [pc, #284]	; (8046230 <lsm6dso_acc_calibration+0x24c>)
 8046112:	f01a fc2f 	bl	8060974 <iprintf>

      //apply axis transfer first
      ConvertCoordinate(acceleration, g_imu_axis_order, g_imu_axis_sign);
 8046116:	f107 0364 	add.w	r3, r7, #100	; 0x64
 804611a:	4a46      	ldr	r2, [pc, #280]	; (8046234 <lsm6dso_acc_calibration+0x250>)
 804611c:	4946      	ldr	r1, [pc, #280]	; (8046238 <lsm6dso_acc_calibration+0x254>)
 804611e:	4618      	mov	r0, r3
 8046120:	f000 fb5c 	bl	80467dc <ConvertCoordinate>

      printf("%d, {%f, %f, %f}\r\n", acc_info.cal_config.count,
 8046124:	6bbe      	ldr	r6, [r7, #56]	; 0x38
             acceleration[0], acceleration[1], acceleration[2]);
 8046126:	6e7b      	ldr	r3, [r7, #100]	; 0x64
      printf("%d, {%f, %f, %f}\r\n", acc_info.cal_config.count,
 8046128:	4618      	mov	r0, r3
 804612a:	f7fa fa0d 	bl	8040548 <__aeabi_f2d>
 804612e:	4680      	mov	r8, r0
 8046130:	4689      	mov	r9, r1
             acceleration[0], acceleration[1], acceleration[2]);
 8046132:	6ebb      	ldr	r3, [r7, #104]	; 0x68
      printf("%d, {%f, %f, %f}\r\n", acc_info.cal_config.count,
 8046134:	4618      	mov	r0, r3
 8046136:	f7fa fa07 	bl	8040548 <__aeabi_f2d>
 804613a:	4604      	mov	r4, r0
 804613c:	460d      	mov	r5, r1
             acceleration[0], acceleration[1], acceleration[2]);
 804613e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
      printf("%d, {%f, %f, %f}\r\n", acc_info.cal_config.count,
 8046140:	4618      	mov	r0, r3
 8046142:	f7fa fa01 	bl	8040548 <__aeabi_f2d>
 8046146:	4602      	mov	r2, r0
 8046148:	460b      	mov	r3, r1
 804614a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 804614e:	e9cd 4500 	strd	r4, r5, [sp]
 8046152:	4642      	mov	r2, r8
 8046154:	464b      	mov	r3, r9
 8046156:	4631      	mov	r1, r6
 8046158:	4835      	ldr	r0, [pc, #212]	; (8046230 <lsm6dso_acc_calibration+0x24c>)
 804615a:	f01a fc0b 	bl	8060974 <iprintf>

      //fill data to data array
      acceleration[2] = acceleration[2] - GRAVITY_EARTH;
 804615e:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8046162:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8046228 <lsm6dso_acc_calibration+0x244>
 8046166:	ee77 7ac7 	vsub.f32	s15, s15, s14
 804616a:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
      if (acc_info.cal_config.count > SKIP_COUNT)
 804616e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8046170:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8046174:	dd07      	ble.n	8046186 <lsm6dso_acc_calibration+0x1a2>
        cal_process_sample(&acc_info, acceleration);
 8046176:	f107 0264 	add.w	r2, r7, #100	; 0x64
 804617a:	f107 030c 	add.w	r3, r7, #12
 804617e:	4611      	mov	r1, r2
 8046180:	4618      	mov	r0, r3
 8046182:	f7ff f9fd 	bl	8045580 <cal_process_sample>
      acc_info.cal_config.count++;
 8046186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8046188:	3301      	adds	r3, #1
 804618a:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    lsm6dso_temp_flag_data_ready_get(ctx, &reg);
 804618c:	f107 037b 	add.w	r3, r7, #123	; 0x7b
 8046190:	4619      	mov	r1, r3
 8046192:	6878      	ldr	r0, [r7, #4]
 8046194:	f001 fcc5 	bl	8047b22 <lsm6dso_temp_flag_data_ready_get>
    if (reg) {
 8046198:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 804619c:	2b00      	cmp	r3, #0
 804619e:	d018      	beq.n	80461d2 <lsm6dso_acc_calibration+0x1ee>
      /* Read temperature data */
      memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 80461a0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80461a4:	2202      	movs	r2, #2
 80461a6:	2100      	movs	r1, #0
 80461a8:	4618      	mov	r0, r3
 80461aa:	f019 ff07 	bl	805ffbc <memset>
      lsm6dso_temperature_raw_get(ctx, data_raw_temperature.u8bit);
 80461ae:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80461b2:	4619      	mov	r1, r3
 80461b4:	6878      	ldr	r0, [r7, #4]
 80461b6:	f001 fccd 	bl	8047b54 <lsm6dso_temperature_raw_get>
      temperature_degC =
          lsm6dso_from_lsb_to_celsius(data_raw_temperature.i16bit);
 80461ba:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 80461be:	4618      	mov	r0, r3
 80461c0:	f001 f9e6 	bl	8047590 <lsm6dso_from_lsb_to_celsius>
 80461c4:	ed87 0a1f 	vstr	s0, [r7, #124]	; 0x7c
      pid_temp_control(&imu_pid_struct, temperature_degC);
 80461c8:	ed97 0a1f 	vldr	s0, [r7, #124]	; 0x7c
 80461cc:	4815      	ldr	r0, [pc, #84]	; (8046224 <lsm6dso_acc_calibration+0x240>)
 80461ce:	f000 f9f1 	bl	80465b4 <pid_temp_control>
    }
    platform_delay(10);
 80461d2:	200a      	movs	r0, #10
 80461d4:	f000 f99a 	bl	804650c <platform_delay>
  } while ((acc_info.cal_config.count < SKIP_COUNT * 2)
 80461d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
           && (acc_info.cal_state != CAL_STATE_SUCCESS));
 80461da:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80461de:	da03      	bge.n	80461e8 <lsm6dso_acc_calibration+0x204>
 80461e0:	7e3b      	ldrb	r3, [r7, #24]
 80461e2:	2b02      	cmp	r3, #2
 80461e4:	f47f af2f 	bne.w	8046046 <lsm6dso_acc_calibration+0x62>

  pid_pwm_control(PWM_DEACTIVATE, 0);
 80461e8:	2100      	movs	r1, #0
 80461ea:	2001      	movs	r0, #1
 80461ec:	f000 f999 	bl	8046522 <pid_pwm_control>

  if (acc_info.cal_state == CAL_STATE_SUCCESS) {
 80461f0:	7e3b      	ldrb	r3, [r7, #24]
 80461f2:	2b02      	cmp	r3, #2
 80461f4:	d10b      	bne.n	804620e <lsm6dso_acc_calibration+0x22a>
    printf("acc calibration successed!\r\n");
 80461f6:	4811      	ldr	r0, [pc, #68]	; (804623c <lsm6dso_acc_calibration+0x258>)
 80461f8:	f01a fc58 	bl	8060aac <puts>
    memcpy(offset, acc_info.offset, sizeof(float) * 3);
 80461fc:	f107 030c 	add.w	r3, r7, #12
 8046200:	220c      	movs	r2, #12
 8046202:	4619      	mov	r1, r3
 8046204:	6838      	ldr	r0, [r7, #0]
 8046206:	f019 fecb 	bl	805ffa0 <memcpy>
    return 0;
 804620a:	2300      	movs	r3, #0
 804620c:	e001      	b.n	8046212 <lsm6dso_acc_calibration+0x22e>
  }

  return -1;
 804620e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8046212:	4618      	mov	r0, r3
 8046214:	3784      	adds	r7, #132	; 0x84
 8046216:	46bd      	mov	sp, r7
 8046218:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 804621c:	41200000 	.word	0x41200000
 8046220:	42300000 	.word	0x42300000
 8046224:	2000803c 	.word	0x2000803c
 8046228:	411ce80a 	.word	0x411ce80a
 804622c:	447a0000 	.word	0x447a0000
 8046230:	08065864 	.word	0x08065864
 8046234:	2001be00 	.word	0x2001be00
 8046238:	2001bdfc 	.word	0x2001bdfc
 804623c:	08065878 	.word	0x08065878

08046240 <lsm6dso_gyro_calibration>:

int32_t lsm6dso_gyro_calibration(stmdev_ctx_t * ctx, float *offset)
{
 8046240:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8046244:	b0a5      	sub	sp, #148	; 0x94
 8046246:	af04      	add	r7, sp, #16
 8046248:	6078      	str	r0, [r7, #4]
 804624a:	6039      	str	r1, [r7, #0]
  axis1bit16_t data_raw_temperature;
  float temperature_degC;
  float gyroscope[3];
  sensor_info_type gyro_info;

  gyro_info.cal_config.cols = 3;
 804624c:	2303      	movs	r3, #3
 804624e:	61fb      	str	r3, [r7, #28]
  gyro_info.cal_config.num_samples = 100;
 8046250:	2364      	movs	r3, #100	; 0x64
 8046252:	623b      	str	r3, [r7, #32]
  gyro_info.cal_config.variance_threshold = 10.0;
 8046254:	4ba4      	ldr	r3, [pc, #656]	; (80464e8 <lsm6dso_gyro_calibration+0x2a8>)
 8046256:	627b      	str	r3, [r7, #36]	; 0x24
  gyro_info.cal_config.check_zero_variance = true;
 8046258:	2301      	movs	r3, #1
 804625a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  gyro_info.cal_config.bias_thresholds[0] = 1.0;
 804625e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8046262:	62fb      	str	r3, [r7, #44]	; 0x2c
  gyro_info.cal_config.bias_thresholds[1] = 1.0;
 8046264:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8046268:	633b      	str	r3, [r7, #48]	; 0x30
  gyro_info.cal_config.bias_thresholds[2] = 1.0;
 804626a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 804626e:	637b      	str	r3, [r7, #52]	; 0x34
  gyro_info.cal_config.count = 0;
 8046270:	2300      	movs	r3, #0
 8046272:	63bb      	str	r3, [r7, #56]	; 0x38
  gyro_info.cal_dynm_data.sample_count = 0;
 8046274:	2300      	movs	r3, #0
 8046276:	663b      	str	r3, [r7, #96]	; 0x60
  gyro_info.cal_state = CAL_STATE_START;
 8046278:	2300      	movs	r3, #0
 804627a:	763b      	strb	r3, [r7, #24]

  lsm6dso_reinit_device(ctx);
 804627c:	6878      	ldr	r0, [r7, #4]
 804627e:	f7ff fb0f 	bl	80458a0 <lsm6dso_reinit_device>
  lsm6dso_block_data_update_set(ctx, PROPERTY_ENABLE);
 8046282:	2101      	movs	r1, #1
 8046284:	6878      	ldr	r0, [r7, #4]
 8046286:	f001 fbe3 	bl	8047a50 <lsm6dso_block_data_update_set>

  PID_Init(&imu_pid_struct, PID_TARGET_TEMP);
 804628a:	ed9f 0a98 	vldr	s0, [pc, #608]	; 80464ec <lsm6dso_gyro_calibration+0x2ac>
 804628e:	4898      	ldr	r0, [pc, #608]	; (80464f0 <lsm6dso_gyro_calibration+0x2b0>)
 8046290:	f000 f955 	bl	804653e <PID_Init>
  pid_pwm_control(PWM_ACTIVATE, 0);
 8046294:	2100      	movs	r1, #0
 8046296:	2000      	movs	r0, #0
 8046298:	f000 f943 	bl	8046522 <pid_pwm_control>

  platform_delay(20);
 804629c:	2014      	movs	r0, #20
 804629e:	f000 f935 	bl	804650c <platform_delay>

  do {
    //printf("reading gyro data\r\n");
    lsm6dso_gy_flag_data_ready_get(ctx, &reg);
 80462a2:	f107 037b 	add.w	r3, r7, #123	; 0x7b
 80462a6:	4619      	mov	r1, r3
 80462a8:	6878      	ldr	r0, [r7, #4]
 80462aa:	f001 fc21 	bl	8047af0 <lsm6dso_gy_flag_data_ready_get>
    if (reg) {
 80462ae:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80462b2:	2b00      	cmp	r3, #0
 80462b4:	f000 80ee 	beq.w	8046494 <lsm6dso_gyro_calibration+0x254>
      /* Read angular rate field data */
      memset(data_raw_angular_rate.u8bit, 0x00, 3 * sizeof(int16_t));
 80462b8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80462bc:	2206      	movs	r2, #6
 80462be:	2100      	movs	r1, #0
 80462c0:	4618      	mov	r0, r3
 80462c2:	f019 fe7b 	bl	805ffbc <memset>
      lsm6dso_angular_rate_raw_get(ctx, data_raw_angular_rate.u8bit);
 80462c6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80462ca:	4619      	mov	r1, r3
 80462cc:	6878      	ldr	r0, [r7, #4]
 80462ce:	f001 fc52 	bl	8047b76 <lsm6dso_angular_rate_raw_get>
      gyroscope[0] =
          lsm6dso_from_fs1000_to_mdps(data_raw_angular_rate.i16bit[0]) /
 80462d2:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 80462d6:	4618      	mov	r0, r3
 80462d8:	f001 f92a 	bl	8047530 <lsm6dso_from_fs1000_to_mdps>
 80462dc:	eef0 7a40 	vmov.f32	s15, s0
 80462e0:	ed9f 7a84 	vldr	s14, [pc, #528]	; 80464f4 <lsm6dso_gyro_calibration+0x2b4>
 80462e4:	eec7 6a87 	vdiv.f32	s13, s15, s14
          1000.0f * DPS2RPS;
 80462e8:	ee16 0a90 	vmov	r0, s13
 80462ec:	f7fa f92c 	bl	8040548 <__aeabi_f2d>
 80462f0:	f04f 0200 	mov.w	r2, #0
 80462f4:	4b80      	ldr	r3, [pc, #512]	; (80464f8 <lsm6dso_gyro_calibration+0x2b8>)
 80462f6:	f7fa faa9 	bl	804084c <__aeabi_ddiv>
 80462fa:	4602      	mov	r2, r0
 80462fc:	460b      	mov	r3, r1
 80462fe:	4610      	mov	r0, r2
 8046300:	4619      	mov	r1, r3
 8046302:	a377      	add	r3, pc, #476	; (adr r3, 80464e0 <lsm6dso_gyro_calibration+0x2a0>)
 8046304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8046308:	f7fa f976 	bl	80405f8 <__aeabi_dmul>
 804630c:	4602      	mov	r2, r0
 804630e:	460b      	mov	r3, r1
 8046310:	4610      	mov	r0, r2
 8046312:	4619      	mov	r1, r3
 8046314:	f7fa fc68 	bl	8040be8 <__aeabi_d2f>
 8046318:	4603      	mov	r3, r0
      gyroscope[0] =
 804631a:	667b      	str	r3, [r7, #100]	; 0x64
      gyroscope[1] =
          lsm6dso_from_fs1000_to_mdps(data_raw_angular_rate.i16bit[1]) /
 804631c:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8046320:	4618      	mov	r0, r3
 8046322:	f001 f905 	bl	8047530 <lsm6dso_from_fs1000_to_mdps>
 8046326:	eef0 7a40 	vmov.f32	s15, s0
 804632a:	ed9f 7a72 	vldr	s14, [pc, #456]	; 80464f4 <lsm6dso_gyro_calibration+0x2b4>
 804632e:	eec7 6a87 	vdiv.f32	s13, s15, s14
          1000.0f * DPS2RPS;
 8046332:	ee16 0a90 	vmov	r0, s13
 8046336:	f7fa f907 	bl	8040548 <__aeabi_f2d>
 804633a:	f04f 0200 	mov.w	r2, #0
 804633e:	4b6e      	ldr	r3, [pc, #440]	; (80464f8 <lsm6dso_gyro_calibration+0x2b8>)
 8046340:	f7fa fa84 	bl	804084c <__aeabi_ddiv>
 8046344:	4602      	mov	r2, r0
 8046346:	460b      	mov	r3, r1
 8046348:	4610      	mov	r0, r2
 804634a:	4619      	mov	r1, r3
 804634c:	a364      	add	r3, pc, #400	; (adr r3, 80464e0 <lsm6dso_gyro_calibration+0x2a0>)
 804634e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8046352:	f7fa f951 	bl	80405f8 <__aeabi_dmul>
 8046356:	4602      	mov	r2, r0
 8046358:	460b      	mov	r3, r1
 804635a:	4610      	mov	r0, r2
 804635c:	4619      	mov	r1, r3
 804635e:	f7fa fc43 	bl	8040be8 <__aeabi_d2f>
 8046362:	4603      	mov	r3, r0
      gyroscope[1] =
 8046364:	66bb      	str	r3, [r7, #104]	; 0x68
      gyroscope[2] =
          lsm6dso_from_fs1000_to_mdps(data_raw_angular_rate.i16bit[2]) /
 8046366:	f9b7 3078 	ldrsh.w	r3, [r7, #120]	; 0x78
 804636a:	4618      	mov	r0, r3
 804636c:	f001 f8e0 	bl	8047530 <lsm6dso_from_fs1000_to_mdps>
 8046370:	eef0 7a40 	vmov.f32	s15, s0
 8046374:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80464f4 <lsm6dso_gyro_calibration+0x2b4>
 8046378:	eec7 6a87 	vdiv.f32	s13, s15, s14
          1000.0f * DPS2RPS;
 804637c:	ee16 0a90 	vmov	r0, s13
 8046380:	f7fa f8e2 	bl	8040548 <__aeabi_f2d>
 8046384:	f04f 0200 	mov.w	r2, #0
 8046388:	4b5b      	ldr	r3, [pc, #364]	; (80464f8 <lsm6dso_gyro_calibration+0x2b8>)
 804638a:	f7fa fa5f 	bl	804084c <__aeabi_ddiv>
 804638e:	4602      	mov	r2, r0
 8046390:	460b      	mov	r3, r1
 8046392:	4610      	mov	r0, r2
 8046394:	4619      	mov	r1, r3
 8046396:	a352      	add	r3, pc, #328	; (adr r3, 80464e0 <lsm6dso_gyro_calibration+0x2a0>)
 8046398:	e9d3 2300 	ldrd	r2, r3, [r3]
 804639c:	f7fa f92c 	bl	80405f8 <__aeabi_dmul>
 80463a0:	4602      	mov	r2, r0
 80463a2:	460b      	mov	r3, r1
 80463a4:	4610      	mov	r0, r2
 80463a6:	4619      	mov	r1, r3
 80463a8:	f7fa fc1e 	bl	8040be8 <__aeabi_d2f>
 80463ac:	4603      	mov	r3, r0
      gyroscope[2] =
 80463ae:	66fb      	str	r3, [r7, #108]	; 0x6c

      printf("%d, {%f, %f, %f}\r\n", gyro_info.cal_config.count,
 80463b0:	6bbe      	ldr	r6, [r7, #56]	; 0x38
             gyroscope[0], gyroscope[1], gyroscope[2]);
 80463b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
      printf("%d, {%f, %f, %f}\r\n", gyro_info.cal_config.count,
 80463b4:	4618      	mov	r0, r3
 80463b6:	f7fa f8c7 	bl	8040548 <__aeabi_f2d>
 80463ba:	4680      	mov	r8, r0
 80463bc:	4689      	mov	r9, r1
             gyroscope[0], gyroscope[1], gyroscope[2]);
 80463be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
      printf("%d, {%f, %f, %f}\r\n", gyro_info.cal_config.count,
 80463c0:	4618      	mov	r0, r3
 80463c2:	f7fa f8c1 	bl	8040548 <__aeabi_f2d>
 80463c6:	4604      	mov	r4, r0
 80463c8:	460d      	mov	r5, r1
             gyroscope[0], gyroscope[1], gyroscope[2]);
 80463ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
      printf("%d, {%f, %f, %f}\r\n", gyro_info.cal_config.count,
 80463cc:	4618      	mov	r0, r3
 80463ce:	f7fa f8bb 	bl	8040548 <__aeabi_f2d>
 80463d2:	4602      	mov	r2, r0
 80463d4:	460b      	mov	r3, r1
 80463d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80463da:	e9cd 4500 	strd	r4, r5, [sp]
 80463de:	4642      	mov	r2, r8
 80463e0:	464b      	mov	r3, r9
 80463e2:	4631      	mov	r1, r6
 80463e4:	4845      	ldr	r0, [pc, #276]	; (80464fc <lsm6dso_gyro_calibration+0x2bc>)
 80463e6:	f01a fac5 	bl	8060974 <iprintf>
      //apply axis transfer first
      ConvertCoordinate(gyroscope, g_imu_axis_order, g_imu_axis_sign);
 80463ea:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80463ee:	4a44      	ldr	r2, [pc, #272]	; (8046500 <lsm6dso_gyro_calibration+0x2c0>)
 80463f0:	4944      	ldr	r1, [pc, #272]	; (8046504 <lsm6dso_gyro_calibration+0x2c4>)
 80463f2:	4618      	mov	r0, r3
 80463f4:	f000 f9f2 	bl	80467dc <ConvertCoordinate>

      //fill data to data array
      printf("%d, {%f, %f, %f}\r\n", gyro_info.cal_config.count,
 80463f8:	6bbe      	ldr	r6, [r7, #56]	; 0x38
             gyroscope[0], gyroscope[1], gyroscope[2]);
 80463fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
      printf("%d, {%f, %f, %f}\r\n", gyro_info.cal_config.count,
 80463fc:	4618      	mov	r0, r3
 80463fe:	f7fa f8a3 	bl	8040548 <__aeabi_f2d>
 8046402:	4680      	mov	r8, r0
 8046404:	4689      	mov	r9, r1
             gyroscope[0], gyroscope[1], gyroscope[2]);
 8046406:	6ebb      	ldr	r3, [r7, #104]	; 0x68
      printf("%d, {%f, %f, %f}\r\n", gyro_info.cal_config.count,
 8046408:	4618      	mov	r0, r3
 804640a:	f7fa f89d 	bl	8040548 <__aeabi_f2d>
 804640e:	4604      	mov	r4, r0
 8046410:	460d      	mov	r5, r1
             gyroscope[0], gyroscope[1], gyroscope[2]);
 8046412:	6efb      	ldr	r3, [r7, #108]	; 0x6c
      printf("%d, {%f, %f, %f}\r\n", gyro_info.cal_config.count,
 8046414:	4618      	mov	r0, r3
 8046416:	f7fa f897 	bl	8040548 <__aeabi_f2d>
 804641a:	4602      	mov	r2, r0
 804641c:	460b      	mov	r3, r1
 804641e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8046422:	e9cd 4500 	strd	r4, r5, [sp]
 8046426:	4642      	mov	r2, r8
 8046428:	464b      	mov	r3, r9
 804642a:	4631      	mov	r1, r6
 804642c:	4833      	ldr	r0, [pc, #204]	; (80464fc <lsm6dso_gyro_calibration+0x2bc>)
 804642e:	f01a faa1 	bl	8060974 <iprintf>
      if (gyro_info.cal_config.count > SKIP_COUNT_GYRO)
 8046432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8046434:	2b03      	cmp	r3, #3
 8046436:	dd07      	ble.n	8046448 <lsm6dso_gyro_calibration+0x208>
        cal_process_sample(&gyro_info, gyroscope);
 8046438:	f107 0264 	add.w	r2, r7, #100	; 0x64
 804643c:	f107 030c 	add.w	r3, r7, #12
 8046440:	4611      	mov	r1, r2
 8046442:	4618      	mov	r0, r3
 8046444:	f7ff f89c 	bl	8045580 <cal_process_sample>
      gyro_info.cal_config.count++;
 8046448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 804644a:	3301      	adds	r3, #1
 804644c:	63bb      	str	r3, [r7, #56]	; 0x38

      lsm6dso_temp_flag_data_ready_get(ctx, &reg);
 804644e:	f107 037b 	add.w	r3, r7, #123	; 0x7b
 8046452:	4619      	mov	r1, r3
 8046454:	6878      	ldr	r0, [r7, #4]
 8046456:	f001 fb64 	bl	8047b22 <lsm6dso_temp_flag_data_ready_get>
      if (reg) {
 804645a:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 804645e:	2b00      	cmp	r3, #0
 8046460:	d018      	beq.n	8046494 <lsm6dso_gyro_calibration+0x254>
        /* Read temperature data */
        memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8046462:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8046466:	2202      	movs	r2, #2
 8046468:	2100      	movs	r1, #0
 804646a:	4618      	mov	r0, r3
 804646c:	f019 fda6 	bl	805ffbc <memset>
        lsm6dso_temperature_raw_get(ctx, data_raw_temperature.u8bit);
 8046470:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8046474:	4619      	mov	r1, r3
 8046476:	6878      	ldr	r0, [r7, #4]
 8046478:	f001 fb6c 	bl	8047b54 <lsm6dso_temperature_raw_get>
        temperature_degC =
            lsm6dso_from_lsb_to_celsius(data_raw_temperature.i16bit);
 804647c:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 8046480:	4618      	mov	r0, r3
 8046482:	f001 f885 	bl	8047590 <lsm6dso_from_lsb_to_celsius>
 8046486:	ed87 0a1f 	vstr	s0, [r7, #124]	; 0x7c
        pid_temp_control(&imu_pid_struct, temperature_degC);
 804648a:	ed97 0a1f 	vldr	s0, [r7, #124]	; 0x7c
 804648e:	4818      	ldr	r0, [pc, #96]	; (80464f0 <lsm6dso_gyro_calibration+0x2b0>)
 8046490:	f000 f890 	bl	80465b4 <pid_temp_control>
      }
    }
    platform_delay(10);
 8046494:	200a      	movs	r0, #10
 8046496:	f000 f839 	bl	804650c <platform_delay>
  } while ((gyro_info.cal_config.count < SKIP_COUNT * 2)
 804649a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
           && (gyro_info.cal_state != CAL_STATE_SUCCESS));
 804649c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80464a0:	da03      	bge.n	80464aa <lsm6dso_gyro_calibration+0x26a>
 80464a2:	7e3b      	ldrb	r3, [r7, #24]
 80464a4:	2b02      	cmp	r3, #2
 80464a6:	f47f aefc 	bne.w	80462a2 <lsm6dso_gyro_calibration+0x62>

  pid_pwm_control(PWM_DEACTIVATE, 0);
 80464aa:	2100      	movs	r1, #0
 80464ac:	2001      	movs	r0, #1
 80464ae:	f000 f838 	bl	8046522 <pid_pwm_control>

  if (gyro_info.cal_state == CAL_STATE_SUCCESS) {
 80464b2:	7e3b      	ldrb	r3, [r7, #24]
 80464b4:	2b02      	cmp	r3, #2
 80464b6:	d10b      	bne.n	80464d0 <lsm6dso_gyro_calibration+0x290>
    printf("gyro calibration successed!\r\n");
 80464b8:	4813      	ldr	r0, [pc, #76]	; (8046508 <lsm6dso_gyro_calibration+0x2c8>)
 80464ba:	f01a faf7 	bl	8060aac <puts>
    memcpy(offset, gyro_info.offset, sizeof(float) * 3);
 80464be:	f107 030c 	add.w	r3, r7, #12
 80464c2:	220c      	movs	r2, #12
 80464c4:	4619      	mov	r1, r3
 80464c6:	6838      	ldr	r0, [r7, #0]
 80464c8:	f019 fd6a 	bl	805ffa0 <memcpy>
    return 0;
 80464cc:	2300      	movs	r3, #0
 80464ce:	e001      	b.n	80464d4 <lsm6dso_gyro_calibration+0x294>
  }

  return -1;
 80464d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80464d4:	4618      	mov	r0, r3
 80464d6:	3784      	adds	r7, #132	; 0x84
 80464d8:	46bd      	mov	sp, r7
 80464da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80464de:	bf00      	nop
 80464e0:	60000000 	.word	0x60000000
 80464e4:	400921fb 	.word	0x400921fb
 80464e8:	41200000 	.word	0x41200000
 80464ec:	42300000 	.word	0x42300000
 80464f0:	2000803c 	.word	0x2000803c
 80464f4:	447a0000 	.word	0x447a0000
 80464f8:	40668000 	.word	0x40668000
 80464fc:	08065864 	.word	0x08065864
 8046500:	2001be00 	.word	0x2001be00
 8046504:	2001bdfc 	.word	0x2001bdfc
 8046508:	08065894 	.word	0x08065894

0804650c <platform_delay>:
 *
 * @param  ms        delay in ms
 *
 */
static void platform_delay(uint32_t ms)
{
 804650c:	b580      	push	{r7, lr}
 804650e:	b082      	sub	sp, #8
 8046510:	af00      	add	r7, sp, #0
 8046512:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 8046514:	6878      	ldr	r0, [r7, #4]
 8046516:	f009 f899 	bl	804f64c <HAL_Delay>
}
 804651a:	bf00      	nop
 804651c:	3708      	adds	r7, #8
 804651e:	46bd      	mov	sp, r7
 8046520:	bd80      	pop	{r7, pc}

08046522 <pid_pwm_control>:
static bool gyro_data_report_in_uart_mode = false;

TIM_HandleTypeDef *tim1;        // XXX move and rename

void pid_pwm_control(uint8_t command, uint16_t data)
{
 8046522:	b480      	push	{r7}
 8046524:	b083      	sub	sp, #12
 8046526:	af00      	add	r7, sp, #0
 8046528:	4603      	mov	r3, r0
 804652a:	460a      	mov	r2, r1
 804652c:	71fb      	strb	r3, [r7, #7]
 804652e:	4613      	mov	r3, r2
 8046530:	80bb      	strh	r3, [r7, #4]
  return;
 8046532:	bf00      	nop
    } else {
      //assert here
    }
    break;
  }
}
 8046534:	370c      	adds	r7, #12
 8046536:	46bd      	mov	sp, r7
 8046538:	f85d 7b04 	ldr.w	r7, [sp], #4
 804653c:	4770      	bx	lr

0804653e <PID_Init>:

void PID_Init(PID * Pid, float SETtemp)
{
 804653e:	b480      	push	{r7}
 8046540:	b083      	sub	sp, #12
 8046542:	af00      	add	r7, sp, #0
 8046544:	6078      	str	r0, [r7, #4]
 8046546:	ed87 0a00 	vstr	s0, [r7]
  Pid->Set_temperature = SETtemp;
 804654a:	687b      	ldr	r3, [r7, #4]
 804654c:	683a      	ldr	r2, [r7, #0]
 804654e:	601a      	str	r2, [r3, #0]
  Pid->proportion = 0.5;
 8046550:	687b      	ldr	r3, [r7, #4]
 8046552:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8046556:	609a      	str	r2, [r3, #8]
  Pid->integral = 4;
 8046558:	687b      	ldr	r3, [r7, #4]
 804655a:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 804655e:	60da      	str	r2, [r3, #12]
  Pid->differential = 1.5;
 8046560:	687b      	ldr	r3, [r7, #4]
 8046562:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8046566:	611a      	str	r2, [r3, #16]
  Pid->T = 100;
 8046568:	687b      	ldr	r3, [r7, #4]
 804656a:	2264      	movs	r2, #100	; 0x64
 804656c:	615a      	str	r2, [r3, #20]
  Pid->error_current = 0.0;
 804656e:	687b      	ldr	r3, [r7, #4]
 8046570:	f04f 0200 	mov.w	r2, #0
 8046574:	619a      	str	r2, [r3, #24]
  Pid->error_last = 0;
 8046576:	687b      	ldr	r3, [r7, #4]
 8046578:	f04f 0200 	mov.w	r2, #0
 804657c:	61da      	str	r2, [r3, #28]
  Pid->error_sum = 0;
 804657e:	687b      	ldr	r3, [r7, #4]
 8046580:	f04f 0200 	mov.w	r2, #0
 8046584:	621a      	str	r2, [r3, #32]
  Pid->pid_proportion_out = 0;
 8046586:	687b      	ldr	r3, [r7, #4]
 8046588:	f04f 0200 	mov.w	r2, #0
 804658c:	625a      	str	r2, [r3, #36]	; 0x24
  Pid->pid_integral_out = 0;
 804658e:	687b      	ldr	r3, [r7, #4]
 8046590:	f04f 0200 	mov.w	r2, #0
 8046594:	629a      	str	r2, [r3, #40]	; 0x28
  Pid->pid_differential_out = 0;
 8046596:	687b      	ldr	r3, [r7, #4]
 8046598:	f04f 0200 	mov.w	r2, #0
 804659c:	62da      	str	r2, [r3, #44]	; 0x2c
  Pid->pid_out = 0;
 804659e:	687b      	ldr	r3, [r7, #4]
 80465a0:	f04f 0200 	mov.w	r2, #0
 80465a4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80465a6:	bf00      	nop
 80465a8:	370c      	adds	r7, #12
 80465aa:	46bd      	mov	sp, r7
 80465ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80465b0:	4770      	bx	lr
	...

080465b4 <pid_temp_control>:

float pid_temp_control(PID * PP, float current_temp)
{
 80465b4:	b580      	push	{r7, lr}
 80465b6:	b088      	sub	sp, #32
 80465b8:	af00      	add	r7, sp, #0
 80465ba:	6078      	str	r0, [r7, #4]
 80465bc:	ed87 0a00 	vstr	s0, [r7]
  static float PID_ZL = 0.0;
  float result = 0.0;
 80465c0:	f04f 0300 	mov.w	r3, #0
 80465c4:	61fb      	str	r3, [r7, #28]
  float A0, A1, A2;
  PP->error_current = PP->Set_temperature - current_temp;
 80465c6:	687b      	ldr	r3, [r7, #4]
 80465c8:	ed93 7a00 	vldr	s14, [r3]
 80465cc:	edd7 7a00 	vldr	s15, [r7]
 80465d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80465d4:	687b      	ldr	r3, [r7, #4]
 80465d6:	edc3 7a06 	vstr	s15, [r3, #24]
  //printf("error_c:%f, current_c: %f \r\n", PP->error_current, current_temp);

  if (PP->error_current >= PID_TEMP_THRES)
 80465da:	687b      	ldr	r3, [r7, #4]
 80465dc:	edd3 7a06 	vldr	s15, [r3, #24]
 80465e0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80465e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80465e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80465ec:	db04      	blt.n	80465f8 <pid_temp_control+0x44>
    pid_pwm_control(PWM_CONFIG, 1);
 80465ee:	2101      	movs	r1, #1
 80465f0:	2002      	movs	r0, #2
 80465f2:	f7ff ff96 	bl	8046522 <pid_pwm_control>
 80465f6:	e0b6      	b.n	8046766 <pid_temp_control+0x1b2>
  else if (PP->error_current <= -PID_TEMP_THRES)
 80465f8:	687b      	ldr	r3, [r7, #4]
 80465fa:	edd3 7a06 	vldr	s15, [r3, #24]
 80465fe:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8046602:	eef4 7ac7 	vcmpe.f32	s15, s14
 8046606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 804660a:	d805      	bhi.n	8046618 <pid_temp_control+0x64>
    pid_pwm_control(PWM_CONFIG, 0xFFFF);
 804660c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8046610:	2002      	movs	r0, #2
 8046612:	f7ff ff86 	bl	8046522 <pid_pwm_control>
 8046616:	e0a6      	b.n	8046766 <pid_temp_control+0x1b2>
  else if (PP->error_current < PID_TEMP_THRES
 8046618:	687b      	ldr	r3, [r7, #4]
 804661a:	edd3 7a06 	vldr	s15, [r3, #24]
 804661e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8046622:	eef4 7ac7 	vcmpe.f32	s15, s14
 8046626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 804662a:	f140 809c 	bpl.w	8046766 <pid_temp_control+0x1b2>
           && PP->error_current > -PID_TEMP_THRES) {
 804662e:	687b      	ldr	r3, [r7, #4]
 8046630:	edd3 7a06 	vldr	s15, [r3, #24]
 8046634:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8046638:	eef4 7ac7 	vcmpe.f32	s15, s14
 804663c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8046640:	f340 8091 	ble.w	8046766 <pid_temp_control+0x1b2>
    A0 = PP->proportion * (1 + PP->T / PP->integral + PP->differential / PP->T);
 8046644:	687b      	ldr	r3, [r7, #4]
 8046646:	ed93 7a02 	vldr	s14, [r3, #8]
 804664a:	687b      	ldr	r3, [r7, #4]
 804664c:	695b      	ldr	r3, [r3, #20]
 804664e:	ee07 3a90 	vmov	s15, r3
 8046652:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8046656:	687b      	ldr	r3, [r7, #4]
 8046658:	edd3 6a03 	vldr	s13, [r3, #12]
 804665c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8046660:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8046664:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8046668:	687b      	ldr	r3, [r7, #4]
 804666a:	edd3 5a04 	vldr	s11, [r3, #16]
 804666e:	687b      	ldr	r3, [r7, #4]
 8046670:	695b      	ldr	r3, [r3, #20]
 8046672:	ee07 3a90 	vmov	s15, r3
 8046676:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 804667a:	eec5 7a86 	vdiv.f32	s15, s11, s12
 804667e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8046682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8046686:	edc7 7a06 	vstr	s15, [r7, #24]
    A1 = -PP->proportion * (1 + 2 * PP->differential / PP->T);
 804668a:	687b      	ldr	r3, [r7, #4]
 804668c:	edd3 7a02 	vldr	s15, [r3, #8]
 8046690:	eeb1 7a67 	vneg.f32	s14, s15
 8046694:	687b      	ldr	r3, [r7, #4]
 8046696:	edd3 7a04 	vldr	s15, [r3, #16]
 804669a:	ee37 6aa7 	vadd.f32	s12, s15, s15
 804669e:	687b      	ldr	r3, [r7, #4]
 80466a0:	695b      	ldr	r3, [r3, #20]
 80466a2:	ee07 3a90 	vmov	s15, r3
 80466a6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80466aa:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80466ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80466b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80466b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80466ba:	edc7 7a05 	vstr	s15, [r7, #20]
    A2 = PP->proportion * (PP->differential / PP->T);
 80466be:	687b      	ldr	r3, [r7, #4]
 80466c0:	ed93 7a02 	vldr	s14, [r3, #8]
 80466c4:	687b      	ldr	r3, [r7, #4]
 80466c6:	ed93 6a04 	vldr	s12, [r3, #16]
 80466ca:	687b      	ldr	r3, [r7, #4]
 80466cc:	695b      	ldr	r3, [r3, #20]
 80466ce:	ee07 3a90 	vmov	s15, r3
 80466d2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80466d6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80466da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80466de:	edc7 7a04 	vstr	s15, [r7, #16]
    result = A0 * PP->error_current + A1 * PP->error_last + A2 * PP->error_sum;
 80466e2:	687b      	ldr	r3, [r7, #4]
 80466e4:	ed93 7a06 	vldr	s14, [r3, #24]
 80466e8:	edd7 7a06 	vldr	s15, [r7, #24]
 80466ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80466f0:	687b      	ldr	r3, [r7, #4]
 80466f2:	edd3 6a07 	vldr	s13, [r3, #28]
 80466f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80466fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80466fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8046702:	687b      	ldr	r3, [r7, #4]
 8046704:	edd3 6a08 	vldr	s13, [r3, #32]
 8046708:	edd7 7a04 	vldr	s15, [r7, #16]
 804670c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8046710:	ee77 7a27 	vadd.f32	s15, s14, s15
 8046714:	edc7 7a07 	vstr	s15, [r7, #28]
    result += PID_ZL;
 8046718:	4b1c      	ldr	r3, [pc, #112]	; (804678c <pid_temp_control+0x1d8>)
 804671a:	edd3 7a00 	vldr	s15, [r3]
 804671e:	ed97 7a07 	vldr	s14, [r7, #28]
 8046722:	ee77 7a27 	vadd.f32	s15, s14, s15
 8046726:	edc7 7a07 	vstr	s15, [r7, #28]
    float pid_control_data = 0;
 804672a:	f04f 0300 	mov.w	r3, #0
 804672e:	60fb      	str	r3, [r7, #12]
    pid_control_data =
        (PID_RESULT_MAX - result) / (PID_RESULT_MAX -
 8046730:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8046790 <pid_temp_control+0x1dc>
 8046734:	edd7 7a07 	vldr	s15, [r7, #28]
 8046738:	ee37 7a67 	vsub.f32	s14, s14, s15
 804673c:	eddf 6a15 	vldr	s13, [pc, #84]	; 8046794 <pid_temp_control+0x1e0>
 8046740:	eec7 7a26 	vdiv.f32	s15, s14, s13
    pid_control_data =
 8046744:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8046798 <pid_temp_control+0x1e4>
 8046748:	ee67 7a87 	vmul.f32	s15, s15, s14
 804674c:	edc7 7a03 	vstr	s15, [r7, #12]
                                     PID_RESULT_MIN) * 65535.0f;
    //printf("A0 = %f \r\n", A0);
    //printf("A1 = %f \r\n", A1);
    //printf("A2 = %f \r\n", A2);
    //printf("control: %f \r\n", pid_control_data);
    pid_pwm_control(PWM_CONFIG, (uint16_t) pid_control_data);
 8046750:	edd7 7a03 	vldr	s15, [r7, #12]
 8046754:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8046758:	ee17 3a90 	vmov	r3, s15
 804675c:	b29b      	uxth	r3, r3
 804675e:	4619      	mov	r1, r3
 8046760:	2002      	movs	r0, #2
 8046762:	f7ff fede 	bl	8046522 <pid_pwm_control>
  }

  PID_ZL = result;
 8046766:	4a09      	ldr	r2, [pc, #36]	; (804678c <pid_temp_control+0x1d8>)
 8046768:	69fb      	ldr	r3, [r7, #28]
 804676a:	6013      	str	r3, [r2, #0]
  //printf("PID_ZL: %f\r\n", PID_ZL);

  PP->error_sum = PP->error_last;
 804676c:	687b      	ldr	r3, [r7, #4]
 804676e:	69da      	ldr	r2, [r3, #28]
 8046770:	687b      	ldr	r3, [r7, #4]
 8046772:	621a      	str	r2, [r3, #32]
  PP->error_last = PP->error_current;
 8046774:	687b      	ldr	r3, [r7, #4]
 8046776:	699a      	ldr	r2, [r3, #24]
 8046778:	687b      	ldr	r3, [r7, #4]
 804677a:	61da      	str	r2, [r3, #28]
  return result;
 804677c:	69fb      	ldr	r3, [r7, #28]
 804677e:	ee07 3a90 	vmov	s15, r3
}
 8046782:	eeb0 0a67 	vmov.f32	s0, s15
 8046786:	3720      	adds	r7, #32
 8046788:	46bd      	mov	sp, r7
 804678a:	bd80      	pop	{r7, pc}
 804678c:	20008088 	.word	0x20008088
 8046790:	43c80000 	.word	0x43c80000
 8046794:	44898000 	.word	0x44898000
 8046798:	477fff00 	.word	0x477fff00

0804679c <lsm6dso_delay_us>:
 * \brief Busy wait delay for us microseconds
 *
 * \note
 */
void lsm6dso_delay_us(uint32_t us)
{
 804679c:	b580      	push	{r7, lr}
 804679e:	b084      	sub	sp, #16
 80467a0:	af00      	add	r7, sp, #0
 80467a2:	6078      	str	r0, [r7, #4]
  uint32_t cycles_per_us = HAL_RCC_GetSysClockFreq() / 10000000;
 80467a4:	f00c ff34 	bl	8053610 <HAL_RCC_GetSysClockFreq>
 80467a8:	4603      	mov	r3, r0
 80467aa:	4a0b      	ldr	r2, [pc, #44]	; (80467d8 <lsm6dso_delay_us+0x3c>)
 80467ac:	fba2 2303 	umull	r2, r3, r2, r3
 80467b0:	0d9b      	lsrs	r3, r3, #22
 80467b2:	60fb      	str	r3, [r7, #12]
  volatile uint32_t i;

  for (i = 0; i < (us * cycles_per_us); i++) {
 80467b4:	2300      	movs	r3, #0
 80467b6:	60bb      	str	r3, [r7, #8]
 80467b8:	e002      	b.n	80467c0 <lsm6dso_delay_us+0x24>
 80467ba:	68bb      	ldr	r3, [r7, #8]
 80467bc:	3301      	adds	r3, #1
 80467be:	60bb      	str	r3, [r7, #8]
 80467c0:	687b      	ldr	r3, [r7, #4]
 80467c2:	68fa      	ldr	r2, [r7, #12]
 80467c4:	fb02 f203 	mul.w	r2, r2, r3
 80467c8:	68bb      	ldr	r3, [r7, #8]
 80467ca:	429a      	cmp	r2, r3
 80467cc:	d8f5      	bhi.n	80467ba <lsm6dso_delay_us+0x1e>
    ;
  }
}
 80467ce:	bf00      	nop
 80467d0:	bf00      	nop
 80467d2:	3710      	adds	r7, #16
 80467d4:	46bd      	mov	sp, r7
 80467d6:	bd80      	pop	{r7, pc}
 80467d8:	6b5fca6b 	.word	0x6b5fca6b

080467dc <ConvertCoordinate>:

void ConvertCoordinate(float vec[3], const uint8_t axis_order[3],
                       const uint8_t axis_sign[3])
{
 80467dc:	b480      	push	{r7}
 80467de:	b089      	sub	sp, #36	; 0x24
 80467e0:	af00      	add	r7, sp, #0
 80467e2:	60f8      	str	r0, [r7, #12]
 80467e4:	60b9      	str	r1, [r7, #8]
 80467e6:	607a      	str	r2, [r7, #4]
  float val32[3];
  uint8_t i;

  /* Axis conversion */
  for (i = 0; i < 3; i++) {
 80467e8:	2300      	movs	r3, #0
 80467ea:	77fb      	strb	r3, [r7, #31]
 80467ec:	e029      	b.n	8046842 <ConvertCoordinate+0x66>
    val32[i] = vec[axis_order[i]];
 80467ee:	7ffb      	ldrb	r3, [r7, #31]
 80467f0:	68ba      	ldr	r2, [r7, #8]
 80467f2:	4413      	add	r3, r2
 80467f4:	781b      	ldrb	r3, [r3, #0]
 80467f6:	009b      	lsls	r3, r3, #2
 80467f8:	68fa      	ldr	r2, [r7, #12]
 80467fa:	441a      	add	r2, r3
 80467fc:	7ffb      	ldrb	r3, [r7, #31]
 80467fe:	6812      	ldr	r2, [r2, #0]
 8046800:	009b      	lsls	r3, r3, #2
 8046802:	f107 0120 	add.w	r1, r7, #32
 8046806:	440b      	add	r3, r1
 8046808:	3b10      	subs	r3, #16
 804680a:	601a      	str	r2, [r3, #0]

    if (axis_sign[i]) {
 804680c:	7ffb      	ldrb	r3, [r7, #31]
 804680e:	687a      	ldr	r2, [r7, #4]
 8046810:	4413      	add	r3, r2
 8046812:	781b      	ldrb	r3, [r3, #0]
 8046814:	2b00      	cmp	r3, #0
 8046816:	d011      	beq.n	804683c <ConvertCoordinate+0x60>
      val32[i] *= -1;
 8046818:	7ffb      	ldrb	r3, [r7, #31]
 804681a:	009b      	lsls	r3, r3, #2
 804681c:	f107 0220 	add.w	r2, r7, #32
 8046820:	4413      	add	r3, r2
 8046822:	3b10      	subs	r3, #16
 8046824:	edd3 7a00 	vldr	s15, [r3]
 8046828:	7ffb      	ldrb	r3, [r7, #31]
 804682a:	eef1 7a67 	vneg.f32	s15, s15
 804682e:	009b      	lsls	r3, r3, #2
 8046830:	f107 0220 	add.w	r2, r7, #32
 8046834:	4413      	add	r3, r2
 8046836:	3b10      	subs	r3, #16
 8046838:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 3; i++) {
 804683c:	7ffb      	ldrb	r3, [r7, #31]
 804683e:	3301      	adds	r3, #1
 8046840:	77fb      	strb	r3, [r7, #31]
 8046842:	7ffb      	ldrb	r3, [r7, #31]
 8046844:	2b02      	cmp	r3, #2
 8046846:	d9d2      	bls.n	80467ee <ConvertCoordinate+0x12>
    }
  }

  /* Copy to argument */
  for (i = 0; i < 3; i++) {
 8046848:	2300      	movs	r3, #0
 804684a:	77fb      	strb	r3, [r7, #31]
 804684c:	e00e      	b.n	804686c <ConvertCoordinate+0x90>
    vec[i] = val32[i];
 804684e:	7ffa      	ldrb	r2, [r7, #31]
 8046850:	7ffb      	ldrb	r3, [r7, #31]
 8046852:	009b      	lsls	r3, r3, #2
 8046854:	68f9      	ldr	r1, [r7, #12]
 8046856:	440b      	add	r3, r1
 8046858:	0092      	lsls	r2, r2, #2
 804685a:	f107 0120 	add.w	r1, r7, #32
 804685e:	440a      	add	r2, r1
 8046860:	3a10      	subs	r2, #16
 8046862:	6812      	ldr	r2, [r2, #0]
 8046864:	601a      	str	r2, [r3, #0]
  for (i = 0; i < 3; i++) {
 8046866:	7ffb      	ldrb	r3, [r7, #31]
 8046868:	3301      	adds	r3, #1
 804686a:	77fb      	strb	r3, [r7, #31]
 804686c:	7ffb      	ldrb	r3, [r7, #31]
 804686e:	2b02      	cmp	r3, #2
 8046870:	d9ed      	bls.n	804684e <ConvertCoordinate+0x72>
  }
}
 8046872:	bf00      	nop
 8046874:	bf00      	nop
 8046876:	3724      	adds	r7, #36	; 0x24
 8046878:	46bd      	mov	sp, r7
 804687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804687e:	4770      	bx	lr

08046880 <lsm6dso_publish_sensor_data>:

/* Main Example --------------------------------------------------------------*/
int lsm6dso_publish_sensor_data(void *para)
{
 8046880:	b5b0      	push	{r4, r5, r7, lr}
 8046882:	b0a2      	sub	sp, #136	; 0x88
 8046884:	af00      	add	r7, sp, #0
 8046886:	6078      	str	r0, [r7, #4]
  /* Read samples in polling mode (no int) */
  sensors_event_t sensor_data = { 0 };
 8046888:	f107 0338 	add.w	r3, r7, #56	; 0x38
 804688c:	2250      	movs	r2, #80	; 0x50
 804688e:	2100      	movs	r1, #0
 8046890:	4618      	mov	r0, r3
 8046892:	f019 fb93 	bl	805ffbc <memset>
  lsm6dso_status_reg_t reg;

  lsm6dso_status_reg_get(&dev_ctx, &reg);
 8046896:	f107 0334 	add.w	r3, r7, #52	; 0x34
 804689a:	4619      	mov	r1, r3
 804689c:	48ce      	ldr	r0, [pc, #824]	; (8046bd8 <lsm6dso_publish_sensor_data+0x358>)
 804689e:	f001 f8fd 	bl	8047a9c <lsm6dso_status_reg_get>

  if (reg.xlda) {
 80468a2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80468a6:	f003 0301 	and.w	r3, r3, #1
 80468aa:	b2db      	uxtb	r3, r3
 80468ac:	2b00      	cmp	r3, #0
 80468ae:	f000 808b 	beq.w	80469c8 <lsm6dso_publish_sensor_data+0x148>
    /* Read acceleration field data */
    memset(data_raw_acceleration.u8bit, 0x00, 3 * sizeof(int16_t));
 80468b2:	2206      	movs	r2, #6
 80468b4:	2100      	movs	r1, #0
 80468b6:	48c9      	ldr	r0, [pc, #804]	; (8046bdc <lsm6dso_publish_sensor_data+0x35c>)
 80468b8:	f019 fb80 	bl	805ffbc <memset>
    lsm6dso_acceleration_raw_get(&dev_ctx, data_raw_acceleration.u8bit);
 80468bc:	49c7      	ldr	r1, [pc, #796]	; (8046bdc <lsm6dso_publish_sensor_data+0x35c>)
 80468be:	48c6      	ldr	r0, [pc, #792]	; (8046bd8 <lsm6dso_publish_sensor_data+0x358>)
 80468c0:	f001 f96a 	bl	8047b98 <lsm6dso_acceleration_raw_get>
    acceleration_mg[0] =
        lsm6dso_from_fs8_to_mg(data_raw_acceleration.i16bit[0]);
 80468c4:	4bc5      	ldr	r3, [pc, #788]	; (8046bdc <lsm6dso_publish_sensor_data+0x35c>)
 80468c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80468ca:	4618      	mov	r0, r3
 80468cc:	f000 fe18 	bl	8047500 <lsm6dso_from_fs8_to_mg>
 80468d0:	eef0 7a40 	vmov.f32	s15, s0
    acceleration_mg[0] =
 80468d4:	4bc2      	ldr	r3, [pc, #776]	; (8046be0 <lsm6dso_publish_sensor_data+0x360>)
 80468d6:	edc3 7a00 	vstr	s15, [r3]
    acceleration_mg[1] =
        lsm6dso_from_fs8_to_mg(data_raw_acceleration.i16bit[1]);
 80468da:	4bc0      	ldr	r3, [pc, #768]	; (8046bdc <lsm6dso_publish_sensor_data+0x35c>)
 80468dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80468e0:	4618      	mov	r0, r3
 80468e2:	f000 fe0d 	bl	8047500 <lsm6dso_from_fs8_to_mg>
 80468e6:	eef0 7a40 	vmov.f32	s15, s0
    acceleration_mg[1] =
 80468ea:	4bbd      	ldr	r3, [pc, #756]	; (8046be0 <lsm6dso_publish_sensor_data+0x360>)
 80468ec:	edc3 7a01 	vstr	s15, [r3, #4]
    acceleration_mg[2] =
        lsm6dso_from_fs8_to_mg(data_raw_acceleration.i16bit[2]);
 80468f0:	4bba      	ldr	r3, [pc, #744]	; (8046bdc <lsm6dso_publish_sensor_data+0x35c>)
 80468f2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80468f6:	4618      	mov	r0, r3
 80468f8:	f000 fe02 	bl	8047500 <lsm6dso_from_fs8_to_mg>
 80468fc:	eef0 7a40 	vmov.f32	s15, s0
    acceleration_mg[2] =
 8046900:	4bb7      	ldr	r3, [pc, #732]	; (8046be0 <lsm6dso_publish_sensor_data+0x360>)
 8046902:	edc3 7a02 	vstr	s15, [r3, #8]

    if (acc_gyro_init_parms->use_uart_mode == 1) {
 8046906:	4bb7      	ldr	r3, [pc, #732]	; (8046be4 <lsm6dso_publish_sensor_data+0x364>)
 8046908:	681b      	ldr	r3, [r3, #0]
 804690a:	f893 3198 	ldrb.w	r3, [r3, #408]	; 0x198
 804690e:	2b01      	cmp	r3, #1
 8046910:	d102      	bne.n	8046918 <lsm6dso_publish_sensor_data+0x98>
      //set a flag to report acc data
      acc_data_report_in_uart_mode = true;
 8046912:	4bb5      	ldr	r3, [pc, #724]	; (8046be8 <lsm6dso_publish_sensor_data+0x368>)
 8046914:	2201      	movs	r2, #1
 8046916:	701a      	strb	r2, [r3, #0]
    }
    //apply axis transfer first
    ConvertCoordinate(acceleration_mg, g_imu_axis_order, g_imu_axis_sign);
 8046918:	4ab4      	ldr	r2, [pc, #720]	; (8046bec <lsm6dso_publish_sensor_data+0x36c>)
 804691a:	49b5      	ldr	r1, [pc, #724]	; (8046bf0 <lsm6dso_publish_sensor_data+0x370>)
 804691c:	48b0      	ldr	r0, [pc, #704]	; (8046be0 <lsm6dso_publish_sensor_data+0x360>)
 804691e:	f7ff ff5d 	bl	80467dc <ConvertCoordinate>

    if (acc_activated) {
 8046922:	4bb4      	ldr	r3, [pc, #720]	; (8046bf4 <lsm6dso_publish_sensor_data+0x374>)
 8046924:	781b      	ldrb	r3, [r3, #0]
 8046926:	2b00      	cmp	r3, #0
 8046928:	d04e      	beq.n	80469c8 <lsm6dso_publish_sensor_data+0x148>
      //send related messages to SensorDataQ
      sensor_data.sensor_type = SENSOR_TYPE_ACCELEROMETER;
 804692a:	2300      	movs	r3, #0
 804692c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
      sensor_data.accuracy = 3;
 8046930:	2303      	movs	r3, #3
 8046932:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
      sensor_data.timestamp = sensor_get_timestamp();
 8046936:	f006 fee7 	bl	804d708 <sensor_get_timestamp>
 804693a:	4602      	mov	r2, r0
 804693c:	460b      	mov	r3, r1
 804693e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      sensor_data.sensor_data_t.vec.data[0] = acceleration_mg[0]
 8046942:	4ba7      	ldr	r3, [pc, #668]	; (8046be0 <lsm6dso_publish_sensor_data+0x360>)
 8046944:	edd3 7a00 	vldr	s15, [r3]
          * GRAVITY_EARTH / 1000.0f - acceleration_offset[0];
 8046948:	ed9f 7aab 	vldr	s14, [pc, #684]	; 8046bf8 <lsm6dso_publish_sensor_data+0x378>
 804694c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8046950:	eddf 6aaa 	vldr	s13, [pc, #680]	; 8046bfc <lsm6dso_publish_sensor_data+0x37c>
 8046954:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8046958:	4ba9      	ldr	r3, [pc, #676]	; (8046c00 <lsm6dso_publish_sensor_data+0x380>)
 804695a:	edd3 7a00 	vldr	s15, [r3]
 804695e:	ee77 7a67 	vsub.f32	s15, s14, s15
      sensor_data.sensor_data_t.vec.data[0] = acceleration_mg[0]
 8046962:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      sensor_data.sensor_data_t.vec.data[1] = acceleration_mg[1]
 8046966:	4b9e      	ldr	r3, [pc, #632]	; (8046be0 <lsm6dso_publish_sensor_data+0x360>)
 8046968:	edd3 7a01 	vldr	s15, [r3, #4]
          * GRAVITY_EARTH / 1000.0f - acceleration_offset[1];
 804696c:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 8046bf8 <lsm6dso_publish_sensor_data+0x378>
 8046970:	ee67 7a87 	vmul.f32	s15, s15, s14
 8046974:	eddf 6aa1 	vldr	s13, [pc, #644]	; 8046bfc <lsm6dso_publish_sensor_data+0x37c>
 8046978:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 804697c:	4ba0      	ldr	r3, [pc, #640]	; (8046c00 <lsm6dso_publish_sensor_data+0x380>)
 804697e:	edd3 7a01 	vldr	s15, [r3, #4]
 8046982:	ee77 7a67 	vsub.f32	s15, s14, s15
      sensor_data.sensor_data_t.vec.data[1] = acceleration_mg[1]
 8046986:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
      sensor_data.sensor_data_t.vec.data[2] = acceleration_mg[2]
 804698a:	4b95      	ldr	r3, [pc, #596]	; (8046be0 <lsm6dso_publish_sensor_data+0x360>)
 804698c:	edd3 7a02 	vldr	s15, [r3, #8]
          * GRAVITY_EARTH / 1000.0f - acceleration_offset[2];
 8046990:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8046bf8 <lsm6dso_publish_sensor_data+0x378>
 8046994:	ee67 7a87 	vmul.f32	s15, s15, s14
 8046998:	eddf 6a98 	vldr	s13, [pc, #608]	; 8046bfc <lsm6dso_publish_sensor_data+0x37c>
 804699c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80469a0:	4b97      	ldr	r3, [pc, #604]	; (8046c00 <lsm6dso_publish_sensor_data+0x380>)
 80469a2:	edd3 7a02 	vldr	s15, [r3, #8]
 80469a6:	ee77 7a67 	vsub.f32	s15, s14, s15
      sensor_data.sensor_data_t.vec.data[2] = acceleration_mg[2]
 80469aa:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
      sensor_data.sensor_data_t.vec.data[3] = temperature_degC;
 80469ae:	4b95      	ldr	r3, [pc, #596]	; (8046c04 <lsm6dso_publish_sensor_data+0x384>)
 80469b0:	681b      	ldr	r3, [r3, #0]
 80469b2:	657b      	str	r3, [r7, #84]	; 0x54
      osMessageQueuePut(acc_gyro_init_parms->SensorDataQHandle,
 80469b4:	4b8b      	ldr	r3, [pc, #556]	; (8046be4 <lsm6dso_publish_sensor_data+0x364>)
 80469b6:	681b      	ldr	r3, [r3, #0]
 80469b8:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 80469bc:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80469c0:	2300      	movs	r3, #0
 80469c2:	2200      	movs	r2, #0
 80469c4:	f00f fd1e 	bl	8056404 <osMessageQueuePut>
                        &sensor_data, 0, 0);
    }
  }

  if (reg.gda) {
 80469c8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80469cc:	f003 0302 	and.w	r3, r3, #2
 80469d0:	b2db      	uxtb	r3, r3
 80469d2:	2b00      	cmp	r3, #0
 80469d4:	f000 80e6 	beq.w	8046ba4 <lsm6dso_publish_sensor_data+0x324>
    /* Read angular rate field data */
    memset(data_raw_angular_rate.u8bit, 0x00, 3 * sizeof(int16_t));
 80469d8:	2206      	movs	r2, #6
 80469da:	2100      	movs	r1, #0
 80469dc:	488a      	ldr	r0, [pc, #552]	; (8046c08 <lsm6dso_publish_sensor_data+0x388>)
 80469de:	f019 faed 	bl	805ffbc <memset>
    lsm6dso_angular_rate_raw_get(&dev_ctx, data_raw_angular_rate.u8bit);
 80469e2:	4989      	ldr	r1, [pc, #548]	; (8046c08 <lsm6dso_publish_sensor_data+0x388>)
 80469e4:	487c      	ldr	r0, [pc, #496]	; (8046bd8 <lsm6dso_publish_sensor_data+0x358>)
 80469e6:	f001 f8c6 	bl	8047b76 <lsm6dso_angular_rate_raw_get>
    angular_rate_mdps[0] =
        lsm6dso_from_fs1000_to_mdps(data_raw_angular_rate.i16bit[0]);
 80469ea:	4b87      	ldr	r3, [pc, #540]	; (8046c08 <lsm6dso_publish_sensor_data+0x388>)
 80469ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80469f0:	4618      	mov	r0, r3
 80469f2:	f000 fd9d 	bl	8047530 <lsm6dso_from_fs1000_to_mdps>
 80469f6:	eef0 7a40 	vmov.f32	s15, s0
    angular_rate_mdps[0] =
 80469fa:	4b84      	ldr	r3, [pc, #528]	; (8046c0c <lsm6dso_publish_sensor_data+0x38c>)
 80469fc:	edc3 7a00 	vstr	s15, [r3]
    angular_rate_mdps[1] =
        lsm6dso_from_fs1000_to_mdps(data_raw_angular_rate.i16bit[1]);
 8046a00:	4b81      	ldr	r3, [pc, #516]	; (8046c08 <lsm6dso_publish_sensor_data+0x388>)
 8046a02:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8046a06:	4618      	mov	r0, r3
 8046a08:	f000 fd92 	bl	8047530 <lsm6dso_from_fs1000_to_mdps>
 8046a0c:	eef0 7a40 	vmov.f32	s15, s0
    angular_rate_mdps[1] =
 8046a10:	4b7e      	ldr	r3, [pc, #504]	; (8046c0c <lsm6dso_publish_sensor_data+0x38c>)
 8046a12:	edc3 7a01 	vstr	s15, [r3, #4]
    angular_rate_mdps[2] =
        lsm6dso_from_fs1000_to_mdps(data_raw_angular_rate.i16bit[2]);
 8046a16:	4b7c      	ldr	r3, [pc, #496]	; (8046c08 <lsm6dso_publish_sensor_data+0x388>)
 8046a18:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8046a1c:	4618      	mov	r0, r3
 8046a1e:	f000 fd87 	bl	8047530 <lsm6dso_from_fs1000_to_mdps>
 8046a22:	eef0 7a40 	vmov.f32	s15, s0
    angular_rate_mdps[2] =
 8046a26:	4b79      	ldr	r3, [pc, #484]	; (8046c0c <lsm6dso_publish_sensor_data+0x38c>)
 8046a28:	edc3 7a02 	vstr	s15, [r3, #8]

    if (acc_gyro_init_parms->use_uart_mode) {
 8046a2c:	4b6d      	ldr	r3, [pc, #436]	; (8046be4 <lsm6dso_publish_sensor_data+0x364>)
 8046a2e:	681b      	ldr	r3, [r3, #0]
 8046a30:	f893 3198 	ldrb.w	r3, [r3, #408]	; 0x198
 8046a34:	2b00      	cmp	r3, #0
 8046a36:	d002      	beq.n	8046a3e <lsm6dso_publish_sensor_data+0x1be>
      //set a flag to report gyro data
      gyro_data_report_in_uart_mode = true;
 8046a38:	4b75      	ldr	r3, [pc, #468]	; (8046c10 <lsm6dso_publish_sensor_data+0x390>)
 8046a3a:	2201      	movs	r2, #1
 8046a3c:	701a      	strb	r2, [r3, #0]
    }
    //apply axis transfer first
    ConvertCoordinate(angular_rate_mdps, g_imu_axis_order, g_imu_axis_sign);
 8046a3e:	4a6b      	ldr	r2, [pc, #428]	; (8046bec <lsm6dso_publish_sensor_data+0x36c>)
 8046a40:	496b      	ldr	r1, [pc, #428]	; (8046bf0 <lsm6dso_publish_sensor_data+0x370>)
 8046a42:	4872      	ldr	r0, [pc, #456]	; (8046c0c <lsm6dso_publish_sensor_data+0x38c>)
 8046a44:	f7ff feca 	bl	80467dc <ConvertCoordinate>

    if (gyro_activated) {
 8046a48:	4b72      	ldr	r3, [pc, #456]	; (8046c14 <lsm6dso_publish_sensor_data+0x394>)
 8046a4a:	781b      	ldrb	r3, [r3, #0]
 8046a4c:	2b00      	cmp	r3, #0
 8046a4e:	f000 80a9 	beq.w	8046ba4 <lsm6dso_publish_sensor_data+0x324>
      //send related messages to SensorDataQ
      sensor_data.sensor_type = SENSOR_TYPE_GYROSCOPE;
 8046a52:	2302      	movs	r3, #2
 8046a54:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
      sensor_data.accuracy = 3;
 8046a58:	2303      	movs	r3, #3
 8046a5a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
      sensor_data.timestamp = sensor_get_timestamp();
 8046a5e:	f006 fe53 	bl	804d708 <sensor_get_timestamp>
 8046a62:	4602      	mov	r2, r0
 8046a64:	460b      	mov	r3, r1
 8046a66:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      sensor_data.sensor_data_t.vec.data[0] = angular_rate_mdps[0]
 8046a6a:	4b68      	ldr	r3, [pc, #416]	; (8046c0c <lsm6dso_publish_sensor_data+0x38c>)
 8046a6c:	edd3 7a00 	vldr	s15, [r3]
          / 1000.0f * DPS2RPS - angular_rate_offset[0];
 8046a70:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8046bfc <lsm6dso_publish_sensor_data+0x37c>
 8046a74:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8046a78:	ee16 0a90 	vmov	r0, s13
 8046a7c:	f7f9 fd64 	bl	8040548 <__aeabi_f2d>
 8046a80:	f04f 0200 	mov.w	r2, #0
 8046a84:	4b64      	ldr	r3, [pc, #400]	; (8046c18 <lsm6dso_publish_sensor_data+0x398>)
 8046a86:	f7f9 fee1 	bl	804084c <__aeabi_ddiv>
 8046a8a:	4602      	mov	r2, r0
 8046a8c:	460b      	mov	r3, r1
 8046a8e:	4610      	mov	r0, r2
 8046a90:	4619      	mov	r1, r3
 8046a92:	a34f      	add	r3, pc, #316	; (adr r3, 8046bd0 <lsm6dso_publish_sensor_data+0x350>)
 8046a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8046a98:	f7f9 fdae 	bl	80405f8 <__aeabi_dmul>
 8046a9c:	4602      	mov	r2, r0
 8046a9e:	460b      	mov	r3, r1
 8046aa0:	4614      	mov	r4, r2
 8046aa2:	461d      	mov	r5, r3
 8046aa4:	4b5d      	ldr	r3, [pc, #372]	; (8046c1c <lsm6dso_publish_sensor_data+0x39c>)
 8046aa6:	681b      	ldr	r3, [r3, #0]
 8046aa8:	4618      	mov	r0, r3
 8046aaa:	f7f9 fd4d 	bl	8040548 <__aeabi_f2d>
 8046aae:	4602      	mov	r2, r0
 8046ab0:	460b      	mov	r3, r1
 8046ab2:	4620      	mov	r0, r4
 8046ab4:	4629      	mov	r1, r5
 8046ab6:	f7f9 fbe7 	bl	8040288 <__aeabi_dsub>
 8046aba:	4602      	mov	r2, r0
 8046abc:	460b      	mov	r3, r1
 8046abe:	4610      	mov	r0, r2
 8046ac0:	4619      	mov	r1, r3
 8046ac2:	f7fa f891 	bl	8040be8 <__aeabi_d2f>
 8046ac6:	4603      	mov	r3, r0
      sensor_data.sensor_data_t.vec.data[0] = angular_rate_mdps[0]
 8046ac8:	64bb      	str	r3, [r7, #72]	; 0x48
      sensor_data.sensor_data_t.vec.data[1] = angular_rate_mdps[1]
 8046aca:	4b50      	ldr	r3, [pc, #320]	; (8046c0c <lsm6dso_publish_sensor_data+0x38c>)
 8046acc:	edd3 7a01 	vldr	s15, [r3, #4]
          / 1000.0f * DPS2RPS - angular_rate_offset[1];
 8046ad0:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8046bfc <lsm6dso_publish_sensor_data+0x37c>
 8046ad4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8046ad8:	ee16 0a90 	vmov	r0, s13
 8046adc:	f7f9 fd34 	bl	8040548 <__aeabi_f2d>
 8046ae0:	f04f 0200 	mov.w	r2, #0
 8046ae4:	4b4c      	ldr	r3, [pc, #304]	; (8046c18 <lsm6dso_publish_sensor_data+0x398>)
 8046ae6:	f7f9 feb1 	bl	804084c <__aeabi_ddiv>
 8046aea:	4602      	mov	r2, r0
 8046aec:	460b      	mov	r3, r1
 8046aee:	4610      	mov	r0, r2
 8046af0:	4619      	mov	r1, r3
 8046af2:	a337      	add	r3, pc, #220	; (adr r3, 8046bd0 <lsm6dso_publish_sensor_data+0x350>)
 8046af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8046af8:	f7f9 fd7e 	bl	80405f8 <__aeabi_dmul>
 8046afc:	4602      	mov	r2, r0
 8046afe:	460b      	mov	r3, r1
 8046b00:	4614      	mov	r4, r2
 8046b02:	461d      	mov	r5, r3
 8046b04:	4b45      	ldr	r3, [pc, #276]	; (8046c1c <lsm6dso_publish_sensor_data+0x39c>)
 8046b06:	685b      	ldr	r3, [r3, #4]
 8046b08:	4618      	mov	r0, r3
 8046b0a:	f7f9 fd1d 	bl	8040548 <__aeabi_f2d>
 8046b0e:	4602      	mov	r2, r0
 8046b10:	460b      	mov	r3, r1
 8046b12:	4620      	mov	r0, r4
 8046b14:	4629      	mov	r1, r5
 8046b16:	f7f9 fbb7 	bl	8040288 <__aeabi_dsub>
 8046b1a:	4602      	mov	r2, r0
 8046b1c:	460b      	mov	r3, r1
 8046b1e:	4610      	mov	r0, r2
 8046b20:	4619      	mov	r1, r3
 8046b22:	f7fa f861 	bl	8040be8 <__aeabi_d2f>
 8046b26:	4603      	mov	r3, r0
      sensor_data.sensor_data_t.vec.data[1] = angular_rate_mdps[1]
 8046b28:	64fb      	str	r3, [r7, #76]	; 0x4c
      sensor_data.sensor_data_t.vec.data[2] = angular_rate_mdps[2]
 8046b2a:	4b38      	ldr	r3, [pc, #224]	; (8046c0c <lsm6dso_publish_sensor_data+0x38c>)
 8046b2c:	edd3 7a02 	vldr	s15, [r3, #8]
          / 1000.0f * DPS2RPS - angular_rate_offset[2];
 8046b30:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8046bfc <lsm6dso_publish_sensor_data+0x37c>
 8046b34:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8046b38:	ee16 0a90 	vmov	r0, s13
 8046b3c:	f7f9 fd04 	bl	8040548 <__aeabi_f2d>
 8046b40:	f04f 0200 	mov.w	r2, #0
 8046b44:	4b34      	ldr	r3, [pc, #208]	; (8046c18 <lsm6dso_publish_sensor_data+0x398>)
 8046b46:	f7f9 fe81 	bl	804084c <__aeabi_ddiv>
 8046b4a:	4602      	mov	r2, r0
 8046b4c:	460b      	mov	r3, r1
 8046b4e:	4610      	mov	r0, r2
 8046b50:	4619      	mov	r1, r3
 8046b52:	a31f      	add	r3, pc, #124	; (adr r3, 8046bd0 <lsm6dso_publish_sensor_data+0x350>)
 8046b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8046b58:	f7f9 fd4e 	bl	80405f8 <__aeabi_dmul>
 8046b5c:	4602      	mov	r2, r0
 8046b5e:	460b      	mov	r3, r1
 8046b60:	4614      	mov	r4, r2
 8046b62:	461d      	mov	r5, r3
 8046b64:	4b2d      	ldr	r3, [pc, #180]	; (8046c1c <lsm6dso_publish_sensor_data+0x39c>)
 8046b66:	689b      	ldr	r3, [r3, #8]
 8046b68:	4618      	mov	r0, r3
 8046b6a:	f7f9 fced 	bl	8040548 <__aeabi_f2d>
 8046b6e:	4602      	mov	r2, r0
 8046b70:	460b      	mov	r3, r1
 8046b72:	4620      	mov	r0, r4
 8046b74:	4629      	mov	r1, r5
 8046b76:	f7f9 fb87 	bl	8040288 <__aeabi_dsub>
 8046b7a:	4602      	mov	r2, r0
 8046b7c:	460b      	mov	r3, r1
 8046b7e:	4610      	mov	r0, r2
 8046b80:	4619      	mov	r1, r3
 8046b82:	f7fa f831 	bl	8040be8 <__aeabi_d2f>
 8046b86:	4603      	mov	r3, r0
      sensor_data.sensor_data_t.vec.data[2] = angular_rate_mdps[2]
 8046b88:	653b      	str	r3, [r7, #80]	; 0x50
      sensor_data.sensor_data_t.vec.data[3] = temperature_degC;
 8046b8a:	4b1e      	ldr	r3, [pc, #120]	; (8046c04 <lsm6dso_publish_sensor_data+0x384>)
 8046b8c:	681b      	ldr	r3, [r3, #0]
 8046b8e:	657b      	str	r3, [r7, #84]	; 0x54
      osMessageQueuePut(acc_gyro_init_parms->SensorDataQHandle,
 8046b90:	4b14      	ldr	r3, [pc, #80]	; (8046be4 <lsm6dso_publish_sensor_data+0x364>)
 8046b92:	681b      	ldr	r3, [r3, #0]
 8046b94:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 8046b98:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8046b9c:	2300      	movs	r3, #0
 8046b9e:	2200      	movs	r2, #0
 8046ba0:	f00f fc30 	bl	8056404 <osMessageQueuePut>
                        &sensor_data, 0, 0);
    }
  }

  if (gyro_activated || acc_activated) {
 8046ba4:	4b1b      	ldr	r3, [pc, #108]	; (8046c14 <lsm6dso_publish_sensor_data+0x394>)
 8046ba6:	781b      	ldrb	r3, [r3, #0]
 8046ba8:	2b00      	cmp	r3, #0
 8046baa:	d103      	bne.n	8046bb4 <lsm6dso_publish_sensor_data+0x334>
 8046bac:	4b11      	ldr	r3, [pc, #68]	; (8046bf4 <lsm6dso_publish_sensor_data+0x374>)
 8046bae:	781b      	ldrb	r3, [r3, #0]
 8046bb0:	2b00      	cmp	r3, #0
 8046bb2:	d04d      	beq.n	8046c50 <lsm6dso_publish_sensor_data+0x3d0>
    //lsm6dso_temp_flag_data_ready_get(&dev_ctx, &reg);
    if (reg.tda) {
 8046bb4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8046bb8:	f003 0304 	and.w	r3, r3, #4
 8046bbc:	b2db      	uxtb	r3, r3
 8046bbe:	2b00      	cmp	r3, #0
 8046bc0:	d046      	beq.n	8046c50 <lsm6dso_publish_sensor_data+0x3d0>
      /* Read temperature data */
      memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8046bc2:	2202      	movs	r2, #2
 8046bc4:	2100      	movs	r1, #0
 8046bc6:	4816      	ldr	r0, [pc, #88]	; (8046c20 <lsm6dso_publish_sensor_data+0x3a0>)
 8046bc8:	f019 f9f8 	bl	805ffbc <memset>
      lsm6dso_temperature_raw_get(&dev_ctx, data_raw_temperature.u8bit);
 8046bcc:	4914      	ldr	r1, [pc, #80]	; (8046c20 <lsm6dso_publish_sensor_data+0x3a0>)
 8046bce:	e029      	b.n	8046c24 <lsm6dso_publish_sensor_data+0x3a4>
 8046bd0:	60000000 	.word	0x60000000
 8046bd4:	400921fb 	.word	0x400921fb
 8046bd8:	20008070 	.word	0x20008070
 8046bdc:	20007ff0 	.word	0x20007ff0
 8046be0:	20008004 	.word	0x20008004
 8046be4:	2000807c 	.word	0x2000807c
 8046be8:	20008084 	.word	0x20008084
 8046bec:	2001be00 	.word	0x2001be00
 8046bf0:	2001bdfc 	.word	0x2001bdfc
 8046bf4:	20008082 	.word	0x20008082
 8046bf8:	411ce80a 	.word	0x411ce80a
 8046bfc:	447a0000 	.word	0x447a0000
 8046c00:	20008024 	.word	0x20008024
 8046c04:	2000801c 	.word	0x2000801c
 8046c08:	20007ff8 	.word	0x20007ff8
 8046c0c:	20008010 	.word	0x20008010
 8046c10:	20008085 	.word	0x20008085
 8046c14:	20008083 	.word	0x20008083
 8046c18:	40668000 	.word	0x40668000
 8046c1c:	20008030 	.word	0x20008030
 8046c20:	20008000 	.word	0x20008000
 8046c24:	483a      	ldr	r0, [pc, #232]	; (8046d10 <lsm6dso_publish_sensor_data+0x490>)
 8046c26:	f000 ff95 	bl	8047b54 <lsm6dso_temperature_raw_get>
      temperature_degC =
          lsm6dso_from_lsb_to_celsius(data_raw_temperature.i16bit);
 8046c2a:	4b3a      	ldr	r3, [pc, #232]	; (8046d14 <lsm6dso_publish_sensor_data+0x494>)
 8046c2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8046c30:	4618      	mov	r0, r3
 8046c32:	f000 fcad 	bl	8047590 <lsm6dso_from_lsb_to_celsius>
 8046c36:	eef0 7a40 	vmov.f32	s15, s0
      temperature_degC =
 8046c3a:	4b37      	ldr	r3, [pc, #220]	; (8046d18 <lsm6dso_publish_sensor_data+0x498>)
 8046c3c:	edc3 7a00 	vstr	s15, [r3]
      pid_temp_control(&imu_pid_struct, temperature_degC);
 8046c40:	4b35      	ldr	r3, [pc, #212]	; (8046d18 <lsm6dso_publish_sensor_data+0x498>)
 8046c42:	edd3 7a00 	vldr	s15, [r3]
 8046c46:	eeb0 0a67 	vmov.f32	s0, s15
 8046c4a:	4834      	ldr	r0, [pc, #208]	; (8046d1c <lsm6dso_publish_sensor_data+0x49c>)
 8046c4c:	f7ff fcb2 	bl	80465b4 <pid_temp_control>
    }
  }

  if (gyro_data_report_in_uart_mode && acc_data_report_in_uart_mode) {
 8046c50:	4b33      	ldr	r3, [pc, #204]	; (8046d20 <lsm6dso_publish_sensor_data+0x4a0>)
 8046c52:	781b      	ldrb	r3, [r3, #0]
 8046c54:	2b00      	cmp	r3, #0
 8046c56:	d055      	beq.n	8046d04 <lsm6dso_publish_sensor_data+0x484>
 8046c58:	4b32      	ldr	r3, [pc, #200]	; (8046d24 <lsm6dso_publish_sensor_data+0x4a4>)
 8046c5a:	781b      	ldrb	r3, [r3, #0]
 8046c5c:	2b00      	cmp	r3, #0
 8046c5e:	d051      	beq.n	8046d04 <lsm6dso_publish_sensor_data+0x484>
    //notify uart2 receive task to report sensor raw
    uint8_t uart_sensor_data[UART_TX_CODE_LENGTH] = { 0 };
 8046c60:	2300      	movs	r3, #0
 8046c62:	617b      	str	r3, [r7, #20]
 8046c64:	f107 0318 	add.w	r3, r7, #24
 8046c68:	2200      	movs	r2, #0
 8046c6a:	601a      	str	r2, [r3, #0]
 8046c6c:	605a      	str	r2, [r3, #4]
 8046c6e:	609a      	str	r2, [r3, #8]
 8046c70:	60da      	str	r2, [r3, #12]
 8046c72:	611a      	str	r2, [r3, #16]
 8046c74:	615a      	str	r2, [r3, #20]
 8046c76:	761a      	strb	r2, [r3, #24]
    uint32_t currentu32timestamp = 0;
 8046c78:	2300      	movs	r3, #0
 8046c7a:	613b      	str	r3, [r7, #16]
    currentu32timestamp = osKernelGetTickCount();
 8046c7c:	f00f f96c 	bl	8055f58 <osKernelGetTickCount>
 8046c80:	4603      	mov	r3, r0
 8046c82:	613b      	str	r3, [r7, #16]

    uint16_t range_acc = 8000;
 8046c84:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8046c88:	81fb      	strh	r3, [r7, #14]
    uint16_t range_gyro = 1000;
 8046c8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8046c8e:	81bb      	strh	r3, [r7, #12]
    uart_sensor_data[0] = 0x5A;
 8046c90:	235a      	movs	r3, #90	; 0x5a
 8046c92:	753b      	strb	r3, [r7, #20]
    uart_sensor_data[1] = 0xA5;
 8046c94:	23a5      	movs	r3, #165	; 0xa5
 8046c96:	757b      	strb	r3, [r7, #21]
    uart_sensor_data[2] = 0x18;
 8046c98:	2318      	movs	r3, #24
 8046c9a:	75bb      	strb	r3, [r7, #22]
    uart_sensor_data[3] = 0x1;
 8046c9c:	2301      	movs	r3, #1
 8046c9e:	75fb      	strb	r3, [r7, #23]
    uart_sensor_data[4] = 0;
 8046ca0:	2300      	movs	r3, #0
 8046ca2:	763b      	strb	r3, [r7, #24]
 8046ca4:	693b      	ldr	r3, [r7, #16]
    memcpy(&uart_sensor_data[5], &currentu32timestamp, sizeof(uint32_t));
 8046ca6:	f8c7 3019 	str.w	r3, [r7, #25]
 8046caa:	89fb      	ldrh	r3, [r7, #14]
    memcpy(&uart_sensor_data[9], &range_acc, sizeof(uint16_t));
 8046cac:	f8a7 301d 	strh.w	r3, [r7, #29]
    memcpy(&uart_sensor_data[11], data_raw_acceleration.i16bit,
 8046cb0:	f107 0314 	add.w	r3, r7, #20
 8046cb4:	330b      	adds	r3, #11
 8046cb6:	2206      	movs	r2, #6
 8046cb8:	491b      	ldr	r1, [pc, #108]	; (8046d28 <lsm6dso_publish_sensor_data+0x4a8>)
 8046cba:	4618      	mov	r0, r3
 8046cbc:	f019 f970 	bl	805ffa0 <memcpy>
 8046cc0:	89bb      	ldrh	r3, [r7, #12]
           sizeof(uint16_t) * 3);
    memcpy(&uart_sensor_data[17], &range_gyro, sizeof(uint16_t));
 8046cc2:	f8a7 3025 	strh.w	r3, [r7, #37]	; 0x25
    memcpy(&uart_sensor_data[19], data_raw_angular_rate.i16bit,
 8046cc6:	f107 0314 	add.w	r3, r7, #20
 8046cca:	3313      	adds	r3, #19
 8046ccc:	2206      	movs	r2, #6
 8046cce:	4917      	ldr	r1, [pc, #92]	; (8046d2c <lsm6dso_publish_sensor_data+0x4ac>)
 8046cd0:	4618      	mov	r0, r3
 8046cd2:	f019 f965 	bl	805ffa0 <memcpy>
           sizeof(uint16_t) * 3);
    memcpy(&uart_sensor_data[25], data_raw_temperature.i16bit,
 8046cd6:	4b0f      	ldr	r3, [pc, #60]	; (8046d14 <lsm6dso_publish_sensor_data+0x494>)
 8046cd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8046cdc:	881b      	ldrh	r3, [r3, #0]
 8046cde:	b29b      	uxth	r3, r3
 8046ce0:	f8a7 302d 	strh.w	r3, [r7, #45]	; 0x2d
           sizeof(uint16_t));

    osMessageQueuePut(acc_gyro_init_parms->UartReportQHandle,
 8046ce4:	4b12      	ldr	r3, [pc, #72]	; (8046d30 <lsm6dso_publish_sensor_data+0x4b0>)
 8046ce6:	681b      	ldr	r3, [r3, #0]
 8046ce8:	f8d3 00fc 	ldr.w	r0, [r3, #252]	; 0xfc
 8046cec:	f107 0114 	add.w	r1, r7, #20
 8046cf0:	2300      	movs	r3, #0
 8046cf2:	2200      	movs	r2, #0
 8046cf4:	f00f fb86 	bl	8056404 <osMessageQueuePut>
                      uart_sensor_data, 0, 0);

    gyro_data_report_in_uart_mode = false;
 8046cf8:	4b09      	ldr	r3, [pc, #36]	; (8046d20 <lsm6dso_publish_sensor_data+0x4a0>)
 8046cfa:	2200      	movs	r2, #0
 8046cfc:	701a      	strb	r2, [r3, #0]
    acc_data_report_in_uart_mode = false;
 8046cfe:	4b09      	ldr	r3, [pc, #36]	; (8046d24 <lsm6dso_publish_sensor_data+0x4a4>)
 8046d00:	2200      	movs	r2, #0
 8046d02:	701a      	strb	r2, [r3, #0]
  }
}
 8046d04:	bf00      	nop
 8046d06:	4618      	mov	r0, r3
 8046d08:	3788      	adds	r7, #136	; 0x88
 8046d0a:	46bd      	mov	sp, r7
 8046d0c:	bdb0      	pop	{r4, r5, r7, pc}
 8046d0e:	bf00      	nop
 8046d10:	20008070 	.word	0x20008070
 8046d14:	20008000 	.word	0x20008000
 8046d18:	2000801c 	.word	0x2000801c
 8046d1c:	2000803c 	.word	0x2000803c
 8046d20:	20008085 	.word	0x20008085
 8046d24:	20008084 	.word	0x20008084
 8046d28:	20007ff0 	.word	0x20007ff0
 8046d2c:	20007ff8 	.word	0x20007ff8
 8046d30:	2000807c 	.word	0x2000807c

08046d34 <platform_write>:
 * @param  len       number of consecutive register to write
 *
 */
static int32_t platform_write(void *handle, uint8_t reg, uint8_t * bufp,
                              uint16_t len)
{
 8046d34:	b580      	push	{r7, lr}
 8046d36:	b088      	sub	sp, #32
 8046d38:	af04      	add	r7, sp, #16
 8046d3a:	60f8      	str	r0, [r7, #12]
 8046d3c:	607a      	str	r2, [r7, #4]
 8046d3e:	461a      	mov	r2, r3
 8046d40:	460b      	mov	r3, r1
 8046d42:	72fb      	strb	r3, [r7, #11]
 8046d44:	4613      	mov	r3, r2
 8046d46:	813b      	strh	r3, [r7, #8]
  if (handle == &acc_gyro_init_parms->i2c_handle) {
 8046d48:	4b0c      	ldr	r3, [pc, #48]	; (8046d7c <platform_write+0x48>)
 8046d4a:	681b      	ldr	r3, [r3, #0]
 8046d4c:	3304      	adds	r3, #4
 8046d4e:	68fa      	ldr	r2, [r7, #12]
 8046d50:	429a      	cmp	r2, r3
 8046d52:	d10d      	bne.n	8046d70 <platform_write+0x3c>
    //printf("start i2c write, \r\n");
    HAL_I2C_Mem_Write(handle, LSM6DSO_I2C_ADD_L, reg,
 8046d54:	7afb      	ldrb	r3, [r7, #11]
 8046d56:	b29a      	uxth	r2, r3
 8046d58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8046d5c:	9302      	str	r3, [sp, #8]
 8046d5e:	893b      	ldrh	r3, [r7, #8]
 8046d60:	9301      	str	r3, [sp, #4]
 8046d62:	687b      	ldr	r3, [r7, #4]
 8046d64:	9300      	str	r3, [sp, #0]
 8046d66:	2301      	movs	r3, #1
 8046d68:	21d5      	movs	r1, #213	; 0xd5
 8046d6a:	68f8      	ldr	r0, [r7, #12]
 8046d6c:	f00b f926 	bl	8051fbc <HAL_I2C_Mem_Write>
                      I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  }

  return 0;
 8046d70:	2300      	movs	r3, #0
}
 8046d72:	4618      	mov	r0, r3
 8046d74:	3710      	adds	r7, #16
 8046d76:	46bd      	mov	sp, r7
 8046d78:	bd80      	pop	{r7, pc}
 8046d7a:	bf00      	nop
 8046d7c:	2000807c 	.word	0x2000807c

08046d80 <platform_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t * bufp,
                             uint16_t len)
{
 8046d80:	b580      	push	{r7, lr}
 8046d82:	b0a0      	sub	sp, #128	; 0x80
 8046d84:	af04      	add	r7, sp, #16
 8046d86:	60f8      	str	r0, [r7, #12]
 8046d88:	607a      	str	r2, [r7, #4]
 8046d8a:	461a      	mov	r2, r3
 8046d8c:	460b      	mov	r3, r1
 8046d8e:	72fb      	strb	r3, [r7, #11]
 8046d90:	4613      	mov	r3, r2
 8046d92:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef ret = HAL_OK;
 8046d94:	2300      	movs	r3, #0
 8046d96:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  if (handle == &acc_gyro_init_parms->i2c_handle) {
 8046d9a:	4b1b      	ldr	r3, [pc, #108]	; (8046e08 <platform_read+0x88>)
 8046d9c:	681b      	ldr	r3, [r3, #0]
 8046d9e:	3304      	adds	r3, #4
 8046da0:	68fa      	ldr	r2, [r7, #12]
 8046da2:	429a      	cmp	r2, r3
 8046da4:	d12a      	bne.n	8046dfc <platform_read+0x7c>
    //printf("start i2c read, \r\n");
    ret = HAL_I2C_Mem_Read(handle, LSM6DSO_I2C_ADD_L, reg,
 8046da6:	7afb      	ldrb	r3, [r7, #11]
 8046da8:	b29a      	uxth	r2, r3
 8046daa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8046dae:	9302      	str	r3, [sp, #8]
 8046db0:	893b      	ldrh	r3, [r7, #8]
 8046db2:	9301      	str	r3, [sp, #4]
 8046db4:	687b      	ldr	r3, [r7, #4]
 8046db6:	9300      	str	r3, [sp, #0]
 8046db8:	2301      	movs	r3, #1
 8046dba:	21d5      	movs	r1, #213	; 0xd5
 8046dbc:	68f8      	ldr	r0, [r7, #12]
 8046dbe:	f00b f9f7 	bl	80521b0 <HAL_I2C_Mem_Read>
 8046dc2:	4603      	mov	r3, r0
 8046dc4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                     I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
    lsm6dso_delay_us(2);
 8046dc8:	2002      	movs	r0, #2
 8046dca:	f7ff fce7 	bl	804679c <lsm6dso_delay_us>
    if(ret != HAL_OK) {
 8046dce:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8046dd2:	2b00      	cmp	r3, #0
 8046dd4:	d012      	beq.n	8046dfc <platform_read+0x7c>
      //notify host to do reset!
      sensor_message_event_t sensor_msg_event;
      sensor_msg_event.message_event_type = SENSOR_BUS_ERROR_EVENT;
 8046dd6:	230d      	movs	r3, #13
 8046dd8:	743b      	strb	r3, [r7, #16]
      sensor_msg_event.message_event_t.resp_event.sensor_type = SENSOR_TYPE_ACCELEROMETER;
 8046dda:	2300      	movs	r3, #0
 8046ddc:	763b      	strb	r3, [r7, #24]
      sensor_msg_event.message_event_t.resp_event.config_type = SENSOR_BUS_ERROR_CONFIG;
 8046dde:	230a      	movs	r3, #10
 8046de0:	767b      	strb	r3, [r7, #25]
      //notifiy smgr that bus is abnormal
      osMessageQueuePut(acc_gyro_init_parms->SensorMessageQHandle,
 8046de2:	4b09      	ldr	r3, [pc, #36]	; (8046e08 <platform_read+0x88>)
 8046de4:	681b      	ldr	r3, [r3, #0]
 8046de6:	f8d3 00f4 	ldr.w	r0, [r3, #244]	; 0xf4
 8046dea:	f107 0110 	add.w	r1, r7, #16
 8046dee:	2300      	movs	r3, #0
 8046df0:	2200      	movs	r2, #0
 8046df2:	f00f fb07 	bl	8056404 <osMessageQueuePut>
                          &sensor_msg_event, 0, 0);
      osDelay(1);
 8046df6:	2001      	movs	r0, #1
 8046df8:	f00f f97f 	bl	80560fa <osDelay>
    }
  }

  return 0;
 8046dfc:	2300      	movs	r3, #0
}
 8046dfe:	4618      	mov	r0, r3
 8046e00:	3770      	adds	r7, #112	; 0x70
 8046e02:	46bd      	mov	sp, r7
 8046e04:	bd80      	pop	{r7, pc}
 8046e06:	bf00      	nop
 8046e08:	2000807c 	.word	0x2000807c

08046e0c <lsm6dso_acc_init>:

/*
 * @brief  platform specific initialization (platform dependent)
 */
int lsm6dso_acc_init(void *para1, void *para2)
{
 8046e0c:	b580      	push	{r7, lr}
 8046e0e:	b082      	sub	sp, #8
 8046e10:	af00      	add	r7, sp, #0
 8046e12:	6078      	str	r0, [r7, #4]
 8046e14:	6039      	str	r1, [r7, #0]
  acc_gyro_init_parms = (platform_prams *) para1;
 8046e16:	4a39      	ldr	r2, [pc, #228]	; (8046efc <lsm6dso_acc_init+0xf0>)
 8046e18:	687b      	ldr	r3, [r7, #4]
 8046e1a:	6013      	str	r3, [r2, #0]
  /* Initialize mems driver interface */

  if (acc_gyro_init_parms != NULL) {
 8046e1c:	4b37      	ldr	r3, [pc, #220]	; (8046efc <lsm6dso_acc_init+0xf0>)
 8046e1e:	681b      	ldr	r3, [r3, #0]
 8046e20:	2b00      	cmp	r3, #0
 8046e22:	d006      	beq.n	8046e32 <lsm6dso_acc_init+0x26>
    tim1 = &acc_gyro_init_parms->PWMTimerHandle;
 8046e24:	4b35      	ldr	r3, [pc, #212]	; (8046efc <lsm6dso_acc_init+0xf0>)
 8046e26:	681b      	ldr	r3, [r3, #0]
 8046e28:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8046e2c:	4a34      	ldr	r2, [pc, #208]	; (8046f00 <lsm6dso_acc_init+0xf4>)
 8046e2e:	6013      	str	r3, [r2, #0]
 8046e30:	e001      	b.n	8046e36 <lsm6dso_acc_init+0x2a>
  } else {
    Error_Handler();
 8046e32:	f002 fe71 	bl	8049b18 <Error_Handler>
  }

  dev_ctx.write_reg = platform_write;
 8046e36:	4b33      	ldr	r3, [pc, #204]	; (8046f04 <lsm6dso_acc_init+0xf8>)
 8046e38:	4a33      	ldr	r2, [pc, #204]	; (8046f08 <lsm6dso_acc_init+0xfc>)
 8046e3a:	601a      	str	r2, [r3, #0]
  dev_ctx.read_reg = platform_read;
 8046e3c:	4b31      	ldr	r3, [pc, #196]	; (8046f04 <lsm6dso_acc_init+0xf8>)
 8046e3e:	4a33      	ldr	r2, [pc, #204]	; (8046f0c <lsm6dso_acc_init+0x100>)
 8046e40:	605a      	str	r2, [r3, #4]
  dev_ctx.handle = &acc_gyro_init_parms->i2c_handle;
 8046e42:	4b2e      	ldr	r3, [pc, #184]	; (8046efc <lsm6dso_acc_init+0xf0>)
 8046e44:	681b      	ldr	r3, [r3, #0]
 8046e46:	3304      	adds	r3, #4
 8046e48:	4a2e      	ldr	r2, [pc, #184]	; (8046f04 <lsm6dso_acc_init+0xf8>)
 8046e4a:	6093      	str	r3, [r2, #8]

  /* Check device ID */
  lsm6dso_device_id_get(&dev_ctx, &whoamI);
 8046e4c:	4930      	ldr	r1, [pc, #192]	; (8046f10 <lsm6dso_acc_init+0x104>)
 8046e4e:	482d      	ldr	r0, [pc, #180]	; (8046f04 <lsm6dso_acc_init+0xf8>)
 8046e50:	f000 fed9 	bl	8047c06 <lsm6dso_device_id_get>
  printf("lsm6dso whoamI: 0x%x \r\n", whoamI);
 8046e54:	4b2e      	ldr	r3, [pc, #184]	; (8046f10 <lsm6dso_acc_init+0x104>)
 8046e56:	781b      	ldrb	r3, [r3, #0]
 8046e58:	4619      	mov	r1, r3
 8046e5a:	482e      	ldr	r0, [pc, #184]	; (8046f14 <lsm6dso_acc_init+0x108>)
 8046e5c:	f019 fd8a 	bl	8060974 <iprintf>

  if (whoamI != LSM6DSO_ID) {
 8046e60:	4b2b      	ldr	r3, [pc, #172]	; (8046f10 <lsm6dso_acc_init+0x104>)
 8046e62:	781b      	ldrb	r3, [r3, #0]
 8046e64:	2b6c      	cmp	r3, #108	; 0x6c
 8046e66:	d005      	beq.n	8046e74 <lsm6dso_acc_init+0x68>
    printf("lsm6dso acc init failed!\r\n");
 8046e68:	482b      	ldr	r0, [pc, #172]	; (8046f18 <lsm6dso_acc_init+0x10c>)
 8046e6a:	f019 fe1f 	bl	8060aac <puts>
    return SENSOR_FAILED;
 8046e6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8046e72:	e03e      	b.n	8046ef2 <lsm6dso_acc_init+0xe6>
  }

  /* Restore default configuration */
  lsm6dso_reset_set(&dev_ctx, PROPERTY_ENABLE);
 8046e74:	2101      	movs	r1, #1
 8046e76:	4823      	ldr	r0, [pc, #140]	; (8046f04 <lsm6dso_acc_init+0xf8>)
 8046e78:	f000 fed6 	bl	8047c28 <lsm6dso_reset_set>

  do {
    lsm6dso_reset_get(&dev_ctx, &rst);
 8046e7c:	4927      	ldr	r1, [pc, #156]	; (8046f1c <lsm6dso_acc_init+0x110>)
 8046e7e:	4821      	ldr	r0, [pc, #132]	; (8046f04 <lsm6dso_acc_init+0xf8>)
 8046e80:	f000 fef8 	bl	8047c74 <lsm6dso_reset_get>
  } while (rst);
 8046e84:	4b25      	ldr	r3, [pc, #148]	; (8046f1c <lsm6dso_acc_init+0x110>)
 8046e86:	781b      	ldrb	r3, [r3, #0]
 8046e88:	2b00      	cmp	r3, #0
 8046e8a:	d1f7      	bne.n	8046e7c <lsm6dso_acc_init+0x70>

  lsm6dso_block_data_update_set(&dev_ctx, PROPERTY_DISABLE);
 8046e8c:	2100      	movs	r1, #0
 8046e8e:	481d      	ldr	r0, [pc, #116]	; (8046f04 <lsm6dso_acc_init+0xf8>)
 8046e90:	f000 fdde 	bl	8047a50 <lsm6dso_block_data_update_set>
  /* Disable I3C interface */
  lsm6dso_i3c_disable_set(&dev_ctx, LSM6DSO_I3C_DISABLE);
 8046e94:	2180      	movs	r1, #128	; 0x80
 8046e96:	481b      	ldr	r0, [pc, #108]	; (8046f04 <lsm6dso_acc_init+0xf8>)
 8046e98:	f000 ffaf 	bl	8047dfa <lsm6dso_i3c_disable_set>
  /* Set Output Data Rate */
  lsm6dso_xl_data_rate_set(&dev_ctx, LSM6DSO_XL_ODR_104Hz);
 8046e9c:	2104      	movs	r1, #4
 8046e9e:	4819      	ldr	r0, [pc, #100]	; (8046f04 <lsm6dso_acc_init+0xf8>)
 8046ea0:	f000 fbb8 	bl	8047614 <lsm6dso_xl_data_rate_set>
  lsm6dso_gy_data_rate_set(&dev_ctx, LSM6DSO_GY_ODR_104Hz);
 8046ea4:	2104      	movs	r1, #4
 8046ea6:	4817      	ldr	r0, [pc, #92]	; (8046f04 <lsm6dso_acc_init+0xf8>)
 8046ea8:	f000 fcd6 	bl	8047858 <lsm6dso_gy_data_rate_set>
  /* Set full scale */
  lsm6dso_xl_full_scale_set(&dev_ctx, LSM6DSO_8g);
 8046eac:	2103      	movs	r1, #3
 8046eae:	4815      	ldr	r0, [pc, #84]	; (8046f04 <lsm6dso_acc_init+0xf8>)
 8046eb0:	f000 fb8a 	bl	80475c8 <lsm6dso_xl_full_scale_set>
  lsm6dso_gy_full_scale_set(&dev_ctx, LSM6DSO_1000dps);
 8046eb4:	2104      	movs	r1, #4
 8046eb6:	4813      	ldr	r0, [pc, #76]	; (8046f04 <lsm6dso_acc_init+0xf8>)
 8046eb8:	f000 fca8 	bl	804780c <lsm6dso_gy_full_scale_set>
  /* Configure filtering chain(No aux interface)
   * Accelerometer - LPF1 + LPF2 path
   */
  lsm6dso_xl_hp_path_on_out_set(&dev_ctx, LSM6DSO_LP_ODR_DIV_100);
 8046ebc:	2104      	movs	r1, #4
 8046ebe:	4811      	ldr	r0, [pc, #68]	; (8046f04 <lsm6dso_acc_init+0xf8>)
 8046ec0:	f000 ff63 	bl	8047d8a <lsm6dso_xl_hp_path_on_out_set>
  lsm6dso_xl_filter_lp2_set(&dev_ctx, PROPERTY_ENABLE);
 8046ec4:	2101      	movs	r1, #1
 8046ec6:	480f      	ldr	r0, [pc, #60]	; (8046f04 <lsm6dso_acc_init+0xf8>)
 8046ec8:	f000 ff39 	bl	8047d3e <lsm6dso_xl_filter_lp2_set>

  /* axis conversion parameter */
  g_imu_axis_order[0] = ST_CUSTOM_IMU_AXIS_ORDER_X;
 8046ecc:	4b14      	ldr	r3, [pc, #80]	; (8046f20 <lsm6dso_acc_init+0x114>)
 8046ece:	2201      	movs	r2, #1
 8046ed0:	701a      	strb	r2, [r3, #0]
  g_imu_axis_order[1] = ST_CUSTOM_IMU_AXIS_ORDER_Y;
 8046ed2:	4b13      	ldr	r3, [pc, #76]	; (8046f20 <lsm6dso_acc_init+0x114>)
 8046ed4:	2202      	movs	r2, #2
 8046ed6:	705a      	strb	r2, [r3, #1]
  g_imu_axis_order[2] = ST_CUSTOM_IMU_AXIS_ORDER_Z;
 8046ed8:	4b11      	ldr	r3, [pc, #68]	; (8046f20 <lsm6dso_acc_init+0x114>)
 8046eda:	2200      	movs	r2, #0
 8046edc:	709a      	strb	r2, [r3, #2]
  g_imu_axis_sign[0] = ST_CUSTOM_IMU_AXIS_SIGN_X;
 8046ede:	4b11      	ldr	r3, [pc, #68]	; (8046f24 <lsm6dso_acc_init+0x118>)
 8046ee0:	2200      	movs	r2, #0
 8046ee2:	701a      	strb	r2, [r3, #0]
  g_imu_axis_sign[1] = ST_CUSTOM_IMU_AXIS_SIGN_Y;
 8046ee4:	4b0f      	ldr	r3, [pc, #60]	; (8046f24 <lsm6dso_acc_init+0x118>)
 8046ee6:	2200      	movs	r2, #0
 8046ee8:	705a      	strb	r2, [r3, #1]
  g_imu_axis_sign[2] = ST_CUSTOM_IMU_AXIS_SIGN_Z;
 8046eea:	4b0e      	ldr	r3, [pc, #56]	; (8046f24 <lsm6dso_acc_init+0x118>)
 8046eec:	2200      	movs	r2, #0
 8046eee:	709a      	strb	r2, [r3, #2]

  return SENSOR_SUCCESS;
 8046ef0:	2300      	movs	r3, #0
}
 8046ef2:	4618      	mov	r0, r3
 8046ef4:	3708      	adds	r7, #8
 8046ef6:	46bd      	mov	sp, r7
 8046ef8:	bd80      	pop	{r7, pc}
 8046efa:	bf00      	nop
 8046efc:	2000807c 	.word	0x2000807c
 8046f00:	2001be04 	.word	0x2001be04
 8046f04:	20008070 	.word	0x20008070
 8046f08:	08046d35 	.word	0x08046d35
 8046f0c:	08046d81 	.word	0x08046d81
 8046f10:	20008020 	.word	0x20008020
 8046f14:	080658b4 	.word	0x080658b4
 8046f18:	080658cc 	.word	0x080658cc
 8046f1c:	20008021 	.word	0x20008021
 8046f20:	2001bdfc 	.word	0x2001bdfc
 8046f24:	2001be00 	.word	0x2001be00

08046f28 <lsm6dso_gyro_init>:

int lsm6dso_gyro_init(void *para1, void *para2)
{
 8046f28:	b580      	push	{r7, lr}
 8046f2a:	b082      	sub	sp, #8
 8046f2c:	af00      	add	r7, sp, #0
 8046f2e:	6078      	str	r0, [r7, #4]
 8046f30:	6039      	str	r1, [r7, #0]
  if (whoamI != LSM6DSO_ID) {
 8046f32:	4b07      	ldr	r3, [pc, #28]	; (8046f50 <lsm6dso_gyro_init+0x28>)
 8046f34:	781b      	ldrb	r3, [r3, #0]
 8046f36:	2b6c      	cmp	r3, #108	; 0x6c
 8046f38:	d005      	beq.n	8046f46 <lsm6dso_gyro_init+0x1e>
    printf("lsm6dso gyro init failed!\r\n");
 8046f3a:	4806      	ldr	r0, [pc, #24]	; (8046f54 <lsm6dso_gyro_init+0x2c>)
 8046f3c:	f019 fdb6 	bl	8060aac <puts>
    return SENSOR_FAILED;
 8046f40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8046f44:	e000      	b.n	8046f48 <lsm6dso_gyro_init+0x20>
  }

  return SENSOR_SUCCESS;
 8046f46:	2300      	movs	r3, #0
}
 8046f48:	4618      	mov	r0, r3
 8046f4a:	3708      	adds	r7, #8
 8046f4c:	46bd      	mov	sp, r7
 8046f4e:	bd80      	pop	{r7, pc}
 8046f50:	20008020 	.word	0x20008020
 8046f54:	080658e8 	.word	0x080658e8

08046f58 <lsm6dso_enable>:

static int32_t lsm6dso_enable(uint8_t SENSOR_TYPE)
{
 8046f58:	b580      	push	{r7, lr}
 8046f5a:	b084      	sub	sp, #16
 8046f5c:	af00      	add	r7, sp, #0
 8046f5e:	4603      	mov	r3, r0
 8046f60:	71fb      	strb	r3, [r7, #7]
  int32_t ret = 0;
 8046f62:	2300      	movs	r3, #0
 8046f64:	60fb      	str	r3, [r7, #12]

  if (SENSOR_TYPE == SENSOR_TYPE_ACCELEROMETER && acc_activate_count == 0) {
 8046f66:	79fb      	ldrb	r3, [r7, #7]
 8046f68:	2b00      	cmp	r3, #0
 8046f6a:	d10d      	bne.n	8046f88 <lsm6dso_enable+0x30>
 8046f6c:	4b29      	ldr	r3, [pc, #164]	; (8047014 <lsm6dso_enable+0xbc>)
 8046f6e:	781b      	ldrb	r3, [r3, #0]
 8046f70:	2b00      	cmp	r3, #0
 8046f72:	d109      	bne.n	8046f88 <lsm6dso_enable+0x30>
    acc_activate_count++;
 8046f74:	4b27      	ldr	r3, [pc, #156]	; (8047014 <lsm6dso_enable+0xbc>)
 8046f76:	781b      	ldrb	r3, [r3, #0]
 8046f78:	3301      	adds	r3, #1
 8046f7a:	b2da      	uxtb	r2, r3
 8046f7c:	4b25      	ldr	r3, [pc, #148]	; (8047014 <lsm6dso_enable+0xbc>)
 8046f7e:	701a      	strb	r2, [r3, #0]
    acc_activated = true;
 8046f80:	4b25      	ldr	r3, [pc, #148]	; (8047018 <lsm6dso_enable+0xc0>)
 8046f82:	2201      	movs	r2, #1
 8046f84:	701a      	strb	r2, [r3, #0]
 8046f86:	e008      	b.n	8046f9a <lsm6dso_enable+0x42>
  } else if (SENSOR_TYPE == SENSOR_TYPE_ACCELEROMETER)
 8046f88:	79fb      	ldrb	r3, [r7, #7]
 8046f8a:	2b00      	cmp	r3, #0
 8046f8c:	d105      	bne.n	8046f9a <lsm6dso_enable+0x42>
    acc_activate_count++;
 8046f8e:	4b21      	ldr	r3, [pc, #132]	; (8047014 <lsm6dso_enable+0xbc>)
 8046f90:	781b      	ldrb	r3, [r3, #0]
 8046f92:	3301      	adds	r3, #1
 8046f94:	b2da      	uxtb	r2, r3
 8046f96:	4b1f      	ldr	r3, [pc, #124]	; (8047014 <lsm6dso_enable+0xbc>)
 8046f98:	701a      	strb	r2, [r3, #0]

  if (SENSOR_TYPE == SENSOR_TYPE_GYROSCOPE && gyro_activate_count == 0) {
 8046f9a:	79fb      	ldrb	r3, [r7, #7]
 8046f9c:	2b02      	cmp	r3, #2
 8046f9e:	d10d      	bne.n	8046fbc <lsm6dso_enable+0x64>
 8046fa0:	4b1e      	ldr	r3, [pc, #120]	; (804701c <lsm6dso_enable+0xc4>)
 8046fa2:	781b      	ldrb	r3, [r3, #0]
 8046fa4:	2b00      	cmp	r3, #0
 8046fa6:	d109      	bne.n	8046fbc <lsm6dso_enable+0x64>
    gyro_activate_count++;
 8046fa8:	4b1c      	ldr	r3, [pc, #112]	; (804701c <lsm6dso_enable+0xc4>)
 8046faa:	781b      	ldrb	r3, [r3, #0]
 8046fac:	3301      	adds	r3, #1
 8046fae:	b2da      	uxtb	r2, r3
 8046fb0:	4b1a      	ldr	r3, [pc, #104]	; (804701c <lsm6dso_enable+0xc4>)
 8046fb2:	701a      	strb	r2, [r3, #0]
    gyro_activated = true;
 8046fb4:	4b1a      	ldr	r3, [pc, #104]	; (8047020 <lsm6dso_enable+0xc8>)
 8046fb6:	2201      	movs	r2, #1
 8046fb8:	701a      	strb	r2, [r3, #0]
 8046fba:	e008      	b.n	8046fce <lsm6dso_enable+0x76>
  } else if (SENSOR_TYPE == SENSOR_TYPE_GYROSCOPE)
 8046fbc:	79fb      	ldrb	r3, [r7, #7]
 8046fbe:	2b02      	cmp	r3, #2
 8046fc0:	d105      	bne.n	8046fce <lsm6dso_enable+0x76>
    gyro_activate_count++;
 8046fc2:	4b16      	ldr	r3, [pc, #88]	; (804701c <lsm6dso_enable+0xc4>)
 8046fc4:	781b      	ldrb	r3, [r3, #0]
 8046fc6:	3301      	adds	r3, #1
 8046fc8:	b2da      	uxtb	r2, r3
 8046fca:	4b14      	ldr	r3, [pc, #80]	; (804701c <lsm6dso_enable+0xc4>)
 8046fcc:	701a      	strb	r2, [r3, #0]

  if ((acc_activate_count == 1 && gyro_activate_count == 0)
 8046fce:	4b11      	ldr	r3, [pc, #68]	; (8047014 <lsm6dso_enable+0xbc>)
 8046fd0:	781b      	ldrb	r3, [r3, #0]
 8046fd2:	2b01      	cmp	r3, #1
 8046fd4:	d103      	bne.n	8046fde <lsm6dso_enable+0x86>
 8046fd6:	4b11      	ldr	r3, [pc, #68]	; (804701c <lsm6dso_enable+0xc4>)
 8046fd8:	781b      	ldrb	r3, [r3, #0]
 8046fda:	2b00      	cmp	r3, #0
 8046fdc:	d007      	beq.n	8046fee <lsm6dso_enable+0x96>
      || (gyro_activate_count == 1 && acc_activate_count == 0)) {
 8046fde:	4b0f      	ldr	r3, [pc, #60]	; (804701c <lsm6dso_enable+0xc4>)
 8046fe0:	781b      	ldrb	r3, [r3, #0]
 8046fe2:	2b01      	cmp	r3, #1
 8046fe4:	d111      	bne.n	804700a <lsm6dso_enable+0xb2>
 8046fe6:	4b0b      	ldr	r3, [pc, #44]	; (8047014 <lsm6dso_enable+0xbc>)
 8046fe8:	781b      	ldrb	r3, [r3, #0]
 8046fea:	2b00      	cmp	r3, #0
 8046fec:	d10d      	bne.n	804700a <lsm6dso_enable+0xb2>
    ret = lsm6dso_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 8046fee:	2101      	movs	r1, #1
 8046ff0:	480c      	ldr	r0, [pc, #48]	; (8047024 <lsm6dso_enable+0xcc>)
 8046ff2:	f000 fd2d 	bl	8047a50 <lsm6dso_block_data_update_set>
 8046ff6:	60f8      	str	r0, [r7, #12]
    PID_Init(&imu_pid_struct, PID_TARGET_TEMP);
 8046ff8:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8047028 <lsm6dso_enable+0xd0>
 8046ffc:	480b      	ldr	r0, [pc, #44]	; (804702c <lsm6dso_enable+0xd4>)
 8046ffe:	f7ff fa9e 	bl	804653e <PID_Init>
    pid_pwm_control(PWM_ACTIVATE, 0);
 8047002:	2100      	movs	r1, #0
 8047004:	2000      	movs	r0, #0
 8047006:	f7ff fa8c 	bl	8046522 <pid_pwm_control>
  }

  return ret;
 804700a:	68fb      	ldr	r3, [r7, #12]
}
 804700c:	4618      	mov	r0, r3
 804700e:	3710      	adds	r7, #16
 8047010:	46bd      	mov	sp, r7
 8047012:	bd80      	pop	{r7, pc}
 8047014:	20008080 	.word	0x20008080
 8047018:	20008082 	.word	0x20008082
 804701c:	20008081 	.word	0x20008081
 8047020:	20008083 	.word	0x20008083
 8047024:	20008070 	.word	0x20008070
 8047028:	42300000 	.word	0x42300000
 804702c:	2000803c 	.word	0x2000803c

08047030 <lsm6dso_disable>:

static int32_t lsm6dso_disable(uint8_t SENSOR_TYPE)
{
 8047030:	b580      	push	{r7, lr}
 8047032:	b084      	sub	sp, #16
 8047034:	af00      	add	r7, sp, #0
 8047036:	4603      	mov	r3, r0
 8047038:	71fb      	strb	r3, [r7, #7]
  int32_t ret = 0;
 804703a:	2300      	movs	r3, #0
 804703c:	60fb      	str	r3, [r7, #12]
  if (SENSOR_TYPE == SENSOR_TYPE_ACCELEROMETER && acc_activate_count > 0) {
 804703e:	79fb      	ldrb	r3, [r7, #7]
 8047040:	2b00      	cmp	r3, #0
 8047042:	d109      	bne.n	8047058 <lsm6dso_disable+0x28>
 8047044:	4b1d      	ldr	r3, [pc, #116]	; (80470bc <lsm6dso_disable+0x8c>)
 8047046:	781b      	ldrb	r3, [r3, #0]
 8047048:	2b00      	cmp	r3, #0
 804704a:	d005      	beq.n	8047058 <lsm6dso_disable+0x28>
    acc_activate_count--;
 804704c:	4b1b      	ldr	r3, [pc, #108]	; (80470bc <lsm6dso_disable+0x8c>)
 804704e:	781b      	ldrb	r3, [r3, #0]
 8047050:	3b01      	subs	r3, #1
 8047052:	b2da      	uxtb	r2, r3
 8047054:	4b19      	ldr	r3, [pc, #100]	; (80470bc <lsm6dso_disable+0x8c>)
 8047056:	701a      	strb	r2, [r3, #0]
  }

  if (SENSOR_TYPE == SENSOR_TYPE_GYROSCOPE && gyro_activate_count > 0) {
 8047058:	79fb      	ldrb	r3, [r7, #7]
 804705a:	2b02      	cmp	r3, #2
 804705c:	d109      	bne.n	8047072 <lsm6dso_disable+0x42>
 804705e:	4b18      	ldr	r3, [pc, #96]	; (80470c0 <lsm6dso_disable+0x90>)
 8047060:	781b      	ldrb	r3, [r3, #0]
 8047062:	2b00      	cmp	r3, #0
 8047064:	d005      	beq.n	8047072 <lsm6dso_disable+0x42>
    gyro_activate_count--;
 8047066:	4b16      	ldr	r3, [pc, #88]	; (80470c0 <lsm6dso_disable+0x90>)
 8047068:	781b      	ldrb	r3, [r3, #0]
 804706a:	3b01      	subs	r3, #1
 804706c:	b2da      	uxtb	r2, r3
 804706e:	4b14      	ldr	r3, [pc, #80]	; (80470c0 <lsm6dso_disable+0x90>)
 8047070:	701a      	strb	r2, [r3, #0]
  }

  if (gyro_activate_count == 0)
 8047072:	4b13      	ldr	r3, [pc, #76]	; (80470c0 <lsm6dso_disable+0x90>)
 8047074:	781b      	ldrb	r3, [r3, #0]
 8047076:	2b00      	cmp	r3, #0
 8047078:	d102      	bne.n	8047080 <lsm6dso_disable+0x50>
    gyro_activated = false;
 804707a:	4b12      	ldr	r3, [pc, #72]	; (80470c4 <lsm6dso_disable+0x94>)
 804707c:	2200      	movs	r2, #0
 804707e:	701a      	strb	r2, [r3, #0]

  if (acc_activate_count == 0)
 8047080:	4b0e      	ldr	r3, [pc, #56]	; (80470bc <lsm6dso_disable+0x8c>)
 8047082:	781b      	ldrb	r3, [r3, #0]
 8047084:	2b00      	cmp	r3, #0
 8047086:	d102      	bne.n	804708e <lsm6dso_disable+0x5e>
    acc_activated = false;
 8047088:	4b0f      	ldr	r3, [pc, #60]	; (80470c8 <lsm6dso_disable+0x98>)
 804708a:	2200      	movs	r2, #0
 804708c:	701a      	strb	r2, [r3, #0]

  if (acc_activate_count == 0 && gyro_activate_count == 0) {
 804708e:	4b0b      	ldr	r3, [pc, #44]	; (80470bc <lsm6dso_disable+0x8c>)
 8047090:	781b      	ldrb	r3, [r3, #0]
 8047092:	2b00      	cmp	r3, #0
 8047094:	d10c      	bne.n	80470b0 <lsm6dso_disable+0x80>
 8047096:	4b0a      	ldr	r3, [pc, #40]	; (80470c0 <lsm6dso_disable+0x90>)
 8047098:	781b      	ldrb	r3, [r3, #0]
 804709a:	2b00      	cmp	r3, #0
 804709c:	d108      	bne.n	80470b0 <lsm6dso_disable+0x80>
    ret = lsm6dso_block_data_update_set(&dev_ctx, PROPERTY_DISABLE);
 804709e:	2100      	movs	r1, #0
 80470a0:	480a      	ldr	r0, [pc, #40]	; (80470cc <lsm6dso_disable+0x9c>)
 80470a2:	f000 fcd5 	bl	8047a50 <lsm6dso_block_data_update_set>
 80470a6:	60f8      	str	r0, [r7, #12]
    pid_pwm_control(PWM_DEACTIVATE, 0);
 80470a8:	2100      	movs	r1, #0
 80470aa:	2001      	movs	r0, #1
 80470ac:	f7ff fa39 	bl	8046522 <pid_pwm_control>
  }
  return ret;
 80470b0:	68fb      	ldr	r3, [r7, #12]
}
 80470b2:	4618      	mov	r0, r3
 80470b4:	3710      	adds	r7, #16
 80470b6:	46bd      	mov	sp, r7
 80470b8:	bd80      	pop	{r7, pc}
 80470ba:	bf00      	nop
 80470bc:	20008080 	.word	0x20008080
 80470c0:	20008081 	.word	0x20008081
 80470c4:	20008083 	.word	0x20008083
 80470c8:	20008082 	.word	0x20008082
 80470cc:	20008070 	.word	0x20008070

080470d0 <lsm6dso_acc_activate>:

int lsm6dso_acc_activate(bool activate)
{
 80470d0:	b580      	push	{r7, lr}
 80470d2:	b084      	sub	sp, #16
 80470d4:	af00      	add	r7, sp, #0
 80470d6:	4603      	mov	r3, r0
 80470d8:	71fb      	strb	r3, [r7, #7]
  int res = 0;
 80470da:	2300      	movs	r3, #0
 80470dc:	60fb      	str	r3, [r7, #12]
  printf("lsm6dso_acc_activate: %d \r\n", activate);
 80470de:	79fb      	ldrb	r3, [r7, #7]
 80470e0:	4619      	mov	r1, r3
 80470e2:	480a      	ldr	r0, [pc, #40]	; (804710c <lsm6dso_acc_activate+0x3c>)
 80470e4:	f019 fc46 	bl	8060974 <iprintf>
  if (activate) {
 80470e8:	79fb      	ldrb	r3, [r7, #7]
 80470ea:	2b00      	cmp	r3, #0
 80470ec:	d004      	beq.n	80470f8 <lsm6dso_acc_activate+0x28>
    res = lsm6dso_enable((uint8_t) SENSOR_TYPE_ACCELEROMETER);
 80470ee:	2000      	movs	r0, #0
 80470f0:	f7ff ff32 	bl	8046f58 <lsm6dso_enable>
 80470f4:	60f8      	str	r0, [r7, #12]
 80470f6:	e003      	b.n	8047100 <lsm6dso_acc_activate+0x30>
  } else {
    res = lsm6dso_disable((uint8_t) SENSOR_TYPE_ACCELEROMETER);
 80470f8:	2000      	movs	r0, #0
 80470fa:	f7ff ff99 	bl	8047030 <lsm6dso_disable>
 80470fe:	60f8      	str	r0, [r7, #12]
  }
  return res;
 8047100:	68fb      	ldr	r3, [r7, #12]
}
 8047102:	4618      	mov	r0, r3
 8047104:	3710      	adds	r7, #16
 8047106:	46bd      	mov	sp, r7
 8047108:	bd80      	pop	{r7, pc}
 804710a:	bf00      	nop
 804710c:	08065904 	.word	0x08065904

08047110 <lsm6dso_gyro_activate>:

int lsm6dso_gyro_activate(bool activate)
{
 8047110:	b580      	push	{r7, lr}
 8047112:	b084      	sub	sp, #16
 8047114:	af00      	add	r7, sp, #0
 8047116:	4603      	mov	r3, r0
 8047118:	71fb      	strb	r3, [r7, #7]
  int res = 0;
 804711a:	2300      	movs	r3, #0
 804711c:	60fb      	str	r3, [r7, #12]
  printf("lsm6dso_gyro_activate: %d \r\n", activate);
 804711e:	79fb      	ldrb	r3, [r7, #7]
 8047120:	4619      	mov	r1, r3
 8047122:	480a      	ldr	r0, [pc, #40]	; (804714c <lsm6dso_gyro_activate+0x3c>)
 8047124:	f019 fc26 	bl	8060974 <iprintf>
  if (activate) {
 8047128:	79fb      	ldrb	r3, [r7, #7]
 804712a:	2b00      	cmp	r3, #0
 804712c:	d004      	beq.n	8047138 <lsm6dso_gyro_activate+0x28>
    res = lsm6dso_enable((uint8_t) SENSOR_TYPE_GYROSCOPE);
 804712e:	2002      	movs	r0, #2
 8047130:	f7ff ff12 	bl	8046f58 <lsm6dso_enable>
 8047134:	60f8      	str	r0, [r7, #12]
 8047136:	e003      	b.n	8047140 <lsm6dso_gyro_activate+0x30>
  } else {
    res = lsm6dso_disable((uint8_t) SENSOR_TYPE_GYROSCOPE);
 8047138:	2002      	movs	r0, #2
 804713a:	f7ff ff79 	bl	8047030 <lsm6dso_disable>
 804713e:	60f8      	str	r0, [r7, #12]
  }
  return res;
 8047140:	68fb      	ldr	r3, [r7, #12]
}
 8047142:	4618      	mov	r0, r3
 8047144:	3710      	adds	r7, #16
 8047146:	46bd      	mov	sp, r7
 8047148:	bd80      	pop	{r7, pc}
 804714a:	bf00      	nop
 804714c:	08065920 	.word	0x08065920

08047150 <lsm6dso_init_complete>:

int lsm6dso_init_complete(void *para)
{
 8047150:	b480      	push	{r7}
 8047152:	b083      	sub	sp, #12
 8047154:	af00      	add	r7, sp, #0
 8047156:	6078      	str	r0, [r7, #4]
  //send init complete event to smgr?
  return SENSOR_SUCCESS;
 8047158:	2300      	movs	r3, #0
}
 804715a:	4618      	mov	r0, r3
 804715c:	370c      	adds	r7, #12
 804715e:	46bd      	mov	sp, r7
 8047160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047164:	4770      	bx	lr
	...

08047168 <lsm6dso_acc_config>:

int lsm6dso_acc_config(uint8_t config_type, void *para)
{
 8047168:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 804716c:	b09c      	sub	sp, #112	; 0x70
 804716e:	af04      	add	r7, sp, #16
 8047170:	4603      	mov	r3, r0
 8047172:	6039      	str	r1, [r7, #0]
 8047174:	71fb      	strb	r3, [r7, #7]
  int res = 0;
 8047176:	2300      	movs	r3, #0
 8047178:	65fb      	str	r3, [r7, #92]	; 0x5c
  sensors_event_t sensor_data = { 0 };
 804717a:	f107 0308 	add.w	r3, r7, #8
 804717e:	2250      	movs	r2, #80	; 0x50
 8047180:	2100      	movs	r1, #0
 8047182:	4618      	mov	r0, r3
 8047184:	f018 ff1a 	bl	805ffbc <memset>

  switch (config_type) {
 8047188:	79fb      	ldrb	r3, [r7, #7]
 804718a:	3b02      	subs	r3, #2
 804718c:	2b06      	cmp	r3, #6
 804718e:	f200 8091 	bhi.w	80472b4 <lsm6dso_acc_config+0x14c>
 8047192:	a201      	add	r2, pc, #4	; (adr r2, 8047198 <lsm6dso_acc_config+0x30>)
 8047194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8047198:	080471b5 	.word	0x080471b5
 804719c:	080471bf 	.word	0x080471bf
 80471a0:	08047215 	.word	0x08047215
 80471a4:	080472b5 	.word	0x080472b5
 80471a8:	080472b5 	.word	0x080472b5
 80471ac:	080472b5 	.word	0x080472b5
 80471b0:	08047275 	.word	0x08047275
  case SENSOR_CONFIG_SELFTEST:
    res = lsm6dso_acc_self_test(&dev_ctx);
 80471b4:	4845      	ldr	r0, [pc, #276]	; (80472cc <lsm6dso_acc_config+0x164>)
 80471b6:	f7fe fba9 	bl	804590c <lsm6dso_acc_self_test>
 80471ba:	65f8      	str	r0, [r7, #92]	; 0x5c
    break;
 80471bc:	e07f      	b.n	80472be <lsm6dso_acc_config+0x156>
  case SENSOR_CONFIG_CALIBRATION:
    printf("acc cali message \r\n");
 80471be:	4844      	ldr	r0, [pc, #272]	; (80472d0 <lsm6dso_acc_config+0x168>)
 80471c0:	f019 fc74 	bl	8060aac <puts>
    res = lsm6dso_acc_calibration(&dev_ctx, acceleration_offset);
 80471c4:	4943      	ldr	r1, [pc, #268]	; (80472d4 <lsm6dso_acc_config+0x16c>)
 80471c6:	4841      	ldr	r0, [pc, #260]	; (80472cc <lsm6dso_acc_config+0x164>)
 80471c8:	f7fe ff0c 	bl	8045fe4 <lsm6dso_acc_calibration>
 80471cc:	65f8      	str	r0, [r7, #92]	; 0x5c
    if (res == 0) {
 80471ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80471d0:	2b00      	cmp	r3, #0
 80471d2:	d171      	bne.n	80472b8 <lsm6dso_acc_config+0x150>
      memcpy(acc_gyro_init_parms->board_calidata->acc_bias, acceleration_offset,
 80471d4:	4b40      	ldr	r3, [pc, #256]	; (80472d8 <lsm6dso_acc_config+0x170>)
 80471d6:	681b      	ldr	r3, [r3, #0]
 80471d8:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80471dc:	220c      	movs	r2, #12
 80471de:	493d      	ldr	r1, [pc, #244]	; (80472d4 <lsm6dso_acc_config+0x16c>)
 80471e0:	4618      	mov	r0, r3
 80471e2:	f018 fedd 	bl	805ffa0 <memcpy>
             sizeof(float[3]));
      if (acc_gyro_init_parms->board_calidata->acc_cali_ver != DEFAULT_VERSION)
 80471e6:	4b3c      	ldr	r3, [pc, #240]	; (80472d8 <lsm6dso_acc_config+0x170>)
 80471e8:	681b      	ldr	r3, [r3, #0]
 80471ea:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80471ee:	68db      	ldr	r3, [r3, #12]
 80471f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80471f4:	d007      	beq.n	8047206 <lsm6dso_acc_config+0x9e>
        acc_gyro_init_parms->board_calidata->acc_cali_ver++;
 80471f6:	4b38      	ldr	r3, [pc, #224]	; (80472d8 <lsm6dso_acc_config+0x170>)
 80471f8:	681b      	ldr	r3, [r3, #0]
 80471fa:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80471fe:	68da      	ldr	r2, [r3, #12]
 8047200:	3201      	adds	r2, #1
 8047202:	60da      	str	r2, [r3, #12]
      else
        acc_gyro_init_parms->board_calidata->acc_cali_ver = 1;
    }
    break;
 8047204:	e058      	b.n	80472b8 <lsm6dso_acc_config+0x150>
        acc_gyro_init_parms->board_calidata->acc_cali_ver = 1;
 8047206:	4b34      	ldr	r3, [pc, #208]	; (80472d8 <lsm6dso_acc_config+0x170>)
 8047208:	681b      	ldr	r3, [r3, #0]
 804720a:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 804720e:	2201      	movs	r2, #1
 8047210:	60da      	str	r2, [r3, #12]
    break;
 8047212:	e051      	b.n	80472b8 <lsm6dso_acc_config+0x150>
  case SENSOR_CONFIG_BIAS:
    if (acc_gyro_init_parms->board_calidata->acc_cali_ver != DEFAULT_VERSION) {
 8047214:	4b30      	ldr	r3, [pc, #192]	; (80472d8 <lsm6dso_acc_config+0x170>)
 8047216:	681b      	ldr	r3, [r3, #0]
 8047218:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 804721c:	68db      	ldr	r3, [r3, #12]
 804721e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8047222:	d04b      	beq.n	80472bc <lsm6dso_acc_config+0x154>
      memcpy(acceleration_offset, acc_gyro_init_parms->board_calidata->acc_bias,
 8047224:	4b2c      	ldr	r3, [pc, #176]	; (80472d8 <lsm6dso_acc_config+0x170>)
 8047226:	681b      	ldr	r3, [r3, #0]
 8047228:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 804722c:	220c      	movs	r2, #12
 804722e:	4619      	mov	r1, r3
 8047230:	4828      	ldr	r0, [pc, #160]	; (80472d4 <lsm6dso_acc_config+0x16c>)
 8047232:	f018 feb5 	bl	805ffa0 <memcpy>
             sizeof(float[3]));
      printf("acc bias data: {%f, %f, %f} \r\n", acceleration_offset[0],
 8047236:	4b27      	ldr	r3, [pc, #156]	; (80472d4 <lsm6dso_acc_config+0x16c>)
 8047238:	681b      	ldr	r3, [r3, #0]
 804723a:	4618      	mov	r0, r3
 804723c:	f7f9 f984 	bl	8040548 <__aeabi_f2d>
 8047240:	4680      	mov	r8, r0
 8047242:	4689      	mov	r9, r1
             acceleration_offset[1], acceleration_offset[2]);
 8047244:	4b23      	ldr	r3, [pc, #140]	; (80472d4 <lsm6dso_acc_config+0x16c>)
 8047246:	685b      	ldr	r3, [r3, #4]
      printf("acc bias data: {%f, %f, %f} \r\n", acceleration_offset[0],
 8047248:	4618      	mov	r0, r3
 804724a:	f7f9 f97d 	bl	8040548 <__aeabi_f2d>
 804724e:	4604      	mov	r4, r0
 8047250:	460d      	mov	r5, r1
             acceleration_offset[1], acceleration_offset[2]);
 8047252:	4b20      	ldr	r3, [pc, #128]	; (80472d4 <lsm6dso_acc_config+0x16c>)
 8047254:	689b      	ldr	r3, [r3, #8]
      printf("acc bias data: {%f, %f, %f} \r\n", acceleration_offset[0],
 8047256:	4618      	mov	r0, r3
 8047258:	f7f9 f976 	bl	8040548 <__aeabi_f2d>
 804725c:	4602      	mov	r2, r0
 804725e:	460b      	mov	r3, r1
 8047260:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8047264:	e9cd 4500 	strd	r4, r5, [sp]
 8047268:	4642      	mov	r2, r8
 804726a:	464b      	mov	r3, r9
 804726c:	481b      	ldr	r0, [pc, #108]	; (80472dc <lsm6dso_acc_config+0x174>)
 804726e:	f019 fb81 	bl	8060974 <iprintf>
    }
    break;
 8047272:	e023      	b.n	80472bc <lsm6dso_acc_config+0x154>
  case SENSOR_CALIBRATION_RESULT:
    sensor_data.sensor_type = SENSOR_TYPE_ACCELEROMETER;
 8047274:	2300      	movs	r3, #0
 8047276:	723b      	strb	r3, [r7, #8]
    sensor_data.accuracy = 0xFF;
 8047278:	23ff      	movs	r3, #255	; 0xff
 804727a:	727b      	strb	r3, [r7, #9]
    sensor_data.timestamp = osKernelGetTickCount();
 804727c:	f00e fe6c 	bl	8055f58 <osKernelGetTickCount>
 8047280:	4603      	mov	r3, r0
 8047282:	461a      	mov	r2, r3
 8047284:	f04f 0300 	mov.w	r3, #0
 8047288:	e9c7 2304 	strd	r2, r3, [r7, #16]
    sensor_data.sensor_data_t.vec.data[0] = acceleration_offset[0];
 804728c:	4b11      	ldr	r3, [pc, #68]	; (80472d4 <lsm6dso_acc_config+0x16c>)
 804728e:	681b      	ldr	r3, [r3, #0]
 8047290:	61bb      	str	r3, [r7, #24]
    sensor_data.sensor_data_t.vec.data[1] = acceleration_offset[1];
 8047292:	4b10      	ldr	r3, [pc, #64]	; (80472d4 <lsm6dso_acc_config+0x16c>)
 8047294:	685b      	ldr	r3, [r3, #4]
 8047296:	61fb      	str	r3, [r7, #28]
    sensor_data.sensor_data_t.vec.data[2] = acceleration_offset[2];
 8047298:	4b0e      	ldr	r3, [pc, #56]	; (80472d4 <lsm6dso_acc_config+0x16c>)
 804729a:	689b      	ldr	r3, [r3, #8]
 804729c:	623b      	str	r3, [r7, #32]
    osMessageQueuePut(acc_gyro_init_parms->SensorDataQHandle,
 804729e:	4b0e      	ldr	r3, [pc, #56]	; (80472d8 <lsm6dso_acc_config+0x170>)
 80472a0:	681b      	ldr	r3, [r3, #0]
 80472a2:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 80472a6:	f107 0108 	add.w	r1, r7, #8
 80472aa:	2300      	movs	r3, #0
 80472ac:	2200      	movs	r2, #0
 80472ae:	f00f f8a9 	bl	8056404 <osMessageQueuePut>
                      &sensor_data, 0, 0);
    break;
 80472b2:	e004      	b.n	80472be <lsm6dso_acc_config+0x156>
  default:
    break;
 80472b4:	bf00      	nop
 80472b6:	e002      	b.n	80472be <lsm6dso_acc_config+0x156>
    break;
 80472b8:	bf00      	nop
 80472ba:	e000      	b.n	80472be <lsm6dso_acc_config+0x156>
    break;
 80472bc:	bf00      	nop
  }

  return res;
 80472be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 80472c0:	4618      	mov	r0, r3
 80472c2:	3760      	adds	r7, #96	; 0x60
 80472c4:	46bd      	mov	sp, r7
 80472c6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80472ca:	bf00      	nop
 80472cc:	20008070 	.word	0x20008070
 80472d0:	08065940 	.word	0x08065940
 80472d4:	20008024 	.word	0x20008024
 80472d8:	2000807c 	.word	0x2000807c
 80472dc:	08065954 	.word	0x08065954

080472e0 <lsm6dso_gyro_config>:

int lsm6dso_gyro_config(uint8_t config_type, void *para)
{
 80472e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80472e4:	b09c      	sub	sp, #112	; 0x70
 80472e6:	af04      	add	r7, sp, #16
 80472e8:	4603      	mov	r3, r0
 80472ea:	6039      	str	r1, [r7, #0]
 80472ec:	71fb      	strb	r3, [r7, #7]
  int res = 0;
 80472ee:	2300      	movs	r3, #0
 80472f0:	65fb      	str	r3, [r7, #92]	; 0x5c
  sensors_event_t sensor_data = { 0 };
 80472f2:	f107 0308 	add.w	r3, r7, #8
 80472f6:	2250      	movs	r2, #80	; 0x50
 80472f8:	2100      	movs	r1, #0
 80472fa:	4618      	mov	r0, r3
 80472fc:	f018 fe5e 	bl	805ffbc <memset>

  switch (config_type) {
 8047300:	79fb      	ldrb	r3, [r7, #7]
 8047302:	3b02      	subs	r3, #2
 8047304:	2b06      	cmp	r3, #6
 8047306:	f200 8091 	bhi.w	804742c <lsm6dso_gyro_config+0x14c>
 804730a:	a201      	add	r2, pc, #4	; (adr r2, 8047310 <lsm6dso_gyro_config+0x30>)
 804730c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8047310:	0804732d 	.word	0x0804732d
 8047314:	08047337 	.word	0x08047337
 8047318:	0804738f 	.word	0x0804738f
 804731c:	0804742d 	.word	0x0804742d
 8047320:	0804742d 	.word	0x0804742d
 8047324:	0804742d 	.word	0x0804742d
 8047328:	080473f1 	.word	0x080473f1
  case SENSOR_CONFIG_SELFTEST:
    res = lsm6dso_gyro_self_test(&dev_ctx);
 804732c:	4845      	ldr	r0, [pc, #276]	; (8047444 <lsm6dso_gyro_config+0x164>)
 804732e:	f7fe fcab 	bl	8045c88 <lsm6dso_gyro_self_test>
 8047332:	65f8      	str	r0, [r7, #92]	; 0x5c
    break;
 8047334:	e07f      	b.n	8047436 <lsm6dso_gyro_config+0x156>
  case SENSOR_CONFIG_CALIBRATION:
    printf("gyro cali message \r\n");
 8047336:	4844      	ldr	r0, [pc, #272]	; (8047448 <lsm6dso_gyro_config+0x168>)
 8047338:	f019 fbb8 	bl	8060aac <puts>
    res = lsm6dso_gyro_calibration(&dev_ctx, angular_rate_offset);
 804733c:	4943      	ldr	r1, [pc, #268]	; (804744c <lsm6dso_gyro_config+0x16c>)
 804733e:	4841      	ldr	r0, [pc, #260]	; (8047444 <lsm6dso_gyro_config+0x164>)
 8047340:	f7fe ff7e 	bl	8046240 <lsm6dso_gyro_calibration>
 8047344:	65f8      	str	r0, [r7, #92]	; 0x5c
    if (res == 0) {
 8047346:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8047348:	2b00      	cmp	r3, #0
 804734a:	d171      	bne.n	8047430 <lsm6dso_gyro_config+0x150>
      memcpy(acc_gyro_init_parms->board_calidata->gyro_bias,
 804734c:	4b40      	ldr	r3, [pc, #256]	; (8047450 <lsm6dso_gyro_config+0x170>)
 804734e:	681b      	ldr	r3, [r3, #0]
 8047350:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8047354:	3310      	adds	r3, #16
 8047356:	220c      	movs	r2, #12
 8047358:	493c      	ldr	r1, [pc, #240]	; (804744c <lsm6dso_gyro_config+0x16c>)
 804735a:	4618      	mov	r0, r3
 804735c:	f018 fe20 	bl	805ffa0 <memcpy>
             angular_rate_offset, sizeof(float[3]));
      if (acc_gyro_init_parms->board_calidata->gyr_cali_ver != DEFAULT_VERSION)
 8047360:	4b3b      	ldr	r3, [pc, #236]	; (8047450 <lsm6dso_gyro_config+0x170>)
 8047362:	681b      	ldr	r3, [r3, #0]
 8047364:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8047368:	69db      	ldr	r3, [r3, #28]
 804736a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 804736e:	d007      	beq.n	8047380 <lsm6dso_gyro_config+0xa0>
        acc_gyro_init_parms->board_calidata->gyr_cali_ver++;
 8047370:	4b37      	ldr	r3, [pc, #220]	; (8047450 <lsm6dso_gyro_config+0x170>)
 8047372:	681b      	ldr	r3, [r3, #0]
 8047374:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8047378:	69da      	ldr	r2, [r3, #28]
 804737a:	3201      	adds	r2, #1
 804737c:	61da      	str	r2, [r3, #28]
      else
        acc_gyro_init_parms->board_calidata->gyr_cali_ver = 1;
    }
    break;
 804737e:	e057      	b.n	8047430 <lsm6dso_gyro_config+0x150>
        acc_gyro_init_parms->board_calidata->gyr_cali_ver = 1;
 8047380:	4b33      	ldr	r3, [pc, #204]	; (8047450 <lsm6dso_gyro_config+0x170>)
 8047382:	681b      	ldr	r3, [r3, #0]
 8047384:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8047388:	2201      	movs	r2, #1
 804738a:	61da      	str	r2, [r3, #28]
    break;
 804738c:	e050      	b.n	8047430 <lsm6dso_gyro_config+0x150>
  case SENSOR_CONFIG_BIAS:
    if (acc_gyro_init_parms->board_calidata->gyr_cali_ver != DEFAULT_VERSION) {
 804738e:	4b30      	ldr	r3, [pc, #192]	; (8047450 <lsm6dso_gyro_config+0x170>)
 8047390:	681b      	ldr	r3, [r3, #0]
 8047392:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8047396:	69db      	ldr	r3, [r3, #28]
 8047398:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 804739c:	d04a      	beq.n	8047434 <lsm6dso_gyro_config+0x154>
      memcpy(angular_rate_offset,
             acc_gyro_init_parms->board_calidata->gyro_bias, sizeof(float[3]));
 804739e:	4b2c      	ldr	r3, [pc, #176]	; (8047450 <lsm6dso_gyro_config+0x170>)
 80473a0:	681b      	ldr	r3, [r3, #0]
 80473a2:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80473a6:	3310      	adds	r3, #16
      memcpy(angular_rate_offset,
 80473a8:	220c      	movs	r2, #12
 80473aa:	4619      	mov	r1, r3
 80473ac:	4827      	ldr	r0, [pc, #156]	; (804744c <lsm6dso_gyro_config+0x16c>)
 80473ae:	f018 fdf7 	bl	805ffa0 <memcpy>
      printf("gyro bias data: {%f, %f, %f} \r\n", angular_rate_offset[0],
 80473b2:	4b26      	ldr	r3, [pc, #152]	; (804744c <lsm6dso_gyro_config+0x16c>)
 80473b4:	681b      	ldr	r3, [r3, #0]
 80473b6:	4618      	mov	r0, r3
 80473b8:	f7f9 f8c6 	bl	8040548 <__aeabi_f2d>
 80473bc:	4680      	mov	r8, r0
 80473be:	4689      	mov	r9, r1
             angular_rate_offset[1], angular_rate_offset[2]);
 80473c0:	4b22      	ldr	r3, [pc, #136]	; (804744c <lsm6dso_gyro_config+0x16c>)
 80473c2:	685b      	ldr	r3, [r3, #4]
      printf("gyro bias data: {%f, %f, %f} \r\n", angular_rate_offset[0],
 80473c4:	4618      	mov	r0, r3
 80473c6:	f7f9 f8bf 	bl	8040548 <__aeabi_f2d>
 80473ca:	4604      	mov	r4, r0
 80473cc:	460d      	mov	r5, r1
             angular_rate_offset[1], angular_rate_offset[2]);
 80473ce:	4b1f      	ldr	r3, [pc, #124]	; (804744c <lsm6dso_gyro_config+0x16c>)
 80473d0:	689b      	ldr	r3, [r3, #8]
      printf("gyro bias data: {%f, %f, %f} \r\n", angular_rate_offset[0],
 80473d2:	4618      	mov	r0, r3
 80473d4:	f7f9 f8b8 	bl	8040548 <__aeabi_f2d>
 80473d8:	4602      	mov	r2, r0
 80473da:	460b      	mov	r3, r1
 80473dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80473e0:	e9cd 4500 	strd	r4, r5, [sp]
 80473e4:	4642      	mov	r2, r8
 80473e6:	464b      	mov	r3, r9
 80473e8:	481a      	ldr	r0, [pc, #104]	; (8047454 <lsm6dso_gyro_config+0x174>)
 80473ea:	f019 fac3 	bl	8060974 <iprintf>
    }
    break;
 80473ee:	e021      	b.n	8047434 <lsm6dso_gyro_config+0x154>
  case SENSOR_CALIBRATION_RESULT:
    sensor_data.sensor_type = SENSOR_TYPE_GYROSCOPE;
 80473f0:	2302      	movs	r3, #2
 80473f2:	723b      	strb	r3, [r7, #8]
    sensor_data.accuracy = 0xFF;
 80473f4:	23ff      	movs	r3, #255	; 0xff
 80473f6:	727b      	strb	r3, [r7, #9]
    sensor_data.timestamp = sensor_get_timestamp();
 80473f8:	f006 f986 	bl	804d708 <sensor_get_timestamp>
 80473fc:	4602      	mov	r2, r0
 80473fe:	460b      	mov	r3, r1
 8047400:	e9c7 2304 	strd	r2, r3, [r7, #16]
    sensor_data.sensor_data_t.vec.data[0] = angular_rate_offset[0];
 8047404:	4b11      	ldr	r3, [pc, #68]	; (804744c <lsm6dso_gyro_config+0x16c>)
 8047406:	681b      	ldr	r3, [r3, #0]
 8047408:	61bb      	str	r3, [r7, #24]
    sensor_data.sensor_data_t.vec.data[1] = angular_rate_offset[1];
 804740a:	4b10      	ldr	r3, [pc, #64]	; (804744c <lsm6dso_gyro_config+0x16c>)
 804740c:	685b      	ldr	r3, [r3, #4]
 804740e:	61fb      	str	r3, [r7, #28]
    sensor_data.sensor_data_t.vec.data[2] = angular_rate_offset[2];
 8047410:	4b0e      	ldr	r3, [pc, #56]	; (804744c <lsm6dso_gyro_config+0x16c>)
 8047412:	689b      	ldr	r3, [r3, #8]
 8047414:	623b      	str	r3, [r7, #32]
    osMessageQueuePut(acc_gyro_init_parms->SensorDataQHandle,
 8047416:	4b0e      	ldr	r3, [pc, #56]	; (8047450 <lsm6dso_gyro_config+0x170>)
 8047418:	681b      	ldr	r3, [r3, #0]
 804741a:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 804741e:	f107 0108 	add.w	r1, r7, #8
 8047422:	2300      	movs	r3, #0
 8047424:	2200      	movs	r2, #0
 8047426:	f00e ffed 	bl	8056404 <osMessageQueuePut>
                      &sensor_data, 0, 0);
    break;
 804742a:	e004      	b.n	8047436 <lsm6dso_gyro_config+0x156>
  default:
    break;
 804742c:	bf00      	nop
 804742e:	e002      	b.n	8047436 <lsm6dso_gyro_config+0x156>
    break;
 8047430:	bf00      	nop
 8047432:	e000      	b.n	8047436 <lsm6dso_gyro_config+0x156>
    break;
 8047434:	bf00      	nop
  }
  return res;
 8047436:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8047438:	4618      	mov	r0, r3
 804743a:	3760      	adds	r7, #96	; 0x60
 804743c:	46bd      	mov	sp, r7
 804743e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8047442:	bf00      	nop
 8047444:	20008070 	.word	0x20008070
 8047448:	08065974 	.word	0x08065974
 804744c:	20008030 	.word	0x20008030
 8047450:	2000807c 	.word	0x2000807c
 8047454:	08065988 	.word	0x08065988

08047458 <lsm6dso_publish_config_resp>:

int lsm6dso_publish_config_resp(void *para)
{
 8047458:	b480      	push	{r7}
 804745a:	b083      	sub	sp, #12
 804745c:	af00      	add	r7, sp, #0
 804745e:	6078      	str	r0, [r7, #4]
  //send calibration result to AP using this function
  return SENSOR_SUCCESS;
 8047460:	2300      	movs	r3, #0
}
 8047462:	4618      	mov	r0, r3
 8047464:	370c      	adds	r7, #12
 8047466:	46bd      	mov	sp, r7
 8047468:	f85d 7b04 	ldr.w	r7, [sp], #4
 804746c:	4770      	bx	lr

0804746e <lsm6dso_read_reg>:
 * @retval          interface status (MANDATORY: return 0 -> no Error)
 *
 */
int32_t lsm6dso_read_reg(stmdev_ctx_t * ctx, uint8_t reg, uint8_t * data,
                         uint16_t len)
{
 804746e:	b590      	push	{r4, r7, lr}
 8047470:	b087      	sub	sp, #28
 8047472:	af00      	add	r7, sp, #0
 8047474:	60f8      	str	r0, [r7, #12]
 8047476:	607a      	str	r2, [r7, #4]
 8047478:	461a      	mov	r2, r3
 804747a:	460b      	mov	r3, r1
 804747c:	72fb      	strb	r3, [r7, #11]
 804747e:	4613      	mov	r3, r2
 8047480:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8047482:	68fb      	ldr	r3, [r7, #12]
 8047484:	685c      	ldr	r4, [r3, #4]
 8047486:	68fb      	ldr	r3, [r7, #12]
 8047488:	6898      	ldr	r0, [r3, #8]
 804748a:	893b      	ldrh	r3, [r7, #8]
 804748c:	7af9      	ldrb	r1, [r7, #11]
 804748e:	687a      	ldr	r2, [r7, #4]
 8047490:	47a0      	blx	r4
 8047492:	6178      	str	r0, [r7, #20]
  return ret;
 8047494:	697b      	ldr	r3, [r7, #20]
}
 8047496:	4618      	mov	r0, r3
 8047498:	371c      	adds	r7, #28
 804749a:	46bd      	mov	sp, r7
 804749c:	bd90      	pop	{r4, r7, pc}

0804749e <lsm6dso_write_reg>:
 * @retval          interface status (MANDATORY: return 0 -> no Error)
 *
 */
int32_t lsm6dso_write_reg(stmdev_ctx_t * ctx, uint8_t reg, uint8_t * data,
                          uint16_t len)
{
 804749e:	b590      	push	{r4, r7, lr}
 80474a0:	b087      	sub	sp, #28
 80474a2:	af00      	add	r7, sp, #0
 80474a4:	60f8      	str	r0, [r7, #12]
 80474a6:	607a      	str	r2, [r7, #4]
 80474a8:	461a      	mov	r2, r3
 80474aa:	460b      	mov	r3, r1
 80474ac:	72fb      	strb	r3, [r7, #11]
 80474ae:	4613      	mov	r3, r2
 80474b0:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80474b2:	68fb      	ldr	r3, [r7, #12]
 80474b4:	681c      	ldr	r4, [r3, #0]
 80474b6:	68fb      	ldr	r3, [r7, #12]
 80474b8:	6898      	ldr	r0, [r3, #8]
 80474ba:	893b      	ldrh	r3, [r7, #8]
 80474bc:	7af9      	ldrb	r1, [r7, #11]
 80474be:	687a      	ldr	r2, [r7, #4]
 80474c0:	47a0      	blx	r4
 80474c2:	6178      	str	r0, [r7, #20]
  return ret;
 80474c4:	697b      	ldr	r3, [r7, #20]
}
 80474c6:	4618      	mov	r0, r3
 80474c8:	371c      	adds	r7, #28
 80474ca:	46bd      	mov	sp, r7
 80474cc:	bd90      	pop	{r4, r7, pc}
	...

080474d0 <lsm6dso_from_fs4_to_mg>:
{
  return ((float_t) lsb) * 0.061f;
}

float_t lsm6dso_from_fs4_to_mg(int16_t lsb)
{
 80474d0:	b480      	push	{r7}
 80474d2:	b083      	sub	sp, #12
 80474d4:	af00      	add	r7, sp, #0
 80474d6:	4603      	mov	r3, r0
 80474d8:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb) * 0.122f;
 80474da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80474de:	ee07 3a90 	vmov	s15, r3
 80474e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80474e6:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80474fc <lsm6dso_from_fs4_to_mg+0x2c>
 80474ea:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80474ee:	eeb0 0a67 	vmov.f32	s0, s15
 80474f2:	370c      	adds	r7, #12
 80474f4:	46bd      	mov	sp, r7
 80474f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80474fa:	4770      	bx	lr
 80474fc:	3df9db23 	.word	0x3df9db23

08047500 <lsm6dso_from_fs8_to_mg>:

float_t lsm6dso_from_fs8_to_mg(int16_t lsb)
{
 8047500:	b480      	push	{r7}
 8047502:	b083      	sub	sp, #12
 8047504:	af00      	add	r7, sp, #0
 8047506:	4603      	mov	r3, r0
 8047508:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb) * 0.244f;
 804750a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 804750e:	ee07 3a90 	vmov	s15, r3
 8047512:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8047516:	ed9f 7a05 	vldr	s14, [pc, #20]	; 804752c <lsm6dso_from_fs8_to_mg+0x2c>
 804751a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 804751e:	eeb0 0a67 	vmov.f32	s0, s15
 8047522:	370c      	adds	r7, #12
 8047524:	46bd      	mov	sp, r7
 8047526:	f85d 7b04 	ldr.w	r7, [sp], #4
 804752a:	4770      	bx	lr
 804752c:	3e79db23 	.word	0x3e79db23

08047530 <lsm6dso_from_fs1000_to_mdps>:
{
  return ((float_t) lsb) * 8.750f;
}

float_t lsm6dso_from_fs1000_to_mdps(int16_t lsb)
{
 8047530:	b480      	push	{r7}
 8047532:	b083      	sub	sp, #12
 8047534:	af00      	add	r7, sp, #0
 8047536:	4603      	mov	r3, r0
 8047538:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb) * 35.0f;
 804753a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 804753e:	ee07 3a90 	vmov	s15, r3
 8047542:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8047546:	ed9f 7a05 	vldr	s14, [pc, #20]	; 804755c <lsm6dso_from_fs1000_to_mdps+0x2c>
 804754a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 804754e:	eeb0 0a67 	vmov.f32	s0, s15
 8047552:	370c      	adds	r7, #12
 8047554:	46bd      	mov	sp, r7
 8047556:	f85d 7b04 	ldr.w	r7, [sp], #4
 804755a:	4770      	bx	lr
 804755c:	420c0000 	.word	0x420c0000

08047560 <lsm6dso_from_fs2000_to_mdps>:

float_t lsm6dso_from_fs2000_to_mdps(int16_t lsb)
{
 8047560:	b480      	push	{r7}
 8047562:	b083      	sub	sp, #12
 8047564:	af00      	add	r7, sp, #0
 8047566:	4603      	mov	r3, r0
 8047568:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb) * 70.0f;
 804756a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 804756e:	ee07 3a90 	vmov	s15, r3
 8047572:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8047576:	ed9f 7a05 	vldr	s14, [pc, #20]	; 804758c <lsm6dso_from_fs2000_to_mdps+0x2c>
 804757a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 804757e:	eeb0 0a67 	vmov.f32	s0, s15
 8047582:	370c      	adds	r7, #12
 8047584:	46bd      	mov	sp, r7
 8047586:	f85d 7b04 	ldr.w	r7, [sp], #4
 804758a:	4770      	bx	lr
 804758c:	428c0000 	.word	0x428c0000

08047590 <lsm6dso_from_lsb_to_celsius>:

float_t lsm6dso_from_lsb_to_celsius(int16_t lsb)
{
 8047590:	b480      	push	{r7}
 8047592:	b083      	sub	sp, #12
 8047594:	af00      	add	r7, sp, #0
 8047596:	4603      	mov	r3, r0
 8047598:	80fb      	strh	r3, [r7, #6]
  return (((float_t) lsb / 256.0f) + 25.0f);
 804759a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 804759e:	ee07 3a90 	vmov	s15, r3
 80475a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80475a6:	eddf 6a07 	vldr	s13, [pc, #28]	; 80475c4 <lsm6dso_from_lsb_to_celsius+0x34>
 80475aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80475ae:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80475b2:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 80475b6:	eeb0 0a67 	vmov.f32	s0, s15
 80475ba:	370c      	adds	r7, #12
 80475bc:	46bd      	mov	sp, r7
 80475be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80475c2:	4770      	bx	lr
 80475c4:	43800000 	.word	0x43800000

080475c8 <lsm6dso_xl_full_scale_set>:
 * @param  ctx      read / write interface definitions
 * @param  val      change the values of fs_xl in reg CTRL1_XL
 *
 */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t * ctx, lsm6dso_fs_xl_t val)
{
 80475c8:	b580      	push	{r7, lr}
 80475ca:	b084      	sub	sp, #16
 80475cc:	af00      	add	r7, sp, #0
 80475ce:	6078      	str	r0, [r7, #4]
 80475d0:	460b      	mov	r3, r1
 80475d2:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *) & reg, 1);
 80475d4:	f107 0208 	add.w	r2, r7, #8
 80475d8:	2301      	movs	r3, #1
 80475da:	2110      	movs	r1, #16
 80475dc:	6878      	ldr	r0, [r7, #4]
 80475de:	f7ff ff46 	bl	804746e <lsm6dso_read_reg>
 80475e2:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80475e4:	68fb      	ldr	r3, [r7, #12]
 80475e6:	2b00      	cmp	r3, #0
 80475e8:	d10f      	bne.n	804760a <lsm6dso_xl_full_scale_set+0x42>
    reg.fs_xl = (uint8_t) val;
 80475ea:	78fb      	ldrb	r3, [r7, #3]
 80475ec:	f003 0303 	and.w	r3, r3, #3
 80475f0:	b2da      	uxtb	r2, r3
 80475f2:	7a3b      	ldrb	r3, [r7, #8]
 80475f4:	f362 0383 	bfi	r3, r2, #2, #2
 80475f8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *) & reg, 1);
 80475fa:	f107 0208 	add.w	r2, r7, #8
 80475fe:	2301      	movs	r3, #1
 8047600:	2110      	movs	r1, #16
 8047602:	6878      	ldr	r0, [r7, #4]
 8047604:	f7ff ff4b 	bl	804749e <lsm6dso_write_reg>
 8047608:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 804760a:	68fb      	ldr	r3, [r7, #12]
}
 804760c:	4618      	mov	r0, r3
 804760e:	3710      	adds	r7, #16
 8047610:	46bd      	mov	sp, r7
 8047612:	bd80      	pop	{r7, pc}

08047614 <lsm6dso_xl_data_rate_set>:
 * @param  ctx      read / write interface definitions
 * @param  val      change the values of odr_xl in reg CTRL1_XL
 *
 */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t * ctx, lsm6dso_odr_xl_t val)
{
 8047614:	b580      	push	{r7, lr}
 8047616:	b086      	sub	sp, #24
 8047618:	af00      	add	r7, sp, #0
 804761a:	6078      	str	r0, [r7, #4]
 804761c:	460b      	mov	r3, r1
 804761e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl = val;
 8047620:	78fb      	ldrb	r3, [r7, #3]
 8047622:	75fb      	strb	r3, [r7, #23]
  lsm6dso_emb_fsm_enable_t fsm_enable;
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret = lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8047624:	f107 030c 	add.w	r3, r7, #12
 8047628:	4619      	mov	r1, r3
 804762a:	6878      	ldr	r0, [r7, #4]
 804762c:	f000 fc2b 	bl	8047e86 <lsm6dso_fsm_enable_get>
 8047630:	6138      	str	r0, [r7, #16]

  if (ret == 0) {
 8047632:	693b      	ldr	r3, [r7, #16]
 8047634:	2b00      	cmp	r3, #0
 8047636:	f040 80c4 	bne.w	80477c2 <lsm6dso_xl_data_rate_set+0x1ae>
    if ((fsm_enable.fsm_enable_a.fsm1_en | fsm_enable.fsm_enable_a.fsm2_en
 804763a:	7b3b      	ldrb	r3, [r7, #12]
 804763c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8047640:	b2da      	uxtb	r2, r3
 8047642:	7b3b      	ldrb	r3, [r7, #12]
 8047644:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8047648:	b2db      	uxtb	r3, r3
 804764a:	4313      	orrs	r3, r2
 804764c:	b2da      	uxtb	r2, r3
         | fsm_enable.fsm_enable_a.fsm3_en
 804764e:	7b3b      	ldrb	r3, [r7, #12]
 8047650:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8047654:	b2db      	uxtb	r3, r3
 8047656:	4313      	orrs	r3, r2
 8047658:	b2da      	uxtb	r2, r3
         | fsm_enable.fsm_enable_a.fsm4_en
 804765a:	7b3b      	ldrb	r3, [r7, #12]
 804765c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8047660:	b2db      	uxtb	r3, r3
 8047662:	4313      	orrs	r3, r2
 8047664:	b2da      	uxtb	r2, r3
         | fsm_enable.fsm_enable_a.fsm5_en
 8047666:	7b3b      	ldrb	r3, [r7, #12]
 8047668:	f3c3 1300 	ubfx	r3, r3, #4, #1
 804766c:	b2db      	uxtb	r3, r3
 804766e:	4313      	orrs	r3, r2
 8047670:	b2da      	uxtb	r2, r3
         | fsm_enable.fsm_enable_a.fsm6_en
 8047672:	7b3b      	ldrb	r3, [r7, #12]
 8047674:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8047678:	b2db      	uxtb	r3, r3
 804767a:	4313      	orrs	r3, r2
 804767c:	b2da      	uxtb	r2, r3
         | fsm_enable.fsm_enable_a.fsm7_en
 804767e:	7b3b      	ldrb	r3, [r7, #12]
 8047680:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8047684:	b2db      	uxtb	r3, r3
 8047686:	4313      	orrs	r3, r2
 8047688:	b2da      	uxtb	r2, r3
         | fsm_enable.fsm_enable_a.fsm8_en
 804768a:	7b3b      	ldrb	r3, [r7, #12]
 804768c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8047690:	b2db      	uxtb	r3, r3
 8047692:	4313      	orrs	r3, r2
 8047694:	b2da      	uxtb	r2, r3
         | fsm_enable.fsm_enable_b.fsm9_en
 8047696:	7b7b      	ldrb	r3, [r7, #13]
 8047698:	f3c3 0300 	ubfx	r3, r3, #0, #1
 804769c:	b2db      	uxtb	r3, r3
 804769e:	4313      	orrs	r3, r2
 80476a0:	b2da      	uxtb	r2, r3
         | fsm_enable.fsm_enable_b.fsm10_en
 80476a2:	7b7b      	ldrb	r3, [r7, #13]
 80476a4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80476a8:	b2db      	uxtb	r3, r3
 80476aa:	4313      	orrs	r3, r2
 80476ac:	b2da      	uxtb	r2, r3
         | fsm_enable.fsm_enable_b.fsm11_en
 80476ae:	7b7b      	ldrb	r3, [r7, #13]
 80476b0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80476b4:	b2db      	uxtb	r3, r3
 80476b6:	4313      	orrs	r3, r2
 80476b8:	b2da      	uxtb	r2, r3
         | fsm_enable.fsm_enable_b.fsm12_en
 80476ba:	7b7b      	ldrb	r3, [r7, #13]
 80476bc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80476c0:	b2db      	uxtb	r3, r3
 80476c2:	4313      	orrs	r3, r2
 80476c4:	b2da      	uxtb	r2, r3
         | fsm_enable.fsm_enable_b.fsm13_en
 80476c6:	7b7b      	ldrb	r3, [r7, #13]
 80476c8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80476cc:	b2db      	uxtb	r3, r3
 80476ce:	4313      	orrs	r3, r2
 80476d0:	b2da      	uxtb	r2, r3
         | fsm_enable.fsm_enable_b.fsm14_en
 80476d2:	7b7b      	ldrb	r3, [r7, #13]
 80476d4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80476d8:	b2db      	uxtb	r3, r3
 80476da:	4313      	orrs	r3, r2
 80476dc:	b2da      	uxtb	r2, r3
         | fsm_enable.fsm_enable_b.fsm15_en
 80476de:	7b7b      	ldrb	r3, [r7, #13]
 80476e0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80476e4:	b2db      	uxtb	r3, r3
 80476e6:	4313      	orrs	r3, r2
 80476e8:	b2da      	uxtb	r2, r3
         | fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE) {
 80476ea:	7b7b      	ldrb	r3, [r7, #13]
 80476ec:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80476f0:	b2db      	uxtb	r3, r3
 80476f2:	4313      	orrs	r3, r2
 80476f4:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en | fsm_enable.fsm_enable_a.fsm2_en
 80476f6:	2b01      	cmp	r3, #1
 80476f8:	d163      	bne.n	80477c2 <lsm6dso_xl_data_rate_set+0x1ae>
      ret = lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 80476fa:	f107 030b 	add.w	r3, r7, #11
 80476fe:	4619      	mov	r1, r3
 8047700:	6878      	ldr	r0, [r7, #4]
 8047702:	f000 fbe1 	bl	8047ec8 <lsm6dso_fsm_data_rate_get>
 8047706:	6138      	str	r0, [r7, #16]

      if (ret == 0) {
 8047708:	693b      	ldr	r3, [r7, #16]
 804770a:	2b00      	cmp	r3, #0
 804770c:	d159      	bne.n	80477c2 <lsm6dso_xl_data_rate_set+0x1ae>
        switch (fsm_odr) {
 804770e:	7afb      	ldrb	r3, [r7, #11]
 8047710:	2b03      	cmp	r3, #3
 8047712:	d853      	bhi.n	80477bc <lsm6dso_xl_data_rate_set+0x1a8>
 8047714:	a201      	add	r2, pc, #4	; (adr r2, 804771c <lsm6dso_xl_data_rate_set+0x108>)
 8047716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804771a:	bf00      	nop
 804771c:	0804772d 	.word	0x0804772d
 8047720:	0804773f 	.word	0x0804773f
 8047724:	0804775d 	.word	0x0804775d
 8047728:	08047787 	.word	0x08047787
        case LSM6DSO_ODR_FSM_12Hz5:
          if (val == LSM6DSO_XL_ODR_OFF) {
 804772c:	78fb      	ldrb	r3, [r7, #3]
 804772e:	2b00      	cmp	r3, #0
 8047730:	d102      	bne.n	8047738 <lsm6dso_xl_data_rate_set+0x124>
            odr_xl = LSM6DSO_XL_ODR_12Hz5;
 8047732:	2301      	movs	r3, #1
 8047734:	75fb      	strb	r3, [r7, #23]

          else {
            odr_xl = val;
          }

          break;
 8047736:	e045      	b.n	80477c4 <lsm6dso_xl_data_rate_set+0x1b0>
            odr_xl = val;
 8047738:	78fb      	ldrb	r3, [r7, #3]
 804773a:	75fb      	strb	r3, [r7, #23]
          break;
 804773c:	e042      	b.n	80477c4 <lsm6dso_xl_data_rate_set+0x1b0>

        case LSM6DSO_ODR_FSM_26Hz:
          if (val == LSM6DSO_XL_ODR_OFF) {
 804773e:	78fb      	ldrb	r3, [r7, #3]
 8047740:	2b00      	cmp	r3, #0
 8047742:	d102      	bne.n	804774a <lsm6dso_xl_data_rate_set+0x136>
            odr_xl = LSM6DSO_XL_ODR_26Hz;
 8047744:	2302      	movs	r3, #2
 8047746:	75fb      	strb	r3, [r7, #23]

          else {
            odr_xl = val;
          }

          break;
 8047748:	e03c      	b.n	80477c4 <lsm6dso_xl_data_rate_set+0x1b0>
          else if (val == LSM6DSO_XL_ODR_12Hz5) {
 804774a:	78fb      	ldrb	r3, [r7, #3]
 804774c:	2b01      	cmp	r3, #1
 804774e:	d102      	bne.n	8047756 <lsm6dso_xl_data_rate_set+0x142>
            odr_xl = LSM6DSO_XL_ODR_26Hz;
 8047750:	2302      	movs	r3, #2
 8047752:	75fb      	strb	r3, [r7, #23]
          break;
 8047754:	e036      	b.n	80477c4 <lsm6dso_xl_data_rate_set+0x1b0>
            odr_xl = val;
 8047756:	78fb      	ldrb	r3, [r7, #3]
 8047758:	75fb      	strb	r3, [r7, #23]
          break;
 804775a:	e033      	b.n	80477c4 <lsm6dso_xl_data_rate_set+0x1b0>

        case LSM6DSO_ODR_FSM_52Hz:
          if (val == LSM6DSO_XL_ODR_OFF) {
 804775c:	78fb      	ldrb	r3, [r7, #3]
 804775e:	2b00      	cmp	r3, #0
 8047760:	d102      	bne.n	8047768 <lsm6dso_xl_data_rate_set+0x154>
            odr_xl = LSM6DSO_XL_ODR_52Hz;
 8047762:	2303      	movs	r3, #3
 8047764:	75fb      	strb	r3, [r7, #23]

          else {
            odr_xl = val;
          }

          break;
 8047766:	e02d      	b.n	80477c4 <lsm6dso_xl_data_rate_set+0x1b0>
          else if (val == LSM6DSO_XL_ODR_12Hz5) {
 8047768:	78fb      	ldrb	r3, [r7, #3]
 804776a:	2b01      	cmp	r3, #1
 804776c:	d102      	bne.n	8047774 <lsm6dso_xl_data_rate_set+0x160>
            odr_xl = LSM6DSO_XL_ODR_52Hz;
 804776e:	2303      	movs	r3, #3
 8047770:	75fb      	strb	r3, [r7, #23]
          break;
 8047772:	e027      	b.n	80477c4 <lsm6dso_xl_data_rate_set+0x1b0>
          else if (val == LSM6DSO_XL_ODR_26Hz) {
 8047774:	78fb      	ldrb	r3, [r7, #3]
 8047776:	2b02      	cmp	r3, #2
 8047778:	d102      	bne.n	8047780 <lsm6dso_xl_data_rate_set+0x16c>
            odr_xl = LSM6DSO_XL_ODR_52Hz;
 804777a:	2303      	movs	r3, #3
 804777c:	75fb      	strb	r3, [r7, #23]
          break;
 804777e:	e021      	b.n	80477c4 <lsm6dso_xl_data_rate_set+0x1b0>
            odr_xl = val;
 8047780:	78fb      	ldrb	r3, [r7, #3]
 8047782:	75fb      	strb	r3, [r7, #23]
          break;
 8047784:	e01e      	b.n	80477c4 <lsm6dso_xl_data_rate_set+0x1b0>

        case LSM6DSO_ODR_FSM_104Hz:
          if (val == LSM6DSO_XL_ODR_OFF) {
 8047786:	78fb      	ldrb	r3, [r7, #3]
 8047788:	2b00      	cmp	r3, #0
 804778a:	d102      	bne.n	8047792 <lsm6dso_xl_data_rate_set+0x17e>
            odr_xl = LSM6DSO_XL_ODR_104Hz;
 804778c:	2304      	movs	r3, #4
 804778e:	75fb      	strb	r3, [r7, #23]

          else {
            odr_xl = val;
          }

          break;
 8047790:	e018      	b.n	80477c4 <lsm6dso_xl_data_rate_set+0x1b0>
          else if (val == LSM6DSO_XL_ODR_12Hz5) {
 8047792:	78fb      	ldrb	r3, [r7, #3]
 8047794:	2b01      	cmp	r3, #1
 8047796:	d102      	bne.n	804779e <lsm6dso_xl_data_rate_set+0x18a>
            odr_xl = LSM6DSO_XL_ODR_104Hz;
 8047798:	2304      	movs	r3, #4
 804779a:	75fb      	strb	r3, [r7, #23]
          break;
 804779c:	e012      	b.n	80477c4 <lsm6dso_xl_data_rate_set+0x1b0>
          else if (val == LSM6DSO_XL_ODR_26Hz) {
 804779e:	78fb      	ldrb	r3, [r7, #3]
 80477a0:	2b02      	cmp	r3, #2
 80477a2:	d102      	bne.n	80477aa <lsm6dso_xl_data_rate_set+0x196>
            odr_xl = LSM6DSO_XL_ODR_104Hz;
 80477a4:	2304      	movs	r3, #4
 80477a6:	75fb      	strb	r3, [r7, #23]
          break;
 80477a8:	e00c      	b.n	80477c4 <lsm6dso_xl_data_rate_set+0x1b0>
          else if (val == LSM6DSO_XL_ODR_52Hz) {
 80477aa:	78fb      	ldrb	r3, [r7, #3]
 80477ac:	2b03      	cmp	r3, #3
 80477ae:	d102      	bne.n	80477b6 <lsm6dso_xl_data_rate_set+0x1a2>
            odr_xl = LSM6DSO_XL_ODR_104Hz;
 80477b0:	2304      	movs	r3, #4
 80477b2:	75fb      	strb	r3, [r7, #23]
          break;
 80477b4:	e006      	b.n	80477c4 <lsm6dso_xl_data_rate_set+0x1b0>
            odr_xl = val;
 80477b6:	78fb      	ldrb	r3, [r7, #3]
 80477b8:	75fb      	strb	r3, [r7, #23]
          break;
 80477ba:	e003      	b.n	80477c4 <lsm6dso_xl_data_rate_set+0x1b0>

        default:
          odr_xl = val;
 80477bc:	78fb      	ldrb	r3, [r7, #3]
 80477be:	75fb      	strb	r3, [r7, #23]
          break;
 80477c0:	e000      	b.n	80477c4 <lsm6dso_xl_data_rate_set+0x1b0>
        }
      }
 80477c2:	bf00      	nop
    }
  }

  if (ret == 0) {
 80477c4:	693b      	ldr	r3, [r7, #16]
 80477c6:	2b00      	cmp	r3, #0
 80477c8:	d107      	bne.n	80477da <lsm6dso_xl_data_rate_set+0x1c6>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *) & reg, 1);
 80477ca:	f107 0208 	add.w	r2, r7, #8
 80477ce:	2301      	movs	r3, #1
 80477d0:	2110      	movs	r1, #16
 80477d2:	6878      	ldr	r0, [r7, #4]
 80477d4:	f7ff fe4b 	bl	804746e <lsm6dso_read_reg>
 80477d8:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0) {
 80477da:	693b      	ldr	r3, [r7, #16]
 80477dc:	2b00      	cmp	r3, #0
 80477de:	d10f      	bne.n	8047800 <lsm6dso_xl_data_rate_set+0x1ec>
    reg.odr_xl = (uint8_t) odr_xl;
 80477e0:	7dfb      	ldrb	r3, [r7, #23]
 80477e2:	f003 030f 	and.w	r3, r3, #15
 80477e6:	b2da      	uxtb	r2, r3
 80477e8:	7a3b      	ldrb	r3, [r7, #8]
 80477ea:	f362 1307 	bfi	r3, r2, #4, #4
 80477ee:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *) & reg, 1);
 80477f0:	f107 0208 	add.w	r2, r7, #8
 80477f4:	2301      	movs	r3, #1
 80477f6:	2110      	movs	r1, #16
 80477f8:	6878      	ldr	r0, [r7, #4]
 80477fa:	f7ff fe50 	bl	804749e <lsm6dso_write_reg>
 80477fe:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8047800:	693b      	ldr	r3, [r7, #16]
}
 8047802:	4618      	mov	r0, r3
 8047804:	3718      	adds	r7, #24
 8047806:	46bd      	mov	sp, r7
 8047808:	bd80      	pop	{r7, pc}
 804780a:	bf00      	nop

0804780c <lsm6dso_gy_full_scale_set>:
 * @param  ctx      read / write interface definitions
 * @param  val      change the values of fs_g in reg CTRL2_G
 *
 */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t * ctx, lsm6dso_fs_g_t val)
{
 804780c:	b580      	push	{r7, lr}
 804780e:	b084      	sub	sp, #16
 8047810:	af00      	add	r7, sp, #0
 8047812:	6078      	str	r0, [r7, #4]
 8047814:	460b      	mov	r3, r1
 8047816:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *) & reg, 1);
 8047818:	f107 0208 	add.w	r2, r7, #8
 804781c:	2301      	movs	r3, #1
 804781e:	2111      	movs	r1, #17
 8047820:	6878      	ldr	r0, [r7, #4]
 8047822:	f7ff fe24 	bl	804746e <lsm6dso_read_reg>
 8047826:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8047828:	68fb      	ldr	r3, [r7, #12]
 804782a:	2b00      	cmp	r3, #0
 804782c:	d10f      	bne.n	804784e <lsm6dso_gy_full_scale_set+0x42>
    reg.fs_g = (uint8_t) val;
 804782e:	78fb      	ldrb	r3, [r7, #3]
 8047830:	f003 0307 	and.w	r3, r3, #7
 8047834:	b2da      	uxtb	r2, r3
 8047836:	7a3b      	ldrb	r3, [r7, #8]
 8047838:	f362 0343 	bfi	r3, r2, #1, #3
 804783c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *) & reg, 1);
 804783e:	f107 0208 	add.w	r2, r7, #8
 8047842:	2301      	movs	r3, #1
 8047844:	2111      	movs	r1, #17
 8047846:	6878      	ldr	r0, [r7, #4]
 8047848:	f7ff fe29 	bl	804749e <lsm6dso_write_reg>
 804784c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 804784e:	68fb      	ldr	r3, [r7, #12]
}
 8047850:	4618      	mov	r0, r3
 8047852:	3710      	adds	r7, #16
 8047854:	46bd      	mov	sp, r7
 8047856:	bd80      	pop	{r7, pc}

08047858 <lsm6dso_gy_data_rate_set>:
 * @param  ctx      read / write interface definitions
 * @param  val      change the values of odr_g in reg CTRL2_G
 *
 */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t * ctx, lsm6dso_odr_g_t val)
{
 8047858:	b580      	push	{r7, lr}
 804785a:	b086      	sub	sp, #24
 804785c:	af00      	add	r7, sp, #0
 804785e:	6078      	str	r0, [r7, #4]
 8047860:	460b      	mov	r3, r1
 8047862:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy = val;
 8047864:	78fb      	ldrb	r3, [r7, #3]
 8047866:	75fb      	strb	r3, [r7, #23]
  lsm6dso_emb_fsm_enable_t fsm_enable;
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret = lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8047868:	f107 030c 	add.w	r3, r7, #12
 804786c:	4619      	mov	r1, r3
 804786e:	6878      	ldr	r0, [r7, #4]
 8047870:	f000 fb09 	bl	8047e86 <lsm6dso_fsm_enable_get>
 8047874:	6138      	str	r0, [r7, #16]

  if (ret == 0) {
 8047876:	693b      	ldr	r3, [r7, #16]
 8047878:	2b00      	cmp	r3, #0
 804787a:	f040 80c4 	bne.w	8047a06 <lsm6dso_gy_data_rate_set+0x1ae>
    if ((fsm_enable.fsm_enable_a.fsm1_en | fsm_enable.fsm_enable_a.fsm2_en
 804787e:	7b3b      	ldrb	r3, [r7, #12]
 8047880:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8047884:	b2da      	uxtb	r2, r3
 8047886:	7b3b      	ldrb	r3, [r7, #12]
 8047888:	f3c3 0340 	ubfx	r3, r3, #1, #1
 804788c:	b2db      	uxtb	r3, r3
 804788e:	4313      	orrs	r3, r2
 8047890:	b2da      	uxtb	r2, r3
         | fsm_enable.fsm_enable_a.fsm3_en
 8047892:	7b3b      	ldrb	r3, [r7, #12]
 8047894:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8047898:	b2db      	uxtb	r3, r3
 804789a:	4313      	orrs	r3, r2
 804789c:	b2da      	uxtb	r2, r3
         | fsm_enable.fsm_enable_a.fsm4_en
 804789e:	7b3b      	ldrb	r3, [r7, #12]
 80478a0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80478a4:	b2db      	uxtb	r3, r3
 80478a6:	4313      	orrs	r3, r2
 80478a8:	b2da      	uxtb	r2, r3
         | fsm_enable.fsm_enable_a.fsm5_en
 80478aa:	7b3b      	ldrb	r3, [r7, #12]
 80478ac:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80478b0:	b2db      	uxtb	r3, r3
 80478b2:	4313      	orrs	r3, r2
 80478b4:	b2da      	uxtb	r2, r3
         | fsm_enable.fsm_enable_a.fsm6_en
 80478b6:	7b3b      	ldrb	r3, [r7, #12]
 80478b8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80478bc:	b2db      	uxtb	r3, r3
 80478be:	4313      	orrs	r3, r2
 80478c0:	b2da      	uxtb	r2, r3
         | fsm_enable.fsm_enable_a.fsm7_en
 80478c2:	7b3b      	ldrb	r3, [r7, #12]
 80478c4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80478c8:	b2db      	uxtb	r3, r3
 80478ca:	4313      	orrs	r3, r2
 80478cc:	b2da      	uxtb	r2, r3
         | fsm_enable.fsm_enable_a.fsm8_en
 80478ce:	7b3b      	ldrb	r3, [r7, #12]
 80478d0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80478d4:	b2db      	uxtb	r3, r3
 80478d6:	4313      	orrs	r3, r2
 80478d8:	b2da      	uxtb	r2, r3
         | fsm_enable.fsm_enable_b.fsm9_en
 80478da:	7b7b      	ldrb	r3, [r7, #13]
 80478dc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80478e0:	b2db      	uxtb	r3, r3
 80478e2:	4313      	orrs	r3, r2
 80478e4:	b2da      	uxtb	r2, r3
         | fsm_enable.fsm_enable_b.fsm10_en
 80478e6:	7b7b      	ldrb	r3, [r7, #13]
 80478e8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80478ec:	b2db      	uxtb	r3, r3
 80478ee:	4313      	orrs	r3, r2
 80478f0:	b2da      	uxtb	r2, r3
         | fsm_enable.fsm_enable_b.fsm11_en
 80478f2:	7b7b      	ldrb	r3, [r7, #13]
 80478f4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80478f8:	b2db      	uxtb	r3, r3
 80478fa:	4313      	orrs	r3, r2
 80478fc:	b2da      	uxtb	r2, r3
         | fsm_enable.fsm_enable_b.fsm12_en
 80478fe:	7b7b      	ldrb	r3, [r7, #13]
 8047900:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8047904:	b2db      	uxtb	r3, r3
 8047906:	4313      	orrs	r3, r2
 8047908:	b2da      	uxtb	r2, r3
         | fsm_enable.fsm_enable_b.fsm13_en
 804790a:	7b7b      	ldrb	r3, [r7, #13]
 804790c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8047910:	b2db      	uxtb	r3, r3
 8047912:	4313      	orrs	r3, r2
 8047914:	b2da      	uxtb	r2, r3
         | fsm_enable.fsm_enable_b.fsm14_en
 8047916:	7b7b      	ldrb	r3, [r7, #13]
 8047918:	f3c3 1340 	ubfx	r3, r3, #5, #1
 804791c:	b2db      	uxtb	r3, r3
 804791e:	4313      	orrs	r3, r2
 8047920:	b2da      	uxtb	r2, r3
         | fsm_enable.fsm_enable_b.fsm15_en
 8047922:	7b7b      	ldrb	r3, [r7, #13]
 8047924:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8047928:	b2db      	uxtb	r3, r3
 804792a:	4313      	orrs	r3, r2
 804792c:	b2da      	uxtb	r2, r3
         | fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE) {
 804792e:	7b7b      	ldrb	r3, [r7, #13]
 8047930:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8047934:	b2db      	uxtb	r3, r3
 8047936:	4313      	orrs	r3, r2
 8047938:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en | fsm_enable.fsm_enable_a.fsm2_en
 804793a:	2b01      	cmp	r3, #1
 804793c:	d163      	bne.n	8047a06 <lsm6dso_gy_data_rate_set+0x1ae>
      ret = lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 804793e:	f107 030b 	add.w	r3, r7, #11
 8047942:	4619      	mov	r1, r3
 8047944:	6878      	ldr	r0, [r7, #4]
 8047946:	f000 fabf 	bl	8047ec8 <lsm6dso_fsm_data_rate_get>
 804794a:	6138      	str	r0, [r7, #16]

      if (ret == 0) {
 804794c:	693b      	ldr	r3, [r7, #16]
 804794e:	2b00      	cmp	r3, #0
 8047950:	d159      	bne.n	8047a06 <lsm6dso_gy_data_rate_set+0x1ae>
        switch (fsm_odr) {
 8047952:	7afb      	ldrb	r3, [r7, #11]
 8047954:	2b03      	cmp	r3, #3
 8047956:	d853      	bhi.n	8047a00 <lsm6dso_gy_data_rate_set+0x1a8>
 8047958:	a201      	add	r2, pc, #4	; (adr r2, 8047960 <lsm6dso_gy_data_rate_set+0x108>)
 804795a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804795e:	bf00      	nop
 8047960:	08047971 	.word	0x08047971
 8047964:	08047983 	.word	0x08047983
 8047968:	080479a1 	.word	0x080479a1
 804796c:	080479cb 	.word	0x080479cb
        case LSM6DSO_ODR_FSM_12Hz5:
          if (val == LSM6DSO_GY_ODR_OFF) {
 8047970:	78fb      	ldrb	r3, [r7, #3]
 8047972:	2b00      	cmp	r3, #0
 8047974:	d102      	bne.n	804797c <lsm6dso_gy_data_rate_set+0x124>
            odr_gy = LSM6DSO_GY_ODR_12Hz5;
 8047976:	2301      	movs	r3, #1
 8047978:	75fb      	strb	r3, [r7, #23]

          else {
            odr_gy = val;
          }

          break;
 804797a:	e045      	b.n	8047a08 <lsm6dso_gy_data_rate_set+0x1b0>
            odr_gy = val;
 804797c:	78fb      	ldrb	r3, [r7, #3]
 804797e:	75fb      	strb	r3, [r7, #23]
          break;
 8047980:	e042      	b.n	8047a08 <lsm6dso_gy_data_rate_set+0x1b0>

        case LSM6DSO_ODR_FSM_26Hz:
          if (val == LSM6DSO_GY_ODR_OFF) {
 8047982:	78fb      	ldrb	r3, [r7, #3]
 8047984:	2b00      	cmp	r3, #0
 8047986:	d102      	bne.n	804798e <lsm6dso_gy_data_rate_set+0x136>
            odr_gy = LSM6DSO_GY_ODR_26Hz;
 8047988:	2302      	movs	r3, #2
 804798a:	75fb      	strb	r3, [r7, #23]

          else {
            odr_gy = val;
          }

          break;
 804798c:	e03c      	b.n	8047a08 <lsm6dso_gy_data_rate_set+0x1b0>
          else if (val == LSM6DSO_GY_ODR_12Hz5) {
 804798e:	78fb      	ldrb	r3, [r7, #3]
 8047990:	2b01      	cmp	r3, #1
 8047992:	d102      	bne.n	804799a <lsm6dso_gy_data_rate_set+0x142>
            odr_gy = LSM6DSO_GY_ODR_26Hz;
 8047994:	2302      	movs	r3, #2
 8047996:	75fb      	strb	r3, [r7, #23]
          break;
 8047998:	e036      	b.n	8047a08 <lsm6dso_gy_data_rate_set+0x1b0>
            odr_gy = val;
 804799a:	78fb      	ldrb	r3, [r7, #3]
 804799c:	75fb      	strb	r3, [r7, #23]
          break;
 804799e:	e033      	b.n	8047a08 <lsm6dso_gy_data_rate_set+0x1b0>

        case LSM6DSO_ODR_FSM_52Hz:
          if (val == LSM6DSO_GY_ODR_OFF) {
 80479a0:	78fb      	ldrb	r3, [r7, #3]
 80479a2:	2b00      	cmp	r3, #0
 80479a4:	d102      	bne.n	80479ac <lsm6dso_gy_data_rate_set+0x154>
            odr_gy = LSM6DSO_GY_ODR_52Hz;
 80479a6:	2303      	movs	r3, #3
 80479a8:	75fb      	strb	r3, [r7, #23]

          else {
            odr_gy = val;
          }

          break;
 80479aa:	e02d      	b.n	8047a08 <lsm6dso_gy_data_rate_set+0x1b0>
          else if (val == LSM6DSO_GY_ODR_12Hz5) {
 80479ac:	78fb      	ldrb	r3, [r7, #3]
 80479ae:	2b01      	cmp	r3, #1
 80479b0:	d102      	bne.n	80479b8 <lsm6dso_gy_data_rate_set+0x160>
            odr_gy = LSM6DSO_GY_ODR_52Hz;
 80479b2:	2303      	movs	r3, #3
 80479b4:	75fb      	strb	r3, [r7, #23]
          break;
 80479b6:	e027      	b.n	8047a08 <lsm6dso_gy_data_rate_set+0x1b0>
          else if (val == LSM6DSO_GY_ODR_26Hz) {
 80479b8:	78fb      	ldrb	r3, [r7, #3]
 80479ba:	2b02      	cmp	r3, #2
 80479bc:	d102      	bne.n	80479c4 <lsm6dso_gy_data_rate_set+0x16c>
            odr_gy = LSM6DSO_GY_ODR_52Hz;
 80479be:	2303      	movs	r3, #3
 80479c0:	75fb      	strb	r3, [r7, #23]
          break;
 80479c2:	e021      	b.n	8047a08 <lsm6dso_gy_data_rate_set+0x1b0>
            odr_gy = val;
 80479c4:	78fb      	ldrb	r3, [r7, #3]
 80479c6:	75fb      	strb	r3, [r7, #23]
          break;
 80479c8:	e01e      	b.n	8047a08 <lsm6dso_gy_data_rate_set+0x1b0>

        case LSM6DSO_ODR_FSM_104Hz:
          if (val == LSM6DSO_GY_ODR_OFF) {
 80479ca:	78fb      	ldrb	r3, [r7, #3]
 80479cc:	2b00      	cmp	r3, #0
 80479ce:	d102      	bne.n	80479d6 <lsm6dso_gy_data_rate_set+0x17e>
            odr_gy = LSM6DSO_GY_ODR_104Hz;
 80479d0:	2304      	movs	r3, #4
 80479d2:	75fb      	strb	r3, [r7, #23]

          else {
            odr_gy = val;
          }

          break;
 80479d4:	e018      	b.n	8047a08 <lsm6dso_gy_data_rate_set+0x1b0>
          else if (val == LSM6DSO_GY_ODR_12Hz5) {
 80479d6:	78fb      	ldrb	r3, [r7, #3]
 80479d8:	2b01      	cmp	r3, #1
 80479da:	d102      	bne.n	80479e2 <lsm6dso_gy_data_rate_set+0x18a>
            odr_gy = LSM6DSO_GY_ODR_104Hz;
 80479dc:	2304      	movs	r3, #4
 80479de:	75fb      	strb	r3, [r7, #23]
          break;
 80479e0:	e012      	b.n	8047a08 <lsm6dso_gy_data_rate_set+0x1b0>
          else if (val == LSM6DSO_GY_ODR_26Hz) {
 80479e2:	78fb      	ldrb	r3, [r7, #3]
 80479e4:	2b02      	cmp	r3, #2
 80479e6:	d102      	bne.n	80479ee <lsm6dso_gy_data_rate_set+0x196>
            odr_gy = LSM6DSO_GY_ODR_104Hz;
 80479e8:	2304      	movs	r3, #4
 80479ea:	75fb      	strb	r3, [r7, #23]
          break;
 80479ec:	e00c      	b.n	8047a08 <lsm6dso_gy_data_rate_set+0x1b0>
          else if (val == LSM6DSO_GY_ODR_52Hz) {
 80479ee:	78fb      	ldrb	r3, [r7, #3]
 80479f0:	2b03      	cmp	r3, #3
 80479f2:	d102      	bne.n	80479fa <lsm6dso_gy_data_rate_set+0x1a2>
            odr_gy = LSM6DSO_GY_ODR_104Hz;
 80479f4:	2304      	movs	r3, #4
 80479f6:	75fb      	strb	r3, [r7, #23]
          break;
 80479f8:	e006      	b.n	8047a08 <lsm6dso_gy_data_rate_set+0x1b0>
            odr_gy = val;
 80479fa:	78fb      	ldrb	r3, [r7, #3]
 80479fc:	75fb      	strb	r3, [r7, #23]
          break;
 80479fe:	e003      	b.n	8047a08 <lsm6dso_gy_data_rate_set+0x1b0>

        default:
          odr_gy = val;
 8047a00:	78fb      	ldrb	r3, [r7, #3]
 8047a02:	75fb      	strb	r3, [r7, #23]
          break;
 8047a04:	e000      	b.n	8047a08 <lsm6dso_gy_data_rate_set+0x1b0>
        }
      }
 8047a06:	bf00      	nop
    }
  }

  if (ret == 0) {
 8047a08:	693b      	ldr	r3, [r7, #16]
 8047a0a:	2b00      	cmp	r3, #0
 8047a0c:	d107      	bne.n	8047a1e <lsm6dso_gy_data_rate_set+0x1c6>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *) & reg, 1);
 8047a0e:	f107 0208 	add.w	r2, r7, #8
 8047a12:	2301      	movs	r3, #1
 8047a14:	2111      	movs	r1, #17
 8047a16:	6878      	ldr	r0, [r7, #4]
 8047a18:	f7ff fd29 	bl	804746e <lsm6dso_read_reg>
 8047a1c:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0) {
 8047a1e:	693b      	ldr	r3, [r7, #16]
 8047a20:	2b00      	cmp	r3, #0
 8047a22:	d10f      	bne.n	8047a44 <lsm6dso_gy_data_rate_set+0x1ec>
    reg.odr_g = (uint8_t) odr_gy;
 8047a24:	7dfb      	ldrb	r3, [r7, #23]
 8047a26:	f003 030f 	and.w	r3, r3, #15
 8047a2a:	b2da      	uxtb	r2, r3
 8047a2c:	7a3b      	ldrb	r3, [r7, #8]
 8047a2e:	f362 1307 	bfi	r3, r2, #4, #4
 8047a32:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *) & reg, 1);
 8047a34:	f107 0208 	add.w	r2, r7, #8
 8047a38:	2301      	movs	r3, #1
 8047a3a:	2111      	movs	r1, #17
 8047a3c:	6878      	ldr	r0, [r7, #4]
 8047a3e:	f7ff fd2e 	bl	804749e <lsm6dso_write_reg>
 8047a42:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8047a44:	693b      	ldr	r3, [r7, #16]
}
 8047a46:	4618      	mov	r0, r3
 8047a48:	3718      	adds	r7, #24
 8047a4a:	46bd      	mov	sp, r7
 8047a4c:	bd80      	pop	{r7, pc}
 8047a4e:	bf00      	nop

08047a50 <lsm6dso_block_data_update_set>:
 * @param  ctx      read / write interface definitions
 * @param  val      change the values of bdu in reg CTRL3_C
 *
 */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t * ctx, uint8_t val)
{
 8047a50:	b580      	push	{r7, lr}
 8047a52:	b084      	sub	sp, #16
 8047a54:	af00      	add	r7, sp, #0
 8047a56:	6078      	str	r0, [r7, #4]
 8047a58:	460b      	mov	r3, r1
 8047a5a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *) & reg, 1);
 8047a5c:	f107 0208 	add.w	r2, r7, #8
 8047a60:	2301      	movs	r3, #1
 8047a62:	2112      	movs	r1, #18
 8047a64:	6878      	ldr	r0, [r7, #4]
 8047a66:	f7ff fd02 	bl	804746e <lsm6dso_read_reg>
 8047a6a:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8047a6c:	68fb      	ldr	r3, [r7, #12]
 8047a6e:	2b00      	cmp	r3, #0
 8047a70:	d10f      	bne.n	8047a92 <lsm6dso_block_data_update_set+0x42>
    reg.bdu = val;
 8047a72:	78fb      	ldrb	r3, [r7, #3]
 8047a74:	f003 0301 	and.w	r3, r3, #1
 8047a78:	b2da      	uxtb	r2, r3
 8047a7a:	7a3b      	ldrb	r3, [r7, #8]
 8047a7c:	f362 1386 	bfi	r3, r2, #6, #1
 8047a80:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *) & reg, 1);
 8047a82:	f107 0208 	add.w	r2, r7, #8
 8047a86:	2301      	movs	r3, #1
 8047a88:	2112      	movs	r1, #18
 8047a8a:	6878      	ldr	r0, [r7, #4]
 8047a8c:	f7ff fd07 	bl	804749e <lsm6dso_write_reg>
 8047a90:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8047a92:	68fb      	ldr	r3, [r7, #12]
}
 8047a94:	4618      	mov	r0, r3
 8047a96:	3710      	adds	r7, #16
 8047a98:	46bd      	mov	sp, r7
 8047a9a:	bd80      	pop	{r7, pc}

08047a9c <lsm6dso_status_reg_get>:
 * @param  ctx      read / write interface definitions
 * @param  val      register STATUS_REG
 *
 */
int32_t lsm6dso_status_reg_get(stmdev_ctx_t * ctx, lsm6dso_status_reg_t * val)
{
 8047a9c:	b580      	push	{r7, lr}
 8047a9e:	b084      	sub	sp, #16
 8047aa0:	af00      	add	r7, sp, #0
 8047aa2:	6078      	str	r0, [r7, #4]
 8047aa4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_STATUS_REG, (uint8_t *) val, 1);
 8047aa6:	2301      	movs	r3, #1
 8047aa8:	683a      	ldr	r2, [r7, #0]
 8047aaa:	211e      	movs	r1, #30
 8047aac:	6878      	ldr	r0, [r7, #4]
 8047aae:	f7ff fcde 	bl	804746e <lsm6dso_read_reg>
 8047ab2:	60f8      	str	r0, [r7, #12]
  return ret;
 8047ab4:	68fb      	ldr	r3, [r7, #12]
}
 8047ab6:	4618      	mov	r0, r3
 8047ab8:	3710      	adds	r7, #16
 8047aba:	46bd      	mov	sp, r7
 8047abc:	bd80      	pop	{r7, pc}

08047abe <lsm6dso_xl_flag_data_ready_get>:
 * @param  ctx      read / write interface definitions
 * @param  val      change the values of xlda in reg STATUS_REG
 *
 */
int32_t lsm6dso_xl_flag_data_ready_get(stmdev_ctx_t * ctx, uint8_t * val)
{
 8047abe:	b580      	push	{r7, lr}
 8047ac0:	b084      	sub	sp, #16
 8047ac2:	af00      	add	r7, sp, #0
 8047ac4:	6078      	str	r0, [r7, #4]
 8047ac6:	6039      	str	r1, [r7, #0]
  lsm6dso_status_reg_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_STATUS_REG, (uint8_t *) & reg, 1);
 8047ac8:	f107 0208 	add.w	r2, r7, #8
 8047acc:	2301      	movs	r3, #1
 8047ace:	211e      	movs	r1, #30
 8047ad0:	6878      	ldr	r0, [r7, #4]
 8047ad2:	f7ff fccc 	bl	804746e <lsm6dso_read_reg>
 8047ad6:	60f8      	str	r0, [r7, #12]
  *val = reg.xlda;
 8047ad8:	7a3b      	ldrb	r3, [r7, #8]
 8047ada:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8047ade:	b2db      	uxtb	r3, r3
 8047ae0:	461a      	mov	r2, r3
 8047ae2:	683b      	ldr	r3, [r7, #0]
 8047ae4:	701a      	strb	r2, [r3, #0]
  return ret;
 8047ae6:	68fb      	ldr	r3, [r7, #12]
}
 8047ae8:	4618      	mov	r0, r3
 8047aea:	3710      	adds	r7, #16
 8047aec:	46bd      	mov	sp, r7
 8047aee:	bd80      	pop	{r7, pc}

08047af0 <lsm6dso_gy_flag_data_ready_get>:
 * @param  ctx      read / write interface definitions
 * @param  val      change the values of gda in reg STATUS_REG
 *
 */
int32_t lsm6dso_gy_flag_data_ready_get(stmdev_ctx_t * ctx, uint8_t * val)
{
 8047af0:	b580      	push	{r7, lr}
 8047af2:	b084      	sub	sp, #16
 8047af4:	af00      	add	r7, sp, #0
 8047af6:	6078      	str	r0, [r7, #4]
 8047af8:	6039      	str	r1, [r7, #0]
  lsm6dso_status_reg_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_STATUS_REG, (uint8_t *) & reg, 1);
 8047afa:	f107 0208 	add.w	r2, r7, #8
 8047afe:	2301      	movs	r3, #1
 8047b00:	211e      	movs	r1, #30
 8047b02:	6878      	ldr	r0, [r7, #4]
 8047b04:	f7ff fcb3 	bl	804746e <lsm6dso_read_reg>
 8047b08:	60f8      	str	r0, [r7, #12]
  *val = reg.gda;
 8047b0a:	7a3b      	ldrb	r3, [r7, #8]
 8047b0c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8047b10:	b2db      	uxtb	r3, r3
 8047b12:	461a      	mov	r2, r3
 8047b14:	683b      	ldr	r3, [r7, #0]
 8047b16:	701a      	strb	r2, [r3, #0]
  return ret;
 8047b18:	68fb      	ldr	r3, [r7, #12]
}
 8047b1a:	4618      	mov	r0, r3
 8047b1c:	3710      	adds	r7, #16
 8047b1e:	46bd      	mov	sp, r7
 8047b20:	bd80      	pop	{r7, pc}

08047b22 <lsm6dso_temp_flag_data_ready_get>:
 * @param  ctx      read / write interface definitions
 * @param  val      change the values of tda in reg STATUS_REG
 *
 */
int32_t lsm6dso_temp_flag_data_ready_get(stmdev_ctx_t * ctx, uint8_t * val)
{
 8047b22:	b580      	push	{r7, lr}
 8047b24:	b084      	sub	sp, #16
 8047b26:	af00      	add	r7, sp, #0
 8047b28:	6078      	str	r0, [r7, #4]
 8047b2a:	6039      	str	r1, [r7, #0]
  lsm6dso_status_reg_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_STATUS_REG, (uint8_t *) & reg, 1);
 8047b2c:	f107 0208 	add.w	r2, r7, #8
 8047b30:	2301      	movs	r3, #1
 8047b32:	211e      	movs	r1, #30
 8047b34:	6878      	ldr	r0, [r7, #4]
 8047b36:	f7ff fc9a 	bl	804746e <lsm6dso_read_reg>
 8047b3a:	60f8      	str	r0, [r7, #12]
  *val = reg.tda;
 8047b3c:	7a3b      	ldrb	r3, [r7, #8]
 8047b3e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8047b42:	b2db      	uxtb	r3, r3
 8047b44:	461a      	mov	r2, r3
 8047b46:	683b      	ldr	r3, [r7, #0]
 8047b48:	701a      	strb	r2, [r3, #0]
  return ret;
 8047b4a:	68fb      	ldr	r3, [r7, #12]
}
 8047b4c:	4618      	mov	r0, r3
 8047b4e:	3710      	adds	r7, #16
 8047b50:	46bd      	mov	sp, r7
 8047b52:	bd80      	pop	{r7, pc}

08047b54 <lsm6dso_temperature_raw_get>:
 * @param  ctx      read / write interface definitions
 * @param  buff     buffer that stores data read
 *
 */
int32_t lsm6dso_temperature_raw_get(stmdev_ctx_t * ctx, uint8_t * buff)
{
 8047b54:	b580      	push	{r7, lr}
 8047b56:	b084      	sub	sp, #16
 8047b58:	af00      	add	r7, sp, #0
 8047b5a:	6078      	str	r0, [r7, #4]
 8047b5c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUT_TEMP_L, buff, 2);
 8047b5e:	2302      	movs	r3, #2
 8047b60:	683a      	ldr	r2, [r7, #0]
 8047b62:	2120      	movs	r1, #32
 8047b64:	6878      	ldr	r0, [r7, #4]
 8047b66:	f7ff fc82 	bl	804746e <lsm6dso_read_reg>
 8047b6a:	60f8      	str	r0, [r7, #12]
  return ret;
 8047b6c:	68fb      	ldr	r3, [r7, #12]
}
 8047b6e:	4618      	mov	r0, r3
 8047b70:	3710      	adds	r7, #16
 8047b72:	46bd      	mov	sp, r7
 8047b74:	bd80      	pop	{r7, pc}

08047b76 <lsm6dso_angular_rate_raw_get>:
 * @param  ctx      read / write interface definitions
 * @param  buff     buffer that stores data read
 *
 */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t * ctx, uint8_t * buff)
{
 8047b76:	b580      	push	{r7, lr}
 8047b78:	b084      	sub	sp, #16
 8047b7a:	af00      	add	r7, sp, #0
 8047b7c:	6078      	str	r0, [r7, #4]
 8047b7e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 8047b80:	2306      	movs	r3, #6
 8047b82:	683a      	ldr	r2, [r7, #0]
 8047b84:	2122      	movs	r1, #34	; 0x22
 8047b86:	6878      	ldr	r0, [r7, #4]
 8047b88:	f7ff fc71 	bl	804746e <lsm6dso_read_reg>
 8047b8c:	60f8      	str	r0, [r7, #12]
  return ret;
 8047b8e:	68fb      	ldr	r3, [r7, #12]
}
 8047b90:	4618      	mov	r0, r3
 8047b92:	3710      	adds	r7, #16
 8047b94:	46bd      	mov	sp, r7
 8047b96:	bd80      	pop	{r7, pc}

08047b98 <lsm6dso_acceleration_raw_get>:
 * @param  ctx      read / write interface definitions
 * @param  buff     buffer that stores data read
 *
 */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t * ctx, uint8_t * buff)
{
 8047b98:	b580      	push	{r7, lr}
 8047b9a:	b084      	sub	sp, #16
 8047b9c:	af00      	add	r7, sp, #0
 8047b9e:	6078      	str	r0, [r7, #4]
 8047ba0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 8047ba2:	2306      	movs	r3, #6
 8047ba4:	683a      	ldr	r2, [r7, #0]
 8047ba6:	2128      	movs	r1, #40	; 0x28
 8047ba8:	6878      	ldr	r0, [r7, #4]
 8047baa:	f7ff fc60 	bl	804746e <lsm6dso_read_reg>
 8047bae:	60f8      	str	r0, [r7, #12]
  return ret;
 8047bb0:	68fb      	ldr	r3, [r7, #12]
}
 8047bb2:	4618      	mov	r0, r3
 8047bb4:	3710      	adds	r7, #16
 8047bb6:	46bd      	mov	sp, r7
 8047bb8:	bd80      	pop	{r7, pc}

08047bba <lsm6dso_mem_bank_set>:
 * @param  val      change the values of reg_access in
 *                               reg FUNC_CFG_ACCESS
 *
 */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t * ctx, lsm6dso_reg_access_t val)
{
 8047bba:	b580      	push	{r7, lr}
 8047bbc:	b084      	sub	sp, #16
 8047bbe:	af00      	add	r7, sp, #0
 8047bc0:	6078      	str	r0, [r7, #4]
 8047bc2:	460b      	mov	r3, r1
 8047bc4:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *) & reg, 1);
 8047bc6:	f107 0208 	add.w	r2, r7, #8
 8047bca:	2301      	movs	r3, #1
 8047bcc:	2101      	movs	r1, #1
 8047bce:	6878      	ldr	r0, [r7, #4]
 8047bd0:	f7ff fc4d 	bl	804746e <lsm6dso_read_reg>
 8047bd4:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8047bd6:	68fb      	ldr	r3, [r7, #12]
 8047bd8:	2b00      	cmp	r3, #0
 8047bda:	d10f      	bne.n	8047bfc <lsm6dso_mem_bank_set+0x42>
    reg.reg_access = (uint8_t) val;
 8047bdc:	78fb      	ldrb	r3, [r7, #3]
 8047bde:	f003 0303 	and.w	r3, r3, #3
 8047be2:	b2da      	uxtb	r2, r3
 8047be4:	7a3b      	ldrb	r3, [r7, #8]
 8047be6:	f362 1387 	bfi	r3, r2, #6, #2
 8047bea:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *) & reg, 1);
 8047bec:	f107 0208 	add.w	r2, r7, #8
 8047bf0:	2301      	movs	r3, #1
 8047bf2:	2101      	movs	r1, #1
 8047bf4:	6878      	ldr	r0, [r7, #4]
 8047bf6:	f7ff fc52 	bl	804749e <lsm6dso_write_reg>
 8047bfa:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8047bfc:	68fb      	ldr	r3, [r7, #12]
}
 8047bfe:	4618      	mov	r0, r3
 8047c00:	3710      	adds	r7, #16
 8047c02:	46bd      	mov	sp, r7
 8047c04:	bd80      	pop	{r7, pc}

08047c06 <lsm6dso_device_id_get>:
 * @param  ctx      read / write interface definitions
 * @param  buff     buffer that stores data read
 *
 */
int32_t lsm6dso_device_id_get(stmdev_ctx_t * ctx, uint8_t * buff)
{
 8047c06:	b580      	push	{r7, lr}
 8047c08:	b084      	sub	sp, #16
 8047c0a:	af00      	add	r7, sp, #0
 8047c0c:	6078      	str	r0, [r7, #4]
 8047c0e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 8047c10:	2301      	movs	r3, #1
 8047c12:	683a      	ldr	r2, [r7, #0]
 8047c14:	210f      	movs	r1, #15
 8047c16:	6878      	ldr	r0, [r7, #4]
 8047c18:	f7ff fc29 	bl	804746e <lsm6dso_read_reg>
 8047c1c:	60f8      	str	r0, [r7, #12]
  return ret;
 8047c1e:	68fb      	ldr	r3, [r7, #12]
}
 8047c20:	4618      	mov	r0, r3
 8047c22:	3710      	adds	r7, #16
 8047c24:	46bd      	mov	sp, r7
 8047c26:	bd80      	pop	{r7, pc}

08047c28 <lsm6dso_reset_set>:
 * @param  ctx      read / write interface definitions
 * @param  val      change the values of sw_reset in reg CTRL3_C
 *
 */
int32_t lsm6dso_reset_set(stmdev_ctx_t * ctx, uint8_t val)
{
 8047c28:	b580      	push	{r7, lr}
 8047c2a:	b084      	sub	sp, #16
 8047c2c:	af00      	add	r7, sp, #0
 8047c2e:	6078      	str	r0, [r7, #4]
 8047c30:	460b      	mov	r3, r1
 8047c32:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *) & reg, 1);
 8047c34:	f107 0208 	add.w	r2, r7, #8
 8047c38:	2301      	movs	r3, #1
 8047c3a:	2112      	movs	r1, #18
 8047c3c:	6878      	ldr	r0, [r7, #4]
 8047c3e:	f7ff fc16 	bl	804746e <lsm6dso_read_reg>
 8047c42:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8047c44:	68fb      	ldr	r3, [r7, #12]
 8047c46:	2b00      	cmp	r3, #0
 8047c48:	d10f      	bne.n	8047c6a <lsm6dso_reset_set+0x42>
    reg.sw_reset = val;
 8047c4a:	78fb      	ldrb	r3, [r7, #3]
 8047c4c:	f003 0301 	and.w	r3, r3, #1
 8047c50:	b2da      	uxtb	r2, r3
 8047c52:	7a3b      	ldrb	r3, [r7, #8]
 8047c54:	f362 0300 	bfi	r3, r2, #0, #1
 8047c58:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *) & reg, 1);
 8047c5a:	f107 0208 	add.w	r2, r7, #8
 8047c5e:	2301      	movs	r3, #1
 8047c60:	2112      	movs	r1, #18
 8047c62:	6878      	ldr	r0, [r7, #4]
 8047c64:	f7ff fc1b 	bl	804749e <lsm6dso_write_reg>
 8047c68:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8047c6a:	68fb      	ldr	r3, [r7, #12]
}
 8047c6c:	4618      	mov	r0, r3
 8047c6e:	3710      	adds	r7, #16
 8047c70:	46bd      	mov	sp, r7
 8047c72:	bd80      	pop	{r7, pc}

08047c74 <lsm6dso_reset_get>:
 * @param  ctx      read / write interface definitions
 * @param  val      change the values of sw_reset in reg CTRL3_C
 *
 */
int32_t lsm6dso_reset_get(stmdev_ctx_t * ctx, uint8_t * val)
{
 8047c74:	b580      	push	{r7, lr}
 8047c76:	b084      	sub	sp, #16
 8047c78:	af00      	add	r7, sp, #0
 8047c7a:	6078      	str	r0, [r7, #4]
 8047c7c:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *) & reg, 1);
 8047c7e:	f107 0208 	add.w	r2, r7, #8
 8047c82:	2301      	movs	r3, #1
 8047c84:	2112      	movs	r1, #18
 8047c86:	6878      	ldr	r0, [r7, #4]
 8047c88:	f7ff fbf1 	bl	804746e <lsm6dso_read_reg>
 8047c8c:	60f8      	str	r0, [r7, #12]
  *val = reg.sw_reset;
 8047c8e:	7a3b      	ldrb	r3, [r7, #8]
 8047c90:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8047c94:	b2db      	uxtb	r3, r3
 8047c96:	461a      	mov	r2, r3
 8047c98:	683b      	ldr	r3, [r7, #0]
 8047c9a:	701a      	strb	r2, [r3, #0]
  return ret;
 8047c9c:	68fb      	ldr	r3, [r7, #12]
}
 8047c9e:	4618      	mov	r0, r3
 8047ca0:	3710      	adds	r7, #16
 8047ca2:	46bd      	mov	sp, r7
 8047ca4:	bd80      	pop	{r7, pc}

08047ca6 <lsm6dso_xl_self_test_set>:
 * @param  ctx      read / write interface definitions
 * @param  val      change the values of st_xl in reg CTRL5_C
 *
 */
int32_t lsm6dso_xl_self_test_set(stmdev_ctx_t * ctx, lsm6dso_st_xl_t val)
{
 8047ca6:	b580      	push	{r7, lr}
 8047ca8:	b084      	sub	sp, #16
 8047caa:	af00      	add	r7, sp, #0
 8047cac:	6078      	str	r0, [r7, #4]
 8047cae:	460b      	mov	r3, r1
 8047cb0:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl5_c_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL5_C, (uint8_t *) & reg, 1);
 8047cb2:	f107 0208 	add.w	r2, r7, #8
 8047cb6:	2301      	movs	r3, #1
 8047cb8:	2114      	movs	r1, #20
 8047cba:	6878      	ldr	r0, [r7, #4]
 8047cbc:	f7ff fbd7 	bl	804746e <lsm6dso_read_reg>
 8047cc0:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8047cc2:	68fb      	ldr	r3, [r7, #12]
 8047cc4:	2b00      	cmp	r3, #0
 8047cc6:	d10f      	bne.n	8047ce8 <lsm6dso_xl_self_test_set+0x42>
    reg.st_xl = (uint8_t) val;
 8047cc8:	78fb      	ldrb	r3, [r7, #3]
 8047cca:	f003 0303 	and.w	r3, r3, #3
 8047cce:	b2da      	uxtb	r2, r3
 8047cd0:	7a3b      	ldrb	r3, [r7, #8]
 8047cd2:	f362 0301 	bfi	r3, r2, #0, #2
 8047cd6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL5_C, (uint8_t *) & reg, 1);
 8047cd8:	f107 0208 	add.w	r2, r7, #8
 8047cdc:	2301      	movs	r3, #1
 8047cde:	2114      	movs	r1, #20
 8047ce0:	6878      	ldr	r0, [r7, #4]
 8047ce2:	f7ff fbdc 	bl	804749e <lsm6dso_write_reg>
 8047ce6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8047ce8:	68fb      	ldr	r3, [r7, #12]
}
 8047cea:	4618      	mov	r0, r3
 8047cec:	3710      	adds	r7, #16
 8047cee:	46bd      	mov	sp, r7
 8047cf0:	bd80      	pop	{r7, pc}

08047cf2 <lsm6dso_gy_self_test_set>:
 * @param  ctx      read / write interface definitions
 * @param  val      change the values of st_g in reg CTRL5_C
 *
 */
int32_t lsm6dso_gy_self_test_set(stmdev_ctx_t * ctx, lsm6dso_st_g_t val)
{
 8047cf2:	b580      	push	{r7, lr}
 8047cf4:	b084      	sub	sp, #16
 8047cf6:	af00      	add	r7, sp, #0
 8047cf8:	6078      	str	r0, [r7, #4]
 8047cfa:	460b      	mov	r3, r1
 8047cfc:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl5_c_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL5_C, (uint8_t *) & reg, 1);
 8047cfe:	f107 0208 	add.w	r2, r7, #8
 8047d02:	2301      	movs	r3, #1
 8047d04:	2114      	movs	r1, #20
 8047d06:	6878      	ldr	r0, [r7, #4]
 8047d08:	f7ff fbb1 	bl	804746e <lsm6dso_read_reg>
 8047d0c:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8047d0e:	68fb      	ldr	r3, [r7, #12]
 8047d10:	2b00      	cmp	r3, #0
 8047d12:	d10f      	bne.n	8047d34 <lsm6dso_gy_self_test_set+0x42>
    reg.st_g = (uint8_t) val;
 8047d14:	78fb      	ldrb	r3, [r7, #3]
 8047d16:	f003 0303 	and.w	r3, r3, #3
 8047d1a:	b2da      	uxtb	r2, r3
 8047d1c:	7a3b      	ldrb	r3, [r7, #8]
 8047d1e:	f362 0383 	bfi	r3, r2, #2, #2
 8047d22:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL5_C, (uint8_t *) & reg, 1);
 8047d24:	f107 0208 	add.w	r2, r7, #8
 8047d28:	2301      	movs	r3, #1
 8047d2a:	2114      	movs	r1, #20
 8047d2c:	6878      	ldr	r0, [r7, #4]
 8047d2e:	f7ff fbb6 	bl	804749e <lsm6dso_write_reg>
 8047d32:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8047d34:	68fb      	ldr	r3, [r7, #12]
}
 8047d36:	4618      	mov	r0, r3
 8047d38:	3710      	adds	r7, #16
 8047d3a:	46bd      	mov	sp, r7
 8047d3c:	bd80      	pop	{r7, pc}

08047d3e <lsm6dso_xl_filter_lp2_set>:
 * @param  ctx      read / write interface definitions
 * @param  val      change the values of lpf2_xl_en in reg CTRL1_XL
 *
 */
int32_t lsm6dso_xl_filter_lp2_set(stmdev_ctx_t * ctx, uint8_t val)
{
 8047d3e:	b580      	push	{r7, lr}
 8047d40:	b084      	sub	sp, #16
 8047d42:	af00      	add	r7, sp, #0
 8047d44:	6078      	str	r0, [r7, #4]
 8047d46:	460b      	mov	r3, r1
 8047d48:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *) & reg, 1);
 8047d4a:	f107 0208 	add.w	r2, r7, #8
 8047d4e:	2301      	movs	r3, #1
 8047d50:	2110      	movs	r1, #16
 8047d52:	6878      	ldr	r0, [r7, #4]
 8047d54:	f7ff fb8b 	bl	804746e <lsm6dso_read_reg>
 8047d58:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8047d5a:	68fb      	ldr	r3, [r7, #12]
 8047d5c:	2b00      	cmp	r3, #0
 8047d5e:	d10f      	bne.n	8047d80 <lsm6dso_xl_filter_lp2_set+0x42>
    reg.lpf2_xl_en = val;
 8047d60:	78fb      	ldrb	r3, [r7, #3]
 8047d62:	f003 0301 	and.w	r3, r3, #1
 8047d66:	b2da      	uxtb	r2, r3
 8047d68:	7a3b      	ldrb	r3, [r7, #8]
 8047d6a:	f362 0341 	bfi	r3, r2, #1, #1
 8047d6e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *) & reg, 1);
 8047d70:	f107 0208 	add.w	r2, r7, #8
 8047d74:	2301      	movs	r3, #1
 8047d76:	2110      	movs	r1, #16
 8047d78:	6878      	ldr	r0, [r7, #4]
 8047d7a:	f7ff fb90 	bl	804749e <lsm6dso_write_reg>
 8047d7e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8047d80:	68fb      	ldr	r3, [r7, #12]
}
 8047d82:	4618      	mov	r0, r3
 8047d84:	3710      	adds	r7, #16
 8047d86:	46bd      	mov	sp, r7
 8047d88:	bd80      	pop	{r7, pc}

08047d8a <lsm6dso_xl_hp_path_on_out_set>:
 *                                   in reg CTRL8_XL
 *
 */
int32_t lsm6dso_xl_hp_path_on_out_set(stmdev_ctx_t * ctx,
                                      lsm6dso_hp_slope_xl_en_t val)
{
 8047d8a:	b580      	push	{r7, lr}
 8047d8c:	b084      	sub	sp, #16
 8047d8e:	af00      	add	r7, sp, #0
 8047d90:	6078      	str	r0, [r7, #4]
 8047d92:	460b      	mov	r3, r1
 8047d94:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl8_xl_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *) & reg, 1);
 8047d96:	f107 0208 	add.w	r2, r7, #8
 8047d9a:	2301      	movs	r3, #1
 8047d9c:	2117      	movs	r1, #23
 8047d9e:	6878      	ldr	r0, [r7, #4]
 8047da0:	f7ff fb65 	bl	804746e <lsm6dso_read_reg>
 8047da4:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8047da6:	68fb      	ldr	r3, [r7, #12]
 8047da8:	2b00      	cmp	r3, #0
 8047daa:	d121      	bne.n	8047df0 <lsm6dso_xl_hp_path_on_out_set+0x66>
    reg.hp_slope_xl_en = ((uint8_t) val & 0x10U) >> 4;
 8047dac:	78fb      	ldrb	r3, [r7, #3]
 8047dae:	091b      	lsrs	r3, r3, #4
 8047db0:	f003 0301 	and.w	r3, r3, #1
 8047db4:	b2da      	uxtb	r2, r3
 8047db6:	7a3b      	ldrb	r3, [r7, #8]
 8047db8:	f362 0382 	bfi	r3, r2, #2, #1
 8047dbc:	723b      	strb	r3, [r7, #8]
    reg.hp_ref_mode_xl = ((uint8_t) val & 0x20U) >> 5;
 8047dbe:	78fb      	ldrb	r3, [r7, #3]
 8047dc0:	095b      	lsrs	r3, r3, #5
 8047dc2:	f003 0301 	and.w	r3, r3, #1
 8047dc6:	b2da      	uxtb	r2, r3
 8047dc8:	7a3b      	ldrb	r3, [r7, #8]
 8047dca:	f362 1304 	bfi	r3, r2, #4, #1
 8047dce:	723b      	strb	r3, [r7, #8]
    reg.hpcf_xl = (uint8_t) val & 0x07U;
 8047dd0:	78fb      	ldrb	r3, [r7, #3]
 8047dd2:	f003 0307 	and.w	r3, r3, #7
 8047dd6:	b2da      	uxtb	r2, r3
 8047dd8:	7a3b      	ldrb	r3, [r7, #8]
 8047dda:	f362 1347 	bfi	r3, r2, #5, #3
 8047dde:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *) & reg, 1);
 8047de0:	f107 0208 	add.w	r2, r7, #8
 8047de4:	2301      	movs	r3, #1
 8047de6:	2117      	movs	r1, #23
 8047de8:	6878      	ldr	r0, [r7, #4]
 8047dea:	f7ff fb58 	bl	804749e <lsm6dso_write_reg>
 8047dee:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8047df0:	68fb      	ldr	r3, [r7, #12]
}
 8047df2:	4618      	mov	r0, r3
 8047df4:	3710      	adds	r7, #16
 8047df6:	46bd      	mov	sp, r7
 8047df8:	bd80      	pop	{r7, pc}

08047dfa <lsm6dso_i3c_disable_set>:
 * @param  val      change the values of i3c_disable
 *                                    in reg CTRL9_XL
 *
 */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t * ctx, lsm6dso_i3c_disable_t val)
{
 8047dfa:	b580      	push	{r7, lr}
 8047dfc:	b086      	sub	sp, #24
 8047dfe:	af00      	add	r7, sp, #0
 8047e00:	6078      	str	r0, [r7, #4]
 8047e02:	460b      	mov	r3, r1
 8047e04:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *) & ctrl9_xl, 1);
 8047e06:	f107 020c 	add.w	r2, r7, #12
 8047e0a:	2301      	movs	r3, #1
 8047e0c:	2118      	movs	r1, #24
 8047e0e:	6878      	ldr	r0, [r7, #4]
 8047e10:	f7ff fb2d 	bl	804746e <lsm6dso_read_reg>
 8047e14:	6178      	str	r0, [r7, #20]

  if (ret == 0) {
 8047e16:	697b      	ldr	r3, [r7, #20]
 8047e18:	2b00      	cmp	r3, #0
 8047e1a:	d111      	bne.n	8047e40 <lsm6dso_i3c_disable_set+0x46>
    ctrl9_xl.i3c_disable = ((uint8_t) val & 0x80U) >> 7;
 8047e1c:	78fb      	ldrb	r3, [r7, #3]
 8047e1e:	09db      	lsrs	r3, r3, #7
 8047e20:	b2db      	uxtb	r3, r3
 8047e22:	f003 0301 	and.w	r3, r3, #1
 8047e26:	b2da      	uxtb	r2, r3
 8047e28:	7b3b      	ldrb	r3, [r7, #12]
 8047e2a:	f362 0341 	bfi	r3, r2, #1, #1
 8047e2e:	733b      	strb	r3, [r7, #12]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *) & ctrl9_xl, 1);
 8047e30:	f107 020c 	add.w	r2, r7, #12
 8047e34:	2301      	movs	r3, #1
 8047e36:	2118      	movs	r1, #24
 8047e38:	6878      	ldr	r0, [r7, #4]
 8047e3a:	f7ff fb30 	bl	804749e <lsm6dso_write_reg>
 8047e3e:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0) {
 8047e40:	697b      	ldr	r3, [r7, #20]
 8047e42:	2b00      	cmp	r3, #0
 8047e44:	d107      	bne.n	8047e56 <lsm6dso_i3c_disable_set+0x5c>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 8047e46:	f107 0210 	add.w	r2, r7, #16
 8047e4a:	2301      	movs	r3, #1
 8047e4c:	2162      	movs	r1, #98	; 0x62
 8047e4e:	6878      	ldr	r0, [r7, #4]
 8047e50:	f7ff fb0d 	bl	804746e <lsm6dso_read_reg>
 8047e54:	6178      	str	r0, [r7, #20]
                           (uint8_t *) & i3c_bus_avb, 1);
  }

  if (ret == 0) {
 8047e56:	697b      	ldr	r3, [r7, #20]
 8047e58:	2b00      	cmp	r3, #0
 8047e5a:	d10f      	bne.n	8047e7c <lsm6dso_i3c_disable_set+0x82>
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t) val & 0x03U;
 8047e5c:	78fb      	ldrb	r3, [r7, #3]
 8047e5e:	f003 0303 	and.w	r3, r3, #3
 8047e62:	b2da      	uxtb	r2, r3
 8047e64:	7c3b      	ldrb	r3, [r7, #16]
 8047e66:	f362 03c4 	bfi	r3, r2, #3, #2
 8047e6a:	743b      	strb	r3, [r7, #16]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 8047e6c:	f107 0210 	add.w	r2, r7, #16
 8047e70:	2301      	movs	r3, #1
 8047e72:	2162      	movs	r1, #98	; 0x62
 8047e74:	6878      	ldr	r0, [r7, #4]
 8047e76:	f7ff fb12 	bl	804749e <lsm6dso_write_reg>
 8047e7a:	6178      	str	r0, [r7, #20]
                            (uint8_t *) & i3c_bus_avb, 1);
  }

  return ret;
 8047e7c:	697b      	ldr	r3, [r7, #20]
}
 8047e7e:	4618      	mov	r0, r3
 8047e80:	3718      	adds	r7, #24
 8047e82:	46bd      	mov	sp, r7
 8047e84:	bd80      	pop	{r7, pc}

08047e86 <lsm6dso_fsm_enable_get>:
 * @param  val      union of registers from FSM_ENABLE_A to FSM_ENABLE_B
 *
 */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t * ctx,
                               lsm6dso_emb_fsm_enable_t * val)
{
 8047e86:	b580      	push	{r7, lr}
 8047e88:	b084      	sub	sp, #16
 8047e8a:	af00      	add	r7, sp, #0
 8047e8c:	6078      	str	r0, [r7, #4]
 8047e8e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8047e90:	2102      	movs	r1, #2
 8047e92:	6878      	ldr	r0, [r7, #4]
 8047e94:	f7ff fe91 	bl	8047bba <lsm6dso_mem_bank_set>
 8047e98:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8047e9a:	68fb      	ldr	r3, [r7, #12]
 8047e9c:	2b00      	cmp	r3, #0
 8047e9e:	d106      	bne.n	8047eae <lsm6dso_fsm_enable_get+0x28>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 8047ea0:	2302      	movs	r3, #2
 8047ea2:	683a      	ldr	r2, [r7, #0]
 8047ea4:	2146      	movs	r1, #70	; 0x46
 8047ea6:	6878      	ldr	r0, [r7, #4]
 8047ea8:	f7ff fae1 	bl	804746e <lsm6dso_read_reg>
 8047eac:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0) {
 8047eae:	68fb      	ldr	r3, [r7, #12]
 8047eb0:	2b00      	cmp	r3, #0
 8047eb2:	d104      	bne.n	8047ebe <lsm6dso_fsm_enable_get+0x38>
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8047eb4:	2100      	movs	r1, #0
 8047eb6:	6878      	ldr	r0, [r7, #4]
 8047eb8:	f7ff fe7f 	bl	8047bba <lsm6dso_mem_bank_set>
 8047ebc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8047ebe:	68fb      	ldr	r3, [r7, #12]
}
 8047ec0:	4618      	mov	r0, r3
 8047ec2:	3710      	adds	r7, #16
 8047ec4:	46bd      	mov	sp, r7
 8047ec6:	bd80      	pop	{r7, pc}

08047ec8 <lsm6dso_fsm_data_rate_get>:
 * @param  ctx      read / write interface definitions
 * @param  val      Get the values of fsm_odr in reg EMB_FUNC_ODR_CFG_B
 *
 */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t * ctx, lsm6dso_fsm_odr_t * val)
{
 8047ec8:	b580      	push	{r7, lr}
 8047eca:	b084      	sub	sp, #16
 8047ecc:	af00      	add	r7, sp, #0
 8047ece:	6078      	str	r0, [r7, #4]
 8047ed0:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;
  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8047ed2:	2102      	movs	r1, #2
 8047ed4:	6878      	ldr	r0, [r7, #4]
 8047ed6:	f7ff fe70 	bl	8047bba <lsm6dso_mem_bank_set>
 8047eda:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8047edc:	68fb      	ldr	r3, [r7, #12]
 8047ede:	2b00      	cmp	r3, #0
 8047ee0:	d107      	bne.n	8047ef2 <lsm6dso_fsm_data_rate_get+0x2a>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B, (uint8_t *) & reg,
 8047ee2:	f107 0208 	add.w	r2, r7, #8
 8047ee6:	2301      	movs	r3, #1
 8047ee8:	215f      	movs	r1, #95	; 0x5f
 8047eea:	6878      	ldr	r0, [r7, #4]
 8047eec:	f7ff fabf 	bl	804746e <lsm6dso_read_reg>
 8047ef0:	60f8      	str	r0, [r7, #12]
                           1);
  }

  if (ret == 0) {
 8047ef2:	68fb      	ldr	r3, [r7, #12]
 8047ef4:	2b00      	cmp	r3, #0
 8047ef6:	d12a      	bne.n	8047f4e <lsm6dso_fsm_data_rate_get+0x86>
    switch (reg.fsm_odr) {
 8047ef8:	7a3b      	ldrb	r3, [r7, #8]
 8047efa:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8047efe:	b2db      	uxtb	r3, r3
 8047f00:	2b03      	cmp	r3, #3
 8047f02:	d81b      	bhi.n	8047f3c <lsm6dso_fsm_data_rate_get+0x74>
 8047f04:	a201      	add	r2, pc, #4	; (adr r2, 8047f0c <lsm6dso_fsm_data_rate_get+0x44>)
 8047f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8047f0a:	bf00      	nop
 8047f0c:	08047f1d 	.word	0x08047f1d
 8047f10:	08047f25 	.word	0x08047f25
 8047f14:	08047f2d 	.word	0x08047f2d
 8047f18:	08047f35 	.word	0x08047f35
    case LSM6DSO_ODR_FSM_12Hz5:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8047f1c:	683b      	ldr	r3, [r7, #0]
 8047f1e:	2200      	movs	r2, #0
 8047f20:	701a      	strb	r2, [r3, #0]
      break;
 8047f22:	e00f      	b.n	8047f44 <lsm6dso_fsm_data_rate_get+0x7c>

    case LSM6DSO_ODR_FSM_26Hz:
      *val = LSM6DSO_ODR_FSM_26Hz;
 8047f24:	683b      	ldr	r3, [r7, #0]
 8047f26:	2201      	movs	r2, #1
 8047f28:	701a      	strb	r2, [r3, #0]
      break;
 8047f2a:	e00b      	b.n	8047f44 <lsm6dso_fsm_data_rate_get+0x7c>

    case LSM6DSO_ODR_FSM_52Hz:
      *val = LSM6DSO_ODR_FSM_52Hz;
 8047f2c:	683b      	ldr	r3, [r7, #0]
 8047f2e:	2202      	movs	r2, #2
 8047f30:	701a      	strb	r2, [r3, #0]
      break;
 8047f32:	e007      	b.n	8047f44 <lsm6dso_fsm_data_rate_get+0x7c>

    case LSM6DSO_ODR_FSM_104Hz:
      *val = LSM6DSO_ODR_FSM_104Hz;
 8047f34:	683b      	ldr	r3, [r7, #0]
 8047f36:	2203      	movs	r2, #3
 8047f38:	701a      	strb	r2, [r3, #0]
      break;
 8047f3a:	e003      	b.n	8047f44 <lsm6dso_fsm_data_rate_get+0x7c>

    default:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8047f3c:	683b      	ldr	r3, [r7, #0]
 8047f3e:	2200      	movs	r2, #0
 8047f40:	701a      	strb	r2, [r3, #0]
      break;
 8047f42:	bf00      	nop
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8047f44:	2100      	movs	r1, #0
 8047f46:	6878      	ldr	r0, [r7, #4]
 8047f48:	f7ff fe37 	bl	8047bba <lsm6dso_mem_bank_set>
 8047f4c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8047f4e:	68fb      	ldr	r3, [r7, #12]
}
 8047f50:	4618      	mov	r0, r3
 8047f52:	3710      	adds	r7, #16
 8047f54:	46bd      	mov	sp, r7
 8047f56:	bd80      	pop	{r7, pc}

08047f58 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8047f58:	b480      	push	{r7}
 8047f5a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8047f5c:	f3bf 8f4f 	dsb	sy
}
 8047f60:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8047f62:	4b06      	ldr	r3, [pc, #24]	; (8047f7c <__NVIC_SystemReset+0x24>)
 8047f64:	68db      	ldr	r3, [r3, #12]
 8047f66:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8047f6a:	4904      	ldr	r1, [pc, #16]	; (8047f7c <__NVIC_SystemReset+0x24>)
 8047f6c:	4b04      	ldr	r3, [pc, #16]	; (8047f80 <__NVIC_SystemReset+0x28>)
 8047f6e:	4313      	orrs	r3, r2
 8047f70:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8047f72:	f3bf 8f4f 	dsb	sy
}
 8047f76:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8047f78:	bf00      	nop
 8047f7a:	e7fd      	b.n	8047f78 <__NVIC_SystemReset+0x20>
 8047f7c:	e000ed00 	.word	0xe000ed00
 8047f80:	05fa0004 	.word	0x05fa0004

08047f84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8047f84:	b580      	push	{r7, lr}
 8047f86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration-------------------------------------------------------- */

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8047f88:	f007 fb1e 	bl	804f5c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8047f8c:	f000 f96a 	bl	8048264 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8047f90:	f000 fc88 	bl	80488a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8047f94:	f000 fc5e 	bl	8048854 <MX_DMA_Init>
  MX_CAN1_Init();
 8047f98:	f000 f9ce 	bl	8048338 <MX_CAN1_Init>
  MX_CAN2_Init();
 8047f9c:	f000 fa3c 	bl	8048418 <MX_CAN2_Init>
  MX_USART2_UART_Init();
 8047fa0:	f000 fc28 	bl	80487f4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8047fa4:	f000 fbb0 	bl	8048708 <MX_TIM3_Init>
  MX_I2C2_Init();
 8047fa8:	f000 faa6 	bl	80484f8 <MX_I2C2_Init>
  MX_SPI1_Init();
 8047fac:	f000 fad4 	bl	8048558 <MX_SPI1_Init>
  MX_TIM2_Init();
 8047fb0:	f000 fb08 	bl	80485c4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  Get_BoardID();
 8047fb4:	f000 fd4a 	bl	8048a4c <Get_BoardID>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8047fb8:	f00d ff84 	bl	8055ec4 <osKernelInitialize>
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of DataTimer */
  DataTimerHandle =
      osTimerNew(DataTimerCallback, osTimerPeriodic, NULL,
 8047fbc:	4b77      	ldr	r3, [pc, #476]	; (804819c <main+0x218>)
 8047fbe:	2200      	movs	r2, #0
 8047fc0:	2101      	movs	r1, #1
 8047fc2:	4877      	ldr	r0, [pc, #476]	; (80481a0 <main+0x21c>)
 8047fc4:	f00e f8ca 	bl	805615c <osTimerNew>
 8047fc8:	4603      	mov	r3, r0
  DataTimerHandle =
 8047fca:	4a76      	ldr	r2, [pc, #472]	; (80481a4 <main+0x220>)
 8047fcc:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* Create the queue(s) */
  /* creation of Can1BroadcastQ */
  Can1BroadcastQHandle = osMessageQueueNew(32, sizeof(can_message_event_t),
 8047fce:	4a76      	ldr	r2, [pc, #472]	; (80481a8 <main+0x224>)
 8047fd0:	2124      	movs	r1, #36	; 0x24
 8047fd2:	2020      	movs	r0, #32
 8047fd4:	f00e f9a3 	bl	805631e <osMessageQueueNew>
 8047fd8:	4603      	mov	r3, r0
 8047fda:	4a74      	ldr	r2, [pc, #464]	; (80481ac <main+0x228>)
 8047fdc:	6013      	str	r3, [r2, #0]
                                           &Can1BroadcastQ_attributes);

  /* creation of Can1ReceiveQ */
  Can1ReceiveQHandle = osMessageQueueNew(32, sizeof(can_message_event_t),
 8047fde:	4a74      	ldr	r2, [pc, #464]	; (80481b0 <main+0x22c>)
 8047fe0:	2124      	movs	r1, #36	; 0x24
 8047fe2:	2020      	movs	r0, #32
 8047fe4:	f00e f99b 	bl	805631e <osMessageQueueNew>
 8047fe8:	4603      	mov	r3, r0
 8047fea:	4a72      	ldr	r2, [pc, #456]	; (80481b4 <main+0x230>)
 8047fec:	6013      	str	r3, [r2, #0]
                                         &Can1ReceiveQ_attributes);

  /* creation of Can2BroadcastQ */
  Can2BroadcastQHandle = osMessageQueueNew(32, sizeof(can_message_event_t),
 8047fee:	4a72      	ldr	r2, [pc, #456]	; (80481b8 <main+0x234>)
 8047ff0:	2124      	movs	r1, #36	; 0x24
 8047ff2:	2020      	movs	r0, #32
 8047ff4:	f00e f993 	bl	805631e <osMessageQueueNew>
 8047ff8:	4603      	mov	r3, r0
 8047ffa:	4a70      	ldr	r2, [pc, #448]	; (80481bc <main+0x238>)
 8047ffc:	6013      	str	r3, [r2, #0]
                                           &Can2BroadcastQ_attributes);

  /* creation of Can2ReceiveQ */
  Can2ReceiveQHandle = osMessageQueueNew(32, sizeof(can_message_event_t),
 8047ffe:	4a70      	ldr	r2, [pc, #448]	; (80481c0 <main+0x23c>)
 8048000:	2124      	movs	r1, #36	; 0x24
 8048002:	2020      	movs	r0, #32
 8048004:	f00e f98b 	bl	805631e <osMessageQueueNew>
 8048008:	4603      	mov	r3, r0
 804800a:	4a6e      	ldr	r2, [pc, #440]	; (80481c4 <main+0x240>)
 804800c:	6013      	str	r3, [r2, #0]
                                         &Can2ReceiveQ_attributes);

  /* creation of Uart2TaskQ */
  Uart2MsgQHandle = osMessageQueueNew(32, sizeof(uint8_t) * UART_TX_CODE_LENGTH,
 804800e:	4a6e      	ldr	r2, [pc, #440]	; (80481c8 <main+0x244>)
 8048010:	211d      	movs	r1, #29
 8048012:	2020      	movs	r0, #32
 8048014:	f00e f983 	bl	805631e <osMessageQueueNew>
 8048018:	4603      	mov	r3, r0
 804801a:	4a6c      	ldr	r2, [pc, #432]	; (80481cc <main+0x248>)
 804801c:	6013      	str	r3, [r2, #0]
                                      &Uart2MsgQ_attributes);

  /* creation of SensorDataQ */
  SensorDataQHandle = osMessageQueueNew(64, sizeof(sensors_event_t),
 804801e:	4a6c      	ldr	r2, [pc, #432]	; (80481d0 <main+0x24c>)
 8048020:	2150      	movs	r1, #80	; 0x50
 8048022:	2040      	movs	r0, #64	; 0x40
 8048024:	f00e f97b 	bl	805631e <osMessageQueueNew>
 8048028:	4603      	mov	r3, r0
 804802a:	4a6a      	ldr	r2, [pc, #424]	; (80481d4 <main+0x250>)
 804802c:	6013      	str	r3, [r2, #0]
                                        &SensorDataQ_attributes);

  /* creation of SensorMessageQ */
  SensorMsgQHandle = osMessageQueueNew(32, sizeof(sensor_message_event_t),
 804802e:	4a6a      	ldr	r2, [pc, #424]	; (80481d8 <main+0x254>)
 8048030:	2158      	movs	r1, #88	; 0x58
 8048032:	2020      	movs	r0, #32
 8048034:	f00e f973 	bl	805631e <osMessageQueueNew>
 8048038:	4603      	mov	r3, r0
 804803a:	4a68      	ldr	r2, [pc, #416]	; (80481dc <main+0x258>)
 804803c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* Create the thread(s) */
  /* creation of Can1Broadcast */
  Can1BroadcastHandle = osThreadNew(StartCan1BroadcastTask, NULL,
 804803e:	4a68      	ldr	r2, [pc, #416]	; (80481e0 <main+0x25c>)
 8048040:	2100      	movs	r1, #0
 8048042:	4868      	ldr	r0, [pc, #416]	; (80481e4 <main+0x260>)
 8048044:	f00d ffa6 	bl	8055f94 <osThreadNew>
 8048048:	4603      	mov	r3, r0
 804804a:	4a67      	ldr	r2, [pc, #412]	; (80481e8 <main+0x264>)
 804804c:	6013      	str	r3, [r2, #0]
                                    &Can1Broadcast_attributes);

  /* creation of Can1Receive */
  Can1ReceiveHandle = osThreadNew(StartCan1ReceiveTask, NULL,
 804804e:	4a67      	ldr	r2, [pc, #412]	; (80481ec <main+0x268>)
 8048050:	2100      	movs	r1, #0
 8048052:	4867      	ldr	r0, [pc, #412]	; (80481f0 <main+0x26c>)
 8048054:	f00d ff9e 	bl	8055f94 <osThreadNew>
 8048058:	4603      	mov	r3, r0
 804805a:	4a66      	ldr	r2, [pc, #408]	; (80481f4 <main+0x270>)
 804805c:	6013      	str	r3, [r2, #0]
                                  &Can1Receive_attributes);

  /* creation of Can2Broadcast */
  Can2BroadcastHandle = osThreadNew(StartCan2BroadcastTask, NULL,
 804805e:	4a66      	ldr	r2, [pc, #408]	; (80481f8 <main+0x274>)
 8048060:	2100      	movs	r1, #0
 8048062:	4866      	ldr	r0, [pc, #408]	; (80481fc <main+0x278>)
 8048064:	f00d ff96 	bl	8055f94 <osThreadNew>
 8048068:	4603      	mov	r3, r0
 804806a:	4a65      	ldr	r2, [pc, #404]	; (8048200 <main+0x27c>)
 804806c:	6013      	str	r3, [r2, #0]
                                    &Can2Broadcast_attributes);

  /* creation of Can2Receive */
  Can2ReceiveHandle = osThreadNew(StartCan2ReceiveTask, NULL,
 804806e:	4a65      	ldr	r2, [pc, #404]	; (8048204 <main+0x280>)
 8048070:	2100      	movs	r1, #0
 8048072:	4865      	ldr	r0, [pc, #404]	; (8048208 <main+0x284>)
 8048074:	f00d ff8e 	bl	8055f94 <osThreadNew>
 8048078:	4603      	mov	r3, r0
 804807a:	4a64      	ldr	r2, [pc, #400]	; (804820c <main+0x288>)
 804807c:	6013      	str	r3, [r2, #0]
                                  &Can2Receive_attributes);

  /* creation of Uart2Task */
  Uart2TaskHandle = osThreadNew(StartUart2Task, NULL, &Uart2Task_attributes);
 804807e:	4a64      	ldr	r2, [pc, #400]	; (8048210 <main+0x28c>)
 8048080:	2100      	movs	r1, #0
 8048082:	4864      	ldr	r0, [pc, #400]	; (8048214 <main+0x290>)
 8048084:	f00d ff86 	bl	8055f94 <osThreadNew>
 8048088:	4603      	mov	r3, r0
 804808a:	4a63      	ldr	r2, [pc, #396]	; (8048218 <main+0x294>)
 804808c:	6013      	str	r3, [r2, #0]

  /* creation of SensorManager */
  //sensor manager thread need to handle different config messages such as selftest/calibration/timer
  SensorManagerHandle = osThreadNew(StartSensorManagerTask, NULL,
 804808e:	4a63      	ldr	r2, [pc, #396]	; (804821c <main+0x298>)
 8048090:	2100      	movs	r1, #0
 8048092:	4863      	ldr	r0, [pc, #396]	; (8048220 <main+0x29c>)
 8048094:	f00d ff7e 	bl	8055f94 <osThreadNew>
 8048098:	4603      	mov	r3, r0
 804809a:	4a62      	ldr	r2, [pc, #392]	; (8048224 <main+0x2a0>)
 804809c:	6013      	str	r3, [r2, #0]
                                    &SensorManager_attributes);

  /* creation of SensorDataProc */
  SensorDataProcHandle = osThreadNew(StartSensorDataProcesser, NULL,
 804809e:	4a62      	ldr	r2, [pc, #392]	; (8048228 <main+0x2a4>)
 80480a0:	2100      	movs	r1, #0
 80480a2:	4862      	ldr	r0, [pc, #392]	; (804822c <main+0x2a8>)
 80480a4:	f00d ff76 	bl	8055f94 <osThreadNew>
 80480a8:	4603      	mov	r3, r0
 80480aa:	4a61      	ldr	r2, [pc, #388]	; (8048230 <main+0x2ac>)
 80480ac:	6013      	str	r3, [r2, #0]
                                     &SensorDataProc_attributes);

  //init sensor related parameters
  platformInitPrams.boardID = boardID;
 80480ae:	4b61      	ldr	r3, [pc, #388]	; (8048234 <main+0x2b0>)
 80480b0:	781a      	ldrb	r2, [r3, #0]
 80480b2:	4b61      	ldr	r3, [pc, #388]	; (8048238 <main+0x2b4>)
 80480b4:	701a      	strb	r2, [r3, #0]
  platformInitPrams.i2c_handle = hi2c2;
 80480b6:	4b60      	ldr	r3, [pc, #384]	; (8048238 <main+0x2b4>)
 80480b8:	4a60      	ldr	r2, [pc, #384]	; (804823c <main+0x2b8>)
 80480ba:	3304      	adds	r3, #4
 80480bc:	4611      	mov	r1, r2
 80480be:	2254      	movs	r2, #84	; 0x54
 80480c0:	4618      	mov	r0, r3
 80480c2:	f017 ff6d 	bl	805ffa0 <memcpy>
  platformInitPrams.uart = huart2;
 80480c6:	4b5c      	ldr	r3, [pc, #368]	; (8048238 <main+0x2b4>)
 80480c8:	4a5d      	ldr	r2, [pc, #372]	; (8048240 <main+0x2bc>)
 80480ca:	3358      	adds	r3, #88	; 0x58
 80480cc:	4611      	mov	r1, r2
 80480ce:	2244      	movs	r2, #68	; 0x44
 80480d0:	4618      	mov	r0, r3
 80480d2:	f017 ff65 	bl	805ffa0 <memcpy>
  platformInitPrams.spi_handle = hspi1;
 80480d6:	4b58      	ldr	r3, [pc, #352]	; (8048238 <main+0x2b4>)
 80480d8:	4a5a      	ldr	r2, [pc, #360]	; (8048244 <main+0x2c0>)
 80480da:	339c      	adds	r3, #156	; 0x9c
 80480dc:	4611      	mov	r1, r2
 80480de:	2258      	movs	r2, #88	; 0x58
 80480e0:	4618      	mov	r0, r3
 80480e2:	f017 ff5d 	bl	805ffa0 <memcpy>
  platformInitPrams.SensorMessageQHandle = SensorMsgQHandle;
 80480e6:	4b3d      	ldr	r3, [pc, #244]	; (80481dc <main+0x258>)
 80480e8:	681b      	ldr	r3, [r3, #0]
 80480ea:	4a53      	ldr	r2, [pc, #332]	; (8048238 <main+0x2b4>)
 80480ec:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
  platformInitPrams.SensorDataQHandle = SensorDataQHandle;
 80480f0:	4b38      	ldr	r3, [pc, #224]	; (80481d4 <main+0x250>)
 80480f2:	681b      	ldr	r3, [r3, #0]
 80480f4:	4a50      	ldr	r2, [pc, #320]	; (8048238 <main+0x2b4>)
 80480f6:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
  platformInitPrams.UartReportQHandle = Uart2MsgQHandle;
 80480fa:	4b34      	ldr	r3, [pc, #208]	; (80481cc <main+0x248>)
 80480fc:	681b      	ldr	r3, [r3, #0]
 80480fe:	4a4e      	ldr	r2, [pc, #312]	; (8048238 <main+0x2b4>)
 8048100:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
  platformInitPrams.PollingTimerHandle = DataTimerHandle;
 8048104:	4b27      	ldr	r3, [pc, #156]	; (80481a4 <main+0x220>)
 8048106:	681b      	ldr	r3, [r3, #0]
 8048108:	4a4b      	ldr	r2, [pc, #300]	; (8048238 <main+0x2b4>)
 804810a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
  platformInitPrams.OperateTimerHandle = htim3;
 804810e:	4b4a      	ldr	r3, [pc, #296]	; (8048238 <main+0x2b4>)
 8048110:	4a4d      	ldr	r2, [pc, #308]	; (8048248 <main+0x2c4>)
 8048112:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8048116:	4611      	mov	r1, r2
 8048118:	2248      	movs	r2, #72	; 0x48
 804811a:	4618      	mov	r0, r3
 804811c:	f017 ff40 	bl	805ffa0 <memcpy>
  platformInitPrams.PWMTimerHandle = htim2;
 8048120:	4b45      	ldr	r3, [pc, #276]	; (8048238 <main+0x2b4>)
 8048122:	4a4a      	ldr	r2, [pc, #296]	; (804824c <main+0x2c8>)
 8048124:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8048128:	4611      	mov	r1, r2
 804812a:	2248      	movs	r2, #72	; 0x48
 804812c:	4618      	mov	r0, r3
 804812e:	f017 ff37 	bl	805ffa0 <memcpy>
  platformInitPrams.use_uart_mode = false;
 8048132:	4b41      	ldr	r3, [pc, #260]	; (8048238 <main+0x2b4>)
 8048134:	2200      	movs	r2, #0
 8048136:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
  platformInitPrams.tof_cs_gpio_port = TOF_CS_GPIO_Port;
 804813a:	4b3f      	ldr	r3, [pc, #252]	; (8048238 <main+0x2b4>)
 804813c:	4a44      	ldr	r2, [pc, #272]	; (8048250 <main+0x2cc>)
 804813e:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  platformInitPrams.tof_cs_pin = TOF_CS_Pin;
 8048142:	4b3d      	ldr	r3, [pc, #244]	; (8048238 <main+0x2b4>)
 8048144:	2210      	movs	r2, #16
 8048146:	f8a3 21a0 	strh.w	r2, [r3, #416]	; 0x1a0
  platformInitPrams.board_calidata =
      (calibrationData *) calloc(1, sizeof(calibrationData));
 804814a:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 804814e:	2001      	movs	r0, #1
 8048150:	f017 fef4 	bl	805ff3c <calloc>
 8048154:	4603      	mov	r3, r0
 8048156:	461a      	mov	r2, r3
  platformInitPrams.board_calidata =
 8048158:	4b37      	ldr	r3, [pc, #220]	; (8048238 <main+0x2b4>)
 804815a:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
  if (platformInitPrams.board_calidata == NULL) {
 804815e:	4b36      	ldr	r3, [pc, #216]	; (8048238 <main+0x2b4>)
 8048160:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8048164:	2b00      	cmp	r3, #0
 8048166:	d101      	bne.n	804816c <main+0x1e8>
    /* Notification Error */
    Error_Handler();
 8048168:	f001 fcd6 	bl	8049b18 <Error_Handler>
  }

  memcpy(platformInitPrams.board_calidata, &flashCaliInfo,
 804816c:	4b32      	ldr	r3, [pc, #200]	; (8048238 <main+0x2b4>)
 804816e:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8048172:	f44f 7271 	mov.w	r2, #964	; 0x3c4
 8048176:	4937      	ldr	r1, [pc, #220]	; (8048254 <main+0x2d0>)
 8048178:	4618      	mov	r0, r3
 804817a:	f017 ff11 	bl	805ffa0 <memcpy>
         sizeof(calibrationData));

  sensor_register(&platformInitPrams);
 804817e:	482e      	ldr	r0, [pc, #184]	; (8048238 <main+0x2b4>)
 8048180:	f004 fc3e 	bl	804ca00 <sensor_register>

  /* creation of InitTask */
  InitTaskHandle = osThreadNew(StartInitTask, NULL, &InitTask_attributes);
 8048184:	4a34      	ldr	r2, [pc, #208]	; (8048258 <main+0x2d4>)
 8048186:	2100      	movs	r1, #0
 8048188:	4834      	ldr	r0, [pc, #208]	; (804825c <main+0x2d8>)
 804818a:	f00d ff03 	bl	8055f94 <osThreadNew>
 804818e:	4603      	mov	r3, r0
 8048190:	4a33      	ldr	r2, [pc, #204]	; (8048260 <main+0x2dc>)
 8048192:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8048194:	f00d feba 	bl	8055f0c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 8048198:	e7fe      	b.n	8048198 <main+0x214>
 804819a:	bf00      	nop
 804819c:	080678a4 	.word	0x080678a4
 80481a0:	08049a9d 	.word	0x08049a9d
 80481a4:	2001c1ac 	.word	0x2001c1ac
 80481a8:	08067974 	.word	0x08067974
 80481ac:	2001c004 	.word	0x2001c004
 80481b0:	0806798c 	.word	0x0806798c
 80481b4:	2001be6c 	.word	0x2001be6c
 80481b8:	080679ec 	.word	0x080679ec
 80481bc:	2001be70 	.word	0x2001be70
 80481c0:	08067a04 	.word	0x08067a04
 80481c4:	2001c298 	.word	0x2001c298
 80481c8:	08067a40 	.word	0x08067a40
 80481cc:	2001bf70 	.word	0x2001bf70
 80481d0:	080678fc 	.word	0x080678fc
 80481d4:	2001be08 	.word	0x2001be08
 80481d8:	08067914 	.word	0x08067914
 80481dc:	2001bec8 	.word	0x2001bec8
 80481e0:	0806792c 	.word	0x0806792c
 80481e4:	08048ba5 	.word	0x08048ba5
 80481e8:	2001c2c4 	.word	0x2001c2c4
 80481ec:	08067950 	.word	0x08067950
 80481f0:	08048c15 	.word	0x08048c15
 80481f4:	2001bf18 	.word	0x2001bf18
 80481f8:	080679a4 	.word	0x080679a4
 80481fc:	08049089 	.word	0x08049089
 8048200:	2001bf78 	.word	0x2001bf78
 8048204:	080679c8 	.word	0x080679c8
 8048208:	080490f9 	.word	0x080490f9
 804820c:	2001c2c8 	.word	0x2001c2c8
 8048210:	08067a1c 	.word	0x08067a1c
 8048214:	08049419 	.word	0x08049419
 8048218:	2001bf44 	.word	0x2001bf44
 804821c:	080678b4 	.word	0x080678b4
 8048220:	08049521 	.word	0x08049521
 8048224:	2001bf74 	.word	0x2001bf74
 8048228:	080678d8 	.word	0x080678d8
 804822c:	08049799 	.word	0x08049799
 8048230:	2001c1b0 	.word	0x2001c1b0
 8048234:	20007886 	.word	0x20007886
 8048238:	2001c008 	.word	0x2001c008
 804823c:	2001be74 	.word	0x2001be74
 8048240:	2001c254 	.word	0x2001c254
 8048244:	2001c1b4 	.word	0x2001c1b4
 8048248:	2001bed0 	.word	0x2001bed0
 804824c:	2001c20c 	.word	0x2001c20c
 8048250:	40020000 	.word	0x40020000
 8048254:	08020000 	.word	0x08020000
 8048258:	08067880 	.word	0x08067880
 804825c:	08049969 	.word	0x08049969
 8048260:	2001becc 	.word	0x2001becc

08048264 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8048264:	b580      	push	{r7, lr}
 8048266:	b094      	sub	sp, #80	; 0x50
 8048268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 804826a:	f107 0320 	add.w	r3, r7, #32
 804826e:	2230      	movs	r2, #48	; 0x30
 8048270:	2100      	movs	r1, #0
 8048272:	4618      	mov	r0, r3
 8048274:	f017 fea2 	bl	805ffbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8048278:	f107 030c 	add.w	r3, r7, #12
 804827c:	2200      	movs	r2, #0
 804827e:	601a      	str	r2, [r3, #0]
 8048280:	605a      	str	r2, [r3, #4]
 8048282:	609a      	str	r2, [r3, #8]
 8048284:	60da      	str	r2, [r3, #12]
 8048286:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8048288:	2300      	movs	r3, #0
 804828a:	60bb      	str	r3, [r7, #8]
 804828c:	4b28      	ldr	r3, [pc, #160]	; (8048330 <SystemClock_Config+0xcc>)
 804828e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8048290:	4a27      	ldr	r2, [pc, #156]	; (8048330 <SystemClock_Config+0xcc>)
 8048292:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8048296:	6413      	str	r3, [r2, #64]	; 0x40
 8048298:	4b25      	ldr	r3, [pc, #148]	; (8048330 <SystemClock_Config+0xcc>)
 804829a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804829c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80482a0:	60bb      	str	r3, [r7, #8]
 80482a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80482a4:	2300      	movs	r3, #0
 80482a6:	607b      	str	r3, [r7, #4]
 80482a8:	4b22      	ldr	r3, [pc, #136]	; (8048334 <SystemClock_Config+0xd0>)
 80482aa:	681b      	ldr	r3, [r3, #0]
 80482ac:	4a21      	ldr	r2, [pc, #132]	; (8048334 <SystemClock_Config+0xd0>)
 80482ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80482b2:	6013      	str	r3, [r2, #0]
 80482b4:	4b1f      	ldr	r3, [pc, #124]	; (8048334 <SystemClock_Config+0xd0>)
 80482b6:	681b      	ldr	r3, [r3, #0]
 80482b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80482bc:	607b      	str	r3, [r7, #4]
 80482be:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80482c0:	2301      	movs	r3, #1
 80482c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80482c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80482c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80482ca:	2302      	movs	r3, #2
 80482cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80482ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80482d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80482d4:	2308      	movs	r3, #8
 80482d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 80482d8:	23a0      	movs	r3, #160	; 0xa0
 80482da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80482dc:	2302      	movs	r3, #2
 80482de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80482e0:	2304      	movs	r3, #4
 80482e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80482e4:	f107 0320 	add.w	r3, r7, #32
 80482e8:	4618      	mov	r0, r3
 80482ea:	f00a fe33 	bl	8052f54 <HAL_RCC_OscConfig>
 80482ee:	4603      	mov	r3, r0
 80482f0:	2b00      	cmp	r3, #0
 80482f2:	d001      	beq.n	80482f8 <SystemClock_Config+0x94>
    Error_Handler();
 80482f4:	f001 fc10 	bl	8049b18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80482f8:	230f      	movs	r3, #15
 80482fa:	60fb      	str	r3, [r7, #12]
      | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80482fc:	2302      	movs	r3, #2
 80482fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8048300:	2300      	movs	r3, #0
 8048302:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8048304:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8048308:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 804830a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 804830e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8048310:	f107 030c 	add.w	r3, r7, #12
 8048314:	2105      	movs	r1, #5
 8048316:	4618      	mov	r0, r3
 8048318:	f00b f894 	bl	8053444 <HAL_RCC_ClockConfig>
 804831c:	4603      	mov	r3, r0
 804831e:	2b00      	cmp	r3, #0
 8048320:	d001      	beq.n	8048326 <SystemClock_Config+0xc2>
    Error_Handler();
 8048322:	f001 fbf9 	bl	8049b18 <Error_Handler>
  }
}
 8048326:	bf00      	nop
 8048328:	3750      	adds	r7, #80	; 0x50
 804832a:	46bd      	mov	sp, r7
 804832c:	bd80      	pop	{r7, pc}
 804832e:	bf00      	nop
 8048330:	40023800 	.word	0x40023800
 8048334:	40007000 	.word	0x40007000

08048338 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8048338:	b580      	push	{r7, lr}
 804833a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 804833c:	4b33      	ldr	r3, [pc, #204]	; (804840c <MX_CAN1_Init+0xd4>)
 804833e:	4a34      	ldr	r2, [pc, #208]	; (8048410 <MX_CAN1_Init+0xd8>)
 8048340:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 8048342:	4b32      	ldr	r3, [pc, #200]	; (804840c <MX_CAN1_Init+0xd4>)
 8048344:	2204      	movs	r2, #4
 8048346:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8048348:	4b30      	ldr	r3, [pc, #192]	; (804840c <MX_CAN1_Init+0xd4>)
 804834a:	2200      	movs	r2, #0
 804834c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 804834e:	4b2f      	ldr	r3, [pc, #188]	; (804840c <MX_CAN1_Init+0xd4>)
 8048350:	2200      	movs	r2, #0
 8048352:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8048354:	4b2d      	ldr	r3, [pc, #180]	; (804840c <MX_CAN1_Init+0xd4>)
 8048356:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 804835a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 804835c:	4b2b      	ldr	r3, [pc, #172]	; (804840c <MX_CAN1_Init+0xd4>)
 804835e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8048362:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8048364:	4b29      	ldr	r3, [pc, #164]	; (804840c <MX_CAN1_Init+0xd4>)
 8048366:	2200      	movs	r2, #0
 8048368:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 804836a:	4b28      	ldr	r3, [pc, #160]	; (804840c <MX_CAN1_Init+0xd4>)
 804836c:	2200      	movs	r2, #0
 804836e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8048370:	4b26      	ldr	r3, [pc, #152]	; (804840c <MX_CAN1_Init+0xd4>)
 8048372:	2200      	movs	r2, #0
 8048374:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8048376:	4b25      	ldr	r3, [pc, #148]	; (804840c <MX_CAN1_Init+0xd4>)
 8048378:	2200      	movs	r2, #0
 804837a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 804837c:	4b23      	ldr	r3, [pc, #140]	; (804840c <MX_CAN1_Init+0xd4>)
 804837e:	2200      	movs	r2, #0
 8048380:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8048382:	4b22      	ldr	r3, [pc, #136]	; (804840c <MX_CAN1_Init+0xd4>)
 8048384:	2200      	movs	r2, #0
 8048386:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 8048388:	4820      	ldr	r0, [pc, #128]	; (804840c <MX_CAN1_Init+0xd4>)
 804838a:	f007 f983 	bl	804f694 <HAL_CAN_Init>
 804838e:	4603      	mov	r3, r0
 8048390:	2b00      	cmp	r3, #0
 8048392:	d001      	beq.n	8048398 <MX_CAN1_Init+0x60>
    Error_Handler();
 8048394:	f001 fbc0 	bl	8049b18 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  /*##-2- Configure the CAN1 Filter ########################################### */
  sCan1FilterConfig.FilterBank = 0;
 8048398:	4b1e      	ldr	r3, [pc, #120]	; (8048414 <MX_CAN1_Init+0xdc>)
 804839a:	2200      	movs	r2, #0
 804839c:	615a      	str	r2, [r3, #20]
  sCan1FilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 804839e:	4b1d      	ldr	r3, [pc, #116]	; (8048414 <MX_CAN1_Init+0xdc>)
 80483a0:	2200      	movs	r2, #0
 80483a2:	619a      	str	r2, [r3, #24]
  sCan1FilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80483a4:	4b1b      	ldr	r3, [pc, #108]	; (8048414 <MX_CAN1_Init+0xdc>)
 80483a6:	2201      	movs	r2, #1
 80483a8:	61da      	str	r2, [r3, #28]
  sCan1FilterConfig.FilterIdHigh = 0x0000;
 80483aa:	4b1a      	ldr	r3, [pc, #104]	; (8048414 <MX_CAN1_Init+0xdc>)
 80483ac:	2200      	movs	r2, #0
 80483ae:	601a      	str	r2, [r3, #0]
  sCan1FilterConfig.FilterIdLow = 0x0000;
 80483b0:	4b18      	ldr	r3, [pc, #96]	; (8048414 <MX_CAN1_Init+0xdc>)
 80483b2:	2200      	movs	r2, #0
 80483b4:	605a      	str	r2, [r3, #4]
  sCan1FilterConfig.FilterMaskIdHigh = 0x0000;
 80483b6:	4b17      	ldr	r3, [pc, #92]	; (8048414 <MX_CAN1_Init+0xdc>)
 80483b8:	2200      	movs	r2, #0
 80483ba:	609a      	str	r2, [r3, #8]
  sCan1FilterConfig.FilterMaskIdLow = 0x0000;
 80483bc:	4b15      	ldr	r3, [pc, #84]	; (8048414 <MX_CAN1_Init+0xdc>)
 80483be:	2200      	movs	r2, #0
 80483c0:	60da      	str	r2, [r3, #12]
  sCan1FilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80483c2:	4b14      	ldr	r3, [pc, #80]	; (8048414 <MX_CAN1_Init+0xdc>)
 80483c4:	2200      	movs	r2, #0
 80483c6:	611a      	str	r2, [r3, #16]
  sCan1FilterConfig.FilterActivation = ENABLE;
 80483c8:	4b12      	ldr	r3, [pc, #72]	; (8048414 <MX_CAN1_Init+0xdc>)
 80483ca:	2201      	movs	r2, #1
 80483cc:	621a      	str	r2, [r3, #32]
  sCan1FilterConfig.SlaveStartFilterBank = 14;
 80483ce:	4b11      	ldr	r3, [pc, #68]	; (8048414 <MX_CAN1_Init+0xdc>)
 80483d0:	220e      	movs	r2, #14
 80483d2:	625a      	str	r2, [r3, #36]	; 0x24

  if (HAL_CAN_ConfigFilter(&hcan1, &sCan1FilterConfig) != HAL_OK) {
 80483d4:	490f      	ldr	r1, [pc, #60]	; (8048414 <MX_CAN1_Init+0xdc>)
 80483d6:	480d      	ldr	r0, [pc, #52]	; (804840c <MX_CAN1_Init+0xd4>)
 80483d8:	f007 fa58 	bl	804f88c <HAL_CAN_ConfigFilter>
 80483dc:	4603      	mov	r3, r0
 80483de:	2b00      	cmp	r3, #0
 80483e0:	d001      	beq.n	80483e6 <MX_CAN1_Init+0xae>
    /* Filter configuration Error */
    Error_Handler();
 80483e2:	f001 fb99 	bl	8049b18 <Error_Handler>
  }

  /*##-3- Start the CAN peripheral ########################################### */
  if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 80483e6:	4809      	ldr	r0, [pc, #36]	; (804840c <MX_CAN1_Init+0xd4>)
 80483e8:	f007 fb30 	bl	804fa4c <HAL_CAN_Start>
 80483ec:	4603      	mov	r3, r0
 80483ee:	2b00      	cmp	r3, #0
 80483f0:	d001      	beq.n	80483f6 <MX_CAN1_Init+0xbe>
    /* Start Error */
    Error_Handler();
 80483f2:	f001 fb91 	bl	8049b18 <Error_Handler>
  }

  /*##-4- Activate CAN RX notification ####################################### */
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)
 80483f6:	2102      	movs	r1, #2
 80483f8:	4804      	ldr	r0, [pc, #16]	; (804840c <MX_CAN1_Init+0xd4>)
 80483fa:	f007 fd58 	bl	804feae <HAL_CAN_ActivateNotification>
 80483fe:	4603      	mov	r3, r0
 8048400:	2b00      	cmp	r3, #0
 8048402:	d001      	beq.n	8048408 <MX_CAN1_Init+0xd0>
      != HAL_OK) {
    /* Notification Error */
    Error_Handler();
 8048404:	f001 fb88 	bl	8049b18 <Error_Handler>
  }

  /* USER CODE END CAN1_Init 2 */

}
 8048408:	bf00      	nop
 804840a:	bd80      	pop	{r7, pc}
 804840c:	2001c29c 	.word	0x2001c29c
 8048410:	40006400 	.word	0x40006400
 8048414:	2001bfdc 	.word	0x2001bfdc

08048418 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8048418:	b580      	push	{r7, lr}
 804841a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 804841c:	4b33      	ldr	r3, [pc, #204]	; (80484ec <MX_CAN2_Init+0xd4>)
 804841e:	4a34      	ldr	r2, [pc, #208]	; (80484f0 <MX_CAN2_Init+0xd8>)
 8048420:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 4;
 8048422:	4b32      	ldr	r3, [pc, #200]	; (80484ec <MX_CAN2_Init+0xd4>)
 8048424:	2204      	movs	r2, #4
 8048426:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8048428:	4b30      	ldr	r3, [pc, #192]	; (80484ec <MX_CAN2_Init+0xd4>)
 804842a:	2200      	movs	r2, #0
 804842c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 804842e:	4b2f      	ldr	r3, [pc, #188]	; (80484ec <MX_CAN2_Init+0xd4>)
 8048430:	2200      	movs	r2, #0
 8048432:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_6TQ;
 8048434:	4b2d      	ldr	r3, [pc, #180]	; (80484ec <MX_CAN2_Init+0xd4>)
 8048436:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 804843a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 804843c:	4b2b      	ldr	r3, [pc, #172]	; (80484ec <MX_CAN2_Init+0xd4>)
 804843e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8048442:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8048444:	4b29      	ldr	r3, [pc, #164]	; (80484ec <MX_CAN2_Init+0xd4>)
 8048446:	2200      	movs	r2, #0
 8048448:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 804844a:	4b28      	ldr	r3, [pc, #160]	; (80484ec <MX_CAN2_Init+0xd4>)
 804844c:	2200      	movs	r2, #0
 804844e:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8048450:	4b26      	ldr	r3, [pc, #152]	; (80484ec <MX_CAN2_Init+0xd4>)
 8048452:	2200      	movs	r2, #0
 8048454:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8048456:	4b25      	ldr	r3, [pc, #148]	; (80484ec <MX_CAN2_Init+0xd4>)
 8048458:	2200      	movs	r2, #0
 804845a:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 804845c:	4b23      	ldr	r3, [pc, #140]	; (80484ec <MX_CAN2_Init+0xd4>)
 804845e:	2200      	movs	r2, #0
 8048460:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8048462:	4b22      	ldr	r3, [pc, #136]	; (80484ec <MX_CAN2_Init+0xd4>)
 8048464:	2200      	movs	r2, #0
 8048466:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK) {
 8048468:	4820      	ldr	r0, [pc, #128]	; (80484ec <MX_CAN2_Init+0xd4>)
 804846a:	f007 f913 	bl	804f694 <HAL_CAN_Init>
 804846e:	4603      	mov	r3, r0
 8048470:	2b00      	cmp	r3, #0
 8048472:	d001      	beq.n	8048478 <MX_CAN2_Init+0x60>
    Error_Handler();
 8048474:	f001 fb50 	bl	8049b18 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */
  /*##-2- Configure the CAN1 Filter ########################################### */
  sCan2FilterConfig.FilterBank = 14;
 8048478:	4b1e      	ldr	r3, [pc, #120]	; (80484f4 <MX_CAN2_Init+0xdc>)
 804847a:	220e      	movs	r2, #14
 804847c:	615a      	str	r2, [r3, #20]
  sCan2FilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 804847e:	4b1d      	ldr	r3, [pc, #116]	; (80484f4 <MX_CAN2_Init+0xdc>)
 8048480:	2200      	movs	r2, #0
 8048482:	619a      	str	r2, [r3, #24]
  sCan2FilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8048484:	4b1b      	ldr	r3, [pc, #108]	; (80484f4 <MX_CAN2_Init+0xdc>)
 8048486:	2201      	movs	r2, #1
 8048488:	61da      	str	r2, [r3, #28]
  sCan2FilterConfig.FilterIdHigh = 0x0000;
 804848a:	4b1a      	ldr	r3, [pc, #104]	; (80484f4 <MX_CAN2_Init+0xdc>)
 804848c:	2200      	movs	r2, #0
 804848e:	601a      	str	r2, [r3, #0]
  sCan2FilterConfig.FilterIdLow = 0x0000;
 8048490:	4b18      	ldr	r3, [pc, #96]	; (80484f4 <MX_CAN2_Init+0xdc>)
 8048492:	2200      	movs	r2, #0
 8048494:	605a      	str	r2, [r3, #4]
  sCan2FilterConfig.FilterMaskIdHigh = 0x0000;
 8048496:	4b17      	ldr	r3, [pc, #92]	; (80484f4 <MX_CAN2_Init+0xdc>)
 8048498:	2200      	movs	r2, #0
 804849a:	609a      	str	r2, [r3, #8]
  sCan2FilterConfig.FilterMaskIdLow = 0x0000;
 804849c:	4b15      	ldr	r3, [pc, #84]	; (80484f4 <MX_CAN2_Init+0xdc>)
 804849e:	2200      	movs	r2, #0
 80484a0:	60da      	str	r2, [r3, #12]
  sCan2FilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80484a2:	4b14      	ldr	r3, [pc, #80]	; (80484f4 <MX_CAN2_Init+0xdc>)
 80484a4:	2200      	movs	r2, #0
 80484a6:	611a      	str	r2, [r3, #16]
  sCan2FilterConfig.FilterActivation = ENABLE;
 80484a8:	4b12      	ldr	r3, [pc, #72]	; (80484f4 <MX_CAN2_Init+0xdc>)
 80484aa:	2201      	movs	r2, #1
 80484ac:	621a      	str	r2, [r3, #32]
  sCan2FilterConfig.SlaveStartFilterBank = 14;
 80484ae:	4b11      	ldr	r3, [pc, #68]	; (80484f4 <MX_CAN2_Init+0xdc>)
 80484b0:	220e      	movs	r2, #14
 80484b2:	625a      	str	r2, [r3, #36]	; 0x24

  if (HAL_CAN_ConfigFilter(&hcan2, &sCan2FilterConfig) != HAL_OK) {
 80484b4:	490f      	ldr	r1, [pc, #60]	; (80484f4 <MX_CAN2_Init+0xdc>)
 80484b6:	480d      	ldr	r0, [pc, #52]	; (80484ec <MX_CAN2_Init+0xd4>)
 80484b8:	f007 f9e8 	bl	804f88c <HAL_CAN_ConfigFilter>
 80484bc:	4603      	mov	r3, r0
 80484be:	2b00      	cmp	r3, #0
 80484c0:	d001      	beq.n	80484c6 <MX_CAN2_Init+0xae>
    /* Filter configuration Error */
    Error_Handler();
 80484c2:	f001 fb29 	bl	8049b18 <Error_Handler>
  }

  /*##-3- Start the CAN peripheral ########################################### */
  if (HAL_CAN_Start(&hcan2) != HAL_OK) {
 80484c6:	4809      	ldr	r0, [pc, #36]	; (80484ec <MX_CAN2_Init+0xd4>)
 80484c8:	f007 fac0 	bl	804fa4c <HAL_CAN_Start>
 80484cc:	4603      	mov	r3, r0
 80484ce:	2b00      	cmp	r3, #0
 80484d0:	d001      	beq.n	80484d6 <MX_CAN2_Init+0xbe>
    /* Start Error */
    Error_Handler();
 80484d2:	f001 fb21 	bl	8049b18 <Error_Handler>
  }

  /*##-4- Activate CAN RX notification ####################################### */
  if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING)
 80484d6:	2102      	movs	r1, #2
 80484d8:	4804      	ldr	r0, [pc, #16]	; (80484ec <MX_CAN2_Init+0xd4>)
 80484da:	f007 fce8 	bl	804feae <HAL_CAN_ActivateNotification>
 80484de:	4603      	mov	r3, r0
 80484e0:	2b00      	cmp	r3, #0
 80484e2:	d001      	beq.n	80484e8 <MX_CAN2_Init+0xd0>
      != HAL_OK) {
    /* Notification Error */
    Error_Handler();
 80484e4:	f001 fb18 	bl	8049b18 <Error_Handler>
  }
  /* USER CODE END CAN2_Init 2 */

}
 80484e8:	bf00      	nop
 80484ea:	bd80      	pop	{r7, pc}
 80484ec:	2001bf48 	.word	0x2001bf48
 80484f0:	40006800 	.word	0x40006800
 80484f4:	2001bf1c 	.word	0x2001bf1c

080484f8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80484f8:	b580      	push	{r7, lr}
 80484fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80484fc:	4b13      	ldr	r3, [pc, #76]	; (804854c <MX_I2C2_Init+0x54>)
 80484fe:	4a14      	ldr	r2, [pc, #80]	; (8048550 <MX_I2C2_Init+0x58>)
 8048500:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8048502:	4b12      	ldr	r3, [pc, #72]	; (804854c <MX_I2C2_Init+0x54>)
 8048504:	4a13      	ldr	r2, [pc, #76]	; (8048554 <MX_I2C2_Init+0x5c>)
 8048506:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8048508:	4b10      	ldr	r3, [pc, #64]	; (804854c <MX_I2C2_Init+0x54>)
 804850a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 804850e:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8048510:	4b0e      	ldr	r3, [pc, #56]	; (804854c <MX_I2C2_Init+0x54>)
 8048512:	2200      	movs	r2, #0
 8048514:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8048516:	4b0d      	ldr	r3, [pc, #52]	; (804854c <MX_I2C2_Init+0x54>)
 8048518:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 804851c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 804851e:	4b0b      	ldr	r3, [pc, #44]	; (804854c <MX_I2C2_Init+0x54>)
 8048520:	2200      	movs	r2, #0
 8048522:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8048524:	4b09      	ldr	r3, [pc, #36]	; (804854c <MX_I2C2_Init+0x54>)
 8048526:	2200      	movs	r2, #0
 8048528:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 804852a:	4b08      	ldr	r3, [pc, #32]	; (804854c <MX_I2C2_Init+0x54>)
 804852c:	2200      	movs	r2, #0
 804852e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8048530:	4b06      	ldr	r3, [pc, #24]	; (804854c <MX_I2C2_Init+0x54>)
 8048532:	2280      	movs	r2, #128	; 0x80
 8048534:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8048536:	4805      	ldr	r0, [pc, #20]	; (804854c <MX_I2C2_Init+0x54>)
 8048538:	f009 f8d8 	bl	80516ec <HAL_I2C_Init>
 804853c:	4603      	mov	r3, r0
 804853e:	2b00      	cmp	r3, #0
 8048540:	d001      	beq.n	8048546 <MX_I2C2_Init+0x4e>
    Error_Handler();
 8048542:	f001 fae9 	bl	8049b18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8048546:	bf00      	nop
 8048548:	bd80      	pop	{r7, pc}
 804854a:	bf00      	nop
 804854c:	2001be74 	.word	0x2001be74
 8048550:	40005800 	.word	0x40005800
 8048554:	00061a80 	.word	0x00061a80

08048558 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8048558:	b580      	push	{r7, lr}
 804855a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration */
  hspi1.Instance = SPI1;
 804855c:	4b17      	ldr	r3, [pc, #92]	; (80485bc <MX_SPI1_Init+0x64>)
 804855e:	4a18      	ldr	r2, [pc, #96]	; (80485c0 <MX_SPI1_Init+0x68>)
 8048560:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8048562:	4b16      	ldr	r3, [pc, #88]	; (80485bc <MX_SPI1_Init+0x64>)
 8048564:	f44f 7282 	mov.w	r2, #260	; 0x104
 8048568:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 804856a:	4b14      	ldr	r3, [pc, #80]	; (80485bc <MX_SPI1_Init+0x64>)
 804856c:	2200      	movs	r2, #0
 804856e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8048570:	4b12      	ldr	r3, [pc, #72]	; (80485bc <MX_SPI1_Init+0x64>)
 8048572:	2200      	movs	r2, #0
 8048574:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8048576:	4b11      	ldr	r3, [pc, #68]	; (80485bc <MX_SPI1_Init+0x64>)
 8048578:	2202      	movs	r2, #2
 804857a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 804857c:	4b0f      	ldr	r3, [pc, #60]	; (80485bc <MX_SPI1_Init+0x64>)
 804857e:	2201      	movs	r2, #1
 8048580:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8048582:	4b0e      	ldr	r3, [pc, #56]	; (80485bc <MX_SPI1_Init+0x64>)
 8048584:	f44f 7200 	mov.w	r2, #512	; 0x200
 8048588:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 804858a:	4b0c      	ldr	r3, [pc, #48]	; (80485bc <MX_SPI1_Init+0x64>)
 804858c:	2208      	movs	r2, #8
 804858e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8048590:	4b0a      	ldr	r3, [pc, #40]	; (80485bc <MX_SPI1_Init+0x64>)
 8048592:	2200      	movs	r2, #0
 8048594:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8048596:	4b09      	ldr	r3, [pc, #36]	; (80485bc <MX_SPI1_Init+0x64>)
 8048598:	2200      	movs	r2, #0
 804859a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 804859c:	4b07      	ldr	r3, [pc, #28]	; (80485bc <MX_SPI1_Init+0x64>)
 804859e:	2200      	movs	r2, #0
 80485a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80485a2:	4b06      	ldr	r3, [pc, #24]	; (80485bc <MX_SPI1_Init+0x64>)
 80485a4:	220a      	movs	r2, #10
 80485a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80485a8:	4804      	ldr	r0, [pc, #16]	; (80485bc <MX_SPI1_Init+0x64>)
 80485aa:	f00b f977 	bl	805389c <HAL_SPI_Init>
 80485ae:	4603      	mov	r3, r0
 80485b0:	2b00      	cmp	r3, #0
 80485b2:	d001      	beq.n	80485b8 <MX_SPI1_Init+0x60>
    Error_Handler();
 80485b4:	f001 fab0 	bl	8049b18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80485b8:	bf00      	nop
 80485ba:	bd80      	pop	{r7, pc}
 80485bc:	2001c1b4 	.word	0x2001c1b4
 80485c0:	40013000 	.word	0x40013000

080485c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80485c4:	b580      	push	{r7, lr}
 80485c6:	b096      	sub	sp, #88	; 0x58
 80485c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80485ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80485ce:	2200      	movs	r2, #0
 80485d0:	601a      	str	r2, [r3, #0]
 80485d2:	605a      	str	r2, [r3, #4]
 80485d4:	609a      	str	r2, [r3, #8]
 80485d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80485d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80485dc:	2200      	movs	r2, #0
 80485de:	601a      	str	r2, [r3, #0]
 80485e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = { 0 };
 80485e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80485e6:	2200      	movs	r2, #0
 80485e8:	601a      	str	r2, [r3, #0]
 80485ea:	605a      	str	r2, [r3, #4]
 80485ec:	609a      	str	r2, [r3, #8]
 80485ee:	60da      	str	r2, [r3, #12]
 80485f0:	611a      	str	r2, [r3, #16]
 80485f2:	615a      	str	r2, [r3, #20]
 80485f4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80485f6:	1d3b      	adds	r3, r7, #4
 80485f8:	2220      	movs	r2, #32
 80485fa:	2100      	movs	r1, #0
 80485fc:	4618      	mov	r0, r3
 80485fe:	f017 fcdd 	bl	805ffbc <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8048602:	4b40      	ldr	r3, [pc, #256]	; (8048704 <MX_TIM2_Init+0x140>)
 8048604:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8048608:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 179;
 804860a:	4b3e      	ldr	r3, [pc, #248]	; (8048704 <MX_TIM2_Init+0x140>)
 804860c:	22b3      	movs	r2, #179	; 0xb3
 804860e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8048610:	4b3c      	ldr	r3, [pc, #240]	; (8048704 <MX_TIM2_Init+0x140>)
 8048612:	2200      	movs	r2, #0
 8048614:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50000;
 8048616:	4b3b      	ldr	r3, [pc, #236]	; (8048704 <MX_TIM2_Init+0x140>)
 8048618:	f24c 3250 	movw	r2, #50000	; 0xc350
 804861c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 804861e:	4b39      	ldr	r3, [pc, #228]	; (8048704 <MX_TIM2_Init+0x140>)
 8048620:	f44f 7280 	mov.w	r2, #256	; 0x100
 8048624:	611a      	str	r2, [r3, #16]
  htim2.Init.RepetitionCounter = 0;
 8048626:	4b37      	ldr	r3, [pc, #220]	; (8048704 <MX_TIM2_Init+0x140>)
 8048628:	2200      	movs	r2, #0
 804862a:	615a      	str	r2, [r3, #20]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 804862c:	4b35      	ldr	r3, [pc, #212]	; (8048704 <MX_TIM2_Init+0x140>)
 804862e:	2280      	movs	r2, #128	; 0x80
 8048630:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8048632:	4834      	ldr	r0, [pc, #208]	; (8048704 <MX_TIM2_Init+0x140>)
 8048634:	f00b fc28 	bl	8053e88 <HAL_TIM_Base_Init>
 8048638:	4603      	mov	r3, r0
 804863a:	2b00      	cmp	r3, #0
 804863c:	d001      	beq.n	8048642 <MX_TIM2_Init+0x7e>
    Error_Handler();
 804863e:	f001 fa6b 	bl	8049b18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8048642:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8048646:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8048648:	f107 0348 	add.w	r3, r7, #72	; 0x48
 804864c:	4619      	mov	r1, r3
 804864e:	482d      	ldr	r0, [pc, #180]	; (8048704 <MX_TIM2_Init+0x140>)
 8048650:	f00b ffda 	bl	8054608 <HAL_TIM_ConfigClockSource>
 8048654:	4603      	mov	r3, r0
 8048656:	2b00      	cmp	r3, #0
 8048658:	d001      	beq.n	804865e <MX_TIM2_Init+0x9a>
    Error_Handler();
 804865a:	f001 fa5d 	bl	8049b18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 804865e:	4829      	ldr	r0, [pc, #164]	; (8048704 <MX_TIM2_Init+0x140>)
 8048660:	f00b fd5a 	bl	8054118 <HAL_TIM_PWM_Init>
 8048664:	4603      	mov	r3, r0
 8048666:	2b00      	cmp	r3, #0
 8048668:	d001      	beq.n	804866e <MX_TIM2_Init+0xaa>
    Error_Handler();
 804866a:	f001 fa55 	bl	8049b18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 804866e:	2300      	movs	r3, #0
 8048670:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8048672:	2300      	movs	r3, #0
 8048674:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8048676:	f107 0340 	add.w	r3, r7, #64	; 0x40
 804867a:	4619      	mov	r1, r3
 804867c:	4821      	ldr	r0, [pc, #132]	; (8048704 <MX_TIM2_Init+0x140>)
 804867e:	f00c fb99 	bl	8054db4 <HAL_TIMEx_MasterConfigSynchronization>
 8048682:	4603      	mov	r3, r0
 8048684:	2b00      	cmp	r3, #0
 8048686:	d001      	beq.n	804868c <MX_TIM2_Init+0xc8>
    Error_Handler();
 8048688:	f001 fa46 	bl	8049b18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 804868c:	2370      	movs	r3, #112	; 0x70
 804868e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 6000;
 8048690:	f241 7370 	movw	r3, #6000	; 0x1770
 8048694:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8048696:	2300      	movs	r3, #0
 8048698:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 804869a:	2300      	movs	r3, #0
 804869c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 804869e:	2300      	movs	r3, #0
 80486a0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80486a2:	2300      	movs	r3, #0
 80486a4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80486a6:	2300      	movs	r3, #0
 80486a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 80486aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80486ae:	2200      	movs	r2, #0
 80486b0:	4619      	mov	r1, r3
 80486b2:	4814      	ldr	r0, [pc, #80]	; (8048704 <MX_TIM2_Init+0x140>)
 80486b4:	f00b feea 	bl	805448c <HAL_TIM_PWM_ConfigChannel>
 80486b8:	4603      	mov	r3, r0
 80486ba:	2b00      	cmp	r3, #0
 80486bc:	d001      	beq.n	80486c2 <MX_TIM2_Init+0xfe>
    Error_Handler();
 80486be:	f001 fa2b 	bl	8049b18 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80486c2:	2300      	movs	r3, #0
 80486c4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80486c6:	2300      	movs	r3, #0
 80486c8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80486ca:	2300      	movs	r3, #0
 80486cc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80486ce:	2300      	movs	r3, #0
 80486d0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80486d2:	2300      	movs	r3, #0
 80486d4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80486d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80486da:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80486dc:	2300      	movs	r3, #0
 80486de:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim2, &sBreakDeadTimeConfig) != HAL_OK) {
 80486e0:	1d3b      	adds	r3, r7, #4
 80486e2:	4619      	mov	r1, r3
 80486e4:	4807      	ldr	r0, [pc, #28]	; (8048704 <MX_TIM2_Init+0x140>)
 80486e6:	f00c fbe1 	bl	8054eac <HAL_TIMEx_ConfigBreakDeadTime>
 80486ea:	4603      	mov	r3, r0
 80486ec:	2b00      	cmp	r3, #0
 80486ee:	d001      	beq.n	80486f4 <MX_TIM2_Init+0x130>
    Error_Handler();
 80486f0:	f001 fa12 	bl	8049b18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80486f4:	4803      	ldr	r0, [pc, #12]	; (8048704 <MX_TIM2_Init+0x140>)
 80486f6:	f005 fb91 	bl	804de1c <HAL_TIM_MspPostInit>

}
 80486fa:	bf00      	nop
 80486fc:	3758      	adds	r7, #88	; 0x58
 80486fe:	46bd      	mov	sp, r7
 8048700:	bd80      	pop	{r7, pc}
 8048702:	bf00      	nop
 8048704:	2001c20c 	.word	0x2001c20c

08048708 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8048708:	b580      	push	{r7, lr}
 804870a:	b08e      	sub	sp, #56	; 0x38
 804870c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 804870e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8048712:	2200      	movs	r2, #0
 8048714:	601a      	str	r2, [r3, #0]
 8048716:	605a      	str	r2, [r3, #4]
 8048718:	609a      	str	r2, [r3, #8]
 804871a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 804871c:	f107 0320 	add.w	r3, r7, #32
 8048720:	2200      	movs	r2, #0
 8048722:	601a      	str	r2, [r3, #0]
 8048724:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = { 0 };
 8048726:	1d3b      	adds	r3, r7, #4
 8048728:	2200      	movs	r2, #0
 804872a:	601a      	str	r2, [r3, #0]
 804872c:	605a      	str	r2, [r3, #4]
 804872e:	609a      	str	r2, [r3, #8]
 8048730:	60da      	str	r2, [r3, #12]
 8048732:	611a      	str	r2, [r3, #16]
 8048734:	615a      	str	r2, [r3, #20]
 8048736:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8048738:	4b2c      	ldr	r3, [pc, #176]	; (80487ec <MX_TIM3_Init+0xe4>)
 804873a:	4a2d      	ldr	r2, [pc, #180]	; (80487f0 <MX_TIM3_Init+0xe8>)
 804873c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 319;
 804873e:	4b2b      	ldr	r3, [pc, #172]	; (80487ec <MX_TIM3_Init+0xe4>)
 8048740:	f240 123f 	movw	r2, #319	; 0x13f
 8048744:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8048746:	4b29      	ldr	r3, [pc, #164]	; (80487ec <MX_TIM3_Init+0xe4>)
 8048748:	2200      	movs	r2, #0
 804874a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000;
 804874c:	4b27      	ldr	r3, [pc, #156]	; (80487ec <MX_TIM3_Init+0xe4>)
 804874e:	f24c 3250 	movw	r2, #50000	; 0xc350
 8048752:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8048754:	4b25      	ldr	r3, [pc, #148]	; (80487ec <MX_TIM3_Init+0xe4>)
 8048756:	f44f 7280 	mov.w	r2, #256	; 0x100
 804875a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 804875c:	4b23      	ldr	r3, [pc, #140]	; (80487ec <MX_TIM3_Init+0xe4>)
 804875e:	2280      	movs	r2, #128	; 0x80
 8048760:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8048762:	4822      	ldr	r0, [pc, #136]	; (80487ec <MX_TIM3_Init+0xe4>)
 8048764:	f00b fb90 	bl	8053e88 <HAL_TIM_Base_Init>
 8048768:	4603      	mov	r3, r0
 804876a:	2b00      	cmp	r3, #0
 804876c:	d001      	beq.n	8048772 <MX_TIM3_Init+0x6a>
    Error_Handler();
 804876e:	f001 f9d3 	bl	8049b18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8048772:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8048776:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8048778:	f107 0328 	add.w	r3, r7, #40	; 0x28
 804877c:	4619      	mov	r1, r3
 804877e:	481b      	ldr	r0, [pc, #108]	; (80487ec <MX_TIM3_Init+0xe4>)
 8048780:	f00b ff42 	bl	8054608 <HAL_TIM_ConfigClockSource>
 8048784:	4603      	mov	r3, r0
 8048786:	2b00      	cmp	r3, #0
 8048788:	d001      	beq.n	804878e <MX_TIM3_Init+0x86>
    Error_Handler();
 804878a:	f001 f9c5 	bl	8049b18 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK) {
 804878e:	4817      	ldr	r0, [pc, #92]	; (80487ec <MX_TIM3_Init+0xe4>)
 8048790:	f00b fc69 	bl	8054066 <HAL_TIM_OC_Init>
 8048794:	4603      	mov	r3, r0
 8048796:	2b00      	cmp	r3, #0
 8048798:	d001      	beq.n	804879e <MX_TIM3_Init+0x96>
    Error_Handler();
 804879a:	f001 f9bd 	bl	8049b18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 804879e:	2300      	movs	r3, #0
 80487a0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80487a2:	2300      	movs	r3, #0
 80487a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 80487a6:	f107 0320 	add.w	r3, r7, #32
 80487aa:	4619      	mov	r1, r3
 80487ac:	480f      	ldr	r0, [pc, #60]	; (80487ec <MX_TIM3_Init+0xe4>)
 80487ae:	f00c fb01 	bl	8054db4 <HAL_TIMEx_MasterConfigSynchronization>
 80487b2:	4603      	mov	r3, r0
 80487b4:	2b00      	cmp	r3, #0
 80487b6:	d001      	beq.n	80487bc <MX_TIM3_Init+0xb4>
    Error_Handler();
 80487b8:	f001 f9ae 	bl	8049b18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80487bc:	2300      	movs	r3, #0
 80487be:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80487c0:	2300      	movs	r3, #0
 80487c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80487c4:	2300      	movs	r3, #0
 80487c6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80487c8:	2300      	movs	r3, #0
 80487ca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 80487cc:	1d3b      	adds	r3, r7, #4
 80487ce:	2200      	movs	r2, #0
 80487d0:	4619      	mov	r1, r3
 80487d2:	4806      	ldr	r0, [pc, #24]	; (80487ec <MX_TIM3_Init+0xe4>)
 80487d4:	f00b fe02 	bl	80543dc <HAL_TIM_OC_ConfigChannel>
 80487d8:	4603      	mov	r3, r0
 80487da:	2b00      	cmp	r3, #0
 80487dc:	d001      	beq.n	80487e2 <MX_TIM3_Init+0xda>
    Error_Handler();
 80487de:	f001 f99b 	bl	8049b18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80487e2:	bf00      	nop
 80487e4:	3738      	adds	r7, #56	; 0x38
 80487e6:	46bd      	mov	sp, r7
 80487e8:	bd80      	pop	{r7, pc}
 80487ea:	bf00      	nop
 80487ec:	2001bed0 	.word	0x2001bed0
 80487f0:	40000400 	.word	0x40000400

080487f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80487f4:	b580      	push	{r7, lr}
 80487f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80487f8:	4b13      	ldr	r3, [pc, #76]	; (8048848 <MX_USART2_UART_Init+0x54>)
 80487fa:	4a14      	ldr	r2, [pc, #80]	; (804884c <MX_USART2_UART_Init+0x58>)
 80487fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80487fe:	4b12      	ldr	r3, [pc, #72]	; (8048848 <MX_USART2_UART_Init+0x54>)
 8048800:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8048804:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8048806:	4b10      	ldr	r3, [pc, #64]	; (8048848 <MX_USART2_UART_Init+0x54>)
 8048808:	2200      	movs	r2, #0
 804880a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 804880c:	4b0e      	ldr	r3, [pc, #56]	; (8048848 <MX_USART2_UART_Init+0x54>)
 804880e:	2200      	movs	r2, #0
 8048810:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8048812:	4b0d      	ldr	r3, [pc, #52]	; (8048848 <MX_USART2_UART_Init+0x54>)
 8048814:	2200      	movs	r2, #0
 8048816:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8048818:	4b0b      	ldr	r3, [pc, #44]	; (8048848 <MX_USART2_UART_Init+0x54>)
 804881a:	220c      	movs	r2, #12
 804881c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 804881e:	4b0a      	ldr	r3, [pc, #40]	; (8048848 <MX_USART2_UART_Init+0x54>)
 8048820:	2200      	movs	r2, #0
 8048822:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8048824:	4b08      	ldr	r3, [pc, #32]	; (8048848 <MX_USART2_UART_Init+0x54>)
 8048826:	2200      	movs	r2, #0
 8048828:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK) {
 804882a:	4807      	ldr	r0, [pc, #28]	; (8048848 <MX_USART2_UART_Init+0x54>)
 804882c:	f00c fba4 	bl	8054f78 <HAL_UART_Init>
 8048830:	4603      	mov	r3, r0
 8048832:	2b00      	cmp	r3, #0
 8048834:	d001      	beq.n	804883a <MX_USART2_UART_Init+0x46>
    Error_Handler();
 8048836:	f001 f96f 	bl	8049b18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  HAL_UART_Receive_DMA(&huart2, uart_msg_code, UART_RX_CODE_LENGTH);
 804883a:	2204      	movs	r2, #4
 804883c:	4904      	ldr	r1, [pc, #16]	; (8048850 <MX_USART2_UART_Init+0x5c>)
 804883e:	4802      	ldr	r0, [pc, #8]	; (8048848 <MX_USART2_UART_Init+0x54>)
 8048840:	f00c fc79 	bl	8055136 <HAL_UART_Receive_DMA>

  /* USER CODE END USART2_Init 2 */

}
 8048844:	bf00      	nop
 8048846:	bd80      	pop	{r7, pc}
 8048848:	2001c254 	.word	0x2001c254
 804884c:	40004400 	.word	0x40004400
 8048850:	20008094 	.word	0x20008094

08048854 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8048854:	b580      	push	{r7, lr}
 8048856:	b082      	sub	sp, #8
 8048858:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 804885a:	2300      	movs	r3, #0
 804885c:	607b      	str	r3, [r7, #4]
 804885e:	4b10      	ldr	r3, [pc, #64]	; (80488a0 <MX_DMA_Init+0x4c>)
 8048860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8048862:	4a0f      	ldr	r2, [pc, #60]	; (80488a0 <MX_DMA_Init+0x4c>)
 8048864:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8048868:	6313      	str	r3, [r2, #48]	; 0x30
 804886a:	4b0d      	ldr	r3, [pc, #52]	; (80488a0 <MX_DMA_Init+0x4c>)
 804886c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804886e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8048872:	607b      	str	r3, [r7, #4]
 8048874:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8048876:	2200      	movs	r2, #0
 8048878:	2105      	movs	r1, #5
 804887a:	2010      	movs	r0, #16
 804887c:	f007 fe3e 	bl	80504fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8048880:	2010      	movs	r0, #16
 8048882:	f007 fe57 	bl	8050534 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8048886:	2200      	movs	r2, #0
 8048888:	2105      	movs	r1, #5
 804888a:	2011      	movs	r0, #17
 804888c:	f007 fe36 	bl	80504fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8048890:	2011      	movs	r0, #17
 8048892:	f007 fe4f 	bl	8050534 <HAL_NVIC_EnableIRQ>

}
 8048896:	bf00      	nop
 8048898:	3708      	adds	r7, #8
 804889a:	46bd      	mov	sp, r7
 804889c:	bd80      	pop	{r7, pc}
 804889e:	bf00      	nop
 80488a0:	40023800 	.word	0x40023800

080488a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80488a4:	b580      	push	{r7, lr}
 80488a6:	b08a      	sub	sp, #40	; 0x28
 80488a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80488aa:	f107 0314 	add.w	r3, r7, #20
 80488ae:	2200      	movs	r2, #0
 80488b0:	601a      	str	r2, [r3, #0]
 80488b2:	605a      	str	r2, [r3, #4]
 80488b4:	609a      	str	r2, [r3, #8]
 80488b6:	60da      	str	r2, [r3, #12]
 80488b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80488ba:	2300      	movs	r3, #0
 80488bc:	613b      	str	r3, [r7, #16]
 80488be:	4b52      	ldr	r3, [pc, #328]	; (8048a08 <MX_GPIO_Init+0x164>)
 80488c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80488c2:	4a51      	ldr	r2, [pc, #324]	; (8048a08 <MX_GPIO_Init+0x164>)
 80488c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80488c8:	6313      	str	r3, [r2, #48]	; 0x30
 80488ca:	4b4f      	ldr	r3, [pc, #316]	; (8048a08 <MX_GPIO_Init+0x164>)
 80488cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80488ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80488d2:	613b      	str	r3, [r7, #16]
 80488d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80488d6:	2300      	movs	r3, #0
 80488d8:	60fb      	str	r3, [r7, #12]
 80488da:	4b4b      	ldr	r3, [pc, #300]	; (8048a08 <MX_GPIO_Init+0x164>)
 80488dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80488de:	4a4a      	ldr	r2, [pc, #296]	; (8048a08 <MX_GPIO_Init+0x164>)
 80488e0:	f043 0304 	orr.w	r3, r3, #4
 80488e4:	6313      	str	r3, [r2, #48]	; 0x30
 80488e6:	4b48      	ldr	r3, [pc, #288]	; (8048a08 <MX_GPIO_Init+0x164>)
 80488e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80488ea:	f003 0304 	and.w	r3, r3, #4
 80488ee:	60fb      	str	r3, [r7, #12]
 80488f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80488f2:	2300      	movs	r3, #0
 80488f4:	60bb      	str	r3, [r7, #8]
 80488f6:	4b44      	ldr	r3, [pc, #272]	; (8048a08 <MX_GPIO_Init+0x164>)
 80488f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80488fa:	4a43      	ldr	r2, [pc, #268]	; (8048a08 <MX_GPIO_Init+0x164>)
 80488fc:	f043 0301 	orr.w	r3, r3, #1
 8048900:	6313      	str	r3, [r2, #48]	; 0x30
 8048902:	4b41      	ldr	r3, [pc, #260]	; (8048a08 <MX_GPIO_Init+0x164>)
 8048904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8048906:	f003 0301 	and.w	r3, r3, #1
 804890a:	60bb      	str	r3, [r7, #8]
 804890c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 804890e:	2300      	movs	r3, #0
 8048910:	607b      	str	r3, [r7, #4]
 8048912:	4b3d      	ldr	r3, [pc, #244]	; (8048a08 <MX_GPIO_Init+0x164>)
 8048914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8048916:	4a3c      	ldr	r2, [pc, #240]	; (8048a08 <MX_GPIO_Init+0x164>)
 8048918:	f043 0302 	orr.w	r3, r3, #2
 804891c:	6313      	str	r3, [r2, #48]	; 0x30
 804891e:	4b3a      	ldr	r3, [pc, #232]	; (8048a08 <MX_GPIO_Init+0x164>)
 8048920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8048922:	f003 0302 	and.w	r3, r3, #2
 8048926:	607b      	str	r3, [r7, #4]
 8048928:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : REAR_PROG0_PIN_Pin HEAD_PROG0_PIN_Pin HEAD_AND_REAR_ULTRALSONIC_RESET_N_PIN_Pin GUANGLIU_EN_Pin
     TOF_EN_Pin IMU_INT_Pin TOF_GPIO2_Pin */
  GPIO_InitStruct.Pin =
 804892a:	f240 63b7 	movw	r3, #1719	; 0x6b7
 804892e:	617b      	str	r3, [r7, #20]
      REAR_PROG0_PIN_Pin | HEAD_PROG0_PIN_Pin |
      HEAD_AND_REAR_ULTRALSONIC_RESET_N_PIN_Pin | GUANGLIU_EN_Pin | TOF_EN_Pin |
      IMU_INT_Pin | TOF_GPIO2_Pin | GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8048930:	2301      	movs	r3, #1
 8048932:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8048934:	2300      	movs	r3, #0
 8048936:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8048938:	2300      	movs	r3, #0
 804893a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 804893c:	f107 0314 	add.w	r3, r7, #20
 8048940:	4619      	mov	r1, r3
 8048942:	4832      	ldr	r0, [pc, #200]	; (8048a0c <MX_GPIO_Init+0x168>)
 8048944:	f008 fcec 	bl	8051320 <HAL_GPIO_Init>

  /*Configure GPIO pin : HEAD_AND_REAR_ULTRASONIC_INT_Pin */
  GPIO_InitStruct.Pin = HEAD_AND_REAR_ULTRASONIC_INT_Pin;
 8048948:	2308      	movs	r3, #8
 804894a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 804894c:	4b30      	ldr	r3, [pc, #192]	; (8048a10 <MX_GPIO_Init+0x16c>)
 804894e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8048950:	2300      	movs	r3, #0
 8048952:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(HEAD_AND_REAR_ULTRASONIC_INT_GPIO_Port, &GPIO_InitStruct);
 8048954:	f107 0314 	add.w	r3, r7, #20
 8048958:	4619      	mov	r1, r3
 804895a:	482c      	ldr	r0, [pc, #176]	; (8048a0c <MX_GPIO_Init+0x168>)
 804895c:	f008 fce0 	bl	8051320 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOF_CS_Pin */
  GPIO_InitStruct.Pin = TOF_CS_Pin;
 8048960:	2310      	movs	r3, #16
 8048962:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8048964:	2301      	movs	r3, #1
 8048966:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8048968:	2300      	movs	r3, #0
 804896a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 804896c:	2300      	movs	r3, #0
 804896e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOF_CS_GPIO_Port, &GPIO_InitStruct);
 8048970:	f107 0314 	add.w	r3, r7, #20
 8048974:	4619      	mov	r1, r3
 8048976:	4827      	ldr	r0, [pc, #156]	; (8048a14 <MX_GPIO_Init+0x170>)
 8048978:	f008 fcd2 	bl	8051320 <HAL_GPIO_Init>

  /*Configure GPIO pin : HEAD_AND_REAR_LED_DRIVER_EN_Pin */
  GPIO_InitStruct.Pin = HEAD_AND_REAR_LED_DRIVER_EN_Pin;
 804897c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8048980:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8048982:	2301      	movs	r3, #1
 8048984:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8048986:	2300      	movs	r3, #0
 8048988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 804898a:	2300      	movs	r3, #0
 804898c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(HEAD_AND_REAR_LED_DRIVER_EN_GPIO_Port, &GPIO_InitStruct);
 804898e:	f107 0314 	add.w	r3, r7, #20
 8048992:	4619      	mov	r1, r3
 8048994:	4820      	ldr	r0, [pc, #128]	; (8048a18 <MX_GPIO_Init+0x174>)
 8048996:	f008 fcc3 	bl	8051320 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOF_GPIO1_Pin */
  GPIO_InitStruct.Pin = TOF_GPIO1_Pin;
 804899a:	2340      	movs	r3, #64	; 0x40
 804899c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 804899e:	2300      	movs	r3, #0
 80489a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80489a2:	2300      	movs	r3, #0
 80489a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOF_GPIO1_GPIO_Port, &GPIO_InitStruct);
 80489a6:	f107 0314 	add.w	r3, r7, #20
 80489aa:	4619      	mov	r1, r3
 80489ac:	4817      	ldr	r0, [pc, #92]	; (8048a0c <MX_GPIO_Init+0x168>)
 80489ae:	f008 fcb7 	bl	8051320 <HAL_GPIO_Init>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC,
 80489b2:	2200      	movs	r2, #0
 80489b4:	f240 21b7 	movw	r1, #695	; 0x2b7
 80489b8:	4814      	ldr	r0, [pc, #80]	; (8048a0c <MX_GPIO_Init+0x168>)
 80489ba:	f008 fe65 	bl	8051688 <HAL_GPIO_WritePin>
                    REAR_PROG0_PIN_Pin | HEAD_PROG0_PIN_Pin |
                    HEAD_AND_REAR_ULTRALSONIC_RESET_N_PIN_Pin | GUANGLIU_EN_Pin
                    | TOF_EN_Pin | IMU_INT_Pin | TOF_GPIO2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOF_CS_GPIO_Port, TOF_CS_Pin, GPIO_PIN_RESET);
 80489be:	2200      	movs	r2, #0
 80489c0:	2110      	movs	r1, #16
 80489c2:	4814      	ldr	r0, [pc, #80]	; (8048a14 <MX_GPIO_Init+0x170>)
 80489c4:	f008 fe60 	bl	8051688 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HEAD_AND_REAR_LED_DRIVER_EN_GPIO_Port,
 80489c8:	2200      	movs	r2, #0
 80489ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80489ce:	4812      	ldr	r0, [pc, #72]	; (8048a18 <MX_GPIO_Init+0x174>)
 80489d0:	f008 fe5a 	bl	8051688 <HAL_GPIO_WritePin>
                    HEAD_AND_REAR_LED_DRIVER_EN_Pin, GPIO_PIN_RESET);

  /*ultralsound intterupt level shift enable */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 80489d4:	2201      	movs	r2, #1
 80489d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80489da:	480c      	ldr	r0, [pc, #48]	; (8048a0c <MX_GPIO_Init+0x168>)
 80489dc:	f008 fe54 	bl	8051688 <HAL_GPIO_WritePin>

  /* EXTI interrupt init */
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 80489e0:	2200      	movs	r2, #0
 80489e2:	2105      	movs	r1, #5
 80489e4:	2009      	movs	r0, #9
 80489e6:	f007 fd89 	bl	80504fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80489ea:	2009      	movs	r0, #9
 80489ec:	f007 fda2 	bl	8050534 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80489f0:	2200      	movs	r2, #0
 80489f2:	2105      	movs	r1, #5
 80489f4:	2017      	movs	r0, #23
 80489f6:	f007 fd81 	bl	80504fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80489fa:	2017      	movs	r0, #23
 80489fc:	f007 fd9a 	bl	8050534 <HAL_NVIC_EnableIRQ>
}
 8048a00:	bf00      	nop
 8048a02:	3728      	adds	r7, #40	; 0x28
 8048a04:	46bd      	mov	sp, r7
 8048a06:	bd80      	pop	{r7, pc}
 8048a08:	40023800 	.word	0x40023800
 8048a0c:	40020800 	.word	0x40020800
 8048a10:	10110000 	.word	0x10110000
 8048a14:	40020000 	.word	0x40020000
 8048a18:	40020400 	.word	0x40020400

08048a1c <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 8048a1c:	b580      	push	{r7, lr}
 8048a1e:	b082      	sub	sp, #8
 8048a20:	af00      	add	r7, sp, #0
 8048a22:	6078      	str	r0, [r7, #4]
  if (uart_log_print_enable)
 8048a24:	4b07      	ldr	r3, [pc, #28]	; (8048a44 <__io_putchar+0x28>)
 8048a26:	781b      	ldrb	r3, [r3, #0]
 8048a28:	2b00      	cmp	r3, #0
 8048a2a:	d006      	beq.n	8048a3a <__io_putchar+0x1e>
    HAL_UART_Transmit(&huart2, (uint8_t *) & ch, 1, 0xFFFF);
 8048a2c:	1d39      	adds	r1, r7, #4
 8048a2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8048a32:	2201      	movs	r2, #1
 8048a34:	4804      	ldr	r0, [pc, #16]	; (8048a48 <__io_putchar+0x2c>)
 8048a36:	f00c faec 	bl	8055012 <HAL_UART_Transmit>
  //HAL_UART_Transmit_DMA(&huart2, (uint8_t*) &ch, 1);
  return ch;
 8048a3a:	687b      	ldr	r3, [r7, #4]
}
 8048a3c:	4618      	mov	r0, r3
 8048a3e:	3708      	adds	r7, #8
 8048a40:	46bd      	mov	sp, r7
 8048a42:	bd80      	pop	{r7, pc}
 8048a44:	2000788c 	.word	0x2000788c
 8048a48:	2001c254 	.word	0x2001c254

08048a4c <Get_BoardID>:

void Get_BoardID()
{
 8048a4c:	b598      	push	{r3, r4, r7, lr}
 8048a4e:	af00      	add	r7, sp, #0
  boardID =
      (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) << 1) | HAL_GPIO_ReadPin(GPIOB,
 8048a50:	2101      	movs	r1, #1
 8048a52:	4809      	ldr	r0, [pc, #36]	; (8048a78 <Get_BoardID+0x2c>)
 8048a54:	f008 fe00 	bl	8051658 <HAL_GPIO_ReadPin>
 8048a58:	4603      	mov	r3, r0
 8048a5a:	005b      	lsls	r3, r3, #1
 8048a5c:	b25c      	sxtb	r4, r3
 8048a5e:	2102      	movs	r1, #2
 8048a60:	4805      	ldr	r0, [pc, #20]	; (8048a78 <Get_BoardID+0x2c>)
 8048a62:	f008 fdf9 	bl	8051658 <HAL_GPIO_ReadPin>
 8048a66:	4603      	mov	r3, r0
 8048a68:	b25b      	sxtb	r3, r3
 8048a6a:	4323      	orrs	r3, r4
 8048a6c:	b25b      	sxtb	r3, r3
 8048a6e:	b2da      	uxtb	r2, r3
  boardID =
 8048a70:	4b02      	ldr	r3, [pc, #8]	; (8048a7c <Get_BoardID+0x30>)
 8048a72:	701a      	strb	r2, [r3, #0]
                                                                    GPIO_PIN_1);
}
 8048a74:	bf00      	nop
 8048a76:	bd98      	pop	{r3, r4, r7, pc}
 8048a78:	40020400 	.word	0x40020400
 8048a7c:	20007886 	.word	0x20007886

08048a80 <HAL_CAN_RxFifo0MsgPendingCallback>:

// can related callback function when enable interrupt mode
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef * hcan)
{
 8048a80:	b580      	push	{r7, lr}
 8048a82:	b08e      	sub	sp, #56	; 0x38
 8048a84:	af00      	add	r7, sp, #0
 8048a86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef HAL_RetStaus;
  can_message_event_t can_event_t;
  osStatus_t res;

  if (hcan == &hcan1) {
 8048a88:	687b      	ldr	r3, [r7, #4]
 8048a8a:	4a1e      	ldr	r2, [pc, #120]	; (8048b04 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8048a8c:	4293      	cmp	r3, r2
 8048a8e:	d118      	bne.n	8048ac2 <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
    HAL_RetStaus = HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0,
 8048a90:	f107 030c 	add.w	r3, r7, #12
 8048a94:	331c      	adds	r3, #28
 8048a96:	f107 020c 	add.w	r2, r7, #12
 8048a9a:	2100      	movs	r1, #0
 8048a9c:	6878      	ldr	r0, [r7, #4]
 8048a9e:	f007 f8f4 	bl	804fc8a <HAL_CAN_GetRxMessage>
 8048aa2:	4603      	mov	r3, r0
 8048aa4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                                        &can_event_t.CanHeader.RxHeader,
                                        can_event_t.CanData.RxData);
    if (HAL_OK == HAL_RetStaus) {
 8048aa8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8048aac:	2b00      	cmp	r3, #0
 8048aae:	d108      	bne.n	8048ac2 <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
      res = osMessageQueuePut(Can1ReceiveQHandle, &can_event_t, 0, 0);
 8048ab0:	4b15      	ldr	r3, [pc, #84]	; (8048b08 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 8048ab2:	6818      	ldr	r0, [r3, #0]
 8048ab4:	f107 010c 	add.w	r1, r7, #12
 8048ab8:	2300      	movs	r3, #0
 8048aba:	2200      	movs	r2, #0
 8048abc:	f00d fca2 	bl	8056404 <osMessageQueuePut>
 8048ac0:	6338      	str	r0, [r7, #48]	; 0x30
    } else {

    }
  }

  if (hcan == &hcan2) {
 8048ac2:	687b      	ldr	r3, [r7, #4]
 8048ac4:	4a11      	ldr	r2, [pc, #68]	; (8048b0c <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 8048ac6:	4293      	cmp	r3, r2
 8048ac8:	d118      	bne.n	8048afc <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>
    HAL_RetStaus = HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0,
 8048aca:	f107 030c 	add.w	r3, r7, #12
 8048ace:	331c      	adds	r3, #28
 8048ad0:	f107 020c 	add.w	r2, r7, #12
 8048ad4:	2100      	movs	r1, #0
 8048ad6:	6878      	ldr	r0, [r7, #4]
 8048ad8:	f007 f8d7 	bl	804fc8a <HAL_CAN_GetRxMessage>
 8048adc:	4603      	mov	r3, r0
 8048ade:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                                        &can_event_t.CanHeader.RxHeader,
                                        can_event_t.CanData.RxData);
    if (HAL_OK == HAL_RetStaus) {
 8048ae2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8048ae6:	2b00      	cmp	r3, #0
 8048ae8:	d108      	bne.n	8048afc <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>
#if USE_P1
      res = osMessageQueuePut(Can2ReceiveQHandle, &can_event_t, 0, 0);
 8048aea:	4b09      	ldr	r3, [pc, #36]	; (8048b10 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 8048aec:	6818      	ldr	r0, [r3, #0]
 8048aee:	f107 010c 	add.w	r1, r7, #12
 8048af2:	2300      	movs	r3, #0
 8048af4:	2200      	movs	r2, #0
 8048af6:	f00d fc85 	bl	8056404 <osMessageQueuePut>
 8048afa:	6338      	str	r0, [r7, #48]	; 0x30
      //CAN2 frame was successfully received.
    } else {

    }
  }
}
 8048afc:	bf00      	nop
 8048afe:	3738      	adds	r7, #56	; 0x38
 8048b00:	46bd      	mov	sp, r7
 8048b02:	bd80      	pop	{r7, pc}
 8048b04:	2001c29c 	.word	0x2001c29c
 8048b08:	2001be6c 	.word	0x2001be6c
 8048b0c:	2001bf48 	.word	0x2001bf48
 8048b10:	2001c298 	.word	0x2001c298

08048b14 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8048b14:	b580      	push	{r7, lr}
 8048b16:	b082      	sub	sp, #8
 8048b18:	af00      	add	r7, sp, #0
 8048b1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  if (hcan == &hcan1) {
 8048b1c:	687b      	ldr	r3, [r7, #4]
 8048b1e:	4a0b      	ldr	r2, [pc, #44]	; (8048b4c <HAL_CAN_ErrorCallback+0x38>)
 8048b20:	4293      	cmp	r3, r2
 8048b22:	d105      	bne.n	8048b30 <HAL_CAN_ErrorCallback+0x1c>
    printf("can1 errorcode: 0x%x \r\n", hcan->ErrorCode);
 8048b24:	687b      	ldr	r3, [r7, #4]
 8048b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8048b28:	4619      	mov	r1, r3
 8048b2a:	4809      	ldr	r0, [pc, #36]	; (8048b50 <HAL_CAN_ErrorCallback+0x3c>)
 8048b2c:	f017 ff22 	bl	8060974 <iprintf>
  }

  if (hcan == &hcan2) {
 8048b30:	687b      	ldr	r3, [r7, #4]
 8048b32:	4a08      	ldr	r2, [pc, #32]	; (8048b54 <HAL_CAN_ErrorCallback+0x40>)
 8048b34:	4293      	cmp	r3, r2
 8048b36:	d105      	bne.n	8048b44 <HAL_CAN_ErrorCallback+0x30>
    printf("can2 errorcode: 0x%x \r\n", hcan->ErrorCode);
 8048b38:	687b      	ldr	r3, [r7, #4]
 8048b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8048b3c:	4619      	mov	r1, r3
 8048b3e:	4806      	ldr	r0, [pc, #24]	; (8048b58 <HAL_CAN_ErrorCallback+0x44>)
 8048b40:	f017 ff18 	bl	8060974 <iprintf>
  }
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8048b44:	bf00      	nop
 8048b46:	3708      	adds	r7, #8
 8048b48:	46bd      	mov	sp, r7
 8048b4a:	bd80      	pop	{r7, pc}
 8048b4c:	2001c29c 	.word	0x2001c29c
 8048b50:	08065a88 	.word	0x08065a88
 8048b54:	2001bf48 	.word	0x2001bf48
 8048b58:	08065aa0 	.word	0x08065aa0

08048b5c <HAL_UART_RxCpltCallback>:

// uart related callback function when enable interrupt mode
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart)
{
 8048b5c:	b580      	push	{r7, lr}
 8048b5e:	b084      	sub	sp, #16
 8048b60:	af00      	add	r7, sp, #0
 8048b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef HAL_RetStaus;
  osStatus_t res;

  if (huart == &huart2) {
 8048b64:	687b      	ldr	r3, [r7, #4]
 8048b66:	4a0b      	ldr	r2, [pc, #44]	; (8048b94 <HAL_UART_RxCpltCallback+0x38>)
 8048b68:	4293      	cmp	r3, r2
 8048b6a:	d10e      	bne.n	8048b8a <HAL_UART_RxCpltCallback+0x2e>
    res = osMessageQueuePut(Uart2MsgQHandle, uart_msg_code, 0, 0);
 8048b6c:	4b0a      	ldr	r3, [pc, #40]	; (8048b98 <HAL_UART_RxCpltCallback+0x3c>)
 8048b6e:	6818      	ldr	r0, [r3, #0]
 8048b70:	2300      	movs	r3, #0
 8048b72:	2200      	movs	r2, #0
 8048b74:	4909      	ldr	r1, [pc, #36]	; (8048b9c <HAL_UART_RxCpltCallback+0x40>)
 8048b76:	f00d fc45 	bl	8056404 <osMessageQueuePut>
 8048b7a:	60f8      	str	r0, [r7, #12]
    if (res != osOK) {
 8048b7c:	68fb      	ldr	r3, [r7, #12]
 8048b7e:	2b00      	cmp	r3, #0
 8048b80:	d003      	beq.n	8048b8a <HAL_UART_RxCpltCallback+0x2e>
      printf("res:%d", res);
 8048b82:	68f9      	ldr	r1, [r7, #12]
 8048b84:	4806      	ldr	r0, [pc, #24]	; (8048ba0 <HAL_UART_RxCpltCallback+0x44>)
 8048b86:	f017 fef5 	bl	8060974 <iprintf>
    }

  }
}
 8048b8a:	bf00      	nop
 8048b8c:	3710      	adds	r7, #16
 8048b8e:	46bd      	mov	sp, r7
 8048b90:	bd80      	pop	{r7, pc}
 8048b92:	bf00      	nop
 8048b94:	2001c254 	.word	0x2001c254
 8048b98:	2001bf70 	.word	0x2001bf70
 8048b9c:	20008094 	.word	0x20008094
 8048ba0:	08065ab8 	.word	0x08065ab8

08048ba4 <StartCan1BroadcastTask>:
 * @brief  Function implementing the Can1Broadcast thread.
 * @param  argument: Not used
 * @retval None
 */
void StartCan1BroadcastTask(void *argument)
{
 8048ba4:	b580      	push	{r7, lr}
 8048ba6:	b08e      	sub	sp, #56	; 0x38
 8048ba8:	af00      	add	r7, sp, #0
 8048baa:	6078      	str	r0, [r7, #4]
  can_message_event_t can_event_t;

  /* Infinite loop */
  for (;;) {
    res =
        osMessageQueueGet(Can1BroadcastQHandle, &can_event_t, 0, portMAX_DELAY);
 8048bac:	4b16      	ldr	r3, [pc, #88]	; (8048c08 <StartCan1BroadcastTask+0x64>)
 8048bae:	6818      	ldr	r0, [r3, #0]
 8048bb0:	f107 010c 	add.w	r1, r7, #12
 8048bb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8048bb8:	2200      	movs	r2, #0
 8048bba:	f00d fc83 	bl	80564c4 <osMessageQueueGet>
 8048bbe:	6378      	str	r0, [r7, #52]	; 0x34
    //printf("CAN1 BC MSG: (0x%x) \r\n",
    //         can_event_t.CanHeader.TxHeader.StdId);
    /*Configure Transmission process */
    can_event_t.CanHeader.TxHeader.RTR = CAN_RTR_DATA;
 8048bc0:	2300      	movs	r3, #0
 8048bc2:	61bb      	str	r3, [r7, #24]
    can_event_t.CanHeader.TxHeader.IDE = CAN_ID_STD;
 8048bc4:	2300      	movs	r3, #0
 8048bc6:	617b      	str	r3, [r7, #20]
    can_event_t.CanHeader.TxHeader.DLC = 8;
 8048bc8:	2308      	movs	r3, #8
 8048bca:	61fb      	str	r3, [r7, #28]
    can_event_t.CanHeader.TxHeader.TransmitGlobalTime = DISABLE;
 8048bcc:	2300      	movs	r3, #0
 8048bce:	f887 3020 	strb.w	r3, [r7, #32]
    /* CAN send test. */
    if (HAL_CAN_AddTxMessage(&hcan1, &can_event_t.CanHeader.TxHeader,
 8048bd2:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8048bd6:	f107 030c 	add.w	r3, r7, #12
 8048bda:	f103 021c 	add.w	r2, r3, #28
 8048bde:	f107 010c 	add.w	r1, r7, #12
 8048be2:	4603      	mov	r3, r0
 8048be4:	4809      	ldr	r0, [pc, #36]	; (8048c0c <StartCan1BroadcastTask+0x68>)
 8048be6:	f006 ff75 	bl	804fad4 <HAL_CAN_AddTxMessage>
 8048bea:	4603      	mov	r3, r0
 8048bec:	2b00      	cmp	r3, #0
 8048bee:	d007      	beq.n	8048c00 <StartCan1BroadcastTask+0x5c>
                             can_event_t.CanData.TxData,
                             &TxMailbox) != HAL_OK) {
      printf("can1 errorcode: 0x%x \r\n", hcan1.ErrorCode);
 8048bf0:	4b06      	ldr	r3, [pc, #24]	; (8048c0c <StartCan1BroadcastTask+0x68>)
 8048bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8048bf4:	4619      	mov	r1, r3
 8048bf6:	4806      	ldr	r0, [pc, #24]	; (8048c10 <StartCan1BroadcastTask+0x6c>)
 8048bf8:	f017 febc 	bl	8060974 <iprintf>
      /* Transmission request Error */
      Error_Handler();
 8048bfc:	f000 ff8c 	bl	8049b18 <Error_Handler>
    }
    osDelay(1);
 8048c00:	2001      	movs	r0, #1
 8048c02:	f00d fa7a 	bl	80560fa <osDelay>
    res =
 8048c06:	e7d1      	b.n	8048bac <StartCan1BroadcastTask+0x8>
 8048c08:	2001c004 	.word	0x2001c004
 8048c0c:	2001c29c 	.word	0x2001c29c
 8048c10:	08065a88 	.word	0x08065a88

08048c14 <StartCan1ReceiveTask>:
 * @brief  Function implementing the Can1Receive thread.
 * @param  argument: Not used
 * @retval None
 */
void StartCan1ReceiveTask(void *argument)
{
 8048c14:	b580      	push	{r7, lr}
 8048c16:	b0a8      	sub	sp, #160	; 0xa0
 8048c18:	af00      	add	r7, sp, #0
 8048c1a:	6078      	str	r0, [r7, #4]
  sensor_message_event_type event_type;
  uint8_t sensor_type;
  int8_t command_code;
  for (;;) {
    //printf("waiting for can1 message \r\n");
    res = osMessageQueueGet(Can1ReceiveQHandle, &can_event_t, 0, portMAX_DELAY);
 8048c1c:	4bc4      	ldr	r3, [pc, #784]	; (8048f30 <StartCan1ReceiveTask+0x31c>)
 8048c1e:	6818      	ldr	r0, [r3, #0]
 8048c20:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8048c24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8048c28:	2200      	movs	r2, #0
 8048c2a:	f00d fc4b 	bl	80564c4 <osMessageQueueGet>
 8048c2e:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
    printf("rev can1 msg StdId: 0x%x\r\n",
 8048c32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8048c34:	4619      	mov	r1, r3
 8048c36:	48bf      	ldr	r0, [pc, #764]	; (8048f34 <StartCan1ReceiveTask+0x320>)
 8048c38:	f017 fe9c 	bl	8060974 <iprintf>
           can_event_t.CanHeader.RxHeader.StdId);
    event_type =
        (can_event_t.CanHeader.RxHeader.
 8048c3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
         StdId & SENSOR_EVENT_MESSAGE_BIT_MASK) >>
 8048c3e:	0a1b      	lsrs	r3, r3, #8
 8048c40:	b2db      	uxtb	r3, r3
    event_type =
 8048c42:	f003 030f 	and.w	r3, r3, #15
 8048c46:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
        SENSOR_EVENT_MESSAGE_BIT_SHIFT;
    sensor_type =
        (can_event_t.CanHeader.RxHeader.
 8048c4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
         StdId & SENSOR_TYPE_BIT_MASK) >> SENSOR_TYPE_BIT_SHIFT;
 8048c4c:	091b      	lsrs	r3, r3, #4
 8048c4e:	b2db      	uxtb	r3, r3
    sensor_type =
 8048c50:	f003 030f 	and.w	r3, r3, #15
 8048c54:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
    command_code =
        can_event_t.CanHeader.RxHeader.StdId & SENSOR_COMMAND_BIT_MASK;
 8048c58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8048c5a:	b25b      	sxtb	r3, r3
    command_code =
 8048c5c:	f003 030f 	and.w	r3, r3, #15
 8048c60:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
    //printf("can code: {%d, %d, %d}\r\n", event_type, sensor_type, command_code);
    if ((event_type == SENSOR_DEBUG_CONFIG_MSG)
 8048c64:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8048c68:	2b07      	cmp	r3, #7
 8048c6a:	d130      	bne.n	8048cce <StartCan1ReceiveTask+0xba>
        && (sensor_type == SENSOR_TYPE_LED_HEAD
 8048c6c:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8048c70:	2b04      	cmp	r3, #4
 8048c72:	d003      	beq.n	8048c7c <StartCan1ReceiveTask+0x68>
            || sensor_type == SENSOR_TYPE_LED_REAR)) {
 8048c74:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8048c78:	2b09      	cmp	r3, #9
 8048c7a:	d128      	bne.n	8048cce <StartCan1ReceiveTask+0xba>
      if (sensor_avaiable_check(sensor_type)) {
 8048c7c:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8048c80:	4618      	mov	r0, r3
 8048c82:	f003 fe7b 	bl	804c97c <sensor_avaiable_check>
 8048c86:	4603      	mov	r3, r0
 8048c88:	2b00      	cmp	r3, #0
 8048c8a:	d015      	beq.n	8048cb8 <StartCan1ReceiveTask+0xa4>
        sensor_msg_event.message_event_type = event_type;
 8048c8c:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8048c90:	743b      	strb	r3, [r7, #16]
        sensor_msg_event.message_event_t.config_event.config_type =
 8048c92:	2309      	movs	r3, #9
 8048c94:	767b      	strb	r3, [r7, #25]
            SENSOR_LED_MODE_CONFIG;
        sensor_msg_event.message_event_t.config_event.cfg_data.
            config_data_u8[0] = can_event_t.CanData.RxData[0];
 8048c96:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8048c9a:	773b      	strb	r3, [r7, #28]
        sensor_msg_event.message_event_t.config_event.sensor_type = sensor_type;
 8048c9c:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8048ca0:	763b      	strb	r3, [r7, #24]
        res = osMessageQueuePut(SensorMsgQHandle, &sensor_msg_event, 0, 0);
 8048ca2:	4ba5      	ldr	r3, [pc, #660]	; (8048f38 <StartCan1ReceiveTask+0x324>)
 8048ca4:	6818      	ldr	r0, [r3, #0]
 8048ca6:	f107 0110 	add.w	r1, r7, #16
 8048caa:	2300      	movs	r3, #0
 8048cac:	2200      	movs	r2, #0
 8048cae:	f00d fba9 	bl	8056404 <osMessageQueuePut>
 8048cb2:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
      if (sensor_avaiable_check(sensor_type)) {
 8048cb6:	e1d8      	b.n	804906a <StartCan1ReceiveTask+0x456>
      } else
        res = osMessageQueuePut(Can2BroadcastQHandle, &can_event_t, 0, 0);
 8048cb8:	4ba0      	ldr	r3, [pc, #640]	; (8048f3c <StartCan1ReceiveTask+0x328>)
 8048cba:	6818      	ldr	r0, [r3, #0]
 8048cbc:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8048cc0:	2300      	movs	r3, #0
 8048cc2:	2200      	movs	r2, #0
 8048cc4:	f00d fb9e 	bl	8056404 <osMessageQueuePut>
 8048cc8:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
      if (sensor_avaiable_check(sensor_type)) {
 8048ccc:	e1cd      	b.n	804906a <StartCan1ReceiveTask+0x456>

    } else if (event_type == SENSOR_CONFIG_MESSAGE) {
 8048cce:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8048cd2:	2b00      	cmp	r3, #0
 8048cd4:	f040 80d2 	bne.w	8048e7c <StartCan1ReceiveTask+0x268>
      //check if supporting this kind of sensor
      if (command_code == SENSOR_ACTIVATE)
 8048cd8:	f997 3099 	ldrsb.w	r3, [r7, #153]	; 0x99
 8048cdc:	2b01      	cmp	r3, #1
 8048cde:	d10e      	bne.n	8048cfe <StartCan1ReceiveTask+0xea>
        CAN1_ENABLED_SENSORBIT |= (1 << sensor_type);
 8048ce0:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8048ce4:	2201      	movs	r2, #1
 8048ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8048cea:	b21a      	sxth	r2, r3
 8048cec:	4b94      	ldr	r3, [pc, #592]	; (8048f40 <StartCan1ReceiveTask+0x32c>)
 8048cee:	881b      	ldrh	r3, [r3, #0]
 8048cf0:	b21b      	sxth	r3, r3
 8048cf2:	4313      	orrs	r3, r2
 8048cf4:	b21b      	sxth	r3, r3
 8048cf6:	b29a      	uxth	r2, r3
 8048cf8:	4b91      	ldr	r3, [pc, #580]	; (8048f40 <StartCan1ReceiveTask+0x32c>)
 8048cfa:	801a      	strh	r2, [r3, #0]
 8048cfc:	e013      	b.n	8048d26 <StartCan1ReceiveTask+0x112>
      else if (command_code == SENSOR_DEACTIVATE)
 8048cfe:	f997 3099 	ldrsb.w	r3, [r7, #153]	; 0x99
 8048d02:	2b00      	cmp	r3, #0
 8048d04:	d10f      	bne.n	8048d26 <StartCan1ReceiveTask+0x112>
        CAN1_ENABLED_SENSORBIT &= ~(1 << sensor_type);
 8048d06:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8048d0a:	2201      	movs	r2, #1
 8048d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8048d10:	b21b      	sxth	r3, r3
 8048d12:	43db      	mvns	r3, r3
 8048d14:	b21a      	sxth	r2, r3
 8048d16:	4b8a      	ldr	r3, [pc, #552]	; (8048f40 <StartCan1ReceiveTask+0x32c>)
 8048d18:	881b      	ldrh	r3, [r3, #0]
 8048d1a:	b21b      	sxth	r3, r3
 8048d1c:	4013      	ands	r3, r2
 8048d1e:	b21b      	sxth	r3, r3
 8048d20:	b29a      	uxth	r2, r3
 8048d22:	4b87      	ldr	r3, [pc, #540]	; (8048f40 <StartCan1ReceiveTask+0x32c>)
 8048d24:	801a      	strh	r2, [r3, #0]
      if (command_code == SENSOR_CALIBRATION_RESULT)
 8048d26:	f997 3099 	ldrsb.w	r3, [r7, #153]	; 0x99
 8048d2a:	2b08      	cmp	r3, #8
 8048d2c:	d10d      	bne.n	8048d4a <StartCan1ReceiveTask+0x136>
        CAN1_GET_CALI_SENSORBIT |= (1 << sensor_type);
 8048d2e:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8048d32:	2201      	movs	r2, #1
 8048d34:	fa02 f303 	lsl.w	r3, r2, r3
 8048d38:	b21a      	sxth	r2, r3
 8048d3a:	4b82      	ldr	r3, [pc, #520]	; (8048f44 <StartCan1ReceiveTask+0x330>)
 8048d3c:	881b      	ldrh	r3, [r3, #0]
 8048d3e:	b21b      	sxth	r3, r3
 8048d40:	4313      	orrs	r3, r2
 8048d42:	b21b      	sxth	r3, r3
 8048d44:	b29a      	uxth	r2, r3
 8048d46:	4b7f      	ldr	r3, [pc, #508]	; (8048f44 <StartCan1ReceiveTask+0x330>)
 8048d48:	801a      	strh	r2, [r3, #0]

      if (sensor_avaiable_check(sensor_type)) {
 8048d4a:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8048d4e:	4618      	mov	r0, r3
 8048d50:	f003 fe14 	bl	804c97c <sensor_avaiable_check>
 8048d54:	4603      	mov	r3, r0
 8048d56:	2b00      	cmp	r3, #0
 8048d58:	f000 8085 	beq.w	8048e66 <StartCan1ReceiveTask+0x252>
        switch (command_code) {
 8048d5c:	f997 3099 	ldrsb.w	r3, [r7, #153]	; 0x99
 8048d60:	2b08      	cmp	r3, #8
 8048d62:	d86f      	bhi.n	8048e44 <StartCan1ReceiveTask+0x230>
 8048d64:	a201      	add	r2, pc, #4	; (adr r2, 8048d6c <StartCan1ReceiveTask+0x158>)
 8048d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8048d6a:	bf00      	nop
 8048d6c:	08048db5 	.word	0x08048db5
 8048d70:	08048d91 	.word	0x08048d91
 8048d74:	08048dd9 	.word	0x08048dd9
 8048d78:	08048dfd 	.word	0x08048dfd
 8048d7c:	08048e45 	.word	0x08048e45
 8048d80:	08048e45 	.word	0x08048e45
 8048d84:	08048e45 	.word	0x08048e45
 8048d88:	08048e45 	.word	0x08048e45
 8048d8c:	08048e21 	.word	0x08048e21
        case SENSOR_ACTIVATE:
          //receive sensor enable message and forward it to smgr
          sensor_msg_event.message_event_type = SENSOR_CONFIG_MESSAGE;
 8048d90:	2300      	movs	r3, #0
 8048d92:	743b      	strb	r3, [r7, #16]
          sensor_msg_event.message_event_t.config_event.config_type =
 8048d94:	2301      	movs	r3, #1
 8048d96:	767b      	strb	r3, [r7, #25]
              SENSOR_ACTIVATE;
          sensor_msg_event.message_event_t.config_event.sensor_type =
 8048d98:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8048d9c:	763b      	strb	r3, [r7, #24]
              sensor_type;
          res = osMessageQueuePut(SensorMsgQHandle, &sensor_msg_event, 0, 0);
 8048d9e:	4b66      	ldr	r3, [pc, #408]	; (8048f38 <StartCan1ReceiveTask+0x324>)
 8048da0:	6818      	ldr	r0, [r3, #0]
 8048da2:	f107 0110 	add.w	r1, r7, #16
 8048da6:	2300      	movs	r3, #0
 8048da8:	2200      	movs	r2, #0
 8048daa:	f00d fb2b 	bl	8056404 <osMessageQueuePut>
 8048dae:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
          break;
 8048db2:	e048      	b.n	8048e46 <StartCan1ReceiveTask+0x232>
        case SENSOR_DEACTIVATE:
          sensor_msg_event.message_event_type = SENSOR_CONFIG_MESSAGE;
 8048db4:	2300      	movs	r3, #0
 8048db6:	743b      	strb	r3, [r7, #16]
          sensor_msg_event.message_event_t.config_event.config_type =
 8048db8:	2300      	movs	r3, #0
 8048dba:	767b      	strb	r3, [r7, #25]
              SENSOR_DEACTIVATE;
          sensor_msg_event.message_event_t.config_event.sensor_type =
 8048dbc:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8048dc0:	763b      	strb	r3, [r7, #24]
              sensor_type;
          res = osMessageQueuePut(SensorMsgQHandle, &sensor_msg_event, 0, 0);
 8048dc2:	4b5d      	ldr	r3, [pc, #372]	; (8048f38 <StartCan1ReceiveTask+0x324>)
 8048dc4:	6818      	ldr	r0, [r3, #0]
 8048dc6:	f107 0110 	add.w	r1, r7, #16
 8048dca:	2300      	movs	r3, #0
 8048dcc:	2200      	movs	r2, #0
 8048dce:	f00d fb19 	bl	8056404 <osMessageQueuePut>
 8048dd2:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
          break;
 8048dd6:	e036      	b.n	8048e46 <StartCan1ReceiveTask+0x232>
        case SENSOR_CONFIG_SELFTEST:
          sensor_msg_event.message_event_type = SENSOR_CONFIG_MESSAGE;
 8048dd8:	2300      	movs	r3, #0
 8048dda:	743b      	strb	r3, [r7, #16]
          sensor_msg_event.message_event_t.config_event.config_type =
 8048ddc:	2302      	movs	r3, #2
 8048dde:	767b      	strb	r3, [r7, #25]
              SENSOR_CONFIG_SELFTEST;
          sensor_msg_event.message_event_t.config_event.sensor_type =
 8048de0:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8048de4:	763b      	strb	r3, [r7, #24]
              sensor_type;
          res = osMessageQueuePut(SensorMsgQHandle, &sensor_msg_event, 0, 0);
 8048de6:	4b54      	ldr	r3, [pc, #336]	; (8048f38 <StartCan1ReceiveTask+0x324>)
 8048de8:	6818      	ldr	r0, [r3, #0]
 8048dea:	f107 0110 	add.w	r1, r7, #16
 8048dee:	2300      	movs	r3, #0
 8048df0:	2200      	movs	r2, #0
 8048df2:	f00d fb07 	bl	8056404 <osMessageQueuePut>
 8048df6:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
          break;
 8048dfa:	e024      	b.n	8048e46 <StartCan1ReceiveTask+0x232>
        case SENSOR_CONFIG_CALIBRATION:
          sensor_msg_event.message_event_type = SENSOR_CONFIG_MESSAGE;
 8048dfc:	2300      	movs	r3, #0
 8048dfe:	743b      	strb	r3, [r7, #16]
          sensor_msg_event.message_event_t.config_event.config_type =
 8048e00:	2303      	movs	r3, #3
 8048e02:	767b      	strb	r3, [r7, #25]
              SENSOR_CONFIG_CALIBRATION;
          sensor_msg_event.message_event_t.config_event.sensor_type =
 8048e04:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8048e08:	763b      	strb	r3, [r7, #24]
              sensor_type;
          res = osMessageQueuePut(SensorMsgQHandle, &sensor_msg_event, 0, 0);
 8048e0a:	4b4b      	ldr	r3, [pc, #300]	; (8048f38 <StartCan1ReceiveTask+0x324>)
 8048e0c:	6818      	ldr	r0, [r3, #0]
 8048e0e:	f107 0110 	add.w	r1, r7, #16
 8048e12:	2300      	movs	r3, #0
 8048e14:	2200      	movs	r2, #0
 8048e16:	f00d faf5 	bl	8056404 <osMessageQueuePut>
 8048e1a:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
          break;
 8048e1e:	e012      	b.n	8048e46 <StartCan1ReceiveTask+0x232>
        case SENSOR_CALIBRATION_RESULT:
          sensor_msg_event.message_event_type = SENSOR_CONFIG_MESSAGE;
 8048e20:	2300      	movs	r3, #0
 8048e22:	743b      	strb	r3, [r7, #16]
          sensor_msg_event.message_event_t.config_event.config_type =
 8048e24:	2308      	movs	r3, #8
 8048e26:	767b      	strb	r3, [r7, #25]
              SENSOR_CALIBRATION_RESULT;
          sensor_msg_event.message_event_t.config_event.sensor_type =
 8048e28:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8048e2c:	763b      	strb	r3, [r7, #24]
              sensor_type;
          res = osMessageQueuePut(SensorMsgQHandle, &sensor_msg_event, 0, 0);
 8048e2e:	4b42      	ldr	r3, [pc, #264]	; (8048f38 <StartCan1ReceiveTask+0x324>)
 8048e30:	6818      	ldr	r0, [r3, #0]
 8048e32:	f107 0110 	add.w	r1, r7, #16
 8048e36:	2300      	movs	r3, #0
 8048e38:	2200      	movs	r2, #0
 8048e3a:	f00d fae3 	bl	8056404 <osMessageQueuePut>
 8048e3e:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
          break;
 8048e42:	e000      	b.n	8048e46 <StartCan1ReceiveTask+0x232>
        default:
          break;
 8048e44:	bf00      	nop
        }
        if (sensor_type == SENSOR_TYPE_MAX) {
 8048e46:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8048e4a:	2b0f      	cmp	r3, #15
 8048e4c:	f040 810d 	bne.w	804906a <StartCan1ReceiveTask+0x456>
          //foward sensor command to can2 if this sensor is a all sensor enable message
          res = osMessageQueuePut(Can2BroadcastQHandle, &can_event_t, 0, 0);
 8048e50:	4b3a      	ldr	r3, [pc, #232]	; (8048f3c <StartCan1ReceiveTask+0x328>)
 8048e52:	6818      	ldr	r0, [r3, #0]
 8048e54:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8048e58:	2300      	movs	r3, #0
 8048e5a:	2200      	movs	r2, #0
 8048e5c:	f00d fad2 	bl	8056404 <osMessageQueuePut>
 8048e60:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
 8048e64:	e101      	b.n	804906a <StartCan1ReceiveTask+0x456>
        }
      } else {
        //foward sensor command to can2 if this sensor is not on this chip
        res = osMessageQueuePut(Can2BroadcastQHandle, &can_event_t, 0, 0);
 8048e66:	4b35      	ldr	r3, [pc, #212]	; (8048f3c <StartCan1ReceiveTask+0x328>)
 8048e68:	6818      	ldr	r0, [r3, #0]
 8048e6a:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8048e6e:	2300      	movs	r3, #0
 8048e70:	2200      	movs	r2, #0
 8048e72:	f00d fac7 	bl	8056404 <osMessageQueuePut>
 8048e76:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
 8048e7a:	e0f6      	b.n	804906a <StartCan1ReceiveTask+0x456>
      }
    } else if (event_type == SENSOR_DATA_MESSAGE
 8048e7c:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8048e80:	2b01      	cmp	r3, #1
 8048e82:	d003      	beq.n	8048e8c <StartCan1ReceiveTask+0x278>
               || event_type == SENSOR_TIMESTAMP_MESSAGE) {
 8048e84:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8048e88:	2b02      	cmp	r3, #2
 8048e8a:	d106      	bne.n	8048e9a <StartCan1ReceiveTask+0x286>
      //can1 receive should not handle data or timestamp msg to avoid can msg storm on can net work between slave stm32s
      printf("Can1ReceiveQ data or timstamp msg event_type = %d\r\n",
 8048e8c:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8048e90:	4619      	mov	r1, r3
 8048e92:	482d      	ldr	r0, [pc, #180]	; (8048f48 <StartCan1ReceiveTask+0x334>)
 8048e94:	f017 fd6e 	bl	8060974 <iprintf>
 8048e98:	e0e7      	b.n	804906a <StartCan1ReceiveTask+0x456>
             event_type);
    } else if (event_type == SENSOR_OTA_MESSAGE) {
 8048e9a:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8048e9e:	2b04      	cmp	r3, #4
 8048ea0:	d158      	bne.n	8048f54 <StartCan1ReceiveTask+0x340>
      sensor_message_event_type event_type;
      uint8_t chip_id;
      uint8_t cancom_mode;

      event_type =
          (can_event_t.CanHeader.RxHeader.
 8048ea2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
           StdId & SENSOR_EVENT_MESSAGE_BIT_MASK) >>
 8048ea4:	0a1b      	lsrs	r3, r3, #8
 8048ea6:	b2db      	uxtb	r3, r3
      event_type =
 8048ea8:	f003 030f 	and.w	r3, r3, #15
 8048eac:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
          SENSOR_EVENT_MESSAGE_BIT_SHIFT;
      chip_id =
          (can_event_t.CanHeader.RxHeader.
 8048eb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
           StdId & CHIP_ID_BIT_MASK) >> CHIP_ID_BIT_SHIFT;
 8048eb2:	091b      	lsrs	r3, r3, #4
 8048eb4:	b2db      	uxtb	r3, r3
      chip_id =
 8048eb6:	f003 030f 	and.w	r3, r3, #15
 8048eba:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
      cancom_mode = can_event_t.CanHeader.RxHeader.StdId & CANCOM_MODE_BIT_MASK;
 8048ebe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8048ec0:	b2db      	uxtb	r3, r3
 8048ec2:	f003 030f 	and.w	r3, r3, #15
 8048ec6:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
      if (chip_id == boardID) {
 8048eca:	4b20      	ldr	r3, [pc, #128]	; (8048f4c <StartCan1ReceiveTask+0x338>)
 8048ecc:	781b      	ldrb	r3, [r3, #0]
 8048ece:	f897 2092 	ldrb.w	r2, [r7, #146]	; 0x92
 8048ed2:	429a      	cmp	r2, r3
 8048ed4:	d121      	bne.n	8048f1a <StartCan1ReceiveTask+0x306>
        if ((cancom_mode == CANCOM_OTA_MODE_ENTER)) {
 8048ed6:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8048eda:	2b06      	cmp	r3, #6
 8048edc:	f040 80c5 	bne.w	804906a <StartCan1ReceiveTask+0x456>
          //first update flash
          flash_unlock();
 8048ee0:	f7fb fbaa 	bl	8044638 <flash_unlock>
          flash_update_boot_magic_number();
 8048ee4:	f7fb fc0c 	bl	8044700 <flash_update_boot_magic_number>
          flash_lock();
 8048ee8:	f7fb fbb4 	bl	8044654 <flash_lock>
          can_event_t.CanHeader.TxHeader.StdId =
              (SENSOR_OTA_MESSAGE << SENSOR_EVENT_MESSAGE_BIT_SHIFT)
              | (boardID << SENSOR_TYPE_BIT_SHIFT)
 8048eec:	4b17      	ldr	r3, [pc, #92]	; (8048f4c <StartCan1ReceiveTask+0x338>)
 8048eee:	781b      	ldrb	r3, [r3, #0]
 8048ef0:	011b      	lsls	r3, r3, #4
              | CANCOM_OTA_MODE_ENTER_ACK;
 8048ef2:	f443 6381 	orr.w	r3, r3, #1032	; 0x408
 8048ef6:	f043 0304 	orr.w	r3, r3, #4
          can_event_t.CanHeader.TxHeader.StdId =
 8048efa:	66fb      	str	r3, [r7, #108]	; 0x6c
#if USE_P1
          res = osMessageQueuePut(Can1BroadcastQHandle, &can_event_t, 0, 0);
 8048efc:	4b14      	ldr	r3, [pc, #80]	; (8048f50 <StartCan1ReceiveTask+0x33c>)
 8048efe:	6818      	ldr	r0, [r3, #0]
 8048f00:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8048f04:	2300      	movs	r3, #0
 8048f06:	2200      	movs	r2, #0
 8048f08:	f00d fa7c 	bl	8056404 <osMessageQueuePut>
 8048f0c:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
#else
          res = osMessageQueuePut(Can2BroadcastQHandle, &can_event_t, 0, 0);
#endif
          //than reset
          osDelay(5);
 8048f10:	2005      	movs	r0, #5
 8048f12:	f00d f8f2 	bl	80560fa <osDelay>
          __NVIC_SystemReset();
 8048f16:	f7ff f81f 	bl	8047f58 <__NVIC_SystemReset>
        }
      } else {
        //foward this message to can2 to tell sub stm32
        res = osMessageQueuePut(Can2BroadcastQHandle, &can_event_t, 0, 0);
 8048f1a:	4b08      	ldr	r3, [pc, #32]	; (8048f3c <StartCan1ReceiveTask+0x328>)
 8048f1c:	6818      	ldr	r0, [r3, #0]
 8048f1e:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8048f22:	2300      	movs	r3, #0
 8048f24:	2200      	movs	r2, #0
 8048f26:	f00d fa6d 	bl	8056404 <osMessageQueuePut>
 8048f2a:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
 8048f2e:	e09c      	b.n	804906a <StartCan1ReceiveTask+0x456>
 8048f30:	2001be6c 	.word	0x2001be6c
 8048f34:	08065ac0 	.word	0x08065ac0
 8048f38:	2001bec8 	.word	0x2001bec8
 8048f3c:	2001be70 	.word	0x2001be70
 8048f40:	2000808c 	.word	0x2000808c
 8048f44:	2000808e 	.word	0x2000808e
 8048f48:	08065adc 	.word	0x08065adc
 8048f4c:	20007886 	.word	0x20007886
 8048f50:	2001c004 	.word	0x2001c004
      }
    } else if (event_type == SENSOR_VERSION_MSG) {
 8048f54:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8048f58:	2b05      	cmp	r3, #5
 8048f5a:	d13b      	bne.n	8048fd4 <StartCan1ReceiveTask+0x3c0>
      sensor_message_event_type event_type;
      uint8_t chip_id;
      uint8_t cancom_mode;

      event_type =
          (can_event_t.CanHeader.RxHeader.
 8048f5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
           StdId & SENSOR_EVENT_MESSAGE_BIT_MASK) >>
 8048f5e:	0a1b      	lsrs	r3, r3, #8
 8048f60:	b2db      	uxtb	r3, r3
      event_type =
 8048f62:	f003 030f 	and.w	r3, r3, #15
 8048f66:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
          SENSOR_EVENT_MESSAGE_BIT_SHIFT;
      chip_id =
          (can_event_t.CanHeader.RxHeader.
 8048f6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
           StdId & CHIP_ID_BIT_MASK) >> CHIP_ID_BIT_SHIFT;
 8048f6c:	091b      	lsrs	r3, r3, #4
 8048f6e:	b2db      	uxtb	r3, r3
      chip_id =
 8048f70:	f003 030f 	and.w	r3, r3, #15
 8048f74:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
      cancom_mode = can_event_t.CanHeader.RxHeader.StdId & CANCOM_MODE_BIT_MASK;
 8048f78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8048f7a:	b2db      	uxtb	r3, r3
 8048f7c:	f003 030f 	and.w	r3, r3, #15
 8048f80:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
      if (chip_id == boardID) {
 8048f84:	4b3b      	ldr	r3, [pc, #236]	; (8049074 <StartCan1ReceiveTask+0x460>)
 8048f86:	781b      	ldrb	r3, [r3, #0]
 8048f88:	f897 2095 	ldrb.w	r2, [r7, #149]	; 0x95
 8048f8c:	429a      	cmp	r2, r3
 8048f8e:	d116      	bne.n	8048fbe <StartCan1ReceiveTask+0x3aa>
        can_event_t.CanHeader.TxHeader.StdId =
            (SENSOR_VERSION_MSG << SENSOR_EVENT_MESSAGE_BIT_SHIFT)
            | (boardID << SENSOR_TYPE_BIT_SHIFT)
 8048f90:	4b38      	ldr	r3, [pc, #224]	; (8049074 <StartCan1ReceiveTask+0x460>)
 8048f92:	781b      	ldrb	r3, [r3, #0]
 8048f94:	011b      	lsls	r3, r3, #4
            | 0xf;
 8048f96:	f443 63a1 	orr.w	r3, r3, #1288	; 0x508
 8048f9a:	f043 0307 	orr.w	r3, r3, #7
        can_event_t.CanHeader.TxHeader.StdId =
 8048f9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8048fa0:	4b35      	ldr	r3, [pc, #212]	; (8049078 <StartCan1ReceiveTask+0x464>)
 8048fa2:	681b      	ldr	r3, [r3, #0]
        memcpy(&can_event_t.CanData.TxData[0], &software_version,
 8048fa4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
               sizeof(uint32_t));
        res = osMessageQueuePut(Can1BroadcastQHandle, &can_event_t, 0, 0);
 8048fa8:	4b34      	ldr	r3, [pc, #208]	; (804907c <StartCan1ReceiveTask+0x468>)
 8048faa:	6818      	ldr	r0, [r3, #0]
 8048fac:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8048fb0:	2300      	movs	r3, #0
 8048fb2:	2200      	movs	r2, #0
 8048fb4:	f00d fa26 	bl	8056404 <osMessageQueuePut>
 8048fb8:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
 8048fbc:	e055      	b.n	804906a <StartCan1ReceiveTask+0x456>
      } else {
        //foward this message to can2 to tell sub stm32
        res = osMessageQueuePut(Can2BroadcastQHandle, &can_event_t, 0, 0);
 8048fbe:	4b30      	ldr	r3, [pc, #192]	; (8049080 <StartCan1ReceiveTask+0x46c>)
 8048fc0:	6818      	ldr	r0, [r3, #0]
 8048fc2:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8048fc6:	2300      	movs	r3, #0
 8048fc8:	2200      	movs	r2, #0
 8048fca:	f00d fa1b 	bl	8056404 <osMessageQueuePut>
 8048fce:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
 8048fd2:	e04a      	b.n	804906a <StartCan1ReceiveTask+0x456>
      }
    } else if (event_type == SENSOR_TIME_SYNC_MSG) {
 8048fd4:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8048fd8:	2b06      	cmp	r3, #6
 8048fda:	d140      	bne.n	804905e <StartCan1ReceiveTask+0x44a>
      sensor_message_event_type event_type;
      uint8_t chip_id;

      event_type =
          (can_event_t.CanHeader.RxHeader.
 8048fdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
           StdId & SENSOR_EVENT_MESSAGE_BIT_MASK) >>
 8048fde:	0a1b      	lsrs	r3, r3, #8
 8048fe0:	b2db      	uxtb	r3, r3
      event_type =
 8048fe2:	f003 030f 	and.w	r3, r3, #15
 8048fe6:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
          SENSOR_EVENT_MESSAGE_BIT_SHIFT;
      chip_id =
          (can_event_t.CanHeader.RxHeader.
 8048fea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
           StdId & CHIP_ID_BIT_MASK) >> CHIP_ID_BIT_SHIFT;
 8048fec:	091b      	lsrs	r3, r3, #4
 8048fee:	b2db      	uxtb	r3, r3
      chip_id =
 8048ff0:	f003 030f 	and.w	r3, r3, #15
 8048ff4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

      if (chip_id == boardID) {
 8048ff8:	4b1e      	ldr	r3, [pc, #120]	; (8049074 <StartCan1ReceiveTask+0x460>)
 8048ffa:	781b      	ldrb	r3, [r3, #0]
 8048ffc:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 8049000:	429a      	cmp	r2, r3
 8049002:	d121      	bne.n	8049048 <StartCan1ReceiveTask+0x434>
        can_event_t.CanHeader.TxHeader.StdId =
            (SENSOR_TIME_SYNC_MSG << SENSOR_EVENT_MESSAGE_BIT_SHIFT)
            | (boardID << SENSOR_TYPE_BIT_SHIFT)
 8049004:	4b1b      	ldr	r3, [pc, #108]	; (8049074 <StartCan1ReceiveTask+0x460>)
 8049006:	781b      	ldrb	r3, [r3, #0]
 8049008:	011b      	lsls	r3, r3, #4
            | 0xf;
 804900a:	f443 63c1 	orr.w	r3, r3, #1544	; 0x608
 804900e:	f043 0307 	orr.w	r3, r3, #7
        can_event_t.CanHeader.TxHeader.StdId =
 8049012:	66fb      	str	r3, [r7, #108]	; 0x6c
        uint64_t current_time = sensor_get_timestamp();
 8049014:	f004 fb78 	bl	804d708 <sensor_get_timestamp>
 8049018:	4602      	mov	r2, r0
 804901a:	460b      	mov	r3, r1
 804901c:	e9c7 2302 	strd	r2, r3, [r7, #8]
        memcpy(&can_event_t.CanData.TxData[0], &current_time, sizeof(uint64_t));
 8049020:	f107 0108 	add.w	r1, r7, #8
 8049024:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8049028:	331c      	adds	r3, #28
 804902a:	2208      	movs	r2, #8
 804902c:	4618      	mov	r0, r3
 804902e:	f016 ffb7 	bl	805ffa0 <memcpy>
        res = osMessageQueuePut(Can1BroadcastQHandle, &can_event_t, 0, 0);
 8049032:	4b12      	ldr	r3, [pc, #72]	; (804907c <StartCan1ReceiveTask+0x468>)
 8049034:	6818      	ldr	r0, [r3, #0]
 8049036:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 804903a:	2300      	movs	r3, #0
 804903c:	2200      	movs	r2, #0
 804903e:	f00d f9e1 	bl	8056404 <osMessageQueuePut>
 8049042:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
 8049046:	e010      	b.n	804906a <StartCan1ReceiveTask+0x456>
      } else {
        //foward this message to can2 to tell sub stm32
        res = osMessageQueuePut(Can2BroadcastQHandle, &can_event_t, 0, 0);
 8049048:	4b0d      	ldr	r3, [pc, #52]	; (8049080 <StartCan1ReceiveTask+0x46c>)
 804904a:	6818      	ldr	r0, [r3, #0]
 804904c:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8049050:	2300      	movs	r3, #0
 8049052:	2200      	movs	r2, #0
 8049054:	f00d f9d6 	bl	8056404 <osMessageQueuePut>
 8049058:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
 804905c:	e005      	b.n	804906a <StartCan1ReceiveTask+0x456>
      }
    } else {
      printf("Can1ReceiveQ unsupported msg event_type = %d \r\n", event_type);
 804905e:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8049062:	4619      	mov	r1, r3
 8049064:	4807      	ldr	r0, [pc, #28]	; (8049084 <StartCan1ReceiveTask+0x470>)
 8049066:	f017 fc85 	bl	8060974 <iprintf>
    }
    //parse can1 message and foward to tasks, RxData is only sizeof uint8_t * 8
    osDelay(1);
 804906a:	2001      	movs	r0, #1
 804906c:	f00d f845 	bl	80560fa <osDelay>
    res = osMessageQueueGet(Can1ReceiveQHandle, &can_event_t, 0, portMAX_DELAY);
 8049070:	e5d4      	b.n	8048c1c <StartCan1ReceiveTask+0x8>
 8049072:	bf00      	nop
 8049074:	20007886 	.word	0x20007886
 8049078:	20007888 	.word	0x20007888
 804907c:	2001c004 	.word	0x2001c004
 8049080:	2001be70 	.word	0x2001be70
 8049084:	08065b10 	.word	0x08065b10

08049088 <StartCan2BroadcastTask>:
 * @brief  Function implementing the Can2Broadcast thread.
 * @param  argument: Not used
 * @retval None
 */
void StartCan2BroadcastTask(void *argument)
{
 8049088:	b580      	push	{r7, lr}
 804908a:	b08e      	sub	sp, #56	; 0x38
 804908c:	af00      	add	r7, sp, #0
 804908e:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for (;;) {
    //for master stm32 can2 is used to broad cast config message to slave stm32 can1
    res =
        osMessageQueueGet(Can2BroadcastQHandle, &can_event_t, 0, portMAX_DELAY);
 8049090:	4b16      	ldr	r3, [pc, #88]	; (80490ec <StartCan2BroadcastTask+0x64>)
 8049092:	6818      	ldr	r0, [r3, #0]
 8049094:	f107 010c 	add.w	r1, r7, #12
 8049098:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 804909c:	2200      	movs	r2, #0
 804909e:	f00d fa11 	bl	80564c4 <osMessageQueueGet>
 80490a2:	6378      	str	r0, [r7, #52]	; 0x34
    //printf("CAN2 BC MSG: (0x%x) \r\n", can_event_t.CanHeader.TxHeader.StdId);
    /*Configure Transmission process */
    can_event_t.CanHeader.TxHeader.RTR = CAN_RTR_DATA;
 80490a4:	2300      	movs	r3, #0
 80490a6:	61bb      	str	r3, [r7, #24]
    can_event_t.CanHeader.TxHeader.IDE = CAN_ID_STD;
 80490a8:	2300      	movs	r3, #0
 80490aa:	617b      	str	r3, [r7, #20]
    can_event_t.CanHeader.TxHeader.DLC = 8;
 80490ac:	2308      	movs	r3, #8
 80490ae:	61fb      	str	r3, [r7, #28]
    can_event_t.CanHeader.TxHeader.TransmitGlobalTime = DISABLE;
 80490b0:	2300      	movs	r3, #0
 80490b2:	f887 3020 	strb.w	r3, [r7, #32]
    /* CAN send test. */
    if (HAL_CAN_AddTxMessage(&hcan2, &can_event_t.CanHeader.TxHeader,
 80490b6:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80490ba:	f107 030c 	add.w	r3, r7, #12
 80490be:	f103 021c 	add.w	r2, r3, #28
 80490c2:	f107 010c 	add.w	r1, r7, #12
 80490c6:	4603      	mov	r3, r0
 80490c8:	4809      	ldr	r0, [pc, #36]	; (80490f0 <StartCan2BroadcastTask+0x68>)
 80490ca:	f006 fd03 	bl	804fad4 <HAL_CAN_AddTxMessage>
 80490ce:	4603      	mov	r3, r0
 80490d0:	2b00      	cmp	r3, #0
 80490d2:	d007      	beq.n	80490e4 <StartCan2BroadcastTask+0x5c>
                             can_event_t.CanData.TxData,
                             &TxMailbox) != HAL_OK) {
      printf("can2 errorcode: 0x%x \r\n", hcan2.ErrorCode);
 80490d4:	4b06      	ldr	r3, [pc, #24]	; (80490f0 <StartCan2BroadcastTask+0x68>)
 80490d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80490d8:	4619      	mov	r1, r3
 80490da:	4806      	ldr	r0, [pc, #24]	; (80490f4 <StartCan2BroadcastTask+0x6c>)
 80490dc:	f017 fc4a 	bl	8060974 <iprintf>
      /* Transmission request Error */
      Error_Handler();
 80490e0:	f000 fd1a 	bl	8049b18 <Error_Handler>
    }
    osDelay(1);
 80490e4:	2001      	movs	r0, #1
 80490e6:	f00d f808 	bl	80560fa <osDelay>
    res =
 80490ea:	e7d1      	b.n	8049090 <StartCan2BroadcastTask+0x8>
 80490ec:	2001be70 	.word	0x2001be70
 80490f0:	2001bf48 	.word	0x2001bf48
 80490f4:	08065aa0 	.word	0x08065aa0

080490f8 <StartCan2ReceiveTask>:
 * @brief  Function implementing the Can2Receive thread.
 * @param  argument: Not used
 * @retval None
 */
void StartCan2ReceiveTask(void *argument)
{
 80490f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80490fc:	f5ad 6daf 	sub.w	sp, sp, #1400	; 0x578
 8049100:	af06      	add	r7, sp, #24
 8049102:	1d3b      	adds	r3, r7, #4
 8049104:	6018      	str	r0, [r3, #0]
  sensor_message_event_type event_type;
  sensors_event_t sensor_data[SENSOR_TYPE_MAX];
  uint8_t sensor_type;
  int8_t command_code;
  uint8_t data_index;
  uint8_t data_size[SENSOR_TYPE_MAX] = { 0 };
 8049106:	f107 0318 	add.w	r3, r7, #24
 804910a:	2200      	movs	r2, #0
 804910c:	601a      	str	r2, [r3, #0]
 804910e:	3304      	adds	r3, #4
 8049110:	2200      	movs	r2, #0
 8049112:	601a      	str	r2, [r3, #0]
 8049114:	605a      	str	r2, [r3, #4]
 8049116:	f8c3 2007 	str.w	r2, [r3, #7]
  uint8_t data_bitmask[SENSOR_TYPE_MAX] = { 0 };
 804911a:	f107 0308 	add.w	r3, r7, #8
 804911e:	2200      	movs	r2, #0
 8049120:	601a      	str	r2, [r3, #0]
 8049122:	3304      	adds	r3, #4
 8049124:	2200      	movs	r2, #0
 8049126:	601a      	str	r2, [r3, #0]
 8049128:	605a      	str	r2, [r3, #4]
 804912a:	f8c3 2007 	str.w	r2, [r3, #7]

  for (;;) {
    //for master stm32 can2 will receive data from slave stm32
    //for slave stm32 can2 is disabled
    res = osMessageQueueGet(Can2ReceiveQHandle, &can_event_t, 0, portMAX_DELAY);
 804912e:	4bb2      	ldr	r3, [pc, #712]	; (80493f8 <StartCan2ReceiveTask+0x300>)
 8049130:	6818      	ldr	r0, [r3, #0]
 8049132:	f207 5134 	addw	r1, r7, #1332	; 0x534
 8049136:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 804913a:	2200      	movs	r2, #0
 804913c:	f00d f9c2 	bl	80564c4 <osMessageQueueGet>
 8049140:	f8c7 055c 	str.w	r0, [r7, #1372]	; 0x55c
    //printf("rev can2 msg StdId: 0x%x, ExtId: 0x%x\r\n", can_event_t.CanHeader.RxHeader.StdId, can_event_t.CanHeader.RxHeader.ExtId);
    event_type =
        (can_event_t.CanHeader.RxHeader.
 8049144:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
         StdId & SENSOR_EVENT_MESSAGE_BIT_MASK) >>
 8049148:	0a1b      	lsrs	r3, r3, #8
 804914a:	b2db      	uxtb	r3, r3
    event_type =
 804914c:	f003 030f 	and.w	r3, r3, #15
 8049150:	f887 355b 	strb.w	r3, [r7, #1371]	; 0x55b
        SENSOR_EVENT_MESSAGE_BIT_SHIFT;
    sensor_type =
        (can_event_t.CanHeader.RxHeader.
 8049154:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
         StdId & SENSOR_TYPE_BIT_MASK) >> SENSOR_TYPE_BIT_SHIFT;
 8049158:	091b      	lsrs	r3, r3, #4
 804915a:	b2db      	uxtb	r3, r3
    sensor_type =
 804915c:	f003 030f 	and.w	r3, r3, #15
 8049160:	f887 355a 	strb.w	r3, [r7, #1370]	; 0x55a
    command_code =
        can_event_t.CanHeader.RxHeader.StdId & SENSOR_COMMAND_BIT_MASK;
 8049164:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 8049168:	b25b      	sxtb	r3, r3
    command_code =
 804916a:	f003 030f 	and.w	r3, r3, #15
 804916e:	f887 3559 	strb.w	r3, [r7, #1369]	; 0x559
    //printf("can code: {%d, %d, %d}\r\n", event_type, sensor_type, command_code);
    //if can2 receive data message transfer it to sensordataQ
    //parse can2 message and foward to tasks, RxData is only sizeof uint8_t * 8
    if (event_type == SENSOR_CONFIG_MESSAGE) {
 8049172:	f897 355b 	ldrb.w	r3, [r7, #1371]	; 0x55b
 8049176:	2b00      	cmp	r3, #0
 8049178:	d103      	bne.n	8049182 <StartCan2ReceiveTask+0x8a>
      //check if supporting this kind of sensor
      printf("Can2ReceiveQ config msg \r\n");
 804917a:	48a0      	ldr	r0, [pc, #640]	; (80493fc <StartCan2ReceiveTask+0x304>)
 804917c:	f017 fc96 	bl	8060aac <puts>
 8049180:	e12f      	b.n	80493e2 <StartCan2ReceiveTask+0x2ea>
    } else if (event_type == SENSOR_DATA_MESSAGE) {
 8049182:	f897 355b 	ldrb.w	r3, [r7, #1371]	; 0x55b
 8049186:	2b01      	cmp	r3, #1
 8049188:	d14e      	bne.n	8049228 <StartCan2ReceiveTask+0x130>
      //printf("Can2ReceiveQ data msg \r\n");
      //forward can2 data message to SensorDataQ
      //when receiving data message, command code is axis_num + 1, parse sensordata here
      data_size[sensor_type] = command_code;
 804918a:	f897 355a 	ldrb.w	r3, [r7, #1370]	; 0x55a
 804918e:	f897 1559 	ldrb.w	r1, [r7, #1369]	; 0x559
 8049192:	f107 0218 	add.w	r2, r7, #24
 8049196:	54d1      	strb	r1, [r2, r3]
      sensor_data[sensor_type].sensor_type = sensor_type;
 8049198:	f897 255a 	ldrb.w	r2, [r7, #1370]	; 0x55a
 804919c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80491a0:	4613      	mov	r3, r2
 80491a2:	009b      	lsls	r3, r3, #2
 80491a4:	4413      	add	r3, r2
 80491a6:	011b      	lsls	r3, r3, #4
 80491a8:	440b      	add	r3, r1
 80491aa:	f897 255a 	ldrb.w	r2, [r7, #1370]	; 0x55a
 80491ae:	701a      	strb	r2, [r3, #0]
      data_index = can_event_t.CanData.RxData[0];
 80491b0:	f897 3550 	ldrb.w	r3, [r7, #1360]	; 0x550
 80491b4:	f887 3558 	strb.w	r3, [r7, #1368]	; 0x558
      if (!(data_bitmask[sensor_type] & (1 << data_index))) {
 80491b8:	f897 355a 	ldrb.w	r3, [r7, #1370]	; 0x55a
 80491bc:	f107 0208 	add.w	r2, r7, #8
 80491c0:	5cd3      	ldrb	r3, [r2, r3]
 80491c2:	461a      	mov	r2, r3
 80491c4:	f897 3558 	ldrb.w	r3, [r7, #1368]	; 0x558
 80491c8:	fa42 f303 	asr.w	r3, r2, r3
 80491cc:	f003 0301 	and.w	r3, r3, #1
 80491d0:	2b00      	cmp	r3, #0
 80491d2:	d125      	bne.n	8049220 <StartCan2ReceiveTask+0x128>
        memcpy(&sensor_data[sensor_type].sensor_data_t.vec.data[data_index],
 80491d4:	f897 255a 	ldrb.w	r2, [r7, #1370]	; 0x55a
 80491d8:	f897 0558 	ldrb.w	r0, [r7, #1368]	; 0x558
 80491dc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80491e0:	4613      	mov	r3, r2
 80491e2:	009b      	lsls	r3, r3, #2
 80491e4:	4413      	add	r3, r2
 80491e6:	009b      	lsls	r3, r3, #2
 80491e8:	4403      	add	r3, r0
 80491ea:	3304      	adds	r3, #4
 80491ec:	009b      	lsls	r3, r3, #2
 80491ee:	440b      	add	r3, r1
 80491f0:	f8d7 2551 	ldr.w	r2, [r7, #1361]	; 0x551
 80491f4:	601a      	str	r2, [r3, #0]
               &can_event_t.CanData.RxData[1], sizeof(float));
        data_bitmask[sensor_type] =
            data_bitmask[sensor_type] | (1 << data_index);
 80491f6:	f897 355a 	ldrb.w	r3, [r7, #1370]	; 0x55a
 80491fa:	f107 0208 	add.w	r2, r7, #8
 80491fe:	5cd3      	ldrb	r3, [r2, r3]
 8049200:	b25a      	sxtb	r2, r3
 8049202:	f897 3558 	ldrb.w	r3, [r7, #1368]	; 0x558
 8049206:	2101      	movs	r1, #1
 8049208:	fa01 f303 	lsl.w	r3, r1, r3
 804920c:	b25b      	sxtb	r3, r3
 804920e:	4313      	orrs	r3, r2
 8049210:	b25a      	sxtb	r2, r3
        data_bitmask[sensor_type] =
 8049212:	f897 355a 	ldrb.w	r3, [r7, #1370]	; 0x55a
            data_bitmask[sensor_type] | (1 << data_index);
 8049216:	b2d1      	uxtb	r1, r2
        data_bitmask[sensor_type] =
 8049218:	f107 0208 	add.w	r2, r7, #8
 804921c:	54d1      	strb	r1, [r2, r3]
 804921e:	e0e0      	b.n	80493e2 <StartCan2ReceiveTask+0x2ea>
      } else {
        //drop data since received data index is not under expect
        printf("unexpected data index arrived\r\n");
 8049220:	4877      	ldr	r0, [pc, #476]	; (8049400 <StartCan2ReceiveTask+0x308>)
 8049222:	f017 fc43 	bl	8060aac <puts>
 8049226:	e0dc      	b.n	80493e2 <StartCan2ReceiveTask+0x2ea>
      }

    } else if (event_type == SENSOR_TIMESTAMP_MESSAGE) {
 8049228:	f897 355b 	ldrb.w	r3, [r7, #1371]	; 0x55b
 804922c:	2b02      	cmp	r3, #2
 804922e:	f040 8099 	bne.w	8049364 <StartCan2ReceiveTask+0x26c>
      if (data_bitmask[sensor_type] ==
 8049232:	f897 355a 	ldrb.w	r3, [r7, #1370]	; 0x55a
 8049236:	f107 0208 	add.w	r2, r7, #8
 804923a:	5cd3      	ldrb	r3, [r2, r3]
 804923c:	461c      	mov	r4, r3
          ((uint8_t) pow(2, data_size[sensor_type]) - 1)) {
 804923e:	f897 355a 	ldrb.w	r3, [r7, #1370]	; 0x55a
 8049242:	f107 0218 	add.w	r2, r7, #24
 8049246:	5cd3      	ldrb	r3, [r2, r3]
 8049248:	4618      	mov	r0, r3
 804924a:	f7f7 f95b 	bl	8040504 <__aeabi_ui2d>
 804924e:	4602      	mov	r2, r0
 8049250:	460b      	mov	r3, r1
 8049252:	ec43 2b11 	vmov	d1, r2, r3
 8049256:	ed9f 0b66 	vldr	d0, [pc, #408]	; 80493f0 <StartCan2ReceiveTask+0x2f8>
 804925a:	f019 fce9 	bl	8062c30 <pow>
 804925e:	ec53 2b10 	vmov	r2, r3, d0
 8049262:	4610      	mov	r0, r2
 8049264:	4619      	mov	r1, r3
 8049266:	f7f7 fc9f 	bl	8040ba8 <__aeabi_d2uiz>
 804926a:	4603      	mov	r3, r0
 804926c:	b2db      	uxtb	r3, r3
 804926e:	3b01      	subs	r3, #1
      if (data_bitmask[sensor_type] ==
 8049270:	429c      	cmp	r4, r3
 8049272:	d16d      	bne.n	8049350 <StartCan2ReceiveTask+0x258>
        memcpy(&sensor_data[sensor_type].timestamp,
 8049274:	f897 255a 	ldrb.w	r2, [r7, #1370]	; 0x55a
 8049278:	f107 0128 	add.w	r1, r7, #40	; 0x28
 804927c:	4613      	mov	r3, r2
 804927e:	009b      	lsls	r3, r3, #2
 8049280:	4413      	add	r3, r2
 8049282:	011b      	lsls	r3, r3, #4
 8049284:	3308      	adds	r3, #8
 8049286:	440b      	add	r3, r1
 8049288:	f8d7 2550 	ldr.w	r2, [r7, #1360]	; 0x550
 804928c:	601a      	str	r2, [r3, #0]
               &can_event_t.CanData.RxData[0], sizeof(uint32_t));
        printf("transfer data: { %f, %f, %f, %f }\r\n",
               sensor_data[sensor_type].sensor_data_t.vec.data[0],
 804928e:	f897 255a 	ldrb.w	r2, [r7, #1370]	; 0x55a
 8049292:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8049296:	4613      	mov	r3, r2
 8049298:	009b      	lsls	r3, r3, #2
 804929a:	4413      	add	r3, r2
 804929c:	011b      	lsls	r3, r3, #4
 804929e:	440b      	add	r3, r1
 80492a0:	3310      	adds	r3, #16
 80492a2:	681b      	ldr	r3, [r3, #0]
        printf("transfer data: { %f, %f, %f, %f }\r\n",
 80492a4:	4618      	mov	r0, r3
 80492a6:	f7f7 f94f 	bl	8040548 <__aeabi_f2d>
 80492aa:	4682      	mov	sl, r0
 80492ac:	468b      	mov	fp, r1
               sensor_data[sensor_type].sensor_data_t.vec.data[1],
 80492ae:	f897 255a 	ldrb.w	r2, [r7, #1370]	; 0x55a
 80492b2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80492b6:	4613      	mov	r3, r2
 80492b8:	009b      	lsls	r3, r3, #2
 80492ba:	4413      	add	r3, r2
 80492bc:	011b      	lsls	r3, r3, #4
 80492be:	440b      	add	r3, r1
 80492c0:	3314      	adds	r3, #20
 80492c2:	681b      	ldr	r3, [r3, #0]
        printf("transfer data: { %f, %f, %f, %f }\r\n",
 80492c4:	4618      	mov	r0, r3
 80492c6:	f7f7 f93f 	bl	8040548 <__aeabi_f2d>
 80492ca:	4604      	mov	r4, r0
 80492cc:	460d      	mov	r5, r1
               sensor_data[sensor_type].sensor_data_t.vec.data[2],
 80492ce:	f897 255a 	ldrb.w	r2, [r7, #1370]	; 0x55a
 80492d2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80492d6:	4613      	mov	r3, r2
 80492d8:	009b      	lsls	r3, r3, #2
 80492da:	4413      	add	r3, r2
 80492dc:	011b      	lsls	r3, r3, #4
 80492de:	440b      	add	r3, r1
 80492e0:	3318      	adds	r3, #24
 80492e2:	681b      	ldr	r3, [r3, #0]
        printf("transfer data: { %f, %f, %f, %f }\r\n",
 80492e4:	4618      	mov	r0, r3
 80492e6:	f7f7 f92f 	bl	8040548 <__aeabi_f2d>
 80492ea:	4680      	mov	r8, r0
 80492ec:	4689      	mov	r9, r1
               sensor_data[sensor_type].sensor_data_t.vec.data[3]);
 80492ee:	f897 255a 	ldrb.w	r2, [r7, #1370]	; 0x55a
 80492f2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80492f6:	4613      	mov	r3, r2
 80492f8:	009b      	lsls	r3, r3, #2
 80492fa:	4413      	add	r3, r2
 80492fc:	011b      	lsls	r3, r3, #4
 80492fe:	440b      	add	r3, r1
 8049300:	331c      	adds	r3, #28
 8049302:	681b      	ldr	r3, [r3, #0]
        printf("transfer data: { %f, %f, %f, %f }\r\n",
 8049304:	4618      	mov	r0, r3
 8049306:	f7f7 f91f 	bl	8040548 <__aeabi_f2d>
 804930a:	4602      	mov	r2, r0
 804930c:	460b      	mov	r3, r1
 804930e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8049312:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8049316:	e9cd 4500 	strd	r4, r5, [sp]
 804931a:	4652      	mov	r2, sl
 804931c:	465b      	mov	r3, fp
 804931e:	4839      	ldr	r0, [pc, #228]	; (8049404 <StartCan2ReceiveTask+0x30c>)
 8049320:	f017 fb28 	bl	8060974 <iprintf>
        osMessageQueuePut(SensorDataQHandle, &sensor_data[sensor_type], 0, 0);
 8049324:	4b38      	ldr	r3, [pc, #224]	; (8049408 <StartCan2ReceiveTask+0x310>)
 8049326:	6818      	ldr	r0, [r3, #0]
 8049328:	f897 255a 	ldrb.w	r2, [r7, #1370]	; 0x55a
 804932c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8049330:	4613      	mov	r3, r2
 8049332:	009b      	lsls	r3, r3, #2
 8049334:	4413      	add	r3, r2
 8049336:	011b      	lsls	r3, r3, #4
 8049338:	4419      	add	r1, r3
 804933a:	2300      	movs	r3, #0
 804933c:	2200      	movs	r2, #0
 804933e:	f00d f861 	bl	8056404 <osMessageQueuePut>
        data_bitmask[sensor_type] = 0x00;
 8049342:	f897 355a 	ldrb.w	r3, [r7, #1370]	; 0x55a
 8049346:	f107 0208 	add.w	r2, r7, #8
 804934a:	2100      	movs	r1, #0
 804934c:	54d1      	strb	r1, [r2, r3]
 804934e:	e048      	b.n	80493e2 <StartCan2ReceiveTask+0x2ea>
      } else {
        printf("error event index for sensor data!\r\n");
 8049350:	482e      	ldr	r0, [pc, #184]	; (804940c <StartCan2ReceiveTask+0x314>)
 8049352:	f017 fbab 	bl	8060aac <puts>
        data_bitmask[sensor_type] = 0x00;
 8049356:	f897 355a 	ldrb.w	r3, [r7, #1370]	; 0x55a
 804935a:	f107 0208 	add.w	r2, r7, #8
 804935e:	2100      	movs	r1, #0
 8049360:	54d1      	strb	r1, [r2, r3]
 8049362:	e03e      	b.n	80493e2 <StartCan2ReceiveTask+0x2ea>
      }
    } else if (event_type == SENSOR_CONFIG_RESP_MESSAGE) {
 8049364:	f897 355b 	ldrb.w	r3, [r7, #1371]	; 0x55b
 8049368:	2b03      	cmp	r3, #3
 804936a:	d10a      	bne.n	8049382 <StartCan2ReceiveTask+0x28a>
      //broadcast this message to AP through can1 broadcast task
      res = osMessageQueuePut(Can1BroadcastQHandle, &can_event_t, 0, 0);
 804936c:	4b28      	ldr	r3, [pc, #160]	; (8049410 <StartCan2ReceiveTask+0x318>)
 804936e:	6818      	ldr	r0, [r3, #0]
 8049370:	f207 5134 	addw	r1, r7, #1332	; 0x534
 8049374:	2300      	movs	r3, #0
 8049376:	2200      	movs	r2, #0
 8049378:	f00d f844 	bl	8056404 <osMessageQueuePut>
 804937c:	f8c7 055c 	str.w	r0, [r7, #1372]	; 0x55c
 8049380:	e02f      	b.n	80493e2 <StartCan2ReceiveTask+0x2ea>
    } else if (event_type == SENSOR_OTA_MESSAGE) {
 8049382:	f897 355b 	ldrb.w	r3, [r7, #1371]	; 0x55b
 8049386:	2b04      	cmp	r3, #4
 8049388:	d10a      	bne.n	80493a0 <StartCan2ReceiveTask+0x2a8>
      //foward this message to can1 to tell master
      res = osMessageQueuePut(Can1BroadcastQHandle, &can_event_t, 0, 0);
 804938a:	4b21      	ldr	r3, [pc, #132]	; (8049410 <StartCan2ReceiveTask+0x318>)
 804938c:	6818      	ldr	r0, [r3, #0]
 804938e:	f207 5134 	addw	r1, r7, #1332	; 0x534
 8049392:	2300      	movs	r3, #0
 8049394:	2200      	movs	r2, #0
 8049396:	f00d f835 	bl	8056404 <osMessageQueuePut>
 804939a:	f8c7 055c 	str.w	r0, [r7, #1372]	; 0x55c
 804939e:	e020      	b.n	80493e2 <StartCan2ReceiveTask+0x2ea>
    } else if (event_type == SENSOR_VERSION_MSG) {
 80493a0:	f897 355b 	ldrb.w	r3, [r7, #1371]	; 0x55b
 80493a4:	2b05      	cmp	r3, #5
 80493a6:	d10a      	bne.n	80493be <StartCan2ReceiveTask+0x2c6>
      //foward this message to can1 to tell master
      res = osMessageQueuePut(Can1BroadcastQHandle, &can_event_t, 0, 0);
 80493a8:	4b19      	ldr	r3, [pc, #100]	; (8049410 <StartCan2ReceiveTask+0x318>)
 80493aa:	6818      	ldr	r0, [r3, #0]
 80493ac:	f207 5134 	addw	r1, r7, #1332	; 0x534
 80493b0:	2300      	movs	r3, #0
 80493b2:	2200      	movs	r2, #0
 80493b4:	f00d f826 	bl	8056404 <osMessageQueuePut>
 80493b8:	f8c7 055c 	str.w	r0, [r7, #1372]	; 0x55c
 80493bc:	e011      	b.n	80493e2 <StartCan2ReceiveTask+0x2ea>
    } else if (event_type == SENSOR_TIME_SYNC_MSG) {
 80493be:	f897 355b 	ldrb.w	r3, [r7, #1371]	; 0x55b
 80493c2:	2b06      	cmp	r3, #6
 80493c4:	d10a      	bne.n	80493dc <StartCan2ReceiveTask+0x2e4>
      //foward this message to can1 to tell master
      res = osMessageQueuePut(Can1BroadcastQHandle, &can_event_t, 0, 0);
 80493c6:	4b12      	ldr	r3, [pc, #72]	; (8049410 <StartCan2ReceiveTask+0x318>)
 80493c8:	6818      	ldr	r0, [r3, #0]
 80493ca:	f207 5134 	addw	r1, r7, #1332	; 0x534
 80493ce:	2300      	movs	r3, #0
 80493d0:	2200      	movs	r2, #0
 80493d2:	f00d f817 	bl	8056404 <osMessageQueuePut>
 80493d6:	f8c7 055c 	str.w	r0, [r7, #1372]	; 0x55c
 80493da:	e002      	b.n	80493e2 <StartCan2ReceiveTask+0x2ea>
    } else {
      printf("Can2ReceiveQ unsupported msg \r\n");
 80493dc:	480d      	ldr	r0, [pc, #52]	; (8049414 <StartCan2ReceiveTask+0x31c>)
 80493de:	f017 fb65 	bl	8060aac <puts>
    }

    osDelay(1);
 80493e2:	2001      	movs	r0, #1
 80493e4:	f00c fe89 	bl	80560fa <osDelay>
    res = osMessageQueueGet(Can2ReceiveQHandle, &can_event_t, 0, portMAX_DELAY);
 80493e8:	e6a1      	b.n	804912e <StartCan2ReceiveTask+0x36>
 80493ea:	bf00      	nop
 80493ec:	f3af 8000 	nop.w
 80493f0:	00000000 	.word	0x00000000
 80493f4:	40000000 	.word	0x40000000
 80493f8:	2001c298 	.word	0x2001c298
 80493fc:	08065b40 	.word	0x08065b40
 8049400:	08065b5c 	.word	0x08065b5c
 8049404:	08065b7c 	.word	0x08065b7c
 8049408:	2001be08 	.word	0x2001be08
 804940c:	08065ba0 	.word	0x08065ba0
 8049410:	2001c004 	.word	0x2001c004
 8049414:	08065bc4 	.word	0x08065bc4

08049418 <StartUart2Task>:
 * @brief  Function implementing the Uart2Task thread.
 * @param  argument: Not used
 * @retval None
 */
void StartUart2Task(void *argument)
{
 8049418:	b580      	push	{r7, lr}
 804941a:	b0a2      	sub	sp, #136	; 0x88
 804941c:	af00      	add	r7, sp, #0
 804941e:	6078      	str	r0, [r7, #4]
  osStatus_t res;
  sensor_message_event_t sensor_msg_event;
  uint8_t uart_msg_q[UART_TX_CODE_LENGTH];

  for (;;) {
    res = osMessageQueueGet(Uart2MsgQHandle, uart_msg_q, 0, portMAX_DELAY);
 8049420:	4b39      	ldr	r3, [pc, #228]	; (8049508 <StartUart2Task+0xf0>)
 8049422:	6818      	ldr	r0, [r3, #0]
 8049424:	f107 0108 	add.w	r1, r7, #8
 8049428:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 804942c:	2200      	movs	r2, #0
 804942e:	f00d f849 	bl	80564c4 <osMessageQueueGet>
 8049432:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
    printf("uart_rx_q: %s, size: %u \r\n", uart_msg_q, huart2.RxXferSize);
 8049436:	4b35      	ldr	r3, [pc, #212]	; (804950c <StartUart2Task+0xf4>)
 8049438:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 804943a:	461a      	mov	r2, r3
 804943c:	f107 0308 	add.w	r3, r7, #8
 8049440:	4619      	mov	r1, r3
 8049442:	4833      	ldr	r0, [pc, #204]	; (8049510 <StartUart2Task+0xf8>)
 8049444:	f017 fa96 	bl	8060974 <iprintf>
    if (uart_msg_q[0] == 0xAA && uart_msg_q[1] == 0x55) {
 8049448:	7a3b      	ldrb	r3, [r7, #8]
 804944a:	2baa      	cmp	r3, #170	; 0xaa
 804944c:	d12b      	bne.n	80494a6 <StartUart2Task+0x8e>
 804944e:	7a7b      	ldrb	r3, [r7, #9]
 8049450:	2b55      	cmp	r3, #85	; 0x55
 8049452:	d128      	bne.n	80494a6 <StartUart2Task+0x8e>
      //printf("uart2 rx size: %u \r\n", huart2.RxXferSize);
      if (sensor_avaiable_check(uart_msg_q[2])) {
 8049454:	7abb      	ldrb	r3, [r7, #10]
 8049456:	4618      	mov	r0, r3
 8049458:	f003 fa90 	bl	804c97c <sensor_avaiable_check>
 804945c:	4603      	mov	r3, r0
 804945e:	2b00      	cmp	r3, #0
 8049460:	d04d      	beq.n	80494fe <StartUart2Task+0xe6>
        switch (uart_msg_q[3]) {
 8049462:	7afb      	ldrb	r3, [r7, #11]
 8049464:	2b02      	cmp	r3, #2
 8049466:	d005      	beq.n	8049474 <StartUart2Task+0x5c>
 8049468:	2b02      	cmp	r3, #2
 804946a:	dc05      	bgt.n	8049478 <StartUart2Task+0x60>
 804946c:	2b00      	cmp	r3, #0
 804946e:	d005      	beq.n	804947c <StartUart2Task+0x64>
 8049470:	2b01      	cmp	r3, #1
          break;
        case SENSOR_CONFIG_SELFTEST:
          break;
        default:
          //do nothing
          break;
 8049472:	e001      	b.n	8049478 <StartUart2Task+0x60>
          break;
 8049474:	bf00      	nop
 8049476:	e002      	b.n	804947e <StartUart2Task+0x66>
          break;
 8049478:	bf00      	nop
 804947a:	e000      	b.n	804947e <StartUart2Task+0x66>
          break;
 804947c:	bf00      	nop
        }
        sensor_msg_event.message_event_type = SENSOR_CONFIG_MESSAGE;
 804947e:	2300      	movs	r3, #0
 8049480:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        sensor_msg_event.message_event_t.config_event.config_type =
            uart_msg_q[3];
 8049484:	7afb      	ldrb	r3, [r7, #11]
        sensor_msg_event.message_event_t.config_event.config_type =
 8049486:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
        sensor_msg_event.message_event_t.config_event.sensor_type =
            uart_msg_q[2];
 804948a:	7abb      	ldrb	r3, [r7, #10]
        sensor_msg_event.message_event_t.config_event.sensor_type =
 804948c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        res = osMessageQueuePut(SensorMsgQHandle, &sensor_msg_event, 0, 0);
 8049490:	4b20      	ldr	r3, [pc, #128]	; (8049514 <StartUart2Task+0xfc>)
 8049492:	6818      	ldr	r0, [r3, #0]
 8049494:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8049498:	2300      	movs	r3, #0
 804949a:	2200      	movs	r2, #0
 804949c:	f00c ffb2 	bl	8056404 <osMessageQueuePut>
 80494a0:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
      if (sensor_avaiable_check(uart_msg_q[2])) {
 80494a4:	e02b      	b.n	80494fe <StartUart2Task+0xe6>
      }
    } else if (uart_msg_q[0] == 0x5A && uart_msg_q[1] == 0xA5) {
 80494a6:	7a3b      	ldrb	r3, [r7, #8]
 80494a8:	2b5a      	cmp	r3, #90	; 0x5a
 80494aa:	d10e      	bne.n	80494ca <StartUart2Task+0xb2>
 80494ac:	7a7b      	ldrb	r3, [r7, #9]
 80494ae:	2ba5      	cmp	r3, #165	; 0xa5
 80494b0:	d10b      	bne.n	80494ca <StartUart2Task+0xb2>
      HAL_RetStaus =
          HAL_UART_Transmit(&huart2, uart_msg_q, UART_TX_CODE_LENGTH, 0xFFFF);
 80494b2:	f107 0108 	add.w	r1, r7, #8
 80494b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80494ba:	221d      	movs	r2, #29
 80494bc:	4813      	ldr	r0, [pc, #76]	; (804950c <StartUart2Task+0xf4>)
 80494be:	f00b fda8 	bl	8055012 <HAL_UART_Transmit>
 80494c2:	4603      	mov	r3, r0
 80494c4:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
      HAL_RetStaus =
 80494c8:	e019      	b.n	80494fe <StartUart2Task+0xe6>
    } else if (uart_msg_q[0] == 0xA5 && uart_msg_q[1] == 0x5A) {
 80494ca:	7a3b      	ldrb	r3, [r7, #8]
 80494cc:	2ba5      	cmp	r3, #165	; 0xa5
 80494ce:	d115      	bne.n	80494fc <StartUart2Task+0xe4>
 80494d0:	7a7b      	ldrb	r3, [r7, #9]
 80494d2:	2b5a      	cmp	r3, #90	; 0x5a
 80494d4:	d112      	bne.n	80494fc <StartUart2Task+0xe4>
      switch (uart_msg_q[2]) {
 80494d6:	7abb      	ldrb	r3, [r7, #10]
 80494d8:	2b00      	cmp	r3, #0
 80494da:	d107      	bne.n	80494ec <StartUart2Task+0xd4>
      case 0:
        uart_log_print_enable = false;
 80494dc:	4b0e      	ldr	r3, [pc, #56]	; (8049518 <StartUart2Task+0x100>)
 80494de:	2200      	movs	r2, #0
 80494e0:	701a      	strb	r2, [r3, #0]
        platformInitPrams.use_uart_mode = 1;
 80494e2:	4b0e      	ldr	r3, [pc, #56]	; (804951c <StartUart2Task+0x104>)
 80494e4:	2201      	movs	r2, #1
 80494e6:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
        //HAL_UART_Receive_DMA(&huart2, uart_msg_code, UART_RX_CODE_LENGTH);
        break;
 80494ea:	e008      	b.n	80494fe <StartUart2Task+0xe6>
      default:
        uart_log_print_enable = true;
 80494ec:	4b0a      	ldr	r3, [pc, #40]	; (8049518 <StartUart2Task+0x100>)
 80494ee:	2201      	movs	r2, #1
 80494f0:	701a      	strb	r2, [r3, #0]
        platformInitPrams.use_uart_mode = 0;
 80494f2:	4b0a      	ldr	r3, [pc, #40]	; (804951c <StartUart2Task+0x104>)
 80494f4:	2200      	movs	r2, #0
 80494f6:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
        break;
 80494fa:	e000      	b.n	80494fe <StartUart2Task+0xe6>
      }
    }
 80494fc:	bf00      	nop
    osDelay(1);
 80494fe:	2001      	movs	r0, #1
 8049500:	f00c fdfb 	bl	80560fa <osDelay>
    res = osMessageQueueGet(Uart2MsgQHandle, uart_msg_q, 0, portMAX_DELAY);
 8049504:	e78c      	b.n	8049420 <StartUart2Task+0x8>
 8049506:	bf00      	nop
 8049508:	2001bf70 	.word	0x2001bf70
 804950c:	2001c254 	.word	0x2001c254
 8049510:	08065be4 	.word	0x08065be4
 8049514:	2001bec8 	.word	0x2001bec8
 8049518:	2000788c 	.word	0x2000788c
 804951c:	2001c008 	.word	0x2001c008

08049520 <StartSensorManagerTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartSensorManagerTask */
void StartSensorManagerTask(void *argument)
{
 8049520:	b590      	push	{r4, r7, lr}
 8049522:	b0c5      	sub	sp, #276	; 0x114
 8049524:	af04      	add	r7, sp, #16
 8049526:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for (;;) {
    //printf("waiting for sensor_msg_event \r\n");
    res =
        osMessageQueueGet(SensorMsgQHandle, &sensor_msg_event, 0,
 8049528:	4b91      	ldr	r3, [pc, #580]	; (8049770 <StartSensorManagerTask+0x250>)
 804952a:	6818      	ldr	r0, [r3, #0]
 804952c:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8049530:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8049534:	2200      	movs	r2, #0
 8049536:	f00c ffc5 	bl	80564c4 <osMessageQueueGet>
 804953a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
                          portMAX_DELAY);
    if (res) {
 804953e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8049542:	2b00      	cmp	r3, #0
 8049544:	d001      	beq.n	804954a <StartSensorManagerTask+0x2a>
      /* osMessageQueueGet Error */
      Error_Handler();
 8049546:	f000 fae7 	bl	8049b18 <Error_Handler>
    }
    //printf("smgr event: %d \r\n", sensor_msg_event.message_event_type);

    switch (sensor_msg_event.message_event_type) {
 804954a:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 804954e:	2b0d      	cmp	r3, #13
 8049550:	f200 8109 	bhi.w	8049766 <StartSensorManagerTask+0x246>
 8049554:	a201      	add	r2, pc, #4	; (adr r2, 804955c <StartSensorManagerTask+0x3c>)
 8049556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804955a:	bf00      	nop
 804955c:	08049595 	.word	0x08049595
 8049560:	08049767 	.word	0x08049767
 8049564:	08049767 	.word	0x08049767
 8049568:	08049697 	.word	0x08049697
 804956c:	08049767 	.word	0x08049767
 8049570:	08049767 	.word	0x08049767
 8049574:	08049767 	.word	0x08049767
 8049578:	08049595 	.word	0x08049595
 804957c:	080495d7 	.word	0x080495d7
 8049580:	0804961f 	.word	0x0804961f
 8049584:	08049685 	.word	0x08049685
 8049588:	0804965f 	.word	0x0804965f
 804958c:	08049673 	.word	0x08049673
 8049590:	0804972d 	.word	0x0804972d
    case SENSOR_DEBUG_CONFIG_MSG:
    case SENSOR_CONFIG_MESSAGE:
      //check sensor type and decide to enable timer
      if (!board_init_complete) {
 8049594:	4b77      	ldr	r3, [pc, #476]	; (8049774 <StartSensorManagerTask+0x254>)
 8049596:	781b      	ldrb	r3, [r3, #0]
 8049598:	f083 0301 	eor.w	r3, r3, #1
 804959c:	b2db      	uxtb	r3, r3
 804959e:	2b00      	cmp	r3, #0
 80495a0:	d00a      	beq.n	80495b8 <StartSensorManagerTask+0x98>
        //if init is not completed re-add this message to SensorMsgQ
        res = osMessageQueuePut(SensorMsgQHandle, &sensor_msg_event, 0, 0);
 80495a2:	4b73      	ldr	r3, [pc, #460]	; (8049770 <StartSensorManagerTask+0x250>)
 80495a4:	6818      	ldr	r0, [r3, #0]
 80495a6:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80495aa:	2300      	movs	r3, #0
 80495ac:	2200      	movs	r2, #0
 80495ae:	f00c ff29 	bl	8056404 <osMessageQueuePut>
 80495b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
        break;
 80495b6:	e0d7      	b.n	8049768 <StartSensorManagerTask+0x248>
      }
      ret = sensor_config(sensor_msg_event.message_event_t.config_event);
 80495b8:	466c      	mov	r4, sp
 80495ba:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80495be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80495c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80495c6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80495ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80495cc:	f003 fb7e 	bl	804cccc <sensor_config>
 80495d0:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
      break;
 80495d4:	e0c8      	b.n	8049768 <StartSensorManagerTask+0x248>
    case SENSOR_TIMER_EVENT:
      if (sensor_msg_event.message_event_t.timer_event.timer_num == 1) {
 80495d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80495da:	2b01      	cmp	r3, #1
 80495dc:	d104      	bne.n	80495e8 <StartSensorManagerTask+0xc8>
        //os common timer for data polling
        ret = sensor_timer_handler();
 80495de:	f003 ffbd 	bl	804d55c <sensor_timer_handler>
 80495e2:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
        config_event_t sensor_cfg_event = { 0 };
        sensor_cfg_event.config_type = SENSOR_CONFIG_TIMEOUT;
        //printf("timeout config event! %u\r\n", osKernelGetTickCount());
        ret = sensor_config(sensor_cfg_event);
      }
      break;
 80495e6:	e0bf      	b.n	8049768 <StartSensorManagerTask+0x248>
        config_event_t sensor_cfg_event = { 0 };
 80495e8:	f107 0308 	add.w	r3, r7, #8
 80495ec:	2200      	movs	r2, #0
 80495ee:	601a      	str	r2, [r3, #0]
 80495f0:	605a      	str	r2, [r3, #4]
 80495f2:	609a      	str	r2, [r3, #8]
 80495f4:	60da      	str	r2, [r3, #12]
 80495f6:	611a      	str	r2, [r3, #16]
 80495f8:	615a      	str	r2, [r3, #20]
 80495fa:	619a      	str	r2, [r3, #24]
        sensor_cfg_event.config_type = SENSOR_CONFIG_TIMEOUT;
 80495fc:	2306      	movs	r3, #6
 80495fe:	727b      	strb	r3, [r7, #9]
        ret = sensor_config(sensor_cfg_event);
 8049600:	466c      	mov	r4, sp
 8049602:	f107 0318 	add.w	r3, r7, #24
 8049606:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 804960a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 804960e:	f107 0308 	add.w	r3, r7, #8
 8049612:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8049614:	f003 fb5a 	bl	804cccc <sensor_config>
 8049618:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
      break;
 804961c:	e0a4      	b.n	8049768 <StartSensorManagerTask+0x248>
    case SENSOR_INTERRUPT_EVENT:
      if (!board_init_complete) {
 804961e:	4b55      	ldr	r3, [pc, #340]	; (8049774 <StartSensorManagerTask+0x254>)
 8049620:	781b      	ldrb	r3, [r3, #0]
 8049622:	f083 0301 	eor.w	r3, r3, #1
 8049626:	b2db      	uxtb	r3, r3
 8049628:	2b00      	cmp	r3, #0
 804962a:	d00a      	beq.n	8049642 <StartSensorManagerTask+0x122>
        //if init is not completed re-add this message to SensorMsgQ
        res = osMessageQueuePut(SensorMsgQHandle, &sensor_msg_event, 0, 0);
 804962c:	4b50      	ldr	r3, [pc, #320]	; (8049770 <StartSensorManagerTask+0x250>)
 804962e:	6818      	ldr	r0, [r3, #0]
 8049630:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8049634:	2300      	movs	r3, #0
 8049636:	2200      	movs	r2, #0
 8049638:	f00c fee4 	bl	8056404 <osMessageQueuePut>
 804963c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
        break;
 8049640:	e092      	b.n	8049768 <StartSensorManagerTask+0x248>
      }
      printf("interrupt event %d!\r\n",
 8049642:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8049646:	4619      	mov	r1, r3
 8049648:	484b      	ldr	r0, [pc, #300]	; (8049778 <StartSensorManagerTask+0x258>)
 804964a:	f017 f993 	bl	8060974 <iprintf>
             sensor_msg_event.message_event_t.interrupt_event.interrupt_num);
      ret =
          sensor_irq_handler(sensor_msg_event.message_event_t.interrupt_event);
 804964e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8049652:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8049654:	f003 ffda 	bl	804d60c <sensor_irq_handler>
 8049658:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
      break;
 804965c:	e084      	b.n	8049768 <StartSensorManagerTask+0x248>
    case SENSOR_DATA_MESSAGE:
      //data message may come from can2 on other stm32 chip
      break;
    case SENSOR_ACTIVATE_COMPLETE_EVENT:
      printf("$$$activate done!\r\n");
 804965e:	4847      	ldr	r0, [pc, #284]	; (804977c <StartSensorManagerTask+0x25c>)
 8049660:	f017 fa24 	bl	8060aac <puts>
      osTimerStart(DataTimerHandle, DEFAULE_SAMPLE_RATE_MS);
 8049664:	4b46      	ldr	r3, [pc, #280]	; (8049780 <StartSensorManagerTask+0x260>)
 8049666:	681b      	ldr	r3, [r3, #0]
 8049668:	2114      	movs	r1, #20
 804966a:	4618      	mov	r0, r3
 804966c:	f00c fdf2 	bl	8056254 <osTimerStart>
      break;
 8049670:	e07a      	b.n	8049768 <StartSensorManagerTask+0x248>
    case SENSOR_DEACTIVATE_COMPLETE_EVENT:
      printf("###deactivate done!\r\n");
 8049672:	4844      	ldr	r0, [pc, #272]	; (8049784 <StartSensorManagerTask+0x264>)
 8049674:	f017 fa1a 	bl	8060aac <puts>
      osTimerStop(DataTimerHandle);
 8049678:	4b41      	ldr	r3, [pc, #260]	; (8049780 <StartSensorManagerTask+0x260>)
 804967a:	681b      	ldr	r3, [r3, #0]
 804967c:	4618      	mov	r0, r3
 804967e:	f00c fe17 	bl	80562b0 <osTimerStop>
      break;
 8049682:	e071      	b.n	8049768 <StartSensorManagerTask+0x248>
    case SENSOR_INIT_COMPLETE_EVENT:
      printf
 8049684:	2250      	movs	r2, #80	; 0x50
 8049686:	2158      	movs	r1, #88	; 0x58
 8049688:	483f      	ldr	r0, [pc, #252]	; (8049788 <StartSensorManagerTask+0x268>)
 804968a:	f017 f973 	bl	8060974 <iprintf>
          ("@@@init done! sizeof sensor_message_event_t: %d, sensors_event_t: %d \r\n",
           sizeof(sensor_message_event_t), sizeof(sensors_event_t));
      //sensor_mainboard_check();
      board_init_complete = true;
 804968e:	4b39      	ldr	r3, [pc, #228]	; (8049774 <StartSensorManagerTask+0x254>)
 8049690:	2201      	movs	r2, #1
 8049692:	701a      	strb	r2, [r3, #0]
      break;
 8049694:	e068      	b.n	8049768 <StartSensorManagerTask+0x248>
    case SENSOR_CONFIG_RESP_MESSAGE:
      printf("***config resp msg!\r\n");
 8049696:	483d      	ldr	r0, [pc, #244]	; (804978c <StartSensorManagerTask+0x26c>)
 8049698:	f017 fa08 	bl	8060aac <puts>
      if (sensor_msg_event.message_event_t.resp_event.config_type ==
 804969c:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 80496a0:	2b03      	cmp	r3, #3
 80496a2:	d114      	bne.n	80496ce <StartSensorManagerTask+0x1ae>
          SENSOR_CONFIG_CALIBRATION) {
        if (sensor_msg_event.message_event_t.resp_event.cfg_data.resp_data[0] ==
 80496a4:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80496a8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80496ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80496b0:	d109      	bne.n	80496c6 <StartSensorManagerTask+0x1a6>
            0) {
          //update flash to store calibration data
          update_calibration_data_to_flash(platformInitPrams.board_calidata);
 80496b2:	4b37      	ldr	r3, [pc, #220]	; (8049790 <StartSensorManagerTask+0x270>)
 80496b4:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80496b8:	4618      	mov	r0, r3
 80496ba:	f7f9 fe0d 	bl	80432d8 <update_calibration_data_to_flash>
          can_event_t.CanData.TxData[0] = 1;
 80496be:	2301      	movs	r3, #1
 80496c0:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
 80496c4:	e015      	b.n	80496f2 <StartSensorManagerTask+0x1d2>
        } else {
          can_event_t.CanData.TxData[0] = 0;
 80496c6:	2300      	movs	r3, #0
 80496c8:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
 80496cc:	e011      	b.n	80496f2 <StartSensorManagerTask+0x1d2>
        }
      } else if (sensor_msg_event.message_event_t.resp_event.config_type ==
 80496ce:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 80496d2:	2b02      	cmp	r3, #2
 80496d4:	d10d      	bne.n	80496f2 <StartSensorManagerTask+0x1d2>
                 SENSOR_CONFIG_SELFTEST) {
        if (sensor_msg_event.message_event_t.resp_event.cfg_data.resp_data[0] ==
 80496d6:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80496da:	eef5 7a40 	vcmp.f32	s15, #0.0
 80496de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80496e2:	d103      	bne.n	80496ec <StartSensorManagerTask+0x1cc>
            0) {
          can_event_t.CanData.TxData[0] = 1;
 80496e4:	2301      	movs	r3, #1
 80496e6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
 80496ea:	e002      	b.n	80496f2 <StartSensorManagerTask+0x1d2>
        } else {
          can_event_t.CanData.TxData[0] = 0;
 80496ec:	2300      	movs	r3, #0
 80496ee:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
        }
      }
      //return to can1 when receive cfg resp message stands for calibration success
      can_event_t.CanHeader.TxHeader.StdId =
          (SENSOR_CONFIG_RESP_MESSAGE << SENSOR_EVENT_MESSAGE_BIT_SHIFT)
          | (sensor_msg_event.message_event_t.resp_event.
 80496f2:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
             sensor_type << SENSOR_TYPE_BIT_SHIFT)
 80496f6:	011b      	lsls	r3, r3, #4
          | (sensor_msg_event.message_event_t.resp_event.
 80496f8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
          | sensor_msg_event.message_event_t.resp_event.config_type;
 80496fc:	f897 20a9 	ldrb.w	r2, [r7, #169]	; 0xa9
 8049700:	4313      	orrs	r3, r2
      can_event_t.CanHeader.TxHeader.StdId =
 8049702:	62fb      	str	r3, [r7, #44]	; 0x2c
      can_event_t.CanHeader.TxHeader.ExtId = 0x0;
 8049704:	2300      	movs	r3, #0
 8049706:	633b      	str	r3, [r7, #48]	; 0x30
      can_event_t.CanHeader.TxHeader.RTR = CAN_RTR_DATA;
 8049708:	2300      	movs	r3, #0
 804970a:	63bb      	str	r3, [r7, #56]	; 0x38
      can_event_t.CanHeader.TxHeader.IDE = CAN_ID_STD;
 804970c:	2300      	movs	r3, #0
 804970e:	637b      	str	r3, [r7, #52]	; 0x34
      can_event_t.CanHeader.TxHeader.DLC = 8;
 8049710:	2308      	movs	r3, #8
 8049712:	63fb      	str	r3, [r7, #60]	; 0x3c
      can_event_t.CanHeader.TxHeader.TransmitGlobalTime = DISABLE;
 8049714:	2300      	movs	r3, #0
 8049716:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
      osMessageQueuePut(Can1BroadcastQHandle, &can_event_t, 0, 0);
 804971a:	4b1e      	ldr	r3, [pc, #120]	; (8049794 <StartSensorManagerTask+0x274>)
 804971c:	6818      	ldr	r0, [r3, #0]
 804971e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8049722:	2300      	movs	r3, #0
 8049724:	2200      	movs	r2, #0
 8049726:	f00c fe6d 	bl	8056404 <osMessageQueuePut>
      break;
 804972a:	e01d      	b.n	8049768 <StartSensorManagerTask+0x248>
    case SENSOR_BUS_ERROR_EVENT:
      can_event_t.CanHeader.TxHeader.StdId =
        (SENSOR_DEBUG_CONFIG_MSG << SENSOR_EVENT_MESSAGE_BIT_SHIFT)
        | (sensor_msg_event.message_event_t.resp_event.
 804972c:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
           sensor_type << SENSOR_TYPE_BIT_SHIFT)
 8049730:	011b      	lsls	r3, r3, #4
        | (sensor_msg_event.message_event_t.resp_event.
 8049732:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
        | sensor_msg_event.message_event_t.resp_event.config_type;
 8049736:	f897 20a9 	ldrb.w	r2, [r7, #169]	; 0xa9
 804973a:	4313      	orrs	r3, r2
      can_event_t.CanHeader.TxHeader.StdId =
 804973c:	62fb      	str	r3, [r7, #44]	; 0x2c
      can_event_t.CanHeader.TxHeader.ExtId = 0x0;
 804973e:	2300      	movs	r3, #0
 8049740:	633b      	str	r3, [r7, #48]	; 0x30
      can_event_t.CanHeader.TxHeader.RTR = CAN_RTR_DATA;
 8049742:	2300      	movs	r3, #0
 8049744:	63bb      	str	r3, [r7, #56]	; 0x38
      can_event_t.CanHeader.TxHeader.IDE = CAN_ID_STD;
 8049746:	2300      	movs	r3, #0
 8049748:	637b      	str	r3, [r7, #52]	; 0x34
      can_event_t.CanHeader.TxHeader.DLC = 8;
 804974a:	2308      	movs	r3, #8
 804974c:	63fb      	str	r3, [r7, #60]	; 0x3c
      can_event_t.CanHeader.TxHeader.TransmitGlobalTime = DISABLE;
 804974e:	2300      	movs	r3, #0
 8049750:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
      osMessageQueuePut(Can1BroadcastQHandle, &can_event_t, 0, 0);
 8049754:	4b0f      	ldr	r3, [pc, #60]	; (8049794 <StartSensorManagerTask+0x274>)
 8049756:	6818      	ldr	r0, [r3, #0]
 8049758:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 804975c:	2300      	movs	r3, #0
 804975e:	2200      	movs	r2, #0
 8049760:	f00c fe50 	bl	8056404 <osMessageQueuePut>
      break;
 8049764:	e000      	b.n	8049768 <StartSensorManagerTask+0x248>
    default:
      break;
 8049766:	bf00      	nop
    }

    osDelay(1);
 8049768:	2001      	movs	r0, #1
 804976a:	f00c fcc6 	bl	80560fa <osDelay>
    res =
 804976e:	e6db      	b.n	8049528 <StartSensorManagerTask+0x8>
 8049770:	2001bec8 	.word	0x2001bec8
 8049774:	20008090 	.word	0x20008090
 8049778:	08065c00 	.word	0x08065c00
 804977c:	08065c18 	.word	0x08065c18
 8049780:	2001c1ac 	.word	0x2001c1ac
 8049784:	08065c2c 	.word	0x08065c2c
 8049788:	08065c44 	.word	0x08065c44
 804978c:	08065c8c 	.word	0x08065c8c
 8049790:	2001c008 	.word	0x2001c008
 8049794:	2001c004 	.word	0x2001c004

08049798 <StartSensorDataProcesser>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartSensorDataProcesser */
void StartSensorDataProcesser(void *argument)
{
 8049798:	b580      	push	{r7, lr}
 804979a:	b0a8      	sub	sp, #160	; 0xa0
 804979c:	af00      	add	r7, sp, #0
 804979e:	6078      	str	r0, [r7, #4]
  // we use sensor data proc to update all sensor results to can1 broadcast task
  // sensor data proc is also used for fusion algo calc
  /* Infinite loop */
  for (;;) {
    //printf("waiting for sensor data \r\n");
    res = osMessageQueueGet(SensorDataQHandle, &sensor_data, 0, portMAX_DELAY);
 80497a0:	4b6c      	ldr	r3, [pc, #432]	; (8049954 <StartSensorDataProcesser+0x1bc>)
 80497a2:	6818      	ldr	r0, [r3, #0]
 80497a4:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80497a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80497ac:	2200      	movs	r2, #0
 80497ae:	f00c fe89 	bl	80564c4 <osMessageQueueGet>
 80497b2:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
    if (!board_init_complete) {
 80497b6:	4b68      	ldr	r3, [pc, #416]	; (8049958 <StartSensorDataProcesser+0x1c0>)
 80497b8:	781b      	ldrb	r3, [r3, #0]
 80497ba:	f083 0301 	eor.w	r3, r3, #1
 80497be:	b2db      	uxtb	r3, r3
 80497c0:	2b00      	cmp	r3, #0
 80497c2:	d00a      	beq.n	80497da <StartSensorDataProcesser+0x42>
      //if init is not completed re-add this message to SensorMsgQ
      res = osMessageQueuePut(SensorDataQHandle, &sensor_data, 0, 0);
 80497c4:	4b63      	ldr	r3, [pc, #396]	; (8049954 <StartSensorDataProcesser+0x1bc>)
 80497c6:	6818      	ldr	r0, [r3, #0]
 80497c8:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80497cc:	2300      	movs	r3, #0
 80497ce:	2200      	movs	r2, #0
 80497d0:	f00c fe18 	bl	8056404 <osMessageQueuePut>
 80497d4:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
      continue;
 80497d8:	e0bb      	b.n	8049952 <StartSensorDataProcesser+0x1ba>
    }
    ret = sensor_data_handler(&sensor_data);
 80497da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80497de:	4618      	mov	r0, r3
 80497e0:	f003 ff4a 	bl	804d678 <sensor_data_handler>
 80497e4:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
    if (((CAN1_ENABLED_SENSORBIT >> sensor_data.sensor_type) & 1)
 80497e8:	4b5c      	ldr	r3, [pc, #368]	; (804995c <StartSensorDataProcesser+0x1c4>)
 80497ea:	881b      	ldrh	r3, [r3, #0]
 80497ec:	461a      	mov	r2, r3
 80497ee:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80497f2:	fa42 f303 	asr.w	r3, r2, r3
 80497f6:	f003 0301 	and.w	r3, r3, #1
 80497fa:	2b00      	cmp	r3, #0
 80497fc:	d117      	bne.n	804982e <StartSensorDataProcesser+0x96>
        || ((CAN1_ENABLED_SENSORBIT >> SENSOR_TYPE_MAX) & 1)
 80497fe:	4b57      	ldr	r3, [pc, #348]	; (804995c <StartSensorDataProcesser+0x1c4>)
 8049800:	881b      	ldrh	r3, [r3, #0]
 8049802:	0bdb      	lsrs	r3, r3, #15
 8049804:	b29b      	uxth	r3, r3
 8049806:	f003 0301 	and.w	r3, r3, #1
 804980a:	2b00      	cmp	r3, #0
 804980c:	d10f      	bne.n	804982e <StartSensorDataProcesser+0x96>
        || (sensor_data.accuracy == 0xFF)
 804980e:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8049812:	2bff      	cmp	r3, #255	; 0xff
 8049814:	d00b      	beq.n	804982e <StartSensorDataProcesser+0x96>
        || ((CAN1_GET_CALI_SENSORBIT >> sensor_data.sensor_type) & 1)) {
 8049816:	4b52      	ldr	r3, [pc, #328]	; (8049960 <StartSensorDataProcesser+0x1c8>)
 8049818:	881b      	ldrh	r3, [r3, #0]
 804981a:	461a      	mov	r2, r3
 804981c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8049820:	fa42 f303 	asr.w	r3, r2, r3
 8049824:	f003 0301 	and.w	r3, r3, #1
 8049828:	2b00      	cmp	r3, #0
 804982a:	f000 808f 	beq.w	804994c <StartSensorDataProcesser+0x1b4>
      data[0] = sensor_data.sensor_data_t.vec.data[0];
 804982e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8049830:	633b      	str	r3, [r7, #48]	; 0x30
      data[1] = sensor_data.sensor_data_t.vec.data[1];
 8049832:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8049834:	637b      	str	r3, [r7, #52]	; 0x34
      data[2] = sensor_data.sensor_data_t.vec.data[2];
 8049836:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8049838:	63bb      	str	r3, [r7, #56]	; 0x38
      data[3] = sensor_data.sensor_data_t.vec.data[3];
 804983a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 804983c:	63fb      	str	r3, [r7, #60]	; 0x3c
      //printf("DataQ %d { %f, %f, %f, %f} \r\n", sensor_data.sensor_type, data[0], data[1], data[2], data[3]);
      //printf("u8: %d, float: %d, uint64_t: %d \r\n", sizeof(uint8_t), sizeof(float), sizeof(uint64_t));
      data_size = sensor_get_index_length(sensor_data.sensor_type);
 804983e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8049842:	4618      	mov	r0, r3
 8049844:	f003 f8be 	bl	804c9c4 <sensor_get_index_length>
 8049848:	4603      	mov	r3, r0
 804984a:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
      if (data_size != 0xFF) {
 804984e:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8049852:	2bff      	cmp	r3, #255	; 0xff
 8049854:	d05f      	beq.n	8049916 <StartSensorDataProcesser+0x17e>
        for (int i = 0; i < data_size; i++) {
 8049856:	2300      	movs	r3, #0
 8049858:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 804985c:	e02e      	b.n	80498bc <StartSensorDataProcesser+0x124>
          can_event_t.CanHeader.TxHeader.StdId =
              (SENSOR_DATA_MESSAGE << SENSOR_EVENT_MESSAGE_BIT_SHIFT)
              | (sensor_data.sensor_type << SENSOR_TYPE_BIT_SHIFT)
 804985e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8049862:	011b      	lsls	r3, r3, #4
 8049864:	f443 7280 	orr.w	r2, r3, #256	; 0x100
              | data_size;
 8049868:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 804986c:	4313      	orrs	r3, r2
          can_event_t.CanHeader.TxHeader.StdId =
 804986e:	60fb      	str	r3, [r7, #12]
          can_event_t.CanHeader.TxHeader.ExtId = 0x0;
 8049870:	2300      	movs	r3, #0
 8049872:	613b      	str	r3, [r7, #16]
          can_event_t.CanHeader.TxHeader.RTR = CAN_RTR_DATA;
 8049874:	2300      	movs	r3, #0
 8049876:	61bb      	str	r3, [r7, #24]
          can_event_t.CanHeader.TxHeader.IDE = CAN_ID_STD;
 8049878:	2300      	movs	r3, #0
 804987a:	617b      	str	r3, [r7, #20]
          can_event_t.CanHeader.TxHeader.DLC = 8;
 804987c:	2308      	movs	r3, #8
 804987e:	61fb      	str	r3, [r7, #28]
          can_event_t.CanHeader.TxHeader.TransmitGlobalTime = DISABLE;
 8049880:	2300      	movs	r3, #0
 8049882:	f887 3020 	strb.w	r3, [r7, #32]
          can_event_t.CanData.TxData[0] = i;
 8049886:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 804988a:	b2db      	uxtb	r3, r3
 804988c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
          memcpy(&can_event_t.CanData.TxData[1], &data[i], sizeof(float));
 8049890:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8049894:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8049898:	009b      	lsls	r3, r3, #2
 804989a:	4413      	add	r3, r2
 804989c:	681b      	ldr	r3, [r3, #0]
 804989e:	f8c7 3029 	str.w	r3, [r7, #41]	; 0x29
#if USE_P1
          osMessageQueuePut(Can1BroadcastQHandle, &can_event_t, 0, 0);
 80498a2:	4b30      	ldr	r3, [pc, #192]	; (8049964 <StartSensorDataProcesser+0x1cc>)
 80498a4:	6818      	ldr	r0, [r3, #0]
 80498a6:	f107 010c 	add.w	r1, r7, #12
 80498aa:	2300      	movs	r3, #0
 80498ac:	2200      	movs	r2, #0
 80498ae:	f00c fda9 	bl	8056404 <osMessageQueuePut>
        for (int i = 0; i < data_size; i++) {
 80498b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80498b6:	3301      	adds	r3, #1
 80498b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80498bc:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80498c0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80498c4:	429a      	cmp	r2, r3
 80498c6:	dbca      	blt.n	804985e <StartSensorDataProcesser+0xc6>
#endif
        }
        //add timestamp message to list-tail: Todo, check if this kind of method can be used
        can_event_t.CanHeader.TxHeader.StdId =
            (SENSOR_TIMESTAMP_MESSAGE << SENSOR_EVENT_MESSAGE_BIT_SHIFT)
            | (sensor_data.sensor_type << SENSOR_TYPE_BIT_SHIFT)
 80498c8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80498cc:	011b      	lsls	r3, r3, #4
 80498ce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
            | data_size;
 80498d2:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80498d6:	4313      	orrs	r3, r2
        can_event_t.CanHeader.TxHeader.StdId =
 80498d8:	60fb      	str	r3, [r7, #12]
        can_event_t.CanHeader.TxHeader.ExtId = 0x0;
 80498da:	2300      	movs	r3, #0
 80498dc:	613b      	str	r3, [r7, #16]
        can_event_t.CanHeader.TxHeader.RTR = CAN_RTR_DATA;
 80498de:	2300      	movs	r3, #0
 80498e0:	61bb      	str	r3, [r7, #24]
        can_event_t.CanHeader.TxHeader.IDE = CAN_ID_STD;
 80498e2:	2300      	movs	r3, #0
 80498e4:	617b      	str	r3, [r7, #20]
        can_event_t.CanHeader.TxHeader.DLC = 8;
 80498e6:	2308      	movs	r3, #8
 80498e8:	61fb      	str	r3, [r7, #28]
        can_event_t.CanHeader.TxHeader.TransmitGlobalTime = DISABLE;
 80498ea:	2300      	movs	r3, #0
 80498ec:	f887 3020 	strb.w	r3, [r7, #32]
        memcpy(&can_event_t.CanData.TxData[0], &sensor_data.timestamp, sizeof(uint64_t));       //add timestamp here to userd
 80498f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80498f4:	f103 0108 	add.w	r1, r3, #8
 80498f8:	f107 030c 	add.w	r3, r7, #12
 80498fc:	331c      	adds	r3, #28
 80498fe:	2208      	movs	r2, #8
 8049900:	4618      	mov	r0, r3
 8049902:	f016 fb4d 	bl	805ffa0 <memcpy>
#if USE_P1
        osMessageQueuePut(Can1BroadcastQHandle, &can_event_t, 0, 0);
 8049906:	4b17      	ldr	r3, [pc, #92]	; (8049964 <StartSensorDataProcesser+0x1cc>)
 8049908:	6818      	ldr	r0, [r3, #0]
 804990a:	f107 010c 	add.w	r1, r7, #12
 804990e:	2300      	movs	r3, #0
 8049910:	2200      	movs	r2, #0
 8049912:	f00c fd77 	bl	8056404 <osMessageQueuePut>
#else
        osMessageQueuePut(Can2BroadcastQHandle, &can_event_t, 0, 0);
#endif
      }
      if ((CAN1_GET_CALI_SENSORBIT >> sensor_data.sensor_type) & 1) {
 8049916:	4b12      	ldr	r3, [pc, #72]	; (8049960 <StartSensorDataProcesser+0x1c8>)
 8049918:	881b      	ldrh	r3, [r3, #0]
 804991a:	461a      	mov	r2, r3
 804991c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8049920:	fa42 f303 	asr.w	r3, r2, r3
 8049924:	f003 0301 	and.w	r3, r3, #1
 8049928:	2b00      	cmp	r3, #0
 804992a:	d00f      	beq.n	804994c <StartSensorDataProcesser+0x1b4>
        CAN1_GET_CALI_SENSORBIT &= ~(1 << sensor_data.sensor_type);
 804992c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8049930:	461a      	mov	r2, r3
 8049932:	2301      	movs	r3, #1
 8049934:	4093      	lsls	r3, r2
 8049936:	b21b      	sxth	r3, r3
 8049938:	43db      	mvns	r3, r3
 804993a:	b21a      	sxth	r2, r3
 804993c:	4b08      	ldr	r3, [pc, #32]	; (8049960 <StartSensorDataProcesser+0x1c8>)
 804993e:	881b      	ldrh	r3, [r3, #0]
 8049940:	b21b      	sxth	r3, r3
 8049942:	4013      	ands	r3, r2
 8049944:	b21b      	sxth	r3, r3
 8049946:	b29a      	uxth	r2, r3
 8049948:	4b05      	ldr	r3, [pc, #20]	; (8049960 <StartSensorDataProcesser+0x1c8>)
 804994a:	801a      	strh	r2, [r3, #0]
      }
    }
    osDelay(1);
 804994c:	2001      	movs	r0, #1
 804994e:	f00c fbd4 	bl	80560fa <osDelay>
    res = osMessageQueueGet(SensorDataQHandle, &sensor_data, 0, portMAX_DELAY);
 8049952:	e725      	b.n	80497a0 <StartSensorDataProcesser+0x8>
 8049954:	2001be08 	.word	0x2001be08
 8049958:	20008090 	.word	0x20008090
 804995c:	2000808c 	.word	0x2000808c
 8049960:	2000808e 	.word	0x2000808e
 8049964:	2001c004 	.word	0x2001c004

08049968 <StartInitTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartInitTask */
void StartInitTask(void *argument)
{
 8049968:	b580      	push	{r7, lr}
 804996a:	b0a6      	sub	sp, #152	; 0x98
 804996c:	af00      	add	r7, sp, #0
 804996e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  sensor_message_event_t sensor_msg_event;
  can_message_event_t can_event_t;
  osStatus_t res;

  init_registered_sensors();
 8049970:	f003 f89c 	bl	804caac <init_registered_sensors>

  //update related sensor calibration data
  sensor_msg_event.message_event_type = SENSOR_CONFIG_MESSAGE;
 8049974:	2300      	movs	r3, #0
 8049976:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  sensor_msg_event.message_event_t.config_event.config_type =
 804997a:	2304      	movs	r3, #4
 804997c:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
      SENSOR_CONFIG_BIAS;
  sensor_msg_event.message_event_t.config_event.sensor_type =
 8049980:	2300      	movs	r3, #0
 8049982:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
      SENSOR_TYPE_ACCELEROMETER;
  res = osMessageQueuePut(SensorMsgQHandle, &sensor_msg_event, 0, 0);
 8049986:	4b35      	ldr	r3, [pc, #212]	; (8049a5c <StartInitTask+0xf4>)
 8049988:	6818      	ldr	r0, [r3, #0]
 804998a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 804998e:	2300      	movs	r3, #0
 8049990:	2200      	movs	r2, #0
 8049992:	f00c fd37 	bl	8056404 <osMessageQueuePut>
 8049996:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

  sensor_msg_event.message_event_type = SENSOR_CONFIG_MESSAGE;
 804999a:	2300      	movs	r3, #0
 804999c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  sensor_msg_event.message_event_t.config_event.config_type =
 80499a0:	2304      	movs	r3, #4
 80499a2:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
      SENSOR_CONFIG_BIAS;
  sensor_msg_event.message_event_t.config_event.sensor_type =
 80499a6:	2302      	movs	r3, #2
 80499a8:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
      SENSOR_TYPE_GYROSCOPE;
  res = osMessageQueuePut(SensorMsgQHandle, &sensor_msg_event, 0, 0);
 80499ac:	4b2b      	ldr	r3, [pc, #172]	; (8049a5c <StartInitTask+0xf4>)
 80499ae:	6818      	ldr	r0, [r3, #0]
 80499b0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80499b4:	2300      	movs	r3, #0
 80499b6:	2200      	movs	r2, #0
 80499b8:	f00c fd24 	bl	8056404 <osMessageQueuePut>
 80499bc:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

  sensor_msg_event.message_event_type = SENSOR_CONFIG_MESSAGE;
 80499c0:	2300      	movs	r3, #0
 80499c2:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  sensor_msg_event.message_event_t.config_event.config_type =
 80499c6:	2304      	movs	r3, #4
 80499c8:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
      SENSOR_CONFIG_BIAS;
  sensor_msg_event.message_event_t.config_event.sensor_type = SENSOR_TYPE_LIGHT;
 80499cc:	2303      	movs	r3, #3
 80499ce:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
  res = osMessageQueuePut(SensorMsgQHandle, &sensor_msg_event, 0, 0);
 80499d2:	4b22      	ldr	r3, [pc, #136]	; (8049a5c <StartInitTask+0xf4>)
 80499d4:	6818      	ldr	r0, [r3, #0]
 80499d6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80499da:	2300      	movs	r3, #0
 80499dc:	2200      	movs	r2, #0
 80499de:	f00c fd11 	bl	8056404 <osMessageQueuePut>
 80499e2:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

  sensor_msg_event.message_event_type = SENSOR_CONFIG_MESSAGE;
 80499e6:	2300      	movs	r3, #0
 80499e8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  sensor_msg_event.message_event_t.config_event.config_type =
 80499ec:	2304      	movs	r3, #4
 80499ee:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
      SENSOR_CONFIG_BIAS;
  sensor_msg_event.message_event_t.config_event.sensor_type =
 80499f2:	2306      	movs	r3, #6
 80499f4:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
      SENSOR_TYPE_PROXIMITY_BOT;
  res = osMessageQueuePut(SensorMsgQHandle, &sensor_msg_event, 0, 0);
 80499f8:	4b18      	ldr	r3, [pc, #96]	; (8049a5c <StartInitTask+0xf4>)
 80499fa:	6818      	ldr	r0, [r3, #0]
 80499fc:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8049a00:	2300      	movs	r3, #0
 8049a02:	2200      	movs	r2, #0
 8049a04:	f00c fcfe 	bl	8056404 <osMessageQueuePut>
 8049a08:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

  can_event_t.CanHeader.TxHeader.StdId =
      (SENSOR_TIME_SYNC_MSG << SENSOR_EVENT_MESSAGE_BIT_SHIFT)
      | (boardID << SENSOR_TYPE_BIT_SHIFT)
 8049a0c:	4b14      	ldr	r3, [pc, #80]	; (8049a60 <StartInitTask+0xf8>)
 8049a0e:	781b      	ldrb	r3, [r3, #0]
 8049a10:	011b      	lsls	r3, r3, #4
      | 0xf;
 8049a12:	f443 63c1 	orr.w	r3, r3, #1544	; 0x608
 8049a16:	f043 0307 	orr.w	r3, r3, #7
  can_event_t.CanHeader.TxHeader.StdId =
 8049a1a:	617b      	str	r3, [r7, #20]
  uint64_t current_time = sensor_get_timestamp();
 8049a1c:	f003 fe74 	bl	804d708 <sensor_get_timestamp>
 8049a20:	4602      	mov	r2, r0
 8049a22:	460b      	mov	r3, r1
 8049a24:	e9c7 2302 	strd	r2, r3, [r7, #8]
  memcpy(&can_event_t.CanData.TxData[0], &current_time, sizeof(uint64_t));
 8049a28:	f107 0108 	add.w	r1, r7, #8
 8049a2c:	f107 0314 	add.w	r3, r7, #20
 8049a30:	331c      	adds	r3, #28
 8049a32:	2208      	movs	r2, #8
 8049a34:	4618      	mov	r0, r3
 8049a36:	f016 fab3 	bl	805ffa0 <memcpy>
  res = osMessageQueuePut(Can1BroadcastQHandle, &can_event_t, 0, 0);
 8049a3a:	4b0a      	ldr	r3, [pc, #40]	; (8049a64 <StartInitTask+0xfc>)
 8049a3c:	6818      	ldr	r0, [r3, #0]
 8049a3e:	f107 0114 	add.w	r1, r7, #20
 8049a42:	2300      	movs	r3, #0
 8049a44:	2200      	movs	r2, #0
 8049a46:	f00c fcdd 	bl	8056404 <osMessageQueuePut>
 8049a4a:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

  for (;;) {
    osThreadSuspend(InitTaskHandle);
 8049a4e:	4b06      	ldr	r3, [pc, #24]	; (8049a68 <StartInitTask+0x100>)
 8049a50:	681b      	ldr	r3, [r3, #0]
 8049a52:	4618      	mov	r0, r3
 8049a54:	f00c fb30 	bl	80560b8 <osThreadSuspend>
 8049a58:	e7f9      	b.n	8049a4e <StartInitTask+0xe6>
 8049a5a:	bf00      	nop
 8049a5c:	2001bec8 	.word	0x2001bec8
 8049a60:	20007886 	.word	0x20007886
 8049a64:	2001c004 	.word	0x2001c004
 8049a68:	2001becc 	.word	0x2001becc

08049a6c <HAL_GPIO_EXTI_Callback>:
  }
  /* USER CODE END 5 */
}

void HAL_GPIO_EXTI_Callback(uint16_t gpio_pin)
{
 8049a6c:	b580      	push	{r7, lr}
 8049a6e:	b098      	sub	sp, #96	; 0x60
 8049a70:	af00      	add	r7, sp, #0
 8049a72:	4603      	mov	r3, r0
 8049a74:	80fb      	strh	r3, [r7, #6]
  sensor_message_event_t sensor_msg_event;
  sensor_msg_event.message_event_type = SENSOR_INTERRUPT_EVENT;
 8049a76:	2309      	movs	r3, #9
 8049a78:	723b      	strb	r3, [r7, #8]
  sensor_msg_event.message_event_t.interrupt_event.interrupt_num = gpio_pin;
 8049a7a:	88fb      	ldrh	r3, [r7, #6]
 8049a7c:	613b      	str	r3, [r7, #16]
  osMessageQueuePut(SensorMsgQHandle, &sensor_msg_event, 0, 0);
 8049a7e:	4b06      	ldr	r3, [pc, #24]	; (8049a98 <HAL_GPIO_EXTI_Callback+0x2c>)
 8049a80:	6818      	ldr	r0, [r3, #0]
 8049a82:	f107 0108 	add.w	r1, r7, #8
 8049a86:	2300      	movs	r3, #0
 8049a88:	2200      	movs	r2, #0
 8049a8a:	f00c fcbb 	bl	8056404 <osMessageQueuePut>
}
 8049a8e:	bf00      	nop
 8049a90:	3760      	adds	r7, #96	; 0x60
 8049a92:	46bd      	mov	sp, r7
 8049a94:	bd80      	pop	{r7, pc}
 8049a96:	bf00      	nop
 8049a98:	2001bec8 	.word	0x2001bec8

08049a9c <DataTimerCallback>:

/* USER CODE END 4 */

/* DataTimerCallback function */
void DataTimerCallback(void *argument)
{
 8049a9c:	b580      	push	{r7, lr}
 8049a9e:	b098      	sub	sp, #96	; 0x60
 8049aa0:	af00      	add	r7, sp, #0
 8049aa2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DataTimerCallback */
  sensor_message_event_t sensor_msg_event;
  sensor_msg_event.message_event_type = SENSOR_TIMER_EVENT;
 8049aa4:	2308      	movs	r3, #8
 8049aa6:	723b      	strb	r3, [r7, #8]
  sensor_msg_event.message_event_t.timer_event.timer_num = 1;
 8049aa8:	2301      	movs	r3, #1
 8049aaa:	613b      	str	r3, [r7, #16]
  osMessageQueuePut(SensorMsgQHandle, &sensor_msg_event, 0, 0);
 8049aac:	4b05      	ldr	r3, [pc, #20]	; (8049ac4 <DataTimerCallback+0x28>)
 8049aae:	6818      	ldr	r0, [r3, #0]
 8049ab0:	f107 0108 	add.w	r1, r7, #8
 8049ab4:	2300      	movs	r3, #0
 8049ab6:	2200      	movs	r2, #0
 8049ab8:	f00c fca4 	bl	8056404 <osMessageQueuePut>
  /* USER CODE END DataTimerCallback */
}
 8049abc:	bf00      	nop
 8049abe:	3760      	adds	r7, #96	; 0x60
 8049ac0:	46bd      	mov	sp, r7
 8049ac2:	bd80      	pop	{r7, pc}
 8049ac4:	2001bec8 	.word	0x2001bec8

08049ac8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 8049ac8:	b580      	push	{r7, lr}
 8049aca:	b09a      	sub	sp, #104	; 0x68
 8049acc:	af00      	add	r7, sp, #0
 8049ace:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8049ad0:	687b      	ldr	r3, [r7, #4]
 8049ad2:	681b      	ldr	r3, [r3, #0]
 8049ad4:	4a0d      	ldr	r2, [pc, #52]	; (8049b0c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8049ad6:	4293      	cmp	r3, r2
 8049ad8:	d101      	bne.n	8049ade <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8049ada:	f005 fd97 	bl	804f60c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM3) {
 8049ade:	687b      	ldr	r3, [r7, #4]
 8049ae0:	681b      	ldr	r3, [r3, #0]
 8049ae2:	4a0b      	ldr	r2, [pc, #44]	; (8049b10 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8049ae4:	4293      	cmp	r3, r2
 8049ae6:	d10c      	bne.n	8049b02 <HAL_TIM_PeriodElapsedCallback+0x3a>
    //clear update flag
    sensor_message_event_t sensor_msg_event;
    osStatus_t res;
    sensor_msg_event.message_event_type = SENSOR_TIMER_EVENT;
 8049ae8:	2308      	movs	r3, #8
 8049aea:	723b      	strb	r3, [r7, #8]
    sensor_msg_event.message_event_t.timer_event.timer_num = 3;
 8049aec:	2303      	movs	r3, #3
 8049aee:	613b      	str	r3, [r7, #16]
    res = osMessageQueuePut(SensorMsgQHandle, &sensor_msg_event, 0, 0);
 8049af0:	4b08      	ldr	r3, [pc, #32]	; (8049b14 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8049af2:	6818      	ldr	r0, [r3, #0]
 8049af4:	f107 0108 	add.w	r1, r7, #8
 8049af8:	2300      	movs	r3, #0
 8049afa:	2200      	movs	r2, #0
 8049afc:	f00c fc82 	bl	8056404 <osMessageQueuePut>
 8049b00:	6678      	str	r0, [r7, #100]	; 0x64
  }
  /* USER CODE END Callback 1 */
}
 8049b02:	bf00      	nop
 8049b04:	3768      	adds	r7, #104	; 0x68
 8049b06:	46bd      	mov	sp, r7
 8049b08:	bd80      	pop	{r7, pc}
 8049b0a:	bf00      	nop
 8049b0c:	40010000 	.word	0x40010000
 8049b10:	40000400 	.word	0x40000400
 8049b14:	2001bec8 	.word	0x2001bec8

08049b18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8049b18:	b480      	push	{r7}
 8049b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8049b1c:	bf00      	nop
 8049b1e:	46bd      	mov	sp, r7
 8049b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049b24:	4770      	bx	lr
	...

08049b28 <rot_v_state_init>:
static bool rot_v_activated = false;

static float rot_v_quaternion[4] = { 1.0, 0.0, 0.0, 0.0 };
static float temp_roll, temp_pitch, temp_yaw;
void rot_v_state_init()
{
 8049b28:	b5b0      	push	{r4, r5, r7, lr}
 8049b2a:	b094      	sub	sp, #80	; 0x50
 8049b2c:	af00      	add	r7, sp, #0

  float variance_1_temp[16] = { 1, 0, 0, 0,     // initial variance = I matrix
 8049b2e:	4b42      	ldr	r3, [pc, #264]	; (8049c38 <rot_v_state_init+0x110>)
 8049b30:	463c      	mov	r4, r7
 8049b32:	461d      	mov	r5, r3
 8049b34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8049b36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8049b38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8049b3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8049b3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8049b3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8049b40:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8049b44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1
  };

  posture_loc.posture_start = 5;
 8049b48:	4b3c      	ldr	r3, [pc, #240]	; (8049c3c <rot_v_state_init+0x114>)
 8049b4a:	2205      	movs	r2, #5
 8049b4c:	601a      	str	r2, [r3, #0]

  posture_loc.acc_correct = 0;
 8049b4e:	4b3b      	ldr	r3, [pc, #236]	; (8049c3c <rot_v_state_init+0x114>)
 8049b50:	2200      	movs	r2, #0
 8049b52:	605a      	str	r2, [r3, #4]
  posture_loc.mag_correct = 0;
 8049b54:	4b39      	ldr	r3, [pc, #228]	; (8049c3c <rot_v_state_init+0x114>)
 8049b56:	2200      	movs	r2, #0
 8049b58:	609a      	str	r2, [r3, #8]
  for (int i = 0; i < 4; i++) {
 8049b5a:	2300      	movs	r3, #0
 8049b5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8049b5e:	e014      	b.n	8049b8a <rot_v_state_init+0x62>
    posture_loc.state[i] = 0;
 8049b60:	4a36      	ldr	r2, [pc, #216]	; (8049c3c <rot_v_state_init+0x114>)
 8049b62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8049b64:	3302      	adds	r3, #2
 8049b66:	009b      	lsls	r3, r3, #2
 8049b68:	4413      	add	r3, r2
 8049b6a:	3304      	adds	r3, #4
 8049b6c:	f04f 0200 	mov.w	r2, #0
 8049b70:	601a      	str	r2, [r3, #0]
    posture_loc.state_1[i] = 0;
 8049b72:	4a32      	ldr	r2, [pc, #200]	; (8049c3c <rot_v_state_init+0x114>)
 8049b74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8049b76:	3306      	adds	r3, #6
 8049b78:	009b      	lsls	r3, r3, #2
 8049b7a:	4413      	add	r3, r2
 8049b7c:	3304      	adds	r3, #4
 8049b7e:	f04f 0200 	mov.w	r2, #0
 8049b82:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < 4; i++) {
 8049b84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8049b86:	3301      	adds	r3, #1
 8049b88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8049b8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8049b8c:	2b03      	cmp	r3, #3
 8049b8e:	dde7      	ble.n	8049b60 <rot_v_state_init+0x38>
  }

  for (int i = 0; i < 16; i++)
 8049b90:	2300      	movs	r3, #0
 8049b92:	64bb      	str	r3, [r7, #72]	; 0x48
 8049b94:	e010      	b.n	8049bb8 <rot_v_state_init+0x90>
    posture_loc.variance_1[i] = variance_1_temp[i];
 8049b96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8049b98:	009b      	lsls	r3, r3, #2
 8049b9a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8049b9e:	4413      	add	r3, r2
 8049ba0:	3b50      	subs	r3, #80	; 0x50
 8049ba2:	681a      	ldr	r2, [r3, #0]
 8049ba4:	4925      	ldr	r1, [pc, #148]	; (8049c3c <rot_v_state_init+0x114>)
 8049ba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8049ba8:	330a      	adds	r3, #10
 8049baa:	009b      	lsls	r3, r3, #2
 8049bac:	440b      	add	r3, r1
 8049bae:	3304      	adds	r3, #4
 8049bb0:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < 16; i++)
 8049bb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8049bb4:	3301      	adds	r3, #1
 8049bb6:	64bb      	str	r3, [r7, #72]	; 0x48
 8049bb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8049bba:	2b0f      	cmp	r3, #15
 8049bbc:	ddeb      	ble.n	8049b96 <rot_v_state_init+0x6e>

  for (int i = 0; i < 16; i++)
 8049bbe:	2300      	movs	r3, #0
 8049bc0:	647b      	str	r3, [r7, #68]	; 0x44
 8049bc2:	e00b      	b.n	8049bdc <rot_v_state_init+0xb4>
    posture_loc.A_1[i] = 0;
 8049bc4:	4a1d      	ldr	r2, [pc, #116]	; (8049c3c <rot_v_state_init+0x114>)
 8049bc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8049bc8:	331a      	adds	r3, #26
 8049bca:	009b      	lsls	r3, r3, #2
 8049bcc:	4413      	add	r3, r2
 8049bce:	3304      	adds	r3, #4
 8049bd0:	f04f 0200 	mov.w	r2, #0
 8049bd4:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < 16; i++)
 8049bd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8049bd8:	3301      	adds	r3, #1
 8049bda:	647b      	str	r3, [r7, #68]	; 0x44
 8049bdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8049bde:	2b0f      	cmp	r3, #15
 8049be0:	ddf0      	ble.n	8049bc4 <rot_v_state_init+0x9c>

  for (int i = 0; i < 3; i++) {
 8049be2:	2300      	movs	r3, #0
 8049be4:	643b      	str	r3, [r7, #64]	; 0x40
 8049be6:	e01c      	b.n	8049c22 <rot_v_state_init+0xfa>
    posture_loc.acc[i] = 0;
 8049be8:	4a14      	ldr	r2, [pc, #80]	; (8049c3c <rot_v_state_init+0x114>)
 8049bea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8049bec:	332a      	adds	r3, #42	; 0x2a
 8049bee:	009b      	lsls	r3, r3, #2
 8049bf0:	4413      	add	r3, r2
 8049bf2:	3304      	adds	r3, #4
 8049bf4:	f04f 0200 	mov.w	r2, #0
 8049bf8:	601a      	str	r2, [r3, #0]
    posture_loc.gyro[i] = 0;
 8049bfa:	4a10      	ldr	r2, [pc, #64]	; (8049c3c <rot_v_state_init+0x114>)
 8049bfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8049bfe:	332e      	adds	r3, #46	; 0x2e
 8049c00:	009b      	lsls	r3, r3, #2
 8049c02:	4413      	add	r3, r2
 8049c04:	f04f 0200 	mov.w	r2, #0
 8049c08:	601a      	str	r2, [r3, #0]
    posture_loc.mag[i] = 0;
 8049c0a:	4a0c      	ldr	r2, [pc, #48]	; (8049c3c <rot_v_state_init+0x114>)
 8049c0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8049c0e:	3330      	adds	r3, #48	; 0x30
 8049c10:	009b      	lsls	r3, r3, #2
 8049c12:	4413      	add	r3, r2
 8049c14:	3304      	adds	r3, #4
 8049c16:	f04f 0200 	mov.w	r2, #0
 8049c1a:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < 3; i++) {
 8049c1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8049c1e:	3301      	adds	r3, #1
 8049c20:	643b      	str	r3, [r7, #64]	; 0x40
 8049c22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8049c24:	2b02      	cmp	r3, #2
 8049c26:	dddf      	ble.n	8049be8 <rot_v_state_init+0xc0>
  }

  printf("rot_v_state_init done !!!\r\n");
 8049c28:	4805      	ldr	r0, [pc, #20]	; (8049c40 <rot_v_state_init+0x118>)
 8049c2a:	f016 ff3f 	bl	8060aac <puts>
}
 8049c2e:	bf00      	nop
 8049c30:	3750      	adds	r7, #80	; 0x50
 8049c32:	46bd      	mov	sp, r7
 8049c34:	bdb0      	pop	{r4, r5, r7, pc}
 8049c36:	bf00      	nop
 8049c38:	08065cc0 	.word	0x08065cc0
 8049c3c:	200080bc 	.word	0x200080bc
 8049c40:	08065ca4 	.word	0x08065ca4

08049c44 <matrix_multiply>:

static void matrix_multiply(float *A, float *B, float *C, int AR, int AC,
                            int BC)
{                               // AR = row of matrix A, AC = column of matrix A, BC = column of matrix B
 8049c44:	b480      	push	{r7}
 8049c46:	b08d      	sub	sp, #52	; 0x34
 8049c48:	af00      	add	r7, sp, #0
 8049c4a:	60f8      	str	r0, [r7, #12]
 8049c4c:	60b9      	str	r1, [r7, #8]
 8049c4e:	607a      	str	r2, [r7, #4]
 8049c50:	603b      	str	r3, [r7, #0]
  float a_temp = 0, b_temp = 0, c_temp = 0;
 8049c52:	f04f 0300 	mov.w	r3, #0
 8049c56:	623b      	str	r3, [r7, #32]
 8049c58:	f04f 0300 	mov.w	r3, #0
 8049c5c:	61fb      	str	r3, [r7, #28]
 8049c5e:	f04f 0300 	mov.w	r3, #0
 8049c62:	61bb      	str	r3, [r7, #24]
  int i = 0, j = 0, k = 0, l = 0;
 8049c64:	2300      	movs	r3, #0
 8049c66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8049c68:	2300      	movs	r3, #0
 8049c6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8049c6c:	2300      	movs	r3, #0
 8049c6e:	627b      	str	r3, [r7, #36]	; 0x24
 8049c70:	2300      	movs	r3, #0
 8049c72:	617b      	str	r3, [r7, #20]

  for (i = 0; i < AR; i++) {
 8049c74:	2300      	movs	r3, #0
 8049c76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8049c78:	e052      	b.n	8049d20 <matrix_multiply+0xdc>
    for (j = 0; j < BC; j++) {
 8049c7a:	2300      	movs	r3, #0
 8049c7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8049c7e:	e048      	b.n	8049d12 <matrix_multiply+0xce>
      l = i * BC + j;
 8049c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8049c82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8049c84:	fb02 f303 	mul.w	r3, r2, r3
 8049c88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8049c8a:	4413      	add	r3, r2
 8049c8c:	617b      	str	r3, [r7, #20]
      C[l] = 0;
 8049c8e:	697b      	ldr	r3, [r7, #20]
 8049c90:	009b      	lsls	r3, r3, #2
 8049c92:	687a      	ldr	r2, [r7, #4]
 8049c94:	4413      	add	r3, r2
 8049c96:	f04f 0200 	mov.w	r2, #0
 8049c9a:	601a      	str	r2, [r3, #0]
      for (k = 0; k < AC; k++) {
 8049c9c:	2300      	movs	r3, #0
 8049c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8049ca0:	e030      	b.n	8049d04 <matrix_multiply+0xc0>
        a_temp = A[i * AC + k];
 8049ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8049ca4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8049ca6:	fb02 f203 	mul.w	r2, r2, r3
 8049caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8049cac:	4413      	add	r3, r2
 8049cae:	009b      	lsls	r3, r3, #2
 8049cb0:	68fa      	ldr	r2, [r7, #12]
 8049cb2:	4413      	add	r3, r2
 8049cb4:	681b      	ldr	r3, [r3, #0]
 8049cb6:	623b      	str	r3, [r7, #32]
        b_temp = B[k * BC + j];
 8049cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8049cba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8049cbc:	fb02 f203 	mul.w	r2, r2, r3
 8049cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8049cc2:	4413      	add	r3, r2
 8049cc4:	009b      	lsls	r3, r3, #2
 8049cc6:	68ba      	ldr	r2, [r7, #8]
 8049cc8:	4413      	add	r3, r2
 8049cca:	681b      	ldr	r3, [r3, #0]
 8049ccc:	61fb      	str	r3, [r7, #28]
        c_temp = a_temp * b_temp;
 8049cce:	ed97 7a08 	vldr	s14, [r7, #32]
 8049cd2:	edd7 7a07 	vldr	s15, [r7, #28]
 8049cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8049cda:	edc7 7a06 	vstr	s15, [r7, #24]
        C[l] += c_temp;
 8049cde:	697b      	ldr	r3, [r7, #20]
 8049ce0:	009b      	lsls	r3, r3, #2
 8049ce2:	687a      	ldr	r2, [r7, #4]
 8049ce4:	4413      	add	r3, r2
 8049ce6:	ed93 7a00 	vldr	s14, [r3]
 8049cea:	697b      	ldr	r3, [r7, #20]
 8049cec:	009b      	lsls	r3, r3, #2
 8049cee:	687a      	ldr	r2, [r7, #4]
 8049cf0:	4413      	add	r3, r2
 8049cf2:	edd7 7a06 	vldr	s15, [r7, #24]
 8049cf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8049cfa:	edc3 7a00 	vstr	s15, [r3]
      for (k = 0; k < AC; k++) {
 8049cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8049d00:	3301      	adds	r3, #1
 8049d02:	627b      	str	r3, [r7, #36]	; 0x24
 8049d04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8049d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8049d08:	429a      	cmp	r2, r3
 8049d0a:	dbca      	blt.n	8049ca2 <matrix_multiply+0x5e>
    for (j = 0; j < BC; j++) {
 8049d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8049d0e:	3301      	adds	r3, #1
 8049d10:	62bb      	str	r3, [r7, #40]	; 0x28
 8049d12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8049d14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8049d16:	429a      	cmp	r2, r3
 8049d18:	dbb2      	blt.n	8049c80 <matrix_multiply+0x3c>
  for (i = 0; i < AR; i++) {
 8049d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8049d1c:	3301      	adds	r3, #1
 8049d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8049d20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8049d22:	683b      	ldr	r3, [r7, #0]
 8049d24:	429a      	cmp	r2, r3
 8049d26:	dba8      	blt.n	8049c7a <matrix_multiply+0x36>
      }
    }
  }
}
 8049d28:	bf00      	nop
 8049d2a:	bf00      	nop
 8049d2c:	3734      	adds	r7, #52	; 0x34
 8049d2e:	46bd      	mov	sp, r7
 8049d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049d34:	4770      	bx	lr

08049d36 <matrix_multiply_trans>:

// matrix A * transpose of matrix B = matrix C
static void matrix_multiply_trans(float *A, float *B, float *C, int AR, int AC,
                                  int BR)
{                               // AR = row of matrix A, AC = column of matrix A, BC = row of matrix B
 8049d36:	b480      	push	{r7}
 8049d38:	b08d      	sub	sp, #52	; 0x34
 8049d3a:	af00      	add	r7, sp, #0
 8049d3c:	60f8      	str	r0, [r7, #12]
 8049d3e:	60b9      	str	r1, [r7, #8]
 8049d40:	607a      	str	r2, [r7, #4]
 8049d42:	603b      	str	r3, [r7, #0]
  float a_temp = 0, b_temp = 0, c_temp = 0;
 8049d44:	f04f 0300 	mov.w	r3, #0
 8049d48:	623b      	str	r3, [r7, #32]
 8049d4a:	f04f 0300 	mov.w	r3, #0
 8049d4e:	61fb      	str	r3, [r7, #28]
 8049d50:	f04f 0300 	mov.w	r3, #0
 8049d54:	61bb      	str	r3, [r7, #24]
  int i = 0, j = 0, k = 0, l = 0;
 8049d56:	2300      	movs	r3, #0
 8049d58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8049d5a:	2300      	movs	r3, #0
 8049d5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8049d5e:	2300      	movs	r3, #0
 8049d60:	627b      	str	r3, [r7, #36]	; 0x24
 8049d62:	2300      	movs	r3, #0
 8049d64:	617b      	str	r3, [r7, #20]

  for (i = 0; i < AR; i++) {
 8049d66:	2300      	movs	r3, #0
 8049d68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8049d6a:	e052      	b.n	8049e12 <matrix_multiply_trans+0xdc>
    for (j = 0; j < BR; j++) {
 8049d6c:	2300      	movs	r3, #0
 8049d6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8049d70:	e048      	b.n	8049e04 <matrix_multiply_trans+0xce>
      l = i * BR + j;
 8049d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8049d74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8049d76:	fb02 f303 	mul.w	r3, r2, r3
 8049d7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8049d7c:	4413      	add	r3, r2
 8049d7e:	617b      	str	r3, [r7, #20]
      C[l] = 0;
 8049d80:	697b      	ldr	r3, [r7, #20]
 8049d82:	009b      	lsls	r3, r3, #2
 8049d84:	687a      	ldr	r2, [r7, #4]
 8049d86:	4413      	add	r3, r2
 8049d88:	f04f 0200 	mov.w	r2, #0
 8049d8c:	601a      	str	r2, [r3, #0]
      for (k = 0; k < AC; k++) {
 8049d8e:	2300      	movs	r3, #0
 8049d90:	627b      	str	r3, [r7, #36]	; 0x24
 8049d92:	e030      	b.n	8049df6 <matrix_multiply_trans+0xc0>
        a_temp = A[i * AC + k];
 8049d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8049d96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8049d98:	fb02 f203 	mul.w	r2, r2, r3
 8049d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8049d9e:	4413      	add	r3, r2
 8049da0:	009b      	lsls	r3, r3, #2
 8049da2:	68fa      	ldr	r2, [r7, #12]
 8049da4:	4413      	add	r3, r2
 8049da6:	681b      	ldr	r3, [r3, #0]
 8049da8:	623b      	str	r3, [r7, #32]
        b_temp = B[j * AC + k];
 8049daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8049dac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8049dae:	fb02 f203 	mul.w	r2, r2, r3
 8049db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8049db4:	4413      	add	r3, r2
 8049db6:	009b      	lsls	r3, r3, #2
 8049db8:	68ba      	ldr	r2, [r7, #8]
 8049dba:	4413      	add	r3, r2
 8049dbc:	681b      	ldr	r3, [r3, #0]
 8049dbe:	61fb      	str	r3, [r7, #28]
        c_temp = a_temp * b_temp;
 8049dc0:	ed97 7a08 	vldr	s14, [r7, #32]
 8049dc4:	edd7 7a07 	vldr	s15, [r7, #28]
 8049dc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8049dcc:	edc7 7a06 	vstr	s15, [r7, #24]
        C[l] += c_temp;
 8049dd0:	697b      	ldr	r3, [r7, #20]
 8049dd2:	009b      	lsls	r3, r3, #2
 8049dd4:	687a      	ldr	r2, [r7, #4]
 8049dd6:	4413      	add	r3, r2
 8049dd8:	ed93 7a00 	vldr	s14, [r3]
 8049ddc:	697b      	ldr	r3, [r7, #20]
 8049dde:	009b      	lsls	r3, r3, #2
 8049de0:	687a      	ldr	r2, [r7, #4]
 8049de2:	4413      	add	r3, r2
 8049de4:	edd7 7a06 	vldr	s15, [r7, #24]
 8049de8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8049dec:	edc3 7a00 	vstr	s15, [r3]
      for (k = 0; k < AC; k++) {
 8049df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8049df2:	3301      	adds	r3, #1
 8049df4:	627b      	str	r3, [r7, #36]	; 0x24
 8049df6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8049df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8049dfa:	429a      	cmp	r2, r3
 8049dfc:	dbca      	blt.n	8049d94 <matrix_multiply_trans+0x5e>
    for (j = 0; j < BR; j++) {
 8049dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8049e00:	3301      	adds	r3, #1
 8049e02:	62bb      	str	r3, [r7, #40]	; 0x28
 8049e04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8049e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8049e08:	429a      	cmp	r2, r3
 8049e0a:	dbb2      	blt.n	8049d72 <matrix_multiply_trans+0x3c>
  for (i = 0; i < AR; i++) {
 8049e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8049e0e:	3301      	adds	r3, #1
 8049e10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8049e12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8049e14:	683b      	ldr	r3, [r7, #0]
 8049e16:	429a      	cmp	r2, r3
 8049e18:	dba8      	blt.n	8049d6c <matrix_multiply_trans+0x36>
      }
    }
  }
}
 8049e1a:	bf00      	nop
 8049e1c:	bf00      	nop
 8049e1e:	3734      	adds	r7, #52	; 0x34
 8049e20:	46bd      	mov	sp, r7
 8049e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049e26:	4770      	bx	lr

08049e28 <ABAT>:

// matrix A * matrix B * transpose of matrix A = matrix C
static void ABAT(float *A, float *B, float *C, int AR, int AC)
{                               // AR = row of matrix A, AC = column of matrix A
 8049e28:	b580      	push	{r7, lr}
 8049e2a:	b096      	sub	sp, #88	; 0x58
 8049e2c:	af02      	add	r7, sp, #8
 8049e2e:	60f8      	str	r0, [r7, #12]
 8049e30:	60b9      	str	r1, [r7, #8]
 8049e32:	607a      	str	r2, [r7, #4]
 8049e34:	603b      	str	r3, [r7, #0]
  float Temp[16] = { 0 };
 8049e36:	f107 0310 	add.w	r3, r7, #16
 8049e3a:	2240      	movs	r2, #64	; 0x40
 8049e3c:	2100      	movs	r1, #0
 8049e3e:	4618      	mov	r0, r3
 8049e40:	f016 f8bc 	bl	805ffbc <memset>
  matrix_multiply(A, B, Temp, AR, AC, AC);
 8049e44:	f107 0210 	add.w	r2, r7, #16
 8049e48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8049e4a:	9301      	str	r3, [sp, #4]
 8049e4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8049e4e:	9300      	str	r3, [sp, #0]
 8049e50:	683b      	ldr	r3, [r7, #0]
 8049e52:	68b9      	ldr	r1, [r7, #8]
 8049e54:	68f8      	ldr	r0, [r7, #12]
 8049e56:	f7ff fef5 	bl	8049c44 <matrix_multiply>
  matrix_multiply_trans(Temp, A, C, AR, AC, AR);
 8049e5a:	f107 0010 	add.w	r0, r7, #16
 8049e5e:	683b      	ldr	r3, [r7, #0]
 8049e60:	9301      	str	r3, [sp, #4]
 8049e62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8049e64:	9300      	str	r3, [sp, #0]
 8049e66:	683b      	ldr	r3, [r7, #0]
 8049e68:	687a      	ldr	r2, [r7, #4]
 8049e6a:	68f9      	ldr	r1, [r7, #12]
 8049e6c:	f7ff ff63 	bl	8049d36 <matrix_multiply_trans>
}
 8049e70:	bf00      	nop
 8049e72:	3750      	adds	r7, #80	; 0x50
 8049e74:	46bd      	mov	sp, r7
 8049e76:	bd80      	pop	{r7, pc}

08049e78 <matrix_inverse>:

// inverse of matrix A = matrix AI
static void matrix_inverse(float *A, float *AI)
{
 8049e78:	b480      	push	{r7}
 8049e7a:	b085      	sub	sp, #20
 8049e7c:	af00      	add	r7, sp, #0
 8049e7e:	6078      	str	r0, [r7, #4]
 8049e80:	6039      	str	r1, [r7, #0]
  float det = 0, invdet = 0;
 8049e82:	f04f 0300 	mov.w	r3, #0
 8049e86:	60fb      	str	r3, [r7, #12]
 8049e88:	f04f 0300 	mov.w	r3, #0
 8049e8c:	60bb      	str	r3, [r7, #8]

  det = A[0] * (A[4] * A[8] - A[7] * A[5])
 8049e8e:	687b      	ldr	r3, [r7, #4]
 8049e90:	ed93 7a00 	vldr	s14, [r3]
 8049e94:	687b      	ldr	r3, [r7, #4]
 8049e96:	3310      	adds	r3, #16
 8049e98:	edd3 6a00 	vldr	s13, [r3]
 8049e9c:	687b      	ldr	r3, [r7, #4]
 8049e9e:	3320      	adds	r3, #32
 8049ea0:	edd3 7a00 	vldr	s15, [r3]
 8049ea4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8049ea8:	687b      	ldr	r3, [r7, #4]
 8049eaa:	331c      	adds	r3, #28
 8049eac:	ed93 6a00 	vldr	s12, [r3]
 8049eb0:	687b      	ldr	r3, [r7, #4]
 8049eb2:	3314      	adds	r3, #20
 8049eb4:	edd3 7a00 	vldr	s15, [r3]
 8049eb8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8049ebc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8049ec0:	ee27 7a27 	vmul.f32	s14, s14, s15
      - A[1] * (A[3] * A[8] - A[5] * A[6])
 8049ec4:	687b      	ldr	r3, [r7, #4]
 8049ec6:	3304      	adds	r3, #4
 8049ec8:	edd3 6a00 	vldr	s13, [r3]
 8049ecc:	687b      	ldr	r3, [r7, #4]
 8049ece:	330c      	adds	r3, #12
 8049ed0:	ed93 6a00 	vldr	s12, [r3]
 8049ed4:	687b      	ldr	r3, [r7, #4]
 8049ed6:	3320      	adds	r3, #32
 8049ed8:	edd3 7a00 	vldr	s15, [r3]
 8049edc:	ee26 6a27 	vmul.f32	s12, s12, s15
 8049ee0:	687b      	ldr	r3, [r7, #4]
 8049ee2:	3314      	adds	r3, #20
 8049ee4:	edd3 5a00 	vldr	s11, [r3]
 8049ee8:	687b      	ldr	r3, [r7, #4]
 8049eea:	3318      	adds	r3, #24
 8049eec:	edd3 7a00 	vldr	s15, [r3]
 8049ef0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8049ef4:	ee76 7a67 	vsub.f32	s15, s12, s15
 8049ef8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8049efc:	ee37 7a67 	vsub.f32	s14, s14, s15
      + A[2] * (A[3] * A[7] - A[4] * A[6]);
 8049f00:	687b      	ldr	r3, [r7, #4]
 8049f02:	3308      	adds	r3, #8
 8049f04:	edd3 6a00 	vldr	s13, [r3]
 8049f08:	687b      	ldr	r3, [r7, #4]
 8049f0a:	330c      	adds	r3, #12
 8049f0c:	ed93 6a00 	vldr	s12, [r3]
 8049f10:	687b      	ldr	r3, [r7, #4]
 8049f12:	331c      	adds	r3, #28
 8049f14:	edd3 7a00 	vldr	s15, [r3]
 8049f18:	ee26 6a27 	vmul.f32	s12, s12, s15
 8049f1c:	687b      	ldr	r3, [r7, #4]
 8049f1e:	3310      	adds	r3, #16
 8049f20:	edd3 5a00 	vldr	s11, [r3]
 8049f24:	687b      	ldr	r3, [r7, #4]
 8049f26:	3318      	adds	r3, #24
 8049f28:	edd3 7a00 	vldr	s15, [r3]
 8049f2c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8049f30:	ee76 7a67 	vsub.f32	s15, s12, s15
 8049f34:	ee66 7aa7 	vmul.f32	s15, s13, s15
  det = A[0] * (A[4] * A[8] - A[7] * A[5])
 8049f38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8049f3c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (det >= 0 && det <= 0)
 8049f40:	edd7 7a03 	vldr	s15, [r7, #12]
 8049f44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8049f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8049f4c:	db07      	blt.n	8049f5e <matrix_inverse+0xe6>
 8049f4e:	edd7 7a03 	vldr	s15, [r7, #12]
 8049f52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8049f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8049f5a:	f240 811a 	bls.w	804a192 <matrix_inverse+0x31a>
    return;

  invdet = 1.0f / det;
 8049f5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8049f62:	ed97 7a03 	vldr	s14, [r7, #12]
 8049f66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8049f6a:	edc7 7a02 	vstr	s15, [r7, #8]

  AI[0] = (A[4] * A[8] - A[7] * A[5]) * invdet;
 8049f6e:	687b      	ldr	r3, [r7, #4]
 8049f70:	3310      	adds	r3, #16
 8049f72:	ed93 7a00 	vldr	s14, [r3]
 8049f76:	687b      	ldr	r3, [r7, #4]
 8049f78:	3320      	adds	r3, #32
 8049f7a:	edd3 7a00 	vldr	s15, [r3]
 8049f7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8049f82:	687b      	ldr	r3, [r7, #4]
 8049f84:	331c      	adds	r3, #28
 8049f86:	edd3 6a00 	vldr	s13, [r3]
 8049f8a:	687b      	ldr	r3, [r7, #4]
 8049f8c:	3314      	adds	r3, #20
 8049f8e:	edd3 7a00 	vldr	s15, [r3]
 8049f92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8049f96:	ee37 7a67 	vsub.f32	s14, s14, s15
 8049f9a:	edd7 7a02 	vldr	s15, [r7, #8]
 8049f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8049fa2:	683b      	ldr	r3, [r7, #0]
 8049fa4:	edc3 7a00 	vstr	s15, [r3]
  AI[1] = -(A[1] * A[8] - A[2] * A[7]) * invdet;
 8049fa8:	687b      	ldr	r3, [r7, #4]
 8049faa:	3304      	adds	r3, #4
 8049fac:	ed93 7a00 	vldr	s14, [r3]
 8049fb0:	687b      	ldr	r3, [r7, #4]
 8049fb2:	3320      	adds	r3, #32
 8049fb4:	edd3 7a00 	vldr	s15, [r3]
 8049fb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8049fbc:	687b      	ldr	r3, [r7, #4]
 8049fbe:	3308      	adds	r3, #8
 8049fc0:	edd3 6a00 	vldr	s13, [r3]
 8049fc4:	687b      	ldr	r3, [r7, #4]
 8049fc6:	331c      	adds	r3, #28
 8049fc8:	edd3 7a00 	vldr	s15, [r3]
 8049fcc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8049fd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8049fd4:	eeb1 7a67 	vneg.f32	s14, s15
 8049fd8:	683b      	ldr	r3, [r7, #0]
 8049fda:	3304      	adds	r3, #4
 8049fdc:	edd7 7a02 	vldr	s15, [r7, #8]
 8049fe0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8049fe4:	edc3 7a00 	vstr	s15, [r3]
  AI[2] = (A[1] * A[5] - A[2] * A[4]) * invdet;
 8049fe8:	687b      	ldr	r3, [r7, #4]
 8049fea:	3304      	adds	r3, #4
 8049fec:	ed93 7a00 	vldr	s14, [r3]
 8049ff0:	687b      	ldr	r3, [r7, #4]
 8049ff2:	3314      	adds	r3, #20
 8049ff4:	edd3 7a00 	vldr	s15, [r3]
 8049ff8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8049ffc:	687b      	ldr	r3, [r7, #4]
 8049ffe:	3308      	adds	r3, #8
 804a000:	edd3 6a00 	vldr	s13, [r3]
 804a004:	687b      	ldr	r3, [r7, #4]
 804a006:	3310      	adds	r3, #16
 804a008:	edd3 7a00 	vldr	s15, [r3]
 804a00c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 804a010:	ee37 7a67 	vsub.f32	s14, s14, s15
 804a014:	683b      	ldr	r3, [r7, #0]
 804a016:	3308      	adds	r3, #8
 804a018:	edd7 7a02 	vldr	s15, [r7, #8]
 804a01c:	ee67 7a27 	vmul.f32	s15, s14, s15
 804a020:	edc3 7a00 	vstr	s15, [r3]
  AI[3] = -(A[3] * A[8] - A[5] * A[6]) * invdet;
 804a024:	687b      	ldr	r3, [r7, #4]
 804a026:	330c      	adds	r3, #12
 804a028:	ed93 7a00 	vldr	s14, [r3]
 804a02c:	687b      	ldr	r3, [r7, #4]
 804a02e:	3320      	adds	r3, #32
 804a030:	edd3 7a00 	vldr	s15, [r3]
 804a034:	ee27 7a27 	vmul.f32	s14, s14, s15
 804a038:	687b      	ldr	r3, [r7, #4]
 804a03a:	3314      	adds	r3, #20
 804a03c:	edd3 6a00 	vldr	s13, [r3]
 804a040:	687b      	ldr	r3, [r7, #4]
 804a042:	3318      	adds	r3, #24
 804a044:	edd3 7a00 	vldr	s15, [r3]
 804a048:	ee66 7aa7 	vmul.f32	s15, s13, s15
 804a04c:	ee77 7a67 	vsub.f32	s15, s14, s15
 804a050:	eeb1 7a67 	vneg.f32	s14, s15
 804a054:	683b      	ldr	r3, [r7, #0]
 804a056:	330c      	adds	r3, #12
 804a058:	edd7 7a02 	vldr	s15, [r7, #8]
 804a05c:	ee67 7a27 	vmul.f32	s15, s14, s15
 804a060:	edc3 7a00 	vstr	s15, [r3]
  AI[4] = (A[0] * A[8] - A[2] * A[6]) * invdet;
 804a064:	687b      	ldr	r3, [r7, #4]
 804a066:	ed93 7a00 	vldr	s14, [r3]
 804a06a:	687b      	ldr	r3, [r7, #4]
 804a06c:	3320      	adds	r3, #32
 804a06e:	edd3 7a00 	vldr	s15, [r3]
 804a072:	ee27 7a27 	vmul.f32	s14, s14, s15
 804a076:	687b      	ldr	r3, [r7, #4]
 804a078:	3308      	adds	r3, #8
 804a07a:	edd3 6a00 	vldr	s13, [r3]
 804a07e:	687b      	ldr	r3, [r7, #4]
 804a080:	3318      	adds	r3, #24
 804a082:	edd3 7a00 	vldr	s15, [r3]
 804a086:	ee66 7aa7 	vmul.f32	s15, s13, s15
 804a08a:	ee37 7a67 	vsub.f32	s14, s14, s15
 804a08e:	683b      	ldr	r3, [r7, #0]
 804a090:	3310      	adds	r3, #16
 804a092:	edd7 7a02 	vldr	s15, [r7, #8]
 804a096:	ee67 7a27 	vmul.f32	s15, s14, s15
 804a09a:	edc3 7a00 	vstr	s15, [r3]
  AI[5] = -(A[0] * A[5] - A[3] * A[2]) * invdet;
 804a09e:	687b      	ldr	r3, [r7, #4]
 804a0a0:	ed93 7a00 	vldr	s14, [r3]
 804a0a4:	687b      	ldr	r3, [r7, #4]
 804a0a6:	3314      	adds	r3, #20
 804a0a8:	edd3 7a00 	vldr	s15, [r3]
 804a0ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 804a0b0:	687b      	ldr	r3, [r7, #4]
 804a0b2:	330c      	adds	r3, #12
 804a0b4:	edd3 6a00 	vldr	s13, [r3]
 804a0b8:	687b      	ldr	r3, [r7, #4]
 804a0ba:	3308      	adds	r3, #8
 804a0bc:	edd3 7a00 	vldr	s15, [r3]
 804a0c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 804a0c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 804a0c8:	eeb1 7a67 	vneg.f32	s14, s15
 804a0cc:	683b      	ldr	r3, [r7, #0]
 804a0ce:	3314      	adds	r3, #20
 804a0d0:	edd7 7a02 	vldr	s15, [r7, #8]
 804a0d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 804a0d8:	edc3 7a00 	vstr	s15, [r3]
  AI[6] = (A[3] * A[7] - A[6] * A[4]) * invdet;
 804a0dc:	687b      	ldr	r3, [r7, #4]
 804a0de:	330c      	adds	r3, #12
 804a0e0:	ed93 7a00 	vldr	s14, [r3]
 804a0e4:	687b      	ldr	r3, [r7, #4]
 804a0e6:	331c      	adds	r3, #28
 804a0e8:	edd3 7a00 	vldr	s15, [r3]
 804a0ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 804a0f0:	687b      	ldr	r3, [r7, #4]
 804a0f2:	3318      	adds	r3, #24
 804a0f4:	edd3 6a00 	vldr	s13, [r3]
 804a0f8:	687b      	ldr	r3, [r7, #4]
 804a0fa:	3310      	adds	r3, #16
 804a0fc:	edd3 7a00 	vldr	s15, [r3]
 804a100:	ee66 7aa7 	vmul.f32	s15, s13, s15
 804a104:	ee37 7a67 	vsub.f32	s14, s14, s15
 804a108:	683b      	ldr	r3, [r7, #0]
 804a10a:	3318      	adds	r3, #24
 804a10c:	edd7 7a02 	vldr	s15, [r7, #8]
 804a110:	ee67 7a27 	vmul.f32	s15, s14, s15
 804a114:	edc3 7a00 	vstr	s15, [r3]
  AI[7] = -(A[0] * A[7] - A[6] * A[1]) * invdet;
 804a118:	687b      	ldr	r3, [r7, #4]
 804a11a:	ed93 7a00 	vldr	s14, [r3]
 804a11e:	687b      	ldr	r3, [r7, #4]
 804a120:	331c      	adds	r3, #28
 804a122:	edd3 7a00 	vldr	s15, [r3]
 804a126:	ee27 7a27 	vmul.f32	s14, s14, s15
 804a12a:	687b      	ldr	r3, [r7, #4]
 804a12c:	3318      	adds	r3, #24
 804a12e:	edd3 6a00 	vldr	s13, [r3]
 804a132:	687b      	ldr	r3, [r7, #4]
 804a134:	3304      	adds	r3, #4
 804a136:	edd3 7a00 	vldr	s15, [r3]
 804a13a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 804a13e:	ee77 7a67 	vsub.f32	s15, s14, s15
 804a142:	eeb1 7a67 	vneg.f32	s14, s15
 804a146:	683b      	ldr	r3, [r7, #0]
 804a148:	331c      	adds	r3, #28
 804a14a:	edd7 7a02 	vldr	s15, [r7, #8]
 804a14e:	ee67 7a27 	vmul.f32	s15, s14, s15
 804a152:	edc3 7a00 	vstr	s15, [r3]
  AI[8] = (A[0] * A[4] - A[3] * A[1]) * invdet;
 804a156:	687b      	ldr	r3, [r7, #4]
 804a158:	ed93 7a00 	vldr	s14, [r3]
 804a15c:	687b      	ldr	r3, [r7, #4]
 804a15e:	3310      	adds	r3, #16
 804a160:	edd3 7a00 	vldr	s15, [r3]
 804a164:	ee27 7a27 	vmul.f32	s14, s14, s15
 804a168:	687b      	ldr	r3, [r7, #4]
 804a16a:	330c      	adds	r3, #12
 804a16c:	edd3 6a00 	vldr	s13, [r3]
 804a170:	687b      	ldr	r3, [r7, #4]
 804a172:	3304      	adds	r3, #4
 804a174:	edd3 7a00 	vldr	s15, [r3]
 804a178:	ee66 7aa7 	vmul.f32	s15, s13, s15
 804a17c:	ee37 7a67 	vsub.f32	s14, s14, s15
 804a180:	683b      	ldr	r3, [r7, #0]
 804a182:	3320      	adds	r3, #32
 804a184:	edd7 7a02 	vldr	s15, [r7, #8]
 804a188:	ee67 7a27 	vmul.f32	s15, s14, s15
 804a18c:	edc3 7a00 	vstr	s15, [r3]
 804a190:	e000      	b.n	804a194 <matrix_inverse+0x31c>
    return;
 804a192:	bf00      	nop
}
 804a194:	3714      	adds	r7, #20
 804a196:	46bd      	mov	sp, r7
 804a198:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a19c:	4770      	bx	lr

0804a19e <matrix_length>:

// calculate total force of matirx elements
static float matrix_length(float *matrix, int size)
{
 804a19e:	b580      	push	{r7, lr}
 804a1a0:	b086      	sub	sp, #24
 804a1a2:	af00      	add	r7, sp, #0
 804a1a4:	6078      	str	r0, [r7, #4]
 804a1a6:	6039      	str	r1, [r7, #0]
  float sum = 0, norm = 0, temp = 0;
 804a1a8:	f04f 0300 	mov.w	r3, #0
 804a1ac:	617b      	str	r3, [r7, #20]
 804a1ae:	f04f 0300 	mov.w	r3, #0
 804a1b2:	60fb      	str	r3, [r7, #12]
 804a1b4:	f04f 0300 	mov.w	r3, #0
 804a1b8:	60bb      	str	r3, [r7, #8]
  int i = 0;
 804a1ba:	2300      	movs	r3, #0
 804a1bc:	613b      	str	r3, [r7, #16]

  for (i = 0; i < size; i++) {
 804a1be:	2300      	movs	r3, #0
 804a1c0:	613b      	str	r3, [r7, #16]
 804a1c2:	e01a      	b.n	804a1fa <matrix_length+0x5c>
    temp = matrix[i] * matrix[i];
 804a1c4:	693b      	ldr	r3, [r7, #16]
 804a1c6:	009b      	lsls	r3, r3, #2
 804a1c8:	687a      	ldr	r2, [r7, #4]
 804a1ca:	4413      	add	r3, r2
 804a1cc:	ed93 7a00 	vldr	s14, [r3]
 804a1d0:	693b      	ldr	r3, [r7, #16]
 804a1d2:	009b      	lsls	r3, r3, #2
 804a1d4:	687a      	ldr	r2, [r7, #4]
 804a1d6:	4413      	add	r3, r2
 804a1d8:	edd3 7a00 	vldr	s15, [r3]
 804a1dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 804a1e0:	edc7 7a02 	vstr	s15, [r7, #8]
    sum += temp;
 804a1e4:	ed97 7a05 	vldr	s14, [r7, #20]
 804a1e8:	edd7 7a02 	vldr	s15, [r7, #8]
 804a1ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 804a1f0:	edc7 7a05 	vstr	s15, [r7, #20]
  for (i = 0; i < size; i++) {
 804a1f4:	693b      	ldr	r3, [r7, #16]
 804a1f6:	3301      	adds	r3, #1
 804a1f8:	613b      	str	r3, [r7, #16]
 804a1fa:	693a      	ldr	r2, [r7, #16]
 804a1fc:	683b      	ldr	r3, [r7, #0]
 804a1fe:	429a      	cmp	r2, r3
 804a200:	dbe0      	blt.n	804a1c4 <matrix_length+0x26>
  }
  norm = sqrtf(sum);
 804a202:	ed97 0a05 	vldr	s0, [r7, #20]
 804a206:	f018 fdf5 	bl	8062df4 <sqrtf>
 804a20a:	ed87 0a03 	vstr	s0, [r7, #12]

  return norm;
 804a20e:	68fb      	ldr	r3, [r7, #12]
 804a210:	ee07 3a90 	vmov	s15, r3
}
 804a214:	eeb0 0a67 	vmov.f32	s0, s15
 804a218:	3718      	adds	r7, #24
 804a21a:	46bd      	mov	sp, r7
 804a21c:	bd80      	pop	{r7, pc}
	...

0804a220 <matrix_normalize>:

static void matrix_normalize(float *matrix, int size)
{
 804a220:	b580      	push	{r7, lr}
 804a222:	b086      	sub	sp, #24
 804a224:	af00      	add	r7, sp, #0
 804a226:	6078      	str	r0, [r7, #4]
 804a228:	6039      	str	r1, [r7, #0]
  float sum = 0, norm = 0, temp = 0;
 804a22a:	f04f 0300 	mov.w	r3, #0
 804a22e:	617b      	str	r3, [r7, #20]
 804a230:	f04f 0300 	mov.w	r3, #0
 804a234:	613b      	str	r3, [r7, #16]
 804a236:	f04f 0300 	mov.w	r3, #0
 804a23a:	60bb      	str	r3, [r7, #8]
  int i = 0;
 804a23c:	2300      	movs	r3, #0
 804a23e:	60fb      	str	r3, [r7, #12]

  for (i = 0; i < size; i++) {
 804a240:	2300      	movs	r3, #0
 804a242:	60fb      	str	r3, [r7, #12]
 804a244:	e01a      	b.n	804a27c <matrix_normalize+0x5c>
    temp = matrix[i] * matrix[i];
 804a246:	68fb      	ldr	r3, [r7, #12]
 804a248:	009b      	lsls	r3, r3, #2
 804a24a:	687a      	ldr	r2, [r7, #4]
 804a24c:	4413      	add	r3, r2
 804a24e:	ed93 7a00 	vldr	s14, [r3]
 804a252:	68fb      	ldr	r3, [r7, #12]
 804a254:	009b      	lsls	r3, r3, #2
 804a256:	687a      	ldr	r2, [r7, #4]
 804a258:	4413      	add	r3, r2
 804a25a:	edd3 7a00 	vldr	s15, [r3]
 804a25e:	ee67 7a27 	vmul.f32	s15, s14, s15
 804a262:	edc7 7a02 	vstr	s15, [r7, #8]
    sum += temp;
 804a266:	ed97 7a05 	vldr	s14, [r7, #20]
 804a26a:	edd7 7a02 	vldr	s15, [r7, #8]
 804a26e:	ee77 7a27 	vadd.f32	s15, s14, s15
 804a272:	edc7 7a05 	vstr	s15, [r7, #20]
  for (i = 0; i < size; i++) {
 804a276:	68fb      	ldr	r3, [r7, #12]
 804a278:	3301      	adds	r3, #1
 804a27a:	60fb      	str	r3, [r7, #12]
 804a27c:	68fa      	ldr	r2, [r7, #12]
 804a27e:	683b      	ldr	r3, [r7, #0]
 804a280:	429a      	cmp	r2, r3
 804a282:	dbe0      	blt.n	804a246 <matrix_normalize+0x26>
  }

  norm = sqrtf(sum);
 804a284:	ed97 0a05 	vldr	s0, [r7, #20]
 804a288:	f018 fdb4 	bl	8062df4 <sqrtf>
 804a28c:	ed87 0a04 	vstr	s0, [r7, #16]
  if (norm >= 0 && norm <= 0)   // prevent divide by 0
 804a290:	edd7 7a04 	vldr	s15, [r7, #16]
 804a294:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 804a298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 804a29c:	db08      	blt.n	804a2b0 <matrix_normalize+0x90>
 804a29e:	edd7 7a04 	vldr	s15, [r7, #16]
 804a2a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 804a2a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 804a2aa:	d801      	bhi.n	804a2b0 <matrix_normalize+0x90>
    norm = 0.0000000001f;
 804a2ac:	4b10      	ldr	r3, [pc, #64]	; (804a2f0 <matrix_normalize+0xd0>)
 804a2ae:	613b      	str	r3, [r7, #16]
  for (i = 0; i < size; i++)
 804a2b0:	2300      	movs	r3, #0
 804a2b2:	60fb      	str	r3, [r7, #12]
 804a2b4:	e012      	b.n	804a2dc <matrix_normalize+0xbc>
    matrix[i] /= norm;
 804a2b6:	68fb      	ldr	r3, [r7, #12]
 804a2b8:	009b      	lsls	r3, r3, #2
 804a2ba:	687a      	ldr	r2, [r7, #4]
 804a2bc:	4413      	add	r3, r2
 804a2be:	edd3 6a00 	vldr	s13, [r3]
 804a2c2:	68fb      	ldr	r3, [r7, #12]
 804a2c4:	009b      	lsls	r3, r3, #2
 804a2c6:	687a      	ldr	r2, [r7, #4]
 804a2c8:	4413      	add	r3, r2
 804a2ca:	ed97 7a04 	vldr	s14, [r7, #16]
 804a2ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 804a2d2:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < size; i++)
 804a2d6:	68fb      	ldr	r3, [r7, #12]
 804a2d8:	3301      	adds	r3, #1
 804a2da:	60fb      	str	r3, [r7, #12]
 804a2dc:	68fa      	ldr	r2, [r7, #12]
 804a2de:	683b      	ldr	r3, [r7, #0]
 804a2e0:	429a      	cmp	r2, r3
 804a2e2:	dbe8      	blt.n	804a2b6 <matrix_normalize+0x96>
}
 804a2e4:	bf00      	nop
 804a2e6:	bf00      	nop
 804a2e8:	3718      	adds	r7, #24
 804a2ea:	46bd      	mov	sp, r7
 804a2ec:	bd80      	pop	{r7, pc}
 804a2ee:	bf00      	nop
 804a2f0:	2edbe6ff 	.word	0x2edbe6ff

0804a2f4 <remap_coordinates>:

static void remap_coordinates(float *mapped, float *ori, float *coord)
{
 804a2f4:	b480      	push	{r7}
 804a2f6:	b089      	sub	sp, #36	; 0x24
 804a2f8:	af00      	add	r7, sp, #0
 804a2fa:	60f8      	str	r0, [r7, #12]
 804a2fc:	60b9      	str	r1, [r7, #8]
 804a2fe:	607a      	str	r2, [r7, #4]
  float sum = 0, temp = 0;
 804a300:	f04f 0300 	mov.w	r3, #0
 804a304:	61fb      	str	r3, [r7, #28]
 804a306:	f04f 0300 	mov.w	r3, #0
 804a30a:	613b      	str	r3, [r7, #16]
  int i = 0, j = 0;
 804a30c:	2300      	movs	r3, #0
 804a30e:	61bb      	str	r3, [r7, #24]
 804a310:	2300      	movs	r3, #0
 804a312:	617b      	str	r3, [r7, #20]

  for (i = 0; i < 3; i++) {
 804a314:	2300      	movs	r3, #0
 804a316:	61bb      	str	r3, [r7, #24]
 804a318:	e031      	b.n	804a37e <remap_coordinates+0x8a>
    sum = 0;
 804a31a:	f04f 0300 	mov.w	r3, #0
 804a31e:	61fb      	str	r3, [r7, #28]
    for (j = 0; j < 3; j++) {
 804a320:	2300      	movs	r3, #0
 804a322:	617b      	str	r3, [r7, #20]
 804a324:	e01f      	b.n	804a366 <remap_coordinates+0x72>
      temp = ori[j] * coord[i * 3 + j];
 804a326:	697b      	ldr	r3, [r7, #20]
 804a328:	009b      	lsls	r3, r3, #2
 804a32a:	68ba      	ldr	r2, [r7, #8]
 804a32c:	4413      	add	r3, r2
 804a32e:	ed93 7a00 	vldr	s14, [r3]
 804a332:	69ba      	ldr	r2, [r7, #24]
 804a334:	4613      	mov	r3, r2
 804a336:	005b      	lsls	r3, r3, #1
 804a338:	441a      	add	r2, r3
 804a33a:	697b      	ldr	r3, [r7, #20]
 804a33c:	4413      	add	r3, r2
 804a33e:	009b      	lsls	r3, r3, #2
 804a340:	687a      	ldr	r2, [r7, #4]
 804a342:	4413      	add	r3, r2
 804a344:	edd3 7a00 	vldr	s15, [r3]
 804a348:	ee67 7a27 	vmul.f32	s15, s14, s15
 804a34c:	edc7 7a04 	vstr	s15, [r7, #16]
      sum += temp;
 804a350:	ed97 7a07 	vldr	s14, [r7, #28]
 804a354:	edd7 7a04 	vldr	s15, [r7, #16]
 804a358:	ee77 7a27 	vadd.f32	s15, s14, s15
 804a35c:	edc7 7a07 	vstr	s15, [r7, #28]
    for (j = 0; j < 3; j++) {
 804a360:	697b      	ldr	r3, [r7, #20]
 804a362:	3301      	adds	r3, #1
 804a364:	617b      	str	r3, [r7, #20]
 804a366:	697b      	ldr	r3, [r7, #20]
 804a368:	2b02      	cmp	r3, #2
 804a36a:	dddc      	ble.n	804a326 <remap_coordinates+0x32>
    }
    mapped[i] = sum;
 804a36c:	69bb      	ldr	r3, [r7, #24]
 804a36e:	009b      	lsls	r3, r3, #2
 804a370:	68fa      	ldr	r2, [r7, #12]
 804a372:	4413      	add	r3, r2
 804a374:	69fa      	ldr	r2, [r7, #28]
 804a376:	601a      	str	r2, [r3, #0]
  for (i = 0; i < 3; i++) {
 804a378:	69bb      	ldr	r3, [r7, #24]
 804a37a:	3301      	adds	r3, #1
 804a37c:	61bb      	str	r3, [r7, #24]
 804a37e:	69bb      	ldr	r3, [r7, #24]
 804a380:	2b02      	cmp	r3, #2
 804a382:	ddca      	ble.n	804a31a <remap_coordinates+0x26>
  }
}
 804a384:	bf00      	nop
 804a386:	bf00      	nop
 804a388:	3724      	adds	r7, #36	; 0x24
 804a38a:	46bd      	mov	sp, r7
 804a38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a390:	4770      	bx	lr
 804a392:	0000      	movs	r0, r0
 804a394:	0000      	movs	r0, r0
	...

0804a398 <imu_Acc_LowPassFilter>:

static void imu_Acc_LowPassFilter(float *raw, float *filtered)
{
 804a398:	b5b0      	push	{r4, r5, r7, lr}
 804a39a:	b090      	sub	sp, #64	; 0x40
 804a39c:	af00      	add	r7, sp, #0
 804a39e:	6078      	str	r0, [r7, #4]
 804a3a0:	6039      	str	r1, [r7, #0]
  //25Hz sample rate with 0.1Hz/0.5Hz cutoff freq.
  //Denominator
  //const double a0 = 1;
  const double a1 = -0.88135386020153494;
 804a3a2:	a34d      	add	r3, pc, #308	; (adr r3, 804a4d8 <imu_Acc_LowPassFilter+0x140>)
 804a3a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 804a3a8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  //Numerator
  const double b0 = 0.059323069899232528;
 804a3ac:	a34c      	add	r3, pc, #304	; (adr r3, 804a4e0 <imu_Acc_LowPassFilter+0x148>)
 804a3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 804a3b2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  const double b1 = 0.059323069899232528;
 804a3b6:	a34a      	add	r3, pc, #296	; (adr r3, 804a4e0 <imu_Acc_LowPassFilter+0x148>)
 804a3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 804a3bc:	e9c7 2308 	strd	r2, r3, [r7, #32]

  static double x_1[3] = { 0 };
  static double y_1[3] = { 0 };

  double filter_double[3] = { 0 };
 804a3c0:	f107 0308 	add.w	r3, r7, #8
 804a3c4:	2200      	movs	r2, #0
 804a3c6:	601a      	str	r2, [r3, #0]
 804a3c8:	605a      	str	r2, [r3, #4]
 804a3ca:	609a      	str	r2, [r3, #8]
 804a3cc:	60da      	str	r2, [r3, #12]
 804a3ce:	611a      	str	r2, [r3, #16]
 804a3d0:	615a      	str	r2, [r3, #20]

  for (int i = 0; i < 3; i++) {
 804a3d2:	2300      	movs	r3, #0
 804a3d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 804a3d6:	e070      	b.n	804a4ba <imu_Acc_LowPassFilter+0x122>
    filter_double[i] = b0 * (double)raw[i] + b1 * x_1[i] - a1 * y_1[i];
 804a3d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 804a3da:	009b      	lsls	r3, r3, #2
 804a3dc:	687a      	ldr	r2, [r7, #4]
 804a3de:	4413      	add	r3, r2
 804a3e0:	681b      	ldr	r3, [r3, #0]
 804a3e2:	4618      	mov	r0, r3
 804a3e4:	f7f6 f8b0 	bl	8040548 <__aeabi_f2d>
 804a3e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 804a3ec:	f7f6 f904 	bl	80405f8 <__aeabi_dmul>
 804a3f0:	4602      	mov	r2, r0
 804a3f2:	460b      	mov	r3, r1
 804a3f4:	4614      	mov	r4, r2
 804a3f6:	461d      	mov	r5, r3
 804a3f8:	4a35      	ldr	r2, [pc, #212]	; (804a4d0 <imu_Acc_LowPassFilter+0x138>)
 804a3fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 804a3fc:	00db      	lsls	r3, r3, #3
 804a3fe:	4413      	add	r3, r2
 804a400:	e9d3 0100 	ldrd	r0, r1, [r3]
 804a404:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 804a408:	f7f6 f8f6 	bl	80405f8 <__aeabi_dmul>
 804a40c:	4602      	mov	r2, r0
 804a40e:	460b      	mov	r3, r1
 804a410:	4620      	mov	r0, r4
 804a412:	4629      	mov	r1, r5
 804a414:	f7f5 ff3a 	bl	804028c <__adddf3>
 804a418:	4602      	mov	r2, r0
 804a41a:	460b      	mov	r3, r1
 804a41c:	4614      	mov	r4, r2
 804a41e:	461d      	mov	r5, r3
 804a420:	4a2c      	ldr	r2, [pc, #176]	; (804a4d4 <imu_Acc_LowPassFilter+0x13c>)
 804a422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 804a424:	00db      	lsls	r3, r3, #3
 804a426:	4413      	add	r3, r2
 804a428:	e9d3 0100 	ldrd	r0, r1, [r3]
 804a42c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 804a430:	f7f6 f8e2 	bl	80405f8 <__aeabi_dmul>
 804a434:	4602      	mov	r2, r0
 804a436:	460b      	mov	r3, r1
 804a438:	4620      	mov	r0, r4
 804a43a:	4629      	mov	r1, r5
 804a43c:	f7f5 ff24 	bl	8040288 <__aeabi_dsub>
 804a440:	4602      	mov	r2, r0
 804a442:	460b      	mov	r3, r1
 804a444:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 804a446:	00c9      	lsls	r1, r1, #3
 804a448:	f107 0040 	add.w	r0, r7, #64	; 0x40
 804a44c:	4401      	add	r1, r0
 804a44e:	3938      	subs	r1, #56	; 0x38
 804a450:	e9c1 2300 	strd	r2, r3, [r1]

    x_1[i] = (double)raw[i];
 804a454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 804a456:	009b      	lsls	r3, r3, #2
 804a458:	687a      	ldr	r2, [r7, #4]
 804a45a:	4413      	add	r3, r2
 804a45c:	681b      	ldr	r3, [r3, #0]
 804a45e:	4618      	mov	r0, r3
 804a460:	f7f6 f872 	bl	8040548 <__aeabi_f2d>
 804a464:	4602      	mov	r2, r0
 804a466:	460b      	mov	r3, r1
 804a468:	4819      	ldr	r0, [pc, #100]	; (804a4d0 <imu_Acc_LowPassFilter+0x138>)
 804a46a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 804a46c:	00c9      	lsls	r1, r1, #3
 804a46e:	4401      	add	r1, r0
 804a470:	e9c1 2300 	strd	r2, r3, [r1]
    y_1[i] = filter_double[i];
 804a474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 804a476:	00db      	lsls	r3, r3, #3
 804a478:	f107 0240 	add.w	r2, r7, #64	; 0x40
 804a47c:	4413      	add	r3, r2
 804a47e:	3b38      	subs	r3, #56	; 0x38
 804a480:	e9d3 2300 	ldrd	r2, r3, [r3]
 804a484:	4813      	ldr	r0, [pc, #76]	; (804a4d4 <imu_Acc_LowPassFilter+0x13c>)
 804a486:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 804a488:	00c9      	lsls	r1, r1, #3
 804a48a:	4401      	add	r1, r0
 804a48c:	e9c1 2300 	strd	r2, r3, [r1]

    filtered[i] = (float)filter_double[i];
 804a490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 804a492:	00db      	lsls	r3, r3, #3
 804a494:	f107 0240 	add.w	r2, r7, #64	; 0x40
 804a498:	4413      	add	r3, r2
 804a49a:	3b38      	subs	r3, #56	; 0x38
 804a49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 804a4a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 804a4a2:	0089      	lsls	r1, r1, #2
 804a4a4:	6838      	ldr	r0, [r7, #0]
 804a4a6:	1844      	adds	r4, r0, r1
 804a4a8:	4610      	mov	r0, r2
 804a4aa:	4619      	mov	r1, r3
 804a4ac:	f7f6 fb9c 	bl	8040be8 <__aeabi_d2f>
 804a4b0:	4603      	mov	r3, r0
 804a4b2:	6023      	str	r3, [r4, #0]
  for (int i = 0; i < 3; i++) {
 804a4b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 804a4b6:	3301      	adds	r3, #1
 804a4b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 804a4ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 804a4bc:	2b02      	cmp	r3, #2
 804a4be:	dd8b      	ble.n	804a3d8 <imu_Acc_LowPassFilter+0x40>
  }
}
 804a4c0:	bf00      	nop
 804a4c2:	bf00      	nop
 804a4c4:	3740      	adds	r7, #64	; 0x40
 804a4c6:	46bd      	mov	sp, r7
 804a4c8:	bdb0      	pop	{r4, r5, r7, pc}
 804a4ca:	bf00      	nop
 804a4cc:	f3af 8000 	nop.w
 804a4d0:	200081a0 	.word	0x200081a0
 804a4d4:	200081b8 	.word	0x200081b8
 804a4d8:	02b89b3a 	.word	0x02b89b3a
 804a4dc:	bfec340d 	.word	0xbfec340d
 804a4e0:	ea3b2630 	.word	0xea3b2630
 804a4e4:	3fae5f97 	.word	0x3fae5f97

0804a4e8 <preprocess>:
    filtered[i] = (float)filter_double[i];
  }
}

static int preprocess(float *input_data, int data_type)
{
 804a4e8:	b5b0      	push	{r4, r5, r7, lr}
 804a4ea:	b096      	sub	sp, #88	; 0x58
 804a4ec:	af00      	add	r7, sp, #0
 804a4ee:	6078      	str	r0, [r7, #4]
 804a4f0:	6039      	str	r1, [r7, #0]
  int i = 0;
 804a4f2:	2300      	movs	r3, #0
 804a4f4:	657b      	str	r3, [r7, #84]	; 0x54
  static float gyro_strength = -1;
  float ANDROID_AXES[] = { 1, 0, 0,     // Android axis: roll:90~-90, pitch:180~-180
 804a4f6:	4b85      	ldr	r3, [pc, #532]	; (804a70c <preprocess+0x224>)
 804a4f8:	f107 0424 	add.w	r4, r7, #36	; 0x24
 804a4fc:	461d      	mov	r5, r3
 804a4fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 804a500:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 804a502:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 804a504:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 804a506:	682b      	ldr	r3, [r5, #0]
 804a508:	6023      	str	r3, [r4, #0]
    0, -1, 0, 0, 0, -1
  };
  if (data_type == SENSOR_TYPE_ACCELEROMETER
 804a50a:	683b      	ldr	r3, [r7, #0]
 804a50c:	2b00      	cmp	r3, #0
 804a50e:	d002      	beq.n	804a516 <preprocess+0x2e>
      || data_type == SENSOR_TYPE_MAGNETIC_FIELD) {
 804a510:	683b      	ldr	r3, [r7, #0]
 804a512:	2b01      	cmp	r3, #1
 804a514:	d139      	bne.n	804a58a <preprocess+0xa2>
    if (input_data[0] >= 0 && input_data[0] <= 0 && input_data[1] >= 0
 804a516:	687b      	ldr	r3, [r7, #4]
 804a518:	edd3 7a00 	vldr	s15, [r3]
 804a51c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 804a520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 804a524:	db31      	blt.n	804a58a <preprocess+0xa2>
 804a526:	687b      	ldr	r3, [r7, #4]
 804a528:	edd3 7a00 	vldr	s15, [r3]
 804a52c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 804a530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 804a534:	d829      	bhi.n	804a58a <preprocess+0xa2>
 804a536:	687b      	ldr	r3, [r7, #4]
 804a538:	3304      	adds	r3, #4
 804a53a:	edd3 7a00 	vldr	s15, [r3]
 804a53e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 804a542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 804a546:	db20      	blt.n	804a58a <preprocess+0xa2>
        && input_data[1] <= 0 && input_data[2] >= 0 && input_data[2] <= 0) {
 804a548:	687b      	ldr	r3, [r7, #4]
 804a54a:	3304      	adds	r3, #4
 804a54c:	edd3 7a00 	vldr	s15, [r3]
 804a550:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 804a554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 804a558:	d817      	bhi.n	804a58a <preprocess+0xa2>
 804a55a:	687b      	ldr	r3, [r7, #4]
 804a55c:	3308      	adds	r3, #8
 804a55e:	edd3 7a00 	vldr	s15, [r3]
 804a562:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 804a566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 804a56a:	db0e      	blt.n	804a58a <preprocess+0xa2>
 804a56c:	687b      	ldr	r3, [r7, #4]
 804a56e:	3308      	adds	r3, #8
 804a570:	edd3 7a00 	vldr	s15, [r3]
 804a574:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 804a578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 804a57c:	d805      	bhi.n	804a58a <preprocess+0xa2>
      printf("input_data are all zeros, return!\r\n");
 804a57e:	4864      	ldr	r0, [pc, #400]	; (804a710 <preprocess+0x228>)
 804a580:	f016 fa94 	bl	8060aac <puts>
      return -1;
 804a584:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 804a588:	e0bc      	b.n	804a704 <preprocess+0x21c>
    }
  }
  // transform to Android axis
  if (data_type == SENSOR_TYPE_ACCELEROMETER) {
 804a58a:	683b      	ldr	r3, [r7, #0]
 804a58c:	2b00      	cmp	r3, #0
 804a58e:	f040 8097 	bne.w	804a6c0 <preprocess+0x1d8>
    remap_coordinates(posture_loc.acc, input_data, ANDROID_AXES);
 804a592:	f107 0324 	add.w	r3, r7, #36	; 0x24
 804a596:	461a      	mov	r2, r3
 804a598:	6879      	ldr	r1, [r7, #4]
 804a59a:	485e      	ldr	r0, [pc, #376]	; (804a714 <preprocess+0x22c>)
 804a59c:	f7ff feaa 	bl	804a2f4 <remap_coordinates>
    for (i = 0; i < 3; i++)
 804a5a0:	2300      	movs	r3, #0
 804a5a2:	657b      	str	r3, [r7, #84]	; 0x54
 804a5a4:	e016      	b.n	804a5d4 <preprocess+0xec>
      posture_loc.acc[i] /= -9.80665f;
 804a5a6:	4a5c      	ldr	r2, [pc, #368]	; (804a718 <preprocess+0x230>)
 804a5a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 804a5aa:	332a      	adds	r3, #42	; 0x2a
 804a5ac:	009b      	lsls	r3, r3, #2
 804a5ae:	4413      	add	r3, r2
 804a5b0:	3304      	adds	r3, #4
 804a5b2:	ed93 7a00 	vldr	s14, [r3]
 804a5b6:	eddf 6a59 	vldr	s13, [pc, #356]	; 804a71c <preprocess+0x234>
 804a5ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 804a5be:	4a56      	ldr	r2, [pc, #344]	; (804a718 <preprocess+0x230>)
 804a5c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 804a5c2:	332a      	adds	r3, #42	; 0x2a
 804a5c4:	009b      	lsls	r3, r3, #2
 804a5c6:	4413      	add	r3, r2
 804a5c8:	3304      	adds	r3, #4
 804a5ca:	edc3 7a00 	vstr	s15, [r3]
    for (i = 0; i < 3; i++)
 804a5ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 804a5d0:	3301      	adds	r3, #1
 804a5d2:	657b      	str	r3, [r7, #84]	; 0x54
 804a5d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 804a5d6:	2b02      	cmp	r3, #2
 804a5d8:	dde5      	ble.n	804a5a6 <preprocess+0xbe>
    float acc_strength = matrix_length(posture_loc.acc, 3);
 804a5da:	2103      	movs	r1, #3
 804a5dc:	484d      	ldr	r0, [pc, #308]	; (804a714 <preprocess+0x22c>)
 804a5de:	f7ff fdde 	bl	804a19e <matrix_length>
 804a5e2:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
    posture_loc.acc_correct = 0;
 804a5e6:	4b4c      	ldr	r3, [pc, #304]	; (804a718 <preprocess+0x230>)
 804a5e8:	2200      	movs	r2, #0
 804a5ea:	605a      	str	r2, [r3, #4]
    float acc_g_lpf_out[3] = { 0 };
 804a5ec:	f107 0318 	add.w	r3, r7, #24
 804a5f0:	2200      	movs	r2, #0
 804a5f2:	601a      	str	r2, [r3, #0]
 804a5f4:	605a      	str	r2, [r3, #4]
 804a5f6:	609a      	str	r2, [r3, #8]
    imu_Acc_LowPassFilter(posture_loc.acc, acc_g_lpf_out);
 804a5f8:	f107 0318 	add.w	r3, r7, #24
 804a5fc:	4619      	mov	r1, r3
 804a5fe:	4845      	ldr	r0, [pc, #276]	; (804a714 <preprocess+0x22c>)
 804a600:	f7ff feca 	bl	804a398 <imu_Acc_LowPassFilter>
    //swl
    //if (gyro_strength > 0 && gyro_strength < 1.75f) { don't use gyro to restrict acc processing
    if (acc_strength < 1.15f && acc_strength > 0.85f) {
 804a604:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 804a608:	ed9f 7a45 	vldr	s14, [pc, #276]	; 804a720 <preprocess+0x238>
 804a60c:	eef4 7ac7 	vcmpe.f32	s15, s14
 804a610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 804a614:	d575      	bpl.n	804a702 <preprocess+0x21a>
 804a616:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 804a61a:	ed9f 7a42 	vldr	s14, [pc, #264]	; 804a724 <preprocess+0x23c>
 804a61e:	eef4 7ac7 	vcmpe.f32	s15, s14
 804a622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 804a626:	dd6c      	ble.n	804a702 <preprocess+0x21a>

      float acc_uncert_bias = fabs(acc_strength - 1.0f);
 804a628:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 804a62c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 804a630:	ee77 7ac7 	vsub.f32	s15, s15, s14
 804a634:	eef0 7ae7 	vabs.f32	s15, s15
 804a638:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      float total_uncertain[3] = { 0 };
 804a63c:	f107 030c 	add.w	r3, r7, #12
 804a640:	2200      	movs	r2, #0
 804a642:	601a      	str	r2, [r3, #0]
 804a644:	605a      	str	r2, [r3, #4]
 804a646:	609a      	str	r2, [r3, #8]

      for (int i = 0; i < 3; i++) {
 804a648:	2300      	movs	r3, #0
 804a64a:	653b      	str	r3, [r7, #80]	; 0x50
 804a64c:	e031      	b.n	804a6b2 <preprocess+0x1ca>
//        total_uncertain[i] = fabs(posture_loc.acc[i] - acc_g_lpf_out[i])        //swl,use out?
//            + acc_uncert_bias;
//        total_uncertain[i] = fabs(posture_loc.acc[i] - acc_g_lpf_out[i]);


        if (total_uncertain[i] < 0.001f)        //min = 0.01 m/s2
 804a64e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 804a650:	009b      	lsls	r3, r3, #2
 804a652:	f107 0258 	add.w	r2, r7, #88	; 0x58
 804a656:	4413      	add	r3, r2
 804a658:	3b4c      	subs	r3, #76	; 0x4c
 804a65a:	edd3 7a00 	vldr	s15, [r3]
 804a65e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 804a728 <preprocess+0x240>
 804a662:	eef4 7ac7 	vcmpe.f32	s15, s14
 804a666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 804a66a:	d507      	bpl.n	804a67c <preprocess+0x194>
          total_uncertain[i] = 0.001f;
 804a66c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 804a66e:	009b      	lsls	r3, r3, #2
 804a670:	f107 0258 	add.w	r2, r7, #88	; 0x58
 804a674:	4413      	add	r3, r2
 804a676:	3b4c      	subs	r3, #76	; 0x4c
 804a678:	4a2c      	ldr	r2, [pc, #176]	; (804a72c <preprocess+0x244>)
 804a67a:	601a      	str	r2, [r3, #0]

        acc_correct_var[i] = total_uncertain[i] * total_uncertain[i];   //swl
 804a67c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 804a67e:	009b      	lsls	r3, r3, #2
 804a680:	f107 0258 	add.w	r2, r7, #88	; 0x58
 804a684:	4413      	add	r3, r2
 804a686:	3b4c      	subs	r3, #76	; 0x4c
 804a688:	ed93 7a00 	vldr	s14, [r3]
 804a68c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 804a68e:	009b      	lsls	r3, r3, #2
 804a690:	f107 0258 	add.w	r2, r7, #88	; 0x58
 804a694:	4413      	add	r3, r2
 804a696:	3b4c      	subs	r3, #76	; 0x4c
 804a698:	edd3 7a00 	vldr	s15, [r3]
 804a69c:	ee67 7a27 	vmul.f32	s15, s14, s15
 804a6a0:	4a23      	ldr	r2, [pc, #140]	; (804a730 <preprocess+0x248>)
 804a6a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 804a6a4:	009b      	lsls	r3, r3, #2
 804a6a6:	4413      	add	r3, r2
 804a6a8:	edc3 7a00 	vstr	s15, [r3]
      for (int i = 0; i < 3; i++) {
 804a6ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 804a6ae:	3301      	adds	r3, #1
 804a6b0:	653b      	str	r3, [r7, #80]	; 0x50
 804a6b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 804a6b4:	2b02      	cmp	r3, #2
 804a6b6:	ddca      	ble.n	804a64e <preprocess+0x166>
      }
      posture_loc.acc_correct = 1;
 804a6b8:	4b17      	ldr	r3, [pc, #92]	; (804a718 <preprocess+0x230>)
 804a6ba:	2201      	movs	r2, #1
 804a6bc:	605a      	str	r2, [r3, #4]
 804a6be:	e020      	b.n	804a702 <preprocess+0x21a>
    }
    //}
  } else if (data_type == SENSOR_TYPE_GYROSCOPE) {
 804a6c0:	683b      	ldr	r3, [r7, #0]
 804a6c2:	2b02      	cmp	r3, #2
 804a6c4:	d110      	bne.n	804a6e8 <preprocess+0x200>
    remap_coordinates(posture_loc.gyro, input_data, ANDROID_AXES);
 804a6c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 804a6ca:	461a      	mov	r2, r3
 804a6cc:	6879      	ldr	r1, [r7, #4]
 804a6ce:	4819      	ldr	r0, [pc, #100]	; (804a734 <preprocess+0x24c>)
 804a6d0:	f7ff fe10 	bl	804a2f4 <remap_coordinates>
    gyro_strength = matrix_length(posture_loc.gyro, 3);
 804a6d4:	2103      	movs	r1, #3
 804a6d6:	4817      	ldr	r0, [pc, #92]	; (804a734 <preprocess+0x24c>)
 804a6d8:	f7ff fd61 	bl	804a19e <matrix_length>
 804a6dc:	eef0 7a40 	vmov.f32	s15, s0
 804a6e0:	4b15      	ldr	r3, [pc, #84]	; (804a738 <preprocess+0x250>)
 804a6e2:	edc3 7a00 	vstr	s15, [r3]
 804a6e6:	e00c      	b.n	804a702 <preprocess+0x21a>
  } else if (data_type == SENSOR_TYPE_MAGNETIC_FIELD) {
 804a6e8:	683b      	ldr	r3, [r7, #0]
 804a6ea:	2b01      	cmp	r3, #1
 804a6ec:	d109      	bne.n	804a702 <preprocess+0x21a>
    remap_coordinates(posture_loc.mag, input_data, ANDROID_AXES);
 804a6ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 804a6f2:	461a      	mov	r2, r3
 804a6f4:	6879      	ldr	r1, [r7, #4]
 804a6f6:	4811      	ldr	r0, [pc, #68]	; (804a73c <preprocess+0x254>)
 804a6f8:	f7ff fdfc 	bl	804a2f4 <remap_coordinates>
    posture_loc.mag_correct = 0;
 804a6fc:	4b06      	ldr	r3, [pc, #24]	; (804a718 <preprocess+0x230>)
 804a6fe:	2200      	movs	r2, #0
 804a700:	609a      	str	r2, [r3, #8]
  }
  return 0;
 804a702:	2300      	movs	r3, #0
}
 804a704:	4618      	mov	r0, r3
 804a706:	3758      	adds	r7, #88	; 0x58
 804a708:	46bd      	mov	sp, r7
 804a70a:	bdb0      	pop	{r4, r5, r7, pc}
 804a70c:	08065d24 	.word	0x08065d24
 804a710:	08065d00 	.word	0x08065d00
 804a714:	20008168 	.word	0x20008168
 804a718:	200080bc 	.word	0x200080bc
 804a71c:	c11ce80a 	.word	0xc11ce80a
 804a720:	3f933333 	.word	0x3f933333
 804a724:	3f59999a 	.word	0x3f59999a
 804a728:	3a83126f 	.word	0x3a83126f
 804a72c:	3a83126f 	.word	0x3a83126f
 804a730:	20007890 	.word	0x20007890
 804a734:	20008174 	.word	0x20008174
 804a738:	200078ac 	.word	0x200078ac
 804a73c:	20008180 	.word	0x20008180

0804a740 <setting_state>:

static void setting_state(float *acc, float *mag, float *state_1)
{                               // state_1: previous state
 804a740:	b580      	push	{r7, lr}
 804a742:	ed2d 8b02 	vpush	{d8}
 804a746:	b092      	sub	sp, #72	; 0x48
 804a748:	af00      	add	r7, sp, #0
 804a74a:	60f8      	str	r0, [r7, #12]
 804a74c:	60b9      	str	r1, [r7, #8]
 804a74e:	607a      	str	r2, [r7, #4]
  float init_theta = 0, init_phi = 0, init_psi = 0;
 804a750:	f04f 0300 	mov.w	r3, #0
 804a754:	643b      	str	r3, [r7, #64]	; 0x40
 804a756:	f04f 0300 	mov.w	r3, #0
 804a75a:	647b      	str	r3, [r7, #68]	; 0x44
 804a75c:	f04f 0300 	mov.w	r3, #0
 804a760:	63fb      	str	r3, [r7, #60]	; 0x3c
  float cos_pitch = 0, sin_pitch = 0, cos_roll = 0, sin_roll = 0;
 804a762:	f04f 0300 	mov.w	r3, #0
 804a766:	63bb      	str	r3, [r7, #56]	; 0x38
 804a768:	f04f 0300 	mov.w	r3, #0
 804a76c:	637b      	str	r3, [r7, #52]	; 0x34
 804a76e:	f04f 0300 	mov.w	r3, #0
 804a772:	633b      	str	r3, [r7, #48]	; 0x30
 804a774:	f04f 0300 	mov.w	r3, #0
 804a778:	62fb      	str	r3, [r7, #44]	; 0x2c
  float cp2 = 0, sp2 = 0, cr2 = 0, sr2 = 0, cy2 = 0, sy2 = 0;
 804a77a:	f04f 0300 	mov.w	r3, #0
 804a77e:	62bb      	str	r3, [r7, #40]	; 0x28
 804a780:	f04f 0300 	mov.w	r3, #0
 804a784:	627b      	str	r3, [r7, #36]	; 0x24
 804a786:	f04f 0300 	mov.w	r3, #0
 804a78a:	623b      	str	r3, [r7, #32]
 804a78c:	f04f 0300 	mov.w	r3, #0
 804a790:	61fb      	str	r3, [r7, #28]
 804a792:	f04f 0300 	mov.w	r3, #0
 804a796:	61bb      	str	r3, [r7, #24]
 804a798:	f04f 0300 	mov.w	r3, #0
 804a79c:	617b      	str	r3, [r7, #20]

  // ===== use acc to calculate roll and pitch =====//
  init_theta = atan2f(-acc[0], sqrtf(acc[1] * acc[1] + acc[2] * acc[2]));
 804a79e:	68fb      	ldr	r3, [r7, #12]
 804a7a0:	edd3 7a00 	vldr	s15, [r3]
 804a7a4:	eeb1 8a67 	vneg.f32	s16, s15
 804a7a8:	68fb      	ldr	r3, [r7, #12]
 804a7aa:	3304      	adds	r3, #4
 804a7ac:	ed93 7a00 	vldr	s14, [r3]
 804a7b0:	68fb      	ldr	r3, [r7, #12]
 804a7b2:	3304      	adds	r3, #4
 804a7b4:	edd3 7a00 	vldr	s15, [r3]
 804a7b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 804a7bc:	68fb      	ldr	r3, [r7, #12]
 804a7be:	3308      	adds	r3, #8
 804a7c0:	edd3 6a00 	vldr	s13, [r3]
 804a7c4:	68fb      	ldr	r3, [r7, #12]
 804a7c6:	3308      	adds	r3, #8
 804a7c8:	edd3 7a00 	vldr	s15, [r3]
 804a7cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 804a7d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 804a7d4:	eeb0 0a67 	vmov.f32	s0, s15
 804a7d8:	f018 fb0c 	bl	8062df4 <sqrtf>
 804a7dc:	eef0 7a40 	vmov.f32	s15, s0
 804a7e0:	eef0 0a67 	vmov.f32	s1, s15
 804a7e4:	eeb0 0a48 	vmov.f32	s0, s16
 804a7e8:	f018 fb02 	bl	8062df0 <atan2f>
 804a7ec:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
  init_phi = atan2f(acc[1], acc[2]);
 804a7f0:	68fb      	ldr	r3, [r7, #12]
 804a7f2:	3304      	adds	r3, #4
 804a7f4:	edd3 7a00 	vldr	s15, [r3]
 804a7f8:	68fb      	ldr	r3, [r7, #12]
 804a7fa:	3308      	adds	r3, #8
 804a7fc:	ed93 7a00 	vldr	s14, [r3]
 804a800:	eef0 0a47 	vmov.f32	s1, s14
 804a804:	eeb0 0a67 	vmov.f32	s0, s15
 804a808:	f018 faf2 	bl	8062df0 <atan2f>
 804a80c:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44

  if (acc[2] < 0) {
 804a810:	68fb      	ldr	r3, [r7, #12]
 804a812:	3308      	adds	r3, #8
 804a814:	edd3 7a00 	vldr	s15, [r3]
 804a818:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 804a81c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 804a820:	d517      	bpl.n	804a852 <setting_state+0x112>
    if (init_phi < 0)
 804a822:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 804a826:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 804a82a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 804a82e:	d508      	bpl.n	804a842 <setting_state+0x102>
      init_phi = -_PI - init_phi;
 804a830:	ed9f 7a91 	vldr	s14, [pc, #580]	; 804aa78 <setting_state+0x338>
 804a834:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 804a838:	ee77 7a67 	vsub.f32	s15, s14, s15
 804a83c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
 804a840:	e007      	b.n	804a852 <setting_state+0x112>
    else
      init_phi = _PI - init_phi;
 804a842:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 804aa7c <setting_state+0x33c>
 804a846:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 804a84a:	ee77 7a67 	vsub.f32	s15, s14, s15
 804a84e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
  }

  cos_pitch = cosf(init_theta);
 804a852:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 804a856:	f018 f969 	bl	8062b2c <cosf>
 804a85a:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
  sin_pitch = sinf(init_theta);
 804a85e:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 804a862:	f018 f9a3 	bl	8062bac <sinf>
 804a866:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
  cos_roll = cosf(init_phi);
 804a86a:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 804a86e:	f018 f95d 	bl	8062b2c <cosf>
 804a872:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
  sin_roll = sinf(init_phi);
 804a876:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 804a87a:	f018 f997 	bl	8062bac <sinf>
 804a87e:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
  // ===== use acc to calculate roll and pitch =====//

  // ===== use mag to calculate yaw =====//
  init_psi = -atan2f(mag[0] * cos_pitch + mag[1] * sin_pitch * sin_roll
 804a882:	68bb      	ldr	r3, [r7, #8]
 804a884:	ed93 7a00 	vldr	s14, [r3]
 804a888:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 804a88c:	ee27 7a27 	vmul.f32	s14, s14, s15
 804a890:	68bb      	ldr	r3, [r7, #8]
 804a892:	3304      	adds	r3, #4
 804a894:	edd3 6a00 	vldr	s13, [r3]
 804a898:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 804a89c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 804a8a0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 804a8a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 804a8a8:	ee37 7a27 	vadd.f32	s14, s14, s15
                     + mag[2] * sin_pitch * cos_roll,
 804a8ac:	68bb      	ldr	r3, [r7, #8]
 804a8ae:	3308      	adds	r3, #8
 804a8b0:	edd3 6a00 	vldr	s13, [r3]
 804a8b4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 804a8b8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 804a8bc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 804a8c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
  init_psi = -atan2f(mag[0] * cos_pitch + mag[1] * sin_pitch * sin_roll
 804a8c4:	ee37 6a27 	vadd.f32	s12, s14, s15
                     mag[2] * sin_roll - mag[1] * cos_roll);
 804a8c8:	68bb      	ldr	r3, [r7, #8]
 804a8ca:	3308      	adds	r3, #8
 804a8cc:	ed93 7a00 	vldr	s14, [r3]
 804a8d0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 804a8d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 804a8d8:	68bb      	ldr	r3, [r7, #8]
 804a8da:	3304      	adds	r3, #4
 804a8dc:	edd3 6a00 	vldr	s13, [r3]
 804a8e0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 804a8e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
  init_psi = -atan2f(mag[0] * cos_pitch + mag[1] * sin_pitch * sin_roll
 804a8e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 804a8ec:	eef0 0a67 	vmov.f32	s1, s15
 804a8f0:	eeb0 0a46 	vmov.f32	s0, s12
 804a8f4:	f018 fa7c 	bl	8062df0 <atan2f>
 804a8f8:	eef0 7a40 	vmov.f32	s15, s0
 804a8fc:	eef1 7a67 	vneg.f32	s15, s15
 804a900:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
  // ===== use mag to calculate yaw =====//

  // ===== convert euler angle to quaternion =====//
  cp2 = cosf(init_theta / 2.0f);
 804a904:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 804a908:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 804a90c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 804a910:	eeb0 0a47 	vmov.f32	s0, s14
 804a914:	f018 f90a 	bl	8062b2c <cosf>
 804a918:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
  sp2 = sinf(init_theta / 2.0f);
 804a91c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 804a920:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 804a924:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 804a928:	eeb0 0a47 	vmov.f32	s0, s14
 804a92c:	f018 f93e 	bl	8062bac <sinf>
 804a930:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
  cr2 = cosf(init_phi / 2.0f);
 804a934:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 804a938:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 804a93c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 804a940:	eeb0 0a47 	vmov.f32	s0, s14
 804a944:	f018 f8f2 	bl	8062b2c <cosf>
 804a948:	ed87 0a08 	vstr	s0, [r7, #32]
  sr2 = sinf(init_phi / 2.0f);
 804a94c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 804a950:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 804a954:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 804a958:	eeb0 0a47 	vmov.f32	s0, s14
 804a95c:	f018 f926 	bl	8062bac <sinf>
 804a960:	ed87 0a07 	vstr	s0, [r7, #28]
  cy2 = cosf(init_psi / 2.0f);
 804a964:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 804a968:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 804a96c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 804a970:	eeb0 0a47 	vmov.f32	s0, s14
 804a974:	f018 f8da 	bl	8062b2c <cosf>
 804a978:	ed87 0a06 	vstr	s0, [r7, #24]
  sy2 = sinf(init_psi / 2.0f);
 804a97c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 804a980:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 804a984:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 804a988:	eeb0 0a47 	vmov.f32	s0, s14
 804a98c:	f018 f90e 	bl	8062bac <sinf>
 804a990:	ed87 0a05 	vstr	s0, [r7, #20]

  state_1[0] = cy2 * cp2 * cr2 + sy2 * sp2 * sr2;
 804a994:	ed97 7a06 	vldr	s14, [r7, #24]
 804a998:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 804a99c:	ee27 7a27 	vmul.f32	s14, s14, s15
 804a9a0:	edd7 7a08 	vldr	s15, [r7, #32]
 804a9a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 804a9a8:	edd7 6a05 	vldr	s13, [r7, #20]
 804a9ac:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 804a9b0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 804a9b4:	edd7 7a07 	vldr	s15, [r7, #28]
 804a9b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 804a9bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 804a9c0:	687b      	ldr	r3, [r7, #4]
 804a9c2:	edc3 7a00 	vstr	s15, [r3]
  state_1[1] = cy2 * cp2 * sr2 - sy2 * sp2 * cr2;
 804a9c6:	ed97 7a06 	vldr	s14, [r7, #24]
 804a9ca:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 804a9ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 804a9d2:	edd7 7a07 	vldr	s15, [r7, #28]
 804a9d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 804a9da:	edd7 6a05 	vldr	s13, [r7, #20]
 804a9de:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 804a9e2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 804a9e6:	edd7 7a08 	vldr	s15, [r7, #32]
 804a9ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 804a9ee:	687b      	ldr	r3, [r7, #4]
 804a9f0:	3304      	adds	r3, #4
 804a9f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 804a9f6:	edc3 7a00 	vstr	s15, [r3]
  state_1[2] = cy2 * sp2 * cr2 + sy2 * cp2 * sr2;
 804a9fa:	ed97 7a06 	vldr	s14, [r7, #24]
 804a9fe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 804aa02:	ee27 7a27 	vmul.f32	s14, s14, s15
 804aa06:	edd7 7a08 	vldr	s15, [r7, #32]
 804aa0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 804aa0e:	edd7 6a05 	vldr	s13, [r7, #20]
 804aa12:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 804aa16:	ee66 6aa7 	vmul.f32	s13, s13, s15
 804aa1a:	edd7 7a07 	vldr	s15, [r7, #28]
 804aa1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 804aa22:	687b      	ldr	r3, [r7, #4]
 804aa24:	3308      	adds	r3, #8
 804aa26:	ee77 7a27 	vadd.f32	s15, s14, s15
 804aa2a:	edc3 7a00 	vstr	s15, [r3]
  state_1[3] = sy2 * cp2 * cr2 - cy2 * sp2 * sr2;
 804aa2e:	ed97 7a05 	vldr	s14, [r7, #20]
 804aa32:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 804aa36:	ee27 7a27 	vmul.f32	s14, s14, s15
 804aa3a:	edd7 7a08 	vldr	s15, [r7, #32]
 804aa3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 804aa42:	edd7 6a06 	vldr	s13, [r7, #24]
 804aa46:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 804aa4a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 804aa4e:	edd7 7a07 	vldr	s15, [r7, #28]
 804aa52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 804aa56:	687b      	ldr	r3, [r7, #4]
 804aa58:	330c      	adds	r3, #12
 804aa5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 804aa5e:	edc3 7a00 	vstr	s15, [r3]
  // ===== convert euler angle to quaternion =====//

  matrix_normalize(state_1, 4); // data of quaternion should be in 1~-1
 804aa62:	2104      	movs	r1, #4
 804aa64:	6878      	ldr	r0, [r7, #4]
 804aa66:	f7ff fbdb 	bl	804a220 <matrix_normalize>
}
 804aa6a:	bf00      	nop
 804aa6c:	3748      	adds	r7, #72	; 0x48
 804aa6e:	46bd      	mov	sp, r7
 804aa70:	ecbd 8b02 	vpop	{d8}
 804aa74:	bd80      	pop	{r7, pc}
 804aa76:	bf00      	nop
 804aa78:	c0490fdb 	.word	0xc0490fdb
 804aa7c:	40490fdb 	.word	0x40490fdb

0804aa80 <propagation>:

static void propagation(float *gyro, float deltaTime, float *state_p,
                        float *var_p, float *state_1, float *var_1, float *A_1)
{                               // state_p: predict state, var_p: predict variance, state_1: previous state, var_1: previous variance, A_1:previous matrix A, correct_level: correct level setting
 804aa80:	b590      	push	{r4, r7, lr}
 804aa82:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 804aa86:	af02      	add	r7, sp, #8
 804aa88:	f107 0414 	add.w	r4, r7, #20
 804aa8c:	6020      	str	r0, [r4, #0]
 804aa8e:	f107 0010 	add.w	r0, r7, #16
 804aa92:	ed80 0a00 	vstr	s0, [r0]
 804aa96:	f107 000c 	add.w	r0, r7, #12
 804aa9a:	6001      	str	r1, [r0, #0]
 804aa9c:	f107 0108 	add.w	r1, r7, #8
 804aaa0:	600a      	str	r2, [r1, #0]
 804aaa2:	1d3a      	adds	r2, r7, #4
 804aaa4:	6013      	str	r3, [r2, #0]
  int i = 0;
 804aaa6:	2300      	movs	r3, #0
 804aaa8:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
  float gyro_half[3] = { 0 };
 804aaac:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 804aab0:	2200      	movs	r2, #0
 804aab2:	601a      	str	r2, [r3, #0]
 804aab4:	605a      	str	r2, [r3, #4]
 804aab6:	609a      	str	r2, [r3, #8]
  float state_gain[4] = { 0 };
 804aab8:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 804aabc:	2200      	movs	r2, #0
 804aabe:	601a      	str	r2, [r3, #0]
 804aac0:	605a      	str	r2, [r3, #4]
 804aac2:	609a      	str	r2, [r3, #8]
 804aac4:	60da      	str	r2, [r3, #12]
  float sf_err = 0;
 804aac6:	f04f 0300 	mov.w	r3, #0
 804aaca:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
  float int_err = 0;
 804aace:	f04f 0300 	mov.w	r3, #0
 804aad2:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
  float A[16] = { 0 };
 804aad6:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 804aada:	2240      	movs	r2, #64	; 0x40
 804aadc:	2100      	movs	r1, #0
 804aade:	4618      	mov	r0, r3
 804aae0:	f015 fa6c 	bl	805ffbc <memset>
  float A_mid[16] = { 0 };
 804aae4:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 804aae8:	2240      	movs	r2, #64	; 0x40
 804aaea:	2100      	movs	r1, #0
 804aaec:	4618      	mov	r0, r3
 804aaee:	f015 fa65 	bl	805ffbc <memset>
  float A_tmp[16] = { 0 };
 804aaf2:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 804aaf6:	2240      	movs	r2, #64	; 0x40
 804aaf8:	2100      	movs	r1, #0
 804aafa:	4618      	mov	r0, r3
 804aafc:	f015 fa5e 	bl	805ffbc <memset>
  float G_mat[16] = { 0 };
 804ab00:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 804ab04:	4618      	mov	r0, r3
 804ab06:	2340      	movs	r3, #64	; 0x40
 804ab08:	461a      	mov	r2, r3
 804ab0a:	2100      	movs	r1, #0
 804ab0c:	f015 fa56 	bl	805ffbc <memset>
  float W[12] = { 0 };
 804ab10:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 804ab14:	4618      	mov	r0, r3
 804ab16:	2330      	movs	r3, #48	; 0x30
 804ab18:	461a      	mov	r2, r3
 804ab1a:	2100      	movs	r1, #0
 804ab1c:	f015 fa4e 	bl	805ffbc <memset>
  float R[9] = { 0 };
 804ab20:	f107 0398 	add.w	r3, r7, #152	; 0x98
 804ab24:	4618      	mov	r0, r3
 804ab26:	2324      	movs	r3, #36	; 0x24
 804ab28:	461a      	mov	r2, r3
 804ab2a:	2100      	movs	r1, #0
 804ab2c:	f015 fa46 	bl	805ffbc <memset>
  float GVGT[16] = { 0 };
 804ab30:	f107 0358 	add.w	r3, r7, #88	; 0x58
 804ab34:	4618      	mov	r0, r3
 804ab36:	2340      	movs	r3, #64	; 0x40
 804ab38:	461a      	mov	r2, r3
 804ab3a:	2100      	movs	r1, #0
 804ab3c:	f015 fa3e 	bl	805ffbc <memset>
  float WRWT[16] = { 0 };
 804ab40:	f107 0318 	add.w	r3, r7, #24
 804ab44:	4618      	mov	r0, r3
 804ab46:	2340      	movs	r3, #64	; 0x40
 804ab48:	461a      	mov	r2, r3
 804ab4a:	2100      	movs	r1, #0
 804ab4c:	f015 fa36 	bl	805ffbc <memset>

  gyro_half[0] = gyro[0] / 2.0f;
 804ab50:	f107 0314 	add.w	r3, r7, #20
 804ab54:	681b      	ldr	r3, [r3, #0]
 804ab56:	ed93 7a00 	vldr	s14, [r3]
 804ab5a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 804ab5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 804ab62:	edc7 7a7f 	vstr	s15, [r7, #508]	; 0x1fc
  gyro_half[1] = gyro[1] / 2.0f;
 804ab66:	f107 0314 	add.w	r3, r7, #20
 804ab6a:	681b      	ldr	r3, [r3, #0]
 804ab6c:	3304      	adds	r3, #4
 804ab6e:	ed93 7a00 	vldr	s14, [r3]
 804ab72:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 804ab76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 804ab7a:	edc7 7a80 	vstr	s15, [r7, #512]	; 0x200
  gyro_half[2] = gyro[2] / 2.0f;
 804ab7e:	f107 0314 	add.w	r3, r7, #20
 804ab82:	681b      	ldr	r3, [r3, #0]
 804ab84:	3308      	adds	r3, #8
 804ab86:	ed93 7a00 	vldr	s14, [r3]
 804ab8a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 804ab8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 804ab92:	edc7 7a81 	vstr	s15, [r7, #516]	; 0x204

  A[0] = 0;
 804ab96:	f04f 0300 	mov.w	r3, #0
 804ab9a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  A[1] = -gyro_half[0];
 804ab9e:	edd7 7a7f 	vldr	s15, [r7, #508]	; 0x1fc
 804aba2:	eef1 7a67 	vneg.f32	s15, s15
 804aba6:	edc7 7a6c 	vstr	s15, [r7, #432]	; 0x1b0
  A[2] = -gyro_half[1];
 804abaa:	edd7 7a80 	vldr	s15, [r7, #512]	; 0x200
 804abae:	eef1 7a67 	vneg.f32	s15, s15
 804abb2:	edc7 7a6d 	vstr	s15, [r7, #436]	; 0x1b4
  A[3] = -gyro_half[2];
 804abb6:	edd7 7a81 	vldr	s15, [r7, #516]	; 0x204
 804abba:	eef1 7a67 	vneg.f32	s15, s15
 804abbe:	edc7 7a6e 	vstr	s15, [r7, #440]	; 0x1b8
  A[4] = gyro_half[0];
 804abc2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 804abc6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
  A[5] = 0;
 804abca:	f04f 0300 	mov.w	r3, #0
 804abce:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
  A[6] = gyro_half[2];
 804abd2:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 804abd6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
  A[7] = -gyro_half[1];
 804abda:	edd7 7a80 	vldr	s15, [r7, #512]	; 0x200
 804abde:	eef1 7a67 	vneg.f32	s15, s15
 804abe2:	edc7 7a72 	vstr	s15, [r7, #456]	; 0x1c8
  A[8] = gyro_half[1];
 804abe6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 804abea:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  A[9] = -gyro_half[2];
 804abee:	edd7 7a81 	vldr	s15, [r7, #516]	; 0x204
 804abf2:	eef1 7a67 	vneg.f32	s15, s15
 804abf6:	edc7 7a74 	vstr	s15, [r7, #464]	; 0x1d0
  A[10] = 0;
 804abfa:	f04f 0300 	mov.w	r3, #0
 804abfe:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
  A[11] = gyro_half[0];
 804ac02:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 804ac06:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
  A[12] = gyro_half[2];
 804ac0a:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 804ac0e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
  A[13] = gyro_half[1];
 804ac12:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 804ac16:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
  A[14] = -gyro_half[0];
 804ac1a:	edd7 7a7f 	vldr	s15, [r7, #508]	; 0x1fc
 804ac1e:	eef1 7a67 	vneg.f32	s15, s15
 804ac22:	edc7 7a79 	vstr	s15, [r7, #484]	; 0x1e4
  A[15] = 0;
 804ac26:	f04f 0300 	mov.w	r3, #0
 804ac2a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

  for (i = 0; i < 16; i++)
 804ac2e:	2300      	movs	r3, #0
 804ac30:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 804ac34:	e02a      	b.n	804ac8c <propagation+0x20c>
    A_mid[i] = (A_1[i] + A[i]) * deltaTime / 2.0f;
 804ac36:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 804ac3a:	009b      	lsls	r3, r3, #2
 804ac3c:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 804ac40:	4413      	add	r3, r2
 804ac42:	ed93 7a00 	vldr	s14, [r3]
 804ac46:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 804ac4a:	009b      	lsls	r3, r3, #2
 804ac4c:	f507 7208 	add.w	r2, r7, #544	; 0x220
 804ac50:	4413      	add	r3, r2
 804ac52:	3b74      	subs	r3, #116	; 0x74
 804ac54:	edd3 7a00 	vldr	s15, [r3]
 804ac58:	ee37 7a27 	vadd.f32	s14, s14, s15
 804ac5c:	f107 0310 	add.w	r3, r7, #16
 804ac60:	edd3 7a00 	vldr	s15, [r3]
 804ac64:	ee27 7a27 	vmul.f32	s14, s14, s15
 804ac68:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 804ac6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 804ac70:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 804ac74:	009b      	lsls	r3, r3, #2
 804ac76:	f507 7208 	add.w	r2, r7, #544	; 0x220
 804ac7a:	4413      	add	r3, r2
 804ac7c:	3bb4      	subs	r3, #180	; 0xb4
 804ac7e:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 16; i++)
 804ac82:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 804ac86:	3301      	adds	r3, #1
 804ac88:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 804ac8c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 804ac90:	2b0f      	cmp	r3, #15
 804ac92:	ddd0      	ble.n	804ac36 <propagation+0x1b6>
  for (i = 0; i < 16; i++)
 804ac94:	2300      	movs	r3, #0
 804ac96:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 804ac9a:	e01f      	b.n	804acdc <propagation+0x25c>
    A_tmp[i] = A_1[i] * deltaTime / 2.0f;
 804ac9c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 804aca0:	009b      	lsls	r3, r3, #2
 804aca2:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 804aca6:	4413      	add	r3, r2
 804aca8:	ed93 7a00 	vldr	s14, [r3]
 804acac:	f107 0310 	add.w	r3, r7, #16
 804acb0:	edd3 7a00 	vldr	s15, [r3]
 804acb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 804acb8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 804acbc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 804acc0:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 804acc4:	009b      	lsls	r3, r3, #2
 804acc6:	f507 7208 	add.w	r2, r7, #544	; 0x220
 804acca:	4413      	add	r3, r2
 804accc:	3bf4      	subs	r3, #244	; 0xf4
 804acce:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 16; i++)
 804acd2:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 804acd6:	3301      	adds	r3, #1
 804acd8:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 804acdc:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 804ace0:	2b0f      	cmp	r3, #15
 804ace2:	dddb      	ble.n	804ac9c <propagation+0x21c>
  A_tmp[0]++;                   // Add I matrix
 804ace4:	edd7 7a4b 	vldr	s15, [r7, #300]	; 0x12c
 804ace8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 804acec:	ee77 7a87 	vadd.f32	s15, s15, s14
 804acf0:	edc7 7a4b 	vstr	s15, [r7, #300]	; 0x12c
  A_tmp[5]++;
 804acf4:	edd7 7a50 	vldr	s15, [r7, #320]	; 0x140
 804acf8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 804acfc:	ee77 7a87 	vadd.f32	s15, s15, s14
 804ad00:	edc7 7a50 	vstr	s15, [r7, #320]	; 0x140
  A_tmp[10]++;
 804ad04:	edd7 7a55 	vldr	s15, [r7, #340]	; 0x154
 804ad08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 804ad0c:	ee77 7a87 	vadd.f32	s15, s15, s14
 804ad10:	edc7 7a55 	vstr	s15, [r7, #340]	; 0x154
  A_tmp[15]++;
 804ad14:	edd7 7a5a 	vldr	s15, [r7, #360]	; 0x168
 804ad18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 804ad1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 804ad20:	edc7 7a5a 	vstr	s15, [r7, #360]	; 0x168

  matrix_multiply(A_mid, A_tmp, G_mat, 4, 4, 4);
 804ad24:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 804ad28:	f507 7196 	add.w	r1, r7, #300	; 0x12c
 804ad2c:	f507 70b6 	add.w	r0, r7, #364	; 0x16c
 804ad30:	2304      	movs	r3, #4
 804ad32:	9301      	str	r3, [sp, #4]
 804ad34:	2304      	movs	r3, #4
 804ad36:	9300      	str	r3, [sp, #0]
 804ad38:	2304      	movs	r3, #4
 804ad3a:	f7fe ff83 	bl	8049c44 <matrix_multiply>
  G_mat[0]++;                   // Add I matrix
 804ad3e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 804ad42:	edd3 7a00 	vldr	s15, [r3]
 804ad46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 804ad4a:	ee77 7a87 	vadd.f32	s15, s15, s14
 804ad4e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 804ad52:	edc3 7a00 	vstr	s15, [r3]
  G_mat[5]++;
 804ad56:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 804ad5a:	edd3 7a05 	vldr	s15, [r3, #20]
 804ad5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 804ad62:	ee77 7a87 	vadd.f32	s15, s15, s14
 804ad66:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 804ad6a:	edc3 7a05 	vstr	s15, [r3, #20]
  G_mat[10]++;
 804ad6e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 804ad72:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 804ad76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 804ad7a:	ee77 7a87 	vadd.f32	s15, s15, s14
 804ad7e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 804ad82:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
  G_mat[15]++;
 804ad86:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 804ad8a:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 804ad8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 804ad92:	ee77 7a87 	vadd.f32	s15, s15, s14
 804ad96:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 804ad9a:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
  matrix_multiply(G_mat, state_1, state_p, 4, 4, 1);
 804ad9e:	f107 020c 	add.w	r2, r7, #12
 804ada2:	1d39      	adds	r1, r7, #4
 804ada4:	f107 00ec 	add.w	r0, r7, #236	; 0xec
 804ada8:	2301      	movs	r3, #1
 804adaa:	9301      	str	r3, [sp, #4]
 804adac:	2304      	movs	r3, #4
 804adae:	9300      	str	r3, [sp, #0]
 804adb0:	2304      	movs	r3, #4
 804adb2:	6812      	ldr	r2, [r2, #0]
 804adb4:	6809      	ldr	r1, [r1, #0]
 804adb6:	f7fe ff45 	bl	8049c44 <matrix_multiply>

  matrix_normalize(state_p, 4);
 804adba:	f107 030c 	add.w	r3, r7, #12
 804adbe:	2104      	movs	r1, #4
 804adc0:	6818      	ldr	r0, [r3, #0]
 804adc2:	f7ff fa2d 	bl	804a220 <matrix_normalize>
  for (i = 0; i < 16; i++)
 804adc6:	2300      	movs	r3, #0
 804adc8:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 804adcc:	e013      	b.n	804adf6 <propagation+0x376>
    A_1[i] = A[i];
 804adce:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 804add2:	009b      	lsls	r3, r3, #2
 804add4:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 804add8:	4413      	add	r3, r2
 804adda:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 804adde:	0092      	lsls	r2, r2, #2
 804ade0:	f507 7108 	add.w	r1, r7, #544	; 0x220
 804ade4:	440a      	add	r2, r1
 804ade6:	3a74      	subs	r2, #116	; 0x74
 804ade8:	6812      	ldr	r2, [r2, #0]
 804adea:	601a      	str	r2, [r3, #0]
  for (i = 0; i < 16; i++)
 804adec:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 804adf0:	3301      	adds	r3, #1
 804adf2:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 804adf6:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 804adfa:	2b0f      	cmp	r3, #15
 804adfc:	dde7      	ble.n	804adce <propagation+0x34e>

  for (i = 0; i < 4; i++)
 804adfe:	2300      	movs	r3, #0
 804ae00:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 804ae04:	e01b      	b.n	804ae3e <propagation+0x3be>
    state_gain[i] = state_1[i] * deltaTime;
 804ae06:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 804ae0a:	009b      	lsls	r3, r3, #2
 804ae0c:	1d3a      	adds	r2, r7, #4
 804ae0e:	6812      	ldr	r2, [r2, #0]
 804ae10:	4413      	add	r3, r2
 804ae12:	ed93 7a00 	vldr	s14, [r3]
 804ae16:	f107 0310 	add.w	r3, r7, #16
 804ae1a:	edd3 7a00 	vldr	s15, [r3]
 804ae1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 804ae22:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 804ae26:	009b      	lsls	r3, r3, #2
 804ae28:	f507 7208 	add.w	r2, r7, #544	; 0x220
 804ae2c:	4413      	add	r3, r2
 804ae2e:	3b34      	subs	r3, #52	; 0x34
 804ae30:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 4; i++)
 804ae34:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 804ae38:	3301      	adds	r3, #1
 804ae3a:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 804ae3e:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 804ae42:	2b03      	cmp	r3, #3
 804ae44:	dddf      	ble.n	804ae06 <propagation+0x386>

  W[0] = -state_gain[1];
 804ae46:	edd7 7a7c 	vldr	s15, [r7, #496]	; 0x1f0
 804ae4a:	eef1 7a67 	vneg.f32	s15, s15
 804ae4e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 804ae52:	edc3 7a00 	vstr	s15, [r3]
  W[1] = -state_gain[2];
 804ae56:	edd7 7a7d 	vldr	s15, [r7, #500]	; 0x1f4
 804ae5a:	eef1 7a67 	vneg.f32	s15, s15
 804ae5e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 804ae62:	edc3 7a01 	vstr	s15, [r3, #4]
  W[2] = -state_gain[3];
 804ae66:	edd7 7a7e 	vldr	s15, [r7, #504]	; 0x1f8
 804ae6a:	eef1 7a67 	vneg.f32	s15, s15
 804ae6e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 804ae72:	edc3 7a02 	vstr	s15, [r3, #8]
  W[3] = state_gain[0];
 804ae76:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 804ae7a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 804ae7e:	60da      	str	r2, [r3, #12]
  W[4] = -state_gain[3];
 804ae80:	edd7 7a7e 	vldr	s15, [r7, #504]	; 0x1f8
 804ae84:	eef1 7a67 	vneg.f32	s15, s15
 804ae88:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 804ae8c:	edc3 7a04 	vstr	s15, [r3, #16]
  W[5] = state_gain[2];
 804ae90:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 804ae94:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 804ae98:	615a      	str	r2, [r3, #20]
  W[6] = state_gain[3];
 804ae9a:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 804ae9e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 804aea2:	619a      	str	r2, [r3, #24]
  W[7] = state_gain[0];
 804aea4:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 804aea8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 804aeac:	61da      	str	r2, [r3, #28]
  W[8] = -state_gain[1];
 804aeae:	edd7 7a7c 	vldr	s15, [r7, #496]	; 0x1f0
 804aeb2:	eef1 7a67 	vneg.f32	s15, s15
 804aeb6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 804aeba:	edc3 7a08 	vstr	s15, [r3, #32]
  W[9] = -state_gain[2];
 804aebe:	edd7 7a7d 	vldr	s15, [r7, #500]	; 0x1f4
 804aec2:	eef1 7a67 	vneg.f32	s15, s15
 804aec6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 804aeca:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
  W[10] = state_gain[1];
 804aece:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 804aed2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 804aed6:	629a      	str	r2, [r3, #40]	; 0x28
  W[11] = state_gain[0];
 804aed8:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 804aedc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 804aee0:	62da      	str	r2, [r3, #44]	; 0x2c

  // ===== correct level: default: 2% of 2000 dps & 0,07dps RMS noise===== //
  sf_err = 0.000001f;           //(0.02*w*0.05)^2
 804aee2:	4b6e      	ldr	r3, [pc, #440]	; (804b09c <propagation+0x61c>)
 804aee4:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
  int_err = 0.00000002f;        //w^6 * 0.05^6
 804aee8:	4b6d      	ldr	r3, [pc, #436]	; (804b0a0 <propagation+0x620>)
 804aeea:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214

  float w0_squre = gyro[0] * gyro[0];
 804aeee:	f107 0314 	add.w	r3, r7, #20
 804aef2:	681b      	ldr	r3, [r3, #0]
 804aef4:	ed93 7a00 	vldr	s14, [r3]
 804aef8:	f107 0314 	add.w	r3, r7, #20
 804aefc:	681b      	ldr	r3, [r3, #0]
 804aefe:	edd3 7a00 	vldr	s15, [r3]
 804af02:	ee67 7a27 	vmul.f32	s15, s14, s15
 804af06:	edc7 7a84 	vstr	s15, [r7, #528]	; 0x210
  float w1_squre = gyro[1] * gyro[1];
 804af0a:	f107 0314 	add.w	r3, r7, #20
 804af0e:	681b      	ldr	r3, [r3, #0]
 804af10:	3304      	adds	r3, #4
 804af12:	ed93 7a00 	vldr	s14, [r3]
 804af16:	f107 0314 	add.w	r3, r7, #20
 804af1a:	681b      	ldr	r3, [r3, #0]
 804af1c:	3304      	adds	r3, #4
 804af1e:	edd3 7a00 	vldr	s15, [r3]
 804af22:	ee67 7a27 	vmul.f32	s15, s14, s15
 804af26:	edc7 7a83 	vstr	s15, [r7, #524]	; 0x20c
  float w2_squre = gyro[2] * gyro[2];
 804af2a:	f107 0314 	add.w	r3, r7, #20
 804af2e:	681b      	ldr	r3, [r3, #0]
 804af30:	3308      	adds	r3, #8
 804af32:	ed93 7a00 	vldr	s14, [r3]
 804af36:	f107 0314 	add.w	r3, r7, #20
 804af3a:	681b      	ldr	r3, [r3, #0]
 804af3c:	3308      	adds	r3, #8
 804af3e:	edd3 7a00 	vldr	s15, [r3]
 804af42:	ee67 7a27 	vmul.f32	s15, s14, s15
 804af46:	edc7 7a82 	vstr	s15, [r7, #520]	; 0x208

  R[0] = (w0_squre * sf_err) + (w0_squre * w0_squre * w0_squre * int_err);
 804af4a:	ed97 7a84 	vldr	s14, [r7, #528]	; 0x210
 804af4e:	edd7 7a86 	vldr	s15, [r7, #536]	; 0x218
 804af52:	ee27 7a27 	vmul.f32	s14, s14, s15
 804af56:	edd7 7a84 	vldr	s15, [r7, #528]	; 0x210
 804af5a:	ee67 6aa7 	vmul.f32	s13, s15, s15
 804af5e:	edd7 7a84 	vldr	s15, [r7, #528]	; 0x210
 804af62:	ee66 6aa7 	vmul.f32	s13, s13, s15
 804af66:	edd7 7a85 	vldr	s15, [r7, #532]	; 0x214
 804af6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 804af6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 804af72:	f107 0398 	add.w	r3, r7, #152	; 0x98
 804af76:	edc3 7a00 	vstr	s15, [r3]
  R[4] = (w1_squre * sf_err) + (w1_squre * w1_squre * w1_squre * int_err);
 804af7a:	ed97 7a83 	vldr	s14, [r7, #524]	; 0x20c
 804af7e:	edd7 7a86 	vldr	s15, [r7, #536]	; 0x218
 804af82:	ee27 7a27 	vmul.f32	s14, s14, s15
 804af86:	edd7 7a83 	vldr	s15, [r7, #524]	; 0x20c
 804af8a:	ee67 6aa7 	vmul.f32	s13, s15, s15
 804af8e:	edd7 7a83 	vldr	s15, [r7, #524]	; 0x20c
 804af92:	ee66 6aa7 	vmul.f32	s13, s13, s15
 804af96:	edd7 7a85 	vldr	s15, [r7, #532]	; 0x214
 804af9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 804af9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 804afa2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 804afa6:	edc3 7a04 	vstr	s15, [r3, #16]
  R[8] = (w2_squre * sf_err) + (w2_squre * w2_squre * w2_squre * int_err);
 804afaa:	ed97 7a82 	vldr	s14, [r7, #520]	; 0x208
 804afae:	edd7 7a86 	vldr	s15, [r7, #536]	; 0x218
 804afb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 804afb6:	edd7 7a82 	vldr	s15, [r7, #520]	; 0x208
 804afba:	ee67 6aa7 	vmul.f32	s13, s15, s15
 804afbe:	edd7 7a82 	vldr	s15, [r7, #520]	; 0x208
 804afc2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 804afc6:	edd7 7a85 	vldr	s15, [r7, #532]	; 0x214
 804afca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 804afce:	ee77 7a27 	vadd.f32	s15, s14, s15
 804afd2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 804afd6:	edc3 7a08 	vstr	s15, [r3, #32]

  ABAT(G_mat, var_1, GVGT, 4, 4);
 804afda:	f107 0258 	add.w	r2, r7, #88	; 0x58
 804afde:	f107 00ec 	add.w	r0, r7, #236	; 0xec
 804afe2:	2304      	movs	r3, #4
 804afe4:	9300      	str	r3, [sp, #0]
 804afe6:	2304      	movs	r3, #4
 804afe8:	f8d7 1230 	ldr.w	r1, [r7, #560]	; 0x230
 804afec:	f7fe ff1c 	bl	8049e28 <ABAT>
  ABAT(W, R, WRWT, 4, 3);
 804aff0:	f107 0218 	add.w	r2, r7, #24
 804aff4:	f107 0198 	add.w	r1, r7, #152	; 0x98
 804aff8:	f107 00bc 	add.w	r0, r7, #188	; 0xbc
 804affc:	2303      	movs	r3, #3
 804affe:	9300      	str	r3, [sp, #0]
 804b000:	2304      	movs	r3, #4
 804b002:	f7fe ff11 	bl	8049e28 <ABAT>
  for (i = 0; i < 16; i++)
 804b006:	2300      	movs	r3, #0
 804b008:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 804b00c:	e01f      	b.n	804b04e <propagation+0x5ce>
    var_p[i] = GVGT[i] + WRWT[i];
 804b00e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 804b012:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 804b016:	009b      	lsls	r3, r3, #2
 804b018:	4413      	add	r3, r2
 804b01a:	ed93 7a00 	vldr	s14, [r3]
 804b01e:	f107 0218 	add.w	r2, r7, #24
 804b022:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 804b026:	009b      	lsls	r3, r3, #2
 804b028:	4413      	add	r3, r2
 804b02a:	edd3 7a00 	vldr	s15, [r3]
 804b02e:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 804b032:	009b      	lsls	r3, r3, #2
 804b034:	f107 0208 	add.w	r2, r7, #8
 804b038:	6812      	ldr	r2, [r2, #0]
 804b03a:	4413      	add	r3, r2
 804b03c:	ee77 7a27 	vadd.f32	s15, s14, s15
 804b040:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 16; i++)
 804b044:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 804b048:	3301      	adds	r3, #1
 804b04a:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 804b04e:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 804b052:	2b0f      	cmp	r3, #15
 804b054:	dddb      	ble.n	804b00e <propagation+0x58e>
  for (i = 0; i < 4; i++)
 804b056:	2300      	movs	r3, #0
 804b058:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 804b05c:	e013      	b.n	804b086 <propagation+0x606>
    state_1[i] = state_p[i];
 804b05e:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 804b062:	009b      	lsls	r3, r3, #2
 804b064:	f107 020c 	add.w	r2, r7, #12
 804b068:	6812      	ldr	r2, [r2, #0]
 804b06a:	441a      	add	r2, r3
 804b06c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 804b070:	009b      	lsls	r3, r3, #2
 804b072:	1d39      	adds	r1, r7, #4
 804b074:	6809      	ldr	r1, [r1, #0]
 804b076:	440b      	add	r3, r1
 804b078:	6812      	ldr	r2, [r2, #0]
 804b07a:	601a      	str	r2, [r3, #0]
  for (i = 0; i < 4; i++)
 804b07c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 804b080:	3301      	adds	r3, #1
 804b082:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 804b086:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 804b08a:	2b03      	cmp	r3, #3
 804b08c:	dde7      	ble.n	804b05e <propagation+0x5de>
}
 804b08e:	bf00      	nop
 804b090:	bf00      	nop
 804b092:	f507 7709 	add.w	r7, r7, #548	; 0x224
 804b096:	46bd      	mov	sp, r7
 804b098:	bd90      	pop	{r4, r7, pc}
 804b09a:	bf00      	nop
 804b09c:	358637bd 	.word	0x358637bd
 804b0a0:	32abcc77 	.word	0x32abcc77

0804b0a4 <acc_update>:

// Correction of EKF: use acc to correct pose
static void acc_update(float *acc_in, float *state_p, float *variance_p)
{                               // state_p: predict state, var_p: predict variance, correct_level: correct level setting
 804b0a4:	b580      	push	{r7, lr}
 804b0a6:	b0f0      	sub	sp, #448	; 0x1c0
 804b0a8:	af02      	add	r7, sp, #8
 804b0aa:	f107 030c 	add.w	r3, r7, #12
 804b0ae:	6018      	str	r0, [r3, #0]
 804b0b0:	f107 0308 	add.w	r3, r7, #8
 804b0b4:	6019      	str	r1, [r3, #0]
 804b0b6:	1d3b      	adds	r3, r7, #4
 804b0b8:	601a      	str	r2, [r3, #0]
  int i = 0;
 804b0ba:	2300      	movs	r3, #0
 804b0bc:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
  float variance[16] = { 0 };
 804b0c0:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 804b0c4:	2240      	movs	r2, #64	; 0x40
 804b0c6:	2100      	movs	r1, #0
 804b0c8:	4618      	mov	r0, r3
 804b0ca:	f014 ff77 	bl	805ffbc <memset>
  float acc[3] = { 0 };
 804b0ce:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 804b0d2:	2200      	movs	r2, #0
 804b0d4:	601a      	str	r2, [r3, #0]
 804b0d6:	605a      	str	r2, [r3, #4]
 804b0d8:	609a      	str	r2, [r3, #8]
  float Zt_Zp[3] = { 0 };
 804b0da:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 804b0de:	2200      	movs	r2, #0
 804b0e0:	601a      	str	r2, [r3, #0]
 804b0e2:	605a      	str	r2, [r3, #4]
 804b0e4:	609a      	str	r2, [r3, #8]
  //float error = 0;
  float H[12] = { 0 };
 804b0e6:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 804b0ea:	2230      	movs	r2, #48	; 0x30
 804b0ec:	2100      	movs	r1, #0
 804b0ee:	4618      	mov	r0, r3
 804b0f0:	f014 ff64 	bl	805ffbc <memset>
  float HVHT[9] = { 0 };
 804b0f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 804b0f8:	2224      	movs	r2, #36	; 0x24
 804b0fa:	2100      	movs	r1, #0
 804b0fc:	4618      	mov	r0, r3
 804b0fe:	f014 ff5d 	bl	805ffbc <memset>
  float VHT[12] = { 0 };
 804b102:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 804b106:	2230      	movs	r2, #48	; 0x30
 804b108:	2100      	movs	r1, #0
 804b10a:	4618      	mov	r0, r3
 804b10c:	f014 ff56 	bl	805ffbc <memset>
  float phi[9] = { 0 };
 804b110:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 804b114:	4618      	mov	r0, r3
 804b116:	2324      	movs	r3, #36	; 0x24
 804b118:	461a      	mov	r2, r3
 804b11a:	2100      	movs	r1, #0
 804b11c:	f014 ff4e 	bl	805ffbc <memset>
  float inv_phi[9] = { 0 };
 804b120:	f107 0390 	add.w	r3, r7, #144	; 0x90
 804b124:	4618      	mov	r0, r3
 804b126:	2324      	movs	r3, #36	; 0x24
 804b128:	461a      	mov	r2, r3
 804b12a:	2100      	movs	r1, #0
 804b12c:	f014 ff46 	bl	805ffbc <memset>
  float K[12] = { 0 };
 804b130:	f107 0360 	add.w	r3, r7, #96	; 0x60
 804b134:	4618      	mov	r0, r3
 804b136:	2330      	movs	r3, #48	; 0x30
 804b138:	461a      	mov	r2, r3
 804b13a:	2100      	movs	r1, #0
 804b13c:	f014 ff3e 	bl	805ffbc <memset>
  float KE[4] = { 0 };
 804b140:	f107 0350 	add.w	r3, r7, #80	; 0x50
 804b144:	461a      	mov	r2, r3
 804b146:	2300      	movs	r3, #0
 804b148:	6013      	str	r3, [r2, #0]
 804b14a:	6053      	str	r3, [r2, #4]
 804b14c:	6093      	str	r3, [r2, #8]
 804b14e:	60d3      	str	r3, [r2, #12]
  float KH[16] = { 0 };
 804b150:	f107 0310 	add.w	r3, r7, #16
 804b154:	4618      	mov	r0, r3
 804b156:	2340      	movs	r3, #64	; 0x40
 804b158:	461a      	mov	r2, r3
 804b15a:	2100      	movs	r1, #0
 804b15c:	f014 ff2e 	bl	805ffbc <memset>

  for (i = 0; i < 3; i++)
 804b160:	2300      	movs	r3, #0
 804b162:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 804b166:	e014      	b.n	804b192 <acc_update+0xee>
    acc[i] = acc_in[i];
 804b168:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 804b16c:	009b      	lsls	r3, r3, #2
 804b16e:	f107 020c 	add.w	r2, r7, #12
 804b172:	6812      	ldr	r2, [r2, #0]
 804b174:	4413      	add	r3, r2
 804b176:	681a      	ldr	r2, [r3, #0]
 804b178:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 804b17c:	009b      	lsls	r3, r3, #2
 804b17e:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 804b182:	440b      	add	r3, r1
 804b184:	3b50      	subs	r3, #80	; 0x50
 804b186:	601a      	str	r2, [r3, #0]
  for (i = 0; i < 3; i++)
 804b188:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 804b18c:	3301      	adds	r3, #1
 804b18e:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 804b192:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 804b196:	2b02      	cmp	r3, #2
 804b198:	dde6      	ble.n	804b168 <acc_update+0xc4>

  matrix_normalize(acc, 3);
 804b19a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 804b19e:	2103      	movs	r1, #3
 804b1a0:	4618      	mov	r0, r3
 804b1a2:	f7ff f83d 	bl	804a220 <matrix_normalize>

  // this should be handling critical value, need or not? swl
//      if (acc[1] < 0.15f && acc[1] > -0.15f && acc[2] < 0.15f && acc[2] > -0.15f)
//              acc[1] *= (acc[2] * acc[2]);

  H[0] = -2 * state_p[2];
 804b1a6:	f107 0308 	add.w	r3, r7, #8
 804b1aa:	681b      	ldr	r3, [r3, #0]
 804b1ac:	3308      	adds	r3, #8
 804b1ae:	edd3 7a00 	vldr	s15, [r3]
 804b1b2:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 804b1b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 804b1ba:	edc7 7a4b 	vstr	s15, [r7, #300]	; 0x12c
  H[1] = 2 * state_p[3];
 804b1be:	f107 0308 	add.w	r3, r7, #8
 804b1c2:	681b      	ldr	r3, [r3, #0]
 804b1c4:	330c      	adds	r3, #12
 804b1c6:	edd3 7a00 	vldr	s15, [r3]
 804b1ca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 804b1ce:	edc7 7a4c 	vstr	s15, [r7, #304]	; 0x130
  H[2] = -2 * state_p[0];
 804b1d2:	f107 0308 	add.w	r3, r7, #8
 804b1d6:	681b      	ldr	r3, [r3, #0]
 804b1d8:	edd3 7a00 	vldr	s15, [r3]
 804b1dc:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 804b1e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 804b1e4:	edc7 7a4d 	vstr	s15, [r7, #308]	; 0x134
  H[3] = 2 * state_p[1];
 804b1e8:	f107 0308 	add.w	r3, r7, #8
 804b1ec:	681b      	ldr	r3, [r3, #0]
 804b1ee:	3304      	adds	r3, #4
 804b1f0:	edd3 7a00 	vldr	s15, [r3]
 804b1f4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 804b1f8:	edc7 7a4e 	vstr	s15, [r7, #312]	; 0x138
  H[4] = 2 * state_p[1];
 804b1fc:	f107 0308 	add.w	r3, r7, #8
 804b200:	681b      	ldr	r3, [r3, #0]
 804b202:	3304      	adds	r3, #4
 804b204:	edd3 7a00 	vldr	s15, [r3]
 804b208:	ee77 7aa7 	vadd.f32	s15, s15, s15
 804b20c:	edc7 7a4f 	vstr	s15, [r7, #316]	; 0x13c
  H[5] = 2 * state_p[0];
 804b210:	f107 0308 	add.w	r3, r7, #8
 804b214:	681b      	ldr	r3, [r3, #0]
 804b216:	edd3 7a00 	vldr	s15, [r3]
 804b21a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 804b21e:	edc7 7a50 	vstr	s15, [r7, #320]	; 0x140
  H[6] = 2 * state_p[3];
 804b222:	f107 0308 	add.w	r3, r7, #8
 804b226:	681b      	ldr	r3, [r3, #0]
 804b228:	330c      	adds	r3, #12
 804b22a:	edd3 7a00 	vldr	s15, [r3]
 804b22e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 804b232:	edc7 7a51 	vstr	s15, [r7, #324]	; 0x144
  H[7] = 2 * state_p[2];
 804b236:	f107 0308 	add.w	r3, r7, #8
 804b23a:	681b      	ldr	r3, [r3, #0]
 804b23c:	3308      	adds	r3, #8
 804b23e:	edd3 7a00 	vldr	s15, [r3]
 804b242:	ee77 7aa7 	vadd.f32	s15, s15, s15
 804b246:	edc7 7a52 	vstr	s15, [r7, #328]	; 0x148
  H[8] = 2 * state_p[0];
 804b24a:	f107 0308 	add.w	r3, r7, #8
 804b24e:	681b      	ldr	r3, [r3, #0]
 804b250:	edd3 7a00 	vldr	s15, [r3]
 804b254:	ee77 7aa7 	vadd.f32	s15, s15, s15
 804b258:	edc7 7a53 	vstr	s15, [r7, #332]	; 0x14c
  H[9] = -2 * state_p[1];
 804b25c:	f107 0308 	add.w	r3, r7, #8
 804b260:	681b      	ldr	r3, [r3, #0]
 804b262:	3304      	adds	r3, #4
 804b264:	edd3 7a00 	vldr	s15, [r3]
 804b268:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 804b26c:	ee67 7a87 	vmul.f32	s15, s15, s14
 804b270:	edc7 7a54 	vstr	s15, [r7, #336]	; 0x150
  H[10] = -2 * state_p[2];
 804b274:	f107 0308 	add.w	r3, r7, #8
 804b278:	681b      	ldr	r3, [r3, #0]
 804b27a:	3308      	adds	r3, #8
 804b27c:	edd3 7a00 	vldr	s15, [r3]
 804b280:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 804b284:	ee67 7a87 	vmul.f32	s15, s15, s14
 804b288:	edc7 7a55 	vstr	s15, [r7, #340]	; 0x154
  H[11] = 2 * state_p[3];
 804b28c:	f107 0308 	add.w	r3, r7, #8
 804b290:	681b      	ldr	r3, [r3, #0]
 804b292:	330c      	adds	r3, #12
 804b294:	edd3 7a00 	vldr	s15, [r3]
 804b298:	ee77 7aa7 	vadd.f32	s15, s15, s15
 804b29c:	edc7 7a56 	vstr	s15, [r7, #344]	; 0x158

  ABAT(H, variance_p, HVHT, 3, 4);
 804b2a0:	f507 7284 	add.w	r2, r7, #264	; 0x108
 804b2a4:	1d39      	adds	r1, r7, #4
 804b2a6:	f507 7096 	add.w	r0, r7, #300	; 0x12c
 804b2aa:	2304      	movs	r3, #4
 804b2ac:	9300      	str	r3, [sp, #0]
 804b2ae:	2303      	movs	r3, #3
 804b2b0:	6809      	ldr	r1, [r1, #0]
 804b2b2:	f7fe fdb9 	bl	8049e28 <ABAT>
  for (i = 0; i < 9; i++)
 804b2b6:	2300      	movs	r3, #0
 804b2b8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 804b2bc:	e013      	b.n	804b2e6 <acc_update+0x242>
    phi[i] = HVHT[i];
 804b2be:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 804b2c2:	009b      	lsls	r3, r3, #2
 804b2c4:	f507 72dc 	add.w	r2, r7, #440	; 0x1b8
 804b2c8:	4413      	add	r3, r2
 804b2ca:	3bb0      	subs	r3, #176	; 0xb0
 804b2cc:	681a      	ldr	r2, [r3, #0]
 804b2ce:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 804b2d2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 804b2d6:	009b      	lsls	r3, r3, #2
 804b2d8:	440b      	add	r3, r1
 804b2da:	601a      	str	r2, [r3, #0]
  for (i = 0; i < 9; i++)
 804b2dc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 804b2e0:	3301      	adds	r3, #1
 804b2e2:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 804b2e6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 804b2ea:	2b08      	cmp	r3, #8
 804b2ec:	dde7      	ble.n	804b2be <acc_update+0x21a>
  error = 0.0001f;              //0.1 m/s2
  phi[0] += error;
  phi[4] += error;
  phi[8] += error;
#endif
  phi[0] += acc_correct_var[0]; //swl
 804b2ee:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 804b2f2:	ed93 7a00 	vldr	s14, [r3]
 804b2f6:	4b71      	ldr	r3, [pc, #452]	; (804b4bc <acc_update+0x418>)
 804b2f8:	edd3 7a00 	vldr	s15, [r3]
 804b2fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 804b300:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 804b304:	edc3 7a00 	vstr	s15, [r3]
  phi[4] += acc_correct_var[1];
 804b308:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 804b30c:	ed93 7a04 	vldr	s14, [r3, #16]
 804b310:	4b6a      	ldr	r3, [pc, #424]	; (804b4bc <acc_update+0x418>)
 804b312:	edd3 7a01 	vldr	s15, [r3, #4]
 804b316:	ee77 7a27 	vadd.f32	s15, s14, s15
 804b31a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 804b31e:	edc3 7a04 	vstr	s15, [r3, #16]
  phi[8] += acc_correct_var[2];
 804b322:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 804b326:	ed93 7a08 	vldr	s14, [r3, #32]
 804b32a:	4b64      	ldr	r3, [pc, #400]	; (804b4bc <acc_update+0x418>)
 804b32c:	edd3 7a02 	vldr	s15, [r3, #8]
 804b330:	ee77 7a27 	vadd.f32	s15, s14, s15
 804b334:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 804b338:	edc3 7a08 	vstr	s15, [r3, #32]

  matrix_inverse(phi, inv_phi);
 804b33c:	f107 0290 	add.w	r2, r7, #144	; 0x90
 804b340:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 804b344:	4611      	mov	r1, r2
 804b346:	4618      	mov	r0, r3
 804b348:	f7fe fd96 	bl	8049e78 <matrix_inverse>

  // error = measurement data (acc) - predict data by gyro
  Zt_Zp[0] = acc[0] - 2 * (state_p[1] * state_p[3] - state_p[0] * state_p[2]);
 804b34c:	ed97 7a5a 	vldr	s14, [r7, #360]	; 0x168
 804b350:	f107 0308 	add.w	r3, r7, #8
 804b354:	681b      	ldr	r3, [r3, #0]
 804b356:	3304      	adds	r3, #4
 804b358:	edd3 6a00 	vldr	s13, [r3]
 804b35c:	f107 0308 	add.w	r3, r7, #8
 804b360:	681b      	ldr	r3, [r3, #0]
 804b362:	330c      	adds	r3, #12
 804b364:	edd3 7a00 	vldr	s15, [r3]
 804b368:	ee66 6aa7 	vmul.f32	s13, s13, s15
 804b36c:	f107 0308 	add.w	r3, r7, #8
 804b370:	681b      	ldr	r3, [r3, #0]
 804b372:	ed93 6a00 	vldr	s12, [r3]
 804b376:	f107 0308 	add.w	r3, r7, #8
 804b37a:	681b      	ldr	r3, [r3, #0]
 804b37c:	3308      	adds	r3, #8
 804b37e:	edd3 7a00 	vldr	s15, [r3]
 804b382:	ee66 7a27 	vmul.f32	s15, s12, s15
 804b386:	ee76 7ae7 	vsub.f32	s15, s13, s15
 804b38a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 804b38e:	ee77 7a67 	vsub.f32	s15, s14, s15
 804b392:	edc7 7a57 	vstr	s15, [r7, #348]	; 0x15c
  Zt_Zp[1] = acc[1] - 2 * (state_p[2] * state_p[3] + state_p[0] * state_p[1]);
 804b396:	ed97 7a5b 	vldr	s14, [r7, #364]	; 0x16c
 804b39a:	f107 0308 	add.w	r3, r7, #8
 804b39e:	681b      	ldr	r3, [r3, #0]
 804b3a0:	3308      	adds	r3, #8
 804b3a2:	edd3 6a00 	vldr	s13, [r3]
 804b3a6:	f107 0308 	add.w	r3, r7, #8
 804b3aa:	681b      	ldr	r3, [r3, #0]
 804b3ac:	330c      	adds	r3, #12
 804b3ae:	edd3 7a00 	vldr	s15, [r3]
 804b3b2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 804b3b6:	f107 0308 	add.w	r3, r7, #8
 804b3ba:	681b      	ldr	r3, [r3, #0]
 804b3bc:	ed93 6a00 	vldr	s12, [r3]
 804b3c0:	f107 0308 	add.w	r3, r7, #8
 804b3c4:	681b      	ldr	r3, [r3, #0]
 804b3c6:	3304      	adds	r3, #4
 804b3c8:	edd3 7a00 	vldr	s15, [r3]
 804b3cc:	ee66 7a27 	vmul.f32	s15, s12, s15
 804b3d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 804b3d4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 804b3d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 804b3dc:	edc7 7a58 	vstr	s15, [r7, #352]	; 0x160
  Zt_Zp[2] = acc[2]
 804b3e0:	ed97 7a5c 	vldr	s14, [r7, #368]	; 0x170
      - (state_p[0] * state_p[0] - state_p[1] * state_p[1]
 804b3e4:	f107 0308 	add.w	r3, r7, #8
 804b3e8:	681b      	ldr	r3, [r3, #0]
 804b3ea:	edd3 6a00 	vldr	s13, [r3]
 804b3ee:	f107 0308 	add.w	r3, r7, #8
 804b3f2:	681b      	ldr	r3, [r3, #0]
 804b3f4:	edd3 7a00 	vldr	s15, [r3]
 804b3f8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 804b3fc:	f107 0308 	add.w	r3, r7, #8
 804b400:	681b      	ldr	r3, [r3, #0]
 804b402:	3304      	adds	r3, #4
 804b404:	ed93 6a00 	vldr	s12, [r3]
 804b408:	f107 0308 	add.w	r3, r7, #8
 804b40c:	681b      	ldr	r3, [r3, #0]
 804b40e:	3304      	adds	r3, #4
 804b410:	edd3 7a00 	vldr	s15, [r3]
 804b414:	ee66 7a27 	vmul.f32	s15, s12, s15
 804b418:	ee76 6ae7 	vsub.f32	s13, s13, s15
         - state_p[2] * state_p[2] + state_p[3] * state_p[3]);
 804b41c:	f107 0308 	add.w	r3, r7, #8
 804b420:	681b      	ldr	r3, [r3, #0]
 804b422:	3308      	adds	r3, #8
 804b424:	ed93 6a00 	vldr	s12, [r3]
 804b428:	f107 0308 	add.w	r3, r7, #8
 804b42c:	681b      	ldr	r3, [r3, #0]
 804b42e:	3308      	adds	r3, #8
 804b430:	edd3 7a00 	vldr	s15, [r3]
 804b434:	ee66 7a27 	vmul.f32	s15, s12, s15
 804b438:	ee76 6ae7 	vsub.f32	s13, s13, s15
 804b43c:	f107 0308 	add.w	r3, r7, #8
 804b440:	681b      	ldr	r3, [r3, #0]
 804b442:	330c      	adds	r3, #12
 804b444:	ed93 6a00 	vldr	s12, [r3]
 804b448:	f107 0308 	add.w	r3, r7, #8
 804b44c:	681b      	ldr	r3, [r3, #0]
 804b44e:	330c      	adds	r3, #12
 804b450:	edd3 7a00 	vldr	s15, [r3]
 804b454:	ee66 7a27 	vmul.f32	s15, s12, s15
 804b458:	ee76 7aa7 	vadd.f32	s15, s13, s15
      - (state_p[0] * state_p[0] - state_p[1] * state_p[1]
 804b45c:	ee77 7a67 	vsub.f32	s15, s14, s15
  Zt_Zp[2] = acc[2]
 804b460:	edc7 7a59 	vstr	s15, [r7, #356]	; 0x164
  matrix_multiply_trans(variance_p, H, VHT, 4, 4, 3);
 804b464:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 804b468:	f507 7196 	add.w	r1, r7, #300	; 0x12c
 804b46c:	1d38      	adds	r0, r7, #4
 804b46e:	2303      	movs	r3, #3
 804b470:	9301      	str	r3, [sp, #4]
 804b472:	2304      	movs	r3, #4
 804b474:	9300      	str	r3, [sp, #0]
 804b476:	2304      	movs	r3, #4
 804b478:	6800      	ldr	r0, [r0, #0]
 804b47a:	f7fe fc5c 	bl	8049d36 <matrix_multiply_trans>
  matrix_multiply(VHT, inv_phi, K, 4, 3, 3);    // K = gain value
 804b47e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 804b482:	f107 0190 	add.w	r1, r7, #144	; 0x90
 804b486:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 804b48a:	2303      	movs	r3, #3
 804b48c:	9301      	str	r3, [sp, #4]
 804b48e:	2303      	movs	r3, #3
 804b490:	9300      	str	r3, [sp, #0]
 804b492:	2304      	movs	r3, #4
 804b494:	f7fe fbd6 	bl	8049c44 <matrix_multiply>
  matrix_multiply(K, Zt_Zp, KE, 4, 3, 1);       // KE = gain * error
 804b498:	f107 0250 	add.w	r2, r7, #80	; 0x50
 804b49c:	f507 71ae 	add.w	r1, r7, #348	; 0x15c
 804b4a0:	f107 0060 	add.w	r0, r7, #96	; 0x60
 804b4a4:	2301      	movs	r3, #1
 804b4a6:	9301      	str	r3, [sp, #4]
 804b4a8:	2303      	movs	r3, #3
 804b4aa:	9300      	str	r3, [sp, #0]
 804b4ac:	2304      	movs	r3, #4
 804b4ae:	f7fe fbc9 	bl	8049c44 <matrix_multiply>

  for (i = 0; i < 4; i++)
 804b4b2:	2300      	movs	r3, #0
 804b4b4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 804b4b8:	e025      	b.n	804b506 <acc_update+0x462>
 804b4ba:	bf00      	nop
 804b4bc:	20007890 	.word	0x20007890
 804b4c0:	00000000 	.word	0x00000000
    state_p[i] += KE[i];
 804b4c4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 804b4c8:	009b      	lsls	r3, r3, #2
 804b4ca:	f107 0208 	add.w	r2, r7, #8
 804b4ce:	6812      	ldr	r2, [r2, #0]
 804b4d0:	4413      	add	r3, r2
 804b4d2:	ed93 7a00 	vldr	s14, [r3]
 804b4d6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 804b4da:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 804b4de:	009b      	lsls	r3, r3, #2
 804b4e0:	4413      	add	r3, r2
 804b4e2:	edd3 7a00 	vldr	s15, [r3]
 804b4e6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 804b4ea:	009b      	lsls	r3, r3, #2
 804b4ec:	f107 0208 	add.w	r2, r7, #8
 804b4f0:	6812      	ldr	r2, [r2, #0]
 804b4f2:	4413      	add	r3, r2
 804b4f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 804b4f8:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 4; i++)
 804b4fc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 804b500:	3301      	adds	r3, #1
 804b502:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 804b506:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 804b50a:	2b03      	cmp	r3, #3
 804b50c:	ddda      	ble.n	804b4c4 <acc_update+0x420>

  matrix_multiply(K, H, KH, 4, 3, 4);
 804b50e:	f107 0210 	add.w	r2, r7, #16
 804b512:	f507 7196 	add.w	r1, r7, #300	; 0x12c
 804b516:	f107 0060 	add.w	r0, r7, #96	; 0x60
 804b51a:	2304      	movs	r3, #4
 804b51c:	9301      	str	r3, [sp, #4]
 804b51e:	2303      	movs	r3, #3
 804b520:	9300      	str	r3, [sp, #0]
 804b522:	2304      	movs	r3, #4
 804b524:	f7fe fb8e 	bl	8049c44 <matrix_multiply>
  KH[0] = 1 - KH[0];
 804b528:	f107 0310 	add.w	r3, r7, #16
 804b52c:	edd3 7a00 	vldr	s15, [r3]
 804b530:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 804b534:	ee77 7a67 	vsub.f32	s15, s14, s15
 804b538:	f107 0310 	add.w	r3, r7, #16
 804b53c:	edc3 7a00 	vstr	s15, [r3]
  KH[1] = 0 - KH[1];
 804b540:	f107 0310 	add.w	r3, r7, #16
 804b544:	edd3 7a01 	vldr	s15, [r3, #4]
 804b548:	ed1f 7a23 	vldr	s14, [pc, #-140]	; 804b4c0 <acc_update+0x41c>
 804b54c:	ee77 7a67 	vsub.f32	s15, s14, s15
 804b550:	f107 0310 	add.w	r3, r7, #16
 804b554:	edc3 7a01 	vstr	s15, [r3, #4]
  KH[2] = 0 - KH[2];
 804b558:	f107 0310 	add.w	r3, r7, #16
 804b55c:	edd3 7a02 	vldr	s15, [r3, #8]
 804b560:	ed1f 7a29 	vldr	s14, [pc, #-164]	; 804b4c0 <acc_update+0x41c>
 804b564:	ee77 7a67 	vsub.f32	s15, s14, s15
 804b568:	f107 0310 	add.w	r3, r7, #16
 804b56c:	edc3 7a02 	vstr	s15, [r3, #8]
  KH[3] = 0 - KH[3];
 804b570:	f107 0310 	add.w	r3, r7, #16
 804b574:	edd3 7a03 	vldr	s15, [r3, #12]
 804b578:	ed1f 7a2f 	vldr	s14, [pc, #-188]	; 804b4c0 <acc_update+0x41c>
 804b57c:	ee77 7a67 	vsub.f32	s15, s14, s15
 804b580:	f107 0310 	add.w	r3, r7, #16
 804b584:	edc3 7a03 	vstr	s15, [r3, #12]
  KH[4] = 0 - KH[4];
 804b588:	f107 0310 	add.w	r3, r7, #16
 804b58c:	edd3 7a04 	vldr	s15, [r3, #16]
 804b590:	ed1f 7a35 	vldr	s14, [pc, #-212]	; 804b4c0 <acc_update+0x41c>
 804b594:	ee77 7a67 	vsub.f32	s15, s14, s15
 804b598:	f107 0310 	add.w	r3, r7, #16
 804b59c:	edc3 7a04 	vstr	s15, [r3, #16]
  KH[5] = 1 - KH[5];
 804b5a0:	f107 0310 	add.w	r3, r7, #16
 804b5a4:	edd3 7a05 	vldr	s15, [r3, #20]
 804b5a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 804b5ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 804b5b0:	f107 0310 	add.w	r3, r7, #16
 804b5b4:	edc3 7a05 	vstr	s15, [r3, #20]
  KH[6] = 0 - KH[6];
 804b5b8:	f107 0310 	add.w	r3, r7, #16
 804b5bc:	edd3 7a06 	vldr	s15, [r3, #24]
 804b5c0:	ed1f 7a41 	vldr	s14, [pc, #-260]	; 804b4c0 <acc_update+0x41c>
 804b5c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 804b5c8:	f107 0310 	add.w	r3, r7, #16
 804b5cc:	edc3 7a06 	vstr	s15, [r3, #24]
  KH[7] = 0 - KH[7];
 804b5d0:	f107 0310 	add.w	r3, r7, #16
 804b5d4:	edd3 7a07 	vldr	s15, [r3, #28]
 804b5d8:	ed1f 7a47 	vldr	s14, [pc, #-284]	; 804b4c0 <acc_update+0x41c>
 804b5dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 804b5e0:	f107 0310 	add.w	r3, r7, #16
 804b5e4:	edc3 7a07 	vstr	s15, [r3, #28]
  KH[8] = 0 - KH[8];
 804b5e8:	f107 0310 	add.w	r3, r7, #16
 804b5ec:	edd3 7a08 	vldr	s15, [r3, #32]
 804b5f0:	ed1f 7a4d 	vldr	s14, [pc, #-308]	; 804b4c0 <acc_update+0x41c>
 804b5f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 804b5f8:	f107 0310 	add.w	r3, r7, #16
 804b5fc:	edc3 7a08 	vstr	s15, [r3, #32]
  KH[9] = 0 - KH[9];
 804b600:	f107 0310 	add.w	r3, r7, #16
 804b604:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 804b608:	ed1f 7a53 	vldr	s14, [pc, #-332]	; 804b4c0 <acc_update+0x41c>
 804b60c:	ee77 7a67 	vsub.f32	s15, s14, s15
 804b610:	f107 0310 	add.w	r3, r7, #16
 804b614:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
  KH[10] = 1 - KH[10];
 804b618:	f107 0310 	add.w	r3, r7, #16
 804b61c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 804b620:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 804b624:	ee77 7a67 	vsub.f32	s15, s14, s15
 804b628:	f107 0310 	add.w	r3, r7, #16
 804b62c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
  KH[11] = 0 - KH[11];
 804b630:	f107 0310 	add.w	r3, r7, #16
 804b634:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 804b638:	ed1f 7a5f 	vldr	s14, [pc, #-380]	; 804b4c0 <acc_update+0x41c>
 804b63c:	ee77 7a67 	vsub.f32	s15, s14, s15
 804b640:	f107 0310 	add.w	r3, r7, #16
 804b644:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
  KH[12] = 0 - KH[12];
 804b648:	f107 0310 	add.w	r3, r7, #16
 804b64c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 804b650:	ed1f 7a65 	vldr	s14, [pc, #-404]	; 804b4c0 <acc_update+0x41c>
 804b654:	ee77 7a67 	vsub.f32	s15, s14, s15
 804b658:	f107 0310 	add.w	r3, r7, #16
 804b65c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
  KH[13] = 0 - KH[13];
 804b660:	f107 0310 	add.w	r3, r7, #16
 804b664:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 804b668:	ed1f 7a6b 	vldr	s14, [pc, #-428]	; 804b4c0 <acc_update+0x41c>
 804b66c:	ee77 7a67 	vsub.f32	s15, s14, s15
 804b670:	f107 0310 	add.w	r3, r7, #16
 804b674:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
  KH[14] = 0 - KH[14];
 804b678:	f107 0310 	add.w	r3, r7, #16
 804b67c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 804b680:	ed1f 7a71 	vldr	s14, [pc, #-452]	; 804b4c0 <acc_update+0x41c>
 804b684:	ee77 7a67 	vsub.f32	s15, s14, s15
 804b688:	f107 0310 	add.w	r3, r7, #16
 804b68c:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
  KH[15] = 1 - KH[15];
 804b690:	f107 0310 	add.w	r3, r7, #16
 804b694:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 804b698:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 804b69c:	ee77 7a67 	vsub.f32	s15, s14, s15
 804b6a0:	f107 0310 	add.w	r3, r7, #16
 804b6a4:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

  matrix_multiply(KH, variance_p, variance, 4, 4, 4);
 804b6a8:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 804b6ac:	1d39      	adds	r1, r7, #4
 804b6ae:	f107 0010 	add.w	r0, r7, #16
 804b6b2:	2304      	movs	r3, #4
 804b6b4:	9301      	str	r3, [sp, #4]
 804b6b6:	2304      	movs	r3, #4
 804b6b8:	9300      	str	r3, [sp, #0]
 804b6ba:	2304      	movs	r3, #4
 804b6bc:	6809      	ldr	r1, [r1, #0]
 804b6be:	f7fe fac1 	bl	8049c44 <matrix_multiply>

  for (i = 0; i < 16; i++)
 804b6c2:	2300      	movs	r3, #0
 804b6c4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 804b6c8:	e013      	b.n	804b6f2 <acc_update+0x64e>
    variance_p[i] = variance[i];
 804b6ca:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 804b6ce:	009b      	lsls	r3, r3, #2
 804b6d0:	1d3a      	adds	r2, r7, #4
 804b6d2:	6812      	ldr	r2, [r2, #0]
 804b6d4:	4413      	add	r3, r2
 804b6d6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 804b6da:	0092      	lsls	r2, r2, #2
 804b6dc:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 804b6e0:	440a      	add	r2, r1
 804b6e2:	3a44      	subs	r2, #68	; 0x44
 804b6e4:	6812      	ldr	r2, [r2, #0]
 804b6e6:	601a      	str	r2, [r3, #0]
  for (i = 0; i < 16; i++)
 804b6e8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 804b6ec:	3301      	adds	r3, #1
 804b6ee:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 804b6f2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 804b6f6:	2b0f      	cmp	r3, #15
 804b6f8:	dde7      	ble.n	804b6ca <acc_update+0x626>
}
 804b6fa:	bf00      	nop
 804b6fc:	bf00      	nop
 804b6fe:	f507 77dc 	add.w	r7, r7, #440	; 0x1b8
 804b702:	46bd      	mov	sp, r7
 804b704:	bd80      	pop	{r7, pc}
 804b706:	bf00      	nop

0804b708 <posture_update>:

static void posture_update(float dt, int data_type)
{
 804b708:	b580      	push	{r7, lr}
 804b70a:	b086      	sub	sp, #24
 804b70c:	af02      	add	r7, sp, #8
 804b70e:	ed87 0a01 	vstr	s0, [r7, #4]
 804b712:	6038      	str	r0, [r7, #0]
  int i = 0;
 804b714:	2300      	movs	r3, #0
 804b716:	60fb      	str	r3, [r7, #12]
//      static float state_p[4] = { 0 };
  static float variance_p[16] =
      { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 };
  float singular_test_p = 0;
 804b718:	f04f 0300 	mov.w	r3, #0
 804b71c:	60bb      	str	r3, [r7, #8]

  if (posture_loc.posture_start > 0) {  // calculate initial pose when start
 804b71e:	4b4e      	ldr	r3, [pc, #312]	; (804b858 <posture_update+0x150>)
 804b720:	681b      	ldr	r3, [r3, #0]
 804b722:	2b00      	cmp	r3, #0
 804b724:	dd29      	ble.n	804b77a <posture_update+0x72>
    posture_loc.posture_start--;
 804b726:	4b4c      	ldr	r3, [pc, #304]	; (804b858 <posture_update+0x150>)
 804b728:	681b      	ldr	r3, [r3, #0]
 804b72a:	3b01      	subs	r3, #1
 804b72c:	4a4a      	ldr	r2, [pc, #296]	; (804b858 <posture_update+0x150>)
 804b72e:	6013      	str	r3, [r2, #0]
    matrix_normalize(posture_loc.acc, 3);
 804b730:	2103      	movs	r1, #3
 804b732:	484a      	ldr	r0, [pc, #296]	; (804b85c <posture_update+0x154>)
 804b734:	f7fe fd74 	bl	804a220 <matrix_normalize>

    setting_state(posture_loc.acc, posture_loc.mag, posture_loc.state_1);
 804b738:	4a49      	ldr	r2, [pc, #292]	; (804b860 <posture_update+0x158>)
 804b73a:	494a      	ldr	r1, [pc, #296]	; (804b864 <posture_update+0x15c>)
 804b73c:	4847      	ldr	r0, [pc, #284]	; (804b85c <posture_update+0x154>)
 804b73e:	f7fe ffff 	bl	804a740 <setting_state>
    for (i = 0; i < 4; i++)
 804b742:	2300      	movs	r3, #0
 804b744:	60fb      	str	r3, [r7, #12]
 804b746:	e010      	b.n	804b76a <posture_update+0x62>
      posture_loc.state[i] = posture_loc.state_1[i];
 804b748:	4a43      	ldr	r2, [pc, #268]	; (804b858 <posture_update+0x150>)
 804b74a:	68fb      	ldr	r3, [r7, #12]
 804b74c:	3306      	adds	r3, #6
 804b74e:	009b      	lsls	r3, r3, #2
 804b750:	4413      	add	r3, r2
 804b752:	3304      	adds	r3, #4
 804b754:	681a      	ldr	r2, [r3, #0]
 804b756:	4940      	ldr	r1, [pc, #256]	; (804b858 <posture_update+0x150>)
 804b758:	68fb      	ldr	r3, [r7, #12]
 804b75a:	3302      	adds	r3, #2
 804b75c:	009b      	lsls	r3, r3, #2
 804b75e:	440b      	add	r3, r1
 804b760:	3304      	adds	r3, #4
 804b762:	601a      	str	r2, [r3, #0]
    for (i = 0; i < 4; i++)
 804b764:	68fb      	ldr	r3, [r7, #12]
 804b766:	3301      	adds	r3, #1
 804b768:	60fb      	str	r3, [r7, #12]
 804b76a:	68fb      	ldr	r3, [r7, #12]
 804b76c:	2b03      	cmp	r3, #3
 804b76e:	ddeb      	ble.n	804b748 <posture_update+0x40>
    matrix_normalize(posture_loc.state, 4);
 804b770:	2104      	movs	r1, #4
 804b772:	483d      	ldr	r0, [pc, #244]	; (804b868 <posture_update+0x160>)
 804b774:	f7fe fd54 	bl	804a220 <matrix_normalize>
    }
    for (i = 0; i < 16; i++)
      posture_loc.variance_1[i] = variance_p[i];
    matrix_normalize(posture_loc.state, 4);     // data of rotation vector should be in 1~-1
  }
}
 804b778:	e06a      	b.n	804b850 <posture_update+0x148>
    if (data_type == SENSOR_TYPE_GYROSCOPE) {
 804b77a:	683b      	ldr	r3, [r7, #0]
 804b77c:	2b02      	cmp	r3, #2
 804b77e:	d10c      	bne.n	804b79a <posture_update+0x92>
      propagation(posture_loc.gyro, dt, posture_loc.state, variance_p,  // may be need update state_p to posture_loc.state
 804b780:	4b3a      	ldr	r3, [pc, #232]	; (804b86c <posture_update+0x164>)
 804b782:	9301      	str	r3, [sp, #4]
 804b784:	4b3a      	ldr	r3, [pc, #232]	; (804b870 <posture_update+0x168>)
 804b786:	9300      	str	r3, [sp, #0]
 804b788:	4b35      	ldr	r3, [pc, #212]	; (804b860 <posture_update+0x158>)
 804b78a:	4a3a      	ldr	r2, [pc, #232]	; (804b874 <posture_update+0x16c>)
 804b78c:	4936      	ldr	r1, [pc, #216]	; (804b868 <posture_update+0x160>)
 804b78e:	ed97 0a01 	vldr	s0, [r7, #4]
 804b792:	4839      	ldr	r0, [pc, #228]	; (804b878 <posture_update+0x170>)
 804b794:	f7ff f974 	bl	804aa80 <propagation>
 804b798:	e02a      	b.n	804b7f0 <posture_update+0xe8>
    } else if (data_type == SENSOR_TYPE_ACCELEROMETER) {
 804b79a:	683b      	ldr	r3, [r7, #0]
 804b79c:	2b00      	cmp	r3, #0
 804b79e:	d109      	bne.n	804b7b4 <posture_update+0xac>
      if (posture_loc.acc_correct)      // acc correct if static, may be don't need this condition
 804b7a0:	4b2d      	ldr	r3, [pc, #180]	; (804b858 <posture_update+0x150>)
 804b7a2:	685b      	ldr	r3, [r3, #4]
 804b7a4:	2b00      	cmp	r3, #0
 804b7a6:	d023      	beq.n	804b7f0 <posture_update+0xe8>
        acc_update(posture_loc.acc, posture_loc.state, variance_p);     // may be need update state_p to posture_loc.state
 804b7a8:	4a32      	ldr	r2, [pc, #200]	; (804b874 <posture_update+0x16c>)
 804b7aa:	492f      	ldr	r1, [pc, #188]	; (804b868 <posture_update+0x160>)
 804b7ac:	482b      	ldr	r0, [pc, #172]	; (804b85c <posture_update+0x154>)
 804b7ae:	f7ff fc79 	bl	804b0a4 <acc_update>
 804b7b2:	e01d      	b.n	804b7f0 <posture_update+0xe8>
    } else if (data_type == SENSOR_TYPE_MAGNETIC_FIELD) {
 804b7b4:	683b      	ldr	r3, [r7, #0]
 804b7b6:	2b01      	cmp	r3, #1
 804b7b8:	d11a      	bne.n	804b7f0 <posture_update+0xe8>
      posture_loc.mag_correct = 0;      // disable mag correction
 804b7ba:	4b27      	ldr	r3, [pc, #156]	; (804b858 <posture_update+0x150>)
 804b7bc:	2200      	movs	r2, #0
 804b7be:	609a      	str	r2, [r3, #8]
      if (posture_loc.mag_correct)      // mag correct if static and no interference
 804b7c0:	4b25      	ldr	r3, [pc, #148]	; (804b858 <posture_update+0x150>)
 804b7c2:	689b      	ldr	r3, [r3, #8]
 804b7c4:	2b00      	cmp	r3, #0
 804b7c6:	d013      	beq.n	804b7f0 <posture_update+0xe8>
            posture_loc.state[1] * posture_loc.state[3] -
 804b7c8:	4b23      	ldr	r3, [pc, #140]	; (804b858 <posture_update+0x150>)
 804b7ca:	ed93 7a04 	vldr	s14, [r3, #16]
 804b7ce:	4b22      	ldr	r3, [pc, #136]	; (804b858 <posture_update+0x150>)
 804b7d0:	edd3 7a06 	vldr	s15, [r3, #24]
 804b7d4:	ee27 7a27 	vmul.f32	s14, s14, s15
            posture_loc.state[0] * posture_loc.state[2];
 804b7d8:	4b1f      	ldr	r3, [pc, #124]	; (804b858 <posture_update+0x150>)
 804b7da:	edd3 6a03 	vldr	s13, [r3, #12]
 804b7de:	4b1e      	ldr	r3, [pc, #120]	; (804b858 <posture_update+0x150>)
 804b7e0:	edd3 7a05 	vldr	s15, [r3, #20]
 804b7e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
        singular_test_p =
 804b7e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 804b7ec:	edc7 7a02 	vstr	s15, [r7, #8]
    for (i = 0; i < 4; i++) {
 804b7f0:	2300      	movs	r3, #0
 804b7f2:	60fb      	str	r3, [r7, #12]
 804b7f4:	e010      	b.n	804b818 <posture_update+0x110>
      posture_loc.state_1[i] = posture_loc.state[i];
 804b7f6:	4a18      	ldr	r2, [pc, #96]	; (804b858 <posture_update+0x150>)
 804b7f8:	68fb      	ldr	r3, [r7, #12]
 804b7fa:	3302      	adds	r3, #2
 804b7fc:	009b      	lsls	r3, r3, #2
 804b7fe:	4413      	add	r3, r2
 804b800:	3304      	adds	r3, #4
 804b802:	681a      	ldr	r2, [r3, #0]
 804b804:	4914      	ldr	r1, [pc, #80]	; (804b858 <posture_update+0x150>)
 804b806:	68fb      	ldr	r3, [r7, #12]
 804b808:	3306      	adds	r3, #6
 804b80a:	009b      	lsls	r3, r3, #2
 804b80c:	440b      	add	r3, r1
 804b80e:	3304      	adds	r3, #4
 804b810:	601a      	str	r2, [r3, #0]
    for (i = 0; i < 4; i++) {
 804b812:	68fb      	ldr	r3, [r7, #12]
 804b814:	3301      	adds	r3, #1
 804b816:	60fb      	str	r3, [r7, #12]
 804b818:	68fb      	ldr	r3, [r7, #12]
 804b81a:	2b03      	cmp	r3, #3
 804b81c:	ddeb      	ble.n	804b7f6 <posture_update+0xee>
    for (i = 0; i < 16; i++)
 804b81e:	2300      	movs	r3, #0
 804b820:	60fb      	str	r3, [r7, #12]
 804b822:	e00e      	b.n	804b842 <posture_update+0x13a>
      posture_loc.variance_1[i] = variance_p[i];
 804b824:	4a13      	ldr	r2, [pc, #76]	; (804b874 <posture_update+0x16c>)
 804b826:	68fb      	ldr	r3, [r7, #12]
 804b828:	009b      	lsls	r3, r3, #2
 804b82a:	4413      	add	r3, r2
 804b82c:	681a      	ldr	r2, [r3, #0]
 804b82e:	490a      	ldr	r1, [pc, #40]	; (804b858 <posture_update+0x150>)
 804b830:	68fb      	ldr	r3, [r7, #12]
 804b832:	330a      	adds	r3, #10
 804b834:	009b      	lsls	r3, r3, #2
 804b836:	440b      	add	r3, r1
 804b838:	3304      	adds	r3, #4
 804b83a:	601a      	str	r2, [r3, #0]
    for (i = 0; i < 16; i++)
 804b83c:	68fb      	ldr	r3, [r7, #12]
 804b83e:	3301      	adds	r3, #1
 804b840:	60fb      	str	r3, [r7, #12]
 804b842:	68fb      	ldr	r3, [r7, #12]
 804b844:	2b0f      	cmp	r3, #15
 804b846:	dded      	ble.n	804b824 <posture_update+0x11c>
    matrix_normalize(posture_loc.state, 4);     // data of rotation vector should be in 1~-1
 804b848:	2104      	movs	r1, #4
 804b84a:	4807      	ldr	r0, [pc, #28]	; (804b868 <posture_update+0x160>)
 804b84c:	f7fe fce8 	bl	804a220 <matrix_normalize>
}
 804b850:	bf00      	nop
 804b852:	3710      	adds	r7, #16
 804b854:	46bd      	mov	sp, r7
 804b856:	bd80      	pop	{r7, pc}
 804b858:	200080bc 	.word	0x200080bc
 804b85c:	20008168 	.word	0x20008168
 804b860:	200080d8 	.word	0x200080d8
 804b864:	20008180 	.word	0x20008180
 804b868:	200080c8 	.word	0x200080c8
 804b86c:	20008128 	.word	0x20008128
 804b870:	200080e8 	.word	0x200080e8
 804b874:	200078b0 	.word	0x200078b0
 804b878:	20008174 	.word	0x20008174

0804b87c <posture>:

static int posture(float *input_data, float *rot_vec, float dt_s, int data_type)
{
 804b87c:	b580      	push	{r7, lr}
 804b87e:	b086      	sub	sp, #24
 804b880:	af00      	add	r7, sp, #0
 804b882:	60f8      	str	r0, [r7, #12]
 804b884:	60b9      	str	r1, [r7, #8]
 804b886:	ed87 0a01 	vstr	s0, [r7, #4]
 804b88a:	603a      	str	r2, [r7, #0]
  int ret = 0;
 804b88c:	2300      	movs	r3, #0
 804b88e:	617b      	str	r3, [r7, #20]

  if (dt_s <= 0 || dt_s > 1.0f) {
 804b890:	edd7 7a01 	vldr	s15, [r7, #4]
 804b894:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 804b898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 804b89c:	d908      	bls.n	804b8b0 <posture+0x34>
 804b89e:	edd7 7a01 	vldr	s15, [r7, #4]
 804b8a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 804b8a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 804b8aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 804b8ae:	dd05      	ble.n	804b8bc <posture+0x40>
    printf("time diff is not right!!!\r\n");
 804b8b0:	482c      	ldr	r0, [pc, #176]	; (804b964 <posture+0xe8>)
 804b8b2:	f015 f8fb 	bl	8060aac <puts>
    return -1;                  // dt error
 804b8b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 804b8ba:	e04e      	b.n	804b95a <posture+0xde>
  }
  ret = preprocess(input_data, data_type);
 804b8bc:	6839      	ldr	r1, [r7, #0]
 804b8be:	68f8      	ldr	r0, [r7, #12]
 804b8c0:	f7fe fe12 	bl	804a4e8 <preprocess>
 804b8c4:	6178      	str	r0, [r7, #20]
  if (ret < 0)
 804b8c6:	697b      	ldr	r3, [r7, #20]
 804b8c8:	2b00      	cmp	r3, #0
 804b8ca:	da01      	bge.n	804b8d0 <posture+0x54>
    return ret;
 804b8cc:	697b      	ldr	r3, [r7, #20]
 804b8ce:	e044      	b.n	804b95a <posture+0xde>

  posture_update(dt_s, data_type);
 804b8d0:	6838      	ldr	r0, [r7, #0]
 804b8d2:	ed97 0a01 	vldr	s0, [r7, #4]
 804b8d6:	f7ff ff17 	bl	804b708 <posture_update>

  // get rotation vector
  if (posture_loc.state[0] > 0) {
 804b8da:	4b23      	ldr	r3, [pc, #140]	; (804b968 <posture+0xec>)
 804b8dc:	edd3 7a03 	vldr	s15, [r3, #12]
 804b8e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 804b8e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 804b8e8:	dd1b      	ble.n	804b922 <posture+0xa6>
    rot_vec[0] = posture_loc.state[1];
 804b8ea:	4b1f      	ldr	r3, [pc, #124]	; (804b968 <posture+0xec>)
 804b8ec:	691a      	ldr	r2, [r3, #16]
 804b8ee:	68bb      	ldr	r3, [r7, #8]
 804b8f0:	601a      	str	r2, [r3, #0]
    rot_vec[1] = -posture_loc.state[2];
 804b8f2:	4b1d      	ldr	r3, [pc, #116]	; (804b968 <posture+0xec>)
 804b8f4:	edd3 7a05 	vldr	s15, [r3, #20]
 804b8f8:	68bb      	ldr	r3, [r7, #8]
 804b8fa:	3304      	adds	r3, #4
 804b8fc:	eef1 7a67 	vneg.f32	s15, s15
 804b900:	edc3 7a00 	vstr	s15, [r3]
    rot_vec[2] = -posture_loc.state[3];
 804b904:	4b18      	ldr	r3, [pc, #96]	; (804b968 <posture+0xec>)
 804b906:	edd3 7a06 	vldr	s15, [r3, #24]
 804b90a:	68bb      	ldr	r3, [r7, #8]
 804b90c:	3308      	adds	r3, #8
 804b90e:	eef1 7a67 	vneg.f32	s15, s15
 804b912:	edc3 7a00 	vstr	s15, [r3]
    rot_vec[3] = posture_loc.state[0];
 804b916:	68bb      	ldr	r3, [r7, #8]
 804b918:	330c      	adds	r3, #12
 804b91a:	4a13      	ldr	r2, [pc, #76]	; (804b968 <posture+0xec>)
 804b91c:	68d2      	ldr	r2, [r2, #12]
 804b91e:	601a      	str	r2, [r3, #0]
 804b920:	e01a      	b.n	804b958 <posture+0xdc>
  } else {
    rot_vec[0] = -posture_loc.state[1];
 804b922:	4b11      	ldr	r3, [pc, #68]	; (804b968 <posture+0xec>)
 804b924:	edd3 7a04 	vldr	s15, [r3, #16]
 804b928:	eef1 7a67 	vneg.f32	s15, s15
 804b92c:	68bb      	ldr	r3, [r7, #8]
 804b92e:	edc3 7a00 	vstr	s15, [r3]
    rot_vec[1] = posture_loc.state[2];
 804b932:	68bb      	ldr	r3, [r7, #8]
 804b934:	3304      	adds	r3, #4
 804b936:	4a0c      	ldr	r2, [pc, #48]	; (804b968 <posture+0xec>)
 804b938:	6952      	ldr	r2, [r2, #20]
 804b93a:	601a      	str	r2, [r3, #0]
    rot_vec[2] = posture_loc.state[3];
 804b93c:	68bb      	ldr	r3, [r7, #8]
 804b93e:	3308      	adds	r3, #8
 804b940:	4a09      	ldr	r2, [pc, #36]	; (804b968 <posture+0xec>)
 804b942:	6992      	ldr	r2, [r2, #24]
 804b944:	601a      	str	r2, [r3, #0]
    rot_vec[3] = -posture_loc.state[0];
 804b946:	4b08      	ldr	r3, [pc, #32]	; (804b968 <posture+0xec>)
 804b948:	edd3 7a03 	vldr	s15, [r3, #12]
 804b94c:	68bb      	ldr	r3, [r7, #8]
 804b94e:	330c      	adds	r3, #12
 804b950:	eef1 7a67 	vneg.f32	s15, s15
 804b954:	edc3 7a00 	vstr	s15, [r3]
  }

  return 0;
 804b958:	2300      	movs	r3, #0
}
 804b95a:	4618      	mov	r0, r3
 804b95c:	3718      	adds	r7, #24
 804b95e:	46bd      	mov	sp, r7
 804b960:	bd80      	pop	{r7, pc}
 804b962:	bf00      	nop
 804b964:	08065d48 	.word	0x08065d48
 804b968:	200080bc 	.word	0x200080bc

0804b96c <get_rot_mat>:

static void get_rot_mat(float *rot_vec, float *rot_mat)
{                               // rotation vector to rotation matrix
 804b96c:	b480      	push	{r7}
 804b96e:	b089      	sub	sp, #36	; 0x24
 804b970:	af00      	add	r7, sp, #0
 804b972:	6078      	str	r0, [r7, #4]
 804b974:	6039      	str	r1, [r7, #0]
  int i = 0;
 804b976:	2300      	movs	r3, #0
 804b978:	61fb      	str	r3, [r7, #28]

  float state[4] = { 0 };
 804b97a:	f107 030c 	add.w	r3, r7, #12
 804b97e:	2200      	movs	r2, #0
 804b980:	601a      	str	r2, [r3, #0]
 804b982:	605a      	str	r2, [r3, #4]
 804b984:	609a      	str	r2, [r3, #8]
 804b986:	60da      	str	r2, [r3, #12]

  state[0] = rot_vec[3];
 804b988:	687b      	ldr	r3, [r7, #4]
 804b98a:	68db      	ldr	r3, [r3, #12]
 804b98c:	60fb      	str	r3, [r7, #12]
  if (state[0] > 0) {
 804b98e:	edd7 7a03 	vldr	s15, [r7, #12]
 804b992:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 804b996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 804b99a:	dd13      	ble.n	804b9c4 <get_rot_mat+0x58>
    state[1] = rot_vec[0];
 804b99c:	687b      	ldr	r3, [r7, #4]
 804b99e:	681b      	ldr	r3, [r3, #0]
 804b9a0:	613b      	str	r3, [r7, #16]
    state[2] = -rot_vec[1];
 804b9a2:	687b      	ldr	r3, [r7, #4]
 804b9a4:	3304      	adds	r3, #4
 804b9a6:	edd3 7a00 	vldr	s15, [r3]
 804b9aa:	eef1 7a67 	vneg.f32	s15, s15
 804b9ae:	edc7 7a05 	vstr	s15, [r7, #20]
    state[3] = -rot_vec[2];
 804b9b2:	687b      	ldr	r3, [r7, #4]
 804b9b4:	3308      	adds	r3, #8
 804b9b6:	edd3 7a00 	vldr	s15, [r3]
 804b9ba:	eef1 7a67 	vneg.f32	s15, s15
 804b9be:	edc7 7a06 	vstr	s15, [r7, #24]
 804b9c2:	e00c      	b.n	804b9de <get_rot_mat+0x72>
  } else {
    state[1] = -rot_vec[0];
 804b9c4:	687b      	ldr	r3, [r7, #4]
 804b9c6:	edd3 7a00 	vldr	s15, [r3]
 804b9ca:	eef1 7a67 	vneg.f32	s15, s15
 804b9ce:	edc7 7a04 	vstr	s15, [r7, #16]
    state[2] = rot_vec[1];
 804b9d2:	687b      	ldr	r3, [r7, #4]
 804b9d4:	685b      	ldr	r3, [r3, #4]
 804b9d6:	617b      	str	r3, [r7, #20]
    state[3] = rot_vec[2];
 804b9d8:	687b      	ldr	r3, [r7, #4]
 804b9da:	689b      	ldr	r3, [r3, #8]
 804b9dc:	61bb      	str	r3, [r7, #24]
  }

  rot_mat[0] = (state[0] * state[0] + state[1] * state[1]
 804b9de:	ed97 7a03 	vldr	s14, [r7, #12]
 804b9e2:	edd7 7a03 	vldr	s15, [r7, #12]
 804b9e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 804b9ea:	edd7 6a04 	vldr	s13, [r7, #16]
 804b9ee:	edd7 7a04 	vldr	s15, [r7, #16]
 804b9f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 804b9f6:	ee37 7a27 	vadd.f32	s14, s14, s15
                - state[2] * state[2] - state[3] * state[3]);   // cos(theta)cos(psi)
 804b9fa:	edd7 6a05 	vldr	s13, [r7, #20]
 804b9fe:	edd7 7a05 	vldr	s15, [r7, #20]
 804ba02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 804ba06:	ee37 7a67 	vsub.f32	s14, s14, s15
 804ba0a:	edd7 6a06 	vldr	s13, [r7, #24]
 804ba0e:	edd7 7a06 	vldr	s15, [r7, #24]
 804ba12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 804ba16:	ee77 7a67 	vsub.f32	s15, s14, s15
  rot_mat[0] = (state[0] * state[0] + state[1] * state[1]
 804ba1a:	683b      	ldr	r3, [r7, #0]
 804ba1c:	edc3 7a00 	vstr	s15, [r3]
  rot_mat[1] = 2 * (state[1] * state[2] - state[0] * state[3]);
 804ba20:	ed97 7a04 	vldr	s14, [r7, #16]
 804ba24:	edd7 7a05 	vldr	s15, [r7, #20]
 804ba28:	ee27 7a27 	vmul.f32	s14, s14, s15
 804ba2c:	edd7 6a03 	vldr	s13, [r7, #12]
 804ba30:	edd7 7a06 	vldr	s15, [r7, #24]
 804ba34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 804ba38:	ee77 7a67 	vsub.f32	s15, s14, s15
 804ba3c:	683b      	ldr	r3, [r7, #0]
 804ba3e:	3304      	adds	r3, #4
 804ba40:	ee77 7aa7 	vadd.f32	s15, s15, s15
 804ba44:	edc3 7a00 	vstr	s15, [r3]
  rot_mat[2] = 2 * (state[1] * state[3] + state[0] * state[2]);
 804ba48:	ed97 7a04 	vldr	s14, [r7, #16]
 804ba4c:	edd7 7a06 	vldr	s15, [r7, #24]
 804ba50:	ee27 7a27 	vmul.f32	s14, s14, s15
 804ba54:	edd7 6a03 	vldr	s13, [r7, #12]
 804ba58:	edd7 7a05 	vldr	s15, [r7, #20]
 804ba5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 804ba60:	ee77 7a27 	vadd.f32	s15, s14, s15
 804ba64:	683b      	ldr	r3, [r7, #0]
 804ba66:	3308      	adds	r3, #8
 804ba68:	ee77 7aa7 	vadd.f32	s15, s15, s15
 804ba6c:	edc3 7a00 	vstr	s15, [r3]
  rot_mat[3] = 2 * (state[1] * state[2] + state[0] * state[3]); //  cos(theta)sin(psi)
 804ba70:	ed97 7a04 	vldr	s14, [r7, #16]
 804ba74:	edd7 7a05 	vldr	s15, [r7, #20]
 804ba78:	ee27 7a27 	vmul.f32	s14, s14, s15
 804ba7c:	edd7 6a03 	vldr	s13, [r7, #12]
 804ba80:	edd7 7a06 	vldr	s15, [r7, #24]
 804ba84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 804ba88:	ee77 7a27 	vadd.f32	s15, s14, s15
 804ba8c:	683b      	ldr	r3, [r7, #0]
 804ba8e:	330c      	adds	r3, #12
 804ba90:	ee77 7aa7 	vadd.f32	s15, s15, s15
 804ba94:	edc3 7a00 	vstr	s15, [r3]
  rot_mat[4] = (state[0] * state[0] - state[1] * state[1]
 804ba98:	ed97 7a03 	vldr	s14, [r7, #12]
 804ba9c:	edd7 7a03 	vldr	s15, [r7, #12]
 804baa0:	ee27 7a27 	vmul.f32	s14, s14, s15
 804baa4:	edd7 6a04 	vldr	s13, [r7, #16]
 804baa8:	edd7 7a04 	vldr	s15, [r7, #16]
 804baac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 804bab0:	ee37 7a67 	vsub.f32	s14, s14, s15
                + state[2] * state[2] - state[3] * state[3]);
 804bab4:	edd7 6a05 	vldr	s13, [r7, #20]
 804bab8:	edd7 7a05 	vldr	s15, [r7, #20]
 804babc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 804bac0:	ee37 7a27 	vadd.f32	s14, s14, s15
 804bac4:	edd7 6a06 	vldr	s13, [r7, #24]
 804bac8:	edd7 7a06 	vldr	s15, [r7, #24]
 804bacc:	ee66 7aa7 	vmul.f32	s15, s13, s15
  rot_mat[4] = (state[0] * state[0] - state[1] * state[1]
 804bad0:	683b      	ldr	r3, [r7, #0]
 804bad2:	3310      	adds	r3, #16
                + state[2] * state[2] - state[3] * state[3]);
 804bad4:	ee77 7a67 	vsub.f32	s15, s14, s15
  rot_mat[4] = (state[0] * state[0] - state[1] * state[1]
 804bad8:	edc3 7a00 	vstr	s15, [r3]
  rot_mat[5] = 2 * (state[2] * state[3] - state[0] * state[1]);
 804badc:	ed97 7a05 	vldr	s14, [r7, #20]
 804bae0:	edd7 7a06 	vldr	s15, [r7, #24]
 804bae4:	ee27 7a27 	vmul.f32	s14, s14, s15
 804bae8:	edd7 6a03 	vldr	s13, [r7, #12]
 804baec:	edd7 7a04 	vldr	s15, [r7, #16]
 804baf0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 804baf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 804baf8:	683b      	ldr	r3, [r7, #0]
 804bafa:	3314      	adds	r3, #20
 804bafc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 804bb00:	edc3 7a00 	vstr	s15, [r3]
  rot_mat[6] = 2 * (state[1] * state[3] - state[0] * state[2]); // -sin(theta)
 804bb04:	ed97 7a04 	vldr	s14, [r7, #16]
 804bb08:	edd7 7a06 	vldr	s15, [r7, #24]
 804bb0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 804bb10:	edd7 6a03 	vldr	s13, [r7, #12]
 804bb14:	edd7 7a05 	vldr	s15, [r7, #20]
 804bb18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 804bb1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 804bb20:	683b      	ldr	r3, [r7, #0]
 804bb22:	3318      	adds	r3, #24
 804bb24:	ee77 7aa7 	vadd.f32	s15, s15, s15
 804bb28:	edc3 7a00 	vstr	s15, [r3]
  rot_mat[7] = 2 * (state[0] * state[1] + state[2] * state[3]); //  cos(theta)sin(phi)
 804bb2c:	ed97 7a03 	vldr	s14, [r7, #12]
 804bb30:	edd7 7a04 	vldr	s15, [r7, #16]
 804bb34:	ee27 7a27 	vmul.f32	s14, s14, s15
 804bb38:	edd7 6a05 	vldr	s13, [r7, #20]
 804bb3c:	edd7 7a06 	vldr	s15, [r7, #24]
 804bb40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 804bb44:	ee77 7a27 	vadd.f32	s15, s14, s15
 804bb48:	683b      	ldr	r3, [r7, #0]
 804bb4a:	331c      	adds	r3, #28
 804bb4c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 804bb50:	edc3 7a00 	vstr	s15, [r3]
  rot_mat[8] = (state[0] * state[0] - state[1] * state[1]
 804bb54:	ed97 7a03 	vldr	s14, [r7, #12]
 804bb58:	edd7 7a03 	vldr	s15, [r7, #12]
 804bb5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 804bb60:	edd7 6a04 	vldr	s13, [r7, #16]
 804bb64:	edd7 7a04 	vldr	s15, [r7, #16]
 804bb68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 804bb6c:	ee37 7a67 	vsub.f32	s14, s14, s15
                - state[2] * state[2] + state[3] * state[3]);   // cos(theta)cos(phi)
 804bb70:	edd7 6a05 	vldr	s13, [r7, #20]
 804bb74:	edd7 7a05 	vldr	s15, [r7, #20]
 804bb78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 804bb7c:	ee37 7a67 	vsub.f32	s14, s14, s15
 804bb80:	edd7 6a06 	vldr	s13, [r7, #24]
 804bb84:	edd7 7a06 	vldr	s15, [r7, #24]
 804bb88:	ee66 7aa7 	vmul.f32	s15, s13, s15
  rot_mat[8] = (state[0] * state[0] - state[1] * state[1]
 804bb8c:	683b      	ldr	r3, [r7, #0]
 804bb8e:	3320      	adds	r3, #32
                - state[2] * state[2] + state[3] * state[3]);   // cos(theta)cos(phi)
 804bb90:	ee77 7a27 	vadd.f32	s15, s14, s15
  rot_mat[8] = (state[0] * state[0] - state[1] * state[1]
 804bb94:	edc3 7a00 	vstr	s15, [r3]

  // data of rotation matrix should be in 1~-1
  for (i = 0; i < 9; i++) {
 804bb98:	2300      	movs	r3, #0
 804bb9a:	61fb      	str	r3, [r7, #28]
 804bb9c:	e02a      	b.n	804bbf4 <get_rot_mat+0x288>
    if (rot_mat[i] > 1.0f)
 804bb9e:	69fb      	ldr	r3, [r7, #28]
 804bba0:	009b      	lsls	r3, r3, #2
 804bba2:	683a      	ldr	r2, [r7, #0]
 804bba4:	4413      	add	r3, r2
 804bba6:	edd3 7a00 	vldr	s15, [r3]
 804bbaa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 804bbae:	eef4 7ac7 	vcmpe.f32	s15, s14
 804bbb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 804bbb6:	dd07      	ble.n	804bbc8 <get_rot_mat+0x25c>
      rot_mat[i] = 1.0f;
 804bbb8:	69fb      	ldr	r3, [r7, #28]
 804bbba:	009b      	lsls	r3, r3, #2
 804bbbc:	683a      	ldr	r2, [r7, #0]
 804bbbe:	4413      	add	r3, r2
 804bbc0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 804bbc4:	601a      	str	r2, [r3, #0]
 804bbc6:	e012      	b.n	804bbee <get_rot_mat+0x282>
    else if (rot_mat[i] < -1.0f)
 804bbc8:	69fb      	ldr	r3, [r7, #28]
 804bbca:	009b      	lsls	r3, r3, #2
 804bbcc:	683a      	ldr	r2, [r7, #0]
 804bbce:	4413      	add	r3, r2
 804bbd0:	edd3 7a00 	vldr	s15, [r3]
 804bbd4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 804bbd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 804bbdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 804bbe0:	d505      	bpl.n	804bbee <get_rot_mat+0x282>
      rot_mat[i] = -1.0f;
 804bbe2:	69fb      	ldr	r3, [r7, #28]
 804bbe4:	009b      	lsls	r3, r3, #2
 804bbe6:	683a      	ldr	r2, [r7, #0]
 804bbe8:	4413      	add	r3, r2
 804bbea:	4a07      	ldr	r2, [pc, #28]	; (804bc08 <get_rot_mat+0x29c>)
 804bbec:	601a      	str	r2, [r3, #0]
  for (i = 0; i < 9; i++) {
 804bbee:	69fb      	ldr	r3, [r7, #28]
 804bbf0:	3301      	adds	r3, #1
 804bbf2:	61fb      	str	r3, [r7, #28]
 804bbf4:	69fb      	ldr	r3, [r7, #28]
 804bbf6:	2b08      	cmp	r3, #8
 804bbf8:	ddd1      	ble.n	804bb9e <get_rot_mat+0x232>
  }
}
 804bbfa:	bf00      	nop
 804bbfc:	bf00      	nop
 804bbfe:	3724      	adds	r7, #36	; 0x24
 804bc00:	46bd      	mov	sp, r7
 804bc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 804bc06:	4770      	bx	lr
 804bc08:	bf800000 	.word	0xbf800000

0804bc0c <get_rms>:
    vel_state_1[i] = vel_state[i];      //update (state)t-1
  }
}

static void get_rms(float *in, float *out_mean, float *out_rms)
{
 804bc0c:	b590      	push	{r4, r7, lr}
 804bc0e:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
 804bc12:	af00      	add	r7, sp, #0
 804bc14:	f107 030c 	add.w	r3, r7, #12
 804bc18:	6018      	str	r0, [r3, #0]
 804bc1a:	f107 0308 	add.w	r3, r7, #8
 804bc1e:	6019      	str	r1, [r3, #0]
 804bc20:	1d3b      	adds	r3, r7, #4
 804bc22:	601a      	str	r2, [r3, #0]
  static float gbuf[3][ALGO_ARRAY_SIZE] = { {0.0f} };
  float sum[3] = { 0 };
 804bc24:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 804bc28:	2200      	movs	r2, #0
 804bc2a:	601a      	str	r2, [r3, #0]
 804bc2c:	605a      	str	r2, [r3, #4]
 804bc2e:	609a      	str	r2, [r3, #8]
  float mean_rms[3] = { 0 };
 804bc30:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 804bc34:	2200      	movs	r2, #0
 804bc36:	601a      	str	r2, [r3, #0]
 804bc38:	605a      	str	r2, [r3, #4]
 804bc3a:	609a      	str	r2, [r3, #8]
  float sum_rms[3] = { 0 };
 804bc3c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 804bc40:	2200      	movs	r2, #0
 804bc42:	601a      	str	r2, [r3, #0]
 804bc44:	605a      	str	r2, [r3, #4]
 804bc46:	609a      	str	r2, [r3, #8]
  float tmp_window[3][ALGO_ARRAY_SIZE] = { {0.0f} };
 804bc48:	f107 0310 	add.w	r3, r7, #16
 804bc4c:	4618      	mov	r0, r3
 804bc4e:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
 804bc52:	461a      	mov	r2, r3
 804bc54:	2100      	movs	r1, #0
 804bc56:	f014 f9b1 	bl	805ffbc <memset>

  for (int i = 0; i < 3; i++) {
 804bc5a:	2300      	movs	r3, #0
 804bc5c:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 804bc60:	e0f4      	b.n	804be4c <get_rms+0x240>

    memcpy(tmp_window, gbuf, sizeof(gbuf));
 804bc62:	f107 0310 	add.w	r3, r7, #16
 804bc66:	4a7f      	ldr	r2, [pc, #508]	; (804be64 <get_rms+0x258>)
 804bc68:	4618      	mov	r0, r3
 804bc6a:	4611      	mov	r1, r2
 804bc6c:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
 804bc70:	461a      	mov	r2, r3
 804bc72:	f014 f995 	bl	805ffa0 <memcpy>
    memcpy(&gbuf[i][1], &tmp_window[i][0],
 804bc76:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 804bc7a:	2298      	movs	r2, #152	; 0x98
 804bc7c:	fb02 f303 	mul.w	r3, r2, r3
 804bc80:	3304      	adds	r3, #4
 804bc82:	4a78      	ldr	r2, [pc, #480]	; (804be64 <get_rms+0x258>)
 804bc84:	1898      	adds	r0, r3, r2
 804bc86:	f107 0210 	add.w	r2, r7, #16
 804bc8a:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 804bc8e:	2198      	movs	r1, #152	; 0x98
 804bc90:	fb01 f303 	mul.w	r3, r1, r3
 804bc94:	4413      	add	r3, r2
 804bc96:	2294      	movs	r2, #148	; 0x94
 804bc98:	4619      	mov	r1, r3
 804bc9a:	f014 f981 	bl	805ffa0 <memcpy>
           (ALGO_ARRAY_SIZE - 1) * sizeof(float));
    gbuf[i][0] = in[i];
 804bc9e:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 804bca2:	009b      	lsls	r3, r3, #2
 804bca4:	f107 020c 	add.w	r2, r7, #12
 804bca8:	6812      	ldr	r2, [r2, #0]
 804bcaa:	4413      	add	r3, r2
 804bcac:	681a      	ldr	r2, [r3, #0]
 804bcae:	496d      	ldr	r1, [pc, #436]	; (804be64 <get_rms+0x258>)
 804bcb0:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 804bcb4:	2098      	movs	r0, #152	; 0x98
 804bcb6:	fb00 f303 	mul.w	r3, r0, r3
 804bcba:	440b      	add	r3, r1
 804bcbc:	601a      	str	r2, [r3, #0]
    // TODO: simple moving average
    for (int k = 0; k < ALGO_ARRAY_SIZE; k++) {
 804bcbe:	2300      	movs	r3, #0
 804bcc0:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 804bcc4:	e025      	b.n	804bd12 <get_rms+0x106>
      sum[i] += gbuf[i][k];
 804bcc6:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 804bcca:	009b      	lsls	r3, r3, #2
 804bccc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 804bcd0:	4413      	add	r3, r2
 804bcd2:	3b18      	subs	r3, #24
 804bcd4:	ed93 7a00 	vldr	s14, [r3]
 804bcd8:	4962      	ldr	r1, [pc, #392]	; (804be64 <get_rms+0x258>)
 804bcda:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 804bcde:	2226      	movs	r2, #38	; 0x26
 804bce0:	fb02 f203 	mul.w	r2, r2, r3
 804bce4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 804bce8:	4413      	add	r3, r2
 804bcea:	009b      	lsls	r3, r3, #2
 804bcec:	440b      	add	r3, r1
 804bcee:	edd3 7a00 	vldr	s15, [r3]
 804bcf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 804bcf6:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 804bcfa:	009b      	lsls	r3, r3, #2
 804bcfc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 804bd00:	4413      	add	r3, r2
 804bd02:	3b18      	subs	r3, #24
 804bd04:	edc3 7a00 	vstr	s15, [r3]
    for (int k = 0; k < ALGO_ARRAY_SIZE; k++) {
 804bd08:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 804bd0c:	3301      	adds	r3, #1
 804bd0e:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 804bd12:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 804bd16:	2b25      	cmp	r3, #37	; 0x25
 804bd18:	ddd5      	ble.n	804bcc6 <get_rms+0xba>
    }

    mean_rms[i] = sum[i] / ALGO_ARRAY_SIZE;
 804bd1a:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 804bd1e:	009b      	lsls	r3, r3, #2
 804bd20:	f507 7202 	add.w	r2, r7, #520	; 0x208
 804bd24:	4413      	add	r3, r2
 804bd26:	3b18      	subs	r3, #24
 804bd28:	ed93 7a00 	vldr	s14, [r3]
 804bd2c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 804be68 <get_rms+0x25c>
 804bd30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 804bd34:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 804bd38:	009b      	lsls	r3, r3, #2
 804bd3a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 804bd3e:	4413      	add	r3, r2
 804bd40:	3b24      	subs	r3, #36	; 0x24
 804bd42:	edc3 7a00 	vstr	s15, [r3]

    for (int m = 0; m < ALGO_ARRAY_SIZE; m++) {
 804bd46:	2300      	movs	r3, #0
 804bd48:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 804bd4c:	e04a      	b.n	804bde4 <get_rms+0x1d8>
      sum_rms[i] += ((gbuf[i][m] - mean_rms[i])
 804bd4e:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 804bd52:	009b      	lsls	r3, r3, #2
 804bd54:	f507 7202 	add.w	r2, r7, #520	; 0x208
 804bd58:	4413      	add	r3, r2
 804bd5a:	3b30      	subs	r3, #48	; 0x30
 804bd5c:	ed93 7a00 	vldr	s14, [r3]
 804bd60:	4940      	ldr	r1, [pc, #256]	; (804be64 <get_rms+0x258>)
 804bd62:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 804bd66:	2226      	movs	r2, #38	; 0x26
 804bd68:	fb02 f203 	mul.w	r2, r2, r3
 804bd6c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 804bd70:	4413      	add	r3, r2
 804bd72:	009b      	lsls	r3, r3, #2
 804bd74:	440b      	add	r3, r1
 804bd76:	edd3 6a00 	vldr	s13, [r3]
 804bd7a:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 804bd7e:	009b      	lsls	r3, r3, #2
 804bd80:	f507 7202 	add.w	r2, r7, #520	; 0x208
 804bd84:	4413      	add	r3, r2
 804bd86:	3b24      	subs	r3, #36	; 0x24
 804bd88:	edd3 7a00 	vldr	s15, [r3]
 804bd8c:	ee76 6ae7 	vsub.f32	s13, s13, s15
                     * (gbuf[i][m] - mean_rms[i]));
 804bd90:	4934      	ldr	r1, [pc, #208]	; (804be64 <get_rms+0x258>)
 804bd92:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 804bd96:	2226      	movs	r2, #38	; 0x26
 804bd98:	fb02 f203 	mul.w	r2, r2, r3
 804bd9c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 804bda0:	4413      	add	r3, r2
 804bda2:	009b      	lsls	r3, r3, #2
 804bda4:	440b      	add	r3, r1
 804bda6:	ed93 6a00 	vldr	s12, [r3]
 804bdaa:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 804bdae:	009b      	lsls	r3, r3, #2
 804bdb0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 804bdb4:	4413      	add	r3, r2
 804bdb6:	3b24      	subs	r3, #36	; 0x24
 804bdb8:	edd3 7a00 	vldr	s15, [r3]
 804bdbc:	ee76 7a67 	vsub.f32	s15, s12, s15
 804bdc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
      sum_rms[i] += ((gbuf[i][m] - mean_rms[i])
 804bdc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 804bdc8:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 804bdcc:	009b      	lsls	r3, r3, #2
 804bdce:	f507 7202 	add.w	r2, r7, #520	; 0x208
 804bdd2:	4413      	add	r3, r2
 804bdd4:	3b30      	subs	r3, #48	; 0x30
 804bdd6:	edc3 7a00 	vstr	s15, [r3]
    for (int m = 0; m < ALGO_ARRAY_SIZE; m++) {
 804bdda:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 804bdde:	3301      	adds	r3, #1
 804bde0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 804bde4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 804bde8:	2b25      	cmp	r3, #37	; 0x25
 804bdea:	ddb0      	ble.n	804bd4e <get_rms+0x142>
    }
    out_rms[i] = sqrtf(sum_rms[i] / ALGO_ARRAY_SIZE);
 804bdec:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 804bdf0:	009b      	lsls	r3, r3, #2
 804bdf2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 804bdf6:	4413      	add	r3, r2
 804bdf8:	3b30      	subs	r3, #48	; 0x30
 804bdfa:	edd3 7a00 	vldr	s15, [r3]
 804bdfe:	eddf 6a1a 	vldr	s13, [pc, #104]	; 804be68 <get_rms+0x25c>
 804be02:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 804be06:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 804be0a:	009b      	lsls	r3, r3, #2
 804be0c:	1d3a      	adds	r2, r7, #4
 804be0e:	6812      	ldr	r2, [r2, #0]
 804be10:	18d4      	adds	r4, r2, r3
 804be12:	eeb0 0a47 	vmov.f32	s0, s14
 804be16:	f016 ffed 	bl	8062df4 <sqrtf>
 804be1a:	eef0 7a40 	vmov.f32	s15, s0
 804be1e:	edc4 7a00 	vstr	s15, [r4]
    out_mean[i] = mean_rms[i];
 804be22:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 804be26:	009b      	lsls	r3, r3, #2
 804be28:	f107 0208 	add.w	r2, r7, #8
 804be2c:	6812      	ldr	r2, [r2, #0]
 804be2e:	4413      	add	r3, r2
 804be30:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 804be34:	0092      	lsls	r2, r2, #2
 804be36:	f507 7102 	add.w	r1, r7, #520	; 0x208
 804be3a:	440a      	add	r2, r1
 804be3c:	3a24      	subs	r2, #36	; 0x24
 804be3e:	6812      	ldr	r2, [r2, #0]
 804be40:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < 3; i++) {
 804be42:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 804be46:	3301      	adds	r3, #1
 804be48:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 804be4c:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 804be50:	2b02      	cmp	r3, #2
 804be52:	f77f af06 	ble.w	804bc62 <get_rms+0x56>
  }
}
 804be56:	bf00      	nop
 804be58:	bf00      	nop
 804be5a:	f507 7703 	add.w	r7, r7, #524	; 0x20c
 804be5e:	46bd      	mov	sp, r7
 804be60:	bd90      	pop	{r4, r7, pc}
 804be62:	bf00      	nop
 804be64:	200081d0 	.word	0x200081d0
 804be68:	42180000 	.word	0x42180000
 804be6c:	00000000 	.word	0x00000000

0804be70 <accLowPassFilter>:

  return ret;
}

void accLowPassFilter(float *raw, float *filtered)
{
 804be70:	b5b0      	push	{r4, r5, r7, lr}
 804be72:	b090      	sub	sp, #64	; 0x40
 804be74:	af00      	add	r7, sp, #0
 804be76:	6078      	str	r0, [r7, #4]
 804be78:	6039      	str	r1, [r7, #0]
  //25Hz sample rate with 1Hz/2Hz cutoff freq.
  //Denominator
  //const double a0 = 1;
  const double a1 = -0.59062581160898153;
 804be7a:	a34d      	add	r3, pc, #308	; (adr r3, 804bfb0 <accLowPassFilter+0x140>)
 804be7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 804be80:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  //Numerator
  const double b0 = 0.20468709419550918;
 804be84:	a34c      	add	r3, pc, #304	; (adr r3, 804bfb8 <accLowPassFilter+0x148>)
 804be86:	e9d3 2300 	ldrd	r2, r3, [r3]
 804be8a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  const double b1 = 0.20468709419550918;
 804be8e:	a34a      	add	r3, pc, #296	; (adr r3, 804bfb8 <accLowPassFilter+0x148>)
 804be90:	e9d3 2300 	ldrd	r2, r3, [r3]
 804be94:	e9c7 2308 	strd	r2, r3, [r7, #32]

  static double x_1[3] = { 0 };
  static double y_1[3] = { 0 };

  double filter_double[3] = { 0 };
 804be98:	f107 0308 	add.w	r3, r7, #8
 804be9c:	2200      	movs	r2, #0
 804be9e:	601a      	str	r2, [r3, #0]
 804bea0:	605a      	str	r2, [r3, #4]
 804bea2:	609a      	str	r2, [r3, #8]
 804bea4:	60da      	str	r2, [r3, #12]
 804bea6:	611a      	str	r2, [r3, #16]
 804bea8:	615a      	str	r2, [r3, #20]

  for (int i = 0; i < 3; i++) {
 804beaa:	2300      	movs	r3, #0
 804beac:	63fb      	str	r3, [r7, #60]	; 0x3c
 804beae:	e070      	b.n	804bf92 <accLowPassFilter+0x122>
    filter_double[i] = b0 * (double)raw[i] + b1 * x_1[i] - a1 * y_1[i];
 804beb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 804beb2:	009b      	lsls	r3, r3, #2
 804beb4:	687a      	ldr	r2, [r7, #4]
 804beb6:	4413      	add	r3, r2
 804beb8:	681b      	ldr	r3, [r3, #0]
 804beba:	4618      	mov	r0, r3
 804bebc:	f7f4 fb44 	bl	8040548 <__aeabi_f2d>
 804bec0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 804bec4:	f7f4 fb98 	bl	80405f8 <__aeabi_dmul>
 804bec8:	4602      	mov	r2, r0
 804beca:	460b      	mov	r3, r1
 804becc:	4614      	mov	r4, r2
 804bece:	461d      	mov	r5, r3
 804bed0:	4a35      	ldr	r2, [pc, #212]	; (804bfa8 <accLowPassFilter+0x138>)
 804bed2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 804bed4:	00db      	lsls	r3, r3, #3
 804bed6:	4413      	add	r3, r2
 804bed8:	e9d3 0100 	ldrd	r0, r1, [r3]
 804bedc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 804bee0:	f7f4 fb8a 	bl	80405f8 <__aeabi_dmul>
 804bee4:	4602      	mov	r2, r0
 804bee6:	460b      	mov	r3, r1
 804bee8:	4620      	mov	r0, r4
 804beea:	4629      	mov	r1, r5
 804beec:	f7f4 f9ce 	bl	804028c <__adddf3>
 804bef0:	4602      	mov	r2, r0
 804bef2:	460b      	mov	r3, r1
 804bef4:	4614      	mov	r4, r2
 804bef6:	461d      	mov	r5, r3
 804bef8:	4a2c      	ldr	r2, [pc, #176]	; (804bfac <accLowPassFilter+0x13c>)
 804befa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 804befc:	00db      	lsls	r3, r3, #3
 804befe:	4413      	add	r3, r2
 804bf00:	e9d3 0100 	ldrd	r0, r1, [r3]
 804bf04:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 804bf08:	f7f4 fb76 	bl	80405f8 <__aeabi_dmul>
 804bf0c:	4602      	mov	r2, r0
 804bf0e:	460b      	mov	r3, r1
 804bf10:	4620      	mov	r0, r4
 804bf12:	4629      	mov	r1, r5
 804bf14:	f7f4 f9b8 	bl	8040288 <__aeabi_dsub>
 804bf18:	4602      	mov	r2, r0
 804bf1a:	460b      	mov	r3, r1
 804bf1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 804bf1e:	00c9      	lsls	r1, r1, #3
 804bf20:	f107 0040 	add.w	r0, r7, #64	; 0x40
 804bf24:	4401      	add	r1, r0
 804bf26:	3938      	subs	r1, #56	; 0x38
 804bf28:	e9c1 2300 	strd	r2, r3, [r1]

    x_1[i] = (double)raw[i];
 804bf2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 804bf2e:	009b      	lsls	r3, r3, #2
 804bf30:	687a      	ldr	r2, [r7, #4]
 804bf32:	4413      	add	r3, r2
 804bf34:	681b      	ldr	r3, [r3, #0]
 804bf36:	4618      	mov	r0, r3
 804bf38:	f7f4 fb06 	bl	8040548 <__aeabi_f2d>
 804bf3c:	4602      	mov	r2, r0
 804bf3e:	460b      	mov	r3, r1
 804bf40:	4819      	ldr	r0, [pc, #100]	; (804bfa8 <accLowPassFilter+0x138>)
 804bf42:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 804bf44:	00c9      	lsls	r1, r1, #3
 804bf46:	4401      	add	r1, r0
 804bf48:	e9c1 2300 	strd	r2, r3, [r1]
    y_1[i] = filter_double[i];
 804bf4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 804bf4e:	00db      	lsls	r3, r3, #3
 804bf50:	f107 0240 	add.w	r2, r7, #64	; 0x40
 804bf54:	4413      	add	r3, r2
 804bf56:	3b38      	subs	r3, #56	; 0x38
 804bf58:	e9d3 2300 	ldrd	r2, r3, [r3]
 804bf5c:	4813      	ldr	r0, [pc, #76]	; (804bfac <accLowPassFilter+0x13c>)
 804bf5e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 804bf60:	00c9      	lsls	r1, r1, #3
 804bf62:	4401      	add	r1, r0
 804bf64:	e9c1 2300 	strd	r2, r3, [r1]

    filtered[i] = (float)filter_double[i];
 804bf68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 804bf6a:	00db      	lsls	r3, r3, #3
 804bf6c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 804bf70:	4413      	add	r3, r2
 804bf72:	3b38      	subs	r3, #56	; 0x38
 804bf74:	e9d3 2300 	ldrd	r2, r3, [r3]
 804bf78:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 804bf7a:	0089      	lsls	r1, r1, #2
 804bf7c:	6838      	ldr	r0, [r7, #0]
 804bf7e:	1844      	adds	r4, r0, r1
 804bf80:	4610      	mov	r0, r2
 804bf82:	4619      	mov	r1, r3
 804bf84:	f7f4 fe30 	bl	8040be8 <__aeabi_d2f>
 804bf88:	4603      	mov	r3, r0
 804bf8a:	6023      	str	r3, [r4, #0]
  for (int i = 0; i < 3; i++) {
 804bf8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 804bf8e:	3301      	adds	r3, #1
 804bf90:	63fb      	str	r3, [r7, #60]	; 0x3c
 804bf92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 804bf94:	2b02      	cmp	r3, #2
 804bf96:	dd8b      	ble.n	804beb0 <accLowPassFilter+0x40>
  }
}
 804bf98:	bf00      	nop
 804bf9a:	bf00      	nop
 804bf9c:	3740      	adds	r7, #64	; 0x40
 804bf9e:	46bd      	mov	sp, r7
 804bfa0:	bdb0      	pop	{r4, r5, r7, pc}
 804bfa2:	bf00      	nop
 804bfa4:	f3af 8000 	nop.w
 804bfa8:	20008398 	.word	0x20008398
 804bfac:	200083b0 	.word	0x200083b0
 804bfb0:	1a2116cc 	.word	0x1a2116cc
 804bfb4:	bfe2e668 	.word	0xbfe2e668
 804bfb8:	cbbdd266 	.word	0xcbbdd266
 804bfbc:	3fca332f 	.word	0x3fca332f

0804bfc0 <gyroLowPassFilter>:

static void gyroLowPassFilter(float *raw, float *filtered)
{
 804bfc0:	b5b0      	push	{r4, r5, r7, lr}
 804bfc2:	b090      	sub	sp, #64	; 0x40
 804bfc4:	af00      	add	r7, sp, #0
 804bfc6:	6078      	str	r0, [r7, #4]
 804bfc8:	6039      	str	r1, [r7, #0]
  //25Hz sample rate with 1Hz/3Hz cutoff freq.
  //Denominator
  //const double a0 = 1;
  const double a1 = -0.43177323588356381;
 804bfca:	a34d      	add	r3, pc, #308	; (adr r3, 804c100 <gyroLowPassFilter+0x140>)
 804bfcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 804bfd0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  //Numerator
  const double b0 = 0.28411338205821812;
 804bfd4:	a34c      	add	r3, pc, #304	; (adr r3, 804c108 <gyroLowPassFilter+0x148>)
 804bfd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 804bfda:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  const double b1 = 0.28411338205821812;
 804bfde:	a34a      	add	r3, pc, #296	; (adr r3, 804c108 <gyroLowPassFilter+0x148>)
 804bfe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 804bfe4:	e9c7 2308 	strd	r2, r3, [r7, #32]

  static double x_1[3] = { 0 };
  static double y_1[3] = { 0 };

  double filter_double[3] = { 0 };
 804bfe8:	f107 0308 	add.w	r3, r7, #8
 804bfec:	2200      	movs	r2, #0
 804bfee:	601a      	str	r2, [r3, #0]
 804bff0:	605a      	str	r2, [r3, #4]
 804bff2:	609a      	str	r2, [r3, #8]
 804bff4:	60da      	str	r2, [r3, #12]
 804bff6:	611a      	str	r2, [r3, #16]
 804bff8:	615a      	str	r2, [r3, #20]

  for (int i = 0; i < 3; i++) {
 804bffa:	2300      	movs	r3, #0
 804bffc:	63fb      	str	r3, [r7, #60]	; 0x3c
 804bffe:	e070      	b.n	804c0e2 <gyroLowPassFilter+0x122>
    filter_double[i] = b0 * (double)raw[i] + b1 * x_1[i] - a1 * y_1[i];
 804c000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 804c002:	009b      	lsls	r3, r3, #2
 804c004:	687a      	ldr	r2, [r7, #4]
 804c006:	4413      	add	r3, r2
 804c008:	681b      	ldr	r3, [r3, #0]
 804c00a:	4618      	mov	r0, r3
 804c00c:	f7f4 fa9c 	bl	8040548 <__aeabi_f2d>
 804c010:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 804c014:	f7f4 faf0 	bl	80405f8 <__aeabi_dmul>
 804c018:	4602      	mov	r2, r0
 804c01a:	460b      	mov	r3, r1
 804c01c:	4614      	mov	r4, r2
 804c01e:	461d      	mov	r5, r3
 804c020:	4a35      	ldr	r2, [pc, #212]	; (804c0f8 <gyroLowPassFilter+0x138>)
 804c022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 804c024:	00db      	lsls	r3, r3, #3
 804c026:	4413      	add	r3, r2
 804c028:	e9d3 0100 	ldrd	r0, r1, [r3]
 804c02c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 804c030:	f7f4 fae2 	bl	80405f8 <__aeabi_dmul>
 804c034:	4602      	mov	r2, r0
 804c036:	460b      	mov	r3, r1
 804c038:	4620      	mov	r0, r4
 804c03a:	4629      	mov	r1, r5
 804c03c:	f7f4 f926 	bl	804028c <__adddf3>
 804c040:	4602      	mov	r2, r0
 804c042:	460b      	mov	r3, r1
 804c044:	4614      	mov	r4, r2
 804c046:	461d      	mov	r5, r3
 804c048:	4a2c      	ldr	r2, [pc, #176]	; (804c0fc <gyroLowPassFilter+0x13c>)
 804c04a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 804c04c:	00db      	lsls	r3, r3, #3
 804c04e:	4413      	add	r3, r2
 804c050:	e9d3 0100 	ldrd	r0, r1, [r3]
 804c054:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 804c058:	f7f4 face 	bl	80405f8 <__aeabi_dmul>
 804c05c:	4602      	mov	r2, r0
 804c05e:	460b      	mov	r3, r1
 804c060:	4620      	mov	r0, r4
 804c062:	4629      	mov	r1, r5
 804c064:	f7f4 f910 	bl	8040288 <__aeabi_dsub>
 804c068:	4602      	mov	r2, r0
 804c06a:	460b      	mov	r3, r1
 804c06c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 804c06e:	00c9      	lsls	r1, r1, #3
 804c070:	f107 0040 	add.w	r0, r7, #64	; 0x40
 804c074:	4401      	add	r1, r0
 804c076:	3938      	subs	r1, #56	; 0x38
 804c078:	e9c1 2300 	strd	r2, r3, [r1]

    x_1[i] = (double)raw[i];
 804c07c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 804c07e:	009b      	lsls	r3, r3, #2
 804c080:	687a      	ldr	r2, [r7, #4]
 804c082:	4413      	add	r3, r2
 804c084:	681b      	ldr	r3, [r3, #0]
 804c086:	4618      	mov	r0, r3
 804c088:	f7f4 fa5e 	bl	8040548 <__aeabi_f2d>
 804c08c:	4602      	mov	r2, r0
 804c08e:	460b      	mov	r3, r1
 804c090:	4819      	ldr	r0, [pc, #100]	; (804c0f8 <gyroLowPassFilter+0x138>)
 804c092:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 804c094:	00c9      	lsls	r1, r1, #3
 804c096:	4401      	add	r1, r0
 804c098:	e9c1 2300 	strd	r2, r3, [r1]
    y_1[i] = filter_double[i];
 804c09c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 804c09e:	00db      	lsls	r3, r3, #3
 804c0a0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 804c0a4:	4413      	add	r3, r2
 804c0a6:	3b38      	subs	r3, #56	; 0x38
 804c0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 804c0ac:	4813      	ldr	r0, [pc, #76]	; (804c0fc <gyroLowPassFilter+0x13c>)
 804c0ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 804c0b0:	00c9      	lsls	r1, r1, #3
 804c0b2:	4401      	add	r1, r0
 804c0b4:	e9c1 2300 	strd	r2, r3, [r1]

    filtered[i] = (float)filter_double[i];
 804c0b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 804c0ba:	00db      	lsls	r3, r3, #3
 804c0bc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 804c0c0:	4413      	add	r3, r2
 804c0c2:	3b38      	subs	r3, #56	; 0x38
 804c0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 804c0c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 804c0ca:	0089      	lsls	r1, r1, #2
 804c0cc:	6838      	ldr	r0, [r7, #0]
 804c0ce:	1844      	adds	r4, r0, r1
 804c0d0:	4610      	mov	r0, r2
 804c0d2:	4619      	mov	r1, r3
 804c0d4:	f7f4 fd88 	bl	8040be8 <__aeabi_d2f>
 804c0d8:	4603      	mov	r3, r0
 804c0da:	6023      	str	r3, [r4, #0]
  for (int i = 0; i < 3; i++) {
 804c0dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 804c0de:	3301      	adds	r3, #1
 804c0e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 804c0e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 804c0e4:	2b02      	cmp	r3, #2
 804c0e6:	dd8b      	ble.n	804c000 <gyroLowPassFilter+0x40>
  }
}
 804c0e8:	bf00      	nop
 804c0ea:	bf00      	nop
 804c0ec:	3740      	adds	r7, #64	; 0x40
 804c0ee:	46bd      	mov	sp, r7
 804c0f0:	bdb0      	pop	{r4, r5, r7, pc}
 804c0f2:	bf00      	nop
 804c0f4:	f3af 8000 	nop.w
 804c0f8:	200083c8 	.word	0x200083c8
 804c0fc:	200083e0 	.word	0x200083e0
 804c100:	35da1cad 	.word	0x35da1cad
 804c104:	bfdba22c 	.word	0xbfdba22c
 804c108:	e512f1aa 	.word	0xe512f1aa
 804c10c:	3fd22ee9 	.word	0x3fd22ee9

0804c110 <rot_v_gyro_autocal>:

static int rot_v_gyro_autocal(float *in, float *bias, float *calibrated)
{
 804c110:	b580      	push	{r7, lr}
 804c112:	b094      	sub	sp, #80	; 0x50
 804c114:	af00      	add	r7, sp, #0
 804c116:	60f8      	str	r0, [r7, #12]
 804c118:	60b9      	str	r1, [r7, #8]
 804c11a:	607a      	str	r2, [r7, #4]
  float g_lpf_out_dps[3] = { 0.0f };
 804c11c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 804c120:	2200      	movs	r2, #0
 804c122:	601a      	str	r2, [r3, #0]
 804c124:	605a      	str	r2, [r3, #4]
 804c126:	609a      	str	r2, [r3, #8]
  float threeHz_gyro_mean[3] = { 0.0f }, threeHz_gyro_rms[3] = {
 804c128:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 804c12c:	2200      	movs	r2, #0
 804c12e:	601a      	str	r2, [r3, #0]
 804c130:	605a      	str	r2, [r3, #4]
 804c132:	609a      	str	r2, [r3, #8]
 804c134:	f107 0320 	add.w	r3, r7, #32
 804c138:	2200      	movs	r2, #0
 804c13a:	601a      	str	r2, [r3, #0]
 804c13c:	605a      	str	r2, [r3, #4]
 804c13e:	609a      	str	r2, [r3, #8]
  0.0f};
  int calibration_success = 0;
 804c140:	2300      	movs	r3, #0
 804c142:	64fb      	str	r3, [r7, #76]	; 0x4c
  static unsigned int gyro_static_counter = 0;

  float in_dps[3] = { in[0] * RAD2DEG, in[1] * RAD2DEG, in[2] * RAD2DEG };
 804c144:	68fb      	ldr	r3, [r7, #12]
 804c146:	edd3 7a00 	vldr	s15, [r3]
 804c14a:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 804c2fc <rot_v_gyro_autocal+0x1ec>
 804c14e:	ee67 7a87 	vmul.f32	s15, s15, s14
 804c152:	edc7 7a05 	vstr	s15, [r7, #20]
 804c156:	68fb      	ldr	r3, [r7, #12]
 804c158:	3304      	adds	r3, #4
 804c15a:	edd3 7a00 	vldr	s15, [r3]
 804c15e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 804c2fc <rot_v_gyro_autocal+0x1ec>
 804c162:	ee67 7a87 	vmul.f32	s15, s15, s14
 804c166:	edc7 7a06 	vstr	s15, [r7, #24]
 804c16a:	68fb      	ldr	r3, [r7, #12]
 804c16c:	3308      	adds	r3, #8
 804c16e:	edd3 7a00 	vldr	s15, [r3]
 804c172:	ed9f 7a62 	vldr	s14, [pc, #392]	; 804c2fc <rot_v_gyro_autocal+0x1ec>
 804c176:	ee67 7a87 	vmul.f32	s15, s15, s14
 804c17a:	edc7 7a07 	vstr	s15, [r7, #28]

  gyroLowPassFilter(in_dps, g_lpf_out_dps);
 804c17e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 804c182:	f107 0314 	add.w	r3, r7, #20
 804c186:	4611      	mov	r1, r2
 804c188:	4618      	mov	r0, r3
 804c18a:	f7ff ff19 	bl	804bfc0 <gyroLowPassFilter>

  get_rms(g_lpf_out_dps, threeHz_gyro_mean, threeHz_gyro_rms);
 804c18e:	f107 0220 	add.w	r2, r7, #32
 804c192:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 804c196:	f107 0338 	add.w	r3, r7, #56	; 0x38
 804c19a:	4618      	mov	r0, r3
 804c19c:	f7ff fd36 	bl	804bc0c <get_rms>

  if (threeHz_gyro_rms[0] < PSD_STDEV &&        //dps-rms @ 0.014*sqrt(3)
 804c1a0:	edd7 7a08 	vldr	s15, [r7, #32]
 804c1a4:	ed9f 7a56 	vldr	s14, [pc, #344]	; 804c300 <rot_v_gyro_autocal+0x1f0>
 804c1a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 804c1ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 804c1b0:	d559      	bpl.n	804c266 <rot_v_gyro_autocal+0x156>
      threeHz_gyro_rms[1] < PSD_STDEV && threeHz_gyro_rms[2] < PSD_STDEV && fabs(threeHz_gyro_rms[0]) < 20 &&   // 20dps absolute
 804c1b2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
  if (threeHz_gyro_rms[0] < PSD_STDEV &&        //dps-rms @ 0.014*sqrt(3)
 804c1b6:	ed9f 7a52 	vldr	s14, [pc, #328]	; 804c300 <rot_v_gyro_autocal+0x1f0>
 804c1ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 804c1be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 804c1c2:	d550      	bpl.n	804c266 <rot_v_gyro_autocal+0x156>
      threeHz_gyro_rms[1] < PSD_STDEV && threeHz_gyro_rms[2] < PSD_STDEV && fabs(threeHz_gyro_rms[0]) < 20 &&   // 20dps absolute
 804c1c4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 804c1c8:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 804c300 <rot_v_gyro_autocal+0x1f0>
 804c1cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 804c1d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 804c1d4:	d547      	bpl.n	804c266 <rot_v_gyro_autocal+0x156>
 804c1d6:	edd7 7a08 	vldr	s15, [r7, #32]
 804c1da:	eef0 7ae7 	vabs.f32	s15, s15
 804c1de:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 804c1e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 804c1e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 804c1ea:	d53c      	bpl.n	804c266 <rot_v_gyro_autocal+0x156>
      fabs(threeHz_gyro_rms[1]) < 20 && fabs(threeHz_gyro_rms[2]) < 20) {
 804c1ec:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 804c1f0:	eef0 7ae7 	vabs.f32	s15, s15
      threeHz_gyro_rms[1] < PSD_STDEV && threeHz_gyro_rms[2] < PSD_STDEV && fabs(threeHz_gyro_rms[0]) < 20 &&   // 20dps absolute
 804c1f4:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 804c1f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 804c1fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 804c200:	d531      	bpl.n	804c266 <rot_v_gyro_autocal+0x156>
      fabs(threeHz_gyro_rms[1]) < 20 && fabs(threeHz_gyro_rms[2]) < 20) {
 804c202:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 804c206:	eef0 7ae7 	vabs.f32	s15, s15
 804c20a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 804c20e:	eef4 7ac7 	vcmpe.f32	s15, s14
 804c212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 804c216:	d526      	bpl.n	804c266 <rot_v_gyro_autocal+0x156>

    gyro_static_counter++;
 804c218:	4b3a      	ldr	r3, [pc, #232]	; (804c304 <rot_v_gyro_autocal+0x1f4>)
 804c21a:	681b      	ldr	r3, [r3, #0]
 804c21c:	3301      	adds	r3, #1
 804c21e:	4a39      	ldr	r2, [pc, #228]	; (804c304 <rot_v_gyro_autocal+0x1f4>)
 804c220:	6013      	str	r3, [r2, #0]

    if (gyro_static_counter > ALGO_SAMPLE_HZ) { // update bias
 804c222:	4b38      	ldr	r3, [pc, #224]	; (804c304 <rot_v_gyro_autocal+0x1f4>)
 804c224:	681b      	ldr	r3, [r3, #0]
 804c226:	2b19      	cmp	r3, #25
 804c228:	d920      	bls.n	804c26c <rot_v_gyro_autocal+0x15c>

      calibration_success = 1;
 804c22a:	2301      	movs	r3, #1
 804c22c:	64fb      	str	r3, [r7, #76]	; 0x4c

      for (int i = 0; i < 3; i++)
 804c22e:	2300      	movs	r3, #0
 804c230:	64bb      	str	r3, [r7, #72]	; 0x48
 804c232:	e014      	b.n	804c25e <rot_v_gyro_autocal+0x14e>
        bias[i] = threeHz_gyro_mean[i] * DEG2RAD;
 804c234:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 804c236:	009b      	lsls	r3, r3, #2
 804c238:	f107 0250 	add.w	r2, r7, #80	; 0x50
 804c23c:	4413      	add	r3, r2
 804c23e:	3b24      	subs	r3, #36	; 0x24
 804c240:	edd3 7a00 	vldr	s15, [r3]
 804c244:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 804c246:	009b      	lsls	r3, r3, #2
 804c248:	68ba      	ldr	r2, [r7, #8]
 804c24a:	4413      	add	r3, r2
 804c24c:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 804c308 <rot_v_gyro_autocal+0x1f8>
 804c250:	ee67 7a87 	vmul.f32	s15, s15, s14
 804c254:	edc3 7a00 	vstr	s15, [r3]
      for (int i = 0; i < 3; i++)
 804c258:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 804c25a:	3301      	adds	r3, #1
 804c25c:	64bb      	str	r3, [r7, #72]	; 0x48
 804c25e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 804c260:	2b02      	cmp	r3, #2
 804c262:	dde7      	ble.n	804c234 <rot_v_gyro_autocal+0x124>
    if (gyro_static_counter > ALGO_SAMPLE_HZ) { // update bias
 804c264:	e002      	b.n	804c26c <rot_v_gyro_autocal+0x15c>
    }
  } else {
    gyro_static_counter = 0;
 804c266:	4b27      	ldr	r3, [pc, #156]	; (804c304 <rot_v_gyro_autocal+0x1f4>)
 804c268:	2200      	movs	r2, #0
 804c26a:	601a      	str	r2, [r3, #0]
  }

  for (int i = 0; i < 3; i++) {
 804c26c:	2300      	movs	r3, #0
 804c26e:	647b      	str	r3, [r7, #68]	; 0x44
 804c270:	e03b      	b.n	804c2ea <rot_v_gyro_autocal+0x1da>

    if (bias[0] != 0 && bias[1] != 0 && bias[2] != 0)
 804c272:	68bb      	ldr	r3, [r7, #8]
 804c274:	edd3 7a00 	vldr	s15, [r3]
 804c278:	eef5 7a40 	vcmp.f32	s15, #0.0
 804c27c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 804c280:	d026      	beq.n	804c2d0 <rot_v_gyro_autocal+0x1c0>
 804c282:	68bb      	ldr	r3, [r7, #8]
 804c284:	3304      	adds	r3, #4
 804c286:	edd3 7a00 	vldr	s15, [r3]
 804c28a:	eef5 7a40 	vcmp.f32	s15, #0.0
 804c28e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 804c292:	d01d      	beq.n	804c2d0 <rot_v_gyro_autocal+0x1c0>
 804c294:	68bb      	ldr	r3, [r7, #8]
 804c296:	3308      	adds	r3, #8
 804c298:	edd3 7a00 	vldr	s15, [r3]
 804c29c:	eef5 7a40 	vcmp.f32	s15, #0.0
 804c2a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 804c2a4:	d014      	beq.n	804c2d0 <rot_v_gyro_autocal+0x1c0>
      calibrated[i] = in[i] - bias[i];
 804c2a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 804c2a8:	009b      	lsls	r3, r3, #2
 804c2aa:	68fa      	ldr	r2, [r7, #12]
 804c2ac:	4413      	add	r3, r2
 804c2ae:	ed93 7a00 	vldr	s14, [r3]
 804c2b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 804c2b4:	009b      	lsls	r3, r3, #2
 804c2b6:	68ba      	ldr	r2, [r7, #8]
 804c2b8:	4413      	add	r3, r2
 804c2ba:	edd3 7a00 	vldr	s15, [r3]
 804c2be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 804c2c0:	009b      	lsls	r3, r3, #2
 804c2c2:	687a      	ldr	r2, [r7, #4]
 804c2c4:	4413      	add	r3, r2
 804c2c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 804c2ca:	edc3 7a00 	vstr	s15, [r3]
 804c2ce:	e009      	b.n	804c2e4 <rot_v_gyro_autocal+0x1d4>
    else
      calibrated[i] = in[i];
 804c2d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 804c2d2:	009b      	lsls	r3, r3, #2
 804c2d4:	68fa      	ldr	r2, [r7, #12]
 804c2d6:	441a      	add	r2, r3
 804c2d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 804c2da:	009b      	lsls	r3, r3, #2
 804c2dc:	6879      	ldr	r1, [r7, #4]
 804c2de:	440b      	add	r3, r1
 804c2e0:	6812      	ldr	r2, [r2, #0]
 804c2e2:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < 3; i++) {
 804c2e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 804c2e6:	3301      	adds	r3, #1
 804c2e8:	647b      	str	r3, [r7, #68]	; 0x44
 804c2ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 804c2ec:	2b02      	cmp	r3, #2
 804c2ee:	ddc0      	ble.n	804c272 <rot_v_gyro_autocal+0x162>
  }

  return calibration_success;
 804c2f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 804c2f2:	4618      	mov	r0, r3
 804c2f4:	3750      	adds	r7, #80	; 0x50
 804c2f6:	46bd      	mov	sp, r7
 804c2f8:	bd80      	pop	{r7, pc}
 804c2fa:	bf00      	nop
 804c2fc:	42652ee1 	.word	0x42652ee1
 804c300:	3cc49ba6 	.word	0x3cc49ba6
 804c304:	200083f8 	.word	0x200083f8
 804c308:	3c8efa35 	.word	0x3c8efa35

0804c30c <rot_v_fusion_acc>:

static void rot_v_fusion_acc(unsigned long long timestamp, float *acc)
{
 804c30c:	b5b0      	push	{r4, r5, r7, lr}
 804c30e:	ed2d 8b02 	vpush	{d8}
 804c312:	b09a      	sub	sp, #104	; 0x68
 804c314:	af00      	add	r7, sp, #0
 804c316:	e9c7 0102 	strd	r0, r1, [r7, #8]
 804c31a:	607a      	str	r2, [r7, #4]
  float a_lpf_out[3] = { 0.0f };
 804c31c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 804c320:	2200      	movs	r2, #0
 804c322:	601a      	str	r2, [r3, #0]
 804c324:	605a      	str	r2, [r3, #4]
 804c326:	609a      	str	r2, [r3, #8]
  float a_magnitude, pitch, roll, yaw, momentum;

  static unsigned long long timestamp_previous = 0;
  float rot_vec[4] = { 0.0f };
 804c328:	f107 0334 	add.w	r3, r7, #52	; 0x34
 804c32c:	2200      	movs	r2, #0
 804c32e:	601a      	str	r2, [r3, #0]
 804c330:	605a      	str	r2, [r3, #4]
 804c332:	609a      	str	r2, [r3, #8]
 804c334:	60da      	str	r2, [r3, #12]
  float rot_mat[9] = { 0.0f };
 804c336:	f107 0310 	add.w	r3, r7, #16
 804c33a:	2224      	movs	r2, #36	; 0x24
 804c33c:	2100      	movs	r1, #0
 804c33e:	4618      	mov	r0, r3
 804c340:	f013 fe3c 	bl	805ffbc <memset>

  float dt_s = (float)(timestamp - timestamp_previous) / osKernelGetTickFreq(); //timestamp unit is us
 804c344:	4b5a      	ldr	r3, [pc, #360]	; (804c4b0 <rot_v_fusion_acc+0x1a4>)
 804c346:	e9d3 2300 	ldrd	r2, r3, [r3]
 804c34a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 804c34e:	1a84      	subs	r4, r0, r2
 804c350:	eb61 0503 	sbc.w	r5, r1, r3
 804c354:	4620      	mov	r0, r4
 804c356:	4629      	mov	r1, r5
 804c358:	f7f4 fd5e 	bl	8040e18 <__aeabi_ul2f>
 804c35c:	ee08 0a10 	vmov	s16, r0
 804c360:	f009 fe0f 	bl	8055f82 <osKernelGetTickFreq>
 804c364:	ee07 0a90 	vmov	s15, r0
 804c368:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 804c36c:	eec8 7a07 	vdiv.f32	s15, s16, s14
 804c370:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

  if (dt_s > 1)                 //need refine, 100ms duration is wrong
 804c374:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 804c378:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 804c37c:	eef4 7ac7 	vcmpe.f32	s15, s14
 804c380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 804c384:	dd07      	ble.n	804c396 <rot_v_fusion_acc+0x8a>
    printf("@@@ACC_TIME_ERROR %f ms\r\n", dt_s);
 804c386:	6e78      	ldr	r0, [r7, #100]	; 0x64
 804c388:	f7f4 f8de 	bl	8040548 <__aeabi_f2d>
 804c38c:	4602      	mov	r2, r0
 804c38e:	460b      	mov	r3, r1
 804c390:	4848      	ldr	r0, [pc, #288]	; (804c4b4 <rot_v_fusion_acc+0x1a8>)
 804c392:	f014 faef 	bl	8060974 <iprintf>

  //printf("acc_data: %d %f %f %f\r\n", timestamp, acc[0], acc[1], acc[2]);
  posture(acc, rot_vec, dt_s, (int)SENSOR_TYPE_ACCELEROMETER);
 804c396:	f107 0334 	add.w	r3, r7, #52	; 0x34
 804c39a:	2200      	movs	r2, #0
 804c39c:	ed97 0a19 	vldr	s0, [r7, #100]	; 0x64
 804c3a0:	4619      	mov	r1, r3
 804c3a2:	6878      	ldr	r0, [r7, #4]
 804c3a4:	f7ff fa6a 	bl	804b87c <posture>
  get_rot_mat(rot_vec, rot_mat);
 804c3a8:	f107 0210 	add.w	r2, r7, #16
 804c3ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 804c3b0:	4611      	mov	r1, r2
 804c3b2:	4618      	mov	r0, r3
 804c3b4:	f7ff fada 	bl	804b96c <get_rot_mat>
  timestamp_previous = timestamp;
 804c3b8:	493d      	ldr	r1, [pc, #244]	; (804c4b0 <rot_v_fusion_acc+0x1a4>)
 804c3ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 804c3be:	e9c1 2300 	strd	r2, r3, [r1]

  pitch = asinf(rot_mat[7]) * RAD2DEG;
 804c3c2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 804c3c6:	eeb0 0a67 	vmov.f32	s0, s15
 804c3ca:	f016 fcdf 	bl	8062d8c <asinf>
 804c3ce:	eef0 7a40 	vmov.f32	s15, s0
 804c3d2:	ed9f 7a39 	vldr	s14, [pc, #228]	; 804c4b8 <rot_v_fusion_acc+0x1ac>
 804c3d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 804c3da:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
  roll = asinf(-rot_mat[6]) * RAD2DEG;
 804c3de:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 804c3e2:	eef1 7a67 	vneg.f32	s15, s15
 804c3e6:	eeb0 0a67 	vmov.f32	s0, s15
 804c3ea:	f016 fccf 	bl	8062d8c <asinf>
 804c3ee:	eef0 7a40 	vmov.f32	s15, s0
 804c3f2:	ed9f 7a31 	vldr	s14, [pc, #196]	; 804c4b8 <rot_v_fusion_acc+0x1ac>
 804c3f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 804c3fa:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
  yaw = asinf(rot_mat[8]) * RAD2DEG;
 804c3fe:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 804c402:	eeb0 0a67 	vmov.f32	s0, s15
 804c406:	f016 fcc1 	bl	8062d8c <asinf>
 804c40a:	eef0 7a40 	vmov.f32	s15, s0
 804c40e:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 804c4b8 <rot_v_fusion_acc+0x1ac>
 804c412:	ee67 7a87 	vmul.f32	s15, s15, s14
 804c416:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
  temp_roll = roll;
 804c41a:	4a28      	ldr	r2, [pc, #160]	; (804c4bc <rot_v_fusion_acc+0x1b0>)
 804c41c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 804c41e:	6013      	str	r3, [r2, #0]
  temp_pitch = pitch;
 804c420:	4a27      	ldr	r2, [pc, #156]	; (804c4c0 <rot_v_fusion_acc+0x1b4>)
 804c422:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 804c424:	6013      	str	r3, [r2, #0]
  temp_yaw = yaw;
 804c426:	4a27      	ldr	r2, [pc, #156]	; (804c4c4 <rot_v_fusion_acc+0x1b8>)
 804c428:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 804c42a:	6013      	str	r3, [r2, #0]
  //printf("eular after acc: %d %.1f %.1f %.1f\r\n", timestamp, yaw, pitch, roll);

  accLowPassFilter(acc, a_lpf_out);
 804c42c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 804c430:	4619      	mov	r1, r3
 804c432:	6878      	ldr	r0, [r7, #4]
 804c434:	f7ff fd1c 	bl	804be70 <accLowPassFilter>

  a_magnitude = sqrtf(a_lpf_out[0] * a_lpf_out[0] + a_lpf_out[1] * a_lpf_out[1]
 804c438:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 804c43c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 804c440:	ee27 7a27 	vmul.f32	s14, s14, s15
 804c444:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 804c448:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 804c44c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 804c450:	ee37 7a27 	vadd.f32	s14, s14, s15
                      + a_lpf_out[2] * a_lpf_out[2]);
 804c454:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 804c458:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 804c45c:	ee66 7aa7 	vmul.f32	s15, s13, s15
  a_magnitude = sqrtf(a_lpf_out[0] * a_lpf_out[0] + a_lpf_out[1] * a_lpf_out[1]
 804c460:	ee77 7a27 	vadd.f32	s15, s14, s15
 804c464:	eeb0 0a67 	vmov.f32	s0, s15
 804c468:	f016 fcc4 	bl	8062df4 <sqrtf>
 804c46c:	ed87 0a15 	vstr	s0, [r7, #84]	; 0x54
  momentum = (a_magnitude - GRAVITY);
 804c470:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 804c474:	ed9f 7a14 	vldr	s14, [pc, #80]	; 804c4c8 <rot_v_fusion_acc+0x1bc>
 804c478:	ee77 7ac7 	vsub.f32	s15, s15, s14
 804c47c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
  momentum *= momentum;
 804c480:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 804c484:	ee67 7aa7 	vmul.f32	s15, s15, s15
 804c488:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

  rot_v_quaternion[0] = rot_vec[0];
 804c48c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 804c48e:	4a0f      	ldr	r2, [pc, #60]	; (804c4cc <rot_v_fusion_acc+0x1c0>)
 804c490:	6013      	str	r3, [r2, #0]
  rot_v_quaternion[1] = rot_vec[1];
 804c492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 804c494:	4a0d      	ldr	r2, [pc, #52]	; (804c4cc <rot_v_fusion_acc+0x1c0>)
 804c496:	6053      	str	r3, [r2, #4]
  rot_v_quaternion[2] = rot_vec[2];
 804c498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 804c49a:	4a0c      	ldr	r2, [pc, #48]	; (804c4cc <rot_v_fusion_acc+0x1c0>)
 804c49c:	6093      	str	r3, [r2, #8]
  rot_v_quaternion[3] = rot_vec[3];
 804c49e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 804c4a0:	4a0a      	ldr	r2, [pc, #40]	; (804c4cc <rot_v_fusion_acc+0x1c0>)
 804c4a2:	60d3      	str	r3, [r2, #12]
}
 804c4a4:	bf00      	nop
 804c4a6:	3768      	adds	r7, #104	; 0x68
 804c4a8:	46bd      	mov	sp, r7
 804c4aa:	ecbd 8b02 	vpop	{d8}
 804c4ae:	bdb0      	pop	{r4, r5, r7, pc}
 804c4b0:	20008400 	.word	0x20008400
 804c4b4:	08065d64 	.word	0x08065d64
 804c4b8:	42652ee1 	.word	0x42652ee1
 804c4bc:	20008190 	.word	0x20008190
 804c4c0:	20008194 	.word	0x20008194
 804c4c4:	20008198 	.word	0x20008198
 804c4c8:	411ce80a 	.word	0x411ce80a
 804c4cc:	2000789c 	.word	0x2000789c

0804c4d0 <rot_v_fusion_gyro>:

static void rot_v_fusion_gyro(unsigned long long timestamp, float *gyro)
{
 804c4d0:	b5b0      	push	{r4, r5, r7, lr}
 804c4d2:	ed2d 8b02 	vpush	{d8}
 804c4d6:	b09c      	sub	sp, #112	; 0x70
 804c4d8:	af00      	add	r7, sp, #0
 804c4da:	e9c7 0102 	strd	r0, r1, [r7, #8]
 804c4de:	607a      	str	r2, [r7, #4]
  float a_lpf_out[3] = { 0.0f };
 804c4e0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 804c4e4:	2200      	movs	r2, #0
 804c4e6:	601a      	str	r2, [r3, #0]
 804c4e8:	605a      	str	r2, [r3, #4]
 804c4ea:	609a      	str	r2, [r3, #8]
  float gyro_calibrated[3] = { 0.0f };
 804c4ec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 804c4f0:	2200      	movs	r2, #0
 804c4f2:	601a      	str	r2, [r3, #0]
 804c4f4:	605a      	str	r2, [r3, #4]
 804c4f6:	609a      	str	r2, [r3, #8]
  static float gyro_bias[3] = { 0.0f };

  float a_magnitude, pitch, roll, yaw, momentum;

  static unsigned long long timestamp_previous = 0;
  float rot_vec[4] = { 0.0f };
 804c4f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 804c4fc:	2200      	movs	r2, #0
 804c4fe:	601a      	str	r2, [r3, #0]
 804c500:	605a      	str	r2, [r3, #4]
 804c502:	609a      	str	r2, [r3, #8]
 804c504:	60da      	str	r2, [r3, #12]
  float rot_mat[9] = { 0.0f };
 804c506:	f107 0310 	add.w	r3, r7, #16
 804c50a:	2224      	movs	r2, #36	; 0x24
 804c50c:	2100      	movs	r1, #0
 804c50e:	4618      	mov	r0, r3
 804c510:	f013 fd54 	bl	805ffbc <memset>

  float dt_s = (float)(timestamp - timestamp_previous) / osKernelGetTickFreq(); //timestamp_ unit is ms
 804c514:	4b4a      	ldr	r3, [pc, #296]	; (804c640 <rot_v_fusion_gyro+0x170>)
 804c516:	e9d3 2300 	ldrd	r2, r3, [r3]
 804c51a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 804c51e:	1a84      	subs	r4, r0, r2
 804c520:	eb61 0503 	sbc.w	r5, r1, r3
 804c524:	4620      	mov	r0, r4
 804c526:	4629      	mov	r1, r5
 804c528:	f7f4 fc76 	bl	8040e18 <__aeabi_ul2f>
 804c52c:	ee08 0a10 	vmov	s16, r0
 804c530:	f009 fd27 	bl	8055f82 <osKernelGetTickFreq>
 804c534:	ee07 0a90 	vmov	s15, r0
 804c538:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 804c53c:	eec8 7a07 	vdiv.f32	s15, s16, s14
 804c540:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c

  if (dt_s > 1)                 //need refine, 1s duration is too big
 804c544:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 804c548:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 804c54c:	eef4 7ac7 	vcmpe.f32	s15, s14
 804c550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 804c554:	dd07      	ble.n	804c566 <rot_v_fusion_gyro+0x96>
    printf("@@@GYRO_TIME_ERROR %f ms\r\n", dt_s);
 804c556:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 804c558:	f7f3 fff6 	bl	8040548 <__aeabi_f2d>
 804c55c:	4602      	mov	r2, r0
 804c55e:	460b      	mov	r3, r1
 804c560:	4838      	ldr	r0, [pc, #224]	; (804c644 <rot_v_fusion_gyro+0x174>)
 804c562:	f014 fa07 	bl	8060974 <iprintf>

  //printf("gyro_data: %d %f %f %f\r\n", timestamp, gyro[0], gyro[1], gyro[2]);

  rot_v_gyro_autocal(gyro, gyro_bias, gyro_calibrated);
 804c566:	f107 0344 	add.w	r3, r7, #68	; 0x44
 804c56a:	461a      	mov	r2, r3
 804c56c:	4936      	ldr	r1, [pc, #216]	; (804c648 <rot_v_fusion_gyro+0x178>)
 804c56e:	6878      	ldr	r0, [r7, #4]
 804c570:	f7ff fdce 	bl	804c110 <rot_v_gyro_autocal>
  posture(gyro_calibrated, rot_vec, dt_s, (int)SENSOR_TYPE_GYROSCOPE);
 804c574:	f107 0134 	add.w	r1, r7, #52	; 0x34
 804c578:	f107 0344 	add.w	r3, r7, #68	; 0x44
 804c57c:	2202      	movs	r2, #2
 804c57e:	ed97 0a1b 	vldr	s0, [r7, #108]	; 0x6c
 804c582:	4618      	mov	r0, r3
 804c584:	f7ff f97a 	bl	804b87c <posture>
  get_rot_mat(rot_vec, rot_mat);
 804c588:	f107 0210 	add.w	r2, r7, #16
 804c58c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 804c590:	4611      	mov	r1, r2
 804c592:	4618      	mov	r0, r3
 804c594:	f7ff f9ea 	bl	804b96c <get_rot_mat>
  timestamp_previous = timestamp;
 804c598:	4929      	ldr	r1, [pc, #164]	; (804c640 <rot_v_fusion_gyro+0x170>)
 804c59a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 804c59e:	e9c1 2300 	strd	r2, r3, [r1]

  pitch = asinf(rot_mat[7]) * RAD2DEG;
 804c5a2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 804c5a6:	eeb0 0a67 	vmov.f32	s0, s15
 804c5aa:	f016 fbef 	bl	8062d8c <asinf>
 804c5ae:	eef0 7a40 	vmov.f32	s15, s0
 804c5b2:	ed9f 7a26 	vldr	s14, [pc, #152]	; 804c64c <rot_v_fusion_gyro+0x17c>
 804c5b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 804c5ba:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
  roll = asinf(-rot_mat[6]) * RAD2DEG;
 804c5be:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 804c5c2:	eef1 7a67 	vneg.f32	s15, s15
 804c5c6:	eeb0 0a67 	vmov.f32	s0, s15
 804c5ca:	f016 fbdf 	bl	8062d8c <asinf>
 804c5ce:	eef0 7a40 	vmov.f32	s15, s0
 804c5d2:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 804c64c <rot_v_fusion_gyro+0x17c>
 804c5d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 804c5da:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
  yaw = asinf(rot_mat[8]) * RAD2DEG;
 804c5de:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 804c5e2:	eeb0 0a67 	vmov.f32	s0, s15
 804c5e6:	f016 fbd1 	bl	8062d8c <asinf>
 804c5ea:	eef0 7a40 	vmov.f32	s15, s0
 804c5ee:	ed9f 7a17 	vldr	s14, [pc, #92]	; 804c64c <rot_v_fusion_gyro+0x17c>
 804c5f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 804c5f6:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
  temp_roll = roll;
 804c5fa:	4a15      	ldr	r2, [pc, #84]	; (804c650 <rot_v_fusion_gyro+0x180>)
 804c5fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 804c5fe:	6013      	str	r3, [r2, #0]
  temp_pitch = pitch;
 804c600:	4a14      	ldr	r2, [pc, #80]	; (804c654 <rot_v_fusion_gyro+0x184>)
 804c602:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 804c604:	6013      	str	r3, [r2, #0]
  temp_yaw = yaw;
 804c606:	4a14      	ldr	r2, [pc, #80]	; (804c658 <rot_v_fusion_gyro+0x188>)
 804c608:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 804c60a:	6013      	str	r3, [r2, #0]
  //printf("eular_after_gyro: %llu %.1f %.1f %.1f\r\n", timestamp, yaw, pitch, roll);

  float gyro_momentum = matrix_length(gyro_calibrated, 3);
 804c60c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 804c610:	2103      	movs	r1, #3
 804c612:	4618      	mov	r0, r3
 804c614:	f7fd fdc3 	bl	804a19e <matrix_length>
 804c618:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
  //-----------------------------Preprocess----------------------------------//
  rot_v_quaternion[0] = rot_vec[0];
 804c61c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 804c61e:	4a0f      	ldr	r2, [pc, #60]	; (804c65c <rot_v_fusion_gyro+0x18c>)
 804c620:	6013      	str	r3, [r2, #0]
  rot_v_quaternion[1] = rot_vec[1];
 804c622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 804c624:	4a0d      	ldr	r2, [pc, #52]	; (804c65c <rot_v_fusion_gyro+0x18c>)
 804c626:	6053      	str	r3, [r2, #4]
  rot_v_quaternion[2] = rot_vec[2];
 804c628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 804c62a:	4a0c      	ldr	r2, [pc, #48]	; (804c65c <rot_v_fusion_gyro+0x18c>)
 804c62c:	6093      	str	r3, [r2, #8]
  rot_v_quaternion[3] = rot_vec[3];
 804c62e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 804c630:	4a0a      	ldr	r2, [pc, #40]	; (804c65c <rot_v_fusion_gyro+0x18c>)
 804c632:	60d3      	str	r3, [r2, #12]
}
 804c634:	bf00      	nop
 804c636:	3770      	adds	r7, #112	; 0x70
 804c638:	46bd      	mov	sp, r7
 804c63a:	ecbd 8b02 	vpop	{d8}
 804c63e:	bdb0      	pop	{r4, r5, r7, pc}
 804c640:	20008408 	.word	0x20008408
 804c644:	08065d80 	.word	0x08065d80
 804c648:	20008410 	.word	0x20008410
 804c64c:	42652ee1 	.word	0x42652ee1
 804c650:	20008190 	.word	0x20008190
 804c654:	20008194 	.word	0x20008194
 804c658:	20008198 	.word	0x20008198
 804c65c:	2000789c 	.word	0x2000789c

0804c660 <rotv_init>:

int rotv_init(void *para, void *para2)
{
 804c660:	b580      	push	{r7, lr}
 804c662:	b082      	sub	sp, #8
 804c664:	af00      	add	r7, sp, #0
 804c666:	6078      	str	r0, [r7, #4]
 804c668:	6039      	str	r1, [r7, #0]
  rot_v_init_parms = (platform_prams *) para;
 804c66a:	4a17      	ldr	r2, [pc, #92]	; (804c6c8 <rotv_init+0x68>)
 804c66c:	687b      	ldr	r3, [r7, #4]
 804c66e:	6013      	str	r3, [r2, #0]
  sensor_ptr = (sensor_device **) para2;
 804c670:	4a16      	ldr	r2, [pc, #88]	; (804c6cc <rotv_init+0x6c>)
 804c672:	683b      	ldr	r3, [r7, #0]
 804c674:	6013      	str	r3, [r2, #0]
  rot_v_state_init();
 804c676:	f7fd fa57 	bl	8049b28 <rot_v_state_init>
  if ((sensor_ptr[SENSOR_TYPE_ACCELEROMETER] != NULL)
 804c67a:	4b14      	ldr	r3, [pc, #80]	; (804c6cc <rotv_init+0x6c>)
 804c67c:	681b      	ldr	r3, [r3, #0]
 804c67e:	681b      	ldr	r3, [r3, #0]
 804c680:	2b00      	cmp	r3, #0
 804c682:	d01a      	beq.n	804c6ba <rotv_init+0x5a>
//      && (sensor_ptr[SENSOR_TYPE_MAGNETIC_FIELD] != NULL)
      && (sensor_ptr[SENSOR_TYPE_GYROSCOPE] != NULL)) {
 804c684:	4b11      	ldr	r3, [pc, #68]	; (804c6cc <rotv_init+0x6c>)
 804c686:	681b      	ldr	r3, [r3, #0]
 804c688:	3308      	adds	r3, #8
 804c68a:	681b      	ldr	r3, [r3, #0]
 804c68c:	2b00      	cmp	r3, #0
 804c68e:	d014      	beq.n	804c6ba <rotv_init+0x5a>
    if ((sensor_ptr[SENSOR_TYPE_ACCELEROMETER]->init_completed)
 804c690:	4b0e      	ldr	r3, [pc, #56]	; (804c6cc <rotv_init+0x6c>)
 804c692:	681b      	ldr	r3, [r3, #0]
 804c694:	681b      	ldr	r3, [r3, #0]
 804c696:	7d1b      	ldrb	r3, [r3, #20]
 804c698:	2b00      	cmp	r3, #0
 804c69a:	d00b      	beq.n	804c6b4 <rotv_init+0x54>
//          && (sensor_ptr[SENSOR_TYPE_MAGNETIC_FIELD]->init_completed)
        && (sensor_ptr[SENSOR_TYPE_GYROSCOPE]->init_completed)) {
 804c69c:	4b0b      	ldr	r3, [pc, #44]	; (804c6cc <rotv_init+0x6c>)
 804c69e:	681b      	ldr	r3, [r3, #0]
 804c6a0:	3308      	adds	r3, #8
 804c6a2:	681b      	ldr	r3, [r3, #0]
 804c6a4:	7d1b      	ldrb	r3, [r3, #20]
 804c6a6:	2b00      	cmp	r3, #0
 804c6a8:	d004      	beq.n	804c6b4 <rotv_init+0x54>
      printf("all depending sensor enabled\r\n");
 804c6aa:	4809      	ldr	r0, [pc, #36]	; (804c6d0 <rotv_init+0x70>)
 804c6ac:	f014 f9fe 	bl	8060aac <puts>
      return SENSOR_SUCCESS;
 804c6b0:	2300      	movs	r3, #0
 804c6b2:	e004      	b.n	804c6be <rotv_init+0x5e>
    } else {
      printf("depending sensor missing, init will exit with fail!\r\n");
 804c6b4:	4807      	ldr	r0, [pc, #28]	; (804c6d4 <rotv_init+0x74>)
 804c6b6:	f014 f9f9 	bl	8060aac <puts>
    }
  }

  return SENSOR_FAILED;
 804c6ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 804c6be:	4618      	mov	r0, r3
 804c6c0:	3708      	adds	r7, #8
 804c6c2:	46bd      	mov	sp, r7
 804c6c4:	bd80      	pop	{r7, pc}
 804c6c6:	bf00      	nop
 804c6c8:	200080b8 	.word	0x200080b8
 804c6cc:	200080b4 	.word	0x200080b4
 804c6d0:	08065d9c 	.word	0x08065d9c
 804c6d4:	08065dbc 	.word	0x08065dbc

0804c6d8 <rotv_init_complete>:

int rotv_init_complete(void *para)
{
 804c6d8:	b480      	push	{r7}
 804c6da:	b083      	sub	sp, #12
 804c6dc:	af00      	add	r7, sp, #0
 804c6de:	6078      	str	r0, [r7, #4]
  return SENSOR_SUCCESS;
 804c6e0:	2300      	movs	r3, #0
}
 804c6e2:	4618      	mov	r0, r3
 804c6e4:	370c      	adds	r7, #12
 804c6e6:	46bd      	mov	sp, r7
 804c6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c6ec:	4770      	bx	lr
	...

0804c6f0 <rotv_enable>:

int rotv_enable()
{
 804c6f0:	b580      	push	{r7, lr}
 804c6f2:	b096      	sub	sp, #88	; 0x58
 804c6f4:	af00      	add	r7, sp, #0
  sensor_message_event_t sensor_msg_event;
  osStatus_t res;
  if (sensor_activate_count == 0) {
 804c6f6:	4b18      	ldr	r3, [pc, #96]	; (804c758 <rotv_enable+0x68>)
 804c6f8:	781b      	ldrb	r3, [r3, #0]
 804c6fa:	2b00      	cmp	r3, #0
 804c6fc:	d120      	bne.n	804c740 <rotv_enable+0x50>
    sensor_msg_event.message_event_type = SENSOR_CONFIG_MESSAGE;
 804c6fe:	2300      	movs	r3, #0
 804c700:	703b      	strb	r3, [r7, #0]
    sensor_msg_event.message_event_t.config_event.config_type = SENSOR_ACTIVATE;
 804c702:	2301      	movs	r3, #1
 804c704:	727b      	strb	r3, [r7, #9]
    sensor_msg_event.message_event_t.config_event.sensor_type =
 804c706:	2300      	movs	r3, #0
 804c708:	723b      	strb	r3, [r7, #8]
        SENSOR_TYPE_ACCELEROMETER;
    osMessageQueuePut(rot_v_init_parms->SensorMessageQHandle, &sensor_msg_event,
 804c70a:	4b14      	ldr	r3, [pc, #80]	; (804c75c <rotv_enable+0x6c>)
 804c70c:	681b      	ldr	r3, [r3, #0]
 804c70e:	f8d3 00f4 	ldr.w	r0, [r3, #244]	; 0xf4
 804c712:	4639      	mov	r1, r7
 804c714:	2300      	movs	r3, #0
 804c716:	2200      	movs	r2, #0
 804c718:	f009 fe74 	bl	8056404 <osMessageQueuePut>
                      0, 0);
    sensor_msg_event.message_event_type = SENSOR_CONFIG_MESSAGE;
 804c71c:	2300      	movs	r3, #0
 804c71e:	703b      	strb	r3, [r7, #0]
    sensor_msg_event.message_event_t.config_event.config_type = SENSOR_ACTIVATE;
 804c720:	2301      	movs	r3, #1
 804c722:	727b      	strb	r3, [r7, #9]
    sensor_msg_event.message_event_t.config_event.sensor_type =
 804c724:	2302      	movs	r3, #2
 804c726:	723b      	strb	r3, [r7, #8]
        SENSOR_TYPE_GYROSCOPE;
    osMessageQueuePut(rot_v_init_parms->SensorMessageQHandle, &sensor_msg_event,
 804c728:	4b0c      	ldr	r3, [pc, #48]	; (804c75c <rotv_enable+0x6c>)
 804c72a:	681b      	ldr	r3, [r3, #0]
 804c72c:	f8d3 00f4 	ldr.w	r0, [r3, #244]	; 0xf4
 804c730:	4639      	mov	r1, r7
 804c732:	2300      	movs	r3, #0
 804c734:	2200      	movs	r2, #0
 804c736:	f009 fe65 	bl	8056404 <osMessageQueuePut>
                      0, 0);
/*		sensor_msg_event.message_event_type = SENSOR_CONFIG_MESSAGE;
		sensor_msg_event.message_event_t.config_event.config_type = SENSOR_ACTIVATE;
		sensor_msg_event.message_event_t.config_event.sensor_type = SENSOR_TYPE_MAGNETIC_FIELD;
		osMessageQueuePut(rot_v_init_parms->SensorMessageQHandle, &sensor_msg_event, 0, 0);*/
    rot_v_activated = true;
 804c73a:	4b09      	ldr	r3, [pc, #36]	; (804c760 <rotv_enable+0x70>)
 804c73c:	2201      	movs	r2, #1
 804c73e:	701a      	strb	r2, [r3, #0]
  }
  sensor_activate_count++;
 804c740:	4b05      	ldr	r3, [pc, #20]	; (804c758 <rotv_enable+0x68>)
 804c742:	781b      	ldrb	r3, [r3, #0]
 804c744:	3301      	adds	r3, #1
 804c746:	b2da      	uxtb	r2, r3
 804c748:	4b03      	ldr	r3, [pc, #12]	; (804c758 <rotv_enable+0x68>)
 804c74a:	701a      	strb	r2, [r3, #0]
}
 804c74c:	bf00      	nop
 804c74e:	4618      	mov	r0, r3
 804c750:	3758      	adds	r7, #88	; 0x58
 804c752:	46bd      	mov	sp, r7
 804c754:	bd80      	pop	{r7, pc}
 804c756:	bf00      	nop
 804c758:	2000818c 	.word	0x2000818c
 804c75c:	200080b8 	.word	0x200080b8
 804c760:	2000818d 	.word	0x2000818d

0804c764 <rotv_disable>:

int rotv_disable()
{
 804c764:	b580      	push	{r7, lr}
 804c766:	b096      	sub	sp, #88	; 0x58
 804c768:	af00      	add	r7, sp, #0
  sensor_message_event_t sensor_msg_event;
  osStatus_t res;
  sensor_activate_count--;
 804c76a:	4b18      	ldr	r3, [pc, #96]	; (804c7cc <rotv_disable+0x68>)
 804c76c:	781b      	ldrb	r3, [r3, #0]
 804c76e:	3b01      	subs	r3, #1
 804c770:	b2da      	uxtb	r2, r3
 804c772:	4b16      	ldr	r3, [pc, #88]	; (804c7cc <rotv_disable+0x68>)
 804c774:	701a      	strb	r2, [r3, #0]
  if (sensor_activate_count == 0) {
 804c776:	4b15      	ldr	r3, [pc, #84]	; (804c7cc <rotv_disable+0x68>)
 804c778:	781b      	ldrb	r3, [r3, #0]
 804c77a:	2b00      	cmp	r3, #0
 804c77c:	d120      	bne.n	804c7c0 <rotv_disable+0x5c>
    sensor_msg_event.message_event_type = SENSOR_CONFIG_MESSAGE;
 804c77e:	2300      	movs	r3, #0
 804c780:	703b      	strb	r3, [r7, #0]
    sensor_msg_event.message_event_t.config_event.config_type =
 804c782:	2300      	movs	r3, #0
 804c784:	727b      	strb	r3, [r7, #9]
        SENSOR_DEACTIVATE;
    sensor_msg_event.message_event_t.config_event.sensor_type =
 804c786:	2300      	movs	r3, #0
 804c788:	723b      	strb	r3, [r7, #8]
        SENSOR_TYPE_ACCELEROMETER;
    osMessageQueuePut(rot_v_init_parms->SensorMessageQHandle, &sensor_msg_event,
 804c78a:	4b11      	ldr	r3, [pc, #68]	; (804c7d0 <rotv_disable+0x6c>)
 804c78c:	681b      	ldr	r3, [r3, #0]
 804c78e:	f8d3 00f4 	ldr.w	r0, [r3, #244]	; 0xf4
 804c792:	4639      	mov	r1, r7
 804c794:	2300      	movs	r3, #0
 804c796:	2200      	movs	r2, #0
 804c798:	f009 fe34 	bl	8056404 <osMessageQueuePut>
                      0, 0);
    sensor_msg_event.message_event_type = SENSOR_CONFIG_MESSAGE;
 804c79c:	2300      	movs	r3, #0
 804c79e:	703b      	strb	r3, [r7, #0]
    sensor_msg_event.message_event_t.config_event.config_type =
 804c7a0:	2300      	movs	r3, #0
 804c7a2:	727b      	strb	r3, [r7, #9]
        SENSOR_DEACTIVATE;
    sensor_msg_event.message_event_t.config_event.sensor_type =
 804c7a4:	2302      	movs	r3, #2
 804c7a6:	723b      	strb	r3, [r7, #8]
        SENSOR_TYPE_GYROSCOPE;
    osMessageQueuePut(rot_v_init_parms->SensorMessageQHandle, &sensor_msg_event,
 804c7a8:	4b09      	ldr	r3, [pc, #36]	; (804c7d0 <rotv_disable+0x6c>)
 804c7aa:	681b      	ldr	r3, [r3, #0]
 804c7ac:	f8d3 00f4 	ldr.w	r0, [r3, #244]	; 0xf4
 804c7b0:	4639      	mov	r1, r7
 804c7b2:	2300      	movs	r3, #0
 804c7b4:	2200      	movs	r2, #0
 804c7b6:	f009 fe25 	bl	8056404 <osMessageQueuePut>
                      0, 0);
/*		sensor_msg_event.message_event_type = SENSOR_CONFIG_MESSAGE;
		sensor_msg_event.message_event_t.config_event.config_type = SENSOR_DEACTIVATE;
		sensor_msg_event.message_event_t.config_event.sensor_type = SENSOR_TYPE_MAGNETIC_FIELD;
		osMessageQueuePut(rot_v_init_parms->SensorMessageQHandle, &sensor_msg_event, 0, 0);*/
    rot_v_activated = false;
 804c7ba:	4b06      	ldr	r3, [pc, #24]	; (804c7d4 <rotv_disable+0x70>)
 804c7bc:	2200      	movs	r2, #0
 804c7be:	701a      	strb	r2, [r3, #0]
  }
}
 804c7c0:	bf00      	nop
 804c7c2:	4618      	mov	r0, r3
 804c7c4:	3758      	adds	r7, #88	; 0x58
 804c7c6:	46bd      	mov	sp, r7
 804c7c8:	bd80      	pop	{r7, pc}
 804c7ca:	bf00      	nop
 804c7cc:	2000818c 	.word	0x2000818c
 804c7d0:	200080b8 	.word	0x200080b8
 804c7d4:	2000818d 	.word	0x2000818d

0804c7d8 <rotv_activate>:

int rotv_activate(bool activate)
{
 804c7d8:	b580      	push	{r7, lr}
 804c7da:	b082      	sub	sp, #8
 804c7dc:	af00      	add	r7, sp, #0
 804c7de:	4603      	mov	r3, r0
 804c7e0:	71fb      	strb	r3, [r7, #7]
  if (activate) {
 804c7e2:	79fb      	ldrb	r3, [r7, #7]
 804c7e4:	2b00      	cmp	r3, #0
 804c7e6:	d002      	beq.n	804c7ee <rotv_activate+0x16>
    rotv_enable();
 804c7e8:	f7ff ff82 	bl	804c6f0 <rotv_enable>
 804c7ec:	e001      	b.n	804c7f2 <rotv_activate+0x1a>
  } else {
    rotv_disable();
 804c7ee:	f7ff ffb9 	bl	804c764 <rotv_disable>
  }
  return SENSOR_SUCCESS;
 804c7f2:	2300      	movs	r3, #0
}
 804c7f4:	4618      	mov	r0, r3
 804c7f6:	3708      	adds	r7, #8
 804c7f8:	46bd      	mov	sp, r7
 804c7fa:	bd80      	pop	{r7, pc}

0804c7fc <rotv_publish_sensor_data>:

int rotv_publish_sensor_data(void *para)
{
 804c7fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 804c800:	b09c      	sub	sp, #112	; 0x70
 804c802:	af06      	add	r7, sp, #24
 804c804:	6078      	str	r0, [r7, #4]
  /* Read samples in polling mode (no int) */
  sensors_event_t sensor_data = { 0 };
 804c806:	f107 0308 	add.w	r3, r7, #8
 804c80a:	2250      	movs	r2, #80	; 0x50
 804c80c:	2100      	movs	r1, #0
 804c80e:	4618      	mov	r0, r3
 804c810:	f013 fbd4 	bl	805ffbc <memset>
  //printf("rotv_publish_sensor_data: %d \r\n", light_activated);
  if (rot_v_activated) {
 804c814:	4b28      	ldr	r3, [pc, #160]	; (804c8b8 <rotv_publish_sensor_data+0xbc>)
 804c816:	781b      	ldrb	r3, [r3, #0]
 804c818:	2b00      	cmp	r3, #0
 804c81a:	d046      	beq.n	804c8aa <rotv_publish_sensor_data+0xae>
    //send related messages to SensorDataQ
    sensor_data.sensor_type = SENSOR_TYPE_ROTATION_VECTOR;
 804c81c:	230d      	movs	r3, #13
 804c81e:	723b      	strb	r3, [r7, #8]
    sensor_data.accuracy = 3;
 804c820:	2303      	movs	r3, #3
 804c822:	727b      	strb	r3, [r7, #9]
    sensor_data.timestamp = sensor_get_timestamp();
 804c824:	f000 ff70 	bl	804d708 <sensor_get_timestamp>
 804c828:	4602      	mov	r2, r0
 804c82a:	460b      	mov	r3, r1
 804c82c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    sensor_data.sensor_data_t.vec.data[0] = rot_v_quaternion[0];
 804c830:	4b22      	ldr	r3, [pc, #136]	; (804c8bc <rotv_publish_sensor_data+0xc0>)
 804c832:	681b      	ldr	r3, [r3, #0]
 804c834:	61bb      	str	r3, [r7, #24]
    sensor_data.sensor_data_t.vec.data[1] = rot_v_quaternion[1];
 804c836:	4b21      	ldr	r3, [pc, #132]	; (804c8bc <rotv_publish_sensor_data+0xc0>)
 804c838:	685b      	ldr	r3, [r3, #4]
 804c83a:	61fb      	str	r3, [r7, #28]
    sensor_data.sensor_data_t.vec.data[2] = rot_v_quaternion[2];
 804c83c:	4b1f      	ldr	r3, [pc, #124]	; (804c8bc <rotv_publish_sensor_data+0xc0>)
 804c83e:	689b      	ldr	r3, [r3, #8]
 804c840:	623b      	str	r3, [r7, #32]
    sensor_data.sensor_data_t.vec.data[3] = rot_v_quaternion[3];
 804c842:	4b1e      	ldr	r3, [pc, #120]	; (804c8bc <rotv_publish_sensor_data+0xc0>)
 804c844:	68db      	ldr	r3, [r3, #12]
 804c846:	627b      	str	r3, [r7, #36]	; 0x24
    //sensor_data.sensor_data_t.vec.data[0] = temp_roll;
    //sensor_data.sensor_data_t.vec.data[1] = temp_pitch;
    //sensor_data.sensor_data_t.vec.data[2] = temp_yaw;
    //sensor_data.sensor_data_t.vec.data[3] = 0;

    printf("rot_v quaternion %f %f %f %f\r\n", rot_v_quaternion[0],
 804c848:	4b1c      	ldr	r3, [pc, #112]	; (804c8bc <rotv_publish_sensor_data+0xc0>)
 804c84a:	681b      	ldr	r3, [r3, #0]
 804c84c:	4618      	mov	r0, r3
 804c84e:	f7f3 fe7b 	bl	8040548 <__aeabi_f2d>
 804c852:	4682      	mov	sl, r0
 804c854:	468b      	mov	fp, r1
           rot_v_quaternion[1], rot_v_quaternion[2], rot_v_quaternion[3]);
 804c856:	4b19      	ldr	r3, [pc, #100]	; (804c8bc <rotv_publish_sensor_data+0xc0>)
 804c858:	685b      	ldr	r3, [r3, #4]
    printf("rot_v quaternion %f %f %f %f\r\n", rot_v_quaternion[0],
 804c85a:	4618      	mov	r0, r3
 804c85c:	f7f3 fe74 	bl	8040548 <__aeabi_f2d>
 804c860:	4604      	mov	r4, r0
 804c862:	460d      	mov	r5, r1
           rot_v_quaternion[1], rot_v_quaternion[2], rot_v_quaternion[3]);
 804c864:	4b15      	ldr	r3, [pc, #84]	; (804c8bc <rotv_publish_sensor_data+0xc0>)
 804c866:	689b      	ldr	r3, [r3, #8]
    printf("rot_v quaternion %f %f %f %f\r\n", rot_v_quaternion[0],
 804c868:	4618      	mov	r0, r3
 804c86a:	f7f3 fe6d 	bl	8040548 <__aeabi_f2d>
 804c86e:	4680      	mov	r8, r0
 804c870:	4689      	mov	r9, r1
           rot_v_quaternion[1], rot_v_quaternion[2], rot_v_quaternion[3]);
 804c872:	4b12      	ldr	r3, [pc, #72]	; (804c8bc <rotv_publish_sensor_data+0xc0>)
 804c874:	68db      	ldr	r3, [r3, #12]
    printf("rot_v quaternion %f %f %f %f\r\n", rot_v_quaternion[0],
 804c876:	4618      	mov	r0, r3
 804c878:	f7f3 fe66 	bl	8040548 <__aeabi_f2d>
 804c87c:	4602      	mov	r2, r0
 804c87e:	460b      	mov	r3, r1
 804c880:	e9cd 2304 	strd	r2, r3, [sp, #16]
 804c884:	e9cd 8902 	strd	r8, r9, [sp, #8]
 804c888:	e9cd 4500 	strd	r4, r5, [sp]
 804c88c:	4652      	mov	r2, sl
 804c88e:	465b      	mov	r3, fp
 804c890:	480b      	ldr	r0, [pc, #44]	; (804c8c0 <rotv_publish_sensor_data+0xc4>)
 804c892:	f014 f86f 	bl	8060974 <iprintf>

    osMessageQueuePut(rot_v_init_parms->SensorDataQHandle, &sensor_data, 0, 0);
 804c896:	4b0b      	ldr	r3, [pc, #44]	; (804c8c4 <rotv_publish_sensor_data+0xc8>)
 804c898:	681b      	ldr	r3, [r3, #0]
 804c89a:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 804c89e:	f107 0108 	add.w	r1, r7, #8
 804c8a2:	2300      	movs	r3, #0
 804c8a4:	2200      	movs	r2, #0
 804c8a6:	f009 fdad 	bl	8056404 <osMessageQueuePut>
  }
  return SENSOR_SUCCESS;
 804c8aa:	2300      	movs	r3, #0
}
 804c8ac:	4618      	mov	r0, r3
 804c8ae:	3758      	adds	r7, #88	; 0x58
 804c8b0:	46bd      	mov	sp, r7
 804c8b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 804c8b6:	bf00      	nop
 804c8b8:	2000818d 	.word	0x2000818d
 804c8bc:	2000789c 	.word	0x2000789c
 804c8c0:	08065df4 	.word	0x08065df4
 804c8c4:	200080b8 	.word	0x200080b8

0804c8c8 <rotv_config>:

int rotv_config(uint8_t config_type, void *para)
{
 804c8c8:	b580      	push	{r7, lr}
 804c8ca:	b086      	sub	sp, #24
 804c8cc:	af00      	add	r7, sp, #0
 804c8ce:	4603      	mov	r3, r0
 804c8d0:	6039      	str	r1, [r7, #0]
 804c8d2:	71fb      	strb	r3, [r7, #7]
  sensors_event_t *sensor_data;
  sensor_data = (sensors_event_t *) para;
 804c8d4:	683b      	ldr	r3, [r7, #0]
 804c8d6:	617b      	str	r3, [r7, #20]
  float raw_data[3] = { 0 };
 804c8d8:	f107 0308 	add.w	r3, r7, #8
 804c8dc:	2200      	movs	r2, #0
 804c8de:	601a      	str	r2, [r3, #0]
 804c8e0:	605a      	str	r2, [r3, #4]
 804c8e2:	609a      	str	r2, [r3, #8]
  if (config_type == SENSOR_CONFIG_DATA) {
 804c8e4:	79fb      	ldrb	r3, [r7, #7]
 804c8e6:	2b07      	cmp	r3, #7
 804c8e8:	d138      	bne.n	804c95c <rotv_config+0x94>
    if (sensor_data->sensor_type == SENSOR_TYPE_ACCELEROMETER) {
 804c8ea:	697b      	ldr	r3, [r7, #20]
 804c8ec:	781b      	ldrb	r3, [r3, #0]
 804c8ee:	2b00      	cmp	r3, #0
 804c8f0:	d111      	bne.n	804c916 <rotv_config+0x4e>
      raw_data[0] = sensor_data->sensor_data_t.vec.acceleration.v[0];
 804c8f2:	697b      	ldr	r3, [r7, #20]
 804c8f4:	691b      	ldr	r3, [r3, #16]
 804c8f6:	60bb      	str	r3, [r7, #8]
      raw_data[1] = sensor_data->sensor_data_t.vec.acceleration.v[1];
 804c8f8:	697b      	ldr	r3, [r7, #20]
 804c8fa:	695b      	ldr	r3, [r3, #20]
 804c8fc:	60fb      	str	r3, [r7, #12]
      raw_data[2] = sensor_data->sensor_data_t.vec.acceleration.v[2];
 804c8fe:	697b      	ldr	r3, [r7, #20]
 804c900:	699b      	ldr	r3, [r3, #24]
 804c902:	613b      	str	r3, [r7, #16]

      rot_v_fusion_acc(sensor_data->timestamp, raw_data);
 804c904:	697b      	ldr	r3, [r7, #20]
 804c906:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 804c90a:	f107 0308 	add.w	r3, r7, #8
 804c90e:	461a      	mov	r2, r3
 804c910:	f7ff fcfc 	bl	804c30c <rot_v_fusion_acc>
 804c914:	e022      	b.n	804c95c <rotv_config+0x94>

    } else if (sensor_data->sensor_type == SENSOR_TYPE_GYROSCOPE) {
 804c916:	697b      	ldr	r3, [r7, #20]
 804c918:	781b      	ldrb	r3, [r3, #0]
 804c91a:	2b02      	cmp	r3, #2
 804c91c:	d111      	bne.n	804c942 <rotv_config+0x7a>
      raw_data[0] = sensor_data->sensor_data_t.vec.gyro.v[0];
 804c91e:	697b      	ldr	r3, [r7, #20]
 804c920:	691b      	ldr	r3, [r3, #16]
 804c922:	60bb      	str	r3, [r7, #8]
      raw_data[1] = sensor_data->sensor_data_t.vec.gyro.v[1];
 804c924:	697b      	ldr	r3, [r7, #20]
 804c926:	695b      	ldr	r3, [r3, #20]
 804c928:	60fb      	str	r3, [r7, #12]
      raw_data[2] = sensor_data->sensor_data_t.vec.gyro.v[2];
 804c92a:	697b      	ldr	r3, [r7, #20]
 804c92c:	699b      	ldr	r3, [r3, #24]
 804c92e:	613b      	str	r3, [r7, #16]

      rot_v_fusion_gyro(sensor_data->timestamp, raw_data);
 804c930:	697b      	ldr	r3, [r7, #20]
 804c932:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 804c936:	f107 0308 	add.w	r3, r7, #8
 804c93a:	461a      	mov	r2, r3
 804c93c:	f7ff fdc8 	bl	804c4d0 <rot_v_fusion_gyro>
 804c940:	e00c      	b.n	804c95c <rotv_config+0x94>

    } else if (sensor_data->sensor_type == SENSOR_TYPE_MAGNETIC_FIELD) {
 804c942:	697b      	ldr	r3, [r7, #20]
 804c944:	781b      	ldrb	r3, [r3, #0]
 804c946:	2b01      	cmp	r3, #1
 804c948:	d108      	bne.n	804c95c <rotv_config+0x94>
      raw_data[0] = sensor_data->sensor_data_t.vec.magnetic.v[0];
 804c94a:	697b      	ldr	r3, [r7, #20]
 804c94c:	691b      	ldr	r3, [r3, #16]
 804c94e:	60bb      	str	r3, [r7, #8]
      raw_data[1] = sensor_data->sensor_data_t.vec.magnetic.v[1];
 804c950:	697b      	ldr	r3, [r7, #20]
 804c952:	695b      	ldr	r3, [r3, #20]
 804c954:	60fb      	str	r3, [r7, #12]
      raw_data[2] = sensor_data->sensor_data_t.vec.magnetic.v[2];
 804c956:	697b      	ldr	r3, [r7, #20]
 804c958:	699b      	ldr	r3, [r3, #24]
 804c95a:	613b      	str	r3, [r7, #16]
    }
  }
  return SENSOR_SUCCESS;
 804c95c:	2300      	movs	r3, #0
}
 804c95e:	4618      	mov	r0, r3
 804c960:	3718      	adds	r7, #24
 804c962:	46bd      	mov	sp, r7
 804c964:	bd80      	pop	{r7, pc}

0804c966 <rotv_publish_config_resp>:

int rotv_publish_config_resp(void *para)
{
 804c966:	b480      	push	{r7}
 804c968:	b083      	sub	sp, #12
 804c96a:	af00      	add	r7, sp, #0
 804c96c:	6078      	str	r0, [r7, #4]
  return SENSOR_SUCCESS;
 804c96e:	2300      	movs	r3, #0
}
 804c970:	4618      	mov	r0, r3
 804c972:	370c      	adds	r7, #12
 804c974:	46bd      	mov	sp, r7
 804c976:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c97a:	4770      	bx	lr

0804c97c <sensor_avaiable_check>:
  .sensor_op_ptr = &speedv_ops[0],
};

/* ======================================================================================================= */
bool sensor_avaiable_check(uint8_t sensor_type)
{
 804c97c:	b480      	push	{r7}
 804c97e:	b083      	sub	sp, #12
 804c980:	af00      	add	r7, sp, #0
 804c982:	4603      	mov	r3, r0
 804c984:	71fb      	strb	r3, [r7, #7]
  if (sensor_type == SENSOR_TYPE_MAX) {
 804c986:	79fb      	ldrb	r3, [r7, #7]
 804c988:	2b0f      	cmp	r3, #15
 804c98a:	d101      	bne.n	804c990 <sensor_avaiable_check+0x14>
    return true;
 804c98c:	2301      	movs	r3, #1
 804c98e:	e011      	b.n	804c9b4 <sensor_avaiable_check+0x38>
  } else if (sensor_type < SENSOR_TYPE_MAX) {
 804c990:	79fb      	ldrb	r3, [r7, #7]
 804c992:	2b0e      	cmp	r3, #14
 804c994:	d80d      	bhi.n	804c9b2 <sensor_avaiable_check+0x36>
    if (sensors[sensor_type] != NULL)
 804c996:	79fb      	ldrb	r3, [r7, #7]
 804c998:	4a09      	ldr	r2, [pc, #36]	; (804c9c0 <sensor_avaiable_check+0x44>)
 804c99a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 804c99e:	2b00      	cmp	r3, #0
 804c9a0:	d005      	beq.n	804c9ae <sensor_avaiable_check+0x32>
      return sensors[sensor_type]->init_completed;
 804c9a2:	79fb      	ldrb	r3, [r7, #7]
 804c9a4:	4a06      	ldr	r2, [pc, #24]	; (804c9c0 <sensor_avaiable_check+0x44>)
 804c9a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 804c9aa:	7d1b      	ldrb	r3, [r3, #20]
 804c9ac:	e002      	b.n	804c9b4 <sensor_avaiable_check+0x38>
    else
      return false;
 804c9ae:	2300      	movs	r3, #0
 804c9b0:	e000      	b.n	804c9b4 <sensor_avaiable_check+0x38>
  } else {
    return false;
 804c9b2:	2300      	movs	r3, #0
  }
}
 804c9b4:	4618      	mov	r0, r3
 804c9b6:	370c      	adds	r7, #12
 804c9b8:	46bd      	mov	sp, r7
 804c9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c9be:	4770      	bx	lr
 804c9c0:	2000841c 	.word	0x2000841c

0804c9c4 <sensor_get_index_length>:

  return false;
}

uint8_t sensor_get_index_length(uint8_t sensor_type)
{
 804c9c4:	b480      	push	{r7}
 804c9c6:	b083      	sub	sp, #12
 804c9c8:	af00      	add	r7, sp, #0
 804c9ca:	4603      	mov	r3, r0
 804c9cc:	71fb      	strb	r3, [r7, #7]
  if (sensor_type < SENSOR_TYPE_MAX && sensors[sensor_type] != NULL) {
 804c9ce:	79fb      	ldrb	r3, [r7, #7]
 804c9d0:	2b0e      	cmp	r3, #14
 804c9d2:	d80b      	bhi.n	804c9ec <sensor_get_index_length+0x28>
 804c9d4:	79fb      	ldrb	r3, [r7, #7]
 804c9d6:	4a09      	ldr	r2, [pc, #36]	; (804c9fc <sensor_get_index_length+0x38>)
 804c9d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 804c9dc:	2b00      	cmp	r3, #0
 804c9de:	d005      	beq.n	804c9ec <sensor_get_index_length+0x28>
    return sensors[sensor_type]->axis_num;
 804c9e0:	79fb      	ldrb	r3, [r7, #7]
 804c9e2:	4a06      	ldr	r2, [pc, #24]	; (804c9fc <sensor_get_index_length+0x38>)
 804c9e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 804c9e8:	7d9b      	ldrb	r3, [r3, #22]
 804c9ea:	e000      	b.n	804c9ee <sensor_get_index_length+0x2a>
  } else {
    return 0xFF;
 804c9ec:	23ff      	movs	r3, #255	; 0xff
  }
}
 804c9ee:	4618      	mov	r0, r3
 804c9f0:	370c      	adds	r7, #12
 804c9f2:	46bd      	mov	sp, r7
 804c9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c9f8:	4770      	bx	lr
 804c9fa:	bf00      	nop
 804c9fc:	2000841c 	.word	0x2000841c

0804ca00 <sensor_register>:

/* common register code starts from here */
void sensor_register(platform_prams * parms)
{
 804ca00:	b480      	push	{r7}
 804ca02:	b083      	sub	sp, #12
 804ca04:	af00      	add	r7, sp, #0
 804ca06:	6078      	str	r0, [r7, #4]
  //fill the sensors[SENSOR_TYPE_MAX] data struct for this chip
  platform_init_parms = parms;
 804ca08:	4a19      	ldr	r2, [pc, #100]	; (804ca70 <sensor_register+0x70>)
 804ca0a:	687b      	ldr	r3, [r7, #4]
 804ca0c:	6013      	str	r3, [r2, #0]

  op_timer = &platform_init_parms->OperateTimerHandle;
 804ca0e:	4b18      	ldr	r3, [pc, #96]	; (804ca70 <sensor_register+0x70>)
 804ca10:	681b      	ldr	r3, [r3, #0]
 804ca12:	f503 7382 	add.w	r3, r3, #260	; 0x104
 804ca16:	4a17      	ldr	r2, [pc, #92]	; (804ca74 <sensor_register+0x74>)
 804ca18:	6013      	str	r3, [r2, #0]

  sensors[SENSOR_TYPE_ACCELEROMETER] = &acc_sensor;
 804ca1a:	4b17      	ldr	r3, [pc, #92]	; (804ca78 <sensor_register+0x78>)
 804ca1c:	4a17      	ldr	r2, [pc, #92]	; (804ca7c <sensor_register+0x7c>)
 804ca1e:	601a      	str	r2, [r3, #0]
  sensors[SENSOR_TYPE_GYROSCOPE] = &gyro_sensor;
 804ca20:	4b15      	ldr	r3, [pc, #84]	; (804ca78 <sensor_register+0x78>)
 804ca22:	4a17      	ldr	r2, [pc, #92]	; (804ca80 <sensor_register+0x80>)
 804ca24:	609a      	str	r2, [r3, #8]
  sensors[SENSOR_TYPE_MAGNETIC_FIELD] = &mag_sensor;
 804ca26:	4b14      	ldr	r3, [pc, #80]	; (804ca78 <sensor_register+0x78>)
 804ca28:	4a16      	ldr	r2, [pc, #88]	; (804ca84 <sensor_register+0x84>)
 804ca2a:	605a      	str	r2, [r3, #4]
  sensors[SENSOR_TYPE_LIGHT] = &light_sensor;
 804ca2c:	4b12      	ldr	r3, [pc, #72]	; (804ca78 <sensor_register+0x78>)
 804ca2e:	4a16      	ldr	r2, [pc, #88]	; (804ca88 <sensor_register+0x88>)
 804ca30:	60da      	str	r2, [r3, #12]
  sensors[SENSOR_TYPE_LED_HEAD] = &head_led_sensor;
 804ca32:	4b11      	ldr	r3, [pc, #68]	; (804ca78 <sensor_register+0x78>)
 804ca34:	4a15      	ldr	r2, [pc, #84]	; (804ca8c <sensor_register+0x8c>)
 804ca36:	611a      	str	r2, [r3, #16]
  sensors[SENSOR_TYPE_LED_REAR] = &rear_led_sensor;
 804ca38:	4b0f      	ldr	r3, [pc, #60]	; (804ca78 <sensor_register+0x78>)
 804ca3a:	4a15      	ldr	r2, [pc, #84]	; (804ca90 <sensor_register+0x90>)
 804ca3c:	625a      	str	r2, [r3, #36]	; 0x24
  sensors[SENSOR_TYPE_PROXIMITY_HEAD] = &head_prox_sensor;
 804ca3e:	4b0e      	ldr	r3, [pc, #56]	; (804ca78 <sensor_register+0x78>)
 804ca40:	4a14      	ldr	r2, [pc, #80]	; (804ca94 <sensor_register+0x94>)
 804ca42:	615a      	str	r2, [r3, #20]
  sensors[SENSOR_TYPE_PROXIMITY_REAR] = &rear_prox_sensor;
 804ca44:	4b0c      	ldr	r3, [pc, #48]	; (804ca78 <sensor_register+0x78>)
 804ca46:	4a14      	ldr	r2, [pc, #80]	; (804ca98 <sensor_register+0x98>)
 804ca48:	61da      	str	r2, [r3, #28]
  sensors[SENSOR_TYPE_LIGHT_SPEED] = &optical_sensor;
 804ca4a:	4b0b      	ldr	r3, [pc, #44]	; (804ca78 <sensor_register+0x78>)
 804ca4c:	4a13      	ldr	r2, [pc, #76]	; (804ca9c <sensor_register+0x9c>)
 804ca4e:	621a      	str	r2, [r3, #32]
  sensors[SENSOR_TYPE_ROTATION_VECTOR] = &rotv_sensor;
 804ca50:	4b09      	ldr	r3, [pc, #36]	; (804ca78 <sensor_register+0x78>)
 804ca52:	4a13      	ldr	r2, [pc, #76]	; (804caa0 <sensor_register+0xa0>)
 804ca54:	635a      	str	r2, [r3, #52]	; 0x34
  sensors[SENSOR_TYPE_SPEED_VECTOR] = &speedv_sensor;
 804ca56:	4b08      	ldr	r3, [pc, #32]	; (804ca78 <sensor_register+0x78>)
 804ca58:	4a12      	ldr	r2, [pc, #72]	; (804caa4 <sensor_register+0xa4>)
 804ca5a:	639a      	str	r2, [r3, #56]	; 0x38

  sensors[SENSOR_TYPE_PROXIMITY_BOT] = &tof_sensor;
 804ca5c:	4b06      	ldr	r3, [pc, #24]	; (804ca78 <sensor_register+0x78>)
 804ca5e:	4a12      	ldr	r2, [pc, #72]	; (804caa8 <sensor_register+0xa8>)
 804ca60:	619a      	str	r2, [r3, #24]
  //register_acc_gyro(/* pointer to bus, pointer to sensor manager Q*/);
  //register_mag(/* pointer to bus, pointer to sensor manager Q*/);
  //register_als(/* pointer to bus, pointer to sensor manager Q*/);
}
 804ca62:	bf00      	nop
 804ca64:	370c      	adds	r7, #12
 804ca66:	46bd      	mov	sp, r7
 804ca68:	f85d 7b04 	ldr.w	r7, [sp], #4
 804ca6c:	4770      	bx	lr
 804ca6e:	bf00      	nop
 804ca70:	2000845c 	.word	0x2000845c
 804ca74:	2001c2cc 	.word	0x2001c2cc
 804ca78:	2000841c 	.word	0x2000841c
 804ca7c:	20007970 	.word	0x20007970
 804ca80:	20007924 	.word	0x20007924
 804ca84:	200079bc 	.word	0x200079bc
 804ca88:	20007a08 	.word	0x20007a08
 804ca8c:	20007ad0 	.word	0x20007ad0
 804ca90:	20007aec 	.word	0x20007aec
 804ca94:	20007b38 	.word	0x20007b38
 804ca98:	20007b54 	.word	0x20007b54
 804ca9c:	20007a54 	.word	0x20007a54
 804caa0:	20007bec 	.word	0x20007bec
 804caa4:	20007c38 	.word	0x20007c38
 804caa8:	20007ba0 	.word	0x20007ba0

0804caac <init_registered_sensors>:

void init_registered_sensors()
{
 804caac:	b5b0      	push	{r4, r5, r7, lr}
 804caae:	b09a      	sub	sp, #104	; 0x68
 804cab0:	af00      	add	r7, sp, #0
  int res = SENSOR_SUCCESS;
 804cab2:	2300      	movs	r3, #0
 804cab4:	65fb      	str	r3, [r7, #92]	; 0x5c
  sensor_message_event_t sensor_msg_event;

  if (platform_init_parms != NULL) {
 804cab6:	4b59      	ldr	r3, [pc, #356]	; (804cc1c <init_registered_sensors+0x170>)
 804cab8:	681b      	ldr	r3, [r3, #0]
 804caba:	2b00      	cmp	r3, #0
 804cabc:	f000 80a9 	beq.w	804cc12 <init_registered_sensors+0x166>
    for (int i = 0; i < SENSOR_TYPE_MAX; i++) {
 804cac0:	2300      	movs	r3, #0
 804cac2:	667b      	str	r3, [r7, #100]	; 0x64
 804cac4:	e095      	b.n	804cbf2 <init_registered_sensors+0x146>
      if (sensors[i] != NULL) {
 804cac6:	4a56      	ldr	r2, [pc, #344]	; (804cc20 <init_registered_sensors+0x174>)
 804cac8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 804caca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 804cace:	2b00      	cmp	r3, #0
 804cad0:	f000 808c 	beq.w	804cbec <init_registered_sensors+0x140>
        if (platform_init_parms->boardID == REAR_BOARD && (i == 4 || i == 5)) { // REAR BOARD skip led and proximity on HEAD
 804cad4:	4b51      	ldr	r3, [pc, #324]	; (804cc1c <init_registered_sensors+0x170>)
 804cad6:	681b      	ldr	r3, [r3, #0]
 804cad8:	781b      	ldrb	r3, [r3, #0]
 804cada:	2b00      	cmp	r3, #0
 804cadc:	d105      	bne.n	804caea <init_registered_sensors+0x3e>
 804cade:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 804cae0:	2b04      	cmp	r3, #4
 804cae2:	d07e      	beq.n	804cbe2 <init_registered_sensors+0x136>
 804cae4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 804cae6:	2b05      	cmp	r3, #5
 804cae8:	d07b      	beq.n	804cbe2 <init_registered_sensors+0x136>
          continue;
        }
        if (platform_init_parms->boardID == HEAD_BOARD && (i == 9 || i == 7)) { // HEAD BOARD skip led and proximity on REAR
 804caea:	4b4c      	ldr	r3, [pc, #304]	; (804cc1c <init_registered_sensors+0x170>)
 804caec:	681b      	ldr	r3, [r3, #0]
 804caee:	781b      	ldrb	r3, [r3, #0]
 804caf0:	2b03      	cmp	r3, #3
 804caf2:	d105      	bne.n	804cb00 <init_registered_sensors+0x54>
 804caf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 804caf6:	2b09      	cmp	r3, #9
 804caf8:	d075      	beq.n	804cbe6 <init_registered_sensors+0x13a>
 804cafa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 804cafc:	2b07      	cmp	r3, #7
 804cafe:	d072      	beq.n	804cbe6 <init_registered_sensors+0x13a>
          continue;
        }
        if (sensors[i]->init_completed) {
 804cb00:	4a47      	ldr	r2, [pc, #284]	; (804cc20 <init_registered_sensors+0x174>)
 804cb02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 804cb04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 804cb08:	7d1b      	ldrb	r3, [r3, #20]
 804cb0a:	2b00      	cmp	r3, #0
 804cb0c:	d16d      	bne.n	804cbea <init_registered_sensors+0x13e>
          continue;
        }

        for (int j = 0; j < MAX_AUTO_DETECT_DEV_NUM; j++) {
 804cb0e:	2300      	movs	r3, #0
 804cb10:	663b      	str	r3, [r7, #96]	; 0x60
 804cb12:	e062      	b.n	804cbda <init_registered_sensors+0x12e>
          if (sensors[i]->sensor_op_ptr[j].init != NULL) {
 804cb14:	4a42      	ldr	r2, [pc, #264]	; (804cc20 <init_registered_sensors+0x174>)
 804cb16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 804cb18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 804cb1c:	6999      	ldr	r1, [r3, #24]
 804cb1e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 804cb20:	4613      	mov	r3, r2
 804cb22:	005b      	lsls	r3, r3, #1
 804cb24:	4413      	add	r3, r2
 804cb26:	00db      	lsls	r3, r3, #3
 804cb28:	440b      	add	r3, r1
 804cb2a:	681b      	ldr	r3, [r3, #0]
 804cb2c:	2b00      	cmp	r3, #0
 804cb2e:	d051      	beq.n	804cbd4 <init_registered_sensors+0x128>
            res =
                sensors[i]->sensor_op_ptr[j].init(platform_init_parms, sensors);
 804cb30:	4a3b      	ldr	r2, [pc, #236]	; (804cc20 <init_registered_sensors+0x174>)
 804cb32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 804cb34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 804cb38:	6999      	ldr	r1, [r3, #24]
 804cb3a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 804cb3c:	4613      	mov	r3, r2
 804cb3e:	005b      	lsls	r3, r3, #1
 804cb40:	4413      	add	r3, r2
 804cb42:	00db      	lsls	r3, r3, #3
 804cb44:	440b      	add	r3, r1
 804cb46:	681b      	ldr	r3, [r3, #0]
 804cb48:	4a34      	ldr	r2, [pc, #208]	; (804cc1c <init_registered_sensors+0x170>)
 804cb4a:	6812      	ldr	r2, [r2, #0]
 804cb4c:	4934      	ldr	r1, [pc, #208]	; (804cc20 <init_registered_sensors+0x174>)
 804cb4e:	4610      	mov	r0, r2
 804cb50:	4798      	blx	r3
 804cb52:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (res == SENSOR_SUCCESS) {
 804cb54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 804cb56:	2b00      	cmp	r3, #0
 804cb58:	d13c      	bne.n	804cbd4 <init_registered_sensors+0x128>
              res =
                  sensors[i]->sensor_op_ptr[j].
 804cb5a:	4a31      	ldr	r2, [pc, #196]	; (804cc20 <init_registered_sensors+0x174>)
 804cb5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 804cb5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 804cb62:	6999      	ldr	r1, [r3, #24]
 804cb64:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 804cb66:	4613      	mov	r3, r2
 804cb68:	005b      	lsls	r3, r3, #1
 804cb6a:	4413      	add	r3, r2
 804cb6c:	00db      	lsls	r3, r3, #3
 804cb6e:	440b      	add	r3, r1
 804cb70:	685b      	ldr	r3, [r3, #4]
 804cb72:	4a2a      	ldr	r2, [pc, #168]	; (804cc1c <init_registered_sensors+0x170>)
 804cb74:	6812      	ldr	r2, [r2, #0]
 804cb76:	4610      	mov	r0, r2
 804cb78:	4798      	blx	r3
 804cb7a:	65f8      	str	r0, [r7, #92]	; 0x5c
                  init_complete(platform_init_parms);
              sensorAvaiableBitMask = sensorAvaiableBitMask | (1 << i);
 804cb7c:	2201      	movs	r2, #1
 804cb7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 804cb80:	fa02 f303 	lsl.w	r3, r2, r3
 804cb84:	b21a      	sxth	r2, r3
 804cb86:	4b27      	ldr	r3, [pc, #156]	; (804cc24 <init_registered_sensors+0x178>)
 804cb88:	881b      	ldrh	r3, [r3, #0]
 804cb8a:	b21b      	sxth	r3, r3
 804cb8c:	4313      	orrs	r3, r2
 804cb8e:	b21b      	sxth	r3, r3
 804cb90:	b29a      	uxth	r2, r3
 804cb92:	4b24      	ldr	r3, [pc, #144]	; (804cc24 <init_registered_sensors+0x178>)
 804cb94:	801a      	strh	r2, [r3, #0]
              //always set the avaiable sensor_op_ptr to index 0 of array so that it is sample for smgr to use
              sensors[i]->sensor_op_ptr[0] = sensors[i]->sensor_op_ptr[j];
 804cb96:	4a22      	ldr	r2, [pc, #136]	; (804cc20 <init_registered_sensors+0x174>)
 804cb98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 804cb9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 804cb9e:	6999      	ldr	r1, [r3, #24]
 804cba0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 804cba2:	4613      	mov	r3, r2
 804cba4:	005b      	lsls	r3, r3, #1
 804cba6:	4413      	add	r3, r2
 804cba8:	00db      	lsls	r3, r3, #3
 804cbaa:	4419      	add	r1, r3
 804cbac:	4a1c      	ldr	r2, [pc, #112]	; (804cc20 <init_registered_sensors+0x174>)
 804cbae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 804cbb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 804cbb4:	699b      	ldr	r3, [r3, #24]
 804cbb6:	461c      	mov	r4, r3
 804cbb8:	460d      	mov	r5, r1
 804cbba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 804cbbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 804cbbe:	e895 0003 	ldmia.w	r5, {r0, r1}
 804cbc2:	e884 0003 	stmia.w	r4, {r0, r1}
              sensors[i]->init_completed = true;
 804cbc6:	4a16      	ldr	r2, [pc, #88]	; (804cc20 <init_registered_sensors+0x174>)
 804cbc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 804cbca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 804cbce:	2201      	movs	r2, #1
 804cbd0:	751a      	strb	r2, [r3, #20]
              break;
 804cbd2:	e00b      	b.n	804cbec <init_registered_sensors+0x140>
        for (int j = 0; j < MAX_AUTO_DETECT_DEV_NUM; j++) {
 804cbd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 804cbd6:	3301      	adds	r3, #1
 804cbd8:	663b      	str	r3, [r7, #96]	; 0x60
 804cbda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 804cbdc:	2b01      	cmp	r3, #1
 804cbde:	dd99      	ble.n	804cb14 <init_registered_sensors+0x68>
 804cbe0:	e004      	b.n	804cbec <init_registered_sensors+0x140>
          continue;
 804cbe2:	bf00      	nop
 804cbe4:	e002      	b.n	804cbec <init_registered_sensors+0x140>
          continue;
 804cbe6:	bf00      	nop
 804cbe8:	e000      	b.n	804cbec <init_registered_sensors+0x140>
          continue;
 804cbea:	bf00      	nop
    for (int i = 0; i < SENSOR_TYPE_MAX; i++) {
 804cbec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 804cbee:	3301      	adds	r3, #1
 804cbf0:	667b      	str	r3, [r7, #100]	; 0x64
 804cbf2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 804cbf4:	2b0e      	cmp	r3, #14
 804cbf6:	f77f af66 	ble.w	804cac6 <init_registered_sensors+0x1a>
            }
          }
        }
      }
    }
    sensor_msg_event.message_event_type = SENSOR_INIT_COMPLETE_EVENT;
 804cbfa:	230a      	movs	r3, #10
 804cbfc:	703b      	strb	r3, [r7, #0]
    //notifiy smgr that init is completed
    osMessageQueuePut(platform_init_parms->SensorMessageQHandle,
 804cbfe:	4b07      	ldr	r3, [pc, #28]	; (804cc1c <init_registered_sensors+0x170>)
 804cc00:	681b      	ldr	r3, [r3, #0]
 804cc02:	f8d3 00f4 	ldr.w	r0, [r3, #244]	; 0xf4
 804cc06:	4639      	mov	r1, r7
 804cc08:	2300      	movs	r3, #0
 804cc0a:	2200      	movs	r2, #0
 804cc0c:	f009 fbfa 	bl	8056404 <osMessageQueuePut>
                      &sensor_msg_event, 0, 0);
  } else {
    //sensor_register is not called successfully
  }
  return;
 804cc10:	bf00      	nop
 804cc12:	bf00      	nop
}
 804cc14:	3768      	adds	r7, #104	; 0x68
 804cc16:	46bd      	mov	sp, r7
 804cc18:	bdb0      	pop	{r4, r5, r7, pc}
 804cc1a:	bf00      	nop
 804cc1c:	2000845c 	.word	0x2000845c
 804cc20:	2000841c 	.word	0x2000841c
 804cc24:	2000845a 	.word	0x2000845a

0804cc28 <sensor_op_timer_enable>:

int sensor_op_timer_enable(TIM_HandleTypeDef * htim)
{
 804cc28:	b580      	push	{r7, lr}
 804cc2a:	b084      	sub	sp, #16
 804cc2c:	af00      	add	r7, sp, #0
 804cc2e:	6078      	str	r0, [r7, #4]
  int res = SENSOR_SUCCESS;
 804cc30:	2300      	movs	r3, #0
 804cc32:	60fb      	str	r3, [r7, #12]

  if (htim == op_timer) {
 804cc34:	4b0d      	ldr	r3, [pc, #52]	; (804cc6c <sensor_op_timer_enable+0x44>)
 804cc36:	681b      	ldr	r3, [r3, #0]
 804cc38:	687a      	ldr	r2, [r7, #4]
 804cc3a:	429a      	cmp	r2, r3
 804cc3c:	d10d      	bne.n	804cc5a <sensor_op_timer_enable+0x32>
    if (platform_timer_enable_count == 0) {
 804cc3e:	4b0c      	ldr	r3, [pc, #48]	; (804cc70 <sensor_op_timer_enable+0x48>)
 804cc40:	881b      	ldrh	r3, [r3, #0]
 804cc42:	2b00      	cmp	r3, #0
 804cc44:	d102      	bne.n	804cc4c <sensor_op_timer_enable+0x24>
      HAL_TIM_Base_Start_IT(htim);
 804cc46:	6878      	ldr	r0, [r7, #4]
 804cc48:	f007 f96e 	bl	8053f28 <HAL_TIM_Base_Start_IT>
    }
    platform_timer_enable_count++;
 804cc4c:	4b08      	ldr	r3, [pc, #32]	; (804cc70 <sensor_op_timer_enable+0x48>)
 804cc4e:	881b      	ldrh	r3, [r3, #0]
 804cc50:	3301      	adds	r3, #1
 804cc52:	b29a      	uxth	r2, r3
 804cc54:	4b06      	ldr	r3, [pc, #24]	; (804cc70 <sensor_op_timer_enable+0x48>)
 804cc56:	801a      	strh	r2, [r3, #0]
 804cc58:	e002      	b.n	804cc60 <sensor_op_timer_enable+0x38>
  } else {
    res = SENSOR_FAILED;
 804cc5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 804cc5e:	60fb      	str	r3, [r7, #12]
  }

  return res;
 804cc60:	68fb      	ldr	r3, [r7, #12]
}
 804cc62:	4618      	mov	r0, r3
 804cc64:	3710      	adds	r7, #16
 804cc66:	46bd      	mov	sp, r7
 804cc68:	bd80      	pop	{r7, pc}
 804cc6a:	bf00      	nop
 804cc6c:	2001c2cc 	.word	0x2001c2cc
 804cc70:	20008460 	.word	0x20008460

0804cc74 <sensor_op_timer_disable>:

int sensor_op_timer_disable(TIM_HandleTypeDef * htim)
{
 804cc74:	b580      	push	{r7, lr}
 804cc76:	b084      	sub	sp, #16
 804cc78:	af00      	add	r7, sp, #0
 804cc7a:	6078      	str	r0, [r7, #4]
  int res = SENSOR_SUCCESS;
 804cc7c:	2300      	movs	r3, #0
 804cc7e:	60fb      	str	r3, [r7, #12]

  if (htim == op_timer) {
 804cc80:	4b10      	ldr	r3, [pc, #64]	; (804ccc4 <sensor_op_timer_disable+0x50>)
 804cc82:	681b      	ldr	r3, [r3, #0]
 804cc84:	687a      	ldr	r2, [r7, #4]
 804cc86:	429a      	cmp	r2, r3
 804cc88:	d114      	bne.n	804ccb4 <sensor_op_timer_disable+0x40>
    if (platform_timer_enable_count == 0) {
 804cc8a:	4b0f      	ldr	r3, [pc, #60]	; (804ccc8 <sensor_op_timer_disable+0x54>)
 804cc8c:	881b      	ldrh	r3, [r3, #0]
 804cc8e:	2b00      	cmp	r3, #0
 804cc90:	d102      	bne.n	804cc98 <sensor_op_timer_disable+0x24>
      return SENSOR_FAILED;
 804cc92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 804cc96:	e011      	b.n	804ccbc <sensor_op_timer_disable+0x48>
    }
    platform_timer_enable_count--;
 804cc98:	4b0b      	ldr	r3, [pc, #44]	; (804ccc8 <sensor_op_timer_disable+0x54>)
 804cc9a:	881b      	ldrh	r3, [r3, #0]
 804cc9c:	3b01      	subs	r3, #1
 804cc9e:	b29a      	uxth	r2, r3
 804cca0:	4b09      	ldr	r3, [pc, #36]	; (804ccc8 <sensor_op_timer_disable+0x54>)
 804cca2:	801a      	strh	r2, [r3, #0]
    if (platform_timer_enable_count == 0) {
 804cca4:	4b08      	ldr	r3, [pc, #32]	; (804ccc8 <sensor_op_timer_disable+0x54>)
 804cca6:	881b      	ldrh	r3, [r3, #0]
 804cca8:	2b00      	cmp	r3, #0
 804ccaa:	d106      	bne.n	804ccba <sensor_op_timer_disable+0x46>
      HAL_TIM_Base_Stop_IT(htim);
 804ccac:	6878      	ldr	r0, [r7, #4]
 804ccae:	f007 f9ab 	bl	8054008 <HAL_TIM_Base_Stop_IT>
 804ccb2:	e002      	b.n	804ccba <sensor_op_timer_disable+0x46>
    }
  } else {
    res = SENSOR_FAILED;
 804ccb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 804ccb8:	60fb      	str	r3, [r7, #12]
  }
  return res;
 804ccba:	68fb      	ldr	r3, [r7, #12]
}
 804ccbc:	4618      	mov	r0, r3
 804ccbe:	3710      	adds	r7, #16
 804ccc0:	46bd      	mov	sp, r7
 804ccc2:	bd80      	pop	{r7, pc}
 804ccc4:	2001c2cc 	.word	0x2001c2cc
 804ccc8:	20008460 	.word	0x20008460

0804cccc <sensor_config>:

int sensor_config(config_event_t config_event)
{
 804cccc:	b084      	sub	sp, #16
 804ccce:	b580      	push	{r7, lr}
 804ccd0:	b0a4      	sub	sp, #144	; 0x90
 804ccd2:	af00      	add	r7, sp, #0
 804ccd4:	f107 0c98 	add.w	ip, r7, #152	; 0x98
 804ccd8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  int res = SENSOR_SUCCESS;
 804ccdc:	2300      	movs	r3, #0
 804ccde:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  sensor_message_event_t sensor_msg_event;

  printf("config: %d, %d \r\n", config_event.config_type,
 804cce2:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 804cce6:	4619      	mov	r1, r3
         config_event.sensor_type);
 804cce8:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
  printf("config: %d, %d \r\n", config_event.config_type,
 804ccec:	461a      	mov	r2, r3
 804ccee:	48c4      	ldr	r0, [pc, #784]	; (804d000 <sensor_config+0x334>)
 804ccf0:	f013 fe40 	bl	8060974 <iprintf>

  switch (config_event.config_type) {
 804ccf4:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 804ccf8:	2b09      	cmp	r3, #9
 804ccfa:	f200 840b 	bhi.w	804d514 <sensor_config+0x848>
 804ccfe:	a201      	add	r2, pc, #4	; (adr r2, 804cd04 <sensor_config+0x38>)
 804cd00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804cd04:	0804d069 	.word	0x0804d069
 804cd08:	0804cd8d 	.word	0x0804cd8d
 804cd0c:	0804d305 	.word	0x0804d305
 804cd10:	0804d305 	.word	0x0804d305
 804cd14:	0804d4b1 	.word	0x0804d4b1
 804cd18:	0804d515 	.word	0x0804d515
 804cd1c:	0804d439 	.word	0x0804d439
 804cd20:	0804d515 	.word	0x0804d515
 804cd24:	0804d4b1 	.word	0x0804d4b1
 804cd28:	0804cd2d 	.word	0x0804cd2d
  case SENSOR_LED_MODE_CONFIG:
    if (config_event.sensor_type == SENSOR_TYPE_LED_HEAD
 804cd2c:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 804cd30:	2b04      	cmp	r3, #4
 804cd32:	d004      	beq.n	804cd3e <sensor_config+0x72>
        || config_event.sensor_type == SENSOR_TYPE_LED_REAR) {
 804cd34:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 804cd38:	2b09      	cmp	r3, #9
 804cd3a:	f040 83ed 	bne.w	804d518 <sensor_config+0x84c>
      if (platform_init_parms != NULL) {
 804cd3e:	4bb1      	ldr	r3, [pc, #708]	; (804d004 <sensor_config+0x338>)
 804cd40:	681b      	ldr	r3, [r3, #0]
 804cd42:	2b00      	cmp	r3, #0
 804cd44:	d020      	beq.n	804cd88 <sensor_config+0xbc>
        if (sensors[config_event.sensor_type] != NULL) {
 804cd46:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 804cd4a:	461a      	mov	r2, r3
 804cd4c:	4bae      	ldr	r3, [pc, #696]	; (804d008 <sensor_config+0x33c>)
 804cd4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804cd52:	2b00      	cmp	r3, #0
 804cd54:	d018      	beq.n	804cd88 <sensor_config+0xbc>
          if (sensors[config_event.sensor_type]->init_completed) {
 804cd56:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 804cd5a:	461a      	mov	r2, r3
 804cd5c:	4baa      	ldr	r3, [pc, #680]	; (804d008 <sensor_config+0x33c>)
 804cd5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804cd62:	7d1b      	ldrb	r3, [r3, #20]
 804cd64:	2b00      	cmp	r3, #0
 804cd66:	d00f      	beq.n	804cd88 <sensor_config+0xbc>
            res =
                sensors[config_event.sensor_type]->sensor_op_ptr[0].
 804cd68:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 804cd6c:	461a      	mov	r2, r3
 804cd6e:	4ba6      	ldr	r3, [pc, #664]	; (804d008 <sensor_config+0x33c>)
 804cd70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804cd74:	699b      	ldr	r3, [r3, #24]
 804cd76:	691b      	ldr	r3, [r3, #16]
                config(config_event.config_type,
 804cd78:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
                sensors[config_event.sensor_type]->sensor_op_ptr[0].
 804cd7c:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 804cd80:	4610      	mov	r0, r2
 804cd82:	4798      	blx	r3
 804cd84:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
                       config_event.cfg_data.config_data_u8);
          }
        }
      }
      return SENSOR_SUCCESS;
 804cd88:	2300      	movs	r3, #0
 804cd8a:	e3d0      	b.n	804d52e <sensor_config+0x862>
    }
    break;
  case SENSOR_ACTIVATE:
    if (config_event.sensor_type == SENSOR_TYPE_MAX) {
 804cd8c:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 804cd90:	2b0f      	cmp	r3, #15
 804cd92:	f040 80a1 	bne.w	804ced8 <sensor_config+0x20c>
      //default setting to run all sensor when start
      if (platform_init_parms != NULL) {
 804cd96:	4b9b      	ldr	r3, [pc, #620]	; (804d004 <sensor_config+0x338>)
 804cd98:	681b      	ldr	r3, [r3, #0]
 804cd9a:	2b00      	cmp	r3, #0
 804cd9c:	f000 8098 	beq.w	804ced0 <sensor_config+0x204>
        for (int i = 0; i < SENSOR_TYPE_MAX; i++) {
 804cda0:	2300      	movs	r3, #0
 804cda2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 804cda6:	e07d      	b.n	804cea4 <sensor_config+0x1d8>
          if (sensors[i] != NULL) {
 804cda8:	4a97      	ldr	r2, [pc, #604]	; (804d008 <sensor_config+0x33c>)
 804cdaa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 804cdae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 804cdb2:	2b00      	cmp	r3, #0
 804cdb4:	d071      	beq.n	804ce9a <sensor_config+0x1ce>
            if (!sensors[i]->init_completed) {
 804cdb6:	4a94      	ldr	r2, [pc, #592]	; (804d008 <sensor_config+0x33c>)
 804cdb8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 804cdbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 804cdc0:	7d1b      	ldrb	r3, [r3, #20]
 804cdc2:	f083 0301 	eor.w	r3, r3, #1
 804cdc6:	b2db      	uxtb	r3, r3
 804cdc8:	2b00      	cmp	r3, #0
 804cdca:	d163      	bne.n	804ce94 <sensor_config+0x1c8>
              continue;
            }
            if (sensors[i]->sensor_op_ptr[0].activate != NULL) {
 804cdcc:	4a8e      	ldr	r2, [pc, #568]	; (804d008 <sensor_config+0x33c>)
 804cdce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 804cdd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 804cdd6:	699b      	ldr	r3, [r3, #24]
 804cdd8:	689b      	ldr	r3, [r3, #8]
 804cdda:	2b00      	cmp	r3, #0
 804cddc:	d05d      	beq.n	804ce9a <sensor_config+0x1ce>
              if (sensors[i]->activate_count == 0) {
 804cdde:	4a8a      	ldr	r2, [pc, #552]	; (804d008 <sensor_config+0x33c>)
 804cde0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 804cde4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 804cde8:	f993 3005 	ldrsb.w	r3, [r3, #5]
 804cdec:	2b00      	cmp	r3, #0
 804cdee:	d137      	bne.n	804ce60 <sensor_config+0x194>
                res = sensors[i]->sensor_op_ptr[0].activate(true);
 804cdf0:	4a85      	ldr	r2, [pc, #532]	; (804d008 <sensor_config+0x33c>)
 804cdf2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 804cdf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 804cdfa:	699b      	ldr	r3, [r3, #24]
 804cdfc:	689b      	ldr	r3, [r3, #8]
 804cdfe:	2001      	movs	r0, #1
 804ce00:	4798      	blx	r3
 804ce02:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
                if (res == SENSOR_SUCCESS) {
 804ce06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 804ce0a:	2b00      	cmp	r3, #0
 804ce0c:	d144      	bne.n	804ce98 <sensor_config+0x1cc>
                  sensors[i]->activate_count++;
 804ce0e:	4a7e      	ldr	r2, [pc, #504]	; (804d008 <sensor_config+0x33c>)
 804ce10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 804ce14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 804ce18:	f993 2005 	ldrsb.w	r2, [r3, #5]
 804ce1c:	b2d2      	uxtb	r2, r2
 804ce1e:	3201      	adds	r2, #1
 804ce20:	b2d2      	uxtb	r2, r2
 804ce22:	b252      	sxtb	r2, r2
 804ce24:	715a      	strb	r2, [r3, #5]
                  sensorEnabledBitMask = sensorEnabledBitMask | (1 << i);
 804ce26:	2201      	movs	r2, #1
 804ce28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 804ce2c:	fa02 f303 	lsl.w	r3, r2, r3
 804ce30:	b21a      	sxth	r2, r3
 804ce32:	4b76      	ldr	r3, [pc, #472]	; (804d00c <sensor_config+0x340>)
 804ce34:	881b      	ldrh	r3, [r3, #0]
 804ce36:	b21b      	sxth	r3, r3
 804ce38:	4313      	orrs	r3, r2
 804ce3a:	b21b      	sxth	r3, r3
 804ce3c:	b29a      	uxth	r2, r3
 804ce3e:	4b73      	ldr	r3, [pc, #460]	; (804d00c <sensor_config+0x340>)
 804ce40:	801a      	strh	r2, [r3, #0]
                  sensors[i]->activate = true;
 804ce42:	4a71      	ldr	r2, [pc, #452]	; (804d008 <sensor_config+0x33c>)
 804ce44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 804ce48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 804ce4c:	2201      	movs	r2, #1
 804ce4e:	711a      	strb	r2, [r3, #4]
                  sensors[i]->sample_rate = DEFAULE_SAMPLE_RATE_MS;
 804ce50:	4a6d      	ldr	r2, [pc, #436]	; (804d008 <sensor_config+0x33c>)
 804ce52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 804ce56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 804ce5a:	2214      	movs	r2, #20
 804ce5c:	80da      	strh	r2, [r3, #6]
 804ce5e:	e01c      	b.n	804ce9a <sensor_config+0x1ce>
                } else {
                  //continue enable flow
                  continue;
                }
              } else {
                sensors[i]->activate_count++;
 804ce60:	4a69      	ldr	r2, [pc, #420]	; (804d008 <sensor_config+0x33c>)
 804ce62:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 804ce66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 804ce6a:	f993 2005 	ldrsb.w	r2, [r3, #5]
 804ce6e:	b2d2      	uxtb	r2, r2
 804ce70:	3201      	adds	r2, #1
 804ce72:	b2d2      	uxtb	r2, r2
 804ce74:	b252      	sxtb	r2, r2
 804ce76:	715a      	strb	r2, [r3, #5]
                printf("this sensor %d is already enable %d!\r\n", i,
                       sensors[i]->activate_count);
 804ce78:	4a63      	ldr	r2, [pc, #396]	; (804d008 <sensor_config+0x33c>)
 804ce7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 804ce7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 804ce82:	f993 3005 	ldrsb.w	r3, [r3, #5]
                printf("this sensor %d is already enable %d!\r\n", i,
 804ce86:	461a      	mov	r2, r3
 804ce88:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 804ce8c:	4860      	ldr	r0, [pc, #384]	; (804d010 <sensor_config+0x344>)
 804ce8e:	f013 fd71 	bl	8060974 <iprintf>
 804ce92:	e002      	b.n	804ce9a <sensor_config+0x1ce>
              continue;
 804ce94:	bf00      	nop
 804ce96:	e000      	b.n	804ce9a <sensor_config+0x1ce>
                  continue;
 804ce98:	bf00      	nop
        for (int i = 0; i < SENSOR_TYPE_MAX; i++) {
 804ce9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 804ce9e:	3301      	adds	r3, #1
 804cea0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 804cea4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 804cea8:	2b0e      	cmp	r3, #14
 804ceaa:	f77f af7d 	ble.w	804cda8 <sensor_config+0xdc>
            } else {
              //assert here
            }
          }
        }
        printf("starting timer!!! \r\n");
 804ceae:	4859      	ldr	r0, [pc, #356]	; (804d014 <sensor_config+0x348>)
 804ceb0:	f013 fdfc 	bl	8060aac <puts>
        sensor_msg_event.message_event_type = SENSOR_ACTIVATE_COMPLETE_EVENT;
 804ceb4:	230b      	movs	r3, #11
 804ceb6:	f887 3020 	strb.w	r3, [r7, #32]
        //notifiy smgr that activate is completed
        osMessageQueuePut(platform_init_parms->SensorMessageQHandle,
 804ceba:	4b52      	ldr	r3, [pc, #328]	; (804d004 <sensor_config+0x338>)
 804cebc:	681b      	ldr	r3, [r3, #0]
 804cebe:	f8d3 00f4 	ldr.w	r0, [r3, #244]	; 0xf4
 804cec2:	f107 0120 	add.w	r1, r7, #32
 804cec6:	2300      	movs	r3, #0
 804cec8:	2200      	movs	r2, #0
 804ceca:	f009 fa9b 	bl	8056404 <osMessageQueuePut>
        printf("this sensor %d is already enable %d!\r\n",
               config_event.sensor_type,
               sensors[config_event.sensor_type]->activate_count);
      }
    }
    break;
 804cece:	e325      	b.n	804d51c <sensor_config+0x850>
        printf("platform_init_parms == NULL!\r\n");
 804ced0:	4851      	ldr	r0, [pc, #324]	; (804d018 <sensor_config+0x34c>)
 804ced2:	f013 fdeb 	bl	8060aac <puts>
    break;
 804ced6:	e321      	b.n	804d51c <sensor_config+0x850>
      if (!sensor_avaiable_check(config_event.sensor_type)) {
 804ced8:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 804cedc:	4618      	mov	r0, r3
 804cede:	f7ff fd4d 	bl	804c97c <sensor_avaiable_check>
 804cee2:	4603      	mov	r3, r0
 804cee4:	f083 0301 	eor.w	r3, r3, #1
 804cee8:	b2db      	uxtb	r3, r3
 804ceea:	2b00      	cmp	r3, #0
 804ceec:	d002      	beq.n	804cef4 <sensor_config+0x228>
        return SENSOR_FAILED;
 804ceee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 804cef2:	e31c      	b.n	804d52e <sensor_config+0x862>
      if (platform_init_parms == NULL) {
 804cef4:	4b43      	ldr	r3, [pc, #268]	; (804d004 <sensor_config+0x338>)
 804cef6:	681b      	ldr	r3, [r3, #0]
 804cef8:	2b00      	cmp	r3, #0
 804cefa:	d102      	bne.n	804cf02 <sensor_config+0x236>
        return SENSOR_FAILED;
 804cefc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 804cf00:	e315      	b.n	804d52e <sensor_config+0x862>
      bool is_first_user = false;
 804cf02:	2300      	movs	r3, #0
 804cf04:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
      if (sensors[config_event.sensor_type]->activate_count == 0) {
 804cf08:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 804cf0c:	461a      	mov	r2, r3
 804cf0e:	4b3e      	ldr	r3, [pc, #248]	; (804d008 <sensor_config+0x33c>)
 804cf10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804cf14:	f993 3005 	ldrsb.w	r3, [r3, #5]
 804cf18:	2b00      	cmp	r3, #0
 804cf1a:	f040 8088 	bne.w	804d02e <sensor_config+0x362>
        if (!sensors[config_event.sensor_type]->activate) {
 804cf1e:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 804cf22:	461a      	mov	r2, r3
 804cf24:	4b38      	ldr	r3, [pc, #224]	; (804d008 <sensor_config+0x33c>)
 804cf26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804cf2a:	791b      	ldrb	r3, [r3, #4]
 804cf2c:	f083 0301 	eor.w	r3, r3, #1
 804cf30:	b2db      	uxtb	r3, r3
 804cf32:	2b00      	cmp	r3, #0
 804cf34:	f000 82f2 	beq.w	804d51c <sensor_config+0x850>
          if (sensors[config_event.sensor_type]->sensor_op_ptr[0].activate
 804cf38:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 804cf3c:	461a      	mov	r2, r3
 804cf3e:	4b32      	ldr	r3, [pc, #200]	; (804d008 <sensor_config+0x33c>)
 804cf40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804cf44:	699b      	ldr	r3, [r3, #24]
 804cf46:	689b      	ldr	r3, [r3, #8]
 804cf48:	2b00      	cmp	r3, #0
 804cf4a:	f000 82e7 	beq.w	804d51c <sensor_config+0x850>
                sensors[config_event.sensor_type]->sensor_op_ptr[0].
 804cf4e:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 804cf52:	461a      	mov	r2, r3
 804cf54:	4b2c      	ldr	r3, [pc, #176]	; (804d008 <sensor_config+0x33c>)
 804cf56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804cf5a:	699b      	ldr	r3, [r3, #24]
 804cf5c:	689b      	ldr	r3, [r3, #8]
 804cf5e:	2001      	movs	r0, #1
 804cf60:	4798      	blx	r3
 804cf62:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
            if (res == SENSOR_SUCCESS) {
 804cf66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 804cf6a:	2b00      	cmp	r3, #0
 804cf6c:	d158      	bne.n	804d020 <sensor_config+0x354>
              if (sensorEnabledBitMask == 0x0000) {
 804cf6e:	4b27      	ldr	r3, [pc, #156]	; (804d00c <sensor_config+0x340>)
 804cf70:	881b      	ldrh	r3, [r3, #0]
 804cf72:	2b00      	cmp	r3, #0
 804cf74:	d102      	bne.n	804cf7c <sensor_config+0x2b0>
                is_first_user = true;
 804cf76:	2301      	movs	r3, #1
 804cf78:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
              sensors[config_event.sensor_type]->activate_count++;
 804cf7c:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 804cf80:	461a      	mov	r2, r3
 804cf82:	4b21      	ldr	r3, [pc, #132]	; (804d008 <sensor_config+0x33c>)
 804cf84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804cf88:	f993 2005 	ldrsb.w	r2, [r3, #5]
 804cf8c:	b2d2      	uxtb	r2, r2
 804cf8e:	3201      	adds	r2, #1
 804cf90:	b2d2      	uxtb	r2, r2
 804cf92:	b252      	sxtb	r2, r2
 804cf94:	715a      	strb	r2, [r3, #5]
                  sensorEnabledBitMask | (1 << config_event.sensor_type);
 804cf96:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 804cf9a:	461a      	mov	r2, r3
 804cf9c:	2301      	movs	r3, #1
 804cf9e:	4093      	lsls	r3, r2
 804cfa0:	b21a      	sxth	r2, r3
 804cfa2:	4b1a      	ldr	r3, [pc, #104]	; (804d00c <sensor_config+0x340>)
 804cfa4:	881b      	ldrh	r3, [r3, #0]
 804cfa6:	b21b      	sxth	r3, r3
 804cfa8:	4313      	orrs	r3, r2
 804cfaa:	b21b      	sxth	r3, r3
 804cfac:	b29a      	uxth	r2, r3
              sensorEnabledBitMask =
 804cfae:	4b17      	ldr	r3, [pc, #92]	; (804d00c <sensor_config+0x340>)
 804cfb0:	801a      	strh	r2, [r3, #0]
              sensors[config_event.sensor_type]->activate = true;
 804cfb2:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 804cfb6:	461a      	mov	r2, r3
 804cfb8:	4b13      	ldr	r3, [pc, #76]	; (804d008 <sensor_config+0x33c>)
 804cfba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804cfbe:	2201      	movs	r2, #1
 804cfc0:	711a      	strb	r2, [r3, #4]
              sensors[config_event.sensor_type]->sample_rate =
 804cfc2:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 804cfc6:	461a      	mov	r2, r3
 804cfc8:	4b0f      	ldr	r3, [pc, #60]	; (804d008 <sensor_config+0x33c>)
 804cfca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804cfce:	2214      	movs	r2, #20
 804cfd0:	80da      	strh	r2, [r3, #6]
              if (is_first_user) {
 804cfd2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 804cfd6:	2b00      	cmp	r3, #0
 804cfd8:	f000 82a0 	beq.w	804d51c <sensor_config+0x850>
                printf("first user starting timer!!! \r\n");
 804cfdc:	480f      	ldr	r0, [pc, #60]	; (804d01c <sensor_config+0x350>)
 804cfde:	f013 fd65 	bl	8060aac <puts>
                sensor_msg_event.message_event_type =
 804cfe2:	230b      	movs	r3, #11
 804cfe4:	f887 3020 	strb.w	r3, [r7, #32]
                osMessageQueuePut(platform_init_parms->SensorMessageQHandle,
 804cfe8:	4b06      	ldr	r3, [pc, #24]	; (804d004 <sensor_config+0x338>)
 804cfea:	681b      	ldr	r3, [r3, #0]
 804cfec:	f8d3 00f4 	ldr.w	r0, [r3, #244]	; 0xf4
 804cff0:	f107 0120 	add.w	r1, r7, #32
 804cff4:	2300      	movs	r3, #0
 804cff6:	2200      	movs	r2, #0
 804cff8:	f009 fa04 	bl	8056404 <osMessageQueuePut>
    break;
 804cffc:	e28e      	b.n	804d51c <sensor_config+0x850>
 804cffe:	bf00      	nop
 804d000:	08065e68 	.word	0x08065e68
 804d004:	2000845c 	.word	0x2000845c
 804d008:	2000841c 	.word	0x2000841c
 804d00c:	20008458 	.word	0x20008458
 804d010:	08065e7c 	.word	0x08065e7c
 804d014:	08065ea4 	.word	0x08065ea4
 804d018:	08065eb8 	.word	0x08065eb8
 804d01c:	08065ed8 	.word	0x08065ed8
              printf("sensor %d enable failed \r\n", config_event.sensor_type);
 804d020:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 804d024:	4619      	mov	r1, r3
 804d026:	48c2      	ldr	r0, [pc, #776]	; (804d330 <sensor_config+0x664>)
 804d028:	f013 fca4 	bl	8060974 <iprintf>
              break;
 804d02c:	e27d      	b.n	804d52a <sensor_config+0x85e>
        sensors[config_event.sensor_type]->activate_count++;
 804d02e:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 804d032:	461a      	mov	r2, r3
 804d034:	4bbf      	ldr	r3, [pc, #764]	; (804d334 <sensor_config+0x668>)
 804d036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804d03a:	f993 2005 	ldrsb.w	r2, [r3, #5]
 804d03e:	b2d2      	uxtb	r2, r2
 804d040:	3201      	adds	r2, #1
 804d042:	b2d2      	uxtb	r2, r2
 804d044:	b252      	sxtb	r2, r2
 804d046:	715a      	strb	r2, [r3, #5]
               config_event.sensor_type,
 804d048:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
        printf("this sensor %d is already enable %d!\r\n",
 804d04c:	4619      	mov	r1, r3
               sensors[config_event.sensor_type]->activate_count);
 804d04e:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 804d052:	461a      	mov	r2, r3
 804d054:	4bb7      	ldr	r3, [pc, #732]	; (804d334 <sensor_config+0x668>)
 804d056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804d05a:	f993 3005 	ldrsb.w	r3, [r3, #5]
        printf("this sensor %d is already enable %d!\r\n",
 804d05e:	461a      	mov	r2, r3
 804d060:	48b5      	ldr	r0, [pc, #724]	; (804d338 <sensor_config+0x66c>)
 804d062:	f013 fc87 	bl	8060974 <iprintf>
    break;
 804d066:	e259      	b.n	804d51c <sensor_config+0x850>
  case SENSOR_DEACTIVATE:
    if (config_event.sensor_type == SENSOR_TYPE_MAX) {
 804d068:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 804d06c:	2b0f      	cmp	r3, #15
 804d06e:	f040 809d 	bne.w	804d1ac <sensor_config+0x4e0>
      //default setting to run all sensor when receive special sensor type
      if (platform_init_parms != NULL) {
 804d072:	4bb2      	ldr	r3, [pc, #712]	; (804d33c <sensor_config+0x670>)
 804d074:	681b      	ldr	r3, [r3, #0]
 804d076:	2b00      	cmp	r3, #0
 804d078:	f000 8252 	beq.w	804d520 <sensor_config+0x854>
        for (int i = 0; i < SENSOR_TYPE_MAX; i++) {
 804d07c:	2300      	movs	r3, #0
 804d07e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 804d082:	e080      	b.n	804d186 <sensor_config+0x4ba>
          if (sensors[i] != NULL) {
 804d084:	4aab      	ldr	r2, [pc, #684]	; (804d334 <sensor_config+0x668>)
 804d086:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 804d08a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 804d08e:	2b00      	cmp	r3, #0
 804d090:	d074      	beq.n	804d17c <sensor_config+0x4b0>
            if (!sensors[i]->init_completed) {
 804d092:	4aa8      	ldr	r2, [pc, #672]	; (804d334 <sensor_config+0x668>)
 804d094:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 804d098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 804d09c:	7d1b      	ldrb	r3, [r3, #20]
 804d09e:	f083 0301 	eor.w	r3, r3, #1
 804d0a2:	b2db      	uxtb	r3, r3
 804d0a4:	2b00      	cmp	r3, #0
 804d0a6:	d168      	bne.n	804d17a <sensor_config+0x4ae>
              continue;
            }
            if (sensors[i]->sensor_op_ptr[0].activate != NULL) {
 804d0a8:	4aa2      	ldr	r2, [pc, #648]	; (804d334 <sensor_config+0x668>)
 804d0aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 804d0ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 804d0b2:	699b      	ldr	r3, [r3, #24]
 804d0b4:	689b      	ldr	r3, [r3, #8]
 804d0b6:	2b00      	cmp	r3, #0
 804d0b8:	d060      	beq.n	804d17c <sensor_config+0x4b0>
              sensors[i]->activate_count--;
 804d0ba:	4a9e      	ldr	r2, [pc, #632]	; (804d334 <sensor_config+0x668>)
 804d0bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 804d0c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 804d0c4:	f993 2005 	ldrsb.w	r2, [r3, #5]
 804d0c8:	b2d2      	uxtb	r2, r2
 804d0ca:	3a01      	subs	r2, #1
 804d0cc:	b2d2      	uxtb	r2, r2
 804d0ce:	b252      	sxtb	r2, r2
 804d0d0:	715a      	strb	r2, [r3, #5]
              if (sensors[i]->activate_count < 0) {
 804d0d2:	4a98      	ldr	r2, [pc, #608]	; (804d334 <sensor_config+0x668>)
 804d0d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 804d0d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 804d0dc:	f993 3005 	ldrsb.w	r3, [r3, #5]
 804d0e0:	2b00      	cmp	r3, #0
 804d0e2:	da0c      	bge.n	804d0fe <sensor_config+0x432>
                printf("sensor %d is already disabled!\r\n", i);
 804d0e4:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 804d0e8:	4895      	ldr	r0, [pc, #596]	; (804d340 <sensor_config+0x674>)
 804d0ea:	f013 fc43 	bl	8060974 <iprintf>
                sensors[i]->activate_count = 0;
 804d0ee:	4a91      	ldr	r2, [pc, #580]	; (804d334 <sensor_config+0x668>)
 804d0f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 804d0f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 804d0f8:	2200      	movs	r2, #0
 804d0fa:	715a      	strb	r2, [r3, #5]
                continue;
 804d0fc:	e03e      	b.n	804d17c <sensor_config+0x4b0>
              }
              if (sensors[i]->activate_count == 0) {
 804d0fe:	4a8d      	ldr	r2, [pc, #564]	; (804d334 <sensor_config+0x668>)
 804d100:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 804d104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 804d108:	f993 3005 	ldrsb.w	r3, [r3, #5]
 804d10c:	2b00      	cmp	r3, #0
 804d10e:	d135      	bne.n	804d17c <sensor_config+0x4b0>
                res = sensors[i]->sensor_op_ptr[0].activate(false);
 804d110:	4a88      	ldr	r2, [pc, #544]	; (804d334 <sensor_config+0x668>)
 804d112:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 804d116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 804d11a:	699b      	ldr	r3, [r3, #24]
 804d11c:	689b      	ldr	r3, [r3, #8]
 804d11e:	2000      	movs	r0, #0
 804d120:	4798      	blx	r3
 804d122:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
                if (res == SENSOR_SUCCESS) {
 804d126:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 804d12a:	2b00      	cmp	r3, #0
 804d12c:	d11f      	bne.n	804d16e <sensor_config+0x4a2>
                  sensorEnabledBitMask = sensorEnabledBitMask & (~(1 << i));
 804d12e:	2201      	movs	r2, #1
 804d130:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 804d134:	fa02 f303 	lsl.w	r3, r2, r3
 804d138:	b21b      	sxth	r3, r3
 804d13a:	43db      	mvns	r3, r3
 804d13c:	b21a      	sxth	r2, r3
 804d13e:	4b81      	ldr	r3, [pc, #516]	; (804d344 <sensor_config+0x678>)
 804d140:	881b      	ldrh	r3, [r3, #0]
 804d142:	b21b      	sxth	r3, r3
 804d144:	4013      	ands	r3, r2
 804d146:	b21b      	sxth	r3, r3
 804d148:	b29a      	uxth	r2, r3
 804d14a:	4b7e      	ldr	r3, [pc, #504]	; (804d344 <sensor_config+0x678>)
 804d14c:	801a      	strh	r2, [r3, #0]
                  sensors[i]->activate = false;
 804d14e:	4a79      	ldr	r2, [pc, #484]	; (804d334 <sensor_config+0x668>)
 804d150:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 804d154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 804d158:	2200      	movs	r2, #0
 804d15a:	711a      	strb	r2, [r3, #4]
                  sensors[i]->sample_rate = 0xFFFF;
 804d15c:	4a75      	ldr	r2, [pc, #468]	; (804d334 <sensor_config+0x668>)
 804d15e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 804d162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 804d166:	f64f 72ff 	movw	r2, #65535	; 0xffff
 804d16a:	80da      	strh	r2, [r3, #6]
 804d16c:	e006      	b.n	804d17c <sensor_config+0x4b0>
                } else {
                  printf("disable sensor %d failed\r\n", i);
 804d16e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 804d172:	4875      	ldr	r0, [pc, #468]	; (804d348 <sensor_config+0x67c>)
 804d174:	f013 fbfe 	bl	8060974 <iprintf>
                  continue;
 804d178:	e000      	b.n	804d17c <sensor_config+0x4b0>
              continue;
 804d17a:	bf00      	nop
        for (int i = 0; i < SENSOR_TYPE_MAX; i++) {
 804d17c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 804d180:	3301      	adds	r3, #1
 804d182:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 804d186:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 804d18a:	2b0e      	cmp	r3, #14
 804d18c:	f77f af7a 	ble.w	804d084 <sensor_config+0x3b8>
            } else {
              //assert here
            }
          }
        }
        sensor_msg_event.message_event_type = SENSOR_DEACTIVATE_COMPLETE_EVENT;
 804d190:	230c      	movs	r3, #12
 804d192:	f887 3020 	strb.w	r3, [r7, #32]
        //notifiy smgr that deactivate is completed
        osMessageQueuePut(platform_init_parms->SensorMessageQHandle,
 804d196:	4b69      	ldr	r3, [pc, #420]	; (804d33c <sensor_config+0x670>)
 804d198:	681b      	ldr	r3, [r3, #0]
 804d19a:	f8d3 00f4 	ldr.w	r0, [r3, #244]	; 0xf4
 804d19e:	f107 0120 	add.w	r1, r7, #32
 804d1a2:	2300      	movs	r3, #0
 804d1a4:	2200      	movs	r2, #0
 804d1a6:	f009 f92d 	bl	8056404 <osMessageQueuePut>
        } else {
          //assert here since sensors should not deactivated when activate count is 0
        }
      }
    }
    break;
 804d1aa:	e1b9      	b.n	804d520 <sensor_config+0x854>
      if (!sensor_avaiable_check(config_event.sensor_type)) {
 804d1ac:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 804d1b0:	4618      	mov	r0, r3
 804d1b2:	f7ff fbe3 	bl	804c97c <sensor_avaiable_check>
 804d1b6:	4603      	mov	r3, r0
 804d1b8:	f083 0301 	eor.w	r3, r3, #1
 804d1bc:	b2db      	uxtb	r3, r3
 804d1be:	2b00      	cmp	r3, #0
 804d1c0:	d002      	beq.n	804d1c8 <sensor_config+0x4fc>
        return SENSOR_FAILED;
 804d1c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 804d1c6:	e1b2      	b.n	804d52e <sensor_config+0x862>
      if (platform_init_parms == NULL) {
 804d1c8:	4b5c      	ldr	r3, [pc, #368]	; (804d33c <sensor_config+0x670>)
 804d1ca:	681b      	ldr	r3, [r3, #0]
 804d1cc:	2b00      	cmp	r3, #0
 804d1ce:	d102      	bne.n	804d1d6 <sensor_config+0x50a>
        return SENSOR_FAILED;
 804d1d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 804d1d4:	e1ab      	b.n	804d52e <sensor_config+0x862>
      sensors[config_event.sensor_type]->activate_count--;
 804d1d6:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 804d1da:	461a      	mov	r2, r3
 804d1dc:	4b55      	ldr	r3, [pc, #340]	; (804d334 <sensor_config+0x668>)
 804d1de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804d1e2:	f993 2005 	ldrsb.w	r2, [r3, #5]
 804d1e6:	b2d2      	uxtb	r2, r2
 804d1e8:	3a01      	subs	r2, #1
 804d1ea:	b2d2      	uxtb	r2, r2
 804d1ec:	b252      	sxtb	r2, r2
 804d1ee:	715a      	strb	r2, [r3, #5]
      if (sensors[config_event.sensor_type]->activate_count < 0) {
 804d1f0:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 804d1f4:	461a      	mov	r2, r3
 804d1f6:	4b4f      	ldr	r3, [pc, #316]	; (804d334 <sensor_config+0x668>)
 804d1f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804d1fc:	f993 3005 	ldrsb.w	r3, [r3, #5]
 804d200:	2b00      	cmp	r3, #0
 804d202:	da0f      	bge.n	804d224 <sensor_config+0x558>
        printf("sensor %d is already disabled!\r\n", config_event.sensor_type);
 804d204:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 804d208:	4619      	mov	r1, r3
 804d20a:	484d      	ldr	r0, [pc, #308]	; (804d340 <sensor_config+0x674>)
 804d20c:	f013 fbb2 	bl	8060974 <iprintf>
        sensors[config_event.sensor_type]->activate_count = 0;
 804d210:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 804d214:	461a      	mov	r2, r3
 804d216:	4b47      	ldr	r3, [pc, #284]	; (804d334 <sensor_config+0x668>)
 804d218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804d21c:	2200      	movs	r2, #0
 804d21e:	715a      	strb	r2, [r3, #5]
        return SENSOR_SUCCESS;
 804d220:	2300      	movs	r3, #0
 804d222:	e184      	b.n	804d52e <sensor_config+0x862>
      if (sensors[config_event.sensor_type]->activate_count == 0) {
 804d224:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 804d228:	461a      	mov	r2, r3
 804d22a:	4b42      	ldr	r3, [pc, #264]	; (804d334 <sensor_config+0x668>)
 804d22c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804d230:	f993 3005 	ldrsb.w	r3, [r3, #5]
 804d234:	2b00      	cmp	r3, #0
 804d236:	f040 8173 	bne.w	804d520 <sensor_config+0x854>
        if (sensors[config_event.sensor_type]->activate) {
 804d23a:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 804d23e:	461a      	mov	r2, r3
 804d240:	4b3c      	ldr	r3, [pc, #240]	; (804d334 <sensor_config+0x668>)
 804d242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804d246:	791b      	ldrb	r3, [r3, #4]
 804d248:	2b00      	cmp	r3, #0
 804d24a:	f000 8169 	beq.w	804d520 <sensor_config+0x854>
          if (sensors[config_event.sensor_type]->sensor_op_ptr[0].activate
 804d24e:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 804d252:	461a      	mov	r2, r3
 804d254:	4b37      	ldr	r3, [pc, #220]	; (804d334 <sensor_config+0x668>)
 804d256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804d25a:	699b      	ldr	r3, [r3, #24]
 804d25c:	689b      	ldr	r3, [r3, #8]
 804d25e:	2b00      	cmp	r3, #0
 804d260:	d038      	beq.n	804d2d4 <sensor_config+0x608>
                sensors[config_event.sensor_type]->sensor_op_ptr[0].
 804d262:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 804d266:	461a      	mov	r2, r3
 804d268:	4b32      	ldr	r3, [pc, #200]	; (804d334 <sensor_config+0x668>)
 804d26a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804d26e:	699b      	ldr	r3, [r3, #24]
 804d270:	689b      	ldr	r3, [r3, #8]
 804d272:	2000      	movs	r0, #0
 804d274:	4798      	blx	r3
 804d276:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
            if (res == SENSOR_SUCCESS) {
 804d27a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 804d27e:	2b00      	cmp	r3, #0
 804d280:	d121      	bne.n	804d2c6 <sensor_config+0x5fa>
                  sensorEnabledBitMask & (~(1 << config_event.sensor_type));
 804d282:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 804d286:	461a      	mov	r2, r3
 804d288:	2301      	movs	r3, #1
 804d28a:	4093      	lsls	r3, r2
 804d28c:	b21b      	sxth	r3, r3
 804d28e:	43db      	mvns	r3, r3
 804d290:	b21a      	sxth	r2, r3
 804d292:	4b2c      	ldr	r3, [pc, #176]	; (804d344 <sensor_config+0x678>)
 804d294:	881b      	ldrh	r3, [r3, #0]
 804d296:	b21b      	sxth	r3, r3
 804d298:	4013      	ands	r3, r2
 804d29a:	b21b      	sxth	r3, r3
 804d29c:	b29a      	uxth	r2, r3
              sensorEnabledBitMask =
 804d29e:	4b29      	ldr	r3, [pc, #164]	; (804d344 <sensor_config+0x678>)
 804d2a0:	801a      	strh	r2, [r3, #0]
              sensors[config_event.sensor_type]->activate = false;
 804d2a2:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 804d2a6:	461a      	mov	r2, r3
 804d2a8:	4b22      	ldr	r3, [pc, #136]	; (804d334 <sensor_config+0x668>)
 804d2aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804d2ae:	2200      	movs	r2, #0
 804d2b0:	711a      	strb	r2, [r3, #4]
              sensors[config_event.sensor_type]->sample_rate = 0xFFFF;
 804d2b2:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 804d2b6:	461a      	mov	r2, r3
 804d2b8:	4b1e      	ldr	r3, [pc, #120]	; (804d334 <sensor_config+0x668>)
 804d2ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804d2be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 804d2c2:	80da      	strh	r2, [r3, #6]
 804d2c4:	e006      	b.n	804d2d4 <sensor_config+0x608>
              printf("sensor %d disable failed\r\n", config_event.sensor_type);
 804d2c6:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 804d2ca:	4619      	mov	r1, r3
 804d2cc:	481f      	ldr	r0, [pc, #124]	; (804d34c <sensor_config+0x680>)
 804d2ce:	f013 fb51 	bl	8060974 <iprintf>
              break;
 804d2d2:	e12a      	b.n	804d52a <sensor_config+0x85e>
          if (sensorEnabledBitMask == 0x0000) {
 804d2d4:	4b1b      	ldr	r3, [pc, #108]	; (804d344 <sensor_config+0x678>)
 804d2d6:	881b      	ldrh	r3, [r3, #0]
 804d2d8:	2b00      	cmp	r3, #0
 804d2da:	f040 8121 	bne.w	804d520 <sensor_config+0x854>
            if (platform_init_parms != NULL) {
 804d2de:	4b17      	ldr	r3, [pc, #92]	; (804d33c <sensor_config+0x670>)
 804d2e0:	681b      	ldr	r3, [r3, #0]
 804d2e2:	2b00      	cmp	r3, #0
 804d2e4:	f000 811c 	beq.w	804d520 <sensor_config+0x854>
              sensor_msg_event.message_event_type =
 804d2e8:	230c      	movs	r3, #12
 804d2ea:	f887 3020 	strb.w	r3, [r7, #32]
              osMessageQueuePut(platform_init_parms->SensorMessageQHandle,
 804d2ee:	4b13      	ldr	r3, [pc, #76]	; (804d33c <sensor_config+0x670>)
 804d2f0:	681b      	ldr	r3, [r3, #0]
 804d2f2:	f8d3 00f4 	ldr.w	r0, [r3, #244]	; 0xf4
 804d2f6:	f107 0120 	add.w	r1, r7, #32
 804d2fa:	2300      	movs	r3, #0
 804d2fc:	2200      	movs	r2, #0
 804d2fe:	f009 f881 	bl	8056404 <osMessageQueuePut>
    break;
 804d302:	e10d      	b.n	804d520 <sensor_config+0x854>
  case SENSOR_CONFIG_SELFTEST:
  case SENSOR_CONFIG_CALIBRATION:
    if (config_event.sensor_type == SENSOR_TYPE_MAX) {
 804d304:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 804d308:	2b0f      	cmp	r3, #15
 804d30a:	d103      	bne.n	804d314 <sensor_config+0x648>
      //do not support All type calibration
      printf("selftest is not supporting SENSOR_TYPE_MAX \r\n");
 804d30c:	4810      	ldr	r0, [pc, #64]	; (804d350 <sensor_config+0x684>)
 804d30e:	f013 fbcd 	bl	8060aac <puts>
          printf("config ptr is NULL!\r\n");
          break;
        }
      }
    }
    break;
 804d312:	e10a      	b.n	804d52a <sensor_config+0x85e>
      if (!sensor_avaiable_check(config_event.sensor_type)) {
 804d314:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 804d318:	4618      	mov	r0, r3
 804d31a:	f7ff fb2f 	bl	804c97c <sensor_avaiable_check>
 804d31e:	4603      	mov	r3, r0
 804d320:	f083 0301 	eor.w	r3, r3, #1
 804d324:	b2db      	uxtb	r3, r3
 804d326:	2b00      	cmp	r3, #0
 804d328:	d014      	beq.n	804d354 <sensor_config+0x688>
        return SENSOR_FAILED;
 804d32a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 804d32e:	e0fe      	b.n	804d52e <sensor_config+0x862>
 804d330:	08065ef8 	.word	0x08065ef8
 804d334:	2000841c 	.word	0x2000841c
 804d338:	08065e7c 	.word	0x08065e7c
 804d33c:	2000845c 	.word	0x2000845c
 804d340:	08065f14 	.word	0x08065f14
 804d344:	20008458 	.word	0x20008458
 804d348:	08065f38 	.word	0x08065f38
 804d34c:	08065f54 	.word	0x08065f54
 804d350:	08065f70 	.word	0x08065f70
      if (platform_init_parms == NULL) {
 804d354:	4b79      	ldr	r3, [pc, #484]	; (804d53c <sensor_config+0x870>)
 804d356:	681b      	ldr	r3, [r3, #0]
 804d358:	2b00      	cmp	r3, #0
 804d35a:	d102      	bne.n	804d362 <sensor_config+0x696>
        return SENSOR_FAILED;
 804d35c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 804d360:	e0e5      	b.n	804d52e <sensor_config+0x862>
      printf("sensor config cali/selftest\r\n");
 804d362:	4877      	ldr	r0, [pc, #476]	; (804d540 <sensor_config+0x874>)
 804d364:	f013 fba2 	bl	8060aac <puts>
      if (sensors[config_event.sensor_type]->activate) {
 804d368:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 804d36c:	461a      	mov	r2, r3
 804d36e:	4b75      	ldr	r3, [pc, #468]	; (804d544 <sensor_config+0x878>)
 804d370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804d374:	791b      	ldrb	r3, [r3, #4]
 804d376:	2b00      	cmp	r3, #0
 804d378:	d003      	beq.n	804d382 <sensor_config+0x6b6>
        printf
 804d37a:	4873      	ldr	r0, [pc, #460]	; (804d548 <sensor_config+0x87c>)
 804d37c:	f013 fb96 	bl	8060aac <puts>
    break;
 804d380:	e0d3      	b.n	804d52a <sensor_config+0x85e>
        if (sensors[config_event.sensor_type]->sensor_op_ptr[0].config != NULL) {
 804d382:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 804d386:	461a      	mov	r2, r3
 804d388:	4b6e      	ldr	r3, [pc, #440]	; (804d544 <sensor_config+0x878>)
 804d38a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804d38e:	699b      	ldr	r3, [r3, #24]
 804d390:	691b      	ldr	r3, [r3, #16]
 804d392:	2b00      	cmp	r3, #0
 804d394:	d04c      	beq.n	804d430 <sensor_config+0x764>
              sensors[config_event.sensor_type]->sensor_op_ptr[0].
 804d396:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 804d39a:	461a      	mov	r2, r3
 804d39c:	4b69      	ldr	r3, [pc, #420]	; (804d544 <sensor_config+0x878>)
 804d39e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804d3a2:	699b      	ldr	r3, [r3, #24]
 804d3a4:	691b      	ldr	r3, [r3, #16]
              config(config_event.config_type, platform_init_parms);
 804d3a6:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
              sensors[config_event.sensor_type]->sensor_op_ptr[0].
 804d3aa:	4964      	ldr	r1, [pc, #400]	; (804d53c <sensor_config+0x870>)
 804d3ac:	6809      	ldr	r1, [r1, #0]
 804d3ae:	4610      	mov	r0, r2
 804d3b0:	4798      	blx	r3
 804d3b2:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
          if (platform_init_parms->use_uart_mode == 1) {
 804d3b6:	4b61      	ldr	r3, [pc, #388]	; (804d53c <sensor_config+0x870>)
 804d3b8:	681b      	ldr	r3, [r3, #0]
 804d3ba:	f893 3198 	ldrb.w	r3, [r3, #408]	; 0x198
 804d3be:	2b01      	cmp	r3, #1
 804d3c0:	d118      	bne.n	804d3f4 <sensor_config+0x728>
            uint8_t uart_sensor_data[UART_TX_CODE_LENGTH] = { 0 };
 804d3c2:	2300      	movs	r3, #0
 804d3c4:	603b      	str	r3, [r7, #0]
 804d3c6:	1d3b      	adds	r3, r7, #4
 804d3c8:	2200      	movs	r2, #0
 804d3ca:	601a      	str	r2, [r3, #0]
 804d3cc:	605a      	str	r2, [r3, #4]
 804d3ce:	609a      	str	r2, [r3, #8]
 804d3d0:	60da      	str	r2, [r3, #12]
 804d3d2:	611a      	str	r2, [r3, #16]
 804d3d4:	615a      	str	r2, [r3, #20]
 804d3d6:	761a      	strb	r2, [r3, #24]
            memcpy(&uart_sensor_data[0], res, sizeof(int));
 804d3d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 804d3dc:	681b      	ldr	r3, [r3, #0]
 804d3de:	603b      	str	r3, [r7, #0]
            osMessageQueuePut(platform_init_parms->UartReportQHandle,
 804d3e0:	4b56      	ldr	r3, [pc, #344]	; (804d53c <sensor_config+0x870>)
 804d3e2:	681b      	ldr	r3, [r3, #0]
 804d3e4:	f8d3 00fc 	ldr.w	r0, [r3, #252]	; 0xfc
 804d3e8:	4639      	mov	r1, r7
 804d3ea:	2300      	movs	r3, #0
 804d3ec:	2200      	movs	r2, #0
 804d3ee:	f009 f809 	bl	8056404 <osMessageQueuePut>
    break;
 804d3f2:	e09a      	b.n	804d52a <sensor_config+0x85e>
            sensor_msg_event.message_event_type = SENSOR_CONFIG_RESP_MESSAGE;
 804d3f4:	2303      	movs	r3, #3
 804d3f6:	f887 3020 	strb.w	r3, [r7, #32]
                config_event.sensor_type;
 804d3fa:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
            sensor_msg_event.message_event_t.resp_event.sensor_type =
 804d3fe:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
                config_event.config_type;
 804d402:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
            sensor_msg_event.message_event_t.resp_event.config_type =
 804d406:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
            sensor_msg_event.message_event_t.resp_event.cfg_data.resp_data[0] =
 804d40a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 804d40e:	ee07 3a90 	vmov	s15, r3
 804d412:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 804d416:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            osMessageQueuePut(platform_init_parms->SensorMessageQHandle,
 804d41a:	4b48      	ldr	r3, [pc, #288]	; (804d53c <sensor_config+0x870>)
 804d41c:	681b      	ldr	r3, [r3, #0]
 804d41e:	f8d3 00f4 	ldr.w	r0, [r3, #244]	; 0xf4
 804d422:	f107 0120 	add.w	r1, r7, #32
 804d426:	2300      	movs	r3, #0
 804d428:	2200      	movs	r2, #0
 804d42a:	f008 ffeb 	bl	8056404 <osMessageQueuePut>
    break;
 804d42e:	e07c      	b.n	804d52a <sensor_config+0x85e>
          printf("config ptr is NULL!\r\n");
 804d430:	4846      	ldr	r0, [pc, #280]	; (804d54c <sensor_config+0x880>)
 804d432:	f013 fb3b 	bl	8060aac <puts>
          break;
 804d436:	e078      	b.n	804d52a <sensor_config+0x85e>
  case SENSOR_CONFIG_TIMEOUT:
    if (platform_init_parms != NULL) {
 804d438:	4b40      	ldr	r3, [pc, #256]	; (804d53c <sensor_config+0x870>)
 804d43a:	681b      	ldr	r3, [r3, #0]
 804d43c:	2b00      	cmp	r3, #0
 804d43e:	d071      	beq.n	804d524 <sensor_config+0x858>
      for (int i = 0; i < sizeof(timeout_sensor_type) / sizeof(uint8_t);
 804d440:	2300      	movs	r3, #0
 804d442:	67fb      	str	r3, [r7, #124]	; 0x7c
 804d444:	e030      	b.n	804d4a8 <sensor_config+0x7dc>
           i = i + 1) {
        if (sensors[timeout_sensor_type[i]] != NULL) {
 804d446:	4a42      	ldr	r2, [pc, #264]	; (804d550 <sensor_config+0x884>)
 804d448:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 804d44a:	4413      	add	r3, r2
 804d44c:	781b      	ldrb	r3, [r3, #0]
 804d44e:	461a      	mov	r2, r3
 804d450:	4b3c      	ldr	r3, [pc, #240]	; (804d544 <sensor_config+0x878>)
 804d452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804d456:	2b00      	cmp	r3, #0
 804d458:	d023      	beq.n	804d4a2 <sensor_config+0x7d6>
          if (sensors[timeout_sensor_type[i]]->activate) {
 804d45a:	4a3d      	ldr	r2, [pc, #244]	; (804d550 <sensor_config+0x884>)
 804d45c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 804d45e:	4413      	add	r3, r2
 804d460:	781b      	ldrb	r3, [r3, #0]
 804d462:	461a      	mov	r2, r3
 804d464:	4b37      	ldr	r3, [pc, #220]	; (804d544 <sensor_config+0x878>)
 804d466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804d46a:	791b      	ldrb	r3, [r3, #4]
 804d46c:	2b00      	cmp	r3, #0
 804d46e:	d018      	beq.n	804d4a2 <sensor_config+0x7d6>
            //printf("@@@SENSOR_CONFIG_TIMEOUT!\r\n");
            res =
                sensors[timeout_sensor_type[i]]->sensor_op_ptr[0].
 804d470:	4a37      	ldr	r2, [pc, #220]	; (804d550 <sensor_config+0x884>)
 804d472:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 804d474:	4413      	add	r3, r2
 804d476:	781b      	ldrb	r3, [r3, #0]
 804d478:	461a      	mov	r2, r3
 804d47a:	4b32      	ldr	r3, [pc, #200]	; (804d544 <sensor_config+0x878>)
 804d47c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804d480:	699b      	ldr	r3, [r3, #24]
 804d482:	691b      	ldr	r3, [r3, #16]
                config(config_event.config_type, platform_init_parms);
 804d484:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
                sensors[timeout_sensor_type[i]]->sensor_op_ptr[0].
 804d488:	492c      	ldr	r1, [pc, #176]	; (804d53c <sensor_config+0x870>)
 804d48a:	6809      	ldr	r1, [r1, #0]
 804d48c:	4610      	mov	r0, r2
 804d48e:	4798      	blx	r3
 804d490:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
            if (res != SENSOR_SUCCESS) {
 804d494:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 804d498:	2b00      	cmp	r3, #0
 804d49a:	d002      	beq.n	804d4a2 <sensor_config+0x7d6>
              printf("config failed for SENSOR_CONFIG_TIMEOUT\r\n");
 804d49c:	482d      	ldr	r0, [pc, #180]	; (804d554 <sensor_config+0x888>)
 804d49e:	f013 fb05 	bl	8060aac <puts>
           i = i + 1) {
 804d4a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 804d4a4:	3301      	adds	r3, #1
 804d4a6:	67fb      	str	r3, [r7, #124]	; 0x7c
      for (int i = 0; i < sizeof(timeout_sensor_type) / sizeof(uint8_t);
 804d4a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 804d4aa:	2b02      	cmp	r3, #2
 804d4ac:	d9cb      	bls.n	804d446 <sensor_config+0x77a>
        }
      }
    } else {
      //assert here should be occured!
    }
    break;
 804d4ae:	e039      	b.n	804d524 <sensor_config+0x858>
  case SENSOR_CONFIG_BIAS:
  case SENSOR_CALIBRATION_RESULT:
    if (platform_init_parms != NULL) {
 804d4b0:	4b22      	ldr	r3, [pc, #136]	; (804d53c <sensor_config+0x870>)
 804d4b2:	681b      	ldr	r3, [r3, #0]
 804d4b4:	2b00      	cmp	r3, #0
 804d4b6:	d037      	beq.n	804d528 <sensor_config+0x85c>
      if (!sensor_avaiable_check(config_event.sensor_type)) {
 804d4b8:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 804d4bc:	4618      	mov	r0, r3
 804d4be:	f7ff fa5d 	bl	804c97c <sensor_avaiable_check>
 804d4c2:	4603      	mov	r3, r0
 804d4c4:	f083 0301 	eor.w	r3, r3, #1
 804d4c8:	b2db      	uxtb	r3, r3
 804d4ca:	2b00      	cmp	r3, #0
 804d4cc:	d002      	beq.n	804d4d4 <sensor_config+0x808>
        return SENSOR_FAILED;
 804d4ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 804d4d2:	e02c      	b.n	804d52e <sensor_config+0x862>
      }
      if (sensors[config_event.sensor_type] != NULL) {
 804d4d4:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 804d4d8:	461a      	mov	r2, r3
 804d4da:	4b1a      	ldr	r3, [pc, #104]	; (804d544 <sensor_config+0x878>)
 804d4dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804d4e0:	2b00      	cmp	r3, #0
 804d4e2:	d021      	beq.n	804d528 <sensor_config+0x85c>
        //printf("@@@SENSOR_CONFIG_BIAS!\r\n");
        res =
            sensors[config_event.sensor_type]->sensor_op_ptr[0].
 804d4e4:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 804d4e8:	461a      	mov	r2, r3
 804d4ea:	4b16      	ldr	r3, [pc, #88]	; (804d544 <sensor_config+0x878>)
 804d4ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804d4f0:	699b      	ldr	r3, [r3, #24]
 804d4f2:	691b      	ldr	r3, [r3, #16]
            config(config_event.config_type, platform_init_parms);
 804d4f4:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
            sensors[config_event.sensor_type]->sensor_op_ptr[0].
 804d4f8:	4910      	ldr	r1, [pc, #64]	; (804d53c <sensor_config+0x870>)
 804d4fa:	6809      	ldr	r1, [r1, #0]
 804d4fc:	4610      	mov	r0, r2
 804d4fe:	4798      	blx	r3
 804d500:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
        if (res != SENSOR_SUCCESS) {
 804d504:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 804d508:	2b00      	cmp	r3, #0
 804d50a:	d00d      	beq.n	804d528 <sensor_config+0x85c>
          printf("config failed for SENSOR_CONFIG_BIAS\r\n");
 804d50c:	4812      	ldr	r0, [pc, #72]	; (804d558 <sensor_config+0x88c>)
 804d50e:	f013 facd 	bl	8060aac <puts>
        }
      }
    } else {
      //assert here should be occured!
    }
    break;
 804d512:	e009      	b.n	804d528 <sensor_config+0x85c>
  default:
    break;
 804d514:	bf00      	nop
 804d516:	e008      	b.n	804d52a <sensor_config+0x85e>
    break;
 804d518:	bf00      	nop
 804d51a:	e006      	b.n	804d52a <sensor_config+0x85e>
    break;
 804d51c:	bf00      	nop
 804d51e:	e004      	b.n	804d52a <sensor_config+0x85e>
    break;
 804d520:	bf00      	nop
 804d522:	e002      	b.n	804d52a <sensor_config+0x85e>
    break;
 804d524:	bf00      	nop
 804d526:	e000      	b.n	804d52a <sensor_config+0x85e>
    break;
 804d528:	bf00      	nop
  }

  return res;
 804d52a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
}
 804d52e:	4618      	mov	r0, r3
 804d530:	3790      	adds	r7, #144	; 0x90
 804d532:	46bd      	mov	sp, r7
 804d534:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 804d538:	b004      	add	sp, #16
 804d53a:	4770      	bx	lr
 804d53c:	2000845c 	.word	0x2000845c
 804d540:	08065fa0 	.word	0x08065fa0
 804d544:	2000841c 	.word	0x2000841c
 804d548:	08065fc0 	.word	0x08065fc0
 804d54c:	08066014 	.word	0x08066014
 804d550:	200078f0 	.word	0x200078f0
 804d554:	0806602c 	.word	0x0806602c
 804d558:	08066058 	.word	0x08066058

0804d55c <sensor_timer_handler>:

int sensor_timer_handler(void)
{
 804d55c:	b580      	push	{r7, lr}
 804d55e:	b082      	sub	sp, #8
 804d560:	af00      	add	r7, sp, #0
  int res = SENSOR_SUCCESS;
 804d562:	2300      	movs	r3, #0
 804d564:	607b      	str	r3, [r7, #4]
  if (platform_init_parms != NULL) {
 804d566:	4b27      	ldr	r3, [pc, #156]	; (804d604 <sensor_timer_handler+0xa8>)
 804d568:	681b      	ldr	r3, [r3, #0]
 804d56a:	2b00      	cmp	r3, #0
 804d56c:	d044      	beq.n	804d5f8 <sensor_timer_handler+0x9c>
    for (int i = 0; i < SENSOR_TYPE_MAX; i++) {
 804d56e:	2300      	movs	r3, #0
 804d570:	603b      	str	r3, [r7, #0]
 804d572:	e03e      	b.n	804d5f2 <sensor_timer_handler+0x96>
      if (sensors[i] != NULL) {
 804d574:	4a24      	ldr	r2, [pc, #144]	; (804d608 <sensor_timer_handler+0xac>)
 804d576:	683b      	ldr	r3, [r7, #0]
 804d578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 804d57c:	2b00      	cmp	r3, #0
 804d57e:	d035      	beq.n	804d5ec <sensor_timer_handler+0x90>
        if (!sensors[i]->init_completed) {
 804d580:	4a21      	ldr	r2, [pc, #132]	; (804d608 <sensor_timer_handler+0xac>)
 804d582:	683b      	ldr	r3, [r7, #0]
 804d584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 804d588:	7d1b      	ldrb	r3, [r3, #20]
 804d58a:	f083 0301 	eor.w	r3, r3, #1
 804d58e:	b2db      	uxtb	r3, r3
 804d590:	2b00      	cmp	r3, #0
 804d592:	d126      	bne.n	804d5e2 <sensor_timer_handler+0x86>
          continue;
        }
        if (!sensors[i]->activate) {
 804d594:	4a1c      	ldr	r2, [pc, #112]	; (804d608 <sensor_timer_handler+0xac>)
 804d596:	683b      	ldr	r3, [r7, #0]
 804d598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 804d59c:	791b      	ldrb	r3, [r3, #4]
 804d59e:	f083 0301 	eor.w	r3, r3, #1
 804d5a2:	b2db      	uxtb	r3, r3
 804d5a4:	2b00      	cmp	r3, #0
 804d5a6:	d11e      	bne.n	804d5e6 <sensor_timer_handler+0x8a>
          continue;
        }
        if (sensors[i]->use_interrupt) {
 804d5a8:	4a17      	ldr	r2, [pc, #92]	; (804d608 <sensor_timer_handler+0xac>)
 804d5aa:	683b      	ldr	r3, [r7, #0]
 804d5ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 804d5b0:	7d5b      	ldrb	r3, [r3, #21]
 804d5b2:	2b00      	cmp	r3, #0
 804d5b4:	d119      	bne.n	804d5ea <sensor_timer_handler+0x8e>
          continue;
        }

        if (sensors[i]->sensor_op_ptr[0].publish_sensor_data != NULL) {
 804d5b6:	4a14      	ldr	r2, [pc, #80]	; (804d608 <sensor_timer_handler+0xac>)
 804d5b8:	683b      	ldr	r3, [r7, #0]
 804d5ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 804d5be:	699b      	ldr	r3, [r3, #24]
 804d5c0:	68db      	ldr	r3, [r3, #12]
 804d5c2:	2b00      	cmp	r3, #0
 804d5c4:	d012      	beq.n	804d5ec <sensor_timer_handler+0x90>
          res =
              sensors[i]->sensor_op_ptr[0].
 804d5c6:	4a10      	ldr	r2, [pc, #64]	; (804d608 <sensor_timer_handler+0xac>)
 804d5c8:	683b      	ldr	r3, [r7, #0]
 804d5ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 804d5ce:	699b      	ldr	r3, [r3, #24]
 804d5d0:	68db      	ldr	r3, [r3, #12]
 804d5d2:	4a0c      	ldr	r2, [pc, #48]	; (804d604 <sensor_timer_handler+0xa8>)
 804d5d4:	6812      	ldr	r2, [r2, #0]
 804d5d6:	4610      	mov	r0, r2
 804d5d8:	4798      	blx	r3
 804d5da:	6078      	str	r0, [r7, #4]
              publish_sensor_data(platform_init_parms);
          if (res == SENSOR_SUCCESS) {
 804d5dc:	687b      	ldr	r3, [r7, #4]
 804d5de:	2b00      	cmp	r3, #0
 804d5e0:	e004      	b.n	804d5ec <sensor_timer_handler+0x90>
          continue;
 804d5e2:	bf00      	nop
 804d5e4:	e002      	b.n	804d5ec <sensor_timer_handler+0x90>
          continue;
 804d5e6:	bf00      	nop
 804d5e8:	e000      	b.n	804d5ec <sensor_timer_handler+0x90>
          continue;
 804d5ea:	bf00      	nop
    for (int i = 0; i < SENSOR_TYPE_MAX; i++) {
 804d5ec:	683b      	ldr	r3, [r7, #0]
 804d5ee:	3301      	adds	r3, #1
 804d5f0:	603b      	str	r3, [r7, #0]
 804d5f2:	683b      	ldr	r3, [r7, #0]
 804d5f4:	2b0e      	cmp	r3, #14
 804d5f6:	ddbd      	ble.n	804d574 <sensor_timer_handler+0x18>
      }
    }
  } else {
    //register sensor is not called successfully
  }
  return res;
 804d5f8:	687b      	ldr	r3, [r7, #4]
}
 804d5fa:	4618      	mov	r0, r3
 804d5fc:	3708      	adds	r7, #8
 804d5fe:	46bd      	mov	sp, r7
 804d600:	bd80      	pop	{r7, pc}
 804d602:	bf00      	nop
 804d604:	2000845c 	.word	0x2000845c
 804d608:	2000841c 	.word	0x2000841c

0804d60c <sensor_irq_handler>:

int sensor_irq_handler(interrupt_event_t intr_event)
{
 804d60c:	b590      	push	{r4, r7, lr}
 804d60e:	b087      	sub	sp, #28
 804d610:	af00      	add	r7, sp, #0
 804d612:	463c      	mov	r4, r7
 804d614:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  int res = SENSOR_SUCCESS;
 804d618:	2300      	movs	r3, #0
 804d61a:	613b      	str	r3, [r7, #16]
  if (platform_init_parms != NULL) {
 804d61c:	4b13      	ldr	r3, [pc, #76]	; (804d66c <sensor_irq_handler+0x60>)
 804d61e:	681b      	ldr	r3, [r3, #0]
 804d620:	2b00      	cmp	r3, #0
 804d622:	d01e      	beq.n	804d662 <sensor_irq_handler+0x56>
    for (int i = SENSOR_TYPE_PROXIMITY_HEAD; i <= SENSOR_TYPE_PROXIMITY_REAR;
 804d624:	2305      	movs	r3, #5
 804d626:	617b      	str	r3, [r7, #20]
 804d628:	e018      	b.n	804d65c <sensor_irq_handler+0x50>
         i = i + 2) {
      if (sensors[i] != NULL) {
 804d62a:	4a11      	ldr	r2, [pc, #68]	; (804d670 <sensor_irq_handler+0x64>)
 804d62c:	697b      	ldr	r3, [r7, #20]
 804d62e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 804d632:	2b00      	cmp	r3, #0
 804d634:	d00f      	beq.n	804d656 <sensor_irq_handler+0x4a>
        res =
            sensors[i]->sensor_op_ptr[0].publish_sensor_data(&intr_event.
 804d636:	4a0e      	ldr	r2, [pc, #56]	; (804d670 <sensor_irq_handler+0x64>)
 804d638:	697b      	ldr	r3, [r7, #20]
 804d63a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 804d63e:	699b      	ldr	r3, [r3, #24]
 804d640:	68db      	ldr	r3, [r3, #12]
 804d642:	463a      	mov	r2, r7
 804d644:	4610      	mov	r0, r2
 804d646:	4798      	blx	r3
 804d648:	6138      	str	r0, [r7, #16]
                                                             interrupt_num);
        if (res != SENSOR_SUCCESS) {
 804d64a:	693b      	ldr	r3, [r7, #16]
 804d64c:	2b00      	cmp	r3, #0
 804d64e:	d002      	beq.n	804d656 <sensor_irq_handler+0x4a>
          printf("publish_sensor_data failed\r\n");
 804d650:	4808      	ldr	r0, [pc, #32]	; (804d674 <sensor_irq_handler+0x68>)
 804d652:	f013 fa2b 	bl	8060aac <puts>
         i = i + 2) {
 804d656:	697b      	ldr	r3, [r7, #20]
 804d658:	3302      	adds	r3, #2
 804d65a:	617b      	str	r3, [r7, #20]
    for (int i = SENSOR_TYPE_PROXIMITY_HEAD; i <= SENSOR_TYPE_PROXIMITY_REAR;
 804d65c:	697b      	ldr	r3, [r7, #20]
 804d65e:	2b07      	cmp	r3, #7
 804d660:	dde3      	ble.n	804d62a <sensor_irq_handler+0x1e>
      }
    }
  } else {
    //assert here should be occured!
  }
  return 0;
 804d662:	2300      	movs	r3, #0
}
 804d664:	4618      	mov	r0, r3
 804d666:	371c      	adds	r7, #28
 804d668:	46bd      	mov	sp, r7
 804d66a:	bd90      	pop	{r4, r7, pc}
 804d66c:	2000845c 	.word	0x2000845c
 804d670:	2000841c 	.word	0x2000841c
 804d674:	08066080 	.word	0x08066080

0804d678 <sensor_data_handler>:

int sensor_data_handler(sensors_event_t * sensor_data)
{
 804d678:	b580      	push	{r7, lr}
 804d67a:	b082      	sub	sp, #8
 804d67c:	af00      	add	r7, sp, #0
 804d67e:	6078      	str	r0, [r7, #4]
  if (sensor_avaiable_check(SENSOR_TYPE_ROTATION_VECTOR)
 804d680:	200d      	movs	r0, #13
 804d682:	f7ff f97b 	bl	804c97c <sensor_avaiable_check>
 804d686:	4603      	mov	r3, r0
 804d688:	2b00      	cmp	r3, #0
 804d68a:	d017      	beq.n	804d6bc <sensor_data_handler+0x44>
      && ((sensorEnabledBitMask >> SENSOR_TYPE_ROTATION_VECTOR) & 1)
 804d68c:	4b1c      	ldr	r3, [pc, #112]	; (804d700 <sensor_data_handler+0x88>)
 804d68e:	881b      	ldrh	r3, [r3, #0]
 804d690:	0b5b      	lsrs	r3, r3, #13
 804d692:	b29b      	uxth	r3, r3
 804d694:	f003 0301 	and.w	r3, r3, #1
 804d698:	2b00      	cmp	r3, #0
 804d69a:	d00f      	beq.n	804d6bc <sensor_data_handler+0x44>
      && (sensor_data->sensor_type == SENSOR_TYPE_ACCELEROMETER
 804d69c:	687b      	ldr	r3, [r7, #4]
 804d69e:	781b      	ldrb	r3, [r3, #0]
 804d6a0:	2b00      	cmp	r3, #0
 804d6a2:	d003      	beq.n	804d6ac <sensor_data_handler+0x34>
          || sensor_data->sensor_type == SENSOR_TYPE_GYROSCOPE
 804d6a4:	687b      	ldr	r3, [r7, #4]
 804d6a6:	781b      	ldrb	r3, [r3, #0]
 804d6a8:	2b02      	cmp	r3, #2
 804d6aa:	d107      	bne.n	804d6bc <sensor_data_handler+0x44>
          // || sensor_data->sensor_type == SENSOR_TYPE_MAGNETIC_FIELD
      ))
    sensors[SENSOR_TYPE_ROTATION_VECTOR]->sensor_op_ptr[0].
 804d6ac:	4b15      	ldr	r3, [pc, #84]	; (804d704 <sensor_data_handler+0x8c>)
 804d6ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 804d6b0:	699b      	ldr	r3, [r3, #24]
 804d6b2:	691b      	ldr	r3, [r3, #16]
 804d6b4:	6879      	ldr	r1, [r7, #4]
 804d6b6:	2007      	movs	r0, #7
 804d6b8:	4798      	blx	r3
 804d6ba:	e01c      	b.n	804d6f6 <sensor_data_handler+0x7e>
        config(SENSOR_CONFIG_DATA, sensor_data);
  else if (sensor_avaiable_check(SENSOR_TYPE_SPEED_VECTOR)
 804d6bc:	200e      	movs	r0, #14
 804d6be:	f7ff f95d 	bl	804c97c <sensor_avaiable_check>
 804d6c2:	4603      	mov	r3, r0
 804d6c4:	2b00      	cmp	r3, #0
 804d6c6:	d016      	beq.n	804d6f6 <sensor_data_handler+0x7e>
           && ((sensorEnabledBitMask >> SENSOR_TYPE_SPEED_VECTOR) & 1)
 804d6c8:	4b0d      	ldr	r3, [pc, #52]	; (804d700 <sensor_data_handler+0x88>)
 804d6ca:	881b      	ldrh	r3, [r3, #0]
 804d6cc:	0b9b      	lsrs	r3, r3, #14
 804d6ce:	b29b      	uxth	r3, r3
 804d6d0:	f003 0301 	and.w	r3, r3, #1
 804d6d4:	2b00      	cmp	r3, #0
 804d6d6:	d00e      	beq.n	804d6f6 <sensor_data_handler+0x7e>
           && (sensor_data->sensor_type == SENSOR_TYPE_LIGHT_SPEED
 804d6d8:	687b      	ldr	r3, [r7, #4]
 804d6da:	781b      	ldrb	r3, [r3, #0]
 804d6dc:	2b08      	cmp	r3, #8
 804d6de:	d003      	beq.n	804d6e8 <sensor_data_handler+0x70>
               || sensor_data->sensor_type == SENSOR_TYPE_PROXIMITY_BOT))
 804d6e0:	687b      	ldr	r3, [r7, #4]
 804d6e2:	781b      	ldrb	r3, [r3, #0]
 804d6e4:	2b06      	cmp	r3, #6
 804d6e6:	d106      	bne.n	804d6f6 <sensor_data_handler+0x7e>
    sensors[SENSOR_TYPE_SPEED_VECTOR]->sensor_op_ptr[0].
 804d6e8:	4b06      	ldr	r3, [pc, #24]	; (804d704 <sensor_data_handler+0x8c>)
 804d6ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804d6ec:	699b      	ldr	r3, [r3, #24]
 804d6ee:	691b      	ldr	r3, [r3, #16]
 804d6f0:	6879      	ldr	r1, [r7, #4]
 804d6f2:	2007      	movs	r0, #7
 804d6f4:	4798      	blx	r3
        config(SENSOR_CONFIG_DATA, sensor_data);
  return 0;
 804d6f6:	2300      	movs	r3, #0
}
 804d6f8:	4618      	mov	r0, r3
 804d6fa:	3708      	adds	r7, #8
 804d6fc:	46bd      	mov	sp, r7
 804d6fe:	bd80      	pop	{r7, pc}
 804d700:	20008458 	.word	0x20008458
 804d704:	2000841c 	.word	0x2000841c

0804d708 <sensor_get_timestamp>:

#define MAX_U32_TIMESTAMP 0xFFFFFFFF

uint64_t sensor_get_timestamp()
{
 804d708:	b5b0      	push	{r4, r5, r7, lr}
 804d70a:	af00      	add	r7, sp, #0
  static uint64_t sensor_u64timestamp = 0;
  static uint64_t last_sensor_u64timestamp = 0;
  static uint8_t u32overflowcount = 0;
  static uint8_t u64overflowcount = 0;

  currentu32timestamp = osKernelGetTickCount();
 804d70c:	f008 fc24 	bl	8055f58 <osKernelGetTickCount>
 804d710:	4603      	mov	r3, r0
 804d712:	4a25      	ldr	r2, [pc, #148]	; (804d7a8 <sensor_get_timestamp+0xa0>)
 804d714:	6013      	str	r3, [r2, #0]

  if (currentu32timestamp < lastu32timestamp) {
 804d716:	4b24      	ldr	r3, [pc, #144]	; (804d7a8 <sensor_get_timestamp+0xa0>)
 804d718:	681a      	ldr	r2, [r3, #0]
 804d71a:	4b24      	ldr	r3, [pc, #144]	; (804d7ac <sensor_get_timestamp+0xa4>)
 804d71c:	681b      	ldr	r3, [r3, #0]
 804d71e:	429a      	cmp	r2, r3
 804d720:	d217      	bcs.n	804d752 <sensor_get_timestamp+0x4a>
    u32overflowcount++;
 804d722:	4b23      	ldr	r3, [pc, #140]	; (804d7b0 <sensor_get_timestamp+0xa8>)
 804d724:	781b      	ldrb	r3, [r3, #0]
 804d726:	3301      	adds	r3, #1
 804d728:	b2da      	uxtb	r2, r3
 804d72a:	4b21      	ldr	r3, [pc, #132]	; (804d7b0 <sensor_get_timestamp+0xa8>)
 804d72c:	701a      	strb	r2, [r3, #0]
    sensor_u64timestamp = MAX_U32_TIMESTAMP * u32overflowcount;
 804d72e:	4b20      	ldr	r3, [pc, #128]	; (804d7b0 <sensor_get_timestamp+0xa8>)
 804d730:	781b      	ldrb	r3, [r3, #0]
 804d732:	425b      	negs	r3, r3
 804d734:	461a      	mov	r2, r3
 804d736:	f04f 0300 	mov.w	r3, #0
 804d73a:	491e      	ldr	r1, [pc, #120]	; (804d7b4 <sensor_get_timestamp+0xac>)
 804d73c:	e9c1 2300 	strd	r2, r3, [r1]
    last_sensor_u64timestamp = MAX_U32_TIMESTAMP * u32overflowcount;
 804d740:	4b1b      	ldr	r3, [pc, #108]	; (804d7b0 <sensor_get_timestamp+0xa8>)
 804d742:	781b      	ldrb	r3, [r3, #0]
 804d744:	425b      	negs	r3, r3
 804d746:	461a      	mov	r2, r3
 804d748:	f04f 0300 	mov.w	r3, #0
 804d74c:	491a      	ldr	r1, [pc, #104]	; (804d7b8 <sensor_get_timestamp+0xb0>)
 804d74e:	e9c1 2300 	strd	r2, r3, [r1]
  }

  if (u32overflowcount) {
 804d752:	4b17      	ldr	r3, [pc, #92]	; (804d7b0 <sensor_get_timestamp+0xa8>)
 804d754:	781b      	ldrb	r3, [r3, #0]
 804d756:	2b00      	cmp	r3, #0
 804d758:	d00e      	beq.n	804d778 <sensor_get_timestamp+0x70>
    sensor_u64timestamp = last_sensor_u64timestamp + currentu32timestamp;
 804d75a:	4b13      	ldr	r3, [pc, #76]	; (804d7a8 <sensor_get_timestamp+0xa0>)
 804d75c:	681b      	ldr	r3, [r3, #0]
 804d75e:	4618      	mov	r0, r3
 804d760:	f04f 0100 	mov.w	r1, #0
 804d764:	4b14      	ldr	r3, [pc, #80]	; (804d7b8 <sensor_get_timestamp+0xb0>)
 804d766:	e9d3 2300 	ldrd	r2, r3, [r3]
 804d76a:	1884      	adds	r4, r0, r2
 804d76c:	eb41 0503 	adc.w	r5, r1, r3
 804d770:	4b10      	ldr	r3, [pc, #64]	; (804d7b4 <sensor_get_timestamp+0xac>)
 804d772:	e9c3 4500 	strd	r4, r5, [r3]
 804d776:	e007      	b.n	804d788 <sensor_get_timestamp+0x80>
  } else {
    sensor_u64timestamp = currentu32timestamp;
 804d778:	4b0b      	ldr	r3, [pc, #44]	; (804d7a8 <sensor_get_timestamp+0xa0>)
 804d77a:	681b      	ldr	r3, [r3, #0]
 804d77c:	461a      	mov	r2, r3
 804d77e:	f04f 0300 	mov.w	r3, #0
 804d782:	490c      	ldr	r1, [pc, #48]	; (804d7b4 <sensor_get_timestamp+0xac>)
 804d784:	e9c1 2300 	strd	r2, r3, [r1]
  }

  lastu32timestamp = currentu32timestamp;
 804d788:	4b07      	ldr	r3, [pc, #28]	; (804d7a8 <sensor_get_timestamp+0xa0>)
 804d78a:	681b      	ldr	r3, [r3, #0]
 804d78c:	4a07      	ldr	r2, [pc, #28]	; (804d7ac <sensor_get_timestamp+0xa4>)
 804d78e:	6013      	str	r3, [r2, #0]
  last_sensor_u64timestamp = sensor_u64timestamp;
 804d790:	4b08      	ldr	r3, [pc, #32]	; (804d7b4 <sensor_get_timestamp+0xac>)
 804d792:	e9d3 2300 	ldrd	r2, r3, [r3]
 804d796:	4908      	ldr	r1, [pc, #32]	; (804d7b8 <sensor_get_timestamp+0xb0>)
 804d798:	e9c1 2300 	strd	r2, r3, [r1]
  return sensor_u64timestamp;
 804d79c:	4b05      	ldr	r3, [pc, #20]	; (804d7b4 <sensor_get_timestamp+0xac>)
 804d79e:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 804d7a2:	4610      	mov	r0, r2
 804d7a4:	4619      	mov	r1, r3
 804d7a6:	bdb0      	pop	{r4, r5, r7, pc}
 804d7a8:	20008464 	.word	0x20008464
 804d7ac:	20008468 	.word	0x20008468
 804d7b0:	2000846c 	.word	0x2000846c
 804d7b4:	20008470 	.word	0x20008470
 804d7b8:	20008478 	.word	0x20008478

0804d7bc <speedv_init>:
static uint64_t last_op_timestamp = 0;
static uint64_t current_op_timestamp = 0;
static float raw_optical_data[2] = { 0 };

int speedv_init(void *para, void *para2)
{
 804d7bc:	b580      	push	{r7, lr}
 804d7be:	b082      	sub	sp, #8
 804d7c0:	af00      	add	r7, sp, #0
 804d7c2:	6078      	str	r0, [r7, #4]
 804d7c4:	6039      	str	r1, [r7, #0]
  speed_v_init_parms = (platform_prams *) para;
 804d7c6:	4a17      	ldr	r2, [pc, #92]	; (804d824 <speedv_init+0x68>)
 804d7c8:	687b      	ldr	r3, [r7, #4]
 804d7ca:	6013      	str	r3, [r2, #0]
  sensor_ptr = (sensor_device **) para2;
 804d7cc:	4a16      	ldr	r2, [pc, #88]	; (804d828 <speedv_init+0x6c>)
 804d7ce:	683b      	ldr	r3, [r7, #0]
 804d7d0:	6013      	str	r3, [r2, #0]

  if ((sensor_ptr[SENSOR_TYPE_PROXIMITY_BOT] != NULL)
 804d7d2:	4b15      	ldr	r3, [pc, #84]	; (804d828 <speedv_init+0x6c>)
 804d7d4:	681b      	ldr	r3, [r3, #0]
 804d7d6:	3318      	adds	r3, #24
 804d7d8:	681b      	ldr	r3, [r3, #0]
 804d7da:	2b00      	cmp	r3, #0
 804d7dc:	d01b      	beq.n	804d816 <speedv_init+0x5a>
      && (sensor_ptr[SENSOR_TYPE_LIGHT_SPEED] != NULL)) {
 804d7de:	4b12      	ldr	r3, [pc, #72]	; (804d828 <speedv_init+0x6c>)
 804d7e0:	681b      	ldr	r3, [r3, #0]
 804d7e2:	3320      	adds	r3, #32
 804d7e4:	681b      	ldr	r3, [r3, #0]
 804d7e6:	2b00      	cmp	r3, #0
 804d7e8:	d015      	beq.n	804d816 <speedv_init+0x5a>
    if ((sensor_ptr[SENSOR_TYPE_PROXIMITY_BOT]->init_completed)
 804d7ea:	4b0f      	ldr	r3, [pc, #60]	; (804d828 <speedv_init+0x6c>)
 804d7ec:	681b      	ldr	r3, [r3, #0]
 804d7ee:	3318      	adds	r3, #24
 804d7f0:	681b      	ldr	r3, [r3, #0]
 804d7f2:	7d1b      	ldrb	r3, [r3, #20]
 804d7f4:	2b00      	cmp	r3, #0
 804d7f6:	d00b      	beq.n	804d810 <speedv_init+0x54>
        && (sensor_ptr[SENSOR_TYPE_LIGHT_SPEED]->init_completed)) {
 804d7f8:	4b0b      	ldr	r3, [pc, #44]	; (804d828 <speedv_init+0x6c>)
 804d7fa:	681b      	ldr	r3, [r3, #0]
 804d7fc:	3320      	adds	r3, #32
 804d7fe:	681b      	ldr	r3, [r3, #0]
 804d800:	7d1b      	ldrb	r3, [r3, #20]
 804d802:	2b00      	cmp	r3, #0
 804d804:	d004      	beq.n	804d810 <speedv_init+0x54>
      printf("all depending sensor enabled\r\n");
 804d806:	4809      	ldr	r0, [pc, #36]	; (804d82c <speedv_init+0x70>)
 804d808:	f013 f950 	bl	8060aac <puts>
      return SENSOR_SUCCESS;
 804d80c:	2300      	movs	r3, #0
 804d80e:	e004      	b.n	804d81a <speedv_init+0x5e>
    } else {
      printf("depending sensor missing, init will exit with fail!\r\n");
 804d810:	4807      	ldr	r0, [pc, #28]	; (804d830 <speedv_init+0x74>)
 804d812:	f013 f94b 	bl	8060aac <puts>
    }
  }

  return SENSOR_FAILED;
 804d816:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 804d81a:	4618      	mov	r0, r3
 804d81c:	3708      	adds	r7, #8
 804d81e:	46bd      	mov	sp, r7
 804d820:	bd80      	pop	{r7, pc}
 804d822:	bf00      	nop
 804d824:	20008484 	.word	0x20008484
 804d828:	20008480 	.word	0x20008480
 804d82c:	0806609c 	.word	0x0806609c
 804d830:	080660bc 	.word	0x080660bc

0804d834 <speedv_init_complete>:

int speedv_init_complete(void *para)
{
 804d834:	b480      	push	{r7}
 804d836:	b083      	sub	sp, #12
 804d838:	af00      	add	r7, sp, #0
 804d83a:	6078      	str	r0, [r7, #4]
  return SENSOR_SUCCESS;
 804d83c:	2300      	movs	r3, #0
}
 804d83e:	4618      	mov	r0, r3
 804d840:	370c      	adds	r7, #12
 804d842:	46bd      	mov	sp, r7
 804d844:	f85d 7b04 	ldr.w	r7, [sp], #4
 804d848:	4770      	bx	lr
	...

0804d84c <speedv_enable>:

int speedv_enable()
{
 804d84c:	b580      	push	{r7, lr}
 804d84e:	b096      	sub	sp, #88	; 0x58
 804d850:	af00      	add	r7, sp, #0
  sensor_message_event_t sensor_msg_event;
  osStatus_t res;
  if (sensor_activate_count == 0) {
 804d852:	4b18      	ldr	r3, [pc, #96]	; (804d8b4 <speedv_enable+0x68>)
 804d854:	781b      	ldrb	r3, [r3, #0]
 804d856:	2b00      	cmp	r3, #0
 804d858:	d120      	bne.n	804d89c <speedv_enable+0x50>
    sensor_msg_event.message_event_type = SENSOR_CONFIG_MESSAGE;
 804d85a:	2300      	movs	r3, #0
 804d85c:	703b      	strb	r3, [r7, #0]
    sensor_msg_event.message_event_t.config_event.config_type = SENSOR_ACTIVATE;
 804d85e:	2301      	movs	r3, #1
 804d860:	727b      	strb	r3, [r7, #9]
    sensor_msg_event.message_event_t.config_event.sensor_type =
 804d862:	2308      	movs	r3, #8
 804d864:	723b      	strb	r3, [r7, #8]
        SENSOR_TYPE_LIGHT_SPEED;
    osMessageQueuePut(speed_v_init_parms->SensorMessageQHandle,
 804d866:	4b14      	ldr	r3, [pc, #80]	; (804d8b8 <speedv_enable+0x6c>)
 804d868:	681b      	ldr	r3, [r3, #0]
 804d86a:	f8d3 00f4 	ldr.w	r0, [r3, #244]	; 0xf4
 804d86e:	4639      	mov	r1, r7
 804d870:	2300      	movs	r3, #0
 804d872:	2200      	movs	r2, #0
 804d874:	f008 fdc6 	bl	8056404 <osMessageQueuePut>
                      &sensor_msg_event, 0, 0);
    sensor_msg_event.message_event_type = SENSOR_CONFIG_MESSAGE;
 804d878:	2300      	movs	r3, #0
 804d87a:	703b      	strb	r3, [r7, #0]
    sensor_msg_event.message_event_t.config_event.config_type = SENSOR_ACTIVATE;
 804d87c:	2301      	movs	r3, #1
 804d87e:	727b      	strb	r3, [r7, #9]
    sensor_msg_event.message_event_t.config_event.sensor_type =
 804d880:	2306      	movs	r3, #6
 804d882:	723b      	strb	r3, [r7, #8]
        SENSOR_TYPE_PROXIMITY_BOT;
    osMessageQueuePut(speed_v_init_parms->SensorMessageQHandle,
 804d884:	4b0c      	ldr	r3, [pc, #48]	; (804d8b8 <speedv_enable+0x6c>)
 804d886:	681b      	ldr	r3, [r3, #0]
 804d888:	f8d3 00f4 	ldr.w	r0, [r3, #244]	; 0xf4
 804d88c:	4639      	mov	r1, r7
 804d88e:	2300      	movs	r3, #0
 804d890:	2200      	movs	r2, #0
 804d892:	f008 fdb7 	bl	8056404 <osMessageQueuePut>
                      &sensor_msg_event, 0, 0);
    speed_v_activated = true;
 804d896:	4b09      	ldr	r3, [pc, #36]	; (804d8bc <speedv_enable+0x70>)
 804d898:	2201      	movs	r2, #1
 804d89a:	701a      	strb	r2, [r3, #0]
  }
  sensor_activate_count++;
 804d89c:	4b05      	ldr	r3, [pc, #20]	; (804d8b4 <speedv_enable+0x68>)
 804d89e:	781b      	ldrb	r3, [r3, #0]
 804d8a0:	3301      	adds	r3, #1
 804d8a2:	b2da      	uxtb	r2, r3
 804d8a4:	4b03      	ldr	r3, [pc, #12]	; (804d8b4 <speedv_enable+0x68>)
 804d8a6:	701a      	strb	r2, [r3, #0]
}
 804d8a8:	bf00      	nop
 804d8aa:	4618      	mov	r0, r3
 804d8ac:	3758      	adds	r7, #88	; 0x58
 804d8ae:	46bd      	mov	sp, r7
 804d8b0:	bd80      	pop	{r7, pc}
 804d8b2:	bf00      	nop
 804d8b4:	20008489 	.word	0x20008489
 804d8b8:	20008484 	.word	0x20008484
 804d8bc:	20008488 	.word	0x20008488

0804d8c0 <speedv_disable>:

int speedv_disable()
{
 804d8c0:	b580      	push	{r7, lr}
 804d8c2:	b096      	sub	sp, #88	; 0x58
 804d8c4:	af00      	add	r7, sp, #0
  sensor_message_event_t sensor_msg_event;
  osStatus_t res;
  sensor_activate_count--;
 804d8c6:	4b18      	ldr	r3, [pc, #96]	; (804d928 <speedv_disable+0x68>)
 804d8c8:	781b      	ldrb	r3, [r3, #0]
 804d8ca:	3b01      	subs	r3, #1
 804d8cc:	b2da      	uxtb	r2, r3
 804d8ce:	4b16      	ldr	r3, [pc, #88]	; (804d928 <speedv_disable+0x68>)
 804d8d0:	701a      	strb	r2, [r3, #0]
  if (sensor_activate_count == 0) {
 804d8d2:	4b15      	ldr	r3, [pc, #84]	; (804d928 <speedv_disable+0x68>)
 804d8d4:	781b      	ldrb	r3, [r3, #0]
 804d8d6:	2b00      	cmp	r3, #0
 804d8d8:	d120      	bne.n	804d91c <speedv_disable+0x5c>
    sensor_msg_event.message_event_type = SENSOR_CONFIG_MESSAGE;
 804d8da:	2300      	movs	r3, #0
 804d8dc:	703b      	strb	r3, [r7, #0]
    sensor_msg_event.message_event_t.config_event.config_type =
 804d8de:	2300      	movs	r3, #0
 804d8e0:	727b      	strb	r3, [r7, #9]
        SENSOR_DEACTIVATE;
    sensor_msg_event.message_event_t.config_event.sensor_type =
 804d8e2:	2308      	movs	r3, #8
 804d8e4:	723b      	strb	r3, [r7, #8]
        SENSOR_TYPE_LIGHT_SPEED;
    osMessageQueuePut(speed_v_init_parms->SensorMessageQHandle,
 804d8e6:	4b11      	ldr	r3, [pc, #68]	; (804d92c <speedv_disable+0x6c>)
 804d8e8:	681b      	ldr	r3, [r3, #0]
 804d8ea:	f8d3 00f4 	ldr.w	r0, [r3, #244]	; 0xf4
 804d8ee:	4639      	mov	r1, r7
 804d8f0:	2300      	movs	r3, #0
 804d8f2:	2200      	movs	r2, #0
 804d8f4:	f008 fd86 	bl	8056404 <osMessageQueuePut>
                      &sensor_msg_event, 0, 0);
    sensor_msg_event.message_event_type = SENSOR_CONFIG_MESSAGE;
 804d8f8:	2300      	movs	r3, #0
 804d8fa:	703b      	strb	r3, [r7, #0]
    sensor_msg_event.message_event_t.config_event.config_type =
 804d8fc:	2300      	movs	r3, #0
 804d8fe:	727b      	strb	r3, [r7, #9]
        SENSOR_DEACTIVATE;
    sensor_msg_event.message_event_t.config_event.sensor_type =
 804d900:	2306      	movs	r3, #6
 804d902:	723b      	strb	r3, [r7, #8]
        SENSOR_TYPE_PROXIMITY_BOT;
    osMessageQueuePut(speed_v_init_parms->SensorMessageQHandle,
 804d904:	4b09      	ldr	r3, [pc, #36]	; (804d92c <speedv_disable+0x6c>)
 804d906:	681b      	ldr	r3, [r3, #0]
 804d908:	f8d3 00f4 	ldr.w	r0, [r3, #244]	; 0xf4
 804d90c:	4639      	mov	r1, r7
 804d90e:	2300      	movs	r3, #0
 804d910:	2200      	movs	r2, #0
 804d912:	f008 fd77 	bl	8056404 <osMessageQueuePut>
                      &sensor_msg_event, 0, 0);
    speed_v_activated = false;
 804d916:	4b06      	ldr	r3, [pc, #24]	; (804d930 <speedv_disable+0x70>)
 804d918:	2200      	movs	r2, #0
 804d91a:	701a      	strb	r2, [r3, #0]
  }
}
 804d91c:	bf00      	nop
 804d91e:	4618      	mov	r0, r3
 804d920:	3758      	adds	r7, #88	; 0x58
 804d922:	46bd      	mov	sp, r7
 804d924:	bd80      	pop	{r7, pc}
 804d926:	bf00      	nop
 804d928:	20008489 	.word	0x20008489
 804d92c:	20008484 	.word	0x20008484
 804d930:	20008488 	.word	0x20008488

0804d934 <speedv_activate>:

int speedv_activate(bool activate)
{
 804d934:	b580      	push	{r7, lr}
 804d936:	b082      	sub	sp, #8
 804d938:	af00      	add	r7, sp, #0
 804d93a:	4603      	mov	r3, r0
 804d93c:	71fb      	strb	r3, [r7, #7]
  if (activate) {
 804d93e:	79fb      	ldrb	r3, [r7, #7]
 804d940:	2b00      	cmp	r3, #0
 804d942:	d002      	beq.n	804d94a <speedv_activate+0x16>
    speedv_enable();
 804d944:	f7ff ff82 	bl	804d84c <speedv_enable>
 804d948:	e001      	b.n	804d94e <speedv_activate+0x1a>
  } else {
    speedv_disable();
 804d94a:	f7ff ffb9 	bl	804d8c0 <speedv_disable>
  }
  return SENSOR_SUCCESS;
 804d94e:	2300      	movs	r3, #0
}
 804d950:	4618      	mov	r0, r3
 804d952:	3708      	adds	r7, #8
 804d954:	46bd      	mov	sp, r7
 804d956:	bd80      	pop	{r7, pc}

0804d958 <speedv_publish_sensor_data>:

int speedv_publish_sensor_data(void *para)
{
 804d958:	b5b0      	push	{r4, r5, r7, lr}
 804d95a:	b098      	sub	sp, #96	; 0x60
 804d95c:	af00      	add	r7, sp, #0
 804d95e:	6078      	str	r0, [r7, #4]
  /* Read samples in polling mode (no int) */
  sensors_event_t sensor_data = { 0 };
 804d960:	f107 0308 	add.w	r3, r7, #8
 804d964:	2250      	movs	r2, #80	; 0x50
 804d966:	2100      	movs	r1, #0
 804d968:	4618      	mov	r0, r3
 804d96a:	f012 fb27 	bl	805ffbc <memset>
  uint64_t difftime = 0;
 804d96e:	f04f 0200 	mov.w	r2, #0
 804d972:	f04f 0300 	mov.w	r3, #0
 804d976:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  if (speed_v_activated) {
 804d97a:	4b2d      	ldr	r3, [pc, #180]	; (804da30 <speedv_publish_sensor_data+0xd8>)
 804d97c:	781b      	ldrb	r3, [r3, #0]
 804d97e:	2b00      	cmp	r3, #0
 804d980:	d050      	beq.n	804da24 <speedv_publish_sensor_data+0xcc>
    //send related messages to SensorDataQ
    sensor_data.sensor_type = SENSOR_TYPE_SPEED_VECTOR;
 804d982:	230e      	movs	r3, #14
 804d984:	723b      	strb	r3, [r7, #8]
    sensor_data.accuracy = 3;
 804d986:	2303      	movs	r3, #3
 804d988:	727b      	strb	r3, [r7, #9]
    sensor_data.timestamp = sensor_get_timestamp();
 804d98a:	f7ff febd 	bl	804d708 <sensor_get_timestamp>
 804d98e:	4602      	mov	r2, r0
 804d990:	460b      	mov	r3, r1
 804d992:	e9c7 2304 	strd	r2, r3, [r7, #16]
    if (last_op_timestamp == 0)
 804d996:	4b27      	ldr	r3, [pc, #156]	; (804da34 <speedv_publish_sensor_data+0xdc>)
 804d998:	e9d3 2300 	ldrd	r2, r3, [r3]
 804d99c:	4313      	orrs	r3, r2
 804d99e:	d106      	bne.n	804d9ae <speedv_publish_sensor_data+0x56>
      last_op_timestamp = current_op_timestamp;
 804d9a0:	4b25      	ldr	r3, [pc, #148]	; (804da38 <speedv_publish_sensor_data+0xe0>)
 804d9a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 804d9a6:	4923      	ldr	r1, [pc, #140]	; (804da34 <speedv_publish_sensor_data+0xdc>)
 804d9a8:	e9c1 2300 	strd	r2, r3, [r1]
 804d9ac:	e03a      	b.n	804da24 <speedv_publish_sensor_data+0xcc>
    else {
      difftime = current_op_timestamp - last_op_timestamp;
 804d9ae:	4b22      	ldr	r3, [pc, #136]	; (804da38 <speedv_publish_sensor_data+0xe0>)
 804d9b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 804d9b4:	4b1f      	ldr	r3, [pc, #124]	; (804da34 <speedv_publish_sensor_data+0xdc>)
 804d9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 804d9ba:	1a84      	subs	r4, r0, r2
 804d9bc:	eb61 0503 	sbc.w	r5, r1, r3
 804d9c0:	e9c7 4516 	strd	r4, r5, [r7, #88]	; 0x58
      if (difftime > 0) {
 804d9c4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 804d9c8:	4313      	orrs	r3, r2
 804d9ca:	d02b      	beq.n	804da24 <speedv_publish_sensor_data+0xcc>
        sensor_data.sensor_data_t.vec.data[0] =
        raw_optical_data[0] * raw_proximity_data / 1000;
 804d9cc:	4b1b      	ldr	r3, [pc, #108]	; (804da3c <speedv_publish_sensor_data+0xe4>)
 804d9ce:	ed93 7a00 	vldr	s14, [r3]
 804d9d2:	4b1b      	ldr	r3, [pc, #108]	; (804da40 <speedv_publish_sensor_data+0xe8>)
 804d9d4:	edd3 7a00 	vldr	s15, [r3]
 804d9d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 804d9dc:	eddf 6a19 	vldr	s13, [pc, #100]	; 804da44 <speedv_publish_sensor_data+0xec>
 804d9e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
        sensor_data.sensor_data_t.vec.data[0] =
 804d9e4:	edc7 7a06 	vstr	s15, [r7, #24]
        sensor_data.sensor_data_t.vec.data[1] =
        raw_optical_data[1] * raw_proximity_data / 1000;
 804d9e8:	4b14      	ldr	r3, [pc, #80]	; (804da3c <speedv_publish_sensor_data+0xe4>)
 804d9ea:	ed93 7a01 	vldr	s14, [r3, #4]
 804d9ee:	4b14      	ldr	r3, [pc, #80]	; (804da40 <speedv_publish_sensor_data+0xe8>)
 804d9f0:	edd3 7a00 	vldr	s15, [r3]
 804d9f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 804d9f8:	eddf 6a12 	vldr	s13, [pc, #72]	; 804da44 <speedv_publish_sensor_data+0xec>
 804d9fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
        sensor_data.sensor_data_t.vec.data[1] =
 804da00:	edc7 7a07 	vstr	s15, [r7, #28]
        osMessageQueuePut(speed_v_init_parms->SensorDataQHandle, &sensor_data, 0, 0);
 804da04:	4b10      	ldr	r3, [pc, #64]	; (804da48 <speedv_publish_sensor_data+0xf0>)
 804da06:	681b      	ldr	r3, [r3, #0]
 804da08:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 804da0c:	f107 0108 	add.w	r1, r7, #8
 804da10:	2300      	movs	r3, #0
 804da12:	2200      	movs	r2, #0
 804da14:	f008 fcf6 	bl	8056404 <osMessageQueuePut>
        last_op_timestamp = current_op_timestamp;
 804da18:	4b07      	ldr	r3, [pc, #28]	; (804da38 <speedv_publish_sensor_data+0xe0>)
 804da1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 804da1e:	4905      	ldr	r1, [pc, #20]	; (804da34 <speedv_publish_sensor_data+0xdc>)
 804da20:	e9c1 2300 	strd	r2, r3, [r1]
      }
    }
  }
  return SENSOR_SUCCESS;
 804da24:	2300      	movs	r3, #0
}
 804da26:	4618      	mov	r0, r3
 804da28:	3760      	adds	r7, #96	; 0x60
 804da2a:	46bd      	mov	sp, r7
 804da2c:	bdb0      	pop	{r4, r5, r7, pc}
 804da2e:	bf00      	nop
 804da30:	20008488 	.word	0x20008488
 804da34:	20008490 	.word	0x20008490
 804da38:	20008498 	.word	0x20008498
 804da3c:	200084a0 	.word	0x200084a0
 804da40:	2000848c 	.word	0x2000848c
 804da44:	447a0000 	.word	0x447a0000
 804da48:	20008484 	.word	0x20008484

0804da4c <speedv_config>:

int speedv_config(uint8_t config_type, void *para)
{
 804da4c:	b480      	push	{r7}
 804da4e:	b085      	sub	sp, #20
 804da50:	af00      	add	r7, sp, #0
 804da52:	4603      	mov	r3, r0
 804da54:	6039      	str	r1, [r7, #0]
 804da56:	71fb      	strb	r3, [r7, #7]
  sensors_event_t *sensor_data;
  sensor_data = (sensors_event_t *) para;
 804da58:	683b      	ldr	r3, [r7, #0]
 804da5a:	60fb      	str	r3, [r7, #12]
  if (config_type == SENSOR_CONFIG_DATA) {
 804da5c:	79fb      	ldrb	r3, [r7, #7]
 804da5e:	2b07      	cmp	r3, #7
 804da60:	d11a      	bne.n	804da98 <speedv_config+0x4c>
    if (sensor_data->sensor_type == SENSOR_TYPE_LIGHT_SPEED) {
 804da62:	68fb      	ldr	r3, [r7, #12]
 804da64:	781b      	ldrb	r3, [r3, #0]
 804da66:	2b08      	cmp	r3, #8
 804da68:	d10e      	bne.n	804da88 <speedv_config+0x3c>
      raw_optical_data[0] = sensor_data->sensor_data_t.vec.data[0];
 804da6a:	68fb      	ldr	r3, [r7, #12]
 804da6c:	691b      	ldr	r3, [r3, #16]
 804da6e:	4a0e      	ldr	r2, [pc, #56]	; (804daa8 <speedv_config+0x5c>)
 804da70:	6013      	str	r3, [r2, #0]
      raw_optical_data[1] = sensor_data->sensor_data_t.vec.data[1];
 804da72:	68fb      	ldr	r3, [r7, #12]
 804da74:	695b      	ldr	r3, [r3, #20]
 804da76:	4a0c      	ldr	r2, [pc, #48]	; (804daa8 <speedv_config+0x5c>)
 804da78:	6053      	str	r3, [r2, #4]
      current_op_timestamp = sensor_data->timestamp;
 804da7a:	68fb      	ldr	r3, [r7, #12]
 804da7c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 804da80:	490a      	ldr	r1, [pc, #40]	; (804daac <speedv_config+0x60>)
 804da82:	e9c1 2300 	strd	r2, r3, [r1]
 804da86:	e007      	b.n	804da98 <speedv_config+0x4c>
    } else if (sensor_data->sensor_type == SENSOR_TYPE_PROXIMITY_BOT) {
 804da88:	68fb      	ldr	r3, [r7, #12]
 804da8a:	781b      	ldrb	r3, [r3, #0]
 804da8c:	2b06      	cmp	r3, #6
 804da8e:	d103      	bne.n	804da98 <speedv_config+0x4c>
      raw_proximity_data = sensor_data->sensor_data_t.vec.data[0];
 804da90:	68fb      	ldr	r3, [r7, #12]
 804da92:	691b      	ldr	r3, [r3, #16]
 804da94:	4a06      	ldr	r2, [pc, #24]	; (804dab0 <speedv_config+0x64>)
 804da96:	6013      	str	r3, [r2, #0]
    }
  }
  return SENSOR_SUCCESS;
 804da98:	2300      	movs	r3, #0
}
 804da9a:	4618      	mov	r0, r3
 804da9c:	3714      	adds	r7, #20
 804da9e:	46bd      	mov	sp, r7
 804daa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 804daa4:	4770      	bx	lr
 804daa6:	bf00      	nop
 804daa8:	200084a0 	.word	0x200084a0
 804daac:	20008498 	.word	0x20008498
 804dab0:	2000848c 	.word	0x2000848c

0804dab4 <speedv_publish_config_resp>:

int speedv_publish_config_resp(void *para)
{
 804dab4:	b480      	push	{r7}
 804dab6:	b083      	sub	sp, #12
 804dab8:	af00      	add	r7, sp, #0
 804daba:	6078      	str	r0, [r7, #4]
  return SENSOR_SUCCESS;
 804dabc:	2300      	movs	r3, #0
}
 804dabe:	4618      	mov	r0, r3
 804dac0:	370c      	adds	r7, #12
 804dac2:	46bd      	mov	sp, r7
 804dac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 804dac8:	4770      	bx	lr
	...

0804dacc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef * htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 804dacc:	b580      	push	{r7, lr}
 804dace:	b082      	sub	sp, #8
 804dad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 804dad2:	2300      	movs	r3, #0
 804dad4:	607b      	str	r3, [r7, #4]
 804dad6:	4b12      	ldr	r3, [pc, #72]	; (804db20 <HAL_MspInit+0x54>)
 804dad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804dada:	4a11      	ldr	r2, [pc, #68]	; (804db20 <HAL_MspInit+0x54>)
 804dadc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 804dae0:	6453      	str	r3, [r2, #68]	; 0x44
 804dae2:	4b0f      	ldr	r3, [pc, #60]	; (804db20 <HAL_MspInit+0x54>)
 804dae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804dae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 804daea:	607b      	str	r3, [r7, #4]
 804daec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 804daee:	2300      	movs	r3, #0
 804daf0:	603b      	str	r3, [r7, #0]
 804daf2:	4b0b      	ldr	r3, [pc, #44]	; (804db20 <HAL_MspInit+0x54>)
 804daf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804daf6:	4a0a      	ldr	r2, [pc, #40]	; (804db20 <HAL_MspInit+0x54>)
 804daf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 804dafc:	6413      	str	r3, [r2, #64]	; 0x40
 804dafe:	4b08      	ldr	r3, [pc, #32]	; (804db20 <HAL_MspInit+0x54>)
 804db00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804db02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804db06:	603b      	str	r3, [r7, #0]
 804db08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init */
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 804db0a:	2200      	movs	r2, #0
 804db0c:	210f      	movs	r1, #15
 804db0e:	f06f 0001 	mvn.w	r0, #1
 804db12:	f002 fcf3 	bl	80504fc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 804db16:	bf00      	nop
 804db18:	3708      	adds	r7, #8
 804db1a:	46bd      	mov	sp, r7
 804db1c:	bd80      	pop	{r7, pc}
 804db1e:	bf00      	nop
 804db20:	40023800 	.word	0x40023800

0804db24 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef * hcan)
{
 804db24:	b580      	push	{r7, lr}
 804db26:	b08c      	sub	sp, #48	; 0x30
 804db28:	af00      	add	r7, sp, #0
 804db2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 804db2c:	f107 031c 	add.w	r3, r7, #28
 804db30:	2200      	movs	r2, #0
 804db32:	601a      	str	r2, [r3, #0]
 804db34:	605a      	str	r2, [r3, #4]
 804db36:	609a      	str	r2, [r3, #8]
 804db38:	60da      	str	r2, [r3, #12]
 804db3a:	611a      	str	r2, [r3, #16]
  if (hcan->Instance == CAN1) {
 804db3c:	687b      	ldr	r3, [r7, #4]
 804db3e:	681b      	ldr	r3, [r3, #0]
 804db40:	4a4a      	ldr	r2, [pc, #296]	; (804dc6c <HAL_CAN_MspInit+0x148>)
 804db42:	4293      	cmp	r3, r2
 804db44:	d13e      	bne.n	804dbc4 <HAL_CAN_MspInit+0xa0>
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 804db46:	4b4a      	ldr	r3, [pc, #296]	; (804dc70 <HAL_CAN_MspInit+0x14c>)
 804db48:	681b      	ldr	r3, [r3, #0]
 804db4a:	3301      	adds	r3, #1
 804db4c:	4a48      	ldr	r2, [pc, #288]	; (804dc70 <HAL_CAN_MspInit+0x14c>)
 804db4e:	6013      	str	r3, [r2, #0]
    if (HAL_RCC_CAN1_CLK_ENABLED == 1) {
 804db50:	4b47      	ldr	r3, [pc, #284]	; (804dc70 <HAL_CAN_MspInit+0x14c>)
 804db52:	681b      	ldr	r3, [r3, #0]
 804db54:	2b01      	cmp	r3, #1
 804db56:	d10d      	bne.n	804db74 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 804db58:	2300      	movs	r3, #0
 804db5a:	61bb      	str	r3, [r7, #24]
 804db5c:	4b45      	ldr	r3, [pc, #276]	; (804dc74 <HAL_CAN_MspInit+0x150>)
 804db5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804db60:	4a44      	ldr	r2, [pc, #272]	; (804dc74 <HAL_CAN_MspInit+0x150>)
 804db62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 804db66:	6413      	str	r3, [r2, #64]	; 0x40
 804db68:	4b42      	ldr	r3, [pc, #264]	; (804dc74 <HAL_CAN_MspInit+0x150>)
 804db6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804db6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 804db70:	61bb      	str	r3, [r7, #24]
 804db72:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 804db74:	2300      	movs	r3, #0
 804db76:	617b      	str	r3, [r7, #20]
 804db78:	4b3e      	ldr	r3, [pc, #248]	; (804dc74 <HAL_CAN_MspInit+0x150>)
 804db7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804db7c:	4a3d      	ldr	r2, [pc, #244]	; (804dc74 <HAL_CAN_MspInit+0x150>)
 804db7e:	f043 0301 	orr.w	r3, r3, #1
 804db82:	6313      	str	r3, [r2, #48]	; 0x30
 804db84:	4b3b      	ldr	r3, [pc, #236]	; (804dc74 <HAL_CAN_MspInit+0x150>)
 804db86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804db88:	f003 0301 	and.w	r3, r3, #1
 804db8c:	617b      	str	r3, [r7, #20]
 804db8e:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 804db90:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 804db94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804db96:	2302      	movs	r3, #2
 804db98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804db9a:	2300      	movs	r3, #0
 804db9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 804db9e:	2303      	movs	r3, #3
 804dba0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 804dba2:	2309      	movs	r3, #9
 804dba4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 804dba6:	f107 031c 	add.w	r3, r7, #28
 804dbaa:	4619      	mov	r1, r3
 804dbac:	4832      	ldr	r0, [pc, #200]	; (804dc78 <HAL_CAN_MspInit+0x154>)
 804dbae:	f003 fbb7 	bl	8051320 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 804dbb2:	2200      	movs	r2, #0
 804dbb4:	2105      	movs	r1, #5
 804dbb6:	2014      	movs	r0, #20
 804dbb8:	f002 fca0 	bl	80504fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 804dbbc:	2014      	movs	r0, #20
 804dbbe:	f002 fcb9 	bl	8050534 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN CAN2_MspInit 1 */

    /* USER CODE END CAN2_MspInit 1 */
  }

}
 804dbc2:	e04f      	b.n	804dc64 <HAL_CAN_MspInit+0x140>
  } else if (hcan->Instance == CAN2) {
 804dbc4:	687b      	ldr	r3, [r7, #4]
 804dbc6:	681b      	ldr	r3, [r3, #0]
 804dbc8:	4a2c      	ldr	r2, [pc, #176]	; (804dc7c <HAL_CAN_MspInit+0x158>)
 804dbca:	4293      	cmp	r3, r2
 804dbcc:	d14a      	bne.n	804dc64 <HAL_CAN_MspInit+0x140>
    __HAL_RCC_CAN2_CLK_ENABLE();
 804dbce:	2300      	movs	r3, #0
 804dbd0:	613b      	str	r3, [r7, #16]
 804dbd2:	4b28      	ldr	r3, [pc, #160]	; (804dc74 <HAL_CAN_MspInit+0x150>)
 804dbd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804dbd6:	4a27      	ldr	r2, [pc, #156]	; (804dc74 <HAL_CAN_MspInit+0x150>)
 804dbd8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 804dbdc:	6413      	str	r3, [r2, #64]	; 0x40
 804dbde:	4b25      	ldr	r3, [pc, #148]	; (804dc74 <HAL_CAN_MspInit+0x150>)
 804dbe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804dbe2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 804dbe6:	613b      	str	r3, [r7, #16]
 804dbe8:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 804dbea:	4b21      	ldr	r3, [pc, #132]	; (804dc70 <HAL_CAN_MspInit+0x14c>)
 804dbec:	681b      	ldr	r3, [r3, #0]
 804dbee:	3301      	adds	r3, #1
 804dbf0:	4a1f      	ldr	r2, [pc, #124]	; (804dc70 <HAL_CAN_MspInit+0x14c>)
 804dbf2:	6013      	str	r3, [r2, #0]
    if (HAL_RCC_CAN1_CLK_ENABLED == 1) {
 804dbf4:	4b1e      	ldr	r3, [pc, #120]	; (804dc70 <HAL_CAN_MspInit+0x14c>)
 804dbf6:	681b      	ldr	r3, [r3, #0]
 804dbf8:	2b01      	cmp	r3, #1
 804dbfa:	d10d      	bne.n	804dc18 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 804dbfc:	2300      	movs	r3, #0
 804dbfe:	60fb      	str	r3, [r7, #12]
 804dc00:	4b1c      	ldr	r3, [pc, #112]	; (804dc74 <HAL_CAN_MspInit+0x150>)
 804dc02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804dc04:	4a1b      	ldr	r2, [pc, #108]	; (804dc74 <HAL_CAN_MspInit+0x150>)
 804dc06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 804dc0a:	6413      	str	r3, [r2, #64]	; 0x40
 804dc0c:	4b19      	ldr	r3, [pc, #100]	; (804dc74 <HAL_CAN_MspInit+0x150>)
 804dc0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804dc10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 804dc14:	60fb      	str	r3, [r7, #12]
 804dc16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 804dc18:	2300      	movs	r3, #0
 804dc1a:	60bb      	str	r3, [r7, #8]
 804dc1c:	4b15      	ldr	r3, [pc, #84]	; (804dc74 <HAL_CAN_MspInit+0x150>)
 804dc1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804dc20:	4a14      	ldr	r2, [pc, #80]	; (804dc74 <HAL_CAN_MspInit+0x150>)
 804dc22:	f043 0302 	orr.w	r3, r3, #2
 804dc26:	6313      	str	r3, [r2, #48]	; 0x30
 804dc28:	4b12      	ldr	r3, [pc, #72]	; (804dc74 <HAL_CAN_MspInit+0x150>)
 804dc2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804dc2c:	f003 0302 	and.w	r3, r3, #2
 804dc30:	60bb      	str	r3, [r7, #8]
 804dc32:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 804dc34:	2360      	movs	r3, #96	; 0x60
 804dc36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804dc38:	2302      	movs	r3, #2
 804dc3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804dc3c:	2300      	movs	r3, #0
 804dc3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 804dc40:	2303      	movs	r3, #3
 804dc42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 804dc44:	2309      	movs	r3, #9
 804dc46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 804dc48:	f107 031c 	add.w	r3, r7, #28
 804dc4c:	4619      	mov	r1, r3
 804dc4e:	480c      	ldr	r0, [pc, #48]	; (804dc80 <HAL_CAN_MspInit+0x15c>)
 804dc50:	f003 fb66 	bl	8051320 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 804dc54:	2200      	movs	r2, #0
 804dc56:	2105      	movs	r1, #5
 804dc58:	2040      	movs	r0, #64	; 0x40
 804dc5a:	f002 fc4f 	bl	80504fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 804dc5e:	2040      	movs	r0, #64	; 0x40
 804dc60:	f002 fc68 	bl	8050534 <HAL_NVIC_EnableIRQ>
}
 804dc64:	bf00      	nop
 804dc66:	3730      	adds	r7, #48	; 0x30
 804dc68:	46bd      	mov	sp, r7
 804dc6a:	bd80      	pop	{r7, pc}
 804dc6c:	40006400 	.word	0x40006400
 804dc70:	200084a8 	.word	0x200084a8
 804dc74:	40023800 	.word	0x40023800
 804dc78:	40020000 	.word	0x40020000
 804dc7c:	40006800 	.word	0x40006800
 804dc80:	40020400 	.word	0x40020400

0804dc84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef * hi2c)
{
 804dc84:	b580      	push	{r7, lr}
 804dc86:	b08a      	sub	sp, #40	; 0x28
 804dc88:	af00      	add	r7, sp, #0
 804dc8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 804dc8c:	f107 0314 	add.w	r3, r7, #20
 804dc90:	2200      	movs	r2, #0
 804dc92:	601a      	str	r2, [r3, #0]
 804dc94:	605a      	str	r2, [r3, #4]
 804dc96:	609a      	str	r2, [r3, #8]
 804dc98:	60da      	str	r2, [r3, #12]
 804dc9a:	611a      	str	r2, [r3, #16]
  if (hi2c->Instance == I2C2) {
 804dc9c:	687b      	ldr	r3, [r7, #4]
 804dc9e:	681b      	ldr	r3, [r3, #0]
 804dca0:	4a19      	ldr	r2, [pc, #100]	; (804dd08 <HAL_I2C_MspInit+0x84>)
 804dca2:	4293      	cmp	r3, r2
 804dca4:	d12c      	bne.n	804dd00 <HAL_I2C_MspInit+0x7c>
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 804dca6:	2300      	movs	r3, #0
 804dca8:	613b      	str	r3, [r7, #16]
 804dcaa:	4b18      	ldr	r3, [pc, #96]	; (804dd0c <HAL_I2C_MspInit+0x88>)
 804dcac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804dcae:	4a17      	ldr	r2, [pc, #92]	; (804dd0c <HAL_I2C_MspInit+0x88>)
 804dcb0:	f043 0302 	orr.w	r3, r3, #2
 804dcb4:	6313      	str	r3, [r2, #48]	; 0x30
 804dcb6:	4b15      	ldr	r3, [pc, #84]	; (804dd0c <HAL_I2C_MspInit+0x88>)
 804dcb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804dcba:	f003 0302 	and.w	r3, r3, #2
 804dcbe:	613b      	str	r3, [r7, #16]
 804dcc0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_11;
 804dcc2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 804dcc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 804dcc8:	2312      	movs	r3, #18
 804dcca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 804dccc:	2301      	movs	r3, #1
 804dcce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 804dcd0:	2303      	movs	r3, #3
 804dcd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 804dcd4:	2304      	movs	r3, #4
 804dcd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 804dcd8:	f107 0314 	add.w	r3, r7, #20
 804dcdc:	4619      	mov	r1, r3
 804dcde:	480c      	ldr	r0, [pc, #48]	; (804dd10 <HAL_I2C_MspInit+0x8c>)
 804dce0:	f003 fb1e 	bl	8051320 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 804dce4:	2300      	movs	r3, #0
 804dce6:	60fb      	str	r3, [r7, #12]
 804dce8:	4b08      	ldr	r3, [pc, #32]	; (804dd0c <HAL_I2C_MspInit+0x88>)
 804dcea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804dcec:	4a07      	ldr	r2, [pc, #28]	; (804dd0c <HAL_I2C_MspInit+0x88>)
 804dcee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 804dcf2:	6413      	str	r3, [r2, #64]	; 0x40
 804dcf4:	4b05      	ldr	r3, [pc, #20]	; (804dd0c <HAL_I2C_MspInit+0x88>)
 804dcf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804dcf8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 804dcfc:	60fb      	str	r3, [r7, #12]
 804dcfe:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 804dd00:	bf00      	nop
 804dd02:	3728      	adds	r7, #40	; 0x28
 804dd04:	46bd      	mov	sp, r7
 804dd06:	bd80      	pop	{r7, pc}
 804dd08:	40005800 	.word	0x40005800
 804dd0c:	40023800 	.word	0x40023800
 804dd10:	40020400 	.word	0x40020400

0804dd14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef * hspi)
{
 804dd14:	b580      	push	{r7, lr}
 804dd16:	b08a      	sub	sp, #40	; 0x28
 804dd18:	af00      	add	r7, sp, #0
 804dd1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 804dd1c:	f107 0314 	add.w	r3, r7, #20
 804dd20:	2200      	movs	r2, #0
 804dd22:	601a      	str	r2, [r3, #0]
 804dd24:	605a      	str	r2, [r3, #4]
 804dd26:	609a      	str	r2, [r3, #8]
 804dd28:	60da      	str	r2, [r3, #12]
 804dd2a:	611a      	str	r2, [r3, #16]
  if (hspi->Instance == SPI1) {
 804dd2c:	687b      	ldr	r3, [r7, #4]
 804dd2e:	681b      	ldr	r3, [r3, #0]
 804dd30:	4a19      	ldr	r2, [pc, #100]	; (804dd98 <HAL_SPI_MspInit+0x84>)
 804dd32:	4293      	cmp	r3, r2
 804dd34:	d12b      	bne.n	804dd8e <HAL_SPI_MspInit+0x7a>
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 804dd36:	2300      	movs	r3, #0
 804dd38:	613b      	str	r3, [r7, #16]
 804dd3a:	4b18      	ldr	r3, [pc, #96]	; (804dd9c <HAL_SPI_MspInit+0x88>)
 804dd3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804dd3e:	4a17      	ldr	r2, [pc, #92]	; (804dd9c <HAL_SPI_MspInit+0x88>)
 804dd40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 804dd44:	6453      	str	r3, [r2, #68]	; 0x44
 804dd46:	4b15      	ldr	r3, [pc, #84]	; (804dd9c <HAL_SPI_MspInit+0x88>)
 804dd48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804dd4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 804dd4e:	613b      	str	r3, [r7, #16]
 804dd50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 804dd52:	2300      	movs	r3, #0
 804dd54:	60fb      	str	r3, [r7, #12]
 804dd56:	4b11      	ldr	r3, [pc, #68]	; (804dd9c <HAL_SPI_MspInit+0x88>)
 804dd58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804dd5a:	4a10      	ldr	r2, [pc, #64]	; (804dd9c <HAL_SPI_MspInit+0x88>)
 804dd5c:	f043 0301 	orr.w	r3, r3, #1
 804dd60:	6313      	str	r3, [r2, #48]	; 0x30
 804dd62:	4b0e      	ldr	r3, [pc, #56]	; (804dd9c <HAL_SPI_MspInit+0x88>)
 804dd64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804dd66:	f003 0301 	and.w	r3, r3, #1
 804dd6a:	60fb      	str	r3, [r7, #12]
 804dd6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 804dd6e:	23e0      	movs	r3, #224	; 0xe0
 804dd70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804dd72:	2302      	movs	r3, #2
 804dd74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804dd76:	2300      	movs	r3, #0
 804dd78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 804dd7a:	2303      	movs	r3, #3
 804dd7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 804dd7e:	2305      	movs	r3, #5
 804dd80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 804dd82:	f107 0314 	add.w	r3, r7, #20
 804dd86:	4619      	mov	r1, r3
 804dd88:	4805      	ldr	r0, [pc, #20]	; (804dda0 <HAL_SPI_MspInit+0x8c>)
 804dd8a:	f003 fac9 	bl	8051320 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI1_MspInit 1 */

    /* USER CODE END SPI1_MspInit 1 */
  }

}
 804dd8e:	bf00      	nop
 804dd90:	3728      	adds	r7, #40	; 0x28
 804dd92:	46bd      	mov	sp, r7
 804dd94:	bd80      	pop	{r7, pc}
 804dd96:	bf00      	nop
 804dd98:	40013000 	.word	0x40013000
 804dd9c:	40023800 	.word	0x40023800
 804dda0:	40020000 	.word	0x40020000

0804dda4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef * htim_base)
{
 804dda4:	b580      	push	{r7, lr}
 804dda6:	b084      	sub	sp, #16
 804dda8:	af00      	add	r7, sp, #0
 804ddaa:	6078      	str	r0, [r7, #4]
  if (htim_base->Instance == TIM2) {
 804ddac:	687b      	ldr	r3, [r7, #4]
 804ddae:	681b      	ldr	r3, [r3, #0]
 804ddb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 804ddb4:	d10e      	bne.n	804ddd4 <HAL_TIM_Base_MspInit+0x30>
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 804ddb6:	2300      	movs	r3, #0
 804ddb8:	60fb      	str	r3, [r7, #12]
 804ddba:	4b16      	ldr	r3, [pc, #88]	; (804de14 <HAL_TIM_Base_MspInit+0x70>)
 804ddbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804ddbe:	4a15      	ldr	r2, [pc, #84]	; (804de14 <HAL_TIM_Base_MspInit+0x70>)
 804ddc0:	f043 0301 	orr.w	r3, r3, #1
 804ddc4:	6413      	str	r3, [r2, #64]	; 0x40
 804ddc6:	4b13      	ldr	r3, [pc, #76]	; (804de14 <HAL_TIM_Base_MspInit+0x70>)
 804ddc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804ddca:	f003 0301 	and.w	r3, r3, #1
 804ddce:	60fb      	str	r3, [r7, #12]
 804ddd0:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 804ddd2:	e01a      	b.n	804de0a <HAL_TIM_Base_MspInit+0x66>
  } else if (htim_base->Instance == TIM3) {
 804ddd4:	687b      	ldr	r3, [r7, #4]
 804ddd6:	681b      	ldr	r3, [r3, #0]
 804ddd8:	4a0f      	ldr	r2, [pc, #60]	; (804de18 <HAL_TIM_Base_MspInit+0x74>)
 804ddda:	4293      	cmp	r3, r2
 804dddc:	d115      	bne.n	804de0a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 804ddde:	2300      	movs	r3, #0
 804dde0:	60bb      	str	r3, [r7, #8]
 804dde2:	4b0c      	ldr	r3, [pc, #48]	; (804de14 <HAL_TIM_Base_MspInit+0x70>)
 804dde4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804dde6:	4a0b      	ldr	r2, [pc, #44]	; (804de14 <HAL_TIM_Base_MspInit+0x70>)
 804dde8:	f043 0302 	orr.w	r3, r3, #2
 804ddec:	6413      	str	r3, [r2, #64]	; 0x40
 804ddee:	4b09      	ldr	r3, [pc, #36]	; (804de14 <HAL_TIM_Base_MspInit+0x70>)
 804ddf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804ddf2:	f003 0302 	and.w	r3, r3, #2
 804ddf6:	60bb      	str	r3, [r7, #8]
 804ddf8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 804ddfa:	2200      	movs	r2, #0
 804ddfc:	2105      	movs	r1, #5
 804ddfe:	201d      	movs	r0, #29
 804de00:	f002 fb7c 	bl	80504fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 804de04:	201d      	movs	r0, #29
 804de06:	f002 fb95 	bl	8050534 <HAL_NVIC_EnableIRQ>
}
 804de0a:	bf00      	nop
 804de0c:	3710      	adds	r7, #16
 804de0e:	46bd      	mov	sp, r7
 804de10:	bd80      	pop	{r7, pc}
 804de12:	bf00      	nop
 804de14:	40023800 	.word	0x40023800
 804de18:	40000400 	.word	0x40000400

0804de1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef * htim)
{
 804de1c:	b580      	push	{r7, lr}
 804de1e:	b088      	sub	sp, #32
 804de20:	af00      	add	r7, sp, #0
 804de22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 804de24:	f107 030c 	add.w	r3, r7, #12
 804de28:	2200      	movs	r2, #0
 804de2a:	601a      	str	r2, [r3, #0]
 804de2c:	605a      	str	r2, [r3, #4]
 804de2e:	609a      	str	r2, [r3, #8]
 804de30:	60da      	str	r2, [r3, #12]
 804de32:	611a      	str	r2, [r3, #16]
  if (htim->Instance == TIM2) {
 804de34:	687b      	ldr	r3, [r7, #4]
 804de36:	681b      	ldr	r3, [r3, #0]
 804de38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 804de3c:	d11d      	bne.n	804de7a <HAL_TIM_MspPostInit+0x5e>
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 804de3e:	2300      	movs	r3, #0
 804de40:	60bb      	str	r3, [r7, #8]
 804de42:	4b10      	ldr	r3, [pc, #64]	; (804de84 <HAL_TIM_MspPostInit+0x68>)
 804de44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804de46:	4a0f      	ldr	r2, [pc, #60]	; (804de84 <HAL_TIM_MspPostInit+0x68>)
 804de48:	f043 0301 	orr.w	r3, r3, #1
 804de4c:	6313      	str	r3, [r2, #48]	; 0x30
 804de4e:	4b0d      	ldr	r3, [pc, #52]	; (804de84 <HAL_TIM_MspPostInit+0x68>)
 804de50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804de52:	f003 0301 	and.w	r3, r3, #1
 804de56:	60bb      	str	r3, [r7, #8]
 804de58:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 804de5a:	2301      	movs	r3, #1
 804de5c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804de5e:	2302      	movs	r3, #2
 804de60:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804de62:	2300      	movs	r3, #0
 804de64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 804de66:	2300      	movs	r3, #0
 804de68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 804de6a:	2301      	movs	r3, #1
 804de6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 804de6e:	f107 030c 	add.w	r3, r7, #12
 804de72:	4619      	mov	r1, r3
 804de74:	4804      	ldr	r0, [pc, #16]	; (804de88 <HAL_TIM_MspPostInit+0x6c>)
 804de76:	f003 fa53 	bl	8051320 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 804de7a:	bf00      	nop
 804de7c:	3720      	adds	r7, #32
 804de7e:	46bd      	mov	sp, r7
 804de80:	bd80      	pop	{r7, pc}
 804de82:	bf00      	nop
 804de84:	40023800 	.word	0x40023800
 804de88:	40020000 	.word	0x40020000

0804de8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef * huart)
{
 804de8c:	b580      	push	{r7, lr}
 804de8e:	b08a      	sub	sp, #40	; 0x28
 804de90:	af00      	add	r7, sp, #0
 804de92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 804de94:	f107 0314 	add.w	r3, r7, #20
 804de98:	2200      	movs	r2, #0
 804de9a:	601a      	str	r2, [r3, #0]
 804de9c:	605a      	str	r2, [r3, #4]
 804de9e:	609a      	str	r2, [r3, #8]
 804dea0:	60da      	str	r2, [r3, #12]
 804dea2:	611a      	str	r2, [r3, #16]
  if (huart->Instance == USART2) {
 804dea4:	687b      	ldr	r3, [r7, #4]
 804dea6:	681b      	ldr	r3, [r3, #0]
 804dea8:	4a4c      	ldr	r2, [pc, #304]	; (804dfdc <HAL_UART_MspInit+0x150>)
 804deaa:	4293      	cmp	r3, r2
 804deac:	f040 8092 	bne.w	804dfd4 <HAL_UART_MspInit+0x148>
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 804deb0:	2300      	movs	r3, #0
 804deb2:	613b      	str	r3, [r7, #16]
 804deb4:	4b4a      	ldr	r3, [pc, #296]	; (804dfe0 <HAL_UART_MspInit+0x154>)
 804deb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804deb8:	4a49      	ldr	r2, [pc, #292]	; (804dfe0 <HAL_UART_MspInit+0x154>)
 804deba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 804debe:	6413      	str	r3, [r2, #64]	; 0x40
 804dec0:	4b47      	ldr	r3, [pc, #284]	; (804dfe0 <HAL_UART_MspInit+0x154>)
 804dec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804dec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 804dec8:	613b      	str	r3, [r7, #16]
 804deca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 804decc:	2300      	movs	r3, #0
 804dece:	60fb      	str	r3, [r7, #12]
 804ded0:	4b43      	ldr	r3, [pc, #268]	; (804dfe0 <HAL_UART_MspInit+0x154>)
 804ded2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804ded4:	4a42      	ldr	r2, [pc, #264]	; (804dfe0 <HAL_UART_MspInit+0x154>)
 804ded6:	f043 0301 	orr.w	r3, r3, #1
 804deda:	6313      	str	r3, [r2, #48]	; 0x30
 804dedc:	4b40      	ldr	r3, [pc, #256]	; (804dfe0 <HAL_UART_MspInit+0x154>)
 804dede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804dee0:	f003 0301 	and.w	r3, r3, #1
 804dee4:	60fb      	str	r3, [r7, #12]
 804dee6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 804dee8:	230c      	movs	r3, #12
 804deea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804deec:	2302      	movs	r3, #2
 804deee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804def0:	2300      	movs	r3, #0
 804def2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 804def4:	2303      	movs	r3, #3
 804def6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 804def8:	2307      	movs	r3, #7
 804defa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 804defc:	f107 0314 	add.w	r3, r7, #20
 804df00:	4619      	mov	r1, r3
 804df02:	4838      	ldr	r0, [pc, #224]	; (804dfe4 <HAL_UART_MspInit+0x158>)
 804df04:	f003 fa0c 	bl	8051320 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 804df08:	4b37      	ldr	r3, [pc, #220]	; (804dfe8 <HAL_UART_MspInit+0x15c>)
 804df0a:	4a38      	ldr	r2, [pc, #224]	; (804dfec <HAL_UART_MspInit+0x160>)
 804df0c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 804df0e:	4b36      	ldr	r3, [pc, #216]	; (804dfe8 <HAL_UART_MspInit+0x15c>)
 804df10:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 804df14:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 804df16:	4b34      	ldr	r3, [pc, #208]	; (804dfe8 <HAL_UART_MspInit+0x15c>)
 804df18:	2200      	movs	r2, #0
 804df1a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 804df1c:	4b32      	ldr	r3, [pc, #200]	; (804dfe8 <HAL_UART_MspInit+0x15c>)
 804df1e:	2200      	movs	r2, #0
 804df20:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 804df22:	4b31      	ldr	r3, [pc, #196]	; (804dfe8 <HAL_UART_MspInit+0x15c>)
 804df24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 804df28:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 804df2a:	4b2f      	ldr	r3, [pc, #188]	; (804dfe8 <HAL_UART_MspInit+0x15c>)
 804df2c:	2200      	movs	r2, #0
 804df2e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 804df30:	4b2d      	ldr	r3, [pc, #180]	; (804dfe8 <HAL_UART_MspInit+0x15c>)
 804df32:	2200      	movs	r2, #0
 804df34:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 804df36:	4b2c      	ldr	r3, [pc, #176]	; (804dfe8 <HAL_UART_MspInit+0x15c>)
 804df38:	f44f 7280 	mov.w	r2, #256	; 0x100
 804df3c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 804df3e:	4b2a      	ldr	r3, [pc, #168]	; (804dfe8 <HAL_UART_MspInit+0x15c>)
 804df40:	2200      	movs	r2, #0
 804df42:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 804df44:	4b28      	ldr	r3, [pc, #160]	; (804dfe8 <HAL_UART_MspInit+0x15c>)
 804df46:	2200      	movs	r2, #0
 804df48:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK) {
 804df4a:	4827      	ldr	r0, [pc, #156]	; (804dfe8 <HAL_UART_MspInit+0x15c>)
 804df4c:	f002 fb0e 	bl	805056c <HAL_DMA_Init>
 804df50:	4603      	mov	r3, r0
 804df52:	2b00      	cmp	r3, #0
 804df54:	d001      	beq.n	804df5a <HAL_UART_MspInit+0xce>
      Error_Handler();
 804df56:	f7fb fddf 	bl	8049b18 <Error_Handler>
    }

    __HAL_LINKDMA(huart, hdmarx, hdma_usart2_rx);
 804df5a:	687b      	ldr	r3, [r7, #4]
 804df5c:	4a22      	ldr	r2, [pc, #136]	; (804dfe8 <HAL_UART_MspInit+0x15c>)
 804df5e:	639a      	str	r2, [r3, #56]	; 0x38
 804df60:	4a21      	ldr	r2, [pc, #132]	; (804dfe8 <HAL_UART_MspInit+0x15c>)
 804df62:	687b      	ldr	r3, [r7, #4]
 804df64:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 804df66:	4b22      	ldr	r3, [pc, #136]	; (804dff0 <HAL_UART_MspInit+0x164>)
 804df68:	4a22      	ldr	r2, [pc, #136]	; (804dff4 <HAL_UART_MspInit+0x168>)
 804df6a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 804df6c:	4b20      	ldr	r3, [pc, #128]	; (804dff0 <HAL_UART_MspInit+0x164>)
 804df6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 804df72:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 804df74:	4b1e      	ldr	r3, [pc, #120]	; (804dff0 <HAL_UART_MspInit+0x164>)
 804df76:	2240      	movs	r2, #64	; 0x40
 804df78:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 804df7a:	4b1d      	ldr	r3, [pc, #116]	; (804dff0 <HAL_UART_MspInit+0x164>)
 804df7c:	2200      	movs	r2, #0
 804df7e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 804df80:	4b1b      	ldr	r3, [pc, #108]	; (804dff0 <HAL_UART_MspInit+0x164>)
 804df82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 804df86:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 804df88:	4b19      	ldr	r3, [pc, #100]	; (804dff0 <HAL_UART_MspInit+0x164>)
 804df8a:	2200      	movs	r2, #0
 804df8c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 804df8e:	4b18      	ldr	r3, [pc, #96]	; (804dff0 <HAL_UART_MspInit+0x164>)
 804df90:	2200      	movs	r2, #0
 804df92:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 804df94:	4b16      	ldr	r3, [pc, #88]	; (804dff0 <HAL_UART_MspInit+0x164>)
 804df96:	f44f 7280 	mov.w	r2, #256	; 0x100
 804df9a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 804df9c:	4b14      	ldr	r3, [pc, #80]	; (804dff0 <HAL_UART_MspInit+0x164>)
 804df9e:	2200      	movs	r2, #0
 804dfa0:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 804dfa2:	4b13      	ldr	r3, [pc, #76]	; (804dff0 <HAL_UART_MspInit+0x164>)
 804dfa4:	2200      	movs	r2, #0
 804dfa6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK) {
 804dfa8:	4811      	ldr	r0, [pc, #68]	; (804dff0 <HAL_UART_MspInit+0x164>)
 804dfaa:	f002 fadf 	bl	805056c <HAL_DMA_Init>
 804dfae:	4603      	mov	r3, r0
 804dfb0:	2b00      	cmp	r3, #0
 804dfb2:	d001      	beq.n	804dfb8 <HAL_UART_MspInit+0x12c>
      Error_Handler();
 804dfb4:	f7fb fdb0 	bl	8049b18 <Error_Handler>
    }

    __HAL_LINKDMA(huart, hdmatx, hdma_usart2_tx);
 804dfb8:	687b      	ldr	r3, [r7, #4]
 804dfba:	4a0d      	ldr	r2, [pc, #52]	; (804dff0 <HAL_UART_MspInit+0x164>)
 804dfbc:	635a      	str	r2, [r3, #52]	; 0x34
 804dfbe:	4a0c      	ldr	r2, [pc, #48]	; (804dff0 <HAL_UART_MspInit+0x164>)
 804dfc0:	687b      	ldr	r3, [r7, #4]
 804dfc2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 804dfc4:	2200      	movs	r2, #0
 804dfc6:	2105      	movs	r1, #5
 804dfc8:	2026      	movs	r0, #38	; 0x26
 804dfca:	f002 fa97 	bl	80504fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 804dfce:	2026      	movs	r0, #38	; 0x26
 804dfd0:	f002 fab0 	bl	8050534 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 804dfd4:	bf00      	nop
 804dfd6:	3728      	adds	r7, #40	; 0x28
 804dfd8:	46bd      	mov	sp, r7
 804dfda:	bd80      	pop	{r7, pc}
 804dfdc:	40004400 	.word	0x40004400
 804dfe0:	40023800 	.word	0x40023800
 804dfe4:	40020000 	.word	0x40020000
 804dfe8:	2001be0c 	.word	0x2001be0c
 804dfec:	40026088 	.word	0x40026088
 804dff0:	2001bf7c 	.word	0x2001bf7c
 804dff4:	400260a0 	.word	0x400260a0

0804dff8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 804dff8:	b580      	push	{r7, lr}
 804dffa:	b08c      	sub	sp, #48	; 0x30
 804dffc:	af00      	add	r7, sp, #0
 804dffe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef clkconfig;
  uint32_t uwTimclock = 0;
 804e000:	2300      	movs	r3, #0
 804e002:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t uwPrescalerValue = 0;
 804e004:	2300      	movs	r3, #0
 804e006:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0);
 804e008:	2200      	movs	r2, #0
 804e00a:	6879      	ldr	r1, [r7, #4]
 804e00c:	2019      	movs	r0, #25
 804e00e:	f002 fa75 	bl	80504fc <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 804e012:	2019      	movs	r0, #25
 804e014:	f002 fa8e 	bl	8050534 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 804e018:	2300      	movs	r3, #0
 804e01a:	60fb      	str	r3, [r7, #12]
 804e01c:	4b1f      	ldr	r3, [pc, #124]	; (804e09c <HAL_InitTick+0xa4>)
 804e01e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804e020:	4a1e      	ldr	r2, [pc, #120]	; (804e09c <HAL_InitTick+0xa4>)
 804e022:	f043 0301 	orr.w	r3, r3, #1
 804e026:	6453      	str	r3, [r2, #68]	; 0x44
 804e028:	4b1c      	ldr	r3, [pc, #112]	; (804e09c <HAL_InitTick+0xa4>)
 804e02a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804e02c:	f003 0301 	and.w	r3, r3, #1
 804e030:	60fb      	str	r3, [r7, #12]
 804e032:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 804e034:	f107 0210 	add.w	r2, r7, #16
 804e038:	f107 0314 	add.w	r3, r7, #20
 804e03c:	4611      	mov	r1, r2
 804e03e:	4618      	mov	r0, r3
 804e040:	f005 fbfa 	bl	8053838 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2 * HAL_RCC_GetPCLK2Freq();
 804e044:	f005 fbe4 	bl	8053810 <HAL_RCC_GetPCLK2Freq>
 804e048:	4603      	mov	r3, r0
 804e04a:	005b      	lsls	r3, r3, #1
 804e04c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 804e04e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804e050:	4a13      	ldr	r2, [pc, #76]	; (804e0a0 <HAL_InitTick+0xa8>)
 804e052:	fba2 2303 	umull	r2, r3, r2, r3
 804e056:	0c9b      	lsrs	r3, r3, #18
 804e058:	3b01      	subs	r3, #1
 804e05a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 804e05c:	4b11      	ldr	r3, [pc, #68]	; (804e0a4 <HAL_InitTick+0xac>)
 804e05e:	4a12      	ldr	r2, [pc, #72]	; (804e0a8 <HAL_InitTick+0xb0>)
 804e060:	601a      	str	r2, [r3, #0]
     + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
     + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
     + ClockDivision = 0
     + Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 804e062:	4b10      	ldr	r3, [pc, #64]	; (804e0a4 <HAL_InitTick+0xac>)
 804e064:	f240 32e7 	movw	r2, #999	; 0x3e7
 804e068:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 804e06a:	4a0e      	ldr	r2, [pc, #56]	; (804e0a4 <HAL_InitTick+0xac>)
 804e06c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804e06e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 804e070:	4b0c      	ldr	r3, [pc, #48]	; (804e0a4 <HAL_InitTick+0xac>)
 804e072:	2200      	movs	r2, #0
 804e074:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 804e076:	4b0b      	ldr	r3, [pc, #44]	; (804e0a4 <HAL_InitTick+0xac>)
 804e078:	2200      	movs	r2, #0
 804e07a:	609a      	str	r2, [r3, #8]
  if (HAL_TIM_Base_Init(&htim1) == HAL_OK) {
 804e07c:	4809      	ldr	r0, [pc, #36]	; (804e0a4 <HAL_InitTick+0xac>)
 804e07e:	f005 ff03 	bl	8053e88 <HAL_TIM_Base_Init>
 804e082:	4603      	mov	r3, r0
 804e084:	2b00      	cmp	r3, #0
 804e086:	d104      	bne.n	804e092 <HAL_InitTick+0x9a>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 804e088:	4806      	ldr	r0, [pc, #24]	; (804e0a4 <HAL_InitTick+0xac>)
 804e08a:	f005 ff4d 	bl	8053f28 <HAL_TIM_Base_Start_IT>
 804e08e:	4603      	mov	r3, r0
 804e090:	e000      	b.n	804e094 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 804e092:	2301      	movs	r3, #1
}
 804e094:	4618      	mov	r0, r3
 804e096:	3730      	adds	r7, #48	; 0x30
 804e098:	46bd      	mov	sp, r7
 804e09a:	bd80      	pop	{r7, pc}
 804e09c:	40023800 	.word	0x40023800
 804e0a0:	431bde83 	.word	0x431bde83
 804e0a4:	2001c2d0 	.word	0x2001c2d0
 804e0a8:	40010000 	.word	0x40010000

0804e0ac <__NVIC_SystemReset>:
{
 804e0ac:	b480      	push	{r7}
 804e0ae:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 804e0b0:	f3bf 8f4f 	dsb	sy
}
 804e0b4:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 804e0b6:	4b06      	ldr	r3, [pc, #24]	; (804e0d0 <__NVIC_SystemReset+0x24>)
 804e0b8:	68db      	ldr	r3, [r3, #12]
 804e0ba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 804e0be:	4904      	ldr	r1, [pc, #16]	; (804e0d0 <__NVIC_SystemReset+0x24>)
 804e0c0:	4b04      	ldr	r3, [pc, #16]	; (804e0d4 <__NVIC_SystemReset+0x28>)
 804e0c2:	4313      	orrs	r3, r2
 804e0c4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 804e0c6:	f3bf 8f4f 	dsb	sy
}
 804e0ca:	bf00      	nop
    __NOP();
 804e0cc:	bf00      	nop
 804e0ce:	e7fd      	b.n	804e0cc <__NVIC_SystemReset+0x20>
 804e0d0:	e000ed00 	.word	0xe000ed00
 804e0d4:	05fa0004 	.word	0x05fa0004

0804e0d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 804e0d8:	b480      	push	{r7}
 804e0da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1) {
 804e0dc:	e7fe      	b.n	804e0dc <NMI_Handler+0x4>

0804e0de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 804e0de:	b580      	push	{r7, lr}
 804e0e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1) {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    __NVIC_SystemReset();
 804e0e2:	f7ff ffe3 	bl	804e0ac <__NVIC_SystemReset>

0804e0e6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 804e0e6:	b480      	push	{r7}
 804e0e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1) {
 804e0ea:	e7fe      	b.n	804e0ea <MemManage_Handler+0x4>

0804e0ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 804e0ec:	b480      	push	{r7}
 804e0ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1) {
 804e0f0:	e7fe      	b.n	804e0f0 <BusFault_Handler+0x4>

0804e0f2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 804e0f2:	b480      	push	{r7}
 804e0f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1) {
 804e0f6:	e7fe      	b.n	804e0f6 <UsageFault_Handler+0x4>

0804e0f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 804e0f8:	b480      	push	{r7}
 804e0fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 804e0fc:	bf00      	nop
 804e0fe:	46bd      	mov	sp, r7
 804e100:	f85d 7b04 	ldr.w	r7, [sp], #4
 804e104:	4770      	bx	lr

0804e106 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 804e106:	b580      	push	{r7, lr}
 804e108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 804e10a:	2008      	movs	r0, #8
 804e10c:	f003 fad6 	bl	80516bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 804e110:	bf00      	nop
 804e112:	bd80      	pop	{r7, pc}

0804e114 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 804e114:	b580      	push	{r7, lr}
 804e116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 804e118:	4802      	ldr	r0, [pc, #8]	; (804e124 <DMA1_Stream5_IRQHandler+0x10>)
 804e11a:	f002 fbbf 	bl	805089c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 804e11e:	bf00      	nop
 804e120:	bd80      	pop	{r7, pc}
 804e122:	bf00      	nop
 804e124:	2001be0c 	.word	0x2001be0c

0804e128 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 804e128:	b580      	push	{r7, lr}
 804e12a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 804e12c:	4802      	ldr	r0, [pc, #8]	; (804e138 <DMA1_Stream6_IRQHandler+0x10>)
 804e12e:	f002 fbb5 	bl	805089c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 804e132:	bf00      	nop
 804e134:	bd80      	pop	{r7, pc}
 804e136:	bf00      	nop
 804e138:	2001bf7c 	.word	0x2001bf7c

0804e13c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 804e13c:	b580      	push	{r7, lr}
 804e13e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 804e140:	4802      	ldr	r0, [pc, #8]	; (804e14c <CAN1_RX0_IRQHandler+0x10>)
 804e142:	f001 feda 	bl	804fefa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 804e146:	bf00      	nop
 804e148:	bd80      	pop	{r7, pc}
 804e14a:	bf00      	nop
 804e14c:	2001c29c 	.word	0x2001c29c

0804e150 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 804e150:	b580      	push	{r7, lr}
 804e152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 804e154:	2040      	movs	r0, #64	; 0x40
 804e156:	f003 fab1 	bl	80516bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 804e15a:	bf00      	nop
 804e15c:	bd80      	pop	{r7, pc}
	...

0804e160 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 804e160:	b580      	push	{r7, lr}
 804e162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 804e164:	4802      	ldr	r0, [pc, #8]	; (804e170 <TIM1_UP_TIM10_IRQHandler+0x10>)
 804e166:	f006 f830 	bl	80541ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 804e16a:	bf00      	nop
 804e16c:	bd80      	pop	{r7, pc}
 804e16e:	bf00      	nop
 804e170:	2001c2d0 	.word	0x2001c2d0

0804e174 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 804e174:	b580      	push	{r7, lr}
 804e176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 804e178:	4802      	ldr	r0, [pc, #8]	; (804e184 <TIM3_IRQHandler+0x10>)
 804e17a:	f006 f826 	bl	80541ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 804e17e:	bf00      	nop
 804e180:	bd80      	pop	{r7, pc}
 804e182:	bf00      	nop
 804e184:	2001bed0 	.word	0x2001bed0

0804e188 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 804e188:	b580      	push	{r7, lr}
 804e18a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 804e18c:	4802      	ldr	r0, [pc, #8]	; (804e198 <USART2_IRQHandler+0x10>)
 804e18e:	f007 f803 	bl	8055198 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 804e192:	bf00      	nop
 804e194:	bd80      	pop	{r7, pc}
 804e196:	bf00      	nop
 804e198:	2001c254 	.word	0x2001c254

0804e19c <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 804e19c:	b580      	push	{r7, lr}
 804e19e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 804e1a0:	4802      	ldr	r0, [pc, #8]	; (804e1ac <CAN2_RX0_IRQHandler+0x10>)
 804e1a2:	f001 feaa 	bl	804fefa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 804e1a6:	bf00      	nop
 804e1a8:	bd80      	pop	{r7, pc}
 804e1aa:	bf00      	nop
 804e1ac:	2001bf48 	.word	0x2001bf48

0804e1b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 804e1b0:	b480      	push	{r7}
 804e1b2:	af00      	add	r7, sp, #0
  return 1;
 804e1b4:	2301      	movs	r3, #1
}
 804e1b6:	4618      	mov	r0, r3
 804e1b8:	46bd      	mov	sp, r7
 804e1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 804e1be:	4770      	bx	lr

0804e1c0 <_kill>:

int _kill(int pid, int sig)
{
 804e1c0:	b580      	push	{r7, lr}
 804e1c2:	b082      	sub	sp, #8
 804e1c4:	af00      	add	r7, sp, #0
 804e1c6:	6078      	str	r0, [r7, #4]
 804e1c8:	6039      	str	r1, [r7, #0]
  errno = EINVAL;
 804e1ca:	f011 febf 	bl	805ff4c <__errno>
 804e1ce:	4603      	mov	r3, r0
 804e1d0:	2216      	movs	r2, #22
 804e1d2:	601a      	str	r2, [r3, #0]
  return -1;
 804e1d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 804e1d8:	4618      	mov	r0, r3
 804e1da:	3708      	adds	r7, #8
 804e1dc:	46bd      	mov	sp, r7
 804e1de:	bd80      	pop	{r7, pc}

0804e1e0 <_exit>:

void _exit(int status)
{
 804e1e0:	b580      	push	{r7, lr}
 804e1e2:	b082      	sub	sp, #8
 804e1e4:	af00      	add	r7, sp, #0
 804e1e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 804e1e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 804e1ec:	6878      	ldr	r0, [r7, #4]
 804e1ee:	f7ff ffe7 	bl	804e1c0 <_kill>
  while (1) {
 804e1f2:	e7fe      	b.n	804e1f2 <_exit+0x12>

0804e1f4 <_read>:
  }                             /* Make sure we hang here */
}

__attribute__ ((weak))
int _read(int file, char *ptr, int len)
{
 804e1f4:	b580      	push	{r7, lr}
 804e1f6:	b086      	sub	sp, #24
 804e1f8:	af00      	add	r7, sp, #0
 804e1fa:	60f8      	str	r0, [r7, #12]
 804e1fc:	60b9      	str	r1, [r7, #8]
 804e1fe:	607a      	str	r2, [r7, #4]
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++) {
 804e200:	2300      	movs	r3, #0
 804e202:	617b      	str	r3, [r7, #20]
 804e204:	e00a      	b.n	804e21c <_read+0x28>
    *ptr++ = __io_getchar();
 804e206:	f3af 8000 	nop.w
 804e20a:	4601      	mov	r1, r0
 804e20c:	68bb      	ldr	r3, [r7, #8]
 804e20e:	1c5a      	adds	r2, r3, #1
 804e210:	60ba      	str	r2, [r7, #8]
 804e212:	b2ca      	uxtb	r2, r1
 804e214:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++) {
 804e216:	697b      	ldr	r3, [r7, #20]
 804e218:	3301      	adds	r3, #1
 804e21a:	617b      	str	r3, [r7, #20]
 804e21c:	697a      	ldr	r2, [r7, #20]
 804e21e:	687b      	ldr	r3, [r7, #4]
 804e220:	429a      	cmp	r2, r3
 804e222:	dbf0      	blt.n	804e206 <_read+0x12>
  }

  return len;
 804e224:	687b      	ldr	r3, [r7, #4]
}
 804e226:	4618      	mov	r0, r3
 804e228:	3718      	adds	r7, #24
 804e22a:	46bd      	mov	sp, r7
 804e22c:	bd80      	pop	{r7, pc}

0804e22e <_write>:

__attribute__ ((weak))
int _write(int file, char *ptr, int len)
{
 804e22e:	b580      	push	{r7, lr}
 804e230:	b086      	sub	sp, #24
 804e232:	af00      	add	r7, sp, #0
 804e234:	60f8      	str	r0, [r7, #12]
 804e236:	60b9      	str	r1, [r7, #8]
 804e238:	607a      	str	r2, [r7, #4]
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++) {
 804e23a:	2300      	movs	r3, #0
 804e23c:	617b      	str	r3, [r7, #20]
 804e23e:	e009      	b.n	804e254 <_write+0x26>
    __io_putchar(*ptr++);
 804e240:	68bb      	ldr	r3, [r7, #8]
 804e242:	1c5a      	adds	r2, r3, #1
 804e244:	60ba      	str	r2, [r7, #8]
 804e246:	781b      	ldrb	r3, [r3, #0]
 804e248:	4618      	mov	r0, r3
 804e24a:	f7fa fbe7 	bl	8048a1c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++) {
 804e24e:	697b      	ldr	r3, [r7, #20]
 804e250:	3301      	adds	r3, #1
 804e252:	617b      	str	r3, [r7, #20]
 804e254:	697a      	ldr	r2, [r7, #20]
 804e256:	687b      	ldr	r3, [r7, #4]
 804e258:	429a      	cmp	r2, r3
 804e25a:	dbf1      	blt.n	804e240 <_write+0x12>
  }
  return len;
 804e25c:	687b      	ldr	r3, [r7, #4]
}
 804e25e:	4618      	mov	r0, r3
 804e260:	3718      	adds	r7, #24
 804e262:	46bd      	mov	sp, r7
 804e264:	bd80      	pop	{r7, pc}

0804e266 <_close>:

int _close(int file)
{
 804e266:	b480      	push	{r7}
 804e268:	b083      	sub	sp, #12
 804e26a:	af00      	add	r7, sp, #0
 804e26c:	6078      	str	r0, [r7, #4]
  return -1;
 804e26e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 804e272:	4618      	mov	r0, r3
 804e274:	370c      	adds	r7, #12
 804e276:	46bd      	mov	sp, r7
 804e278:	f85d 7b04 	ldr.w	r7, [sp], #4
 804e27c:	4770      	bx	lr

0804e27e <_fstat>:

int _fstat(int file, struct stat *st)
{
 804e27e:	b480      	push	{r7}
 804e280:	b083      	sub	sp, #12
 804e282:	af00      	add	r7, sp, #0
 804e284:	6078      	str	r0, [r7, #4]
 804e286:	6039      	str	r1, [r7, #0]
  st->st_mode = S_IFCHR;
 804e288:	683b      	ldr	r3, [r7, #0]
 804e28a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 804e28e:	605a      	str	r2, [r3, #4]
  return 0;
 804e290:	2300      	movs	r3, #0
}
 804e292:	4618      	mov	r0, r3
 804e294:	370c      	adds	r7, #12
 804e296:	46bd      	mov	sp, r7
 804e298:	f85d 7b04 	ldr.w	r7, [sp], #4
 804e29c:	4770      	bx	lr

0804e29e <_isatty>:

int _isatty(int file)
{
 804e29e:	b480      	push	{r7}
 804e2a0:	b083      	sub	sp, #12
 804e2a2:	af00      	add	r7, sp, #0
 804e2a4:	6078      	str	r0, [r7, #4]
  return 1;
 804e2a6:	2301      	movs	r3, #1
}
 804e2a8:	4618      	mov	r0, r3
 804e2aa:	370c      	adds	r7, #12
 804e2ac:	46bd      	mov	sp, r7
 804e2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 804e2b2:	4770      	bx	lr

0804e2b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 804e2b4:	b480      	push	{r7}
 804e2b6:	b085      	sub	sp, #20
 804e2b8:	af00      	add	r7, sp, #0
 804e2ba:	60f8      	str	r0, [r7, #12]
 804e2bc:	60b9      	str	r1, [r7, #8]
 804e2be:	607a      	str	r2, [r7, #4]
  return 0;
 804e2c0:	2300      	movs	r3, #0
}
 804e2c2:	4618      	mov	r0, r3
 804e2c4:	3714      	adds	r7, #20
 804e2c6:	46bd      	mov	sp, r7
 804e2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 804e2cc:	4770      	bx	lr
	...

0804e2d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 804e2d0:	b580      	push	{r7, lr}
 804e2d2:	b086      	sub	sp, #24
 804e2d4:	af00      	add	r7, sp, #0
 804e2d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end;          /* Symbol defined in the linker script */
  extern uint8_t _estack;       /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size;      /* Symbol defined in the linker script */
  const uint32_t stack_limit =
      (uint32_t) & _estack - (uint32_t) & _Min_Stack_Size;
 804e2d8:	4a14      	ldr	r2, [pc, #80]	; (804e32c <_sbrk+0x5c>)
 804e2da:	4b15      	ldr	r3, [pc, #84]	; (804e330 <_sbrk+0x60>)
  const uint32_t stack_limit =
 804e2dc:	1ad3      	subs	r3, r2, r3
 804e2de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *) stack_limit;
 804e2e0:	697b      	ldr	r3, [r7, #20]
 804e2e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end) {
 804e2e4:	4b13      	ldr	r3, [pc, #76]	; (804e334 <_sbrk+0x64>)
 804e2e6:	681b      	ldr	r3, [r3, #0]
 804e2e8:	2b00      	cmp	r3, #0
 804e2ea:	d102      	bne.n	804e2f2 <_sbrk+0x22>
    __sbrk_heap_end = &_end;
 804e2ec:	4b11      	ldr	r3, [pc, #68]	; (804e334 <_sbrk+0x64>)
 804e2ee:	4a12      	ldr	r2, [pc, #72]	; (804e338 <_sbrk+0x68>)
 804e2f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap) {
 804e2f2:	4b10      	ldr	r3, [pc, #64]	; (804e334 <_sbrk+0x64>)
 804e2f4:	681a      	ldr	r2, [r3, #0]
 804e2f6:	687b      	ldr	r3, [r7, #4]
 804e2f8:	4413      	add	r3, r2
 804e2fa:	693a      	ldr	r2, [r7, #16]
 804e2fc:	429a      	cmp	r2, r3
 804e2fe:	d207      	bcs.n	804e310 <_sbrk+0x40>
    errno = ENOMEM;
 804e300:	f011 fe24 	bl	805ff4c <__errno>
 804e304:	4603      	mov	r3, r0
 804e306:	220c      	movs	r2, #12
 804e308:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 804e30a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 804e30e:	e009      	b.n	804e324 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 804e310:	4b08      	ldr	r3, [pc, #32]	; (804e334 <_sbrk+0x64>)
 804e312:	681b      	ldr	r3, [r3, #0]
 804e314:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 804e316:	4b07      	ldr	r3, [pc, #28]	; (804e334 <_sbrk+0x64>)
 804e318:	681a      	ldr	r2, [r3, #0]
 804e31a:	687b      	ldr	r3, [r7, #4]
 804e31c:	4413      	add	r3, r2
 804e31e:	4a05      	ldr	r2, [pc, #20]	; (804e334 <_sbrk+0x64>)
 804e320:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 804e322:	68fb      	ldr	r3, [r7, #12]
}
 804e324:	4618      	mov	r0, r3
 804e326:	3718      	adds	r7, #24
 804e328:	46bd      	mov	sp, r7
 804e32a:	bd80      	pop	{r7, pc}
 804e32c:	20020000 	.word	0x20020000
 804e330:	00000400 	.word	0x00000400
 804e334:	200084ac 	.word	0x200084ac
 804e338:	2001c398 	.word	0x2001c398

0804e33c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 804e33c:	b480      	push	{r7}
 804e33e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------ */
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2));    /* set CP10 and CP11 Full Access */
 804e340:	4b07      	ldr	r3, [pc, #28]	; (804e360 <SystemInit+0x24>)
 804e342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804e346:	4a06      	ldr	r2, [pc, #24]	; (804e360 <SystemInit+0x24>)
 804e348:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 804e34c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------ */
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET;      /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET;     /* Vector Table Relocation in Internal FLASH */
 804e350:	4b03      	ldr	r3, [pc, #12]	; (804e360 <SystemInit+0x24>)
 804e352:	4a04      	ldr	r2, [pc, #16]	; (804e364 <SystemInit+0x28>)
 804e354:	609a      	str	r2, [r3, #8]
#endif
}
 804e356:	bf00      	nop
 804e358:	46bd      	mov	sp, r7
 804e35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804e35e:	4770      	bx	lr
 804e360:	e000ed00 	.word	0xe000ed00
 804e364:	08040000 	.word	0x08040000

0804e368 <send_device_xtalk_characterisation_config>:

FILE *fptr;

int32_t send_device_xtalk_characterisation_config(struct vl53l5_dev_handle_t
                                                  *pdev)
{
 804e368:	b580      	push	{r7, lr}
 804e36a:	f5ad 6dea 	sub.w	sp, sp, #1872	; 0x750
 804e36e:	af00      	add	r7, sp, #0
 804e370:	1d3b      	adds	r3, r7, #4
 804e372:	6018      	str	r0, [r3, #0]
  int32_t status = STATUS_OK;
 804e374:	2300      	movs	r3, #0
 804e376:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
  uint8_t params_buff[] = VL53L5_CFG__XTALK_GEN1_1000__8X8_DATA;
 804e37a:	f107 0308 	add.w	r3, r7, #8
 804e37e:	4a0e      	ldr	r2, [pc, #56]	; (804e3b8 <send_device_xtalk_characterisation_config+0x50>)
 804e380:	4618      	mov	r0, r3
 804e382:	4611      	mov	r1, r2
 804e384:	f240 7344 	movw	r3, #1860	; 0x744
 804e388:	461a      	mov	r2, r3
 804e38a:	f011 fe09 	bl	805ffa0 <memcpy>

  printf("Setting config for xtalk characterisation...\r\n");
 804e38e:	480b      	ldr	r0, [pc, #44]	; (804e3bc <send_device_xtalk_characterisation_config+0x54>)
 804e390:	f012 fb8c 	bl	8060aac <puts>

  status = vl53l5_set_device_parameters(pdev, params_buff, sizeof(params_buff));
 804e394:	f107 0108 	add.w	r1, r7, #8
 804e398:	1d3b      	adds	r3, r7, #4
 804e39a:	f240 7244 	movw	r2, #1860	; 0x744
 804e39e:	6818      	ldr	r0, [r3, #0]
 804e3a0:	f00d f9ec 	bl	805b77c <vl53l5_set_device_parameters>
 804e3a4:	f8c7 074c 	str.w	r0, [r7, #1868]	; 0x74c

  return status;
 804e3a8:	f8d7 374c 	ldr.w	r3, [r7, #1868]	; 0x74c
}
 804e3ac:	4618      	mov	r0, r3
 804e3ae:	f507 67ea 	add.w	r7, r7, #1872	; 0x750
 804e3b2:	46bd      	mov	sp, r7
 804e3b4:	bd80      	pop	{r7, pc}
 804e3b6:	bf00      	nop
 804e3b8:	08066124 	.word	0x08066124
 804e3bc:	080660f4 	.word	0x080660f4

0804e3c0 <calibrating_loop>:

int32_t calibrating_loop(struct vl53l5_dev_handle_t * pdev)
{
 804e3c0:	b580      	push	{r7, lr}
 804e3c2:	b086      	sub	sp, #24
 804e3c4:	af00      	add	r7, sp, #0
 804e3c6:	6078      	str	r0, [r7, #4]
  int32_t status = STATUS_OK;
 804e3c8:	2300      	movs	r3, #0
 804e3ca:	617b      	str	r3, [r7, #20]
  uint8_t n = 0;
 804e3cc:	2300      	movs	r3, #0
 804e3ce:	74fb      	strb	r3, [r7, #19]
  int cal_complete = 0;
 804e3d0:	2300      	movs	r3, #0
 804e3d2:	60fb      	str	r3, [r7, #12]

  printf("asking device to start ranging...\r\n");
 804e3d4:	4821      	ldr	r0, [pc, #132]	; (804e45c <calibrating_loop+0x9c>)
 804e3d6:	f012 fb69 	bl	8060aac <puts>

  status = vl53l5_start(pdev, NULL);
 804e3da:	2100      	movs	r1, #0
 804e3dc:	6878      	ldr	r0, [r7, #4]
 804e3de:	f00d f896 	bl	805b50e <vl53l5_start>
 804e3e2:	6178      	str	r0, [r7, #20]
  if (status < STATUS_OK) {
 804e3e4:	697b      	ldr	r3, [r7, #20]
 804e3e6:	2b00      	cmp	r3, #0
 804e3e8:	da1f      	bge.n	804e42a <calibrating_loop+0x6a>
    printf("Start failed: %d\r\n", (int)status);
 804e3ea:	6979      	ldr	r1, [r7, #20]
 804e3ec:	481c      	ldr	r0, [pc, #112]	; (804e460 <calibrating_loop+0xa0>)
 804e3ee:	f012 fac1 	bl	8060974 <iprintf>
    goto exit;
 804e3f2:	e01e      	b.n	804e432 <calibrating_loop+0x72>
  }

  while (cal_complete == 0) {
    /* Simulate a wait between subsequent checks of range results */
    vl53l5_wait_ms(pdev, 100);
 804e3f4:	2164      	movs	r1, #100	; 0x64
 804e3f6:	6878      	ldr	r0, [r7, #4]
 804e3f8:	f010 fbb6 	bl	805eb68 <vl53l5_wait_ms>

    /* now check to see if range data is available */
    status = vl53l5_check_data_ready(pdev);
 804e3fc:	6878      	ldr	r0, [r7, #4]
 804e3fe:	f00d fc40 	bl	805bc82 <vl53l5_check_data_ready>
 804e402:	6178      	str	r0, [r7, #20]
    if (status < STATUS_OK) {
 804e404:	697b      	ldr	r3, [r7, #20]
 804e406:	2b00      	cmp	r3, #0
 804e408:	da0c      	bge.n	804e424 <calibrating_loop+0x64>
      if (status == VL53L5_NO_NEW_RANGE_DATA_ERROR) {
 804e40a:	697b      	ldr	r3, [r7, #20]
 804e40c:	f113 0f59 	cmn.w	r3, #89	; 0x59
 804e410:	d103      	bne.n	804e41a <calibrating_loop+0x5a>
        printf("waiting for new range data...\r\n");
 804e412:	4814      	ldr	r0, [pc, #80]	; (804e464 <calibrating_loop+0xa4>)
 804e414:	f012 fb4a 	bl	8060aac <puts>
        continue;
 804e418:	e007      	b.n	804e42a <calibrating_loop+0x6a>
      }
      printf("check_data_ready() error: status %d\r\n", (int)status);
 804e41a:	6979      	ldr	r1, [r7, #20]
 804e41c:	4812      	ldr	r0, [pc, #72]	; (804e468 <calibrating_loop+0xa8>)
 804e41e:	f012 faa9 	bl	8060974 <iprintf>
      goto exit;
 804e422:	e006      	b.n	804e432 <calibrating_loop+0x72>
    } else {
      cal_complete = 1;
 804e424:	2301      	movs	r3, #1
 804e426:	60fb      	str	r3, [r7, #12]
    }
    goto exit;
 804e428:	e003      	b.n	804e432 <calibrating_loop+0x72>
  while (cal_complete == 0) {
 804e42a:	68fb      	ldr	r3, [r7, #12]
 804e42c:	2b00      	cmp	r3, #0
 804e42e:	d0e1      	beq.n	804e3f4 <calibrating_loop+0x34>
  }

exit:
 804e430:	bf00      	nop
  printf("asking device to stop ranging...\r\n");
 804e432:	480e      	ldr	r0, [pc, #56]	; (804e46c <calibrating_loop+0xac>)
 804e434:	f012 fb3a 	bl	8060aac <puts>
  status = vl53l5_stop(pdev, NULL);
 804e438:	2100      	movs	r1, #0
 804e43a:	6878      	ldr	r0, [r7, #4]
 804e43c:	f00d f8df 	bl	805b5fe <vl53l5_stop>
 804e440:	6178      	str	r0, [r7, #20]

  if (status < STATUS_OK) {
 804e442:	697b      	ldr	r3, [r7, #20]
 804e444:	2b00      	cmp	r3, #0
 804e446:	da03      	bge.n	804e450 <calibrating_loop+0x90>
    printf("Stop command failed: status %d\r\n", (int)status);
 804e448:	6979      	ldr	r1, [r7, #20]
 804e44a:	4809      	ldr	r0, [pc, #36]	; (804e470 <calibrating_loop+0xb0>)
 804e44c:	f012 fa92 	bl	8060974 <iprintf>
  }

  return status;
 804e450:	697b      	ldr	r3, [r7, #20]
}
 804e452:	4618      	mov	r0, r3
 804e454:	3718      	adds	r7, #24
 804e456:	46bd      	mov	sp, r7
 804e458:	bd80      	pop	{r7, pc}
 804e45a:	bf00      	nop
 804e45c:	08066868 	.word	0x08066868
 804e460:	0806688c 	.word	0x0806688c
 804e464:	080668a0 	.word	0x080668a0
 804e468:	080668c0 	.word	0x080668c0
 804e46c:	080668e8 	.word	0x080668e8
 804e470:	0806690c 	.word	0x0806690c

0804e474 <save_cal_data>:

int save_cal_data(struct vl53l5_dev_handle_t *pdev)
{
 804e474:	b5b0      	push	{r4, r5, r7, lr}
 804e476:	f5ad 6dbc 	sub.w	sp, sp, #1504	; 0x5e0
 804e47a:	af02      	add	r7, sp, #8
 804e47c:	1d3b      	adds	r3, r7, #4
 804e47e:	6018      	str	r0, [r3, #0]
  int i, j;
  int32_t status = STATUS_OK;
 804e480:	2300      	movs	r3, #0
 804e482:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc
  struct vl53l5_calibration_data_t cal_data = { 0 };
 804e486:	f107 0308 	add.w	r3, r7, #8
 804e48a:	4618      	mov	r0, r3
 804e48c:	f44f 63b8 	mov.w	r3, #1472	; 0x5c0
 804e490:	461a      	mov	r2, r3
 804e492:	2100      	movs	r1, #0
 804e494:	f011 fd92 	bl	805ffbc <memset>

// shape cali data
  status =
      vl53l5_get_device_parameters(pdev, _cal_data_shape_block_list,
 804e498:	4b92      	ldr	r3, [pc, #584]	; (804e6e4 <save_cal_data+0x270>)
 804e49a:	681a      	ldr	r2, [r3, #0]
 804e49c:	1d3b      	adds	r3, r7, #4
 804e49e:	4992      	ldr	r1, [pc, #584]	; (804e6e8 <save_cal_data+0x274>)
 804e4a0:	6818      	ldr	r0, [r3, #0]
 804e4a2:	f00d f93d 	bl	805b720 <vl53l5_get_device_parameters>
 804e4a6:	f8c7 05cc 	str.w	r0, [r7, #1484]	; 0x5cc
                                   _num_cal_shape_blocks);
  if (status < STATUS_OK) {
 804e4aa:	f8d7 35cc 	ldr.w	r3, [r7, #1484]	; 0x5cc
 804e4ae:	2b00      	cmp	r3, #0
 804e4b0:	da05      	bge.n	804e4be <save_cal_data+0x4a>
    printf("Getting calibration data failed: %d\r\n", (int)status);
 804e4b2:	f8d7 15cc 	ldr.w	r1, [r7, #1484]	; 0x5cc
 804e4b6:	488d      	ldr	r0, [pc, #564]	; (804e6ec <save_cal_data+0x278>)
 804e4b8:	f012 fa5c 	bl	8060974 <iprintf>
    goto exit;
 804e4bc:	e216      	b.n	804e8ec <save_cal_data+0x478>
  } else
    printf("Calibration data received \r\n");
 804e4be:	488c      	ldr	r0, [pc, #560]	; (804e6f0 <save_cal_data+0x27c>)
 804e4c0:	f012 faf4 	bl	8060aac <puts>

  /* The data is available in the comms buffer. How the data is then
     stored is customer specific.  The last 4 bytes of data are not required
     and should be removed [00, 00, 00, 0f].
   */
  for (i = 3; i < VL53L5_COMMS_BUFF_COUNT(pdev) - 4; i += 4) {
 804e4c4:	2303      	movs	r3, #3
 804e4c6:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 804e4ca:	e063      	b.n	804e594 <save_cal_data+0x120>
    printf(fptr, "%02x, %02x, %02x, %02x \n", VL53L5_COMMS_BUFF(pdev)[i - 3],
 804e4cc:	4b89      	ldr	r3, [pc, #548]	; (804e6f4 <save_cal_data+0x280>)
 804e4ce:	6818      	ldr	r0, [r3, #0]
 804e4d0:	1d3b      	adds	r3, r7, #4
 804e4d2:	681b      	ldr	r3, [r3, #0]
 804e4d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 804e4d6:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 804e4da:	3b03      	subs	r3, #3
 804e4dc:	4413      	add	r3, r2
 804e4de:	781b      	ldrb	r3, [r3, #0]
 804e4e0:	461c      	mov	r4, r3
           VL53L5_COMMS_BUFF(pdev)[i - 2],
 804e4e2:	1d3b      	adds	r3, r7, #4
 804e4e4:	681b      	ldr	r3, [r3, #0]
 804e4e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 804e4e8:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 804e4ec:	3b02      	subs	r3, #2
 804e4ee:	4413      	add	r3, r2
 804e4f0:	781b      	ldrb	r3, [r3, #0]
    printf(fptr, "%02x, %02x, %02x, %02x \n", VL53L5_COMMS_BUFF(pdev)[i - 3],
 804e4f2:	461d      	mov	r5, r3
           VL53L5_COMMS_BUFF(pdev)[i - 1], VL53L5_COMMS_BUFF(pdev)[i]);
 804e4f4:	1d3b      	adds	r3, r7, #4
 804e4f6:	681b      	ldr	r3, [r3, #0]
 804e4f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 804e4fa:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 804e4fe:	3b01      	subs	r3, #1
 804e500:	4413      	add	r3, r2
 804e502:	781b      	ldrb	r3, [r3, #0]
    printf(fptr, "%02x, %02x, %02x, %02x \n", VL53L5_COMMS_BUFF(pdev)[i - 3],
 804e504:	4619      	mov	r1, r3
           VL53L5_COMMS_BUFF(pdev)[i - 1], VL53L5_COMMS_BUFF(pdev)[i]);
 804e506:	1d3b      	adds	r3, r7, #4
 804e508:	681b      	ldr	r3, [r3, #0]
 804e50a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 804e50c:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 804e510:	4413      	add	r3, r2
 804e512:	781b      	ldrb	r3, [r3, #0]
    printf(fptr, "%02x, %02x, %02x, %02x \n", VL53L5_COMMS_BUFF(pdev)[i - 3],
 804e514:	9301      	str	r3, [sp, #4]
 804e516:	9100      	str	r1, [sp, #0]
 804e518:	462b      	mov	r3, r5
 804e51a:	4622      	mov	r2, r4
 804e51c:	4976      	ldr	r1, [pc, #472]	; (804e6f8 <save_cal_data+0x284>)
 804e51e:	f012 fa29 	bl	8060974 <iprintf>
    mtof_cali_data.shape_cali_data[i - 3] = VL53L5_COMMS_BUFF(pdev)[i - 3];
 804e522:	1d3b      	adds	r3, r7, #4
 804e524:	681b      	ldr	r3, [r3, #0]
 804e526:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 804e528:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 804e52c:	3b03      	subs	r3, #3
 804e52e:	441a      	add	r2, r3
 804e530:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 804e534:	3b03      	subs	r3, #3
 804e536:	7811      	ldrb	r1, [r2, #0]
 804e538:	4a70      	ldr	r2, [pc, #448]	; (804e6fc <save_cal_data+0x288>)
 804e53a:	54d1      	strb	r1, [r2, r3]
    mtof_cali_data.shape_cali_data[i - 2] = VL53L5_COMMS_BUFF(pdev)[i - 2];
 804e53c:	1d3b      	adds	r3, r7, #4
 804e53e:	681b      	ldr	r3, [r3, #0]
 804e540:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 804e542:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 804e546:	3b02      	subs	r3, #2
 804e548:	441a      	add	r2, r3
 804e54a:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 804e54e:	3b02      	subs	r3, #2
 804e550:	7811      	ldrb	r1, [r2, #0]
 804e552:	4a6a      	ldr	r2, [pc, #424]	; (804e6fc <save_cal_data+0x288>)
 804e554:	54d1      	strb	r1, [r2, r3]
    mtof_cali_data.shape_cali_data[i - 1] = VL53L5_COMMS_BUFF(pdev)[i - 1];
 804e556:	1d3b      	adds	r3, r7, #4
 804e558:	681b      	ldr	r3, [r3, #0]
 804e55a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 804e55c:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 804e560:	3b01      	subs	r3, #1
 804e562:	441a      	add	r2, r3
 804e564:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 804e568:	3b01      	subs	r3, #1
 804e56a:	7811      	ldrb	r1, [r2, #0]
 804e56c:	4a63      	ldr	r2, [pc, #396]	; (804e6fc <save_cal_data+0x288>)
 804e56e:	54d1      	strb	r1, [r2, r3]
    mtof_cali_data.shape_cali_data[i] = VL53L5_COMMS_BUFF(pdev)[i];
 804e570:	1d3b      	adds	r3, r7, #4
 804e572:	681b      	ldr	r3, [r3, #0]
 804e574:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 804e576:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 804e57a:	4413      	add	r3, r2
 804e57c:	7819      	ldrb	r1, [r3, #0]
 804e57e:	4a5f      	ldr	r2, [pc, #380]	; (804e6fc <save_cal_data+0x288>)
 804e580:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 804e584:	4413      	add	r3, r2
 804e586:	460a      	mov	r2, r1
 804e588:	701a      	strb	r2, [r3, #0]
  for (i = 3; i < VL53L5_COMMS_BUFF_COUNT(pdev) - 4; i += 4) {
 804e58a:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 804e58e:	3304      	adds	r3, #4
 804e590:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 804e594:	1d3b      	adds	r3, r7, #4
 804e596:	681b      	ldr	r3, [r3, #0]
 804e598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804e59a:	1f1a      	subs	r2, r3, #4
 804e59c:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 804e5a0:	429a      	cmp	r2, r3
 804e5a2:	d893      	bhi.n	804e4cc <save_cal_data+0x58>
  }

  printf("Decoding calibration data \r\n");
 804e5a4:	4856      	ldr	r0, [pc, #344]	; (804e700 <save_cal_data+0x28c>)
 804e5a6:	f012 fa81 	bl	8060aac <puts>
  status = vl53l5_decode_calibration_data(pdev,
 804e5aa:	1d3b      	adds	r3, r7, #4
 804e5ac:	681b      	ldr	r3, [r3, #0]
 804e5ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 804e5b0:	1d3b      	adds	r3, r7, #4
 804e5b2:	681b      	ldr	r3, [r3, #0]
 804e5b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804e5b6:	f107 0108 	add.w	r1, r7, #8
 804e5ba:	1d38      	adds	r0, r7, #4
 804e5bc:	6800      	ldr	r0, [r0, #0]
 804e5be:	f00c fc64 	bl	805ae8a <vl53l5_decode_calibration_data>
 804e5c2:	f8c7 05cc 	str.w	r0, [r7, #1484]	; 0x5cc
                                          &cal_data,
                                          VL53L5_COMMS_BUFF(pdev),
                                          VL53L5_COMMS_BUFF_COUNT(pdev));

  if (status != STATUS_OK) {
 804e5c6:	f8d7 35cc 	ldr.w	r3, [r7, #1484]	; 0x5cc
 804e5ca:	2b00      	cmp	r3, #0
 804e5cc:	d005      	beq.n	804e5da <save_cal_data+0x166>
    printf("Decode calibration failed: %d\n", status);
 804e5ce:	f8d7 15cc 	ldr.w	r1, [r7, #1484]	; 0x5cc
 804e5d2:	484c      	ldr	r0, [pc, #304]	; (804e704 <save_cal_data+0x290>)
 804e5d4:	f012 f9ce 	bl	8060974 <iprintf>
    goto exit;
 804e5d8:	e188      	b.n	804e8ec <save_cal_data+0x478>
    **
    ** Xtalk data
    **
    ****************************************************************************************/

  printf("Xtalk cal data \r\n");
 804e5da:	484b      	ldr	r0, [pc, #300]	; (804e708 <save_cal_data+0x294>)
 804e5dc:	f012 fa66 	bl	8060aac <puts>
  printf("\r\n");
 804e5e0:	484a      	ldr	r0, [pc, #296]	; (804e70c <save_cal_data+0x298>)
 804e5e2:	f012 fa63 	bl	8060aac <puts>

  printf("decoded cal__xtalk_cal_shape_median_phase = %4d  \r\n",
 804e5e6:	f107 0308 	add.w	r3, r7, #8
 804e5ea:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 804e5ee:	4619      	mov	r1, r3
 804e5f0:	4847      	ldr	r0, [pc, #284]	; (804e710 <save_cal_data+0x29c>)
 804e5f2:	f012 f9bf 	bl	8060974 <iprintf>
         cal_data.core.pxtalk_shape_meta.cal__xtalk_shape__median_phase);
  printf("decoded cal__xtalk_cal_shape_avg_count = %4d  \r\n",
         cal_data.core.pxtalk_shape_meta.cal__xtalk_shape__avg_count);
 804e5f6:	f107 0308 	add.w	r3, r7, #8
 804e5fa:	f8b3 3414 	ldrh.w	r3, [r3, #1044]	; 0x414
  printf("decoded cal__xtalk_cal_shape_avg_count = %4d  \r\n",
 804e5fe:	4619      	mov	r1, r3
 804e600:	4844      	ldr	r0, [pc, #272]	; (804e714 <save_cal_data+0x2a0>)
 804e602:	f012 f9b7 	bl	8060974 <iprintf>
  printf("decoded cal__xtalk_cal_shape_no_of_bins = %4d  \r\n",
         cal_data.core.pxtalk_shape_meta.cal__xtalk_shape__no_of_bins);
 804e606:	f107 0308 	add.w	r3, r7, #8
 804e60a:	f893 3416 	ldrb.w	r3, [r3, #1046]	; 0x416
  printf("decoded cal__xtalk_cal_shape_no_of_bins = %4d  \r\n",
 804e60e:	4619      	mov	r1, r3
 804e610:	4841      	ldr	r0, [pc, #260]	; (804e718 <save_cal_data+0x2a4>)
 804e612:	f012 f9af 	bl	8060974 <iprintf>
  printf("decoded cal__xtalk_cal_shape_normalisation_power = %4d  \r\n",
         cal_data.core.pxtalk_shape_meta.cal__xtalk_shape__normalisation_power);
 804e616:	f107 0308 	add.w	r3, r7, #8
 804e61a:	f893 3417 	ldrb.w	r3, [r3, #1047]	; 0x417
  printf("decoded cal__xtalk_cal_shape_normalisation_power = %4d  \r\n",
 804e61e:	4619      	mov	r1, r3
 804e620:	483e      	ldr	r0, [pc, #248]	; (804e71c <save_cal_data+0x2a8>)
 804e622:	f012 f9a7 	bl	8060974 <iprintf>
  printf("decoded cal__xtalk_cal_shape_silicon_temp_degC = %4d  \r\n",
         cal_data.core.pxtalk_shape_meta.cal__xtalk_shape__silicon_temp_degc);
 804e626:	f107 0308 	add.w	r3, r7, #8
 804e62a:	f993 3418 	ldrsb.w	r3, [r3, #1048]	; 0x418
  printf("decoded cal__xtalk_cal_shape_silicon_temp_degC = %4d  \r\n",
 804e62e:	4619      	mov	r1, r3
 804e630:	483b      	ldr	r0, [pc, #236]	; (804e720 <save_cal_data+0x2ac>)
 804e632:	f012 f99f 	bl	8060974 <iprintf>
  printf("decoded cal__xtalk_cal_shape_spare_0 = %4d  \r\n",
         cal_data.core.pxtalk_shape_meta.cal__xtalk_shape__spare_0);
 804e636:	f107 0308 	add.w	r3, r7, #8
 804e63a:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
  printf("decoded cal__xtalk_cal_shape_spare_0 = %4d  \r\n",
 804e63e:	4619      	mov	r1, r3
 804e640:	4838      	ldr	r0, [pc, #224]	; (804e724 <save_cal_data+0x2b0>)
 804e642:	f012 f997 	bl	8060974 <iprintf>
  printf("decoded cal__xtalk_cal_shape_spare_1 = %4d  \r\n",
         cal_data.core.pxtalk_shape_meta.cal__xtalk_shape__spare_1);
 804e646:	f107 0308 	add.w	r3, r7, #8
 804e64a:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
  printf("decoded cal__xtalk_cal_shape_spare_1 = %4d  \r\n",
 804e64e:	4619      	mov	r1, r3
 804e650:	4835      	ldr	r0, [pc, #212]	; (804e728 <save_cal_data+0x2b4>)
 804e652:	f012 f98f 	bl	8060974 <iprintf>
  printf("decoded cal__xtalk_cal_shape_spare_2 = %4d  \r\n",
         cal_data.core.pxtalk_shape_meta.cal__xtalk_shape__spare_2);
 804e656:	f107 0308 	add.w	r3, r7, #8
 804e65a:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
  printf("decoded cal__xtalk_cal_shape_spare_2 = %4d  \r\n",
 804e65e:	4619      	mov	r1, r3
 804e660:	4832      	ldr	r0, [pc, #200]	; (804e72c <save_cal_data+0x2b8>)
 804e662:	f012 f987 	bl	8060974 <iprintf>
  printf("\r\n");
 804e666:	4829      	ldr	r0, [pc, #164]	; (804e70c <save_cal_data+0x298>)
 804e668:	f012 fa20 	bl	8060aac <puts>

  for (j = 0; j < 144; j++) {
 804e66c:	2300      	movs	r3, #0
 804e66e:	f8c7 35d0 	str.w	r3, [r7, #1488]	; 0x5d0
 804e672:	e016      	b.n	804e6a2 <save_cal_data+0x22e>
    printf("decoded data xtalk shape bin data[ %02d", j);
 804e674:	f8d7 15d0 	ldr.w	r1, [r7, #1488]	; 0x5d0
 804e678:	482d      	ldr	r0, [pc, #180]	; (804e730 <save_cal_data+0x2bc>)
 804e67a:	f012 f97b 	bl	8060974 <iprintf>
    printf("] =  %04d  \r\n",
           cal_data.core.pxtalk_shape_data.cal__xtalk_shape__bin_data[j]);
 804e67e:	f107 0208 	add.w	r2, r7, #8
 804e682:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	; 0x5d0
 804e686:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 804e68a:	005b      	lsls	r3, r3, #1
 804e68c:	4413      	add	r3, r2
 804e68e:	889b      	ldrh	r3, [r3, #4]
    printf("] =  %04d  \r\n",
 804e690:	4619      	mov	r1, r3
 804e692:	4828      	ldr	r0, [pc, #160]	; (804e734 <save_cal_data+0x2c0>)
 804e694:	f012 f96e 	bl	8060974 <iprintf>
  for (j = 0; j < 144; j++) {
 804e698:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	; 0x5d0
 804e69c:	3301      	adds	r3, #1
 804e69e:	f8c7 35d0 	str.w	r3, [r7, #1488]	; 0x5d0
 804e6a2:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	; 0x5d0
 804e6a6:	2b8f      	cmp	r3, #143	; 0x8f
 804e6a8:	dde4      	ble.n	804e674 <save_cal_data+0x200>
  }
  printf("\r\n");
 804e6aa:	4818      	ldr	r0, [pc, #96]	; (804e70c <save_cal_data+0x298>)
 804e6ac:	f012 f9fe 	bl	8060aac <puts>

//   grid cali data
  status =
      vl53l5_get_device_parameters(pdev, _cal_data_grid_block_list,
 804e6b0:	4b21      	ldr	r3, [pc, #132]	; (804e738 <save_cal_data+0x2c4>)
 804e6b2:	681a      	ldr	r2, [r3, #0]
 804e6b4:	1d3b      	adds	r3, r7, #4
 804e6b6:	4921      	ldr	r1, [pc, #132]	; (804e73c <save_cal_data+0x2c8>)
 804e6b8:	6818      	ldr	r0, [r3, #0]
 804e6ba:	f00d f831 	bl	805b720 <vl53l5_get_device_parameters>
 804e6be:	f8c7 05cc 	str.w	r0, [r7, #1484]	; 0x5cc
                                   _num_cal_grid_blocks);
  if (status < STATUS_OK) {
 804e6c2:	f8d7 35cc 	ldr.w	r3, [r7, #1484]	; 0x5cc
 804e6c6:	2b00      	cmp	r3, #0
 804e6c8:	da05      	bge.n	804e6d6 <save_cal_data+0x262>
    printf("Getting calibration data failed: %d\r\n", (int)status);
 804e6ca:	f8d7 15cc 	ldr.w	r1, [r7, #1484]	; 0x5cc
 804e6ce:	4807      	ldr	r0, [pc, #28]	; (804e6ec <save_cal_data+0x278>)
 804e6d0:	f012 f950 	bl	8060974 <iprintf>
    goto exit;
 804e6d4:	e10a      	b.n	804e8ec <save_cal_data+0x478>
  } else
    printf("Calibration data received \r\n");
 804e6d6:	4806      	ldr	r0, [pc, #24]	; (804e6f0 <save_cal_data+0x27c>)
 804e6d8:	f012 f9e8 	bl	8060aac <puts>
  /* The data is available in the comms buffer. How the data is then
     stored is customer specific.  The last 4 bytes of data are not required
     and should be removed [00, 00, 00, 0f].
   */

  for (i = 3; i < VL53L5_COMMS_BUFF_COUNT(pdev) - 4; i += 4) {
 804e6dc:	2303      	movs	r3, #3
 804e6de:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 804e6e2:	e09c      	b.n	804e81e <save_cal_data+0x3aa>
 804e6e4:	20007c68 	.word	0x20007c68
 804e6e8:	20007c5c 	.word	0x20007c5c
 804e6ec:	08066930 	.word	0x08066930
 804e6f0:	08066958 	.word	0x08066958
 804e6f4:	2001c318 	.word	0x2001c318
 804e6f8:	08066974 	.word	0x08066974
 804e6fc:	20008538 	.word	0x20008538
 804e700:	08066990 	.word	0x08066990
 804e704:	080669ac 	.word	0x080669ac
 804e708:	080669cc 	.word	0x080669cc
 804e70c:	080669e0 	.word	0x080669e0
 804e710:	080669e4 	.word	0x080669e4
 804e714:	08066a18 	.word	0x08066a18
 804e718:	08066a4c 	.word	0x08066a4c
 804e71c:	08066a80 	.word	0x08066a80
 804e720:	08066abc 	.word	0x08066abc
 804e724:	08066af8 	.word	0x08066af8
 804e728:	08066b28 	.word	0x08066b28
 804e72c:	08066b58 	.word	0x08066b58
 804e730:	08066b88 	.word	0x08066b88
 804e734:	08066bb0 	.word	0x08066bb0
 804e738:	20007ca8 	.word	0x20007ca8
 804e73c:	20007c6c 	.word	0x20007c6c
    printf(fptr, "%02x, %02x, %02x, %02x \n", VL53L5_COMMS_BUFF(pdev)[i - 3],
 804e740:	4b6e      	ldr	r3, [pc, #440]	; (804e8fc <save_cal_data+0x488>)
 804e742:	6818      	ldr	r0, [r3, #0]
 804e744:	1d3b      	adds	r3, r7, #4
 804e746:	681b      	ldr	r3, [r3, #0]
 804e748:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 804e74a:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 804e74e:	3b03      	subs	r3, #3
 804e750:	4413      	add	r3, r2
 804e752:	781b      	ldrb	r3, [r3, #0]
 804e754:	461c      	mov	r4, r3
           VL53L5_COMMS_BUFF(pdev)[i - 2],
 804e756:	1d3b      	adds	r3, r7, #4
 804e758:	681b      	ldr	r3, [r3, #0]
 804e75a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 804e75c:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 804e760:	3b02      	subs	r3, #2
 804e762:	4413      	add	r3, r2
 804e764:	781b      	ldrb	r3, [r3, #0]
    printf(fptr, "%02x, %02x, %02x, %02x \n", VL53L5_COMMS_BUFF(pdev)[i - 3],
 804e766:	461d      	mov	r5, r3
           VL53L5_COMMS_BUFF(pdev)[i - 1], VL53L5_COMMS_BUFF(pdev)[i]);
 804e768:	1d3b      	adds	r3, r7, #4
 804e76a:	681b      	ldr	r3, [r3, #0]
 804e76c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 804e76e:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 804e772:	3b01      	subs	r3, #1
 804e774:	4413      	add	r3, r2
 804e776:	781b      	ldrb	r3, [r3, #0]
    printf(fptr, "%02x, %02x, %02x, %02x \n", VL53L5_COMMS_BUFF(pdev)[i - 3],
 804e778:	4619      	mov	r1, r3
           VL53L5_COMMS_BUFF(pdev)[i - 1], VL53L5_COMMS_BUFF(pdev)[i]);
 804e77a:	1d3b      	adds	r3, r7, #4
 804e77c:	681b      	ldr	r3, [r3, #0]
 804e77e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 804e780:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 804e784:	4413      	add	r3, r2
 804e786:	781b      	ldrb	r3, [r3, #0]
    printf(fptr, "%02x, %02x, %02x, %02x \n", VL53L5_COMMS_BUFF(pdev)[i - 3],
 804e788:	9301      	str	r3, [sp, #4]
 804e78a:	9100      	str	r1, [sp, #0]
 804e78c:	462b      	mov	r3, r5
 804e78e:	4622      	mov	r2, r4
 804e790:	495b      	ldr	r1, [pc, #364]	; (804e900 <save_cal_data+0x48c>)
 804e792:	f012 f8ef 	bl	8060974 <iprintf>
    mtof_cali_data.grid_cali_data[i - 3] = VL53L5_COMMS_BUFF(pdev)[i - 3];
 804e796:	1d3b      	adds	r3, r7, #4
 804e798:	681b      	ldr	r3, [r3, #0]
 804e79a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 804e79c:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 804e7a0:	3b03      	subs	r3, #3
 804e7a2:	441a      	add	r2, r3
 804e7a4:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 804e7a8:	3b03      	subs	r3, #3
 804e7aa:	7811      	ldrb	r1, [r2, #0]
 804e7ac:	4a55      	ldr	r2, [pc, #340]	; (804e904 <save_cal_data+0x490>)
 804e7ae:	4413      	add	r3, r2
 804e7b0:	460a      	mov	r2, r1
 804e7b2:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
    mtof_cali_data.grid_cali_data[i - 2] = VL53L5_COMMS_BUFF(pdev)[i - 2];
 804e7b6:	1d3b      	adds	r3, r7, #4
 804e7b8:	681b      	ldr	r3, [r3, #0]
 804e7ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 804e7bc:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 804e7c0:	3b02      	subs	r3, #2
 804e7c2:	441a      	add	r2, r3
 804e7c4:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 804e7c8:	3b02      	subs	r3, #2
 804e7ca:	7811      	ldrb	r1, [r2, #0]
 804e7cc:	4a4d      	ldr	r2, [pc, #308]	; (804e904 <save_cal_data+0x490>)
 804e7ce:	4413      	add	r3, r2
 804e7d0:	460a      	mov	r2, r1
 804e7d2:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
    mtof_cali_data.grid_cali_data[i - 1] = VL53L5_COMMS_BUFF(pdev)[i - 1];
 804e7d6:	1d3b      	adds	r3, r7, #4
 804e7d8:	681b      	ldr	r3, [r3, #0]
 804e7da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 804e7dc:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 804e7e0:	3b01      	subs	r3, #1
 804e7e2:	441a      	add	r2, r3
 804e7e4:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 804e7e8:	3b01      	subs	r3, #1
 804e7ea:	7811      	ldrb	r1, [r2, #0]
 804e7ec:	4a45      	ldr	r2, [pc, #276]	; (804e904 <save_cal_data+0x490>)
 804e7ee:	4413      	add	r3, r2
 804e7f0:	460a      	mov	r2, r1
 804e7f2:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
    mtof_cali_data.grid_cali_data[i] = VL53L5_COMMS_BUFF(pdev)[i];
 804e7f6:	1d3b      	adds	r3, r7, #4
 804e7f8:	681b      	ldr	r3, [r3, #0]
 804e7fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 804e7fc:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 804e800:	4413      	add	r3, r2
 804e802:	7819      	ldrb	r1, [r3, #0]
 804e804:	4a3f      	ldr	r2, [pc, #252]	; (804e904 <save_cal_data+0x490>)
 804e806:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 804e80a:	4413      	add	r3, r2
 804e80c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 804e810:	460a      	mov	r2, r1
 804e812:	701a      	strb	r2, [r3, #0]
  for (i = 3; i < VL53L5_COMMS_BUFF_COUNT(pdev) - 4; i += 4) {
 804e814:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 804e818:	3304      	adds	r3, #4
 804e81a:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 804e81e:	1d3b      	adds	r3, r7, #4
 804e820:	681b      	ldr	r3, [r3, #0]
 804e822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804e824:	1f1a      	subs	r2, r3, #4
 804e826:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 804e82a:	429a      	cmp	r2, r3
 804e82c:	d888      	bhi.n	804e740 <save_cal_data+0x2cc>
  }
  printf("Decoding calibration data \r\n");
 804e82e:	4836      	ldr	r0, [pc, #216]	; (804e908 <save_cal_data+0x494>)
 804e830:	f012 f93c 	bl	8060aac <puts>
  status = vl53l5_decode_calibration_data(pdev,
 804e834:	1d3b      	adds	r3, r7, #4
 804e836:	681b      	ldr	r3, [r3, #0]
 804e838:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 804e83a:	1d3b      	adds	r3, r7, #4
 804e83c:	681b      	ldr	r3, [r3, #0]
 804e83e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804e840:	f107 0108 	add.w	r1, r7, #8
 804e844:	1d38      	adds	r0, r7, #4
 804e846:	6800      	ldr	r0, [r0, #0]
 804e848:	f00c fb1f 	bl	805ae8a <vl53l5_decode_calibration_data>
 804e84c:	f8c7 05cc 	str.w	r0, [r7, #1484]	; 0x5cc
                                          &cal_data,
                                          VL53L5_COMMS_BUFF(pdev),
                                          VL53L5_COMMS_BUFF_COUNT(pdev));

  if (status != STATUS_OK) {
 804e850:	f8d7 35cc 	ldr.w	r3, [r7, #1484]	; 0x5cc
 804e854:	2b00      	cmp	r3, #0
 804e856:	d005      	beq.n	804e864 <save_cal_data+0x3f0>
    printf("Decode calibration failed: %d\n", status);
 804e858:	f8d7 15cc 	ldr.w	r1, [r7, #1484]	; 0x5cc
 804e85c:	482b      	ldr	r0, [pc, #172]	; (804e90c <save_cal_data+0x498>)
 804e85e:	f012 f889 	bl	8060974 <iprintf>
    goto exit;
 804e862:	e043      	b.n	804e8ec <save_cal_data+0x478>
  }

  printf("\n----- Calibration xtalk grid -----\n");
 804e864:	482a      	ldr	r0, [pc, #168]	; (804e910 <save_cal_data+0x49c>)
 804e866:	f012 f921 	bl	8060aac <puts>
  uint32_t max_cross_talk = 0;
 804e86a:	2300      	movs	r3, #0
 804e86c:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
  for (j = 0; j < 64; j++) {
 804e870:	2300      	movs	r3, #0
 804e872:	f8c7 35d0 	str.w	r3, [r7, #1488]	; 0x5d0
 804e876:	e030      	b.n	804e8da <save_cal_data+0x466>
    if (cal_data.core.pxtalk_grid_rate.cal__grid_data__rate_kcps_per_spad[j] /
 804e878:	f107 0308 	add.w	r3, r7, #8
 804e87c:	f8d7 25d0 	ldr.w	r2, [r7, #1488]	; 0x5d0
 804e880:	329c      	adds	r2, #156	; 0x9c
 804e882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804e886:	0adb      	lsrs	r3, r3, #11
 804e888:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 804e88c:	429a      	cmp	r2, r3
 804e88e:	d209      	bcs.n	804e8a4 <save_cal_data+0x430>
        2048 > max_cross_talk)
      max_cross_talk =
          cal_data.core.pxtalk_grid_rate.cal__grid_data__rate_kcps_per_spad[j] /
 804e890:	f107 0308 	add.w	r3, r7, #8
 804e894:	f8d7 25d0 	ldr.w	r2, [r7, #1488]	; 0x5d0
 804e898:	329c      	adds	r2, #156	; 0x9c
 804e89a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
      max_cross_talk =
 804e89e:	0adb      	lsrs	r3, r3, #11
 804e8a0:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
          2048;
    printf("%4x,",
           cal_data.core.pxtalk_grid_rate.
           cal__grid_data__rate_kcps_per_spad[j] / 2048);
 804e8a4:	f107 0308 	add.w	r3, r7, #8
 804e8a8:	f8d7 25d0 	ldr.w	r2, [r7, #1488]	; 0x5d0
 804e8ac:	329c      	adds	r2, #156	; 0x9c
 804e8ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    printf("%4x,",
 804e8b2:	0adb      	lsrs	r3, r3, #11
 804e8b4:	4619      	mov	r1, r3
 804e8b6:	4817      	ldr	r0, [pc, #92]	; (804e914 <save_cal_data+0x4a0>)
 804e8b8:	f012 f85c 	bl	8060974 <iprintf>
    if ((j + 1) % 8 == 0)
 804e8bc:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	; 0x5d0
 804e8c0:	3301      	adds	r3, #1
 804e8c2:	f003 0307 	and.w	r3, r3, #7
 804e8c6:	2b00      	cmp	r3, #0
 804e8c8:	d102      	bne.n	804e8d0 <save_cal_data+0x45c>
      printf("\n");
 804e8ca:	200a      	movs	r0, #10
 804e8cc:	f012 f86a 	bl	80609a4 <putchar>
  for (j = 0; j < 64; j++) {
 804e8d0:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	; 0x5d0
 804e8d4:	3301      	adds	r3, #1
 804e8d6:	f8c7 35d0 	str.w	r3, [r7, #1488]	; 0x5d0
 804e8da:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	; 0x5d0
 804e8de:	2b3f      	cmp	r3, #63	; 0x3f
 804e8e0:	ddca      	ble.n	804e878 <save_cal_data+0x404>
  }
  mtof_cali_data.max_cross_talk = max_cross_talk;
 804e8e2:	4a08      	ldr	r2, [pc, #32]	; (804e904 <save_cal_data+0x490>)
 804e8e4:	f8d7 35c8 	ldr.w	r3, [r7, #1480]	; 0x5c8
 804e8e8:	f8c2 3394 	str.w	r3, [r2, #916]	; 0x394
exit:
  return status;
 804e8ec:	f8d7 35cc 	ldr.w	r3, [r7, #1484]	; 0x5cc
}
 804e8f0:	4618      	mov	r0, r3
 804e8f2:	f507 67bb 	add.w	r7, r7, #1496	; 0x5d8
 804e8f6:	46bd      	mov	sp, r7
 804e8f8:	bdb0      	pop	{r4, r5, r7, pc}
 804e8fa:	bf00      	nop
 804e8fc:	2001c318 	.word	0x2001c318
 804e900:	08066974 	.word	0x08066974
 804e904:	20008538 	.word	0x20008538
 804e908:	08066990 	.word	0x08066990
 804e90c:	080669ac 	.word	0x080669ac
 804e910:	08066bc0 	.word	0x08066bc0
 804e914:	08066be4 	.word	0x08066be4

0804e918 <load_cali_to_dev>:

int load_cali_to_dev(struct vl53l5_dev_handle_t *pdev)
{
 804e918:	b580      	push	{r7, lr}
 804e91a:	b084      	sub	sp, #16
 804e91c:	af00      	add	r7, sp, #0
 804e91e:	6078      	str	r0, [r7, #4]
  int32_t status = STATUS_OK;
 804e920:	2300      	movs	r3, #0
 804e922:	60fb      	str	r3, [r7, #12]
  if (mtof_cali_data.max_cross_talk != 0) {
 804e924:	4b19      	ldr	r3, [pc, #100]	; (804e98c <load_cali_to_dev+0x74>)
 804e926:	f8d3 3394 	ldr.w	r3, [r3, #916]	; 0x394
 804e92a:	2b00      	cmp	r3, #0
 804e92c:	d021      	beq.n	804e972 <load_cali_to_dev+0x5a>
    status =
        vl53l5_set_device_parameters(pdev, mtof_cali_data.shape_cali_data, 316);
 804e92e:	f44f 729e 	mov.w	r2, #316	; 0x13c
 804e932:	4916      	ldr	r1, [pc, #88]	; (804e98c <load_cali_to_dev+0x74>)
 804e934:	6878      	ldr	r0, [r7, #4]
 804e936:	f00c ff21 	bl	805b77c <vl53l5_set_device_parameters>
 804e93a:	60f8      	str	r0, [r7, #12]
    if (status < STATUS_OK) {
 804e93c:	68fb      	ldr	r3, [r7, #12]
 804e93e:	2b00      	cmp	r3, #0
 804e940:	da06      	bge.n	804e950 <load_cali_to_dev+0x38>
      printf("Set shape cal data failed %d\n", status);
 804e942:	68f9      	ldr	r1, [r7, #12]
 804e944:	4812      	ldr	r0, [pc, #72]	; (804e990 <load_cali_to_dev+0x78>)
 804e946:	f012 f815 	bl	8060974 <iprintf>
      return -1;
 804e94a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 804e94e:	e018      	b.n	804e982 <load_cali_to_dev+0x6a>
    }
    status =
        vl53l5_set_device_parameters(pdev, mtof_cali_data.grid_cali_data, 600);
 804e950:	f44f 7216 	mov.w	r2, #600	; 0x258
 804e954:	490f      	ldr	r1, [pc, #60]	; (804e994 <load_cali_to_dev+0x7c>)
 804e956:	6878      	ldr	r0, [r7, #4]
 804e958:	f00c ff10 	bl	805b77c <vl53l5_set_device_parameters>
 804e95c:	60f8      	str	r0, [r7, #12]
    if (status < STATUS_OK) {
 804e95e:	68fb      	ldr	r3, [r7, #12]
 804e960:	2b00      	cmp	r3, #0
 804e962:	da0d      	bge.n	804e980 <load_cali_to_dev+0x68>
      printf("Set grid cal data failed %d\n", status);
 804e964:	68f9      	ldr	r1, [r7, #12]
 804e966:	480c      	ldr	r0, [pc, #48]	; (804e998 <load_cali_to_dev+0x80>)
 804e968:	f012 f804 	bl	8060974 <iprintf>
      return -1;
 804e96c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 804e970:	e007      	b.n	804e982 <load_cali_to_dev+0x6a>
    }
  } else
    printf("mtof_cali_data.max_cross_talk = %u", mtof_cali_data.max_cross_talk);
 804e972:	4b06      	ldr	r3, [pc, #24]	; (804e98c <load_cali_to_dev+0x74>)
 804e974:	f8d3 3394 	ldr.w	r3, [r3, #916]	; 0x394
 804e978:	4619      	mov	r1, r3
 804e97a:	4808      	ldr	r0, [pc, #32]	; (804e99c <load_cali_to_dev+0x84>)
 804e97c:	f011 fffa 	bl	8060974 <iprintf>
  return 0;
 804e980:	2300      	movs	r3, #0
}
 804e982:	4618      	mov	r0, r3
 804e984:	3710      	adds	r7, #16
 804e986:	46bd      	mov	sp, r7
 804e988:	bd80      	pop	{r7, pc}
 804e98a:	bf00      	nop
 804e98c:	20008538 	.word	0x20008538
 804e990:	08066bec 	.word	0x08066bec
 804e994:	20008674 	.word	0x20008674
 804e998:	08066c0c 	.word	0x08066c0c
 804e99c:	08066c2c 	.word	0x08066c2c

0804e9a0 <tof_platform_write>:
 *
 */

static int32_t tof_platform_write(void *handle, uint16_t reg, uint8_t * bufp,
                                  uint16_t len)
{
 804e9a0:	b580      	push	{r7, lr}
 804e9a2:	b086      	sub	sp, #24
 804e9a4:	af02      	add	r7, sp, #8
 804e9a6:	60f8      	str	r0, [r7, #12]
 804e9a8:	607a      	str	r2, [r7, #4]
 804e9aa:	461a      	mov	r2, r3
 804e9ac:	460b      	mov	r3, r1
 804e9ae:	817b      	strh	r3, [r7, #10]
 804e9b0:	4613      	mov	r3, r2
 804e9b2:	813b      	strh	r3, [r7, #8]
  if (handle == &tof_init_parms->spi_handle) {
 804e9b4:	4b0b      	ldr	r3, [pc, #44]	; (804e9e4 <tof_platform_write+0x44>)
 804e9b6:	681b      	ldr	r3, [r3, #0]
 804e9b8:	339c      	adds	r3, #156	; 0x9c
 804e9ba:	68fa      	ldr	r2, [r7, #12]
 804e9bc:	429a      	cmp	r2, r3
 804e9be:	d10c      	bne.n	804e9da <tof_platform_write+0x3a>
    BSP_SPI_16M_Write_Sequence(handle, dev.tof_cs_gpio_port, dev.tof_cs_pin, reg, bufp, len);
 804e9c0:	4b09      	ldr	r3, [pc, #36]	; (804e9e8 <tof_platform_write+0x48>)
 804e9c2:	6959      	ldr	r1, [r3, #20]
 804e9c4:	4b08      	ldr	r3, [pc, #32]	; (804e9e8 <tof_platform_write+0x48>)
 804e9c6:	699a      	ldr	r2, [r3, #24]
 804e9c8:	893b      	ldrh	r3, [r7, #8]
 804e9ca:	8978      	ldrh	r0, [r7, #10]
 804e9cc:	9301      	str	r3, [sp, #4]
 804e9ce:	687b      	ldr	r3, [r7, #4]
 804e9d0:	9300      	str	r3, [sp, #0]
 804e9d2:	4603      	mov	r3, r0
 804e9d4:	68f8      	ldr	r0, [r7, #12]
 804e9d6:	f00f ff92 	bl	805e8fe <BSP_SPI_16M_Write_Sequence>
  }

  return 0;
 804e9da:	2300      	movs	r3, #0
}
 804e9dc:	4618      	mov	r0, r3
 804e9de:	3710      	adds	r7, #16
 804e9e0:	46bd      	mov	sp, r7
 804e9e2:	bd80      	pop	{r7, pc}
 804e9e4:	200084c4 	.word	0x200084c4
 804e9e8:	200084cc 	.word	0x200084cc

0804e9ec <tof_platform_read>:
 *
 */

static int32_t tof_platform_read(void *handle, uint16_t reg, uint8_t * bufp,
                                 uint16_t len)
{
 804e9ec:	b580      	push	{r7, lr}
 804e9ee:	b086      	sub	sp, #24
 804e9f0:	af02      	add	r7, sp, #8
 804e9f2:	60f8      	str	r0, [r7, #12]
 804e9f4:	607a      	str	r2, [r7, #4]
 804e9f6:	461a      	mov	r2, r3
 804e9f8:	460b      	mov	r3, r1
 804e9fa:	817b      	strh	r3, [r7, #10]
 804e9fc:	4613      	mov	r3, r2
 804e9fe:	813b      	strh	r3, [r7, #8]
  if (handle == &tof_init_parms->spi_handle) {
 804ea00:	4b0b      	ldr	r3, [pc, #44]	; (804ea30 <tof_platform_read+0x44>)
 804ea02:	681b      	ldr	r3, [r3, #0]
 804ea04:	339c      	adds	r3, #156	; 0x9c
 804ea06:	68fa      	ldr	r2, [r7, #12]
 804ea08:	429a      	cmp	r2, r3
 804ea0a:	d10c      	bne.n	804ea26 <tof_platform_read+0x3a>
    BSP_SPI_16M_Read_Sequence(handle, dev.tof_cs_gpio_port, dev.tof_cs_pin, reg, bufp, len);
 804ea0c:	4b09      	ldr	r3, [pc, #36]	; (804ea34 <tof_platform_read+0x48>)
 804ea0e:	6959      	ldr	r1, [r3, #20]
 804ea10:	4b08      	ldr	r3, [pc, #32]	; (804ea34 <tof_platform_read+0x48>)
 804ea12:	699a      	ldr	r2, [r3, #24]
 804ea14:	893b      	ldrh	r3, [r7, #8]
 804ea16:	8978      	ldrh	r0, [r7, #10]
 804ea18:	9301      	str	r3, [sp, #4]
 804ea1a:	687b      	ldr	r3, [r7, #4]
 804ea1c:	9300      	str	r3, [sp, #0]
 804ea1e:	4603      	mov	r3, r0
 804ea20:	68f8      	ldr	r0, [r7, #12]
 804ea22:	f00f ffb8 	bl	805e996 <BSP_SPI_16M_Read_Sequence>
  }

  return 0;
 804ea26:	2300      	movs	r3, #0
}
 804ea28:	4618      	mov	r0, r3
 804ea2a:	3710      	adds	r7, #16
 804ea2c:	46bd      	mov	sp, r7
 804ea2e:	bd80      	pop	{r7, pc}
 804ea30:	200084c4 	.word	0x200084c4
 804ea34:	200084cc 	.word	0x200084cc

0804ea38 <tof_get_range_data>:

static void tof_get_range_data(struct vl53l5_dev_handle_t *pdev)
{
 804ea38:	b580      	push	{r7, lr}
 804ea3a:	b084      	sub	sp, #16
 804ea3c:	af00      	add	r7, sp, #0
 804ea3e:	6078      	str	r0, [r7, #4]
  int32_t status = ranging_loop(pdev);
 804ea40:	6878      	ldr	r0, [r7, #4]
 804ea42:	f000 fbf3 	bl	804f22c <ranging_loop>
 804ea46:	60f8      	str	r0, [r7, #12]
  if (status < STATUS_OK) {
 804ea48:	68fb      	ldr	r3, [r7, #12]
 804ea4a:	2b00      	cmp	r3, #0
 804ea4c:	da03      	bge.n	804ea56 <tof_get_range_data+0x1e>
    printf("ranging loop failed: %d\r\n", (int)status);
 804ea4e:	68f9      	ldr	r1, [r7, #12]
 804ea50:	4803      	ldr	r0, [pc, #12]	; (804ea60 <tof_get_range_data+0x28>)
 804ea52:	f011 ff8f 	bl	8060974 <iprintf>
  }
}
 804ea56:	bf00      	nop
 804ea58:	3710      	adds	r7, #16
 804ea5a:	46bd      	mov	sp, r7
 804ea5c:	bd80      	pop	{r7, pc}
 804ea5e:	bf00      	nop
 804ea60:	08066c50 	.word	0x08066c50

0804ea64 <tof_init>:
/*
 * @brief  platform specific initialization (platform dependent)
 */

int tof_init(void *para, void *para2)
{
 804ea64:	b580      	push	{r7, lr}
 804ea66:	b084      	sub	sp, #16
 804ea68:	af00      	add	r7, sp, #0
 804ea6a:	6078      	str	r0, [r7, #4]
 804ea6c:	6039      	str	r1, [r7, #0]

  tof_init_parms = (platform_prams *) para;
 804ea6e:	4a35      	ldr	r2, [pc, #212]	; (804eb44 <tof_init+0xe0>)
 804ea70:	687b      	ldr	r3, [r7, #4]
 804ea72:	6013      	str	r3, [r2, #0]
  /* Initialize mems driver interface */
  tof_dev_ctx.write_reg = tof_platform_write;
 804ea74:	4b34      	ldr	r3, [pc, #208]	; (804eb48 <tof_init+0xe4>)
 804ea76:	4a35      	ldr	r2, [pc, #212]	; (804eb4c <tof_init+0xe8>)
 804ea78:	601a      	str	r2, [r3, #0]
  tof_dev_ctx.read_reg = tof_platform_read;
 804ea7a:	4b33      	ldr	r3, [pc, #204]	; (804eb48 <tof_init+0xe4>)
 804ea7c:	4a34      	ldr	r2, [pc, #208]	; (804eb50 <tof_init+0xec>)
 804ea7e:	605a      	str	r2, [r3, #4]
  dev.spi_handle = &tof_init_parms->spi_handle;
 804ea80:	4b30      	ldr	r3, [pc, #192]	; (804eb44 <tof_init+0xe0>)
 804ea82:	681b      	ldr	r3, [r3, #0]
 804ea84:	339c      	adds	r3, #156	; 0x9c
 804ea86:	4a33      	ldr	r2, [pc, #204]	; (804eb54 <tof_init+0xf0>)
 804ea88:	60d3      	str	r3, [r2, #12]
  dev.timer_handle = sensor_get_timestamp;
 804ea8a:	4b32      	ldr	r3, [pc, #200]	; (804eb54 <tof_init+0xf0>)
 804ea8c:	4a32      	ldr	r2, [pc, #200]	; (804eb58 <tof_init+0xf4>)
 804ea8e:	611a      	str	r2, [r3, #16]
  dev.tof_cs_gpio_port = tof_init_parms->tof_cs_gpio_port;
 804ea90:	4b2c      	ldr	r3, [pc, #176]	; (804eb44 <tof_init+0xe0>)
 804ea92:	681b      	ldr	r3, [r3, #0]
 804ea94:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 804ea98:	4a2e      	ldr	r2, [pc, #184]	; (804eb54 <tof_init+0xf0>)
 804ea9a:	6153      	str	r3, [r2, #20]
  dev.tof_cs_pin = &tof_init_parms->tof_cs_pin;
 804ea9c:	4b29      	ldr	r3, [pc, #164]	; (804eb44 <tof_init+0xe0>)
 804ea9e:	681b      	ldr	r3, [r3, #0]
 804eaa0:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 804eaa4:	4a2b      	ldr	r2, [pc, #172]	; (804eb54 <tof_init+0xf0>)
 804eaa6:	6193      	str	r3, [r2, #24]
  /*power on */
  HAL_GPIO_WritePin(TOF_EN_GPIO_Port, TOF_EN_Pin, GPIO_PIN_SET);
 804eaa8:	2201      	movs	r2, #1
 804eaaa:	2120      	movs	r1, #32
 804eaac:	482b      	ldr	r0, [pc, #172]	; (804eb5c <tof_init+0xf8>)
 804eaae:	f002 fdeb 	bl	8051688 <HAL_GPIO_WritePin>
  osDelay(1);
 804eab2:	2001      	movs	r0, #1
 804eab4:	f007 fb21 	bl	80560fa <osDelay>
  /*set cs high by default */
  HAL_GPIO_WritePin(TOF_CS_GPIO_Port, TOF_CS_Pin, GPIO_PIN_SET);
 804eab8:	2201      	movs	r2, #1
 804eaba:	2110      	movs	r1, #16
 804eabc:	4828      	ldr	r0, [pc, #160]	; (804eb60 <tof_init+0xfc>)
 804eabe:	f002 fde3 	bl	8051688 <HAL_GPIO_WritePin>
  osDelay(1);
 804eac2:	2001      	movs	r0, #1
 804eac4:	f007 fb19 	bl	80560fa <osDelay>
  //uint8_t status = HAL_GPIO_ReadPin(TOF_CS_GPIO_Port, TOF_CS_Pin);
  //printf("TOF cs status: %u \r\n", status);

  uint8_t current = 0x0;
 804eac8:	2300      	movs	r3, #0
 804eaca:	73fb      	strb	r3, [r7, #15]

  printf("TOF current page: %u \r\n", current);
 804eacc:	7bfb      	ldrb	r3, [r7, #15]
 804eace:	4619      	mov	r1, r3
 804ead0:	4824      	ldr	r0, [pc, #144]	; (804eb64 <tof_init+0x100>)
 804ead2:	f011 ff4f 	bl	8060974 <iprintf>
  tof_platform_write(dev.spi_handle, (uint16_t) INITIAL_PAGE_ID,
 804ead6:	4b1f      	ldr	r3, [pc, #124]	; (804eb54 <tof_init+0xf0>)
 804ead8:	68d8      	ldr	r0, [r3, #12]
 804eada:	f107 020f 	add.w	r2, r7, #15
 804eade:	2301      	movs	r3, #1
 804eae0:	f647 71ff 	movw	r1, #32767	; 0x7fff
 804eae4:	f7ff ff5c 	bl	804e9a0 <tof_platform_write>
                     &current, 1);

  /* Check ID */
  uint8_t id_0 = 0, id_1 = 0;
 804eae8:	2300      	movs	r3, #0
 804eaea:	73bb      	strb	r3, [r7, #14]
 804eaec:	2300      	movs	r3, #0
 804eaee:	737b      	strb	r3, [r7, #13]
  tof_platform_read(dev.spi_handle, (uint16_t) TOF_DEVICE_ID, &id_0, 1);
 804eaf0:	4b18      	ldr	r3, [pc, #96]	; (804eb54 <tof_init+0xf0>)
 804eaf2:	68d8      	ldr	r0, [r3, #12]
 804eaf4:	f107 020e 	add.w	r2, r7, #14
 804eaf8:	2301      	movs	r3, #1
 804eafa:	2100      	movs	r1, #0
 804eafc:	f7ff ff76 	bl	804e9ec <tof_platform_read>

  tof_platform_read(dev.spi_handle, (uint16_t) TOF_REVISION_ID, &id_1, 1);
 804eb00:	4b14      	ldr	r3, [pc, #80]	; (804eb54 <tof_init+0xf0>)
 804eb02:	68d8      	ldr	r0, [r3, #12]
 804eb04:	f107 020d 	add.w	r2, r7, #13
 804eb08:	2301      	movs	r3, #1
 804eb0a:	2101      	movs	r1, #1
 804eb0c:	f7ff ff6e 	bl	804e9ec <tof_platform_read>

  printf("TOF whoamI: 0x%x 0x%x %p\r\n", id_0, id_1, dev.spi_handle);
 804eb10:	7bbb      	ldrb	r3, [r7, #14]
 804eb12:	4619      	mov	r1, r3
 804eb14:	7b7b      	ldrb	r3, [r7, #13]
 804eb16:	461a      	mov	r2, r3
 804eb18:	4b0e      	ldr	r3, [pc, #56]	; (804eb54 <tof_init+0xf0>)
 804eb1a:	68db      	ldr	r3, [r3, #12]
 804eb1c:	4812      	ldr	r0, [pc, #72]	; (804eb68 <tof_init+0x104>)
 804eb1e:	f011 ff29 	bl	8060974 <iprintf>

  if (id_0 != TOF_DEVICE_ID_VALUE || id_1 != TOF_REVISION_ID_VALUE) {
 804eb22:	7bbb      	ldrb	r3, [r7, #14]
 804eb24:	2bf0      	cmp	r3, #240	; 0xf0
 804eb26:	d102      	bne.n	804eb2e <tof_init+0xca>
 804eb28:	7b7b      	ldrb	r3, [r7, #13]
 804eb2a:	2b02      	cmp	r3, #2
 804eb2c:	d005      	beq.n	804eb3a <tof_init+0xd6>
    printf("init failed for TOF!\r\n");
 804eb2e:	480f      	ldr	r0, [pc, #60]	; (804eb6c <tof_init+0x108>)
 804eb30:	f011 ffbc 	bl	8060aac <puts>
    return SENSOR_FAILED;
 804eb34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 804eb38:	e000      	b.n	804eb3c <tof_init+0xd8>
  }
  return SENSOR_SUCCESS;
 804eb3a:	2300      	movs	r3, #0
}
 804eb3c:	4618      	mov	r0, r3
 804eb3e:	3710      	adds	r7, #16
 804eb40:	46bd      	mov	sp, r7
 804eb42:	bd80      	pop	{r7, pc}
 804eb44:	200084c4 	.word	0x200084c4
 804eb48:	200084b8 	.word	0x200084b8
 804eb4c:	0804e9a1 	.word	0x0804e9a1
 804eb50:	0804e9ed 	.word	0x0804e9ed
 804eb54:	200084cc 	.word	0x200084cc
 804eb58:	0804d709 	.word	0x0804d709
 804eb5c:	40020800 	.word	0x40020800
 804eb60:	40020000 	.word	0x40020000
 804eb64:	08066c6c 	.word	0x08066c6c
 804eb68:	08066c84 	.word	0x08066c84
 804eb6c:	08066ca0 	.word	0x08066ca0

0804eb70 <tof_enable>:

static int32_t tof_enable()
{
 804eb70:	b580      	push	{r7, lr}
 804eb72:	b082      	sub	sp, #8
 804eb74:	af00      	add	r7, sp, #0
  int32_t status = 0;
 804eb76:	2300      	movs	r3, #0
 804eb78:	607b      	str	r3, [r7, #4]
  if (sensor_activate_count == 0) {
 804eb7a:	4b55      	ldr	r3, [pc, #340]	; (804ecd0 <tof_enable+0x160>)
 804eb7c:	781b      	ldrb	r3, [r3, #0]
 804eb7e:	2b00      	cmp	r3, #0
 804eb80:	d168      	bne.n	804ec54 <tof_enable+0xe4>
    tof_activated = true;
 804eb82:	4b54      	ldr	r3, [pc, #336]	; (804ecd4 <tof_enable+0x164>)
 804eb84:	2201      	movs	r2, #1
 804eb86:	701a      	strb	r2, [r3, #0]
    int32_t status = STATUS_OK;
 804eb88:	2300      	movs	r3, #0
 804eb8a:	603b      	str	r3, [r7, #0]

    /* Platform specific data: running in SPI mode */
    dev.comms_type = VL53L5_SPI;
 804eb8c:	4b52      	ldr	r3, [pc, #328]	; (804ecd8 <tof_enable+0x168>)
 804eb8e:	2201      	movs	r2, #1
 804eb90:	705a      	strb	r2, [r3, #1]

    /* set the fw buffer to be loaded into device RAM */
    printf("Setting up fw buffer.\r\n");
 804eb92:	4852      	ldr	r0, [pc, #328]	; (804ecdc <tof_enable+0x16c>)
 804eb94:	f011 ff8a 	bl	8060aac <puts>
    VL53L5_ASSIGN_FW_BUFF(&dev, (uint8_t *) _fw_buffer, _fw_buff_count);
 804eb98:	4b4f      	ldr	r3, [pc, #316]	; (804ecd8 <tof_enable+0x168>)
 804eb9a:	4a51      	ldr	r2, [pc, #324]	; (804ece0 <tof_enable+0x170>)
 804eb9c:	621a      	str	r2, [r3, #32]
 804eb9e:	4b51      	ldr	r3, [pc, #324]	; (804ece4 <tof_enable+0x174>)
 804eba0:	681b      	ldr	r3, [r3, #0]
 804eba2:	4a4d      	ldr	r2, [pc, #308]	; (804ecd8 <tof_enable+0x168>)
 804eba4:	6253      	str	r3, [r2, #36]	; 0x24

    /* Setup the comms buffer */
    VL53L5_ASSIGN_COMMS_BUFF(&dev, _comms_buffer, sizeof(_comms_buffer));
 804eba6:	4b4c      	ldr	r3, [pc, #304]	; (804ecd8 <tof_enable+0x168>)
 804eba8:	4a4f      	ldr	r2, [pc, #316]	; (804ece8 <tof_enable+0x178>)
 804ebaa:	629a      	str	r2, [r3, #40]	; 0x28
 804ebac:	4b4a      	ldr	r3, [pc, #296]	; (804ecd8 <tof_enable+0x168>)
 804ebae:	f240 728a 	movw	r2, #1930	; 0x78a
 804ebb2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Initialise platform and comms */
    printf("Initialising.\r\n");
 804ebb4:	484d      	ldr	r0, [pc, #308]	; (804ecec <tof_enable+0x17c>)
 804ebb6:	f011 ff79 	bl	8060aac <puts>
    status = vl53l5_platform_init(&dev);
 804ebba:	4847      	ldr	r0, [pc, #284]	; (804ecd8 <tof_enable+0x168>)
 804ebbc:	f010 f854 	bl	805ec68 <vl53l5_platform_init>
 804ebc0:	6038      	str	r0, [r7, #0]
    if (status < STATUS_OK) {
 804ebc2:	683b      	ldr	r3, [r7, #0]
 804ebc4:	2b00      	cmp	r3, #0
 804ebc6:	da04      	bge.n	804ebd2 <tof_enable+0x62>
      printf("Platform init failed: %d\r\n", status);
 804ebc8:	6839      	ldr	r1, [r7, #0]
 804ebca:	4849      	ldr	r0, [pc, #292]	; (804ecf0 <tof_enable+0x180>)
 804ebcc:	f011 fed2 	bl	8060974 <iprintf>
      goto exit;
 804ebd0:	e048      	b.n	804ec64 <tof_enable+0xf4>
    }
    // -------------------- set the high power mode ----------------
    // move the device in HP whatever its state is high power
    // already or low power with comms. But in case it has been set in LP
    // at the latest termination stage this call is mandatory
    dev.host_dev.power_state = VL53L5_POWER_STATE_LP_IDLE_COMMS;
 804ebd2:	4b41      	ldr	r3, [pc, #260]	; (804ecd8 <tof_enable+0x168>)
 804ebd4:	2203      	movs	r2, #3
 804ebd6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    status = vl53l5_set_power_mode(&dev, VL53L5_POWER_STATE_HP_IDLE);
 804ebda:	2104      	movs	r1, #4
 804ebdc:	483e      	ldr	r0, [pc, #248]	; (804ecd8 <tof_enable+0x168>)
 804ebde:	f00c fe27 	bl	805b830 <vl53l5_set_power_mode>
 804ebe2:	6038      	str	r0, [r7, #0]
    if (status < STATUS_OK) {
 804ebe4:	683b      	ldr	r3, [r7, #0]
 804ebe6:	2b00      	cmp	r3, #0
 804ebe8:	da03      	bge.n	804ebf2 <tof_enable+0x82>
      printf
 804ebea:	4842      	ldr	r0, [pc, #264]	; (804ecf4 <tof_enable+0x184>)
 804ebec:	f011 ff5e 	bl	8060aac <puts>
          ("Could not put the device in High Power. Is it already powered up ?\n");
      goto exit;
 804ebf0:	e038      	b.n	804ec64 <tof_enable+0xf4>
    }
    /* Initialise device */
    status = vl53l5_init(&dev);
 804ebf2:	4839      	ldr	r0, [pc, #228]	; (804ecd8 <tof_enable+0x168>)
 804ebf4:	f00c fbfc 	bl	805b3f0 <vl53l5_init>
 804ebf8:	6038      	str	r0, [r7, #0]
    if (status < STATUS_OK) {
 804ebfa:	683b      	ldr	r3, [r7, #0]
 804ebfc:	2b00      	cmp	r3, #0
 804ebfe:	da04      	bge.n	804ec0a <tof_enable+0x9a>
      printf("Init failed: %d\r\n", status);
 804ec00:	6839      	ldr	r1, [r7, #0]
 804ec02:	483d      	ldr	r0, [pc, #244]	; (804ecf8 <tof_enable+0x188>)
 804ec04:	f011 feb6 	bl	8060974 <iprintf>
      goto exit;
 804ec08:	e02c      	b.n	804ec64 <tof_enable+0xf4>
    }
    status = load_cali_to_dev(&dev);
 804ec0a:	4833      	ldr	r0, [pc, #204]	; (804ecd8 <tof_enable+0x168>)
 804ec0c:	f7ff fe84 	bl	804e918 <load_cali_to_dev>
 804ec10:	6038      	str	r0, [r7, #0]
    if (status < STATUS_OK) {
 804ec12:	683b      	ldr	r3, [r7, #0]
 804ec14:	2b00      	cmp	r3, #0
 804ec16:	da04      	bge.n	804ec22 <tof_enable+0xb2>
      printf("load calidata to device failed: %d\r\n", status);
 804ec18:	6839      	ldr	r1, [r7, #0]
 804ec1a:	4838      	ldr	r0, [pc, #224]	; (804ecfc <tof_enable+0x18c>)
 804ec1c:	f011 feaa 	bl	8060974 <iprintf>
      goto exit;
 804ec20:	e020      	b.n	804ec64 <tof_enable+0xf4>
    }

    status = send_device_config(&dev);
 804ec22:	482d      	ldr	r0, [pc, #180]	; (804ecd8 <tof_enable+0x168>)
 804ec24:	f000 fad6 	bl	804f1d4 <send_device_config>
 804ec28:	6038      	str	r0, [r7, #0]
    if (status < STATUS_OK) {
 804ec2a:	683b      	ldr	r3, [r7, #0]
 804ec2c:	2b00      	cmp	r3, #0
 804ec2e:	da04      	bge.n	804ec3a <tof_enable+0xca>
      printf("setting config failed: %d\r\n", status);
 804ec30:	6839      	ldr	r1, [r7, #0]
 804ec32:	4833      	ldr	r0, [pc, #204]	; (804ed00 <tof_enable+0x190>)
 804ec34:	f011 fe9e 	bl	8060974 <iprintf>
      goto exit;
 804ec38:	e014      	b.n	804ec64 <tof_enable+0xf4>
    }
    status = vl53l5_start(&dev, NULL);
 804ec3a:	2100      	movs	r1, #0
 804ec3c:	4826      	ldr	r0, [pc, #152]	; (804ecd8 <tof_enable+0x168>)
 804ec3e:	f00c fc66 	bl	805b50e <vl53l5_start>
 804ec42:	6038      	str	r0, [r7, #0]

    if (status < STATUS_OK) {
 804ec44:	683b      	ldr	r3, [r7, #0]
 804ec46:	2b00      	cmp	r3, #0
 804ec48:	da04      	bge.n	804ec54 <tof_enable+0xe4>
      printf("Start failed: %d\r\n", status);
 804ec4a:	6839      	ldr	r1, [r7, #0]
 804ec4c:	482d      	ldr	r0, [pc, #180]	; (804ed04 <tof_enable+0x194>)
 804ec4e:	f011 fe91 	bl	8060974 <iprintf>
      goto exit;
 804ec52:	e007      	b.n	804ec64 <tof_enable+0xf4>
    }
  }
  sensor_activate_count++;
 804ec54:	4b1e      	ldr	r3, [pc, #120]	; (804ecd0 <tof_enable+0x160>)
 804ec56:	781b      	ldrb	r3, [r3, #0]
 804ec58:	3301      	adds	r3, #1
 804ec5a:	b2da      	uxtb	r2, r3
 804ec5c:	4b1c      	ldr	r3, [pc, #112]	; (804ecd0 <tof_enable+0x160>)
 804ec5e:	701a      	strb	r2, [r3, #0]

  return SENSOR_SUCCESS;
 804ec60:	2300      	movs	r3, #0
 804ec62:	e030      	b.n	804ecc6 <tof_enable+0x156>

exit:
  if (tof_activated) {
 804ec64:	4b1b      	ldr	r3, [pc, #108]	; (804ecd4 <tof_enable+0x164>)
 804ec66:	781b      	ldrb	r3, [r3, #0]
 804ec68:	2b00      	cmp	r3, #0
 804ec6a:	d02b      	beq.n	804ecc4 <tof_enable+0x154>
    if (status < STATUS_OK) {
 804ec6c:	687b      	ldr	r3, [r7, #4]
 804ec6e:	2b00      	cmp	r3, #0
 804ec70:	da08      	bge.n	804ec84 <tof_enable+0x114>
      status = vl53l5_read_device_error(&dev, status);
 804ec72:	6879      	ldr	r1, [r7, #4]
 804ec74:	4818      	ldr	r0, [pc, #96]	; (804ecd8 <tof_enable+0x168>)
 804ec76:	f00c fd22 	bl	805b6be <vl53l5_read_device_error>
 804ec7a:	6078      	str	r0, [r7, #4]
      printf("tof enable failed: vl53l5_read_device_error status %d\r\n",
 804ec7c:	6879      	ldr	r1, [r7, #4]
 804ec7e:	4822      	ldr	r0, [pc, #136]	; (804ed08 <tof_enable+0x198>)
 804ec80:	f011 fe78 	bl	8060974 <iprintf>
             status);
    }
    status = vl53l5_stop(&dev, NULL);
 804ec84:	2100      	movs	r1, #0
 804ec86:	4814      	ldr	r0, [pc, #80]	; (804ecd8 <tof_enable+0x168>)
 804ec88:	f00c fcb9 	bl	805b5fe <vl53l5_stop>
 804ec8c:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) {
 804ec8e:	687b      	ldr	r3, [r7, #4]
 804ec90:	2b00      	cmp	r3, #0
 804ec92:	da03      	bge.n	804ec9c <tof_enable+0x12c>
      printf("tof_enable failed vl53l5_stop failed: status %d\r\n", status);
 804ec94:	6879      	ldr	r1, [r7, #4]
 804ec96:	481d      	ldr	r0, [pc, #116]	; (804ed0c <tof_enable+0x19c>)
 804ec98:	f011 fe6c 	bl	8060974 <iprintf>
    }
    vl53l5_term(&dev);
 804ec9c:	480e      	ldr	r0, [pc, #56]	; (804ecd8 <tof_enable+0x168>)
 804ec9e:	f00c fc13 	bl	805b4c8 <vl53l5_term>
    if (status < STATUS_OK) {
 804eca2:	687b      	ldr	r3, [r7, #4]
 804eca4:	2b00      	cmp	r3, #0
 804eca6:	da03      	bge.n	804ecb0 <tof_enable+0x140>
      printf("tof_enable failed  vl53l5_term failed: status %d\r\n", status);
 804eca8:	6879      	ldr	r1, [r7, #4]
 804ecaa:	4819      	ldr	r0, [pc, #100]	; (804ed10 <tof_enable+0x1a0>)
 804ecac:	f011 fe62 	bl	8060974 <iprintf>
    }
    vl53l5_platform_terminate(&dev);
 804ecb0:	4809      	ldr	r0, [pc, #36]	; (804ecd8 <tof_enable+0x168>)
 804ecb2:	f010 f843 	bl	805ed3c <vl53l5_platform_terminate>
    if (status < STATUS_OK) {
 804ecb6:	687b      	ldr	r3, [r7, #4]
 804ecb8:	2b00      	cmp	r3, #0
 804ecba:	da03      	bge.n	804ecc4 <tof_enable+0x154>
      printf("tof_enable failed  platform term failed: status %d\r\n", status);
 804ecbc:	6879      	ldr	r1, [r7, #4]
 804ecbe:	4815      	ldr	r0, [pc, #84]	; (804ed14 <tof_enable+0x1a4>)
 804ecc0:	f011 fe58 	bl	8060974 <iprintf>
    }
  }

  return status;
 804ecc4:	687b      	ldr	r3, [r7, #4]
}
 804ecc6:	4618      	mov	r0, r3
 804ecc8:	3708      	adds	r7, #8
 804ecca:	46bd      	mov	sp, r7
 804eccc:	bd80      	pop	{r7, pc}
 804ecce:	bf00      	nop
 804ecd0:	200084c8 	.word	0x200084c8
 804ecd4:	200084c9 	.word	0x200084c9
 804ecd8:	200084cc 	.word	0x200084cc
 804ecdc:	08066cb8 	.word	0x08066cb8
 804ece0:	08067a70 	.word	0x08067a70
 804ece4:	20007c58 	.word	0x20007c58
 804ece8:	200088d0 	.word	0x200088d0
 804ecec:	08066cd0 	.word	0x08066cd0
 804ecf0:	08066ce0 	.word	0x08066ce0
 804ecf4:	08066cfc 	.word	0x08066cfc
 804ecf8:	08066d40 	.word	0x08066d40
 804ecfc:	08066d54 	.word	0x08066d54
 804ed00:	08066d7c 	.word	0x08066d7c
 804ed04:	0806688c 	.word	0x0806688c
 804ed08:	08066d98 	.word	0x08066d98
 804ed0c:	08066dd0 	.word	0x08066dd0
 804ed10:	08066e04 	.word	0x08066e04
 804ed14:	08066e38 	.word	0x08066e38

0804ed18 <tof_disable>:

static int32_t tof_disable()
{
 804ed18:	b580      	push	{r7, lr}
 804ed1a:	b082      	sub	sp, #8
 804ed1c:	af00      	add	r7, sp, #0
  int32_t status = 0;
 804ed1e:	2300      	movs	r3, #0
 804ed20:	607b      	str	r3, [r7, #4]
  sensor_activate_count--;
 804ed22:	4b21      	ldr	r3, [pc, #132]	; (804eda8 <tof_disable+0x90>)
 804ed24:	781b      	ldrb	r3, [r3, #0]
 804ed26:	3b01      	subs	r3, #1
 804ed28:	b2da      	uxtb	r2, r3
 804ed2a:	4b1f      	ldr	r3, [pc, #124]	; (804eda8 <tof_disable+0x90>)
 804ed2c:	701a      	strb	r2, [r3, #0]
  if (sensor_activate_count == 0) {
 804ed2e:	4b1e      	ldr	r3, [pc, #120]	; (804eda8 <tof_disable+0x90>)
 804ed30:	781b      	ldrb	r3, [r3, #0]
 804ed32:	2b00      	cmp	r3, #0
 804ed34:	d133      	bne.n	804ed9e <tof_disable+0x86>
    tof_activated = false;
 804ed36:	4b1d      	ldr	r3, [pc, #116]	; (804edac <tof_disable+0x94>)
 804ed38:	2200      	movs	r2, #0
 804ed3a:	701a      	strb	r2, [r3, #0]
    printf("asking device to stop ranging...\r\n");
 804ed3c:	481c      	ldr	r0, [pc, #112]	; (804edb0 <tof_disable+0x98>)
 804ed3e:	f011 feb5 	bl	8060aac <puts>
    status = vl53l5_stop(&dev, NULL);
 804ed42:	2100      	movs	r1, #0
 804ed44:	481b      	ldr	r0, [pc, #108]	; (804edb4 <tof_disable+0x9c>)
 804ed46:	f00c fc5a 	bl	805b5fe <vl53l5_stop>
 804ed4a:	6078      	str	r0, [r7, #4]

    if (status < STATUS_OK) {
 804ed4c:	687b      	ldr	r3, [r7, #4]
 804ed4e:	2b00      	cmp	r3, #0
 804ed50:	da03      	bge.n	804ed5a <tof_disable+0x42>
      printf("Stop command failed: status %d\r\n", status);
 804ed52:	6879      	ldr	r1, [r7, #4]
 804ed54:	4818      	ldr	r0, [pc, #96]	; (804edb8 <tof_disable+0xa0>)
 804ed56:	f011 fe0d 	bl	8060974 <iprintf>
    }
    status = vl53l5_set_power_mode(&dev, VL53L5_POWER_STATE_LP_IDLE_COMMS);
 804ed5a:	2103      	movs	r1, #3
 804ed5c:	4815      	ldr	r0, [pc, #84]	; (804edb4 <tof_disable+0x9c>)
 804ed5e:	f00c fd67 	bl	805b830 <vl53l5_set_power_mode>
 804ed62:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) {
 804ed64:	687b      	ldr	r3, [r7, #4]
 804ed66:	2b00      	cmp	r3, #0
 804ed68:	da03      	bge.n	804ed72 <tof_disable+0x5a>
      printf("set device in low power idle fails : %d\n", status);
 804ed6a:	6879      	ldr	r1, [r7, #4]
 804ed6c:	4813      	ldr	r0, [pc, #76]	; (804edbc <tof_disable+0xa4>)
 804ed6e:	f011 fe01 	bl	8060974 <iprintf>
    }
    status = vl53l5_term(&dev);
 804ed72:	4810      	ldr	r0, [pc, #64]	; (804edb4 <tof_disable+0x9c>)
 804ed74:	f00c fba8 	bl	805b4c8 <vl53l5_term>
 804ed78:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) {
 804ed7a:	687b      	ldr	r3, [r7, #4]
 804ed7c:	2b00      	cmp	r3, #0
 804ed7e:	da03      	bge.n	804ed88 <tof_disable+0x70>
      printf("vl53l5_term fails : %d\n", status);
 804ed80:	6879      	ldr	r1, [r7, #4]
 804ed82:	480f      	ldr	r0, [pc, #60]	; (804edc0 <tof_disable+0xa8>)
 804ed84:	f011 fdf6 	bl	8060974 <iprintf>
    }

    status = vl53l5_platform_terminate(&dev);
 804ed88:	480a      	ldr	r0, [pc, #40]	; (804edb4 <tof_disable+0x9c>)
 804ed8a:	f00f ffd7 	bl	805ed3c <vl53l5_platform_terminate>
 804ed8e:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) {
 804ed90:	687b      	ldr	r3, [r7, #4]
 804ed92:	2b00      	cmp	r3, #0
 804ed94:	da03      	bge.n	804ed9e <tof_disable+0x86>
      printf("vl53l5_platform_terminate fails : %d\n", status);
 804ed96:	6879      	ldr	r1, [r7, #4]
 804ed98:	480a      	ldr	r0, [pc, #40]	; (804edc4 <tof_disable+0xac>)
 804ed9a:	f011 fdeb 	bl	8060974 <iprintf>
    }
  }

  return status;
 804ed9e:	687b      	ldr	r3, [r7, #4]
}
 804eda0:	4618      	mov	r0, r3
 804eda2:	3708      	adds	r7, #8
 804eda4:	46bd      	mov	sp, r7
 804eda6:	bd80      	pop	{r7, pc}
 804eda8:	200084c8 	.word	0x200084c8
 804edac:	200084c9 	.word	0x200084c9
 804edb0:	080668e8 	.word	0x080668e8
 804edb4:	200084cc 	.word	0x200084cc
 804edb8:	0806690c 	.word	0x0806690c
 804edbc:	08066e70 	.word	0x08066e70
 804edc0:	08066e9c 	.word	0x08066e9c
 804edc4:	08066eb4 	.word	0x08066eb4

0804edc8 <tof_activate>:

int tof_activate(bool activate)
{
 804edc8:	b580      	push	{r7, lr}
 804edca:	b084      	sub	sp, #16
 804edcc:	af00      	add	r7, sp, #0
 804edce:	4603      	mov	r3, r0
 804edd0:	71fb      	strb	r3, [r7, #7]
  int res = 0;
 804edd2:	2300      	movs	r3, #0
 804edd4:	60fb      	str	r3, [r7, #12]
  printf("tof_activate: %d \r\n", activate);
 804edd6:	79fb      	ldrb	r3, [r7, #7]
 804edd8:	4619      	mov	r1, r3
 804edda:	4809      	ldr	r0, [pc, #36]	; (804ee00 <tof_activate+0x38>)
 804eddc:	f011 fdca 	bl	8060974 <iprintf>
  if (activate) {
 804ede0:	79fb      	ldrb	r3, [r7, #7]
 804ede2:	2b00      	cmp	r3, #0
 804ede4:	d003      	beq.n	804edee <tof_activate+0x26>
    res = tof_enable();
 804ede6:	f7ff fec3 	bl	804eb70 <tof_enable>
 804edea:	60f8      	str	r0, [r7, #12]
 804edec:	e002      	b.n	804edf4 <tof_activate+0x2c>
  } else {
    res = tof_disable();
 804edee:	f7ff ff93 	bl	804ed18 <tof_disable>
 804edf2:	60f8      	str	r0, [r7, #12]
  }
  return res;
 804edf4:	68fb      	ldr	r3, [r7, #12]
}
 804edf6:	4618      	mov	r0, r3
 804edf8:	3710      	adds	r7, #16
 804edfa:	46bd      	mov	sp, r7
 804edfc:	bd80      	pop	{r7, pc}
 804edfe:	bf00      	nop
 804ee00:	08066edc 	.word	0x08066edc

0804ee04 <tof_publish_sensor_data>:

/* Main Example --------------------------------------------------------------*/
int tof_publish_sensor_data(void *para)
{
 804ee04:	b580      	push	{r7, lr}
 804ee06:	b096      	sub	sp, #88	; 0x58
 804ee08:	af00      	add	r7, sp, #0
 804ee0a:	6078      	str	r0, [r7, #4]
  /* Read samples in polling mode (no int) */
  sensors_event_t sensor_data = { 0 };
 804ee0c:	f107 0308 	add.w	r3, r7, #8
 804ee10:	2250      	movs	r2, #80	; 0x50
 804ee12:	2100      	movs	r1, #0
 804ee14:	4618      	mov	r0, r3
 804ee16:	f011 f8d1 	bl	805ffbc <memset>
  //printf("tof_publish_sensor_data: %d \r\n", tof_activated);
  if (tof_activated) {
 804ee1a:	4b16      	ldr	r3, [pc, #88]	; (804ee74 <tof_publish_sensor_data+0x70>)
 804ee1c:	781b      	ldrb	r3, [r3, #0]
 804ee1e:	2b00      	cmp	r3, #0
 804ee20:	d022      	beq.n	804ee68 <tof_publish_sensor_data+0x64>
    // core process
    tof_get_range_data(&dev);
 804ee22:	4815      	ldr	r0, [pc, #84]	; (804ee78 <tof_publish_sensor_data+0x74>)
 804ee24:	f7ff fe08 	bl	804ea38 <tof_get_range_data>
    //send related messages to SensorDataQ
    sensor_data.sensor_type = SENSOR_TYPE_PROXIMITY_BOT;
 804ee28:	2306      	movs	r3, #6
 804ee2a:	723b      	strb	r3, [r7, #8]
    sensor_data.accuracy = 3;
 804ee2c:	2303      	movs	r3, #3
 804ee2e:	727b      	strb	r3, [r7, #9]
    sensor_data.timestamp = sensor_get_timestamp();
 804ee30:	f7fe fc6a 	bl	804d708 <sensor_get_timestamp>
 804ee34:	4602      	mov	r2, r0
 804ee36:	460b      	mov	r3, r1
 804ee38:	e9c7 2304 	strd	r2, r3, [r7, #16]
    sensor_data.sensor_data_t.vec.data[0] = tof_range_data;
 804ee3c:	4b0f      	ldr	r3, [pc, #60]	; (804ee7c <tof_publish_sensor_data+0x78>)
 804ee3e:	681b      	ldr	r3, [r3, #0]
 804ee40:	61bb      	str	r3, [r7, #24]
    sensor_data.sensor_data_t.vec.data[1] =
        (float)mtof_cali_data.max_cross_talk;
 804ee42:	4b0f      	ldr	r3, [pc, #60]	; (804ee80 <tof_publish_sensor_data+0x7c>)
 804ee44:	f8d3 3394 	ldr.w	r3, [r3, #916]	; 0x394
 804ee48:	ee07 3a90 	vmov	s15, r3
 804ee4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    sensor_data.sensor_data_t.vec.data[1] =
 804ee50:	edc7 7a07 	vstr	s15, [r7, #28]
    osMessageQueuePut(tof_init_parms->SensorDataQHandle, &sensor_data, 0, 0);
 804ee54:	4b0b      	ldr	r3, [pc, #44]	; (804ee84 <tof_publish_sensor_data+0x80>)
 804ee56:	681b      	ldr	r3, [r3, #0]
 804ee58:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 804ee5c:	f107 0108 	add.w	r1, r7, #8
 804ee60:	2300      	movs	r3, #0
 804ee62:	2200      	movs	r2, #0
 804ee64:	f007 face 	bl	8056404 <osMessageQueuePut>
  }
  return 0;
 804ee68:	2300      	movs	r3, #0
}
 804ee6a:	4618      	mov	r0, r3
 804ee6c:	3758      	adds	r7, #88	; 0x58
 804ee6e:	46bd      	mov	sp, r7
 804ee70:	bd80      	pop	{r7, pc}
 804ee72:	bf00      	nop
 804ee74:	200084c9 	.word	0x200084c9
 804ee78:	200084cc 	.word	0x200084cc
 804ee7c:	200084b0 	.word	0x200084b0
 804ee80:	20008538 	.word	0x20008538
 804ee84:	200084c4 	.word	0x200084c4

0804ee88 <tof_calibration>:

int tof_calibration()
{
 804ee88:	b580      	push	{r7, lr}
 804ee8a:	b082      	sub	sp, #8
 804ee8c:	af00      	add	r7, sp, #0
  int status = 0;
 804ee8e:	2300      	movs	r3, #0
 804ee90:	607b      	str	r3, [r7, #4]

  /* Platform specific data: running in SPI mode */
  dev.comms_type = VL53L5_SPI;
 804ee92:	4b49      	ldr	r3, [pc, #292]	; (804efb8 <tof_calibration+0x130>)
 804ee94:	2201      	movs	r2, #1
 804ee96:	705a      	strb	r2, [r3, #1]

  /* set the fw buffer to be loaded into device RAM */
  printf("Setting up fw buffer.\r\n");
 804ee98:	4848      	ldr	r0, [pc, #288]	; (804efbc <tof_calibration+0x134>)
 804ee9a:	f011 fe07 	bl	8060aac <puts>
  VL53L5_ASSIGN_FW_BUFF(&dev, (uint8_t *) _fw_buffer, _fw_buff_count);
 804ee9e:	4b46      	ldr	r3, [pc, #280]	; (804efb8 <tof_calibration+0x130>)
 804eea0:	4a47      	ldr	r2, [pc, #284]	; (804efc0 <tof_calibration+0x138>)
 804eea2:	621a      	str	r2, [r3, #32]
 804eea4:	4b47      	ldr	r3, [pc, #284]	; (804efc4 <tof_calibration+0x13c>)
 804eea6:	681b      	ldr	r3, [r3, #0]
 804eea8:	4a43      	ldr	r2, [pc, #268]	; (804efb8 <tof_calibration+0x130>)
 804eeaa:	6253      	str	r3, [r2, #36]	; 0x24

  /* Setup the comms buffer */
  VL53L5_ASSIGN_COMMS_BUFF(&dev, _comms_buffer, sizeof(_comms_buffer));
 804eeac:	4b42      	ldr	r3, [pc, #264]	; (804efb8 <tof_calibration+0x130>)
 804eeae:	4a46      	ldr	r2, [pc, #280]	; (804efc8 <tof_calibration+0x140>)
 804eeb0:	629a      	str	r2, [r3, #40]	; 0x28
 804eeb2:	4b41      	ldr	r3, [pc, #260]	; (804efb8 <tof_calibration+0x130>)
 804eeb4:	f240 728a 	movw	r2, #1930	; 0x78a
 804eeb8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialise platform and comms */
  printf("Initialising.\r\n");
 804eeba:	4844      	ldr	r0, [pc, #272]	; (804efcc <tof_calibration+0x144>)
 804eebc:	f011 fdf6 	bl	8060aac <puts>
  status = vl53l5_platform_init(&dev);
 804eec0:	483d      	ldr	r0, [pc, #244]	; (804efb8 <tof_calibration+0x130>)
 804eec2:	f00f fed1 	bl	805ec68 <vl53l5_platform_init>
 804eec6:	6078      	str	r0, [r7, #4]
  if (status < STATUS_OK) {
 804eec8:	687b      	ldr	r3, [r7, #4]
 804eeca:	2b00      	cmp	r3, #0
 804eecc:	da04      	bge.n	804eed8 <tof_calibration+0x50>
    printf("Platform init failed: %d\r\n", (int)status);
 804eece:	6879      	ldr	r1, [r7, #4]
 804eed0:	483f      	ldr	r0, [pc, #252]	; (804efd0 <tof_calibration+0x148>)
 804eed2:	f011 fd4f 	bl	8060974 <iprintf>
    goto exit;
 804eed6:	e04a      	b.n	804ef6e <tof_calibration+0xe6>
  }

  /* Initialise device */
  status = vl53l5_init(&dev);
 804eed8:	4837      	ldr	r0, [pc, #220]	; (804efb8 <tof_calibration+0x130>)
 804eeda:	f00c fa89 	bl	805b3f0 <vl53l5_init>
 804eede:	6078      	str	r0, [r7, #4]
  if (status < STATUS_OK) {
 804eee0:	687b      	ldr	r3, [r7, #4]
 804eee2:	2b00      	cmp	r3, #0
 804eee4:	da04      	bge.n	804eef0 <tof_calibration+0x68>
    printf("Init failed: %d\r\n", (int)status);
 804eee6:	6879      	ldr	r1, [r7, #4]
 804eee8:	483a      	ldr	r0, [pc, #232]	; (804efd4 <tof_calibration+0x14c>)
 804eeea:	f011 fd43 	bl	8060974 <iprintf>
    goto exit;
 804eeee:	e03e      	b.n	804ef6e <tof_calibration+0xe6>
  }

  /*reset device to clear memory */
  status = vl53l5_set_power_mode(&dev, VL53L5_POWER_STATE_ULP_IDLE);
 804eef0:	2101      	movs	r1, #1
 804eef2:	4831      	ldr	r0, [pc, #196]	; (804efb8 <tof_calibration+0x130>)
 804eef4:	f00c fc9c 	bl	805b830 <vl53l5_set_power_mode>
 804eef8:	6078      	str	r0, [r7, #4]
  if (status < STATUS_OK) {
 804eefa:	687b      	ldr	r3, [r7, #4]
 804eefc:	2b00      	cmp	r3, #0
 804eefe:	da04      	bge.n	804ef0a <tof_calibration+0x82>
    printf("set_power_mode() failed: %d\r\n", (int)status);
 804ef00:	6879      	ldr	r1, [r7, #4]
 804ef02:	4835      	ldr	r0, [pc, #212]	; (804efd8 <tof_calibration+0x150>)
 804ef04:	f011 fd36 	bl	8060974 <iprintf>
    goto exit;
 804ef08:	e031      	b.n	804ef6e <tof_calibration+0xe6>
  }

  status = vl53l5_set_power_mode(&dev, VL53L5_POWER_STATE_HP_IDLE);
 804ef0a:	2104      	movs	r1, #4
 804ef0c:	482a      	ldr	r0, [pc, #168]	; (804efb8 <tof_calibration+0x130>)
 804ef0e:	f00c fc8f 	bl	805b830 <vl53l5_set_power_mode>
 804ef12:	6078      	str	r0, [r7, #4]
  if (status < STATUS_OK) {
 804ef14:	687b      	ldr	r3, [r7, #4]
 804ef16:	2b00      	cmp	r3, #0
 804ef18:	da04      	bge.n	804ef24 <tof_calibration+0x9c>
    printf("set_power_mode() failed: %d\r\n", (int)status);
 804ef1a:	6879      	ldr	r1, [r7, #4]
 804ef1c:	482e      	ldr	r0, [pc, #184]	; (804efd8 <tof_calibration+0x150>)
 804ef1e:	f011 fd29 	bl	8060974 <iprintf>
    goto exit;
 804ef22:	e024      	b.n	804ef6e <tof_calibration+0xe6>
  }

  status = send_device_xtalk_characterisation_config(&dev);
 804ef24:	4824      	ldr	r0, [pc, #144]	; (804efb8 <tof_calibration+0x130>)
 804ef26:	f7ff fa1f 	bl	804e368 <send_device_xtalk_characterisation_config>
 804ef2a:	6078      	str	r0, [r7, #4]
  if (status < STATUS_OK) {
 804ef2c:	687b      	ldr	r3, [r7, #4]
 804ef2e:	2b00      	cmp	r3, #0
 804ef30:	da04      	bge.n	804ef3c <tof_calibration+0xb4>
    printf("setting config failed: %d\r\n", (int)status);
 804ef32:	6879      	ldr	r1, [r7, #4]
 804ef34:	4829      	ldr	r0, [pc, #164]	; (804efdc <tof_calibration+0x154>)
 804ef36:	f011 fd1d 	bl	8060974 <iprintf>
    goto exit;
 804ef3a:	e018      	b.n	804ef6e <tof_calibration+0xe6>
  }

  status = calibrating_loop(&dev);
 804ef3c:	481e      	ldr	r0, [pc, #120]	; (804efb8 <tof_calibration+0x130>)
 804ef3e:	f7ff fa3f 	bl	804e3c0 <calibrating_loop>
 804ef42:	6078      	str	r0, [r7, #4]
  if (status < STATUS_OK) {
 804ef44:	687b      	ldr	r3, [r7, #4]
 804ef46:	2b00      	cmp	r3, #0
 804ef48:	da04      	bge.n	804ef54 <tof_calibration+0xcc>
    printf("ranging loop failed: %d\r\n", (int)status);
 804ef4a:	6879      	ldr	r1, [r7, #4]
 804ef4c:	4824      	ldr	r0, [pc, #144]	; (804efe0 <tof_calibration+0x158>)
 804ef4e:	f011 fd11 	bl	8060974 <iprintf>
    goto exit;
 804ef52:	e00c      	b.n	804ef6e <tof_calibration+0xe6>
  }

  status = save_cal_data(&dev);
 804ef54:	4818      	ldr	r0, [pc, #96]	; (804efb8 <tof_calibration+0x130>)
 804ef56:	f7ff fa8d 	bl	804e474 <save_cal_data>
 804ef5a:	6078      	str	r0, [r7, #4]
  if (status < STATUS_OK) {
 804ef5c:	687b      	ldr	r3, [r7, #4]
 804ef5e:	2b00      	cmp	r3, #0
 804ef60:	da04      	bge.n	804ef6c <tof_calibration+0xe4>
    printf("saving cal data failed: %d\r\n", (int)status);
 804ef62:	6879      	ldr	r1, [r7, #4]
 804ef64:	481f      	ldr	r0, [pc, #124]	; (804efe4 <tof_calibration+0x15c>)
 804ef66:	f011 fd05 	bl	8060974 <iprintf>
    goto exit;
 804ef6a:	e000      	b.n	804ef6e <tof_calibration+0xe6>
  }

exit:
 804ef6c:	bf00      	nop
   * If an error has occurred, run the error handler. In certain cases,
   * this error handler will return a more detailed error code due to
   * the failure occurring within device firmware. Otherwise, the original
   * status will be returned.
   */
  if (status < STATUS_OK) {
 804ef6e:	687b      	ldr	r3, [r7, #4]
 804ef70:	2b00      	cmp	r3, #0
 804ef72:	da04      	bge.n	804ef7e <tof_calibration+0xf6>
    status = vl53l5_read_device_error(&dev, status);
 804ef74:	6879      	ldr	r1, [r7, #4]
 804ef76:	4810      	ldr	r0, [pc, #64]	; (804efb8 <tof_calibration+0x130>)
 804ef78:	f00c fba1 	bl	805b6be <vl53l5_read_device_error>
 804ef7c:	6078      	str	r0, [r7, #4]
  }
  /* end session */
  printf("Example complete with status %d... terminating.\r\n", (int)status);
 804ef7e:	6879      	ldr	r1, [r7, #4]
 804ef80:	4819      	ldr	r0, [pc, #100]	; (804efe8 <tof_calibration+0x160>)
 804ef82:	f011 fcf7 	bl	8060974 <iprintf>

  vl53l5_term(&dev);
 804ef86:	480c      	ldr	r0, [pc, #48]	; (804efb8 <tof_calibration+0x130>)
 804ef88:	f00c fa9e 	bl	805b4c8 <vl53l5_term>
  if (status < STATUS_OK) {
 804ef8c:	687b      	ldr	r3, [r7, #4]
 804ef8e:	2b00      	cmp	r3, #0
 804ef90:	da03      	bge.n	804ef9a <tof_calibration+0x112>
    printf("saving cal data failed: %d\r\n", (int)status);
 804ef92:	6879      	ldr	r1, [r7, #4]
 804ef94:	4813      	ldr	r0, [pc, #76]	; (804efe4 <tof_calibration+0x15c>)
 804ef96:	f011 fced 	bl	8060974 <iprintf>
  }
  vl53l5_platform_terminate(&dev);
 804ef9a:	4807      	ldr	r0, [pc, #28]	; (804efb8 <tof_calibration+0x130>)
 804ef9c:	f00f fece 	bl	805ed3c <vl53l5_platform_terminate>
  if (status < STATUS_OK) {
 804efa0:	687b      	ldr	r3, [r7, #4]
 804efa2:	2b00      	cmp	r3, #0
 804efa4:	da03      	bge.n	804efae <tof_calibration+0x126>
    printf("saving cal data failed: %d\r\n", (int)status);
 804efa6:	6879      	ldr	r1, [r7, #4]
 804efa8:	480e      	ldr	r0, [pc, #56]	; (804efe4 <tof_calibration+0x15c>)
 804efaa:	f011 fce3 	bl	8060974 <iprintf>
  }
  return status;
 804efae:	687b      	ldr	r3, [r7, #4]
}
 804efb0:	4618      	mov	r0, r3
 804efb2:	3708      	adds	r7, #8
 804efb4:	46bd      	mov	sp, r7
 804efb6:	bd80      	pop	{r7, pc}
 804efb8:	200084cc 	.word	0x200084cc
 804efbc:	08066cb8 	.word	0x08066cb8
 804efc0:	08067a70 	.word	0x08067a70
 804efc4:	20007c58 	.word	0x20007c58
 804efc8:	200088d0 	.word	0x200088d0
 804efcc:	08066cd0 	.word	0x08066cd0
 804efd0:	08066ce0 	.word	0x08066ce0
 804efd4:	08066d40 	.word	0x08066d40
 804efd8:	08066ef0 	.word	0x08066ef0
 804efdc:	08066d7c 	.word	0x08066d7c
 804efe0:	08066c50 	.word	0x08066c50
 804efe4:	08066f10 	.word	0x08066f10
 804efe8:	08066f30 	.word	0x08066f30

0804efec <tof_init_complete>:

int tof_init_complete(void *para)
{
 804efec:	b480      	push	{r7}
 804efee:	b083      	sub	sp, #12
 804eff0:	af00      	add	r7, sp, #0
 804eff2:	6078      	str	r0, [r7, #4]
  //send init complete event to smgr?
  return SENSOR_SUCCESS;
 804eff4:	2300      	movs	r3, #0
}
 804eff6:	4618      	mov	r0, r3
 804eff8:	370c      	adds	r7, #12
 804effa:	46bd      	mov	sp, r7
 804effc:	f85d 7b04 	ldr.w	r7, [sp], #4
 804f000:	4770      	bx	lr
	...

0804f004 <tof_config>:

int tof_config(uint8_t config_type, void *para)
{
 804f004:	b580      	push	{r7, lr}
 804f006:	b098      	sub	sp, #96	; 0x60
 804f008:	af00      	add	r7, sp, #0
 804f00a:	4603      	mov	r3, r0
 804f00c:	6039      	str	r1, [r7, #0]
 804f00e:	71fb      	strb	r3, [r7, #7]
  //send init complete event to smgr?
  int res = SENSOR_SUCCESS;
 804f010:	2300      	movs	r3, #0
 804f012:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint8_t id_0 = 0, id_1 = 0;
 804f014:	2300      	movs	r3, #0
 804f016:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 804f01a:	2300      	movs	r3, #0
 804f01c:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
  sensors_event_t sensor_data = { 0 };
 804f020:	f107 0308 	add.w	r3, r7, #8
 804f024:	2250      	movs	r2, #80	; 0x50
 804f026:	2100      	movs	r1, #0
 804f028:	4618      	mov	r0, r3
 804f02a:	f010 ffc7 	bl	805ffbc <memset>

  switch (config_type) {
 804f02e:	79fb      	ldrb	r3, [r7, #7]
 804f030:	3b02      	subs	r3, #2
 804f032:	2b06      	cmp	r3, #6
 804f034:	f200 80ab 	bhi.w	804f18e <tof_config+0x18a>
 804f038:	a201      	add	r2, pc, #4	; (adr r2, 804f040 <tof_config+0x3c>)
 804f03a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804f03e:	bf00      	nop
 804f040:	0804f05d 	.word	0x0804f05d
 804f044:	0804f0a7 	.word	0x0804f0a7
 804f048:	0804f0ff 	.word	0x0804f0ff
 804f04c:	0804f18f 	.word	0x0804f18f
 804f050:	0804f18f 	.word	0x0804f18f
 804f054:	0804f18f 	.word	0x0804f18f
 804f058:	0804f129 	.word	0x0804f129
  case SENSOR_CONFIG_SELFTEST:
    printf("VL53L5 selftest message \r\n");
 804f05c:	4851      	ldr	r0, [pc, #324]	; (804f1a4 <tof_config+0x1a0>)
 804f05e:	f011 fd25 	bl	8060aac <puts>
    tof_platform_read(dev.spi_handle, (uint16_t) TOF_DEVICE_ID, &id_0, 1);
 804f062:	4b51      	ldr	r3, [pc, #324]	; (804f1a8 <tof_config+0x1a4>)
 804f064:	68d8      	ldr	r0, [r3, #12]
 804f066:	f107 025b 	add.w	r2, r7, #91	; 0x5b
 804f06a:	2301      	movs	r3, #1
 804f06c:	2100      	movs	r1, #0
 804f06e:	f7ff fcbd 	bl	804e9ec <tof_platform_read>

    tof_platform_read(dev.spi_handle, (uint16_t) TOF_REVISION_ID, &id_1, 1);
 804f072:	4b4d      	ldr	r3, [pc, #308]	; (804f1a8 <tof_config+0x1a4>)
 804f074:	68d8      	ldr	r0, [r3, #12]
 804f076:	f107 025a 	add.w	r2, r7, #90	; 0x5a
 804f07a:	2301      	movs	r3, #1
 804f07c:	2101      	movs	r1, #1
 804f07e:	f7ff fcb5 	bl	804e9ec <tof_platform_read>

    //printf("TOF whoamI: 0x%x 0x%x %p\r\n", id_0, id_1,
    //        tof_dev_ctx.handle);

    if (id_0 != TOF_DEVICE_ID_VALUE || id_1 != TOF_REVISION_ID_VALUE) {
 804f082:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 804f086:	2bf0      	cmp	r3, #240	; 0xf0
 804f088:	d103      	bne.n	804f092 <tof_config+0x8e>
 804f08a:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 804f08e:	2b02      	cmp	r3, #2
 804f090:	d005      	beq.n	804f09e <tof_config+0x9a>
      printf("selftest failed for VL53L5!\r\n");
 804f092:	4846      	ldr	r0, [pc, #280]	; (804f1ac <tof_config+0x1a8>)
 804f094:	f011 fd0a 	bl	8060aac <puts>
      res = SENSOR_FAILED;
 804f098:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 804f09c:	65fb      	str	r3, [r7, #92]	; 0x5c
    }
    printf("selftest success for VL53L5!\r\n");
 804f09e:	4844      	ldr	r0, [pc, #272]	; (804f1b0 <tof_config+0x1ac>)
 804f0a0:	f011 fd04 	bl	8060aac <puts>
    break;
 804f0a4:	e078      	b.n	804f198 <tof_config+0x194>
  case SENSOR_CONFIG_CALIBRATION:
    res = tof_calibration();
 804f0a6:	f7ff feef 	bl	804ee88 <tof_calibration>
 804f0aa:	65f8      	str	r0, [r7, #92]	; 0x5c
    if (res == 0) {
 804f0ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 804f0ae:	2b00      	cmp	r3, #0
 804f0b0:	d16f      	bne.n	804f192 <tof_config+0x18e>
      memcpy(&tof_init_parms->board_calidata->tof_cali_t, &mtof_cali_data,
 804f0b2:	4b40      	ldr	r3, [pc, #256]	; (804f1b4 <tof_config+0x1b0>)
 804f0b4:	681b      	ldr	r3, [r3, #0]
 804f0b6:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 804f0ba:	3328      	adds	r3, #40	; 0x28
 804f0bc:	f44f 7266 	mov.w	r2, #920	; 0x398
 804f0c0:	493d      	ldr	r1, [pc, #244]	; (804f1b8 <tof_config+0x1b4>)
 804f0c2:	4618      	mov	r0, r3
 804f0c4:	f010 ff6c 	bl	805ffa0 <memcpy>
             sizeof(tof_cali_data));
      if (tof_init_parms->board_calidata->tof_cali_ver != DEFAULT_VERSION)
 804f0c8:	4b3a      	ldr	r3, [pc, #232]	; (804f1b4 <tof_config+0x1b0>)
 804f0ca:	681b      	ldr	r3, [r3, #0]
 804f0cc:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 804f0d0:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 804f0d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 804f0d8:	d009      	beq.n	804f0ee <tof_config+0xea>
        tof_init_parms->board_calidata->tof_cali_ver++;
 804f0da:	4b36      	ldr	r3, [pc, #216]	; (804f1b4 <tof_config+0x1b0>)
 804f0dc:	681b      	ldr	r3, [r3, #0]
 804f0de:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 804f0e2:	f8d3 23c0 	ldr.w	r2, [r3, #960]	; 0x3c0
 804f0e6:	3201      	adds	r2, #1
 804f0e8:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
      else
        tof_init_parms->board_calidata->tof_cali_ver = 1;
    }
    break;
 804f0ec:	e051      	b.n	804f192 <tof_config+0x18e>
        tof_init_parms->board_calidata->tof_cali_ver = 1;
 804f0ee:	4b31      	ldr	r3, [pc, #196]	; (804f1b4 <tof_config+0x1b0>)
 804f0f0:	681b      	ldr	r3, [r3, #0]
 804f0f2:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 804f0f6:	2201      	movs	r2, #1
 804f0f8:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
    break;
 804f0fc:	e049      	b.n	804f192 <tof_config+0x18e>
  case SENSOR_CONFIG_BIAS:
    //store calibrate sensor data to driver when boot up
    if (tof_init_parms->board_calidata->tof_cali_ver != DEFAULT_VERSION) {
 804f0fe:	4b2d      	ldr	r3, [pc, #180]	; (804f1b4 <tof_config+0x1b0>)
 804f100:	681b      	ldr	r3, [r3, #0]
 804f102:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 804f106:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 804f10a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 804f10e:	d042      	beq.n	804f196 <tof_config+0x192>
      memcpy(&mtof_cali_data, &tof_init_parms->board_calidata->tof_cali_t,
 804f110:	4b28      	ldr	r3, [pc, #160]	; (804f1b4 <tof_config+0x1b0>)
 804f112:	681b      	ldr	r3, [r3, #0]
 804f114:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 804f118:	3328      	adds	r3, #40	; 0x28
 804f11a:	f44f 7266 	mov.w	r2, #920	; 0x398
 804f11e:	4619      	mov	r1, r3
 804f120:	4825      	ldr	r0, [pc, #148]	; (804f1b8 <tof_config+0x1b4>)
 804f122:	f010 ff3d 	bl	805ffa0 <memcpy>
             sizeof(tof_cali_data));
    }
    break;
 804f126:	e036      	b.n	804f196 <tof_config+0x192>
  case SENSOR_CALIBRATION_RESULT:
    sensor_data.sensor_type = SENSOR_TYPE_PROXIMITY_BOT;
 804f128:	2306      	movs	r3, #6
 804f12a:	723b      	strb	r3, [r7, #8]
    sensor_data.accuracy = 0xFF;
 804f12c:	23ff      	movs	r3, #255	; 0xff
 804f12e:	727b      	strb	r3, [r7, #9]
    sensor_data.timestamp = sensor_get_timestamp();
 804f130:	f7fe faea 	bl	804d708 <sensor_get_timestamp>
 804f134:	4602      	mov	r2, r0
 804f136:	460b      	mov	r3, r1
 804f138:	e9c7 2304 	strd	r2, r3, [r7, #16]
    sensor_data.sensor_data_t.vec.data[0] =
        (float)tof_init_parms->board_calidata->tof_cali_t.max_cross_talk;
 804f13c:	4b1d      	ldr	r3, [pc, #116]	; (804f1b4 <tof_config+0x1b0>)
 804f13e:	681b      	ldr	r3, [r3, #0]
 804f140:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 804f144:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 804f148:	ee07 3a90 	vmov	s15, r3
 804f14c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    sensor_data.sensor_data_t.vec.data[0] =
 804f150:	edc7 7a06 	vstr	s15, [r7, #24]
    sensor_data.sensor_data_t.vec.data[1] =
        (float)tof_init_parms->board_calidata->tof_cali_ver;
 804f154:	4b17      	ldr	r3, [pc, #92]	; (804f1b4 <tof_config+0x1b0>)
 804f156:	681b      	ldr	r3, [r3, #0]
 804f158:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 804f15c:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 804f160:	ee07 3a90 	vmov	s15, r3
 804f164:	eef8 7a67 	vcvt.f32.u32	s15, s15
    sensor_data.sensor_data_t.vec.data[1] =
 804f168:	edc7 7a07 	vstr	s15, [r7, #28]
    sensor_data.sensor_data_t.vec.data[2] = 0;
 804f16c:	f04f 0300 	mov.w	r3, #0
 804f170:	623b      	str	r3, [r7, #32]
    sensor_data.sensor_data_t.vec.data[3] = 0;
 804f172:	f04f 0300 	mov.w	r3, #0
 804f176:	627b      	str	r3, [r7, #36]	; 0x24
    osMessageQueuePut(tof_init_parms->SensorDataQHandle, &sensor_data, 0, 0);
 804f178:	4b0e      	ldr	r3, [pc, #56]	; (804f1b4 <tof_config+0x1b0>)
 804f17a:	681b      	ldr	r3, [r3, #0]
 804f17c:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 804f180:	f107 0108 	add.w	r1, r7, #8
 804f184:	2300      	movs	r3, #0
 804f186:	2200      	movs	r2, #0
 804f188:	f007 f93c 	bl	8056404 <osMessageQueuePut>
    break;
 804f18c:	e004      	b.n	804f198 <tof_config+0x194>
  default:
    break;
 804f18e:	bf00      	nop
 804f190:	e002      	b.n	804f198 <tof_config+0x194>
    break;
 804f192:	bf00      	nop
 804f194:	e000      	b.n	804f198 <tof_config+0x194>
    break;
 804f196:	bf00      	nop
  }
  return res;
 804f198:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 804f19a:	4618      	mov	r0, r3
 804f19c:	3760      	adds	r7, #96	; 0x60
 804f19e:	46bd      	mov	sp, r7
 804f1a0:	bd80      	pop	{r7, pc}
 804f1a2:	bf00      	nop
 804f1a4:	08066f64 	.word	0x08066f64
 804f1a8:	200084cc 	.word	0x200084cc
 804f1ac:	08066f80 	.word	0x08066f80
 804f1b0:	08066fa0 	.word	0x08066fa0
 804f1b4:	200084c4 	.word	0x200084c4
 804f1b8:	20008538 	.word	0x20008538

0804f1bc <tof_publish_config_resp>:

int tof_publish_config_resp(void *para)
{
 804f1bc:	b480      	push	{r7}
 804f1be:	b083      	sub	sp, #12
 804f1c0:	af00      	add	r7, sp, #0
 804f1c2:	6078      	str	r0, [r7, #4]
  //send init complete event to smgr?
  return SENSOR_SUCCESS;
 804f1c4:	2300      	movs	r3, #0
}
 804f1c6:	4618      	mov	r0, r3
 804f1c8:	370c      	adds	r7, #12
 804f1ca:	46bd      	mov	sp, r7
 804f1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 804f1d0:	4770      	bx	lr
	...

0804f1d4 <send_device_config>:

int32_t send_device_config(struct vl53l5_dev_handle_t * pdev)
{
 804f1d4:	b580      	push	{r7, lr}
 804f1d6:	f5ad 6dea 	sub.w	sp, sp, #1872	; 0x750
 804f1da:	af00      	add	r7, sp, #0
 804f1dc:	1d3b      	adds	r3, r7, #4
 804f1de:	6018      	str	r0, [r3, #0]
  int32_t status = STATUS_OK;
 804f1e0:	2300      	movs	r3, #0
 804f1e2:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
  uint8_t params_buff[] = VL53L5_CFG__BACK_TO_BACK__4X4__15HZ_DATA;
 804f1e6:	f107 0308 	add.w	r3, r7, #8
 804f1ea:	4a0e      	ldr	r2, [pc, #56]	; (804f224 <send_device_config+0x50>)
 804f1ec:	4618      	mov	r0, r3
 804f1ee:	4611      	mov	r1, r2
 804f1f0:	f240 7344 	movw	r3, #1860	; 0x744
 804f1f4:	461a      	mov	r2, r3
 804f1f6:	f010 fed3 	bl	805ffa0 <memcpy>

  printf("Setting config for 4x4 @ 15Hz...\r\n");
 804f1fa:	480b      	ldr	r0, [pc, #44]	; (804f228 <send_device_config+0x54>)
 804f1fc:	f011 fc56 	bl	8060aac <puts>

  status = vl53l5_set_device_parameters(pdev, params_buff, sizeof(params_buff));
 804f200:	f107 0108 	add.w	r1, r7, #8
 804f204:	1d3b      	adds	r3, r7, #4
 804f206:	f240 7244 	movw	r2, #1860	; 0x744
 804f20a:	6818      	ldr	r0, [r3, #0]
 804f20c:	f00c fab6 	bl	805b77c <vl53l5_set_device_parameters>
 804f210:	f8c7 074c 	str.w	r0, [r7, #1868]	; 0x74c

  return status;
 804f214:	f8d7 374c 	ldr.w	r3, [r7, #1868]	; 0x74c
}
 804f218:	4618      	mov	r0, r3
 804f21a:	f507 67ea 	add.w	r7, r7, #1872	; 0x750
 804f21e:	46bd      	mov	sp, r7
 804f220:	bd80      	pop	{r7, pc}
 804f222:	bf00      	nop
 804f224:	08066fe4 	.word	0x08066fe4
 804f228:	08066fc0 	.word	0x08066fc0

0804f22c <ranging_loop>:

int32_t ranging_loop(struct vl53l5_dev_handle_t * pdev)
{
 804f22c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 804f230:	f6ad 0d04 	subw	sp, sp, #2052	; 0x804
 804f234:	af00      	add	r7, sp, #0
 804f236:	1d3b      	adds	r3, r7, #4
 804f238:	6018      	str	r0, [r3, #0]
  int32_t status = STATUS_OK;
 804f23a:	2300      	movs	r3, #0
 804f23c:	f8c7 37dc 	str.w	r3, [r7, #2012]	; 0x7dc
  struct vl53l5_range_data_t range = { 0 };
 804f240:	f507 7384 	add.w	r3, r7, #264	; 0x108
 804f244:	4618      	mov	r0, r3
 804f246:	f44f 63da 	mov.w	r3, #1744	; 0x6d0
 804f24a:	461a      	mov	r2, r3
 804f24c:	2100      	movs	r1, #0
 804f24e:	f010 feb5 	bl	805ffbc <memset>
  range_sum = 0;
 804f252:	4bc3      	ldr	r3, [pc, #780]	; (804f560 <ranging_loop+0x334>)
 804f254:	2200      	movs	r2, #0
 804f256:	601a      	str	r2, [r3, #0]
  int valid_range_num = 0;
 804f258:	2300      	movs	r3, #0
 804f25a:	f8c7 37fc 	str.w	r3, [r7, #2044]	; 0x7fc
  int64_t valid_range_peak_rate_sum = 0;
 804f25e:	f04f 0200 	mov.w	r2, #0
 804f262:	f04f 0300 	mov.w	r3, #0
 804f266:	f507 61fe 	add.w	r1, r7, #2032	; 0x7f0
 804f26a:	e9c1 2300 	strd	r2, r3, [r1]
  int64_t valid_range[16] = {0};
 804f26e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 804f272:	4618      	mov	r0, r3
 804f274:	2380      	movs	r3, #128	; 0x80
 804f276:	461a      	mov	r2, r3
 804f278:	2100      	movs	r1, #0
 804f27a:	f010 fe9f 	bl	805ffbc <memset>
  int64_t valid_range_peak_rate[16] = {0};
 804f27e:	f107 0308 	add.w	r3, r7, #8
 804f282:	4618      	mov	r0, r3
 804f284:	2380      	movs	r3, #128	; 0x80
 804f286:	461a      	mov	r2, r3
 804f288:	2100      	movs	r1, #0
 804f28a:	f010 fe97 	bl	805ffbc <memset>
  do {
    /* now check to see if range data is available *///swl check < ok
    status = vl53l5_check_data_ready(pdev);
 804f28e:	1d3b      	adds	r3, r7, #4
 804f290:	6818      	ldr	r0, [r3, #0]
 804f292:	f00c fcf6 	bl	805bc82 <vl53l5_check_data_ready>
 804f296:	f8c7 07dc 	str.w	r0, [r7, #2012]	; 0x7dc
    if (status == VL53L5_NO_NEW_RANGE_DATA_ERROR) {
 804f29a:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	; 0x7dc
 804f29e:	f113 0f59 	cmn.w	r3, #89	; 0x59
 804f2a2:	d105      	bne.n	804f2b0 <ranging_loop+0x84>
      //printf("waiting for new range data...\r\n");
      vl53l5_wait_ms(pdev, 25); //may be not proper
 804f2a4:	1d3b      	adds	r3, r7, #4
 804f2a6:	2119      	movs	r1, #25
 804f2a8:	6818      	ldr	r0, [r3, #0]
 804f2aa:	f00f fc5d 	bl	805eb68 <vl53l5_wait_ms>
    status = vl53l5_check_data_ready(pdev);
 804f2ae:	e7ee      	b.n	804f28e <ranging_loop+0x62>
    } else
      break;
 804f2b0:	bf00      	nop
  } while (1);

  /* when new data is ready, get the range data from the device */
  status = vl53l5_get_range_data(pdev);
 804f2b2:	1d3b      	adds	r3, r7, #4
 804f2b4:	6818      	ldr	r0, [r3, #0]
 804f2b6:	f00c fd36 	bl	805bd26 <vl53l5_get_range_data>
 804f2ba:	f8c7 07dc 	str.w	r0, [r7, #2012]	; 0x7dc
  if (status < STATUS_OK) {
 804f2be:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	; 0x7dc
 804f2c2:	2b00      	cmp	r3, #0
 804f2c4:	da04      	bge.n	804f2d0 <ranging_loop+0xa4>
    printf("get_range_data() error: status %d\r\n", (int)status);
 804f2c6:	f8d7 17dc 	ldr.w	r1, [r7, #2012]	; 0x7dc
 804f2ca:	48a6      	ldr	r0, [pc, #664]	; (804f564 <ranging_loop+0x338>)
 804f2cc:	f011 fb52 	bl	8060974 <iprintf>
  }

  /* Decode range data in comms buffer (OPTIONAL) */
  status = vl53l5_decode_range_data(pdev, &range);
 804f2d0:	f507 7284 	add.w	r2, r7, #264	; 0x108
 804f2d4:	1d3b      	adds	r3, r7, #4
 804f2d6:	4611      	mov	r1, r2
 804f2d8:	6818      	ldr	r0, [r3, #0]
 804f2da:	f00c fc94 	bl	805bc06 <vl53l5_decode_range_data>
 804f2de:	f8c7 07dc 	str.w	r0, [r7, #2012]	; 0x7dc
  if (status < STATUS_OK) {
 804f2e2:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	; 0x7dc
 804f2e6:	2b00      	cmp	r3, #0
 804f2e8:	da05      	bge.n	804f2f6 <ranging_loop+0xca>
    printf("decode_range_data() failed %d\r\n", (int)status);
 804f2ea:	f8d7 17dc 	ldr.w	r1, [r7, #2012]	; 0x7dc
 804f2ee:	489e      	ldr	r0, [pc, #632]	; (804f568 <ranging_loop+0x33c>)
 804f2f0:	f011 fb40 	bl	8060974 <iprintf>
 804f2f4:	e077      	b.n	804f3e6 <ranging_loop+0x1ba>
        }
*/
    //printf("per target data - 1st target: \r\n");
    //printf("status  median   peak_rate     \r\n");

    for (int i = 0; i < 4; i++) {       // Warning : Print for 4x4 ranging - this line controls the rows
 804f2f6:	2300      	movs	r3, #0
 804f2f8:	f8c7 37ec 	str.w	r3, [r7, #2028]	; 0x7ec
 804f2fc:	e06f      	b.n	804f3de <ranging_loop+0x1b2>
      for (int j = 0; j < 8; j = j + 2) {       //this line controls the columns
 804f2fe:	2300      	movs	r3, #0
 804f300:	f8c7 37e8 	str.w	r3, [r7, #2024]	; 0x7e8
 804f304:	e062      	b.n	804f3cc <ranging_loop+0x1a0>
        uint32_t idx = (j + i * 8);     //This line gets every second value - 2 targets - byte 0, 2, 4,...30
 804f306:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	; 0x7ec
 804f30a:	00da      	lsls	r2, r3, #3
 804f30c:	f8d7 37e8 	ldr.w	r3, [r7, #2024]	; 0x7e8
 804f310:	4413      	add	r3, r2
 804f312:	f8c7 37d8 	str.w	r3, [r7, #2008]	; 0x7d8
        //Z0T0, Z1T0, Z2T0, Z3T0
        //Z4T0, Z5T0, Z6T0, Z7T0
        //Z8T0, Z9T0, Z10T0, Z11T0
        //Z12T0, Z13T0, Z14T0, Z15T0
        if ((int)range.core.per_tgt_results.target_status[idx] == 5 || (int)range.core.per_tgt_results.target_status[idx] == 9) {
 804f316:	f507 7284 	add.w	r2, r7, #264	; 0x108
 804f31a:	f8d7 37d8 	ldr.w	r3, [r7, #2008]	; 0x7d8
 804f31e:	4413      	add	r3, r2
 804f320:	f503 63c5 	add.w	r3, r3, #1576	; 0x628
 804f324:	781b      	ldrb	r3, [r3, #0]
 804f326:	2b05      	cmp	r3, #5
 804f328:	d009      	beq.n	804f33e <ranging_loop+0x112>
 804f32a:	f507 7284 	add.w	r2, r7, #264	; 0x108
 804f32e:	f8d7 37d8 	ldr.w	r3, [r7, #2008]	; 0x7d8
 804f332:	4413      	add	r3, r2
 804f334:	f503 63c5 	add.w	r3, r3, #1576	; 0x628
 804f338:	781b      	ldrb	r3, [r3, #0]
 804f33a:	2b09      	cmp	r3, #9
 804f33c:	d141      	bne.n	804f3c2 <ranging_loop+0x196>
          if (range.core.per_tgt_results.median_range_mm[idx] / 4 > 0) {
 804f33e:	f507 7284 	add.w	r2, r7, #264	; 0x108
 804f342:	f8d7 37d8 	ldr.w	r3, [r7, #2008]	; 0x7d8
 804f346:	f503 7324 	add.w	r3, r3, #656	; 0x290
 804f34a:	005b      	lsls	r3, r3, #1
 804f34c:	4413      	add	r3, r2
 804f34e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 804f352:	2b03      	cmp	r3, #3
 804f354:	dd35      	ble.n	804f3c2 <ranging_loop+0x196>
            valid_range[valid_range_num] = range.core.per_tgt_results.median_range_mm[idx] / 4;
 804f356:	f507 7284 	add.w	r2, r7, #264	; 0x108
 804f35a:	f8d7 37d8 	ldr.w	r3, [r7, #2008]	; 0x7d8
 804f35e:	f503 7324 	add.w	r3, r3, #656	; 0x290
 804f362:	005b      	lsls	r3, r3, #1
 804f364:	4413      	add	r3, r2
 804f366:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 804f36a:	2b00      	cmp	r3, #0
 804f36c:	da00      	bge.n	804f370 <ranging_loop+0x144>
 804f36e:	3303      	adds	r3, #3
 804f370:	109b      	asrs	r3, r3, #2
 804f372:	b21b      	sxth	r3, r3
 804f374:	b21a      	sxth	r2, r3
 804f376:	ea4f 73e2 	mov.w	r3, r2, asr #31
 804f37a:	f107 0088 	add.w	r0, r7, #136	; 0x88
 804f37e:	f8d7 17fc 	ldr.w	r1, [r7, #2044]	; 0x7fc
 804f382:	00c9      	lsls	r1, r1, #3
 804f384:	4401      	add	r1, r0
 804f386:	e9c1 2300 	strd	r2, r3, [r1]
            valid_range_peak_rate[valid_range_num] = (int)range.core.per_tgt_results.peak_rate_kcps_per_spad[idx] / 2048;
 804f38a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 804f38e:	f8d7 27d8 	ldr.w	r2, [r7, #2008]	; 0x7d8
 804f392:	3286      	adds	r2, #134	; 0x86
 804f394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804f398:	2b00      	cmp	r3, #0
 804f39a:	da01      	bge.n	804f3a0 <ranging_loop+0x174>
 804f39c:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 804f3a0:	12db      	asrs	r3, r3, #11
 804f3a2:	461a      	mov	r2, r3
 804f3a4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 804f3a8:	f107 0008 	add.w	r0, r7, #8
 804f3ac:	f8d7 17fc 	ldr.w	r1, [r7, #2044]	; 0x7fc
 804f3b0:	00c9      	lsls	r1, r1, #3
 804f3b2:	4401      	add	r1, r0
 804f3b4:	e9c1 2300 	strd	r2, r3, [r1]
            valid_range_num++;
 804f3b8:	f8d7 37fc 	ldr.w	r3, [r7, #2044]	; 0x7fc
 804f3bc:	3301      	adds	r3, #1
 804f3be:	f8c7 37fc 	str.w	r3, [r7, #2044]	; 0x7fc
      for (int j = 0; j < 8; j = j + 2) {       //this line controls the columns
 804f3c2:	f8d7 37e8 	ldr.w	r3, [r7, #2024]	; 0x7e8
 804f3c6:	3302      	adds	r3, #2
 804f3c8:	f8c7 37e8 	str.w	r3, [r7, #2024]	; 0x7e8
 804f3cc:	f8d7 37e8 	ldr.w	r3, [r7, #2024]	; 0x7e8
 804f3d0:	2b07      	cmp	r3, #7
 804f3d2:	dd98      	ble.n	804f306 <ranging_loop+0xda>
    for (int i = 0; i < 4; i++) {       // Warning : Print for 4x4 ranging - this line controls the rows
 804f3d4:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	; 0x7ec
 804f3d8:	3301      	adds	r3, #1
 804f3da:	f8c7 37ec 	str.w	r3, [r7, #2028]	; 0x7ec
 804f3de:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	; 0x7ec
 804f3e2:	2b03      	cmp	r3, #3
 804f3e4:	dd8b      	ble.n	804f2fe <ranging_loop+0xd2>
      }
      //printf(" \r\n");
    }
  }

  if (valid_range_num != 0) {
 804f3e6:	f8d7 37fc 	ldr.w	r3, [r7, #2044]	; 0x7fc
 804f3ea:	2b00      	cmp	r3, #0
 804f3ec:	f000 80ac 	beq.w	804f548 <ranging_loop+0x31c>
    for (int i = 0; i < valid_range_num; i++) {
 804f3f0:	2300      	movs	r3, #0
 804f3f2:	f8c7 37e4 	str.w	r3, [r7, #2020]	; 0x7e4
 804f3f6:	e032      	b.n	804f45e <ranging_loop+0x232>
      if (valid_range_peak_rate[i] != 0)
 804f3f8:	f107 0208 	add.w	r2, r7, #8
 804f3fc:	f8d7 37e4 	ldr.w	r3, [r7, #2020]	; 0x7e4
 804f400:	00db      	lsls	r3, r3, #3
 804f402:	4413      	add	r3, r2
 804f404:	e9d3 2300 	ldrd	r2, r3, [r3]
 804f408:	4313      	orrs	r3, r2
 804f40a:	d023      	beq.n	804f454 <ranging_loop+0x228>
        valid_range_peak_rate_sum += valid_range_peak_rate[i] * valid_range_peak_rate[i];
 804f40c:	f107 0208 	add.w	r2, r7, #8
 804f410:	f8d7 37e4 	ldr.w	r3, [r7, #2020]	; 0x7e4
 804f414:	00db      	lsls	r3, r3, #3
 804f416:	4413      	add	r3, r2
 804f418:	e9d3 0100 	ldrd	r0, r1, [r3]
 804f41c:	f107 0208 	add.w	r2, r7, #8
 804f420:	f8d7 37e4 	ldr.w	r3, [r7, #2020]	; 0x7e4
 804f424:	00db      	lsls	r3, r3, #3
 804f426:	4413      	add	r3, r2
 804f428:	e9d3 2300 	ldrd	r2, r3, [r3]
 804f42c:	fb02 fc01 	mul.w	ip, r2, r1
 804f430:	fb00 f603 	mul.w	r6, r0, r3
 804f434:	4466      	add	r6, ip
 804f436:	fba0 2302 	umull	r2, r3, r0, r2
 804f43a:	18f1      	adds	r1, r6, r3
 804f43c:	460b      	mov	r3, r1
 804f43e:	f507 61fe 	add.w	r1, r7, #2032	; 0x7f0
 804f442:	e9d1 0100 	ldrd	r0, r1, [r1]
 804f446:	1884      	adds	r4, r0, r2
 804f448:	eb41 0503 	adc.w	r5, r1, r3
 804f44c:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 804f450:	e9c3 4500 	strd	r4, r5, [r3]
    for (int i = 0; i < valid_range_num; i++) {
 804f454:	f8d7 37e4 	ldr.w	r3, [r7, #2020]	; 0x7e4
 804f458:	3301      	adds	r3, #1
 804f45a:	f8c7 37e4 	str.w	r3, [r7, #2020]	; 0x7e4
 804f45e:	f8d7 27e4 	ldr.w	r2, [r7, #2020]	; 0x7e4
 804f462:	f8d7 37fc 	ldr.w	r3, [r7, #2044]	; 0x7fc
 804f466:	429a      	cmp	r2, r3
 804f468:	dbc6      	blt.n	804f3f8 <ranging_loop+0x1cc>
    }
    tof_range_data = 0.0;
 804f46a:	4b40      	ldr	r3, [pc, #256]	; (804f56c <ranging_loop+0x340>)
 804f46c:	f04f 0200 	mov.w	r2, #0
 804f470:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < valid_range_num; i++)
 804f472:	2300      	movs	r3, #0
 804f474:	f8c7 37e0 	str.w	r3, [r7, #2016]	; 0x7e0
 804f478:	e05b      	b.n	804f532 <ranging_loop+0x306>
      tof_range_data += (valid_range_peak_rate[i] * valid_range_peak_rate[i] * 1.0 / valid_range_peak_rate_sum) * valid_range[i];
 804f47a:	4b3c      	ldr	r3, [pc, #240]	; (804f56c <ranging_loop+0x340>)
 804f47c:	681b      	ldr	r3, [r3, #0]
 804f47e:	4618      	mov	r0, r3
 804f480:	f7f1 f862 	bl	8040548 <__aeabi_f2d>
 804f484:	4604      	mov	r4, r0
 804f486:	460d      	mov	r5, r1
 804f488:	f107 0208 	add.w	r2, r7, #8
 804f48c:	f8d7 37e0 	ldr.w	r3, [r7, #2016]	; 0x7e0
 804f490:	00db      	lsls	r3, r3, #3
 804f492:	4413      	add	r3, r2
 804f494:	e9d3 0100 	ldrd	r0, r1, [r3]
 804f498:	f107 0208 	add.w	r2, r7, #8
 804f49c:	f8d7 37e0 	ldr.w	r3, [r7, #2016]	; 0x7e0
 804f4a0:	00db      	lsls	r3, r3, #3
 804f4a2:	4413      	add	r3, r2
 804f4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 804f4a8:	fb02 fc01 	mul.w	ip, r2, r1
 804f4ac:	fb00 f603 	mul.w	r6, r0, r3
 804f4b0:	4466      	add	r6, ip
 804f4b2:	fba0 2302 	umull	r2, r3, r0, r2
 804f4b6:	18f1      	adds	r1, r6, r3
 804f4b8:	460b      	mov	r3, r1
 804f4ba:	4610      	mov	r0, r2
 804f4bc:	4619      	mov	r1, r3
 804f4be:	f7f1 f86d 	bl	804059c <__aeabi_l2d>
 804f4c2:	4680      	mov	r8, r0
 804f4c4:	4689      	mov	r9, r1
 804f4c6:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 804f4ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 804f4ce:	f7f1 f865 	bl	804059c <__aeabi_l2d>
 804f4d2:	4602      	mov	r2, r0
 804f4d4:	460b      	mov	r3, r1
 804f4d6:	4640      	mov	r0, r8
 804f4d8:	4649      	mov	r1, r9
 804f4da:	f7f1 f9b7 	bl	804084c <__aeabi_ddiv>
 804f4de:	4602      	mov	r2, r0
 804f4e0:	460b      	mov	r3, r1
 804f4e2:	4690      	mov	r8, r2
 804f4e4:	4699      	mov	r9, r3
 804f4e6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 804f4ea:	f8d7 37e0 	ldr.w	r3, [r7, #2016]	; 0x7e0
 804f4ee:	00db      	lsls	r3, r3, #3
 804f4f0:	4413      	add	r3, r2
 804f4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 804f4f6:	4610      	mov	r0, r2
 804f4f8:	4619      	mov	r1, r3
 804f4fa:	f7f1 f84f 	bl	804059c <__aeabi_l2d>
 804f4fe:	4602      	mov	r2, r0
 804f500:	460b      	mov	r3, r1
 804f502:	4640      	mov	r0, r8
 804f504:	4649      	mov	r1, r9
 804f506:	f7f1 f877 	bl	80405f8 <__aeabi_dmul>
 804f50a:	4602      	mov	r2, r0
 804f50c:	460b      	mov	r3, r1
 804f50e:	4620      	mov	r0, r4
 804f510:	4629      	mov	r1, r5
 804f512:	f7f0 febb 	bl	804028c <__adddf3>
 804f516:	4602      	mov	r2, r0
 804f518:	460b      	mov	r3, r1
 804f51a:	4610      	mov	r0, r2
 804f51c:	4619      	mov	r1, r3
 804f51e:	f7f1 fb63 	bl	8040be8 <__aeabi_d2f>
 804f522:	4603      	mov	r3, r0
 804f524:	4a11      	ldr	r2, [pc, #68]	; (804f56c <ranging_loop+0x340>)
 804f526:	6013      	str	r3, [r2, #0]
    for (int i = 0; i < valid_range_num; i++)
 804f528:	f8d7 37e0 	ldr.w	r3, [r7, #2016]	; 0x7e0
 804f52c:	3301      	adds	r3, #1
 804f52e:	f8c7 37e0 	str.w	r3, [r7, #2016]	; 0x7e0
 804f532:	f8d7 27e0 	ldr.w	r2, [r7, #2016]	; 0x7e0
 804f536:	f8d7 37fc 	ldr.w	r3, [r7, #2044]	; 0x7fc
 804f53a:	429a      	cmp	r2, r3
 804f53c:	db9d      	blt.n	804f47a <ranging_loop+0x24e>
    last_tof_range_data = tof_range_data;
 804f53e:	4b0b      	ldr	r3, [pc, #44]	; (804f56c <ranging_loop+0x340>)
 804f540:	681b      	ldr	r3, [r3, #0]
 804f542:	4a0b      	ldr	r2, [pc, #44]	; (804f570 <ranging_loop+0x344>)
 804f544:	6013      	str	r3, [r2, #0]
 804f546:	e003      	b.n	804f550 <ranging_loop+0x324>
  } else
    tof_range_data = last_tof_range_data;
 804f548:	4b09      	ldr	r3, [pc, #36]	; (804f570 <ranging_loop+0x344>)
 804f54a:	681b      	ldr	r3, [r3, #0]
 804f54c:	4a07      	ldr	r2, [pc, #28]	; (804f56c <ranging_loop+0x340>)
 804f54e:	6013      	str	r3, [r2, #0]
  return status;
 804f550:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	; 0x7dc
}
 804f554:	4618      	mov	r0, r3
 804f556:	f607 0704 	addw	r7, r7, #2052	; 0x804
 804f55a:	46bd      	mov	sp, r7
 804f55c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 804f560:	200084b4 	.word	0x200084b4
 804f564:	08067728 	.word	0x08067728
 804f568:	0806774c 	.word	0x0806774c
 804f56c:	200084b0 	.word	0x200084b0
 804f570:	20008534 	.word	0x20008534

0804f574 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 804f574:	f8df d034 	ldr.w	sp, [pc, #52]	; 804f5ac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 804f578:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 804f57a:	e003      	b.n	804f584 <LoopCopyDataInit>

0804f57c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 804f57c:	4b0c      	ldr	r3, [pc, #48]	; (804f5b0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 804f57e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 804f580:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 804f582:	3104      	adds	r1, #4

0804f584 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 804f584:	480b      	ldr	r0, [pc, #44]	; (804f5b4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 804f586:	4b0c      	ldr	r3, [pc, #48]	; (804f5b8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 804f588:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 804f58a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 804f58c:	d3f6      	bcc.n	804f57c <CopyDataInit>
  ldr  r2, =_sbss
 804f58e:	4a0b      	ldr	r2, [pc, #44]	; (804f5bc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 804f590:	e002      	b.n	804f598 <LoopFillZerobss>

0804f592 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 804f592:	2300      	movs	r3, #0
  str  r3, [r2], #4
 804f594:	f842 3b04 	str.w	r3, [r2], #4

0804f598 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 804f598:	4b09      	ldr	r3, [pc, #36]	; (804f5c0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 804f59a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 804f59c:	d3f9      	bcc.n	804f592 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 804f59e:	f7fe fecd 	bl	804e33c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 804f5a2:	f010 fcd9 	bl	805ff58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 804f5a6:	f7f8 fced 	bl	8047f84 <main>
  bx  lr    
 804f5aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 804f5ac:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 804f5b0:	0807daf0 	.word	0x0807daf0
  ldr  r0, =_sdata
 804f5b4:	20007000 	.word	0x20007000
  ldr  r3, =_edata
 804f5b8:	20007e94 	.word	0x20007e94
  ldr  r2, =_sbss
 804f5bc:	20007e98 	.word	0x20007e98
  ldr  r3, = _ebss
 804f5c0:	2001c394 	.word	0x2001c394

0804f5c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 804f5c4:	e7fe      	b.n	804f5c4 <ADC_IRQHandler>
	...

0804f5c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 804f5c8:	b580      	push	{r7, lr}
 804f5ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 804f5cc:	4b0e      	ldr	r3, [pc, #56]	; (804f608 <HAL_Init+0x40>)
 804f5ce:	681b      	ldr	r3, [r3, #0]
 804f5d0:	4a0d      	ldr	r2, [pc, #52]	; (804f608 <HAL_Init+0x40>)
 804f5d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 804f5d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 804f5d8:	4b0b      	ldr	r3, [pc, #44]	; (804f608 <HAL_Init+0x40>)
 804f5da:	681b      	ldr	r3, [r3, #0]
 804f5dc:	4a0a      	ldr	r2, [pc, #40]	; (804f608 <HAL_Init+0x40>)
 804f5de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 804f5e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 804f5e4:	4b08      	ldr	r3, [pc, #32]	; (804f608 <HAL_Init+0x40>)
 804f5e6:	681b      	ldr	r3, [r3, #0]
 804f5e8:	4a07      	ldr	r2, [pc, #28]	; (804f608 <HAL_Init+0x40>)
 804f5ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 804f5ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 804f5f0:	2003      	movs	r0, #3
 804f5f2:	f000 ff78 	bl	80504e6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 804f5f6:	2000      	movs	r0, #0
 804f5f8:	f7fe fcfe 	bl	804dff8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 804f5fc:	f7fe fa66 	bl	804dacc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 804f600:	2300      	movs	r3, #0
}
 804f602:	4618      	mov	r0, r3
 804f604:	bd80      	pop	{r7, pc}
 804f606:	bf00      	nop
 804f608:	40023c00 	.word	0x40023c00

0804f60c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 804f60c:	b480      	push	{r7}
 804f60e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 804f610:	4b06      	ldr	r3, [pc, #24]	; (804f62c <HAL_IncTick+0x20>)
 804f612:	781b      	ldrb	r3, [r3, #0]
 804f614:	461a      	mov	r2, r3
 804f616:	4b06      	ldr	r3, [pc, #24]	; (804f630 <HAL_IncTick+0x24>)
 804f618:	681b      	ldr	r3, [r3, #0]
 804f61a:	4413      	add	r3, r2
 804f61c:	4a04      	ldr	r2, [pc, #16]	; (804f630 <HAL_IncTick+0x24>)
 804f61e:	6013      	str	r3, [r2, #0]
}
 804f620:	bf00      	nop
 804f622:	46bd      	mov	sp, r7
 804f624:	f85d 7b04 	ldr.w	r7, [sp], #4
 804f628:	4770      	bx	lr
 804f62a:	bf00      	nop
 804f62c:	20007cb0 	.word	0x20007cb0
 804f630:	2001c320 	.word	0x2001c320

0804f634 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 804f634:	b480      	push	{r7}
 804f636:	af00      	add	r7, sp, #0
  return uwTick;
 804f638:	4b03      	ldr	r3, [pc, #12]	; (804f648 <HAL_GetTick+0x14>)
 804f63a:	681b      	ldr	r3, [r3, #0]
}
 804f63c:	4618      	mov	r0, r3
 804f63e:	46bd      	mov	sp, r7
 804f640:	f85d 7b04 	ldr.w	r7, [sp], #4
 804f644:	4770      	bx	lr
 804f646:	bf00      	nop
 804f648:	2001c320 	.word	0x2001c320

0804f64c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 804f64c:	b580      	push	{r7, lr}
 804f64e:	b084      	sub	sp, #16
 804f650:	af00      	add	r7, sp, #0
 804f652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 804f654:	f7ff ffee 	bl	804f634 <HAL_GetTick>
 804f658:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 804f65a:	687b      	ldr	r3, [r7, #4]
 804f65c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 804f65e:	68fb      	ldr	r3, [r7, #12]
 804f660:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 804f664:	d005      	beq.n	804f672 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 804f666:	4b0a      	ldr	r3, [pc, #40]	; (804f690 <HAL_Delay+0x44>)
 804f668:	781b      	ldrb	r3, [r3, #0]
 804f66a:	461a      	mov	r2, r3
 804f66c:	68fb      	ldr	r3, [r7, #12]
 804f66e:	4413      	add	r3, r2
 804f670:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 804f672:	bf00      	nop
 804f674:	f7ff ffde 	bl	804f634 <HAL_GetTick>
 804f678:	4602      	mov	r2, r0
 804f67a:	68bb      	ldr	r3, [r7, #8]
 804f67c:	1ad3      	subs	r3, r2, r3
 804f67e:	68fa      	ldr	r2, [r7, #12]
 804f680:	429a      	cmp	r2, r3
 804f682:	d8f7      	bhi.n	804f674 <HAL_Delay+0x28>
  {
  }
}
 804f684:	bf00      	nop
 804f686:	bf00      	nop
 804f688:	3710      	adds	r7, #16
 804f68a:	46bd      	mov	sp, r7
 804f68c:	bd80      	pop	{r7, pc}
 804f68e:	bf00      	nop
 804f690:	20007cb0 	.word	0x20007cb0

0804f694 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 804f694:	b580      	push	{r7, lr}
 804f696:	b084      	sub	sp, #16
 804f698:	af00      	add	r7, sp, #0
 804f69a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 804f69c:	687b      	ldr	r3, [r7, #4]
 804f69e:	2b00      	cmp	r3, #0
 804f6a0:	d101      	bne.n	804f6a6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 804f6a2:	2301      	movs	r3, #1
 804f6a4:	e0ed      	b.n	804f882 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 804f6a6:	687b      	ldr	r3, [r7, #4]
 804f6a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 804f6ac:	b2db      	uxtb	r3, r3
 804f6ae:	2b00      	cmp	r3, #0
 804f6b0:	d102      	bne.n	804f6b8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 804f6b2:	6878      	ldr	r0, [r7, #4]
 804f6b4:	f7fe fa36 	bl	804db24 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 804f6b8:	687b      	ldr	r3, [r7, #4]
 804f6ba:	681b      	ldr	r3, [r3, #0]
 804f6bc:	681a      	ldr	r2, [r3, #0]
 804f6be:	687b      	ldr	r3, [r7, #4]
 804f6c0:	681b      	ldr	r3, [r3, #0]
 804f6c2:	f022 0202 	bic.w	r2, r2, #2
 804f6c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 804f6c8:	f7ff ffb4 	bl	804f634 <HAL_GetTick>
 804f6cc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 804f6ce:	e012      	b.n	804f6f6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 804f6d0:	f7ff ffb0 	bl	804f634 <HAL_GetTick>
 804f6d4:	4602      	mov	r2, r0
 804f6d6:	68fb      	ldr	r3, [r7, #12]
 804f6d8:	1ad3      	subs	r3, r2, r3
 804f6da:	2b0a      	cmp	r3, #10
 804f6dc:	d90b      	bls.n	804f6f6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 804f6de:	687b      	ldr	r3, [r7, #4]
 804f6e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804f6e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 804f6e6:	687b      	ldr	r3, [r7, #4]
 804f6e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 804f6ea:	687b      	ldr	r3, [r7, #4]
 804f6ec:	2205      	movs	r2, #5
 804f6ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 804f6f2:	2301      	movs	r3, #1
 804f6f4:	e0c5      	b.n	804f882 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 804f6f6:	687b      	ldr	r3, [r7, #4]
 804f6f8:	681b      	ldr	r3, [r3, #0]
 804f6fa:	685b      	ldr	r3, [r3, #4]
 804f6fc:	f003 0302 	and.w	r3, r3, #2
 804f700:	2b00      	cmp	r3, #0
 804f702:	d1e5      	bne.n	804f6d0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 804f704:	687b      	ldr	r3, [r7, #4]
 804f706:	681b      	ldr	r3, [r3, #0]
 804f708:	681a      	ldr	r2, [r3, #0]
 804f70a:	687b      	ldr	r3, [r7, #4]
 804f70c:	681b      	ldr	r3, [r3, #0]
 804f70e:	f042 0201 	orr.w	r2, r2, #1
 804f712:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 804f714:	f7ff ff8e 	bl	804f634 <HAL_GetTick>
 804f718:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 804f71a:	e012      	b.n	804f742 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 804f71c:	f7ff ff8a 	bl	804f634 <HAL_GetTick>
 804f720:	4602      	mov	r2, r0
 804f722:	68fb      	ldr	r3, [r7, #12]
 804f724:	1ad3      	subs	r3, r2, r3
 804f726:	2b0a      	cmp	r3, #10
 804f728:	d90b      	bls.n	804f742 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 804f72a:	687b      	ldr	r3, [r7, #4]
 804f72c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804f72e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 804f732:	687b      	ldr	r3, [r7, #4]
 804f734:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 804f736:	687b      	ldr	r3, [r7, #4]
 804f738:	2205      	movs	r2, #5
 804f73a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 804f73e:	2301      	movs	r3, #1
 804f740:	e09f      	b.n	804f882 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 804f742:	687b      	ldr	r3, [r7, #4]
 804f744:	681b      	ldr	r3, [r3, #0]
 804f746:	685b      	ldr	r3, [r3, #4]
 804f748:	f003 0301 	and.w	r3, r3, #1
 804f74c:	2b00      	cmp	r3, #0
 804f74e:	d0e5      	beq.n	804f71c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 804f750:	687b      	ldr	r3, [r7, #4]
 804f752:	7e1b      	ldrb	r3, [r3, #24]
 804f754:	2b01      	cmp	r3, #1
 804f756:	d108      	bne.n	804f76a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 804f758:	687b      	ldr	r3, [r7, #4]
 804f75a:	681b      	ldr	r3, [r3, #0]
 804f75c:	681a      	ldr	r2, [r3, #0]
 804f75e:	687b      	ldr	r3, [r7, #4]
 804f760:	681b      	ldr	r3, [r3, #0]
 804f762:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 804f766:	601a      	str	r2, [r3, #0]
 804f768:	e007      	b.n	804f77a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 804f76a:	687b      	ldr	r3, [r7, #4]
 804f76c:	681b      	ldr	r3, [r3, #0]
 804f76e:	681a      	ldr	r2, [r3, #0]
 804f770:	687b      	ldr	r3, [r7, #4]
 804f772:	681b      	ldr	r3, [r3, #0]
 804f774:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 804f778:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 804f77a:	687b      	ldr	r3, [r7, #4]
 804f77c:	7e5b      	ldrb	r3, [r3, #25]
 804f77e:	2b01      	cmp	r3, #1
 804f780:	d108      	bne.n	804f794 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 804f782:	687b      	ldr	r3, [r7, #4]
 804f784:	681b      	ldr	r3, [r3, #0]
 804f786:	681a      	ldr	r2, [r3, #0]
 804f788:	687b      	ldr	r3, [r7, #4]
 804f78a:	681b      	ldr	r3, [r3, #0]
 804f78c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 804f790:	601a      	str	r2, [r3, #0]
 804f792:	e007      	b.n	804f7a4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 804f794:	687b      	ldr	r3, [r7, #4]
 804f796:	681b      	ldr	r3, [r3, #0]
 804f798:	681a      	ldr	r2, [r3, #0]
 804f79a:	687b      	ldr	r3, [r7, #4]
 804f79c:	681b      	ldr	r3, [r3, #0]
 804f79e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 804f7a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 804f7a4:	687b      	ldr	r3, [r7, #4]
 804f7a6:	7e9b      	ldrb	r3, [r3, #26]
 804f7a8:	2b01      	cmp	r3, #1
 804f7aa:	d108      	bne.n	804f7be <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 804f7ac:	687b      	ldr	r3, [r7, #4]
 804f7ae:	681b      	ldr	r3, [r3, #0]
 804f7b0:	681a      	ldr	r2, [r3, #0]
 804f7b2:	687b      	ldr	r3, [r7, #4]
 804f7b4:	681b      	ldr	r3, [r3, #0]
 804f7b6:	f042 0220 	orr.w	r2, r2, #32
 804f7ba:	601a      	str	r2, [r3, #0]
 804f7bc:	e007      	b.n	804f7ce <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 804f7be:	687b      	ldr	r3, [r7, #4]
 804f7c0:	681b      	ldr	r3, [r3, #0]
 804f7c2:	681a      	ldr	r2, [r3, #0]
 804f7c4:	687b      	ldr	r3, [r7, #4]
 804f7c6:	681b      	ldr	r3, [r3, #0]
 804f7c8:	f022 0220 	bic.w	r2, r2, #32
 804f7cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 804f7ce:	687b      	ldr	r3, [r7, #4]
 804f7d0:	7edb      	ldrb	r3, [r3, #27]
 804f7d2:	2b01      	cmp	r3, #1
 804f7d4:	d108      	bne.n	804f7e8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 804f7d6:	687b      	ldr	r3, [r7, #4]
 804f7d8:	681b      	ldr	r3, [r3, #0]
 804f7da:	681a      	ldr	r2, [r3, #0]
 804f7dc:	687b      	ldr	r3, [r7, #4]
 804f7de:	681b      	ldr	r3, [r3, #0]
 804f7e0:	f022 0210 	bic.w	r2, r2, #16
 804f7e4:	601a      	str	r2, [r3, #0]
 804f7e6:	e007      	b.n	804f7f8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 804f7e8:	687b      	ldr	r3, [r7, #4]
 804f7ea:	681b      	ldr	r3, [r3, #0]
 804f7ec:	681a      	ldr	r2, [r3, #0]
 804f7ee:	687b      	ldr	r3, [r7, #4]
 804f7f0:	681b      	ldr	r3, [r3, #0]
 804f7f2:	f042 0210 	orr.w	r2, r2, #16
 804f7f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 804f7f8:	687b      	ldr	r3, [r7, #4]
 804f7fa:	7f1b      	ldrb	r3, [r3, #28]
 804f7fc:	2b01      	cmp	r3, #1
 804f7fe:	d108      	bne.n	804f812 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 804f800:	687b      	ldr	r3, [r7, #4]
 804f802:	681b      	ldr	r3, [r3, #0]
 804f804:	681a      	ldr	r2, [r3, #0]
 804f806:	687b      	ldr	r3, [r7, #4]
 804f808:	681b      	ldr	r3, [r3, #0]
 804f80a:	f042 0208 	orr.w	r2, r2, #8
 804f80e:	601a      	str	r2, [r3, #0]
 804f810:	e007      	b.n	804f822 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 804f812:	687b      	ldr	r3, [r7, #4]
 804f814:	681b      	ldr	r3, [r3, #0]
 804f816:	681a      	ldr	r2, [r3, #0]
 804f818:	687b      	ldr	r3, [r7, #4]
 804f81a:	681b      	ldr	r3, [r3, #0]
 804f81c:	f022 0208 	bic.w	r2, r2, #8
 804f820:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 804f822:	687b      	ldr	r3, [r7, #4]
 804f824:	7f5b      	ldrb	r3, [r3, #29]
 804f826:	2b01      	cmp	r3, #1
 804f828:	d108      	bne.n	804f83c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 804f82a:	687b      	ldr	r3, [r7, #4]
 804f82c:	681b      	ldr	r3, [r3, #0]
 804f82e:	681a      	ldr	r2, [r3, #0]
 804f830:	687b      	ldr	r3, [r7, #4]
 804f832:	681b      	ldr	r3, [r3, #0]
 804f834:	f042 0204 	orr.w	r2, r2, #4
 804f838:	601a      	str	r2, [r3, #0]
 804f83a:	e007      	b.n	804f84c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 804f83c:	687b      	ldr	r3, [r7, #4]
 804f83e:	681b      	ldr	r3, [r3, #0]
 804f840:	681a      	ldr	r2, [r3, #0]
 804f842:	687b      	ldr	r3, [r7, #4]
 804f844:	681b      	ldr	r3, [r3, #0]
 804f846:	f022 0204 	bic.w	r2, r2, #4
 804f84a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 804f84c:	687b      	ldr	r3, [r7, #4]
 804f84e:	689a      	ldr	r2, [r3, #8]
 804f850:	687b      	ldr	r3, [r7, #4]
 804f852:	68db      	ldr	r3, [r3, #12]
 804f854:	431a      	orrs	r2, r3
 804f856:	687b      	ldr	r3, [r7, #4]
 804f858:	691b      	ldr	r3, [r3, #16]
 804f85a:	431a      	orrs	r2, r3
 804f85c:	687b      	ldr	r3, [r7, #4]
 804f85e:	695b      	ldr	r3, [r3, #20]
 804f860:	ea42 0103 	orr.w	r1, r2, r3
 804f864:	687b      	ldr	r3, [r7, #4]
 804f866:	685b      	ldr	r3, [r3, #4]
 804f868:	1e5a      	subs	r2, r3, #1
 804f86a:	687b      	ldr	r3, [r7, #4]
 804f86c:	681b      	ldr	r3, [r3, #0]
 804f86e:	430a      	orrs	r2, r1
 804f870:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 804f872:	687b      	ldr	r3, [r7, #4]
 804f874:	2200      	movs	r2, #0
 804f876:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 804f878:	687b      	ldr	r3, [r7, #4]
 804f87a:	2201      	movs	r2, #1
 804f87c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 804f880:	2300      	movs	r3, #0
}
 804f882:	4618      	mov	r0, r3
 804f884:	3710      	adds	r7, #16
 804f886:	46bd      	mov	sp, r7
 804f888:	bd80      	pop	{r7, pc}
	...

0804f88c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 804f88c:	b480      	push	{r7}
 804f88e:	b087      	sub	sp, #28
 804f890:	af00      	add	r7, sp, #0
 804f892:	6078      	str	r0, [r7, #4]
 804f894:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 804f896:	687b      	ldr	r3, [r7, #4]
 804f898:	681b      	ldr	r3, [r3, #0]
 804f89a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 804f89c:	687b      	ldr	r3, [r7, #4]
 804f89e:	f893 3020 	ldrb.w	r3, [r3, #32]
 804f8a2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 804f8a4:	7cfb      	ldrb	r3, [r7, #19]
 804f8a6:	2b01      	cmp	r3, #1
 804f8a8:	d003      	beq.n	804f8b2 <HAL_CAN_ConfigFilter+0x26>
 804f8aa:	7cfb      	ldrb	r3, [r7, #19]
 804f8ac:	2b02      	cmp	r3, #2
 804f8ae:	f040 80be 	bne.w	804fa2e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 804f8b2:	4b65      	ldr	r3, [pc, #404]	; (804fa48 <HAL_CAN_ConfigFilter+0x1bc>)
 804f8b4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 804f8b6:	697b      	ldr	r3, [r7, #20]
 804f8b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 804f8bc:	f043 0201 	orr.w	r2, r3, #1
 804f8c0:	697b      	ldr	r3, [r7, #20]
 804f8c2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 804f8c6:	697b      	ldr	r3, [r7, #20]
 804f8c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 804f8cc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 804f8d0:	697b      	ldr	r3, [r7, #20]
 804f8d2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 804f8d6:	697b      	ldr	r3, [r7, #20]
 804f8d8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 804f8dc:	683b      	ldr	r3, [r7, #0]
 804f8de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804f8e0:	021b      	lsls	r3, r3, #8
 804f8e2:	431a      	orrs	r2, r3
 804f8e4:	697b      	ldr	r3, [r7, #20]
 804f8e6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 804f8ea:	683b      	ldr	r3, [r7, #0]
 804f8ec:	695b      	ldr	r3, [r3, #20]
 804f8ee:	f003 031f 	and.w	r3, r3, #31
 804f8f2:	2201      	movs	r2, #1
 804f8f4:	fa02 f303 	lsl.w	r3, r2, r3
 804f8f8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 804f8fa:	697b      	ldr	r3, [r7, #20]
 804f8fc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 804f900:	68fb      	ldr	r3, [r7, #12]
 804f902:	43db      	mvns	r3, r3
 804f904:	401a      	ands	r2, r3
 804f906:	697b      	ldr	r3, [r7, #20]
 804f908:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 804f90c:	683b      	ldr	r3, [r7, #0]
 804f90e:	69db      	ldr	r3, [r3, #28]
 804f910:	2b00      	cmp	r3, #0
 804f912:	d123      	bne.n	804f95c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 804f914:	697b      	ldr	r3, [r7, #20]
 804f916:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 804f91a:	68fb      	ldr	r3, [r7, #12]
 804f91c:	43db      	mvns	r3, r3
 804f91e:	401a      	ands	r2, r3
 804f920:	697b      	ldr	r3, [r7, #20]
 804f922:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 804f926:	683b      	ldr	r3, [r7, #0]
 804f928:	68db      	ldr	r3, [r3, #12]
 804f92a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 804f92c:	683b      	ldr	r3, [r7, #0]
 804f92e:	685b      	ldr	r3, [r3, #4]
 804f930:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 804f932:	683a      	ldr	r2, [r7, #0]
 804f934:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 804f936:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 804f938:	697b      	ldr	r3, [r7, #20]
 804f93a:	3248      	adds	r2, #72	; 0x48
 804f93c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 804f940:	683b      	ldr	r3, [r7, #0]
 804f942:	689b      	ldr	r3, [r3, #8]
 804f944:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 804f946:	683b      	ldr	r3, [r7, #0]
 804f948:	681b      	ldr	r3, [r3, #0]
 804f94a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 804f94c:	683b      	ldr	r3, [r7, #0]
 804f94e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 804f950:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 804f952:	6979      	ldr	r1, [r7, #20]
 804f954:	3348      	adds	r3, #72	; 0x48
 804f956:	00db      	lsls	r3, r3, #3
 804f958:	440b      	add	r3, r1
 804f95a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 804f95c:	683b      	ldr	r3, [r7, #0]
 804f95e:	69db      	ldr	r3, [r3, #28]
 804f960:	2b01      	cmp	r3, #1
 804f962:	d122      	bne.n	804f9aa <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 804f964:	697b      	ldr	r3, [r7, #20]
 804f966:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 804f96a:	68fb      	ldr	r3, [r7, #12]
 804f96c:	431a      	orrs	r2, r3
 804f96e:	697b      	ldr	r3, [r7, #20]
 804f970:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 804f974:	683b      	ldr	r3, [r7, #0]
 804f976:	681b      	ldr	r3, [r3, #0]
 804f978:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 804f97a:	683b      	ldr	r3, [r7, #0]
 804f97c:	685b      	ldr	r3, [r3, #4]
 804f97e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 804f980:	683a      	ldr	r2, [r7, #0]
 804f982:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 804f984:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 804f986:	697b      	ldr	r3, [r7, #20]
 804f988:	3248      	adds	r2, #72	; 0x48
 804f98a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 804f98e:	683b      	ldr	r3, [r7, #0]
 804f990:	689b      	ldr	r3, [r3, #8]
 804f992:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 804f994:	683b      	ldr	r3, [r7, #0]
 804f996:	68db      	ldr	r3, [r3, #12]
 804f998:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 804f99a:	683b      	ldr	r3, [r7, #0]
 804f99c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 804f99e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 804f9a0:	6979      	ldr	r1, [r7, #20]
 804f9a2:	3348      	adds	r3, #72	; 0x48
 804f9a4:	00db      	lsls	r3, r3, #3
 804f9a6:	440b      	add	r3, r1
 804f9a8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 804f9aa:	683b      	ldr	r3, [r7, #0]
 804f9ac:	699b      	ldr	r3, [r3, #24]
 804f9ae:	2b00      	cmp	r3, #0
 804f9b0:	d109      	bne.n	804f9c6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 804f9b2:	697b      	ldr	r3, [r7, #20]
 804f9b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 804f9b8:	68fb      	ldr	r3, [r7, #12]
 804f9ba:	43db      	mvns	r3, r3
 804f9bc:	401a      	ands	r2, r3
 804f9be:	697b      	ldr	r3, [r7, #20]
 804f9c0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 804f9c4:	e007      	b.n	804f9d6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 804f9c6:	697b      	ldr	r3, [r7, #20]
 804f9c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 804f9cc:	68fb      	ldr	r3, [r7, #12]
 804f9ce:	431a      	orrs	r2, r3
 804f9d0:	697b      	ldr	r3, [r7, #20]
 804f9d2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 804f9d6:	683b      	ldr	r3, [r7, #0]
 804f9d8:	691b      	ldr	r3, [r3, #16]
 804f9da:	2b00      	cmp	r3, #0
 804f9dc:	d109      	bne.n	804f9f2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 804f9de:	697b      	ldr	r3, [r7, #20]
 804f9e0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 804f9e4:	68fb      	ldr	r3, [r7, #12]
 804f9e6:	43db      	mvns	r3, r3
 804f9e8:	401a      	ands	r2, r3
 804f9ea:	697b      	ldr	r3, [r7, #20]
 804f9ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 804f9f0:	e007      	b.n	804fa02 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 804f9f2:	697b      	ldr	r3, [r7, #20]
 804f9f4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 804f9f8:	68fb      	ldr	r3, [r7, #12]
 804f9fa:	431a      	orrs	r2, r3
 804f9fc:	697b      	ldr	r3, [r7, #20]
 804f9fe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 804fa02:	683b      	ldr	r3, [r7, #0]
 804fa04:	6a1b      	ldr	r3, [r3, #32]
 804fa06:	2b01      	cmp	r3, #1
 804fa08:	d107      	bne.n	804fa1a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 804fa0a:	697b      	ldr	r3, [r7, #20]
 804fa0c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 804fa10:	68fb      	ldr	r3, [r7, #12]
 804fa12:	431a      	orrs	r2, r3
 804fa14:	697b      	ldr	r3, [r7, #20]
 804fa16:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 804fa1a:	697b      	ldr	r3, [r7, #20]
 804fa1c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 804fa20:	f023 0201 	bic.w	r2, r3, #1
 804fa24:	697b      	ldr	r3, [r7, #20]
 804fa26:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 804fa2a:	2300      	movs	r3, #0
 804fa2c:	e006      	b.n	804fa3c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 804fa2e:	687b      	ldr	r3, [r7, #4]
 804fa30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804fa32:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 804fa36:	687b      	ldr	r3, [r7, #4]
 804fa38:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 804fa3a:	2301      	movs	r3, #1
  }
}
 804fa3c:	4618      	mov	r0, r3
 804fa3e:	371c      	adds	r7, #28
 804fa40:	46bd      	mov	sp, r7
 804fa42:	f85d 7b04 	ldr.w	r7, [sp], #4
 804fa46:	4770      	bx	lr
 804fa48:	40006400 	.word	0x40006400

0804fa4c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 804fa4c:	b580      	push	{r7, lr}
 804fa4e:	b084      	sub	sp, #16
 804fa50:	af00      	add	r7, sp, #0
 804fa52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 804fa54:	687b      	ldr	r3, [r7, #4]
 804fa56:	f893 3020 	ldrb.w	r3, [r3, #32]
 804fa5a:	b2db      	uxtb	r3, r3
 804fa5c:	2b01      	cmp	r3, #1
 804fa5e:	d12e      	bne.n	804fabe <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 804fa60:	687b      	ldr	r3, [r7, #4]
 804fa62:	2202      	movs	r2, #2
 804fa64:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 804fa68:	687b      	ldr	r3, [r7, #4]
 804fa6a:	681b      	ldr	r3, [r3, #0]
 804fa6c:	681a      	ldr	r2, [r3, #0]
 804fa6e:	687b      	ldr	r3, [r7, #4]
 804fa70:	681b      	ldr	r3, [r3, #0]
 804fa72:	f022 0201 	bic.w	r2, r2, #1
 804fa76:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 804fa78:	f7ff fddc 	bl	804f634 <HAL_GetTick>
 804fa7c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 804fa7e:	e012      	b.n	804faa6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 804fa80:	f7ff fdd8 	bl	804f634 <HAL_GetTick>
 804fa84:	4602      	mov	r2, r0
 804fa86:	68fb      	ldr	r3, [r7, #12]
 804fa88:	1ad3      	subs	r3, r2, r3
 804fa8a:	2b0a      	cmp	r3, #10
 804fa8c:	d90b      	bls.n	804faa6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 804fa8e:	687b      	ldr	r3, [r7, #4]
 804fa90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804fa92:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 804fa96:	687b      	ldr	r3, [r7, #4]
 804fa98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 804fa9a:	687b      	ldr	r3, [r7, #4]
 804fa9c:	2205      	movs	r2, #5
 804fa9e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 804faa2:	2301      	movs	r3, #1
 804faa4:	e012      	b.n	804facc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 804faa6:	687b      	ldr	r3, [r7, #4]
 804faa8:	681b      	ldr	r3, [r3, #0]
 804faaa:	685b      	ldr	r3, [r3, #4]
 804faac:	f003 0301 	and.w	r3, r3, #1
 804fab0:	2b00      	cmp	r3, #0
 804fab2:	d1e5      	bne.n	804fa80 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 804fab4:	687b      	ldr	r3, [r7, #4]
 804fab6:	2200      	movs	r2, #0
 804fab8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 804faba:	2300      	movs	r3, #0
 804fabc:	e006      	b.n	804facc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 804fabe:	687b      	ldr	r3, [r7, #4]
 804fac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804fac2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 804fac6:	687b      	ldr	r3, [r7, #4]
 804fac8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 804faca:	2301      	movs	r3, #1
  }
}
 804facc:	4618      	mov	r0, r3
 804face:	3710      	adds	r7, #16
 804fad0:	46bd      	mov	sp, r7
 804fad2:	bd80      	pop	{r7, pc}

0804fad4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 804fad4:	b480      	push	{r7}
 804fad6:	b089      	sub	sp, #36	; 0x24
 804fad8:	af00      	add	r7, sp, #0
 804fada:	60f8      	str	r0, [r7, #12]
 804fadc:	60b9      	str	r1, [r7, #8]
 804fade:	607a      	str	r2, [r7, #4]
 804fae0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 804fae2:	68fb      	ldr	r3, [r7, #12]
 804fae4:	f893 3020 	ldrb.w	r3, [r3, #32]
 804fae8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 804faea:	68fb      	ldr	r3, [r7, #12]
 804faec:	681b      	ldr	r3, [r3, #0]
 804faee:	689b      	ldr	r3, [r3, #8]
 804faf0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 804faf2:	7ffb      	ldrb	r3, [r7, #31]
 804faf4:	2b01      	cmp	r3, #1
 804faf6:	d003      	beq.n	804fb00 <HAL_CAN_AddTxMessage+0x2c>
 804faf8:	7ffb      	ldrb	r3, [r7, #31]
 804fafa:	2b02      	cmp	r3, #2
 804fafc:	f040 80b8 	bne.w	804fc70 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 804fb00:	69bb      	ldr	r3, [r7, #24]
 804fb02:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 804fb06:	2b00      	cmp	r3, #0
 804fb08:	d10a      	bne.n	804fb20 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 804fb0a:	69bb      	ldr	r3, [r7, #24]
 804fb0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 804fb10:	2b00      	cmp	r3, #0
 804fb12:	d105      	bne.n	804fb20 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 804fb14:	69bb      	ldr	r3, [r7, #24]
 804fb16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 804fb1a:	2b00      	cmp	r3, #0
 804fb1c:	f000 80a0 	beq.w	804fc60 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 804fb20:	69bb      	ldr	r3, [r7, #24]
 804fb22:	0e1b      	lsrs	r3, r3, #24
 804fb24:	f003 0303 	and.w	r3, r3, #3
 804fb28:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 804fb2a:	697b      	ldr	r3, [r7, #20]
 804fb2c:	2b02      	cmp	r3, #2
 804fb2e:	d907      	bls.n	804fb40 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 804fb30:	68fb      	ldr	r3, [r7, #12]
 804fb32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804fb34:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 804fb38:	68fb      	ldr	r3, [r7, #12]
 804fb3a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 804fb3c:	2301      	movs	r3, #1
 804fb3e:	e09e      	b.n	804fc7e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 804fb40:	2201      	movs	r2, #1
 804fb42:	697b      	ldr	r3, [r7, #20]
 804fb44:	409a      	lsls	r2, r3
 804fb46:	683b      	ldr	r3, [r7, #0]
 804fb48:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 804fb4a:	68bb      	ldr	r3, [r7, #8]
 804fb4c:	689b      	ldr	r3, [r3, #8]
 804fb4e:	2b00      	cmp	r3, #0
 804fb50:	d10d      	bne.n	804fb6e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 804fb52:	68bb      	ldr	r3, [r7, #8]
 804fb54:	681b      	ldr	r3, [r3, #0]
 804fb56:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 804fb58:	68bb      	ldr	r3, [r7, #8]
 804fb5a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 804fb5c:	68f9      	ldr	r1, [r7, #12]
 804fb5e:	6809      	ldr	r1, [r1, #0]
 804fb60:	431a      	orrs	r2, r3
 804fb62:	697b      	ldr	r3, [r7, #20]
 804fb64:	3318      	adds	r3, #24
 804fb66:	011b      	lsls	r3, r3, #4
 804fb68:	440b      	add	r3, r1
 804fb6a:	601a      	str	r2, [r3, #0]
 804fb6c:	e00f      	b.n	804fb8e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 804fb6e:	68bb      	ldr	r3, [r7, #8]
 804fb70:	685b      	ldr	r3, [r3, #4]
 804fb72:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 804fb74:	68bb      	ldr	r3, [r7, #8]
 804fb76:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 804fb78:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 804fb7a:	68bb      	ldr	r3, [r7, #8]
 804fb7c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 804fb7e:	68f9      	ldr	r1, [r7, #12]
 804fb80:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 804fb82:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 804fb84:	697b      	ldr	r3, [r7, #20]
 804fb86:	3318      	adds	r3, #24
 804fb88:	011b      	lsls	r3, r3, #4
 804fb8a:	440b      	add	r3, r1
 804fb8c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 804fb8e:	68fb      	ldr	r3, [r7, #12]
 804fb90:	6819      	ldr	r1, [r3, #0]
 804fb92:	68bb      	ldr	r3, [r7, #8]
 804fb94:	691a      	ldr	r2, [r3, #16]
 804fb96:	697b      	ldr	r3, [r7, #20]
 804fb98:	3318      	adds	r3, #24
 804fb9a:	011b      	lsls	r3, r3, #4
 804fb9c:	440b      	add	r3, r1
 804fb9e:	3304      	adds	r3, #4
 804fba0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 804fba2:	68bb      	ldr	r3, [r7, #8]
 804fba4:	7d1b      	ldrb	r3, [r3, #20]
 804fba6:	2b01      	cmp	r3, #1
 804fba8:	d111      	bne.n	804fbce <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 804fbaa:	68fb      	ldr	r3, [r7, #12]
 804fbac:	681a      	ldr	r2, [r3, #0]
 804fbae:	697b      	ldr	r3, [r7, #20]
 804fbb0:	3318      	adds	r3, #24
 804fbb2:	011b      	lsls	r3, r3, #4
 804fbb4:	4413      	add	r3, r2
 804fbb6:	3304      	adds	r3, #4
 804fbb8:	681b      	ldr	r3, [r3, #0]
 804fbba:	68fa      	ldr	r2, [r7, #12]
 804fbbc:	6811      	ldr	r1, [r2, #0]
 804fbbe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 804fbc2:	697b      	ldr	r3, [r7, #20]
 804fbc4:	3318      	adds	r3, #24
 804fbc6:	011b      	lsls	r3, r3, #4
 804fbc8:	440b      	add	r3, r1
 804fbca:	3304      	adds	r3, #4
 804fbcc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 804fbce:	687b      	ldr	r3, [r7, #4]
 804fbd0:	3307      	adds	r3, #7
 804fbd2:	781b      	ldrb	r3, [r3, #0]
 804fbd4:	061a      	lsls	r2, r3, #24
 804fbd6:	687b      	ldr	r3, [r7, #4]
 804fbd8:	3306      	adds	r3, #6
 804fbda:	781b      	ldrb	r3, [r3, #0]
 804fbdc:	041b      	lsls	r3, r3, #16
 804fbde:	431a      	orrs	r2, r3
 804fbe0:	687b      	ldr	r3, [r7, #4]
 804fbe2:	3305      	adds	r3, #5
 804fbe4:	781b      	ldrb	r3, [r3, #0]
 804fbe6:	021b      	lsls	r3, r3, #8
 804fbe8:	4313      	orrs	r3, r2
 804fbea:	687a      	ldr	r2, [r7, #4]
 804fbec:	3204      	adds	r2, #4
 804fbee:	7812      	ldrb	r2, [r2, #0]
 804fbf0:	4610      	mov	r0, r2
 804fbf2:	68fa      	ldr	r2, [r7, #12]
 804fbf4:	6811      	ldr	r1, [r2, #0]
 804fbf6:	ea43 0200 	orr.w	r2, r3, r0
 804fbfa:	697b      	ldr	r3, [r7, #20]
 804fbfc:	011b      	lsls	r3, r3, #4
 804fbfe:	440b      	add	r3, r1
 804fc00:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 804fc04:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 804fc06:	687b      	ldr	r3, [r7, #4]
 804fc08:	3303      	adds	r3, #3
 804fc0a:	781b      	ldrb	r3, [r3, #0]
 804fc0c:	061a      	lsls	r2, r3, #24
 804fc0e:	687b      	ldr	r3, [r7, #4]
 804fc10:	3302      	adds	r3, #2
 804fc12:	781b      	ldrb	r3, [r3, #0]
 804fc14:	041b      	lsls	r3, r3, #16
 804fc16:	431a      	orrs	r2, r3
 804fc18:	687b      	ldr	r3, [r7, #4]
 804fc1a:	3301      	adds	r3, #1
 804fc1c:	781b      	ldrb	r3, [r3, #0]
 804fc1e:	021b      	lsls	r3, r3, #8
 804fc20:	4313      	orrs	r3, r2
 804fc22:	687a      	ldr	r2, [r7, #4]
 804fc24:	7812      	ldrb	r2, [r2, #0]
 804fc26:	4610      	mov	r0, r2
 804fc28:	68fa      	ldr	r2, [r7, #12]
 804fc2a:	6811      	ldr	r1, [r2, #0]
 804fc2c:	ea43 0200 	orr.w	r2, r3, r0
 804fc30:	697b      	ldr	r3, [r7, #20]
 804fc32:	011b      	lsls	r3, r3, #4
 804fc34:	440b      	add	r3, r1
 804fc36:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 804fc3a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 804fc3c:	68fb      	ldr	r3, [r7, #12]
 804fc3e:	681a      	ldr	r2, [r3, #0]
 804fc40:	697b      	ldr	r3, [r7, #20]
 804fc42:	3318      	adds	r3, #24
 804fc44:	011b      	lsls	r3, r3, #4
 804fc46:	4413      	add	r3, r2
 804fc48:	681b      	ldr	r3, [r3, #0]
 804fc4a:	68fa      	ldr	r2, [r7, #12]
 804fc4c:	6811      	ldr	r1, [r2, #0]
 804fc4e:	f043 0201 	orr.w	r2, r3, #1
 804fc52:	697b      	ldr	r3, [r7, #20]
 804fc54:	3318      	adds	r3, #24
 804fc56:	011b      	lsls	r3, r3, #4
 804fc58:	440b      	add	r3, r1
 804fc5a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 804fc5c:	2300      	movs	r3, #0
 804fc5e:	e00e      	b.n	804fc7e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 804fc60:	68fb      	ldr	r3, [r7, #12]
 804fc62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804fc64:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 804fc68:	68fb      	ldr	r3, [r7, #12]
 804fc6a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 804fc6c:	2301      	movs	r3, #1
 804fc6e:	e006      	b.n	804fc7e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 804fc70:	68fb      	ldr	r3, [r7, #12]
 804fc72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804fc74:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 804fc78:	68fb      	ldr	r3, [r7, #12]
 804fc7a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 804fc7c:	2301      	movs	r3, #1
  }
}
 804fc7e:	4618      	mov	r0, r3
 804fc80:	3724      	adds	r7, #36	; 0x24
 804fc82:	46bd      	mov	sp, r7
 804fc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 804fc88:	4770      	bx	lr

0804fc8a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 804fc8a:	b480      	push	{r7}
 804fc8c:	b087      	sub	sp, #28
 804fc8e:	af00      	add	r7, sp, #0
 804fc90:	60f8      	str	r0, [r7, #12]
 804fc92:	60b9      	str	r1, [r7, #8]
 804fc94:	607a      	str	r2, [r7, #4]
 804fc96:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 804fc98:	68fb      	ldr	r3, [r7, #12]
 804fc9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 804fc9e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 804fca0:	7dfb      	ldrb	r3, [r7, #23]
 804fca2:	2b01      	cmp	r3, #1
 804fca4:	d003      	beq.n	804fcae <HAL_CAN_GetRxMessage+0x24>
 804fca6:	7dfb      	ldrb	r3, [r7, #23]
 804fca8:	2b02      	cmp	r3, #2
 804fcaa:	f040 80f3 	bne.w	804fe94 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 804fcae:	68bb      	ldr	r3, [r7, #8]
 804fcb0:	2b00      	cmp	r3, #0
 804fcb2:	d10e      	bne.n	804fcd2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 804fcb4:	68fb      	ldr	r3, [r7, #12]
 804fcb6:	681b      	ldr	r3, [r3, #0]
 804fcb8:	68db      	ldr	r3, [r3, #12]
 804fcba:	f003 0303 	and.w	r3, r3, #3
 804fcbe:	2b00      	cmp	r3, #0
 804fcc0:	d116      	bne.n	804fcf0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 804fcc2:	68fb      	ldr	r3, [r7, #12]
 804fcc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804fcc6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 804fcca:	68fb      	ldr	r3, [r7, #12]
 804fccc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 804fcce:	2301      	movs	r3, #1
 804fcd0:	e0e7      	b.n	804fea2 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 804fcd2:	68fb      	ldr	r3, [r7, #12]
 804fcd4:	681b      	ldr	r3, [r3, #0]
 804fcd6:	691b      	ldr	r3, [r3, #16]
 804fcd8:	f003 0303 	and.w	r3, r3, #3
 804fcdc:	2b00      	cmp	r3, #0
 804fcde:	d107      	bne.n	804fcf0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 804fce0:	68fb      	ldr	r3, [r7, #12]
 804fce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804fce4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 804fce8:	68fb      	ldr	r3, [r7, #12]
 804fcea:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 804fcec:	2301      	movs	r3, #1
 804fcee:	e0d8      	b.n	804fea2 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 804fcf0:	68fb      	ldr	r3, [r7, #12]
 804fcf2:	681a      	ldr	r2, [r3, #0]
 804fcf4:	68bb      	ldr	r3, [r7, #8]
 804fcf6:	331b      	adds	r3, #27
 804fcf8:	011b      	lsls	r3, r3, #4
 804fcfa:	4413      	add	r3, r2
 804fcfc:	681b      	ldr	r3, [r3, #0]
 804fcfe:	f003 0204 	and.w	r2, r3, #4
 804fd02:	687b      	ldr	r3, [r7, #4]
 804fd04:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 804fd06:	687b      	ldr	r3, [r7, #4]
 804fd08:	689b      	ldr	r3, [r3, #8]
 804fd0a:	2b00      	cmp	r3, #0
 804fd0c:	d10c      	bne.n	804fd28 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 804fd0e:	68fb      	ldr	r3, [r7, #12]
 804fd10:	681a      	ldr	r2, [r3, #0]
 804fd12:	68bb      	ldr	r3, [r7, #8]
 804fd14:	331b      	adds	r3, #27
 804fd16:	011b      	lsls	r3, r3, #4
 804fd18:	4413      	add	r3, r2
 804fd1a:	681b      	ldr	r3, [r3, #0]
 804fd1c:	0d5b      	lsrs	r3, r3, #21
 804fd1e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 804fd22:	687b      	ldr	r3, [r7, #4]
 804fd24:	601a      	str	r2, [r3, #0]
 804fd26:	e00b      	b.n	804fd40 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 804fd28:	68fb      	ldr	r3, [r7, #12]
 804fd2a:	681a      	ldr	r2, [r3, #0]
 804fd2c:	68bb      	ldr	r3, [r7, #8]
 804fd2e:	331b      	adds	r3, #27
 804fd30:	011b      	lsls	r3, r3, #4
 804fd32:	4413      	add	r3, r2
 804fd34:	681b      	ldr	r3, [r3, #0]
 804fd36:	08db      	lsrs	r3, r3, #3
 804fd38:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 804fd3c:	687b      	ldr	r3, [r7, #4]
 804fd3e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 804fd40:	68fb      	ldr	r3, [r7, #12]
 804fd42:	681a      	ldr	r2, [r3, #0]
 804fd44:	68bb      	ldr	r3, [r7, #8]
 804fd46:	331b      	adds	r3, #27
 804fd48:	011b      	lsls	r3, r3, #4
 804fd4a:	4413      	add	r3, r2
 804fd4c:	681b      	ldr	r3, [r3, #0]
 804fd4e:	f003 0202 	and.w	r2, r3, #2
 804fd52:	687b      	ldr	r3, [r7, #4]
 804fd54:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 804fd56:	68fb      	ldr	r3, [r7, #12]
 804fd58:	681a      	ldr	r2, [r3, #0]
 804fd5a:	68bb      	ldr	r3, [r7, #8]
 804fd5c:	331b      	adds	r3, #27
 804fd5e:	011b      	lsls	r3, r3, #4
 804fd60:	4413      	add	r3, r2
 804fd62:	3304      	adds	r3, #4
 804fd64:	681b      	ldr	r3, [r3, #0]
 804fd66:	f003 020f 	and.w	r2, r3, #15
 804fd6a:	687b      	ldr	r3, [r7, #4]
 804fd6c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 804fd6e:	68fb      	ldr	r3, [r7, #12]
 804fd70:	681a      	ldr	r2, [r3, #0]
 804fd72:	68bb      	ldr	r3, [r7, #8]
 804fd74:	331b      	adds	r3, #27
 804fd76:	011b      	lsls	r3, r3, #4
 804fd78:	4413      	add	r3, r2
 804fd7a:	3304      	adds	r3, #4
 804fd7c:	681b      	ldr	r3, [r3, #0]
 804fd7e:	0a1b      	lsrs	r3, r3, #8
 804fd80:	b2da      	uxtb	r2, r3
 804fd82:	687b      	ldr	r3, [r7, #4]
 804fd84:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 804fd86:	68fb      	ldr	r3, [r7, #12]
 804fd88:	681a      	ldr	r2, [r3, #0]
 804fd8a:	68bb      	ldr	r3, [r7, #8]
 804fd8c:	331b      	adds	r3, #27
 804fd8e:	011b      	lsls	r3, r3, #4
 804fd90:	4413      	add	r3, r2
 804fd92:	3304      	adds	r3, #4
 804fd94:	681b      	ldr	r3, [r3, #0]
 804fd96:	0c1b      	lsrs	r3, r3, #16
 804fd98:	b29a      	uxth	r2, r3
 804fd9a:	687b      	ldr	r3, [r7, #4]
 804fd9c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 804fd9e:	68fb      	ldr	r3, [r7, #12]
 804fda0:	681a      	ldr	r2, [r3, #0]
 804fda2:	68bb      	ldr	r3, [r7, #8]
 804fda4:	011b      	lsls	r3, r3, #4
 804fda6:	4413      	add	r3, r2
 804fda8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 804fdac:	681b      	ldr	r3, [r3, #0]
 804fdae:	b2da      	uxtb	r2, r3
 804fdb0:	683b      	ldr	r3, [r7, #0]
 804fdb2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 804fdb4:	68fb      	ldr	r3, [r7, #12]
 804fdb6:	681a      	ldr	r2, [r3, #0]
 804fdb8:	68bb      	ldr	r3, [r7, #8]
 804fdba:	011b      	lsls	r3, r3, #4
 804fdbc:	4413      	add	r3, r2
 804fdbe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 804fdc2:	681b      	ldr	r3, [r3, #0]
 804fdc4:	0a1a      	lsrs	r2, r3, #8
 804fdc6:	683b      	ldr	r3, [r7, #0]
 804fdc8:	3301      	adds	r3, #1
 804fdca:	b2d2      	uxtb	r2, r2
 804fdcc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 804fdce:	68fb      	ldr	r3, [r7, #12]
 804fdd0:	681a      	ldr	r2, [r3, #0]
 804fdd2:	68bb      	ldr	r3, [r7, #8]
 804fdd4:	011b      	lsls	r3, r3, #4
 804fdd6:	4413      	add	r3, r2
 804fdd8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 804fddc:	681b      	ldr	r3, [r3, #0]
 804fdde:	0c1a      	lsrs	r2, r3, #16
 804fde0:	683b      	ldr	r3, [r7, #0]
 804fde2:	3302      	adds	r3, #2
 804fde4:	b2d2      	uxtb	r2, r2
 804fde6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 804fde8:	68fb      	ldr	r3, [r7, #12]
 804fdea:	681a      	ldr	r2, [r3, #0]
 804fdec:	68bb      	ldr	r3, [r7, #8]
 804fdee:	011b      	lsls	r3, r3, #4
 804fdf0:	4413      	add	r3, r2
 804fdf2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 804fdf6:	681b      	ldr	r3, [r3, #0]
 804fdf8:	0e1a      	lsrs	r2, r3, #24
 804fdfa:	683b      	ldr	r3, [r7, #0]
 804fdfc:	3303      	adds	r3, #3
 804fdfe:	b2d2      	uxtb	r2, r2
 804fe00:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 804fe02:	68fb      	ldr	r3, [r7, #12]
 804fe04:	681a      	ldr	r2, [r3, #0]
 804fe06:	68bb      	ldr	r3, [r7, #8]
 804fe08:	011b      	lsls	r3, r3, #4
 804fe0a:	4413      	add	r3, r2
 804fe0c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 804fe10:	681a      	ldr	r2, [r3, #0]
 804fe12:	683b      	ldr	r3, [r7, #0]
 804fe14:	3304      	adds	r3, #4
 804fe16:	b2d2      	uxtb	r2, r2
 804fe18:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 804fe1a:	68fb      	ldr	r3, [r7, #12]
 804fe1c:	681a      	ldr	r2, [r3, #0]
 804fe1e:	68bb      	ldr	r3, [r7, #8]
 804fe20:	011b      	lsls	r3, r3, #4
 804fe22:	4413      	add	r3, r2
 804fe24:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 804fe28:	681b      	ldr	r3, [r3, #0]
 804fe2a:	0a1a      	lsrs	r2, r3, #8
 804fe2c:	683b      	ldr	r3, [r7, #0]
 804fe2e:	3305      	adds	r3, #5
 804fe30:	b2d2      	uxtb	r2, r2
 804fe32:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 804fe34:	68fb      	ldr	r3, [r7, #12]
 804fe36:	681a      	ldr	r2, [r3, #0]
 804fe38:	68bb      	ldr	r3, [r7, #8]
 804fe3a:	011b      	lsls	r3, r3, #4
 804fe3c:	4413      	add	r3, r2
 804fe3e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 804fe42:	681b      	ldr	r3, [r3, #0]
 804fe44:	0c1a      	lsrs	r2, r3, #16
 804fe46:	683b      	ldr	r3, [r7, #0]
 804fe48:	3306      	adds	r3, #6
 804fe4a:	b2d2      	uxtb	r2, r2
 804fe4c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 804fe4e:	68fb      	ldr	r3, [r7, #12]
 804fe50:	681a      	ldr	r2, [r3, #0]
 804fe52:	68bb      	ldr	r3, [r7, #8]
 804fe54:	011b      	lsls	r3, r3, #4
 804fe56:	4413      	add	r3, r2
 804fe58:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 804fe5c:	681b      	ldr	r3, [r3, #0]
 804fe5e:	0e1a      	lsrs	r2, r3, #24
 804fe60:	683b      	ldr	r3, [r7, #0]
 804fe62:	3307      	adds	r3, #7
 804fe64:	b2d2      	uxtb	r2, r2
 804fe66:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 804fe68:	68bb      	ldr	r3, [r7, #8]
 804fe6a:	2b00      	cmp	r3, #0
 804fe6c:	d108      	bne.n	804fe80 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 804fe6e:	68fb      	ldr	r3, [r7, #12]
 804fe70:	681b      	ldr	r3, [r3, #0]
 804fe72:	68da      	ldr	r2, [r3, #12]
 804fe74:	68fb      	ldr	r3, [r7, #12]
 804fe76:	681b      	ldr	r3, [r3, #0]
 804fe78:	f042 0220 	orr.w	r2, r2, #32
 804fe7c:	60da      	str	r2, [r3, #12]
 804fe7e:	e007      	b.n	804fe90 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 804fe80:	68fb      	ldr	r3, [r7, #12]
 804fe82:	681b      	ldr	r3, [r3, #0]
 804fe84:	691a      	ldr	r2, [r3, #16]
 804fe86:	68fb      	ldr	r3, [r7, #12]
 804fe88:	681b      	ldr	r3, [r3, #0]
 804fe8a:	f042 0220 	orr.w	r2, r2, #32
 804fe8e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 804fe90:	2300      	movs	r3, #0
 804fe92:	e006      	b.n	804fea2 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 804fe94:	68fb      	ldr	r3, [r7, #12]
 804fe96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804fe98:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 804fe9c:	68fb      	ldr	r3, [r7, #12]
 804fe9e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 804fea0:	2301      	movs	r3, #1
  }
}
 804fea2:	4618      	mov	r0, r3
 804fea4:	371c      	adds	r7, #28
 804fea6:	46bd      	mov	sp, r7
 804fea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 804feac:	4770      	bx	lr

0804feae <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 804feae:	b480      	push	{r7}
 804feb0:	b085      	sub	sp, #20
 804feb2:	af00      	add	r7, sp, #0
 804feb4:	6078      	str	r0, [r7, #4]
 804feb6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 804feb8:	687b      	ldr	r3, [r7, #4]
 804feba:	f893 3020 	ldrb.w	r3, [r3, #32]
 804febe:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 804fec0:	7bfb      	ldrb	r3, [r7, #15]
 804fec2:	2b01      	cmp	r3, #1
 804fec4:	d002      	beq.n	804fecc <HAL_CAN_ActivateNotification+0x1e>
 804fec6:	7bfb      	ldrb	r3, [r7, #15]
 804fec8:	2b02      	cmp	r3, #2
 804feca:	d109      	bne.n	804fee0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 804fecc:	687b      	ldr	r3, [r7, #4]
 804fece:	681b      	ldr	r3, [r3, #0]
 804fed0:	6959      	ldr	r1, [r3, #20]
 804fed2:	687b      	ldr	r3, [r7, #4]
 804fed4:	681b      	ldr	r3, [r3, #0]
 804fed6:	683a      	ldr	r2, [r7, #0]
 804fed8:	430a      	orrs	r2, r1
 804feda:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 804fedc:	2300      	movs	r3, #0
 804fede:	e006      	b.n	804feee <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 804fee0:	687b      	ldr	r3, [r7, #4]
 804fee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804fee4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 804fee8:	687b      	ldr	r3, [r7, #4]
 804feea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 804feec:	2301      	movs	r3, #1
  }
}
 804feee:	4618      	mov	r0, r3
 804fef0:	3714      	adds	r7, #20
 804fef2:	46bd      	mov	sp, r7
 804fef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 804fef8:	4770      	bx	lr

0804fefa <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 804fefa:	b580      	push	{r7, lr}
 804fefc:	b08a      	sub	sp, #40	; 0x28
 804fefe:	af00      	add	r7, sp, #0
 804ff00:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 804ff02:	2300      	movs	r3, #0
 804ff04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 804ff06:	687b      	ldr	r3, [r7, #4]
 804ff08:	681b      	ldr	r3, [r3, #0]
 804ff0a:	695b      	ldr	r3, [r3, #20]
 804ff0c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 804ff0e:	687b      	ldr	r3, [r7, #4]
 804ff10:	681b      	ldr	r3, [r3, #0]
 804ff12:	685b      	ldr	r3, [r3, #4]
 804ff14:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 804ff16:	687b      	ldr	r3, [r7, #4]
 804ff18:	681b      	ldr	r3, [r3, #0]
 804ff1a:	689b      	ldr	r3, [r3, #8]
 804ff1c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 804ff1e:	687b      	ldr	r3, [r7, #4]
 804ff20:	681b      	ldr	r3, [r3, #0]
 804ff22:	68db      	ldr	r3, [r3, #12]
 804ff24:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 804ff26:	687b      	ldr	r3, [r7, #4]
 804ff28:	681b      	ldr	r3, [r3, #0]
 804ff2a:	691b      	ldr	r3, [r3, #16]
 804ff2c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 804ff2e:	687b      	ldr	r3, [r7, #4]
 804ff30:	681b      	ldr	r3, [r3, #0]
 804ff32:	699b      	ldr	r3, [r3, #24]
 804ff34:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 804ff36:	6a3b      	ldr	r3, [r7, #32]
 804ff38:	f003 0301 	and.w	r3, r3, #1
 804ff3c:	2b00      	cmp	r3, #0
 804ff3e:	d07c      	beq.n	805003a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 804ff40:	69bb      	ldr	r3, [r7, #24]
 804ff42:	f003 0301 	and.w	r3, r3, #1
 804ff46:	2b00      	cmp	r3, #0
 804ff48:	d023      	beq.n	804ff92 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 804ff4a:	687b      	ldr	r3, [r7, #4]
 804ff4c:	681b      	ldr	r3, [r3, #0]
 804ff4e:	2201      	movs	r2, #1
 804ff50:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 804ff52:	69bb      	ldr	r3, [r7, #24]
 804ff54:	f003 0302 	and.w	r3, r3, #2
 804ff58:	2b00      	cmp	r3, #0
 804ff5a:	d003      	beq.n	804ff64 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 804ff5c:	6878      	ldr	r0, [r7, #4]
 804ff5e:	f000 f983 	bl	8050268 <HAL_CAN_TxMailbox0CompleteCallback>
 804ff62:	e016      	b.n	804ff92 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 804ff64:	69bb      	ldr	r3, [r7, #24]
 804ff66:	f003 0304 	and.w	r3, r3, #4
 804ff6a:	2b00      	cmp	r3, #0
 804ff6c:	d004      	beq.n	804ff78 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 804ff6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804ff70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 804ff74:	627b      	str	r3, [r7, #36]	; 0x24
 804ff76:	e00c      	b.n	804ff92 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 804ff78:	69bb      	ldr	r3, [r7, #24]
 804ff7a:	f003 0308 	and.w	r3, r3, #8
 804ff7e:	2b00      	cmp	r3, #0
 804ff80:	d004      	beq.n	804ff8c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 804ff82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804ff84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 804ff88:	627b      	str	r3, [r7, #36]	; 0x24
 804ff8a:	e002      	b.n	804ff92 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 804ff8c:	6878      	ldr	r0, [r7, #4]
 804ff8e:	f000 f989 	bl	80502a4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 804ff92:	69bb      	ldr	r3, [r7, #24]
 804ff94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804ff98:	2b00      	cmp	r3, #0
 804ff9a:	d024      	beq.n	804ffe6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 804ff9c:	687b      	ldr	r3, [r7, #4]
 804ff9e:	681b      	ldr	r3, [r3, #0]
 804ffa0:	f44f 7280 	mov.w	r2, #256	; 0x100
 804ffa4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 804ffa6:	69bb      	ldr	r3, [r7, #24]
 804ffa8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 804ffac:	2b00      	cmp	r3, #0
 804ffae:	d003      	beq.n	804ffb8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 804ffb0:	6878      	ldr	r0, [r7, #4]
 804ffb2:	f000 f963 	bl	805027c <HAL_CAN_TxMailbox1CompleteCallback>
 804ffb6:	e016      	b.n	804ffe6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 804ffb8:	69bb      	ldr	r3, [r7, #24]
 804ffba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 804ffbe:	2b00      	cmp	r3, #0
 804ffc0:	d004      	beq.n	804ffcc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 804ffc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804ffc4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 804ffc8:	627b      	str	r3, [r7, #36]	; 0x24
 804ffca:	e00c      	b.n	804ffe6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 804ffcc:	69bb      	ldr	r3, [r7, #24]
 804ffce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 804ffd2:	2b00      	cmp	r3, #0
 804ffd4:	d004      	beq.n	804ffe0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 804ffd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804ffd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 804ffdc:	627b      	str	r3, [r7, #36]	; 0x24
 804ffde:	e002      	b.n	804ffe6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 804ffe0:	6878      	ldr	r0, [r7, #4]
 804ffe2:	f000 f969 	bl	80502b8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 804ffe6:	69bb      	ldr	r3, [r7, #24]
 804ffe8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 804ffec:	2b00      	cmp	r3, #0
 804ffee:	d024      	beq.n	805003a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 804fff0:	687b      	ldr	r3, [r7, #4]
 804fff2:	681b      	ldr	r3, [r3, #0]
 804fff4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 804fff8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 804fffa:	69bb      	ldr	r3, [r7, #24]
 804fffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8050000:	2b00      	cmp	r3, #0
 8050002:	d003      	beq.n	805000c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8050004:	6878      	ldr	r0, [r7, #4]
 8050006:	f000 f943 	bl	8050290 <HAL_CAN_TxMailbox2CompleteCallback>
 805000a:	e016      	b.n	805003a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 805000c:	69bb      	ldr	r3, [r7, #24]
 805000e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8050012:	2b00      	cmp	r3, #0
 8050014:	d004      	beq.n	8050020 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8050016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8050018:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 805001c:	627b      	str	r3, [r7, #36]	; 0x24
 805001e:	e00c      	b.n	805003a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8050020:	69bb      	ldr	r3, [r7, #24]
 8050022:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8050026:	2b00      	cmp	r3, #0
 8050028:	d004      	beq.n	8050034 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 805002a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 805002c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8050030:	627b      	str	r3, [r7, #36]	; 0x24
 8050032:	e002      	b.n	805003a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8050034:	6878      	ldr	r0, [r7, #4]
 8050036:	f000 f949 	bl	80502cc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 805003a:	6a3b      	ldr	r3, [r7, #32]
 805003c:	f003 0308 	and.w	r3, r3, #8
 8050040:	2b00      	cmp	r3, #0
 8050042:	d00c      	beq.n	805005e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8050044:	697b      	ldr	r3, [r7, #20]
 8050046:	f003 0310 	and.w	r3, r3, #16
 805004a:	2b00      	cmp	r3, #0
 805004c:	d007      	beq.n	805005e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 805004e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8050050:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8050054:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8050056:	687b      	ldr	r3, [r7, #4]
 8050058:	681b      	ldr	r3, [r3, #0]
 805005a:	2210      	movs	r2, #16
 805005c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 805005e:	6a3b      	ldr	r3, [r7, #32]
 8050060:	f003 0304 	and.w	r3, r3, #4
 8050064:	2b00      	cmp	r3, #0
 8050066:	d00b      	beq.n	8050080 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8050068:	697b      	ldr	r3, [r7, #20]
 805006a:	f003 0308 	and.w	r3, r3, #8
 805006e:	2b00      	cmp	r3, #0
 8050070:	d006      	beq.n	8050080 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8050072:	687b      	ldr	r3, [r7, #4]
 8050074:	681b      	ldr	r3, [r3, #0]
 8050076:	2208      	movs	r2, #8
 8050078:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 805007a:	6878      	ldr	r0, [r7, #4]
 805007c:	f000 f930 	bl	80502e0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8050080:	6a3b      	ldr	r3, [r7, #32]
 8050082:	f003 0302 	and.w	r3, r3, #2
 8050086:	2b00      	cmp	r3, #0
 8050088:	d009      	beq.n	805009e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 805008a:	687b      	ldr	r3, [r7, #4]
 805008c:	681b      	ldr	r3, [r3, #0]
 805008e:	68db      	ldr	r3, [r3, #12]
 8050090:	f003 0303 	and.w	r3, r3, #3
 8050094:	2b00      	cmp	r3, #0
 8050096:	d002      	beq.n	805009e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8050098:	6878      	ldr	r0, [r7, #4]
 805009a:	f7f8 fcf1 	bl	8048a80 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 805009e:	6a3b      	ldr	r3, [r7, #32]
 80500a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80500a4:	2b00      	cmp	r3, #0
 80500a6:	d00c      	beq.n	80500c2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80500a8:	693b      	ldr	r3, [r7, #16]
 80500aa:	f003 0310 	and.w	r3, r3, #16
 80500ae:	2b00      	cmp	r3, #0
 80500b0:	d007      	beq.n	80500c2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80500b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80500b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80500b8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80500ba:	687b      	ldr	r3, [r7, #4]
 80500bc:	681b      	ldr	r3, [r3, #0]
 80500be:	2210      	movs	r2, #16
 80500c0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80500c2:	6a3b      	ldr	r3, [r7, #32]
 80500c4:	f003 0320 	and.w	r3, r3, #32
 80500c8:	2b00      	cmp	r3, #0
 80500ca:	d00b      	beq.n	80500e4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80500cc:	693b      	ldr	r3, [r7, #16]
 80500ce:	f003 0308 	and.w	r3, r3, #8
 80500d2:	2b00      	cmp	r3, #0
 80500d4:	d006      	beq.n	80500e4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80500d6:	687b      	ldr	r3, [r7, #4]
 80500d8:	681b      	ldr	r3, [r3, #0]
 80500da:	2208      	movs	r2, #8
 80500dc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80500de:	6878      	ldr	r0, [r7, #4]
 80500e0:	f000 f912 	bl	8050308 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80500e4:	6a3b      	ldr	r3, [r7, #32]
 80500e6:	f003 0310 	and.w	r3, r3, #16
 80500ea:	2b00      	cmp	r3, #0
 80500ec:	d009      	beq.n	8050102 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80500ee:	687b      	ldr	r3, [r7, #4]
 80500f0:	681b      	ldr	r3, [r3, #0]
 80500f2:	691b      	ldr	r3, [r3, #16]
 80500f4:	f003 0303 	and.w	r3, r3, #3
 80500f8:	2b00      	cmp	r3, #0
 80500fa:	d002      	beq.n	8050102 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80500fc:	6878      	ldr	r0, [r7, #4]
 80500fe:	f000 f8f9 	bl	80502f4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8050102:	6a3b      	ldr	r3, [r7, #32]
 8050104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8050108:	2b00      	cmp	r3, #0
 805010a:	d00b      	beq.n	8050124 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 805010c:	69fb      	ldr	r3, [r7, #28]
 805010e:	f003 0310 	and.w	r3, r3, #16
 8050112:	2b00      	cmp	r3, #0
 8050114:	d006      	beq.n	8050124 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8050116:	687b      	ldr	r3, [r7, #4]
 8050118:	681b      	ldr	r3, [r3, #0]
 805011a:	2210      	movs	r2, #16
 805011c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 805011e:	6878      	ldr	r0, [r7, #4]
 8050120:	f000 f8fc 	bl	805031c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8050124:	6a3b      	ldr	r3, [r7, #32]
 8050126:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 805012a:	2b00      	cmp	r3, #0
 805012c:	d00b      	beq.n	8050146 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 805012e:	69fb      	ldr	r3, [r7, #28]
 8050130:	f003 0308 	and.w	r3, r3, #8
 8050134:	2b00      	cmp	r3, #0
 8050136:	d006      	beq.n	8050146 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8050138:	687b      	ldr	r3, [r7, #4]
 805013a:	681b      	ldr	r3, [r3, #0]
 805013c:	2208      	movs	r2, #8
 805013e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8050140:	6878      	ldr	r0, [r7, #4]
 8050142:	f000 f8f5 	bl	8050330 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8050146:	6a3b      	ldr	r3, [r7, #32]
 8050148:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 805014c:	2b00      	cmp	r3, #0
 805014e:	d07b      	beq.n	8050248 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8050150:	69fb      	ldr	r3, [r7, #28]
 8050152:	f003 0304 	and.w	r3, r3, #4
 8050156:	2b00      	cmp	r3, #0
 8050158:	d072      	beq.n	8050240 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 805015a:	6a3b      	ldr	r3, [r7, #32]
 805015c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8050160:	2b00      	cmp	r3, #0
 8050162:	d008      	beq.n	8050176 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8050164:	68fb      	ldr	r3, [r7, #12]
 8050166:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 805016a:	2b00      	cmp	r3, #0
 805016c:	d003      	beq.n	8050176 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 805016e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8050170:	f043 0301 	orr.w	r3, r3, #1
 8050174:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8050176:	6a3b      	ldr	r3, [r7, #32]
 8050178:	f403 7300 	and.w	r3, r3, #512	; 0x200
 805017c:	2b00      	cmp	r3, #0
 805017e:	d008      	beq.n	8050192 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8050180:	68fb      	ldr	r3, [r7, #12]
 8050182:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8050186:	2b00      	cmp	r3, #0
 8050188:	d003      	beq.n	8050192 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 805018a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 805018c:	f043 0302 	orr.w	r3, r3, #2
 8050190:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8050192:	6a3b      	ldr	r3, [r7, #32]
 8050194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8050198:	2b00      	cmp	r3, #0
 805019a:	d008      	beq.n	80501ae <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 805019c:	68fb      	ldr	r3, [r7, #12]
 805019e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80501a2:	2b00      	cmp	r3, #0
 80501a4:	d003      	beq.n	80501ae <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80501a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80501a8:	f043 0304 	orr.w	r3, r3, #4
 80501ac:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80501ae:	6a3b      	ldr	r3, [r7, #32]
 80501b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80501b4:	2b00      	cmp	r3, #0
 80501b6:	d043      	beq.n	8050240 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80501b8:	68fb      	ldr	r3, [r7, #12]
 80501ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80501be:	2b00      	cmp	r3, #0
 80501c0:	d03e      	beq.n	8050240 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80501c2:	68fb      	ldr	r3, [r7, #12]
 80501c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80501c8:	2b60      	cmp	r3, #96	; 0x60
 80501ca:	d02b      	beq.n	8050224 <HAL_CAN_IRQHandler+0x32a>
 80501cc:	2b60      	cmp	r3, #96	; 0x60
 80501ce:	d82e      	bhi.n	805022e <HAL_CAN_IRQHandler+0x334>
 80501d0:	2b50      	cmp	r3, #80	; 0x50
 80501d2:	d022      	beq.n	805021a <HAL_CAN_IRQHandler+0x320>
 80501d4:	2b50      	cmp	r3, #80	; 0x50
 80501d6:	d82a      	bhi.n	805022e <HAL_CAN_IRQHandler+0x334>
 80501d8:	2b40      	cmp	r3, #64	; 0x40
 80501da:	d019      	beq.n	8050210 <HAL_CAN_IRQHandler+0x316>
 80501dc:	2b40      	cmp	r3, #64	; 0x40
 80501de:	d826      	bhi.n	805022e <HAL_CAN_IRQHandler+0x334>
 80501e0:	2b30      	cmp	r3, #48	; 0x30
 80501e2:	d010      	beq.n	8050206 <HAL_CAN_IRQHandler+0x30c>
 80501e4:	2b30      	cmp	r3, #48	; 0x30
 80501e6:	d822      	bhi.n	805022e <HAL_CAN_IRQHandler+0x334>
 80501e8:	2b10      	cmp	r3, #16
 80501ea:	d002      	beq.n	80501f2 <HAL_CAN_IRQHandler+0x2f8>
 80501ec:	2b20      	cmp	r3, #32
 80501ee:	d005      	beq.n	80501fc <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80501f0:	e01d      	b.n	805022e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80501f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80501f4:	f043 0308 	orr.w	r3, r3, #8
 80501f8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80501fa:	e019      	b.n	8050230 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80501fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80501fe:	f043 0310 	orr.w	r3, r3, #16
 8050202:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8050204:	e014      	b.n	8050230 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8050206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8050208:	f043 0320 	orr.w	r3, r3, #32
 805020c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 805020e:	e00f      	b.n	8050230 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8050210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8050212:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8050216:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8050218:	e00a      	b.n	8050230 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 805021a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 805021c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8050220:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8050222:	e005      	b.n	8050230 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8050224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8050226:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 805022a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 805022c:	e000      	b.n	8050230 <HAL_CAN_IRQHandler+0x336>
            break;
 805022e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8050230:	687b      	ldr	r3, [r7, #4]
 8050232:	681b      	ldr	r3, [r3, #0]
 8050234:	699a      	ldr	r2, [r3, #24]
 8050236:	687b      	ldr	r3, [r7, #4]
 8050238:	681b      	ldr	r3, [r3, #0]
 805023a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 805023e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8050240:	687b      	ldr	r3, [r7, #4]
 8050242:	681b      	ldr	r3, [r3, #0]
 8050244:	2204      	movs	r2, #4
 8050246:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8050248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 805024a:	2b00      	cmp	r3, #0
 805024c:	d008      	beq.n	8050260 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 805024e:	687b      	ldr	r3, [r7, #4]
 8050250:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8050252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8050254:	431a      	orrs	r2, r3
 8050256:	687b      	ldr	r3, [r7, #4]
 8050258:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 805025a:	6878      	ldr	r0, [r7, #4]
 805025c:	f7f8 fc5a 	bl	8048b14 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8050260:	bf00      	nop
 8050262:	3728      	adds	r7, #40	; 0x28
 8050264:	46bd      	mov	sp, r7
 8050266:	bd80      	pop	{r7, pc}

08050268 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8050268:	b480      	push	{r7}
 805026a:	b083      	sub	sp, #12
 805026c:	af00      	add	r7, sp, #0
 805026e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8050270:	bf00      	nop
 8050272:	370c      	adds	r7, #12
 8050274:	46bd      	mov	sp, r7
 8050276:	f85d 7b04 	ldr.w	r7, [sp], #4
 805027a:	4770      	bx	lr

0805027c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 805027c:	b480      	push	{r7}
 805027e:	b083      	sub	sp, #12
 8050280:	af00      	add	r7, sp, #0
 8050282:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8050284:	bf00      	nop
 8050286:	370c      	adds	r7, #12
 8050288:	46bd      	mov	sp, r7
 805028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 805028e:	4770      	bx	lr

08050290 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8050290:	b480      	push	{r7}
 8050292:	b083      	sub	sp, #12
 8050294:	af00      	add	r7, sp, #0
 8050296:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8050298:	bf00      	nop
 805029a:	370c      	adds	r7, #12
 805029c:	46bd      	mov	sp, r7
 805029e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80502a2:	4770      	bx	lr

080502a4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80502a4:	b480      	push	{r7}
 80502a6:	b083      	sub	sp, #12
 80502a8:	af00      	add	r7, sp, #0
 80502aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80502ac:	bf00      	nop
 80502ae:	370c      	adds	r7, #12
 80502b0:	46bd      	mov	sp, r7
 80502b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80502b6:	4770      	bx	lr

080502b8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80502b8:	b480      	push	{r7}
 80502ba:	b083      	sub	sp, #12
 80502bc:	af00      	add	r7, sp, #0
 80502be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80502c0:	bf00      	nop
 80502c2:	370c      	adds	r7, #12
 80502c4:	46bd      	mov	sp, r7
 80502c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80502ca:	4770      	bx	lr

080502cc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80502cc:	b480      	push	{r7}
 80502ce:	b083      	sub	sp, #12
 80502d0:	af00      	add	r7, sp, #0
 80502d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80502d4:	bf00      	nop
 80502d6:	370c      	adds	r7, #12
 80502d8:	46bd      	mov	sp, r7
 80502da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80502de:	4770      	bx	lr

080502e0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80502e0:	b480      	push	{r7}
 80502e2:	b083      	sub	sp, #12
 80502e4:	af00      	add	r7, sp, #0
 80502e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80502e8:	bf00      	nop
 80502ea:	370c      	adds	r7, #12
 80502ec:	46bd      	mov	sp, r7
 80502ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80502f2:	4770      	bx	lr

080502f4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80502f4:	b480      	push	{r7}
 80502f6:	b083      	sub	sp, #12
 80502f8:	af00      	add	r7, sp, #0
 80502fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80502fc:	bf00      	nop
 80502fe:	370c      	adds	r7, #12
 8050300:	46bd      	mov	sp, r7
 8050302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8050306:	4770      	bx	lr

08050308 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8050308:	b480      	push	{r7}
 805030a:	b083      	sub	sp, #12
 805030c:	af00      	add	r7, sp, #0
 805030e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8050310:	bf00      	nop
 8050312:	370c      	adds	r7, #12
 8050314:	46bd      	mov	sp, r7
 8050316:	f85d 7b04 	ldr.w	r7, [sp], #4
 805031a:	4770      	bx	lr

0805031c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 805031c:	b480      	push	{r7}
 805031e:	b083      	sub	sp, #12
 8050320:	af00      	add	r7, sp, #0
 8050322:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8050324:	bf00      	nop
 8050326:	370c      	adds	r7, #12
 8050328:	46bd      	mov	sp, r7
 805032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 805032e:	4770      	bx	lr

08050330 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8050330:	b480      	push	{r7}
 8050332:	b083      	sub	sp, #12
 8050334:	af00      	add	r7, sp, #0
 8050336:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8050338:	bf00      	nop
 805033a:	370c      	adds	r7, #12
 805033c:	46bd      	mov	sp, r7
 805033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8050342:	4770      	bx	lr

08050344 <__NVIC_SetPriorityGrouping>:
{
 8050344:	b480      	push	{r7}
 8050346:	b085      	sub	sp, #20
 8050348:	af00      	add	r7, sp, #0
 805034a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 805034c:	687b      	ldr	r3, [r7, #4]
 805034e:	f003 0307 	and.w	r3, r3, #7
 8050352:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8050354:	4b0c      	ldr	r3, [pc, #48]	; (8050388 <__NVIC_SetPriorityGrouping+0x44>)
 8050356:	68db      	ldr	r3, [r3, #12]
 8050358:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 805035a:	68ba      	ldr	r2, [r7, #8]
 805035c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8050360:	4013      	ands	r3, r2
 8050362:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8050364:	68fb      	ldr	r3, [r7, #12]
 8050366:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8050368:	68bb      	ldr	r3, [r7, #8]
 805036a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 805036c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8050370:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8050374:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8050376:	4a04      	ldr	r2, [pc, #16]	; (8050388 <__NVIC_SetPriorityGrouping+0x44>)
 8050378:	68bb      	ldr	r3, [r7, #8]
 805037a:	60d3      	str	r3, [r2, #12]
}
 805037c:	bf00      	nop
 805037e:	3714      	adds	r7, #20
 8050380:	46bd      	mov	sp, r7
 8050382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8050386:	4770      	bx	lr
 8050388:	e000ed00 	.word	0xe000ed00

0805038c <__NVIC_GetPriorityGrouping>:
{
 805038c:	b480      	push	{r7}
 805038e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8050390:	4b04      	ldr	r3, [pc, #16]	; (80503a4 <__NVIC_GetPriorityGrouping+0x18>)
 8050392:	68db      	ldr	r3, [r3, #12]
 8050394:	0a1b      	lsrs	r3, r3, #8
 8050396:	f003 0307 	and.w	r3, r3, #7
}
 805039a:	4618      	mov	r0, r3
 805039c:	46bd      	mov	sp, r7
 805039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80503a2:	4770      	bx	lr
 80503a4:	e000ed00 	.word	0xe000ed00

080503a8 <__NVIC_EnableIRQ>:
{
 80503a8:	b480      	push	{r7}
 80503aa:	b083      	sub	sp, #12
 80503ac:	af00      	add	r7, sp, #0
 80503ae:	4603      	mov	r3, r0
 80503b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80503b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80503b6:	2b00      	cmp	r3, #0
 80503b8:	db0b      	blt.n	80503d2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80503ba:	79fb      	ldrb	r3, [r7, #7]
 80503bc:	f003 021f 	and.w	r2, r3, #31
 80503c0:	4907      	ldr	r1, [pc, #28]	; (80503e0 <__NVIC_EnableIRQ+0x38>)
 80503c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80503c6:	095b      	lsrs	r3, r3, #5
 80503c8:	2001      	movs	r0, #1
 80503ca:	fa00 f202 	lsl.w	r2, r0, r2
 80503ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80503d2:	bf00      	nop
 80503d4:	370c      	adds	r7, #12
 80503d6:	46bd      	mov	sp, r7
 80503d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80503dc:	4770      	bx	lr
 80503de:	bf00      	nop
 80503e0:	e000e100 	.word	0xe000e100

080503e4 <__NVIC_DisableIRQ>:
{
 80503e4:	b480      	push	{r7}
 80503e6:	b083      	sub	sp, #12
 80503e8:	af00      	add	r7, sp, #0
 80503ea:	4603      	mov	r3, r0
 80503ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80503ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80503f2:	2b00      	cmp	r3, #0
 80503f4:	db12      	blt.n	805041c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80503f6:	79fb      	ldrb	r3, [r7, #7]
 80503f8:	f003 021f 	and.w	r2, r3, #31
 80503fc:	490a      	ldr	r1, [pc, #40]	; (8050428 <__NVIC_DisableIRQ+0x44>)
 80503fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8050402:	095b      	lsrs	r3, r3, #5
 8050404:	2001      	movs	r0, #1
 8050406:	fa00 f202 	lsl.w	r2, r0, r2
 805040a:	3320      	adds	r3, #32
 805040c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8050410:	f3bf 8f4f 	dsb	sy
}
 8050414:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8050416:	f3bf 8f6f 	isb	sy
}
 805041a:	bf00      	nop
}
 805041c:	bf00      	nop
 805041e:	370c      	adds	r7, #12
 8050420:	46bd      	mov	sp, r7
 8050422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8050426:	4770      	bx	lr
 8050428:	e000e100 	.word	0xe000e100

0805042c <__NVIC_SetPriority>:
{
 805042c:	b480      	push	{r7}
 805042e:	b083      	sub	sp, #12
 8050430:	af00      	add	r7, sp, #0
 8050432:	4603      	mov	r3, r0
 8050434:	6039      	str	r1, [r7, #0]
 8050436:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8050438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 805043c:	2b00      	cmp	r3, #0
 805043e:	db0a      	blt.n	8050456 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8050440:	683b      	ldr	r3, [r7, #0]
 8050442:	b2da      	uxtb	r2, r3
 8050444:	490c      	ldr	r1, [pc, #48]	; (8050478 <__NVIC_SetPriority+0x4c>)
 8050446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 805044a:	0112      	lsls	r2, r2, #4
 805044c:	b2d2      	uxtb	r2, r2
 805044e:	440b      	add	r3, r1
 8050450:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8050454:	e00a      	b.n	805046c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8050456:	683b      	ldr	r3, [r7, #0]
 8050458:	b2da      	uxtb	r2, r3
 805045a:	4908      	ldr	r1, [pc, #32]	; (805047c <__NVIC_SetPriority+0x50>)
 805045c:	79fb      	ldrb	r3, [r7, #7]
 805045e:	f003 030f 	and.w	r3, r3, #15
 8050462:	3b04      	subs	r3, #4
 8050464:	0112      	lsls	r2, r2, #4
 8050466:	b2d2      	uxtb	r2, r2
 8050468:	440b      	add	r3, r1
 805046a:	761a      	strb	r2, [r3, #24]
}
 805046c:	bf00      	nop
 805046e:	370c      	adds	r7, #12
 8050470:	46bd      	mov	sp, r7
 8050472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8050476:	4770      	bx	lr
 8050478:	e000e100 	.word	0xe000e100
 805047c:	e000ed00 	.word	0xe000ed00

08050480 <NVIC_EncodePriority>:
{
 8050480:	b480      	push	{r7}
 8050482:	b089      	sub	sp, #36	; 0x24
 8050484:	af00      	add	r7, sp, #0
 8050486:	60f8      	str	r0, [r7, #12]
 8050488:	60b9      	str	r1, [r7, #8]
 805048a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 805048c:	68fb      	ldr	r3, [r7, #12]
 805048e:	f003 0307 	and.w	r3, r3, #7
 8050492:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8050494:	69fb      	ldr	r3, [r7, #28]
 8050496:	f1c3 0307 	rsb	r3, r3, #7
 805049a:	2b04      	cmp	r3, #4
 805049c:	bf28      	it	cs
 805049e:	2304      	movcs	r3, #4
 80504a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80504a2:	69fb      	ldr	r3, [r7, #28]
 80504a4:	3304      	adds	r3, #4
 80504a6:	2b06      	cmp	r3, #6
 80504a8:	d902      	bls.n	80504b0 <NVIC_EncodePriority+0x30>
 80504aa:	69fb      	ldr	r3, [r7, #28]
 80504ac:	3b03      	subs	r3, #3
 80504ae:	e000      	b.n	80504b2 <NVIC_EncodePriority+0x32>
 80504b0:	2300      	movs	r3, #0
 80504b2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80504b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80504b8:	69bb      	ldr	r3, [r7, #24]
 80504ba:	fa02 f303 	lsl.w	r3, r2, r3
 80504be:	43da      	mvns	r2, r3
 80504c0:	68bb      	ldr	r3, [r7, #8]
 80504c2:	401a      	ands	r2, r3
 80504c4:	697b      	ldr	r3, [r7, #20]
 80504c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80504c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80504cc:	697b      	ldr	r3, [r7, #20]
 80504ce:	fa01 f303 	lsl.w	r3, r1, r3
 80504d2:	43d9      	mvns	r1, r3
 80504d4:	687b      	ldr	r3, [r7, #4]
 80504d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80504d8:	4313      	orrs	r3, r2
}
 80504da:	4618      	mov	r0, r3
 80504dc:	3724      	adds	r7, #36	; 0x24
 80504de:	46bd      	mov	sp, r7
 80504e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80504e4:	4770      	bx	lr

080504e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80504e6:	b580      	push	{r7, lr}
 80504e8:	b082      	sub	sp, #8
 80504ea:	af00      	add	r7, sp, #0
 80504ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80504ee:	6878      	ldr	r0, [r7, #4]
 80504f0:	f7ff ff28 	bl	8050344 <__NVIC_SetPriorityGrouping>
}
 80504f4:	bf00      	nop
 80504f6:	3708      	adds	r7, #8
 80504f8:	46bd      	mov	sp, r7
 80504fa:	bd80      	pop	{r7, pc}

080504fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80504fc:	b580      	push	{r7, lr}
 80504fe:	b086      	sub	sp, #24
 8050500:	af00      	add	r7, sp, #0
 8050502:	4603      	mov	r3, r0
 8050504:	60b9      	str	r1, [r7, #8]
 8050506:	607a      	str	r2, [r7, #4]
 8050508:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 805050a:	2300      	movs	r3, #0
 805050c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 805050e:	f7ff ff3d 	bl	805038c <__NVIC_GetPriorityGrouping>
 8050512:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8050514:	687a      	ldr	r2, [r7, #4]
 8050516:	68b9      	ldr	r1, [r7, #8]
 8050518:	6978      	ldr	r0, [r7, #20]
 805051a:	f7ff ffb1 	bl	8050480 <NVIC_EncodePriority>
 805051e:	4602      	mov	r2, r0
 8050520:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8050524:	4611      	mov	r1, r2
 8050526:	4618      	mov	r0, r3
 8050528:	f7ff ff80 	bl	805042c <__NVIC_SetPriority>
}
 805052c:	bf00      	nop
 805052e:	3718      	adds	r7, #24
 8050530:	46bd      	mov	sp, r7
 8050532:	bd80      	pop	{r7, pc}

08050534 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8050534:	b580      	push	{r7, lr}
 8050536:	b082      	sub	sp, #8
 8050538:	af00      	add	r7, sp, #0
 805053a:	4603      	mov	r3, r0
 805053c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 805053e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8050542:	4618      	mov	r0, r3
 8050544:	f7ff ff30 	bl	80503a8 <__NVIC_EnableIRQ>
}
 8050548:	bf00      	nop
 805054a:	3708      	adds	r7, #8
 805054c:	46bd      	mov	sp, r7
 805054e:	bd80      	pop	{r7, pc}

08050550 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8050550:	b580      	push	{r7, lr}
 8050552:	b082      	sub	sp, #8
 8050554:	af00      	add	r7, sp, #0
 8050556:	4603      	mov	r3, r0
 8050558:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 805055a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 805055e:	4618      	mov	r0, r3
 8050560:	f7ff ff40 	bl	80503e4 <__NVIC_DisableIRQ>
}
 8050564:	bf00      	nop
 8050566:	3708      	adds	r7, #8
 8050568:	46bd      	mov	sp, r7
 805056a:	bd80      	pop	{r7, pc}

0805056c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 805056c:	b580      	push	{r7, lr}
 805056e:	b086      	sub	sp, #24
 8050570:	af00      	add	r7, sp, #0
 8050572:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8050574:	2300      	movs	r3, #0
 8050576:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8050578:	f7ff f85c 	bl	804f634 <HAL_GetTick>
 805057c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 805057e:	687b      	ldr	r3, [r7, #4]
 8050580:	2b00      	cmp	r3, #0
 8050582:	d101      	bne.n	8050588 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8050584:	2301      	movs	r3, #1
 8050586:	e099      	b.n	80506bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8050588:	687b      	ldr	r3, [r7, #4]
 805058a:	2200      	movs	r2, #0
 805058c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8050590:	687b      	ldr	r3, [r7, #4]
 8050592:	2202      	movs	r2, #2
 8050594:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8050598:	687b      	ldr	r3, [r7, #4]
 805059a:	681b      	ldr	r3, [r3, #0]
 805059c:	681a      	ldr	r2, [r3, #0]
 805059e:	687b      	ldr	r3, [r7, #4]
 80505a0:	681b      	ldr	r3, [r3, #0]
 80505a2:	f022 0201 	bic.w	r2, r2, #1
 80505a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80505a8:	e00f      	b.n	80505ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80505aa:	f7ff f843 	bl	804f634 <HAL_GetTick>
 80505ae:	4602      	mov	r2, r0
 80505b0:	693b      	ldr	r3, [r7, #16]
 80505b2:	1ad3      	subs	r3, r2, r3
 80505b4:	2b05      	cmp	r3, #5
 80505b6:	d908      	bls.n	80505ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80505b8:	687b      	ldr	r3, [r7, #4]
 80505ba:	2220      	movs	r2, #32
 80505bc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80505be:	687b      	ldr	r3, [r7, #4]
 80505c0:	2203      	movs	r2, #3
 80505c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80505c6:	2303      	movs	r3, #3
 80505c8:	e078      	b.n	80506bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80505ca:	687b      	ldr	r3, [r7, #4]
 80505cc:	681b      	ldr	r3, [r3, #0]
 80505ce:	681b      	ldr	r3, [r3, #0]
 80505d0:	f003 0301 	and.w	r3, r3, #1
 80505d4:	2b00      	cmp	r3, #0
 80505d6:	d1e8      	bne.n	80505aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80505d8:	687b      	ldr	r3, [r7, #4]
 80505da:	681b      	ldr	r3, [r3, #0]
 80505dc:	681b      	ldr	r3, [r3, #0]
 80505de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80505e0:	697a      	ldr	r2, [r7, #20]
 80505e2:	4b38      	ldr	r3, [pc, #224]	; (80506c4 <HAL_DMA_Init+0x158>)
 80505e4:	4013      	ands	r3, r2
 80505e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80505e8:	687b      	ldr	r3, [r7, #4]
 80505ea:	685a      	ldr	r2, [r3, #4]
 80505ec:	687b      	ldr	r3, [r7, #4]
 80505ee:	689b      	ldr	r3, [r3, #8]
 80505f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80505f2:	687b      	ldr	r3, [r7, #4]
 80505f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80505f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80505f8:	687b      	ldr	r3, [r7, #4]
 80505fa:	691b      	ldr	r3, [r3, #16]
 80505fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80505fe:	687b      	ldr	r3, [r7, #4]
 8050600:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8050602:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8050604:	687b      	ldr	r3, [r7, #4]
 8050606:	699b      	ldr	r3, [r3, #24]
 8050608:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 805060a:	687b      	ldr	r3, [r7, #4]
 805060c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 805060e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8050610:	687b      	ldr	r3, [r7, #4]
 8050612:	6a1b      	ldr	r3, [r3, #32]
 8050614:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8050616:	697a      	ldr	r2, [r7, #20]
 8050618:	4313      	orrs	r3, r2
 805061a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 805061c:	687b      	ldr	r3, [r7, #4]
 805061e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8050620:	2b04      	cmp	r3, #4
 8050622:	d107      	bne.n	8050634 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8050624:	687b      	ldr	r3, [r7, #4]
 8050626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8050628:	687b      	ldr	r3, [r7, #4]
 805062a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 805062c:	4313      	orrs	r3, r2
 805062e:	697a      	ldr	r2, [r7, #20]
 8050630:	4313      	orrs	r3, r2
 8050632:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8050634:	687b      	ldr	r3, [r7, #4]
 8050636:	681b      	ldr	r3, [r3, #0]
 8050638:	697a      	ldr	r2, [r7, #20]
 805063a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 805063c:	687b      	ldr	r3, [r7, #4]
 805063e:	681b      	ldr	r3, [r3, #0]
 8050640:	695b      	ldr	r3, [r3, #20]
 8050642:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8050644:	697b      	ldr	r3, [r7, #20]
 8050646:	f023 0307 	bic.w	r3, r3, #7
 805064a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 805064c:	687b      	ldr	r3, [r7, #4]
 805064e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8050650:	697a      	ldr	r2, [r7, #20]
 8050652:	4313      	orrs	r3, r2
 8050654:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8050656:	687b      	ldr	r3, [r7, #4]
 8050658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 805065a:	2b04      	cmp	r3, #4
 805065c:	d117      	bne.n	805068e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 805065e:	687b      	ldr	r3, [r7, #4]
 8050660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8050662:	697a      	ldr	r2, [r7, #20]
 8050664:	4313      	orrs	r3, r2
 8050666:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8050668:	687b      	ldr	r3, [r7, #4]
 805066a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 805066c:	2b00      	cmp	r3, #0
 805066e:	d00e      	beq.n	805068e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8050670:	6878      	ldr	r0, [r7, #4]
 8050672:	f000 fb01 	bl	8050c78 <DMA_CheckFifoParam>
 8050676:	4603      	mov	r3, r0
 8050678:	2b00      	cmp	r3, #0
 805067a:	d008      	beq.n	805068e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 805067c:	687b      	ldr	r3, [r7, #4]
 805067e:	2240      	movs	r2, #64	; 0x40
 8050680:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8050682:	687b      	ldr	r3, [r7, #4]
 8050684:	2201      	movs	r2, #1
 8050686:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 805068a:	2301      	movs	r3, #1
 805068c:	e016      	b.n	80506bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 805068e:	687b      	ldr	r3, [r7, #4]
 8050690:	681b      	ldr	r3, [r3, #0]
 8050692:	697a      	ldr	r2, [r7, #20]
 8050694:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8050696:	6878      	ldr	r0, [r7, #4]
 8050698:	f000 fab8 	bl	8050c0c <DMA_CalcBaseAndBitshift>
 805069c:	4603      	mov	r3, r0
 805069e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80506a0:	687b      	ldr	r3, [r7, #4]
 80506a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80506a4:	223f      	movs	r2, #63	; 0x3f
 80506a6:	409a      	lsls	r2, r3
 80506a8:	68fb      	ldr	r3, [r7, #12]
 80506aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80506ac:	687b      	ldr	r3, [r7, #4]
 80506ae:	2200      	movs	r2, #0
 80506b0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80506b2:	687b      	ldr	r3, [r7, #4]
 80506b4:	2201      	movs	r2, #1
 80506b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80506ba:	2300      	movs	r3, #0
}
 80506bc:	4618      	mov	r0, r3
 80506be:	3718      	adds	r7, #24
 80506c0:	46bd      	mov	sp, r7
 80506c2:	bd80      	pop	{r7, pc}
 80506c4:	f010803f 	.word	0xf010803f

080506c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80506c8:	b580      	push	{r7, lr}
 80506ca:	b086      	sub	sp, #24
 80506cc:	af00      	add	r7, sp, #0
 80506ce:	60f8      	str	r0, [r7, #12]
 80506d0:	60b9      	str	r1, [r7, #8]
 80506d2:	607a      	str	r2, [r7, #4]
 80506d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80506d6:	2300      	movs	r3, #0
 80506d8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80506da:	68fb      	ldr	r3, [r7, #12]
 80506dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80506de:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80506e0:	68fb      	ldr	r3, [r7, #12]
 80506e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80506e6:	2b01      	cmp	r3, #1
 80506e8:	d101      	bne.n	80506ee <HAL_DMA_Start_IT+0x26>
 80506ea:	2302      	movs	r3, #2
 80506ec:	e040      	b.n	8050770 <HAL_DMA_Start_IT+0xa8>
 80506ee:	68fb      	ldr	r3, [r7, #12]
 80506f0:	2201      	movs	r2, #1
 80506f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80506f6:	68fb      	ldr	r3, [r7, #12]
 80506f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80506fc:	b2db      	uxtb	r3, r3
 80506fe:	2b01      	cmp	r3, #1
 8050700:	d12f      	bne.n	8050762 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8050702:	68fb      	ldr	r3, [r7, #12]
 8050704:	2202      	movs	r2, #2
 8050706:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 805070a:	68fb      	ldr	r3, [r7, #12]
 805070c:	2200      	movs	r2, #0
 805070e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8050710:	683b      	ldr	r3, [r7, #0]
 8050712:	687a      	ldr	r2, [r7, #4]
 8050714:	68b9      	ldr	r1, [r7, #8]
 8050716:	68f8      	ldr	r0, [r7, #12]
 8050718:	f000 fa4a 	bl	8050bb0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 805071c:	68fb      	ldr	r3, [r7, #12]
 805071e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8050720:	223f      	movs	r2, #63	; 0x3f
 8050722:	409a      	lsls	r2, r3
 8050724:	693b      	ldr	r3, [r7, #16]
 8050726:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8050728:	68fb      	ldr	r3, [r7, #12]
 805072a:	681b      	ldr	r3, [r3, #0]
 805072c:	681a      	ldr	r2, [r3, #0]
 805072e:	68fb      	ldr	r3, [r7, #12]
 8050730:	681b      	ldr	r3, [r3, #0]
 8050732:	f042 0216 	orr.w	r2, r2, #22
 8050736:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8050738:	68fb      	ldr	r3, [r7, #12]
 805073a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 805073c:	2b00      	cmp	r3, #0
 805073e:	d007      	beq.n	8050750 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8050740:	68fb      	ldr	r3, [r7, #12]
 8050742:	681b      	ldr	r3, [r3, #0]
 8050744:	681a      	ldr	r2, [r3, #0]
 8050746:	68fb      	ldr	r3, [r7, #12]
 8050748:	681b      	ldr	r3, [r3, #0]
 805074a:	f042 0208 	orr.w	r2, r2, #8
 805074e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8050750:	68fb      	ldr	r3, [r7, #12]
 8050752:	681b      	ldr	r3, [r3, #0]
 8050754:	681a      	ldr	r2, [r3, #0]
 8050756:	68fb      	ldr	r3, [r7, #12]
 8050758:	681b      	ldr	r3, [r3, #0]
 805075a:	f042 0201 	orr.w	r2, r2, #1
 805075e:	601a      	str	r2, [r3, #0]
 8050760:	e005      	b.n	805076e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8050762:	68fb      	ldr	r3, [r7, #12]
 8050764:	2200      	movs	r2, #0
 8050766:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 805076a:	2302      	movs	r3, #2
 805076c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 805076e:	7dfb      	ldrb	r3, [r7, #23]
}
 8050770:	4618      	mov	r0, r3
 8050772:	3718      	adds	r7, #24
 8050774:	46bd      	mov	sp, r7
 8050776:	bd80      	pop	{r7, pc}

08050778 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8050778:	b580      	push	{r7, lr}
 805077a:	b084      	sub	sp, #16
 805077c:	af00      	add	r7, sp, #0
 805077e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8050780:	687b      	ldr	r3, [r7, #4]
 8050782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8050784:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8050786:	f7fe ff55 	bl	804f634 <HAL_GetTick>
 805078a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 805078c:	687b      	ldr	r3, [r7, #4]
 805078e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8050792:	b2db      	uxtb	r3, r3
 8050794:	2b02      	cmp	r3, #2
 8050796:	d008      	beq.n	80507aa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8050798:	687b      	ldr	r3, [r7, #4]
 805079a:	2280      	movs	r2, #128	; 0x80
 805079c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 805079e:	687b      	ldr	r3, [r7, #4]
 80507a0:	2200      	movs	r2, #0
 80507a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80507a6:	2301      	movs	r3, #1
 80507a8:	e052      	b.n	8050850 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80507aa:	687b      	ldr	r3, [r7, #4]
 80507ac:	681b      	ldr	r3, [r3, #0]
 80507ae:	681a      	ldr	r2, [r3, #0]
 80507b0:	687b      	ldr	r3, [r7, #4]
 80507b2:	681b      	ldr	r3, [r3, #0]
 80507b4:	f022 0216 	bic.w	r2, r2, #22
 80507b8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80507ba:	687b      	ldr	r3, [r7, #4]
 80507bc:	681b      	ldr	r3, [r3, #0]
 80507be:	695a      	ldr	r2, [r3, #20]
 80507c0:	687b      	ldr	r3, [r7, #4]
 80507c2:	681b      	ldr	r3, [r3, #0]
 80507c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80507c8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80507ca:	687b      	ldr	r3, [r7, #4]
 80507cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80507ce:	2b00      	cmp	r3, #0
 80507d0:	d103      	bne.n	80507da <HAL_DMA_Abort+0x62>
 80507d2:	687b      	ldr	r3, [r7, #4]
 80507d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80507d6:	2b00      	cmp	r3, #0
 80507d8:	d007      	beq.n	80507ea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80507da:	687b      	ldr	r3, [r7, #4]
 80507dc:	681b      	ldr	r3, [r3, #0]
 80507de:	681a      	ldr	r2, [r3, #0]
 80507e0:	687b      	ldr	r3, [r7, #4]
 80507e2:	681b      	ldr	r3, [r3, #0]
 80507e4:	f022 0208 	bic.w	r2, r2, #8
 80507e8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80507ea:	687b      	ldr	r3, [r7, #4]
 80507ec:	681b      	ldr	r3, [r3, #0]
 80507ee:	681a      	ldr	r2, [r3, #0]
 80507f0:	687b      	ldr	r3, [r7, #4]
 80507f2:	681b      	ldr	r3, [r3, #0]
 80507f4:	f022 0201 	bic.w	r2, r2, #1
 80507f8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80507fa:	e013      	b.n	8050824 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80507fc:	f7fe ff1a 	bl	804f634 <HAL_GetTick>
 8050800:	4602      	mov	r2, r0
 8050802:	68bb      	ldr	r3, [r7, #8]
 8050804:	1ad3      	subs	r3, r2, r3
 8050806:	2b05      	cmp	r3, #5
 8050808:	d90c      	bls.n	8050824 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 805080a:	687b      	ldr	r3, [r7, #4]
 805080c:	2220      	movs	r2, #32
 805080e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8050810:	687b      	ldr	r3, [r7, #4]
 8050812:	2200      	movs	r2, #0
 8050814:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8050818:	687b      	ldr	r3, [r7, #4]
 805081a:	2203      	movs	r2, #3
 805081c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8050820:	2303      	movs	r3, #3
 8050822:	e015      	b.n	8050850 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8050824:	687b      	ldr	r3, [r7, #4]
 8050826:	681b      	ldr	r3, [r3, #0]
 8050828:	681b      	ldr	r3, [r3, #0]
 805082a:	f003 0301 	and.w	r3, r3, #1
 805082e:	2b00      	cmp	r3, #0
 8050830:	d1e4      	bne.n	80507fc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8050832:	687b      	ldr	r3, [r7, #4]
 8050834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8050836:	223f      	movs	r2, #63	; 0x3f
 8050838:	409a      	lsls	r2, r3
 805083a:	68fb      	ldr	r3, [r7, #12]
 805083c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 805083e:	687b      	ldr	r3, [r7, #4]
 8050840:	2200      	movs	r2, #0
 8050842:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8050846:	687b      	ldr	r3, [r7, #4]
 8050848:	2201      	movs	r2, #1
 805084a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 805084e:	2300      	movs	r3, #0
}
 8050850:	4618      	mov	r0, r3
 8050852:	3710      	adds	r7, #16
 8050854:	46bd      	mov	sp, r7
 8050856:	bd80      	pop	{r7, pc}

08050858 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8050858:	b480      	push	{r7}
 805085a:	b083      	sub	sp, #12
 805085c:	af00      	add	r7, sp, #0
 805085e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8050860:	687b      	ldr	r3, [r7, #4]
 8050862:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8050866:	b2db      	uxtb	r3, r3
 8050868:	2b02      	cmp	r3, #2
 805086a:	d004      	beq.n	8050876 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 805086c:	687b      	ldr	r3, [r7, #4]
 805086e:	2280      	movs	r2, #128	; 0x80
 8050870:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8050872:	2301      	movs	r3, #1
 8050874:	e00c      	b.n	8050890 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8050876:	687b      	ldr	r3, [r7, #4]
 8050878:	2205      	movs	r2, #5
 805087a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 805087e:	687b      	ldr	r3, [r7, #4]
 8050880:	681b      	ldr	r3, [r3, #0]
 8050882:	681a      	ldr	r2, [r3, #0]
 8050884:	687b      	ldr	r3, [r7, #4]
 8050886:	681b      	ldr	r3, [r3, #0]
 8050888:	f022 0201 	bic.w	r2, r2, #1
 805088c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 805088e:	2300      	movs	r3, #0
}
 8050890:	4618      	mov	r0, r3
 8050892:	370c      	adds	r7, #12
 8050894:	46bd      	mov	sp, r7
 8050896:	f85d 7b04 	ldr.w	r7, [sp], #4
 805089a:	4770      	bx	lr

0805089c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 805089c:	b580      	push	{r7, lr}
 805089e:	b086      	sub	sp, #24
 80508a0:	af00      	add	r7, sp, #0
 80508a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80508a4:	2300      	movs	r3, #0
 80508a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80508a8:	4b92      	ldr	r3, [pc, #584]	; (8050af4 <HAL_DMA_IRQHandler+0x258>)
 80508aa:	681b      	ldr	r3, [r3, #0]
 80508ac:	4a92      	ldr	r2, [pc, #584]	; (8050af8 <HAL_DMA_IRQHandler+0x25c>)
 80508ae:	fba2 2303 	umull	r2, r3, r2, r3
 80508b2:	0a9b      	lsrs	r3, r3, #10
 80508b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80508b6:	687b      	ldr	r3, [r7, #4]
 80508b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80508ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80508bc:	693b      	ldr	r3, [r7, #16]
 80508be:	681b      	ldr	r3, [r3, #0]
 80508c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80508c2:	687b      	ldr	r3, [r7, #4]
 80508c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80508c6:	2208      	movs	r2, #8
 80508c8:	409a      	lsls	r2, r3
 80508ca:	68fb      	ldr	r3, [r7, #12]
 80508cc:	4013      	ands	r3, r2
 80508ce:	2b00      	cmp	r3, #0
 80508d0:	d01a      	beq.n	8050908 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80508d2:	687b      	ldr	r3, [r7, #4]
 80508d4:	681b      	ldr	r3, [r3, #0]
 80508d6:	681b      	ldr	r3, [r3, #0]
 80508d8:	f003 0304 	and.w	r3, r3, #4
 80508dc:	2b00      	cmp	r3, #0
 80508de:	d013      	beq.n	8050908 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80508e0:	687b      	ldr	r3, [r7, #4]
 80508e2:	681b      	ldr	r3, [r3, #0]
 80508e4:	681a      	ldr	r2, [r3, #0]
 80508e6:	687b      	ldr	r3, [r7, #4]
 80508e8:	681b      	ldr	r3, [r3, #0]
 80508ea:	f022 0204 	bic.w	r2, r2, #4
 80508ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80508f0:	687b      	ldr	r3, [r7, #4]
 80508f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80508f4:	2208      	movs	r2, #8
 80508f6:	409a      	lsls	r2, r3
 80508f8:	693b      	ldr	r3, [r7, #16]
 80508fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80508fc:	687b      	ldr	r3, [r7, #4]
 80508fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8050900:	f043 0201 	orr.w	r2, r3, #1
 8050904:	687b      	ldr	r3, [r7, #4]
 8050906:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8050908:	687b      	ldr	r3, [r7, #4]
 805090a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 805090c:	2201      	movs	r2, #1
 805090e:	409a      	lsls	r2, r3
 8050910:	68fb      	ldr	r3, [r7, #12]
 8050912:	4013      	ands	r3, r2
 8050914:	2b00      	cmp	r3, #0
 8050916:	d012      	beq.n	805093e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8050918:	687b      	ldr	r3, [r7, #4]
 805091a:	681b      	ldr	r3, [r3, #0]
 805091c:	695b      	ldr	r3, [r3, #20]
 805091e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8050922:	2b00      	cmp	r3, #0
 8050924:	d00b      	beq.n	805093e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8050926:	687b      	ldr	r3, [r7, #4]
 8050928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 805092a:	2201      	movs	r2, #1
 805092c:	409a      	lsls	r2, r3
 805092e:	693b      	ldr	r3, [r7, #16]
 8050930:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8050932:	687b      	ldr	r3, [r7, #4]
 8050934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8050936:	f043 0202 	orr.w	r2, r3, #2
 805093a:	687b      	ldr	r3, [r7, #4]
 805093c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 805093e:	687b      	ldr	r3, [r7, #4]
 8050940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8050942:	2204      	movs	r2, #4
 8050944:	409a      	lsls	r2, r3
 8050946:	68fb      	ldr	r3, [r7, #12]
 8050948:	4013      	ands	r3, r2
 805094a:	2b00      	cmp	r3, #0
 805094c:	d012      	beq.n	8050974 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 805094e:	687b      	ldr	r3, [r7, #4]
 8050950:	681b      	ldr	r3, [r3, #0]
 8050952:	681b      	ldr	r3, [r3, #0]
 8050954:	f003 0302 	and.w	r3, r3, #2
 8050958:	2b00      	cmp	r3, #0
 805095a:	d00b      	beq.n	8050974 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 805095c:	687b      	ldr	r3, [r7, #4]
 805095e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8050960:	2204      	movs	r2, #4
 8050962:	409a      	lsls	r2, r3
 8050964:	693b      	ldr	r3, [r7, #16]
 8050966:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8050968:	687b      	ldr	r3, [r7, #4]
 805096a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 805096c:	f043 0204 	orr.w	r2, r3, #4
 8050970:	687b      	ldr	r3, [r7, #4]
 8050972:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8050974:	687b      	ldr	r3, [r7, #4]
 8050976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8050978:	2210      	movs	r2, #16
 805097a:	409a      	lsls	r2, r3
 805097c:	68fb      	ldr	r3, [r7, #12]
 805097e:	4013      	ands	r3, r2
 8050980:	2b00      	cmp	r3, #0
 8050982:	d043      	beq.n	8050a0c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8050984:	687b      	ldr	r3, [r7, #4]
 8050986:	681b      	ldr	r3, [r3, #0]
 8050988:	681b      	ldr	r3, [r3, #0]
 805098a:	f003 0308 	and.w	r3, r3, #8
 805098e:	2b00      	cmp	r3, #0
 8050990:	d03c      	beq.n	8050a0c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8050992:	687b      	ldr	r3, [r7, #4]
 8050994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8050996:	2210      	movs	r2, #16
 8050998:	409a      	lsls	r2, r3
 805099a:	693b      	ldr	r3, [r7, #16]
 805099c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 805099e:	687b      	ldr	r3, [r7, #4]
 80509a0:	681b      	ldr	r3, [r3, #0]
 80509a2:	681b      	ldr	r3, [r3, #0]
 80509a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80509a8:	2b00      	cmp	r3, #0
 80509aa:	d018      	beq.n	80509de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80509ac:	687b      	ldr	r3, [r7, #4]
 80509ae:	681b      	ldr	r3, [r3, #0]
 80509b0:	681b      	ldr	r3, [r3, #0]
 80509b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80509b6:	2b00      	cmp	r3, #0
 80509b8:	d108      	bne.n	80509cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80509ba:	687b      	ldr	r3, [r7, #4]
 80509bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80509be:	2b00      	cmp	r3, #0
 80509c0:	d024      	beq.n	8050a0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80509c2:	687b      	ldr	r3, [r7, #4]
 80509c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80509c6:	6878      	ldr	r0, [r7, #4]
 80509c8:	4798      	blx	r3
 80509ca:	e01f      	b.n	8050a0c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80509cc:	687b      	ldr	r3, [r7, #4]
 80509ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80509d0:	2b00      	cmp	r3, #0
 80509d2:	d01b      	beq.n	8050a0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80509d4:	687b      	ldr	r3, [r7, #4]
 80509d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80509d8:	6878      	ldr	r0, [r7, #4]
 80509da:	4798      	blx	r3
 80509dc:	e016      	b.n	8050a0c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80509de:	687b      	ldr	r3, [r7, #4]
 80509e0:	681b      	ldr	r3, [r3, #0]
 80509e2:	681b      	ldr	r3, [r3, #0]
 80509e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80509e8:	2b00      	cmp	r3, #0
 80509ea:	d107      	bne.n	80509fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80509ec:	687b      	ldr	r3, [r7, #4]
 80509ee:	681b      	ldr	r3, [r3, #0]
 80509f0:	681a      	ldr	r2, [r3, #0]
 80509f2:	687b      	ldr	r3, [r7, #4]
 80509f4:	681b      	ldr	r3, [r3, #0]
 80509f6:	f022 0208 	bic.w	r2, r2, #8
 80509fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80509fc:	687b      	ldr	r3, [r7, #4]
 80509fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8050a00:	2b00      	cmp	r3, #0
 8050a02:	d003      	beq.n	8050a0c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8050a04:	687b      	ldr	r3, [r7, #4]
 8050a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8050a08:	6878      	ldr	r0, [r7, #4]
 8050a0a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8050a0c:	687b      	ldr	r3, [r7, #4]
 8050a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8050a10:	2220      	movs	r2, #32
 8050a12:	409a      	lsls	r2, r3
 8050a14:	68fb      	ldr	r3, [r7, #12]
 8050a16:	4013      	ands	r3, r2
 8050a18:	2b00      	cmp	r3, #0
 8050a1a:	f000 808e 	beq.w	8050b3a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8050a1e:	687b      	ldr	r3, [r7, #4]
 8050a20:	681b      	ldr	r3, [r3, #0]
 8050a22:	681b      	ldr	r3, [r3, #0]
 8050a24:	f003 0310 	and.w	r3, r3, #16
 8050a28:	2b00      	cmp	r3, #0
 8050a2a:	f000 8086 	beq.w	8050b3a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8050a2e:	687b      	ldr	r3, [r7, #4]
 8050a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8050a32:	2220      	movs	r2, #32
 8050a34:	409a      	lsls	r2, r3
 8050a36:	693b      	ldr	r3, [r7, #16]
 8050a38:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8050a3a:	687b      	ldr	r3, [r7, #4]
 8050a3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8050a40:	b2db      	uxtb	r3, r3
 8050a42:	2b05      	cmp	r3, #5
 8050a44:	d136      	bne.n	8050ab4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8050a46:	687b      	ldr	r3, [r7, #4]
 8050a48:	681b      	ldr	r3, [r3, #0]
 8050a4a:	681a      	ldr	r2, [r3, #0]
 8050a4c:	687b      	ldr	r3, [r7, #4]
 8050a4e:	681b      	ldr	r3, [r3, #0]
 8050a50:	f022 0216 	bic.w	r2, r2, #22
 8050a54:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8050a56:	687b      	ldr	r3, [r7, #4]
 8050a58:	681b      	ldr	r3, [r3, #0]
 8050a5a:	695a      	ldr	r2, [r3, #20]
 8050a5c:	687b      	ldr	r3, [r7, #4]
 8050a5e:	681b      	ldr	r3, [r3, #0]
 8050a60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8050a64:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8050a66:	687b      	ldr	r3, [r7, #4]
 8050a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8050a6a:	2b00      	cmp	r3, #0
 8050a6c:	d103      	bne.n	8050a76 <HAL_DMA_IRQHandler+0x1da>
 8050a6e:	687b      	ldr	r3, [r7, #4]
 8050a70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8050a72:	2b00      	cmp	r3, #0
 8050a74:	d007      	beq.n	8050a86 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8050a76:	687b      	ldr	r3, [r7, #4]
 8050a78:	681b      	ldr	r3, [r3, #0]
 8050a7a:	681a      	ldr	r2, [r3, #0]
 8050a7c:	687b      	ldr	r3, [r7, #4]
 8050a7e:	681b      	ldr	r3, [r3, #0]
 8050a80:	f022 0208 	bic.w	r2, r2, #8
 8050a84:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8050a86:	687b      	ldr	r3, [r7, #4]
 8050a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8050a8a:	223f      	movs	r2, #63	; 0x3f
 8050a8c:	409a      	lsls	r2, r3
 8050a8e:	693b      	ldr	r3, [r7, #16]
 8050a90:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8050a92:	687b      	ldr	r3, [r7, #4]
 8050a94:	2200      	movs	r2, #0
 8050a96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8050a9a:	687b      	ldr	r3, [r7, #4]
 8050a9c:	2201      	movs	r2, #1
 8050a9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8050aa2:	687b      	ldr	r3, [r7, #4]
 8050aa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8050aa6:	2b00      	cmp	r3, #0
 8050aa8:	d07d      	beq.n	8050ba6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8050aaa:	687b      	ldr	r3, [r7, #4]
 8050aac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8050aae:	6878      	ldr	r0, [r7, #4]
 8050ab0:	4798      	blx	r3
        }
        return;
 8050ab2:	e078      	b.n	8050ba6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8050ab4:	687b      	ldr	r3, [r7, #4]
 8050ab6:	681b      	ldr	r3, [r3, #0]
 8050ab8:	681b      	ldr	r3, [r3, #0]
 8050aba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8050abe:	2b00      	cmp	r3, #0
 8050ac0:	d01c      	beq.n	8050afc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8050ac2:	687b      	ldr	r3, [r7, #4]
 8050ac4:	681b      	ldr	r3, [r3, #0]
 8050ac6:	681b      	ldr	r3, [r3, #0]
 8050ac8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8050acc:	2b00      	cmp	r3, #0
 8050ace:	d108      	bne.n	8050ae2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8050ad0:	687b      	ldr	r3, [r7, #4]
 8050ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8050ad4:	2b00      	cmp	r3, #0
 8050ad6:	d030      	beq.n	8050b3a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8050ad8:	687b      	ldr	r3, [r7, #4]
 8050ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8050adc:	6878      	ldr	r0, [r7, #4]
 8050ade:	4798      	blx	r3
 8050ae0:	e02b      	b.n	8050b3a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8050ae2:	687b      	ldr	r3, [r7, #4]
 8050ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8050ae6:	2b00      	cmp	r3, #0
 8050ae8:	d027      	beq.n	8050b3a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8050aea:	687b      	ldr	r3, [r7, #4]
 8050aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8050aee:	6878      	ldr	r0, [r7, #4]
 8050af0:	4798      	blx	r3
 8050af2:	e022      	b.n	8050b3a <HAL_DMA_IRQHandler+0x29e>
 8050af4:	20007c54 	.word	0x20007c54
 8050af8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8050afc:	687b      	ldr	r3, [r7, #4]
 8050afe:	681b      	ldr	r3, [r3, #0]
 8050b00:	681b      	ldr	r3, [r3, #0]
 8050b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8050b06:	2b00      	cmp	r3, #0
 8050b08:	d10f      	bne.n	8050b2a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8050b0a:	687b      	ldr	r3, [r7, #4]
 8050b0c:	681b      	ldr	r3, [r3, #0]
 8050b0e:	681a      	ldr	r2, [r3, #0]
 8050b10:	687b      	ldr	r3, [r7, #4]
 8050b12:	681b      	ldr	r3, [r3, #0]
 8050b14:	f022 0210 	bic.w	r2, r2, #16
 8050b18:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8050b1a:	687b      	ldr	r3, [r7, #4]
 8050b1c:	2200      	movs	r2, #0
 8050b1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8050b22:	687b      	ldr	r3, [r7, #4]
 8050b24:	2201      	movs	r2, #1
 8050b26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8050b2a:	687b      	ldr	r3, [r7, #4]
 8050b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8050b2e:	2b00      	cmp	r3, #0
 8050b30:	d003      	beq.n	8050b3a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8050b32:	687b      	ldr	r3, [r7, #4]
 8050b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8050b36:	6878      	ldr	r0, [r7, #4]
 8050b38:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8050b3a:	687b      	ldr	r3, [r7, #4]
 8050b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8050b3e:	2b00      	cmp	r3, #0
 8050b40:	d032      	beq.n	8050ba8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8050b42:	687b      	ldr	r3, [r7, #4]
 8050b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8050b46:	f003 0301 	and.w	r3, r3, #1
 8050b4a:	2b00      	cmp	r3, #0
 8050b4c:	d022      	beq.n	8050b94 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8050b4e:	687b      	ldr	r3, [r7, #4]
 8050b50:	2205      	movs	r2, #5
 8050b52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8050b56:	687b      	ldr	r3, [r7, #4]
 8050b58:	681b      	ldr	r3, [r3, #0]
 8050b5a:	681a      	ldr	r2, [r3, #0]
 8050b5c:	687b      	ldr	r3, [r7, #4]
 8050b5e:	681b      	ldr	r3, [r3, #0]
 8050b60:	f022 0201 	bic.w	r2, r2, #1
 8050b64:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8050b66:	68bb      	ldr	r3, [r7, #8]
 8050b68:	3301      	adds	r3, #1
 8050b6a:	60bb      	str	r3, [r7, #8]
 8050b6c:	697a      	ldr	r2, [r7, #20]
 8050b6e:	429a      	cmp	r2, r3
 8050b70:	d307      	bcc.n	8050b82 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8050b72:	687b      	ldr	r3, [r7, #4]
 8050b74:	681b      	ldr	r3, [r3, #0]
 8050b76:	681b      	ldr	r3, [r3, #0]
 8050b78:	f003 0301 	and.w	r3, r3, #1
 8050b7c:	2b00      	cmp	r3, #0
 8050b7e:	d1f2      	bne.n	8050b66 <HAL_DMA_IRQHandler+0x2ca>
 8050b80:	e000      	b.n	8050b84 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8050b82:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8050b84:	687b      	ldr	r3, [r7, #4]
 8050b86:	2200      	movs	r2, #0
 8050b88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8050b8c:	687b      	ldr	r3, [r7, #4]
 8050b8e:	2201      	movs	r2, #1
 8050b90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8050b94:	687b      	ldr	r3, [r7, #4]
 8050b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8050b98:	2b00      	cmp	r3, #0
 8050b9a:	d005      	beq.n	8050ba8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8050b9c:	687b      	ldr	r3, [r7, #4]
 8050b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8050ba0:	6878      	ldr	r0, [r7, #4]
 8050ba2:	4798      	blx	r3
 8050ba4:	e000      	b.n	8050ba8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8050ba6:	bf00      	nop
    }
  }
}
 8050ba8:	3718      	adds	r7, #24
 8050baa:	46bd      	mov	sp, r7
 8050bac:	bd80      	pop	{r7, pc}
 8050bae:	bf00      	nop

08050bb0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8050bb0:	b480      	push	{r7}
 8050bb2:	b085      	sub	sp, #20
 8050bb4:	af00      	add	r7, sp, #0
 8050bb6:	60f8      	str	r0, [r7, #12]
 8050bb8:	60b9      	str	r1, [r7, #8]
 8050bba:	607a      	str	r2, [r7, #4]
 8050bbc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8050bbe:	68fb      	ldr	r3, [r7, #12]
 8050bc0:	681b      	ldr	r3, [r3, #0]
 8050bc2:	681a      	ldr	r2, [r3, #0]
 8050bc4:	68fb      	ldr	r3, [r7, #12]
 8050bc6:	681b      	ldr	r3, [r3, #0]
 8050bc8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8050bcc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8050bce:	68fb      	ldr	r3, [r7, #12]
 8050bd0:	681b      	ldr	r3, [r3, #0]
 8050bd2:	683a      	ldr	r2, [r7, #0]
 8050bd4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8050bd6:	68fb      	ldr	r3, [r7, #12]
 8050bd8:	689b      	ldr	r3, [r3, #8]
 8050bda:	2b40      	cmp	r3, #64	; 0x40
 8050bdc:	d108      	bne.n	8050bf0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8050bde:	68fb      	ldr	r3, [r7, #12]
 8050be0:	681b      	ldr	r3, [r3, #0]
 8050be2:	687a      	ldr	r2, [r7, #4]
 8050be4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8050be6:	68fb      	ldr	r3, [r7, #12]
 8050be8:	681b      	ldr	r3, [r3, #0]
 8050bea:	68ba      	ldr	r2, [r7, #8]
 8050bec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8050bee:	e007      	b.n	8050c00 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8050bf0:	68fb      	ldr	r3, [r7, #12]
 8050bf2:	681b      	ldr	r3, [r3, #0]
 8050bf4:	68ba      	ldr	r2, [r7, #8]
 8050bf6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8050bf8:	68fb      	ldr	r3, [r7, #12]
 8050bfa:	681b      	ldr	r3, [r3, #0]
 8050bfc:	687a      	ldr	r2, [r7, #4]
 8050bfe:	60da      	str	r2, [r3, #12]
}
 8050c00:	bf00      	nop
 8050c02:	3714      	adds	r7, #20
 8050c04:	46bd      	mov	sp, r7
 8050c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8050c0a:	4770      	bx	lr

08050c0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8050c0c:	b480      	push	{r7}
 8050c0e:	b085      	sub	sp, #20
 8050c10:	af00      	add	r7, sp, #0
 8050c12:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8050c14:	687b      	ldr	r3, [r7, #4]
 8050c16:	681b      	ldr	r3, [r3, #0]
 8050c18:	b2db      	uxtb	r3, r3
 8050c1a:	3b10      	subs	r3, #16
 8050c1c:	4a14      	ldr	r2, [pc, #80]	; (8050c70 <DMA_CalcBaseAndBitshift+0x64>)
 8050c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8050c22:	091b      	lsrs	r3, r3, #4
 8050c24:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8050c26:	4a13      	ldr	r2, [pc, #76]	; (8050c74 <DMA_CalcBaseAndBitshift+0x68>)
 8050c28:	68fb      	ldr	r3, [r7, #12]
 8050c2a:	4413      	add	r3, r2
 8050c2c:	781b      	ldrb	r3, [r3, #0]
 8050c2e:	461a      	mov	r2, r3
 8050c30:	687b      	ldr	r3, [r7, #4]
 8050c32:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8050c34:	68fb      	ldr	r3, [r7, #12]
 8050c36:	2b03      	cmp	r3, #3
 8050c38:	d909      	bls.n	8050c4e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8050c3a:	687b      	ldr	r3, [r7, #4]
 8050c3c:	681b      	ldr	r3, [r3, #0]
 8050c3e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8050c42:	f023 0303 	bic.w	r3, r3, #3
 8050c46:	1d1a      	adds	r2, r3, #4
 8050c48:	687b      	ldr	r3, [r7, #4]
 8050c4a:	659a      	str	r2, [r3, #88]	; 0x58
 8050c4c:	e007      	b.n	8050c5e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8050c4e:	687b      	ldr	r3, [r7, #4]
 8050c50:	681b      	ldr	r3, [r3, #0]
 8050c52:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8050c56:	f023 0303 	bic.w	r3, r3, #3
 8050c5a:	687a      	ldr	r2, [r7, #4]
 8050c5c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8050c5e:	687b      	ldr	r3, [r7, #4]
 8050c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8050c62:	4618      	mov	r0, r3
 8050c64:	3714      	adds	r7, #20
 8050c66:	46bd      	mov	sp, r7
 8050c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8050c6c:	4770      	bx	lr
 8050c6e:	bf00      	nop
 8050c70:	aaaaaaab 	.word	0xaaaaaaab
 8050c74:	0807ca88 	.word	0x0807ca88

08050c78 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8050c78:	b480      	push	{r7}
 8050c7a:	b085      	sub	sp, #20
 8050c7c:	af00      	add	r7, sp, #0
 8050c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8050c80:	2300      	movs	r3, #0
 8050c82:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8050c84:	687b      	ldr	r3, [r7, #4]
 8050c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8050c88:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8050c8a:	687b      	ldr	r3, [r7, #4]
 8050c8c:	699b      	ldr	r3, [r3, #24]
 8050c8e:	2b00      	cmp	r3, #0
 8050c90:	d11f      	bne.n	8050cd2 <DMA_CheckFifoParam+0x5a>
 8050c92:	68bb      	ldr	r3, [r7, #8]
 8050c94:	2b03      	cmp	r3, #3
 8050c96:	d856      	bhi.n	8050d46 <DMA_CheckFifoParam+0xce>
 8050c98:	a201      	add	r2, pc, #4	; (adr r2, 8050ca0 <DMA_CheckFifoParam+0x28>)
 8050c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8050c9e:	bf00      	nop
 8050ca0:	08050cb1 	.word	0x08050cb1
 8050ca4:	08050cc3 	.word	0x08050cc3
 8050ca8:	08050cb1 	.word	0x08050cb1
 8050cac:	08050d47 	.word	0x08050d47
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8050cb0:	687b      	ldr	r3, [r7, #4]
 8050cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8050cb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8050cb8:	2b00      	cmp	r3, #0
 8050cba:	d046      	beq.n	8050d4a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8050cbc:	2301      	movs	r3, #1
 8050cbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8050cc0:	e043      	b.n	8050d4a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8050cc2:	687b      	ldr	r3, [r7, #4]
 8050cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8050cc6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8050cca:	d140      	bne.n	8050d4e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8050ccc:	2301      	movs	r3, #1
 8050cce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8050cd0:	e03d      	b.n	8050d4e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8050cd2:	687b      	ldr	r3, [r7, #4]
 8050cd4:	699b      	ldr	r3, [r3, #24]
 8050cd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8050cda:	d121      	bne.n	8050d20 <DMA_CheckFifoParam+0xa8>
 8050cdc:	68bb      	ldr	r3, [r7, #8]
 8050cde:	2b03      	cmp	r3, #3
 8050ce0:	d837      	bhi.n	8050d52 <DMA_CheckFifoParam+0xda>
 8050ce2:	a201      	add	r2, pc, #4	; (adr r2, 8050ce8 <DMA_CheckFifoParam+0x70>)
 8050ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8050ce8:	08050cf9 	.word	0x08050cf9
 8050cec:	08050cff 	.word	0x08050cff
 8050cf0:	08050cf9 	.word	0x08050cf9
 8050cf4:	08050d11 	.word	0x08050d11
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8050cf8:	2301      	movs	r3, #1
 8050cfa:	73fb      	strb	r3, [r7, #15]
      break;
 8050cfc:	e030      	b.n	8050d60 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8050cfe:	687b      	ldr	r3, [r7, #4]
 8050d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8050d02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8050d06:	2b00      	cmp	r3, #0
 8050d08:	d025      	beq.n	8050d56 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8050d0a:	2301      	movs	r3, #1
 8050d0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8050d0e:	e022      	b.n	8050d56 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8050d10:	687b      	ldr	r3, [r7, #4]
 8050d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8050d14:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8050d18:	d11f      	bne.n	8050d5a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8050d1a:	2301      	movs	r3, #1
 8050d1c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8050d1e:	e01c      	b.n	8050d5a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8050d20:	68bb      	ldr	r3, [r7, #8]
 8050d22:	2b02      	cmp	r3, #2
 8050d24:	d903      	bls.n	8050d2e <DMA_CheckFifoParam+0xb6>
 8050d26:	68bb      	ldr	r3, [r7, #8]
 8050d28:	2b03      	cmp	r3, #3
 8050d2a:	d003      	beq.n	8050d34 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8050d2c:	e018      	b.n	8050d60 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8050d2e:	2301      	movs	r3, #1
 8050d30:	73fb      	strb	r3, [r7, #15]
      break;
 8050d32:	e015      	b.n	8050d60 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8050d34:	687b      	ldr	r3, [r7, #4]
 8050d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8050d38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8050d3c:	2b00      	cmp	r3, #0
 8050d3e:	d00e      	beq.n	8050d5e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8050d40:	2301      	movs	r3, #1
 8050d42:	73fb      	strb	r3, [r7, #15]
      break;
 8050d44:	e00b      	b.n	8050d5e <DMA_CheckFifoParam+0xe6>
      break;
 8050d46:	bf00      	nop
 8050d48:	e00a      	b.n	8050d60 <DMA_CheckFifoParam+0xe8>
      break;
 8050d4a:	bf00      	nop
 8050d4c:	e008      	b.n	8050d60 <DMA_CheckFifoParam+0xe8>
      break;
 8050d4e:	bf00      	nop
 8050d50:	e006      	b.n	8050d60 <DMA_CheckFifoParam+0xe8>
      break;
 8050d52:	bf00      	nop
 8050d54:	e004      	b.n	8050d60 <DMA_CheckFifoParam+0xe8>
      break;
 8050d56:	bf00      	nop
 8050d58:	e002      	b.n	8050d60 <DMA_CheckFifoParam+0xe8>
      break;   
 8050d5a:	bf00      	nop
 8050d5c:	e000      	b.n	8050d60 <DMA_CheckFifoParam+0xe8>
      break;
 8050d5e:	bf00      	nop
    }
  } 
  
  return status; 
 8050d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8050d62:	4618      	mov	r0, r3
 8050d64:	3714      	adds	r7, #20
 8050d66:	46bd      	mov	sp, r7
 8050d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8050d6c:	4770      	bx	lr
 8050d6e:	bf00      	nop

08050d70 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8050d70:	b580      	push	{r7, lr}
 8050d72:	b086      	sub	sp, #24
 8050d74:	af00      	add	r7, sp, #0
 8050d76:	60f8      	str	r0, [r7, #12]
 8050d78:	60b9      	str	r1, [r7, #8]
 8050d7a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8050d7e:	2301      	movs	r3, #1
 8050d80:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8050d82:	4b23      	ldr	r3, [pc, #140]	; (8050e10 <HAL_FLASH_Program+0xa0>)
 8050d84:	7e1b      	ldrb	r3, [r3, #24]
 8050d86:	2b01      	cmp	r3, #1
 8050d88:	d101      	bne.n	8050d8e <HAL_FLASH_Program+0x1e>
 8050d8a:	2302      	movs	r3, #2
 8050d8c:	e03b      	b.n	8050e06 <HAL_FLASH_Program+0x96>
 8050d8e:	4b20      	ldr	r3, [pc, #128]	; (8050e10 <HAL_FLASH_Program+0xa0>)
 8050d90:	2201      	movs	r2, #1
 8050d92:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8050d94:	f24c 3050 	movw	r0, #50000	; 0xc350
 8050d98:	f000 f870 	bl	8050e7c <FLASH_WaitForLastOperation>
 8050d9c:	4603      	mov	r3, r0
 8050d9e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8050da0:	7dfb      	ldrb	r3, [r7, #23]
 8050da2:	2b00      	cmp	r3, #0
 8050da4:	d12b      	bne.n	8050dfe <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8050da6:	68fb      	ldr	r3, [r7, #12]
 8050da8:	2b00      	cmp	r3, #0
 8050daa:	d105      	bne.n	8050db8 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8050dac:	783b      	ldrb	r3, [r7, #0]
 8050dae:	4619      	mov	r1, r3
 8050db0:	68b8      	ldr	r0, [r7, #8]
 8050db2:	f000 f91b 	bl	8050fec <FLASH_Program_Byte>
 8050db6:	e016      	b.n	8050de6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8050db8:	68fb      	ldr	r3, [r7, #12]
 8050dba:	2b01      	cmp	r3, #1
 8050dbc:	d105      	bne.n	8050dca <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8050dbe:	883b      	ldrh	r3, [r7, #0]
 8050dc0:	4619      	mov	r1, r3
 8050dc2:	68b8      	ldr	r0, [r7, #8]
 8050dc4:	f000 f8ee 	bl	8050fa4 <FLASH_Program_HalfWord>
 8050dc8:	e00d      	b.n	8050de6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8050dca:	68fb      	ldr	r3, [r7, #12]
 8050dcc:	2b02      	cmp	r3, #2
 8050dce:	d105      	bne.n	8050ddc <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8050dd0:	683b      	ldr	r3, [r7, #0]
 8050dd2:	4619      	mov	r1, r3
 8050dd4:	68b8      	ldr	r0, [r7, #8]
 8050dd6:	f000 f8c3 	bl	8050f60 <FLASH_Program_Word>
 8050dda:	e004      	b.n	8050de6 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8050ddc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8050de0:	68b8      	ldr	r0, [r7, #8]
 8050de2:	f000 f88b 	bl	8050efc <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8050de6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8050dea:	f000 f847 	bl	8050e7c <FLASH_WaitForLastOperation>
 8050dee:	4603      	mov	r3, r0
 8050df0:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8050df2:	4b08      	ldr	r3, [pc, #32]	; (8050e14 <HAL_FLASH_Program+0xa4>)
 8050df4:	691b      	ldr	r3, [r3, #16]
 8050df6:	4a07      	ldr	r2, [pc, #28]	; (8050e14 <HAL_FLASH_Program+0xa4>)
 8050df8:	f023 0301 	bic.w	r3, r3, #1
 8050dfc:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8050dfe:	4b04      	ldr	r3, [pc, #16]	; (8050e10 <HAL_FLASH_Program+0xa0>)
 8050e00:	2200      	movs	r2, #0
 8050e02:	761a      	strb	r2, [r3, #24]
  
  return status;
 8050e04:	7dfb      	ldrb	r3, [r7, #23]
}
 8050e06:	4618      	mov	r0, r3
 8050e08:	3718      	adds	r7, #24
 8050e0a:	46bd      	mov	sp, r7
 8050e0c:	bd80      	pop	{r7, pc}
 8050e0e:	bf00      	nop
 8050e10:	2001c324 	.word	0x2001c324
 8050e14:	40023c00 	.word	0x40023c00

08050e18 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8050e18:	b480      	push	{r7}
 8050e1a:	b083      	sub	sp, #12
 8050e1c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8050e1e:	2300      	movs	r3, #0
 8050e20:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8050e22:	4b0b      	ldr	r3, [pc, #44]	; (8050e50 <HAL_FLASH_Unlock+0x38>)
 8050e24:	691b      	ldr	r3, [r3, #16]
 8050e26:	2b00      	cmp	r3, #0
 8050e28:	da0b      	bge.n	8050e42 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8050e2a:	4b09      	ldr	r3, [pc, #36]	; (8050e50 <HAL_FLASH_Unlock+0x38>)
 8050e2c:	4a09      	ldr	r2, [pc, #36]	; (8050e54 <HAL_FLASH_Unlock+0x3c>)
 8050e2e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8050e30:	4b07      	ldr	r3, [pc, #28]	; (8050e50 <HAL_FLASH_Unlock+0x38>)
 8050e32:	4a09      	ldr	r2, [pc, #36]	; (8050e58 <HAL_FLASH_Unlock+0x40>)
 8050e34:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8050e36:	4b06      	ldr	r3, [pc, #24]	; (8050e50 <HAL_FLASH_Unlock+0x38>)
 8050e38:	691b      	ldr	r3, [r3, #16]
 8050e3a:	2b00      	cmp	r3, #0
 8050e3c:	da01      	bge.n	8050e42 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8050e3e:	2301      	movs	r3, #1
 8050e40:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8050e42:	79fb      	ldrb	r3, [r7, #7]
}
 8050e44:	4618      	mov	r0, r3
 8050e46:	370c      	adds	r7, #12
 8050e48:	46bd      	mov	sp, r7
 8050e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8050e4e:	4770      	bx	lr
 8050e50:	40023c00 	.word	0x40023c00
 8050e54:	45670123 	.word	0x45670123
 8050e58:	cdef89ab 	.word	0xcdef89ab

08050e5c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8050e5c:	b480      	push	{r7}
 8050e5e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8050e60:	4b05      	ldr	r3, [pc, #20]	; (8050e78 <HAL_FLASH_Lock+0x1c>)
 8050e62:	691b      	ldr	r3, [r3, #16]
 8050e64:	4a04      	ldr	r2, [pc, #16]	; (8050e78 <HAL_FLASH_Lock+0x1c>)
 8050e66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8050e6a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8050e6c:	2300      	movs	r3, #0
}
 8050e6e:	4618      	mov	r0, r3
 8050e70:	46bd      	mov	sp, r7
 8050e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8050e76:	4770      	bx	lr
 8050e78:	40023c00 	.word	0x40023c00

08050e7c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8050e7c:	b580      	push	{r7, lr}
 8050e7e:	b084      	sub	sp, #16
 8050e80:	af00      	add	r7, sp, #0
 8050e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8050e84:	2300      	movs	r3, #0
 8050e86:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8050e88:	4b1a      	ldr	r3, [pc, #104]	; (8050ef4 <FLASH_WaitForLastOperation+0x78>)
 8050e8a:	2200      	movs	r2, #0
 8050e8c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8050e8e:	f7fe fbd1 	bl	804f634 <HAL_GetTick>
 8050e92:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8050e94:	e010      	b.n	8050eb8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8050e96:	687b      	ldr	r3, [r7, #4]
 8050e98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8050e9c:	d00c      	beq.n	8050eb8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8050e9e:	687b      	ldr	r3, [r7, #4]
 8050ea0:	2b00      	cmp	r3, #0
 8050ea2:	d007      	beq.n	8050eb4 <FLASH_WaitForLastOperation+0x38>
 8050ea4:	f7fe fbc6 	bl	804f634 <HAL_GetTick>
 8050ea8:	4602      	mov	r2, r0
 8050eaa:	68fb      	ldr	r3, [r7, #12]
 8050eac:	1ad3      	subs	r3, r2, r3
 8050eae:	687a      	ldr	r2, [r7, #4]
 8050eb0:	429a      	cmp	r2, r3
 8050eb2:	d201      	bcs.n	8050eb8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8050eb4:	2303      	movs	r3, #3
 8050eb6:	e019      	b.n	8050eec <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8050eb8:	4b0f      	ldr	r3, [pc, #60]	; (8050ef8 <FLASH_WaitForLastOperation+0x7c>)
 8050eba:	68db      	ldr	r3, [r3, #12]
 8050ebc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8050ec0:	2b00      	cmp	r3, #0
 8050ec2:	d1e8      	bne.n	8050e96 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8050ec4:	4b0c      	ldr	r3, [pc, #48]	; (8050ef8 <FLASH_WaitForLastOperation+0x7c>)
 8050ec6:	68db      	ldr	r3, [r3, #12]
 8050ec8:	f003 0301 	and.w	r3, r3, #1
 8050ecc:	2b00      	cmp	r3, #0
 8050ece:	d002      	beq.n	8050ed6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8050ed0:	4b09      	ldr	r3, [pc, #36]	; (8050ef8 <FLASH_WaitForLastOperation+0x7c>)
 8050ed2:	2201      	movs	r2, #1
 8050ed4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8050ed6:	4b08      	ldr	r3, [pc, #32]	; (8050ef8 <FLASH_WaitForLastOperation+0x7c>)
 8050ed8:	68db      	ldr	r3, [r3, #12]
 8050eda:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8050ede:	2b00      	cmp	r3, #0
 8050ee0:	d003      	beq.n	8050eea <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8050ee2:	f000 f8a5 	bl	8051030 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8050ee6:	2301      	movs	r3, #1
 8050ee8:	e000      	b.n	8050eec <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8050eea:	2300      	movs	r3, #0
  
}  
 8050eec:	4618      	mov	r0, r3
 8050eee:	3710      	adds	r7, #16
 8050ef0:	46bd      	mov	sp, r7
 8050ef2:	bd80      	pop	{r7, pc}
 8050ef4:	2001c324 	.word	0x2001c324
 8050ef8:	40023c00 	.word	0x40023c00

08050efc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8050efc:	b480      	push	{r7}
 8050efe:	b085      	sub	sp, #20
 8050f00:	af00      	add	r7, sp, #0
 8050f02:	60f8      	str	r0, [r7, #12]
 8050f04:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8050f08:	4b14      	ldr	r3, [pc, #80]	; (8050f5c <FLASH_Program_DoubleWord+0x60>)
 8050f0a:	691b      	ldr	r3, [r3, #16]
 8050f0c:	4a13      	ldr	r2, [pc, #76]	; (8050f5c <FLASH_Program_DoubleWord+0x60>)
 8050f0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8050f12:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8050f14:	4b11      	ldr	r3, [pc, #68]	; (8050f5c <FLASH_Program_DoubleWord+0x60>)
 8050f16:	691b      	ldr	r3, [r3, #16]
 8050f18:	4a10      	ldr	r2, [pc, #64]	; (8050f5c <FLASH_Program_DoubleWord+0x60>)
 8050f1a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8050f1e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8050f20:	4b0e      	ldr	r3, [pc, #56]	; (8050f5c <FLASH_Program_DoubleWord+0x60>)
 8050f22:	691b      	ldr	r3, [r3, #16]
 8050f24:	4a0d      	ldr	r2, [pc, #52]	; (8050f5c <FLASH_Program_DoubleWord+0x60>)
 8050f26:	f043 0301 	orr.w	r3, r3, #1
 8050f2a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8050f2c:	68fb      	ldr	r3, [r7, #12]
 8050f2e:	683a      	ldr	r2, [r7, #0]
 8050f30:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8050f32:	f3bf 8f6f 	isb	sy
}
 8050f36:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8050f38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8050f3c:	f04f 0200 	mov.w	r2, #0
 8050f40:	f04f 0300 	mov.w	r3, #0
 8050f44:	000a      	movs	r2, r1
 8050f46:	2300      	movs	r3, #0
 8050f48:	68f9      	ldr	r1, [r7, #12]
 8050f4a:	3104      	adds	r1, #4
 8050f4c:	4613      	mov	r3, r2
 8050f4e:	600b      	str	r3, [r1, #0]
}
 8050f50:	bf00      	nop
 8050f52:	3714      	adds	r7, #20
 8050f54:	46bd      	mov	sp, r7
 8050f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8050f5a:	4770      	bx	lr
 8050f5c:	40023c00 	.word	0x40023c00

08050f60 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8050f60:	b480      	push	{r7}
 8050f62:	b083      	sub	sp, #12
 8050f64:	af00      	add	r7, sp, #0
 8050f66:	6078      	str	r0, [r7, #4]
 8050f68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8050f6a:	4b0d      	ldr	r3, [pc, #52]	; (8050fa0 <FLASH_Program_Word+0x40>)
 8050f6c:	691b      	ldr	r3, [r3, #16]
 8050f6e:	4a0c      	ldr	r2, [pc, #48]	; (8050fa0 <FLASH_Program_Word+0x40>)
 8050f70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8050f74:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8050f76:	4b0a      	ldr	r3, [pc, #40]	; (8050fa0 <FLASH_Program_Word+0x40>)
 8050f78:	691b      	ldr	r3, [r3, #16]
 8050f7a:	4a09      	ldr	r2, [pc, #36]	; (8050fa0 <FLASH_Program_Word+0x40>)
 8050f7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8050f80:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8050f82:	4b07      	ldr	r3, [pc, #28]	; (8050fa0 <FLASH_Program_Word+0x40>)
 8050f84:	691b      	ldr	r3, [r3, #16]
 8050f86:	4a06      	ldr	r2, [pc, #24]	; (8050fa0 <FLASH_Program_Word+0x40>)
 8050f88:	f043 0301 	orr.w	r3, r3, #1
 8050f8c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8050f8e:	687b      	ldr	r3, [r7, #4]
 8050f90:	683a      	ldr	r2, [r7, #0]
 8050f92:	601a      	str	r2, [r3, #0]
}
 8050f94:	bf00      	nop
 8050f96:	370c      	adds	r7, #12
 8050f98:	46bd      	mov	sp, r7
 8050f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8050f9e:	4770      	bx	lr
 8050fa0:	40023c00 	.word	0x40023c00

08050fa4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8050fa4:	b480      	push	{r7}
 8050fa6:	b083      	sub	sp, #12
 8050fa8:	af00      	add	r7, sp, #0
 8050faa:	6078      	str	r0, [r7, #4]
 8050fac:	460b      	mov	r3, r1
 8050fae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8050fb0:	4b0d      	ldr	r3, [pc, #52]	; (8050fe8 <FLASH_Program_HalfWord+0x44>)
 8050fb2:	691b      	ldr	r3, [r3, #16]
 8050fb4:	4a0c      	ldr	r2, [pc, #48]	; (8050fe8 <FLASH_Program_HalfWord+0x44>)
 8050fb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8050fba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8050fbc:	4b0a      	ldr	r3, [pc, #40]	; (8050fe8 <FLASH_Program_HalfWord+0x44>)
 8050fbe:	691b      	ldr	r3, [r3, #16]
 8050fc0:	4a09      	ldr	r2, [pc, #36]	; (8050fe8 <FLASH_Program_HalfWord+0x44>)
 8050fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8050fc6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8050fc8:	4b07      	ldr	r3, [pc, #28]	; (8050fe8 <FLASH_Program_HalfWord+0x44>)
 8050fca:	691b      	ldr	r3, [r3, #16]
 8050fcc:	4a06      	ldr	r2, [pc, #24]	; (8050fe8 <FLASH_Program_HalfWord+0x44>)
 8050fce:	f043 0301 	orr.w	r3, r3, #1
 8050fd2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8050fd4:	687b      	ldr	r3, [r7, #4]
 8050fd6:	887a      	ldrh	r2, [r7, #2]
 8050fd8:	801a      	strh	r2, [r3, #0]
}
 8050fda:	bf00      	nop
 8050fdc:	370c      	adds	r7, #12
 8050fde:	46bd      	mov	sp, r7
 8050fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8050fe4:	4770      	bx	lr
 8050fe6:	bf00      	nop
 8050fe8:	40023c00 	.word	0x40023c00

08050fec <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8050fec:	b480      	push	{r7}
 8050fee:	b083      	sub	sp, #12
 8050ff0:	af00      	add	r7, sp, #0
 8050ff2:	6078      	str	r0, [r7, #4]
 8050ff4:	460b      	mov	r3, r1
 8050ff6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8050ff8:	4b0c      	ldr	r3, [pc, #48]	; (805102c <FLASH_Program_Byte+0x40>)
 8050ffa:	691b      	ldr	r3, [r3, #16]
 8050ffc:	4a0b      	ldr	r2, [pc, #44]	; (805102c <FLASH_Program_Byte+0x40>)
 8050ffe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8051002:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8051004:	4b09      	ldr	r3, [pc, #36]	; (805102c <FLASH_Program_Byte+0x40>)
 8051006:	4a09      	ldr	r2, [pc, #36]	; (805102c <FLASH_Program_Byte+0x40>)
 8051008:	691b      	ldr	r3, [r3, #16]
 805100a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 805100c:	4b07      	ldr	r3, [pc, #28]	; (805102c <FLASH_Program_Byte+0x40>)
 805100e:	691b      	ldr	r3, [r3, #16]
 8051010:	4a06      	ldr	r2, [pc, #24]	; (805102c <FLASH_Program_Byte+0x40>)
 8051012:	f043 0301 	orr.w	r3, r3, #1
 8051016:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8051018:	687b      	ldr	r3, [r7, #4]
 805101a:	78fa      	ldrb	r2, [r7, #3]
 805101c:	701a      	strb	r2, [r3, #0]
}
 805101e:	bf00      	nop
 8051020:	370c      	adds	r7, #12
 8051022:	46bd      	mov	sp, r7
 8051024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8051028:	4770      	bx	lr
 805102a:	bf00      	nop
 805102c:	40023c00 	.word	0x40023c00

08051030 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8051030:	b480      	push	{r7}
 8051032:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8051034:	4b27      	ldr	r3, [pc, #156]	; (80510d4 <FLASH_SetErrorCode+0xa4>)
 8051036:	68db      	ldr	r3, [r3, #12]
 8051038:	f003 0310 	and.w	r3, r3, #16
 805103c:	2b00      	cmp	r3, #0
 805103e:	d008      	beq.n	8051052 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8051040:	4b25      	ldr	r3, [pc, #148]	; (80510d8 <FLASH_SetErrorCode+0xa8>)
 8051042:	69db      	ldr	r3, [r3, #28]
 8051044:	f043 0310 	orr.w	r3, r3, #16
 8051048:	4a23      	ldr	r2, [pc, #140]	; (80510d8 <FLASH_SetErrorCode+0xa8>)
 805104a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 805104c:	4b21      	ldr	r3, [pc, #132]	; (80510d4 <FLASH_SetErrorCode+0xa4>)
 805104e:	2210      	movs	r2, #16
 8051050:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8051052:	4b20      	ldr	r3, [pc, #128]	; (80510d4 <FLASH_SetErrorCode+0xa4>)
 8051054:	68db      	ldr	r3, [r3, #12]
 8051056:	f003 0320 	and.w	r3, r3, #32
 805105a:	2b00      	cmp	r3, #0
 805105c:	d008      	beq.n	8051070 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 805105e:	4b1e      	ldr	r3, [pc, #120]	; (80510d8 <FLASH_SetErrorCode+0xa8>)
 8051060:	69db      	ldr	r3, [r3, #28]
 8051062:	f043 0308 	orr.w	r3, r3, #8
 8051066:	4a1c      	ldr	r2, [pc, #112]	; (80510d8 <FLASH_SetErrorCode+0xa8>)
 8051068:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 805106a:	4b1a      	ldr	r3, [pc, #104]	; (80510d4 <FLASH_SetErrorCode+0xa4>)
 805106c:	2220      	movs	r2, #32
 805106e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8051070:	4b18      	ldr	r3, [pc, #96]	; (80510d4 <FLASH_SetErrorCode+0xa4>)
 8051072:	68db      	ldr	r3, [r3, #12]
 8051074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8051078:	2b00      	cmp	r3, #0
 805107a:	d008      	beq.n	805108e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 805107c:	4b16      	ldr	r3, [pc, #88]	; (80510d8 <FLASH_SetErrorCode+0xa8>)
 805107e:	69db      	ldr	r3, [r3, #28]
 8051080:	f043 0304 	orr.w	r3, r3, #4
 8051084:	4a14      	ldr	r2, [pc, #80]	; (80510d8 <FLASH_SetErrorCode+0xa8>)
 8051086:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8051088:	4b12      	ldr	r3, [pc, #72]	; (80510d4 <FLASH_SetErrorCode+0xa4>)
 805108a:	2240      	movs	r2, #64	; 0x40
 805108c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 805108e:	4b11      	ldr	r3, [pc, #68]	; (80510d4 <FLASH_SetErrorCode+0xa4>)
 8051090:	68db      	ldr	r3, [r3, #12]
 8051092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8051096:	2b00      	cmp	r3, #0
 8051098:	d008      	beq.n	80510ac <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 805109a:	4b0f      	ldr	r3, [pc, #60]	; (80510d8 <FLASH_SetErrorCode+0xa8>)
 805109c:	69db      	ldr	r3, [r3, #28]
 805109e:	f043 0302 	orr.w	r3, r3, #2
 80510a2:	4a0d      	ldr	r2, [pc, #52]	; (80510d8 <FLASH_SetErrorCode+0xa8>)
 80510a4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80510a6:	4b0b      	ldr	r3, [pc, #44]	; (80510d4 <FLASH_SetErrorCode+0xa4>)
 80510a8:	2280      	movs	r2, #128	; 0x80
 80510aa:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80510ac:	4b09      	ldr	r3, [pc, #36]	; (80510d4 <FLASH_SetErrorCode+0xa4>)
 80510ae:	68db      	ldr	r3, [r3, #12]
 80510b0:	f003 0302 	and.w	r3, r3, #2
 80510b4:	2b00      	cmp	r3, #0
 80510b6:	d008      	beq.n	80510ca <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80510b8:	4b07      	ldr	r3, [pc, #28]	; (80510d8 <FLASH_SetErrorCode+0xa8>)
 80510ba:	69db      	ldr	r3, [r3, #28]
 80510bc:	f043 0320 	orr.w	r3, r3, #32
 80510c0:	4a05      	ldr	r2, [pc, #20]	; (80510d8 <FLASH_SetErrorCode+0xa8>)
 80510c2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80510c4:	4b03      	ldr	r3, [pc, #12]	; (80510d4 <FLASH_SetErrorCode+0xa4>)
 80510c6:	2202      	movs	r2, #2
 80510c8:	60da      	str	r2, [r3, #12]
  }
}
 80510ca:	bf00      	nop
 80510cc:	46bd      	mov	sp, r7
 80510ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80510d2:	4770      	bx	lr
 80510d4:	40023c00 	.word	0x40023c00
 80510d8:	2001c324 	.word	0x2001c324

080510dc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80510dc:	b580      	push	{r7, lr}
 80510de:	b084      	sub	sp, #16
 80510e0:	af00      	add	r7, sp, #0
 80510e2:	6078      	str	r0, [r7, #4]
 80510e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80510e6:	2301      	movs	r3, #1
 80510e8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80510ea:	2300      	movs	r3, #0
 80510ec:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80510ee:	4b31      	ldr	r3, [pc, #196]	; (80511b4 <HAL_FLASHEx_Erase+0xd8>)
 80510f0:	7e1b      	ldrb	r3, [r3, #24]
 80510f2:	2b01      	cmp	r3, #1
 80510f4:	d101      	bne.n	80510fa <HAL_FLASHEx_Erase+0x1e>
 80510f6:	2302      	movs	r3, #2
 80510f8:	e058      	b.n	80511ac <HAL_FLASHEx_Erase+0xd0>
 80510fa:	4b2e      	ldr	r3, [pc, #184]	; (80511b4 <HAL_FLASHEx_Erase+0xd8>)
 80510fc:	2201      	movs	r2, #1
 80510fe:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8051100:	f24c 3050 	movw	r0, #50000	; 0xc350
 8051104:	f7ff feba 	bl	8050e7c <FLASH_WaitForLastOperation>
 8051108:	4603      	mov	r3, r0
 805110a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 805110c:	7bfb      	ldrb	r3, [r7, #15]
 805110e:	2b00      	cmp	r3, #0
 8051110:	d148      	bne.n	80511a4 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8051112:	683b      	ldr	r3, [r7, #0]
 8051114:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8051118:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 805111a:	687b      	ldr	r3, [r7, #4]
 805111c:	681b      	ldr	r3, [r3, #0]
 805111e:	2b01      	cmp	r3, #1
 8051120:	d115      	bne.n	805114e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8051122:	687b      	ldr	r3, [r7, #4]
 8051124:	691b      	ldr	r3, [r3, #16]
 8051126:	b2da      	uxtb	r2, r3
 8051128:	687b      	ldr	r3, [r7, #4]
 805112a:	685b      	ldr	r3, [r3, #4]
 805112c:	4619      	mov	r1, r3
 805112e:	4610      	mov	r0, r2
 8051130:	f000 f844 	bl	80511bc <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8051134:	f24c 3050 	movw	r0, #50000	; 0xc350
 8051138:	f7ff fea0 	bl	8050e7c <FLASH_WaitForLastOperation>
 805113c:	4603      	mov	r3, r0
 805113e:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8051140:	4b1d      	ldr	r3, [pc, #116]	; (80511b8 <HAL_FLASHEx_Erase+0xdc>)
 8051142:	691b      	ldr	r3, [r3, #16]
 8051144:	4a1c      	ldr	r2, [pc, #112]	; (80511b8 <HAL_FLASHEx_Erase+0xdc>)
 8051146:	f023 0304 	bic.w	r3, r3, #4
 805114a:	6113      	str	r3, [r2, #16]
 805114c:	e028      	b.n	80511a0 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 805114e:	687b      	ldr	r3, [r7, #4]
 8051150:	689b      	ldr	r3, [r3, #8]
 8051152:	60bb      	str	r3, [r7, #8]
 8051154:	e01c      	b.n	8051190 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8051156:	687b      	ldr	r3, [r7, #4]
 8051158:	691b      	ldr	r3, [r3, #16]
 805115a:	b2db      	uxtb	r3, r3
 805115c:	4619      	mov	r1, r3
 805115e:	68b8      	ldr	r0, [r7, #8]
 8051160:	f000 f850 	bl	8051204 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8051164:	f24c 3050 	movw	r0, #50000	; 0xc350
 8051168:	f7ff fe88 	bl	8050e7c <FLASH_WaitForLastOperation>
 805116c:	4603      	mov	r3, r0
 805116e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8051170:	4b11      	ldr	r3, [pc, #68]	; (80511b8 <HAL_FLASHEx_Erase+0xdc>)
 8051172:	691b      	ldr	r3, [r3, #16]
 8051174:	4a10      	ldr	r2, [pc, #64]	; (80511b8 <HAL_FLASHEx_Erase+0xdc>)
 8051176:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 805117a:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 805117c:	7bfb      	ldrb	r3, [r7, #15]
 805117e:	2b00      	cmp	r3, #0
 8051180:	d003      	beq.n	805118a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8051182:	683b      	ldr	r3, [r7, #0]
 8051184:	68ba      	ldr	r2, [r7, #8]
 8051186:	601a      	str	r2, [r3, #0]
          break;
 8051188:	e00a      	b.n	80511a0 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 805118a:	68bb      	ldr	r3, [r7, #8]
 805118c:	3301      	adds	r3, #1
 805118e:	60bb      	str	r3, [r7, #8]
 8051190:	687b      	ldr	r3, [r7, #4]
 8051192:	68da      	ldr	r2, [r3, #12]
 8051194:	687b      	ldr	r3, [r7, #4]
 8051196:	689b      	ldr	r3, [r3, #8]
 8051198:	4413      	add	r3, r2
 805119a:	68ba      	ldr	r2, [r7, #8]
 805119c:	429a      	cmp	r2, r3
 805119e:	d3da      	bcc.n	8051156 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 80511a0:	f000 f878 	bl	8051294 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80511a4:	4b03      	ldr	r3, [pc, #12]	; (80511b4 <HAL_FLASHEx_Erase+0xd8>)
 80511a6:	2200      	movs	r2, #0
 80511a8:	761a      	strb	r2, [r3, #24]

  return status;
 80511aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80511ac:	4618      	mov	r0, r3
 80511ae:	3710      	adds	r7, #16
 80511b0:	46bd      	mov	sp, r7
 80511b2:	bd80      	pop	{r7, pc}
 80511b4:	2001c324 	.word	0x2001c324
 80511b8:	40023c00 	.word	0x40023c00

080511bc <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80511bc:	b480      	push	{r7}
 80511be:	b083      	sub	sp, #12
 80511c0:	af00      	add	r7, sp, #0
 80511c2:	4603      	mov	r3, r0
 80511c4:	6039      	str	r1, [r7, #0]
 80511c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80511c8:	4b0d      	ldr	r3, [pc, #52]	; (8051200 <FLASH_MassErase+0x44>)
 80511ca:	691b      	ldr	r3, [r3, #16]
 80511cc:	4a0c      	ldr	r2, [pc, #48]	; (8051200 <FLASH_MassErase+0x44>)
 80511ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80511d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80511d4:	4b0a      	ldr	r3, [pc, #40]	; (8051200 <FLASH_MassErase+0x44>)
 80511d6:	691b      	ldr	r3, [r3, #16]
 80511d8:	4a09      	ldr	r2, [pc, #36]	; (8051200 <FLASH_MassErase+0x44>)
 80511da:	f043 0304 	orr.w	r3, r3, #4
 80511de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 80511e0:	4b07      	ldr	r3, [pc, #28]	; (8051200 <FLASH_MassErase+0x44>)
 80511e2:	691a      	ldr	r2, [r3, #16]
 80511e4:	79fb      	ldrb	r3, [r7, #7]
 80511e6:	021b      	lsls	r3, r3, #8
 80511e8:	4313      	orrs	r3, r2
 80511ea:	4a05      	ldr	r2, [pc, #20]	; (8051200 <FLASH_MassErase+0x44>)
 80511ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80511f0:	6113      	str	r3, [r2, #16]
}
 80511f2:	bf00      	nop
 80511f4:	370c      	adds	r7, #12
 80511f6:	46bd      	mov	sp, r7
 80511f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80511fc:	4770      	bx	lr
 80511fe:	bf00      	nop
 8051200:	40023c00 	.word	0x40023c00

08051204 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8051204:	b480      	push	{r7}
 8051206:	b085      	sub	sp, #20
 8051208:	af00      	add	r7, sp, #0
 805120a:	6078      	str	r0, [r7, #4]
 805120c:	460b      	mov	r3, r1
 805120e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8051210:	2300      	movs	r3, #0
 8051212:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8051214:	78fb      	ldrb	r3, [r7, #3]
 8051216:	2b00      	cmp	r3, #0
 8051218:	d102      	bne.n	8051220 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 805121a:	2300      	movs	r3, #0
 805121c:	60fb      	str	r3, [r7, #12]
 805121e:	e010      	b.n	8051242 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8051220:	78fb      	ldrb	r3, [r7, #3]
 8051222:	2b01      	cmp	r3, #1
 8051224:	d103      	bne.n	805122e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8051226:	f44f 7380 	mov.w	r3, #256	; 0x100
 805122a:	60fb      	str	r3, [r7, #12]
 805122c:	e009      	b.n	8051242 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 805122e:	78fb      	ldrb	r3, [r7, #3]
 8051230:	2b02      	cmp	r3, #2
 8051232:	d103      	bne.n	805123c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8051234:	f44f 7300 	mov.w	r3, #512	; 0x200
 8051238:	60fb      	str	r3, [r7, #12]
 805123a:	e002      	b.n	8051242 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 805123c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8051240:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8051242:	4b13      	ldr	r3, [pc, #76]	; (8051290 <FLASH_Erase_Sector+0x8c>)
 8051244:	691b      	ldr	r3, [r3, #16]
 8051246:	4a12      	ldr	r2, [pc, #72]	; (8051290 <FLASH_Erase_Sector+0x8c>)
 8051248:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 805124c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 805124e:	4b10      	ldr	r3, [pc, #64]	; (8051290 <FLASH_Erase_Sector+0x8c>)
 8051250:	691a      	ldr	r2, [r3, #16]
 8051252:	490f      	ldr	r1, [pc, #60]	; (8051290 <FLASH_Erase_Sector+0x8c>)
 8051254:	68fb      	ldr	r3, [r7, #12]
 8051256:	4313      	orrs	r3, r2
 8051258:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 805125a:	4b0d      	ldr	r3, [pc, #52]	; (8051290 <FLASH_Erase_Sector+0x8c>)
 805125c:	691b      	ldr	r3, [r3, #16]
 805125e:	4a0c      	ldr	r2, [pc, #48]	; (8051290 <FLASH_Erase_Sector+0x8c>)
 8051260:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8051264:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8051266:	4b0a      	ldr	r3, [pc, #40]	; (8051290 <FLASH_Erase_Sector+0x8c>)
 8051268:	691a      	ldr	r2, [r3, #16]
 805126a:	687b      	ldr	r3, [r7, #4]
 805126c:	00db      	lsls	r3, r3, #3
 805126e:	4313      	orrs	r3, r2
 8051270:	4a07      	ldr	r2, [pc, #28]	; (8051290 <FLASH_Erase_Sector+0x8c>)
 8051272:	f043 0302 	orr.w	r3, r3, #2
 8051276:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8051278:	4b05      	ldr	r3, [pc, #20]	; (8051290 <FLASH_Erase_Sector+0x8c>)
 805127a:	691b      	ldr	r3, [r3, #16]
 805127c:	4a04      	ldr	r2, [pc, #16]	; (8051290 <FLASH_Erase_Sector+0x8c>)
 805127e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8051282:	6113      	str	r3, [r2, #16]
}
 8051284:	bf00      	nop
 8051286:	3714      	adds	r7, #20
 8051288:	46bd      	mov	sp, r7
 805128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 805128e:	4770      	bx	lr
 8051290:	40023c00 	.word	0x40023c00

08051294 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8051294:	b480      	push	{r7}
 8051296:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8051298:	4b20      	ldr	r3, [pc, #128]	; (805131c <FLASH_FlushCaches+0x88>)
 805129a:	681b      	ldr	r3, [r3, #0]
 805129c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80512a0:	2b00      	cmp	r3, #0
 80512a2:	d017      	beq.n	80512d4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80512a4:	4b1d      	ldr	r3, [pc, #116]	; (805131c <FLASH_FlushCaches+0x88>)
 80512a6:	681b      	ldr	r3, [r3, #0]
 80512a8:	4a1c      	ldr	r2, [pc, #112]	; (805131c <FLASH_FlushCaches+0x88>)
 80512aa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80512ae:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80512b0:	4b1a      	ldr	r3, [pc, #104]	; (805131c <FLASH_FlushCaches+0x88>)
 80512b2:	681b      	ldr	r3, [r3, #0]
 80512b4:	4a19      	ldr	r2, [pc, #100]	; (805131c <FLASH_FlushCaches+0x88>)
 80512b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80512ba:	6013      	str	r3, [r2, #0]
 80512bc:	4b17      	ldr	r3, [pc, #92]	; (805131c <FLASH_FlushCaches+0x88>)
 80512be:	681b      	ldr	r3, [r3, #0]
 80512c0:	4a16      	ldr	r2, [pc, #88]	; (805131c <FLASH_FlushCaches+0x88>)
 80512c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80512c6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80512c8:	4b14      	ldr	r3, [pc, #80]	; (805131c <FLASH_FlushCaches+0x88>)
 80512ca:	681b      	ldr	r3, [r3, #0]
 80512cc:	4a13      	ldr	r2, [pc, #76]	; (805131c <FLASH_FlushCaches+0x88>)
 80512ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80512d2:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80512d4:	4b11      	ldr	r3, [pc, #68]	; (805131c <FLASH_FlushCaches+0x88>)
 80512d6:	681b      	ldr	r3, [r3, #0]
 80512d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80512dc:	2b00      	cmp	r3, #0
 80512de:	d017      	beq.n	8051310 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80512e0:	4b0e      	ldr	r3, [pc, #56]	; (805131c <FLASH_FlushCaches+0x88>)
 80512e2:	681b      	ldr	r3, [r3, #0]
 80512e4:	4a0d      	ldr	r2, [pc, #52]	; (805131c <FLASH_FlushCaches+0x88>)
 80512e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80512ea:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80512ec:	4b0b      	ldr	r3, [pc, #44]	; (805131c <FLASH_FlushCaches+0x88>)
 80512ee:	681b      	ldr	r3, [r3, #0]
 80512f0:	4a0a      	ldr	r2, [pc, #40]	; (805131c <FLASH_FlushCaches+0x88>)
 80512f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80512f6:	6013      	str	r3, [r2, #0]
 80512f8:	4b08      	ldr	r3, [pc, #32]	; (805131c <FLASH_FlushCaches+0x88>)
 80512fa:	681b      	ldr	r3, [r3, #0]
 80512fc:	4a07      	ldr	r2, [pc, #28]	; (805131c <FLASH_FlushCaches+0x88>)
 80512fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8051302:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8051304:	4b05      	ldr	r3, [pc, #20]	; (805131c <FLASH_FlushCaches+0x88>)
 8051306:	681b      	ldr	r3, [r3, #0]
 8051308:	4a04      	ldr	r2, [pc, #16]	; (805131c <FLASH_FlushCaches+0x88>)
 805130a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 805130e:	6013      	str	r3, [r2, #0]
  }
}
 8051310:	bf00      	nop
 8051312:	46bd      	mov	sp, r7
 8051314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8051318:	4770      	bx	lr
 805131a:	bf00      	nop
 805131c:	40023c00 	.word	0x40023c00

08051320 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8051320:	b480      	push	{r7}
 8051322:	b089      	sub	sp, #36	; 0x24
 8051324:	af00      	add	r7, sp, #0
 8051326:	6078      	str	r0, [r7, #4]
 8051328:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 805132a:	2300      	movs	r3, #0
 805132c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 805132e:	2300      	movs	r3, #0
 8051330:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8051332:	2300      	movs	r3, #0
 8051334:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8051336:	2300      	movs	r3, #0
 8051338:	61fb      	str	r3, [r7, #28]
 805133a:	e16b      	b.n	8051614 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 805133c:	2201      	movs	r2, #1
 805133e:	69fb      	ldr	r3, [r7, #28]
 8051340:	fa02 f303 	lsl.w	r3, r2, r3
 8051344:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8051346:	683b      	ldr	r3, [r7, #0]
 8051348:	681b      	ldr	r3, [r3, #0]
 805134a:	697a      	ldr	r2, [r7, #20]
 805134c:	4013      	ands	r3, r2
 805134e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8051350:	693a      	ldr	r2, [r7, #16]
 8051352:	697b      	ldr	r3, [r7, #20]
 8051354:	429a      	cmp	r2, r3
 8051356:	f040 815a 	bne.w	805160e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 805135a:	683b      	ldr	r3, [r7, #0]
 805135c:	685b      	ldr	r3, [r3, #4]
 805135e:	f003 0303 	and.w	r3, r3, #3
 8051362:	2b01      	cmp	r3, #1
 8051364:	d005      	beq.n	8051372 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8051366:	683b      	ldr	r3, [r7, #0]
 8051368:	685b      	ldr	r3, [r3, #4]
 805136a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 805136e:	2b02      	cmp	r3, #2
 8051370:	d130      	bne.n	80513d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8051372:	687b      	ldr	r3, [r7, #4]
 8051374:	689b      	ldr	r3, [r3, #8]
 8051376:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8051378:	69fb      	ldr	r3, [r7, #28]
 805137a:	005b      	lsls	r3, r3, #1
 805137c:	2203      	movs	r2, #3
 805137e:	fa02 f303 	lsl.w	r3, r2, r3
 8051382:	43db      	mvns	r3, r3
 8051384:	69ba      	ldr	r2, [r7, #24]
 8051386:	4013      	ands	r3, r2
 8051388:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 805138a:	683b      	ldr	r3, [r7, #0]
 805138c:	68da      	ldr	r2, [r3, #12]
 805138e:	69fb      	ldr	r3, [r7, #28]
 8051390:	005b      	lsls	r3, r3, #1
 8051392:	fa02 f303 	lsl.w	r3, r2, r3
 8051396:	69ba      	ldr	r2, [r7, #24]
 8051398:	4313      	orrs	r3, r2
 805139a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 805139c:	687b      	ldr	r3, [r7, #4]
 805139e:	69ba      	ldr	r2, [r7, #24]
 80513a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80513a2:	687b      	ldr	r3, [r7, #4]
 80513a4:	685b      	ldr	r3, [r3, #4]
 80513a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80513a8:	2201      	movs	r2, #1
 80513aa:	69fb      	ldr	r3, [r7, #28]
 80513ac:	fa02 f303 	lsl.w	r3, r2, r3
 80513b0:	43db      	mvns	r3, r3
 80513b2:	69ba      	ldr	r2, [r7, #24]
 80513b4:	4013      	ands	r3, r2
 80513b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80513b8:	683b      	ldr	r3, [r7, #0]
 80513ba:	685b      	ldr	r3, [r3, #4]
 80513bc:	091b      	lsrs	r3, r3, #4
 80513be:	f003 0201 	and.w	r2, r3, #1
 80513c2:	69fb      	ldr	r3, [r7, #28]
 80513c4:	fa02 f303 	lsl.w	r3, r2, r3
 80513c8:	69ba      	ldr	r2, [r7, #24]
 80513ca:	4313      	orrs	r3, r2
 80513cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80513ce:	687b      	ldr	r3, [r7, #4]
 80513d0:	69ba      	ldr	r2, [r7, #24]
 80513d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80513d4:	683b      	ldr	r3, [r7, #0]
 80513d6:	685b      	ldr	r3, [r3, #4]
 80513d8:	f003 0303 	and.w	r3, r3, #3
 80513dc:	2b03      	cmp	r3, #3
 80513de:	d017      	beq.n	8051410 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80513e0:	687b      	ldr	r3, [r7, #4]
 80513e2:	68db      	ldr	r3, [r3, #12]
 80513e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80513e6:	69fb      	ldr	r3, [r7, #28]
 80513e8:	005b      	lsls	r3, r3, #1
 80513ea:	2203      	movs	r2, #3
 80513ec:	fa02 f303 	lsl.w	r3, r2, r3
 80513f0:	43db      	mvns	r3, r3
 80513f2:	69ba      	ldr	r2, [r7, #24]
 80513f4:	4013      	ands	r3, r2
 80513f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80513f8:	683b      	ldr	r3, [r7, #0]
 80513fa:	689a      	ldr	r2, [r3, #8]
 80513fc:	69fb      	ldr	r3, [r7, #28]
 80513fe:	005b      	lsls	r3, r3, #1
 8051400:	fa02 f303 	lsl.w	r3, r2, r3
 8051404:	69ba      	ldr	r2, [r7, #24]
 8051406:	4313      	orrs	r3, r2
 8051408:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 805140a:	687b      	ldr	r3, [r7, #4]
 805140c:	69ba      	ldr	r2, [r7, #24]
 805140e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8051410:	683b      	ldr	r3, [r7, #0]
 8051412:	685b      	ldr	r3, [r3, #4]
 8051414:	f003 0303 	and.w	r3, r3, #3
 8051418:	2b02      	cmp	r3, #2
 805141a:	d123      	bne.n	8051464 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 805141c:	69fb      	ldr	r3, [r7, #28]
 805141e:	08da      	lsrs	r2, r3, #3
 8051420:	687b      	ldr	r3, [r7, #4]
 8051422:	3208      	adds	r2, #8
 8051424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8051428:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 805142a:	69fb      	ldr	r3, [r7, #28]
 805142c:	f003 0307 	and.w	r3, r3, #7
 8051430:	009b      	lsls	r3, r3, #2
 8051432:	220f      	movs	r2, #15
 8051434:	fa02 f303 	lsl.w	r3, r2, r3
 8051438:	43db      	mvns	r3, r3
 805143a:	69ba      	ldr	r2, [r7, #24]
 805143c:	4013      	ands	r3, r2
 805143e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8051440:	683b      	ldr	r3, [r7, #0]
 8051442:	691a      	ldr	r2, [r3, #16]
 8051444:	69fb      	ldr	r3, [r7, #28]
 8051446:	f003 0307 	and.w	r3, r3, #7
 805144a:	009b      	lsls	r3, r3, #2
 805144c:	fa02 f303 	lsl.w	r3, r2, r3
 8051450:	69ba      	ldr	r2, [r7, #24]
 8051452:	4313      	orrs	r3, r2
 8051454:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8051456:	69fb      	ldr	r3, [r7, #28]
 8051458:	08da      	lsrs	r2, r3, #3
 805145a:	687b      	ldr	r3, [r7, #4]
 805145c:	3208      	adds	r2, #8
 805145e:	69b9      	ldr	r1, [r7, #24]
 8051460:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8051464:	687b      	ldr	r3, [r7, #4]
 8051466:	681b      	ldr	r3, [r3, #0]
 8051468:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 805146a:	69fb      	ldr	r3, [r7, #28]
 805146c:	005b      	lsls	r3, r3, #1
 805146e:	2203      	movs	r2, #3
 8051470:	fa02 f303 	lsl.w	r3, r2, r3
 8051474:	43db      	mvns	r3, r3
 8051476:	69ba      	ldr	r2, [r7, #24]
 8051478:	4013      	ands	r3, r2
 805147a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 805147c:	683b      	ldr	r3, [r7, #0]
 805147e:	685b      	ldr	r3, [r3, #4]
 8051480:	f003 0203 	and.w	r2, r3, #3
 8051484:	69fb      	ldr	r3, [r7, #28]
 8051486:	005b      	lsls	r3, r3, #1
 8051488:	fa02 f303 	lsl.w	r3, r2, r3
 805148c:	69ba      	ldr	r2, [r7, #24]
 805148e:	4313      	orrs	r3, r2
 8051490:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8051492:	687b      	ldr	r3, [r7, #4]
 8051494:	69ba      	ldr	r2, [r7, #24]
 8051496:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8051498:	683b      	ldr	r3, [r7, #0]
 805149a:	685b      	ldr	r3, [r3, #4]
 805149c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80514a0:	2b00      	cmp	r3, #0
 80514a2:	f000 80b4 	beq.w	805160e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80514a6:	2300      	movs	r3, #0
 80514a8:	60fb      	str	r3, [r7, #12]
 80514aa:	4b60      	ldr	r3, [pc, #384]	; (805162c <HAL_GPIO_Init+0x30c>)
 80514ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80514ae:	4a5f      	ldr	r2, [pc, #380]	; (805162c <HAL_GPIO_Init+0x30c>)
 80514b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80514b4:	6453      	str	r3, [r2, #68]	; 0x44
 80514b6:	4b5d      	ldr	r3, [pc, #372]	; (805162c <HAL_GPIO_Init+0x30c>)
 80514b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80514ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80514be:	60fb      	str	r3, [r7, #12]
 80514c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80514c2:	4a5b      	ldr	r2, [pc, #364]	; (8051630 <HAL_GPIO_Init+0x310>)
 80514c4:	69fb      	ldr	r3, [r7, #28]
 80514c6:	089b      	lsrs	r3, r3, #2
 80514c8:	3302      	adds	r3, #2
 80514ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80514ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80514d0:	69fb      	ldr	r3, [r7, #28]
 80514d2:	f003 0303 	and.w	r3, r3, #3
 80514d6:	009b      	lsls	r3, r3, #2
 80514d8:	220f      	movs	r2, #15
 80514da:	fa02 f303 	lsl.w	r3, r2, r3
 80514de:	43db      	mvns	r3, r3
 80514e0:	69ba      	ldr	r2, [r7, #24]
 80514e2:	4013      	ands	r3, r2
 80514e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80514e6:	687b      	ldr	r3, [r7, #4]
 80514e8:	4a52      	ldr	r2, [pc, #328]	; (8051634 <HAL_GPIO_Init+0x314>)
 80514ea:	4293      	cmp	r3, r2
 80514ec:	d02b      	beq.n	8051546 <HAL_GPIO_Init+0x226>
 80514ee:	687b      	ldr	r3, [r7, #4]
 80514f0:	4a51      	ldr	r2, [pc, #324]	; (8051638 <HAL_GPIO_Init+0x318>)
 80514f2:	4293      	cmp	r3, r2
 80514f4:	d025      	beq.n	8051542 <HAL_GPIO_Init+0x222>
 80514f6:	687b      	ldr	r3, [r7, #4]
 80514f8:	4a50      	ldr	r2, [pc, #320]	; (805163c <HAL_GPIO_Init+0x31c>)
 80514fa:	4293      	cmp	r3, r2
 80514fc:	d01f      	beq.n	805153e <HAL_GPIO_Init+0x21e>
 80514fe:	687b      	ldr	r3, [r7, #4]
 8051500:	4a4f      	ldr	r2, [pc, #316]	; (8051640 <HAL_GPIO_Init+0x320>)
 8051502:	4293      	cmp	r3, r2
 8051504:	d019      	beq.n	805153a <HAL_GPIO_Init+0x21a>
 8051506:	687b      	ldr	r3, [r7, #4]
 8051508:	4a4e      	ldr	r2, [pc, #312]	; (8051644 <HAL_GPIO_Init+0x324>)
 805150a:	4293      	cmp	r3, r2
 805150c:	d013      	beq.n	8051536 <HAL_GPIO_Init+0x216>
 805150e:	687b      	ldr	r3, [r7, #4]
 8051510:	4a4d      	ldr	r2, [pc, #308]	; (8051648 <HAL_GPIO_Init+0x328>)
 8051512:	4293      	cmp	r3, r2
 8051514:	d00d      	beq.n	8051532 <HAL_GPIO_Init+0x212>
 8051516:	687b      	ldr	r3, [r7, #4]
 8051518:	4a4c      	ldr	r2, [pc, #304]	; (805164c <HAL_GPIO_Init+0x32c>)
 805151a:	4293      	cmp	r3, r2
 805151c:	d007      	beq.n	805152e <HAL_GPIO_Init+0x20e>
 805151e:	687b      	ldr	r3, [r7, #4]
 8051520:	4a4b      	ldr	r2, [pc, #300]	; (8051650 <HAL_GPIO_Init+0x330>)
 8051522:	4293      	cmp	r3, r2
 8051524:	d101      	bne.n	805152a <HAL_GPIO_Init+0x20a>
 8051526:	2307      	movs	r3, #7
 8051528:	e00e      	b.n	8051548 <HAL_GPIO_Init+0x228>
 805152a:	2308      	movs	r3, #8
 805152c:	e00c      	b.n	8051548 <HAL_GPIO_Init+0x228>
 805152e:	2306      	movs	r3, #6
 8051530:	e00a      	b.n	8051548 <HAL_GPIO_Init+0x228>
 8051532:	2305      	movs	r3, #5
 8051534:	e008      	b.n	8051548 <HAL_GPIO_Init+0x228>
 8051536:	2304      	movs	r3, #4
 8051538:	e006      	b.n	8051548 <HAL_GPIO_Init+0x228>
 805153a:	2303      	movs	r3, #3
 805153c:	e004      	b.n	8051548 <HAL_GPIO_Init+0x228>
 805153e:	2302      	movs	r3, #2
 8051540:	e002      	b.n	8051548 <HAL_GPIO_Init+0x228>
 8051542:	2301      	movs	r3, #1
 8051544:	e000      	b.n	8051548 <HAL_GPIO_Init+0x228>
 8051546:	2300      	movs	r3, #0
 8051548:	69fa      	ldr	r2, [r7, #28]
 805154a:	f002 0203 	and.w	r2, r2, #3
 805154e:	0092      	lsls	r2, r2, #2
 8051550:	4093      	lsls	r3, r2
 8051552:	69ba      	ldr	r2, [r7, #24]
 8051554:	4313      	orrs	r3, r2
 8051556:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8051558:	4935      	ldr	r1, [pc, #212]	; (8051630 <HAL_GPIO_Init+0x310>)
 805155a:	69fb      	ldr	r3, [r7, #28]
 805155c:	089b      	lsrs	r3, r3, #2
 805155e:	3302      	adds	r3, #2
 8051560:	69ba      	ldr	r2, [r7, #24]
 8051562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8051566:	4b3b      	ldr	r3, [pc, #236]	; (8051654 <HAL_GPIO_Init+0x334>)
 8051568:	681b      	ldr	r3, [r3, #0]
 805156a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 805156c:	693b      	ldr	r3, [r7, #16]
 805156e:	43db      	mvns	r3, r3
 8051570:	69ba      	ldr	r2, [r7, #24]
 8051572:	4013      	ands	r3, r2
 8051574:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8051576:	683b      	ldr	r3, [r7, #0]
 8051578:	685b      	ldr	r3, [r3, #4]
 805157a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 805157e:	2b00      	cmp	r3, #0
 8051580:	d003      	beq.n	805158a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8051582:	69ba      	ldr	r2, [r7, #24]
 8051584:	693b      	ldr	r3, [r7, #16]
 8051586:	4313      	orrs	r3, r2
 8051588:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 805158a:	4a32      	ldr	r2, [pc, #200]	; (8051654 <HAL_GPIO_Init+0x334>)
 805158c:	69bb      	ldr	r3, [r7, #24]
 805158e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8051590:	4b30      	ldr	r3, [pc, #192]	; (8051654 <HAL_GPIO_Init+0x334>)
 8051592:	685b      	ldr	r3, [r3, #4]
 8051594:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8051596:	693b      	ldr	r3, [r7, #16]
 8051598:	43db      	mvns	r3, r3
 805159a:	69ba      	ldr	r2, [r7, #24]
 805159c:	4013      	ands	r3, r2
 805159e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80515a0:	683b      	ldr	r3, [r7, #0]
 80515a2:	685b      	ldr	r3, [r3, #4]
 80515a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80515a8:	2b00      	cmp	r3, #0
 80515aa:	d003      	beq.n	80515b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80515ac:	69ba      	ldr	r2, [r7, #24]
 80515ae:	693b      	ldr	r3, [r7, #16]
 80515b0:	4313      	orrs	r3, r2
 80515b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80515b4:	4a27      	ldr	r2, [pc, #156]	; (8051654 <HAL_GPIO_Init+0x334>)
 80515b6:	69bb      	ldr	r3, [r7, #24]
 80515b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80515ba:	4b26      	ldr	r3, [pc, #152]	; (8051654 <HAL_GPIO_Init+0x334>)
 80515bc:	689b      	ldr	r3, [r3, #8]
 80515be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80515c0:	693b      	ldr	r3, [r7, #16]
 80515c2:	43db      	mvns	r3, r3
 80515c4:	69ba      	ldr	r2, [r7, #24]
 80515c6:	4013      	ands	r3, r2
 80515c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80515ca:	683b      	ldr	r3, [r7, #0]
 80515cc:	685b      	ldr	r3, [r3, #4]
 80515ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80515d2:	2b00      	cmp	r3, #0
 80515d4:	d003      	beq.n	80515de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80515d6:	69ba      	ldr	r2, [r7, #24]
 80515d8:	693b      	ldr	r3, [r7, #16]
 80515da:	4313      	orrs	r3, r2
 80515dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80515de:	4a1d      	ldr	r2, [pc, #116]	; (8051654 <HAL_GPIO_Init+0x334>)
 80515e0:	69bb      	ldr	r3, [r7, #24]
 80515e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80515e4:	4b1b      	ldr	r3, [pc, #108]	; (8051654 <HAL_GPIO_Init+0x334>)
 80515e6:	68db      	ldr	r3, [r3, #12]
 80515e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80515ea:	693b      	ldr	r3, [r7, #16]
 80515ec:	43db      	mvns	r3, r3
 80515ee:	69ba      	ldr	r2, [r7, #24]
 80515f0:	4013      	ands	r3, r2
 80515f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80515f4:	683b      	ldr	r3, [r7, #0]
 80515f6:	685b      	ldr	r3, [r3, #4]
 80515f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80515fc:	2b00      	cmp	r3, #0
 80515fe:	d003      	beq.n	8051608 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8051600:	69ba      	ldr	r2, [r7, #24]
 8051602:	693b      	ldr	r3, [r7, #16]
 8051604:	4313      	orrs	r3, r2
 8051606:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8051608:	4a12      	ldr	r2, [pc, #72]	; (8051654 <HAL_GPIO_Init+0x334>)
 805160a:	69bb      	ldr	r3, [r7, #24]
 805160c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 805160e:	69fb      	ldr	r3, [r7, #28]
 8051610:	3301      	adds	r3, #1
 8051612:	61fb      	str	r3, [r7, #28]
 8051614:	69fb      	ldr	r3, [r7, #28]
 8051616:	2b0f      	cmp	r3, #15
 8051618:	f67f ae90 	bls.w	805133c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 805161c:	bf00      	nop
 805161e:	bf00      	nop
 8051620:	3724      	adds	r7, #36	; 0x24
 8051622:	46bd      	mov	sp, r7
 8051624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8051628:	4770      	bx	lr
 805162a:	bf00      	nop
 805162c:	40023800 	.word	0x40023800
 8051630:	40013800 	.word	0x40013800
 8051634:	40020000 	.word	0x40020000
 8051638:	40020400 	.word	0x40020400
 805163c:	40020800 	.word	0x40020800
 8051640:	40020c00 	.word	0x40020c00
 8051644:	40021000 	.word	0x40021000
 8051648:	40021400 	.word	0x40021400
 805164c:	40021800 	.word	0x40021800
 8051650:	40021c00 	.word	0x40021c00
 8051654:	40013c00 	.word	0x40013c00

08051658 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8051658:	b480      	push	{r7}
 805165a:	b085      	sub	sp, #20
 805165c:	af00      	add	r7, sp, #0
 805165e:	6078      	str	r0, [r7, #4]
 8051660:	460b      	mov	r3, r1
 8051662:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8051664:	687b      	ldr	r3, [r7, #4]
 8051666:	691a      	ldr	r2, [r3, #16]
 8051668:	887b      	ldrh	r3, [r7, #2]
 805166a:	4013      	ands	r3, r2
 805166c:	2b00      	cmp	r3, #0
 805166e:	d002      	beq.n	8051676 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8051670:	2301      	movs	r3, #1
 8051672:	73fb      	strb	r3, [r7, #15]
 8051674:	e001      	b.n	805167a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8051676:	2300      	movs	r3, #0
 8051678:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 805167a:	7bfb      	ldrb	r3, [r7, #15]
}
 805167c:	4618      	mov	r0, r3
 805167e:	3714      	adds	r7, #20
 8051680:	46bd      	mov	sp, r7
 8051682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8051686:	4770      	bx	lr

08051688 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8051688:	b480      	push	{r7}
 805168a:	b083      	sub	sp, #12
 805168c:	af00      	add	r7, sp, #0
 805168e:	6078      	str	r0, [r7, #4]
 8051690:	460b      	mov	r3, r1
 8051692:	807b      	strh	r3, [r7, #2]
 8051694:	4613      	mov	r3, r2
 8051696:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8051698:	787b      	ldrb	r3, [r7, #1]
 805169a:	2b00      	cmp	r3, #0
 805169c:	d003      	beq.n	80516a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 805169e:	887a      	ldrh	r2, [r7, #2]
 80516a0:	687b      	ldr	r3, [r7, #4]
 80516a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80516a4:	e003      	b.n	80516ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80516a6:	887b      	ldrh	r3, [r7, #2]
 80516a8:	041a      	lsls	r2, r3, #16
 80516aa:	687b      	ldr	r3, [r7, #4]
 80516ac:	619a      	str	r2, [r3, #24]
}
 80516ae:	bf00      	nop
 80516b0:	370c      	adds	r7, #12
 80516b2:	46bd      	mov	sp, r7
 80516b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80516b8:	4770      	bx	lr
	...

080516bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80516bc:	b580      	push	{r7, lr}
 80516be:	b082      	sub	sp, #8
 80516c0:	af00      	add	r7, sp, #0
 80516c2:	4603      	mov	r3, r0
 80516c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80516c6:	4b08      	ldr	r3, [pc, #32]	; (80516e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80516c8:	695a      	ldr	r2, [r3, #20]
 80516ca:	88fb      	ldrh	r3, [r7, #6]
 80516cc:	4013      	ands	r3, r2
 80516ce:	2b00      	cmp	r3, #0
 80516d0:	d006      	beq.n	80516e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80516d2:	4a05      	ldr	r2, [pc, #20]	; (80516e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80516d4:	88fb      	ldrh	r3, [r7, #6]
 80516d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80516d8:	88fb      	ldrh	r3, [r7, #6]
 80516da:	4618      	mov	r0, r3
 80516dc:	f7f8 f9c6 	bl	8049a6c <HAL_GPIO_EXTI_Callback>
  }
}
 80516e0:	bf00      	nop
 80516e2:	3708      	adds	r7, #8
 80516e4:	46bd      	mov	sp, r7
 80516e6:	bd80      	pop	{r7, pc}
 80516e8:	40013c00 	.word	0x40013c00

080516ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80516ec:	b580      	push	{r7, lr}
 80516ee:	b084      	sub	sp, #16
 80516f0:	af00      	add	r7, sp, #0
 80516f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80516f4:	687b      	ldr	r3, [r7, #4]
 80516f6:	2b00      	cmp	r3, #0
 80516f8:	d101      	bne.n	80516fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80516fa:	2301      	movs	r3, #1
 80516fc:	e12b      	b.n	8051956 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80516fe:	687b      	ldr	r3, [r7, #4]
 8051700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8051704:	b2db      	uxtb	r3, r3
 8051706:	2b00      	cmp	r3, #0
 8051708:	d106      	bne.n	8051718 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 805170a:	687b      	ldr	r3, [r7, #4]
 805170c:	2200      	movs	r2, #0
 805170e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8051712:	6878      	ldr	r0, [r7, #4]
 8051714:	f7fc fab6 	bl	804dc84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8051718:	687b      	ldr	r3, [r7, #4]
 805171a:	2224      	movs	r2, #36	; 0x24
 805171c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8051720:	687b      	ldr	r3, [r7, #4]
 8051722:	681b      	ldr	r3, [r3, #0]
 8051724:	681a      	ldr	r2, [r3, #0]
 8051726:	687b      	ldr	r3, [r7, #4]
 8051728:	681b      	ldr	r3, [r3, #0]
 805172a:	f022 0201 	bic.w	r2, r2, #1
 805172e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8051730:	687b      	ldr	r3, [r7, #4]
 8051732:	681b      	ldr	r3, [r3, #0]
 8051734:	681a      	ldr	r2, [r3, #0]
 8051736:	687b      	ldr	r3, [r7, #4]
 8051738:	681b      	ldr	r3, [r3, #0]
 805173a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 805173e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8051740:	687b      	ldr	r3, [r7, #4]
 8051742:	681b      	ldr	r3, [r3, #0]
 8051744:	681a      	ldr	r2, [r3, #0]
 8051746:	687b      	ldr	r3, [r7, #4]
 8051748:	681b      	ldr	r3, [r3, #0]
 805174a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 805174e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8051750:	f002 f84a 	bl	80537e8 <HAL_RCC_GetPCLK1Freq>
 8051754:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8051756:	687b      	ldr	r3, [r7, #4]
 8051758:	685b      	ldr	r3, [r3, #4]
 805175a:	4a81      	ldr	r2, [pc, #516]	; (8051960 <HAL_I2C_Init+0x274>)
 805175c:	4293      	cmp	r3, r2
 805175e:	d807      	bhi.n	8051770 <HAL_I2C_Init+0x84>
 8051760:	68fb      	ldr	r3, [r7, #12]
 8051762:	4a80      	ldr	r2, [pc, #512]	; (8051964 <HAL_I2C_Init+0x278>)
 8051764:	4293      	cmp	r3, r2
 8051766:	bf94      	ite	ls
 8051768:	2301      	movls	r3, #1
 805176a:	2300      	movhi	r3, #0
 805176c:	b2db      	uxtb	r3, r3
 805176e:	e006      	b.n	805177e <HAL_I2C_Init+0x92>
 8051770:	68fb      	ldr	r3, [r7, #12]
 8051772:	4a7d      	ldr	r2, [pc, #500]	; (8051968 <HAL_I2C_Init+0x27c>)
 8051774:	4293      	cmp	r3, r2
 8051776:	bf94      	ite	ls
 8051778:	2301      	movls	r3, #1
 805177a:	2300      	movhi	r3, #0
 805177c:	b2db      	uxtb	r3, r3
 805177e:	2b00      	cmp	r3, #0
 8051780:	d001      	beq.n	8051786 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8051782:	2301      	movs	r3, #1
 8051784:	e0e7      	b.n	8051956 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8051786:	68fb      	ldr	r3, [r7, #12]
 8051788:	4a78      	ldr	r2, [pc, #480]	; (805196c <HAL_I2C_Init+0x280>)
 805178a:	fba2 2303 	umull	r2, r3, r2, r3
 805178e:	0c9b      	lsrs	r3, r3, #18
 8051790:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8051792:	687b      	ldr	r3, [r7, #4]
 8051794:	681b      	ldr	r3, [r3, #0]
 8051796:	685b      	ldr	r3, [r3, #4]
 8051798:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 805179c:	687b      	ldr	r3, [r7, #4]
 805179e:	681b      	ldr	r3, [r3, #0]
 80517a0:	68ba      	ldr	r2, [r7, #8]
 80517a2:	430a      	orrs	r2, r1
 80517a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80517a6:	687b      	ldr	r3, [r7, #4]
 80517a8:	681b      	ldr	r3, [r3, #0]
 80517aa:	6a1b      	ldr	r3, [r3, #32]
 80517ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80517b0:	687b      	ldr	r3, [r7, #4]
 80517b2:	685b      	ldr	r3, [r3, #4]
 80517b4:	4a6a      	ldr	r2, [pc, #424]	; (8051960 <HAL_I2C_Init+0x274>)
 80517b6:	4293      	cmp	r3, r2
 80517b8:	d802      	bhi.n	80517c0 <HAL_I2C_Init+0xd4>
 80517ba:	68bb      	ldr	r3, [r7, #8]
 80517bc:	3301      	adds	r3, #1
 80517be:	e009      	b.n	80517d4 <HAL_I2C_Init+0xe8>
 80517c0:	68bb      	ldr	r3, [r7, #8]
 80517c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80517c6:	fb02 f303 	mul.w	r3, r2, r3
 80517ca:	4a69      	ldr	r2, [pc, #420]	; (8051970 <HAL_I2C_Init+0x284>)
 80517cc:	fba2 2303 	umull	r2, r3, r2, r3
 80517d0:	099b      	lsrs	r3, r3, #6
 80517d2:	3301      	adds	r3, #1
 80517d4:	687a      	ldr	r2, [r7, #4]
 80517d6:	6812      	ldr	r2, [r2, #0]
 80517d8:	430b      	orrs	r3, r1
 80517da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80517dc:	687b      	ldr	r3, [r7, #4]
 80517de:	681b      	ldr	r3, [r3, #0]
 80517e0:	69db      	ldr	r3, [r3, #28]
 80517e2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80517e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80517ea:	687b      	ldr	r3, [r7, #4]
 80517ec:	685b      	ldr	r3, [r3, #4]
 80517ee:	495c      	ldr	r1, [pc, #368]	; (8051960 <HAL_I2C_Init+0x274>)
 80517f0:	428b      	cmp	r3, r1
 80517f2:	d819      	bhi.n	8051828 <HAL_I2C_Init+0x13c>
 80517f4:	68fb      	ldr	r3, [r7, #12]
 80517f6:	1e59      	subs	r1, r3, #1
 80517f8:	687b      	ldr	r3, [r7, #4]
 80517fa:	685b      	ldr	r3, [r3, #4]
 80517fc:	005b      	lsls	r3, r3, #1
 80517fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8051802:	1c59      	adds	r1, r3, #1
 8051804:	f640 73fc 	movw	r3, #4092	; 0xffc
 8051808:	400b      	ands	r3, r1
 805180a:	2b00      	cmp	r3, #0
 805180c:	d00a      	beq.n	8051824 <HAL_I2C_Init+0x138>
 805180e:	68fb      	ldr	r3, [r7, #12]
 8051810:	1e59      	subs	r1, r3, #1
 8051812:	687b      	ldr	r3, [r7, #4]
 8051814:	685b      	ldr	r3, [r3, #4]
 8051816:	005b      	lsls	r3, r3, #1
 8051818:	fbb1 f3f3 	udiv	r3, r1, r3
 805181c:	3301      	adds	r3, #1
 805181e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8051822:	e051      	b.n	80518c8 <HAL_I2C_Init+0x1dc>
 8051824:	2304      	movs	r3, #4
 8051826:	e04f      	b.n	80518c8 <HAL_I2C_Init+0x1dc>
 8051828:	687b      	ldr	r3, [r7, #4]
 805182a:	689b      	ldr	r3, [r3, #8]
 805182c:	2b00      	cmp	r3, #0
 805182e:	d111      	bne.n	8051854 <HAL_I2C_Init+0x168>
 8051830:	68fb      	ldr	r3, [r7, #12]
 8051832:	1e58      	subs	r0, r3, #1
 8051834:	687b      	ldr	r3, [r7, #4]
 8051836:	6859      	ldr	r1, [r3, #4]
 8051838:	460b      	mov	r3, r1
 805183a:	005b      	lsls	r3, r3, #1
 805183c:	440b      	add	r3, r1
 805183e:	fbb0 f3f3 	udiv	r3, r0, r3
 8051842:	3301      	adds	r3, #1
 8051844:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8051848:	2b00      	cmp	r3, #0
 805184a:	bf0c      	ite	eq
 805184c:	2301      	moveq	r3, #1
 805184e:	2300      	movne	r3, #0
 8051850:	b2db      	uxtb	r3, r3
 8051852:	e012      	b.n	805187a <HAL_I2C_Init+0x18e>
 8051854:	68fb      	ldr	r3, [r7, #12]
 8051856:	1e58      	subs	r0, r3, #1
 8051858:	687b      	ldr	r3, [r7, #4]
 805185a:	6859      	ldr	r1, [r3, #4]
 805185c:	460b      	mov	r3, r1
 805185e:	009b      	lsls	r3, r3, #2
 8051860:	440b      	add	r3, r1
 8051862:	0099      	lsls	r1, r3, #2
 8051864:	440b      	add	r3, r1
 8051866:	fbb0 f3f3 	udiv	r3, r0, r3
 805186a:	3301      	adds	r3, #1
 805186c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8051870:	2b00      	cmp	r3, #0
 8051872:	bf0c      	ite	eq
 8051874:	2301      	moveq	r3, #1
 8051876:	2300      	movne	r3, #0
 8051878:	b2db      	uxtb	r3, r3
 805187a:	2b00      	cmp	r3, #0
 805187c:	d001      	beq.n	8051882 <HAL_I2C_Init+0x196>
 805187e:	2301      	movs	r3, #1
 8051880:	e022      	b.n	80518c8 <HAL_I2C_Init+0x1dc>
 8051882:	687b      	ldr	r3, [r7, #4]
 8051884:	689b      	ldr	r3, [r3, #8]
 8051886:	2b00      	cmp	r3, #0
 8051888:	d10e      	bne.n	80518a8 <HAL_I2C_Init+0x1bc>
 805188a:	68fb      	ldr	r3, [r7, #12]
 805188c:	1e58      	subs	r0, r3, #1
 805188e:	687b      	ldr	r3, [r7, #4]
 8051890:	6859      	ldr	r1, [r3, #4]
 8051892:	460b      	mov	r3, r1
 8051894:	005b      	lsls	r3, r3, #1
 8051896:	440b      	add	r3, r1
 8051898:	fbb0 f3f3 	udiv	r3, r0, r3
 805189c:	3301      	adds	r3, #1
 805189e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80518a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80518a6:	e00f      	b.n	80518c8 <HAL_I2C_Init+0x1dc>
 80518a8:	68fb      	ldr	r3, [r7, #12]
 80518aa:	1e58      	subs	r0, r3, #1
 80518ac:	687b      	ldr	r3, [r7, #4]
 80518ae:	6859      	ldr	r1, [r3, #4]
 80518b0:	460b      	mov	r3, r1
 80518b2:	009b      	lsls	r3, r3, #2
 80518b4:	440b      	add	r3, r1
 80518b6:	0099      	lsls	r1, r3, #2
 80518b8:	440b      	add	r3, r1
 80518ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80518be:	3301      	adds	r3, #1
 80518c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80518c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80518c8:	6879      	ldr	r1, [r7, #4]
 80518ca:	6809      	ldr	r1, [r1, #0]
 80518cc:	4313      	orrs	r3, r2
 80518ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80518d0:	687b      	ldr	r3, [r7, #4]
 80518d2:	681b      	ldr	r3, [r3, #0]
 80518d4:	681b      	ldr	r3, [r3, #0]
 80518d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80518da:	687b      	ldr	r3, [r7, #4]
 80518dc:	69da      	ldr	r2, [r3, #28]
 80518de:	687b      	ldr	r3, [r7, #4]
 80518e0:	6a1b      	ldr	r3, [r3, #32]
 80518e2:	431a      	orrs	r2, r3
 80518e4:	687b      	ldr	r3, [r7, #4]
 80518e6:	681b      	ldr	r3, [r3, #0]
 80518e8:	430a      	orrs	r2, r1
 80518ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80518ec:	687b      	ldr	r3, [r7, #4]
 80518ee:	681b      	ldr	r3, [r3, #0]
 80518f0:	689b      	ldr	r3, [r3, #8]
 80518f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80518f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80518fa:	687a      	ldr	r2, [r7, #4]
 80518fc:	6911      	ldr	r1, [r2, #16]
 80518fe:	687a      	ldr	r2, [r7, #4]
 8051900:	68d2      	ldr	r2, [r2, #12]
 8051902:	4311      	orrs	r1, r2
 8051904:	687a      	ldr	r2, [r7, #4]
 8051906:	6812      	ldr	r2, [r2, #0]
 8051908:	430b      	orrs	r3, r1
 805190a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 805190c:	687b      	ldr	r3, [r7, #4]
 805190e:	681b      	ldr	r3, [r3, #0]
 8051910:	68db      	ldr	r3, [r3, #12]
 8051912:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8051916:	687b      	ldr	r3, [r7, #4]
 8051918:	695a      	ldr	r2, [r3, #20]
 805191a:	687b      	ldr	r3, [r7, #4]
 805191c:	699b      	ldr	r3, [r3, #24]
 805191e:	431a      	orrs	r2, r3
 8051920:	687b      	ldr	r3, [r7, #4]
 8051922:	681b      	ldr	r3, [r3, #0]
 8051924:	430a      	orrs	r2, r1
 8051926:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8051928:	687b      	ldr	r3, [r7, #4]
 805192a:	681b      	ldr	r3, [r3, #0]
 805192c:	681a      	ldr	r2, [r3, #0]
 805192e:	687b      	ldr	r3, [r7, #4]
 8051930:	681b      	ldr	r3, [r3, #0]
 8051932:	f042 0201 	orr.w	r2, r2, #1
 8051936:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8051938:	687b      	ldr	r3, [r7, #4]
 805193a:	2200      	movs	r2, #0
 805193c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 805193e:	687b      	ldr	r3, [r7, #4]
 8051940:	2220      	movs	r2, #32
 8051942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8051946:	687b      	ldr	r3, [r7, #4]
 8051948:	2200      	movs	r2, #0
 805194a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 805194c:	687b      	ldr	r3, [r7, #4]
 805194e:	2200      	movs	r2, #0
 8051950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8051954:	2300      	movs	r3, #0
}
 8051956:	4618      	mov	r0, r3
 8051958:	3710      	adds	r7, #16
 805195a:	46bd      	mov	sp, r7
 805195c:	bd80      	pop	{r7, pc}
 805195e:	bf00      	nop
 8051960:	000186a0 	.word	0x000186a0
 8051964:	001e847f 	.word	0x001e847f
 8051968:	003d08ff 	.word	0x003d08ff
 805196c:	431bde83 	.word	0x431bde83
 8051970:	10624dd3 	.word	0x10624dd3

08051974 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8051974:	b580      	push	{r7, lr}
 8051976:	b088      	sub	sp, #32
 8051978:	af02      	add	r7, sp, #8
 805197a:	60f8      	str	r0, [r7, #12]
 805197c:	607a      	str	r2, [r7, #4]
 805197e:	461a      	mov	r2, r3
 8051980:	460b      	mov	r3, r1
 8051982:	817b      	strh	r3, [r7, #10]
 8051984:	4613      	mov	r3, r2
 8051986:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8051988:	f7fd fe54 	bl	804f634 <HAL_GetTick>
 805198c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 805198e:	68fb      	ldr	r3, [r7, #12]
 8051990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8051994:	b2db      	uxtb	r3, r3
 8051996:	2b20      	cmp	r3, #32
 8051998:	f040 80e0 	bne.w	8051b5c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 805199c:	697b      	ldr	r3, [r7, #20]
 805199e:	9300      	str	r3, [sp, #0]
 80519a0:	2319      	movs	r3, #25
 80519a2:	2201      	movs	r2, #1
 80519a4:	4970      	ldr	r1, [pc, #448]	; (8051b68 <HAL_I2C_Master_Transmit+0x1f4>)
 80519a6:	68f8      	ldr	r0, [r7, #12]
 80519a8:	f001 f8f6 	bl	8052b98 <I2C_WaitOnFlagUntilTimeout>
 80519ac:	4603      	mov	r3, r0
 80519ae:	2b00      	cmp	r3, #0
 80519b0:	d001      	beq.n	80519b6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80519b2:	2302      	movs	r3, #2
 80519b4:	e0d3      	b.n	8051b5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80519b6:	68fb      	ldr	r3, [r7, #12]
 80519b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80519bc:	2b01      	cmp	r3, #1
 80519be:	d101      	bne.n	80519c4 <HAL_I2C_Master_Transmit+0x50>
 80519c0:	2302      	movs	r3, #2
 80519c2:	e0cc      	b.n	8051b5e <HAL_I2C_Master_Transmit+0x1ea>
 80519c4:	68fb      	ldr	r3, [r7, #12]
 80519c6:	2201      	movs	r2, #1
 80519c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80519cc:	68fb      	ldr	r3, [r7, #12]
 80519ce:	681b      	ldr	r3, [r3, #0]
 80519d0:	681b      	ldr	r3, [r3, #0]
 80519d2:	f003 0301 	and.w	r3, r3, #1
 80519d6:	2b01      	cmp	r3, #1
 80519d8:	d007      	beq.n	80519ea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80519da:	68fb      	ldr	r3, [r7, #12]
 80519dc:	681b      	ldr	r3, [r3, #0]
 80519de:	681a      	ldr	r2, [r3, #0]
 80519e0:	68fb      	ldr	r3, [r7, #12]
 80519e2:	681b      	ldr	r3, [r3, #0]
 80519e4:	f042 0201 	orr.w	r2, r2, #1
 80519e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80519ea:	68fb      	ldr	r3, [r7, #12]
 80519ec:	681b      	ldr	r3, [r3, #0]
 80519ee:	681a      	ldr	r2, [r3, #0]
 80519f0:	68fb      	ldr	r3, [r7, #12]
 80519f2:	681b      	ldr	r3, [r3, #0]
 80519f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80519f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80519fa:	68fb      	ldr	r3, [r7, #12]
 80519fc:	2221      	movs	r2, #33	; 0x21
 80519fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8051a02:	68fb      	ldr	r3, [r7, #12]
 8051a04:	2210      	movs	r2, #16
 8051a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8051a0a:	68fb      	ldr	r3, [r7, #12]
 8051a0c:	2200      	movs	r2, #0
 8051a0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8051a10:	68fb      	ldr	r3, [r7, #12]
 8051a12:	687a      	ldr	r2, [r7, #4]
 8051a14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8051a16:	68fb      	ldr	r3, [r7, #12]
 8051a18:	893a      	ldrh	r2, [r7, #8]
 8051a1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8051a1c:	68fb      	ldr	r3, [r7, #12]
 8051a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8051a20:	b29a      	uxth	r2, r3
 8051a22:	68fb      	ldr	r3, [r7, #12]
 8051a24:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8051a26:	68fb      	ldr	r3, [r7, #12]
 8051a28:	4a50      	ldr	r2, [pc, #320]	; (8051b6c <HAL_I2C_Master_Transmit+0x1f8>)
 8051a2a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8051a2c:	8979      	ldrh	r1, [r7, #10]
 8051a2e:	697b      	ldr	r3, [r7, #20]
 8051a30:	6a3a      	ldr	r2, [r7, #32]
 8051a32:	68f8      	ldr	r0, [r7, #12]
 8051a34:	f000 fde2 	bl	80525fc <I2C_MasterRequestWrite>
 8051a38:	4603      	mov	r3, r0
 8051a3a:	2b00      	cmp	r3, #0
 8051a3c:	d001      	beq.n	8051a42 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8051a3e:	2301      	movs	r3, #1
 8051a40:	e08d      	b.n	8051b5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8051a42:	2300      	movs	r3, #0
 8051a44:	613b      	str	r3, [r7, #16]
 8051a46:	68fb      	ldr	r3, [r7, #12]
 8051a48:	681b      	ldr	r3, [r3, #0]
 8051a4a:	695b      	ldr	r3, [r3, #20]
 8051a4c:	613b      	str	r3, [r7, #16]
 8051a4e:	68fb      	ldr	r3, [r7, #12]
 8051a50:	681b      	ldr	r3, [r3, #0]
 8051a52:	699b      	ldr	r3, [r3, #24]
 8051a54:	613b      	str	r3, [r7, #16]
 8051a56:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8051a58:	e066      	b.n	8051b28 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8051a5a:	697a      	ldr	r2, [r7, #20]
 8051a5c:	6a39      	ldr	r1, [r7, #32]
 8051a5e:	68f8      	ldr	r0, [r7, #12]
 8051a60:	f001 f970 	bl	8052d44 <I2C_WaitOnTXEFlagUntilTimeout>
 8051a64:	4603      	mov	r3, r0
 8051a66:	2b00      	cmp	r3, #0
 8051a68:	d00d      	beq.n	8051a86 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8051a6a:	68fb      	ldr	r3, [r7, #12]
 8051a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8051a6e:	2b04      	cmp	r3, #4
 8051a70:	d107      	bne.n	8051a82 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8051a72:	68fb      	ldr	r3, [r7, #12]
 8051a74:	681b      	ldr	r3, [r3, #0]
 8051a76:	681a      	ldr	r2, [r3, #0]
 8051a78:	68fb      	ldr	r3, [r7, #12]
 8051a7a:	681b      	ldr	r3, [r3, #0]
 8051a7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8051a80:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8051a82:	2301      	movs	r3, #1
 8051a84:	e06b      	b.n	8051b5e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8051a86:	68fb      	ldr	r3, [r7, #12]
 8051a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8051a8a:	781a      	ldrb	r2, [r3, #0]
 8051a8c:	68fb      	ldr	r3, [r7, #12]
 8051a8e:	681b      	ldr	r3, [r3, #0]
 8051a90:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8051a92:	68fb      	ldr	r3, [r7, #12]
 8051a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8051a96:	1c5a      	adds	r2, r3, #1
 8051a98:	68fb      	ldr	r3, [r7, #12]
 8051a9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8051a9c:	68fb      	ldr	r3, [r7, #12]
 8051a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8051aa0:	b29b      	uxth	r3, r3
 8051aa2:	3b01      	subs	r3, #1
 8051aa4:	b29a      	uxth	r2, r3
 8051aa6:	68fb      	ldr	r3, [r7, #12]
 8051aa8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8051aaa:	68fb      	ldr	r3, [r7, #12]
 8051aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8051aae:	3b01      	subs	r3, #1
 8051ab0:	b29a      	uxth	r2, r3
 8051ab2:	68fb      	ldr	r3, [r7, #12]
 8051ab4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8051ab6:	68fb      	ldr	r3, [r7, #12]
 8051ab8:	681b      	ldr	r3, [r3, #0]
 8051aba:	695b      	ldr	r3, [r3, #20]
 8051abc:	f003 0304 	and.w	r3, r3, #4
 8051ac0:	2b04      	cmp	r3, #4
 8051ac2:	d11b      	bne.n	8051afc <HAL_I2C_Master_Transmit+0x188>
 8051ac4:	68fb      	ldr	r3, [r7, #12]
 8051ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8051ac8:	2b00      	cmp	r3, #0
 8051aca:	d017      	beq.n	8051afc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8051acc:	68fb      	ldr	r3, [r7, #12]
 8051ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8051ad0:	781a      	ldrb	r2, [r3, #0]
 8051ad2:	68fb      	ldr	r3, [r7, #12]
 8051ad4:	681b      	ldr	r3, [r3, #0]
 8051ad6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8051ad8:	68fb      	ldr	r3, [r7, #12]
 8051ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8051adc:	1c5a      	adds	r2, r3, #1
 8051ade:	68fb      	ldr	r3, [r7, #12]
 8051ae0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8051ae2:	68fb      	ldr	r3, [r7, #12]
 8051ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8051ae6:	b29b      	uxth	r3, r3
 8051ae8:	3b01      	subs	r3, #1
 8051aea:	b29a      	uxth	r2, r3
 8051aec:	68fb      	ldr	r3, [r7, #12]
 8051aee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8051af0:	68fb      	ldr	r3, [r7, #12]
 8051af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8051af4:	3b01      	subs	r3, #1
 8051af6:	b29a      	uxth	r2, r3
 8051af8:	68fb      	ldr	r3, [r7, #12]
 8051afa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8051afc:	697a      	ldr	r2, [r7, #20]
 8051afe:	6a39      	ldr	r1, [r7, #32]
 8051b00:	68f8      	ldr	r0, [r7, #12]
 8051b02:	f001 f960 	bl	8052dc6 <I2C_WaitOnBTFFlagUntilTimeout>
 8051b06:	4603      	mov	r3, r0
 8051b08:	2b00      	cmp	r3, #0
 8051b0a:	d00d      	beq.n	8051b28 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8051b0c:	68fb      	ldr	r3, [r7, #12]
 8051b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8051b10:	2b04      	cmp	r3, #4
 8051b12:	d107      	bne.n	8051b24 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8051b14:	68fb      	ldr	r3, [r7, #12]
 8051b16:	681b      	ldr	r3, [r3, #0]
 8051b18:	681a      	ldr	r2, [r3, #0]
 8051b1a:	68fb      	ldr	r3, [r7, #12]
 8051b1c:	681b      	ldr	r3, [r3, #0]
 8051b1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8051b22:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8051b24:	2301      	movs	r3, #1
 8051b26:	e01a      	b.n	8051b5e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8051b28:	68fb      	ldr	r3, [r7, #12]
 8051b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8051b2c:	2b00      	cmp	r3, #0
 8051b2e:	d194      	bne.n	8051a5a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8051b30:	68fb      	ldr	r3, [r7, #12]
 8051b32:	681b      	ldr	r3, [r3, #0]
 8051b34:	681a      	ldr	r2, [r3, #0]
 8051b36:	68fb      	ldr	r3, [r7, #12]
 8051b38:	681b      	ldr	r3, [r3, #0]
 8051b3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8051b3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8051b40:	68fb      	ldr	r3, [r7, #12]
 8051b42:	2220      	movs	r2, #32
 8051b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8051b48:	68fb      	ldr	r3, [r7, #12]
 8051b4a:	2200      	movs	r2, #0
 8051b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8051b50:	68fb      	ldr	r3, [r7, #12]
 8051b52:	2200      	movs	r2, #0
 8051b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8051b58:	2300      	movs	r3, #0
 8051b5a:	e000      	b.n	8051b5e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8051b5c:	2302      	movs	r3, #2
  }
}
 8051b5e:	4618      	mov	r0, r3
 8051b60:	3718      	adds	r7, #24
 8051b62:	46bd      	mov	sp, r7
 8051b64:	bd80      	pop	{r7, pc}
 8051b66:	bf00      	nop
 8051b68:	00100002 	.word	0x00100002
 8051b6c:	ffff0000 	.word	0xffff0000

08051b70 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8051b70:	b580      	push	{r7, lr}
 8051b72:	b08c      	sub	sp, #48	; 0x30
 8051b74:	af02      	add	r7, sp, #8
 8051b76:	60f8      	str	r0, [r7, #12]
 8051b78:	607a      	str	r2, [r7, #4]
 8051b7a:	461a      	mov	r2, r3
 8051b7c:	460b      	mov	r3, r1
 8051b7e:	817b      	strh	r3, [r7, #10]
 8051b80:	4613      	mov	r3, r2
 8051b82:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8051b84:	f7fd fd56 	bl	804f634 <HAL_GetTick>
 8051b88:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8051b8a:	68fb      	ldr	r3, [r7, #12]
 8051b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8051b90:	b2db      	uxtb	r3, r3
 8051b92:	2b20      	cmp	r3, #32
 8051b94:	f040 820b 	bne.w	8051fae <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8051b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8051b9a:	9300      	str	r3, [sp, #0]
 8051b9c:	2319      	movs	r3, #25
 8051b9e:	2201      	movs	r2, #1
 8051ba0:	497c      	ldr	r1, [pc, #496]	; (8051d94 <HAL_I2C_Master_Receive+0x224>)
 8051ba2:	68f8      	ldr	r0, [r7, #12]
 8051ba4:	f000 fff8 	bl	8052b98 <I2C_WaitOnFlagUntilTimeout>
 8051ba8:	4603      	mov	r3, r0
 8051baa:	2b00      	cmp	r3, #0
 8051bac:	d001      	beq.n	8051bb2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8051bae:	2302      	movs	r3, #2
 8051bb0:	e1fe      	b.n	8051fb0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8051bb2:	68fb      	ldr	r3, [r7, #12]
 8051bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8051bb8:	2b01      	cmp	r3, #1
 8051bba:	d101      	bne.n	8051bc0 <HAL_I2C_Master_Receive+0x50>
 8051bbc:	2302      	movs	r3, #2
 8051bbe:	e1f7      	b.n	8051fb0 <HAL_I2C_Master_Receive+0x440>
 8051bc0:	68fb      	ldr	r3, [r7, #12]
 8051bc2:	2201      	movs	r2, #1
 8051bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8051bc8:	68fb      	ldr	r3, [r7, #12]
 8051bca:	681b      	ldr	r3, [r3, #0]
 8051bcc:	681b      	ldr	r3, [r3, #0]
 8051bce:	f003 0301 	and.w	r3, r3, #1
 8051bd2:	2b01      	cmp	r3, #1
 8051bd4:	d007      	beq.n	8051be6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8051bd6:	68fb      	ldr	r3, [r7, #12]
 8051bd8:	681b      	ldr	r3, [r3, #0]
 8051bda:	681a      	ldr	r2, [r3, #0]
 8051bdc:	68fb      	ldr	r3, [r7, #12]
 8051bde:	681b      	ldr	r3, [r3, #0]
 8051be0:	f042 0201 	orr.w	r2, r2, #1
 8051be4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8051be6:	68fb      	ldr	r3, [r7, #12]
 8051be8:	681b      	ldr	r3, [r3, #0]
 8051bea:	681a      	ldr	r2, [r3, #0]
 8051bec:	68fb      	ldr	r3, [r7, #12]
 8051bee:	681b      	ldr	r3, [r3, #0]
 8051bf0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8051bf4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8051bf6:	68fb      	ldr	r3, [r7, #12]
 8051bf8:	2222      	movs	r2, #34	; 0x22
 8051bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8051bfe:	68fb      	ldr	r3, [r7, #12]
 8051c00:	2210      	movs	r2, #16
 8051c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8051c06:	68fb      	ldr	r3, [r7, #12]
 8051c08:	2200      	movs	r2, #0
 8051c0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8051c0c:	68fb      	ldr	r3, [r7, #12]
 8051c0e:	687a      	ldr	r2, [r7, #4]
 8051c10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8051c12:	68fb      	ldr	r3, [r7, #12]
 8051c14:	893a      	ldrh	r2, [r7, #8]
 8051c16:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8051c18:	68fb      	ldr	r3, [r7, #12]
 8051c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8051c1c:	b29a      	uxth	r2, r3
 8051c1e:	68fb      	ldr	r3, [r7, #12]
 8051c20:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8051c22:	68fb      	ldr	r3, [r7, #12]
 8051c24:	4a5c      	ldr	r2, [pc, #368]	; (8051d98 <HAL_I2C_Master_Receive+0x228>)
 8051c26:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8051c28:	8979      	ldrh	r1, [r7, #10]
 8051c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8051c2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8051c2e:	68f8      	ldr	r0, [r7, #12]
 8051c30:	f000 fd66 	bl	8052700 <I2C_MasterRequestRead>
 8051c34:	4603      	mov	r3, r0
 8051c36:	2b00      	cmp	r3, #0
 8051c38:	d001      	beq.n	8051c3e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8051c3a:	2301      	movs	r3, #1
 8051c3c:	e1b8      	b.n	8051fb0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8051c3e:	68fb      	ldr	r3, [r7, #12]
 8051c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8051c42:	2b00      	cmp	r3, #0
 8051c44:	d113      	bne.n	8051c6e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8051c46:	2300      	movs	r3, #0
 8051c48:	623b      	str	r3, [r7, #32]
 8051c4a:	68fb      	ldr	r3, [r7, #12]
 8051c4c:	681b      	ldr	r3, [r3, #0]
 8051c4e:	695b      	ldr	r3, [r3, #20]
 8051c50:	623b      	str	r3, [r7, #32]
 8051c52:	68fb      	ldr	r3, [r7, #12]
 8051c54:	681b      	ldr	r3, [r3, #0]
 8051c56:	699b      	ldr	r3, [r3, #24]
 8051c58:	623b      	str	r3, [r7, #32]
 8051c5a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8051c5c:	68fb      	ldr	r3, [r7, #12]
 8051c5e:	681b      	ldr	r3, [r3, #0]
 8051c60:	681a      	ldr	r2, [r3, #0]
 8051c62:	68fb      	ldr	r3, [r7, #12]
 8051c64:	681b      	ldr	r3, [r3, #0]
 8051c66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8051c6a:	601a      	str	r2, [r3, #0]
 8051c6c:	e18c      	b.n	8051f88 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8051c6e:	68fb      	ldr	r3, [r7, #12]
 8051c70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8051c72:	2b01      	cmp	r3, #1
 8051c74:	d11b      	bne.n	8051cae <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8051c76:	68fb      	ldr	r3, [r7, #12]
 8051c78:	681b      	ldr	r3, [r3, #0]
 8051c7a:	681a      	ldr	r2, [r3, #0]
 8051c7c:	68fb      	ldr	r3, [r7, #12]
 8051c7e:	681b      	ldr	r3, [r3, #0]
 8051c80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8051c84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8051c86:	2300      	movs	r3, #0
 8051c88:	61fb      	str	r3, [r7, #28]
 8051c8a:	68fb      	ldr	r3, [r7, #12]
 8051c8c:	681b      	ldr	r3, [r3, #0]
 8051c8e:	695b      	ldr	r3, [r3, #20]
 8051c90:	61fb      	str	r3, [r7, #28]
 8051c92:	68fb      	ldr	r3, [r7, #12]
 8051c94:	681b      	ldr	r3, [r3, #0]
 8051c96:	699b      	ldr	r3, [r3, #24]
 8051c98:	61fb      	str	r3, [r7, #28]
 8051c9a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8051c9c:	68fb      	ldr	r3, [r7, #12]
 8051c9e:	681b      	ldr	r3, [r3, #0]
 8051ca0:	681a      	ldr	r2, [r3, #0]
 8051ca2:	68fb      	ldr	r3, [r7, #12]
 8051ca4:	681b      	ldr	r3, [r3, #0]
 8051ca6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8051caa:	601a      	str	r2, [r3, #0]
 8051cac:	e16c      	b.n	8051f88 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8051cae:	68fb      	ldr	r3, [r7, #12]
 8051cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8051cb2:	2b02      	cmp	r3, #2
 8051cb4:	d11b      	bne.n	8051cee <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8051cb6:	68fb      	ldr	r3, [r7, #12]
 8051cb8:	681b      	ldr	r3, [r3, #0]
 8051cba:	681a      	ldr	r2, [r3, #0]
 8051cbc:	68fb      	ldr	r3, [r7, #12]
 8051cbe:	681b      	ldr	r3, [r3, #0]
 8051cc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8051cc4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8051cc6:	68fb      	ldr	r3, [r7, #12]
 8051cc8:	681b      	ldr	r3, [r3, #0]
 8051cca:	681a      	ldr	r2, [r3, #0]
 8051ccc:	68fb      	ldr	r3, [r7, #12]
 8051cce:	681b      	ldr	r3, [r3, #0]
 8051cd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8051cd4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8051cd6:	2300      	movs	r3, #0
 8051cd8:	61bb      	str	r3, [r7, #24]
 8051cda:	68fb      	ldr	r3, [r7, #12]
 8051cdc:	681b      	ldr	r3, [r3, #0]
 8051cde:	695b      	ldr	r3, [r3, #20]
 8051ce0:	61bb      	str	r3, [r7, #24]
 8051ce2:	68fb      	ldr	r3, [r7, #12]
 8051ce4:	681b      	ldr	r3, [r3, #0]
 8051ce6:	699b      	ldr	r3, [r3, #24]
 8051ce8:	61bb      	str	r3, [r7, #24]
 8051cea:	69bb      	ldr	r3, [r7, #24]
 8051cec:	e14c      	b.n	8051f88 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8051cee:	68fb      	ldr	r3, [r7, #12]
 8051cf0:	681b      	ldr	r3, [r3, #0]
 8051cf2:	681a      	ldr	r2, [r3, #0]
 8051cf4:	68fb      	ldr	r3, [r7, #12]
 8051cf6:	681b      	ldr	r3, [r3, #0]
 8051cf8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8051cfc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8051cfe:	2300      	movs	r3, #0
 8051d00:	617b      	str	r3, [r7, #20]
 8051d02:	68fb      	ldr	r3, [r7, #12]
 8051d04:	681b      	ldr	r3, [r3, #0]
 8051d06:	695b      	ldr	r3, [r3, #20]
 8051d08:	617b      	str	r3, [r7, #20]
 8051d0a:	68fb      	ldr	r3, [r7, #12]
 8051d0c:	681b      	ldr	r3, [r3, #0]
 8051d0e:	699b      	ldr	r3, [r3, #24]
 8051d10:	617b      	str	r3, [r7, #20]
 8051d12:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8051d14:	e138      	b.n	8051f88 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8051d16:	68fb      	ldr	r3, [r7, #12]
 8051d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8051d1a:	2b03      	cmp	r3, #3
 8051d1c:	f200 80f1 	bhi.w	8051f02 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8051d20:	68fb      	ldr	r3, [r7, #12]
 8051d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8051d24:	2b01      	cmp	r3, #1
 8051d26:	d123      	bne.n	8051d70 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8051d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8051d2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8051d2c:	68f8      	ldr	r0, [r7, #12]
 8051d2e:	f001 f88b 	bl	8052e48 <I2C_WaitOnRXNEFlagUntilTimeout>
 8051d32:	4603      	mov	r3, r0
 8051d34:	2b00      	cmp	r3, #0
 8051d36:	d001      	beq.n	8051d3c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8051d38:	2301      	movs	r3, #1
 8051d3a:	e139      	b.n	8051fb0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8051d3c:	68fb      	ldr	r3, [r7, #12]
 8051d3e:	681b      	ldr	r3, [r3, #0]
 8051d40:	691a      	ldr	r2, [r3, #16]
 8051d42:	68fb      	ldr	r3, [r7, #12]
 8051d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8051d46:	b2d2      	uxtb	r2, r2
 8051d48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8051d4a:	68fb      	ldr	r3, [r7, #12]
 8051d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8051d4e:	1c5a      	adds	r2, r3, #1
 8051d50:	68fb      	ldr	r3, [r7, #12]
 8051d52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8051d54:	68fb      	ldr	r3, [r7, #12]
 8051d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8051d58:	3b01      	subs	r3, #1
 8051d5a:	b29a      	uxth	r2, r3
 8051d5c:	68fb      	ldr	r3, [r7, #12]
 8051d5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8051d60:	68fb      	ldr	r3, [r7, #12]
 8051d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8051d64:	b29b      	uxth	r3, r3
 8051d66:	3b01      	subs	r3, #1
 8051d68:	b29a      	uxth	r2, r3
 8051d6a:	68fb      	ldr	r3, [r7, #12]
 8051d6c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8051d6e:	e10b      	b.n	8051f88 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8051d70:	68fb      	ldr	r3, [r7, #12]
 8051d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8051d74:	2b02      	cmp	r3, #2
 8051d76:	d14e      	bne.n	8051e16 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8051d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8051d7a:	9300      	str	r3, [sp, #0]
 8051d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8051d7e:	2200      	movs	r2, #0
 8051d80:	4906      	ldr	r1, [pc, #24]	; (8051d9c <HAL_I2C_Master_Receive+0x22c>)
 8051d82:	68f8      	ldr	r0, [r7, #12]
 8051d84:	f000 ff08 	bl	8052b98 <I2C_WaitOnFlagUntilTimeout>
 8051d88:	4603      	mov	r3, r0
 8051d8a:	2b00      	cmp	r3, #0
 8051d8c:	d008      	beq.n	8051da0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8051d8e:	2301      	movs	r3, #1
 8051d90:	e10e      	b.n	8051fb0 <HAL_I2C_Master_Receive+0x440>
 8051d92:	bf00      	nop
 8051d94:	00100002 	.word	0x00100002
 8051d98:	ffff0000 	.word	0xffff0000
 8051d9c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8051da0:	68fb      	ldr	r3, [r7, #12]
 8051da2:	681b      	ldr	r3, [r3, #0]
 8051da4:	681a      	ldr	r2, [r3, #0]
 8051da6:	68fb      	ldr	r3, [r7, #12]
 8051da8:	681b      	ldr	r3, [r3, #0]
 8051daa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8051dae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8051db0:	68fb      	ldr	r3, [r7, #12]
 8051db2:	681b      	ldr	r3, [r3, #0]
 8051db4:	691a      	ldr	r2, [r3, #16]
 8051db6:	68fb      	ldr	r3, [r7, #12]
 8051db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8051dba:	b2d2      	uxtb	r2, r2
 8051dbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8051dbe:	68fb      	ldr	r3, [r7, #12]
 8051dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8051dc2:	1c5a      	adds	r2, r3, #1
 8051dc4:	68fb      	ldr	r3, [r7, #12]
 8051dc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8051dc8:	68fb      	ldr	r3, [r7, #12]
 8051dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8051dcc:	3b01      	subs	r3, #1
 8051dce:	b29a      	uxth	r2, r3
 8051dd0:	68fb      	ldr	r3, [r7, #12]
 8051dd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8051dd4:	68fb      	ldr	r3, [r7, #12]
 8051dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8051dd8:	b29b      	uxth	r3, r3
 8051dda:	3b01      	subs	r3, #1
 8051ddc:	b29a      	uxth	r2, r3
 8051dde:	68fb      	ldr	r3, [r7, #12]
 8051de0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8051de2:	68fb      	ldr	r3, [r7, #12]
 8051de4:	681b      	ldr	r3, [r3, #0]
 8051de6:	691a      	ldr	r2, [r3, #16]
 8051de8:	68fb      	ldr	r3, [r7, #12]
 8051dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8051dec:	b2d2      	uxtb	r2, r2
 8051dee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8051df0:	68fb      	ldr	r3, [r7, #12]
 8051df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8051df4:	1c5a      	adds	r2, r3, #1
 8051df6:	68fb      	ldr	r3, [r7, #12]
 8051df8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8051dfa:	68fb      	ldr	r3, [r7, #12]
 8051dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8051dfe:	3b01      	subs	r3, #1
 8051e00:	b29a      	uxth	r2, r3
 8051e02:	68fb      	ldr	r3, [r7, #12]
 8051e04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8051e06:	68fb      	ldr	r3, [r7, #12]
 8051e08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8051e0a:	b29b      	uxth	r3, r3
 8051e0c:	3b01      	subs	r3, #1
 8051e0e:	b29a      	uxth	r2, r3
 8051e10:	68fb      	ldr	r3, [r7, #12]
 8051e12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8051e14:	e0b8      	b.n	8051f88 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8051e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8051e18:	9300      	str	r3, [sp, #0]
 8051e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8051e1c:	2200      	movs	r2, #0
 8051e1e:	4966      	ldr	r1, [pc, #408]	; (8051fb8 <HAL_I2C_Master_Receive+0x448>)
 8051e20:	68f8      	ldr	r0, [r7, #12]
 8051e22:	f000 feb9 	bl	8052b98 <I2C_WaitOnFlagUntilTimeout>
 8051e26:	4603      	mov	r3, r0
 8051e28:	2b00      	cmp	r3, #0
 8051e2a:	d001      	beq.n	8051e30 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8051e2c:	2301      	movs	r3, #1
 8051e2e:	e0bf      	b.n	8051fb0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8051e30:	68fb      	ldr	r3, [r7, #12]
 8051e32:	681b      	ldr	r3, [r3, #0]
 8051e34:	681a      	ldr	r2, [r3, #0]
 8051e36:	68fb      	ldr	r3, [r7, #12]
 8051e38:	681b      	ldr	r3, [r3, #0]
 8051e3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8051e3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8051e40:	68fb      	ldr	r3, [r7, #12]
 8051e42:	681b      	ldr	r3, [r3, #0]
 8051e44:	691a      	ldr	r2, [r3, #16]
 8051e46:	68fb      	ldr	r3, [r7, #12]
 8051e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8051e4a:	b2d2      	uxtb	r2, r2
 8051e4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8051e4e:	68fb      	ldr	r3, [r7, #12]
 8051e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8051e52:	1c5a      	adds	r2, r3, #1
 8051e54:	68fb      	ldr	r3, [r7, #12]
 8051e56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8051e58:	68fb      	ldr	r3, [r7, #12]
 8051e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8051e5c:	3b01      	subs	r3, #1
 8051e5e:	b29a      	uxth	r2, r3
 8051e60:	68fb      	ldr	r3, [r7, #12]
 8051e62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8051e64:	68fb      	ldr	r3, [r7, #12]
 8051e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8051e68:	b29b      	uxth	r3, r3
 8051e6a:	3b01      	subs	r3, #1
 8051e6c:	b29a      	uxth	r2, r3
 8051e6e:	68fb      	ldr	r3, [r7, #12]
 8051e70:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8051e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8051e74:	9300      	str	r3, [sp, #0]
 8051e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8051e78:	2200      	movs	r2, #0
 8051e7a:	494f      	ldr	r1, [pc, #316]	; (8051fb8 <HAL_I2C_Master_Receive+0x448>)
 8051e7c:	68f8      	ldr	r0, [r7, #12]
 8051e7e:	f000 fe8b 	bl	8052b98 <I2C_WaitOnFlagUntilTimeout>
 8051e82:	4603      	mov	r3, r0
 8051e84:	2b00      	cmp	r3, #0
 8051e86:	d001      	beq.n	8051e8c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8051e88:	2301      	movs	r3, #1
 8051e8a:	e091      	b.n	8051fb0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8051e8c:	68fb      	ldr	r3, [r7, #12]
 8051e8e:	681b      	ldr	r3, [r3, #0]
 8051e90:	681a      	ldr	r2, [r3, #0]
 8051e92:	68fb      	ldr	r3, [r7, #12]
 8051e94:	681b      	ldr	r3, [r3, #0]
 8051e96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8051e9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8051e9c:	68fb      	ldr	r3, [r7, #12]
 8051e9e:	681b      	ldr	r3, [r3, #0]
 8051ea0:	691a      	ldr	r2, [r3, #16]
 8051ea2:	68fb      	ldr	r3, [r7, #12]
 8051ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8051ea6:	b2d2      	uxtb	r2, r2
 8051ea8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8051eaa:	68fb      	ldr	r3, [r7, #12]
 8051eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8051eae:	1c5a      	adds	r2, r3, #1
 8051eb0:	68fb      	ldr	r3, [r7, #12]
 8051eb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8051eb4:	68fb      	ldr	r3, [r7, #12]
 8051eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8051eb8:	3b01      	subs	r3, #1
 8051eba:	b29a      	uxth	r2, r3
 8051ebc:	68fb      	ldr	r3, [r7, #12]
 8051ebe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8051ec0:	68fb      	ldr	r3, [r7, #12]
 8051ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8051ec4:	b29b      	uxth	r3, r3
 8051ec6:	3b01      	subs	r3, #1
 8051ec8:	b29a      	uxth	r2, r3
 8051eca:	68fb      	ldr	r3, [r7, #12]
 8051ecc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8051ece:	68fb      	ldr	r3, [r7, #12]
 8051ed0:	681b      	ldr	r3, [r3, #0]
 8051ed2:	691a      	ldr	r2, [r3, #16]
 8051ed4:	68fb      	ldr	r3, [r7, #12]
 8051ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8051ed8:	b2d2      	uxtb	r2, r2
 8051eda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8051edc:	68fb      	ldr	r3, [r7, #12]
 8051ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8051ee0:	1c5a      	adds	r2, r3, #1
 8051ee2:	68fb      	ldr	r3, [r7, #12]
 8051ee4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8051ee6:	68fb      	ldr	r3, [r7, #12]
 8051ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8051eea:	3b01      	subs	r3, #1
 8051eec:	b29a      	uxth	r2, r3
 8051eee:	68fb      	ldr	r3, [r7, #12]
 8051ef0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8051ef2:	68fb      	ldr	r3, [r7, #12]
 8051ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8051ef6:	b29b      	uxth	r3, r3
 8051ef8:	3b01      	subs	r3, #1
 8051efa:	b29a      	uxth	r2, r3
 8051efc:	68fb      	ldr	r3, [r7, #12]
 8051efe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8051f00:	e042      	b.n	8051f88 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8051f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8051f04:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8051f06:	68f8      	ldr	r0, [r7, #12]
 8051f08:	f000 ff9e 	bl	8052e48 <I2C_WaitOnRXNEFlagUntilTimeout>
 8051f0c:	4603      	mov	r3, r0
 8051f0e:	2b00      	cmp	r3, #0
 8051f10:	d001      	beq.n	8051f16 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8051f12:	2301      	movs	r3, #1
 8051f14:	e04c      	b.n	8051fb0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8051f16:	68fb      	ldr	r3, [r7, #12]
 8051f18:	681b      	ldr	r3, [r3, #0]
 8051f1a:	691a      	ldr	r2, [r3, #16]
 8051f1c:	68fb      	ldr	r3, [r7, #12]
 8051f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8051f20:	b2d2      	uxtb	r2, r2
 8051f22:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8051f24:	68fb      	ldr	r3, [r7, #12]
 8051f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8051f28:	1c5a      	adds	r2, r3, #1
 8051f2a:	68fb      	ldr	r3, [r7, #12]
 8051f2c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8051f2e:	68fb      	ldr	r3, [r7, #12]
 8051f30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8051f32:	3b01      	subs	r3, #1
 8051f34:	b29a      	uxth	r2, r3
 8051f36:	68fb      	ldr	r3, [r7, #12]
 8051f38:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8051f3a:	68fb      	ldr	r3, [r7, #12]
 8051f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8051f3e:	b29b      	uxth	r3, r3
 8051f40:	3b01      	subs	r3, #1
 8051f42:	b29a      	uxth	r2, r3
 8051f44:	68fb      	ldr	r3, [r7, #12]
 8051f46:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8051f48:	68fb      	ldr	r3, [r7, #12]
 8051f4a:	681b      	ldr	r3, [r3, #0]
 8051f4c:	695b      	ldr	r3, [r3, #20]
 8051f4e:	f003 0304 	and.w	r3, r3, #4
 8051f52:	2b04      	cmp	r3, #4
 8051f54:	d118      	bne.n	8051f88 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8051f56:	68fb      	ldr	r3, [r7, #12]
 8051f58:	681b      	ldr	r3, [r3, #0]
 8051f5a:	691a      	ldr	r2, [r3, #16]
 8051f5c:	68fb      	ldr	r3, [r7, #12]
 8051f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8051f60:	b2d2      	uxtb	r2, r2
 8051f62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8051f64:	68fb      	ldr	r3, [r7, #12]
 8051f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8051f68:	1c5a      	adds	r2, r3, #1
 8051f6a:	68fb      	ldr	r3, [r7, #12]
 8051f6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8051f6e:	68fb      	ldr	r3, [r7, #12]
 8051f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8051f72:	3b01      	subs	r3, #1
 8051f74:	b29a      	uxth	r2, r3
 8051f76:	68fb      	ldr	r3, [r7, #12]
 8051f78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8051f7a:	68fb      	ldr	r3, [r7, #12]
 8051f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8051f7e:	b29b      	uxth	r3, r3
 8051f80:	3b01      	subs	r3, #1
 8051f82:	b29a      	uxth	r2, r3
 8051f84:	68fb      	ldr	r3, [r7, #12]
 8051f86:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8051f88:	68fb      	ldr	r3, [r7, #12]
 8051f8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8051f8c:	2b00      	cmp	r3, #0
 8051f8e:	f47f aec2 	bne.w	8051d16 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8051f92:	68fb      	ldr	r3, [r7, #12]
 8051f94:	2220      	movs	r2, #32
 8051f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8051f9a:	68fb      	ldr	r3, [r7, #12]
 8051f9c:	2200      	movs	r2, #0
 8051f9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8051fa2:	68fb      	ldr	r3, [r7, #12]
 8051fa4:	2200      	movs	r2, #0
 8051fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8051faa:	2300      	movs	r3, #0
 8051fac:	e000      	b.n	8051fb0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8051fae:	2302      	movs	r3, #2
  }
}
 8051fb0:	4618      	mov	r0, r3
 8051fb2:	3728      	adds	r7, #40	; 0x28
 8051fb4:	46bd      	mov	sp, r7
 8051fb6:	bd80      	pop	{r7, pc}
 8051fb8:	00010004 	.word	0x00010004

08051fbc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8051fbc:	b580      	push	{r7, lr}
 8051fbe:	b088      	sub	sp, #32
 8051fc0:	af02      	add	r7, sp, #8
 8051fc2:	60f8      	str	r0, [r7, #12]
 8051fc4:	4608      	mov	r0, r1
 8051fc6:	4611      	mov	r1, r2
 8051fc8:	461a      	mov	r2, r3
 8051fca:	4603      	mov	r3, r0
 8051fcc:	817b      	strh	r3, [r7, #10]
 8051fce:	460b      	mov	r3, r1
 8051fd0:	813b      	strh	r3, [r7, #8]
 8051fd2:	4613      	mov	r3, r2
 8051fd4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8051fd6:	f7fd fb2d 	bl	804f634 <HAL_GetTick>
 8051fda:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8051fdc:	68fb      	ldr	r3, [r7, #12]
 8051fde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8051fe2:	b2db      	uxtb	r3, r3
 8051fe4:	2b20      	cmp	r3, #32
 8051fe6:	f040 80d9 	bne.w	805219c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8051fea:	697b      	ldr	r3, [r7, #20]
 8051fec:	9300      	str	r3, [sp, #0]
 8051fee:	2319      	movs	r3, #25
 8051ff0:	2201      	movs	r2, #1
 8051ff2:	496d      	ldr	r1, [pc, #436]	; (80521a8 <HAL_I2C_Mem_Write+0x1ec>)
 8051ff4:	68f8      	ldr	r0, [r7, #12]
 8051ff6:	f000 fdcf 	bl	8052b98 <I2C_WaitOnFlagUntilTimeout>
 8051ffa:	4603      	mov	r3, r0
 8051ffc:	2b00      	cmp	r3, #0
 8051ffe:	d001      	beq.n	8052004 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8052000:	2302      	movs	r3, #2
 8052002:	e0cc      	b.n	805219e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8052004:	68fb      	ldr	r3, [r7, #12]
 8052006:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 805200a:	2b01      	cmp	r3, #1
 805200c:	d101      	bne.n	8052012 <HAL_I2C_Mem_Write+0x56>
 805200e:	2302      	movs	r3, #2
 8052010:	e0c5      	b.n	805219e <HAL_I2C_Mem_Write+0x1e2>
 8052012:	68fb      	ldr	r3, [r7, #12]
 8052014:	2201      	movs	r2, #1
 8052016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 805201a:	68fb      	ldr	r3, [r7, #12]
 805201c:	681b      	ldr	r3, [r3, #0]
 805201e:	681b      	ldr	r3, [r3, #0]
 8052020:	f003 0301 	and.w	r3, r3, #1
 8052024:	2b01      	cmp	r3, #1
 8052026:	d007      	beq.n	8052038 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8052028:	68fb      	ldr	r3, [r7, #12]
 805202a:	681b      	ldr	r3, [r3, #0]
 805202c:	681a      	ldr	r2, [r3, #0]
 805202e:	68fb      	ldr	r3, [r7, #12]
 8052030:	681b      	ldr	r3, [r3, #0]
 8052032:	f042 0201 	orr.w	r2, r2, #1
 8052036:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8052038:	68fb      	ldr	r3, [r7, #12]
 805203a:	681b      	ldr	r3, [r3, #0]
 805203c:	681a      	ldr	r2, [r3, #0]
 805203e:	68fb      	ldr	r3, [r7, #12]
 8052040:	681b      	ldr	r3, [r3, #0]
 8052042:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8052046:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8052048:	68fb      	ldr	r3, [r7, #12]
 805204a:	2221      	movs	r2, #33	; 0x21
 805204c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8052050:	68fb      	ldr	r3, [r7, #12]
 8052052:	2240      	movs	r2, #64	; 0x40
 8052054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8052058:	68fb      	ldr	r3, [r7, #12]
 805205a:	2200      	movs	r2, #0
 805205c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 805205e:	68fb      	ldr	r3, [r7, #12]
 8052060:	6a3a      	ldr	r2, [r7, #32]
 8052062:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8052064:	68fb      	ldr	r3, [r7, #12]
 8052066:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8052068:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 805206a:	68fb      	ldr	r3, [r7, #12]
 805206c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 805206e:	b29a      	uxth	r2, r3
 8052070:	68fb      	ldr	r3, [r7, #12]
 8052072:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8052074:	68fb      	ldr	r3, [r7, #12]
 8052076:	4a4d      	ldr	r2, [pc, #308]	; (80521ac <HAL_I2C_Mem_Write+0x1f0>)
 8052078:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 805207a:	88f8      	ldrh	r0, [r7, #6]
 805207c:	893a      	ldrh	r2, [r7, #8]
 805207e:	8979      	ldrh	r1, [r7, #10]
 8052080:	697b      	ldr	r3, [r7, #20]
 8052082:	9301      	str	r3, [sp, #4]
 8052084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8052086:	9300      	str	r3, [sp, #0]
 8052088:	4603      	mov	r3, r0
 805208a:	68f8      	ldr	r0, [r7, #12]
 805208c:	f000 fc06 	bl	805289c <I2C_RequestMemoryWrite>
 8052090:	4603      	mov	r3, r0
 8052092:	2b00      	cmp	r3, #0
 8052094:	d052      	beq.n	805213c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8052096:	2301      	movs	r3, #1
 8052098:	e081      	b.n	805219e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 805209a:	697a      	ldr	r2, [r7, #20]
 805209c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 805209e:	68f8      	ldr	r0, [r7, #12]
 80520a0:	f000 fe50 	bl	8052d44 <I2C_WaitOnTXEFlagUntilTimeout>
 80520a4:	4603      	mov	r3, r0
 80520a6:	2b00      	cmp	r3, #0
 80520a8:	d00d      	beq.n	80520c6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80520aa:	68fb      	ldr	r3, [r7, #12]
 80520ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80520ae:	2b04      	cmp	r3, #4
 80520b0:	d107      	bne.n	80520c2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80520b2:	68fb      	ldr	r3, [r7, #12]
 80520b4:	681b      	ldr	r3, [r3, #0]
 80520b6:	681a      	ldr	r2, [r3, #0]
 80520b8:	68fb      	ldr	r3, [r7, #12]
 80520ba:	681b      	ldr	r3, [r3, #0]
 80520bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80520c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80520c2:	2301      	movs	r3, #1
 80520c4:	e06b      	b.n	805219e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80520c6:	68fb      	ldr	r3, [r7, #12]
 80520c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80520ca:	781a      	ldrb	r2, [r3, #0]
 80520cc:	68fb      	ldr	r3, [r7, #12]
 80520ce:	681b      	ldr	r3, [r3, #0]
 80520d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80520d2:	68fb      	ldr	r3, [r7, #12]
 80520d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80520d6:	1c5a      	adds	r2, r3, #1
 80520d8:	68fb      	ldr	r3, [r7, #12]
 80520da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80520dc:	68fb      	ldr	r3, [r7, #12]
 80520de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80520e0:	3b01      	subs	r3, #1
 80520e2:	b29a      	uxth	r2, r3
 80520e4:	68fb      	ldr	r3, [r7, #12]
 80520e6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80520e8:	68fb      	ldr	r3, [r7, #12]
 80520ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80520ec:	b29b      	uxth	r3, r3
 80520ee:	3b01      	subs	r3, #1
 80520f0:	b29a      	uxth	r2, r3
 80520f2:	68fb      	ldr	r3, [r7, #12]
 80520f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80520f6:	68fb      	ldr	r3, [r7, #12]
 80520f8:	681b      	ldr	r3, [r3, #0]
 80520fa:	695b      	ldr	r3, [r3, #20]
 80520fc:	f003 0304 	and.w	r3, r3, #4
 8052100:	2b04      	cmp	r3, #4
 8052102:	d11b      	bne.n	805213c <HAL_I2C_Mem_Write+0x180>
 8052104:	68fb      	ldr	r3, [r7, #12]
 8052106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8052108:	2b00      	cmp	r3, #0
 805210a:	d017      	beq.n	805213c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 805210c:	68fb      	ldr	r3, [r7, #12]
 805210e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8052110:	781a      	ldrb	r2, [r3, #0]
 8052112:	68fb      	ldr	r3, [r7, #12]
 8052114:	681b      	ldr	r3, [r3, #0]
 8052116:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8052118:	68fb      	ldr	r3, [r7, #12]
 805211a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 805211c:	1c5a      	adds	r2, r3, #1
 805211e:	68fb      	ldr	r3, [r7, #12]
 8052120:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8052122:	68fb      	ldr	r3, [r7, #12]
 8052124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8052126:	3b01      	subs	r3, #1
 8052128:	b29a      	uxth	r2, r3
 805212a:	68fb      	ldr	r3, [r7, #12]
 805212c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 805212e:	68fb      	ldr	r3, [r7, #12]
 8052130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8052132:	b29b      	uxth	r3, r3
 8052134:	3b01      	subs	r3, #1
 8052136:	b29a      	uxth	r2, r3
 8052138:	68fb      	ldr	r3, [r7, #12]
 805213a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 805213c:	68fb      	ldr	r3, [r7, #12]
 805213e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8052140:	2b00      	cmp	r3, #0
 8052142:	d1aa      	bne.n	805209a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8052144:	697a      	ldr	r2, [r7, #20]
 8052146:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8052148:	68f8      	ldr	r0, [r7, #12]
 805214a:	f000 fe3c 	bl	8052dc6 <I2C_WaitOnBTFFlagUntilTimeout>
 805214e:	4603      	mov	r3, r0
 8052150:	2b00      	cmp	r3, #0
 8052152:	d00d      	beq.n	8052170 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8052154:	68fb      	ldr	r3, [r7, #12]
 8052156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8052158:	2b04      	cmp	r3, #4
 805215a:	d107      	bne.n	805216c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 805215c:	68fb      	ldr	r3, [r7, #12]
 805215e:	681b      	ldr	r3, [r3, #0]
 8052160:	681a      	ldr	r2, [r3, #0]
 8052162:	68fb      	ldr	r3, [r7, #12]
 8052164:	681b      	ldr	r3, [r3, #0]
 8052166:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 805216a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 805216c:	2301      	movs	r3, #1
 805216e:	e016      	b.n	805219e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8052170:	68fb      	ldr	r3, [r7, #12]
 8052172:	681b      	ldr	r3, [r3, #0]
 8052174:	681a      	ldr	r2, [r3, #0]
 8052176:	68fb      	ldr	r3, [r7, #12]
 8052178:	681b      	ldr	r3, [r3, #0]
 805217a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 805217e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8052180:	68fb      	ldr	r3, [r7, #12]
 8052182:	2220      	movs	r2, #32
 8052184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8052188:	68fb      	ldr	r3, [r7, #12]
 805218a:	2200      	movs	r2, #0
 805218c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8052190:	68fb      	ldr	r3, [r7, #12]
 8052192:	2200      	movs	r2, #0
 8052194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8052198:	2300      	movs	r3, #0
 805219a:	e000      	b.n	805219e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 805219c:	2302      	movs	r3, #2
  }
}
 805219e:	4618      	mov	r0, r3
 80521a0:	3718      	adds	r7, #24
 80521a2:	46bd      	mov	sp, r7
 80521a4:	bd80      	pop	{r7, pc}
 80521a6:	bf00      	nop
 80521a8:	00100002 	.word	0x00100002
 80521ac:	ffff0000 	.word	0xffff0000

080521b0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80521b0:	b580      	push	{r7, lr}
 80521b2:	b08c      	sub	sp, #48	; 0x30
 80521b4:	af02      	add	r7, sp, #8
 80521b6:	60f8      	str	r0, [r7, #12]
 80521b8:	4608      	mov	r0, r1
 80521ba:	4611      	mov	r1, r2
 80521bc:	461a      	mov	r2, r3
 80521be:	4603      	mov	r3, r0
 80521c0:	817b      	strh	r3, [r7, #10]
 80521c2:	460b      	mov	r3, r1
 80521c4:	813b      	strh	r3, [r7, #8]
 80521c6:	4613      	mov	r3, r2
 80521c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80521ca:	f7fd fa33 	bl	804f634 <HAL_GetTick>
 80521ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80521d0:	68fb      	ldr	r3, [r7, #12]
 80521d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80521d6:	b2db      	uxtb	r3, r3
 80521d8:	2b20      	cmp	r3, #32
 80521da:	f040 8208 	bne.w	80525ee <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80521de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80521e0:	9300      	str	r3, [sp, #0]
 80521e2:	2319      	movs	r3, #25
 80521e4:	2201      	movs	r2, #1
 80521e6:	497b      	ldr	r1, [pc, #492]	; (80523d4 <HAL_I2C_Mem_Read+0x224>)
 80521e8:	68f8      	ldr	r0, [r7, #12]
 80521ea:	f000 fcd5 	bl	8052b98 <I2C_WaitOnFlagUntilTimeout>
 80521ee:	4603      	mov	r3, r0
 80521f0:	2b00      	cmp	r3, #0
 80521f2:	d001      	beq.n	80521f8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80521f4:	2302      	movs	r3, #2
 80521f6:	e1fb      	b.n	80525f0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80521f8:	68fb      	ldr	r3, [r7, #12]
 80521fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80521fe:	2b01      	cmp	r3, #1
 8052200:	d101      	bne.n	8052206 <HAL_I2C_Mem_Read+0x56>
 8052202:	2302      	movs	r3, #2
 8052204:	e1f4      	b.n	80525f0 <HAL_I2C_Mem_Read+0x440>
 8052206:	68fb      	ldr	r3, [r7, #12]
 8052208:	2201      	movs	r2, #1
 805220a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 805220e:	68fb      	ldr	r3, [r7, #12]
 8052210:	681b      	ldr	r3, [r3, #0]
 8052212:	681b      	ldr	r3, [r3, #0]
 8052214:	f003 0301 	and.w	r3, r3, #1
 8052218:	2b01      	cmp	r3, #1
 805221a:	d007      	beq.n	805222c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 805221c:	68fb      	ldr	r3, [r7, #12]
 805221e:	681b      	ldr	r3, [r3, #0]
 8052220:	681a      	ldr	r2, [r3, #0]
 8052222:	68fb      	ldr	r3, [r7, #12]
 8052224:	681b      	ldr	r3, [r3, #0]
 8052226:	f042 0201 	orr.w	r2, r2, #1
 805222a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 805222c:	68fb      	ldr	r3, [r7, #12]
 805222e:	681b      	ldr	r3, [r3, #0]
 8052230:	681a      	ldr	r2, [r3, #0]
 8052232:	68fb      	ldr	r3, [r7, #12]
 8052234:	681b      	ldr	r3, [r3, #0]
 8052236:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 805223a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 805223c:	68fb      	ldr	r3, [r7, #12]
 805223e:	2222      	movs	r2, #34	; 0x22
 8052240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8052244:	68fb      	ldr	r3, [r7, #12]
 8052246:	2240      	movs	r2, #64	; 0x40
 8052248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 805224c:	68fb      	ldr	r3, [r7, #12]
 805224e:	2200      	movs	r2, #0
 8052250:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8052252:	68fb      	ldr	r3, [r7, #12]
 8052254:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8052256:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8052258:	68fb      	ldr	r3, [r7, #12]
 805225a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 805225c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 805225e:	68fb      	ldr	r3, [r7, #12]
 8052260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8052262:	b29a      	uxth	r2, r3
 8052264:	68fb      	ldr	r3, [r7, #12]
 8052266:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8052268:	68fb      	ldr	r3, [r7, #12]
 805226a:	4a5b      	ldr	r2, [pc, #364]	; (80523d8 <HAL_I2C_Mem_Read+0x228>)
 805226c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 805226e:	88f8      	ldrh	r0, [r7, #6]
 8052270:	893a      	ldrh	r2, [r7, #8]
 8052272:	8979      	ldrh	r1, [r7, #10]
 8052274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8052276:	9301      	str	r3, [sp, #4]
 8052278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 805227a:	9300      	str	r3, [sp, #0]
 805227c:	4603      	mov	r3, r0
 805227e:	68f8      	ldr	r0, [r7, #12]
 8052280:	f000 fba2 	bl	80529c8 <I2C_RequestMemoryRead>
 8052284:	4603      	mov	r3, r0
 8052286:	2b00      	cmp	r3, #0
 8052288:	d001      	beq.n	805228e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 805228a:	2301      	movs	r3, #1
 805228c:	e1b0      	b.n	80525f0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 805228e:	68fb      	ldr	r3, [r7, #12]
 8052290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8052292:	2b00      	cmp	r3, #0
 8052294:	d113      	bne.n	80522be <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8052296:	2300      	movs	r3, #0
 8052298:	623b      	str	r3, [r7, #32]
 805229a:	68fb      	ldr	r3, [r7, #12]
 805229c:	681b      	ldr	r3, [r3, #0]
 805229e:	695b      	ldr	r3, [r3, #20]
 80522a0:	623b      	str	r3, [r7, #32]
 80522a2:	68fb      	ldr	r3, [r7, #12]
 80522a4:	681b      	ldr	r3, [r3, #0]
 80522a6:	699b      	ldr	r3, [r3, #24]
 80522a8:	623b      	str	r3, [r7, #32]
 80522aa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80522ac:	68fb      	ldr	r3, [r7, #12]
 80522ae:	681b      	ldr	r3, [r3, #0]
 80522b0:	681a      	ldr	r2, [r3, #0]
 80522b2:	68fb      	ldr	r3, [r7, #12]
 80522b4:	681b      	ldr	r3, [r3, #0]
 80522b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80522ba:	601a      	str	r2, [r3, #0]
 80522bc:	e184      	b.n	80525c8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80522be:	68fb      	ldr	r3, [r7, #12]
 80522c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80522c2:	2b01      	cmp	r3, #1
 80522c4:	d11b      	bne.n	80522fe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80522c6:	68fb      	ldr	r3, [r7, #12]
 80522c8:	681b      	ldr	r3, [r3, #0]
 80522ca:	681a      	ldr	r2, [r3, #0]
 80522cc:	68fb      	ldr	r3, [r7, #12]
 80522ce:	681b      	ldr	r3, [r3, #0]
 80522d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80522d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80522d6:	2300      	movs	r3, #0
 80522d8:	61fb      	str	r3, [r7, #28]
 80522da:	68fb      	ldr	r3, [r7, #12]
 80522dc:	681b      	ldr	r3, [r3, #0]
 80522de:	695b      	ldr	r3, [r3, #20]
 80522e0:	61fb      	str	r3, [r7, #28]
 80522e2:	68fb      	ldr	r3, [r7, #12]
 80522e4:	681b      	ldr	r3, [r3, #0]
 80522e6:	699b      	ldr	r3, [r3, #24]
 80522e8:	61fb      	str	r3, [r7, #28]
 80522ea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80522ec:	68fb      	ldr	r3, [r7, #12]
 80522ee:	681b      	ldr	r3, [r3, #0]
 80522f0:	681a      	ldr	r2, [r3, #0]
 80522f2:	68fb      	ldr	r3, [r7, #12]
 80522f4:	681b      	ldr	r3, [r3, #0]
 80522f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80522fa:	601a      	str	r2, [r3, #0]
 80522fc:	e164      	b.n	80525c8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80522fe:	68fb      	ldr	r3, [r7, #12]
 8052300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8052302:	2b02      	cmp	r3, #2
 8052304:	d11b      	bne.n	805233e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8052306:	68fb      	ldr	r3, [r7, #12]
 8052308:	681b      	ldr	r3, [r3, #0]
 805230a:	681a      	ldr	r2, [r3, #0]
 805230c:	68fb      	ldr	r3, [r7, #12]
 805230e:	681b      	ldr	r3, [r3, #0]
 8052310:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8052314:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8052316:	68fb      	ldr	r3, [r7, #12]
 8052318:	681b      	ldr	r3, [r3, #0]
 805231a:	681a      	ldr	r2, [r3, #0]
 805231c:	68fb      	ldr	r3, [r7, #12]
 805231e:	681b      	ldr	r3, [r3, #0]
 8052320:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8052324:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8052326:	2300      	movs	r3, #0
 8052328:	61bb      	str	r3, [r7, #24]
 805232a:	68fb      	ldr	r3, [r7, #12]
 805232c:	681b      	ldr	r3, [r3, #0]
 805232e:	695b      	ldr	r3, [r3, #20]
 8052330:	61bb      	str	r3, [r7, #24]
 8052332:	68fb      	ldr	r3, [r7, #12]
 8052334:	681b      	ldr	r3, [r3, #0]
 8052336:	699b      	ldr	r3, [r3, #24]
 8052338:	61bb      	str	r3, [r7, #24]
 805233a:	69bb      	ldr	r3, [r7, #24]
 805233c:	e144      	b.n	80525c8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 805233e:	2300      	movs	r3, #0
 8052340:	617b      	str	r3, [r7, #20]
 8052342:	68fb      	ldr	r3, [r7, #12]
 8052344:	681b      	ldr	r3, [r3, #0]
 8052346:	695b      	ldr	r3, [r3, #20]
 8052348:	617b      	str	r3, [r7, #20]
 805234a:	68fb      	ldr	r3, [r7, #12]
 805234c:	681b      	ldr	r3, [r3, #0]
 805234e:	699b      	ldr	r3, [r3, #24]
 8052350:	617b      	str	r3, [r7, #20]
 8052352:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8052354:	e138      	b.n	80525c8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8052356:	68fb      	ldr	r3, [r7, #12]
 8052358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 805235a:	2b03      	cmp	r3, #3
 805235c:	f200 80f1 	bhi.w	8052542 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8052360:	68fb      	ldr	r3, [r7, #12]
 8052362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8052364:	2b01      	cmp	r3, #1
 8052366:	d123      	bne.n	80523b0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8052368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 805236a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 805236c:	68f8      	ldr	r0, [r7, #12]
 805236e:	f000 fd6b 	bl	8052e48 <I2C_WaitOnRXNEFlagUntilTimeout>
 8052372:	4603      	mov	r3, r0
 8052374:	2b00      	cmp	r3, #0
 8052376:	d001      	beq.n	805237c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8052378:	2301      	movs	r3, #1
 805237a:	e139      	b.n	80525f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 805237c:	68fb      	ldr	r3, [r7, #12]
 805237e:	681b      	ldr	r3, [r3, #0]
 8052380:	691a      	ldr	r2, [r3, #16]
 8052382:	68fb      	ldr	r3, [r7, #12]
 8052384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8052386:	b2d2      	uxtb	r2, r2
 8052388:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 805238a:	68fb      	ldr	r3, [r7, #12]
 805238c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 805238e:	1c5a      	adds	r2, r3, #1
 8052390:	68fb      	ldr	r3, [r7, #12]
 8052392:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8052394:	68fb      	ldr	r3, [r7, #12]
 8052396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8052398:	3b01      	subs	r3, #1
 805239a:	b29a      	uxth	r2, r3
 805239c:	68fb      	ldr	r3, [r7, #12]
 805239e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80523a0:	68fb      	ldr	r3, [r7, #12]
 80523a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80523a4:	b29b      	uxth	r3, r3
 80523a6:	3b01      	subs	r3, #1
 80523a8:	b29a      	uxth	r2, r3
 80523aa:	68fb      	ldr	r3, [r7, #12]
 80523ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80523ae:	e10b      	b.n	80525c8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80523b0:	68fb      	ldr	r3, [r7, #12]
 80523b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80523b4:	2b02      	cmp	r3, #2
 80523b6:	d14e      	bne.n	8052456 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80523b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80523ba:	9300      	str	r3, [sp, #0]
 80523bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80523be:	2200      	movs	r2, #0
 80523c0:	4906      	ldr	r1, [pc, #24]	; (80523dc <HAL_I2C_Mem_Read+0x22c>)
 80523c2:	68f8      	ldr	r0, [r7, #12]
 80523c4:	f000 fbe8 	bl	8052b98 <I2C_WaitOnFlagUntilTimeout>
 80523c8:	4603      	mov	r3, r0
 80523ca:	2b00      	cmp	r3, #0
 80523cc:	d008      	beq.n	80523e0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80523ce:	2301      	movs	r3, #1
 80523d0:	e10e      	b.n	80525f0 <HAL_I2C_Mem_Read+0x440>
 80523d2:	bf00      	nop
 80523d4:	00100002 	.word	0x00100002
 80523d8:	ffff0000 	.word	0xffff0000
 80523dc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80523e0:	68fb      	ldr	r3, [r7, #12]
 80523e2:	681b      	ldr	r3, [r3, #0]
 80523e4:	681a      	ldr	r2, [r3, #0]
 80523e6:	68fb      	ldr	r3, [r7, #12]
 80523e8:	681b      	ldr	r3, [r3, #0]
 80523ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80523ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80523f0:	68fb      	ldr	r3, [r7, #12]
 80523f2:	681b      	ldr	r3, [r3, #0]
 80523f4:	691a      	ldr	r2, [r3, #16]
 80523f6:	68fb      	ldr	r3, [r7, #12]
 80523f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80523fa:	b2d2      	uxtb	r2, r2
 80523fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80523fe:	68fb      	ldr	r3, [r7, #12]
 8052400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8052402:	1c5a      	adds	r2, r3, #1
 8052404:	68fb      	ldr	r3, [r7, #12]
 8052406:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8052408:	68fb      	ldr	r3, [r7, #12]
 805240a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 805240c:	3b01      	subs	r3, #1
 805240e:	b29a      	uxth	r2, r3
 8052410:	68fb      	ldr	r3, [r7, #12]
 8052412:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8052414:	68fb      	ldr	r3, [r7, #12]
 8052416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8052418:	b29b      	uxth	r3, r3
 805241a:	3b01      	subs	r3, #1
 805241c:	b29a      	uxth	r2, r3
 805241e:	68fb      	ldr	r3, [r7, #12]
 8052420:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8052422:	68fb      	ldr	r3, [r7, #12]
 8052424:	681b      	ldr	r3, [r3, #0]
 8052426:	691a      	ldr	r2, [r3, #16]
 8052428:	68fb      	ldr	r3, [r7, #12]
 805242a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 805242c:	b2d2      	uxtb	r2, r2
 805242e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8052430:	68fb      	ldr	r3, [r7, #12]
 8052432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8052434:	1c5a      	adds	r2, r3, #1
 8052436:	68fb      	ldr	r3, [r7, #12]
 8052438:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 805243a:	68fb      	ldr	r3, [r7, #12]
 805243c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 805243e:	3b01      	subs	r3, #1
 8052440:	b29a      	uxth	r2, r3
 8052442:	68fb      	ldr	r3, [r7, #12]
 8052444:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8052446:	68fb      	ldr	r3, [r7, #12]
 8052448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 805244a:	b29b      	uxth	r3, r3
 805244c:	3b01      	subs	r3, #1
 805244e:	b29a      	uxth	r2, r3
 8052450:	68fb      	ldr	r3, [r7, #12]
 8052452:	855a      	strh	r2, [r3, #42]	; 0x2a
 8052454:	e0b8      	b.n	80525c8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8052456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8052458:	9300      	str	r3, [sp, #0]
 805245a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 805245c:	2200      	movs	r2, #0
 805245e:	4966      	ldr	r1, [pc, #408]	; (80525f8 <HAL_I2C_Mem_Read+0x448>)
 8052460:	68f8      	ldr	r0, [r7, #12]
 8052462:	f000 fb99 	bl	8052b98 <I2C_WaitOnFlagUntilTimeout>
 8052466:	4603      	mov	r3, r0
 8052468:	2b00      	cmp	r3, #0
 805246a:	d001      	beq.n	8052470 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 805246c:	2301      	movs	r3, #1
 805246e:	e0bf      	b.n	80525f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8052470:	68fb      	ldr	r3, [r7, #12]
 8052472:	681b      	ldr	r3, [r3, #0]
 8052474:	681a      	ldr	r2, [r3, #0]
 8052476:	68fb      	ldr	r3, [r7, #12]
 8052478:	681b      	ldr	r3, [r3, #0]
 805247a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 805247e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8052480:	68fb      	ldr	r3, [r7, #12]
 8052482:	681b      	ldr	r3, [r3, #0]
 8052484:	691a      	ldr	r2, [r3, #16]
 8052486:	68fb      	ldr	r3, [r7, #12]
 8052488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 805248a:	b2d2      	uxtb	r2, r2
 805248c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 805248e:	68fb      	ldr	r3, [r7, #12]
 8052490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8052492:	1c5a      	adds	r2, r3, #1
 8052494:	68fb      	ldr	r3, [r7, #12]
 8052496:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8052498:	68fb      	ldr	r3, [r7, #12]
 805249a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 805249c:	3b01      	subs	r3, #1
 805249e:	b29a      	uxth	r2, r3
 80524a0:	68fb      	ldr	r3, [r7, #12]
 80524a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80524a4:	68fb      	ldr	r3, [r7, #12]
 80524a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80524a8:	b29b      	uxth	r3, r3
 80524aa:	3b01      	subs	r3, #1
 80524ac:	b29a      	uxth	r2, r3
 80524ae:	68fb      	ldr	r3, [r7, #12]
 80524b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80524b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80524b4:	9300      	str	r3, [sp, #0]
 80524b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80524b8:	2200      	movs	r2, #0
 80524ba:	494f      	ldr	r1, [pc, #316]	; (80525f8 <HAL_I2C_Mem_Read+0x448>)
 80524bc:	68f8      	ldr	r0, [r7, #12]
 80524be:	f000 fb6b 	bl	8052b98 <I2C_WaitOnFlagUntilTimeout>
 80524c2:	4603      	mov	r3, r0
 80524c4:	2b00      	cmp	r3, #0
 80524c6:	d001      	beq.n	80524cc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80524c8:	2301      	movs	r3, #1
 80524ca:	e091      	b.n	80525f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80524cc:	68fb      	ldr	r3, [r7, #12]
 80524ce:	681b      	ldr	r3, [r3, #0]
 80524d0:	681a      	ldr	r2, [r3, #0]
 80524d2:	68fb      	ldr	r3, [r7, #12]
 80524d4:	681b      	ldr	r3, [r3, #0]
 80524d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80524da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80524dc:	68fb      	ldr	r3, [r7, #12]
 80524de:	681b      	ldr	r3, [r3, #0]
 80524e0:	691a      	ldr	r2, [r3, #16]
 80524e2:	68fb      	ldr	r3, [r7, #12]
 80524e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80524e6:	b2d2      	uxtb	r2, r2
 80524e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80524ea:	68fb      	ldr	r3, [r7, #12]
 80524ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80524ee:	1c5a      	adds	r2, r3, #1
 80524f0:	68fb      	ldr	r3, [r7, #12]
 80524f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80524f4:	68fb      	ldr	r3, [r7, #12]
 80524f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80524f8:	3b01      	subs	r3, #1
 80524fa:	b29a      	uxth	r2, r3
 80524fc:	68fb      	ldr	r3, [r7, #12]
 80524fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8052500:	68fb      	ldr	r3, [r7, #12]
 8052502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8052504:	b29b      	uxth	r3, r3
 8052506:	3b01      	subs	r3, #1
 8052508:	b29a      	uxth	r2, r3
 805250a:	68fb      	ldr	r3, [r7, #12]
 805250c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 805250e:	68fb      	ldr	r3, [r7, #12]
 8052510:	681b      	ldr	r3, [r3, #0]
 8052512:	691a      	ldr	r2, [r3, #16]
 8052514:	68fb      	ldr	r3, [r7, #12]
 8052516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8052518:	b2d2      	uxtb	r2, r2
 805251a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 805251c:	68fb      	ldr	r3, [r7, #12]
 805251e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8052520:	1c5a      	adds	r2, r3, #1
 8052522:	68fb      	ldr	r3, [r7, #12]
 8052524:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8052526:	68fb      	ldr	r3, [r7, #12]
 8052528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 805252a:	3b01      	subs	r3, #1
 805252c:	b29a      	uxth	r2, r3
 805252e:	68fb      	ldr	r3, [r7, #12]
 8052530:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8052532:	68fb      	ldr	r3, [r7, #12]
 8052534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8052536:	b29b      	uxth	r3, r3
 8052538:	3b01      	subs	r3, #1
 805253a:	b29a      	uxth	r2, r3
 805253c:	68fb      	ldr	r3, [r7, #12]
 805253e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8052540:	e042      	b.n	80525c8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8052542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8052544:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8052546:	68f8      	ldr	r0, [r7, #12]
 8052548:	f000 fc7e 	bl	8052e48 <I2C_WaitOnRXNEFlagUntilTimeout>
 805254c:	4603      	mov	r3, r0
 805254e:	2b00      	cmp	r3, #0
 8052550:	d001      	beq.n	8052556 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8052552:	2301      	movs	r3, #1
 8052554:	e04c      	b.n	80525f0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8052556:	68fb      	ldr	r3, [r7, #12]
 8052558:	681b      	ldr	r3, [r3, #0]
 805255a:	691a      	ldr	r2, [r3, #16]
 805255c:	68fb      	ldr	r3, [r7, #12]
 805255e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8052560:	b2d2      	uxtb	r2, r2
 8052562:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8052564:	68fb      	ldr	r3, [r7, #12]
 8052566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8052568:	1c5a      	adds	r2, r3, #1
 805256a:	68fb      	ldr	r3, [r7, #12]
 805256c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 805256e:	68fb      	ldr	r3, [r7, #12]
 8052570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8052572:	3b01      	subs	r3, #1
 8052574:	b29a      	uxth	r2, r3
 8052576:	68fb      	ldr	r3, [r7, #12]
 8052578:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 805257a:	68fb      	ldr	r3, [r7, #12]
 805257c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 805257e:	b29b      	uxth	r3, r3
 8052580:	3b01      	subs	r3, #1
 8052582:	b29a      	uxth	r2, r3
 8052584:	68fb      	ldr	r3, [r7, #12]
 8052586:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8052588:	68fb      	ldr	r3, [r7, #12]
 805258a:	681b      	ldr	r3, [r3, #0]
 805258c:	695b      	ldr	r3, [r3, #20]
 805258e:	f003 0304 	and.w	r3, r3, #4
 8052592:	2b04      	cmp	r3, #4
 8052594:	d118      	bne.n	80525c8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8052596:	68fb      	ldr	r3, [r7, #12]
 8052598:	681b      	ldr	r3, [r3, #0]
 805259a:	691a      	ldr	r2, [r3, #16]
 805259c:	68fb      	ldr	r3, [r7, #12]
 805259e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80525a0:	b2d2      	uxtb	r2, r2
 80525a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80525a4:	68fb      	ldr	r3, [r7, #12]
 80525a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80525a8:	1c5a      	adds	r2, r3, #1
 80525aa:	68fb      	ldr	r3, [r7, #12]
 80525ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80525ae:	68fb      	ldr	r3, [r7, #12]
 80525b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80525b2:	3b01      	subs	r3, #1
 80525b4:	b29a      	uxth	r2, r3
 80525b6:	68fb      	ldr	r3, [r7, #12]
 80525b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80525ba:	68fb      	ldr	r3, [r7, #12]
 80525bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80525be:	b29b      	uxth	r3, r3
 80525c0:	3b01      	subs	r3, #1
 80525c2:	b29a      	uxth	r2, r3
 80525c4:	68fb      	ldr	r3, [r7, #12]
 80525c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80525c8:	68fb      	ldr	r3, [r7, #12]
 80525ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80525cc:	2b00      	cmp	r3, #0
 80525ce:	f47f aec2 	bne.w	8052356 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80525d2:	68fb      	ldr	r3, [r7, #12]
 80525d4:	2220      	movs	r2, #32
 80525d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80525da:	68fb      	ldr	r3, [r7, #12]
 80525dc:	2200      	movs	r2, #0
 80525de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80525e2:	68fb      	ldr	r3, [r7, #12]
 80525e4:	2200      	movs	r2, #0
 80525e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80525ea:	2300      	movs	r3, #0
 80525ec:	e000      	b.n	80525f0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80525ee:	2302      	movs	r3, #2
  }
}
 80525f0:	4618      	mov	r0, r3
 80525f2:	3728      	adds	r7, #40	; 0x28
 80525f4:	46bd      	mov	sp, r7
 80525f6:	bd80      	pop	{r7, pc}
 80525f8:	00010004 	.word	0x00010004

080525fc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80525fc:	b580      	push	{r7, lr}
 80525fe:	b088      	sub	sp, #32
 8052600:	af02      	add	r7, sp, #8
 8052602:	60f8      	str	r0, [r7, #12]
 8052604:	607a      	str	r2, [r7, #4]
 8052606:	603b      	str	r3, [r7, #0]
 8052608:	460b      	mov	r3, r1
 805260a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 805260c:	68fb      	ldr	r3, [r7, #12]
 805260e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8052610:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8052612:	697b      	ldr	r3, [r7, #20]
 8052614:	2b08      	cmp	r3, #8
 8052616:	d006      	beq.n	8052626 <I2C_MasterRequestWrite+0x2a>
 8052618:	697b      	ldr	r3, [r7, #20]
 805261a:	2b01      	cmp	r3, #1
 805261c:	d003      	beq.n	8052626 <I2C_MasterRequestWrite+0x2a>
 805261e:	697b      	ldr	r3, [r7, #20]
 8052620:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8052624:	d108      	bne.n	8052638 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8052626:	68fb      	ldr	r3, [r7, #12]
 8052628:	681b      	ldr	r3, [r3, #0]
 805262a:	681a      	ldr	r2, [r3, #0]
 805262c:	68fb      	ldr	r3, [r7, #12]
 805262e:	681b      	ldr	r3, [r3, #0]
 8052630:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8052634:	601a      	str	r2, [r3, #0]
 8052636:	e00b      	b.n	8052650 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8052638:	68fb      	ldr	r3, [r7, #12]
 805263a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 805263c:	2b12      	cmp	r3, #18
 805263e:	d107      	bne.n	8052650 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8052640:	68fb      	ldr	r3, [r7, #12]
 8052642:	681b      	ldr	r3, [r3, #0]
 8052644:	681a      	ldr	r2, [r3, #0]
 8052646:	68fb      	ldr	r3, [r7, #12]
 8052648:	681b      	ldr	r3, [r3, #0]
 805264a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 805264e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8052650:	683b      	ldr	r3, [r7, #0]
 8052652:	9300      	str	r3, [sp, #0]
 8052654:	687b      	ldr	r3, [r7, #4]
 8052656:	2200      	movs	r2, #0
 8052658:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 805265c:	68f8      	ldr	r0, [r7, #12]
 805265e:	f000 fa9b 	bl	8052b98 <I2C_WaitOnFlagUntilTimeout>
 8052662:	4603      	mov	r3, r0
 8052664:	2b00      	cmp	r3, #0
 8052666:	d00d      	beq.n	8052684 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8052668:	68fb      	ldr	r3, [r7, #12]
 805266a:	681b      	ldr	r3, [r3, #0]
 805266c:	681b      	ldr	r3, [r3, #0]
 805266e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8052672:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8052676:	d103      	bne.n	8052680 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8052678:	68fb      	ldr	r3, [r7, #12]
 805267a:	f44f 7200 	mov.w	r2, #512	; 0x200
 805267e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8052680:	2303      	movs	r3, #3
 8052682:	e035      	b.n	80526f0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8052684:	68fb      	ldr	r3, [r7, #12]
 8052686:	691b      	ldr	r3, [r3, #16]
 8052688:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 805268c:	d108      	bne.n	80526a0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 805268e:	897b      	ldrh	r3, [r7, #10]
 8052690:	b2db      	uxtb	r3, r3
 8052692:	461a      	mov	r2, r3
 8052694:	68fb      	ldr	r3, [r7, #12]
 8052696:	681b      	ldr	r3, [r3, #0]
 8052698:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 805269c:	611a      	str	r2, [r3, #16]
 805269e:	e01b      	b.n	80526d8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80526a0:	897b      	ldrh	r3, [r7, #10]
 80526a2:	11db      	asrs	r3, r3, #7
 80526a4:	b2db      	uxtb	r3, r3
 80526a6:	f003 0306 	and.w	r3, r3, #6
 80526aa:	b2db      	uxtb	r3, r3
 80526ac:	f063 030f 	orn	r3, r3, #15
 80526b0:	b2da      	uxtb	r2, r3
 80526b2:	68fb      	ldr	r3, [r7, #12]
 80526b4:	681b      	ldr	r3, [r3, #0]
 80526b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80526b8:	683b      	ldr	r3, [r7, #0]
 80526ba:	687a      	ldr	r2, [r7, #4]
 80526bc:	490e      	ldr	r1, [pc, #56]	; (80526f8 <I2C_MasterRequestWrite+0xfc>)
 80526be:	68f8      	ldr	r0, [r7, #12]
 80526c0:	f000 fac1 	bl	8052c46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80526c4:	4603      	mov	r3, r0
 80526c6:	2b00      	cmp	r3, #0
 80526c8:	d001      	beq.n	80526ce <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80526ca:	2301      	movs	r3, #1
 80526cc:	e010      	b.n	80526f0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80526ce:	897b      	ldrh	r3, [r7, #10]
 80526d0:	b2da      	uxtb	r2, r3
 80526d2:	68fb      	ldr	r3, [r7, #12]
 80526d4:	681b      	ldr	r3, [r3, #0]
 80526d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80526d8:	683b      	ldr	r3, [r7, #0]
 80526da:	687a      	ldr	r2, [r7, #4]
 80526dc:	4907      	ldr	r1, [pc, #28]	; (80526fc <I2C_MasterRequestWrite+0x100>)
 80526de:	68f8      	ldr	r0, [r7, #12]
 80526e0:	f000 fab1 	bl	8052c46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80526e4:	4603      	mov	r3, r0
 80526e6:	2b00      	cmp	r3, #0
 80526e8:	d001      	beq.n	80526ee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80526ea:	2301      	movs	r3, #1
 80526ec:	e000      	b.n	80526f0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80526ee:	2300      	movs	r3, #0
}
 80526f0:	4618      	mov	r0, r3
 80526f2:	3718      	adds	r7, #24
 80526f4:	46bd      	mov	sp, r7
 80526f6:	bd80      	pop	{r7, pc}
 80526f8:	00010008 	.word	0x00010008
 80526fc:	00010002 	.word	0x00010002

08052700 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8052700:	b580      	push	{r7, lr}
 8052702:	b088      	sub	sp, #32
 8052704:	af02      	add	r7, sp, #8
 8052706:	60f8      	str	r0, [r7, #12]
 8052708:	607a      	str	r2, [r7, #4]
 805270a:	603b      	str	r3, [r7, #0]
 805270c:	460b      	mov	r3, r1
 805270e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8052710:	68fb      	ldr	r3, [r7, #12]
 8052712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8052714:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8052716:	68fb      	ldr	r3, [r7, #12]
 8052718:	681b      	ldr	r3, [r3, #0]
 805271a:	681a      	ldr	r2, [r3, #0]
 805271c:	68fb      	ldr	r3, [r7, #12]
 805271e:	681b      	ldr	r3, [r3, #0]
 8052720:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8052724:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8052726:	697b      	ldr	r3, [r7, #20]
 8052728:	2b08      	cmp	r3, #8
 805272a:	d006      	beq.n	805273a <I2C_MasterRequestRead+0x3a>
 805272c:	697b      	ldr	r3, [r7, #20]
 805272e:	2b01      	cmp	r3, #1
 8052730:	d003      	beq.n	805273a <I2C_MasterRequestRead+0x3a>
 8052732:	697b      	ldr	r3, [r7, #20]
 8052734:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8052738:	d108      	bne.n	805274c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 805273a:	68fb      	ldr	r3, [r7, #12]
 805273c:	681b      	ldr	r3, [r3, #0]
 805273e:	681a      	ldr	r2, [r3, #0]
 8052740:	68fb      	ldr	r3, [r7, #12]
 8052742:	681b      	ldr	r3, [r3, #0]
 8052744:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8052748:	601a      	str	r2, [r3, #0]
 805274a:	e00b      	b.n	8052764 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 805274c:	68fb      	ldr	r3, [r7, #12]
 805274e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8052750:	2b11      	cmp	r3, #17
 8052752:	d107      	bne.n	8052764 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8052754:	68fb      	ldr	r3, [r7, #12]
 8052756:	681b      	ldr	r3, [r3, #0]
 8052758:	681a      	ldr	r2, [r3, #0]
 805275a:	68fb      	ldr	r3, [r7, #12]
 805275c:	681b      	ldr	r3, [r3, #0]
 805275e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8052762:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8052764:	683b      	ldr	r3, [r7, #0]
 8052766:	9300      	str	r3, [sp, #0]
 8052768:	687b      	ldr	r3, [r7, #4]
 805276a:	2200      	movs	r2, #0
 805276c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8052770:	68f8      	ldr	r0, [r7, #12]
 8052772:	f000 fa11 	bl	8052b98 <I2C_WaitOnFlagUntilTimeout>
 8052776:	4603      	mov	r3, r0
 8052778:	2b00      	cmp	r3, #0
 805277a:	d00d      	beq.n	8052798 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 805277c:	68fb      	ldr	r3, [r7, #12]
 805277e:	681b      	ldr	r3, [r3, #0]
 8052780:	681b      	ldr	r3, [r3, #0]
 8052782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8052786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 805278a:	d103      	bne.n	8052794 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 805278c:	68fb      	ldr	r3, [r7, #12]
 805278e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8052792:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8052794:	2303      	movs	r3, #3
 8052796:	e079      	b.n	805288c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8052798:	68fb      	ldr	r3, [r7, #12]
 805279a:	691b      	ldr	r3, [r3, #16]
 805279c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80527a0:	d108      	bne.n	80527b4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80527a2:	897b      	ldrh	r3, [r7, #10]
 80527a4:	b2db      	uxtb	r3, r3
 80527a6:	f043 0301 	orr.w	r3, r3, #1
 80527aa:	b2da      	uxtb	r2, r3
 80527ac:	68fb      	ldr	r3, [r7, #12]
 80527ae:	681b      	ldr	r3, [r3, #0]
 80527b0:	611a      	str	r2, [r3, #16]
 80527b2:	e05f      	b.n	8052874 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80527b4:	897b      	ldrh	r3, [r7, #10]
 80527b6:	11db      	asrs	r3, r3, #7
 80527b8:	b2db      	uxtb	r3, r3
 80527ba:	f003 0306 	and.w	r3, r3, #6
 80527be:	b2db      	uxtb	r3, r3
 80527c0:	f063 030f 	orn	r3, r3, #15
 80527c4:	b2da      	uxtb	r2, r3
 80527c6:	68fb      	ldr	r3, [r7, #12]
 80527c8:	681b      	ldr	r3, [r3, #0]
 80527ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80527cc:	683b      	ldr	r3, [r7, #0]
 80527ce:	687a      	ldr	r2, [r7, #4]
 80527d0:	4930      	ldr	r1, [pc, #192]	; (8052894 <I2C_MasterRequestRead+0x194>)
 80527d2:	68f8      	ldr	r0, [r7, #12]
 80527d4:	f000 fa37 	bl	8052c46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80527d8:	4603      	mov	r3, r0
 80527da:	2b00      	cmp	r3, #0
 80527dc:	d001      	beq.n	80527e2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80527de:	2301      	movs	r3, #1
 80527e0:	e054      	b.n	805288c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80527e2:	897b      	ldrh	r3, [r7, #10]
 80527e4:	b2da      	uxtb	r2, r3
 80527e6:	68fb      	ldr	r3, [r7, #12]
 80527e8:	681b      	ldr	r3, [r3, #0]
 80527ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80527ec:	683b      	ldr	r3, [r7, #0]
 80527ee:	687a      	ldr	r2, [r7, #4]
 80527f0:	4929      	ldr	r1, [pc, #164]	; (8052898 <I2C_MasterRequestRead+0x198>)
 80527f2:	68f8      	ldr	r0, [r7, #12]
 80527f4:	f000 fa27 	bl	8052c46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80527f8:	4603      	mov	r3, r0
 80527fa:	2b00      	cmp	r3, #0
 80527fc:	d001      	beq.n	8052802 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80527fe:	2301      	movs	r3, #1
 8052800:	e044      	b.n	805288c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8052802:	2300      	movs	r3, #0
 8052804:	613b      	str	r3, [r7, #16]
 8052806:	68fb      	ldr	r3, [r7, #12]
 8052808:	681b      	ldr	r3, [r3, #0]
 805280a:	695b      	ldr	r3, [r3, #20]
 805280c:	613b      	str	r3, [r7, #16]
 805280e:	68fb      	ldr	r3, [r7, #12]
 8052810:	681b      	ldr	r3, [r3, #0]
 8052812:	699b      	ldr	r3, [r3, #24]
 8052814:	613b      	str	r3, [r7, #16]
 8052816:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8052818:	68fb      	ldr	r3, [r7, #12]
 805281a:	681b      	ldr	r3, [r3, #0]
 805281c:	681a      	ldr	r2, [r3, #0]
 805281e:	68fb      	ldr	r3, [r7, #12]
 8052820:	681b      	ldr	r3, [r3, #0]
 8052822:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8052826:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8052828:	683b      	ldr	r3, [r7, #0]
 805282a:	9300      	str	r3, [sp, #0]
 805282c:	687b      	ldr	r3, [r7, #4]
 805282e:	2200      	movs	r2, #0
 8052830:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8052834:	68f8      	ldr	r0, [r7, #12]
 8052836:	f000 f9af 	bl	8052b98 <I2C_WaitOnFlagUntilTimeout>
 805283a:	4603      	mov	r3, r0
 805283c:	2b00      	cmp	r3, #0
 805283e:	d00d      	beq.n	805285c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8052840:	68fb      	ldr	r3, [r7, #12]
 8052842:	681b      	ldr	r3, [r3, #0]
 8052844:	681b      	ldr	r3, [r3, #0]
 8052846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 805284a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 805284e:	d103      	bne.n	8052858 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8052850:	68fb      	ldr	r3, [r7, #12]
 8052852:	f44f 7200 	mov.w	r2, #512	; 0x200
 8052856:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8052858:	2303      	movs	r3, #3
 805285a:	e017      	b.n	805288c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 805285c:	897b      	ldrh	r3, [r7, #10]
 805285e:	11db      	asrs	r3, r3, #7
 8052860:	b2db      	uxtb	r3, r3
 8052862:	f003 0306 	and.w	r3, r3, #6
 8052866:	b2db      	uxtb	r3, r3
 8052868:	f063 030e 	orn	r3, r3, #14
 805286c:	b2da      	uxtb	r2, r3
 805286e:	68fb      	ldr	r3, [r7, #12]
 8052870:	681b      	ldr	r3, [r3, #0]
 8052872:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8052874:	683b      	ldr	r3, [r7, #0]
 8052876:	687a      	ldr	r2, [r7, #4]
 8052878:	4907      	ldr	r1, [pc, #28]	; (8052898 <I2C_MasterRequestRead+0x198>)
 805287a:	68f8      	ldr	r0, [r7, #12]
 805287c:	f000 f9e3 	bl	8052c46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8052880:	4603      	mov	r3, r0
 8052882:	2b00      	cmp	r3, #0
 8052884:	d001      	beq.n	805288a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8052886:	2301      	movs	r3, #1
 8052888:	e000      	b.n	805288c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 805288a:	2300      	movs	r3, #0
}
 805288c:	4618      	mov	r0, r3
 805288e:	3718      	adds	r7, #24
 8052890:	46bd      	mov	sp, r7
 8052892:	bd80      	pop	{r7, pc}
 8052894:	00010008 	.word	0x00010008
 8052898:	00010002 	.word	0x00010002

0805289c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 805289c:	b580      	push	{r7, lr}
 805289e:	b088      	sub	sp, #32
 80528a0:	af02      	add	r7, sp, #8
 80528a2:	60f8      	str	r0, [r7, #12]
 80528a4:	4608      	mov	r0, r1
 80528a6:	4611      	mov	r1, r2
 80528a8:	461a      	mov	r2, r3
 80528aa:	4603      	mov	r3, r0
 80528ac:	817b      	strh	r3, [r7, #10]
 80528ae:	460b      	mov	r3, r1
 80528b0:	813b      	strh	r3, [r7, #8]
 80528b2:	4613      	mov	r3, r2
 80528b4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80528b6:	68fb      	ldr	r3, [r7, #12]
 80528b8:	681b      	ldr	r3, [r3, #0]
 80528ba:	681a      	ldr	r2, [r3, #0]
 80528bc:	68fb      	ldr	r3, [r7, #12]
 80528be:	681b      	ldr	r3, [r3, #0]
 80528c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80528c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80528c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80528c8:	9300      	str	r3, [sp, #0]
 80528ca:	6a3b      	ldr	r3, [r7, #32]
 80528cc:	2200      	movs	r2, #0
 80528ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80528d2:	68f8      	ldr	r0, [r7, #12]
 80528d4:	f000 f960 	bl	8052b98 <I2C_WaitOnFlagUntilTimeout>
 80528d8:	4603      	mov	r3, r0
 80528da:	2b00      	cmp	r3, #0
 80528dc:	d00d      	beq.n	80528fa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80528de:	68fb      	ldr	r3, [r7, #12]
 80528e0:	681b      	ldr	r3, [r3, #0]
 80528e2:	681b      	ldr	r3, [r3, #0]
 80528e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80528e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80528ec:	d103      	bne.n	80528f6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80528ee:	68fb      	ldr	r3, [r7, #12]
 80528f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80528f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80528f6:	2303      	movs	r3, #3
 80528f8:	e05f      	b.n	80529ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80528fa:	897b      	ldrh	r3, [r7, #10]
 80528fc:	b2db      	uxtb	r3, r3
 80528fe:	461a      	mov	r2, r3
 8052900:	68fb      	ldr	r3, [r7, #12]
 8052902:	681b      	ldr	r3, [r3, #0]
 8052904:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8052908:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 805290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 805290c:	6a3a      	ldr	r2, [r7, #32]
 805290e:	492d      	ldr	r1, [pc, #180]	; (80529c4 <I2C_RequestMemoryWrite+0x128>)
 8052910:	68f8      	ldr	r0, [r7, #12]
 8052912:	f000 f998 	bl	8052c46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8052916:	4603      	mov	r3, r0
 8052918:	2b00      	cmp	r3, #0
 805291a:	d001      	beq.n	8052920 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 805291c:	2301      	movs	r3, #1
 805291e:	e04c      	b.n	80529ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8052920:	2300      	movs	r3, #0
 8052922:	617b      	str	r3, [r7, #20]
 8052924:	68fb      	ldr	r3, [r7, #12]
 8052926:	681b      	ldr	r3, [r3, #0]
 8052928:	695b      	ldr	r3, [r3, #20]
 805292a:	617b      	str	r3, [r7, #20]
 805292c:	68fb      	ldr	r3, [r7, #12]
 805292e:	681b      	ldr	r3, [r3, #0]
 8052930:	699b      	ldr	r3, [r3, #24]
 8052932:	617b      	str	r3, [r7, #20]
 8052934:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8052936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8052938:	6a39      	ldr	r1, [r7, #32]
 805293a:	68f8      	ldr	r0, [r7, #12]
 805293c:	f000 fa02 	bl	8052d44 <I2C_WaitOnTXEFlagUntilTimeout>
 8052940:	4603      	mov	r3, r0
 8052942:	2b00      	cmp	r3, #0
 8052944:	d00d      	beq.n	8052962 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8052946:	68fb      	ldr	r3, [r7, #12]
 8052948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 805294a:	2b04      	cmp	r3, #4
 805294c:	d107      	bne.n	805295e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 805294e:	68fb      	ldr	r3, [r7, #12]
 8052950:	681b      	ldr	r3, [r3, #0]
 8052952:	681a      	ldr	r2, [r3, #0]
 8052954:	68fb      	ldr	r3, [r7, #12]
 8052956:	681b      	ldr	r3, [r3, #0]
 8052958:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 805295c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 805295e:	2301      	movs	r3, #1
 8052960:	e02b      	b.n	80529ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8052962:	88fb      	ldrh	r3, [r7, #6]
 8052964:	2b01      	cmp	r3, #1
 8052966:	d105      	bne.n	8052974 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8052968:	893b      	ldrh	r3, [r7, #8]
 805296a:	b2da      	uxtb	r2, r3
 805296c:	68fb      	ldr	r3, [r7, #12]
 805296e:	681b      	ldr	r3, [r3, #0]
 8052970:	611a      	str	r2, [r3, #16]
 8052972:	e021      	b.n	80529b8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8052974:	893b      	ldrh	r3, [r7, #8]
 8052976:	0a1b      	lsrs	r3, r3, #8
 8052978:	b29b      	uxth	r3, r3
 805297a:	b2da      	uxtb	r2, r3
 805297c:	68fb      	ldr	r3, [r7, #12]
 805297e:	681b      	ldr	r3, [r3, #0]
 8052980:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8052982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8052984:	6a39      	ldr	r1, [r7, #32]
 8052986:	68f8      	ldr	r0, [r7, #12]
 8052988:	f000 f9dc 	bl	8052d44 <I2C_WaitOnTXEFlagUntilTimeout>
 805298c:	4603      	mov	r3, r0
 805298e:	2b00      	cmp	r3, #0
 8052990:	d00d      	beq.n	80529ae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8052992:	68fb      	ldr	r3, [r7, #12]
 8052994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8052996:	2b04      	cmp	r3, #4
 8052998:	d107      	bne.n	80529aa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 805299a:	68fb      	ldr	r3, [r7, #12]
 805299c:	681b      	ldr	r3, [r3, #0]
 805299e:	681a      	ldr	r2, [r3, #0]
 80529a0:	68fb      	ldr	r3, [r7, #12]
 80529a2:	681b      	ldr	r3, [r3, #0]
 80529a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80529a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80529aa:	2301      	movs	r3, #1
 80529ac:	e005      	b.n	80529ba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80529ae:	893b      	ldrh	r3, [r7, #8]
 80529b0:	b2da      	uxtb	r2, r3
 80529b2:	68fb      	ldr	r3, [r7, #12]
 80529b4:	681b      	ldr	r3, [r3, #0]
 80529b6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80529b8:	2300      	movs	r3, #0
}
 80529ba:	4618      	mov	r0, r3
 80529bc:	3718      	adds	r7, #24
 80529be:	46bd      	mov	sp, r7
 80529c0:	bd80      	pop	{r7, pc}
 80529c2:	bf00      	nop
 80529c4:	00010002 	.word	0x00010002

080529c8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80529c8:	b580      	push	{r7, lr}
 80529ca:	b088      	sub	sp, #32
 80529cc:	af02      	add	r7, sp, #8
 80529ce:	60f8      	str	r0, [r7, #12]
 80529d0:	4608      	mov	r0, r1
 80529d2:	4611      	mov	r1, r2
 80529d4:	461a      	mov	r2, r3
 80529d6:	4603      	mov	r3, r0
 80529d8:	817b      	strh	r3, [r7, #10]
 80529da:	460b      	mov	r3, r1
 80529dc:	813b      	strh	r3, [r7, #8]
 80529de:	4613      	mov	r3, r2
 80529e0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80529e2:	68fb      	ldr	r3, [r7, #12]
 80529e4:	681b      	ldr	r3, [r3, #0]
 80529e6:	681a      	ldr	r2, [r3, #0]
 80529e8:	68fb      	ldr	r3, [r7, #12]
 80529ea:	681b      	ldr	r3, [r3, #0]
 80529ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80529f0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80529f2:	68fb      	ldr	r3, [r7, #12]
 80529f4:	681b      	ldr	r3, [r3, #0]
 80529f6:	681a      	ldr	r2, [r3, #0]
 80529f8:	68fb      	ldr	r3, [r7, #12]
 80529fa:	681b      	ldr	r3, [r3, #0]
 80529fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8052a00:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8052a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8052a04:	9300      	str	r3, [sp, #0]
 8052a06:	6a3b      	ldr	r3, [r7, #32]
 8052a08:	2200      	movs	r2, #0
 8052a0a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8052a0e:	68f8      	ldr	r0, [r7, #12]
 8052a10:	f000 f8c2 	bl	8052b98 <I2C_WaitOnFlagUntilTimeout>
 8052a14:	4603      	mov	r3, r0
 8052a16:	2b00      	cmp	r3, #0
 8052a18:	d00d      	beq.n	8052a36 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8052a1a:	68fb      	ldr	r3, [r7, #12]
 8052a1c:	681b      	ldr	r3, [r3, #0]
 8052a1e:	681b      	ldr	r3, [r3, #0]
 8052a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8052a24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8052a28:	d103      	bne.n	8052a32 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8052a2a:	68fb      	ldr	r3, [r7, #12]
 8052a2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8052a30:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8052a32:	2303      	movs	r3, #3
 8052a34:	e0aa      	b.n	8052b8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8052a36:	897b      	ldrh	r3, [r7, #10]
 8052a38:	b2db      	uxtb	r3, r3
 8052a3a:	461a      	mov	r2, r3
 8052a3c:	68fb      	ldr	r3, [r7, #12]
 8052a3e:	681b      	ldr	r3, [r3, #0]
 8052a40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8052a44:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8052a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8052a48:	6a3a      	ldr	r2, [r7, #32]
 8052a4a:	4952      	ldr	r1, [pc, #328]	; (8052b94 <I2C_RequestMemoryRead+0x1cc>)
 8052a4c:	68f8      	ldr	r0, [r7, #12]
 8052a4e:	f000 f8fa 	bl	8052c46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8052a52:	4603      	mov	r3, r0
 8052a54:	2b00      	cmp	r3, #0
 8052a56:	d001      	beq.n	8052a5c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8052a58:	2301      	movs	r3, #1
 8052a5a:	e097      	b.n	8052b8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8052a5c:	2300      	movs	r3, #0
 8052a5e:	617b      	str	r3, [r7, #20]
 8052a60:	68fb      	ldr	r3, [r7, #12]
 8052a62:	681b      	ldr	r3, [r3, #0]
 8052a64:	695b      	ldr	r3, [r3, #20]
 8052a66:	617b      	str	r3, [r7, #20]
 8052a68:	68fb      	ldr	r3, [r7, #12]
 8052a6a:	681b      	ldr	r3, [r3, #0]
 8052a6c:	699b      	ldr	r3, [r3, #24]
 8052a6e:	617b      	str	r3, [r7, #20]
 8052a70:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8052a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8052a74:	6a39      	ldr	r1, [r7, #32]
 8052a76:	68f8      	ldr	r0, [r7, #12]
 8052a78:	f000 f964 	bl	8052d44 <I2C_WaitOnTXEFlagUntilTimeout>
 8052a7c:	4603      	mov	r3, r0
 8052a7e:	2b00      	cmp	r3, #0
 8052a80:	d00d      	beq.n	8052a9e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8052a82:	68fb      	ldr	r3, [r7, #12]
 8052a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8052a86:	2b04      	cmp	r3, #4
 8052a88:	d107      	bne.n	8052a9a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8052a8a:	68fb      	ldr	r3, [r7, #12]
 8052a8c:	681b      	ldr	r3, [r3, #0]
 8052a8e:	681a      	ldr	r2, [r3, #0]
 8052a90:	68fb      	ldr	r3, [r7, #12]
 8052a92:	681b      	ldr	r3, [r3, #0]
 8052a94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8052a98:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8052a9a:	2301      	movs	r3, #1
 8052a9c:	e076      	b.n	8052b8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8052a9e:	88fb      	ldrh	r3, [r7, #6]
 8052aa0:	2b01      	cmp	r3, #1
 8052aa2:	d105      	bne.n	8052ab0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8052aa4:	893b      	ldrh	r3, [r7, #8]
 8052aa6:	b2da      	uxtb	r2, r3
 8052aa8:	68fb      	ldr	r3, [r7, #12]
 8052aaa:	681b      	ldr	r3, [r3, #0]
 8052aac:	611a      	str	r2, [r3, #16]
 8052aae:	e021      	b.n	8052af4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8052ab0:	893b      	ldrh	r3, [r7, #8]
 8052ab2:	0a1b      	lsrs	r3, r3, #8
 8052ab4:	b29b      	uxth	r3, r3
 8052ab6:	b2da      	uxtb	r2, r3
 8052ab8:	68fb      	ldr	r3, [r7, #12]
 8052aba:	681b      	ldr	r3, [r3, #0]
 8052abc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8052abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8052ac0:	6a39      	ldr	r1, [r7, #32]
 8052ac2:	68f8      	ldr	r0, [r7, #12]
 8052ac4:	f000 f93e 	bl	8052d44 <I2C_WaitOnTXEFlagUntilTimeout>
 8052ac8:	4603      	mov	r3, r0
 8052aca:	2b00      	cmp	r3, #0
 8052acc:	d00d      	beq.n	8052aea <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8052ace:	68fb      	ldr	r3, [r7, #12]
 8052ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8052ad2:	2b04      	cmp	r3, #4
 8052ad4:	d107      	bne.n	8052ae6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8052ad6:	68fb      	ldr	r3, [r7, #12]
 8052ad8:	681b      	ldr	r3, [r3, #0]
 8052ada:	681a      	ldr	r2, [r3, #0]
 8052adc:	68fb      	ldr	r3, [r7, #12]
 8052ade:	681b      	ldr	r3, [r3, #0]
 8052ae0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8052ae4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8052ae6:	2301      	movs	r3, #1
 8052ae8:	e050      	b.n	8052b8c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8052aea:	893b      	ldrh	r3, [r7, #8]
 8052aec:	b2da      	uxtb	r2, r3
 8052aee:	68fb      	ldr	r3, [r7, #12]
 8052af0:	681b      	ldr	r3, [r3, #0]
 8052af2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8052af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8052af6:	6a39      	ldr	r1, [r7, #32]
 8052af8:	68f8      	ldr	r0, [r7, #12]
 8052afa:	f000 f923 	bl	8052d44 <I2C_WaitOnTXEFlagUntilTimeout>
 8052afe:	4603      	mov	r3, r0
 8052b00:	2b00      	cmp	r3, #0
 8052b02:	d00d      	beq.n	8052b20 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8052b04:	68fb      	ldr	r3, [r7, #12]
 8052b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8052b08:	2b04      	cmp	r3, #4
 8052b0a:	d107      	bne.n	8052b1c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8052b0c:	68fb      	ldr	r3, [r7, #12]
 8052b0e:	681b      	ldr	r3, [r3, #0]
 8052b10:	681a      	ldr	r2, [r3, #0]
 8052b12:	68fb      	ldr	r3, [r7, #12]
 8052b14:	681b      	ldr	r3, [r3, #0]
 8052b16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8052b1a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8052b1c:	2301      	movs	r3, #1
 8052b1e:	e035      	b.n	8052b8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8052b20:	68fb      	ldr	r3, [r7, #12]
 8052b22:	681b      	ldr	r3, [r3, #0]
 8052b24:	681a      	ldr	r2, [r3, #0]
 8052b26:	68fb      	ldr	r3, [r7, #12]
 8052b28:	681b      	ldr	r3, [r3, #0]
 8052b2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8052b2e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8052b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8052b32:	9300      	str	r3, [sp, #0]
 8052b34:	6a3b      	ldr	r3, [r7, #32]
 8052b36:	2200      	movs	r2, #0
 8052b38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8052b3c:	68f8      	ldr	r0, [r7, #12]
 8052b3e:	f000 f82b 	bl	8052b98 <I2C_WaitOnFlagUntilTimeout>
 8052b42:	4603      	mov	r3, r0
 8052b44:	2b00      	cmp	r3, #0
 8052b46:	d00d      	beq.n	8052b64 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8052b48:	68fb      	ldr	r3, [r7, #12]
 8052b4a:	681b      	ldr	r3, [r3, #0]
 8052b4c:	681b      	ldr	r3, [r3, #0]
 8052b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8052b52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8052b56:	d103      	bne.n	8052b60 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8052b58:	68fb      	ldr	r3, [r7, #12]
 8052b5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8052b5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8052b60:	2303      	movs	r3, #3
 8052b62:	e013      	b.n	8052b8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8052b64:	897b      	ldrh	r3, [r7, #10]
 8052b66:	b2db      	uxtb	r3, r3
 8052b68:	f043 0301 	orr.w	r3, r3, #1
 8052b6c:	b2da      	uxtb	r2, r3
 8052b6e:	68fb      	ldr	r3, [r7, #12]
 8052b70:	681b      	ldr	r3, [r3, #0]
 8052b72:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8052b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8052b76:	6a3a      	ldr	r2, [r7, #32]
 8052b78:	4906      	ldr	r1, [pc, #24]	; (8052b94 <I2C_RequestMemoryRead+0x1cc>)
 8052b7a:	68f8      	ldr	r0, [r7, #12]
 8052b7c:	f000 f863 	bl	8052c46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8052b80:	4603      	mov	r3, r0
 8052b82:	2b00      	cmp	r3, #0
 8052b84:	d001      	beq.n	8052b8a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8052b86:	2301      	movs	r3, #1
 8052b88:	e000      	b.n	8052b8c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8052b8a:	2300      	movs	r3, #0
}
 8052b8c:	4618      	mov	r0, r3
 8052b8e:	3718      	adds	r7, #24
 8052b90:	46bd      	mov	sp, r7
 8052b92:	bd80      	pop	{r7, pc}
 8052b94:	00010002 	.word	0x00010002

08052b98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8052b98:	b580      	push	{r7, lr}
 8052b9a:	b084      	sub	sp, #16
 8052b9c:	af00      	add	r7, sp, #0
 8052b9e:	60f8      	str	r0, [r7, #12]
 8052ba0:	60b9      	str	r1, [r7, #8]
 8052ba2:	603b      	str	r3, [r7, #0]
 8052ba4:	4613      	mov	r3, r2
 8052ba6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8052ba8:	e025      	b.n	8052bf6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8052baa:	683b      	ldr	r3, [r7, #0]
 8052bac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8052bb0:	d021      	beq.n	8052bf6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8052bb2:	f7fc fd3f 	bl	804f634 <HAL_GetTick>
 8052bb6:	4602      	mov	r2, r0
 8052bb8:	69bb      	ldr	r3, [r7, #24]
 8052bba:	1ad3      	subs	r3, r2, r3
 8052bbc:	683a      	ldr	r2, [r7, #0]
 8052bbe:	429a      	cmp	r2, r3
 8052bc0:	d302      	bcc.n	8052bc8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8052bc2:	683b      	ldr	r3, [r7, #0]
 8052bc4:	2b00      	cmp	r3, #0
 8052bc6:	d116      	bne.n	8052bf6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8052bc8:	68fb      	ldr	r3, [r7, #12]
 8052bca:	2200      	movs	r2, #0
 8052bcc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8052bce:	68fb      	ldr	r3, [r7, #12]
 8052bd0:	2220      	movs	r2, #32
 8052bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8052bd6:	68fb      	ldr	r3, [r7, #12]
 8052bd8:	2200      	movs	r2, #0
 8052bda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8052bde:	68fb      	ldr	r3, [r7, #12]
 8052be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8052be2:	f043 0220 	orr.w	r2, r3, #32
 8052be6:	68fb      	ldr	r3, [r7, #12]
 8052be8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8052bea:	68fb      	ldr	r3, [r7, #12]
 8052bec:	2200      	movs	r2, #0
 8052bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8052bf2:	2301      	movs	r3, #1
 8052bf4:	e023      	b.n	8052c3e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8052bf6:	68bb      	ldr	r3, [r7, #8]
 8052bf8:	0c1b      	lsrs	r3, r3, #16
 8052bfa:	b2db      	uxtb	r3, r3
 8052bfc:	2b01      	cmp	r3, #1
 8052bfe:	d10d      	bne.n	8052c1c <I2C_WaitOnFlagUntilTimeout+0x84>
 8052c00:	68fb      	ldr	r3, [r7, #12]
 8052c02:	681b      	ldr	r3, [r3, #0]
 8052c04:	695b      	ldr	r3, [r3, #20]
 8052c06:	43da      	mvns	r2, r3
 8052c08:	68bb      	ldr	r3, [r7, #8]
 8052c0a:	4013      	ands	r3, r2
 8052c0c:	b29b      	uxth	r3, r3
 8052c0e:	2b00      	cmp	r3, #0
 8052c10:	bf0c      	ite	eq
 8052c12:	2301      	moveq	r3, #1
 8052c14:	2300      	movne	r3, #0
 8052c16:	b2db      	uxtb	r3, r3
 8052c18:	461a      	mov	r2, r3
 8052c1a:	e00c      	b.n	8052c36 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8052c1c:	68fb      	ldr	r3, [r7, #12]
 8052c1e:	681b      	ldr	r3, [r3, #0]
 8052c20:	699b      	ldr	r3, [r3, #24]
 8052c22:	43da      	mvns	r2, r3
 8052c24:	68bb      	ldr	r3, [r7, #8]
 8052c26:	4013      	ands	r3, r2
 8052c28:	b29b      	uxth	r3, r3
 8052c2a:	2b00      	cmp	r3, #0
 8052c2c:	bf0c      	ite	eq
 8052c2e:	2301      	moveq	r3, #1
 8052c30:	2300      	movne	r3, #0
 8052c32:	b2db      	uxtb	r3, r3
 8052c34:	461a      	mov	r2, r3
 8052c36:	79fb      	ldrb	r3, [r7, #7]
 8052c38:	429a      	cmp	r2, r3
 8052c3a:	d0b6      	beq.n	8052baa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8052c3c:	2300      	movs	r3, #0
}
 8052c3e:	4618      	mov	r0, r3
 8052c40:	3710      	adds	r7, #16
 8052c42:	46bd      	mov	sp, r7
 8052c44:	bd80      	pop	{r7, pc}

08052c46 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8052c46:	b580      	push	{r7, lr}
 8052c48:	b084      	sub	sp, #16
 8052c4a:	af00      	add	r7, sp, #0
 8052c4c:	60f8      	str	r0, [r7, #12]
 8052c4e:	60b9      	str	r1, [r7, #8]
 8052c50:	607a      	str	r2, [r7, #4]
 8052c52:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8052c54:	e051      	b.n	8052cfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8052c56:	68fb      	ldr	r3, [r7, #12]
 8052c58:	681b      	ldr	r3, [r3, #0]
 8052c5a:	695b      	ldr	r3, [r3, #20]
 8052c5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8052c60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8052c64:	d123      	bne.n	8052cae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8052c66:	68fb      	ldr	r3, [r7, #12]
 8052c68:	681b      	ldr	r3, [r3, #0]
 8052c6a:	681a      	ldr	r2, [r3, #0]
 8052c6c:	68fb      	ldr	r3, [r7, #12]
 8052c6e:	681b      	ldr	r3, [r3, #0]
 8052c70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8052c74:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8052c76:	68fb      	ldr	r3, [r7, #12]
 8052c78:	681b      	ldr	r3, [r3, #0]
 8052c7a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8052c7e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8052c80:	68fb      	ldr	r3, [r7, #12]
 8052c82:	2200      	movs	r2, #0
 8052c84:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8052c86:	68fb      	ldr	r3, [r7, #12]
 8052c88:	2220      	movs	r2, #32
 8052c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8052c8e:	68fb      	ldr	r3, [r7, #12]
 8052c90:	2200      	movs	r2, #0
 8052c92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8052c96:	68fb      	ldr	r3, [r7, #12]
 8052c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8052c9a:	f043 0204 	orr.w	r2, r3, #4
 8052c9e:	68fb      	ldr	r3, [r7, #12]
 8052ca0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8052ca2:	68fb      	ldr	r3, [r7, #12]
 8052ca4:	2200      	movs	r2, #0
 8052ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8052caa:	2301      	movs	r3, #1
 8052cac:	e046      	b.n	8052d3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8052cae:	687b      	ldr	r3, [r7, #4]
 8052cb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8052cb4:	d021      	beq.n	8052cfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8052cb6:	f7fc fcbd 	bl	804f634 <HAL_GetTick>
 8052cba:	4602      	mov	r2, r0
 8052cbc:	683b      	ldr	r3, [r7, #0]
 8052cbe:	1ad3      	subs	r3, r2, r3
 8052cc0:	687a      	ldr	r2, [r7, #4]
 8052cc2:	429a      	cmp	r2, r3
 8052cc4:	d302      	bcc.n	8052ccc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8052cc6:	687b      	ldr	r3, [r7, #4]
 8052cc8:	2b00      	cmp	r3, #0
 8052cca:	d116      	bne.n	8052cfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8052ccc:	68fb      	ldr	r3, [r7, #12]
 8052cce:	2200      	movs	r2, #0
 8052cd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8052cd2:	68fb      	ldr	r3, [r7, #12]
 8052cd4:	2220      	movs	r2, #32
 8052cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8052cda:	68fb      	ldr	r3, [r7, #12]
 8052cdc:	2200      	movs	r2, #0
 8052cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8052ce2:	68fb      	ldr	r3, [r7, #12]
 8052ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8052ce6:	f043 0220 	orr.w	r2, r3, #32
 8052cea:	68fb      	ldr	r3, [r7, #12]
 8052cec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8052cee:	68fb      	ldr	r3, [r7, #12]
 8052cf0:	2200      	movs	r2, #0
 8052cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8052cf6:	2301      	movs	r3, #1
 8052cf8:	e020      	b.n	8052d3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8052cfa:	68bb      	ldr	r3, [r7, #8]
 8052cfc:	0c1b      	lsrs	r3, r3, #16
 8052cfe:	b2db      	uxtb	r3, r3
 8052d00:	2b01      	cmp	r3, #1
 8052d02:	d10c      	bne.n	8052d1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8052d04:	68fb      	ldr	r3, [r7, #12]
 8052d06:	681b      	ldr	r3, [r3, #0]
 8052d08:	695b      	ldr	r3, [r3, #20]
 8052d0a:	43da      	mvns	r2, r3
 8052d0c:	68bb      	ldr	r3, [r7, #8]
 8052d0e:	4013      	ands	r3, r2
 8052d10:	b29b      	uxth	r3, r3
 8052d12:	2b00      	cmp	r3, #0
 8052d14:	bf14      	ite	ne
 8052d16:	2301      	movne	r3, #1
 8052d18:	2300      	moveq	r3, #0
 8052d1a:	b2db      	uxtb	r3, r3
 8052d1c:	e00b      	b.n	8052d36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8052d1e:	68fb      	ldr	r3, [r7, #12]
 8052d20:	681b      	ldr	r3, [r3, #0]
 8052d22:	699b      	ldr	r3, [r3, #24]
 8052d24:	43da      	mvns	r2, r3
 8052d26:	68bb      	ldr	r3, [r7, #8]
 8052d28:	4013      	ands	r3, r2
 8052d2a:	b29b      	uxth	r3, r3
 8052d2c:	2b00      	cmp	r3, #0
 8052d2e:	bf14      	ite	ne
 8052d30:	2301      	movne	r3, #1
 8052d32:	2300      	moveq	r3, #0
 8052d34:	b2db      	uxtb	r3, r3
 8052d36:	2b00      	cmp	r3, #0
 8052d38:	d18d      	bne.n	8052c56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8052d3a:	2300      	movs	r3, #0
}
 8052d3c:	4618      	mov	r0, r3
 8052d3e:	3710      	adds	r7, #16
 8052d40:	46bd      	mov	sp, r7
 8052d42:	bd80      	pop	{r7, pc}

08052d44 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8052d44:	b580      	push	{r7, lr}
 8052d46:	b084      	sub	sp, #16
 8052d48:	af00      	add	r7, sp, #0
 8052d4a:	60f8      	str	r0, [r7, #12]
 8052d4c:	60b9      	str	r1, [r7, #8]
 8052d4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8052d50:	e02d      	b.n	8052dae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8052d52:	68f8      	ldr	r0, [r7, #12]
 8052d54:	f000 f8ce 	bl	8052ef4 <I2C_IsAcknowledgeFailed>
 8052d58:	4603      	mov	r3, r0
 8052d5a:	2b00      	cmp	r3, #0
 8052d5c:	d001      	beq.n	8052d62 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8052d5e:	2301      	movs	r3, #1
 8052d60:	e02d      	b.n	8052dbe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8052d62:	68bb      	ldr	r3, [r7, #8]
 8052d64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8052d68:	d021      	beq.n	8052dae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8052d6a:	f7fc fc63 	bl	804f634 <HAL_GetTick>
 8052d6e:	4602      	mov	r2, r0
 8052d70:	687b      	ldr	r3, [r7, #4]
 8052d72:	1ad3      	subs	r3, r2, r3
 8052d74:	68ba      	ldr	r2, [r7, #8]
 8052d76:	429a      	cmp	r2, r3
 8052d78:	d302      	bcc.n	8052d80 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8052d7a:	68bb      	ldr	r3, [r7, #8]
 8052d7c:	2b00      	cmp	r3, #0
 8052d7e:	d116      	bne.n	8052dae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8052d80:	68fb      	ldr	r3, [r7, #12]
 8052d82:	2200      	movs	r2, #0
 8052d84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8052d86:	68fb      	ldr	r3, [r7, #12]
 8052d88:	2220      	movs	r2, #32
 8052d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8052d8e:	68fb      	ldr	r3, [r7, #12]
 8052d90:	2200      	movs	r2, #0
 8052d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8052d96:	68fb      	ldr	r3, [r7, #12]
 8052d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8052d9a:	f043 0220 	orr.w	r2, r3, #32
 8052d9e:	68fb      	ldr	r3, [r7, #12]
 8052da0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8052da2:	68fb      	ldr	r3, [r7, #12]
 8052da4:	2200      	movs	r2, #0
 8052da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8052daa:	2301      	movs	r3, #1
 8052dac:	e007      	b.n	8052dbe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8052dae:	68fb      	ldr	r3, [r7, #12]
 8052db0:	681b      	ldr	r3, [r3, #0]
 8052db2:	695b      	ldr	r3, [r3, #20]
 8052db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8052db8:	2b80      	cmp	r3, #128	; 0x80
 8052dba:	d1ca      	bne.n	8052d52 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8052dbc:	2300      	movs	r3, #0
}
 8052dbe:	4618      	mov	r0, r3
 8052dc0:	3710      	adds	r7, #16
 8052dc2:	46bd      	mov	sp, r7
 8052dc4:	bd80      	pop	{r7, pc}

08052dc6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8052dc6:	b580      	push	{r7, lr}
 8052dc8:	b084      	sub	sp, #16
 8052dca:	af00      	add	r7, sp, #0
 8052dcc:	60f8      	str	r0, [r7, #12]
 8052dce:	60b9      	str	r1, [r7, #8]
 8052dd0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8052dd2:	e02d      	b.n	8052e30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8052dd4:	68f8      	ldr	r0, [r7, #12]
 8052dd6:	f000 f88d 	bl	8052ef4 <I2C_IsAcknowledgeFailed>
 8052dda:	4603      	mov	r3, r0
 8052ddc:	2b00      	cmp	r3, #0
 8052dde:	d001      	beq.n	8052de4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8052de0:	2301      	movs	r3, #1
 8052de2:	e02d      	b.n	8052e40 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8052de4:	68bb      	ldr	r3, [r7, #8]
 8052de6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8052dea:	d021      	beq.n	8052e30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8052dec:	f7fc fc22 	bl	804f634 <HAL_GetTick>
 8052df0:	4602      	mov	r2, r0
 8052df2:	687b      	ldr	r3, [r7, #4]
 8052df4:	1ad3      	subs	r3, r2, r3
 8052df6:	68ba      	ldr	r2, [r7, #8]
 8052df8:	429a      	cmp	r2, r3
 8052dfa:	d302      	bcc.n	8052e02 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8052dfc:	68bb      	ldr	r3, [r7, #8]
 8052dfe:	2b00      	cmp	r3, #0
 8052e00:	d116      	bne.n	8052e30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8052e02:	68fb      	ldr	r3, [r7, #12]
 8052e04:	2200      	movs	r2, #0
 8052e06:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8052e08:	68fb      	ldr	r3, [r7, #12]
 8052e0a:	2220      	movs	r2, #32
 8052e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8052e10:	68fb      	ldr	r3, [r7, #12]
 8052e12:	2200      	movs	r2, #0
 8052e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8052e18:	68fb      	ldr	r3, [r7, #12]
 8052e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8052e1c:	f043 0220 	orr.w	r2, r3, #32
 8052e20:	68fb      	ldr	r3, [r7, #12]
 8052e22:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8052e24:	68fb      	ldr	r3, [r7, #12]
 8052e26:	2200      	movs	r2, #0
 8052e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8052e2c:	2301      	movs	r3, #1
 8052e2e:	e007      	b.n	8052e40 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8052e30:	68fb      	ldr	r3, [r7, #12]
 8052e32:	681b      	ldr	r3, [r3, #0]
 8052e34:	695b      	ldr	r3, [r3, #20]
 8052e36:	f003 0304 	and.w	r3, r3, #4
 8052e3a:	2b04      	cmp	r3, #4
 8052e3c:	d1ca      	bne.n	8052dd4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8052e3e:	2300      	movs	r3, #0
}
 8052e40:	4618      	mov	r0, r3
 8052e42:	3710      	adds	r7, #16
 8052e44:	46bd      	mov	sp, r7
 8052e46:	bd80      	pop	{r7, pc}

08052e48 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8052e48:	b580      	push	{r7, lr}
 8052e4a:	b084      	sub	sp, #16
 8052e4c:	af00      	add	r7, sp, #0
 8052e4e:	60f8      	str	r0, [r7, #12]
 8052e50:	60b9      	str	r1, [r7, #8]
 8052e52:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8052e54:	e042      	b.n	8052edc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8052e56:	68fb      	ldr	r3, [r7, #12]
 8052e58:	681b      	ldr	r3, [r3, #0]
 8052e5a:	695b      	ldr	r3, [r3, #20]
 8052e5c:	f003 0310 	and.w	r3, r3, #16
 8052e60:	2b10      	cmp	r3, #16
 8052e62:	d119      	bne.n	8052e98 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8052e64:	68fb      	ldr	r3, [r7, #12]
 8052e66:	681b      	ldr	r3, [r3, #0]
 8052e68:	f06f 0210 	mvn.w	r2, #16
 8052e6c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8052e6e:	68fb      	ldr	r3, [r7, #12]
 8052e70:	2200      	movs	r2, #0
 8052e72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8052e74:	68fb      	ldr	r3, [r7, #12]
 8052e76:	2220      	movs	r2, #32
 8052e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8052e7c:	68fb      	ldr	r3, [r7, #12]
 8052e7e:	2200      	movs	r2, #0
 8052e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8052e84:	68fb      	ldr	r3, [r7, #12]
 8052e86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8052e88:	68fb      	ldr	r3, [r7, #12]
 8052e8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8052e8c:	68fb      	ldr	r3, [r7, #12]
 8052e8e:	2200      	movs	r2, #0
 8052e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8052e94:	2301      	movs	r3, #1
 8052e96:	e029      	b.n	8052eec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8052e98:	f7fc fbcc 	bl	804f634 <HAL_GetTick>
 8052e9c:	4602      	mov	r2, r0
 8052e9e:	687b      	ldr	r3, [r7, #4]
 8052ea0:	1ad3      	subs	r3, r2, r3
 8052ea2:	68ba      	ldr	r2, [r7, #8]
 8052ea4:	429a      	cmp	r2, r3
 8052ea6:	d302      	bcc.n	8052eae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8052ea8:	68bb      	ldr	r3, [r7, #8]
 8052eaa:	2b00      	cmp	r3, #0
 8052eac:	d116      	bne.n	8052edc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8052eae:	68fb      	ldr	r3, [r7, #12]
 8052eb0:	2200      	movs	r2, #0
 8052eb2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8052eb4:	68fb      	ldr	r3, [r7, #12]
 8052eb6:	2220      	movs	r2, #32
 8052eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8052ebc:	68fb      	ldr	r3, [r7, #12]
 8052ebe:	2200      	movs	r2, #0
 8052ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8052ec4:	68fb      	ldr	r3, [r7, #12]
 8052ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8052ec8:	f043 0220 	orr.w	r2, r3, #32
 8052ecc:	68fb      	ldr	r3, [r7, #12]
 8052ece:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8052ed0:	68fb      	ldr	r3, [r7, #12]
 8052ed2:	2200      	movs	r2, #0
 8052ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8052ed8:	2301      	movs	r3, #1
 8052eda:	e007      	b.n	8052eec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8052edc:	68fb      	ldr	r3, [r7, #12]
 8052ede:	681b      	ldr	r3, [r3, #0]
 8052ee0:	695b      	ldr	r3, [r3, #20]
 8052ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8052ee6:	2b40      	cmp	r3, #64	; 0x40
 8052ee8:	d1b5      	bne.n	8052e56 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8052eea:	2300      	movs	r3, #0
}
 8052eec:	4618      	mov	r0, r3
 8052eee:	3710      	adds	r7, #16
 8052ef0:	46bd      	mov	sp, r7
 8052ef2:	bd80      	pop	{r7, pc}

08052ef4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8052ef4:	b480      	push	{r7}
 8052ef6:	b083      	sub	sp, #12
 8052ef8:	af00      	add	r7, sp, #0
 8052efa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8052efc:	687b      	ldr	r3, [r7, #4]
 8052efe:	681b      	ldr	r3, [r3, #0]
 8052f00:	695b      	ldr	r3, [r3, #20]
 8052f02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8052f06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8052f0a:	d11b      	bne.n	8052f44 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8052f0c:	687b      	ldr	r3, [r7, #4]
 8052f0e:	681b      	ldr	r3, [r3, #0]
 8052f10:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8052f14:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8052f16:	687b      	ldr	r3, [r7, #4]
 8052f18:	2200      	movs	r2, #0
 8052f1a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8052f1c:	687b      	ldr	r3, [r7, #4]
 8052f1e:	2220      	movs	r2, #32
 8052f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8052f24:	687b      	ldr	r3, [r7, #4]
 8052f26:	2200      	movs	r2, #0
 8052f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8052f2c:	687b      	ldr	r3, [r7, #4]
 8052f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8052f30:	f043 0204 	orr.w	r2, r3, #4
 8052f34:	687b      	ldr	r3, [r7, #4]
 8052f36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8052f38:	687b      	ldr	r3, [r7, #4]
 8052f3a:	2200      	movs	r2, #0
 8052f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8052f40:	2301      	movs	r3, #1
 8052f42:	e000      	b.n	8052f46 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8052f44:	2300      	movs	r3, #0
}
 8052f46:	4618      	mov	r0, r3
 8052f48:	370c      	adds	r7, #12
 8052f4a:	46bd      	mov	sp, r7
 8052f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8052f50:	4770      	bx	lr
	...

08052f54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8052f54:	b580      	push	{r7, lr}
 8052f56:	b086      	sub	sp, #24
 8052f58:	af00      	add	r7, sp, #0
 8052f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8052f5c:	687b      	ldr	r3, [r7, #4]
 8052f5e:	2b00      	cmp	r3, #0
 8052f60:	d101      	bne.n	8052f66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8052f62:	2301      	movs	r3, #1
 8052f64:	e264      	b.n	8053430 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8052f66:	687b      	ldr	r3, [r7, #4]
 8052f68:	681b      	ldr	r3, [r3, #0]
 8052f6a:	f003 0301 	and.w	r3, r3, #1
 8052f6e:	2b00      	cmp	r3, #0
 8052f70:	d075      	beq.n	805305e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8052f72:	4ba3      	ldr	r3, [pc, #652]	; (8053200 <HAL_RCC_OscConfig+0x2ac>)
 8052f74:	689b      	ldr	r3, [r3, #8]
 8052f76:	f003 030c 	and.w	r3, r3, #12
 8052f7a:	2b04      	cmp	r3, #4
 8052f7c:	d00c      	beq.n	8052f98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8052f7e:	4ba0      	ldr	r3, [pc, #640]	; (8053200 <HAL_RCC_OscConfig+0x2ac>)
 8052f80:	689b      	ldr	r3, [r3, #8]
 8052f82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8052f86:	2b08      	cmp	r3, #8
 8052f88:	d112      	bne.n	8052fb0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8052f8a:	4b9d      	ldr	r3, [pc, #628]	; (8053200 <HAL_RCC_OscConfig+0x2ac>)
 8052f8c:	685b      	ldr	r3, [r3, #4]
 8052f8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8052f92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8052f96:	d10b      	bne.n	8052fb0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8052f98:	4b99      	ldr	r3, [pc, #612]	; (8053200 <HAL_RCC_OscConfig+0x2ac>)
 8052f9a:	681b      	ldr	r3, [r3, #0]
 8052f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8052fa0:	2b00      	cmp	r3, #0
 8052fa2:	d05b      	beq.n	805305c <HAL_RCC_OscConfig+0x108>
 8052fa4:	687b      	ldr	r3, [r7, #4]
 8052fa6:	685b      	ldr	r3, [r3, #4]
 8052fa8:	2b00      	cmp	r3, #0
 8052faa:	d157      	bne.n	805305c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8052fac:	2301      	movs	r3, #1
 8052fae:	e23f      	b.n	8053430 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8052fb0:	687b      	ldr	r3, [r7, #4]
 8052fb2:	685b      	ldr	r3, [r3, #4]
 8052fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8052fb8:	d106      	bne.n	8052fc8 <HAL_RCC_OscConfig+0x74>
 8052fba:	4b91      	ldr	r3, [pc, #580]	; (8053200 <HAL_RCC_OscConfig+0x2ac>)
 8052fbc:	681b      	ldr	r3, [r3, #0]
 8052fbe:	4a90      	ldr	r2, [pc, #576]	; (8053200 <HAL_RCC_OscConfig+0x2ac>)
 8052fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8052fc4:	6013      	str	r3, [r2, #0]
 8052fc6:	e01d      	b.n	8053004 <HAL_RCC_OscConfig+0xb0>
 8052fc8:	687b      	ldr	r3, [r7, #4]
 8052fca:	685b      	ldr	r3, [r3, #4]
 8052fcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8052fd0:	d10c      	bne.n	8052fec <HAL_RCC_OscConfig+0x98>
 8052fd2:	4b8b      	ldr	r3, [pc, #556]	; (8053200 <HAL_RCC_OscConfig+0x2ac>)
 8052fd4:	681b      	ldr	r3, [r3, #0]
 8052fd6:	4a8a      	ldr	r2, [pc, #552]	; (8053200 <HAL_RCC_OscConfig+0x2ac>)
 8052fd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8052fdc:	6013      	str	r3, [r2, #0]
 8052fde:	4b88      	ldr	r3, [pc, #544]	; (8053200 <HAL_RCC_OscConfig+0x2ac>)
 8052fe0:	681b      	ldr	r3, [r3, #0]
 8052fe2:	4a87      	ldr	r2, [pc, #540]	; (8053200 <HAL_RCC_OscConfig+0x2ac>)
 8052fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8052fe8:	6013      	str	r3, [r2, #0]
 8052fea:	e00b      	b.n	8053004 <HAL_RCC_OscConfig+0xb0>
 8052fec:	4b84      	ldr	r3, [pc, #528]	; (8053200 <HAL_RCC_OscConfig+0x2ac>)
 8052fee:	681b      	ldr	r3, [r3, #0]
 8052ff0:	4a83      	ldr	r2, [pc, #524]	; (8053200 <HAL_RCC_OscConfig+0x2ac>)
 8052ff2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8052ff6:	6013      	str	r3, [r2, #0]
 8052ff8:	4b81      	ldr	r3, [pc, #516]	; (8053200 <HAL_RCC_OscConfig+0x2ac>)
 8052ffa:	681b      	ldr	r3, [r3, #0]
 8052ffc:	4a80      	ldr	r2, [pc, #512]	; (8053200 <HAL_RCC_OscConfig+0x2ac>)
 8052ffe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8053002:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8053004:	687b      	ldr	r3, [r7, #4]
 8053006:	685b      	ldr	r3, [r3, #4]
 8053008:	2b00      	cmp	r3, #0
 805300a:	d013      	beq.n	8053034 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 805300c:	f7fc fb12 	bl	804f634 <HAL_GetTick>
 8053010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8053012:	e008      	b.n	8053026 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8053014:	f7fc fb0e 	bl	804f634 <HAL_GetTick>
 8053018:	4602      	mov	r2, r0
 805301a:	693b      	ldr	r3, [r7, #16]
 805301c:	1ad3      	subs	r3, r2, r3
 805301e:	2b64      	cmp	r3, #100	; 0x64
 8053020:	d901      	bls.n	8053026 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8053022:	2303      	movs	r3, #3
 8053024:	e204      	b.n	8053430 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8053026:	4b76      	ldr	r3, [pc, #472]	; (8053200 <HAL_RCC_OscConfig+0x2ac>)
 8053028:	681b      	ldr	r3, [r3, #0]
 805302a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 805302e:	2b00      	cmp	r3, #0
 8053030:	d0f0      	beq.n	8053014 <HAL_RCC_OscConfig+0xc0>
 8053032:	e014      	b.n	805305e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8053034:	f7fc fafe 	bl	804f634 <HAL_GetTick>
 8053038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 805303a:	e008      	b.n	805304e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 805303c:	f7fc fafa 	bl	804f634 <HAL_GetTick>
 8053040:	4602      	mov	r2, r0
 8053042:	693b      	ldr	r3, [r7, #16]
 8053044:	1ad3      	subs	r3, r2, r3
 8053046:	2b64      	cmp	r3, #100	; 0x64
 8053048:	d901      	bls.n	805304e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 805304a:	2303      	movs	r3, #3
 805304c:	e1f0      	b.n	8053430 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 805304e:	4b6c      	ldr	r3, [pc, #432]	; (8053200 <HAL_RCC_OscConfig+0x2ac>)
 8053050:	681b      	ldr	r3, [r3, #0]
 8053052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8053056:	2b00      	cmp	r3, #0
 8053058:	d1f0      	bne.n	805303c <HAL_RCC_OscConfig+0xe8>
 805305a:	e000      	b.n	805305e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 805305c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 805305e:	687b      	ldr	r3, [r7, #4]
 8053060:	681b      	ldr	r3, [r3, #0]
 8053062:	f003 0302 	and.w	r3, r3, #2
 8053066:	2b00      	cmp	r3, #0
 8053068:	d063      	beq.n	8053132 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 805306a:	4b65      	ldr	r3, [pc, #404]	; (8053200 <HAL_RCC_OscConfig+0x2ac>)
 805306c:	689b      	ldr	r3, [r3, #8]
 805306e:	f003 030c 	and.w	r3, r3, #12
 8053072:	2b00      	cmp	r3, #0
 8053074:	d00b      	beq.n	805308e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8053076:	4b62      	ldr	r3, [pc, #392]	; (8053200 <HAL_RCC_OscConfig+0x2ac>)
 8053078:	689b      	ldr	r3, [r3, #8]
 805307a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 805307e:	2b08      	cmp	r3, #8
 8053080:	d11c      	bne.n	80530bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8053082:	4b5f      	ldr	r3, [pc, #380]	; (8053200 <HAL_RCC_OscConfig+0x2ac>)
 8053084:	685b      	ldr	r3, [r3, #4]
 8053086:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 805308a:	2b00      	cmp	r3, #0
 805308c:	d116      	bne.n	80530bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 805308e:	4b5c      	ldr	r3, [pc, #368]	; (8053200 <HAL_RCC_OscConfig+0x2ac>)
 8053090:	681b      	ldr	r3, [r3, #0]
 8053092:	f003 0302 	and.w	r3, r3, #2
 8053096:	2b00      	cmp	r3, #0
 8053098:	d005      	beq.n	80530a6 <HAL_RCC_OscConfig+0x152>
 805309a:	687b      	ldr	r3, [r7, #4]
 805309c:	68db      	ldr	r3, [r3, #12]
 805309e:	2b01      	cmp	r3, #1
 80530a0:	d001      	beq.n	80530a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80530a2:	2301      	movs	r3, #1
 80530a4:	e1c4      	b.n	8053430 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80530a6:	4b56      	ldr	r3, [pc, #344]	; (8053200 <HAL_RCC_OscConfig+0x2ac>)
 80530a8:	681b      	ldr	r3, [r3, #0]
 80530aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80530ae:	687b      	ldr	r3, [r7, #4]
 80530b0:	691b      	ldr	r3, [r3, #16]
 80530b2:	00db      	lsls	r3, r3, #3
 80530b4:	4952      	ldr	r1, [pc, #328]	; (8053200 <HAL_RCC_OscConfig+0x2ac>)
 80530b6:	4313      	orrs	r3, r2
 80530b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80530ba:	e03a      	b.n	8053132 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80530bc:	687b      	ldr	r3, [r7, #4]
 80530be:	68db      	ldr	r3, [r3, #12]
 80530c0:	2b00      	cmp	r3, #0
 80530c2:	d020      	beq.n	8053106 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80530c4:	4b4f      	ldr	r3, [pc, #316]	; (8053204 <HAL_RCC_OscConfig+0x2b0>)
 80530c6:	2201      	movs	r2, #1
 80530c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80530ca:	f7fc fab3 	bl	804f634 <HAL_GetTick>
 80530ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80530d0:	e008      	b.n	80530e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80530d2:	f7fc faaf 	bl	804f634 <HAL_GetTick>
 80530d6:	4602      	mov	r2, r0
 80530d8:	693b      	ldr	r3, [r7, #16]
 80530da:	1ad3      	subs	r3, r2, r3
 80530dc:	2b02      	cmp	r3, #2
 80530de:	d901      	bls.n	80530e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80530e0:	2303      	movs	r3, #3
 80530e2:	e1a5      	b.n	8053430 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80530e4:	4b46      	ldr	r3, [pc, #280]	; (8053200 <HAL_RCC_OscConfig+0x2ac>)
 80530e6:	681b      	ldr	r3, [r3, #0]
 80530e8:	f003 0302 	and.w	r3, r3, #2
 80530ec:	2b00      	cmp	r3, #0
 80530ee:	d0f0      	beq.n	80530d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80530f0:	4b43      	ldr	r3, [pc, #268]	; (8053200 <HAL_RCC_OscConfig+0x2ac>)
 80530f2:	681b      	ldr	r3, [r3, #0]
 80530f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80530f8:	687b      	ldr	r3, [r7, #4]
 80530fa:	691b      	ldr	r3, [r3, #16]
 80530fc:	00db      	lsls	r3, r3, #3
 80530fe:	4940      	ldr	r1, [pc, #256]	; (8053200 <HAL_RCC_OscConfig+0x2ac>)
 8053100:	4313      	orrs	r3, r2
 8053102:	600b      	str	r3, [r1, #0]
 8053104:	e015      	b.n	8053132 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8053106:	4b3f      	ldr	r3, [pc, #252]	; (8053204 <HAL_RCC_OscConfig+0x2b0>)
 8053108:	2200      	movs	r2, #0
 805310a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 805310c:	f7fc fa92 	bl	804f634 <HAL_GetTick>
 8053110:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8053112:	e008      	b.n	8053126 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8053114:	f7fc fa8e 	bl	804f634 <HAL_GetTick>
 8053118:	4602      	mov	r2, r0
 805311a:	693b      	ldr	r3, [r7, #16]
 805311c:	1ad3      	subs	r3, r2, r3
 805311e:	2b02      	cmp	r3, #2
 8053120:	d901      	bls.n	8053126 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8053122:	2303      	movs	r3, #3
 8053124:	e184      	b.n	8053430 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8053126:	4b36      	ldr	r3, [pc, #216]	; (8053200 <HAL_RCC_OscConfig+0x2ac>)
 8053128:	681b      	ldr	r3, [r3, #0]
 805312a:	f003 0302 	and.w	r3, r3, #2
 805312e:	2b00      	cmp	r3, #0
 8053130:	d1f0      	bne.n	8053114 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8053132:	687b      	ldr	r3, [r7, #4]
 8053134:	681b      	ldr	r3, [r3, #0]
 8053136:	f003 0308 	and.w	r3, r3, #8
 805313a:	2b00      	cmp	r3, #0
 805313c:	d030      	beq.n	80531a0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 805313e:	687b      	ldr	r3, [r7, #4]
 8053140:	695b      	ldr	r3, [r3, #20]
 8053142:	2b00      	cmp	r3, #0
 8053144:	d016      	beq.n	8053174 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8053146:	4b30      	ldr	r3, [pc, #192]	; (8053208 <HAL_RCC_OscConfig+0x2b4>)
 8053148:	2201      	movs	r2, #1
 805314a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 805314c:	f7fc fa72 	bl	804f634 <HAL_GetTick>
 8053150:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8053152:	e008      	b.n	8053166 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8053154:	f7fc fa6e 	bl	804f634 <HAL_GetTick>
 8053158:	4602      	mov	r2, r0
 805315a:	693b      	ldr	r3, [r7, #16]
 805315c:	1ad3      	subs	r3, r2, r3
 805315e:	2b02      	cmp	r3, #2
 8053160:	d901      	bls.n	8053166 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8053162:	2303      	movs	r3, #3
 8053164:	e164      	b.n	8053430 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8053166:	4b26      	ldr	r3, [pc, #152]	; (8053200 <HAL_RCC_OscConfig+0x2ac>)
 8053168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 805316a:	f003 0302 	and.w	r3, r3, #2
 805316e:	2b00      	cmp	r3, #0
 8053170:	d0f0      	beq.n	8053154 <HAL_RCC_OscConfig+0x200>
 8053172:	e015      	b.n	80531a0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8053174:	4b24      	ldr	r3, [pc, #144]	; (8053208 <HAL_RCC_OscConfig+0x2b4>)
 8053176:	2200      	movs	r2, #0
 8053178:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 805317a:	f7fc fa5b 	bl	804f634 <HAL_GetTick>
 805317e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8053180:	e008      	b.n	8053194 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8053182:	f7fc fa57 	bl	804f634 <HAL_GetTick>
 8053186:	4602      	mov	r2, r0
 8053188:	693b      	ldr	r3, [r7, #16]
 805318a:	1ad3      	subs	r3, r2, r3
 805318c:	2b02      	cmp	r3, #2
 805318e:	d901      	bls.n	8053194 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8053190:	2303      	movs	r3, #3
 8053192:	e14d      	b.n	8053430 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8053194:	4b1a      	ldr	r3, [pc, #104]	; (8053200 <HAL_RCC_OscConfig+0x2ac>)
 8053196:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8053198:	f003 0302 	and.w	r3, r3, #2
 805319c:	2b00      	cmp	r3, #0
 805319e:	d1f0      	bne.n	8053182 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80531a0:	687b      	ldr	r3, [r7, #4]
 80531a2:	681b      	ldr	r3, [r3, #0]
 80531a4:	f003 0304 	and.w	r3, r3, #4
 80531a8:	2b00      	cmp	r3, #0
 80531aa:	f000 80a0 	beq.w	80532ee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80531ae:	2300      	movs	r3, #0
 80531b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80531b2:	4b13      	ldr	r3, [pc, #76]	; (8053200 <HAL_RCC_OscConfig+0x2ac>)
 80531b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80531b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80531ba:	2b00      	cmp	r3, #0
 80531bc:	d10f      	bne.n	80531de <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80531be:	2300      	movs	r3, #0
 80531c0:	60bb      	str	r3, [r7, #8]
 80531c2:	4b0f      	ldr	r3, [pc, #60]	; (8053200 <HAL_RCC_OscConfig+0x2ac>)
 80531c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80531c6:	4a0e      	ldr	r2, [pc, #56]	; (8053200 <HAL_RCC_OscConfig+0x2ac>)
 80531c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80531cc:	6413      	str	r3, [r2, #64]	; 0x40
 80531ce:	4b0c      	ldr	r3, [pc, #48]	; (8053200 <HAL_RCC_OscConfig+0x2ac>)
 80531d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80531d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80531d6:	60bb      	str	r3, [r7, #8]
 80531d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80531da:	2301      	movs	r3, #1
 80531dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80531de:	4b0b      	ldr	r3, [pc, #44]	; (805320c <HAL_RCC_OscConfig+0x2b8>)
 80531e0:	681b      	ldr	r3, [r3, #0]
 80531e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80531e6:	2b00      	cmp	r3, #0
 80531e8:	d121      	bne.n	805322e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80531ea:	4b08      	ldr	r3, [pc, #32]	; (805320c <HAL_RCC_OscConfig+0x2b8>)
 80531ec:	681b      	ldr	r3, [r3, #0]
 80531ee:	4a07      	ldr	r2, [pc, #28]	; (805320c <HAL_RCC_OscConfig+0x2b8>)
 80531f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80531f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80531f6:	f7fc fa1d 	bl	804f634 <HAL_GetTick>
 80531fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80531fc:	e011      	b.n	8053222 <HAL_RCC_OscConfig+0x2ce>
 80531fe:	bf00      	nop
 8053200:	40023800 	.word	0x40023800
 8053204:	42470000 	.word	0x42470000
 8053208:	42470e80 	.word	0x42470e80
 805320c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8053210:	f7fc fa10 	bl	804f634 <HAL_GetTick>
 8053214:	4602      	mov	r2, r0
 8053216:	693b      	ldr	r3, [r7, #16]
 8053218:	1ad3      	subs	r3, r2, r3
 805321a:	2b02      	cmp	r3, #2
 805321c:	d901      	bls.n	8053222 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 805321e:	2303      	movs	r3, #3
 8053220:	e106      	b.n	8053430 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8053222:	4b85      	ldr	r3, [pc, #532]	; (8053438 <HAL_RCC_OscConfig+0x4e4>)
 8053224:	681b      	ldr	r3, [r3, #0]
 8053226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 805322a:	2b00      	cmp	r3, #0
 805322c:	d0f0      	beq.n	8053210 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 805322e:	687b      	ldr	r3, [r7, #4]
 8053230:	689b      	ldr	r3, [r3, #8]
 8053232:	2b01      	cmp	r3, #1
 8053234:	d106      	bne.n	8053244 <HAL_RCC_OscConfig+0x2f0>
 8053236:	4b81      	ldr	r3, [pc, #516]	; (805343c <HAL_RCC_OscConfig+0x4e8>)
 8053238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 805323a:	4a80      	ldr	r2, [pc, #512]	; (805343c <HAL_RCC_OscConfig+0x4e8>)
 805323c:	f043 0301 	orr.w	r3, r3, #1
 8053240:	6713      	str	r3, [r2, #112]	; 0x70
 8053242:	e01c      	b.n	805327e <HAL_RCC_OscConfig+0x32a>
 8053244:	687b      	ldr	r3, [r7, #4]
 8053246:	689b      	ldr	r3, [r3, #8]
 8053248:	2b05      	cmp	r3, #5
 805324a:	d10c      	bne.n	8053266 <HAL_RCC_OscConfig+0x312>
 805324c:	4b7b      	ldr	r3, [pc, #492]	; (805343c <HAL_RCC_OscConfig+0x4e8>)
 805324e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8053250:	4a7a      	ldr	r2, [pc, #488]	; (805343c <HAL_RCC_OscConfig+0x4e8>)
 8053252:	f043 0304 	orr.w	r3, r3, #4
 8053256:	6713      	str	r3, [r2, #112]	; 0x70
 8053258:	4b78      	ldr	r3, [pc, #480]	; (805343c <HAL_RCC_OscConfig+0x4e8>)
 805325a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 805325c:	4a77      	ldr	r2, [pc, #476]	; (805343c <HAL_RCC_OscConfig+0x4e8>)
 805325e:	f043 0301 	orr.w	r3, r3, #1
 8053262:	6713      	str	r3, [r2, #112]	; 0x70
 8053264:	e00b      	b.n	805327e <HAL_RCC_OscConfig+0x32a>
 8053266:	4b75      	ldr	r3, [pc, #468]	; (805343c <HAL_RCC_OscConfig+0x4e8>)
 8053268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 805326a:	4a74      	ldr	r2, [pc, #464]	; (805343c <HAL_RCC_OscConfig+0x4e8>)
 805326c:	f023 0301 	bic.w	r3, r3, #1
 8053270:	6713      	str	r3, [r2, #112]	; 0x70
 8053272:	4b72      	ldr	r3, [pc, #456]	; (805343c <HAL_RCC_OscConfig+0x4e8>)
 8053274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8053276:	4a71      	ldr	r2, [pc, #452]	; (805343c <HAL_RCC_OscConfig+0x4e8>)
 8053278:	f023 0304 	bic.w	r3, r3, #4
 805327c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 805327e:	687b      	ldr	r3, [r7, #4]
 8053280:	689b      	ldr	r3, [r3, #8]
 8053282:	2b00      	cmp	r3, #0
 8053284:	d015      	beq.n	80532b2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8053286:	f7fc f9d5 	bl	804f634 <HAL_GetTick>
 805328a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 805328c:	e00a      	b.n	80532a4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 805328e:	f7fc f9d1 	bl	804f634 <HAL_GetTick>
 8053292:	4602      	mov	r2, r0
 8053294:	693b      	ldr	r3, [r7, #16]
 8053296:	1ad3      	subs	r3, r2, r3
 8053298:	f241 3288 	movw	r2, #5000	; 0x1388
 805329c:	4293      	cmp	r3, r2
 805329e:	d901      	bls.n	80532a4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80532a0:	2303      	movs	r3, #3
 80532a2:	e0c5      	b.n	8053430 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80532a4:	4b65      	ldr	r3, [pc, #404]	; (805343c <HAL_RCC_OscConfig+0x4e8>)
 80532a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80532a8:	f003 0302 	and.w	r3, r3, #2
 80532ac:	2b00      	cmp	r3, #0
 80532ae:	d0ee      	beq.n	805328e <HAL_RCC_OscConfig+0x33a>
 80532b0:	e014      	b.n	80532dc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80532b2:	f7fc f9bf 	bl	804f634 <HAL_GetTick>
 80532b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80532b8:	e00a      	b.n	80532d0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80532ba:	f7fc f9bb 	bl	804f634 <HAL_GetTick>
 80532be:	4602      	mov	r2, r0
 80532c0:	693b      	ldr	r3, [r7, #16]
 80532c2:	1ad3      	subs	r3, r2, r3
 80532c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80532c8:	4293      	cmp	r3, r2
 80532ca:	d901      	bls.n	80532d0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80532cc:	2303      	movs	r3, #3
 80532ce:	e0af      	b.n	8053430 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80532d0:	4b5a      	ldr	r3, [pc, #360]	; (805343c <HAL_RCC_OscConfig+0x4e8>)
 80532d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80532d4:	f003 0302 	and.w	r3, r3, #2
 80532d8:	2b00      	cmp	r3, #0
 80532da:	d1ee      	bne.n	80532ba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80532dc:	7dfb      	ldrb	r3, [r7, #23]
 80532de:	2b01      	cmp	r3, #1
 80532e0:	d105      	bne.n	80532ee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80532e2:	4b56      	ldr	r3, [pc, #344]	; (805343c <HAL_RCC_OscConfig+0x4e8>)
 80532e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80532e6:	4a55      	ldr	r2, [pc, #340]	; (805343c <HAL_RCC_OscConfig+0x4e8>)
 80532e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80532ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80532ee:	687b      	ldr	r3, [r7, #4]
 80532f0:	699b      	ldr	r3, [r3, #24]
 80532f2:	2b00      	cmp	r3, #0
 80532f4:	f000 809b 	beq.w	805342e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80532f8:	4b50      	ldr	r3, [pc, #320]	; (805343c <HAL_RCC_OscConfig+0x4e8>)
 80532fa:	689b      	ldr	r3, [r3, #8]
 80532fc:	f003 030c 	and.w	r3, r3, #12
 8053300:	2b08      	cmp	r3, #8
 8053302:	d05c      	beq.n	80533be <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8053304:	687b      	ldr	r3, [r7, #4]
 8053306:	699b      	ldr	r3, [r3, #24]
 8053308:	2b02      	cmp	r3, #2
 805330a:	d141      	bne.n	8053390 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 805330c:	4b4c      	ldr	r3, [pc, #304]	; (8053440 <HAL_RCC_OscConfig+0x4ec>)
 805330e:	2200      	movs	r2, #0
 8053310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8053312:	f7fc f98f 	bl	804f634 <HAL_GetTick>
 8053316:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8053318:	e008      	b.n	805332c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 805331a:	f7fc f98b 	bl	804f634 <HAL_GetTick>
 805331e:	4602      	mov	r2, r0
 8053320:	693b      	ldr	r3, [r7, #16]
 8053322:	1ad3      	subs	r3, r2, r3
 8053324:	2b02      	cmp	r3, #2
 8053326:	d901      	bls.n	805332c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8053328:	2303      	movs	r3, #3
 805332a:	e081      	b.n	8053430 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 805332c:	4b43      	ldr	r3, [pc, #268]	; (805343c <HAL_RCC_OscConfig+0x4e8>)
 805332e:	681b      	ldr	r3, [r3, #0]
 8053330:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8053334:	2b00      	cmp	r3, #0
 8053336:	d1f0      	bne.n	805331a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8053338:	687b      	ldr	r3, [r7, #4]
 805333a:	69da      	ldr	r2, [r3, #28]
 805333c:	687b      	ldr	r3, [r7, #4]
 805333e:	6a1b      	ldr	r3, [r3, #32]
 8053340:	431a      	orrs	r2, r3
 8053342:	687b      	ldr	r3, [r7, #4]
 8053344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8053346:	019b      	lsls	r3, r3, #6
 8053348:	431a      	orrs	r2, r3
 805334a:	687b      	ldr	r3, [r7, #4]
 805334c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 805334e:	085b      	lsrs	r3, r3, #1
 8053350:	3b01      	subs	r3, #1
 8053352:	041b      	lsls	r3, r3, #16
 8053354:	431a      	orrs	r2, r3
 8053356:	687b      	ldr	r3, [r7, #4]
 8053358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 805335a:	061b      	lsls	r3, r3, #24
 805335c:	4937      	ldr	r1, [pc, #220]	; (805343c <HAL_RCC_OscConfig+0x4e8>)
 805335e:	4313      	orrs	r3, r2
 8053360:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8053362:	4b37      	ldr	r3, [pc, #220]	; (8053440 <HAL_RCC_OscConfig+0x4ec>)
 8053364:	2201      	movs	r2, #1
 8053366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8053368:	f7fc f964 	bl	804f634 <HAL_GetTick>
 805336c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 805336e:	e008      	b.n	8053382 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8053370:	f7fc f960 	bl	804f634 <HAL_GetTick>
 8053374:	4602      	mov	r2, r0
 8053376:	693b      	ldr	r3, [r7, #16]
 8053378:	1ad3      	subs	r3, r2, r3
 805337a:	2b02      	cmp	r3, #2
 805337c:	d901      	bls.n	8053382 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 805337e:	2303      	movs	r3, #3
 8053380:	e056      	b.n	8053430 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8053382:	4b2e      	ldr	r3, [pc, #184]	; (805343c <HAL_RCC_OscConfig+0x4e8>)
 8053384:	681b      	ldr	r3, [r3, #0]
 8053386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 805338a:	2b00      	cmp	r3, #0
 805338c:	d0f0      	beq.n	8053370 <HAL_RCC_OscConfig+0x41c>
 805338e:	e04e      	b.n	805342e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8053390:	4b2b      	ldr	r3, [pc, #172]	; (8053440 <HAL_RCC_OscConfig+0x4ec>)
 8053392:	2200      	movs	r2, #0
 8053394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8053396:	f7fc f94d 	bl	804f634 <HAL_GetTick>
 805339a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 805339c:	e008      	b.n	80533b0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 805339e:	f7fc f949 	bl	804f634 <HAL_GetTick>
 80533a2:	4602      	mov	r2, r0
 80533a4:	693b      	ldr	r3, [r7, #16]
 80533a6:	1ad3      	subs	r3, r2, r3
 80533a8:	2b02      	cmp	r3, #2
 80533aa:	d901      	bls.n	80533b0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80533ac:	2303      	movs	r3, #3
 80533ae:	e03f      	b.n	8053430 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80533b0:	4b22      	ldr	r3, [pc, #136]	; (805343c <HAL_RCC_OscConfig+0x4e8>)
 80533b2:	681b      	ldr	r3, [r3, #0]
 80533b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80533b8:	2b00      	cmp	r3, #0
 80533ba:	d1f0      	bne.n	805339e <HAL_RCC_OscConfig+0x44a>
 80533bc:	e037      	b.n	805342e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80533be:	687b      	ldr	r3, [r7, #4]
 80533c0:	699b      	ldr	r3, [r3, #24]
 80533c2:	2b01      	cmp	r3, #1
 80533c4:	d101      	bne.n	80533ca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80533c6:	2301      	movs	r3, #1
 80533c8:	e032      	b.n	8053430 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80533ca:	4b1c      	ldr	r3, [pc, #112]	; (805343c <HAL_RCC_OscConfig+0x4e8>)
 80533cc:	685b      	ldr	r3, [r3, #4]
 80533ce:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80533d0:	687b      	ldr	r3, [r7, #4]
 80533d2:	699b      	ldr	r3, [r3, #24]
 80533d4:	2b01      	cmp	r3, #1
 80533d6:	d028      	beq.n	805342a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80533d8:	68fb      	ldr	r3, [r7, #12]
 80533da:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80533de:	687b      	ldr	r3, [r7, #4]
 80533e0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80533e2:	429a      	cmp	r2, r3
 80533e4:	d121      	bne.n	805342a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80533e6:	68fb      	ldr	r3, [r7, #12]
 80533e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80533ec:	687b      	ldr	r3, [r7, #4]
 80533ee:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80533f0:	429a      	cmp	r2, r3
 80533f2:	d11a      	bne.n	805342a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80533f4:	68fa      	ldr	r2, [r7, #12]
 80533f6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80533fa:	4013      	ands	r3, r2
 80533fc:	687a      	ldr	r2, [r7, #4]
 80533fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8053400:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8053402:	4293      	cmp	r3, r2
 8053404:	d111      	bne.n	805342a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8053406:	68fb      	ldr	r3, [r7, #12]
 8053408:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 805340c:	687b      	ldr	r3, [r7, #4]
 805340e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8053410:	085b      	lsrs	r3, r3, #1
 8053412:	3b01      	subs	r3, #1
 8053414:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8053416:	429a      	cmp	r2, r3
 8053418:	d107      	bne.n	805342a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 805341a:	68fb      	ldr	r3, [r7, #12]
 805341c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8053420:	687b      	ldr	r3, [r7, #4]
 8053422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8053424:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8053426:	429a      	cmp	r2, r3
 8053428:	d001      	beq.n	805342e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 805342a:	2301      	movs	r3, #1
 805342c:	e000      	b.n	8053430 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 805342e:	2300      	movs	r3, #0
}
 8053430:	4618      	mov	r0, r3
 8053432:	3718      	adds	r7, #24
 8053434:	46bd      	mov	sp, r7
 8053436:	bd80      	pop	{r7, pc}
 8053438:	40007000 	.word	0x40007000
 805343c:	40023800 	.word	0x40023800
 8053440:	42470060 	.word	0x42470060

08053444 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8053444:	b580      	push	{r7, lr}
 8053446:	b084      	sub	sp, #16
 8053448:	af00      	add	r7, sp, #0
 805344a:	6078      	str	r0, [r7, #4]
 805344c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 805344e:	687b      	ldr	r3, [r7, #4]
 8053450:	2b00      	cmp	r3, #0
 8053452:	d101      	bne.n	8053458 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8053454:	2301      	movs	r3, #1
 8053456:	e0cc      	b.n	80535f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8053458:	4b68      	ldr	r3, [pc, #416]	; (80535fc <HAL_RCC_ClockConfig+0x1b8>)
 805345a:	681b      	ldr	r3, [r3, #0]
 805345c:	f003 0307 	and.w	r3, r3, #7
 8053460:	683a      	ldr	r2, [r7, #0]
 8053462:	429a      	cmp	r2, r3
 8053464:	d90c      	bls.n	8053480 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8053466:	4b65      	ldr	r3, [pc, #404]	; (80535fc <HAL_RCC_ClockConfig+0x1b8>)
 8053468:	683a      	ldr	r2, [r7, #0]
 805346a:	b2d2      	uxtb	r2, r2
 805346c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 805346e:	4b63      	ldr	r3, [pc, #396]	; (80535fc <HAL_RCC_ClockConfig+0x1b8>)
 8053470:	681b      	ldr	r3, [r3, #0]
 8053472:	f003 0307 	and.w	r3, r3, #7
 8053476:	683a      	ldr	r2, [r7, #0]
 8053478:	429a      	cmp	r2, r3
 805347a:	d001      	beq.n	8053480 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 805347c:	2301      	movs	r3, #1
 805347e:	e0b8      	b.n	80535f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8053480:	687b      	ldr	r3, [r7, #4]
 8053482:	681b      	ldr	r3, [r3, #0]
 8053484:	f003 0302 	and.w	r3, r3, #2
 8053488:	2b00      	cmp	r3, #0
 805348a:	d020      	beq.n	80534ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 805348c:	687b      	ldr	r3, [r7, #4]
 805348e:	681b      	ldr	r3, [r3, #0]
 8053490:	f003 0304 	and.w	r3, r3, #4
 8053494:	2b00      	cmp	r3, #0
 8053496:	d005      	beq.n	80534a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8053498:	4b59      	ldr	r3, [pc, #356]	; (8053600 <HAL_RCC_ClockConfig+0x1bc>)
 805349a:	689b      	ldr	r3, [r3, #8]
 805349c:	4a58      	ldr	r2, [pc, #352]	; (8053600 <HAL_RCC_ClockConfig+0x1bc>)
 805349e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80534a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80534a4:	687b      	ldr	r3, [r7, #4]
 80534a6:	681b      	ldr	r3, [r3, #0]
 80534a8:	f003 0308 	and.w	r3, r3, #8
 80534ac:	2b00      	cmp	r3, #0
 80534ae:	d005      	beq.n	80534bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80534b0:	4b53      	ldr	r3, [pc, #332]	; (8053600 <HAL_RCC_ClockConfig+0x1bc>)
 80534b2:	689b      	ldr	r3, [r3, #8]
 80534b4:	4a52      	ldr	r2, [pc, #328]	; (8053600 <HAL_RCC_ClockConfig+0x1bc>)
 80534b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80534ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80534bc:	4b50      	ldr	r3, [pc, #320]	; (8053600 <HAL_RCC_ClockConfig+0x1bc>)
 80534be:	689b      	ldr	r3, [r3, #8]
 80534c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80534c4:	687b      	ldr	r3, [r7, #4]
 80534c6:	689b      	ldr	r3, [r3, #8]
 80534c8:	494d      	ldr	r1, [pc, #308]	; (8053600 <HAL_RCC_ClockConfig+0x1bc>)
 80534ca:	4313      	orrs	r3, r2
 80534cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80534ce:	687b      	ldr	r3, [r7, #4]
 80534d0:	681b      	ldr	r3, [r3, #0]
 80534d2:	f003 0301 	and.w	r3, r3, #1
 80534d6:	2b00      	cmp	r3, #0
 80534d8:	d044      	beq.n	8053564 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80534da:	687b      	ldr	r3, [r7, #4]
 80534dc:	685b      	ldr	r3, [r3, #4]
 80534de:	2b01      	cmp	r3, #1
 80534e0:	d107      	bne.n	80534f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80534e2:	4b47      	ldr	r3, [pc, #284]	; (8053600 <HAL_RCC_ClockConfig+0x1bc>)
 80534e4:	681b      	ldr	r3, [r3, #0]
 80534e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80534ea:	2b00      	cmp	r3, #0
 80534ec:	d119      	bne.n	8053522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80534ee:	2301      	movs	r3, #1
 80534f0:	e07f      	b.n	80535f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80534f2:	687b      	ldr	r3, [r7, #4]
 80534f4:	685b      	ldr	r3, [r3, #4]
 80534f6:	2b02      	cmp	r3, #2
 80534f8:	d003      	beq.n	8053502 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80534fa:	687b      	ldr	r3, [r7, #4]
 80534fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80534fe:	2b03      	cmp	r3, #3
 8053500:	d107      	bne.n	8053512 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8053502:	4b3f      	ldr	r3, [pc, #252]	; (8053600 <HAL_RCC_ClockConfig+0x1bc>)
 8053504:	681b      	ldr	r3, [r3, #0]
 8053506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 805350a:	2b00      	cmp	r3, #0
 805350c:	d109      	bne.n	8053522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 805350e:	2301      	movs	r3, #1
 8053510:	e06f      	b.n	80535f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8053512:	4b3b      	ldr	r3, [pc, #236]	; (8053600 <HAL_RCC_ClockConfig+0x1bc>)
 8053514:	681b      	ldr	r3, [r3, #0]
 8053516:	f003 0302 	and.w	r3, r3, #2
 805351a:	2b00      	cmp	r3, #0
 805351c:	d101      	bne.n	8053522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 805351e:	2301      	movs	r3, #1
 8053520:	e067      	b.n	80535f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8053522:	4b37      	ldr	r3, [pc, #220]	; (8053600 <HAL_RCC_ClockConfig+0x1bc>)
 8053524:	689b      	ldr	r3, [r3, #8]
 8053526:	f023 0203 	bic.w	r2, r3, #3
 805352a:	687b      	ldr	r3, [r7, #4]
 805352c:	685b      	ldr	r3, [r3, #4]
 805352e:	4934      	ldr	r1, [pc, #208]	; (8053600 <HAL_RCC_ClockConfig+0x1bc>)
 8053530:	4313      	orrs	r3, r2
 8053532:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8053534:	f7fc f87e 	bl	804f634 <HAL_GetTick>
 8053538:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 805353a:	e00a      	b.n	8053552 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 805353c:	f7fc f87a 	bl	804f634 <HAL_GetTick>
 8053540:	4602      	mov	r2, r0
 8053542:	68fb      	ldr	r3, [r7, #12]
 8053544:	1ad3      	subs	r3, r2, r3
 8053546:	f241 3288 	movw	r2, #5000	; 0x1388
 805354a:	4293      	cmp	r3, r2
 805354c:	d901      	bls.n	8053552 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 805354e:	2303      	movs	r3, #3
 8053550:	e04f      	b.n	80535f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8053552:	4b2b      	ldr	r3, [pc, #172]	; (8053600 <HAL_RCC_ClockConfig+0x1bc>)
 8053554:	689b      	ldr	r3, [r3, #8]
 8053556:	f003 020c 	and.w	r2, r3, #12
 805355a:	687b      	ldr	r3, [r7, #4]
 805355c:	685b      	ldr	r3, [r3, #4]
 805355e:	009b      	lsls	r3, r3, #2
 8053560:	429a      	cmp	r2, r3
 8053562:	d1eb      	bne.n	805353c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8053564:	4b25      	ldr	r3, [pc, #148]	; (80535fc <HAL_RCC_ClockConfig+0x1b8>)
 8053566:	681b      	ldr	r3, [r3, #0]
 8053568:	f003 0307 	and.w	r3, r3, #7
 805356c:	683a      	ldr	r2, [r7, #0]
 805356e:	429a      	cmp	r2, r3
 8053570:	d20c      	bcs.n	805358c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8053572:	4b22      	ldr	r3, [pc, #136]	; (80535fc <HAL_RCC_ClockConfig+0x1b8>)
 8053574:	683a      	ldr	r2, [r7, #0]
 8053576:	b2d2      	uxtb	r2, r2
 8053578:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 805357a:	4b20      	ldr	r3, [pc, #128]	; (80535fc <HAL_RCC_ClockConfig+0x1b8>)
 805357c:	681b      	ldr	r3, [r3, #0]
 805357e:	f003 0307 	and.w	r3, r3, #7
 8053582:	683a      	ldr	r2, [r7, #0]
 8053584:	429a      	cmp	r2, r3
 8053586:	d001      	beq.n	805358c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8053588:	2301      	movs	r3, #1
 805358a:	e032      	b.n	80535f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 805358c:	687b      	ldr	r3, [r7, #4]
 805358e:	681b      	ldr	r3, [r3, #0]
 8053590:	f003 0304 	and.w	r3, r3, #4
 8053594:	2b00      	cmp	r3, #0
 8053596:	d008      	beq.n	80535aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8053598:	4b19      	ldr	r3, [pc, #100]	; (8053600 <HAL_RCC_ClockConfig+0x1bc>)
 805359a:	689b      	ldr	r3, [r3, #8]
 805359c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80535a0:	687b      	ldr	r3, [r7, #4]
 80535a2:	68db      	ldr	r3, [r3, #12]
 80535a4:	4916      	ldr	r1, [pc, #88]	; (8053600 <HAL_RCC_ClockConfig+0x1bc>)
 80535a6:	4313      	orrs	r3, r2
 80535a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80535aa:	687b      	ldr	r3, [r7, #4]
 80535ac:	681b      	ldr	r3, [r3, #0]
 80535ae:	f003 0308 	and.w	r3, r3, #8
 80535b2:	2b00      	cmp	r3, #0
 80535b4:	d009      	beq.n	80535ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80535b6:	4b12      	ldr	r3, [pc, #72]	; (8053600 <HAL_RCC_ClockConfig+0x1bc>)
 80535b8:	689b      	ldr	r3, [r3, #8]
 80535ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80535be:	687b      	ldr	r3, [r7, #4]
 80535c0:	691b      	ldr	r3, [r3, #16]
 80535c2:	00db      	lsls	r3, r3, #3
 80535c4:	490e      	ldr	r1, [pc, #56]	; (8053600 <HAL_RCC_ClockConfig+0x1bc>)
 80535c6:	4313      	orrs	r3, r2
 80535c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80535ca:	f000 f821 	bl	8053610 <HAL_RCC_GetSysClockFreq>
 80535ce:	4602      	mov	r2, r0
 80535d0:	4b0b      	ldr	r3, [pc, #44]	; (8053600 <HAL_RCC_ClockConfig+0x1bc>)
 80535d2:	689b      	ldr	r3, [r3, #8]
 80535d4:	091b      	lsrs	r3, r3, #4
 80535d6:	f003 030f 	and.w	r3, r3, #15
 80535da:	490a      	ldr	r1, [pc, #40]	; (8053604 <HAL_RCC_ClockConfig+0x1c0>)
 80535dc:	5ccb      	ldrb	r3, [r1, r3]
 80535de:	fa22 f303 	lsr.w	r3, r2, r3
 80535e2:	4a09      	ldr	r2, [pc, #36]	; (8053608 <HAL_RCC_ClockConfig+0x1c4>)
 80535e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80535e6:	4b09      	ldr	r3, [pc, #36]	; (805360c <HAL_RCC_ClockConfig+0x1c8>)
 80535e8:	681b      	ldr	r3, [r3, #0]
 80535ea:	4618      	mov	r0, r3
 80535ec:	f7fa fd04 	bl	804dff8 <HAL_InitTick>

  return HAL_OK;
 80535f0:	2300      	movs	r3, #0
}
 80535f2:	4618      	mov	r0, r3
 80535f4:	3710      	adds	r7, #16
 80535f6:	46bd      	mov	sp, r7
 80535f8:	bd80      	pop	{r7, pc}
 80535fa:	bf00      	nop
 80535fc:	40023c00 	.word	0x40023c00
 8053600:	40023800 	.word	0x40023800
 8053604:	08067a58 	.word	0x08067a58
 8053608:	20007c54 	.word	0x20007c54
 805360c:	20007cac 	.word	0x20007cac

08053610 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8053610:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8053614:	b084      	sub	sp, #16
 8053616:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8053618:	2300      	movs	r3, #0
 805361a:	607b      	str	r3, [r7, #4]
 805361c:	2300      	movs	r3, #0
 805361e:	60fb      	str	r3, [r7, #12]
 8053620:	2300      	movs	r3, #0
 8053622:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8053624:	2300      	movs	r3, #0
 8053626:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8053628:	4b67      	ldr	r3, [pc, #412]	; (80537c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 805362a:	689b      	ldr	r3, [r3, #8]
 805362c:	f003 030c 	and.w	r3, r3, #12
 8053630:	2b08      	cmp	r3, #8
 8053632:	d00d      	beq.n	8053650 <HAL_RCC_GetSysClockFreq+0x40>
 8053634:	2b08      	cmp	r3, #8
 8053636:	f200 80bd 	bhi.w	80537b4 <HAL_RCC_GetSysClockFreq+0x1a4>
 805363a:	2b00      	cmp	r3, #0
 805363c:	d002      	beq.n	8053644 <HAL_RCC_GetSysClockFreq+0x34>
 805363e:	2b04      	cmp	r3, #4
 8053640:	d003      	beq.n	805364a <HAL_RCC_GetSysClockFreq+0x3a>
 8053642:	e0b7      	b.n	80537b4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8053644:	4b61      	ldr	r3, [pc, #388]	; (80537cc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8053646:	60bb      	str	r3, [r7, #8]
       break;
 8053648:	e0b7      	b.n	80537ba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 805364a:	4b60      	ldr	r3, [pc, #384]	; (80537cc <HAL_RCC_GetSysClockFreq+0x1bc>)
 805364c:	60bb      	str	r3, [r7, #8]
      break;
 805364e:	e0b4      	b.n	80537ba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8053650:	4b5d      	ldr	r3, [pc, #372]	; (80537c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8053652:	685b      	ldr	r3, [r3, #4]
 8053654:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8053658:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 805365a:	4b5b      	ldr	r3, [pc, #364]	; (80537c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 805365c:	685b      	ldr	r3, [r3, #4]
 805365e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8053662:	2b00      	cmp	r3, #0
 8053664:	d04d      	beq.n	8053702 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8053666:	4b58      	ldr	r3, [pc, #352]	; (80537c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8053668:	685b      	ldr	r3, [r3, #4]
 805366a:	099b      	lsrs	r3, r3, #6
 805366c:	461a      	mov	r2, r3
 805366e:	f04f 0300 	mov.w	r3, #0
 8053672:	f240 10ff 	movw	r0, #511	; 0x1ff
 8053676:	f04f 0100 	mov.w	r1, #0
 805367a:	ea02 0800 	and.w	r8, r2, r0
 805367e:	ea03 0901 	and.w	r9, r3, r1
 8053682:	4640      	mov	r0, r8
 8053684:	4649      	mov	r1, r9
 8053686:	f04f 0200 	mov.w	r2, #0
 805368a:	f04f 0300 	mov.w	r3, #0
 805368e:	014b      	lsls	r3, r1, #5
 8053690:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8053694:	0142      	lsls	r2, r0, #5
 8053696:	4610      	mov	r0, r2
 8053698:	4619      	mov	r1, r3
 805369a:	ebb0 0008 	subs.w	r0, r0, r8
 805369e:	eb61 0109 	sbc.w	r1, r1, r9
 80536a2:	f04f 0200 	mov.w	r2, #0
 80536a6:	f04f 0300 	mov.w	r3, #0
 80536aa:	018b      	lsls	r3, r1, #6
 80536ac:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80536b0:	0182      	lsls	r2, r0, #6
 80536b2:	1a12      	subs	r2, r2, r0
 80536b4:	eb63 0301 	sbc.w	r3, r3, r1
 80536b8:	f04f 0000 	mov.w	r0, #0
 80536bc:	f04f 0100 	mov.w	r1, #0
 80536c0:	00d9      	lsls	r1, r3, #3
 80536c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80536c6:	00d0      	lsls	r0, r2, #3
 80536c8:	4602      	mov	r2, r0
 80536ca:	460b      	mov	r3, r1
 80536cc:	eb12 0208 	adds.w	r2, r2, r8
 80536d0:	eb43 0309 	adc.w	r3, r3, r9
 80536d4:	f04f 0000 	mov.w	r0, #0
 80536d8:	f04f 0100 	mov.w	r1, #0
 80536dc:	0299      	lsls	r1, r3, #10
 80536de:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80536e2:	0290      	lsls	r0, r2, #10
 80536e4:	4602      	mov	r2, r0
 80536e6:	460b      	mov	r3, r1
 80536e8:	4610      	mov	r0, r2
 80536ea:	4619      	mov	r1, r3
 80536ec:	687b      	ldr	r3, [r7, #4]
 80536ee:	461a      	mov	r2, r3
 80536f0:	f04f 0300 	mov.w	r3, #0
 80536f4:	f7ed fbd6 	bl	8040ea4 <__aeabi_uldivmod>
 80536f8:	4602      	mov	r2, r0
 80536fa:	460b      	mov	r3, r1
 80536fc:	4613      	mov	r3, r2
 80536fe:	60fb      	str	r3, [r7, #12]
 8053700:	e04a      	b.n	8053798 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8053702:	4b31      	ldr	r3, [pc, #196]	; (80537c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8053704:	685b      	ldr	r3, [r3, #4]
 8053706:	099b      	lsrs	r3, r3, #6
 8053708:	461a      	mov	r2, r3
 805370a:	f04f 0300 	mov.w	r3, #0
 805370e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8053712:	f04f 0100 	mov.w	r1, #0
 8053716:	ea02 0400 	and.w	r4, r2, r0
 805371a:	ea03 0501 	and.w	r5, r3, r1
 805371e:	4620      	mov	r0, r4
 8053720:	4629      	mov	r1, r5
 8053722:	f04f 0200 	mov.w	r2, #0
 8053726:	f04f 0300 	mov.w	r3, #0
 805372a:	014b      	lsls	r3, r1, #5
 805372c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8053730:	0142      	lsls	r2, r0, #5
 8053732:	4610      	mov	r0, r2
 8053734:	4619      	mov	r1, r3
 8053736:	1b00      	subs	r0, r0, r4
 8053738:	eb61 0105 	sbc.w	r1, r1, r5
 805373c:	f04f 0200 	mov.w	r2, #0
 8053740:	f04f 0300 	mov.w	r3, #0
 8053744:	018b      	lsls	r3, r1, #6
 8053746:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 805374a:	0182      	lsls	r2, r0, #6
 805374c:	1a12      	subs	r2, r2, r0
 805374e:	eb63 0301 	sbc.w	r3, r3, r1
 8053752:	f04f 0000 	mov.w	r0, #0
 8053756:	f04f 0100 	mov.w	r1, #0
 805375a:	00d9      	lsls	r1, r3, #3
 805375c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8053760:	00d0      	lsls	r0, r2, #3
 8053762:	4602      	mov	r2, r0
 8053764:	460b      	mov	r3, r1
 8053766:	1912      	adds	r2, r2, r4
 8053768:	eb45 0303 	adc.w	r3, r5, r3
 805376c:	f04f 0000 	mov.w	r0, #0
 8053770:	f04f 0100 	mov.w	r1, #0
 8053774:	0299      	lsls	r1, r3, #10
 8053776:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 805377a:	0290      	lsls	r0, r2, #10
 805377c:	4602      	mov	r2, r0
 805377e:	460b      	mov	r3, r1
 8053780:	4610      	mov	r0, r2
 8053782:	4619      	mov	r1, r3
 8053784:	687b      	ldr	r3, [r7, #4]
 8053786:	461a      	mov	r2, r3
 8053788:	f04f 0300 	mov.w	r3, #0
 805378c:	f7ed fb8a 	bl	8040ea4 <__aeabi_uldivmod>
 8053790:	4602      	mov	r2, r0
 8053792:	460b      	mov	r3, r1
 8053794:	4613      	mov	r3, r2
 8053796:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8053798:	4b0b      	ldr	r3, [pc, #44]	; (80537c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 805379a:	685b      	ldr	r3, [r3, #4]
 805379c:	0c1b      	lsrs	r3, r3, #16
 805379e:	f003 0303 	and.w	r3, r3, #3
 80537a2:	3301      	adds	r3, #1
 80537a4:	005b      	lsls	r3, r3, #1
 80537a6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80537a8:	68fa      	ldr	r2, [r7, #12]
 80537aa:	683b      	ldr	r3, [r7, #0]
 80537ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80537b0:	60bb      	str	r3, [r7, #8]
      break;
 80537b2:	e002      	b.n	80537ba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80537b4:	4b05      	ldr	r3, [pc, #20]	; (80537cc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80537b6:	60bb      	str	r3, [r7, #8]
      break;
 80537b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80537ba:	68bb      	ldr	r3, [r7, #8]
}
 80537bc:	4618      	mov	r0, r3
 80537be:	3710      	adds	r7, #16
 80537c0:	46bd      	mov	sp, r7
 80537c2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80537c6:	bf00      	nop
 80537c8:	40023800 	.word	0x40023800
 80537cc:	00f42400 	.word	0x00f42400

080537d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80537d0:	b480      	push	{r7}
 80537d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80537d4:	4b03      	ldr	r3, [pc, #12]	; (80537e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80537d6:	681b      	ldr	r3, [r3, #0]
}
 80537d8:	4618      	mov	r0, r3
 80537da:	46bd      	mov	sp, r7
 80537dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80537e0:	4770      	bx	lr
 80537e2:	bf00      	nop
 80537e4:	20007c54 	.word	0x20007c54

080537e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80537e8:	b580      	push	{r7, lr}
 80537ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80537ec:	f7ff fff0 	bl	80537d0 <HAL_RCC_GetHCLKFreq>
 80537f0:	4602      	mov	r2, r0
 80537f2:	4b05      	ldr	r3, [pc, #20]	; (8053808 <HAL_RCC_GetPCLK1Freq+0x20>)
 80537f4:	689b      	ldr	r3, [r3, #8]
 80537f6:	0a9b      	lsrs	r3, r3, #10
 80537f8:	f003 0307 	and.w	r3, r3, #7
 80537fc:	4903      	ldr	r1, [pc, #12]	; (805380c <HAL_RCC_GetPCLK1Freq+0x24>)
 80537fe:	5ccb      	ldrb	r3, [r1, r3]
 8053800:	fa22 f303 	lsr.w	r3, r2, r3
}
 8053804:	4618      	mov	r0, r3
 8053806:	bd80      	pop	{r7, pc}
 8053808:	40023800 	.word	0x40023800
 805380c:	08067a68 	.word	0x08067a68

08053810 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8053810:	b580      	push	{r7, lr}
 8053812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8053814:	f7ff ffdc 	bl	80537d0 <HAL_RCC_GetHCLKFreq>
 8053818:	4602      	mov	r2, r0
 805381a:	4b05      	ldr	r3, [pc, #20]	; (8053830 <HAL_RCC_GetPCLK2Freq+0x20>)
 805381c:	689b      	ldr	r3, [r3, #8]
 805381e:	0b5b      	lsrs	r3, r3, #13
 8053820:	f003 0307 	and.w	r3, r3, #7
 8053824:	4903      	ldr	r1, [pc, #12]	; (8053834 <HAL_RCC_GetPCLK2Freq+0x24>)
 8053826:	5ccb      	ldrb	r3, [r1, r3]
 8053828:	fa22 f303 	lsr.w	r3, r2, r3
}
 805382c:	4618      	mov	r0, r3
 805382e:	bd80      	pop	{r7, pc}
 8053830:	40023800 	.word	0x40023800
 8053834:	08067a68 	.word	0x08067a68

08053838 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8053838:	b480      	push	{r7}
 805383a:	b083      	sub	sp, #12
 805383c:	af00      	add	r7, sp, #0
 805383e:	6078      	str	r0, [r7, #4]
 8053840:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8053842:	687b      	ldr	r3, [r7, #4]
 8053844:	220f      	movs	r2, #15
 8053846:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8053848:	4b12      	ldr	r3, [pc, #72]	; (8053894 <HAL_RCC_GetClockConfig+0x5c>)
 805384a:	689b      	ldr	r3, [r3, #8]
 805384c:	f003 0203 	and.w	r2, r3, #3
 8053850:	687b      	ldr	r3, [r7, #4]
 8053852:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8053854:	4b0f      	ldr	r3, [pc, #60]	; (8053894 <HAL_RCC_GetClockConfig+0x5c>)
 8053856:	689b      	ldr	r3, [r3, #8]
 8053858:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 805385c:	687b      	ldr	r3, [r7, #4]
 805385e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8053860:	4b0c      	ldr	r3, [pc, #48]	; (8053894 <HAL_RCC_GetClockConfig+0x5c>)
 8053862:	689b      	ldr	r3, [r3, #8]
 8053864:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8053868:	687b      	ldr	r3, [r7, #4]
 805386a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 805386c:	4b09      	ldr	r3, [pc, #36]	; (8053894 <HAL_RCC_GetClockConfig+0x5c>)
 805386e:	689b      	ldr	r3, [r3, #8]
 8053870:	08db      	lsrs	r3, r3, #3
 8053872:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8053876:	687b      	ldr	r3, [r7, #4]
 8053878:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 805387a:	4b07      	ldr	r3, [pc, #28]	; (8053898 <HAL_RCC_GetClockConfig+0x60>)
 805387c:	681b      	ldr	r3, [r3, #0]
 805387e:	f003 0207 	and.w	r2, r3, #7
 8053882:	683b      	ldr	r3, [r7, #0]
 8053884:	601a      	str	r2, [r3, #0]
}
 8053886:	bf00      	nop
 8053888:	370c      	adds	r7, #12
 805388a:	46bd      	mov	sp, r7
 805388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8053890:	4770      	bx	lr
 8053892:	bf00      	nop
 8053894:	40023800 	.word	0x40023800
 8053898:	40023c00 	.word	0x40023c00

0805389c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 805389c:	b580      	push	{r7, lr}
 805389e:	b082      	sub	sp, #8
 80538a0:	af00      	add	r7, sp, #0
 80538a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80538a4:	687b      	ldr	r3, [r7, #4]
 80538a6:	2b00      	cmp	r3, #0
 80538a8:	d101      	bne.n	80538ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80538aa:	2301      	movs	r3, #1
 80538ac:	e07b      	b.n	80539a6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80538ae:	687b      	ldr	r3, [r7, #4]
 80538b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80538b2:	2b00      	cmp	r3, #0
 80538b4:	d108      	bne.n	80538c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80538b6:	687b      	ldr	r3, [r7, #4]
 80538b8:	685b      	ldr	r3, [r3, #4]
 80538ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80538be:	d009      	beq.n	80538d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80538c0:	687b      	ldr	r3, [r7, #4]
 80538c2:	2200      	movs	r2, #0
 80538c4:	61da      	str	r2, [r3, #28]
 80538c6:	e005      	b.n	80538d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80538c8:	687b      	ldr	r3, [r7, #4]
 80538ca:	2200      	movs	r2, #0
 80538cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80538ce:	687b      	ldr	r3, [r7, #4]
 80538d0:	2200      	movs	r2, #0
 80538d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80538d4:	687b      	ldr	r3, [r7, #4]
 80538d6:	2200      	movs	r2, #0
 80538d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80538da:	687b      	ldr	r3, [r7, #4]
 80538dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80538e0:	b2db      	uxtb	r3, r3
 80538e2:	2b00      	cmp	r3, #0
 80538e4:	d106      	bne.n	80538f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80538e6:	687b      	ldr	r3, [r7, #4]
 80538e8:	2200      	movs	r2, #0
 80538ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80538ee:	6878      	ldr	r0, [r7, #4]
 80538f0:	f7fa fa10 	bl	804dd14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80538f4:	687b      	ldr	r3, [r7, #4]
 80538f6:	2202      	movs	r2, #2
 80538f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80538fc:	687b      	ldr	r3, [r7, #4]
 80538fe:	681b      	ldr	r3, [r3, #0]
 8053900:	681a      	ldr	r2, [r3, #0]
 8053902:	687b      	ldr	r3, [r7, #4]
 8053904:	681b      	ldr	r3, [r3, #0]
 8053906:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 805390a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 805390c:	687b      	ldr	r3, [r7, #4]
 805390e:	685b      	ldr	r3, [r3, #4]
 8053910:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8053914:	687b      	ldr	r3, [r7, #4]
 8053916:	689b      	ldr	r3, [r3, #8]
 8053918:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 805391c:	431a      	orrs	r2, r3
 805391e:	687b      	ldr	r3, [r7, #4]
 8053920:	68db      	ldr	r3, [r3, #12]
 8053922:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8053926:	431a      	orrs	r2, r3
 8053928:	687b      	ldr	r3, [r7, #4]
 805392a:	691b      	ldr	r3, [r3, #16]
 805392c:	f003 0302 	and.w	r3, r3, #2
 8053930:	431a      	orrs	r2, r3
 8053932:	687b      	ldr	r3, [r7, #4]
 8053934:	695b      	ldr	r3, [r3, #20]
 8053936:	f003 0301 	and.w	r3, r3, #1
 805393a:	431a      	orrs	r2, r3
 805393c:	687b      	ldr	r3, [r7, #4]
 805393e:	699b      	ldr	r3, [r3, #24]
 8053940:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8053944:	431a      	orrs	r2, r3
 8053946:	687b      	ldr	r3, [r7, #4]
 8053948:	69db      	ldr	r3, [r3, #28]
 805394a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 805394e:	431a      	orrs	r2, r3
 8053950:	687b      	ldr	r3, [r7, #4]
 8053952:	6a1b      	ldr	r3, [r3, #32]
 8053954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8053958:	ea42 0103 	orr.w	r1, r2, r3
 805395c:	687b      	ldr	r3, [r7, #4]
 805395e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8053960:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8053964:	687b      	ldr	r3, [r7, #4]
 8053966:	681b      	ldr	r3, [r3, #0]
 8053968:	430a      	orrs	r2, r1
 805396a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 805396c:	687b      	ldr	r3, [r7, #4]
 805396e:	699b      	ldr	r3, [r3, #24]
 8053970:	0c1b      	lsrs	r3, r3, #16
 8053972:	f003 0104 	and.w	r1, r3, #4
 8053976:	687b      	ldr	r3, [r7, #4]
 8053978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 805397a:	f003 0210 	and.w	r2, r3, #16
 805397e:	687b      	ldr	r3, [r7, #4]
 8053980:	681b      	ldr	r3, [r3, #0]
 8053982:	430a      	orrs	r2, r1
 8053984:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8053986:	687b      	ldr	r3, [r7, #4]
 8053988:	681b      	ldr	r3, [r3, #0]
 805398a:	69da      	ldr	r2, [r3, #28]
 805398c:	687b      	ldr	r3, [r7, #4]
 805398e:	681b      	ldr	r3, [r3, #0]
 8053990:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8053994:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8053996:	687b      	ldr	r3, [r7, #4]
 8053998:	2200      	movs	r2, #0
 805399a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 805399c:	687b      	ldr	r3, [r7, #4]
 805399e:	2201      	movs	r2, #1
 80539a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80539a4:	2300      	movs	r3, #0
}
 80539a6:	4618      	mov	r0, r3
 80539a8:	3708      	adds	r7, #8
 80539aa:	46bd      	mov	sp, r7
 80539ac:	bd80      	pop	{r7, pc}

080539ae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80539ae:	b580      	push	{r7, lr}
 80539b0:	b08c      	sub	sp, #48	; 0x30
 80539b2:	af00      	add	r7, sp, #0
 80539b4:	60f8      	str	r0, [r7, #12]
 80539b6:	60b9      	str	r1, [r7, #8]
 80539b8:	607a      	str	r2, [r7, #4]
 80539ba:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80539bc:	2301      	movs	r3, #1
 80539be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80539c0:	2300      	movs	r3, #0
 80539c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80539c6:	68fb      	ldr	r3, [r7, #12]
 80539c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80539cc:	2b01      	cmp	r3, #1
 80539ce:	d101      	bne.n	80539d4 <HAL_SPI_TransmitReceive+0x26>
 80539d0:	2302      	movs	r3, #2
 80539d2:	e18a      	b.n	8053cea <HAL_SPI_TransmitReceive+0x33c>
 80539d4:	68fb      	ldr	r3, [r7, #12]
 80539d6:	2201      	movs	r2, #1
 80539d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80539dc:	f7fb fe2a 	bl	804f634 <HAL_GetTick>
 80539e0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80539e2:	68fb      	ldr	r3, [r7, #12]
 80539e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80539e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80539ec:	68fb      	ldr	r3, [r7, #12]
 80539ee:	685b      	ldr	r3, [r3, #4]
 80539f0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80539f2:	887b      	ldrh	r3, [r7, #2]
 80539f4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80539f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80539fa:	2b01      	cmp	r3, #1
 80539fc:	d00f      	beq.n	8053a1e <HAL_SPI_TransmitReceive+0x70>
 80539fe:	69fb      	ldr	r3, [r7, #28]
 8053a00:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8053a04:	d107      	bne.n	8053a16 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8053a06:	68fb      	ldr	r3, [r7, #12]
 8053a08:	689b      	ldr	r3, [r3, #8]
 8053a0a:	2b00      	cmp	r3, #0
 8053a0c:	d103      	bne.n	8053a16 <HAL_SPI_TransmitReceive+0x68>
 8053a0e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8053a12:	2b04      	cmp	r3, #4
 8053a14:	d003      	beq.n	8053a1e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8053a16:	2302      	movs	r3, #2
 8053a18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8053a1c:	e15b      	b.n	8053cd6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8053a1e:	68bb      	ldr	r3, [r7, #8]
 8053a20:	2b00      	cmp	r3, #0
 8053a22:	d005      	beq.n	8053a30 <HAL_SPI_TransmitReceive+0x82>
 8053a24:	687b      	ldr	r3, [r7, #4]
 8053a26:	2b00      	cmp	r3, #0
 8053a28:	d002      	beq.n	8053a30 <HAL_SPI_TransmitReceive+0x82>
 8053a2a:	887b      	ldrh	r3, [r7, #2]
 8053a2c:	2b00      	cmp	r3, #0
 8053a2e:	d103      	bne.n	8053a38 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8053a30:	2301      	movs	r3, #1
 8053a32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8053a36:	e14e      	b.n	8053cd6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8053a38:	68fb      	ldr	r3, [r7, #12]
 8053a3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8053a3e:	b2db      	uxtb	r3, r3
 8053a40:	2b04      	cmp	r3, #4
 8053a42:	d003      	beq.n	8053a4c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8053a44:	68fb      	ldr	r3, [r7, #12]
 8053a46:	2205      	movs	r2, #5
 8053a48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8053a4c:	68fb      	ldr	r3, [r7, #12]
 8053a4e:	2200      	movs	r2, #0
 8053a50:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8053a52:	68fb      	ldr	r3, [r7, #12]
 8053a54:	687a      	ldr	r2, [r7, #4]
 8053a56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8053a58:	68fb      	ldr	r3, [r7, #12]
 8053a5a:	887a      	ldrh	r2, [r7, #2]
 8053a5c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8053a5e:	68fb      	ldr	r3, [r7, #12]
 8053a60:	887a      	ldrh	r2, [r7, #2]
 8053a62:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8053a64:	68fb      	ldr	r3, [r7, #12]
 8053a66:	68ba      	ldr	r2, [r7, #8]
 8053a68:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8053a6a:	68fb      	ldr	r3, [r7, #12]
 8053a6c:	887a      	ldrh	r2, [r7, #2]
 8053a6e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8053a70:	68fb      	ldr	r3, [r7, #12]
 8053a72:	887a      	ldrh	r2, [r7, #2]
 8053a74:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8053a76:	68fb      	ldr	r3, [r7, #12]
 8053a78:	2200      	movs	r2, #0
 8053a7a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8053a7c:	68fb      	ldr	r3, [r7, #12]
 8053a7e:	2200      	movs	r2, #0
 8053a80:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8053a82:	68fb      	ldr	r3, [r7, #12]
 8053a84:	681b      	ldr	r3, [r3, #0]
 8053a86:	681b      	ldr	r3, [r3, #0]
 8053a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8053a8c:	2b40      	cmp	r3, #64	; 0x40
 8053a8e:	d007      	beq.n	8053aa0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8053a90:	68fb      	ldr	r3, [r7, #12]
 8053a92:	681b      	ldr	r3, [r3, #0]
 8053a94:	681a      	ldr	r2, [r3, #0]
 8053a96:	68fb      	ldr	r3, [r7, #12]
 8053a98:	681b      	ldr	r3, [r3, #0]
 8053a9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8053a9e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8053aa0:	68fb      	ldr	r3, [r7, #12]
 8053aa2:	68db      	ldr	r3, [r3, #12]
 8053aa4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8053aa8:	d178      	bne.n	8053b9c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8053aaa:	68fb      	ldr	r3, [r7, #12]
 8053aac:	685b      	ldr	r3, [r3, #4]
 8053aae:	2b00      	cmp	r3, #0
 8053ab0:	d002      	beq.n	8053ab8 <HAL_SPI_TransmitReceive+0x10a>
 8053ab2:	8b7b      	ldrh	r3, [r7, #26]
 8053ab4:	2b01      	cmp	r3, #1
 8053ab6:	d166      	bne.n	8053b86 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8053ab8:	68fb      	ldr	r3, [r7, #12]
 8053aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8053abc:	881a      	ldrh	r2, [r3, #0]
 8053abe:	68fb      	ldr	r3, [r7, #12]
 8053ac0:	681b      	ldr	r3, [r3, #0]
 8053ac2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8053ac4:	68fb      	ldr	r3, [r7, #12]
 8053ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8053ac8:	1c9a      	adds	r2, r3, #2
 8053aca:	68fb      	ldr	r3, [r7, #12]
 8053acc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8053ace:	68fb      	ldr	r3, [r7, #12]
 8053ad0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8053ad2:	b29b      	uxth	r3, r3
 8053ad4:	3b01      	subs	r3, #1
 8053ad6:	b29a      	uxth	r2, r3
 8053ad8:	68fb      	ldr	r3, [r7, #12]
 8053ada:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8053adc:	e053      	b.n	8053b86 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8053ade:	68fb      	ldr	r3, [r7, #12]
 8053ae0:	681b      	ldr	r3, [r3, #0]
 8053ae2:	689b      	ldr	r3, [r3, #8]
 8053ae4:	f003 0302 	and.w	r3, r3, #2
 8053ae8:	2b02      	cmp	r3, #2
 8053aea:	d11b      	bne.n	8053b24 <HAL_SPI_TransmitReceive+0x176>
 8053aec:	68fb      	ldr	r3, [r7, #12]
 8053aee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8053af0:	b29b      	uxth	r3, r3
 8053af2:	2b00      	cmp	r3, #0
 8053af4:	d016      	beq.n	8053b24 <HAL_SPI_TransmitReceive+0x176>
 8053af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8053af8:	2b01      	cmp	r3, #1
 8053afa:	d113      	bne.n	8053b24 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8053afc:	68fb      	ldr	r3, [r7, #12]
 8053afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8053b00:	881a      	ldrh	r2, [r3, #0]
 8053b02:	68fb      	ldr	r3, [r7, #12]
 8053b04:	681b      	ldr	r3, [r3, #0]
 8053b06:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8053b08:	68fb      	ldr	r3, [r7, #12]
 8053b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8053b0c:	1c9a      	adds	r2, r3, #2
 8053b0e:	68fb      	ldr	r3, [r7, #12]
 8053b10:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8053b12:	68fb      	ldr	r3, [r7, #12]
 8053b14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8053b16:	b29b      	uxth	r3, r3
 8053b18:	3b01      	subs	r3, #1
 8053b1a:	b29a      	uxth	r2, r3
 8053b1c:	68fb      	ldr	r3, [r7, #12]
 8053b1e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8053b20:	2300      	movs	r3, #0
 8053b22:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8053b24:	68fb      	ldr	r3, [r7, #12]
 8053b26:	681b      	ldr	r3, [r3, #0]
 8053b28:	689b      	ldr	r3, [r3, #8]
 8053b2a:	f003 0301 	and.w	r3, r3, #1
 8053b2e:	2b01      	cmp	r3, #1
 8053b30:	d119      	bne.n	8053b66 <HAL_SPI_TransmitReceive+0x1b8>
 8053b32:	68fb      	ldr	r3, [r7, #12]
 8053b34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8053b36:	b29b      	uxth	r3, r3
 8053b38:	2b00      	cmp	r3, #0
 8053b3a:	d014      	beq.n	8053b66 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8053b3c:	68fb      	ldr	r3, [r7, #12]
 8053b3e:	681b      	ldr	r3, [r3, #0]
 8053b40:	68da      	ldr	r2, [r3, #12]
 8053b42:	68fb      	ldr	r3, [r7, #12]
 8053b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8053b46:	b292      	uxth	r2, r2
 8053b48:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8053b4a:	68fb      	ldr	r3, [r7, #12]
 8053b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8053b4e:	1c9a      	adds	r2, r3, #2
 8053b50:	68fb      	ldr	r3, [r7, #12]
 8053b52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8053b54:	68fb      	ldr	r3, [r7, #12]
 8053b56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8053b58:	b29b      	uxth	r3, r3
 8053b5a:	3b01      	subs	r3, #1
 8053b5c:	b29a      	uxth	r2, r3
 8053b5e:	68fb      	ldr	r3, [r7, #12]
 8053b60:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8053b62:	2301      	movs	r3, #1
 8053b64:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8053b66:	f7fb fd65 	bl	804f634 <HAL_GetTick>
 8053b6a:	4602      	mov	r2, r0
 8053b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8053b6e:	1ad3      	subs	r3, r2, r3
 8053b70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8053b72:	429a      	cmp	r2, r3
 8053b74:	d807      	bhi.n	8053b86 <HAL_SPI_TransmitReceive+0x1d8>
 8053b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8053b78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8053b7c:	d003      	beq.n	8053b86 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8053b7e:	2303      	movs	r3, #3
 8053b80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8053b84:	e0a7      	b.n	8053cd6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8053b86:	68fb      	ldr	r3, [r7, #12]
 8053b88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8053b8a:	b29b      	uxth	r3, r3
 8053b8c:	2b00      	cmp	r3, #0
 8053b8e:	d1a6      	bne.n	8053ade <HAL_SPI_TransmitReceive+0x130>
 8053b90:	68fb      	ldr	r3, [r7, #12]
 8053b92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8053b94:	b29b      	uxth	r3, r3
 8053b96:	2b00      	cmp	r3, #0
 8053b98:	d1a1      	bne.n	8053ade <HAL_SPI_TransmitReceive+0x130>
 8053b9a:	e07c      	b.n	8053c96 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8053b9c:	68fb      	ldr	r3, [r7, #12]
 8053b9e:	685b      	ldr	r3, [r3, #4]
 8053ba0:	2b00      	cmp	r3, #0
 8053ba2:	d002      	beq.n	8053baa <HAL_SPI_TransmitReceive+0x1fc>
 8053ba4:	8b7b      	ldrh	r3, [r7, #26]
 8053ba6:	2b01      	cmp	r3, #1
 8053ba8:	d16b      	bne.n	8053c82 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8053baa:	68fb      	ldr	r3, [r7, #12]
 8053bac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8053bae:	68fb      	ldr	r3, [r7, #12]
 8053bb0:	681b      	ldr	r3, [r3, #0]
 8053bb2:	330c      	adds	r3, #12
 8053bb4:	7812      	ldrb	r2, [r2, #0]
 8053bb6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8053bb8:	68fb      	ldr	r3, [r7, #12]
 8053bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8053bbc:	1c5a      	adds	r2, r3, #1
 8053bbe:	68fb      	ldr	r3, [r7, #12]
 8053bc0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8053bc2:	68fb      	ldr	r3, [r7, #12]
 8053bc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8053bc6:	b29b      	uxth	r3, r3
 8053bc8:	3b01      	subs	r3, #1
 8053bca:	b29a      	uxth	r2, r3
 8053bcc:	68fb      	ldr	r3, [r7, #12]
 8053bce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8053bd0:	e057      	b.n	8053c82 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8053bd2:	68fb      	ldr	r3, [r7, #12]
 8053bd4:	681b      	ldr	r3, [r3, #0]
 8053bd6:	689b      	ldr	r3, [r3, #8]
 8053bd8:	f003 0302 	and.w	r3, r3, #2
 8053bdc:	2b02      	cmp	r3, #2
 8053bde:	d11c      	bne.n	8053c1a <HAL_SPI_TransmitReceive+0x26c>
 8053be0:	68fb      	ldr	r3, [r7, #12]
 8053be2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8053be4:	b29b      	uxth	r3, r3
 8053be6:	2b00      	cmp	r3, #0
 8053be8:	d017      	beq.n	8053c1a <HAL_SPI_TransmitReceive+0x26c>
 8053bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8053bec:	2b01      	cmp	r3, #1
 8053bee:	d114      	bne.n	8053c1a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8053bf0:	68fb      	ldr	r3, [r7, #12]
 8053bf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8053bf4:	68fb      	ldr	r3, [r7, #12]
 8053bf6:	681b      	ldr	r3, [r3, #0]
 8053bf8:	330c      	adds	r3, #12
 8053bfa:	7812      	ldrb	r2, [r2, #0]
 8053bfc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8053bfe:	68fb      	ldr	r3, [r7, #12]
 8053c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8053c02:	1c5a      	adds	r2, r3, #1
 8053c04:	68fb      	ldr	r3, [r7, #12]
 8053c06:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8053c08:	68fb      	ldr	r3, [r7, #12]
 8053c0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8053c0c:	b29b      	uxth	r3, r3
 8053c0e:	3b01      	subs	r3, #1
 8053c10:	b29a      	uxth	r2, r3
 8053c12:	68fb      	ldr	r3, [r7, #12]
 8053c14:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8053c16:	2300      	movs	r3, #0
 8053c18:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8053c1a:	68fb      	ldr	r3, [r7, #12]
 8053c1c:	681b      	ldr	r3, [r3, #0]
 8053c1e:	689b      	ldr	r3, [r3, #8]
 8053c20:	f003 0301 	and.w	r3, r3, #1
 8053c24:	2b01      	cmp	r3, #1
 8053c26:	d119      	bne.n	8053c5c <HAL_SPI_TransmitReceive+0x2ae>
 8053c28:	68fb      	ldr	r3, [r7, #12]
 8053c2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8053c2c:	b29b      	uxth	r3, r3
 8053c2e:	2b00      	cmp	r3, #0
 8053c30:	d014      	beq.n	8053c5c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8053c32:	68fb      	ldr	r3, [r7, #12]
 8053c34:	681b      	ldr	r3, [r3, #0]
 8053c36:	68da      	ldr	r2, [r3, #12]
 8053c38:	68fb      	ldr	r3, [r7, #12]
 8053c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8053c3c:	b2d2      	uxtb	r2, r2
 8053c3e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8053c40:	68fb      	ldr	r3, [r7, #12]
 8053c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8053c44:	1c5a      	adds	r2, r3, #1
 8053c46:	68fb      	ldr	r3, [r7, #12]
 8053c48:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8053c4a:	68fb      	ldr	r3, [r7, #12]
 8053c4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8053c4e:	b29b      	uxth	r3, r3
 8053c50:	3b01      	subs	r3, #1
 8053c52:	b29a      	uxth	r2, r3
 8053c54:	68fb      	ldr	r3, [r7, #12]
 8053c56:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8053c58:	2301      	movs	r3, #1
 8053c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8053c5c:	f7fb fcea 	bl	804f634 <HAL_GetTick>
 8053c60:	4602      	mov	r2, r0
 8053c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8053c64:	1ad3      	subs	r3, r2, r3
 8053c66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8053c68:	429a      	cmp	r2, r3
 8053c6a:	d803      	bhi.n	8053c74 <HAL_SPI_TransmitReceive+0x2c6>
 8053c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8053c6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8053c72:	d102      	bne.n	8053c7a <HAL_SPI_TransmitReceive+0x2cc>
 8053c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8053c76:	2b00      	cmp	r3, #0
 8053c78:	d103      	bne.n	8053c82 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8053c7a:	2303      	movs	r3, #3
 8053c7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8053c80:	e029      	b.n	8053cd6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8053c82:	68fb      	ldr	r3, [r7, #12]
 8053c84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8053c86:	b29b      	uxth	r3, r3
 8053c88:	2b00      	cmp	r3, #0
 8053c8a:	d1a2      	bne.n	8053bd2 <HAL_SPI_TransmitReceive+0x224>
 8053c8c:	68fb      	ldr	r3, [r7, #12]
 8053c8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8053c90:	b29b      	uxth	r3, r3
 8053c92:	2b00      	cmp	r3, #0
 8053c94:	d19d      	bne.n	8053bd2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8053c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8053c98:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8053c9a:	68f8      	ldr	r0, [r7, #12]
 8053c9c:	f000 f8b2 	bl	8053e04 <SPI_EndRxTxTransaction>
 8053ca0:	4603      	mov	r3, r0
 8053ca2:	2b00      	cmp	r3, #0
 8053ca4:	d006      	beq.n	8053cb4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8053ca6:	2301      	movs	r3, #1
 8053ca8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8053cac:	68fb      	ldr	r3, [r7, #12]
 8053cae:	2220      	movs	r2, #32
 8053cb0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8053cb2:	e010      	b.n	8053cd6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8053cb4:	68fb      	ldr	r3, [r7, #12]
 8053cb6:	689b      	ldr	r3, [r3, #8]
 8053cb8:	2b00      	cmp	r3, #0
 8053cba:	d10b      	bne.n	8053cd4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8053cbc:	2300      	movs	r3, #0
 8053cbe:	617b      	str	r3, [r7, #20]
 8053cc0:	68fb      	ldr	r3, [r7, #12]
 8053cc2:	681b      	ldr	r3, [r3, #0]
 8053cc4:	68db      	ldr	r3, [r3, #12]
 8053cc6:	617b      	str	r3, [r7, #20]
 8053cc8:	68fb      	ldr	r3, [r7, #12]
 8053cca:	681b      	ldr	r3, [r3, #0]
 8053ccc:	689b      	ldr	r3, [r3, #8]
 8053cce:	617b      	str	r3, [r7, #20]
 8053cd0:	697b      	ldr	r3, [r7, #20]
 8053cd2:	e000      	b.n	8053cd6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8053cd4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8053cd6:	68fb      	ldr	r3, [r7, #12]
 8053cd8:	2201      	movs	r2, #1
 8053cda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8053cde:	68fb      	ldr	r3, [r7, #12]
 8053ce0:	2200      	movs	r2, #0
 8053ce2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8053ce6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8053cea:	4618      	mov	r0, r3
 8053cec:	3730      	adds	r7, #48	; 0x30
 8053cee:	46bd      	mov	sp, r7
 8053cf0:	bd80      	pop	{r7, pc}
	...

08053cf4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8053cf4:	b580      	push	{r7, lr}
 8053cf6:	b088      	sub	sp, #32
 8053cf8:	af00      	add	r7, sp, #0
 8053cfa:	60f8      	str	r0, [r7, #12]
 8053cfc:	60b9      	str	r1, [r7, #8]
 8053cfe:	603b      	str	r3, [r7, #0]
 8053d00:	4613      	mov	r3, r2
 8053d02:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8053d04:	f7fb fc96 	bl	804f634 <HAL_GetTick>
 8053d08:	4602      	mov	r2, r0
 8053d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8053d0c:	1a9b      	subs	r3, r3, r2
 8053d0e:	683a      	ldr	r2, [r7, #0]
 8053d10:	4413      	add	r3, r2
 8053d12:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8053d14:	f7fb fc8e 	bl	804f634 <HAL_GetTick>
 8053d18:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8053d1a:	4b39      	ldr	r3, [pc, #228]	; (8053e00 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8053d1c:	681b      	ldr	r3, [r3, #0]
 8053d1e:	015b      	lsls	r3, r3, #5
 8053d20:	0d1b      	lsrs	r3, r3, #20
 8053d22:	69fa      	ldr	r2, [r7, #28]
 8053d24:	fb02 f303 	mul.w	r3, r2, r3
 8053d28:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8053d2a:	e054      	b.n	8053dd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8053d2c:	683b      	ldr	r3, [r7, #0]
 8053d2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8053d32:	d050      	beq.n	8053dd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8053d34:	f7fb fc7e 	bl	804f634 <HAL_GetTick>
 8053d38:	4602      	mov	r2, r0
 8053d3a:	69bb      	ldr	r3, [r7, #24]
 8053d3c:	1ad3      	subs	r3, r2, r3
 8053d3e:	69fa      	ldr	r2, [r7, #28]
 8053d40:	429a      	cmp	r2, r3
 8053d42:	d902      	bls.n	8053d4a <SPI_WaitFlagStateUntilTimeout+0x56>
 8053d44:	69fb      	ldr	r3, [r7, #28]
 8053d46:	2b00      	cmp	r3, #0
 8053d48:	d13d      	bne.n	8053dc6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8053d4a:	68fb      	ldr	r3, [r7, #12]
 8053d4c:	681b      	ldr	r3, [r3, #0]
 8053d4e:	685a      	ldr	r2, [r3, #4]
 8053d50:	68fb      	ldr	r3, [r7, #12]
 8053d52:	681b      	ldr	r3, [r3, #0]
 8053d54:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8053d58:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8053d5a:	68fb      	ldr	r3, [r7, #12]
 8053d5c:	685b      	ldr	r3, [r3, #4]
 8053d5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8053d62:	d111      	bne.n	8053d88 <SPI_WaitFlagStateUntilTimeout+0x94>
 8053d64:	68fb      	ldr	r3, [r7, #12]
 8053d66:	689b      	ldr	r3, [r3, #8]
 8053d68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8053d6c:	d004      	beq.n	8053d78 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8053d6e:	68fb      	ldr	r3, [r7, #12]
 8053d70:	689b      	ldr	r3, [r3, #8]
 8053d72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8053d76:	d107      	bne.n	8053d88 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8053d78:	68fb      	ldr	r3, [r7, #12]
 8053d7a:	681b      	ldr	r3, [r3, #0]
 8053d7c:	681a      	ldr	r2, [r3, #0]
 8053d7e:	68fb      	ldr	r3, [r7, #12]
 8053d80:	681b      	ldr	r3, [r3, #0]
 8053d82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8053d86:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8053d88:	68fb      	ldr	r3, [r7, #12]
 8053d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8053d8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8053d90:	d10f      	bne.n	8053db2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8053d92:	68fb      	ldr	r3, [r7, #12]
 8053d94:	681b      	ldr	r3, [r3, #0]
 8053d96:	681a      	ldr	r2, [r3, #0]
 8053d98:	68fb      	ldr	r3, [r7, #12]
 8053d9a:	681b      	ldr	r3, [r3, #0]
 8053d9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8053da0:	601a      	str	r2, [r3, #0]
 8053da2:	68fb      	ldr	r3, [r7, #12]
 8053da4:	681b      	ldr	r3, [r3, #0]
 8053da6:	681a      	ldr	r2, [r3, #0]
 8053da8:	68fb      	ldr	r3, [r7, #12]
 8053daa:	681b      	ldr	r3, [r3, #0]
 8053dac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8053db0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8053db2:	68fb      	ldr	r3, [r7, #12]
 8053db4:	2201      	movs	r2, #1
 8053db6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8053dba:	68fb      	ldr	r3, [r7, #12]
 8053dbc:	2200      	movs	r2, #0
 8053dbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8053dc2:	2303      	movs	r3, #3
 8053dc4:	e017      	b.n	8053df6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8053dc6:	697b      	ldr	r3, [r7, #20]
 8053dc8:	2b00      	cmp	r3, #0
 8053dca:	d101      	bne.n	8053dd0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8053dcc:	2300      	movs	r3, #0
 8053dce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8053dd0:	697b      	ldr	r3, [r7, #20]
 8053dd2:	3b01      	subs	r3, #1
 8053dd4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8053dd6:	68fb      	ldr	r3, [r7, #12]
 8053dd8:	681b      	ldr	r3, [r3, #0]
 8053dda:	689a      	ldr	r2, [r3, #8]
 8053ddc:	68bb      	ldr	r3, [r7, #8]
 8053dde:	4013      	ands	r3, r2
 8053de0:	68ba      	ldr	r2, [r7, #8]
 8053de2:	429a      	cmp	r2, r3
 8053de4:	bf0c      	ite	eq
 8053de6:	2301      	moveq	r3, #1
 8053de8:	2300      	movne	r3, #0
 8053dea:	b2db      	uxtb	r3, r3
 8053dec:	461a      	mov	r2, r3
 8053dee:	79fb      	ldrb	r3, [r7, #7]
 8053df0:	429a      	cmp	r2, r3
 8053df2:	d19b      	bne.n	8053d2c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8053df4:	2300      	movs	r3, #0
}
 8053df6:	4618      	mov	r0, r3
 8053df8:	3720      	adds	r7, #32
 8053dfa:	46bd      	mov	sp, r7
 8053dfc:	bd80      	pop	{r7, pc}
 8053dfe:	bf00      	nop
 8053e00:	20007c54 	.word	0x20007c54

08053e04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8053e04:	b580      	push	{r7, lr}
 8053e06:	b088      	sub	sp, #32
 8053e08:	af02      	add	r7, sp, #8
 8053e0a:	60f8      	str	r0, [r7, #12]
 8053e0c:	60b9      	str	r1, [r7, #8]
 8053e0e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8053e10:	4b1b      	ldr	r3, [pc, #108]	; (8053e80 <SPI_EndRxTxTransaction+0x7c>)
 8053e12:	681b      	ldr	r3, [r3, #0]
 8053e14:	4a1b      	ldr	r2, [pc, #108]	; (8053e84 <SPI_EndRxTxTransaction+0x80>)
 8053e16:	fba2 2303 	umull	r2, r3, r2, r3
 8053e1a:	0d5b      	lsrs	r3, r3, #21
 8053e1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8053e20:	fb02 f303 	mul.w	r3, r2, r3
 8053e24:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8053e26:	68fb      	ldr	r3, [r7, #12]
 8053e28:	685b      	ldr	r3, [r3, #4]
 8053e2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8053e2e:	d112      	bne.n	8053e56 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8053e30:	687b      	ldr	r3, [r7, #4]
 8053e32:	9300      	str	r3, [sp, #0]
 8053e34:	68bb      	ldr	r3, [r7, #8]
 8053e36:	2200      	movs	r2, #0
 8053e38:	2180      	movs	r1, #128	; 0x80
 8053e3a:	68f8      	ldr	r0, [r7, #12]
 8053e3c:	f7ff ff5a 	bl	8053cf4 <SPI_WaitFlagStateUntilTimeout>
 8053e40:	4603      	mov	r3, r0
 8053e42:	2b00      	cmp	r3, #0
 8053e44:	d016      	beq.n	8053e74 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8053e46:	68fb      	ldr	r3, [r7, #12]
 8053e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8053e4a:	f043 0220 	orr.w	r2, r3, #32
 8053e4e:	68fb      	ldr	r3, [r7, #12]
 8053e50:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8053e52:	2303      	movs	r3, #3
 8053e54:	e00f      	b.n	8053e76 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8053e56:	697b      	ldr	r3, [r7, #20]
 8053e58:	2b00      	cmp	r3, #0
 8053e5a:	d00a      	beq.n	8053e72 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8053e5c:	697b      	ldr	r3, [r7, #20]
 8053e5e:	3b01      	subs	r3, #1
 8053e60:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8053e62:	68fb      	ldr	r3, [r7, #12]
 8053e64:	681b      	ldr	r3, [r3, #0]
 8053e66:	689b      	ldr	r3, [r3, #8]
 8053e68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8053e6c:	2b80      	cmp	r3, #128	; 0x80
 8053e6e:	d0f2      	beq.n	8053e56 <SPI_EndRxTxTransaction+0x52>
 8053e70:	e000      	b.n	8053e74 <SPI_EndRxTxTransaction+0x70>
        break;
 8053e72:	bf00      	nop
  }

  return HAL_OK;
 8053e74:	2300      	movs	r3, #0
}
 8053e76:	4618      	mov	r0, r3
 8053e78:	3718      	adds	r7, #24
 8053e7a:	46bd      	mov	sp, r7
 8053e7c:	bd80      	pop	{r7, pc}
 8053e7e:	bf00      	nop
 8053e80:	20007c54 	.word	0x20007c54
 8053e84:	165e9f81 	.word	0x165e9f81

08053e88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8053e88:	b580      	push	{r7, lr}
 8053e8a:	b082      	sub	sp, #8
 8053e8c:	af00      	add	r7, sp, #0
 8053e8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8053e90:	687b      	ldr	r3, [r7, #4]
 8053e92:	2b00      	cmp	r3, #0
 8053e94:	d101      	bne.n	8053e9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8053e96:	2301      	movs	r3, #1
 8053e98:	e041      	b.n	8053f1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8053e9a:	687b      	ldr	r3, [r7, #4]
 8053e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8053ea0:	b2db      	uxtb	r3, r3
 8053ea2:	2b00      	cmp	r3, #0
 8053ea4:	d106      	bne.n	8053eb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8053ea6:	687b      	ldr	r3, [r7, #4]
 8053ea8:	2200      	movs	r2, #0
 8053eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8053eae:	6878      	ldr	r0, [r7, #4]
 8053eb0:	f7f9 ff78 	bl	804dda4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8053eb4:	687b      	ldr	r3, [r7, #4]
 8053eb6:	2202      	movs	r2, #2
 8053eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8053ebc:	687b      	ldr	r3, [r7, #4]
 8053ebe:	681a      	ldr	r2, [r3, #0]
 8053ec0:	687b      	ldr	r3, [r7, #4]
 8053ec2:	3304      	adds	r3, #4
 8053ec4:	4619      	mov	r1, r3
 8053ec6:	4610      	mov	r0, r2
 8053ec8:	f000 fc8a 	bl	80547e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8053ecc:	687b      	ldr	r3, [r7, #4]
 8053ece:	2201      	movs	r2, #1
 8053ed0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8053ed4:	687b      	ldr	r3, [r7, #4]
 8053ed6:	2201      	movs	r2, #1
 8053ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8053edc:	687b      	ldr	r3, [r7, #4]
 8053ede:	2201      	movs	r2, #1
 8053ee0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8053ee4:	687b      	ldr	r3, [r7, #4]
 8053ee6:	2201      	movs	r2, #1
 8053ee8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8053eec:	687b      	ldr	r3, [r7, #4]
 8053eee:	2201      	movs	r2, #1
 8053ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8053ef4:	687b      	ldr	r3, [r7, #4]
 8053ef6:	2201      	movs	r2, #1
 8053ef8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8053efc:	687b      	ldr	r3, [r7, #4]
 8053efe:	2201      	movs	r2, #1
 8053f00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8053f04:	687b      	ldr	r3, [r7, #4]
 8053f06:	2201      	movs	r2, #1
 8053f08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8053f0c:	687b      	ldr	r3, [r7, #4]
 8053f0e:	2201      	movs	r2, #1
 8053f10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8053f14:	687b      	ldr	r3, [r7, #4]
 8053f16:	2201      	movs	r2, #1
 8053f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8053f1c:	2300      	movs	r3, #0
}
 8053f1e:	4618      	mov	r0, r3
 8053f20:	3708      	adds	r7, #8
 8053f22:	46bd      	mov	sp, r7
 8053f24:	bd80      	pop	{r7, pc}
	...

08053f28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8053f28:	b480      	push	{r7}
 8053f2a:	b085      	sub	sp, #20
 8053f2c:	af00      	add	r7, sp, #0
 8053f2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8053f30:	687b      	ldr	r3, [r7, #4]
 8053f32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8053f36:	b2db      	uxtb	r3, r3
 8053f38:	2b01      	cmp	r3, #1
 8053f3a:	d001      	beq.n	8053f40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8053f3c:	2301      	movs	r3, #1
 8053f3e:	e04e      	b.n	8053fde <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8053f40:	687b      	ldr	r3, [r7, #4]
 8053f42:	2202      	movs	r2, #2
 8053f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8053f48:	687b      	ldr	r3, [r7, #4]
 8053f4a:	681b      	ldr	r3, [r3, #0]
 8053f4c:	68da      	ldr	r2, [r3, #12]
 8053f4e:	687b      	ldr	r3, [r7, #4]
 8053f50:	681b      	ldr	r3, [r3, #0]
 8053f52:	f042 0201 	orr.w	r2, r2, #1
 8053f56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8053f58:	687b      	ldr	r3, [r7, #4]
 8053f5a:	681b      	ldr	r3, [r3, #0]
 8053f5c:	4a23      	ldr	r2, [pc, #140]	; (8053fec <HAL_TIM_Base_Start_IT+0xc4>)
 8053f5e:	4293      	cmp	r3, r2
 8053f60:	d022      	beq.n	8053fa8 <HAL_TIM_Base_Start_IT+0x80>
 8053f62:	687b      	ldr	r3, [r7, #4]
 8053f64:	681b      	ldr	r3, [r3, #0]
 8053f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8053f6a:	d01d      	beq.n	8053fa8 <HAL_TIM_Base_Start_IT+0x80>
 8053f6c:	687b      	ldr	r3, [r7, #4]
 8053f6e:	681b      	ldr	r3, [r3, #0]
 8053f70:	4a1f      	ldr	r2, [pc, #124]	; (8053ff0 <HAL_TIM_Base_Start_IT+0xc8>)
 8053f72:	4293      	cmp	r3, r2
 8053f74:	d018      	beq.n	8053fa8 <HAL_TIM_Base_Start_IT+0x80>
 8053f76:	687b      	ldr	r3, [r7, #4]
 8053f78:	681b      	ldr	r3, [r3, #0]
 8053f7a:	4a1e      	ldr	r2, [pc, #120]	; (8053ff4 <HAL_TIM_Base_Start_IT+0xcc>)
 8053f7c:	4293      	cmp	r3, r2
 8053f7e:	d013      	beq.n	8053fa8 <HAL_TIM_Base_Start_IT+0x80>
 8053f80:	687b      	ldr	r3, [r7, #4]
 8053f82:	681b      	ldr	r3, [r3, #0]
 8053f84:	4a1c      	ldr	r2, [pc, #112]	; (8053ff8 <HAL_TIM_Base_Start_IT+0xd0>)
 8053f86:	4293      	cmp	r3, r2
 8053f88:	d00e      	beq.n	8053fa8 <HAL_TIM_Base_Start_IT+0x80>
 8053f8a:	687b      	ldr	r3, [r7, #4]
 8053f8c:	681b      	ldr	r3, [r3, #0]
 8053f8e:	4a1b      	ldr	r2, [pc, #108]	; (8053ffc <HAL_TIM_Base_Start_IT+0xd4>)
 8053f90:	4293      	cmp	r3, r2
 8053f92:	d009      	beq.n	8053fa8 <HAL_TIM_Base_Start_IT+0x80>
 8053f94:	687b      	ldr	r3, [r7, #4]
 8053f96:	681b      	ldr	r3, [r3, #0]
 8053f98:	4a19      	ldr	r2, [pc, #100]	; (8054000 <HAL_TIM_Base_Start_IT+0xd8>)
 8053f9a:	4293      	cmp	r3, r2
 8053f9c:	d004      	beq.n	8053fa8 <HAL_TIM_Base_Start_IT+0x80>
 8053f9e:	687b      	ldr	r3, [r7, #4]
 8053fa0:	681b      	ldr	r3, [r3, #0]
 8053fa2:	4a18      	ldr	r2, [pc, #96]	; (8054004 <HAL_TIM_Base_Start_IT+0xdc>)
 8053fa4:	4293      	cmp	r3, r2
 8053fa6:	d111      	bne.n	8053fcc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8053fa8:	687b      	ldr	r3, [r7, #4]
 8053faa:	681b      	ldr	r3, [r3, #0]
 8053fac:	689b      	ldr	r3, [r3, #8]
 8053fae:	f003 0307 	and.w	r3, r3, #7
 8053fb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8053fb4:	68fb      	ldr	r3, [r7, #12]
 8053fb6:	2b06      	cmp	r3, #6
 8053fb8:	d010      	beq.n	8053fdc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8053fba:	687b      	ldr	r3, [r7, #4]
 8053fbc:	681b      	ldr	r3, [r3, #0]
 8053fbe:	681a      	ldr	r2, [r3, #0]
 8053fc0:	687b      	ldr	r3, [r7, #4]
 8053fc2:	681b      	ldr	r3, [r3, #0]
 8053fc4:	f042 0201 	orr.w	r2, r2, #1
 8053fc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8053fca:	e007      	b.n	8053fdc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8053fcc:	687b      	ldr	r3, [r7, #4]
 8053fce:	681b      	ldr	r3, [r3, #0]
 8053fd0:	681a      	ldr	r2, [r3, #0]
 8053fd2:	687b      	ldr	r3, [r7, #4]
 8053fd4:	681b      	ldr	r3, [r3, #0]
 8053fd6:	f042 0201 	orr.w	r2, r2, #1
 8053fda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8053fdc:	2300      	movs	r3, #0
}
 8053fde:	4618      	mov	r0, r3
 8053fe0:	3714      	adds	r7, #20
 8053fe2:	46bd      	mov	sp, r7
 8053fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8053fe8:	4770      	bx	lr
 8053fea:	bf00      	nop
 8053fec:	40010000 	.word	0x40010000
 8053ff0:	40000400 	.word	0x40000400
 8053ff4:	40000800 	.word	0x40000800
 8053ff8:	40000c00 	.word	0x40000c00
 8053ffc:	40010400 	.word	0x40010400
 8054000:	40014000 	.word	0x40014000
 8054004:	40001800 	.word	0x40001800

08054008 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8054008:	b480      	push	{r7}
 805400a:	b083      	sub	sp, #12
 805400c:	af00      	add	r7, sp, #0
 805400e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8054010:	687b      	ldr	r3, [r7, #4]
 8054012:	681b      	ldr	r3, [r3, #0]
 8054014:	68da      	ldr	r2, [r3, #12]
 8054016:	687b      	ldr	r3, [r7, #4]
 8054018:	681b      	ldr	r3, [r3, #0]
 805401a:	f022 0201 	bic.w	r2, r2, #1
 805401e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8054020:	687b      	ldr	r3, [r7, #4]
 8054022:	681b      	ldr	r3, [r3, #0]
 8054024:	6a1a      	ldr	r2, [r3, #32]
 8054026:	f241 1311 	movw	r3, #4369	; 0x1111
 805402a:	4013      	ands	r3, r2
 805402c:	2b00      	cmp	r3, #0
 805402e:	d10f      	bne.n	8054050 <HAL_TIM_Base_Stop_IT+0x48>
 8054030:	687b      	ldr	r3, [r7, #4]
 8054032:	681b      	ldr	r3, [r3, #0]
 8054034:	6a1a      	ldr	r2, [r3, #32]
 8054036:	f240 4344 	movw	r3, #1092	; 0x444
 805403a:	4013      	ands	r3, r2
 805403c:	2b00      	cmp	r3, #0
 805403e:	d107      	bne.n	8054050 <HAL_TIM_Base_Stop_IT+0x48>
 8054040:	687b      	ldr	r3, [r7, #4]
 8054042:	681b      	ldr	r3, [r3, #0]
 8054044:	681a      	ldr	r2, [r3, #0]
 8054046:	687b      	ldr	r3, [r7, #4]
 8054048:	681b      	ldr	r3, [r3, #0]
 805404a:	f022 0201 	bic.w	r2, r2, #1
 805404e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8054050:	687b      	ldr	r3, [r7, #4]
 8054052:	2201      	movs	r2, #1
 8054054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8054058:	2300      	movs	r3, #0
}
 805405a:	4618      	mov	r0, r3
 805405c:	370c      	adds	r7, #12
 805405e:	46bd      	mov	sp, r7
 8054060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8054064:	4770      	bx	lr

08054066 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8054066:	b580      	push	{r7, lr}
 8054068:	b082      	sub	sp, #8
 805406a:	af00      	add	r7, sp, #0
 805406c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 805406e:	687b      	ldr	r3, [r7, #4]
 8054070:	2b00      	cmp	r3, #0
 8054072:	d101      	bne.n	8054078 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8054074:	2301      	movs	r3, #1
 8054076:	e041      	b.n	80540fc <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8054078:	687b      	ldr	r3, [r7, #4]
 805407a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 805407e:	b2db      	uxtb	r3, r3
 8054080:	2b00      	cmp	r3, #0
 8054082:	d106      	bne.n	8054092 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8054084:	687b      	ldr	r3, [r7, #4]
 8054086:	2200      	movs	r2, #0
 8054088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 805408c:	6878      	ldr	r0, [r7, #4]
 805408e:	f000 f839 	bl	8054104 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8054092:	687b      	ldr	r3, [r7, #4]
 8054094:	2202      	movs	r2, #2
 8054096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 805409a:	687b      	ldr	r3, [r7, #4]
 805409c:	681a      	ldr	r2, [r3, #0]
 805409e:	687b      	ldr	r3, [r7, #4]
 80540a0:	3304      	adds	r3, #4
 80540a2:	4619      	mov	r1, r3
 80540a4:	4610      	mov	r0, r2
 80540a6:	f000 fb9b 	bl	80547e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80540aa:	687b      	ldr	r3, [r7, #4]
 80540ac:	2201      	movs	r2, #1
 80540ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80540b2:	687b      	ldr	r3, [r7, #4]
 80540b4:	2201      	movs	r2, #1
 80540b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80540ba:	687b      	ldr	r3, [r7, #4]
 80540bc:	2201      	movs	r2, #1
 80540be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80540c2:	687b      	ldr	r3, [r7, #4]
 80540c4:	2201      	movs	r2, #1
 80540c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80540ca:	687b      	ldr	r3, [r7, #4]
 80540cc:	2201      	movs	r2, #1
 80540ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80540d2:	687b      	ldr	r3, [r7, #4]
 80540d4:	2201      	movs	r2, #1
 80540d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80540da:	687b      	ldr	r3, [r7, #4]
 80540dc:	2201      	movs	r2, #1
 80540de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80540e2:	687b      	ldr	r3, [r7, #4]
 80540e4:	2201      	movs	r2, #1
 80540e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80540ea:	687b      	ldr	r3, [r7, #4]
 80540ec:	2201      	movs	r2, #1
 80540ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80540f2:	687b      	ldr	r3, [r7, #4]
 80540f4:	2201      	movs	r2, #1
 80540f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80540fa:	2300      	movs	r3, #0
}
 80540fc:	4618      	mov	r0, r3
 80540fe:	3708      	adds	r7, #8
 8054100:	46bd      	mov	sp, r7
 8054102:	bd80      	pop	{r7, pc}

08054104 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8054104:	b480      	push	{r7}
 8054106:	b083      	sub	sp, #12
 8054108:	af00      	add	r7, sp, #0
 805410a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 805410c:	bf00      	nop
 805410e:	370c      	adds	r7, #12
 8054110:	46bd      	mov	sp, r7
 8054112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8054116:	4770      	bx	lr

08054118 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8054118:	b580      	push	{r7, lr}
 805411a:	b082      	sub	sp, #8
 805411c:	af00      	add	r7, sp, #0
 805411e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8054120:	687b      	ldr	r3, [r7, #4]
 8054122:	2b00      	cmp	r3, #0
 8054124:	d101      	bne.n	805412a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8054126:	2301      	movs	r3, #1
 8054128:	e041      	b.n	80541ae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 805412a:	687b      	ldr	r3, [r7, #4]
 805412c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8054130:	b2db      	uxtb	r3, r3
 8054132:	2b00      	cmp	r3, #0
 8054134:	d106      	bne.n	8054144 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8054136:	687b      	ldr	r3, [r7, #4]
 8054138:	2200      	movs	r2, #0
 805413a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 805413e:	6878      	ldr	r0, [r7, #4]
 8054140:	f000 f839 	bl	80541b6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8054144:	687b      	ldr	r3, [r7, #4]
 8054146:	2202      	movs	r2, #2
 8054148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 805414c:	687b      	ldr	r3, [r7, #4]
 805414e:	681a      	ldr	r2, [r3, #0]
 8054150:	687b      	ldr	r3, [r7, #4]
 8054152:	3304      	adds	r3, #4
 8054154:	4619      	mov	r1, r3
 8054156:	4610      	mov	r0, r2
 8054158:	f000 fb42 	bl	80547e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 805415c:	687b      	ldr	r3, [r7, #4]
 805415e:	2201      	movs	r2, #1
 8054160:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8054164:	687b      	ldr	r3, [r7, #4]
 8054166:	2201      	movs	r2, #1
 8054168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 805416c:	687b      	ldr	r3, [r7, #4]
 805416e:	2201      	movs	r2, #1
 8054170:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8054174:	687b      	ldr	r3, [r7, #4]
 8054176:	2201      	movs	r2, #1
 8054178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 805417c:	687b      	ldr	r3, [r7, #4]
 805417e:	2201      	movs	r2, #1
 8054180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8054184:	687b      	ldr	r3, [r7, #4]
 8054186:	2201      	movs	r2, #1
 8054188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 805418c:	687b      	ldr	r3, [r7, #4]
 805418e:	2201      	movs	r2, #1
 8054190:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8054194:	687b      	ldr	r3, [r7, #4]
 8054196:	2201      	movs	r2, #1
 8054198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 805419c:	687b      	ldr	r3, [r7, #4]
 805419e:	2201      	movs	r2, #1
 80541a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80541a4:	687b      	ldr	r3, [r7, #4]
 80541a6:	2201      	movs	r2, #1
 80541a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80541ac:	2300      	movs	r3, #0
}
 80541ae:	4618      	mov	r0, r3
 80541b0:	3708      	adds	r7, #8
 80541b2:	46bd      	mov	sp, r7
 80541b4:	bd80      	pop	{r7, pc}

080541b6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80541b6:	b480      	push	{r7}
 80541b8:	b083      	sub	sp, #12
 80541ba:	af00      	add	r7, sp, #0
 80541bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80541be:	bf00      	nop
 80541c0:	370c      	adds	r7, #12
 80541c2:	46bd      	mov	sp, r7
 80541c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80541c8:	4770      	bx	lr

080541ca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80541ca:	b580      	push	{r7, lr}
 80541cc:	b082      	sub	sp, #8
 80541ce:	af00      	add	r7, sp, #0
 80541d0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80541d2:	687b      	ldr	r3, [r7, #4]
 80541d4:	681b      	ldr	r3, [r3, #0]
 80541d6:	691b      	ldr	r3, [r3, #16]
 80541d8:	f003 0302 	and.w	r3, r3, #2
 80541dc:	2b02      	cmp	r3, #2
 80541de:	d122      	bne.n	8054226 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80541e0:	687b      	ldr	r3, [r7, #4]
 80541e2:	681b      	ldr	r3, [r3, #0]
 80541e4:	68db      	ldr	r3, [r3, #12]
 80541e6:	f003 0302 	and.w	r3, r3, #2
 80541ea:	2b02      	cmp	r3, #2
 80541ec:	d11b      	bne.n	8054226 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80541ee:	687b      	ldr	r3, [r7, #4]
 80541f0:	681b      	ldr	r3, [r3, #0]
 80541f2:	f06f 0202 	mvn.w	r2, #2
 80541f6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80541f8:	687b      	ldr	r3, [r7, #4]
 80541fa:	2201      	movs	r2, #1
 80541fc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80541fe:	687b      	ldr	r3, [r7, #4]
 8054200:	681b      	ldr	r3, [r3, #0]
 8054202:	699b      	ldr	r3, [r3, #24]
 8054204:	f003 0303 	and.w	r3, r3, #3
 8054208:	2b00      	cmp	r3, #0
 805420a:	d003      	beq.n	8054214 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 805420c:	6878      	ldr	r0, [r7, #4]
 805420e:	f000 fac9 	bl	80547a4 <HAL_TIM_IC_CaptureCallback>
 8054212:	e005      	b.n	8054220 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8054214:	6878      	ldr	r0, [r7, #4]
 8054216:	f000 fabb 	bl	8054790 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 805421a:	6878      	ldr	r0, [r7, #4]
 805421c:	f000 facc 	bl	80547b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8054220:	687b      	ldr	r3, [r7, #4]
 8054222:	2200      	movs	r2, #0
 8054224:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8054226:	687b      	ldr	r3, [r7, #4]
 8054228:	681b      	ldr	r3, [r3, #0]
 805422a:	691b      	ldr	r3, [r3, #16]
 805422c:	f003 0304 	and.w	r3, r3, #4
 8054230:	2b04      	cmp	r3, #4
 8054232:	d122      	bne.n	805427a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8054234:	687b      	ldr	r3, [r7, #4]
 8054236:	681b      	ldr	r3, [r3, #0]
 8054238:	68db      	ldr	r3, [r3, #12]
 805423a:	f003 0304 	and.w	r3, r3, #4
 805423e:	2b04      	cmp	r3, #4
 8054240:	d11b      	bne.n	805427a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8054242:	687b      	ldr	r3, [r7, #4]
 8054244:	681b      	ldr	r3, [r3, #0]
 8054246:	f06f 0204 	mvn.w	r2, #4
 805424a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 805424c:	687b      	ldr	r3, [r7, #4]
 805424e:	2202      	movs	r2, #2
 8054250:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8054252:	687b      	ldr	r3, [r7, #4]
 8054254:	681b      	ldr	r3, [r3, #0]
 8054256:	699b      	ldr	r3, [r3, #24]
 8054258:	f403 7340 	and.w	r3, r3, #768	; 0x300
 805425c:	2b00      	cmp	r3, #0
 805425e:	d003      	beq.n	8054268 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8054260:	6878      	ldr	r0, [r7, #4]
 8054262:	f000 fa9f 	bl	80547a4 <HAL_TIM_IC_CaptureCallback>
 8054266:	e005      	b.n	8054274 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8054268:	6878      	ldr	r0, [r7, #4]
 805426a:	f000 fa91 	bl	8054790 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 805426e:	6878      	ldr	r0, [r7, #4]
 8054270:	f000 faa2 	bl	80547b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8054274:	687b      	ldr	r3, [r7, #4]
 8054276:	2200      	movs	r2, #0
 8054278:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 805427a:	687b      	ldr	r3, [r7, #4]
 805427c:	681b      	ldr	r3, [r3, #0]
 805427e:	691b      	ldr	r3, [r3, #16]
 8054280:	f003 0308 	and.w	r3, r3, #8
 8054284:	2b08      	cmp	r3, #8
 8054286:	d122      	bne.n	80542ce <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8054288:	687b      	ldr	r3, [r7, #4]
 805428a:	681b      	ldr	r3, [r3, #0]
 805428c:	68db      	ldr	r3, [r3, #12]
 805428e:	f003 0308 	and.w	r3, r3, #8
 8054292:	2b08      	cmp	r3, #8
 8054294:	d11b      	bne.n	80542ce <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8054296:	687b      	ldr	r3, [r7, #4]
 8054298:	681b      	ldr	r3, [r3, #0]
 805429a:	f06f 0208 	mvn.w	r2, #8
 805429e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80542a0:	687b      	ldr	r3, [r7, #4]
 80542a2:	2204      	movs	r2, #4
 80542a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80542a6:	687b      	ldr	r3, [r7, #4]
 80542a8:	681b      	ldr	r3, [r3, #0]
 80542aa:	69db      	ldr	r3, [r3, #28]
 80542ac:	f003 0303 	and.w	r3, r3, #3
 80542b0:	2b00      	cmp	r3, #0
 80542b2:	d003      	beq.n	80542bc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80542b4:	6878      	ldr	r0, [r7, #4]
 80542b6:	f000 fa75 	bl	80547a4 <HAL_TIM_IC_CaptureCallback>
 80542ba:	e005      	b.n	80542c8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80542bc:	6878      	ldr	r0, [r7, #4]
 80542be:	f000 fa67 	bl	8054790 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80542c2:	6878      	ldr	r0, [r7, #4]
 80542c4:	f000 fa78 	bl	80547b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80542c8:	687b      	ldr	r3, [r7, #4]
 80542ca:	2200      	movs	r2, #0
 80542cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80542ce:	687b      	ldr	r3, [r7, #4]
 80542d0:	681b      	ldr	r3, [r3, #0]
 80542d2:	691b      	ldr	r3, [r3, #16]
 80542d4:	f003 0310 	and.w	r3, r3, #16
 80542d8:	2b10      	cmp	r3, #16
 80542da:	d122      	bne.n	8054322 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80542dc:	687b      	ldr	r3, [r7, #4]
 80542de:	681b      	ldr	r3, [r3, #0]
 80542e0:	68db      	ldr	r3, [r3, #12]
 80542e2:	f003 0310 	and.w	r3, r3, #16
 80542e6:	2b10      	cmp	r3, #16
 80542e8:	d11b      	bne.n	8054322 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80542ea:	687b      	ldr	r3, [r7, #4]
 80542ec:	681b      	ldr	r3, [r3, #0]
 80542ee:	f06f 0210 	mvn.w	r2, #16
 80542f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80542f4:	687b      	ldr	r3, [r7, #4]
 80542f6:	2208      	movs	r2, #8
 80542f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80542fa:	687b      	ldr	r3, [r7, #4]
 80542fc:	681b      	ldr	r3, [r3, #0]
 80542fe:	69db      	ldr	r3, [r3, #28]
 8054300:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8054304:	2b00      	cmp	r3, #0
 8054306:	d003      	beq.n	8054310 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8054308:	6878      	ldr	r0, [r7, #4]
 805430a:	f000 fa4b 	bl	80547a4 <HAL_TIM_IC_CaptureCallback>
 805430e:	e005      	b.n	805431c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8054310:	6878      	ldr	r0, [r7, #4]
 8054312:	f000 fa3d 	bl	8054790 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8054316:	6878      	ldr	r0, [r7, #4]
 8054318:	f000 fa4e 	bl	80547b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 805431c:	687b      	ldr	r3, [r7, #4]
 805431e:	2200      	movs	r2, #0
 8054320:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8054322:	687b      	ldr	r3, [r7, #4]
 8054324:	681b      	ldr	r3, [r3, #0]
 8054326:	691b      	ldr	r3, [r3, #16]
 8054328:	f003 0301 	and.w	r3, r3, #1
 805432c:	2b01      	cmp	r3, #1
 805432e:	d10e      	bne.n	805434e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8054330:	687b      	ldr	r3, [r7, #4]
 8054332:	681b      	ldr	r3, [r3, #0]
 8054334:	68db      	ldr	r3, [r3, #12]
 8054336:	f003 0301 	and.w	r3, r3, #1
 805433a:	2b01      	cmp	r3, #1
 805433c:	d107      	bne.n	805434e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 805433e:	687b      	ldr	r3, [r7, #4]
 8054340:	681b      	ldr	r3, [r3, #0]
 8054342:	f06f 0201 	mvn.w	r2, #1
 8054346:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8054348:	6878      	ldr	r0, [r7, #4]
 805434a:	f7f5 fbbd 	bl	8049ac8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 805434e:	687b      	ldr	r3, [r7, #4]
 8054350:	681b      	ldr	r3, [r3, #0]
 8054352:	691b      	ldr	r3, [r3, #16]
 8054354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8054358:	2b80      	cmp	r3, #128	; 0x80
 805435a:	d10e      	bne.n	805437a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 805435c:	687b      	ldr	r3, [r7, #4]
 805435e:	681b      	ldr	r3, [r3, #0]
 8054360:	68db      	ldr	r3, [r3, #12]
 8054362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8054366:	2b80      	cmp	r3, #128	; 0x80
 8054368:	d107      	bne.n	805437a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 805436a:	687b      	ldr	r3, [r7, #4]
 805436c:	681b      	ldr	r3, [r3, #0]
 805436e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8054372:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8054374:	6878      	ldr	r0, [r7, #4]
 8054376:	f000 fdf5 	bl	8054f64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 805437a:	687b      	ldr	r3, [r7, #4]
 805437c:	681b      	ldr	r3, [r3, #0]
 805437e:	691b      	ldr	r3, [r3, #16]
 8054380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8054384:	2b40      	cmp	r3, #64	; 0x40
 8054386:	d10e      	bne.n	80543a6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8054388:	687b      	ldr	r3, [r7, #4]
 805438a:	681b      	ldr	r3, [r3, #0]
 805438c:	68db      	ldr	r3, [r3, #12]
 805438e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8054392:	2b40      	cmp	r3, #64	; 0x40
 8054394:	d107      	bne.n	80543a6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8054396:	687b      	ldr	r3, [r7, #4]
 8054398:	681b      	ldr	r3, [r3, #0]
 805439a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 805439e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80543a0:	6878      	ldr	r0, [r7, #4]
 80543a2:	f000 fa13 	bl	80547cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80543a6:	687b      	ldr	r3, [r7, #4]
 80543a8:	681b      	ldr	r3, [r3, #0]
 80543aa:	691b      	ldr	r3, [r3, #16]
 80543ac:	f003 0320 	and.w	r3, r3, #32
 80543b0:	2b20      	cmp	r3, #32
 80543b2:	d10e      	bne.n	80543d2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80543b4:	687b      	ldr	r3, [r7, #4]
 80543b6:	681b      	ldr	r3, [r3, #0]
 80543b8:	68db      	ldr	r3, [r3, #12]
 80543ba:	f003 0320 	and.w	r3, r3, #32
 80543be:	2b20      	cmp	r3, #32
 80543c0:	d107      	bne.n	80543d2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80543c2:	687b      	ldr	r3, [r7, #4]
 80543c4:	681b      	ldr	r3, [r3, #0]
 80543c6:	f06f 0220 	mvn.w	r2, #32
 80543ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80543cc:	6878      	ldr	r0, [r7, #4]
 80543ce:	f000 fdbf 	bl	8054f50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80543d2:	bf00      	nop
 80543d4:	3708      	adds	r7, #8
 80543d6:	46bd      	mov	sp, r7
 80543d8:	bd80      	pop	{r7, pc}
	...

080543dc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80543dc:	b580      	push	{r7, lr}
 80543de:	b084      	sub	sp, #16
 80543e0:	af00      	add	r7, sp, #0
 80543e2:	60f8      	str	r0, [r7, #12]
 80543e4:	60b9      	str	r1, [r7, #8]
 80543e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80543e8:	68fb      	ldr	r3, [r7, #12]
 80543ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80543ee:	2b01      	cmp	r3, #1
 80543f0:	d101      	bne.n	80543f6 <HAL_TIM_OC_ConfigChannel+0x1a>
 80543f2:	2302      	movs	r3, #2
 80543f4:	e046      	b.n	8054484 <HAL_TIM_OC_ConfigChannel+0xa8>
 80543f6:	68fb      	ldr	r3, [r7, #12]
 80543f8:	2201      	movs	r2, #1
 80543fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80543fe:	687b      	ldr	r3, [r7, #4]
 8054400:	2b0c      	cmp	r3, #12
 8054402:	d839      	bhi.n	8054478 <HAL_TIM_OC_ConfigChannel+0x9c>
 8054404:	a201      	add	r2, pc, #4	; (adr r2, 805440c <HAL_TIM_OC_ConfigChannel+0x30>)
 8054406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 805440a:	bf00      	nop
 805440c:	08054441 	.word	0x08054441
 8054410:	08054479 	.word	0x08054479
 8054414:	08054479 	.word	0x08054479
 8054418:	08054479 	.word	0x08054479
 805441c:	0805444f 	.word	0x0805444f
 8054420:	08054479 	.word	0x08054479
 8054424:	08054479 	.word	0x08054479
 8054428:	08054479 	.word	0x08054479
 805442c:	0805445d 	.word	0x0805445d
 8054430:	08054479 	.word	0x08054479
 8054434:	08054479 	.word	0x08054479
 8054438:	08054479 	.word	0x08054479
 805443c:	0805446b 	.word	0x0805446b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8054440:	68fb      	ldr	r3, [r7, #12]
 8054442:	681b      	ldr	r3, [r3, #0]
 8054444:	68b9      	ldr	r1, [r7, #8]
 8054446:	4618      	mov	r0, r3
 8054448:	f000 fa6a 	bl	8054920 <TIM_OC1_SetConfig>
      break;
 805444c:	e015      	b.n	805447a <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 805444e:	68fb      	ldr	r3, [r7, #12]
 8054450:	681b      	ldr	r3, [r3, #0]
 8054452:	68b9      	ldr	r1, [r7, #8]
 8054454:	4618      	mov	r0, r3
 8054456:	f000 fad3 	bl	8054a00 <TIM_OC2_SetConfig>
      break;
 805445a:	e00e      	b.n	805447a <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 805445c:	68fb      	ldr	r3, [r7, #12]
 805445e:	681b      	ldr	r3, [r3, #0]
 8054460:	68b9      	ldr	r1, [r7, #8]
 8054462:	4618      	mov	r0, r3
 8054464:	f000 fb42 	bl	8054aec <TIM_OC3_SetConfig>
      break;
 8054468:	e007      	b.n	805447a <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 805446a:	68fb      	ldr	r3, [r7, #12]
 805446c:	681b      	ldr	r3, [r3, #0]
 805446e:	68b9      	ldr	r1, [r7, #8]
 8054470:	4618      	mov	r0, r3
 8054472:	f000 fbaf 	bl	8054bd4 <TIM_OC4_SetConfig>
      break;
 8054476:	e000      	b.n	805447a <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8054478:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 805447a:	68fb      	ldr	r3, [r7, #12]
 805447c:	2200      	movs	r2, #0
 805447e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8054482:	2300      	movs	r3, #0
}
 8054484:	4618      	mov	r0, r3
 8054486:	3710      	adds	r7, #16
 8054488:	46bd      	mov	sp, r7
 805448a:	bd80      	pop	{r7, pc}

0805448c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 805448c:	b580      	push	{r7, lr}
 805448e:	b084      	sub	sp, #16
 8054490:	af00      	add	r7, sp, #0
 8054492:	60f8      	str	r0, [r7, #12]
 8054494:	60b9      	str	r1, [r7, #8]
 8054496:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8054498:	68fb      	ldr	r3, [r7, #12]
 805449a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 805449e:	2b01      	cmp	r3, #1
 80544a0:	d101      	bne.n	80544a6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80544a2:	2302      	movs	r3, #2
 80544a4:	e0ac      	b.n	8054600 <HAL_TIM_PWM_ConfigChannel+0x174>
 80544a6:	68fb      	ldr	r3, [r7, #12]
 80544a8:	2201      	movs	r2, #1
 80544aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80544ae:	687b      	ldr	r3, [r7, #4]
 80544b0:	2b0c      	cmp	r3, #12
 80544b2:	f200 809f 	bhi.w	80545f4 <HAL_TIM_PWM_ConfigChannel+0x168>
 80544b6:	a201      	add	r2, pc, #4	; (adr r2, 80544bc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80544b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80544bc:	080544f1 	.word	0x080544f1
 80544c0:	080545f5 	.word	0x080545f5
 80544c4:	080545f5 	.word	0x080545f5
 80544c8:	080545f5 	.word	0x080545f5
 80544cc:	08054531 	.word	0x08054531
 80544d0:	080545f5 	.word	0x080545f5
 80544d4:	080545f5 	.word	0x080545f5
 80544d8:	080545f5 	.word	0x080545f5
 80544dc:	08054573 	.word	0x08054573
 80544e0:	080545f5 	.word	0x080545f5
 80544e4:	080545f5 	.word	0x080545f5
 80544e8:	080545f5 	.word	0x080545f5
 80544ec:	080545b3 	.word	0x080545b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80544f0:	68fb      	ldr	r3, [r7, #12]
 80544f2:	681b      	ldr	r3, [r3, #0]
 80544f4:	68b9      	ldr	r1, [r7, #8]
 80544f6:	4618      	mov	r0, r3
 80544f8:	f000 fa12 	bl	8054920 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80544fc:	68fb      	ldr	r3, [r7, #12]
 80544fe:	681b      	ldr	r3, [r3, #0]
 8054500:	699a      	ldr	r2, [r3, #24]
 8054502:	68fb      	ldr	r3, [r7, #12]
 8054504:	681b      	ldr	r3, [r3, #0]
 8054506:	f042 0208 	orr.w	r2, r2, #8
 805450a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 805450c:	68fb      	ldr	r3, [r7, #12]
 805450e:	681b      	ldr	r3, [r3, #0]
 8054510:	699a      	ldr	r2, [r3, #24]
 8054512:	68fb      	ldr	r3, [r7, #12]
 8054514:	681b      	ldr	r3, [r3, #0]
 8054516:	f022 0204 	bic.w	r2, r2, #4
 805451a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 805451c:	68fb      	ldr	r3, [r7, #12]
 805451e:	681b      	ldr	r3, [r3, #0]
 8054520:	6999      	ldr	r1, [r3, #24]
 8054522:	68bb      	ldr	r3, [r7, #8]
 8054524:	691a      	ldr	r2, [r3, #16]
 8054526:	68fb      	ldr	r3, [r7, #12]
 8054528:	681b      	ldr	r3, [r3, #0]
 805452a:	430a      	orrs	r2, r1
 805452c:	619a      	str	r2, [r3, #24]
      break;
 805452e:	e062      	b.n	80545f6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8054530:	68fb      	ldr	r3, [r7, #12]
 8054532:	681b      	ldr	r3, [r3, #0]
 8054534:	68b9      	ldr	r1, [r7, #8]
 8054536:	4618      	mov	r0, r3
 8054538:	f000 fa62 	bl	8054a00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 805453c:	68fb      	ldr	r3, [r7, #12]
 805453e:	681b      	ldr	r3, [r3, #0]
 8054540:	699a      	ldr	r2, [r3, #24]
 8054542:	68fb      	ldr	r3, [r7, #12]
 8054544:	681b      	ldr	r3, [r3, #0]
 8054546:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 805454a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 805454c:	68fb      	ldr	r3, [r7, #12]
 805454e:	681b      	ldr	r3, [r3, #0]
 8054550:	699a      	ldr	r2, [r3, #24]
 8054552:	68fb      	ldr	r3, [r7, #12]
 8054554:	681b      	ldr	r3, [r3, #0]
 8054556:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 805455a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 805455c:	68fb      	ldr	r3, [r7, #12]
 805455e:	681b      	ldr	r3, [r3, #0]
 8054560:	6999      	ldr	r1, [r3, #24]
 8054562:	68bb      	ldr	r3, [r7, #8]
 8054564:	691b      	ldr	r3, [r3, #16]
 8054566:	021a      	lsls	r2, r3, #8
 8054568:	68fb      	ldr	r3, [r7, #12]
 805456a:	681b      	ldr	r3, [r3, #0]
 805456c:	430a      	orrs	r2, r1
 805456e:	619a      	str	r2, [r3, #24]
      break;
 8054570:	e041      	b.n	80545f6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8054572:	68fb      	ldr	r3, [r7, #12]
 8054574:	681b      	ldr	r3, [r3, #0]
 8054576:	68b9      	ldr	r1, [r7, #8]
 8054578:	4618      	mov	r0, r3
 805457a:	f000 fab7 	bl	8054aec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 805457e:	68fb      	ldr	r3, [r7, #12]
 8054580:	681b      	ldr	r3, [r3, #0]
 8054582:	69da      	ldr	r2, [r3, #28]
 8054584:	68fb      	ldr	r3, [r7, #12]
 8054586:	681b      	ldr	r3, [r3, #0]
 8054588:	f042 0208 	orr.w	r2, r2, #8
 805458c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 805458e:	68fb      	ldr	r3, [r7, #12]
 8054590:	681b      	ldr	r3, [r3, #0]
 8054592:	69da      	ldr	r2, [r3, #28]
 8054594:	68fb      	ldr	r3, [r7, #12]
 8054596:	681b      	ldr	r3, [r3, #0]
 8054598:	f022 0204 	bic.w	r2, r2, #4
 805459c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 805459e:	68fb      	ldr	r3, [r7, #12]
 80545a0:	681b      	ldr	r3, [r3, #0]
 80545a2:	69d9      	ldr	r1, [r3, #28]
 80545a4:	68bb      	ldr	r3, [r7, #8]
 80545a6:	691a      	ldr	r2, [r3, #16]
 80545a8:	68fb      	ldr	r3, [r7, #12]
 80545aa:	681b      	ldr	r3, [r3, #0]
 80545ac:	430a      	orrs	r2, r1
 80545ae:	61da      	str	r2, [r3, #28]
      break;
 80545b0:	e021      	b.n	80545f6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80545b2:	68fb      	ldr	r3, [r7, #12]
 80545b4:	681b      	ldr	r3, [r3, #0]
 80545b6:	68b9      	ldr	r1, [r7, #8]
 80545b8:	4618      	mov	r0, r3
 80545ba:	f000 fb0b 	bl	8054bd4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80545be:	68fb      	ldr	r3, [r7, #12]
 80545c0:	681b      	ldr	r3, [r3, #0]
 80545c2:	69da      	ldr	r2, [r3, #28]
 80545c4:	68fb      	ldr	r3, [r7, #12]
 80545c6:	681b      	ldr	r3, [r3, #0]
 80545c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80545cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80545ce:	68fb      	ldr	r3, [r7, #12]
 80545d0:	681b      	ldr	r3, [r3, #0]
 80545d2:	69da      	ldr	r2, [r3, #28]
 80545d4:	68fb      	ldr	r3, [r7, #12]
 80545d6:	681b      	ldr	r3, [r3, #0]
 80545d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80545dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80545de:	68fb      	ldr	r3, [r7, #12]
 80545e0:	681b      	ldr	r3, [r3, #0]
 80545e2:	69d9      	ldr	r1, [r3, #28]
 80545e4:	68bb      	ldr	r3, [r7, #8]
 80545e6:	691b      	ldr	r3, [r3, #16]
 80545e8:	021a      	lsls	r2, r3, #8
 80545ea:	68fb      	ldr	r3, [r7, #12]
 80545ec:	681b      	ldr	r3, [r3, #0]
 80545ee:	430a      	orrs	r2, r1
 80545f0:	61da      	str	r2, [r3, #28]
      break;
 80545f2:	e000      	b.n	80545f6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80545f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80545f6:	68fb      	ldr	r3, [r7, #12]
 80545f8:	2200      	movs	r2, #0
 80545fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80545fe:	2300      	movs	r3, #0
}
 8054600:	4618      	mov	r0, r3
 8054602:	3710      	adds	r7, #16
 8054604:	46bd      	mov	sp, r7
 8054606:	bd80      	pop	{r7, pc}

08054608 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8054608:	b580      	push	{r7, lr}
 805460a:	b084      	sub	sp, #16
 805460c:	af00      	add	r7, sp, #0
 805460e:	6078      	str	r0, [r7, #4]
 8054610:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8054612:	687b      	ldr	r3, [r7, #4]
 8054614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8054618:	2b01      	cmp	r3, #1
 805461a:	d101      	bne.n	8054620 <HAL_TIM_ConfigClockSource+0x18>
 805461c:	2302      	movs	r3, #2
 805461e:	e0b3      	b.n	8054788 <HAL_TIM_ConfigClockSource+0x180>
 8054620:	687b      	ldr	r3, [r7, #4]
 8054622:	2201      	movs	r2, #1
 8054624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8054628:	687b      	ldr	r3, [r7, #4]
 805462a:	2202      	movs	r2, #2
 805462c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8054630:	687b      	ldr	r3, [r7, #4]
 8054632:	681b      	ldr	r3, [r3, #0]
 8054634:	689b      	ldr	r3, [r3, #8]
 8054636:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8054638:	68fb      	ldr	r3, [r7, #12]
 805463a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 805463e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8054640:	68fb      	ldr	r3, [r7, #12]
 8054642:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8054646:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8054648:	687b      	ldr	r3, [r7, #4]
 805464a:	681b      	ldr	r3, [r3, #0]
 805464c:	68fa      	ldr	r2, [r7, #12]
 805464e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8054650:	683b      	ldr	r3, [r7, #0]
 8054652:	681b      	ldr	r3, [r3, #0]
 8054654:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8054658:	d03e      	beq.n	80546d8 <HAL_TIM_ConfigClockSource+0xd0>
 805465a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 805465e:	f200 8087 	bhi.w	8054770 <HAL_TIM_ConfigClockSource+0x168>
 8054662:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8054666:	f000 8085 	beq.w	8054774 <HAL_TIM_ConfigClockSource+0x16c>
 805466a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 805466e:	d87f      	bhi.n	8054770 <HAL_TIM_ConfigClockSource+0x168>
 8054670:	2b70      	cmp	r3, #112	; 0x70
 8054672:	d01a      	beq.n	80546aa <HAL_TIM_ConfigClockSource+0xa2>
 8054674:	2b70      	cmp	r3, #112	; 0x70
 8054676:	d87b      	bhi.n	8054770 <HAL_TIM_ConfigClockSource+0x168>
 8054678:	2b60      	cmp	r3, #96	; 0x60
 805467a:	d050      	beq.n	805471e <HAL_TIM_ConfigClockSource+0x116>
 805467c:	2b60      	cmp	r3, #96	; 0x60
 805467e:	d877      	bhi.n	8054770 <HAL_TIM_ConfigClockSource+0x168>
 8054680:	2b50      	cmp	r3, #80	; 0x50
 8054682:	d03c      	beq.n	80546fe <HAL_TIM_ConfigClockSource+0xf6>
 8054684:	2b50      	cmp	r3, #80	; 0x50
 8054686:	d873      	bhi.n	8054770 <HAL_TIM_ConfigClockSource+0x168>
 8054688:	2b40      	cmp	r3, #64	; 0x40
 805468a:	d058      	beq.n	805473e <HAL_TIM_ConfigClockSource+0x136>
 805468c:	2b40      	cmp	r3, #64	; 0x40
 805468e:	d86f      	bhi.n	8054770 <HAL_TIM_ConfigClockSource+0x168>
 8054690:	2b30      	cmp	r3, #48	; 0x30
 8054692:	d064      	beq.n	805475e <HAL_TIM_ConfigClockSource+0x156>
 8054694:	2b30      	cmp	r3, #48	; 0x30
 8054696:	d86b      	bhi.n	8054770 <HAL_TIM_ConfigClockSource+0x168>
 8054698:	2b20      	cmp	r3, #32
 805469a:	d060      	beq.n	805475e <HAL_TIM_ConfigClockSource+0x156>
 805469c:	2b20      	cmp	r3, #32
 805469e:	d867      	bhi.n	8054770 <HAL_TIM_ConfigClockSource+0x168>
 80546a0:	2b00      	cmp	r3, #0
 80546a2:	d05c      	beq.n	805475e <HAL_TIM_ConfigClockSource+0x156>
 80546a4:	2b10      	cmp	r3, #16
 80546a6:	d05a      	beq.n	805475e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80546a8:	e062      	b.n	8054770 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80546aa:	687b      	ldr	r3, [r7, #4]
 80546ac:	6818      	ldr	r0, [r3, #0]
 80546ae:	683b      	ldr	r3, [r7, #0]
 80546b0:	6899      	ldr	r1, [r3, #8]
 80546b2:	683b      	ldr	r3, [r7, #0]
 80546b4:	685a      	ldr	r2, [r3, #4]
 80546b6:	683b      	ldr	r3, [r7, #0]
 80546b8:	68db      	ldr	r3, [r3, #12]
 80546ba:	f000 fb5b 	bl	8054d74 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80546be:	687b      	ldr	r3, [r7, #4]
 80546c0:	681b      	ldr	r3, [r3, #0]
 80546c2:	689b      	ldr	r3, [r3, #8]
 80546c4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80546c6:	68fb      	ldr	r3, [r7, #12]
 80546c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80546cc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80546ce:	687b      	ldr	r3, [r7, #4]
 80546d0:	681b      	ldr	r3, [r3, #0]
 80546d2:	68fa      	ldr	r2, [r7, #12]
 80546d4:	609a      	str	r2, [r3, #8]
      break;
 80546d6:	e04e      	b.n	8054776 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80546d8:	687b      	ldr	r3, [r7, #4]
 80546da:	6818      	ldr	r0, [r3, #0]
 80546dc:	683b      	ldr	r3, [r7, #0]
 80546de:	6899      	ldr	r1, [r3, #8]
 80546e0:	683b      	ldr	r3, [r7, #0]
 80546e2:	685a      	ldr	r2, [r3, #4]
 80546e4:	683b      	ldr	r3, [r7, #0]
 80546e6:	68db      	ldr	r3, [r3, #12]
 80546e8:	f000 fb44 	bl	8054d74 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80546ec:	687b      	ldr	r3, [r7, #4]
 80546ee:	681b      	ldr	r3, [r3, #0]
 80546f0:	689a      	ldr	r2, [r3, #8]
 80546f2:	687b      	ldr	r3, [r7, #4]
 80546f4:	681b      	ldr	r3, [r3, #0]
 80546f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80546fa:	609a      	str	r2, [r3, #8]
      break;
 80546fc:	e03b      	b.n	8054776 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80546fe:	687b      	ldr	r3, [r7, #4]
 8054700:	6818      	ldr	r0, [r3, #0]
 8054702:	683b      	ldr	r3, [r7, #0]
 8054704:	6859      	ldr	r1, [r3, #4]
 8054706:	683b      	ldr	r3, [r7, #0]
 8054708:	68db      	ldr	r3, [r3, #12]
 805470a:	461a      	mov	r2, r3
 805470c:	f000 fab8 	bl	8054c80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8054710:	687b      	ldr	r3, [r7, #4]
 8054712:	681b      	ldr	r3, [r3, #0]
 8054714:	2150      	movs	r1, #80	; 0x50
 8054716:	4618      	mov	r0, r3
 8054718:	f000 fb11 	bl	8054d3e <TIM_ITRx_SetConfig>
      break;
 805471c:	e02b      	b.n	8054776 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 805471e:	687b      	ldr	r3, [r7, #4]
 8054720:	6818      	ldr	r0, [r3, #0]
 8054722:	683b      	ldr	r3, [r7, #0]
 8054724:	6859      	ldr	r1, [r3, #4]
 8054726:	683b      	ldr	r3, [r7, #0]
 8054728:	68db      	ldr	r3, [r3, #12]
 805472a:	461a      	mov	r2, r3
 805472c:	f000 fad7 	bl	8054cde <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8054730:	687b      	ldr	r3, [r7, #4]
 8054732:	681b      	ldr	r3, [r3, #0]
 8054734:	2160      	movs	r1, #96	; 0x60
 8054736:	4618      	mov	r0, r3
 8054738:	f000 fb01 	bl	8054d3e <TIM_ITRx_SetConfig>
      break;
 805473c:	e01b      	b.n	8054776 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 805473e:	687b      	ldr	r3, [r7, #4]
 8054740:	6818      	ldr	r0, [r3, #0]
 8054742:	683b      	ldr	r3, [r7, #0]
 8054744:	6859      	ldr	r1, [r3, #4]
 8054746:	683b      	ldr	r3, [r7, #0]
 8054748:	68db      	ldr	r3, [r3, #12]
 805474a:	461a      	mov	r2, r3
 805474c:	f000 fa98 	bl	8054c80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8054750:	687b      	ldr	r3, [r7, #4]
 8054752:	681b      	ldr	r3, [r3, #0]
 8054754:	2140      	movs	r1, #64	; 0x40
 8054756:	4618      	mov	r0, r3
 8054758:	f000 faf1 	bl	8054d3e <TIM_ITRx_SetConfig>
      break;
 805475c:	e00b      	b.n	8054776 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 805475e:	687b      	ldr	r3, [r7, #4]
 8054760:	681a      	ldr	r2, [r3, #0]
 8054762:	683b      	ldr	r3, [r7, #0]
 8054764:	681b      	ldr	r3, [r3, #0]
 8054766:	4619      	mov	r1, r3
 8054768:	4610      	mov	r0, r2
 805476a:	f000 fae8 	bl	8054d3e <TIM_ITRx_SetConfig>
        break;
 805476e:	e002      	b.n	8054776 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8054770:	bf00      	nop
 8054772:	e000      	b.n	8054776 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8054774:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8054776:	687b      	ldr	r3, [r7, #4]
 8054778:	2201      	movs	r2, #1
 805477a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 805477e:	687b      	ldr	r3, [r7, #4]
 8054780:	2200      	movs	r2, #0
 8054782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8054786:	2300      	movs	r3, #0
}
 8054788:	4618      	mov	r0, r3
 805478a:	3710      	adds	r7, #16
 805478c:	46bd      	mov	sp, r7
 805478e:	bd80      	pop	{r7, pc}

08054790 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8054790:	b480      	push	{r7}
 8054792:	b083      	sub	sp, #12
 8054794:	af00      	add	r7, sp, #0
 8054796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8054798:	bf00      	nop
 805479a:	370c      	adds	r7, #12
 805479c:	46bd      	mov	sp, r7
 805479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80547a2:	4770      	bx	lr

080547a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80547a4:	b480      	push	{r7}
 80547a6:	b083      	sub	sp, #12
 80547a8:	af00      	add	r7, sp, #0
 80547aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80547ac:	bf00      	nop
 80547ae:	370c      	adds	r7, #12
 80547b0:	46bd      	mov	sp, r7
 80547b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80547b6:	4770      	bx	lr

080547b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80547b8:	b480      	push	{r7}
 80547ba:	b083      	sub	sp, #12
 80547bc:	af00      	add	r7, sp, #0
 80547be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80547c0:	bf00      	nop
 80547c2:	370c      	adds	r7, #12
 80547c4:	46bd      	mov	sp, r7
 80547c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80547ca:	4770      	bx	lr

080547cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80547cc:	b480      	push	{r7}
 80547ce:	b083      	sub	sp, #12
 80547d0:	af00      	add	r7, sp, #0
 80547d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80547d4:	bf00      	nop
 80547d6:	370c      	adds	r7, #12
 80547d8:	46bd      	mov	sp, r7
 80547da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80547de:	4770      	bx	lr

080547e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80547e0:	b480      	push	{r7}
 80547e2:	b085      	sub	sp, #20
 80547e4:	af00      	add	r7, sp, #0
 80547e6:	6078      	str	r0, [r7, #4]
 80547e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80547ea:	687b      	ldr	r3, [r7, #4]
 80547ec:	681b      	ldr	r3, [r3, #0]
 80547ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80547f0:	687b      	ldr	r3, [r7, #4]
 80547f2:	4a40      	ldr	r2, [pc, #256]	; (80548f4 <TIM_Base_SetConfig+0x114>)
 80547f4:	4293      	cmp	r3, r2
 80547f6:	d013      	beq.n	8054820 <TIM_Base_SetConfig+0x40>
 80547f8:	687b      	ldr	r3, [r7, #4]
 80547fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80547fe:	d00f      	beq.n	8054820 <TIM_Base_SetConfig+0x40>
 8054800:	687b      	ldr	r3, [r7, #4]
 8054802:	4a3d      	ldr	r2, [pc, #244]	; (80548f8 <TIM_Base_SetConfig+0x118>)
 8054804:	4293      	cmp	r3, r2
 8054806:	d00b      	beq.n	8054820 <TIM_Base_SetConfig+0x40>
 8054808:	687b      	ldr	r3, [r7, #4]
 805480a:	4a3c      	ldr	r2, [pc, #240]	; (80548fc <TIM_Base_SetConfig+0x11c>)
 805480c:	4293      	cmp	r3, r2
 805480e:	d007      	beq.n	8054820 <TIM_Base_SetConfig+0x40>
 8054810:	687b      	ldr	r3, [r7, #4]
 8054812:	4a3b      	ldr	r2, [pc, #236]	; (8054900 <TIM_Base_SetConfig+0x120>)
 8054814:	4293      	cmp	r3, r2
 8054816:	d003      	beq.n	8054820 <TIM_Base_SetConfig+0x40>
 8054818:	687b      	ldr	r3, [r7, #4]
 805481a:	4a3a      	ldr	r2, [pc, #232]	; (8054904 <TIM_Base_SetConfig+0x124>)
 805481c:	4293      	cmp	r3, r2
 805481e:	d108      	bne.n	8054832 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8054820:	68fb      	ldr	r3, [r7, #12]
 8054822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8054826:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8054828:	683b      	ldr	r3, [r7, #0]
 805482a:	685b      	ldr	r3, [r3, #4]
 805482c:	68fa      	ldr	r2, [r7, #12]
 805482e:	4313      	orrs	r3, r2
 8054830:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8054832:	687b      	ldr	r3, [r7, #4]
 8054834:	4a2f      	ldr	r2, [pc, #188]	; (80548f4 <TIM_Base_SetConfig+0x114>)
 8054836:	4293      	cmp	r3, r2
 8054838:	d02b      	beq.n	8054892 <TIM_Base_SetConfig+0xb2>
 805483a:	687b      	ldr	r3, [r7, #4]
 805483c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8054840:	d027      	beq.n	8054892 <TIM_Base_SetConfig+0xb2>
 8054842:	687b      	ldr	r3, [r7, #4]
 8054844:	4a2c      	ldr	r2, [pc, #176]	; (80548f8 <TIM_Base_SetConfig+0x118>)
 8054846:	4293      	cmp	r3, r2
 8054848:	d023      	beq.n	8054892 <TIM_Base_SetConfig+0xb2>
 805484a:	687b      	ldr	r3, [r7, #4]
 805484c:	4a2b      	ldr	r2, [pc, #172]	; (80548fc <TIM_Base_SetConfig+0x11c>)
 805484e:	4293      	cmp	r3, r2
 8054850:	d01f      	beq.n	8054892 <TIM_Base_SetConfig+0xb2>
 8054852:	687b      	ldr	r3, [r7, #4]
 8054854:	4a2a      	ldr	r2, [pc, #168]	; (8054900 <TIM_Base_SetConfig+0x120>)
 8054856:	4293      	cmp	r3, r2
 8054858:	d01b      	beq.n	8054892 <TIM_Base_SetConfig+0xb2>
 805485a:	687b      	ldr	r3, [r7, #4]
 805485c:	4a29      	ldr	r2, [pc, #164]	; (8054904 <TIM_Base_SetConfig+0x124>)
 805485e:	4293      	cmp	r3, r2
 8054860:	d017      	beq.n	8054892 <TIM_Base_SetConfig+0xb2>
 8054862:	687b      	ldr	r3, [r7, #4]
 8054864:	4a28      	ldr	r2, [pc, #160]	; (8054908 <TIM_Base_SetConfig+0x128>)
 8054866:	4293      	cmp	r3, r2
 8054868:	d013      	beq.n	8054892 <TIM_Base_SetConfig+0xb2>
 805486a:	687b      	ldr	r3, [r7, #4]
 805486c:	4a27      	ldr	r2, [pc, #156]	; (805490c <TIM_Base_SetConfig+0x12c>)
 805486e:	4293      	cmp	r3, r2
 8054870:	d00f      	beq.n	8054892 <TIM_Base_SetConfig+0xb2>
 8054872:	687b      	ldr	r3, [r7, #4]
 8054874:	4a26      	ldr	r2, [pc, #152]	; (8054910 <TIM_Base_SetConfig+0x130>)
 8054876:	4293      	cmp	r3, r2
 8054878:	d00b      	beq.n	8054892 <TIM_Base_SetConfig+0xb2>
 805487a:	687b      	ldr	r3, [r7, #4]
 805487c:	4a25      	ldr	r2, [pc, #148]	; (8054914 <TIM_Base_SetConfig+0x134>)
 805487e:	4293      	cmp	r3, r2
 8054880:	d007      	beq.n	8054892 <TIM_Base_SetConfig+0xb2>
 8054882:	687b      	ldr	r3, [r7, #4]
 8054884:	4a24      	ldr	r2, [pc, #144]	; (8054918 <TIM_Base_SetConfig+0x138>)
 8054886:	4293      	cmp	r3, r2
 8054888:	d003      	beq.n	8054892 <TIM_Base_SetConfig+0xb2>
 805488a:	687b      	ldr	r3, [r7, #4]
 805488c:	4a23      	ldr	r2, [pc, #140]	; (805491c <TIM_Base_SetConfig+0x13c>)
 805488e:	4293      	cmp	r3, r2
 8054890:	d108      	bne.n	80548a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8054892:	68fb      	ldr	r3, [r7, #12]
 8054894:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8054898:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 805489a:	683b      	ldr	r3, [r7, #0]
 805489c:	68db      	ldr	r3, [r3, #12]
 805489e:	68fa      	ldr	r2, [r7, #12]
 80548a0:	4313      	orrs	r3, r2
 80548a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80548a4:	68fb      	ldr	r3, [r7, #12]
 80548a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80548aa:	683b      	ldr	r3, [r7, #0]
 80548ac:	695b      	ldr	r3, [r3, #20]
 80548ae:	4313      	orrs	r3, r2
 80548b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80548b2:	687b      	ldr	r3, [r7, #4]
 80548b4:	68fa      	ldr	r2, [r7, #12]
 80548b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80548b8:	683b      	ldr	r3, [r7, #0]
 80548ba:	689a      	ldr	r2, [r3, #8]
 80548bc:	687b      	ldr	r3, [r7, #4]
 80548be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80548c0:	683b      	ldr	r3, [r7, #0]
 80548c2:	681a      	ldr	r2, [r3, #0]
 80548c4:	687b      	ldr	r3, [r7, #4]
 80548c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80548c8:	687b      	ldr	r3, [r7, #4]
 80548ca:	4a0a      	ldr	r2, [pc, #40]	; (80548f4 <TIM_Base_SetConfig+0x114>)
 80548cc:	4293      	cmp	r3, r2
 80548ce:	d003      	beq.n	80548d8 <TIM_Base_SetConfig+0xf8>
 80548d0:	687b      	ldr	r3, [r7, #4]
 80548d2:	4a0c      	ldr	r2, [pc, #48]	; (8054904 <TIM_Base_SetConfig+0x124>)
 80548d4:	4293      	cmp	r3, r2
 80548d6:	d103      	bne.n	80548e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80548d8:	683b      	ldr	r3, [r7, #0]
 80548da:	691a      	ldr	r2, [r3, #16]
 80548dc:	687b      	ldr	r3, [r7, #4]
 80548de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80548e0:	687b      	ldr	r3, [r7, #4]
 80548e2:	2201      	movs	r2, #1
 80548e4:	615a      	str	r2, [r3, #20]
}
 80548e6:	bf00      	nop
 80548e8:	3714      	adds	r7, #20
 80548ea:	46bd      	mov	sp, r7
 80548ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80548f0:	4770      	bx	lr
 80548f2:	bf00      	nop
 80548f4:	40010000 	.word	0x40010000
 80548f8:	40000400 	.word	0x40000400
 80548fc:	40000800 	.word	0x40000800
 8054900:	40000c00 	.word	0x40000c00
 8054904:	40010400 	.word	0x40010400
 8054908:	40014000 	.word	0x40014000
 805490c:	40014400 	.word	0x40014400
 8054910:	40014800 	.word	0x40014800
 8054914:	40001800 	.word	0x40001800
 8054918:	40001c00 	.word	0x40001c00
 805491c:	40002000 	.word	0x40002000

08054920 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8054920:	b480      	push	{r7}
 8054922:	b087      	sub	sp, #28
 8054924:	af00      	add	r7, sp, #0
 8054926:	6078      	str	r0, [r7, #4]
 8054928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 805492a:	687b      	ldr	r3, [r7, #4]
 805492c:	6a1b      	ldr	r3, [r3, #32]
 805492e:	f023 0201 	bic.w	r2, r3, #1
 8054932:	687b      	ldr	r3, [r7, #4]
 8054934:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8054936:	687b      	ldr	r3, [r7, #4]
 8054938:	6a1b      	ldr	r3, [r3, #32]
 805493a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 805493c:	687b      	ldr	r3, [r7, #4]
 805493e:	685b      	ldr	r3, [r3, #4]
 8054940:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8054942:	687b      	ldr	r3, [r7, #4]
 8054944:	699b      	ldr	r3, [r3, #24]
 8054946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8054948:	68fb      	ldr	r3, [r7, #12]
 805494a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 805494e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8054950:	68fb      	ldr	r3, [r7, #12]
 8054952:	f023 0303 	bic.w	r3, r3, #3
 8054956:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8054958:	683b      	ldr	r3, [r7, #0]
 805495a:	681b      	ldr	r3, [r3, #0]
 805495c:	68fa      	ldr	r2, [r7, #12]
 805495e:	4313      	orrs	r3, r2
 8054960:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8054962:	697b      	ldr	r3, [r7, #20]
 8054964:	f023 0302 	bic.w	r3, r3, #2
 8054968:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 805496a:	683b      	ldr	r3, [r7, #0]
 805496c:	689b      	ldr	r3, [r3, #8]
 805496e:	697a      	ldr	r2, [r7, #20]
 8054970:	4313      	orrs	r3, r2
 8054972:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8054974:	687b      	ldr	r3, [r7, #4]
 8054976:	4a20      	ldr	r2, [pc, #128]	; (80549f8 <TIM_OC1_SetConfig+0xd8>)
 8054978:	4293      	cmp	r3, r2
 805497a:	d003      	beq.n	8054984 <TIM_OC1_SetConfig+0x64>
 805497c:	687b      	ldr	r3, [r7, #4]
 805497e:	4a1f      	ldr	r2, [pc, #124]	; (80549fc <TIM_OC1_SetConfig+0xdc>)
 8054980:	4293      	cmp	r3, r2
 8054982:	d10c      	bne.n	805499e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8054984:	697b      	ldr	r3, [r7, #20]
 8054986:	f023 0308 	bic.w	r3, r3, #8
 805498a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 805498c:	683b      	ldr	r3, [r7, #0]
 805498e:	68db      	ldr	r3, [r3, #12]
 8054990:	697a      	ldr	r2, [r7, #20]
 8054992:	4313      	orrs	r3, r2
 8054994:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8054996:	697b      	ldr	r3, [r7, #20]
 8054998:	f023 0304 	bic.w	r3, r3, #4
 805499c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 805499e:	687b      	ldr	r3, [r7, #4]
 80549a0:	4a15      	ldr	r2, [pc, #84]	; (80549f8 <TIM_OC1_SetConfig+0xd8>)
 80549a2:	4293      	cmp	r3, r2
 80549a4:	d003      	beq.n	80549ae <TIM_OC1_SetConfig+0x8e>
 80549a6:	687b      	ldr	r3, [r7, #4]
 80549a8:	4a14      	ldr	r2, [pc, #80]	; (80549fc <TIM_OC1_SetConfig+0xdc>)
 80549aa:	4293      	cmp	r3, r2
 80549ac:	d111      	bne.n	80549d2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80549ae:	693b      	ldr	r3, [r7, #16]
 80549b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80549b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80549b6:	693b      	ldr	r3, [r7, #16]
 80549b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80549bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80549be:	683b      	ldr	r3, [r7, #0]
 80549c0:	695b      	ldr	r3, [r3, #20]
 80549c2:	693a      	ldr	r2, [r7, #16]
 80549c4:	4313      	orrs	r3, r2
 80549c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80549c8:	683b      	ldr	r3, [r7, #0]
 80549ca:	699b      	ldr	r3, [r3, #24]
 80549cc:	693a      	ldr	r2, [r7, #16]
 80549ce:	4313      	orrs	r3, r2
 80549d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80549d2:	687b      	ldr	r3, [r7, #4]
 80549d4:	693a      	ldr	r2, [r7, #16]
 80549d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80549d8:	687b      	ldr	r3, [r7, #4]
 80549da:	68fa      	ldr	r2, [r7, #12]
 80549dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80549de:	683b      	ldr	r3, [r7, #0]
 80549e0:	685a      	ldr	r2, [r3, #4]
 80549e2:	687b      	ldr	r3, [r7, #4]
 80549e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80549e6:	687b      	ldr	r3, [r7, #4]
 80549e8:	697a      	ldr	r2, [r7, #20]
 80549ea:	621a      	str	r2, [r3, #32]
}
 80549ec:	bf00      	nop
 80549ee:	371c      	adds	r7, #28
 80549f0:	46bd      	mov	sp, r7
 80549f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80549f6:	4770      	bx	lr
 80549f8:	40010000 	.word	0x40010000
 80549fc:	40010400 	.word	0x40010400

08054a00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8054a00:	b480      	push	{r7}
 8054a02:	b087      	sub	sp, #28
 8054a04:	af00      	add	r7, sp, #0
 8054a06:	6078      	str	r0, [r7, #4]
 8054a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8054a0a:	687b      	ldr	r3, [r7, #4]
 8054a0c:	6a1b      	ldr	r3, [r3, #32]
 8054a0e:	f023 0210 	bic.w	r2, r3, #16
 8054a12:	687b      	ldr	r3, [r7, #4]
 8054a14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8054a16:	687b      	ldr	r3, [r7, #4]
 8054a18:	6a1b      	ldr	r3, [r3, #32]
 8054a1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8054a1c:	687b      	ldr	r3, [r7, #4]
 8054a1e:	685b      	ldr	r3, [r3, #4]
 8054a20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8054a22:	687b      	ldr	r3, [r7, #4]
 8054a24:	699b      	ldr	r3, [r3, #24]
 8054a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8054a28:	68fb      	ldr	r3, [r7, #12]
 8054a2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8054a2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8054a30:	68fb      	ldr	r3, [r7, #12]
 8054a32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8054a36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8054a38:	683b      	ldr	r3, [r7, #0]
 8054a3a:	681b      	ldr	r3, [r3, #0]
 8054a3c:	021b      	lsls	r3, r3, #8
 8054a3e:	68fa      	ldr	r2, [r7, #12]
 8054a40:	4313      	orrs	r3, r2
 8054a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8054a44:	697b      	ldr	r3, [r7, #20]
 8054a46:	f023 0320 	bic.w	r3, r3, #32
 8054a4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8054a4c:	683b      	ldr	r3, [r7, #0]
 8054a4e:	689b      	ldr	r3, [r3, #8]
 8054a50:	011b      	lsls	r3, r3, #4
 8054a52:	697a      	ldr	r2, [r7, #20]
 8054a54:	4313      	orrs	r3, r2
 8054a56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8054a58:	687b      	ldr	r3, [r7, #4]
 8054a5a:	4a22      	ldr	r2, [pc, #136]	; (8054ae4 <TIM_OC2_SetConfig+0xe4>)
 8054a5c:	4293      	cmp	r3, r2
 8054a5e:	d003      	beq.n	8054a68 <TIM_OC2_SetConfig+0x68>
 8054a60:	687b      	ldr	r3, [r7, #4]
 8054a62:	4a21      	ldr	r2, [pc, #132]	; (8054ae8 <TIM_OC2_SetConfig+0xe8>)
 8054a64:	4293      	cmp	r3, r2
 8054a66:	d10d      	bne.n	8054a84 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8054a68:	697b      	ldr	r3, [r7, #20]
 8054a6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8054a6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8054a70:	683b      	ldr	r3, [r7, #0]
 8054a72:	68db      	ldr	r3, [r3, #12]
 8054a74:	011b      	lsls	r3, r3, #4
 8054a76:	697a      	ldr	r2, [r7, #20]
 8054a78:	4313      	orrs	r3, r2
 8054a7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8054a7c:	697b      	ldr	r3, [r7, #20]
 8054a7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8054a82:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8054a84:	687b      	ldr	r3, [r7, #4]
 8054a86:	4a17      	ldr	r2, [pc, #92]	; (8054ae4 <TIM_OC2_SetConfig+0xe4>)
 8054a88:	4293      	cmp	r3, r2
 8054a8a:	d003      	beq.n	8054a94 <TIM_OC2_SetConfig+0x94>
 8054a8c:	687b      	ldr	r3, [r7, #4]
 8054a8e:	4a16      	ldr	r2, [pc, #88]	; (8054ae8 <TIM_OC2_SetConfig+0xe8>)
 8054a90:	4293      	cmp	r3, r2
 8054a92:	d113      	bne.n	8054abc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8054a94:	693b      	ldr	r3, [r7, #16]
 8054a96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8054a9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8054a9c:	693b      	ldr	r3, [r7, #16]
 8054a9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8054aa2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8054aa4:	683b      	ldr	r3, [r7, #0]
 8054aa6:	695b      	ldr	r3, [r3, #20]
 8054aa8:	009b      	lsls	r3, r3, #2
 8054aaa:	693a      	ldr	r2, [r7, #16]
 8054aac:	4313      	orrs	r3, r2
 8054aae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8054ab0:	683b      	ldr	r3, [r7, #0]
 8054ab2:	699b      	ldr	r3, [r3, #24]
 8054ab4:	009b      	lsls	r3, r3, #2
 8054ab6:	693a      	ldr	r2, [r7, #16]
 8054ab8:	4313      	orrs	r3, r2
 8054aba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8054abc:	687b      	ldr	r3, [r7, #4]
 8054abe:	693a      	ldr	r2, [r7, #16]
 8054ac0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8054ac2:	687b      	ldr	r3, [r7, #4]
 8054ac4:	68fa      	ldr	r2, [r7, #12]
 8054ac6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8054ac8:	683b      	ldr	r3, [r7, #0]
 8054aca:	685a      	ldr	r2, [r3, #4]
 8054acc:	687b      	ldr	r3, [r7, #4]
 8054ace:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8054ad0:	687b      	ldr	r3, [r7, #4]
 8054ad2:	697a      	ldr	r2, [r7, #20]
 8054ad4:	621a      	str	r2, [r3, #32]
}
 8054ad6:	bf00      	nop
 8054ad8:	371c      	adds	r7, #28
 8054ada:	46bd      	mov	sp, r7
 8054adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8054ae0:	4770      	bx	lr
 8054ae2:	bf00      	nop
 8054ae4:	40010000 	.word	0x40010000
 8054ae8:	40010400 	.word	0x40010400

08054aec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8054aec:	b480      	push	{r7}
 8054aee:	b087      	sub	sp, #28
 8054af0:	af00      	add	r7, sp, #0
 8054af2:	6078      	str	r0, [r7, #4]
 8054af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8054af6:	687b      	ldr	r3, [r7, #4]
 8054af8:	6a1b      	ldr	r3, [r3, #32]
 8054afa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8054afe:	687b      	ldr	r3, [r7, #4]
 8054b00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8054b02:	687b      	ldr	r3, [r7, #4]
 8054b04:	6a1b      	ldr	r3, [r3, #32]
 8054b06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8054b08:	687b      	ldr	r3, [r7, #4]
 8054b0a:	685b      	ldr	r3, [r3, #4]
 8054b0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8054b0e:	687b      	ldr	r3, [r7, #4]
 8054b10:	69db      	ldr	r3, [r3, #28]
 8054b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8054b14:	68fb      	ldr	r3, [r7, #12]
 8054b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8054b1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8054b1c:	68fb      	ldr	r3, [r7, #12]
 8054b1e:	f023 0303 	bic.w	r3, r3, #3
 8054b22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8054b24:	683b      	ldr	r3, [r7, #0]
 8054b26:	681b      	ldr	r3, [r3, #0]
 8054b28:	68fa      	ldr	r2, [r7, #12]
 8054b2a:	4313      	orrs	r3, r2
 8054b2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8054b2e:	697b      	ldr	r3, [r7, #20]
 8054b30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8054b34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8054b36:	683b      	ldr	r3, [r7, #0]
 8054b38:	689b      	ldr	r3, [r3, #8]
 8054b3a:	021b      	lsls	r3, r3, #8
 8054b3c:	697a      	ldr	r2, [r7, #20]
 8054b3e:	4313      	orrs	r3, r2
 8054b40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8054b42:	687b      	ldr	r3, [r7, #4]
 8054b44:	4a21      	ldr	r2, [pc, #132]	; (8054bcc <TIM_OC3_SetConfig+0xe0>)
 8054b46:	4293      	cmp	r3, r2
 8054b48:	d003      	beq.n	8054b52 <TIM_OC3_SetConfig+0x66>
 8054b4a:	687b      	ldr	r3, [r7, #4]
 8054b4c:	4a20      	ldr	r2, [pc, #128]	; (8054bd0 <TIM_OC3_SetConfig+0xe4>)
 8054b4e:	4293      	cmp	r3, r2
 8054b50:	d10d      	bne.n	8054b6e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8054b52:	697b      	ldr	r3, [r7, #20]
 8054b54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8054b58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8054b5a:	683b      	ldr	r3, [r7, #0]
 8054b5c:	68db      	ldr	r3, [r3, #12]
 8054b5e:	021b      	lsls	r3, r3, #8
 8054b60:	697a      	ldr	r2, [r7, #20]
 8054b62:	4313      	orrs	r3, r2
 8054b64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8054b66:	697b      	ldr	r3, [r7, #20]
 8054b68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8054b6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8054b6e:	687b      	ldr	r3, [r7, #4]
 8054b70:	4a16      	ldr	r2, [pc, #88]	; (8054bcc <TIM_OC3_SetConfig+0xe0>)
 8054b72:	4293      	cmp	r3, r2
 8054b74:	d003      	beq.n	8054b7e <TIM_OC3_SetConfig+0x92>
 8054b76:	687b      	ldr	r3, [r7, #4]
 8054b78:	4a15      	ldr	r2, [pc, #84]	; (8054bd0 <TIM_OC3_SetConfig+0xe4>)
 8054b7a:	4293      	cmp	r3, r2
 8054b7c:	d113      	bne.n	8054ba6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8054b7e:	693b      	ldr	r3, [r7, #16]
 8054b80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8054b84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8054b86:	693b      	ldr	r3, [r7, #16]
 8054b88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8054b8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8054b8e:	683b      	ldr	r3, [r7, #0]
 8054b90:	695b      	ldr	r3, [r3, #20]
 8054b92:	011b      	lsls	r3, r3, #4
 8054b94:	693a      	ldr	r2, [r7, #16]
 8054b96:	4313      	orrs	r3, r2
 8054b98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8054b9a:	683b      	ldr	r3, [r7, #0]
 8054b9c:	699b      	ldr	r3, [r3, #24]
 8054b9e:	011b      	lsls	r3, r3, #4
 8054ba0:	693a      	ldr	r2, [r7, #16]
 8054ba2:	4313      	orrs	r3, r2
 8054ba4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8054ba6:	687b      	ldr	r3, [r7, #4]
 8054ba8:	693a      	ldr	r2, [r7, #16]
 8054baa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8054bac:	687b      	ldr	r3, [r7, #4]
 8054bae:	68fa      	ldr	r2, [r7, #12]
 8054bb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8054bb2:	683b      	ldr	r3, [r7, #0]
 8054bb4:	685a      	ldr	r2, [r3, #4]
 8054bb6:	687b      	ldr	r3, [r7, #4]
 8054bb8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8054bba:	687b      	ldr	r3, [r7, #4]
 8054bbc:	697a      	ldr	r2, [r7, #20]
 8054bbe:	621a      	str	r2, [r3, #32]
}
 8054bc0:	bf00      	nop
 8054bc2:	371c      	adds	r7, #28
 8054bc4:	46bd      	mov	sp, r7
 8054bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8054bca:	4770      	bx	lr
 8054bcc:	40010000 	.word	0x40010000
 8054bd0:	40010400 	.word	0x40010400

08054bd4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8054bd4:	b480      	push	{r7}
 8054bd6:	b087      	sub	sp, #28
 8054bd8:	af00      	add	r7, sp, #0
 8054bda:	6078      	str	r0, [r7, #4]
 8054bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8054bde:	687b      	ldr	r3, [r7, #4]
 8054be0:	6a1b      	ldr	r3, [r3, #32]
 8054be2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8054be6:	687b      	ldr	r3, [r7, #4]
 8054be8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8054bea:	687b      	ldr	r3, [r7, #4]
 8054bec:	6a1b      	ldr	r3, [r3, #32]
 8054bee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8054bf0:	687b      	ldr	r3, [r7, #4]
 8054bf2:	685b      	ldr	r3, [r3, #4]
 8054bf4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8054bf6:	687b      	ldr	r3, [r7, #4]
 8054bf8:	69db      	ldr	r3, [r3, #28]
 8054bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8054bfc:	68fb      	ldr	r3, [r7, #12]
 8054bfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8054c02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8054c04:	68fb      	ldr	r3, [r7, #12]
 8054c06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8054c0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8054c0c:	683b      	ldr	r3, [r7, #0]
 8054c0e:	681b      	ldr	r3, [r3, #0]
 8054c10:	021b      	lsls	r3, r3, #8
 8054c12:	68fa      	ldr	r2, [r7, #12]
 8054c14:	4313      	orrs	r3, r2
 8054c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8054c18:	693b      	ldr	r3, [r7, #16]
 8054c1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8054c1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8054c20:	683b      	ldr	r3, [r7, #0]
 8054c22:	689b      	ldr	r3, [r3, #8]
 8054c24:	031b      	lsls	r3, r3, #12
 8054c26:	693a      	ldr	r2, [r7, #16]
 8054c28:	4313      	orrs	r3, r2
 8054c2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8054c2c:	687b      	ldr	r3, [r7, #4]
 8054c2e:	4a12      	ldr	r2, [pc, #72]	; (8054c78 <TIM_OC4_SetConfig+0xa4>)
 8054c30:	4293      	cmp	r3, r2
 8054c32:	d003      	beq.n	8054c3c <TIM_OC4_SetConfig+0x68>
 8054c34:	687b      	ldr	r3, [r7, #4]
 8054c36:	4a11      	ldr	r2, [pc, #68]	; (8054c7c <TIM_OC4_SetConfig+0xa8>)
 8054c38:	4293      	cmp	r3, r2
 8054c3a:	d109      	bne.n	8054c50 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8054c3c:	697b      	ldr	r3, [r7, #20]
 8054c3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8054c42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8054c44:	683b      	ldr	r3, [r7, #0]
 8054c46:	695b      	ldr	r3, [r3, #20]
 8054c48:	019b      	lsls	r3, r3, #6
 8054c4a:	697a      	ldr	r2, [r7, #20]
 8054c4c:	4313      	orrs	r3, r2
 8054c4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8054c50:	687b      	ldr	r3, [r7, #4]
 8054c52:	697a      	ldr	r2, [r7, #20]
 8054c54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8054c56:	687b      	ldr	r3, [r7, #4]
 8054c58:	68fa      	ldr	r2, [r7, #12]
 8054c5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8054c5c:	683b      	ldr	r3, [r7, #0]
 8054c5e:	685a      	ldr	r2, [r3, #4]
 8054c60:	687b      	ldr	r3, [r7, #4]
 8054c62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8054c64:	687b      	ldr	r3, [r7, #4]
 8054c66:	693a      	ldr	r2, [r7, #16]
 8054c68:	621a      	str	r2, [r3, #32]
}
 8054c6a:	bf00      	nop
 8054c6c:	371c      	adds	r7, #28
 8054c6e:	46bd      	mov	sp, r7
 8054c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8054c74:	4770      	bx	lr
 8054c76:	bf00      	nop
 8054c78:	40010000 	.word	0x40010000
 8054c7c:	40010400 	.word	0x40010400

08054c80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8054c80:	b480      	push	{r7}
 8054c82:	b087      	sub	sp, #28
 8054c84:	af00      	add	r7, sp, #0
 8054c86:	60f8      	str	r0, [r7, #12]
 8054c88:	60b9      	str	r1, [r7, #8]
 8054c8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8054c8c:	68fb      	ldr	r3, [r7, #12]
 8054c8e:	6a1b      	ldr	r3, [r3, #32]
 8054c90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8054c92:	68fb      	ldr	r3, [r7, #12]
 8054c94:	6a1b      	ldr	r3, [r3, #32]
 8054c96:	f023 0201 	bic.w	r2, r3, #1
 8054c9a:	68fb      	ldr	r3, [r7, #12]
 8054c9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8054c9e:	68fb      	ldr	r3, [r7, #12]
 8054ca0:	699b      	ldr	r3, [r3, #24]
 8054ca2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8054ca4:	693b      	ldr	r3, [r7, #16]
 8054ca6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8054caa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8054cac:	687b      	ldr	r3, [r7, #4]
 8054cae:	011b      	lsls	r3, r3, #4
 8054cb0:	693a      	ldr	r2, [r7, #16]
 8054cb2:	4313      	orrs	r3, r2
 8054cb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8054cb6:	697b      	ldr	r3, [r7, #20]
 8054cb8:	f023 030a 	bic.w	r3, r3, #10
 8054cbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8054cbe:	697a      	ldr	r2, [r7, #20]
 8054cc0:	68bb      	ldr	r3, [r7, #8]
 8054cc2:	4313      	orrs	r3, r2
 8054cc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8054cc6:	68fb      	ldr	r3, [r7, #12]
 8054cc8:	693a      	ldr	r2, [r7, #16]
 8054cca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8054ccc:	68fb      	ldr	r3, [r7, #12]
 8054cce:	697a      	ldr	r2, [r7, #20]
 8054cd0:	621a      	str	r2, [r3, #32]
}
 8054cd2:	bf00      	nop
 8054cd4:	371c      	adds	r7, #28
 8054cd6:	46bd      	mov	sp, r7
 8054cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8054cdc:	4770      	bx	lr

08054cde <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8054cde:	b480      	push	{r7}
 8054ce0:	b087      	sub	sp, #28
 8054ce2:	af00      	add	r7, sp, #0
 8054ce4:	60f8      	str	r0, [r7, #12]
 8054ce6:	60b9      	str	r1, [r7, #8]
 8054ce8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8054cea:	68fb      	ldr	r3, [r7, #12]
 8054cec:	6a1b      	ldr	r3, [r3, #32]
 8054cee:	f023 0210 	bic.w	r2, r3, #16
 8054cf2:	68fb      	ldr	r3, [r7, #12]
 8054cf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8054cf6:	68fb      	ldr	r3, [r7, #12]
 8054cf8:	699b      	ldr	r3, [r3, #24]
 8054cfa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8054cfc:	68fb      	ldr	r3, [r7, #12]
 8054cfe:	6a1b      	ldr	r3, [r3, #32]
 8054d00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8054d02:	697b      	ldr	r3, [r7, #20]
 8054d04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8054d08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8054d0a:	687b      	ldr	r3, [r7, #4]
 8054d0c:	031b      	lsls	r3, r3, #12
 8054d0e:	697a      	ldr	r2, [r7, #20]
 8054d10:	4313      	orrs	r3, r2
 8054d12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8054d14:	693b      	ldr	r3, [r7, #16]
 8054d16:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8054d1a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8054d1c:	68bb      	ldr	r3, [r7, #8]
 8054d1e:	011b      	lsls	r3, r3, #4
 8054d20:	693a      	ldr	r2, [r7, #16]
 8054d22:	4313      	orrs	r3, r2
 8054d24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8054d26:	68fb      	ldr	r3, [r7, #12]
 8054d28:	697a      	ldr	r2, [r7, #20]
 8054d2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8054d2c:	68fb      	ldr	r3, [r7, #12]
 8054d2e:	693a      	ldr	r2, [r7, #16]
 8054d30:	621a      	str	r2, [r3, #32]
}
 8054d32:	bf00      	nop
 8054d34:	371c      	adds	r7, #28
 8054d36:	46bd      	mov	sp, r7
 8054d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8054d3c:	4770      	bx	lr

08054d3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8054d3e:	b480      	push	{r7}
 8054d40:	b085      	sub	sp, #20
 8054d42:	af00      	add	r7, sp, #0
 8054d44:	6078      	str	r0, [r7, #4]
 8054d46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8054d48:	687b      	ldr	r3, [r7, #4]
 8054d4a:	689b      	ldr	r3, [r3, #8]
 8054d4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8054d4e:	68fb      	ldr	r3, [r7, #12]
 8054d50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8054d54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8054d56:	683a      	ldr	r2, [r7, #0]
 8054d58:	68fb      	ldr	r3, [r7, #12]
 8054d5a:	4313      	orrs	r3, r2
 8054d5c:	f043 0307 	orr.w	r3, r3, #7
 8054d60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8054d62:	687b      	ldr	r3, [r7, #4]
 8054d64:	68fa      	ldr	r2, [r7, #12]
 8054d66:	609a      	str	r2, [r3, #8]
}
 8054d68:	bf00      	nop
 8054d6a:	3714      	adds	r7, #20
 8054d6c:	46bd      	mov	sp, r7
 8054d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8054d72:	4770      	bx	lr

08054d74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8054d74:	b480      	push	{r7}
 8054d76:	b087      	sub	sp, #28
 8054d78:	af00      	add	r7, sp, #0
 8054d7a:	60f8      	str	r0, [r7, #12]
 8054d7c:	60b9      	str	r1, [r7, #8]
 8054d7e:	607a      	str	r2, [r7, #4]
 8054d80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8054d82:	68fb      	ldr	r3, [r7, #12]
 8054d84:	689b      	ldr	r3, [r3, #8]
 8054d86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8054d88:	697b      	ldr	r3, [r7, #20]
 8054d8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8054d8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8054d90:	683b      	ldr	r3, [r7, #0]
 8054d92:	021a      	lsls	r2, r3, #8
 8054d94:	687b      	ldr	r3, [r7, #4]
 8054d96:	431a      	orrs	r2, r3
 8054d98:	68bb      	ldr	r3, [r7, #8]
 8054d9a:	4313      	orrs	r3, r2
 8054d9c:	697a      	ldr	r2, [r7, #20]
 8054d9e:	4313      	orrs	r3, r2
 8054da0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8054da2:	68fb      	ldr	r3, [r7, #12]
 8054da4:	697a      	ldr	r2, [r7, #20]
 8054da6:	609a      	str	r2, [r3, #8]
}
 8054da8:	bf00      	nop
 8054daa:	371c      	adds	r7, #28
 8054dac:	46bd      	mov	sp, r7
 8054dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8054db2:	4770      	bx	lr

08054db4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8054db4:	b480      	push	{r7}
 8054db6:	b085      	sub	sp, #20
 8054db8:	af00      	add	r7, sp, #0
 8054dba:	6078      	str	r0, [r7, #4]
 8054dbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8054dbe:	687b      	ldr	r3, [r7, #4]
 8054dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8054dc4:	2b01      	cmp	r3, #1
 8054dc6:	d101      	bne.n	8054dcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8054dc8:	2302      	movs	r3, #2
 8054dca:	e05a      	b.n	8054e82 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8054dcc:	687b      	ldr	r3, [r7, #4]
 8054dce:	2201      	movs	r2, #1
 8054dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8054dd4:	687b      	ldr	r3, [r7, #4]
 8054dd6:	2202      	movs	r2, #2
 8054dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8054ddc:	687b      	ldr	r3, [r7, #4]
 8054dde:	681b      	ldr	r3, [r3, #0]
 8054de0:	685b      	ldr	r3, [r3, #4]
 8054de2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8054de4:	687b      	ldr	r3, [r7, #4]
 8054de6:	681b      	ldr	r3, [r3, #0]
 8054de8:	689b      	ldr	r3, [r3, #8]
 8054dea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8054dec:	68fb      	ldr	r3, [r7, #12]
 8054dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8054df2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8054df4:	683b      	ldr	r3, [r7, #0]
 8054df6:	681b      	ldr	r3, [r3, #0]
 8054df8:	68fa      	ldr	r2, [r7, #12]
 8054dfa:	4313      	orrs	r3, r2
 8054dfc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8054dfe:	687b      	ldr	r3, [r7, #4]
 8054e00:	681b      	ldr	r3, [r3, #0]
 8054e02:	68fa      	ldr	r2, [r7, #12]
 8054e04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8054e06:	687b      	ldr	r3, [r7, #4]
 8054e08:	681b      	ldr	r3, [r3, #0]
 8054e0a:	4a21      	ldr	r2, [pc, #132]	; (8054e90 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8054e0c:	4293      	cmp	r3, r2
 8054e0e:	d022      	beq.n	8054e56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8054e10:	687b      	ldr	r3, [r7, #4]
 8054e12:	681b      	ldr	r3, [r3, #0]
 8054e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8054e18:	d01d      	beq.n	8054e56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8054e1a:	687b      	ldr	r3, [r7, #4]
 8054e1c:	681b      	ldr	r3, [r3, #0]
 8054e1e:	4a1d      	ldr	r2, [pc, #116]	; (8054e94 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8054e20:	4293      	cmp	r3, r2
 8054e22:	d018      	beq.n	8054e56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8054e24:	687b      	ldr	r3, [r7, #4]
 8054e26:	681b      	ldr	r3, [r3, #0]
 8054e28:	4a1b      	ldr	r2, [pc, #108]	; (8054e98 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8054e2a:	4293      	cmp	r3, r2
 8054e2c:	d013      	beq.n	8054e56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8054e2e:	687b      	ldr	r3, [r7, #4]
 8054e30:	681b      	ldr	r3, [r3, #0]
 8054e32:	4a1a      	ldr	r2, [pc, #104]	; (8054e9c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8054e34:	4293      	cmp	r3, r2
 8054e36:	d00e      	beq.n	8054e56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8054e38:	687b      	ldr	r3, [r7, #4]
 8054e3a:	681b      	ldr	r3, [r3, #0]
 8054e3c:	4a18      	ldr	r2, [pc, #96]	; (8054ea0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8054e3e:	4293      	cmp	r3, r2
 8054e40:	d009      	beq.n	8054e56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8054e42:	687b      	ldr	r3, [r7, #4]
 8054e44:	681b      	ldr	r3, [r3, #0]
 8054e46:	4a17      	ldr	r2, [pc, #92]	; (8054ea4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8054e48:	4293      	cmp	r3, r2
 8054e4a:	d004      	beq.n	8054e56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8054e4c:	687b      	ldr	r3, [r7, #4]
 8054e4e:	681b      	ldr	r3, [r3, #0]
 8054e50:	4a15      	ldr	r2, [pc, #84]	; (8054ea8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8054e52:	4293      	cmp	r3, r2
 8054e54:	d10c      	bne.n	8054e70 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8054e56:	68bb      	ldr	r3, [r7, #8]
 8054e58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8054e5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8054e5e:	683b      	ldr	r3, [r7, #0]
 8054e60:	685b      	ldr	r3, [r3, #4]
 8054e62:	68ba      	ldr	r2, [r7, #8]
 8054e64:	4313      	orrs	r3, r2
 8054e66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8054e68:	687b      	ldr	r3, [r7, #4]
 8054e6a:	681b      	ldr	r3, [r3, #0]
 8054e6c:	68ba      	ldr	r2, [r7, #8]
 8054e6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8054e70:	687b      	ldr	r3, [r7, #4]
 8054e72:	2201      	movs	r2, #1
 8054e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8054e78:	687b      	ldr	r3, [r7, #4]
 8054e7a:	2200      	movs	r2, #0
 8054e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8054e80:	2300      	movs	r3, #0
}
 8054e82:	4618      	mov	r0, r3
 8054e84:	3714      	adds	r7, #20
 8054e86:	46bd      	mov	sp, r7
 8054e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8054e8c:	4770      	bx	lr
 8054e8e:	bf00      	nop
 8054e90:	40010000 	.word	0x40010000
 8054e94:	40000400 	.word	0x40000400
 8054e98:	40000800 	.word	0x40000800
 8054e9c:	40000c00 	.word	0x40000c00
 8054ea0:	40010400 	.word	0x40010400
 8054ea4:	40014000 	.word	0x40014000
 8054ea8:	40001800 	.word	0x40001800

08054eac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8054eac:	b480      	push	{r7}
 8054eae:	b085      	sub	sp, #20
 8054eb0:	af00      	add	r7, sp, #0
 8054eb2:	6078      	str	r0, [r7, #4]
 8054eb4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8054eb6:	2300      	movs	r3, #0
 8054eb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8054eba:	687b      	ldr	r3, [r7, #4]
 8054ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8054ec0:	2b01      	cmp	r3, #1
 8054ec2:	d101      	bne.n	8054ec8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8054ec4:	2302      	movs	r3, #2
 8054ec6:	e03d      	b.n	8054f44 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8054ec8:	687b      	ldr	r3, [r7, #4]
 8054eca:	2201      	movs	r2, #1
 8054ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8054ed0:	68fb      	ldr	r3, [r7, #12]
 8054ed2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8054ed6:	683b      	ldr	r3, [r7, #0]
 8054ed8:	68db      	ldr	r3, [r3, #12]
 8054eda:	4313      	orrs	r3, r2
 8054edc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8054ede:	68fb      	ldr	r3, [r7, #12]
 8054ee0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8054ee4:	683b      	ldr	r3, [r7, #0]
 8054ee6:	689b      	ldr	r3, [r3, #8]
 8054ee8:	4313      	orrs	r3, r2
 8054eea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8054eec:	68fb      	ldr	r3, [r7, #12]
 8054eee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8054ef2:	683b      	ldr	r3, [r7, #0]
 8054ef4:	685b      	ldr	r3, [r3, #4]
 8054ef6:	4313      	orrs	r3, r2
 8054ef8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8054efa:	68fb      	ldr	r3, [r7, #12]
 8054efc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8054f00:	683b      	ldr	r3, [r7, #0]
 8054f02:	681b      	ldr	r3, [r3, #0]
 8054f04:	4313      	orrs	r3, r2
 8054f06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8054f08:	68fb      	ldr	r3, [r7, #12]
 8054f0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8054f0e:	683b      	ldr	r3, [r7, #0]
 8054f10:	691b      	ldr	r3, [r3, #16]
 8054f12:	4313      	orrs	r3, r2
 8054f14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8054f16:	68fb      	ldr	r3, [r7, #12]
 8054f18:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8054f1c:	683b      	ldr	r3, [r7, #0]
 8054f1e:	695b      	ldr	r3, [r3, #20]
 8054f20:	4313      	orrs	r3, r2
 8054f22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8054f24:	68fb      	ldr	r3, [r7, #12]
 8054f26:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8054f2a:	683b      	ldr	r3, [r7, #0]
 8054f2c:	69db      	ldr	r3, [r3, #28]
 8054f2e:	4313      	orrs	r3, r2
 8054f30:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8054f32:	687b      	ldr	r3, [r7, #4]
 8054f34:	681b      	ldr	r3, [r3, #0]
 8054f36:	68fa      	ldr	r2, [r7, #12]
 8054f38:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8054f3a:	687b      	ldr	r3, [r7, #4]
 8054f3c:	2200      	movs	r2, #0
 8054f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8054f42:	2300      	movs	r3, #0
}
 8054f44:	4618      	mov	r0, r3
 8054f46:	3714      	adds	r7, #20
 8054f48:	46bd      	mov	sp, r7
 8054f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8054f4e:	4770      	bx	lr

08054f50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8054f50:	b480      	push	{r7}
 8054f52:	b083      	sub	sp, #12
 8054f54:	af00      	add	r7, sp, #0
 8054f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8054f58:	bf00      	nop
 8054f5a:	370c      	adds	r7, #12
 8054f5c:	46bd      	mov	sp, r7
 8054f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8054f62:	4770      	bx	lr

08054f64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8054f64:	b480      	push	{r7}
 8054f66:	b083      	sub	sp, #12
 8054f68:	af00      	add	r7, sp, #0
 8054f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8054f6c:	bf00      	nop
 8054f6e:	370c      	adds	r7, #12
 8054f70:	46bd      	mov	sp, r7
 8054f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8054f76:	4770      	bx	lr

08054f78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8054f78:	b580      	push	{r7, lr}
 8054f7a:	b082      	sub	sp, #8
 8054f7c:	af00      	add	r7, sp, #0
 8054f7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8054f80:	687b      	ldr	r3, [r7, #4]
 8054f82:	2b00      	cmp	r3, #0
 8054f84:	d101      	bne.n	8054f8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8054f86:	2301      	movs	r3, #1
 8054f88:	e03f      	b.n	805500a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8054f8a:	687b      	ldr	r3, [r7, #4]
 8054f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8054f90:	b2db      	uxtb	r3, r3
 8054f92:	2b00      	cmp	r3, #0
 8054f94:	d106      	bne.n	8054fa4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8054f96:	687b      	ldr	r3, [r7, #4]
 8054f98:	2200      	movs	r2, #0
 8054f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8054f9e:	6878      	ldr	r0, [r7, #4]
 8054fa0:	f7f8 ff74 	bl	804de8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8054fa4:	687b      	ldr	r3, [r7, #4]
 8054fa6:	2224      	movs	r2, #36	; 0x24
 8054fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8054fac:	687b      	ldr	r3, [r7, #4]
 8054fae:	681b      	ldr	r3, [r3, #0]
 8054fb0:	68da      	ldr	r2, [r3, #12]
 8054fb2:	687b      	ldr	r3, [r7, #4]
 8054fb4:	681b      	ldr	r3, [r3, #0]
 8054fb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8054fba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8054fbc:	6878      	ldr	r0, [r7, #4]
 8054fbe:	f000 fd75 	bl	8055aac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8054fc2:	687b      	ldr	r3, [r7, #4]
 8054fc4:	681b      	ldr	r3, [r3, #0]
 8054fc6:	691a      	ldr	r2, [r3, #16]
 8054fc8:	687b      	ldr	r3, [r7, #4]
 8054fca:	681b      	ldr	r3, [r3, #0]
 8054fcc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8054fd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8054fd2:	687b      	ldr	r3, [r7, #4]
 8054fd4:	681b      	ldr	r3, [r3, #0]
 8054fd6:	695a      	ldr	r2, [r3, #20]
 8054fd8:	687b      	ldr	r3, [r7, #4]
 8054fda:	681b      	ldr	r3, [r3, #0]
 8054fdc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8054fe0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8054fe2:	687b      	ldr	r3, [r7, #4]
 8054fe4:	681b      	ldr	r3, [r3, #0]
 8054fe6:	68da      	ldr	r2, [r3, #12]
 8054fe8:	687b      	ldr	r3, [r7, #4]
 8054fea:	681b      	ldr	r3, [r3, #0]
 8054fec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8054ff0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8054ff2:	687b      	ldr	r3, [r7, #4]
 8054ff4:	2200      	movs	r2, #0
 8054ff6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8054ff8:	687b      	ldr	r3, [r7, #4]
 8054ffa:	2220      	movs	r2, #32
 8054ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8055000:	687b      	ldr	r3, [r7, #4]
 8055002:	2220      	movs	r2, #32
 8055004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8055008:	2300      	movs	r3, #0
}
 805500a:	4618      	mov	r0, r3
 805500c:	3708      	adds	r7, #8
 805500e:	46bd      	mov	sp, r7
 8055010:	bd80      	pop	{r7, pc}

08055012 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8055012:	b580      	push	{r7, lr}
 8055014:	b08a      	sub	sp, #40	; 0x28
 8055016:	af02      	add	r7, sp, #8
 8055018:	60f8      	str	r0, [r7, #12]
 805501a:	60b9      	str	r1, [r7, #8]
 805501c:	603b      	str	r3, [r7, #0]
 805501e:	4613      	mov	r3, r2
 8055020:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8055022:	2300      	movs	r3, #0
 8055024:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8055026:	68fb      	ldr	r3, [r7, #12]
 8055028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 805502c:	b2db      	uxtb	r3, r3
 805502e:	2b20      	cmp	r3, #32
 8055030:	d17c      	bne.n	805512c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8055032:	68bb      	ldr	r3, [r7, #8]
 8055034:	2b00      	cmp	r3, #0
 8055036:	d002      	beq.n	805503e <HAL_UART_Transmit+0x2c>
 8055038:	88fb      	ldrh	r3, [r7, #6]
 805503a:	2b00      	cmp	r3, #0
 805503c:	d101      	bne.n	8055042 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 805503e:	2301      	movs	r3, #1
 8055040:	e075      	b.n	805512e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8055042:	68fb      	ldr	r3, [r7, #12]
 8055044:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8055048:	2b01      	cmp	r3, #1
 805504a:	d101      	bne.n	8055050 <HAL_UART_Transmit+0x3e>
 805504c:	2302      	movs	r3, #2
 805504e:	e06e      	b.n	805512e <HAL_UART_Transmit+0x11c>
 8055050:	68fb      	ldr	r3, [r7, #12]
 8055052:	2201      	movs	r2, #1
 8055054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8055058:	68fb      	ldr	r3, [r7, #12]
 805505a:	2200      	movs	r2, #0
 805505c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 805505e:	68fb      	ldr	r3, [r7, #12]
 8055060:	2221      	movs	r2, #33	; 0x21
 8055062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8055066:	f7fa fae5 	bl	804f634 <HAL_GetTick>
 805506a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 805506c:	68fb      	ldr	r3, [r7, #12]
 805506e:	88fa      	ldrh	r2, [r7, #6]
 8055070:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8055072:	68fb      	ldr	r3, [r7, #12]
 8055074:	88fa      	ldrh	r2, [r7, #6]
 8055076:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8055078:	68fb      	ldr	r3, [r7, #12]
 805507a:	689b      	ldr	r3, [r3, #8]
 805507c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8055080:	d108      	bne.n	8055094 <HAL_UART_Transmit+0x82>
 8055082:	68fb      	ldr	r3, [r7, #12]
 8055084:	691b      	ldr	r3, [r3, #16]
 8055086:	2b00      	cmp	r3, #0
 8055088:	d104      	bne.n	8055094 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 805508a:	2300      	movs	r3, #0
 805508c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 805508e:	68bb      	ldr	r3, [r7, #8]
 8055090:	61bb      	str	r3, [r7, #24]
 8055092:	e003      	b.n	805509c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8055094:	68bb      	ldr	r3, [r7, #8]
 8055096:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8055098:	2300      	movs	r3, #0
 805509a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 805509c:	68fb      	ldr	r3, [r7, #12]
 805509e:	2200      	movs	r2, #0
 80550a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80550a4:	e02a      	b.n	80550fc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80550a6:	683b      	ldr	r3, [r7, #0]
 80550a8:	9300      	str	r3, [sp, #0]
 80550aa:	697b      	ldr	r3, [r7, #20]
 80550ac:	2200      	movs	r2, #0
 80550ae:	2180      	movs	r1, #128	; 0x80
 80550b0:	68f8      	ldr	r0, [r7, #12]
 80550b2:	f000 faf7 	bl	80556a4 <UART_WaitOnFlagUntilTimeout>
 80550b6:	4603      	mov	r3, r0
 80550b8:	2b00      	cmp	r3, #0
 80550ba:	d001      	beq.n	80550c0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80550bc:	2303      	movs	r3, #3
 80550be:	e036      	b.n	805512e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80550c0:	69fb      	ldr	r3, [r7, #28]
 80550c2:	2b00      	cmp	r3, #0
 80550c4:	d10b      	bne.n	80550de <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80550c6:	69bb      	ldr	r3, [r7, #24]
 80550c8:	881b      	ldrh	r3, [r3, #0]
 80550ca:	461a      	mov	r2, r3
 80550cc:	68fb      	ldr	r3, [r7, #12]
 80550ce:	681b      	ldr	r3, [r3, #0]
 80550d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80550d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80550d6:	69bb      	ldr	r3, [r7, #24]
 80550d8:	3302      	adds	r3, #2
 80550da:	61bb      	str	r3, [r7, #24]
 80550dc:	e007      	b.n	80550ee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80550de:	69fb      	ldr	r3, [r7, #28]
 80550e0:	781a      	ldrb	r2, [r3, #0]
 80550e2:	68fb      	ldr	r3, [r7, #12]
 80550e4:	681b      	ldr	r3, [r3, #0]
 80550e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80550e8:	69fb      	ldr	r3, [r7, #28]
 80550ea:	3301      	adds	r3, #1
 80550ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80550ee:	68fb      	ldr	r3, [r7, #12]
 80550f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80550f2:	b29b      	uxth	r3, r3
 80550f4:	3b01      	subs	r3, #1
 80550f6:	b29a      	uxth	r2, r3
 80550f8:	68fb      	ldr	r3, [r7, #12]
 80550fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80550fc:	68fb      	ldr	r3, [r7, #12]
 80550fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8055100:	b29b      	uxth	r3, r3
 8055102:	2b00      	cmp	r3, #0
 8055104:	d1cf      	bne.n	80550a6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8055106:	683b      	ldr	r3, [r7, #0]
 8055108:	9300      	str	r3, [sp, #0]
 805510a:	697b      	ldr	r3, [r7, #20]
 805510c:	2200      	movs	r2, #0
 805510e:	2140      	movs	r1, #64	; 0x40
 8055110:	68f8      	ldr	r0, [r7, #12]
 8055112:	f000 fac7 	bl	80556a4 <UART_WaitOnFlagUntilTimeout>
 8055116:	4603      	mov	r3, r0
 8055118:	2b00      	cmp	r3, #0
 805511a:	d001      	beq.n	8055120 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 805511c:	2303      	movs	r3, #3
 805511e:	e006      	b.n	805512e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8055120:	68fb      	ldr	r3, [r7, #12]
 8055122:	2220      	movs	r2, #32
 8055124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8055128:	2300      	movs	r3, #0
 805512a:	e000      	b.n	805512e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 805512c:	2302      	movs	r3, #2
  }
}
 805512e:	4618      	mov	r0, r3
 8055130:	3720      	adds	r7, #32
 8055132:	46bd      	mov	sp, r7
 8055134:	bd80      	pop	{r7, pc}

08055136 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8055136:	b580      	push	{r7, lr}
 8055138:	b084      	sub	sp, #16
 805513a:	af00      	add	r7, sp, #0
 805513c:	60f8      	str	r0, [r7, #12]
 805513e:	60b9      	str	r1, [r7, #8]
 8055140:	4613      	mov	r3, r2
 8055142:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8055144:	68fb      	ldr	r3, [r7, #12]
 8055146:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 805514a:	b2db      	uxtb	r3, r3
 805514c:	2b20      	cmp	r3, #32
 805514e:	d11d      	bne.n	805518c <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8055150:	68bb      	ldr	r3, [r7, #8]
 8055152:	2b00      	cmp	r3, #0
 8055154:	d002      	beq.n	805515c <HAL_UART_Receive_DMA+0x26>
 8055156:	88fb      	ldrh	r3, [r7, #6]
 8055158:	2b00      	cmp	r3, #0
 805515a:	d101      	bne.n	8055160 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 805515c:	2301      	movs	r3, #1
 805515e:	e016      	b.n	805518e <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8055160:	68fb      	ldr	r3, [r7, #12]
 8055162:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8055166:	2b01      	cmp	r3, #1
 8055168:	d101      	bne.n	805516e <HAL_UART_Receive_DMA+0x38>
 805516a:	2302      	movs	r3, #2
 805516c:	e00f      	b.n	805518e <HAL_UART_Receive_DMA+0x58>
 805516e:	68fb      	ldr	r3, [r7, #12]
 8055170:	2201      	movs	r2, #1
 8055172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8055176:	68fb      	ldr	r3, [r7, #12]
 8055178:	2200      	movs	r2, #0
 805517a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 805517c:	88fb      	ldrh	r3, [r7, #6]
 805517e:	461a      	mov	r2, r3
 8055180:	68b9      	ldr	r1, [r7, #8]
 8055182:	68f8      	ldr	r0, [r7, #12]
 8055184:	f000 fad8 	bl	8055738 <UART_Start_Receive_DMA>
 8055188:	4603      	mov	r3, r0
 805518a:	e000      	b.n	805518e <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 805518c:	2302      	movs	r3, #2
  }
}
 805518e:	4618      	mov	r0, r3
 8055190:	3710      	adds	r7, #16
 8055192:	46bd      	mov	sp, r7
 8055194:	bd80      	pop	{r7, pc}
	...

08055198 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8055198:	b580      	push	{r7, lr}
 805519a:	b08a      	sub	sp, #40	; 0x28
 805519c:	af00      	add	r7, sp, #0
 805519e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80551a0:	687b      	ldr	r3, [r7, #4]
 80551a2:	681b      	ldr	r3, [r3, #0]
 80551a4:	681b      	ldr	r3, [r3, #0]
 80551a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80551a8:	687b      	ldr	r3, [r7, #4]
 80551aa:	681b      	ldr	r3, [r3, #0]
 80551ac:	68db      	ldr	r3, [r3, #12]
 80551ae:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80551b0:	687b      	ldr	r3, [r7, #4]
 80551b2:	681b      	ldr	r3, [r3, #0]
 80551b4:	695b      	ldr	r3, [r3, #20]
 80551b6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80551b8:	2300      	movs	r3, #0
 80551ba:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80551bc:	2300      	movs	r3, #0
 80551be:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80551c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80551c2:	f003 030f 	and.w	r3, r3, #15
 80551c6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80551c8:	69bb      	ldr	r3, [r7, #24]
 80551ca:	2b00      	cmp	r3, #0
 80551cc:	d10d      	bne.n	80551ea <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80551ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80551d0:	f003 0320 	and.w	r3, r3, #32
 80551d4:	2b00      	cmp	r3, #0
 80551d6:	d008      	beq.n	80551ea <HAL_UART_IRQHandler+0x52>
 80551d8:	6a3b      	ldr	r3, [r7, #32]
 80551da:	f003 0320 	and.w	r3, r3, #32
 80551de:	2b00      	cmp	r3, #0
 80551e0:	d003      	beq.n	80551ea <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80551e2:	6878      	ldr	r0, [r7, #4]
 80551e4:	f000 fbcb 	bl	805597e <UART_Receive_IT>
      return;
 80551e8:	e17c      	b.n	80554e4 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80551ea:	69bb      	ldr	r3, [r7, #24]
 80551ec:	2b00      	cmp	r3, #0
 80551ee:	f000 80b1 	beq.w	8055354 <HAL_UART_IRQHandler+0x1bc>
 80551f2:	69fb      	ldr	r3, [r7, #28]
 80551f4:	f003 0301 	and.w	r3, r3, #1
 80551f8:	2b00      	cmp	r3, #0
 80551fa:	d105      	bne.n	8055208 <HAL_UART_IRQHandler+0x70>
 80551fc:	6a3b      	ldr	r3, [r7, #32]
 80551fe:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8055202:	2b00      	cmp	r3, #0
 8055204:	f000 80a6 	beq.w	8055354 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8055208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 805520a:	f003 0301 	and.w	r3, r3, #1
 805520e:	2b00      	cmp	r3, #0
 8055210:	d00a      	beq.n	8055228 <HAL_UART_IRQHandler+0x90>
 8055212:	6a3b      	ldr	r3, [r7, #32]
 8055214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8055218:	2b00      	cmp	r3, #0
 805521a:	d005      	beq.n	8055228 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 805521c:	687b      	ldr	r3, [r7, #4]
 805521e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8055220:	f043 0201 	orr.w	r2, r3, #1
 8055224:	687b      	ldr	r3, [r7, #4]
 8055226:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8055228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 805522a:	f003 0304 	and.w	r3, r3, #4
 805522e:	2b00      	cmp	r3, #0
 8055230:	d00a      	beq.n	8055248 <HAL_UART_IRQHandler+0xb0>
 8055232:	69fb      	ldr	r3, [r7, #28]
 8055234:	f003 0301 	and.w	r3, r3, #1
 8055238:	2b00      	cmp	r3, #0
 805523a:	d005      	beq.n	8055248 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 805523c:	687b      	ldr	r3, [r7, #4]
 805523e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8055240:	f043 0202 	orr.w	r2, r3, #2
 8055244:	687b      	ldr	r3, [r7, #4]
 8055246:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8055248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 805524a:	f003 0302 	and.w	r3, r3, #2
 805524e:	2b00      	cmp	r3, #0
 8055250:	d00a      	beq.n	8055268 <HAL_UART_IRQHandler+0xd0>
 8055252:	69fb      	ldr	r3, [r7, #28]
 8055254:	f003 0301 	and.w	r3, r3, #1
 8055258:	2b00      	cmp	r3, #0
 805525a:	d005      	beq.n	8055268 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 805525c:	687b      	ldr	r3, [r7, #4]
 805525e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8055260:	f043 0204 	orr.w	r2, r3, #4
 8055264:	687b      	ldr	r3, [r7, #4]
 8055266:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8055268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 805526a:	f003 0308 	and.w	r3, r3, #8
 805526e:	2b00      	cmp	r3, #0
 8055270:	d00f      	beq.n	8055292 <HAL_UART_IRQHandler+0xfa>
 8055272:	6a3b      	ldr	r3, [r7, #32]
 8055274:	f003 0320 	and.w	r3, r3, #32
 8055278:	2b00      	cmp	r3, #0
 805527a:	d104      	bne.n	8055286 <HAL_UART_IRQHandler+0xee>
 805527c:	69fb      	ldr	r3, [r7, #28]
 805527e:	f003 0301 	and.w	r3, r3, #1
 8055282:	2b00      	cmp	r3, #0
 8055284:	d005      	beq.n	8055292 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8055286:	687b      	ldr	r3, [r7, #4]
 8055288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 805528a:	f043 0208 	orr.w	r2, r3, #8
 805528e:	687b      	ldr	r3, [r7, #4]
 8055290:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8055292:	687b      	ldr	r3, [r7, #4]
 8055294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8055296:	2b00      	cmp	r3, #0
 8055298:	f000 811f 	beq.w	80554da <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 805529c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 805529e:	f003 0320 	and.w	r3, r3, #32
 80552a2:	2b00      	cmp	r3, #0
 80552a4:	d007      	beq.n	80552b6 <HAL_UART_IRQHandler+0x11e>
 80552a6:	6a3b      	ldr	r3, [r7, #32]
 80552a8:	f003 0320 	and.w	r3, r3, #32
 80552ac:	2b00      	cmp	r3, #0
 80552ae:	d002      	beq.n	80552b6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80552b0:	6878      	ldr	r0, [r7, #4]
 80552b2:	f000 fb64 	bl	805597e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80552b6:	687b      	ldr	r3, [r7, #4]
 80552b8:	681b      	ldr	r3, [r3, #0]
 80552ba:	695b      	ldr	r3, [r3, #20]
 80552bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80552c0:	2b40      	cmp	r3, #64	; 0x40
 80552c2:	bf0c      	ite	eq
 80552c4:	2301      	moveq	r3, #1
 80552c6:	2300      	movne	r3, #0
 80552c8:	b2db      	uxtb	r3, r3
 80552ca:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80552cc:	687b      	ldr	r3, [r7, #4]
 80552ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80552d0:	f003 0308 	and.w	r3, r3, #8
 80552d4:	2b00      	cmp	r3, #0
 80552d6:	d102      	bne.n	80552de <HAL_UART_IRQHandler+0x146>
 80552d8:	697b      	ldr	r3, [r7, #20]
 80552da:	2b00      	cmp	r3, #0
 80552dc:	d031      	beq.n	8055342 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80552de:	6878      	ldr	r0, [r7, #4]
 80552e0:	f000 faa4 	bl	805582c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80552e4:	687b      	ldr	r3, [r7, #4]
 80552e6:	681b      	ldr	r3, [r3, #0]
 80552e8:	695b      	ldr	r3, [r3, #20]
 80552ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80552ee:	2b40      	cmp	r3, #64	; 0x40
 80552f0:	d123      	bne.n	805533a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80552f2:	687b      	ldr	r3, [r7, #4]
 80552f4:	681b      	ldr	r3, [r3, #0]
 80552f6:	695a      	ldr	r2, [r3, #20]
 80552f8:	687b      	ldr	r3, [r7, #4]
 80552fa:	681b      	ldr	r3, [r3, #0]
 80552fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8055300:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8055302:	687b      	ldr	r3, [r7, #4]
 8055304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8055306:	2b00      	cmp	r3, #0
 8055308:	d013      	beq.n	8055332 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 805530a:	687b      	ldr	r3, [r7, #4]
 805530c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 805530e:	4a77      	ldr	r2, [pc, #476]	; (80554ec <HAL_UART_IRQHandler+0x354>)
 8055310:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8055312:	687b      	ldr	r3, [r7, #4]
 8055314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8055316:	4618      	mov	r0, r3
 8055318:	f7fb fa9e 	bl	8050858 <HAL_DMA_Abort_IT>
 805531c:	4603      	mov	r3, r0
 805531e:	2b00      	cmp	r3, #0
 8055320:	d016      	beq.n	8055350 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8055322:	687b      	ldr	r3, [r7, #4]
 8055324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8055326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8055328:	687a      	ldr	r2, [r7, #4]
 805532a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 805532c:	4610      	mov	r0, r2
 805532e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8055330:	e00e      	b.n	8055350 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8055332:	6878      	ldr	r0, [r7, #4]
 8055334:	f000 f8f0 	bl	8055518 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8055338:	e00a      	b.n	8055350 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 805533a:	6878      	ldr	r0, [r7, #4]
 805533c:	f000 f8ec 	bl	8055518 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8055340:	e006      	b.n	8055350 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8055342:	6878      	ldr	r0, [r7, #4]
 8055344:	f000 f8e8 	bl	8055518 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8055348:	687b      	ldr	r3, [r7, #4]
 805534a:	2200      	movs	r2, #0
 805534c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 805534e:	e0c4      	b.n	80554da <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8055350:	bf00      	nop
    return;
 8055352:	e0c2      	b.n	80554da <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8055354:	687b      	ldr	r3, [r7, #4]
 8055356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8055358:	2b01      	cmp	r3, #1
 805535a:	f040 80a2 	bne.w	80554a2 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 805535e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8055360:	f003 0310 	and.w	r3, r3, #16
 8055364:	2b00      	cmp	r3, #0
 8055366:	f000 809c 	beq.w	80554a2 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 805536a:	6a3b      	ldr	r3, [r7, #32]
 805536c:	f003 0310 	and.w	r3, r3, #16
 8055370:	2b00      	cmp	r3, #0
 8055372:	f000 8096 	beq.w	80554a2 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8055376:	2300      	movs	r3, #0
 8055378:	60fb      	str	r3, [r7, #12]
 805537a:	687b      	ldr	r3, [r7, #4]
 805537c:	681b      	ldr	r3, [r3, #0]
 805537e:	681b      	ldr	r3, [r3, #0]
 8055380:	60fb      	str	r3, [r7, #12]
 8055382:	687b      	ldr	r3, [r7, #4]
 8055384:	681b      	ldr	r3, [r3, #0]
 8055386:	685b      	ldr	r3, [r3, #4]
 8055388:	60fb      	str	r3, [r7, #12]
 805538a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 805538c:	687b      	ldr	r3, [r7, #4]
 805538e:	681b      	ldr	r3, [r3, #0]
 8055390:	695b      	ldr	r3, [r3, #20]
 8055392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8055396:	2b40      	cmp	r3, #64	; 0x40
 8055398:	d14f      	bne.n	805543a <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 805539a:	687b      	ldr	r3, [r7, #4]
 805539c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 805539e:	681b      	ldr	r3, [r3, #0]
 80553a0:	685b      	ldr	r3, [r3, #4]
 80553a2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80553a4:	8a3b      	ldrh	r3, [r7, #16]
 80553a6:	2b00      	cmp	r3, #0
 80553a8:	f000 8099 	beq.w	80554de <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80553ac:	687b      	ldr	r3, [r7, #4]
 80553ae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80553b0:	8a3a      	ldrh	r2, [r7, #16]
 80553b2:	429a      	cmp	r2, r3
 80553b4:	f080 8093 	bcs.w	80554de <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80553b8:	687b      	ldr	r3, [r7, #4]
 80553ba:	8a3a      	ldrh	r2, [r7, #16]
 80553bc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80553be:	687b      	ldr	r3, [r7, #4]
 80553c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80553c2:	69db      	ldr	r3, [r3, #28]
 80553c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80553c8:	d02b      	beq.n	8055422 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80553ca:	687b      	ldr	r3, [r7, #4]
 80553cc:	681b      	ldr	r3, [r3, #0]
 80553ce:	68da      	ldr	r2, [r3, #12]
 80553d0:	687b      	ldr	r3, [r7, #4]
 80553d2:	681b      	ldr	r3, [r3, #0]
 80553d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80553d8:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80553da:	687b      	ldr	r3, [r7, #4]
 80553dc:	681b      	ldr	r3, [r3, #0]
 80553de:	695a      	ldr	r2, [r3, #20]
 80553e0:	687b      	ldr	r3, [r7, #4]
 80553e2:	681b      	ldr	r3, [r3, #0]
 80553e4:	f022 0201 	bic.w	r2, r2, #1
 80553e8:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80553ea:	687b      	ldr	r3, [r7, #4]
 80553ec:	681b      	ldr	r3, [r3, #0]
 80553ee:	695a      	ldr	r2, [r3, #20]
 80553f0:	687b      	ldr	r3, [r7, #4]
 80553f2:	681b      	ldr	r3, [r3, #0]
 80553f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80553f8:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80553fa:	687b      	ldr	r3, [r7, #4]
 80553fc:	2220      	movs	r2, #32
 80553fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8055402:	687b      	ldr	r3, [r7, #4]
 8055404:	2200      	movs	r2, #0
 8055406:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8055408:	687b      	ldr	r3, [r7, #4]
 805540a:	681b      	ldr	r3, [r3, #0]
 805540c:	68da      	ldr	r2, [r3, #12]
 805540e:	687b      	ldr	r3, [r7, #4]
 8055410:	681b      	ldr	r3, [r3, #0]
 8055412:	f022 0210 	bic.w	r2, r2, #16
 8055416:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8055418:	687b      	ldr	r3, [r7, #4]
 805541a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 805541c:	4618      	mov	r0, r3
 805541e:	f7fb f9ab 	bl	8050778 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8055422:	687b      	ldr	r3, [r7, #4]
 8055424:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8055426:	687b      	ldr	r3, [r7, #4]
 8055428:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 805542a:	b29b      	uxth	r3, r3
 805542c:	1ad3      	subs	r3, r2, r3
 805542e:	b29b      	uxth	r3, r3
 8055430:	4619      	mov	r1, r3
 8055432:	6878      	ldr	r0, [r7, #4]
 8055434:	f000 f87a 	bl	805552c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8055438:	e051      	b.n	80554de <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 805543a:	687b      	ldr	r3, [r7, #4]
 805543c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 805543e:	687b      	ldr	r3, [r7, #4]
 8055440:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8055442:	b29b      	uxth	r3, r3
 8055444:	1ad3      	subs	r3, r2, r3
 8055446:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8055448:	687b      	ldr	r3, [r7, #4]
 805544a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 805544c:	b29b      	uxth	r3, r3
 805544e:	2b00      	cmp	r3, #0
 8055450:	d047      	beq.n	80554e2 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8055452:	8a7b      	ldrh	r3, [r7, #18]
 8055454:	2b00      	cmp	r3, #0
 8055456:	d044      	beq.n	80554e2 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8055458:	687b      	ldr	r3, [r7, #4]
 805545a:	681b      	ldr	r3, [r3, #0]
 805545c:	68da      	ldr	r2, [r3, #12]
 805545e:	687b      	ldr	r3, [r7, #4]
 8055460:	681b      	ldr	r3, [r3, #0]
 8055462:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8055466:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8055468:	687b      	ldr	r3, [r7, #4]
 805546a:	681b      	ldr	r3, [r3, #0]
 805546c:	695a      	ldr	r2, [r3, #20]
 805546e:	687b      	ldr	r3, [r7, #4]
 8055470:	681b      	ldr	r3, [r3, #0]
 8055472:	f022 0201 	bic.w	r2, r2, #1
 8055476:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8055478:	687b      	ldr	r3, [r7, #4]
 805547a:	2220      	movs	r2, #32
 805547c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8055480:	687b      	ldr	r3, [r7, #4]
 8055482:	2200      	movs	r2, #0
 8055484:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8055486:	687b      	ldr	r3, [r7, #4]
 8055488:	681b      	ldr	r3, [r3, #0]
 805548a:	68da      	ldr	r2, [r3, #12]
 805548c:	687b      	ldr	r3, [r7, #4]
 805548e:	681b      	ldr	r3, [r3, #0]
 8055490:	f022 0210 	bic.w	r2, r2, #16
 8055494:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8055496:	8a7b      	ldrh	r3, [r7, #18]
 8055498:	4619      	mov	r1, r3
 805549a:	6878      	ldr	r0, [r7, #4]
 805549c:	f000 f846 	bl	805552c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80554a0:	e01f      	b.n	80554e2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80554a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80554a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80554a8:	2b00      	cmp	r3, #0
 80554aa:	d008      	beq.n	80554be <HAL_UART_IRQHandler+0x326>
 80554ac:	6a3b      	ldr	r3, [r7, #32]
 80554ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80554b2:	2b00      	cmp	r3, #0
 80554b4:	d003      	beq.n	80554be <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 80554b6:	6878      	ldr	r0, [r7, #4]
 80554b8:	f000 f9f9 	bl	80558ae <UART_Transmit_IT>
    return;
 80554bc:	e012      	b.n	80554e4 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80554be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80554c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80554c4:	2b00      	cmp	r3, #0
 80554c6:	d00d      	beq.n	80554e4 <HAL_UART_IRQHandler+0x34c>
 80554c8:	6a3b      	ldr	r3, [r7, #32]
 80554ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80554ce:	2b00      	cmp	r3, #0
 80554d0:	d008      	beq.n	80554e4 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80554d2:	6878      	ldr	r0, [r7, #4]
 80554d4:	f000 fa3b 	bl	805594e <UART_EndTransmit_IT>
    return;
 80554d8:	e004      	b.n	80554e4 <HAL_UART_IRQHandler+0x34c>
    return;
 80554da:	bf00      	nop
 80554dc:	e002      	b.n	80554e4 <HAL_UART_IRQHandler+0x34c>
      return;
 80554de:	bf00      	nop
 80554e0:	e000      	b.n	80554e4 <HAL_UART_IRQHandler+0x34c>
      return;
 80554e2:	bf00      	nop
  }
}
 80554e4:	3728      	adds	r7, #40	; 0x28
 80554e6:	46bd      	mov	sp, r7
 80554e8:	bd80      	pop	{r7, pc}
 80554ea:	bf00      	nop
 80554ec:	08055887 	.word	0x08055887

080554f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80554f0:	b480      	push	{r7}
 80554f2:	b083      	sub	sp, #12
 80554f4:	af00      	add	r7, sp, #0
 80554f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80554f8:	bf00      	nop
 80554fa:	370c      	adds	r7, #12
 80554fc:	46bd      	mov	sp, r7
 80554fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8055502:	4770      	bx	lr

08055504 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8055504:	b480      	push	{r7}
 8055506:	b083      	sub	sp, #12
 8055508:	af00      	add	r7, sp, #0
 805550a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 805550c:	bf00      	nop
 805550e:	370c      	adds	r7, #12
 8055510:	46bd      	mov	sp, r7
 8055512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8055516:	4770      	bx	lr

08055518 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8055518:	b480      	push	{r7}
 805551a:	b083      	sub	sp, #12
 805551c:	af00      	add	r7, sp, #0
 805551e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8055520:	bf00      	nop
 8055522:	370c      	adds	r7, #12
 8055524:	46bd      	mov	sp, r7
 8055526:	f85d 7b04 	ldr.w	r7, [sp], #4
 805552a:	4770      	bx	lr

0805552c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 805552c:	b480      	push	{r7}
 805552e:	b083      	sub	sp, #12
 8055530:	af00      	add	r7, sp, #0
 8055532:	6078      	str	r0, [r7, #4]
 8055534:	460b      	mov	r3, r1
 8055536:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8055538:	bf00      	nop
 805553a:	370c      	adds	r7, #12
 805553c:	46bd      	mov	sp, r7
 805553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8055542:	4770      	bx	lr

08055544 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8055544:	b580      	push	{r7, lr}
 8055546:	b084      	sub	sp, #16
 8055548:	af00      	add	r7, sp, #0
 805554a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 805554c:	687b      	ldr	r3, [r7, #4]
 805554e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8055550:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8055552:	687b      	ldr	r3, [r7, #4]
 8055554:	681b      	ldr	r3, [r3, #0]
 8055556:	681b      	ldr	r3, [r3, #0]
 8055558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 805555c:	2b00      	cmp	r3, #0
 805555e:	d12a      	bne.n	80555b6 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8055560:	68fb      	ldr	r3, [r7, #12]
 8055562:	2200      	movs	r2, #0
 8055564:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8055566:	68fb      	ldr	r3, [r7, #12]
 8055568:	681b      	ldr	r3, [r3, #0]
 805556a:	68da      	ldr	r2, [r3, #12]
 805556c:	68fb      	ldr	r3, [r7, #12]
 805556e:	681b      	ldr	r3, [r3, #0]
 8055570:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8055574:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8055576:	68fb      	ldr	r3, [r7, #12]
 8055578:	681b      	ldr	r3, [r3, #0]
 805557a:	695a      	ldr	r2, [r3, #20]
 805557c:	68fb      	ldr	r3, [r7, #12]
 805557e:	681b      	ldr	r3, [r3, #0]
 8055580:	f022 0201 	bic.w	r2, r2, #1
 8055584:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8055586:	68fb      	ldr	r3, [r7, #12]
 8055588:	681b      	ldr	r3, [r3, #0]
 805558a:	695a      	ldr	r2, [r3, #20]
 805558c:	68fb      	ldr	r3, [r7, #12]
 805558e:	681b      	ldr	r3, [r3, #0]
 8055590:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8055594:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8055596:	68fb      	ldr	r3, [r7, #12]
 8055598:	2220      	movs	r2, #32
 805559a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 805559e:	68fb      	ldr	r3, [r7, #12]
 80555a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80555a2:	2b01      	cmp	r3, #1
 80555a4:	d107      	bne.n	80555b6 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80555a6:	68fb      	ldr	r3, [r7, #12]
 80555a8:	681b      	ldr	r3, [r3, #0]
 80555aa:	68da      	ldr	r2, [r3, #12]
 80555ac:	68fb      	ldr	r3, [r7, #12]
 80555ae:	681b      	ldr	r3, [r3, #0]
 80555b0:	f022 0210 	bic.w	r2, r2, #16
 80555b4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80555b6:	68fb      	ldr	r3, [r7, #12]
 80555b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80555ba:	2b01      	cmp	r3, #1
 80555bc:	d106      	bne.n	80555cc <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80555be:	68fb      	ldr	r3, [r7, #12]
 80555c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80555c2:	4619      	mov	r1, r3
 80555c4:	68f8      	ldr	r0, [r7, #12]
 80555c6:	f7ff ffb1 	bl	805552c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80555ca:	e002      	b.n	80555d2 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 80555cc:	68f8      	ldr	r0, [r7, #12]
 80555ce:	f7f3 fac5 	bl	8048b5c <HAL_UART_RxCpltCallback>
}
 80555d2:	bf00      	nop
 80555d4:	3710      	adds	r7, #16
 80555d6:	46bd      	mov	sp, r7
 80555d8:	bd80      	pop	{r7, pc}

080555da <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80555da:	b580      	push	{r7, lr}
 80555dc:	b084      	sub	sp, #16
 80555de:	af00      	add	r7, sp, #0
 80555e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80555e2:	687b      	ldr	r3, [r7, #4]
 80555e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80555e6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80555e8:	68fb      	ldr	r3, [r7, #12]
 80555ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80555ec:	2b01      	cmp	r3, #1
 80555ee:	d108      	bne.n	8055602 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80555f0:	68fb      	ldr	r3, [r7, #12]
 80555f2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80555f4:	085b      	lsrs	r3, r3, #1
 80555f6:	b29b      	uxth	r3, r3
 80555f8:	4619      	mov	r1, r3
 80555fa:	68f8      	ldr	r0, [r7, #12]
 80555fc:	f7ff ff96 	bl	805552c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8055600:	e002      	b.n	8055608 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8055602:	68f8      	ldr	r0, [r7, #12]
 8055604:	f7ff ff7e 	bl	8055504 <HAL_UART_RxHalfCpltCallback>
}
 8055608:	bf00      	nop
 805560a:	3710      	adds	r7, #16
 805560c:	46bd      	mov	sp, r7
 805560e:	bd80      	pop	{r7, pc}

08055610 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8055610:	b580      	push	{r7, lr}
 8055612:	b084      	sub	sp, #16
 8055614:	af00      	add	r7, sp, #0
 8055616:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8055618:	2300      	movs	r3, #0
 805561a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 805561c:	687b      	ldr	r3, [r7, #4]
 805561e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8055620:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8055622:	68bb      	ldr	r3, [r7, #8]
 8055624:	681b      	ldr	r3, [r3, #0]
 8055626:	695b      	ldr	r3, [r3, #20]
 8055628:	f003 0380 	and.w	r3, r3, #128	; 0x80
 805562c:	2b80      	cmp	r3, #128	; 0x80
 805562e:	bf0c      	ite	eq
 8055630:	2301      	moveq	r3, #1
 8055632:	2300      	movne	r3, #0
 8055634:	b2db      	uxtb	r3, r3
 8055636:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8055638:	68bb      	ldr	r3, [r7, #8]
 805563a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 805563e:	b2db      	uxtb	r3, r3
 8055640:	2b21      	cmp	r3, #33	; 0x21
 8055642:	d108      	bne.n	8055656 <UART_DMAError+0x46>
 8055644:	68fb      	ldr	r3, [r7, #12]
 8055646:	2b00      	cmp	r3, #0
 8055648:	d005      	beq.n	8055656 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 805564a:	68bb      	ldr	r3, [r7, #8]
 805564c:	2200      	movs	r2, #0
 805564e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8055650:	68b8      	ldr	r0, [r7, #8]
 8055652:	f000 f8d5 	bl	8055800 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8055656:	68bb      	ldr	r3, [r7, #8]
 8055658:	681b      	ldr	r3, [r3, #0]
 805565a:	695b      	ldr	r3, [r3, #20]
 805565c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8055660:	2b40      	cmp	r3, #64	; 0x40
 8055662:	bf0c      	ite	eq
 8055664:	2301      	moveq	r3, #1
 8055666:	2300      	movne	r3, #0
 8055668:	b2db      	uxtb	r3, r3
 805566a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 805566c:	68bb      	ldr	r3, [r7, #8]
 805566e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8055672:	b2db      	uxtb	r3, r3
 8055674:	2b22      	cmp	r3, #34	; 0x22
 8055676:	d108      	bne.n	805568a <UART_DMAError+0x7a>
 8055678:	68fb      	ldr	r3, [r7, #12]
 805567a:	2b00      	cmp	r3, #0
 805567c:	d005      	beq.n	805568a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 805567e:	68bb      	ldr	r3, [r7, #8]
 8055680:	2200      	movs	r2, #0
 8055682:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8055684:	68b8      	ldr	r0, [r7, #8]
 8055686:	f000 f8d1 	bl	805582c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 805568a:	68bb      	ldr	r3, [r7, #8]
 805568c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 805568e:	f043 0210 	orr.w	r2, r3, #16
 8055692:	68bb      	ldr	r3, [r7, #8]
 8055694:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8055696:	68b8      	ldr	r0, [r7, #8]
 8055698:	f7ff ff3e 	bl	8055518 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 805569c:	bf00      	nop
 805569e:	3710      	adds	r7, #16
 80556a0:	46bd      	mov	sp, r7
 80556a2:	bd80      	pop	{r7, pc}

080556a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80556a4:	b580      	push	{r7, lr}
 80556a6:	b084      	sub	sp, #16
 80556a8:	af00      	add	r7, sp, #0
 80556aa:	60f8      	str	r0, [r7, #12]
 80556ac:	60b9      	str	r1, [r7, #8]
 80556ae:	603b      	str	r3, [r7, #0]
 80556b0:	4613      	mov	r3, r2
 80556b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80556b4:	e02c      	b.n	8055710 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80556b6:	69bb      	ldr	r3, [r7, #24]
 80556b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80556bc:	d028      	beq.n	8055710 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80556be:	69bb      	ldr	r3, [r7, #24]
 80556c0:	2b00      	cmp	r3, #0
 80556c2:	d007      	beq.n	80556d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80556c4:	f7f9 ffb6 	bl	804f634 <HAL_GetTick>
 80556c8:	4602      	mov	r2, r0
 80556ca:	683b      	ldr	r3, [r7, #0]
 80556cc:	1ad3      	subs	r3, r2, r3
 80556ce:	69ba      	ldr	r2, [r7, #24]
 80556d0:	429a      	cmp	r2, r3
 80556d2:	d21d      	bcs.n	8055710 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80556d4:	68fb      	ldr	r3, [r7, #12]
 80556d6:	681b      	ldr	r3, [r3, #0]
 80556d8:	68da      	ldr	r2, [r3, #12]
 80556da:	68fb      	ldr	r3, [r7, #12]
 80556dc:	681b      	ldr	r3, [r3, #0]
 80556de:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80556e2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80556e4:	68fb      	ldr	r3, [r7, #12]
 80556e6:	681b      	ldr	r3, [r3, #0]
 80556e8:	695a      	ldr	r2, [r3, #20]
 80556ea:	68fb      	ldr	r3, [r7, #12]
 80556ec:	681b      	ldr	r3, [r3, #0]
 80556ee:	f022 0201 	bic.w	r2, r2, #1
 80556f2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80556f4:	68fb      	ldr	r3, [r7, #12]
 80556f6:	2220      	movs	r2, #32
 80556f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80556fc:	68fb      	ldr	r3, [r7, #12]
 80556fe:	2220      	movs	r2, #32
 8055700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8055704:	68fb      	ldr	r3, [r7, #12]
 8055706:	2200      	movs	r2, #0
 8055708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 805570c:	2303      	movs	r3, #3
 805570e:	e00f      	b.n	8055730 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8055710:	68fb      	ldr	r3, [r7, #12]
 8055712:	681b      	ldr	r3, [r3, #0]
 8055714:	681a      	ldr	r2, [r3, #0]
 8055716:	68bb      	ldr	r3, [r7, #8]
 8055718:	4013      	ands	r3, r2
 805571a:	68ba      	ldr	r2, [r7, #8]
 805571c:	429a      	cmp	r2, r3
 805571e:	bf0c      	ite	eq
 8055720:	2301      	moveq	r3, #1
 8055722:	2300      	movne	r3, #0
 8055724:	b2db      	uxtb	r3, r3
 8055726:	461a      	mov	r2, r3
 8055728:	79fb      	ldrb	r3, [r7, #7]
 805572a:	429a      	cmp	r2, r3
 805572c:	d0c3      	beq.n	80556b6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 805572e:	2300      	movs	r3, #0
}
 8055730:	4618      	mov	r0, r3
 8055732:	3710      	adds	r7, #16
 8055734:	46bd      	mov	sp, r7
 8055736:	bd80      	pop	{r7, pc}

08055738 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8055738:	b580      	push	{r7, lr}
 805573a:	b086      	sub	sp, #24
 805573c:	af00      	add	r7, sp, #0
 805573e:	60f8      	str	r0, [r7, #12]
 8055740:	60b9      	str	r1, [r7, #8]
 8055742:	4613      	mov	r3, r2
 8055744:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8055746:	68ba      	ldr	r2, [r7, #8]
 8055748:	68fb      	ldr	r3, [r7, #12]
 805574a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 805574c:	68fb      	ldr	r3, [r7, #12]
 805574e:	88fa      	ldrh	r2, [r7, #6]
 8055750:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8055752:	68fb      	ldr	r3, [r7, #12]
 8055754:	2200      	movs	r2, #0
 8055756:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8055758:	68fb      	ldr	r3, [r7, #12]
 805575a:	2222      	movs	r2, #34	; 0x22
 805575c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8055760:	68fb      	ldr	r3, [r7, #12]
 8055762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8055764:	4a23      	ldr	r2, [pc, #140]	; (80557f4 <UART_Start_Receive_DMA+0xbc>)
 8055766:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8055768:	68fb      	ldr	r3, [r7, #12]
 805576a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 805576c:	4a22      	ldr	r2, [pc, #136]	; (80557f8 <UART_Start_Receive_DMA+0xc0>)
 805576e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8055770:	68fb      	ldr	r3, [r7, #12]
 8055772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8055774:	4a21      	ldr	r2, [pc, #132]	; (80557fc <UART_Start_Receive_DMA+0xc4>)
 8055776:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8055778:	68fb      	ldr	r3, [r7, #12]
 805577a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 805577c:	2200      	movs	r2, #0
 805577e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8055780:	f107 0308 	add.w	r3, r7, #8
 8055784:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8055786:	68fb      	ldr	r3, [r7, #12]
 8055788:	6b98      	ldr	r0, [r3, #56]	; 0x38
 805578a:	68fb      	ldr	r3, [r7, #12]
 805578c:	681b      	ldr	r3, [r3, #0]
 805578e:	3304      	adds	r3, #4
 8055790:	4619      	mov	r1, r3
 8055792:	697b      	ldr	r3, [r7, #20]
 8055794:	681a      	ldr	r2, [r3, #0]
 8055796:	88fb      	ldrh	r3, [r7, #6]
 8055798:	f7fa ff96 	bl	80506c8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 805579c:	2300      	movs	r3, #0
 805579e:	613b      	str	r3, [r7, #16]
 80557a0:	68fb      	ldr	r3, [r7, #12]
 80557a2:	681b      	ldr	r3, [r3, #0]
 80557a4:	681b      	ldr	r3, [r3, #0]
 80557a6:	613b      	str	r3, [r7, #16]
 80557a8:	68fb      	ldr	r3, [r7, #12]
 80557aa:	681b      	ldr	r3, [r3, #0]
 80557ac:	685b      	ldr	r3, [r3, #4]
 80557ae:	613b      	str	r3, [r7, #16]
 80557b0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80557b2:	68fb      	ldr	r3, [r7, #12]
 80557b4:	2200      	movs	r2, #0
 80557b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80557ba:	68fb      	ldr	r3, [r7, #12]
 80557bc:	681b      	ldr	r3, [r3, #0]
 80557be:	68da      	ldr	r2, [r3, #12]
 80557c0:	68fb      	ldr	r3, [r7, #12]
 80557c2:	681b      	ldr	r3, [r3, #0]
 80557c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80557c8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80557ca:	68fb      	ldr	r3, [r7, #12]
 80557cc:	681b      	ldr	r3, [r3, #0]
 80557ce:	695a      	ldr	r2, [r3, #20]
 80557d0:	68fb      	ldr	r3, [r7, #12]
 80557d2:	681b      	ldr	r3, [r3, #0]
 80557d4:	f042 0201 	orr.w	r2, r2, #1
 80557d8:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80557da:	68fb      	ldr	r3, [r7, #12]
 80557dc:	681b      	ldr	r3, [r3, #0]
 80557de:	695a      	ldr	r2, [r3, #20]
 80557e0:	68fb      	ldr	r3, [r7, #12]
 80557e2:	681b      	ldr	r3, [r3, #0]
 80557e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80557e8:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80557ea:	2300      	movs	r3, #0
}
 80557ec:	4618      	mov	r0, r3
 80557ee:	3718      	adds	r7, #24
 80557f0:	46bd      	mov	sp, r7
 80557f2:	bd80      	pop	{r7, pc}
 80557f4:	08055545 	.word	0x08055545
 80557f8:	080555db 	.word	0x080555db
 80557fc:	08055611 	.word	0x08055611

08055800 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8055800:	b480      	push	{r7}
 8055802:	b083      	sub	sp, #12
 8055804:	af00      	add	r7, sp, #0
 8055806:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8055808:	687b      	ldr	r3, [r7, #4]
 805580a:	681b      	ldr	r3, [r3, #0]
 805580c:	68da      	ldr	r2, [r3, #12]
 805580e:	687b      	ldr	r3, [r7, #4]
 8055810:	681b      	ldr	r3, [r3, #0]
 8055812:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8055816:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8055818:	687b      	ldr	r3, [r7, #4]
 805581a:	2220      	movs	r2, #32
 805581c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8055820:	bf00      	nop
 8055822:	370c      	adds	r7, #12
 8055824:	46bd      	mov	sp, r7
 8055826:	f85d 7b04 	ldr.w	r7, [sp], #4
 805582a:	4770      	bx	lr

0805582c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 805582c:	b480      	push	{r7}
 805582e:	b083      	sub	sp, #12
 8055830:	af00      	add	r7, sp, #0
 8055832:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8055834:	687b      	ldr	r3, [r7, #4]
 8055836:	681b      	ldr	r3, [r3, #0]
 8055838:	68da      	ldr	r2, [r3, #12]
 805583a:	687b      	ldr	r3, [r7, #4]
 805583c:	681b      	ldr	r3, [r3, #0]
 805583e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8055842:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8055844:	687b      	ldr	r3, [r7, #4]
 8055846:	681b      	ldr	r3, [r3, #0]
 8055848:	695a      	ldr	r2, [r3, #20]
 805584a:	687b      	ldr	r3, [r7, #4]
 805584c:	681b      	ldr	r3, [r3, #0]
 805584e:	f022 0201 	bic.w	r2, r2, #1
 8055852:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8055854:	687b      	ldr	r3, [r7, #4]
 8055856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8055858:	2b01      	cmp	r3, #1
 805585a:	d107      	bne.n	805586c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 805585c:	687b      	ldr	r3, [r7, #4]
 805585e:	681b      	ldr	r3, [r3, #0]
 8055860:	68da      	ldr	r2, [r3, #12]
 8055862:	687b      	ldr	r3, [r7, #4]
 8055864:	681b      	ldr	r3, [r3, #0]
 8055866:	f022 0210 	bic.w	r2, r2, #16
 805586a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 805586c:	687b      	ldr	r3, [r7, #4]
 805586e:	2220      	movs	r2, #32
 8055870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8055874:	687b      	ldr	r3, [r7, #4]
 8055876:	2200      	movs	r2, #0
 8055878:	631a      	str	r2, [r3, #48]	; 0x30
}
 805587a:	bf00      	nop
 805587c:	370c      	adds	r7, #12
 805587e:	46bd      	mov	sp, r7
 8055880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8055884:	4770      	bx	lr

08055886 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8055886:	b580      	push	{r7, lr}
 8055888:	b084      	sub	sp, #16
 805588a:	af00      	add	r7, sp, #0
 805588c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 805588e:	687b      	ldr	r3, [r7, #4]
 8055890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8055892:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8055894:	68fb      	ldr	r3, [r7, #12]
 8055896:	2200      	movs	r2, #0
 8055898:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 805589a:	68fb      	ldr	r3, [r7, #12]
 805589c:	2200      	movs	r2, #0
 805589e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80558a0:	68f8      	ldr	r0, [r7, #12]
 80558a2:	f7ff fe39 	bl	8055518 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80558a6:	bf00      	nop
 80558a8:	3710      	adds	r7, #16
 80558aa:	46bd      	mov	sp, r7
 80558ac:	bd80      	pop	{r7, pc}

080558ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80558ae:	b480      	push	{r7}
 80558b0:	b085      	sub	sp, #20
 80558b2:	af00      	add	r7, sp, #0
 80558b4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80558b6:	687b      	ldr	r3, [r7, #4]
 80558b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80558bc:	b2db      	uxtb	r3, r3
 80558be:	2b21      	cmp	r3, #33	; 0x21
 80558c0:	d13e      	bne.n	8055940 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80558c2:	687b      	ldr	r3, [r7, #4]
 80558c4:	689b      	ldr	r3, [r3, #8]
 80558c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80558ca:	d114      	bne.n	80558f6 <UART_Transmit_IT+0x48>
 80558cc:	687b      	ldr	r3, [r7, #4]
 80558ce:	691b      	ldr	r3, [r3, #16]
 80558d0:	2b00      	cmp	r3, #0
 80558d2:	d110      	bne.n	80558f6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80558d4:	687b      	ldr	r3, [r7, #4]
 80558d6:	6a1b      	ldr	r3, [r3, #32]
 80558d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80558da:	68fb      	ldr	r3, [r7, #12]
 80558dc:	881b      	ldrh	r3, [r3, #0]
 80558de:	461a      	mov	r2, r3
 80558e0:	687b      	ldr	r3, [r7, #4]
 80558e2:	681b      	ldr	r3, [r3, #0]
 80558e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80558e8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80558ea:	687b      	ldr	r3, [r7, #4]
 80558ec:	6a1b      	ldr	r3, [r3, #32]
 80558ee:	1c9a      	adds	r2, r3, #2
 80558f0:	687b      	ldr	r3, [r7, #4]
 80558f2:	621a      	str	r2, [r3, #32]
 80558f4:	e008      	b.n	8055908 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80558f6:	687b      	ldr	r3, [r7, #4]
 80558f8:	6a1b      	ldr	r3, [r3, #32]
 80558fa:	1c59      	adds	r1, r3, #1
 80558fc:	687a      	ldr	r2, [r7, #4]
 80558fe:	6211      	str	r1, [r2, #32]
 8055900:	781a      	ldrb	r2, [r3, #0]
 8055902:	687b      	ldr	r3, [r7, #4]
 8055904:	681b      	ldr	r3, [r3, #0]
 8055906:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8055908:	687b      	ldr	r3, [r7, #4]
 805590a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 805590c:	b29b      	uxth	r3, r3
 805590e:	3b01      	subs	r3, #1
 8055910:	b29b      	uxth	r3, r3
 8055912:	687a      	ldr	r2, [r7, #4]
 8055914:	4619      	mov	r1, r3
 8055916:	84d1      	strh	r1, [r2, #38]	; 0x26
 8055918:	2b00      	cmp	r3, #0
 805591a:	d10f      	bne.n	805593c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 805591c:	687b      	ldr	r3, [r7, #4]
 805591e:	681b      	ldr	r3, [r3, #0]
 8055920:	68da      	ldr	r2, [r3, #12]
 8055922:	687b      	ldr	r3, [r7, #4]
 8055924:	681b      	ldr	r3, [r3, #0]
 8055926:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 805592a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 805592c:	687b      	ldr	r3, [r7, #4]
 805592e:	681b      	ldr	r3, [r3, #0]
 8055930:	68da      	ldr	r2, [r3, #12]
 8055932:	687b      	ldr	r3, [r7, #4]
 8055934:	681b      	ldr	r3, [r3, #0]
 8055936:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 805593a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 805593c:	2300      	movs	r3, #0
 805593e:	e000      	b.n	8055942 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8055940:	2302      	movs	r3, #2
  }
}
 8055942:	4618      	mov	r0, r3
 8055944:	3714      	adds	r7, #20
 8055946:	46bd      	mov	sp, r7
 8055948:	f85d 7b04 	ldr.w	r7, [sp], #4
 805594c:	4770      	bx	lr

0805594e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 805594e:	b580      	push	{r7, lr}
 8055950:	b082      	sub	sp, #8
 8055952:	af00      	add	r7, sp, #0
 8055954:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8055956:	687b      	ldr	r3, [r7, #4]
 8055958:	681b      	ldr	r3, [r3, #0]
 805595a:	68da      	ldr	r2, [r3, #12]
 805595c:	687b      	ldr	r3, [r7, #4]
 805595e:	681b      	ldr	r3, [r3, #0]
 8055960:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8055964:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8055966:	687b      	ldr	r3, [r7, #4]
 8055968:	2220      	movs	r2, #32
 805596a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 805596e:	6878      	ldr	r0, [r7, #4]
 8055970:	f7ff fdbe 	bl	80554f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8055974:	2300      	movs	r3, #0
}
 8055976:	4618      	mov	r0, r3
 8055978:	3708      	adds	r7, #8
 805597a:	46bd      	mov	sp, r7
 805597c:	bd80      	pop	{r7, pc}

0805597e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 805597e:	b580      	push	{r7, lr}
 8055980:	b084      	sub	sp, #16
 8055982:	af00      	add	r7, sp, #0
 8055984:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8055986:	687b      	ldr	r3, [r7, #4]
 8055988:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 805598c:	b2db      	uxtb	r3, r3
 805598e:	2b22      	cmp	r3, #34	; 0x22
 8055990:	f040 8087 	bne.w	8055aa2 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8055994:	687b      	ldr	r3, [r7, #4]
 8055996:	689b      	ldr	r3, [r3, #8]
 8055998:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 805599c:	d117      	bne.n	80559ce <UART_Receive_IT+0x50>
 805599e:	687b      	ldr	r3, [r7, #4]
 80559a0:	691b      	ldr	r3, [r3, #16]
 80559a2:	2b00      	cmp	r3, #0
 80559a4:	d113      	bne.n	80559ce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80559a6:	2300      	movs	r3, #0
 80559a8:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80559aa:	687b      	ldr	r3, [r7, #4]
 80559ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80559ae:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80559b0:	687b      	ldr	r3, [r7, #4]
 80559b2:	681b      	ldr	r3, [r3, #0]
 80559b4:	685b      	ldr	r3, [r3, #4]
 80559b6:	b29b      	uxth	r3, r3
 80559b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80559bc:	b29a      	uxth	r2, r3
 80559be:	68bb      	ldr	r3, [r7, #8]
 80559c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80559c2:	687b      	ldr	r3, [r7, #4]
 80559c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80559c6:	1c9a      	adds	r2, r3, #2
 80559c8:	687b      	ldr	r3, [r7, #4]
 80559ca:	629a      	str	r2, [r3, #40]	; 0x28
 80559cc:	e026      	b.n	8055a1c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80559ce:	687b      	ldr	r3, [r7, #4]
 80559d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80559d2:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80559d4:	2300      	movs	r3, #0
 80559d6:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80559d8:	687b      	ldr	r3, [r7, #4]
 80559da:	689b      	ldr	r3, [r3, #8]
 80559dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80559e0:	d007      	beq.n	80559f2 <UART_Receive_IT+0x74>
 80559e2:	687b      	ldr	r3, [r7, #4]
 80559e4:	689b      	ldr	r3, [r3, #8]
 80559e6:	2b00      	cmp	r3, #0
 80559e8:	d10a      	bne.n	8055a00 <UART_Receive_IT+0x82>
 80559ea:	687b      	ldr	r3, [r7, #4]
 80559ec:	691b      	ldr	r3, [r3, #16]
 80559ee:	2b00      	cmp	r3, #0
 80559f0:	d106      	bne.n	8055a00 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80559f2:	687b      	ldr	r3, [r7, #4]
 80559f4:	681b      	ldr	r3, [r3, #0]
 80559f6:	685b      	ldr	r3, [r3, #4]
 80559f8:	b2da      	uxtb	r2, r3
 80559fa:	68fb      	ldr	r3, [r7, #12]
 80559fc:	701a      	strb	r2, [r3, #0]
 80559fe:	e008      	b.n	8055a12 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8055a00:	687b      	ldr	r3, [r7, #4]
 8055a02:	681b      	ldr	r3, [r3, #0]
 8055a04:	685b      	ldr	r3, [r3, #4]
 8055a06:	b2db      	uxtb	r3, r3
 8055a08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8055a0c:	b2da      	uxtb	r2, r3
 8055a0e:	68fb      	ldr	r3, [r7, #12]
 8055a10:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8055a12:	687b      	ldr	r3, [r7, #4]
 8055a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8055a16:	1c5a      	adds	r2, r3, #1
 8055a18:	687b      	ldr	r3, [r7, #4]
 8055a1a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8055a1c:	687b      	ldr	r3, [r7, #4]
 8055a1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8055a20:	b29b      	uxth	r3, r3
 8055a22:	3b01      	subs	r3, #1
 8055a24:	b29b      	uxth	r3, r3
 8055a26:	687a      	ldr	r2, [r7, #4]
 8055a28:	4619      	mov	r1, r3
 8055a2a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8055a2c:	2b00      	cmp	r3, #0
 8055a2e:	d136      	bne.n	8055a9e <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8055a30:	687b      	ldr	r3, [r7, #4]
 8055a32:	681b      	ldr	r3, [r3, #0]
 8055a34:	68da      	ldr	r2, [r3, #12]
 8055a36:	687b      	ldr	r3, [r7, #4]
 8055a38:	681b      	ldr	r3, [r3, #0]
 8055a3a:	f022 0220 	bic.w	r2, r2, #32
 8055a3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8055a40:	687b      	ldr	r3, [r7, #4]
 8055a42:	681b      	ldr	r3, [r3, #0]
 8055a44:	68da      	ldr	r2, [r3, #12]
 8055a46:	687b      	ldr	r3, [r7, #4]
 8055a48:	681b      	ldr	r3, [r3, #0]
 8055a4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8055a4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8055a50:	687b      	ldr	r3, [r7, #4]
 8055a52:	681b      	ldr	r3, [r3, #0]
 8055a54:	695a      	ldr	r2, [r3, #20]
 8055a56:	687b      	ldr	r3, [r7, #4]
 8055a58:	681b      	ldr	r3, [r3, #0]
 8055a5a:	f022 0201 	bic.w	r2, r2, #1
 8055a5e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8055a60:	687b      	ldr	r3, [r7, #4]
 8055a62:	2220      	movs	r2, #32
 8055a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8055a68:	687b      	ldr	r3, [r7, #4]
 8055a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8055a6c:	2b01      	cmp	r3, #1
 8055a6e:	d10e      	bne.n	8055a8e <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8055a70:	687b      	ldr	r3, [r7, #4]
 8055a72:	681b      	ldr	r3, [r3, #0]
 8055a74:	68da      	ldr	r2, [r3, #12]
 8055a76:	687b      	ldr	r3, [r7, #4]
 8055a78:	681b      	ldr	r3, [r3, #0]
 8055a7a:	f022 0210 	bic.w	r2, r2, #16
 8055a7e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8055a80:	687b      	ldr	r3, [r7, #4]
 8055a82:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8055a84:	4619      	mov	r1, r3
 8055a86:	6878      	ldr	r0, [r7, #4]
 8055a88:	f7ff fd50 	bl	805552c <HAL_UARTEx_RxEventCallback>
 8055a8c:	e002      	b.n	8055a94 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8055a8e:	6878      	ldr	r0, [r7, #4]
 8055a90:	f7f3 f864 	bl	8048b5c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8055a94:	687b      	ldr	r3, [r7, #4]
 8055a96:	2200      	movs	r2, #0
 8055a98:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8055a9a:	2300      	movs	r3, #0
 8055a9c:	e002      	b.n	8055aa4 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8055a9e:	2300      	movs	r3, #0
 8055aa0:	e000      	b.n	8055aa4 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8055aa2:	2302      	movs	r3, #2
  }
}
 8055aa4:	4618      	mov	r0, r3
 8055aa6:	3710      	adds	r7, #16
 8055aa8:	46bd      	mov	sp, r7
 8055aaa:	bd80      	pop	{r7, pc}

08055aac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8055aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8055ab0:	b09f      	sub	sp, #124	; 0x7c
 8055ab2:	af00      	add	r7, sp, #0
 8055ab4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8055ab6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8055ab8:	681b      	ldr	r3, [r3, #0]
 8055aba:	691b      	ldr	r3, [r3, #16]
 8055abc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8055ac0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8055ac2:	68d9      	ldr	r1, [r3, #12]
 8055ac4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8055ac6:	681a      	ldr	r2, [r3, #0]
 8055ac8:	ea40 0301 	orr.w	r3, r0, r1
 8055acc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8055ace:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8055ad0:	689a      	ldr	r2, [r3, #8]
 8055ad2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8055ad4:	691b      	ldr	r3, [r3, #16]
 8055ad6:	431a      	orrs	r2, r3
 8055ad8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8055ada:	695b      	ldr	r3, [r3, #20]
 8055adc:	431a      	orrs	r2, r3
 8055ade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8055ae0:	69db      	ldr	r3, [r3, #28]
 8055ae2:	4313      	orrs	r3, r2
 8055ae4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8055ae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8055ae8:	681b      	ldr	r3, [r3, #0]
 8055aea:	68db      	ldr	r3, [r3, #12]
 8055aec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8055af0:	f021 010c 	bic.w	r1, r1, #12
 8055af4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8055af6:	681a      	ldr	r2, [r3, #0]
 8055af8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8055afa:	430b      	orrs	r3, r1
 8055afc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8055afe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8055b00:	681b      	ldr	r3, [r3, #0]
 8055b02:	695b      	ldr	r3, [r3, #20]
 8055b04:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8055b08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8055b0a:	6999      	ldr	r1, [r3, #24]
 8055b0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8055b0e:	681a      	ldr	r2, [r3, #0]
 8055b10:	ea40 0301 	orr.w	r3, r0, r1
 8055b14:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8055b16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8055b18:	681a      	ldr	r2, [r3, #0]
 8055b1a:	4bc5      	ldr	r3, [pc, #788]	; (8055e30 <UART_SetConfig+0x384>)
 8055b1c:	429a      	cmp	r2, r3
 8055b1e:	d004      	beq.n	8055b2a <UART_SetConfig+0x7e>
 8055b20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8055b22:	681a      	ldr	r2, [r3, #0]
 8055b24:	4bc3      	ldr	r3, [pc, #780]	; (8055e34 <UART_SetConfig+0x388>)
 8055b26:	429a      	cmp	r2, r3
 8055b28:	d103      	bne.n	8055b32 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8055b2a:	f7fd fe71 	bl	8053810 <HAL_RCC_GetPCLK2Freq>
 8055b2e:	6778      	str	r0, [r7, #116]	; 0x74
 8055b30:	e002      	b.n	8055b38 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8055b32:	f7fd fe59 	bl	80537e8 <HAL_RCC_GetPCLK1Freq>
 8055b36:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8055b38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8055b3a:	69db      	ldr	r3, [r3, #28]
 8055b3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8055b40:	f040 80b6 	bne.w	8055cb0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8055b44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8055b46:	461c      	mov	r4, r3
 8055b48:	f04f 0500 	mov.w	r5, #0
 8055b4c:	4622      	mov	r2, r4
 8055b4e:	462b      	mov	r3, r5
 8055b50:	1891      	adds	r1, r2, r2
 8055b52:	6439      	str	r1, [r7, #64]	; 0x40
 8055b54:	415b      	adcs	r3, r3
 8055b56:	647b      	str	r3, [r7, #68]	; 0x44
 8055b58:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8055b5c:	1912      	adds	r2, r2, r4
 8055b5e:	eb45 0303 	adc.w	r3, r5, r3
 8055b62:	f04f 0000 	mov.w	r0, #0
 8055b66:	f04f 0100 	mov.w	r1, #0
 8055b6a:	00d9      	lsls	r1, r3, #3
 8055b6c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8055b70:	00d0      	lsls	r0, r2, #3
 8055b72:	4602      	mov	r2, r0
 8055b74:	460b      	mov	r3, r1
 8055b76:	1911      	adds	r1, r2, r4
 8055b78:	6639      	str	r1, [r7, #96]	; 0x60
 8055b7a:	416b      	adcs	r3, r5
 8055b7c:	667b      	str	r3, [r7, #100]	; 0x64
 8055b7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8055b80:	685b      	ldr	r3, [r3, #4]
 8055b82:	461a      	mov	r2, r3
 8055b84:	f04f 0300 	mov.w	r3, #0
 8055b88:	1891      	adds	r1, r2, r2
 8055b8a:	63b9      	str	r1, [r7, #56]	; 0x38
 8055b8c:	415b      	adcs	r3, r3
 8055b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8055b90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8055b94:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8055b98:	f7eb f984 	bl	8040ea4 <__aeabi_uldivmod>
 8055b9c:	4602      	mov	r2, r0
 8055b9e:	460b      	mov	r3, r1
 8055ba0:	4ba5      	ldr	r3, [pc, #660]	; (8055e38 <UART_SetConfig+0x38c>)
 8055ba2:	fba3 2302 	umull	r2, r3, r3, r2
 8055ba6:	095b      	lsrs	r3, r3, #5
 8055ba8:	011e      	lsls	r6, r3, #4
 8055baa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8055bac:	461c      	mov	r4, r3
 8055bae:	f04f 0500 	mov.w	r5, #0
 8055bb2:	4622      	mov	r2, r4
 8055bb4:	462b      	mov	r3, r5
 8055bb6:	1891      	adds	r1, r2, r2
 8055bb8:	6339      	str	r1, [r7, #48]	; 0x30
 8055bba:	415b      	adcs	r3, r3
 8055bbc:	637b      	str	r3, [r7, #52]	; 0x34
 8055bbe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8055bc2:	1912      	adds	r2, r2, r4
 8055bc4:	eb45 0303 	adc.w	r3, r5, r3
 8055bc8:	f04f 0000 	mov.w	r0, #0
 8055bcc:	f04f 0100 	mov.w	r1, #0
 8055bd0:	00d9      	lsls	r1, r3, #3
 8055bd2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8055bd6:	00d0      	lsls	r0, r2, #3
 8055bd8:	4602      	mov	r2, r0
 8055bda:	460b      	mov	r3, r1
 8055bdc:	1911      	adds	r1, r2, r4
 8055bde:	65b9      	str	r1, [r7, #88]	; 0x58
 8055be0:	416b      	adcs	r3, r5
 8055be2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8055be4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8055be6:	685b      	ldr	r3, [r3, #4]
 8055be8:	461a      	mov	r2, r3
 8055bea:	f04f 0300 	mov.w	r3, #0
 8055bee:	1891      	adds	r1, r2, r2
 8055bf0:	62b9      	str	r1, [r7, #40]	; 0x28
 8055bf2:	415b      	adcs	r3, r3
 8055bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8055bf6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8055bfa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8055bfe:	f7eb f951 	bl	8040ea4 <__aeabi_uldivmod>
 8055c02:	4602      	mov	r2, r0
 8055c04:	460b      	mov	r3, r1
 8055c06:	4b8c      	ldr	r3, [pc, #560]	; (8055e38 <UART_SetConfig+0x38c>)
 8055c08:	fba3 1302 	umull	r1, r3, r3, r2
 8055c0c:	095b      	lsrs	r3, r3, #5
 8055c0e:	2164      	movs	r1, #100	; 0x64
 8055c10:	fb01 f303 	mul.w	r3, r1, r3
 8055c14:	1ad3      	subs	r3, r2, r3
 8055c16:	00db      	lsls	r3, r3, #3
 8055c18:	3332      	adds	r3, #50	; 0x32
 8055c1a:	4a87      	ldr	r2, [pc, #540]	; (8055e38 <UART_SetConfig+0x38c>)
 8055c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8055c20:	095b      	lsrs	r3, r3, #5
 8055c22:	005b      	lsls	r3, r3, #1
 8055c24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8055c28:	441e      	add	r6, r3
 8055c2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8055c2c:	4618      	mov	r0, r3
 8055c2e:	f04f 0100 	mov.w	r1, #0
 8055c32:	4602      	mov	r2, r0
 8055c34:	460b      	mov	r3, r1
 8055c36:	1894      	adds	r4, r2, r2
 8055c38:	623c      	str	r4, [r7, #32]
 8055c3a:	415b      	adcs	r3, r3
 8055c3c:	627b      	str	r3, [r7, #36]	; 0x24
 8055c3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8055c42:	1812      	adds	r2, r2, r0
 8055c44:	eb41 0303 	adc.w	r3, r1, r3
 8055c48:	f04f 0400 	mov.w	r4, #0
 8055c4c:	f04f 0500 	mov.w	r5, #0
 8055c50:	00dd      	lsls	r5, r3, #3
 8055c52:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8055c56:	00d4      	lsls	r4, r2, #3
 8055c58:	4622      	mov	r2, r4
 8055c5a:	462b      	mov	r3, r5
 8055c5c:	1814      	adds	r4, r2, r0
 8055c5e:	653c      	str	r4, [r7, #80]	; 0x50
 8055c60:	414b      	adcs	r3, r1
 8055c62:	657b      	str	r3, [r7, #84]	; 0x54
 8055c64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8055c66:	685b      	ldr	r3, [r3, #4]
 8055c68:	461a      	mov	r2, r3
 8055c6a:	f04f 0300 	mov.w	r3, #0
 8055c6e:	1891      	adds	r1, r2, r2
 8055c70:	61b9      	str	r1, [r7, #24]
 8055c72:	415b      	adcs	r3, r3
 8055c74:	61fb      	str	r3, [r7, #28]
 8055c76:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8055c7a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8055c7e:	f7eb f911 	bl	8040ea4 <__aeabi_uldivmod>
 8055c82:	4602      	mov	r2, r0
 8055c84:	460b      	mov	r3, r1
 8055c86:	4b6c      	ldr	r3, [pc, #432]	; (8055e38 <UART_SetConfig+0x38c>)
 8055c88:	fba3 1302 	umull	r1, r3, r3, r2
 8055c8c:	095b      	lsrs	r3, r3, #5
 8055c8e:	2164      	movs	r1, #100	; 0x64
 8055c90:	fb01 f303 	mul.w	r3, r1, r3
 8055c94:	1ad3      	subs	r3, r2, r3
 8055c96:	00db      	lsls	r3, r3, #3
 8055c98:	3332      	adds	r3, #50	; 0x32
 8055c9a:	4a67      	ldr	r2, [pc, #412]	; (8055e38 <UART_SetConfig+0x38c>)
 8055c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8055ca0:	095b      	lsrs	r3, r3, #5
 8055ca2:	f003 0207 	and.w	r2, r3, #7
 8055ca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8055ca8:	681b      	ldr	r3, [r3, #0]
 8055caa:	4432      	add	r2, r6
 8055cac:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8055cae:	e0b9      	b.n	8055e24 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8055cb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8055cb2:	461c      	mov	r4, r3
 8055cb4:	f04f 0500 	mov.w	r5, #0
 8055cb8:	4622      	mov	r2, r4
 8055cba:	462b      	mov	r3, r5
 8055cbc:	1891      	adds	r1, r2, r2
 8055cbe:	6139      	str	r1, [r7, #16]
 8055cc0:	415b      	adcs	r3, r3
 8055cc2:	617b      	str	r3, [r7, #20]
 8055cc4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8055cc8:	1912      	adds	r2, r2, r4
 8055cca:	eb45 0303 	adc.w	r3, r5, r3
 8055cce:	f04f 0000 	mov.w	r0, #0
 8055cd2:	f04f 0100 	mov.w	r1, #0
 8055cd6:	00d9      	lsls	r1, r3, #3
 8055cd8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8055cdc:	00d0      	lsls	r0, r2, #3
 8055cde:	4602      	mov	r2, r0
 8055ce0:	460b      	mov	r3, r1
 8055ce2:	eb12 0804 	adds.w	r8, r2, r4
 8055ce6:	eb43 0905 	adc.w	r9, r3, r5
 8055cea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8055cec:	685b      	ldr	r3, [r3, #4]
 8055cee:	4618      	mov	r0, r3
 8055cf0:	f04f 0100 	mov.w	r1, #0
 8055cf4:	f04f 0200 	mov.w	r2, #0
 8055cf8:	f04f 0300 	mov.w	r3, #0
 8055cfc:	008b      	lsls	r3, r1, #2
 8055cfe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8055d02:	0082      	lsls	r2, r0, #2
 8055d04:	4640      	mov	r0, r8
 8055d06:	4649      	mov	r1, r9
 8055d08:	f7eb f8cc 	bl	8040ea4 <__aeabi_uldivmod>
 8055d0c:	4602      	mov	r2, r0
 8055d0e:	460b      	mov	r3, r1
 8055d10:	4b49      	ldr	r3, [pc, #292]	; (8055e38 <UART_SetConfig+0x38c>)
 8055d12:	fba3 2302 	umull	r2, r3, r3, r2
 8055d16:	095b      	lsrs	r3, r3, #5
 8055d18:	011e      	lsls	r6, r3, #4
 8055d1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8055d1c:	4618      	mov	r0, r3
 8055d1e:	f04f 0100 	mov.w	r1, #0
 8055d22:	4602      	mov	r2, r0
 8055d24:	460b      	mov	r3, r1
 8055d26:	1894      	adds	r4, r2, r2
 8055d28:	60bc      	str	r4, [r7, #8]
 8055d2a:	415b      	adcs	r3, r3
 8055d2c:	60fb      	str	r3, [r7, #12]
 8055d2e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8055d32:	1812      	adds	r2, r2, r0
 8055d34:	eb41 0303 	adc.w	r3, r1, r3
 8055d38:	f04f 0400 	mov.w	r4, #0
 8055d3c:	f04f 0500 	mov.w	r5, #0
 8055d40:	00dd      	lsls	r5, r3, #3
 8055d42:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8055d46:	00d4      	lsls	r4, r2, #3
 8055d48:	4622      	mov	r2, r4
 8055d4a:	462b      	mov	r3, r5
 8055d4c:	1814      	adds	r4, r2, r0
 8055d4e:	64bc      	str	r4, [r7, #72]	; 0x48
 8055d50:	414b      	adcs	r3, r1
 8055d52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8055d54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8055d56:	685b      	ldr	r3, [r3, #4]
 8055d58:	4618      	mov	r0, r3
 8055d5a:	f04f 0100 	mov.w	r1, #0
 8055d5e:	f04f 0200 	mov.w	r2, #0
 8055d62:	f04f 0300 	mov.w	r3, #0
 8055d66:	008b      	lsls	r3, r1, #2
 8055d68:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8055d6c:	0082      	lsls	r2, r0, #2
 8055d6e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8055d72:	f7eb f897 	bl	8040ea4 <__aeabi_uldivmod>
 8055d76:	4602      	mov	r2, r0
 8055d78:	460b      	mov	r3, r1
 8055d7a:	4b2f      	ldr	r3, [pc, #188]	; (8055e38 <UART_SetConfig+0x38c>)
 8055d7c:	fba3 1302 	umull	r1, r3, r3, r2
 8055d80:	095b      	lsrs	r3, r3, #5
 8055d82:	2164      	movs	r1, #100	; 0x64
 8055d84:	fb01 f303 	mul.w	r3, r1, r3
 8055d88:	1ad3      	subs	r3, r2, r3
 8055d8a:	011b      	lsls	r3, r3, #4
 8055d8c:	3332      	adds	r3, #50	; 0x32
 8055d8e:	4a2a      	ldr	r2, [pc, #168]	; (8055e38 <UART_SetConfig+0x38c>)
 8055d90:	fba2 2303 	umull	r2, r3, r2, r3
 8055d94:	095b      	lsrs	r3, r3, #5
 8055d96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8055d9a:	441e      	add	r6, r3
 8055d9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8055d9e:	4618      	mov	r0, r3
 8055da0:	f04f 0100 	mov.w	r1, #0
 8055da4:	4602      	mov	r2, r0
 8055da6:	460b      	mov	r3, r1
 8055da8:	1894      	adds	r4, r2, r2
 8055daa:	603c      	str	r4, [r7, #0]
 8055dac:	415b      	adcs	r3, r3
 8055dae:	607b      	str	r3, [r7, #4]
 8055db0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8055db4:	1812      	adds	r2, r2, r0
 8055db6:	eb41 0303 	adc.w	r3, r1, r3
 8055dba:	f04f 0400 	mov.w	r4, #0
 8055dbe:	f04f 0500 	mov.w	r5, #0
 8055dc2:	00dd      	lsls	r5, r3, #3
 8055dc4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8055dc8:	00d4      	lsls	r4, r2, #3
 8055dca:	4622      	mov	r2, r4
 8055dcc:	462b      	mov	r3, r5
 8055dce:	eb12 0a00 	adds.w	sl, r2, r0
 8055dd2:	eb43 0b01 	adc.w	fp, r3, r1
 8055dd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8055dd8:	685b      	ldr	r3, [r3, #4]
 8055dda:	4618      	mov	r0, r3
 8055ddc:	f04f 0100 	mov.w	r1, #0
 8055de0:	f04f 0200 	mov.w	r2, #0
 8055de4:	f04f 0300 	mov.w	r3, #0
 8055de8:	008b      	lsls	r3, r1, #2
 8055dea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8055dee:	0082      	lsls	r2, r0, #2
 8055df0:	4650      	mov	r0, sl
 8055df2:	4659      	mov	r1, fp
 8055df4:	f7eb f856 	bl	8040ea4 <__aeabi_uldivmod>
 8055df8:	4602      	mov	r2, r0
 8055dfa:	460b      	mov	r3, r1
 8055dfc:	4b0e      	ldr	r3, [pc, #56]	; (8055e38 <UART_SetConfig+0x38c>)
 8055dfe:	fba3 1302 	umull	r1, r3, r3, r2
 8055e02:	095b      	lsrs	r3, r3, #5
 8055e04:	2164      	movs	r1, #100	; 0x64
 8055e06:	fb01 f303 	mul.w	r3, r1, r3
 8055e0a:	1ad3      	subs	r3, r2, r3
 8055e0c:	011b      	lsls	r3, r3, #4
 8055e0e:	3332      	adds	r3, #50	; 0x32
 8055e10:	4a09      	ldr	r2, [pc, #36]	; (8055e38 <UART_SetConfig+0x38c>)
 8055e12:	fba2 2303 	umull	r2, r3, r2, r3
 8055e16:	095b      	lsrs	r3, r3, #5
 8055e18:	f003 020f 	and.w	r2, r3, #15
 8055e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8055e1e:	681b      	ldr	r3, [r3, #0]
 8055e20:	4432      	add	r2, r6
 8055e22:	609a      	str	r2, [r3, #8]
}
 8055e24:	bf00      	nop
 8055e26:	377c      	adds	r7, #124	; 0x7c
 8055e28:	46bd      	mov	sp, r7
 8055e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8055e2e:	bf00      	nop
 8055e30:	40011000 	.word	0x40011000
 8055e34:	40011400 	.word	0x40011400
 8055e38:	51eb851f 	.word	0x51eb851f

08055e3c <__NVIC_SetPriority>:
{
 8055e3c:	b480      	push	{r7}
 8055e3e:	b083      	sub	sp, #12
 8055e40:	af00      	add	r7, sp, #0
 8055e42:	4603      	mov	r3, r0
 8055e44:	6039      	str	r1, [r7, #0]
 8055e46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8055e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8055e4c:	2b00      	cmp	r3, #0
 8055e4e:	db0a      	blt.n	8055e66 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8055e50:	683b      	ldr	r3, [r7, #0]
 8055e52:	b2da      	uxtb	r2, r3
 8055e54:	490c      	ldr	r1, [pc, #48]	; (8055e88 <__NVIC_SetPriority+0x4c>)
 8055e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8055e5a:	0112      	lsls	r2, r2, #4
 8055e5c:	b2d2      	uxtb	r2, r2
 8055e5e:	440b      	add	r3, r1
 8055e60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8055e64:	e00a      	b.n	8055e7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8055e66:	683b      	ldr	r3, [r7, #0]
 8055e68:	b2da      	uxtb	r2, r3
 8055e6a:	4908      	ldr	r1, [pc, #32]	; (8055e8c <__NVIC_SetPriority+0x50>)
 8055e6c:	79fb      	ldrb	r3, [r7, #7]
 8055e6e:	f003 030f 	and.w	r3, r3, #15
 8055e72:	3b04      	subs	r3, #4
 8055e74:	0112      	lsls	r2, r2, #4
 8055e76:	b2d2      	uxtb	r2, r2
 8055e78:	440b      	add	r3, r1
 8055e7a:	761a      	strb	r2, [r3, #24]
}
 8055e7c:	bf00      	nop
 8055e7e:	370c      	adds	r7, #12
 8055e80:	46bd      	mov	sp, r7
 8055e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8055e86:	4770      	bx	lr
 8055e88:	e000e100 	.word	0xe000e100
 8055e8c:	e000ed00 	.word	0xe000ed00

08055e90 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8055e90:	b580      	push	{r7, lr}
 8055e92:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8055e94:	4b05      	ldr	r3, [pc, #20]	; (8055eac <SysTick_Handler+0x1c>)
 8055e96:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8055e98:	f002 f8a6 	bl	8057fe8 <xTaskGetSchedulerState>
 8055e9c:	4603      	mov	r3, r0
 8055e9e:	2b01      	cmp	r3, #1
 8055ea0:	d001      	beq.n	8055ea6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8055ea2:	f002 ff71 	bl	8058d88 <xPortSysTickHandler>
  }
}
 8055ea6:	bf00      	nop
 8055ea8:	bd80      	pop	{r7, pc}
 8055eaa:	bf00      	nop
 8055eac:	e000e010 	.word	0xe000e010

08055eb0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8055eb0:	b580      	push	{r7, lr}
 8055eb2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8055eb4:	2100      	movs	r1, #0
 8055eb6:	f06f 0004 	mvn.w	r0, #4
 8055eba:	f7ff ffbf 	bl	8055e3c <__NVIC_SetPriority>
#endif
}
 8055ebe:	bf00      	nop
 8055ec0:	bd80      	pop	{r7, pc}
	...

08055ec4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8055ec4:	b480      	push	{r7}
 8055ec6:	b083      	sub	sp, #12
 8055ec8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8055eca:	f3ef 8305 	mrs	r3, IPSR
 8055ece:	603b      	str	r3, [r7, #0]
  return(result);
 8055ed0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8055ed2:	2b00      	cmp	r3, #0
 8055ed4:	d003      	beq.n	8055ede <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8055ed6:	f06f 0305 	mvn.w	r3, #5
 8055eda:	607b      	str	r3, [r7, #4]
 8055edc:	e00c      	b.n	8055ef8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8055ede:	4b0a      	ldr	r3, [pc, #40]	; (8055f08 <osKernelInitialize+0x44>)
 8055ee0:	681b      	ldr	r3, [r3, #0]
 8055ee2:	2b00      	cmp	r3, #0
 8055ee4:	d105      	bne.n	8055ef2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8055ee6:	4b08      	ldr	r3, [pc, #32]	; (8055f08 <osKernelInitialize+0x44>)
 8055ee8:	2201      	movs	r2, #1
 8055eea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8055eec:	2300      	movs	r3, #0
 8055eee:	607b      	str	r3, [r7, #4]
 8055ef0:	e002      	b.n	8055ef8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8055ef2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8055ef6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8055ef8:	687b      	ldr	r3, [r7, #4]
}
 8055efa:	4618      	mov	r0, r3
 8055efc:	370c      	adds	r7, #12
 8055efe:	46bd      	mov	sp, r7
 8055f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8055f04:	4770      	bx	lr
 8055f06:	bf00      	nop
 8055f08:	2000905c 	.word	0x2000905c

08055f0c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8055f0c:	b580      	push	{r7, lr}
 8055f0e:	b082      	sub	sp, #8
 8055f10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8055f12:	f3ef 8305 	mrs	r3, IPSR
 8055f16:	603b      	str	r3, [r7, #0]
  return(result);
 8055f18:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8055f1a:	2b00      	cmp	r3, #0
 8055f1c:	d003      	beq.n	8055f26 <osKernelStart+0x1a>
    stat = osErrorISR;
 8055f1e:	f06f 0305 	mvn.w	r3, #5
 8055f22:	607b      	str	r3, [r7, #4]
 8055f24:	e010      	b.n	8055f48 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8055f26:	4b0b      	ldr	r3, [pc, #44]	; (8055f54 <osKernelStart+0x48>)
 8055f28:	681b      	ldr	r3, [r3, #0]
 8055f2a:	2b01      	cmp	r3, #1
 8055f2c:	d109      	bne.n	8055f42 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8055f2e:	f7ff ffbf 	bl	8055eb0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8055f32:	4b08      	ldr	r3, [pc, #32]	; (8055f54 <osKernelStart+0x48>)
 8055f34:	2202      	movs	r2, #2
 8055f36:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8055f38:	f001 fbfc 	bl	8057734 <vTaskStartScheduler>
      stat = osOK;
 8055f3c:	2300      	movs	r3, #0
 8055f3e:	607b      	str	r3, [r7, #4]
 8055f40:	e002      	b.n	8055f48 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8055f42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8055f46:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8055f48:	687b      	ldr	r3, [r7, #4]
}
 8055f4a:	4618      	mov	r0, r3
 8055f4c:	3708      	adds	r7, #8
 8055f4e:	46bd      	mov	sp, r7
 8055f50:	bd80      	pop	{r7, pc}
 8055f52:	bf00      	nop
 8055f54:	2000905c 	.word	0x2000905c

08055f58 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8055f58:	b580      	push	{r7, lr}
 8055f5a:	b082      	sub	sp, #8
 8055f5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8055f5e:	f3ef 8305 	mrs	r3, IPSR
 8055f62:	603b      	str	r3, [r7, #0]
  return(result);
 8055f64:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8055f66:	2b00      	cmp	r3, #0
 8055f68:	d003      	beq.n	8055f72 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8055f6a:	f001 fd05 	bl	8057978 <xTaskGetTickCountFromISR>
 8055f6e:	6078      	str	r0, [r7, #4]
 8055f70:	e002      	b.n	8055f78 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8055f72:	f001 fcf1 	bl	8057958 <xTaskGetTickCount>
 8055f76:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8055f78:	687b      	ldr	r3, [r7, #4]
}
 8055f7a:	4618      	mov	r0, r3
 8055f7c:	3708      	adds	r7, #8
 8055f7e:	46bd      	mov	sp, r7
 8055f80:	bd80      	pop	{r7, pc}

08055f82 <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 8055f82:	b480      	push	{r7}
 8055f84:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 8055f86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 8055f8a:	4618      	mov	r0, r3
 8055f8c:	46bd      	mov	sp, r7
 8055f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8055f92:	4770      	bx	lr

08055f94 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8055f94:	b580      	push	{r7, lr}
 8055f96:	b08e      	sub	sp, #56	; 0x38
 8055f98:	af04      	add	r7, sp, #16
 8055f9a:	60f8      	str	r0, [r7, #12]
 8055f9c:	60b9      	str	r1, [r7, #8]
 8055f9e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8055fa0:	2300      	movs	r3, #0
 8055fa2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8055fa4:	f3ef 8305 	mrs	r3, IPSR
 8055fa8:	617b      	str	r3, [r7, #20]
  return(result);
 8055faa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8055fac:	2b00      	cmp	r3, #0
 8055fae:	d17e      	bne.n	80560ae <osThreadNew+0x11a>
 8055fb0:	68fb      	ldr	r3, [r7, #12]
 8055fb2:	2b00      	cmp	r3, #0
 8055fb4:	d07b      	beq.n	80560ae <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8055fb6:	2380      	movs	r3, #128	; 0x80
 8055fb8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8055fba:	2318      	movs	r3, #24
 8055fbc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8055fbe:	2300      	movs	r3, #0
 8055fc0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8055fc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8055fc6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8055fc8:	687b      	ldr	r3, [r7, #4]
 8055fca:	2b00      	cmp	r3, #0
 8055fcc:	d045      	beq.n	805605a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8055fce:	687b      	ldr	r3, [r7, #4]
 8055fd0:	681b      	ldr	r3, [r3, #0]
 8055fd2:	2b00      	cmp	r3, #0
 8055fd4:	d002      	beq.n	8055fdc <osThreadNew+0x48>
        name = attr->name;
 8055fd6:	687b      	ldr	r3, [r7, #4]
 8055fd8:	681b      	ldr	r3, [r3, #0]
 8055fda:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8055fdc:	687b      	ldr	r3, [r7, #4]
 8055fde:	699b      	ldr	r3, [r3, #24]
 8055fe0:	2b00      	cmp	r3, #0
 8055fe2:	d002      	beq.n	8055fea <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8055fe4:	687b      	ldr	r3, [r7, #4]
 8055fe6:	699b      	ldr	r3, [r3, #24]
 8055fe8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8055fea:	69fb      	ldr	r3, [r7, #28]
 8055fec:	2b00      	cmp	r3, #0
 8055fee:	d008      	beq.n	8056002 <osThreadNew+0x6e>
 8055ff0:	69fb      	ldr	r3, [r7, #28]
 8055ff2:	2b38      	cmp	r3, #56	; 0x38
 8055ff4:	d805      	bhi.n	8056002 <osThreadNew+0x6e>
 8055ff6:	687b      	ldr	r3, [r7, #4]
 8055ff8:	685b      	ldr	r3, [r3, #4]
 8055ffa:	f003 0301 	and.w	r3, r3, #1
 8055ffe:	2b00      	cmp	r3, #0
 8056000:	d001      	beq.n	8056006 <osThreadNew+0x72>
        return (NULL);
 8056002:	2300      	movs	r3, #0
 8056004:	e054      	b.n	80560b0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8056006:	687b      	ldr	r3, [r7, #4]
 8056008:	695b      	ldr	r3, [r3, #20]
 805600a:	2b00      	cmp	r3, #0
 805600c:	d003      	beq.n	8056016 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 805600e:	687b      	ldr	r3, [r7, #4]
 8056010:	695b      	ldr	r3, [r3, #20]
 8056012:	089b      	lsrs	r3, r3, #2
 8056014:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8056016:	687b      	ldr	r3, [r7, #4]
 8056018:	689b      	ldr	r3, [r3, #8]
 805601a:	2b00      	cmp	r3, #0
 805601c:	d00e      	beq.n	805603c <osThreadNew+0xa8>
 805601e:	687b      	ldr	r3, [r7, #4]
 8056020:	68db      	ldr	r3, [r3, #12]
 8056022:	2b5b      	cmp	r3, #91	; 0x5b
 8056024:	d90a      	bls.n	805603c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8056026:	687b      	ldr	r3, [r7, #4]
 8056028:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 805602a:	2b00      	cmp	r3, #0
 805602c:	d006      	beq.n	805603c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 805602e:	687b      	ldr	r3, [r7, #4]
 8056030:	695b      	ldr	r3, [r3, #20]
 8056032:	2b00      	cmp	r3, #0
 8056034:	d002      	beq.n	805603c <osThreadNew+0xa8>
        mem = 1;
 8056036:	2301      	movs	r3, #1
 8056038:	61bb      	str	r3, [r7, #24]
 805603a:	e010      	b.n	805605e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 805603c:	687b      	ldr	r3, [r7, #4]
 805603e:	689b      	ldr	r3, [r3, #8]
 8056040:	2b00      	cmp	r3, #0
 8056042:	d10c      	bne.n	805605e <osThreadNew+0xca>
 8056044:	687b      	ldr	r3, [r7, #4]
 8056046:	68db      	ldr	r3, [r3, #12]
 8056048:	2b00      	cmp	r3, #0
 805604a:	d108      	bne.n	805605e <osThreadNew+0xca>
 805604c:	687b      	ldr	r3, [r7, #4]
 805604e:	691b      	ldr	r3, [r3, #16]
 8056050:	2b00      	cmp	r3, #0
 8056052:	d104      	bne.n	805605e <osThreadNew+0xca>
          mem = 0;
 8056054:	2300      	movs	r3, #0
 8056056:	61bb      	str	r3, [r7, #24]
 8056058:	e001      	b.n	805605e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 805605a:	2300      	movs	r3, #0
 805605c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 805605e:	69bb      	ldr	r3, [r7, #24]
 8056060:	2b01      	cmp	r3, #1
 8056062:	d110      	bne.n	8056086 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8056064:	687b      	ldr	r3, [r7, #4]
 8056066:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8056068:	687a      	ldr	r2, [r7, #4]
 805606a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 805606c:	9202      	str	r2, [sp, #8]
 805606e:	9301      	str	r3, [sp, #4]
 8056070:	69fb      	ldr	r3, [r7, #28]
 8056072:	9300      	str	r3, [sp, #0]
 8056074:	68bb      	ldr	r3, [r7, #8]
 8056076:	6a3a      	ldr	r2, [r7, #32]
 8056078:	6a79      	ldr	r1, [r7, #36]	; 0x24
 805607a:	68f8      	ldr	r0, [r7, #12]
 805607c:	f001 f90e 	bl	805729c <xTaskCreateStatic>
 8056080:	4603      	mov	r3, r0
 8056082:	613b      	str	r3, [r7, #16]
 8056084:	e013      	b.n	80560ae <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8056086:	69bb      	ldr	r3, [r7, #24]
 8056088:	2b00      	cmp	r3, #0
 805608a:	d110      	bne.n	80560ae <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 805608c:	6a3b      	ldr	r3, [r7, #32]
 805608e:	b29a      	uxth	r2, r3
 8056090:	f107 0310 	add.w	r3, r7, #16
 8056094:	9301      	str	r3, [sp, #4]
 8056096:	69fb      	ldr	r3, [r7, #28]
 8056098:	9300      	str	r3, [sp, #0]
 805609a:	68bb      	ldr	r3, [r7, #8]
 805609c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 805609e:	68f8      	ldr	r0, [r7, #12]
 80560a0:	f001 f959 	bl	8057356 <xTaskCreate>
 80560a4:	4603      	mov	r3, r0
 80560a6:	2b01      	cmp	r3, #1
 80560a8:	d001      	beq.n	80560ae <osThreadNew+0x11a>
            hTask = NULL;
 80560aa:	2300      	movs	r3, #0
 80560ac:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80560ae:	693b      	ldr	r3, [r7, #16]
}
 80560b0:	4618      	mov	r0, r3
 80560b2:	3728      	adds	r7, #40	; 0x28
 80560b4:	46bd      	mov	sp, r7
 80560b6:	bd80      	pop	{r7, pc}

080560b8 <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 80560b8:	b580      	push	{r7, lr}
 80560ba:	b086      	sub	sp, #24
 80560bc:	af00      	add	r7, sp, #0
 80560be:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80560c0:	687b      	ldr	r3, [r7, #4]
 80560c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80560c4:	f3ef 8305 	mrs	r3, IPSR
 80560c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80560ca:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80560cc:	2b00      	cmp	r3, #0
 80560ce:	d003      	beq.n	80560d8 <osThreadSuspend+0x20>
    stat = osErrorISR;
 80560d0:	f06f 0305 	mvn.w	r3, #5
 80560d4:	617b      	str	r3, [r7, #20]
 80560d6:	e00b      	b.n	80560f0 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 80560d8:	693b      	ldr	r3, [r7, #16]
 80560da:	2b00      	cmp	r3, #0
 80560dc:	d103      	bne.n	80560e6 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 80560de:	f06f 0303 	mvn.w	r3, #3
 80560e2:	617b      	str	r3, [r7, #20]
 80560e4:	e004      	b.n	80560f0 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 80560e6:	2300      	movs	r3, #0
 80560e8:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 80560ea:	6938      	ldr	r0, [r7, #16]
 80560ec:	f001 faac 	bl	8057648 <vTaskSuspend>
  }

  return (stat);
 80560f0:	697b      	ldr	r3, [r7, #20]
}
 80560f2:	4618      	mov	r0, r3
 80560f4:	3718      	adds	r7, #24
 80560f6:	46bd      	mov	sp, r7
 80560f8:	bd80      	pop	{r7, pc}

080560fa <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80560fa:	b580      	push	{r7, lr}
 80560fc:	b084      	sub	sp, #16
 80560fe:	af00      	add	r7, sp, #0
 8056100:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8056102:	f3ef 8305 	mrs	r3, IPSR
 8056106:	60bb      	str	r3, [r7, #8]
  return(result);
 8056108:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 805610a:	2b00      	cmp	r3, #0
 805610c:	d003      	beq.n	8056116 <osDelay+0x1c>
    stat = osErrorISR;
 805610e:	f06f 0305 	mvn.w	r3, #5
 8056112:	60fb      	str	r3, [r7, #12]
 8056114:	e007      	b.n	8056126 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8056116:	2300      	movs	r3, #0
 8056118:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 805611a:	687b      	ldr	r3, [r7, #4]
 805611c:	2b00      	cmp	r3, #0
 805611e:	d002      	beq.n	8056126 <osDelay+0x2c>
      vTaskDelay(ticks);
 8056120:	6878      	ldr	r0, [r7, #4]
 8056122:	f001 fa5d 	bl	80575e0 <vTaskDelay>
    }
  }

  return (stat);
 8056126:	68fb      	ldr	r3, [r7, #12]
}
 8056128:	4618      	mov	r0, r3
 805612a:	3710      	adds	r7, #16
 805612c:	46bd      	mov	sp, r7
 805612e:	bd80      	pop	{r7, pc}

08056130 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8056130:	b580      	push	{r7, lr}
 8056132:	b084      	sub	sp, #16
 8056134:	af00      	add	r7, sp, #0
 8056136:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8056138:	6878      	ldr	r0, [r7, #4]
 805613a:	f002 fc46 	bl	80589ca <pvTimerGetTimerID>
 805613e:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8056140:	68fb      	ldr	r3, [r7, #12]
 8056142:	2b00      	cmp	r3, #0
 8056144:	d005      	beq.n	8056152 <TimerCallback+0x22>
    callb->func (callb->arg);
 8056146:	68fb      	ldr	r3, [r7, #12]
 8056148:	681b      	ldr	r3, [r3, #0]
 805614a:	68fa      	ldr	r2, [r7, #12]
 805614c:	6852      	ldr	r2, [r2, #4]
 805614e:	4610      	mov	r0, r2
 8056150:	4798      	blx	r3
  }
}
 8056152:	bf00      	nop
 8056154:	3710      	adds	r7, #16
 8056156:	46bd      	mov	sp, r7
 8056158:	bd80      	pop	{r7, pc}
	...

0805615c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 805615c:	b580      	push	{r7, lr}
 805615e:	b08c      	sub	sp, #48	; 0x30
 8056160:	af02      	add	r7, sp, #8
 8056162:	60f8      	str	r0, [r7, #12]
 8056164:	607a      	str	r2, [r7, #4]
 8056166:	603b      	str	r3, [r7, #0]
 8056168:	460b      	mov	r3, r1
 805616a:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 805616c:	2300      	movs	r3, #0
 805616e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8056170:	f3ef 8305 	mrs	r3, IPSR
 8056174:	613b      	str	r3, [r7, #16]
  return(result);
 8056176:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8056178:	2b00      	cmp	r3, #0
 805617a:	d163      	bne.n	8056244 <osTimerNew+0xe8>
 805617c:	68fb      	ldr	r3, [r7, #12]
 805617e:	2b00      	cmp	r3, #0
 8056180:	d060      	beq.n	8056244 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8056182:	2008      	movs	r0, #8
 8056184:	f002 fe90 	bl	8058ea8 <pvPortMalloc>
 8056188:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 805618a:	697b      	ldr	r3, [r7, #20]
 805618c:	2b00      	cmp	r3, #0
 805618e:	d059      	beq.n	8056244 <osTimerNew+0xe8>
      callb->func = func;
 8056190:	697b      	ldr	r3, [r7, #20]
 8056192:	68fa      	ldr	r2, [r7, #12]
 8056194:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8056196:	697b      	ldr	r3, [r7, #20]
 8056198:	687a      	ldr	r2, [r7, #4]
 805619a:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 805619c:	7afb      	ldrb	r3, [r7, #11]
 805619e:	2b00      	cmp	r3, #0
 80561a0:	d102      	bne.n	80561a8 <osTimerNew+0x4c>
        reload = pdFALSE;
 80561a2:	2300      	movs	r3, #0
 80561a4:	61fb      	str	r3, [r7, #28]
 80561a6:	e001      	b.n	80561ac <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 80561a8:	2301      	movs	r3, #1
 80561aa:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 80561ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80561b0:	61bb      	str	r3, [r7, #24]
      name = NULL;
 80561b2:	2300      	movs	r3, #0
 80561b4:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 80561b6:	683b      	ldr	r3, [r7, #0]
 80561b8:	2b00      	cmp	r3, #0
 80561ba:	d01c      	beq.n	80561f6 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 80561bc:	683b      	ldr	r3, [r7, #0]
 80561be:	681b      	ldr	r3, [r3, #0]
 80561c0:	2b00      	cmp	r3, #0
 80561c2:	d002      	beq.n	80561ca <osTimerNew+0x6e>
          name = attr->name;
 80561c4:	683b      	ldr	r3, [r7, #0]
 80561c6:	681b      	ldr	r3, [r3, #0]
 80561c8:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 80561ca:	683b      	ldr	r3, [r7, #0]
 80561cc:	689b      	ldr	r3, [r3, #8]
 80561ce:	2b00      	cmp	r3, #0
 80561d0:	d006      	beq.n	80561e0 <osTimerNew+0x84>
 80561d2:	683b      	ldr	r3, [r7, #0]
 80561d4:	68db      	ldr	r3, [r3, #12]
 80561d6:	2b2b      	cmp	r3, #43	; 0x2b
 80561d8:	d902      	bls.n	80561e0 <osTimerNew+0x84>
          mem = 1;
 80561da:	2301      	movs	r3, #1
 80561dc:	61bb      	str	r3, [r7, #24]
 80561de:	e00c      	b.n	80561fa <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80561e0:	683b      	ldr	r3, [r7, #0]
 80561e2:	689b      	ldr	r3, [r3, #8]
 80561e4:	2b00      	cmp	r3, #0
 80561e6:	d108      	bne.n	80561fa <osTimerNew+0x9e>
 80561e8:	683b      	ldr	r3, [r7, #0]
 80561ea:	68db      	ldr	r3, [r3, #12]
 80561ec:	2b00      	cmp	r3, #0
 80561ee:	d104      	bne.n	80561fa <osTimerNew+0x9e>
            mem = 0;
 80561f0:	2300      	movs	r3, #0
 80561f2:	61bb      	str	r3, [r7, #24]
 80561f4:	e001      	b.n	80561fa <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 80561f6:	2300      	movs	r3, #0
 80561f8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80561fa:	69bb      	ldr	r3, [r7, #24]
 80561fc:	2b01      	cmp	r3, #1
 80561fe:	d10c      	bne.n	805621a <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8056200:	683b      	ldr	r3, [r7, #0]
 8056202:	689b      	ldr	r3, [r3, #8]
 8056204:	9301      	str	r3, [sp, #4]
 8056206:	4b12      	ldr	r3, [pc, #72]	; (8056250 <osTimerNew+0xf4>)
 8056208:	9300      	str	r3, [sp, #0]
 805620a:	697b      	ldr	r3, [r7, #20]
 805620c:	69fa      	ldr	r2, [r7, #28]
 805620e:	2101      	movs	r1, #1
 8056210:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8056212:	f002 f832 	bl	805827a <xTimerCreateStatic>
 8056216:	6238      	str	r0, [r7, #32]
 8056218:	e00b      	b.n	8056232 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 805621a:	69bb      	ldr	r3, [r7, #24]
 805621c:	2b00      	cmp	r3, #0
 805621e:	d108      	bne.n	8056232 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8056220:	4b0b      	ldr	r3, [pc, #44]	; (8056250 <osTimerNew+0xf4>)
 8056222:	9300      	str	r3, [sp, #0]
 8056224:	697b      	ldr	r3, [r7, #20]
 8056226:	69fa      	ldr	r2, [r7, #28]
 8056228:	2101      	movs	r1, #1
 805622a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 805622c:	f002 f804 	bl	8058238 <xTimerCreate>
 8056230:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8056232:	6a3b      	ldr	r3, [r7, #32]
 8056234:	2b00      	cmp	r3, #0
 8056236:	d105      	bne.n	8056244 <osTimerNew+0xe8>
 8056238:	697b      	ldr	r3, [r7, #20]
 805623a:	2b00      	cmp	r3, #0
 805623c:	d002      	beq.n	8056244 <osTimerNew+0xe8>
        vPortFree (callb);
 805623e:	6978      	ldr	r0, [r7, #20]
 8056240:	f002 fefe 	bl	8059040 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8056244:	6a3b      	ldr	r3, [r7, #32]
}
 8056246:	4618      	mov	r0, r3
 8056248:	3728      	adds	r7, #40	; 0x28
 805624a:	46bd      	mov	sp, r7
 805624c:	bd80      	pop	{r7, pc}
 805624e:	bf00      	nop
 8056250:	08056131 	.word	0x08056131

08056254 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8056254:	b580      	push	{r7, lr}
 8056256:	b088      	sub	sp, #32
 8056258:	af02      	add	r7, sp, #8
 805625a:	6078      	str	r0, [r7, #4]
 805625c:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 805625e:	687b      	ldr	r3, [r7, #4]
 8056260:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8056262:	f3ef 8305 	mrs	r3, IPSR
 8056266:	60fb      	str	r3, [r7, #12]
  return(result);
 8056268:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 805626a:	2b00      	cmp	r3, #0
 805626c:	d003      	beq.n	8056276 <osTimerStart+0x22>
    stat = osErrorISR;
 805626e:	f06f 0305 	mvn.w	r3, #5
 8056272:	617b      	str	r3, [r7, #20]
 8056274:	e017      	b.n	80562a6 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8056276:	693b      	ldr	r3, [r7, #16]
 8056278:	2b00      	cmp	r3, #0
 805627a:	d103      	bne.n	8056284 <osTimerStart+0x30>
    stat = osErrorParameter;
 805627c:	f06f 0303 	mvn.w	r3, #3
 8056280:	617b      	str	r3, [r7, #20]
 8056282:	e010      	b.n	80562a6 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8056284:	2300      	movs	r3, #0
 8056286:	9300      	str	r3, [sp, #0]
 8056288:	2300      	movs	r3, #0
 805628a:	683a      	ldr	r2, [r7, #0]
 805628c:	2104      	movs	r1, #4
 805628e:	6938      	ldr	r0, [r7, #16]
 8056290:	f002 f86c 	bl	805836c <xTimerGenericCommand>
 8056294:	4603      	mov	r3, r0
 8056296:	2b01      	cmp	r3, #1
 8056298:	d102      	bne.n	80562a0 <osTimerStart+0x4c>
      stat = osOK;
 805629a:	2300      	movs	r3, #0
 805629c:	617b      	str	r3, [r7, #20]
 805629e:	e002      	b.n	80562a6 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 80562a0:	f06f 0302 	mvn.w	r3, #2
 80562a4:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80562a6:	697b      	ldr	r3, [r7, #20]
}
 80562a8:	4618      	mov	r0, r3
 80562aa:	3718      	adds	r7, #24
 80562ac:	46bd      	mov	sp, r7
 80562ae:	bd80      	pop	{r7, pc}

080562b0 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 80562b0:	b580      	push	{r7, lr}
 80562b2:	b088      	sub	sp, #32
 80562b4:	af02      	add	r7, sp, #8
 80562b6:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 80562b8:	687b      	ldr	r3, [r7, #4]
 80562ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80562bc:	f3ef 8305 	mrs	r3, IPSR
 80562c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80562c2:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80562c4:	2b00      	cmp	r3, #0
 80562c6:	d003      	beq.n	80562d0 <osTimerStop+0x20>
    stat = osErrorISR;
 80562c8:	f06f 0305 	mvn.w	r3, #5
 80562cc:	617b      	str	r3, [r7, #20]
 80562ce:	e021      	b.n	8056314 <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 80562d0:	693b      	ldr	r3, [r7, #16]
 80562d2:	2b00      	cmp	r3, #0
 80562d4:	d103      	bne.n	80562de <osTimerStop+0x2e>
    stat = osErrorParameter;
 80562d6:	f06f 0303 	mvn.w	r3, #3
 80562da:	617b      	str	r3, [r7, #20]
 80562dc:	e01a      	b.n	8056314 <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 80562de:	6938      	ldr	r0, [r7, #16]
 80562e0:	f002 fb4a 	bl	8058978 <xTimerIsTimerActive>
 80562e4:	4603      	mov	r3, r0
 80562e6:	2b00      	cmp	r3, #0
 80562e8:	d103      	bne.n	80562f2 <osTimerStop+0x42>
      stat = osErrorResource;
 80562ea:	f06f 0302 	mvn.w	r3, #2
 80562ee:	617b      	str	r3, [r7, #20]
 80562f0:	e010      	b.n	8056314 <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 80562f2:	2300      	movs	r3, #0
 80562f4:	9300      	str	r3, [sp, #0]
 80562f6:	2300      	movs	r3, #0
 80562f8:	2200      	movs	r2, #0
 80562fa:	2103      	movs	r1, #3
 80562fc:	6938      	ldr	r0, [r7, #16]
 80562fe:	f002 f835 	bl	805836c <xTimerGenericCommand>
 8056302:	4603      	mov	r3, r0
 8056304:	2b01      	cmp	r3, #1
 8056306:	d102      	bne.n	805630e <osTimerStop+0x5e>
        stat = osOK;
 8056308:	2300      	movs	r3, #0
 805630a:	617b      	str	r3, [r7, #20]
 805630c:	e002      	b.n	8056314 <osTimerStop+0x64>
      } else {
        stat = osError;
 805630e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8056312:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8056314:	697b      	ldr	r3, [r7, #20]
}
 8056316:	4618      	mov	r0, r3
 8056318:	3718      	adds	r7, #24
 805631a:	46bd      	mov	sp, r7
 805631c:	bd80      	pop	{r7, pc}

0805631e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 805631e:	b580      	push	{r7, lr}
 8056320:	b08a      	sub	sp, #40	; 0x28
 8056322:	af02      	add	r7, sp, #8
 8056324:	60f8      	str	r0, [r7, #12]
 8056326:	60b9      	str	r1, [r7, #8]
 8056328:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 805632a:	2300      	movs	r3, #0
 805632c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 805632e:	f3ef 8305 	mrs	r3, IPSR
 8056332:	613b      	str	r3, [r7, #16]
  return(result);
 8056334:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8056336:	2b00      	cmp	r3, #0
 8056338:	d15f      	bne.n	80563fa <osMessageQueueNew+0xdc>
 805633a:	68fb      	ldr	r3, [r7, #12]
 805633c:	2b00      	cmp	r3, #0
 805633e:	d05c      	beq.n	80563fa <osMessageQueueNew+0xdc>
 8056340:	68bb      	ldr	r3, [r7, #8]
 8056342:	2b00      	cmp	r3, #0
 8056344:	d059      	beq.n	80563fa <osMessageQueueNew+0xdc>
    mem = -1;
 8056346:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 805634a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 805634c:	687b      	ldr	r3, [r7, #4]
 805634e:	2b00      	cmp	r3, #0
 8056350:	d029      	beq.n	80563a6 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8056352:	687b      	ldr	r3, [r7, #4]
 8056354:	689b      	ldr	r3, [r3, #8]
 8056356:	2b00      	cmp	r3, #0
 8056358:	d012      	beq.n	8056380 <osMessageQueueNew+0x62>
 805635a:	687b      	ldr	r3, [r7, #4]
 805635c:	68db      	ldr	r3, [r3, #12]
 805635e:	2b4f      	cmp	r3, #79	; 0x4f
 8056360:	d90e      	bls.n	8056380 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8056362:	687b      	ldr	r3, [r7, #4]
 8056364:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8056366:	2b00      	cmp	r3, #0
 8056368:	d00a      	beq.n	8056380 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 805636a:	687b      	ldr	r3, [r7, #4]
 805636c:	695a      	ldr	r2, [r3, #20]
 805636e:	68fb      	ldr	r3, [r7, #12]
 8056370:	68b9      	ldr	r1, [r7, #8]
 8056372:	fb01 f303 	mul.w	r3, r1, r3
 8056376:	429a      	cmp	r2, r3
 8056378:	d302      	bcc.n	8056380 <osMessageQueueNew+0x62>
        mem = 1;
 805637a:	2301      	movs	r3, #1
 805637c:	61bb      	str	r3, [r7, #24]
 805637e:	e014      	b.n	80563aa <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8056380:	687b      	ldr	r3, [r7, #4]
 8056382:	689b      	ldr	r3, [r3, #8]
 8056384:	2b00      	cmp	r3, #0
 8056386:	d110      	bne.n	80563aa <osMessageQueueNew+0x8c>
 8056388:	687b      	ldr	r3, [r7, #4]
 805638a:	68db      	ldr	r3, [r3, #12]
 805638c:	2b00      	cmp	r3, #0
 805638e:	d10c      	bne.n	80563aa <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8056390:	687b      	ldr	r3, [r7, #4]
 8056392:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8056394:	2b00      	cmp	r3, #0
 8056396:	d108      	bne.n	80563aa <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8056398:	687b      	ldr	r3, [r7, #4]
 805639a:	695b      	ldr	r3, [r3, #20]
 805639c:	2b00      	cmp	r3, #0
 805639e:	d104      	bne.n	80563aa <osMessageQueueNew+0x8c>
          mem = 0;
 80563a0:	2300      	movs	r3, #0
 80563a2:	61bb      	str	r3, [r7, #24]
 80563a4:	e001      	b.n	80563aa <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80563a6:	2300      	movs	r3, #0
 80563a8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80563aa:	69bb      	ldr	r3, [r7, #24]
 80563ac:	2b01      	cmp	r3, #1
 80563ae:	d10b      	bne.n	80563c8 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80563b0:	687b      	ldr	r3, [r7, #4]
 80563b2:	691a      	ldr	r2, [r3, #16]
 80563b4:	687b      	ldr	r3, [r7, #4]
 80563b6:	689b      	ldr	r3, [r3, #8]
 80563b8:	2100      	movs	r1, #0
 80563ba:	9100      	str	r1, [sp, #0]
 80563bc:	68b9      	ldr	r1, [r7, #8]
 80563be:	68f8      	ldr	r0, [r7, #12]
 80563c0:	f000 fa2e 	bl	8056820 <xQueueGenericCreateStatic>
 80563c4:	61f8      	str	r0, [r7, #28]
 80563c6:	e008      	b.n	80563da <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80563c8:	69bb      	ldr	r3, [r7, #24]
 80563ca:	2b00      	cmp	r3, #0
 80563cc:	d105      	bne.n	80563da <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80563ce:	2200      	movs	r2, #0
 80563d0:	68b9      	ldr	r1, [r7, #8]
 80563d2:	68f8      	ldr	r0, [r7, #12]
 80563d4:	f000 fa9c 	bl	8056910 <xQueueGenericCreate>
 80563d8:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80563da:	69fb      	ldr	r3, [r7, #28]
 80563dc:	2b00      	cmp	r3, #0
 80563de:	d00c      	beq.n	80563fa <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80563e0:	687b      	ldr	r3, [r7, #4]
 80563e2:	2b00      	cmp	r3, #0
 80563e4:	d003      	beq.n	80563ee <osMessageQueueNew+0xd0>
        name = attr->name;
 80563e6:	687b      	ldr	r3, [r7, #4]
 80563e8:	681b      	ldr	r3, [r3, #0]
 80563ea:	617b      	str	r3, [r7, #20]
 80563ec:	e001      	b.n	80563f2 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80563ee:	2300      	movs	r3, #0
 80563f0:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80563f2:	6979      	ldr	r1, [r7, #20]
 80563f4:	69f8      	ldr	r0, [r7, #28]
 80563f6:	f000 fef3 	bl	80571e0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80563fa:	69fb      	ldr	r3, [r7, #28]
}
 80563fc:	4618      	mov	r0, r3
 80563fe:	3720      	adds	r7, #32
 8056400:	46bd      	mov	sp, r7
 8056402:	bd80      	pop	{r7, pc}

08056404 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8056404:	b580      	push	{r7, lr}
 8056406:	b088      	sub	sp, #32
 8056408:	af00      	add	r7, sp, #0
 805640a:	60f8      	str	r0, [r7, #12]
 805640c:	60b9      	str	r1, [r7, #8]
 805640e:	603b      	str	r3, [r7, #0]
 8056410:	4613      	mov	r3, r2
 8056412:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8056414:	68fb      	ldr	r3, [r7, #12]
 8056416:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8056418:	2300      	movs	r3, #0
 805641a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 805641c:	f3ef 8305 	mrs	r3, IPSR
 8056420:	617b      	str	r3, [r7, #20]
  return(result);
 8056422:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8056424:	2b00      	cmp	r3, #0
 8056426:	d028      	beq.n	805647a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8056428:	69bb      	ldr	r3, [r7, #24]
 805642a:	2b00      	cmp	r3, #0
 805642c:	d005      	beq.n	805643a <osMessageQueuePut+0x36>
 805642e:	68bb      	ldr	r3, [r7, #8]
 8056430:	2b00      	cmp	r3, #0
 8056432:	d002      	beq.n	805643a <osMessageQueuePut+0x36>
 8056434:	683b      	ldr	r3, [r7, #0]
 8056436:	2b00      	cmp	r3, #0
 8056438:	d003      	beq.n	8056442 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 805643a:	f06f 0303 	mvn.w	r3, #3
 805643e:	61fb      	str	r3, [r7, #28]
 8056440:	e038      	b.n	80564b4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8056442:	2300      	movs	r3, #0
 8056444:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8056446:	f107 0210 	add.w	r2, r7, #16
 805644a:	2300      	movs	r3, #0
 805644c:	68b9      	ldr	r1, [r7, #8]
 805644e:	69b8      	ldr	r0, [r7, #24]
 8056450:	f000 fbba 	bl	8056bc8 <xQueueGenericSendFromISR>
 8056454:	4603      	mov	r3, r0
 8056456:	2b01      	cmp	r3, #1
 8056458:	d003      	beq.n	8056462 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 805645a:	f06f 0302 	mvn.w	r3, #2
 805645e:	61fb      	str	r3, [r7, #28]
 8056460:	e028      	b.n	80564b4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8056462:	693b      	ldr	r3, [r7, #16]
 8056464:	2b00      	cmp	r3, #0
 8056466:	d025      	beq.n	80564b4 <osMessageQueuePut+0xb0>
 8056468:	4b15      	ldr	r3, [pc, #84]	; (80564c0 <osMessageQueuePut+0xbc>)
 805646a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 805646e:	601a      	str	r2, [r3, #0]
 8056470:	f3bf 8f4f 	dsb	sy
 8056474:	f3bf 8f6f 	isb	sy
 8056478:	e01c      	b.n	80564b4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 805647a:	69bb      	ldr	r3, [r7, #24]
 805647c:	2b00      	cmp	r3, #0
 805647e:	d002      	beq.n	8056486 <osMessageQueuePut+0x82>
 8056480:	68bb      	ldr	r3, [r7, #8]
 8056482:	2b00      	cmp	r3, #0
 8056484:	d103      	bne.n	805648e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8056486:	f06f 0303 	mvn.w	r3, #3
 805648a:	61fb      	str	r3, [r7, #28]
 805648c:	e012      	b.n	80564b4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 805648e:	2300      	movs	r3, #0
 8056490:	683a      	ldr	r2, [r7, #0]
 8056492:	68b9      	ldr	r1, [r7, #8]
 8056494:	69b8      	ldr	r0, [r7, #24]
 8056496:	f000 fa99 	bl	80569cc <xQueueGenericSend>
 805649a:	4603      	mov	r3, r0
 805649c:	2b01      	cmp	r3, #1
 805649e:	d009      	beq.n	80564b4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80564a0:	683b      	ldr	r3, [r7, #0]
 80564a2:	2b00      	cmp	r3, #0
 80564a4:	d003      	beq.n	80564ae <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80564a6:	f06f 0301 	mvn.w	r3, #1
 80564aa:	61fb      	str	r3, [r7, #28]
 80564ac:	e002      	b.n	80564b4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80564ae:	f06f 0302 	mvn.w	r3, #2
 80564b2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80564b4:	69fb      	ldr	r3, [r7, #28]
}
 80564b6:	4618      	mov	r0, r3
 80564b8:	3720      	adds	r7, #32
 80564ba:	46bd      	mov	sp, r7
 80564bc:	bd80      	pop	{r7, pc}
 80564be:	bf00      	nop
 80564c0:	e000ed04 	.word	0xe000ed04

080564c4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80564c4:	b580      	push	{r7, lr}
 80564c6:	b088      	sub	sp, #32
 80564c8:	af00      	add	r7, sp, #0
 80564ca:	60f8      	str	r0, [r7, #12]
 80564cc:	60b9      	str	r1, [r7, #8]
 80564ce:	607a      	str	r2, [r7, #4]
 80564d0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80564d2:	68fb      	ldr	r3, [r7, #12]
 80564d4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80564d6:	2300      	movs	r3, #0
 80564d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80564da:	f3ef 8305 	mrs	r3, IPSR
 80564de:	617b      	str	r3, [r7, #20]
  return(result);
 80564e0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80564e2:	2b00      	cmp	r3, #0
 80564e4:	d028      	beq.n	8056538 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80564e6:	69bb      	ldr	r3, [r7, #24]
 80564e8:	2b00      	cmp	r3, #0
 80564ea:	d005      	beq.n	80564f8 <osMessageQueueGet+0x34>
 80564ec:	68bb      	ldr	r3, [r7, #8]
 80564ee:	2b00      	cmp	r3, #0
 80564f0:	d002      	beq.n	80564f8 <osMessageQueueGet+0x34>
 80564f2:	683b      	ldr	r3, [r7, #0]
 80564f4:	2b00      	cmp	r3, #0
 80564f6:	d003      	beq.n	8056500 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80564f8:	f06f 0303 	mvn.w	r3, #3
 80564fc:	61fb      	str	r3, [r7, #28]
 80564fe:	e037      	b.n	8056570 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8056500:	2300      	movs	r3, #0
 8056502:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8056504:	f107 0310 	add.w	r3, r7, #16
 8056508:	461a      	mov	r2, r3
 805650a:	68b9      	ldr	r1, [r7, #8]
 805650c:	69b8      	ldr	r0, [r7, #24]
 805650e:	f000 fcd7 	bl	8056ec0 <xQueueReceiveFromISR>
 8056512:	4603      	mov	r3, r0
 8056514:	2b01      	cmp	r3, #1
 8056516:	d003      	beq.n	8056520 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8056518:	f06f 0302 	mvn.w	r3, #2
 805651c:	61fb      	str	r3, [r7, #28]
 805651e:	e027      	b.n	8056570 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8056520:	693b      	ldr	r3, [r7, #16]
 8056522:	2b00      	cmp	r3, #0
 8056524:	d024      	beq.n	8056570 <osMessageQueueGet+0xac>
 8056526:	4b15      	ldr	r3, [pc, #84]	; (805657c <osMessageQueueGet+0xb8>)
 8056528:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 805652c:	601a      	str	r2, [r3, #0]
 805652e:	f3bf 8f4f 	dsb	sy
 8056532:	f3bf 8f6f 	isb	sy
 8056536:	e01b      	b.n	8056570 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8056538:	69bb      	ldr	r3, [r7, #24]
 805653a:	2b00      	cmp	r3, #0
 805653c:	d002      	beq.n	8056544 <osMessageQueueGet+0x80>
 805653e:	68bb      	ldr	r3, [r7, #8]
 8056540:	2b00      	cmp	r3, #0
 8056542:	d103      	bne.n	805654c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8056544:	f06f 0303 	mvn.w	r3, #3
 8056548:	61fb      	str	r3, [r7, #28]
 805654a:	e011      	b.n	8056570 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 805654c:	683a      	ldr	r2, [r7, #0]
 805654e:	68b9      	ldr	r1, [r7, #8]
 8056550:	69b8      	ldr	r0, [r7, #24]
 8056552:	f000 fbd5 	bl	8056d00 <xQueueReceive>
 8056556:	4603      	mov	r3, r0
 8056558:	2b01      	cmp	r3, #1
 805655a:	d009      	beq.n	8056570 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 805655c:	683b      	ldr	r3, [r7, #0]
 805655e:	2b00      	cmp	r3, #0
 8056560:	d003      	beq.n	805656a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8056562:	f06f 0301 	mvn.w	r3, #1
 8056566:	61fb      	str	r3, [r7, #28]
 8056568:	e002      	b.n	8056570 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 805656a:	f06f 0302 	mvn.w	r3, #2
 805656e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8056570:	69fb      	ldr	r3, [r7, #28]
}
 8056572:	4618      	mov	r0, r3
 8056574:	3720      	adds	r7, #32
 8056576:	46bd      	mov	sp, r7
 8056578:	bd80      	pop	{r7, pc}
 805657a:	bf00      	nop
 805657c:	e000ed04 	.word	0xe000ed04

08056580 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8056580:	b480      	push	{r7}
 8056582:	b085      	sub	sp, #20
 8056584:	af00      	add	r7, sp, #0
 8056586:	60f8      	str	r0, [r7, #12]
 8056588:	60b9      	str	r1, [r7, #8]
 805658a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 805658c:	68fb      	ldr	r3, [r7, #12]
 805658e:	4a07      	ldr	r2, [pc, #28]	; (80565ac <vApplicationGetIdleTaskMemory+0x2c>)
 8056590:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8056592:	68bb      	ldr	r3, [r7, #8]
 8056594:	4a06      	ldr	r2, [pc, #24]	; (80565b0 <vApplicationGetIdleTaskMemory+0x30>)
 8056596:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8056598:	687b      	ldr	r3, [r7, #4]
 805659a:	2280      	movs	r2, #128	; 0x80
 805659c:	601a      	str	r2, [r3, #0]
}
 805659e:	bf00      	nop
 80565a0:	3714      	adds	r7, #20
 80565a2:	46bd      	mov	sp, r7
 80565a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80565a8:	4770      	bx	lr
 80565aa:	bf00      	nop
 80565ac:	20009060 	.word	0x20009060
 80565b0:	200090bc 	.word	0x200090bc

080565b4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80565b4:	b480      	push	{r7}
 80565b6:	b085      	sub	sp, #20
 80565b8:	af00      	add	r7, sp, #0
 80565ba:	60f8      	str	r0, [r7, #12]
 80565bc:	60b9      	str	r1, [r7, #8]
 80565be:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80565c0:	68fb      	ldr	r3, [r7, #12]
 80565c2:	4a07      	ldr	r2, [pc, #28]	; (80565e0 <vApplicationGetTimerTaskMemory+0x2c>)
 80565c4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80565c6:	68bb      	ldr	r3, [r7, #8]
 80565c8:	4a06      	ldr	r2, [pc, #24]	; (80565e4 <vApplicationGetTimerTaskMemory+0x30>)
 80565ca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80565cc:	687b      	ldr	r3, [r7, #4]
 80565ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80565d2:	601a      	str	r2, [r3, #0]
}
 80565d4:	bf00      	nop
 80565d6:	3714      	adds	r7, #20
 80565d8:	46bd      	mov	sp, r7
 80565da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80565de:	4770      	bx	lr
 80565e0:	200092bc 	.word	0x200092bc
 80565e4:	20009318 	.word	0x20009318

080565e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80565e8:	b480      	push	{r7}
 80565ea:	b083      	sub	sp, #12
 80565ec:	af00      	add	r7, sp, #0
 80565ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80565f0:	687b      	ldr	r3, [r7, #4]
 80565f2:	f103 0208 	add.w	r2, r3, #8
 80565f6:	687b      	ldr	r3, [r7, #4]
 80565f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80565fa:	687b      	ldr	r3, [r7, #4]
 80565fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8056600:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8056602:	687b      	ldr	r3, [r7, #4]
 8056604:	f103 0208 	add.w	r2, r3, #8
 8056608:	687b      	ldr	r3, [r7, #4]
 805660a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 805660c:	687b      	ldr	r3, [r7, #4]
 805660e:	f103 0208 	add.w	r2, r3, #8
 8056612:	687b      	ldr	r3, [r7, #4]
 8056614:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8056616:	687b      	ldr	r3, [r7, #4]
 8056618:	2200      	movs	r2, #0
 805661a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 805661c:	bf00      	nop
 805661e:	370c      	adds	r7, #12
 8056620:	46bd      	mov	sp, r7
 8056622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8056626:	4770      	bx	lr

08056628 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8056628:	b480      	push	{r7}
 805662a:	b083      	sub	sp, #12
 805662c:	af00      	add	r7, sp, #0
 805662e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8056630:	687b      	ldr	r3, [r7, #4]
 8056632:	2200      	movs	r2, #0
 8056634:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8056636:	bf00      	nop
 8056638:	370c      	adds	r7, #12
 805663a:	46bd      	mov	sp, r7
 805663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8056640:	4770      	bx	lr

08056642 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8056642:	b480      	push	{r7}
 8056644:	b085      	sub	sp, #20
 8056646:	af00      	add	r7, sp, #0
 8056648:	6078      	str	r0, [r7, #4]
 805664a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 805664c:	687b      	ldr	r3, [r7, #4]
 805664e:	685b      	ldr	r3, [r3, #4]
 8056650:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8056652:	683b      	ldr	r3, [r7, #0]
 8056654:	68fa      	ldr	r2, [r7, #12]
 8056656:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8056658:	68fb      	ldr	r3, [r7, #12]
 805665a:	689a      	ldr	r2, [r3, #8]
 805665c:	683b      	ldr	r3, [r7, #0]
 805665e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8056660:	68fb      	ldr	r3, [r7, #12]
 8056662:	689b      	ldr	r3, [r3, #8]
 8056664:	683a      	ldr	r2, [r7, #0]
 8056666:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8056668:	68fb      	ldr	r3, [r7, #12]
 805666a:	683a      	ldr	r2, [r7, #0]
 805666c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 805666e:	683b      	ldr	r3, [r7, #0]
 8056670:	687a      	ldr	r2, [r7, #4]
 8056672:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8056674:	687b      	ldr	r3, [r7, #4]
 8056676:	681b      	ldr	r3, [r3, #0]
 8056678:	1c5a      	adds	r2, r3, #1
 805667a:	687b      	ldr	r3, [r7, #4]
 805667c:	601a      	str	r2, [r3, #0]
}
 805667e:	bf00      	nop
 8056680:	3714      	adds	r7, #20
 8056682:	46bd      	mov	sp, r7
 8056684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8056688:	4770      	bx	lr

0805668a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 805668a:	b480      	push	{r7}
 805668c:	b085      	sub	sp, #20
 805668e:	af00      	add	r7, sp, #0
 8056690:	6078      	str	r0, [r7, #4]
 8056692:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8056694:	683b      	ldr	r3, [r7, #0]
 8056696:	681b      	ldr	r3, [r3, #0]
 8056698:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 805669a:	68bb      	ldr	r3, [r7, #8]
 805669c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80566a0:	d103      	bne.n	80566aa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80566a2:	687b      	ldr	r3, [r7, #4]
 80566a4:	691b      	ldr	r3, [r3, #16]
 80566a6:	60fb      	str	r3, [r7, #12]
 80566a8:	e00c      	b.n	80566c4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80566aa:	687b      	ldr	r3, [r7, #4]
 80566ac:	3308      	adds	r3, #8
 80566ae:	60fb      	str	r3, [r7, #12]
 80566b0:	e002      	b.n	80566b8 <vListInsert+0x2e>
 80566b2:	68fb      	ldr	r3, [r7, #12]
 80566b4:	685b      	ldr	r3, [r3, #4]
 80566b6:	60fb      	str	r3, [r7, #12]
 80566b8:	68fb      	ldr	r3, [r7, #12]
 80566ba:	685b      	ldr	r3, [r3, #4]
 80566bc:	681b      	ldr	r3, [r3, #0]
 80566be:	68ba      	ldr	r2, [r7, #8]
 80566c0:	429a      	cmp	r2, r3
 80566c2:	d2f6      	bcs.n	80566b2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80566c4:	68fb      	ldr	r3, [r7, #12]
 80566c6:	685a      	ldr	r2, [r3, #4]
 80566c8:	683b      	ldr	r3, [r7, #0]
 80566ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80566cc:	683b      	ldr	r3, [r7, #0]
 80566ce:	685b      	ldr	r3, [r3, #4]
 80566d0:	683a      	ldr	r2, [r7, #0]
 80566d2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80566d4:	683b      	ldr	r3, [r7, #0]
 80566d6:	68fa      	ldr	r2, [r7, #12]
 80566d8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80566da:	68fb      	ldr	r3, [r7, #12]
 80566dc:	683a      	ldr	r2, [r7, #0]
 80566de:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80566e0:	683b      	ldr	r3, [r7, #0]
 80566e2:	687a      	ldr	r2, [r7, #4]
 80566e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80566e6:	687b      	ldr	r3, [r7, #4]
 80566e8:	681b      	ldr	r3, [r3, #0]
 80566ea:	1c5a      	adds	r2, r3, #1
 80566ec:	687b      	ldr	r3, [r7, #4]
 80566ee:	601a      	str	r2, [r3, #0]
}
 80566f0:	bf00      	nop
 80566f2:	3714      	adds	r7, #20
 80566f4:	46bd      	mov	sp, r7
 80566f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80566fa:	4770      	bx	lr

080566fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80566fc:	b480      	push	{r7}
 80566fe:	b085      	sub	sp, #20
 8056700:	af00      	add	r7, sp, #0
 8056702:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8056704:	687b      	ldr	r3, [r7, #4]
 8056706:	691b      	ldr	r3, [r3, #16]
 8056708:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 805670a:	687b      	ldr	r3, [r7, #4]
 805670c:	685b      	ldr	r3, [r3, #4]
 805670e:	687a      	ldr	r2, [r7, #4]
 8056710:	6892      	ldr	r2, [r2, #8]
 8056712:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8056714:	687b      	ldr	r3, [r7, #4]
 8056716:	689b      	ldr	r3, [r3, #8]
 8056718:	687a      	ldr	r2, [r7, #4]
 805671a:	6852      	ldr	r2, [r2, #4]
 805671c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 805671e:	68fb      	ldr	r3, [r7, #12]
 8056720:	685b      	ldr	r3, [r3, #4]
 8056722:	687a      	ldr	r2, [r7, #4]
 8056724:	429a      	cmp	r2, r3
 8056726:	d103      	bne.n	8056730 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8056728:	687b      	ldr	r3, [r7, #4]
 805672a:	689a      	ldr	r2, [r3, #8]
 805672c:	68fb      	ldr	r3, [r7, #12]
 805672e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8056730:	687b      	ldr	r3, [r7, #4]
 8056732:	2200      	movs	r2, #0
 8056734:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8056736:	68fb      	ldr	r3, [r7, #12]
 8056738:	681b      	ldr	r3, [r3, #0]
 805673a:	1e5a      	subs	r2, r3, #1
 805673c:	68fb      	ldr	r3, [r7, #12]
 805673e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8056740:	68fb      	ldr	r3, [r7, #12]
 8056742:	681b      	ldr	r3, [r3, #0]
}
 8056744:	4618      	mov	r0, r3
 8056746:	3714      	adds	r7, #20
 8056748:	46bd      	mov	sp, r7
 805674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 805674e:	4770      	bx	lr

08056750 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8056750:	b580      	push	{r7, lr}
 8056752:	b084      	sub	sp, #16
 8056754:	af00      	add	r7, sp, #0
 8056756:	6078      	str	r0, [r7, #4]
 8056758:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 805675a:	687b      	ldr	r3, [r7, #4]
 805675c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 805675e:	68fb      	ldr	r3, [r7, #12]
 8056760:	2b00      	cmp	r3, #0
 8056762:	d10a      	bne.n	805677a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8056764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8056768:	f383 8811 	msr	BASEPRI, r3
 805676c:	f3bf 8f6f 	isb	sy
 8056770:	f3bf 8f4f 	dsb	sy
 8056774:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8056776:	bf00      	nop
 8056778:	e7fe      	b.n	8056778 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 805677a:	f002 fa73 	bl	8058c64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 805677e:	68fb      	ldr	r3, [r7, #12]
 8056780:	681a      	ldr	r2, [r3, #0]
 8056782:	68fb      	ldr	r3, [r7, #12]
 8056784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8056786:	68f9      	ldr	r1, [r7, #12]
 8056788:	6c09      	ldr	r1, [r1, #64]	; 0x40
 805678a:	fb01 f303 	mul.w	r3, r1, r3
 805678e:	441a      	add	r2, r3
 8056790:	68fb      	ldr	r3, [r7, #12]
 8056792:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8056794:	68fb      	ldr	r3, [r7, #12]
 8056796:	2200      	movs	r2, #0
 8056798:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 805679a:	68fb      	ldr	r3, [r7, #12]
 805679c:	681a      	ldr	r2, [r3, #0]
 805679e:	68fb      	ldr	r3, [r7, #12]
 80567a0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80567a2:	68fb      	ldr	r3, [r7, #12]
 80567a4:	681a      	ldr	r2, [r3, #0]
 80567a6:	68fb      	ldr	r3, [r7, #12]
 80567a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80567aa:	3b01      	subs	r3, #1
 80567ac:	68f9      	ldr	r1, [r7, #12]
 80567ae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80567b0:	fb01 f303 	mul.w	r3, r1, r3
 80567b4:	441a      	add	r2, r3
 80567b6:	68fb      	ldr	r3, [r7, #12]
 80567b8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80567ba:	68fb      	ldr	r3, [r7, #12]
 80567bc:	22ff      	movs	r2, #255	; 0xff
 80567be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80567c2:	68fb      	ldr	r3, [r7, #12]
 80567c4:	22ff      	movs	r2, #255	; 0xff
 80567c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80567ca:	683b      	ldr	r3, [r7, #0]
 80567cc:	2b00      	cmp	r3, #0
 80567ce:	d114      	bne.n	80567fa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80567d0:	68fb      	ldr	r3, [r7, #12]
 80567d2:	691b      	ldr	r3, [r3, #16]
 80567d4:	2b00      	cmp	r3, #0
 80567d6:	d01a      	beq.n	805680e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80567d8:	68fb      	ldr	r3, [r7, #12]
 80567da:	3310      	adds	r3, #16
 80567dc:	4618      	mov	r0, r3
 80567de:	f001 fa45 	bl	8057c6c <xTaskRemoveFromEventList>
 80567e2:	4603      	mov	r3, r0
 80567e4:	2b00      	cmp	r3, #0
 80567e6:	d012      	beq.n	805680e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80567e8:	4b0c      	ldr	r3, [pc, #48]	; (805681c <xQueueGenericReset+0xcc>)
 80567ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80567ee:	601a      	str	r2, [r3, #0]
 80567f0:	f3bf 8f4f 	dsb	sy
 80567f4:	f3bf 8f6f 	isb	sy
 80567f8:	e009      	b.n	805680e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80567fa:	68fb      	ldr	r3, [r7, #12]
 80567fc:	3310      	adds	r3, #16
 80567fe:	4618      	mov	r0, r3
 8056800:	f7ff fef2 	bl	80565e8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8056804:	68fb      	ldr	r3, [r7, #12]
 8056806:	3324      	adds	r3, #36	; 0x24
 8056808:	4618      	mov	r0, r3
 805680a:	f7ff feed 	bl	80565e8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 805680e:	f002 fa59 	bl	8058cc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8056812:	2301      	movs	r3, #1
}
 8056814:	4618      	mov	r0, r3
 8056816:	3710      	adds	r7, #16
 8056818:	46bd      	mov	sp, r7
 805681a:	bd80      	pop	{r7, pc}
 805681c:	e000ed04 	.word	0xe000ed04

08056820 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8056820:	b580      	push	{r7, lr}
 8056822:	b08e      	sub	sp, #56	; 0x38
 8056824:	af02      	add	r7, sp, #8
 8056826:	60f8      	str	r0, [r7, #12]
 8056828:	60b9      	str	r1, [r7, #8]
 805682a:	607a      	str	r2, [r7, #4]
 805682c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 805682e:	68fb      	ldr	r3, [r7, #12]
 8056830:	2b00      	cmp	r3, #0
 8056832:	d10a      	bne.n	805684a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8056834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8056838:	f383 8811 	msr	BASEPRI, r3
 805683c:	f3bf 8f6f 	isb	sy
 8056840:	f3bf 8f4f 	dsb	sy
 8056844:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8056846:	bf00      	nop
 8056848:	e7fe      	b.n	8056848 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 805684a:	683b      	ldr	r3, [r7, #0]
 805684c:	2b00      	cmp	r3, #0
 805684e:	d10a      	bne.n	8056866 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8056850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8056854:	f383 8811 	msr	BASEPRI, r3
 8056858:	f3bf 8f6f 	isb	sy
 805685c:	f3bf 8f4f 	dsb	sy
 8056860:	627b      	str	r3, [r7, #36]	; 0x24
}
 8056862:	bf00      	nop
 8056864:	e7fe      	b.n	8056864 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8056866:	687b      	ldr	r3, [r7, #4]
 8056868:	2b00      	cmp	r3, #0
 805686a:	d002      	beq.n	8056872 <xQueueGenericCreateStatic+0x52>
 805686c:	68bb      	ldr	r3, [r7, #8]
 805686e:	2b00      	cmp	r3, #0
 8056870:	d001      	beq.n	8056876 <xQueueGenericCreateStatic+0x56>
 8056872:	2301      	movs	r3, #1
 8056874:	e000      	b.n	8056878 <xQueueGenericCreateStatic+0x58>
 8056876:	2300      	movs	r3, #0
 8056878:	2b00      	cmp	r3, #0
 805687a:	d10a      	bne.n	8056892 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 805687c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8056880:	f383 8811 	msr	BASEPRI, r3
 8056884:	f3bf 8f6f 	isb	sy
 8056888:	f3bf 8f4f 	dsb	sy
 805688c:	623b      	str	r3, [r7, #32]
}
 805688e:	bf00      	nop
 8056890:	e7fe      	b.n	8056890 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8056892:	687b      	ldr	r3, [r7, #4]
 8056894:	2b00      	cmp	r3, #0
 8056896:	d102      	bne.n	805689e <xQueueGenericCreateStatic+0x7e>
 8056898:	68bb      	ldr	r3, [r7, #8]
 805689a:	2b00      	cmp	r3, #0
 805689c:	d101      	bne.n	80568a2 <xQueueGenericCreateStatic+0x82>
 805689e:	2301      	movs	r3, #1
 80568a0:	e000      	b.n	80568a4 <xQueueGenericCreateStatic+0x84>
 80568a2:	2300      	movs	r3, #0
 80568a4:	2b00      	cmp	r3, #0
 80568a6:	d10a      	bne.n	80568be <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80568a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80568ac:	f383 8811 	msr	BASEPRI, r3
 80568b0:	f3bf 8f6f 	isb	sy
 80568b4:	f3bf 8f4f 	dsb	sy
 80568b8:	61fb      	str	r3, [r7, #28]
}
 80568ba:	bf00      	nop
 80568bc:	e7fe      	b.n	80568bc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80568be:	2350      	movs	r3, #80	; 0x50
 80568c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80568c2:	697b      	ldr	r3, [r7, #20]
 80568c4:	2b50      	cmp	r3, #80	; 0x50
 80568c6:	d00a      	beq.n	80568de <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80568c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80568cc:	f383 8811 	msr	BASEPRI, r3
 80568d0:	f3bf 8f6f 	isb	sy
 80568d4:	f3bf 8f4f 	dsb	sy
 80568d8:	61bb      	str	r3, [r7, #24]
}
 80568da:	bf00      	nop
 80568dc:	e7fe      	b.n	80568dc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80568de:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80568e0:	683b      	ldr	r3, [r7, #0]
 80568e2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80568e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80568e6:	2b00      	cmp	r3, #0
 80568e8:	d00d      	beq.n	8056906 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80568ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80568ec:	2201      	movs	r2, #1
 80568ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80568f2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80568f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80568f8:	9300      	str	r3, [sp, #0]
 80568fa:	4613      	mov	r3, r2
 80568fc:	687a      	ldr	r2, [r7, #4]
 80568fe:	68b9      	ldr	r1, [r7, #8]
 8056900:	68f8      	ldr	r0, [r7, #12]
 8056902:	f000 f83f 	bl	8056984 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8056906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8056908:	4618      	mov	r0, r3
 805690a:	3730      	adds	r7, #48	; 0x30
 805690c:	46bd      	mov	sp, r7
 805690e:	bd80      	pop	{r7, pc}

08056910 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8056910:	b580      	push	{r7, lr}
 8056912:	b08a      	sub	sp, #40	; 0x28
 8056914:	af02      	add	r7, sp, #8
 8056916:	60f8      	str	r0, [r7, #12]
 8056918:	60b9      	str	r1, [r7, #8]
 805691a:	4613      	mov	r3, r2
 805691c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 805691e:	68fb      	ldr	r3, [r7, #12]
 8056920:	2b00      	cmp	r3, #0
 8056922:	d10a      	bne.n	805693a <xQueueGenericCreate+0x2a>
	__asm volatile
 8056924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8056928:	f383 8811 	msr	BASEPRI, r3
 805692c:	f3bf 8f6f 	isb	sy
 8056930:	f3bf 8f4f 	dsb	sy
 8056934:	613b      	str	r3, [r7, #16]
}
 8056936:	bf00      	nop
 8056938:	e7fe      	b.n	8056938 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 805693a:	68fb      	ldr	r3, [r7, #12]
 805693c:	68ba      	ldr	r2, [r7, #8]
 805693e:	fb02 f303 	mul.w	r3, r2, r3
 8056942:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8056944:	69fb      	ldr	r3, [r7, #28]
 8056946:	3350      	adds	r3, #80	; 0x50
 8056948:	4618      	mov	r0, r3
 805694a:	f002 faad 	bl	8058ea8 <pvPortMalloc>
 805694e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8056950:	69bb      	ldr	r3, [r7, #24]
 8056952:	2b00      	cmp	r3, #0
 8056954:	d011      	beq.n	805697a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8056956:	69bb      	ldr	r3, [r7, #24]
 8056958:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 805695a:	697b      	ldr	r3, [r7, #20]
 805695c:	3350      	adds	r3, #80	; 0x50
 805695e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8056960:	69bb      	ldr	r3, [r7, #24]
 8056962:	2200      	movs	r2, #0
 8056964:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8056968:	79fa      	ldrb	r2, [r7, #7]
 805696a:	69bb      	ldr	r3, [r7, #24]
 805696c:	9300      	str	r3, [sp, #0]
 805696e:	4613      	mov	r3, r2
 8056970:	697a      	ldr	r2, [r7, #20]
 8056972:	68b9      	ldr	r1, [r7, #8]
 8056974:	68f8      	ldr	r0, [r7, #12]
 8056976:	f000 f805 	bl	8056984 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 805697a:	69bb      	ldr	r3, [r7, #24]
	}
 805697c:	4618      	mov	r0, r3
 805697e:	3720      	adds	r7, #32
 8056980:	46bd      	mov	sp, r7
 8056982:	bd80      	pop	{r7, pc}

08056984 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8056984:	b580      	push	{r7, lr}
 8056986:	b084      	sub	sp, #16
 8056988:	af00      	add	r7, sp, #0
 805698a:	60f8      	str	r0, [r7, #12]
 805698c:	60b9      	str	r1, [r7, #8]
 805698e:	607a      	str	r2, [r7, #4]
 8056990:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8056992:	68bb      	ldr	r3, [r7, #8]
 8056994:	2b00      	cmp	r3, #0
 8056996:	d103      	bne.n	80569a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8056998:	69bb      	ldr	r3, [r7, #24]
 805699a:	69ba      	ldr	r2, [r7, #24]
 805699c:	601a      	str	r2, [r3, #0]
 805699e:	e002      	b.n	80569a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80569a0:	69bb      	ldr	r3, [r7, #24]
 80569a2:	687a      	ldr	r2, [r7, #4]
 80569a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80569a6:	69bb      	ldr	r3, [r7, #24]
 80569a8:	68fa      	ldr	r2, [r7, #12]
 80569aa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80569ac:	69bb      	ldr	r3, [r7, #24]
 80569ae:	68ba      	ldr	r2, [r7, #8]
 80569b0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80569b2:	2101      	movs	r1, #1
 80569b4:	69b8      	ldr	r0, [r7, #24]
 80569b6:	f7ff fecb 	bl	8056750 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80569ba:	69bb      	ldr	r3, [r7, #24]
 80569bc:	78fa      	ldrb	r2, [r7, #3]
 80569be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80569c2:	bf00      	nop
 80569c4:	3710      	adds	r7, #16
 80569c6:	46bd      	mov	sp, r7
 80569c8:	bd80      	pop	{r7, pc}
	...

080569cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80569cc:	b580      	push	{r7, lr}
 80569ce:	b08e      	sub	sp, #56	; 0x38
 80569d0:	af00      	add	r7, sp, #0
 80569d2:	60f8      	str	r0, [r7, #12]
 80569d4:	60b9      	str	r1, [r7, #8]
 80569d6:	607a      	str	r2, [r7, #4]
 80569d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80569da:	2300      	movs	r3, #0
 80569dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80569de:	68fb      	ldr	r3, [r7, #12]
 80569e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80569e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80569e4:	2b00      	cmp	r3, #0
 80569e6:	d10a      	bne.n	80569fe <xQueueGenericSend+0x32>
	__asm volatile
 80569e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80569ec:	f383 8811 	msr	BASEPRI, r3
 80569f0:	f3bf 8f6f 	isb	sy
 80569f4:	f3bf 8f4f 	dsb	sy
 80569f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80569fa:	bf00      	nop
 80569fc:	e7fe      	b.n	80569fc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80569fe:	68bb      	ldr	r3, [r7, #8]
 8056a00:	2b00      	cmp	r3, #0
 8056a02:	d103      	bne.n	8056a0c <xQueueGenericSend+0x40>
 8056a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8056a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8056a08:	2b00      	cmp	r3, #0
 8056a0a:	d101      	bne.n	8056a10 <xQueueGenericSend+0x44>
 8056a0c:	2301      	movs	r3, #1
 8056a0e:	e000      	b.n	8056a12 <xQueueGenericSend+0x46>
 8056a10:	2300      	movs	r3, #0
 8056a12:	2b00      	cmp	r3, #0
 8056a14:	d10a      	bne.n	8056a2c <xQueueGenericSend+0x60>
	__asm volatile
 8056a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8056a1a:	f383 8811 	msr	BASEPRI, r3
 8056a1e:	f3bf 8f6f 	isb	sy
 8056a22:	f3bf 8f4f 	dsb	sy
 8056a26:	627b      	str	r3, [r7, #36]	; 0x24
}
 8056a28:	bf00      	nop
 8056a2a:	e7fe      	b.n	8056a2a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8056a2c:	683b      	ldr	r3, [r7, #0]
 8056a2e:	2b02      	cmp	r3, #2
 8056a30:	d103      	bne.n	8056a3a <xQueueGenericSend+0x6e>
 8056a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8056a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8056a36:	2b01      	cmp	r3, #1
 8056a38:	d101      	bne.n	8056a3e <xQueueGenericSend+0x72>
 8056a3a:	2301      	movs	r3, #1
 8056a3c:	e000      	b.n	8056a40 <xQueueGenericSend+0x74>
 8056a3e:	2300      	movs	r3, #0
 8056a40:	2b00      	cmp	r3, #0
 8056a42:	d10a      	bne.n	8056a5a <xQueueGenericSend+0x8e>
	__asm volatile
 8056a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8056a48:	f383 8811 	msr	BASEPRI, r3
 8056a4c:	f3bf 8f6f 	isb	sy
 8056a50:	f3bf 8f4f 	dsb	sy
 8056a54:	623b      	str	r3, [r7, #32]
}
 8056a56:	bf00      	nop
 8056a58:	e7fe      	b.n	8056a58 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8056a5a:	f001 fac5 	bl	8057fe8 <xTaskGetSchedulerState>
 8056a5e:	4603      	mov	r3, r0
 8056a60:	2b00      	cmp	r3, #0
 8056a62:	d102      	bne.n	8056a6a <xQueueGenericSend+0x9e>
 8056a64:	687b      	ldr	r3, [r7, #4]
 8056a66:	2b00      	cmp	r3, #0
 8056a68:	d101      	bne.n	8056a6e <xQueueGenericSend+0xa2>
 8056a6a:	2301      	movs	r3, #1
 8056a6c:	e000      	b.n	8056a70 <xQueueGenericSend+0xa4>
 8056a6e:	2300      	movs	r3, #0
 8056a70:	2b00      	cmp	r3, #0
 8056a72:	d10a      	bne.n	8056a8a <xQueueGenericSend+0xbe>
	__asm volatile
 8056a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8056a78:	f383 8811 	msr	BASEPRI, r3
 8056a7c:	f3bf 8f6f 	isb	sy
 8056a80:	f3bf 8f4f 	dsb	sy
 8056a84:	61fb      	str	r3, [r7, #28]
}
 8056a86:	bf00      	nop
 8056a88:	e7fe      	b.n	8056a88 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8056a8a:	f002 f8eb 	bl	8058c64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8056a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8056a90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8056a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8056a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8056a96:	429a      	cmp	r2, r3
 8056a98:	d302      	bcc.n	8056aa0 <xQueueGenericSend+0xd4>
 8056a9a:	683b      	ldr	r3, [r7, #0]
 8056a9c:	2b02      	cmp	r3, #2
 8056a9e:	d129      	bne.n	8056af4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8056aa0:	683a      	ldr	r2, [r7, #0]
 8056aa2:	68b9      	ldr	r1, [r7, #8]
 8056aa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8056aa6:	f000 fa8b 	bl	8056fc0 <prvCopyDataToQueue>
 8056aaa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8056aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8056aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8056ab0:	2b00      	cmp	r3, #0
 8056ab2:	d010      	beq.n	8056ad6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8056ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8056ab6:	3324      	adds	r3, #36	; 0x24
 8056ab8:	4618      	mov	r0, r3
 8056aba:	f001 f8d7 	bl	8057c6c <xTaskRemoveFromEventList>
 8056abe:	4603      	mov	r3, r0
 8056ac0:	2b00      	cmp	r3, #0
 8056ac2:	d013      	beq.n	8056aec <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8056ac4:	4b3f      	ldr	r3, [pc, #252]	; (8056bc4 <xQueueGenericSend+0x1f8>)
 8056ac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8056aca:	601a      	str	r2, [r3, #0]
 8056acc:	f3bf 8f4f 	dsb	sy
 8056ad0:	f3bf 8f6f 	isb	sy
 8056ad4:	e00a      	b.n	8056aec <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8056ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8056ad8:	2b00      	cmp	r3, #0
 8056ada:	d007      	beq.n	8056aec <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8056adc:	4b39      	ldr	r3, [pc, #228]	; (8056bc4 <xQueueGenericSend+0x1f8>)
 8056ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8056ae2:	601a      	str	r2, [r3, #0]
 8056ae4:	f3bf 8f4f 	dsb	sy
 8056ae8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8056aec:	f002 f8ea 	bl	8058cc4 <vPortExitCritical>
				return pdPASS;
 8056af0:	2301      	movs	r3, #1
 8056af2:	e063      	b.n	8056bbc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8056af4:	687b      	ldr	r3, [r7, #4]
 8056af6:	2b00      	cmp	r3, #0
 8056af8:	d103      	bne.n	8056b02 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8056afa:	f002 f8e3 	bl	8058cc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8056afe:	2300      	movs	r3, #0
 8056b00:	e05c      	b.n	8056bbc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8056b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8056b04:	2b00      	cmp	r3, #0
 8056b06:	d106      	bne.n	8056b16 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8056b08:	f107 0314 	add.w	r3, r7, #20
 8056b0c:	4618      	mov	r0, r3
 8056b0e:	f001 f911 	bl	8057d34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8056b12:	2301      	movs	r3, #1
 8056b14:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8056b16:	f002 f8d5 	bl	8058cc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8056b1a:	f000 fe71 	bl	8057800 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8056b1e:	f002 f8a1 	bl	8058c64 <vPortEnterCritical>
 8056b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8056b24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8056b28:	b25b      	sxtb	r3, r3
 8056b2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8056b2e:	d103      	bne.n	8056b38 <xQueueGenericSend+0x16c>
 8056b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8056b32:	2200      	movs	r2, #0
 8056b34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8056b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8056b3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8056b3e:	b25b      	sxtb	r3, r3
 8056b40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8056b44:	d103      	bne.n	8056b4e <xQueueGenericSend+0x182>
 8056b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8056b48:	2200      	movs	r2, #0
 8056b4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8056b4e:	f002 f8b9 	bl	8058cc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8056b52:	1d3a      	adds	r2, r7, #4
 8056b54:	f107 0314 	add.w	r3, r7, #20
 8056b58:	4611      	mov	r1, r2
 8056b5a:	4618      	mov	r0, r3
 8056b5c:	f001 f900 	bl	8057d60 <xTaskCheckForTimeOut>
 8056b60:	4603      	mov	r3, r0
 8056b62:	2b00      	cmp	r3, #0
 8056b64:	d124      	bne.n	8056bb0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8056b66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8056b68:	f000 fb22 	bl	80571b0 <prvIsQueueFull>
 8056b6c:	4603      	mov	r3, r0
 8056b6e:	2b00      	cmp	r3, #0
 8056b70:	d018      	beq.n	8056ba4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8056b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8056b74:	3310      	adds	r3, #16
 8056b76:	687a      	ldr	r2, [r7, #4]
 8056b78:	4611      	mov	r1, r2
 8056b7a:	4618      	mov	r0, r3
 8056b7c:	f001 f826 	bl	8057bcc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8056b80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8056b82:	f000 faad 	bl	80570e0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8056b86:	f000 fe49 	bl	805781c <xTaskResumeAll>
 8056b8a:	4603      	mov	r3, r0
 8056b8c:	2b00      	cmp	r3, #0
 8056b8e:	f47f af7c 	bne.w	8056a8a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8056b92:	4b0c      	ldr	r3, [pc, #48]	; (8056bc4 <xQueueGenericSend+0x1f8>)
 8056b94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8056b98:	601a      	str	r2, [r3, #0]
 8056b9a:	f3bf 8f4f 	dsb	sy
 8056b9e:	f3bf 8f6f 	isb	sy
 8056ba2:	e772      	b.n	8056a8a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8056ba4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8056ba6:	f000 fa9b 	bl	80570e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8056baa:	f000 fe37 	bl	805781c <xTaskResumeAll>
 8056bae:	e76c      	b.n	8056a8a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8056bb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8056bb2:	f000 fa95 	bl	80570e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8056bb6:	f000 fe31 	bl	805781c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8056bba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8056bbc:	4618      	mov	r0, r3
 8056bbe:	3738      	adds	r7, #56	; 0x38
 8056bc0:	46bd      	mov	sp, r7
 8056bc2:	bd80      	pop	{r7, pc}
 8056bc4:	e000ed04 	.word	0xe000ed04

08056bc8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8056bc8:	b580      	push	{r7, lr}
 8056bca:	b090      	sub	sp, #64	; 0x40
 8056bcc:	af00      	add	r7, sp, #0
 8056bce:	60f8      	str	r0, [r7, #12]
 8056bd0:	60b9      	str	r1, [r7, #8]
 8056bd2:	607a      	str	r2, [r7, #4]
 8056bd4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8056bd6:	68fb      	ldr	r3, [r7, #12]
 8056bd8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8056bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8056bdc:	2b00      	cmp	r3, #0
 8056bde:	d10a      	bne.n	8056bf6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8056be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8056be4:	f383 8811 	msr	BASEPRI, r3
 8056be8:	f3bf 8f6f 	isb	sy
 8056bec:	f3bf 8f4f 	dsb	sy
 8056bf0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8056bf2:	bf00      	nop
 8056bf4:	e7fe      	b.n	8056bf4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8056bf6:	68bb      	ldr	r3, [r7, #8]
 8056bf8:	2b00      	cmp	r3, #0
 8056bfa:	d103      	bne.n	8056c04 <xQueueGenericSendFromISR+0x3c>
 8056bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8056bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8056c00:	2b00      	cmp	r3, #0
 8056c02:	d101      	bne.n	8056c08 <xQueueGenericSendFromISR+0x40>
 8056c04:	2301      	movs	r3, #1
 8056c06:	e000      	b.n	8056c0a <xQueueGenericSendFromISR+0x42>
 8056c08:	2300      	movs	r3, #0
 8056c0a:	2b00      	cmp	r3, #0
 8056c0c:	d10a      	bne.n	8056c24 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8056c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8056c12:	f383 8811 	msr	BASEPRI, r3
 8056c16:	f3bf 8f6f 	isb	sy
 8056c1a:	f3bf 8f4f 	dsb	sy
 8056c1e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8056c20:	bf00      	nop
 8056c22:	e7fe      	b.n	8056c22 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8056c24:	683b      	ldr	r3, [r7, #0]
 8056c26:	2b02      	cmp	r3, #2
 8056c28:	d103      	bne.n	8056c32 <xQueueGenericSendFromISR+0x6a>
 8056c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8056c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8056c2e:	2b01      	cmp	r3, #1
 8056c30:	d101      	bne.n	8056c36 <xQueueGenericSendFromISR+0x6e>
 8056c32:	2301      	movs	r3, #1
 8056c34:	e000      	b.n	8056c38 <xQueueGenericSendFromISR+0x70>
 8056c36:	2300      	movs	r3, #0
 8056c38:	2b00      	cmp	r3, #0
 8056c3a:	d10a      	bne.n	8056c52 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8056c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8056c40:	f383 8811 	msr	BASEPRI, r3
 8056c44:	f3bf 8f6f 	isb	sy
 8056c48:	f3bf 8f4f 	dsb	sy
 8056c4c:	623b      	str	r3, [r7, #32]
}
 8056c4e:	bf00      	nop
 8056c50:	e7fe      	b.n	8056c50 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8056c52:	f002 f8e9 	bl	8058e28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8056c56:	f3ef 8211 	mrs	r2, BASEPRI
 8056c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8056c5e:	f383 8811 	msr	BASEPRI, r3
 8056c62:	f3bf 8f6f 	isb	sy
 8056c66:	f3bf 8f4f 	dsb	sy
 8056c6a:	61fa      	str	r2, [r7, #28]
 8056c6c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8056c6e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8056c70:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8056c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8056c74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8056c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8056c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8056c7a:	429a      	cmp	r2, r3
 8056c7c:	d302      	bcc.n	8056c84 <xQueueGenericSendFromISR+0xbc>
 8056c7e:	683b      	ldr	r3, [r7, #0]
 8056c80:	2b02      	cmp	r3, #2
 8056c82:	d12f      	bne.n	8056ce4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8056c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8056c86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8056c8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8056c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8056c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8056c92:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8056c94:	683a      	ldr	r2, [r7, #0]
 8056c96:	68b9      	ldr	r1, [r7, #8]
 8056c98:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8056c9a:	f000 f991 	bl	8056fc0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8056c9e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8056ca2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8056ca6:	d112      	bne.n	8056cce <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8056ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8056caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8056cac:	2b00      	cmp	r3, #0
 8056cae:	d016      	beq.n	8056cde <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8056cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8056cb2:	3324      	adds	r3, #36	; 0x24
 8056cb4:	4618      	mov	r0, r3
 8056cb6:	f000 ffd9 	bl	8057c6c <xTaskRemoveFromEventList>
 8056cba:	4603      	mov	r3, r0
 8056cbc:	2b00      	cmp	r3, #0
 8056cbe:	d00e      	beq.n	8056cde <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8056cc0:	687b      	ldr	r3, [r7, #4]
 8056cc2:	2b00      	cmp	r3, #0
 8056cc4:	d00b      	beq.n	8056cde <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8056cc6:	687b      	ldr	r3, [r7, #4]
 8056cc8:	2201      	movs	r2, #1
 8056cca:	601a      	str	r2, [r3, #0]
 8056ccc:	e007      	b.n	8056cde <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8056cce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8056cd2:	3301      	adds	r3, #1
 8056cd4:	b2db      	uxtb	r3, r3
 8056cd6:	b25a      	sxtb	r2, r3
 8056cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8056cda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8056cde:	2301      	movs	r3, #1
 8056ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8056ce2:	e001      	b.n	8056ce8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8056ce4:	2300      	movs	r3, #0
 8056ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8056ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8056cea:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8056cec:	697b      	ldr	r3, [r7, #20]
 8056cee:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8056cf2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8056cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8056cf6:	4618      	mov	r0, r3
 8056cf8:	3740      	adds	r7, #64	; 0x40
 8056cfa:	46bd      	mov	sp, r7
 8056cfc:	bd80      	pop	{r7, pc}
	...

08056d00 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8056d00:	b580      	push	{r7, lr}
 8056d02:	b08c      	sub	sp, #48	; 0x30
 8056d04:	af00      	add	r7, sp, #0
 8056d06:	60f8      	str	r0, [r7, #12]
 8056d08:	60b9      	str	r1, [r7, #8]
 8056d0a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8056d0c:	2300      	movs	r3, #0
 8056d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8056d10:	68fb      	ldr	r3, [r7, #12]
 8056d12:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8056d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8056d16:	2b00      	cmp	r3, #0
 8056d18:	d10a      	bne.n	8056d30 <xQueueReceive+0x30>
	__asm volatile
 8056d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8056d1e:	f383 8811 	msr	BASEPRI, r3
 8056d22:	f3bf 8f6f 	isb	sy
 8056d26:	f3bf 8f4f 	dsb	sy
 8056d2a:	623b      	str	r3, [r7, #32]
}
 8056d2c:	bf00      	nop
 8056d2e:	e7fe      	b.n	8056d2e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8056d30:	68bb      	ldr	r3, [r7, #8]
 8056d32:	2b00      	cmp	r3, #0
 8056d34:	d103      	bne.n	8056d3e <xQueueReceive+0x3e>
 8056d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8056d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8056d3a:	2b00      	cmp	r3, #0
 8056d3c:	d101      	bne.n	8056d42 <xQueueReceive+0x42>
 8056d3e:	2301      	movs	r3, #1
 8056d40:	e000      	b.n	8056d44 <xQueueReceive+0x44>
 8056d42:	2300      	movs	r3, #0
 8056d44:	2b00      	cmp	r3, #0
 8056d46:	d10a      	bne.n	8056d5e <xQueueReceive+0x5e>
	__asm volatile
 8056d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8056d4c:	f383 8811 	msr	BASEPRI, r3
 8056d50:	f3bf 8f6f 	isb	sy
 8056d54:	f3bf 8f4f 	dsb	sy
 8056d58:	61fb      	str	r3, [r7, #28]
}
 8056d5a:	bf00      	nop
 8056d5c:	e7fe      	b.n	8056d5c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8056d5e:	f001 f943 	bl	8057fe8 <xTaskGetSchedulerState>
 8056d62:	4603      	mov	r3, r0
 8056d64:	2b00      	cmp	r3, #0
 8056d66:	d102      	bne.n	8056d6e <xQueueReceive+0x6e>
 8056d68:	687b      	ldr	r3, [r7, #4]
 8056d6a:	2b00      	cmp	r3, #0
 8056d6c:	d101      	bne.n	8056d72 <xQueueReceive+0x72>
 8056d6e:	2301      	movs	r3, #1
 8056d70:	e000      	b.n	8056d74 <xQueueReceive+0x74>
 8056d72:	2300      	movs	r3, #0
 8056d74:	2b00      	cmp	r3, #0
 8056d76:	d10a      	bne.n	8056d8e <xQueueReceive+0x8e>
	__asm volatile
 8056d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8056d7c:	f383 8811 	msr	BASEPRI, r3
 8056d80:	f3bf 8f6f 	isb	sy
 8056d84:	f3bf 8f4f 	dsb	sy
 8056d88:	61bb      	str	r3, [r7, #24]
}
 8056d8a:	bf00      	nop
 8056d8c:	e7fe      	b.n	8056d8c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8056d8e:	f001 ff69 	bl	8058c64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8056d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8056d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8056d96:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8056d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8056d9a:	2b00      	cmp	r3, #0
 8056d9c:	d01f      	beq.n	8056dde <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8056d9e:	68b9      	ldr	r1, [r7, #8]
 8056da0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8056da2:	f000 f977 	bl	8057094 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8056da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8056da8:	1e5a      	subs	r2, r3, #1
 8056daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8056dac:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8056dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8056db0:	691b      	ldr	r3, [r3, #16]
 8056db2:	2b00      	cmp	r3, #0
 8056db4:	d00f      	beq.n	8056dd6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8056db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8056db8:	3310      	adds	r3, #16
 8056dba:	4618      	mov	r0, r3
 8056dbc:	f000 ff56 	bl	8057c6c <xTaskRemoveFromEventList>
 8056dc0:	4603      	mov	r3, r0
 8056dc2:	2b00      	cmp	r3, #0
 8056dc4:	d007      	beq.n	8056dd6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8056dc6:	4b3d      	ldr	r3, [pc, #244]	; (8056ebc <xQueueReceive+0x1bc>)
 8056dc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8056dcc:	601a      	str	r2, [r3, #0]
 8056dce:	f3bf 8f4f 	dsb	sy
 8056dd2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8056dd6:	f001 ff75 	bl	8058cc4 <vPortExitCritical>
				return pdPASS;
 8056dda:	2301      	movs	r3, #1
 8056ddc:	e069      	b.n	8056eb2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8056dde:	687b      	ldr	r3, [r7, #4]
 8056de0:	2b00      	cmp	r3, #0
 8056de2:	d103      	bne.n	8056dec <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8056de4:	f001 ff6e 	bl	8058cc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8056de8:	2300      	movs	r3, #0
 8056dea:	e062      	b.n	8056eb2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8056dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8056dee:	2b00      	cmp	r3, #0
 8056df0:	d106      	bne.n	8056e00 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8056df2:	f107 0310 	add.w	r3, r7, #16
 8056df6:	4618      	mov	r0, r3
 8056df8:	f000 ff9c 	bl	8057d34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8056dfc:	2301      	movs	r3, #1
 8056dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8056e00:	f001 ff60 	bl	8058cc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8056e04:	f000 fcfc 	bl	8057800 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8056e08:	f001 ff2c 	bl	8058c64 <vPortEnterCritical>
 8056e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8056e0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8056e12:	b25b      	sxtb	r3, r3
 8056e14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8056e18:	d103      	bne.n	8056e22 <xQueueReceive+0x122>
 8056e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8056e1c:	2200      	movs	r2, #0
 8056e1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8056e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8056e24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8056e28:	b25b      	sxtb	r3, r3
 8056e2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8056e2e:	d103      	bne.n	8056e38 <xQueueReceive+0x138>
 8056e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8056e32:	2200      	movs	r2, #0
 8056e34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8056e38:	f001 ff44 	bl	8058cc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8056e3c:	1d3a      	adds	r2, r7, #4
 8056e3e:	f107 0310 	add.w	r3, r7, #16
 8056e42:	4611      	mov	r1, r2
 8056e44:	4618      	mov	r0, r3
 8056e46:	f000 ff8b 	bl	8057d60 <xTaskCheckForTimeOut>
 8056e4a:	4603      	mov	r3, r0
 8056e4c:	2b00      	cmp	r3, #0
 8056e4e:	d123      	bne.n	8056e98 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8056e50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8056e52:	f000 f997 	bl	8057184 <prvIsQueueEmpty>
 8056e56:	4603      	mov	r3, r0
 8056e58:	2b00      	cmp	r3, #0
 8056e5a:	d017      	beq.n	8056e8c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8056e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8056e5e:	3324      	adds	r3, #36	; 0x24
 8056e60:	687a      	ldr	r2, [r7, #4]
 8056e62:	4611      	mov	r1, r2
 8056e64:	4618      	mov	r0, r3
 8056e66:	f000 feb1 	bl	8057bcc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8056e6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8056e6c:	f000 f938 	bl	80570e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8056e70:	f000 fcd4 	bl	805781c <xTaskResumeAll>
 8056e74:	4603      	mov	r3, r0
 8056e76:	2b00      	cmp	r3, #0
 8056e78:	d189      	bne.n	8056d8e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8056e7a:	4b10      	ldr	r3, [pc, #64]	; (8056ebc <xQueueReceive+0x1bc>)
 8056e7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8056e80:	601a      	str	r2, [r3, #0]
 8056e82:	f3bf 8f4f 	dsb	sy
 8056e86:	f3bf 8f6f 	isb	sy
 8056e8a:	e780      	b.n	8056d8e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8056e8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8056e8e:	f000 f927 	bl	80570e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8056e92:	f000 fcc3 	bl	805781c <xTaskResumeAll>
 8056e96:	e77a      	b.n	8056d8e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8056e98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8056e9a:	f000 f921 	bl	80570e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8056e9e:	f000 fcbd 	bl	805781c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8056ea2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8056ea4:	f000 f96e 	bl	8057184 <prvIsQueueEmpty>
 8056ea8:	4603      	mov	r3, r0
 8056eaa:	2b00      	cmp	r3, #0
 8056eac:	f43f af6f 	beq.w	8056d8e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8056eb0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8056eb2:	4618      	mov	r0, r3
 8056eb4:	3730      	adds	r7, #48	; 0x30
 8056eb6:	46bd      	mov	sp, r7
 8056eb8:	bd80      	pop	{r7, pc}
 8056eba:	bf00      	nop
 8056ebc:	e000ed04 	.word	0xe000ed04

08056ec0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8056ec0:	b580      	push	{r7, lr}
 8056ec2:	b08e      	sub	sp, #56	; 0x38
 8056ec4:	af00      	add	r7, sp, #0
 8056ec6:	60f8      	str	r0, [r7, #12]
 8056ec8:	60b9      	str	r1, [r7, #8]
 8056eca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8056ecc:	68fb      	ldr	r3, [r7, #12]
 8056ece:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8056ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8056ed2:	2b00      	cmp	r3, #0
 8056ed4:	d10a      	bne.n	8056eec <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8056ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8056eda:	f383 8811 	msr	BASEPRI, r3
 8056ede:	f3bf 8f6f 	isb	sy
 8056ee2:	f3bf 8f4f 	dsb	sy
 8056ee6:	623b      	str	r3, [r7, #32]
}
 8056ee8:	bf00      	nop
 8056eea:	e7fe      	b.n	8056eea <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8056eec:	68bb      	ldr	r3, [r7, #8]
 8056eee:	2b00      	cmp	r3, #0
 8056ef0:	d103      	bne.n	8056efa <xQueueReceiveFromISR+0x3a>
 8056ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8056ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8056ef6:	2b00      	cmp	r3, #0
 8056ef8:	d101      	bne.n	8056efe <xQueueReceiveFromISR+0x3e>
 8056efa:	2301      	movs	r3, #1
 8056efc:	e000      	b.n	8056f00 <xQueueReceiveFromISR+0x40>
 8056efe:	2300      	movs	r3, #0
 8056f00:	2b00      	cmp	r3, #0
 8056f02:	d10a      	bne.n	8056f1a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8056f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8056f08:	f383 8811 	msr	BASEPRI, r3
 8056f0c:	f3bf 8f6f 	isb	sy
 8056f10:	f3bf 8f4f 	dsb	sy
 8056f14:	61fb      	str	r3, [r7, #28]
}
 8056f16:	bf00      	nop
 8056f18:	e7fe      	b.n	8056f18 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8056f1a:	f001 ff85 	bl	8058e28 <vPortValidateInterruptPriority>
	__asm volatile
 8056f1e:	f3ef 8211 	mrs	r2, BASEPRI
 8056f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8056f26:	f383 8811 	msr	BASEPRI, r3
 8056f2a:	f3bf 8f6f 	isb	sy
 8056f2e:	f3bf 8f4f 	dsb	sy
 8056f32:	61ba      	str	r2, [r7, #24]
 8056f34:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8056f36:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8056f38:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8056f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8056f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8056f3e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8056f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8056f42:	2b00      	cmp	r3, #0
 8056f44:	d02f      	beq.n	8056fa6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8056f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8056f48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8056f4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8056f50:	68b9      	ldr	r1, [r7, #8]
 8056f52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8056f54:	f000 f89e 	bl	8057094 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8056f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8056f5a:	1e5a      	subs	r2, r3, #1
 8056f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8056f5e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8056f60:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8056f64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8056f68:	d112      	bne.n	8056f90 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8056f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8056f6c:	691b      	ldr	r3, [r3, #16]
 8056f6e:	2b00      	cmp	r3, #0
 8056f70:	d016      	beq.n	8056fa0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8056f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8056f74:	3310      	adds	r3, #16
 8056f76:	4618      	mov	r0, r3
 8056f78:	f000 fe78 	bl	8057c6c <xTaskRemoveFromEventList>
 8056f7c:	4603      	mov	r3, r0
 8056f7e:	2b00      	cmp	r3, #0
 8056f80:	d00e      	beq.n	8056fa0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8056f82:	687b      	ldr	r3, [r7, #4]
 8056f84:	2b00      	cmp	r3, #0
 8056f86:	d00b      	beq.n	8056fa0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8056f88:	687b      	ldr	r3, [r7, #4]
 8056f8a:	2201      	movs	r2, #1
 8056f8c:	601a      	str	r2, [r3, #0]
 8056f8e:	e007      	b.n	8056fa0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8056f90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8056f94:	3301      	adds	r3, #1
 8056f96:	b2db      	uxtb	r3, r3
 8056f98:	b25a      	sxtb	r2, r3
 8056f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8056f9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8056fa0:	2301      	movs	r3, #1
 8056fa2:	637b      	str	r3, [r7, #52]	; 0x34
 8056fa4:	e001      	b.n	8056faa <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8056fa6:	2300      	movs	r3, #0
 8056fa8:	637b      	str	r3, [r7, #52]	; 0x34
 8056faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8056fac:	613b      	str	r3, [r7, #16]
	__asm volatile
 8056fae:	693b      	ldr	r3, [r7, #16]
 8056fb0:	f383 8811 	msr	BASEPRI, r3
}
 8056fb4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8056fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8056fb8:	4618      	mov	r0, r3
 8056fba:	3738      	adds	r7, #56	; 0x38
 8056fbc:	46bd      	mov	sp, r7
 8056fbe:	bd80      	pop	{r7, pc}

08056fc0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8056fc0:	b580      	push	{r7, lr}
 8056fc2:	b086      	sub	sp, #24
 8056fc4:	af00      	add	r7, sp, #0
 8056fc6:	60f8      	str	r0, [r7, #12]
 8056fc8:	60b9      	str	r1, [r7, #8]
 8056fca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8056fcc:	2300      	movs	r3, #0
 8056fce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8056fd0:	68fb      	ldr	r3, [r7, #12]
 8056fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8056fd4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8056fd6:	68fb      	ldr	r3, [r7, #12]
 8056fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8056fda:	2b00      	cmp	r3, #0
 8056fdc:	d10d      	bne.n	8056ffa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8056fde:	68fb      	ldr	r3, [r7, #12]
 8056fe0:	681b      	ldr	r3, [r3, #0]
 8056fe2:	2b00      	cmp	r3, #0
 8056fe4:	d14d      	bne.n	8057082 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8056fe6:	68fb      	ldr	r3, [r7, #12]
 8056fe8:	689b      	ldr	r3, [r3, #8]
 8056fea:	4618      	mov	r0, r3
 8056fec:	f001 f81a 	bl	8058024 <xTaskPriorityDisinherit>
 8056ff0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8056ff2:	68fb      	ldr	r3, [r7, #12]
 8056ff4:	2200      	movs	r2, #0
 8056ff6:	609a      	str	r2, [r3, #8]
 8056ff8:	e043      	b.n	8057082 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8056ffa:	687b      	ldr	r3, [r7, #4]
 8056ffc:	2b00      	cmp	r3, #0
 8056ffe:	d119      	bne.n	8057034 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8057000:	68fb      	ldr	r3, [r7, #12]
 8057002:	6858      	ldr	r0, [r3, #4]
 8057004:	68fb      	ldr	r3, [r7, #12]
 8057006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8057008:	461a      	mov	r2, r3
 805700a:	68b9      	ldr	r1, [r7, #8]
 805700c:	f008 ffc8 	bl	805ffa0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8057010:	68fb      	ldr	r3, [r7, #12]
 8057012:	685a      	ldr	r2, [r3, #4]
 8057014:	68fb      	ldr	r3, [r7, #12]
 8057016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8057018:	441a      	add	r2, r3
 805701a:	68fb      	ldr	r3, [r7, #12]
 805701c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 805701e:	68fb      	ldr	r3, [r7, #12]
 8057020:	685a      	ldr	r2, [r3, #4]
 8057022:	68fb      	ldr	r3, [r7, #12]
 8057024:	689b      	ldr	r3, [r3, #8]
 8057026:	429a      	cmp	r2, r3
 8057028:	d32b      	bcc.n	8057082 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 805702a:	68fb      	ldr	r3, [r7, #12]
 805702c:	681a      	ldr	r2, [r3, #0]
 805702e:	68fb      	ldr	r3, [r7, #12]
 8057030:	605a      	str	r2, [r3, #4]
 8057032:	e026      	b.n	8057082 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8057034:	68fb      	ldr	r3, [r7, #12]
 8057036:	68d8      	ldr	r0, [r3, #12]
 8057038:	68fb      	ldr	r3, [r7, #12]
 805703a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 805703c:	461a      	mov	r2, r3
 805703e:	68b9      	ldr	r1, [r7, #8]
 8057040:	f008 ffae 	bl	805ffa0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8057044:	68fb      	ldr	r3, [r7, #12]
 8057046:	68da      	ldr	r2, [r3, #12]
 8057048:	68fb      	ldr	r3, [r7, #12]
 805704a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 805704c:	425b      	negs	r3, r3
 805704e:	441a      	add	r2, r3
 8057050:	68fb      	ldr	r3, [r7, #12]
 8057052:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8057054:	68fb      	ldr	r3, [r7, #12]
 8057056:	68da      	ldr	r2, [r3, #12]
 8057058:	68fb      	ldr	r3, [r7, #12]
 805705a:	681b      	ldr	r3, [r3, #0]
 805705c:	429a      	cmp	r2, r3
 805705e:	d207      	bcs.n	8057070 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8057060:	68fb      	ldr	r3, [r7, #12]
 8057062:	689a      	ldr	r2, [r3, #8]
 8057064:	68fb      	ldr	r3, [r7, #12]
 8057066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8057068:	425b      	negs	r3, r3
 805706a:	441a      	add	r2, r3
 805706c:	68fb      	ldr	r3, [r7, #12]
 805706e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8057070:	687b      	ldr	r3, [r7, #4]
 8057072:	2b02      	cmp	r3, #2
 8057074:	d105      	bne.n	8057082 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8057076:	693b      	ldr	r3, [r7, #16]
 8057078:	2b00      	cmp	r3, #0
 805707a:	d002      	beq.n	8057082 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 805707c:	693b      	ldr	r3, [r7, #16]
 805707e:	3b01      	subs	r3, #1
 8057080:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8057082:	693b      	ldr	r3, [r7, #16]
 8057084:	1c5a      	adds	r2, r3, #1
 8057086:	68fb      	ldr	r3, [r7, #12]
 8057088:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 805708a:	697b      	ldr	r3, [r7, #20]
}
 805708c:	4618      	mov	r0, r3
 805708e:	3718      	adds	r7, #24
 8057090:	46bd      	mov	sp, r7
 8057092:	bd80      	pop	{r7, pc}

08057094 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8057094:	b580      	push	{r7, lr}
 8057096:	b082      	sub	sp, #8
 8057098:	af00      	add	r7, sp, #0
 805709a:	6078      	str	r0, [r7, #4]
 805709c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 805709e:	687b      	ldr	r3, [r7, #4]
 80570a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80570a2:	2b00      	cmp	r3, #0
 80570a4:	d018      	beq.n	80570d8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80570a6:	687b      	ldr	r3, [r7, #4]
 80570a8:	68da      	ldr	r2, [r3, #12]
 80570aa:	687b      	ldr	r3, [r7, #4]
 80570ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80570ae:	441a      	add	r2, r3
 80570b0:	687b      	ldr	r3, [r7, #4]
 80570b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80570b4:	687b      	ldr	r3, [r7, #4]
 80570b6:	68da      	ldr	r2, [r3, #12]
 80570b8:	687b      	ldr	r3, [r7, #4]
 80570ba:	689b      	ldr	r3, [r3, #8]
 80570bc:	429a      	cmp	r2, r3
 80570be:	d303      	bcc.n	80570c8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80570c0:	687b      	ldr	r3, [r7, #4]
 80570c2:	681a      	ldr	r2, [r3, #0]
 80570c4:	687b      	ldr	r3, [r7, #4]
 80570c6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80570c8:	687b      	ldr	r3, [r7, #4]
 80570ca:	68d9      	ldr	r1, [r3, #12]
 80570cc:	687b      	ldr	r3, [r7, #4]
 80570ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80570d0:	461a      	mov	r2, r3
 80570d2:	6838      	ldr	r0, [r7, #0]
 80570d4:	f008 ff64 	bl	805ffa0 <memcpy>
	}
}
 80570d8:	bf00      	nop
 80570da:	3708      	adds	r7, #8
 80570dc:	46bd      	mov	sp, r7
 80570de:	bd80      	pop	{r7, pc}

080570e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80570e0:	b580      	push	{r7, lr}
 80570e2:	b084      	sub	sp, #16
 80570e4:	af00      	add	r7, sp, #0
 80570e6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80570e8:	f001 fdbc 	bl	8058c64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80570ec:	687b      	ldr	r3, [r7, #4]
 80570ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80570f2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80570f4:	e011      	b.n	805711a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80570f6:	687b      	ldr	r3, [r7, #4]
 80570f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80570fa:	2b00      	cmp	r3, #0
 80570fc:	d012      	beq.n	8057124 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80570fe:	687b      	ldr	r3, [r7, #4]
 8057100:	3324      	adds	r3, #36	; 0x24
 8057102:	4618      	mov	r0, r3
 8057104:	f000 fdb2 	bl	8057c6c <xTaskRemoveFromEventList>
 8057108:	4603      	mov	r3, r0
 805710a:	2b00      	cmp	r3, #0
 805710c:	d001      	beq.n	8057112 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 805710e:	f000 fe89 	bl	8057e24 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8057112:	7bfb      	ldrb	r3, [r7, #15]
 8057114:	3b01      	subs	r3, #1
 8057116:	b2db      	uxtb	r3, r3
 8057118:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 805711a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 805711e:	2b00      	cmp	r3, #0
 8057120:	dce9      	bgt.n	80570f6 <prvUnlockQueue+0x16>
 8057122:	e000      	b.n	8057126 <prvUnlockQueue+0x46>
					break;
 8057124:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8057126:	687b      	ldr	r3, [r7, #4]
 8057128:	22ff      	movs	r2, #255	; 0xff
 805712a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 805712e:	f001 fdc9 	bl	8058cc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8057132:	f001 fd97 	bl	8058c64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8057136:	687b      	ldr	r3, [r7, #4]
 8057138:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 805713c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 805713e:	e011      	b.n	8057164 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8057140:	687b      	ldr	r3, [r7, #4]
 8057142:	691b      	ldr	r3, [r3, #16]
 8057144:	2b00      	cmp	r3, #0
 8057146:	d012      	beq.n	805716e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8057148:	687b      	ldr	r3, [r7, #4]
 805714a:	3310      	adds	r3, #16
 805714c:	4618      	mov	r0, r3
 805714e:	f000 fd8d 	bl	8057c6c <xTaskRemoveFromEventList>
 8057152:	4603      	mov	r3, r0
 8057154:	2b00      	cmp	r3, #0
 8057156:	d001      	beq.n	805715c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8057158:	f000 fe64 	bl	8057e24 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 805715c:	7bbb      	ldrb	r3, [r7, #14]
 805715e:	3b01      	subs	r3, #1
 8057160:	b2db      	uxtb	r3, r3
 8057162:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8057164:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8057168:	2b00      	cmp	r3, #0
 805716a:	dce9      	bgt.n	8057140 <prvUnlockQueue+0x60>
 805716c:	e000      	b.n	8057170 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 805716e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8057170:	687b      	ldr	r3, [r7, #4]
 8057172:	22ff      	movs	r2, #255	; 0xff
 8057174:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8057178:	f001 fda4 	bl	8058cc4 <vPortExitCritical>
}
 805717c:	bf00      	nop
 805717e:	3710      	adds	r7, #16
 8057180:	46bd      	mov	sp, r7
 8057182:	bd80      	pop	{r7, pc}

08057184 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8057184:	b580      	push	{r7, lr}
 8057186:	b084      	sub	sp, #16
 8057188:	af00      	add	r7, sp, #0
 805718a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 805718c:	f001 fd6a 	bl	8058c64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8057190:	687b      	ldr	r3, [r7, #4]
 8057192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8057194:	2b00      	cmp	r3, #0
 8057196:	d102      	bne.n	805719e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8057198:	2301      	movs	r3, #1
 805719a:	60fb      	str	r3, [r7, #12]
 805719c:	e001      	b.n	80571a2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 805719e:	2300      	movs	r3, #0
 80571a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80571a2:	f001 fd8f 	bl	8058cc4 <vPortExitCritical>

	return xReturn;
 80571a6:	68fb      	ldr	r3, [r7, #12]
}
 80571a8:	4618      	mov	r0, r3
 80571aa:	3710      	adds	r7, #16
 80571ac:	46bd      	mov	sp, r7
 80571ae:	bd80      	pop	{r7, pc}

080571b0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80571b0:	b580      	push	{r7, lr}
 80571b2:	b084      	sub	sp, #16
 80571b4:	af00      	add	r7, sp, #0
 80571b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80571b8:	f001 fd54 	bl	8058c64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80571bc:	687b      	ldr	r3, [r7, #4]
 80571be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80571c0:	687b      	ldr	r3, [r7, #4]
 80571c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80571c4:	429a      	cmp	r2, r3
 80571c6:	d102      	bne.n	80571ce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80571c8:	2301      	movs	r3, #1
 80571ca:	60fb      	str	r3, [r7, #12]
 80571cc:	e001      	b.n	80571d2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80571ce:	2300      	movs	r3, #0
 80571d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80571d2:	f001 fd77 	bl	8058cc4 <vPortExitCritical>

	return xReturn;
 80571d6:	68fb      	ldr	r3, [r7, #12]
}
 80571d8:	4618      	mov	r0, r3
 80571da:	3710      	adds	r7, #16
 80571dc:	46bd      	mov	sp, r7
 80571de:	bd80      	pop	{r7, pc}

080571e0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80571e0:	b480      	push	{r7}
 80571e2:	b085      	sub	sp, #20
 80571e4:	af00      	add	r7, sp, #0
 80571e6:	6078      	str	r0, [r7, #4]
 80571e8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80571ea:	2300      	movs	r3, #0
 80571ec:	60fb      	str	r3, [r7, #12]
 80571ee:	e014      	b.n	805721a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80571f0:	4a0f      	ldr	r2, [pc, #60]	; (8057230 <vQueueAddToRegistry+0x50>)
 80571f2:	68fb      	ldr	r3, [r7, #12]
 80571f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80571f8:	2b00      	cmp	r3, #0
 80571fa:	d10b      	bne.n	8057214 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80571fc:	490c      	ldr	r1, [pc, #48]	; (8057230 <vQueueAddToRegistry+0x50>)
 80571fe:	68fb      	ldr	r3, [r7, #12]
 8057200:	683a      	ldr	r2, [r7, #0]
 8057202:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8057206:	4a0a      	ldr	r2, [pc, #40]	; (8057230 <vQueueAddToRegistry+0x50>)
 8057208:	68fb      	ldr	r3, [r7, #12]
 805720a:	00db      	lsls	r3, r3, #3
 805720c:	4413      	add	r3, r2
 805720e:	687a      	ldr	r2, [r7, #4]
 8057210:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8057212:	e006      	b.n	8057222 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8057214:	68fb      	ldr	r3, [r7, #12]
 8057216:	3301      	adds	r3, #1
 8057218:	60fb      	str	r3, [r7, #12]
 805721a:	68fb      	ldr	r3, [r7, #12]
 805721c:	2b07      	cmp	r3, #7
 805721e:	d9e7      	bls.n	80571f0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8057220:	bf00      	nop
 8057222:	bf00      	nop
 8057224:	3714      	adds	r7, #20
 8057226:	46bd      	mov	sp, r7
 8057228:	f85d 7b04 	ldr.w	r7, [sp], #4
 805722c:	4770      	bx	lr
 805722e:	bf00      	nop
 8057230:	2001c344 	.word	0x2001c344

08057234 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8057234:	b580      	push	{r7, lr}
 8057236:	b086      	sub	sp, #24
 8057238:	af00      	add	r7, sp, #0
 805723a:	60f8      	str	r0, [r7, #12]
 805723c:	60b9      	str	r1, [r7, #8]
 805723e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8057240:	68fb      	ldr	r3, [r7, #12]
 8057242:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8057244:	f001 fd0e 	bl	8058c64 <vPortEnterCritical>
 8057248:	697b      	ldr	r3, [r7, #20]
 805724a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 805724e:	b25b      	sxtb	r3, r3
 8057250:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8057254:	d103      	bne.n	805725e <vQueueWaitForMessageRestricted+0x2a>
 8057256:	697b      	ldr	r3, [r7, #20]
 8057258:	2200      	movs	r2, #0
 805725a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 805725e:	697b      	ldr	r3, [r7, #20]
 8057260:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8057264:	b25b      	sxtb	r3, r3
 8057266:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 805726a:	d103      	bne.n	8057274 <vQueueWaitForMessageRestricted+0x40>
 805726c:	697b      	ldr	r3, [r7, #20]
 805726e:	2200      	movs	r2, #0
 8057270:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8057274:	f001 fd26 	bl	8058cc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8057278:	697b      	ldr	r3, [r7, #20]
 805727a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 805727c:	2b00      	cmp	r3, #0
 805727e:	d106      	bne.n	805728e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8057280:	697b      	ldr	r3, [r7, #20]
 8057282:	3324      	adds	r3, #36	; 0x24
 8057284:	687a      	ldr	r2, [r7, #4]
 8057286:	68b9      	ldr	r1, [r7, #8]
 8057288:	4618      	mov	r0, r3
 805728a:	f000 fcc3 	bl	8057c14 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 805728e:	6978      	ldr	r0, [r7, #20]
 8057290:	f7ff ff26 	bl	80570e0 <prvUnlockQueue>
	}
 8057294:	bf00      	nop
 8057296:	3718      	adds	r7, #24
 8057298:	46bd      	mov	sp, r7
 805729a:	bd80      	pop	{r7, pc}

0805729c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 805729c:	b580      	push	{r7, lr}
 805729e:	b08e      	sub	sp, #56	; 0x38
 80572a0:	af04      	add	r7, sp, #16
 80572a2:	60f8      	str	r0, [r7, #12]
 80572a4:	60b9      	str	r1, [r7, #8]
 80572a6:	607a      	str	r2, [r7, #4]
 80572a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80572aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80572ac:	2b00      	cmp	r3, #0
 80572ae:	d10a      	bne.n	80572c6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80572b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80572b4:	f383 8811 	msr	BASEPRI, r3
 80572b8:	f3bf 8f6f 	isb	sy
 80572bc:	f3bf 8f4f 	dsb	sy
 80572c0:	623b      	str	r3, [r7, #32]
}
 80572c2:	bf00      	nop
 80572c4:	e7fe      	b.n	80572c4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80572c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80572c8:	2b00      	cmp	r3, #0
 80572ca:	d10a      	bne.n	80572e2 <xTaskCreateStatic+0x46>
	__asm volatile
 80572cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80572d0:	f383 8811 	msr	BASEPRI, r3
 80572d4:	f3bf 8f6f 	isb	sy
 80572d8:	f3bf 8f4f 	dsb	sy
 80572dc:	61fb      	str	r3, [r7, #28]
}
 80572de:	bf00      	nop
 80572e0:	e7fe      	b.n	80572e0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80572e2:	235c      	movs	r3, #92	; 0x5c
 80572e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80572e6:	693b      	ldr	r3, [r7, #16]
 80572e8:	2b5c      	cmp	r3, #92	; 0x5c
 80572ea:	d00a      	beq.n	8057302 <xTaskCreateStatic+0x66>
	__asm volatile
 80572ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80572f0:	f383 8811 	msr	BASEPRI, r3
 80572f4:	f3bf 8f6f 	isb	sy
 80572f8:	f3bf 8f4f 	dsb	sy
 80572fc:	61bb      	str	r3, [r7, #24]
}
 80572fe:	bf00      	nop
 8057300:	e7fe      	b.n	8057300 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8057302:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8057304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8057306:	2b00      	cmp	r3, #0
 8057308:	d01e      	beq.n	8057348 <xTaskCreateStatic+0xac>
 805730a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 805730c:	2b00      	cmp	r3, #0
 805730e:	d01b      	beq.n	8057348 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8057310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8057312:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8057314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8057316:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8057318:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 805731a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 805731c:	2202      	movs	r2, #2
 805731e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8057322:	2300      	movs	r3, #0
 8057324:	9303      	str	r3, [sp, #12]
 8057326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8057328:	9302      	str	r3, [sp, #8]
 805732a:	f107 0314 	add.w	r3, r7, #20
 805732e:	9301      	str	r3, [sp, #4]
 8057330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8057332:	9300      	str	r3, [sp, #0]
 8057334:	683b      	ldr	r3, [r7, #0]
 8057336:	687a      	ldr	r2, [r7, #4]
 8057338:	68b9      	ldr	r1, [r7, #8]
 805733a:	68f8      	ldr	r0, [r7, #12]
 805733c:	f000 f850 	bl	80573e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8057340:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8057342:	f000 f8dd 	bl	8057500 <prvAddNewTaskToReadyList>
 8057346:	e001      	b.n	805734c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8057348:	2300      	movs	r3, #0
 805734a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 805734c:	697b      	ldr	r3, [r7, #20]
	}
 805734e:	4618      	mov	r0, r3
 8057350:	3728      	adds	r7, #40	; 0x28
 8057352:	46bd      	mov	sp, r7
 8057354:	bd80      	pop	{r7, pc}

08057356 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8057356:	b580      	push	{r7, lr}
 8057358:	b08c      	sub	sp, #48	; 0x30
 805735a:	af04      	add	r7, sp, #16
 805735c:	60f8      	str	r0, [r7, #12]
 805735e:	60b9      	str	r1, [r7, #8]
 8057360:	603b      	str	r3, [r7, #0]
 8057362:	4613      	mov	r3, r2
 8057364:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8057366:	88fb      	ldrh	r3, [r7, #6]
 8057368:	009b      	lsls	r3, r3, #2
 805736a:	4618      	mov	r0, r3
 805736c:	f001 fd9c 	bl	8058ea8 <pvPortMalloc>
 8057370:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8057372:	697b      	ldr	r3, [r7, #20]
 8057374:	2b00      	cmp	r3, #0
 8057376:	d00e      	beq.n	8057396 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8057378:	205c      	movs	r0, #92	; 0x5c
 805737a:	f001 fd95 	bl	8058ea8 <pvPortMalloc>
 805737e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8057380:	69fb      	ldr	r3, [r7, #28]
 8057382:	2b00      	cmp	r3, #0
 8057384:	d003      	beq.n	805738e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8057386:	69fb      	ldr	r3, [r7, #28]
 8057388:	697a      	ldr	r2, [r7, #20]
 805738a:	631a      	str	r2, [r3, #48]	; 0x30
 805738c:	e005      	b.n	805739a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 805738e:	6978      	ldr	r0, [r7, #20]
 8057390:	f001 fe56 	bl	8059040 <vPortFree>
 8057394:	e001      	b.n	805739a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8057396:	2300      	movs	r3, #0
 8057398:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 805739a:	69fb      	ldr	r3, [r7, #28]
 805739c:	2b00      	cmp	r3, #0
 805739e:	d017      	beq.n	80573d0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80573a0:	69fb      	ldr	r3, [r7, #28]
 80573a2:	2200      	movs	r2, #0
 80573a4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80573a8:	88fa      	ldrh	r2, [r7, #6]
 80573aa:	2300      	movs	r3, #0
 80573ac:	9303      	str	r3, [sp, #12]
 80573ae:	69fb      	ldr	r3, [r7, #28]
 80573b0:	9302      	str	r3, [sp, #8]
 80573b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80573b4:	9301      	str	r3, [sp, #4]
 80573b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80573b8:	9300      	str	r3, [sp, #0]
 80573ba:	683b      	ldr	r3, [r7, #0]
 80573bc:	68b9      	ldr	r1, [r7, #8]
 80573be:	68f8      	ldr	r0, [r7, #12]
 80573c0:	f000 f80e 	bl	80573e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80573c4:	69f8      	ldr	r0, [r7, #28]
 80573c6:	f000 f89b 	bl	8057500 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80573ca:	2301      	movs	r3, #1
 80573cc:	61bb      	str	r3, [r7, #24]
 80573ce:	e002      	b.n	80573d6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80573d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80573d4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80573d6:	69bb      	ldr	r3, [r7, #24]
	}
 80573d8:	4618      	mov	r0, r3
 80573da:	3720      	adds	r7, #32
 80573dc:	46bd      	mov	sp, r7
 80573de:	bd80      	pop	{r7, pc}

080573e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80573e0:	b580      	push	{r7, lr}
 80573e2:	b088      	sub	sp, #32
 80573e4:	af00      	add	r7, sp, #0
 80573e6:	60f8      	str	r0, [r7, #12]
 80573e8:	60b9      	str	r1, [r7, #8]
 80573ea:	607a      	str	r2, [r7, #4]
 80573ec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80573ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80573f0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80573f2:	687b      	ldr	r3, [r7, #4]
 80573f4:	009b      	lsls	r3, r3, #2
 80573f6:	461a      	mov	r2, r3
 80573f8:	21a5      	movs	r1, #165	; 0xa5
 80573fa:	f008 fddf 	bl	805ffbc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80573fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8057400:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8057402:	687b      	ldr	r3, [r7, #4]
 8057404:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8057408:	3b01      	subs	r3, #1
 805740a:	009b      	lsls	r3, r3, #2
 805740c:	4413      	add	r3, r2
 805740e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8057410:	69bb      	ldr	r3, [r7, #24]
 8057412:	f023 0307 	bic.w	r3, r3, #7
 8057416:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8057418:	69bb      	ldr	r3, [r7, #24]
 805741a:	f003 0307 	and.w	r3, r3, #7
 805741e:	2b00      	cmp	r3, #0
 8057420:	d00a      	beq.n	8057438 <prvInitialiseNewTask+0x58>
	__asm volatile
 8057422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8057426:	f383 8811 	msr	BASEPRI, r3
 805742a:	f3bf 8f6f 	isb	sy
 805742e:	f3bf 8f4f 	dsb	sy
 8057432:	617b      	str	r3, [r7, #20]
}
 8057434:	bf00      	nop
 8057436:	e7fe      	b.n	8057436 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8057438:	68bb      	ldr	r3, [r7, #8]
 805743a:	2b00      	cmp	r3, #0
 805743c:	d01f      	beq.n	805747e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 805743e:	2300      	movs	r3, #0
 8057440:	61fb      	str	r3, [r7, #28]
 8057442:	e012      	b.n	805746a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8057444:	68ba      	ldr	r2, [r7, #8]
 8057446:	69fb      	ldr	r3, [r7, #28]
 8057448:	4413      	add	r3, r2
 805744a:	7819      	ldrb	r1, [r3, #0]
 805744c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 805744e:	69fb      	ldr	r3, [r7, #28]
 8057450:	4413      	add	r3, r2
 8057452:	3334      	adds	r3, #52	; 0x34
 8057454:	460a      	mov	r2, r1
 8057456:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8057458:	68ba      	ldr	r2, [r7, #8]
 805745a:	69fb      	ldr	r3, [r7, #28]
 805745c:	4413      	add	r3, r2
 805745e:	781b      	ldrb	r3, [r3, #0]
 8057460:	2b00      	cmp	r3, #0
 8057462:	d006      	beq.n	8057472 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8057464:	69fb      	ldr	r3, [r7, #28]
 8057466:	3301      	adds	r3, #1
 8057468:	61fb      	str	r3, [r7, #28]
 805746a:	69fb      	ldr	r3, [r7, #28]
 805746c:	2b0f      	cmp	r3, #15
 805746e:	d9e9      	bls.n	8057444 <prvInitialiseNewTask+0x64>
 8057470:	e000      	b.n	8057474 <prvInitialiseNewTask+0x94>
			{
				break;
 8057472:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8057474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8057476:	2200      	movs	r2, #0
 8057478:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 805747c:	e003      	b.n	8057486 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 805747e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8057480:	2200      	movs	r2, #0
 8057482:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8057486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8057488:	2b37      	cmp	r3, #55	; 0x37
 805748a:	d901      	bls.n	8057490 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 805748c:	2337      	movs	r3, #55	; 0x37
 805748e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8057490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8057492:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8057494:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8057496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8057498:	6aba      	ldr	r2, [r7, #40]	; 0x28
 805749a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 805749c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 805749e:	2200      	movs	r2, #0
 80574a0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80574a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80574a4:	3304      	adds	r3, #4
 80574a6:	4618      	mov	r0, r3
 80574a8:	f7ff f8be 	bl	8056628 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80574ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80574ae:	3318      	adds	r3, #24
 80574b0:	4618      	mov	r0, r3
 80574b2:	f7ff f8b9 	bl	8056628 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80574b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80574b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80574ba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80574bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80574be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80574c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80574c4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80574c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80574c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80574ca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80574cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80574ce:	2200      	movs	r2, #0
 80574d0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80574d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80574d4:	2200      	movs	r2, #0
 80574d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80574da:	683a      	ldr	r2, [r7, #0]
 80574dc:	68f9      	ldr	r1, [r7, #12]
 80574de:	69b8      	ldr	r0, [r7, #24]
 80574e0:	f001 fa94 	bl	8058a0c <pxPortInitialiseStack>
 80574e4:	4602      	mov	r2, r0
 80574e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80574e8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80574ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80574ec:	2b00      	cmp	r3, #0
 80574ee:	d002      	beq.n	80574f6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80574f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80574f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80574f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80574f6:	bf00      	nop
 80574f8:	3720      	adds	r7, #32
 80574fa:	46bd      	mov	sp, r7
 80574fc:	bd80      	pop	{r7, pc}
	...

08057500 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8057500:	b580      	push	{r7, lr}
 8057502:	b082      	sub	sp, #8
 8057504:	af00      	add	r7, sp, #0
 8057506:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8057508:	f001 fbac 	bl	8058c64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 805750c:	4b2d      	ldr	r3, [pc, #180]	; (80575c4 <prvAddNewTaskToReadyList+0xc4>)
 805750e:	681b      	ldr	r3, [r3, #0]
 8057510:	3301      	adds	r3, #1
 8057512:	4a2c      	ldr	r2, [pc, #176]	; (80575c4 <prvAddNewTaskToReadyList+0xc4>)
 8057514:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8057516:	4b2c      	ldr	r3, [pc, #176]	; (80575c8 <prvAddNewTaskToReadyList+0xc8>)
 8057518:	681b      	ldr	r3, [r3, #0]
 805751a:	2b00      	cmp	r3, #0
 805751c:	d109      	bne.n	8057532 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 805751e:	4a2a      	ldr	r2, [pc, #168]	; (80575c8 <prvAddNewTaskToReadyList+0xc8>)
 8057520:	687b      	ldr	r3, [r7, #4]
 8057522:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8057524:	4b27      	ldr	r3, [pc, #156]	; (80575c4 <prvAddNewTaskToReadyList+0xc4>)
 8057526:	681b      	ldr	r3, [r3, #0]
 8057528:	2b01      	cmp	r3, #1
 805752a:	d110      	bne.n	805754e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 805752c:	f000 fc9e 	bl	8057e6c <prvInitialiseTaskLists>
 8057530:	e00d      	b.n	805754e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8057532:	4b26      	ldr	r3, [pc, #152]	; (80575cc <prvAddNewTaskToReadyList+0xcc>)
 8057534:	681b      	ldr	r3, [r3, #0]
 8057536:	2b00      	cmp	r3, #0
 8057538:	d109      	bne.n	805754e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 805753a:	4b23      	ldr	r3, [pc, #140]	; (80575c8 <prvAddNewTaskToReadyList+0xc8>)
 805753c:	681b      	ldr	r3, [r3, #0]
 805753e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8057540:	687b      	ldr	r3, [r7, #4]
 8057542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8057544:	429a      	cmp	r2, r3
 8057546:	d802      	bhi.n	805754e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8057548:	4a1f      	ldr	r2, [pc, #124]	; (80575c8 <prvAddNewTaskToReadyList+0xc8>)
 805754a:	687b      	ldr	r3, [r7, #4]
 805754c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 805754e:	4b20      	ldr	r3, [pc, #128]	; (80575d0 <prvAddNewTaskToReadyList+0xd0>)
 8057550:	681b      	ldr	r3, [r3, #0]
 8057552:	3301      	adds	r3, #1
 8057554:	4a1e      	ldr	r2, [pc, #120]	; (80575d0 <prvAddNewTaskToReadyList+0xd0>)
 8057556:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8057558:	4b1d      	ldr	r3, [pc, #116]	; (80575d0 <prvAddNewTaskToReadyList+0xd0>)
 805755a:	681a      	ldr	r2, [r3, #0]
 805755c:	687b      	ldr	r3, [r7, #4]
 805755e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8057560:	687b      	ldr	r3, [r7, #4]
 8057562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8057564:	4b1b      	ldr	r3, [pc, #108]	; (80575d4 <prvAddNewTaskToReadyList+0xd4>)
 8057566:	681b      	ldr	r3, [r3, #0]
 8057568:	429a      	cmp	r2, r3
 805756a:	d903      	bls.n	8057574 <prvAddNewTaskToReadyList+0x74>
 805756c:	687b      	ldr	r3, [r7, #4]
 805756e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8057570:	4a18      	ldr	r2, [pc, #96]	; (80575d4 <prvAddNewTaskToReadyList+0xd4>)
 8057572:	6013      	str	r3, [r2, #0]
 8057574:	687b      	ldr	r3, [r7, #4]
 8057576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8057578:	4613      	mov	r3, r2
 805757a:	009b      	lsls	r3, r3, #2
 805757c:	4413      	add	r3, r2
 805757e:	009b      	lsls	r3, r3, #2
 8057580:	4a15      	ldr	r2, [pc, #84]	; (80575d8 <prvAddNewTaskToReadyList+0xd8>)
 8057582:	441a      	add	r2, r3
 8057584:	687b      	ldr	r3, [r7, #4]
 8057586:	3304      	adds	r3, #4
 8057588:	4619      	mov	r1, r3
 805758a:	4610      	mov	r0, r2
 805758c:	f7ff f859 	bl	8056642 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8057590:	f001 fb98 	bl	8058cc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8057594:	4b0d      	ldr	r3, [pc, #52]	; (80575cc <prvAddNewTaskToReadyList+0xcc>)
 8057596:	681b      	ldr	r3, [r3, #0]
 8057598:	2b00      	cmp	r3, #0
 805759a:	d00e      	beq.n	80575ba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 805759c:	4b0a      	ldr	r3, [pc, #40]	; (80575c8 <prvAddNewTaskToReadyList+0xc8>)
 805759e:	681b      	ldr	r3, [r3, #0]
 80575a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80575a2:	687b      	ldr	r3, [r7, #4]
 80575a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80575a6:	429a      	cmp	r2, r3
 80575a8:	d207      	bcs.n	80575ba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80575aa:	4b0c      	ldr	r3, [pc, #48]	; (80575dc <prvAddNewTaskToReadyList+0xdc>)
 80575ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80575b0:	601a      	str	r2, [r3, #0]
 80575b2:	f3bf 8f4f 	dsb	sy
 80575b6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80575ba:	bf00      	nop
 80575bc:	3708      	adds	r7, #8
 80575be:	46bd      	mov	sp, r7
 80575c0:	bd80      	pop	{r7, pc}
 80575c2:	bf00      	nop
 80575c4:	20009bec 	.word	0x20009bec
 80575c8:	20009718 	.word	0x20009718
 80575cc:	20009bf8 	.word	0x20009bf8
 80575d0:	20009c08 	.word	0x20009c08
 80575d4:	20009bf4 	.word	0x20009bf4
 80575d8:	2000971c 	.word	0x2000971c
 80575dc:	e000ed04 	.word	0xe000ed04

080575e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80575e0:	b580      	push	{r7, lr}
 80575e2:	b084      	sub	sp, #16
 80575e4:	af00      	add	r7, sp, #0
 80575e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80575e8:	2300      	movs	r3, #0
 80575ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80575ec:	687b      	ldr	r3, [r7, #4]
 80575ee:	2b00      	cmp	r3, #0
 80575f0:	d017      	beq.n	8057622 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80575f2:	4b13      	ldr	r3, [pc, #76]	; (8057640 <vTaskDelay+0x60>)
 80575f4:	681b      	ldr	r3, [r3, #0]
 80575f6:	2b00      	cmp	r3, #0
 80575f8:	d00a      	beq.n	8057610 <vTaskDelay+0x30>
	__asm volatile
 80575fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80575fe:	f383 8811 	msr	BASEPRI, r3
 8057602:	f3bf 8f6f 	isb	sy
 8057606:	f3bf 8f4f 	dsb	sy
 805760a:	60bb      	str	r3, [r7, #8]
}
 805760c:	bf00      	nop
 805760e:	e7fe      	b.n	805760e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8057610:	f000 f8f6 	bl	8057800 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8057614:	2100      	movs	r1, #0
 8057616:	6878      	ldr	r0, [r7, #4]
 8057618:	f000 fd72 	bl	8058100 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 805761c:	f000 f8fe 	bl	805781c <xTaskResumeAll>
 8057620:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8057622:	68fb      	ldr	r3, [r7, #12]
 8057624:	2b00      	cmp	r3, #0
 8057626:	d107      	bne.n	8057638 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8057628:	4b06      	ldr	r3, [pc, #24]	; (8057644 <vTaskDelay+0x64>)
 805762a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 805762e:	601a      	str	r2, [r3, #0]
 8057630:	f3bf 8f4f 	dsb	sy
 8057634:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8057638:	bf00      	nop
 805763a:	3710      	adds	r7, #16
 805763c:	46bd      	mov	sp, r7
 805763e:	bd80      	pop	{r7, pc}
 8057640:	20009c14 	.word	0x20009c14
 8057644:	e000ed04 	.word	0xe000ed04

08057648 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8057648:	b580      	push	{r7, lr}
 805764a:	b084      	sub	sp, #16
 805764c:	af00      	add	r7, sp, #0
 805764e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8057650:	f001 fb08 	bl	8058c64 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8057654:	687b      	ldr	r3, [r7, #4]
 8057656:	2b00      	cmp	r3, #0
 8057658:	d102      	bne.n	8057660 <vTaskSuspend+0x18>
 805765a:	4b30      	ldr	r3, [pc, #192]	; (805771c <vTaskSuspend+0xd4>)
 805765c:	681b      	ldr	r3, [r3, #0]
 805765e:	e000      	b.n	8057662 <vTaskSuspend+0x1a>
 8057660:	687b      	ldr	r3, [r7, #4]
 8057662:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8057664:	68fb      	ldr	r3, [r7, #12]
 8057666:	3304      	adds	r3, #4
 8057668:	4618      	mov	r0, r3
 805766a:	f7ff f847 	bl	80566fc <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 805766e:	68fb      	ldr	r3, [r7, #12]
 8057670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8057672:	2b00      	cmp	r3, #0
 8057674:	d004      	beq.n	8057680 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8057676:	68fb      	ldr	r3, [r7, #12]
 8057678:	3318      	adds	r3, #24
 805767a:	4618      	mov	r0, r3
 805767c:	f7ff f83e 	bl	80566fc <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8057680:	68fb      	ldr	r3, [r7, #12]
 8057682:	3304      	adds	r3, #4
 8057684:	4619      	mov	r1, r3
 8057686:	4826      	ldr	r0, [pc, #152]	; (8057720 <vTaskSuspend+0xd8>)
 8057688:	f7fe ffdb 	bl	8056642 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 805768c:	68fb      	ldr	r3, [r7, #12]
 805768e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8057692:	b2db      	uxtb	r3, r3
 8057694:	2b01      	cmp	r3, #1
 8057696:	d103      	bne.n	80576a0 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8057698:	68fb      	ldr	r3, [r7, #12]
 805769a:	2200      	movs	r2, #0
 805769c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80576a0:	f001 fb10 	bl	8058cc4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80576a4:	4b1f      	ldr	r3, [pc, #124]	; (8057724 <vTaskSuspend+0xdc>)
 80576a6:	681b      	ldr	r3, [r3, #0]
 80576a8:	2b00      	cmp	r3, #0
 80576aa:	d005      	beq.n	80576b8 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80576ac:	f001 fada 	bl	8058c64 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80576b0:	f000 fc7a 	bl	8057fa8 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80576b4:	f001 fb06 	bl	8058cc4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80576b8:	4b18      	ldr	r3, [pc, #96]	; (805771c <vTaskSuspend+0xd4>)
 80576ba:	681b      	ldr	r3, [r3, #0]
 80576bc:	68fa      	ldr	r2, [r7, #12]
 80576be:	429a      	cmp	r2, r3
 80576c0:	d127      	bne.n	8057712 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 80576c2:	4b18      	ldr	r3, [pc, #96]	; (8057724 <vTaskSuspend+0xdc>)
 80576c4:	681b      	ldr	r3, [r3, #0]
 80576c6:	2b00      	cmp	r3, #0
 80576c8:	d017      	beq.n	80576fa <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80576ca:	4b17      	ldr	r3, [pc, #92]	; (8057728 <vTaskSuspend+0xe0>)
 80576cc:	681b      	ldr	r3, [r3, #0]
 80576ce:	2b00      	cmp	r3, #0
 80576d0:	d00a      	beq.n	80576e8 <vTaskSuspend+0xa0>
	__asm volatile
 80576d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80576d6:	f383 8811 	msr	BASEPRI, r3
 80576da:	f3bf 8f6f 	isb	sy
 80576de:	f3bf 8f4f 	dsb	sy
 80576e2:	60bb      	str	r3, [r7, #8]
}
 80576e4:	bf00      	nop
 80576e6:	e7fe      	b.n	80576e6 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 80576e8:	4b10      	ldr	r3, [pc, #64]	; (805772c <vTaskSuspend+0xe4>)
 80576ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80576ee:	601a      	str	r2, [r3, #0]
 80576f0:	f3bf 8f4f 	dsb	sy
 80576f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80576f8:	e00b      	b.n	8057712 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80576fa:	4b09      	ldr	r3, [pc, #36]	; (8057720 <vTaskSuspend+0xd8>)
 80576fc:	681a      	ldr	r2, [r3, #0]
 80576fe:	4b0c      	ldr	r3, [pc, #48]	; (8057730 <vTaskSuspend+0xe8>)
 8057700:	681b      	ldr	r3, [r3, #0]
 8057702:	429a      	cmp	r2, r3
 8057704:	d103      	bne.n	805770e <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8057706:	4b05      	ldr	r3, [pc, #20]	; (805771c <vTaskSuspend+0xd4>)
 8057708:	2200      	movs	r2, #0
 805770a:	601a      	str	r2, [r3, #0]
	}
 805770c:	e001      	b.n	8057712 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 805770e:	f000 f9ff 	bl	8057b10 <vTaskSwitchContext>
	}
 8057712:	bf00      	nop
 8057714:	3710      	adds	r7, #16
 8057716:	46bd      	mov	sp, r7
 8057718:	bd80      	pop	{r7, pc}
 805771a:	bf00      	nop
 805771c:	20009718 	.word	0x20009718
 8057720:	20009bd8 	.word	0x20009bd8
 8057724:	20009bf8 	.word	0x20009bf8
 8057728:	20009c14 	.word	0x20009c14
 805772c:	e000ed04 	.word	0xe000ed04
 8057730:	20009bec 	.word	0x20009bec

08057734 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8057734:	b580      	push	{r7, lr}
 8057736:	b08a      	sub	sp, #40	; 0x28
 8057738:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 805773a:	2300      	movs	r3, #0
 805773c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 805773e:	2300      	movs	r3, #0
 8057740:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8057742:	463a      	mov	r2, r7
 8057744:	1d39      	adds	r1, r7, #4
 8057746:	f107 0308 	add.w	r3, r7, #8
 805774a:	4618      	mov	r0, r3
 805774c:	f7fe ff18 	bl	8056580 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8057750:	6839      	ldr	r1, [r7, #0]
 8057752:	687b      	ldr	r3, [r7, #4]
 8057754:	68ba      	ldr	r2, [r7, #8]
 8057756:	9202      	str	r2, [sp, #8]
 8057758:	9301      	str	r3, [sp, #4]
 805775a:	2300      	movs	r3, #0
 805775c:	9300      	str	r3, [sp, #0]
 805775e:	2300      	movs	r3, #0
 8057760:	460a      	mov	r2, r1
 8057762:	4921      	ldr	r1, [pc, #132]	; (80577e8 <vTaskStartScheduler+0xb4>)
 8057764:	4821      	ldr	r0, [pc, #132]	; (80577ec <vTaskStartScheduler+0xb8>)
 8057766:	f7ff fd99 	bl	805729c <xTaskCreateStatic>
 805776a:	4603      	mov	r3, r0
 805776c:	4a20      	ldr	r2, [pc, #128]	; (80577f0 <vTaskStartScheduler+0xbc>)
 805776e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8057770:	4b1f      	ldr	r3, [pc, #124]	; (80577f0 <vTaskStartScheduler+0xbc>)
 8057772:	681b      	ldr	r3, [r3, #0]
 8057774:	2b00      	cmp	r3, #0
 8057776:	d002      	beq.n	805777e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8057778:	2301      	movs	r3, #1
 805777a:	617b      	str	r3, [r7, #20]
 805777c:	e001      	b.n	8057782 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 805777e:	2300      	movs	r3, #0
 8057780:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8057782:	697b      	ldr	r3, [r7, #20]
 8057784:	2b01      	cmp	r3, #1
 8057786:	d102      	bne.n	805778e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8057788:	f000 fd0e 	bl	80581a8 <xTimerCreateTimerTask>
 805778c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 805778e:	697b      	ldr	r3, [r7, #20]
 8057790:	2b01      	cmp	r3, #1
 8057792:	d116      	bne.n	80577c2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8057794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8057798:	f383 8811 	msr	BASEPRI, r3
 805779c:	f3bf 8f6f 	isb	sy
 80577a0:	f3bf 8f4f 	dsb	sy
 80577a4:	613b      	str	r3, [r7, #16]
}
 80577a6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80577a8:	4b12      	ldr	r3, [pc, #72]	; (80577f4 <vTaskStartScheduler+0xc0>)
 80577aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80577ae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80577b0:	4b11      	ldr	r3, [pc, #68]	; (80577f8 <vTaskStartScheduler+0xc4>)
 80577b2:	2201      	movs	r2, #1
 80577b4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80577b6:	4b11      	ldr	r3, [pc, #68]	; (80577fc <vTaskStartScheduler+0xc8>)
 80577b8:	2200      	movs	r2, #0
 80577ba:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80577bc:	f001 f9b0 	bl	8058b20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80577c0:	e00e      	b.n	80577e0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80577c2:	697b      	ldr	r3, [r7, #20]
 80577c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80577c8:	d10a      	bne.n	80577e0 <vTaskStartScheduler+0xac>
	__asm volatile
 80577ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80577ce:	f383 8811 	msr	BASEPRI, r3
 80577d2:	f3bf 8f6f 	isb	sy
 80577d6:	f3bf 8f4f 	dsb	sy
 80577da:	60fb      	str	r3, [r7, #12]
}
 80577dc:	bf00      	nop
 80577de:	e7fe      	b.n	80577de <vTaskStartScheduler+0xaa>
}
 80577e0:	bf00      	nop
 80577e2:	3718      	adds	r7, #24
 80577e4:	46bd      	mov	sp, r7
 80577e6:	bd80      	pop	{r7, pc}
 80577e8:	0806776c 	.word	0x0806776c
 80577ec:	08057e3d 	.word	0x08057e3d
 80577f0:	20009c10 	.word	0x20009c10
 80577f4:	20009c0c 	.word	0x20009c0c
 80577f8:	20009bf8 	.word	0x20009bf8
 80577fc:	20009bf0 	.word	0x20009bf0

08057800 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8057800:	b480      	push	{r7}
 8057802:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8057804:	4b04      	ldr	r3, [pc, #16]	; (8057818 <vTaskSuspendAll+0x18>)
 8057806:	681b      	ldr	r3, [r3, #0]
 8057808:	3301      	adds	r3, #1
 805780a:	4a03      	ldr	r2, [pc, #12]	; (8057818 <vTaskSuspendAll+0x18>)
 805780c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 805780e:	bf00      	nop
 8057810:	46bd      	mov	sp, r7
 8057812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8057816:	4770      	bx	lr
 8057818:	20009c14 	.word	0x20009c14

0805781c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 805781c:	b580      	push	{r7, lr}
 805781e:	b084      	sub	sp, #16
 8057820:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8057822:	2300      	movs	r3, #0
 8057824:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8057826:	2300      	movs	r3, #0
 8057828:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 805782a:	4b42      	ldr	r3, [pc, #264]	; (8057934 <xTaskResumeAll+0x118>)
 805782c:	681b      	ldr	r3, [r3, #0]
 805782e:	2b00      	cmp	r3, #0
 8057830:	d10a      	bne.n	8057848 <xTaskResumeAll+0x2c>
	__asm volatile
 8057832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8057836:	f383 8811 	msr	BASEPRI, r3
 805783a:	f3bf 8f6f 	isb	sy
 805783e:	f3bf 8f4f 	dsb	sy
 8057842:	603b      	str	r3, [r7, #0]
}
 8057844:	bf00      	nop
 8057846:	e7fe      	b.n	8057846 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8057848:	f001 fa0c 	bl	8058c64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 805784c:	4b39      	ldr	r3, [pc, #228]	; (8057934 <xTaskResumeAll+0x118>)
 805784e:	681b      	ldr	r3, [r3, #0]
 8057850:	3b01      	subs	r3, #1
 8057852:	4a38      	ldr	r2, [pc, #224]	; (8057934 <xTaskResumeAll+0x118>)
 8057854:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8057856:	4b37      	ldr	r3, [pc, #220]	; (8057934 <xTaskResumeAll+0x118>)
 8057858:	681b      	ldr	r3, [r3, #0]
 805785a:	2b00      	cmp	r3, #0
 805785c:	d162      	bne.n	8057924 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 805785e:	4b36      	ldr	r3, [pc, #216]	; (8057938 <xTaskResumeAll+0x11c>)
 8057860:	681b      	ldr	r3, [r3, #0]
 8057862:	2b00      	cmp	r3, #0
 8057864:	d05e      	beq.n	8057924 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8057866:	e02f      	b.n	80578c8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8057868:	4b34      	ldr	r3, [pc, #208]	; (805793c <xTaskResumeAll+0x120>)
 805786a:	68db      	ldr	r3, [r3, #12]
 805786c:	68db      	ldr	r3, [r3, #12]
 805786e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8057870:	68fb      	ldr	r3, [r7, #12]
 8057872:	3318      	adds	r3, #24
 8057874:	4618      	mov	r0, r3
 8057876:	f7fe ff41 	bl	80566fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 805787a:	68fb      	ldr	r3, [r7, #12]
 805787c:	3304      	adds	r3, #4
 805787e:	4618      	mov	r0, r3
 8057880:	f7fe ff3c 	bl	80566fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8057884:	68fb      	ldr	r3, [r7, #12]
 8057886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8057888:	4b2d      	ldr	r3, [pc, #180]	; (8057940 <xTaskResumeAll+0x124>)
 805788a:	681b      	ldr	r3, [r3, #0]
 805788c:	429a      	cmp	r2, r3
 805788e:	d903      	bls.n	8057898 <xTaskResumeAll+0x7c>
 8057890:	68fb      	ldr	r3, [r7, #12]
 8057892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8057894:	4a2a      	ldr	r2, [pc, #168]	; (8057940 <xTaskResumeAll+0x124>)
 8057896:	6013      	str	r3, [r2, #0]
 8057898:	68fb      	ldr	r3, [r7, #12]
 805789a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 805789c:	4613      	mov	r3, r2
 805789e:	009b      	lsls	r3, r3, #2
 80578a0:	4413      	add	r3, r2
 80578a2:	009b      	lsls	r3, r3, #2
 80578a4:	4a27      	ldr	r2, [pc, #156]	; (8057944 <xTaskResumeAll+0x128>)
 80578a6:	441a      	add	r2, r3
 80578a8:	68fb      	ldr	r3, [r7, #12]
 80578aa:	3304      	adds	r3, #4
 80578ac:	4619      	mov	r1, r3
 80578ae:	4610      	mov	r0, r2
 80578b0:	f7fe fec7 	bl	8056642 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80578b4:	68fb      	ldr	r3, [r7, #12]
 80578b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80578b8:	4b23      	ldr	r3, [pc, #140]	; (8057948 <xTaskResumeAll+0x12c>)
 80578ba:	681b      	ldr	r3, [r3, #0]
 80578bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80578be:	429a      	cmp	r2, r3
 80578c0:	d302      	bcc.n	80578c8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80578c2:	4b22      	ldr	r3, [pc, #136]	; (805794c <xTaskResumeAll+0x130>)
 80578c4:	2201      	movs	r2, #1
 80578c6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80578c8:	4b1c      	ldr	r3, [pc, #112]	; (805793c <xTaskResumeAll+0x120>)
 80578ca:	681b      	ldr	r3, [r3, #0]
 80578cc:	2b00      	cmp	r3, #0
 80578ce:	d1cb      	bne.n	8057868 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80578d0:	68fb      	ldr	r3, [r7, #12]
 80578d2:	2b00      	cmp	r3, #0
 80578d4:	d001      	beq.n	80578da <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80578d6:	f000 fb67 	bl	8057fa8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80578da:	4b1d      	ldr	r3, [pc, #116]	; (8057950 <xTaskResumeAll+0x134>)
 80578dc:	681b      	ldr	r3, [r3, #0]
 80578de:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80578e0:	687b      	ldr	r3, [r7, #4]
 80578e2:	2b00      	cmp	r3, #0
 80578e4:	d010      	beq.n	8057908 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80578e6:	f000 f859 	bl	805799c <xTaskIncrementTick>
 80578ea:	4603      	mov	r3, r0
 80578ec:	2b00      	cmp	r3, #0
 80578ee:	d002      	beq.n	80578f6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80578f0:	4b16      	ldr	r3, [pc, #88]	; (805794c <xTaskResumeAll+0x130>)
 80578f2:	2201      	movs	r2, #1
 80578f4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80578f6:	687b      	ldr	r3, [r7, #4]
 80578f8:	3b01      	subs	r3, #1
 80578fa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80578fc:	687b      	ldr	r3, [r7, #4]
 80578fe:	2b00      	cmp	r3, #0
 8057900:	d1f1      	bne.n	80578e6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8057902:	4b13      	ldr	r3, [pc, #76]	; (8057950 <xTaskResumeAll+0x134>)
 8057904:	2200      	movs	r2, #0
 8057906:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8057908:	4b10      	ldr	r3, [pc, #64]	; (805794c <xTaskResumeAll+0x130>)
 805790a:	681b      	ldr	r3, [r3, #0]
 805790c:	2b00      	cmp	r3, #0
 805790e:	d009      	beq.n	8057924 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8057910:	2301      	movs	r3, #1
 8057912:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8057914:	4b0f      	ldr	r3, [pc, #60]	; (8057954 <xTaskResumeAll+0x138>)
 8057916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 805791a:	601a      	str	r2, [r3, #0]
 805791c:	f3bf 8f4f 	dsb	sy
 8057920:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8057924:	f001 f9ce 	bl	8058cc4 <vPortExitCritical>

	return xAlreadyYielded;
 8057928:	68bb      	ldr	r3, [r7, #8]
}
 805792a:	4618      	mov	r0, r3
 805792c:	3710      	adds	r7, #16
 805792e:	46bd      	mov	sp, r7
 8057930:	bd80      	pop	{r7, pc}
 8057932:	bf00      	nop
 8057934:	20009c14 	.word	0x20009c14
 8057938:	20009bec 	.word	0x20009bec
 805793c:	20009bac 	.word	0x20009bac
 8057940:	20009bf4 	.word	0x20009bf4
 8057944:	2000971c 	.word	0x2000971c
 8057948:	20009718 	.word	0x20009718
 805794c:	20009c00 	.word	0x20009c00
 8057950:	20009bfc 	.word	0x20009bfc
 8057954:	e000ed04 	.word	0xe000ed04

08057958 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8057958:	b480      	push	{r7}
 805795a:	b083      	sub	sp, #12
 805795c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 805795e:	4b05      	ldr	r3, [pc, #20]	; (8057974 <xTaskGetTickCount+0x1c>)
 8057960:	681b      	ldr	r3, [r3, #0]
 8057962:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8057964:	687b      	ldr	r3, [r7, #4]
}
 8057966:	4618      	mov	r0, r3
 8057968:	370c      	adds	r7, #12
 805796a:	46bd      	mov	sp, r7
 805796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8057970:	4770      	bx	lr
 8057972:	bf00      	nop
 8057974:	20009bf0 	.word	0x20009bf0

08057978 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8057978:	b580      	push	{r7, lr}
 805797a:	b082      	sub	sp, #8
 805797c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 805797e:	f001 fa53 	bl	8058e28 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8057982:	2300      	movs	r3, #0
 8057984:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8057986:	4b04      	ldr	r3, [pc, #16]	; (8057998 <xTaskGetTickCountFromISR+0x20>)
 8057988:	681b      	ldr	r3, [r3, #0]
 805798a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 805798c:	683b      	ldr	r3, [r7, #0]
}
 805798e:	4618      	mov	r0, r3
 8057990:	3708      	adds	r7, #8
 8057992:	46bd      	mov	sp, r7
 8057994:	bd80      	pop	{r7, pc}
 8057996:	bf00      	nop
 8057998:	20009bf0 	.word	0x20009bf0

0805799c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 805799c:	b580      	push	{r7, lr}
 805799e:	b086      	sub	sp, #24
 80579a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80579a2:	2300      	movs	r3, #0
 80579a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80579a6:	4b4f      	ldr	r3, [pc, #316]	; (8057ae4 <xTaskIncrementTick+0x148>)
 80579a8:	681b      	ldr	r3, [r3, #0]
 80579aa:	2b00      	cmp	r3, #0
 80579ac:	f040 808f 	bne.w	8057ace <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80579b0:	4b4d      	ldr	r3, [pc, #308]	; (8057ae8 <xTaskIncrementTick+0x14c>)
 80579b2:	681b      	ldr	r3, [r3, #0]
 80579b4:	3301      	adds	r3, #1
 80579b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80579b8:	4a4b      	ldr	r2, [pc, #300]	; (8057ae8 <xTaskIncrementTick+0x14c>)
 80579ba:	693b      	ldr	r3, [r7, #16]
 80579bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80579be:	693b      	ldr	r3, [r7, #16]
 80579c0:	2b00      	cmp	r3, #0
 80579c2:	d120      	bne.n	8057a06 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80579c4:	4b49      	ldr	r3, [pc, #292]	; (8057aec <xTaskIncrementTick+0x150>)
 80579c6:	681b      	ldr	r3, [r3, #0]
 80579c8:	681b      	ldr	r3, [r3, #0]
 80579ca:	2b00      	cmp	r3, #0
 80579cc:	d00a      	beq.n	80579e4 <xTaskIncrementTick+0x48>
	__asm volatile
 80579ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80579d2:	f383 8811 	msr	BASEPRI, r3
 80579d6:	f3bf 8f6f 	isb	sy
 80579da:	f3bf 8f4f 	dsb	sy
 80579de:	603b      	str	r3, [r7, #0]
}
 80579e0:	bf00      	nop
 80579e2:	e7fe      	b.n	80579e2 <xTaskIncrementTick+0x46>
 80579e4:	4b41      	ldr	r3, [pc, #260]	; (8057aec <xTaskIncrementTick+0x150>)
 80579e6:	681b      	ldr	r3, [r3, #0]
 80579e8:	60fb      	str	r3, [r7, #12]
 80579ea:	4b41      	ldr	r3, [pc, #260]	; (8057af0 <xTaskIncrementTick+0x154>)
 80579ec:	681b      	ldr	r3, [r3, #0]
 80579ee:	4a3f      	ldr	r2, [pc, #252]	; (8057aec <xTaskIncrementTick+0x150>)
 80579f0:	6013      	str	r3, [r2, #0]
 80579f2:	4a3f      	ldr	r2, [pc, #252]	; (8057af0 <xTaskIncrementTick+0x154>)
 80579f4:	68fb      	ldr	r3, [r7, #12]
 80579f6:	6013      	str	r3, [r2, #0]
 80579f8:	4b3e      	ldr	r3, [pc, #248]	; (8057af4 <xTaskIncrementTick+0x158>)
 80579fa:	681b      	ldr	r3, [r3, #0]
 80579fc:	3301      	adds	r3, #1
 80579fe:	4a3d      	ldr	r2, [pc, #244]	; (8057af4 <xTaskIncrementTick+0x158>)
 8057a00:	6013      	str	r3, [r2, #0]
 8057a02:	f000 fad1 	bl	8057fa8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8057a06:	4b3c      	ldr	r3, [pc, #240]	; (8057af8 <xTaskIncrementTick+0x15c>)
 8057a08:	681b      	ldr	r3, [r3, #0]
 8057a0a:	693a      	ldr	r2, [r7, #16]
 8057a0c:	429a      	cmp	r2, r3
 8057a0e:	d349      	bcc.n	8057aa4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8057a10:	4b36      	ldr	r3, [pc, #216]	; (8057aec <xTaskIncrementTick+0x150>)
 8057a12:	681b      	ldr	r3, [r3, #0]
 8057a14:	681b      	ldr	r3, [r3, #0]
 8057a16:	2b00      	cmp	r3, #0
 8057a18:	d104      	bne.n	8057a24 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8057a1a:	4b37      	ldr	r3, [pc, #220]	; (8057af8 <xTaskIncrementTick+0x15c>)
 8057a1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8057a20:	601a      	str	r2, [r3, #0]
					break;
 8057a22:	e03f      	b.n	8057aa4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8057a24:	4b31      	ldr	r3, [pc, #196]	; (8057aec <xTaskIncrementTick+0x150>)
 8057a26:	681b      	ldr	r3, [r3, #0]
 8057a28:	68db      	ldr	r3, [r3, #12]
 8057a2a:	68db      	ldr	r3, [r3, #12]
 8057a2c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8057a2e:	68bb      	ldr	r3, [r7, #8]
 8057a30:	685b      	ldr	r3, [r3, #4]
 8057a32:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8057a34:	693a      	ldr	r2, [r7, #16]
 8057a36:	687b      	ldr	r3, [r7, #4]
 8057a38:	429a      	cmp	r2, r3
 8057a3a:	d203      	bcs.n	8057a44 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8057a3c:	4a2e      	ldr	r2, [pc, #184]	; (8057af8 <xTaskIncrementTick+0x15c>)
 8057a3e:	687b      	ldr	r3, [r7, #4]
 8057a40:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8057a42:	e02f      	b.n	8057aa4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8057a44:	68bb      	ldr	r3, [r7, #8]
 8057a46:	3304      	adds	r3, #4
 8057a48:	4618      	mov	r0, r3
 8057a4a:	f7fe fe57 	bl	80566fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8057a4e:	68bb      	ldr	r3, [r7, #8]
 8057a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8057a52:	2b00      	cmp	r3, #0
 8057a54:	d004      	beq.n	8057a60 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8057a56:	68bb      	ldr	r3, [r7, #8]
 8057a58:	3318      	adds	r3, #24
 8057a5a:	4618      	mov	r0, r3
 8057a5c:	f7fe fe4e 	bl	80566fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8057a60:	68bb      	ldr	r3, [r7, #8]
 8057a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8057a64:	4b25      	ldr	r3, [pc, #148]	; (8057afc <xTaskIncrementTick+0x160>)
 8057a66:	681b      	ldr	r3, [r3, #0]
 8057a68:	429a      	cmp	r2, r3
 8057a6a:	d903      	bls.n	8057a74 <xTaskIncrementTick+0xd8>
 8057a6c:	68bb      	ldr	r3, [r7, #8]
 8057a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8057a70:	4a22      	ldr	r2, [pc, #136]	; (8057afc <xTaskIncrementTick+0x160>)
 8057a72:	6013      	str	r3, [r2, #0]
 8057a74:	68bb      	ldr	r3, [r7, #8]
 8057a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8057a78:	4613      	mov	r3, r2
 8057a7a:	009b      	lsls	r3, r3, #2
 8057a7c:	4413      	add	r3, r2
 8057a7e:	009b      	lsls	r3, r3, #2
 8057a80:	4a1f      	ldr	r2, [pc, #124]	; (8057b00 <xTaskIncrementTick+0x164>)
 8057a82:	441a      	add	r2, r3
 8057a84:	68bb      	ldr	r3, [r7, #8]
 8057a86:	3304      	adds	r3, #4
 8057a88:	4619      	mov	r1, r3
 8057a8a:	4610      	mov	r0, r2
 8057a8c:	f7fe fdd9 	bl	8056642 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8057a90:	68bb      	ldr	r3, [r7, #8]
 8057a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8057a94:	4b1b      	ldr	r3, [pc, #108]	; (8057b04 <xTaskIncrementTick+0x168>)
 8057a96:	681b      	ldr	r3, [r3, #0]
 8057a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8057a9a:	429a      	cmp	r2, r3
 8057a9c:	d3b8      	bcc.n	8057a10 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8057a9e:	2301      	movs	r3, #1
 8057aa0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8057aa2:	e7b5      	b.n	8057a10 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8057aa4:	4b17      	ldr	r3, [pc, #92]	; (8057b04 <xTaskIncrementTick+0x168>)
 8057aa6:	681b      	ldr	r3, [r3, #0]
 8057aa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8057aaa:	4915      	ldr	r1, [pc, #84]	; (8057b00 <xTaskIncrementTick+0x164>)
 8057aac:	4613      	mov	r3, r2
 8057aae:	009b      	lsls	r3, r3, #2
 8057ab0:	4413      	add	r3, r2
 8057ab2:	009b      	lsls	r3, r3, #2
 8057ab4:	440b      	add	r3, r1
 8057ab6:	681b      	ldr	r3, [r3, #0]
 8057ab8:	2b01      	cmp	r3, #1
 8057aba:	d901      	bls.n	8057ac0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8057abc:	2301      	movs	r3, #1
 8057abe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8057ac0:	4b11      	ldr	r3, [pc, #68]	; (8057b08 <xTaskIncrementTick+0x16c>)
 8057ac2:	681b      	ldr	r3, [r3, #0]
 8057ac4:	2b00      	cmp	r3, #0
 8057ac6:	d007      	beq.n	8057ad8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8057ac8:	2301      	movs	r3, #1
 8057aca:	617b      	str	r3, [r7, #20]
 8057acc:	e004      	b.n	8057ad8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8057ace:	4b0f      	ldr	r3, [pc, #60]	; (8057b0c <xTaskIncrementTick+0x170>)
 8057ad0:	681b      	ldr	r3, [r3, #0]
 8057ad2:	3301      	adds	r3, #1
 8057ad4:	4a0d      	ldr	r2, [pc, #52]	; (8057b0c <xTaskIncrementTick+0x170>)
 8057ad6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8057ad8:	697b      	ldr	r3, [r7, #20]
}
 8057ada:	4618      	mov	r0, r3
 8057adc:	3718      	adds	r7, #24
 8057ade:	46bd      	mov	sp, r7
 8057ae0:	bd80      	pop	{r7, pc}
 8057ae2:	bf00      	nop
 8057ae4:	20009c14 	.word	0x20009c14
 8057ae8:	20009bf0 	.word	0x20009bf0
 8057aec:	20009ba4 	.word	0x20009ba4
 8057af0:	20009ba8 	.word	0x20009ba8
 8057af4:	20009c04 	.word	0x20009c04
 8057af8:	20009c0c 	.word	0x20009c0c
 8057afc:	20009bf4 	.word	0x20009bf4
 8057b00:	2000971c 	.word	0x2000971c
 8057b04:	20009718 	.word	0x20009718
 8057b08:	20009c00 	.word	0x20009c00
 8057b0c:	20009bfc 	.word	0x20009bfc

08057b10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8057b10:	b480      	push	{r7}
 8057b12:	b085      	sub	sp, #20
 8057b14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8057b16:	4b28      	ldr	r3, [pc, #160]	; (8057bb8 <vTaskSwitchContext+0xa8>)
 8057b18:	681b      	ldr	r3, [r3, #0]
 8057b1a:	2b00      	cmp	r3, #0
 8057b1c:	d003      	beq.n	8057b26 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8057b1e:	4b27      	ldr	r3, [pc, #156]	; (8057bbc <vTaskSwitchContext+0xac>)
 8057b20:	2201      	movs	r2, #1
 8057b22:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8057b24:	e041      	b.n	8057baa <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8057b26:	4b25      	ldr	r3, [pc, #148]	; (8057bbc <vTaskSwitchContext+0xac>)
 8057b28:	2200      	movs	r2, #0
 8057b2a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8057b2c:	4b24      	ldr	r3, [pc, #144]	; (8057bc0 <vTaskSwitchContext+0xb0>)
 8057b2e:	681b      	ldr	r3, [r3, #0]
 8057b30:	60fb      	str	r3, [r7, #12]
 8057b32:	e010      	b.n	8057b56 <vTaskSwitchContext+0x46>
 8057b34:	68fb      	ldr	r3, [r7, #12]
 8057b36:	2b00      	cmp	r3, #0
 8057b38:	d10a      	bne.n	8057b50 <vTaskSwitchContext+0x40>
	__asm volatile
 8057b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8057b3e:	f383 8811 	msr	BASEPRI, r3
 8057b42:	f3bf 8f6f 	isb	sy
 8057b46:	f3bf 8f4f 	dsb	sy
 8057b4a:	607b      	str	r3, [r7, #4]
}
 8057b4c:	bf00      	nop
 8057b4e:	e7fe      	b.n	8057b4e <vTaskSwitchContext+0x3e>
 8057b50:	68fb      	ldr	r3, [r7, #12]
 8057b52:	3b01      	subs	r3, #1
 8057b54:	60fb      	str	r3, [r7, #12]
 8057b56:	491b      	ldr	r1, [pc, #108]	; (8057bc4 <vTaskSwitchContext+0xb4>)
 8057b58:	68fa      	ldr	r2, [r7, #12]
 8057b5a:	4613      	mov	r3, r2
 8057b5c:	009b      	lsls	r3, r3, #2
 8057b5e:	4413      	add	r3, r2
 8057b60:	009b      	lsls	r3, r3, #2
 8057b62:	440b      	add	r3, r1
 8057b64:	681b      	ldr	r3, [r3, #0]
 8057b66:	2b00      	cmp	r3, #0
 8057b68:	d0e4      	beq.n	8057b34 <vTaskSwitchContext+0x24>
 8057b6a:	68fa      	ldr	r2, [r7, #12]
 8057b6c:	4613      	mov	r3, r2
 8057b6e:	009b      	lsls	r3, r3, #2
 8057b70:	4413      	add	r3, r2
 8057b72:	009b      	lsls	r3, r3, #2
 8057b74:	4a13      	ldr	r2, [pc, #76]	; (8057bc4 <vTaskSwitchContext+0xb4>)
 8057b76:	4413      	add	r3, r2
 8057b78:	60bb      	str	r3, [r7, #8]
 8057b7a:	68bb      	ldr	r3, [r7, #8]
 8057b7c:	685b      	ldr	r3, [r3, #4]
 8057b7e:	685a      	ldr	r2, [r3, #4]
 8057b80:	68bb      	ldr	r3, [r7, #8]
 8057b82:	605a      	str	r2, [r3, #4]
 8057b84:	68bb      	ldr	r3, [r7, #8]
 8057b86:	685a      	ldr	r2, [r3, #4]
 8057b88:	68bb      	ldr	r3, [r7, #8]
 8057b8a:	3308      	adds	r3, #8
 8057b8c:	429a      	cmp	r2, r3
 8057b8e:	d104      	bne.n	8057b9a <vTaskSwitchContext+0x8a>
 8057b90:	68bb      	ldr	r3, [r7, #8]
 8057b92:	685b      	ldr	r3, [r3, #4]
 8057b94:	685a      	ldr	r2, [r3, #4]
 8057b96:	68bb      	ldr	r3, [r7, #8]
 8057b98:	605a      	str	r2, [r3, #4]
 8057b9a:	68bb      	ldr	r3, [r7, #8]
 8057b9c:	685b      	ldr	r3, [r3, #4]
 8057b9e:	68db      	ldr	r3, [r3, #12]
 8057ba0:	4a09      	ldr	r2, [pc, #36]	; (8057bc8 <vTaskSwitchContext+0xb8>)
 8057ba2:	6013      	str	r3, [r2, #0]
 8057ba4:	4a06      	ldr	r2, [pc, #24]	; (8057bc0 <vTaskSwitchContext+0xb0>)
 8057ba6:	68fb      	ldr	r3, [r7, #12]
 8057ba8:	6013      	str	r3, [r2, #0]
}
 8057baa:	bf00      	nop
 8057bac:	3714      	adds	r7, #20
 8057bae:	46bd      	mov	sp, r7
 8057bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8057bb4:	4770      	bx	lr
 8057bb6:	bf00      	nop
 8057bb8:	20009c14 	.word	0x20009c14
 8057bbc:	20009c00 	.word	0x20009c00
 8057bc0:	20009bf4 	.word	0x20009bf4
 8057bc4:	2000971c 	.word	0x2000971c
 8057bc8:	20009718 	.word	0x20009718

08057bcc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8057bcc:	b580      	push	{r7, lr}
 8057bce:	b084      	sub	sp, #16
 8057bd0:	af00      	add	r7, sp, #0
 8057bd2:	6078      	str	r0, [r7, #4]
 8057bd4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8057bd6:	687b      	ldr	r3, [r7, #4]
 8057bd8:	2b00      	cmp	r3, #0
 8057bda:	d10a      	bne.n	8057bf2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8057bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8057be0:	f383 8811 	msr	BASEPRI, r3
 8057be4:	f3bf 8f6f 	isb	sy
 8057be8:	f3bf 8f4f 	dsb	sy
 8057bec:	60fb      	str	r3, [r7, #12]
}
 8057bee:	bf00      	nop
 8057bf0:	e7fe      	b.n	8057bf0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8057bf2:	4b07      	ldr	r3, [pc, #28]	; (8057c10 <vTaskPlaceOnEventList+0x44>)
 8057bf4:	681b      	ldr	r3, [r3, #0]
 8057bf6:	3318      	adds	r3, #24
 8057bf8:	4619      	mov	r1, r3
 8057bfa:	6878      	ldr	r0, [r7, #4]
 8057bfc:	f7fe fd45 	bl	805668a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8057c00:	2101      	movs	r1, #1
 8057c02:	6838      	ldr	r0, [r7, #0]
 8057c04:	f000 fa7c 	bl	8058100 <prvAddCurrentTaskToDelayedList>
}
 8057c08:	bf00      	nop
 8057c0a:	3710      	adds	r7, #16
 8057c0c:	46bd      	mov	sp, r7
 8057c0e:	bd80      	pop	{r7, pc}
 8057c10:	20009718 	.word	0x20009718

08057c14 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8057c14:	b580      	push	{r7, lr}
 8057c16:	b086      	sub	sp, #24
 8057c18:	af00      	add	r7, sp, #0
 8057c1a:	60f8      	str	r0, [r7, #12]
 8057c1c:	60b9      	str	r1, [r7, #8]
 8057c1e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8057c20:	68fb      	ldr	r3, [r7, #12]
 8057c22:	2b00      	cmp	r3, #0
 8057c24:	d10a      	bne.n	8057c3c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8057c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8057c2a:	f383 8811 	msr	BASEPRI, r3
 8057c2e:	f3bf 8f6f 	isb	sy
 8057c32:	f3bf 8f4f 	dsb	sy
 8057c36:	617b      	str	r3, [r7, #20]
}
 8057c38:	bf00      	nop
 8057c3a:	e7fe      	b.n	8057c3a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8057c3c:	4b0a      	ldr	r3, [pc, #40]	; (8057c68 <vTaskPlaceOnEventListRestricted+0x54>)
 8057c3e:	681b      	ldr	r3, [r3, #0]
 8057c40:	3318      	adds	r3, #24
 8057c42:	4619      	mov	r1, r3
 8057c44:	68f8      	ldr	r0, [r7, #12]
 8057c46:	f7fe fcfc 	bl	8056642 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8057c4a:	687b      	ldr	r3, [r7, #4]
 8057c4c:	2b00      	cmp	r3, #0
 8057c4e:	d002      	beq.n	8057c56 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8057c50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8057c54:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8057c56:	6879      	ldr	r1, [r7, #4]
 8057c58:	68b8      	ldr	r0, [r7, #8]
 8057c5a:	f000 fa51 	bl	8058100 <prvAddCurrentTaskToDelayedList>
	}
 8057c5e:	bf00      	nop
 8057c60:	3718      	adds	r7, #24
 8057c62:	46bd      	mov	sp, r7
 8057c64:	bd80      	pop	{r7, pc}
 8057c66:	bf00      	nop
 8057c68:	20009718 	.word	0x20009718

08057c6c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8057c6c:	b580      	push	{r7, lr}
 8057c6e:	b086      	sub	sp, #24
 8057c70:	af00      	add	r7, sp, #0
 8057c72:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8057c74:	687b      	ldr	r3, [r7, #4]
 8057c76:	68db      	ldr	r3, [r3, #12]
 8057c78:	68db      	ldr	r3, [r3, #12]
 8057c7a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8057c7c:	693b      	ldr	r3, [r7, #16]
 8057c7e:	2b00      	cmp	r3, #0
 8057c80:	d10a      	bne.n	8057c98 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8057c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8057c86:	f383 8811 	msr	BASEPRI, r3
 8057c8a:	f3bf 8f6f 	isb	sy
 8057c8e:	f3bf 8f4f 	dsb	sy
 8057c92:	60fb      	str	r3, [r7, #12]
}
 8057c94:	bf00      	nop
 8057c96:	e7fe      	b.n	8057c96 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8057c98:	693b      	ldr	r3, [r7, #16]
 8057c9a:	3318      	adds	r3, #24
 8057c9c:	4618      	mov	r0, r3
 8057c9e:	f7fe fd2d 	bl	80566fc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8057ca2:	4b1e      	ldr	r3, [pc, #120]	; (8057d1c <xTaskRemoveFromEventList+0xb0>)
 8057ca4:	681b      	ldr	r3, [r3, #0]
 8057ca6:	2b00      	cmp	r3, #0
 8057ca8:	d11d      	bne.n	8057ce6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8057caa:	693b      	ldr	r3, [r7, #16]
 8057cac:	3304      	adds	r3, #4
 8057cae:	4618      	mov	r0, r3
 8057cb0:	f7fe fd24 	bl	80566fc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8057cb4:	693b      	ldr	r3, [r7, #16]
 8057cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8057cb8:	4b19      	ldr	r3, [pc, #100]	; (8057d20 <xTaskRemoveFromEventList+0xb4>)
 8057cba:	681b      	ldr	r3, [r3, #0]
 8057cbc:	429a      	cmp	r2, r3
 8057cbe:	d903      	bls.n	8057cc8 <xTaskRemoveFromEventList+0x5c>
 8057cc0:	693b      	ldr	r3, [r7, #16]
 8057cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8057cc4:	4a16      	ldr	r2, [pc, #88]	; (8057d20 <xTaskRemoveFromEventList+0xb4>)
 8057cc6:	6013      	str	r3, [r2, #0]
 8057cc8:	693b      	ldr	r3, [r7, #16]
 8057cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8057ccc:	4613      	mov	r3, r2
 8057cce:	009b      	lsls	r3, r3, #2
 8057cd0:	4413      	add	r3, r2
 8057cd2:	009b      	lsls	r3, r3, #2
 8057cd4:	4a13      	ldr	r2, [pc, #76]	; (8057d24 <xTaskRemoveFromEventList+0xb8>)
 8057cd6:	441a      	add	r2, r3
 8057cd8:	693b      	ldr	r3, [r7, #16]
 8057cda:	3304      	adds	r3, #4
 8057cdc:	4619      	mov	r1, r3
 8057cde:	4610      	mov	r0, r2
 8057ce0:	f7fe fcaf 	bl	8056642 <vListInsertEnd>
 8057ce4:	e005      	b.n	8057cf2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8057ce6:	693b      	ldr	r3, [r7, #16]
 8057ce8:	3318      	adds	r3, #24
 8057cea:	4619      	mov	r1, r3
 8057cec:	480e      	ldr	r0, [pc, #56]	; (8057d28 <xTaskRemoveFromEventList+0xbc>)
 8057cee:	f7fe fca8 	bl	8056642 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8057cf2:	693b      	ldr	r3, [r7, #16]
 8057cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8057cf6:	4b0d      	ldr	r3, [pc, #52]	; (8057d2c <xTaskRemoveFromEventList+0xc0>)
 8057cf8:	681b      	ldr	r3, [r3, #0]
 8057cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8057cfc:	429a      	cmp	r2, r3
 8057cfe:	d905      	bls.n	8057d0c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8057d00:	2301      	movs	r3, #1
 8057d02:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8057d04:	4b0a      	ldr	r3, [pc, #40]	; (8057d30 <xTaskRemoveFromEventList+0xc4>)
 8057d06:	2201      	movs	r2, #1
 8057d08:	601a      	str	r2, [r3, #0]
 8057d0a:	e001      	b.n	8057d10 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8057d0c:	2300      	movs	r3, #0
 8057d0e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8057d10:	697b      	ldr	r3, [r7, #20]
}
 8057d12:	4618      	mov	r0, r3
 8057d14:	3718      	adds	r7, #24
 8057d16:	46bd      	mov	sp, r7
 8057d18:	bd80      	pop	{r7, pc}
 8057d1a:	bf00      	nop
 8057d1c:	20009c14 	.word	0x20009c14
 8057d20:	20009bf4 	.word	0x20009bf4
 8057d24:	2000971c 	.word	0x2000971c
 8057d28:	20009bac 	.word	0x20009bac
 8057d2c:	20009718 	.word	0x20009718
 8057d30:	20009c00 	.word	0x20009c00

08057d34 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8057d34:	b480      	push	{r7}
 8057d36:	b083      	sub	sp, #12
 8057d38:	af00      	add	r7, sp, #0
 8057d3a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8057d3c:	4b06      	ldr	r3, [pc, #24]	; (8057d58 <vTaskInternalSetTimeOutState+0x24>)
 8057d3e:	681a      	ldr	r2, [r3, #0]
 8057d40:	687b      	ldr	r3, [r7, #4]
 8057d42:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8057d44:	4b05      	ldr	r3, [pc, #20]	; (8057d5c <vTaskInternalSetTimeOutState+0x28>)
 8057d46:	681a      	ldr	r2, [r3, #0]
 8057d48:	687b      	ldr	r3, [r7, #4]
 8057d4a:	605a      	str	r2, [r3, #4]
}
 8057d4c:	bf00      	nop
 8057d4e:	370c      	adds	r7, #12
 8057d50:	46bd      	mov	sp, r7
 8057d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8057d56:	4770      	bx	lr
 8057d58:	20009c04 	.word	0x20009c04
 8057d5c:	20009bf0 	.word	0x20009bf0

08057d60 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8057d60:	b580      	push	{r7, lr}
 8057d62:	b088      	sub	sp, #32
 8057d64:	af00      	add	r7, sp, #0
 8057d66:	6078      	str	r0, [r7, #4]
 8057d68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8057d6a:	687b      	ldr	r3, [r7, #4]
 8057d6c:	2b00      	cmp	r3, #0
 8057d6e:	d10a      	bne.n	8057d86 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8057d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8057d74:	f383 8811 	msr	BASEPRI, r3
 8057d78:	f3bf 8f6f 	isb	sy
 8057d7c:	f3bf 8f4f 	dsb	sy
 8057d80:	613b      	str	r3, [r7, #16]
}
 8057d82:	bf00      	nop
 8057d84:	e7fe      	b.n	8057d84 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8057d86:	683b      	ldr	r3, [r7, #0]
 8057d88:	2b00      	cmp	r3, #0
 8057d8a:	d10a      	bne.n	8057da2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8057d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8057d90:	f383 8811 	msr	BASEPRI, r3
 8057d94:	f3bf 8f6f 	isb	sy
 8057d98:	f3bf 8f4f 	dsb	sy
 8057d9c:	60fb      	str	r3, [r7, #12]
}
 8057d9e:	bf00      	nop
 8057da0:	e7fe      	b.n	8057da0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8057da2:	f000 ff5f 	bl	8058c64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8057da6:	4b1d      	ldr	r3, [pc, #116]	; (8057e1c <xTaskCheckForTimeOut+0xbc>)
 8057da8:	681b      	ldr	r3, [r3, #0]
 8057daa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8057dac:	687b      	ldr	r3, [r7, #4]
 8057dae:	685b      	ldr	r3, [r3, #4]
 8057db0:	69ba      	ldr	r2, [r7, #24]
 8057db2:	1ad3      	subs	r3, r2, r3
 8057db4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8057db6:	683b      	ldr	r3, [r7, #0]
 8057db8:	681b      	ldr	r3, [r3, #0]
 8057dba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8057dbe:	d102      	bne.n	8057dc6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8057dc0:	2300      	movs	r3, #0
 8057dc2:	61fb      	str	r3, [r7, #28]
 8057dc4:	e023      	b.n	8057e0e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8057dc6:	687b      	ldr	r3, [r7, #4]
 8057dc8:	681a      	ldr	r2, [r3, #0]
 8057dca:	4b15      	ldr	r3, [pc, #84]	; (8057e20 <xTaskCheckForTimeOut+0xc0>)
 8057dcc:	681b      	ldr	r3, [r3, #0]
 8057dce:	429a      	cmp	r2, r3
 8057dd0:	d007      	beq.n	8057de2 <xTaskCheckForTimeOut+0x82>
 8057dd2:	687b      	ldr	r3, [r7, #4]
 8057dd4:	685b      	ldr	r3, [r3, #4]
 8057dd6:	69ba      	ldr	r2, [r7, #24]
 8057dd8:	429a      	cmp	r2, r3
 8057dda:	d302      	bcc.n	8057de2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8057ddc:	2301      	movs	r3, #1
 8057dde:	61fb      	str	r3, [r7, #28]
 8057de0:	e015      	b.n	8057e0e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8057de2:	683b      	ldr	r3, [r7, #0]
 8057de4:	681b      	ldr	r3, [r3, #0]
 8057de6:	697a      	ldr	r2, [r7, #20]
 8057de8:	429a      	cmp	r2, r3
 8057dea:	d20b      	bcs.n	8057e04 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8057dec:	683b      	ldr	r3, [r7, #0]
 8057dee:	681a      	ldr	r2, [r3, #0]
 8057df0:	697b      	ldr	r3, [r7, #20]
 8057df2:	1ad2      	subs	r2, r2, r3
 8057df4:	683b      	ldr	r3, [r7, #0]
 8057df6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8057df8:	6878      	ldr	r0, [r7, #4]
 8057dfa:	f7ff ff9b 	bl	8057d34 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8057dfe:	2300      	movs	r3, #0
 8057e00:	61fb      	str	r3, [r7, #28]
 8057e02:	e004      	b.n	8057e0e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8057e04:	683b      	ldr	r3, [r7, #0]
 8057e06:	2200      	movs	r2, #0
 8057e08:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8057e0a:	2301      	movs	r3, #1
 8057e0c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8057e0e:	f000 ff59 	bl	8058cc4 <vPortExitCritical>

	return xReturn;
 8057e12:	69fb      	ldr	r3, [r7, #28]
}
 8057e14:	4618      	mov	r0, r3
 8057e16:	3720      	adds	r7, #32
 8057e18:	46bd      	mov	sp, r7
 8057e1a:	bd80      	pop	{r7, pc}
 8057e1c:	20009bf0 	.word	0x20009bf0
 8057e20:	20009c04 	.word	0x20009c04

08057e24 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8057e24:	b480      	push	{r7}
 8057e26:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8057e28:	4b03      	ldr	r3, [pc, #12]	; (8057e38 <vTaskMissedYield+0x14>)
 8057e2a:	2201      	movs	r2, #1
 8057e2c:	601a      	str	r2, [r3, #0]
}
 8057e2e:	bf00      	nop
 8057e30:	46bd      	mov	sp, r7
 8057e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8057e36:	4770      	bx	lr
 8057e38:	20009c00 	.word	0x20009c00

08057e3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8057e3c:	b580      	push	{r7, lr}
 8057e3e:	b082      	sub	sp, #8
 8057e40:	af00      	add	r7, sp, #0
 8057e42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8057e44:	f000 f852 	bl	8057eec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8057e48:	4b06      	ldr	r3, [pc, #24]	; (8057e64 <prvIdleTask+0x28>)
 8057e4a:	681b      	ldr	r3, [r3, #0]
 8057e4c:	2b01      	cmp	r3, #1
 8057e4e:	d9f9      	bls.n	8057e44 <prvIdleTask+0x8>
			{
				taskYIELD();
 8057e50:	4b05      	ldr	r3, [pc, #20]	; (8057e68 <prvIdleTask+0x2c>)
 8057e52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8057e56:	601a      	str	r2, [r3, #0]
 8057e58:	f3bf 8f4f 	dsb	sy
 8057e5c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8057e60:	e7f0      	b.n	8057e44 <prvIdleTask+0x8>
 8057e62:	bf00      	nop
 8057e64:	2000971c 	.word	0x2000971c
 8057e68:	e000ed04 	.word	0xe000ed04

08057e6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8057e6c:	b580      	push	{r7, lr}
 8057e6e:	b082      	sub	sp, #8
 8057e70:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8057e72:	2300      	movs	r3, #0
 8057e74:	607b      	str	r3, [r7, #4]
 8057e76:	e00c      	b.n	8057e92 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8057e78:	687a      	ldr	r2, [r7, #4]
 8057e7a:	4613      	mov	r3, r2
 8057e7c:	009b      	lsls	r3, r3, #2
 8057e7e:	4413      	add	r3, r2
 8057e80:	009b      	lsls	r3, r3, #2
 8057e82:	4a12      	ldr	r2, [pc, #72]	; (8057ecc <prvInitialiseTaskLists+0x60>)
 8057e84:	4413      	add	r3, r2
 8057e86:	4618      	mov	r0, r3
 8057e88:	f7fe fbae 	bl	80565e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8057e8c:	687b      	ldr	r3, [r7, #4]
 8057e8e:	3301      	adds	r3, #1
 8057e90:	607b      	str	r3, [r7, #4]
 8057e92:	687b      	ldr	r3, [r7, #4]
 8057e94:	2b37      	cmp	r3, #55	; 0x37
 8057e96:	d9ef      	bls.n	8057e78 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8057e98:	480d      	ldr	r0, [pc, #52]	; (8057ed0 <prvInitialiseTaskLists+0x64>)
 8057e9a:	f7fe fba5 	bl	80565e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8057e9e:	480d      	ldr	r0, [pc, #52]	; (8057ed4 <prvInitialiseTaskLists+0x68>)
 8057ea0:	f7fe fba2 	bl	80565e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8057ea4:	480c      	ldr	r0, [pc, #48]	; (8057ed8 <prvInitialiseTaskLists+0x6c>)
 8057ea6:	f7fe fb9f 	bl	80565e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8057eaa:	480c      	ldr	r0, [pc, #48]	; (8057edc <prvInitialiseTaskLists+0x70>)
 8057eac:	f7fe fb9c 	bl	80565e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8057eb0:	480b      	ldr	r0, [pc, #44]	; (8057ee0 <prvInitialiseTaskLists+0x74>)
 8057eb2:	f7fe fb99 	bl	80565e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8057eb6:	4b0b      	ldr	r3, [pc, #44]	; (8057ee4 <prvInitialiseTaskLists+0x78>)
 8057eb8:	4a05      	ldr	r2, [pc, #20]	; (8057ed0 <prvInitialiseTaskLists+0x64>)
 8057eba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8057ebc:	4b0a      	ldr	r3, [pc, #40]	; (8057ee8 <prvInitialiseTaskLists+0x7c>)
 8057ebe:	4a05      	ldr	r2, [pc, #20]	; (8057ed4 <prvInitialiseTaskLists+0x68>)
 8057ec0:	601a      	str	r2, [r3, #0]
}
 8057ec2:	bf00      	nop
 8057ec4:	3708      	adds	r7, #8
 8057ec6:	46bd      	mov	sp, r7
 8057ec8:	bd80      	pop	{r7, pc}
 8057eca:	bf00      	nop
 8057ecc:	2000971c 	.word	0x2000971c
 8057ed0:	20009b7c 	.word	0x20009b7c
 8057ed4:	20009b90 	.word	0x20009b90
 8057ed8:	20009bac 	.word	0x20009bac
 8057edc:	20009bc0 	.word	0x20009bc0
 8057ee0:	20009bd8 	.word	0x20009bd8
 8057ee4:	20009ba4 	.word	0x20009ba4
 8057ee8:	20009ba8 	.word	0x20009ba8

08057eec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8057eec:	b580      	push	{r7, lr}
 8057eee:	b082      	sub	sp, #8
 8057ef0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8057ef2:	e019      	b.n	8057f28 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8057ef4:	f000 feb6 	bl	8058c64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8057ef8:	4b10      	ldr	r3, [pc, #64]	; (8057f3c <prvCheckTasksWaitingTermination+0x50>)
 8057efa:	68db      	ldr	r3, [r3, #12]
 8057efc:	68db      	ldr	r3, [r3, #12]
 8057efe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8057f00:	687b      	ldr	r3, [r7, #4]
 8057f02:	3304      	adds	r3, #4
 8057f04:	4618      	mov	r0, r3
 8057f06:	f7fe fbf9 	bl	80566fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8057f0a:	4b0d      	ldr	r3, [pc, #52]	; (8057f40 <prvCheckTasksWaitingTermination+0x54>)
 8057f0c:	681b      	ldr	r3, [r3, #0]
 8057f0e:	3b01      	subs	r3, #1
 8057f10:	4a0b      	ldr	r2, [pc, #44]	; (8057f40 <prvCheckTasksWaitingTermination+0x54>)
 8057f12:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8057f14:	4b0b      	ldr	r3, [pc, #44]	; (8057f44 <prvCheckTasksWaitingTermination+0x58>)
 8057f16:	681b      	ldr	r3, [r3, #0]
 8057f18:	3b01      	subs	r3, #1
 8057f1a:	4a0a      	ldr	r2, [pc, #40]	; (8057f44 <prvCheckTasksWaitingTermination+0x58>)
 8057f1c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8057f1e:	f000 fed1 	bl	8058cc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8057f22:	6878      	ldr	r0, [r7, #4]
 8057f24:	f000 f810 	bl	8057f48 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8057f28:	4b06      	ldr	r3, [pc, #24]	; (8057f44 <prvCheckTasksWaitingTermination+0x58>)
 8057f2a:	681b      	ldr	r3, [r3, #0]
 8057f2c:	2b00      	cmp	r3, #0
 8057f2e:	d1e1      	bne.n	8057ef4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8057f30:	bf00      	nop
 8057f32:	bf00      	nop
 8057f34:	3708      	adds	r7, #8
 8057f36:	46bd      	mov	sp, r7
 8057f38:	bd80      	pop	{r7, pc}
 8057f3a:	bf00      	nop
 8057f3c:	20009bc0 	.word	0x20009bc0
 8057f40:	20009bec 	.word	0x20009bec
 8057f44:	20009bd4 	.word	0x20009bd4

08057f48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8057f48:	b580      	push	{r7, lr}
 8057f4a:	b084      	sub	sp, #16
 8057f4c:	af00      	add	r7, sp, #0
 8057f4e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8057f50:	687b      	ldr	r3, [r7, #4]
 8057f52:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8057f56:	2b00      	cmp	r3, #0
 8057f58:	d108      	bne.n	8057f6c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8057f5a:	687b      	ldr	r3, [r7, #4]
 8057f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8057f5e:	4618      	mov	r0, r3
 8057f60:	f001 f86e 	bl	8059040 <vPortFree>
				vPortFree( pxTCB );
 8057f64:	6878      	ldr	r0, [r7, #4]
 8057f66:	f001 f86b 	bl	8059040 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8057f6a:	e018      	b.n	8057f9e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8057f6c:	687b      	ldr	r3, [r7, #4]
 8057f6e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8057f72:	2b01      	cmp	r3, #1
 8057f74:	d103      	bne.n	8057f7e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8057f76:	6878      	ldr	r0, [r7, #4]
 8057f78:	f001 f862 	bl	8059040 <vPortFree>
	}
 8057f7c:	e00f      	b.n	8057f9e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8057f7e:	687b      	ldr	r3, [r7, #4]
 8057f80:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8057f84:	2b02      	cmp	r3, #2
 8057f86:	d00a      	beq.n	8057f9e <prvDeleteTCB+0x56>
	__asm volatile
 8057f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8057f8c:	f383 8811 	msr	BASEPRI, r3
 8057f90:	f3bf 8f6f 	isb	sy
 8057f94:	f3bf 8f4f 	dsb	sy
 8057f98:	60fb      	str	r3, [r7, #12]
}
 8057f9a:	bf00      	nop
 8057f9c:	e7fe      	b.n	8057f9c <prvDeleteTCB+0x54>
	}
 8057f9e:	bf00      	nop
 8057fa0:	3710      	adds	r7, #16
 8057fa2:	46bd      	mov	sp, r7
 8057fa4:	bd80      	pop	{r7, pc}
	...

08057fa8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8057fa8:	b480      	push	{r7}
 8057faa:	b083      	sub	sp, #12
 8057fac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8057fae:	4b0c      	ldr	r3, [pc, #48]	; (8057fe0 <prvResetNextTaskUnblockTime+0x38>)
 8057fb0:	681b      	ldr	r3, [r3, #0]
 8057fb2:	681b      	ldr	r3, [r3, #0]
 8057fb4:	2b00      	cmp	r3, #0
 8057fb6:	d104      	bne.n	8057fc2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8057fb8:	4b0a      	ldr	r3, [pc, #40]	; (8057fe4 <prvResetNextTaskUnblockTime+0x3c>)
 8057fba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8057fbe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8057fc0:	e008      	b.n	8057fd4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8057fc2:	4b07      	ldr	r3, [pc, #28]	; (8057fe0 <prvResetNextTaskUnblockTime+0x38>)
 8057fc4:	681b      	ldr	r3, [r3, #0]
 8057fc6:	68db      	ldr	r3, [r3, #12]
 8057fc8:	68db      	ldr	r3, [r3, #12]
 8057fca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8057fcc:	687b      	ldr	r3, [r7, #4]
 8057fce:	685b      	ldr	r3, [r3, #4]
 8057fd0:	4a04      	ldr	r2, [pc, #16]	; (8057fe4 <prvResetNextTaskUnblockTime+0x3c>)
 8057fd2:	6013      	str	r3, [r2, #0]
}
 8057fd4:	bf00      	nop
 8057fd6:	370c      	adds	r7, #12
 8057fd8:	46bd      	mov	sp, r7
 8057fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8057fde:	4770      	bx	lr
 8057fe0:	20009ba4 	.word	0x20009ba4
 8057fe4:	20009c0c 	.word	0x20009c0c

08057fe8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8057fe8:	b480      	push	{r7}
 8057fea:	b083      	sub	sp, #12
 8057fec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8057fee:	4b0b      	ldr	r3, [pc, #44]	; (805801c <xTaskGetSchedulerState+0x34>)
 8057ff0:	681b      	ldr	r3, [r3, #0]
 8057ff2:	2b00      	cmp	r3, #0
 8057ff4:	d102      	bne.n	8057ffc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8057ff6:	2301      	movs	r3, #1
 8057ff8:	607b      	str	r3, [r7, #4]
 8057ffa:	e008      	b.n	805800e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8057ffc:	4b08      	ldr	r3, [pc, #32]	; (8058020 <xTaskGetSchedulerState+0x38>)
 8057ffe:	681b      	ldr	r3, [r3, #0]
 8058000:	2b00      	cmp	r3, #0
 8058002:	d102      	bne.n	805800a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8058004:	2302      	movs	r3, #2
 8058006:	607b      	str	r3, [r7, #4]
 8058008:	e001      	b.n	805800e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 805800a:	2300      	movs	r3, #0
 805800c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 805800e:	687b      	ldr	r3, [r7, #4]
	}
 8058010:	4618      	mov	r0, r3
 8058012:	370c      	adds	r7, #12
 8058014:	46bd      	mov	sp, r7
 8058016:	f85d 7b04 	ldr.w	r7, [sp], #4
 805801a:	4770      	bx	lr
 805801c:	20009bf8 	.word	0x20009bf8
 8058020:	20009c14 	.word	0x20009c14

08058024 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8058024:	b580      	push	{r7, lr}
 8058026:	b086      	sub	sp, #24
 8058028:	af00      	add	r7, sp, #0
 805802a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 805802c:	687b      	ldr	r3, [r7, #4]
 805802e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8058030:	2300      	movs	r3, #0
 8058032:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8058034:	687b      	ldr	r3, [r7, #4]
 8058036:	2b00      	cmp	r3, #0
 8058038:	d056      	beq.n	80580e8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 805803a:	4b2e      	ldr	r3, [pc, #184]	; (80580f4 <xTaskPriorityDisinherit+0xd0>)
 805803c:	681b      	ldr	r3, [r3, #0]
 805803e:	693a      	ldr	r2, [r7, #16]
 8058040:	429a      	cmp	r2, r3
 8058042:	d00a      	beq.n	805805a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8058044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8058048:	f383 8811 	msr	BASEPRI, r3
 805804c:	f3bf 8f6f 	isb	sy
 8058050:	f3bf 8f4f 	dsb	sy
 8058054:	60fb      	str	r3, [r7, #12]
}
 8058056:	bf00      	nop
 8058058:	e7fe      	b.n	8058058 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 805805a:	693b      	ldr	r3, [r7, #16]
 805805c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 805805e:	2b00      	cmp	r3, #0
 8058060:	d10a      	bne.n	8058078 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8058062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8058066:	f383 8811 	msr	BASEPRI, r3
 805806a:	f3bf 8f6f 	isb	sy
 805806e:	f3bf 8f4f 	dsb	sy
 8058072:	60bb      	str	r3, [r7, #8]
}
 8058074:	bf00      	nop
 8058076:	e7fe      	b.n	8058076 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8058078:	693b      	ldr	r3, [r7, #16]
 805807a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 805807c:	1e5a      	subs	r2, r3, #1
 805807e:	693b      	ldr	r3, [r7, #16]
 8058080:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8058082:	693b      	ldr	r3, [r7, #16]
 8058084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8058086:	693b      	ldr	r3, [r7, #16]
 8058088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 805808a:	429a      	cmp	r2, r3
 805808c:	d02c      	beq.n	80580e8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 805808e:	693b      	ldr	r3, [r7, #16]
 8058090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8058092:	2b00      	cmp	r3, #0
 8058094:	d128      	bne.n	80580e8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8058096:	693b      	ldr	r3, [r7, #16]
 8058098:	3304      	adds	r3, #4
 805809a:	4618      	mov	r0, r3
 805809c:	f7fe fb2e 	bl	80566fc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80580a0:	693b      	ldr	r3, [r7, #16]
 80580a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80580a4:	693b      	ldr	r3, [r7, #16]
 80580a6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80580a8:	693b      	ldr	r3, [r7, #16]
 80580aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80580ac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80580b0:	693b      	ldr	r3, [r7, #16]
 80580b2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80580b4:	693b      	ldr	r3, [r7, #16]
 80580b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80580b8:	4b0f      	ldr	r3, [pc, #60]	; (80580f8 <xTaskPriorityDisinherit+0xd4>)
 80580ba:	681b      	ldr	r3, [r3, #0]
 80580bc:	429a      	cmp	r2, r3
 80580be:	d903      	bls.n	80580c8 <xTaskPriorityDisinherit+0xa4>
 80580c0:	693b      	ldr	r3, [r7, #16]
 80580c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80580c4:	4a0c      	ldr	r2, [pc, #48]	; (80580f8 <xTaskPriorityDisinherit+0xd4>)
 80580c6:	6013      	str	r3, [r2, #0]
 80580c8:	693b      	ldr	r3, [r7, #16]
 80580ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80580cc:	4613      	mov	r3, r2
 80580ce:	009b      	lsls	r3, r3, #2
 80580d0:	4413      	add	r3, r2
 80580d2:	009b      	lsls	r3, r3, #2
 80580d4:	4a09      	ldr	r2, [pc, #36]	; (80580fc <xTaskPriorityDisinherit+0xd8>)
 80580d6:	441a      	add	r2, r3
 80580d8:	693b      	ldr	r3, [r7, #16]
 80580da:	3304      	adds	r3, #4
 80580dc:	4619      	mov	r1, r3
 80580de:	4610      	mov	r0, r2
 80580e0:	f7fe faaf 	bl	8056642 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80580e4:	2301      	movs	r3, #1
 80580e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80580e8:	697b      	ldr	r3, [r7, #20]
	}
 80580ea:	4618      	mov	r0, r3
 80580ec:	3718      	adds	r7, #24
 80580ee:	46bd      	mov	sp, r7
 80580f0:	bd80      	pop	{r7, pc}
 80580f2:	bf00      	nop
 80580f4:	20009718 	.word	0x20009718
 80580f8:	20009bf4 	.word	0x20009bf4
 80580fc:	2000971c 	.word	0x2000971c

08058100 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8058100:	b580      	push	{r7, lr}
 8058102:	b084      	sub	sp, #16
 8058104:	af00      	add	r7, sp, #0
 8058106:	6078      	str	r0, [r7, #4]
 8058108:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 805810a:	4b21      	ldr	r3, [pc, #132]	; (8058190 <prvAddCurrentTaskToDelayedList+0x90>)
 805810c:	681b      	ldr	r3, [r3, #0]
 805810e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8058110:	4b20      	ldr	r3, [pc, #128]	; (8058194 <prvAddCurrentTaskToDelayedList+0x94>)
 8058112:	681b      	ldr	r3, [r3, #0]
 8058114:	3304      	adds	r3, #4
 8058116:	4618      	mov	r0, r3
 8058118:	f7fe faf0 	bl	80566fc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 805811c:	687b      	ldr	r3, [r7, #4]
 805811e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8058122:	d10a      	bne.n	805813a <prvAddCurrentTaskToDelayedList+0x3a>
 8058124:	683b      	ldr	r3, [r7, #0]
 8058126:	2b00      	cmp	r3, #0
 8058128:	d007      	beq.n	805813a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 805812a:	4b1a      	ldr	r3, [pc, #104]	; (8058194 <prvAddCurrentTaskToDelayedList+0x94>)
 805812c:	681b      	ldr	r3, [r3, #0]
 805812e:	3304      	adds	r3, #4
 8058130:	4619      	mov	r1, r3
 8058132:	4819      	ldr	r0, [pc, #100]	; (8058198 <prvAddCurrentTaskToDelayedList+0x98>)
 8058134:	f7fe fa85 	bl	8056642 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8058138:	e026      	b.n	8058188 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 805813a:	68fa      	ldr	r2, [r7, #12]
 805813c:	687b      	ldr	r3, [r7, #4]
 805813e:	4413      	add	r3, r2
 8058140:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8058142:	4b14      	ldr	r3, [pc, #80]	; (8058194 <prvAddCurrentTaskToDelayedList+0x94>)
 8058144:	681b      	ldr	r3, [r3, #0]
 8058146:	68ba      	ldr	r2, [r7, #8]
 8058148:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 805814a:	68ba      	ldr	r2, [r7, #8]
 805814c:	68fb      	ldr	r3, [r7, #12]
 805814e:	429a      	cmp	r2, r3
 8058150:	d209      	bcs.n	8058166 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8058152:	4b12      	ldr	r3, [pc, #72]	; (805819c <prvAddCurrentTaskToDelayedList+0x9c>)
 8058154:	681a      	ldr	r2, [r3, #0]
 8058156:	4b0f      	ldr	r3, [pc, #60]	; (8058194 <prvAddCurrentTaskToDelayedList+0x94>)
 8058158:	681b      	ldr	r3, [r3, #0]
 805815a:	3304      	adds	r3, #4
 805815c:	4619      	mov	r1, r3
 805815e:	4610      	mov	r0, r2
 8058160:	f7fe fa93 	bl	805668a <vListInsert>
}
 8058164:	e010      	b.n	8058188 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8058166:	4b0e      	ldr	r3, [pc, #56]	; (80581a0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8058168:	681a      	ldr	r2, [r3, #0]
 805816a:	4b0a      	ldr	r3, [pc, #40]	; (8058194 <prvAddCurrentTaskToDelayedList+0x94>)
 805816c:	681b      	ldr	r3, [r3, #0]
 805816e:	3304      	adds	r3, #4
 8058170:	4619      	mov	r1, r3
 8058172:	4610      	mov	r0, r2
 8058174:	f7fe fa89 	bl	805668a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8058178:	4b0a      	ldr	r3, [pc, #40]	; (80581a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 805817a:	681b      	ldr	r3, [r3, #0]
 805817c:	68ba      	ldr	r2, [r7, #8]
 805817e:	429a      	cmp	r2, r3
 8058180:	d202      	bcs.n	8058188 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8058182:	4a08      	ldr	r2, [pc, #32]	; (80581a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8058184:	68bb      	ldr	r3, [r7, #8]
 8058186:	6013      	str	r3, [r2, #0]
}
 8058188:	bf00      	nop
 805818a:	3710      	adds	r7, #16
 805818c:	46bd      	mov	sp, r7
 805818e:	bd80      	pop	{r7, pc}
 8058190:	20009bf0 	.word	0x20009bf0
 8058194:	20009718 	.word	0x20009718
 8058198:	20009bd8 	.word	0x20009bd8
 805819c:	20009ba8 	.word	0x20009ba8
 80581a0:	20009ba4 	.word	0x20009ba4
 80581a4:	20009c0c 	.word	0x20009c0c

080581a8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80581a8:	b580      	push	{r7, lr}
 80581aa:	b08a      	sub	sp, #40	; 0x28
 80581ac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80581ae:	2300      	movs	r3, #0
 80581b0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80581b2:	f000 fba1 	bl	80588f8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80581b6:	4b1c      	ldr	r3, [pc, #112]	; (8058228 <xTimerCreateTimerTask+0x80>)
 80581b8:	681b      	ldr	r3, [r3, #0]
 80581ba:	2b00      	cmp	r3, #0
 80581bc:	d021      	beq.n	8058202 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80581be:	2300      	movs	r3, #0
 80581c0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80581c2:	2300      	movs	r3, #0
 80581c4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80581c6:	1d3a      	adds	r2, r7, #4
 80581c8:	f107 0108 	add.w	r1, r7, #8
 80581cc:	f107 030c 	add.w	r3, r7, #12
 80581d0:	4618      	mov	r0, r3
 80581d2:	f7fe f9ef 	bl	80565b4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80581d6:	6879      	ldr	r1, [r7, #4]
 80581d8:	68bb      	ldr	r3, [r7, #8]
 80581da:	68fa      	ldr	r2, [r7, #12]
 80581dc:	9202      	str	r2, [sp, #8]
 80581de:	9301      	str	r3, [sp, #4]
 80581e0:	2302      	movs	r3, #2
 80581e2:	9300      	str	r3, [sp, #0]
 80581e4:	2300      	movs	r3, #0
 80581e6:	460a      	mov	r2, r1
 80581e8:	4910      	ldr	r1, [pc, #64]	; (805822c <xTimerCreateTimerTask+0x84>)
 80581ea:	4811      	ldr	r0, [pc, #68]	; (8058230 <xTimerCreateTimerTask+0x88>)
 80581ec:	f7ff f856 	bl	805729c <xTaskCreateStatic>
 80581f0:	4603      	mov	r3, r0
 80581f2:	4a10      	ldr	r2, [pc, #64]	; (8058234 <xTimerCreateTimerTask+0x8c>)
 80581f4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80581f6:	4b0f      	ldr	r3, [pc, #60]	; (8058234 <xTimerCreateTimerTask+0x8c>)
 80581f8:	681b      	ldr	r3, [r3, #0]
 80581fa:	2b00      	cmp	r3, #0
 80581fc:	d001      	beq.n	8058202 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80581fe:	2301      	movs	r3, #1
 8058200:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8058202:	697b      	ldr	r3, [r7, #20]
 8058204:	2b00      	cmp	r3, #0
 8058206:	d10a      	bne.n	805821e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8058208:	f04f 0350 	mov.w	r3, #80	; 0x50
 805820c:	f383 8811 	msr	BASEPRI, r3
 8058210:	f3bf 8f6f 	isb	sy
 8058214:	f3bf 8f4f 	dsb	sy
 8058218:	613b      	str	r3, [r7, #16]
}
 805821a:	bf00      	nop
 805821c:	e7fe      	b.n	805821c <xTimerCreateTimerTask+0x74>
	return xReturn;
 805821e:	697b      	ldr	r3, [r7, #20]
}
 8058220:	4618      	mov	r0, r3
 8058222:	3718      	adds	r7, #24
 8058224:	46bd      	mov	sp, r7
 8058226:	bd80      	pop	{r7, pc}
 8058228:	20009c48 	.word	0x20009c48
 805822c:	08067774 	.word	0x08067774
 8058230:	080584a1 	.word	0x080584a1
 8058234:	20009c4c 	.word	0x20009c4c

08058238 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8058238:	b580      	push	{r7, lr}
 805823a:	b088      	sub	sp, #32
 805823c:	af02      	add	r7, sp, #8
 805823e:	60f8      	str	r0, [r7, #12]
 8058240:	60b9      	str	r1, [r7, #8]
 8058242:	607a      	str	r2, [r7, #4]
 8058244:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8058246:	202c      	movs	r0, #44	; 0x2c
 8058248:	f000 fe2e 	bl	8058ea8 <pvPortMalloc>
 805824c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 805824e:	697b      	ldr	r3, [r7, #20]
 8058250:	2b00      	cmp	r3, #0
 8058252:	d00d      	beq.n	8058270 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8058254:	697b      	ldr	r3, [r7, #20]
 8058256:	2200      	movs	r2, #0
 8058258:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 805825c:	697b      	ldr	r3, [r7, #20]
 805825e:	9301      	str	r3, [sp, #4]
 8058260:	6a3b      	ldr	r3, [r7, #32]
 8058262:	9300      	str	r3, [sp, #0]
 8058264:	683b      	ldr	r3, [r7, #0]
 8058266:	687a      	ldr	r2, [r7, #4]
 8058268:	68b9      	ldr	r1, [r7, #8]
 805826a:	68f8      	ldr	r0, [r7, #12]
 805826c:	f000 f843 	bl	80582f6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8058270:	697b      	ldr	r3, [r7, #20]
	}
 8058272:	4618      	mov	r0, r3
 8058274:	3718      	adds	r7, #24
 8058276:	46bd      	mov	sp, r7
 8058278:	bd80      	pop	{r7, pc}

0805827a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 805827a:	b580      	push	{r7, lr}
 805827c:	b08a      	sub	sp, #40	; 0x28
 805827e:	af02      	add	r7, sp, #8
 8058280:	60f8      	str	r0, [r7, #12]
 8058282:	60b9      	str	r1, [r7, #8]
 8058284:	607a      	str	r2, [r7, #4]
 8058286:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8058288:	232c      	movs	r3, #44	; 0x2c
 805828a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 805828c:	693b      	ldr	r3, [r7, #16]
 805828e:	2b2c      	cmp	r3, #44	; 0x2c
 8058290:	d00a      	beq.n	80582a8 <xTimerCreateStatic+0x2e>
	__asm volatile
 8058292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8058296:	f383 8811 	msr	BASEPRI, r3
 805829a:	f3bf 8f6f 	isb	sy
 805829e:	f3bf 8f4f 	dsb	sy
 80582a2:	61bb      	str	r3, [r7, #24]
}
 80582a4:	bf00      	nop
 80582a6:	e7fe      	b.n	80582a6 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80582a8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80582aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80582ac:	2b00      	cmp	r3, #0
 80582ae:	d10a      	bne.n	80582c6 <xTimerCreateStatic+0x4c>
	__asm volatile
 80582b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80582b4:	f383 8811 	msr	BASEPRI, r3
 80582b8:	f3bf 8f6f 	isb	sy
 80582bc:	f3bf 8f4f 	dsb	sy
 80582c0:	617b      	str	r3, [r7, #20]
}
 80582c2:	bf00      	nop
 80582c4:	e7fe      	b.n	80582c4 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80582c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80582c8:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80582ca:	69fb      	ldr	r3, [r7, #28]
 80582cc:	2b00      	cmp	r3, #0
 80582ce:	d00d      	beq.n	80582ec <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80582d0:	69fb      	ldr	r3, [r7, #28]
 80582d2:	2202      	movs	r2, #2
 80582d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80582d8:	69fb      	ldr	r3, [r7, #28]
 80582da:	9301      	str	r3, [sp, #4]
 80582dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80582de:	9300      	str	r3, [sp, #0]
 80582e0:	683b      	ldr	r3, [r7, #0]
 80582e2:	687a      	ldr	r2, [r7, #4]
 80582e4:	68b9      	ldr	r1, [r7, #8]
 80582e6:	68f8      	ldr	r0, [r7, #12]
 80582e8:	f000 f805 	bl	80582f6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80582ec:	69fb      	ldr	r3, [r7, #28]
	}
 80582ee:	4618      	mov	r0, r3
 80582f0:	3720      	adds	r7, #32
 80582f2:	46bd      	mov	sp, r7
 80582f4:	bd80      	pop	{r7, pc}

080582f6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80582f6:	b580      	push	{r7, lr}
 80582f8:	b086      	sub	sp, #24
 80582fa:	af00      	add	r7, sp, #0
 80582fc:	60f8      	str	r0, [r7, #12]
 80582fe:	60b9      	str	r1, [r7, #8]
 8058300:	607a      	str	r2, [r7, #4]
 8058302:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8058304:	68bb      	ldr	r3, [r7, #8]
 8058306:	2b00      	cmp	r3, #0
 8058308:	d10a      	bne.n	8058320 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 805830a:	f04f 0350 	mov.w	r3, #80	; 0x50
 805830e:	f383 8811 	msr	BASEPRI, r3
 8058312:	f3bf 8f6f 	isb	sy
 8058316:	f3bf 8f4f 	dsb	sy
 805831a:	617b      	str	r3, [r7, #20]
}
 805831c:	bf00      	nop
 805831e:	e7fe      	b.n	805831e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8058320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8058322:	2b00      	cmp	r3, #0
 8058324:	d01e      	beq.n	8058364 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8058326:	f000 fae7 	bl	80588f8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 805832a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 805832c:	68fa      	ldr	r2, [r7, #12]
 805832e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8058330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8058332:	68ba      	ldr	r2, [r7, #8]
 8058334:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8058336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8058338:	683a      	ldr	r2, [r7, #0]
 805833a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 805833c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 805833e:	6a3a      	ldr	r2, [r7, #32]
 8058340:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8058342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8058344:	3304      	adds	r3, #4
 8058346:	4618      	mov	r0, r3
 8058348:	f7fe f96e 	bl	8056628 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 805834c:	687b      	ldr	r3, [r7, #4]
 805834e:	2b00      	cmp	r3, #0
 8058350:	d008      	beq.n	8058364 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8058352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8058354:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8058358:	f043 0304 	orr.w	r3, r3, #4
 805835c:	b2da      	uxtb	r2, r3
 805835e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8058360:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8058364:	bf00      	nop
 8058366:	3718      	adds	r7, #24
 8058368:	46bd      	mov	sp, r7
 805836a:	bd80      	pop	{r7, pc}

0805836c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 805836c:	b580      	push	{r7, lr}
 805836e:	b08a      	sub	sp, #40	; 0x28
 8058370:	af00      	add	r7, sp, #0
 8058372:	60f8      	str	r0, [r7, #12]
 8058374:	60b9      	str	r1, [r7, #8]
 8058376:	607a      	str	r2, [r7, #4]
 8058378:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 805837a:	2300      	movs	r3, #0
 805837c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 805837e:	68fb      	ldr	r3, [r7, #12]
 8058380:	2b00      	cmp	r3, #0
 8058382:	d10a      	bne.n	805839a <xTimerGenericCommand+0x2e>
	__asm volatile
 8058384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8058388:	f383 8811 	msr	BASEPRI, r3
 805838c:	f3bf 8f6f 	isb	sy
 8058390:	f3bf 8f4f 	dsb	sy
 8058394:	623b      	str	r3, [r7, #32]
}
 8058396:	bf00      	nop
 8058398:	e7fe      	b.n	8058398 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 805839a:	4b1a      	ldr	r3, [pc, #104]	; (8058404 <xTimerGenericCommand+0x98>)
 805839c:	681b      	ldr	r3, [r3, #0]
 805839e:	2b00      	cmp	r3, #0
 80583a0:	d02a      	beq.n	80583f8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80583a2:	68bb      	ldr	r3, [r7, #8]
 80583a4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80583a6:	687b      	ldr	r3, [r7, #4]
 80583a8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80583aa:	68fb      	ldr	r3, [r7, #12]
 80583ac:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80583ae:	68bb      	ldr	r3, [r7, #8]
 80583b0:	2b05      	cmp	r3, #5
 80583b2:	dc18      	bgt.n	80583e6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80583b4:	f7ff fe18 	bl	8057fe8 <xTaskGetSchedulerState>
 80583b8:	4603      	mov	r3, r0
 80583ba:	2b02      	cmp	r3, #2
 80583bc:	d109      	bne.n	80583d2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80583be:	4b11      	ldr	r3, [pc, #68]	; (8058404 <xTimerGenericCommand+0x98>)
 80583c0:	6818      	ldr	r0, [r3, #0]
 80583c2:	f107 0110 	add.w	r1, r7, #16
 80583c6:	2300      	movs	r3, #0
 80583c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80583ca:	f7fe faff 	bl	80569cc <xQueueGenericSend>
 80583ce:	6278      	str	r0, [r7, #36]	; 0x24
 80583d0:	e012      	b.n	80583f8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80583d2:	4b0c      	ldr	r3, [pc, #48]	; (8058404 <xTimerGenericCommand+0x98>)
 80583d4:	6818      	ldr	r0, [r3, #0]
 80583d6:	f107 0110 	add.w	r1, r7, #16
 80583da:	2300      	movs	r3, #0
 80583dc:	2200      	movs	r2, #0
 80583de:	f7fe faf5 	bl	80569cc <xQueueGenericSend>
 80583e2:	6278      	str	r0, [r7, #36]	; 0x24
 80583e4:	e008      	b.n	80583f8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80583e6:	4b07      	ldr	r3, [pc, #28]	; (8058404 <xTimerGenericCommand+0x98>)
 80583e8:	6818      	ldr	r0, [r3, #0]
 80583ea:	f107 0110 	add.w	r1, r7, #16
 80583ee:	2300      	movs	r3, #0
 80583f0:	683a      	ldr	r2, [r7, #0]
 80583f2:	f7fe fbe9 	bl	8056bc8 <xQueueGenericSendFromISR>
 80583f6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80583f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80583fa:	4618      	mov	r0, r3
 80583fc:	3728      	adds	r7, #40	; 0x28
 80583fe:	46bd      	mov	sp, r7
 8058400:	bd80      	pop	{r7, pc}
 8058402:	bf00      	nop
 8058404:	20009c48 	.word	0x20009c48

08058408 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8058408:	b580      	push	{r7, lr}
 805840a:	b088      	sub	sp, #32
 805840c:	af02      	add	r7, sp, #8
 805840e:	6078      	str	r0, [r7, #4]
 8058410:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8058412:	4b22      	ldr	r3, [pc, #136]	; (805849c <prvProcessExpiredTimer+0x94>)
 8058414:	681b      	ldr	r3, [r3, #0]
 8058416:	68db      	ldr	r3, [r3, #12]
 8058418:	68db      	ldr	r3, [r3, #12]
 805841a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 805841c:	697b      	ldr	r3, [r7, #20]
 805841e:	3304      	adds	r3, #4
 8058420:	4618      	mov	r0, r3
 8058422:	f7fe f96b 	bl	80566fc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8058426:	697b      	ldr	r3, [r7, #20]
 8058428:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 805842c:	f003 0304 	and.w	r3, r3, #4
 8058430:	2b00      	cmp	r3, #0
 8058432:	d022      	beq.n	805847a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8058434:	697b      	ldr	r3, [r7, #20]
 8058436:	699a      	ldr	r2, [r3, #24]
 8058438:	687b      	ldr	r3, [r7, #4]
 805843a:	18d1      	adds	r1, r2, r3
 805843c:	687b      	ldr	r3, [r7, #4]
 805843e:	683a      	ldr	r2, [r7, #0]
 8058440:	6978      	ldr	r0, [r7, #20]
 8058442:	f000 f8d1 	bl	80585e8 <prvInsertTimerInActiveList>
 8058446:	4603      	mov	r3, r0
 8058448:	2b00      	cmp	r3, #0
 805844a:	d01f      	beq.n	805848c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 805844c:	2300      	movs	r3, #0
 805844e:	9300      	str	r3, [sp, #0]
 8058450:	2300      	movs	r3, #0
 8058452:	687a      	ldr	r2, [r7, #4]
 8058454:	2100      	movs	r1, #0
 8058456:	6978      	ldr	r0, [r7, #20]
 8058458:	f7ff ff88 	bl	805836c <xTimerGenericCommand>
 805845c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 805845e:	693b      	ldr	r3, [r7, #16]
 8058460:	2b00      	cmp	r3, #0
 8058462:	d113      	bne.n	805848c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8058464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8058468:	f383 8811 	msr	BASEPRI, r3
 805846c:	f3bf 8f6f 	isb	sy
 8058470:	f3bf 8f4f 	dsb	sy
 8058474:	60fb      	str	r3, [r7, #12]
}
 8058476:	bf00      	nop
 8058478:	e7fe      	b.n	8058478 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 805847a:	697b      	ldr	r3, [r7, #20]
 805847c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8058480:	f023 0301 	bic.w	r3, r3, #1
 8058484:	b2da      	uxtb	r2, r3
 8058486:	697b      	ldr	r3, [r7, #20]
 8058488:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 805848c:	697b      	ldr	r3, [r7, #20]
 805848e:	6a1b      	ldr	r3, [r3, #32]
 8058490:	6978      	ldr	r0, [r7, #20]
 8058492:	4798      	blx	r3
}
 8058494:	bf00      	nop
 8058496:	3718      	adds	r7, #24
 8058498:	46bd      	mov	sp, r7
 805849a:	bd80      	pop	{r7, pc}
 805849c:	20009c40 	.word	0x20009c40

080584a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80584a0:	b580      	push	{r7, lr}
 80584a2:	b084      	sub	sp, #16
 80584a4:	af00      	add	r7, sp, #0
 80584a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80584a8:	f107 0308 	add.w	r3, r7, #8
 80584ac:	4618      	mov	r0, r3
 80584ae:	f000 f857 	bl	8058560 <prvGetNextExpireTime>
 80584b2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80584b4:	68bb      	ldr	r3, [r7, #8]
 80584b6:	4619      	mov	r1, r3
 80584b8:	68f8      	ldr	r0, [r7, #12]
 80584ba:	f000 f803 	bl	80584c4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80584be:	f000 f8d5 	bl	805866c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80584c2:	e7f1      	b.n	80584a8 <prvTimerTask+0x8>

080584c4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80584c4:	b580      	push	{r7, lr}
 80584c6:	b084      	sub	sp, #16
 80584c8:	af00      	add	r7, sp, #0
 80584ca:	6078      	str	r0, [r7, #4]
 80584cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80584ce:	f7ff f997 	bl	8057800 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80584d2:	f107 0308 	add.w	r3, r7, #8
 80584d6:	4618      	mov	r0, r3
 80584d8:	f000 f866 	bl	80585a8 <prvSampleTimeNow>
 80584dc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80584de:	68bb      	ldr	r3, [r7, #8]
 80584e0:	2b00      	cmp	r3, #0
 80584e2:	d130      	bne.n	8058546 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80584e4:	683b      	ldr	r3, [r7, #0]
 80584e6:	2b00      	cmp	r3, #0
 80584e8:	d10a      	bne.n	8058500 <prvProcessTimerOrBlockTask+0x3c>
 80584ea:	687a      	ldr	r2, [r7, #4]
 80584ec:	68fb      	ldr	r3, [r7, #12]
 80584ee:	429a      	cmp	r2, r3
 80584f0:	d806      	bhi.n	8058500 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80584f2:	f7ff f993 	bl	805781c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80584f6:	68f9      	ldr	r1, [r7, #12]
 80584f8:	6878      	ldr	r0, [r7, #4]
 80584fa:	f7ff ff85 	bl	8058408 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80584fe:	e024      	b.n	805854a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8058500:	683b      	ldr	r3, [r7, #0]
 8058502:	2b00      	cmp	r3, #0
 8058504:	d008      	beq.n	8058518 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8058506:	4b13      	ldr	r3, [pc, #76]	; (8058554 <prvProcessTimerOrBlockTask+0x90>)
 8058508:	681b      	ldr	r3, [r3, #0]
 805850a:	681b      	ldr	r3, [r3, #0]
 805850c:	2b00      	cmp	r3, #0
 805850e:	d101      	bne.n	8058514 <prvProcessTimerOrBlockTask+0x50>
 8058510:	2301      	movs	r3, #1
 8058512:	e000      	b.n	8058516 <prvProcessTimerOrBlockTask+0x52>
 8058514:	2300      	movs	r3, #0
 8058516:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8058518:	4b0f      	ldr	r3, [pc, #60]	; (8058558 <prvProcessTimerOrBlockTask+0x94>)
 805851a:	6818      	ldr	r0, [r3, #0]
 805851c:	687a      	ldr	r2, [r7, #4]
 805851e:	68fb      	ldr	r3, [r7, #12]
 8058520:	1ad3      	subs	r3, r2, r3
 8058522:	683a      	ldr	r2, [r7, #0]
 8058524:	4619      	mov	r1, r3
 8058526:	f7fe fe85 	bl	8057234 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 805852a:	f7ff f977 	bl	805781c <xTaskResumeAll>
 805852e:	4603      	mov	r3, r0
 8058530:	2b00      	cmp	r3, #0
 8058532:	d10a      	bne.n	805854a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8058534:	4b09      	ldr	r3, [pc, #36]	; (805855c <prvProcessTimerOrBlockTask+0x98>)
 8058536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 805853a:	601a      	str	r2, [r3, #0]
 805853c:	f3bf 8f4f 	dsb	sy
 8058540:	f3bf 8f6f 	isb	sy
}
 8058544:	e001      	b.n	805854a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8058546:	f7ff f969 	bl	805781c <xTaskResumeAll>
}
 805854a:	bf00      	nop
 805854c:	3710      	adds	r7, #16
 805854e:	46bd      	mov	sp, r7
 8058550:	bd80      	pop	{r7, pc}
 8058552:	bf00      	nop
 8058554:	20009c44 	.word	0x20009c44
 8058558:	20009c48 	.word	0x20009c48
 805855c:	e000ed04 	.word	0xe000ed04

08058560 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8058560:	b480      	push	{r7}
 8058562:	b085      	sub	sp, #20
 8058564:	af00      	add	r7, sp, #0
 8058566:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8058568:	4b0e      	ldr	r3, [pc, #56]	; (80585a4 <prvGetNextExpireTime+0x44>)
 805856a:	681b      	ldr	r3, [r3, #0]
 805856c:	681b      	ldr	r3, [r3, #0]
 805856e:	2b00      	cmp	r3, #0
 8058570:	d101      	bne.n	8058576 <prvGetNextExpireTime+0x16>
 8058572:	2201      	movs	r2, #1
 8058574:	e000      	b.n	8058578 <prvGetNextExpireTime+0x18>
 8058576:	2200      	movs	r2, #0
 8058578:	687b      	ldr	r3, [r7, #4]
 805857a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 805857c:	687b      	ldr	r3, [r7, #4]
 805857e:	681b      	ldr	r3, [r3, #0]
 8058580:	2b00      	cmp	r3, #0
 8058582:	d105      	bne.n	8058590 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8058584:	4b07      	ldr	r3, [pc, #28]	; (80585a4 <prvGetNextExpireTime+0x44>)
 8058586:	681b      	ldr	r3, [r3, #0]
 8058588:	68db      	ldr	r3, [r3, #12]
 805858a:	681b      	ldr	r3, [r3, #0]
 805858c:	60fb      	str	r3, [r7, #12]
 805858e:	e001      	b.n	8058594 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8058590:	2300      	movs	r3, #0
 8058592:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8058594:	68fb      	ldr	r3, [r7, #12]
}
 8058596:	4618      	mov	r0, r3
 8058598:	3714      	adds	r7, #20
 805859a:	46bd      	mov	sp, r7
 805859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80585a0:	4770      	bx	lr
 80585a2:	bf00      	nop
 80585a4:	20009c40 	.word	0x20009c40

080585a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80585a8:	b580      	push	{r7, lr}
 80585aa:	b084      	sub	sp, #16
 80585ac:	af00      	add	r7, sp, #0
 80585ae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80585b0:	f7ff f9d2 	bl	8057958 <xTaskGetTickCount>
 80585b4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80585b6:	4b0b      	ldr	r3, [pc, #44]	; (80585e4 <prvSampleTimeNow+0x3c>)
 80585b8:	681b      	ldr	r3, [r3, #0]
 80585ba:	68fa      	ldr	r2, [r7, #12]
 80585bc:	429a      	cmp	r2, r3
 80585be:	d205      	bcs.n	80585cc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80585c0:	f000 f936 	bl	8058830 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80585c4:	687b      	ldr	r3, [r7, #4]
 80585c6:	2201      	movs	r2, #1
 80585c8:	601a      	str	r2, [r3, #0]
 80585ca:	e002      	b.n	80585d2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80585cc:	687b      	ldr	r3, [r7, #4]
 80585ce:	2200      	movs	r2, #0
 80585d0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80585d2:	4a04      	ldr	r2, [pc, #16]	; (80585e4 <prvSampleTimeNow+0x3c>)
 80585d4:	68fb      	ldr	r3, [r7, #12]
 80585d6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80585d8:	68fb      	ldr	r3, [r7, #12]
}
 80585da:	4618      	mov	r0, r3
 80585dc:	3710      	adds	r7, #16
 80585de:	46bd      	mov	sp, r7
 80585e0:	bd80      	pop	{r7, pc}
 80585e2:	bf00      	nop
 80585e4:	20009c50 	.word	0x20009c50

080585e8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80585e8:	b580      	push	{r7, lr}
 80585ea:	b086      	sub	sp, #24
 80585ec:	af00      	add	r7, sp, #0
 80585ee:	60f8      	str	r0, [r7, #12]
 80585f0:	60b9      	str	r1, [r7, #8]
 80585f2:	607a      	str	r2, [r7, #4]
 80585f4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80585f6:	2300      	movs	r3, #0
 80585f8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80585fa:	68fb      	ldr	r3, [r7, #12]
 80585fc:	68ba      	ldr	r2, [r7, #8]
 80585fe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8058600:	68fb      	ldr	r3, [r7, #12]
 8058602:	68fa      	ldr	r2, [r7, #12]
 8058604:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8058606:	68ba      	ldr	r2, [r7, #8]
 8058608:	687b      	ldr	r3, [r7, #4]
 805860a:	429a      	cmp	r2, r3
 805860c:	d812      	bhi.n	8058634 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 805860e:	687a      	ldr	r2, [r7, #4]
 8058610:	683b      	ldr	r3, [r7, #0]
 8058612:	1ad2      	subs	r2, r2, r3
 8058614:	68fb      	ldr	r3, [r7, #12]
 8058616:	699b      	ldr	r3, [r3, #24]
 8058618:	429a      	cmp	r2, r3
 805861a:	d302      	bcc.n	8058622 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 805861c:	2301      	movs	r3, #1
 805861e:	617b      	str	r3, [r7, #20]
 8058620:	e01b      	b.n	805865a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8058622:	4b10      	ldr	r3, [pc, #64]	; (8058664 <prvInsertTimerInActiveList+0x7c>)
 8058624:	681a      	ldr	r2, [r3, #0]
 8058626:	68fb      	ldr	r3, [r7, #12]
 8058628:	3304      	adds	r3, #4
 805862a:	4619      	mov	r1, r3
 805862c:	4610      	mov	r0, r2
 805862e:	f7fe f82c 	bl	805668a <vListInsert>
 8058632:	e012      	b.n	805865a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8058634:	687a      	ldr	r2, [r7, #4]
 8058636:	683b      	ldr	r3, [r7, #0]
 8058638:	429a      	cmp	r2, r3
 805863a:	d206      	bcs.n	805864a <prvInsertTimerInActiveList+0x62>
 805863c:	68ba      	ldr	r2, [r7, #8]
 805863e:	683b      	ldr	r3, [r7, #0]
 8058640:	429a      	cmp	r2, r3
 8058642:	d302      	bcc.n	805864a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8058644:	2301      	movs	r3, #1
 8058646:	617b      	str	r3, [r7, #20]
 8058648:	e007      	b.n	805865a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 805864a:	4b07      	ldr	r3, [pc, #28]	; (8058668 <prvInsertTimerInActiveList+0x80>)
 805864c:	681a      	ldr	r2, [r3, #0]
 805864e:	68fb      	ldr	r3, [r7, #12]
 8058650:	3304      	adds	r3, #4
 8058652:	4619      	mov	r1, r3
 8058654:	4610      	mov	r0, r2
 8058656:	f7fe f818 	bl	805668a <vListInsert>
		}
	}

	return xProcessTimerNow;
 805865a:	697b      	ldr	r3, [r7, #20]
}
 805865c:	4618      	mov	r0, r3
 805865e:	3718      	adds	r7, #24
 8058660:	46bd      	mov	sp, r7
 8058662:	bd80      	pop	{r7, pc}
 8058664:	20009c44 	.word	0x20009c44
 8058668:	20009c40 	.word	0x20009c40

0805866c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 805866c:	b580      	push	{r7, lr}
 805866e:	b08e      	sub	sp, #56	; 0x38
 8058670:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8058672:	e0ca      	b.n	805880a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8058674:	687b      	ldr	r3, [r7, #4]
 8058676:	2b00      	cmp	r3, #0
 8058678:	da18      	bge.n	80586ac <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 805867a:	1d3b      	adds	r3, r7, #4
 805867c:	3304      	adds	r3, #4
 805867e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8058680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8058682:	2b00      	cmp	r3, #0
 8058684:	d10a      	bne.n	805869c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8058686:	f04f 0350 	mov.w	r3, #80	; 0x50
 805868a:	f383 8811 	msr	BASEPRI, r3
 805868e:	f3bf 8f6f 	isb	sy
 8058692:	f3bf 8f4f 	dsb	sy
 8058696:	61fb      	str	r3, [r7, #28]
}
 8058698:	bf00      	nop
 805869a:	e7fe      	b.n	805869a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 805869c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 805869e:	681b      	ldr	r3, [r3, #0]
 80586a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80586a2:	6850      	ldr	r0, [r2, #4]
 80586a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80586a6:	6892      	ldr	r2, [r2, #8]
 80586a8:	4611      	mov	r1, r2
 80586aa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80586ac:	687b      	ldr	r3, [r7, #4]
 80586ae:	2b00      	cmp	r3, #0
 80586b0:	f2c0 80aa 	blt.w	8058808 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80586b4:	68fb      	ldr	r3, [r7, #12]
 80586b6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80586b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80586ba:	695b      	ldr	r3, [r3, #20]
 80586bc:	2b00      	cmp	r3, #0
 80586be:	d004      	beq.n	80586ca <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80586c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80586c2:	3304      	adds	r3, #4
 80586c4:	4618      	mov	r0, r3
 80586c6:	f7fe f819 	bl	80566fc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80586ca:	463b      	mov	r3, r7
 80586cc:	4618      	mov	r0, r3
 80586ce:	f7ff ff6b 	bl	80585a8 <prvSampleTimeNow>
 80586d2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80586d4:	687b      	ldr	r3, [r7, #4]
 80586d6:	2b09      	cmp	r3, #9
 80586d8:	f200 8097 	bhi.w	805880a <prvProcessReceivedCommands+0x19e>
 80586dc:	a201      	add	r2, pc, #4	; (adr r2, 80586e4 <prvProcessReceivedCommands+0x78>)
 80586de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80586e2:	bf00      	nop
 80586e4:	0805870d 	.word	0x0805870d
 80586e8:	0805870d 	.word	0x0805870d
 80586ec:	0805870d 	.word	0x0805870d
 80586f0:	08058781 	.word	0x08058781
 80586f4:	08058795 	.word	0x08058795
 80586f8:	080587df 	.word	0x080587df
 80586fc:	0805870d 	.word	0x0805870d
 8058700:	0805870d 	.word	0x0805870d
 8058704:	08058781 	.word	0x08058781
 8058708:	08058795 	.word	0x08058795
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 805870c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 805870e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8058712:	f043 0301 	orr.w	r3, r3, #1
 8058716:	b2da      	uxtb	r2, r3
 8058718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 805871a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 805871e:	68ba      	ldr	r2, [r7, #8]
 8058720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8058722:	699b      	ldr	r3, [r3, #24]
 8058724:	18d1      	adds	r1, r2, r3
 8058726:	68bb      	ldr	r3, [r7, #8]
 8058728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 805872a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 805872c:	f7ff ff5c 	bl	80585e8 <prvInsertTimerInActiveList>
 8058730:	4603      	mov	r3, r0
 8058732:	2b00      	cmp	r3, #0
 8058734:	d069      	beq.n	805880a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8058736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8058738:	6a1b      	ldr	r3, [r3, #32]
 805873a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 805873c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 805873e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8058740:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8058744:	f003 0304 	and.w	r3, r3, #4
 8058748:	2b00      	cmp	r3, #0
 805874a:	d05e      	beq.n	805880a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 805874c:	68ba      	ldr	r2, [r7, #8]
 805874e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8058750:	699b      	ldr	r3, [r3, #24]
 8058752:	441a      	add	r2, r3
 8058754:	2300      	movs	r3, #0
 8058756:	9300      	str	r3, [sp, #0]
 8058758:	2300      	movs	r3, #0
 805875a:	2100      	movs	r1, #0
 805875c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 805875e:	f7ff fe05 	bl	805836c <xTimerGenericCommand>
 8058762:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8058764:	6a3b      	ldr	r3, [r7, #32]
 8058766:	2b00      	cmp	r3, #0
 8058768:	d14f      	bne.n	805880a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 805876a:	f04f 0350 	mov.w	r3, #80	; 0x50
 805876e:	f383 8811 	msr	BASEPRI, r3
 8058772:	f3bf 8f6f 	isb	sy
 8058776:	f3bf 8f4f 	dsb	sy
 805877a:	61bb      	str	r3, [r7, #24]
}
 805877c:	bf00      	nop
 805877e:	e7fe      	b.n	805877e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8058780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8058782:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8058786:	f023 0301 	bic.w	r3, r3, #1
 805878a:	b2da      	uxtb	r2, r3
 805878c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 805878e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8058792:	e03a      	b.n	805880a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8058794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8058796:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 805879a:	f043 0301 	orr.w	r3, r3, #1
 805879e:	b2da      	uxtb	r2, r3
 80587a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80587a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80587a6:	68ba      	ldr	r2, [r7, #8]
 80587a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80587aa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80587ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80587ae:	699b      	ldr	r3, [r3, #24]
 80587b0:	2b00      	cmp	r3, #0
 80587b2:	d10a      	bne.n	80587ca <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80587b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80587b8:	f383 8811 	msr	BASEPRI, r3
 80587bc:	f3bf 8f6f 	isb	sy
 80587c0:	f3bf 8f4f 	dsb	sy
 80587c4:	617b      	str	r3, [r7, #20]
}
 80587c6:	bf00      	nop
 80587c8:	e7fe      	b.n	80587c8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80587ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80587cc:	699a      	ldr	r2, [r3, #24]
 80587ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80587d0:	18d1      	adds	r1, r2, r3
 80587d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80587d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80587d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80587d8:	f7ff ff06 	bl	80585e8 <prvInsertTimerInActiveList>
					break;
 80587dc:	e015      	b.n	805880a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80587de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80587e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80587e4:	f003 0302 	and.w	r3, r3, #2
 80587e8:	2b00      	cmp	r3, #0
 80587ea:	d103      	bne.n	80587f4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80587ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80587ee:	f000 fc27 	bl	8059040 <vPortFree>
 80587f2:	e00a      	b.n	805880a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80587f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80587f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80587fa:	f023 0301 	bic.w	r3, r3, #1
 80587fe:	b2da      	uxtb	r2, r3
 8058800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8058802:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8058806:	e000      	b.n	805880a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8058808:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 805880a:	4b08      	ldr	r3, [pc, #32]	; (805882c <prvProcessReceivedCommands+0x1c0>)
 805880c:	681b      	ldr	r3, [r3, #0]
 805880e:	1d39      	adds	r1, r7, #4
 8058810:	2200      	movs	r2, #0
 8058812:	4618      	mov	r0, r3
 8058814:	f7fe fa74 	bl	8056d00 <xQueueReceive>
 8058818:	4603      	mov	r3, r0
 805881a:	2b00      	cmp	r3, #0
 805881c:	f47f af2a 	bne.w	8058674 <prvProcessReceivedCommands+0x8>
	}
}
 8058820:	bf00      	nop
 8058822:	bf00      	nop
 8058824:	3730      	adds	r7, #48	; 0x30
 8058826:	46bd      	mov	sp, r7
 8058828:	bd80      	pop	{r7, pc}
 805882a:	bf00      	nop
 805882c:	20009c48 	.word	0x20009c48

08058830 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8058830:	b580      	push	{r7, lr}
 8058832:	b088      	sub	sp, #32
 8058834:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8058836:	e048      	b.n	80588ca <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8058838:	4b2d      	ldr	r3, [pc, #180]	; (80588f0 <prvSwitchTimerLists+0xc0>)
 805883a:	681b      	ldr	r3, [r3, #0]
 805883c:	68db      	ldr	r3, [r3, #12]
 805883e:	681b      	ldr	r3, [r3, #0]
 8058840:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8058842:	4b2b      	ldr	r3, [pc, #172]	; (80588f0 <prvSwitchTimerLists+0xc0>)
 8058844:	681b      	ldr	r3, [r3, #0]
 8058846:	68db      	ldr	r3, [r3, #12]
 8058848:	68db      	ldr	r3, [r3, #12]
 805884a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 805884c:	68fb      	ldr	r3, [r7, #12]
 805884e:	3304      	adds	r3, #4
 8058850:	4618      	mov	r0, r3
 8058852:	f7fd ff53 	bl	80566fc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8058856:	68fb      	ldr	r3, [r7, #12]
 8058858:	6a1b      	ldr	r3, [r3, #32]
 805885a:	68f8      	ldr	r0, [r7, #12]
 805885c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 805885e:	68fb      	ldr	r3, [r7, #12]
 8058860:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8058864:	f003 0304 	and.w	r3, r3, #4
 8058868:	2b00      	cmp	r3, #0
 805886a:	d02e      	beq.n	80588ca <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 805886c:	68fb      	ldr	r3, [r7, #12]
 805886e:	699b      	ldr	r3, [r3, #24]
 8058870:	693a      	ldr	r2, [r7, #16]
 8058872:	4413      	add	r3, r2
 8058874:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8058876:	68ba      	ldr	r2, [r7, #8]
 8058878:	693b      	ldr	r3, [r7, #16]
 805887a:	429a      	cmp	r2, r3
 805887c:	d90e      	bls.n	805889c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 805887e:	68fb      	ldr	r3, [r7, #12]
 8058880:	68ba      	ldr	r2, [r7, #8]
 8058882:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8058884:	68fb      	ldr	r3, [r7, #12]
 8058886:	68fa      	ldr	r2, [r7, #12]
 8058888:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 805888a:	4b19      	ldr	r3, [pc, #100]	; (80588f0 <prvSwitchTimerLists+0xc0>)
 805888c:	681a      	ldr	r2, [r3, #0]
 805888e:	68fb      	ldr	r3, [r7, #12]
 8058890:	3304      	adds	r3, #4
 8058892:	4619      	mov	r1, r3
 8058894:	4610      	mov	r0, r2
 8058896:	f7fd fef8 	bl	805668a <vListInsert>
 805889a:	e016      	b.n	80588ca <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 805889c:	2300      	movs	r3, #0
 805889e:	9300      	str	r3, [sp, #0]
 80588a0:	2300      	movs	r3, #0
 80588a2:	693a      	ldr	r2, [r7, #16]
 80588a4:	2100      	movs	r1, #0
 80588a6:	68f8      	ldr	r0, [r7, #12]
 80588a8:	f7ff fd60 	bl	805836c <xTimerGenericCommand>
 80588ac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80588ae:	687b      	ldr	r3, [r7, #4]
 80588b0:	2b00      	cmp	r3, #0
 80588b2:	d10a      	bne.n	80588ca <prvSwitchTimerLists+0x9a>
	__asm volatile
 80588b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80588b8:	f383 8811 	msr	BASEPRI, r3
 80588bc:	f3bf 8f6f 	isb	sy
 80588c0:	f3bf 8f4f 	dsb	sy
 80588c4:	603b      	str	r3, [r7, #0]
}
 80588c6:	bf00      	nop
 80588c8:	e7fe      	b.n	80588c8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80588ca:	4b09      	ldr	r3, [pc, #36]	; (80588f0 <prvSwitchTimerLists+0xc0>)
 80588cc:	681b      	ldr	r3, [r3, #0]
 80588ce:	681b      	ldr	r3, [r3, #0]
 80588d0:	2b00      	cmp	r3, #0
 80588d2:	d1b1      	bne.n	8058838 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80588d4:	4b06      	ldr	r3, [pc, #24]	; (80588f0 <prvSwitchTimerLists+0xc0>)
 80588d6:	681b      	ldr	r3, [r3, #0]
 80588d8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80588da:	4b06      	ldr	r3, [pc, #24]	; (80588f4 <prvSwitchTimerLists+0xc4>)
 80588dc:	681b      	ldr	r3, [r3, #0]
 80588de:	4a04      	ldr	r2, [pc, #16]	; (80588f0 <prvSwitchTimerLists+0xc0>)
 80588e0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80588e2:	4a04      	ldr	r2, [pc, #16]	; (80588f4 <prvSwitchTimerLists+0xc4>)
 80588e4:	697b      	ldr	r3, [r7, #20]
 80588e6:	6013      	str	r3, [r2, #0]
}
 80588e8:	bf00      	nop
 80588ea:	3718      	adds	r7, #24
 80588ec:	46bd      	mov	sp, r7
 80588ee:	bd80      	pop	{r7, pc}
 80588f0:	20009c40 	.word	0x20009c40
 80588f4:	20009c44 	.word	0x20009c44

080588f8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80588f8:	b580      	push	{r7, lr}
 80588fa:	b082      	sub	sp, #8
 80588fc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80588fe:	f000 f9b1 	bl	8058c64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8058902:	4b15      	ldr	r3, [pc, #84]	; (8058958 <prvCheckForValidListAndQueue+0x60>)
 8058904:	681b      	ldr	r3, [r3, #0]
 8058906:	2b00      	cmp	r3, #0
 8058908:	d120      	bne.n	805894c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 805890a:	4814      	ldr	r0, [pc, #80]	; (805895c <prvCheckForValidListAndQueue+0x64>)
 805890c:	f7fd fe6c 	bl	80565e8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8058910:	4813      	ldr	r0, [pc, #76]	; (8058960 <prvCheckForValidListAndQueue+0x68>)
 8058912:	f7fd fe69 	bl	80565e8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8058916:	4b13      	ldr	r3, [pc, #76]	; (8058964 <prvCheckForValidListAndQueue+0x6c>)
 8058918:	4a10      	ldr	r2, [pc, #64]	; (805895c <prvCheckForValidListAndQueue+0x64>)
 805891a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 805891c:	4b12      	ldr	r3, [pc, #72]	; (8058968 <prvCheckForValidListAndQueue+0x70>)
 805891e:	4a10      	ldr	r2, [pc, #64]	; (8058960 <prvCheckForValidListAndQueue+0x68>)
 8058920:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8058922:	2300      	movs	r3, #0
 8058924:	9300      	str	r3, [sp, #0]
 8058926:	4b11      	ldr	r3, [pc, #68]	; (805896c <prvCheckForValidListAndQueue+0x74>)
 8058928:	4a11      	ldr	r2, [pc, #68]	; (8058970 <prvCheckForValidListAndQueue+0x78>)
 805892a:	2110      	movs	r1, #16
 805892c:	200a      	movs	r0, #10
 805892e:	f7fd ff77 	bl	8056820 <xQueueGenericCreateStatic>
 8058932:	4603      	mov	r3, r0
 8058934:	4a08      	ldr	r2, [pc, #32]	; (8058958 <prvCheckForValidListAndQueue+0x60>)
 8058936:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8058938:	4b07      	ldr	r3, [pc, #28]	; (8058958 <prvCheckForValidListAndQueue+0x60>)
 805893a:	681b      	ldr	r3, [r3, #0]
 805893c:	2b00      	cmp	r3, #0
 805893e:	d005      	beq.n	805894c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8058940:	4b05      	ldr	r3, [pc, #20]	; (8058958 <prvCheckForValidListAndQueue+0x60>)
 8058942:	681b      	ldr	r3, [r3, #0]
 8058944:	490b      	ldr	r1, [pc, #44]	; (8058974 <prvCheckForValidListAndQueue+0x7c>)
 8058946:	4618      	mov	r0, r3
 8058948:	f7fe fc4a 	bl	80571e0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 805894c:	f000 f9ba 	bl	8058cc4 <vPortExitCritical>
}
 8058950:	bf00      	nop
 8058952:	46bd      	mov	sp, r7
 8058954:	bd80      	pop	{r7, pc}
 8058956:	bf00      	nop
 8058958:	20009c48 	.word	0x20009c48
 805895c:	20009c18 	.word	0x20009c18
 8058960:	20009c2c 	.word	0x20009c2c
 8058964:	20009c40 	.word	0x20009c40
 8058968:	20009c44 	.word	0x20009c44
 805896c:	20009cf4 	.word	0x20009cf4
 8058970:	20009c54 	.word	0x20009c54
 8058974:	0806777c 	.word	0x0806777c

08058978 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 8058978:	b580      	push	{r7, lr}
 805897a:	b086      	sub	sp, #24
 805897c:	af00      	add	r7, sp, #0
 805897e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 8058980:	687b      	ldr	r3, [r7, #4]
 8058982:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 8058984:	687b      	ldr	r3, [r7, #4]
 8058986:	2b00      	cmp	r3, #0
 8058988:	d10a      	bne.n	80589a0 <xTimerIsTimerActive+0x28>
	__asm volatile
 805898a:	f04f 0350 	mov.w	r3, #80	; 0x50
 805898e:	f383 8811 	msr	BASEPRI, r3
 8058992:	f3bf 8f6f 	isb	sy
 8058996:	f3bf 8f4f 	dsb	sy
 805899a:	60fb      	str	r3, [r7, #12]
}
 805899c:	bf00      	nop
 805899e:	e7fe      	b.n	805899e <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 80589a0:	f000 f960 	bl	8058c64 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 80589a4:	693b      	ldr	r3, [r7, #16]
 80589a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80589aa:	f003 0301 	and.w	r3, r3, #1
 80589ae:	2b00      	cmp	r3, #0
 80589b0:	d102      	bne.n	80589b8 <xTimerIsTimerActive+0x40>
		{
			xReturn = pdFALSE;
 80589b2:	2300      	movs	r3, #0
 80589b4:	617b      	str	r3, [r7, #20]
 80589b6:	e001      	b.n	80589bc <xTimerIsTimerActive+0x44>
		}
		else
		{
			xReturn = pdTRUE;
 80589b8:	2301      	movs	r3, #1
 80589ba:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80589bc:	f000 f982 	bl	8058cc4 <vPortExitCritical>

	return xReturn;
 80589c0:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 80589c2:	4618      	mov	r0, r3
 80589c4:	3718      	adds	r7, #24
 80589c6:	46bd      	mov	sp, r7
 80589c8:	bd80      	pop	{r7, pc}

080589ca <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80589ca:	b580      	push	{r7, lr}
 80589cc:	b086      	sub	sp, #24
 80589ce:	af00      	add	r7, sp, #0
 80589d0:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 80589d2:	687b      	ldr	r3, [r7, #4]
 80589d4:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80589d6:	687b      	ldr	r3, [r7, #4]
 80589d8:	2b00      	cmp	r3, #0
 80589da:	d10a      	bne.n	80589f2 <pvTimerGetTimerID+0x28>
	__asm volatile
 80589dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80589e0:	f383 8811 	msr	BASEPRI, r3
 80589e4:	f3bf 8f6f 	isb	sy
 80589e8:	f3bf 8f4f 	dsb	sy
 80589ec:	60fb      	str	r3, [r7, #12]
}
 80589ee:	bf00      	nop
 80589f0:	e7fe      	b.n	80589f0 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 80589f2:	f000 f937 	bl	8058c64 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80589f6:	697b      	ldr	r3, [r7, #20]
 80589f8:	69db      	ldr	r3, [r3, #28]
 80589fa:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80589fc:	f000 f962 	bl	8058cc4 <vPortExitCritical>

	return pvReturn;
 8058a00:	693b      	ldr	r3, [r7, #16]
}
 8058a02:	4618      	mov	r0, r3
 8058a04:	3718      	adds	r7, #24
 8058a06:	46bd      	mov	sp, r7
 8058a08:	bd80      	pop	{r7, pc}
	...

08058a0c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8058a0c:	b480      	push	{r7}
 8058a0e:	b085      	sub	sp, #20
 8058a10:	af00      	add	r7, sp, #0
 8058a12:	60f8      	str	r0, [r7, #12]
 8058a14:	60b9      	str	r1, [r7, #8]
 8058a16:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8058a18:	68fb      	ldr	r3, [r7, #12]
 8058a1a:	3b04      	subs	r3, #4
 8058a1c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8058a1e:	68fb      	ldr	r3, [r7, #12]
 8058a20:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8058a24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8058a26:	68fb      	ldr	r3, [r7, #12]
 8058a28:	3b04      	subs	r3, #4
 8058a2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8058a2c:	68bb      	ldr	r3, [r7, #8]
 8058a2e:	f023 0201 	bic.w	r2, r3, #1
 8058a32:	68fb      	ldr	r3, [r7, #12]
 8058a34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8058a36:	68fb      	ldr	r3, [r7, #12]
 8058a38:	3b04      	subs	r3, #4
 8058a3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8058a3c:	4a0c      	ldr	r2, [pc, #48]	; (8058a70 <pxPortInitialiseStack+0x64>)
 8058a3e:	68fb      	ldr	r3, [r7, #12]
 8058a40:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8058a42:	68fb      	ldr	r3, [r7, #12]
 8058a44:	3b14      	subs	r3, #20
 8058a46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8058a48:	687a      	ldr	r2, [r7, #4]
 8058a4a:	68fb      	ldr	r3, [r7, #12]
 8058a4c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8058a4e:	68fb      	ldr	r3, [r7, #12]
 8058a50:	3b04      	subs	r3, #4
 8058a52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8058a54:	68fb      	ldr	r3, [r7, #12]
 8058a56:	f06f 0202 	mvn.w	r2, #2
 8058a5a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8058a5c:	68fb      	ldr	r3, [r7, #12]
 8058a5e:	3b20      	subs	r3, #32
 8058a60:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8058a62:	68fb      	ldr	r3, [r7, #12]
}
 8058a64:	4618      	mov	r0, r3
 8058a66:	3714      	adds	r7, #20
 8058a68:	46bd      	mov	sp, r7
 8058a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8058a6e:	4770      	bx	lr
 8058a70:	08058a75 	.word	0x08058a75

08058a74 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8058a74:	b480      	push	{r7}
 8058a76:	b085      	sub	sp, #20
 8058a78:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8058a7a:	2300      	movs	r3, #0
 8058a7c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8058a7e:	4b12      	ldr	r3, [pc, #72]	; (8058ac8 <prvTaskExitError+0x54>)
 8058a80:	681b      	ldr	r3, [r3, #0]
 8058a82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8058a86:	d00a      	beq.n	8058a9e <prvTaskExitError+0x2a>
	__asm volatile
 8058a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8058a8c:	f383 8811 	msr	BASEPRI, r3
 8058a90:	f3bf 8f6f 	isb	sy
 8058a94:	f3bf 8f4f 	dsb	sy
 8058a98:	60fb      	str	r3, [r7, #12]
}
 8058a9a:	bf00      	nop
 8058a9c:	e7fe      	b.n	8058a9c <prvTaskExitError+0x28>
	__asm volatile
 8058a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8058aa2:	f383 8811 	msr	BASEPRI, r3
 8058aa6:	f3bf 8f6f 	isb	sy
 8058aaa:	f3bf 8f4f 	dsb	sy
 8058aae:	60bb      	str	r3, [r7, #8]
}
 8058ab0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8058ab2:	bf00      	nop
 8058ab4:	687b      	ldr	r3, [r7, #4]
 8058ab6:	2b00      	cmp	r3, #0
 8058ab8:	d0fc      	beq.n	8058ab4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8058aba:	bf00      	nop
 8058abc:	bf00      	nop
 8058abe:	3714      	adds	r7, #20
 8058ac0:	46bd      	mov	sp, r7
 8058ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8058ac6:	4770      	bx	lr
 8058ac8:	20007cb4 	.word	0x20007cb4
 8058acc:	00000000 	.word	0x00000000

08058ad0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8058ad0:	4b07      	ldr	r3, [pc, #28]	; (8058af0 <pxCurrentTCBConst2>)
 8058ad2:	6819      	ldr	r1, [r3, #0]
 8058ad4:	6808      	ldr	r0, [r1, #0]
 8058ad6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8058ada:	f380 8809 	msr	PSP, r0
 8058ade:	f3bf 8f6f 	isb	sy
 8058ae2:	f04f 0000 	mov.w	r0, #0
 8058ae6:	f380 8811 	msr	BASEPRI, r0
 8058aea:	4770      	bx	lr
 8058aec:	f3af 8000 	nop.w

08058af0 <pxCurrentTCBConst2>:
 8058af0:	20009718 	.word	0x20009718
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8058af4:	bf00      	nop
 8058af6:	bf00      	nop

08058af8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8058af8:	4808      	ldr	r0, [pc, #32]	; (8058b1c <prvPortStartFirstTask+0x24>)
 8058afa:	6800      	ldr	r0, [r0, #0]
 8058afc:	6800      	ldr	r0, [r0, #0]
 8058afe:	f380 8808 	msr	MSP, r0
 8058b02:	f04f 0000 	mov.w	r0, #0
 8058b06:	f380 8814 	msr	CONTROL, r0
 8058b0a:	b662      	cpsie	i
 8058b0c:	b661      	cpsie	f
 8058b0e:	f3bf 8f4f 	dsb	sy
 8058b12:	f3bf 8f6f 	isb	sy
 8058b16:	df00      	svc	0
 8058b18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8058b1a:	bf00      	nop
 8058b1c:	e000ed08 	.word	0xe000ed08

08058b20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8058b20:	b580      	push	{r7, lr}
 8058b22:	b086      	sub	sp, #24
 8058b24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8058b26:	4b46      	ldr	r3, [pc, #280]	; (8058c40 <xPortStartScheduler+0x120>)
 8058b28:	681b      	ldr	r3, [r3, #0]
 8058b2a:	4a46      	ldr	r2, [pc, #280]	; (8058c44 <xPortStartScheduler+0x124>)
 8058b2c:	4293      	cmp	r3, r2
 8058b2e:	d10a      	bne.n	8058b46 <xPortStartScheduler+0x26>
	__asm volatile
 8058b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8058b34:	f383 8811 	msr	BASEPRI, r3
 8058b38:	f3bf 8f6f 	isb	sy
 8058b3c:	f3bf 8f4f 	dsb	sy
 8058b40:	613b      	str	r3, [r7, #16]
}
 8058b42:	bf00      	nop
 8058b44:	e7fe      	b.n	8058b44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8058b46:	4b3e      	ldr	r3, [pc, #248]	; (8058c40 <xPortStartScheduler+0x120>)
 8058b48:	681b      	ldr	r3, [r3, #0]
 8058b4a:	4a3f      	ldr	r2, [pc, #252]	; (8058c48 <xPortStartScheduler+0x128>)
 8058b4c:	4293      	cmp	r3, r2
 8058b4e:	d10a      	bne.n	8058b66 <xPortStartScheduler+0x46>
	__asm volatile
 8058b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8058b54:	f383 8811 	msr	BASEPRI, r3
 8058b58:	f3bf 8f6f 	isb	sy
 8058b5c:	f3bf 8f4f 	dsb	sy
 8058b60:	60fb      	str	r3, [r7, #12]
}
 8058b62:	bf00      	nop
 8058b64:	e7fe      	b.n	8058b64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8058b66:	4b39      	ldr	r3, [pc, #228]	; (8058c4c <xPortStartScheduler+0x12c>)
 8058b68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8058b6a:	697b      	ldr	r3, [r7, #20]
 8058b6c:	781b      	ldrb	r3, [r3, #0]
 8058b6e:	b2db      	uxtb	r3, r3
 8058b70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8058b72:	697b      	ldr	r3, [r7, #20]
 8058b74:	22ff      	movs	r2, #255	; 0xff
 8058b76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8058b78:	697b      	ldr	r3, [r7, #20]
 8058b7a:	781b      	ldrb	r3, [r3, #0]
 8058b7c:	b2db      	uxtb	r3, r3
 8058b7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8058b80:	78fb      	ldrb	r3, [r7, #3]
 8058b82:	b2db      	uxtb	r3, r3
 8058b84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8058b88:	b2da      	uxtb	r2, r3
 8058b8a:	4b31      	ldr	r3, [pc, #196]	; (8058c50 <xPortStartScheduler+0x130>)
 8058b8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8058b8e:	4b31      	ldr	r3, [pc, #196]	; (8058c54 <xPortStartScheduler+0x134>)
 8058b90:	2207      	movs	r2, #7
 8058b92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8058b94:	e009      	b.n	8058baa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8058b96:	4b2f      	ldr	r3, [pc, #188]	; (8058c54 <xPortStartScheduler+0x134>)
 8058b98:	681b      	ldr	r3, [r3, #0]
 8058b9a:	3b01      	subs	r3, #1
 8058b9c:	4a2d      	ldr	r2, [pc, #180]	; (8058c54 <xPortStartScheduler+0x134>)
 8058b9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8058ba0:	78fb      	ldrb	r3, [r7, #3]
 8058ba2:	b2db      	uxtb	r3, r3
 8058ba4:	005b      	lsls	r3, r3, #1
 8058ba6:	b2db      	uxtb	r3, r3
 8058ba8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8058baa:	78fb      	ldrb	r3, [r7, #3]
 8058bac:	b2db      	uxtb	r3, r3
 8058bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8058bb2:	2b80      	cmp	r3, #128	; 0x80
 8058bb4:	d0ef      	beq.n	8058b96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8058bb6:	4b27      	ldr	r3, [pc, #156]	; (8058c54 <xPortStartScheduler+0x134>)
 8058bb8:	681b      	ldr	r3, [r3, #0]
 8058bba:	f1c3 0307 	rsb	r3, r3, #7
 8058bbe:	2b04      	cmp	r3, #4
 8058bc0:	d00a      	beq.n	8058bd8 <xPortStartScheduler+0xb8>
	__asm volatile
 8058bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8058bc6:	f383 8811 	msr	BASEPRI, r3
 8058bca:	f3bf 8f6f 	isb	sy
 8058bce:	f3bf 8f4f 	dsb	sy
 8058bd2:	60bb      	str	r3, [r7, #8]
}
 8058bd4:	bf00      	nop
 8058bd6:	e7fe      	b.n	8058bd6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8058bd8:	4b1e      	ldr	r3, [pc, #120]	; (8058c54 <xPortStartScheduler+0x134>)
 8058bda:	681b      	ldr	r3, [r3, #0]
 8058bdc:	021b      	lsls	r3, r3, #8
 8058bde:	4a1d      	ldr	r2, [pc, #116]	; (8058c54 <xPortStartScheduler+0x134>)
 8058be0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8058be2:	4b1c      	ldr	r3, [pc, #112]	; (8058c54 <xPortStartScheduler+0x134>)
 8058be4:	681b      	ldr	r3, [r3, #0]
 8058be6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8058bea:	4a1a      	ldr	r2, [pc, #104]	; (8058c54 <xPortStartScheduler+0x134>)
 8058bec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8058bee:	687b      	ldr	r3, [r7, #4]
 8058bf0:	b2da      	uxtb	r2, r3
 8058bf2:	697b      	ldr	r3, [r7, #20]
 8058bf4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8058bf6:	4b18      	ldr	r3, [pc, #96]	; (8058c58 <xPortStartScheduler+0x138>)
 8058bf8:	681b      	ldr	r3, [r3, #0]
 8058bfa:	4a17      	ldr	r2, [pc, #92]	; (8058c58 <xPortStartScheduler+0x138>)
 8058bfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8058c00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8058c02:	4b15      	ldr	r3, [pc, #84]	; (8058c58 <xPortStartScheduler+0x138>)
 8058c04:	681b      	ldr	r3, [r3, #0]
 8058c06:	4a14      	ldr	r2, [pc, #80]	; (8058c58 <xPortStartScheduler+0x138>)
 8058c08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8058c0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8058c0e:	f000 f8dd 	bl	8058dcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8058c12:	4b12      	ldr	r3, [pc, #72]	; (8058c5c <xPortStartScheduler+0x13c>)
 8058c14:	2200      	movs	r2, #0
 8058c16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8058c18:	f000 f8fc 	bl	8058e14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8058c1c:	4b10      	ldr	r3, [pc, #64]	; (8058c60 <xPortStartScheduler+0x140>)
 8058c1e:	681b      	ldr	r3, [r3, #0]
 8058c20:	4a0f      	ldr	r2, [pc, #60]	; (8058c60 <xPortStartScheduler+0x140>)
 8058c22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8058c26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8058c28:	f7ff ff66 	bl	8058af8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8058c2c:	f7fe ff70 	bl	8057b10 <vTaskSwitchContext>
	prvTaskExitError();
 8058c30:	f7ff ff20 	bl	8058a74 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8058c34:	2300      	movs	r3, #0
}
 8058c36:	4618      	mov	r0, r3
 8058c38:	3718      	adds	r7, #24
 8058c3a:	46bd      	mov	sp, r7
 8058c3c:	bd80      	pop	{r7, pc}
 8058c3e:	bf00      	nop
 8058c40:	e000ed00 	.word	0xe000ed00
 8058c44:	410fc271 	.word	0x410fc271
 8058c48:	410fc270 	.word	0x410fc270
 8058c4c:	e000e400 	.word	0xe000e400
 8058c50:	20009d44 	.word	0x20009d44
 8058c54:	20009d48 	.word	0x20009d48
 8058c58:	e000ed20 	.word	0xe000ed20
 8058c5c:	20007cb4 	.word	0x20007cb4
 8058c60:	e000ef34 	.word	0xe000ef34

08058c64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8058c64:	b480      	push	{r7}
 8058c66:	b083      	sub	sp, #12
 8058c68:	af00      	add	r7, sp, #0
	__asm volatile
 8058c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8058c6e:	f383 8811 	msr	BASEPRI, r3
 8058c72:	f3bf 8f6f 	isb	sy
 8058c76:	f3bf 8f4f 	dsb	sy
 8058c7a:	607b      	str	r3, [r7, #4]
}
 8058c7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8058c7e:	4b0f      	ldr	r3, [pc, #60]	; (8058cbc <vPortEnterCritical+0x58>)
 8058c80:	681b      	ldr	r3, [r3, #0]
 8058c82:	3301      	adds	r3, #1
 8058c84:	4a0d      	ldr	r2, [pc, #52]	; (8058cbc <vPortEnterCritical+0x58>)
 8058c86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8058c88:	4b0c      	ldr	r3, [pc, #48]	; (8058cbc <vPortEnterCritical+0x58>)
 8058c8a:	681b      	ldr	r3, [r3, #0]
 8058c8c:	2b01      	cmp	r3, #1
 8058c8e:	d10f      	bne.n	8058cb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8058c90:	4b0b      	ldr	r3, [pc, #44]	; (8058cc0 <vPortEnterCritical+0x5c>)
 8058c92:	681b      	ldr	r3, [r3, #0]
 8058c94:	b2db      	uxtb	r3, r3
 8058c96:	2b00      	cmp	r3, #0
 8058c98:	d00a      	beq.n	8058cb0 <vPortEnterCritical+0x4c>
	__asm volatile
 8058c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8058c9e:	f383 8811 	msr	BASEPRI, r3
 8058ca2:	f3bf 8f6f 	isb	sy
 8058ca6:	f3bf 8f4f 	dsb	sy
 8058caa:	603b      	str	r3, [r7, #0]
}
 8058cac:	bf00      	nop
 8058cae:	e7fe      	b.n	8058cae <vPortEnterCritical+0x4a>
	}
}
 8058cb0:	bf00      	nop
 8058cb2:	370c      	adds	r7, #12
 8058cb4:	46bd      	mov	sp, r7
 8058cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8058cba:	4770      	bx	lr
 8058cbc:	20007cb4 	.word	0x20007cb4
 8058cc0:	e000ed04 	.word	0xe000ed04

08058cc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8058cc4:	b480      	push	{r7}
 8058cc6:	b083      	sub	sp, #12
 8058cc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8058cca:	4b12      	ldr	r3, [pc, #72]	; (8058d14 <vPortExitCritical+0x50>)
 8058ccc:	681b      	ldr	r3, [r3, #0]
 8058cce:	2b00      	cmp	r3, #0
 8058cd0:	d10a      	bne.n	8058ce8 <vPortExitCritical+0x24>
	__asm volatile
 8058cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8058cd6:	f383 8811 	msr	BASEPRI, r3
 8058cda:	f3bf 8f6f 	isb	sy
 8058cde:	f3bf 8f4f 	dsb	sy
 8058ce2:	607b      	str	r3, [r7, #4]
}
 8058ce4:	bf00      	nop
 8058ce6:	e7fe      	b.n	8058ce6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8058ce8:	4b0a      	ldr	r3, [pc, #40]	; (8058d14 <vPortExitCritical+0x50>)
 8058cea:	681b      	ldr	r3, [r3, #0]
 8058cec:	3b01      	subs	r3, #1
 8058cee:	4a09      	ldr	r2, [pc, #36]	; (8058d14 <vPortExitCritical+0x50>)
 8058cf0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8058cf2:	4b08      	ldr	r3, [pc, #32]	; (8058d14 <vPortExitCritical+0x50>)
 8058cf4:	681b      	ldr	r3, [r3, #0]
 8058cf6:	2b00      	cmp	r3, #0
 8058cf8:	d105      	bne.n	8058d06 <vPortExitCritical+0x42>
 8058cfa:	2300      	movs	r3, #0
 8058cfc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8058cfe:	683b      	ldr	r3, [r7, #0]
 8058d00:	f383 8811 	msr	BASEPRI, r3
}
 8058d04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8058d06:	bf00      	nop
 8058d08:	370c      	adds	r7, #12
 8058d0a:	46bd      	mov	sp, r7
 8058d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8058d10:	4770      	bx	lr
 8058d12:	bf00      	nop
 8058d14:	20007cb4 	.word	0x20007cb4
	...

08058d20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8058d20:	f3ef 8009 	mrs	r0, PSP
 8058d24:	f3bf 8f6f 	isb	sy
 8058d28:	4b15      	ldr	r3, [pc, #84]	; (8058d80 <pxCurrentTCBConst>)
 8058d2a:	681a      	ldr	r2, [r3, #0]
 8058d2c:	f01e 0f10 	tst.w	lr, #16
 8058d30:	bf08      	it	eq
 8058d32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8058d36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8058d3a:	6010      	str	r0, [r2, #0]
 8058d3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8058d40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8058d44:	f380 8811 	msr	BASEPRI, r0
 8058d48:	f3bf 8f4f 	dsb	sy
 8058d4c:	f3bf 8f6f 	isb	sy
 8058d50:	f7fe fede 	bl	8057b10 <vTaskSwitchContext>
 8058d54:	f04f 0000 	mov.w	r0, #0
 8058d58:	f380 8811 	msr	BASEPRI, r0
 8058d5c:	bc09      	pop	{r0, r3}
 8058d5e:	6819      	ldr	r1, [r3, #0]
 8058d60:	6808      	ldr	r0, [r1, #0]
 8058d62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8058d66:	f01e 0f10 	tst.w	lr, #16
 8058d6a:	bf08      	it	eq
 8058d6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8058d70:	f380 8809 	msr	PSP, r0
 8058d74:	f3bf 8f6f 	isb	sy
 8058d78:	4770      	bx	lr
 8058d7a:	bf00      	nop
 8058d7c:	f3af 8000 	nop.w

08058d80 <pxCurrentTCBConst>:
 8058d80:	20009718 	.word	0x20009718
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8058d84:	bf00      	nop
 8058d86:	bf00      	nop

08058d88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8058d88:	b580      	push	{r7, lr}
 8058d8a:	b082      	sub	sp, #8
 8058d8c:	af00      	add	r7, sp, #0
	__asm volatile
 8058d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8058d92:	f383 8811 	msr	BASEPRI, r3
 8058d96:	f3bf 8f6f 	isb	sy
 8058d9a:	f3bf 8f4f 	dsb	sy
 8058d9e:	607b      	str	r3, [r7, #4]
}
 8058da0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8058da2:	f7fe fdfb 	bl	805799c <xTaskIncrementTick>
 8058da6:	4603      	mov	r3, r0
 8058da8:	2b00      	cmp	r3, #0
 8058daa:	d003      	beq.n	8058db4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8058dac:	4b06      	ldr	r3, [pc, #24]	; (8058dc8 <xPortSysTickHandler+0x40>)
 8058dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8058db2:	601a      	str	r2, [r3, #0]
 8058db4:	2300      	movs	r3, #0
 8058db6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8058db8:	683b      	ldr	r3, [r7, #0]
 8058dba:	f383 8811 	msr	BASEPRI, r3
}
 8058dbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8058dc0:	bf00      	nop
 8058dc2:	3708      	adds	r7, #8
 8058dc4:	46bd      	mov	sp, r7
 8058dc6:	bd80      	pop	{r7, pc}
 8058dc8:	e000ed04 	.word	0xe000ed04

08058dcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8058dcc:	b480      	push	{r7}
 8058dce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8058dd0:	4b0b      	ldr	r3, [pc, #44]	; (8058e00 <vPortSetupTimerInterrupt+0x34>)
 8058dd2:	2200      	movs	r2, #0
 8058dd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8058dd6:	4b0b      	ldr	r3, [pc, #44]	; (8058e04 <vPortSetupTimerInterrupt+0x38>)
 8058dd8:	2200      	movs	r2, #0
 8058dda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8058ddc:	4b0a      	ldr	r3, [pc, #40]	; (8058e08 <vPortSetupTimerInterrupt+0x3c>)
 8058dde:	681b      	ldr	r3, [r3, #0]
 8058de0:	4a0a      	ldr	r2, [pc, #40]	; (8058e0c <vPortSetupTimerInterrupt+0x40>)
 8058de2:	fba2 2303 	umull	r2, r3, r2, r3
 8058de6:	099b      	lsrs	r3, r3, #6
 8058de8:	4a09      	ldr	r2, [pc, #36]	; (8058e10 <vPortSetupTimerInterrupt+0x44>)
 8058dea:	3b01      	subs	r3, #1
 8058dec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8058dee:	4b04      	ldr	r3, [pc, #16]	; (8058e00 <vPortSetupTimerInterrupt+0x34>)
 8058df0:	2207      	movs	r2, #7
 8058df2:	601a      	str	r2, [r3, #0]
}
 8058df4:	bf00      	nop
 8058df6:	46bd      	mov	sp, r7
 8058df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8058dfc:	4770      	bx	lr
 8058dfe:	bf00      	nop
 8058e00:	e000e010 	.word	0xe000e010
 8058e04:	e000e018 	.word	0xe000e018
 8058e08:	20007c54 	.word	0x20007c54
 8058e0c:	10624dd3 	.word	0x10624dd3
 8058e10:	e000e014 	.word	0xe000e014

08058e14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8058e14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8058e24 <vPortEnableVFP+0x10>
 8058e18:	6801      	ldr	r1, [r0, #0]
 8058e1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8058e1e:	6001      	str	r1, [r0, #0]
 8058e20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8058e22:	bf00      	nop
 8058e24:	e000ed88 	.word	0xe000ed88

08058e28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8058e28:	b480      	push	{r7}
 8058e2a:	b085      	sub	sp, #20
 8058e2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8058e2e:	f3ef 8305 	mrs	r3, IPSR
 8058e32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8058e34:	68fb      	ldr	r3, [r7, #12]
 8058e36:	2b0f      	cmp	r3, #15
 8058e38:	d914      	bls.n	8058e64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8058e3a:	4a17      	ldr	r2, [pc, #92]	; (8058e98 <vPortValidateInterruptPriority+0x70>)
 8058e3c:	68fb      	ldr	r3, [r7, #12]
 8058e3e:	4413      	add	r3, r2
 8058e40:	781b      	ldrb	r3, [r3, #0]
 8058e42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8058e44:	4b15      	ldr	r3, [pc, #84]	; (8058e9c <vPortValidateInterruptPriority+0x74>)
 8058e46:	781b      	ldrb	r3, [r3, #0]
 8058e48:	7afa      	ldrb	r2, [r7, #11]
 8058e4a:	429a      	cmp	r2, r3
 8058e4c:	d20a      	bcs.n	8058e64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8058e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8058e52:	f383 8811 	msr	BASEPRI, r3
 8058e56:	f3bf 8f6f 	isb	sy
 8058e5a:	f3bf 8f4f 	dsb	sy
 8058e5e:	607b      	str	r3, [r7, #4]
}
 8058e60:	bf00      	nop
 8058e62:	e7fe      	b.n	8058e62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8058e64:	4b0e      	ldr	r3, [pc, #56]	; (8058ea0 <vPortValidateInterruptPriority+0x78>)
 8058e66:	681b      	ldr	r3, [r3, #0]
 8058e68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8058e6c:	4b0d      	ldr	r3, [pc, #52]	; (8058ea4 <vPortValidateInterruptPriority+0x7c>)
 8058e6e:	681b      	ldr	r3, [r3, #0]
 8058e70:	429a      	cmp	r2, r3
 8058e72:	d90a      	bls.n	8058e8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8058e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8058e78:	f383 8811 	msr	BASEPRI, r3
 8058e7c:	f3bf 8f6f 	isb	sy
 8058e80:	f3bf 8f4f 	dsb	sy
 8058e84:	603b      	str	r3, [r7, #0]
}
 8058e86:	bf00      	nop
 8058e88:	e7fe      	b.n	8058e88 <vPortValidateInterruptPriority+0x60>
	}
 8058e8a:	bf00      	nop
 8058e8c:	3714      	adds	r7, #20
 8058e8e:	46bd      	mov	sp, r7
 8058e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8058e94:	4770      	bx	lr
 8058e96:	bf00      	nop
 8058e98:	e000e3f0 	.word	0xe000e3f0
 8058e9c:	20009d44 	.word	0x20009d44
 8058ea0:	e000ed0c 	.word	0xe000ed0c
 8058ea4:	20009d48 	.word	0x20009d48

08058ea8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8058ea8:	b580      	push	{r7, lr}
 8058eaa:	b08a      	sub	sp, #40	; 0x28
 8058eac:	af00      	add	r7, sp, #0
 8058eae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8058eb0:	2300      	movs	r3, #0
 8058eb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8058eb4:	f7fe fca4 	bl	8057800 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8058eb8:	4b5b      	ldr	r3, [pc, #364]	; (8059028 <pvPortMalloc+0x180>)
 8058eba:	681b      	ldr	r3, [r3, #0]
 8058ebc:	2b00      	cmp	r3, #0
 8058ebe:	d101      	bne.n	8058ec4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8058ec0:	f000 f920 	bl	8059104 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8058ec4:	4b59      	ldr	r3, [pc, #356]	; (805902c <pvPortMalloc+0x184>)
 8058ec6:	681a      	ldr	r2, [r3, #0]
 8058ec8:	687b      	ldr	r3, [r7, #4]
 8058eca:	4013      	ands	r3, r2
 8058ecc:	2b00      	cmp	r3, #0
 8058ece:	f040 8093 	bne.w	8058ff8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8058ed2:	687b      	ldr	r3, [r7, #4]
 8058ed4:	2b00      	cmp	r3, #0
 8058ed6:	d01d      	beq.n	8058f14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8058ed8:	2208      	movs	r2, #8
 8058eda:	687b      	ldr	r3, [r7, #4]
 8058edc:	4413      	add	r3, r2
 8058ede:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8058ee0:	687b      	ldr	r3, [r7, #4]
 8058ee2:	f003 0307 	and.w	r3, r3, #7
 8058ee6:	2b00      	cmp	r3, #0
 8058ee8:	d014      	beq.n	8058f14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8058eea:	687b      	ldr	r3, [r7, #4]
 8058eec:	f023 0307 	bic.w	r3, r3, #7
 8058ef0:	3308      	adds	r3, #8
 8058ef2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8058ef4:	687b      	ldr	r3, [r7, #4]
 8058ef6:	f003 0307 	and.w	r3, r3, #7
 8058efa:	2b00      	cmp	r3, #0
 8058efc:	d00a      	beq.n	8058f14 <pvPortMalloc+0x6c>
	__asm volatile
 8058efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8058f02:	f383 8811 	msr	BASEPRI, r3
 8058f06:	f3bf 8f6f 	isb	sy
 8058f0a:	f3bf 8f4f 	dsb	sy
 8058f0e:	617b      	str	r3, [r7, #20]
}
 8058f10:	bf00      	nop
 8058f12:	e7fe      	b.n	8058f12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8058f14:	687b      	ldr	r3, [r7, #4]
 8058f16:	2b00      	cmp	r3, #0
 8058f18:	d06e      	beq.n	8058ff8 <pvPortMalloc+0x150>
 8058f1a:	4b45      	ldr	r3, [pc, #276]	; (8059030 <pvPortMalloc+0x188>)
 8058f1c:	681b      	ldr	r3, [r3, #0]
 8058f1e:	687a      	ldr	r2, [r7, #4]
 8058f20:	429a      	cmp	r2, r3
 8058f22:	d869      	bhi.n	8058ff8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8058f24:	4b43      	ldr	r3, [pc, #268]	; (8059034 <pvPortMalloc+0x18c>)
 8058f26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8058f28:	4b42      	ldr	r3, [pc, #264]	; (8059034 <pvPortMalloc+0x18c>)
 8058f2a:	681b      	ldr	r3, [r3, #0]
 8058f2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8058f2e:	e004      	b.n	8058f3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8058f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8058f32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8058f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8058f36:	681b      	ldr	r3, [r3, #0]
 8058f38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8058f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8058f3c:	685b      	ldr	r3, [r3, #4]
 8058f3e:	687a      	ldr	r2, [r7, #4]
 8058f40:	429a      	cmp	r2, r3
 8058f42:	d903      	bls.n	8058f4c <pvPortMalloc+0xa4>
 8058f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8058f46:	681b      	ldr	r3, [r3, #0]
 8058f48:	2b00      	cmp	r3, #0
 8058f4a:	d1f1      	bne.n	8058f30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8058f4c:	4b36      	ldr	r3, [pc, #216]	; (8059028 <pvPortMalloc+0x180>)
 8058f4e:	681b      	ldr	r3, [r3, #0]
 8058f50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8058f52:	429a      	cmp	r2, r3
 8058f54:	d050      	beq.n	8058ff8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8058f56:	6a3b      	ldr	r3, [r7, #32]
 8058f58:	681b      	ldr	r3, [r3, #0]
 8058f5a:	2208      	movs	r2, #8
 8058f5c:	4413      	add	r3, r2
 8058f5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8058f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8058f62:	681a      	ldr	r2, [r3, #0]
 8058f64:	6a3b      	ldr	r3, [r7, #32]
 8058f66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8058f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8058f6a:	685a      	ldr	r2, [r3, #4]
 8058f6c:	687b      	ldr	r3, [r7, #4]
 8058f6e:	1ad2      	subs	r2, r2, r3
 8058f70:	2308      	movs	r3, #8
 8058f72:	005b      	lsls	r3, r3, #1
 8058f74:	429a      	cmp	r2, r3
 8058f76:	d91f      	bls.n	8058fb8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8058f78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8058f7a:	687b      	ldr	r3, [r7, #4]
 8058f7c:	4413      	add	r3, r2
 8058f7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8058f80:	69bb      	ldr	r3, [r7, #24]
 8058f82:	f003 0307 	and.w	r3, r3, #7
 8058f86:	2b00      	cmp	r3, #0
 8058f88:	d00a      	beq.n	8058fa0 <pvPortMalloc+0xf8>
	__asm volatile
 8058f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8058f8e:	f383 8811 	msr	BASEPRI, r3
 8058f92:	f3bf 8f6f 	isb	sy
 8058f96:	f3bf 8f4f 	dsb	sy
 8058f9a:	613b      	str	r3, [r7, #16]
}
 8058f9c:	bf00      	nop
 8058f9e:	e7fe      	b.n	8058f9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8058fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8058fa2:	685a      	ldr	r2, [r3, #4]
 8058fa4:	687b      	ldr	r3, [r7, #4]
 8058fa6:	1ad2      	subs	r2, r2, r3
 8058fa8:	69bb      	ldr	r3, [r7, #24]
 8058faa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8058fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8058fae:	687a      	ldr	r2, [r7, #4]
 8058fb0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8058fb2:	69b8      	ldr	r0, [r7, #24]
 8058fb4:	f000 f908 	bl	80591c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8058fb8:	4b1d      	ldr	r3, [pc, #116]	; (8059030 <pvPortMalloc+0x188>)
 8058fba:	681a      	ldr	r2, [r3, #0]
 8058fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8058fbe:	685b      	ldr	r3, [r3, #4]
 8058fc0:	1ad3      	subs	r3, r2, r3
 8058fc2:	4a1b      	ldr	r2, [pc, #108]	; (8059030 <pvPortMalloc+0x188>)
 8058fc4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8058fc6:	4b1a      	ldr	r3, [pc, #104]	; (8059030 <pvPortMalloc+0x188>)
 8058fc8:	681a      	ldr	r2, [r3, #0]
 8058fca:	4b1b      	ldr	r3, [pc, #108]	; (8059038 <pvPortMalloc+0x190>)
 8058fcc:	681b      	ldr	r3, [r3, #0]
 8058fce:	429a      	cmp	r2, r3
 8058fd0:	d203      	bcs.n	8058fda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8058fd2:	4b17      	ldr	r3, [pc, #92]	; (8059030 <pvPortMalloc+0x188>)
 8058fd4:	681b      	ldr	r3, [r3, #0]
 8058fd6:	4a18      	ldr	r2, [pc, #96]	; (8059038 <pvPortMalloc+0x190>)
 8058fd8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8058fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8058fdc:	685a      	ldr	r2, [r3, #4]
 8058fde:	4b13      	ldr	r3, [pc, #76]	; (805902c <pvPortMalloc+0x184>)
 8058fe0:	681b      	ldr	r3, [r3, #0]
 8058fe2:	431a      	orrs	r2, r3
 8058fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8058fe6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8058fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8058fea:	2200      	movs	r2, #0
 8058fec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8058fee:	4b13      	ldr	r3, [pc, #76]	; (805903c <pvPortMalloc+0x194>)
 8058ff0:	681b      	ldr	r3, [r3, #0]
 8058ff2:	3301      	adds	r3, #1
 8058ff4:	4a11      	ldr	r2, [pc, #68]	; (805903c <pvPortMalloc+0x194>)
 8058ff6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8058ff8:	f7fe fc10 	bl	805781c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8058ffc:	69fb      	ldr	r3, [r7, #28]
 8058ffe:	f003 0307 	and.w	r3, r3, #7
 8059002:	2b00      	cmp	r3, #0
 8059004:	d00a      	beq.n	805901c <pvPortMalloc+0x174>
	__asm volatile
 8059006:	f04f 0350 	mov.w	r3, #80	; 0x50
 805900a:	f383 8811 	msr	BASEPRI, r3
 805900e:	f3bf 8f6f 	isb	sy
 8059012:	f3bf 8f4f 	dsb	sy
 8059016:	60fb      	str	r3, [r7, #12]
}
 8059018:	bf00      	nop
 805901a:	e7fe      	b.n	805901a <pvPortMalloc+0x172>
	return pvReturn;
 805901c:	69fb      	ldr	r3, [r7, #28]
}
 805901e:	4618      	mov	r0, r3
 8059020:	3728      	adds	r7, #40	; 0x28
 8059022:	46bd      	mov	sp, r7
 8059024:	bd80      	pop	{r7, pc}
 8059026:	bf00      	nop
 8059028:	2001b554 	.word	0x2001b554
 805902c:	2001b568 	.word	0x2001b568
 8059030:	2001b558 	.word	0x2001b558
 8059034:	2001b54c 	.word	0x2001b54c
 8059038:	2001b55c 	.word	0x2001b55c
 805903c:	2001b560 	.word	0x2001b560

08059040 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8059040:	b580      	push	{r7, lr}
 8059042:	b086      	sub	sp, #24
 8059044:	af00      	add	r7, sp, #0
 8059046:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8059048:	687b      	ldr	r3, [r7, #4]
 805904a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 805904c:	687b      	ldr	r3, [r7, #4]
 805904e:	2b00      	cmp	r3, #0
 8059050:	d04d      	beq.n	80590ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8059052:	2308      	movs	r3, #8
 8059054:	425b      	negs	r3, r3
 8059056:	697a      	ldr	r2, [r7, #20]
 8059058:	4413      	add	r3, r2
 805905a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 805905c:	697b      	ldr	r3, [r7, #20]
 805905e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8059060:	693b      	ldr	r3, [r7, #16]
 8059062:	685a      	ldr	r2, [r3, #4]
 8059064:	4b24      	ldr	r3, [pc, #144]	; (80590f8 <vPortFree+0xb8>)
 8059066:	681b      	ldr	r3, [r3, #0]
 8059068:	4013      	ands	r3, r2
 805906a:	2b00      	cmp	r3, #0
 805906c:	d10a      	bne.n	8059084 <vPortFree+0x44>
	__asm volatile
 805906e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8059072:	f383 8811 	msr	BASEPRI, r3
 8059076:	f3bf 8f6f 	isb	sy
 805907a:	f3bf 8f4f 	dsb	sy
 805907e:	60fb      	str	r3, [r7, #12]
}
 8059080:	bf00      	nop
 8059082:	e7fe      	b.n	8059082 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8059084:	693b      	ldr	r3, [r7, #16]
 8059086:	681b      	ldr	r3, [r3, #0]
 8059088:	2b00      	cmp	r3, #0
 805908a:	d00a      	beq.n	80590a2 <vPortFree+0x62>
	__asm volatile
 805908c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8059090:	f383 8811 	msr	BASEPRI, r3
 8059094:	f3bf 8f6f 	isb	sy
 8059098:	f3bf 8f4f 	dsb	sy
 805909c:	60bb      	str	r3, [r7, #8]
}
 805909e:	bf00      	nop
 80590a0:	e7fe      	b.n	80590a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80590a2:	693b      	ldr	r3, [r7, #16]
 80590a4:	685a      	ldr	r2, [r3, #4]
 80590a6:	4b14      	ldr	r3, [pc, #80]	; (80590f8 <vPortFree+0xb8>)
 80590a8:	681b      	ldr	r3, [r3, #0]
 80590aa:	4013      	ands	r3, r2
 80590ac:	2b00      	cmp	r3, #0
 80590ae:	d01e      	beq.n	80590ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80590b0:	693b      	ldr	r3, [r7, #16]
 80590b2:	681b      	ldr	r3, [r3, #0]
 80590b4:	2b00      	cmp	r3, #0
 80590b6:	d11a      	bne.n	80590ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80590b8:	693b      	ldr	r3, [r7, #16]
 80590ba:	685a      	ldr	r2, [r3, #4]
 80590bc:	4b0e      	ldr	r3, [pc, #56]	; (80590f8 <vPortFree+0xb8>)
 80590be:	681b      	ldr	r3, [r3, #0]
 80590c0:	43db      	mvns	r3, r3
 80590c2:	401a      	ands	r2, r3
 80590c4:	693b      	ldr	r3, [r7, #16]
 80590c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80590c8:	f7fe fb9a 	bl	8057800 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80590cc:	693b      	ldr	r3, [r7, #16]
 80590ce:	685a      	ldr	r2, [r3, #4]
 80590d0:	4b0a      	ldr	r3, [pc, #40]	; (80590fc <vPortFree+0xbc>)
 80590d2:	681b      	ldr	r3, [r3, #0]
 80590d4:	4413      	add	r3, r2
 80590d6:	4a09      	ldr	r2, [pc, #36]	; (80590fc <vPortFree+0xbc>)
 80590d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80590da:	6938      	ldr	r0, [r7, #16]
 80590dc:	f000 f874 	bl	80591c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80590e0:	4b07      	ldr	r3, [pc, #28]	; (8059100 <vPortFree+0xc0>)
 80590e2:	681b      	ldr	r3, [r3, #0]
 80590e4:	3301      	adds	r3, #1
 80590e6:	4a06      	ldr	r2, [pc, #24]	; (8059100 <vPortFree+0xc0>)
 80590e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80590ea:	f7fe fb97 	bl	805781c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80590ee:	bf00      	nop
 80590f0:	3718      	adds	r7, #24
 80590f2:	46bd      	mov	sp, r7
 80590f4:	bd80      	pop	{r7, pc}
 80590f6:	bf00      	nop
 80590f8:	2001b568 	.word	0x2001b568
 80590fc:	2001b558 	.word	0x2001b558
 8059100:	2001b564 	.word	0x2001b564

08059104 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8059104:	b480      	push	{r7}
 8059106:	b085      	sub	sp, #20
 8059108:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 805910a:	f44f 338c 	mov.w	r3, #71680	; 0x11800
 805910e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8059110:	4b27      	ldr	r3, [pc, #156]	; (80591b0 <prvHeapInit+0xac>)
 8059112:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8059114:	68fb      	ldr	r3, [r7, #12]
 8059116:	f003 0307 	and.w	r3, r3, #7
 805911a:	2b00      	cmp	r3, #0
 805911c:	d00c      	beq.n	8059138 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 805911e:	68fb      	ldr	r3, [r7, #12]
 8059120:	3307      	adds	r3, #7
 8059122:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8059124:	68fb      	ldr	r3, [r7, #12]
 8059126:	f023 0307 	bic.w	r3, r3, #7
 805912a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 805912c:	68ba      	ldr	r2, [r7, #8]
 805912e:	68fb      	ldr	r3, [r7, #12]
 8059130:	1ad3      	subs	r3, r2, r3
 8059132:	4a1f      	ldr	r2, [pc, #124]	; (80591b0 <prvHeapInit+0xac>)
 8059134:	4413      	add	r3, r2
 8059136:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8059138:	68fb      	ldr	r3, [r7, #12]
 805913a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 805913c:	4a1d      	ldr	r2, [pc, #116]	; (80591b4 <prvHeapInit+0xb0>)
 805913e:	687b      	ldr	r3, [r7, #4]
 8059140:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8059142:	4b1c      	ldr	r3, [pc, #112]	; (80591b4 <prvHeapInit+0xb0>)
 8059144:	2200      	movs	r2, #0
 8059146:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8059148:	687b      	ldr	r3, [r7, #4]
 805914a:	68ba      	ldr	r2, [r7, #8]
 805914c:	4413      	add	r3, r2
 805914e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8059150:	2208      	movs	r2, #8
 8059152:	68fb      	ldr	r3, [r7, #12]
 8059154:	1a9b      	subs	r3, r3, r2
 8059156:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8059158:	68fb      	ldr	r3, [r7, #12]
 805915a:	f023 0307 	bic.w	r3, r3, #7
 805915e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8059160:	68fb      	ldr	r3, [r7, #12]
 8059162:	4a15      	ldr	r2, [pc, #84]	; (80591b8 <prvHeapInit+0xb4>)
 8059164:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8059166:	4b14      	ldr	r3, [pc, #80]	; (80591b8 <prvHeapInit+0xb4>)
 8059168:	681b      	ldr	r3, [r3, #0]
 805916a:	2200      	movs	r2, #0
 805916c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 805916e:	4b12      	ldr	r3, [pc, #72]	; (80591b8 <prvHeapInit+0xb4>)
 8059170:	681b      	ldr	r3, [r3, #0]
 8059172:	2200      	movs	r2, #0
 8059174:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8059176:	687b      	ldr	r3, [r7, #4]
 8059178:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 805917a:	683b      	ldr	r3, [r7, #0]
 805917c:	68fa      	ldr	r2, [r7, #12]
 805917e:	1ad2      	subs	r2, r2, r3
 8059180:	683b      	ldr	r3, [r7, #0]
 8059182:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8059184:	4b0c      	ldr	r3, [pc, #48]	; (80591b8 <prvHeapInit+0xb4>)
 8059186:	681a      	ldr	r2, [r3, #0]
 8059188:	683b      	ldr	r3, [r7, #0]
 805918a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 805918c:	683b      	ldr	r3, [r7, #0]
 805918e:	685b      	ldr	r3, [r3, #4]
 8059190:	4a0a      	ldr	r2, [pc, #40]	; (80591bc <prvHeapInit+0xb8>)
 8059192:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8059194:	683b      	ldr	r3, [r7, #0]
 8059196:	685b      	ldr	r3, [r3, #4]
 8059198:	4a09      	ldr	r2, [pc, #36]	; (80591c0 <prvHeapInit+0xbc>)
 805919a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 805919c:	4b09      	ldr	r3, [pc, #36]	; (80591c4 <prvHeapInit+0xc0>)
 805919e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80591a2:	601a      	str	r2, [r3, #0]
}
 80591a4:	bf00      	nop
 80591a6:	3714      	adds	r7, #20
 80591a8:	46bd      	mov	sp, r7
 80591aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80591ae:	4770      	bx	lr
 80591b0:	20009d4c 	.word	0x20009d4c
 80591b4:	2001b54c 	.word	0x2001b54c
 80591b8:	2001b554 	.word	0x2001b554
 80591bc:	2001b55c 	.word	0x2001b55c
 80591c0:	2001b558 	.word	0x2001b558
 80591c4:	2001b568 	.word	0x2001b568

080591c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80591c8:	b480      	push	{r7}
 80591ca:	b085      	sub	sp, #20
 80591cc:	af00      	add	r7, sp, #0
 80591ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80591d0:	4b28      	ldr	r3, [pc, #160]	; (8059274 <prvInsertBlockIntoFreeList+0xac>)
 80591d2:	60fb      	str	r3, [r7, #12]
 80591d4:	e002      	b.n	80591dc <prvInsertBlockIntoFreeList+0x14>
 80591d6:	68fb      	ldr	r3, [r7, #12]
 80591d8:	681b      	ldr	r3, [r3, #0]
 80591da:	60fb      	str	r3, [r7, #12]
 80591dc:	68fb      	ldr	r3, [r7, #12]
 80591de:	681b      	ldr	r3, [r3, #0]
 80591e0:	687a      	ldr	r2, [r7, #4]
 80591e2:	429a      	cmp	r2, r3
 80591e4:	d8f7      	bhi.n	80591d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80591e6:	68fb      	ldr	r3, [r7, #12]
 80591e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80591ea:	68fb      	ldr	r3, [r7, #12]
 80591ec:	685b      	ldr	r3, [r3, #4]
 80591ee:	68ba      	ldr	r2, [r7, #8]
 80591f0:	4413      	add	r3, r2
 80591f2:	687a      	ldr	r2, [r7, #4]
 80591f4:	429a      	cmp	r2, r3
 80591f6:	d108      	bne.n	805920a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80591f8:	68fb      	ldr	r3, [r7, #12]
 80591fa:	685a      	ldr	r2, [r3, #4]
 80591fc:	687b      	ldr	r3, [r7, #4]
 80591fe:	685b      	ldr	r3, [r3, #4]
 8059200:	441a      	add	r2, r3
 8059202:	68fb      	ldr	r3, [r7, #12]
 8059204:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8059206:	68fb      	ldr	r3, [r7, #12]
 8059208:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 805920a:	687b      	ldr	r3, [r7, #4]
 805920c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 805920e:	687b      	ldr	r3, [r7, #4]
 8059210:	685b      	ldr	r3, [r3, #4]
 8059212:	68ba      	ldr	r2, [r7, #8]
 8059214:	441a      	add	r2, r3
 8059216:	68fb      	ldr	r3, [r7, #12]
 8059218:	681b      	ldr	r3, [r3, #0]
 805921a:	429a      	cmp	r2, r3
 805921c:	d118      	bne.n	8059250 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 805921e:	68fb      	ldr	r3, [r7, #12]
 8059220:	681a      	ldr	r2, [r3, #0]
 8059222:	4b15      	ldr	r3, [pc, #84]	; (8059278 <prvInsertBlockIntoFreeList+0xb0>)
 8059224:	681b      	ldr	r3, [r3, #0]
 8059226:	429a      	cmp	r2, r3
 8059228:	d00d      	beq.n	8059246 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 805922a:	687b      	ldr	r3, [r7, #4]
 805922c:	685a      	ldr	r2, [r3, #4]
 805922e:	68fb      	ldr	r3, [r7, #12]
 8059230:	681b      	ldr	r3, [r3, #0]
 8059232:	685b      	ldr	r3, [r3, #4]
 8059234:	441a      	add	r2, r3
 8059236:	687b      	ldr	r3, [r7, #4]
 8059238:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 805923a:	68fb      	ldr	r3, [r7, #12]
 805923c:	681b      	ldr	r3, [r3, #0]
 805923e:	681a      	ldr	r2, [r3, #0]
 8059240:	687b      	ldr	r3, [r7, #4]
 8059242:	601a      	str	r2, [r3, #0]
 8059244:	e008      	b.n	8059258 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8059246:	4b0c      	ldr	r3, [pc, #48]	; (8059278 <prvInsertBlockIntoFreeList+0xb0>)
 8059248:	681a      	ldr	r2, [r3, #0]
 805924a:	687b      	ldr	r3, [r7, #4]
 805924c:	601a      	str	r2, [r3, #0]
 805924e:	e003      	b.n	8059258 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8059250:	68fb      	ldr	r3, [r7, #12]
 8059252:	681a      	ldr	r2, [r3, #0]
 8059254:	687b      	ldr	r3, [r7, #4]
 8059256:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8059258:	68fa      	ldr	r2, [r7, #12]
 805925a:	687b      	ldr	r3, [r7, #4]
 805925c:	429a      	cmp	r2, r3
 805925e:	d002      	beq.n	8059266 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8059260:	68fb      	ldr	r3, [r7, #12]
 8059262:	687a      	ldr	r2, [r7, #4]
 8059264:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8059266:	bf00      	nop
 8059268:	3714      	adds	r7, #20
 805926a:	46bd      	mov	sp, r7
 805926c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8059270:	4770      	bx	lr
 8059272:	bf00      	nop
 8059274:	2001b54c 	.word	0x2001b54c
 8059278:	2001b554 	.word	0x2001b554

0805927c <ch201_gprmt_init>:
#include "ch_common.h"

uint8_t ch201_gprmt_init(ch_dev_t * dev_ptr, ch_group_t * grp_ptr,
                         uint8_t i2c_addr, uint8_t io_index,
                         uint8_t i2c_bus_index)
{
 805927c:	b580      	push	{r7, lr}
 805927e:	b084      	sub	sp, #16
 8059280:	af00      	add	r7, sp, #0
 8059282:	60f8      	str	r0, [r7, #12]
 8059284:	60b9      	str	r1, [r7, #8]
 8059286:	4611      	mov	r1, r2
 8059288:	461a      	mov	r2, r3
 805928a:	460b      	mov	r3, r1
 805928c:	71fb      	strb	r3, [r7, #7]
 805928e:	4613      	mov	r3, r2
 8059290:	71bb      	strb	r3, [r7, #6]

  dev_ptr->part_number = CH201_PART_NUMBER;
 8059292:	68fb      	ldr	r3, [r7, #12]
 8059294:	22c9      	movs	r2, #201	; 0xc9
 8059296:	839a      	strh	r2, [r3, #28]
  dev_ptr->app_i2c_address = i2c_addr;
 8059298:	68fb      	ldr	r3, [r7, #12]
 805929a:	79fa      	ldrb	r2, [r7, #7]
 805929c:	765a      	strb	r2, [r3, #25]
  dev_ptr->io_index = io_index;
 805929e:	68fb      	ldr	r3, [r7, #12]
 80592a0:	79ba      	ldrb	r2, [r7, #6]
 80592a2:	f883 2020 	strb.w	r2, [r3, #32]
  dev_ptr->i2c_bus_index = i2c_bus_index;
 80592a6:	68fb      	ldr	r3, [r7, #12]
 80592a8:	7e3a      	ldrb	r2, [r7, #24]
 80592aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Init firmware-specific function pointers */
  dev_ptr->firmware = ch201_gprmt_fw;
 80592ae:	68fb      	ldr	r3, [r7, #12]
 80592b0:	4a32      	ldr	r2, [pc, #200]	; (805937c <ch201_gprmt_init+0x100>)
 80592b2:	631a      	str	r2, [r3, #48]	; 0x30
  dev_ptr->fw_version_string = ch201_gprmt_version;
 80592b4:	4b32      	ldr	r3, [pc, #200]	; (8059380 <ch201_gprmt_init+0x104>)
 80592b6:	681a      	ldr	r2, [r3, #0]
 80592b8:	68fb      	ldr	r3, [r7, #12]
 80592ba:	62da      	str	r2, [r3, #44]	; 0x2c
  dev_ptr->ram_init = get_ram_ch201_gprmt_init_ptr();
 80592bc:	f000 f89c 	bl	80593f8 <get_ram_ch201_gprmt_init_ptr>
 80592c0:	4602      	mov	r2, r0
 80592c2:	68fb      	ldr	r3, [r7, #12]
 80592c4:	635a      	str	r2, [r3, #52]	; 0x34
  dev_ptr->get_fw_ram_init_size = get_ch201_gprmt_fw_ram_init_size;
 80592c6:	68fb      	ldr	r3, [r7, #12]
 80592c8:	4a2e      	ldr	r2, [pc, #184]	; (8059384 <ch201_gprmt_init+0x108>)
 80592ca:	651a      	str	r2, [r3, #80]	; 0x50
  dev_ptr->get_fw_ram_init_addr = get_ch201_gprmt_fw_ram_init_addr;
 80592cc:	68fb      	ldr	r3, [r7, #12]
 80592ce:	4a2e      	ldr	r2, [pc, #184]	; (8059388 <ch201_gprmt_init+0x10c>)
 80592d0:	655a      	str	r2, [r3, #84]	; 0x54

  dev_ptr->prepare_pulse_timer = ch_common_prepare_pulse_timer;
 80592d2:	68fb      	ldr	r3, [r7, #12]
 80592d4:	4a2d      	ldr	r2, [pc, #180]	; (805938c <ch201_gprmt_init+0x110>)
 80592d6:	639a      	str	r2, [r3, #56]	; 0x38
  dev_ptr->store_pt_result = ch_common_store_pt_result;
 80592d8:	68fb      	ldr	r3, [r7, #12]
 80592da:	4a2d      	ldr	r2, [pc, #180]	; (8059390 <ch201_gprmt_init+0x114>)
 80592dc:	63da      	str	r2, [r3, #60]	; 0x3c
  dev_ptr->store_op_freq = ch_common_store_op_freq;
 80592de:	68fb      	ldr	r3, [r7, #12]
 80592e0:	4a2c      	ldr	r2, [pc, #176]	; (8059394 <ch201_gprmt_init+0x118>)
 80592e2:	641a      	str	r2, [r3, #64]	; 0x40
  dev_ptr->store_bandwidth = ch_common_store_bandwidth;
 80592e4:	68fb      	ldr	r3, [r7, #12]
 80592e6:	4a2c      	ldr	r2, [pc, #176]	; (8059398 <ch201_gprmt_init+0x11c>)
 80592e8:	645a      	str	r2, [r3, #68]	; 0x44
  dev_ptr->store_scalefactor = ch_common_store_scale_factor;
 80592ea:	68fb      	ldr	r3, [r7, #12]
 80592ec:	4a2b      	ldr	r2, [pc, #172]	; (805939c <ch201_gprmt_init+0x120>)
 80592ee:	649a      	str	r2, [r3, #72]	; 0x48
  dev_ptr->get_locked_state = ch_common_get_locked_state;
 80592f0:	68fb      	ldr	r3, [r7, #12]
 80592f2:	4a2b      	ldr	r2, [pc, #172]	; (80593a0 <ch201_gprmt_init+0x124>)
 80592f4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Init API function pointers */
  dev_ptr->api_funcs.fw_load = ch_common_fw_load;
 80592f6:	68fb      	ldr	r3, [r7, #12]
 80592f8:	4a2a      	ldr	r2, [pc, #168]	; (80593a4 <ch201_gprmt_init+0x128>)
 80592fa:	659a      	str	r2, [r3, #88]	; 0x58
  dev_ptr->api_funcs.set_mode = ch_common_set_mode;
 80592fc:	68fb      	ldr	r3, [r7, #12]
 80592fe:	4a2a      	ldr	r2, [pc, #168]	; (80593a8 <ch201_gprmt_init+0x12c>)
 8059300:	65da      	str	r2, [r3, #92]	; 0x5c
  dev_ptr->api_funcs.set_sample_interval = ch_common_set_sample_interval;
 8059302:	68fb      	ldr	r3, [r7, #12]
 8059304:	4a29      	ldr	r2, [pc, #164]	; (80593ac <ch201_gprmt_init+0x130>)
 8059306:	661a      	str	r2, [r3, #96]	; 0x60
  dev_ptr->api_funcs.set_num_samples = ch_common_set_num_samples;
 8059308:	68fb      	ldr	r3, [r7, #12]
 805930a:	4a29      	ldr	r2, [pc, #164]	; (80593b0 <ch201_gprmt_init+0x134>)
 805930c:	665a      	str	r2, [r3, #100]	; 0x64
  dev_ptr->api_funcs.set_max_range = ch_common_set_max_range;
 805930e:	68fb      	ldr	r3, [r7, #12]
 8059310:	4a28      	ldr	r2, [pc, #160]	; (80593b4 <ch201_gprmt_init+0x138>)
 8059312:	669a      	str	r2, [r3, #104]	; 0x68
  dev_ptr->api_funcs.set_static_range = NULL;   // not supported
 8059314:	68fb      	ldr	r3, [r7, #12]
 8059316:	2200      	movs	r2, #0
 8059318:	671a      	str	r2, [r3, #112]	; 0x70
  dev_ptr->api_funcs.get_range = ch_common_get_range;
 805931a:	68fb      	ldr	r3, [r7, #12]
 805931c:	4a26      	ldr	r2, [pc, #152]	; (80593b8 <ch201_gprmt_init+0x13c>)
 805931e:	675a      	str	r2, [r3, #116]	; 0x74
  dev_ptr->api_funcs.get_amplitude = ch_common_get_amplitude;
 8059320:	68fb      	ldr	r3, [r7, #12]
 8059322:	4a26      	ldr	r2, [pc, #152]	; (80593bc <ch201_gprmt_init+0x140>)
 8059324:	679a      	str	r2, [r3, #120]	; 0x78
  dev_ptr->api_funcs.get_iq_data = ch_common_get_iq_data;
 8059326:	68fb      	ldr	r3, [r7, #12]
 8059328:	4a25      	ldr	r2, [pc, #148]	; (80593c0 <ch201_gprmt_init+0x144>)
 805932a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  dev_ptr->api_funcs.samples_to_mm = ch_common_samples_to_mm;
 805932e:	68fb      	ldr	r3, [r7, #12]
 8059330:	4a24      	ldr	r2, [pc, #144]	; (80593c4 <ch201_gprmt_init+0x148>)
 8059332:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  dev_ptr->api_funcs.mm_to_samples = ch_common_mm_to_samples;
 8059336:	68fb      	ldr	r3, [r7, #12]
 8059338:	4a23      	ldr	r2, [pc, #140]	; (80593c8 <ch201_gprmt_init+0x14c>)
 805933a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  dev_ptr->api_funcs.set_thresholds = ch_common_set_thresholds;
 805933e:	68fb      	ldr	r3, [r7, #12]
 8059340:	4a22      	ldr	r2, [pc, #136]	; (80593cc <ch201_gprmt_init+0x150>)
 8059342:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  dev_ptr->api_funcs.get_thresholds = ch_common_get_thresholds;
 8059346:	68fb      	ldr	r3, [r7, #12]
 8059348:	4a21      	ldr	r2, [pc, #132]	; (80593d0 <ch201_gprmt_init+0x154>)
 805934a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Init max sample count */
  dev_ptr->max_samples = CH201_GPRMT_MAX_SAMPLES;
 805934e:	68fb      	ldr	r3, [r7, #12]
 8059350:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8059354:	845a      	strh	r2, [r3, #34]	; 0x22

  /* This firmware does not use oversampling */
  dev_ptr->oversample = 0;
 8059356:	68fb      	ldr	r3, [r7, #12]
 8059358:	2200      	movs	r2, #0
 805935a:	779a      	strb	r2, [r3, #30]

  /* Init device and group descriptor linkage */
  dev_ptr->group = grp_ptr;     // set parent group pointer
 805935c:	68fb      	ldr	r3, [r7, #12]
 805935e:	68ba      	ldr	r2, [r7, #8]
 8059360:	601a      	str	r2, [r3, #0]
  grp_ptr->device[io_index] = dev_ptr;  // add to parent group
 8059362:	79bb      	ldrb	r3, [r7, #6]
 8059364:	68ba      	ldr	r2, [r7, #8]
 8059366:	3304      	adds	r3, #4
 8059368:	009b      	lsls	r3, r3, #2
 805936a:	4413      	add	r3, r2
 805936c:	68fa      	ldr	r2, [r7, #12]
 805936e:	605a      	str	r2, [r3, #4]

  return 0;
 8059370:	2300      	movs	r3, #0
}
 8059372:	4618      	mov	r0, r3
 8059374:	3710      	adds	r7, #16
 8059376:	46bd      	mov	sp, r7
 8059378:	bd80      	pop	{r7, pc}
 805937a:	bf00      	nop
 805937c:	0807caac 	.word	0x0807caac
 8059380:	20007cb8 	.word	0x20007cb8
 8059384:	080593e7 	.word	0x080593e7
 8059388:	080593d5 	.word	0x080593d5
 805938c:	08059e59 	.word	0x08059e59
 8059390:	08059e89 	.word	0x08059e89
 8059394:	08059ec1 	.word	0x08059ec1
 8059398:	08059f31 	.word	0x08059f31
 805939c:	08059f45 	.word	0x08059f45
 80593a0:	08059dfd 	.word	0x08059dfd
 80593a4:	080599d3 	.word	0x080599d3
 80593a8:	0805990d 	.word	0x0805990d
 80593ac:	08059a1d 	.word	0x08059a1d
 80593b0:	08059acb 	.word	0x08059acb
 80593b4:	08059b33 	.word	0x08059b33
 80593b8:	08059ced 	.word	0x08059ced
 80593bc:	08059dbd 	.word	0x08059dbd
 80593c0:	0805a199 	.word	0x0805a199
 80593c4:	08059c9d 	.word	0x08059c9d
 80593c8:	08059bb3 	.word	0x08059bb3
 80593cc:	08059f8f 	.word	0x08059f8f
 80593d0:	0805a09b 	.word	0x0805a09b

080593d4 <get_ch201_gprmt_fw_ram_init_addr>:
#define RAM_INIT_ADDRESS 2410

#define RAM_INIT_WRITE_SIZE   28

uint16_t get_ch201_gprmt_fw_ram_init_addr(void)
{
 80593d4:	b480      	push	{r7}
 80593d6:	af00      	add	r7, sp, #0
  return (uint16_t) RAM_INIT_ADDRESS;
 80593d8:	f640 136a 	movw	r3, #2410	; 0x96a
}
 80593dc:	4618      	mov	r0, r3
 80593de:	46bd      	mov	sp, r7
 80593e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80593e4:	4770      	bx	lr

080593e6 <get_ch201_gprmt_fw_ram_init_size>:

uint16_t get_ch201_gprmt_fw_ram_init_size(void)
{
 80593e6:	b480      	push	{r7}
 80593e8:	af00      	add	r7, sp, #0
  return (uint16_t) RAM_INIT_WRITE_SIZE;
 80593ea:	231c      	movs	r3, #28
}
 80593ec:	4618      	mov	r0, r3
 80593ee:	46bd      	mov	sp, r7
 80593f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80593f4:	4770      	bx	lr
	...

080593f8 <get_ram_ch201_gprmt_init_ptr>:
      0x00, 0x00, 0x00,
  0x00, 0xFA, 0x00, 0x00, 0x64, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x00,
};

const unsigned char *get_ram_ch201_gprmt_init_ptr(void)
{
 80593f8:	b480      	push	{r7}
 80593fa:	af00      	add	r7, sp, #0
  return &ram_ch201_gprmt_init[0];
 80593fc:	4b02      	ldr	r3, [pc, #8]	; (8059408 <get_ram_ch201_gprmt_init_ptr+0x10>)
}
 80593fe:	4618      	mov	r0, r3
 8059400:	46bd      	mov	sp, r7
 8059402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8059406:	4770      	bx	lr
 8059408:	0807ca90 	.word	0x0807ca90

0805940c <ch_init>:
 *
 */

uint8_t ch_init(ch_dev_t * dev_ptr, ch_group_t * grp_ptr, uint8_t dev_num,
                ch_fw_init_func_t fw_init_func)
{
 805940c:	b590      	push	{r4, r7, lr}
 805940e:	b089      	sub	sp, #36	; 0x24
 8059410:	af02      	add	r7, sp, #8
 8059412:	60f8      	str	r0, [r7, #12]
 8059414:	60b9      	str	r1, [r7, #8]
 8059416:	603b      	str	r3, [r7, #0]
 8059418:	4613      	mov	r3, r2
 805941a:	71fb      	strb	r3, [r7, #7]

  uint8_t ret_val = RET_ERR;
 805941c:	2301      	movs	r3, #1
 805941e:	75fb      	strb	r3, [r7, #23]

  ch_i2c_info_t i2c_info;

  if (fw_init_func != NULL) {
 8059420:	683b      	ldr	r3, [r7, #0]
 8059422:	2b00      	cmp	r3, #0
 8059424:	d019      	beq.n	805945a <ch_init+0x4e>
    /* Get I2C parameters from BSP */
    ret_val = chbsp_i2c_get_info(grp_ptr, dev_num, &i2c_info);
 8059426:	f107 0210 	add.w	r2, r7, #16
 805942a:	79fb      	ldrb	r3, [r7, #7]
 805942c:	4619      	mov	r1, r3
 805942e:	68b8      	ldr	r0, [r7, #8]
 8059430:	f7ea fbe4 	bl	8043bfc <chbsp_i2c_get_info>
 8059434:	4603      	mov	r3, r0
 8059436:	75fb      	strb	r3, [r7, #23]

    if (ret_val == RET_OK) {
 8059438:	7dfb      	ldrb	r3, [r7, #23]
 805943a:	2b00      	cmp	r3, #0
 805943c:	d10d      	bne.n	805945a <ch_init+0x4e>
      /* Save special handling flags for Chirp driver */
      grp_ptr->i2c_drv_flags = i2c_info.drv_flags;
 805943e:	8a7a      	ldrh	r2, [r7, #18]
 8059440:	68bb      	ldr	r3, [r7, #8]
 8059442:	809a      	strh	r2, [r3, #4]

      /* Call asic f/w init function passed in as parameter */
      ret_val =
          (*fw_init_func) (dev_ptr, grp_ptr, i2c_info.address, dev_num,
 8059444:	7c3a      	ldrb	r2, [r7, #16]
 8059446:	7c7b      	ldrb	r3, [r7, #17]
 8059448:	79f9      	ldrb	r1, [r7, #7]
 805944a:	9300      	str	r3, [sp, #0]
 805944c:	683c      	ldr	r4, [r7, #0]
 805944e:	460b      	mov	r3, r1
 8059450:	68b9      	ldr	r1, [r7, #8]
 8059452:	68f8      	ldr	r0, [r7, #12]
 8059454:	47a0      	blx	r4
 8059456:	4603      	mov	r3, r0
 8059458:	75fb      	strb	r3, [r7, #23]
                           i2c_info.bus_num);
    }
  }

  return ret_val;
 805945a:	7dfb      	ldrb	r3, [r7, #23]
}
 805945c:	4618      	mov	r0, r3
 805945e:	371c      	adds	r7, #28
 8059460:	46bd      	mov	sp, r7
 8059462:	bd90      	pop	{r4, r7, pc}

08059464 <ch_get_config>:

uint8_t ch_get_config(ch_dev_t * dev_ptr, ch_config_t * config_ptr)
{
 8059464:	b480      	push	{r7}
 8059466:	b085      	sub	sp, #20
 8059468:	af00      	add	r7, sp, #0
 805946a:	6078      	str	r0, [r7, #4]
 805946c:	6039      	str	r1, [r7, #0]
  uint8_t ret_val = 0;
 805946e:	2300      	movs	r3, #0
 8059470:	73fb      	strb	r3, [r7, #15]

  config_ptr->mode = dev_ptr->mode;
 8059472:	687b      	ldr	r3, [r7, #4]
 8059474:	791a      	ldrb	r2, [r3, #4]
 8059476:	683b      	ldr	r3, [r7, #0]
 8059478:	701a      	strb	r2, [r3, #0]
  config_ptr->max_range = dev_ptr->max_range;
 805947a:	687b      	ldr	r3, [r7, #4]
 805947c:	88da      	ldrh	r2, [r3, #6]
 805947e:	683b      	ldr	r3, [r7, #0]
 8059480:	805a      	strh	r2, [r3, #2]
  config_ptr->static_range = dev_ptr->static_range;
 8059482:	687b      	ldr	r3, [r7, #4]
 8059484:	891a      	ldrh	r2, [r3, #8]
 8059486:	683b      	ldr	r3, [r7, #0]
 8059488:	809a      	strh	r2, [r3, #4]
  config_ptr->sample_interval = dev_ptr->sample_interval;
 805948a:	687b      	ldr	r3, [r7, #4]
 805948c:	895a      	ldrh	r2, [r3, #10]
 805948e:	683b      	ldr	r3, [r7, #0]
 8059490:	80da      	strh	r2, [r3, #6]
  config_ptr->thresh_ptr = NULL;        // thresholds not returned here - use ch_get_thresholds()
 8059492:	683b      	ldr	r3, [r7, #0]
 8059494:	2200      	movs	r2, #0
 8059496:	609a      	str	r2, [r3, #8]

  return ret_val;
 8059498:	7bfb      	ldrb	r3, [r7, #15]
}
 805949a:	4618      	mov	r0, r3
 805949c:	3714      	adds	r7, #20
 805949e:	46bd      	mov	sp, r7
 80594a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80594a4:	4770      	bx	lr

080594a6 <ch_set_config>:

uint8_t ch_set_config(ch_dev_t * dev_ptr, ch_config_t * config_ptr)
{
 80594a6:	b580      	push	{r7, lr}
 80594a8:	b084      	sub	sp, #16
 80594aa:	af00      	add	r7, sp, #0
 80594ac:	6078      	str	r0, [r7, #4]
 80594ae:	6039      	str	r1, [r7, #0]
  uint8_t ret_val = 0;
 80594b0:	2300      	movs	r3, #0
 80594b2:	73fb      	strb	r3, [r7, #15]

  ret_val = ch_set_mode(dev_ptr, config_ptr->mode);     // set operating mode
 80594b4:	683b      	ldr	r3, [r7, #0]
 80594b6:	781b      	ldrb	r3, [r3, #0]
 80594b8:	4619      	mov	r1, r3
 80594ba:	6878      	ldr	r0, [r7, #4]
 80594bc:	f000 f8cb 	bl	8059656 <ch_set_mode>
 80594c0:	4603      	mov	r3, r0
 80594c2:	73fb      	strb	r3, [r7, #15]

  if (!ret_val) {
 80594c4:	7bfb      	ldrb	r3, [r7, #15]
 80594c6:	2b00      	cmp	r3, #0
 80594c8:	d10b      	bne.n	80594e2 <ch_set_config+0x3c>
    dev_ptr->mode = config_ptr->mode;
 80594ca:	683b      	ldr	r3, [r7, #0]
 80594cc:	781a      	ldrb	r2, [r3, #0]
 80594ce:	687b      	ldr	r3, [r7, #4]
 80594d0:	711a      	strb	r2, [r3, #4]

    ret_val = ch_set_max_range(dev_ptr, config_ptr->max_range); // set max range
 80594d2:	683b      	ldr	r3, [r7, #0]
 80594d4:	885b      	ldrh	r3, [r3, #2]
 80594d6:	4619      	mov	r1, r3
 80594d8:	6878      	ldr	r0, [r7, #4]
 80594da:	f000 f904 	bl	80596e6 <ch_set_max_range>
 80594de:	4603      	mov	r3, r0
 80594e0:	73fb      	strb	r3, [r7, #15]
  }

  if (!ret_val) {
 80594e2:	7bfb      	ldrb	r3, [r7, #15]
 80594e4:	2b00      	cmp	r3, #0
 80594e6:	d112      	bne.n	805950e <ch_set_config+0x68>

    if (dev_ptr->part_number == CH101_PART_NUMBER) {    // static rejection only on CH101
 80594e8:	687b      	ldr	r3, [r7, #4]
 80594ea:	8b9b      	ldrh	r3, [r3, #28]
 80594ec:	2b65      	cmp	r3, #101	; 0x65
 80594ee:	d10e      	bne.n	805950e <ch_set_config+0x68>
      ret_val = ch_set_static_range(dev_ptr, config_ptr->static_range); // set static target rejection range
 80594f0:	683b      	ldr	r3, [r7, #0]
 80594f2:	889b      	ldrh	r3, [r3, #4]
 80594f4:	4619      	mov	r1, r3
 80594f6:	6878      	ldr	r0, [r7, #4]
 80594f8:	f000 f90f 	bl	805971a <ch_set_static_range>
 80594fc:	4603      	mov	r3, r0
 80594fe:	73fb      	strb	r3, [r7, #15]

      if (!ret_val) {
 8059500:	7bfb      	ldrb	r3, [r7, #15]
 8059502:	2b00      	cmp	r3, #0
 8059504:	d103      	bne.n	805950e <ch_set_config+0x68>
        dev_ptr->static_range = config_ptr->static_range;
 8059506:	683b      	ldr	r3, [r7, #0]
 8059508:	889a      	ldrh	r2, [r3, #4]
 805950a:	687b      	ldr	r3, [r7, #4]
 805950c:	811a      	strh	r2, [r3, #8]
      }
    }
  }

  if (!ret_val) {
 805950e:	7bfb      	ldrb	r3, [r7, #15]
 8059510:	2b00      	cmp	r3, #0
 8059512:	d107      	bne.n	8059524 <ch_set_config+0x7e>
    ret_val = ch_set_sample_interval(dev_ptr, config_ptr->sample_interval);     // set sample interval (free-run mode only)
 8059514:	683b      	ldr	r3, [r7, #0]
 8059516:	88db      	ldrh	r3, [r3, #6]
 8059518:	4619      	mov	r1, r3
 805951a:	6878      	ldr	r0, [r7, #4]
 805951c:	f000 f8bc 	bl	8059698 <ch_set_sample_interval>
 8059520:	4603      	mov	r3, r0
 8059522:	73fb      	strb	r3, [r7, #15]
  }

  if (!ret_val) {
 8059524:	7bfb      	ldrb	r3, [r7, #15]
 8059526:	2b00      	cmp	r3, #0
 8059528:	d10f      	bne.n	805954a <ch_set_config+0xa4>
    dev_ptr->sample_interval = config_ptr->sample_interval;
 805952a:	683b      	ldr	r3, [r7, #0]
 805952c:	88da      	ldrh	r2, [r3, #6]
 805952e:	687b      	ldr	r3, [r7, #4]
 8059530:	815a      	strh	r2, [r3, #10]

    if (dev_ptr->part_number == CH201_PART_NUMBER) {    // multi threshold only on CH201
 8059532:	687b      	ldr	r3, [r7, #4]
 8059534:	8b9b      	ldrh	r3, [r3, #28]
 8059536:	2bc9      	cmp	r3, #201	; 0xc9
 8059538:	d107      	bne.n	805954a <ch_set_config+0xa4>
      ret_val = ch_set_thresholds(dev_ptr, config_ptr->thresh_ptr);     // set multiple thresholds
 805953a:	683b      	ldr	r3, [r7, #0]
 805953c:	689b      	ldr	r3, [r3, #8]
 805953e:	4619      	mov	r1, r3
 8059540:	6878      	ldr	r0, [r7, #4]
 8059542:	f000 f99b 	bl	805987c <ch_set_thresholds>
 8059546:	4603      	mov	r3, r0
 8059548:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret_val;
 805954a:	7bfb      	ldrb	r3, [r7, #15]
}
 805954c:	4618      	mov	r0, r3
 805954e:	3710      	adds	r7, #16
 8059550:	46bd      	mov	sp, r7
 8059552:	bd80      	pop	{r7, pc}

08059554 <ch_group_start>:

uint8_t ch_group_start(ch_group_t * grp_ptr)
{
 8059554:	b580      	push	{r7, lr}
 8059556:	b084      	sub	sp, #16
 8059558:	af00      	add	r7, sp, #0
 805955a:	6078      	str	r0, [r7, #4]
  uint8_t ret_val;

  ret_val = chdrv_group_start(grp_ptr);
 805955c:	6878      	ldr	r0, [r7, #4]
 805955e:	f001 fbbf 	bl	805ace0 <chdrv_group_start>
 8059562:	4603      	mov	r3, r0
 8059564:	73fb      	strb	r3, [r7, #15]

  return ret_val;
 8059566:	7bfb      	ldrb	r3, [r7, #15]
}
 8059568:	4618      	mov	r0, r3
 805956a:	3710      	adds	r7, #16
 805956c:	46bd      	mov	sp, r7
 805956e:	bd80      	pop	{r7, pc}

08059570 <ch_group_trigger>:
{
  chdrv_hw_trigger(dev_ptr);
}

void ch_group_trigger(ch_group_t * grp_ptr)
{
 8059570:	b580      	push	{r7, lr}
 8059572:	b082      	sub	sp, #8
 8059574:	af00      	add	r7, sp, #0
 8059576:	6078      	str	r0, [r7, #4]
  chdrv_group_hw_trigger(grp_ptr);
 8059578:	6878      	ldr	r0, [r7, #4]
 805957a:	f001 f8d2 	bl	805a722 <chdrv_group_hw_trigger>
}
 805957e:	bf00      	nop
 8059580:	3708      	adds	r7, #8
 8059582:	46bd      	mov	sp, r7
 8059584:	bd80      	pop	{r7, pc}

08059586 <ch_sensor_is_connected>:
    chdrv_group_soft_reset(grp_ptr);
  }
}

uint8_t ch_sensor_is_connected(ch_dev_t * dev_ptr)
{
 8059586:	b480      	push	{r7}
 8059588:	b083      	sub	sp, #12
 805958a:	af00      	add	r7, sp, #0
 805958c:	6078      	str	r0, [r7, #4]

  return dev_ptr->sensor_connected;
 805958e:	687b      	ldr	r3, [r7, #4]
 8059590:	7fdb      	ldrb	r3, [r3, #31]
}
 8059592:	4618      	mov	r0, r3
 8059594:	370c      	adds	r7, #12
 8059596:	46bd      	mov	sp, r7
 8059598:	f85d 7b04 	ldr.w	r7, [sp], #4
 805959c:	4770      	bx	lr

0805959e <ch_get_part_number>:

uint16_t ch_get_part_number(ch_dev_t * dev_ptr)
{
 805959e:	b480      	push	{r7}
 80595a0:	b083      	sub	sp, #12
 80595a2:	af00      	add	r7, sp, #0
 80595a4:	6078      	str	r0, [r7, #4]

  return dev_ptr->part_number;
 80595a6:	687b      	ldr	r3, [r7, #4]
 80595a8:	8b9b      	ldrh	r3, [r3, #28]
}
 80595aa:	4618      	mov	r0, r3
 80595ac:	370c      	adds	r7, #12
 80595ae:	46bd      	mov	sp, r7
 80595b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80595b4:	4770      	bx	lr

080595b6 <ch_get_dev_num>:

uint8_t ch_get_dev_num(ch_dev_t * dev_ptr)
{
 80595b6:	b480      	push	{r7}
 80595b8:	b083      	sub	sp, #12
 80595ba:	af00      	add	r7, sp, #0
 80595bc:	6078      	str	r0, [r7, #4]

  return dev_ptr->io_index;
 80595be:	687b      	ldr	r3, [r7, #4]
 80595c0:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 80595c4:	4618      	mov	r0, r3
 80595c6:	370c      	adds	r7, #12
 80595c8:	46bd      	mov	sp, r7
 80595ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80595ce:	4770      	bx	lr

080595d0 <ch_get_dev_ptr>:

ch_dev_t *ch_get_dev_ptr(ch_group_t * grp_ptr, uint8_t dev_num)
{
 80595d0:	b480      	push	{r7}
 80595d2:	b083      	sub	sp, #12
 80595d4:	af00      	add	r7, sp, #0
 80595d6:	6078      	str	r0, [r7, #4]
 80595d8:	460b      	mov	r3, r1
 80595da:	70fb      	strb	r3, [r7, #3]

  return grp_ptr->device[dev_num];
 80595dc:	78fb      	ldrb	r3, [r7, #3]
 80595de:	687a      	ldr	r2, [r7, #4]
 80595e0:	3304      	adds	r3, #4
 80595e2:	009b      	lsls	r3, r3, #2
 80595e4:	4413      	add	r3, r2
 80595e6:	685b      	ldr	r3, [r3, #4]
}
 80595e8:	4618      	mov	r0, r3
 80595ea:	370c      	adds	r7, #12
 80595ec:	46bd      	mov	sp, r7
 80595ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80595f2:	4770      	bx	lr

080595f4 <ch_get_i2c_bus>:

  return dev_ptr->i2c_address;
}

uint8_t ch_get_i2c_bus(ch_dev_t * dev_ptr)
{
 80595f4:	b480      	push	{r7}
 80595f6:	b083      	sub	sp, #12
 80595f8:	af00      	add	r7, sp, #0
 80595fa:	6078      	str	r0, [r7, #4]

  return dev_ptr->i2c_bus_index;
 80595fc:	687b      	ldr	r3, [r7, #4]
 80595fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8059602:	4618      	mov	r0, r3
 8059604:	370c      	adds	r7, #12
 8059606:	46bd      	mov	sp, r7
 8059608:	f85d 7b04 	ldr.w	r7, [sp], #4
 805960c:	4770      	bx	lr

0805960e <ch_get_num_ports>:

uint8_t ch_get_num_ports(ch_group_t * grp_ptr)
{
 805960e:	b480      	push	{r7}
 8059610:	b083      	sub	sp, #12
 8059612:	af00      	add	r7, sp, #0
 8059614:	6078      	str	r0, [r7, #4]

  return grp_ptr->num_ports;
 8059616:	687b      	ldr	r3, [r7, #4]
 8059618:	781b      	ldrb	r3, [r3, #0]
}
 805961a:	4618      	mov	r0, r3
 805961c:	370c      	adds	r7, #12
 805961e:	46bd      	mov	sp, r7
 8059620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8059624:	4770      	bx	lr

08059626 <ch_get_fw_version_string>:

char *ch_get_fw_version_string(ch_dev_t * dev_ptr)
{
 8059626:	b480      	push	{r7}
 8059628:	b083      	sub	sp, #12
 805962a:	af00      	add	r7, sp, #0
 805962c:	6078      	str	r0, [r7, #4]

  return dev_ptr->fw_version_string;
 805962e:	687b      	ldr	r3, [r7, #4]
 8059630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8059632:	4618      	mov	r0, r3
 8059634:	370c      	adds	r7, #12
 8059636:	46bd      	mov	sp, r7
 8059638:	f85d 7b04 	ldr.w	r7, [sp], #4
 805963c:	4770      	bx	lr

0805963e <ch_get_mode>:

ch_mode_t ch_get_mode(ch_dev_t * dev_ptr)
{
 805963e:	b480      	push	{r7}
 8059640:	b083      	sub	sp, #12
 8059642:	af00      	add	r7, sp, #0
 8059644:	6078      	str	r0, [r7, #4]

  return dev_ptr->mode;
 8059646:	687b      	ldr	r3, [r7, #4]
 8059648:	791b      	ldrb	r3, [r3, #4]
}
 805964a:	4618      	mov	r0, r3
 805964c:	370c      	adds	r7, #12
 805964e:	46bd      	mov	sp, r7
 8059650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8059654:	4770      	bx	lr

08059656 <ch_set_mode>:

uint8_t ch_set_mode(ch_dev_t * dev_ptr, ch_mode_t mode)
{
 8059656:	b580      	push	{r7, lr}
 8059658:	b084      	sub	sp, #16
 805965a:	af00      	add	r7, sp, #0
 805965c:	6078      	str	r0, [r7, #4]
 805965e:	460b      	mov	r3, r1
 8059660:	70fb      	strb	r3, [r7, #3]
  int ret_val = RET_ERR;
 8059662:	2301      	movs	r3, #1
 8059664:	60fb      	str	r3, [r7, #12]
  ch_set_mode_func_t func_ptr = dev_ptr->api_funcs.set_mode;
 8059666:	687b      	ldr	r3, [r7, #4]
 8059668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 805966a:	60bb      	str	r3, [r7, #8]

  if (func_ptr != NULL) {
 805966c:	68bb      	ldr	r3, [r7, #8]
 805966e:	2b00      	cmp	r3, #0
 8059670:	d006      	beq.n	8059680 <ch_set_mode+0x2a>
    ret_val = (*func_ptr) (dev_ptr, mode);
 8059672:	78fa      	ldrb	r2, [r7, #3]
 8059674:	68bb      	ldr	r3, [r7, #8]
 8059676:	4611      	mov	r1, r2
 8059678:	6878      	ldr	r0, [r7, #4]
 805967a:	4798      	blx	r3
 805967c:	4603      	mov	r3, r0
 805967e:	60fb      	str	r3, [r7, #12]
  }

  if (ret_val == 0) {
 8059680:	68fb      	ldr	r3, [r7, #12]
 8059682:	2b00      	cmp	r3, #0
 8059684:	d102      	bne.n	805968c <ch_set_mode+0x36>
    dev_ptr->mode = mode;
 8059686:	687b      	ldr	r3, [r7, #4]
 8059688:	78fa      	ldrb	r2, [r7, #3]
 805968a:	711a      	strb	r2, [r3, #4]
  }

  return ret_val;
 805968c:	68fb      	ldr	r3, [r7, #12]
 805968e:	b2db      	uxtb	r3, r3
}
 8059690:	4618      	mov	r0, r3
 8059692:	3710      	adds	r7, #16
 8059694:	46bd      	mov	sp, r7
 8059696:	bd80      	pop	{r7, pc}

08059698 <ch_set_sample_interval>:

  return sample_interval;
}

uint8_t ch_set_sample_interval(ch_dev_t * dev_ptr, uint16_t sample_interval)
{
 8059698:	b580      	push	{r7, lr}
 805969a:	b084      	sub	sp, #16
 805969c:	af00      	add	r7, sp, #0
 805969e:	6078      	str	r0, [r7, #4]
 80596a0:	460b      	mov	r3, r1
 80596a2:	807b      	strh	r3, [r7, #2]
  int ret_val = RET_ERR;
 80596a4:	2301      	movs	r3, #1
 80596a6:	60fb      	str	r3, [r7, #12]
  ch_set_sample_interval_func_t func_ptr =
 80596a8:	687b      	ldr	r3, [r7, #4]
 80596aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80596ac:	60bb      	str	r3, [r7, #8]
      dev_ptr->api_funcs.set_sample_interval;

  if (func_ptr != NULL) {
 80596ae:	68bb      	ldr	r3, [r7, #8]
 80596b0:	2b00      	cmp	r3, #0
 80596b2:	d006      	beq.n	80596c2 <ch_set_sample_interval+0x2a>
    ret_val = (*func_ptr) (dev_ptr, sample_interval);
 80596b4:	887a      	ldrh	r2, [r7, #2]
 80596b6:	68bb      	ldr	r3, [r7, #8]
 80596b8:	4611      	mov	r1, r2
 80596ba:	6878      	ldr	r0, [r7, #4]
 80596bc:	4798      	blx	r3
 80596be:	4603      	mov	r3, r0
 80596c0:	60fb      	str	r3, [r7, #12]
  }

  return ret_val;
 80596c2:	68fb      	ldr	r3, [r7, #12]
 80596c4:	b2db      	uxtb	r3, r3
}
 80596c6:	4618      	mov	r0, r3
 80596c8:	3710      	adds	r7, #16
 80596ca:	46bd      	mov	sp, r7
 80596cc:	bd80      	pop	{r7, pc}

080596ce <ch_get_num_samples>:

uint16_t ch_get_num_samples(ch_dev_t * dev_ptr)
{
 80596ce:	b480      	push	{r7}
 80596d0:	b083      	sub	sp, #12
 80596d2:	af00      	add	r7, sp, #0
 80596d4:	6078      	str	r0, [r7, #4]

  return dev_ptr->num_rx_samples;
 80596d6:	687b      	ldr	r3, [r7, #4]
 80596d8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
}
 80596da:	4618      	mov	r0, r3
 80596dc:	370c      	adds	r7, #12
 80596de:	46bd      	mov	sp, r7
 80596e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80596e4:	4770      	bx	lr

080596e6 <ch_set_max_range>:

  return dev_ptr->max_range;
}

uint8_t ch_set_max_range(ch_dev_t * dev_ptr, uint16_t max_range)
{
 80596e6:	b580      	push	{r7, lr}
 80596e8:	b084      	sub	sp, #16
 80596ea:	af00      	add	r7, sp, #0
 80596ec:	6078      	str	r0, [r7, #4]
 80596ee:	460b      	mov	r3, r1
 80596f0:	807b      	strh	r3, [r7, #2]
  uint8_t ret_val = RET_ERR;
 80596f2:	2301      	movs	r3, #1
 80596f4:	73fb      	strb	r3, [r7, #15]
  ch_set_max_range_func_t func_ptr = dev_ptr->api_funcs.set_max_range;
 80596f6:	687b      	ldr	r3, [r7, #4]
 80596f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80596fa:	60bb      	str	r3, [r7, #8]

  if (func_ptr != NULL) {
 80596fc:	68bb      	ldr	r3, [r7, #8]
 80596fe:	2b00      	cmp	r3, #0
 8059700:	d006      	beq.n	8059710 <ch_set_max_range+0x2a>
    ret_val = (*func_ptr) (dev_ptr, max_range);
 8059702:	887a      	ldrh	r2, [r7, #2]
 8059704:	68bb      	ldr	r3, [r7, #8]
 8059706:	4611      	mov	r1, r2
 8059708:	6878      	ldr	r0, [r7, #4]
 805970a:	4798      	blx	r3
 805970c:	4603      	mov	r3, r0
 805970e:	73fb      	strb	r3, [r7, #15]
  }

  return ret_val;
 8059710:	7bfb      	ldrb	r3, [r7, #15]
}
 8059712:	4618      	mov	r0, r3
 8059714:	3710      	adds	r7, #16
 8059716:	46bd      	mov	sp, r7
 8059718:	bd80      	pop	{r7, pc}

0805971a <ch_set_static_range>:

  return dev_ptr->static_range;
}

uint8_t ch_set_static_range(ch_dev_t * dev_ptr, uint16_t num_samples)
{
 805971a:	b580      	push	{r7, lr}
 805971c:	b084      	sub	sp, #16
 805971e:	af00      	add	r7, sp, #0
 8059720:	6078      	str	r0, [r7, #4]
 8059722:	460b      	mov	r3, r1
 8059724:	807b      	strh	r3, [r7, #2]
  uint8_t ret_val = RET_ERR;
 8059726:	2301      	movs	r3, #1
 8059728:	73fb      	strb	r3, [r7, #15]
  ch_set_static_range_func_t func_ptr = dev_ptr->api_funcs.set_static_range;
 805972a:	687b      	ldr	r3, [r7, #4]
 805972c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 805972e:	60bb      	str	r3, [r7, #8]

  if (func_ptr != NULL) {
 8059730:	68bb      	ldr	r3, [r7, #8]
 8059732:	2b00      	cmp	r3, #0
 8059734:	d006      	beq.n	8059744 <ch_set_static_range+0x2a>
    ret_val = (*func_ptr) (dev_ptr, num_samples);
 8059736:	887a      	ldrh	r2, [r7, #2]
 8059738:	68bb      	ldr	r3, [r7, #8]
 805973a:	4611      	mov	r1, r2
 805973c:	6878      	ldr	r0, [r7, #4]
 805973e:	4798      	blx	r3
 8059740:	4603      	mov	r3, r0
 8059742:	73fb      	strb	r3, [r7, #15]
  }

  return ret_val;
 8059744:	7bfb      	ldrb	r3, [r7, #15]
}
 8059746:	4618      	mov	r0, r3
 8059748:	3710      	adds	r7, #16
 805974a:	46bd      	mov	sp, r7
 805974c:	bd80      	pop	{r7, pc}

0805974e <ch_get_range>:

uint32_t ch_get_range(ch_dev_t * dev_ptr, ch_range_t range_type)
{
 805974e:	b580      	push	{r7, lr}
 8059750:	b084      	sub	sp, #16
 8059752:	af00      	add	r7, sp, #0
 8059754:	6078      	str	r0, [r7, #4]
 8059756:	460b      	mov	r3, r1
 8059758:	70fb      	strb	r3, [r7, #3]
  uint32_t range = 0;
 805975a:	2300      	movs	r3, #0
 805975c:	60fb      	str	r3, [r7, #12]
  ch_get_range_func_t func_ptr = dev_ptr->api_funcs.get_range;
 805975e:	687b      	ldr	r3, [r7, #4]
 8059760:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8059762:	60bb      	str	r3, [r7, #8]

  if (func_ptr != NULL) {
 8059764:	68bb      	ldr	r3, [r7, #8]
 8059766:	2b00      	cmp	r3, #0
 8059768:	d005      	beq.n	8059776 <ch_get_range+0x28>
    range = (*func_ptr) (dev_ptr, range_type);
 805976a:	78fa      	ldrb	r2, [r7, #3]
 805976c:	68bb      	ldr	r3, [r7, #8]
 805976e:	4611      	mov	r1, r2
 8059770:	6878      	ldr	r0, [r7, #4]
 8059772:	4798      	blx	r3
 8059774:	60f8      	str	r0, [r7, #12]
  }

  return range;
 8059776:	68fb      	ldr	r3, [r7, #12]
}
 8059778:	4618      	mov	r0, r3
 805977a:	3710      	adds	r7, #16
 805977c:	46bd      	mov	sp, r7
 805977e:	bd80      	pop	{r7, pc}

08059780 <ch_get_amplitude>:

uint16_t ch_get_amplitude(ch_dev_t * dev_ptr)
{
 8059780:	b580      	push	{r7, lr}
 8059782:	b084      	sub	sp, #16
 8059784:	af00      	add	r7, sp, #0
 8059786:	6078      	str	r0, [r7, #4]
  int amplitude = 0;
 8059788:	2300      	movs	r3, #0
 805978a:	60fb      	str	r3, [r7, #12]
  ch_get_amplitude_func_t func_ptr = dev_ptr->api_funcs.get_amplitude;
 805978c:	687b      	ldr	r3, [r7, #4]
 805978e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8059790:	60bb      	str	r3, [r7, #8]

  if (func_ptr != NULL) {
 8059792:	68bb      	ldr	r3, [r7, #8]
 8059794:	2b00      	cmp	r3, #0
 8059796:	d004      	beq.n	80597a2 <ch_get_amplitude+0x22>
    amplitude = (*func_ptr) (dev_ptr);
 8059798:	68bb      	ldr	r3, [r7, #8]
 805979a:	6878      	ldr	r0, [r7, #4]
 805979c:	4798      	blx	r3
 805979e:	4603      	mov	r3, r0
 80597a0:	60fb      	str	r3, [r7, #12]
  }

  return amplitude;
 80597a2:	68fb      	ldr	r3, [r7, #12]
 80597a4:	b29b      	uxth	r3, r3
}
 80597a6:	4618      	mov	r0, r3
 80597a8:	3710      	adds	r7, #16
 80597aa:	46bd      	mov	sp, r7
 80597ac:	bd80      	pop	{r7, pc}

080597ae <ch_get_frequency>:

  return dev_ptr->bandwidth;
}

uint32_t ch_get_frequency(ch_dev_t * dev_ptr)
{
 80597ae:	b480      	push	{r7}
 80597b0:	b083      	sub	sp, #12
 80597b2:	af00      	add	r7, sp, #0
 80597b4:	6078      	str	r0, [r7, #4]

  return dev_ptr->op_frequency;
 80597b6:	687b      	ldr	r3, [r7, #4]
 80597b8:	691b      	ldr	r3, [r3, #16]
}
 80597ba:	4618      	mov	r0, r3
 80597bc:	370c      	adds	r7, #12
 80597be:	46bd      	mov	sp, r7
 80597c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80597c4:	4770      	bx	lr

080597c6 <ch_get_rtc_cal_pulselength>:

uint16_t ch_get_rtc_cal_pulselength(ch_dev_t * dev_ptr)
{
 80597c6:	b480      	push	{r7}
 80597c8:	b083      	sub	sp, #12
 80597ca:	af00      	add	r7, sp, #0
 80597cc:	6078      	str	r0, [r7, #4]

  return dev_ptr->group->rtc_cal_pulse_ms;
 80597ce:	687b      	ldr	r3, [r7, #4]
 80597d0:	681b      	ldr	r3, [r3, #0]
 80597d2:	88db      	ldrh	r3, [r3, #6]
}
 80597d4:	4618      	mov	r0, r3
 80597d6:	370c      	adds	r7, #12
 80597d8:	46bd      	mov	sp, r7
 80597da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80597de:	4770      	bx	lr

080597e0 <ch_get_rtc_cal_result>:

uint16_t ch_get_rtc_cal_result(ch_dev_t * dev_ptr)
{
 80597e0:	b480      	push	{r7}
 80597e2:	b083      	sub	sp, #12
 80597e4:	af00      	add	r7, sp, #0
 80597e6:	6078      	str	r0, [r7, #4]

  return dev_ptr->rtc_cal_result;
 80597e8:	687b      	ldr	r3, [r7, #4]
 80597ea:	899b      	ldrh	r3, [r3, #12]
}
 80597ec:	4618      	mov	r0, r3
 80597ee:	370c      	adds	r7, #12
 80597f0:	46bd      	mov	sp, r7
 80597f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80597f6:	4770      	bx	lr

080597f8 <ch_get_iq_data>:
}

uint8_t ch_get_iq_data(ch_dev_t * dev_ptr, ch_iq_sample_t * buf_ptr,
                       uint16_t start_sample, uint16_t num_samples,
                       ch_io_mode_t mode)
{
 80597f8:	b590      	push	{r4, r7, lr}
 80597fa:	b089      	sub	sp, #36	; 0x24
 80597fc:	af02      	add	r7, sp, #8
 80597fe:	60f8      	str	r0, [r7, #12]
 8059800:	60b9      	str	r1, [r7, #8]
 8059802:	4611      	mov	r1, r2
 8059804:	461a      	mov	r2, r3
 8059806:	460b      	mov	r3, r1
 8059808:	80fb      	strh	r3, [r7, #6]
 805980a:	4613      	mov	r3, r2
 805980c:	80bb      	strh	r3, [r7, #4]
  int ret_val = 0;
 805980e:	2300      	movs	r3, #0
 8059810:	617b      	str	r3, [r7, #20]
  ch_get_iq_data_func_t func_ptr = dev_ptr->api_funcs.get_iq_data;
 8059812:	68fb      	ldr	r3, [r7, #12]
 8059814:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8059818:	613b      	str	r3, [r7, #16]

  if (func_ptr != NULL) {
 805981a:	693b      	ldr	r3, [r7, #16]
 805981c:	2b00      	cmp	r3, #0
 805981e:	d00b      	beq.n	8059838 <ch_get_iq_data+0x40>
    ret_val = (*func_ptr) (dev_ptr, buf_ptr, start_sample, num_samples, mode);
 8059820:	88b9      	ldrh	r1, [r7, #4]
 8059822:	88fa      	ldrh	r2, [r7, #6]
 8059824:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8059828:	9300      	str	r3, [sp, #0]
 805982a:	693c      	ldr	r4, [r7, #16]
 805982c:	460b      	mov	r3, r1
 805982e:	68b9      	ldr	r1, [r7, #8]
 8059830:	68f8      	ldr	r0, [r7, #12]
 8059832:	47a0      	blx	r4
 8059834:	4603      	mov	r3, r0
 8059836:	617b      	str	r3, [r7, #20]
  }

  return ret_val;
 8059838:	697b      	ldr	r3, [r7, #20]
 805983a:	b2db      	uxtb	r3, r3
}
 805983c:	4618      	mov	r0, r3
 805983e:	371c      	adds	r7, #28
 8059840:	46bd      	mov	sp, r7
 8059842:	bd90      	pop	{r4, r7, pc}

08059844 <ch_samples_to_mm>:

uint16_t ch_samples_to_mm(ch_dev_t * dev_ptr, uint16_t num_samples)
{
 8059844:	b580      	push	{r7, lr}
 8059846:	b084      	sub	sp, #16
 8059848:	af00      	add	r7, sp, #0
 805984a:	6078      	str	r0, [r7, #4]
 805984c:	460b      	mov	r3, r1
 805984e:	807b      	strh	r3, [r7, #2]
  int num_mm = 0;
 8059850:	2300      	movs	r3, #0
 8059852:	60fb      	str	r3, [r7, #12]
  ch_samples_to_mm_func_t func_ptr = dev_ptr->api_funcs.samples_to_mm;
 8059854:	687b      	ldr	r3, [r7, #4]
 8059856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 805985a:	60bb      	str	r3, [r7, #8]

  if (func_ptr != NULL) {
 805985c:	68bb      	ldr	r3, [r7, #8]
 805985e:	2b00      	cmp	r3, #0
 8059860:	d006      	beq.n	8059870 <ch_samples_to_mm+0x2c>
    num_mm = (*func_ptr) (dev_ptr, num_samples);
 8059862:	887a      	ldrh	r2, [r7, #2]
 8059864:	68bb      	ldr	r3, [r7, #8]
 8059866:	4611      	mov	r1, r2
 8059868:	6878      	ldr	r0, [r7, #4]
 805986a:	4798      	blx	r3
 805986c:	4603      	mov	r3, r0
 805986e:	60fb      	str	r3, [r7, #12]
  }

  return num_mm;
 8059870:	68fb      	ldr	r3, [r7, #12]
 8059872:	b29b      	uxth	r3, r3
}
 8059874:	4618      	mov	r0, r3
 8059876:	3710      	adds	r7, #16
 8059878:	46bd      	mov	sp, r7
 805987a:	bd80      	pop	{r7, pc}

0805987c <ch_set_thresholds>:

  return num_samples;
}

uint8_t ch_set_thresholds(ch_dev_t * dev_ptr, ch_thresholds_t * thresh_ptr)
{
 805987c:	b580      	push	{r7, lr}
 805987e:	b084      	sub	sp, #16
 8059880:	af00      	add	r7, sp, #0
 8059882:	6078      	str	r0, [r7, #4]
 8059884:	6039      	str	r1, [r7, #0]
  int ret_val = RET_ERR;
 8059886:	2301      	movs	r3, #1
 8059888:	60fb      	str	r3, [r7, #12]
  ch_set_thresholds_func_t func_ptr = dev_ptr->api_funcs.set_thresholds;
 805988a:	687b      	ldr	r3, [r7, #4]
 805988c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8059890:	60bb      	str	r3, [r7, #8]

  if ((func_ptr != NULL) && (thresh_ptr != NULL)) {
 8059892:	68bb      	ldr	r3, [r7, #8]
 8059894:	2b00      	cmp	r3, #0
 8059896:	d008      	beq.n	80598aa <ch_set_thresholds+0x2e>
 8059898:	683b      	ldr	r3, [r7, #0]
 805989a:	2b00      	cmp	r3, #0
 805989c:	d005      	beq.n	80598aa <ch_set_thresholds+0x2e>
    ret_val = (*func_ptr) (dev_ptr, thresh_ptr);
 805989e:	68bb      	ldr	r3, [r7, #8]
 80598a0:	6839      	ldr	r1, [r7, #0]
 80598a2:	6878      	ldr	r0, [r7, #4]
 80598a4:	4798      	blx	r3
 80598a6:	4603      	mov	r3, r0
 80598a8:	60fb      	str	r3, [r7, #12]
  }

  return ret_val;
 80598aa:	68fb      	ldr	r3, [r7, #12]
 80598ac:	b2db      	uxtb	r3, r3
}
 80598ae:	4618      	mov	r0, r3
 80598b0:	3710      	adds	r7, #16
 80598b2:	46bd      	mov	sp, r7
 80598b4:	bd80      	pop	{r7, pc}

080598b6 <ch_get_thresholds>:

uint8_t ch_get_thresholds(ch_dev_t * dev_ptr, ch_thresholds_t * thresh_ptr)
{
 80598b6:	b580      	push	{r7, lr}
 80598b8:	b084      	sub	sp, #16
 80598ba:	af00      	add	r7, sp, #0
 80598bc:	6078      	str	r0, [r7, #4]
 80598be:	6039      	str	r1, [r7, #0]
  int ret_val = RET_ERR;
 80598c0:	2301      	movs	r3, #1
 80598c2:	60fb      	str	r3, [r7, #12]
  ch_get_thresholds_func_t func_ptr = dev_ptr->api_funcs.get_thresholds;
 80598c4:	687b      	ldr	r3, [r7, #4]
 80598c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80598ca:	60bb      	str	r3, [r7, #8]

  if ((func_ptr != NULL) && (thresh_ptr != NULL)) {
 80598cc:	68bb      	ldr	r3, [r7, #8]
 80598ce:	2b00      	cmp	r3, #0
 80598d0:	d008      	beq.n	80598e4 <ch_get_thresholds+0x2e>
 80598d2:	683b      	ldr	r3, [r7, #0]
 80598d4:	2b00      	cmp	r3, #0
 80598d6:	d005      	beq.n	80598e4 <ch_get_thresholds+0x2e>
    ret_val = (*func_ptr) (dev_ptr, thresh_ptr);
 80598d8:	68bb      	ldr	r3, [r7, #8]
 80598da:	6839      	ldr	r1, [r7, #0]
 80598dc:	6878      	ldr	r0, [r7, #4]
 80598de:	4798      	blx	r3
 80598e0:	4603      	mov	r3, r0
 80598e2:	60fb      	str	r3, [r7, #12]
  }

  return ret_val;
 80598e4:	68fb      	ldr	r3, [r7, #12]
 80598e6:	b2db      	uxtb	r3, r3
}
 80598e8:	4618      	mov	r0, r3
 80598ea:	3710      	adds	r7, #16
 80598ec:	46bd      	mov	sp, r7
 80598ee:	bd80      	pop	{r7, pc}

080598f0 <ch_io_int_callback_set>:
 *
 * \note
 */
void ch_io_int_callback_set(ch_group_t * grp_ptr,
                            ch_io_int_callback_t callback_func_ptr)
{
 80598f0:	b480      	push	{r7}
 80598f2:	b083      	sub	sp, #12
 80598f4:	af00      	add	r7, sp, #0
 80598f6:	6078      	str	r0, [r7, #4]
 80598f8:	6039      	str	r1, [r7, #0]

  grp_ptr->io_int_callback = callback_func_ptr;
 80598fa:	687b      	ldr	r3, [r7, #4]
 80598fc:	683a      	ldr	r2, [r7, #0]
 80598fe:	60da      	str	r2, [r3, #12]
}
 8059900:	bf00      	nop
 8059902:	370c      	adds	r7, #12
 8059904:	46bd      	mov	sp, r7
 8059906:	f85d 7b04 	ldr.w	r7, [sp], #4
 805990a:	4770      	bx	lr

0805990c <ch_common_set_mode>:
#include "soniclib.h"
#include "ch_common.h"
#include "chirp_bsp.h"

uint8_t ch_common_set_mode(ch_dev_t * dev_ptr, ch_mode_t mode)
{
 805990c:	b580      	push	{r7, lr}
 805990e:	b084      	sub	sp, #16
 8059910:	af00      	add	r7, sp, #0
 8059912:	6078      	str	r0, [r7, #4]
 8059914:	460b      	mov	r3, r1
 8059916:	70fb      	strb	r3, [r7, #3]
  uint8_t ret_val = 0;
 8059918:	2300      	movs	r3, #0
 805991a:	73fb      	strb	r3, [r7, #15]
  uint8_t opmode_reg;
  uint8_t period_reg;
  uint8_t tick_interval_reg;

  if (dev_ptr->part_number == CH101_PART_NUMBER) {
 805991c:	687b      	ldr	r3, [r7, #4]
 805991e:	8b9b      	ldrh	r3, [r3, #28]
 8059920:	2b65      	cmp	r3, #101	; 0x65
 8059922:	d106      	bne.n	8059932 <ch_common_set_mode+0x26>
    opmode_reg = CH101_COMMON_REG_OPMODE;
 8059924:	2301      	movs	r3, #1
 8059926:	73bb      	strb	r3, [r7, #14]
    period_reg = CH101_COMMON_REG_PERIOD;
 8059928:	2305      	movs	r3, #5
 805992a:	737b      	strb	r3, [r7, #13]
    tick_interval_reg = CH101_COMMON_REG_TICK_INTERVAL;
 805992c:	2302      	movs	r3, #2
 805992e:	733b      	strb	r3, [r7, #12]
 8059930:	e005      	b.n	805993e <ch_common_set_mode+0x32>
  } else {
    opmode_reg = CH201_COMMON_REG_OPMODE;
 8059932:	2301      	movs	r3, #1
 8059934:	73bb      	strb	r3, [r7, #14]
    period_reg = CH201_COMMON_REG_PERIOD;
 8059936:	2305      	movs	r3, #5
 8059938:	737b      	strb	r3, [r7, #13]
    tick_interval_reg = CH201_COMMON_REG_TICK_INTERVAL;
 805993a:	2302      	movs	r3, #2
 805993c:	733b      	strb	r3, [r7, #12]
  }

  if (dev_ptr->sensor_connected) {
 805993e:	687b      	ldr	r3, [r7, #4]
 8059940:	7fdb      	ldrb	r3, [r3, #31]
 8059942:	2b00      	cmp	r3, #0
 8059944:	d03f      	beq.n	80599c6 <ch_common_set_mode+0xba>
    switch (mode) {
 8059946:	78fb      	ldrb	r3, [r7, #3]
 8059948:	2b20      	cmp	r3, #32
 805994a:	d031      	beq.n	80599b0 <ch_common_set_mode+0xa4>
 805994c:	2b20      	cmp	r3, #32
 805994e:	dc37      	bgt.n	80599c0 <ch_common_set_mode+0xb4>
 8059950:	2b10      	cmp	r3, #16
 8059952:	d025      	beq.n	80599a0 <ch_common_set_mode+0x94>
 8059954:	2b10      	cmp	r3, #16
 8059956:	dc33      	bgt.n	80599c0 <ch_common_set_mode+0xb4>
 8059958:	2b00      	cmp	r3, #0
 805995a:	d002      	beq.n	8059962 <ch_common_set_mode+0x56>
 805995c:	2b02      	cmp	r3, #2
 805995e:	d017      	beq.n	8059990 <ch_common_set_mode+0x84>
 8059960:	e02e      	b.n	80599c0 <ch_common_set_mode+0xb4>
    case CH_MODE_IDLE:
      chdrv_write_byte(dev_ptr, opmode_reg, CH_MODE_IDLE);
 8059962:	7bbb      	ldrb	r3, [r7, #14]
 8059964:	b29b      	uxth	r3, r3
 8059966:	2200      	movs	r2, #0
 8059968:	4619      	mov	r1, r3
 805996a:	6878      	ldr	r0, [r7, #4]
 805996c:	f000 fd31 	bl	805a3d2 <chdrv_write_byte>
      chdrv_write_byte(dev_ptr, period_reg, 0);
 8059970:	7b7b      	ldrb	r3, [r7, #13]
 8059972:	b29b      	uxth	r3, r3
 8059974:	2200      	movs	r2, #0
 8059976:	4619      	mov	r1, r3
 8059978:	6878      	ldr	r0, [r7, #4]
 805997a:	f000 fd2a 	bl	805a3d2 <chdrv_write_byte>
      chdrv_write_word(dev_ptr, tick_interval_reg, 2048);       // XXX need define
 805997e:	7b3b      	ldrb	r3, [r7, #12]
 8059980:	b29b      	uxth	r3, r3
 8059982:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8059986:	4619      	mov	r1, r3
 8059988:	6878      	ldr	r0, [r7, #4]
 805998a:	f000 fd3b 	bl	805a404 <chdrv_write_word>
      break;
 805998e:	e01b      	b.n	80599c8 <ch_common_set_mode+0xbc>

    case CH_MODE_FREERUN:
      chdrv_write_byte(dev_ptr, opmode_reg, CH_MODE_FREERUN);
 8059990:	7bbb      	ldrb	r3, [r7, #14]
 8059992:	b29b      	uxth	r3, r3
 8059994:	2202      	movs	r2, #2
 8059996:	4619      	mov	r1, r3
 8059998:	6878      	ldr	r0, [r7, #4]
 805999a:	f000 fd1a 	bl	805a3d2 <chdrv_write_byte>
      // XXX need to set period / tick interval (?)
      break;
 805999e:	e013      	b.n	80599c8 <ch_common_set_mode+0xbc>

    case CH_MODE_TRIGGERED_TX_RX:
      chdrv_write_byte(dev_ptr, opmode_reg, CH_MODE_TRIGGERED_TX_RX);
 80599a0:	7bbb      	ldrb	r3, [r7, #14]
 80599a2:	b29b      	uxth	r3, r3
 80599a4:	2210      	movs	r2, #16
 80599a6:	4619      	mov	r1, r3
 80599a8:	6878      	ldr	r0, [r7, #4]
 80599aa:	f000 fd12 	bl	805a3d2 <chdrv_write_byte>
      break;
 80599ae:	e00b      	b.n	80599c8 <ch_common_set_mode+0xbc>

    case CH_MODE_TRIGGERED_RX_ONLY:
      chdrv_write_byte(dev_ptr, opmode_reg, CH_MODE_TRIGGERED_RX_ONLY);
 80599b0:	7bbb      	ldrb	r3, [r7, #14]
 80599b2:	b29b      	uxth	r3, r3
 80599b4:	2220      	movs	r2, #32
 80599b6:	4619      	mov	r1, r3
 80599b8:	6878      	ldr	r0, [r7, #4]
 80599ba:	f000 fd0a 	bl	805a3d2 <chdrv_write_byte>
      break;
 80599be:	e003      	b.n	80599c8 <ch_common_set_mode+0xbc>

    default:
      ret_val = RET_ERR;        // return non-zero to indicate error
 80599c0:	2301      	movs	r3, #1
 80599c2:	73fb      	strb	r3, [r7, #15]
      break;
 80599c4:	e000      	b.n	80599c8 <ch_common_set_mode+0xbc>
    }
  }
 80599c6:	bf00      	nop

  return ret_val;
 80599c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80599ca:	4618      	mov	r0, r3
 80599cc:	3710      	adds	r7, #16
 80599ce:	46bd      	mov	sp, r7
 80599d0:	bd80      	pop	{r7, pc}

080599d2 <ch_common_fw_load>:

uint8_t ch_common_fw_load(ch_dev_t * dev_ptr)
{
 80599d2:	b580      	push	{r7, lr}
 80599d4:	b084      	sub	sp, #16
 80599d6:	af00      	add	r7, sp, #0
 80599d8:	6078      	str	r0, [r7, #4]
  uint8_t ch_err = 0;
 80599da:	2300      	movs	r3, #0
 80599dc:	72fb      	strb	r3, [r7, #11]
  uint16_t prog_mem_addr;
  uint16_t fw_size;

  if (dev_ptr->part_number == CH101_PART_NUMBER) {
 80599de:	687b      	ldr	r3, [r7, #4]
 80599e0:	8b9b      	ldrh	r3, [r3, #28]
 80599e2:	2b65      	cmp	r3, #101	; 0x65
 80599e4:	d106      	bne.n	80599f4 <ch_common_fw_load+0x22>
    prog_mem_addr = CH101_PROG_MEM_ADDR;
 80599e6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80599ea:	81fb      	strh	r3, [r7, #14]
    fw_size = CH101_FW_SIZE;
 80599ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80599f0:	81bb      	strh	r3, [r7, #12]
 80599f2:	e005      	b.n	8059a00 <ch_common_fw_load+0x2e>
  } else {
    prog_mem_addr = CH201_PROG_MEM_ADDR;
 80599f4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80599f8:	81fb      	strh	r3, [r7, #14]
    fw_size = CH201_FW_SIZE;
 80599fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80599fe:	81bb      	strh	r3, [r7, #12]
  }

  ch_err =
      chdrv_prog_mem_write(dev_ptr, prog_mem_addr,
                           (uint8_t *) dev_ptr->firmware, fw_size);
 8059a00:	687b      	ldr	r3, [r7, #4]
 8059a02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
      chdrv_prog_mem_write(dev_ptr, prog_mem_addr,
 8059a04:	89bb      	ldrh	r3, [r7, #12]
 8059a06:	89f9      	ldrh	r1, [r7, #14]
 8059a08:	6878      	ldr	r0, [r7, #4]
 8059a0a:	f000 fedf 	bl	805a7cc <chdrv_prog_mem_write>
 8059a0e:	4603      	mov	r3, r0
  ch_err =
 8059a10:	72fb      	strb	r3, [r7, #11]
  return ch_err;
 8059a12:	7afb      	ldrb	r3, [r7, #11]
}
 8059a14:	4618      	mov	r0, r3
 8059a16:	3710      	adds	r7, #16
 8059a18:	46bd      	mov	sp, r7
 8059a1a:	bd80      	pop	{r7, pc}

08059a1c <ch_common_set_sample_interval>:

uint8_t ch_common_set_sample_interval(ch_dev_t * dev_ptr, uint16_t interval_ms)
{
 8059a1c:	b580      	push	{r7, lr}
 8059a1e:	b086      	sub	sp, #24
 8059a20:	af00      	add	r7, sp, #0
 8059a22:	6078      	str	r0, [r7, #4]
 8059a24:	460b      	mov	r3, r1
 8059a26:	807b      	strh	r3, [r7, #2]
  uint8_t period_reg;
  uint8_t tick_interval_reg;
  uint8_t ret_val = 0;
 8059a28:	2300      	movs	r3, #0
 8059a2a:	757b      	strb	r3, [r7, #21]

  if (dev_ptr->part_number == CH101_PART_NUMBER) {
 8059a2c:	687b      	ldr	r3, [r7, #4]
 8059a2e:	8b9b      	ldrh	r3, [r3, #28]
 8059a30:	2b65      	cmp	r3, #101	; 0x65
 8059a32:	d104      	bne.n	8059a3e <ch_common_set_sample_interval+0x22>
    period_reg = CH101_COMMON_REG_PERIOD;
 8059a34:	2305      	movs	r3, #5
 8059a36:	75fb      	strb	r3, [r7, #23]
    tick_interval_reg = CH101_COMMON_REG_TICK_INTERVAL;
 8059a38:	2302      	movs	r3, #2
 8059a3a:	75bb      	strb	r3, [r7, #22]
 8059a3c:	e003      	b.n	8059a46 <ch_common_set_sample_interval+0x2a>
  } else {
    period_reg = CH201_COMMON_REG_PERIOD;
 8059a3e:	2305      	movs	r3, #5
 8059a40:	75fb      	strb	r3, [r7, #23]
    tick_interval_reg = CH201_COMMON_REG_TICK_INTERVAL;
 8059a42:	2302      	movs	r3, #2
 8059a44:	75bb      	strb	r3, [r7, #22]
  }

  if (dev_ptr->sensor_connected) {
 8059a46:	687b      	ldr	r3, [r7, #4]
 8059a48:	7fdb      	ldrb	r3, [r3, #31]
 8059a4a:	2b00      	cmp	r3, #0
 8059a4c:	d038      	beq.n	8059ac0 <ch_common_set_sample_interval+0xa4>
    uint32_t sample_interval =
        dev_ptr->rtc_cal_result * interval_ms /
 8059a4e:	687b      	ldr	r3, [r7, #4]
 8059a50:	899b      	ldrh	r3, [r3, #12]
 8059a52:	461a      	mov	r2, r3
 8059a54:	887b      	ldrh	r3, [r7, #2]
 8059a56:	fb03 f302 	mul.w	r3, r3, r2
        dev_ptr->group->rtc_cal_pulse_ms;
 8059a5a:	687a      	ldr	r2, [r7, #4]
 8059a5c:	6812      	ldr	r2, [r2, #0]
 8059a5e:	88d2      	ldrh	r2, [r2, #6]
        dev_ptr->rtc_cal_result * interval_ms /
 8059a60:	fb93 f3f2 	sdiv	r3, r3, r2
    uint32_t sample_interval =
 8059a64:	60bb      	str	r3, [r7, #8]
    uint32_t period;

    if (interval_ms != 0) {
 8059a66:	887b      	ldrh	r3, [r7, #2]
 8059a68:	2b00      	cmp	r3, #0
 8059a6a:	d009      	beq.n	8059a80 <ch_common_set_sample_interval+0x64>
      period = (sample_interval / 2048) + 1;    // XXX need define
 8059a6c:	68bb      	ldr	r3, [r7, #8]
 8059a6e:	0adb      	lsrs	r3, r3, #11
 8059a70:	3301      	adds	r3, #1
 8059a72:	613b      	str	r3, [r7, #16]
      if (period > UINT8_MAX) { /* check if result fits in register */
 8059a74:	693b      	ldr	r3, [r7, #16]
 8059a76:	2bff      	cmp	r3, #255	; 0xff
 8059a78:	d904      	bls.n	8059a84 <ch_common_set_sample_interval+0x68>
        ret_val = 1;
 8059a7a:	2301      	movs	r3, #1
 8059a7c:	757b      	strb	r3, [r7, #21]
 8059a7e:	e001      	b.n	8059a84 <ch_common_set_sample_interval+0x68>
      }
    } else {
      period = 0;
 8059a80:	2300      	movs	r3, #0
 8059a82:	613b      	str	r3, [r7, #16]
    }

    if (ret_val == 0) {
 8059a84:	7d7b      	ldrb	r3, [r7, #21]
 8059a86:	2b00      	cmp	r3, #0
 8059a88:	d11a      	bne.n	8059ac0 <ch_common_set_sample_interval+0xa4>
      uint32_t tick_interval;

      if (period != 0) {
 8059a8a:	693b      	ldr	r3, [r7, #16]
 8059a8c:	2b00      	cmp	r3, #0
 8059a8e:	d005      	beq.n	8059a9c <ch_common_set_sample_interval+0x80>
        tick_interval = sample_interval / period;
 8059a90:	68ba      	ldr	r2, [r7, #8]
 8059a92:	693b      	ldr	r3, [r7, #16]
 8059a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8059a98:	60fb      	str	r3, [r7, #12]
 8059a9a:	e001      	b.n	8059aa0 <ch_common_set_sample_interval+0x84>
      } else {
        tick_interval = 0;
 8059a9c:	2300      	movs	r3, #0
 8059a9e:	60fb      	str	r3, [r7, #12]
      char cbuf[80];
      snprintf(cbuf, sizeof(cbuf), "Set period=%lu, tick_interval=%lu\n",
               period, tick_interval);
      chbsp_print_str(cbuf);
#endif
      chdrv_write_byte(dev_ptr, period_reg, (uint8_t) period);
 8059aa0:	7dfb      	ldrb	r3, [r7, #23]
 8059aa2:	b29b      	uxth	r3, r3
 8059aa4:	693a      	ldr	r2, [r7, #16]
 8059aa6:	b2d2      	uxtb	r2, r2
 8059aa8:	4619      	mov	r1, r3
 8059aaa:	6878      	ldr	r0, [r7, #4]
 8059aac:	f000 fc91 	bl	805a3d2 <chdrv_write_byte>
      chdrv_write_word(dev_ptr, tick_interval_reg, (uint16_t) tick_interval);
 8059ab0:	7dbb      	ldrb	r3, [r7, #22]
 8059ab2:	b29b      	uxth	r3, r3
 8059ab4:	68fa      	ldr	r2, [r7, #12]
 8059ab6:	b292      	uxth	r2, r2
 8059ab8:	4619      	mov	r1, r3
 8059aba:	6878      	ldr	r0, [r7, #4]
 8059abc:	f000 fca2 	bl	805a404 <chdrv_write_word>
    }
  }

  return ret_val;
 8059ac0:	7d7b      	ldrb	r3, [r7, #21]
}
 8059ac2:	4618      	mov	r0, r3
 8059ac4:	3718      	adds	r7, #24
 8059ac6:	46bd      	mov	sp, r7
 8059ac8:	bd80      	pop	{r7, pc}

08059aca <ch_common_set_num_samples>:

// XXX    note uses actual num_samples, even for CH201
uint8_t ch_common_set_num_samples(ch_dev_t * dev_ptr, uint16_t num_samples)
{
 8059aca:	b580      	push	{r7, lr}
 8059acc:	b084      	sub	sp, #16
 8059ace:	af00      	add	r7, sp, #0
 8059ad0:	6078      	str	r0, [r7, #4]
 8059ad2:	460b      	mov	r3, r1
 8059ad4:	807b      	strh	r3, [r7, #2]
  uint8_t max_range_reg;
  uint8_t ret_val = 1;          // default is error (not connected or num_samples too big)
 8059ad6:	2301      	movs	r3, #1
 8059ad8:	73bb      	strb	r3, [r7, #14]

  if (dev_ptr->part_number == CH101_PART_NUMBER) {
 8059ada:	687b      	ldr	r3, [r7, #4]
 8059adc:	8b9b      	ldrh	r3, [r3, #28]
 8059ade:	2b65      	cmp	r3, #101	; 0x65
 8059ae0:	d102      	bne.n	8059ae8 <ch_common_set_num_samples+0x1e>
    max_range_reg = CH101_COMMON_REG_MAX_RANGE;
 8059ae2:	2307      	movs	r3, #7
 8059ae4:	73fb      	strb	r3, [r7, #15]
 8059ae6:	e004      	b.n	8059af2 <ch_common_set_num_samples+0x28>
  } else {
    max_range_reg = CH201_COMMON_REG_MAX_RANGE;
 8059ae8:	2307      	movs	r3, #7
 8059aea:	73fb      	strb	r3, [r7, #15]
    num_samples /= 2;           // each internal count for CH201 represents 2 physical samples
 8059aec:	887b      	ldrh	r3, [r7, #2]
 8059aee:	085b      	lsrs	r3, r3, #1
 8059af0:	807b      	strh	r3, [r7, #2]
  }

  if (dev_ptr->sensor_connected && (num_samples <= UINT8_MAX)) {
 8059af2:	687b      	ldr	r3, [r7, #4]
 8059af4:	7fdb      	ldrb	r3, [r3, #31]
 8059af6:	2b00      	cmp	r3, #0
 8059af8:	d00c      	beq.n	8059b14 <ch_common_set_num_samples+0x4a>
 8059afa:	887b      	ldrh	r3, [r7, #2]
 8059afc:	2bff      	cmp	r3, #255	; 0xff
 8059afe:	d809      	bhi.n	8059b14 <ch_common_set_num_samples+0x4a>
    ret_val = chdrv_write_byte(dev_ptr, max_range_reg, num_samples);
 8059b00:	7bfb      	ldrb	r3, [r7, #15]
 8059b02:	b29b      	uxth	r3, r3
 8059b04:	887a      	ldrh	r2, [r7, #2]
 8059b06:	b2d2      	uxtb	r2, r2
 8059b08:	4619      	mov	r1, r3
 8059b0a:	6878      	ldr	r0, [r7, #4]
 8059b0c:	f000 fc61 	bl	805a3d2 <chdrv_write_byte>
 8059b10:	4603      	mov	r3, r0
 8059b12:	73bb      	strb	r3, [r7, #14]
  }

  if (!ret_val) {
 8059b14:	7bbb      	ldrb	r3, [r7, #14]
 8059b16:	2b00      	cmp	r3, #0
 8059b18:	d103      	bne.n	8059b22 <ch_common_set_num_samples+0x58>
    dev_ptr->num_rx_samples = num_samples;
 8059b1a:	687b      	ldr	r3, [r7, #4]
 8059b1c:	887a      	ldrh	r2, [r7, #2]
 8059b1e:	849a      	strh	r2, [r3, #36]	; 0x24
 8059b20:	e002      	b.n	8059b28 <ch_common_set_num_samples+0x5e>
  } else {
    dev_ptr->num_rx_samples = 0;
 8059b22:	687b      	ldr	r3, [r7, #4]
 8059b24:	2200      	movs	r2, #0
 8059b26:	849a      	strh	r2, [r3, #36]	; 0x24
  }

  return ret_val;
 8059b28:	7bbb      	ldrb	r3, [r7, #14]
}
 8059b2a:	4618      	mov	r0, r3
 8059b2c:	3710      	adds	r7, #16
 8059b2e:	46bd      	mov	sp, r7
 8059b30:	bd80      	pop	{r7, pc}

08059b32 <ch_common_set_max_range>:

uint8_t ch_common_set_max_range(ch_dev_t * dev_ptr, uint16_t max_range_mm)
{
 8059b32:	b580      	push	{r7, lr}
 8059b34:	b084      	sub	sp, #16
 8059b36:	af00      	add	r7, sp, #0
 8059b38:	6078      	str	r0, [r7, #4]
 8059b3a:	460b      	mov	r3, r1
 8059b3c:	807b      	strh	r3, [r7, #2]
  uint8_t ret_val;
  uint32_t num_samples;

  ret_val = (!dev_ptr->sensor_connected);
 8059b3e:	687b      	ldr	r3, [r7, #4]
 8059b40:	7fdb      	ldrb	r3, [r3, #31]
 8059b42:	2b00      	cmp	r3, #0
 8059b44:	bf0c      	ite	eq
 8059b46:	2301      	moveq	r3, #1
 8059b48:	2300      	movne	r3, #0
 8059b4a:	b2db      	uxtb	r3, r3
 8059b4c:	73fb      	strb	r3, [r7, #15]

  if (!ret_val) {
 8059b4e:	7bfb      	ldrb	r3, [r7, #15]
 8059b50:	2b00      	cmp	r3, #0
 8059b52:	d11d      	bne.n	8059b90 <ch_common_set_max_range+0x5e>
    num_samples = ch_common_mm_to_samples(dev_ptr, max_range_mm);
 8059b54:	887b      	ldrh	r3, [r7, #2]
 8059b56:	4619      	mov	r1, r3
 8059b58:	6878      	ldr	r0, [r7, #4]
 8059b5a:	f000 f82a 	bl	8059bb2 <ch_common_mm_to_samples>
 8059b5e:	4603      	mov	r3, r0
 8059b60:	60bb      	str	r3, [r7, #8]

    if (num_samples > dev_ptr->max_samples) {
 8059b62:	687b      	ldr	r3, [r7, #4]
 8059b64:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8059b66:	461a      	mov	r2, r3
 8059b68:	68bb      	ldr	r3, [r7, #8]
 8059b6a:	4293      	cmp	r3, r2
 8059b6c:	d90d      	bls.n	8059b8a <ch_common_set_max_range+0x58>
      num_samples = dev_ptr->max_samples;
 8059b6e:	687b      	ldr	r3, [r7, #4]
 8059b70:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8059b72:	60bb      	str	r3, [r7, #8]
      dev_ptr->max_range = ch_samples_to_mm(dev_ptr, num_samples);      // store reduced max range
 8059b74:	68bb      	ldr	r3, [r7, #8]
 8059b76:	b29b      	uxth	r3, r3
 8059b78:	4619      	mov	r1, r3
 8059b7a:	6878      	ldr	r0, [r7, #4]
 8059b7c:	f7ff fe62 	bl	8059844 <ch_samples_to_mm>
 8059b80:	4603      	mov	r3, r0
 8059b82:	461a      	mov	r2, r3
 8059b84:	687b      	ldr	r3, [r7, #4]
 8059b86:	80da      	strh	r2, [r3, #6]
 8059b88:	e002      	b.n	8059b90 <ch_common_set_max_range+0x5e>
    } else {
      dev_ptr->max_range = max_range_mm;        // store user-specified max range
 8059b8a:	687b      	ldr	r3, [r7, #4]
 8059b8c:	887a      	ldrh	r2, [r7, #2]
 8059b8e:	80da      	strh	r2, [r3, #6]
    snprintf(cbuf, sizeof(cbuf), "num_samples=%lu\n", num_samples);
    chbsp_print_str(cbuf);
#endif
  }

  if (!ret_val) {
 8059b90:	7bfb      	ldrb	r3, [r7, #15]
 8059b92:	2b00      	cmp	r3, #0
 8059b94:	d108      	bne.n	8059ba8 <ch_common_set_max_range+0x76>
    ret_val = ch_common_set_num_samples(dev_ptr, (uint8_t) num_samples);
 8059b96:	68bb      	ldr	r3, [r7, #8]
 8059b98:	b2db      	uxtb	r3, r3
 8059b9a:	b29b      	uxth	r3, r3
 8059b9c:	4619      	mov	r1, r3
 8059b9e:	6878      	ldr	r0, [r7, #4]
 8059ba0:	f7ff ff93 	bl	8059aca <ch_common_set_num_samples>
 8059ba4:	4603      	mov	r3, r0
 8059ba6:	73fb      	strb	r3, [r7, #15]
  }
#ifdef CHDRV_DEBUG
  printf("Set samples: ret_val: %u  dev_ptr->num_rx_samples: %u\n", ret_val,
         dev_ptr->num_rx_samples);
#endif
  return ret_val;
 8059ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8059baa:	4618      	mov	r0, r3
 8059bac:	3710      	adds	r7, #16
 8059bae:	46bd      	mov	sp, r7
 8059bb0:	bd80      	pop	{r7, pc}

08059bb2 <ch_common_mm_to_samples>:

uint16_t ch_common_mm_to_samples(ch_dev_t * dev_ptr, uint16_t num_mm)
{
 8059bb2:	b580      	push	{r7, lr}
 8059bb4:	b086      	sub	sp, #24
 8059bb6:	af00      	add	r7, sp, #0
 8059bb8:	6078      	str	r0, [r7, #4]
 8059bba:	460b      	mov	r3, r1
 8059bbc:	807b      	strh	r3, [r7, #2]
  uint8_t err;
  uint16_t scale_factor;
  uint32_t num_samples = 0;
 8059bbe:	2300      	movs	r3, #0
 8059bc0:	613b      	str	r3, [r7, #16]
  uint32_t divisor1;
  uint32_t divisor2 = (dev_ptr->group->rtc_cal_pulse_ms * CH_SPEEDOFSOUND_MPS);
 8059bc2:	687b      	ldr	r3, [r7, #4]
 8059bc4:	681b      	ldr	r3, [r3, #0]
 8059bc6:	88db      	ldrh	r3, [r3, #6]
 8059bc8:	461a      	mov	r2, r3
 8059bca:	f240 1357 	movw	r3, #343	; 0x157
 8059bce:	fb03 f302 	mul.w	r3, r3, r2
 8059bd2:	60bb      	str	r3, [r7, #8]

  err = (!dev_ptr) || (!dev_ptr->sensor_connected);
 8059bd4:	687b      	ldr	r3, [r7, #4]
 8059bd6:	2b00      	cmp	r3, #0
 8059bd8:	d003      	beq.n	8059be2 <ch_common_mm_to_samples+0x30>
 8059bda:	687b      	ldr	r3, [r7, #4]
 8059bdc:	7fdb      	ldrb	r3, [r3, #31]
 8059bde:	2b00      	cmp	r3, #0
 8059be0:	d101      	bne.n	8059be6 <ch_common_mm_to_samples+0x34>
 8059be2:	2301      	movs	r3, #1
 8059be4:	e000      	b.n	8059be8 <ch_common_mm_to_samples+0x36>
 8059be6:	2300      	movs	r3, #0
 8059be8:	75fb      	strb	r3, [r7, #23]

  if (!err) {
 8059bea:	7dfb      	ldrb	r3, [r7, #23]
 8059bec:	2b00      	cmp	r3, #0
 8059bee:	d114      	bne.n	8059c1a <ch_common_mm_to_samples+0x68>
    if (dev_ptr->part_number == CH101_PART_NUMBER) {
 8059bf0:	687b      	ldr	r3, [r7, #4]
 8059bf2:	8b9b      	ldrh	r3, [r3, #28]
 8059bf4:	2b65      	cmp	r3, #101	; 0x65
 8059bf6:	d103      	bne.n	8059c00 <ch_common_mm_to_samples+0x4e>
      divisor1 = 0x2000;        // (4*16*128)  XXX need define(s)
 8059bf8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8059bfc:	60fb      	str	r3, [r7, #12]
 8059bfe:	e002      	b.n	8059c06 <ch_common_mm_to_samples+0x54>
    } else {
      divisor1 = 0x4000;        // (4*16*128*2)  XXX need define(s)
 8059c00:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8059c04:	60fb      	str	r3, [r7, #12]
    }

    if (dev_ptr->scale_factor == 0) {
 8059c06:	687b      	ldr	r3, [r7, #4]
 8059c08:	8adb      	ldrh	r3, [r3, #22]
 8059c0a:	2b00      	cmp	r3, #0
 8059c0c:	d102      	bne.n	8059c14 <ch_common_mm_to_samples+0x62>
      ch_common_store_scale_factor(dev_ptr);
 8059c0e:	6878      	ldr	r0, [r7, #4]
 8059c10:	f000 f998 	bl	8059f44 <ch_common_store_scale_factor>
    }

    scale_factor = dev_ptr->scale_factor;
 8059c14:	687b      	ldr	r3, [r7, #4]
 8059c16:	8adb      	ldrh	r3, [r3, #22]
 8059c18:	82bb      	strh	r3, [r7, #20]
  }

  if (!err) {
 8059c1a:	7dfb      	ldrb	r3, [r7, #23]
 8059c1c:	2b00      	cmp	r3, #0
 8059c1e:	d121      	bne.n	8059c64 <ch_common_mm_to_samples+0xb2>
    // Two steps of division to avoid needing a type larger than 32 bits
    // Ceiling division to ensure result is at least enough samples to meet specified range
    num_samples =
        ((dev_ptr->rtc_cal_result * scale_factor) + (divisor1 - 1)) / divisor1;
 8059c20:	687b      	ldr	r3, [r7, #4]
 8059c22:	899b      	ldrh	r3, [r3, #12]
 8059c24:	461a      	mov	r2, r3
 8059c26:	8abb      	ldrh	r3, [r7, #20]
 8059c28:	fb03 f302 	mul.w	r3, r3, r2
 8059c2c:	461a      	mov	r2, r3
 8059c2e:	68fb      	ldr	r3, [r7, #12]
 8059c30:	4413      	add	r3, r2
 8059c32:	1e5a      	subs	r2, r3, #1
    num_samples =
 8059c34:	68fb      	ldr	r3, [r7, #12]
 8059c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8059c3a:	613b      	str	r3, [r7, #16]
    num_samples = ((num_samples * num_mm) + (divisor2 - 1)) / divisor2;
 8059c3c:	887b      	ldrh	r3, [r7, #2]
 8059c3e:	693a      	ldr	r2, [r7, #16]
 8059c40:	fb02 f203 	mul.w	r2, r2, r3
 8059c44:	68bb      	ldr	r3, [r7, #8]
 8059c46:	4413      	add	r3, r2
 8059c48:	1e5a      	subs	r2, r3, #1
 8059c4a:	68bb      	ldr	r3, [r7, #8]
 8059c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8059c50:	613b      	str	r3, [r7, #16]
    err = num_samples > UINT16_MAX;
 8059c52:	693b      	ldr	r3, [r7, #16]
 8059c54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8059c58:	4293      	cmp	r3, r2
 8059c5a:	bf8c      	ite	hi
 8059c5c:	2301      	movhi	r3, #1
 8059c5e:	2300      	movls	r3, #0
 8059c60:	b2db      	uxtb	r3, r3
 8059c62:	75fb      	strb	r3, [r7, #23]
  }

  if (!err) {
 8059c64:	7dfb      	ldrb	r3, [r7, #23]
 8059c66:	2b00      	cmp	r3, #0
 8059c68:	d10d      	bne.n	8059c86 <ch_common_mm_to_samples+0xd4>
    if (dev_ptr->part_number == CH201_PART_NUMBER) {
 8059c6a:	687b      	ldr	r3, [r7, #4]
 8059c6c:	8b9b      	ldrh	r3, [r3, #28]
 8059c6e:	2bc9      	cmp	r3, #201	; 0xc9
 8059c70:	d102      	bne.n	8059c78 <ch_common_mm_to_samples+0xc6>
      num_samples *= 2;         // each internal count for CH201 represents 2 physical samples
 8059c72:	693b      	ldr	r3, [r7, #16]
 8059c74:	005b      	lsls	r3, r3, #1
 8059c76:	613b      	str	r3, [r7, #16]
    }

    /* Adjust for oversampling, if used */
    num_samples <<= dev_ptr->oversample;
 8059c78:	687b      	ldr	r3, [r7, #4]
 8059c7a:	f993 301e 	ldrsb.w	r3, [r3, #30]
 8059c7e:	461a      	mov	r2, r3
 8059c80:	693b      	ldr	r3, [r7, #16]
 8059c82:	4093      	lsls	r3, r2
 8059c84:	613b      	str	r3, [r7, #16]
  }
  if (err) {
 8059c86:	7dfb      	ldrb	r3, [r7, #23]
 8059c88:	2b00      	cmp	r3, #0
 8059c8a:	d001      	beq.n	8059c90 <ch_common_mm_to_samples+0xde>
    num_samples = 0;            // return zero if error
 8059c8c:	2300      	movs	r3, #0
 8059c8e:	613b      	str	r3, [r7, #16]
  }

  return (uint16_t) num_samples;
 8059c90:	693b      	ldr	r3, [r7, #16]
 8059c92:	b29b      	uxth	r3, r3
}
 8059c94:	4618      	mov	r0, r3
 8059c96:	3718      	adds	r7, #24
 8059c98:	46bd      	mov	sp, r7
 8059c9a:	bd80      	pop	{r7, pc}

08059c9c <ch_common_samples_to_mm>:

uint16_t ch_common_samples_to_mm(ch_dev_t * dev_ptr, uint16_t num_samples)
{
 8059c9c:	b480      	push	{r7}
 8059c9e:	b085      	sub	sp, #20
 8059ca0:	af00      	add	r7, sp, #0
 8059ca2:	6078      	str	r0, [r7, #4]
 8059ca4:	460b      	mov	r3, r1
 8059ca6:	807b      	strh	r3, [r7, #2]
  uint32_t num_mm = 0;
 8059ca8:	2300      	movs	r3, #0
 8059caa:	60fb      	str	r3, [r7, #12]
  uint32_t op_freq = dev_ptr->op_frequency;
 8059cac:	687b      	ldr	r3, [r7, #4]
 8059cae:	691b      	ldr	r3, [r3, #16]
 8059cb0:	60bb      	str	r3, [r7, #8]

  if (op_freq != 0) {
 8059cb2:	68bb      	ldr	r3, [r7, #8]
 8059cb4:	2b00      	cmp	r3, #0
 8059cb6:	d008      	beq.n	8059cca <ch_common_samples_to_mm+0x2e>
    num_mm =
        ((uint32_t) num_samples * CH_SPEEDOFSOUND_MPS * 8 * 1000) / (op_freq *
 8059cb8:	887b      	ldrh	r3, [r7, #2]
 8059cba:	4a0b      	ldr	r2, [pc, #44]	; (8059ce8 <ch_common_samples_to_mm+0x4c>)
 8059cbc:	fb02 f203 	mul.w	r2, r2, r3
 8059cc0:	68bb      	ldr	r3, [r7, #8]
 8059cc2:	005b      	lsls	r3, r3, #1
    num_mm =
 8059cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8059cc8:	60fb      	str	r3, [r7, #12]
                                                                     2);
  }

  /* Adjust for oversampling, if used */
  num_mm >>= dev_ptr->oversample;
 8059cca:	687b      	ldr	r3, [r7, #4]
 8059ccc:	f993 301e 	ldrsb.w	r3, [r3, #30]
 8059cd0:	461a      	mov	r2, r3
 8059cd2:	68fb      	ldr	r3, [r7, #12]
 8059cd4:	40d3      	lsrs	r3, r2
 8059cd6:	60fb      	str	r3, [r7, #12]

  return (uint16_t) num_mm;
 8059cd8:	68fb      	ldr	r3, [r7, #12]
 8059cda:	b29b      	uxth	r3, r3
}
 8059cdc:	4618      	mov	r0, r3
 8059cde:	3714      	adds	r7, #20
 8059ce0:	46bd      	mov	sp, r7
 8059ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8059ce6:	4770      	bx	lr
 8059ce8:	0029dec0 	.word	0x0029dec0

08059cec <ch_common_get_range>:
  }
  return ret_val;
}

uint32_t ch_common_get_range(ch_dev_t * dev_ptr, ch_range_t range_type)
{
 8059cec:	b580      	push	{r7, lr}
 8059cee:	b08a      	sub	sp, #40	; 0x28
 8059cf0:	af00      	add	r7, sp, #0
 8059cf2:	6078      	str	r0, [r7, #4]
 8059cf4:	460b      	mov	r3, r1
 8059cf6:	70fb      	strb	r3, [r7, #3]
  uint8_t tof_reg;
  uint32_t range = CH_NO_TARGET;
 8059cf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8059cfc:	623b      	str	r3, [r7, #32]
  uint16_t time_of_flight;
  uint16_t scale_factor;
  int err;

  if (dev_ptr->sensor_connected) {
 8059cfe:	687b      	ldr	r3, [r7, #4]
 8059d00:	7fdb      	ldrb	r3, [r3, #31]
 8059d02:	2b00      	cmp	r3, #0
 8059d04:	d055      	beq.n	8059db2 <ch_common_get_range+0xc6>

    if (dev_ptr->part_number == CH101_PART_NUMBER) {
 8059d06:	687b      	ldr	r3, [r7, #4]
 8059d08:	8b9b      	ldrh	r3, [r3, #28]
 8059d0a:	2b65      	cmp	r3, #101	; 0x65
 8059d0c:	d103      	bne.n	8059d16 <ch_common_get_range+0x2a>
      tof_reg = CH101_COMMON_REG_TOF;
 8059d0e:	2318      	movs	r3, #24
 8059d10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8059d14:	e002      	b.n	8059d1c <ch_common_get_range+0x30>
    } else {
      tof_reg = CH201_COMMON_REG_TOF;
 8059d16:	2324      	movs	r3, #36	; 0x24
 8059d18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    err = chdrv_read_word(dev_ptr, tof_reg, &time_of_flight);
 8059d1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8059d20:	b29b      	uxth	r3, r3
 8059d22:	f107 020e 	add.w	r2, r7, #14
 8059d26:	4619      	mov	r1, r3
 8059d28:	6878      	ldr	r0, [r7, #4]
 8059d2a:	f000 fbb1 	bl	805a490 <chdrv_read_word>
 8059d2e:	61f8      	str	r0, [r7, #28]

    if (!err && (time_of_flight != UINT16_MAX)) {       // If object detected
 8059d30:	69fb      	ldr	r3, [r7, #28]
 8059d32:	2b00      	cmp	r3, #0
 8059d34:	d13d      	bne.n	8059db2 <ch_common_get_range+0xc6>
 8059d36:	89fb      	ldrh	r3, [r7, #14]
 8059d38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8059d3c:	4293      	cmp	r3, r2
 8059d3e:	d038      	beq.n	8059db2 <ch_common_get_range+0xc6>

      if (dev_ptr->scale_factor == 0) {
 8059d40:	687b      	ldr	r3, [r7, #4]
 8059d42:	8adb      	ldrh	r3, [r3, #22]
 8059d44:	2b00      	cmp	r3, #0
 8059d46:	d102      	bne.n	8059d4e <ch_common_get_range+0x62>
        ch_common_store_scale_factor(dev_ptr);
 8059d48:	6878      	ldr	r0, [r7, #4]
 8059d4a:	f000 f8fb 	bl	8059f44 <ch_common_store_scale_factor>
      }
      scale_factor = dev_ptr->scale_factor;
 8059d4e:	687b      	ldr	r3, [r7, #4]
 8059d50:	8adb      	ldrh	r3, [r3, #22]
 8059d52:	837b      	strh	r3, [r7, #26]

      if (scale_factor != 0) {
 8059d54:	8b7b      	ldrh	r3, [r7, #26]
 8059d56:	2b00      	cmp	r3, #0
 8059d58:	d02b      	beq.n	8059db2 <ch_common_get_range+0xc6>
        uint32_t num =
            (CH_SPEEDOFSOUND_MPS * dev_ptr->group->rtc_cal_pulse_ms *
 8059d5a:	687b      	ldr	r3, [r7, #4]
 8059d5c:	681b      	ldr	r3, [r3, #0]
 8059d5e:	88db      	ldrh	r3, [r3, #6]
             (uint32_t) time_of_flight);
 8059d60:	89fa      	ldrh	r2, [r7, #14]
            (CH_SPEEDOFSOUND_MPS * dev_ptr->group->rtc_cal_pulse_ms *
 8059d62:	fb02 f303 	mul.w	r3, r2, r3
        uint32_t num =
 8059d66:	f240 1257 	movw	r2, #343	; 0x157
 8059d6a:	fb02 f303 	mul.w	r3, r2, r3
 8059d6e:	617b      	str	r3, [r7, #20]
        uint32_t den = ((uint32_t) dev_ptr->rtc_cal_result * (uint32_t) scale_factor) >> 11;    // XXX need define
 8059d70:	687b      	ldr	r3, [r7, #4]
 8059d72:	899b      	ldrh	r3, [r3, #12]
 8059d74:	461a      	mov	r2, r3
 8059d76:	8b7b      	ldrh	r3, [r7, #26]
 8059d78:	fb03 f302 	mul.w	r3, r3, r2
 8059d7c:	0adb      	lsrs	r3, r3, #11
 8059d7e:	613b      	str	r3, [r7, #16]

        range = (num / den);
 8059d80:	697a      	ldr	r2, [r7, #20]
 8059d82:	693b      	ldr	r3, [r7, #16]
 8059d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8059d88:	623b      	str	r3, [r7, #32]

        if (dev_ptr->part_number == CH201_PART_NUMBER) {
 8059d8a:	687b      	ldr	r3, [r7, #4]
 8059d8c:	8b9b      	ldrh	r3, [r3, #28]
 8059d8e:	2bc9      	cmp	r3, #201	; 0xc9
 8059d90:	d102      	bne.n	8059d98 <ch_common_get_range+0xac>
          range *= 2;
 8059d92:	6a3b      	ldr	r3, [r7, #32]
 8059d94:	005b      	lsls	r3, r3, #1
 8059d96:	623b      	str	r3, [r7, #32]
        }

        if (range_type == CH_RANGE_ECHO_ONE_WAY) {
 8059d98:	78fb      	ldrb	r3, [r7, #3]
 8059d9a:	2b00      	cmp	r3, #0
 8059d9c:	d102      	bne.n	8059da4 <ch_common_get_range+0xb8>
          range /= 2;
 8059d9e:	6a3b      	ldr	r3, [r7, #32]
 8059da0:	085b      	lsrs	r3, r3, #1
 8059da2:	623b      	str	r3, [r7, #32]
        }

        /* Adjust for oversampling, if used */
        range >>= dev_ptr->oversample;
 8059da4:	687b      	ldr	r3, [r7, #4]
 8059da6:	f993 301e 	ldrsb.w	r3, [r3, #30]
 8059daa:	461a      	mov	r2, r3
 8059dac:	6a3b      	ldr	r3, [r7, #32]
 8059dae:	40d3      	lsrs	r3, r2
 8059db0:	623b      	str	r3, [r7, #32]

      }
    }
  }
  return range;
 8059db2:	6a3b      	ldr	r3, [r7, #32]
}
 8059db4:	4618      	mov	r0, r3
 8059db6:	3728      	adds	r7, #40	; 0x28
 8059db8:	46bd      	mov	sp, r7
 8059dba:	bd80      	pop	{r7, pc}

08059dbc <ch_common_get_amplitude>:

uint16_t ch_common_get_amplitude(ch_dev_t * dev_ptr)
{
 8059dbc:	b580      	push	{r7, lr}
 8059dbe:	b084      	sub	sp, #16
 8059dc0:	af00      	add	r7, sp, #0
 8059dc2:	6078      	str	r0, [r7, #4]
  uint8_t amplitude_reg;
  uint16_t amplitude = 0;
 8059dc4:	2300      	movs	r3, #0
 8059dc6:	81bb      	strh	r3, [r7, #12]

  if (dev_ptr->sensor_connected) {
 8059dc8:	687b      	ldr	r3, [r7, #4]
 8059dca:	7fdb      	ldrb	r3, [r3, #31]
 8059dcc:	2b00      	cmp	r3, #0
 8059dce:	d010      	beq.n	8059df2 <ch_common_get_amplitude+0x36>
    if (dev_ptr->part_number == CH101_PART_NUMBER) {
 8059dd0:	687b      	ldr	r3, [r7, #4]
 8059dd2:	8b9b      	ldrh	r3, [r3, #28]
 8059dd4:	2b65      	cmp	r3, #101	; 0x65
 8059dd6:	d102      	bne.n	8059dde <ch_common_get_amplitude+0x22>
      amplitude_reg = CH101_COMMON_REG_AMPLITUDE;
 8059dd8:	231a      	movs	r3, #26
 8059dda:	73fb      	strb	r3, [r7, #15]
 8059ddc:	e001      	b.n	8059de2 <ch_common_get_amplitude+0x26>
    } else {
      amplitude_reg = CH201_COMMON_REG_AMPLITUDE;
 8059dde:	2326      	movs	r3, #38	; 0x26
 8059de0:	73fb      	strb	r3, [r7, #15]
    }

    chdrv_read_word(dev_ptr, amplitude_reg, &amplitude);
 8059de2:	7bfb      	ldrb	r3, [r7, #15]
 8059de4:	b29b      	uxth	r3, r3
 8059de6:	f107 020c 	add.w	r2, r7, #12
 8059dea:	4619      	mov	r1, r3
 8059dec:	6878      	ldr	r0, [r7, #4]
 8059dee:	f000 fb4f 	bl	805a490 <chdrv_read_word>
  }

  return amplitude;
 8059df2:	89bb      	ldrh	r3, [r7, #12]
}
 8059df4:	4618      	mov	r0, r3
 8059df6:	3710      	adds	r7, #16
 8059df8:	46bd      	mov	sp, r7
 8059dfa:	bd80      	pop	{r7, pc}

08059dfc <ch_common_get_locked_state>:

uint8_t ch_common_get_locked_state(ch_dev_t * dev_ptr)
{
 8059dfc:	b580      	push	{r7, lr}
 8059dfe:	b084      	sub	sp, #16
 8059e00:	af00      	add	r7, sp, #0
 8059e02:	6078      	str	r0, [r7, #4]
  uint8_t ready_reg;
  uint8_t lock_mask;
  uint8_t ret_val = 0;
 8059e04:	2300      	movs	r3, #0
 8059e06:	737b      	strb	r3, [r7, #13]

  if (dev_ptr->part_number == CH101_PART_NUMBER) {
 8059e08:	687b      	ldr	r3, [r7, #4]
 8059e0a:	8b9b      	ldrh	r3, [r3, #28]
 8059e0c:	2b65      	cmp	r3, #101	; 0x65
 8059e0e:	d104      	bne.n	8059e1a <ch_common_get_locked_state+0x1e>
    ready_reg = CH101_COMMON_REG_READY;
 8059e10:	2314      	movs	r3, #20
 8059e12:	73fb      	strb	r3, [r7, #15]
    lock_mask = CH101_COMMON_READY_FREQ_LOCKED;
 8059e14:	2302      	movs	r3, #2
 8059e16:	73bb      	strb	r3, [r7, #14]
 8059e18:	e003      	b.n	8059e22 <ch_common_get_locked_state+0x26>
  } else {
    ready_reg = CH201_COMMON_REG_READY;
 8059e1a:	2314      	movs	r3, #20
 8059e1c:	73fb      	strb	r3, [r7, #15]
    lock_mask = CH201_COMMON_READY_FREQ_LOCKED;
 8059e1e:	2302      	movs	r3, #2
 8059e20:	73bb      	strb	r3, [r7, #14]
  }

  if (dev_ptr->sensor_connected) {
 8059e22:	687b      	ldr	r3, [r7, #4]
 8059e24:	7fdb      	ldrb	r3, [r3, #31]
 8059e26:	2b00      	cmp	r3, #0
 8059e28:	d011      	beq.n	8059e4e <ch_common_get_locked_state+0x52>
    uint8_t ready_value = 0;
 8059e2a:	2300      	movs	r3, #0
 8059e2c:	733b      	strb	r3, [r7, #12]
    chdrv_read_byte(dev_ptr, ready_reg, &ready_value);
 8059e2e:	7bfb      	ldrb	r3, [r7, #15]
 8059e30:	b29b      	uxth	r3, r3
 8059e32:	f107 020c 	add.w	r2, r7, #12
 8059e36:	4619      	mov	r1, r3
 8059e38:	6878      	ldr	r0, [r7, #4]
 8059e3a:	f000 fb02 	bl	805a442 <chdrv_read_byte>
    if (ready_value & lock_mask) {
 8059e3e:	7b3a      	ldrb	r2, [r7, #12]
 8059e40:	7bbb      	ldrb	r3, [r7, #14]
 8059e42:	4013      	ands	r3, r2
 8059e44:	b2db      	uxtb	r3, r3
 8059e46:	2b00      	cmp	r3, #0
 8059e48:	d001      	beq.n	8059e4e <ch_common_get_locked_state+0x52>
      ret_val = 1;
 8059e4a:	2301      	movs	r3, #1
 8059e4c:	737b      	strb	r3, [r7, #13]
    }
  }
  return ret_val;
 8059e4e:	7b7b      	ldrb	r3, [r7, #13]
}
 8059e50:	4618      	mov	r0, r3
 8059e52:	3710      	adds	r7, #16
 8059e54:	46bd      	mov	sp, r7
 8059e56:	bd80      	pop	{r7, pc}

08059e58 <ch_common_prepare_pulse_timer>:

void ch_common_prepare_pulse_timer(ch_dev_t * dev_ptr)
{
 8059e58:	b580      	push	{r7, lr}
 8059e5a:	b084      	sub	sp, #16
 8059e5c:	af00      	add	r7, sp, #0
 8059e5e:	6078      	str	r0, [r7, #4]
  uint8_t cal_trig_reg;

  if (dev_ptr->part_number == CH101_PART_NUMBER) {
 8059e60:	687b      	ldr	r3, [r7, #4]
 8059e62:	8b9b      	ldrh	r3, [r3, #28]
 8059e64:	2b65      	cmp	r3, #101	; 0x65
 8059e66:	d102      	bne.n	8059e6e <ch_common_prepare_pulse_timer+0x16>
    cal_trig_reg = CH101_COMMON_REG_CAL_TRIG;
 8059e68:	2306      	movs	r3, #6
 8059e6a:	73fb      	strb	r3, [r7, #15]
 8059e6c:	e001      	b.n	8059e72 <ch_common_prepare_pulse_timer+0x1a>
  } else {
    cal_trig_reg = CH201_COMMON_REG_CAL_TRIG;
 8059e6e:	2306      	movs	r3, #6
 8059e70:	73fb      	strb	r3, [r7, #15]
  }

  chdrv_write_byte(dev_ptr, cal_trig_reg, 0);
 8059e72:	7bfb      	ldrb	r3, [r7, #15]
 8059e74:	b29b      	uxth	r3, r3
 8059e76:	2200      	movs	r2, #0
 8059e78:	4619      	mov	r1, r3
 8059e7a:	6878      	ldr	r0, [r7, #4]
 8059e7c:	f000 faa9 	bl	805a3d2 <chdrv_write_byte>
}
 8059e80:	bf00      	nop
 8059e82:	3710      	adds	r7, #16
 8059e84:	46bd      	mov	sp, r7
 8059e86:	bd80      	pop	{r7, pc}

08059e88 <ch_common_store_pt_result>:

void ch_common_store_pt_result(ch_dev_t * dev_ptr)
{
 8059e88:	b580      	push	{r7, lr}
 8059e8a:	b084      	sub	sp, #16
 8059e8c:	af00      	add	r7, sp, #0
 8059e8e:	6078      	str	r0, [r7, #4]
  uint8_t pt_result_reg;
  uint16_t rtc_cal_result;

  if (dev_ptr->part_number == CH101_PART_NUMBER) {
 8059e90:	687b      	ldr	r3, [r7, #4]
 8059e92:	8b9b      	ldrh	r3, [r3, #28]
 8059e94:	2b65      	cmp	r3, #101	; 0x65
 8059e96:	d102      	bne.n	8059e9e <ch_common_store_pt_result+0x16>
    pt_result_reg = CH101_COMMON_REG_CAL_RESULT;
 8059e98:	230a      	movs	r3, #10
 8059e9a:	73fb      	strb	r3, [r7, #15]
 8059e9c:	e001      	b.n	8059ea2 <ch_common_store_pt_result+0x1a>
  } else {
    pt_result_reg = CH201_COMMON_REG_CAL_RESULT;
 8059e9e:	230a      	movs	r3, #10
 8059ea0:	73fb      	strb	r3, [r7, #15]
  }

  chdrv_read_word(dev_ptr, pt_result_reg, &rtc_cal_result);
 8059ea2:	7bfb      	ldrb	r3, [r7, #15]
 8059ea4:	b29b      	uxth	r3, r3
 8059ea6:	f107 020c 	add.w	r2, r7, #12
 8059eaa:	4619      	mov	r1, r3
 8059eac:	6878      	ldr	r0, [r7, #4]
 8059eae:	f000 faef 	bl	805a490 <chdrv_read_word>
  dev_ptr->rtc_cal_result = rtc_cal_result;
 8059eb2:	89ba      	ldrh	r2, [r7, #12]
 8059eb4:	687b      	ldr	r3, [r7, #4]
 8059eb6:	819a      	strh	r2, [r3, #12]
}
 8059eb8:	bf00      	nop
 8059eba:	3710      	adds	r7, #16
 8059ebc:	46bd      	mov	sp, r7
 8059ebe:	bd80      	pop	{r7, pc}

08059ec0 <ch_common_store_op_freq>:

void ch_common_store_op_freq(ch_dev_t * dev_ptr)
{
 8059ec0:	b580      	push	{r7, lr}
 8059ec2:	b088      	sub	sp, #32
 8059ec4:	af00      	add	r7, sp, #0
 8059ec6:	6078      	str	r0, [r7, #4]
  uint32_t freq_counter_cycles;
  uint32_t num;
  uint32_t den;
  uint32_t op_freq;

  if (dev_ptr->part_number == CH101_PART_NUMBER) {
 8059ec8:	687b      	ldr	r3, [r7, #4]
 8059eca:	8b9b      	ldrh	r3, [r3, #28]
 8059ecc:	2b65      	cmp	r3, #101	; 0x65
 8059ece:	d104      	bne.n	8059eda <ch_common_store_op_freq+0x1a>
    tof_sf_reg = CH101_COMMON_REG_TOF_SF;
 8059ed0:	2316      	movs	r3, #22
 8059ed2:	77fb      	strb	r3, [r7, #31]
    freq_counter_cycles = CH101_FREQCOUNTERCYCLES;
 8059ed4:	2380      	movs	r3, #128	; 0x80
 8059ed6:	61bb      	str	r3, [r7, #24]
 8059ed8:	e003      	b.n	8059ee2 <ch_common_store_op_freq+0x22>
  } else {
    tof_sf_reg = CH201_COMMON_REG_TOF_SF;
 8059eda:	2322      	movs	r3, #34	; 0x22
 8059edc:	77fb      	strb	r3, [r7, #31]
    freq_counter_cycles = CH201_FREQCOUNTERCYCLES;
 8059ede:	2380      	movs	r3, #128	; 0x80
 8059ee0:	61bb      	str	r3, [r7, #24]
  }

  chdrv_read_word(dev_ptr, tof_sf_reg, &raw_freq);
 8059ee2:	7ffb      	ldrb	r3, [r7, #31]
 8059ee4:	b29b      	uxth	r3, r3
 8059ee6:	f107 020a 	add.w	r2, r7, #10
 8059eea:	4619      	mov	r1, r3
 8059eec:	6878      	ldr	r0, [r7, #4]
 8059eee:	f000 facf 	bl	805a490 <chdrv_read_word>

  num =
      (uint32_t) (((dev_ptr->rtc_cal_result) * 1000U) /
 8059ef2:	687b      	ldr	r3, [r7, #4]
 8059ef4:	899b      	ldrh	r3, [r3, #12]
 8059ef6:	461a      	mov	r2, r3
 8059ef8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8059efc:	fb03 f202 	mul.w	r2, r3, r2
                  (16U * freq_counter_cycles)) * (uint32_t) (raw_freq);
 8059f00:	69bb      	ldr	r3, [r7, #24]
 8059f02:	011b      	lsls	r3, r3, #4
      (uint32_t) (((dev_ptr->rtc_cal_result) * 1000U) /
 8059f04:	fbb2 f3f3 	udiv	r3, r2, r3
                  (16U * freq_counter_cycles)) * (uint32_t) (raw_freq);
 8059f08:	897a      	ldrh	r2, [r7, #10]
  num =
 8059f0a:	fb02 f303 	mul.w	r3, r2, r3
 8059f0e:	617b      	str	r3, [r7, #20]
  den = (uint32_t) (dev_ptr->group->rtc_cal_pulse_ms);
 8059f10:	687b      	ldr	r3, [r7, #4]
 8059f12:	681b      	ldr	r3, [r3, #0]
 8059f14:	88db      	ldrh	r3, [r3, #6]
 8059f16:	613b      	str	r3, [r7, #16]
  op_freq = (num / den);
 8059f18:	697a      	ldr	r2, [r7, #20]
 8059f1a:	693b      	ldr	r3, [r7, #16]
 8059f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8059f20:	60fb      	str	r3, [r7, #12]

  dev_ptr->op_frequency = op_freq;
 8059f22:	687b      	ldr	r3, [r7, #4]
 8059f24:	68fa      	ldr	r2, [r7, #12]
 8059f26:	611a      	str	r2, [r3, #16]
}
 8059f28:	bf00      	nop
 8059f2a:	3720      	adds	r7, #32
 8059f2c:	46bd      	mov	sp, r7
 8059f2e:	bd80      	pop	{r7, pc}

08059f30 <ch_common_store_bandwidth>:

void ch_common_store_bandwidth(ch_dev_t * dev_ptr)
{
 8059f30:	b480      	push	{r7}
 8059f32:	b083      	sub	sp, #12
 8059f34:	af00      	add	r7, sp, #0
 8059f36:	6078      	str	r0, [r7, #4]
/*
 * Not supported in current GPR firmware
 */
}
 8059f38:	bf00      	nop
 8059f3a:	370c      	adds	r7, #12
 8059f3c:	46bd      	mov	sp, r7
 8059f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8059f42:	4770      	bx	lr

08059f44 <ch_common_store_scale_factor>:

void ch_common_store_scale_factor(ch_dev_t * dev_ptr)
{
 8059f44:	b580      	push	{r7, lr}
 8059f46:	b084      	sub	sp, #16
 8059f48:	af00      	add	r7, sp, #0
 8059f4a:	6078      	str	r0, [r7, #4]
  uint8_t err;
  uint8_t tof_sf_reg;
  uint16_t scale_factor;

  if (dev_ptr->part_number == CH101_PART_NUMBER) {
 8059f4c:	687b      	ldr	r3, [r7, #4]
 8059f4e:	8b9b      	ldrh	r3, [r3, #28]
 8059f50:	2b65      	cmp	r3, #101	; 0x65
 8059f52:	d102      	bne.n	8059f5a <ch_common_store_scale_factor+0x16>
    tof_sf_reg = CH101_COMMON_REG_TOF_SF;
 8059f54:	2316      	movs	r3, #22
 8059f56:	73fb      	strb	r3, [r7, #15]
 8059f58:	e001      	b.n	8059f5e <ch_common_store_scale_factor+0x1a>
  } else {
    tof_sf_reg = CH201_COMMON_REG_TOF_SF;
 8059f5a:	2322      	movs	r3, #34	; 0x22
 8059f5c:	73fb      	strb	r3, [r7, #15]
  }

  err = chdrv_read_word(dev_ptr, tof_sf_reg, &scale_factor);
 8059f5e:	7bfb      	ldrb	r3, [r7, #15]
 8059f60:	b29b      	uxth	r3, r3
 8059f62:	f107 020c 	add.w	r2, r7, #12
 8059f66:	4619      	mov	r1, r3
 8059f68:	6878      	ldr	r0, [r7, #4]
 8059f6a:	f000 fa91 	bl	805a490 <chdrv_read_word>
 8059f6e:	4603      	mov	r3, r0
 8059f70:	73bb      	strb	r3, [r7, #14]
  if (!err) {
 8059f72:	7bbb      	ldrb	r3, [r7, #14]
 8059f74:	2b00      	cmp	r3, #0
 8059f76:	d103      	bne.n	8059f80 <ch_common_store_scale_factor+0x3c>
    dev_ptr->scale_factor = scale_factor;
 8059f78:	89ba      	ldrh	r2, [r7, #12]
 8059f7a:	687b      	ldr	r3, [r7, #4]
 8059f7c:	82da      	strh	r2, [r3, #22]
  } else {
    dev_ptr->scale_factor = 0;
  }
}
 8059f7e:	e002      	b.n	8059f86 <ch_common_store_scale_factor+0x42>
    dev_ptr->scale_factor = 0;
 8059f80:	687b      	ldr	r3, [r7, #4]
 8059f82:	2200      	movs	r2, #0
 8059f84:	82da      	strh	r2, [r3, #22]
}
 8059f86:	bf00      	nop
 8059f88:	3710      	adds	r7, #16
 8059f8a:	46bd      	mov	sp, r7
 8059f8c:	bd80      	pop	{r7, pc}

08059f8e <ch_common_set_thresholds>:

uint8_t ch_common_set_thresholds(ch_dev_t * dev_ptr,
                                 ch_thresholds_t * thresholds_ptr)
{
 8059f8e:	b580      	push	{r7, lr}
 8059f90:	b088      	sub	sp, #32
 8059f92:	af00      	add	r7, sp, #0
 8059f94:	6078      	str	r0, [r7, #4]
 8059f96:	6039      	str	r1, [r7, #0]

  uint8_t thresh_len_reg = 0;   // offset of register for this threshold's length
 8059f98:	2300      	movs	r3, #0
 8059f9a:	77fb      	strb	r3, [r7, #31]
  uint8_t thresh_level_reg;     // threshold level reg (first in array)
  uint8_t max_num_thresholds;
  int ret_val = 1;              // default return = error
 8059f9c:	2301      	movs	r3, #1
 8059f9e:	61bb      	str	r3, [r7, #24]
  uint8_t thresh_num;
  uint8_t thresh_len;
  uint16_t thresh_level;
  uint16_t start_sample = 0;
 8059fa0:	2300      	movs	r3, #0
 8059fa2:	82bb      	strh	r3, [r7, #20]

  if (dev_ptr->sensor_connected) {
 8059fa4:	687b      	ldr	r3, [r7, #4]
 8059fa6:	7fdb      	ldrb	r3, [r3, #31]
 8059fa8:	2b00      	cmp	r3, #0
 8059faa:	d070      	beq.n	805a08e <ch_common_set_thresholds+0x100>

    if (dev_ptr->part_number == CH101_PART_NUMBER) {
 8059fac:	687b      	ldr	r3, [r7, #4]
 8059fae:	8b9b      	ldrh	r3, [r3, #28]
 8059fb0:	2b65      	cmp	r3, #101	; 0x65
 8059fb2:	d102      	bne.n	8059fba <ch_common_set_thresholds+0x2c>
      return ret_val;           // NOT SUPPORTED in CH101
 8059fb4:	69bb      	ldr	r3, [r7, #24]
 8059fb6:	b2db      	uxtb	r3, r3
 8059fb8:	e06b      	b.n	805a092 <ch_common_set_thresholds+0x104>

    } else {
      thresh_level_reg = CH201_COMMON_REG_THRESHOLDS;
 8059fba:	2316      	movs	r3, #22
 8059fbc:	74fb      	strb	r3, [r7, #19]
      max_num_thresholds = CH201_COMMON_NUM_THRESHOLDS;
 8059fbe:	2306      	movs	r3, #6
 8059fc0:	74bb      	strb	r3, [r7, #18]
    }

    for (thresh_num = 0; thresh_num < max_num_thresholds; thresh_num++) {
 8059fc2:	2300      	movs	r3, #0
 8059fc4:	75fb      	strb	r3, [r7, #23]
 8059fc6:	e05c      	b.n	805a082 <ch_common_set_thresholds+0xf4>

      if (thresh_num < (max_num_thresholds - 1)) {
 8059fc8:	7dfa      	ldrb	r2, [r7, #23]
 8059fca:	7cbb      	ldrb	r3, [r7, #18]
 8059fcc:	3b01      	subs	r3, #1
 8059fce:	429a      	cmp	r2, r3
 8059fd0:	da0e      	bge.n	8059ff0 <ch_common_set_thresholds+0x62>
        uint16_t next_start_sample =
            thresholds_ptr->threshold[thresh_num + 1].start_sample;
 8059fd2:	7dfb      	ldrb	r3, [r7, #23]
 8059fd4:	1c5a      	adds	r2, r3, #1
        uint16_t next_start_sample =
 8059fd6:	683b      	ldr	r3, [r7, #0]
 8059fd8:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8059fdc:	823b      	strh	r3, [r7, #16]

        thresh_len = (next_start_sample - start_sample);
 8059fde:	8a3b      	ldrh	r3, [r7, #16]
 8059fe0:	b2da      	uxtb	r2, r3
 8059fe2:	8abb      	ldrh	r3, [r7, #20]
 8059fe4:	b2db      	uxtb	r3, r3
 8059fe6:	1ad3      	subs	r3, r2, r3
 8059fe8:	75bb      	strb	r3, [r7, #22]
        start_sample = next_start_sample;
 8059fea:	8a3b      	ldrh	r3, [r7, #16]
 8059fec:	82bb      	strh	r3, [r7, #20]
 8059fee:	e001      	b.n	8059ff4 <ch_common_set_thresholds+0x66>
      } else {
        thresh_len = 0;
 8059ff0:	2300      	movs	r3, #0
 8059ff2:	75bb      	strb	r3, [r7, #22]
      }

      if (dev_ptr->part_number == CH201_PART_NUMBER) {
 8059ff4:	687b      	ldr	r3, [r7, #4]
 8059ff6:	8b9b      	ldrh	r3, [r3, #28]
 8059ff8:	2bc9      	cmp	r3, #201	; 0xc9
 8059ffa:	d122      	bne.n	805a042 <ch_common_set_thresholds+0xb4>
        if (thresh_num == 0) {
 8059ffc:	7dfb      	ldrb	r3, [r7, #23]
 8059ffe:	2b00      	cmp	r3, #0
 805a000:	d102      	bne.n	805a008 <ch_common_set_thresholds+0x7a>
          thresh_len_reg = CH201_COMMON_REG_THRESH_LEN_0;
 805a002:	2308      	movs	r3, #8
 805a004:	77fb      	strb	r3, [r7, #31]
 805a006:	e01c      	b.n	805a042 <ch_common_set_thresholds+0xb4>
        } else if (thresh_num == 1) {
 805a008:	7dfb      	ldrb	r3, [r7, #23]
 805a00a:	2b01      	cmp	r3, #1
 805a00c:	d102      	bne.n	805a014 <ch_common_set_thresholds+0x86>
          thresh_len_reg = CH201_COMMON_REG_THRESH_LEN_1;
 805a00e:	2309      	movs	r3, #9
 805a010:	77fb      	strb	r3, [r7, #31]
 805a012:	e016      	b.n	805a042 <ch_common_set_thresholds+0xb4>
        } else if (thresh_num == 2) {
 805a014:	7dfb      	ldrb	r3, [r7, #23]
 805a016:	2b02      	cmp	r3, #2
 805a018:	d102      	bne.n	805a020 <ch_common_set_thresholds+0x92>
          thresh_len_reg = CH201_COMMON_REG_THRESH_LEN_2;
 805a01a:	230c      	movs	r3, #12
 805a01c:	77fb      	strb	r3, [r7, #31]
 805a01e:	e010      	b.n	805a042 <ch_common_set_thresholds+0xb4>
        } else if (thresh_num == 3) {
 805a020:	7dfb      	ldrb	r3, [r7, #23]
 805a022:	2b03      	cmp	r3, #3
 805a024:	d102      	bne.n	805a02c <ch_common_set_thresholds+0x9e>
          thresh_len_reg = CH201_COMMON_REG_THRESH_LEN_3;
 805a026:	230d      	movs	r3, #13
 805a028:	77fb      	strb	r3, [r7, #31]
 805a02a:	e00a      	b.n	805a042 <ch_common_set_thresholds+0xb4>
        } else if (thresh_num == 4) {
 805a02c:	7dfb      	ldrb	r3, [r7, #23]
 805a02e:	2b04      	cmp	r3, #4
 805a030:	d102      	bne.n	805a038 <ch_common_set_thresholds+0xaa>
          thresh_len_reg = CH201_COMMON_REG_THRESH_LEN_4;
 805a032:	2315      	movs	r3, #21
 805a034:	77fb      	strb	r3, [r7, #31]
 805a036:	e004      	b.n	805a042 <ch_common_set_thresholds+0xb4>
        } else if (thresh_num == 5) {
 805a038:	7dfb      	ldrb	r3, [r7, #23]
 805a03a:	2b05      	cmp	r3, #5
 805a03c:	d101      	bne.n	805a042 <ch_common_set_thresholds+0xb4>
          thresh_len_reg = 0;   // last threshold does not have length field - assumed to extend to end of data
 805a03e:	2300      	movs	r3, #0
 805a040:	77fb      	strb	r3, [r7, #31]
        }
      }

      if (thresh_len_reg != 0) {
 805a042:	7ffb      	ldrb	r3, [r7, #31]
 805a044:	2b00      	cmp	r3, #0
 805a046:	d006      	beq.n	805a056 <ch_common_set_thresholds+0xc8>
        chdrv_write_byte(dev_ptr, thresh_len_reg, thresh_len);  // set the length field (if any) for this threshold
 805a048:	7ffb      	ldrb	r3, [r7, #31]
 805a04a:	b29b      	uxth	r3, r3
 805a04c:	7dba      	ldrb	r2, [r7, #22]
 805a04e:	4619      	mov	r1, r3
 805a050:	6878      	ldr	r0, [r7, #4]
 805a052:	f000 f9be 	bl	805a3d2 <chdrv_write_byte>
      }
      // write level to this threshold's entry in register array
      thresh_level = thresholds_ptr->threshold[thresh_num].level;
 805a056:	7dfb      	ldrb	r3, [r7, #23]
 805a058:	683a      	ldr	r2, [r7, #0]
 805a05a:	009b      	lsls	r3, r3, #2
 805a05c:	4413      	add	r3, r2
 805a05e:	885b      	ldrh	r3, [r3, #2]
 805a060:	81fb      	strh	r3, [r7, #14]
      chdrv_write_word(dev_ptr,
 805a062:	7cfb      	ldrb	r3, [r7, #19]
 805a064:	b29a      	uxth	r2, r3
                       (thresh_level_reg + (thresh_num * sizeof(uint16_t))),
 805a066:	7dfb      	ldrb	r3, [r7, #23]
 805a068:	b29b      	uxth	r3, r3
 805a06a:	005b      	lsls	r3, r3, #1
 805a06c:	b29b      	uxth	r3, r3
      chdrv_write_word(dev_ptr,
 805a06e:	4413      	add	r3, r2
 805a070:	b29b      	uxth	r3, r3
 805a072:	89fa      	ldrh	r2, [r7, #14]
 805a074:	4619      	mov	r1, r3
 805a076:	6878      	ldr	r0, [r7, #4]
 805a078:	f000 f9c4 	bl	805a404 <chdrv_write_word>
    for (thresh_num = 0; thresh_num < max_num_thresholds; thresh_num++) {
 805a07c:	7dfb      	ldrb	r3, [r7, #23]
 805a07e:	3301      	adds	r3, #1
 805a080:	75fb      	strb	r3, [r7, #23]
 805a082:	7dfa      	ldrb	r2, [r7, #23]
 805a084:	7cbb      	ldrb	r3, [r7, #18]
 805a086:	429a      	cmp	r2, r3
 805a088:	d39e      	bcc.n	8059fc8 <ch_common_set_thresholds+0x3a>
                       thresh_level);
    }

    ret_val = 0;                // return OK
 805a08a:	2300      	movs	r3, #0
 805a08c:	61bb      	str	r3, [r7, #24]
  }
  return ret_val;
 805a08e:	69bb      	ldr	r3, [r7, #24]
 805a090:	b2db      	uxtb	r3, r3
}
 805a092:	4618      	mov	r0, r3
 805a094:	3720      	adds	r7, #32
 805a096:	46bd      	mov	sp, r7
 805a098:	bd80      	pop	{r7, pc}

0805a09a <ch_common_get_thresholds>:

uint8_t ch_common_get_thresholds(ch_dev_t * dev_ptr,
                                 ch_thresholds_t * thresholds_ptr)
{
 805a09a:	b580      	push	{r7, lr}
 805a09c:	b086      	sub	sp, #24
 805a09e:	af00      	add	r7, sp, #0
 805a0a0:	6078      	str	r0, [r7, #4]
 805a0a2:	6039      	str	r1, [r7, #0]
  uint8_t thresh_len_reg = 0;   // offset of register for this threshold's length
 805a0a4:	2300      	movs	r3, #0
 805a0a6:	75fb      	strb	r3, [r7, #23]
  uint8_t thresh_level_reg;     // threshold level reg (first in array)
  uint8_t max_num_thresholds;
  uint8_t ret_val = 1;          // default = error return
 805a0a8:	2301      	movs	r3, #1
 805a0aa:	75bb      	strb	r3, [r7, #22]
  uint8_t thresh_num;
  uint8_t thresh_len = 0;       // number of samples described by each threshold
 805a0ac:	2300      	movs	r3, #0
 805a0ae:	73fb      	strb	r3, [r7, #15]
  uint16_t start_sample = 0;    // calculated start sample for each threshold
 805a0b0:	2300      	movs	r3, #0
 805a0b2:	827b      	strh	r3, [r7, #18]

  if (dev_ptr->sensor_connected && (thresholds_ptr != NULL)) {
 805a0b4:	687b      	ldr	r3, [r7, #4]
 805a0b6:	7fdb      	ldrb	r3, [r3, #31]
 805a0b8:	2b00      	cmp	r3, #0
 805a0ba:	d068      	beq.n	805a18e <ch_common_get_thresholds+0xf4>
 805a0bc:	683b      	ldr	r3, [r7, #0]
 805a0be:	2b00      	cmp	r3, #0
 805a0c0:	d065      	beq.n	805a18e <ch_common_get_thresholds+0xf4>

    if (dev_ptr->part_number == CH101_PART_NUMBER) {
 805a0c2:	687b      	ldr	r3, [r7, #4]
 805a0c4:	8b9b      	ldrh	r3, [r3, #28]
 805a0c6:	2b65      	cmp	r3, #101	; 0x65
 805a0c8:	d101      	bne.n	805a0ce <ch_common_get_thresholds+0x34>
      return ret_val;           // NOT SUPPORTED in CH101
 805a0ca:	7dbb      	ldrb	r3, [r7, #22]
 805a0cc:	e060      	b.n	805a190 <ch_common_get_thresholds+0xf6>

    } else {
      thresh_level_reg = CH201_COMMON_REG_THRESHOLDS;
 805a0ce:	2316      	movs	r3, #22
 805a0d0:	747b      	strb	r3, [r7, #17]
      max_num_thresholds = CH201_COMMON_NUM_THRESHOLDS;
 805a0d2:	2306      	movs	r3, #6
 805a0d4:	743b      	strb	r3, [r7, #16]
    }

    for (thresh_num = 0; thresh_num < max_num_thresholds; thresh_num++) {
 805a0d6:	2300      	movs	r3, #0
 805a0d8:	757b      	strb	r3, [r7, #21]
 805a0da:	e052      	b.n	805a182 <ch_common_get_thresholds+0xe8>

      if (dev_ptr->part_number == CH201_PART_NUMBER) {
 805a0dc:	687b      	ldr	r3, [r7, #4]
 805a0de:	8b9b      	ldrh	r3, [r3, #28]
 805a0e0:	2bc9      	cmp	r3, #201	; 0xc9
 805a0e2:	d122      	bne.n	805a12a <ch_common_get_thresholds+0x90>
        if (thresh_num == 0) {
 805a0e4:	7d7b      	ldrb	r3, [r7, #21]
 805a0e6:	2b00      	cmp	r3, #0
 805a0e8:	d102      	bne.n	805a0f0 <ch_common_get_thresholds+0x56>
          thresh_len_reg = CH201_COMMON_REG_THRESH_LEN_0;
 805a0ea:	2308      	movs	r3, #8
 805a0ec:	75fb      	strb	r3, [r7, #23]
 805a0ee:	e01c      	b.n	805a12a <ch_common_get_thresholds+0x90>
        } else if (thresh_num == 1) {
 805a0f0:	7d7b      	ldrb	r3, [r7, #21]
 805a0f2:	2b01      	cmp	r3, #1
 805a0f4:	d102      	bne.n	805a0fc <ch_common_get_thresholds+0x62>
          thresh_len_reg = CH201_COMMON_REG_THRESH_LEN_1;
 805a0f6:	2309      	movs	r3, #9
 805a0f8:	75fb      	strb	r3, [r7, #23]
 805a0fa:	e016      	b.n	805a12a <ch_common_get_thresholds+0x90>
        } else if (thresh_num == 2) {
 805a0fc:	7d7b      	ldrb	r3, [r7, #21]
 805a0fe:	2b02      	cmp	r3, #2
 805a100:	d102      	bne.n	805a108 <ch_common_get_thresholds+0x6e>
          thresh_len_reg = CH201_COMMON_REG_THRESH_LEN_2;
 805a102:	230c      	movs	r3, #12
 805a104:	75fb      	strb	r3, [r7, #23]
 805a106:	e010      	b.n	805a12a <ch_common_get_thresholds+0x90>
        } else if (thresh_num == 3) {
 805a108:	7d7b      	ldrb	r3, [r7, #21]
 805a10a:	2b03      	cmp	r3, #3
 805a10c:	d102      	bne.n	805a114 <ch_common_get_thresholds+0x7a>
          thresh_len_reg = CH201_COMMON_REG_THRESH_LEN_3;
 805a10e:	230d      	movs	r3, #13
 805a110:	75fb      	strb	r3, [r7, #23]
 805a112:	e00a      	b.n	805a12a <ch_common_get_thresholds+0x90>
        } else if (thresh_num == 4) {
 805a114:	7d7b      	ldrb	r3, [r7, #21]
 805a116:	2b04      	cmp	r3, #4
 805a118:	d102      	bne.n	805a120 <ch_common_get_thresholds+0x86>
          thresh_len_reg = CH201_COMMON_REG_THRESH_LEN_4;
 805a11a:	2315      	movs	r3, #21
 805a11c:	75fb      	strb	r3, [r7, #23]
 805a11e:	e004      	b.n	805a12a <ch_common_get_thresholds+0x90>
        } else if (thresh_num == 5) {
 805a120:	7d7b      	ldrb	r3, [r7, #21]
 805a122:	2b05      	cmp	r3, #5
 805a124:	d101      	bne.n	805a12a <ch_common_get_thresholds+0x90>
          thresh_len_reg = 0;   // last threshold does not have length field - assumed to extend to end of data
 805a126:	2300      	movs	r3, #0
 805a128:	75fb      	strb	r3, [r7, #23]
        }
      }

      if (thresh_len_reg != 0) {
 805a12a:	7dfb      	ldrb	r3, [r7, #23]
 805a12c:	2b00      	cmp	r3, #0
 805a12e:	d008      	beq.n	805a142 <ch_common_get_thresholds+0xa8>
        // read the length field register for this threshold
        chdrv_read_byte(dev_ptr, thresh_len_reg, &thresh_len);
 805a130:	7dfb      	ldrb	r3, [r7, #23]
 805a132:	b29b      	uxth	r3, r3
 805a134:	f107 020f 	add.w	r2, r7, #15
 805a138:	4619      	mov	r1, r3
 805a13a:	6878      	ldr	r0, [r7, #4]
 805a13c:	f000 f981 	bl	805a442 <chdrv_read_byte>
 805a140:	e001      	b.n	805a146 <ch_common_get_thresholds+0xac>
      } else {
        thresh_len = 0;
 805a142:	2300      	movs	r3, #0
 805a144:	73fb      	strb	r3, [r7, #15]
      }

      thresholds_ptr->threshold[thresh_num].start_sample = start_sample;
 805a146:	7d7a      	ldrb	r2, [r7, #21]
 805a148:	683b      	ldr	r3, [r7, #0]
 805a14a:	8a79      	ldrh	r1, [r7, #18]
 805a14c:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      start_sample += thresh_len;       // increment start sample for next threshold
 805a150:	7bfb      	ldrb	r3, [r7, #15]
 805a152:	b29a      	uxth	r2, r3
 805a154:	8a7b      	ldrh	r3, [r7, #18]
 805a156:	4413      	add	r3, r2
 805a158:	827b      	strh	r3, [r7, #18]

      // get level from this threshold's entry in register array
      chdrv_read_word(dev_ptr,
 805a15a:	7c7b      	ldrb	r3, [r7, #17]
 805a15c:	b29a      	uxth	r2, r3
                      (thresh_level_reg + (thresh_num * sizeof(uint16_t))),
 805a15e:	7d7b      	ldrb	r3, [r7, #21]
 805a160:	b29b      	uxth	r3, r3
 805a162:	005b      	lsls	r3, r3, #1
 805a164:	b29b      	uxth	r3, r3
      chdrv_read_word(dev_ptr,
 805a166:	4413      	add	r3, r2
 805a168:	b299      	uxth	r1, r3
                      &(thresholds_ptr->threshold[thresh_num].level));
 805a16a:	7d7b      	ldrb	r3, [r7, #21]
      chdrv_read_word(dev_ptr,
 805a16c:	009b      	lsls	r3, r3, #2
 805a16e:	683a      	ldr	r2, [r7, #0]
 805a170:	4413      	add	r3, r2
 805a172:	3302      	adds	r3, #2
 805a174:	461a      	mov	r2, r3
 805a176:	6878      	ldr	r0, [r7, #4]
 805a178:	f000 f98a 	bl	805a490 <chdrv_read_word>
    for (thresh_num = 0; thresh_num < max_num_thresholds; thresh_num++) {
 805a17c:	7d7b      	ldrb	r3, [r7, #21]
 805a17e:	3301      	adds	r3, #1
 805a180:	757b      	strb	r3, [r7, #21]
 805a182:	7d7a      	ldrb	r2, [r7, #21]
 805a184:	7c3b      	ldrb	r3, [r7, #16]
 805a186:	429a      	cmp	r2, r3
 805a188:	d3a8      	bcc.n	805a0dc <ch_common_get_thresholds+0x42>

    }
    ret_val = 0;                // return OK
 805a18a:	2300      	movs	r3, #0
 805a18c:	75bb      	strb	r3, [r7, #22]
  }
  return ret_val;
 805a18e:	7dbb      	ldrb	r3, [r7, #22]
}
 805a190:	4618      	mov	r0, r3
 805a192:	3718      	adds	r7, #24
 805a194:	46bd      	mov	sp, r7
 805a196:	bd80      	pop	{r7, pc}

0805a198 <ch_common_get_iq_data>:

uint8_t ch_common_get_iq_data(ch_dev_t * dev_ptr, ch_iq_sample_t * buf_ptr,
                              uint16_t start_sample, uint16_t num_samples,
                              ch_io_mode_t mode)
{
 805a198:	b580      	push	{r7, lr}
 805a19a:	b092      	sub	sp, #72	; 0x48
 805a19c:	af04      	add	r7, sp, #16
 805a19e:	60f8      	str	r0, [r7, #12]
 805a1a0:	60b9      	str	r1, [r7, #8]
 805a1a2:	4611      	mov	r1, r2
 805a1a4:	461a      	mov	r2, r3
 805a1a6:	460b      	mov	r3, r1
 805a1a8:	80fb      	strh	r3, [r7, #6]
 805a1aa:	4613      	mov	r3, r2
 805a1ac:	80bb      	strh	r3, [r7, #4]
  uint16_t iq_data_addr;
  uint16_t max_samples;
  ch_group_t *grp_ptr = dev_ptr->group;
 805a1ae:	68fb      	ldr	r3, [r7, #12]
 805a1b0:	681b      	ldr	r3, [r3, #0]
 805a1b2:	61fb      	str	r3, [r7, #28]
  int error = 1;
 805a1b4:	2301      	movs	r3, #1
 805a1b6:	633b      	str	r3, [r7, #48]	; 0x30
  uint8_t use_prog_read = 0;    // default = do not use low-level programming interface
 805a1b8:	2300      	movs	r3, #0
 805a1ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

#ifndef USE_STD_I2C_FOR_IQ
  if (grp_ptr->num_connected[dev_ptr->i2c_bus_index] == 1) {    // if only one device on this bus
 805a1be:	68fb      	ldr	r3, [r7, #12]
 805a1c0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 805a1c4:	461a      	mov	r2, r3
 805a1c6:	69fb      	ldr	r3, [r7, #28]
 805a1c8:	4413      	add	r3, r2
 805a1ca:	7e1b      	ldrb	r3, [r3, #24]
 805a1cc:	2b01      	cmp	r3, #1
 805a1ce:	d102      	bne.n	805a1d6 <ch_common_get_iq_data+0x3e>
    use_prog_read = 1;          //   use low-level interface
 805a1d0:	2301      	movs	r3, #1
 805a1d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }
#endif

  if (dev_ptr->part_number == CH101_PART_NUMBER) {
 805a1d6:	68fb      	ldr	r3, [r7, #12]
 805a1d8:	8b9b      	ldrh	r3, [r3, #28]
 805a1da:	2b65      	cmp	r3, #101	; 0x65
 805a1dc:	d102      	bne.n	805a1e4 <ch_common_get_iq_data+0x4c>
    iq_data_addr = CH101_COMMON_REG_DATA;
 805a1de:	231c      	movs	r3, #28
 805a1e0:	86fb      	strh	r3, [r7, #54]	; 0x36
 805a1e2:	e001      	b.n	805a1e8 <ch_common_get_iq_data+0x50>
  } else {
    iq_data_addr = CH201_COMMON_REG_DATA;
 805a1e4:	2328      	movs	r3, #40	; 0x28
 805a1e6:	86fb      	strh	r3, [r7, #54]	; 0x36
  }

  iq_data_addr += (start_sample * sizeof(ch_iq_sample_t));
 805a1e8:	88fb      	ldrh	r3, [r7, #6]
 805a1ea:	009b      	lsls	r3, r3, #2
 805a1ec:	b29a      	uxth	r2, r3
 805a1ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 805a1f0:	4413      	add	r3, r2
 805a1f2:	86fb      	strh	r3, [r7, #54]	; 0x36

  if ((num_samples != 0)
 805a1f4:	88bb      	ldrh	r3, [r7, #4]
 805a1f6:	2b00      	cmp	r3, #0
 805a1f8:	f000 80b1 	beq.w	805a35e <ch_common_get_iq_data+0x1c6>
      && ((start_sample + num_samples) <= dev_ptr->max_samples)) {
 805a1fc:	88fa      	ldrh	r2, [r7, #6]
 805a1fe:	88bb      	ldrh	r3, [r7, #4]
 805a200:	4413      	add	r3, r2
 805a202:	68fa      	ldr	r2, [r7, #12]
 805a204:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 805a206:	4293      	cmp	r3, r2
 805a208:	f300 80a9 	bgt.w	805a35e <ch_common_get_iq_data+0x1c6>
    uint16_t num_bytes = (num_samples * sizeof(ch_iq_sample_t));
 805a20c:	88bb      	ldrh	r3, [r7, #4]
 805a20e:	009b      	lsls	r3, r3, #2
 805a210:	837b      	strh	r3, [r7, #26]

    if (mode == CH_IO_MODE_BLOCK) {
 805a212:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 805a216:	2b00      	cmp	r3, #0
 805a218:	d16f      	bne.n	805a2fa <ch_common_get_iq_data+0x162>
      /* blocking transfer */

      if (use_prog_read) {
 805a21a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 805a21e:	2b00      	cmp	r3, #0
 805a220:	d063      	beq.n	805a2ea <ch_common_get_iq_data+0x152>
        /* use low-level programming interface for speed */

        int num_transfers =
            (num_bytes + (CH_PROG_XFER_SIZE - 1)) / CH_PROG_XFER_SIZE;
 805a222:	8b7b      	ldrh	r3, [r7, #26]
 805a224:	33ff      	adds	r3, #255	; 0xff
        int num_transfers =
 805a226:	2b00      	cmp	r3, #0
 805a228:	da00      	bge.n	805a22c <ch_common_get_iq_data+0x94>
 805a22a:	33ff      	adds	r3, #255	; 0xff
 805a22c:	121b      	asrs	r3, r3, #8
 805a22e:	617b      	str	r3, [r7, #20]
        int bytes_left = num_bytes;     // remaining bytes to read
 805a230:	8b7b      	ldrh	r3, [r7, #26]
 805a232:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Convert register offsets to full memory addresses */
        if (dev_ptr->part_number == CH101_PART_NUMBER) {
 805a234:	68fb      	ldr	r3, [r7, #12]
 805a236:	8b9b      	ldrh	r3, [r3, #28]
 805a238:	2b65      	cmp	r3, #101	; 0x65
 805a23a:	d104      	bne.n	805a246 <ch_common_get_iq_data+0xae>
          iq_data_addr += CH101_DATA_MEM_ADDR + CH101_COMMON_I2CREGS_OFFSET;
 805a23c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 805a23e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 805a242:	86fb      	strh	r3, [r7, #54]	; 0x36
 805a244:	e003      	b.n	805a24e <ch_common_get_iq_data+0xb6>
        } else {
          iq_data_addr += CH201_DATA_MEM_ADDR + CH201_COMMON_I2CREGS_OFFSET;
 805a246:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 805a248:	f503 7300 	add.w	r3, r3, #512	; 0x200
 805a24c:	86fb      	strh	r3, [r7, #54]	; 0x36
        }

        chbsp_program_enable(dev_ptr);  // assert PROG pin
 805a24e:	68f8      	ldr	r0, [r7, #12]
 805a250:	f7e9 f8ae 	bl	80433b0 <chbsp_program_enable>

        for (int xfer = 0; xfer < num_transfers; xfer++) {
 805a254:	2300      	movs	r3, #0
 805a256:	627b      	str	r3, [r7, #36]	; 0x24
 805a258:	e03f      	b.n	805a2da <ch_common_get_iq_data+0x142>
          int bytes_to_read;
          uint8_t message[] = { (0x80 | CH_PROG_REG_CTL), 0x09 };       // read burst command
 805a25a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 805a25e:	823b      	strh	r3, [r7, #16]

          if (bytes_left > CH_PROG_XFER_SIZE) {
 805a260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 805a262:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 805a266:	dd03      	ble.n	805a270 <ch_common_get_iq_data+0xd8>
            bytes_to_read = CH_PROG_XFER_SIZE;
 805a268:	f44f 7380 	mov.w	r3, #256	; 0x100
 805a26c:	623b      	str	r3, [r7, #32]
 805a26e:	e001      	b.n	805a274 <ch_common_get_iq_data+0xdc>
          } else {
            bytes_to_read = bytes_left;
 805a270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 805a272:	623b      	str	r3, [r7, #32]
          }
          chdrv_prog_write(dev_ptr, CH_PROG_REG_ADDR,
 805a274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 805a276:	b29b      	uxth	r3, r3
 805a278:	021b      	lsls	r3, r3, #8
 805a27a:	b29a      	uxth	r2, r3
 805a27c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 805a27e:	4413      	add	r3, r2
 805a280:	b29b      	uxth	r3, r3
 805a282:	461a      	mov	r2, r3
 805a284:	2105      	movs	r1, #5
 805a286:	68f8      	ldr	r0, [r7, #12]
 805a288:	f000 fa76 	bl	805a778 <chdrv_prog_write>
                           (iq_data_addr + (xfer * CH_PROG_XFER_SIZE)));
          chdrv_prog_write(dev_ptr, CH_PROG_REG_CNT, (bytes_to_read - 1));
 805a28c:	6a3b      	ldr	r3, [r7, #32]
 805a28e:	b29b      	uxth	r3, r3
 805a290:	3b01      	subs	r3, #1
 805a292:	b29b      	uxth	r3, r3
 805a294:	461a      	mov	r2, r3
 805a296:	2107      	movs	r1, #7
 805a298:	68f8      	ldr	r0, [r7, #12]
 805a29a:	f000 fa6d 	bl	805a778 <chdrv_prog_write>
          error = chdrv_prog_i2c_write(dev_ptr, message, sizeof(message));
 805a29e:	f107 0310 	add.w	r3, r7, #16
 805a2a2:	2202      	movs	r2, #2
 805a2a4:	4619      	mov	r1, r3
 805a2a6:	68f8      	ldr	r0, [r7, #12]
 805a2a8:	f000 f85f 	bl	805a36a <chdrv_prog_i2c_write>
 805a2ac:	6338      	str	r0, [r7, #48]	; 0x30
          error |=
              chdrv_prog_i2c_read(dev_ptr,
                                  ((uint8_t *) buf_ptr +
                                   (xfer * CH_PROG_XFER_SIZE)), bytes_to_read);
 805a2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 805a2b0:	021b      	lsls	r3, r3, #8
 805a2b2:	461a      	mov	r2, r3
              chdrv_prog_i2c_read(dev_ptr,
 805a2b4:	68bb      	ldr	r3, [r7, #8]
 805a2b6:	4413      	add	r3, r2
 805a2b8:	6a3a      	ldr	r2, [r7, #32]
 805a2ba:	b292      	uxth	r2, r2
 805a2bc:	4619      	mov	r1, r3
 805a2be:	68f8      	ldr	r0, [r7, #12]
 805a2c0:	f000 f86d 	bl	805a39e <chdrv_prog_i2c_read>
 805a2c4:	4602      	mov	r2, r0
          error |=
 805a2c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 805a2c8:	4313      	orrs	r3, r2
 805a2ca:	633b      	str	r3, [r7, #48]	; 0x30

          bytes_left -= bytes_to_read;
 805a2cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 805a2ce:	6a3b      	ldr	r3, [r7, #32]
 805a2d0:	1ad3      	subs	r3, r2, r3
 805a2d2:	62bb      	str	r3, [r7, #40]	; 0x28
        for (int xfer = 0; xfer < num_transfers; xfer++) {
 805a2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 805a2d6:	3301      	adds	r3, #1
 805a2d8:	627b      	str	r3, [r7, #36]	; 0x24
 805a2da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 805a2dc:	697b      	ldr	r3, [r7, #20]
 805a2de:	429a      	cmp	r2, r3
 805a2e0:	dbbb      	blt.n	805a25a <ch_common_get_iq_data+0xc2>
        }
        chbsp_program_disable(dev_ptr); // de-assert PROG pin
 805a2e2:	68f8      	ldr	r0, [r7, #12]
 805a2e4:	f7e9 f882 	bl	80433ec <chbsp_program_disable>
 805a2e8:	e039      	b.n	805a35e <ch_common_get_iq_data+0x1c6>

      } else {                  /* if (use_prog_read) */
        /* use standard I2C interface */

        error =
            chdrv_burst_read(dev_ptr, iq_data_addr, (uint8_t *) buf_ptr,
 805a2ea:	8b7b      	ldrh	r3, [r7, #26]
 805a2ec:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 805a2ee:	68ba      	ldr	r2, [r7, #8]
 805a2f0:	68f8      	ldr	r0, [r7, #12]
 805a2f2:	f000 f8b8 	bl	805a466 <chdrv_burst_read>
 805a2f6:	6338      	str	r0, [r7, #48]	; 0x30
 805a2f8:	e031      	b.n	805a35e <ch_common_get_iq_data+0x1c6>
      }

    } else {
      /* non-blocking transfer - queue a read transaction (must be started using ch_io_start_nb() ) */

      if (use_prog_read && (grp_ptr->i2c_drv_flags & I2C_DRV_FLAG_USE_PROG_NB)) {
 805a2fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 805a2fe:	2b00      	cmp	r3, #0
 805a300:	d020      	beq.n	805a344 <ch_common_get_iq_data+0x1ac>
 805a302:	69fb      	ldr	r3, [r7, #28]
 805a304:	889b      	ldrh	r3, [r3, #4]
 805a306:	f003 0302 	and.w	r3, r3, #2
 805a30a:	2b00      	cmp	r3, #0
 805a30c:	d01a      	beq.n	805a344 <ch_common_get_iq_data+0x1ac>
        /* Use low-level programming interface to read data */

        /* Convert register offsets to full memory addresses */
        if (dev_ptr->part_number == CH101_PART_NUMBER) {
 805a30e:	68fb      	ldr	r3, [r7, #12]
 805a310:	8b9b      	ldrh	r3, [r3, #28]
 805a312:	2b65      	cmp	r3, #101	; 0x65
 805a314:	d104      	bne.n	805a320 <ch_common_get_iq_data+0x188>
          iq_data_addr += (CH101_DATA_MEM_ADDR + CH101_COMMON_I2CREGS_OFFSET);
 805a316:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 805a318:	f503 7300 	add.w	r3, r3, #512	; 0x200
 805a31c:	86fb      	strh	r3, [r7, #54]	; 0x36
 805a31e:	e003      	b.n	805a328 <ch_common_get_iq_data+0x190>
        } else {
          iq_data_addr += (CH201_DATA_MEM_ADDR + CH201_COMMON_I2CREGS_OFFSET);
 805a320:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 805a322:	f503 7300 	add.w	r3, r3, #512	; 0x200
 805a326:	86fb      	strh	r3, [r7, #54]	; 0x36
        }

        error =
            chdrv_group_i2c_queue(grp_ptr, dev_ptr, 1, CHDRV_NB_TRANS_TYPE_PROG,
 805a328:	68bb      	ldr	r3, [r7, #8]
 805a32a:	9302      	str	r3, [sp, #8]
 805a32c:	8b7b      	ldrh	r3, [r7, #26]
 805a32e:	9301      	str	r3, [sp, #4]
 805a330:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 805a332:	9300      	str	r3, [sp, #0]
 805a334:	2301      	movs	r3, #1
 805a336:	2201      	movs	r2, #1
 805a338:	68f9      	ldr	r1, [r7, #12]
 805a33a:	69f8      	ldr	r0, [r7, #28]
 805a33c:	f000 f94e 	bl	805a5dc <chdrv_group_i2c_queue>
 805a340:	6338      	str	r0, [r7, #48]	; 0x30
        error =
 805a342:	e00c      	b.n	805a35e <ch_common_get_iq_data+0x1c6>
                                  iq_data_addr, num_bytes, (uint8_t *) buf_ptr);
      } else {
        /* Use regular I2C register interface to read data */
        error =
            chdrv_group_i2c_queue(grp_ptr, dev_ptr, 1, CHDRV_NB_TRANS_TYPE_STD,
 805a344:	68bb      	ldr	r3, [r7, #8]
 805a346:	9302      	str	r3, [sp, #8]
 805a348:	8b7b      	ldrh	r3, [r7, #26]
 805a34a:	9301      	str	r3, [sp, #4]
 805a34c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 805a34e:	9300      	str	r3, [sp, #0]
 805a350:	2300      	movs	r3, #0
 805a352:	2201      	movs	r2, #1
 805a354:	68f9      	ldr	r1, [r7, #12]
 805a356:	69f8      	ldr	r0, [r7, #28]
 805a358:	f000 f940 	bl	805a5dc <chdrv_group_i2c_queue>
 805a35c:	6338      	str	r0, [r7, #48]	; 0x30
                                  iq_data_addr, num_bytes, (uint8_t *) buf_ptr);
      }
    }
  }

  return error;
 805a35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 805a360:	b2db      	uxtb	r3, r3
}
 805a362:	4618      	mov	r0, r3
 805a364:	3738      	adds	r7, #56	; 0x38
 805a366:	46bd      	mov	sp, r7
 805a368:	bd80      	pop	{r7, pc}

0805a36a <chdrv_prog_i2c_write>:
 *
 * This function writes bytes to the device using the programming I2C address.  The
 * PROG line for the device must have been asserted before this function is called.
 */
int chdrv_prog_i2c_write(ch_dev_t * dev_ptr, uint8_t * message, uint16_t len)
{
 805a36a:	b580      	push	{r7, lr}
 805a36c:	b086      	sub	sp, #24
 805a36e:	af00      	add	r7, sp, #0
 805a370:	60f8      	str	r0, [r7, #12]
 805a372:	60b9      	str	r1, [r7, #8]
 805a374:	4613      	mov	r3, r2
 805a376:	80fb      	strh	r3, [r7, #6]

  dev_ptr->i2c_address = CH_I2C_ADDR_PROG;
 805a378:	68fb      	ldr	r3, [r7, #12]
 805a37a:	2245      	movs	r2, #69	; 0x45
 805a37c:	761a      	strb	r2, [r3, #24]
  int ch_err = chbsp_i2c_write(dev_ptr, message, len);
 805a37e:	88fb      	ldrh	r3, [r7, #6]
 805a380:	461a      	mov	r2, r3
 805a382:	68b9      	ldr	r1, [r7, #8]
 805a384:	68f8      	ldr	r0, [r7, #12]
 805a386:	f7e9 fabb 	bl	8043900 <chbsp_i2c_write>
 805a38a:	6178      	str	r0, [r7, #20]
  dev_ptr->i2c_address = dev_ptr->app_i2c_address;
 805a38c:	68fb      	ldr	r3, [r7, #12]
 805a38e:	7e5a      	ldrb	r2, [r3, #25]
 805a390:	68fb      	ldr	r3, [r7, #12]
 805a392:	761a      	strb	r2, [r3, #24]

  return ch_err;
 805a394:	697b      	ldr	r3, [r7, #20]
}
 805a396:	4618      	mov	r0, r3
 805a398:	3718      	adds	r7, #24
 805a39a:	46bd      	mov	sp, r7
 805a39c:	bd80      	pop	{r7, pc}

0805a39e <chdrv_prog_i2c_read>:
 *
 * This function reads bytes from the device using the programming I2C address.  The
 * PROG line for the device must have been asserted before this function is called.
 */
int chdrv_prog_i2c_read(ch_dev_t * dev_ptr, uint8_t * message, uint16_t len)
{
 805a39e:	b580      	push	{r7, lr}
 805a3a0:	b086      	sub	sp, #24
 805a3a2:	af00      	add	r7, sp, #0
 805a3a4:	60f8      	str	r0, [r7, #12]
 805a3a6:	60b9      	str	r1, [r7, #8]
 805a3a8:	4613      	mov	r3, r2
 805a3aa:	80fb      	strh	r3, [r7, #6]

  dev_ptr->i2c_address = CH_I2C_ADDR_PROG;
 805a3ac:	68fb      	ldr	r3, [r7, #12]
 805a3ae:	2245      	movs	r2, #69	; 0x45
 805a3b0:	761a      	strb	r2, [r3, #24]
  int ch_err = chbsp_i2c_read(dev_ptr, message, len);
 805a3b2:	88fb      	ldrh	r3, [r7, #6]
 805a3b4:	461a      	mov	r2, r3
 805a3b6:	68b9      	ldr	r1, [r7, #8]
 805a3b8:	68f8      	ldr	r0, [r7, #12]
 805a3ba:	f7e9 fb29 	bl	8043a10 <chbsp_i2c_read>
 805a3be:	6178      	str	r0, [r7, #20]
  dev_ptr->i2c_address = dev_ptr->app_i2c_address;
 805a3c0:	68fb      	ldr	r3, [r7, #12]
 805a3c2:	7e5a      	ldrb	r2, [r3, #25]
 805a3c4:	68fb      	ldr	r3, [r7, #12]
 805a3c6:	761a      	strb	r2, [r3, #24]

  return ch_err;
 805a3c8:	697b      	ldr	r3, [r7, #20]
}
 805a3ca:	4618      	mov	r0, r3
 805a3cc:	3718      	adds	r7, #24
 805a3ce:	46bd      	mov	sp, r7
 805a3d0:	bd80      	pop	{r7, pc}

0805a3d2 <chdrv_write_byte>:
 * \param data_value	data value to transmit
 *
 * \return 0 if successful, non-zero otherwise
 */
int chdrv_write_byte(ch_dev_t * dev_ptr, uint16_t mem_addr, uint8_t data_value)
{
 805a3d2:	b580      	push	{r7, lr}
 805a3d4:	b084      	sub	sp, #16
 805a3d6:	af00      	add	r7, sp, #0
 805a3d8:	6078      	str	r0, [r7, #4]
 805a3da:	460b      	mov	r3, r1
 805a3dc:	807b      	strh	r3, [r7, #2]
 805a3de:	4613      	mov	r3, r2
 805a3e0:	707b      	strb	r3, [r7, #1]
  uint8_t message[] = { sizeof(data_value), data_value };       // insert byte count (1) at start of data
 805a3e2:	2301      	movs	r3, #1
 805a3e4:	723b      	strb	r3, [r7, #8]
 805a3e6:	787b      	ldrb	r3, [r7, #1]
 805a3e8:	727b      	strb	r3, [r7, #9]

  int ch_err = chbsp_i2c_mem_write(dev_ptr, mem_addr, message, sizeof(message));
 805a3ea:	f107 0208 	add.w	r2, r7, #8
 805a3ee:	8879      	ldrh	r1, [r7, #2]
 805a3f0:	2302      	movs	r3, #2
 805a3f2:	6878      	ldr	r0, [r7, #4]
 805a3f4:	f7e9 fabc 	bl	8043970 <chbsp_i2c_mem_write>
 805a3f8:	60f8      	str	r0, [r7, #12]

  return ch_err;
 805a3fa:	68fb      	ldr	r3, [r7, #12]
}
 805a3fc:	4618      	mov	r0, r3
 805a3fe:	3710      	adds	r7, #16
 805a400:	46bd      	mov	sp, r7
 805a402:	bd80      	pop	{r7, pc}

0805a404 <chdrv_write_word>:
 * \param data 		data value to transmit
 *
 * \return 0 if successful, non-zero otherwise
 */
int chdrv_write_word(ch_dev_t * dev_ptr, uint16_t mem_addr, uint16_t data_value)
{
 805a404:	b580      	push	{r7, lr}
 805a406:	b084      	sub	sp, #16
 805a408:	af00      	add	r7, sp, #0
 805a40a:	6078      	str	r0, [r7, #4]
 805a40c:	460b      	mov	r3, r1
 805a40e:	807b      	strh	r3, [r7, #2]
 805a410:	4613      	mov	r3, r2
 805a412:	803b      	strh	r3, [r7, #0]
  // First we write the register address, then the number of bytes we're writing

  // Place byte count (2) in first byte of message
  // Sensor is little-endian, so LSB goes in at the lower address
  uint8_t message[] =
 805a414:	2302      	movs	r3, #2
 805a416:	723b      	strb	r3, [r7, #8]
      { sizeof(data_value), (uint8_t) data_value, (uint8_t) (data_value >> 8) };
 805a418:	883b      	ldrh	r3, [r7, #0]
 805a41a:	b2db      	uxtb	r3, r3
  uint8_t message[] =
 805a41c:	727b      	strb	r3, [r7, #9]
      { sizeof(data_value), (uint8_t) data_value, (uint8_t) (data_value >> 8) };
 805a41e:	883b      	ldrh	r3, [r7, #0]
 805a420:	0a1b      	lsrs	r3, r3, #8
 805a422:	b29b      	uxth	r3, r3
 805a424:	b2db      	uxtb	r3, r3
  uint8_t message[] =
 805a426:	72bb      	strb	r3, [r7, #10]

  int ch_err = chbsp_i2c_mem_write(dev_ptr, mem_addr, message, sizeof(message));
 805a428:	f107 0208 	add.w	r2, r7, #8
 805a42c:	8879      	ldrh	r1, [r7, #2]
 805a42e:	2303      	movs	r3, #3
 805a430:	6878      	ldr	r0, [r7, #4]
 805a432:	f7e9 fa9d 	bl	8043970 <chbsp_i2c_mem_write>
 805a436:	60f8      	str	r0, [r7, #12]

  return ch_err;
 805a438:	68fb      	ldr	r3, [r7, #12]
}
 805a43a:	4618      	mov	r0, r3
 805a43c:	3710      	adds	r7, #16
 805a43e:	46bd      	mov	sp, r7
 805a440:	bd80      	pop	{r7, pc}

0805a442 <chdrv_read_byte>:
 * \param data 		pointer to receive buffer
 *
 * \return 0 if successful, non-zero otherwise
 */
int chdrv_read_byte(ch_dev_t * dev_ptr, uint16_t mem_addr, uint8_t * data)
{
 805a442:	b580      	push	{r7, lr}
 805a444:	b084      	sub	sp, #16
 805a446:	af00      	add	r7, sp, #0
 805a448:	60f8      	str	r0, [r7, #12]
 805a44a:	460b      	mov	r3, r1
 805a44c:	607a      	str	r2, [r7, #4]
 805a44e:	817b      	strh	r3, [r7, #10]

  return (chbsp_i2c_mem_read(dev_ptr, mem_addr, data, 1));
 805a450:	8979      	ldrh	r1, [r7, #10]
 805a452:	2301      	movs	r3, #1
 805a454:	687a      	ldr	r2, [r7, #4]
 805a456:	68f8      	ldr	r0, [r7, #12]
 805a458:	f7e9 fb26 	bl	8043aa8 <chbsp_i2c_mem_read>
 805a45c:	4603      	mov	r3, r0
}
 805a45e:	4618      	mov	r0, r3
 805a460:	3710      	adds	r7, #16
 805a462:	46bd      	mov	sp, r7
 805a464:	bd80      	pop	{r7, pc}

0805a466 <chdrv_burst_read>:
 *
 * \return 0 if successful, non-zero otherwise
 */
int chdrv_burst_read(ch_dev_t * dev_ptr, uint16_t mem_addr, uint8_t * data,
                     uint16_t num_bytes)
{
 805a466:	b580      	push	{r7, lr}
 805a468:	b084      	sub	sp, #16
 805a46a:	af00      	add	r7, sp, #0
 805a46c:	60f8      	str	r0, [r7, #12]
 805a46e:	607a      	str	r2, [r7, #4]
 805a470:	461a      	mov	r2, r3
 805a472:	460b      	mov	r3, r1
 805a474:	817b      	strh	r3, [r7, #10]
 805a476:	4613      	mov	r3, r2
 805a478:	813b      	strh	r3, [r7, #8]

  return (chbsp_i2c_mem_read(dev_ptr, mem_addr, data, num_bytes));
 805a47a:	893b      	ldrh	r3, [r7, #8]
 805a47c:	8979      	ldrh	r1, [r7, #10]
 805a47e:	687a      	ldr	r2, [r7, #4]
 805a480:	68f8      	ldr	r0, [r7, #12]
 805a482:	f7e9 fb11 	bl	8043aa8 <chbsp_i2c_mem_read>
 805a486:	4603      	mov	r3, r0
}
 805a488:	4618      	mov	r0, r3
 805a48a:	3710      	adds	r7, #16
 805a48c:	46bd      	mov	sp, r7
 805a48e:	bd80      	pop	{r7, pc}

0805a490 <chdrv_read_word>:
 * \param data 		pointer to receive buffer
 *
 * \return 0 if successful, non-zero otherwise
 */
int chdrv_read_word(ch_dev_t * dev_ptr, uint16_t mem_addr, uint16_t * data)
{
 805a490:	b580      	push	{r7, lr}
 805a492:	b084      	sub	sp, #16
 805a494:	af00      	add	r7, sp, #0
 805a496:	60f8      	str	r0, [r7, #12]
 805a498:	460b      	mov	r3, r1
 805a49a:	607a      	str	r2, [r7, #4]
 805a49c:	817b      	strh	r3, [r7, #10]
  //
  return (chbsp_i2c_mem_read(dev_ptr, mem_addr, (uint8_t *) data, 2));
 805a49e:	8979      	ldrh	r1, [r7, #10]
 805a4a0:	2302      	movs	r3, #2
 805a4a2:	687a      	ldr	r2, [r7, #4]
 805a4a4:	68f8      	ldr	r0, [r7, #12]
 805a4a6:	f7e9 faff 	bl	8043aa8 <chbsp_i2c_mem_read>
 805a4aa:	4603      	mov	r3, r0
}
 805a4ac:	4618      	mov	r0, r3
 805a4ae:	3710      	adds	r7, #16
 805a4b0:	46bd      	mov	sp, r7
 805a4b2:	bd80      	pop	{r7, pc}

0805a4b4 <chdrv_group_measure_rtc>:
 * \note The calibration pulse is sent to all devices in the group at the same time.  Therefore 
 * all connected devices will see the same reference pulse length.
 * 
 */
void chdrv_group_measure_rtc(ch_group_t * grp_ptr)
{
 805a4b4:	b580      	push	{r7, lr}
 805a4b6:	b084      	sub	sp, #16
 805a4b8:	af00      	add	r7, sp, #0
 805a4ba:	6078      	str	r0, [r7, #4]
  uint8_t i;
  const uint32_t pulselength = grp_ptr->rtc_cal_pulse_ms;
 805a4bc:	687b      	ldr	r3, [r7, #4]
 805a4be:	88db      	ldrh	r3, [r3, #6]
 805a4c0:	60bb      	str	r3, [r7, #8]

  /* Configure the host's side of the IO pin as a low output */
  chbsp_group_io_clear(grp_ptr);
 805a4c2:	6878      	ldr	r0, [r7, #4]
 805a4c4:	f7e9 f8b6 	bl	8043634 <chbsp_group_io_clear>
  chbsp_group_set_io_dir_out(grp_ptr);
 805a4c8:	6878      	ldr	r0, [r7, #4]
 805a4ca:	f7e8 ffad 	bl	8043428 <chbsp_group_set_io_dir_out>

  /* Set up RTC calibration */
  for (i = 0; i < grp_ptr->num_ports; i++) {
 805a4ce:	2300      	movs	r3, #0
 805a4d0:	73fb      	strb	r3, [r7, #15]
 805a4d2:	e01a      	b.n	805a50a <chdrv_group_measure_rtc+0x56>
    if (grp_ptr->device[i]->sensor_connected) {
 805a4d4:	7bfb      	ldrb	r3, [r7, #15]
 805a4d6:	687a      	ldr	r2, [r7, #4]
 805a4d8:	3304      	adds	r3, #4
 805a4da:	009b      	lsls	r3, r3, #2
 805a4dc:	4413      	add	r3, r2
 805a4de:	685b      	ldr	r3, [r3, #4]
 805a4e0:	7fdb      	ldrb	r3, [r3, #31]
 805a4e2:	2b00      	cmp	r3, #0
 805a4e4:	d00e      	beq.n	805a504 <chdrv_group_measure_rtc+0x50>
      grp_ptr->device[i]->prepare_pulse_timer(grp_ptr->device[i]);
 805a4e6:	7bfb      	ldrb	r3, [r7, #15]
 805a4e8:	687a      	ldr	r2, [r7, #4]
 805a4ea:	3304      	adds	r3, #4
 805a4ec:	009b      	lsls	r3, r3, #2
 805a4ee:	4413      	add	r3, r2
 805a4f0:	685b      	ldr	r3, [r3, #4]
 805a4f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 805a4f4:	7bfb      	ldrb	r3, [r7, #15]
 805a4f6:	6879      	ldr	r1, [r7, #4]
 805a4f8:	3304      	adds	r3, #4
 805a4fa:	009b      	lsls	r3, r3, #2
 805a4fc:	440b      	add	r3, r1
 805a4fe:	685b      	ldr	r3, [r3, #4]
 805a500:	4618      	mov	r0, r3
 805a502:	4790      	blx	r2
  for (i = 0; i < grp_ptr->num_ports; i++) {
 805a504:	7bfb      	ldrb	r3, [r7, #15]
 805a506:	3301      	adds	r3, #1
 805a508:	73fb      	strb	r3, [r7, #15]
 805a50a:	687b      	ldr	r3, [r7, #4]
 805a50c:	781b      	ldrb	r3, [r3, #0]
 805a50e:	7bfa      	ldrb	r2, [r7, #15]
 805a510:	429a      	cmp	r2, r3
 805a512:	d3df      	bcc.n	805a4d4 <chdrv_group_measure_rtc+0x20>
    }
  }

  /* Trigger a pulse on the IO pin */
  chbsp_group_io_set(grp_ptr);
 805a514:	6878      	ldr	r0, [r7, #4]
 805a516:	f7e9 f8bd 	bl	8043694 <chbsp_group_io_set>
  chbsp_delay_ms(pulselength);
 805a51a:	68b8      	ldr	r0, [r7, #8]
 805a51c:	f7e9 f9bc 	bl	8043898 <chbsp_delay_ms>
  chbsp_group_io_clear(grp_ptr);
 805a520:	6878      	ldr	r0, [r7, #4]
 805a522:	f7e9 f887 	bl	8043634 <chbsp_group_io_clear>

  chbsp_group_set_io_dir_in(grp_ptr);
 805a526:	6878      	ldr	r0, [r7, #4]
 805a528:	f7e8 ffba 	bl	80434a0 <chbsp_group_set_io_dir_in>

  chbsp_delay_ms(1);
 805a52c:	2001      	movs	r0, #1
 805a52e:	f7e9 f9b3 	bl	8043898 <chbsp_delay_ms>

  for (i = 0; i < grp_ptr->num_ports; i++) {
 805a532:	2300      	movs	r3, #0
 805a534:	73fb      	strb	r3, [r7, #15]
 805a536:	e047      	b.n	805a5c8 <chdrv_group_measure_rtc+0x114>
    if (grp_ptr->device[i]->sensor_connected) {
 805a538:	7bfb      	ldrb	r3, [r7, #15]
 805a53a:	687a      	ldr	r2, [r7, #4]
 805a53c:	3304      	adds	r3, #4
 805a53e:	009b      	lsls	r3, r3, #2
 805a540:	4413      	add	r3, r2
 805a542:	685b      	ldr	r3, [r3, #4]
 805a544:	7fdb      	ldrb	r3, [r3, #31]
 805a546:	2b00      	cmp	r3, #0
 805a548:	d03b      	beq.n	805a5c2 <chdrv_group_measure_rtc+0x10e>
      grp_ptr->device[i]->store_pt_result(grp_ptr->device[i]);
 805a54a:	7bfb      	ldrb	r3, [r7, #15]
 805a54c:	687a      	ldr	r2, [r7, #4]
 805a54e:	3304      	adds	r3, #4
 805a550:	009b      	lsls	r3, r3, #2
 805a552:	4413      	add	r3, r2
 805a554:	685b      	ldr	r3, [r3, #4]
 805a556:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 805a558:	7bfb      	ldrb	r3, [r7, #15]
 805a55a:	6879      	ldr	r1, [r7, #4]
 805a55c:	3304      	adds	r3, #4
 805a55e:	009b      	lsls	r3, r3, #2
 805a560:	440b      	add	r3, r1
 805a562:	685b      	ldr	r3, [r3, #4]
 805a564:	4618      	mov	r0, r3
 805a566:	4790      	blx	r2
      grp_ptr->device[i]->store_op_freq(grp_ptr->device[i]);
 805a568:	7bfb      	ldrb	r3, [r7, #15]
 805a56a:	687a      	ldr	r2, [r7, #4]
 805a56c:	3304      	adds	r3, #4
 805a56e:	009b      	lsls	r3, r3, #2
 805a570:	4413      	add	r3, r2
 805a572:	685b      	ldr	r3, [r3, #4]
 805a574:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 805a576:	7bfb      	ldrb	r3, [r7, #15]
 805a578:	6879      	ldr	r1, [r7, #4]
 805a57a:	3304      	adds	r3, #4
 805a57c:	009b      	lsls	r3, r3, #2
 805a57e:	440b      	add	r3, r1
 805a580:	685b      	ldr	r3, [r3, #4]
 805a582:	4618      	mov	r0, r3
 805a584:	4790      	blx	r2
      grp_ptr->device[i]->store_bandwidth(grp_ptr->device[i]);
 805a586:	7bfb      	ldrb	r3, [r7, #15]
 805a588:	687a      	ldr	r2, [r7, #4]
 805a58a:	3304      	adds	r3, #4
 805a58c:	009b      	lsls	r3, r3, #2
 805a58e:	4413      	add	r3, r2
 805a590:	685b      	ldr	r3, [r3, #4]
 805a592:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 805a594:	7bfb      	ldrb	r3, [r7, #15]
 805a596:	6879      	ldr	r1, [r7, #4]
 805a598:	3304      	adds	r3, #4
 805a59a:	009b      	lsls	r3, r3, #2
 805a59c:	440b      	add	r3, r1
 805a59e:	685b      	ldr	r3, [r3, #4]
 805a5a0:	4618      	mov	r0, r3
 805a5a2:	4790      	blx	r2
      grp_ptr->device[i]->store_scalefactor(grp_ptr->device[i]);
 805a5a4:	7bfb      	ldrb	r3, [r7, #15]
 805a5a6:	687a      	ldr	r2, [r7, #4]
 805a5a8:	3304      	adds	r3, #4
 805a5aa:	009b      	lsls	r3, r3, #2
 805a5ac:	4413      	add	r3, r2
 805a5ae:	685b      	ldr	r3, [r3, #4]
 805a5b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 805a5b2:	7bfb      	ldrb	r3, [r7, #15]
 805a5b4:	6879      	ldr	r1, [r7, #4]
 805a5b6:	3304      	adds	r3, #4
 805a5b8:	009b      	lsls	r3, r3, #2
 805a5ba:	440b      	add	r3, r1
 805a5bc:	685b      	ldr	r3, [r3, #4]
 805a5be:	4618      	mov	r0, r3
 805a5c0:	4790      	blx	r2
  for (i = 0; i < grp_ptr->num_ports; i++) {
 805a5c2:	7bfb      	ldrb	r3, [r7, #15]
 805a5c4:	3301      	adds	r3, #1
 805a5c6:	73fb      	strb	r3, [r7, #15]
 805a5c8:	687b      	ldr	r3, [r7, #4]
 805a5ca:	781b      	ldrb	r3, [r3, #0]
 805a5cc:	7bfa      	ldrb	r2, [r7, #15]
 805a5ce:	429a      	cmp	r2, r3
 805a5d0:	d3b2      	bcc.n	805a538 <chdrv_group_measure_rtc+0x84>
    }
  }
}
 805a5d2:	bf00      	nop
 805a5d4:	bf00      	nop
 805a5d6:	3710      	adds	r7, #16
 805a5d8:	46bd      	mov	sp, r7
 805a5da:	bd80      	pop	{r7, pc}

0805a5dc <chdrv_group_i2c_queue>:
 * \return 0 if successful, non-zero otherwise
 */
int chdrv_group_i2c_queue(ch_group_t * grp_ptr, ch_dev_t * dev_ptr,
                          uint8_t rd_wrb, uint8_t type, uint16_t addr,
                          uint16_t nbytes, uint8_t * data)
{
 805a5dc:	b580      	push	{r7, lr}
 805a5de:	b088      	sub	sp, #32
 805a5e0:	af00      	add	r7, sp, #0
 805a5e2:	60f8      	str	r0, [r7, #12]
 805a5e4:	60b9      	str	r1, [r7, #8]
 805a5e6:	4611      	mov	r1, r2
 805a5e8:	461a      	mov	r2, r3
 805a5ea:	460b      	mov	r3, r1
 805a5ec:	71fb      	strb	r3, [r7, #7]
 805a5ee:	4613      	mov	r3, r2
 805a5f0:	71bb      	strb	r3, [r7, #6]

  uint8_t bus_num = ch_get_i2c_bus(dev_ptr);
 805a5f2:	68b8      	ldr	r0, [r7, #8]
 805a5f4:	f7fe fffe 	bl	80595f4 <ch_get_i2c_bus>
 805a5f8:	4603      	mov	r3, r0
 805a5fa:	76fb      	strb	r3, [r7, #27]
  int ret_val;

  chdrv_i2c_queue_t *q = &(grp_ptr->i2c_queue[bus_num]);
 805a5fc:	7efa      	ldrb	r2, [r7, #27]
 805a5fe:	4613      	mov	r3, r2
 805a600:	009b      	lsls	r3, r3, #2
 805a602:	4413      	add	r3, r2
 805a604:	009b      	lsls	r3, r3, #2
 805a606:	3318      	adds	r3, #24
 805a608:	68fa      	ldr	r2, [r7, #12]
 805a60a:	4413      	add	r3, r2
 805a60c:	3304      	adds	r3, #4
 805a60e:	617b      	str	r3, [r7, #20]
  chdrv_i2c_transaction_t *t = &(q->transaction[q->len]);
 805a610:	697b      	ldr	r3, [r7, #20]
 805a612:	789b      	ldrb	r3, [r3, #2]
 805a614:	011b      	lsls	r3, r3, #4
 805a616:	697a      	ldr	r2, [r7, #20]
 805a618:	4413      	add	r3, r2
 805a61a:	3304      	adds	r3, #4
 805a61c:	613b      	str	r3, [r7, #16]

  if (q->len < CHDRV_MAX_I2C_QUEUE_LENGTH) {
 805a61e:	697b      	ldr	r3, [r7, #20]
 805a620:	789b      	ldrb	r3, [r3, #2]
 805a622:	2b00      	cmp	r3, #0
 805a624:	d11d      	bne.n	805a662 <chdrv_group_i2c_queue+0x86>
    t->databuf = data;
 805a626:	693b      	ldr	r3, [r7, #16]
 805a628:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 805a62a:	60da      	str	r2, [r3, #12]
    t->dev_ptr = dev_ptr;
 805a62c:	693b      	ldr	r3, [r7, #16]
 805a62e:	68ba      	ldr	r2, [r7, #8]
 805a630:	609a      	str	r2, [r3, #8]
    t->addr = addr;
 805a632:	693b      	ldr	r3, [r7, #16]
 805a634:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 805a636:	809a      	strh	r2, [r3, #4]
    t->nbytes = nbytes;
 805a638:	693b      	ldr	r3, [r7, #16]
 805a63a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 805a63c:	80da      	strh	r2, [r3, #6]
    t->rd_wrb = rd_wrb;
 805a63e:	693b      	ldr	r3, [r7, #16]
 805a640:	79fa      	ldrb	r2, [r7, #7]
 805a642:	705a      	strb	r2, [r3, #1]
    t->type = type;
 805a644:	693b      	ldr	r3, [r7, #16]
 805a646:	79ba      	ldrb	r2, [r7, #6]
 805a648:	701a      	strb	r2, [r3, #0]
    t->xfer_num = 0;
 805a64a:	693b      	ldr	r3, [r7, #16]
 805a64c:	2200      	movs	r2, #0
 805a64e:	709a      	strb	r2, [r3, #2]
    q->len++;
 805a650:	697b      	ldr	r3, [r7, #20]
 805a652:	789b      	ldrb	r3, [r3, #2]
 805a654:	3301      	adds	r3, #1
 805a656:	b2da      	uxtb	r2, r3
 805a658:	697b      	ldr	r3, [r7, #20]
 805a65a:	709a      	strb	r2, [r3, #2]
    ret_val = 0;
 805a65c:	2300      	movs	r3, #0
 805a65e:	61fb      	str	r3, [r7, #28]
 805a660:	e001      	b.n	805a666 <chdrv_group_i2c_queue+0x8a>
  } else {
    ret_val = 1;
 805a662:	2301      	movs	r3, #1
 805a664:	61fb      	str	r3, [r7, #28]
  }

  return ret_val;
 805a666:	69fb      	ldr	r3, [r7, #28]
}
 805a668:	4618      	mov	r0, r3
 805a66a:	3720      	adds	r7, #32
 805a66c:	46bd      	mov	sp, r7
 805a66e:	bd80      	pop	{r7, pc}

0805a670 <chdrv_wait_for_lock>:
 *
 * After the sensor is programmed, it executes an internal start-up and self-test sequence. This function waits the
 * specified time in milliseconds for the sensor to finish this sequence.
 */
int chdrv_wait_for_lock(ch_dev_t * dev_ptr, uint16_t timeout_ms)
{
 805a670:	b580      	push	{r7, lr}
 805a672:	b084      	sub	sp, #16
 805a674:	af00      	add	r7, sp, #0
 805a676:	6078      	str	r0, [r7, #4]
 805a678:	460b      	mov	r3, r1
 805a67a:	807b      	strh	r3, [r7, #2]
  uint32_t start_time = chbsp_timestamp_ms();
 805a67c:	f000 fbfd 	bl	805ae7a <chbsp_timestamp_ms>
 805a680:	60b8      	str	r0, [r7, #8]
  int ch_err = !(dev_ptr->sensor_connected);
 805a682:	687b      	ldr	r3, [r7, #4]
 805a684:	7fdb      	ldrb	r3, [r3, #31]
 805a686:	2b00      	cmp	r3, #0
 805a688:	bf0c      	ite	eq
 805a68a:	2301      	moveq	r3, #1
 805a68c:	2300      	movne	r3, #0
 805a68e:	b2db      	uxtb	r3, r3
 805a690:	60fb      	str	r3, [r7, #12]

  while (!ch_err && !(dev_ptr->get_locked_state(dev_ptr))) {
 805a692:	e00e      	b.n	805a6b2 <chdrv_wait_for_lock+0x42>
    chbsp_delay_ms(10);
 805a694:	200a      	movs	r0, #10
 805a696:	f7e9 f8ff 	bl	8043898 <chbsp_delay_ms>
    ch_err = ((chbsp_timestamp_ms() - start_time) > timeout_ms);
 805a69a:	f000 fbee 	bl	805ae7a <chbsp_timestamp_ms>
 805a69e:	4602      	mov	r2, r0
 805a6a0:	68bb      	ldr	r3, [r7, #8]
 805a6a2:	1ad2      	subs	r2, r2, r3
 805a6a4:	887b      	ldrh	r3, [r7, #2]
 805a6a6:	429a      	cmp	r2, r3
 805a6a8:	bf8c      	ite	hi
 805a6aa:	2301      	movhi	r3, #1
 805a6ac:	2300      	movls	r3, #0
 805a6ae:	b2db      	uxtb	r3, r3
 805a6b0:	60fb      	str	r3, [r7, #12]
  while (!ch_err && !(dev_ptr->get_locked_state(dev_ptr))) {
 805a6b2:	68fb      	ldr	r3, [r7, #12]
 805a6b4:	2b00      	cmp	r3, #0
 805a6b6:	d106      	bne.n	805a6c6 <chdrv_wait_for_lock+0x56>
 805a6b8:	687b      	ldr	r3, [r7, #4]
 805a6ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 805a6bc:	6878      	ldr	r0, [r7, #4]
 805a6be:	4798      	blx	r3
 805a6c0:	4603      	mov	r3, r0
 805a6c2:	2b00      	cmp	r3, #0
 805a6c4:	d0e6      	beq.n	805a694 <chdrv_wait_for_lock+0x24>
             dev_ptr->io_index);
    chbsp_print_str(cbuf);
  }
#endif

  return ch_err;
 805a6c6:	68fb      	ldr	r3, [r7, #12]
}
 805a6c8:	4618      	mov	r0, r3
 805a6ca:	3710      	adds	r7, #16
 805a6cc:	46bd      	mov	sp, r7
 805a6ce:	bd80      	pop	{r7, pc}

0805a6d0 <chdrv_group_wait_for_lock>:
 * After each sensor is programmed, it executes an internal start-up and self-test sequence. This 
 * function waits for all sensor devices to finish this sequence.  For each device, the maximum 
 * time to wait is \a CHDRV_FREQLOCK_TIMEOUT_MS milliseconds.
 */
int chdrv_group_wait_for_lock(ch_group_t * grp_ptr)
{
 805a6d0:	b580      	push	{r7, lr}
 805a6d2:	b086      	sub	sp, #24
 805a6d4:	af00      	add	r7, sp, #0
 805a6d6:	6078      	str	r0, [r7, #4]
  int ch_err = 0;
 805a6d8:	2300      	movs	r3, #0
 805a6da:	617b      	str	r3, [r7, #20]

  for (uint8_t i = 0; i < grp_ptr->num_ports; i++) {
 805a6dc:	2300      	movs	r3, #0
 805a6de:	74fb      	strb	r3, [r7, #19]
 805a6e0:	e015      	b.n	805a70e <chdrv_group_wait_for_lock+0x3e>
    ch_dev_t *dev_ptr = grp_ptr->device[i];
 805a6e2:	7cfb      	ldrb	r3, [r7, #19]
 805a6e4:	687a      	ldr	r2, [r7, #4]
 805a6e6:	3304      	adds	r3, #4
 805a6e8:	009b      	lsls	r3, r3, #2
 805a6ea:	4413      	add	r3, r2
 805a6ec:	685b      	ldr	r3, [r3, #4]
 805a6ee:	60fb      	str	r3, [r7, #12]

    if (dev_ptr->sensor_connected) {
 805a6f0:	68fb      	ldr	r3, [r7, #12]
 805a6f2:	7fdb      	ldrb	r3, [r3, #31]
 805a6f4:	2b00      	cmp	r3, #0
 805a6f6:	d007      	beq.n	805a708 <chdrv_group_wait_for_lock+0x38>
      ch_err |= chdrv_wait_for_lock(dev_ptr, CHDRV_FREQLOCK_TIMEOUT_MS);
 805a6f8:	2164      	movs	r1, #100	; 0x64
 805a6fa:	68f8      	ldr	r0, [r7, #12]
 805a6fc:	f7ff ffb8 	bl	805a670 <chdrv_wait_for_lock>
 805a700:	4602      	mov	r2, r0
 805a702:	697b      	ldr	r3, [r7, #20]
 805a704:	4313      	orrs	r3, r2
 805a706:	617b      	str	r3, [r7, #20]
  for (uint8_t i = 0; i < grp_ptr->num_ports; i++) {
 805a708:	7cfb      	ldrb	r3, [r7, #19]
 805a70a:	3301      	adds	r3, #1
 805a70c:	74fb      	strb	r3, [r7, #19]
 805a70e:	687b      	ldr	r3, [r7, #4]
 805a710:	781b      	ldrb	r3, [r3, #0]
 805a712:	7cfa      	ldrb	r2, [r7, #19]
 805a714:	429a      	cmp	r2, r3
 805a716:	d3e4      	bcc.n	805a6e2 <chdrv_group_wait_for_lock+0x12>
    }
  }
  return ch_err;
 805a718:	697b      	ldr	r3, [r7, #20]
}
 805a71a:	4618      	mov	r0, r3
 805a71c:	3718      	adds	r7, #24
 805a71e:	46bd      	mov	sp, r7
 805a720:	bd80      	pop	{r7, pc}

0805a722 <chdrv_group_hw_trigger>:
 *
 * This function starts a triggered measurement on each sensor in a group, by briefly asserting the INT line to each device.  
 * Each sensor must have already been placed in hardware triggered mode before this function is called.
 */
int chdrv_group_hw_trigger(ch_group_t * grp_ptr)
{
 805a722:	b580      	push	{r7, lr}
 805a724:	b084      	sub	sp, #16
 805a726:	af00      	add	r7, sp, #0
 805a728:	6078      	str	r0, [r7, #4]
  int ch_err = !grp_ptr;
 805a72a:	687b      	ldr	r3, [r7, #4]
 805a72c:	2b00      	cmp	r3, #0
 805a72e:	bf0c      	ite	eq
 805a730:	2301      	moveq	r3, #1
 805a732:	2300      	movne	r3, #0
 805a734:	b2db      	uxtb	r3, r3
 805a736:	60fb      	str	r3, [r7, #12]

  if (!ch_err) {
 805a738:	68fb      	ldr	r3, [r7, #12]
 805a73a:	2b00      	cmp	r3, #0
 805a73c:	d117      	bne.n	805a76e <chdrv_group_hw_trigger+0x4c>
    //Disable pin interrupt before triggering pulse
    chbsp_group_io_interrupt_disable(grp_ptr);
 805a73e:	6878      	ldr	r0, [r7, #4]
 805a740:	f7e9 f854 	bl	80437ec <chbsp_group_io_interrupt_disable>

    // Generate pulse
    chbsp_group_set_io_dir_out(grp_ptr);
 805a744:	6878      	ldr	r0, [r7, #4]
 805a746:	f7e8 fe6f 	bl	8043428 <chbsp_group_set_io_dir_out>
    chbsp_group_io_set(grp_ptr);
 805a74a:	6878      	ldr	r0, [r7, #4]
 805a74c:	f7e8 ffa2 	bl	8043694 <chbsp_group_io_set>
    chbsp_delay_us(5);          // Pulse needs to be a minimum of 800ns long
 805a750:	2005      	movs	r0, #5
 805a752:	f7e9 f881 	bl	8043858 <chbsp_delay_us>
    chbsp_group_io_clear(grp_ptr);
 805a756:	6878      	ldr	r0, [r7, #4]
 805a758:	f7e8 ff6c 	bl	8043634 <chbsp_group_io_clear>
    chbsp_group_set_io_dir_in(grp_ptr);
 805a75c:	6878      	ldr	r0, [r7, #4]
 805a75e:	f7e8 fe9f 	bl	80434a0 <chbsp_group_set_io_dir_in>

    // Delay a bit before re-enabling pin interrupt to avoid possibly triggering on falling-edge noise
    chbsp_delay_us(10);
 805a762:	200a      	movs	r0, #10
 805a764:	f7e9 f878 	bl	8043858 <chbsp_delay_us>

    chbsp_group_io_interrupt_enable(grp_ptr);
 805a768:	6878      	ldr	r0, [r7, #4]
 805a76a:	f7e8 ffc3 	bl	80436f4 <chbsp_group_io_interrupt_enable>
  }
  return ch_err;
 805a76e:	68fb      	ldr	r3, [r7, #12]
}
 805a770:	4618      	mov	r0, r3
 805a772:	3710      	adds	r7, #16
 805a774:	46bd      	mov	sp, r7
 805a776:	bd80      	pop	{r7, pc}

0805a778 <chdrv_prog_write>:
 * \return 0 if write to sensor succeeded, non-zero otherwise
 *
 * This local function writes a value to a sensor programming register.
 */
int chdrv_prog_write(ch_dev_t * dev_ptr, uint8_t reg_addr, uint16_t data)
{
 805a778:	b580      	push	{r7, lr}
 805a77a:	b084      	sub	sp, #16
 805a77c:	af00      	add	r7, sp, #0
 805a77e:	6078      	str	r0, [r7, #4]
 805a780:	460b      	mov	r3, r1
 805a782:	70fb      	strb	r3, [r7, #3]
 805a784:	4613      	mov	r3, r2
 805a786:	803b      	strh	r3, [r7, #0]
  /* Set register address write bit */
  reg_addr |= 0x80;
 805a788:	78fb      	ldrb	r3, [r7, #3]
 805a78a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 805a78e:	70fb      	strb	r3, [r7, #3]

  /* Write the register address, followed by the value to be written */
  uint8_t message[] = { reg_addr, (uint8_t) data, (uint8_t) (data >> 8) };
 805a790:	78fb      	ldrb	r3, [r7, #3]
 805a792:	733b      	strb	r3, [r7, #12]
 805a794:	883b      	ldrh	r3, [r7, #0]
 805a796:	b2db      	uxtb	r3, r3
 805a798:	737b      	strb	r3, [r7, #13]
 805a79a:	883b      	ldrh	r3, [r7, #0]
 805a79c:	0a1b      	lsrs	r3, r3, #8
 805a79e:	b29b      	uxth	r3, r3
 805a7a0:	b2db      	uxtb	r3, r3
 805a7a2:	73bb      	strb	r3, [r7, #14]

  /* For the 2-byte registers, we also need to also write MSB after the LSB */
  return chdrv_prog_i2c_write(dev_ptr, message, (1 + CH_PROG_SIZEOF(reg_addr)));
 805a7a4:	78fb      	ldrb	r3, [r7, #3]
 805a7a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 805a7aa:	2b00      	cmp	r3, #0
 805a7ac:	d001      	beq.n	805a7b2 <chdrv_prog_write+0x3a>
 805a7ae:	2202      	movs	r2, #2
 805a7b0:	e000      	b.n	805a7b4 <chdrv_prog_write+0x3c>
 805a7b2:	2203      	movs	r2, #3
 805a7b4:	f107 030c 	add.w	r3, r7, #12
 805a7b8:	4619      	mov	r1, r3
 805a7ba:	6878      	ldr	r0, [r7, #4]
 805a7bc:	f7ff fdd5 	bl	805a36a <chdrv_prog_i2c_write>
 805a7c0:	4603      	mov	r3, r0
}
 805a7c2:	4618      	mov	r0, r3
 805a7c4:	3710      	adds	r7, #16
 805a7c6:	46bd      	mov	sp, r7
 805a7c8:	bd80      	pop	{r7, pc}
	...

0805a7cc <chdrv_prog_mem_write>:
 * This function writes to sensor memory using the low-level programming interface.  The type 
 * of write is automatically determined based on data length and target address alignment.
 */
int chdrv_prog_mem_write(ch_dev_t * dev_ptr, uint16_t addr, uint8_t * message,
                         uint16_t nbytes)
{
 805a7cc:	b580      	push	{r7, lr}
 805a7ce:	b086      	sub	sp, #24
 805a7d0:	af00      	add	r7, sp, #0
 805a7d2:	60f8      	str	r0, [r7, #12]
 805a7d4:	607a      	str	r2, [r7, #4]
 805a7d6:	461a      	mov	r2, r3
 805a7d8:	460b      	mov	r3, r1
 805a7da:	817b      	strh	r3, [r7, #10]
 805a7dc:	4613      	mov	r3, r2
 805a7de:	813b      	strh	r3, [r7, #8]
  int ch_err = (nbytes == 0);
 805a7e0:	893b      	ldrh	r3, [r7, #8]
 805a7e2:	2b00      	cmp	r3, #0
 805a7e4:	bf0c      	ite	eq
 805a7e6:	2301      	moveq	r3, #1
 805a7e8:	2300      	movne	r3, #0
 805a7ea:	b2db      	uxtb	r3, r3
 805a7ec:	617b      	str	r3, [r7, #20]

  if (!ch_err) {
 805a7ee:	697b      	ldr	r3, [r7, #20]
 805a7f0:	2b00      	cmp	r3, #0
 805a7f2:	d106      	bne.n	805a802 <chdrv_prog_mem_write+0x36>
    ch_err = chdrv_prog_write(dev_ptr, CH_PROG_REG_ADDR, addr);
 805a7f4:	897b      	ldrh	r3, [r7, #10]
 805a7f6:	461a      	mov	r2, r3
 805a7f8:	2105      	movs	r1, #5
 805a7fa:	68f8      	ldr	r0, [r7, #12]
 805a7fc:	f7ff ffbc 	bl	805a778 <chdrv_prog_write>
 805a800:	6178      	str	r0, [r7, #20]
  }

  if (nbytes == 1 || (nbytes == 2 && !(addr & 1))) {
 805a802:	893b      	ldrh	r3, [r7, #8]
 805a804:	2b01      	cmp	r3, #1
 805a806:	d007      	beq.n	805a818 <chdrv_prog_mem_write+0x4c>
 805a808:	893b      	ldrh	r3, [r7, #8]
 805a80a:	2b02      	cmp	r3, #2
 805a80c:	d124      	bne.n	805a858 <chdrv_prog_mem_write+0x8c>
 805a80e:	897b      	ldrh	r3, [r7, #10]
 805a810:	f003 0301 	and.w	r3, r3, #1
 805a814:	2b00      	cmp	r3, #0
 805a816:	d11f      	bne.n	805a858 <chdrv_prog_mem_write+0x8c>
    uint16_t data = *((uint16_t *) message);
 805a818:	687b      	ldr	r3, [r7, #4]
 805a81a:	881b      	ldrh	r3, [r3, #0]
 805a81c:	827b      	strh	r3, [r7, #18]
    if (!ch_err) {
 805a81e:	697b      	ldr	r3, [r7, #20]
 805a820:	2b00      	cmp	r3, #0
 805a822:	d106      	bne.n	805a832 <chdrv_prog_mem_write+0x66>
      ch_err = chdrv_prog_write(dev_ptr, CH_PROG_REG_DATA, data);
 805a824:	8a7b      	ldrh	r3, [r7, #18]
 805a826:	461a      	mov	r2, r3
 805a828:	2106      	movs	r1, #6
 805a82a:	68f8      	ldr	r0, [r7, #12]
 805a82c:	f7ff ffa4 	bl	805a778 <chdrv_prog_write>
 805a830:	6178      	str	r0, [r7, #20]
    }
    if (!ch_err) {
 805a832:	697b      	ldr	r3, [r7, #20]
 805a834:	2b00      	cmp	r3, #0
 805a836:	d12f      	bne.n	805a898 <chdrv_prog_mem_write+0xcc>
      uint8_t opcode = (0x03 | ((nbytes == 1) ? 0x08 : 0x00));  // XXX need define
 805a838:	893b      	ldrh	r3, [r7, #8]
 805a83a:	2b01      	cmp	r3, #1
 805a83c:	d101      	bne.n	805a842 <chdrv_prog_mem_write+0x76>
 805a83e:	230b      	movs	r3, #11
 805a840:	e000      	b.n	805a844 <chdrv_prog_mem_write+0x78>
 805a842:	2303      	movs	r3, #3
 805a844:	747b      	strb	r3, [r7, #17]

      ch_err = chdrv_prog_write(dev_ptr, CH_PROG_REG_CTL, opcode);
 805a846:	7c7b      	ldrb	r3, [r7, #17]
 805a848:	b29b      	uxth	r3, r3
 805a84a:	461a      	mov	r2, r3
 805a84c:	2144      	movs	r1, #68	; 0x44
 805a84e:	68f8      	ldr	r0, [r7, #12]
 805a850:	f7ff ff92 	bl	805a778 <chdrv_prog_write>
 805a854:	6178      	str	r0, [r7, #20]
  if (nbytes == 1 || (nbytes == 2 && !(addr & 1))) {
 805a856:	e01f      	b.n	805a898 <chdrv_prog_mem_write+0xcc>
    }
  } else {
    static const uint8_t burst_hdr[2] = { 0xC4, 0x0B }; // XXX need define

    if (!ch_err) {
 805a858:	697b      	ldr	r3, [r7, #20]
 805a85a:	2b00      	cmp	r3, #0
 805a85c:	d108      	bne.n	805a870 <chdrv_prog_mem_write+0xa4>
      ch_err = chdrv_prog_write(dev_ptr, CH_PROG_REG_CNT, (nbytes - 1));
 805a85e:	893b      	ldrh	r3, [r7, #8]
 805a860:	3b01      	subs	r3, #1
 805a862:	b29b      	uxth	r3, r3
 805a864:	461a      	mov	r2, r3
 805a866:	2107      	movs	r1, #7
 805a868:	68f8      	ldr	r0, [r7, #12]
 805a86a:	f7ff ff85 	bl	805a778 <chdrv_prog_write>
 805a86e:	6178      	str	r0, [r7, #20]
    }
    if (!ch_err) {
 805a870:	697b      	ldr	r3, [r7, #20]
 805a872:	2b00      	cmp	r3, #0
 805a874:	d105      	bne.n	805a882 <chdrv_prog_mem_write+0xb6>
      ch_err =
          chdrv_prog_i2c_write(dev_ptr, (uint8_t *) burst_hdr,
 805a876:	2202      	movs	r2, #2
 805a878:	490a      	ldr	r1, [pc, #40]	; (805a8a4 <chdrv_prog_mem_write+0xd8>)
 805a87a:	68f8      	ldr	r0, [r7, #12]
 805a87c:	f7ff fd75 	bl	805a36a <chdrv_prog_i2c_write>
 805a880:	6178      	str	r0, [r7, #20]
                               sizeof(burst_hdr));
    }
    if (!ch_err) {
 805a882:	697b      	ldr	r3, [r7, #20]
 805a884:	2b00      	cmp	r3, #0
 805a886:	d108      	bne.n	805a89a <chdrv_prog_mem_write+0xce>
      ch_err = chdrv_prog_i2c_write(dev_ptr, message, nbytes);
 805a888:	893b      	ldrh	r3, [r7, #8]
 805a88a:	461a      	mov	r2, r3
 805a88c:	6879      	ldr	r1, [r7, #4]
 805a88e:	68f8      	ldr	r0, [r7, #12]
 805a890:	f7ff fd6b 	bl	805a36a <chdrv_prog_i2c_write>
 805a894:	6178      	str	r0, [r7, #20]
 805a896:	e000      	b.n	805a89a <chdrv_prog_mem_write+0xce>
  if (nbytes == 1 || (nbytes == 2 && !(addr & 1))) {
 805a898:	bf00      	nop
    }
  }
  return ch_err;
 805a89a:	697b      	ldr	r3, [r7, #20]
}
 805a89c:	4618      	mov	r0, r3
 805a89e:	3718      	adds	r7, #24
 805a8a0:	46bd      	mov	sp, r7
 805a8a2:	bd80      	pop	{r7, pc}
 805a8a4:	0807d2ac 	.word	0x0807d2ac

0805a8a8 <chdrv_prog_read>:
 *
 * This local function reads a value from a sensor programming register.
 */
static int chdrv_prog_read(ch_dev_t * dev_ptr, uint8_t reg_addr,
                           uint16_t * data)
{
 805a8a8:	b580      	push	{r7, lr}
 805a8aa:	b088      	sub	sp, #32
 805a8ac:	af00      	add	r7, sp, #0
 805a8ae:	60f8      	str	r0, [r7, #12]
 805a8b0:	460b      	mov	r3, r1
 805a8b2:	607a      	str	r2, [r7, #4]
 805a8b4:	72fb      	strb	r3, [r7, #11]
  uint8_t nbytes = CH_PROG_SIZEOF(reg_addr);
 805a8b6:	7afb      	ldrb	r3, [r7, #11]
 805a8b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 805a8bc:	2b00      	cmp	r3, #0
 805a8be:	d001      	beq.n	805a8c4 <chdrv_prog_read+0x1c>
 805a8c0:	2301      	movs	r3, #1
 805a8c2:	e000      	b.n	805a8c6 <chdrv_prog_read+0x1e>
 805a8c4:	2302      	movs	r3, #2
 805a8c6:	76fb      	strb	r3, [r7, #27]

  uint8_t read_data[2];
  uint8_t message[1] = { 0x7F & reg_addr };
 805a8c8:	7afb      	ldrb	r3, [r7, #11]
 805a8ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 805a8ce:	b2db      	uxtb	r3, r3
 805a8d0:	753b      	strb	r3, [r7, #20]

  int ch_err = chdrv_prog_i2c_write(dev_ptr, message, sizeof(message));
 805a8d2:	f107 0314 	add.w	r3, r7, #20
 805a8d6:	2201      	movs	r2, #1
 805a8d8:	4619      	mov	r1, r3
 805a8da:	68f8      	ldr	r0, [r7, #12]
 805a8dc:	f7ff fd45 	bl	805a36a <chdrv_prog_i2c_write>
 805a8e0:	61f8      	str	r0, [r7, #28]

  if (!ch_err) {
 805a8e2:	69fb      	ldr	r3, [r7, #28]
 805a8e4:	2b00      	cmp	r3, #0
 805a8e6:	d108      	bne.n	805a8fa <chdrv_prog_read+0x52>
    ch_err = chdrv_prog_i2c_read(dev_ptr, read_data, nbytes);
 805a8e8:	7efb      	ldrb	r3, [r7, #27]
 805a8ea:	b29a      	uxth	r2, r3
 805a8ec:	f107 0318 	add.w	r3, r7, #24
 805a8f0:	4619      	mov	r1, r3
 805a8f2:	68f8      	ldr	r0, [r7, #12]
 805a8f4:	f7ff fd53 	bl	805a39e <chdrv_prog_i2c_read>
 805a8f8:	61f8      	str	r0, [r7, #28]
  }

  if (!ch_err) {
 805a8fa:	69fb      	ldr	r3, [r7, #28]
 805a8fc:	2b00      	cmp	r3, #0
 805a8fe:	d111      	bne.n	805a924 <chdrv_prog_read+0x7c>
    *data = read_data[0];
 805a900:	7e3b      	ldrb	r3, [r7, #24]
 805a902:	b29a      	uxth	r2, r3
 805a904:	687b      	ldr	r3, [r7, #4]
 805a906:	801a      	strh	r2, [r3, #0]
    if (nbytes > 1) {
 805a908:	7efb      	ldrb	r3, [r7, #27]
 805a90a:	2b01      	cmp	r3, #1
 805a90c:	d90a      	bls.n	805a924 <chdrv_prog_read+0x7c>
      *data |= (((uint16_t) read_data[1]) << 8);
 805a90e:	687b      	ldr	r3, [r7, #4]
 805a910:	881b      	ldrh	r3, [r3, #0]
 805a912:	b21a      	sxth	r2, r3
 805a914:	7e7b      	ldrb	r3, [r7, #25]
 805a916:	021b      	lsls	r3, r3, #8
 805a918:	b21b      	sxth	r3, r3
 805a91a:	4313      	orrs	r3, r2
 805a91c:	b21b      	sxth	r3, r3
 805a91e:	b29a      	uxth	r2, r3
 805a920:	687b      	ldr	r3, [r7, #4]
 805a922:	801a      	strh	r2, [r3, #0]
    }
  }

  return ch_err;
 805a924:	69fb      	ldr	r3, [r7, #28]
}
 805a926:	4618      	mov	r0, r3
 805a928:	3720      	adds	r7, #32
 805a92a:	46bd      	mov	sp, r7
 805a92c:	bd80      	pop	{r7, pc}

0805a92e <chdrv_write_firmware>:
 * This local function writes the sensor firmware image to the device.
 */
/*!
 */
static int chdrv_write_firmware(ch_dev_t * dev_ptr)
{
 805a92e:	b580      	push	{r7, lr}
 805a930:	b084      	sub	sp, #16
 805a932:	af00      	add	r7, sp, #0
 805a934:	6078      	str	r0, [r7, #4]
  ch_fw_load_func_t func_ptr = dev_ptr->api_funcs.fw_load;      // pointer to firmware load function
 805a936:	687b      	ldr	r3, [r7, #4]
 805a938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 805a93a:	60bb      	str	r3, [r7, #8]
  int ch_err = ((func_ptr == NULL) || (!dev_ptr->sensor_connected));
 805a93c:	68bb      	ldr	r3, [r7, #8]
 805a93e:	2b00      	cmp	r3, #0
 805a940:	d003      	beq.n	805a94a <chdrv_write_firmware+0x1c>
 805a942:	687b      	ldr	r3, [r7, #4]
 805a944:	7fdb      	ldrb	r3, [r3, #31]
 805a946:	2b00      	cmp	r3, #0
 805a948:	d101      	bne.n	805a94e <chdrv_write_firmware+0x20>
 805a94a:	2301      	movs	r3, #1
 805a94c:	e000      	b.n	805a950 <chdrv_write_firmware+0x22>
 805a94e:	2300      	movs	r3, #0
 805a950:	60fb      	str	r3, [r7, #12]
  if (!ch_err) {
    chbsp_print_str("chdrv_write_firmware\n");
  }
#endif

  if (!ch_err) {
 805a952:	68fb      	ldr	r3, [r7, #12]
 805a954:	2b00      	cmp	r3, #0
 805a956:	d10a      	bne.n	805a96e <chdrv_write_firmware+0x40>
#ifdef CHDRV_DEBUG
    chbsp_print_str("Programming Chirp sensor...\n");
    prog_time = chbsp_timestamp_ms();
#endif
    if (func_ptr != NULL) {
 805a958:	68bb      	ldr	r3, [r7, #8]
 805a95a:	2b00      	cmp	r3, #0
 805a95c:	d005      	beq.n	805a96a <chdrv_write_firmware+0x3c>
      ch_err = (*func_ptr) (dev_ptr);
 805a95e:	68bb      	ldr	r3, [r7, #8]
 805a960:	6878      	ldr	r0, [r7, #4]
 805a962:	4798      	blx	r3
 805a964:	4603      	mov	r3, r0
 805a966:	60fb      	str	r3, [r7, #12]
 805a968:	e001      	b.n	805a96e <chdrv_write_firmware+0x40>
    } else {
      ch_err = 1;               // indicate error
 805a96a:	2301      	movs	r3, #1
 805a96c:	60fb      	str	r3, [r7, #12]
             prog_time);
    chbsp_print_str(cbuf);
  }
#endif

  return ch_err;
 805a96e:	68fb      	ldr	r3, [r7, #12]
}
 805a970:	4618      	mov	r0, r3
 805a972:	3710      	adds	r7, #16
 805a974:	46bd      	mov	sp, r7
 805a976:	bd80      	pop	{r7, pc}

0805a978 <chdrv_init_ram>:
 * \return 0 if memory write succeeded, non-zero otherwise
 *
 * This local function initializes memory locations in the Chirp sensor, as required by the firmware image.
 */
static int chdrv_init_ram(ch_dev_t * dev_ptr)
{
 805a978:	b580      	push	{r7, lr}
 805a97a:	b084      	sub	sp, #16
 805a97c:	af00      	add	r7, sp, #0
 805a97e:	6078      	str	r0, [r7, #4]
  int ch_err = !dev_ptr || !dev_ptr->sensor_connected;
 805a980:	687b      	ldr	r3, [r7, #4]
 805a982:	2b00      	cmp	r3, #0
 805a984:	d003      	beq.n	805a98e <chdrv_init_ram+0x16>
 805a986:	687b      	ldr	r3, [r7, #4]
 805a988:	7fdb      	ldrb	r3, [r3, #31]
 805a98a:	2b00      	cmp	r3, #0
 805a98c:	d101      	bne.n	805a992 <chdrv_init_ram+0x1a>
 805a98e:	2301      	movs	r3, #1
 805a990:	e000      	b.n	805a994 <chdrv_init_ram+0x1c>
 805a992:	2300      	movs	r3, #0
 805a994:	60fb      	str	r3, [r7, #12]
  if (!ch_err) {
    chbsp_print_str("chdrv_init_ram\n");
  }
#endif

  if ((!ch_err) && (dev_ptr->get_fw_ram_init_size() != 0)) {    // if size is not zero, ram init data exists
 805a996:	68fb      	ldr	r3, [r7, #12]
 805a998:	2b00      	cmp	r3, #0
 805a99a:	d11a      	bne.n	805a9d2 <chdrv_init_ram+0x5a>
 805a99c:	687b      	ldr	r3, [r7, #4]
 805a99e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 805a9a0:	4798      	blx	r3
 805a9a2:	4603      	mov	r3, r0
 805a9a4:	2b00      	cmp	r3, #0
 805a9a6:	d014      	beq.n	805a9d2 <chdrv_init_ram+0x5a>
    uint16_t ram_address;
    uint16_t ram_bytecount;

    ram_address = dev_ptr->get_fw_ram_init_addr();
 805a9a8:	687b      	ldr	r3, [r7, #4]
 805a9aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 805a9ac:	4798      	blx	r3
 805a9ae:	4603      	mov	r3, r0
 805a9b0:	817b      	strh	r3, [r7, #10]
    ram_bytecount = dev_ptr->get_fw_ram_init_size();
 805a9b2:	687b      	ldr	r3, [r7, #4]
 805a9b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 805a9b6:	4798      	blx	r3
 805a9b8:	4603      	mov	r3, r0
 805a9ba:	813b      	strh	r3, [r7, #8]

    if (!ch_err) {
 805a9bc:	68fb      	ldr	r3, [r7, #12]
 805a9be:	2b00      	cmp	r3, #0
 805a9c0:	d107      	bne.n	805a9d2 <chdrv_init_ram+0x5a>
      chbsp_print_str("Loading RAM init data...\n");
      prog_time = chbsp_timestamp_ms();
#endif
      ch_err =
          chdrv_prog_mem_write(dev_ptr, ram_address,
                               (uint8_t *) dev_ptr->ram_init, ram_bytecount);
 805a9c2:	687b      	ldr	r3, [r7, #4]
 805a9c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
          chdrv_prog_mem_write(dev_ptr, ram_address,
 805a9c6:	893b      	ldrh	r3, [r7, #8]
 805a9c8:	8979      	ldrh	r1, [r7, #10]
 805a9ca:	6878      	ldr	r0, [r7, #4]
 805a9cc:	f7ff fefe 	bl	805a7cc <chdrv_prog_mem_write>
 805a9d0:	60f8      	str	r0, [r7, #12]
        chbsp_print_str(cbuf);
      }
#endif
    }
  }
  return ch_err;
 805a9d2:	68fb      	ldr	r3, [r7, #12]
}
 805a9d4:	4618      	mov	r0, r3
 805a9d6:	3710      	adds	r7, #16
 805a9d8:	46bd      	mov	sp, r7
 805a9da:	bd80      	pop	{r7, pc}

0805a9dc <chdrv_reset_and_halt>:
 * This function resets and halts a sensor device by writing to the control registers.
 *
 * In order for the device to respond, the PROG pin for the device must be asserted before this function is called. 
 */
static int chdrv_reset_and_halt(ch_dev_t * dev_ptr)
{
 805a9dc:	b580      	push	{r7, lr}
 805a9de:	b084      	sub	sp, #16
 805a9e0:	af00      	add	r7, sp, #0
 805a9e2:	6078      	str	r0, [r7, #4]
  int ch_err = chdrv_prog_write(dev_ptr, CH_PROG_REG_CPU, 0x40);        // reset asic                   // XXX need define
 805a9e4:	2240      	movs	r2, #64	; 0x40
 805a9e6:	2142      	movs	r1, #66	; 0x42
 805a9e8:	6878      	ldr	r0, [r7, #4]
 805a9ea:	f7ff fec5 	bl	805a778 <chdrv_prog_write>
 805a9ee:	60f8      	str	r0, [r7, #12]

  ch_err |= chdrv_prog_write(dev_ptr, CH_PROG_REG_CPU, 0x11);   // halt asic and disable watchdog;                      // XXX need define
 805a9f0:	2211      	movs	r2, #17
 805a9f2:	2142      	movs	r1, #66	; 0x42
 805a9f4:	6878      	ldr	r0, [r7, #4]
 805a9f6:	f7ff febf 	bl	805a778 <chdrv_prog_write>
 805a9fa:	4602      	mov	r2, r0
 805a9fc:	68fb      	ldr	r3, [r7, #12]
 805a9fe:	4313      	orrs	r3, r2
 805aa00:	60fb      	str	r3, [r7, #12]

  return ch_err;
 805aa02:	68fb      	ldr	r3, [r7, #12]
}
 805aa04:	4618      	mov	r0, r3
 805aa06:	3710      	adds	r7, #16
 805aa08:	46bd      	mov	sp, r7
 805aa0a:	bd80      	pop	{r7, pc}

0805aa0c <chdrv_prog_ping>:
 * the programming interface I2C address (0x45). 
 *
 * In order for the device to respond, the PROG pin for the device must be asserted before this function is called. 
 */
int chdrv_prog_ping(ch_dev_t * dev_ptr)
{
 805aa0c:	b580      	push	{r7, lr}
 805aa0e:	b084      	sub	sp, #16
 805aa10:	af00      	add	r7, sp, #0
 805aa12:	6078      	str	r0, [r7, #4]
  // Try a dummy write to the sensor to make sure it's connected and working
  uint16_t tmp;
  int ch_err;

  ch_err = chdrv_reset_and_halt(dev_ptr);
 805aa14:	6878      	ldr	r0, [r7, #4]
 805aa16:	f7ff ffe1 	bl	805a9dc <chdrv_reset_and_halt>
 805aa1a:	60f8      	str	r0, [r7, #12]

  ch_err |= chdrv_prog_read(dev_ptr, CH_PROG_REG_PING, &tmp);
 805aa1c:	f107 030a 	add.w	r3, r7, #10
 805aa20:	461a      	mov	r2, r3
 805aa22:	2100      	movs	r1, #0
 805aa24:	6878      	ldr	r0, [r7, #4]
 805aa26:	f7ff ff3f 	bl	805a8a8 <chdrv_prog_read>
 805aa2a:	4602      	mov	r2, r0
 805aa2c:	68fb      	ldr	r3, [r7, #12]
 805aa2e:	4313      	orrs	r3, r2
 805aa30:	60fb      	str	r3, [r7, #12]
    snprintf(cbuf, sizeof(cbuf), "Test I2C read: %04X\n", tmp);
    chbsp_print_str(cbuf);
  }
#endif

  return !(ch_err);
 805aa32:	68fb      	ldr	r3, [r7, #12]
 805aa34:	2b00      	cmp	r3, #0
 805aa36:	bf0c      	ite	eq
 805aa38:	2301      	moveq	r3, #1
 805aa3a:	2300      	movne	r3, #0
 805aa3c:	b2db      	uxtb	r3, r3
}
 805aa3e:	4618      	mov	r0, r3
 805aa40:	3710      	adds	r7, #16
 805aa42:	46bd      	mov	sp, r7
 805aa44:	bd80      	pop	{r7, pc}

0805aa46 <chdrv_detect_and_program>:
 * function may be used to wait for this sequence to complete.
 *
 * \note This routine will leave the PROG pin de-asserted when it completes.
 */
int chdrv_detect_and_program(ch_dev_t * dev_ptr)
{
 805aa46:	b580      	push	{r7, lr}
 805aa48:	b086      	sub	sp, #24
 805aa4a:	af00      	add	r7, sp, #0
 805aa4c:	6078      	str	r0, [r7, #4]
  int ch_err = !dev_ptr;
 805aa4e:	687b      	ldr	r3, [r7, #4]
 805aa50:	2b00      	cmp	r3, #0
 805aa52:	bf0c      	ite	eq
 805aa54:	2301      	moveq	r3, #1
 805aa56:	2300      	movne	r3, #0
 805aa58:	b2db      	uxtb	r3, r3
 805aa5a:	617b      	str	r3, [r7, #20]
  if (ch_err) {
 805aa5c:	697b      	ldr	r3, [r7, #20]
 805aa5e:	2b00      	cmp	r3, #0
 805aa60:	d001      	beq.n	805aa66 <chdrv_detect_and_program+0x20>
    return ch_err;
 805aa62:	697b      	ldr	r3, [r7, #20]
 805aa64:	e08c      	b.n	805ab80 <chdrv_detect_and_program+0x13a>
  }

  chbsp_program_enable(dev_ptr);        // assert PROG pin
 805aa66:	6878      	ldr	r0, [r7, #4]
 805aa68:	f7e8 fca2 	bl	80433b0 <chbsp_program_enable>

  if (chdrv_prog_ping(dev_ptr)) {       // if device found
 805aa6c:	6878      	ldr	r0, [r7, #4]
 805aa6e:	f7ff ffcd 	bl	805aa0c <chdrv_prog_ping>
 805aa72:	4603      	mov	r3, r0
 805aa74:	2b00      	cmp	r3, #0
 805aa76:	d06d      	beq.n	805ab54 <chdrv_detect_and_program+0x10e>
    dev_ptr->sensor_connected = 1;
 805aa78:	687b      	ldr	r3, [r7, #4]
 805aa7a:	2201      	movs	r2, #1
 805aa7c:	77da      	strb	r2, [r3, #31]

    // Call device discovery hook routine, if any
    chdrv_discovery_hook_t hook_ptr = dev_ptr->group->disco_hook;
 805aa7e:	687b      	ldr	r3, [r7, #4]
 805aa80:	681b      	ldr	r3, [r3, #0]
 805aa82:	689b      	ldr	r3, [r3, #8]
 805aa84:	613b      	str	r3, [r7, #16]
    if (hook_ptr != NULL) {
 805aa86:	693b      	ldr	r3, [r7, #16]
 805aa88:	2b00      	cmp	r3, #0
 805aa8a:	d004      	beq.n	805aa96 <chdrv_detect_and_program+0x50>
      ch_err = (*hook_ptr) (dev_ptr);   // hook routine can return error, will abort device init
 805aa8c:	693b      	ldr	r3, [r7, #16]
 805aa8e:	6878      	ldr	r0, [r7, #4]
 805aa90:	4798      	blx	r3
 805aa92:	4603      	mov	r3, r0
 805aa94:	617b      	str	r3, [r7, #20]
      snprintf(cbuf, sizeof(cbuf), "PROG_STAT: 0x%02X\n", prog_stat);
      chbsp_print_str(cbuf);
    }
#endif

    ch_err = chdrv_init_ram(dev_ptr) || // init ram values
 805aa96:	6878      	ldr	r0, [r7, #4]
 805aa98:	f7ff ff6e 	bl	805a978 <chdrv_init_ram>
 805aa9c:	4603      	mov	r3, r0
        chdrv_write_firmware(dev_ptr) ||        // transfer program
 805aa9e:	2b00      	cmp	r3, #0
 805aaa0:	d10b      	bne.n	805aaba <chdrv_detect_and_program+0x74>
 805aaa2:	6878      	ldr	r0, [r7, #4]
 805aaa4:	f7ff ff43 	bl	805a92e <chdrv_write_firmware>
 805aaa8:	4603      	mov	r3, r0
    ch_err = chdrv_init_ram(dev_ptr) || // init ram values
 805aaaa:	2b00      	cmp	r3, #0
 805aaac:	d105      	bne.n	805aaba <chdrv_detect_and_program+0x74>
        chdrv_reset_and_halt(dev_ptr);  // reset asic, since it was running mystery code before halt
 805aaae:	6878      	ldr	r0, [r7, #4]
 805aab0:	f7ff ff94 	bl	805a9dc <chdrv_reset_and_halt>
 805aab4:	4603      	mov	r3, r0
        chdrv_write_firmware(dev_ptr) ||        // transfer program
 805aab6:	2b00      	cmp	r3, #0
 805aab8:	d001      	beq.n	805aabe <chdrv_detect_and_program+0x78>
 805aaba:	2301      	movs	r3, #1
 805aabc:	e000      	b.n	805aac0 <chdrv_detect_and_program+0x7a>
 805aabe:	2300      	movs	r3, #0
    ch_err = chdrv_init_ram(dev_ptr) || // init ram values
 805aac0:	617b      	str	r3, [r7, #20]
               dev_ptr->i2c_address);
      chbsp_print_str(cbuf);
    }
#endif

    if (!ch_err) {
 805aac2:	697b      	ldr	r3, [r7, #20]
 805aac4:	2b00      	cmp	r3, #0
 805aac6:	d109      	bne.n	805aadc <chdrv_detect_and_program+0x96>
      ch_err = chdrv_prog_mem_write(dev_ptr, 0x01C5, &dev_ptr->i2c_address, 1); // XXX need define
 805aac8:	687b      	ldr	r3, [r7, #4]
 805aaca:	f103 0218 	add.w	r2, r3, #24
 805aace:	2301      	movs	r3, #1
 805aad0:	f240 11c5 	movw	r1, #453	; 0x1c5
 805aad4:	6878      	ldr	r0, [r7, #4]
 805aad6:	f7ff fe79 	bl	805a7cc <chdrv_prog_mem_write>
 805aada:	6178      	str	r0, [r7, #20]
    }

    /* Run charge pumps */
    if (!ch_err) {
 805aadc:	697b      	ldr	r3, [r7, #20]
 805aade:	2b00      	cmp	r3, #0
 805aae0:	d12e      	bne.n	805ab40 <chdrv_detect_and_program+0xfa>
      uint16_t write_val;
      write_val = 0x0200;       // XXX need defines
 805aae2:	f44f 7300 	mov.w	r3, #512	; 0x200
 805aae6:	81fb      	strh	r3, [r7, #14]
      ch_err |= chdrv_prog_mem_write(dev_ptr, 0x01A6, (uint8_t *) & write_val, 2);      // PMUT.CNTRL4 = HVVSS_FON
 805aae8:	f107 020e 	add.w	r2, r7, #14
 805aaec:	2302      	movs	r3, #2
 805aaee:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 805aaf2:	6878      	ldr	r0, [r7, #4]
 805aaf4:	f7ff fe6a 	bl	805a7cc <chdrv_prog_mem_write>
 805aaf8:	4602      	mov	r2, r0
 805aafa:	697b      	ldr	r3, [r7, #20]
 805aafc:	4313      	orrs	r3, r2
 805aafe:	617b      	str	r3, [r7, #20]
      chbsp_delay_ms(5);
 805ab00:	2005      	movs	r0, #5
 805ab02:	f7e8 fec9 	bl	8043898 <chbsp_delay_ms>
      write_val = 0x0600;
 805ab06:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 805ab0a:	81fb      	strh	r3, [r7, #14]
      ch_err = chdrv_prog_mem_write(dev_ptr, 0x01A6, (uint8_t *) & write_val, 2);       // PMUT.CNTRL4 = (HVVSS_FON | HVVDD_FON)
 805ab0c:	f107 020e 	add.w	r2, r7, #14
 805ab10:	2302      	movs	r3, #2
 805ab12:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 805ab16:	6878      	ldr	r0, [r7, #4]
 805ab18:	f7ff fe58 	bl	805a7cc <chdrv_prog_mem_write>
 805ab1c:	6178      	str	r0, [r7, #20]
      chbsp_delay_ms(5);
 805ab1e:	2005      	movs	r0, #5
 805ab20:	f7e8 feba 	bl	8043898 <chbsp_delay_ms>
      write_val = 0x0000;
 805ab24:	2300      	movs	r3, #0
 805ab26:	81fb      	strh	r3, [r7, #14]
      ch_err |= chdrv_prog_mem_write(dev_ptr, 0x01A6, (uint8_t *) & write_val, 2);      // PMUT.CNTRL4 = 0
 805ab28:	f107 020e 	add.w	r2, r7, #14
 805ab2c:	2302      	movs	r3, #2
 805ab2e:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 805ab32:	6878      	ldr	r0, [r7, #4]
 805ab34:	f7ff fe4a 	bl	805a7cc <chdrv_prog_mem_write>
 805ab38:	4602      	mov	r2, r0
 805ab3a:	697b      	ldr	r3, [r7, #20]
 805ab3c:	4313      	orrs	r3, r2
 805ab3e:	617b      	str	r3, [r7, #20]
    }

    if (!ch_err) {
 805ab40:	697b      	ldr	r3, [r7, #20]
 805ab42:	2b00      	cmp	r3, #0
 805ab44:	d109      	bne.n	805ab5a <chdrv_detect_and_program+0x114>
      ch_err = chdrv_prog_write(dev_ptr, CH_PROG_REG_CPU, 2);   // Exit programming mode and run the chip
 805ab46:	2202      	movs	r2, #2
 805ab48:	2142      	movs	r1, #66	; 0x42
 805ab4a:	6878      	ldr	r0, [r7, #4]
 805ab4c:	f7ff fe14 	bl	805a778 <chdrv_prog_write>
 805ab50:	6178      	str	r0, [r7, #20]
 805ab52:	e002      	b.n	805ab5a <chdrv_detect_and_program+0x114>
    }
  } else {
    dev_ptr->sensor_connected = 0;      // prog_ping failed - no device found
 805ab54:	687b      	ldr	r3, [r7, #4]
 805ab56:	2200      	movs	r2, #0
 805ab58:	77da      	strb	r2, [r3, #31]
  }

  chbsp_program_disable(dev_ptr);       // de-assert PROG pin
 805ab5a:	6878      	ldr	r0, [r7, #4]
 805ab5c:	f7e8 fc46 	bl	80433ec <chbsp_program_disable>

  if (ch_err) {                 // if error, reinitialize I2C bus associated with this device
 805ab60:	697b      	ldr	r3, [r7, #20]
 805ab62:	2b00      	cmp	r3, #0
 805ab64:	d005      	beq.n	805ab72 <chdrv_detect_and_program+0x12c>
    chbsp_debug_toggle(CHDRV_DEBUG_PIN_NUM);
 805ab66:	2000      	movs	r0, #0
 805ab68:	f7e8 ffee 	bl	8043b48 <chbsp_debug_toggle>
    chbsp_i2c_reset(dev_ptr);
 805ab6c:	6878      	ldr	r0, [r7, #4]
 805ab6e:	f7e8 fff7 	bl	8043b60 <chbsp_i2c_reset>
  }

  if (ch_err) {
 805ab72:	697b      	ldr	r3, [r7, #20]
 805ab74:	2b00      	cmp	r3, #0
 805ab76:	d002      	beq.n	805ab7e <chdrv_detect_and_program+0x138>
    dev_ptr->sensor_connected = 0;      // only marked as connected if no errors
 805ab78:	687b      	ldr	r3, [r7, #4]
 805ab7a:	2200      	movs	r2, #0
 805ab7c:	77da      	strb	r2, [r3, #31]
  }

  return ch_err;
 805ab7e:	697b      	ldr	r3, [r7, #20]
}
 805ab80:	4618      	mov	r0, r3
 805ab82:	3718      	adds	r7, #24
 805ab84:	46bd      	mov	sp, r7
 805ab86:	bd80      	pop	{r7, pc}

0805ab88 <chdrv_set_idle>:
 *
 * \note This routine writes to all devices simultaneously, so I2C signalling (i.e. ack's) on the bus may be driven by multiple
 * slaves at once.
 */
int chdrv_set_idle(ch_dev_t * dev_ptr)
{
 805ab88:	b580      	push	{r7, lr}
 805ab8a:	b084      	sub	sp, #16
 805ab8c:	af00      	add	r7, sp, #0
 805ab8e:	6078      	str	r0, [r7, #4]
  static const uint16_t idle_loop[2] = { 0x4003, 0xFFFC };      // XXX need define

  int ch_err =
      chdrv_prog_mem_write(dev_ptr, 0xFFFC, (uint8_t *) & idle_loop[0],
 805ab90:	2304      	movs	r3, #4
 805ab92:	4a11      	ldr	r2, [pc, #68]	; (805abd8 <chdrv_set_idle+0x50>)
 805ab94:	f64f 71fc 	movw	r1, #65532	; 0xfffc
 805ab98:	6878      	ldr	r0, [r7, #4]
 805ab9a:	f7ff fe17 	bl	805a7cc <chdrv_prog_mem_write>
 805ab9e:	60f8      	str	r0, [r7, #12]
                           sizeof(idle_loop));
  if (!ch_err) {
 805aba0:	68fb      	ldr	r3, [r7, #12]
 805aba2:	2b00      	cmp	r3, #0
 805aba4:	d103      	bne.n	805abae <chdrv_set_idle+0x26>
    ch_err = chdrv_reset_and_halt(dev_ptr);
 805aba6:	6878      	ldr	r0, [r7, #4]
 805aba8:	f7ff ff18 	bl	805a9dc <chdrv_reset_and_halt>
 805abac:	60f8      	str	r0, [r7, #12]
  }
  // keep wdt stopped after we exit programming mode
  uint16_t val = 0x5a80;        // XXX need define
 805abae:	f44f 43b5 	mov.w	r3, #23168	; 0x5a80
 805abb2:	817b      	strh	r3, [r7, #10]
  if (!ch_err) {
 805abb4:	68fb      	ldr	r3, [r7, #12]
 805abb6:	2b00      	cmp	r3, #0
 805abb8:	d108      	bne.n	805abcc <chdrv_set_idle+0x44>
    ch_err = chdrv_prog_mem_write(dev_ptr, 0x0120, (uint8_t *) & val, sizeof(val));     // XXX need define
 805abba:	f107 020a 	add.w	r2, r7, #10
 805abbe:	2302      	movs	r3, #2
 805abc0:	f44f 7190 	mov.w	r1, #288	; 0x120
 805abc4:	6878      	ldr	r0, [r7, #4]
 805abc6:	f7ff fe01 	bl	805a7cc <chdrv_prog_mem_write>
 805abca:	60f8      	str	r0, [r7, #12]
  }

  return ch_err;
 805abcc:	68fb      	ldr	r3, [r7, #12]
}
 805abce:	4618      	mov	r0, r3
 805abd0:	3710      	adds	r7, #16
 805abd2:	46bd      	mov	sp, r7
 805abd4:	bd80      	pop	{r7, pc}
 805abd6:	bf00      	nop
 805abd8:	0807d2b0 	.word	0x0807d2b0

0805abdc <chdrv_group_detect_and_program>:
 * \a chdrv_group_wait_for_lock() function may be used to wait for this sequence to complete on all devices in the group.
 *
 * \note This routine will leave the PROG pin de-asserted for all devices in the group when it completes.
 */
int chdrv_group_detect_and_program(ch_group_t * grp_ptr)
{
 805abdc:	b580      	push	{r7, lr}
 805abde:	b086      	sub	sp, #24
 805abe0:	af00      	add	r7, sp, #0
 805abe2:	6078      	str	r0, [r7, #4]
  int ch_err = 0;
 805abe4:	2300      	movs	r3, #0
 805abe6:	617b      	str	r3, [r7, #20]

  for (uint8_t i = 0; i < grp_ptr->num_ports; i++) {
 805abe8:	2300      	movs	r3, #0
 805abea:	74fb      	strb	r3, [r7, #19]
 805abec:	e01d      	b.n	805ac2a <chdrv_group_detect_and_program+0x4e>
    ch_dev_t *dev_ptr = grp_ptr->device[i];
 805abee:	7cfb      	ldrb	r3, [r7, #19]
 805abf0:	687a      	ldr	r2, [r7, #4]
 805abf2:	3304      	adds	r3, #4
 805abf4:	009b      	lsls	r3, r3, #2
 805abf6:	4413      	add	r3, r2
 805abf8:	685b      	ldr	r3, [r3, #4]
 805abfa:	60fb      	str	r3, [r7, #12]

    ch_err = chdrv_detect_and_program(dev_ptr);
 805abfc:	68f8      	ldr	r0, [r7, #12]
 805abfe:	f7ff ff22 	bl	805aa46 <chdrv_detect_and_program>
 805ac02:	6178      	str	r0, [r7, #20]

    if (!ch_err && dev_ptr->sensor_connected) {
 805ac04:	697b      	ldr	r3, [r7, #20]
 805ac06:	2b00      	cmp	r3, #0
 805ac08:	d109      	bne.n	805ac1e <chdrv_group_detect_and_program+0x42>
 805ac0a:	68fb      	ldr	r3, [r7, #12]
 805ac0c:	7fdb      	ldrb	r3, [r3, #31]
 805ac0e:	2b00      	cmp	r3, #0
 805ac10:	d005      	beq.n	805ac1e <chdrv_group_detect_and_program+0x42>
      grp_ptr->sensor_count++;
 805ac12:	687b      	ldr	r3, [r7, #4]
 805ac14:	789b      	ldrb	r3, [r3, #2]
 805ac16:	3301      	adds	r3, #1
 805ac18:	b2da      	uxtb	r2, r3
 805ac1a:	687b      	ldr	r3, [r7, #4]
 805ac1c:	709a      	strb	r2, [r3, #2]
    }

    if (ch_err) {
 805ac1e:	697b      	ldr	r3, [r7, #20]
 805ac20:	2b00      	cmp	r3, #0
 805ac22:	d108      	bne.n	805ac36 <chdrv_group_detect_and_program+0x5a>
  for (uint8_t i = 0; i < grp_ptr->num_ports; i++) {
 805ac24:	7cfb      	ldrb	r3, [r7, #19]
 805ac26:	3301      	adds	r3, #1
 805ac28:	74fb      	strb	r3, [r7, #19]
 805ac2a:	687b      	ldr	r3, [r7, #4]
 805ac2c:	781b      	ldrb	r3, [r3, #0]
 805ac2e:	7cfa      	ldrb	r2, [r7, #19]
 805ac30:	429a      	cmp	r2, r3
 805ac32:	d3dc      	bcc.n	805abee <chdrv_group_detect_and_program+0x12>
 805ac34:	e000      	b.n	805ac38 <chdrv_group_detect_and_program+0x5c>
      break;
 805ac36:	bf00      	nop
    }
  }
  return ch_err;
 805ac38:	697b      	ldr	r3, [r7, #20]
}
 805ac3a:	4618      	mov	r0, r3
 805ac3c:	3718      	adds	r7, #24
 805ac3e:	46bd      	mov	sp, r7
 805ac40:	bd80      	pop	{r7, pc}

0805ac42 <chdrv_group_prepare>:
 * \return 0 if hardware initialization is successful, non-zero otherwise
 *
 * This function is called internally by \a chdrv_group_start().
 */
int chdrv_group_prepare(ch_group_t * grp_ptr)
{
 805ac42:	b580      	push	{r7, lr}
 805ac44:	b084      	sub	sp, #16
 805ac46:	af00      	add	r7, sp, #0
 805ac48:	6078      	str	r0, [r7, #4]
  int ch_err = !grp_ptr;
 805ac4a:	687b      	ldr	r3, [r7, #4]
 805ac4c:	2b00      	cmp	r3, #0
 805ac4e:	bf0c      	ite	eq
 805ac50:	2301      	moveq	r3, #1
 805ac52:	2300      	movne	r3, #0
 805ac54:	b2db      	uxtb	r3, r3
 805ac56:	60fb      	str	r3, [r7, #12]
  uint8_t i;

  if (!ch_err) {
 805ac58:	68fb      	ldr	r3, [r7, #12]
 805ac5a:	2b00      	cmp	r3, #0
 805ac5c:	d13b      	bne.n	805acd6 <chdrv_group_prepare+0x94>
    grp_ptr->sensor_count = 0;
 805ac5e:	687b      	ldr	r3, [r7, #4]
 805ac60:	2200      	movs	r2, #0
 805ac62:	709a      	strb	r2, [r3, #2]

    for (i = 0; i < grp_ptr->num_i2c_buses; i++) {
 805ac64:	2300      	movs	r3, #0
 805ac66:	72fb      	strb	r3, [r7, #11]
 805ac68:	e02a      	b.n	805acc0 <chdrv_group_prepare+0x7e>
      grp_ptr->i2c_queue[i].len = 0;
 805ac6a:	7afa      	ldrb	r2, [r7, #11]
 805ac6c:	6879      	ldr	r1, [r7, #4]
 805ac6e:	4613      	mov	r3, r2
 805ac70:	009b      	lsls	r3, r3, #2
 805ac72:	4413      	add	r3, r2
 805ac74:	009b      	lsls	r3, r3, #2
 805ac76:	440b      	add	r3, r1
 805ac78:	331e      	adds	r3, #30
 805ac7a:	2200      	movs	r2, #0
 805ac7c:	701a      	strb	r2, [r3, #0]
      grp_ptr->i2c_queue[i].idx = 0;
 805ac7e:	7afa      	ldrb	r2, [r7, #11]
 805ac80:	6879      	ldr	r1, [r7, #4]
 805ac82:	4613      	mov	r3, r2
 805ac84:	009b      	lsls	r3, r3, #2
 805ac86:	4413      	add	r3, r2
 805ac88:	009b      	lsls	r3, r3, #2
 805ac8a:	440b      	add	r3, r1
 805ac8c:	331f      	adds	r3, #31
 805ac8e:	2200      	movs	r2, #0
 805ac90:	701a      	strb	r2, [r3, #0]
      grp_ptr->i2c_queue[i].read_pending = 0;
 805ac92:	7afa      	ldrb	r2, [r7, #11]
 805ac94:	6879      	ldr	r1, [r7, #4]
 805ac96:	4613      	mov	r3, r2
 805ac98:	009b      	lsls	r3, r3, #2
 805ac9a:	4413      	add	r3, r2
 805ac9c:	009b      	lsls	r3, r3, #2
 805ac9e:	440b      	add	r3, r1
 805aca0:	331c      	adds	r3, #28
 805aca2:	2200      	movs	r2, #0
 805aca4:	701a      	strb	r2, [r3, #0]
      grp_ptr->i2c_queue[i].running = 0;
 805aca6:	7afa      	ldrb	r2, [r7, #11]
 805aca8:	6879      	ldr	r1, [r7, #4]
 805acaa:	4613      	mov	r3, r2
 805acac:	009b      	lsls	r3, r3, #2
 805acae:	4413      	add	r3, r2
 805acb0:	009b      	lsls	r3, r3, #2
 805acb2:	440b      	add	r3, r1
 805acb4:	331d      	adds	r3, #29
 805acb6:	2200      	movs	r2, #0
 805acb8:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < grp_ptr->num_i2c_buses; i++) {
 805acba:	7afb      	ldrb	r3, [r7, #11]
 805acbc:	3301      	adds	r3, #1
 805acbe:	72fb      	strb	r3, [r7, #11]
 805acc0:	687b      	ldr	r3, [r7, #4]
 805acc2:	785b      	ldrb	r3, [r3, #1]
 805acc4:	7afa      	ldrb	r2, [r7, #11]
 805acc6:	429a      	cmp	r2, r3
 805acc8:	d3cf      	bcc.n	805ac6a <chdrv_group_prepare+0x28>
    }

    chbsp_group_pin_init(grp_ptr);
 805acca:	6878      	ldr	r0, [r7, #4]
 805accc:	f7e8 fc04 	bl	80434d8 <chbsp_group_pin_init>

    ch_err = chbsp_i2c_init();
 805acd0:	f7e8 fdee 	bl	80438b0 <chbsp_i2c_init>
 805acd4:	60f8      	str	r0, [r7, #12]
  }

  return ch_err;
 805acd6:	68fb      	ldr	r3, [r7, #12]
}
 805acd8:	4618      	mov	r0, r3
 805acda:	3710      	adds	r7, #16
 805acdc:	46bd      	mov	sp, r7
 805acde:	bd80      	pop	{r7, pc}

0805ace0 <chdrv_group_start>:
 * This function assumes firmware-specific initialization has already been performed for each a ch_dev_t
 * descriptor for each sensor in the group.  See \a ch_init().
 */
#define CH_PROG_XFER_RETRY 4
int chdrv_group_start(ch_group_t * grp_ptr)
{
 805ace0:	b580      	push	{r7, lr}
 805ace2:	b08a      	sub	sp, #40	; 0x28
 805ace4:	af00      	add	r7, sp, #0
 805ace6:	6078      	str	r0, [r7, #4]
  int ch_err = !grp_ptr;
 805ace8:	687b      	ldr	r3, [r7, #4]
 805acea:	2b00      	cmp	r3, #0
 805acec:	bf0c      	ite	eq
 805acee:	2301      	moveq	r3, #1
 805acf0:	2300      	movne	r3, #0
 805acf2:	b2db      	uxtb	r3, r3
 805acf4:	627b      	str	r3, [r7, #36]	; 0x24
  int i;
  uint8_t prog_tries = 0;
 805acf6:	2300      	movs	r3, #0
 805acf8:	77fb      	strb	r3, [r7, #31]
  uint8_t i;
  char cbuf[80];
  const uint32_t start_time = chbsp_timestamp_ms();
#endif

  if (!ch_err) {
 805acfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 805acfc:	2b00      	cmp	r3, #0
 805acfe:	d103      	bne.n	805ad08 <chdrv_group_start+0x28>
    ch_err = chdrv_group_prepare(grp_ptr);
 805ad00:	6878      	ldr	r0, [r7, #4]
 805ad02:	f7ff ff9e 	bl	805ac42 <chdrv_group_prepare>
 805ad06:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ch_err) {
 805ad08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 805ad0a:	2b00      	cmp	r3, #0
 805ad0c:	d001      	beq.n	805ad12 <chdrv_group_start+0x32>
    return ch_err;
 805ad0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 805ad10:	e0af      	b.n	805ae72 <chdrv_group_start+0x192>
  }

RESET_AND_LOAD:
 805ad12:	bf00      	nop
  do {
    chbsp_reset_assert();
 805ad14:	f7e8 fb34 	bl	8043380 <chbsp_reset_assert>
    for (i = 0; i < grp_ptr->num_ports; i++) {
 805ad18:	2300      	movs	r3, #0
 805ad1a:	623b      	str	r3, [r7, #32]
 805ad1c:	e00b      	b.n	805ad36 <chdrv_group_start+0x56>
      chbsp_program_enable(grp_ptr->device[i]);
 805ad1e:	687a      	ldr	r2, [r7, #4]
 805ad20:	6a3b      	ldr	r3, [r7, #32]
 805ad22:	3304      	adds	r3, #4
 805ad24:	009b      	lsls	r3, r3, #2
 805ad26:	4413      	add	r3, r2
 805ad28:	685b      	ldr	r3, [r3, #4]
 805ad2a:	4618      	mov	r0, r3
 805ad2c:	f7e8 fb40 	bl	80433b0 <chbsp_program_enable>
    for (i = 0; i < grp_ptr->num_ports; i++) {
 805ad30:	6a3b      	ldr	r3, [r7, #32]
 805ad32:	3301      	adds	r3, #1
 805ad34:	623b      	str	r3, [r7, #32]
 805ad36:	687b      	ldr	r3, [r7, #4]
 805ad38:	781b      	ldrb	r3, [r3, #0]
 805ad3a:	461a      	mov	r2, r3
 805ad3c:	6a3b      	ldr	r3, [r7, #32]
 805ad3e:	4293      	cmp	r3, r2
 805ad40:	dbed      	blt.n	805ad1e <chdrv_group_start+0x3e>
    }
    chbsp_delay_ms(1);
 805ad42:	2001      	movs	r0, #1
 805ad44:	f7e8 fda8 	bl	8043898 <chbsp_delay_ms>
    chbsp_reset_release();
 805ad48:	f7e8 fb26 	bl	8043398 <chbsp_reset_release>

    /* For every i2c bus, set the devices idle in parallel, then disable programming mode for all devices on that bus
     * This is kludgey because we don't have a great way of iterating over the i2c buses */
    ch_dev_t *c_prev = grp_ptr->device[0];
 805ad4c:	687b      	ldr	r3, [r7, #4]
 805ad4e:	695b      	ldr	r3, [r3, #20]
 805ad50:	61bb      	str	r3, [r7, #24]
    chdrv_set_idle(c_prev);
 805ad52:	69b8      	ldr	r0, [r7, #24]
 805ad54:	f7ff ff18 	bl	805ab88 <chdrv_set_idle>
    for (i = 0; i < grp_ptr->num_ports; i++) {
 805ad58:	2300      	movs	r3, #0
 805ad5a:	623b      	str	r3, [r7, #32]
 805ad5c:	e019      	b.n	805ad92 <chdrv_group_start+0xb2>
      ch_dev_t *c = grp_ptr->device[i];
 805ad5e:	687a      	ldr	r2, [r7, #4]
 805ad60:	6a3b      	ldr	r3, [r7, #32]
 805ad62:	3304      	adds	r3, #4
 805ad64:	009b      	lsls	r3, r3, #2
 805ad66:	4413      	add	r3, r2
 805ad68:	685b      	ldr	r3, [r3, #4]
 805ad6a:	60bb      	str	r3, [r7, #8]

      if (c->i2c_bus_index != c_prev->i2c_bus_index) {
 805ad6c:	68bb      	ldr	r3, [r7, #8]
 805ad6e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 805ad72:	69bb      	ldr	r3, [r7, #24]
 805ad74:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 805ad78:	429a      	cmp	r2, r3
 805ad7a:	d002      	beq.n	805ad82 <chdrv_group_start+0xa2>
        chdrv_set_idle(c);
 805ad7c:	68b8      	ldr	r0, [r7, #8]
 805ad7e:	f7ff ff03 	bl	805ab88 <chdrv_set_idle>
      }

      chbsp_program_disable(c);
 805ad82:	68b8      	ldr	r0, [r7, #8]
 805ad84:	f7e8 fb32 	bl	80433ec <chbsp_program_disable>
      c_prev = c;
 805ad88:	68bb      	ldr	r3, [r7, #8]
 805ad8a:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < grp_ptr->num_ports; i++) {
 805ad8c:	6a3b      	ldr	r3, [r7, #32]
 805ad8e:	3301      	adds	r3, #1
 805ad90:	623b      	str	r3, [r7, #32]
 805ad92:	687b      	ldr	r3, [r7, #4]
 805ad94:	781b      	ldrb	r3, [r3, #0]
 805ad96:	461a      	mov	r2, r3
 805ad98:	6a3b      	ldr	r3, [r7, #32]
 805ad9a:	4293      	cmp	r3, r2
 805ad9c:	dbdf      	blt.n	805ad5e <chdrv_group_start+0x7e>
    }

    ch_err = chdrv_group_detect_and_program(grp_ptr);
 805ad9e:	6878      	ldr	r0, [r7, #4]
 805ada0:	f7ff ff1c 	bl	805abdc <chdrv_group_detect_and_program>
 805ada4:	6278      	str	r0, [r7, #36]	; 0x24

  } while (ch_err && prog_tries++ < CH_PROG_XFER_RETRY);
 805ada6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 805ada8:	2b00      	cmp	r3, #0
 805adaa:	d004      	beq.n	805adb6 <chdrv_group_start+0xd6>
 805adac:	7ffb      	ldrb	r3, [r7, #31]
 805adae:	1c5a      	adds	r2, r3, #1
 805adb0:	77fa      	strb	r2, [r7, #31]
 805adb2:	2b03      	cmp	r3, #3
 805adb4:	d9ad      	bls.n	805ad12 <chdrv_group_start+0x32>

  if (!ch_err) {
 805adb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 805adb8:	2b00      	cmp	r3, #0
 805adba:	d107      	bne.n	805adcc <chdrv_group_start+0xec>
    ch_err = (grp_ptr->sensor_count == 0);
 805adbc:	687b      	ldr	r3, [r7, #4]
 805adbe:	789b      	ldrb	r3, [r3, #2]
 805adc0:	2b00      	cmp	r3, #0
 805adc2:	bf0c      	ite	eq
 805adc4:	2301      	moveq	r3, #1
 805adc6:	2300      	movne	r3, #0
 805adc8:	b2db      	uxtb	r3, r3
 805adca:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
#endif
  }

  if (!ch_err) {
 805adcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 805adce:	2b00      	cmp	r3, #0
 805add0:	d10c      	bne.n	805adec <chdrv_group_start+0x10c>
    ch_err = chdrv_group_wait_for_lock(grp_ptr);
 805add2:	6878      	ldr	r0, [r7, #4]
 805add4:	f7ff fc7c 	bl	805a6d0 <chdrv_group_wait_for_lock>
 805add8:	6278      	str	r0, [r7, #36]	; 0x24
    if (ch_err && prog_tries++ < CH_PROG_XFER_RETRY + 1) {
 805adda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 805addc:	2b00      	cmp	r3, #0
 805adde:	d005      	beq.n	805adec <chdrv_group_start+0x10c>
 805ade0:	7ffb      	ldrb	r3, [r7, #31]
 805ade2:	1c5a      	adds	r2, r3, #1
 805ade4:	77fa      	strb	r2, [r7, #31]
 805ade6:	2b04      	cmp	r3, #4
 805ade8:	d800      	bhi.n	805adec <chdrv_group_start+0x10c>
      goto RESET_AND_LOAD;
 805adea:	e793      	b.n	805ad14 <chdrv_group_start+0x34>
    }
  }

  if (!ch_err) {
 805adec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 805adee:	2b00      	cmp	r3, #0
 805adf0:	d105      	bne.n	805adfe <chdrv_group_start+0x11e>
    snprintf(cbuf, sizeof(cbuf), "Frequency locked, %lu ms\n",
             chbsp_timestamp_ms() - start_time);
    chbsp_print_str(cbuf);
#endif

    chbsp_delay_ms(1);
 805adf2:	2001      	movs	r0, #1
 805adf4:	f7e8 fd50 	bl	8043898 <chbsp_delay_ms>

    chdrv_group_measure_rtc(grp_ptr);
 805adf8:	6878      	ldr	r0, [r7, #4]
 805adfa:	f7ff fb5b 	bl	805a4b4 <chdrv_group_measure_rtc>
    }
#endif
  }

  /* Put counts of connected devices per bus in group struct */
  for (int bus_num = 0; bus_num < grp_ptr->num_i2c_buses; bus_num++) {
 805adfe:	2300      	movs	r3, #0
 805ae00:	617b      	str	r3, [r7, #20]
 805ae02:	e008      	b.n	805ae16 <chdrv_group_start+0x136>
    grp_ptr->num_connected[bus_num] = 0;        // init all counts
 805ae04:	687a      	ldr	r2, [r7, #4]
 805ae06:	697b      	ldr	r3, [r7, #20]
 805ae08:	4413      	add	r3, r2
 805ae0a:	3318      	adds	r3, #24
 805ae0c:	2200      	movs	r2, #0
 805ae0e:	701a      	strb	r2, [r3, #0]
  for (int bus_num = 0; bus_num < grp_ptr->num_i2c_buses; bus_num++) {
 805ae10:	697b      	ldr	r3, [r7, #20]
 805ae12:	3301      	adds	r3, #1
 805ae14:	617b      	str	r3, [r7, #20]
 805ae16:	687b      	ldr	r3, [r7, #4]
 805ae18:	785b      	ldrb	r3, [r3, #1]
 805ae1a:	461a      	mov	r2, r3
 805ae1c:	697b      	ldr	r3, [r7, #20]
 805ae1e:	4293      	cmp	r3, r2
 805ae20:	dbf0      	blt.n	805ae04 <chdrv_group_start+0x124>
  }

  for (int dev_num = 0; dev_num < grp_ptr->num_ports; dev_num++) {
 805ae22:	2300      	movs	r3, #0
 805ae24:	613b      	str	r3, [r7, #16]
 805ae26:	e01d      	b.n	805ae64 <chdrv_group_start+0x184>
    ch_dev_t *dev_ptr = grp_ptr->device[dev_num];
 805ae28:	687a      	ldr	r2, [r7, #4]
 805ae2a:	693b      	ldr	r3, [r7, #16]
 805ae2c:	3304      	adds	r3, #4
 805ae2e:	009b      	lsls	r3, r3, #2
 805ae30:	4413      	add	r3, r2
 805ae32:	685b      	ldr	r3, [r3, #4]
 805ae34:	60fb      	str	r3, [r7, #12]

    if (dev_ptr->sensor_connected) {
 805ae36:	68fb      	ldr	r3, [r7, #12]
 805ae38:	7fdb      	ldrb	r3, [r3, #31]
 805ae3a:	2b00      	cmp	r3, #0
 805ae3c:	d00f      	beq.n	805ae5e <chdrv_group_start+0x17e>
      grp_ptr->num_connected[dev_ptr->i2c_bus_index] += 1;      // count one more on this bus
 805ae3e:	68fb      	ldr	r3, [r7, #12]
 805ae40:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 805ae44:	461a      	mov	r2, r3
 805ae46:	687b      	ldr	r3, [r7, #4]
 805ae48:	4413      	add	r3, r2
 805ae4a:	7e1b      	ldrb	r3, [r3, #24]
 805ae4c:	68fa      	ldr	r2, [r7, #12]
 805ae4e:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 805ae52:	4611      	mov	r1, r2
 805ae54:	3301      	adds	r3, #1
 805ae56:	b2da      	uxtb	r2, r3
 805ae58:	687b      	ldr	r3, [r7, #4]
 805ae5a:	440b      	add	r3, r1
 805ae5c:	761a      	strb	r2, [r3, #24]
  for (int dev_num = 0; dev_num < grp_ptr->num_ports; dev_num++) {
 805ae5e:	693b      	ldr	r3, [r7, #16]
 805ae60:	3301      	adds	r3, #1
 805ae62:	613b      	str	r3, [r7, #16]
 805ae64:	687b      	ldr	r3, [r7, #4]
 805ae66:	781b      	ldrb	r3, [r3, #0]
 805ae68:	461a      	mov	r2, r3
 805ae6a:	693b      	ldr	r3, [r7, #16]
 805ae6c:	4293      	cmp	r3, r2
 805ae6e:	dbdb      	blt.n	805ae28 <chdrv_group_start+0x148>
    }
  }

  return ch_err;
 805ae70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 805ae72:	4618      	mov	r0, r3
 805ae74:	3728      	adds	r7, #40	; 0x28
 805ae76:	46bd      	mov	sp, r7
 805ae78:	bd80      	pop	{r7, pc}

0805ae7a <chbsp_timestamp_ms>:
  (void)(str);
}

__attribute__ ((weak))
uint32_t chbsp_timestamp_ms()
{
 805ae7a:	b480      	push	{r7}
 805ae7c:	af00      	add	r7, sp, #0
  return 0;
 805ae7e:	2300      	movs	r3, #0
}
 805ae80:	4618      	mov	r0, r3
 805ae82:	46bd      	mov	sp, r7
 805ae84:	f85d 7b04 	ldr.w	r7, [sp], #4
 805ae88:	4770      	bx	lr

0805ae8a <vl53l5_decode_calibration_data>:
 805ae8a:	b580      	push	{r7, lr}
 805ae8c:	b086      	sub	sp, #24
 805ae8e:	af00      	add	r7, sp, #0
 805ae90:	60f8      	str	r0, [r7, #12]
 805ae92:	60b9      	str	r1, [r7, #8]
 805ae94:	607a      	str	r2, [r7, #4]
 805ae96:	603b      	str	r3, [r7, #0]
 805ae98:	2300      	movs	r3, #0
 805ae9a:	617b      	str	r3, [r7, #20]
 805ae9c:	68fb      	ldr	r3, [r7, #12]
 805ae9e:	2b00      	cmp	r3, #0
 805aea0:	d103      	bne.n	805aeaa <vl53l5_decode_calibration_data+0x20>
 805aea2:	f06f 0303 	mvn.w	r3, #3
 805aea6:	617b      	str	r3, [r7, #20]
 805aea8:	e01e      	b.n	805aee8 <vl53l5_decode_calibration_data+0x5e>
 805aeaa:	68bb      	ldr	r3, [r7, #8]
 805aeac:	2b00      	cmp	r3, #0
 805aeae:	d103      	bne.n	805aeb8 <vl53l5_decode_calibration_data+0x2e>
 805aeb0:	f06f 0303 	mvn.w	r3, #3
 805aeb4:	617b      	str	r3, [r7, #20]
 805aeb6:	e017      	b.n	805aee8 <vl53l5_decode_calibration_data+0x5e>
 805aeb8:	68fb      	ldr	r3, [r7, #12]
 805aeba:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 805aebe:	2b00      	cmp	r3, #0
 805aec0:	d001      	beq.n	805aec6 <vl53l5_decode_calibration_data+0x3c>
 805aec2:	2300      	movs	r3, #0
 805aec4:	e001      	b.n	805aeca <vl53l5_decode_calibration_data+0x40>
 805aec6:	f06f 0362 	mvn.w	r3, #98	; 0x62
 805aeca:	617b      	str	r3, [r7, #20]
 805aecc:	697b      	ldr	r3, [r7, #20]
 805aece:	2b00      	cmp	r3, #0
 805aed0:	db09      	blt.n	805aee6 <vl53l5_decode_calibration_data+0x5c>
 805aed2:	68ba      	ldr	r2, [r7, #8]
 805aed4:	68fb      	ldr	r3, [r7, #12]
 805aed6:	655a      	str	r2, [r3, #84]	; 0x54
 805aed8:	683a      	ldr	r2, [r7, #0]
 805aeda:	6879      	ldr	r1, [r7, #4]
 805aedc:	68f8      	ldr	r0, [r7, #12]
 805aede:	f002 fb50 	bl	805d582 <vl53l5_dci_decode_data>
 805aee2:	6178      	str	r0, [r7, #20]
 805aee4:	e000      	b.n	805aee8 <vl53l5_decode_calibration_data+0x5e>
 805aee6:	bf00      	nop
 805aee8:	68fb      	ldr	r3, [r7, #12]
 805aeea:	2b00      	cmp	r3, #0
 805aeec:	d002      	beq.n	805aef4 <vl53l5_decode_calibration_data+0x6a>
 805aeee:	68fb      	ldr	r3, [r7, #12]
 805aef0:	2200      	movs	r2, #0
 805aef2:	655a      	str	r2, [r3, #84]	; 0x54
 805aef4:	697b      	ldr	r3, [r7, #20]
 805aef6:	4618      	mov	r0, r3
 805aef8:	3718      	adds	r7, #24
 805aefa:	46bd      	mov	sp, r7
 805aefc:	bd80      	pop	{r7, pc}

0805aefe <_check_flags_consistent>:
 805aefe:	b480      	push	{r7}
 805af00:	b085      	sub	sp, #20
 805af02:	af00      	add	r7, sp, #0
 805af04:	6078      	str	r0, [r7, #4]
 805af06:	2300      	movs	r3, #0
 805af08:	60fb      	str	r3, [r7, #12]
 805af0a:	687b      	ldr	r3, [r7, #4]
 805af0c:	781b      	ldrb	r3, [r3, #0]
 805af0e:	f003 0302 	and.w	r3, r3, #2
 805af12:	b2db      	uxtb	r3, r3
 805af14:	2b00      	cmp	r3, #0
 805af16:	d009      	beq.n	805af2c <_check_flags_consistent+0x2e>
 805af18:	687b      	ldr	r3, [r7, #4]
 805af1a:	781b      	ldrb	r3, [r3, #0]
 805af1c:	f003 0301 	and.w	r3, r3, #1
 805af20:	b2db      	uxtb	r3, r3
 805af22:	2b00      	cmp	r3, #0
 805af24:	d002      	beq.n	805af2c <_check_flags_consistent+0x2e>
 805af26:	f06f 0303 	mvn.w	r3, #3
 805af2a:	60fb      	str	r3, [r7, #12]
 805af2c:	68fb      	ldr	r3, [r7, #12]
 805af2e:	4618      	mov	r0, r3
 805af30:	3714      	adds	r7, #20
 805af32:	46bd      	mov	sp, r7
 805af34:	f85d 7b04 	ldr.w	r7, [sp], #4
 805af38:	4770      	bx	lr

0805af3a <_write_byte>:
 805af3a:	b580      	push	{r7, lr}
 805af3c:	b082      	sub	sp, #8
 805af3e:	af00      	add	r7, sp, #0
 805af40:	6078      	str	r0, [r7, #4]
 805af42:	460b      	mov	r3, r1
 805af44:	807b      	strh	r3, [r7, #2]
 805af46:	4613      	mov	r3, r2
 805af48:	707b      	strb	r3, [r7, #1]
 805af4a:	1c7a      	adds	r2, r7, #1
 805af4c:	8879      	ldrh	r1, [r7, #2]
 805af4e:	2301      	movs	r3, #1
 805af50:	6878      	ldr	r0, [r7, #4]
 805af52:	f003 fdb0 	bl	805eab6 <vl53l5_write_multi>
 805af56:	4603      	mov	r3, r0
 805af58:	4618      	mov	r0, r3
 805af5a:	3708      	adds	r7, #8
 805af5c:	46bd      	mov	sp, r7
 805af5e:	bd80      	pop	{r7, pc}

0805af60 <_decode_start_range_return>:
 805af60:	b580      	push	{r7, lr}
 805af62:	b08a      	sub	sp, #40	; 0x28
 805af64:	af00      	add	r7, sp, #0
 805af66:	6078      	str	r0, [r7, #4]
 805af68:	2300      	movs	r3, #0
 805af6a:	627b      	str	r3, [r7, #36]	; 0x24
 805af6c:	2300      	movs	r3, #0
 805af6e:	623b      	str	r3, [r7, #32]
 805af70:	2300      	movs	r3, #0
 805af72:	61fb      	str	r3, [r7, #28]
 805af74:	f107 030c 	add.w	r3, r7, #12
 805af78:	2200      	movs	r2, #0
 805af7a:	601a      	str	r2, [r3, #0]
 805af7c:	605a      	str	r2, [r3, #4]
 805af7e:	609a      	str	r2, [r3, #8]
 805af80:	2310      	movs	r3, #16
 805af82:	61bb      	str	r3, [r7, #24]
 805af84:	687b      	ldr	r3, [r7, #4]
 805af86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 805af88:	623b      	str	r3, [r7, #32]
 805af8a:	6a3a      	ldr	r2, [r7, #32]
 805af8c:	69bb      	ldr	r3, [r7, #24]
 805af8e:	4413      	add	r3, r2
 805af90:	781b      	ldrb	r3, [r3, #0]
 805af92:	f003 030f 	and.w	r3, r3, #15
 805af96:	2b0f      	cmp	r3, #15
 805af98:	d003      	beq.n	805afa2 <_decode_start_range_return+0x42>
 805af9a:	f06f 0350 	mvn.w	r3, #80	; 0x50
 805af9e:	627b      	str	r3, [r7, #36]	; 0x24
 805afa0:	e055      	b.n	805b04e <_decode_start_range_return+0xee>
 805afa2:	6a39      	ldr	r1, [r7, #32]
 805afa4:	2004      	movs	r0, #4
 805afa6:	f002 ff7f 	bl	805dea8 <vl53l5_decode_uint32_t>
 805afaa:	61f8      	str	r0, [r7, #28]
 805afac:	69fb      	ldr	r3, [r7, #28]
 805afae:	4a2a      	ldr	r2, [pc, #168]	; (805b058 <_decode_start_range_return+0xf8>)
 805afb0:	4293      	cmp	r3, r2
 805afb2:	d003      	beq.n	805afbc <_decode_start_range_return+0x5c>
 805afb4:	f06f 0349 	mvn.w	r3, #73	; 0x49
 805afb8:	627b      	str	r3, [r7, #36]	; 0x24
 805afba:	e048      	b.n	805b04e <_decode_start_range_return+0xee>
 805afbc:	6a3b      	ldr	r3, [r7, #32]
 805afbe:	3304      	adds	r3, #4
 805afc0:	623b      	str	r3, [r7, #32]
 805afc2:	6a39      	ldr	r1, [r7, #32]
 805afc4:	2002      	movs	r0, #2
 805afc6:	f002 fed5 	bl	805dd74 <vl53l5_decode_uint16_t>
 805afca:	4603      	mov	r3, r0
 805afcc:	81bb      	strh	r3, [r7, #12]
 805afce:	6a3b      	ldr	r3, [r7, #32]
 805afd0:	3302      	adds	r3, #2
 805afd2:	623b      	str	r3, [r7, #32]
 805afd4:	6a39      	ldr	r1, [r7, #32]
 805afd6:	2002      	movs	r0, #2
 805afd8:	f002 fecc 	bl	805dd74 <vl53l5_decode_uint16_t>
 805afdc:	4603      	mov	r3, r0
 805afde:	81fb      	strh	r3, [r7, #14]
 805afe0:	6a3b      	ldr	r3, [r7, #32]
 805afe2:	3302      	adds	r3, #2
 805afe4:	623b      	str	r3, [r7, #32]
 805afe6:	6a39      	ldr	r1, [r7, #32]
 805afe8:	2002      	movs	r0, #2
 805afea:	f002 fec3 	bl	805dd74 <vl53l5_decode_uint16_t>
 805afee:	4603      	mov	r3, r0
 805aff0:	823b      	strh	r3, [r7, #16]
 805aff2:	6a3b      	ldr	r3, [r7, #32]
 805aff4:	3302      	adds	r3, #2
 805aff6:	623b      	str	r3, [r7, #32]
 805aff8:	6a39      	ldr	r1, [r7, #32]
 805affa:	2002      	movs	r0, #2
 805affc:	f002 feba 	bl	805dd74 <vl53l5_decode_uint16_t>
 805b000:	4603      	mov	r3, r0
 805b002:	827b      	strh	r3, [r7, #18]
 805b004:	6a3b      	ldr	r3, [r7, #32]
 805b006:	3302      	adds	r3, #2
 805b008:	623b      	str	r3, [r7, #32]
 805b00a:	6a39      	ldr	r1, [r7, #32]
 805b00c:	2002      	movs	r0, #2
 805b00e:	f002 feb1 	bl	805dd74 <vl53l5_decode_uint16_t>
 805b012:	4603      	mov	r3, r0
 805b014:	82bb      	strh	r3, [r7, #20]
 805b016:	6a3b      	ldr	r3, [r7, #32]
 805b018:	3302      	adds	r3, #2
 805b01a:	623b      	str	r3, [r7, #32]
 805b01c:	6a39      	ldr	r1, [r7, #32]
 805b01e:	2002      	movs	r0, #2
 805b020:	f002 fea8 	bl	805dd74 <vl53l5_decode_uint16_t>
 805b024:	4603      	mov	r3, r0
 805b026:	82fb      	strh	r3, [r7, #22]
 805b028:	8afa      	ldrh	r2, [r7, #22]
 805b02a:	687b      	ldr	r3, [r7, #4]
 805b02c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 805b030:	8a7b      	ldrh	r3, [r7, #18]
 805b032:	3304      	adds	r3, #4
 805b034:	b29a      	uxth	r2, r3
 805b036:	687b      	ldr	r3, [r7, #4]
 805b038:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 805b03c:	8aba      	ldrh	r2, [r7, #20]
 805b03e:	8a7b      	ldrh	r3, [r7, #18]
 805b040:	1ad3      	subs	r3, r2, r3
 805b042:	b29b      	uxth	r3, r3
 805b044:	3b04      	subs	r3, #4
 805b046:	b29a      	uxth	r2, r3
 805b048:	687b      	ldr	r3, [r7, #4]
 805b04a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
 805b04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 805b050:	4618      	mov	r0, r3
 805b052:	3728      	adds	r7, #40	; 0x28
 805b054:	46bd      	mov	sp, r7
 805b056:	bd80      	pop	{r7, pc}
 805b058:	544400c0 	.word	0x544400c0

0805b05c <_check_if_status_requires_handler>:
 805b05c:	b480      	push	{r7}
 805b05e:	b085      	sub	sp, #20
 805b060:	af00      	add	r7, sp, #0
 805b062:	6078      	str	r0, [r7, #4]
 805b064:	2300      	movs	r3, #0
 805b066:	73fb      	strb	r3, [r7, #15]
 805b068:	687b      	ldr	r3, [r7, #4]
 805b06a:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 805b06e:	da06      	bge.n	805b07e <_check_if_status_requires_handler+0x22>
 805b070:	687b      	ldr	r3, [r7, #4]
 805b072:	f1b3 4f7e 	cmp.w	r3, #4261412864	; 0xfe000000
 805b076:	dd02      	ble.n	805b07e <_check_if_status_requires_handler+0x22>
 805b078:	2300      	movs	r3, #0
 805b07a:	73fb      	strb	r3, [r7, #15]
 805b07c:	e019      	b.n	805b0b2 <_check_if_status_requires_handler+0x56>
 805b07e:	687b      	ldr	r3, [r7, #4]
 805b080:	f113 0f3c 	cmn.w	r3, #60	; 0x3c
 805b084:	dc06      	bgt.n	805b094 <_check_if_status_requires_handler+0x38>
 805b086:	f113 0f43 	cmn.w	r3, #67	; 0x43
 805b08a:	da0c      	bge.n	805b0a6 <_check_if_status_requires_handler+0x4a>
 805b08c:	f113 0f45 	cmn.w	r3, #69	; 0x45
 805b090:	d009      	beq.n	805b0a6 <_check_if_status_requires_handler+0x4a>
 805b092:	e00b      	b.n	805b0ac <_check_if_status_requires_handler+0x50>
 805b094:	f113 0f38 	cmn.w	r3, #56	; 0x38
 805b098:	db08      	blt.n	805b0ac <_check_if_status_requires_handler+0x50>
 805b09a:	f113 0f33 	cmn.w	r3, #51	; 0x33
 805b09e:	dd02      	ble.n	805b0a6 <_check_if_status_requires_handler+0x4a>
 805b0a0:	f113 0f07 	cmn.w	r3, #7
 805b0a4:	d102      	bne.n	805b0ac <_check_if_status_requires_handler+0x50>
 805b0a6:	2301      	movs	r3, #1
 805b0a8:	73fb      	strb	r3, [r7, #15]
 805b0aa:	e002      	b.n	805b0b2 <_check_if_status_requires_handler+0x56>
 805b0ac:	2300      	movs	r3, #0
 805b0ae:	73fb      	strb	r3, [r7, #15]
 805b0b0:	bf00      	nop
 805b0b2:	7bfb      	ldrb	r3, [r7, #15]
 805b0b4:	4618      	mov	r0, r3
 805b0b6:	3714      	adds	r7, #20
 805b0b8:	46bd      	mov	sp, r7
 805b0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 805b0be:	4770      	bx	lr

0805b0c0 <_get_error_go2_status>:
 805b0c0:	b580      	push	{r7, lr}
 805b0c2:	b08a      	sub	sp, #40	; 0x28
 805b0c4:	af02      	add	r7, sp, #8
 805b0c6:	6078      	str	r0, [r7, #4]
 805b0c8:	460b      	mov	r3, r1
 805b0ca:	70fb      	strb	r3, [r7, #3]
 805b0cc:	2300      	movs	r3, #0
 805b0ce:	61fb      	str	r3, [r7, #28]
 805b0d0:	f107 0310 	add.w	r3, r7, #16
 805b0d4:	2200      	movs	r2, #0
 805b0d6:	601a      	str	r2, [r3, #0]
 805b0d8:	605a      	str	r2, [r3, #4]
 805b0da:	609a      	str	r2, [r3, #8]
 805b0dc:	f107 0208 	add.w	r2, r7, #8
 805b0e0:	f107 010c 	add.w	r1, r7, #12
 805b0e4:	78fb      	ldrb	r3, [r7, #3]
 805b0e6:	9300      	str	r3, [sp, #0]
 805b0e8:	2300      	movs	r3, #0
 805b0ea:	6878      	ldr	r0, [r7, #4]
 805b0ec:	f001 f864 	bl	805c1b8 <vl53l5_check_status_registers>
 805b0f0:	61f8      	str	r0, [r7, #28]
 805b0f2:	69fb      	ldr	r3, [r7, #28]
 805b0f4:	2b00      	cmp	r3, #0
 805b0f6:	d15a      	bne.n	805b1ae <_get_error_go2_status+0xee>
 805b0f8:	7b3b      	ldrb	r3, [r7, #12]
 805b0fa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 805b0fe:	b2db      	uxtb	r3, r3
 805b100:	2b00      	cmp	r3, #0
 805b102:	d008      	beq.n	805b116 <_get_error_go2_status+0x56>
 805b104:	7a3b      	ldrb	r3, [r7, #8]
 805b106:	2b00      	cmp	r3, #0
 805b108:	d053      	beq.n	805b1b2 <_get_error_go2_status+0xf2>
 805b10a:	230f      	movs	r3, #15
 805b10c:	823b      	strh	r3, [r7, #16]
 805b10e:	7a3b      	ldrb	r3, [r7, #8]
 805b110:	b21b      	sxth	r3, r3
 805b112:	827b      	strh	r3, [r7, #18]
 805b114:	e040      	b.n	805b198 <_get_error_go2_status+0xd8>
 805b116:	7b3b      	ldrb	r3, [r7, #12]
 805b118:	f003 0308 	and.w	r3, r3, #8
 805b11c:	b2db      	uxtb	r3, r3
 805b11e:	2b00      	cmp	r3, #0
 805b120:	d105      	bne.n	805b12e <_get_error_go2_status+0x6e>
 805b122:	7a3b      	ldrb	r3, [r7, #8]
 805b124:	f003 0308 	and.w	r3, r3, #8
 805b128:	b2db      	uxtb	r3, r3
 805b12a:	2b00      	cmp	r3, #0
 805b12c:	d043      	beq.n	805b1b6 <_get_error_go2_status+0xf6>
 805b12e:	78fb      	ldrb	r3, [r7, #3]
 805b130:	2b02      	cmp	r3, #2
 805b132:	d007      	beq.n	805b144 <_get_error_go2_status+0x84>
 805b134:	2102      	movs	r1, #2
 805b136:	6878      	ldr	r0, [r7, #4]
 805b138:	f001 fd5c 	bl	805cbf4 <vl53l5_set_page>
 805b13c:	61f8      	str	r0, [r7, #28]
 805b13e:	69fb      	ldr	r3, [r7, #28]
 805b140:	2b00      	cmp	r3, #0
 805b142:	d13a      	bne.n	805b1ba <_get_error_go2_status+0xfa>
 805b144:	7a3b      	ldrb	r3, [r7, #8]
 805b146:	f003 0308 	and.w	r3, r3, #8
 805b14a:	b2db      	uxtb	r3, r3
 805b14c:	2b00      	cmp	r3, #0
 805b14e:	d007      	beq.n	805b160 <_get_error_go2_status+0xa0>
 805b150:	f107 0310 	add.w	r3, r7, #16
 805b154:	4619      	mov	r1, r3
 805b156:	6878      	ldr	r0, [r7, #4]
 805b158:	f001 f8fc 	bl	805c354 <vl53l5_get_secondary_warning_info>
 805b15c:	61f8      	str	r0, [r7, #28]
 805b15e:	e006      	b.n	805b16e <_get_error_go2_status+0xae>
 805b160:	f107 0310 	add.w	r3, r7, #16
 805b164:	4619      	mov	r1, r3
 805b166:	6878      	ldr	r0, [r7, #4]
 805b168:	f001 f8dc 	bl	805c324 <vl53l5_get_secondary_error_info>
 805b16c:	61f8      	str	r0, [r7, #28]
 805b16e:	78fb      	ldrb	r3, [r7, #3]
 805b170:	2b02      	cmp	r3, #2
 805b172:	d00e      	beq.n	805b192 <_get_error_go2_status+0xd2>
 805b174:	69fb      	ldr	r3, [r7, #28]
 805b176:	2b00      	cmp	r3, #0
 805b178:	d005      	beq.n	805b186 <_get_error_go2_status+0xc6>
 805b17a:	78fb      	ldrb	r3, [r7, #3]
 805b17c:	4619      	mov	r1, r3
 805b17e:	6878      	ldr	r0, [r7, #4]
 805b180:	f001 fd38 	bl	805cbf4 <vl53l5_set_page>
 805b184:	e005      	b.n	805b192 <_get_error_go2_status+0xd2>
 805b186:	78fb      	ldrb	r3, [r7, #3]
 805b188:	4619      	mov	r1, r3
 805b18a:	6878      	ldr	r0, [r7, #4]
 805b18c:	f001 fd32 	bl	805cbf4 <vl53l5_set_page>
 805b190:	61f8      	str	r0, [r7, #28]
 805b192:	69fb      	ldr	r3, [r7, #28]
 805b194:	2b00      	cmp	r3, #0
 805b196:	d112      	bne.n	805b1be <_get_error_go2_status+0xfe>
 805b198:	69fb      	ldr	r3, [r7, #28]
 805b19a:	2b00      	cmp	r3, #0
 805b19c:	d111      	bne.n	805b1c2 <_get_error_go2_status+0x102>
 805b19e:	f107 0310 	add.w	r3, r7, #16
 805b1a2:	4619      	mov	r1, r3
 805b1a4:	6878      	ldr	r0, [r7, #4]
 805b1a6:	f001 f8ed 	bl	805c384 <vl53l5_compose_fw_status_code>
 805b1aa:	61f8      	str	r0, [r7, #28]
 805b1ac:	e00a      	b.n	805b1c4 <_get_error_go2_status+0x104>
 805b1ae:	bf00      	nop
 805b1b0:	e008      	b.n	805b1c4 <_get_error_go2_status+0x104>
 805b1b2:	bf00      	nop
 805b1b4:	e006      	b.n	805b1c4 <_get_error_go2_status+0x104>
 805b1b6:	bf00      	nop
 805b1b8:	e004      	b.n	805b1c4 <_get_error_go2_status+0x104>
 805b1ba:	bf00      	nop
 805b1bc:	e002      	b.n	805b1c4 <_get_error_go2_status+0x104>
 805b1be:	bf00      	nop
 805b1c0:	e000      	b.n	805b1c4 <_get_error_go2_status+0x104>
 805b1c2:	bf00      	nop
 805b1c4:	69fb      	ldr	r3, [r7, #28]
 805b1c6:	4618      	mov	r0, r3
 805b1c8:	3720      	adds	r7, #32
 805b1ca:	46bd      	mov	sp, r7
 805b1cc:	bd80      	pop	{r7, pc}

0805b1ce <_get_dev_params>:
 805b1ce:	b580      	push	{r7, lr}
 805b1d0:	b086      	sub	sp, #24
 805b1d2:	af00      	add	r7, sp, #0
 805b1d4:	60f8      	str	r0, [r7, #12]
 805b1d6:	60b9      	str	r1, [r7, #8]
 805b1d8:	607a      	str	r2, [r7, #4]
 805b1da:	70fb      	strb	r3, [r7, #3]
 805b1dc:	2300      	movs	r3, #0
 805b1de:	617b      	str	r3, [r7, #20]
 805b1e0:	78fb      	ldrb	r3, [r7, #3]
 805b1e2:	687a      	ldr	r2, [r7, #4]
 805b1e4:	68b9      	ldr	r1, [r7, #8]
 805b1e6:	68f8      	ldr	r0, [r7, #12]
 805b1e8:	f000 fe7c 	bl	805bee4 <vl53l5_encode_block_headers>
 805b1ec:	6178      	str	r0, [r7, #20]
 805b1ee:	697b      	ldr	r3, [r7, #20]
 805b1f0:	2b00      	cmp	r3, #0
 805b1f2:	d105      	bne.n	805b200 <_get_dev_params+0x32>
 805b1f4:	2102      	movs	r1, #2
 805b1f6:	68f8      	ldr	r0, [r7, #12]
 805b1f8:	f000 fef6 	bl	805bfe8 <vl53l5_execute_command>
 805b1fc:	6178      	str	r0, [r7, #20]
 805b1fe:	e000      	b.n	805b202 <_get_dev_params+0x34>
 805b200:	bf00      	nop
 805b202:	697b      	ldr	r3, [r7, #20]
 805b204:	4618      	mov	r0, r3
 805b206:	3718      	adds	r7, #24
 805b208:	46bd      	mov	sp, r7
 805b20a:	bd80      	pop	{r7, pc}

0805b20c <_set_xshut_bypass>:
 805b20c:	b580      	push	{r7, lr}
 805b20e:	b084      	sub	sp, #16
 805b210:	af00      	add	r7, sp, #0
 805b212:	6078      	str	r0, [r7, #4]
 805b214:	460b      	mov	r3, r1
 805b216:	70fb      	strb	r3, [r7, #3]
 805b218:	2300      	movs	r3, #0
 805b21a:	60fb      	str	r3, [r7, #12]
 805b21c:	2100      	movs	r1, #0
 805b21e:	6878      	ldr	r0, [r7, #4]
 805b220:	f001 fce8 	bl	805cbf4 <vl53l5_set_page>
 805b224:	60f8      	str	r0, [r7, #12]
 805b226:	68fb      	ldr	r3, [r7, #12]
 805b228:	2b00      	cmp	r3, #0
 805b22a:	db13      	blt.n	805b254 <_set_xshut_bypass+0x48>
 805b22c:	78fb      	ldrb	r3, [r7, #3]
 805b22e:	4619      	mov	r1, r3
 805b230:	6878      	ldr	r0, [r7, #4]
 805b232:	f001 fd2d 	bl	805cc90 <vl53l5_set_xshut_bypass>
 805b236:	60f8      	str	r0, [r7, #12]
 805b238:	68fb      	ldr	r3, [r7, #12]
 805b23a:	2b00      	cmp	r3, #0
 805b23c:	da04      	bge.n	805b248 <_set_xshut_bypass+0x3c>
 805b23e:	2102      	movs	r1, #2
 805b240:	6878      	ldr	r0, [r7, #4]
 805b242:	f001 fcd7 	bl	805cbf4 <vl53l5_set_page>
 805b246:	e006      	b.n	805b256 <_set_xshut_bypass+0x4a>
 805b248:	2102      	movs	r1, #2
 805b24a:	6878      	ldr	r0, [r7, #4]
 805b24c:	f001 fcd2 	bl	805cbf4 <vl53l5_set_page>
 805b250:	60f8      	str	r0, [r7, #12]
 805b252:	e000      	b.n	805b256 <_set_xshut_bypass+0x4a>
 805b254:	bf00      	nop
 805b256:	68fb      	ldr	r3, [r7, #12]
 805b258:	4618      	mov	r0, r3
 805b25a:	3710      	adds	r7, #16
 805b25c:	46bd      	mov	sp, r7
 805b25e:	bd80      	pop	{r7, pc}

0805b260 <_provoke_mcu_error>:
 805b260:	b580      	push	{r7, lr}
 805b262:	b084      	sub	sp, #16
 805b264:	af00      	add	r7, sp, #0
 805b266:	6078      	str	r0, [r7, #4]
 805b268:	6039      	str	r1, [r7, #0]
 805b26a:	2300      	movs	r3, #0
 805b26c:	60fb      	str	r3, [r7, #12]
 805b26e:	2216      	movs	r2, #22
 805b270:	2115      	movs	r1, #21
 805b272:	6878      	ldr	r0, [r7, #4]
 805b274:	f7ff fe61 	bl	805af3a <_write_byte>
 805b278:	60f8      	str	r0, [r7, #12]
 805b27a:	68fb      	ldr	r3, [r7, #12]
 805b27c:	2b00      	cmp	r3, #0
 805b27e:	db20      	blt.n	805b2c2 <_provoke_mcu_error+0x62>
 805b280:	2201      	movs	r2, #1
 805b282:	2114      	movs	r1, #20
 805b284:	6878      	ldr	r0, [r7, #4]
 805b286:	f7ff fe58 	bl	805af3a <_write_byte>
 805b28a:	60f8      	str	r0, [r7, #12]
 805b28c:	68fb      	ldr	r3, [r7, #12]
 805b28e:	2b00      	cmp	r3, #0
 805b290:	db1c      	blt.n	805b2cc <_provoke_mcu_error+0x6c>
 805b292:	230a      	movs	r3, #10
 805b294:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 805b298:	2102      	movs	r1, #2
 805b29a:	6878      	ldr	r0, [r7, #4]
 805b29c:	f001 fd5b 	bl	805cd56 <vl53l5_wait_mcu_boot>
 805b2a0:	4602      	mov	r2, r0
 805b2a2:	683b      	ldr	r3, [r7, #0]
 805b2a4:	601a      	str	r2, [r3, #0]
 805b2a6:	683b      	ldr	r3, [r7, #0]
 805b2a8:	681b      	ldr	r3, [r3, #0]
 805b2aa:	2b00      	cmp	r3, #0
 805b2ac:	d10b      	bne.n	805b2c6 <_provoke_mcu_error+0x66>
 805b2ae:	f06f 0306 	mvn.w	r3, #6
 805b2b2:	60fb      	str	r3, [r7, #12]
 805b2b4:	bf00      	nop
 805b2b6:	2200      	movs	r2, #0
 805b2b8:	2114      	movs	r1, #20
 805b2ba:	6878      	ldr	r0, [r7, #4]
 805b2bc:	f7ff fe3d 	bl	805af3a <_write_byte>
 805b2c0:	e005      	b.n	805b2ce <_provoke_mcu_error+0x6e>
 805b2c2:	bf00      	nop
 805b2c4:	e000      	b.n	805b2c8 <_provoke_mcu_error+0x68>
 805b2c6:	bf00      	nop
 805b2c8:	68fb      	ldr	r3, [r7, #12]
 805b2ca:	e006      	b.n	805b2da <_provoke_mcu_error+0x7a>
 805b2cc:	bf00      	nop
 805b2ce:	2200      	movs	r2, #0
 805b2d0:	2115      	movs	r1, #21
 805b2d2:	6878      	ldr	r0, [r7, #4]
 805b2d4:	f7ff fe31 	bl	805af3a <_write_byte>
 805b2d8:	68fb      	ldr	r3, [r7, #12]
 805b2da:	4618      	mov	r0, r3
 805b2dc:	3710      	adds	r7, #16
 805b2de:	46bd      	mov	sp, r7
 805b2e0:	bd80      	pop	{r7, pc}

0805b2e2 <_undo_provoke_mcu_error>:
 805b2e2:	b580      	push	{r7, lr}
 805b2e4:	b084      	sub	sp, #16
 805b2e6:	af00      	add	r7, sp, #0
 805b2e8:	6078      	str	r0, [r7, #4]
 805b2ea:	2300      	movs	r3, #0
 805b2ec:	60fb      	str	r3, [r7, #12]
 805b2ee:	2200      	movs	r2, #0
 805b2f0:	2114      	movs	r1, #20
 805b2f2:	6878      	ldr	r0, [r7, #4]
 805b2f4:	f7ff fe21 	bl	805af3a <_write_byte>
 805b2f8:	60f8      	str	r0, [r7, #12]
 805b2fa:	68fb      	ldr	r3, [r7, #12]
 805b2fc:	2b00      	cmp	r3, #0
 805b2fe:	d005      	beq.n	805b30c <_undo_provoke_mcu_error+0x2a>
 805b300:	2200      	movs	r2, #0
 805b302:	2115      	movs	r1, #21
 805b304:	6878      	ldr	r0, [r7, #4]
 805b306:	f7ff fe18 	bl	805af3a <_write_byte>
 805b30a:	e005      	b.n	805b318 <_undo_provoke_mcu_error+0x36>
 805b30c:	2200      	movs	r2, #0
 805b30e:	2115      	movs	r1, #21
 805b310:	6878      	ldr	r0, [r7, #4]
 805b312:	f7ff fe12 	bl	805af3a <_write_byte>
 805b316:	60f8      	str	r0, [r7, #12]
 805b318:	68fb      	ldr	r3, [r7, #12]
 805b31a:	4618      	mov	r0, r3
 805b31c:	3710      	adds	r7, #16
 805b31e:	46bd      	mov	sp, r7
 805b320:	bd80      	pop	{r7, pc}
	...

0805b324 <_force_timed_mode_stop>:
 805b324:	b580      	push	{r7, lr}
 805b326:	b086      	sub	sp, #24
 805b328:	af00      	add	r7, sp, #0
 805b32a:	6078      	str	r0, [r7, #4]
 805b32c:	2300      	movs	r3, #0
 805b32e:	617b      	str	r3, [r7, #20]
 805b330:	2300      	movs	r3, #0
 805b332:	60fb      	str	r3, [r7, #12]
 805b334:	4b2d      	ldr	r3, [pc, #180]	; (805b3ec <_force_timed_mode_stop+0xc8>)
 805b336:	613b      	str	r3, [r7, #16]
 805b338:	2100      	movs	r1, #0
 805b33a:	6878      	ldr	r0, [r7, #4]
 805b33c:	f001 fc5a 	bl	805cbf4 <vl53l5_set_page>
 805b340:	6178      	str	r0, [r7, #20]
 805b342:	697b      	ldr	r3, [r7, #20]
 805b344:	2b00      	cmp	r3, #0
 805b346:	d14b      	bne.n	805b3e0 <_force_timed_mode_stop+0xbc>
 805b348:	f107 030c 	add.w	r3, r7, #12
 805b34c:	4619      	mov	r1, r3
 805b34e:	6878      	ldr	r0, [r7, #4]
 805b350:	f7ff ff86 	bl	805b260 <_provoke_mcu_error>
 805b354:	6178      	str	r0, [r7, #20]
 805b356:	697b      	ldr	r3, [r7, #20]
 805b358:	2b00      	cmp	r3, #0
 805b35a:	d125      	bne.n	805b3a8 <_force_timed_mode_stop+0x84>
 805b35c:	68fb      	ldr	r3, [r7, #12]
 805b35e:	4618      	mov	r0, r3
 805b360:	f7ff fe7c 	bl	805b05c <_check_if_status_requires_handler>
 805b364:	4603      	mov	r3, r0
 805b366:	f083 0301 	eor.w	r3, r3, #1
 805b36a:	b2db      	uxtb	r3, r3
 805b36c:	2b00      	cmp	r3, #0
 805b36e:	d002      	beq.n	805b376 <_force_timed_mode_stop+0x52>
 805b370:	68fb      	ldr	r3, [r7, #12]
 805b372:	617b      	str	r3, [r7, #20]
 805b374:	e00c      	b.n	805b390 <_force_timed_mode_stop+0x6c>
 805b376:	2100      	movs	r1, #0
 805b378:	6878      	ldr	r0, [r7, #4]
 805b37a:	f7ff fea1 	bl	805b0c0 <_get_error_go2_status>
 805b37e:	6178      	str	r0, [r7, #20]
 805b380:	697a      	ldr	r2, [r7, #20]
 805b382:	693b      	ldr	r3, [r7, #16]
 805b384:	429a      	cmp	r2, r3
 805b386:	d102      	bne.n	805b38e <_force_timed_mode_stop+0x6a>
 805b388:	2300      	movs	r3, #0
 805b38a:	617b      	str	r3, [r7, #20]
 805b38c:	e000      	b.n	805b390 <_force_timed_mode_stop+0x6c>
 805b38e:	bf00      	nop
 805b390:	697b      	ldr	r3, [r7, #20]
 805b392:	2b00      	cmp	r3, #0
 805b394:	d003      	beq.n	805b39e <_force_timed_mode_stop+0x7a>
 805b396:	6878      	ldr	r0, [r7, #4]
 805b398:	f7ff ffa3 	bl	805b2e2 <_undo_provoke_mcu_error>
 805b39c:	e005      	b.n	805b3aa <_force_timed_mode_stop+0x86>
 805b39e:	6878      	ldr	r0, [r7, #4]
 805b3a0:	f7ff ff9f 	bl	805b2e2 <_undo_provoke_mcu_error>
 805b3a4:	6178      	str	r0, [r7, #20]
 805b3a6:	e000      	b.n	805b3aa <_force_timed_mode_stop+0x86>
 805b3a8:	bf00      	nop
 805b3aa:	697b      	ldr	r3, [r7, #20]
 805b3ac:	2b00      	cmp	r3, #0
 805b3ae:	d004      	beq.n	805b3ba <_force_timed_mode_stop+0x96>
 805b3b0:	2100      	movs	r1, #0
 805b3b2:	6878      	ldr	r0, [r7, #4]
 805b3b4:	f001 fc6c 	bl	805cc90 <vl53l5_set_xshut_bypass>
 805b3b8:	e004      	b.n	805b3c4 <_force_timed_mode_stop+0xa0>
 805b3ba:	2100      	movs	r1, #0
 805b3bc:	6878      	ldr	r0, [r7, #4]
 805b3be:	f001 fc67 	bl	805cc90 <vl53l5_set_xshut_bypass>
 805b3c2:	6178      	str	r0, [r7, #20]
 805b3c4:	697b      	ldr	r3, [r7, #20]
 805b3c6:	2b00      	cmp	r3, #0
 805b3c8:	d004      	beq.n	805b3d4 <_force_timed_mode_stop+0xb0>
 805b3ca:	2102      	movs	r1, #2
 805b3cc:	6878      	ldr	r0, [r7, #4]
 805b3ce:	f001 fc11 	bl	805cbf4 <vl53l5_set_page>
 805b3d2:	e006      	b.n	805b3e2 <_force_timed_mode_stop+0xbe>
 805b3d4:	2102      	movs	r1, #2
 805b3d6:	6878      	ldr	r0, [r7, #4]
 805b3d8:	f001 fc0c 	bl	805cbf4 <vl53l5_set_page>
 805b3dc:	6178      	str	r0, [r7, #20]
 805b3de:	e000      	b.n	805b3e2 <_force_timed_mode_stop+0xbe>
 805b3e0:	bf00      	nop
 805b3e2:	697b      	ldr	r3, [r7, #20]
 805b3e4:	4618      	mov	r0, r3
 805b3e6:	3718      	adds	r7, #24
 805b3e8:	46bd      	mov	sp, r7
 805b3ea:	bd80      	pop	{r7, pc}
 805b3ec:	e2048200 	.word	0xe2048200

0805b3f0 <vl53l5_init>:
 805b3f0:	b580      	push	{r7, lr}
 805b3f2:	b084      	sub	sp, #16
 805b3f4:	af00      	add	r7, sp, #0
 805b3f6:	6078      	str	r0, [r7, #4]
 805b3f8:	2300      	movs	r3, #0
 805b3fa:	60fb      	str	r3, [r7, #12]
 805b3fc:	687b      	ldr	r3, [r7, #4]
 805b3fe:	2b00      	cmp	r3, #0
 805b400:	d103      	bne.n	805b40a <vl53l5_init+0x1a>
 805b402:	f06f 0303 	mvn.w	r3, #3
 805b406:	60fb      	str	r3, [r7, #12]
 805b408:	e059      	b.n	805b4be <vl53l5_init+0xce>
 805b40a:	687b      	ldr	r3, [r7, #4]
 805b40c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 805b40e:	2b00      	cmp	r3, #0
 805b410:	d103      	bne.n	805b41a <vl53l5_init+0x2a>
 805b412:	f06f 0303 	mvn.w	r3, #3
 805b416:	60fb      	str	r3, [r7, #12]
 805b418:	e051      	b.n	805b4be <vl53l5_init+0xce>
 805b41a:	6878      	ldr	r0, [r7, #4]
 805b41c:	f001 fd70 	bl	805cf00 <vl53l5_check_device_booted>
 805b420:	60f8      	str	r0, [r7, #12]
 805b422:	68fb      	ldr	r3, [r7, #12]
 805b424:	2b00      	cmp	r3, #0
 805b426:	db41      	blt.n	805b4ac <vl53l5_init+0xbc>
 805b428:	687b      	ldr	r3, [r7, #4]
 805b42a:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 805b42e:	2b00      	cmp	r3, #0
 805b430:	d011      	beq.n	805b456 <vl53l5_init+0x66>
 805b432:	687b      	ldr	r3, [r7, #4]
 805b434:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 805b438:	2b04      	cmp	r3, #4
 805b43a:	d10c      	bne.n	805b456 <vl53l5_init+0x66>
 805b43c:	687b      	ldr	r3, [r7, #4]
 805b43e:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 805b442:	f083 0301 	eor.w	r3, r3, #1
 805b446:	b2db      	uxtb	r3, r3
 805b448:	2b00      	cmp	r3, #0
 805b44a:	d004      	beq.n	805b456 <vl53l5_init+0x66>
 805b44c:	6878      	ldr	r0, [r7, #4]
 805b44e:	f000 fd09 	bl	805be64 <vl53l5_check_map_version>
 805b452:	60f8      	str	r0, [r7, #12]
 805b454:	e033      	b.n	805b4be <vl53l5_init+0xce>
 805b456:	687b      	ldr	r3, [r7, #4]
 805b458:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 805b45c:	2b00      	cmp	r3, #0
 805b45e:	d127      	bne.n	805b4b0 <vl53l5_init+0xc0>
 805b460:	6878      	ldr	r0, [r7, #4]
 805b462:	f001 fdb9 	bl	805cfd8 <vl53l5_check_rom_firmware_boot>
 805b466:	60f8      	str	r0, [r7, #12]
 805b468:	68fb      	ldr	r3, [r7, #12]
 805b46a:	2b00      	cmp	r3, #0
 805b46c:	db22      	blt.n	805b4b4 <vl53l5_init+0xc4>
 805b46e:	687b      	ldr	r3, [r7, #4]
 805b470:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 805b474:	f083 0301 	eor.w	r3, r3, #1
 805b478:	b2db      	uxtb	r3, r3
 805b47a:	2b00      	cmp	r3, #0
 805b47c:	d00a      	beq.n	805b494 <vl53l5_init+0xa4>
 805b47e:	687b      	ldr	r3, [r7, #4]
 805b480:	6a1b      	ldr	r3, [r3, #32]
 805b482:	2b00      	cmp	r3, #0
 805b484:	d006      	beq.n	805b494 <vl53l5_init+0xa4>
 805b486:	6878      	ldr	r0, [r7, #4]
 805b488:	f001 fb1f 	bl	805caca <vl53l5_load_firmware>
 805b48c:	60f8      	str	r0, [r7, #12]
 805b48e:	68fb      	ldr	r3, [r7, #12]
 805b490:	2b00      	cmp	r3, #0
 805b492:	db11      	blt.n	805b4b8 <vl53l5_init+0xc8>
 805b494:	6878      	ldr	r0, [r7, #4]
 805b496:	f000 fce5 	bl	805be64 <vl53l5_check_map_version>
 805b49a:	60f8      	str	r0, [r7, #12]
 805b49c:	68fb      	ldr	r3, [r7, #12]
 805b49e:	2b00      	cmp	r3, #0
 805b4a0:	d10c      	bne.n	805b4bc <vl53l5_init+0xcc>
 805b4a2:	687b      	ldr	r3, [r7, #4]
 805b4a4:	2204      	movs	r2, #4
 805b4a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 805b4aa:	e008      	b.n	805b4be <vl53l5_init+0xce>
 805b4ac:	bf00      	nop
 805b4ae:	e006      	b.n	805b4be <vl53l5_init+0xce>
 805b4b0:	bf00      	nop
 805b4b2:	e004      	b.n	805b4be <vl53l5_init+0xce>
 805b4b4:	bf00      	nop
 805b4b6:	e002      	b.n	805b4be <vl53l5_init+0xce>
 805b4b8:	bf00      	nop
 805b4ba:	e000      	b.n	805b4be <vl53l5_init+0xce>
 805b4bc:	bf00      	nop
 805b4be:	68fb      	ldr	r3, [r7, #12]
 805b4c0:	4618      	mov	r0, r3
 805b4c2:	3710      	adds	r7, #16
 805b4c4:	46bd      	mov	sp, r7
 805b4c6:	bd80      	pop	{r7, pc}

0805b4c8 <vl53l5_term>:
 805b4c8:	b480      	push	{r7}
 805b4ca:	b085      	sub	sp, #20
 805b4cc:	af00      	add	r7, sp, #0
 805b4ce:	6078      	str	r0, [r7, #4]
 805b4d0:	2300      	movs	r3, #0
 805b4d2:	60fb      	str	r3, [r7, #12]
 805b4d4:	687b      	ldr	r3, [r7, #4]
 805b4d6:	2b00      	cmp	r3, #0
 805b4d8:	d103      	bne.n	805b4e2 <vl53l5_term+0x1a>
 805b4da:	f06f 0303 	mvn.w	r3, #3
 805b4de:	60fb      	str	r3, [r7, #12]
 805b4e0:	e00e      	b.n	805b500 <vl53l5_term+0x38>
 805b4e2:	687b      	ldr	r3, [r7, #4]
 805b4e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 805b4e6:	2b00      	cmp	r3, #0
 805b4e8:	d103      	bne.n	805b4f2 <vl53l5_term+0x2a>
 805b4ea:	f06f 0303 	mvn.w	r3, #3
 805b4ee:	60fb      	str	r3, [r7, #12]
 805b4f0:	e006      	b.n	805b500 <vl53l5_term+0x38>
 805b4f2:	687b      	ldr	r3, [r7, #4]
 805b4f4:	2200      	movs	r2, #0
 805b4f6:	631a      	str	r2, [r3, #48]	; 0x30
 805b4f8:	687b      	ldr	r3, [r7, #4]
 805b4fa:	2200      	movs	r2, #0
 805b4fc:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 805b500:	68fb      	ldr	r3, [r7, #12]
 805b502:	4618      	mov	r0, r3
 805b504:	3714      	adds	r7, #20
 805b506:	46bd      	mov	sp, r7
 805b508:	f85d 7b04 	ldr.w	r7, [sp], #4
 805b50c:	4770      	bx	lr

0805b50e <vl53l5_start>:
 805b50e:	b580      	push	{r7, lr}
 805b510:	b084      	sub	sp, #16
 805b512:	af00      	add	r7, sp, #0
 805b514:	6078      	str	r0, [r7, #4]
 805b516:	6039      	str	r1, [r7, #0]
 805b518:	2300      	movs	r3, #0
 805b51a:	60fb      	str	r3, [r7, #12]
 805b51c:	2300      	movs	r3, #0
 805b51e:	72fb      	strb	r3, [r7, #11]
 805b520:	687b      	ldr	r3, [r7, #4]
 805b522:	2b00      	cmp	r3, #0
 805b524:	d103      	bne.n	805b52e <vl53l5_start+0x20>
 805b526:	f06f 0303 	mvn.w	r3, #3
 805b52a:	60fb      	str	r3, [r7, #12]
 805b52c:	e062      	b.n	805b5f4 <vl53l5_start+0xe6>
 805b52e:	687b      	ldr	r3, [r7, #4]
 805b530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 805b532:	2b00      	cmp	r3, #0
 805b534:	d103      	bne.n	805b53e <vl53l5_start+0x30>
 805b536:	f06f 0303 	mvn.w	r3, #3
 805b53a:	60fb      	str	r3, [r7, #12]
 805b53c:	e05a      	b.n	805b5f4 <vl53l5_start+0xe6>
 805b53e:	687b      	ldr	r3, [r7, #4]
 805b540:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 805b544:	2b00      	cmp	r3, #0
 805b546:	d001      	beq.n	805b54c <vl53l5_start+0x3e>
 805b548:	2300      	movs	r3, #0
 805b54a:	e001      	b.n	805b550 <vl53l5_start+0x42>
 805b54c:	f06f 0362 	mvn.w	r3, #98	; 0x62
 805b550:	60fb      	str	r3, [r7, #12]
 805b552:	68fb      	ldr	r3, [r7, #12]
 805b554:	2b00      	cmp	r3, #0
 805b556:	db46      	blt.n	805b5e6 <vl53l5_start+0xd8>
 805b558:	683b      	ldr	r3, [r7, #0]
 805b55a:	2b00      	cmp	r3, #0
 805b55c:	d01e      	beq.n	805b59c <vl53l5_start+0x8e>
 805b55e:	6838      	ldr	r0, [r7, #0]
 805b560:	f7ff fccd 	bl	805aefe <_check_flags_consistent>
 805b564:	60f8      	str	r0, [r7, #12]
 805b566:	68fb      	ldr	r3, [r7, #12]
 805b568:	2b00      	cmp	r3, #0
 805b56a:	d13e      	bne.n	805b5ea <vl53l5_start+0xdc>
 805b56c:	683b      	ldr	r3, [r7, #0]
 805b56e:	781b      	ldrb	r3, [r3, #0]
 805b570:	f003 0302 	and.w	r3, r3, #2
 805b574:	b2db      	uxtb	r3, r3
 805b576:	2b00      	cmp	r3, #0
 805b578:	d106      	bne.n	805b588 <vl53l5_start+0x7a>
 805b57a:	683b      	ldr	r3, [r7, #0]
 805b57c:	781b      	ldrb	r3, [r3, #0]
 805b57e:	f003 0301 	and.w	r3, r3, #1
 805b582:	b2db      	uxtb	r3, r3
 805b584:	2b00      	cmp	r3, #0
 805b586:	d009      	beq.n	805b59c <vl53l5_start+0x8e>
 805b588:	2101      	movs	r1, #1
 805b58a:	6878      	ldr	r0, [r7, #4]
 805b58c:	f7ff fe3e 	bl	805b20c <_set_xshut_bypass>
 805b590:	60f8      	str	r0, [r7, #12]
 805b592:	68fb      	ldr	r3, [r7, #12]
 805b594:	2b00      	cmp	r3, #0
 805b596:	d12a      	bne.n	805b5ee <vl53l5_start+0xe0>
 805b598:	2301      	movs	r3, #1
 805b59a:	72fb      	strb	r3, [r7, #11]
 805b59c:	687b      	ldr	r3, [r7, #4]
 805b59e:	2200      	movs	r2, #0
 805b5a0:	631a      	str	r2, [r3, #48]	; 0x30
 805b5a2:	2103      	movs	r1, #3
 805b5a4:	6878      	ldr	r0, [r7, #4]
 805b5a6:	f000 fd1f 	bl	805bfe8 <vl53l5_execute_command>
 805b5aa:	60f8      	str	r0, [r7, #12]
 805b5ac:	68fb      	ldr	r3, [r7, #12]
 805b5ae:	2b00      	cmp	r3, #0
 805b5b0:	d10b      	bne.n	805b5ca <vl53l5_start+0xbc>
 805b5b2:	6878      	ldr	r0, [r7, #4]
 805b5b4:	f7ff fcd4 	bl	805af60 <_decode_start_range_return>
 805b5b8:	60f8      	str	r0, [r7, #12]
 805b5ba:	68fb      	ldr	r3, [r7, #12]
 805b5bc:	2b00      	cmp	r3, #0
 805b5be:	d106      	bne.n	805b5ce <vl53l5_start+0xc0>
 805b5c0:	687b      	ldr	r3, [r7, #4]
 805b5c2:	22ff      	movs	r2, #255	; 0xff
 805b5c4:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
 805b5c8:	e002      	b.n	805b5d0 <vl53l5_start+0xc2>
 805b5ca:	bf00      	nop
 805b5cc:	e000      	b.n	805b5d0 <vl53l5_start+0xc2>
 805b5ce:	bf00      	nop
 805b5d0:	68fb      	ldr	r3, [r7, #12]
 805b5d2:	2b00      	cmp	r3, #0
 805b5d4:	d00d      	beq.n	805b5f2 <vl53l5_start+0xe4>
 805b5d6:	7afb      	ldrb	r3, [r7, #11]
 805b5d8:	2b00      	cmp	r3, #0
 805b5da:	d00a      	beq.n	805b5f2 <vl53l5_start+0xe4>
 805b5dc:	2100      	movs	r1, #0
 805b5de:	6878      	ldr	r0, [r7, #4]
 805b5e0:	f7ff fe14 	bl	805b20c <_set_xshut_bypass>
 805b5e4:	e006      	b.n	805b5f4 <vl53l5_start+0xe6>
 805b5e6:	bf00      	nop
 805b5e8:	e004      	b.n	805b5f4 <vl53l5_start+0xe6>
 805b5ea:	bf00      	nop
 805b5ec:	e002      	b.n	805b5f4 <vl53l5_start+0xe6>
 805b5ee:	bf00      	nop
 805b5f0:	e000      	b.n	805b5f4 <vl53l5_start+0xe6>
 805b5f2:	bf00      	nop
 805b5f4:	68fb      	ldr	r3, [r7, #12]
 805b5f6:	4618      	mov	r0, r3
 805b5f8:	3710      	adds	r7, #16
 805b5fa:	46bd      	mov	sp, r7
 805b5fc:	bd80      	pop	{r7, pc}

0805b5fe <vl53l5_stop>:
 805b5fe:	b580      	push	{r7, lr}
 805b600:	b084      	sub	sp, #16
 805b602:	af00      	add	r7, sp, #0
 805b604:	6078      	str	r0, [r7, #4]
 805b606:	6039      	str	r1, [r7, #0]
 805b608:	2300      	movs	r3, #0
 805b60a:	60fb      	str	r3, [r7, #12]
 805b60c:	687b      	ldr	r3, [r7, #4]
 805b60e:	2b00      	cmp	r3, #0
 805b610:	d103      	bne.n	805b61a <vl53l5_stop+0x1c>
 805b612:	f06f 0303 	mvn.w	r3, #3
 805b616:	60fb      	str	r3, [r7, #12]
 805b618:	e04c      	b.n	805b6b4 <vl53l5_stop+0xb6>
 805b61a:	687b      	ldr	r3, [r7, #4]
 805b61c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 805b61e:	2b00      	cmp	r3, #0
 805b620:	d103      	bne.n	805b62a <vl53l5_stop+0x2c>
 805b622:	f06f 0303 	mvn.w	r3, #3
 805b626:	60fb      	str	r3, [r7, #12]
 805b628:	e044      	b.n	805b6b4 <vl53l5_stop+0xb6>
 805b62a:	687b      	ldr	r3, [r7, #4]
 805b62c:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 805b630:	2b00      	cmp	r3, #0
 805b632:	d001      	beq.n	805b638 <vl53l5_stop+0x3a>
 805b634:	2300      	movs	r3, #0
 805b636:	e001      	b.n	805b63c <vl53l5_stop+0x3e>
 805b638:	f06f 0362 	mvn.w	r3, #98	; 0x62
 805b63c:	60fb      	str	r3, [r7, #12]
 805b63e:	68fb      	ldr	r3, [r7, #12]
 805b640:	2b00      	cmp	r3, #0
 805b642:	db34      	blt.n	805b6ae <vl53l5_stop+0xb0>
 805b644:	683b      	ldr	r3, [r7, #0]
 805b646:	2b00      	cmp	r3, #0
 805b648:	d026      	beq.n	805b698 <vl53l5_stop+0x9a>
 805b64a:	6838      	ldr	r0, [r7, #0]
 805b64c:	f7ff fc57 	bl	805aefe <_check_flags_consistent>
 805b650:	60f8      	str	r0, [r7, #12]
 805b652:	68fb      	ldr	r3, [r7, #12]
 805b654:	2b00      	cmp	r3, #0
 805b656:	d12c      	bne.n	805b6b2 <vl53l5_stop+0xb4>
 805b658:	683b      	ldr	r3, [r7, #0]
 805b65a:	781b      	ldrb	r3, [r3, #0]
 805b65c:	f003 0302 	and.w	r3, r3, #2
 805b660:	b2db      	uxtb	r3, r3
 805b662:	2b00      	cmp	r3, #0
 805b664:	d106      	bne.n	805b674 <vl53l5_stop+0x76>
 805b666:	683b      	ldr	r3, [r7, #0]
 805b668:	781b      	ldrb	r3, [r3, #0]
 805b66a:	f003 0301 	and.w	r3, r3, #1
 805b66e:	b2db      	uxtb	r3, r3
 805b670:	2b00      	cmp	r3, #0
 805b672:	d006      	beq.n	805b682 <vl53l5_stop+0x84>
 805b674:	6878      	ldr	r0, [r7, #4]
 805b676:	f7ff fe55 	bl	805b324 <_force_timed_mode_stop>
 805b67a:	60f8      	str	r0, [r7, #12]
 805b67c:	68fb      	ldr	r3, [r7, #12]
 805b67e:	2b00      	cmp	r3, #0
 805b680:	e018      	b.n	805b6b4 <vl53l5_stop+0xb6>
 805b682:	687b      	ldr	r3, [r7, #4]
 805b684:	2200      	movs	r2, #0
 805b686:	631a      	str	r2, [r3, #48]	; 0x30
 805b688:	2104      	movs	r1, #4
 805b68a:	6878      	ldr	r0, [r7, #4]
 805b68c:	f000 fcac 	bl	805bfe8 <vl53l5_execute_command>
 805b690:	60f8      	str	r0, [r7, #12]
 805b692:	68fb      	ldr	r3, [r7, #12]
 805b694:	2b00      	cmp	r3, #0
 805b696:	e00d      	b.n	805b6b4 <vl53l5_stop+0xb6>
 805b698:	687b      	ldr	r3, [r7, #4]
 805b69a:	2200      	movs	r2, #0
 805b69c:	631a      	str	r2, [r3, #48]	; 0x30
 805b69e:	2104      	movs	r1, #4
 805b6a0:	6878      	ldr	r0, [r7, #4]
 805b6a2:	f000 fca1 	bl	805bfe8 <vl53l5_execute_command>
 805b6a6:	60f8      	str	r0, [r7, #12]
 805b6a8:	68fb      	ldr	r3, [r7, #12]
 805b6aa:	2b00      	cmp	r3, #0
 805b6ac:	e002      	b.n	805b6b4 <vl53l5_stop+0xb6>
 805b6ae:	bf00      	nop
 805b6b0:	e000      	b.n	805b6b4 <vl53l5_stop+0xb6>
 805b6b2:	bf00      	nop
 805b6b4:	68fb      	ldr	r3, [r7, #12]
 805b6b6:	4618      	mov	r0, r3
 805b6b8:	3710      	adds	r7, #16
 805b6ba:	46bd      	mov	sp, r7
 805b6bc:	bd80      	pop	{r7, pc}

0805b6be <vl53l5_read_device_error>:
 805b6be:	b580      	push	{r7, lr}
 805b6c0:	b084      	sub	sp, #16
 805b6c2:	af00      	add	r7, sp, #0
 805b6c4:	6078      	str	r0, [r7, #4]
 805b6c6:	6039      	str	r1, [r7, #0]
 805b6c8:	2300      	movs	r3, #0
 805b6ca:	60fb      	str	r3, [r7, #12]
 805b6cc:	687b      	ldr	r3, [r7, #4]
 805b6ce:	2b00      	cmp	r3, #0
 805b6d0:	d103      	bne.n	805b6da <vl53l5_read_device_error+0x1c>
 805b6d2:	f06f 0303 	mvn.w	r3, #3
 805b6d6:	60fb      	str	r3, [r7, #12]
 805b6d8:	e018      	b.n	805b70c <vl53l5_read_device_error+0x4e>
 805b6da:	687b      	ldr	r3, [r7, #4]
 805b6dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 805b6de:	2b00      	cmp	r3, #0
 805b6e0:	d103      	bne.n	805b6ea <vl53l5_read_device_error+0x2c>
 805b6e2:	f06f 0303 	mvn.w	r3, #3
 805b6e6:	60fb      	str	r3, [r7, #12]
 805b6e8:	e010      	b.n	805b70c <vl53l5_read_device_error+0x4e>
 805b6ea:	6838      	ldr	r0, [r7, #0]
 805b6ec:	f7ff fcb6 	bl	805b05c <_check_if_status_requires_handler>
 805b6f0:	4603      	mov	r3, r0
 805b6f2:	f083 0301 	eor.w	r3, r3, #1
 805b6f6:	b2db      	uxtb	r3, r3
 805b6f8:	2b00      	cmp	r3, #0
 805b6fa:	d002      	beq.n	805b702 <vl53l5_read_device_error+0x44>
 805b6fc:	683b      	ldr	r3, [r7, #0]
 805b6fe:	60fb      	str	r3, [r7, #12]
 805b700:	e004      	b.n	805b70c <vl53l5_read_device_error+0x4e>
 805b702:	2102      	movs	r1, #2
 805b704:	6878      	ldr	r0, [r7, #4]
 805b706:	f7ff fcdb 	bl	805b0c0 <_get_error_go2_status>
 805b70a:	60f8      	str	r0, [r7, #12]
 805b70c:	68fb      	ldr	r3, [r7, #12]
 805b70e:	2b00      	cmp	r3, #0
 805b710:	d101      	bne.n	805b716 <vl53l5_read_device_error+0x58>
 805b712:	683b      	ldr	r3, [r7, #0]
 805b714:	60fb      	str	r3, [r7, #12]
 805b716:	68fb      	ldr	r3, [r7, #12]
 805b718:	4618      	mov	r0, r3
 805b71a:	3710      	adds	r7, #16
 805b71c:	46bd      	mov	sp, r7
 805b71e:	bd80      	pop	{r7, pc}

0805b720 <vl53l5_get_device_parameters>:
 805b720:	b580      	push	{r7, lr}
 805b722:	b086      	sub	sp, #24
 805b724:	af00      	add	r7, sp, #0
 805b726:	60f8      	str	r0, [r7, #12]
 805b728:	60b9      	str	r1, [r7, #8]
 805b72a:	607a      	str	r2, [r7, #4]
 805b72c:	2300      	movs	r3, #0
 805b72e:	617b      	str	r3, [r7, #20]
 805b730:	68fb      	ldr	r3, [r7, #12]
 805b732:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 805b736:	2b00      	cmp	r3, #0
 805b738:	d001      	beq.n	805b73e <vl53l5_get_device_parameters+0x1e>
 805b73a:	2300      	movs	r3, #0
 805b73c:	e001      	b.n	805b742 <vl53l5_get_device_parameters+0x22>
 805b73e:	f06f 0362 	mvn.w	r3, #98	; 0x62
 805b742:	617b      	str	r3, [r7, #20]
 805b744:	697b      	ldr	r3, [r7, #20]
 805b746:	2b00      	cmp	r3, #0
 805b748:	db10      	blt.n	805b76c <vl53l5_get_device_parameters+0x4c>
 805b74a:	2301      	movs	r3, #1
 805b74c:	687a      	ldr	r2, [r7, #4]
 805b74e:	68b9      	ldr	r1, [r7, #8]
 805b750:	68f8      	ldr	r0, [r7, #12]
 805b752:	f7ff fd3c 	bl	805b1ce <_get_dev_params>
 805b756:	6178      	str	r0, [r7, #20]
 805b758:	697b      	ldr	r3, [r7, #20]
 805b75a:	2b00      	cmp	r3, #0
 805b75c:	d108      	bne.n	805b770 <vl53l5_get_device_parameters+0x50>
 805b75e:	68f8      	ldr	r0, [r7, #12]
 805b760:	f000 fb2e 	bl	805bdc0 <vl53l5_test_map_version>
 805b764:	6178      	str	r0, [r7, #20]
 805b766:	697b      	ldr	r3, [r7, #20]
 805b768:	2b00      	cmp	r3, #0
 805b76a:	e002      	b.n	805b772 <vl53l5_get_device_parameters+0x52>
 805b76c:	bf00      	nop
 805b76e:	e000      	b.n	805b772 <vl53l5_get_device_parameters+0x52>
 805b770:	bf00      	nop
 805b772:	697b      	ldr	r3, [r7, #20]
 805b774:	4618      	mov	r0, r3
 805b776:	3718      	adds	r7, #24
 805b778:	46bd      	mov	sp, r7
 805b77a:	bd80      	pop	{r7, pc}

0805b77c <vl53l5_set_device_parameters>:
 805b77c:	b580      	push	{r7, lr}
 805b77e:	b086      	sub	sp, #24
 805b780:	af00      	add	r7, sp, #0
 805b782:	60f8      	str	r0, [r7, #12]
 805b784:	60b9      	str	r1, [r7, #8]
 805b786:	607a      	str	r2, [r7, #4]
 805b788:	2300      	movs	r3, #0
 805b78a:	617b      	str	r3, [r7, #20]
 805b78c:	68fb      	ldr	r3, [r7, #12]
 805b78e:	2b00      	cmp	r3, #0
 805b790:	d103      	bne.n	805b79a <vl53l5_set_device_parameters+0x1e>
 805b792:	f06f 0303 	mvn.w	r3, #3
 805b796:	617b      	str	r3, [r7, #20]
 805b798:	e045      	b.n	805b826 <vl53l5_set_device_parameters+0xaa>
 805b79a:	68bb      	ldr	r3, [r7, #8]
 805b79c:	2b00      	cmp	r3, #0
 805b79e:	d103      	bne.n	805b7a8 <vl53l5_set_device_parameters+0x2c>
 805b7a0:	f06f 0303 	mvn.w	r3, #3
 805b7a4:	617b      	str	r3, [r7, #20]
 805b7a6:	e03e      	b.n	805b826 <vl53l5_set_device_parameters+0xaa>
 805b7a8:	68fb      	ldr	r3, [r7, #12]
 805b7aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 805b7ac:	2b00      	cmp	r3, #0
 805b7ae:	d103      	bne.n	805b7b8 <vl53l5_set_device_parameters+0x3c>
 805b7b0:	f06f 0303 	mvn.w	r3, #3
 805b7b4:	617b      	str	r3, [r7, #20]
 805b7b6:	e036      	b.n	805b826 <vl53l5_set_device_parameters+0xaa>
 805b7b8:	68fb      	ldr	r3, [r7, #12]
 805b7ba:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 805b7be:	2b00      	cmp	r3, #0
 805b7c0:	d001      	beq.n	805b7c6 <vl53l5_set_device_parameters+0x4a>
 805b7c2:	2300      	movs	r3, #0
 805b7c4:	e001      	b.n	805b7ca <vl53l5_set_device_parameters+0x4e>
 805b7c6:	f06f 0362 	mvn.w	r3, #98	; 0x62
 805b7ca:	617b      	str	r3, [r7, #20]
 805b7cc:	697b      	ldr	r3, [r7, #20]
 805b7ce:	2b00      	cmp	r3, #0
 805b7d0:	db26      	blt.n	805b820 <vl53l5_set_device_parameters+0xa4>
 805b7d2:	68fb      	ldr	r3, [r7, #12]
 805b7d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 805b7d6:	687a      	ldr	r2, [r7, #4]
 805b7d8:	429a      	cmp	r2, r3
 805b7da:	d903      	bls.n	805b7e4 <vl53l5_set_device_parameters+0x68>
 805b7dc:	f06f 035b 	mvn.w	r3, #91	; 0x5b
 805b7e0:	617b      	str	r3, [r7, #20]
 805b7e2:	e020      	b.n	805b826 <vl53l5_set_device_parameters+0xaa>
 805b7e4:	68fb      	ldr	r3, [r7, #12]
 805b7e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 805b7e8:	68ba      	ldr	r2, [r7, #8]
 805b7ea:	429a      	cmp	r2, r3
 805b7ec:	d006      	beq.n	805b7fc <vl53l5_set_device_parameters+0x80>
 805b7ee:	68fb      	ldr	r3, [r7, #12]
 805b7f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 805b7f2:	687a      	ldr	r2, [r7, #4]
 805b7f4:	68b9      	ldr	r1, [r7, #8]
 805b7f6:	4618      	mov	r0, r3
 805b7f8:	f004 fbd2 	bl	805ffa0 <memcpy>
 805b7fc:	68fb      	ldr	r3, [r7, #12]
 805b7fe:	687a      	ldr	r2, [r7, #4]
 805b800:	631a      	str	r2, [r3, #48]	; 0x30
 805b802:	68f8      	ldr	r0, [r7, #12]
 805b804:	f000 fadc 	bl	805bdc0 <vl53l5_test_map_version>
 805b808:	6178      	str	r0, [r7, #20]
 805b80a:	697b      	ldr	r3, [r7, #20]
 805b80c:	2b00      	cmp	r3, #0
 805b80e:	d109      	bne.n	805b824 <vl53l5_set_device_parameters+0xa8>
 805b810:	2101      	movs	r1, #1
 805b812:	68f8      	ldr	r0, [r7, #12]
 805b814:	f000 fbe8 	bl	805bfe8 <vl53l5_execute_command>
 805b818:	6178      	str	r0, [r7, #20]
 805b81a:	697b      	ldr	r3, [r7, #20]
 805b81c:	2b00      	cmp	r3, #0
 805b81e:	e002      	b.n	805b826 <vl53l5_set_device_parameters+0xaa>
 805b820:	bf00      	nop
 805b822:	e000      	b.n	805b826 <vl53l5_set_device_parameters+0xaa>
 805b824:	bf00      	nop
 805b826:	697b      	ldr	r3, [r7, #20]
 805b828:	4618      	mov	r0, r3
 805b82a:	3718      	adds	r7, #24
 805b82c:	46bd      	mov	sp, r7
 805b82e:	bd80      	pop	{r7, pc}

0805b830 <vl53l5_set_power_mode>:
 805b830:	b580      	push	{r7, lr}
 805b832:	b084      	sub	sp, #16
 805b834:	af00      	add	r7, sp, #0
 805b836:	6078      	str	r0, [r7, #4]
 805b838:	460b      	mov	r3, r1
 805b83a:	70fb      	strb	r3, [r7, #3]
 805b83c:	2300      	movs	r3, #0
 805b83e:	60fb      	str	r3, [r7, #12]
 805b840:	687b      	ldr	r3, [r7, #4]
 805b842:	2b00      	cmp	r3, #0
 805b844:	d103      	bne.n	805b84e <vl53l5_set_power_mode+0x1e>
 805b846:	f06f 0303 	mvn.w	r3, #3
 805b84a:	60fb      	str	r3, [r7, #12]
 805b84c:	e044      	b.n	805b8d8 <vl53l5_set_power_mode+0xa8>
 805b84e:	687b      	ldr	r3, [r7, #4]
 805b850:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 805b854:	2b00      	cmp	r3, #0
 805b856:	d107      	bne.n	805b868 <vl53l5_set_power_mode+0x38>
 805b858:	687b      	ldr	r3, [r7, #4]
 805b85a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 805b85e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 805b862:	b2db      	uxtb	r3, r3
 805b864:	2b00      	cmp	r3, #0
 805b866:	d004      	beq.n	805b872 <vl53l5_set_power_mode+0x42>
 805b868:	687b      	ldr	r3, [r7, #4]
 805b86a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 805b86e:	2b05      	cmp	r3, #5
 805b870:	d103      	bne.n	805b87a <vl53l5_set_power_mode+0x4a>
 805b872:	f06f 0329 	mvn.w	r3, #41	; 0x29
 805b876:	60fb      	str	r3, [r7, #12]
 805b878:	e02e      	b.n	805b8d8 <vl53l5_set_power_mode+0xa8>
 805b87a:	78fb      	ldrb	r3, [r7, #3]
 805b87c:	2b03      	cmp	r3, #3
 805b87e:	d00e      	beq.n	805b89e <vl53l5_set_power_mode+0x6e>
 805b880:	2b04      	cmp	r3, #4
 805b882:	d002      	beq.n	805b88a <vl53l5_set_power_mode+0x5a>
 805b884:	2b01      	cmp	r3, #1
 805b886:	d014      	beq.n	805b8b2 <vl53l5_set_power_mode+0x82>
 805b888:	e01d      	b.n	805b8c6 <vl53l5_set_power_mode+0x96>
 805b88a:	687b      	ldr	r3, [r7, #4]
 805b88c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 805b890:	2b04      	cmp	r3, #4
 805b892:	d01c      	beq.n	805b8ce <vl53l5_set_power_mode+0x9e>
 805b894:	6878      	ldr	r0, [r7, #4]
 805b896:	f000 f8c9 	bl	805ba2c <_set_power_to_hp_idle>
 805b89a:	60f8      	str	r0, [r7, #12]
 805b89c:	e017      	b.n	805b8ce <vl53l5_set_power_mode+0x9e>
 805b89e:	687b      	ldr	r3, [r7, #4]
 805b8a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 805b8a4:	2b03      	cmp	r3, #3
 805b8a6:	d014      	beq.n	805b8d2 <vl53l5_set_power_mode+0xa2>
 805b8a8:	6878      	ldr	r0, [r7, #4]
 805b8aa:	f000 f91a 	bl	805bae2 <_set_power_to_lp_idle_comms>
 805b8ae:	60f8      	str	r0, [r7, #12]
 805b8b0:	e00f      	b.n	805b8d2 <vl53l5_set_power_mode+0xa2>
 805b8b2:	687b      	ldr	r3, [r7, #4]
 805b8b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 805b8b8:	2b01      	cmp	r3, #1
 805b8ba:	d00c      	beq.n	805b8d6 <vl53l5_set_power_mode+0xa6>
 805b8bc:	6878      	ldr	r0, [r7, #4]
 805b8be:	f000 f960 	bl	805bb82 <_set_power_to_ulp_idle>
 805b8c2:	60f8      	str	r0, [r7, #12]
 805b8c4:	e007      	b.n	805b8d6 <vl53l5_set_power_mode+0xa6>
 805b8c6:	f06f 0329 	mvn.w	r3, #41	; 0x29
 805b8ca:	60fb      	str	r3, [r7, #12]
 805b8cc:	e004      	b.n	805b8d8 <vl53l5_set_power_mode+0xa8>
 805b8ce:	bf00      	nop
 805b8d0:	e002      	b.n	805b8d8 <vl53l5_set_power_mode+0xa8>
 805b8d2:	bf00      	nop
 805b8d4:	e000      	b.n	805b8d8 <vl53l5_set_power_mode+0xa8>
 805b8d6:	bf00      	nop
 805b8d8:	68fb      	ldr	r3, [r7, #12]
 805b8da:	4618      	mov	r0, r3
 805b8dc:	3710      	adds	r7, #16
 805b8de:	46bd      	mov	sp, r7
 805b8e0:	bd80      	pop	{r7, pc}

0805b8e2 <_go_to_hp_idle>:
 805b8e2:	b580      	push	{r7, lr}
 805b8e4:	b084      	sub	sp, #16
 805b8e6:	af00      	add	r7, sp, #0
 805b8e8:	6078      	str	r0, [r7, #4]
 805b8ea:	2300      	movs	r3, #0
 805b8ec:	60fb      	str	r3, [r7, #12]
 805b8ee:	687b      	ldr	r3, [r7, #4]
 805b8f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 805b8f4:	2b01      	cmp	r3, #1
 805b8f6:	d111      	bne.n	805b91c <_go_to_hp_idle+0x3a>
 805b8f8:	2101      	movs	r1, #1
 805b8fa:	6878      	ldr	r0, [r7, #4]
 805b8fc:	f001 f9f0 	bl	805cce0 <vl53l5_set_manual_xshut_state>
 805b900:	60f8      	str	r0, [r7, #12]
 805b902:	68fb      	ldr	r3, [r7, #12]
 805b904:	2b00      	cmp	r3, #0
 805b906:	db3d      	blt.n	805b984 <_go_to_hp_idle+0xa2>
 805b908:	2201      	movs	r2, #1
 805b90a:	2101      	movs	r1, #1
 805b90c:	6878      	ldr	r0, [r7, #4]
 805b90e:	f001 f986 	bl	805cc1e <vl53l5_set_regulators>
 805b912:	60f8      	str	r0, [r7, #12]
 805b914:	68fb      	ldr	r3, [r7, #12]
 805b916:	2b00      	cmp	r3, #0
 805b918:	da25      	bge.n	805b966 <_go_to_hp_idle+0x84>
 805b91a:	e036      	b.n	805b98a <_go_to_hp_idle+0xa8>
 805b91c:	687b      	ldr	r3, [r7, #4]
 805b91e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 805b922:	2b03      	cmp	r3, #3
 805b924:	d108      	bne.n	805b938 <_go_to_hp_idle+0x56>
 805b926:	2101      	movs	r1, #1
 805b928:	6878      	ldr	r0, [r7, #4]
 805b92a:	f001 f9d9 	bl	805cce0 <vl53l5_set_manual_xshut_state>
 805b92e:	60f8      	str	r0, [r7, #12]
 805b930:	68fb      	ldr	r3, [r7, #12]
 805b932:	2b00      	cmp	r3, #0
 805b934:	da17      	bge.n	805b966 <_go_to_hp_idle+0x84>
 805b936:	e028      	b.n	805b98a <_go_to_hp_idle+0xa8>
 805b938:	687b      	ldr	r3, [r7, #4]
 805b93a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 805b93e:	2b00      	cmp	r3, #0
 805b940:	d10d      	bne.n	805b95e <_go_to_hp_idle+0x7c>
 805b942:	687b      	ldr	r3, [r7, #4]
 805b944:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 805b948:	2b00      	cmp	r3, #0
 805b94a:	d008      	beq.n	805b95e <_go_to_hp_idle+0x7c>
 805b94c:	2101      	movs	r1, #1
 805b94e:	6878      	ldr	r0, [r7, #4]
 805b950:	f001 f9c6 	bl	805cce0 <vl53l5_set_manual_xshut_state>
 805b954:	60f8      	str	r0, [r7, #12]
 805b956:	68fb      	ldr	r3, [r7, #12]
 805b958:	2b00      	cmp	r3, #0
 805b95a:	da04      	bge.n	805b966 <_go_to_hp_idle+0x84>
 805b95c:	e015      	b.n	805b98a <_go_to_hp_idle+0xa8>
 805b95e:	f06f 0329 	mvn.w	r3, #41	; 0x29
 805b962:	60fb      	str	r3, [r7, #12]
 805b964:	e011      	b.n	805b98a <_go_to_hp_idle+0xa8>
 805b966:	2300      	movs	r3, #0
 805b968:	2200      	movs	r2, #0
 805b96a:	2101      	movs	r1, #1
 805b96c:	6878      	ldr	r0, [r7, #4]
 805b96e:	f001 f9f2 	bl	805cd56 <vl53l5_wait_mcu_boot>
 805b972:	60f8      	str	r0, [r7, #12]
 805b974:	68fb      	ldr	r3, [r7, #12]
 805b976:	2b00      	cmp	r3, #0
 805b978:	db06      	blt.n	805b988 <_go_to_hp_idle+0xa6>
 805b97a:	687b      	ldr	r3, [r7, #4]
 805b97c:	2204      	movs	r2, #4
 805b97e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 805b982:	e002      	b.n	805b98a <_go_to_hp_idle+0xa8>
 805b984:	bf00      	nop
 805b986:	e000      	b.n	805b98a <_go_to_hp_idle+0xa8>
 805b988:	bf00      	nop
 805b98a:	68fb      	ldr	r3, [r7, #12]
 805b98c:	4618      	mov	r0, r3
 805b98e:	3710      	adds	r7, #16
 805b990:	46bd      	mov	sp, r7
 805b992:	bd80      	pop	{r7, pc}

0805b994 <_go_to_lp_idle_comms>:
 805b994:	b580      	push	{r7, lr}
 805b996:	b084      	sub	sp, #16
 805b998:	af00      	add	r7, sp, #0
 805b99a:	6078      	str	r0, [r7, #4]
 805b99c:	2300      	movs	r3, #0
 805b99e:	60fb      	str	r3, [r7, #12]
 805b9a0:	2100      	movs	r1, #0
 805b9a2:	6878      	ldr	r0, [r7, #4]
 805b9a4:	f001 f99c 	bl	805cce0 <vl53l5_set_manual_xshut_state>
 805b9a8:	60f8      	str	r0, [r7, #12]
 805b9aa:	68fb      	ldr	r3, [r7, #12]
 805b9ac:	2b00      	cmp	r3, #0
 805b9ae:	db0e      	blt.n	805b9ce <_go_to_lp_idle_comms+0x3a>
 805b9b0:	2300      	movs	r3, #0
 805b9b2:	2200      	movs	r2, #0
 805b9b4:	2100      	movs	r1, #0
 805b9b6:	6878      	ldr	r0, [r7, #4]
 805b9b8:	f001 f9cd 	bl	805cd56 <vl53l5_wait_mcu_boot>
 805b9bc:	60f8      	str	r0, [r7, #12]
 805b9be:	68fb      	ldr	r3, [r7, #12]
 805b9c0:	2b00      	cmp	r3, #0
 805b9c2:	db06      	blt.n	805b9d2 <_go_to_lp_idle_comms+0x3e>
 805b9c4:	687b      	ldr	r3, [r7, #4]
 805b9c6:	2203      	movs	r2, #3
 805b9c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 805b9cc:	e002      	b.n	805b9d4 <_go_to_lp_idle_comms+0x40>
 805b9ce:	bf00      	nop
 805b9d0:	e000      	b.n	805b9d4 <_go_to_lp_idle_comms+0x40>
 805b9d2:	bf00      	nop
 805b9d4:	68fb      	ldr	r3, [r7, #12]
 805b9d6:	4618      	mov	r0, r3
 805b9d8:	3710      	adds	r7, #16
 805b9da:	46bd      	mov	sp, r7
 805b9dc:	bd80      	pop	{r7, pc}

0805b9de <_go_to_ulp_idle>:
 805b9de:	b580      	push	{r7, lr}
 805b9e0:	b084      	sub	sp, #16
 805b9e2:	af00      	add	r7, sp, #0
 805b9e4:	6078      	str	r0, [r7, #4]
 805b9e6:	2300      	movs	r3, #0
 805b9e8:	60fb      	str	r3, [r7, #12]
 805b9ea:	6878      	ldr	r0, [r7, #4]
 805b9ec:	f7ff ffd2 	bl	805b994 <_go_to_lp_idle_comms>
 805b9f0:	60f8      	str	r0, [r7, #12]
 805b9f2:	68fb      	ldr	r3, [r7, #12]
 805b9f4:	2b00      	cmp	r3, #0
 805b9f6:	db11      	blt.n	805ba1c <_go_to_ulp_idle+0x3e>
 805b9f8:	2200      	movs	r2, #0
 805b9fa:	2100      	movs	r1, #0
 805b9fc:	6878      	ldr	r0, [r7, #4]
 805b9fe:	f001 f90e 	bl	805cc1e <vl53l5_set_regulators>
 805ba02:	60f8      	str	r0, [r7, #12]
 805ba04:	68fb      	ldr	r3, [r7, #12]
 805ba06:	2b00      	cmp	r3, #0
 805ba08:	db0a      	blt.n	805ba20 <_go_to_ulp_idle+0x42>
 805ba0a:	687b      	ldr	r3, [r7, #4]
 805ba0c:	2200      	movs	r2, #0
 805ba0e:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 805ba12:	687b      	ldr	r3, [r7, #4]
 805ba14:	2201      	movs	r2, #1
 805ba16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 805ba1a:	e002      	b.n	805ba22 <_go_to_ulp_idle+0x44>
 805ba1c:	bf00      	nop
 805ba1e:	e000      	b.n	805ba22 <_go_to_ulp_idle+0x44>
 805ba20:	bf00      	nop
 805ba22:	68fb      	ldr	r3, [r7, #12]
 805ba24:	4618      	mov	r0, r3
 805ba26:	3710      	adds	r7, #16
 805ba28:	46bd      	mov	sp, r7
 805ba2a:	bd80      	pop	{r7, pc}

0805ba2c <_set_power_to_hp_idle>:
 805ba2c:	b580      	push	{r7, lr}
 805ba2e:	b084      	sub	sp, #16
 805ba30:	af00      	add	r7, sp, #0
 805ba32:	6078      	str	r0, [r7, #4]
 805ba34:	2300      	movs	r3, #0
 805ba36:	60fb      	str	r3, [r7, #12]
 805ba38:	687b      	ldr	r3, [r7, #4]
 805ba3a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 805ba3e:	72fb      	strb	r3, [r7, #11]
 805ba40:	2301      	movs	r3, #1
 805ba42:	72bb      	strb	r3, [r7, #10]
 805ba44:	687b      	ldr	r3, [r7, #4]
 805ba46:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 805ba4a:	2b04      	cmp	r3, #4
 805ba4c:	d03d      	beq.n	805baca <_set_power_to_hp_idle+0x9e>
 805ba4e:	7abb      	ldrb	r3, [r7, #10]
 805ba50:	2b00      	cmp	r3, #0
 805ba52:	d007      	beq.n	805ba64 <_set_power_to_hp_idle+0x38>
 805ba54:	2100      	movs	r1, #0
 805ba56:	6878      	ldr	r0, [r7, #4]
 805ba58:	f001 f8cc 	bl	805cbf4 <vl53l5_set_page>
 805ba5c:	60f8      	str	r0, [r7, #12]
 805ba5e:	68fb      	ldr	r3, [r7, #12]
 805ba60:	2b00      	cmp	r3, #0
 805ba62:	db04      	blt.n	805ba6e <_set_power_to_hp_idle+0x42>
 805ba64:	6878      	ldr	r0, [r7, #4]
 805ba66:	f7ff ff3c 	bl	805b8e2 <_go_to_hp_idle>
 805ba6a:	60f8      	str	r0, [r7, #12]
 805ba6c:	e000      	b.n	805ba70 <_set_power_to_hp_idle+0x44>
 805ba6e:	bf00      	nop
 805ba70:	68fb      	ldr	r3, [r7, #12]
 805ba72:	2b00      	cmp	r3, #0
 805ba74:	d004      	beq.n	805ba80 <_set_power_to_hp_idle+0x54>
 805ba76:	2102      	movs	r1, #2
 805ba78:	6878      	ldr	r0, [r7, #4]
 805ba7a:	f001 f8bb 	bl	805cbf4 <vl53l5_set_page>
 805ba7e:	e02b      	b.n	805bad8 <_set_power_to_hp_idle+0xac>
 805ba80:	2102      	movs	r1, #2
 805ba82:	6878      	ldr	r0, [r7, #4]
 805ba84:	f001 f8b6 	bl	805cbf4 <vl53l5_set_page>
 805ba88:	60f8      	str	r0, [r7, #12]
 805ba8a:	68fb      	ldr	r3, [r7, #12]
 805ba8c:	2b00      	cmp	r3, #0
 805ba8e:	d11e      	bne.n	805bace <_set_power_to_hp_idle+0xa2>
 805ba90:	7afb      	ldrb	r3, [r7, #11]
 805ba92:	2b01      	cmp	r3, #1
 805ba94:	d10a      	bne.n	805baac <_set_power_to_hp_idle+0x80>
 805ba96:	687b      	ldr	r3, [r7, #4]
 805ba98:	6a1b      	ldr	r3, [r3, #32]
 805ba9a:	2b00      	cmp	r3, #0
 805ba9c:	d006      	beq.n	805baac <_set_power_to_hp_idle+0x80>
 805ba9e:	6878      	ldr	r0, [r7, #4]
 805baa0:	f001 f813 	bl	805caca <vl53l5_load_firmware>
 805baa4:	60f8      	str	r0, [r7, #12]
 805baa6:	68fb      	ldr	r3, [r7, #12]
 805baa8:	2b00      	cmp	r3, #0
 805baaa:	d112      	bne.n	805bad2 <_set_power_to_hp_idle+0xa6>
 805baac:	7afb      	ldrb	r3, [r7, #11]
 805baae:	2b01      	cmp	r3, #1
 805bab0:	d004      	beq.n	805babc <_set_power_to_hp_idle+0x90>
 805bab2:	687b      	ldr	r3, [r7, #4]
 805bab4:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 805bab8:	2b00      	cmp	r3, #0
 805baba:	d00c      	beq.n	805bad6 <_set_power_to_hp_idle+0xaa>
 805babc:	6878      	ldr	r0, [r7, #4]
 805babe:	f000 f9d1 	bl	805be64 <vl53l5_check_map_version>
 805bac2:	60f8      	str	r0, [r7, #12]
 805bac4:	68fb      	ldr	r3, [r7, #12]
 805bac6:	2b00      	cmp	r3, #0
 805bac8:	e005      	b.n	805bad6 <_set_power_to_hp_idle+0xaa>
 805baca:	bf00      	nop
 805bacc:	e004      	b.n	805bad8 <_set_power_to_hp_idle+0xac>
 805bace:	bf00      	nop
 805bad0:	e002      	b.n	805bad8 <_set_power_to_hp_idle+0xac>
 805bad2:	bf00      	nop
 805bad4:	e000      	b.n	805bad8 <_set_power_to_hp_idle+0xac>
 805bad6:	bf00      	nop
 805bad8:	68fb      	ldr	r3, [r7, #12]
 805bada:	4618      	mov	r0, r3
 805badc:	3710      	adds	r7, #16
 805bade:	46bd      	mov	sp, r7
 805bae0:	bd80      	pop	{r7, pc}

0805bae2 <_set_power_to_lp_idle_comms>:
 805bae2:	b580      	push	{r7, lr}
 805bae4:	b084      	sub	sp, #16
 805bae6:	af00      	add	r7, sp, #0
 805bae8:	6078      	str	r0, [r7, #4]
 805baea:	2300      	movs	r3, #0
 805baec:	60fb      	str	r3, [r7, #12]
 805baee:	687b      	ldr	r3, [r7, #4]
 805baf0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 805baf4:	72fb      	strb	r3, [r7, #11]
 805baf6:	2301      	movs	r3, #1
 805baf8:	72bb      	strb	r3, [r7, #10]
 805bafa:	687b      	ldr	r3, [r7, #4]
 805bafc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 805bb00:	2b03      	cmp	r3, #3
 805bb02:	d034      	beq.n	805bb6e <_set_power_to_lp_idle_comms+0x8c>
 805bb04:	7afb      	ldrb	r3, [r7, #11]
 805bb06:	2b01      	cmp	r3, #1
 805bb08:	d106      	bne.n	805bb18 <_set_power_to_lp_idle_comms+0x36>
 805bb0a:	6878      	ldr	r0, [r7, #4]
 805bb0c:	f7ff ff8e 	bl	805ba2c <_set_power_to_hp_idle>
 805bb10:	60f8      	str	r0, [r7, #12]
 805bb12:	68fb      	ldr	r3, [r7, #12]
 805bb14:	2b00      	cmp	r3, #0
 805bb16:	db2c      	blt.n	805bb72 <_set_power_to_lp_idle_comms+0x90>
 805bb18:	7abb      	ldrb	r3, [r7, #10]
 805bb1a:	2b00      	cmp	r3, #0
 805bb1c:	d007      	beq.n	805bb2e <_set_power_to_lp_idle_comms+0x4c>
 805bb1e:	2100      	movs	r1, #0
 805bb20:	6878      	ldr	r0, [r7, #4]
 805bb22:	f001 f867 	bl	805cbf4 <vl53l5_set_page>
 805bb26:	60f8      	str	r0, [r7, #12]
 805bb28:	68fb      	ldr	r3, [r7, #12]
 805bb2a:	2b00      	cmp	r3, #0
 805bb2c:	db23      	blt.n	805bb76 <_set_power_to_lp_idle_comms+0x94>
 805bb2e:	687b      	ldr	r3, [r7, #4]
 805bb30:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 805bb34:	2b04      	cmp	r3, #4
 805bb36:	d006      	beq.n	805bb46 <_set_power_to_lp_idle_comms+0x64>
 805bb38:	6878      	ldr	r0, [r7, #4]
 805bb3a:	f7ff fed2 	bl	805b8e2 <_go_to_hp_idle>
 805bb3e:	60f8      	str	r0, [r7, #12]
 805bb40:	68fb      	ldr	r3, [r7, #12]
 805bb42:	2b00      	cmp	r3, #0
 805bb44:	db04      	blt.n	805bb50 <_set_power_to_lp_idle_comms+0x6e>
 805bb46:	6878      	ldr	r0, [r7, #4]
 805bb48:	f7ff ff24 	bl	805b994 <_go_to_lp_idle_comms>
 805bb4c:	60f8      	str	r0, [r7, #12]
 805bb4e:	e000      	b.n	805bb52 <_set_power_to_lp_idle_comms+0x70>
 805bb50:	bf00      	nop
 805bb52:	68fb      	ldr	r3, [r7, #12]
 805bb54:	2b00      	cmp	r3, #0
 805bb56:	da04      	bge.n	805bb62 <_set_power_to_lp_idle_comms+0x80>
 805bb58:	2102      	movs	r1, #2
 805bb5a:	6878      	ldr	r0, [r7, #4]
 805bb5c:	f001 f84a 	bl	805cbf4 <vl53l5_set_page>
 805bb60:	e00a      	b.n	805bb78 <_set_power_to_lp_idle_comms+0x96>
 805bb62:	2102      	movs	r1, #2
 805bb64:	6878      	ldr	r0, [r7, #4]
 805bb66:	f001 f845 	bl	805cbf4 <vl53l5_set_page>
 805bb6a:	60f8      	str	r0, [r7, #12]
 805bb6c:	e004      	b.n	805bb78 <_set_power_to_lp_idle_comms+0x96>
 805bb6e:	bf00      	nop
 805bb70:	e002      	b.n	805bb78 <_set_power_to_lp_idle_comms+0x96>
 805bb72:	bf00      	nop
 805bb74:	e000      	b.n	805bb78 <_set_power_to_lp_idle_comms+0x96>
 805bb76:	bf00      	nop
 805bb78:	68fb      	ldr	r3, [r7, #12]
 805bb7a:	4618      	mov	r0, r3
 805bb7c:	3710      	adds	r7, #16
 805bb7e:	46bd      	mov	sp, r7
 805bb80:	bd80      	pop	{r7, pc}

0805bb82 <_set_power_to_ulp_idle>:
 805bb82:	b580      	push	{r7, lr}
 805bb84:	b084      	sub	sp, #16
 805bb86:	af00      	add	r7, sp, #0
 805bb88:	6078      	str	r0, [r7, #4]
 805bb8a:	2300      	movs	r3, #0
 805bb8c:	60fb      	str	r3, [r7, #12]
 805bb8e:	2301      	movs	r3, #1
 805bb90:	72fb      	strb	r3, [r7, #11]
 805bb92:	687b      	ldr	r3, [r7, #4]
 805bb94:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 805bb98:	2b01      	cmp	r3, #1
 805bb9a:	d02c      	beq.n	805bbf6 <_set_power_to_ulp_idle+0x74>
 805bb9c:	7afb      	ldrb	r3, [r7, #11]
 805bb9e:	2b00      	cmp	r3, #0
 805bba0:	d007      	beq.n	805bbb2 <_set_power_to_ulp_idle+0x30>
 805bba2:	2100      	movs	r1, #0
 805bba4:	6878      	ldr	r0, [r7, #4]
 805bba6:	f001 f825 	bl	805cbf4 <vl53l5_set_page>
 805bbaa:	60f8      	str	r0, [r7, #12]
 805bbac:	68fb      	ldr	r3, [r7, #12]
 805bbae:	2b00      	cmp	r3, #0
 805bbb0:	db23      	blt.n	805bbfa <_set_power_to_ulp_idle+0x78>
 805bbb2:	687b      	ldr	r3, [r7, #4]
 805bbb4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 805bbb8:	2b04      	cmp	r3, #4
 805bbba:	d006      	beq.n	805bbca <_set_power_to_ulp_idle+0x48>
 805bbbc:	6878      	ldr	r0, [r7, #4]
 805bbbe:	f7ff fe90 	bl	805b8e2 <_go_to_hp_idle>
 805bbc2:	60f8      	str	r0, [r7, #12]
 805bbc4:	68fb      	ldr	r3, [r7, #12]
 805bbc6:	2b00      	cmp	r3, #0
 805bbc8:	db06      	blt.n	805bbd8 <_set_power_to_ulp_idle+0x56>
 805bbca:	6878      	ldr	r0, [r7, #4]
 805bbcc:	f7ff ff07 	bl	805b9de <_go_to_ulp_idle>
 805bbd0:	60f8      	str	r0, [r7, #12]
 805bbd2:	68fb      	ldr	r3, [r7, #12]
 805bbd4:	2b00      	cmp	r3, #0
 805bbd6:	e000      	b.n	805bbda <_set_power_to_ulp_idle+0x58>
 805bbd8:	bf00      	nop
 805bbda:	68fb      	ldr	r3, [r7, #12]
 805bbdc:	2b00      	cmp	r3, #0
 805bbde:	da04      	bge.n	805bbea <_set_power_to_ulp_idle+0x68>
 805bbe0:	2102      	movs	r1, #2
 805bbe2:	6878      	ldr	r0, [r7, #4]
 805bbe4:	f001 f806 	bl	805cbf4 <vl53l5_set_page>
 805bbe8:	e008      	b.n	805bbfc <_set_power_to_ulp_idle+0x7a>
 805bbea:	2102      	movs	r1, #2
 805bbec:	6878      	ldr	r0, [r7, #4]
 805bbee:	f001 f801 	bl	805cbf4 <vl53l5_set_page>
 805bbf2:	60f8      	str	r0, [r7, #12]
 805bbf4:	e002      	b.n	805bbfc <_set_power_to_ulp_idle+0x7a>
 805bbf6:	bf00      	nop
 805bbf8:	e000      	b.n	805bbfc <_set_power_to_ulp_idle+0x7a>
 805bbfa:	bf00      	nop
 805bbfc:	68fb      	ldr	r3, [r7, #12]
 805bbfe:	4618      	mov	r0, r3
 805bc00:	3710      	adds	r7, #16
 805bc02:	46bd      	mov	sp, r7
 805bc04:	bd80      	pop	{r7, pc}

0805bc06 <vl53l5_decode_range_data>:
 805bc06:	b580      	push	{r7, lr}
 805bc08:	b084      	sub	sp, #16
 805bc0a:	af00      	add	r7, sp, #0
 805bc0c:	6078      	str	r0, [r7, #4]
 805bc0e:	6039      	str	r1, [r7, #0]
 805bc10:	2300      	movs	r3, #0
 805bc12:	60fb      	str	r3, [r7, #12]
 805bc14:	687b      	ldr	r3, [r7, #4]
 805bc16:	2b00      	cmp	r3, #0
 805bc18:	d103      	bne.n	805bc22 <vl53l5_decode_range_data+0x1c>
 805bc1a:	f06f 0303 	mvn.w	r3, #3
 805bc1e:	60fb      	str	r3, [r7, #12]
 805bc20:	e024      	b.n	805bc6c <vl53l5_decode_range_data+0x66>
 805bc22:	683b      	ldr	r3, [r7, #0]
 805bc24:	2b00      	cmp	r3, #0
 805bc26:	d103      	bne.n	805bc30 <vl53l5_decode_range_data+0x2a>
 805bc28:	f06f 0303 	mvn.w	r3, #3
 805bc2c:	60fb      	str	r3, [r7, #12]
 805bc2e:	e01d      	b.n	805bc6c <vl53l5_decode_range_data+0x66>
 805bc30:	687b      	ldr	r3, [r7, #4]
 805bc32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 805bc34:	2b00      	cmp	r3, #0
 805bc36:	d103      	bne.n	805bc40 <vl53l5_decode_range_data+0x3a>
 805bc38:	f06f 0303 	mvn.w	r3, #3
 805bc3c:	60fb      	str	r3, [r7, #12]
 805bc3e:	e015      	b.n	805bc6c <vl53l5_decode_range_data+0x66>
 805bc40:	687b      	ldr	r3, [r7, #4]
 805bc42:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 805bc46:	2b00      	cmp	r3, #0
 805bc48:	d001      	beq.n	805bc4e <vl53l5_decode_range_data+0x48>
 805bc4a:	2300      	movs	r3, #0
 805bc4c:	e001      	b.n	805bc52 <vl53l5_decode_range_data+0x4c>
 805bc4e:	f06f 0362 	mvn.w	r3, #98	; 0x62
 805bc52:	60fb      	str	r3, [r7, #12]
 805bc54:	68fb      	ldr	r3, [r7, #12]
 805bc56:	2b00      	cmp	r3, #0
 805bc58:	db07      	blt.n	805bc6a <vl53l5_decode_range_data+0x64>
 805bc5a:	683a      	ldr	r2, [r7, #0]
 805bc5c:	687b      	ldr	r3, [r7, #4]
 805bc5e:	651a      	str	r2, [r3, #80]	; 0x50
 805bc60:	6878      	ldr	r0, [r7, #4]
 805bc62:	f001 fc50 	bl	805d506 <vl53l5_dci_decode_range_data>
 805bc66:	60f8      	str	r0, [r7, #12]
 805bc68:	e000      	b.n	805bc6c <vl53l5_decode_range_data+0x66>
 805bc6a:	bf00      	nop
 805bc6c:	687b      	ldr	r3, [r7, #4]
 805bc6e:	2b00      	cmp	r3, #0
 805bc70:	d002      	beq.n	805bc78 <vl53l5_decode_range_data+0x72>
 805bc72:	687b      	ldr	r3, [r7, #4]
 805bc74:	2200      	movs	r2, #0
 805bc76:	651a      	str	r2, [r3, #80]	; 0x50
 805bc78:	68fb      	ldr	r3, [r7, #12]
 805bc7a:	4618      	mov	r0, r3
 805bc7c:	3710      	adds	r7, #16
 805bc7e:	46bd      	mov	sp, r7
 805bc80:	bd80      	pop	{r7, pc}

0805bc82 <vl53l5_check_data_ready>:
 805bc82:	b580      	push	{r7, lr}
 805bc84:	b084      	sub	sp, #16
 805bc86:	af00      	add	r7, sp, #0
 805bc88:	6078      	str	r0, [r7, #4]
 805bc8a:	2300      	movs	r3, #0
 805bc8c:	60fb      	str	r3, [r7, #12]
 805bc8e:	2300      	movs	r3, #0
 805bc90:	72fb      	strb	r3, [r7, #11]
 805bc92:	687b      	ldr	r3, [r7, #4]
 805bc94:	2b00      	cmp	r3, #0
 805bc96:	d103      	bne.n	805bca0 <vl53l5_check_data_ready+0x1e>
 805bc98:	f06f 0303 	mvn.w	r3, #3
 805bc9c:	60fb      	str	r3, [r7, #12]
 805bc9e:	e034      	b.n	805bd0a <vl53l5_check_data_ready+0x88>
 805bca0:	687b      	ldr	r3, [r7, #4]
 805bca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 805bca4:	2b00      	cmp	r3, #0
 805bca6:	d103      	bne.n	805bcb0 <vl53l5_check_data_ready+0x2e>
 805bca8:	f06f 0303 	mvn.w	r3, #3
 805bcac:	60fb      	str	r3, [r7, #12]
 805bcae:	e02c      	b.n	805bd0a <vl53l5_check_data_ready+0x88>
 805bcb0:	687b      	ldr	r3, [r7, #4]
 805bcb2:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 805bcb6:	2b00      	cmp	r3, #0
 805bcb8:	d001      	beq.n	805bcbe <vl53l5_check_data_ready+0x3c>
 805bcba:	2300      	movs	r3, #0
 805bcbc:	e001      	b.n	805bcc2 <vl53l5_check_data_ready+0x40>
 805bcbe:	f06f 0362 	mvn.w	r3, #98	; 0x62
 805bcc2:	60fb      	str	r3, [r7, #12]
 805bcc4:	68fb      	ldr	r3, [r7, #12]
 805bcc6:	2b00      	cmp	r3, #0
 805bcc8:	db1c      	blt.n	805bd04 <vl53l5_check_data_ready+0x82>
 805bcca:	687b      	ldr	r3, [r7, #4]
 805bccc:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 805bcd0:	72fb      	strb	r3, [r7, #11]
 805bcd2:	6878      	ldr	r0, [r7, #4]
 805bcd4:	f001 fed6 	bl	805da84 <vl53l5_dci_get_device_info>
 805bcd8:	60f8      	str	r0, [r7, #12]
 805bcda:	68fb      	ldr	r3, [r7, #12]
 805bcdc:	2b00      	cmp	r3, #0
 805bcde:	db0b      	blt.n	805bcf8 <vl53l5_check_data_ready+0x76>
 805bce0:	7af9      	ldrb	r1, [r7, #11]
 805bce2:	2301      	movs	r3, #1
 805bce4:	2201      	movs	r2, #1
 805bce6:	6878      	ldr	r0, [r7, #4]
 805bce8:	f001 fef3 	bl	805dad2 <vl53l5_dci_check_device_info>
 805bcec:	60f8      	str	r0, [r7, #12]
 805bcee:	68fb      	ldr	r3, [r7, #12]
 805bcf0:	f113 0f3a 	cmn.w	r3, #58	; 0x3a
 805bcf4:	d008      	beq.n	805bd08 <vl53l5_check_data_ready+0x86>
 805bcf6:	e000      	b.n	805bcfa <vl53l5_check_data_ready+0x78>
 805bcf8:	bf00      	nop
 805bcfa:	687b      	ldr	r3, [r7, #4]
 805bcfc:	7afa      	ldrb	r2, [r7, #11]
 805bcfe:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
 805bd02:	e002      	b.n	805bd0a <vl53l5_check_data_ready+0x88>
 805bd04:	bf00      	nop
 805bd06:	e000      	b.n	805bd0a <vl53l5_check_data_ready+0x88>
 805bd08:	bf00      	nop
 805bd0a:	68fb      	ldr	r3, [r7, #12]
 805bd0c:	f113 0f3a 	cmn.w	r3, #58	; 0x3a
 805bd10:	d003      	beq.n	805bd1a <vl53l5_check_data_ready+0x98>
 805bd12:	2b00      	cmp	r3, #0
 805bd14:	d001      	beq.n	805bd1a <vl53l5_check_data_ready+0x98>
 805bd16:	f113 0f59 	cmn.w	r3, #89	; 0x59
 805bd1a:	bf00      	nop
 805bd1c:	68fb      	ldr	r3, [r7, #12]
 805bd1e:	4618      	mov	r0, r3
 805bd20:	3710      	adds	r7, #16
 805bd22:	46bd      	mov	sp, r7
 805bd24:	bd80      	pop	{r7, pc}

0805bd26 <vl53l5_get_range_data>:
 805bd26:	b580      	push	{r7, lr}
 805bd28:	b084      	sub	sp, #16
 805bd2a:	af00      	add	r7, sp, #0
 805bd2c:	6078      	str	r0, [r7, #4]
 805bd2e:	2300      	movs	r3, #0
 805bd30:	60fb      	str	r3, [r7, #12]
 805bd32:	687b      	ldr	r3, [r7, #4]
 805bd34:	2b00      	cmp	r3, #0
 805bd36:	d103      	bne.n	805bd40 <vl53l5_get_range_data+0x1a>
 805bd38:	f06f 0303 	mvn.w	r3, #3
 805bd3c:	60fb      	str	r3, [r7, #12]
 805bd3e:	e01a      	b.n	805bd76 <vl53l5_get_range_data+0x50>
 805bd40:	687b      	ldr	r3, [r7, #4]
 805bd42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 805bd44:	2b00      	cmp	r3, #0
 805bd46:	d103      	bne.n	805bd50 <vl53l5_get_range_data+0x2a>
 805bd48:	f06f 0303 	mvn.w	r3, #3
 805bd4c:	60fb      	str	r3, [r7, #12]
 805bd4e:	e012      	b.n	805bd76 <vl53l5_get_range_data+0x50>
 805bd50:	687b      	ldr	r3, [r7, #4]
 805bd52:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 805bd56:	2b00      	cmp	r3, #0
 805bd58:	d001      	beq.n	805bd5e <vl53l5_get_range_data+0x38>
 805bd5a:	2300      	movs	r3, #0
 805bd5c:	e001      	b.n	805bd62 <vl53l5_get_range_data+0x3c>
 805bd5e:	f06f 0362 	mvn.w	r3, #98	; 0x62
 805bd62:	60fb      	str	r3, [r7, #12]
 805bd64:	68fb      	ldr	r3, [r7, #12]
 805bd66:	2b00      	cmp	r3, #0
 805bd68:	db04      	blt.n	805bd74 <vl53l5_get_range_data+0x4e>
 805bd6a:	6878      	ldr	r0, [r7, #4]
 805bd6c:	f001 fe38 	bl	805d9e0 <vl53l5_dci_read_range>
 805bd70:	60f8      	str	r0, [r7, #12]
 805bd72:	e000      	b.n	805bd76 <vl53l5_get_range_data+0x50>
 805bd74:	bf00      	nop
 805bd76:	68fb      	ldr	r3, [r7, #12]
 805bd78:	4618      	mov	r0, r3
 805bd7a:	3710      	adds	r7, #16
 805bd7c:	46bd      	mov	sp, r7
 805bd7e:	bd80      	pop	{r7, pc}

0805bd80 <_test_end_block>:
 805bd80:	b480      	push	{r7}
 805bd82:	b087      	sub	sp, #28
 805bd84:	af00      	add	r7, sp, #0
 805bd86:	6078      	str	r0, [r7, #4]
 805bd88:	2300      	movs	r3, #0
 805bd8a:	613b      	str	r3, [r7, #16]
 805bd8c:	2300      	movs	r3, #0
 805bd8e:	617b      	str	r3, [r7, #20]
 805bd90:	2308      	movs	r3, #8
 805bd92:	60fb      	str	r3, [r7, #12]
 805bd94:	687b      	ldr	r3, [r7, #4]
 805bd96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 805bd98:	613b      	str	r3, [r7, #16]
 805bd9a:	693a      	ldr	r2, [r7, #16]
 805bd9c:	68fb      	ldr	r3, [r7, #12]
 805bd9e:	4413      	add	r3, r2
 805bda0:	781b      	ldrb	r3, [r3, #0]
 805bda2:	f003 030f 	and.w	r3, r3, #15
 805bda6:	2b0f      	cmp	r3, #15
 805bda8:	d002      	beq.n	805bdb0 <_test_end_block+0x30>
 805bdaa:	f06f 0350 	mvn.w	r3, #80	; 0x50
 805bdae:	617b      	str	r3, [r7, #20]
 805bdb0:	697b      	ldr	r3, [r7, #20]
 805bdb2:	4618      	mov	r0, r3
 805bdb4:	371c      	adds	r7, #28
 805bdb6:	46bd      	mov	sp, r7
 805bdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 805bdbc:	4770      	bx	lr
	...

0805bdc0 <vl53l5_test_map_version>:
 805bdc0:	b580      	push	{r7, lr}
 805bdc2:	b086      	sub	sp, #24
 805bdc4:	af00      	add	r7, sp, #0
 805bdc6:	6078      	str	r0, [r7, #4]
 805bdc8:	2300      	movs	r3, #0
 805bdca:	617b      	str	r3, [r7, #20]
 805bdcc:	2300      	movs	r3, #0
 805bdce:	613b      	str	r3, [r7, #16]
 805bdd0:	2300      	movs	r3, #0
 805bdd2:	81fb      	strh	r3, [r7, #14]
 805bdd4:	2300      	movs	r3, #0
 805bdd6:	81bb      	strh	r3, [r7, #12]
 805bdd8:	2300      	movs	r3, #0
 805bdda:	60bb      	str	r3, [r7, #8]
 805bddc:	687b      	ldr	r3, [r7, #4]
 805bdde:	2b00      	cmp	r3, #0
 805bde0:	d103      	bne.n	805bdea <vl53l5_test_map_version+0x2a>
 805bde2:	f06f 0303 	mvn.w	r3, #3
 805bde6:	617b      	str	r3, [r7, #20]
 805bde8:	e034      	b.n	805be54 <vl53l5_test_map_version+0x94>
 805bdea:	687b      	ldr	r3, [r7, #4]
 805bdec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 805bdee:	2b00      	cmp	r3, #0
 805bdf0:	d103      	bne.n	805bdfa <vl53l5_test_map_version+0x3a>
 805bdf2:	f06f 0303 	mvn.w	r3, #3
 805bdf6:	617b      	str	r3, [r7, #20]
 805bdf8:	e02c      	b.n	805be54 <vl53l5_test_map_version+0x94>
 805bdfa:	687b      	ldr	r3, [r7, #4]
 805bdfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 805bdfe:	613b      	str	r3, [r7, #16]
 805be00:	6939      	ldr	r1, [r7, #16]
 805be02:	2004      	movs	r0, #4
 805be04:	f002 f850 	bl	805dea8 <vl53l5_decode_uint32_t>
 805be08:	60b8      	str	r0, [r7, #8]
 805be0a:	68bb      	ldr	r3, [r7, #8]
 805be0c:	4a14      	ldr	r2, [pc, #80]	; (805be60 <vl53l5_test_map_version+0xa0>)
 805be0e:	4293      	cmp	r3, r2
 805be10:	d003      	beq.n	805be1a <vl53l5_test_map_version+0x5a>
 805be12:	f06f 0348 	mvn.w	r3, #72	; 0x48
 805be16:	617b      	str	r3, [r7, #20]
 805be18:	e01c      	b.n	805be54 <vl53l5_test_map_version+0x94>
 805be1a:	693b      	ldr	r3, [r7, #16]
 805be1c:	3304      	adds	r3, #4
 805be1e:	613b      	str	r3, [r7, #16]
 805be20:	6939      	ldr	r1, [r7, #16]
 805be22:	2002      	movs	r0, #2
 805be24:	f001 ffa6 	bl	805dd74 <vl53l5_decode_uint16_t>
 805be28:	4603      	mov	r3, r0
 805be2a:	81fb      	strh	r3, [r7, #14]
 805be2c:	693b      	ldr	r3, [r7, #16]
 805be2e:	3302      	adds	r3, #2
 805be30:	613b      	str	r3, [r7, #16]
 805be32:	6939      	ldr	r1, [r7, #16]
 805be34:	2002      	movs	r0, #2
 805be36:	f001 ff9d 	bl	805dd74 <vl53l5_decode_uint16_t>
 805be3a:	4603      	mov	r3, r0
 805be3c:	81bb      	strh	r3, [r7, #12]
 805be3e:	89fb      	ldrh	r3, [r7, #14]
 805be40:	2b0a      	cmp	r3, #10
 805be42:	d102      	bne.n	805be4a <vl53l5_test_map_version+0x8a>
 805be44:	89bb      	ldrh	r3, [r7, #12]
 805be46:	2b05      	cmp	r3, #5
 805be48:	d003      	beq.n	805be52 <vl53l5_test_map_version+0x92>
 805be4a:	f06f 034d 	mvn.w	r3, #77	; 0x4d
 805be4e:	617b      	str	r3, [r7, #20]
 805be50:	e000      	b.n	805be54 <vl53l5_test_map_version+0x94>
 805be52:	bf00      	nop
 805be54:	697b      	ldr	r3, [r7, #20]
 805be56:	4618      	mov	r0, r3
 805be58:	3718      	adds	r7, #24
 805be5a:	46bd      	mov	sp, r7
 805be5c:	bd80      	pop	{r7, pc}
 805be5e:	bf00      	nop
 805be60:	54000040 	.word	0x54000040

0805be64 <vl53l5_check_map_version>:
 805be64:	b580      	push	{r7, lr}
 805be66:	b084      	sub	sp, #16
 805be68:	af00      	add	r7, sp, #0
 805be6a:	6078      	str	r0, [r7, #4]
 805be6c:	2300      	movs	r3, #0
 805be6e:	60fb      	str	r3, [r7, #12]
 805be70:	4b1b      	ldr	r3, [pc, #108]	; (805bee0 <vl53l5_check_map_version+0x7c>)
 805be72:	60bb      	str	r3, [r7, #8]
 805be74:	687b      	ldr	r3, [r7, #4]
 805be76:	2200      	movs	r2, #0
 805be78:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 805be7c:	f107 0108 	add.w	r1, r7, #8
 805be80:	2300      	movs	r3, #0
 805be82:	2201      	movs	r2, #1
 805be84:	6878      	ldr	r0, [r7, #4]
 805be86:	f000 f82d 	bl	805bee4 <vl53l5_encode_block_headers>
 805be8a:	60f8      	str	r0, [r7, #12]
 805be8c:	68fb      	ldr	r3, [r7, #12]
 805be8e:	2b00      	cmp	r3, #0
 805be90:	d11a      	bne.n	805bec8 <vl53l5_check_map_version+0x64>
 805be92:	2102      	movs	r1, #2
 805be94:	6878      	ldr	r0, [r7, #4]
 805be96:	f000 f8a7 	bl	805bfe8 <vl53l5_execute_command>
 805be9a:	60f8      	str	r0, [r7, #12]
 805be9c:	68fb      	ldr	r3, [r7, #12]
 805be9e:	2b00      	cmp	r3, #0
 805bea0:	d114      	bne.n	805becc <vl53l5_check_map_version+0x68>
 805bea2:	6878      	ldr	r0, [r7, #4]
 805bea4:	f7ff ff6c 	bl	805bd80 <_test_end_block>
 805bea8:	60f8      	str	r0, [r7, #12]
 805beaa:	68fb      	ldr	r3, [r7, #12]
 805beac:	2b00      	cmp	r3, #0
 805beae:	d10f      	bne.n	805bed0 <vl53l5_check_map_version+0x6c>
 805beb0:	6878      	ldr	r0, [r7, #4]
 805beb2:	f7ff ff85 	bl	805bdc0 <vl53l5_test_map_version>
 805beb6:	60f8      	str	r0, [r7, #12]
 805beb8:	68fb      	ldr	r3, [r7, #12]
 805beba:	2b00      	cmp	r3, #0
 805bebc:	d10a      	bne.n	805bed4 <vl53l5_check_map_version+0x70>
 805bebe:	687b      	ldr	r3, [r7, #4]
 805bec0:	2201      	movs	r2, #1
 805bec2:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 805bec6:	e006      	b.n	805bed6 <vl53l5_check_map_version+0x72>
 805bec8:	bf00      	nop
 805beca:	e004      	b.n	805bed6 <vl53l5_check_map_version+0x72>
 805becc:	bf00      	nop
 805bece:	e002      	b.n	805bed6 <vl53l5_check_map_version+0x72>
 805bed0:	bf00      	nop
 805bed2:	e000      	b.n	805bed6 <vl53l5_check_map_version+0x72>
 805bed4:	bf00      	nop
 805bed6:	68fb      	ldr	r3, [r7, #12]
 805bed8:	4618      	mov	r0, r3
 805beda:	3710      	adds	r7, #16
 805bedc:	46bd      	mov	sp, r7
 805bede:	bd80      	pop	{r7, pc}
 805bee0:	54000040 	.word	0x54000040

0805bee4 <vl53l5_encode_block_headers>:
 805bee4:	b580      	push	{r7, lr}
 805bee6:	b088      	sub	sp, #32
 805bee8:	af00      	add	r7, sp, #0
 805beea:	60f8      	str	r0, [r7, #12]
 805beec:	60b9      	str	r1, [r7, #8]
 805beee:	607a      	str	r2, [r7, #4]
 805bef0:	70fb      	strb	r3, [r7, #3]
 805bef2:	2300      	movs	r3, #0
 805bef4:	61fb      	str	r3, [r7, #28]
 805bef6:	687b      	ldr	r3, [r7, #4]
 805bef8:	61bb      	str	r3, [r7, #24]
 805befa:	2300      	movs	r3, #0
 805befc:	617b      	str	r3, [r7, #20]
 805befe:	68fb      	ldr	r3, [r7, #12]
 805bf00:	2b00      	cmp	r3, #0
 805bf02:	d103      	bne.n	805bf0c <vl53l5_encode_block_headers+0x28>
 805bf04:	f06f 0303 	mvn.w	r3, #3
 805bf08:	61fb      	str	r3, [r7, #28]
 805bf0a:	e065      	b.n	805bfd8 <vl53l5_encode_block_headers+0xf4>
 805bf0c:	68bb      	ldr	r3, [r7, #8]
 805bf0e:	2b00      	cmp	r3, #0
 805bf10:	d103      	bne.n	805bf1a <vl53l5_encode_block_headers+0x36>
 805bf12:	f06f 0303 	mvn.w	r3, #3
 805bf16:	61fb      	str	r3, [r7, #28]
 805bf18:	e05e      	b.n	805bfd8 <vl53l5_encode_block_headers+0xf4>
 805bf1a:	687b      	ldr	r3, [r7, #4]
 805bf1c:	2b00      	cmp	r3, #0
 805bf1e:	d103      	bne.n	805bf28 <vl53l5_encode_block_headers+0x44>
 805bf20:	f06f 0303 	mvn.w	r3, #3
 805bf24:	61fb      	str	r3, [r7, #28]
 805bf26:	e057      	b.n	805bfd8 <vl53l5_encode_block_headers+0xf4>
 805bf28:	68fb      	ldr	r3, [r7, #12]
 805bf2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 805bf2c:	2b00      	cmp	r3, #0
 805bf2e:	d103      	bne.n	805bf38 <vl53l5_encode_block_headers+0x54>
 805bf30:	f06f 0303 	mvn.w	r3, #3
 805bf34:	61fb      	str	r3, [r7, #28]
 805bf36:	e04f      	b.n	805bfd8 <vl53l5_encode_block_headers+0xf4>
 805bf38:	78fb      	ldrb	r3, [r7, #3]
 805bf3a:	2b00      	cmp	r3, #0
 805bf3c:	d002      	beq.n	805bf44 <vl53l5_encode_block_headers+0x60>
 805bf3e:	69bb      	ldr	r3, [r7, #24]
 805bf40:	3301      	adds	r3, #1
 805bf42:	61bb      	str	r3, [r7, #24]
 805bf44:	69bb      	ldr	r3, [r7, #24]
 805bf46:	009a      	lsls	r2, r3, #2
 805bf48:	68fb      	ldr	r3, [r7, #12]
 805bf4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 805bf4c:	429a      	cmp	r2, r3
 805bf4e:	d903      	bls.n	805bf58 <vl53l5_encode_block_headers+0x74>
 805bf50:	f06f 035b 	mvn.w	r3, #91	; 0x5b
 805bf54:	61fb      	str	r3, [r7, #28]
 805bf56:	e03f      	b.n	805bfd8 <vl53l5_encode_block_headers+0xf4>
 805bf58:	68fb      	ldr	r3, [r7, #12]
 805bf5a:	2200      	movs	r2, #0
 805bf5c:	631a      	str	r2, [r3, #48]	; 0x30
 805bf5e:	78fb      	ldrb	r3, [r7, #3]
 805bf60:	2b00      	cmp	r3, #0
 805bf62:	d00e      	beq.n	805bf82 <vl53l5_encode_block_headers+0x9e>
 805bf64:	68fb      	ldr	r3, [r7, #12]
 805bf66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 805bf68:	68fb      	ldr	r3, [r7, #12]
 805bf6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 805bf6c:	4413      	add	r3, r2
 805bf6e:	461a      	mov	r2, r3
 805bf70:	2104      	movs	r1, #4
 805bf72:	481c      	ldr	r0, [pc, #112]	; (805bfe4 <vl53l5_encode_block_headers+0x100>)
 805bf74:	f001 ff72 	bl	805de5c <vl53l5_encode_uint32_t>
 805bf78:	68fb      	ldr	r3, [r7, #12]
 805bf7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 805bf7c:	1d1a      	adds	r2, r3, #4
 805bf7e:	68fb      	ldr	r3, [r7, #12]
 805bf80:	631a      	str	r2, [r3, #48]	; 0x30
 805bf82:	2300      	movs	r3, #0
 805bf84:	617b      	str	r3, [r7, #20]
 805bf86:	e022      	b.n	805bfce <vl53l5_encode_block_headers+0xea>
 805bf88:	697b      	ldr	r3, [r7, #20]
 805bf8a:	009b      	lsls	r3, r3, #2
 805bf8c:	68ba      	ldr	r2, [r7, #8]
 805bf8e:	4413      	add	r3, r2
 805bf90:	681b      	ldr	r3, [r3, #0]
 805bf92:	4a14      	ldr	r2, [pc, #80]	; (805bfe4 <vl53l5_encode_block_headers+0x100>)
 805bf94:	4293      	cmp	r3, r2
 805bf96:	d102      	bne.n	805bf9e <vl53l5_encode_block_headers+0xba>
 805bf98:	78fb      	ldrb	r3, [r7, #3]
 805bf9a:	2b00      	cmp	r3, #0
 805bf9c:	d113      	bne.n	805bfc6 <vl53l5_encode_block_headers+0xe2>
 805bf9e:	697b      	ldr	r3, [r7, #20]
 805bfa0:	009b      	lsls	r3, r3, #2
 805bfa2:	68ba      	ldr	r2, [r7, #8]
 805bfa4:	4413      	add	r3, r2
 805bfa6:	6818      	ldr	r0, [r3, #0]
 805bfa8:	68fb      	ldr	r3, [r7, #12]
 805bfaa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 805bfac:	68fb      	ldr	r3, [r7, #12]
 805bfae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 805bfb0:	4413      	add	r3, r2
 805bfb2:	461a      	mov	r2, r3
 805bfb4:	2104      	movs	r1, #4
 805bfb6:	f001 ff51 	bl	805de5c <vl53l5_encode_uint32_t>
 805bfba:	68fb      	ldr	r3, [r7, #12]
 805bfbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 805bfbe:	1d1a      	adds	r2, r3, #4
 805bfc0:	68fb      	ldr	r3, [r7, #12]
 805bfc2:	631a      	str	r2, [r3, #48]	; 0x30
 805bfc4:	e000      	b.n	805bfc8 <vl53l5_encode_block_headers+0xe4>
 805bfc6:	bf00      	nop
 805bfc8:	697b      	ldr	r3, [r7, #20]
 805bfca:	3301      	adds	r3, #1
 805bfcc:	617b      	str	r3, [r7, #20]
 805bfce:	697a      	ldr	r2, [r7, #20]
 805bfd0:	687b      	ldr	r3, [r7, #4]
 805bfd2:	429a      	cmp	r2, r3
 805bfd4:	d3d8      	bcc.n	805bf88 <vl53l5_encode_block_headers+0xa4>
 805bfd6:	bf00      	nop
 805bfd8:	69fb      	ldr	r3, [r7, #28]
 805bfda:	4618      	mov	r0, r3
 805bfdc:	3720      	adds	r7, #32
 805bfde:	46bd      	mov	sp, r7
 805bfe0:	bd80      	pop	{r7, pc}
 805bfe2:	bf00      	nop
 805bfe4:	54000040 	.word	0x54000040

0805bfe8 <vl53l5_execute_command>:
 805bfe8:	b580      	push	{r7, lr}
 805bfea:	b084      	sub	sp, #16
 805bfec:	af00      	add	r7, sp, #0
 805bfee:	6078      	str	r0, [r7, #4]
 805bff0:	460b      	mov	r3, r1
 805bff2:	70fb      	strb	r3, [r7, #3]
 805bff4:	2300      	movs	r3, #0
 805bff6:	60fb      	str	r3, [r7, #12]
 805bff8:	2300      	movs	r3, #0
 805bffa:	72fb      	strb	r3, [r7, #11]
 805bffc:	687b      	ldr	r3, [r7, #4]
 805bffe:	2b00      	cmp	r3, #0
 805c000:	d103      	bne.n	805c00a <vl53l5_execute_command+0x22>
 805c002:	f06f 0303 	mvn.w	r3, #3
 805c006:	60fb      	str	r3, [r7, #12]
 805c008:	e033      	b.n	805c072 <vl53l5_execute_command+0x8a>
 805c00a:	687b      	ldr	r3, [r7, #4]
 805c00c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 805c00e:	2b00      	cmp	r3, #0
 805c010:	d103      	bne.n	805c01a <vl53l5_execute_command+0x32>
 805c012:	f06f 0303 	mvn.w	r3, #3
 805c016:	60fb      	str	r3, [r7, #12]
 805c018:	e02b      	b.n	805c072 <vl53l5_execute_command+0x8a>
 805c01a:	687b      	ldr	r3, [r7, #4]
 805c01c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 805c01e:	1c5a      	adds	r2, r3, #1
 805c020:	687b      	ldr	r3, [r7, #4]
 805c022:	635a      	str	r2, [r3, #52]	; 0x34
 805c024:	687b      	ldr	r3, [r7, #4]
 805c026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 805c028:	72fb      	strb	r3, [r7, #11]
 805c02a:	7afa      	ldrb	r2, [r7, #11]
 805c02c:	78fb      	ldrb	r3, [r7, #3]
 805c02e:	4619      	mov	r1, r3
 805c030:	6878      	ldr	r0, [r7, #4]
 805c032:	f001 f821 	bl	805d078 <vl53l5_dci_write_command>
 805c036:	60f8      	str	r0, [r7, #12]
 805c038:	68fb      	ldr	r3, [r7, #12]
 805c03a:	2b00      	cmp	r3, #0
 805c03c:	d114      	bne.n	805c068 <vl53l5_execute_command+0x80>
 805c03e:	7afb      	ldrb	r3, [r7, #11]
 805c040:	2200      	movs	r2, #0
 805c042:	4619      	mov	r1, r3
 805c044:	6878      	ldr	r0, [r7, #4]
 805c046:	f001 f8c6 	bl	805d1d6 <vl53l5_dci_poll_command_status>
 805c04a:	60f8      	str	r0, [r7, #12]
 805c04c:	68fb      	ldr	r3, [r7, #12]
 805c04e:	2b00      	cmp	r3, #0
 805c050:	d10c      	bne.n	805c06c <vl53l5_execute_command+0x84>
 805c052:	78fb      	ldrb	r3, [r7, #3]
 805c054:	2b02      	cmp	r3, #2
 805c056:	d002      	beq.n	805c05e <vl53l5_execute_command+0x76>
 805c058:	78fb      	ldrb	r3, [r7, #3]
 805c05a:	2b03      	cmp	r3, #3
 805c05c:	d108      	bne.n	805c070 <vl53l5_execute_command+0x88>
 805c05e:	6878      	ldr	r0, [r7, #4]
 805c060:	f001 f88b 	bl	805d17a <vl53l5_dci_read_command>
 805c064:	60f8      	str	r0, [r7, #12]
 805c066:	e004      	b.n	805c072 <vl53l5_execute_command+0x8a>
 805c068:	bf00      	nop
 805c06a:	e002      	b.n	805c072 <vl53l5_execute_command+0x8a>
 805c06c:	bf00      	nop
 805c06e:	e000      	b.n	805c072 <vl53l5_execute_command+0x8a>
 805c070:	bf00      	nop
 805c072:	68fb      	ldr	r3, [r7, #12]
 805c074:	4618      	mov	r0, r3
 805c076:	3710      	adds	r7, #16
 805c078:	46bd      	mov	sp, r7
 805c07a:	bd80      	pop	{r7, pc}

0805c07c <_get_status_struct>:
 805c07c:	b580      	push	{r7, lr}
 805c07e:	b088      	sub	sp, #32
 805c080:	af00      	add	r7, sp, #0
 805c082:	60f8      	str	r0, [r7, #12]
 805c084:	60b9      	str	r1, [r7, #8]
 805c086:	607a      	str	r2, [r7, #4]
 805c088:	2300      	movs	r3, #0
 805c08a:	61fb      	str	r3, [r7, #28]
 805c08c:	2300      	movs	r3, #0
 805c08e:	61bb      	str	r3, [r7, #24]
 805c090:	2300      	movs	r3, #0
 805c092:	617b      	str	r3, [r7, #20]
 805c094:	68fb      	ldr	r3, [r7, #12]
 805c096:	2b00      	cmp	r3, #0
 805c098:	d103      	bne.n	805c0a2 <_get_status_struct+0x26>
 805c09a:	f06f 0303 	mvn.w	r3, #3
 805c09e:	61fb      	str	r3, [r7, #28]
 805c0a0:	e085      	b.n	805c1ae <_get_status_struct+0x132>
 805c0a2:	68bb      	ldr	r3, [r7, #8]
 805c0a4:	2b00      	cmp	r3, #0
 805c0a6:	d103      	bne.n	805c0b0 <_get_status_struct+0x34>
 805c0a8:	f06f 0303 	mvn.w	r3, #3
 805c0ac:	61fb      	str	r3, [r7, #28]
 805c0ae:	e07e      	b.n	805c1ae <_get_status_struct+0x132>
 805c0b0:	68fb      	ldr	r3, [r7, #12]
 805c0b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 805c0b4:	2b00      	cmp	r3, #0
 805c0b6:	d103      	bne.n	805c0c0 <_get_status_struct+0x44>
 805c0b8:	f06f 0303 	mvn.w	r3, #3
 805c0bc:	61fb      	str	r3, [r7, #28]
 805c0be:	e076      	b.n	805c1ae <_get_status_struct+0x132>
 805c0c0:	68fb      	ldr	r3, [r7, #12]
 805c0c2:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 805c0c6:	2b00      	cmp	r3, #0
 805c0c8:	d001      	beq.n	805c0ce <_get_status_struct+0x52>
 805c0ca:	2300      	movs	r3, #0
 805c0cc:	e001      	b.n	805c0d2 <_get_status_struct+0x56>
 805c0ce:	f06f 0362 	mvn.w	r3, #98	; 0x62
 805c0d2:	61fb      	str	r3, [r7, #28]
 805c0d4:	69fb      	ldr	r3, [r7, #28]
 805c0d6:	2b00      	cmp	r3, #0
 805c0d8:	db64      	blt.n	805c1a4 <_get_status_struct+0x128>
 805c0da:	1d39      	adds	r1, r7, #4
 805c0dc:	2300      	movs	r3, #0
 805c0de:	2201      	movs	r2, #1
 805c0e0:	68f8      	ldr	r0, [r7, #12]
 805c0e2:	f7ff feff 	bl	805bee4 <vl53l5_encode_block_headers>
 805c0e6:	61f8      	str	r0, [r7, #28]
 805c0e8:	69fb      	ldr	r3, [r7, #28]
 805c0ea:	2b00      	cmp	r3, #0
 805c0ec:	d15c      	bne.n	805c1a8 <_get_status_struct+0x12c>
 805c0ee:	2102      	movs	r1, #2
 805c0f0:	68f8      	ldr	r0, [r7, #12]
 805c0f2:	f7ff ff79 	bl	805bfe8 <vl53l5_execute_command>
 805c0f6:	61f8      	str	r0, [r7, #28]
 805c0f8:	69fb      	ldr	r3, [r7, #28]
 805c0fa:	2b00      	cmp	r3, #0
 805c0fc:	d156      	bne.n	805c1ac <_get_status_struct+0x130>
 805c0fe:	68fb      	ldr	r3, [r7, #12]
 805c100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 805c102:	617b      	str	r3, [r7, #20]
 805c104:	6979      	ldr	r1, [r7, #20]
 805c106:	2004      	movs	r0, #4
 805c108:	f001 fece 	bl	805dea8 <vl53l5_decode_uint32_t>
 805c10c:	61b8      	str	r0, [r7, #24]
 805c10e:	687b      	ldr	r3, [r7, #4]
 805c110:	69ba      	ldr	r2, [r7, #24]
 805c112:	429a      	cmp	r2, r3
 805c114:	d003      	beq.n	805c11e <_get_status_struct+0xa2>
 805c116:	f06f 0347 	mvn.w	r3, #71	; 0x47
 805c11a:	61fb      	str	r3, [r7, #28]
 805c11c:	e047      	b.n	805c1ae <_get_status_struct+0x132>
 805c11e:	697b      	ldr	r3, [r7, #20]
 805c120:	3304      	adds	r3, #4
 805c122:	617b      	str	r3, [r7, #20]
 805c124:	6979      	ldr	r1, [r7, #20]
 805c126:	2002      	movs	r0, #2
 805c128:	f001 fe44 	bl	805ddb4 <vl53l5_decode_int16_t>
 805c12c:	4603      	mov	r3, r0
 805c12e:	461a      	mov	r2, r3
 805c130:	68bb      	ldr	r3, [r7, #8]
 805c132:	801a      	strh	r2, [r3, #0]
 805c134:	697b      	ldr	r3, [r7, #20]
 805c136:	3302      	adds	r3, #2
 805c138:	617b      	str	r3, [r7, #20]
 805c13a:	6979      	ldr	r1, [r7, #20]
 805c13c:	2002      	movs	r0, #2
 805c13e:	f001 fe39 	bl	805ddb4 <vl53l5_decode_int16_t>
 805c142:	4603      	mov	r3, r0
 805c144:	461a      	mov	r2, r3
 805c146:	68bb      	ldr	r3, [r7, #8]
 805c148:	805a      	strh	r2, [r3, #2]
 805c14a:	697b      	ldr	r3, [r7, #20]
 805c14c:	3302      	adds	r3, #2
 805c14e:	617b      	str	r3, [r7, #20]
 805c150:	6979      	ldr	r1, [r7, #20]
 805c152:	2002      	movs	r0, #2
 805c154:	f001 fe2e 	bl	805ddb4 <vl53l5_decode_int16_t>
 805c158:	4603      	mov	r3, r0
 805c15a:	461a      	mov	r2, r3
 805c15c:	68bb      	ldr	r3, [r7, #8]
 805c15e:	809a      	strh	r2, [r3, #4]
 805c160:	697b      	ldr	r3, [r7, #20]
 805c162:	3302      	adds	r3, #2
 805c164:	617b      	str	r3, [r7, #20]
 805c166:	6979      	ldr	r1, [r7, #20]
 805c168:	2002      	movs	r0, #2
 805c16a:	f001 fe03 	bl	805dd74 <vl53l5_decode_uint16_t>
 805c16e:	4603      	mov	r3, r0
 805c170:	461a      	mov	r2, r3
 805c172:	68bb      	ldr	r3, [r7, #8]
 805c174:	80da      	strh	r2, [r3, #6]
 805c176:	697b      	ldr	r3, [r7, #20]
 805c178:	3302      	adds	r3, #2
 805c17a:	617b      	str	r3, [r7, #20]
 805c17c:	6979      	ldr	r1, [r7, #20]
 805c17e:	2002      	movs	r0, #2
 805c180:	f001 fdf8 	bl	805dd74 <vl53l5_decode_uint16_t>
 805c184:	4603      	mov	r3, r0
 805c186:	461a      	mov	r2, r3
 805c188:	68bb      	ldr	r3, [r7, #8]
 805c18a:	811a      	strh	r2, [r3, #8]
 805c18c:	697b      	ldr	r3, [r7, #20]
 805c18e:	3302      	adds	r3, #2
 805c190:	617b      	str	r3, [r7, #20]
 805c192:	6979      	ldr	r1, [r7, #20]
 805c194:	2002      	movs	r0, #2
 805c196:	f001 fded 	bl	805dd74 <vl53l5_decode_uint16_t>
 805c19a:	4603      	mov	r3, r0
 805c19c:	461a      	mov	r2, r3
 805c19e:	68bb      	ldr	r3, [r7, #8]
 805c1a0:	815a      	strh	r2, [r3, #10]
 805c1a2:	e004      	b.n	805c1ae <_get_status_struct+0x132>
 805c1a4:	bf00      	nop
 805c1a6:	e002      	b.n	805c1ae <_get_status_struct+0x132>
 805c1a8:	bf00      	nop
 805c1aa:	e000      	b.n	805c1ae <_get_status_struct+0x132>
 805c1ac:	bf00      	nop
 805c1ae:	69fb      	ldr	r3, [r7, #28]
 805c1b0:	4618      	mov	r0, r3
 805c1b2:	3720      	adds	r7, #32
 805c1b4:	46bd      	mov	sp, r7
 805c1b6:	bd80      	pop	{r7, pc}

0805c1b8 <vl53l5_check_status_registers>:
 805c1b8:	b580      	push	{r7, lr}
 805c1ba:	b086      	sub	sp, #24
 805c1bc:	af00      	add	r7, sp, #0
 805c1be:	60f8      	str	r0, [r7, #12]
 805c1c0:	60b9      	str	r1, [r7, #8]
 805c1c2:	607a      	str	r2, [r7, #4]
 805c1c4:	70fb      	strb	r3, [r7, #3]
 805c1c6:	2300      	movs	r3, #0
 805c1c8:	617b      	str	r3, [r7, #20]
 805c1ca:	2300      	movs	r3, #0
 805c1cc:	74fb      	strb	r3, [r7, #19]
 805c1ce:	68fb      	ldr	r3, [r7, #12]
 805c1d0:	2b00      	cmp	r3, #0
 805c1d2:	d103      	bne.n	805c1dc <vl53l5_check_status_registers+0x24>
 805c1d4:	f06f 0303 	mvn.w	r3, #3
 805c1d8:	617b      	str	r3, [r7, #20]
 805c1da:	e08e      	b.n	805c2fa <vl53l5_check_status_registers+0x142>
 805c1dc:	68bb      	ldr	r3, [r7, #8]
 805c1de:	2b00      	cmp	r3, #0
 805c1e0:	d103      	bne.n	805c1ea <vl53l5_check_status_registers+0x32>
 805c1e2:	f06f 0303 	mvn.w	r3, #3
 805c1e6:	617b      	str	r3, [r7, #20]
 805c1e8:	e087      	b.n	805c2fa <vl53l5_check_status_registers+0x142>
 805c1ea:	687b      	ldr	r3, [r7, #4]
 805c1ec:	2b00      	cmp	r3, #0
 805c1ee:	d103      	bne.n	805c1f8 <vl53l5_check_status_registers+0x40>
 805c1f0:	f06f 0303 	mvn.w	r3, #3
 805c1f4:	617b      	str	r3, [r7, #20]
 805c1f6:	e080      	b.n	805c2fa <vl53l5_check_status_registers+0x142>
 805c1f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 805c1fc:	2b00      	cmp	r3, #0
 805c1fe:	d00d      	beq.n	805c21c <vl53l5_check_status_registers+0x64>
 805c200:	2300      	movs	r3, #0
 805c202:	74fb      	strb	r3, [r7, #19]
 805c204:	f107 0213 	add.w	r2, r7, #19
 805c208:	2301      	movs	r3, #1
 805c20a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 805c20e:	68f8      	ldr	r0, [r7, #12]
 805c210:	f002 fc51 	bl	805eab6 <vl53l5_write_multi>
 805c214:	6178      	str	r0, [r7, #20]
 805c216:	697b      	ldr	r3, [r7, #20]
 805c218:	2b00      	cmp	r3, #0
 805c21a:	db6b      	blt.n	805c2f4 <vl53l5_check_status_registers+0x13c>
 805c21c:	68ba      	ldr	r2, [r7, #8]
 805c21e:	2301      	movs	r3, #1
 805c220:	2106      	movs	r1, #6
 805c222:	68f8      	ldr	r0, [r7, #12]
 805c224:	f002 fc64 	bl	805eaf0 <vl53l5_read_multi>
 805c228:	6178      	str	r0, [r7, #20]
 805c22a:	697b      	ldr	r3, [r7, #20]
 805c22c:	2b00      	cmp	r3, #0
 805c22e:	db3f      	blt.n	805c2b0 <vl53l5_check_status_registers+0xf8>
 805c230:	68bb      	ldr	r3, [r7, #8]
 805c232:	781b      	ldrb	r3, [r3, #0]
 805c234:	f003 0308 	and.w	r3, r3, #8
 805c238:	b2db      	uxtb	r3, r3
 805c23a:	2b00      	cmp	r3, #0
 805c23c:	d00a      	beq.n	805c254 <vl53l5_check_status_registers+0x9c>
 805c23e:	68bb      	ldr	r3, [r7, #8]
 805c240:	781b      	ldrb	r3, [r3, #0]
 805c242:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 805c246:	b2db      	uxtb	r3, r3
 805c248:	2b00      	cmp	r3, #0
 805c24a:	d103      	bne.n	805c254 <vl53l5_check_status_registers+0x9c>
 805c24c:	687b      	ldr	r3, [r7, #4]
 805c24e:	2200      	movs	r2, #0
 805c250:	701a      	strb	r2, [r3, #0]
 805c252:	e032      	b.n	805c2ba <vl53l5_check_status_registers+0x102>
 805c254:	687a      	ldr	r2, [r7, #4]
 805c256:	2301      	movs	r3, #1
 805c258:	2107      	movs	r1, #7
 805c25a:	68f8      	ldr	r0, [r7, #12]
 805c25c:	f002 fc48 	bl	805eaf0 <vl53l5_read_multi>
 805c260:	6178      	str	r0, [r7, #20]
 805c262:	697b      	ldr	r3, [r7, #20]
 805c264:	2b00      	cmp	r3, #0
 805c266:	db25      	blt.n	805c2b4 <vl53l5_check_status_registers+0xfc>
 805c268:	68bb      	ldr	r3, [r7, #8]
 805c26a:	781b      	ldrb	r3, [r3, #0]
 805c26c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 805c270:	b2db      	uxtb	r3, r3
 805c272:	2b00      	cmp	r3, #0
 805c274:	d007      	beq.n	805c286 <vl53l5_check_status_registers+0xce>
 805c276:	687b      	ldr	r3, [r7, #4]
 805c278:	781b      	ldrb	r3, [r3, #0]
 805c27a:	2b00      	cmp	r3, #0
 805c27c:	d103      	bne.n	805c286 <vl53l5_check_status_registers+0xce>
 805c27e:	f06f 0343 	mvn.w	r3, #67	; 0x43
 805c282:	617b      	str	r3, [r7, #20]
 805c284:	e019      	b.n	805c2ba <vl53l5_check_status_registers+0x102>
 805c286:	68bb      	ldr	r3, [r7, #8]
 805c288:	781b      	ldrb	r3, [r3, #0]
 805c28a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 805c28e:	b2db      	uxtb	r3, r3
 805c290:	2b00      	cmp	r3, #0
 805c292:	d111      	bne.n	805c2b8 <vl53l5_check_status_registers+0x100>
 805c294:	78fb      	ldrb	r3, [r7, #3]
 805c296:	2b00      	cmp	r3, #0
 805c298:	d00e      	beq.n	805c2b8 <vl53l5_check_status_registers+0x100>
 805c29a:	687b      	ldr	r3, [r7, #4]
 805c29c:	781b      	ldrb	r3, [r3, #0]
 805c29e:	f003 0308 	and.w	r3, r3, #8
 805c2a2:	b2db      	uxtb	r3, r3
 805c2a4:	2b00      	cmp	r3, #0
 805c2a6:	d007      	beq.n	805c2b8 <vl53l5_check_status_registers+0x100>
 805c2a8:	687b      	ldr	r3, [r7, #4]
 805c2aa:	2200      	movs	r2, #0
 805c2ac:	701a      	strb	r2, [r3, #0]
 805c2ae:	e004      	b.n	805c2ba <vl53l5_check_status_registers+0x102>
 805c2b0:	bf00      	nop
 805c2b2:	e002      	b.n	805c2ba <vl53l5_check_status_registers+0x102>
 805c2b4:	bf00      	nop
 805c2b6:	e000      	b.n	805c2ba <vl53l5_check_status_registers+0x102>
 805c2b8:	bf00      	nop
 805c2ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 805c2be:	2b00      	cmp	r3, #0
 805c2c0:	d01a      	beq.n	805c2f8 <vl53l5_check_status_registers+0x140>
 805c2c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 805c2c6:	74fb      	strb	r3, [r7, #19]
 805c2c8:	697b      	ldr	r3, [r7, #20]
 805c2ca:	2b00      	cmp	r3, #0
 805c2cc:	da08      	bge.n	805c2e0 <vl53l5_check_status_registers+0x128>
 805c2ce:	f107 0213 	add.w	r2, r7, #19
 805c2d2:	2301      	movs	r3, #1
 805c2d4:	f647 71ff 	movw	r1, #32767	; 0x7fff
 805c2d8:	68f8      	ldr	r0, [r7, #12]
 805c2da:	f002 fbec 	bl	805eab6 <vl53l5_write_multi>
 805c2de:	e00c      	b.n	805c2fa <vl53l5_check_status_registers+0x142>
 805c2e0:	f107 0213 	add.w	r2, r7, #19
 805c2e4:	2301      	movs	r3, #1
 805c2e6:	f647 71ff 	movw	r1, #32767	; 0x7fff
 805c2ea:	68f8      	ldr	r0, [r7, #12]
 805c2ec:	f002 fbe3 	bl	805eab6 <vl53l5_write_multi>
 805c2f0:	6178      	str	r0, [r7, #20]
 805c2f2:	e002      	b.n	805c2fa <vl53l5_check_status_registers+0x142>
 805c2f4:	bf00      	nop
 805c2f6:	e000      	b.n	805c2fa <vl53l5_check_status_registers+0x142>
 805c2f8:	bf00      	nop
 805c2fa:	697b      	ldr	r3, [r7, #20]
 805c2fc:	2b00      	cmp	r3, #0
 805c2fe:	da0b      	bge.n	805c318 <vl53l5_check_status_registers+0x160>
 805c300:	68bb      	ldr	r3, [r7, #8]
 805c302:	2b00      	cmp	r3, #0
 805c304:	d002      	beq.n	805c30c <vl53l5_check_status_registers+0x154>
 805c306:	68bb      	ldr	r3, [r7, #8]
 805c308:	2200      	movs	r2, #0
 805c30a:	701a      	strb	r2, [r3, #0]
 805c30c:	687b      	ldr	r3, [r7, #4]
 805c30e:	2b00      	cmp	r3, #0
 805c310:	d002      	beq.n	805c318 <vl53l5_check_status_registers+0x160>
 805c312:	687b      	ldr	r3, [r7, #4]
 805c314:	2200      	movs	r2, #0
 805c316:	701a      	strb	r2, [r3, #0]
 805c318:	697b      	ldr	r3, [r7, #20]
 805c31a:	4618      	mov	r0, r3
 805c31c:	3718      	adds	r7, #24
 805c31e:	46bd      	mov	sp, r7
 805c320:	bd80      	pop	{r7, pc}
	...

0805c324 <vl53l5_get_secondary_error_info>:
 805c324:	b580      	push	{r7, lr}
 805c326:	b084      	sub	sp, #16
 805c328:	af00      	add	r7, sp, #0
 805c32a:	6078      	str	r0, [r7, #4]
 805c32c:	6039      	str	r1, [r7, #0]
 805c32e:	2300      	movs	r3, #0
 805c330:	60fb      	str	r3, [r7, #12]
 805c332:	4a07      	ldr	r2, [pc, #28]	; (805c350 <vl53l5_get_secondary_error_info+0x2c>)
 805c334:	6839      	ldr	r1, [r7, #0]
 805c336:	6878      	ldr	r0, [r7, #4]
 805c338:	f7ff fea0 	bl	805c07c <_get_status_struct>
 805c33c:	60f8      	str	r0, [r7, #12]
 805c33e:	68fb      	ldr	r3, [r7, #12]
 805c340:	2b00      	cmp	r3, #0
 805c342:	bf00      	nop
 805c344:	68fb      	ldr	r3, [r7, #12]
 805c346:	4618      	mov	r0, r3
 805c348:	3710      	adds	r7, #16
 805c34a:	46bd      	mov	sp, r7
 805c34c:	bd80      	pop	{r7, pc}
 805c34e:	bf00      	nop
 805c350:	56b000c0 	.word	0x56b000c0

0805c354 <vl53l5_get_secondary_warning_info>:
 805c354:	b580      	push	{r7, lr}
 805c356:	b084      	sub	sp, #16
 805c358:	af00      	add	r7, sp, #0
 805c35a:	6078      	str	r0, [r7, #4]
 805c35c:	6039      	str	r1, [r7, #0]
 805c35e:	2300      	movs	r3, #0
 805c360:	60fb      	str	r3, [r7, #12]
 805c362:	4a07      	ldr	r2, [pc, #28]	; (805c380 <vl53l5_get_secondary_warning_info+0x2c>)
 805c364:	6839      	ldr	r1, [r7, #0]
 805c366:	6878      	ldr	r0, [r7, #4]
 805c368:	f7ff fe88 	bl	805c07c <_get_status_struct>
 805c36c:	60f8      	str	r0, [r7, #12]
 805c36e:	68fb      	ldr	r3, [r7, #12]
 805c370:	2b00      	cmp	r3, #0
 805c372:	bf00      	nop
 805c374:	68fb      	ldr	r3, [r7, #12]
 805c376:	4618      	mov	r0, r3
 805c378:	3710      	adds	r7, #16
 805c37a:	46bd      	mov	sp, r7
 805c37c:	bd80      	pop	{r7, pc}
 805c37e:	bf00      	nop
 805c380:	56bc00c0 	.word	0x56bc00c0

0805c384 <vl53l5_compose_fw_status_code>:
 805c384:	b480      	push	{r7}
 805c386:	b087      	sub	sp, #28
 805c388:	af00      	add	r7, sp, #0
 805c38a:	6078      	str	r0, [r7, #4]
 805c38c:	6039      	str	r1, [r7, #0]
 805c38e:	2300      	movs	r3, #0
 805c390:	617b      	str	r3, [r7, #20]
 805c392:	2300      	movs	r3, #0
 805c394:	613b      	str	r3, [r7, #16]
 805c396:	2300      	movs	r3, #0
 805c398:	60fb      	str	r3, [r7, #12]
 805c39a:	687b      	ldr	r3, [r7, #4]
 805c39c:	2b00      	cmp	r3, #0
 805c39e:	d103      	bne.n	805c3a8 <vl53l5_compose_fw_status_code+0x24>
 805c3a0:	f06f 0303 	mvn.w	r3, #3
 805c3a4:	617b      	str	r3, [r7, #20]
 805c3a6:	e03a      	b.n	805c41e <vl53l5_compose_fw_status_code+0x9a>
 805c3a8:	683b      	ldr	r3, [r7, #0]
 805c3aa:	2b00      	cmp	r3, #0
 805c3ac:	d103      	bne.n	805c3b6 <vl53l5_compose_fw_status_code+0x32>
 805c3ae:	f06f 0303 	mvn.w	r3, #3
 805c3b2:	617b      	str	r3, [r7, #20]
 805c3b4:	e033      	b.n	805c41e <vl53l5_compose_fw_status_code+0x9a>
 805c3b6:	683b      	ldr	r3, [r7, #0]
 805c3b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 805c3bc:	2b00      	cmp	r3, #0
 805c3be:	d02d      	beq.n	805c41c <vl53l5_compose_fw_status_code+0x98>
 805c3c0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 805c3c4:	617b      	str	r3, [r7, #20]
 805c3c6:	683b      	ldr	r3, [r7, #0]
 805c3c8:	60fb      	str	r3, [r7, #12]
 805c3ca:	68fb      	ldr	r3, [r7, #12]
 805c3cc:	881b      	ldrh	r3, [r3, #0]
 805c3ce:	061b      	lsls	r3, r3, #24
 805c3d0:	693a      	ldr	r2, [r7, #16]
 805c3d2:	4313      	orrs	r3, r2
 805c3d4:	613b      	str	r3, [r7, #16]
 805c3d6:	683b      	ldr	r3, [r7, #0]
 805c3d8:	3302      	adds	r3, #2
 805c3da:	60fb      	str	r3, [r7, #12]
 805c3dc:	68fb      	ldr	r3, [r7, #12]
 805c3de:	881b      	ldrh	r3, [r3, #0]
 805c3e0:	041b      	lsls	r3, r3, #16
 805c3e2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 805c3e6:	693a      	ldr	r2, [r7, #16]
 805c3e8:	4313      	orrs	r3, r2
 805c3ea:	613b      	str	r3, [r7, #16]
 805c3ec:	683b      	ldr	r3, [r7, #0]
 805c3ee:	3304      	adds	r3, #4
 805c3f0:	60fb      	str	r3, [r7, #12]
 805c3f2:	68fb      	ldr	r3, [r7, #12]
 805c3f4:	881b      	ldrh	r3, [r3, #0]
 805c3f6:	021b      	lsls	r3, r3, #8
 805c3f8:	b29b      	uxth	r3, r3
 805c3fa:	693a      	ldr	r2, [r7, #16]
 805c3fc:	4313      	orrs	r3, r2
 805c3fe:	613b      	str	r3, [r7, #16]
 805c400:	683b      	ldr	r3, [r7, #0]
 805c402:	330a      	adds	r3, #10
 805c404:	60fb      	str	r3, [r7, #12]
 805c406:	68fb      	ldr	r3, [r7, #12]
 805c408:	881b      	ldrh	r3, [r3, #0]
 805c40a:	b2db      	uxtb	r3, r3
 805c40c:	693a      	ldr	r2, [r7, #16]
 805c40e:	4313      	orrs	r3, r2
 805c410:	613b      	str	r3, [r7, #16]
 805c412:	693b      	ldr	r3, [r7, #16]
 805c414:	697a      	ldr	r2, [r7, #20]
 805c416:	4413      	add	r3, r2
 805c418:	617b      	str	r3, [r7, #20]
 805c41a:	e000      	b.n	805c41e <vl53l5_compose_fw_status_code+0x9a>
 805c41c:	bf00      	nop
 805c41e:	697b      	ldr	r3, [r7, #20]
 805c420:	4618      	mov	r0, r3
 805c422:	371c      	adds	r7, #28
 805c424:	46bd      	mov	sp, r7
 805c426:	f85d 7b04 	ldr.w	r7, [sp], #4
 805c42a:	4770      	bx	lr

0805c42c <_write_byte>:
 805c42c:	b580      	push	{r7, lr}
 805c42e:	b082      	sub	sp, #8
 805c430:	af00      	add	r7, sp, #0
 805c432:	6078      	str	r0, [r7, #4]
 805c434:	460b      	mov	r3, r1
 805c436:	807b      	strh	r3, [r7, #2]
 805c438:	4613      	mov	r3, r2
 805c43a:	707b      	strb	r3, [r7, #1]
 805c43c:	1c7a      	adds	r2, r7, #1
 805c43e:	8879      	ldrh	r1, [r7, #2]
 805c440:	2301      	movs	r3, #1
 805c442:	6878      	ldr	r0, [r7, #4]
 805c444:	f002 fb37 	bl	805eab6 <vl53l5_write_multi>
 805c448:	4603      	mov	r3, r0
 805c44a:	4618      	mov	r0, r3
 805c44c:	3708      	adds	r7, #8
 805c44e:	46bd      	mov	sp, r7
 805c450:	bd80      	pop	{r7, pc}

0805c452 <_read_byte>:
 805c452:	b580      	push	{r7, lr}
 805c454:	b084      	sub	sp, #16
 805c456:	af00      	add	r7, sp, #0
 805c458:	60f8      	str	r0, [r7, #12]
 805c45a:	460b      	mov	r3, r1
 805c45c:	607a      	str	r2, [r7, #4]
 805c45e:	817b      	strh	r3, [r7, #10]
 805c460:	8979      	ldrh	r1, [r7, #10]
 805c462:	2301      	movs	r3, #1
 805c464:	687a      	ldr	r2, [r7, #4]
 805c466:	68f8      	ldr	r0, [r7, #12]
 805c468:	f002 fb42 	bl	805eaf0 <vl53l5_read_multi>
 805c46c:	4603      	mov	r3, r0
 805c46e:	4618      	mov	r0, r3
 805c470:	3710      	adds	r7, #16
 805c472:	46bd      	mov	sp, r7
 805c474:	bd80      	pop	{r7, pc}
	...

0805c478 <_check_fw_checksum>:
 805c478:	b580      	push	{r7, lr}
 805c47a:	b086      	sub	sp, #24
 805c47c:	af00      	add	r7, sp, #0
 805c47e:	6078      	str	r0, [r7, #4]
 805c480:	2300      	movs	r3, #0
 805c482:	617b      	str	r3, [r7, #20]
 805c484:	2300      	movs	r3, #0
 805c486:	613b      	str	r3, [r7, #16]
 805c488:	2300      	movs	r3, #0
 805c48a:	60bb      	str	r3, [r7, #8]
 805c48c:	f642 73fc 	movw	r3, #12284	; 0x2ffc
 805c490:	81fb      	strh	r3, [r7, #14]
 805c492:	2300      	movs	r3, #0
 805c494:	723b      	strb	r3, [r7, #8]
 805c496:	f107 0208 	add.w	r2, r7, #8
 805c49a:	89f9      	ldrh	r1, [r7, #14]
 805c49c:	2304      	movs	r3, #4
 805c49e:	6878      	ldr	r0, [r7, #4]
 805c4a0:	f002 fb26 	bl	805eaf0 <vl53l5_read_multi>
 805c4a4:	6178      	str	r0, [r7, #20]
 805c4a6:	697b      	ldr	r3, [r7, #20]
 805c4a8:	2b00      	cmp	r3, #0
 805c4aa:	db1c      	blt.n	805c4e6 <_check_fw_checksum+0x6e>
 805c4ac:	f107 0308 	add.w	r3, r7, #8
 805c4b0:	2104      	movs	r1, #4
 805c4b2:	4618      	mov	r0, r3
 805c4b4:	f001 fa52 	bl	805d95c <vl53l5_dci_swap_buffer_byte_ordering>
 805c4b8:	6178      	str	r0, [r7, #20]
 805c4ba:	697b      	ldr	r3, [r7, #20]
 805c4bc:	2b00      	cmp	r3, #0
 805c4be:	db14      	blt.n	805c4ea <_check_fw_checksum+0x72>
 805c4c0:	7afb      	ldrb	r3, [r7, #11]
 805c4c2:	061a      	lsls	r2, r3, #24
 805c4c4:	7abb      	ldrb	r3, [r7, #10]
 805c4c6:	041b      	lsls	r3, r3, #16
 805c4c8:	431a      	orrs	r2, r3
 805c4ca:	7a7b      	ldrb	r3, [r7, #9]
 805c4cc:	021b      	lsls	r3, r3, #8
 805c4ce:	4313      	orrs	r3, r2
 805c4d0:	7a3a      	ldrb	r2, [r7, #8]
 805c4d2:	4313      	orrs	r3, r2
 805c4d4:	613b      	str	r3, [r7, #16]
 805c4d6:	693b      	ldr	r3, [r7, #16]
 805c4d8:	4a08      	ldr	r2, [pc, #32]	; (805c4fc <_check_fw_checksum+0x84>)
 805c4da:	4293      	cmp	r3, r2
 805c4dc:	d007      	beq.n	805c4ee <_check_fw_checksum+0x76>
 805c4de:	f06f 032f 	mvn.w	r3, #47	; 0x2f
 805c4e2:	617b      	str	r3, [r7, #20]
 805c4e4:	e004      	b.n	805c4f0 <_check_fw_checksum+0x78>
 805c4e6:	bf00      	nop
 805c4e8:	e002      	b.n	805c4f0 <_check_fw_checksum+0x78>
 805c4ea:	bf00      	nop
 805c4ec:	e000      	b.n	805c4f0 <_check_fw_checksum+0x78>
 805c4ee:	bf00      	nop
 805c4f0:	697b      	ldr	r3, [r7, #20]
 805c4f2:	4618      	mov	r0, r3
 805c4f4:	3718      	adds	r7, #24
 805c4f6:	46bd      	mov	sp, r7
 805c4f8:	bd80      	pop	{r7, pc}
 805c4fa:	bf00      	nop
 805c4fc:	749d4792 	.word	0x749d4792

0805c500 <_write_page>:
 805c500:	b580      	push	{r7, lr}
 805c502:	b088      	sub	sp, #32
 805c504:	af00      	add	r7, sp, #0
 805c506:	60f8      	str	r0, [r7, #12]
 805c508:	607a      	str	r2, [r7, #4]
 805c50a:	603b      	str	r3, [r7, #0]
 805c50c:	460b      	mov	r3, r1
 805c50e:	817b      	strh	r3, [r7, #10]
 805c510:	2300      	movs	r3, #0
 805c512:	617b      	str	r3, [r7, #20]
 805c514:	2300      	movs	r3, #0
 805c516:	61fb      	str	r3, [r7, #28]
 805c518:	2300      	movs	r3, #0
 805c51a:	613b      	str	r3, [r7, #16]
 805c51c:	2300      	movs	r3, #0
 805c51e:	61bb      	str	r3, [r7, #24]
 805c520:	897a      	ldrh	r2, [r7, #10]
 805c522:	683b      	ldr	r3, [r7, #0]
 805c524:	4413      	add	r3, r2
 805c526:	687a      	ldr	r2, [r7, #4]
 805c528:	429a      	cmp	r2, r3
 805c52a:	d902      	bls.n	805c532 <_write_page+0x32>
 805c52c:	683b      	ldr	r3, [r7, #0]
 805c52e:	61fb      	str	r3, [r7, #28]
 805c530:	e003      	b.n	805c53a <_write_page+0x3a>
 805c532:	897b      	ldrh	r3, [r7, #10]
 805c534:	687a      	ldr	r2, [r7, #4]
 805c536:	1ad3      	subs	r3, r2, r3
 805c538:	61fb      	str	r3, [r7, #28]
 805c53a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 805c53c:	681a      	ldr	r2, [r3, #0]
 805c53e:	68fb      	ldr	r3, [r7, #12]
 805c540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 805c542:	429a      	cmp	r2, r3
 805c544:	d908      	bls.n	805c558 <_write_page+0x58>
 805c546:	68fb      	ldr	r3, [r7, #12]
 805c548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 805c54a:	61bb      	str	r3, [r7, #24]
 805c54c:	69fa      	ldr	r2, [r7, #28]
 805c54e:	2100      	movs	r1, #0
 805c550:	69b8      	ldr	r0, [r7, #24]
 805c552:	f003 fd33 	bl	805ffbc <memset>
 805c556:	e02b      	b.n	805c5b0 <_write_page+0xb0>
 805c558:	68fb      	ldr	r3, [r7, #12]
 805c55a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 805c55c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 805c55e:	681b      	ldr	r3, [r3, #0]
 805c560:	1ad3      	subs	r3, r2, r3
 805c562:	69fa      	ldr	r2, [r7, #28]
 805c564:	429a      	cmp	r2, r3
 805c566:	d91d      	bls.n	805c5a4 <_write_page+0xa4>
 805c568:	68fb      	ldr	r3, [r7, #12]
 805c56a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 805c56c:	61bb      	str	r3, [r7, #24]
 805c56e:	68fb      	ldr	r3, [r7, #12]
 805c570:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 805c572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 805c574:	681b      	ldr	r3, [r3, #0]
 805c576:	1ad3      	subs	r3, r2, r3
 805c578:	613b      	str	r3, [r7, #16]
 805c57a:	68fb      	ldr	r3, [r7, #12]
 805c57c:	6a1a      	ldr	r2, [r3, #32]
 805c57e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 805c580:	681b      	ldr	r3, [r3, #0]
 805c582:	4413      	add	r3, r2
 805c584:	693a      	ldr	r2, [r7, #16]
 805c586:	4619      	mov	r1, r3
 805c588:	69b8      	ldr	r0, [r7, #24]
 805c58a:	f003 fd09 	bl	805ffa0 <memcpy>
 805c58e:	69ba      	ldr	r2, [r7, #24]
 805c590:	693b      	ldr	r3, [r7, #16]
 805c592:	18d0      	adds	r0, r2, r3
 805c594:	69fa      	ldr	r2, [r7, #28]
 805c596:	693b      	ldr	r3, [r7, #16]
 805c598:	1ad3      	subs	r3, r2, r3
 805c59a:	461a      	mov	r2, r3
 805c59c:	2100      	movs	r1, #0
 805c59e:	f003 fd0d 	bl	805ffbc <memset>
 805c5a2:	e005      	b.n	805c5b0 <_write_page+0xb0>
 805c5a4:	68fb      	ldr	r3, [r7, #12]
 805c5a6:	6a1a      	ldr	r2, [r3, #32]
 805c5a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 805c5aa:	681b      	ldr	r3, [r3, #0]
 805c5ac:	4413      	add	r3, r2
 805c5ae:	61bb      	str	r3, [r7, #24]
 805c5b0:	8979      	ldrh	r1, [r7, #10]
 805c5b2:	69fb      	ldr	r3, [r7, #28]
 805c5b4:	69ba      	ldr	r2, [r7, #24]
 805c5b6:	68f8      	ldr	r0, [r7, #12]
 805c5b8:	f002 fa7d 	bl	805eab6 <vl53l5_write_multi>
 805c5bc:	6178      	str	r0, [r7, #20]
 805c5be:	697b      	ldr	r3, [r7, #20]
 805c5c0:	2b00      	cmp	r3, #0
 805c5c2:	db06      	blt.n	805c5d2 <_write_page+0xd2>
 805c5c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 805c5c6:	681a      	ldr	r2, [r3, #0]
 805c5c8:	69fb      	ldr	r3, [r7, #28]
 805c5ca:	441a      	add	r2, r3
 805c5cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 805c5ce:	601a      	str	r2, [r3, #0]
 805c5d0:	e000      	b.n	805c5d4 <_write_page+0xd4>
 805c5d2:	bf00      	nop
 805c5d4:	697b      	ldr	r3, [r7, #20]
 805c5d6:	4618      	mov	r0, r3
 805c5d8:	3720      	adds	r7, #32
 805c5da:	46bd      	mov	sp, r7
 805c5dc:	bd80      	pop	{r7, pc}

0805c5de <_reset_mcu_and_wait_boot>:
 805c5de:	b580      	push	{r7, lr}
 805c5e0:	b084      	sub	sp, #16
 805c5e2:	af00      	add	r7, sp, #0
 805c5e4:	6078      	str	r0, [r7, #4]
 805c5e6:	2300      	movs	r3, #0
 805c5e8:	60fb      	str	r3, [r7, #12]
 805c5ea:	2300      	movs	r3, #0
 805c5ec:	723b      	strb	r3, [r7, #8]
 805c5ee:	2300      	movs	r3, #0
 805c5f0:	727b      	strb	r3, [r7, #9]
 805c5f2:	2342      	movs	r3, #66	; 0x42
 805c5f4:	72bb      	strb	r3, [r7, #10]
 805c5f6:	2300      	movs	r3, #0
 805c5f8:	72fb      	strb	r3, [r7, #11]
 805c5fa:	2200      	movs	r2, #0
 805c5fc:	f647 71ff 	movw	r1, #32767	; 0x7fff
 805c600:	6878      	ldr	r0, [r7, #4]
 805c602:	f7ff ff13 	bl	805c42c <_write_byte>
 805c606:	60f8      	str	r0, [r7, #12]
 805c608:	68fb      	ldr	r3, [r7, #12]
 805c60a:	2b00      	cmp	r3, #0
 805c60c:	db2e      	blt.n	805c66c <_reset_mcu_and_wait_boot+0x8e>
 805c60e:	f107 0208 	add.w	r2, r7, #8
 805c612:	2304      	movs	r3, #4
 805c614:	f44f 718a 	mov.w	r1, #276	; 0x114
 805c618:	6878      	ldr	r0, [r7, #4]
 805c61a:	f002 fa4c 	bl	805eab6 <vl53l5_write_multi>
 805c61e:	60f8      	str	r0, [r7, #12]
 805c620:	68fb      	ldr	r3, [r7, #12]
 805c622:	2b00      	cmp	r3, #0
 805c624:	db24      	blt.n	805c670 <_reset_mcu_and_wait_boot+0x92>
 805c626:	2200      	movs	r2, #0
 805c628:	210b      	movs	r1, #11
 805c62a:	6878      	ldr	r0, [r7, #4]
 805c62c:	f7ff fefe 	bl	805c42c <_write_byte>
 805c630:	60f8      	str	r0, [r7, #12]
 805c632:	68fb      	ldr	r3, [r7, #12]
 805c634:	2b00      	cmp	r3, #0
 805c636:	db1d      	blt.n	805c674 <_reset_mcu_and_wait_boot+0x96>
 805c638:	2200      	movs	r2, #0
 805c63a:	210c      	movs	r1, #12
 805c63c:	6878      	ldr	r0, [r7, #4]
 805c63e:	f7ff fef5 	bl	805c42c <_write_byte>
 805c642:	60f8      	str	r0, [r7, #12]
 805c644:	68fb      	ldr	r3, [r7, #12]
 805c646:	2b00      	cmp	r3, #0
 805c648:	db16      	blt.n	805c678 <_reset_mcu_and_wait_boot+0x9a>
 805c64a:	2201      	movs	r2, #1
 805c64c:	210b      	movs	r1, #11
 805c64e:	6878      	ldr	r0, [r7, #4]
 805c650:	f7ff feec 	bl	805c42c <_write_byte>
 805c654:	60f8      	str	r0, [r7, #12]
 805c656:	68fb      	ldr	r3, [r7, #12]
 805c658:	2b00      	cmp	r3, #0
 805c65a:	db0f      	blt.n	805c67c <_reset_mcu_and_wait_boot+0x9e>
 805c65c:	2332      	movs	r3, #50	; 0x32
 805c65e:	2200      	movs	r2, #0
 805c660:	2101      	movs	r1, #1
 805c662:	6878      	ldr	r0, [r7, #4]
 805c664:	f000 fb77 	bl	805cd56 <vl53l5_wait_mcu_boot>
 805c668:	60f8      	str	r0, [r7, #12]
 805c66a:	e008      	b.n	805c67e <_reset_mcu_and_wait_boot+0xa0>
 805c66c:	bf00      	nop
 805c66e:	e006      	b.n	805c67e <_reset_mcu_and_wait_boot+0xa0>
 805c670:	bf00      	nop
 805c672:	e004      	b.n	805c67e <_reset_mcu_and_wait_boot+0xa0>
 805c674:	bf00      	nop
 805c676:	e002      	b.n	805c67e <_reset_mcu_and_wait_boot+0xa0>
 805c678:	bf00      	nop
 805c67a:	e000      	b.n	805c67e <_reset_mcu_and_wait_boot+0xa0>
 805c67c:	bf00      	nop
 805c67e:	68fb      	ldr	r3, [r7, #12]
 805c680:	4618      	mov	r0, r3
 805c682:	3710      	adds	r7, #16
 805c684:	46bd      	mov	sp, r7
 805c686:	bd80      	pop	{r7, pc}

0805c688 <_enable_host_access_to_go1_async>:
 805c688:	b580      	push	{r7, lr}
 805c68a:	b086      	sub	sp, #24
 805c68c:	af00      	add	r7, sp, #0
 805c68e:	6078      	str	r0, [r7, #4]
 805c690:	2300      	movs	r3, #0
 805c692:	617b      	str	r3, [r7, #20]
 805c694:	2300      	movs	r3, #0
 805c696:	613b      	str	r3, [r7, #16]
 805c698:	2300      	movs	r3, #0
 805c69a:	60fb      	str	r3, [r7, #12]
 805c69c:	2300      	movs	r3, #0
 805c69e:	72fb      	strb	r3, [r7, #11]
 805c6a0:	2300      	movs	r3, #0
 805c6a2:	72bb      	strb	r3, [r7, #10]
 805c6a4:	2200      	movs	r2, #0
 805c6a6:	f647 71ff 	movw	r1, #32767	; 0x7fff
 805c6aa:	6878      	ldr	r0, [r7, #4]
 805c6ac:	f7ff febe 	bl	805c42c <_write_byte>
 805c6b0:	6178      	str	r0, [r7, #20]
 805c6b2:	697b      	ldr	r3, [r7, #20]
 805c6b4:	2b00      	cmp	r3, #0
 805c6b6:	db77      	blt.n	805c7a8 <_enable_host_access_to_go1_async+0x120>
 805c6b8:	f107 030a 	add.w	r3, r7, #10
 805c6bc:	461a      	mov	r2, r3
 805c6be:	2101      	movs	r1, #1
 805c6c0:	6878      	ldr	r0, [r7, #4]
 805c6c2:	f7ff fec6 	bl	805c452 <_read_byte>
 805c6c6:	6178      	str	r0, [r7, #20]
 805c6c8:	697b      	ldr	r3, [r7, #20]
 805c6ca:	2b00      	cmp	r3, #0
 805c6cc:	db6e      	blt.n	805c7ac <_enable_host_access_to_go1_async+0x124>
 805c6ce:	2202      	movs	r2, #2
 805c6d0:	f647 71ff 	movw	r1, #32767	; 0x7fff
 805c6d4:	6878      	ldr	r0, [r7, #4]
 805c6d6:	f7ff fea9 	bl	805c42c <_write_byte>
 805c6da:	6178      	str	r0, [r7, #20]
 805c6dc:	697b      	ldr	r3, [r7, #20]
 805c6de:	2b00      	cmp	r3, #0
 805c6e0:	db66      	blt.n	805c7b0 <_enable_host_access_to_go1_async+0x128>
 805c6e2:	7abb      	ldrb	r3, [r7, #10]
 805c6e4:	2b02      	cmp	r3, #2
 805c6e6:	d003      	beq.n	805c6f0 <_enable_host_access_to_go1_async+0x68>
 805c6e8:	f06f 0363 	mvn.w	r3, #99	; 0x63
 805c6ec:	617b      	str	r3, [r7, #20]
 805c6ee:	e06c      	b.n	805c7ca <_enable_host_access_to_go1_async+0x142>
 805c6f0:	220d      	movs	r2, #13
 805c6f2:	2103      	movs	r1, #3
 805c6f4:	6878      	ldr	r0, [r7, #4]
 805c6f6:	f7ff fe99 	bl	805c42c <_write_byte>
 805c6fa:	6178      	str	r0, [r7, #20]
 805c6fc:	697b      	ldr	r3, [r7, #20]
 805c6fe:	2b00      	cmp	r3, #0
 805c700:	db58      	blt.n	805c7b4 <_enable_host_access_to_go1_async+0x12c>
 805c702:	2201      	movs	r2, #1
 805c704:	f647 71ff 	movw	r1, #32767	; 0x7fff
 805c708:	6878      	ldr	r0, [r7, #4]
 805c70a:	f7ff fe8f 	bl	805c42c <_write_byte>
 805c70e:	6178      	str	r0, [r7, #20]
 805c710:	697b      	ldr	r3, [r7, #20]
 805c712:	2b00      	cmp	r3, #0
 805c714:	db50      	blt.n	805c7b8 <_enable_host_access_to_go1_async+0x130>
 805c716:	2300      	movs	r3, #0
 805c718:	72fb      	strb	r3, [r7, #11]
 805c71a:	f107 0310 	add.w	r3, r7, #16
 805c71e:	4619      	mov	r1, r3
 805c720:	6878      	ldr	r0, [r7, #4]
 805c722:	f002 fa61 	bl	805ebe8 <vl53l5_get_tick_count>
 805c726:	6178      	str	r0, [r7, #20]
 805c728:	697b      	ldr	r3, [r7, #20]
 805c72a:	2b00      	cmp	r3, #0
 805c72c:	db46      	blt.n	805c7bc <_enable_host_access_to_go1_async+0x134>
 805c72e:	e023      	b.n	805c778 <_enable_host_access_to_go1_async+0xf0>
 805c730:	f107 030b 	add.w	r3, r7, #11
 805c734:	461a      	mov	r2, r3
 805c736:	2121      	movs	r1, #33	; 0x21
 805c738:	6878      	ldr	r0, [r7, #4]
 805c73a:	f7ff fe8a 	bl	805c452 <_read_byte>
 805c73e:	6178      	str	r0, [r7, #20]
 805c740:	697b      	ldr	r3, [r7, #20]
 805c742:	2b00      	cmp	r3, #0
 805c744:	db3c      	blt.n	805c7c0 <_enable_host_access_to_go1_async+0x138>
 805c746:	f107 030c 	add.w	r3, r7, #12
 805c74a:	4619      	mov	r1, r3
 805c74c:	6878      	ldr	r0, [r7, #4]
 805c74e:	f002 fa4b 	bl	805ebe8 <vl53l5_get_tick_count>
 805c752:	6178      	str	r0, [r7, #20]
 805c754:	697b      	ldr	r3, [r7, #20]
 805c756:	2b00      	cmp	r3, #0
 805c758:	db34      	blt.n	805c7c4 <_enable_host_access_to_go1_async+0x13c>
 805c75a:	6939      	ldr	r1, [r7, #16]
 805c75c:	68fa      	ldr	r2, [r7, #12]
 805c75e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 805c762:	6878      	ldr	r0, [r7, #4]
 805c764:	f002 fa5b 	bl	805ec1e <vl53l5_check_for_timeout>
 805c768:	6178      	str	r0, [r7, #20]
 805c76a:	697b      	ldr	r3, [r7, #20]
 805c76c:	2b00      	cmp	r3, #0
 805c76e:	da03      	bge.n	805c778 <_enable_host_access_to_go1_async+0xf0>
 805c770:	f06f 0333 	mvn.w	r3, #51	; 0x33
 805c774:	617b      	str	r3, [r7, #20]
 805c776:	e028      	b.n	805c7ca <_enable_host_access_to_go1_async+0x142>
 805c778:	7afb      	ldrb	r3, [r7, #11]
 805c77a:	f003 0310 	and.w	r3, r3, #16
 805c77e:	2b00      	cmp	r3, #0
 805c780:	d0d6      	beq.n	805c730 <_enable_host_access_to_go1_async+0xa8>
 805c782:	2200      	movs	r2, #0
 805c784:	f647 71ff 	movw	r1, #32767	; 0x7fff
 805c788:	6878      	ldr	r0, [r7, #4]
 805c78a:	f7ff fe4f 	bl	805c42c <_write_byte>
 805c78e:	6178      	str	r0, [r7, #20]
 805c790:	697b      	ldr	r3, [r7, #20]
 805c792:	2b00      	cmp	r3, #0
 805c794:	db18      	blt.n	805c7c8 <_enable_host_access_to_go1_async+0x140>
 805c796:	2201      	movs	r2, #1
 805c798:	210c      	movs	r1, #12
 805c79a:	6878      	ldr	r0, [r7, #4]
 805c79c:	f7ff fe46 	bl	805c42c <_write_byte>
 805c7a0:	6178      	str	r0, [r7, #20]
 805c7a2:	697b      	ldr	r3, [r7, #20]
 805c7a4:	2b00      	cmp	r3, #0
 805c7a6:	e010      	b.n	805c7ca <_enable_host_access_to_go1_async+0x142>
 805c7a8:	bf00      	nop
 805c7aa:	e00e      	b.n	805c7ca <_enable_host_access_to_go1_async+0x142>
 805c7ac:	bf00      	nop
 805c7ae:	e00c      	b.n	805c7ca <_enable_host_access_to_go1_async+0x142>
 805c7b0:	bf00      	nop
 805c7b2:	e00a      	b.n	805c7ca <_enable_host_access_to_go1_async+0x142>
 805c7b4:	bf00      	nop
 805c7b6:	e008      	b.n	805c7ca <_enable_host_access_to_go1_async+0x142>
 805c7b8:	bf00      	nop
 805c7ba:	e006      	b.n	805c7ca <_enable_host_access_to_go1_async+0x142>
 805c7bc:	bf00      	nop
 805c7be:	e004      	b.n	805c7ca <_enable_host_access_to_go1_async+0x142>
 805c7c0:	bf00      	nop
 805c7c2:	e002      	b.n	805c7ca <_enable_host_access_to_go1_async+0x142>
 805c7c4:	bf00      	nop
 805c7c6:	e000      	b.n	805c7ca <_enable_host_access_to_go1_async+0x142>
 805c7c8:	bf00      	nop
 805c7ca:	697b      	ldr	r3, [r7, #20]
 805c7cc:	4618      	mov	r0, r3
 805c7ce:	3718      	adds	r7, #24
 805c7d0:	46bd      	mov	sp, r7
 805c7d2:	bd80      	pop	{r7, pc}

0805c7d4 <_set_to_power_on_status>:
 805c7d4:	b580      	push	{r7, lr}
 805c7d6:	b084      	sub	sp, #16
 805c7d8:	af00      	add	r7, sp, #0
 805c7da:	6078      	str	r0, [r7, #4]
 805c7dc:	2300      	movs	r3, #0
 805c7de:	60fb      	str	r3, [r7, #12]
 805c7e0:	2200      	movs	r2, #0
 805c7e2:	f647 71ff 	movw	r1, #32767	; 0x7fff
 805c7e6:	6878      	ldr	r0, [r7, #4]
 805c7e8:	f7ff fe20 	bl	805c42c <_write_byte>
 805c7ec:	60f8      	str	r0, [r7, #12]
 805c7ee:	68fb      	ldr	r3, [r7, #12]
 805c7f0:	2b00      	cmp	r3, #0
 805c7f2:	db77      	blt.n	805c8e4 <_set_to_power_on_status+0x110>
 805c7f4:	2200      	movs	r2, #0
 805c7f6:	f240 1101 	movw	r1, #257	; 0x101
 805c7fa:	6878      	ldr	r0, [r7, #4]
 805c7fc:	f7ff fe16 	bl	805c42c <_write_byte>
 805c800:	60f8      	str	r0, [r7, #12]
 805c802:	68fb      	ldr	r3, [r7, #12]
 805c804:	2b00      	cmp	r3, #0
 805c806:	db6f      	blt.n	805c8e8 <_set_to_power_on_status+0x114>
 805c808:	2200      	movs	r2, #0
 805c80a:	f44f 7181 	mov.w	r1, #258	; 0x102
 805c80e:	6878      	ldr	r0, [r7, #4]
 805c810:	f7ff fe0c 	bl	805c42c <_write_byte>
 805c814:	60f8      	str	r0, [r7, #12]
 805c816:	68fb      	ldr	r3, [r7, #12]
 805c818:	2b00      	cmp	r3, #0
 805c81a:	db67      	blt.n	805c8ec <_set_to_power_on_status+0x118>
 805c81c:	2201      	movs	r2, #1
 805c81e:	f244 0102 	movw	r1, #16386	; 0x4002
 805c822:	6878      	ldr	r0, [r7, #4]
 805c824:	f7ff fe02 	bl	805c42c <_write_byte>
 805c828:	60f8      	str	r0, [r7, #12]
 805c82a:	68fb      	ldr	r3, [r7, #12]
 805c82c:	2b00      	cmp	r3, #0
 805c82e:	db5f      	blt.n	805c8f0 <_set_to_power_on_status+0x11c>
 805c830:	2200      	movs	r2, #0
 805c832:	f244 0102 	movw	r1, #16386	; 0x4002
 805c836:	6878      	ldr	r0, [r7, #4]
 805c838:	f7ff fdf8 	bl	805c42c <_write_byte>
 805c83c:	60f8      	str	r0, [r7, #12]
 805c83e:	68fb      	ldr	r3, [r7, #12]
 805c840:	2b00      	cmp	r3, #0
 805c842:	db57      	blt.n	805c8f4 <_set_to_power_on_status+0x120>
 805c844:	2201      	movs	r2, #1
 805c846:	f240 1103 	movw	r1, #259	; 0x103
 805c84a:	6878      	ldr	r0, [r7, #4]
 805c84c:	f7ff fdee 	bl	805c42c <_write_byte>
 805c850:	60f8      	str	r0, [r7, #12]
 805c852:	68fb      	ldr	r3, [r7, #12]
 805c854:	2b00      	cmp	r3, #0
 805c856:	db4f      	blt.n	805c8f8 <_set_to_power_on_status+0x124>
 805c858:	2200      	movs	r2, #0
 805c85a:	f244 010f 	movw	r1, #16399	; 0x400f
 805c85e:	6878      	ldr	r0, [r7, #4]
 805c860:	f7ff fde4 	bl	805c42c <_write_byte>
 805c864:	60f8      	str	r0, [r7, #12]
 805c866:	68fb      	ldr	r3, [r7, #12]
 805c868:	2b00      	cmp	r3, #0
 805c86a:	db47      	blt.n	805c8fc <_set_to_power_on_status+0x128>
 805c86c:	2243      	movs	r2, #67	; 0x43
 805c86e:	f240 211a 	movw	r1, #538	; 0x21a
 805c872:	6878      	ldr	r0, [r7, #4]
 805c874:	f7ff fdda 	bl	805c42c <_write_byte>
 805c878:	60f8      	str	r0, [r7, #12]
 805c87a:	68fb      	ldr	r3, [r7, #12]
 805c87c:	2b00      	cmp	r3, #0
 805c87e:	db3f      	blt.n	805c900 <_set_to_power_on_status+0x12c>
 805c880:	2203      	movs	r2, #3
 805c882:	f240 211a 	movw	r1, #538	; 0x21a
 805c886:	6878      	ldr	r0, [r7, #4]
 805c888:	f7ff fdd0 	bl	805c42c <_write_byte>
 805c88c:	60f8      	str	r0, [r7, #12]
 805c88e:	68fb      	ldr	r3, [r7, #12]
 805c890:	2b00      	cmp	r3, #0
 805c892:	db37      	blt.n	805c904 <_set_to_power_on_status+0x130>
 805c894:	2201      	movs	r2, #1
 805c896:	f240 211a 	movw	r1, #538	; 0x21a
 805c89a:	6878      	ldr	r0, [r7, #4]
 805c89c:	f7ff fdc6 	bl	805c42c <_write_byte>
 805c8a0:	60f8      	str	r0, [r7, #12]
 805c8a2:	68fb      	ldr	r3, [r7, #12]
 805c8a4:	2b00      	cmp	r3, #0
 805c8a6:	db2f      	blt.n	805c908 <_set_to_power_on_status+0x134>
 805c8a8:	2200      	movs	r2, #0
 805c8aa:	f240 211a 	movw	r1, #538	; 0x21a
 805c8ae:	6878      	ldr	r0, [r7, #4]
 805c8b0:	f7ff fdbc 	bl	805c42c <_write_byte>
 805c8b4:	60f8      	str	r0, [r7, #12]
 805c8b6:	68fb      	ldr	r3, [r7, #12]
 805c8b8:	2b00      	cmp	r3, #0
 805c8ba:	db27      	blt.n	805c90c <_set_to_power_on_status+0x138>
 805c8bc:	2200      	movs	r2, #0
 805c8be:	f240 2119 	movw	r1, #537	; 0x219
 805c8c2:	6878      	ldr	r0, [r7, #4]
 805c8c4:	f7ff fdb2 	bl	805c42c <_write_byte>
 805c8c8:	60f8      	str	r0, [r7, #12]
 805c8ca:	68fb      	ldr	r3, [r7, #12]
 805c8cc:	2b00      	cmp	r3, #0
 805c8ce:	db1f      	blt.n	805c910 <_set_to_power_on_status+0x13c>
 805c8d0:	2200      	movs	r2, #0
 805c8d2:	f240 211b 	movw	r1, #539	; 0x21b
 805c8d6:	6878      	ldr	r0, [r7, #4]
 805c8d8:	f7ff fda8 	bl	805c42c <_write_byte>
 805c8dc:	60f8      	str	r0, [r7, #12]
 805c8de:	68fb      	ldr	r3, [r7, #12]
 805c8e0:	2b00      	cmp	r3, #0
 805c8e2:	e016      	b.n	805c912 <_set_to_power_on_status+0x13e>
 805c8e4:	bf00      	nop
 805c8e6:	e014      	b.n	805c912 <_set_to_power_on_status+0x13e>
 805c8e8:	bf00      	nop
 805c8ea:	e012      	b.n	805c912 <_set_to_power_on_status+0x13e>
 805c8ec:	bf00      	nop
 805c8ee:	e010      	b.n	805c912 <_set_to_power_on_status+0x13e>
 805c8f0:	bf00      	nop
 805c8f2:	e00e      	b.n	805c912 <_set_to_power_on_status+0x13e>
 805c8f4:	bf00      	nop
 805c8f6:	e00c      	b.n	805c912 <_set_to_power_on_status+0x13e>
 805c8f8:	bf00      	nop
 805c8fa:	e00a      	b.n	805c912 <_set_to_power_on_status+0x13e>
 805c8fc:	bf00      	nop
 805c8fe:	e008      	b.n	805c912 <_set_to_power_on_status+0x13e>
 805c900:	bf00      	nop
 805c902:	e006      	b.n	805c912 <_set_to_power_on_status+0x13e>
 805c904:	bf00      	nop
 805c906:	e004      	b.n	805c912 <_set_to_power_on_status+0x13e>
 805c908:	bf00      	nop
 805c90a:	e002      	b.n	805c912 <_set_to_power_on_status+0x13e>
 805c90c:	bf00      	nop
 805c90e:	e000      	b.n	805c912 <_set_to_power_on_status+0x13e>
 805c910:	bf00      	nop
 805c912:	68fb      	ldr	r3, [r7, #12]
 805c914:	4618      	mov	r0, r3
 805c916:	3710      	adds	r7, #16
 805c918:	46bd      	mov	sp, r7
 805c91a:	bd80      	pop	{r7, pc}

0805c91c <_wake_up_mcu>:
 805c91c:	b580      	push	{r7, lr}
 805c91e:	b084      	sub	sp, #16
 805c920:	af00      	add	r7, sp, #0
 805c922:	6078      	str	r0, [r7, #4]
 805c924:	2300      	movs	r3, #0
 805c926:	60fb      	str	r3, [r7, #12]
 805c928:	2200      	movs	r2, #0
 805c92a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 805c92e:	6878      	ldr	r0, [r7, #4]
 805c930:	f7ff fd7c 	bl	805c42c <_write_byte>
 805c934:	60f8      	str	r0, [r7, #12]
 805c936:	68fb      	ldr	r3, [r7, #12]
 805c938:	2b00      	cmp	r3, #0
 805c93a:	db24      	blt.n	805c986 <_wake_up_mcu+0x6a>
 805c93c:	2200      	movs	r2, #0
 805c93e:	210c      	movs	r1, #12
 805c940:	6878      	ldr	r0, [r7, #4]
 805c942:	f7ff fd73 	bl	805c42c <_write_byte>
 805c946:	60f8      	str	r0, [r7, #12]
 805c948:	68fb      	ldr	r3, [r7, #12]
 805c94a:	2b00      	cmp	r3, #0
 805c94c:	db1d      	blt.n	805c98a <_wake_up_mcu+0x6e>
 805c94e:	2201      	movs	r2, #1
 805c950:	f647 71ff 	movw	r1, #32767	; 0x7fff
 805c954:	6878      	ldr	r0, [r7, #4]
 805c956:	f7ff fd69 	bl	805c42c <_write_byte>
 805c95a:	60f8      	str	r0, [r7, #12]
 805c95c:	68fb      	ldr	r3, [r7, #12]
 805c95e:	2b00      	cmp	r3, #0
 805c960:	db15      	blt.n	805c98e <_wake_up_mcu+0x72>
 805c962:	2207      	movs	r2, #7
 805c964:	2120      	movs	r1, #32
 805c966:	6878      	ldr	r0, [r7, #4]
 805c968:	f7ff fd60 	bl	805c42c <_write_byte>
 805c96c:	60f8      	str	r0, [r7, #12]
 805c96e:	68fb      	ldr	r3, [r7, #12]
 805c970:	2b00      	cmp	r3, #0
 805c972:	db0e      	blt.n	805c992 <_wake_up_mcu+0x76>
 805c974:	2206      	movs	r2, #6
 805c976:	2120      	movs	r1, #32
 805c978:	6878      	ldr	r0, [r7, #4]
 805c97a:	f7ff fd57 	bl	805c42c <_write_byte>
 805c97e:	60f8      	str	r0, [r7, #12]
 805c980:	68fb      	ldr	r3, [r7, #12]
 805c982:	2b00      	cmp	r3, #0
 805c984:	e006      	b.n	805c994 <_wake_up_mcu+0x78>
 805c986:	bf00      	nop
 805c988:	e004      	b.n	805c994 <_wake_up_mcu+0x78>
 805c98a:	bf00      	nop
 805c98c:	e002      	b.n	805c994 <_wake_up_mcu+0x78>
 805c98e:	bf00      	nop
 805c990:	e000      	b.n	805c994 <_wake_up_mcu+0x78>
 805c992:	bf00      	nop
 805c994:	68fb      	ldr	r3, [r7, #12]
 805c996:	4618      	mov	r0, r3
 805c998:	3710      	adds	r7, #16
 805c99a:	46bd      	mov	sp, r7
 805c99c:	bd80      	pop	{r7, pc}

0805c99e <_download_fw_to_ram>:
 805c99e:	b580      	push	{r7, lr}
 805c9a0:	b088      	sub	sp, #32
 805c9a2:	af02      	add	r7, sp, #8
 805c9a4:	6078      	str	r0, [r7, #4]
 805c9a6:	2300      	movs	r3, #0
 805c9a8:	617b      	str	r3, [r7, #20]
 805c9aa:	2300      	movs	r3, #0
 805c9ac:	827b      	strh	r3, [r7, #18]
 805c9ae:	2309      	movs	r3, #9
 805c9b0:	747b      	strb	r3, [r7, #17]
 805c9b2:	2300      	movs	r3, #0
 805c9b4:	60fb      	str	r3, [r7, #12]
 805c9b6:	2300      	movs	r3, #0
 805c9b8:	60bb      	str	r3, [r7, #8]
 805c9ba:	2309      	movs	r3, #9
 805c9bc:	747b      	strb	r3, [r7, #17]
 805c9be:	e03b      	b.n	805ca38 <_download_fw_to_ram+0x9a>
 805c9c0:	7c7b      	ldrb	r3, [r7, #17]
 805c9c2:	461a      	mov	r2, r3
 805c9c4:	f647 71ff 	movw	r1, #32767	; 0x7fff
 805c9c8:	6878      	ldr	r0, [r7, #4]
 805c9ca:	f7ff fd2f 	bl	805c42c <_write_byte>
 805c9ce:	6178      	str	r0, [r7, #20]
 805c9d0:	697b      	ldr	r3, [r7, #20]
 805c9d2:	2b00      	cmp	r3, #0
 805c9d4:	db34      	blt.n	805ca40 <_download_fw_to_ram+0xa2>
 805c9d6:	7c7b      	ldrb	r3, [r7, #17]
 805c9d8:	2b09      	cmp	r3, #9
 805c9da:	d102      	bne.n	805c9e2 <_download_fw_to_ram+0x44>
 805c9dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 805c9e0:	60fb      	str	r3, [r7, #12]
 805c9e2:	7c7b      	ldrb	r3, [r7, #17]
 805c9e4:	2b0a      	cmp	r3, #10
 805c9e6:	d102      	bne.n	805c9ee <_download_fw_to_ram+0x50>
 805c9e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 805c9ec:	60fb      	str	r3, [r7, #12]
 805c9ee:	7c7b      	ldrb	r3, [r7, #17]
 805c9f0:	2b0b      	cmp	r3, #11
 805c9f2:	d102      	bne.n	805c9fa <_download_fw_to_ram+0x5c>
 805c9f4:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 805c9f8:	60fb      	str	r3, [r7, #12]
 805c9fa:	2300      	movs	r3, #0
 805c9fc:	827b      	strh	r3, [r7, #18]
 805c9fe:	e014      	b.n	805ca2a <_download_fw_to_ram+0x8c>
 805ca00:	687b      	ldr	r3, [r7, #4]
 805ca02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 805ca04:	8a79      	ldrh	r1, [r7, #18]
 805ca06:	f107 0308 	add.w	r3, r7, #8
 805ca0a:	9300      	str	r3, [sp, #0]
 805ca0c:	4613      	mov	r3, r2
 805ca0e:	68fa      	ldr	r2, [r7, #12]
 805ca10:	6878      	ldr	r0, [r7, #4]
 805ca12:	f7ff fd75 	bl	805c500 <_write_page>
 805ca16:	6178      	str	r0, [r7, #20]
 805ca18:	697b      	ldr	r3, [r7, #20]
 805ca1a:	2b00      	cmp	r3, #0
 805ca1c:	d112      	bne.n	805ca44 <_download_fw_to_ram+0xa6>
 805ca1e:	687b      	ldr	r3, [r7, #4]
 805ca20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 805ca22:	b29a      	uxth	r2, r3
 805ca24:	8a7b      	ldrh	r3, [r7, #18]
 805ca26:	4413      	add	r3, r2
 805ca28:	827b      	strh	r3, [r7, #18]
 805ca2a:	8a7b      	ldrh	r3, [r7, #18]
 805ca2c:	68fa      	ldr	r2, [r7, #12]
 805ca2e:	429a      	cmp	r2, r3
 805ca30:	d8e6      	bhi.n	805ca00 <_download_fw_to_ram+0x62>
 805ca32:	7c7b      	ldrb	r3, [r7, #17]
 805ca34:	3301      	adds	r3, #1
 805ca36:	747b      	strb	r3, [r7, #17]
 805ca38:	7c7b      	ldrb	r3, [r7, #17]
 805ca3a:	2b0b      	cmp	r3, #11
 805ca3c:	d9c0      	bls.n	805c9c0 <_download_fw_to_ram+0x22>
 805ca3e:	e002      	b.n	805ca46 <_download_fw_to_ram+0xa8>
 805ca40:	bf00      	nop
 805ca42:	e000      	b.n	805ca46 <_download_fw_to_ram+0xa8>
 805ca44:	bf00      	nop
 805ca46:	697b      	ldr	r3, [r7, #20]
 805ca48:	4618      	mov	r0, r3
 805ca4a:	3718      	adds	r7, #24
 805ca4c:	46bd      	mov	sp, r7
 805ca4e:	bd80      	pop	{r7, pc}

0805ca50 <_wait_for_boot_complete_before_fw_load>:
 805ca50:	b580      	push	{r7, lr}
 805ca52:	b084      	sub	sp, #16
 805ca54:	af00      	add	r7, sp, #0
 805ca56:	6078      	str	r0, [r7, #4]
 805ca58:	2300      	movs	r3, #0
 805ca5a:	60fb      	str	r3, [r7, #12]
 805ca5c:	6878      	ldr	r0, [r7, #4]
 805ca5e:	f7ff fe13 	bl	805c688 <_enable_host_access_to_go1_async>
 805ca62:	60f8      	str	r0, [r7, #12]
 805ca64:	68fb      	ldr	r3, [r7, #12]
 805ca66:	2b00      	cmp	r3, #0
 805ca68:	db0d      	blt.n	805ca86 <_wait_for_boot_complete_before_fw_load+0x36>
 805ca6a:	6878      	ldr	r0, [r7, #4]
 805ca6c:	f7ff feb2 	bl	805c7d4 <_set_to_power_on_status>
 805ca70:	60f8      	str	r0, [r7, #12]
 805ca72:	68fb      	ldr	r3, [r7, #12]
 805ca74:	2b00      	cmp	r3, #0
 805ca76:	db08      	blt.n	805ca8a <_wait_for_boot_complete_before_fw_load+0x3a>
 805ca78:	6878      	ldr	r0, [r7, #4]
 805ca7a:	f7ff ff4f 	bl	805c91c <_wake_up_mcu>
 805ca7e:	60f8      	str	r0, [r7, #12]
 805ca80:	68fb      	ldr	r3, [r7, #12]
 805ca82:	2b00      	cmp	r3, #0
 805ca84:	e002      	b.n	805ca8c <_wait_for_boot_complete_before_fw_load+0x3c>
 805ca86:	bf00      	nop
 805ca88:	e000      	b.n	805ca8c <_wait_for_boot_complete_before_fw_load+0x3c>
 805ca8a:	bf00      	nop
 805ca8c:	68fb      	ldr	r3, [r7, #12]
 805ca8e:	4618      	mov	r0, r3
 805ca90:	3710      	adds	r7, #16
 805ca92:	46bd      	mov	sp, r7
 805ca94:	bd80      	pop	{r7, pc}

0805ca96 <_wait_for_boot_complete_after_fw_load>:
 805ca96:	b580      	push	{r7, lr}
 805ca98:	b084      	sub	sp, #16
 805ca9a:	af00      	add	r7, sp, #0
 805ca9c:	6078      	str	r0, [r7, #4]
 805ca9e:	2300      	movs	r3, #0
 805caa0:	60fb      	str	r3, [r7, #12]
 805caa2:	6878      	ldr	r0, [r7, #4]
 805caa4:	f7ff fdf0 	bl	805c688 <_enable_host_access_to_go1_async>
 805caa8:	60f8      	str	r0, [r7, #12]
 805caaa:	68fb      	ldr	r3, [r7, #12]
 805caac:	2b00      	cmp	r3, #0
 805caae:	db06      	blt.n	805cabe <_wait_for_boot_complete_after_fw_load+0x28>
 805cab0:	6878      	ldr	r0, [r7, #4]
 805cab2:	f7ff fd94 	bl	805c5de <_reset_mcu_and_wait_boot>
 805cab6:	60f8      	str	r0, [r7, #12]
 805cab8:	68fb      	ldr	r3, [r7, #12]
 805caba:	2b00      	cmp	r3, #0
 805cabc:	e000      	b.n	805cac0 <_wait_for_boot_complete_after_fw_load+0x2a>
 805cabe:	bf00      	nop
 805cac0:	68fb      	ldr	r3, [r7, #12]
 805cac2:	4618      	mov	r0, r3
 805cac4:	3710      	adds	r7, #16
 805cac6:	46bd      	mov	sp, r7
 805cac8:	bd80      	pop	{r7, pc}

0805caca <vl53l5_load_firmware>:
 805caca:	b580      	push	{r7, lr}
 805cacc:	b084      	sub	sp, #16
 805cace:	af00      	add	r7, sp, #0
 805cad0:	6078      	str	r0, [r7, #4]
 805cad2:	2300      	movs	r3, #0
 805cad4:	60fb      	str	r3, [r7, #12]
 805cad6:	687b      	ldr	r3, [r7, #4]
 805cad8:	2b00      	cmp	r3, #0
 805cada:	d103      	bne.n	805cae4 <vl53l5_load_firmware+0x1a>
 805cadc:	f06f 0303 	mvn.w	r3, #3
 805cae0:	60fb      	str	r3, [r7, #12]
 805cae2:	e044      	b.n	805cb6e <vl53l5_load_firmware+0xa4>
 805cae4:	687b      	ldr	r3, [r7, #4]
 805cae6:	6a1b      	ldr	r3, [r3, #32]
 805cae8:	2b00      	cmp	r3, #0
 805caea:	d103      	bne.n	805caf4 <vl53l5_load_firmware+0x2a>
 805caec:	f06f 0338 	mvn.w	r3, #56	; 0x38
 805caf0:	60fb      	str	r3, [r7, #12]
 805caf2:	e03c      	b.n	805cb6e <vl53l5_load_firmware+0xa4>
 805caf4:	687b      	ldr	r3, [r7, #4]
 805caf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 805caf8:	2b00      	cmp	r3, #0
 805cafa:	d103      	bne.n	805cb04 <vl53l5_load_firmware+0x3a>
 805cafc:	f06f 0338 	mvn.w	r3, #56	; 0x38
 805cb00:	60fb      	str	r3, [r7, #12]
 805cb02:	e034      	b.n	805cb6e <vl53l5_load_firmware+0xa4>
 805cb04:	687b      	ldr	r3, [r7, #4]
 805cb06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 805cb08:	2b00      	cmp	r3, #0
 805cb0a:	d103      	bne.n	805cb14 <vl53l5_load_firmware+0x4a>
 805cb0c:	f06f 0303 	mvn.w	r3, #3
 805cb10:	60fb      	str	r3, [r7, #12]
 805cb12:	e02c      	b.n	805cb6e <vl53l5_load_firmware+0xa4>
 805cb14:	6878      	ldr	r0, [r7, #4]
 805cb16:	f7ff ff9b 	bl	805ca50 <_wait_for_boot_complete_before_fw_load>
 805cb1a:	60f8      	str	r0, [r7, #12]
 805cb1c:	68fb      	ldr	r3, [r7, #12]
 805cb1e:	2b00      	cmp	r3, #0
 805cb20:	db1e      	blt.n	805cb60 <vl53l5_load_firmware+0x96>
 805cb22:	6878      	ldr	r0, [r7, #4]
 805cb24:	f7ff ff3b 	bl	805c99e <_download_fw_to_ram>
 805cb28:	60f8      	str	r0, [r7, #12]
 805cb2a:	68fb      	ldr	r3, [r7, #12]
 805cb2c:	2b00      	cmp	r3, #0
 805cb2e:	db19      	blt.n	805cb64 <vl53l5_load_firmware+0x9a>
 805cb30:	6878      	ldr	r0, [r7, #4]
 805cb32:	f7ff ffb0 	bl	805ca96 <_wait_for_boot_complete_after_fw_load>
 805cb36:	60f8      	str	r0, [r7, #12]
 805cb38:	68fb      	ldr	r3, [r7, #12]
 805cb3a:	2b00      	cmp	r3, #0
 805cb3c:	db14      	blt.n	805cb68 <vl53l5_load_firmware+0x9e>
 805cb3e:	2202      	movs	r2, #2
 805cb40:	f647 71ff 	movw	r1, #32767	; 0x7fff
 805cb44:	6878      	ldr	r0, [r7, #4]
 805cb46:	f7ff fc71 	bl	805c42c <_write_byte>
 805cb4a:	60f8      	str	r0, [r7, #12]
 805cb4c:	68fb      	ldr	r3, [r7, #12]
 805cb4e:	2b00      	cmp	r3, #0
 805cb50:	db0c      	blt.n	805cb6c <vl53l5_load_firmware+0xa2>
 805cb52:	6878      	ldr	r0, [r7, #4]
 805cb54:	f7ff fc90 	bl	805c478 <_check_fw_checksum>
 805cb58:	60f8      	str	r0, [r7, #12]
 805cb5a:	68fb      	ldr	r3, [r7, #12]
 805cb5c:	2b00      	cmp	r3, #0
 805cb5e:	e006      	b.n	805cb6e <vl53l5_load_firmware+0xa4>
 805cb60:	bf00      	nop
 805cb62:	e004      	b.n	805cb6e <vl53l5_load_firmware+0xa4>
 805cb64:	bf00      	nop
 805cb66:	e002      	b.n	805cb6e <vl53l5_load_firmware+0xa4>
 805cb68:	bf00      	nop
 805cb6a:	e000      	b.n	805cb6e <vl53l5_load_firmware+0xa4>
 805cb6c:	bf00      	nop
 805cb6e:	68fb      	ldr	r3, [r7, #12]
 805cb70:	2b00      	cmp	r3, #0
 805cb72:	da05      	bge.n	805cb80 <vl53l5_load_firmware+0xb6>
 805cb74:	2202      	movs	r2, #2
 805cb76:	f647 71ff 	movw	r1, #32767	; 0x7fff
 805cb7a:	6878      	ldr	r0, [r7, #4]
 805cb7c:	f7ff fc56 	bl	805c42c <_write_byte>
 805cb80:	68fb      	ldr	r3, [r7, #12]
 805cb82:	4618      	mov	r0, r3
 805cb84:	3710      	adds	r7, #16
 805cb86:	46bd      	mov	sp, r7
 805cb88:	bd80      	pop	{r7, pc}

0805cb8a <vl53l5_register_read_modify_write>:
 805cb8a:	b580      	push	{r7, lr}
 805cb8c:	b084      	sub	sp, #16
 805cb8e:	af00      	add	r7, sp, #0
 805cb90:	6078      	str	r0, [r7, #4]
 805cb92:	4608      	mov	r0, r1
 805cb94:	4611      	mov	r1, r2
 805cb96:	461a      	mov	r2, r3
 805cb98:	4603      	mov	r3, r0
 805cb9a:	807b      	strh	r3, [r7, #2]
 805cb9c:	460b      	mov	r3, r1
 805cb9e:	707b      	strb	r3, [r7, #1]
 805cba0:	4613      	mov	r3, r2
 805cba2:	703b      	strb	r3, [r7, #0]
 805cba4:	2300      	movs	r3, #0
 805cba6:	60fb      	str	r3, [r7, #12]
 805cba8:	2300      	movs	r3, #0
 805cbaa:	72fb      	strb	r3, [r7, #11]
 805cbac:	f107 020b 	add.w	r2, r7, #11
 805cbb0:	8879      	ldrh	r1, [r7, #2]
 805cbb2:	2301      	movs	r3, #1
 805cbb4:	6878      	ldr	r0, [r7, #4]
 805cbb6:	f001 ff9b 	bl	805eaf0 <vl53l5_read_multi>
 805cbba:	60f8      	str	r0, [r7, #12]
 805cbbc:	68fb      	ldr	r3, [r7, #12]
 805cbbe:	2b00      	cmp	r3, #0
 805cbc0:	d112      	bne.n	805cbe8 <vl53l5_register_read_modify_write+0x5e>
 805cbc2:	7afa      	ldrb	r2, [r7, #11]
 805cbc4:	787b      	ldrb	r3, [r7, #1]
 805cbc6:	4013      	ands	r3, r2
 805cbc8:	b2db      	uxtb	r3, r3
 805cbca:	72fb      	strb	r3, [r7, #11]
 805cbcc:	7afa      	ldrb	r2, [r7, #11]
 805cbce:	783b      	ldrb	r3, [r7, #0]
 805cbd0:	4313      	orrs	r3, r2
 805cbd2:	b2db      	uxtb	r3, r3
 805cbd4:	72fb      	strb	r3, [r7, #11]
 805cbd6:	f107 020b 	add.w	r2, r7, #11
 805cbda:	8879      	ldrh	r1, [r7, #2]
 805cbdc:	2301      	movs	r3, #1
 805cbde:	6878      	ldr	r0, [r7, #4]
 805cbe0:	f001 ff69 	bl	805eab6 <vl53l5_write_multi>
 805cbe4:	60f8      	str	r0, [r7, #12]
 805cbe6:	e000      	b.n	805cbea <vl53l5_register_read_modify_write+0x60>
 805cbe8:	bf00      	nop
 805cbea:	68fb      	ldr	r3, [r7, #12]
 805cbec:	4618      	mov	r0, r3
 805cbee:	3710      	adds	r7, #16
 805cbf0:	46bd      	mov	sp, r7
 805cbf2:	bd80      	pop	{r7, pc}

0805cbf4 <vl53l5_set_page>:
 805cbf4:	b580      	push	{r7, lr}
 805cbf6:	b084      	sub	sp, #16
 805cbf8:	af00      	add	r7, sp, #0
 805cbfa:	6078      	str	r0, [r7, #4]
 805cbfc:	460b      	mov	r3, r1
 805cbfe:	70fb      	strb	r3, [r7, #3]
 805cc00:	2300      	movs	r3, #0
 805cc02:	60fb      	str	r3, [r7, #12]
 805cc04:	1cfa      	adds	r2, r7, #3
 805cc06:	2301      	movs	r3, #1
 805cc08:	f647 71ff 	movw	r1, #32767	; 0x7fff
 805cc0c:	6878      	ldr	r0, [r7, #4]
 805cc0e:	f001 ff52 	bl	805eab6 <vl53l5_write_multi>
 805cc12:	60f8      	str	r0, [r7, #12]
 805cc14:	68fb      	ldr	r3, [r7, #12]
 805cc16:	4618      	mov	r0, r3
 805cc18:	3710      	adds	r7, #16
 805cc1a:	46bd      	mov	sp, r7
 805cc1c:	bd80      	pop	{r7, pc}

0805cc1e <vl53l5_set_regulators>:
 805cc1e:	b580      	push	{r7, lr}
 805cc20:	b084      	sub	sp, #16
 805cc22:	af00      	add	r7, sp, #0
 805cc24:	6078      	str	r0, [r7, #4]
 805cc26:	460b      	mov	r3, r1
 805cc28:	70fb      	strb	r3, [r7, #3]
 805cc2a:	4613      	mov	r3, r2
 805cc2c:	70bb      	strb	r3, [r7, #2]
 805cc2e:	2300      	movs	r3, #0
 805cc30:	60fb      	str	r3, [r7, #12]
 805cc32:	2300      	movs	r3, #0
 805cc34:	817b      	strh	r3, [r7, #10]
 805cc36:	2300      	movs	r3, #0
 805cc38:	727b      	strb	r3, [r7, #9]
 805cc3a:	2300      	movs	r3, #0
 805cc3c:	723b      	strb	r3, [r7, #8]
 805cc3e:	23fc      	movs	r3, #252	; 0xfc
 805cc40:	727b      	strb	r3, [r7, #9]
 805cc42:	2300      	movs	r3, #0
 805cc44:	723b      	strb	r3, [r7, #8]
 805cc46:	78fb      	ldrb	r3, [r7, #3]
 805cc48:	2b00      	cmp	r3, #0
 805cc4a:	d001      	beq.n	805cc50 <vl53l5_set_regulators+0x32>
 805cc4c:	2200      	movs	r2, #0
 805cc4e:	e000      	b.n	805cc52 <vl53l5_set_regulators+0x34>
 805cc50:	2202      	movs	r2, #2
 805cc52:	f997 3008 	ldrsb.w	r3, [r7, #8]
 805cc56:	4313      	orrs	r3, r2
 805cc58:	b25b      	sxtb	r3, r3
 805cc5a:	723b      	strb	r3, [r7, #8]
 805cc5c:	78bb      	ldrb	r3, [r7, #2]
 805cc5e:	2b00      	cmp	r3, #0
 805cc60:	bf0c      	ite	eq
 805cc62:	2301      	moveq	r3, #1
 805cc64:	2300      	movne	r3, #0
 805cc66:	b2db      	uxtb	r3, r3
 805cc68:	b25a      	sxtb	r2, r3
 805cc6a:	f997 3008 	ldrsb.w	r3, [r7, #8]
 805cc6e:	4313      	orrs	r3, r2
 805cc70:	b25b      	sxtb	r3, r3
 805cc72:	723b      	strb	r3, [r7, #8]
 805cc74:	230f      	movs	r3, #15
 805cc76:	817b      	strh	r3, [r7, #10]
 805cc78:	7a3b      	ldrb	r3, [r7, #8]
 805cc7a:	7a7a      	ldrb	r2, [r7, #9]
 805cc7c:	8979      	ldrh	r1, [r7, #10]
 805cc7e:	6878      	ldr	r0, [r7, #4]
 805cc80:	f7ff ff83 	bl	805cb8a <vl53l5_register_read_modify_write>
 805cc84:	60f8      	str	r0, [r7, #12]
 805cc86:	68fb      	ldr	r3, [r7, #12]
 805cc88:	4618      	mov	r0, r3
 805cc8a:	3710      	adds	r7, #16
 805cc8c:	46bd      	mov	sp, r7
 805cc8e:	bd80      	pop	{r7, pc}

0805cc90 <vl53l5_set_xshut_bypass>:
 805cc90:	b580      	push	{r7, lr}
 805cc92:	b086      	sub	sp, #24
 805cc94:	af00      	add	r7, sp, #0
 805cc96:	6078      	str	r0, [r7, #4]
 805cc98:	460b      	mov	r3, r1
 805cc9a:	70fb      	strb	r3, [r7, #3]
 805cc9c:	2300      	movs	r3, #0
 805cc9e:	613b      	str	r3, [r7, #16]
 805cca0:	2300      	movs	r3, #0
 805cca2:	81fb      	strh	r3, [r7, #14]
 805cca4:	2300      	movs	r3, #0
 805cca6:	75fb      	strb	r3, [r7, #23]
 805cca8:	2300      	movs	r3, #0
 805ccaa:	75bb      	strb	r3, [r7, #22]
 805ccac:	2309      	movs	r3, #9
 805ccae:	81fb      	strh	r3, [r7, #14]
 805ccb0:	78fb      	ldrb	r3, [r7, #3]
 805ccb2:	2b01      	cmp	r3, #1
 805ccb4:	d104      	bne.n	805ccc0 <vl53l5_set_xshut_bypass+0x30>
 805ccb6:	23ff      	movs	r3, #255	; 0xff
 805ccb8:	75fb      	strb	r3, [r7, #23]
 805ccba:	2301      	movs	r3, #1
 805ccbc:	75bb      	strb	r3, [r7, #22]
 805ccbe:	e003      	b.n	805ccc8 <vl53l5_set_xshut_bypass+0x38>
 805ccc0:	23fe      	movs	r3, #254	; 0xfe
 805ccc2:	75fb      	strb	r3, [r7, #23]
 805ccc4:	2300      	movs	r3, #0
 805ccc6:	75bb      	strb	r3, [r7, #22]
 805ccc8:	7dbb      	ldrb	r3, [r7, #22]
 805ccca:	7dfa      	ldrb	r2, [r7, #23]
 805cccc:	89f9      	ldrh	r1, [r7, #14]
 805ccce:	6878      	ldr	r0, [r7, #4]
 805ccd0:	f7ff ff5b 	bl	805cb8a <vl53l5_register_read_modify_write>
 805ccd4:	6138      	str	r0, [r7, #16]
 805ccd6:	693b      	ldr	r3, [r7, #16]
 805ccd8:	4618      	mov	r0, r3
 805ccda:	3718      	adds	r7, #24
 805ccdc:	46bd      	mov	sp, r7
 805ccde:	bd80      	pop	{r7, pc}

0805cce0 <vl53l5_set_manual_xshut_state>:
 805cce0:	b580      	push	{r7, lr}
 805cce2:	b084      	sub	sp, #16
 805cce4:	af00      	add	r7, sp, #0
 805cce6:	6078      	str	r0, [r7, #4]
 805cce8:	460b      	mov	r3, r1
 805ccea:	70fb      	strb	r3, [r7, #3]
 805ccec:	2300      	movs	r3, #0
 805ccee:	60fb      	str	r3, [r7, #12]
 805ccf0:	2300      	movs	r3, #0
 805ccf2:	817b      	strh	r3, [r7, #10]
 805ccf4:	2300      	movs	r3, #0
 805ccf6:	727b      	strb	r3, [r7, #9]
 805ccf8:	2309      	movs	r3, #9
 805ccfa:	817b      	strh	r3, [r7, #10]
 805ccfc:	2300      	movs	r3, #0
 805ccfe:	727b      	strb	r3, [r7, #9]
 805cd00:	f107 0209 	add.w	r2, r7, #9
 805cd04:	8979      	ldrh	r1, [r7, #10]
 805cd06:	2301      	movs	r3, #1
 805cd08:	6878      	ldr	r0, [r7, #4]
 805cd0a:	f001 fef1 	bl	805eaf0 <vl53l5_read_multi>
 805cd0e:	60f8      	str	r0, [r7, #12]
 805cd10:	68fb      	ldr	r3, [r7, #12]
 805cd12:	2b00      	cmp	r3, #0
 805cd14:	d119      	bne.n	805cd4a <vl53l5_set_manual_xshut_state+0x6a>
 805cd16:	7a7b      	ldrb	r3, [r7, #9]
 805cd18:	f023 0307 	bic.w	r3, r3, #7
 805cd1c:	b2db      	uxtb	r3, r3
 805cd1e:	727b      	strb	r3, [r7, #9]
 805cd20:	78fb      	ldrb	r3, [r7, #3]
 805cd22:	2b00      	cmp	r3, #0
 805cd24:	d001      	beq.n	805cd2a <vl53l5_set_manual_xshut_state+0x4a>
 805cd26:	2204      	movs	r2, #4
 805cd28:	e000      	b.n	805cd2c <vl53l5_set_manual_xshut_state+0x4c>
 805cd2a:	2202      	movs	r2, #2
 805cd2c:	7a7b      	ldrb	r3, [r7, #9]
 805cd2e:	b25b      	sxtb	r3, r3
 805cd30:	4313      	orrs	r3, r2
 805cd32:	b25b      	sxtb	r3, r3
 805cd34:	b2db      	uxtb	r3, r3
 805cd36:	727b      	strb	r3, [r7, #9]
 805cd38:	f107 0209 	add.w	r2, r7, #9
 805cd3c:	8979      	ldrh	r1, [r7, #10]
 805cd3e:	2301      	movs	r3, #1
 805cd40:	6878      	ldr	r0, [r7, #4]
 805cd42:	f001 feb8 	bl	805eab6 <vl53l5_write_multi>
 805cd46:	60f8      	str	r0, [r7, #12]
 805cd48:	e000      	b.n	805cd4c <vl53l5_set_manual_xshut_state+0x6c>
 805cd4a:	bf00      	nop
 805cd4c:	68fb      	ldr	r3, [r7, #12]
 805cd4e:	4618      	mov	r0, r3
 805cd50:	3710      	adds	r7, #16
 805cd52:	46bd      	mov	sp, r7
 805cd54:	bd80      	pop	{r7, pc}

0805cd56 <vl53l5_wait_mcu_boot>:
 805cd56:	b580      	push	{r7, lr}
 805cd58:	b088      	sub	sp, #32
 805cd5a:	af00      	add	r7, sp, #0
 805cd5c:	60f8      	str	r0, [r7, #12]
 805cd5e:	607a      	str	r2, [r7, #4]
 805cd60:	603b      	str	r3, [r7, #0]
 805cd62:	460b      	mov	r3, r1
 805cd64:	72fb      	strb	r3, [r7, #11]
 805cd66:	2300      	movs	r3, #0
 805cd68:	61fb      	str	r3, [r7, #28]
 805cd6a:	2300      	movs	r3, #0
 805cd6c:	61bb      	str	r3, [r7, #24]
 805cd6e:	2300      	movs	r3, #0
 805cd70:	617b      	str	r3, [r7, #20]
 805cd72:	f107 0318 	add.w	r3, r7, #24
 805cd76:	4619      	mov	r1, r3
 805cd78:	68f8      	ldr	r0, [r7, #12]
 805cd7a:	f001 ff35 	bl	805ebe8 <vl53l5_get_tick_count>
 805cd7e:	61f8      	str	r0, [r7, #28]
 805cd80:	69fb      	ldr	r3, [r7, #28]
 805cd82:	2b00      	cmp	r3, #0
 805cd84:	f040 80ac 	bne.w	805cee0 <vl53l5_wait_mcu_boot+0x18a>
 805cd88:	687b      	ldr	r3, [r7, #4]
 805cd8a:	2b00      	cmp	r3, #0
 805cd8c:	d102      	bne.n	805cd94 <vl53l5_wait_mcu_boot+0x3e>
 805cd8e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 805cd92:	607b      	str	r3, [r7, #4]
 805cd94:	683a      	ldr	r2, [r7, #0]
 805cd96:	687b      	ldr	r3, [r7, #4]
 805cd98:	429a      	cmp	r2, r3
 805cd9a:	d901      	bls.n	805cda0 <vl53l5_wait_mcu_boot+0x4a>
 805cd9c:	687b      	ldr	r3, [r7, #4]
 805cd9e:	603b      	str	r3, [r7, #0]
 805cda0:	68fb      	ldr	r3, [r7, #12]
 805cda2:	2200      	movs	r2, #0
 805cda4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 805cda8:	68fb      	ldr	r3, [r7, #12]
 805cdaa:	2200      	movs	r2, #0
 805cdac:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 805cdb0:	68fb      	ldr	r3, [r7, #12]
 805cdb2:	f103 0258 	add.w	r2, r3, #88	; 0x58
 805cdb6:	2301      	movs	r3, #1
 805cdb8:	2106      	movs	r1, #6
 805cdba:	68f8      	ldr	r0, [r7, #12]
 805cdbc:	f001 fe98 	bl	805eaf0 <vl53l5_read_multi>
 805cdc0:	61f8      	str	r0, [r7, #28]
 805cdc2:	69fb      	ldr	r3, [r7, #28]
 805cdc4:	2b00      	cmp	r3, #0
 805cdc6:	f040 808d 	bne.w	805cee4 <vl53l5_wait_mcu_boot+0x18e>
 805cdca:	68fb      	ldr	r3, [r7, #12]
 805cdcc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 805cdd0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 805cdd4:	b2db      	uxtb	r3, r3
 805cdd6:	2b00      	cmp	r3, #0
 805cdd8:	d018      	beq.n	805ce0c <vl53l5_wait_mcu_boot+0xb6>
 805cdda:	68fb      	ldr	r3, [r7, #12]
 805cddc:	f103 0259 	add.w	r2, r3, #89	; 0x59
 805cde0:	2301      	movs	r3, #1
 805cde2:	2107      	movs	r1, #7
 805cde4:	68f8      	ldr	r0, [r7, #12]
 805cde6:	f001 fe83 	bl	805eaf0 <vl53l5_read_multi>
 805cdea:	61f8      	str	r0, [r7, #28]
 805cdec:	69fb      	ldr	r3, [r7, #28]
 805cdee:	2b00      	cmp	r3, #0
 805cdf0:	d17a      	bne.n	805cee8 <vl53l5_wait_mcu_boot+0x192>
 805cdf2:	68fb      	ldr	r3, [r7, #12]
 805cdf4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 805cdf8:	2b00      	cmp	r3, #0
 805cdfa:	d003      	beq.n	805ce04 <vl53l5_wait_mcu_boot+0xae>
 805cdfc:	f06f 033a 	mvn.w	r3, #58	; 0x3a
 805ce00:	61fb      	str	r3, [r7, #28]
 805ce02:	e078      	b.n	805cef6 <vl53l5_wait_mcu_boot+0x1a0>
 805ce04:	f06f 0340 	mvn.w	r3, #64	; 0x40
 805ce08:	61fb      	str	r3, [r7, #28]
 805ce0a:	e074      	b.n	805cef6 <vl53l5_wait_mcu_boot+0x1a0>
 805ce0c:	7afb      	ldrb	r3, [r7, #11]
 805ce0e:	2b02      	cmp	r3, #2
 805ce10:	d10b      	bne.n	805ce2a <vl53l5_wait_mcu_boot+0xd4>
 805ce12:	68fb      	ldr	r3, [r7, #12]
 805ce14:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 805ce18:	f003 0308 	and.w	r3, r3, #8
 805ce1c:	b2db      	uxtb	r3, r3
 805ce1e:	2b00      	cmp	r3, #0
 805ce20:	d019      	beq.n	805ce56 <vl53l5_wait_mcu_boot+0x100>
 805ce22:	f06f 0344 	mvn.w	r3, #68	; 0x44
 805ce26:	61fb      	str	r3, [r7, #28]
 805ce28:	e065      	b.n	805cef6 <vl53l5_wait_mcu_boot+0x1a0>
 805ce2a:	7afb      	ldrb	r3, [r7, #11]
 805ce2c:	2b01      	cmp	r3, #1
 805ce2e:	d107      	bne.n	805ce40 <vl53l5_wait_mcu_boot+0xea>
 805ce30:	68fb      	ldr	r3, [r7, #12]
 805ce32:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 805ce36:	f003 0301 	and.w	r3, r3, #1
 805ce3a:	b2db      	uxtb	r3, r3
 805ce3c:	2b00      	cmp	r3, #0
 805ce3e:	d12e      	bne.n	805ce9e <vl53l5_wait_mcu_boot+0x148>
 805ce40:	7afb      	ldrb	r3, [r7, #11]
 805ce42:	2b00      	cmp	r3, #0
 805ce44:	d107      	bne.n	805ce56 <vl53l5_wait_mcu_boot+0x100>
 805ce46:	68fb      	ldr	r3, [r7, #12]
 805ce48:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 805ce4c:	f003 0301 	and.w	r3, r3, #1
 805ce50:	b2db      	uxtb	r3, r3
 805ce52:	2b00      	cmp	r3, #0
 805ce54:	d023      	beq.n	805ce9e <vl53l5_wait_mcu_boot+0x148>
 805ce56:	f107 0314 	add.w	r3, r7, #20
 805ce5a:	4619      	mov	r1, r3
 805ce5c:	68f8      	ldr	r0, [r7, #12]
 805ce5e:	f001 fec3 	bl	805ebe8 <vl53l5_get_tick_count>
 805ce62:	61f8      	str	r0, [r7, #28]
 805ce64:	69fb      	ldr	r3, [r7, #28]
 805ce66:	2b00      	cmp	r3, #0
 805ce68:	d140      	bne.n	805ceec <vl53l5_wait_mcu_boot+0x196>
 805ce6a:	69b9      	ldr	r1, [r7, #24]
 805ce6c:	697a      	ldr	r2, [r7, #20]
 805ce6e:	687b      	ldr	r3, [r7, #4]
 805ce70:	68f8      	ldr	r0, [r7, #12]
 805ce72:	f001 fed4 	bl	805ec1e <vl53l5_check_for_timeout>
 805ce76:	61f8      	str	r0, [r7, #28]
 805ce78:	69fb      	ldr	r3, [r7, #28]
 805ce7a:	2b00      	cmp	r3, #0
 805ce7c:	d003      	beq.n	805ce86 <vl53l5_wait_mcu_boot+0x130>
 805ce7e:	f06f 0332 	mvn.w	r3, #50	; 0x32
 805ce82:	61fb      	str	r3, [r7, #28]
 805ce84:	e037      	b.n	805cef6 <vl53l5_wait_mcu_boot+0x1a0>
 805ce86:	683b      	ldr	r3, [r7, #0]
 805ce88:	2b00      	cmp	r3, #0
 805ce8a:	d091      	beq.n	805cdb0 <vl53l5_wait_mcu_boot+0x5a>
 805ce8c:	6839      	ldr	r1, [r7, #0]
 805ce8e:	68f8      	ldr	r0, [r7, #12]
 805ce90:	f001 fe6a 	bl	805eb68 <vl53l5_wait_ms>
 805ce94:	61f8      	str	r0, [r7, #28]
 805ce96:	69fb      	ldr	r3, [r7, #28]
 805ce98:	2b00      	cmp	r3, #0
 805ce9a:	d129      	bne.n	805cef0 <vl53l5_wait_mcu_boot+0x19a>
 805ce9c:	e788      	b.n	805cdb0 <vl53l5_wait_mcu_boot+0x5a>
 805ce9e:	bf00      	nop
 805cea0:	68fb      	ldr	r3, [r7, #12]
 805cea2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 805cea6:	f003 0308 	and.w	r3, r3, #8
 805ceaa:	b2db      	uxtb	r3, r3
 805ceac:	2b00      	cmp	r3, #0
 805ceae:	d021      	beq.n	805cef4 <vl53l5_wait_mcu_boot+0x19e>
 805ceb0:	68fb      	ldr	r3, [r7, #12]
 805ceb2:	f103 0259 	add.w	r2, r3, #89	; 0x59
 805ceb6:	2301      	movs	r3, #1
 805ceb8:	2107      	movs	r1, #7
 805ceba:	68f8      	ldr	r0, [r7, #12]
 805cebc:	f001 fe18 	bl	805eaf0 <vl53l5_read_multi>
 805cec0:	68fb      	ldr	r3, [r7, #12]
 805cec2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 805cec6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 805ceca:	b2db      	uxtb	r3, r3
 805cecc:	2b00      	cmp	r3, #0
 805cece:	d003      	beq.n	805ced8 <vl53l5_wait_mcu_boot+0x182>
 805ced0:	f06f 0331 	mvn.w	r3, #49	; 0x31
 805ced4:	61fb      	str	r3, [r7, #28]
 805ced6:	e00e      	b.n	805cef6 <vl53l5_wait_mcu_boot+0x1a0>
 805ced8:	f06f 0344 	mvn.w	r3, #68	; 0x44
 805cedc:	61fb      	str	r3, [r7, #28]
 805cede:	e00a      	b.n	805cef6 <vl53l5_wait_mcu_boot+0x1a0>
 805cee0:	bf00      	nop
 805cee2:	e008      	b.n	805cef6 <vl53l5_wait_mcu_boot+0x1a0>
 805cee4:	bf00      	nop
 805cee6:	e006      	b.n	805cef6 <vl53l5_wait_mcu_boot+0x1a0>
 805cee8:	bf00      	nop
 805ceea:	e004      	b.n	805cef6 <vl53l5_wait_mcu_boot+0x1a0>
 805ceec:	bf00      	nop
 805ceee:	e002      	b.n	805cef6 <vl53l5_wait_mcu_boot+0x1a0>
 805cef0:	bf00      	nop
 805cef2:	e000      	b.n	805cef6 <vl53l5_wait_mcu_boot+0x1a0>
 805cef4:	bf00      	nop
 805cef6:	69fb      	ldr	r3, [r7, #28]
 805cef8:	4618      	mov	r0, r3
 805cefa:	3720      	adds	r7, #32
 805cefc:	46bd      	mov	sp, r7
 805cefe:	bd80      	pop	{r7, pc}

0805cf00 <vl53l5_check_device_booted>:
 805cf00:	b580      	push	{r7, lr}
 805cf02:	b084      	sub	sp, #16
 805cf04:	af00      	add	r7, sp, #0
 805cf06:	6078      	str	r0, [r7, #4]
 805cf08:	2300      	movs	r3, #0
 805cf0a:	60fb      	str	r3, [r7, #12]
 805cf0c:	687b      	ldr	r3, [r7, #4]
 805cf0e:	2200      	movs	r2, #0
 805cf10:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 805cf14:	2100      	movs	r1, #0
 805cf16:	6878      	ldr	r0, [r7, #4]
 805cf18:	f7ff fe6c 	bl	805cbf4 <vl53l5_set_page>
 805cf1c:	60f8      	str	r0, [r7, #12]
 805cf1e:	68fb      	ldr	r3, [r7, #12]
 805cf20:	2b00      	cmp	r3, #0
 805cf22:	d123      	bne.n	805cf6c <vl53l5_check_device_booted+0x6c>
 805cf24:	687b      	ldr	r3, [r7, #4]
 805cf26:	f103 0259 	add.w	r2, r3, #89	; 0x59
 805cf2a:	2301      	movs	r3, #1
 805cf2c:	2107      	movs	r1, #7
 805cf2e:	6878      	ldr	r0, [r7, #4]
 805cf30:	f001 fdde 	bl	805eaf0 <vl53l5_read_multi>
 805cf34:	60f8      	str	r0, [r7, #12]
 805cf36:	68fb      	ldr	r3, [r7, #12]
 805cf38:	2b00      	cmp	r3, #0
 805cf3a:	d111      	bne.n	805cf60 <vl53l5_check_device_booted+0x60>
 805cf3c:	687b      	ldr	r3, [r7, #4]
 805cf3e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 805cf42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 805cf46:	b2db      	uxtb	r3, r3
 805cf48:	2b00      	cmp	r3, #0
 805cf4a:	d004      	beq.n	805cf56 <vl53l5_check_device_booted+0x56>
 805cf4c:	687b      	ldr	r3, [r7, #4]
 805cf4e:	2201      	movs	r2, #1
 805cf50:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 805cf54:	e005      	b.n	805cf62 <vl53l5_check_device_booted+0x62>
 805cf56:	687b      	ldr	r3, [r7, #4]
 805cf58:	2200      	movs	r2, #0
 805cf5a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 805cf5e:	e000      	b.n	805cf62 <vl53l5_check_device_booted+0x62>
 805cf60:	bf00      	nop
 805cf62:	2102      	movs	r1, #2
 805cf64:	6878      	ldr	r0, [r7, #4]
 805cf66:	f7ff fe45 	bl	805cbf4 <vl53l5_set_page>
 805cf6a:	e000      	b.n	805cf6e <vl53l5_check_device_booted+0x6e>
 805cf6c:	bf00      	nop
 805cf6e:	68fb      	ldr	r3, [r7, #12]
 805cf70:	4618      	mov	r0, r3
 805cf72:	3710      	adds	r7, #16
 805cf74:	46bd      	mov	sp, r7
 805cf76:	bd80      	pop	{r7, pc}

0805cf78 <_write_byte>:
 805cf78:	b580      	push	{r7, lr}
 805cf7a:	b082      	sub	sp, #8
 805cf7c:	af00      	add	r7, sp, #0
 805cf7e:	6078      	str	r0, [r7, #4]
 805cf80:	460b      	mov	r3, r1
 805cf82:	807b      	strh	r3, [r7, #2]
 805cf84:	4613      	mov	r3, r2
 805cf86:	707b      	strb	r3, [r7, #1]
 805cf88:	1c7a      	adds	r2, r7, #1
 805cf8a:	8879      	ldrh	r1, [r7, #2]
 805cf8c:	2301      	movs	r3, #1
 805cf8e:	6878      	ldr	r0, [r7, #4]
 805cf90:	f001 fd91 	bl	805eab6 <vl53l5_write_multi>
 805cf94:	4603      	mov	r3, r0
 805cf96:	4618      	mov	r0, r3
 805cf98:	3708      	adds	r7, #8
 805cf9a:	46bd      	mov	sp, r7
 805cf9c:	bd80      	pop	{r7, pc}

0805cf9e <_check_rom_firmware_boot_cut_1_2>:
 805cf9e:	b580      	push	{r7, lr}
 805cfa0:	b084      	sub	sp, #16
 805cfa2:	af00      	add	r7, sp, #0
 805cfa4:	6078      	str	r0, [r7, #4]
 805cfa6:	2300      	movs	r3, #0
 805cfa8:	60fb      	str	r3, [r7, #12]
 805cfaa:	2300      	movs	r3, #0
 805cfac:	2200      	movs	r2, #0
 805cfae:	2101      	movs	r1, #1
 805cfb0:	6878      	ldr	r0, [r7, #4]
 805cfb2:	f7ff fed0 	bl	805cd56 <vl53l5_wait_mcu_boot>
 805cfb6:	60f8      	str	r0, [r7, #12]
 805cfb8:	68fb      	ldr	r3, [r7, #12]
 805cfba:	2b00      	cmp	r3, #0
 805cfbc:	db06      	blt.n	805cfcc <_check_rom_firmware_boot_cut_1_2+0x2e>
 805cfbe:	2201      	movs	r2, #1
 805cfc0:	210e      	movs	r1, #14
 805cfc2:	6878      	ldr	r0, [r7, #4]
 805cfc4:	f7ff ffd8 	bl	805cf78 <_write_byte>
 805cfc8:	60f8      	str	r0, [r7, #12]
 805cfca:	e000      	b.n	805cfce <_check_rom_firmware_boot_cut_1_2+0x30>
 805cfcc:	bf00      	nop
 805cfce:	68fb      	ldr	r3, [r7, #12]
 805cfd0:	4618      	mov	r0, r3
 805cfd2:	3710      	adds	r7, #16
 805cfd4:	46bd      	mov	sp, r7
 805cfd6:	bd80      	pop	{r7, pc}

0805cfd8 <vl53l5_check_rom_firmware_boot>:
 805cfd8:	b580      	push	{r7, lr}
 805cfda:	b084      	sub	sp, #16
 805cfdc:	af00      	add	r7, sp, #0
 805cfde:	6078      	str	r0, [r7, #4]
 805cfe0:	2300      	movs	r3, #0
 805cfe2:	60fb      	str	r3, [r7, #12]
 805cfe4:	2300      	movs	r3, #0
 805cfe6:	72fb      	strb	r3, [r7, #11]
 805cfe8:	2300      	movs	r3, #0
 805cfea:	72bb      	strb	r3, [r7, #10]
 805cfec:	2100      	movs	r1, #0
 805cfee:	6878      	ldr	r0, [r7, #4]
 805cff0:	f7ff fe00 	bl	805cbf4 <vl53l5_set_page>
 805cff4:	60f8      	str	r0, [r7, #12]
 805cff6:	68fb      	ldr	r3, [r7, #12]
 805cff8:	2b00      	cmp	r3, #0
 805cffa:	db37      	blt.n	805d06c <vl53l5_check_rom_firmware_boot+0x94>
 805cffc:	f107 020b 	add.w	r2, r7, #11
 805d000:	2301      	movs	r3, #1
 805d002:	2100      	movs	r1, #0
 805d004:	6878      	ldr	r0, [r7, #4]
 805d006:	f001 fd73 	bl	805eaf0 <vl53l5_read_multi>
 805d00a:	60f8      	str	r0, [r7, #12]
 805d00c:	68fb      	ldr	r3, [r7, #12]
 805d00e:	2b00      	cmp	r3, #0
 805d010:	db1b      	blt.n	805d04a <vl53l5_check_rom_firmware_boot+0x72>
 805d012:	f107 020a 	add.w	r2, r7, #10
 805d016:	2301      	movs	r3, #1
 805d018:	2101      	movs	r1, #1
 805d01a:	6878      	ldr	r0, [r7, #4]
 805d01c:	f001 fd68 	bl	805eaf0 <vl53l5_read_multi>
 805d020:	60f8      	str	r0, [r7, #12]
 805d022:	68fb      	ldr	r3, [r7, #12]
 805d024:	2b00      	cmp	r3, #0
 805d026:	db12      	blt.n	805d04e <vl53l5_check_rom_firmware_boot+0x76>
 805d028:	7afb      	ldrb	r3, [r7, #11]
 805d02a:	2bf0      	cmp	r3, #240	; 0xf0
 805d02c:	d109      	bne.n	805d042 <vl53l5_check_rom_firmware_boot+0x6a>
 805d02e:	7abb      	ldrb	r3, [r7, #10]
 805d030:	2b02      	cmp	r3, #2
 805d032:	d106      	bne.n	805d042 <vl53l5_check_rom_firmware_boot+0x6a>
 805d034:	6878      	ldr	r0, [r7, #4]
 805d036:	f7ff ffb2 	bl	805cf9e <_check_rom_firmware_boot_cut_1_2>
 805d03a:	60f8      	str	r0, [r7, #12]
 805d03c:	68fb      	ldr	r3, [r7, #12]
 805d03e:	2b00      	cmp	r3, #0
 805d040:	e006      	b.n	805d050 <vl53l5_check_rom_firmware_boot+0x78>
 805d042:	f06f 0363 	mvn.w	r3, #99	; 0x63
 805d046:	60fb      	str	r3, [r7, #12]
 805d048:	e002      	b.n	805d050 <vl53l5_check_rom_firmware_boot+0x78>
 805d04a:	bf00      	nop
 805d04c:	e000      	b.n	805d050 <vl53l5_check_rom_firmware_boot+0x78>
 805d04e:	bf00      	nop
 805d050:	68fb      	ldr	r3, [r7, #12]
 805d052:	2b00      	cmp	r3, #0
 805d054:	d004      	beq.n	805d060 <vl53l5_check_rom_firmware_boot+0x88>
 805d056:	2102      	movs	r1, #2
 805d058:	6878      	ldr	r0, [r7, #4]
 805d05a:	f7ff fdcb 	bl	805cbf4 <vl53l5_set_page>
 805d05e:	e006      	b.n	805d06e <vl53l5_check_rom_firmware_boot+0x96>
 805d060:	2102      	movs	r1, #2
 805d062:	6878      	ldr	r0, [r7, #4]
 805d064:	f7ff fdc6 	bl	805cbf4 <vl53l5_set_page>
 805d068:	60f8      	str	r0, [r7, #12]
 805d06a:	e000      	b.n	805d06e <vl53l5_check_rom_firmware_boot+0x96>
 805d06c:	bf00      	nop
 805d06e:	68fb      	ldr	r3, [r7, #12]
 805d070:	4618      	mov	r0, r3
 805d072:	3710      	adds	r7, #16
 805d074:	46bd      	mov	sp, r7
 805d076:	bd80      	pop	{r7, pc}

0805d078 <vl53l5_dci_write_command>:
 805d078:	b580      	push	{r7, lr}
 805d07a:	b086      	sub	sp, #24
 805d07c:	af00      	add	r7, sp, #0
 805d07e:	6078      	str	r0, [r7, #4]
 805d080:	460b      	mov	r3, r1
 805d082:	70fb      	strb	r3, [r7, #3]
 805d084:	4613      	mov	r3, r2
 805d086:	70bb      	strb	r3, [r7, #2]
 805d088:	2300      	movs	r3, #0
 805d08a:	617b      	str	r3, [r7, #20]
 805d08c:	2300      	movs	r3, #0
 805d08e:	60bb      	str	r3, [r7, #8]
 805d090:	2300      	movs	r3, #0
 805d092:	613b      	str	r3, [r7, #16]
 805d094:	2300      	movs	r3, #0
 805d096:	60fb      	str	r3, [r7, #12]
 805d098:	687b      	ldr	r3, [r7, #4]
 805d09a:	2b00      	cmp	r3, #0
 805d09c:	d103      	bne.n	805d0a6 <vl53l5_dci_write_command+0x2e>
 805d09e:	f06f 0303 	mvn.w	r3, #3
 805d0a2:	617b      	str	r3, [r7, #20]
 805d0a4:	e064      	b.n	805d170 <vl53l5_dci_write_command+0xf8>
 805d0a6:	687b      	ldr	r3, [r7, #4]
 805d0a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 805d0aa:	2b00      	cmp	r3, #0
 805d0ac:	d103      	bne.n	805d0b6 <vl53l5_dci_write_command+0x3e>
 805d0ae:	f06f 0303 	mvn.w	r3, #3
 805d0b2:	617b      	str	r3, [r7, #20]
 805d0b4:	e05c      	b.n	805d170 <vl53l5_dci_write_command+0xf8>
 805d0b6:	78fb      	ldrb	r3, [r7, #3]
 805d0b8:	2b04      	cmp	r3, #4
 805d0ba:	d903      	bls.n	805d0c4 <vl53l5_dci_write_command+0x4c>
 805d0bc:	f06f 034f 	mvn.w	r3, #79	; 0x4f
 805d0c0:	617b      	str	r3, [r7, #20]
 805d0c2:	e055      	b.n	805d170 <vl53l5_dci_write_command+0xf8>
 805d0c4:	687b      	ldr	r3, [r7, #4]
 805d0c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 805d0c8:	687b      	ldr	r3, [r7, #4]
 805d0ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 805d0cc:	1ad3      	subs	r3, r2, r3
 805d0ce:	60bb      	str	r3, [r7, #8]
 805d0d0:	2304      	movs	r3, #4
 805d0d2:	613b      	str	r3, [r7, #16]
 805d0d4:	687b      	ldr	r3, [r7, #4]
 805d0d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 805d0d8:	2b00      	cmp	r3, #0
 805d0da:	d002      	beq.n	805d0e2 <vl53l5_dci_write_command+0x6a>
 805d0dc:	693b      	ldr	r3, [r7, #16]
 805d0de:	3304      	adds	r3, #4
 805d0e0:	613b      	str	r3, [r7, #16]
 805d0e2:	693a      	ldr	r2, [r7, #16]
 805d0e4:	68bb      	ldr	r3, [r7, #8]
 805d0e6:	429a      	cmp	r2, r3
 805d0e8:	d903      	bls.n	805d0f2 <vl53l5_dci_write_command+0x7a>
 805d0ea:	f06f 035b 	mvn.w	r3, #91	; 0x5b
 805d0ee:	617b      	str	r3, [r7, #20]
 805d0f0:	e03e      	b.n	805d170 <vl53l5_dci_write_command+0xf8>
 805d0f2:	687b      	ldr	r3, [r7, #4]
 805d0f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 805d0f6:	693b      	ldr	r3, [r7, #16]
 805d0f8:	4413      	add	r3, r2
 805d0fa:	f642 72f0 	movw	r2, #12272	; 0x2ff0
 805d0fe:	4293      	cmp	r3, r2
 805d100:	d903      	bls.n	805d10a <vl53l5_dci_write_command+0x92>
 805d102:	f06f 030d 	mvn.w	r3, #13
 805d106:	617b      	str	r3, [r7, #20]
 805d108:	e032      	b.n	805d170 <vl53l5_dci_write_command+0xf8>
 805d10a:	687b      	ldr	r3, [r7, #4]
 805d10c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 805d10e:	687b      	ldr	r3, [r7, #4]
 805d110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 805d112:	4413      	add	r3, r2
 805d114:	60fb      	str	r3, [r7, #12]
 805d116:	687b      	ldr	r3, [r7, #4]
 805d118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 805d11a:	2b00      	cmp	r3, #0
 805d11c:	d00c      	beq.n	805d138 <vl53l5_dci_write_command+0xc0>
 805d11e:	687b      	ldr	r3, [r7, #4]
 805d120:	3330      	adds	r3, #48	; 0x30
 805d122:	4619      	mov	r1, r3
 805d124:	68f8      	ldr	r0, [r7, #12]
 805d126:	f000 f89b 	bl	805d260 <_encode_end_data_footer>
 805d12a:	6178      	str	r0, [r7, #20]
 805d12c:	68fb      	ldr	r3, [r7, #12]
 805d12e:	3304      	adds	r3, #4
 805d130:	60fb      	str	r3, [r7, #12]
 805d132:	697b      	ldr	r3, [r7, #20]
 805d134:	2b00      	cmp	r3, #0
 805d136:	d118      	bne.n	805d16a <vl53l5_dci_write_command+0xf2>
 805d138:	687b      	ldr	r3, [r7, #4]
 805d13a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 805d13e:	78bb      	ldrb	r3, [r7, #2]
 805d140:	78fa      	ldrb	r2, [r7, #3]
 805d142:	68f8      	ldr	r0, [r7, #12]
 805d144:	f000 f8ab 	bl	805d29e <_encode_command_footer>
 805d148:	687b      	ldr	r3, [r7, #4]
 805d14a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 805d14c:	687b      	ldr	r3, [r7, #4]
 805d14e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 805d150:	4619      	mov	r1, r3
 805d152:	4610      	mov	r0, r2
 805d154:	f000 fc02 	bl	805d95c <vl53l5_dci_swap_buffer_byte_ordering>
 805d158:	6178      	str	r0, [r7, #20]
 805d15a:	697b      	ldr	r3, [r7, #20]
 805d15c:	2b00      	cmp	r3, #0
 805d15e:	db06      	blt.n	805d16e <vl53l5_dci_write_command+0xf6>
 805d160:	6878      	ldr	r0, [r7, #4]
 805d162:	f000 f8c0 	bl	805d2e6 <_write_comms_buffer_to_command_ui>
 805d166:	6178      	str	r0, [r7, #20]
 805d168:	e002      	b.n	805d170 <vl53l5_dci_write_command+0xf8>
 805d16a:	bf00      	nop
 805d16c:	e000      	b.n	805d170 <vl53l5_dci_write_command+0xf8>
 805d16e:	bf00      	nop
 805d170:	697b      	ldr	r3, [r7, #20]
 805d172:	4618      	mov	r0, r3
 805d174:	3718      	adds	r7, #24
 805d176:	46bd      	mov	sp, r7
 805d178:	bd80      	pop	{r7, pc}

0805d17a <vl53l5_dci_read_command>:
 805d17a:	b580      	push	{r7, lr}
 805d17c:	b084      	sub	sp, #16
 805d17e:	af00      	add	r7, sp, #0
 805d180:	6078      	str	r0, [r7, #4]
 805d182:	2300      	movs	r3, #0
 805d184:	60fb      	str	r3, [r7, #12]
 805d186:	687b      	ldr	r3, [r7, #4]
 805d188:	2b00      	cmp	r3, #0
 805d18a:	d103      	bne.n	805d194 <vl53l5_dci_read_command+0x1a>
 805d18c:	f06f 0303 	mvn.w	r3, #3
 805d190:	60fb      	str	r3, [r7, #12]
 805d192:	e01b      	b.n	805d1cc <vl53l5_dci_read_command+0x52>
 805d194:	687b      	ldr	r3, [r7, #4]
 805d196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 805d198:	2b00      	cmp	r3, #0
 805d19a:	d103      	bne.n	805d1a4 <vl53l5_dci_read_command+0x2a>
 805d19c:	f06f 0303 	mvn.w	r3, #3
 805d1a0:	60fb      	str	r3, [r7, #12]
 805d1a2:	e013      	b.n	805d1cc <vl53l5_dci_read_command+0x52>
 805d1a4:	6878      	ldr	r0, [r7, #4]
 805d1a6:	f000 f8b9 	bl	805d31c <_read_command_ui_to_comms_buffer>
 805d1aa:	60f8      	str	r0, [r7, #12]
 805d1ac:	68fb      	ldr	r3, [r7, #12]
 805d1ae:	2b00      	cmp	r3, #0
 805d1b0:	db0b      	blt.n	805d1ca <vl53l5_dci_read_command+0x50>
 805d1b2:	687b      	ldr	r3, [r7, #4]
 805d1b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 805d1b6:	687b      	ldr	r3, [r7, #4]
 805d1b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 805d1ba:	4619      	mov	r1, r3
 805d1bc:	4610      	mov	r0, r2
 805d1be:	f000 fbcd 	bl	805d95c <vl53l5_dci_swap_buffer_byte_ordering>
 805d1c2:	60f8      	str	r0, [r7, #12]
 805d1c4:	68fb      	ldr	r3, [r7, #12]
 805d1c6:	2b00      	cmp	r3, #0
 805d1c8:	e000      	b.n	805d1cc <vl53l5_dci_read_command+0x52>
 805d1ca:	bf00      	nop
 805d1cc:	68fb      	ldr	r3, [r7, #12]
 805d1ce:	4618      	mov	r0, r3
 805d1d0:	3710      	adds	r7, #16
 805d1d2:	46bd      	mov	sp, r7
 805d1d4:	bd80      	pop	{r7, pc}

0805d1d6 <vl53l5_dci_poll_command_status>:
 805d1d6:	b580      	push	{r7, lr}
 805d1d8:	b088      	sub	sp, #32
 805d1da:	af02      	add	r7, sp, #8
 805d1dc:	60f8      	str	r0, [r7, #12]
 805d1de:	60b9      	str	r1, [r7, #8]
 805d1e0:	607a      	str	r2, [r7, #4]
 805d1e2:	2300      	movs	r3, #0
 805d1e4:	617b      	str	r3, [r7, #20]
 805d1e6:	2300      	movs	r3, #0
 805d1e8:	613b      	str	r3, [r7, #16]
 805d1ea:	68fb      	ldr	r3, [r7, #12]
 805d1ec:	2b00      	cmp	r3, #0
 805d1ee:	d103      	bne.n	805d1f8 <vl53l5_dci_poll_command_status+0x22>
 805d1f0:	f06f 0303 	mvn.w	r3, #3
 805d1f4:	617b      	str	r3, [r7, #20]
 805d1f6:	e02e      	b.n	805d256 <vl53l5_dci_poll_command_status+0x80>
 805d1f8:	687b      	ldr	r3, [r7, #4]
 805d1fa:	2b00      	cmp	r3, #0
 805d1fc:	d102      	bne.n	805d204 <vl53l5_dci_poll_command_status+0x2e>
 805d1fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 805d202:	607b      	str	r3, [r7, #4]
 805d204:	f107 0310 	add.w	r3, r7, #16
 805d208:	4619      	mov	r1, r3
 805d20a:	68f8      	ldr	r0, [r7, #12]
 805d20c:	f001 fcec 	bl	805ebe8 <vl53l5_get_tick_count>
 805d210:	6178      	str	r0, [r7, #20]
 805d212:	697b      	ldr	r3, [r7, #20]
 805d214:	2b00      	cmp	r3, #0
 805d216:	db1b      	blt.n	805d250 <vl53l5_dci_poll_command_status+0x7a>
 805d218:	693a      	ldr	r2, [r7, #16]
 805d21a:	2300      	movs	r3, #0
 805d21c:	9301      	str	r3, [sp, #4]
 805d21e:	2301      	movs	r3, #1
 805d220:	9300      	str	r3, [sp, #0]
 805d222:	4613      	mov	r3, r2
 805d224:	687a      	ldr	r2, [r7, #4]
 805d226:	68b9      	ldr	r1, [r7, #8]
 805d228:	68f8      	ldr	r0, [r7, #12]
 805d22a:	f000 f8f9 	bl	805d420 <_poll_command_status_block>
 805d22e:	6178      	str	r0, [r7, #20]
 805d230:	697b      	ldr	r3, [r7, #20]
 805d232:	2b00      	cmp	r3, #0
 805d234:	d10e      	bne.n	805d254 <vl53l5_dci_poll_command_status+0x7e>
 805d236:	693a      	ldr	r2, [r7, #16]
 805d238:	2301      	movs	r3, #1
 805d23a:	9301      	str	r3, [sp, #4]
 805d23c:	2301      	movs	r3, #1
 805d23e:	9300      	str	r3, [sp, #0]
 805d240:	4613      	mov	r3, r2
 805d242:	687a      	ldr	r2, [r7, #4]
 805d244:	68b9      	ldr	r1, [r7, #8]
 805d246:	68f8      	ldr	r0, [r7, #12]
 805d248:	f000 f8ea 	bl	805d420 <_poll_command_status_block>
 805d24c:	6178      	str	r0, [r7, #20]
 805d24e:	e002      	b.n	805d256 <vl53l5_dci_poll_command_status+0x80>
 805d250:	bf00      	nop
 805d252:	e000      	b.n	805d256 <vl53l5_dci_poll_command_status+0x80>
 805d254:	bf00      	nop
 805d256:	697b      	ldr	r3, [r7, #20]
 805d258:	4618      	mov	r0, r3
 805d25a:	3718      	adds	r7, #24
 805d25c:	46bd      	mov	sp, r7
 805d25e:	bd80      	pop	{r7, pc}

0805d260 <_encode_end_data_footer>:
 805d260:	b580      	push	{r7, lr}
 805d262:	b086      	sub	sp, #24
 805d264:	af02      	add	r7, sp, #8
 805d266:	6078      	str	r0, [r7, #4]
 805d268:	6039      	str	r1, [r7, #0]
 805d26a:	2300      	movs	r3, #0
 805d26c:	60fb      	str	r3, [r7, #12]
 805d26e:	683b      	ldr	r3, [r7, #0]
 805d270:	681b      	ldr	r3, [r3, #0]
 805d272:	1d19      	adds	r1, r3, #4
 805d274:	2300      	movs	r3, #0
 805d276:	9300      	str	r3, [sp, #0]
 805d278:	2300      	movs	r3, #0
 805d27a:	220f      	movs	r2, #15
 805d27c:	6878      	ldr	r0, [r7, #4]
 805d27e:	f000 fabf 	bl	805d800 <vl53l5_dci_encode_block_header>
 805d282:	60f8      	str	r0, [r7, #12]
 805d284:	68fb      	ldr	r3, [r7, #12]
 805d286:	2b00      	cmp	r3, #0
 805d288:	d104      	bne.n	805d294 <_encode_end_data_footer+0x34>
 805d28a:	683b      	ldr	r3, [r7, #0]
 805d28c:	681b      	ldr	r3, [r3, #0]
 805d28e:	1d1a      	adds	r2, r3, #4
 805d290:	683b      	ldr	r3, [r7, #0]
 805d292:	601a      	str	r2, [r3, #0]
 805d294:	68fb      	ldr	r3, [r7, #12]
 805d296:	4618      	mov	r0, r3
 805d298:	3710      	adds	r7, #16
 805d29a:	46bd      	mov	sp, r7
 805d29c:	bd80      	pop	{r7, pc}

0805d29e <_encode_command_footer>:
 805d29e:	b580      	push	{r7, lr}
 805d2a0:	b086      	sub	sp, #24
 805d2a2:	af00      	add	r7, sp, #0
 805d2a4:	60f8      	str	r0, [r7, #12]
 805d2a6:	60b9      	str	r1, [r7, #8]
 805d2a8:	4611      	mov	r1, r2
 805d2aa:	461a      	mov	r2, r3
 805d2ac:	460b      	mov	r3, r1
 805d2ae:	71fb      	strb	r3, [r7, #7]
 805d2b0:	4613      	mov	r3, r2
 805d2b2:	71bb      	strb	r3, [r7, #6]
 805d2b4:	2300      	movs	r3, #0
 805d2b6:	617b      	str	r3, [r7, #20]
 805d2b8:	68bb      	ldr	r3, [r7, #8]
 805d2ba:	681b      	ldr	r3, [r3, #0]
 805d2bc:	b29b      	uxth	r3, r3
 805d2be:	82bb      	strh	r3, [r7, #20]
 805d2c0:	79fb      	ldrb	r3, [r7, #7]
 805d2c2:	75bb      	strb	r3, [r7, #22]
 805d2c4:	79bb      	ldrb	r3, [r7, #6]
 805d2c6:	75fb      	strb	r3, [r7, #23]
 805d2c8:	697b      	ldr	r3, [r7, #20]
 805d2ca:	68fa      	ldr	r2, [r7, #12]
 805d2cc:	2104      	movs	r1, #4
 805d2ce:	4618      	mov	r0, r3
 805d2d0:	f000 fdc4 	bl	805de5c <vl53l5_encode_uint32_t>
 805d2d4:	68bb      	ldr	r3, [r7, #8]
 805d2d6:	681b      	ldr	r3, [r3, #0]
 805d2d8:	1d1a      	adds	r2, r3, #4
 805d2da:	68bb      	ldr	r3, [r7, #8]
 805d2dc:	601a      	str	r2, [r3, #0]
 805d2de:	bf00      	nop
 805d2e0:	3718      	adds	r7, #24
 805d2e2:	46bd      	mov	sp, r7
 805d2e4:	bd80      	pop	{r7, pc}

0805d2e6 <_write_comms_buffer_to_command_ui>:
 805d2e6:	b580      	push	{r7, lr}
 805d2e8:	b084      	sub	sp, #16
 805d2ea:	af00      	add	r7, sp, #0
 805d2ec:	6078      	str	r0, [r7, #4]
 805d2ee:	2300      	movs	r3, #0
 805d2f0:	60fb      	str	r3, [r7, #12]
 805d2f2:	687b      	ldr	r3, [r7, #4]
 805d2f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 805d2f6:	b29b      	uxth	r3, r3
 805d2f8:	f5c3 533f 	rsb	r3, r3, #12224	; 0x2fc0
 805d2fc:	3338      	adds	r3, #56	; 0x38
 805d2fe:	817b      	strh	r3, [r7, #10]
 805d300:	687b      	ldr	r3, [r7, #4]
 805d302:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 805d304:	687b      	ldr	r3, [r7, #4]
 805d306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 805d308:	8979      	ldrh	r1, [r7, #10]
 805d30a:	6878      	ldr	r0, [r7, #4]
 805d30c:	f001 fbd3 	bl	805eab6 <vl53l5_write_multi>
 805d310:	60f8      	str	r0, [r7, #12]
 805d312:	68fb      	ldr	r3, [r7, #12]
 805d314:	4618      	mov	r0, r3
 805d316:	3710      	adds	r7, #16
 805d318:	46bd      	mov	sp, r7
 805d31a:	bd80      	pop	{r7, pc}

0805d31c <_read_command_ui_to_comms_buffer>:
 805d31c:	b580      	push	{r7, lr}
 805d31e:	b084      	sub	sp, #16
 805d320:	af00      	add	r7, sp, #0
 805d322:	6078      	str	r0, [r7, #4]
 805d324:	2300      	movs	r3, #0
 805d326:	60fb      	str	r3, [r7, #12]
 805d328:	2300      	movs	r3, #0
 805d32a:	817b      	strh	r3, [r7, #10]
 805d32c:	687b      	ldr	r3, [r7, #4]
 805d32e:	2200      	movs	r2, #0
 805d330:	631a      	str	r2, [r3, #48]	; 0x30
 805d332:	687b      	ldr	r3, [r7, #4]
 805d334:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 805d336:	461a      	mov	r2, r3
 805d338:	687b      	ldr	r3, [r7, #4]
 805d33a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 805d33c:	429a      	cmp	r2, r3
 805d33e:	d903      	bls.n	805d348 <_read_command_ui_to_comms_buffer+0x2c>
 805d340:	f06f 035b 	mvn.w	r3, #91	; 0x5b
 805d344:	60fb      	str	r3, [r7, #12]
 805d346:	e02d      	b.n	805d3a4 <_read_command_ui_to_comms_buffer+0x88>
 805d348:	687b      	ldr	r3, [r7, #4]
 805d34a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 805d34c:	f642 72f0 	movw	r2, #12272	; 0x2ff0
 805d350:	4293      	cmp	r3, r2
 805d352:	d903      	bls.n	805d35c <_read_command_ui_to_comms_buffer+0x40>
 805d354:	f06f 030d 	mvn.w	r3, #13
 805d358:	60fb      	str	r3, [r7, #12]
 805d35a:	e023      	b.n	805d3a4 <_read_command_ui_to_comms_buffer+0x88>
 805d35c:	687b      	ldr	r3, [r7, #4]
 805d35e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 805d360:	f003 0303 	and.w	r3, r3, #3
 805d364:	b29b      	uxth	r3, r3
 805d366:	2b00      	cmp	r3, #0
 805d368:	d003      	beq.n	805d372 <_read_command_ui_to_comms_buffer+0x56>
 805d36a:	f06f 0346 	mvn.w	r3, #70	; 0x46
 805d36e:	60fb      	str	r3, [r7, #12]
 805d370:	e018      	b.n	805d3a4 <_read_command_ui_to_comms_buffer+0x88>
 805d372:	687b      	ldr	r3, [r7, #4]
 805d374:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 805d376:	f5c3 533f 	rsb	r3, r3, #12224	; 0x2fc0
 805d37a:	3334      	adds	r3, #52	; 0x34
 805d37c:	817b      	strh	r3, [r7, #10]
 805d37e:	687b      	ldr	r3, [r7, #4]
 805d380:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 805d382:	687b      	ldr	r3, [r7, #4]
 805d384:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 805d386:	8979      	ldrh	r1, [r7, #10]
 805d388:	6878      	ldr	r0, [r7, #4]
 805d38a:	f001 fbb1 	bl	805eaf0 <vl53l5_read_multi>
 805d38e:	60f8      	str	r0, [r7, #12]
 805d390:	68fb      	ldr	r3, [r7, #12]
 805d392:	2b00      	cmp	r3, #0
 805d394:	d105      	bne.n	805d3a2 <_read_command_ui_to_comms_buffer+0x86>
 805d396:	687b      	ldr	r3, [r7, #4]
 805d398:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 805d39a:	461a      	mov	r2, r3
 805d39c:	687b      	ldr	r3, [r7, #4]
 805d39e:	631a      	str	r2, [r3, #48]	; 0x30
 805d3a0:	e000      	b.n	805d3a4 <_read_command_ui_to_comms_buffer+0x88>
 805d3a2:	bf00      	nop
 805d3a4:	68fb      	ldr	r3, [r7, #12]
 805d3a6:	4618      	mov	r0, r3
 805d3a8:	3710      	adds	r7, #16
 805d3aa:	46bd      	mov	sp, r7
 805d3ac:	bd80      	pop	{r7, pc}

0805d3ae <_get_command_status>:
 805d3ae:	b580      	push	{r7, lr}
 805d3b0:	b084      	sub	sp, #16
 805d3b2:	af00      	add	r7, sp, #0
 805d3b4:	6078      	str	r0, [r7, #4]
 805d3b6:	2300      	movs	r3, #0
 805d3b8:	60fb      	str	r3, [r7, #12]
 805d3ba:	687b      	ldr	r3, [r7, #4]
 805d3bc:	2200      	movs	r2, #0
 805d3be:	631a      	str	r2, [r3, #48]	; 0x30
 805d3c0:	687b      	ldr	r3, [r7, #4]
 805d3c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 805d3c4:	2304      	movs	r3, #4
 805d3c6:	f642 71f8 	movw	r1, #12280	; 0x2ff8
 805d3ca:	6878      	ldr	r0, [r7, #4]
 805d3cc:	f001 fb90 	bl	805eaf0 <vl53l5_read_multi>
 805d3d0:	60f8      	str	r0, [r7, #12]
 805d3d2:	68fb      	ldr	r3, [r7, #12]
 805d3d4:	2b00      	cmp	r3, #0
 805d3d6:	db1b      	blt.n	805d410 <_get_command_status+0x62>
 805d3d8:	687b      	ldr	r3, [r7, #4]
 805d3da:	2204      	movs	r2, #4
 805d3dc:	631a      	str	r2, [r3, #48]	; 0x30
 805d3de:	687b      	ldr	r3, [r7, #4]
 805d3e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 805d3e2:	687b      	ldr	r3, [r7, #4]
 805d3e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 805d3e6:	4619      	mov	r1, r3
 805d3e8:	4610      	mov	r0, r2
 805d3ea:	f000 fab7 	bl	805d95c <vl53l5_dci_swap_buffer_byte_ordering>
 805d3ee:	60f8      	str	r0, [r7, #12]
 805d3f0:	68fb      	ldr	r3, [r7, #12]
 805d3f2:	2b00      	cmp	r3, #0
 805d3f4:	db0e      	blt.n	805d414 <_get_command_status+0x66>
 805d3f6:	687b      	ldr	r3, [r7, #4]
 805d3f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 805d3fa:	b29a      	uxth	r2, r3
 805d3fc:	687b      	ldr	r3, [r7, #4]
 805d3fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 805d400:	4619      	mov	r1, r3
 805d402:	4610      	mov	r0, r2
 805d404:	f000 fd50 	bl	805dea8 <vl53l5_decode_uint32_t>
 805d408:	4602      	mov	r2, r0
 805d40a:	687b      	ldr	r3, [r7, #4]
 805d40c:	63da      	str	r2, [r3, #60]	; 0x3c
 805d40e:	e002      	b.n	805d416 <_get_command_status+0x68>
 805d410:	bf00      	nop
 805d412:	e000      	b.n	805d416 <_get_command_status+0x68>
 805d414:	bf00      	nop
 805d416:	68fb      	ldr	r3, [r7, #12]
 805d418:	4618      	mov	r0, r3
 805d41a:	3710      	adds	r7, #16
 805d41c:	46bd      	mov	sp, r7
 805d41e:	bd80      	pop	{r7, pc}

0805d420 <_poll_command_status_block>:
 805d420:	b580      	push	{r7, lr}
 805d422:	b088      	sub	sp, #32
 805d424:	af00      	add	r7, sp, #0
 805d426:	60f8      	str	r0, [r7, #12]
 805d428:	60b9      	str	r1, [r7, #8]
 805d42a:	607a      	str	r2, [r7, #4]
 805d42c:	603b      	str	r3, [r7, #0]
 805d42e:	2300      	movs	r3, #0
 805d430:	61fb      	str	r3, [r7, #28]
 805d432:	2300      	movs	r3, #0
 805d434:	617b      	str	r3, [r7, #20]
 805d436:	2300      	movs	r3, #0
 805d438:	76fb      	strb	r3, [r7, #27]
 805d43a:	68f8      	ldr	r0, [r7, #12]
 805d43c:	f7ff ffb7 	bl	805d3ae <_get_command_status>
 805d440:	61f8      	str	r0, [r7, #28]
 805d442:	69fb      	ldr	r3, [r7, #28]
 805d444:	2b00      	cmp	r3, #0
 805d446:	db52      	blt.n	805d4ee <_poll_command_status_block+0xce>
 805d448:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 805d44c:	f083 0301 	eor.w	r3, r3, #1
 805d450:	b2db      	uxtb	r3, r3
 805d452:	2b00      	cmp	r3, #0
 805d454:	d106      	bne.n	805d464 <_poll_command_status_block+0x44>
 805d456:	68fb      	ldr	r3, [r7, #12]
 805d458:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 805d45c:	461a      	mov	r2, r3
 805d45e:	68bb      	ldr	r3, [r7, #8]
 805d460:	4293      	cmp	r3, r2
 805d462:	d10d      	bne.n	805d480 <_poll_command_status_block+0x60>
 805d464:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 805d468:	f083 0301 	eor.w	r3, r3, #1
 805d46c:	b2db      	uxtb	r3, r3
 805d46e:	2b00      	cmp	r3, #0
 805d470:	d104      	bne.n	805d47c <_poll_command_status_block+0x5c>
 805d472:	68fb      	ldr	r3, [r7, #12]
 805d474:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 805d478:	2b03      	cmp	r3, #3
 805d47a:	d101      	bne.n	805d480 <_poll_command_status_block+0x60>
 805d47c:	2301      	movs	r3, #1
 805d47e:	e000      	b.n	805d482 <_poll_command_status_block+0x62>
 805d480:	2300      	movs	r3, #0
 805d482:	76fb      	strb	r3, [r7, #27]
 805d484:	7efb      	ldrb	r3, [r7, #27]
 805d486:	f003 0301 	and.w	r3, r3, #1
 805d48a:	76fb      	strb	r3, [r7, #27]
 805d48c:	7efb      	ldrb	r3, [r7, #27]
 805d48e:	2b00      	cmp	r3, #0
 805d490:	d12f      	bne.n	805d4f2 <_poll_command_status_block+0xd2>
 805d492:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 805d496:	2b00      	cmp	r3, #0
 805d498:	d008      	beq.n	805d4ac <_poll_command_status_block+0x8c>
 805d49a:	68fb      	ldr	r3, [r7, #12]
 805d49c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 805d4a0:	2b04      	cmp	r3, #4
 805d4a2:	d103      	bne.n	805d4ac <_poll_command_status_block+0x8c>
 805d4a4:	f06f 034e 	mvn.w	r3, #78	; 0x4e
 805d4a8:	61fb      	str	r3, [r7, #28]
 805d4aa:	e027      	b.n	805d4fc <_poll_command_status_block+0xdc>
 805d4ac:	f107 0314 	add.w	r3, r7, #20
 805d4b0:	4619      	mov	r1, r3
 805d4b2:	68f8      	ldr	r0, [r7, #12]
 805d4b4:	f001 fb98 	bl	805ebe8 <vl53l5_get_tick_count>
 805d4b8:	61f8      	str	r0, [r7, #28]
 805d4ba:	69fb      	ldr	r3, [r7, #28]
 805d4bc:	2b00      	cmp	r3, #0
 805d4be:	db1a      	blt.n	805d4f6 <_poll_command_status_block+0xd6>
 805d4c0:	697a      	ldr	r2, [r7, #20]
 805d4c2:	687b      	ldr	r3, [r7, #4]
 805d4c4:	6839      	ldr	r1, [r7, #0]
 805d4c6:	68f8      	ldr	r0, [r7, #12]
 805d4c8:	f001 fba9 	bl	805ec1e <vl53l5_check_for_timeout>
 805d4cc:	61f8      	str	r0, [r7, #28]
 805d4ce:	69fb      	ldr	r3, [r7, #28]
 805d4d0:	2b00      	cmp	r3, #0
 805d4d2:	da03      	bge.n	805d4dc <_poll_command_status_block+0xbc>
 805d4d4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 805d4d8:	61fb      	str	r3, [r7, #28]
 805d4da:	e00f      	b.n	805d4fc <_poll_command_status_block+0xdc>
 805d4dc:	210a      	movs	r1, #10
 805d4de:	68f8      	ldr	r0, [r7, #12]
 805d4e0:	f001 fb42 	bl	805eb68 <vl53l5_wait_ms>
 805d4e4:	61f8      	str	r0, [r7, #28]
 805d4e6:	69fb      	ldr	r3, [r7, #28]
 805d4e8:	2b00      	cmp	r3, #0
 805d4ea:	db06      	blt.n	805d4fa <_poll_command_status_block+0xda>
 805d4ec:	e7a5      	b.n	805d43a <_poll_command_status_block+0x1a>
 805d4ee:	bf00      	nop
 805d4f0:	e004      	b.n	805d4fc <_poll_command_status_block+0xdc>
 805d4f2:	bf00      	nop
 805d4f4:	e002      	b.n	805d4fc <_poll_command_status_block+0xdc>
 805d4f6:	bf00      	nop
 805d4f8:	e000      	b.n	805d4fc <_poll_command_status_block+0xdc>
 805d4fa:	bf00      	nop
 805d4fc:	69fb      	ldr	r3, [r7, #28]
 805d4fe:	4618      	mov	r0, r3
 805d500:	3720      	adds	r7, #32
 805d502:	46bd      	mov	sp, r7
 805d504:	bd80      	pop	{r7, pc}

0805d506 <vl53l5_dci_decode_range_data>:
 805d506:	b580      	push	{r7, lr}
 805d508:	b086      	sub	sp, #24
 805d50a:	af02      	add	r7, sp, #8
 805d50c:	6078      	str	r0, [r7, #4]
 805d50e:	2300      	movs	r3, #0
 805d510:	60fb      	str	r3, [r7, #12]
 805d512:	687b      	ldr	r3, [r7, #4]
 805d514:	2b00      	cmp	r3, #0
 805d516:	d103      	bne.n	805d520 <vl53l5_dci_decode_range_data+0x1a>
 805d518:	f06f 0303 	mvn.w	r3, #3
 805d51c:	60fb      	str	r3, [r7, #12]
 805d51e:	e02b      	b.n	805d578 <vl53l5_dci_decode_range_data+0x72>
 805d520:	687b      	ldr	r3, [r7, #4]
 805d522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 805d524:	2b00      	cmp	r3, #0
 805d526:	d103      	bne.n	805d530 <vl53l5_dci_decode_range_data+0x2a>
 805d528:	f06f 0303 	mvn.w	r3, #3
 805d52c:	60fb      	str	r3, [r7, #12]
 805d52e:	e023      	b.n	805d578 <vl53l5_dci_decode_range_data+0x72>
 805d530:	687b      	ldr	r3, [r7, #4]
 805d532:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 805d536:	461a      	mov	r2, r3
 805d538:	687b      	ldr	r3, [r7, #4]
 805d53a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 805d53e:	4413      	add	r3, r2
 805d540:	1d1a      	adds	r2, r3, #4
 805d542:	687b      	ldr	r3, [r7, #4]
 805d544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 805d546:	429a      	cmp	r2, r3
 805d548:	d003      	beq.n	805d552 <vl53l5_dci_decode_range_data+0x4c>
 805d54a:	f06f 030a 	mvn.w	r3, #10
 805d54e:	60fb      	str	r3, [r7, #12]
 805d550:	e012      	b.n	805d578 <vl53l5_dci_decode_range_data+0x72>
 805d552:	687b      	ldr	r3, [r7, #4]
 805d554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 805d556:	687a      	ldr	r2, [r7, #4]
 805d558:	f8b2 2062 	ldrh.w	r2, [r2, #98]	; 0x62
 805d55c:	1899      	adds	r1, r3, r2
 805d55e:	687b      	ldr	r3, [r7, #4]
 805d560:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 805d564:	461a      	mov	r2, r3
 805d566:	2301      	movs	r3, #1
 805d568:	9301      	str	r3, [sp, #4]
 805d56a:	2300      	movs	r3, #0
 805d56c:	9300      	str	r3, [sp, #0]
 805d56e:	2300      	movs	r3, #0
 805d570:	6878      	ldr	r0, [r7, #4]
 805d572:	f000 f855 	bl	805d620 <_decode_raw_data>
 805d576:	60f8      	str	r0, [r7, #12]
 805d578:	68fb      	ldr	r3, [r7, #12]
 805d57a:	4618      	mov	r0, r3
 805d57c:	3710      	adds	r7, #16
 805d57e:	46bd      	mov	sp, r7
 805d580:	bd80      	pop	{r7, pc}

0805d582 <vl53l5_dci_decode_data>:
 805d582:	b580      	push	{r7, lr}
 805d584:	b088      	sub	sp, #32
 805d586:	af02      	add	r7, sp, #8
 805d588:	60f8      	str	r0, [r7, #12]
 805d58a:	60b9      	str	r1, [r7, #8]
 805d58c:	607a      	str	r2, [r7, #4]
 805d58e:	2300      	movs	r3, #0
 805d590:	617b      	str	r3, [r7, #20]
 805d592:	68fb      	ldr	r3, [r7, #12]
 805d594:	2b00      	cmp	r3, #0
 805d596:	d103      	bne.n	805d5a0 <vl53l5_dci_decode_data+0x1e>
 805d598:	f06f 0303 	mvn.w	r3, #3
 805d59c:	617b      	str	r3, [r7, #20]
 805d59e:	e012      	b.n	805d5c6 <vl53l5_dci_decode_data+0x44>
 805d5a0:	68fb      	ldr	r3, [r7, #12]
 805d5a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 805d5a4:	2b00      	cmp	r3, #0
 805d5a6:	d103      	bne.n	805d5b0 <vl53l5_dci_decode_data+0x2e>
 805d5a8:	f06f 0303 	mvn.w	r3, #3
 805d5ac:	617b      	str	r3, [r7, #20]
 805d5ae:	e00a      	b.n	805d5c6 <vl53l5_dci_decode_data+0x44>
 805d5b0:	2300      	movs	r3, #0
 805d5b2:	9301      	str	r3, [sp, #4]
 805d5b4:	2300      	movs	r3, #0
 805d5b6:	9300      	str	r3, [sp, #0]
 805d5b8:	2300      	movs	r3, #0
 805d5ba:	687a      	ldr	r2, [r7, #4]
 805d5bc:	68b9      	ldr	r1, [r7, #8]
 805d5be:	68f8      	ldr	r0, [r7, #12]
 805d5c0:	f000 f82e 	bl	805d620 <_decode_raw_data>
 805d5c4:	6178      	str	r0, [r7, #20]
 805d5c6:	697b      	ldr	r3, [r7, #20]
 805d5c8:	4618      	mov	r0, r3
 805d5ca:	3718      	adds	r7, #24
 805d5cc:	46bd      	mov	sp, r7
 805d5ce:	bd80      	pop	{r7, pc}

0805d5d0 <_check_for_idx_match>:
 805d5d0:	b480      	push	{r7}
 805d5d2:	b087      	sub	sp, #28
 805d5d4:	af00      	add	r7, sp, #0
 805d5d6:	60b9      	str	r1, [r7, #8]
 805d5d8:	607a      	str	r2, [r7, #4]
 805d5da:	603b      	str	r3, [r7, #0]
 805d5dc:	4603      	mov	r3, r0
 805d5de:	81fb      	strh	r3, [r7, #14]
 805d5e0:	2300      	movs	r3, #0
 805d5e2:	617b      	str	r3, [r7, #20]
 805d5e4:	2300      	movs	r3, #0
 805d5e6:	617b      	str	r3, [r7, #20]
 805d5e8:	e010      	b.n	805d60c <_check_for_idx_match+0x3c>
 805d5ea:	697b      	ldr	r3, [r7, #20]
 805d5ec:	005b      	lsls	r3, r3, #1
 805d5ee:	68ba      	ldr	r2, [r7, #8]
 805d5f0:	4413      	add	r3, r2
 805d5f2:	881b      	ldrh	r3, [r3, #0]
 805d5f4:	89fa      	ldrh	r2, [r7, #14]
 805d5f6:	429a      	cmp	r2, r3
 805d5f8:	d105      	bne.n	805d606 <_check_for_idx_match+0x36>
 805d5fa:	683b      	ldr	r3, [r7, #0]
 805d5fc:	681b      	ldr	r3, [r3, #0]
 805d5fe:	1c5a      	adds	r2, r3, #1
 805d600:	683b      	ldr	r3, [r7, #0]
 805d602:	601a      	str	r2, [r3, #0]
 805d604:	e006      	b.n	805d614 <_check_for_idx_match+0x44>
 805d606:	697b      	ldr	r3, [r7, #20]
 805d608:	3301      	adds	r3, #1
 805d60a:	617b      	str	r3, [r7, #20]
 805d60c:	697a      	ldr	r2, [r7, #20]
 805d60e:	687b      	ldr	r3, [r7, #4]
 805d610:	429a      	cmp	r2, r3
 805d612:	d3ea      	bcc.n	805d5ea <_check_for_idx_match+0x1a>
 805d614:	bf00      	nop
 805d616:	371c      	adds	r7, #28
 805d618:	46bd      	mov	sp, r7
 805d61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 805d61e:	4770      	bx	lr

0805d620 <_decode_raw_data>:
 805d620:	b590      	push	{r4, r7, lr}
 805d622:	b08d      	sub	sp, #52	; 0x34
 805d624:	af02      	add	r7, sp, #8
 805d626:	60f8      	str	r0, [r7, #12]
 805d628:	60b9      	str	r1, [r7, #8]
 805d62a:	607a      	str	r2, [r7, #4]
 805d62c:	603b      	str	r3, [r7, #0]
 805d62e:	2300      	movs	r3, #0
 805d630:	627b      	str	r3, [r7, #36]	; 0x24
 805d632:	2300      	movs	r3, #0
 805d634:	777b      	strb	r3, [r7, #29]
 805d636:	2300      	movs	r3, #0
 805d638:	61bb      	str	r3, [r7, #24]
 805d63a:	2300      	movs	r3, #0
 805d63c:	82fb      	strh	r3, [r7, #22]
 805d63e:	2300      	movs	r3, #0
 805d640:	77bb      	strb	r3, [r7, #30]
 805d642:	2300      	movs	r3, #0
 805d644:	623b      	str	r3, [r7, #32]
 805d646:	2300      	movs	r3, #0
 805d648:	613b      	str	r3, [r7, #16]
 805d64a:	2300      	movs	r3, #0
 805d64c:	77fb      	strb	r3, [r7, #31]
 805d64e:	683b      	ldr	r3, [r7, #0]
 805d650:	2b00      	cmp	r3, #0
 805d652:	d002      	beq.n	805d65a <_decode_raw_data+0x3a>
 805d654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 805d656:	2b00      	cmp	r3, #0
 805d658:	d101      	bne.n	805d65e <_decode_raw_data+0x3e>
 805d65a:	2301      	movs	r3, #1
 805d65c:	77fb      	strb	r3, [r7, #31]
 805d65e:	68ba      	ldr	r2, [r7, #8]
 805d660:	6a3b      	ldr	r3, [r7, #32]
 805d662:	18d0      	adds	r0, r2, r3
 805d664:	687a      	ldr	r2, [r7, #4]
 805d666:	6a3b      	ldr	r3, [r7, #32]
 805d668:	1ad1      	subs	r1, r2, r3
 805d66a:	f107 0418 	add.w	r4, r7, #24
 805d66e:	f107 021d 	add.w	r2, r7, #29
 805d672:	f107 0316 	add.w	r3, r7, #22
 805d676:	9300      	str	r3, [sp, #0]
 805d678:	4623      	mov	r3, r4
 805d67a:	f000 f907 	bl	805d88c <vl53l5_dci_decode_block_header>
 805d67e:	6278      	str	r0, [r7, #36]	; 0x24
 805d680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 805d682:	2b00      	cmp	r3, #0
 805d684:	db73      	blt.n	805d76e <_decode_raw_data+0x14e>
 805d686:	7f7b      	ldrb	r3, [r7, #29]
 805d688:	2b0f      	cmp	r3, #15
 805d68a:	d05e      	beq.n	805d74a <_decode_raw_data+0x12a>
 805d68c:	7f7b      	ldrb	r3, [r7, #29]
 805d68e:	2b0d      	cmp	r3, #13
 805d690:	d002      	beq.n	805d698 <_decode_raw_data+0x78>
 805d692:	7f7b      	ldrb	r3, [r7, #29]
 805d694:	2b0e      	cmp	r3, #14
 805d696:	d113      	bne.n	805d6c0 <_decode_raw_data+0xa0>
 805d698:	8afb      	ldrh	r3, [r7, #22]
 805d69a:	77bb      	strb	r3, [r7, #30]
 805d69c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 805d6a0:	f083 0301 	eor.w	r3, r3, #1
 805d6a4:	b2db      	uxtb	r3, r3
 805d6a6:	2b00      	cmp	r3, #0
 805d6a8:	d006      	beq.n	805d6b8 <_decode_raw_data+0x98>
 805d6aa:	7fbb      	ldrb	r3, [r7, #30]
 805d6ac:	2b00      	cmp	r3, #0
 805d6ae:	d003      	beq.n	805d6b8 <_decode_raw_data+0x98>
 805d6b0:	f06f 0351 	mvn.w	r3, #81	; 0x51
 805d6b4:	627b      	str	r3, [r7, #36]	; 0x24
 805d6b6:	e05f      	b.n	805d778 <_decode_raw_data+0x158>
 805d6b8:	6a3b      	ldr	r3, [r7, #32]
 805d6ba:	3304      	adds	r3, #4
 805d6bc:	623b      	str	r3, [r7, #32]
 805d6be:	e03f      	b.n	805d740 <_decode_raw_data+0x120>
 805d6c0:	7f7b      	ldrb	r3, [r7, #29]
 805d6c2:	2b0c      	cmp	r3, #12
 805d6c4:	d115      	bne.n	805d6f2 <_decode_raw_data+0xd2>
 805d6c6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 805d6ca:	f083 0301 	eor.w	r3, r3, #1
 805d6ce:	b2db      	uxtb	r3, r3
 805d6d0:	2b00      	cmp	r3, #0
 805d6d2:	d003      	beq.n	805d6dc <_decode_raw_data+0xbc>
 805d6d4:	f06f 0309 	mvn.w	r3, #9
 805d6d8:	627b      	str	r3, [r7, #36]	; 0x24
 805d6da:	e04d      	b.n	805d778 <_decode_raw_data+0x158>
 805d6dc:	8afb      	ldrh	r3, [r7, #22]
 805d6de:	2b00      	cmp	r3, #0
 805d6e0:	d003      	beq.n	805d6ea <_decode_raw_data+0xca>
 805d6e2:	f06f 0309 	mvn.w	r3, #9
 805d6e6:	627b      	str	r3, [r7, #36]	; 0x24
 805d6e8:	e046      	b.n	805d778 <_decode_raw_data+0x158>
 805d6ea:	6a3b      	ldr	r3, [r7, #32]
 805d6ec:	3304      	adds	r3, #4
 805d6ee:	623b      	str	r3, [r7, #32]
 805d6f0:	e026      	b.n	805d740 <_decode_raw_data+0x120>
 805d6f2:	6a3b      	ldr	r3, [r7, #32]
 805d6f4:	3304      	adds	r3, #4
 805d6f6:	623b      	str	r3, [r7, #32]
 805d6f8:	8af8      	ldrh	r0, [r7, #22]
 805d6fa:	69b9      	ldr	r1, [r7, #24]
 805d6fc:	68ba      	ldr	r2, [r7, #8]
 805d6fe:	6a3b      	ldr	r3, [r7, #32]
 805d700:	441a      	add	r2, r3
 805d702:	68fb      	ldr	r3, [r7, #12]
 805d704:	f000 fbed 	bl	805dee2 <vl53l5_decode_switch>
 805d708:	6278      	str	r0, [r7, #36]	; 0x24
 805d70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 805d70c:	2b00      	cmp	r3, #0
 805d70e:	db30      	blt.n	805d772 <_decode_raw_data+0x152>
 805d710:	69bb      	ldr	r3, [r7, #24]
 805d712:	6a3a      	ldr	r2, [r7, #32]
 805d714:	4413      	add	r3, r2
 805d716:	623b      	str	r3, [r7, #32]
 805d718:	7ffb      	ldrb	r3, [r7, #31]
 805d71a:	f083 0301 	eor.w	r3, r3, #1
 805d71e:	b2db      	uxtb	r3, r3
 805d720:	2b00      	cmp	r3, #0
 805d722:	d00d      	beq.n	805d740 <_decode_raw_data+0x120>
 805d724:	8af8      	ldrh	r0, [r7, #22]
 805d726:	f107 0310 	add.w	r3, r7, #16
 805d72a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 805d72c:	6839      	ldr	r1, [r7, #0]
 805d72e:	f7ff ff4f 	bl	805d5d0 <_check_for_idx_match>
 805d732:	693b      	ldr	r3, [r7, #16]
 805d734:	6bba      	ldr	r2, [r7, #56]	; 0x38
 805d736:	429a      	cmp	r2, r3
 805d738:	bf0c      	ite	eq
 805d73a:	2301      	moveq	r3, #1
 805d73c:	2300      	movne	r3, #0
 805d73e:	77fb      	strb	r3, [r7, #31]
 805d740:	6a3a      	ldr	r2, [r7, #32]
 805d742:	687b      	ldr	r3, [r7, #4]
 805d744:	429a      	cmp	r2, r3
 805d746:	d38a      	bcc.n	805d65e <_decode_raw_data+0x3e>
 805d748:	e000      	b.n	805d74c <_decode_raw_data+0x12c>
 805d74a:	bf00      	nop
 805d74c:	7f7b      	ldrb	r3, [r7, #29]
 805d74e:	2b0f      	cmp	r3, #15
 805d750:	d003      	beq.n	805d75a <_decode_raw_data+0x13a>
 805d752:	f06f 0350 	mvn.w	r3, #80	; 0x50
 805d756:	627b      	str	r3, [r7, #36]	; 0x24
 805d758:	e00e      	b.n	805d778 <_decode_raw_data+0x158>
 805d75a:	7ffb      	ldrb	r3, [r7, #31]
 805d75c:	f083 0301 	eor.w	r3, r3, #1
 805d760:	b2db      	uxtb	r3, r3
 805d762:	2b00      	cmp	r3, #0
 805d764:	d007      	beq.n	805d776 <_decode_raw_data+0x156>
 805d766:	f06f 0347 	mvn.w	r3, #71	; 0x47
 805d76a:	627b      	str	r3, [r7, #36]	; 0x24
 805d76c:	e004      	b.n	805d778 <_decode_raw_data+0x158>
 805d76e:	bf00      	nop
 805d770:	e002      	b.n	805d778 <_decode_raw_data+0x158>
 805d772:	bf00      	nop
 805d774:	e000      	b.n	805d778 <_decode_raw_data+0x158>
 805d776:	bf00      	nop
 805d778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 805d77a:	4618      	mov	r0, r3
 805d77c:	372c      	adds	r7, #44	; 0x2c
 805d77e:	46bd      	mov	sp, r7
 805d780:	bd90      	pop	{r4, r7, pc}

0805d782 <_calculate_block_header_size_field>:
 805d782:	b480      	push	{r7}
 805d784:	b087      	sub	sp, #28
 805d786:	af00      	add	r7, sp, #0
 805d788:	4603      	mov	r3, r0
 805d78a:	60b9      	str	r1, [r7, #8]
 805d78c:	607a      	str	r2, [r7, #4]
 805d78e:	73fb      	strb	r3, [r7, #15]
 805d790:	2300      	movs	r3, #0
 805d792:	617b      	str	r3, [r7, #20]
 805d794:	7bfb      	ldrb	r3, [r7, #15]
 805d796:	2b0f      	cmp	r3, #15
 805d798:	d903      	bls.n	805d7a2 <_calculate_block_header_size_field+0x20>
 805d79a:	f06f 0314 	mvn.w	r3, #20
 805d79e:	617b      	str	r3, [r7, #20]
 805d7a0:	e027      	b.n	805d7f2 <_calculate_block_header_size_field+0x70>
 805d7a2:	7bfb      	ldrb	r3, [r7, #15]
 805d7a4:	2b00      	cmp	r3, #0
 805d7a6:	d104      	bne.n	805d7b2 <_calculate_block_header_size_field+0x30>
 805d7a8:	68bb      	ldr	r3, [r7, #8]
 805d7aa:	b29a      	uxth	r2, r3
 805d7ac:	687b      	ldr	r3, [r7, #4]
 805d7ae:	801a      	strh	r2, [r3, #0]
 805d7b0:	e015      	b.n	805d7de <_calculate_block_header_size_field+0x5c>
 805d7b2:	7bfb      	ldrb	r3, [r7, #15]
 805d7b4:	2b0b      	cmp	r3, #11
 805d7b6:	d807      	bhi.n	805d7c8 <_calculate_block_header_size_field+0x46>
 805d7b8:	7bfb      	ldrb	r3, [r7, #15]
 805d7ba:	68ba      	ldr	r2, [r7, #8]
 805d7bc:	fbb2 f3f3 	udiv	r3, r2, r3
 805d7c0:	b29a      	uxth	r2, r3
 805d7c2:	687b      	ldr	r3, [r7, #4]
 805d7c4:	801a      	strh	r2, [r3, #0]
 805d7c6:	e00a      	b.n	805d7de <_calculate_block_header_size_field+0x5c>
 805d7c8:	7bfb      	ldrb	r3, [r7, #15]
 805d7ca:	2b0f      	cmp	r3, #15
 805d7cc:	d103      	bne.n	805d7d6 <_calculate_block_header_size_field+0x54>
 805d7ce:	687b      	ldr	r3, [r7, #4]
 805d7d0:	2200      	movs	r2, #0
 805d7d2:	801a      	strh	r2, [r3, #0]
 805d7d4:	e003      	b.n	805d7de <_calculate_block_header_size_field+0x5c>
 805d7d6:	f06f 0314 	mvn.w	r3, #20
 805d7da:	617b      	str	r3, [r7, #20]
 805d7dc:	e009      	b.n	805d7f2 <_calculate_block_header_size_field+0x70>
 805d7de:	687b      	ldr	r3, [r7, #4]
 805d7e0:	881b      	ldrh	r3, [r3, #0]
 805d7e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 805d7e6:	d303      	bcc.n	805d7f0 <_calculate_block_header_size_field+0x6e>
 805d7e8:	f06f 0315 	mvn.w	r3, #21
 805d7ec:	617b      	str	r3, [r7, #20]
 805d7ee:	e000      	b.n	805d7f2 <_calculate_block_header_size_field+0x70>
 805d7f0:	bf00      	nop
 805d7f2:	697b      	ldr	r3, [r7, #20]
 805d7f4:	4618      	mov	r0, r3
 805d7f6:	371c      	adds	r7, #28
 805d7f8:	46bd      	mov	sp, r7
 805d7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 805d7fe:	4770      	bx	lr

0805d800 <vl53l5_dci_encode_block_header>:
 805d800:	b580      	push	{r7, lr}
 805d802:	b088      	sub	sp, #32
 805d804:	af00      	add	r7, sp, #0
 805d806:	60f8      	str	r0, [r7, #12]
 805d808:	60b9      	str	r1, [r7, #8]
 805d80a:	603b      	str	r3, [r7, #0]
 805d80c:	4613      	mov	r3, r2
 805d80e:	71fb      	strb	r3, [r7, #7]
 805d810:	2300      	movs	r3, #0
 805d812:	61fb      	str	r3, [r7, #28]
 805d814:	2300      	movs	r3, #0
 805d816:	837b      	strh	r3, [r7, #26]
 805d818:	2300      	movs	r3, #0
 805d81a:	617b      	str	r3, [r7, #20]
 805d81c:	68fb      	ldr	r3, [r7, #12]
 805d81e:	2b00      	cmp	r3, #0
 805d820:	d103      	bne.n	805d82a <vl53l5_dci_encode_block_header+0x2a>
 805d822:	f06f 0303 	mvn.w	r3, #3
 805d826:	61fb      	str	r3, [r7, #28]
 805d828:	e02b      	b.n	805d882 <vl53l5_dci_encode_block_header+0x82>
 805d82a:	68bb      	ldr	r3, [r7, #8]
 805d82c:	2b03      	cmp	r3, #3
 805d82e:	d803      	bhi.n	805d838 <vl53l5_dci_encode_block_header+0x38>
 805d830:	f06f 035b 	mvn.w	r3, #91	; 0x5b
 805d834:	61fb      	str	r3, [r7, #28]
 805d836:	e024      	b.n	805d882 <vl53l5_dci_encode_block_header+0x82>
 805d838:	f107 021a 	add.w	r2, r7, #26
 805d83c:	79fb      	ldrb	r3, [r7, #7]
 805d83e:	6839      	ldr	r1, [r7, #0]
 805d840:	4618      	mov	r0, r3
 805d842:	f7ff ff9e 	bl	805d782 <_calculate_block_header_size_field>
 805d846:	61f8      	str	r0, [r7, #28]
 805d848:	69fb      	ldr	r3, [r7, #28]
 805d84a:	2b00      	cmp	r3, #0
 805d84c:	db18      	blt.n	805d880 <vl53l5_dci_encode_block_header+0x80>
 805d84e:	79fb      	ldrb	r3, [r7, #7]
 805d850:	f003 030f 	and.w	r3, r3, #15
 805d854:	b2da      	uxtb	r2, r3
 805d856:	7d3b      	ldrb	r3, [r7, #20]
 805d858:	f362 0303 	bfi	r3, r2, #0, #4
 805d85c:	753b      	strb	r3, [r7, #20]
 805d85e:	8b7b      	ldrh	r3, [r7, #26]
 805d860:	f3c3 030b 	ubfx	r3, r3, #0, #12
 805d864:	b29a      	uxth	r2, r3
 805d866:	8abb      	ldrh	r3, [r7, #20]
 805d868:	f362 130f 	bfi	r3, r2, #4, #12
 805d86c:	82bb      	strh	r3, [r7, #20]
 805d86e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 805d870:	82fb      	strh	r3, [r7, #22]
 805d872:	697b      	ldr	r3, [r7, #20]
 805d874:	68fa      	ldr	r2, [r7, #12]
 805d876:	2104      	movs	r1, #4
 805d878:	4618      	mov	r0, r3
 805d87a:	f000 faef 	bl	805de5c <vl53l5_encode_uint32_t>
 805d87e:	e000      	b.n	805d882 <vl53l5_dci_encode_block_header+0x82>
 805d880:	bf00      	nop
 805d882:	69fb      	ldr	r3, [r7, #28]
 805d884:	4618      	mov	r0, r3
 805d886:	3720      	adds	r7, #32
 805d888:	46bd      	mov	sp, r7
 805d88a:	bd80      	pop	{r7, pc}

0805d88c <vl53l5_dci_decode_block_header>:
 805d88c:	b580      	push	{r7, lr}
 805d88e:	b086      	sub	sp, #24
 805d890:	af00      	add	r7, sp, #0
 805d892:	60f8      	str	r0, [r7, #12]
 805d894:	60b9      	str	r1, [r7, #8]
 805d896:	607a      	str	r2, [r7, #4]
 805d898:	603b      	str	r3, [r7, #0]
 805d89a:	2300      	movs	r3, #0
 805d89c:	617b      	str	r3, [r7, #20]
 805d89e:	2300      	movs	r3, #0
 805d8a0:	613b      	str	r3, [r7, #16]
 805d8a2:	68fb      	ldr	r3, [r7, #12]
 805d8a4:	2b00      	cmp	r3, #0
 805d8a6:	d103      	bne.n	805d8b0 <vl53l5_dci_decode_block_header+0x24>
 805d8a8:	f06f 0303 	mvn.w	r3, #3
 805d8ac:	617b      	str	r3, [r7, #20]
 805d8ae:	e050      	b.n	805d952 <vl53l5_dci_decode_block_header+0xc6>
 805d8b0:	687b      	ldr	r3, [r7, #4]
 805d8b2:	2b00      	cmp	r3, #0
 805d8b4:	d103      	bne.n	805d8be <vl53l5_dci_decode_block_header+0x32>
 805d8b6:	f06f 0303 	mvn.w	r3, #3
 805d8ba:	617b      	str	r3, [r7, #20]
 805d8bc:	e049      	b.n	805d952 <vl53l5_dci_decode_block_header+0xc6>
 805d8be:	6a3b      	ldr	r3, [r7, #32]
 805d8c0:	2b00      	cmp	r3, #0
 805d8c2:	d103      	bne.n	805d8cc <vl53l5_dci_decode_block_header+0x40>
 805d8c4:	f06f 0303 	mvn.w	r3, #3
 805d8c8:	617b      	str	r3, [r7, #20]
 805d8ca:	e042      	b.n	805d952 <vl53l5_dci_decode_block_header+0xc6>
 805d8cc:	683b      	ldr	r3, [r7, #0]
 805d8ce:	2b00      	cmp	r3, #0
 805d8d0:	d103      	bne.n	805d8da <vl53l5_dci_decode_block_header+0x4e>
 805d8d2:	f06f 0303 	mvn.w	r3, #3
 805d8d6:	617b      	str	r3, [r7, #20]
 805d8d8:	e03b      	b.n	805d952 <vl53l5_dci_decode_block_header+0xc6>
 805d8da:	68bb      	ldr	r3, [r7, #8]
 805d8dc:	2b03      	cmp	r3, #3
 805d8de:	d803      	bhi.n	805d8e8 <vl53l5_dci_decode_block_header+0x5c>
 805d8e0:	f06f 035b 	mvn.w	r3, #91	; 0x5b
 805d8e4:	617b      	str	r3, [r7, #20]
 805d8e6:	e034      	b.n	805d952 <vl53l5_dci_decode_block_header+0xc6>
 805d8e8:	68f9      	ldr	r1, [r7, #12]
 805d8ea:	2004      	movs	r0, #4
 805d8ec:	f000 fadc 	bl	805dea8 <vl53l5_decode_uint32_t>
 805d8f0:	4603      	mov	r3, r0
 805d8f2:	613b      	str	r3, [r7, #16]
 805d8f4:	7c3b      	ldrb	r3, [r7, #16]
 805d8f6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 805d8fa:	b2db      	uxtb	r3, r3
 805d8fc:	461a      	mov	r2, r3
 805d8fe:	687b      	ldr	r3, [r7, #4]
 805d900:	701a      	strb	r2, [r3, #0]
 805d902:	8a7a      	ldrh	r2, [r7, #18]
 805d904:	6a3b      	ldr	r3, [r7, #32]
 805d906:	801a      	strh	r2, [r3, #0]
 805d908:	7c3b      	ldrb	r3, [r7, #16]
 805d90a:	f003 030f 	and.w	r3, r3, #15
 805d90e:	b2db      	uxtb	r3, r3
 805d910:	2b00      	cmp	r3, #0
 805d912:	d107      	bne.n	805d924 <vl53l5_dci_decode_block_header+0x98>
 805d914:	8a3b      	ldrh	r3, [r7, #16]
 805d916:	f3c3 130b 	ubfx	r3, r3, #4, #12
 805d91a:	b29b      	uxth	r3, r3
 805d91c:	461a      	mov	r2, r3
 805d91e:	683b      	ldr	r3, [r7, #0]
 805d920:	601a      	str	r2, [r3, #0]
 805d922:	e016      	b.n	805d952 <vl53l5_dci_decode_block_header+0xc6>
 805d924:	7c3b      	ldrb	r3, [r7, #16]
 805d926:	f3c3 0303 	ubfx	r3, r3, #0, #4
 805d92a:	b2db      	uxtb	r3, r3
 805d92c:	2b0b      	cmp	r3, #11
 805d92e:	d80d      	bhi.n	805d94c <vl53l5_dci_decode_block_header+0xc0>
 805d930:	8a3b      	ldrh	r3, [r7, #16]
 805d932:	f3c3 130b 	ubfx	r3, r3, #4, #12
 805d936:	b29b      	uxth	r3, r3
 805d938:	461a      	mov	r2, r3
 805d93a:	7c3b      	ldrb	r3, [r7, #16]
 805d93c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 805d940:	b2db      	uxtb	r3, r3
 805d942:	fb03 f202 	mul.w	r2, r3, r2
 805d946:	683b      	ldr	r3, [r7, #0]
 805d948:	601a      	str	r2, [r3, #0]
 805d94a:	e002      	b.n	805d952 <vl53l5_dci_decode_block_header+0xc6>
 805d94c:	683b      	ldr	r3, [r7, #0]
 805d94e:	2200      	movs	r2, #0
 805d950:	601a      	str	r2, [r3, #0]
 805d952:	697b      	ldr	r3, [r7, #20]
 805d954:	4618      	mov	r0, r3
 805d956:	3718      	adds	r7, #24
 805d958:	46bd      	mov	sp, r7
 805d95a:	bd80      	pop	{r7, pc}

0805d95c <vl53l5_dci_swap_buffer_byte_ordering>:
 805d95c:	b480      	push	{r7}
 805d95e:	b087      	sub	sp, #28
 805d960:	af00      	add	r7, sp, #0
 805d962:	6078      	str	r0, [r7, #4]
 805d964:	6039      	str	r1, [r7, #0]
 805d966:	2300      	movs	r3, #0
 805d968:	617b      	str	r3, [r7, #20]
 805d96a:	2300      	movs	r3, #0
 805d96c:	613b      	str	r3, [r7, #16]
 805d96e:	687b      	ldr	r3, [r7, #4]
 805d970:	2b00      	cmp	r3, #0
 805d972:	d103      	bne.n	805d97c <vl53l5_dci_swap_buffer_byte_ordering+0x20>
 805d974:	f06f 0303 	mvn.w	r3, #3
 805d978:	613b      	str	r3, [r7, #16]
 805d97a:	e02a      	b.n	805d9d2 <vl53l5_dci_swap_buffer_byte_ordering+0x76>
 805d97c:	683b      	ldr	r3, [r7, #0]
 805d97e:	f003 0303 	and.w	r3, r3, #3
 805d982:	2b00      	cmp	r3, #0
 805d984:	d020      	beq.n	805d9c8 <vl53l5_dci_swap_buffer_byte_ordering+0x6c>
 805d986:	f06f 0346 	mvn.w	r3, #70	; 0x46
 805d98a:	613b      	str	r3, [r7, #16]
 805d98c:	e021      	b.n	805d9d2 <vl53l5_dci_swap_buffer_byte_ordering+0x76>
 805d98e:	687b      	ldr	r3, [r7, #4]
 805d990:	781b      	ldrb	r3, [r3, #0]
 805d992:	73fb      	strb	r3, [r7, #15]
 805d994:	687b      	ldr	r3, [r7, #4]
 805d996:	78da      	ldrb	r2, [r3, #3]
 805d998:	687b      	ldr	r3, [r7, #4]
 805d99a:	701a      	strb	r2, [r3, #0]
 805d99c:	687b      	ldr	r3, [r7, #4]
 805d99e:	3303      	adds	r3, #3
 805d9a0:	7bfa      	ldrb	r2, [r7, #15]
 805d9a2:	701a      	strb	r2, [r3, #0]
 805d9a4:	687b      	ldr	r3, [r7, #4]
 805d9a6:	785b      	ldrb	r3, [r3, #1]
 805d9a8:	73fb      	strb	r3, [r7, #15]
 805d9aa:	687b      	ldr	r3, [r7, #4]
 805d9ac:	3301      	adds	r3, #1
 805d9ae:	687a      	ldr	r2, [r7, #4]
 805d9b0:	7892      	ldrb	r2, [r2, #2]
 805d9b2:	701a      	strb	r2, [r3, #0]
 805d9b4:	687b      	ldr	r3, [r7, #4]
 805d9b6:	3302      	adds	r3, #2
 805d9b8:	7bfa      	ldrb	r2, [r7, #15]
 805d9ba:	701a      	strb	r2, [r3, #0]
 805d9bc:	697b      	ldr	r3, [r7, #20]
 805d9be:	3304      	adds	r3, #4
 805d9c0:	617b      	str	r3, [r7, #20]
 805d9c2:	687b      	ldr	r3, [r7, #4]
 805d9c4:	3304      	adds	r3, #4
 805d9c6:	607b      	str	r3, [r7, #4]
 805d9c8:	697a      	ldr	r2, [r7, #20]
 805d9ca:	683b      	ldr	r3, [r7, #0]
 805d9cc:	429a      	cmp	r2, r3
 805d9ce:	d3de      	bcc.n	805d98e <vl53l5_dci_swap_buffer_byte_ordering+0x32>
 805d9d0:	bf00      	nop
 805d9d2:	693b      	ldr	r3, [r7, #16]
 805d9d4:	4618      	mov	r0, r3
 805d9d6:	371c      	adds	r7, #28
 805d9d8:	46bd      	mov	sp, r7
 805d9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 805d9de:	4770      	bx	lr

0805d9e0 <vl53l5_dci_read_range>:
 805d9e0:	b580      	push	{r7, lr}
 805d9e2:	b086      	sub	sp, #24
 805d9e4:	af00      	add	r7, sp, #0
 805d9e6:	6078      	str	r0, [r7, #4]
 805d9e8:	2300      	movs	r3, #0
 805d9ea:	617b      	str	r3, [r7, #20]
 805d9ec:	2300      	movs	r3, #0
 805d9ee:	613b      	str	r3, [r7, #16]
 805d9f0:	2300      	movs	r3, #0
 805d9f2:	73fb      	strb	r3, [r7, #15]
 805d9f4:	687b      	ldr	r3, [r7, #4]
 805d9f6:	2b00      	cmp	r3, #0
 805d9f8:	d103      	bne.n	805da02 <vl53l5_dci_read_range+0x22>
 805d9fa:	f06f 0303 	mvn.w	r3, #3
 805d9fe:	617b      	str	r3, [r7, #20]
 805da00:	e03b      	b.n	805da7a <vl53l5_dci_read_range+0x9a>
 805da02:	687b      	ldr	r3, [r7, #4]
 805da04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 805da06:	2b00      	cmp	r3, #0
 805da08:	d103      	bne.n	805da12 <vl53l5_dci_read_range+0x32>
 805da0a:	f06f 0303 	mvn.w	r3, #3
 805da0e:	617b      	str	r3, [r7, #20]
 805da10:	e033      	b.n	805da7a <vl53l5_dci_read_range+0x9a>
 805da12:	687b      	ldr	r3, [r7, #4]
 805da14:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 805da18:	461a      	mov	r2, r3
 805da1a:	687b      	ldr	r3, [r7, #4]
 805da1c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 805da20:	4413      	add	r3, r2
 805da22:	3304      	adds	r3, #4
 805da24:	613b      	str	r3, [r7, #16]
 805da26:	687b      	ldr	r3, [r7, #4]
 805da28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 805da2a:	693a      	ldr	r2, [r7, #16]
 805da2c:	429a      	cmp	r2, r3
 805da2e:	d903      	bls.n	805da38 <vl53l5_dci_read_range+0x58>
 805da30:	f06f 030d 	mvn.w	r3, #13
 805da34:	617b      	str	r3, [r7, #20]
 805da36:	e020      	b.n	805da7a <vl53l5_dci_read_range+0x9a>
 805da38:	6939      	ldr	r1, [r7, #16]
 805da3a:	6878      	ldr	r0, [r7, #4]
 805da3c:	f000 f8d1 	bl	805dbe2 <_read_range_ui>
 805da40:	6178      	str	r0, [r7, #20]
 805da42:	697b      	ldr	r3, [r7, #20]
 805da44:	2b00      	cmp	r3, #0
 805da46:	db15      	blt.n	805da74 <vl53l5_dci_read_range+0x94>
 805da48:	687b      	ldr	r3, [r7, #4]
 805da4a:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 805da4e:	73fb      	strb	r3, [r7, #15]
 805da50:	6878      	ldr	r0, [r7, #4]
 805da52:	f000 f8fb 	bl	805dc4c <_decode_device_info_block>
 805da56:	7bf9      	ldrb	r1, [r7, #15]
 805da58:	2301      	movs	r3, #1
 805da5a:	2201      	movs	r2, #1
 805da5c:	6878      	ldr	r0, [r7, #4]
 805da5e:	f000 f838 	bl	805dad2 <vl53l5_dci_check_device_info>
 805da62:	6178      	str	r0, [r7, #20]
 805da64:	697b      	ldr	r3, [r7, #20]
 805da66:	2b00      	cmp	r3, #0
 805da68:	db06      	blt.n	805da78 <vl53l5_dci_read_range+0x98>
 805da6a:	6878      	ldr	r0, [r7, #4]
 805da6c:	f000 f929 	bl	805dcc2 <_check_range_header_footer>
 805da70:	6178      	str	r0, [r7, #20]
 805da72:	e002      	b.n	805da7a <vl53l5_dci_read_range+0x9a>
 805da74:	bf00      	nop
 805da76:	e000      	b.n	805da7a <vl53l5_dci_read_range+0x9a>
 805da78:	bf00      	nop
 805da7a:	697b      	ldr	r3, [r7, #20]
 805da7c:	4618      	mov	r0, r3
 805da7e:	3718      	adds	r7, #24
 805da80:	46bd      	mov	sp, r7
 805da82:	bd80      	pop	{r7, pc}

0805da84 <vl53l5_dci_get_device_info>:
 805da84:	b580      	push	{r7, lr}
 805da86:	b084      	sub	sp, #16
 805da88:	af00      	add	r7, sp, #0
 805da8a:	6078      	str	r0, [r7, #4]
 805da8c:	2300      	movs	r3, #0
 805da8e:	60fb      	str	r3, [r7, #12]
 805da90:	687b      	ldr	r3, [r7, #4]
 805da92:	2b00      	cmp	r3, #0
 805da94:	d103      	bne.n	805da9e <vl53l5_dci_get_device_info+0x1a>
 805da96:	f06f 0303 	mvn.w	r3, #3
 805da9a:	60fb      	str	r3, [r7, #12]
 805da9c:	e014      	b.n	805dac8 <vl53l5_dci_get_device_info+0x44>
 805da9e:	687b      	ldr	r3, [r7, #4]
 805daa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 805daa2:	2b00      	cmp	r3, #0
 805daa4:	d103      	bne.n	805daae <vl53l5_dci_get_device_info+0x2a>
 805daa6:	f06f 0303 	mvn.w	r3, #3
 805daaa:	60fb      	str	r3, [r7, #12]
 805daac:	e00c      	b.n	805dac8 <vl53l5_dci_get_device_info+0x44>
 805daae:	2104      	movs	r1, #4
 805dab0:	6878      	ldr	r0, [r7, #4]
 805dab2:	f000 f896 	bl	805dbe2 <_read_range_ui>
 805dab6:	60f8      	str	r0, [r7, #12]
 805dab8:	68fb      	ldr	r3, [r7, #12]
 805daba:	2b00      	cmp	r3, #0
 805dabc:	db03      	blt.n	805dac6 <vl53l5_dci_get_device_info+0x42>
 805dabe:	6878      	ldr	r0, [r7, #4]
 805dac0:	f000 f8c4 	bl	805dc4c <_decode_device_info_block>
 805dac4:	e000      	b.n	805dac8 <vl53l5_dci_get_device_info+0x44>
 805dac6:	bf00      	nop
 805dac8:	68fb      	ldr	r3, [r7, #12]
 805daca:	4618      	mov	r0, r3
 805dacc:	3710      	adds	r7, #16
 805dace:	46bd      	mov	sp, r7
 805dad0:	bd80      	pop	{r7, pc}

0805dad2 <vl53l5_dci_check_device_info>:
 805dad2:	b480      	push	{r7}
 805dad4:	b085      	sub	sp, #20
 805dad6:	af00      	add	r7, sp, #0
 805dad8:	6078      	str	r0, [r7, #4]
 805dada:	4608      	mov	r0, r1
 805dadc:	4611      	mov	r1, r2
 805dade:	461a      	mov	r2, r3
 805dae0:	4603      	mov	r3, r0
 805dae2:	70fb      	strb	r3, [r7, #3]
 805dae4:	460b      	mov	r3, r1
 805dae6:	70bb      	strb	r3, [r7, #2]
 805dae8:	4613      	mov	r3, r2
 805daea:	707b      	strb	r3, [r7, #1]
 805daec:	2300      	movs	r3, #0
 805daee:	60fb      	str	r3, [r7, #12]
 805daf0:	687b      	ldr	r3, [r7, #4]
 805daf2:	2b00      	cmp	r3, #0
 805daf4:	d103      	bne.n	805dafe <vl53l5_dci_check_device_info+0x2c>
 805daf6:	f06f 0303 	mvn.w	r3, #3
 805dafa:	60fb      	str	r3, [r7, #12]
 805dafc:	e06a      	b.n	805dbd4 <vl53l5_dci_check_device_info+0x102>
 805dafe:	78bb      	ldrb	r3, [r7, #2]
 805db00:	f083 0301 	eor.w	r3, r3, #1
 805db04:	b2db      	uxtb	r3, r3
 805db06:	2b00      	cmp	r3, #0
 805db08:	d009      	beq.n	805db1e <vl53l5_dci_check_device_info+0x4c>
 805db0a:	787b      	ldrb	r3, [r7, #1]
 805db0c:	f083 0301 	eor.w	r3, r3, #1
 805db10:	b2db      	uxtb	r3, r3
 805db12:	2b00      	cmp	r3, #0
 805db14:	d003      	beq.n	805db1e <vl53l5_dci_check_device_info+0x4c>
 805db16:	f06f 0303 	mvn.w	r3, #3
 805db1a:	60fb      	str	r3, [r7, #12]
 805db1c:	e05a      	b.n	805dbd4 <vl53l5_dci_check_device_info+0x102>
 805db1e:	687b      	ldr	r3, [r7, #4]
 805db20:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 805db24:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 805db28:	b2db      	uxtb	r3, r3
 805db2a:	2b00      	cmp	r3, #0
 805db2c:	d00c      	beq.n	805db48 <vl53l5_dci_check_device_info+0x76>
 805db2e:	687b      	ldr	r3, [r7, #4]
 805db30:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 805db34:	2b00      	cmp	r3, #0
 805db36:	d003      	beq.n	805db40 <vl53l5_dci_check_device_info+0x6e>
 805db38:	f06f 0341 	mvn.w	r3, #65	; 0x41
 805db3c:	60fb      	str	r3, [r7, #12]
 805db3e:	e049      	b.n	805dbd4 <vl53l5_dci_check_device_info+0x102>
 805db40:	f06f 0342 	mvn.w	r3, #66	; 0x42
 805db44:	60fb      	str	r3, [r7, #12]
 805db46:	e045      	b.n	805dbd4 <vl53l5_dci_check_device_info+0x102>
 805db48:	687b      	ldr	r3, [r7, #4]
 805db4a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 805db4e:	f003 0308 	and.w	r3, r3, #8
 805db52:	b2db      	uxtb	r3, r3
 805db54:	2b00      	cmp	r3, #0
 805db56:	d003      	beq.n	805db60 <vl53l5_dci_check_device_info+0x8e>
 805db58:	f06f 0341 	mvn.w	r3, #65	; 0x41
 805db5c:	60fb      	str	r3, [r7, #12]
 805db5e:	e039      	b.n	805dbd4 <vl53l5_dci_check_device_info+0x102>
 805db60:	687b      	ldr	r3, [r7, #4]
 805db62:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 805db66:	f003 0310 	and.w	r3, r3, #16
 805db6a:	b2db      	uxtb	r3, r3
 805db6c:	2b00      	cmp	r3, #0
 805db6e:	d007      	beq.n	805db80 <vl53l5_dci_check_device_info+0xae>
 805db70:	687b      	ldr	r3, [r7, #4]
 805db72:	22ff      	movs	r2, #255	; 0xff
 805db74:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
 805db78:	f06f 0339 	mvn.w	r3, #57	; 0x39
 805db7c:	60fb      	str	r3, [r7, #12]
 805db7e:	e029      	b.n	805dbd4 <vl53l5_dci_check_device_info+0x102>
 805db80:	687b      	ldr	r3, [r7, #4]
 805db82:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 805db86:	f003 0308 	and.w	r3, r3, #8
 805db8a:	b2db      	uxtb	r3, r3
 805db8c:	2b00      	cmp	r3, #0
 805db8e:	d008      	beq.n	805dba2 <vl53l5_dci_check_device_info+0xd0>
 805db90:	687b      	ldr	r3, [r7, #4]
 805db92:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 805db96:	2b00      	cmp	r3, #0
 805db98:	d003      	beq.n	805dba2 <vl53l5_dci_check_device_info+0xd0>
 805db9a:	f06f 0341 	mvn.w	r3, #65	; 0x41
 805db9e:	60fb      	str	r3, [r7, #12]
 805dba0:	e018      	b.n	805dbd4 <vl53l5_dci_check_device_info+0x102>
 805dba2:	78bb      	ldrb	r3, [r7, #2]
 805dba4:	2b00      	cmp	r3, #0
 805dba6:	d005      	beq.n	805dbb4 <vl53l5_dci_check_device_info+0xe2>
 805dba8:	687b      	ldr	r3, [r7, #4]
 805dbaa:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 805dbae:	78fa      	ldrb	r2, [r7, #3]
 805dbb0:	429a      	cmp	r2, r3
 805dbb2:	d00a      	beq.n	805dbca <vl53l5_dci_check_device_info+0xf8>
 805dbb4:	787b      	ldrb	r3, [r7, #1]
 805dbb6:	2b00      	cmp	r3, #0
 805dbb8:	d00b      	beq.n	805dbd2 <vl53l5_dci_check_device_info+0x100>
 805dbba:	687b      	ldr	r3, [r7, #4]
 805dbbc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 805dbc0:	f003 0310 	and.w	r3, r3, #16
 805dbc4:	b2db      	uxtb	r3, r3
 805dbc6:	2b00      	cmp	r3, #0
 805dbc8:	d103      	bne.n	805dbd2 <vl53l5_dci_check_device_info+0x100>
 805dbca:	f06f 0358 	mvn.w	r3, #88	; 0x58
 805dbce:	60fb      	str	r3, [r7, #12]
 805dbd0:	e000      	b.n	805dbd4 <vl53l5_dci_check_device_info+0x102>
 805dbd2:	bf00      	nop
 805dbd4:	68fb      	ldr	r3, [r7, #12]
 805dbd6:	4618      	mov	r0, r3
 805dbd8:	3714      	adds	r7, #20
 805dbda:	46bd      	mov	sp, r7
 805dbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 805dbe0:	4770      	bx	lr

0805dbe2 <_read_range_ui>:
 805dbe2:	b580      	push	{r7, lr}
 805dbe4:	b086      	sub	sp, #24
 805dbe6:	af00      	add	r7, sp, #0
 805dbe8:	6078      	str	r0, [r7, #4]
 805dbea:	6039      	str	r1, [r7, #0]
 805dbec:	2300      	movs	r3, #0
 805dbee:	617b      	str	r3, [r7, #20]
 805dbf0:	687b      	ldr	r3, [r7, #4]
 805dbf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 805dbf4:	613b      	str	r3, [r7, #16]
 805dbf6:	687b      	ldr	r3, [r7, #4]
 805dbf8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 805dbfc:	81fb      	strh	r3, [r7, #14]
 805dbfe:	687b      	ldr	r3, [r7, #4]
 805dc00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 805dc02:	683a      	ldr	r2, [r7, #0]
 805dc04:	429a      	cmp	r2, r3
 805dc06:	d903      	bls.n	805dc10 <_read_range_ui+0x2e>
 805dc08:	f06f 0303 	mvn.w	r3, #3
 805dc0c:	617b      	str	r3, [r7, #20]
 805dc0e:	e018      	b.n	805dc42 <_read_range_ui+0x60>
 805dc10:	687b      	ldr	r3, [r7, #4]
 805dc12:	2200      	movs	r2, #0
 805dc14:	631a      	str	r2, [r3, #48]	; 0x30
 805dc16:	89f9      	ldrh	r1, [r7, #14]
 805dc18:	683b      	ldr	r3, [r7, #0]
 805dc1a:	693a      	ldr	r2, [r7, #16]
 805dc1c:	6878      	ldr	r0, [r7, #4]
 805dc1e:	f000 ff67 	bl	805eaf0 <vl53l5_read_multi>
 805dc22:	6178      	str	r0, [r7, #20]
 805dc24:	697b      	ldr	r3, [r7, #20]
 805dc26:	2b00      	cmp	r3, #0
 805dc28:	db0a      	blt.n	805dc40 <_read_range_ui+0x5e>
 805dc2a:	687b      	ldr	r3, [r7, #4]
 805dc2c:	683a      	ldr	r2, [r7, #0]
 805dc2e:	631a      	str	r2, [r3, #48]	; 0x30
 805dc30:	687b      	ldr	r3, [r7, #4]
 805dc32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 805dc34:	4619      	mov	r1, r3
 805dc36:	6938      	ldr	r0, [r7, #16]
 805dc38:	f7ff fe90 	bl	805d95c <vl53l5_dci_swap_buffer_byte_ordering>
 805dc3c:	6178      	str	r0, [r7, #20]
 805dc3e:	e000      	b.n	805dc42 <_read_range_ui+0x60>
 805dc40:	bf00      	nop
 805dc42:	697b      	ldr	r3, [r7, #20]
 805dc44:	4618      	mov	r0, r3
 805dc46:	3718      	adds	r7, #24
 805dc48:	46bd      	mov	sp, r7
 805dc4a:	bd80      	pop	{r7, pc}

0805dc4c <_decode_device_info_block>:
 805dc4c:	b580      	push	{r7, lr}
 805dc4e:	b084      	sub	sp, #16
 805dc50:	af00      	add	r7, sp, #0
 805dc52:	6078      	str	r0, [r7, #4]
 805dc54:	687b      	ldr	r3, [r7, #4]
 805dc56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 805dc58:	60fb      	str	r3, [r7, #12]
 805dc5a:	68fb      	ldr	r3, [r7, #12]
 805dc5c:	1c5a      	adds	r2, r3, #1
 805dc5e:	60fa      	str	r2, [r7, #12]
 805dc60:	4619      	mov	r1, r3
 805dc62:	2001      	movs	r0, #1
 805dc64:	f000 f869 	bl	805dd3a <vl53l5_decode_uint8_t>
 805dc68:	4603      	mov	r3, r0
 805dc6a:	461a      	mov	r2, r3
 805dc6c:	687b      	ldr	r3, [r7, #4]
 805dc6e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 805dc72:	68fb      	ldr	r3, [r7, #12]
 805dc74:	1c5a      	adds	r2, r3, #1
 805dc76:	60fa      	str	r2, [r7, #12]
 805dc78:	4619      	mov	r1, r3
 805dc7a:	2001      	movs	r0, #1
 805dc7c:	f000 f85d 	bl	805dd3a <vl53l5_decode_uint8_t>
 805dc80:	4603      	mov	r3, r0
 805dc82:	461a      	mov	r2, r3
 805dc84:	687b      	ldr	r3, [r7, #4]
 805dc86:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 805dc8a:	68fb      	ldr	r3, [r7, #12]
 805dc8c:	1c5a      	adds	r2, r3, #1
 805dc8e:	60fa      	str	r2, [r7, #12]
 805dc90:	4619      	mov	r1, r3
 805dc92:	2001      	movs	r0, #1
 805dc94:	f000 f851 	bl	805dd3a <vl53l5_decode_uint8_t>
 805dc98:	4603      	mov	r3, r0
 805dc9a:	461a      	mov	r2, r3
 805dc9c:	687b      	ldr	r3, [r7, #4]
 805dc9e:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 805dca2:	68fb      	ldr	r3, [r7, #12]
 805dca4:	1c5a      	adds	r2, r3, #1
 805dca6:	60fa      	str	r2, [r7, #12]
 805dca8:	4619      	mov	r1, r3
 805dcaa:	2001      	movs	r0, #1
 805dcac:	f000 f845 	bl	805dd3a <vl53l5_decode_uint8_t>
 805dcb0:	4603      	mov	r3, r0
 805dcb2:	461a      	mov	r2, r3
 805dcb4:	687b      	ldr	r3, [r7, #4]
 805dcb6:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
 805dcba:	bf00      	nop
 805dcbc:	3710      	adds	r7, #16
 805dcbe:	46bd      	mov	sp, r7
 805dcc0:	bd80      	pop	{r7, pc}

0805dcc2 <_check_range_header_footer>:
 805dcc2:	b580      	push	{r7, lr}
 805dcc4:	b086      	sub	sp, #24
 805dcc6:	af00      	add	r7, sp, #0
 805dcc8:	6078      	str	r0, [r7, #4]
 805dcca:	2300      	movs	r3, #0
 805dccc:	617b      	str	r3, [r7, #20]
 805dcce:	2300      	movs	r3, #0
 805dcd0:	827b      	strh	r3, [r7, #18]
 805dcd2:	2300      	movs	r3, #0
 805dcd4:	823b      	strh	r3, [r7, #16]
 805dcd6:	2300      	movs	r3, #0
 805dcd8:	60fb      	str	r3, [r7, #12]
 805dcda:	687b      	ldr	r3, [r7, #4]
 805dcdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 805dcde:	687b      	ldr	r3, [r7, #4]
 805dce0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 805dce4:	3b04      	subs	r3, #4
 805dce6:	4413      	add	r3, r2
 805dce8:	60fb      	str	r3, [r7, #12]
 805dcea:	68f9      	ldr	r1, [r7, #12]
 805dcec:	2002      	movs	r0, #2
 805dcee:	f000 f841 	bl	805dd74 <vl53l5_decode_uint16_t>
 805dcf2:	4603      	mov	r3, r0
 805dcf4:	827b      	strh	r3, [r7, #18]
 805dcf6:	687b      	ldr	r3, [r7, #4]
 805dcf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 805dcfa:	687b      	ldr	r3, [r7, #4]
 805dcfc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 805dd00:	4619      	mov	r1, r3
 805dd02:	687b      	ldr	r3, [r7, #4]
 805dd04:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 805dd08:	440b      	add	r3, r1
 805dd0a:	3b04      	subs	r3, #4
 805dd0c:	4413      	add	r3, r2
 805dd0e:	60fb      	str	r3, [r7, #12]
 805dd10:	68f9      	ldr	r1, [r7, #12]
 805dd12:	2002      	movs	r0, #2
 805dd14:	f000 f82e 	bl	805dd74 <vl53l5_decode_uint16_t>
 805dd18:	4603      	mov	r3, r0
 805dd1a:	823b      	strh	r3, [r7, #16]
 805dd1c:	8a7a      	ldrh	r2, [r7, #18]
 805dd1e:	8a3b      	ldrh	r3, [r7, #16]
 805dd20:	429a      	cmp	r2, r3
 805dd22:	d003      	beq.n	805dd2c <_check_range_header_footer+0x6a>
 805dd24:	f06f 0355 	mvn.w	r3, #85	; 0x55
 805dd28:	617b      	str	r3, [r7, #20]
 805dd2a:	e001      	b.n	805dd30 <_check_range_header_footer+0x6e>
 805dd2c:	2300      	movs	r3, #0
 805dd2e:	617b      	str	r3, [r7, #20]
 805dd30:	697b      	ldr	r3, [r7, #20]
 805dd32:	4618      	mov	r0, r3
 805dd34:	3718      	adds	r7, #24
 805dd36:	46bd      	mov	sp, r7
 805dd38:	bd80      	pop	{r7, pc}

0805dd3a <vl53l5_decode_uint8_t>:
 805dd3a:	b480      	push	{r7}
 805dd3c:	b083      	sub	sp, #12
 805dd3e:	af00      	add	r7, sp, #0
 805dd40:	4603      	mov	r3, r0
 805dd42:	6039      	str	r1, [r7, #0]
 805dd44:	80fb      	strh	r3, [r7, #6]
 805dd46:	683b      	ldr	r3, [r7, #0]
 805dd48:	781b      	ldrb	r3, [r3, #0]
 805dd4a:	4618      	mov	r0, r3
 805dd4c:	370c      	adds	r7, #12
 805dd4e:	46bd      	mov	sp, r7
 805dd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 805dd54:	4770      	bx	lr

0805dd56 <vl53l5_decode_int8_t>:
 805dd56:	b480      	push	{r7}
 805dd58:	b083      	sub	sp, #12
 805dd5a:	af00      	add	r7, sp, #0
 805dd5c:	4603      	mov	r3, r0
 805dd5e:	6039      	str	r1, [r7, #0]
 805dd60:	80fb      	strh	r3, [r7, #6]
 805dd62:	683b      	ldr	r3, [r7, #0]
 805dd64:	781b      	ldrb	r3, [r3, #0]
 805dd66:	b25b      	sxtb	r3, r3
 805dd68:	4618      	mov	r0, r3
 805dd6a:	370c      	adds	r7, #12
 805dd6c:	46bd      	mov	sp, r7
 805dd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 805dd72:	4770      	bx	lr

0805dd74 <vl53l5_decode_uint16_t>:
 805dd74:	b480      	push	{r7}
 805dd76:	b085      	sub	sp, #20
 805dd78:	af00      	add	r7, sp, #0
 805dd7a:	4603      	mov	r3, r0
 805dd7c:	6039      	str	r1, [r7, #0]
 805dd7e:	80fb      	strh	r3, [r7, #6]
 805dd80:	2300      	movs	r3, #0
 805dd82:	81fb      	strh	r3, [r7, #14]
 805dd84:	e00a      	b.n	805dd9c <vl53l5_decode_uint16_t+0x28>
 805dd86:	89fb      	ldrh	r3, [r7, #14]
 805dd88:	021b      	lsls	r3, r3, #8
 805dd8a:	b21a      	sxth	r2, r3
 805dd8c:	88fb      	ldrh	r3, [r7, #6]
 805dd8e:	6839      	ldr	r1, [r7, #0]
 805dd90:	440b      	add	r3, r1
 805dd92:	781b      	ldrb	r3, [r3, #0]
 805dd94:	b21b      	sxth	r3, r3
 805dd96:	4313      	orrs	r3, r2
 805dd98:	b21b      	sxth	r3, r3
 805dd9a:	81fb      	strh	r3, [r7, #14]
 805dd9c:	88fb      	ldrh	r3, [r7, #6]
 805dd9e:	1e5a      	subs	r2, r3, #1
 805dda0:	80fa      	strh	r2, [r7, #6]
 805dda2:	2b00      	cmp	r3, #0
 805dda4:	d1ef      	bne.n	805dd86 <vl53l5_decode_uint16_t+0x12>
 805dda6:	89fb      	ldrh	r3, [r7, #14]
 805dda8:	4618      	mov	r0, r3
 805ddaa:	3714      	adds	r7, #20
 805ddac:	46bd      	mov	sp, r7
 805ddae:	f85d 7b04 	ldr.w	r7, [sp], #4
 805ddb2:	4770      	bx	lr

0805ddb4 <vl53l5_decode_int16_t>:
 805ddb4:	b480      	push	{r7}
 805ddb6:	b085      	sub	sp, #20
 805ddb8:	af00      	add	r7, sp, #0
 805ddba:	4603      	mov	r3, r0
 805ddbc:	6039      	str	r1, [r7, #0]
 805ddbe:	80fb      	strh	r3, [r7, #6]
 805ddc0:	2300      	movs	r3, #0
 805ddc2:	81fb      	strh	r3, [r7, #14]
 805ddc4:	88fb      	ldrh	r3, [r7, #6]
 805ddc6:	3b01      	subs	r3, #1
 805ddc8:	683a      	ldr	r2, [r7, #0]
 805ddca:	4413      	add	r3, r2
 805ddcc:	781b      	ldrb	r3, [r3, #0]
 805ddce:	b25b      	sxtb	r3, r3
 805ddd0:	2b00      	cmp	r3, #0
 805ddd2:	da0e      	bge.n	805ddf2 <vl53l5_decode_int16_t+0x3e>
 805ddd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 805ddd8:	81fb      	strh	r3, [r7, #14]
 805ddda:	e00a      	b.n	805ddf2 <vl53l5_decode_int16_t+0x3e>
 805dddc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 805dde0:	021b      	lsls	r3, r3, #8
 805dde2:	b21a      	sxth	r2, r3
 805dde4:	88fb      	ldrh	r3, [r7, #6]
 805dde6:	6839      	ldr	r1, [r7, #0]
 805dde8:	440b      	add	r3, r1
 805ddea:	781b      	ldrb	r3, [r3, #0]
 805ddec:	b21b      	sxth	r3, r3
 805ddee:	4313      	orrs	r3, r2
 805ddf0:	81fb      	strh	r3, [r7, #14]
 805ddf2:	88fb      	ldrh	r3, [r7, #6]
 805ddf4:	1e5a      	subs	r2, r3, #1
 805ddf6:	80fa      	strh	r2, [r7, #6]
 805ddf8:	2b00      	cmp	r3, #0
 805ddfa:	d1ef      	bne.n	805dddc <vl53l5_decode_int16_t+0x28>
 805ddfc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 805de00:	4618      	mov	r0, r3
 805de02:	3714      	adds	r7, #20
 805de04:	46bd      	mov	sp, r7
 805de06:	f85d 7b04 	ldr.w	r7, [sp], #4
 805de0a:	4770      	bx	lr

0805de0c <vl53l5_decode_int32_t>:
 805de0c:	b480      	push	{r7}
 805de0e:	b085      	sub	sp, #20
 805de10:	af00      	add	r7, sp, #0
 805de12:	4603      	mov	r3, r0
 805de14:	6039      	str	r1, [r7, #0]
 805de16:	80fb      	strh	r3, [r7, #6]
 805de18:	2300      	movs	r3, #0
 805de1a:	60fb      	str	r3, [r7, #12]
 805de1c:	88fb      	ldrh	r3, [r7, #6]
 805de1e:	3b01      	subs	r3, #1
 805de20:	683a      	ldr	r2, [r7, #0]
 805de22:	4413      	add	r3, r2
 805de24:	781b      	ldrb	r3, [r3, #0]
 805de26:	b25b      	sxtb	r3, r3
 805de28:	2b00      	cmp	r3, #0
 805de2a:	da0b      	bge.n	805de44 <vl53l5_decode_int32_t+0x38>
 805de2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 805de30:	60fb      	str	r3, [r7, #12]
 805de32:	e007      	b.n	805de44 <vl53l5_decode_int32_t+0x38>
 805de34:	68fb      	ldr	r3, [r7, #12]
 805de36:	021b      	lsls	r3, r3, #8
 805de38:	88fa      	ldrh	r2, [r7, #6]
 805de3a:	6839      	ldr	r1, [r7, #0]
 805de3c:	440a      	add	r2, r1
 805de3e:	7812      	ldrb	r2, [r2, #0]
 805de40:	4313      	orrs	r3, r2
 805de42:	60fb      	str	r3, [r7, #12]
 805de44:	88fb      	ldrh	r3, [r7, #6]
 805de46:	1e5a      	subs	r2, r3, #1
 805de48:	80fa      	strh	r2, [r7, #6]
 805de4a:	2b00      	cmp	r3, #0
 805de4c:	d1f2      	bne.n	805de34 <vl53l5_decode_int32_t+0x28>
 805de4e:	68fb      	ldr	r3, [r7, #12]
 805de50:	4618      	mov	r0, r3
 805de52:	3714      	adds	r7, #20
 805de54:	46bd      	mov	sp, r7
 805de56:	f85d 7b04 	ldr.w	r7, [sp], #4
 805de5a:	4770      	bx	lr

0805de5c <vl53l5_encode_uint32_t>:
 805de5c:	b480      	push	{r7}
 805de5e:	b087      	sub	sp, #28
 805de60:	af00      	add	r7, sp, #0
 805de62:	60f8      	str	r0, [r7, #12]
 805de64:	460b      	mov	r3, r1
 805de66:	607a      	str	r2, [r7, #4]
 805de68:	817b      	strh	r3, [r7, #10]
 805de6a:	2300      	movs	r3, #0
 805de6c:	82fb      	strh	r3, [r7, #22]
 805de6e:	2300      	movs	r3, #0
 805de70:	613b      	str	r3, [r7, #16]
 805de72:	68fb      	ldr	r3, [r7, #12]
 805de74:	613b      	str	r3, [r7, #16]
 805de76:	2300      	movs	r3, #0
 805de78:	82fb      	strh	r3, [r7, #22]
 805de7a:	e00b      	b.n	805de94 <vl53l5_encode_uint32_t+0x38>
 805de7c:	8afb      	ldrh	r3, [r7, #22]
 805de7e:	687a      	ldr	r2, [r7, #4]
 805de80:	4413      	add	r3, r2
 805de82:	693a      	ldr	r2, [r7, #16]
 805de84:	b2d2      	uxtb	r2, r2
 805de86:	701a      	strb	r2, [r3, #0]
 805de88:	693b      	ldr	r3, [r7, #16]
 805de8a:	0a1b      	lsrs	r3, r3, #8
 805de8c:	613b      	str	r3, [r7, #16]
 805de8e:	8afb      	ldrh	r3, [r7, #22]
 805de90:	3301      	adds	r3, #1
 805de92:	82fb      	strh	r3, [r7, #22]
 805de94:	8afa      	ldrh	r2, [r7, #22]
 805de96:	897b      	ldrh	r3, [r7, #10]
 805de98:	429a      	cmp	r2, r3
 805de9a:	d3ef      	bcc.n	805de7c <vl53l5_encode_uint32_t+0x20>
 805de9c:	bf00      	nop
 805de9e:	371c      	adds	r7, #28
 805dea0:	46bd      	mov	sp, r7
 805dea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 805dea6:	4770      	bx	lr

0805dea8 <vl53l5_decode_uint32_t>:
 805dea8:	b480      	push	{r7}
 805deaa:	b085      	sub	sp, #20
 805deac:	af00      	add	r7, sp, #0
 805deae:	4603      	mov	r3, r0
 805deb0:	6039      	str	r1, [r7, #0]
 805deb2:	80fb      	strh	r3, [r7, #6]
 805deb4:	2300      	movs	r3, #0
 805deb6:	60fb      	str	r3, [r7, #12]
 805deb8:	e007      	b.n	805deca <vl53l5_decode_uint32_t+0x22>
 805deba:	68fb      	ldr	r3, [r7, #12]
 805debc:	021b      	lsls	r3, r3, #8
 805debe:	88fa      	ldrh	r2, [r7, #6]
 805dec0:	6839      	ldr	r1, [r7, #0]
 805dec2:	440a      	add	r2, r1
 805dec4:	7812      	ldrb	r2, [r2, #0]
 805dec6:	4313      	orrs	r3, r2
 805dec8:	60fb      	str	r3, [r7, #12]
 805deca:	88fb      	ldrh	r3, [r7, #6]
 805decc:	1e5a      	subs	r2, r3, #1
 805dece:	80fa      	strh	r2, [r7, #6]
 805ded0:	2b00      	cmp	r3, #0
 805ded2:	d1f2      	bne.n	805deba <vl53l5_decode_uint32_t+0x12>
 805ded4:	68fb      	ldr	r3, [r7, #12]
 805ded6:	4618      	mov	r0, r3
 805ded8:	3714      	adds	r7, #20
 805deda:	46bd      	mov	sp, r7
 805dedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 805dee0:	4770      	bx	lr

0805dee2 <vl53l5_decode_switch>:
 805dee2:	b580      	push	{r7, lr}
 805dee4:	b086      	sub	sp, #24
 805dee6:	af00      	add	r7, sp, #0
 805dee8:	60b9      	str	r1, [r7, #8]
 805deea:	607a      	str	r2, [r7, #4]
 805deec:	603b      	str	r3, [r7, #0]
 805deee:	4603      	mov	r3, r0
 805def0:	81fb      	strh	r3, [r7, #14]
 805def2:	2300      	movs	r3, #0
 805def4:	617b      	str	r3, [r7, #20]
 805def6:	89fb      	ldrh	r3, [r7, #14]
 805def8:	f5b3 4fa8 	cmp.w	r3, #21504	; 0x5400
 805defc:	d30c      	bcc.n	805df18 <vl53l5_decode_switch+0x36>
 805defe:	89fb      	ldrh	r3, [r7, #14]
 805df00:	f645 12c8 	movw	r2, #22984	; 0x59c8
 805df04:	4293      	cmp	r3, r2
 805df06:	d807      	bhi.n	805df18 <vl53l5_decode_switch+0x36>
 805df08:	89f8      	ldrh	r0, [r7, #14]
 805df0a:	683b      	ldr	r3, [r7, #0]
 805df0c:	687a      	ldr	r2, [r7, #4]
 805df0e:	68b9      	ldr	r1, [r7, #8]
 805df10:	f001 ffd9 	bl	805fec6 <vl53l5_core_decode_cmd>
 805df14:	6178      	str	r0, [r7, #20]
 805df16:	e026      	b.n	805df66 <vl53l5_decode_switch+0x84>
 805df18:	89fb      	ldrh	r3, [r7, #14]
 805df1a:	f645 12cf 	movw	r2, #22991	; 0x59cf
 805df1e:	4293      	cmp	r3, r2
 805df20:	d90c      	bls.n	805df3c <vl53l5_decode_switch+0x5a>
 805df22:	89fb      	ldrh	r3, [r7, #14]
 805df24:	f24a 323c 	movw	r2, #41788	; 0xa33c
 805df28:	4293      	cmp	r3, r2
 805df2a:	d807      	bhi.n	805df3c <vl53l5_decode_switch+0x5a>
 805df2c:	89f8      	ldrh	r0, [r7, #14]
 805df2e:	683b      	ldr	r3, [r7, #0]
 805df30:	687a      	ldr	r2, [r7, #4]
 805df32:	68b9      	ldr	r1, [r7, #8]
 805df34:	f000 fbda 	bl	805e6ec <vl53l5_results_decode_cmd>
 805df38:	6178      	str	r0, [r7, #20]
 805df3a:	e014      	b.n	805df66 <vl53l5_decode_switch+0x84>
 805df3c:	89fb      	ldrh	r3, [r7, #14]
 805df3e:	f24a 3257 	movw	r2, #41815	; 0xa357
 805df42:	4293      	cmp	r3, r2
 805df44:	d90c      	bls.n	805df60 <vl53l5_decode_switch+0x7e>
 805df46:	89fb      	ldrh	r3, [r7, #14]
 805df48:	f64b 4280 	movw	r2, #48256	; 0xbc80
 805df4c:	4293      	cmp	r3, r2
 805df4e:	d807      	bhi.n	805df60 <vl53l5_decode_switch+0x7e>
 805df50:	89f8      	ldrh	r0, [r7, #14]
 805df52:	683b      	ldr	r3, [r7, #0]
 805df54:	687a      	ldr	r2, [r7, #4]
 805df56:	68b9      	ldr	r1, [r7, #8]
 805df58:	f001 fcac 	bl	805f8b4 <vl53l5_calibration_decode_cmd>
 805df5c:	6178      	str	r0, [r7, #20]
 805df5e:	e002      	b.n	805df66 <vl53l5_decode_switch+0x84>
 805df60:	f06f 0308 	mvn.w	r3, #8
 805df64:	617b      	str	r3, [r7, #20]
 805df66:	697b      	ldr	r3, [r7, #20]
 805df68:	4618      	mov	r0, r3
 805df6a:	3718      	adds	r7, #24
 805df6c:	46bd      	mov	sp, r7
 805df6e:	bd80      	pop	{r7, pc}

0805df70 <_decode_dci_grp_buf_meta_data>:
 805df70:	b580      	push	{r7, lr}
 805df72:	b088      	sub	sp, #32
 805df74:	af00      	add	r7, sp, #0
 805df76:	60f8      	str	r0, [r7, #12]
 805df78:	60b9      	str	r1, [r7, #8]
 805df7a:	607a      	str	r2, [r7, #4]
 805df7c:	2300      	movs	r3, #0
 805df7e:	61fb      	str	r3, [r7, #28]
 805df80:	2300      	movs	r3, #0
 805df82:	61bb      	str	r3, [r7, #24]
 805df84:	68bb      	ldr	r3, [r7, #8]
 805df86:	617b      	str	r3, [r7, #20]
 805df88:	68fb      	ldr	r3, [r7, #12]
 805df8a:	2b0c      	cmp	r3, #12
 805df8c:	d903      	bls.n	805df96 <_decode_dci_grp_buf_meta_data+0x26>
 805df8e:	f06f 0304 	mvn.w	r3, #4
 805df92:	61fb      	str	r3, [r7, #28]
 805df94:	e085      	b.n	805e0a2 <_decode_dci_grp_buf_meta_data+0x132>
 805df96:	6979      	ldr	r1, [r7, #20]
 805df98:	2004      	movs	r0, #4
 805df9a:	f7ff ff85 	bl	805dea8 <vl53l5_decode_uint32_t>
 805df9e:	4602      	mov	r2, r0
 805dfa0:	687b      	ldr	r3, [r7, #4]
 805dfa2:	601a      	str	r2, [r3, #0]
 805dfa4:	697b      	ldr	r3, [r7, #20]
 805dfa6:	3304      	adds	r3, #4
 805dfa8:	617b      	str	r3, [r7, #20]
 805dfaa:	69bb      	ldr	r3, [r7, #24]
 805dfac:	3304      	adds	r3, #4
 805dfae:	61bb      	str	r3, [r7, #24]
 805dfb0:	6979      	ldr	r1, [r7, #20]
 805dfb2:	2001      	movs	r0, #1
 805dfb4:	f7ff fec1 	bl	805dd3a <vl53l5_decode_uint8_t>
 805dfb8:	4603      	mov	r3, r0
 805dfba:	461a      	mov	r2, r3
 805dfbc:	687b      	ldr	r3, [r7, #4]
 805dfbe:	711a      	strb	r2, [r3, #4]
 805dfc0:	697b      	ldr	r3, [r7, #20]
 805dfc2:	3301      	adds	r3, #1
 805dfc4:	617b      	str	r3, [r7, #20]
 805dfc6:	69bb      	ldr	r3, [r7, #24]
 805dfc8:	3301      	adds	r3, #1
 805dfca:	61bb      	str	r3, [r7, #24]
 805dfcc:	6979      	ldr	r1, [r7, #20]
 805dfce:	2001      	movs	r0, #1
 805dfd0:	f7ff feb3 	bl	805dd3a <vl53l5_decode_uint8_t>
 805dfd4:	4603      	mov	r3, r0
 805dfd6:	461a      	mov	r2, r3
 805dfd8:	687b      	ldr	r3, [r7, #4]
 805dfda:	715a      	strb	r2, [r3, #5]
 805dfdc:	697b      	ldr	r3, [r7, #20]
 805dfde:	3301      	adds	r3, #1
 805dfe0:	617b      	str	r3, [r7, #20]
 805dfe2:	69bb      	ldr	r3, [r7, #24]
 805dfe4:	3301      	adds	r3, #1
 805dfe6:	61bb      	str	r3, [r7, #24]
 805dfe8:	6979      	ldr	r1, [r7, #20]
 805dfea:	2001      	movs	r0, #1
 805dfec:	f7ff fea5 	bl	805dd3a <vl53l5_decode_uint8_t>
 805dff0:	4603      	mov	r3, r0
 805dff2:	461a      	mov	r2, r3
 805dff4:	687b      	ldr	r3, [r7, #4]
 805dff6:	719a      	strb	r2, [r3, #6]
 805dff8:	697b      	ldr	r3, [r7, #20]
 805dffa:	3301      	adds	r3, #1
 805dffc:	617b      	str	r3, [r7, #20]
 805dffe:	69bb      	ldr	r3, [r7, #24]
 805e000:	3301      	adds	r3, #1
 805e002:	61bb      	str	r3, [r7, #24]
 805e004:	6979      	ldr	r1, [r7, #20]
 805e006:	2001      	movs	r0, #1
 805e008:	f7ff fe97 	bl	805dd3a <vl53l5_decode_uint8_t>
 805e00c:	4603      	mov	r3, r0
 805e00e:	461a      	mov	r2, r3
 805e010:	687b      	ldr	r3, [r7, #4]
 805e012:	71da      	strb	r2, [r3, #7]
 805e014:	697b      	ldr	r3, [r7, #20]
 805e016:	3301      	adds	r3, #1
 805e018:	617b      	str	r3, [r7, #20]
 805e01a:	69bb      	ldr	r3, [r7, #24]
 805e01c:	3301      	adds	r3, #1
 805e01e:	61bb      	str	r3, [r7, #24]
 805e020:	6979      	ldr	r1, [r7, #20]
 805e022:	2001      	movs	r0, #1
 805e024:	f7ff fe97 	bl	805dd56 <vl53l5_decode_int8_t>
 805e028:	4603      	mov	r3, r0
 805e02a:	461a      	mov	r2, r3
 805e02c:	687b      	ldr	r3, [r7, #4]
 805e02e:	721a      	strb	r2, [r3, #8]
 805e030:	697b      	ldr	r3, [r7, #20]
 805e032:	3301      	adds	r3, #1
 805e034:	617b      	str	r3, [r7, #20]
 805e036:	69bb      	ldr	r3, [r7, #24]
 805e038:	3301      	adds	r3, #1
 805e03a:	61bb      	str	r3, [r7, #24]
 805e03c:	6979      	ldr	r1, [r7, #20]
 805e03e:	2001      	movs	r0, #1
 805e040:	f7ff fe7b 	bl	805dd3a <vl53l5_decode_uint8_t>
 805e044:	4603      	mov	r3, r0
 805e046:	461a      	mov	r2, r3
 805e048:	687b      	ldr	r3, [r7, #4]
 805e04a:	725a      	strb	r2, [r3, #9]
 805e04c:	697b      	ldr	r3, [r7, #20]
 805e04e:	3301      	adds	r3, #1
 805e050:	617b      	str	r3, [r7, #20]
 805e052:	69bb      	ldr	r3, [r7, #24]
 805e054:	3301      	adds	r3, #1
 805e056:	61bb      	str	r3, [r7, #24]
 805e058:	6979      	ldr	r1, [r7, #20]
 805e05a:	2001      	movs	r0, #1
 805e05c:	f7ff fe6d 	bl	805dd3a <vl53l5_decode_uint8_t>
 805e060:	4603      	mov	r3, r0
 805e062:	461a      	mov	r2, r3
 805e064:	687b      	ldr	r3, [r7, #4]
 805e066:	729a      	strb	r2, [r3, #10]
 805e068:	697b      	ldr	r3, [r7, #20]
 805e06a:	3301      	adds	r3, #1
 805e06c:	617b      	str	r3, [r7, #20]
 805e06e:	69bb      	ldr	r3, [r7, #24]
 805e070:	3301      	adds	r3, #1
 805e072:	61bb      	str	r3, [r7, #24]
 805e074:	6979      	ldr	r1, [r7, #20]
 805e076:	2001      	movs	r0, #1
 805e078:	f7ff fe5f 	bl	805dd3a <vl53l5_decode_uint8_t>
 805e07c:	4603      	mov	r3, r0
 805e07e:	461a      	mov	r2, r3
 805e080:	687b      	ldr	r3, [r7, #4]
 805e082:	72da      	strb	r2, [r3, #11]
 805e084:	697b      	ldr	r3, [r7, #20]
 805e086:	3301      	adds	r3, #1
 805e088:	617b      	str	r3, [r7, #20]
 805e08a:	69bb      	ldr	r3, [r7, #24]
 805e08c:	3301      	adds	r3, #1
 805e08e:	61bb      	str	r3, [r7, #24]
 805e090:	68fa      	ldr	r2, [r7, #12]
 805e092:	69bb      	ldr	r3, [r7, #24]
 805e094:	429a      	cmp	r2, r3
 805e096:	d003      	beq.n	805e0a0 <_decode_dci_grp_buf_meta_data+0x130>
 805e098:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 805e09c:	61fb      	str	r3, [r7, #28]
 805e09e:	e000      	b.n	805e0a2 <_decode_dci_grp_buf_meta_data+0x132>
 805e0a0:	bf00      	nop
 805e0a2:	69fb      	ldr	r3, [r7, #28]
 805e0a4:	4618      	mov	r0, r3
 805e0a6:	3720      	adds	r7, #32
 805e0a8:	46bd      	mov	sp, r7
 805e0aa:	bd80      	pop	{r7, pc}

0805e0ac <_decode_dci_grp_rng_common_data>:
 805e0ac:	b580      	push	{r7, lr}
 805e0ae:	b088      	sub	sp, #32
 805e0b0:	af00      	add	r7, sp, #0
 805e0b2:	60f8      	str	r0, [r7, #12]
 805e0b4:	60b9      	str	r1, [r7, #8]
 805e0b6:	607a      	str	r2, [r7, #4]
 805e0b8:	2300      	movs	r3, #0
 805e0ba:	61fb      	str	r3, [r7, #28]
 805e0bc:	2300      	movs	r3, #0
 805e0be:	61bb      	str	r3, [r7, #24]
 805e0c0:	68bb      	ldr	r3, [r7, #8]
 805e0c2:	617b      	str	r3, [r7, #20]
 805e0c4:	68fb      	ldr	r3, [r7, #12]
 805e0c6:	2b04      	cmp	r3, #4
 805e0c8:	d903      	bls.n	805e0d2 <_decode_dci_grp_rng_common_data+0x26>
 805e0ca:	f06f 0304 	mvn.w	r3, #4
 805e0ce:	61fb      	str	r3, [r7, #28]
 805e0d0:	e032      	b.n	805e138 <_decode_dci_grp_rng_common_data+0x8c>
 805e0d2:	6979      	ldr	r1, [r7, #20]
 805e0d4:	2002      	movs	r0, #2
 805e0d6:	f7ff fe4d 	bl	805dd74 <vl53l5_decode_uint16_t>
 805e0da:	4603      	mov	r3, r0
 805e0dc:	461a      	mov	r2, r3
 805e0de:	687b      	ldr	r3, [r7, #4]
 805e0e0:	801a      	strh	r2, [r3, #0]
 805e0e2:	697b      	ldr	r3, [r7, #20]
 805e0e4:	3302      	adds	r3, #2
 805e0e6:	617b      	str	r3, [r7, #20]
 805e0e8:	69bb      	ldr	r3, [r7, #24]
 805e0ea:	3302      	adds	r3, #2
 805e0ec:	61bb      	str	r3, [r7, #24]
 805e0ee:	6979      	ldr	r1, [r7, #20]
 805e0f0:	2001      	movs	r0, #1
 805e0f2:	f7ff fe22 	bl	805dd3a <vl53l5_decode_uint8_t>
 805e0f6:	4603      	mov	r3, r0
 805e0f8:	461a      	mov	r2, r3
 805e0fa:	687b      	ldr	r3, [r7, #4]
 805e0fc:	709a      	strb	r2, [r3, #2]
 805e0fe:	697b      	ldr	r3, [r7, #20]
 805e100:	3301      	adds	r3, #1
 805e102:	617b      	str	r3, [r7, #20]
 805e104:	69bb      	ldr	r3, [r7, #24]
 805e106:	3301      	adds	r3, #1
 805e108:	61bb      	str	r3, [r7, #24]
 805e10a:	6979      	ldr	r1, [r7, #20]
 805e10c:	2001      	movs	r0, #1
 805e10e:	f7ff fe14 	bl	805dd3a <vl53l5_decode_uint8_t>
 805e112:	4603      	mov	r3, r0
 805e114:	461a      	mov	r2, r3
 805e116:	687b      	ldr	r3, [r7, #4]
 805e118:	70da      	strb	r2, [r3, #3]
 805e11a:	697b      	ldr	r3, [r7, #20]
 805e11c:	3301      	adds	r3, #1
 805e11e:	617b      	str	r3, [r7, #20]
 805e120:	69bb      	ldr	r3, [r7, #24]
 805e122:	3301      	adds	r3, #1
 805e124:	61bb      	str	r3, [r7, #24]
 805e126:	68fa      	ldr	r2, [r7, #12]
 805e128:	69bb      	ldr	r3, [r7, #24]
 805e12a:	429a      	cmp	r2, r3
 805e12c:	d003      	beq.n	805e136 <_decode_dci_grp_rng_common_data+0x8a>
 805e12e:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 805e132:	61fb      	str	r3, [r7, #28]
 805e134:	e000      	b.n	805e138 <_decode_dci_grp_rng_common_data+0x8c>
 805e136:	bf00      	nop
 805e138:	69fb      	ldr	r3, [r7, #28]
 805e13a:	4618      	mov	r0, r3
 805e13c:	3720      	adds	r7, #32
 805e13e:	46bd      	mov	sp, r7
 805e140:	bd80      	pop	{r7, pc}

0805e142 <_decode_dci_grp_rng_per_zone_data_amb_rate_kcps_per_spad>:
 805e142:	b580      	push	{r7, lr}
 805e144:	b088      	sub	sp, #32
 805e146:	af00      	add	r7, sp, #0
 805e148:	60f8      	str	r0, [r7, #12]
 805e14a:	60b9      	str	r1, [r7, #8]
 805e14c:	607a      	str	r2, [r7, #4]
 805e14e:	2300      	movs	r3, #0
 805e150:	61fb      	str	r3, [r7, #28]
 805e152:	2300      	movs	r3, #0
 805e154:	61bb      	str	r3, [r7, #24]
 805e156:	68bb      	ldr	r3, [r7, #8]
 805e158:	617b      	str	r3, [r7, #20]
 805e15a:	2300      	movs	r3, #0
 805e15c:	613b      	str	r3, [r7, #16]
 805e15e:	68fb      	ldr	r3, [r7, #12]
 805e160:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 805e164:	d915      	bls.n	805e192 <_decode_dci_grp_rng_per_zone_data_amb_rate_kcps_per_spad+0x50>
 805e166:	f06f 0304 	mvn.w	r3, #4
 805e16a:	61fb      	str	r3, [r7, #28]
 805e16c:	e01e      	b.n	805e1ac <_decode_dci_grp_rng_per_zone_data_amb_rate_kcps_per_spad+0x6a>
 805e16e:	6979      	ldr	r1, [r7, #20]
 805e170:	2004      	movs	r0, #4
 805e172:	f7ff fe99 	bl	805dea8 <vl53l5_decode_uint32_t>
 805e176:	4601      	mov	r1, r0
 805e178:	687b      	ldr	r3, [r7, #4]
 805e17a:	693a      	ldr	r2, [r7, #16]
 805e17c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 805e180:	697b      	ldr	r3, [r7, #20]
 805e182:	3304      	adds	r3, #4
 805e184:	617b      	str	r3, [r7, #20]
 805e186:	69bb      	ldr	r3, [r7, #24]
 805e188:	3304      	adds	r3, #4
 805e18a:	61bb      	str	r3, [r7, #24]
 805e18c:	693b      	ldr	r3, [r7, #16]
 805e18e:	3301      	adds	r3, #1
 805e190:	613b      	str	r3, [r7, #16]
 805e192:	69ba      	ldr	r2, [r7, #24]
 805e194:	68fb      	ldr	r3, [r7, #12]
 805e196:	429a      	cmp	r2, r3
 805e198:	d3e9      	bcc.n	805e16e <_decode_dci_grp_rng_per_zone_data_amb_rate_kcps_per_spad+0x2c>
 805e19a:	68fa      	ldr	r2, [r7, #12]
 805e19c:	69bb      	ldr	r3, [r7, #24]
 805e19e:	429a      	cmp	r2, r3
 805e1a0:	d003      	beq.n	805e1aa <_decode_dci_grp_rng_per_zone_data_amb_rate_kcps_per_spad+0x68>
 805e1a2:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 805e1a6:	61fb      	str	r3, [r7, #28]
 805e1a8:	e000      	b.n	805e1ac <_decode_dci_grp_rng_per_zone_data_amb_rate_kcps_per_spad+0x6a>
 805e1aa:	bf00      	nop
 805e1ac:	69fb      	ldr	r3, [r7, #28]
 805e1ae:	4618      	mov	r0, r3
 805e1b0:	3720      	adds	r7, #32
 805e1b2:	46bd      	mov	sp, r7
 805e1b4:	bd80      	pop	{r7, pc}

0805e1b6 <_decode_dci_grp_rng_per_zone_data_amb_dmax_mm>:
 805e1b6:	b580      	push	{r7, lr}
 805e1b8:	b088      	sub	sp, #32
 805e1ba:	af00      	add	r7, sp, #0
 805e1bc:	60f8      	str	r0, [r7, #12]
 805e1be:	60b9      	str	r1, [r7, #8]
 805e1c0:	607a      	str	r2, [r7, #4]
 805e1c2:	2300      	movs	r3, #0
 805e1c4:	61fb      	str	r3, [r7, #28]
 805e1c6:	2300      	movs	r3, #0
 805e1c8:	61bb      	str	r3, [r7, #24]
 805e1ca:	68bb      	ldr	r3, [r7, #8]
 805e1cc:	617b      	str	r3, [r7, #20]
 805e1ce:	2300      	movs	r3, #0
 805e1d0:	613b      	str	r3, [r7, #16]
 805e1d2:	68fb      	ldr	r3, [r7, #12]
 805e1d4:	2b82      	cmp	r3, #130	; 0x82
 805e1d6:	d919      	bls.n	805e20c <_decode_dci_grp_rng_per_zone_data_amb_dmax_mm+0x56>
 805e1d8:	f06f 0304 	mvn.w	r3, #4
 805e1dc:	61fb      	str	r3, [r7, #28]
 805e1de:	e022      	b.n	805e226 <_decode_dci_grp_rng_per_zone_data_amb_dmax_mm+0x70>
 805e1e0:	6979      	ldr	r1, [r7, #20]
 805e1e2:	2002      	movs	r0, #2
 805e1e4:	f7ff fdc6 	bl	805dd74 <vl53l5_decode_uint16_t>
 805e1e8:	4603      	mov	r3, r0
 805e1ea:	4619      	mov	r1, r3
 805e1ec:	687a      	ldr	r2, [r7, #4]
 805e1ee:	693b      	ldr	r3, [r7, #16]
 805e1f0:	3380      	adds	r3, #128	; 0x80
 805e1f2:	005b      	lsls	r3, r3, #1
 805e1f4:	4413      	add	r3, r2
 805e1f6:	460a      	mov	r2, r1
 805e1f8:	809a      	strh	r2, [r3, #4]
 805e1fa:	697b      	ldr	r3, [r7, #20]
 805e1fc:	3302      	adds	r3, #2
 805e1fe:	617b      	str	r3, [r7, #20]
 805e200:	69bb      	ldr	r3, [r7, #24]
 805e202:	3302      	adds	r3, #2
 805e204:	61bb      	str	r3, [r7, #24]
 805e206:	693b      	ldr	r3, [r7, #16]
 805e208:	3301      	adds	r3, #1
 805e20a:	613b      	str	r3, [r7, #16]
 805e20c:	69ba      	ldr	r2, [r7, #24]
 805e20e:	68fb      	ldr	r3, [r7, #12]
 805e210:	429a      	cmp	r2, r3
 805e212:	d3e5      	bcc.n	805e1e0 <_decode_dci_grp_rng_per_zone_data_amb_dmax_mm+0x2a>
 805e214:	68fa      	ldr	r2, [r7, #12]
 805e216:	69bb      	ldr	r3, [r7, #24]
 805e218:	429a      	cmp	r2, r3
 805e21a:	d003      	beq.n	805e224 <_decode_dci_grp_rng_per_zone_data_amb_dmax_mm+0x6e>
 805e21c:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 805e220:	61fb      	str	r3, [r7, #28]
 805e222:	e000      	b.n	805e226 <_decode_dci_grp_rng_per_zone_data_amb_dmax_mm+0x70>
 805e224:	bf00      	nop
 805e226:	69fb      	ldr	r3, [r7, #28]
 805e228:	4618      	mov	r0, r3
 805e22a:	3720      	adds	r7, #32
 805e22c:	46bd      	mov	sp, r7
 805e22e:	bd80      	pop	{r7, pc}

0805e230 <_decode_dci_grp_rng_per_zone_data_rng_no_of_targets>:
 805e230:	b580      	push	{r7, lr}
 805e232:	b088      	sub	sp, #32
 805e234:	af00      	add	r7, sp, #0
 805e236:	60f8      	str	r0, [r7, #12]
 805e238:	60b9      	str	r1, [r7, #8]
 805e23a:	607a      	str	r2, [r7, #4]
 805e23c:	2300      	movs	r3, #0
 805e23e:	61fb      	str	r3, [r7, #28]
 805e240:	2300      	movs	r3, #0
 805e242:	61bb      	str	r3, [r7, #24]
 805e244:	68bb      	ldr	r3, [r7, #8]
 805e246:	617b      	str	r3, [r7, #20]
 805e248:	2300      	movs	r3, #0
 805e24a:	613b      	str	r3, [r7, #16]
 805e24c:	68fb      	ldr	r3, [r7, #12]
 805e24e:	2b41      	cmp	r3, #65	; 0x41
 805e250:	d919      	bls.n	805e286 <_decode_dci_grp_rng_per_zone_data_rng_no_of_targets+0x56>
 805e252:	f06f 0304 	mvn.w	r3, #4
 805e256:	61fb      	str	r3, [r7, #28]
 805e258:	e022      	b.n	805e2a0 <_decode_dci_grp_rng_per_zone_data_rng_no_of_targets+0x70>
 805e25a:	6979      	ldr	r1, [r7, #20]
 805e25c:	2001      	movs	r0, #1
 805e25e:	f7ff fd6c 	bl	805dd3a <vl53l5_decode_uint8_t>
 805e262:	4603      	mov	r3, r0
 805e264:	4619      	mov	r1, r3
 805e266:	687a      	ldr	r2, [r7, #4]
 805e268:	693b      	ldr	r3, [r7, #16]
 805e26a:	4413      	add	r3, r2
 805e26c:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 805e270:	460a      	mov	r2, r1
 805e272:	701a      	strb	r2, [r3, #0]
 805e274:	697b      	ldr	r3, [r7, #20]
 805e276:	3301      	adds	r3, #1
 805e278:	617b      	str	r3, [r7, #20]
 805e27a:	69bb      	ldr	r3, [r7, #24]
 805e27c:	3301      	adds	r3, #1
 805e27e:	61bb      	str	r3, [r7, #24]
 805e280:	693b      	ldr	r3, [r7, #16]
 805e282:	3301      	adds	r3, #1
 805e284:	613b      	str	r3, [r7, #16]
 805e286:	69ba      	ldr	r2, [r7, #24]
 805e288:	68fb      	ldr	r3, [r7, #12]
 805e28a:	429a      	cmp	r2, r3
 805e28c:	d3e5      	bcc.n	805e25a <_decode_dci_grp_rng_per_zone_data_rng_no_of_targets+0x2a>
 805e28e:	68fa      	ldr	r2, [r7, #12]
 805e290:	69bb      	ldr	r3, [r7, #24]
 805e292:	429a      	cmp	r2, r3
 805e294:	d003      	beq.n	805e29e <_decode_dci_grp_rng_per_zone_data_rng_no_of_targets+0x6e>
 805e296:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 805e29a:	61fb      	str	r3, [r7, #28]
 805e29c:	e000      	b.n	805e2a0 <_decode_dci_grp_rng_per_zone_data_rng_no_of_targets+0x70>
 805e29e:	bf00      	nop
 805e2a0:	69fb      	ldr	r3, [r7, #28]
 805e2a2:	4618      	mov	r0, r3
 805e2a4:	3720      	adds	r7, #32
 805e2a6:	46bd      	mov	sp, r7
 805e2a8:	bd80      	pop	{r7, pc}

0805e2aa <_decode_dci_grp_rng_per_zone_data_rng_zone_id>:
 805e2aa:	b580      	push	{r7, lr}
 805e2ac:	b088      	sub	sp, #32
 805e2ae:	af00      	add	r7, sp, #0
 805e2b0:	60f8      	str	r0, [r7, #12]
 805e2b2:	60b9      	str	r1, [r7, #8]
 805e2b4:	607a      	str	r2, [r7, #4]
 805e2b6:	2300      	movs	r3, #0
 805e2b8:	61fb      	str	r3, [r7, #28]
 805e2ba:	2300      	movs	r3, #0
 805e2bc:	61bb      	str	r3, [r7, #24]
 805e2be:	68bb      	ldr	r3, [r7, #8]
 805e2c0:	617b      	str	r3, [r7, #20]
 805e2c2:	2300      	movs	r3, #0
 805e2c4:	613b      	str	r3, [r7, #16]
 805e2c6:	68fb      	ldr	r3, [r7, #12]
 805e2c8:	2b41      	cmp	r3, #65	; 0x41
 805e2ca:	d919      	bls.n	805e300 <_decode_dci_grp_rng_per_zone_data_rng_zone_id+0x56>
 805e2cc:	f06f 0304 	mvn.w	r3, #4
 805e2d0:	61fb      	str	r3, [r7, #28]
 805e2d2:	e022      	b.n	805e31a <_decode_dci_grp_rng_per_zone_data_rng_zone_id+0x70>
 805e2d4:	6979      	ldr	r1, [r7, #20]
 805e2d6:	2001      	movs	r0, #1
 805e2d8:	f7ff fd2f 	bl	805dd3a <vl53l5_decode_uint8_t>
 805e2dc:	4603      	mov	r3, r0
 805e2de:	4619      	mov	r1, r3
 805e2e0:	687a      	ldr	r2, [r7, #4]
 805e2e2:	693b      	ldr	r3, [r7, #16]
 805e2e4:	4413      	add	r3, r2
 805e2e6:	f203 13c7 	addw	r3, r3, #455	; 0x1c7
 805e2ea:	460a      	mov	r2, r1
 805e2ec:	701a      	strb	r2, [r3, #0]
 805e2ee:	697b      	ldr	r3, [r7, #20]
 805e2f0:	3301      	adds	r3, #1
 805e2f2:	617b      	str	r3, [r7, #20]
 805e2f4:	69bb      	ldr	r3, [r7, #24]
 805e2f6:	3301      	adds	r3, #1
 805e2f8:	61bb      	str	r3, [r7, #24]
 805e2fa:	693b      	ldr	r3, [r7, #16]
 805e2fc:	3301      	adds	r3, #1
 805e2fe:	613b      	str	r3, [r7, #16]
 805e300:	69ba      	ldr	r2, [r7, #24]
 805e302:	68fb      	ldr	r3, [r7, #12]
 805e304:	429a      	cmp	r2, r3
 805e306:	d3e5      	bcc.n	805e2d4 <_decode_dci_grp_rng_per_zone_data_rng_zone_id+0x2a>
 805e308:	68fa      	ldr	r2, [r7, #12]
 805e30a:	69bb      	ldr	r3, [r7, #24]
 805e30c:	429a      	cmp	r2, r3
 805e30e:	d003      	beq.n	805e318 <_decode_dci_grp_rng_per_zone_data_rng_zone_id+0x6e>
 805e310:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 805e314:	61fb      	str	r3, [r7, #28]
 805e316:	e000      	b.n	805e31a <_decode_dci_grp_rng_per_zone_data_rng_zone_id+0x70>
 805e318:	bf00      	nop
 805e31a:	69fb      	ldr	r3, [r7, #28]
 805e31c:	4618      	mov	r0, r3
 805e31e:	3720      	adds	r7, #32
 805e320:	46bd      	mov	sp, r7
 805e322:	bd80      	pop	{r7, pc}

0805e324 <_decode_dci_grp_rng_per_target_data_peak_rate_kcps_per_spad>:
 805e324:	b580      	push	{r7, lr}
 805e326:	b088      	sub	sp, #32
 805e328:	af00      	add	r7, sp, #0
 805e32a:	60f8      	str	r0, [r7, #12]
 805e32c:	60b9      	str	r1, [r7, #8]
 805e32e:	607a      	str	r2, [r7, #4]
 805e330:	2300      	movs	r3, #0
 805e332:	61fb      	str	r3, [r7, #28]
 805e334:	2300      	movs	r3, #0
 805e336:	61bb      	str	r3, [r7, #24]
 805e338:	68bb      	ldr	r3, [r7, #8]
 805e33a:	617b      	str	r3, [r7, #20]
 805e33c:	2300      	movs	r3, #0
 805e33e:	613b      	str	r3, [r7, #16]
 805e340:	68fb      	ldr	r3, [r7, #12]
 805e342:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 805e346:	d915      	bls.n	805e374 <_decode_dci_grp_rng_per_target_data_peak_rate_kcps_per_spad+0x50>
 805e348:	f06f 0304 	mvn.w	r3, #4
 805e34c:	61fb      	str	r3, [r7, #28]
 805e34e:	e01e      	b.n	805e38e <_decode_dci_grp_rng_per_target_data_peak_rate_kcps_per_spad+0x6a>
 805e350:	6979      	ldr	r1, [r7, #20]
 805e352:	2004      	movs	r0, #4
 805e354:	f7ff fda8 	bl	805dea8 <vl53l5_decode_uint32_t>
 805e358:	4601      	mov	r1, r0
 805e35a:	687b      	ldr	r3, [r7, #4]
 805e35c:	693a      	ldr	r2, [r7, #16]
 805e35e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 805e362:	697b      	ldr	r3, [r7, #20]
 805e364:	3304      	adds	r3, #4
 805e366:	617b      	str	r3, [r7, #20]
 805e368:	69bb      	ldr	r3, [r7, #24]
 805e36a:	3304      	adds	r3, #4
 805e36c:	61bb      	str	r3, [r7, #24]
 805e36e:	693b      	ldr	r3, [r7, #16]
 805e370:	3301      	adds	r3, #1
 805e372:	613b      	str	r3, [r7, #16]
 805e374:	69ba      	ldr	r2, [r7, #24]
 805e376:	68fb      	ldr	r3, [r7, #12]
 805e378:	429a      	cmp	r2, r3
 805e37a:	d3e9      	bcc.n	805e350 <_decode_dci_grp_rng_per_target_data_peak_rate_kcps_per_spad+0x2c>
 805e37c:	68fa      	ldr	r2, [r7, #12]
 805e37e:	69bb      	ldr	r3, [r7, #24]
 805e380:	429a      	cmp	r2, r3
 805e382:	d003      	beq.n	805e38c <_decode_dci_grp_rng_per_target_data_peak_rate_kcps_per_spad+0x68>
 805e384:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 805e388:	61fb      	str	r3, [r7, #28]
 805e38a:	e000      	b.n	805e38e <_decode_dci_grp_rng_per_target_data_peak_rate_kcps_per_spad+0x6a>
 805e38c:	bf00      	nop
 805e38e:	69fb      	ldr	r3, [r7, #28]
 805e390:	4618      	mov	r0, r3
 805e392:	3720      	adds	r7, #32
 805e394:	46bd      	mov	sp, r7
 805e396:	bd80      	pop	{r7, pc}

0805e398 <_decode_dci_grp_rng_per_target_data_range_sigma_mm>:
 805e398:	b580      	push	{r7, lr}
 805e39a:	b088      	sub	sp, #32
 805e39c:	af00      	add	r7, sp, #0
 805e39e:	60f8      	str	r0, [r7, #12]
 805e3a0:	60b9      	str	r1, [r7, #8]
 805e3a2:	607a      	str	r2, [r7, #4]
 805e3a4:	2300      	movs	r3, #0
 805e3a6:	61fb      	str	r3, [r7, #28]
 805e3a8:	2300      	movs	r3, #0
 805e3aa:	61bb      	str	r3, [r7, #24]
 805e3ac:	68bb      	ldr	r3, [r7, #8]
 805e3ae:	617b      	str	r3, [r7, #20]
 805e3b0:	2300      	movs	r3, #0
 805e3b2:	613b      	str	r3, [r7, #16]
 805e3b4:	68fb      	ldr	r3, [r7, #12]
 805e3b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 805e3ba:	d918      	bls.n	805e3ee <_decode_dci_grp_rng_per_target_data_range_sigma_mm+0x56>
 805e3bc:	f06f 0304 	mvn.w	r3, #4
 805e3c0:	61fb      	str	r3, [r7, #28]
 805e3c2:	e021      	b.n	805e408 <_decode_dci_grp_rng_per_target_data_range_sigma_mm+0x70>
 805e3c4:	6979      	ldr	r1, [r7, #20]
 805e3c6:	2002      	movs	r0, #2
 805e3c8:	f7ff fcd4 	bl	805dd74 <vl53l5_decode_uint16_t>
 805e3cc:	4603      	mov	r3, r0
 805e3ce:	4619      	mov	r1, r3
 805e3d0:	687b      	ldr	r3, [r7, #4]
 805e3d2:	693a      	ldr	r2, [r7, #16]
 805e3d4:	f502 7282 	add.w	r2, r2, #260	; 0x104
 805e3d8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 805e3dc:	697b      	ldr	r3, [r7, #20]
 805e3de:	3302      	adds	r3, #2
 805e3e0:	617b      	str	r3, [r7, #20]
 805e3e2:	69bb      	ldr	r3, [r7, #24]
 805e3e4:	3302      	adds	r3, #2
 805e3e6:	61bb      	str	r3, [r7, #24]
 805e3e8:	693b      	ldr	r3, [r7, #16]
 805e3ea:	3301      	adds	r3, #1
 805e3ec:	613b      	str	r3, [r7, #16]
 805e3ee:	69ba      	ldr	r2, [r7, #24]
 805e3f0:	68fb      	ldr	r3, [r7, #12]
 805e3f2:	429a      	cmp	r2, r3
 805e3f4:	d3e6      	bcc.n	805e3c4 <_decode_dci_grp_rng_per_target_data_range_sigma_mm+0x2c>
 805e3f6:	68fa      	ldr	r2, [r7, #12]
 805e3f8:	69bb      	ldr	r3, [r7, #24]
 805e3fa:	429a      	cmp	r2, r3
 805e3fc:	d003      	beq.n	805e406 <_decode_dci_grp_rng_per_target_data_range_sigma_mm+0x6e>
 805e3fe:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 805e402:	61fb      	str	r3, [r7, #28]
 805e404:	e000      	b.n	805e408 <_decode_dci_grp_rng_per_target_data_range_sigma_mm+0x70>
 805e406:	bf00      	nop
 805e408:	69fb      	ldr	r3, [r7, #28]
 805e40a:	4618      	mov	r0, r3
 805e40c:	3720      	adds	r7, #32
 805e40e:	46bd      	mov	sp, r7
 805e410:	bd80      	pop	{r7, pc}

0805e412 <_decode_dci_grp_rng_per_target_data_median_range_mm>:
 805e412:	b580      	push	{r7, lr}
 805e414:	b088      	sub	sp, #32
 805e416:	af00      	add	r7, sp, #0
 805e418:	60f8      	str	r0, [r7, #12]
 805e41a:	60b9      	str	r1, [r7, #8]
 805e41c:	607a      	str	r2, [r7, #4]
 805e41e:	2300      	movs	r3, #0
 805e420:	61fb      	str	r3, [r7, #28]
 805e422:	2300      	movs	r3, #0
 805e424:	61bb      	str	r3, [r7, #24]
 805e426:	68bb      	ldr	r3, [r7, #8]
 805e428:	617b      	str	r3, [r7, #20]
 805e42a:	2300      	movs	r3, #0
 805e42c:	613b      	str	r3, [r7, #16]
 805e42e:	68fb      	ldr	r3, [r7, #12]
 805e430:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 805e434:	d91a      	bls.n	805e46c <_decode_dci_grp_rng_per_target_data_median_range_mm+0x5a>
 805e436:	f06f 0304 	mvn.w	r3, #4
 805e43a:	61fb      	str	r3, [r7, #28]
 805e43c:	e023      	b.n	805e486 <_decode_dci_grp_rng_per_target_data_median_range_mm+0x74>
 805e43e:	6979      	ldr	r1, [r7, #20]
 805e440:	2002      	movs	r0, #2
 805e442:	f7ff fcb7 	bl	805ddb4 <vl53l5_decode_int16_t>
 805e446:	4603      	mov	r3, r0
 805e448:	4619      	mov	r1, r3
 805e44a:	687a      	ldr	r2, [r7, #4]
 805e44c:	693b      	ldr	r3, [r7, #16]
 805e44e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 805e452:	005b      	lsls	r3, r3, #1
 805e454:	4413      	add	r3, r2
 805e456:	460a      	mov	r2, r1
 805e458:	809a      	strh	r2, [r3, #4]
 805e45a:	697b      	ldr	r3, [r7, #20]
 805e45c:	3302      	adds	r3, #2
 805e45e:	617b      	str	r3, [r7, #20]
 805e460:	69bb      	ldr	r3, [r7, #24]
 805e462:	3302      	adds	r3, #2
 805e464:	61bb      	str	r3, [r7, #24]
 805e466:	693b      	ldr	r3, [r7, #16]
 805e468:	3301      	adds	r3, #1
 805e46a:	613b      	str	r3, [r7, #16]
 805e46c:	69ba      	ldr	r2, [r7, #24]
 805e46e:	68fb      	ldr	r3, [r7, #12]
 805e470:	429a      	cmp	r2, r3
 805e472:	d3e4      	bcc.n	805e43e <_decode_dci_grp_rng_per_target_data_median_range_mm+0x2c>
 805e474:	68fa      	ldr	r2, [r7, #12]
 805e476:	69bb      	ldr	r3, [r7, #24]
 805e478:	429a      	cmp	r2, r3
 805e47a:	d003      	beq.n	805e484 <_decode_dci_grp_rng_per_target_data_median_range_mm+0x72>
 805e47c:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 805e480:	61fb      	str	r3, [r7, #28]
 805e482:	e000      	b.n	805e486 <_decode_dci_grp_rng_per_target_data_median_range_mm+0x74>
 805e484:	bf00      	nop
 805e486:	69fb      	ldr	r3, [r7, #28]
 805e488:	4618      	mov	r0, r3
 805e48a:	3720      	adds	r7, #32
 805e48c:	46bd      	mov	sp, r7
 805e48e:	bd80      	pop	{r7, pc}

0805e490 <_decode_dci_grp_rng_per_target_data_target_status>:
 805e490:	b580      	push	{r7, lr}
 805e492:	b088      	sub	sp, #32
 805e494:	af00      	add	r7, sp, #0
 805e496:	60f8      	str	r0, [r7, #12]
 805e498:	60b9      	str	r1, [r7, #8]
 805e49a:	607a      	str	r2, [r7, #4]
 805e49c:	2300      	movs	r3, #0
 805e49e:	61fb      	str	r3, [r7, #28]
 805e4a0:	2300      	movs	r3, #0
 805e4a2:	61bb      	str	r3, [r7, #24]
 805e4a4:	68bb      	ldr	r3, [r7, #8]
 805e4a6:	617b      	str	r3, [r7, #20]
 805e4a8:	2300      	movs	r3, #0
 805e4aa:	613b      	str	r3, [r7, #16]
 805e4ac:	68fb      	ldr	r3, [r7, #12]
 805e4ae:	2b82      	cmp	r3, #130	; 0x82
 805e4b0:	d919      	bls.n	805e4e6 <_decode_dci_grp_rng_per_target_data_target_status+0x56>
 805e4b2:	f06f 0304 	mvn.w	r3, #4
 805e4b6:	61fb      	str	r3, [r7, #28]
 805e4b8:	e022      	b.n	805e500 <_decode_dci_grp_rng_per_target_data_target_status+0x70>
 805e4ba:	6979      	ldr	r1, [r7, #20]
 805e4bc:	2001      	movs	r0, #1
 805e4be:	f7ff fc3c 	bl	805dd3a <vl53l5_decode_uint8_t>
 805e4c2:	4603      	mov	r3, r0
 805e4c4:	4619      	mov	r1, r3
 805e4c6:	687a      	ldr	r2, [r7, #4]
 805e4c8:	693b      	ldr	r3, [r7, #16]
 805e4ca:	4413      	add	r3, r2
 805e4cc:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 805e4d0:	460a      	mov	r2, r1
 805e4d2:	701a      	strb	r2, [r3, #0]
 805e4d4:	697b      	ldr	r3, [r7, #20]
 805e4d6:	3301      	adds	r3, #1
 805e4d8:	617b      	str	r3, [r7, #20]
 805e4da:	69bb      	ldr	r3, [r7, #24]
 805e4dc:	3301      	adds	r3, #1
 805e4de:	61bb      	str	r3, [r7, #24]
 805e4e0:	693b      	ldr	r3, [r7, #16]
 805e4e2:	3301      	adds	r3, #1
 805e4e4:	613b      	str	r3, [r7, #16]
 805e4e6:	69ba      	ldr	r2, [r7, #24]
 805e4e8:	68fb      	ldr	r3, [r7, #12]
 805e4ea:	429a      	cmp	r2, r3
 805e4ec:	d3e5      	bcc.n	805e4ba <_decode_dci_grp_rng_per_target_data_target_status+0x2a>
 805e4ee:	68fa      	ldr	r2, [r7, #12]
 805e4f0:	69bb      	ldr	r3, [r7, #24]
 805e4f2:	429a      	cmp	r2, r3
 805e4f4:	d003      	beq.n	805e4fe <_decode_dci_grp_rng_per_target_data_target_status+0x6e>
 805e4f6:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 805e4fa:	61fb      	str	r3, [r7, #28]
 805e4fc:	e000      	b.n	805e500 <_decode_dci_grp_rng_per_target_data_target_status+0x70>
 805e4fe:	bf00      	nop
 805e500:	69fb      	ldr	r3, [r7, #28]
 805e502:	4618      	mov	r0, r3
 805e504:	3720      	adds	r7, #32
 805e506:	46bd      	mov	sp, r7
 805e508:	bd80      	pop	{r7, pc}

0805e50a <_decode_ztsa_zone_thresh_status_bytes>:
 805e50a:	b580      	push	{r7, lr}
 805e50c:	b088      	sub	sp, #32
 805e50e:	af00      	add	r7, sp, #0
 805e510:	60f8      	str	r0, [r7, #12]
 805e512:	60b9      	str	r1, [r7, #8]
 805e514:	607a      	str	r2, [r7, #4]
 805e516:	2300      	movs	r3, #0
 805e518:	61fb      	str	r3, [r7, #28]
 805e51a:	2300      	movs	r3, #0
 805e51c:	61bb      	str	r3, [r7, #24]
 805e51e:	68bb      	ldr	r3, [r7, #8]
 805e520:	617b      	str	r3, [r7, #20]
 805e522:	2300      	movs	r3, #0
 805e524:	613b      	str	r3, [r7, #16]
 805e526:	68fb      	ldr	r3, [r7, #12]
 805e528:	2b08      	cmp	r3, #8
 805e52a:	d917      	bls.n	805e55c <_decode_ztsa_zone_thresh_status_bytes+0x52>
 805e52c:	f06f 0304 	mvn.w	r3, #4
 805e530:	61fb      	str	r3, [r7, #28]
 805e532:	e020      	b.n	805e576 <_decode_ztsa_zone_thresh_status_bytes+0x6c>
 805e534:	6979      	ldr	r1, [r7, #20]
 805e536:	2001      	movs	r0, #1
 805e538:	f7ff fbff 	bl	805dd3a <vl53l5_decode_uint8_t>
 805e53c:	4603      	mov	r3, r0
 805e53e:	4619      	mov	r1, r3
 805e540:	687a      	ldr	r2, [r7, #4]
 805e542:	693b      	ldr	r3, [r7, #16]
 805e544:	4413      	add	r3, r2
 805e546:	460a      	mov	r2, r1
 805e548:	701a      	strb	r2, [r3, #0]
 805e54a:	697b      	ldr	r3, [r7, #20]
 805e54c:	3301      	adds	r3, #1
 805e54e:	617b      	str	r3, [r7, #20]
 805e550:	69bb      	ldr	r3, [r7, #24]
 805e552:	3301      	adds	r3, #1
 805e554:	61bb      	str	r3, [r7, #24]
 805e556:	693b      	ldr	r3, [r7, #16]
 805e558:	3301      	adds	r3, #1
 805e55a:	613b      	str	r3, [r7, #16]
 805e55c:	69ba      	ldr	r2, [r7, #24]
 805e55e:	68fb      	ldr	r3, [r7, #12]
 805e560:	429a      	cmp	r2, r3
 805e562:	d3e7      	bcc.n	805e534 <_decode_ztsa_zone_thresh_status_bytes+0x2a>
 805e564:	68fa      	ldr	r2, [r7, #12]
 805e566:	69bb      	ldr	r3, [r7, #24]
 805e568:	429a      	cmp	r2, r3
 805e56a:	d003      	beq.n	805e574 <_decode_ztsa_zone_thresh_status_bytes+0x6a>
 805e56c:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 805e570:	61fb      	str	r3, [r7, #28]
 805e572:	e000      	b.n	805e576 <_decode_ztsa_zone_thresh_status_bytes+0x6c>
 805e574:	bf00      	nop
 805e576:	69fb      	ldr	r3, [r7, #28]
 805e578:	4618      	mov	r0, r3
 805e57a:	3720      	adds	r7, #32
 805e57c:	46bd      	mov	sp, r7
 805e57e:	bd80      	pop	{r7, pc}

0805e580 <_decode_dci_grp_dyn_xtalk_persistent_data>:
 805e580:	b580      	push	{r7, lr}
 805e582:	b088      	sub	sp, #32
 805e584:	af00      	add	r7, sp, #0
 805e586:	60f8      	str	r0, [r7, #12]
 805e588:	60b9      	str	r1, [r7, #8]
 805e58a:	607a      	str	r2, [r7, #4]
 805e58c:	2300      	movs	r3, #0
 805e58e:	61fb      	str	r3, [r7, #28]
 805e590:	2300      	movs	r3, #0
 805e592:	61bb      	str	r3, [r7, #24]
 805e594:	68bb      	ldr	r3, [r7, #8]
 805e596:	617b      	str	r3, [r7, #20]
 805e598:	68fb      	ldr	r3, [r7, #12]
 805e59a:	2b1c      	cmp	r3, #28
 805e59c:	d903      	bls.n	805e5a6 <_decode_dci_grp_dyn_xtalk_persistent_data+0x26>
 805e59e:	f06f 0304 	mvn.w	r3, #4
 805e5a2:	61fb      	str	r3, [r7, #28]
 805e5a4:	e09d      	b.n	805e6e2 <_decode_dci_grp_dyn_xtalk_persistent_data+0x162>
 805e5a6:	6979      	ldr	r1, [r7, #20]
 805e5a8:	2004      	movs	r0, #4
 805e5aa:	f7ff fc7d 	bl	805dea8 <vl53l5_decode_uint32_t>
 805e5ae:	4602      	mov	r2, r0
 805e5b0:	687b      	ldr	r3, [r7, #4]
 805e5b2:	601a      	str	r2, [r3, #0]
 805e5b4:	697b      	ldr	r3, [r7, #20]
 805e5b6:	3304      	adds	r3, #4
 805e5b8:	617b      	str	r3, [r7, #20]
 805e5ba:	69bb      	ldr	r3, [r7, #24]
 805e5bc:	3304      	adds	r3, #4
 805e5be:	61bb      	str	r3, [r7, #24]
 805e5c0:	6979      	ldr	r1, [r7, #20]
 805e5c2:	2004      	movs	r0, #4
 805e5c4:	f7ff fc70 	bl	805dea8 <vl53l5_decode_uint32_t>
 805e5c8:	4602      	mov	r2, r0
 805e5ca:	687b      	ldr	r3, [r7, #4]
 805e5cc:	605a      	str	r2, [r3, #4]
 805e5ce:	697b      	ldr	r3, [r7, #20]
 805e5d0:	3304      	adds	r3, #4
 805e5d2:	617b      	str	r3, [r7, #20]
 805e5d4:	69bb      	ldr	r3, [r7, #24]
 805e5d6:	3304      	adds	r3, #4
 805e5d8:	61bb      	str	r3, [r7, #24]
 805e5da:	6979      	ldr	r1, [r7, #20]
 805e5dc:	2004      	movs	r0, #4
 805e5de:	f7ff fc63 	bl	805dea8 <vl53l5_decode_uint32_t>
 805e5e2:	4602      	mov	r2, r0
 805e5e4:	687b      	ldr	r3, [r7, #4]
 805e5e6:	609a      	str	r2, [r3, #8]
 805e5e8:	697b      	ldr	r3, [r7, #20]
 805e5ea:	3304      	adds	r3, #4
 805e5ec:	617b      	str	r3, [r7, #20]
 805e5ee:	69bb      	ldr	r3, [r7, #24]
 805e5f0:	3304      	adds	r3, #4
 805e5f2:	61bb      	str	r3, [r7, #24]
 805e5f4:	6979      	ldr	r1, [r7, #20]
 805e5f6:	2004      	movs	r0, #4
 805e5f8:	f7ff fc08 	bl	805de0c <vl53l5_decode_int32_t>
 805e5fc:	4602      	mov	r2, r0
 805e5fe:	687b      	ldr	r3, [r7, #4]
 805e600:	60da      	str	r2, [r3, #12]
 805e602:	697b      	ldr	r3, [r7, #20]
 805e604:	3304      	adds	r3, #4
 805e606:	617b      	str	r3, [r7, #20]
 805e608:	69bb      	ldr	r3, [r7, #24]
 805e60a:	3304      	adds	r3, #4
 805e60c:	61bb      	str	r3, [r7, #24]
 805e60e:	6979      	ldr	r1, [r7, #20]
 805e610:	2004      	movs	r0, #4
 805e612:	f7ff fbfb 	bl	805de0c <vl53l5_decode_int32_t>
 805e616:	4602      	mov	r2, r0
 805e618:	687b      	ldr	r3, [r7, #4]
 805e61a:	611a      	str	r2, [r3, #16]
 805e61c:	697b      	ldr	r3, [r7, #20]
 805e61e:	3304      	adds	r3, #4
 805e620:	617b      	str	r3, [r7, #20]
 805e622:	69bb      	ldr	r3, [r7, #24]
 805e624:	3304      	adds	r3, #4
 805e626:	61bb      	str	r3, [r7, #24]
 805e628:	6979      	ldr	r1, [r7, #20]
 805e62a:	2002      	movs	r0, #2
 805e62c:	f7ff fba2 	bl	805dd74 <vl53l5_decode_uint16_t>
 805e630:	4603      	mov	r3, r0
 805e632:	461a      	mov	r2, r3
 805e634:	687b      	ldr	r3, [r7, #4]
 805e636:	829a      	strh	r2, [r3, #20]
 805e638:	697b      	ldr	r3, [r7, #20]
 805e63a:	3302      	adds	r3, #2
 805e63c:	617b      	str	r3, [r7, #20]
 805e63e:	69bb      	ldr	r3, [r7, #24]
 805e640:	3302      	adds	r3, #2
 805e642:	61bb      	str	r3, [r7, #24]
 805e644:	6979      	ldr	r1, [r7, #20]
 805e646:	2002      	movs	r0, #2
 805e648:	f7ff fb94 	bl	805dd74 <vl53l5_decode_uint16_t>
 805e64c:	4603      	mov	r3, r0
 805e64e:	461a      	mov	r2, r3
 805e650:	687b      	ldr	r3, [r7, #4]
 805e652:	82da      	strh	r2, [r3, #22]
 805e654:	697b      	ldr	r3, [r7, #20]
 805e656:	3302      	adds	r3, #2
 805e658:	617b      	str	r3, [r7, #20]
 805e65a:	69bb      	ldr	r3, [r7, #24]
 805e65c:	3302      	adds	r3, #2
 805e65e:	61bb      	str	r3, [r7, #24]
 805e660:	6979      	ldr	r1, [r7, #20]
 805e662:	2001      	movs	r0, #1
 805e664:	f7ff fb69 	bl	805dd3a <vl53l5_decode_uint8_t>
 805e668:	4603      	mov	r3, r0
 805e66a:	461a      	mov	r2, r3
 805e66c:	687b      	ldr	r3, [r7, #4]
 805e66e:	761a      	strb	r2, [r3, #24]
 805e670:	697b      	ldr	r3, [r7, #20]
 805e672:	3301      	adds	r3, #1
 805e674:	617b      	str	r3, [r7, #20]
 805e676:	69bb      	ldr	r3, [r7, #24]
 805e678:	3301      	adds	r3, #1
 805e67a:	61bb      	str	r3, [r7, #24]
 805e67c:	6979      	ldr	r1, [r7, #20]
 805e67e:	2001      	movs	r0, #1
 805e680:	f7ff fb5b 	bl	805dd3a <vl53l5_decode_uint8_t>
 805e684:	4603      	mov	r3, r0
 805e686:	461a      	mov	r2, r3
 805e688:	687b      	ldr	r3, [r7, #4]
 805e68a:	765a      	strb	r2, [r3, #25]
 805e68c:	697b      	ldr	r3, [r7, #20]
 805e68e:	3301      	adds	r3, #1
 805e690:	617b      	str	r3, [r7, #20]
 805e692:	69bb      	ldr	r3, [r7, #24]
 805e694:	3301      	adds	r3, #1
 805e696:	61bb      	str	r3, [r7, #24]
 805e698:	6979      	ldr	r1, [r7, #20]
 805e69a:	2001      	movs	r0, #1
 805e69c:	f7ff fb4d 	bl	805dd3a <vl53l5_decode_uint8_t>
 805e6a0:	4603      	mov	r3, r0
 805e6a2:	461a      	mov	r2, r3
 805e6a4:	687b      	ldr	r3, [r7, #4]
 805e6a6:	769a      	strb	r2, [r3, #26]
 805e6a8:	697b      	ldr	r3, [r7, #20]
 805e6aa:	3301      	adds	r3, #1
 805e6ac:	617b      	str	r3, [r7, #20]
 805e6ae:	69bb      	ldr	r3, [r7, #24]
 805e6b0:	3301      	adds	r3, #1
 805e6b2:	61bb      	str	r3, [r7, #24]
 805e6b4:	6979      	ldr	r1, [r7, #20]
 805e6b6:	2001      	movs	r0, #1
 805e6b8:	f7ff fb3f 	bl	805dd3a <vl53l5_decode_uint8_t>
 805e6bc:	4603      	mov	r3, r0
 805e6be:	461a      	mov	r2, r3
 805e6c0:	687b      	ldr	r3, [r7, #4]
 805e6c2:	76da      	strb	r2, [r3, #27]
 805e6c4:	697b      	ldr	r3, [r7, #20]
 805e6c6:	3301      	adds	r3, #1
 805e6c8:	617b      	str	r3, [r7, #20]
 805e6ca:	69bb      	ldr	r3, [r7, #24]
 805e6cc:	3301      	adds	r3, #1
 805e6ce:	61bb      	str	r3, [r7, #24]
 805e6d0:	68fa      	ldr	r2, [r7, #12]
 805e6d2:	69bb      	ldr	r3, [r7, #24]
 805e6d4:	429a      	cmp	r2, r3
 805e6d6:	d003      	beq.n	805e6e0 <_decode_dci_grp_dyn_xtalk_persistent_data+0x160>
 805e6d8:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 805e6dc:	61fb      	str	r3, [r7, #28]
 805e6de:	e000      	b.n	805e6e2 <_decode_dci_grp_dyn_xtalk_persistent_data+0x162>
 805e6e0:	bf00      	nop
 805e6e2:	69fb      	ldr	r3, [r7, #28]
 805e6e4:	4618      	mov	r0, r3
 805e6e6:	3720      	adds	r7, #32
 805e6e8:	46bd      	mov	sp, r7
 805e6ea:	bd80      	pop	{r7, pc}

0805e6ec <vl53l5_results_decode_cmd>:
 805e6ec:	b580      	push	{r7, lr}
 805e6ee:	b086      	sub	sp, #24
 805e6f0:	af00      	add	r7, sp, #0
 805e6f2:	60b9      	str	r1, [r7, #8]
 805e6f4:	607a      	str	r2, [r7, #4]
 805e6f6:	603b      	str	r3, [r7, #0]
 805e6f8:	4603      	mov	r3, r0
 805e6fa:	81fb      	strh	r3, [r7, #14]
 805e6fc:	2300      	movs	r3, #0
 805e6fe:	617b      	str	r3, [r7, #20]
 805e700:	89fb      	ldrh	r3, [r7, #14]
 805e702:	f645 522c 	movw	r2, #23852	; 0x5d2c
 805e706:	4293      	cmp	r3, r2
 805e708:	d06c      	beq.n	805e7e4 <vl53l5_results_decode_cmd+0xf8>
 805e70a:	f645 522c 	movw	r2, #23852	; 0x5d2c
 805e70e:	4293      	cmp	r3, r2
 805e710:	dc19      	bgt.n	805e746 <vl53l5_results_decode_cmd+0x5a>
 805e712:	f645 12ec 	movw	r2, #23020	; 0x59ec
 805e716:	4293      	cmp	r3, r2
 805e718:	d046      	beq.n	805e7a8 <vl53l5_results_decode_cmd+0xbc>
 805e71a:	f645 12ec 	movw	r2, #23020	; 0x59ec
 805e71e:	4293      	cmp	r3, r2
 805e720:	dc08      	bgt.n	805e734 <vl53l5_results_decode_cmd+0x48>
 805e722:	f645 12d0 	movw	r2, #22992	; 0x59d0
 805e726:	4293      	cmp	r3, r2
 805e728:	d02b      	beq.n	805e782 <vl53l5_results_decode_cmd+0x96>
 805e72a:	f645 12dc 	movw	r2, #23004	; 0x59dc
 805e72e:	4293      	cmp	r3, r2
 805e730:	d030      	beq.n	805e794 <vl53l5_results_decode_cmd+0xa8>
 805e732:	e0a3      	b.n	805e87c <vl53l5_results_decode_cmd+0x190>
 805e734:	f645 32ec 	movw	r2, #23532	; 0x5bec
 805e738:	4293      	cmp	r3, r2
 805e73a:	d03f      	beq.n	805e7bc <vl53l5_results_decode_cmd+0xd0>
 805e73c:	f645 42ec 	movw	r2, #23788	; 0x5cec
 805e740:	4293      	cmp	r3, r2
 805e742:	d045      	beq.n	805e7d0 <vl53l5_results_decode_cmd+0xe4>
 805e744:	e09a      	b.n	805e87c <vl53l5_results_decode_cmd+0x190>
 805e746:	f646 32ac 	movw	r2, #27564	; 0x6bac
 805e74a:	4293      	cmp	r3, r2
 805e74c:	d06a      	beq.n	805e824 <vl53l5_results_decode_cmd+0x138>
 805e74e:	f646 32ac 	movw	r2, #27564	; 0x6bac
 805e752:	4293      	cmp	r3, r2
 805e754:	dc08      	bgt.n	805e768 <vl53l5_results_decode_cmd+0x7c>
 805e756:	f645 52ac 	movw	r2, #23980	; 0x5dac
 805e75a:	4293      	cmp	r3, r2
 805e75c:	d04c      	beq.n	805e7f8 <vl53l5_results_decode_cmd+0x10c>
 805e75e:	f646 12ac 	movw	r2, #27052	; 0x69ac
 805e762:	4293      	cmp	r3, r2
 805e764:	d053      	beq.n	805e80e <vl53l5_results_decode_cmd+0x122>
 805e766:	e089      	b.n	805e87c <vl53l5_results_decode_cmd+0x190>
 805e768:	f24a 3234 	movw	r2, #41780	; 0xa334
 805e76c:	4293      	cmp	r3, r2
 805e76e:	d06f      	beq.n	805e850 <vl53l5_results_decode_cmd+0x164>
 805e770:	f24a 323c 	movw	r2, #41788	; 0xa33c
 805e774:	4293      	cmp	r3, r2
 805e776:	d076      	beq.n	805e866 <vl53l5_results_decode_cmd+0x17a>
 805e778:	f247 02ac 	movw	r2, #28844	; 0x70ac
 805e77c:	4293      	cmp	r3, r2
 805e77e:	d05c      	beq.n	805e83a <vl53l5_results_decode_cmd+0x14e>
 805e780:	e07c      	b.n	805e87c <vl53l5_results_decode_cmd+0x190>
 805e782:	683b      	ldr	r3, [r7, #0]
 805e784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 805e786:	461a      	mov	r2, r3
 805e788:	6879      	ldr	r1, [r7, #4]
 805e78a:	68b8      	ldr	r0, [r7, #8]
 805e78c:	f7ff fbf0 	bl	805df70 <_decode_dci_grp_buf_meta_data>
 805e790:	6178      	str	r0, [r7, #20]
 805e792:	e077      	b.n	805e884 <vl53l5_results_decode_cmd+0x198>
 805e794:	683b      	ldr	r3, [r7, #0]
 805e796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 805e798:	330c      	adds	r3, #12
 805e79a:	461a      	mov	r2, r3
 805e79c:	6879      	ldr	r1, [r7, #4]
 805e79e:	68b8      	ldr	r0, [r7, #8]
 805e7a0:	f7ff fc84 	bl	805e0ac <_decode_dci_grp_rng_common_data>
 805e7a4:	6178      	str	r0, [r7, #20]
 805e7a6:	e06d      	b.n	805e884 <vl53l5_results_decode_cmd+0x198>
 805e7a8:	683b      	ldr	r3, [r7, #0]
 805e7aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 805e7ac:	3310      	adds	r3, #16
 805e7ae:	461a      	mov	r2, r3
 805e7b0:	6879      	ldr	r1, [r7, #4]
 805e7b2:	68b8      	ldr	r0, [r7, #8]
 805e7b4:	f7ff fcc5 	bl	805e142 <_decode_dci_grp_rng_per_zone_data_amb_rate_kcps_per_spad>
 805e7b8:	6178      	str	r0, [r7, #20]
 805e7ba:	e063      	b.n	805e884 <vl53l5_results_decode_cmd+0x198>
 805e7bc:	683b      	ldr	r3, [r7, #0]
 805e7be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 805e7c0:	3310      	adds	r3, #16
 805e7c2:	461a      	mov	r2, r3
 805e7c4:	6879      	ldr	r1, [r7, #4]
 805e7c6:	68b8      	ldr	r0, [r7, #8]
 805e7c8:	f7ff fcf5 	bl	805e1b6 <_decode_dci_grp_rng_per_zone_data_amb_dmax_mm>
 805e7cc:	6178      	str	r0, [r7, #20]
 805e7ce:	e059      	b.n	805e884 <vl53l5_results_decode_cmd+0x198>
 805e7d0:	683b      	ldr	r3, [r7, #0]
 805e7d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 805e7d4:	3310      	adds	r3, #16
 805e7d6:	461a      	mov	r2, r3
 805e7d8:	6879      	ldr	r1, [r7, #4]
 805e7da:	68b8      	ldr	r0, [r7, #8]
 805e7dc:	f7ff fd28 	bl	805e230 <_decode_dci_grp_rng_per_zone_data_rng_no_of_targets>
 805e7e0:	6178      	str	r0, [r7, #20]
 805e7e2:	e04f      	b.n	805e884 <vl53l5_results_decode_cmd+0x198>
 805e7e4:	683b      	ldr	r3, [r7, #0]
 805e7e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 805e7e8:	3310      	adds	r3, #16
 805e7ea:	461a      	mov	r2, r3
 805e7ec:	6879      	ldr	r1, [r7, #4]
 805e7ee:	68b8      	ldr	r0, [r7, #8]
 805e7f0:	f7ff fd5b 	bl	805e2aa <_decode_dci_grp_rng_per_zone_data_rng_zone_id>
 805e7f4:	6178      	str	r0, [r7, #20]
 805e7f6:	e045      	b.n	805e884 <vl53l5_results_decode_cmd+0x198>
 805e7f8:	683b      	ldr	r3, [r7, #0]
 805e7fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 805e7fc:	f503 7306 	add.w	r3, r3, #536	; 0x218
 805e800:	461a      	mov	r2, r3
 805e802:	6879      	ldr	r1, [r7, #4]
 805e804:	68b8      	ldr	r0, [r7, #8]
 805e806:	f7ff fd8d 	bl	805e324 <_decode_dci_grp_rng_per_target_data_peak_rate_kcps_per_spad>
 805e80a:	6178      	str	r0, [r7, #20]
 805e80c:	e03a      	b.n	805e884 <vl53l5_results_decode_cmd+0x198>
 805e80e:	683b      	ldr	r3, [r7, #0]
 805e810:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 805e812:	f503 7306 	add.w	r3, r3, #536	; 0x218
 805e816:	461a      	mov	r2, r3
 805e818:	6879      	ldr	r1, [r7, #4]
 805e81a:	68b8      	ldr	r0, [r7, #8]
 805e81c:	f7ff fdbc 	bl	805e398 <_decode_dci_grp_rng_per_target_data_range_sigma_mm>
 805e820:	6178      	str	r0, [r7, #20]
 805e822:	e02f      	b.n	805e884 <vl53l5_results_decode_cmd+0x198>
 805e824:	683b      	ldr	r3, [r7, #0]
 805e826:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 805e828:	f503 7306 	add.w	r3, r3, #536	; 0x218
 805e82c:	461a      	mov	r2, r3
 805e82e:	6879      	ldr	r1, [r7, #4]
 805e830:	68b8      	ldr	r0, [r7, #8]
 805e832:	f7ff fdee 	bl	805e412 <_decode_dci_grp_rng_per_target_data_median_range_mm>
 805e836:	6178      	str	r0, [r7, #20]
 805e838:	e024      	b.n	805e884 <vl53l5_results_decode_cmd+0x198>
 805e83a:	683b      	ldr	r3, [r7, #0]
 805e83c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 805e83e:	f503 7306 	add.w	r3, r3, #536	; 0x218
 805e842:	461a      	mov	r2, r3
 805e844:	6879      	ldr	r1, [r7, #4]
 805e846:	68b8      	ldr	r0, [r7, #8]
 805e848:	f7ff fe22 	bl	805e490 <_decode_dci_grp_rng_per_target_data_target_status>
 805e84c:	6178      	str	r0, [r7, #20]
 805e84e:	e019      	b.n	805e884 <vl53l5_results_decode_cmd+0x198>
 805e850:	683b      	ldr	r3, [r7, #0]
 805e852:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 805e854:	f203 63ac 	addw	r3, r3, #1708	; 0x6ac
 805e858:	461a      	mov	r2, r3
 805e85a:	6879      	ldr	r1, [r7, #4]
 805e85c:	68b8      	ldr	r0, [r7, #8]
 805e85e:	f7ff fe54 	bl	805e50a <_decode_ztsa_zone_thresh_status_bytes>
 805e862:	6178      	str	r0, [r7, #20]
 805e864:	e00e      	b.n	805e884 <vl53l5_results_decode_cmd+0x198>
 805e866:	683b      	ldr	r3, [r7, #0]
 805e868:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 805e86a:	f203 63b4 	addw	r3, r3, #1716	; 0x6b4
 805e86e:	461a      	mov	r2, r3
 805e870:	6879      	ldr	r1, [r7, #4]
 805e872:	68b8      	ldr	r0, [r7, #8]
 805e874:	f7ff fe84 	bl	805e580 <_decode_dci_grp_dyn_xtalk_persistent_data>
 805e878:	6178      	str	r0, [r7, #20]
 805e87a:	e003      	b.n	805e884 <vl53l5_results_decode_cmd+0x198>
 805e87c:	f06f 0308 	mvn.w	r3, #8
 805e880:	617b      	str	r3, [r7, #20]
 805e882:	bf00      	nop
 805e884:	697b      	ldr	r3, [r7, #20]
 805e886:	4618      	mov	r0, r3
 805e888:	3718      	adds	r7, #24
 805e88a:	46bd      	mov	sp, r7
 805e88c:	bd80      	pop	{r7, pc}
	...

0805e890 <SPIx_WriteRead>:
 805e890:	b580      	push	{r7, lr}
 805e892:	b086      	sub	sp, #24
 805e894:	af02      	add	r7, sp, #8
 805e896:	6078      	str	r0, [r7, #4]
 805e898:	460b      	mov	r3, r1
 805e89a:	70fb      	strb	r3, [r7, #3]
 805e89c:	4b0a      	ldr	r3, [pc, #40]	; (805e8c8 <SPIx_WriteRead+0x38>)
 805e89e:	681b      	ldr	r3, [r3, #0]
 805e8a0:	f107 020f 	add.w	r2, r7, #15
 805e8a4:	1cf9      	adds	r1, r7, #3
 805e8a6:	9300      	str	r3, [sp, #0]
 805e8a8:	2301      	movs	r3, #1
 805e8aa:	6878      	ldr	r0, [r7, #4]
 805e8ac:	f7f5 f87f 	bl	80539ae <HAL_SPI_TransmitReceive>
 805e8b0:	4603      	mov	r3, r0
 805e8b2:	2b00      	cmp	r3, #0
 805e8b4:	d002      	beq.n	805e8bc <SPIx_WriteRead+0x2c>
 805e8b6:	4805      	ldr	r0, [pc, #20]	; (805e8cc <SPIx_WriteRead+0x3c>)
 805e8b8:	f002 f8f8 	bl	8060aac <puts>
 805e8bc:	7bfb      	ldrb	r3, [r7, #15]
 805e8be:	4618      	mov	r0, r3
 805e8c0:	3710      	adds	r7, #16
 805e8c2:	46bd      	mov	sp, r7
 805e8c4:	bd80      	pop	{r7, pc}
 805e8c6:	bf00      	nop
 805e8c8:	20007cbc 	.word	0x20007cbc
 805e8cc:	08067798 	.word	0x08067798

0805e8d0 <BSP_SPI_Set_CS>:
 805e8d0:	b580      	push	{r7, lr}
 805e8d2:	b082      	sub	sp, #8
 805e8d4:	af00      	add	r7, sp, #0
 805e8d6:	6078      	str	r0, [r7, #4]
 805e8d8:	460b      	mov	r3, r1
 805e8da:	807b      	strh	r3, [r7, #2]
 805e8dc:	4613      	mov	r3, r2
 805e8de:	707b      	strb	r3, [r7, #1]
 805e8e0:	8879      	ldrh	r1, [r7, #2]
 805e8e2:	787b      	ldrb	r3, [r7, #1]
 805e8e4:	2b01      	cmp	r3, #1
 805e8e6:	bf14      	ite	ne
 805e8e8:	2301      	movne	r3, #1
 805e8ea:	2300      	moveq	r3, #0
 805e8ec:	b2db      	uxtb	r3, r3
 805e8ee:	461a      	mov	r2, r3
 805e8f0:	6878      	ldr	r0, [r7, #4]
 805e8f2:	f7f2 fec9 	bl	8051688 <HAL_GPIO_WritePin>
 805e8f6:	bf00      	nop
 805e8f8:	3708      	adds	r7, #8
 805e8fa:	46bd      	mov	sp, r7
 805e8fc:	bd80      	pop	{r7, pc}

0805e8fe <BSP_SPI_16M_Write_Sequence>:
 805e8fe:	b580      	push	{r7, lr}
 805e900:	b086      	sub	sp, #24
 805e902:	af00      	add	r7, sp, #0
 805e904:	60f8      	str	r0, [r7, #12]
 805e906:	60b9      	str	r1, [r7, #8]
 805e908:	607a      	str	r2, [r7, #4]
 805e90a:	807b      	strh	r3, [r7, #2]
 805e90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 805e90e:	617b      	str	r3, [r7, #20]
 805e910:	687b      	ldr	r3, [r7, #4]
 805e912:	881b      	ldrh	r3, [r3, #0]
 805e914:	2201      	movs	r2, #1
 805e916:	4619      	mov	r1, r3
 805e918:	68b8      	ldr	r0, [r7, #8]
 805e91a:	f7ff ffd9 	bl	805e8d0 <BSP_SPI_Set_CS>
 805e91e:	887a      	ldrh	r2, [r7, #2]
 805e920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 805e922:	4413      	add	r3, r2
 805e924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 805e928:	d304      	bcc.n	805e934 <BSP_SPI_16M_Write_Sequence+0x36>
 805e92a:	887b      	ldrh	r3, [r7, #2]
 805e92c:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 805e930:	33ff      	adds	r3, #255	; 0xff
 805e932:	617b      	str	r3, [r7, #20]
 805e934:	887b      	ldrh	r3, [r7, #2]
 805e936:	0a1b      	lsrs	r3, r3, #8
 805e938:	b29b      	uxth	r3, r3
 805e93a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 805e93e:	b29b      	uxth	r3, r3
 805e940:	b2db      	uxtb	r3, r3
 805e942:	4619      	mov	r1, r3
 805e944:	68f8      	ldr	r0, [r7, #12]
 805e946:	f7ff ffa3 	bl	805e890 <SPIx_WriteRead>
 805e94a:	887b      	ldrh	r3, [r7, #2]
 805e94c:	b2db      	uxtb	r3, r3
 805e94e:	4619      	mov	r1, r3
 805e950:	68f8      	ldr	r0, [r7, #12]
 805e952:	f7ff ff9d 	bl	805e890 <SPIx_WriteRead>
 805e956:	887b      	ldrh	r3, [r7, #2]
 805e958:	827b      	strh	r3, [r7, #18]
 805e95a:	e00a      	b.n	805e972 <BSP_SPI_16M_Write_Sequence+0x74>
 805e95c:	6a3b      	ldr	r3, [r7, #32]
 805e95e:	1c5a      	adds	r2, r3, #1
 805e960:	623a      	str	r2, [r7, #32]
 805e962:	781b      	ldrb	r3, [r3, #0]
 805e964:	4619      	mov	r1, r3
 805e966:	68f8      	ldr	r0, [r7, #12]
 805e968:	f7ff ff92 	bl	805e890 <SPIx_WriteRead>
 805e96c:	8a7b      	ldrh	r3, [r7, #18]
 805e96e:	3301      	adds	r3, #1
 805e970:	827b      	strh	r3, [r7, #18]
 805e972:	8a7a      	ldrh	r2, [r7, #18]
 805e974:	8879      	ldrh	r1, [r7, #2]
 805e976:	697b      	ldr	r3, [r7, #20]
 805e978:	440b      	add	r3, r1
 805e97a:	429a      	cmp	r2, r3
 805e97c:	d3ee      	bcc.n	805e95c <BSP_SPI_16M_Write_Sequence+0x5e>
 805e97e:	687b      	ldr	r3, [r7, #4]
 805e980:	881b      	ldrh	r3, [r3, #0]
 805e982:	2200      	movs	r2, #0
 805e984:	4619      	mov	r1, r3
 805e986:	68b8      	ldr	r0, [r7, #8]
 805e988:	f7ff ffa2 	bl	805e8d0 <BSP_SPI_Set_CS>
 805e98c:	2300      	movs	r3, #0
 805e98e:	4618      	mov	r0, r3
 805e990:	3718      	adds	r7, #24
 805e992:	46bd      	mov	sp, r7
 805e994:	bd80      	pop	{r7, pc}

0805e996 <BSP_SPI_16M_Read_Sequence>:
 805e996:	b590      	push	{r4, r7, lr}
 805e998:	b087      	sub	sp, #28
 805e99a:	af00      	add	r7, sp, #0
 805e99c:	60f8      	str	r0, [r7, #12]
 805e99e:	60b9      	str	r1, [r7, #8]
 805e9a0:	607a      	str	r2, [r7, #4]
 805e9a2:	807b      	strh	r3, [r7, #2]
 805e9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 805e9a6:	617b      	str	r3, [r7, #20]
 805e9a8:	687b      	ldr	r3, [r7, #4]
 805e9aa:	881b      	ldrh	r3, [r3, #0]
 805e9ac:	2201      	movs	r2, #1
 805e9ae:	4619      	mov	r1, r3
 805e9b0:	68b8      	ldr	r0, [r7, #8]
 805e9b2:	f7ff ff8d 	bl	805e8d0 <BSP_SPI_Set_CS>
 805e9b6:	887a      	ldrh	r2, [r7, #2]
 805e9b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 805e9ba:	4413      	add	r3, r2
 805e9bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 805e9c0:	d304      	bcc.n	805e9cc <BSP_SPI_16M_Read_Sequence+0x36>
 805e9c2:	887b      	ldrh	r3, [r7, #2]
 805e9c4:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 805e9c8:	33ff      	adds	r3, #255	; 0xff
 805e9ca:	617b      	str	r3, [r7, #20]
 805e9cc:	887b      	ldrh	r3, [r7, #2]
 805e9ce:	0a1b      	lsrs	r3, r3, #8
 805e9d0:	b2db      	uxtb	r3, r3
 805e9d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 805e9d6:	b2db      	uxtb	r3, r3
 805e9d8:	4619      	mov	r1, r3
 805e9da:	68f8      	ldr	r0, [r7, #12]
 805e9dc:	f7ff ff58 	bl	805e890 <SPIx_WriteRead>
 805e9e0:	887b      	ldrh	r3, [r7, #2]
 805e9e2:	b2db      	uxtb	r3, r3
 805e9e4:	4619      	mov	r1, r3
 805e9e6:	68f8      	ldr	r0, [r7, #12]
 805e9e8:	f7ff ff52 	bl	805e890 <SPIx_WriteRead>
 805e9ec:	887b      	ldrh	r3, [r7, #2]
 805e9ee:	827b      	strh	r3, [r7, #18]
 805e9f0:	e00b      	b.n	805ea0a <BSP_SPI_16M_Read_Sequence+0x74>
 805e9f2:	6abc      	ldr	r4, [r7, #40]	; 0x28
 805e9f4:	1c63      	adds	r3, r4, #1
 805e9f6:	62bb      	str	r3, [r7, #40]	; 0x28
 805e9f8:	2100      	movs	r1, #0
 805e9fa:	68f8      	ldr	r0, [r7, #12]
 805e9fc:	f7ff ff48 	bl	805e890 <SPIx_WriteRead>
 805ea00:	4603      	mov	r3, r0
 805ea02:	7023      	strb	r3, [r4, #0]
 805ea04:	8a7b      	ldrh	r3, [r7, #18]
 805ea06:	3301      	adds	r3, #1
 805ea08:	827b      	strh	r3, [r7, #18]
 805ea0a:	8a7a      	ldrh	r2, [r7, #18]
 805ea0c:	8879      	ldrh	r1, [r7, #2]
 805ea0e:	697b      	ldr	r3, [r7, #20]
 805ea10:	440b      	add	r3, r1
 805ea12:	429a      	cmp	r2, r3
 805ea14:	d3ed      	bcc.n	805e9f2 <BSP_SPI_16M_Read_Sequence+0x5c>
 805ea16:	687b      	ldr	r3, [r7, #4]
 805ea18:	881b      	ldrh	r3, [r3, #0]
 805ea1a:	2200      	movs	r2, #0
 805ea1c:	4619      	mov	r1, r3
 805ea1e:	68b8      	ldr	r0, [r7, #8]
 805ea20:	f7ff ff56 	bl	805e8d0 <BSP_SPI_Set_CS>
 805ea24:	2300      	movs	r3, #0
 805ea26:	4618      	mov	r0, r3
 805ea28:	371c      	adds	r7, #28
 805ea2a:	46bd      	mov	sp, r7
 805ea2c:	bd90      	pop	{r4, r7, pc}

0805ea2e <timeGetTime>:
 805ea2e:	b084      	sub	sp, #16
 805ea30:	b598      	push	{r3, r4, r7, lr}
 805ea32:	af00      	add	r7, sp, #0
 805ea34:	f107 0410 	add.w	r4, r7, #16
 805ea38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 805ea3c:	6a3b      	ldr	r3, [r7, #32]
 805ea3e:	4798      	blx	r3
 805ea40:	4603      	mov	r3, r0
 805ea42:	460c      	mov	r4, r1
 805ea44:	4618      	mov	r0, r3
 805ea46:	46bd      	mov	sp, r7
 805ea48:	e8bd 4098 	ldmia.w	sp!, {r3, r4, r7, lr}
 805ea4c:	b004      	add	sp, #16
 805ea4e:	4770      	bx	lr

0805ea50 <_calculate_twos_complement_uint32>:
 805ea50:	b480      	push	{r7}
 805ea52:	b085      	sub	sp, #20
 805ea54:	af00      	add	r7, sp, #0
 805ea56:	6078      	str	r0, [r7, #4]
 805ea58:	2300      	movs	r3, #0
 805ea5a:	60fb      	str	r3, [r7, #12]
 805ea5c:	687b      	ldr	r3, [r7, #4]
 805ea5e:	425b      	negs	r3, r3
 805ea60:	60fb      	str	r3, [r7, #12]
 805ea62:	68fb      	ldr	r3, [r7, #12]
 805ea64:	4618      	mov	r0, r3
 805ea66:	3714      	adds	r7, #20
 805ea68:	46bd      	mov	sp, r7
 805ea6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 805ea6e:	4770      	bx	lr

0805ea70 <vl53l5_comms_initialise>:
 805ea70:	b480      	push	{r7}
 805ea72:	b085      	sub	sp, #20
 805ea74:	af00      	add	r7, sp, #0
 805ea76:	6078      	str	r0, [r7, #4]
 805ea78:	2300      	movs	r3, #0
 805ea7a:	60fb      	str	r3, [r7, #12]
 805ea7c:	687b      	ldr	r3, [r7, #4]
 805ea7e:	785b      	ldrb	r3, [r3, #1]
 805ea80:	2b01      	cmp	r3, #1
 805ea82:	d003      	beq.n	805ea8c <vl53l5_comms_initialise+0x1c>
 805ea84:	f06f 035d 	mvn.w	r3, #93	; 0x5d
 805ea88:	60fb      	str	r3, [r7, #12]
 805ea8a:	e000      	b.n	805ea8e <vl53l5_comms_initialise+0x1e>
 805ea8c:	bf00      	nop
 805ea8e:	68fb      	ldr	r3, [r7, #12]
 805ea90:	4618      	mov	r0, r3
 805ea92:	3714      	adds	r7, #20
 805ea94:	46bd      	mov	sp, r7
 805ea96:	f85d 7b04 	ldr.w	r7, [sp], #4
 805ea9a:	4770      	bx	lr

0805ea9c <vl53l5_comms_close>:
 805ea9c:	b480      	push	{r7}
 805ea9e:	b085      	sub	sp, #20
 805eaa0:	af00      	add	r7, sp, #0
 805eaa2:	6078      	str	r0, [r7, #4]
 805eaa4:	2300      	movs	r3, #0
 805eaa6:	60fb      	str	r3, [r7, #12]
 805eaa8:	68fb      	ldr	r3, [r7, #12]
 805eaaa:	4618      	mov	r0, r3
 805eaac:	3714      	adds	r7, #20
 805eaae:	46bd      	mov	sp, r7
 805eab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 805eab4:	4770      	bx	lr

0805eab6 <vl53l5_write_multi>:
 805eab6:	b590      	push	{r4, r7, lr}
 805eab8:	b089      	sub	sp, #36	; 0x24
 805eaba:	af02      	add	r7, sp, #8
 805eabc:	60f8      	str	r0, [r7, #12]
 805eabe:	607a      	str	r2, [r7, #4]
 805eac0:	603b      	str	r3, [r7, #0]
 805eac2:	460b      	mov	r3, r1
 805eac4:	817b      	strh	r3, [r7, #10]
 805eac6:	2300      	movs	r3, #0
 805eac8:	617b      	str	r3, [r7, #20]
 805eaca:	68fb      	ldr	r3, [r7, #12]
 805eacc:	68d8      	ldr	r0, [r3, #12]
 805eace:	68fb      	ldr	r3, [r7, #12]
 805ead0:	6959      	ldr	r1, [r3, #20]
 805ead2:	68fb      	ldr	r3, [r7, #12]
 805ead4:	699a      	ldr	r2, [r3, #24]
 805ead6:	897c      	ldrh	r4, [r7, #10]
 805ead8:	683b      	ldr	r3, [r7, #0]
 805eada:	9301      	str	r3, [sp, #4]
 805eadc:	687b      	ldr	r3, [r7, #4]
 805eade:	9300      	str	r3, [sp, #0]
 805eae0:	4623      	mov	r3, r4
 805eae2:	f7ff ff0c 	bl	805e8fe <BSP_SPI_16M_Write_Sequence>
 805eae6:	697b      	ldr	r3, [r7, #20]
 805eae8:	4618      	mov	r0, r3
 805eaea:	371c      	adds	r7, #28
 805eaec:	46bd      	mov	sp, r7
 805eaee:	bd90      	pop	{r4, r7, pc}

0805eaf0 <vl53l5_read_multi>:
 805eaf0:	b590      	push	{r4, r7, lr}
 805eaf2:	b089      	sub	sp, #36	; 0x24
 805eaf4:	af02      	add	r7, sp, #8
 805eaf6:	60f8      	str	r0, [r7, #12]
 805eaf8:	607a      	str	r2, [r7, #4]
 805eafa:	603b      	str	r3, [r7, #0]
 805eafc:	460b      	mov	r3, r1
 805eafe:	817b      	strh	r3, [r7, #10]
 805eb00:	2300      	movs	r3, #0
 805eb02:	617b      	str	r3, [r7, #20]
 805eb04:	68fb      	ldr	r3, [r7, #12]
 805eb06:	68d8      	ldr	r0, [r3, #12]
 805eb08:	68fb      	ldr	r3, [r7, #12]
 805eb0a:	6959      	ldr	r1, [r3, #20]
 805eb0c:	68fb      	ldr	r3, [r7, #12]
 805eb0e:	699a      	ldr	r2, [r3, #24]
 805eb10:	897c      	ldrh	r4, [r7, #10]
 805eb12:	683b      	ldr	r3, [r7, #0]
 805eb14:	9301      	str	r3, [sp, #4]
 805eb16:	687b      	ldr	r3, [r7, #4]
 805eb18:	9300      	str	r3, [sp, #0]
 805eb1a:	4623      	mov	r3, r4
 805eb1c:	f7ff ff3b 	bl	805e996 <BSP_SPI_16M_Read_Sequence>
 805eb20:	697b      	ldr	r3, [r7, #20]
 805eb22:	4618      	mov	r0, r3
 805eb24:	371c      	adds	r7, #28
 805eb26:	46bd      	mov	sp, r7
 805eb28:	bd90      	pop	{r4, r7, pc}
	...

0805eb2c <vl53l5_wait_us>:
 805eb2c:	b580      	push	{r7, lr}
 805eb2e:	b084      	sub	sp, #16
 805eb30:	af00      	add	r7, sp, #0
 805eb32:	6078      	str	r0, [r7, #4]
 805eb34:	6039      	str	r1, [r7, #0]
 805eb36:	2300      	movs	r3, #0
 805eb38:	60fb      	str	r3, [r7, #12]
 805eb3a:	683b      	ldr	r3, [r7, #0]
 805eb3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 805eb40:	d305      	bcc.n	805eb4e <vl53l5_wait_us+0x22>
 805eb42:	683b      	ldr	r3, [r7, #0]
 805eb44:	4a07      	ldr	r2, [pc, #28]	; (805eb64 <vl53l5_wait_us+0x38>)
 805eb46:	fba2 2303 	umull	r2, r3, r2, r3
 805eb4a:	099b      	lsrs	r3, r3, #6
 805eb4c:	e000      	b.n	805eb50 <vl53l5_wait_us+0x24>
 805eb4e:	2301      	movs	r3, #1
 805eb50:	60bb      	str	r3, [r7, #8]
 805eb52:	68b8      	ldr	r0, [r7, #8]
 805eb54:	f7f0 fd7a 	bl	804f64c <HAL_Delay>
 805eb58:	68fb      	ldr	r3, [r7, #12]
 805eb5a:	4618      	mov	r0, r3
 805eb5c:	3710      	adds	r7, #16
 805eb5e:	46bd      	mov	sp, r7
 805eb60:	bd80      	pop	{r7, pc}
 805eb62:	bf00      	nop
 805eb64:	10624dd3 	.word	0x10624dd3

0805eb68 <vl53l5_wait_ms>:
 805eb68:	b580      	push	{r7, lr}
 805eb6a:	b082      	sub	sp, #8
 805eb6c:	af00      	add	r7, sp, #0
 805eb6e:	6078      	str	r0, [r7, #4]
 805eb70:	6039      	str	r1, [r7, #0]
 805eb72:	683b      	ldr	r3, [r7, #0]
 805eb74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 805eb78:	fb02 f303 	mul.w	r3, r2, r3
 805eb7c:	4619      	mov	r1, r3
 805eb7e:	6878      	ldr	r0, [r7, #4]
 805eb80:	f7ff ffd4 	bl	805eb2c <vl53l5_wait_us>
 805eb84:	4603      	mov	r3, r0
 805eb86:	4618      	mov	r0, r3
 805eb88:	3708      	adds	r7, #8
 805eb8a:	46bd      	mov	sp, r7
 805eb8c:	bd80      	pop	{r7, pc}

0805eb8e <vl53l5_gpio_low_power_control>:
 805eb8e:	b480      	push	{r7}
 805eb90:	b085      	sub	sp, #20
 805eb92:	af00      	add	r7, sp, #0
 805eb94:	6078      	str	r0, [r7, #4]
 805eb96:	460b      	mov	r3, r1
 805eb98:	70fb      	strb	r3, [r7, #3]
 805eb9a:	2300      	movs	r3, #0
 805eb9c:	60fb      	str	r3, [r7, #12]
 805eb9e:	68fb      	ldr	r3, [r7, #12]
 805eba0:	4618      	mov	r0, r3
 805eba2:	3714      	adds	r7, #20
 805eba4:	46bd      	mov	sp, r7
 805eba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 805ebaa:	4770      	bx	lr

0805ebac <vl53l5_gpio_comms_select>:
 805ebac:	b480      	push	{r7}
 805ebae:	b085      	sub	sp, #20
 805ebb0:	af00      	add	r7, sp, #0
 805ebb2:	6078      	str	r0, [r7, #4]
 805ebb4:	460b      	mov	r3, r1
 805ebb6:	70fb      	strb	r3, [r7, #3]
 805ebb8:	2300      	movs	r3, #0
 805ebba:	60fb      	str	r3, [r7, #12]
 805ebbc:	68fb      	ldr	r3, [r7, #12]
 805ebbe:	4618      	mov	r0, r3
 805ebc0:	3714      	adds	r7, #20
 805ebc2:	46bd      	mov	sp, r7
 805ebc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 805ebc8:	4770      	bx	lr

0805ebca <vl53l5_gpio_power_enable>:
 805ebca:	b480      	push	{r7}
 805ebcc:	b085      	sub	sp, #20
 805ebce:	af00      	add	r7, sp, #0
 805ebd0:	6078      	str	r0, [r7, #4]
 805ebd2:	460b      	mov	r3, r1
 805ebd4:	70fb      	strb	r3, [r7, #3]
 805ebd6:	2300      	movs	r3, #0
 805ebd8:	60fb      	str	r3, [r7, #12]
 805ebda:	68fb      	ldr	r3, [r7, #12]
 805ebdc:	4618      	mov	r0, r3
 805ebde:	3714      	adds	r7, #20
 805ebe0:	46bd      	mov	sp, r7
 805ebe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 805ebe6:	4770      	bx	lr

0805ebe8 <vl53l5_get_tick_count>:
 805ebe8:	b590      	push	{r4, r7, lr}
 805ebea:	b09b      	sub	sp, #108	; 0x6c
 805ebec:	af16      	add	r7, sp, #88	; 0x58
 805ebee:	6078      	str	r0, [r7, #4]
 805ebf0:	6039      	str	r1, [r7, #0]
 805ebf2:	2300      	movs	r3, #0
 805ebf4:	60fb      	str	r3, [r7, #12]
 805ebf6:	687c      	ldr	r4, [r7, #4]
 805ebf8:	4668      	mov	r0, sp
 805ebfa:	f104 0310 	add.w	r3, r4, #16
 805ebfe:	2258      	movs	r2, #88	; 0x58
 805ec00:	4619      	mov	r1, r3
 805ec02:	f001 f9cd 	bl	805ffa0 <memcpy>
 805ec06:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 805ec0a:	f7ff ff10 	bl	805ea2e <timeGetTime>
 805ec0e:	4602      	mov	r2, r0
 805ec10:	683b      	ldr	r3, [r7, #0]
 805ec12:	601a      	str	r2, [r3, #0]
 805ec14:	68fb      	ldr	r3, [r7, #12]
 805ec16:	4618      	mov	r0, r3
 805ec18:	3714      	adds	r7, #20
 805ec1a:	46bd      	mov	sp, r7
 805ec1c:	bd90      	pop	{r4, r7, pc}

0805ec1e <vl53l5_check_for_timeout>:
 805ec1e:	b580      	push	{r7, lr}
 805ec20:	b086      	sub	sp, #24
 805ec22:	af00      	add	r7, sp, #0
 805ec24:	60f8      	str	r0, [r7, #12]
 805ec26:	60b9      	str	r1, [r7, #8]
 805ec28:	607a      	str	r2, [r7, #4]
 805ec2a:	603b      	str	r3, [r7, #0]
 805ec2c:	2300      	movs	r3, #0
 805ec2e:	617b      	str	r3, [r7, #20]
 805ec30:	68ba      	ldr	r2, [r7, #8]
 805ec32:	687b      	ldr	r3, [r7, #4]
 805ec34:	429a      	cmp	r2, r3
 805ec36:	d804      	bhi.n	805ec42 <vl53l5_check_for_timeout+0x24>
 805ec38:	687a      	ldr	r2, [r7, #4]
 805ec3a:	68bb      	ldr	r3, [r7, #8]
 805ec3c:	1ad3      	subs	r3, r2, r3
 805ec3e:	613b      	str	r3, [r7, #16]
 805ec40:	e006      	b.n	805ec50 <vl53l5_check_for_timeout+0x32>
 805ec42:	68b8      	ldr	r0, [r7, #8]
 805ec44:	f7ff ff04 	bl	805ea50 <_calculate_twos_complement_uint32>
 805ec48:	4602      	mov	r2, r0
 805ec4a:	687b      	ldr	r3, [r7, #4]
 805ec4c:	4413      	add	r3, r2
 805ec4e:	613b      	str	r3, [r7, #16]
 805ec50:	693a      	ldr	r2, [r7, #16]
 805ec52:	683b      	ldr	r3, [r7, #0]
 805ec54:	429a      	cmp	r2, r3
 805ec56:	d902      	bls.n	805ec5e <vl53l5_check_for_timeout+0x40>
 805ec58:	f06f 0306 	mvn.w	r3, #6
 805ec5c:	617b      	str	r3, [r7, #20]
 805ec5e:	697b      	ldr	r3, [r7, #20]
 805ec60:	4618      	mov	r0, r3
 805ec62:	3718      	adds	r7, #24
 805ec64:	46bd      	mov	sp, r7
 805ec66:	bd80      	pop	{r7, pc}

0805ec68 <vl53l5_platform_init>:
 805ec68:	b580      	push	{r7, lr}
 805ec6a:	b084      	sub	sp, #16
 805ec6c:	af00      	add	r7, sp, #0
 805ec6e:	6078      	str	r0, [r7, #4]
 805ec70:	2300      	movs	r3, #0
 805ec72:	60fb      	str	r3, [r7, #12]
 805ec74:	6878      	ldr	r0, [r7, #4]
 805ec76:	f7ff fefb 	bl	805ea70 <vl53l5_comms_initialise>
 805ec7a:	60f8      	str	r0, [r7, #12]
 805ec7c:	68fb      	ldr	r3, [r7, #12]
 805ec7e:	2b00      	cmp	r3, #0
 805ec80:	d14a      	bne.n	805ed18 <vl53l5_platform_init+0xb0>
 805ec82:	2100      	movs	r1, #0
 805ec84:	6878      	ldr	r0, [r7, #4]
 805ec86:	f7ff ff82 	bl	805eb8e <vl53l5_gpio_low_power_control>
 805ec8a:	60f8      	str	r0, [r7, #12]
 805ec8c:	68fb      	ldr	r3, [r7, #12]
 805ec8e:	2b00      	cmp	r3, #0
 805ec90:	d144      	bne.n	805ed1c <vl53l5_platform_init+0xb4>
 805ec92:	2100      	movs	r1, #0
 805ec94:	6878      	ldr	r0, [r7, #4]
 805ec96:	f7ff ff98 	bl	805ebca <vl53l5_gpio_power_enable>
 805ec9a:	60f8      	str	r0, [r7, #12]
 805ec9c:	68fb      	ldr	r3, [r7, #12]
 805ec9e:	2b00      	cmp	r3, #0
 805eca0:	d13e      	bne.n	805ed20 <vl53l5_platform_init+0xb8>
 805eca2:	687b      	ldr	r3, [r7, #4]
 805eca4:	785b      	ldrb	r3, [r3, #1]
 805eca6:	2b00      	cmp	r3, #0
 805eca8:	d105      	bne.n	805ecb6 <vl53l5_platform_init+0x4e>
 805ecaa:	2100      	movs	r1, #0
 805ecac:	6878      	ldr	r0, [r7, #4]
 805ecae:	f7ff ff7d 	bl	805ebac <vl53l5_gpio_comms_select>
 805ecb2:	60f8      	str	r0, [r7, #12]
 805ecb4:	e00c      	b.n	805ecd0 <vl53l5_platform_init+0x68>
 805ecb6:	687b      	ldr	r3, [r7, #4]
 805ecb8:	785b      	ldrb	r3, [r3, #1]
 805ecba:	2b01      	cmp	r3, #1
 805ecbc:	d105      	bne.n	805ecca <vl53l5_platform_init+0x62>
 805ecbe:	2101      	movs	r1, #1
 805ecc0:	6878      	ldr	r0, [r7, #4]
 805ecc2:	f7ff ff73 	bl	805ebac <vl53l5_gpio_comms_select>
 805ecc6:	60f8      	str	r0, [r7, #12]
 805ecc8:	e002      	b.n	805ecd0 <vl53l5_platform_init+0x68>
 805ecca:	f06f 035c 	mvn.w	r3, #92	; 0x5c
 805ecce:	60fb      	str	r3, [r7, #12]
 805ecd0:	68fb      	ldr	r3, [r7, #12]
 805ecd2:	2b00      	cmp	r3, #0
 805ecd4:	d126      	bne.n	805ed24 <vl53l5_platform_init+0xbc>
 805ecd6:	f242 7110 	movw	r1, #10000	; 0x2710
 805ecda:	6878      	ldr	r0, [r7, #4]
 805ecdc:	f7ff ff26 	bl	805eb2c <vl53l5_wait_us>
 805ece0:	60f8      	str	r0, [r7, #12]
 805ece2:	68fb      	ldr	r3, [r7, #12]
 805ece4:	2b00      	cmp	r3, #0
 805ece6:	d11f      	bne.n	805ed28 <vl53l5_platform_init+0xc0>
 805ece8:	2101      	movs	r1, #1
 805ecea:	6878      	ldr	r0, [r7, #4]
 805ecec:	f7ff ff4f 	bl	805eb8e <vl53l5_gpio_low_power_control>
 805ecf0:	60f8      	str	r0, [r7, #12]
 805ecf2:	68fb      	ldr	r3, [r7, #12]
 805ecf4:	2b00      	cmp	r3, #0
 805ecf6:	d119      	bne.n	805ed2c <vl53l5_platform_init+0xc4>
 805ecf8:	2101      	movs	r1, #1
 805ecfa:	6878      	ldr	r0, [r7, #4]
 805ecfc:	f7ff ff65 	bl	805ebca <vl53l5_gpio_power_enable>
 805ed00:	60f8      	str	r0, [r7, #12]
 805ed02:	68fb      	ldr	r3, [r7, #12]
 805ed04:	2b00      	cmp	r3, #0
 805ed06:	d113      	bne.n	805ed30 <vl53l5_platform_init+0xc8>
 805ed08:	21c8      	movs	r1, #200	; 0xc8
 805ed0a:	6878      	ldr	r0, [r7, #4]
 805ed0c:	f7ff ff0e 	bl	805eb2c <vl53l5_wait_us>
 805ed10:	60f8      	str	r0, [r7, #12]
 805ed12:	68fb      	ldr	r3, [r7, #12]
 805ed14:	2b00      	cmp	r3, #0
 805ed16:	e00c      	b.n	805ed32 <vl53l5_platform_init+0xca>
 805ed18:	bf00      	nop
 805ed1a:	e00a      	b.n	805ed32 <vl53l5_platform_init+0xca>
 805ed1c:	bf00      	nop
 805ed1e:	e008      	b.n	805ed32 <vl53l5_platform_init+0xca>
 805ed20:	bf00      	nop
 805ed22:	e006      	b.n	805ed32 <vl53l5_platform_init+0xca>
 805ed24:	bf00      	nop
 805ed26:	e004      	b.n	805ed32 <vl53l5_platform_init+0xca>
 805ed28:	bf00      	nop
 805ed2a:	e002      	b.n	805ed32 <vl53l5_platform_init+0xca>
 805ed2c:	bf00      	nop
 805ed2e:	e000      	b.n	805ed32 <vl53l5_platform_init+0xca>
 805ed30:	bf00      	nop
 805ed32:	68fb      	ldr	r3, [r7, #12]
 805ed34:	4618      	mov	r0, r3
 805ed36:	3710      	adds	r7, #16
 805ed38:	46bd      	mov	sp, r7
 805ed3a:	bd80      	pop	{r7, pc}

0805ed3c <vl53l5_platform_terminate>:
 805ed3c:	b580      	push	{r7, lr}
 805ed3e:	b084      	sub	sp, #16
 805ed40:	af00      	add	r7, sp, #0
 805ed42:	6078      	str	r0, [r7, #4]
 805ed44:	2300      	movs	r3, #0
 805ed46:	60fb      	str	r3, [r7, #12]
 805ed48:	2100      	movs	r1, #0
 805ed4a:	6878      	ldr	r0, [r7, #4]
 805ed4c:	f7ff ff3d 	bl	805ebca <vl53l5_gpio_power_enable>
 805ed50:	60f8      	str	r0, [r7, #12]
 805ed52:	68fb      	ldr	r3, [r7, #12]
 805ed54:	2b00      	cmp	r3, #0
 805ed56:	d106      	bne.n	805ed66 <vl53l5_platform_terminate+0x2a>
 805ed58:	6878      	ldr	r0, [r7, #4]
 805ed5a:	f7ff fe9f 	bl	805ea9c <vl53l5_comms_close>
 805ed5e:	60f8      	str	r0, [r7, #12]
 805ed60:	68fb      	ldr	r3, [r7, #12]
 805ed62:	2b00      	cmp	r3, #0
 805ed64:	e000      	b.n	805ed68 <vl53l5_platform_terminate+0x2c>
 805ed66:	bf00      	nop
 805ed68:	68fb      	ldr	r3, [r7, #12]
 805ed6a:	4618      	mov	r0, r3
 805ed6c:	3710      	adds	r7, #16
 805ed6e:	46bd      	mov	sp, r7
 805ed70:	bd80      	pop	{r7, pc}

0805ed72 <_decode_cal_grp_ref_spad_info>:
 805ed72:	b580      	push	{r7, lr}
 805ed74:	b088      	sub	sp, #32
 805ed76:	af00      	add	r7, sp, #0
 805ed78:	60f8      	str	r0, [r7, #12]
 805ed7a:	60b9      	str	r1, [r7, #8]
 805ed7c:	607a      	str	r2, [r7, #4]
 805ed7e:	2300      	movs	r3, #0
 805ed80:	61fb      	str	r3, [r7, #28]
 805ed82:	2300      	movs	r3, #0
 805ed84:	61bb      	str	r3, [r7, #24]
 805ed86:	68bb      	ldr	r3, [r7, #8]
 805ed88:	617b      	str	r3, [r7, #20]
 805ed8a:	68fb      	ldr	r3, [r7, #12]
 805ed8c:	2b08      	cmp	r3, #8
 805ed8e:	d903      	bls.n	805ed98 <_decode_cal_grp_ref_spad_info+0x26>
 805ed90:	f06f 0304 	mvn.w	r3, #4
 805ed94:	61fb      	str	r3, [r7, #28]
 805ed96:	e078      	b.n	805ee8a <_decode_cal_grp_ref_spad_info+0x118>
 805ed98:	6979      	ldr	r1, [r7, #20]
 805ed9a:	2001      	movs	r0, #1
 805ed9c:	f7fe ffcd 	bl	805dd3a <vl53l5_decode_uint8_t>
 805eda0:	4603      	mov	r3, r0
 805eda2:	461a      	mov	r2, r3
 805eda4:	687b      	ldr	r3, [r7, #4]
 805eda6:	701a      	strb	r2, [r3, #0]
 805eda8:	697b      	ldr	r3, [r7, #20]
 805edaa:	3301      	adds	r3, #1
 805edac:	617b      	str	r3, [r7, #20]
 805edae:	69bb      	ldr	r3, [r7, #24]
 805edb0:	3301      	adds	r3, #1
 805edb2:	61bb      	str	r3, [r7, #24]
 805edb4:	6979      	ldr	r1, [r7, #20]
 805edb6:	2001      	movs	r0, #1
 805edb8:	f7fe ffbf 	bl	805dd3a <vl53l5_decode_uint8_t>
 805edbc:	4603      	mov	r3, r0
 805edbe:	461a      	mov	r2, r3
 805edc0:	687b      	ldr	r3, [r7, #4]
 805edc2:	705a      	strb	r2, [r3, #1]
 805edc4:	697b      	ldr	r3, [r7, #20]
 805edc6:	3301      	adds	r3, #1
 805edc8:	617b      	str	r3, [r7, #20]
 805edca:	69bb      	ldr	r3, [r7, #24]
 805edcc:	3301      	adds	r3, #1
 805edce:	61bb      	str	r3, [r7, #24]
 805edd0:	6979      	ldr	r1, [r7, #20]
 805edd2:	2001      	movs	r0, #1
 805edd4:	f7fe ffb1 	bl	805dd3a <vl53l5_decode_uint8_t>
 805edd8:	4603      	mov	r3, r0
 805edda:	461a      	mov	r2, r3
 805eddc:	687b      	ldr	r3, [r7, #4]
 805edde:	709a      	strb	r2, [r3, #2]
 805ede0:	697b      	ldr	r3, [r7, #20]
 805ede2:	3301      	adds	r3, #1
 805ede4:	617b      	str	r3, [r7, #20]
 805ede6:	69bb      	ldr	r3, [r7, #24]
 805ede8:	3301      	adds	r3, #1
 805edea:	61bb      	str	r3, [r7, #24]
 805edec:	6979      	ldr	r1, [r7, #20]
 805edee:	2001      	movs	r0, #1
 805edf0:	f7fe ffa3 	bl	805dd3a <vl53l5_decode_uint8_t>
 805edf4:	4603      	mov	r3, r0
 805edf6:	461a      	mov	r2, r3
 805edf8:	687b      	ldr	r3, [r7, #4]
 805edfa:	70da      	strb	r2, [r3, #3]
 805edfc:	697b      	ldr	r3, [r7, #20]
 805edfe:	3301      	adds	r3, #1
 805ee00:	617b      	str	r3, [r7, #20]
 805ee02:	69bb      	ldr	r3, [r7, #24]
 805ee04:	3301      	adds	r3, #1
 805ee06:	61bb      	str	r3, [r7, #24]
 805ee08:	6979      	ldr	r1, [r7, #20]
 805ee0a:	2001      	movs	r0, #1
 805ee0c:	f7fe ff95 	bl	805dd3a <vl53l5_decode_uint8_t>
 805ee10:	4603      	mov	r3, r0
 805ee12:	461a      	mov	r2, r3
 805ee14:	687b      	ldr	r3, [r7, #4]
 805ee16:	711a      	strb	r2, [r3, #4]
 805ee18:	697b      	ldr	r3, [r7, #20]
 805ee1a:	3301      	adds	r3, #1
 805ee1c:	617b      	str	r3, [r7, #20]
 805ee1e:	69bb      	ldr	r3, [r7, #24]
 805ee20:	3301      	adds	r3, #1
 805ee22:	61bb      	str	r3, [r7, #24]
 805ee24:	6979      	ldr	r1, [r7, #20]
 805ee26:	2001      	movs	r0, #1
 805ee28:	f7fe ff87 	bl	805dd3a <vl53l5_decode_uint8_t>
 805ee2c:	4603      	mov	r3, r0
 805ee2e:	461a      	mov	r2, r3
 805ee30:	687b      	ldr	r3, [r7, #4]
 805ee32:	715a      	strb	r2, [r3, #5]
 805ee34:	697b      	ldr	r3, [r7, #20]
 805ee36:	3301      	adds	r3, #1
 805ee38:	617b      	str	r3, [r7, #20]
 805ee3a:	69bb      	ldr	r3, [r7, #24]
 805ee3c:	3301      	adds	r3, #1
 805ee3e:	61bb      	str	r3, [r7, #24]
 805ee40:	6979      	ldr	r1, [r7, #20]
 805ee42:	2001      	movs	r0, #1
 805ee44:	f7fe ff79 	bl	805dd3a <vl53l5_decode_uint8_t>
 805ee48:	4603      	mov	r3, r0
 805ee4a:	461a      	mov	r2, r3
 805ee4c:	687b      	ldr	r3, [r7, #4]
 805ee4e:	719a      	strb	r2, [r3, #6]
 805ee50:	697b      	ldr	r3, [r7, #20]
 805ee52:	3301      	adds	r3, #1
 805ee54:	617b      	str	r3, [r7, #20]
 805ee56:	69bb      	ldr	r3, [r7, #24]
 805ee58:	3301      	adds	r3, #1
 805ee5a:	61bb      	str	r3, [r7, #24]
 805ee5c:	6979      	ldr	r1, [r7, #20]
 805ee5e:	2001      	movs	r0, #1
 805ee60:	f7fe ff6b 	bl	805dd3a <vl53l5_decode_uint8_t>
 805ee64:	4603      	mov	r3, r0
 805ee66:	461a      	mov	r2, r3
 805ee68:	687b      	ldr	r3, [r7, #4]
 805ee6a:	71da      	strb	r2, [r3, #7]
 805ee6c:	697b      	ldr	r3, [r7, #20]
 805ee6e:	3301      	adds	r3, #1
 805ee70:	617b      	str	r3, [r7, #20]
 805ee72:	69bb      	ldr	r3, [r7, #24]
 805ee74:	3301      	adds	r3, #1
 805ee76:	61bb      	str	r3, [r7, #24]
 805ee78:	68fa      	ldr	r2, [r7, #12]
 805ee7a:	69bb      	ldr	r3, [r7, #24]
 805ee7c:	429a      	cmp	r2, r3
 805ee7e:	d003      	beq.n	805ee88 <_decode_cal_grp_ref_spad_info+0x116>
 805ee80:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 805ee84:	61fb      	str	r3, [r7, #28]
 805ee86:	e000      	b.n	805ee8a <_decode_cal_grp_ref_spad_info+0x118>
 805ee88:	bf00      	nop
 805ee8a:	69fb      	ldr	r3, [r7, #28]
 805ee8c:	4618      	mov	r0, r3
 805ee8e:	3720      	adds	r7, #32
 805ee90:	46bd      	mov	sp, r7
 805ee92:	bd80      	pop	{r7, pc}

0805ee94 <_decode_cal_grp_grid_meta>:
 805ee94:	b580      	push	{r7, lr}
 805ee96:	b088      	sub	sp, #32
 805ee98:	af00      	add	r7, sp, #0
 805ee9a:	60f8      	str	r0, [r7, #12]
 805ee9c:	60b9      	str	r1, [r7, #8]
 805ee9e:	607a      	str	r2, [r7, #4]
 805eea0:	2300      	movs	r3, #0
 805eea2:	61fb      	str	r3, [r7, #28]
 805eea4:	2300      	movs	r3, #0
 805eea6:	61bb      	str	r3, [r7, #24]
 805eea8:	68bb      	ldr	r3, [r7, #8]
 805eeaa:	617b      	str	r3, [r7, #20]
 805eeac:	68fb      	ldr	r3, [r7, #12]
 805eeae:	2b0c      	cmp	r3, #12
 805eeb0:	d903      	bls.n	805eeba <_decode_cal_grp_grid_meta+0x26>
 805eeb2:	f06f 0304 	mvn.w	r3, #4
 805eeb6:	61fb      	str	r3, [r7, #28]
 805eeb8:	e094      	b.n	805efe4 <_decode_cal_grp_grid_meta+0x150>
 805eeba:	6979      	ldr	r1, [r7, #20]
 805eebc:	2002      	movs	r0, #2
 805eebe:	f7fe ff79 	bl	805ddb4 <vl53l5_decode_int16_t>
 805eec2:	4603      	mov	r3, r0
 805eec4:	461a      	mov	r2, r3
 805eec6:	687b      	ldr	r3, [r7, #4]
 805eec8:	801a      	strh	r2, [r3, #0]
 805eeca:	697b      	ldr	r3, [r7, #20]
 805eecc:	3302      	adds	r3, #2
 805eece:	617b      	str	r3, [r7, #20]
 805eed0:	69bb      	ldr	r3, [r7, #24]
 805eed2:	3302      	adds	r3, #2
 805eed4:	61bb      	str	r3, [r7, #24]
 805eed6:	6979      	ldr	r1, [r7, #20]
 805eed8:	2002      	movs	r0, #2
 805eeda:	f7fe ff4b 	bl	805dd74 <vl53l5_decode_uint16_t>
 805eede:	4603      	mov	r3, r0
 805eee0:	461a      	mov	r2, r3
 805eee2:	687b      	ldr	r3, [r7, #4]
 805eee4:	805a      	strh	r2, [r3, #2]
 805eee6:	697b      	ldr	r3, [r7, #20]
 805eee8:	3302      	adds	r3, #2
 805eeea:	617b      	str	r3, [r7, #20]
 805eeec:	69bb      	ldr	r3, [r7, #24]
 805eeee:	3302      	adds	r3, #2
 805eef0:	61bb      	str	r3, [r7, #24]
 805eef2:	6979      	ldr	r1, [r7, #20]
 805eef4:	2001      	movs	r0, #1
 805eef6:	f7fe ff2e 	bl	805dd56 <vl53l5_decode_int8_t>
 805eefa:	4603      	mov	r3, r0
 805eefc:	461a      	mov	r2, r3
 805eefe:	687b      	ldr	r3, [r7, #4]
 805ef00:	711a      	strb	r2, [r3, #4]
 805ef02:	697b      	ldr	r3, [r7, #20]
 805ef04:	3301      	adds	r3, #1
 805ef06:	617b      	str	r3, [r7, #20]
 805ef08:	69bb      	ldr	r3, [r7, #24]
 805ef0a:	3301      	adds	r3, #1
 805ef0c:	61bb      	str	r3, [r7, #24]
 805ef0e:	6979      	ldr	r1, [r7, #20]
 805ef10:	2001      	movs	r0, #1
 805ef12:	f7fe ff12 	bl	805dd3a <vl53l5_decode_uint8_t>
 805ef16:	4603      	mov	r3, r0
 805ef18:	461a      	mov	r2, r3
 805ef1a:	687b      	ldr	r3, [r7, #4]
 805ef1c:	715a      	strb	r2, [r3, #5]
 805ef1e:	697b      	ldr	r3, [r7, #20]
 805ef20:	3301      	adds	r3, #1
 805ef22:	617b      	str	r3, [r7, #20]
 805ef24:	69bb      	ldr	r3, [r7, #24]
 805ef26:	3301      	adds	r3, #1
 805ef28:	61bb      	str	r3, [r7, #24]
 805ef2a:	6979      	ldr	r1, [r7, #20]
 805ef2c:	2001      	movs	r0, #1
 805ef2e:	f7fe ff04 	bl	805dd3a <vl53l5_decode_uint8_t>
 805ef32:	4603      	mov	r3, r0
 805ef34:	461a      	mov	r2, r3
 805ef36:	687b      	ldr	r3, [r7, #4]
 805ef38:	719a      	strb	r2, [r3, #6]
 805ef3a:	697b      	ldr	r3, [r7, #20]
 805ef3c:	3301      	adds	r3, #1
 805ef3e:	617b      	str	r3, [r7, #20]
 805ef40:	69bb      	ldr	r3, [r7, #24]
 805ef42:	3301      	adds	r3, #1
 805ef44:	61bb      	str	r3, [r7, #24]
 805ef46:	6979      	ldr	r1, [r7, #20]
 805ef48:	2001      	movs	r0, #1
 805ef4a:	f7fe fef6 	bl	805dd3a <vl53l5_decode_uint8_t>
 805ef4e:	4603      	mov	r3, r0
 805ef50:	461a      	mov	r2, r3
 805ef52:	687b      	ldr	r3, [r7, #4]
 805ef54:	71da      	strb	r2, [r3, #7]
 805ef56:	697b      	ldr	r3, [r7, #20]
 805ef58:	3301      	adds	r3, #1
 805ef5a:	617b      	str	r3, [r7, #20]
 805ef5c:	69bb      	ldr	r3, [r7, #24]
 805ef5e:	3301      	adds	r3, #1
 805ef60:	61bb      	str	r3, [r7, #24]
 805ef62:	6979      	ldr	r1, [r7, #20]
 805ef64:	2001      	movs	r0, #1
 805ef66:	f7fe fee8 	bl	805dd3a <vl53l5_decode_uint8_t>
 805ef6a:	4603      	mov	r3, r0
 805ef6c:	461a      	mov	r2, r3
 805ef6e:	687b      	ldr	r3, [r7, #4]
 805ef70:	721a      	strb	r2, [r3, #8]
 805ef72:	697b      	ldr	r3, [r7, #20]
 805ef74:	3301      	adds	r3, #1
 805ef76:	617b      	str	r3, [r7, #20]
 805ef78:	69bb      	ldr	r3, [r7, #24]
 805ef7a:	3301      	adds	r3, #1
 805ef7c:	61bb      	str	r3, [r7, #24]
 805ef7e:	6979      	ldr	r1, [r7, #20]
 805ef80:	2001      	movs	r0, #1
 805ef82:	f7fe feda 	bl	805dd3a <vl53l5_decode_uint8_t>
 805ef86:	4603      	mov	r3, r0
 805ef88:	461a      	mov	r2, r3
 805ef8a:	687b      	ldr	r3, [r7, #4]
 805ef8c:	725a      	strb	r2, [r3, #9]
 805ef8e:	697b      	ldr	r3, [r7, #20]
 805ef90:	3301      	adds	r3, #1
 805ef92:	617b      	str	r3, [r7, #20]
 805ef94:	69bb      	ldr	r3, [r7, #24]
 805ef96:	3301      	adds	r3, #1
 805ef98:	61bb      	str	r3, [r7, #24]
 805ef9a:	6979      	ldr	r1, [r7, #20]
 805ef9c:	2001      	movs	r0, #1
 805ef9e:	f7fe fecc 	bl	805dd3a <vl53l5_decode_uint8_t>
 805efa2:	4603      	mov	r3, r0
 805efa4:	461a      	mov	r2, r3
 805efa6:	687b      	ldr	r3, [r7, #4]
 805efa8:	729a      	strb	r2, [r3, #10]
 805efaa:	697b      	ldr	r3, [r7, #20]
 805efac:	3301      	adds	r3, #1
 805efae:	617b      	str	r3, [r7, #20]
 805efb0:	69bb      	ldr	r3, [r7, #24]
 805efb2:	3301      	adds	r3, #1
 805efb4:	61bb      	str	r3, [r7, #24]
 805efb6:	6979      	ldr	r1, [r7, #20]
 805efb8:	2001      	movs	r0, #1
 805efba:	f7fe febe 	bl	805dd3a <vl53l5_decode_uint8_t>
 805efbe:	4603      	mov	r3, r0
 805efc0:	461a      	mov	r2, r3
 805efc2:	687b      	ldr	r3, [r7, #4]
 805efc4:	72da      	strb	r2, [r3, #11]
 805efc6:	697b      	ldr	r3, [r7, #20]
 805efc8:	3301      	adds	r3, #1
 805efca:	617b      	str	r3, [r7, #20]
 805efcc:	69bb      	ldr	r3, [r7, #24]
 805efce:	3301      	adds	r3, #1
 805efd0:	61bb      	str	r3, [r7, #24]
 805efd2:	68fa      	ldr	r2, [r7, #12]
 805efd4:	69bb      	ldr	r3, [r7, #24]
 805efd6:	429a      	cmp	r2, r3
 805efd8:	d003      	beq.n	805efe2 <_decode_cal_grp_grid_meta+0x14e>
 805efda:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 805efde:	61fb      	str	r3, [r7, #28]
 805efe0:	e000      	b.n	805efe4 <_decode_cal_grp_grid_meta+0x150>
 805efe2:	bf00      	nop
 805efe4:	69fb      	ldr	r3, [r7, #28]
 805efe6:	4618      	mov	r0, r3
 805efe8:	3720      	adds	r7, #32
 805efea:	46bd      	mov	sp, r7
 805efec:	bd80      	pop	{r7, pc}

0805efee <_decode_cal_grp_phase_stats>:
 805efee:	b580      	push	{r7, lr}
 805eff0:	b088      	sub	sp, #32
 805eff2:	af00      	add	r7, sp, #0
 805eff4:	60f8      	str	r0, [r7, #12]
 805eff6:	60b9      	str	r1, [r7, #8]
 805eff8:	607a      	str	r2, [r7, #4]
 805effa:	2300      	movs	r3, #0
 805effc:	61fb      	str	r3, [r7, #28]
 805effe:	2300      	movs	r3, #0
 805f000:	61bb      	str	r3, [r7, #24]
 805f002:	68bb      	ldr	r3, [r7, #8]
 805f004:	617b      	str	r3, [r7, #20]
 805f006:	68fb      	ldr	r3, [r7, #12]
 805f008:	2b14      	cmp	r3, #20
 805f00a:	d903      	bls.n	805f014 <_decode_cal_grp_phase_stats+0x26>
 805f00c:	f06f 0304 	mvn.w	r3, #4
 805f010:	61fb      	str	r3, [r7, #28]
 805f012:	e067      	b.n	805f0e4 <_decode_cal_grp_phase_stats+0xf6>
 805f014:	6979      	ldr	r1, [r7, #20]
 805f016:	2004      	movs	r0, #4
 805f018:	f7fe ff46 	bl	805dea8 <vl53l5_decode_uint32_t>
 805f01c:	4602      	mov	r2, r0
 805f01e:	687b      	ldr	r3, [r7, #4]
 805f020:	601a      	str	r2, [r3, #0]
 805f022:	697b      	ldr	r3, [r7, #20]
 805f024:	3304      	adds	r3, #4
 805f026:	617b      	str	r3, [r7, #20]
 805f028:	69bb      	ldr	r3, [r7, #24]
 805f02a:	3304      	adds	r3, #4
 805f02c:	61bb      	str	r3, [r7, #24]
 805f02e:	6979      	ldr	r1, [r7, #20]
 805f030:	2004      	movs	r0, #4
 805f032:	f7fe ff39 	bl	805dea8 <vl53l5_decode_uint32_t>
 805f036:	4602      	mov	r2, r0
 805f038:	687b      	ldr	r3, [r7, #4]
 805f03a:	605a      	str	r2, [r3, #4]
 805f03c:	697b      	ldr	r3, [r7, #20]
 805f03e:	3304      	adds	r3, #4
 805f040:	617b      	str	r3, [r7, #20]
 805f042:	69bb      	ldr	r3, [r7, #24]
 805f044:	3304      	adds	r3, #4
 805f046:	61bb      	str	r3, [r7, #24]
 805f048:	6979      	ldr	r1, [r7, #20]
 805f04a:	2004      	movs	r0, #4
 805f04c:	f7fe ff2c 	bl	805dea8 <vl53l5_decode_uint32_t>
 805f050:	4602      	mov	r2, r0
 805f052:	687b      	ldr	r3, [r7, #4]
 805f054:	609a      	str	r2, [r3, #8]
 805f056:	697b      	ldr	r3, [r7, #20]
 805f058:	3304      	adds	r3, #4
 805f05a:	617b      	str	r3, [r7, #20]
 805f05c:	69bb      	ldr	r3, [r7, #24]
 805f05e:	3304      	adds	r3, #4
 805f060:	61bb      	str	r3, [r7, #24]
 805f062:	6979      	ldr	r1, [r7, #20]
 805f064:	2002      	movs	r0, #2
 805f066:	f7fe fe85 	bl	805dd74 <vl53l5_decode_uint16_t>
 805f06a:	4603      	mov	r3, r0
 805f06c:	461a      	mov	r2, r3
 805f06e:	687b      	ldr	r3, [r7, #4]
 805f070:	819a      	strh	r2, [r3, #12]
 805f072:	697b      	ldr	r3, [r7, #20]
 805f074:	3302      	adds	r3, #2
 805f076:	617b      	str	r3, [r7, #20]
 805f078:	69bb      	ldr	r3, [r7, #24]
 805f07a:	3302      	adds	r3, #2
 805f07c:	61bb      	str	r3, [r7, #24]
 805f07e:	6979      	ldr	r1, [r7, #20]
 805f080:	2002      	movs	r0, #2
 805f082:	f7fe fe77 	bl	805dd74 <vl53l5_decode_uint16_t>
 805f086:	4603      	mov	r3, r0
 805f088:	461a      	mov	r2, r3
 805f08a:	687b      	ldr	r3, [r7, #4]
 805f08c:	81da      	strh	r2, [r3, #14]
 805f08e:	697b      	ldr	r3, [r7, #20]
 805f090:	3302      	adds	r3, #2
 805f092:	617b      	str	r3, [r7, #20]
 805f094:	69bb      	ldr	r3, [r7, #24]
 805f096:	3302      	adds	r3, #2
 805f098:	61bb      	str	r3, [r7, #24]
 805f09a:	6979      	ldr	r1, [r7, #20]
 805f09c:	2002      	movs	r0, #2
 805f09e:	f7fe fe69 	bl	805dd74 <vl53l5_decode_uint16_t>
 805f0a2:	4603      	mov	r3, r0
 805f0a4:	461a      	mov	r2, r3
 805f0a6:	687b      	ldr	r3, [r7, #4]
 805f0a8:	821a      	strh	r2, [r3, #16]
 805f0aa:	697b      	ldr	r3, [r7, #20]
 805f0ac:	3302      	adds	r3, #2
 805f0ae:	617b      	str	r3, [r7, #20]
 805f0b0:	69bb      	ldr	r3, [r7, #24]
 805f0b2:	3302      	adds	r3, #2
 805f0b4:	61bb      	str	r3, [r7, #24]
 805f0b6:	6979      	ldr	r1, [r7, #20]
 805f0b8:	2002      	movs	r0, #2
 805f0ba:	f7fe fe5b 	bl	805dd74 <vl53l5_decode_uint16_t>
 805f0be:	4603      	mov	r3, r0
 805f0c0:	461a      	mov	r2, r3
 805f0c2:	687b      	ldr	r3, [r7, #4]
 805f0c4:	825a      	strh	r2, [r3, #18]
 805f0c6:	697b      	ldr	r3, [r7, #20]
 805f0c8:	3302      	adds	r3, #2
 805f0ca:	617b      	str	r3, [r7, #20]
 805f0cc:	69bb      	ldr	r3, [r7, #24]
 805f0ce:	3302      	adds	r3, #2
 805f0d0:	61bb      	str	r3, [r7, #24]
 805f0d2:	68fa      	ldr	r2, [r7, #12]
 805f0d4:	69bb      	ldr	r3, [r7, #24]
 805f0d6:	429a      	cmp	r2, r3
 805f0d8:	d003      	beq.n	805f0e2 <_decode_cal_grp_phase_stats+0xf4>
 805f0da:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 805f0de:	61fb      	str	r3, [r7, #28]
 805f0e0:	e000      	b.n	805f0e4 <_decode_cal_grp_phase_stats+0xf6>
 805f0e2:	bf00      	nop
 805f0e4:	69fb      	ldr	r3, [r7, #28]
 805f0e6:	4618      	mov	r0, r3
 805f0e8:	3720      	adds	r7, #32
 805f0ea:	46bd      	mov	sp, r7
 805f0ec:	bd80      	pop	{r7, pc}

0805f0ee <_decode_cal_grp_temperature_stats>:
 805f0ee:	b580      	push	{r7, lr}
 805f0f0:	b088      	sub	sp, #32
 805f0f2:	af00      	add	r7, sp, #0
 805f0f4:	60f8      	str	r0, [r7, #12]
 805f0f6:	60b9      	str	r1, [r7, #8]
 805f0f8:	607a      	str	r2, [r7, #4]
 805f0fa:	2300      	movs	r3, #0
 805f0fc:	61fb      	str	r3, [r7, #28]
 805f0fe:	2300      	movs	r3, #0
 805f100:	61bb      	str	r3, [r7, #24]
 805f102:	68bb      	ldr	r3, [r7, #8]
 805f104:	617b      	str	r3, [r7, #20]
 805f106:	68fb      	ldr	r3, [r7, #12]
 805f108:	2b04      	cmp	r3, #4
 805f10a:	d903      	bls.n	805f114 <_decode_cal_grp_temperature_stats+0x26>
 805f10c:	f06f 0304 	mvn.w	r3, #4
 805f110:	61fb      	str	r3, [r7, #28]
 805f112:	e040      	b.n	805f196 <_decode_cal_grp_temperature_stats+0xa8>
 805f114:	6979      	ldr	r1, [r7, #20]
 805f116:	2001      	movs	r0, #1
 805f118:	f7fe fe1d 	bl	805dd56 <vl53l5_decode_int8_t>
 805f11c:	4603      	mov	r3, r0
 805f11e:	461a      	mov	r2, r3
 805f120:	687b      	ldr	r3, [r7, #4]
 805f122:	701a      	strb	r2, [r3, #0]
 805f124:	697b      	ldr	r3, [r7, #20]
 805f126:	3301      	adds	r3, #1
 805f128:	617b      	str	r3, [r7, #20]
 805f12a:	69bb      	ldr	r3, [r7, #24]
 805f12c:	3301      	adds	r3, #1
 805f12e:	61bb      	str	r3, [r7, #24]
 805f130:	6979      	ldr	r1, [r7, #20]
 805f132:	2001      	movs	r0, #1
 805f134:	f7fe fe0f 	bl	805dd56 <vl53l5_decode_int8_t>
 805f138:	4603      	mov	r3, r0
 805f13a:	461a      	mov	r2, r3
 805f13c:	687b      	ldr	r3, [r7, #4]
 805f13e:	705a      	strb	r2, [r3, #1]
 805f140:	697b      	ldr	r3, [r7, #20]
 805f142:	3301      	adds	r3, #1
 805f144:	617b      	str	r3, [r7, #20]
 805f146:	69bb      	ldr	r3, [r7, #24]
 805f148:	3301      	adds	r3, #1
 805f14a:	61bb      	str	r3, [r7, #24]
 805f14c:	6979      	ldr	r1, [r7, #20]
 805f14e:	2001      	movs	r0, #1
 805f150:	f7fe fe01 	bl	805dd56 <vl53l5_decode_int8_t>
 805f154:	4603      	mov	r3, r0
 805f156:	461a      	mov	r2, r3
 805f158:	687b      	ldr	r3, [r7, #4]
 805f15a:	709a      	strb	r2, [r3, #2]
 805f15c:	697b      	ldr	r3, [r7, #20]
 805f15e:	3301      	adds	r3, #1
 805f160:	617b      	str	r3, [r7, #20]
 805f162:	69bb      	ldr	r3, [r7, #24]
 805f164:	3301      	adds	r3, #1
 805f166:	61bb      	str	r3, [r7, #24]
 805f168:	6979      	ldr	r1, [r7, #20]
 805f16a:	2001      	movs	r0, #1
 805f16c:	f7fe fdf3 	bl	805dd56 <vl53l5_decode_int8_t>
 805f170:	4603      	mov	r3, r0
 805f172:	461a      	mov	r2, r3
 805f174:	687b      	ldr	r3, [r7, #4]
 805f176:	70da      	strb	r2, [r3, #3]
 805f178:	697b      	ldr	r3, [r7, #20]
 805f17a:	3301      	adds	r3, #1
 805f17c:	617b      	str	r3, [r7, #20]
 805f17e:	69bb      	ldr	r3, [r7, #24]
 805f180:	3301      	adds	r3, #1
 805f182:	61bb      	str	r3, [r7, #24]
 805f184:	68fa      	ldr	r2, [r7, #12]
 805f186:	69bb      	ldr	r3, [r7, #24]
 805f188:	429a      	cmp	r2, r3
 805f18a:	d003      	beq.n	805f194 <_decode_cal_grp_temperature_stats+0xa6>
 805f18c:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 805f190:	61fb      	str	r3, [r7, #28]
 805f192:	e000      	b.n	805f196 <_decode_cal_grp_temperature_stats+0xa8>
 805f194:	bf00      	nop
 805f196:	69fb      	ldr	r3, [r7, #28]
 805f198:	4618      	mov	r0, r3
 805f19a:	3720      	adds	r7, #32
 805f19c:	46bd      	mov	sp, r7
 805f19e:	bd80      	pop	{r7, pc}

0805f1a0 <_decode_cggdrkps_cal_grid_data_rate_kcps_per_spad>:
 805f1a0:	b580      	push	{r7, lr}
 805f1a2:	b088      	sub	sp, #32
 805f1a4:	af00      	add	r7, sp, #0
 805f1a6:	60f8      	str	r0, [r7, #12]
 805f1a8:	60b9      	str	r1, [r7, #8]
 805f1aa:	607a      	str	r2, [r7, #4]
 805f1ac:	2300      	movs	r3, #0
 805f1ae:	61fb      	str	r3, [r7, #28]
 805f1b0:	2300      	movs	r3, #0
 805f1b2:	61bb      	str	r3, [r7, #24]
 805f1b4:	68bb      	ldr	r3, [r7, #8]
 805f1b6:	617b      	str	r3, [r7, #20]
 805f1b8:	2300      	movs	r3, #0
 805f1ba:	613b      	str	r3, [r7, #16]
 805f1bc:	68fb      	ldr	r3, [r7, #12]
 805f1be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 805f1c2:	d915      	bls.n	805f1f0 <_decode_cggdrkps_cal_grid_data_rate_kcps_per_spad+0x50>
 805f1c4:	f06f 0304 	mvn.w	r3, #4
 805f1c8:	61fb      	str	r3, [r7, #28]
 805f1ca:	e01e      	b.n	805f20a <_decode_cggdrkps_cal_grid_data_rate_kcps_per_spad+0x6a>
 805f1cc:	6979      	ldr	r1, [r7, #20]
 805f1ce:	2004      	movs	r0, #4
 805f1d0:	f7fe fe6a 	bl	805dea8 <vl53l5_decode_uint32_t>
 805f1d4:	4601      	mov	r1, r0
 805f1d6:	687b      	ldr	r3, [r7, #4]
 805f1d8:	693a      	ldr	r2, [r7, #16]
 805f1da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 805f1de:	697b      	ldr	r3, [r7, #20]
 805f1e0:	3304      	adds	r3, #4
 805f1e2:	617b      	str	r3, [r7, #20]
 805f1e4:	69bb      	ldr	r3, [r7, #24]
 805f1e6:	3304      	adds	r3, #4
 805f1e8:	61bb      	str	r3, [r7, #24]
 805f1ea:	693b      	ldr	r3, [r7, #16]
 805f1ec:	3301      	adds	r3, #1
 805f1ee:	613b      	str	r3, [r7, #16]
 805f1f0:	69ba      	ldr	r2, [r7, #24]
 805f1f2:	68fb      	ldr	r3, [r7, #12]
 805f1f4:	429a      	cmp	r2, r3
 805f1f6:	d3e9      	bcc.n	805f1cc <_decode_cggdrkps_cal_grid_data_rate_kcps_per_spad+0x2c>
 805f1f8:	68fa      	ldr	r2, [r7, #12]
 805f1fa:	69bb      	ldr	r3, [r7, #24]
 805f1fc:	429a      	cmp	r2, r3
 805f1fe:	d003      	beq.n	805f208 <_decode_cggdrkps_cal_grid_data_rate_kcps_per_spad+0x68>
 805f200:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 805f204:	61fb      	str	r3, [r7, #28]
 805f206:	e000      	b.n	805f20a <_decode_cggdrkps_cal_grid_data_rate_kcps_per_spad+0x6a>
 805f208:	bf00      	nop
 805f20a:	69fb      	ldr	r3, [r7, #28]
 805f20c:	4618      	mov	r0, r3
 805f20e:	3720      	adds	r7, #32
 805f210:	46bd      	mov	sp, r7
 805f212:	bd80      	pop	{r7, pc}

0805f214 <_decode_cggdesc_cal_grid_data_effective_spad_count>:
 805f214:	b580      	push	{r7, lr}
 805f216:	b088      	sub	sp, #32
 805f218:	af00      	add	r7, sp, #0
 805f21a:	60f8      	str	r0, [r7, #12]
 805f21c:	60b9      	str	r1, [r7, #8]
 805f21e:	607a      	str	r2, [r7, #4]
 805f220:	2300      	movs	r3, #0
 805f222:	61fb      	str	r3, [r7, #28]
 805f224:	2300      	movs	r3, #0
 805f226:	61bb      	str	r3, [r7, #24]
 805f228:	68bb      	ldr	r3, [r7, #8]
 805f22a:	617b      	str	r3, [r7, #20]
 805f22c:	2300      	movs	r3, #0
 805f22e:	613b      	str	r3, [r7, #16]
 805f230:	68fb      	ldr	r3, [r7, #12]
 805f232:	2b80      	cmp	r3, #128	; 0x80
 805f234:	d916      	bls.n	805f264 <_decode_cggdesc_cal_grid_data_effective_spad_count+0x50>
 805f236:	f06f 0304 	mvn.w	r3, #4
 805f23a:	61fb      	str	r3, [r7, #28]
 805f23c:	e01f      	b.n	805f27e <_decode_cggdesc_cal_grid_data_effective_spad_count+0x6a>
 805f23e:	6979      	ldr	r1, [r7, #20]
 805f240:	2002      	movs	r0, #2
 805f242:	f7fe fd97 	bl	805dd74 <vl53l5_decode_uint16_t>
 805f246:	4603      	mov	r3, r0
 805f248:	4619      	mov	r1, r3
 805f24a:	687b      	ldr	r3, [r7, #4]
 805f24c:	693a      	ldr	r2, [r7, #16]
 805f24e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 805f252:	697b      	ldr	r3, [r7, #20]
 805f254:	3302      	adds	r3, #2
 805f256:	617b      	str	r3, [r7, #20]
 805f258:	69bb      	ldr	r3, [r7, #24]
 805f25a:	3302      	adds	r3, #2
 805f25c:	61bb      	str	r3, [r7, #24]
 805f25e:	693b      	ldr	r3, [r7, #16]
 805f260:	3301      	adds	r3, #1
 805f262:	613b      	str	r3, [r7, #16]
 805f264:	69ba      	ldr	r2, [r7, #24]
 805f266:	68fb      	ldr	r3, [r7, #12]
 805f268:	429a      	cmp	r2, r3
 805f26a:	d3e8      	bcc.n	805f23e <_decode_cggdesc_cal_grid_data_effective_spad_count+0x2a>
 805f26c:	68fa      	ldr	r2, [r7, #12]
 805f26e:	69bb      	ldr	r3, [r7, #24]
 805f270:	429a      	cmp	r2, r3
 805f272:	d003      	beq.n	805f27c <_decode_cggdesc_cal_grid_data_effective_spad_count+0x68>
 805f274:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 805f278:	61fb      	str	r3, [r7, #28]
 805f27a:	e000      	b.n	805f27e <_decode_cggdesc_cal_grid_data_effective_spad_count+0x6a>
 805f27c:	bf00      	nop
 805f27e:	69fb      	ldr	r3, [r7, #28]
 805f280:	4618      	mov	r0, r3
 805f282:	3720      	adds	r7, #32
 805f284:	46bd      	mov	sp, r7
 805f286:	bd80      	pop	{r7, pc}

0805f288 <_decode_cal_grp_grid_data_range_mm_cal_grid_data_range_mm>:
 805f288:	b580      	push	{r7, lr}
 805f28a:	b088      	sub	sp, #32
 805f28c:	af00      	add	r7, sp, #0
 805f28e:	60f8      	str	r0, [r7, #12]
 805f290:	60b9      	str	r1, [r7, #8]
 805f292:	607a      	str	r2, [r7, #4]
 805f294:	2300      	movs	r3, #0
 805f296:	61fb      	str	r3, [r7, #28]
 805f298:	2300      	movs	r3, #0
 805f29a:	61bb      	str	r3, [r7, #24]
 805f29c:	68bb      	ldr	r3, [r7, #8]
 805f29e:	617b      	str	r3, [r7, #20]
 805f2a0:	2300      	movs	r3, #0
 805f2a2:	613b      	str	r3, [r7, #16]
 805f2a4:	68fb      	ldr	r3, [r7, #12]
 805f2a6:	2b80      	cmp	r3, #128	; 0x80
 805f2a8:	d916      	bls.n	805f2d8 <_decode_cal_grp_grid_data_range_mm_cal_grid_data_range_mm+0x50>
 805f2aa:	f06f 0304 	mvn.w	r3, #4
 805f2ae:	61fb      	str	r3, [r7, #28]
 805f2b0:	e01f      	b.n	805f2f2 <_decode_cal_grp_grid_data_range_mm_cal_grid_data_range_mm+0x6a>
 805f2b2:	6979      	ldr	r1, [r7, #20]
 805f2b4:	2002      	movs	r0, #2
 805f2b6:	f7fe fd7d 	bl	805ddb4 <vl53l5_decode_int16_t>
 805f2ba:	4603      	mov	r3, r0
 805f2bc:	4619      	mov	r1, r3
 805f2be:	687b      	ldr	r3, [r7, #4]
 805f2c0:	693a      	ldr	r2, [r7, #16]
 805f2c2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 805f2c6:	697b      	ldr	r3, [r7, #20]
 805f2c8:	3302      	adds	r3, #2
 805f2ca:	617b      	str	r3, [r7, #20]
 805f2cc:	69bb      	ldr	r3, [r7, #24]
 805f2ce:	3302      	adds	r3, #2
 805f2d0:	61bb      	str	r3, [r7, #24]
 805f2d2:	693b      	ldr	r3, [r7, #16]
 805f2d4:	3301      	adds	r3, #1
 805f2d6:	613b      	str	r3, [r7, #16]
 805f2d8:	69ba      	ldr	r2, [r7, #24]
 805f2da:	68fb      	ldr	r3, [r7, #12]
 805f2dc:	429a      	cmp	r2, r3
 805f2de:	d3e8      	bcc.n	805f2b2 <_decode_cal_grp_grid_data_range_mm_cal_grid_data_range_mm+0x2a>
 805f2e0:	68fa      	ldr	r2, [r7, #12]
 805f2e2:	69bb      	ldr	r3, [r7, #24]
 805f2e4:	429a      	cmp	r2, r3
 805f2e6:	d003      	beq.n	805f2f0 <_decode_cal_grp_grid_data_range_mm_cal_grid_data_range_mm+0x68>
 805f2e8:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 805f2ec:	61fb      	str	r3, [r7, #28]
 805f2ee:	e000      	b.n	805f2f2 <_decode_cal_grp_grid_data_range_mm_cal_grid_data_range_mm+0x6a>
 805f2f0:	bf00      	nop
 805f2f2:	69fb      	ldr	r3, [r7, #28]
 805f2f4:	4618      	mov	r0, r3
 805f2f6:	3720      	adds	r7, #32
 805f2f8:	46bd      	mov	sp, r7
 805f2fa:	bd80      	pop	{r7, pc}

0805f2fc <_decode_cal_grp_status>:
 805f2fc:	b580      	push	{r7, lr}
 805f2fe:	b088      	sub	sp, #32
 805f300:	af00      	add	r7, sp, #0
 805f302:	60f8      	str	r0, [r7, #12]
 805f304:	60b9      	str	r1, [r7, #8]
 805f306:	607a      	str	r2, [r7, #4]
 805f308:	2300      	movs	r3, #0
 805f30a:	61fb      	str	r3, [r7, #28]
 805f30c:	2300      	movs	r3, #0
 805f30e:	61bb      	str	r3, [r7, #24]
 805f310:	68bb      	ldr	r3, [r7, #8]
 805f312:	617b      	str	r3, [r7, #20]
 805f314:	68fb      	ldr	r3, [r7, #12]
 805f316:	2b10      	cmp	r3, #16
 805f318:	d903      	bls.n	805f322 <_decode_cal_grp_status+0x26>
 805f31a:	f06f 0304 	mvn.w	r3, #4
 805f31e:	61fb      	str	r3, [r7, #28]
 805f320:	e03c      	b.n	805f39c <_decode_cal_grp_status+0xa0>
 805f322:	6979      	ldr	r1, [r7, #20]
 805f324:	2004      	movs	r0, #4
 805f326:	f7fe fd71 	bl	805de0c <vl53l5_decode_int32_t>
 805f32a:	4602      	mov	r2, r0
 805f32c:	687b      	ldr	r3, [r7, #4]
 805f32e:	601a      	str	r2, [r3, #0]
 805f330:	697b      	ldr	r3, [r7, #20]
 805f332:	3304      	adds	r3, #4
 805f334:	617b      	str	r3, [r7, #20]
 805f336:	69bb      	ldr	r3, [r7, #24]
 805f338:	3304      	adds	r3, #4
 805f33a:	61bb      	str	r3, [r7, #24]
 805f33c:	6979      	ldr	r1, [r7, #20]
 805f33e:	2004      	movs	r0, #4
 805f340:	f7fe fd64 	bl	805de0c <vl53l5_decode_int32_t>
 805f344:	4602      	mov	r2, r0
 805f346:	687b      	ldr	r3, [r7, #4]
 805f348:	605a      	str	r2, [r3, #4]
 805f34a:	697b      	ldr	r3, [r7, #20]
 805f34c:	3304      	adds	r3, #4
 805f34e:	617b      	str	r3, [r7, #20]
 805f350:	69bb      	ldr	r3, [r7, #24]
 805f352:	3304      	adds	r3, #4
 805f354:	61bb      	str	r3, [r7, #24]
 805f356:	6979      	ldr	r1, [r7, #20]
 805f358:	2004      	movs	r0, #4
 805f35a:	f7fe fd57 	bl	805de0c <vl53l5_decode_int32_t>
 805f35e:	4602      	mov	r2, r0
 805f360:	687b      	ldr	r3, [r7, #4]
 805f362:	609a      	str	r2, [r3, #8]
 805f364:	697b      	ldr	r3, [r7, #20]
 805f366:	3304      	adds	r3, #4
 805f368:	617b      	str	r3, [r7, #20]
 805f36a:	69bb      	ldr	r3, [r7, #24]
 805f36c:	3304      	adds	r3, #4
 805f36e:	61bb      	str	r3, [r7, #24]
 805f370:	6979      	ldr	r1, [r7, #20]
 805f372:	2004      	movs	r0, #4
 805f374:	f7fe fd4a 	bl	805de0c <vl53l5_decode_int32_t>
 805f378:	4602      	mov	r2, r0
 805f37a:	687b      	ldr	r3, [r7, #4]
 805f37c:	60da      	str	r2, [r3, #12]
 805f37e:	697b      	ldr	r3, [r7, #20]
 805f380:	3304      	adds	r3, #4
 805f382:	617b      	str	r3, [r7, #20]
 805f384:	69bb      	ldr	r3, [r7, #24]
 805f386:	3304      	adds	r3, #4
 805f388:	61bb      	str	r3, [r7, #24]
 805f38a:	68fa      	ldr	r2, [r7, #12]
 805f38c:	69bb      	ldr	r3, [r7, #24]
 805f38e:	429a      	cmp	r2, r3
 805f390:	d003      	beq.n	805f39a <_decode_cal_grp_status+0x9e>
 805f392:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 805f396:	61fb      	str	r3, [r7, #28]
 805f398:	e000      	b.n	805f39c <_decode_cal_grp_status+0xa0>
 805f39a:	bf00      	nop
 805f39c:	69fb      	ldr	r3, [r7, #28]
 805f39e:	4618      	mov	r0, r3
 805f3a0:	3720      	adds	r7, #32
 805f3a2:	46bd      	mov	sp, r7
 805f3a4:	bd80      	pop	{r7, pc}

0805f3a6 <_decode_cal_grp_xtalk_shape_meta>:
 805f3a6:	b580      	push	{r7, lr}
 805f3a8:	b088      	sub	sp, #32
 805f3aa:	af00      	add	r7, sp, #0
 805f3ac:	60f8      	str	r0, [r7, #12]
 805f3ae:	60b9      	str	r1, [r7, #8]
 805f3b0:	607a      	str	r2, [r7, #4]
 805f3b2:	2300      	movs	r3, #0
 805f3b4:	61fb      	str	r3, [r7, #28]
 805f3b6:	2300      	movs	r3, #0
 805f3b8:	61bb      	str	r3, [r7, #24]
 805f3ba:	68bb      	ldr	r3, [r7, #8]
 805f3bc:	617b      	str	r3, [r7, #20]
 805f3be:	68fb      	ldr	r3, [r7, #12]
 805f3c0:	2b0c      	cmp	r3, #12
 805f3c2:	d903      	bls.n	805f3cc <_decode_cal_grp_xtalk_shape_meta+0x26>
 805f3c4:	f06f 0304 	mvn.w	r3, #4
 805f3c8:	61fb      	str	r3, [r7, #28]
 805f3ca:	e077      	b.n	805f4bc <_decode_cal_grp_xtalk_shape_meta+0x116>
 805f3cc:	6979      	ldr	r1, [r7, #20]
 805f3ce:	2004      	movs	r0, #4
 805f3d0:	f7fe fd6a 	bl	805dea8 <vl53l5_decode_uint32_t>
 805f3d4:	4602      	mov	r2, r0
 805f3d6:	687b      	ldr	r3, [r7, #4]
 805f3d8:	601a      	str	r2, [r3, #0]
 805f3da:	697b      	ldr	r3, [r7, #20]
 805f3dc:	3304      	adds	r3, #4
 805f3de:	617b      	str	r3, [r7, #20]
 805f3e0:	69bb      	ldr	r3, [r7, #24]
 805f3e2:	3304      	adds	r3, #4
 805f3e4:	61bb      	str	r3, [r7, #24]
 805f3e6:	6979      	ldr	r1, [r7, #20]
 805f3e8:	2002      	movs	r0, #2
 805f3ea:	f7fe fcc3 	bl	805dd74 <vl53l5_decode_uint16_t>
 805f3ee:	4603      	mov	r3, r0
 805f3f0:	461a      	mov	r2, r3
 805f3f2:	687b      	ldr	r3, [r7, #4]
 805f3f4:	809a      	strh	r2, [r3, #4]
 805f3f6:	697b      	ldr	r3, [r7, #20]
 805f3f8:	3302      	adds	r3, #2
 805f3fa:	617b      	str	r3, [r7, #20]
 805f3fc:	69bb      	ldr	r3, [r7, #24]
 805f3fe:	3302      	adds	r3, #2
 805f400:	61bb      	str	r3, [r7, #24]
 805f402:	6979      	ldr	r1, [r7, #20]
 805f404:	2001      	movs	r0, #1
 805f406:	f7fe fc98 	bl	805dd3a <vl53l5_decode_uint8_t>
 805f40a:	4603      	mov	r3, r0
 805f40c:	461a      	mov	r2, r3
 805f40e:	687b      	ldr	r3, [r7, #4]
 805f410:	719a      	strb	r2, [r3, #6]
 805f412:	697b      	ldr	r3, [r7, #20]
 805f414:	3301      	adds	r3, #1
 805f416:	617b      	str	r3, [r7, #20]
 805f418:	69bb      	ldr	r3, [r7, #24]
 805f41a:	3301      	adds	r3, #1
 805f41c:	61bb      	str	r3, [r7, #24]
 805f41e:	6979      	ldr	r1, [r7, #20]
 805f420:	2001      	movs	r0, #1
 805f422:	f7fe fc8a 	bl	805dd3a <vl53l5_decode_uint8_t>
 805f426:	4603      	mov	r3, r0
 805f428:	461a      	mov	r2, r3
 805f42a:	687b      	ldr	r3, [r7, #4]
 805f42c:	71da      	strb	r2, [r3, #7]
 805f42e:	697b      	ldr	r3, [r7, #20]
 805f430:	3301      	adds	r3, #1
 805f432:	617b      	str	r3, [r7, #20]
 805f434:	69bb      	ldr	r3, [r7, #24]
 805f436:	3301      	adds	r3, #1
 805f438:	61bb      	str	r3, [r7, #24]
 805f43a:	6979      	ldr	r1, [r7, #20]
 805f43c:	2001      	movs	r0, #1
 805f43e:	f7fe fc8a 	bl	805dd56 <vl53l5_decode_int8_t>
 805f442:	4603      	mov	r3, r0
 805f444:	461a      	mov	r2, r3
 805f446:	687b      	ldr	r3, [r7, #4]
 805f448:	721a      	strb	r2, [r3, #8]
 805f44a:	697b      	ldr	r3, [r7, #20]
 805f44c:	3301      	adds	r3, #1
 805f44e:	617b      	str	r3, [r7, #20]
 805f450:	69bb      	ldr	r3, [r7, #24]
 805f452:	3301      	adds	r3, #1
 805f454:	61bb      	str	r3, [r7, #24]
 805f456:	6979      	ldr	r1, [r7, #20]
 805f458:	2001      	movs	r0, #1
 805f45a:	f7fe fc6e 	bl	805dd3a <vl53l5_decode_uint8_t>
 805f45e:	4603      	mov	r3, r0
 805f460:	461a      	mov	r2, r3
 805f462:	687b      	ldr	r3, [r7, #4]
 805f464:	725a      	strb	r2, [r3, #9]
 805f466:	697b      	ldr	r3, [r7, #20]
 805f468:	3301      	adds	r3, #1
 805f46a:	617b      	str	r3, [r7, #20]
 805f46c:	69bb      	ldr	r3, [r7, #24]
 805f46e:	3301      	adds	r3, #1
 805f470:	61bb      	str	r3, [r7, #24]
 805f472:	6979      	ldr	r1, [r7, #20]
 805f474:	2001      	movs	r0, #1
 805f476:	f7fe fc60 	bl	805dd3a <vl53l5_decode_uint8_t>
 805f47a:	4603      	mov	r3, r0
 805f47c:	461a      	mov	r2, r3
 805f47e:	687b      	ldr	r3, [r7, #4]
 805f480:	729a      	strb	r2, [r3, #10]
 805f482:	697b      	ldr	r3, [r7, #20]
 805f484:	3301      	adds	r3, #1
 805f486:	617b      	str	r3, [r7, #20]
 805f488:	69bb      	ldr	r3, [r7, #24]
 805f48a:	3301      	adds	r3, #1
 805f48c:	61bb      	str	r3, [r7, #24]
 805f48e:	6979      	ldr	r1, [r7, #20]
 805f490:	2001      	movs	r0, #1
 805f492:	f7fe fc52 	bl	805dd3a <vl53l5_decode_uint8_t>
 805f496:	4603      	mov	r3, r0
 805f498:	461a      	mov	r2, r3
 805f49a:	687b      	ldr	r3, [r7, #4]
 805f49c:	72da      	strb	r2, [r3, #11]
 805f49e:	697b      	ldr	r3, [r7, #20]
 805f4a0:	3301      	adds	r3, #1
 805f4a2:	617b      	str	r3, [r7, #20]
 805f4a4:	69bb      	ldr	r3, [r7, #24]
 805f4a6:	3301      	adds	r3, #1
 805f4a8:	61bb      	str	r3, [r7, #24]
 805f4aa:	68fa      	ldr	r2, [r7, #12]
 805f4ac:	69bb      	ldr	r3, [r7, #24]
 805f4ae:	429a      	cmp	r2, r3
 805f4b0:	d003      	beq.n	805f4ba <_decode_cal_grp_xtalk_shape_meta+0x114>
 805f4b2:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 805f4b6:	61fb      	str	r3, [r7, #28]
 805f4b8:	e000      	b.n	805f4bc <_decode_cal_grp_xtalk_shape_meta+0x116>
 805f4ba:	bf00      	nop
 805f4bc:	69fb      	ldr	r3, [r7, #28]
 805f4be:	4618      	mov	r0, r3
 805f4c0:	3720      	adds	r7, #32
 805f4c2:	46bd      	mov	sp, r7
 805f4c4:	bd80      	pop	{r7, pc}

0805f4c6 <_decode_cal_grp_xtalk_shape_data_cal_xtalk_shape_bin_data>:
 805f4c6:	b580      	push	{r7, lr}
 805f4c8:	b088      	sub	sp, #32
 805f4ca:	af00      	add	r7, sp, #0
 805f4cc:	60f8      	str	r0, [r7, #12]
 805f4ce:	60b9      	str	r1, [r7, #8]
 805f4d0:	607a      	str	r2, [r7, #4]
 805f4d2:	2300      	movs	r3, #0
 805f4d4:	61fb      	str	r3, [r7, #28]
 805f4d6:	2300      	movs	r3, #0
 805f4d8:	61bb      	str	r3, [r7, #24]
 805f4da:	68bb      	ldr	r3, [r7, #8]
 805f4dc:	617b      	str	r3, [r7, #20]
 805f4de:	2300      	movs	r3, #0
 805f4e0:	613b      	str	r3, [r7, #16]
 805f4e2:	68fb      	ldr	r3, [r7, #12]
 805f4e4:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 805f4e8:	d916      	bls.n	805f518 <_decode_cal_grp_xtalk_shape_data_cal_xtalk_shape_bin_data+0x52>
 805f4ea:	f06f 0304 	mvn.w	r3, #4
 805f4ee:	61fb      	str	r3, [r7, #28]
 805f4f0:	e01f      	b.n	805f532 <_decode_cal_grp_xtalk_shape_data_cal_xtalk_shape_bin_data+0x6c>
 805f4f2:	6979      	ldr	r1, [r7, #20]
 805f4f4:	2002      	movs	r0, #2
 805f4f6:	f7fe fc3d 	bl	805dd74 <vl53l5_decode_uint16_t>
 805f4fa:	4603      	mov	r3, r0
 805f4fc:	4619      	mov	r1, r3
 805f4fe:	687b      	ldr	r3, [r7, #4]
 805f500:	693a      	ldr	r2, [r7, #16]
 805f502:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 805f506:	697b      	ldr	r3, [r7, #20]
 805f508:	3302      	adds	r3, #2
 805f50a:	617b      	str	r3, [r7, #20]
 805f50c:	69bb      	ldr	r3, [r7, #24]
 805f50e:	3302      	adds	r3, #2
 805f510:	61bb      	str	r3, [r7, #24]
 805f512:	693b      	ldr	r3, [r7, #16]
 805f514:	3301      	adds	r3, #1
 805f516:	613b      	str	r3, [r7, #16]
 805f518:	69ba      	ldr	r2, [r7, #24]
 805f51a:	68fb      	ldr	r3, [r7, #12]
 805f51c:	429a      	cmp	r2, r3
 805f51e:	d3e8      	bcc.n	805f4f2 <_decode_cal_grp_xtalk_shape_data_cal_xtalk_shape_bin_data+0x2c>
 805f520:	68fa      	ldr	r2, [r7, #12]
 805f522:	69bb      	ldr	r3, [r7, #24]
 805f524:	429a      	cmp	r2, r3
 805f526:	d003      	beq.n	805f530 <_decode_cal_grp_xtalk_shape_data_cal_xtalk_shape_bin_data+0x6a>
 805f528:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 805f52c:	61fb      	str	r3, [r7, #28]
 805f52e:	e000      	b.n	805f532 <_decode_cal_grp_xtalk_shape_data_cal_xtalk_shape_bin_data+0x6c>
 805f530:	bf00      	nop
 805f532:	69fb      	ldr	r3, [r7, #28]
 805f534:	4618      	mov	r0, r3
 805f536:	3720      	adds	r7, #32
 805f538:	46bd      	mov	sp, r7
 805f53a:	bd80      	pop	{r7, pc}

0805f53c <_decode_cal_grp_xtalk_mon_meta_data>:
 805f53c:	b580      	push	{r7, lr}
 805f53e:	b088      	sub	sp, #32
 805f540:	af00      	add	r7, sp, #0
 805f542:	60f8      	str	r0, [r7, #12]
 805f544:	60b9      	str	r1, [r7, #8]
 805f546:	607a      	str	r2, [r7, #4]
 805f548:	2300      	movs	r3, #0
 805f54a:	61fb      	str	r3, [r7, #28]
 805f54c:	2300      	movs	r3, #0
 805f54e:	61bb      	str	r3, [r7, #24]
 805f550:	68bb      	ldr	r3, [r7, #8]
 805f552:	617b      	str	r3, [r7, #20]
 805f554:	68fb      	ldr	r3, [r7, #12]
 805f556:	2b04      	cmp	r3, #4
 805f558:	d903      	bls.n	805f562 <_decode_cal_grp_xtalk_mon_meta_data+0x26>
 805f55a:	f06f 0304 	mvn.w	r3, #4
 805f55e:	61fb      	str	r3, [r7, #28]
 805f560:	e040      	b.n	805f5e4 <_decode_cal_grp_xtalk_mon_meta_data+0xa8>
 805f562:	6979      	ldr	r1, [r7, #20]
 805f564:	2001      	movs	r0, #1
 805f566:	f7fe fbe8 	bl	805dd3a <vl53l5_decode_uint8_t>
 805f56a:	4603      	mov	r3, r0
 805f56c:	461a      	mov	r2, r3
 805f56e:	687b      	ldr	r3, [r7, #4]
 805f570:	701a      	strb	r2, [r3, #0]
 805f572:	697b      	ldr	r3, [r7, #20]
 805f574:	3301      	adds	r3, #1
 805f576:	617b      	str	r3, [r7, #20]
 805f578:	69bb      	ldr	r3, [r7, #24]
 805f57a:	3301      	adds	r3, #1
 805f57c:	61bb      	str	r3, [r7, #24]
 805f57e:	6979      	ldr	r1, [r7, #20]
 805f580:	2001      	movs	r0, #1
 805f582:	f7fe fbda 	bl	805dd3a <vl53l5_decode_uint8_t>
 805f586:	4603      	mov	r3, r0
 805f588:	461a      	mov	r2, r3
 805f58a:	687b      	ldr	r3, [r7, #4]
 805f58c:	705a      	strb	r2, [r3, #1]
 805f58e:	697b      	ldr	r3, [r7, #20]
 805f590:	3301      	adds	r3, #1
 805f592:	617b      	str	r3, [r7, #20]
 805f594:	69bb      	ldr	r3, [r7, #24]
 805f596:	3301      	adds	r3, #1
 805f598:	61bb      	str	r3, [r7, #24]
 805f59a:	6979      	ldr	r1, [r7, #20]
 805f59c:	2001      	movs	r0, #1
 805f59e:	f7fe fbcc 	bl	805dd3a <vl53l5_decode_uint8_t>
 805f5a2:	4603      	mov	r3, r0
 805f5a4:	461a      	mov	r2, r3
 805f5a6:	687b      	ldr	r3, [r7, #4]
 805f5a8:	709a      	strb	r2, [r3, #2]
 805f5aa:	697b      	ldr	r3, [r7, #20]
 805f5ac:	3301      	adds	r3, #1
 805f5ae:	617b      	str	r3, [r7, #20]
 805f5b0:	69bb      	ldr	r3, [r7, #24]
 805f5b2:	3301      	adds	r3, #1
 805f5b4:	61bb      	str	r3, [r7, #24]
 805f5b6:	6979      	ldr	r1, [r7, #20]
 805f5b8:	2001      	movs	r0, #1
 805f5ba:	f7fe fbcc 	bl	805dd56 <vl53l5_decode_int8_t>
 805f5be:	4603      	mov	r3, r0
 805f5c0:	461a      	mov	r2, r3
 805f5c2:	687b      	ldr	r3, [r7, #4]
 805f5c4:	70da      	strb	r2, [r3, #3]
 805f5c6:	697b      	ldr	r3, [r7, #20]
 805f5c8:	3301      	adds	r3, #1
 805f5ca:	617b      	str	r3, [r7, #20]
 805f5cc:	69bb      	ldr	r3, [r7, #24]
 805f5ce:	3301      	adds	r3, #1
 805f5d0:	61bb      	str	r3, [r7, #24]
 805f5d2:	68fa      	ldr	r2, [r7, #12]
 805f5d4:	69bb      	ldr	r3, [r7, #24]
 805f5d6:	429a      	cmp	r2, r3
 805f5d8:	d003      	beq.n	805f5e2 <_decode_cal_grp_xtalk_mon_meta_data+0xa6>
 805f5da:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 805f5de:	61fb      	str	r3, [r7, #28]
 805f5e0:	e000      	b.n	805f5e4 <_decode_cal_grp_xtalk_mon_meta_data+0xa8>
 805f5e2:	bf00      	nop
 805f5e4:	69fb      	ldr	r3, [r7, #28]
 805f5e6:	4618      	mov	r0, r3
 805f5e8:	3720      	adds	r7, #32
 805f5ea:	46bd      	mov	sp, r7
 805f5ec:	bd80      	pop	{r7, pc}

0805f5ee <_decode_cal_grp_xtalk_mon_zones_cal_xmon_zone_x_off>:
 805f5ee:	b580      	push	{r7, lr}
 805f5f0:	b088      	sub	sp, #32
 805f5f2:	af00      	add	r7, sp, #0
 805f5f4:	60f8      	str	r0, [r7, #12]
 805f5f6:	60b9      	str	r1, [r7, #8]
 805f5f8:	607a      	str	r2, [r7, #4]
 805f5fa:	2300      	movs	r3, #0
 805f5fc:	61fb      	str	r3, [r7, #28]
 805f5fe:	2300      	movs	r3, #0
 805f600:	61bb      	str	r3, [r7, #24]
 805f602:	68bb      	ldr	r3, [r7, #8]
 805f604:	617b      	str	r3, [r7, #20]
 805f606:	2300      	movs	r3, #0
 805f608:	613b      	str	r3, [r7, #16]
 805f60a:	68fb      	ldr	r3, [r7, #12]
 805f60c:	2b08      	cmp	r3, #8
 805f60e:	d917      	bls.n	805f640 <_decode_cal_grp_xtalk_mon_zones_cal_xmon_zone_x_off+0x52>
 805f610:	f06f 0304 	mvn.w	r3, #4
 805f614:	61fb      	str	r3, [r7, #28]
 805f616:	e020      	b.n	805f65a <_decode_cal_grp_xtalk_mon_zones_cal_xmon_zone_x_off+0x6c>
 805f618:	6979      	ldr	r1, [r7, #20]
 805f61a:	2001      	movs	r0, #1
 805f61c:	f7fe fb8d 	bl	805dd3a <vl53l5_decode_uint8_t>
 805f620:	4603      	mov	r3, r0
 805f622:	4619      	mov	r1, r3
 805f624:	687a      	ldr	r2, [r7, #4]
 805f626:	693b      	ldr	r3, [r7, #16]
 805f628:	4413      	add	r3, r2
 805f62a:	460a      	mov	r2, r1
 805f62c:	701a      	strb	r2, [r3, #0]
 805f62e:	697b      	ldr	r3, [r7, #20]
 805f630:	3301      	adds	r3, #1
 805f632:	617b      	str	r3, [r7, #20]
 805f634:	69bb      	ldr	r3, [r7, #24]
 805f636:	3301      	adds	r3, #1
 805f638:	61bb      	str	r3, [r7, #24]
 805f63a:	693b      	ldr	r3, [r7, #16]
 805f63c:	3301      	adds	r3, #1
 805f63e:	613b      	str	r3, [r7, #16]
 805f640:	69ba      	ldr	r2, [r7, #24]
 805f642:	68fb      	ldr	r3, [r7, #12]
 805f644:	429a      	cmp	r2, r3
 805f646:	d3e7      	bcc.n	805f618 <_decode_cal_grp_xtalk_mon_zones_cal_xmon_zone_x_off+0x2a>
 805f648:	68fa      	ldr	r2, [r7, #12]
 805f64a:	69bb      	ldr	r3, [r7, #24]
 805f64c:	429a      	cmp	r2, r3
 805f64e:	d003      	beq.n	805f658 <_decode_cal_grp_xtalk_mon_zones_cal_xmon_zone_x_off+0x6a>
 805f650:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 805f654:	61fb      	str	r3, [r7, #28]
 805f656:	e000      	b.n	805f65a <_decode_cal_grp_xtalk_mon_zones_cal_xmon_zone_x_off+0x6c>
 805f658:	bf00      	nop
 805f65a:	69fb      	ldr	r3, [r7, #28]
 805f65c:	4618      	mov	r0, r3
 805f65e:	3720      	adds	r7, #32
 805f660:	46bd      	mov	sp, r7
 805f662:	bd80      	pop	{r7, pc}

0805f664 <_decode_cal_grp_xtalk_mon_zones_cal_xmon_zone_y_off>:
 805f664:	b580      	push	{r7, lr}
 805f666:	b088      	sub	sp, #32
 805f668:	af00      	add	r7, sp, #0
 805f66a:	60f8      	str	r0, [r7, #12]
 805f66c:	60b9      	str	r1, [r7, #8]
 805f66e:	607a      	str	r2, [r7, #4]
 805f670:	2300      	movs	r3, #0
 805f672:	61fb      	str	r3, [r7, #28]
 805f674:	2300      	movs	r3, #0
 805f676:	61bb      	str	r3, [r7, #24]
 805f678:	68bb      	ldr	r3, [r7, #8]
 805f67a:	617b      	str	r3, [r7, #20]
 805f67c:	2300      	movs	r3, #0
 805f67e:	613b      	str	r3, [r7, #16]
 805f680:	68fb      	ldr	r3, [r7, #12]
 805f682:	2b08      	cmp	r3, #8
 805f684:	d918      	bls.n	805f6b8 <_decode_cal_grp_xtalk_mon_zones_cal_xmon_zone_y_off+0x54>
 805f686:	f06f 0304 	mvn.w	r3, #4
 805f68a:	61fb      	str	r3, [r7, #28]
 805f68c:	e021      	b.n	805f6d2 <_decode_cal_grp_xtalk_mon_zones_cal_xmon_zone_y_off+0x6e>
 805f68e:	6979      	ldr	r1, [r7, #20]
 805f690:	2001      	movs	r0, #1
 805f692:	f7fe fb52 	bl	805dd3a <vl53l5_decode_uint8_t>
 805f696:	4603      	mov	r3, r0
 805f698:	4619      	mov	r1, r3
 805f69a:	687a      	ldr	r2, [r7, #4]
 805f69c:	693b      	ldr	r3, [r7, #16]
 805f69e:	4413      	add	r3, r2
 805f6a0:	3308      	adds	r3, #8
 805f6a2:	460a      	mov	r2, r1
 805f6a4:	701a      	strb	r2, [r3, #0]
 805f6a6:	697b      	ldr	r3, [r7, #20]
 805f6a8:	3301      	adds	r3, #1
 805f6aa:	617b      	str	r3, [r7, #20]
 805f6ac:	69bb      	ldr	r3, [r7, #24]
 805f6ae:	3301      	adds	r3, #1
 805f6b0:	61bb      	str	r3, [r7, #24]
 805f6b2:	693b      	ldr	r3, [r7, #16]
 805f6b4:	3301      	adds	r3, #1
 805f6b6:	613b      	str	r3, [r7, #16]
 805f6b8:	69ba      	ldr	r2, [r7, #24]
 805f6ba:	68fb      	ldr	r3, [r7, #12]
 805f6bc:	429a      	cmp	r2, r3
 805f6be:	d3e6      	bcc.n	805f68e <_decode_cal_grp_xtalk_mon_zones_cal_xmon_zone_y_off+0x2a>
 805f6c0:	68fa      	ldr	r2, [r7, #12]
 805f6c2:	69bb      	ldr	r3, [r7, #24]
 805f6c4:	429a      	cmp	r2, r3
 805f6c6:	d003      	beq.n	805f6d0 <_decode_cal_grp_xtalk_mon_zones_cal_xmon_zone_y_off+0x6c>
 805f6c8:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 805f6cc:	61fb      	str	r3, [r7, #28]
 805f6ce:	e000      	b.n	805f6d2 <_decode_cal_grp_xtalk_mon_zones_cal_xmon_zone_y_off+0x6e>
 805f6d0:	bf00      	nop
 805f6d2:	69fb      	ldr	r3, [r7, #28]
 805f6d4:	4618      	mov	r0, r3
 805f6d6:	3720      	adds	r7, #32
 805f6d8:	46bd      	mov	sp, r7
 805f6da:	bd80      	pop	{r7, pc}

0805f6dc <_decode_cal_grp_xtalk_mon_zones_cal_xmon_zone_width>:
 805f6dc:	b580      	push	{r7, lr}
 805f6de:	b088      	sub	sp, #32
 805f6e0:	af00      	add	r7, sp, #0
 805f6e2:	60f8      	str	r0, [r7, #12]
 805f6e4:	60b9      	str	r1, [r7, #8]
 805f6e6:	607a      	str	r2, [r7, #4]
 805f6e8:	2300      	movs	r3, #0
 805f6ea:	61fb      	str	r3, [r7, #28]
 805f6ec:	2300      	movs	r3, #0
 805f6ee:	61bb      	str	r3, [r7, #24]
 805f6f0:	68bb      	ldr	r3, [r7, #8]
 805f6f2:	617b      	str	r3, [r7, #20]
 805f6f4:	2300      	movs	r3, #0
 805f6f6:	613b      	str	r3, [r7, #16]
 805f6f8:	68fb      	ldr	r3, [r7, #12]
 805f6fa:	2b08      	cmp	r3, #8
 805f6fc:	d918      	bls.n	805f730 <_decode_cal_grp_xtalk_mon_zones_cal_xmon_zone_width+0x54>
 805f6fe:	f06f 0304 	mvn.w	r3, #4
 805f702:	61fb      	str	r3, [r7, #28]
 805f704:	e021      	b.n	805f74a <_decode_cal_grp_xtalk_mon_zones_cal_xmon_zone_width+0x6e>
 805f706:	6979      	ldr	r1, [r7, #20]
 805f708:	2001      	movs	r0, #1
 805f70a:	f7fe fb16 	bl	805dd3a <vl53l5_decode_uint8_t>
 805f70e:	4603      	mov	r3, r0
 805f710:	4619      	mov	r1, r3
 805f712:	687a      	ldr	r2, [r7, #4]
 805f714:	693b      	ldr	r3, [r7, #16]
 805f716:	4413      	add	r3, r2
 805f718:	3310      	adds	r3, #16
 805f71a:	460a      	mov	r2, r1
 805f71c:	701a      	strb	r2, [r3, #0]
 805f71e:	697b      	ldr	r3, [r7, #20]
 805f720:	3301      	adds	r3, #1
 805f722:	617b      	str	r3, [r7, #20]
 805f724:	69bb      	ldr	r3, [r7, #24]
 805f726:	3301      	adds	r3, #1
 805f728:	61bb      	str	r3, [r7, #24]
 805f72a:	693b      	ldr	r3, [r7, #16]
 805f72c:	3301      	adds	r3, #1
 805f72e:	613b      	str	r3, [r7, #16]
 805f730:	69ba      	ldr	r2, [r7, #24]
 805f732:	68fb      	ldr	r3, [r7, #12]
 805f734:	429a      	cmp	r2, r3
 805f736:	d3e6      	bcc.n	805f706 <_decode_cal_grp_xtalk_mon_zones_cal_xmon_zone_width+0x2a>
 805f738:	68fa      	ldr	r2, [r7, #12]
 805f73a:	69bb      	ldr	r3, [r7, #24]
 805f73c:	429a      	cmp	r2, r3
 805f73e:	d003      	beq.n	805f748 <_decode_cal_grp_xtalk_mon_zones_cal_xmon_zone_width+0x6c>
 805f740:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 805f744:	61fb      	str	r3, [r7, #28]
 805f746:	e000      	b.n	805f74a <_decode_cal_grp_xtalk_mon_zones_cal_xmon_zone_width+0x6e>
 805f748:	bf00      	nop
 805f74a:	69fb      	ldr	r3, [r7, #28]
 805f74c:	4618      	mov	r0, r3
 805f74e:	3720      	adds	r7, #32
 805f750:	46bd      	mov	sp, r7
 805f752:	bd80      	pop	{r7, pc}

0805f754 <_decode_cal_grp_xtalk_mon_zones_cal_xmon_zone_height>:
 805f754:	b580      	push	{r7, lr}
 805f756:	b088      	sub	sp, #32
 805f758:	af00      	add	r7, sp, #0
 805f75a:	60f8      	str	r0, [r7, #12]
 805f75c:	60b9      	str	r1, [r7, #8]
 805f75e:	607a      	str	r2, [r7, #4]
 805f760:	2300      	movs	r3, #0
 805f762:	61fb      	str	r3, [r7, #28]
 805f764:	2300      	movs	r3, #0
 805f766:	61bb      	str	r3, [r7, #24]
 805f768:	68bb      	ldr	r3, [r7, #8]
 805f76a:	617b      	str	r3, [r7, #20]
 805f76c:	2300      	movs	r3, #0
 805f76e:	613b      	str	r3, [r7, #16]
 805f770:	68fb      	ldr	r3, [r7, #12]
 805f772:	2b08      	cmp	r3, #8
 805f774:	d918      	bls.n	805f7a8 <_decode_cal_grp_xtalk_mon_zones_cal_xmon_zone_height+0x54>
 805f776:	f06f 0304 	mvn.w	r3, #4
 805f77a:	61fb      	str	r3, [r7, #28]
 805f77c:	e021      	b.n	805f7c2 <_decode_cal_grp_xtalk_mon_zones_cal_xmon_zone_height+0x6e>
 805f77e:	6979      	ldr	r1, [r7, #20]
 805f780:	2001      	movs	r0, #1
 805f782:	f7fe fada 	bl	805dd3a <vl53l5_decode_uint8_t>
 805f786:	4603      	mov	r3, r0
 805f788:	4619      	mov	r1, r3
 805f78a:	687a      	ldr	r2, [r7, #4]
 805f78c:	693b      	ldr	r3, [r7, #16]
 805f78e:	4413      	add	r3, r2
 805f790:	3318      	adds	r3, #24
 805f792:	460a      	mov	r2, r1
 805f794:	701a      	strb	r2, [r3, #0]
 805f796:	697b      	ldr	r3, [r7, #20]
 805f798:	3301      	adds	r3, #1
 805f79a:	617b      	str	r3, [r7, #20]
 805f79c:	69bb      	ldr	r3, [r7, #24]
 805f79e:	3301      	adds	r3, #1
 805f7a0:	61bb      	str	r3, [r7, #24]
 805f7a2:	693b      	ldr	r3, [r7, #16]
 805f7a4:	3301      	adds	r3, #1
 805f7a6:	613b      	str	r3, [r7, #16]
 805f7a8:	69ba      	ldr	r2, [r7, #24]
 805f7aa:	68fb      	ldr	r3, [r7, #12]
 805f7ac:	429a      	cmp	r2, r3
 805f7ae:	d3e6      	bcc.n	805f77e <_decode_cal_grp_xtalk_mon_zones_cal_xmon_zone_height+0x2a>
 805f7b0:	68fa      	ldr	r2, [r7, #12]
 805f7b2:	69bb      	ldr	r3, [r7, #24]
 805f7b4:	429a      	cmp	r2, r3
 805f7b6:	d003      	beq.n	805f7c0 <_decode_cal_grp_xtalk_mon_zones_cal_xmon_zone_height+0x6c>
 805f7b8:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 805f7bc:	61fb      	str	r3, [r7, #28]
 805f7be:	e000      	b.n	805f7c2 <_decode_cal_grp_xtalk_mon_zones_cal_xmon_zone_height+0x6e>
 805f7c0:	bf00      	nop
 805f7c2:	69fb      	ldr	r3, [r7, #28]
 805f7c4:	4618      	mov	r0, r3
 805f7c6:	3720      	adds	r7, #32
 805f7c8:	46bd      	mov	sp, r7
 805f7ca:	bd80      	pop	{r7, pc}

0805f7cc <_decode_cal_grp_xtalk_mon_data_cal_xmon_zone_rate_kcps_spad>:
 805f7cc:	b580      	push	{r7, lr}
 805f7ce:	b088      	sub	sp, #32
 805f7d0:	af00      	add	r7, sp, #0
 805f7d2:	60f8      	str	r0, [r7, #12]
 805f7d4:	60b9      	str	r1, [r7, #8]
 805f7d6:	607a      	str	r2, [r7, #4]
 805f7d8:	2300      	movs	r3, #0
 805f7da:	61fb      	str	r3, [r7, #28]
 805f7dc:	2300      	movs	r3, #0
 805f7de:	61bb      	str	r3, [r7, #24]
 805f7e0:	68bb      	ldr	r3, [r7, #8]
 805f7e2:	617b      	str	r3, [r7, #20]
 805f7e4:	2300      	movs	r3, #0
 805f7e6:	613b      	str	r3, [r7, #16]
 805f7e8:	68fb      	ldr	r3, [r7, #12]
 805f7ea:	2b20      	cmp	r3, #32
 805f7ec:	d915      	bls.n	805f81a <_decode_cal_grp_xtalk_mon_data_cal_xmon_zone_rate_kcps_spad+0x4e>
 805f7ee:	f06f 0304 	mvn.w	r3, #4
 805f7f2:	61fb      	str	r3, [r7, #28]
 805f7f4:	e01e      	b.n	805f834 <_decode_cal_grp_xtalk_mon_data_cal_xmon_zone_rate_kcps_spad+0x68>
 805f7f6:	6979      	ldr	r1, [r7, #20]
 805f7f8:	2004      	movs	r0, #4
 805f7fa:	f7fe fb55 	bl	805dea8 <vl53l5_decode_uint32_t>
 805f7fe:	4601      	mov	r1, r0
 805f800:	687b      	ldr	r3, [r7, #4]
 805f802:	693a      	ldr	r2, [r7, #16]
 805f804:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 805f808:	697b      	ldr	r3, [r7, #20]
 805f80a:	3304      	adds	r3, #4
 805f80c:	617b      	str	r3, [r7, #20]
 805f80e:	69bb      	ldr	r3, [r7, #24]
 805f810:	3304      	adds	r3, #4
 805f812:	61bb      	str	r3, [r7, #24]
 805f814:	693b      	ldr	r3, [r7, #16]
 805f816:	3301      	adds	r3, #1
 805f818:	613b      	str	r3, [r7, #16]
 805f81a:	69ba      	ldr	r2, [r7, #24]
 805f81c:	68fb      	ldr	r3, [r7, #12]
 805f81e:	429a      	cmp	r2, r3
 805f820:	d3e9      	bcc.n	805f7f6 <_decode_cal_grp_xtalk_mon_data_cal_xmon_zone_rate_kcps_spad+0x2a>
 805f822:	68fa      	ldr	r2, [r7, #12]
 805f824:	69bb      	ldr	r3, [r7, #24]
 805f826:	429a      	cmp	r2, r3
 805f828:	d003      	beq.n	805f832 <_decode_cal_grp_xtalk_mon_data_cal_xmon_zone_rate_kcps_spad+0x66>
 805f82a:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 805f82e:	61fb      	str	r3, [r7, #28]
 805f830:	e000      	b.n	805f834 <_decode_cal_grp_xtalk_mon_data_cal_xmon_zone_rate_kcps_spad+0x68>
 805f832:	bf00      	nop
 805f834:	69fb      	ldr	r3, [r7, #28]
 805f836:	4618      	mov	r0, r3
 805f838:	3720      	adds	r7, #32
 805f83a:	46bd      	mov	sp, r7
 805f83c:	bd80      	pop	{r7, pc}

0805f83e <_decode_cal_grp_xtalk_mon_data_cal_xmon_zone_avg_count>:
 805f83e:	b580      	push	{r7, lr}
 805f840:	b088      	sub	sp, #32
 805f842:	af00      	add	r7, sp, #0
 805f844:	60f8      	str	r0, [r7, #12]
 805f846:	60b9      	str	r1, [r7, #8]
 805f848:	607a      	str	r2, [r7, #4]
 805f84a:	2300      	movs	r3, #0
 805f84c:	61fb      	str	r3, [r7, #28]
 805f84e:	2300      	movs	r3, #0
 805f850:	61bb      	str	r3, [r7, #24]
 805f852:	68bb      	ldr	r3, [r7, #8]
 805f854:	617b      	str	r3, [r7, #20]
 805f856:	2300      	movs	r3, #0
 805f858:	613b      	str	r3, [r7, #16]
 805f85a:	68fb      	ldr	r3, [r7, #12]
 805f85c:	2b10      	cmp	r3, #16
 805f85e:	d917      	bls.n	805f890 <_decode_cal_grp_xtalk_mon_data_cal_xmon_zone_avg_count+0x52>
 805f860:	f06f 0304 	mvn.w	r3, #4
 805f864:	61fb      	str	r3, [r7, #28]
 805f866:	e020      	b.n	805f8aa <_decode_cal_grp_xtalk_mon_data_cal_xmon_zone_avg_count+0x6c>
 805f868:	6979      	ldr	r1, [r7, #20]
 805f86a:	2002      	movs	r0, #2
 805f86c:	f7fe fa82 	bl	805dd74 <vl53l5_decode_uint16_t>
 805f870:	4603      	mov	r3, r0
 805f872:	4619      	mov	r1, r3
 805f874:	687b      	ldr	r3, [r7, #4]
 805f876:	693a      	ldr	r2, [r7, #16]
 805f878:	3210      	adds	r2, #16
 805f87a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 805f87e:	697b      	ldr	r3, [r7, #20]
 805f880:	3302      	adds	r3, #2
 805f882:	617b      	str	r3, [r7, #20]
 805f884:	69bb      	ldr	r3, [r7, #24]
 805f886:	3302      	adds	r3, #2
 805f888:	61bb      	str	r3, [r7, #24]
 805f88a:	693b      	ldr	r3, [r7, #16]
 805f88c:	3301      	adds	r3, #1
 805f88e:	613b      	str	r3, [r7, #16]
 805f890:	69ba      	ldr	r2, [r7, #24]
 805f892:	68fb      	ldr	r3, [r7, #12]
 805f894:	429a      	cmp	r2, r3
 805f896:	d3e7      	bcc.n	805f868 <_decode_cal_grp_xtalk_mon_data_cal_xmon_zone_avg_count+0x2a>
 805f898:	68fa      	ldr	r2, [r7, #12]
 805f89a:	69bb      	ldr	r3, [r7, #24]
 805f89c:	429a      	cmp	r2, r3
 805f89e:	d003      	beq.n	805f8a8 <_decode_cal_grp_xtalk_mon_data_cal_xmon_zone_avg_count+0x6a>
 805f8a0:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 805f8a4:	61fb      	str	r3, [r7, #28]
 805f8a6:	e000      	b.n	805f8aa <_decode_cal_grp_xtalk_mon_data_cal_xmon_zone_avg_count+0x6c>
 805f8a8:	bf00      	nop
 805f8aa:	69fb      	ldr	r3, [r7, #28]
 805f8ac:	4618      	mov	r0, r3
 805f8ae:	3720      	adds	r7, #32
 805f8b0:	46bd      	mov	sp, r7
 805f8b2:	bd80      	pop	{r7, pc}

0805f8b4 <vl53l5_calibration_decode_cmd>:
 805f8b4:	b580      	push	{r7, lr}
 805f8b6:	b086      	sub	sp, #24
 805f8b8:	af00      	add	r7, sp, #0
 805f8ba:	60b9      	str	r1, [r7, #8]
 805f8bc:	607a      	str	r2, [r7, #4]
 805f8be:	603b      	str	r3, [r7, #0]
 805f8c0:	4603      	mov	r3, r0
 805f8c2:	81fb      	strh	r3, [r7, #14]
 805f8c4:	2300      	movs	r3, #0
 805f8c6:	617b      	str	r3, [r7, #20]
 805f8c8:	89fb      	ldrh	r3, [r7, #14]
 805f8ca:	f64a 1220 	movw	r2, #43296	; 0xa920
 805f8ce:	4293      	cmp	r3, r2
 805f8d0:	f000 812f 	beq.w	805fb32 <vl53l5_calibration_decode_cmd+0x27e>
 805f8d4:	f64a 1220 	movw	r2, #43296	; 0xa920
 805f8d8:	4293      	cmp	r3, r2
 805f8da:	dc50      	bgt.n	805f97e <vl53l5_calibration_decode_cmd+0xca>
 805f8dc:	f24a 5218 	movw	r2, #42264	; 0xa518
 805f8e0:	4293      	cmp	r3, r2
 805f8e2:	f000 80d9 	beq.w	805fa98 <vl53l5_calibration_decode_cmd+0x1e4>
 805f8e6:	f24a 5218 	movw	r2, #42264	; 0xa518
 805f8ea:	4293      	cmp	r3, r2
 805f8ec:	dc23      	bgt.n	805f936 <vl53l5_calibration_decode_cmd+0x82>
 805f8ee:	f24a 3280 	movw	r2, #41856	; 0xa380
 805f8f2:	4293      	cmp	r3, r2
 805f8f4:	f000 80a7 	beq.w	805fa46 <vl53l5_calibration_decode_cmd+0x192>
 805f8f8:	f24a 3280 	movw	r2, #41856	; 0xa380
 805f8fc:	4293      	cmp	r3, r2
 805f8fe:	dc0a      	bgt.n	805f916 <vl53l5_calibration_decode_cmd+0x62>
 805f900:	f24a 3258 	movw	r2, #41816	; 0xa358
 805f904:	4293      	cmp	r3, r2
 805f906:	f000 808b 	beq.w	805fa20 <vl53l5_calibration_decode_cmd+0x16c>
 805f90a:	f24a 3274 	movw	r2, #41844	; 0xa374
 805f90e:	4293      	cmp	r3, r2
 805f910:	f000 808f 	beq.w	805fa32 <vl53l5_calibration_decode_cmd+0x17e>
 805f914:	e1a7      	b.n	805fc66 <vl53l5_calibration_decode_cmd+0x3b2>
 805f916:	f24a 3298 	movw	r2, #41880	; 0xa398
 805f91a:	4293      	cmp	r3, r2
 805f91c:	f000 80a7 	beq.w	805fa6e <vl53l5_calibration_decode_cmd+0x1ba>
 805f920:	f24a 4298 	movw	r2, #42136	; 0xa498
 805f924:	4293      	cmp	r3, r2
 805f926:	f000 80ac 	beq.w	805fa82 <vl53l5_calibration_decode_cmd+0x1ce>
 805f92a:	f24a 3294 	movw	r2, #41876	; 0xa394
 805f92e:	4293      	cmp	r3, r2
 805f930:	f000 8093 	beq.w	805fa5a <vl53l5_calibration_decode_cmd+0x1a6>
 805f934:	e197      	b.n	805fc66 <vl53l5_calibration_decode_cmd+0x3b2>
 805f936:	f24a 72fc 	movw	r2, #43004	; 0xa7fc
 805f93a:	4293      	cmp	r3, r2
 805f93c:	f000 80cd 	beq.w	805fada <vl53l5_calibration_decode_cmd+0x226>
 805f940:	f24a 72fc 	movw	r2, #43004	; 0xa7fc
 805f944:	4293      	cmp	r3, r2
 805f946:	dc0a      	bgt.n	805f95e <vl53l5_calibration_decode_cmd+0xaa>
 805f948:	f24a 5298 	movw	r2, #42392	; 0xa598
 805f94c:	4293      	cmp	r3, r2
 805f94e:	f000 80ae 	beq.w	805faae <vl53l5_calibration_decode_cmd+0x1fa>
 805f952:	f24a 52a8 	movw	r2, #42408	; 0xa5a8
 805f956:	4293      	cmp	r3, r2
 805f958:	f000 80b4 	beq.w	805fac4 <vl53l5_calibration_decode_cmd+0x210>
 805f95c:	e183      	b.n	805fc66 <vl53l5_calibration_decode_cmd+0x3b2>
 805f95e:	f64a 021c 	movw	r2, #43036	; 0xa81c
 805f962:	4293      	cmp	r3, r2
 805f964:	f000 80cf 	beq.w	805fb06 <vl53l5_calibration_decode_cmd+0x252>
 805f968:	f64a 0220 	movw	r2, #43040	; 0xa820
 805f96c:	4293      	cmp	r3, r2
 805f96e:	f000 80d5 	beq.w	805fb1c <vl53l5_calibration_decode_cmd+0x268>
 805f972:	f64a 0208 	movw	r2, #43016	; 0xa808
 805f976:	4293      	cmp	r3, r2
 805f978:	f000 80ba 	beq.w	805faf0 <vl53l5_calibration_decode_cmd+0x23c>
 805f97c:	e173      	b.n	805fc66 <vl53l5_calibration_decode_cmd+0x3b2>
 805f97e:	f64a 6280 	movw	r2, #44672	; 0xae80
 805f982:	4293      	cmp	r3, r2
 805f984:	f000 8122 	beq.w	805fbcc <vl53l5_calibration_decode_cmd+0x318>
 805f988:	f64a 6280 	movw	r2, #44672	; 0xae80
 805f98c:	4293      	cmp	r3, r2
 805f98e:	dc23      	bgt.n	805f9d8 <vl53l5_calibration_decode_cmd+0x124>
 805f990:	f64a 5248 	movw	r2, #44360	; 0xad48
 805f994:	4293      	cmp	r3, r2
 805f996:	f000 80ed 	beq.w	805fb74 <vl53l5_calibration_decode_cmd+0x2c0>
 805f99a:	f64a 5248 	movw	r2, #44360	; 0xad48
 805f99e:	4293      	cmp	r3, r2
 805f9a0:	dc0a      	bgt.n	805f9b8 <vl53l5_calibration_decode_cmd+0x104>
 805f9a2:	f64a 12a0 	movw	r2, #43424	; 0xa9a0
 805f9a6:	4293      	cmp	r3, r2
 805f9a8:	f000 80ce 	beq.w	805fb48 <vl53l5_calibration_decode_cmd+0x294>
 805f9ac:	f64a 12b0 	movw	r2, #43440	; 0xa9b0
 805f9b0:	4293      	cmp	r3, r2
 805f9b2:	f000 80d4 	beq.w	805fb5e <vl53l5_calibration_decode_cmd+0x2aa>
 805f9b6:	e156      	b.n	805fc66 <vl53l5_calibration_decode_cmd+0x3b2>
 805f9b8:	f64a 6274 	movw	r2, #44660	; 0xae74
 805f9bc:	4293      	cmp	r3, r2
 805f9be:	f000 80ef 	beq.w	805fba0 <vl53l5_calibration_decode_cmd+0x2ec>
 805f9c2:	f64a 6278 	movw	r2, #44664	; 0xae78
 805f9c6:	4293      	cmp	r3, r2
 805f9c8:	f000 80f5 	beq.w	805fbb6 <vl53l5_calibration_decode_cmd+0x302>
 805f9cc:	f64a 5254 	movw	r2, #44372	; 0xad54
 805f9d0:	4293      	cmp	r3, r2
 805f9d2:	f000 80da 	beq.w	805fb8a <vl53l5_calibration_decode_cmd+0x2d6>
 805f9d6:	e146      	b.n	805fc66 <vl53l5_calibration_decode_cmd+0x3b2>
 805f9d8:	f64a 6298 	movw	r2, #44696	; 0xae98
 805f9dc:	4293      	cmp	r3, r2
 805f9de:	f000 8116 	beq.w	805fc0e <vl53l5_calibration_decode_cmd+0x35a>
 805f9e2:	f64a 6298 	movw	r2, #44696	; 0xae98
 805f9e6:	4293      	cmp	r3, r2
 805f9e8:	dc0a      	bgt.n	805fa00 <vl53l5_calibration_decode_cmd+0x14c>
 805f9ea:	f64a 6288 	movw	r2, #44680	; 0xae88
 805f9ee:	4293      	cmp	r3, r2
 805f9f0:	f000 80f7 	beq.w	805fbe2 <vl53l5_calibration_decode_cmd+0x32e>
 805f9f4:	f64a 6290 	movw	r2, #44688	; 0xae90
 805f9f8:	4293      	cmp	r3, r2
 805f9fa:	f000 80fd 	beq.w	805fbf8 <vl53l5_calibration_decode_cmd+0x344>
 805f9fe:	e132      	b.n	805fc66 <vl53l5_calibration_decode_cmd+0x3b2>
 805fa00:	f24b 22f8 	movw	r2, #45816	; 0xb2f8
 805fa04:	4293      	cmp	r3, r2
 805fa06:	f000 8118 	beq.w	805fc3a <vl53l5_calibration_decode_cmd+0x386>
 805fa0a:	f24b 3218 	movw	r2, #45848	; 0xb318
 805fa0e:	4293      	cmp	r3, r2
 805fa10:	f000 811e 	beq.w	805fc50 <vl53l5_calibration_decode_cmd+0x39c>
 805fa14:	f64a 62b8 	movw	r2, #44728	; 0xaeb8
 805fa18:	4293      	cmp	r3, r2
 805fa1a:	f000 8103 	beq.w	805fc24 <vl53l5_calibration_decode_cmd+0x370>
 805fa1e:	e122      	b.n	805fc66 <vl53l5_calibration_decode_cmd+0x3b2>
 805fa20:	683b      	ldr	r3, [r7, #0]
 805fa22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 805fa24:	461a      	mov	r2, r3
 805fa26:	6879      	ldr	r1, [r7, #4]
 805fa28:	68b8      	ldr	r0, [r7, #8]
 805fa2a:	f7ff f9a2 	bl	805ed72 <_decode_cal_grp_ref_spad_info>
 805fa2e:	6178      	str	r0, [r7, #20]
 805fa30:	e11d      	b.n	805fc6e <vl53l5_calibration_decode_cmd+0x3ba>
 805fa32:	683b      	ldr	r3, [r7, #0]
 805fa34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 805fa36:	3308      	adds	r3, #8
 805fa38:	461a      	mov	r2, r3
 805fa3a:	6879      	ldr	r1, [r7, #4]
 805fa3c:	68b8      	ldr	r0, [r7, #8]
 805fa3e:	f7ff fa29 	bl	805ee94 <_decode_cal_grp_grid_meta>
 805fa42:	6178      	str	r0, [r7, #20]
 805fa44:	e113      	b.n	805fc6e <vl53l5_calibration_decode_cmd+0x3ba>
 805fa46:	683b      	ldr	r3, [r7, #0]
 805fa48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 805fa4a:	3314      	adds	r3, #20
 805fa4c:	461a      	mov	r2, r3
 805fa4e:	6879      	ldr	r1, [r7, #4]
 805fa50:	68b8      	ldr	r0, [r7, #8]
 805fa52:	f7ff facc 	bl	805efee <_decode_cal_grp_phase_stats>
 805fa56:	6178      	str	r0, [r7, #20]
 805fa58:	e109      	b.n	805fc6e <vl53l5_calibration_decode_cmd+0x3ba>
 805fa5a:	683b      	ldr	r3, [r7, #0]
 805fa5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 805fa5e:	3328      	adds	r3, #40	; 0x28
 805fa60:	461a      	mov	r2, r3
 805fa62:	6879      	ldr	r1, [r7, #4]
 805fa64:	68b8      	ldr	r0, [r7, #8]
 805fa66:	f7ff fb42 	bl	805f0ee <_decode_cal_grp_temperature_stats>
 805fa6a:	6178      	str	r0, [r7, #20]
 805fa6c:	e0ff      	b.n	805fc6e <vl53l5_calibration_decode_cmd+0x3ba>
 805fa6e:	683b      	ldr	r3, [r7, #0]
 805fa70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 805fa72:	332c      	adds	r3, #44	; 0x2c
 805fa74:	461a      	mov	r2, r3
 805fa76:	6879      	ldr	r1, [r7, #4]
 805fa78:	68b8      	ldr	r0, [r7, #8]
 805fa7a:	f7ff fb91 	bl	805f1a0 <_decode_cggdrkps_cal_grid_data_rate_kcps_per_spad>
 805fa7e:	6178      	str	r0, [r7, #20]
 805fa80:	e0f5      	b.n	805fc6e <vl53l5_calibration_decode_cmd+0x3ba>
 805fa82:	683b      	ldr	r3, [r7, #0]
 805fa84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 805fa86:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 805fa8a:	461a      	mov	r2, r3
 805fa8c:	6879      	ldr	r1, [r7, #4]
 805fa8e:	68b8      	ldr	r0, [r7, #8]
 805fa90:	f7ff fbc0 	bl	805f214 <_decode_cggdesc_cal_grid_data_effective_spad_count>
 805fa94:	6178      	str	r0, [r7, #20]
 805fa96:	e0ea      	b.n	805fc6e <vl53l5_calibration_decode_cmd+0x3ba>
 805fa98:	683b      	ldr	r3, [r7, #0]
 805fa9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 805fa9c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 805faa0:	461a      	mov	r2, r3
 805faa2:	6879      	ldr	r1, [r7, #4]
 805faa4:	68b8      	ldr	r0, [r7, #8]
 805faa6:	f7ff fbef 	bl	805f288 <_decode_cal_grp_grid_data_range_mm_cal_grid_data_range_mm>
 805faaa:	6178      	str	r0, [r7, #20]
 805faac:	e0df      	b.n	805fc6e <vl53l5_calibration_decode_cmd+0x3ba>
 805faae:	683b      	ldr	r3, [r7, #0]
 805fab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 805fab2:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 805fab6:	461a      	mov	r2, r3
 805fab8:	6879      	ldr	r1, [r7, #4]
 805faba:	68b8      	ldr	r0, [r7, #8]
 805fabc:	f7ff fc1e 	bl	805f2fc <_decode_cal_grp_status>
 805fac0:	6178      	str	r0, [r7, #20]
 805fac2:	e0d4      	b.n	805fc6e <vl53l5_calibration_decode_cmd+0x3ba>
 805fac4:	683b      	ldr	r3, [r7, #0]
 805fac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 805fac8:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 805facc:	461a      	mov	r2, r3
 805face:	6879      	ldr	r1, [r7, #4]
 805fad0:	68b8      	ldr	r0, [r7, #8]
 805fad2:	f7ff fc13 	bl	805f2fc <_decode_cal_grp_status>
 805fad6:	6178      	str	r0, [r7, #20]
 805fad8:	e0c9      	b.n	805fc6e <vl53l5_calibration_decode_cmd+0x3ba>
 805fada:	683b      	ldr	r3, [r7, #0]
 805fadc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 805fade:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 805fae2:	461a      	mov	r2, r3
 805fae4:	6879      	ldr	r1, [r7, #4]
 805fae6:	68b8      	ldr	r0, [r7, #8]
 805fae8:	f7ff f9d4 	bl	805ee94 <_decode_cal_grp_grid_meta>
 805faec:	6178      	str	r0, [r7, #20]
 805faee:	e0be      	b.n	805fc6e <vl53l5_calibration_decode_cmd+0x3ba>
 805faf0:	683b      	ldr	r3, [r7, #0]
 805faf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 805faf4:	f503 7316 	add.w	r3, r3, #600	; 0x258
 805faf8:	461a      	mov	r2, r3
 805fafa:	6879      	ldr	r1, [r7, #4]
 805fafc:	68b8      	ldr	r0, [r7, #8]
 805fafe:	f7ff fa76 	bl	805efee <_decode_cal_grp_phase_stats>
 805fb02:	6178      	str	r0, [r7, #20]
 805fb04:	e0b3      	b.n	805fc6e <vl53l5_calibration_decode_cmd+0x3ba>
 805fb06:	683b      	ldr	r3, [r7, #0]
 805fb08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 805fb0a:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 805fb0e:	461a      	mov	r2, r3
 805fb10:	6879      	ldr	r1, [r7, #4]
 805fb12:	68b8      	ldr	r0, [r7, #8]
 805fb14:	f7ff faeb 	bl	805f0ee <_decode_cal_grp_temperature_stats>
 805fb18:	6178      	str	r0, [r7, #20]
 805fb1a:	e0a8      	b.n	805fc6e <vl53l5_calibration_decode_cmd+0x3ba>
 805fb1c:	683b      	ldr	r3, [r7, #0]
 805fb1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 805fb20:	f503 731c 	add.w	r3, r3, #624	; 0x270
 805fb24:	461a      	mov	r2, r3
 805fb26:	6879      	ldr	r1, [r7, #4]
 805fb28:	68b8      	ldr	r0, [r7, #8]
 805fb2a:	f7ff fb39 	bl	805f1a0 <_decode_cggdrkps_cal_grid_data_rate_kcps_per_spad>
 805fb2e:	6178      	str	r0, [r7, #20]
 805fb30:	e09d      	b.n	805fc6e <vl53l5_calibration_decode_cmd+0x3ba>
 805fb32:	683b      	ldr	r3, [r7, #0]
 805fb34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 805fb36:	f503 735c 	add.w	r3, r3, #880	; 0x370
 805fb3a:	461a      	mov	r2, r3
 805fb3c:	6879      	ldr	r1, [r7, #4]
 805fb3e:	68b8      	ldr	r0, [r7, #8]
 805fb40:	f7ff fb68 	bl	805f214 <_decode_cggdesc_cal_grid_data_effective_spad_count>
 805fb44:	6178      	str	r0, [r7, #20]
 805fb46:	e092      	b.n	805fc6e <vl53l5_calibration_decode_cmd+0x3ba>
 805fb48:	683b      	ldr	r3, [r7, #0]
 805fb4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 805fb4c:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 805fb50:	461a      	mov	r2, r3
 805fb52:	6879      	ldr	r1, [r7, #4]
 805fb54:	68b8      	ldr	r0, [r7, #8]
 805fb56:	f7ff fbd1 	bl	805f2fc <_decode_cal_grp_status>
 805fb5a:	6178      	str	r0, [r7, #20]
 805fb5c:	e087      	b.n	805fc6e <vl53l5_calibration_decode_cmd+0x3ba>
 805fb5e:	683b      	ldr	r3, [r7, #0]
 805fb60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 805fb62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 805fb66:	461a      	mov	r2, r3
 805fb68:	6879      	ldr	r1, [r7, #4]
 805fb6a:	68b8      	ldr	r0, [r7, #8]
 805fb6c:	f7ff fbc6 	bl	805f2fc <_decode_cal_grp_status>
 805fb70:	6178      	str	r0, [r7, #20]
 805fb72:	e07c      	b.n	805fc6e <vl53l5_calibration_decode_cmd+0x3ba>
 805fb74:	683b      	ldr	r3, [r7, #0]
 805fb76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 805fb78:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 805fb7c:	461a      	mov	r2, r3
 805fb7e:	6879      	ldr	r1, [r7, #4]
 805fb80:	68b8      	ldr	r0, [r7, #8]
 805fb82:	f7ff fc10 	bl	805f3a6 <_decode_cal_grp_xtalk_shape_meta>
 805fb86:	6178      	str	r0, [r7, #20]
 805fb88:	e071      	b.n	805fc6e <vl53l5_calibration_decode_cmd+0x3ba>
 805fb8a:	683b      	ldr	r3, [r7, #0]
 805fb8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 805fb8e:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 805fb92:	461a      	mov	r2, r3
 805fb94:	6879      	ldr	r1, [r7, #4]
 805fb96:	68b8      	ldr	r0, [r7, #8]
 805fb98:	f7ff fc95 	bl	805f4c6 <_decode_cal_grp_xtalk_shape_data_cal_xtalk_shape_bin_data>
 805fb9c:	6178      	str	r0, [r7, #20]
 805fb9e:	e066      	b.n	805fc6e <vl53l5_calibration_decode_cmd+0x3ba>
 805fba0:	683b      	ldr	r3, [r7, #0]
 805fba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 805fba4:	f203 533c 	addw	r3, r3, #1340	; 0x53c
 805fba8:	461a      	mov	r2, r3
 805fbaa:	6879      	ldr	r1, [r7, #4]
 805fbac:	68b8      	ldr	r0, [r7, #8]
 805fbae:	f7ff fcc5 	bl	805f53c <_decode_cal_grp_xtalk_mon_meta_data>
 805fbb2:	6178      	str	r0, [r7, #20]
 805fbb4:	e05b      	b.n	805fc6e <vl53l5_calibration_decode_cmd+0x3ba>
 805fbb6:	683b      	ldr	r3, [r7, #0]
 805fbb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 805fbba:	f503 63a8 	add.w	r3, r3, #1344	; 0x540
 805fbbe:	461a      	mov	r2, r3
 805fbc0:	6879      	ldr	r1, [r7, #4]
 805fbc2:	68b8      	ldr	r0, [r7, #8]
 805fbc4:	f7ff fd13 	bl	805f5ee <_decode_cal_grp_xtalk_mon_zones_cal_xmon_zone_x_off>
 805fbc8:	6178      	str	r0, [r7, #20]
 805fbca:	e050      	b.n	805fc6e <vl53l5_calibration_decode_cmd+0x3ba>
 805fbcc:	683b      	ldr	r3, [r7, #0]
 805fbce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 805fbd0:	f503 63a8 	add.w	r3, r3, #1344	; 0x540
 805fbd4:	461a      	mov	r2, r3
 805fbd6:	6879      	ldr	r1, [r7, #4]
 805fbd8:	68b8      	ldr	r0, [r7, #8]
 805fbda:	f7ff fd43 	bl	805f664 <_decode_cal_grp_xtalk_mon_zones_cal_xmon_zone_y_off>
 805fbde:	6178      	str	r0, [r7, #20]
 805fbe0:	e045      	b.n	805fc6e <vl53l5_calibration_decode_cmd+0x3ba>
 805fbe2:	683b      	ldr	r3, [r7, #0]
 805fbe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 805fbe6:	f503 63a8 	add.w	r3, r3, #1344	; 0x540
 805fbea:	461a      	mov	r2, r3
 805fbec:	6879      	ldr	r1, [r7, #4]
 805fbee:	68b8      	ldr	r0, [r7, #8]
 805fbf0:	f7ff fd74 	bl	805f6dc <_decode_cal_grp_xtalk_mon_zones_cal_xmon_zone_width>
 805fbf4:	6178      	str	r0, [r7, #20]
 805fbf6:	e03a      	b.n	805fc6e <vl53l5_calibration_decode_cmd+0x3ba>
 805fbf8:	683b      	ldr	r3, [r7, #0]
 805fbfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 805fbfc:	f503 63a8 	add.w	r3, r3, #1344	; 0x540
 805fc00:	461a      	mov	r2, r3
 805fc02:	6879      	ldr	r1, [r7, #4]
 805fc04:	68b8      	ldr	r0, [r7, #8]
 805fc06:	f7ff fda5 	bl	805f754 <_decode_cal_grp_xtalk_mon_zones_cal_xmon_zone_height>
 805fc0a:	6178      	str	r0, [r7, #20]
 805fc0c:	e02f      	b.n	805fc6e <vl53l5_calibration_decode_cmd+0x3ba>
 805fc0e:	683b      	ldr	r3, [r7, #0]
 805fc10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 805fc12:	f503 63ac 	add.w	r3, r3, #1376	; 0x560
 805fc16:	461a      	mov	r2, r3
 805fc18:	6879      	ldr	r1, [r7, #4]
 805fc1a:	68b8      	ldr	r0, [r7, #8]
 805fc1c:	f7ff fdd6 	bl	805f7cc <_decode_cal_grp_xtalk_mon_data_cal_xmon_zone_rate_kcps_spad>
 805fc20:	6178      	str	r0, [r7, #20]
 805fc22:	e024      	b.n	805fc6e <vl53l5_calibration_decode_cmd+0x3ba>
 805fc24:	683b      	ldr	r3, [r7, #0]
 805fc26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 805fc28:	f503 63ac 	add.w	r3, r3, #1376	; 0x560
 805fc2c:	461a      	mov	r2, r3
 805fc2e:	6879      	ldr	r1, [r7, #4]
 805fc30:	68b8      	ldr	r0, [r7, #8]
 805fc32:	f7ff fe04 	bl	805f83e <_decode_cal_grp_xtalk_mon_data_cal_xmon_zone_avg_count>
 805fc36:	6178      	str	r0, [r7, #20]
 805fc38:	e019      	b.n	805fc6e <vl53l5_calibration_decode_cmd+0x3ba>
 805fc3a:	683b      	ldr	r3, [r7, #0]
 805fc3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 805fc3e:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 805fc42:	461a      	mov	r2, r3
 805fc44:	6879      	ldr	r1, [r7, #4]
 805fc46:	68b8      	ldr	r0, [r7, #8]
 805fc48:	f7ff fdc0 	bl	805f7cc <_decode_cal_grp_xtalk_mon_data_cal_xmon_zone_rate_kcps_spad>
 805fc4c:	6178      	str	r0, [r7, #20]
 805fc4e:	e00e      	b.n	805fc6e <vl53l5_calibration_decode_cmd+0x3ba>
 805fc50:	683b      	ldr	r3, [r7, #0]
 805fc52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 805fc54:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 805fc58:	461a      	mov	r2, r3
 805fc5a:	6879      	ldr	r1, [r7, #4]
 805fc5c:	68b8      	ldr	r0, [r7, #8]
 805fc5e:	f7ff fdee 	bl	805f83e <_decode_cal_grp_xtalk_mon_data_cal_xmon_zone_avg_count>
 805fc62:	6178      	str	r0, [r7, #20]
 805fc64:	e003      	b.n	805fc6e <vl53l5_calibration_decode_cmd+0x3ba>
 805fc66:	f06f 0308 	mvn.w	r3, #8
 805fc6a:	617b      	str	r3, [r7, #20]
 805fc6c:	bf00      	nop
 805fc6e:	697b      	ldr	r3, [r7, #20]
 805fc70:	4618      	mov	r0, r3
 805fc72:	3718      	adds	r7, #24
 805fc74:	46bd      	mov	sp, r7
 805fc76:	bd80      	pop	{r7, pc}

0805fc78 <_decode_dci_grp_map_version>:
 805fc78:	b580      	push	{r7, lr}
 805fc7a:	b088      	sub	sp, #32
 805fc7c:	af00      	add	r7, sp, #0
 805fc7e:	60f8      	str	r0, [r7, #12]
 805fc80:	60b9      	str	r1, [r7, #8]
 805fc82:	607a      	str	r2, [r7, #4]
 805fc84:	2300      	movs	r3, #0
 805fc86:	61fb      	str	r3, [r7, #28]
 805fc88:	2300      	movs	r3, #0
 805fc8a:	61bb      	str	r3, [r7, #24]
 805fc8c:	68bb      	ldr	r3, [r7, #8]
 805fc8e:	617b      	str	r3, [r7, #20]
 805fc90:	68fb      	ldr	r3, [r7, #12]
 805fc92:	2b04      	cmp	r3, #4
 805fc94:	d903      	bls.n	805fc9e <_decode_dci_grp_map_version+0x26>
 805fc96:	f06f 0304 	mvn.w	r3, #4
 805fc9a:	61fb      	str	r3, [r7, #28]
 805fc9c:	e024      	b.n	805fce8 <_decode_dci_grp_map_version+0x70>
 805fc9e:	6979      	ldr	r1, [r7, #20]
 805fca0:	2002      	movs	r0, #2
 805fca2:	f7fe f867 	bl	805dd74 <vl53l5_decode_uint16_t>
 805fca6:	4603      	mov	r3, r0
 805fca8:	461a      	mov	r2, r3
 805fcaa:	687b      	ldr	r3, [r7, #4]
 805fcac:	801a      	strh	r2, [r3, #0]
 805fcae:	697b      	ldr	r3, [r7, #20]
 805fcb0:	3302      	adds	r3, #2
 805fcb2:	617b      	str	r3, [r7, #20]
 805fcb4:	69bb      	ldr	r3, [r7, #24]
 805fcb6:	3302      	adds	r3, #2
 805fcb8:	61bb      	str	r3, [r7, #24]
 805fcba:	6979      	ldr	r1, [r7, #20]
 805fcbc:	2002      	movs	r0, #2
 805fcbe:	f7fe f859 	bl	805dd74 <vl53l5_decode_uint16_t>
 805fcc2:	4603      	mov	r3, r0
 805fcc4:	461a      	mov	r2, r3
 805fcc6:	687b      	ldr	r3, [r7, #4]
 805fcc8:	805a      	strh	r2, [r3, #2]
 805fcca:	697b      	ldr	r3, [r7, #20]
 805fccc:	3302      	adds	r3, #2
 805fcce:	617b      	str	r3, [r7, #20]
 805fcd0:	69bb      	ldr	r3, [r7, #24]
 805fcd2:	3302      	adds	r3, #2
 805fcd4:	61bb      	str	r3, [r7, #24]
 805fcd6:	68fa      	ldr	r2, [r7, #12]
 805fcd8:	69bb      	ldr	r3, [r7, #24]
 805fcda:	429a      	cmp	r2, r3
 805fcdc:	d003      	beq.n	805fce6 <_decode_dci_grp_map_version+0x6e>
 805fcde:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 805fce2:	61fb      	str	r3, [r7, #28]
 805fce4:	e000      	b.n	805fce8 <_decode_dci_grp_map_version+0x70>
 805fce6:	bf00      	nop
 805fce8:	69fb      	ldr	r3, [r7, #28]
 805fcea:	4618      	mov	r0, r3
 805fcec:	3720      	adds	r7, #32
 805fcee:	46bd      	mov	sp, r7
 805fcf0:	bd80      	pop	{r7, pc}

0805fcf2 <_decode_dci_grp_silicon_temperature_data>:
 805fcf2:	b580      	push	{r7, lr}
 805fcf4:	b088      	sub	sp, #32
 805fcf6:	af00      	add	r7, sp, #0
 805fcf8:	60f8      	str	r0, [r7, #12]
 805fcfa:	60b9      	str	r1, [r7, #8]
 805fcfc:	607a      	str	r2, [r7, #4]
 805fcfe:	2300      	movs	r3, #0
 805fd00:	61fb      	str	r3, [r7, #28]
 805fd02:	2300      	movs	r3, #0
 805fd04:	61bb      	str	r3, [r7, #24]
 805fd06:	68bb      	ldr	r3, [r7, #8]
 805fd08:	617b      	str	r3, [r7, #20]
 805fd0a:	68fb      	ldr	r3, [r7, #12]
 805fd0c:	2b04      	cmp	r3, #4
 805fd0e:	d903      	bls.n	805fd18 <_decode_dci_grp_silicon_temperature_data+0x26>
 805fd10:	f06f 0304 	mvn.w	r3, #4
 805fd14:	61fb      	str	r3, [r7, #28]
 805fd16:	e040      	b.n	805fd9a <_decode_dci_grp_silicon_temperature_data+0xa8>
 805fd18:	6979      	ldr	r1, [r7, #20]
 805fd1a:	2001      	movs	r0, #1
 805fd1c:	f7fe f81b 	bl	805dd56 <vl53l5_decode_int8_t>
 805fd20:	4603      	mov	r3, r0
 805fd22:	461a      	mov	r2, r3
 805fd24:	687b      	ldr	r3, [r7, #4]
 805fd26:	701a      	strb	r2, [r3, #0]
 805fd28:	697b      	ldr	r3, [r7, #20]
 805fd2a:	3301      	adds	r3, #1
 805fd2c:	617b      	str	r3, [r7, #20]
 805fd2e:	69bb      	ldr	r3, [r7, #24]
 805fd30:	3301      	adds	r3, #1
 805fd32:	61bb      	str	r3, [r7, #24]
 805fd34:	6979      	ldr	r1, [r7, #20]
 805fd36:	2001      	movs	r0, #1
 805fd38:	f7fe f80d 	bl	805dd56 <vl53l5_decode_int8_t>
 805fd3c:	4603      	mov	r3, r0
 805fd3e:	461a      	mov	r2, r3
 805fd40:	687b      	ldr	r3, [r7, #4]
 805fd42:	705a      	strb	r2, [r3, #1]
 805fd44:	697b      	ldr	r3, [r7, #20]
 805fd46:	3301      	adds	r3, #1
 805fd48:	617b      	str	r3, [r7, #20]
 805fd4a:	69bb      	ldr	r3, [r7, #24]
 805fd4c:	3301      	adds	r3, #1
 805fd4e:	61bb      	str	r3, [r7, #24]
 805fd50:	6979      	ldr	r1, [r7, #20]
 805fd52:	2001      	movs	r0, #1
 805fd54:	f7fd ffff 	bl	805dd56 <vl53l5_decode_int8_t>
 805fd58:	4603      	mov	r3, r0
 805fd5a:	461a      	mov	r2, r3
 805fd5c:	687b      	ldr	r3, [r7, #4]
 805fd5e:	709a      	strb	r2, [r3, #2]
 805fd60:	697b      	ldr	r3, [r7, #20]
 805fd62:	3301      	adds	r3, #1
 805fd64:	617b      	str	r3, [r7, #20]
 805fd66:	69bb      	ldr	r3, [r7, #24]
 805fd68:	3301      	adds	r3, #1
 805fd6a:	61bb      	str	r3, [r7, #24]
 805fd6c:	6979      	ldr	r1, [r7, #20]
 805fd6e:	2001      	movs	r0, #1
 805fd70:	f7fd fff1 	bl	805dd56 <vl53l5_decode_int8_t>
 805fd74:	4603      	mov	r3, r0
 805fd76:	461a      	mov	r2, r3
 805fd78:	687b      	ldr	r3, [r7, #4]
 805fd7a:	70da      	strb	r2, [r3, #3]
 805fd7c:	697b      	ldr	r3, [r7, #20]
 805fd7e:	3301      	adds	r3, #1
 805fd80:	617b      	str	r3, [r7, #20]
 805fd82:	69bb      	ldr	r3, [r7, #24]
 805fd84:	3301      	adds	r3, #1
 805fd86:	61bb      	str	r3, [r7, #24]
 805fd88:	68fa      	ldr	r2, [r7, #12]
 805fd8a:	69bb      	ldr	r3, [r7, #24]
 805fd8c:	429a      	cmp	r2, r3
 805fd8e:	d003      	beq.n	805fd98 <_decode_dci_grp_silicon_temperature_data+0xa6>
 805fd90:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 805fd94:	61fb      	str	r3, [r7, #28]
 805fd96:	e000      	b.n	805fd9a <_decode_dci_grp_silicon_temperature_data+0xa8>
 805fd98:	bf00      	nop
 805fd9a:	69fb      	ldr	r3, [r7, #28]
 805fd9c:	4618      	mov	r0, r3
 805fd9e:	3720      	adds	r7, #32
 805fda0:	46bd      	mov	sp, r7
 805fda2:	bd80      	pop	{r7, pc}

0805fda4 <_decode_dci_grp_zone_cfg>:
 805fda4:	b580      	push	{r7, lr}
 805fda6:	b088      	sub	sp, #32
 805fda8:	af00      	add	r7, sp, #0
 805fdaa:	60f8      	str	r0, [r7, #12]
 805fdac:	60b9      	str	r1, [r7, #8]
 805fdae:	607a      	str	r2, [r7, #4]
 805fdb0:	2300      	movs	r3, #0
 805fdb2:	61fb      	str	r3, [r7, #28]
 805fdb4:	2300      	movs	r3, #0
 805fdb6:	61bb      	str	r3, [r7, #24]
 805fdb8:	68bb      	ldr	r3, [r7, #8]
 805fdba:	617b      	str	r3, [r7, #20]
 805fdbc:	68fb      	ldr	r3, [r7, #12]
 805fdbe:	2b08      	cmp	r3, #8
 805fdc0:	d903      	bls.n	805fdca <_decode_dci_grp_zone_cfg+0x26>
 805fdc2:	f06f 0304 	mvn.w	r3, #4
 805fdc6:	61fb      	str	r3, [r7, #28]
 805fdc8:	e078      	b.n	805febc <_decode_dci_grp_zone_cfg+0x118>
 805fdca:	6979      	ldr	r1, [r7, #20]
 805fdcc:	2001      	movs	r0, #1
 805fdce:	f7fd ffb4 	bl	805dd3a <vl53l5_decode_uint8_t>
 805fdd2:	4603      	mov	r3, r0
 805fdd4:	461a      	mov	r2, r3
 805fdd6:	687b      	ldr	r3, [r7, #4]
 805fdd8:	701a      	strb	r2, [r3, #0]
 805fdda:	697b      	ldr	r3, [r7, #20]
 805fddc:	3301      	adds	r3, #1
 805fdde:	617b      	str	r3, [r7, #20]
 805fde0:	69bb      	ldr	r3, [r7, #24]
 805fde2:	3301      	adds	r3, #1
 805fde4:	61bb      	str	r3, [r7, #24]
 805fde6:	6979      	ldr	r1, [r7, #20]
 805fde8:	2001      	movs	r0, #1
 805fdea:	f7fd ffa6 	bl	805dd3a <vl53l5_decode_uint8_t>
 805fdee:	4603      	mov	r3, r0
 805fdf0:	461a      	mov	r2, r3
 805fdf2:	687b      	ldr	r3, [r7, #4]
 805fdf4:	705a      	strb	r2, [r3, #1]
 805fdf6:	697b      	ldr	r3, [r7, #20]
 805fdf8:	3301      	adds	r3, #1
 805fdfa:	617b      	str	r3, [r7, #20]
 805fdfc:	69bb      	ldr	r3, [r7, #24]
 805fdfe:	3301      	adds	r3, #1
 805fe00:	61bb      	str	r3, [r7, #24]
 805fe02:	6979      	ldr	r1, [r7, #20]
 805fe04:	2001      	movs	r0, #1
 805fe06:	f7fd ff98 	bl	805dd3a <vl53l5_decode_uint8_t>
 805fe0a:	4603      	mov	r3, r0
 805fe0c:	461a      	mov	r2, r3
 805fe0e:	687b      	ldr	r3, [r7, #4]
 805fe10:	709a      	strb	r2, [r3, #2]
 805fe12:	697b      	ldr	r3, [r7, #20]
 805fe14:	3301      	adds	r3, #1
 805fe16:	617b      	str	r3, [r7, #20]
 805fe18:	69bb      	ldr	r3, [r7, #24]
 805fe1a:	3301      	adds	r3, #1
 805fe1c:	61bb      	str	r3, [r7, #24]
 805fe1e:	6979      	ldr	r1, [r7, #20]
 805fe20:	2001      	movs	r0, #1
 805fe22:	f7fd ff8a 	bl	805dd3a <vl53l5_decode_uint8_t>
 805fe26:	4603      	mov	r3, r0
 805fe28:	461a      	mov	r2, r3
 805fe2a:	687b      	ldr	r3, [r7, #4]
 805fe2c:	70da      	strb	r2, [r3, #3]
 805fe2e:	697b      	ldr	r3, [r7, #20]
 805fe30:	3301      	adds	r3, #1
 805fe32:	617b      	str	r3, [r7, #20]
 805fe34:	69bb      	ldr	r3, [r7, #24]
 805fe36:	3301      	adds	r3, #1
 805fe38:	61bb      	str	r3, [r7, #24]
 805fe3a:	6979      	ldr	r1, [r7, #20]
 805fe3c:	2001      	movs	r0, #1
 805fe3e:	f7fd ff7c 	bl	805dd3a <vl53l5_decode_uint8_t>
 805fe42:	4603      	mov	r3, r0
 805fe44:	461a      	mov	r2, r3
 805fe46:	687b      	ldr	r3, [r7, #4]
 805fe48:	711a      	strb	r2, [r3, #4]
 805fe4a:	697b      	ldr	r3, [r7, #20]
 805fe4c:	3301      	adds	r3, #1
 805fe4e:	617b      	str	r3, [r7, #20]
 805fe50:	69bb      	ldr	r3, [r7, #24]
 805fe52:	3301      	adds	r3, #1
 805fe54:	61bb      	str	r3, [r7, #24]
 805fe56:	6979      	ldr	r1, [r7, #20]
 805fe58:	2001      	movs	r0, #1
 805fe5a:	f7fd ff6e 	bl	805dd3a <vl53l5_decode_uint8_t>
 805fe5e:	4603      	mov	r3, r0
 805fe60:	461a      	mov	r2, r3
 805fe62:	687b      	ldr	r3, [r7, #4]
 805fe64:	715a      	strb	r2, [r3, #5]
 805fe66:	697b      	ldr	r3, [r7, #20]
 805fe68:	3301      	adds	r3, #1
 805fe6a:	617b      	str	r3, [r7, #20]
 805fe6c:	69bb      	ldr	r3, [r7, #24]
 805fe6e:	3301      	adds	r3, #1
 805fe70:	61bb      	str	r3, [r7, #24]
 805fe72:	6979      	ldr	r1, [r7, #20]
 805fe74:	2001      	movs	r0, #1
 805fe76:	f7fd ff60 	bl	805dd3a <vl53l5_decode_uint8_t>
 805fe7a:	4603      	mov	r3, r0
 805fe7c:	461a      	mov	r2, r3
 805fe7e:	687b      	ldr	r3, [r7, #4]
 805fe80:	719a      	strb	r2, [r3, #6]
 805fe82:	697b      	ldr	r3, [r7, #20]
 805fe84:	3301      	adds	r3, #1
 805fe86:	617b      	str	r3, [r7, #20]
 805fe88:	69bb      	ldr	r3, [r7, #24]
 805fe8a:	3301      	adds	r3, #1
 805fe8c:	61bb      	str	r3, [r7, #24]
 805fe8e:	6979      	ldr	r1, [r7, #20]
 805fe90:	2001      	movs	r0, #1
 805fe92:	f7fd ff52 	bl	805dd3a <vl53l5_decode_uint8_t>
 805fe96:	4603      	mov	r3, r0
 805fe98:	461a      	mov	r2, r3
 805fe9a:	687b      	ldr	r3, [r7, #4]
 805fe9c:	71da      	strb	r2, [r3, #7]
 805fe9e:	697b      	ldr	r3, [r7, #20]
 805fea0:	3301      	adds	r3, #1
 805fea2:	617b      	str	r3, [r7, #20]
 805fea4:	69bb      	ldr	r3, [r7, #24]
 805fea6:	3301      	adds	r3, #1
 805fea8:	61bb      	str	r3, [r7, #24]
 805feaa:	68fa      	ldr	r2, [r7, #12]
 805feac:	69bb      	ldr	r3, [r7, #24]
 805feae:	429a      	cmp	r2, r3
 805feb0:	d003      	beq.n	805feba <_decode_dci_grp_zone_cfg+0x116>
 805feb2:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 805feb6:	61fb      	str	r3, [r7, #28]
 805feb8:	e000      	b.n	805febc <_decode_dci_grp_zone_cfg+0x118>
 805feba:	bf00      	nop
 805febc:	69fb      	ldr	r3, [r7, #28]
 805febe:	4618      	mov	r0, r3
 805fec0:	3720      	adds	r7, #32
 805fec2:	46bd      	mov	sp, r7
 805fec4:	bd80      	pop	{r7, pc}

0805fec6 <vl53l5_core_decode_cmd>:
 805fec6:	b580      	push	{r7, lr}
 805fec8:	b086      	sub	sp, #24
 805feca:	af00      	add	r7, sp, #0
 805fecc:	60b9      	str	r1, [r7, #8]
 805fece:	607a      	str	r2, [r7, #4]
 805fed0:	603b      	str	r3, [r7, #0]
 805fed2:	4603      	mov	r3, r0
 805fed4:	81fb      	strh	r3, [r7, #14]
 805fed6:	2300      	movs	r3, #0
 805fed8:	617b      	str	r3, [r7, #20]
 805feda:	89fb      	ldrh	r3, [r7, #14]
 805fedc:	f245 4250 	movw	r2, #21584	; 0x5450
 805fee0:	4293      	cmp	r3, r2
 805fee2:	d00f      	beq.n	805ff04 <vl53l5_core_decode_cmd+0x3e>
 805fee4:	f245 4254 	movw	r2, #21588	; 0x5454
 805fee8:	4293      	cmp	r3, r2
 805feea:	d014      	beq.n	805ff16 <vl53l5_core_decode_cmd+0x50>
 805feec:	f5b3 4fa8 	cmp.w	r3, #21504	; 0x5400
 805fef0:	d11a      	bne.n	805ff28 <vl53l5_core_decode_cmd+0x62>
 805fef2:	683b      	ldr	r3, [r7, #0]
 805fef4:	3340      	adds	r3, #64	; 0x40
 805fef6:	461a      	mov	r2, r3
 805fef8:	6879      	ldr	r1, [r7, #4]
 805fefa:	68b8      	ldr	r0, [r7, #8]
 805fefc:	f7ff febc 	bl	805fc78 <_decode_dci_grp_map_version>
 805ff00:	6178      	str	r0, [r7, #20]
 805ff02:	e015      	b.n	805ff30 <vl53l5_core_decode_cmd+0x6a>
 805ff04:	683b      	ldr	r3, [r7, #0]
 805ff06:	3344      	adds	r3, #68	; 0x44
 805ff08:	461a      	mov	r2, r3
 805ff0a:	6879      	ldr	r1, [r7, #4]
 805ff0c:	68b8      	ldr	r0, [r7, #8]
 805ff0e:	f7ff fef0 	bl	805fcf2 <_decode_dci_grp_silicon_temperature_data>
 805ff12:	6178      	str	r0, [r7, #20]
 805ff14:	e00c      	b.n	805ff30 <vl53l5_core_decode_cmd+0x6a>
 805ff16:	683b      	ldr	r3, [r7, #0]
 805ff18:	3348      	adds	r3, #72	; 0x48
 805ff1a:	461a      	mov	r2, r3
 805ff1c:	6879      	ldr	r1, [r7, #4]
 805ff1e:	68b8      	ldr	r0, [r7, #8]
 805ff20:	f7ff ff40 	bl	805fda4 <_decode_dci_grp_zone_cfg>
 805ff24:	6178      	str	r0, [r7, #20]
 805ff26:	e003      	b.n	805ff30 <vl53l5_core_decode_cmd+0x6a>
 805ff28:	f06f 0308 	mvn.w	r3, #8
 805ff2c:	617b      	str	r3, [r7, #20]
 805ff2e:	bf00      	nop
 805ff30:	697b      	ldr	r3, [r7, #20]
 805ff32:	4618      	mov	r0, r3
 805ff34:	3718      	adds	r7, #24
 805ff36:	46bd      	mov	sp, r7
 805ff38:	bd80      	pop	{r7, pc}
	...

0805ff3c <calloc>:
 805ff3c:	4b02      	ldr	r3, [pc, #8]	; (805ff48 <calloc+0xc>)
 805ff3e:	460a      	mov	r2, r1
 805ff40:	4601      	mov	r1, r0
 805ff42:	6818      	ldr	r0, [r3, #0]
 805ff44:	f000 b842 	b.w	805ffcc <_calloc_r>
 805ff48:	20007cc0 	.word	0x20007cc0

0805ff4c <__errno>:
 805ff4c:	4b01      	ldr	r3, [pc, #4]	; (805ff54 <__errno+0x8>)
 805ff4e:	6818      	ldr	r0, [r3, #0]
 805ff50:	4770      	bx	lr
 805ff52:	bf00      	nop
 805ff54:	20007cc0 	.word	0x20007cc0

0805ff58 <__libc_init_array>:
 805ff58:	b570      	push	{r4, r5, r6, lr}
 805ff5a:	4d0d      	ldr	r5, [pc, #52]	; (805ff90 <__libc_init_array+0x38>)
 805ff5c:	4c0d      	ldr	r4, [pc, #52]	; (805ff94 <__libc_init_array+0x3c>)
 805ff5e:	1b64      	subs	r4, r4, r5
 805ff60:	10a4      	asrs	r4, r4, #2
 805ff62:	2600      	movs	r6, #0
 805ff64:	42a6      	cmp	r6, r4
 805ff66:	d109      	bne.n	805ff7c <__libc_init_array+0x24>
 805ff68:	4d0b      	ldr	r5, [pc, #44]	; (805ff98 <__libc_init_array+0x40>)
 805ff6a:	4c0c      	ldr	r4, [pc, #48]	; (805ff9c <__libc_init_array+0x44>)
 805ff6c:	f004 fdfc 	bl	8064b68 <_init>
 805ff70:	1b64      	subs	r4, r4, r5
 805ff72:	10a4      	asrs	r4, r4, #2
 805ff74:	2600      	movs	r6, #0
 805ff76:	42a6      	cmp	r6, r4
 805ff78:	d105      	bne.n	805ff86 <__libc_init_array+0x2e>
 805ff7a:	bd70      	pop	{r4, r5, r6, pc}
 805ff7c:	f855 3b04 	ldr.w	r3, [r5], #4
 805ff80:	4798      	blx	r3
 805ff82:	3601      	adds	r6, #1
 805ff84:	e7ee      	b.n	805ff64 <__libc_init_array+0xc>
 805ff86:	f855 3b04 	ldr.w	r3, [r5], #4
 805ff8a:	4798      	blx	r3
 805ff8c:	3601      	adds	r6, #1
 805ff8e:	e7f2      	b.n	805ff76 <__libc_init_array+0x1e>
 805ff90:	0807dae8 	.word	0x0807dae8
 805ff94:	0807dae8 	.word	0x0807dae8
 805ff98:	0807dae8 	.word	0x0807dae8
 805ff9c:	0807daec 	.word	0x0807daec

0805ffa0 <memcpy>:
 805ffa0:	440a      	add	r2, r1
 805ffa2:	4291      	cmp	r1, r2
 805ffa4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 805ffa8:	d100      	bne.n	805ffac <memcpy+0xc>
 805ffaa:	4770      	bx	lr
 805ffac:	b510      	push	{r4, lr}
 805ffae:	f811 4b01 	ldrb.w	r4, [r1], #1
 805ffb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 805ffb6:	4291      	cmp	r1, r2
 805ffb8:	d1f9      	bne.n	805ffae <memcpy+0xe>
 805ffba:	bd10      	pop	{r4, pc}

0805ffbc <memset>:
 805ffbc:	4402      	add	r2, r0
 805ffbe:	4603      	mov	r3, r0
 805ffc0:	4293      	cmp	r3, r2
 805ffc2:	d100      	bne.n	805ffc6 <memset+0xa>
 805ffc4:	4770      	bx	lr
 805ffc6:	f803 1b01 	strb.w	r1, [r3], #1
 805ffca:	e7f9      	b.n	805ffc0 <memset+0x4>

0805ffcc <_calloc_r>:
 805ffcc:	b513      	push	{r0, r1, r4, lr}
 805ffce:	434a      	muls	r2, r1
 805ffd0:	4611      	mov	r1, r2
 805ffd2:	9201      	str	r2, [sp, #4]
 805ffd4:	f000 f80a 	bl	805ffec <_malloc_r>
 805ffd8:	4604      	mov	r4, r0
 805ffda:	b118      	cbz	r0, 805ffe4 <_calloc_r+0x18>
 805ffdc:	9a01      	ldr	r2, [sp, #4]
 805ffde:	2100      	movs	r1, #0
 805ffe0:	f7ff ffec 	bl	805ffbc <memset>
 805ffe4:	4620      	mov	r0, r4
 805ffe6:	b002      	add	sp, #8
 805ffe8:	bd10      	pop	{r4, pc}
	...

0805ffec <_malloc_r>:
 805ffec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 805ffee:	1ccd      	adds	r5, r1, #3
 805fff0:	f025 0503 	bic.w	r5, r5, #3
 805fff4:	3508      	adds	r5, #8
 805fff6:	2d0c      	cmp	r5, #12
 805fff8:	bf38      	it	cc
 805fffa:	250c      	movcc	r5, #12
 805fffc:	2d00      	cmp	r5, #0
 805fffe:	4606      	mov	r6, r0
 8060000:	db01      	blt.n	8060006 <_malloc_r+0x1a>
 8060002:	42a9      	cmp	r1, r5
 8060004:	d903      	bls.n	806000e <_malloc_r+0x22>
 8060006:	230c      	movs	r3, #12
 8060008:	6033      	str	r3, [r6, #0]
 806000a:	2000      	movs	r0, #0
 806000c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 806000e:	f001 fecb 	bl	8061da8 <__malloc_lock>
 8060012:	4921      	ldr	r1, [pc, #132]	; (8060098 <_malloc_r+0xac>)
 8060014:	680a      	ldr	r2, [r1, #0]
 8060016:	4614      	mov	r4, r2
 8060018:	b99c      	cbnz	r4, 8060042 <_malloc_r+0x56>
 806001a:	4f20      	ldr	r7, [pc, #128]	; (806009c <_malloc_r+0xb0>)
 806001c:	683b      	ldr	r3, [r7, #0]
 806001e:	b923      	cbnz	r3, 806002a <_malloc_r+0x3e>
 8060020:	4621      	mov	r1, r4
 8060022:	4630      	mov	r0, r6
 8060024:	f000 fd4a 	bl	8060abc <_sbrk_r>
 8060028:	6038      	str	r0, [r7, #0]
 806002a:	4629      	mov	r1, r5
 806002c:	4630      	mov	r0, r6
 806002e:	f000 fd45 	bl	8060abc <_sbrk_r>
 8060032:	1c43      	adds	r3, r0, #1
 8060034:	d123      	bne.n	806007e <_malloc_r+0x92>
 8060036:	230c      	movs	r3, #12
 8060038:	6033      	str	r3, [r6, #0]
 806003a:	4630      	mov	r0, r6
 806003c:	f001 feba 	bl	8061db4 <__malloc_unlock>
 8060040:	e7e3      	b.n	806000a <_malloc_r+0x1e>
 8060042:	6823      	ldr	r3, [r4, #0]
 8060044:	1b5b      	subs	r3, r3, r5
 8060046:	d417      	bmi.n	8060078 <_malloc_r+0x8c>
 8060048:	2b0b      	cmp	r3, #11
 806004a:	d903      	bls.n	8060054 <_malloc_r+0x68>
 806004c:	6023      	str	r3, [r4, #0]
 806004e:	441c      	add	r4, r3
 8060050:	6025      	str	r5, [r4, #0]
 8060052:	e004      	b.n	806005e <_malloc_r+0x72>
 8060054:	6863      	ldr	r3, [r4, #4]
 8060056:	42a2      	cmp	r2, r4
 8060058:	bf0c      	ite	eq
 806005a:	600b      	streq	r3, [r1, #0]
 806005c:	6053      	strne	r3, [r2, #4]
 806005e:	4630      	mov	r0, r6
 8060060:	f001 fea8 	bl	8061db4 <__malloc_unlock>
 8060064:	f104 000b 	add.w	r0, r4, #11
 8060068:	1d23      	adds	r3, r4, #4
 806006a:	f020 0007 	bic.w	r0, r0, #7
 806006e:	1ac2      	subs	r2, r0, r3
 8060070:	d0cc      	beq.n	806000c <_malloc_r+0x20>
 8060072:	1a1b      	subs	r3, r3, r0
 8060074:	50a3      	str	r3, [r4, r2]
 8060076:	e7c9      	b.n	806000c <_malloc_r+0x20>
 8060078:	4622      	mov	r2, r4
 806007a:	6864      	ldr	r4, [r4, #4]
 806007c:	e7cc      	b.n	8060018 <_malloc_r+0x2c>
 806007e:	1cc4      	adds	r4, r0, #3
 8060080:	f024 0403 	bic.w	r4, r4, #3
 8060084:	42a0      	cmp	r0, r4
 8060086:	d0e3      	beq.n	8060050 <_malloc_r+0x64>
 8060088:	1a21      	subs	r1, r4, r0
 806008a:	4630      	mov	r0, r6
 806008c:	f000 fd16 	bl	8060abc <_sbrk_r>
 8060090:	3001      	adds	r0, #1
 8060092:	d1dd      	bne.n	8060050 <_malloc_r+0x64>
 8060094:	e7cf      	b.n	8060036 <_malloc_r+0x4a>
 8060096:	bf00      	nop
 8060098:	2001b56c 	.word	0x2001b56c
 806009c:	2001b570 	.word	0x2001b570

080600a0 <__cvt>:
 80600a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80600a4:	ec55 4b10 	vmov	r4, r5, d0
 80600a8:	2d00      	cmp	r5, #0
 80600aa:	460e      	mov	r6, r1
 80600ac:	4619      	mov	r1, r3
 80600ae:	462b      	mov	r3, r5
 80600b0:	bfbb      	ittet	lt
 80600b2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80600b6:	461d      	movlt	r5, r3
 80600b8:	2300      	movge	r3, #0
 80600ba:	232d      	movlt	r3, #45	; 0x2d
 80600bc:	700b      	strb	r3, [r1, #0]
 80600be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80600c0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80600c4:	4691      	mov	r9, r2
 80600c6:	f023 0820 	bic.w	r8, r3, #32
 80600ca:	bfbc      	itt	lt
 80600cc:	4622      	movlt	r2, r4
 80600ce:	4614      	movlt	r4, r2
 80600d0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80600d4:	d005      	beq.n	80600e2 <__cvt+0x42>
 80600d6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80600da:	d100      	bne.n	80600de <__cvt+0x3e>
 80600dc:	3601      	adds	r6, #1
 80600de:	2102      	movs	r1, #2
 80600e0:	e000      	b.n	80600e4 <__cvt+0x44>
 80600e2:	2103      	movs	r1, #3
 80600e4:	ab03      	add	r3, sp, #12
 80600e6:	9301      	str	r3, [sp, #4]
 80600e8:	ab02      	add	r3, sp, #8
 80600ea:	9300      	str	r3, [sp, #0]
 80600ec:	ec45 4b10 	vmov	d0, r4, r5
 80600f0:	4653      	mov	r3, sl
 80600f2:	4632      	mov	r2, r6
 80600f4:	f000 fe40 	bl	8060d78 <_dtoa_r>
 80600f8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80600fc:	4607      	mov	r7, r0
 80600fe:	d102      	bne.n	8060106 <__cvt+0x66>
 8060100:	f019 0f01 	tst.w	r9, #1
 8060104:	d022      	beq.n	806014c <__cvt+0xac>
 8060106:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 806010a:	eb07 0906 	add.w	r9, r7, r6
 806010e:	d110      	bne.n	8060132 <__cvt+0x92>
 8060110:	783b      	ldrb	r3, [r7, #0]
 8060112:	2b30      	cmp	r3, #48	; 0x30
 8060114:	d10a      	bne.n	806012c <__cvt+0x8c>
 8060116:	2200      	movs	r2, #0
 8060118:	2300      	movs	r3, #0
 806011a:	4620      	mov	r0, r4
 806011c:	4629      	mov	r1, r5
 806011e:	f7e0 fcd3 	bl	8040ac8 <__aeabi_dcmpeq>
 8060122:	b918      	cbnz	r0, 806012c <__cvt+0x8c>
 8060124:	f1c6 0601 	rsb	r6, r6, #1
 8060128:	f8ca 6000 	str.w	r6, [sl]
 806012c:	f8da 3000 	ldr.w	r3, [sl]
 8060130:	4499      	add	r9, r3
 8060132:	2200      	movs	r2, #0
 8060134:	2300      	movs	r3, #0
 8060136:	4620      	mov	r0, r4
 8060138:	4629      	mov	r1, r5
 806013a:	f7e0 fcc5 	bl	8040ac8 <__aeabi_dcmpeq>
 806013e:	b108      	cbz	r0, 8060144 <__cvt+0xa4>
 8060140:	f8cd 900c 	str.w	r9, [sp, #12]
 8060144:	2230      	movs	r2, #48	; 0x30
 8060146:	9b03      	ldr	r3, [sp, #12]
 8060148:	454b      	cmp	r3, r9
 806014a:	d307      	bcc.n	806015c <__cvt+0xbc>
 806014c:	9b03      	ldr	r3, [sp, #12]
 806014e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8060150:	1bdb      	subs	r3, r3, r7
 8060152:	4638      	mov	r0, r7
 8060154:	6013      	str	r3, [r2, #0]
 8060156:	b004      	add	sp, #16
 8060158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 806015c:	1c59      	adds	r1, r3, #1
 806015e:	9103      	str	r1, [sp, #12]
 8060160:	701a      	strb	r2, [r3, #0]
 8060162:	e7f0      	b.n	8060146 <__cvt+0xa6>

08060164 <__exponent>:
 8060164:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8060166:	4603      	mov	r3, r0
 8060168:	2900      	cmp	r1, #0
 806016a:	bfb8      	it	lt
 806016c:	4249      	neglt	r1, r1
 806016e:	f803 2b02 	strb.w	r2, [r3], #2
 8060172:	bfb4      	ite	lt
 8060174:	222d      	movlt	r2, #45	; 0x2d
 8060176:	222b      	movge	r2, #43	; 0x2b
 8060178:	2909      	cmp	r1, #9
 806017a:	7042      	strb	r2, [r0, #1]
 806017c:	dd2a      	ble.n	80601d4 <__exponent+0x70>
 806017e:	f10d 0407 	add.w	r4, sp, #7
 8060182:	46a4      	mov	ip, r4
 8060184:	270a      	movs	r7, #10
 8060186:	46a6      	mov	lr, r4
 8060188:	460a      	mov	r2, r1
 806018a:	fb91 f6f7 	sdiv	r6, r1, r7
 806018e:	fb07 1516 	mls	r5, r7, r6, r1
 8060192:	3530      	adds	r5, #48	; 0x30
 8060194:	2a63      	cmp	r2, #99	; 0x63
 8060196:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 806019a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 806019e:	4631      	mov	r1, r6
 80601a0:	dcf1      	bgt.n	8060186 <__exponent+0x22>
 80601a2:	3130      	adds	r1, #48	; 0x30
 80601a4:	f1ae 0502 	sub.w	r5, lr, #2
 80601a8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80601ac:	1c44      	adds	r4, r0, #1
 80601ae:	4629      	mov	r1, r5
 80601b0:	4561      	cmp	r1, ip
 80601b2:	d30a      	bcc.n	80601ca <__exponent+0x66>
 80601b4:	f10d 0209 	add.w	r2, sp, #9
 80601b8:	eba2 020e 	sub.w	r2, r2, lr
 80601bc:	4565      	cmp	r5, ip
 80601be:	bf88      	it	hi
 80601c0:	2200      	movhi	r2, #0
 80601c2:	4413      	add	r3, r2
 80601c4:	1a18      	subs	r0, r3, r0
 80601c6:	b003      	add	sp, #12
 80601c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80601ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80601ce:	f804 2f01 	strb.w	r2, [r4, #1]!
 80601d2:	e7ed      	b.n	80601b0 <__exponent+0x4c>
 80601d4:	2330      	movs	r3, #48	; 0x30
 80601d6:	3130      	adds	r1, #48	; 0x30
 80601d8:	7083      	strb	r3, [r0, #2]
 80601da:	70c1      	strb	r1, [r0, #3]
 80601dc:	1d03      	adds	r3, r0, #4
 80601de:	e7f1      	b.n	80601c4 <__exponent+0x60>

080601e0 <_printf_float>:
 80601e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80601e4:	ed2d 8b02 	vpush	{d8}
 80601e8:	b08d      	sub	sp, #52	; 0x34
 80601ea:	460c      	mov	r4, r1
 80601ec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80601f0:	4616      	mov	r6, r2
 80601f2:	461f      	mov	r7, r3
 80601f4:	4605      	mov	r5, r0
 80601f6:	f001 fd63 	bl	8061cc0 <_localeconv_r>
 80601fa:	f8d0 a000 	ldr.w	sl, [r0]
 80601fe:	4650      	mov	r0, sl
 8060200:	f7df ffe6 	bl	80401d0 <strlen>
 8060204:	2300      	movs	r3, #0
 8060206:	930a      	str	r3, [sp, #40]	; 0x28
 8060208:	6823      	ldr	r3, [r4, #0]
 806020a:	9305      	str	r3, [sp, #20]
 806020c:	f8d8 3000 	ldr.w	r3, [r8]
 8060210:	f894 b018 	ldrb.w	fp, [r4, #24]
 8060214:	3307      	adds	r3, #7
 8060216:	f023 0307 	bic.w	r3, r3, #7
 806021a:	f103 0208 	add.w	r2, r3, #8
 806021e:	f8c8 2000 	str.w	r2, [r8]
 8060222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8060226:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 806022a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 806022e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8060232:	9307      	str	r3, [sp, #28]
 8060234:	f8cd 8018 	str.w	r8, [sp, #24]
 8060238:	ee08 0a10 	vmov	s16, r0
 806023c:	4b9f      	ldr	r3, [pc, #636]	; (80604bc <_printf_float+0x2dc>)
 806023e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8060242:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8060246:	f7e0 fc71 	bl	8040b2c <__aeabi_dcmpun>
 806024a:	bb88      	cbnz	r0, 80602b0 <_printf_float+0xd0>
 806024c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8060250:	4b9a      	ldr	r3, [pc, #616]	; (80604bc <_printf_float+0x2dc>)
 8060252:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8060256:	f7e0 fc4b 	bl	8040af0 <__aeabi_dcmple>
 806025a:	bb48      	cbnz	r0, 80602b0 <_printf_float+0xd0>
 806025c:	2200      	movs	r2, #0
 806025e:	2300      	movs	r3, #0
 8060260:	4640      	mov	r0, r8
 8060262:	4649      	mov	r1, r9
 8060264:	f7e0 fc3a 	bl	8040adc <__aeabi_dcmplt>
 8060268:	b110      	cbz	r0, 8060270 <_printf_float+0x90>
 806026a:	232d      	movs	r3, #45	; 0x2d
 806026c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8060270:	4b93      	ldr	r3, [pc, #588]	; (80604c0 <_printf_float+0x2e0>)
 8060272:	4894      	ldr	r0, [pc, #592]	; (80604c4 <_printf_float+0x2e4>)
 8060274:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8060278:	bf94      	ite	ls
 806027a:	4698      	movls	r8, r3
 806027c:	4680      	movhi	r8, r0
 806027e:	2303      	movs	r3, #3
 8060280:	6123      	str	r3, [r4, #16]
 8060282:	9b05      	ldr	r3, [sp, #20]
 8060284:	f023 0204 	bic.w	r2, r3, #4
 8060288:	6022      	str	r2, [r4, #0]
 806028a:	f04f 0900 	mov.w	r9, #0
 806028e:	9700      	str	r7, [sp, #0]
 8060290:	4633      	mov	r3, r6
 8060292:	aa0b      	add	r2, sp, #44	; 0x2c
 8060294:	4621      	mov	r1, r4
 8060296:	4628      	mov	r0, r5
 8060298:	f000 f9d8 	bl	806064c <_printf_common>
 806029c:	3001      	adds	r0, #1
 806029e:	f040 8090 	bne.w	80603c2 <_printf_float+0x1e2>
 80602a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80602a6:	b00d      	add	sp, #52	; 0x34
 80602a8:	ecbd 8b02 	vpop	{d8}
 80602ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80602b0:	4642      	mov	r2, r8
 80602b2:	464b      	mov	r3, r9
 80602b4:	4640      	mov	r0, r8
 80602b6:	4649      	mov	r1, r9
 80602b8:	f7e0 fc38 	bl	8040b2c <__aeabi_dcmpun>
 80602bc:	b140      	cbz	r0, 80602d0 <_printf_float+0xf0>
 80602be:	464b      	mov	r3, r9
 80602c0:	2b00      	cmp	r3, #0
 80602c2:	bfbc      	itt	lt
 80602c4:	232d      	movlt	r3, #45	; 0x2d
 80602c6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80602ca:	487f      	ldr	r0, [pc, #508]	; (80604c8 <_printf_float+0x2e8>)
 80602cc:	4b7f      	ldr	r3, [pc, #508]	; (80604cc <_printf_float+0x2ec>)
 80602ce:	e7d1      	b.n	8060274 <_printf_float+0x94>
 80602d0:	6863      	ldr	r3, [r4, #4]
 80602d2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80602d6:	9206      	str	r2, [sp, #24]
 80602d8:	1c5a      	adds	r2, r3, #1
 80602da:	d13f      	bne.n	806035c <_printf_float+0x17c>
 80602dc:	2306      	movs	r3, #6
 80602de:	6063      	str	r3, [r4, #4]
 80602e0:	9b05      	ldr	r3, [sp, #20]
 80602e2:	6861      	ldr	r1, [r4, #4]
 80602e4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80602e8:	2300      	movs	r3, #0
 80602ea:	9303      	str	r3, [sp, #12]
 80602ec:	ab0a      	add	r3, sp, #40	; 0x28
 80602ee:	e9cd b301 	strd	fp, r3, [sp, #4]
 80602f2:	ab09      	add	r3, sp, #36	; 0x24
 80602f4:	ec49 8b10 	vmov	d0, r8, r9
 80602f8:	9300      	str	r3, [sp, #0]
 80602fa:	6022      	str	r2, [r4, #0]
 80602fc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8060300:	4628      	mov	r0, r5
 8060302:	f7ff fecd 	bl	80600a0 <__cvt>
 8060306:	9b06      	ldr	r3, [sp, #24]
 8060308:	9909      	ldr	r1, [sp, #36]	; 0x24
 806030a:	2b47      	cmp	r3, #71	; 0x47
 806030c:	4680      	mov	r8, r0
 806030e:	d108      	bne.n	8060322 <_printf_float+0x142>
 8060310:	1cc8      	adds	r0, r1, #3
 8060312:	db02      	blt.n	806031a <_printf_float+0x13a>
 8060314:	6863      	ldr	r3, [r4, #4]
 8060316:	4299      	cmp	r1, r3
 8060318:	dd41      	ble.n	806039e <_printf_float+0x1be>
 806031a:	f1ab 0b02 	sub.w	fp, fp, #2
 806031e:	fa5f fb8b 	uxtb.w	fp, fp
 8060322:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8060326:	d820      	bhi.n	806036a <_printf_float+0x18a>
 8060328:	3901      	subs	r1, #1
 806032a:	465a      	mov	r2, fp
 806032c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8060330:	9109      	str	r1, [sp, #36]	; 0x24
 8060332:	f7ff ff17 	bl	8060164 <__exponent>
 8060336:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8060338:	1813      	adds	r3, r2, r0
 806033a:	2a01      	cmp	r2, #1
 806033c:	4681      	mov	r9, r0
 806033e:	6123      	str	r3, [r4, #16]
 8060340:	dc02      	bgt.n	8060348 <_printf_float+0x168>
 8060342:	6822      	ldr	r2, [r4, #0]
 8060344:	07d2      	lsls	r2, r2, #31
 8060346:	d501      	bpl.n	806034c <_printf_float+0x16c>
 8060348:	3301      	adds	r3, #1
 806034a:	6123      	str	r3, [r4, #16]
 806034c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8060350:	2b00      	cmp	r3, #0
 8060352:	d09c      	beq.n	806028e <_printf_float+0xae>
 8060354:	232d      	movs	r3, #45	; 0x2d
 8060356:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 806035a:	e798      	b.n	806028e <_printf_float+0xae>
 806035c:	9a06      	ldr	r2, [sp, #24]
 806035e:	2a47      	cmp	r2, #71	; 0x47
 8060360:	d1be      	bne.n	80602e0 <_printf_float+0x100>
 8060362:	2b00      	cmp	r3, #0
 8060364:	d1bc      	bne.n	80602e0 <_printf_float+0x100>
 8060366:	2301      	movs	r3, #1
 8060368:	e7b9      	b.n	80602de <_printf_float+0xfe>
 806036a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 806036e:	d118      	bne.n	80603a2 <_printf_float+0x1c2>
 8060370:	2900      	cmp	r1, #0
 8060372:	6863      	ldr	r3, [r4, #4]
 8060374:	dd0b      	ble.n	806038e <_printf_float+0x1ae>
 8060376:	6121      	str	r1, [r4, #16]
 8060378:	b913      	cbnz	r3, 8060380 <_printf_float+0x1a0>
 806037a:	6822      	ldr	r2, [r4, #0]
 806037c:	07d0      	lsls	r0, r2, #31
 806037e:	d502      	bpl.n	8060386 <_printf_float+0x1a6>
 8060380:	3301      	adds	r3, #1
 8060382:	440b      	add	r3, r1
 8060384:	6123      	str	r3, [r4, #16]
 8060386:	65a1      	str	r1, [r4, #88]	; 0x58
 8060388:	f04f 0900 	mov.w	r9, #0
 806038c:	e7de      	b.n	806034c <_printf_float+0x16c>
 806038e:	b913      	cbnz	r3, 8060396 <_printf_float+0x1b6>
 8060390:	6822      	ldr	r2, [r4, #0]
 8060392:	07d2      	lsls	r2, r2, #31
 8060394:	d501      	bpl.n	806039a <_printf_float+0x1ba>
 8060396:	3302      	adds	r3, #2
 8060398:	e7f4      	b.n	8060384 <_printf_float+0x1a4>
 806039a:	2301      	movs	r3, #1
 806039c:	e7f2      	b.n	8060384 <_printf_float+0x1a4>
 806039e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80603a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80603a4:	4299      	cmp	r1, r3
 80603a6:	db05      	blt.n	80603b4 <_printf_float+0x1d4>
 80603a8:	6823      	ldr	r3, [r4, #0]
 80603aa:	6121      	str	r1, [r4, #16]
 80603ac:	07d8      	lsls	r0, r3, #31
 80603ae:	d5ea      	bpl.n	8060386 <_printf_float+0x1a6>
 80603b0:	1c4b      	adds	r3, r1, #1
 80603b2:	e7e7      	b.n	8060384 <_printf_float+0x1a4>
 80603b4:	2900      	cmp	r1, #0
 80603b6:	bfd4      	ite	le
 80603b8:	f1c1 0202 	rsble	r2, r1, #2
 80603bc:	2201      	movgt	r2, #1
 80603be:	4413      	add	r3, r2
 80603c0:	e7e0      	b.n	8060384 <_printf_float+0x1a4>
 80603c2:	6823      	ldr	r3, [r4, #0]
 80603c4:	055a      	lsls	r2, r3, #21
 80603c6:	d407      	bmi.n	80603d8 <_printf_float+0x1f8>
 80603c8:	6923      	ldr	r3, [r4, #16]
 80603ca:	4642      	mov	r2, r8
 80603cc:	4631      	mov	r1, r6
 80603ce:	4628      	mov	r0, r5
 80603d0:	47b8      	blx	r7
 80603d2:	3001      	adds	r0, #1
 80603d4:	d12c      	bne.n	8060430 <_printf_float+0x250>
 80603d6:	e764      	b.n	80602a2 <_printf_float+0xc2>
 80603d8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80603dc:	f240 80e0 	bls.w	80605a0 <_printf_float+0x3c0>
 80603e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80603e4:	2200      	movs	r2, #0
 80603e6:	2300      	movs	r3, #0
 80603e8:	f7e0 fb6e 	bl	8040ac8 <__aeabi_dcmpeq>
 80603ec:	2800      	cmp	r0, #0
 80603ee:	d034      	beq.n	806045a <_printf_float+0x27a>
 80603f0:	4a37      	ldr	r2, [pc, #220]	; (80604d0 <_printf_float+0x2f0>)
 80603f2:	2301      	movs	r3, #1
 80603f4:	4631      	mov	r1, r6
 80603f6:	4628      	mov	r0, r5
 80603f8:	47b8      	blx	r7
 80603fa:	3001      	adds	r0, #1
 80603fc:	f43f af51 	beq.w	80602a2 <_printf_float+0xc2>
 8060400:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8060404:	429a      	cmp	r2, r3
 8060406:	db02      	blt.n	806040e <_printf_float+0x22e>
 8060408:	6823      	ldr	r3, [r4, #0]
 806040a:	07d8      	lsls	r0, r3, #31
 806040c:	d510      	bpl.n	8060430 <_printf_float+0x250>
 806040e:	ee18 3a10 	vmov	r3, s16
 8060412:	4652      	mov	r2, sl
 8060414:	4631      	mov	r1, r6
 8060416:	4628      	mov	r0, r5
 8060418:	47b8      	blx	r7
 806041a:	3001      	adds	r0, #1
 806041c:	f43f af41 	beq.w	80602a2 <_printf_float+0xc2>
 8060420:	f04f 0800 	mov.w	r8, #0
 8060424:	f104 091a 	add.w	r9, r4, #26
 8060428:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 806042a:	3b01      	subs	r3, #1
 806042c:	4543      	cmp	r3, r8
 806042e:	dc09      	bgt.n	8060444 <_printf_float+0x264>
 8060430:	6823      	ldr	r3, [r4, #0]
 8060432:	079b      	lsls	r3, r3, #30
 8060434:	f100 8105 	bmi.w	8060642 <_printf_float+0x462>
 8060438:	68e0      	ldr	r0, [r4, #12]
 806043a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 806043c:	4298      	cmp	r0, r3
 806043e:	bfb8      	it	lt
 8060440:	4618      	movlt	r0, r3
 8060442:	e730      	b.n	80602a6 <_printf_float+0xc6>
 8060444:	2301      	movs	r3, #1
 8060446:	464a      	mov	r2, r9
 8060448:	4631      	mov	r1, r6
 806044a:	4628      	mov	r0, r5
 806044c:	47b8      	blx	r7
 806044e:	3001      	adds	r0, #1
 8060450:	f43f af27 	beq.w	80602a2 <_printf_float+0xc2>
 8060454:	f108 0801 	add.w	r8, r8, #1
 8060458:	e7e6      	b.n	8060428 <_printf_float+0x248>
 806045a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 806045c:	2b00      	cmp	r3, #0
 806045e:	dc39      	bgt.n	80604d4 <_printf_float+0x2f4>
 8060460:	4a1b      	ldr	r2, [pc, #108]	; (80604d0 <_printf_float+0x2f0>)
 8060462:	2301      	movs	r3, #1
 8060464:	4631      	mov	r1, r6
 8060466:	4628      	mov	r0, r5
 8060468:	47b8      	blx	r7
 806046a:	3001      	adds	r0, #1
 806046c:	f43f af19 	beq.w	80602a2 <_printf_float+0xc2>
 8060470:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8060474:	4313      	orrs	r3, r2
 8060476:	d102      	bne.n	806047e <_printf_float+0x29e>
 8060478:	6823      	ldr	r3, [r4, #0]
 806047a:	07d9      	lsls	r1, r3, #31
 806047c:	d5d8      	bpl.n	8060430 <_printf_float+0x250>
 806047e:	ee18 3a10 	vmov	r3, s16
 8060482:	4652      	mov	r2, sl
 8060484:	4631      	mov	r1, r6
 8060486:	4628      	mov	r0, r5
 8060488:	47b8      	blx	r7
 806048a:	3001      	adds	r0, #1
 806048c:	f43f af09 	beq.w	80602a2 <_printf_float+0xc2>
 8060490:	f04f 0900 	mov.w	r9, #0
 8060494:	f104 0a1a 	add.w	sl, r4, #26
 8060498:	9b09      	ldr	r3, [sp, #36]	; 0x24
 806049a:	425b      	negs	r3, r3
 806049c:	454b      	cmp	r3, r9
 806049e:	dc01      	bgt.n	80604a4 <_printf_float+0x2c4>
 80604a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80604a2:	e792      	b.n	80603ca <_printf_float+0x1ea>
 80604a4:	2301      	movs	r3, #1
 80604a6:	4652      	mov	r2, sl
 80604a8:	4631      	mov	r1, r6
 80604aa:	4628      	mov	r0, r5
 80604ac:	47b8      	blx	r7
 80604ae:	3001      	adds	r0, #1
 80604b0:	f43f aef7 	beq.w	80602a2 <_printf_float+0xc2>
 80604b4:	f109 0901 	add.w	r9, r9, #1
 80604b8:	e7ee      	b.n	8060498 <_printf_float+0x2b8>
 80604ba:	bf00      	nop
 80604bc:	7fefffff 	.word	0x7fefffff
 80604c0:	0807d2b8 	.word	0x0807d2b8
 80604c4:	0807d2bc 	.word	0x0807d2bc
 80604c8:	0807d2c4 	.word	0x0807d2c4
 80604cc:	0807d2c0 	.word	0x0807d2c0
 80604d0:	0807d2c8 	.word	0x0807d2c8
 80604d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80604d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80604d8:	429a      	cmp	r2, r3
 80604da:	bfa8      	it	ge
 80604dc:	461a      	movge	r2, r3
 80604de:	2a00      	cmp	r2, #0
 80604e0:	4691      	mov	r9, r2
 80604e2:	dc37      	bgt.n	8060554 <_printf_float+0x374>
 80604e4:	f04f 0b00 	mov.w	fp, #0
 80604e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80604ec:	f104 021a 	add.w	r2, r4, #26
 80604f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80604f2:	9305      	str	r3, [sp, #20]
 80604f4:	eba3 0309 	sub.w	r3, r3, r9
 80604f8:	455b      	cmp	r3, fp
 80604fa:	dc33      	bgt.n	8060564 <_printf_float+0x384>
 80604fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8060500:	429a      	cmp	r2, r3
 8060502:	db3b      	blt.n	806057c <_printf_float+0x39c>
 8060504:	6823      	ldr	r3, [r4, #0]
 8060506:	07da      	lsls	r2, r3, #31
 8060508:	d438      	bmi.n	806057c <_printf_float+0x39c>
 806050a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 806050c:	9b05      	ldr	r3, [sp, #20]
 806050e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8060510:	1ad3      	subs	r3, r2, r3
 8060512:	eba2 0901 	sub.w	r9, r2, r1
 8060516:	4599      	cmp	r9, r3
 8060518:	bfa8      	it	ge
 806051a:	4699      	movge	r9, r3
 806051c:	f1b9 0f00 	cmp.w	r9, #0
 8060520:	dc35      	bgt.n	806058e <_printf_float+0x3ae>
 8060522:	f04f 0800 	mov.w	r8, #0
 8060526:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 806052a:	f104 0a1a 	add.w	sl, r4, #26
 806052e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8060532:	1a9b      	subs	r3, r3, r2
 8060534:	eba3 0309 	sub.w	r3, r3, r9
 8060538:	4543      	cmp	r3, r8
 806053a:	f77f af79 	ble.w	8060430 <_printf_float+0x250>
 806053e:	2301      	movs	r3, #1
 8060540:	4652      	mov	r2, sl
 8060542:	4631      	mov	r1, r6
 8060544:	4628      	mov	r0, r5
 8060546:	47b8      	blx	r7
 8060548:	3001      	adds	r0, #1
 806054a:	f43f aeaa 	beq.w	80602a2 <_printf_float+0xc2>
 806054e:	f108 0801 	add.w	r8, r8, #1
 8060552:	e7ec      	b.n	806052e <_printf_float+0x34e>
 8060554:	4613      	mov	r3, r2
 8060556:	4631      	mov	r1, r6
 8060558:	4642      	mov	r2, r8
 806055a:	4628      	mov	r0, r5
 806055c:	47b8      	blx	r7
 806055e:	3001      	adds	r0, #1
 8060560:	d1c0      	bne.n	80604e4 <_printf_float+0x304>
 8060562:	e69e      	b.n	80602a2 <_printf_float+0xc2>
 8060564:	2301      	movs	r3, #1
 8060566:	4631      	mov	r1, r6
 8060568:	4628      	mov	r0, r5
 806056a:	9205      	str	r2, [sp, #20]
 806056c:	47b8      	blx	r7
 806056e:	3001      	adds	r0, #1
 8060570:	f43f ae97 	beq.w	80602a2 <_printf_float+0xc2>
 8060574:	9a05      	ldr	r2, [sp, #20]
 8060576:	f10b 0b01 	add.w	fp, fp, #1
 806057a:	e7b9      	b.n	80604f0 <_printf_float+0x310>
 806057c:	ee18 3a10 	vmov	r3, s16
 8060580:	4652      	mov	r2, sl
 8060582:	4631      	mov	r1, r6
 8060584:	4628      	mov	r0, r5
 8060586:	47b8      	blx	r7
 8060588:	3001      	adds	r0, #1
 806058a:	d1be      	bne.n	806050a <_printf_float+0x32a>
 806058c:	e689      	b.n	80602a2 <_printf_float+0xc2>
 806058e:	9a05      	ldr	r2, [sp, #20]
 8060590:	464b      	mov	r3, r9
 8060592:	4442      	add	r2, r8
 8060594:	4631      	mov	r1, r6
 8060596:	4628      	mov	r0, r5
 8060598:	47b8      	blx	r7
 806059a:	3001      	adds	r0, #1
 806059c:	d1c1      	bne.n	8060522 <_printf_float+0x342>
 806059e:	e680      	b.n	80602a2 <_printf_float+0xc2>
 80605a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80605a2:	2a01      	cmp	r2, #1
 80605a4:	dc01      	bgt.n	80605aa <_printf_float+0x3ca>
 80605a6:	07db      	lsls	r3, r3, #31
 80605a8:	d538      	bpl.n	806061c <_printf_float+0x43c>
 80605aa:	2301      	movs	r3, #1
 80605ac:	4642      	mov	r2, r8
 80605ae:	4631      	mov	r1, r6
 80605b0:	4628      	mov	r0, r5
 80605b2:	47b8      	blx	r7
 80605b4:	3001      	adds	r0, #1
 80605b6:	f43f ae74 	beq.w	80602a2 <_printf_float+0xc2>
 80605ba:	ee18 3a10 	vmov	r3, s16
 80605be:	4652      	mov	r2, sl
 80605c0:	4631      	mov	r1, r6
 80605c2:	4628      	mov	r0, r5
 80605c4:	47b8      	blx	r7
 80605c6:	3001      	adds	r0, #1
 80605c8:	f43f ae6b 	beq.w	80602a2 <_printf_float+0xc2>
 80605cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80605d0:	2200      	movs	r2, #0
 80605d2:	2300      	movs	r3, #0
 80605d4:	f7e0 fa78 	bl	8040ac8 <__aeabi_dcmpeq>
 80605d8:	b9d8      	cbnz	r0, 8060612 <_printf_float+0x432>
 80605da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80605dc:	f108 0201 	add.w	r2, r8, #1
 80605e0:	3b01      	subs	r3, #1
 80605e2:	4631      	mov	r1, r6
 80605e4:	4628      	mov	r0, r5
 80605e6:	47b8      	blx	r7
 80605e8:	3001      	adds	r0, #1
 80605ea:	d10e      	bne.n	806060a <_printf_float+0x42a>
 80605ec:	e659      	b.n	80602a2 <_printf_float+0xc2>
 80605ee:	2301      	movs	r3, #1
 80605f0:	4652      	mov	r2, sl
 80605f2:	4631      	mov	r1, r6
 80605f4:	4628      	mov	r0, r5
 80605f6:	47b8      	blx	r7
 80605f8:	3001      	adds	r0, #1
 80605fa:	f43f ae52 	beq.w	80602a2 <_printf_float+0xc2>
 80605fe:	f108 0801 	add.w	r8, r8, #1
 8060602:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8060604:	3b01      	subs	r3, #1
 8060606:	4543      	cmp	r3, r8
 8060608:	dcf1      	bgt.n	80605ee <_printf_float+0x40e>
 806060a:	464b      	mov	r3, r9
 806060c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8060610:	e6dc      	b.n	80603cc <_printf_float+0x1ec>
 8060612:	f04f 0800 	mov.w	r8, #0
 8060616:	f104 0a1a 	add.w	sl, r4, #26
 806061a:	e7f2      	b.n	8060602 <_printf_float+0x422>
 806061c:	2301      	movs	r3, #1
 806061e:	4642      	mov	r2, r8
 8060620:	e7df      	b.n	80605e2 <_printf_float+0x402>
 8060622:	2301      	movs	r3, #1
 8060624:	464a      	mov	r2, r9
 8060626:	4631      	mov	r1, r6
 8060628:	4628      	mov	r0, r5
 806062a:	47b8      	blx	r7
 806062c:	3001      	adds	r0, #1
 806062e:	f43f ae38 	beq.w	80602a2 <_printf_float+0xc2>
 8060632:	f108 0801 	add.w	r8, r8, #1
 8060636:	68e3      	ldr	r3, [r4, #12]
 8060638:	990b      	ldr	r1, [sp, #44]	; 0x2c
 806063a:	1a5b      	subs	r3, r3, r1
 806063c:	4543      	cmp	r3, r8
 806063e:	dcf0      	bgt.n	8060622 <_printf_float+0x442>
 8060640:	e6fa      	b.n	8060438 <_printf_float+0x258>
 8060642:	f04f 0800 	mov.w	r8, #0
 8060646:	f104 0919 	add.w	r9, r4, #25
 806064a:	e7f4      	b.n	8060636 <_printf_float+0x456>

0806064c <_printf_common>:
 806064c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8060650:	4616      	mov	r6, r2
 8060652:	4699      	mov	r9, r3
 8060654:	688a      	ldr	r2, [r1, #8]
 8060656:	690b      	ldr	r3, [r1, #16]
 8060658:	f8dd 8020 	ldr.w	r8, [sp, #32]
 806065c:	4293      	cmp	r3, r2
 806065e:	bfb8      	it	lt
 8060660:	4613      	movlt	r3, r2
 8060662:	6033      	str	r3, [r6, #0]
 8060664:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8060668:	4607      	mov	r7, r0
 806066a:	460c      	mov	r4, r1
 806066c:	b10a      	cbz	r2, 8060672 <_printf_common+0x26>
 806066e:	3301      	adds	r3, #1
 8060670:	6033      	str	r3, [r6, #0]
 8060672:	6823      	ldr	r3, [r4, #0]
 8060674:	0699      	lsls	r1, r3, #26
 8060676:	bf42      	ittt	mi
 8060678:	6833      	ldrmi	r3, [r6, #0]
 806067a:	3302      	addmi	r3, #2
 806067c:	6033      	strmi	r3, [r6, #0]
 806067e:	6825      	ldr	r5, [r4, #0]
 8060680:	f015 0506 	ands.w	r5, r5, #6
 8060684:	d106      	bne.n	8060694 <_printf_common+0x48>
 8060686:	f104 0a19 	add.w	sl, r4, #25
 806068a:	68e3      	ldr	r3, [r4, #12]
 806068c:	6832      	ldr	r2, [r6, #0]
 806068e:	1a9b      	subs	r3, r3, r2
 8060690:	42ab      	cmp	r3, r5
 8060692:	dc26      	bgt.n	80606e2 <_printf_common+0x96>
 8060694:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8060698:	1e13      	subs	r3, r2, #0
 806069a:	6822      	ldr	r2, [r4, #0]
 806069c:	bf18      	it	ne
 806069e:	2301      	movne	r3, #1
 80606a0:	0692      	lsls	r2, r2, #26
 80606a2:	d42b      	bmi.n	80606fc <_printf_common+0xb0>
 80606a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80606a8:	4649      	mov	r1, r9
 80606aa:	4638      	mov	r0, r7
 80606ac:	47c0      	blx	r8
 80606ae:	3001      	adds	r0, #1
 80606b0:	d01e      	beq.n	80606f0 <_printf_common+0xa4>
 80606b2:	6823      	ldr	r3, [r4, #0]
 80606b4:	68e5      	ldr	r5, [r4, #12]
 80606b6:	6832      	ldr	r2, [r6, #0]
 80606b8:	f003 0306 	and.w	r3, r3, #6
 80606bc:	2b04      	cmp	r3, #4
 80606be:	bf08      	it	eq
 80606c0:	1aad      	subeq	r5, r5, r2
 80606c2:	68a3      	ldr	r3, [r4, #8]
 80606c4:	6922      	ldr	r2, [r4, #16]
 80606c6:	bf0c      	ite	eq
 80606c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80606cc:	2500      	movne	r5, #0
 80606ce:	4293      	cmp	r3, r2
 80606d0:	bfc4      	itt	gt
 80606d2:	1a9b      	subgt	r3, r3, r2
 80606d4:	18ed      	addgt	r5, r5, r3
 80606d6:	2600      	movs	r6, #0
 80606d8:	341a      	adds	r4, #26
 80606da:	42b5      	cmp	r5, r6
 80606dc:	d11a      	bne.n	8060714 <_printf_common+0xc8>
 80606de:	2000      	movs	r0, #0
 80606e0:	e008      	b.n	80606f4 <_printf_common+0xa8>
 80606e2:	2301      	movs	r3, #1
 80606e4:	4652      	mov	r2, sl
 80606e6:	4649      	mov	r1, r9
 80606e8:	4638      	mov	r0, r7
 80606ea:	47c0      	blx	r8
 80606ec:	3001      	adds	r0, #1
 80606ee:	d103      	bne.n	80606f8 <_printf_common+0xac>
 80606f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80606f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80606f8:	3501      	adds	r5, #1
 80606fa:	e7c6      	b.n	806068a <_printf_common+0x3e>
 80606fc:	18e1      	adds	r1, r4, r3
 80606fe:	1c5a      	adds	r2, r3, #1
 8060700:	2030      	movs	r0, #48	; 0x30
 8060702:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8060706:	4422      	add	r2, r4
 8060708:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 806070c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8060710:	3302      	adds	r3, #2
 8060712:	e7c7      	b.n	80606a4 <_printf_common+0x58>
 8060714:	2301      	movs	r3, #1
 8060716:	4622      	mov	r2, r4
 8060718:	4649      	mov	r1, r9
 806071a:	4638      	mov	r0, r7
 806071c:	47c0      	blx	r8
 806071e:	3001      	adds	r0, #1
 8060720:	d0e6      	beq.n	80606f0 <_printf_common+0xa4>
 8060722:	3601      	adds	r6, #1
 8060724:	e7d9      	b.n	80606da <_printf_common+0x8e>
	...

08060728 <_printf_i>:
 8060728:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 806072c:	460c      	mov	r4, r1
 806072e:	4691      	mov	r9, r2
 8060730:	7e27      	ldrb	r7, [r4, #24]
 8060732:	990c      	ldr	r1, [sp, #48]	; 0x30
 8060734:	2f78      	cmp	r7, #120	; 0x78
 8060736:	4680      	mov	r8, r0
 8060738:	469a      	mov	sl, r3
 806073a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 806073e:	d807      	bhi.n	8060750 <_printf_i+0x28>
 8060740:	2f62      	cmp	r7, #98	; 0x62
 8060742:	d80a      	bhi.n	806075a <_printf_i+0x32>
 8060744:	2f00      	cmp	r7, #0
 8060746:	f000 80d8 	beq.w	80608fa <_printf_i+0x1d2>
 806074a:	2f58      	cmp	r7, #88	; 0x58
 806074c:	f000 80a3 	beq.w	8060896 <_printf_i+0x16e>
 8060750:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8060754:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8060758:	e03a      	b.n	80607d0 <_printf_i+0xa8>
 806075a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 806075e:	2b15      	cmp	r3, #21
 8060760:	d8f6      	bhi.n	8060750 <_printf_i+0x28>
 8060762:	a001      	add	r0, pc, #4	; (adr r0, 8060768 <_printf_i+0x40>)
 8060764:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8060768:	080607c1 	.word	0x080607c1
 806076c:	080607d5 	.word	0x080607d5
 8060770:	08060751 	.word	0x08060751
 8060774:	08060751 	.word	0x08060751
 8060778:	08060751 	.word	0x08060751
 806077c:	08060751 	.word	0x08060751
 8060780:	080607d5 	.word	0x080607d5
 8060784:	08060751 	.word	0x08060751
 8060788:	08060751 	.word	0x08060751
 806078c:	08060751 	.word	0x08060751
 8060790:	08060751 	.word	0x08060751
 8060794:	080608e1 	.word	0x080608e1
 8060798:	08060805 	.word	0x08060805
 806079c:	080608c3 	.word	0x080608c3
 80607a0:	08060751 	.word	0x08060751
 80607a4:	08060751 	.word	0x08060751
 80607a8:	08060903 	.word	0x08060903
 80607ac:	08060751 	.word	0x08060751
 80607b0:	08060805 	.word	0x08060805
 80607b4:	08060751 	.word	0x08060751
 80607b8:	08060751 	.word	0x08060751
 80607bc:	080608cb 	.word	0x080608cb
 80607c0:	680b      	ldr	r3, [r1, #0]
 80607c2:	1d1a      	adds	r2, r3, #4
 80607c4:	681b      	ldr	r3, [r3, #0]
 80607c6:	600a      	str	r2, [r1, #0]
 80607c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80607cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80607d0:	2301      	movs	r3, #1
 80607d2:	e0a3      	b.n	806091c <_printf_i+0x1f4>
 80607d4:	6825      	ldr	r5, [r4, #0]
 80607d6:	6808      	ldr	r0, [r1, #0]
 80607d8:	062e      	lsls	r6, r5, #24
 80607da:	f100 0304 	add.w	r3, r0, #4
 80607de:	d50a      	bpl.n	80607f6 <_printf_i+0xce>
 80607e0:	6805      	ldr	r5, [r0, #0]
 80607e2:	600b      	str	r3, [r1, #0]
 80607e4:	2d00      	cmp	r5, #0
 80607e6:	da03      	bge.n	80607f0 <_printf_i+0xc8>
 80607e8:	232d      	movs	r3, #45	; 0x2d
 80607ea:	426d      	negs	r5, r5
 80607ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80607f0:	485e      	ldr	r0, [pc, #376]	; (806096c <_printf_i+0x244>)
 80607f2:	230a      	movs	r3, #10
 80607f4:	e019      	b.n	806082a <_printf_i+0x102>
 80607f6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80607fa:	6805      	ldr	r5, [r0, #0]
 80607fc:	600b      	str	r3, [r1, #0]
 80607fe:	bf18      	it	ne
 8060800:	b22d      	sxthne	r5, r5
 8060802:	e7ef      	b.n	80607e4 <_printf_i+0xbc>
 8060804:	680b      	ldr	r3, [r1, #0]
 8060806:	6825      	ldr	r5, [r4, #0]
 8060808:	1d18      	adds	r0, r3, #4
 806080a:	6008      	str	r0, [r1, #0]
 806080c:	0628      	lsls	r0, r5, #24
 806080e:	d501      	bpl.n	8060814 <_printf_i+0xec>
 8060810:	681d      	ldr	r5, [r3, #0]
 8060812:	e002      	b.n	806081a <_printf_i+0xf2>
 8060814:	0669      	lsls	r1, r5, #25
 8060816:	d5fb      	bpl.n	8060810 <_printf_i+0xe8>
 8060818:	881d      	ldrh	r5, [r3, #0]
 806081a:	4854      	ldr	r0, [pc, #336]	; (806096c <_printf_i+0x244>)
 806081c:	2f6f      	cmp	r7, #111	; 0x6f
 806081e:	bf0c      	ite	eq
 8060820:	2308      	moveq	r3, #8
 8060822:	230a      	movne	r3, #10
 8060824:	2100      	movs	r1, #0
 8060826:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 806082a:	6866      	ldr	r6, [r4, #4]
 806082c:	60a6      	str	r6, [r4, #8]
 806082e:	2e00      	cmp	r6, #0
 8060830:	bfa2      	ittt	ge
 8060832:	6821      	ldrge	r1, [r4, #0]
 8060834:	f021 0104 	bicge.w	r1, r1, #4
 8060838:	6021      	strge	r1, [r4, #0]
 806083a:	b90d      	cbnz	r5, 8060840 <_printf_i+0x118>
 806083c:	2e00      	cmp	r6, #0
 806083e:	d04d      	beq.n	80608dc <_printf_i+0x1b4>
 8060840:	4616      	mov	r6, r2
 8060842:	fbb5 f1f3 	udiv	r1, r5, r3
 8060846:	fb03 5711 	mls	r7, r3, r1, r5
 806084a:	5dc7      	ldrb	r7, [r0, r7]
 806084c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8060850:	462f      	mov	r7, r5
 8060852:	42bb      	cmp	r3, r7
 8060854:	460d      	mov	r5, r1
 8060856:	d9f4      	bls.n	8060842 <_printf_i+0x11a>
 8060858:	2b08      	cmp	r3, #8
 806085a:	d10b      	bne.n	8060874 <_printf_i+0x14c>
 806085c:	6823      	ldr	r3, [r4, #0]
 806085e:	07df      	lsls	r7, r3, #31
 8060860:	d508      	bpl.n	8060874 <_printf_i+0x14c>
 8060862:	6923      	ldr	r3, [r4, #16]
 8060864:	6861      	ldr	r1, [r4, #4]
 8060866:	4299      	cmp	r1, r3
 8060868:	bfde      	ittt	le
 806086a:	2330      	movle	r3, #48	; 0x30
 806086c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8060870:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8060874:	1b92      	subs	r2, r2, r6
 8060876:	6122      	str	r2, [r4, #16]
 8060878:	f8cd a000 	str.w	sl, [sp]
 806087c:	464b      	mov	r3, r9
 806087e:	aa03      	add	r2, sp, #12
 8060880:	4621      	mov	r1, r4
 8060882:	4640      	mov	r0, r8
 8060884:	f7ff fee2 	bl	806064c <_printf_common>
 8060888:	3001      	adds	r0, #1
 806088a:	d14c      	bne.n	8060926 <_printf_i+0x1fe>
 806088c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8060890:	b004      	add	sp, #16
 8060892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8060896:	4835      	ldr	r0, [pc, #212]	; (806096c <_printf_i+0x244>)
 8060898:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 806089c:	6823      	ldr	r3, [r4, #0]
 806089e:	680e      	ldr	r6, [r1, #0]
 80608a0:	061f      	lsls	r7, r3, #24
 80608a2:	f856 5b04 	ldr.w	r5, [r6], #4
 80608a6:	600e      	str	r6, [r1, #0]
 80608a8:	d514      	bpl.n	80608d4 <_printf_i+0x1ac>
 80608aa:	07d9      	lsls	r1, r3, #31
 80608ac:	bf44      	itt	mi
 80608ae:	f043 0320 	orrmi.w	r3, r3, #32
 80608b2:	6023      	strmi	r3, [r4, #0]
 80608b4:	b91d      	cbnz	r5, 80608be <_printf_i+0x196>
 80608b6:	6823      	ldr	r3, [r4, #0]
 80608b8:	f023 0320 	bic.w	r3, r3, #32
 80608bc:	6023      	str	r3, [r4, #0]
 80608be:	2310      	movs	r3, #16
 80608c0:	e7b0      	b.n	8060824 <_printf_i+0xfc>
 80608c2:	6823      	ldr	r3, [r4, #0]
 80608c4:	f043 0320 	orr.w	r3, r3, #32
 80608c8:	6023      	str	r3, [r4, #0]
 80608ca:	2378      	movs	r3, #120	; 0x78
 80608cc:	4828      	ldr	r0, [pc, #160]	; (8060970 <_printf_i+0x248>)
 80608ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80608d2:	e7e3      	b.n	806089c <_printf_i+0x174>
 80608d4:	065e      	lsls	r6, r3, #25
 80608d6:	bf48      	it	mi
 80608d8:	b2ad      	uxthmi	r5, r5
 80608da:	e7e6      	b.n	80608aa <_printf_i+0x182>
 80608dc:	4616      	mov	r6, r2
 80608de:	e7bb      	b.n	8060858 <_printf_i+0x130>
 80608e0:	680b      	ldr	r3, [r1, #0]
 80608e2:	6826      	ldr	r6, [r4, #0]
 80608e4:	6960      	ldr	r0, [r4, #20]
 80608e6:	1d1d      	adds	r5, r3, #4
 80608e8:	600d      	str	r5, [r1, #0]
 80608ea:	0635      	lsls	r5, r6, #24
 80608ec:	681b      	ldr	r3, [r3, #0]
 80608ee:	d501      	bpl.n	80608f4 <_printf_i+0x1cc>
 80608f0:	6018      	str	r0, [r3, #0]
 80608f2:	e002      	b.n	80608fa <_printf_i+0x1d2>
 80608f4:	0671      	lsls	r1, r6, #25
 80608f6:	d5fb      	bpl.n	80608f0 <_printf_i+0x1c8>
 80608f8:	8018      	strh	r0, [r3, #0]
 80608fa:	2300      	movs	r3, #0
 80608fc:	6123      	str	r3, [r4, #16]
 80608fe:	4616      	mov	r6, r2
 8060900:	e7ba      	b.n	8060878 <_printf_i+0x150>
 8060902:	680b      	ldr	r3, [r1, #0]
 8060904:	1d1a      	adds	r2, r3, #4
 8060906:	600a      	str	r2, [r1, #0]
 8060908:	681e      	ldr	r6, [r3, #0]
 806090a:	6862      	ldr	r2, [r4, #4]
 806090c:	2100      	movs	r1, #0
 806090e:	4630      	mov	r0, r6
 8060910:	f7df fc66 	bl	80401e0 <memchr>
 8060914:	b108      	cbz	r0, 806091a <_printf_i+0x1f2>
 8060916:	1b80      	subs	r0, r0, r6
 8060918:	6060      	str	r0, [r4, #4]
 806091a:	6863      	ldr	r3, [r4, #4]
 806091c:	6123      	str	r3, [r4, #16]
 806091e:	2300      	movs	r3, #0
 8060920:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8060924:	e7a8      	b.n	8060878 <_printf_i+0x150>
 8060926:	6923      	ldr	r3, [r4, #16]
 8060928:	4632      	mov	r2, r6
 806092a:	4649      	mov	r1, r9
 806092c:	4640      	mov	r0, r8
 806092e:	47d0      	blx	sl
 8060930:	3001      	adds	r0, #1
 8060932:	d0ab      	beq.n	806088c <_printf_i+0x164>
 8060934:	6823      	ldr	r3, [r4, #0]
 8060936:	079b      	lsls	r3, r3, #30
 8060938:	d413      	bmi.n	8060962 <_printf_i+0x23a>
 806093a:	68e0      	ldr	r0, [r4, #12]
 806093c:	9b03      	ldr	r3, [sp, #12]
 806093e:	4298      	cmp	r0, r3
 8060940:	bfb8      	it	lt
 8060942:	4618      	movlt	r0, r3
 8060944:	e7a4      	b.n	8060890 <_printf_i+0x168>
 8060946:	2301      	movs	r3, #1
 8060948:	4632      	mov	r2, r6
 806094a:	4649      	mov	r1, r9
 806094c:	4640      	mov	r0, r8
 806094e:	47d0      	blx	sl
 8060950:	3001      	adds	r0, #1
 8060952:	d09b      	beq.n	806088c <_printf_i+0x164>
 8060954:	3501      	adds	r5, #1
 8060956:	68e3      	ldr	r3, [r4, #12]
 8060958:	9903      	ldr	r1, [sp, #12]
 806095a:	1a5b      	subs	r3, r3, r1
 806095c:	42ab      	cmp	r3, r5
 806095e:	dcf2      	bgt.n	8060946 <_printf_i+0x21e>
 8060960:	e7eb      	b.n	806093a <_printf_i+0x212>
 8060962:	2500      	movs	r5, #0
 8060964:	f104 0619 	add.w	r6, r4, #25
 8060968:	e7f5      	b.n	8060956 <_printf_i+0x22e>
 806096a:	bf00      	nop
 806096c:	0807d2ca 	.word	0x0807d2ca
 8060970:	0807d2db 	.word	0x0807d2db

08060974 <iprintf>:
 8060974:	b40f      	push	{r0, r1, r2, r3}
 8060976:	4b0a      	ldr	r3, [pc, #40]	; (80609a0 <iprintf+0x2c>)
 8060978:	b513      	push	{r0, r1, r4, lr}
 806097a:	681c      	ldr	r4, [r3, #0]
 806097c:	b124      	cbz	r4, 8060988 <iprintf+0x14>
 806097e:	69a3      	ldr	r3, [r4, #24]
 8060980:	b913      	cbnz	r3, 8060988 <iprintf+0x14>
 8060982:	4620      	mov	r0, r4
 8060984:	f001 f8fe 	bl	8061b84 <__sinit>
 8060988:	ab05      	add	r3, sp, #20
 806098a:	9a04      	ldr	r2, [sp, #16]
 806098c:	68a1      	ldr	r1, [r4, #8]
 806098e:	9301      	str	r3, [sp, #4]
 8060990:	4620      	mov	r0, r4
 8060992:	f001 fe0d 	bl	80625b0 <_vfiprintf_r>
 8060996:	b002      	add	sp, #8
 8060998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 806099c:	b004      	add	sp, #16
 806099e:	4770      	bx	lr
 80609a0:	20007cc0 	.word	0x20007cc0

080609a4 <putchar>:
 80609a4:	4b09      	ldr	r3, [pc, #36]	; (80609cc <putchar+0x28>)
 80609a6:	b513      	push	{r0, r1, r4, lr}
 80609a8:	681c      	ldr	r4, [r3, #0]
 80609aa:	4601      	mov	r1, r0
 80609ac:	b134      	cbz	r4, 80609bc <putchar+0x18>
 80609ae:	69a3      	ldr	r3, [r4, #24]
 80609b0:	b923      	cbnz	r3, 80609bc <putchar+0x18>
 80609b2:	9001      	str	r0, [sp, #4]
 80609b4:	4620      	mov	r0, r4
 80609b6:	f001 f8e5 	bl	8061b84 <__sinit>
 80609ba:	9901      	ldr	r1, [sp, #4]
 80609bc:	68a2      	ldr	r2, [r4, #8]
 80609be:	4620      	mov	r0, r4
 80609c0:	b002      	add	sp, #8
 80609c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80609c6:	f001 bf23 	b.w	8062810 <_putc_r>
 80609ca:	bf00      	nop
 80609cc:	20007cc0 	.word	0x20007cc0

080609d0 <_puts_r>:
 80609d0:	b570      	push	{r4, r5, r6, lr}
 80609d2:	460e      	mov	r6, r1
 80609d4:	4605      	mov	r5, r0
 80609d6:	b118      	cbz	r0, 80609e0 <_puts_r+0x10>
 80609d8:	6983      	ldr	r3, [r0, #24]
 80609da:	b90b      	cbnz	r3, 80609e0 <_puts_r+0x10>
 80609dc:	f001 f8d2 	bl	8061b84 <__sinit>
 80609e0:	69ab      	ldr	r3, [r5, #24]
 80609e2:	68ac      	ldr	r4, [r5, #8]
 80609e4:	b913      	cbnz	r3, 80609ec <_puts_r+0x1c>
 80609e6:	4628      	mov	r0, r5
 80609e8:	f001 f8cc 	bl	8061b84 <__sinit>
 80609ec:	4b2c      	ldr	r3, [pc, #176]	; (8060aa0 <_puts_r+0xd0>)
 80609ee:	429c      	cmp	r4, r3
 80609f0:	d120      	bne.n	8060a34 <_puts_r+0x64>
 80609f2:	686c      	ldr	r4, [r5, #4]
 80609f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80609f6:	07db      	lsls	r3, r3, #31
 80609f8:	d405      	bmi.n	8060a06 <_puts_r+0x36>
 80609fa:	89a3      	ldrh	r3, [r4, #12]
 80609fc:	0598      	lsls	r0, r3, #22
 80609fe:	d402      	bmi.n	8060a06 <_puts_r+0x36>
 8060a00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8060a02:	f001 f962 	bl	8061cca <__retarget_lock_acquire_recursive>
 8060a06:	89a3      	ldrh	r3, [r4, #12]
 8060a08:	0719      	lsls	r1, r3, #28
 8060a0a:	d51d      	bpl.n	8060a48 <_puts_r+0x78>
 8060a0c:	6923      	ldr	r3, [r4, #16]
 8060a0e:	b1db      	cbz	r3, 8060a48 <_puts_r+0x78>
 8060a10:	3e01      	subs	r6, #1
 8060a12:	68a3      	ldr	r3, [r4, #8]
 8060a14:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8060a18:	3b01      	subs	r3, #1
 8060a1a:	60a3      	str	r3, [r4, #8]
 8060a1c:	bb39      	cbnz	r1, 8060a6e <_puts_r+0x9e>
 8060a1e:	2b00      	cmp	r3, #0
 8060a20:	da38      	bge.n	8060a94 <_puts_r+0xc4>
 8060a22:	4622      	mov	r2, r4
 8060a24:	210a      	movs	r1, #10
 8060a26:	4628      	mov	r0, r5
 8060a28:	f000 f858 	bl	8060adc <__swbuf_r>
 8060a2c:	3001      	adds	r0, #1
 8060a2e:	d011      	beq.n	8060a54 <_puts_r+0x84>
 8060a30:	250a      	movs	r5, #10
 8060a32:	e011      	b.n	8060a58 <_puts_r+0x88>
 8060a34:	4b1b      	ldr	r3, [pc, #108]	; (8060aa4 <_puts_r+0xd4>)
 8060a36:	429c      	cmp	r4, r3
 8060a38:	d101      	bne.n	8060a3e <_puts_r+0x6e>
 8060a3a:	68ac      	ldr	r4, [r5, #8]
 8060a3c:	e7da      	b.n	80609f4 <_puts_r+0x24>
 8060a3e:	4b1a      	ldr	r3, [pc, #104]	; (8060aa8 <_puts_r+0xd8>)
 8060a40:	429c      	cmp	r4, r3
 8060a42:	bf08      	it	eq
 8060a44:	68ec      	ldreq	r4, [r5, #12]
 8060a46:	e7d5      	b.n	80609f4 <_puts_r+0x24>
 8060a48:	4621      	mov	r1, r4
 8060a4a:	4628      	mov	r0, r5
 8060a4c:	f000 f898 	bl	8060b80 <__swsetup_r>
 8060a50:	2800      	cmp	r0, #0
 8060a52:	d0dd      	beq.n	8060a10 <_puts_r+0x40>
 8060a54:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8060a58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8060a5a:	07da      	lsls	r2, r3, #31
 8060a5c:	d405      	bmi.n	8060a6a <_puts_r+0x9a>
 8060a5e:	89a3      	ldrh	r3, [r4, #12]
 8060a60:	059b      	lsls	r3, r3, #22
 8060a62:	d402      	bmi.n	8060a6a <_puts_r+0x9a>
 8060a64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8060a66:	f001 f931 	bl	8061ccc <__retarget_lock_release_recursive>
 8060a6a:	4628      	mov	r0, r5
 8060a6c:	bd70      	pop	{r4, r5, r6, pc}
 8060a6e:	2b00      	cmp	r3, #0
 8060a70:	da04      	bge.n	8060a7c <_puts_r+0xac>
 8060a72:	69a2      	ldr	r2, [r4, #24]
 8060a74:	429a      	cmp	r2, r3
 8060a76:	dc06      	bgt.n	8060a86 <_puts_r+0xb6>
 8060a78:	290a      	cmp	r1, #10
 8060a7a:	d004      	beq.n	8060a86 <_puts_r+0xb6>
 8060a7c:	6823      	ldr	r3, [r4, #0]
 8060a7e:	1c5a      	adds	r2, r3, #1
 8060a80:	6022      	str	r2, [r4, #0]
 8060a82:	7019      	strb	r1, [r3, #0]
 8060a84:	e7c5      	b.n	8060a12 <_puts_r+0x42>
 8060a86:	4622      	mov	r2, r4
 8060a88:	4628      	mov	r0, r5
 8060a8a:	f000 f827 	bl	8060adc <__swbuf_r>
 8060a8e:	3001      	adds	r0, #1
 8060a90:	d1bf      	bne.n	8060a12 <_puts_r+0x42>
 8060a92:	e7df      	b.n	8060a54 <_puts_r+0x84>
 8060a94:	6823      	ldr	r3, [r4, #0]
 8060a96:	250a      	movs	r5, #10
 8060a98:	1c5a      	adds	r2, r3, #1
 8060a9a:	6022      	str	r2, [r4, #0]
 8060a9c:	701d      	strb	r5, [r3, #0]
 8060a9e:	e7db      	b.n	8060a58 <_puts_r+0x88>
 8060aa0:	0807d3a0 	.word	0x0807d3a0
 8060aa4:	0807d3c0 	.word	0x0807d3c0
 8060aa8:	0807d380 	.word	0x0807d380

08060aac <puts>:
 8060aac:	4b02      	ldr	r3, [pc, #8]	; (8060ab8 <puts+0xc>)
 8060aae:	4601      	mov	r1, r0
 8060ab0:	6818      	ldr	r0, [r3, #0]
 8060ab2:	f7ff bf8d 	b.w	80609d0 <_puts_r>
 8060ab6:	bf00      	nop
 8060ab8:	20007cc0 	.word	0x20007cc0

08060abc <_sbrk_r>:
 8060abc:	b538      	push	{r3, r4, r5, lr}
 8060abe:	4d06      	ldr	r5, [pc, #24]	; (8060ad8 <_sbrk_r+0x1c>)
 8060ac0:	2300      	movs	r3, #0
 8060ac2:	4604      	mov	r4, r0
 8060ac4:	4608      	mov	r0, r1
 8060ac6:	602b      	str	r3, [r5, #0]
 8060ac8:	f7ed fc02 	bl	804e2d0 <_sbrk>
 8060acc:	1c43      	adds	r3, r0, #1
 8060ace:	d102      	bne.n	8060ad6 <_sbrk_r+0x1a>
 8060ad0:	682b      	ldr	r3, [r5, #0]
 8060ad2:	b103      	cbz	r3, 8060ad6 <_sbrk_r+0x1a>
 8060ad4:	6023      	str	r3, [r4, #0]
 8060ad6:	bd38      	pop	{r3, r4, r5, pc}
 8060ad8:	2001c390 	.word	0x2001c390

08060adc <__swbuf_r>:
 8060adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8060ade:	460e      	mov	r6, r1
 8060ae0:	4614      	mov	r4, r2
 8060ae2:	4605      	mov	r5, r0
 8060ae4:	b118      	cbz	r0, 8060aee <__swbuf_r+0x12>
 8060ae6:	6983      	ldr	r3, [r0, #24]
 8060ae8:	b90b      	cbnz	r3, 8060aee <__swbuf_r+0x12>
 8060aea:	f001 f84b 	bl	8061b84 <__sinit>
 8060aee:	4b21      	ldr	r3, [pc, #132]	; (8060b74 <__swbuf_r+0x98>)
 8060af0:	429c      	cmp	r4, r3
 8060af2:	d12b      	bne.n	8060b4c <__swbuf_r+0x70>
 8060af4:	686c      	ldr	r4, [r5, #4]
 8060af6:	69a3      	ldr	r3, [r4, #24]
 8060af8:	60a3      	str	r3, [r4, #8]
 8060afa:	89a3      	ldrh	r3, [r4, #12]
 8060afc:	071a      	lsls	r2, r3, #28
 8060afe:	d52f      	bpl.n	8060b60 <__swbuf_r+0x84>
 8060b00:	6923      	ldr	r3, [r4, #16]
 8060b02:	b36b      	cbz	r3, 8060b60 <__swbuf_r+0x84>
 8060b04:	6923      	ldr	r3, [r4, #16]
 8060b06:	6820      	ldr	r0, [r4, #0]
 8060b08:	1ac0      	subs	r0, r0, r3
 8060b0a:	6963      	ldr	r3, [r4, #20]
 8060b0c:	b2f6      	uxtb	r6, r6
 8060b0e:	4283      	cmp	r3, r0
 8060b10:	4637      	mov	r7, r6
 8060b12:	dc04      	bgt.n	8060b1e <__swbuf_r+0x42>
 8060b14:	4621      	mov	r1, r4
 8060b16:	4628      	mov	r0, r5
 8060b18:	f000 ffa0 	bl	8061a5c <_fflush_r>
 8060b1c:	bb30      	cbnz	r0, 8060b6c <__swbuf_r+0x90>
 8060b1e:	68a3      	ldr	r3, [r4, #8]
 8060b20:	3b01      	subs	r3, #1
 8060b22:	60a3      	str	r3, [r4, #8]
 8060b24:	6823      	ldr	r3, [r4, #0]
 8060b26:	1c5a      	adds	r2, r3, #1
 8060b28:	6022      	str	r2, [r4, #0]
 8060b2a:	701e      	strb	r6, [r3, #0]
 8060b2c:	6963      	ldr	r3, [r4, #20]
 8060b2e:	3001      	adds	r0, #1
 8060b30:	4283      	cmp	r3, r0
 8060b32:	d004      	beq.n	8060b3e <__swbuf_r+0x62>
 8060b34:	89a3      	ldrh	r3, [r4, #12]
 8060b36:	07db      	lsls	r3, r3, #31
 8060b38:	d506      	bpl.n	8060b48 <__swbuf_r+0x6c>
 8060b3a:	2e0a      	cmp	r6, #10
 8060b3c:	d104      	bne.n	8060b48 <__swbuf_r+0x6c>
 8060b3e:	4621      	mov	r1, r4
 8060b40:	4628      	mov	r0, r5
 8060b42:	f000 ff8b 	bl	8061a5c <_fflush_r>
 8060b46:	b988      	cbnz	r0, 8060b6c <__swbuf_r+0x90>
 8060b48:	4638      	mov	r0, r7
 8060b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8060b4c:	4b0a      	ldr	r3, [pc, #40]	; (8060b78 <__swbuf_r+0x9c>)
 8060b4e:	429c      	cmp	r4, r3
 8060b50:	d101      	bne.n	8060b56 <__swbuf_r+0x7a>
 8060b52:	68ac      	ldr	r4, [r5, #8]
 8060b54:	e7cf      	b.n	8060af6 <__swbuf_r+0x1a>
 8060b56:	4b09      	ldr	r3, [pc, #36]	; (8060b7c <__swbuf_r+0xa0>)
 8060b58:	429c      	cmp	r4, r3
 8060b5a:	bf08      	it	eq
 8060b5c:	68ec      	ldreq	r4, [r5, #12]
 8060b5e:	e7ca      	b.n	8060af6 <__swbuf_r+0x1a>
 8060b60:	4621      	mov	r1, r4
 8060b62:	4628      	mov	r0, r5
 8060b64:	f000 f80c 	bl	8060b80 <__swsetup_r>
 8060b68:	2800      	cmp	r0, #0
 8060b6a:	d0cb      	beq.n	8060b04 <__swbuf_r+0x28>
 8060b6c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8060b70:	e7ea      	b.n	8060b48 <__swbuf_r+0x6c>
 8060b72:	bf00      	nop
 8060b74:	0807d3a0 	.word	0x0807d3a0
 8060b78:	0807d3c0 	.word	0x0807d3c0
 8060b7c:	0807d380 	.word	0x0807d380

08060b80 <__swsetup_r>:
 8060b80:	4b32      	ldr	r3, [pc, #200]	; (8060c4c <__swsetup_r+0xcc>)
 8060b82:	b570      	push	{r4, r5, r6, lr}
 8060b84:	681d      	ldr	r5, [r3, #0]
 8060b86:	4606      	mov	r6, r0
 8060b88:	460c      	mov	r4, r1
 8060b8a:	b125      	cbz	r5, 8060b96 <__swsetup_r+0x16>
 8060b8c:	69ab      	ldr	r3, [r5, #24]
 8060b8e:	b913      	cbnz	r3, 8060b96 <__swsetup_r+0x16>
 8060b90:	4628      	mov	r0, r5
 8060b92:	f000 fff7 	bl	8061b84 <__sinit>
 8060b96:	4b2e      	ldr	r3, [pc, #184]	; (8060c50 <__swsetup_r+0xd0>)
 8060b98:	429c      	cmp	r4, r3
 8060b9a:	d10f      	bne.n	8060bbc <__swsetup_r+0x3c>
 8060b9c:	686c      	ldr	r4, [r5, #4]
 8060b9e:	89a3      	ldrh	r3, [r4, #12]
 8060ba0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8060ba4:	0719      	lsls	r1, r3, #28
 8060ba6:	d42c      	bmi.n	8060c02 <__swsetup_r+0x82>
 8060ba8:	06dd      	lsls	r5, r3, #27
 8060baa:	d411      	bmi.n	8060bd0 <__swsetup_r+0x50>
 8060bac:	2309      	movs	r3, #9
 8060bae:	6033      	str	r3, [r6, #0]
 8060bb0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8060bb4:	81a3      	strh	r3, [r4, #12]
 8060bb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8060bba:	e03e      	b.n	8060c3a <__swsetup_r+0xba>
 8060bbc:	4b25      	ldr	r3, [pc, #148]	; (8060c54 <__swsetup_r+0xd4>)
 8060bbe:	429c      	cmp	r4, r3
 8060bc0:	d101      	bne.n	8060bc6 <__swsetup_r+0x46>
 8060bc2:	68ac      	ldr	r4, [r5, #8]
 8060bc4:	e7eb      	b.n	8060b9e <__swsetup_r+0x1e>
 8060bc6:	4b24      	ldr	r3, [pc, #144]	; (8060c58 <__swsetup_r+0xd8>)
 8060bc8:	429c      	cmp	r4, r3
 8060bca:	bf08      	it	eq
 8060bcc:	68ec      	ldreq	r4, [r5, #12]
 8060bce:	e7e6      	b.n	8060b9e <__swsetup_r+0x1e>
 8060bd0:	0758      	lsls	r0, r3, #29
 8060bd2:	d512      	bpl.n	8060bfa <__swsetup_r+0x7a>
 8060bd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8060bd6:	b141      	cbz	r1, 8060bea <__swsetup_r+0x6a>
 8060bd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8060bdc:	4299      	cmp	r1, r3
 8060bde:	d002      	beq.n	8060be6 <__swsetup_r+0x66>
 8060be0:	4630      	mov	r0, r6
 8060be2:	f001 fc6b 	bl	80624bc <_free_r>
 8060be6:	2300      	movs	r3, #0
 8060be8:	6363      	str	r3, [r4, #52]	; 0x34
 8060bea:	89a3      	ldrh	r3, [r4, #12]
 8060bec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8060bf0:	81a3      	strh	r3, [r4, #12]
 8060bf2:	2300      	movs	r3, #0
 8060bf4:	6063      	str	r3, [r4, #4]
 8060bf6:	6923      	ldr	r3, [r4, #16]
 8060bf8:	6023      	str	r3, [r4, #0]
 8060bfa:	89a3      	ldrh	r3, [r4, #12]
 8060bfc:	f043 0308 	orr.w	r3, r3, #8
 8060c00:	81a3      	strh	r3, [r4, #12]
 8060c02:	6923      	ldr	r3, [r4, #16]
 8060c04:	b94b      	cbnz	r3, 8060c1a <__swsetup_r+0x9a>
 8060c06:	89a3      	ldrh	r3, [r4, #12]
 8060c08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8060c0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8060c10:	d003      	beq.n	8060c1a <__swsetup_r+0x9a>
 8060c12:	4621      	mov	r1, r4
 8060c14:	4630      	mov	r0, r6
 8060c16:	f001 f87f 	bl	8061d18 <__smakebuf_r>
 8060c1a:	89a0      	ldrh	r0, [r4, #12]
 8060c1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8060c20:	f010 0301 	ands.w	r3, r0, #1
 8060c24:	d00a      	beq.n	8060c3c <__swsetup_r+0xbc>
 8060c26:	2300      	movs	r3, #0
 8060c28:	60a3      	str	r3, [r4, #8]
 8060c2a:	6963      	ldr	r3, [r4, #20]
 8060c2c:	425b      	negs	r3, r3
 8060c2e:	61a3      	str	r3, [r4, #24]
 8060c30:	6923      	ldr	r3, [r4, #16]
 8060c32:	b943      	cbnz	r3, 8060c46 <__swsetup_r+0xc6>
 8060c34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8060c38:	d1ba      	bne.n	8060bb0 <__swsetup_r+0x30>
 8060c3a:	bd70      	pop	{r4, r5, r6, pc}
 8060c3c:	0781      	lsls	r1, r0, #30
 8060c3e:	bf58      	it	pl
 8060c40:	6963      	ldrpl	r3, [r4, #20]
 8060c42:	60a3      	str	r3, [r4, #8]
 8060c44:	e7f4      	b.n	8060c30 <__swsetup_r+0xb0>
 8060c46:	2000      	movs	r0, #0
 8060c48:	e7f7      	b.n	8060c3a <__swsetup_r+0xba>
 8060c4a:	bf00      	nop
 8060c4c:	20007cc0 	.word	0x20007cc0
 8060c50:	0807d3a0 	.word	0x0807d3a0
 8060c54:	0807d3c0 	.word	0x0807d3c0
 8060c58:	0807d380 	.word	0x0807d380

08060c5c <quorem>:
 8060c5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8060c60:	6903      	ldr	r3, [r0, #16]
 8060c62:	690c      	ldr	r4, [r1, #16]
 8060c64:	42a3      	cmp	r3, r4
 8060c66:	4607      	mov	r7, r0
 8060c68:	f2c0 8081 	blt.w	8060d6e <quorem+0x112>
 8060c6c:	3c01      	subs	r4, #1
 8060c6e:	f101 0814 	add.w	r8, r1, #20
 8060c72:	f100 0514 	add.w	r5, r0, #20
 8060c76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8060c7a:	9301      	str	r3, [sp, #4]
 8060c7c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8060c80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8060c84:	3301      	adds	r3, #1
 8060c86:	429a      	cmp	r2, r3
 8060c88:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8060c8c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8060c90:	fbb2 f6f3 	udiv	r6, r2, r3
 8060c94:	d331      	bcc.n	8060cfa <quorem+0x9e>
 8060c96:	f04f 0e00 	mov.w	lr, #0
 8060c9a:	4640      	mov	r0, r8
 8060c9c:	46ac      	mov	ip, r5
 8060c9e:	46f2      	mov	sl, lr
 8060ca0:	f850 2b04 	ldr.w	r2, [r0], #4
 8060ca4:	b293      	uxth	r3, r2
 8060ca6:	fb06 e303 	mla	r3, r6, r3, lr
 8060caa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8060cae:	b29b      	uxth	r3, r3
 8060cb0:	ebaa 0303 	sub.w	r3, sl, r3
 8060cb4:	0c12      	lsrs	r2, r2, #16
 8060cb6:	f8dc a000 	ldr.w	sl, [ip]
 8060cba:	fb06 e202 	mla	r2, r6, r2, lr
 8060cbe:	fa13 f38a 	uxtah	r3, r3, sl
 8060cc2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8060cc6:	fa1f fa82 	uxth.w	sl, r2
 8060cca:	f8dc 2000 	ldr.w	r2, [ip]
 8060cce:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8060cd2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8060cd6:	b29b      	uxth	r3, r3
 8060cd8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8060cdc:	4581      	cmp	r9, r0
 8060cde:	f84c 3b04 	str.w	r3, [ip], #4
 8060ce2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8060ce6:	d2db      	bcs.n	8060ca0 <quorem+0x44>
 8060ce8:	f855 300b 	ldr.w	r3, [r5, fp]
 8060cec:	b92b      	cbnz	r3, 8060cfa <quorem+0x9e>
 8060cee:	9b01      	ldr	r3, [sp, #4]
 8060cf0:	3b04      	subs	r3, #4
 8060cf2:	429d      	cmp	r5, r3
 8060cf4:	461a      	mov	r2, r3
 8060cf6:	d32e      	bcc.n	8060d56 <quorem+0xfa>
 8060cf8:	613c      	str	r4, [r7, #16]
 8060cfa:	4638      	mov	r0, r7
 8060cfc:	f001 fade 	bl	80622bc <__mcmp>
 8060d00:	2800      	cmp	r0, #0
 8060d02:	db24      	blt.n	8060d4e <quorem+0xf2>
 8060d04:	3601      	adds	r6, #1
 8060d06:	4628      	mov	r0, r5
 8060d08:	f04f 0c00 	mov.w	ip, #0
 8060d0c:	f858 2b04 	ldr.w	r2, [r8], #4
 8060d10:	f8d0 e000 	ldr.w	lr, [r0]
 8060d14:	b293      	uxth	r3, r2
 8060d16:	ebac 0303 	sub.w	r3, ip, r3
 8060d1a:	0c12      	lsrs	r2, r2, #16
 8060d1c:	fa13 f38e 	uxtah	r3, r3, lr
 8060d20:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8060d24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8060d28:	b29b      	uxth	r3, r3
 8060d2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8060d2e:	45c1      	cmp	r9, r8
 8060d30:	f840 3b04 	str.w	r3, [r0], #4
 8060d34:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8060d38:	d2e8      	bcs.n	8060d0c <quorem+0xb0>
 8060d3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8060d3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8060d42:	b922      	cbnz	r2, 8060d4e <quorem+0xf2>
 8060d44:	3b04      	subs	r3, #4
 8060d46:	429d      	cmp	r5, r3
 8060d48:	461a      	mov	r2, r3
 8060d4a:	d30a      	bcc.n	8060d62 <quorem+0x106>
 8060d4c:	613c      	str	r4, [r7, #16]
 8060d4e:	4630      	mov	r0, r6
 8060d50:	b003      	add	sp, #12
 8060d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8060d56:	6812      	ldr	r2, [r2, #0]
 8060d58:	3b04      	subs	r3, #4
 8060d5a:	2a00      	cmp	r2, #0
 8060d5c:	d1cc      	bne.n	8060cf8 <quorem+0x9c>
 8060d5e:	3c01      	subs	r4, #1
 8060d60:	e7c7      	b.n	8060cf2 <quorem+0x96>
 8060d62:	6812      	ldr	r2, [r2, #0]
 8060d64:	3b04      	subs	r3, #4
 8060d66:	2a00      	cmp	r2, #0
 8060d68:	d1f0      	bne.n	8060d4c <quorem+0xf0>
 8060d6a:	3c01      	subs	r4, #1
 8060d6c:	e7eb      	b.n	8060d46 <quorem+0xea>
 8060d6e:	2000      	movs	r0, #0
 8060d70:	e7ee      	b.n	8060d50 <quorem+0xf4>
 8060d72:	0000      	movs	r0, r0
 8060d74:	0000      	movs	r0, r0
	...

08060d78 <_dtoa_r>:
 8060d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8060d7c:	ed2d 8b02 	vpush	{d8}
 8060d80:	ec57 6b10 	vmov	r6, r7, d0
 8060d84:	b095      	sub	sp, #84	; 0x54
 8060d86:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8060d88:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8060d8c:	9105      	str	r1, [sp, #20]
 8060d8e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8060d92:	4604      	mov	r4, r0
 8060d94:	9209      	str	r2, [sp, #36]	; 0x24
 8060d96:	930f      	str	r3, [sp, #60]	; 0x3c
 8060d98:	b975      	cbnz	r5, 8060db8 <_dtoa_r+0x40>
 8060d9a:	2010      	movs	r0, #16
 8060d9c:	f000 fffc 	bl	8061d98 <malloc>
 8060da0:	4602      	mov	r2, r0
 8060da2:	6260      	str	r0, [r4, #36]	; 0x24
 8060da4:	b920      	cbnz	r0, 8060db0 <_dtoa_r+0x38>
 8060da6:	4bb2      	ldr	r3, [pc, #712]	; (8061070 <_dtoa_r+0x2f8>)
 8060da8:	21ea      	movs	r1, #234	; 0xea
 8060daa:	48b2      	ldr	r0, [pc, #712]	; (8061074 <_dtoa_r+0x2fc>)
 8060dac:	f001 fdce 	bl	806294c <__assert_func>
 8060db0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8060db4:	6005      	str	r5, [r0, #0]
 8060db6:	60c5      	str	r5, [r0, #12]
 8060db8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8060dba:	6819      	ldr	r1, [r3, #0]
 8060dbc:	b151      	cbz	r1, 8060dd4 <_dtoa_r+0x5c>
 8060dbe:	685a      	ldr	r2, [r3, #4]
 8060dc0:	604a      	str	r2, [r1, #4]
 8060dc2:	2301      	movs	r3, #1
 8060dc4:	4093      	lsls	r3, r2
 8060dc6:	608b      	str	r3, [r1, #8]
 8060dc8:	4620      	mov	r0, r4
 8060dca:	f001 f839 	bl	8061e40 <_Bfree>
 8060dce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8060dd0:	2200      	movs	r2, #0
 8060dd2:	601a      	str	r2, [r3, #0]
 8060dd4:	1e3b      	subs	r3, r7, #0
 8060dd6:	bfb9      	ittee	lt
 8060dd8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8060ddc:	9303      	strlt	r3, [sp, #12]
 8060dde:	2300      	movge	r3, #0
 8060de0:	f8c8 3000 	strge.w	r3, [r8]
 8060de4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8060de8:	4ba3      	ldr	r3, [pc, #652]	; (8061078 <_dtoa_r+0x300>)
 8060dea:	bfbc      	itt	lt
 8060dec:	2201      	movlt	r2, #1
 8060dee:	f8c8 2000 	strlt.w	r2, [r8]
 8060df2:	ea33 0309 	bics.w	r3, r3, r9
 8060df6:	d11b      	bne.n	8060e30 <_dtoa_r+0xb8>
 8060df8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8060dfa:	f242 730f 	movw	r3, #9999	; 0x270f
 8060dfe:	6013      	str	r3, [r2, #0]
 8060e00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8060e04:	4333      	orrs	r3, r6
 8060e06:	f000 857a 	beq.w	80618fe <_dtoa_r+0xb86>
 8060e0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8060e0c:	b963      	cbnz	r3, 8060e28 <_dtoa_r+0xb0>
 8060e0e:	4b9b      	ldr	r3, [pc, #620]	; (806107c <_dtoa_r+0x304>)
 8060e10:	e024      	b.n	8060e5c <_dtoa_r+0xe4>
 8060e12:	4b9b      	ldr	r3, [pc, #620]	; (8061080 <_dtoa_r+0x308>)
 8060e14:	9300      	str	r3, [sp, #0]
 8060e16:	3308      	adds	r3, #8
 8060e18:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8060e1a:	6013      	str	r3, [r2, #0]
 8060e1c:	9800      	ldr	r0, [sp, #0]
 8060e1e:	b015      	add	sp, #84	; 0x54
 8060e20:	ecbd 8b02 	vpop	{d8}
 8060e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8060e28:	4b94      	ldr	r3, [pc, #592]	; (806107c <_dtoa_r+0x304>)
 8060e2a:	9300      	str	r3, [sp, #0]
 8060e2c:	3303      	adds	r3, #3
 8060e2e:	e7f3      	b.n	8060e18 <_dtoa_r+0xa0>
 8060e30:	ed9d 7b02 	vldr	d7, [sp, #8]
 8060e34:	2200      	movs	r2, #0
 8060e36:	ec51 0b17 	vmov	r0, r1, d7
 8060e3a:	2300      	movs	r3, #0
 8060e3c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8060e40:	f7df fe42 	bl	8040ac8 <__aeabi_dcmpeq>
 8060e44:	4680      	mov	r8, r0
 8060e46:	b158      	cbz	r0, 8060e60 <_dtoa_r+0xe8>
 8060e48:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8060e4a:	2301      	movs	r3, #1
 8060e4c:	6013      	str	r3, [r2, #0]
 8060e4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8060e50:	2b00      	cmp	r3, #0
 8060e52:	f000 8551 	beq.w	80618f8 <_dtoa_r+0xb80>
 8060e56:	488b      	ldr	r0, [pc, #556]	; (8061084 <_dtoa_r+0x30c>)
 8060e58:	6018      	str	r0, [r3, #0]
 8060e5a:	1e43      	subs	r3, r0, #1
 8060e5c:	9300      	str	r3, [sp, #0]
 8060e5e:	e7dd      	b.n	8060e1c <_dtoa_r+0xa4>
 8060e60:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8060e64:	aa12      	add	r2, sp, #72	; 0x48
 8060e66:	a913      	add	r1, sp, #76	; 0x4c
 8060e68:	4620      	mov	r0, r4
 8060e6a:	f001 facb 	bl	8062404 <__d2b>
 8060e6e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8060e72:	4683      	mov	fp, r0
 8060e74:	2d00      	cmp	r5, #0
 8060e76:	d07c      	beq.n	8060f72 <_dtoa_r+0x1fa>
 8060e78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8060e7a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8060e7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8060e82:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8060e86:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8060e8a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8060e8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8060e92:	4b7d      	ldr	r3, [pc, #500]	; (8061088 <_dtoa_r+0x310>)
 8060e94:	2200      	movs	r2, #0
 8060e96:	4630      	mov	r0, r6
 8060e98:	4639      	mov	r1, r7
 8060e9a:	f7df f9f5 	bl	8040288 <__aeabi_dsub>
 8060e9e:	a36e      	add	r3, pc, #440	; (adr r3, 8061058 <_dtoa_r+0x2e0>)
 8060ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8060ea4:	f7df fba8 	bl	80405f8 <__aeabi_dmul>
 8060ea8:	a36d      	add	r3, pc, #436	; (adr r3, 8061060 <_dtoa_r+0x2e8>)
 8060eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8060eae:	f7df f9ed 	bl	804028c <__adddf3>
 8060eb2:	4606      	mov	r6, r0
 8060eb4:	4628      	mov	r0, r5
 8060eb6:	460f      	mov	r7, r1
 8060eb8:	f7df fb34 	bl	8040524 <__aeabi_i2d>
 8060ebc:	a36a      	add	r3, pc, #424	; (adr r3, 8061068 <_dtoa_r+0x2f0>)
 8060ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8060ec2:	f7df fb99 	bl	80405f8 <__aeabi_dmul>
 8060ec6:	4602      	mov	r2, r0
 8060ec8:	460b      	mov	r3, r1
 8060eca:	4630      	mov	r0, r6
 8060ecc:	4639      	mov	r1, r7
 8060ece:	f7df f9dd 	bl	804028c <__adddf3>
 8060ed2:	4606      	mov	r6, r0
 8060ed4:	460f      	mov	r7, r1
 8060ed6:	f7df fe3f 	bl	8040b58 <__aeabi_d2iz>
 8060eda:	2200      	movs	r2, #0
 8060edc:	4682      	mov	sl, r0
 8060ede:	2300      	movs	r3, #0
 8060ee0:	4630      	mov	r0, r6
 8060ee2:	4639      	mov	r1, r7
 8060ee4:	f7df fdfa 	bl	8040adc <__aeabi_dcmplt>
 8060ee8:	b148      	cbz	r0, 8060efe <_dtoa_r+0x186>
 8060eea:	4650      	mov	r0, sl
 8060eec:	f7df fb1a 	bl	8040524 <__aeabi_i2d>
 8060ef0:	4632      	mov	r2, r6
 8060ef2:	463b      	mov	r3, r7
 8060ef4:	f7df fde8 	bl	8040ac8 <__aeabi_dcmpeq>
 8060ef8:	b908      	cbnz	r0, 8060efe <_dtoa_r+0x186>
 8060efa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8060efe:	f1ba 0f16 	cmp.w	sl, #22
 8060f02:	d854      	bhi.n	8060fae <_dtoa_r+0x236>
 8060f04:	4b61      	ldr	r3, [pc, #388]	; (806108c <_dtoa_r+0x314>)
 8060f06:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8060f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8060f0e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8060f12:	f7df fde3 	bl	8040adc <__aeabi_dcmplt>
 8060f16:	2800      	cmp	r0, #0
 8060f18:	d04b      	beq.n	8060fb2 <_dtoa_r+0x23a>
 8060f1a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8060f1e:	2300      	movs	r3, #0
 8060f20:	930e      	str	r3, [sp, #56]	; 0x38
 8060f22:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8060f24:	1b5d      	subs	r5, r3, r5
 8060f26:	1e6b      	subs	r3, r5, #1
 8060f28:	9304      	str	r3, [sp, #16]
 8060f2a:	bf43      	ittte	mi
 8060f2c:	2300      	movmi	r3, #0
 8060f2e:	f1c5 0801 	rsbmi	r8, r5, #1
 8060f32:	9304      	strmi	r3, [sp, #16]
 8060f34:	f04f 0800 	movpl.w	r8, #0
 8060f38:	f1ba 0f00 	cmp.w	sl, #0
 8060f3c:	db3b      	blt.n	8060fb6 <_dtoa_r+0x23e>
 8060f3e:	9b04      	ldr	r3, [sp, #16]
 8060f40:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8060f44:	4453      	add	r3, sl
 8060f46:	9304      	str	r3, [sp, #16]
 8060f48:	2300      	movs	r3, #0
 8060f4a:	9306      	str	r3, [sp, #24]
 8060f4c:	9b05      	ldr	r3, [sp, #20]
 8060f4e:	2b09      	cmp	r3, #9
 8060f50:	d869      	bhi.n	8061026 <_dtoa_r+0x2ae>
 8060f52:	2b05      	cmp	r3, #5
 8060f54:	bfc4      	itt	gt
 8060f56:	3b04      	subgt	r3, #4
 8060f58:	9305      	strgt	r3, [sp, #20]
 8060f5a:	9b05      	ldr	r3, [sp, #20]
 8060f5c:	f1a3 0302 	sub.w	r3, r3, #2
 8060f60:	bfcc      	ite	gt
 8060f62:	2500      	movgt	r5, #0
 8060f64:	2501      	movle	r5, #1
 8060f66:	2b03      	cmp	r3, #3
 8060f68:	d869      	bhi.n	806103e <_dtoa_r+0x2c6>
 8060f6a:	e8df f003 	tbb	[pc, r3]
 8060f6e:	4e2c      	.short	0x4e2c
 8060f70:	5a4c      	.short	0x5a4c
 8060f72:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8060f76:	441d      	add	r5, r3
 8060f78:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8060f7c:	2b20      	cmp	r3, #32
 8060f7e:	bfc1      	itttt	gt
 8060f80:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8060f84:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8060f88:	fa09 f303 	lslgt.w	r3, r9, r3
 8060f8c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8060f90:	bfda      	itte	le
 8060f92:	f1c3 0320 	rsble	r3, r3, #32
 8060f96:	fa06 f003 	lslle.w	r0, r6, r3
 8060f9a:	4318      	orrgt	r0, r3
 8060f9c:	f7df fab2 	bl	8040504 <__aeabi_ui2d>
 8060fa0:	2301      	movs	r3, #1
 8060fa2:	4606      	mov	r6, r0
 8060fa4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8060fa8:	3d01      	subs	r5, #1
 8060faa:	9310      	str	r3, [sp, #64]	; 0x40
 8060fac:	e771      	b.n	8060e92 <_dtoa_r+0x11a>
 8060fae:	2301      	movs	r3, #1
 8060fb0:	e7b6      	b.n	8060f20 <_dtoa_r+0x1a8>
 8060fb2:	900e      	str	r0, [sp, #56]	; 0x38
 8060fb4:	e7b5      	b.n	8060f22 <_dtoa_r+0x1aa>
 8060fb6:	f1ca 0300 	rsb	r3, sl, #0
 8060fba:	9306      	str	r3, [sp, #24]
 8060fbc:	2300      	movs	r3, #0
 8060fbe:	eba8 080a 	sub.w	r8, r8, sl
 8060fc2:	930d      	str	r3, [sp, #52]	; 0x34
 8060fc4:	e7c2      	b.n	8060f4c <_dtoa_r+0x1d4>
 8060fc6:	2300      	movs	r3, #0
 8060fc8:	9308      	str	r3, [sp, #32]
 8060fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8060fcc:	2b00      	cmp	r3, #0
 8060fce:	dc39      	bgt.n	8061044 <_dtoa_r+0x2cc>
 8060fd0:	f04f 0901 	mov.w	r9, #1
 8060fd4:	f8cd 9004 	str.w	r9, [sp, #4]
 8060fd8:	464b      	mov	r3, r9
 8060fda:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8060fde:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8060fe0:	2200      	movs	r2, #0
 8060fe2:	6042      	str	r2, [r0, #4]
 8060fe4:	2204      	movs	r2, #4
 8060fe6:	f102 0614 	add.w	r6, r2, #20
 8060fea:	429e      	cmp	r6, r3
 8060fec:	6841      	ldr	r1, [r0, #4]
 8060fee:	d92f      	bls.n	8061050 <_dtoa_r+0x2d8>
 8060ff0:	4620      	mov	r0, r4
 8060ff2:	f000 fee5 	bl	8061dc0 <_Balloc>
 8060ff6:	9000      	str	r0, [sp, #0]
 8060ff8:	2800      	cmp	r0, #0
 8060ffa:	d14b      	bne.n	8061094 <_dtoa_r+0x31c>
 8060ffc:	4b24      	ldr	r3, [pc, #144]	; (8061090 <_dtoa_r+0x318>)
 8060ffe:	4602      	mov	r2, r0
 8061000:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8061004:	e6d1      	b.n	8060daa <_dtoa_r+0x32>
 8061006:	2301      	movs	r3, #1
 8061008:	e7de      	b.n	8060fc8 <_dtoa_r+0x250>
 806100a:	2300      	movs	r3, #0
 806100c:	9308      	str	r3, [sp, #32]
 806100e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8061010:	eb0a 0903 	add.w	r9, sl, r3
 8061014:	f109 0301 	add.w	r3, r9, #1
 8061018:	2b01      	cmp	r3, #1
 806101a:	9301      	str	r3, [sp, #4]
 806101c:	bfb8      	it	lt
 806101e:	2301      	movlt	r3, #1
 8061020:	e7dd      	b.n	8060fde <_dtoa_r+0x266>
 8061022:	2301      	movs	r3, #1
 8061024:	e7f2      	b.n	806100c <_dtoa_r+0x294>
 8061026:	2501      	movs	r5, #1
 8061028:	2300      	movs	r3, #0
 806102a:	9305      	str	r3, [sp, #20]
 806102c:	9508      	str	r5, [sp, #32]
 806102e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8061032:	2200      	movs	r2, #0
 8061034:	f8cd 9004 	str.w	r9, [sp, #4]
 8061038:	2312      	movs	r3, #18
 806103a:	9209      	str	r2, [sp, #36]	; 0x24
 806103c:	e7cf      	b.n	8060fde <_dtoa_r+0x266>
 806103e:	2301      	movs	r3, #1
 8061040:	9308      	str	r3, [sp, #32]
 8061042:	e7f4      	b.n	806102e <_dtoa_r+0x2b6>
 8061044:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8061048:	f8cd 9004 	str.w	r9, [sp, #4]
 806104c:	464b      	mov	r3, r9
 806104e:	e7c6      	b.n	8060fde <_dtoa_r+0x266>
 8061050:	3101      	adds	r1, #1
 8061052:	6041      	str	r1, [r0, #4]
 8061054:	0052      	lsls	r2, r2, #1
 8061056:	e7c6      	b.n	8060fe6 <_dtoa_r+0x26e>
 8061058:	636f4361 	.word	0x636f4361
 806105c:	3fd287a7 	.word	0x3fd287a7
 8061060:	8b60c8b3 	.word	0x8b60c8b3
 8061064:	3fc68a28 	.word	0x3fc68a28
 8061068:	509f79fb 	.word	0x509f79fb
 806106c:	3fd34413 	.word	0x3fd34413
 8061070:	0807d2f9 	.word	0x0807d2f9
 8061074:	0807d310 	.word	0x0807d310
 8061078:	7ff00000 	.word	0x7ff00000
 806107c:	0807d2f5 	.word	0x0807d2f5
 8061080:	0807d2ec 	.word	0x0807d2ec
 8061084:	0807d2c9 	.word	0x0807d2c9
 8061088:	3ff80000 	.word	0x3ff80000
 806108c:	0807d468 	.word	0x0807d468
 8061090:	0807d36f 	.word	0x0807d36f
 8061094:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8061096:	9a00      	ldr	r2, [sp, #0]
 8061098:	601a      	str	r2, [r3, #0]
 806109a:	9b01      	ldr	r3, [sp, #4]
 806109c:	2b0e      	cmp	r3, #14
 806109e:	f200 80ad 	bhi.w	80611fc <_dtoa_r+0x484>
 80610a2:	2d00      	cmp	r5, #0
 80610a4:	f000 80aa 	beq.w	80611fc <_dtoa_r+0x484>
 80610a8:	f1ba 0f00 	cmp.w	sl, #0
 80610ac:	dd36      	ble.n	806111c <_dtoa_r+0x3a4>
 80610ae:	4ac3      	ldr	r2, [pc, #780]	; (80613bc <_dtoa_r+0x644>)
 80610b0:	f00a 030f 	and.w	r3, sl, #15
 80610b4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80610b8:	ed93 7b00 	vldr	d7, [r3]
 80610bc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80610c0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80610c4:	eeb0 8a47 	vmov.f32	s16, s14
 80610c8:	eef0 8a67 	vmov.f32	s17, s15
 80610cc:	d016      	beq.n	80610fc <_dtoa_r+0x384>
 80610ce:	4bbc      	ldr	r3, [pc, #752]	; (80613c0 <_dtoa_r+0x648>)
 80610d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80610d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80610d8:	f7df fbb8 	bl	804084c <__aeabi_ddiv>
 80610dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80610e0:	f007 070f 	and.w	r7, r7, #15
 80610e4:	2503      	movs	r5, #3
 80610e6:	4eb6      	ldr	r6, [pc, #728]	; (80613c0 <_dtoa_r+0x648>)
 80610e8:	b957      	cbnz	r7, 8061100 <_dtoa_r+0x388>
 80610ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80610ee:	ec53 2b18 	vmov	r2, r3, d8
 80610f2:	f7df fbab 	bl	804084c <__aeabi_ddiv>
 80610f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80610fa:	e029      	b.n	8061150 <_dtoa_r+0x3d8>
 80610fc:	2502      	movs	r5, #2
 80610fe:	e7f2      	b.n	80610e6 <_dtoa_r+0x36e>
 8061100:	07f9      	lsls	r1, r7, #31
 8061102:	d508      	bpl.n	8061116 <_dtoa_r+0x39e>
 8061104:	ec51 0b18 	vmov	r0, r1, d8
 8061108:	e9d6 2300 	ldrd	r2, r3, [r6]
 806110c:	f7df fa74 	bl	80405f8 <__aeabi_dmul>
 8061110:	ec41 0b18 	vmov	d8, r0, r1
 8061114:	3501      	adds	r5, #1
 8061116:	107f      	asrs	r7, r7, #1
 8061118:	3608      	adds	r6, #8
 806111a:	e7e5      	b.n	80610e8 <_dtoa_r+0x370>
 806111c:	f000 80a6 	beq.w	806126c <_dtoa_r+0x4f4>
 8061120:	f1ca 0600 	rsb	r6, sl, #0
 8061124:	4ba5      	ldr	r3, [pc, #660]	; (80613bc <_dtoa_r+0x644>)
 8061126:	4fa6      	ldr	r7, [pc, #664]	; (80613c0 <_dtoa_r+0x648>)
 8061128:	f006 020f 	and.w	r2, r6, #15
 806112c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8061130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8061134:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8061138:	f7df fa5e 	bl	80405f8 <__aeabi_dmul>
 806113c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8061140:	1136      	asrs	r6, r6, #4
 8061142:	2300      	movs	r3, #0
 8061144:	2502      	movs	r5, #2
 8061146:	2e00      	cmp	r6, #0
 8061148:	f040 8085 	bne.w	8061256 <_dtoa_r+0x4de>
 806114c:	2b00      	cmp	r3, #0
 806114e:	d1d2      	bne.n	80610f6 <_dtoa_r+0x37e>
 8061150:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8061152:	2b00      	cmp	r3, #0
 8061154:	f000 808c 	beq.w	8061270 <_dtoa_r+0x4f8>
 8061158:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 806115c:	4b99      	ldr	r3, [pc, #612]	; (80613c4 <_dtoa_r+0x64c>)
 806115e:	2200      	movs	r2, #0
 8061160:	4630      	mov	r0, r6
 8061162:	4639      	mov	r1, r7
 8061164:	f7df fcba 	bl	8040adc <__aeabi_dcmplt>
 8061168:	2800      	cmp	r0, #0
 806116a:	f000 8081 	beq.w	8061270 <_dtoa_r+0x4f8>
 806116e:	9b01      	ldr	r3, [sp, #4]
 8061170:	2b00      	cmp	r3, #0
 8061172:	d07d      	beq.n	8061270 <_dtoa_r+0x4f8>
 8061174:	f1b9 0f00 	cmp.w	r9, #0
 8061178:	dd3c      	ble.n	80611f4 <_dtoa_r+0x47c>
 806117a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 806117e:	9307      	str	r3, [sp, #28]
 8061180:	2200      	movs	r2, #0
 8061182:	4b91      	ldr	r3, [pc, #580]	; (80613c8 <_dtoa_r+0x650>)
 8061184:	4630      	mov	r0, r6
 8061186:	4639      	mov	r1, r7
 8061188:	f7df fa36 	bl	80405f8 <__aeabi_dmul>
 806118c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8061190:	3501      	adds	r5, #1
 8061192:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8061196:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 806119a:	4628      	mov	r0, r5
 806119c:	f7df f9c2 	bl	8040524 <__aeabi_i2d>
 80611a0:	4632      	mov	r2, r6
 80611a2:	463b      	mov	r3, r7
 80611a4:	f7df fa28 	bl	80405f8 <__aeabi_dmul>
 80611a8:	4b88      	ldr	r3, [pc, #544]	; (80613cc <_dtoa_r+0x654>)
 80611aa:	2200      	movs	r2, #0
 80611ac:	f7df f86e 	bl	804028c <__adddf3>
 80611b0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80611b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80611b8:	9303      	str	r3, [sp, #12]
 80611ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80611bc:	2b00      	cmp	r3, #0
 80611be:	d15c      	bne.n	806127a <_dtoa_r+0x502>
 80611c0:	4b83      	ldr	r3, [pc, #524]	; (80613d0 <_dtoa_r+0x658>)
 80611c2:	2200      	movs	r2, #0
 80611c4:	4630      	mov	r0, r6
 80611c6:	4639      	mov	r1, r7
 80611c8:	f7df f85e 	bl	8040288 <__aeabi_dsub>
 80611cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80611d0:	4606      	mov	r6, r0
 80611d2:	460f      	mov	r7, r1
 80611d4:	f7df fca0 	bl	8040b18 <__aeabi_dcmpgt>
 80611d8:	2800      	cmp	r0, #0
 80611da:	f040 8296 	bne.w	806170a <_dtoa_r+0x992>
 80611de:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80611e2:	4630      	mov	r0, r6
 80611e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80611e8:	4639      	mov	r1, r7
 80611ea:	f7df fc77 	bl	8040adc <__aeabi_dcmplt>
 80611ee:	2800      	cmp	r0, #0
 80611f0:	f040 8288 	bne.w	8061704 <_dtoa_r+0x98c>
 80611f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80611f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80611fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80611fe:	2b00      	cmp	r3, #0
 8061200:	f2c0 8158 	blt.w	80614b4 <_dtoa_r+0x73c>
 8061204:	f1ba 0f0e 	cmp.w	sl, #14
 8061208:	f300 8154 	bgt.w	80614b4 <_dtoa_r+0x73c>
 806120c:	4b6b      	ldr	r3, [pc, #428]	; (80613bc <_dtoa_r+0x644>)
 806120e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8061212:	e9d3 8900 	ldrd	r8, r9, [r3]
 8061216:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8061218:	2b00      	cmp	r3, #0
 806121a:	f280 80e3 	bge.w	80613e4 <_dtoa_r+0x66c>
 806121e:	9b01      	ldr	r3, [sp, #4]
 8061220:	2b00      	cmp	r3, #0
 8061222:	f300 80df 	bgt.w	80613e4 <_dtoa_r+0x66c>
 8061226:	f040 826d 	bne.w	8061704 <_dtoa_r+0x98c>
 806122a:	4b69      	ldr	r3, [pc, #420]	; (80613d0 <_dtoa_r+0x658>)
 806122c:	2200      	movs	r2, #0
 806122e:	4640      	mov	r0, r8
 8061230:	4649      	mov	r1, r9
 8061232:	f7df f9e1 	bl	80405f8 <__aeabi_dmul>
 8061236:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 806123a:	f7df fc63 	bl	8040b04 <__aeabi_dcmpge>
 806123e:	9e01      	ldr	r6, [sp, #4]
 8061240:	4637      	mov	r7, r6
 8061242:	2800      	cmp	r0, #0
 8061244:	f040 8243 	bne.w	80616ce <_dtoa_r+0x956>
 8061248:	9d00      	ldr	r5, [sp, #0]
 806124a:	2331      	movs	r3, #49	; 0x31
 806124c:	f805 3b01 	strb.w	r3, [r5], #1
 8061250:	f10a 0a01 	add.w	sl, sl, #1
 8061254:	e23f      	b.n	80616d6 <_dtoa_r+0x95e>
 8061256:	07f2      	lsls	r2, r6, #31
 8061258:	d505      	bpl.n	8061266 <_dtoa_r+0x4ee>
 806125a:	e9d7 2300 	ldrd	r2, r3, [r7]
 806125e:	f7df f9cb 	bl	80405f8 <__aeabi_dmul>
 8061262:	3501      	adds	r5, #1
 8061264:	2301      	movs	r3, #1
 8061266:	1076      	asrs	r6, r6, #1
 8061268:	3708      	adds	r7, #8
 806126a:	e76c      	b.n	8061146 <_dtoa_r+0x3ce>
 806126c:	2502      	movs	r5, #2
 806126e:	e76f      	b.n	8061150 <_dtoa_r+0x3d8>
 8061270:	9b01      	ldr	r3, [sp, #4]
 8061272:	f8cd a01c 	str.w	sl, [sp, #28]
 8061276:	930c      	str	r3, [sp, #48]	; 0x30
 8061278:	e78d      	b.n	8061196 <_dtoa_r+0x41e>
 806127a:	9900      	ldr	r1, [sp, #0]
 806127c:	980c      	ldr	r0, [sp, #48]	; 0x30
 806127e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8061280:	4b4e      	ldr	r3, [pc, #312]	; (80613bc <_dtoa_r+0x644>)
 8061282:	ed9d 7b02 	vldr	d7, [sp, #8]
 8061286:	4401      	add	r1, r0
 8061288:	9102      	str	r1, [sp, #8]
 806128a:	9908      	ldr	r1, [sp, #32]
 806128c:	eeb0 8a47 	vmov.f32	s16, s14
 8061290:	eef0 8a67 	vmov.f32	s17, s15
 8061294:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8061298:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 806129c:	2900      	cmp	r1, #0
 806129e:	d045      	beq.n	806132c <_dtoa_r+0x5b4>
 80612a0:	494c      	ldr	r1, [pc, #304]	; (80613d4 <_dtoa_r+0x65c>)
 80612a2:	2000      	movs	r0, #0
 80612a4:	f7df fad2 	bl	804084c <__aeabi_ddiv>
 80612a8:	ec53 2b18 	vmov	r2, r3, d8
 80612ac:	f7de ffec 	bl	8040288 <__aeabi_dsub>
 80612b0:	9d00      	ldr	r5, [sp, #0]
 80612b2:	ec41 0b18 	vmov	d8, r0, r1
 80612b6:	4639      	mov	r1, r7
 80612b8:	4630      	mov	r0, r6
 80612ba:	f7df fc4d 	bl	8040b58 <__aeabi_d2iz>
 80612be:	900c      	str	r0, [sp, #48]	; 0x30
 80612c0:	f7df f930 	bl	8040524 <__aeabi_i2d>
 80612c4:	4602      	mov	r2, r0
 80612c6:	460b      	mov	r3, r1
 80612c8:	4630      	mov	r0, r6
 80612ca:	4639      	mov	r1, r7
 80612cc:	f7de ffdc 	bl	8040288 <__aeabi_dsub>
 80612d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80612d2:	3330      	adds	r3, #48	; 0x30
 80612d4:	f805 3b01 	strb.w	r3, [r5], #1
 80612d8:	ec53 2b18 	vmov	r2, r3, d8
 80612dc:	4606      	mov	r6, r0
 80612de:	460f      	mov	r7, r1
 80612e0:	f7df fbfc 	bl	8040adc <__aeabi_dcmplt>
 80612e4:	2800      	cmp	r0, #0
 80612e6:	d165      	bne.n	80613b4 <_dtoa_r+0x63c>
 80612e8:	4632      	mov	r2, r6
 80612ea:	463b      	mov	r3, r7
 80612ec:	4935      	ldr	r1, [pc, #212]	; (80613c4 <_dtoa_r+0x64c>)
 80612ee:	2000      	movs	r0, #0
 80612f0:	f7de ffca 	bl	8040288 <__aeabi_dsub>
 80612f4:	ec53 2b18 	vmov	r2, r3, d8
 80612f8:	f7df fbf0 	bl	8040adc <__aeabi_dcmplt>
 80612fc:	2800      	cmp	r0, #0
 80612fe:	f040 80b9 	bne.w	8061474 <_dtoa_r+0x6fc>
 8061302:	9b02      	ldr	r3, [sp, #8]
 8061304:	429d      	cmp	r5, r3
 8061306:	f43f af75 	beq.w	80611f4 <_dtoa_r+0x47c>
 806130a:	4b2f      	ldr	r3, [pc, #188]	; (80613c8 <_dtoa_r+0x650>)
 806130c:	ec51 0b18 	vmov	r0, r1, d8
 8061310:	2200      	movs	r2, #0
 8061312:	f7df f971 	bl	80405f8 <__aeabi_dmul>
 8061316:	4b2c      	ldr	r3, [pc, #176]	; (80613c8 <_dtoa_r+0x650>)
 8061318:	ec41 0b18 	vmov	d8, r0, r1
 806131c:	2200      	movs	r2, #0
 806131e:	4630      	mov	r0, r6
 8061320:	4639      	mov	r1, r7
 8061322:	f7df f969 	bl	80405f8 <__aeabi_dmul>
 8061326:	4606      	mov	r6, r0
 8061328:	460f      	mov	r7, r1
 806132a:	e7c4      	b.n	80612b6 <_dtoa_r+0x53e>
 806132c:	ec51 0b17 	vmov	r0, r1, d7
 8061330:	f7df f962 	bl	80405f8 <__aeabi_dmul>
 8061334:	9b02      	ldr	r3, [sp, #8]
 8061336:	9d00      	ldr	r5, [sp, #0]
 8061338:	930c      	str	r3, [sp, #48]	; 0x30
 806133a:	ec41 0b18 	vmov	d8, r0, r1
 806133e:	4639      	mov	r1, r7
 8061340:	4630      	mov	r0, r6
 8061342:	f7df fc09 	bl	8040b58 <__aeabi_d2iz>
 8061346:	9011      	str	r0, [sp, #68]	; 0x44
 8061348:	f7df f8ec 	bl	8040524 <__aeabi_i2d>
 806134c:	4602      	mov	r2, r0
 806134e:	460b      	mov	r3, r1
 8061350:	4630      	mov	r0, r6
 8061352:	4639      	mov	r1, r7
 8061354:	f7de ff98 	bl	8040288 <__aeabi_dsub>
 8061358:	9b11      	ldr	r3, [sp, #68]	; 0x44
 806135a:	3330      	adds	r3, #48	; 0x30
 806135c:	f805 3b01 	strb.w	r3, [r5], #1
 8061360:	9b02      	ldr	r3, [sp, #8]
 8061362:	429d      	cmp	r5, r3
 8061364:	4606      	mov	r6, r0
 8061366:	460f      	mov	r7, r1
 8061368:	f04f 0200 	mov.w	r2, #0
 806136c:	d134      	bne.n	80613d8 <_dtoa_r+0x660>
 806136e:	4b19      	ldr	r3, [pc, #100]	; (80613d4 <_dtoa_r+0x65c>)
 8061370:	ec51 0b18 	vmov	r0, r1, d8
 8061374:	f7de ff8a 	bl	804028c <__adddf3>
 8061378:	4602      	mov	r2, r0
 806137a:	460b      	mov	r3, r1
 806137c:	4630      	mov	r0, r6
 806137e:	4639      	mov	r1, r7
 8061380:	f7df fbca 	bl	8040b18 <__aeabi_dcmpgt>
 8061384:	2800      	cmp	r0, #0
 8061386:	d175      	bne.n	8061474 <_dtoa_r+0x6fc>
 8061388:	ec53 2b18 	vmov	r2, r3, d8
 806138c:	4911      	ldr	r1, [pc, #68]	; (80613d4 <_dtoa_r+0x65c>)
 806138e:	2000      	movs	r0, #0
 8061390:	f7de ff7a 	bl	8040288 <__aeabi_dsub>
 8061394:	4602      	mov	r2, r0
 8061396:	460b      	mov	r3, r1
 8061398:	4630      	mov	r0, r6
 806139a:	4639      	mov	r1, r7
 806139c:	f7df fb9e 	bl	8040adc <__aeabi_dcmplt>
 80613a0:	2800      	cmp	r0, #0
 80613a2:	f43f af27 	beq.w	80611f4 <_dtoa_r+0x47c>
 80613a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80613a8:	1e6b      	subs	r3, r5, #1
 80613aa:	930c      	str	r3, [sp, #48]	; 0x30
 80613ac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80613b0:	2b30      	cmp	r3, #48	; 0x30
 80613b2:	d0f8      	beq.n	80613a6 <_dtoa_r+0x62e>
 80613b4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80613b8:	e04a      	b.n	8061450 <_dtoa_r+0x6d8>
 80613ba:	bf00      	nop
 80613bc:	0807d468 	.word	0x0807d468
 80613c0:	0807d440 	.word	0x0807d440
 80613c4:	3ff00000 	.word	0x3ff00000
 80613c8:	40240000 	.word	0x40240000
 80613cc:	401c0000 	.word	0x401c0000
 80613d0:	40140000 	.word	0x40140000
 80613d4:	3fe00000 	.word	0x3fe00000
 80613d8:	4baf      	ldr	r3, [pc, #700]	; (8061698 <_dtoa_r+0x920>)
 80613da:	f7df f90d 	bl	80405f8 <__aeabi_dmul>
 80613de:	4606      	mov	r6, r0
 80613e0:	460f      	mov	r7, r1
 80613e2:	e7ac      	b.n	806133e <_dtoa_r+0x5c6>
 80613e4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80613e8:	9d00      	ldr	r5, [sp, #0]
 80613ea:	4642      	mov	r2, r8
 80613ec:	464b      	mov	r3, r9
 80613ee:	4630      	mov	r0, r6
 80613f0:	4639      	mov	r1, r7
 80613f2:	f7df fa2b 	bl	804084c <__aeabi_ddiv>
 80613f6:	f7df fbaf 	bl	8040b58 <__aeabi_d2iz>
 80613fa:	9002      	str	r0, [sp, #8]
 80613fc:	f7df f892 	bl	8040524 <__aeabi_i2d>
 8061400:	4642      	mov	r2, r8
 8061402:	464b      	mov	r3, r9
 8061404:	f7df f8f8 	bl	80405f8 <__aeabi_dmul>
 8061408:	4602      	mov	r2, r0
 806140a:	460b      	mov	r3, r1
 806140c:	4630      	mov	r0, r6
 806140e:	4639      	mov	r1, r7
 8061410:	f7de ff3a 	bl	8040288 <__aeabi_dsub>
 8061414:	9e02      	ldr	r6, [sp, #8]
 8061416:	9f01      	ldr	r7, [sp, #4]
 8061418:	3630      	adds	r6, #48	; 0x30
 806141a:	f805 6b01 	strb.w	r6, [r5], #1
 806141e:	9e00      	ldr	r6, [sp, #0]
 8061420:	1bae      	subs	r6, r5, r6
 8061422:	42b7      	cmp	r7, r6
 8061424:	4602      	mov	r2, r0
 8061426:	460b      	mov	r3, r1
 8061428:	d137      	bne.n	806149a <_dtoa_r+0x722>
 806142a:	f7de ff2f 	bl	804028c <__adddf3>
 806142e:	4642      	mov	r2, r8
 8061430:	464b      	mov	r3, r9
 8061432:	4606      	mov	r6, r0
 8061434:	460f      	mov	r7, r1
 8061436:	f7df fb6f 	bl	8040b18 <__aeabi_dcmpgt>
 806143a:	b9c8      	cbnz	r0, 8061470 <_dtoa_r+0x6f8>
 806143c:	4642      	mov	r2, r8
 806143e:	464b      	mov	r3, r9
 8061440:	4630      	mov	r0, r6
 8061442:	4639      	mov	r1, r7
 8061444:	f7df fb40 	bl	8040ac8 <__aeabi_dcmpeq>
 8061448:	b110      	cbz	r0, 8061450 <_dtoa_r+0x6d8>
 806144a:	9b02      	ldr	r3, [sp, #8]
 806144c:	07d9      	lsls	r1, r3, #31
 806144e:	d40f      	bmi.n	8061470 <_dtoa_r+0x6f8>
 8061450:	4620      	mov	r0, r4
 8061452:	4659      	mov	r1, fp
 8061454:	f000 fcf4 	bl	8061e40 <_Bfree>
 8061458:	2300      	movs	r3, #0
 806145a:	702b      	strb	r3, [r5, #0]
 806145c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 806145e:	f10a 0001 	add.w	r0, sl, #1
 8061462:	6018      	str	r0, [r3, #0]
 8061464:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8061466:	2b00      	cmp	r3, #0
 8061468:	f43f acd8 	beq.w	8060e1c <_dtoa_r+0xa4>
 806146c:	601d      	str	r5, [r3, #0]
 806146e:	e4d5      	b.n	8060e1c <_dtoa_r+0xa4>
 8061470:	f8cd a01c 	str.w	sl, [sp, #28]
 8061474:	462b      	mov	r3, r5
 8061476:	461d      	mov	r5, r3
 8061478:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 806147c:	2a39      	cmp	r2, #57	; 0x39
 806147e:	d108      	bne.n	8061492 <_dtoa_r+0x71a>
 8061480:	9a00      	ldr	r2, [sp, #0]
 8061482:	429a      	cmp	r2, r3
 8061484:	d1f7      	bne.n	8061476 <_dtoa_r+0x6fe>
 8061486:	9a07      	ldr	r2, [sp, #28]
 8061488:	9900      	ldr	r1, [sp, #0]
 806148a:	3201      	adds	r2, #1
 806148c:	9207      	str	r2, [sp, #28]
 806148e:	2230      	movs	r2, #48	; 0x30
 8061490:	700a      	strb	r2, [r1, #0]
 8061492:	781a      	ldrb	r2, [r3, #0]
 8061494:	3201      	adds	r2, #1
 8061496:	701a      	strb	r2, [r3, #0]
 8061498:	e78c      	b.n	80613b4 <_dtoa_r+0x63c>
 806149a:	4b7f      	ldr	r3, [pc, #508]	; (8061698 <_dtoa_r+0x920>)
 806149c:	2200      	movs	r2, #0
 806149e:	f7df f8ab 	bl	80405f8 <__aeabi_dmul>
 80614a2:	2200      	movs	r2, #0
 80614a4:	2300      	movs	r3, #0
 80614a6:	4606      	mov	r6, r0
 80614a8:	460f      	mov	r7, r1
 80614aa:	f7df fb0d 	bl	8040ac8 <__aeabi_dcmpeq>
 80614ae:	2800      	cmp	r0, #0
 80614b0:	d09b      	beq.n	80613ea <_dtoa_r+0x672>
 80614b2:	e7cd      	b.n	8061450 <_dtoa_r+0x6d8>
 80614b4:	9a08      	ldr	r2, [sp, #32]
 80614b6:	2a00      	cmp	r2, #0
 80614b8:	f000 80c4 	beq.w	8061644 <_dtoa_r+0x8cc>
 80614bc:	9a05      	ldr	r2, [sp, #20]
 80614be:	2a01      	cmp	r2, #1
 80614c0:	f300 80a8 	bgt.w	8061614 <_dtoa_r+0x89c>
 80614c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80614c6:	2a00      	cmp	r2, #0
 80614c8:	f000 80a0 	beq.w	806160c <_dtoa_r+0x894>
 80614cc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80614d0:	9e06      	ldr	r6, [sp, #24]
 80614d2:	4645      	mov	r5, r8
 80614d4:	9a04      	ldr	r2, [sp, #16]
 80614d6:	2101      	movs	r1, #1
 80614d8:	441a      	add	r2, r3
 80614da:	4620      	mov	r0, r4
 80614dc:	4498      	add	r8, r3
 80614de:	9204      	str	r2, [sp, #16]
 80614e0:	f000 fd6a 	bl	8061fb8 <__i2b>
 80614e4:	4607      	mov	r7, r0
 80614e6:	2d00      	cmp	r5, #0
 80614e8:	dd0b      	ble.n	8061502 <_dtoa_r+0x78a>
 80614ea:	9b04      	ldr	r3, [sp, #16]
 80614ec:	2b00      	cmp	r3, #0
 80614ee:	dd08      	ble.n	8061502 <_dtoa_r+0x78a>
 80614f0:	42ab      	cmp	r3, r5
 80614f2:	9a04      	ldr	r2, [sp, #16]
 80614f4:	bfa8      	it	ge
 80614f6:	462b      	movge	r3, r5
 80614f8:	eba8 0803 	sub.w	r8, r8, r3
 80614fc:	1aed      	subs	r5, r5, r3
 80614fe:	1ad3      	subs	r3, r2, r3
 8061500:	9304      	str	r3, [sp, #16]
 8061502:	9b06      	ldr	r3, [sp, #24]
 8061504:	b1fb      	cbz	r3, 8061546 <_dtoa_r+0x7ce>
 8061506:	9b08      	ldr	r3, [sp, #32]
 8061508:	2b00      	cmp	r3, #0
 806150a:	f000 809f 	beq.w	806164c <_dtoa_r+0x8d4>
 806150e:	2e00      	cmp	r6, #0
 8061510:	dd11      	ble.n	8061536 <_dtoa_r+0x7be>
 8061512:	4639      	mov	r1, r7
 8061514:	4632      	mov	r2, r6
 8061516:	4620      	mov	r0, r4
 8061518:	f000 fe0a 	bl	8062130 <__pow5mult>
 806151c:	465a      	mov	r2, fp
 806151e:	4601      	mov	r1, r0
 8061520:	4607      	mov	r7, r0
 8061522:	4620      	mov	r0, r4
 8061524:	f000 fd5e 	bl	8061fe4 <__multiply>
 8061528:	4659      	mov	r1, fp
 806152a:	9007      	str	r0, [sp, #28]
 806152c:	4620      	mov	r0, r4
 806152e:	f000 fc87 	bl	8061e40 <_Bfree>
 8061532:	9b07      	ldr	r3, [sp, #28]
 8061534:	469b      	mov	fp, r3
 8061536:	9b06      	ldr	r3, [sp, #24]
 8061538:	1b9a      	subs	r2, r3, r6
 806153a:	d004      	beq.n	8061546 <_dtoa_r+0x7ce>
 806153c:	4659      	mov	r1, fp
 806153e:	4620      	mov	r0, r4
 8061540:	f000 fdf6 	bl	8062130 <__pow5mult>
 8061544:	4683      	mov	fp, r0
 8061546:	2101      	movs	r1, #1
 8061548:	4620      	mov	r0, r4
 806154a:	f000 fd35 	bl	8061fb8 <__i2b>
 806154e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8061550:	2b00      	cmp	r3, #0
 8061552:	4606      	mov	r6, r0
 8061554:	dd7c      	ble.n	8061650 <_dtoa_r+0x8d8>
 8061556:	461a      	mov	r2, r3
 8061558:	4601      	mov	r1, r0
 806155a:	4620      	mov	r0, r4
 806155c:	f000 fde8 	bl	8062130 <__pow5mult>
 8061560:	9b05      	ldr	r3, [sp, #20]
 8061562:	2b01      	cmp	r3, #1
 8061564:	4606      	mov	r6, r0
 8061566:	dd76      	ble.n	8061656 <_dtoa_r+0x8de>
 8061568:	2300      	movs	r3, #0
 806156a:	9306      	str	r3, [sp, #24]
 806156c:	6933      	ldr	r3, [r6, #16]
 806156e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8061572:	6918      	ldr	r0, [r3, #16]
 8061574:	f000 fcd0 	bl	8061f18 <__hi0bits>
 8061578:	f1c0 0020 	rsb	r0, r0, #32
 806157c:	9b04      	ldr	r3, [sp, #16]
 806157e:	4418      	add	r0, r3
 8061580:	f010 001f 	ands.w	r0, r0, #31
 8061584:	f000 8086 	beq.w	8061694 <_dtoa_r+0x91c>
 8061588:	f1c0 0320 	rsb	r3, r0, #32
 806158c:	2b04      	cmp	r3, #4
 806158e:	dd7f      	ble.n	8061690 <_dtoa_r+0x918>
 8061590:	f1c0 001c 	rsb	r0, r0, #28
 8061594:	9b04      	ldr	r3, [sp, #16]
 8061596:	4403      	add	r3, r0
 8061598:	4480      	add	r8, r0
 806159a:	4405      	add	r5, r0
 806159c:	9304      	str	r3, [sp, #16]
 806159e:	f1b8 0f00 	cmp.w	r8, #0
 80615a2:	dd05      	ble.n	80615b0 <_dtoa_r+0x838>
 80615a4:	4659      	mov	r1, fp
 80615a6:	4642      	mov	r2, r8
 80615a8:	4620      	mov	r0, r4
 80615aa:	f000 fe1b 	bl	80621e4 <__lshift>
 80615ae:	4683      	mov	fp, r0
 80615b0:	9b04      	ldr	r3, [sp, #16]
 80615b2:	2b00      	cmp	r3, #0
 80615b4:	dd05      	ble.n	80615c2 <_dtoa_r+0x84a>
 80615b6:	4631      	mov	r1, r6
 80615b8:	461a      	mov	r2, r3
 80615ba:	4620      	mov	r0, r4
 80615bc:	f000 fe12 	bl	80621e4 <__lshift>
 80615c0:	4606      	mov	r6, r0
 80615c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80615c4:	2b00      	cmp	r3, #0
 80615c6:	d069      	beq.n	806169c <_dtoa_r+0x924>
 80615c8:	4631      	mov	r1, r6
 80615ca:	4658      	mov	r0, fp
 80615cc:	f000 fe76 	bl	80622bc <__mcmp>
 80615d0:	2800      	cmp	r0, #0
 80615d2:	da63      	bge.n	806169c <_dtoa_r+0x924>
 80615d4:	2300      	movs	r3, #0
 80615d6:	4659      	mov	r1, fp
 80615d8:	220a      	movs	r2, #10
 80615da:	4620      	mov	r0, r4
 80615dc:	f000 fc52 	bl	8061e84 <__multadd>
 80615e0:	9b08      	ldr	r3, [sp, #32]
 80615e2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80615e6:	4683      	mov	fp, r0
 80615e8:	2b00      	cmp	r3, #0
 80615ea:	f000 818f 	beq.w	806190c <_dtoa_r+0xb94>
 80615ee:	4639      	mov	r1, r7
 80615f0:	2300      	movs	r3, #0
 80615f2:	220a      	movs	r2, #10
 80615f4:	4620      	mov	r0, r4
 80615f6:	f000 fc45 	bl	8061e84 <__multadd>
 80615fa:	f1b9 0f00 	cmp.w	r9, #0
 80615fe:	4607      	mov	r7, r0
 8061600:	f300 808e 	bgt.w	8061720 <_dtoa_r+0x9a8>
 8061604:	9b05      	ldr	r3, [sp, #20]
 8061606:	2b02      	cmp	r3, #2
 8061608:	dc50      	bgt.n	80616ac <_dtoa_r+0x934>
 806160a:	e089      	b.n	8061720 <_dtoa_r+0x9a8>
 806160c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 806160e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8061612:	e75d      	b.n	80614d0 <_dtoa_r+0x758>
 8061614:	9b01      	ldr	r3, [sp, #4]
 8061616:	1e5e      	subs	r6, r3, #1
 8061618:	9b06      	ldr	r3, [sp, #24]
 806161a:	42b3      	cmp	r3, r6
 806161c:	bfbf      	itttt	lt
 806161e:	9b06      	ldrlt	r3, [sp, #24]
 8061620:	9606      	strlt	r6, [sp, #24]
 8061622:	1af2      	sublt	r2, r6, r3
 8061624:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8061626:	bfb6      	itet	lt
 8061628:	189b      	addlt	r3, r3, r2
 806162a:	1b9e      	subge	r6, r3, r6
 806162c:	930d      	strlt	r3, [sp, #52]	; 0x34
 806162e:	9b01      	ldr	r3, [sp, #4]
 8061630:	bfb8      	it	lt
 8061632:	2600      	movlt	r6, #0
 8061634:	2b00      	cmp	r3, #0
 8061636:	bfb5      	itete	lt
 8061638:	eba8 0503 	sublt.w	r5, r8, r3
 806163c:	9b01      	ldrge	r3, [sp, #4]
 806163e:	2300      	movlt	r3, #0
 8061640:	4645      	movge	r5, r8
 8061642:	e747      	b.n	80614d4 <_dtoa_r+0x75c>
 8061644:	9e06      	ldr	r6, [sp, #24]
 8061646:	9f08      	ldr	r7, [sp, #32]
 8061648:	4645      	mov	r5, r8
 806164a:	e74c      	b.n	80614e6 <_dtoa_r+0x76e>
 806164c:	9a06      	ldr	r2, [sp, #24]
 806164e:	e775      	b.n	806153c <_dtoa_r+0x7c4>
 8061650:	9b05      	ldr	r3, [sp, #20]
 8061652:	2b01      	cmp	r3, #1
 8061654:	dc18      	bgt.n	8061688 <_dtoa_r+0x910>
 8061656:	9b02      	ldr	r3, [sp, #8]
 8061658:	b9b3      	cbnz	r3, 8061688 <_dtoa_r+0x910>
 806165a:	9b03      	ldr	r3, [sp, #12]
 806165c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8061660:	b9a3      	cbnz	r3, 806168c <_dtoa_r+0x914>
 8061662:	9b03      	ldr	r3, [sp, #12]
 8061664:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8061668:	0d1b      	lsrs	r3, r3, #20
 806166a:	051b      	lsls	r3, r3, #20
 806166c:	b12b      	cbz	r3, 806167a <_dtoa_r+0x902>
 806166e:	9b04      	ldr	r3, [sp, #16]
 8061670:	3301      	adds	r3, #1
 8061672:	9304      	str	r3, [sp, #16]
 8061674:	f108 0801 	add.w	r8, r8, #1
 8061678:	2301      	movs	r3, #1
 806167a:	9306      	str	r3, [sp, #24]
 806167c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 806167e:	2b00      	cmp	r3, #0
 8061680:	f47f af74 	bne.w	806156c <_dtoa_r+0x7f4>
 8061684:	2001      	movs	r0, #1
 8061686:	e779      	b.n	806157c <_dtoa_r+0x804>
 8061688:	2300      	movs	r3, #0
 806168a:	e7f6      	b.n	806167a <_dtoa_r+0x902>
 806168c:	9b02      	ldr	r3, [sp, #8]
 806168e:	e7f4      	b.n	806167a <_dtoa_r+0x902>
 8061690:	d085      	beq.n	806159e <_dtoa_r+0x826>
 8061692:	4618      	mov	r0, r3
 8061694:	301c      	adds	r0, #28
 8061696:	e77d      	b.n	8061594 <_dtoa_r+0x81c>
 8061698:	40240000 	.word	0x40240000
 806169c:	9b01      	ldr	r3, [sp, #4]
 806169e:	2b00      	cmp	r3, #0
 80616a0:	dc38      	bgt.n	8061714 <_dtoa_r+0x99c>
 80616a2:	9b05      	ldr	r3, [sp, #20]
 80616a4:	2b02      	cmp	r3, #2
 80616a6:	dd35      	ble.n	8061714 <_dtoa_r+0x99c>
 80616a8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80616ac:	f1b9 0f00 	cmp.w	r9, #0
 80616b0:	d10d      	bne.n	80616ce <_dtoa_r+0x956>
 80616b2:	4631      	mov	r1, r6
 80616b4:	464b      	mov	r3, r9
 80616b6:	2205      	movs	r2, #5
 80616b8:	4620      	mov	r0, r4
 80616ba:	f000 fbe3 	bl	8061e84 <__multadd>
 80616be:	4601      	mov	r1, r0
 80616c0:	4606      	mov	r6, r0
 80616c2:	4658      	mov	r0, fp
 80616c4:	f000 fdfa 	bl	80622bc <__mcmp>
 80616c8:	2800      	cmp	r0, #0
 80616ca:	f73f adbd 	bgt.w	8061248 <_dtoa_r+0x4d0>
 80616ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80616d0:	9d00      	ldr	r5, [sp, #0]
 80616d2:	ea6f 0a03 	mvn.w	sl, r3
 80616d6:	f04f 0800 	mov.w	r8, #0
 80616da:	4631      	mov	r1, r6
 80616dc:	4620      	mov	r0, r4
 80616de:	f000 fbaf 	bl	8061e40 <_Bfree>
 80616e2:	2f00      	cmp	r7, #0
 80616e4:	f43f aeb4 	beq.w	8061450 <_dtoa_r+0x6d8>
 80616e8:	f1b8 0f00 	cmp.w	r8, #0
 80616ec:	d005      	beq.n	80616fa <_dtoa_r+0x982>
 80616ee:	45b8      	cmp	r8, r7
 80616f0:	d003      	beq.n	80616fa <_dtoa_r+0x982>
 80616f2:	4641      	mov	r1, r8
 80616f4:	4620      	mov	r0, r4
 80616f6:	f000 fba3 	bl	8061e40 <_Bfree>
 80616fa:	4639      	mov	r1, r7
 80616fc:	4620      	mov	r0, r4
 80616fe:	f000 fb9f 	bl	8061e40 <_Bfree>
 8061702:	e6a5      	b.n	8061450 <_dtoa_r+0x6d8>
 8061704:	2600      	movs	r6, #0
 8061706:	4637      	mov	r7, r6
 8061708:	e7e1      	b.n	80616ce <_dtoa_r+0x956>
 806170a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 806170c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8061710:	4637      	mov	r7, r6
 8061712:	e599      	b.n	8061248 <_dtoa_r+0x4d0>
 8061714:	9b08      	ldr	r3, [sp, #32]
 8061716:	f8dd 9004 	ldr.w	r9, [sp, #4]
 806171a:	2b00      	cmp	r3, #0
 806171c:	f000 80fd 	beq.w	806191a <_dtoa_r+0xba2>
 8061720:	2d00      	cmp	r5, #0
 8061722:	dd05      	ble.n	8061730 <_dtoa_r+0x9b8>
 8061724:	4639      	mov	r1, r7
 8061726:	462a      	mov	r2, r5
 8061728:	4620      	mov	r0, r4
 806172a:	f000 fd5b 	bl	80621e4 <__lshift>
 806172e:	4607      	mov	r7, r0
 8061730:	9b06      	ldr	r3, [sp, #24]
 8061732:	2b00      	cmp	r3, #0
 8061734:	d05c      	beq.n	80617f0 <_dtoa_r+0xa78>
 8061736:	6879      	ldr	r1, [r7, #4]
 8061738:	4620      	mov	r0, r4
 806173a:	f000 fb41 	bl	8061dc0 <_Balloc>
 806173e:	4605      	mov	r5, r0
 8061740:	b928      	cbnz	r0, 806174e <_dtoa_r+0x9d6>
 8061742:	4b80      	ldr	r3, [pc, #512]	; (8061944 <_dtoa_r+0xbcc>)
 8061744:	4602      	mov	r2, r0
 8061746:	f240 21ea 	movw	r1, #746	; 0x2ea
 806174a:	f7ff bb2e 	b.w	8060daa <_dtoa_r+0x32>
 806174e:	693a      	ldr	r2, [r7, #16]
 8061750:	3202      	adds	r2, #2
 8061752:	0092      	lsls	r2, r2, #2
 8061754:	f107 010c 	add.w	r1, r7, #12
 8061758:	300c      	adds	r0, #12
 806175a:	f7fe fc21 	bl	805ffa0 <memcpy>
 806175e:	2201      	movs	r2, #1
 8061760:	4629      	mov	r1, r5
 8061762:	4620      	mov	r0, r4
 8061764:	f000 fd3e 	bl	80621e4 <__lshift>
 8061768:	9b00      	ldr	r3, [sp, #0]
 806176a:	3301      	adds	r3, #1
 806176c:	9301      	str	r3, [sp, #4]
 806176e:	9b00      	ldr	r3, [sp, #0]
 8061770:	444b      	add	r3, r9
 8061772:	9307      	str	r3, [sp, #28]
 8061774:	9b02      	ldr	r3, [sp, #8]
 8061776:	f003 0301 	and.w	r3, r3, #1
 806177a:	46b8      	mov	r8, r7
 806177c:	9306      	str	r3, [sp, #24]
 806177e:	4607      	mov	r7, r0
 8061780:	9b01      	ldr	r3, [sp, #4]
 8061782:	4631      	mov	r1, r6
 8061784:	3b01      	subs	r3, #1
 8061786:	4658      	mov	r0, fp
 8061788:	9302      	str	r3, [sp, #8]
 806178a:	f7ff fa67 	bl	8060c5c <quorem>
 806178e:	4603      	mov	r3, r0
 8061790:	3330      	adds	r3, #48	; 0x30
 8061792:	9004      	str	r0, [sp, #16]
 8061794:	4641      	mov	r1, r8
 8061796:	4658      	mov	r0, fp
 8061798:	9308      	str	r3, [sp, #32]
 806179a:	f000 fd8f 	bl	80622bc <__mcmp>
 806179e:	463a      	mov	r2, r7
 80617a0:	4681      	mov	r9, r0
 80617a2:	4631      	mov	r1, r6
 80617a4:	4620      	mov	r0, r4
 80617a6:	f000 fda5 	bl	80622f4 <__mdiff>
 80617aa:	68c2      	ldr	r2, [r0, #12]
 80617ac:	9b08      	ldr	r3, [sp, #32]
 80617ae:	4605      	mov	r5, r0
 80617b0:	bb02      	cbnz	r2, 80617f4 <_dtoa_r+0xa7c>
 80617b2:	4601      	mov	r1, r0
 80617b4:	4658      	mov	r0, fp
 80617b6:	f000 fd81 	bl	80622bc <__mcmp>
 80617ba:	9b08      	ldr	r3, [sp, #32]
 80617bc:	4602      	mov	r2, r0
 80617be:	4629      	mov	r1, r5
 80617c0:	4620      	mov	r0, r4
 80617c2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80617c6:	f000 fb3b 	bl	8061e40 <_Bfree>
 80617ca:	9b05      	ldr	r3, [sp, #20]
 80617cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80617ce:	9d01      	ldr	r5, [sp, #4]
 80617d0:	ea43 0102 	orr.w	r1, r3, r2
 80617d4:	9b06      	ldr	r3, [sp, #24]
 80617d6:	430b      	orrs	r3, r1
 80617d8:	9b08      	ldr	r3, [sp, #32]
 80617da:	d10d      	bne.n	80617f8 <_dtoa_r+0xa80>
 80617dc:	2b39      	cmp	r3, #57	; 0x39
 80617de:	d029      	beq.n	8061834 <_dtoa_r+0xabc>
 80617e0:	f1b9 0f00 	cmp.w	r9, #0
 80617e4:	dd01      	ble.n	80617ea <_dtoa_r+0xa72>
 80617e6:	9b04      	ldr	r3, [sp, #16]
 80617e8:	3331      	adds	r3, #49	; 0x31
 80617ea:	9a02      	ldr	r2, [sp, #8]
 80617ec:	7013      	strb	r3, [r2, #0]
 80617ee:	e774      	b.n	80616da <_dtoa_r+0x962>
 80617f0:	4638      	mov	r0, r7
 80617f2:	e7b9      	b.n	8061768 <_dtoa_r+0x9f0>
 80617f4:	2201      	movs	r2, #1
 80617f6:	e7e2      	b.n	80617be <_dtoa_r+0xa46>
 80617f8:	f1b9 0f00 	cmp.w	r9, #0
 80617fc:	db06      	blt.n	806180c <_dtoa_r+0xa94>
 80617fe:	9905      	ldr	r1, [sp, #20]
 8061800:	ea41 0909 	orr.w	r9, r1, r9
 8061804:	9906      	ldr	r1, [sp, #24]
 8061806:	ea59 0101 	orrs.w	r1, r9, r1
 806180a:	d120      	bne.n	806184e <_dtoa_r+0xad6>
 806180c:	2a00      	cmp	r2, #0
 806180e:	ddec      	ble.n	80617ea <_dtoa_r+0xa72>
 8061810:	4659      	mov	r1, fp
 8061812:	2201      	movs	r2, #1
 8061814:	4620      	mov	r0, r4
 8061816:	9301      	str	r3, [sp, #4]
 8061818:	f000 fce4 	bl	80621e4 <__lshift>
 806181c:	4631      	mov	r1, r6
 806181e:	4683      	mov	fp, r0
 8061820:	f000 fd4c 	bl	80622bc <__mcmp>
 8061824:	2800      	cmp	r0, #0
 8061826:	9b01      	ldr	r3, [sp, #4]
 8061828:	dc02      	bgt.n	8061830 <_dtoa_r+0xab8>
 806182a:	d1de      	bne.n	80617ea <_dtoa_r+0xa72>
 806182c:	07da      	lsls	r2, r3, #31
 806182e:	d5dc      	bpl.n	80617ea <_dtoa_r+0xa72>
 8061830:	2b39      	cmp	r3, #57	; 0x39
 8061832:	d1d8      	bne.n	80617e6 <_dtoa_r+0xa6e>
 8061834:	9a02      	ldr	r2, [sp, #8]
 8061836:	2339      	movs	r3, #57	; 0x39
 8061838:	7013      	strb	r3, [r2, #0]
 806183a:	462b      	mov	r3, r5
 806183c:	461d      	mov	r5, r3
 806183e:	3b01      	subs	r3, #1
 8061840:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8061844:	2a39      	cmp	r2, #57	; 0x39
 8061846:	d050      	beq.n	80618ea <_dtoa_r+0xb72>
 8061848:	3201      	adds	r2, #1
 806184a:	701a      	strb	r2, [r3, #0]
 806184c:	e745      	b.n	80616da <_dtoa_r+0x962>
 806184e:	2a00      	cmp	r2, #0
 8061850:	dd03      	ble.n	806185a <_dtoa_r+0xae2>
 8061852:	2b39      	cmp	r3, #57	; 0x39
 8061854:	d0ee      	beq.n	8061834 <_dtoa_r+0xabc>
 8061856:	3301      	adds	r3, #1
 8061858:	e7c7      	b.n	80617ea <_dtoa_r+0xa72>
 806185a:	9a01      	ldr	r2, [sp, #4]
 806185c:	9907      	ldr	r1, [sp, #28]
 806185e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8061862:	428a      	cmp	r2, r1
 8061864:	d02a      	beq.n	80618bc <_dtoa_r+0xb44>
 8061866:	4659      	mov	r1, fp
 8061868:	2300      	movs	r3, #0
 806186a:	220a      	movs	r2, #10
 806186c:	4620      	mov	r0, r4
 806186e:	f000 fb09 	bl	8061e84 <__multadd>
 8061872:	45b8      	cmp	r8, r7
 8061874:	4683      	mov	fp, r0
 8061876:	f04f 0300 	mov.w	r3, #0
 806187a:	f04f 020a 	mov.w	r2, #10
 806187e:	4641      	mov	r1, r8
 8061880:	4620      	mov	r0, r4
 8061882:	d107      	bne.n	8061894 <_dtoa_r+0xb1c>
 8061884:	f000 fafe 	bl	8061e84 <__multadd>
 8061888:	4680      	mov	r8, r0
 806188a:	4607      	mov	r7, r0
 806188c:	9b01      	ldr	r3, [sp, #4]
 806188e:	3301      	adds	r3, #1
 8061890:	9301      	str	r3, [sp, #4]
 8061892:	e775      	b.n	8061780 <_dtoa_r+0xa08>
 8061894:	f000 faf6 	bl	8061e84 <__multadd>
 8061898:	4639      	mov	r1, r7
 806189a:	4680      	mov	r8, r0
 806189c:	2300      	movs	r3, #0
 806189e:	220a      	movs	r2, #10
 80618a0:	4620      	mov	r0, r4
 80618a2:	f000 faef 	bl	8061e84 <__multadd>
 80618a6:	4607      	mov	r7, r0
 80618a8:	e7f0      	b.n	806188c <_dtoa_r+0xb14>
 80618aa:	f1b9 0f00 	cmp.w	r9, #0
 80618ae:	9a00      	ldr	r2, [sp, #0]
 80618b0:	bfcc      	ite	gt
 80618b2:	464d      	movgt	r5, r9
 80618b4:	2501      	movle	r5, #1
 80618b6:	4415      	add	r5, r2
 80618b8:	f04f 0800 	mov.w	r8, #0
 80618bc:	4659      	mov	r1, fp
 80618be:	2201      	movs	r2, #1
 80618c0:	4620      	mov	r0, r4
 80618c2:	9301      	str	r3, [sp, #4]
 80618c4:	f000 fc8e 	bl	80621e4 <__lshift>
 80618c8:	4631      	mov	r1, r6
 80618ca:	4683      	mov	fp, r0
 80618cc:	f000 fcf6 	bl	80622bc <__mcmp>
 80618d0:	2800      	cmp	r0, #0
 80618d2:	dcb2      	bgt.n	806183a <_dtoa_r+0xac2>
 80618d4:	d102      	bne.n	80618dc <_dtoa_r+0xb64>
 80618d6:	9b01      	ldr	r3, [sp, #4]
 80618d8:	07db      	lsls	r3, r3, #31
 80618da:	d4ae      	bmi.n	806183a <_dtoa_r+0xac2>
 80618dc:	462b      	mov	r3, r5
 80618de:	461d      	mov	r5, r3
 80618e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80618e4:	2a30      	cmp	r2, #48	; 0x30
 80618e6:	d0fa      	beq.n	80618de <_dtoa_r+0xb66>
 80618e8:	e6f7      	b.n	80616da <_dtoa_r+0x962>
 80618ea:	9a00      	ldr	r2, [sp, #0]
 80618ec:	429a      	cmp	r2, r3
 80618ee:	d1a5      	bne.n	806183c <_dtoa_r+0xac4>
 80618f0:	f10a 0a01 	add.w	sl, sl, #1
 80618f4:	2331      	movs	r3, #49	; 0x31
 80618f6:	e779      	b.n	80617ec <_dtoa_r+0xa74>
 80618f8:	4b13      	ldr	r3, [pc, #76]	; (8061948 <_dtoa_r+0xbd0>)
 80618fa:	f7ff baaf 	b.w	8060e5c <_dtoa_r+0xe4>
 80618fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8061900:	2b00      	cmp	r3, #0
 8061902:	f47f aa86 	bne.w	8060e12 <_dtoa_r+0x9a>
 8061906:	4b11      	ldr	r3, [pc, #68]	; (806194c <_dtoa_r+0xbd4>)
 8061908:	f7ff baa8 	b.w	8060e5c <_dtoa_r+0xe4>
 806190c:	f1b9 0f00 	cmp.w	r9, #0
 8061910:	dc03      	bgt.n	806191a <_dtoa_r+0xba2>
 8061912:	9b05      	ldr	r3, [sp, #20]
 8061914:	2b02      	cmp	r3, #2
 8061916:	f73f aec9 	bgt.w	80616ac <_dtoa_r+0x934>
 806191a:	9d00      	ldr	r5, [sp, #0]
 806191c:	4631      	mov	r1, r6
 806191e:	4658      	mov	r0, fp
 8061920:	f7ff f99c 	bl	8060c5c <quorem>
 8061924:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8061928:	f805 3b01 	strb.w	r3, [r5], #1
 806192c:	9a00      	ldr	r2, [sp, #0]
 806192e:	1aaa      	subs	r2, r5, r2
 8061930:	4591      	cmp	r9, r2
 8061932:	ddba      	ble.n	80618aa <_dtoa_r+0xb32>
 8061934:	4659      	mov	r1, fp
 8061936:	2300      	movs	r3, #0
 8061938:	220a      	movs	r2, #10
 806193a:	4620      	mov	r0, r4
 806193c:	f000 faa2 	bl	8061e84 <__multadd>
 8061940:	4683      	mov	fp, r0
 8061942:	e7eb      	b.n	806191c <_dtoa_r+0xba4>
 8061944:	0807d36f 	.word	0x0807d36f
 8061948:	0807d2c8 	.word	0x0807d2c8
 806194c:	0807d2ec 	.word	0x0807d2ec

08061950 <__sflush_r>:
 8061950:	898a      	ldrh	r2, [r1, #12]
 8061952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8061956:	4605      	mov	r5, r0
 8061958:	0710      	lsls	r0, r2, #28
 806195a:	460c      	mov	r4, r1
 806195c:	d458      	bmi.n	8061a10 <__sflush_r+0xc0>
 806195e:	684b      	ldr	r3, [r1, #4]
 8061960:	2b00      	cmp	r3, #0
 8061962:	dc05      	bgt.n	8061970 <__sflush_r+0x20>
 8061964:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8061966:	2b00      	cmp	r3, #0
 8061968:	dc02      	bgt.n	8061970 <__sflush_r+0x20>
 806196a:	2000      	movs	r0, #0
 806196c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8061970:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8061972:	2e00      	cmp	r6, #0
 8061974:	d0f9      	beq.n	806196a <__sflush_r+0x1a>
 8061976:	2300      	movs	r3, #0
 8061978:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 806197c:	682f      	ldr	r7, [r5, #0]
 806197e:	602b      	str	r3, [r5, #0]
 8061980:	d032      	beq.n	80619e8 <__sflush_r+0x98>
 8061982:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8061984:	89a3      	ldrh	r3, [r4, #12]
 8061986:	075a      	lsls	r2, r3, #29
 8061988:	d505      	bpl.n	8061996 <__sflush_r+0x46>
 806198a:	6863      	ldr	r3, [r4, #4]
 806198c:	1ac0      	subs	r0, r0, r3
 806198e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8061990:	b10b      	cbz	r3, 8061996 <__sflush_r+0x46>
 8061992:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8061994:	1ac0      	subs	r0, r0, r3
 8061996:	2300      	movs	r3, #0
 8061998:	4602      	mov	r2, r0
 806199a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 806199c:	6a21      	ldr	r1, [r4, #32]
 806199e:	4628      	mov	r0, r5
 80619a0:	47b0      	blx	r6
 80619a2:	1c43      	adds	r3, r0, #1
 80619a4:	89a3      	ldrh	r3, [r4, #12]
 80619a6:	d106      	bne.n	80619b6 <__sflush_r+0x66>
 80619a8:	6829      	ldr	r1, [r5, #0]
 80619aa:	291d      	cmp	r1, #29
 80619ac:	d82c      	bhi.n	8061a08 <__sflush_r+0xb8>
 80619ae:	4a2a      	ldr	r2, [pc, #168]	; (8061a58 <__sflush_r+0x108>)
 80619b0:	40ca      	lsrs	r2, r1
 80619b2:	07d6      	lsls	r6, r2, #31
 80619b4:	d528      	bpl.n	8061a08 <__sflush_r+0xb8>
 80619b6:	2200      	movs	r2, #0
 80619b8:	6062      	str	r2, [r4, #4]
 80619ba:	04d9      	lsls	r1, r3, #19
 80619bc:	6922      	ldr	r2, [r4, #16]
 80619be:	6022      	str	r2, [r4, #0]
 80619c0:	d504      	bpl.n	80619cc <__sflush_r+0x7c>
 80619c2:	1c42      	adds	r2, r0, #1
 80619c4:	d101      	bne.n	80619ca <__sflush_r+0x7a>
 80619c6:	682b      	ldr	r3, [r5, #0]
 80619c8:	b903      	cbnz	r3, 80619cc <__sflush_r+0x7c>
 80619ca:	6560      	str	r0, [r4, #84]	; 0x54
 80619cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80619ce:	602f      	str	r7, [r5, #0]
 80619d0:	2900      	cmp	r1, #0
 80619d2:	d0ca      	beq.n	806196a <__sflush_r+0x1a>
 80619d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80619d8:	4299      	cmp	r1, r3
 80619da:	d002      	beq.n	80619e2 <__sflush_r+0x92>
 80619dc:	4628      	mov	r0, r5
 80619de:	f000 fd6d 	bl	80624bc <_free_r>
 80619e2:	2000      	movs	r0, #0
 80619e4:	6360      	str	r0, [r4, #52]	; 0x34
 80619e6:	e7c1      	b.n	806196c <__sflush_r+0x1c>
 80619e8:	6a21      	ldr	r1, [r4, #32]
 80619ea:	2301      	movs	r3, #1
 80619ec:	4628      	mov	r0, r5
 80619ee:	47b0      	blx	r6
 80619f0:	1c41      	adds	r1, r0, #1
 80619f2:	d1c7      	bne.n	8061984 <__sflush_r+0x34>
 80619f4:	682b      	ldr	r3, [r5, #0]
 80619f6:	2b00      	cmp	r3, #0
 80619f8:	d0c4      	beq.n	8061984 <__sflush_r+0x34>
 80619fa:	2b1d      	cmp	r3, #29
 80619fc:	d001      	beq.n	8061a02 <__sflush_r+0xb2>
 80619fe:	2b16      	cmp	r3, #22
 8061a00:	d101      	bne.n	8061a06 <__sflush_r+0xb6>
 8061a02:	602f      	str	r7, [r5, #0]
 8061a04:	e7b1      	b.n	806196a <__sflush_r+0x1a>
 8061a06:	89a3      	ldrh	r3, [r4, #12]
 8061a08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8061a0c:	81a3      	strh	r3, [r4, #12]
 8061a0e:	e7ad      	b.n	806196c <__sflush_r+0x1c>
 8061a10:	690f      	ldr	r7, [r1, #16]
 8061a12:	2f00      	cmp	r7, #0
 8061a14:	d0a9      	beq.n	806196a <__sflush_r+0x1a>
 8061a16:	0793      	lsls	r3, r2, #30
 8061a18:	680e      	ldr	r6, [r1, #0]
 8061a1a:	bf08      	it	eq
 8061a1c:	694b      	ldreq	r3, [r1, #20]
 8061a1e:	600f      	str	r7, [r1, #0]
 8061a20:	bf18      	it	ne
 8061a22:	2300      	movne	r3, #0
 8061a24:	eba6 0807 	sub.w	r8, r6, r7
 8061a28:	608b      	str	r3, [r1, #8]
 8061a2a:	f1b8 0f00 	cmp.w	r8, #0
 8061a2e:	dd9c      	ble.n	806196a <__sflush_r+0x1a>
 8061a30:	6a21      	ldr	r1, [r4, #32]
 8061a32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8061a34:	4643      	mov	r3, r8
 8061a36:	463a      	mov	r2, r7
 8061a38:	4628      	mov	r0, r5
 8061a3a:	47b0      	blx	r6
 8061a3c:	2800      	cmp	r0, #0
 8061a3e:	dc06      	bgt.n	8061a4e <__sflush_r+0xfe>
 8061a40:	89a3      	ldrh	r3, [r4, #12]
 8061a42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8061a46:	81a3      	strh	r3, [r4, #12]
 8061a48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8061a4c:	e78e      	b.n	806196c <__sflush_r+0x1c>
 8061a4e:	4407      	add	r7, r0
 8061a50:	eba8 0800 	sub.w	r8, r8, r0
 8061a54:	e7e9      	b.n	8061a2a <__sflush_r+0xda>
 8061a56:	bf00      	nop
 8061a58:	20400001 	.word	0x20400001

08061a5c <_fflush_r>:
 8061a5c:	b538      	push	{r3, r4, r5, lr}
 8061a5e:	690b      	ldr	r3, [r1, #16]
 8061a60:	4605      	mov	r5, r0
 8061a62:	460c      	mov	r4, r1
 8061a64:	b913      	cbnz	r3, 8061a6c <_fflush_r+0x10>
 8061a66:	2500      	movs	r5, #0
 8061a68:	4628      	mov	r0, r5
 8061a6a:	bd38      	pop	{r3, r4, r5, pc}
 8061a6c:	b118      	cbz	r0, 8061a76 <_fflush_r+0x1a>
 8061a6e:	6983      	ldr	r3, [r0, #24]
 8061a70:	b90b      	cbnz	r3, 8061a76 <_fflush_r+0x1a>
 8061a72:	f000 f887 	bl	8061b84 <__sinit>
 8061a76:	4b14      	ldr	r3, [pc, #80]	; (8061ac8 <_fflush_r+0x6c>)
 8061a78:	429c      	cmp	r4, r3
 8061a7a:	d11b      	bne.n	8061ab4 <_fflush_r+0x58>
 8061a7c:	686c      	ldr	r4, [r5, #4]
 8061a7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8061a82:	2b00      	cmp	r3, #0
 8061a84:	d0ef      	beq.n	8061a66 <_fflush_r+0xa>
 8061a86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8061a88:	07d0      	lsls	r0, r2, #31
 8061a8a:	d404      	bmi.n	8061a96 <_fflush_r+0x3a>
 8061a8c:	0599      	lsls	r1, r3, #22
 8061a8e:	d402      	bmi.n	8061a96 <_fflush_r+0x3a>
 8061a90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8061a92:	f000 f91a 	bl	8061cca <__retarget_lock_acquire_recursive>
 8061a96:	4628      	mov	r0, r5
 8061a98:	4621      	mov	r1, r4
 8061a9a:	f7ff ff59 	bl	8061950 <__sflush_r>
 8061a9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8061aa0:	07da      	lsls	r2, r3, #31
 8061aa2:	4605      	mov	r5, r0
 8061aa4:	d4e0      	bmi.n	8061a68 <_fflush_r+0xc>
 8061aa6:	89a3      	ldrh	r3, [r4, #12]
 8061aa8:	059b      	lsls	r3, r3, #22
 8061aaa:	d4dd      	bmi.n	8061a68 <_fflush_r+0xc>
 8061aac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8061aae:	f000 f90d 	bl	8061ccc <__retarget_lock_release_recursive>
 8061ab2:	e7d9      	b.n	8061a68 <_fflush_r+0xc>
 8061ab4:	4b05      	ldr	r3, [pc, #20]	; (8061acc <_fflush_r+0x70>)
 8061ab6:	429c      	cmp	r4, r3
 8061ab8:	d101      	bne.n	8061abe <_fflush_r+0x62>
 8061aba:	68ac      	ldr	r4, [r5, #8]
 8061abc:	e7df      	b.n	8061a7e <_fflush_r+0x22>
 8061abe:	4b04      	ldr	r3, [pc, #16]	; (8061ad0 <_fflush_r+0x74>)
 8061ac0:	429c      	cmp	r4, r3
 8061ac2:	bf08      	it	eq
 8061ac4:	68ec      	ldreq	r4, [r5, #12]
 8061ac6:	e7da      	b.n	8061a7e <_fflush_r+0x22>
 8061ac8:	0807d3a0 	.word	0x0807d3a0
 8061acc:	0807d3c0 	.word	0x0807d3c0
 8061ad0:	0807d380 	.word	0x0807d380

08061ad4 <std>:
 8061ad4:	2300      	movs	r3, #0
 8061ad6:	b510      	push	{r4, lr}
 8061ad8:	4604      	mov	r4, r0
 8061ada:	e9c0 3300 	strd	r3, r3, [r0]
 8061ade:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8061ae2:	6083      	str	r3, [r0, #8]
 8061ae4:	8181      	strh	r1, [r0, #12]
 8061ae6:	6643      	str	r3, [r0, #100]	; 0x64
 8061ae8:	81c2      	strh	r2, [r0, #14]
 8061aea:	6183      	str	r3, [r0, #24]
 8061aec:	4619      	mov	r1, r3
 8061aee:	2208      	movs	r2, #8
 8061af0:	305c      	adds	r0, #92	; 0x5c
 8061af2:	f7fe fa63 	bl	805ffbc <memset>
 8061af6:	4b05      	ldr	r3, [pc, #20]	; (8061b0c <std+0x38>)
 8061af8:	6263      	str	r3, [r4, #36]	; 0x24
 8061afa:	4b05      	ldr	r3, [pc, #20]	; (8061b10 <std+0x3c>)
 8061afc:	62a3      	str	r3, [r4, #40]	; 0x28
 8061afe:	4b05      	ldr	r3, [pc, #20]	; (8061b14 <std+0x40>)
 8061b00:	62e3      	str	r3, [r4, #44]	; 0x2c
 8061b02:	4b05      	ldr	r3, [pc, #20]	; (8061b18 <std+0x44>)
 8061b04:	6224      	str	r4, [r4, #32]
 8061b06:	6323      	str	r3, [r4, #48]	; 0x30
 8061b08:	bd10      	pop	{r4, pc}
 8061b0a:	bf00      	nop
 8061b0c:	080628a1 	.word	0x080628a1
 8061b10:	080628c3 	.word	0x080628c3
 8061b14:	080628fb 	.word	0x080628fb
 8061b18:	0806291f 	.word	0x0806291f

08061b1c <_cleanup_r>:
 8061b1c:	4901      	ldr	r1, [pc, #4]	; (8061b24 <_cleanup_r+0x8>)
 8061b1e:	f000 b8af 	b.w	8061c80 <_fwalk_reent>
 8061b22:	bf00      	nop
 8061b24:	08061a5d 	.word	0x08061a5d

08061b28 <__sfmoreglue>:
 8061b28:	b570      	push	{r4, r5, r6, lr}
 8061b2a:	1e4a      	subs	r2, r1, #1
 8061b2c:	2568      	movs	r5, #104	; 0x68
 8061b2e:	4355      	muls	r5, r2
 8061b30:	460e      	mov	r6, r1
 8061b32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8061b36:	f7fe fa59 	bl	805ffec <_malloc_r>
 8061b3a:	4604      	mov	r4, r0
 8061b3c:	b140      	cbz	r0, 8061b50 <__sfmoreglue+0x28>
 8061b3e:	2100      	movs	r1, #0
 8061b40:	e9c0 1600 	strd	r1, r6, [r0]
 8061b44:	300c      	adds	r0, #12
 8061b46:	60a0      	str	r0, [r4, #8]
 8061b48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8061b4c:	f7fe fa36 	bl	805ffbc <memset>
 8061b50:	4620      	mov	r0, r4
 8061b52:	bd70      	pop	{r4, r5, r6, pc}

08061b54 <__sfp_lock_acquire>:
 8061b54:	4801      	ldr	r0, [pc, #4]	; (8061b5c <__sfp_lock_acquire+0x8>)
 8061b56:	f000 b8b8 	b.w	8061cca <__retarget_lock_acquire_recursive>
 8061b5a:	bf00      	nop
 8061b5c:	2001c38c 	.word	0x2001c38c

08061b60 <__sfp_lock_release>:
 8061b60:	4801      	ldr	r0, [pc, #4]	; (8061b68 <__sfp_lock_release+0x8>)
 8061b62:	f000 b8b3 	b.w	8061ccc <__retarget_lock_release_recursive>
 8061b66:	bf00      	nop
 8061b68:	2001c38c 	.word	0x2001c38c

08061b6c <__sinit_lock_acquire>:
 8061b6c:	4801      	ldr	r0, [pc, #4]	; (8061b74 <__sinit_lock_acquire+0x8>)
 8061b6e:	f000 b8ac 	b.w	8061cca <__retarget_lock_acquire_recursive>
 8061b72:	bf00      	nop
 8061b74:	2001c387 	.word	0x2001c387

08061b78 <__sinit_lock_release>:
 8061b78:	4801      	ldr	r0, [pc, #4]	; (8061b80 <__sinit_lock_release+0x8>)
 8061b7a:	f000 b8a7 	b.w	8061ccc <__retarget_lock_release_recursive>
 8061b7e:	bf00      	nop
 8061b80:	2001c387 	.word	0x2001c387

08061b84 <__sinit>:
 8061b84:	b510      	push	{r4, lr}
 8061b86:	4604      	mov	r4, r0
 8061b88:	f7ff fff0 	bl	8061b6c <__sinit_lock_acquire>
 8061b8c:	69a3      	ldr	r3, [r4, #24]
 8061b8e:	b11b      	cbz	r3, 8061b98 <__sinit+0x14>
 8061b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8061b94:	f7ff bff0 	b.w	8061b78 <__sinit_lock_release>
 8061b98:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8061b9c:	6523      	str	r3, [r4, #80]	; 0x50
 8061b9e:	4b13      	ldr	r3, [pc, #76]	; (8061bec <__sinit+0x68>)
 8061ba0:	4a13      	ldr	r2, [pc, #76]	; (8061bf0 <__sinit+0x6c>)
 8061ba2:	681b      	ldr	r3, [r3, #0]
 8061ba4:	62a2      	str	r2, [r4, #40]	; 0x28
 8061ba6:	42a3      	cmp	r3, r4
 8061ba8:	bf04      	itt	eq
 8061baa:	2301      	moveq	r3, #1
 8061bac:	61a3      	streq	r3, [r4, #24]
 8061bae:	4620      	mov	r0, r4
 8061bb0:	f000 f820 	bl	8061bf4 <__sfp>
 8061bb4:	6060      	str	r0, [r4, #4]
 8061bb6:	4620      	mov	r0, r4
 8061bb8:	f000 f81c 	bl	8061bf4 <__sfp>
 8061bbc:	60a0      	str	r0, [r4, #8]
 8061bbe:	4620      	mov	r0, r4
 8061bc0:	f000 f818 	bl	8061bf4 <__sfp>
 8061bc4:	2200      	movs	r2, #0
 8061bc6:	60e0      	str	r0, [r4, #12]
 8061bc8:	2104      	movs	r1, #4
 8061bca:	6860      	ldr	r0, [r4, #4]
 8061bcc:	f7ff ff82 	bl	8061ad4 <std>
 8061bd0:	68a0      	ldr	r0, [r4, #8]
 8061bd2:	2201      	movs	r2, #1
 8061bd4:	2109      	movs	r1, #9
 8061bd6:	f7ff ff7d 	bl	8061ad4 <std>
 8061bda:	68e0      	ldr	r0, [r4, #12]
 8061bdc:	2202      	movs	r2, #2
 8061bde:	2112      	movs	r1, #18
 8061be0:	f7ff ff78 	bl	8061ad4 <std>
 8061be4:	2301      	movs	r3, #1
 8061be6:	61a3      	str	r3, [r4, #24]
 8061be8:	e7d2      	b.n	8061b90 <__sinit+0xc>
 8061bea:	bf00      	nop
 8061bec:	0807d2b4 	.word	0x0807d2b4
 8061bf0:	08061b1d 	.word	0x08061b1d

08061bf4 <__sfp>:
 8061bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8061bf6:	4607      	mov	r7, r0
 8061bf8:	f7ff ffac 	bl	8061b54 <__sfp_lock_acquire>
 8061bfc:	4b1e      	ldr	r3, [pc, #120]	; (8061c78 <__sfp+0x84>)
 8061bfe:	681e      	ldr	r6, [r3, #0]
 8061c00:	69b3      	ldr	r3, [r6, #24]
 8061c02:	b913      	cbnz	r3, 8061c0a <__sfp+0x16>
 8061c04:	4630      	mov	r0, r6
 8061c06:	f7ff ffbd 	bl	8061b84 <__sinit>
 8061c0a:	3648      	adds	r6, #72	; 0x48
 8061c0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8061c10:	3b01      	subs	r3, #1
 8061c12:	d503      	bpl.n	8061c1c <__sfp+0x28>
 8061c14:	6833      	ldr	r3, [r6, #0]
 8061c16:	b30b      	cbz	r3, 8061c5c <__sfp+0x68>
 8061c18:	6836      	ldr	r6, [r6, #0]
 8061c1a:	e7f7      	b.n	8061c0c <__sfp+0x18>
 8061c1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8061c20:	b9d5      	cbnz	r5, 8061c58 <__sfp+0x64>
 8061c22:	4b16      	ldr	r3, [pc, #88]	; (8061c7c <__sfp+0x88>)
 8061c24:	60e3      	str	r3, [r4, #12]
 8061c26:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8061c2a:	6665      	str	r5, [r4, #100]	; 0x64
 8061c2c:	f000 f84c 	bl	8061cc8 <__retarget_lock_init_recursive>
 8061c30:	f7ff ff96 	bl	8061b60 <__sfp_lock_release>
 8061c34:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8061c38:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8061c3c:	6025      	str	r5, [r4, #0]
 8061c3e:	61a5      	str	r5, [r4, #24]
 8061c40:	2208      	movs	r2, #8
 8061c42:	4629      	mov	r1, r5
 8061c44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8061c48:	f7fe f9b8 	bl	805ffbc <memset>
 8061c4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8061c50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8061c54:	4620      	mov	r0, r4
 8061c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8061c58:	3468      	adds	r4, #104	; 0x68
 8061c5a:	e7d9      	b.n	8061c10 <__sfp+0x1c>
 8061c5c:	2104      	movs	r1, #4
 8061c5e:	4638      	mov	r0, r7
 8061c60:	f7ff ff62 	bl	8061b28 <__sfmoreglue>
 8061c64:	4604      	mov	r4, r0
 8061c66:	6030      	str	r0, [r6, #0]
 8061c68:	2800      	cmp	r0, #0
 8061c6a:	d1d5      	bne.n	8061c18 <__sfp+0x24>
 8061c6c:	f7ff ff78 	bl	8061b60 <__sfp_lock_release>
 8061c70:	230c      	movs	r3, #12
 8061c72:	603b      	str	r3, [r7, #0]
 8061c74:	e7ee      	b.n	8061c54 <__sfp+0x60>
 8061c76:	bf00      	nop
 8061c78:	0807d2b4 	.word	0x0807d2b4
 8061c7c:	ffff0001 	.word	0xffff0001

08061c80 <_fwalk_reent>:
 8061c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8061c84:	4606      	mov	r6, r0
 8061c86:	4688      	mov	r8, r1
 8061c88:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8061c8c:	2700      	movs	r7, #0
 8061c8e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8061c92:	f1b9 0901 	subs.w	r9, r9, #1
 8061c96:	d505      	bpl.n	8061ca4 <_fwalk_reent+0x24>
 8061c98:	6824      	ldr	r4, [r4, #0]
 8061c9a:	2c00      	cmp	r4, #0
 8061c9c:	d1f7      	bne.n	8061c8e <_fwalk_reent+0xe>
 8061c9e:	4638      	mov	r0, r7
 8061ca0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8061ca4:	89ab      	ldrh	r3, [r5, #12]
 8061ca6:	2b01      	cmp	r3, #1
 8061ca8:	d907      	bls.n	8061cba <_fwalk_reent+0x3a>
 8061caa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8061cae:	3301      	adds	r3, #1
 8061cb0:	d003      	beq.n	8061cba <_fwalk_reent+0x3a>
 8061cb2:	4629      	mov	r1, r5
 8061cb4:	4630      	mov	r0, r6
 8061cb6:	47c0      	blx	r8
 8061cb8:	4307      	orrs	r7, r0
 8061cba:	3568      	adds	r5, #104	; 0x68
 8061cbc:	e7e9      	b.n	8061c92 <_fwalk_reent+0x12>
	...

08061cc0 <_localeconv_r>:
 8061cc0:	4800      	ldr	r0, [pc, #0]	; (8061cc4 <_localeconv_r+0x4>)
 8061cc2:	4770      	bx	lr
 8061cc4:	20007e14 	.word	0x20007e14

08061cc8 <__retarget_lock_init_recursive>:
 8061cc8:	4770      	bx	lr

08061cca <__retarget_lock_acquire_recursive>:
 8061cca:	4770      	bx	lr

08061ccc <__retarget_lock_release_recursive>:
 8061ccc:	4770      	bx	lr

08061cce <__swhatbuf_r>:
 8061cce:	b570      	push	{r4, r5, r6, lr}
 8061cd0:	460e      	mov	r6, r1
 8061cd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8061cd6:	2900      	cmp	r1, #0
 8061cd8:	b096      	sub	sp, #88	; 0x58
 8061cda:	4614      	mov	r4, r2
 8061cdc:	461d      	mov	r5, r3
 8061cde:	da07      	bge.n	8061cf0 <__swhatbuf_r+0x22>
 8061ce0:	2300      	movs	r3, #0
 8061ce2:	602b      	str	r3, [r5, #0]
 8061ce4:	89b3      	ldrh	r3, [r6, #12]
 8061ce6:	061a      	lsls	r2, r3, #24
 8061ce8:	d410      	bmi.n	8061d0c <__swhatbuf_r+0x3e>
 8061cea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8061cee:	e00e      	b.n	8061d0e <__swhatbuf_r+0x40>
 8061cf0:	466a      	mov	r2, sp
 8061cf2:	f000 fe6b 	bl	80629cc <_fstat_r>
 8061cf6:	2800      	cmp	r0, #0
 8061cf8:	dbf2      	blt.n	8061ce0 <__swhatbuf_r+0x12>
 8061cfa:	9a01      	ldr	r2, [sp, #4]
 8061cfc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8061d00:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8061d04:	425a      	negs	r2, r3
 8061d06:	415a      	adcs	r2, r3
 8061d08:	602a      	str	r2, [r5, #0]
 8061d0a:	e7ee      	b.n	8061cea <__swhatbuf_r+0x1c>
 8061d0c:	2340      	movs	r3, #64	; 0x40
 8061d0e:	2000      	movs	r0, #0
 8061d10:	6023      	str	r3, [r4, #0]
 8061d12:	b016      	add	sp, #88	; 0x58
 8061d14:	bd70      	pop	{r4, r5, r6, pc}
	...

08061d18 <__smakebuf_r>:
 8061d18:	898b      	ldrh	r3, [r1, #12]
 8061d1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8061d1c:	079d      	lsls	r5, r3, #30
 8061d1e:	4606      	mov	r6, r0
 8061d20:	460c      	mov	r4, r1
 8061d22:	d507      	bpl.n	8061d34 <__smakebuf_r+0x1c>
 8061d24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8061d28:	6023      	str	r3, [r4, #0]
 8061d2a:	6123      	str	r3, [r4, #16]
 8061d2c:	2301      	movs	r3, #1
 8061d2e:	6163      	str	r3, [r4, #20]
 8061d30:	b002      	add	sp, #8
 8061d32:	bd70      	pop	{r4, r5, r6, pc}
 8061d34:	ab01      	add	r3, sp, #4
 8061d36:	466a      	mov	r2, sp
 8061d38:	f7ff ffc9 	bl	8061cce <__swhatbuf_r>
 8061d3c:	9900      	ldr	r1, [sp, #0]
 8061d3e:	4605      	mov	r5, r0
 8061d40:	4630      	mov	r0, r6
 8061d42:	f7fe f953 	bl	805ffec <_malloc_r>
 8061d46:	b948      	cbnz	r0, 8061d5c <__smakebuf_r+0x44>
 8061d48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8061d4c:	059a      	lsls	r2, r3, #22
 8061d4e:	d4ef      	bmi.n	8061d30 <__smakebuf_r+0x18>
 8061d50:	f023 0303 	bic.w	r3, r3, #3
 8061d54:	f043 0302 	orr.w	r3, r3, #2
 8061d58:	81a3      	strh	r3, [r4, #12]
 8061d5a:	e7e3      	b.n	8061d24 <__smakebuf_r+0xc>
 8061d5c:	4b0d      	ldr	r3, [pc, #52]	; (8061d94 <__smakebuf_r+0x7c>)
 8061d5e:	62b3      	str	r3, [r6, #40]	; 0x28
 8061d60:	89a3      	ldrh	r3, [r4, #12]
 8061d62:	6020      	str	r0, [r4, #0]
 8061d64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8061d68:	81a3      	strh	r3, [r4, #12]
 8061d6a:	9b00      	ldr	r3, [sp, #0]
 8061d6c:	6163      	str	r3, [r4, #20]
 8061d6e:	9b01      	ldr	r3, [sp, #4]
 8061d70:	6120      	str	r0, [r4, #16]
 8061d72:	b15b      	cbz	r3, 8061d8c <__smakebuf_r+0x74>
 8061d74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8061d78:	4630      	mov	r0, r6
 8061d7a:	f000 fe39 	bl	80629f0 <_isatty_r>
 8061d7e:	b128      	cbz	r0, 8061d8c <__smakebuf_r+0x74>
 8061d80:	89a3      	ldrh	r3, [r4, #12]
 8061d82:	f023 0303 	bic.w	r3, r3, #3
 8061d86:	f043 0301 	orr.w	r3, r3, #1
 8061d8a:	81a3      	strh	r3, [r4, #12]
 8061d8c:	89a0      	ldrh	r0, [r4, #12]
 8061d8e:	4305      	orrs	r5, r0
 8061d90:	81a5      	strh	r5, [r4, #12]
 8061d92:	e7cd      	b.n	8061d30 <__smakebuf_r+0x18>
 8061d94:	08061b1d 	.word	0x08061b1d

08061d98 <malloc>:
 8061d98:	4b02      	ldr	r3, [pc, #8]	; (8061da4 <malloc+0xc>)
 8061d9a:	4601      	mov	r1, r0
 8061d9c:	6818      	ldr	r0, [r3, #0]
 8061d9e:	f7fe b925 	b.w	805ffec <_malloc_r>
 8061da2:	bf00      	nop
 8061da4:	20007cc0 	.word	0x20007cc0

08061da8 <__malloc_lock>:
 8061da8:	4801      	ldr	r0, [pc, #4]	; (8061db0 <__malloc_lock+0x8>)
 8061daa:	f7ff bf8e 	b.w	8061cca <__retarget_lock_acquire_recursive>
 8061dae:	bf00      	nop
 8061db0:	2001c388 	.word	0x2001c388

08061db4 <__malloc_unlock>:
 8061db4:	4801      	ldr	r0, [pc, #4]	; (8061dbc <__malloc_unlock+0x8>)
 8061db6:	f7ff bf89 	b.w	8061ccc <__retarget_lock_release_recursive>
 8061dba:	bf00      	nop
 8061dbc:	2001c388 	.word	0x2001c388

08061dc0 <_Balloc>:
 8061dc0:	b570      	push	{r4, r5, r6, lr}
 8061dc2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8061dc4:	4604      	mov	r4, r0
 8061dc6:	460d      	mov	r5, r1
 8061dc8:	b976      	cbnz	r6, 8061de8 <_Balloc+0x28>
 8061dca:	2010      	movs	r0, #16
 8061dcc:	f7ff ffe4 	bl	8061d98 <malloc>
 8061dd0:	4602      	mov	r2, r0
 8061dd2:	6260      	str	r0, [r4, #36]	; 0x24
 8061dd4:	b920      	cbnz	r0, 8061de0 <_Balloc+0x20>
 8061dd6:	4b18      	ldr	r3, [pc, #96]	; (8061e38 <_Balloc+0x78>)
 8061dd8:	4818      	ldr	r0, [pc, #96]	; (8061e3c <_Balloc+0x7c>)
 8061dda:	2166      	movs	r1, #102	; 0x66
 8061ddc:	f000 fdb6 	bl	806294c <__assert_func>
 8061de0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8061de4:	6006      	str	r6, [r0, #0]
 8061de6:	60c6      	str	r6, [r0, #12]
 8061de8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8061dea:	68f3      	ldr	r3, [r6, #12]
 8061dec:	b183      	cbz	r3, 8061e10 <_Balloc+0x50>
 8061dee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8061df0:	68db      	ldr	r3, [r3, #12]
 8061df2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8061df6:	b9b8      	cbnz	r0, 8061e28 <_Balloc+0x68>
 8061df8:	2101      	movs	r1, #1
 8061dfa:	fa01 f605 	lsl.w	r6, r1, r5
 8061dfe:	1d72      	adds	r2, r6, #5
 8061e00:	0092      	lsls	r2, r2, #2
 8061e02:	4620      	mov	r0, r4
 8061e04:	f7fe f8e2 	bl	805ffcc <_calloc_r>
 8061e08:	b160      	cbz	r0, 8061e24 <_Balloc+0x64>
 8061e0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8061e0e:	e00e      	b.n	8061e2e <_Balloc+0x6e>
 8061e10:	2221      	movs	r2, #33	; 0x21
 8061e12:	2104      	movs	r1, #4
 8061e14:	4620      	mov	r0, r4
 8061e16:	f7fe f8d9 	bl	805ffcc <_calloc_r>
 8061e1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8061e1c:	60f0      	str	r0, [r6, #12]
 8061e1e:	68db      	ldr	r3, [r3, #12]
 8061e20:	2b00      	cmp	r3, #0
 8061e22:	d1e4      	bne.n	8061dee <_Balloc+0x2e>
 8061e24:	2000      	movs	r0, #0
 8061e26:	bd70      	pop	{r4, r5, r6, pc}
 8061e28:	6802      	ldr	r2, [r0, #0]
 8061e2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8061e2e:	2300      	movs	r3, #0
 8061e30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8061e34:	e7f7      	b.n	8061e26 <_Balloc+0x66>
 8061e36:	bf00      	nop
 8061e38:	0807d2f9 	.word	0x0807d2f9
 8061e3c:	0807d3e0 	.word	0x0807d3e0

08061e40 <_Bfree>:
 8061e40:	b570      	push	{r4, r5, r6, lr}
 8061e42:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8061e44:	4605      	mov	r5, r0
 8061e46:	460c      	mov	r4, r1
 8061e48:	b976      	cbnz	r6, 8061e68 <_Bfree+0x28>
 8061e4a:	2010      	movs	r0, #16
 8061e4c:	f7ff ffa4 	bl	8061d98 <malloc>
 8061e50:	4602      	mov	r2, r0
 8061e52:	6268      	str	r0, [r5, #36]	; 0x24
 8061e54:	b920      	cbnz	r0, 8061e60 <_Bfree+0x20>
 8061e56:	4b09      	ldr	r3, [pc, #36]	; (8061e7c <_Bfree+0x3c>)
 8061e58:	4809      	ldr	r0, [pc, #36]	; (8061e80 <_Bfree+0x40>)
 8061e5a:	218a      	movs	r1, #138	; 0x8a
 8061e5c:	f000 fd76 	bl	806294c <__assert_func>
 8061e60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8061e64:	6006      	str	r6, [r0, #0]
 8061e66:	60c6      	str	r6, [r0, #12]
 8061e68:	b13c      	cbz	r4, 8061e7a <_Bfree+0x3a>
 8061e6a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8061e6c:	6862      	ldr	r2, [r4, #4]
 8061e6e:	68db      	ldr	r3, [r3, #12]
 8061e70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8061e74:	6021      	str	r1, [r4, #0]
 8061e76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8061e7a:	bd70      	pop	{r4, r5, r6, pc}
 8061e7c:	0807d2f9 	.word	0x0807d2f9
 8061e80:	0807d3e0 	.word	0x0807d3e0

08061e84 <__multadd>:
 8061e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8061e88:	690e      	ldr	r6, [r1, #16]
 8061e8a:	4607      	mov	r7, r0
 8061e8c:	4698      	mov	r8, r3
 8061e8e:	460c      	mov	r4, r1
 8061e90:	f101 0014 	add.w	r0, r1, #20
 8061e94:	2300      	movs	r3, #0
 8061e96:	6805      	ldr	r5, [r0, #0]
 8061e98:	b2a9      	uxth	r1, r5
 8061e9a:	fb02 8101 	mla	r1, r2, r1, r8
 8061e9e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8061ea2:	0c2d      	lsrs	r5, r5, #16
 8061ea4:	fb02 c505 	mla	r5, r2, r5, ip
 8061ea8:	b289      	uxth	r1, r1
 8061eaa:	3301      	adds	r3, #1
 8061eac:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8061eb0:	429e      	cmp	r6, r3
 8061eb2:	f840 1b04 	str.w	r1, [r0], #4
 8061eb6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8061eba:	dcec      	bgt.n	8061e96 <__multadd+0x12>
 8061ebc:	f1b8 0f00 	cmp.w	r8, #0
 8061ec0:	d022      	beq.n	8061f08 <__multadd+0x84>
 8061ec2:	68a3      	ldr	r3, [r4, #8]
 8061ec4:	42b3      	cmp	r3, r6
 8061ec6:	dc19      	bgt.n	8061efc <__multadd+0x78>
 8061ec8:	6861      	ldr	r1, [r4, #4]
 8061eca:	4638      	mov	r0, r7
 8061ecc:	3101      	adds	r1, #1
 8061ece:	f7ff ff77 	bl	8061dc0 <_Balloc>
 8061ed2:	4605      	mov	r5, r0
 8061ed4:	b928      	cbnz	r0, 8061ee2 <__multadd+0x5e>
 8061ed6:	4602      	mov	r2, r0
 8061ed8:	4b0d      	ldr	r3, [pc, #52]	; (8061f10 <__multadd+0x8c>)
 8061eda:	480e      	ldr	r0, [pc, #56]	; (8061f14 <__multadd+0x90>)
 8061edc:	21b5      	movs	r1, #181	; 0xb5
 8061ede:	f000 fd35 	bl	806294c <__assert_func>
 8061ee2:	6922      	ldr	r2, [r4, #16]
 8061ee4:	3202      	adds	r2, #2
 8061ee6:	f104 010c 	add.w	r1, r4, #12
 8061eea:	0092      	lsls	r2, r2, #2
 8061eec:	300c      	adds	r0, #12
 8061eee:	f7fe f857 	bl	805ffa0 <memcpy>
 8061ef2:	4621      	mov	r1, r4
 8061ef4:	4638      	mov	r0, r7
 8061ef6:	f7ff ffa3 	bl	8061e40 <_Bfree>
 8061efa:	462c      	mov	r4, r5
 8061efc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8061f00:	3601      	adds	r6, #1
 8061f02:	f8c3 8014 	str.w	r8, [r3, #20]
 8061f06:	6126      	str	r6, [r4, #16]
 8061f08:	4620      	mov	r0, r4
 8061f0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8061f0e:	bf00      	nop
 8061f10:	0807d36f 	.word	0x0807d36f
 8061f14:	0807d3e0 	.word	0x0807d3e0

08061f18 <__hi0bits>:
 8061f18:	0c03      	lsrs	r3, r0, #16
 8061f1a:	041b      	lsls	r3, r3, #16
 8061f1c:	b9d3      	cbnz	r3, 8061f54 <__hi0bits+0x3c>
 8061f1e:	0400      	lsls	r0, r0, #16
 8061f20:	2310      	movs	r3, #16
 8061f22:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8061f26:	bf04      	itt	eq
 8061f28:	0200      	lsleq	r0, r0, #8
 8061f2a:	3308      	addeq	r3, #8
 8061f2c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8061f30:	bf04      	itt	eq
 8061f32:	0100      	lsleq	r0, r0, #4
 8061f34:	3304      	addeq	r3, #4
 8061f36:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8061f3a:	bf04      	itt	eq
 8061f3c:	0080      	lsleq	r0, r0, #2
 8061f3e:	3302      	addeq	r3, #2
 8061f40:	2800      	cmp	r0, #0
 8061f42:	db05      	blt.n	8061f50 <__hi0bits+0x38>
 8061f44:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8061f48:	f103 0301 	add.w	r3, r3, #1
 8061f4c:	bf08      	it	eq
 8061f4e:	2320      	moveq	r3, #32
 8061f50:	4618      	mov	r0, r3
 8061f52:	4770      	bx	lr
 8061f54:	2300      	movs	r3, #0
 8061f56:	e7e4      	b.n	8061f22 <__hi0bits+0xa>

08061f58 <__lo0bits>:
 8061f58:	6803      	ldr	r3, [r0, #0]
 8061f5a:	f013 0207 	ands.w	r2, r3, #7
 8061f5e:	4601      	mov	r1, r0
 8061f60:	d00b      	beq.n	8061f7a <__lo0bits+0x22>
 8061f62:	07da      	lsls	r2, r3, #31
 8061f64:	d424      	bmi.n	8061fb0 <__lo0bits+0x58>
 8061f66:	0798      	lsls	r0, r3, #30
 8061f68:	bf49      	itett	mi
 8061f6a:	085b      	lsrmi	r3, r3, #1
 8061f6c:	089b      	lsrpl	r3, r3, #2
 8061f6e:	2001      	movmi	r0, #1
 8061f70:	600b      	strmi	r3, [r1, #0]
 8061f72:	bf5c      	itt	pl
 8061f74:	600b      	strpl	r3, [r1, #0]
 8061f76:	2002      	movpl	r0, #2
 8061f78:	4770      	bx	lr
 8061f7a:	b298      	uxth	r0, r3
 8061f7c:	b9b0      	cbnz	r0, 8061fac <__lo0bits+0x54>
 8061f7e:	0c1b      	lsrs	r3, r3, #16
 8061f80:	2010      	movs	r0, #16
 8061f82:	f013 0fff 	tst.w	r3, #255	; 0xff
 8061f86:	bf04      	itt	eq
 8061f88:	0a1b      	lsreq	r3, r3, #8
 8061f8a:	3008      	addeq	r0, #8
 8061f8c:	071a      	lsls	r2, r3, #28
 8061f8e:	bf04      	itt	eq
 8061f90:	091b      	lsreq	r3, r3, #4
 8061f92:	3004      	addeq	r0, #4
 8061f94:	079a      	lsls	r2, r3, #30
 8061f96:	bf04      	itt	eq
 8061f98:	089b      	lsreq	r3, r3, #2
 8061f9a:	3002      	addeq	r0, #2
 8061f9c:	07da      	lsls	r2, r3, #31
 8061f9e:	d403      	bmi.n	8061fa8 <__lo0bits+0x50>
 8061fa0:	085b      	lsrs	r3, r3, #1
 8061fa2:	f100 0001 	add.w	r0, r0, #1
 8061fa6:	d005      	beq.n	8061fb4 <__lo0bits+0x5c>
 8061fa8:	600b      	str	r3, [r1, #0]
 8061faa:	4770      	bx	lr
 8061fac:	4610      	mov	r0, r2
 8061fae:	e7e8      	b.n	8061f82 <__lo0bits+0x2a>
 8061fb0:	2000      	movs	r0, #0
 8061fb2:	4770      	bx	lr
 8061fb4:	2020      	movs	r0, #32
 8061fb6:	4770      	bx	lr

08061fb8 <__i2b>:
 8061fb8:	b510      	push	{r4, lr}
 8061fba:	460c      	mov	r4, r1
 8061fbc:	2101      	movs	r1, #1
 8061fbe:	f7ff feff 	bl	8061dc0 <_Balloc>
 8061fc2:	4602      	mov	r2, r0
 8061fc4:	b928      	cbnz	r0, 8061fd2 <__i2b+0x1a>
 8061fc6:	4b05      	ldr	r3, [pc, #20]	; (8061fdc <__i2b+0x24>)
 8061fc8:	4805      	ldr	r0, [pc, #20]	; (8061fe0 <__i2b+0x28>)
 8061fca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8061fce:	f000 fcbd 	bl	806294c <__assert_func>
 8061fd2:	2301      	movs	r3, #1
 8061fd4:	6144      	str	r4, [r0, #20]
 8061fd6:	6103      	str	r3, [r0, #16]
 8061fd8:	bd10      	pop	{r4, pc}
 8061fda:	bf00      	nop
 8061fdc:	0807d36f 	.word	0x0807d36f
 8061fe0:	0807d3e0 	.word	0x0807d3e0

08061fe4 <__multiply>:
 8061fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8061fe8:	4614      	mov	r4, r2
 8061fea:	690a      	ldr	r2, [r1, #16]
 8061fec:	6923      	ldr	r3, [r4, #16]
 8061fee:	429a      	cmp	r2, r3
 8061ff0:	bfb8      	it	lt
 8061ff2:	460b      	movlt	r3, r1
 8061ff4:	460d      	mov	r5, r1
 8061ff6:	bfbc      	itt	lt
 8061ff8:	4625      	movlt	r5, r4
 8061ffa:	461c      	movlt	r4, r3
 8061ffc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8062000:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8062004:	68ab      	ldr	r3, [r5, #8]
 8062006:	6869      	ldr	r1, [r5, #4]
 8062008:	eb0a 0709 	add.w	r7, sl, r9
 806200c:	42bb      	cmp	r3, r7
 806200e:	b085      	sub	sp, #20
 8062010:	bfb8      	it	lt
 8062012:	3101      	addlt	r1, #1
 8062014:	f7ff fed4 	bl	8061dc0 <_Balloc>
 8062018:	b930      	cbnz	r0, 8062028 <__multiply+0x44>
 806201a:	4602      	mov	r2, r0
 806201c:	4b42      	ldr	r3, [pc, #264]	; (8062128 <__multiply+0x144>)
 806201e:	4843      	ldr	r0, [pc, #268]	; (806212c <__multiply+0x148>)
 8062020:	f240 115d 	movw	r1, #349	; 0x15d
 8062024:	f000 fc92 	bl	806294c <__assert_func>
 8062028:	f100 0614 	add.w	r6, r0, #20
 806202c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8062030:	4633      	mov	r3, r6
 8062032:	2200      	movs	r2, #0
 8062034:	4543      	cmp	r3, r8
 8062036:	d31e      	bcc.n	8062076 <__multiply+0x92>
 8062038:	f105 0c14 	add.w	ip, r5, #20
 806203c:	f104 0314 	add.w	r3, r4, #20
 8062040:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8062044:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8062048:	9202      	str	r2, [sp, #8]
 806204a:	ebac 0205 	sub.w	r2, ip, r5
 806204e:	3a15      	subs	r2, #21
 8062050:	f022 0203 	bic.w	r2, r2, #3
 8062054:	3204      	adds	r2, #4
 8062056:	f105 0115 	add.w	r1, r5, #21
 806205a:	458c      	cmp	ip, r1
 806205c:	bf38      	it	cc
 806205e:	2204      	movcc	r2, #4
 8062060:	9201      	str	r2, [sp, #4]
 8062062:	9a02      	ldr	r2, [sp, #8]
 8062064:	9303      	str	r3, [sp, #12]
 8062066:	429a      	cmp	r2, r3
 8062068:	d808      	bhi.n	806207c <__multiply+0x98>
 806206a:	2f00      	cmp	r7, #0
 806206c:	dc55      	bgt.n	806211a <__multiply+0x136>
 806206e:	6107      	str	r7, [r0, #16]
 8062070:	b005      	add	sp, #20
 8062072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8062076:	f843 2b04 	str.w	r2, [r3], #4
 806207a:	e7db      	b.n	8062034 <__multiply+0x50>
 806207c:	f8b3 a000 	ldrh.w	sl, [r3]
 8062080:	f1ba 0f00 	cmp.w	sl, #0
 8062084:	d020      	beq.n	80620c8 <__multiply+0xe4>
 8062086:	f105 0e14 	add.w	lr, r5, #20
 806208a:	46b1      	mov	r9, r6
 806208c:	2200      	movs	r2, #0
 806208e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8062092:	f8d9 b000 	ldr.w	fp, [r9]
 8062096:	b2a1      	uxth	r1, r4
 8062098:	fa1f fb8b 	uxth.w	fp, fp
 806209c:	fb0a b101 	mla	r1, sl, r1, fp
 80620a0:	4411      	add	r1, r2
 80620a2:	f8d9 2000 	ldr.w	r2, [r9]
 80620a6:	0c24      	lsrs	r4, r4, #16
 80620a8:	0c12      	lsrs	r2, r2, #16
 80620aa:	fb0a 2404 	mla	r4, sl, r4, r2
 80620ae:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80620b2:	b289      	uxth	r1, r1
 80620b4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80620b8:	45f4      	cmp	ip, lr
 80620ba:	f849 1b04 	str.w	r1, [r9], #4
 80620be:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80620c2:	d8e4      	bhi.n	806208e <__multiply+0xaa>
 80620c4:	9901      	ldr	r1, [sp, #4]
 80620c6:	5072      	str	r2, [r6, r1]
 80620c8:	9a03      	ldr	r2, [sp, #12]
 80620ca:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80620ce:	3304      	adds	r3, #4
 80620d0:	f1b9 0f00 	cmp.w	r9, #0
 80620d4:	d01f      	beq.n	8062116 <__multiply+0x132>
 80620d6:	6834      	ldr	r4, [r6, #0]
 80620d8:	f105 0114 	add.w	r1, r5, #20
 80620dc:	46b6      	mov	lr, r6
 80620de:	f04f 0a00 	mov.w	sl, #0
 80620e2:	880a      	ldrh	r2, [r1, #0]
 80620e4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80620e8:	fb09 b202 	mla	r2, r9, r2, fp
 80620ec:	4492      	add	sl, r2
 80620ee:	b2a4      	uxth	r4, r4
 80620f0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80620f4:	f84e 4b04 	str.w	r4, [lr], #4
 80620f8:	f851 4b04 	ldr.w	r4, [r1], #4
 80620fc:	f8be 2000 	ldrh.w	r2, [lr]
 8062100:	0c24      	lsrs	r4, r4, #16
 8062102:	fb09 2404 	mla	r4, r9, r4, r2
 8062106:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 806210a:	458c      	cmp	ip, r1
 806210c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8062110:	d8e7      	bhi.n	80620e2 <__multiply+0xfe>
 8062112:	9a01      	ldr	r2, [sp, #4]
 8062114:	50b4      	str	r4, [r6, r2]
 8062116:	3604      	adds	r6, #4
 8062118:	e7a3      	b.n	8062062 <__multiply+0x7e>
 806211a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 806211e:	2b00      	cmp	r3, #0
 8062120:	d1a5      	bne.n	806206e <__multiply+0x8a>
 8062122:	3f01      	subs	r7, #1
 8062124:	e7a1      	b.n	806206a <__multiply+0x86>
 8062126:	bf00      	nop
 8062128:	0807d36f 	.word	0x0807d36f
 806212c:	0807d3e0 	.word	0x0807d3e0

08062130 <__pow5mult>:
 8062130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8062134:	4615      	mov	r5, r2
 8062136:	f012 0203 	ands.w	r2, r2, #3
 806213a:	4606      	mov	r6, r0
 806213c:	460f      	mov	r7, r1
 806213e:	d007      	beq.n	8062150 <__pow5mult+0x20>
 8062140:	4c25      	ldr	r4, [pc, #148]	; (80621d8 <__pow5mult+0xa8>)
 8062142:	3a01      	subs	r2, #1
 8062144:	2300      	movs	r3, #0
 8062146:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 806214a:	f7ff fe9b 	bl	8061e84 <__multadd>
 806214e:	4607      	mov	r7, r0
 8062150:	10ad      	asrs	r5, r5, #2
 8062152:	d03d      	beq.n	80621d0 <__pow5mult+0xa0>
 8062154:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8062156:	b97c      	cbnz	r4, 8062178 <__pow5mult+0x48>
 8062158:	2010      	movs	r0, #16
 806215a:	f7ff fe1d 	bl	8061d98 <malloc>
 806215e:	4602      	mov	r2, r0
 8062160:	6270      	str	r0, [r6, #36]	; 0x24
 8062162:	b928      	cbnz	r0, 8062170 <__pow5mult+0x40>
 8062164:	4b1d      	ldr	r3, [pc, #116]	; (80621dc <__pow5mult+0xac>)
 8062166:	481e      	ldr	r0, [pc, #120]	; (80621e0 <__pow5mult+0xb0>)
 8062168:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 806216c:	f000 fbee 	bl	806294c <__assert_func>
 8062170:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8062174:	6004      	str	r4, [r0, #0]
 8062176:	60c4      	str	r4, [r0, #12]
 8062178:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 806217c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8062180:	b94c      	cbnz	r4, 8062196 <__pow5mult+0x66>
 8062182:	f240 2171 	movw	r1, #625	; 0x271
 8062186:	4630      	mov	r0, r6
 8062188:	f7ff ff16 	bl	8061fb8 <__i2b>
 806218c:	2300      	movs	r3, #0
 806218e:	f8c8 0008 	str.w	r0, [r8, #8]
 8062192:	4604      	mov	r4, r0
 8062194:	6003      	str	r3, [r0, #0]
 8062196:	f04f 0900 	mov.w	r9, #0
 806219a:	07eb      	lsls	r3, r5, #31
 806219c:	d50a      	bpl.n	80621b4 <__pow5mult+0x84>
 806219e:	4639      	mov	r1, r7
 80621a0:	4622      	mov	r2, r4
 80621a2:	4630      	mov	r0, r6
 80621a4:	f7ff ff1e 	bl	8061fe4 <__multiply>
 80621a8:	4639      	mov	r1, r7
 80621aa:	4680      	mov	r8, r0
 80621ac:	4630      	mov	r0, r6
 80621ae:	f7ff fe47 	bl	8061e40 <_Bfree>
 80621b2:	4647      	mov	r7, r8
 80621b4:	106d      	asrs	r5, r5, #1
 80621b6:	d00b      	beq.n	80621d0 <__pow5mult+0xa0>
 80621b8:	6820      	ldr	r0, [r4, #0]
 80621ba:	b938      	cbnz	r0, 80621cc <__pow5mult+0x9c>
 80621bc:	4622      	mov	r2, r4
 80621be:	4621      	mov	r1, r4
 80621c0:	4630      	mov	r0, r6
 80621c2:	f7ff ff0f 	bl	8061fe4 <__multiply>
 80621c6:	6020      	str	r0, [r4, #0]
 80621c8:	f8c0 9000 	str.w	r9, [r0]
 80621cc:	4604      	mov	r4, r0
 80621ce:	e7e4      	b.n	806219a <__pow5mult+0x6a>
 80621d0:	4638      	mov	r0, r7
 80621d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80621d6:	bf00      	nop
 80621d8:	0807d530 	.word	0x0807d530
 80621dc:	0807d2f9 	.word	0x0807d2f9
 80621e0:	0807d3e0 	.word	0x0807d3e0

080621e4 <__lshift>:
 80621e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80621e8:	460c      	mov	r4, r1
 80621ea:	6849      	ldr	r1, [r1, #4]
 80621ec:	6923      	ldr	r3, [r4, #16]
 80621ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80621f2:	68a3      	ldr	r3, [r4, #8]
 80621f4:	4607      	mov	r7, r0
 80621f6:	4691      	mov	r9, r2
 80621f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80621fc:	f108 0601 	add.w	r6, r8, #1
 8062200:	42b3      	cmp	r3, r6
 8062202:	db0b      	blt.n	806221c <__lshift+0x38>
 8062204:	4638      	mov	r0, r7
 8062206:	f7ff fddb 	bl	8061dc0 <_Balloc>
 806220a:	4605      	mov	r5, r0
 806220c:	b948      	cbnz	r0, 8062222 <__lshift+0x3e>
 806220e:	4602      	mov	r2, r0
 8062210:	4b28      	ldr	r3, [pc, #160]	; (80622b4 <__lshift+0xd0>)
 8062212:	4829      	ldr	r0, [pc, #164]	; (80622b8 <__lshift+0xd4>)
 8062214:	f240 11d9 	movw	r1, #473	; 0x1d9
 8062218:	f000 fb98 	bl	806294c <__assert_func>
 806221c:	3101      	adds	r1, #1
 806221e:	005b      	lsls	r3, r3, #1
 8062220:	e7ee      	b.n	8062200 <__lshift+0x1c>
 8062222:	2300      	movs	r3, #0
 8062224:	f100 0114 	add.w	r1, r0, #20
 8062228:	f100 0210 	add.w	r2, r0, #16
 806222c:	4618      	mov	r0, r3
 806222e:	4553      	cmp	r3, sl
 8062230:	db33      	blt.n	806229a <__lshift+0xb6>
 8062232:	6920      	ldr	r0, [r4, #16]
 8062234:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8062238:	f104 0314 	add.w	r3, r4, #20
 806223c:	f019 091f 	ands.w	r9, r9, #31
 8062240:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8062244:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8062248:	d02b      	beq.n	80622a2 <__lshift+0xbe>
 806224a:	f1c9 0e20 	rsb	lr, r9, #32
 806224e:	468a      	mov	sl, r1
 8062250:	2200      	movs	r2, #0
 8062252:	6818      	ldr	r0, [r3, #0]
 8062254:	fa00 f009 	lsl.w	r0, r0, r9
 8062258:	4302      	orrs	r2, r0
 806225a:	f84a 2b04 	str.w	r2, [sl], #4
 806225e:	f853 2b04 	ldr.w	r2, [r3], #4
 8062262:	459c      	cmp	ip, r3
 8062264:	fa22 f20e 	lsr.w	r2, r2, lr
 8062268:	d8f3      	bhi.n	8062252 <__lshift+0x6e>
 806226a:	ebac 0304 	sub.w	r3, ip, r4
 806226e:	3b15      	subs	r3, #21
 8062270:	f023 0303 	bic.w	r3, r3, #3
 8062274:	3304      	adds	r3, #4
 8062276:	f104 0015 	add.w	r0, r4, #21
 806227a:	4584      	cmp	ip, r0
 806227c:	bf38      	it	cc
 806227e:	2304      	movcc	r3, #4
 8062280:	50ca      	str	r2, [r1, r3]
 8062282:	b10a      	cbz	r2, 8062288 <__lshift+0xa4>
 8062284:	f108 0602 	add.w	r6, r8, #2
 8062288:	3e01      	subs	r6, #1
 806228a:	4638      	mov	r0, r7
 806228c:	612e      	str	r6, [r5, #16]
 806228e:	4621      	mov	r1, r4
 8062290:	f7ff fdd6 	bl	8061e40 <_Bfree>
 8062294:	4628      	mov	r0, r5
 8062296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 806229a:	f842 0f04 	str.w	r0, [r2, #4]!
 806229e:	3301      	adds	r3, #1
 80622a0:	e7c5      	b.n	806222e <__lshift+0x4a>
 80622a2:	3904      	subs	r1, #4
 80622a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80622a8:	f841 2f04 	str.w	r2, [r1, #4]!
 80622ac:	459c      	cmp	ip, r3
 80622ae:	d8f9      	bhi.n	80622a4 <__lshift+0xc0>
 80622b0:	e7ea      	b.n	8062288 <__lshift+0xa4>
 80622b2:	bf00      	nop
 80622b4:	0807d36f 	.word	0x0807d36f
 80622b8:	0807d3e0 	.word	0x0807d3e0

080622bc <__mcmp>:
 80622bc:	b530      	push	{r4, r5, lr}
 80622be:	6902      	ldr	r2, [r0, #16]
 80622c0:	690c      	ldr	r4, [r1, #16]
 80622c2:	1b12      	subs	r2, r2, r4
 80622c4:	d10e      	bne.n	80622e4 <__mcmp+0x28>
 80622c6:	f100 0314 	add.w	r3, r0, #20
 80622ca:	3114      	adds	r1, #20
 80622cc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80622d0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80622d4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80622d8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80622dc:	42a5      	cmp	r5, r4
 80622de:	d003      	beq.n	80622e8 <__mcmp+0x2c>
 80622e0:	d305      	bcc.n	80622ee <__mcmp+0x32>
 80622e2:	2201      	movs	r2, #1
 80622e4:	4610      	mov	r0, r2
 80622e6:	bd30      	pop	{r4, r5, pc}
 80622e8:	4283      	cmp	r3, r0
 80622ea:	d3f3      	bcc.n	80622d4 <__mcmp+0x18>
 80622ec:	e7fa      	b.n	80622e4 <__mcmp+0x28>
 80622ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80622f2:	e7f7      	b.n	80622e4 <__mcmp+0x28>

080622f4 <__mdiff>:
 80622f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80622f8:	460c      	mov	r4, r1
 80622fa:	4606      	mov	r6, r0
 80622fc:	4611      	mov	r1, r2
 80622fe:	4620      	mov	r0, r4
 8062300:	4617      	mov	r7, r2
 8062302:	f7ff ffdb 	bl	80622bc <__mcmp>
 8062306:	1e05      	subs	r5, r0, #0
 8062308:	d110      	bne.n	806232c <__mdiff+0x38>
 806230a:	4629      	mov	r1, r5
 806230c:	4630      	mov	r0, r6
 806230e:	f7ff fd57 	bl	8061dc0 <_Balloc>
 8062312:	b930      	cbnz	r0, 8062322 <__mdiff+0x2e>
 8062314:	4b39      	ldr	r3, [pc, #228]	; (80623fc <__mdiff+0x108>)
 8062316:	4602      	mov	r2, r0
 8062318:	f240 2132 	movw	r1, #562	; 0x232
 806231c:	4838      	ldr	r0, [pc, #224]	; (8062400 <__mdiff+0x10c>)
 806231e:	f000 fb15 	bl	806294c <__assert_func>
 8062322:	2301      	movs	r3, #1
 8062324:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8062328:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 806232c:	bfa4      	itt	ge
 806232e:	463b      	movge	r3, r7
 8062330:	4627      	movge	r7, r4
 8062332:	4630      	mov	r0, r6
 8062334:	6879      	ldr	r1, [r7, #4]
 8062336:	bfa6      	itte	ge
 8062338:	461c      	movge	r4, r3
 806233a:	2500      	movge	r5, #0
 806233c:	2501      	movlt	r5, #1
 806233e:	f7ff fd3f 	bl	8061dc0 <_Balloc>
 8062342:	b920      	cbnz	r0, 806234e <__mdiff+0x5a>
 8062344:	4b2d      	ldr	r3, [pc, #180]	; (80623fc <__mdiff+0x108>)
 8062346:	4602      	mov	r2, r0
 8062348:	f44f 7110 	mov.w	r1, #576	; 0x240
 806234c:	e7e6      	b.n	806231c <__mdiff+0x28>
 806234e:	693e      	ldr	r6, [r7, #16]
 8062350:	60c5      	str	r5, [r0, #12]
 8062352:	6925      	ldr	r5, [r4, #16]
 8062354:	f107 0114 	add.w	r1, r7, #20
 8062358:	f104 0914 	add.w	r9, r4, #20
 806235c:	f100 0e14 	add.w	lr, r0, #20
 8062360:	f107 0210 	add.w	r2, r7, #16
 8062364:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8062368:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 806236c:	46f2      	mov	sl, lr
 806236e:	2700      	movs	r7, #0
 8062370:	f859 3b04 	ldr.w	r3, [r9], #4
 8062374:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8062378:	fa1f f883 	uxth.w	r8, r3
 806237c:	fa17 f78b 	uxtah	r7, r7, fp
 8062380:	0c1b      	lsrs	r3, r3, #16
 8062382:	eba7 0808 	sub.w	r8, r7, r8
 8062386:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 806238a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 806238e:	fa1f f888 	uxth.w	r8, r8
 8062392:	141f      	asrs	r7, r3, #16
 8062394:	454d      	cmp	r5, r9
 8062396:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 806239a:	f84a 3b04 	str.w	r3, [sl], #4
 806239e:	d8e7      	bhi.n	8062370 <__mdiff+0x7c>
 80623a0:	1b2b      	subs	r3, r5, r4
 80623a2:	3b15      	subs	r3, #21
 80623a4:	f023 0303 	bic.w	r3, r3, #3
 80623a8:	3304      	adds	r3, #4
 80623aa:	3415      	adds	r4, #21
 80623ac:	42a5      	cmp	r5, r4
 80623ae:	bf38      	it	cc
 80623b0:	2304      	movcc	r3, #4
 80623b2:	4419      	add	r1, r3
 80623b4:	4473      	add	r3, lr
 80623b6:	469e      	mov	lr, r3
 80623b8:	460d      	mov	r5, r1
 80623ba:	4565      	cmp	r5, ip
 80623bc:	d30e      	bcc.n	80623dc <__mdiff+0xe8>
 80623be:	f10c 0203 	add.w	r2, ip, #3
 80623c2:	1a52      	subs	r2, r2, r1
 80623c4:	f022 0203 	bic.w	r2, r2, #3
 80623c8:	3903      	subs	r1, #3
 80623ca:	458c      	cmp	ip, r1
 80623cc:	bf38      	it	cc
 80623ce:	2200      	movcc	r2, #0
 80623d0:	441a      	add	r2, r3
 80623d2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80623d6:	b17b      	cbz	r3, 80623f8 <__mdiff+0x104>
 80623d8:	6106      	str	r6, [r0, #16]
 80623da:	e7a5      	b.n	8062328 <__mdiff+0x34>
 80623dc:	f855 8b04 	ldr.w	r8, [r5], #4
 80623e0:	fa17 f488 	uxtah	r4, r7, r8
 80623e4:	1422      	asrs	r2, r4, #16
 80623e6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80623ea:	b2a4      	uxth	r4, r4
 80623ec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80623f0:	f84e 4b04 	str.w	r4, [lr], #4
 80623f4:	1417      	asrs	r7, r2, #16
 80623f6:	e7e0      	b.n	80623ba <__mdiff+0xc6>
 80623f8:	3e01      	subs	r6, #1
 80623fa:	e7ea      	b.n	80623d2 <__mdiff+0xde>
 80623fc:	0807d36f 	.word	0x0807d36f
 8062400:	0807d3e0 	.word	0x0807d3e0

08062404 <__d2b>:
 8062404:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8062408:	4689      	mov	r9, r1
 806240a:	2101      	movs	r1, #1
 806240c:	ec57 6b10 	vmov	r6, r7, d0
 8062410:	4690      	mov	r8, r2
 8062412:	f7ff fcd5 	bl	8061dc0 <_Balloc>
 8062416:	4604      	mov	r4, r0
 8062418:	b930      	cbnz	r0, 8062428 <__d2b+0x24>
 806241a:	4602      	mov	r2, r0
 806241c:	4b25      	ldr	r3, [pc, #148]	; (80624b4 <__d2b+0xb0>)
 806241e:	4826      	ldr	r0, [pc, #152]	; (80624b8 <__d2b+0xb4>)
 8062420:	f240 310a 	movw	r1, #778	; 0x30a
 8062424:	f000 fa92 	bl	806294c <__assert_func>
 8062428:	f3c7 550a 	ubfx	r5, r7, #20, #11
 806242c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8062430:	bb35      	cbnz	r5, 8062480 <__d2b+0x7c>
 8062432:	2e00      	cmp	r6, #0
 8062434:	9301      	str	r3, [sp, #4]
 8062436:	d028      	beq.n	806248a <__d2b+0x86>
 8062438:	4668      	mov	r0, sp
 806243a:	9600      	str	r6, [sp, #0]
 806243c:	f7ff fd8c 	bl	8061f58 <__lo0bits>
 8062440:	9900      	ldr	r1, [sp, #0]
 8062442:	b300      	cbz	r0, 8062486 <__d2b+0x82>
 8062444:	9a01      	ldr	r2, [sp, #4]
 8062446:	f1c0 0320 	rsb	r3, r0, #32
 806244a:	fa02 f303 	lsl.w	r3, r2, r3
 806244e:	430b      	orrs	r3, r1
 8062450:	40c2      	lsrs	r2, r0
 8062452:	6163      	str	r3, [r4, #20]
 8062454:	9201      	str	r2, [sp, #4]
 8062456:	9b01      	ldr	r3, [sp, #4]
 8062458:	61a3      	str	r3, [r4, #24]
 806245a:	2b00      	cmp	r3, #0
 806245c:	bf14      	ite	ne
 806245e:	2202      	movne	r2, #2
 8062460:	2201      	moveq	r2, #1
 8062462:	6122      	str	r2, [r4, #16]
 8062464:	b1d5      	cbz	r5, 806249c <__d2b+0x98>
 8062466:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 806246a:	4405      	add	r5, r0
 806246c:	f8c9 5000 	str.w	r5, [r9]
 8062470:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8062474:	f8c8 0000 	str.w	r0, [r8]
 8062478:	4620      	mov	r0, r4
 806247a:	b003      	add	sp, #12
 806247c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8062480:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8062484:	e7d5      	b.n	8062432 <__d2b+0x2e>
 8062486:	6161      	str	r1, [r4, #20]
 8062488:	e7e5      	b.n	8062456 <__d2b+0x52>
 806248a:	a801      	add	r0, sp, #4
 806248c:	f7ff fd64 	bl	8061f58 <__lo0bits>
 8062490:	9b01      	ldr	r3, [sp, #4]
 8062492:	6163      	str	r3, [r4, #20]
 8062494:	2201      	movs	r2, #1
 8062496:	6122      	str	r2, [r4, #16]
 8062498:	3020      	adds	r0, #32
 806249a:	e7e3      	b.n	8062464 <__d2b+0x60>
 806249c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80624a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80624a4:	f8c9 0000 	str.w	r0, [r9]
 80624a8:	6918      	ldr	r0, [r3, #16]
 80624aa:	f7ff fd35 	bl	8061f18 <__hi0bits>
 80624ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80624b2:	e7df      	b.n	8062474 <__d2b+0x70>
 80624b4:	0807d36f 	.word	0x0807d36f
 80624b8:	0807d3e0 	.word	0x0807d3e0

080624bc <_free_r>:
 80624bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80624be:	2900      	cmp	r1, #0
 80624c0:	d048      	beq.n	8062554 <_free_r+0x98>
 80624c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80624c6:	9001      	str	r0, [sp, #4]
 80624c8:	2b00      	cmp	r3, #0
 80624ca:	f1a1 0404 	sub.w	r4, r1, #4
 80624ce:	bfb8      	it	lt
 80624d0:	18e4      	addlt	r4, r4, r3
 80624d2:	f7ff fc69 	bl	8061da8 <__malloc_lock>
 80624d6:	4a20      	ldr	r2, [pc, #128]	; (8062558 <_free_r+0x9c>)
 80624d8:	9801      	ldr	r0, [sp, #4]
 80624da:	6813      	ldr	r3, [r2, #0]
 80624dc:	4615      	mov	r5, r2
 80624de:	b933      	cbnz	r3, 80624ee <_free_r+0x32>
 80624e0:	6063      	str	r3, [r4, #4]
 80624e2:	6014      	str	r4, [r2, #0]
 80624e4:	b003      	add	sp, #12
 80624e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80624ea:	f7ff bc63 	b.w	8061db4 <__malloc_unlock>
 80624ee:	42a3      	cmp	r3, r4
 80624f0:	d90b      	bls.n	806250a <_free_r+0x4e>
 80624f2:	6821      	ldr	r1, [r4, #0]
 80624f4:	1862      	adds	r2, r4, r1
 80624f6:	4293      	cmp	r3, r2
 80624f8:	bf04      	itt	eq
 80624fa:	681a      	ldreq	r2, [r3, #0]
 80624fc:	685b      	ldreq	r3, [r3, #4]
 80624fe:	6063      	str	r3, [r4, #4]
 8062500:	bf04      	itt	eq
 8062502:	1852      	addeq	r2, r2, r1
 8062504:	6022      	streq	r2, [r4, #0]
 8062506:	602c      	str	r4, [r5, #0]
 8062508:	e7ec      	b.n	80624e4 <_free_r+0x28>
 806250a:	461a      	mov	r2, r3
 806250c:	685b      	ldr	r3, [r3, #4]
 806250e:	b10b      	cbz	r3, 8062514 <_free_r+0x58>
 8062510:	42a3      	cmp	r3, r4
 8062512:	d9fa      	bls.n	806250a <_free_r+0x4e>
 8062514:	6811      	ldr	r1, [r2, #0]
 8062516:	1855      	adds	r5, r2, r1
 8062518:	42a5      	cmp	r5, r4
 806251a:	d10b      	bne.n	8062534 <_free_r+0x78>
 806251c:	6824      	ldr	r4, [r4, #0]
 806251e:	4421      	add	r1, r4
 8062520:	1854      	adds	r4, r2, r1
 8062522:	42a3      	cmp	r3, r4
 8062524:	6011      	str	r1, [r2, #0]
 8062526:	d1dd      	bne.n	80624e4 <_free_r+0x28>
 8062528:	681c      	ldr	r4, [r3, #0]
 806252a:	685b      	ldr	r3, [r3, #4]
 806252c:	6053      	str	r3, [r2, #4]
 806252e:	4421      	add	r1, r4
 8062530:	6011      	str	r1, [r2, #0]
 8062532:	e7d7      	b.n	80624e4 <_free_r+0x28>
 8062534:	d902      	bls.n	806253c <_free_r+0x80>
 8062536:	230c      	movs	r3, #12
 8062538:	6003      	str	r3, [r0, #0]
 806253a:	e7d3      	b.n	80624e4 <_free_r+0x28>
 806253c:	6825      	ldr	r5, [r4, #0]
 806253e:	1961      	adds	r1, r4, r5
 8062540:	428b      	cmp	r3, r1
 8062542:	bf04      	itt	eq
 8062544:	6819      	ldreq	r1, [r3, #0]
 8062546:	685b      	ldreq	r3, [r3, #4]
 8062548:	6063      	str	r3, [r4, #4]
 806254a:	bf04      	itt	eq
 806254c:	1949      	addeq	r1, r1, r5
 806254e:	6021      	streq	r1, [r4, #0]
 8062550:	6054      	str	r4, [r2, #4]
 8062552:	e7c7      	b.n	80624e4 <_free_r+0x28>
 8062554:	b003      	add	sp, #12
 8062556:	bd30      	pop	{r4, r5, pc}
 8062558:	2001b56c 	.word	0x2001b56c

0806255c <__sfputc_r>:
 806255c:	6893      	ldr	r3, [r2, #8]
 806255e:	3b01      	subs	r3, #1
 8062560:	2b00      	cmp	r3, #0
 8062562:	b410      	push	{r4}
 8062564:	6093      	str	r3, [r2, #8]
 8062566:	da08      	bge.n	806257a <__sfputc_r+0x1e>
 8062568:	6994      	ldr	r4, [r2, #24]
 806256a:	42a3      	cmp	r3, r4
 806256c:	db01      	blt.n	8062572 <__sfputc_r+0x16>
 806256e:	290a      	cmp	r1, #10
 8062570:	d103      	bne.n	806257a <__sfputc_r+0x1e>
 8062572:	f85d 4b04 	ldr.w	r4, [sp], #4
 8062576:	f7fe bab1 	b.w	8060adc <__swbuf_r>
 806257a:	6813      	ldr	r3, [r2, #0]
 806257c:	1c58      	adds	r0, r3, #1
 806257e:	6010      	str	r0, [r2, #0]
 8062580:	7019      	strb	r1, [r3, #0]
 8062582:	4608      	mov	r0, r1
 8062584:	f85d 4b04 	ldr.w	r4, [sp], #4
 8062588:	4770      	bx	lr

0806258a <__sfputs_r>:
 806258a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 806258c:	4606      	mov	r6, r0
 806258e:	460f      	mov	r7, r1
 8062590:	4614      	mov	r4, r2
 8062592:	18d5      	adds	r5, r2, r3
 8062594:	42ac      	cmp	r4, r5
 8062596:	d101      	bne.n	806259c <__sfputs_r+0x12>
 8062598:	2000      	movs	r0, #0
 806259a:	e007      	b.n	80625ac <__sfputs_r+0x22>
 806259c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80625a0:	463a      	mov	r2, r7
 80625a2:	4630      	mov	r0, r6
 80625a4:	f7ff ffda 	bl	806255c <__sfputc_r>
 80625a8:	1c43      	adds	r3, r0, #1
 80625aa:	d1f3      	bne.n	8062594 <__sfputs_r+0xa>
 80625ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080625b0 <_vfiprintf_r>:
 80625b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80625b4:	460d      	mov	r5, r1
 80625b6:	b09d      	sub	sp, #116	; 0x74
 80625b8:	4614      	mov	r4, r2
 80625ba:	4698      	mov	r8, r3
 80625bc:	4606      	mov	r6, r0
 80625be:	b118      	cbz	r0, 80625c8 <_vfiprintf_r+0x18>
 80625c0:	6983      	ldr	r3, [r0, #24]
 80625c2:	b90b      	cbnz	r3, 80625c8 <_vfiprintf_r+0x18>
 80625c4:	f7ff fade 	bl	8061b84 <__sinit>
 80625c8:	4b89      	ldr	r3, [pc, #548]	; (80627f0 <_vfiprintf_r+0x240>)
 80625ca:	429d      	cmp	r5, r3
 80625cc:	d11b      	bne.n	8062606 <_vfiprintf_r+0x56>
 80625ce:	6875      	ldr	r5, [r6, #4]
 80625d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80625d2:	07d9      	lsls	r1, r3, #31
 80625d4:	d405      	bmi.n	80625e2 <_vfiprintf_r+0x32>
 80625d6:	89ab      	ldrh	r3, [r5, #12]
 80625d8:	059a      	lsls	r2, r3, #22
 80625da:	d402      	bmi.n	80625e2 <_vfiprintf_r+0x32>
 80625dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80625de:	f7ff fb74 	bl	8061cca <__retarget_lock_acquire_recursive>
 80625e2:	89ab      	ldrh	r3, [r5, #12]
 80625e4:	071b      	lsls	r3, r3, #28
 80625e6:	d501      	bpl.n	80625ec <_vfiprintf_r+0x3c>
 80625e8:	692b      	ldr	r3, [r5, #16]
 80625ea:	b9eb      	cbnz	r3, 8062628 <_vfiprintf_r+0x78>
 80625ec:	4629      	mov	r1, r5
 80625ee:	4630      	mov	r0, r6
 80625f0:	f7fe fac6 	bl	8060b80 <__swsetup_r>
 80625f4:	b1c0      	cbz	r0, 8062628 <_vfiprintf_r+0x78>
 80625f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80625f8:	07dc      	lsls	r4, r3, #31
 80625fa:	d50e      	bpl.n	806261a <_vfiprintf_r+0x6a>
 80625fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8062600:	b01d      	add	sp, #116	; 0x74
 8062602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8062606:	4b7b      	ldr	r3, [pc, #492]	; (80627f4 <_vfiprintf_r+0x244>)
 8062608:	429d      	cmp	r5, r3
 806260a:	d101      	bne.n	8062610 <_vfiprintf_r+0x60>
 806260c:	68b5      	ldr	r5, [r6, #8]
 806260e:	e7df      	b.n	80625d0 <_vfiprintf_r+0x20>
 8062610:	4b79      	ldr	r3, [pc, #484]	; (80627f8 <_vfiprintf_r+0x248>)
 8062612:	429d      	cmp	r5, r3
 8062614:	bf08      	it	eq
 8062616:	68f5      	ldreq	r5, [r6, #12]
 8062618:	e7da      	b.n	80625d0 <_vfiprintf_r+0x20>
 806261a:	89ab      	ldrh	r3, [r5, #12]
 806261c:	0598      	lsls	r0, r3, #22
 806261e:	d4ed      	bmi.n	80625fc <_vfiprintf_r+0x4c>
 8062620:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8062622:	f7ff fb53 	bl	8061ccc <__retarget_lock_release_recursive>
 8062626:	e7e9      	b.n	80625fc <_vfiprintf_r+0x4c>
 8062628:	2300      	movs	r3, #0
 806262a:	9309      	str	r3, [sp, #36]	; 0x24
 806262c:	2320      	movs	r3, #32
 806262e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8062632:	f8cd 800c 	str.w	r8, [sp, #12]
 8062636:	2330      	movs	r3, #48	; 0x30
 8062638:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80627fc <_vfiprintf_r+0x24c>
 806263c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8062640:	f04f 0901 	mov.w	r9, #1
 8062644:	4623      	mov	r3, r4
 8062646:	469a      	mov	sl, r3
 8062648:	f813 2b01 	ldrb.w	r2, [r3], #1
 806264c:	b10a      	cbz	r2, 8062652 <_vfiprintf_r+0xa2>
 806264e:	2a25      	cmp	r2, #37	; 0x25
 8062650:	d1f9      	bne.n	8062646 <_vfiprintf_r+0x96>
 8062652:	ebba 0b04 	subs.w	fp, sl, r4
 8062656:	d00b      	beq.n	8062670 <_vfiprintf_r+0xc0>
 8062658:	465b      	mov	r3, fp
 806265a:	4622      	mov	r2, r4
 806265c:	4629      	mov	r1, r5
 806265e:	4630      	mov	r0, r6
 8062660:	f7ff ff93 	bl	806258a <__sfputs_r>
 8062664:	3001      	adds	r0, #1
 8062666:	f000 80aa 	beq.w	80627be <_vfiprintf_r+0x20e>
 806266a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 806266c:	445a      	add	r2, fp
 806266e:	9209      	str	r2, [sp, #36]	; 0x24
 8062670:	f89a 3000 	ldrb.w	r3, [sl]
 8062674:	2b00      	cmp	r3, #0
 8062676:	f000 80a2 	beq.w	80627be <_vfiprintf_r+0x20e>
 806267a:	2300      	movs	r3, #0
 806267c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8062680:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8062684:	f10a 0a01 	add.w	sl, sl, #1
 8062688:	9304      	str	r3, [sp, #16]
 806268a:	9307      	str	r3, [sp, #28]
 806268c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8062690:	931a      	str	r3, [sp, #104]	; 0x68
 8062692:	4654      	mov	r4, sl
 8062694:	2205      	movs	r2, #5
 8062696:	f814 1b01 	ldrb.w	r1, [r4], #1
 806269a:	4858      	ldr	r0, [pc, #352]	; (80627fc <_vfiprintf_r+0x24c>)
 806269c:	f7dd fda0 	bl	80401e0 <memchr>
 80626a0:	9a04      	ldr	r2, [sp, #16]
 80626a2:	b9d8      	cbnz	r0, 80626dc <_vfiprintf_r+0x12c>
 80626a4:	06d1      	lsls	r1, r2, #27
 80626a6:	bf44      	itt	mi
 80626a8:	2320      	movmi	r3, #32
 80626aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80626ae:	0713      	lsls	r3, r2, #28
 80626b0:	bf44      	itt	mi
 80626b2:	232b      	movmi	r3, #43	; 0x2b
 80626b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80626b8:	f89a 3000 	ldrb.w	r3, [sl]
 80626bc:	2b2a      	cmp	r3, #42	; 0x2a
 80626be:	d015      	beq.n	80626ec <_vfiprintf_r+0x13c>
 80626c0:	9a07      	ldr	r2, [sp, #28]
 80626c2:	4654      	mov	r4, sl
 80626c4:	2000      	movs	r0, #0
 80626c6:	f04f 0c0a 	mov.w	ip, #10
 80626ca:	4621      	mov	r1, r4
 80626cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80626d0:	3b30      	subs	r3, #48	; 0x30
 80626d2:	2b09      	cmp	r3, #9
 80626d4:	d94e      	bls.n	8062774 <_vfiprintf_r+0x1c4>
 80626d6:	b1b0      	cbz	r0, 8062706 <_vfiprintf_r+0x156>
 80626d8:	9207      	str	r2, [sp, #28]
 80626da:	e014      	b.n	8062706 <_vfiprintf_r+0x156>
 80626dc:	eba0 0308 	sub.w	r3, r0, r8
 80626e0:	fa09 f303 	lsl.w	r3, r9, r3
 80626e4:	4313      	orrs	r3, r2
 80626e6:	9304      	str	r3, [sp, #16]
 80626e8:	46a2      	mov	sl, r4
 80626ea:	e7d2      	b.n	8062692 <_vfiprintf_r+0xe2>
 80626ec:	9b03      	ldr	r3, [sp, #12]
 80626ee:	1d19      	adds	r1, r3, #4
 80626f0:	681b      	ldr	r3, [r3, #0]
 80626f2:	9103      	str	r1, [sp, #12]
 80626f4:	2b00      	cmp	r3, #0
 80626f6:	bfbb      	ittet	lt
 80626f8:	425b      	neglt	r3, r3
 80626fa:	f042 0202 	orrlt.w	r2, r2, #2
 80626fe:	9307      	strge	r3, [sp, #28]
 8062700:	9307      	strlt	r3, [sp, #28]
 8062702:	bfb8      	it	lt
 8062704:	9204      	strlt	r2, [sp, #16]
 8062706:	7823      	ldrb	r3, [r4, #0]
 8062708:	2b2e      	cmp	r3, #46	; 0x2e
 806270a:	d10c      	bne.n	8062726 <_vfiprintf_r+0x176>
 806270c:	7863      	ldrb	r3, [r4, #1]
 806270e:	2b2a      	cmp	r3, #42	; 0x2a
 8062710:	d135      	bne.n	806277e <_vfiprintf_r+0x1ce>
 8062712:	9b03      	ldr	r3, [sp, #12]
 8062714:	1d1a      	adds	r2, r3, #4
 8062716:	681b      	ldr	r3, [r3, #0]
 8062718:	9203      	str	r2, [sp, #12]
 806271a:	2b00      	cmp	r3, #0
 806271c:	bfb8      	it	lt
 806271e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8062722:	3402      	adds	r4, #2
 8062724:	9305      	str	r3, [sp, #20]
 8062726:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 806280c <_vfiprintf_r+0x25c>
 806272a:	7821      	ldrb	r1, [r4, #0]
 806272c:	2203      	movs	r2, #3
 806272e:	4650      	mov	r0, sl
 8062730:	f7dd fd56 	bl	80401e0 <memchr>
 8062734:	b140      	cbz	r0, 8062748 <_vfiprintf_r+0x198>
 8062736:	2340      	movs	r3, #64	; 0x40
 8062738:	eba0 000a 	sub.w	r0, r0, sl
 806273c:	fa03 f000 	lsl.w	r0, r3, r0
 8062740:	9b04      	ldr	r3, [sp, #16]
 8062742:	4303      	orrs	r3, r0
 8062744:	3401      	adds	r4, #1
 8062746:	9304      	str	r3, [sp, #16]
 8062748:	f814 1b01 	ldrb.w	r1, [r4], #1
 806274c:	482c      	ldr	r0, [pc, #176]	; (8062800 <_vfiprintf_r+0x250>)
 806274e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8062752:	2206      	movs	r2, #6
 8062754:	f7dd fd44 	bl	80401e0 <memchr>
 8062758:	2800      	cmp	r0, #0
 806275a:	d03f      	beq.n	80627dc <_vfiprintf_r+0x22c>
 806275c:	4b29      	ldr	r3, [pc, #164]	; (8062804 <_vfiprintf_r+0x254>)
 806275e:	bb1b      	cbnz	r3, 80627a8 <_vfiprintf_r+0x1f8>
 8062760:	9b03      	ldr	r3, [sp, #12]
 8062762:	3307      	adds	r3, #7
 8062764:	f023 0307 	bic.w	r3, r3, #7
 8062768:	3308      	adds	r3, #8
 806276a:	9303      	str	r3, [sp, #12]
 806276c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 806276e:	443b      	add	r3, r7
 8062770:	9309      	str	r3, [sp, #36]	; 0x24
 8062772:	e767      	b.n	8062644 <_vfiprintf_r+0x94>
 8062774:	fb0c 3202 	mla	r2, ip, r2, r3
 8062778:	460c      	mov	r4, r1
 806277a:	2001      	movs	r0, #1
 806277c:	e7a5      	b.n	80626ca <_vfiprintf_r+0x11a>
 806277e:	2300      	movs	r3, #0
 8062780:	3401      	adds	r4, #1
 8062782:	9305      	str	r3, [sp, #20]
 8062784:	4619      	mov	r1, r3
 8062786:	f04f 0c0a 	mov.w	ip, #10
 806278a:	4620      	mov	r0, r4
 806278c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8062790:	3a30      	subs	r2, #48	; 0x30
 8062792:	2a09      	cmp	r2, #9
 8062794:	d903      	bls.n	806279e <_vfiprintf_r+0x1ee>
 8062796:	2b00      	cmp	r3, #0
 8062798:	d0c5      	beq.n	8062726 <_vfiprintf_r+0x176>
 806279a:	9105      	str	r1, [sp, #20]
 806279c:	e7c3      	b.n	8062726 <_vfiprintf_r+0x176>
 806279e:	fb0c 2101 	mla	r1, ip, r1, r2
 80627a2:	4604      	mov	r4, r0
 80627a4:	2301      	movs	r3, #1
 80627a6:	e7f0      	b.n	806278a <_vfiprintf_r+0x1da>
 80627a8:	ab03      	add	r3, sp, #12
 80627aa:	9300      	str	r3, [sp, #0]
 80627ac:	462a      	mov	r2, r5
 80627ae:	4b16      	ldr	r3, [pc, #88]	; (8062808 <_vfiprintf_r+0x258>)
 80627b0:	a904      	add	r1, sp, #16
 80627b2:	4630      	mov	r0, r6
 80627b4:	f7fd fd14 	bl	80601e0 <_printf_float>
 80627b8:	4607      	mov	r7, r0
 80627ba:	1c78      	adds	r0, r7, #1
 80627bc:	d1d6      	bne.n	806276c <_vfiprintf_r+0x1bc>
 80627be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80627c0:	07d9      	lsls	r1, r3, #31
 80627c2:	d405      	bmi.n	80627d0 <_vfiprintf_r+0x220>
 80627c4:	89ab      	ldrh	r3, [r5, #12]
 80627c6:	059a      	lsls	r2, r3, #22
 80627c8:	d402      	bmi.n	80627d0 <_vfiprintf_r+0x220>
 80627ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80627cc:	f7ff fa7e 	bl	8061ccc <__retarget_lock_release_recursive>
 80627d0:	89ab      	ldrh	r3, [r5, #12]
 80627d2:	065b      	lsls	r3, r3, #25
 80627d4:	f53f af12 	bmi.w	80625fc <_vfiprintf_r+0x4c>
 80627d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80627da:	e711      	b.n	8062600 <_vfiprintf_r+0x50>
 80627dc:	ab03      	add	r3, sp, #12
 80627de:	9300      	str	r3, [sp, #0]
 80627e0:	462a      	mov	r2, r5
 80627e2:	4b09      	ldr	r3, [pc, #36]	; (8062808 <_vfiprintf_r+0x258>)
 80627e4:	a904      	add	r1, sp, #16
 80627e6:	4630      	mov	r0, r6
 80627e8:	f7fd ff9e 	bl	8060728 <_printf_i>
 80627ec:	e7e4      	b.n	80627b8 <_vfiprintf_r+0x208>
 80627ee:	bf00      	nop
 80627f0:	0807d3a0 	.word	0x0807d3a0
 80627f4:	0807d3c0 	.word	0x0807d3c0
 80627f8:	0807d380 	.word	0x0807d380
 80627fc:	0807d53c 	.word	0x0807d53c
 8062800:	0807d546 	.word	0x0807d546
 8062804:	080601e1 	.word	0x080601e1
 8062808:	0806258b 	.word	0x0806258b
 806280c:	0807d542 	.word	0x0807d542

08062810 <_putc_r>:
 8062810:	b570      	push	{r4, r5, r6, lr}
 8062812:	460d      	mov	r5, r1
 8062814:	4614      	mov	r4, r2
 8062816:	4606      	mov	r6, r0
 8062818:	b118      	cbz	r0, 8062822 <_putc_r+0x12>
 806281a:	6983      	ldr	r3, [r0, #24]
 806281c:	b90b      	cbnz	r3, 8062822 <_putc_r+0x12>
 806281e:	f7ff f9b1 	bl	8061b84 <__sinit>
 8062822:	4b1c      	ldr	r3, [pc, #112]	; (8062894 <_putc_r+0x84>)
 8062824:	429c      	cmp	r4, r3
 8062826:	d124      	bne.n	8062872 <_putc_r+0x62>
 8062828:	6874      	ldr	r4, [r6, #4]
 806282a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 806282c:	07d8      	lsls	r0, r3, #31
 806282e:	d405      	bmi.n	806283c <_putc_r+0x2c>
 8062830:	89a3      	ldrh	r3, [r4, #12]
 8062832:	0599      	lsls	r1, r3, #22
 8062834:	d402      	bmi.n	806283c <_putc_r+0x2c>
 8062836:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8062838:	f7ff fa47 	bl	8061cca <__retarget_lock_acquire_recursive>
 806283c:	68a3      	ldr	r3, [r4, #8]
 806283e:	3b01      	subs	r3, #1
 8062840:	2b00      	cmp	r3, #0
 8062842:	60a3      	str	r3, [r4, #8]
 8062844:	da05      	bge.n	8062852 <_putc_r+0x42>
 8062846:	69a2      	ldr	r2, [r4, #24]
 8062848:	4293      	cmp	r3, r2
 806284a:	db1c      	blt.n	8062886 <_putc_r+0x76>
 806284c:	b2eb      	uxtb	r3, r5
 806284e:	2b0a      	cmp	r3, #10
 8062850:	d019      	beq.n	8062886 <_putc_r+0x76>
 8062852:	6823      	ldr	r3, [r4, #0]
 8062854:	1c5a      	adds	r2, r3, #1
 8062856:	6022      	str	r2, [r4, #0]
 8062858:	701d      	strb	r5, [r3, #0]
 806285a:	b2ed      	uxtb	r5, r5
 806285c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 806285e:	07da      	lsls	r2, r3, #31
 8062860:	d405      	bmi.n	806286e <_putc_r+0x5e>
 8062862:	89a3      	ldrh	r3, [r4, #12]
 8062864:	059b      	lsls	r3, r3, #22
 8062866:	d402      	bmi.n	806286e <_putc_r+0x5e>
 8062868:	6da0      	ldr	r0, [r4, #88]	; 0x58
 806286a:	f7ff fa2f 	bl	8061ccc <__retarget_lock_release_recursive>
 806286e:	4628      	mov	r0, r5
 8062870:	bd70      	pop	{r4, r5, r6, pc}
 8062872:	4b09      	ldr	r3, [pc, #36]	; (8062898 <_putc_r+0x88>)
 8062874:	429c      	cmp	r4, r3
 8062876:	d101      	bne.n	806287c <_putc_r+0x6c>
 8062878:	68b4      	ldr	r4, [r6, #8]
 806287a:	e7d6      	b.n	806282a <_putc_r+0x1a>
 806287c:	4b07      	ldr	r3, [pc, #28]	; (806289c <_putc_r+0x8c>)
 806287e:	429c      	cmp	r4, r3
 8062880:	bf08      	it	eq
 8062882:	68f4      	ldreq	r4, [r6, #12]
 8062884:	e7d1      	b.n	806282a <_putc_r+0x1a>
 8062886:	4629      	mov	r1, r5
 8062888:	4622      	mov	r2, r4
 806288a:	4630      	mov	r0, r6
 806288c:	f7fe f926 	bl	8060adc <__swbuf_r>
 8062890:	4605      	mov	r5, r0
 8062892:	e7e3      	b.n	806285c <_putc_r+0x4c>
 8062894:	0807d3a0 	.word	0x0807d3a0
 8062898:	0807d3c0 	.word	0x0807d3c0
 806289c:	0807d380 	.word	0x0807d380

080628a0 <__sread>:
 80628a0:	b510      	push	{r4, lr}
 80628a2:	460c      	mov	r4, r1
 80628a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80628a8:	f000 f8d6 	bl	8062a58 <_read_r>
 80628ac:	2800      	cmp	r0, #0
 80628ae:	bfab      	itete	ge
 80628b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80628b2:	89a3      	ldrhlt	r3, [r4, #12]
 80628b4:	181b      	addge	r3, r3, r0
 80628b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80628ba:	bfac      	ite	ge
 80628bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80628be:	81a3      	strhlt	r3, [r4, #12]
 80628c0:	bd10      	pop	{r4, pc}

080628c2 <__swrite>:
 80628c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80628c6:	461f      	mov	r7, r3
 80628c8:	898b      	ldrh	r3, [r1, #12]
 80628ca:	05db      	lsls	r3, r3, #23
 80628cc:	4605      	mov	r5, r0
 80628ce:	460c      	mov	r4, r1
 80628d0:	4616      	mov	r6, r2
 80628d2:	d505      	bpl.n	80628e0 <__swrite+0x1e>
 80628d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80628d8:	2302      	movs	r3, #2
 80628da:	2200      	movs	r2, #0
 80628dc:	f000 f898 	bl	8062a10 <_lseek_r>
 80628e0:	89a3      	ldrh	r3, [r4, #12]
 80628e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80628e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80628ea:	81a3      	strh	r3, [r4, #12]
 80628ec:	4632      	mov	r2, r6
 80628ee:	463b      	mov	r3, r7
 80628f0:	4628      	mov	r0, r5
 80628f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80628f6:	f000 b817 	b.w	8062928 <_write_r>

080628fa <__sseek>:
 80628fa:	b510      	push	{r4, lr}
 80628fc:	460c      	mov	r4, r1
 80628fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8062902:	f000 f885 	bl	8062a10 <_lseek_r>
 8062906:	1c43      	adds	r3, r0, #1
 8062908:	89a3      	ldrh	r3, [r4, #12]
 806290a:	bf15      	itete	ne
 806290c:	6560      	strne	r0, [r4, #84]	; 0x54
 806290e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8062912:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8062916:	81a3      	strheq	r3, [r4, #12]
 8062918:	bf18      	it	ne
 806291a:	81a3      	strhne	r3, [r4, #12]
 806291c:	bd10      	pop	{r4, pc}

0806291e <__sclose>:
 806291e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8062922:	f000 b831 	b.w	8062988 <_close_r>
	...

08062928 <_write_r>:
 8062928:	b538      	push	{r3, r4, r5, lr}
 806292a:	4d07      	ldr	r5, [pc, #28]	; (8062948 <_write_r+0x20>)
 806292c:	4604      	mov	r4, r0
 806292e:	4608      	mov	r0, r1
 8062930:	4611      	mov	r1, r2
 8062932:	2200      	movs	r2, #0
 8062934:	602a      	str	r2, [r5, #0]
 8062936:	461a      	mov	r2, r3
 8062938:	f7eb fc79 	bl	804e22e <_write>
 806293c:	1c43      	adds	r3, r0, #1
 806293e:	d102      	bne.n	8062946 <_write_r+0x1e>
 8062940:	682b      	ldr	r3, [r5, #0]
 8062942:	b103      	cbz	r3, 8062946 <_write_r+0x1e>
 8062944:	6023      	str	r3, [r4, #0]
 8062946:	bd38      	pop	{r3, r4, r5, pc}
 8062948:	2001c390 	.word	0x2001c390

0806294c <__assert_func>:
 806294c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 806294e:	4614      	mov	r4, r2
 8062950:	461a      	mov	r2, r3
 8062952:	4b09      	ldr	r3, [pc, #36]	; (8062978 <__assert_func+0x2c>)
 8062954:	681b      	ldr	r3, [r3, #0]
 8062956:	4605      	mov	r5, r0
 8062958:	68d8      	ldr	r0, [r3, #12]
 806295a:	b14c      	cbz	r4, 8062970 <__assert_func+0x24>
 806295c:	4b07      	ldr	r3, [pc, #28]	; (806297c <__assert_func+0x30>)
 806295e:	9100      	str	r1, [sp, #0]
 8062960:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8062964:	4906      	ldr	r1, [pc, #24]	; (8062980 <__assert_func+0x34>)
 8062966:	462b      	mov	r3, r5
 8062968:	f000 f81e 	bl	80629a8 <fiprintf>
 806296c:	f000 f893 	bl	8062a96 <abort>
 8062970:	4b04      	ldr	r3, [pc, #16]	; (8062984 <__assert_func+0x38>)
 8062972:	461c      	mov	r4, r3
 8062974:	e7f3      	b.n	806295e <__assert_func+0x12>
 8062976:	bf00      	nop
 8062978:	20007cc0 	.word	0x20007cc0
 806297c:	0807d54d 	.word	0x0807d54d
 8062980:	0807d55a 	.word	0x0807d55a
 8062984:	0807d588 	.word	0x0807d588

08062988 <_close_r>:
 8062988:	b538      	push	{r3, r4, r5, lr}
 806298a:	4d06      	ldr	r5, [pc, #24]	; (80629a4 <_close_r+0x1c>)
 806298c:	2300      	movs	r3, #0
 806298e:	4604      	mov	r4, r0
 8062990:	4608      	mov	r0, r1
 8062992:	602b      	str	r3, [r5, #0]
 8062994:	f7eb fc67 	bl	804e266 <_close>
 8062998:	1c43      	adds	r3, r0, #1
 806299a:	d102      	bne.n	80629a2 <_close_r+0x1a>
 806299c:	682b      	ldr	r3, [r5, #0]
 806299e:	b103      	cbz	r3, 80629a2 <_close_r+0x1a>
 80629a0:	6023      	str	r3, [r4, #0]
 80629a2:	bd38      	pop	{r3, r4, r5, pc}
 80629a4:	2001c390 	.word	0x2001c390

080629a8 <fiprintf>:
 80629a8:	b40e      	push	{r1, r2, r3}
 80629aa:	b503      	push	{r0, r1, lr}
 80629ac:	4601      	mov	r1, r0
 80629ae:	ab03      	add	r3, sp, #12
 80629b0:	4805      	ldr	r0, [pc, #20]	; (80629c8 <fiprintf+0x20>)
 80629b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80629b6:	6800      	ldr	r0, [r0, #0]
 80629b8:	9301      	str	r3, [sp, #4]
 80629ba:	f7ff fdf9 	bl	80625b0 <_vfiprintf_r>
 80629be:	b002      	add	sp, #8
 80629c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80629c4:	b003      	add	sp, #12
 80629c6:	4770      	bx	lr
 80629c8:	20007cc0 	.word	0x20007cc0

080629cc <_fstat_r>:
 80629cc:	b538      	push	{r3, r4, r5, lr}
 80629ce:	4d07      	ldr	r5, [pc, #28]	; (80629ec <_fstat_r+0x20>)
 80629d0:	2300      	movs	r3, #0
 80629d2:	4604      	mov	r4, r0
 80629d4:	4608      	mov	r0, r1
 80629d6:	4611      	mov	r1, r2
 80629d8:	602b      	str	r3, [r5, #0]
 80629da:	f7eb fc50 	bl	804e27e <_fstat>
 80629de:	1c43      	adds	r3, r0, #1
 80629e0:	d102      	bne.n	80629e8 <_fstat_r+0x1c>
 80629e2:	682b      	ldr	r3, [r5, #0]
 80629e4:	b103      	cbz	r3, 80629e8 <_fstat_r+0x1c>
 80629e6:	6023      	str	r3, [r4, #0]
 80629e8:	bd38      	pop	{r3, r4, r5, pc}
 80629ea:	bf00      	nop
 80629ec:	2001c390 	.word	0x2001c390

080629f0 <_isatty_r>:
 80629f0:	b538      	push	{r3, r4, r5, lr}
 80629f2:	4d06      	ldr	r5, [pc, #24]	; (8062a0c <_isatty_r+0x1c>)
 80629f4:	2300      	movs	r3, #0
 80629f6:	4604      	mov	r4, r0
 80629f8:	4608      	mov	r0, r1
 80629fa:	602b      	str	r3, [r5, #0]
 80629fc:	f7eb fc4f 	bl	804e29e <_isatty>
 8062a00:	1c43      	adds	r3, r0, #1
 8062a02:	d102      	bne.n	8062a0a <_isatty_r+0x1a>
 8062a04:	682b      	ldr	r3, [r5, #0]
 8062a06:	b103      	cbz	r3, 8062a0a <_isatty_r+0x1a>
 8062a08:	6023      	str	r3, [r4, #0]
 8062a0a:	bd38      	pop	{r3, r4, r5, pc}
 8062a0c:	2001c390 	.word	0x2001c390

08062a10 <_lseek_r>:
 8062a10:	b538      	push	{r3, r4, r5, lr}
 8062a12:	4d07      	ldr	r5, [pc, #28]	; (8062a30 <_lseek_r+0x20>)
 8062a14:	4604      	mov	r4, r0
 8062a16:	4608      	mov	r0, r1
 8062a18:	4611      	mov	r1, r2
 8062a1a:	2200      	movs	r2, #0
 8062a1c:	602a      	str	r2, [r5, #0]
 8062a1e:	461a      	mov	r2, r3
 8062a20:	f7eb fc48 	bl	804e2b4 <_lseek>
 8062a24:	1c43      	adds	r3, r0, #1
 8062a26:	d102      	bne.n	8062a2e <_lseek_r+0x1e>
 8062a28:	682b      	ldr	r3, [r5, #0]
 8062a2a:	b103      	cbz	r3, 8062a2e <_lseek_r+0x1e>
 8062a2c:	6023      	str	r3, [r4, #0]
 8062a2e:	bd38      	pop	{r3, r4, r5, pc}
 8062a30:	2001c390 	.word	0x2001c390

08062a34 <__ascii_mbtowc>:
 8062a34:	b082      	sub	sp, #8
 8062a36:	b901      	cbnz	r1, 8062a3a <__ascii_mbtowc+0x6>
 8062a38:	a901      	add	r1, sp, #4
 8062a3a:	b142      	cbz	r2, 8062a4e <__ascii_mbtowc+0x1a>
 8062a3c:	b14b      	cbz	r3, 8062a52 <__ascii_mbtowc+0x1e>
 8062a3e:	7813      	ldrb	r3, [r2, #0]
 8062a40:	600b      	str	r3, [r1, #0]
 8062a42:	7812      	ldrb	r2, [r2, #0]
 8062a44:	1e10      	subs	r0, r2, #0
 8062a46:	bf18      	it	ne
 8062a48:	2001      	movne	r0, #1
 8062a4a:	b002      	add	sp, #8
 8062a4c:	4770      	bx	lr
 8062a4e:	4610      	mov	r0, r2
 8062a50:	e7fb      	b.n	8062a4a <__ascii_mbtowc+0x16>
 8062a52:	f06f 0001 	mvn.w	r0, #1
 8062a56:	e7f8      	b.n	8062a4a <__ascii_mbtowc+0x16>

08062a58 <_read_r>:
 8062a58:	b538      	push	{r3, r4, r5, lr}
 8062a5a:	4d07      	ldr	r5, [pc, #28]	; (8062a78 <_read_r+0x20>)
 8062a5c:	4604      	mov	r4, r0
 8062a5e:	4608      	mov	r0, r1
 8062a60:	4611      	mov	r1, r2
 8062a62:	2200      	movs	r2, #0
 8062a64:	602a      	str	r2, [r5, #0]
 8062a66:	461a      	mov	r2, r3
 8062a68:	f7eb fbc4 	bl	804e1f4 <_read>
 8062a6c:	1c43      	adds	r3, r0, #1
 8062a6e:	d102      	bne.n	8062a76 <_read_r+0x1e>
 8062a70:	682b      	ldr	r3, [r5, #0]
 8062a72:	b103      	cbz	r3, 8062a76 <_read_r+0x1e>
 8062a74:	6023      	str	r3, [r4, #0]
 8062a76:	bd38      	pop	{r3, r4, r5, pc}
 8062a78:	2001c390 	.word	0x2001c390

08062a7c <__ascii_wctomb>:
 8062a7c:	b149      	cbz	r1, 8062a92 <__ascii_wctomb+0x16>
 8062a7e:	2aff      	cmp	r2, #255	; 0xff
 8062a80:	bf85      	ittet	hi
 8062a82:	238a      	movhi	r3, #138	; 0x8a
 8062a84:	6003      	strhi	r3, [r0, #0]
 8062a86:	700a      	strbls	r2, [r1, #0]
 8062a88:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8062a8c:	bf98      	it	ls
 8062a8e:	2001      	movls	r0, #1
 8062a90:	4770      	bx	lr
 8062a92:	4608      	mov	r0, r1
 8062a94:	4770      	bx	lr

08062a96 <abort>:
 8062a96:	b508      	push	{r3, lr}
 8062a98:	2006      	movs	r0, #6
 8062a9a:	f000 f82b 	bl	8062af4 <raise>
 8062a9e:	2001      	movs	r0, #1
 8062aa0:	f7eb fb9e 	bl	804e1e0 <_exit>

08062aa4 <_raise_r>:
 8062aa4:	291f      	cmp	r1, #31
 8062aa6:	b538      	push	{r3, r4, r5, lr}
 8062aa8:	4604      	mov	r4, r0
 8062aaa:	460d      	mov	r5, r1
 8062aac:	d904      	bls.n	8062ab8 <_raise_r+0x14>
 8062aae:	2316      	movs	r3, #22
 8062ab0:	6003      	str	r3, [r0, #0]
 8062ab2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8062ab6:	bd38      	pop	{r3, r4, r5, pc}
 8062ab8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8062aba:	b112      	cbz	r2, 8062ac2 <_raise_r+0x1e>
 8062abc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8062ac0:	b94b      	cbnz	r3, 8062ad6 <_raise_r+0x32>
 8062ac2:	4620      	mov	r0, r4
 8062ac4:	f000 f830 	bl	8062b28 <_getpid_r>
 8062ac8:	462a      	mov	r2, r5
 8062aca:	4601      	mov	r1, r0
 8062acc:	4620      	mov	r0, r4
 8062ace:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8062ad2:	f000 b817 	b.w	8062b04 <_kill_r>
 8062ad6:	2b01      	cmp	r3, #1
 8062ad8:	d00a      	beq.n	8062af0 <_raise_r+0x4c>
 8062ada:	1c59      	adds	r1, r3, #1
 8062adc:	d103      	bne.n	8062ae6 <_raise_r+0x42>
 8062ade:	2316      	movs	r3, #22
 8062ae0:	6003      	str	r3, [r0, #0]
 8062ae2:	2001      	movs	r0, #1
 8062ae4:	e7e7      	b.n	8062ab6 <_raise_r+0x12>
 8062ae6:	2400      	movs	r4, #0
 8062ae8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8062aec:	4628      	mov	r0, r5
 8062aee:	4798      	blx	r3
 8062af0:	2000      	movs	r0, #0
 8062af2:	e7e0      	b.n	8062ab6 <_raise_r+0x12>

08062af4 <raise>:
 8062af4:	4b02      	ldr	r3, [pc, #8]	; (8062b00 <raise+0xc>)
 8062af6:	4601      	mov	r1, r0
 8062af8:	6818      	ldr	r0, [r3, #0]
 8062afa:	f7ff bfd3 	b.w	8062aa4 <_raise_r>
 8062afe:	bf00      	nop
 8062b00:	20007cc0 	.word	0x20007cc0

08062b04 <_kill_r>:
 8062b04:	b538      	push	{r3, r4, r5, lr}
 8062b06:	4d07      	ldr	r5, [pc, #28]	; (8062b24 <_kill_r+0x20>)
 8062b08:	2300      	movs	r3, #0
 8062b0a:	4604      	mov	r4, r0
 8062b0c:	4608      	mov	r0, r1
 8062b0e:	4611      	mov	r1, r2
 8062b10:	602b      	str	r3, [r5, #0]
 8062b12:	f7eb fb55 	bl	804e1c0 <_kill>
 8062b16:	1c43      	adds	r3, r0, #1
 8062b18:	d102      	bne.n	8062b20 <_kill_r+0x1c>
 8062b1a:	682b      	ldr	r3, [r5, #0]
 8062b1c:	b103      	cbz	r3, 8062b20 <_kill_r+0x1c>
 8062b1e:	6023      	str	r3, [r4, #0]
 8062b20:	bd38      	pop	{r3, r4, r5, pc}
 8062b22:	bf00      	nop
 8062b24:	2001c390 	.word	0x2001c390

08062b28 <_getpid_r>:
 8062b28:	f7eb bb42 	b.w	804e1b0 <_getpid>

08062b2c <cosf>:
 8062b2c:	ee10 3a10 	vmov	r3, s0
 8062b30:	b507      	push	{r0, r1, r2, lr}
 8062b32:	4a1c      	ldr	r2, [pc, #112]	; (8062ba4 <cosf+0x78>)
 8062b34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8062b38:	4293      	cmp	r3, r2
 8062b3a:	dc04      	bgt.n	8062b46 <cosf+0x1a>
 8062b3c:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8062ba8 <cosf+0x7c>
 8062b40:	f001 fa1a 	bl	8063f78 <__kernel_cosf>
 8062b44:	e004      	b.n	8062b50 <cosf+0x24>
 8062b46:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8062b4a:	db04      	blt.n	8062b56 <cosf+0x2a>
 8062b4c:	ee30 0a40 	vsub.f32	s0, s0, s0
 8062b50:	b003      	add	sp, #12
 8062b52:	f85d fb04 	ldr.w	pc, [sp], #4
 8062b56:	4668      	mov	r0, sp
 8062b58:	f001 f8ce 	bl	8063cf8 <__ieee754_rem_pio2f>
 8062b5c:	f000 0003 	and.w	r0, r0, #3
 8062b60:	2801      	cmp	r0, #1
 8062b62:	d007      	beq.n	8062b74 <cosf+0x48>
 8062b64:	2802      	cmp	r0, #2
 8062b66:	d00e      	beq.n	8062b86 <cosf+0x5a>
 8062b68:	b9a0      	cbnz	r0, 8062b94 <cosf+0x68>
 8062b6a:	eddd 0a01 	vldr	s1, [sp, #4]
 8062b6e:	ed9d 0a00 	vldr	s0, [sp]
 8062b72:	e7e5      	b.n	8062b40 <cosf+0x14>
 8062b74:	eddd 0a01 	vldr	s1, [sp, #4]
 8062b78:	ed9d 0a00 	vldr	s0, [sp]
 8062b7c:	f001 fce6 	bl	806454c <__kernel_sinf>
 8062b80:	eeb1 0a40 	vneg.f32	s0, s0
 8062b84:	e7e4      	b.n	8062b50 <cosf+0x24>
 8062b86:	eddd 0a01 	vldr	s1, [sp, #4]
 8062b8a:	ed9d 0a00 	vldr	s0, [sp]
 8062b8e:	f001 f9f3 	bl	8063f78 <__kernel_cosf>
 8062b92:	e7f5      	b.n	8062b80 <cosf+0x54>
 8062b94:	eddd 0a01 	vldr	s1, [sp, #4]
 8062b98:	ed9d 0a00 	vldr	s0, [sp]
 8062b9c:	2001      	movs	r0, #1
 8062b9e:	f001 fcd5 	bl	806454c <__kernel_sinf>
 8062ba2:	e7d5      	b.n	8062b50 <cosf+0x24>
 8062ba4:	3f490fd8 	.word	0x3f490fd8
 8062ba8:	00000000 	.word	0x00000000

08062bac <sinf>:
 8062bac:	ee10 3a10 	vmov	r3, s0
 8062bb0:	b507      	push	{r0, r1, r2, lr}
 8062bb2:	4a1d      	ldr	r2, [pc, #116]	; (8062c28 <sinf+0x7c>)
 8062bb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8062bb8:	4293      	cmp	r3, r2
 8062bba:	dc05      	bgt.n	8062bc8 <sinf+0x1c>
 8062bbc:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8062c2c <sinf+0x80>
 8062bc0:	2000      	movs	r0, #0
 8062bc2:	f001 fcc3 	bl	806454c <__kernel_sinf>
 8062bc6:	e004      	b.n	8062bd2 <sinf+0x26>
 8062bc8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8062bcc:	db04      	blt.n	8062bd8 <sinf+0x2c>
 8062bce:	ee30 0a40 	vsub.f32	s0, s0, s0
 8062bd2:	b003      	add	sp, #12
 8062bd4:	f85d fb04 	ldr.w	pc, [sp], #4
 8062bd8:	4668      	mov	r0, sp
 8062bda:	f001 f88d 	bl	8063cf8 <__ieee754_rem_pio2f>
 8062bde:	f000 0003 	and.w	r0, r0, #3
 8062be2:	2801      	cmp	r0, #1
 8062be4:	d008      	beq.n	8062bf8 <sinf+0x4c>
 8062be6:	2802      	cmp	r0, #2
 8062be8:	d00d      	beq.n	8062c06 <sinf+0x5a>
 8062bea:	b9b0      	cbnz	r0, 8062c1a <sinf+0x6e>
 8062bec:	eddd 0a01 	vldr	s1, [sp, #4]
 8062bf0:	ed9d 0a00 	vldr	s0, [sp]
 8062bf4:	2001      	movs	r0, #1
 8062bf6:	e7e4      	b.n	8062bc2 <sinf+0x16>
 8062bf8:	eddd 0a01 	vldr	s1, [sp, #4]
 8062bfc:	ed9d 0a00 	vldr	s0, [sp]
 8062c00:	f001 f9ba 	bl	8063f78 <__kernel_cosf>
 8062c04:	e7e5      	b.n	8062bd2 <sinf+0x26>
 8062c06:	eddd 0a01 	vldr	s1, [sp, #4]
 8062c0a:	ed9d 0a00 	vldr	s0, [sp]
 8062c0e:	2001      	movs	r0, #1
 8062c10:	f001 fc9c 	bl	806454c <__kernel_sinf>
 8062c14:	eeb1 0a40 	vneg.f32	s0, s0
 8062c18:	e7db      	b.n	8062bd2 <sinf+0x26>
 8062c1a:	eddd 0a01 	vldr	s1, [sp, #4]
 8062c1e:	ed9d 0a00 	vldr	s0, [sp]
 8062c22:	f001 f9a9 	bl	8063f78 <__kernel_cosf>
 8062c26:	e7f5      	b.n	8062c14 <sinf+0x68>
 8062c28:	3f490fd8 	.word	0x3f490fd8
 8062c2c:	00000000 	.word	0x00000000

08062c30 <pow>:
 8062c30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8062c34:	ec59 8b10 	vmov	r8, r9, d0
 8062c38:	ec57 6b11 	vmov	r6, r7, d1
 8062c3c:	f000 f900 	bl	8062e40 <__ieee754_pow>
 8062c40:	4b4e      	ldr	r3, [pc, #312]	; (8062d7c <pow+0x14c>)
 8062c42:	f993 3000 	ldrsb.w	r3, [r3]
 8062c46:	3301      	adds	r3, #1
 8062c48:	ec55 4b10 	vmov	r4, r5, d0
 8062c4c:	d015      	beq.n	8062c7a <pow+0x4a>
 8062c4e:	4632      	mov	r2, r6
 8062c50:	463b      	mov	r3, r7
 8062c52:	4630      	mov	r0, r6
 8062c54:	4639      	mov	r1, r7
 8062c56:	f7dd ff69 	bl	8040b2c <__aeabi_dcmpun>
 8062c5a:	b970      	cbnz	r0, 8062c7a <pow+0x4a>
 8062c5c:	4642      	mov	r2, r8
 8062c5e:	464b      	mov	r3, r9
 8062c60:	4640      	mov	r0, r8
 8062c62:	4649      	mov	r1, r9
 8062c64:	f7dd ff62 	bl	8040b2c <__aeabi_dcmpun>
 8062c68:	2200      	movs	r2, #0
 8062c6a:	2300      	movs	r3, #0
 8062c6c:	b148      	cbz	r0, 8062c82 <pow+0x52>
 8062c6e:	4630      	mov	r0, r6
 8062c70:	4639      	mov	r1, r7
 8062c72:	f7dd ff29 	bl	8040ac8 <__aeabi_dcmpeq>
 8062c76:	2800      	cmp	r0, #0
 8062c78:	d17d      	bne.n	8062d76 <pow+0x146>
 8062c7a:	ec45 4b10 	vmov	d0, r4, r5
 8062c7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8062c82:	4640      	mov	r0, r8
 8062c84:	4649      	mov	r1, r9
 8062c86:	f7dd ff1f 	bl	8040ac8 <__aeabi_dcmpeq>
 8062c8a:	b1e0      	cbz	r0, 8062cc6 <pow+0x96>
 8062c8c:	2200      	movs	r2, #0
 8062c8e:	2300      	movs	r3, #0
 8062c90:	4630      	mov	r0, r6
 8062c92:	4639      	mov	r1, r7
 8062c94:	f7dd ff18 	bl	8040ac8 <__aeabi_dcmpeq>
 8062c98:	2800      	cmp	r0, #0
 8062c9a:	d16c      	bne.n	8062d76 <pow+0x146>
 8062c9c:	ec47 6b10 	vmov	d0, r6, r7
 8062ca0:	f001 fca5 	bl	80645ee <finite>
 8062ca4:	2800      	cmp	r0, #0
 8062ca6:	d0e8      	beq.n	8062c7a <pow+0x4a>
 8062ca8:	2200      	movs	r2, #0
 8062caa:	2300      	movs	r3, #0
 8062cac:	4630      	mov	r0, r6
 8062cae:	4639      	mov	r1, r7
 8062cb0:	f7dd ff14 	bl	8040adc <__aeabi_dcmplt>
 8062cb4:	2800      	cmp	r0, #0
 8062cb6:	d0e0      	beq.n	8062c7a <pow+0x4a>
 8062cb8:	f7fd f948 	bl	805ff4c <__errno>
 8062cbc:	2321      	movs	r3, #33	; 0x21
 8062cbe:	6003      	str	r3, [r0, #0]
 8062cc0:	2400      	movs	r4, #0
 8062cc2:	4d2f      	ldr	r5, [pc, #188]	; (8062d80 <pow+0x150>)
 8062cc4:	e7d9      	b.n	8062c7a <pow+0x4a>
 8062cc6:	ec45 4b10 	vmov	d0, r4, r5
 8062cca:	f001 fc90 	bl	80645ee <finite>
 8062cce:	bbb8      	cbnz	r0, 8062d40 <pow+0x110>
 8062cd0:	ec49 8b10 	vmov	d0, r8, r9
 8062cd4:	f001 fc8b 	bl	80645ee <finite>
 8062cd8:	b390      	cbz	r0, 8062d40 <pow+0x110>
 8062cda:	ec47 6b10 	vmov	d0, r6, r7
 8062cde:	f001 fc86 	bl	80645ee <finite>
 8062ce2:	b368      	cbz	r0, 8062d40 <pow+0x110>
 8062ce4:	4622      	mov	r2, r4
 8062ce6:	462b      	mov	r3, r5
 8062ce8:	4620      	mov	r0, r4
 8062cea:	4629      	mov	r1, r5
 8062cec:	f7dd ff1e 	bl	8040b2c <__aeabi_dcmpun>
 8062cf0:	b160      	cbz	r0, 8062d0c <pow+0xdc>
 8062cf2:	f7fd f92b 	bl	805ff4c <__errno>
 8062cf6:	2321      	movs	r3, #33	; 0x21
 8062cf8:	6003      	str	r3, [r0, #0]
 8062cfa:	2200      	movs	r2, #0
 8062cfc:	2300      	movs	r3, #0
 8062cfe:	4610      	mov	r0, r2
 8062d00:	4619      	mov	r1, r3
 8062d02:	f7dd fda3 	bl	804084c <__aeabi_ddiv>
 8062d06:	4604      	mov	r4, r0
 8062d08:	460d      	mov	r5, r1
 8062d0a:	e7b6      	b.n	8062c7a <pow+0x4a>
 8062d0c:	f7fd f91e 	bl	805ff4c <__errno>
 8062d10:	2322      	movs	r3, #34	; 0x22
 8062d12:	6003      	str	r3, [r0, #0]
 8062d14:	2200      	movs	r2, #0
 8062d16:	2300      	movs	r3, #0
 8062d18:	4640      	mov	r0, r8
 8062d1a:	4649      	mov	r1, r9
 8062d1c:	f7dd fede 	bl	8040adc <__aeabi_dcmplt>
 8062d20:	2400      	movs	r4, #0
 8062d22:	b158      	cbz	r0, 8062d3c <pow+0x10c>
 8062d24:	ec47 6b10 	vmov	d0, r6, r7
 8062d28:	f001 fc76 	bl	8064618 <rint>
 8062d2c:	4632      	mov	r2, r6
 8062d2e:	ec51 0b10 	vmov	r0, r1, d0
 8062d32:	463b      	mov	r3, r7
 8062d34:	f7dd fec8 	bl	8040ac8 <__aeabi_dcmpeq>
 8062d38:	2800      	cmp	r0, #0
 8062d3a:	d0c2      	beq.n	8062cc2 <pow+0x92>
 8062d3c:	4d11      	ldr	r5, [pc, #68]	; (8062d84 <pow+0x154>)
 8062d3e:	e79c      	b.n	8062c7a <pow+0x4a>
 8062d40:	2200      	movs	r2, #0
 8062d42:	2300      	movs	r3, #0
 8062d44:	4620      	mov	r0, r4
 8062d46:	4629      	mov	r1, r5
 8062d48:	f7dd febe 	bl	8040ac8 <__aeabi_dcmpeq>
 8062d4c:	2800      	cmp	r0, #0
 8062d4e:	d094      	beq.n	8062c7a <pow+0x4a>
 8062d50:	ec49 8b10 	vmov	d0, r8, r9
 8062d54:	f001 fc4b 	bl	80645ee <finite>
 8062d58:	2800      	cmp	r0, #0
 8062d5a:	d08e      	beq.n	8062c7a <pow+0x4a>
 8062d5c:	ec47 6b10 	vmov	d0, r6, r7
 8062d60:	f001 fc45 	bl	80645ee <finite>
 8062d64:	2800      	cmp	r0, #0
 8062d66:	d088      	beq.n	8062c7a <pow+0x4a>
 8062d68:	f7fd f8f0 	bl	805ff4c <__errno>
 8062d6c:	2322      	movs	r3, #34	; 0x22
 8062d6e:	6003      	str	r3, [r0, #0]
 8062d70:	2400      	movs	r4, #0
 8062d72:	2500      	movs	r5, #0
 8062d74:	e781      	b.n	8062c7a <pow+0x4a>
 8062d76:	4d04      	ldr	r5, [pc, #16]	; (8062d88 <pow+0x158>)
 8062d78:	2400      	movs	r4, #0
 8062d7a:	e77e      	b.n	8062c7a <pow+0x4a>
 8062d7c:	20007e90 	.word	0x20007e90
 8062d80:	fff00000 	.word	0xfff00000
 8062d84:	7ff00000 	.word	0x7ff00000
 8062d88:	3ff00000 	.word	0x3ff00000

08062d8c <asinf>:
 8062d8c:	b508      	push	{r3, lr}
 8062d8e:	ed2d 8b02 	vpush	{d8}
 8062d92:	eeb0 8a40 	vmov.f32	s16, s0
 8062d96:	f000 fe29 	bl	80639ec <__ieee754_asinf>
 8062d9a:	4b13      	ldr	r3, [pc, #76]	; (8062de8 <asinf+0x5c>)
 8062d9c:	f993 3000 	ldrsb.w	r3, [r3]
 8062da0:	3301      	adds	r3, #1
 8062da2:	eef0 8a40 	vmov.f32	s17, s0
 8062da6:	d01a      	beq.n	8062dde <asinf+0x52>
 8062da8:	eeb4 8a48 	vcmp.f32	s16, s16
 8062dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8062db0:	d615      	bvs.n	8062dde <asinf+0x52>
 8062db2:	eeb0 0a48 	vmov.f32	s0, s16
 8062db6:	f001 fe15 	bl	80649e4 <fabsf>
 8062dba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8062dbe:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8062dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8062dc6:	dd0a      	ble.n	8062dde <asinf+0x52>
 8062dc8:	f7fd f8c0 	bl	805ff4c <__errno>
 8062dcc:	ecbd 8b02 	vpop	{d8}
 8062dd0:	2321      	movs	r3, #33	; 0x21
 8062dd2:	6003      	str	r3, [r0, #0]
 8062dd4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8062dd8:	4804      	ldr	r0, [pc, #16]	; (8062dec <asinf+0x60>)
 8062dda:	f001 be4d 	b.w	8064a78 <nanf>
 8062dde:	eeb0 0a68 	vmov.f32	s0, s17
 8062de2:	ecbd 8b02 	vpop	{d8}
 8062de6:	bd08      	pop	{r3, pc}
 8062de8:	20007e90 	.word	0x20007e90
 8062dec:	0807d588 	.word	0x0807d588

08062df0 <atan2f>:
 8062df0:	f000 bee2 	b.w	8063bb8 <__ieee754_atan2f>

08062df4 <sqrtf>:
 8062df4:	b508      	push	{r3, lr}
 8062df6:	ed2d 8b02 	vpush	{d8}
 8062dfa:	eeb0 8a40 	vmov.f32	s16, s0
 8062dfe:	f001 f8b7 	bl	8063f70 <__ieee754_sqrtf>
 8062e02:	4b0d      	ldr	r3, [pc, #52]	; (8062e38 <sqrtf+0x44>)
 8062e04:	f993 3000 	ldrsb.w	r3, [r3]
 8062e08:	3301      	adds	r3, #1
 8062e0a:	d011      	beq.n	8062e30 <sqrtf+0x3c>
 8062e0c:	eeb4 8a48 	vcmp.f32	s16, s16
 8062e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8062e14:	d60c      	bvs.n	8062e30 <sqrtf+0x3c>
 8062e16:	eddf 8a09 	vldr	s17, [pc, #36]	; 8062e3c <sqrtf+0x48>
 8062e1a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8062e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8062e22:	d505      	bpl.n	8062e30 <sqrtf+0x3c>
 8062e24:	f7fd f892 	bl	805ff4c <__errno>
 8062e28:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8062e2c:	2321      	movs	r3, #33	; 0x21
 8062e2e:	6003      	str	r3, [r0, #0]
 8062e30:	ecbd 8b02 	vpop	{d8}
 8062e34:	bd08      	pop	{r3, pc}
 8062e36:	bf00      	nop
 8062e38:	20007e90 	.word	0x20007e90
 8062e3c:	00000000 	.word	0x00000000

08062e40 <__ieee754_pow>:
 8062e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8062e44:	ed2d 8b06 	vpush	{d8-d10}
 8062e48:	b08d      	sub	sp, #52	; 0x34
 8062e4a:	ed8d 1b02 	vstr	d1, [sp, #8]
 8062e4e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8062e52:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8062e56:	ea56 0100 	orrs.w	r1, r6, r0
 8062e5a:	ec53 2b10 	vmov	r2, r3, d0
 8062e5e:	f000 84d1 	beq.w	8063804 <__ieee754_pow+0x9c4>
 8062e62:	497f      	ldr	r1, [pc, #508]	; (8063060 <__ieee754_pow+0x220>)
 8062e64:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8062e68:	428c      	cmp	r4, r1
 8062e6a:	ee10 8a10 	vmov	r8, s0
 8062e6e:	4699      	mov	r9, r3
 8062e70:	dc09      	bgt.n	8062e86 <__ieee754_pow+0x46>
 8062e72:	d103      	bne.n	8062e7c <__ieee754_pow+0x3c>
 8062e74:	b97a      	cbnz	r2, 8062e96 <__ieee754_pow+0x56>
 8062e76:	42a6      	cmp	r6, r4
 8062e78:	dd02      	ble.n	8062e80 <__ieee754_pow+0x40>
 8062e7a:	e00c      	b.n	8062e96 <__ieee754_pow+0x56>
 8062e7c:	428e      	cmp	r6, r1
 8062e7e:	dc02      	bgt.n	8062e86 <__ieee754_pow+0x46>
 8062e80:	428e      	cmp	r6, r1
 8062e82:	d110      	bne.n	8062ea6 <__ieee754_pow+0x66>
 8062e84:	b178      	cbz	r0, 8062ea6 <__ieee754_pow+0x66>
 8062e86:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8062e8a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8062e8e:	ea54 0308 	orrs.w	r3, r4, r8
 8062e92:	f000 84b7 	beq.w	8063804 <__ieee754_pow+0x9c4>
 8062e96:	4873      	ldr	r0, [pc, #460]	; (8063064 <__ieee754_pow+0x224>)
 8062e98:	b00d      	add	sp, #52	; 0x34
 8062e9a:	ecbd 8b06 	vpop	{d8-d10}
 8062e9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8062ea2:	f001 bbb1 	b.w	8064608 <nan>
 8062ea6:	f1b9 0f00 	cmp.w	r9, #0
 8062eaa:	da36      	bge.n	8062f1a <__ieee754_pow+0xda>
 8062eac:	496e      	ldr	r1, [pc, #440]	; (8063068 <__ieee754_pow+0x228>)
 8062eae:	428e      	cmp	r6, r1
 8062eb0:	dc51      	bgt.n	8062f56 <__ieee754_pow+0x116>
 8062eb2:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8062eb6:	428e      	cmp	r6, r1
 8062eb8:	f340 84af 	ble.w	806381a <__ieee754_pow+0x9da>
 8062ebc:	1531      	asrs	r1, r6, #20
 8062ebe:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8062ec2:	2914      	cmp	r1, #20
 8062ec4:	dd0f      	ble.n	8062ee6 <__ieee754_pow+0xa6>
 8062ec6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8062eca:	fa20 fc01 	lsr.w	ip, r0, r1
 8062ece:	fa0c f101 	lsl.w	r1, ip, r1
 8062ed2:	4281      	cmp	r1, r0
 8062ed4:	f040 84a1 	bne.w	806381a <__ieee754_pow+0x9da>
 8062ed8:	f00c 0c01 	and.w	ip, ip, #1
 8062edc:	f1cc 0102 	rsb	r1, ip, #2
 8062ee0:	9100      	str	r1, [sp, #0]
 8062ee2:	b180      	cbz	r0, 8062f06 <__ieee754_pow+0xc6>
 8062ee4:	e059      	b.n	8062f9a <__ieee754_pow+0x15a>
 8062ee6:	2800      	cmp	r0, #0
 8062ee8:	d155      	bne.n	8062f96 <__ieee754_pow+0x156>
 8062eea:	f1c1 0114 	rsb	r1, r1, #20
 8062eee:	fa46 fc01 	asr.w	ip, r6, r1
 8062ef2:	fa0c f101 	lsl.w	r1, ip, r1
 8062ef6:	42b1      	cmp	r1, r6
 8062ef8:	f040 848c 	bne.w	8063814 <__ieee754_pow+0x9d4>
 8062efc:	f00c 0c01 	and.w	ip, ip, #1
 8062f00:	f1cc 0102 	rsb	r1, ip, #2
 8062f04:	9100      	str	r1, [sp, #0]
 8062f06:	4959      	ldr	r1, [pc, #356]	; (806306c <__ieee754_pow+0x22c>)
 8062f08:	428e      	cmp	r6, r1
 8062f0a:	d12d      	bne.n	8062f68 <__ieee754_pow+0x128>
 8062f0c:	2f00      	cmp	r7, #0
 8062f0e:	da79      	bge.n	8063004 <__ieee754_pow+0x1c4>
 8062f10:	4956      	ldr	r1, [pc, #344]	; (806306c <__ieee754_pow+0x22c>)
 8062f12:	2000      	movs	r0, #0
 8062f14:	f7dd fc9a 	bl	804084c <__aeabi_ddiv>
 8062f18:	e016      	b.n	8062f48 <__ieee754_pow+0x108>
 8062f1a:	2100      	movs	r1, #0
 8062f1c:	9100      	str	r1, [sp, #0]
 8062f1e:	2800      	cmp	r0, #0
 8062f20:	d13b      	bne.n	8062f9a <__ieee754_pow+0x15a>
 8062f22:	494f      	ldr	r1, [pc, #316]	; (8063060 <__ieee754_pow+0x220>)
 8062f24:	428e      	cmp	r6, r1
 8062f26:	d1ee      	bne.n	8062f06 <__ieee754_pow+0xc6>
 8062f28:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8062f2c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8062f30:	ea53 0308 	orrs.w	r3, r3, r8
 8062f34:	f000 8466 	beq.w	8063804 <__ieee754_pow+0x9c4>
 8062f38:	4b4d      	ldr	r3, [pc, #308]	; (8063070 <__ieee754_pow+0x230>)
 8062f3a:	429c      	cmp	r4, r3
 8062f3c:	dd0d      	ble.n	8062f5a <__ieee754_pow+0x11a>
 8062f3e:	2f00      	cmp	r7, #0
 8062f40:	f280 8464 	bge.w	806380c <__ieee754_pow+0x9cc>
 8062f44:	2000      	movs	r0, #0
 8062f46:	2100      	movs	r1, #0
 8062f48:	ec41 0b10 	vmov	d0, r0, r1
 8062f4c:	b00d      	add	sp, #52	; 0x34
 8062f4e:	ecbd 8b06 	vpop	{d8-d10}
 8062f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8062f56:	2102      	movs	r1, #2
 8062f58:	e7e0      	b.n	8062f1c <__ieee754_pow+0xdc>
 8062f5a:	2f00      	cmp	r7, #0
 8062f5c:	daf2      	bge.n	8062f44 <__ieee754_pow+0x104>
 8062f5e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8062f62:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8062f66:	e7ef      	b.n	8062f48 <__ieee754_pow+0x108>
 8062f68:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8062f6c:	d104      	bne.n	8062f78 <__ieee754_pow+0x138>
 8062f6e:	4610      	mov	r0, r2
 8062f70:	4619      	mov	r1, r3
 8062f72:	f7dd fb41 	bl	80405f8 <__aeabi_dmul>
 8062f76:	e7e7      	b.n	8062f48 <__ieee754_pow+0x108>
 8062f78:	493e      	ldr	r1, [pc, #248]	; (8063074 <__ieee754_pow+0x234>)
 8062f7a:	428f      	cmp	r7, r1
 8062f7c:	d10d      	bne.n	8062f9a <__ieee754_pow+0x15a>
 8062f7e:	f1b9 0f00 	cmp.w	r9, #0
 8062f82:	db0a      	blt.n	8062f9a <__ieee754_pow+0x15a>
 8062f84:	ec43 2b10 	vmov	d0, r2, r3
 8062f88:	b00d      	add	sp, #52	; 0x34
 8062f8a:	ecbd 8b06 	vpop	{d8-d10}
 8062f8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8062f92:	f000 bc77 	b.w	8063884 <__ieee754_sqrt>
 8062f96:	2100      	movs	r1, #0
 8062f98:	9100      	str	r1, [sp, #0]
 8062f9a:	ec43 2b10 	vmov	d0, r2, r3
 8062f9e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8062fa2:	f001 fb1b 	bl	80645dc <fabs>
 8062fa6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8062faa:	ec51 0b10 	vmov	r0, r1, d0
 8062fae:	f1b8 0f00 	cmp.w	r8, #0
 8062fb2:	d12a      	bne.n	806300a <__ieee754_pow+0x1ca>
 8062fb4:	b12c      	cbz	r4, 8062fc2 <__ieee754_pow+0x182>
 8062fb6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 806306c <__ieee754_pow+0x22c>
 8062fba:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8062fbe:	45e6      	cmp	lr, ip
 8062fc0:	d123      	bne.n	806300a <__ieee754_pow+0x1ca>
 8062fc2:	2f00      	cmp	r7, #0
 8062fc4:	da05      	bge.n	8062fd2 <__ieee754_pow+0x192>
 8062fc6:	4602      	mov	r2, r0
 8062fc8:	460b      	mov	r3, r1
 8062fca:	2000      	movs	r0, #0
 8062fcc:	4927      	ldr	r1, [pc, #156]	; (806306c <__ieee754_pow+0x22c>)
 8062fce:	f7dd fc3d 	bl	804084c <__aeabi_ddiv>
 8062fd2:	f1b9 0f00 	cmp.w	r9, #0
 8062fd6:	dab7      	bge.n	8062f48 <__ieee754_pow+0x108>
 8062fd8:	9b00      	ldr	r3, [sp, #0]
 8062fda:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8062fde:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8062fe2:	4323      	orrs	r3, r4
 8062fe4:	d108      	bne.n	8062ff8 <__ieee754_pow+0x1b8>
 8062fe6:	4602      	mov	r2, r0
 8062fe8:	460b      	mov	r3, r1
 8062fea:	4610      	mov	r0, r2
 8062fec:	4619      	mov	r1, r3
 8062fee:	f7dd f94b 	bl	8040288 <__aeabi_dsub>
 8062ff2:	4602      	mov	r2, r0
 8062ff4:	460b      	mov	r3, r1
 8062ff6:	e78d      	b.n	8062f14 <__ieee754_pow+0xd4>
 8062ff8:	9b00      	ldr	r3, [sp, #0]
 8062ffa:	2b01      	cmp	r3, #1
 8062ffc:	d1a4      	bne.n	8062f48 <__ieee754_pow+0x108>
 8062ffe:	4602      	mov	r2, r0
 8063000:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8063004:	4610      	mov	r0, r2
 8063006:	4619      	mov	r1, r3
 8063008:	e79e      	b.n	8062f48 <__ieee754_pow+0x108>
 806300a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 806300e:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 8063012:	950a      	str	r5, [sp, #40]	; 0x28
 8063014:	9d00      	ldr	r5, [sp, #0]
 8063016:	46ac      	mov	ip, r5
 8063018:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 806301a:	ea5c 0505 	orrs.w	r5, ip, r5
 806301e:	d0e4      	beq.n	8062fea <__ieee754_pow+0x1aa>
 8063020:	4b15      	ldr	r3, [pc, #84]	; (8063078 <__ieee754_pow+0x238>)
 8063022:	429e      	cmp	r6, r3
 8063024:	f340 80fc 	ble.w	8063220 <__ieee754_pow+0x3e0>
 8063028:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 806302c:	429e      	cmp	r6, r3
 806302e:	4b10      	ldr	r3, [pc, #64]	; (8063070 <__ieee754_pow+0x230>)
 8063030:	dd07      	ble.n	8063042 <__ieee754_pow+0x202>
 8063032:	429c      	cmp	r4, r3
 8063034:	dc0a      	bgt.n	806304c <__ieee754_pow+0x20c>
 8063036:	2f00      	cmp	r7, #0
 8063038:	da84      	bge.n	8062f44 <__ieee754_pow+0x104>
 806303a:	a307      	add	r3, pc, #28	; (adr r3, 8063058 <__ieee754_pow+0x218>)
 806303c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8063040:	e795      	b.n	8062f6e <__ieee754_pow+0x12e>
 8063042:	429c      	cmp	r4, r3
 8063044:	dbf7      	blt.n	8063036 <__ieee754_pow+0x1f6>
 8063046:	4b09      	ldr	r3, [pc, #36]	; (806306c <__ieee754_pow+0x22c>)
 8063048:	429c      	cmp	r4, r3
 806304a:	dd17      	ble.n	806307c <__ieee754_pow+0x23c>
 806304c:	2f00      	cmp	r7, #0
 806304e:	dcf4      	bgt.n	806303a <__ieee754_pow+0x1fa>
 8063050:	e778      	b.n	8062f44 <__ieee754_pow+0x104>
 8063052:	bf00      	nop
 8063054:	f3af 8000 	nop.w
 8063058:	8800759c 	.word	0x8800759c
 806305c:	7e37e43c 	.word	0x7e37e43c
 8063060:	7ff00000 	.word	0x7ff00000
 8063064:	0807d588 	.word	0x0807d588
 8063068:	433fffff 	.word	0x433fffff
 806306c:	3ff00000 	.word	0x3ff00000
 8063070:	3fefffff 	.word	0x3fefffff
 8063074:	3fe00000 	.word	0x3fe00000
 8063078:	41e00000 	.word	0x41e00000
 806307c:	4b64      	ldr	r3, [pc, #400]	; (8063210 <__ieee754_pow+0x3d0>)
 806307e:	2200      	movs	r2, #0
 8063080:	f7dd f902 	bl	8040288 <__aeabi_dsub>
 8063084:	a356      	add	r3, pc, #344	; (adr r3, 80631e0 <__ieee754_pow+0x3a0>)
 8063086:	e9d3 2300 	ldrd	r2, r3, [r3]
 806308a:	4604      	mov	r4, r0
 806308c:	460d      	mov	r5, r1
 806308e:	f7dd fab3 	bl	80405f8 <__aeabi_dmul>
 8063092:	a355      	add	r3, pc, #340	; (adr r3, 80631e8 <__ieee754_pow+0x3a8>)
 8063094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8063098:	4606      	mov	r6, r0
 806309a:	460f      	mov	r7, r1
 806309c:	4620      	mov	r0, r4
 806309e:	4629      	mov	r1, r5
 80630a0:	f7dd faaa 	bl	80405f8 <__aeabi_dmul>
 80630a4:	4b5b      	ldr	r3, [pc, #364]	; (8063214 <__ieee754_pow+0x3d4>)
 80630a6:	4682      	mov	sl, r0
 80630a8:	468b      	mov	fp, r1
 80630aa:	2200      	movs	r2, #0
 80630ac:	4620      	mov	r0, r4
 80630ae:	4629      	mov	r1, r5
 80630b0:	f7dd faa2 	bl	80405f8 <__aeabi_dmul>
 80630b4:	4602      	mov	r2, r0
 80630b6:	460b      	mov	r3, r1
 80630b8:	a14d      	add	r1, pc, #308	; (adr r1, 80631f0 <__ieee754_pow+0x3b0>)
 80630ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80630be:	f7dd f8e3 	bl	8040288 <__aeabi_dsub>
 80630c2:	4622      	mov	r2, r4
 80630c4:	462b      	mov	r3, r5
 80630c6:	f7dd fa97 	bl	80405f8 <__aeabi_dmul>
 80630ca:	4602      	mov	r2, r0
 80630cc:	460b      	mov	r3, r1
 80630ce:	2000      	movs	r0, #0
 80630d0:	4951      	ldr	r1, [pc, #324]	; (8063218 <__ieee754_pow+0x3d8>)
 80630d2:	f7dd f8d9 	bl	8040288 <__aeabi_dsub>
 80630d6:	4622      	mov	r2, r4
 80630d8:	4680      	mov	r8, r0
 80630da:	4689      	mov	r9, r1
 80630dc:	462b      	mov	r3, r5
 80630de:	4620      	mov	r0, r4
 80630e0:	4629      	mov	r1, r5
 80630e2:	f7dd fa89 	bl	80405f8 <__aeabi_dmul>
 80630e6:	4602      	mov	r2, r0
 80630e8:	460b      	mov	r3, r1
 80630ea:	4640      	mov	r0, r8
 80630ec:	4649      	mov	r1, r9
 80630ee:	f7dd fa83 	bl	80405f8 <__aeabi_dmul>
 80630f2:	a341      	add	r3, pc, #260	; (adr r3, 80631f8 <__ieee754_pow+0x3b8>)
 80630f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80630f8:	f7dd fa7e 	bl	80405f8 <__aeabi_dmul>
 80630fc:	4602      	mov	r2, r0
 80630fe:	460b      	mov	r3, r1
 8063100:	4650      	mov	r0, sl
 8063102:	4659      	mov	r1, fp
 8063104:	f7dd f8c0 	bl	8040288 <__aeabi_dsub>
 8063108:	4602      	mov	r2, r0
 806310a:	460b      	mov	r3, r1
 806310c:	4680      	mov	r8, r0
 806310e:	4689      	mov	r9, r1
 8063110:	4630      	mov	r0, r6
 8063112:	4639      	mov	r1, r7
 8063114:	f7dd f8ba 	bl	804028c <__adddf3>
 8063118:	2400      	movs	r4, #0
 806311a:	4632      	mov	r2, r6
 806311c:	463b      	mov	r3, r7
 806311e:	4620      	mov	r0, r4
 8063120:	460d      	mov	r5, r1
 8063122:	f7dd f8b1 	bl	8040288 <__aeabi_dsub>
 8063126:	4602      	mov	r2, r0
 8063128:	460b      	mov	r3, r1
 806312a:	4640      	mov	r0, r8
 806312c:	4649      	mov	r1, r9
 806312e:	f7dd f8ab 	bl	8040288 <__aeabi_dsub>
 8063132:	9b00      	ldr	r3, [sp, #0]
 8063134:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8063136:	3b01      	subs	r3, #1
 8063138:	4313      	orrs	r3, r2
 806313a:	4682      	mov	sl, r0
 806313c:	468b      	mov	fp, r1
 806313e:	f040 81f1 	bne.w	8063524 <__ieee754_pow+0x6e4>
 8063142:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8063200 <__ieee754_pow+0x3c0>
 8063146:	eeb0 8a47 	vmov.f32	s16, s14
 806314a:	eef0 8a67 	vmov.f32	s17, s15
 806314e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8063152:	2600      	movs	r6, #0
 8063154:	4632      	mov	r2, r6
 8063156:	463b      	mov	r3, r7
 8063158:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 806315c:	f7dd f894 	bl	8040288 <__aeabi_dsub>
 8063160:	4622      	mov	r2, r4
 8063162:	462b      	mov	r3, r5
 8063164:	f7dd fa48 	bl	80405f8 <__aeabi_dmul>
 8063168:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 806316c:	4680      	mov	r8, r0
 806316e:	4689      	mov	r9, r1
 8063170:	4650      	mov	r0, sl
 8063172:	4659      	mov	r1, fp
 8063174:	f7dd fa40 	bl	80405f8 <__aeabi_dmul>
 8063178:	4602      	mov	r2, r0
 806317a:	460b      	mov	r3, r1
 806317c:	4640      	mov	r0, r8
 806317e:	4649      	mov	r1, r9
 8063180:	f7dd f884 	bl	804028c <__adddf3>
 8063184:	4632      	mov	r2, r6
 8063186:	463b      	mov	r3, r7
 8063188:	4680      	mov	r8, r0
 806318a:	4689      	mov	r9, r1
 806318c:	4620      	mov	r0, r4
 806318e:	4629      	mov	r1, r5
 8063190:	f7dd fa32 	bl	80405f8 <__aeabi_dmul>
 8063194:	460b      	mov	r3, r1
 8063196:	4604      	mov	r4, r0
 8063198:	460d      	mov	r5, r1
 806319a:	4602      	mov	r2, r0
 806319c:	4649      	mov	r1, r9
 806319e:	4640      	mov	r0, r8
 80631a0:	f7dd f874 	bl	804028c <__adddf3>
 80631a4:	4b1d      	ldr	r3, [pc, #116]	; (806321c <__ieee754_pow+0x3dc>)
 80631a6:	4299      	cmp	r1, r3
 80631a8:	ec45 4b19 	vmov	d9, r4, r5
 80631ac:	4606      	mov	r6, r0
 80631ae:	460f      	mov	r7, r1
 80631b0:	468b      	mov	fp, r1
 80631b2:	f340 82fe 	ble.w	80637b2 <__ieee754_pow+0x972>
 80631b6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80631ba:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80631be:	4303      	orrs	r3, r0
 80631c0:	f000 81f0 	beq.w	80635a4 <__ieee754_pow+0x764>
 80631c4:	a310      	add	r3, pc, #64	; (adr r3, 8063208 <__ieee754_pow+0x3c8>)
 80631c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80631ca:	ec51 0b18 	vmov	r0, r1, d8
 80631ce:	f7dd fa13 	bl	80405f8 <__aeabi_dmul>
 80631d2:	a30d      	add	r3, pc, #52	; (adr r3, 8063208 <__ieee754_pow+0x3c8>)
 80631d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80631d8:	e6cb      	b.n	8062f72 <__ieee754_pow+0x132>
 80631da:	bf00      	nop
 80631dc:	f3af 8000 	nop.w
 80631e0:	60000000 	.word	0x60000000
 80631e4:	3ff71547 	.word	0x3ff71547
 80631e8:	f85ddf44 	.word	0xf85ddf44
 80631ec:	3e54ae0b 	.word	0x3e54ae0b
 80631f0:	55555555 	.word	0x55555555
 80631f4:	3fd55555 	.word	0x3fd55555
 80631f8:	652b82fe 	.word	0x652b82fe
 80631fc:	3ff71547 	.word	0x3ff71547
 8063200:	00000000 	.word	0x00000000
 8063204:	bff00000 	.word	0xbff00000
 8063208:	8800759c 	.word	0x8800759c
 806320c:	7e37e43c 	.word	0x7e37e43c
 8063210:	3ff00000 	.word	0x3ff00000
 8063214:	3fd00000 	.word	0x3fd00000
 8063218:	3fe00000 	.word	0x3fe00000
 806321c:	408fffff 	.word	0x408fffff
 8063220:	4bd7      	ldr	r3, [pc, #860]	; (8063580 <__ieee754_pow+0x740>)
 8063222:	ea03 0309 	and.w	r3, r3, r9
 8063226:	2200      	movs	r2, #0
 8063228:	b92b      	cbnz	r3, 8063236 <__ieee754_pow+0x3f6>
 806322a:	4bd6      	ldr	r3, [pc, #856]	; (8063584 <__ieee754_pow+0x744>)
 806322c:	f7dd f9e4 	bl	80405f8 <__aeabi_dmul>
 8063230:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8063234:	460c      	mov	r4, r1
 8063236:	1523      	asrs	r3, r4, #20
 8063238:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 806323c:	4413      	add	r3, r2
 806323e:	9309      	str	r3, [sp, #36]	; 0x24
 8063240:	4bd1      	ldr	r3, [pc, #836]	; (8063588 <__ieee754_pow+0x748>)
 8063242:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8063246:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 806324a:	429c      	cmp	r4, r3
 806324c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8063250:	dd08      	ble.n	8063264 <__ieee754_pow+0x424>
 8063252:	4bce      	ldr	r3, [pc, #824]	; (806358c <__ieee754_pow+0x74c>)
 8063254:	429c      	cmp	r4, r3
 8063256:	f340 8163 	ble.w	8063520 <__ieee754_pow+0x6e0>
 806325a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 806325c:	3301      	adds	r3, #1
 806325e:	9309      	str	r3, [sp, #36]	; 0x24
 8063260:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8063264:	2400      	movs	r4, #0
 8063266:	00e3      	lsls	r3, r4, #3
 8063268:	930b      	str	r3, [sp, #44]	; 0x2c
 806326a:	4bc9      	ldr	r3, [pc, #804]	; (8063590 <__ieee754_pow+0x750>)
 806326c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8063270:	ed93 7b00 	vldr	d7, [r3]
 8063274:	4629      	mov	r1, r5
 8063276:	ec53 2b17 	vmov	r2, r3, d7
 806327a:	eeb0 8a47 	vmov.f32	s16, s14
 806327e:	eef0 8a67 	vmov.f32	s17, s15
 8063282:	4682      	mov	sl, r0
 8063284:	f7dd f800 	bl	8040288 <__aeabi_dsub>
 8063288:	4652      	mov	r2, sl
 806328a:	4606      	mov	r6, r0
 806328c:	460f      	mov	r7, r1
 806328e:	462b      	mov	r3, r5
 8063290:	ec51 0b18 	vmov	r0, r1, d8
 8063294:	f7dc fffa 	bl	804028c <__adddf3>
 8063298:	4602      	mov	r2, r0
 806329a:	460b      	mov	r3, r1
 806329c:	2000      	movs	r0, #0
 806329e:	49bd      	ldr	r1, [pc, #756]	; (8063594 <__ieee754_pow+0x754>)
 80632a0:	f7dd fad4 	bl	804084c <__aeabi_ddiv>
 80632a4:	ec41 0b19 	vmov	d9, r0, r1
 80632a8:	4602      	mov	r2, r0
 80632aa:	460b      	mov	r3, r1
 80632ac:	4630      	mov	r0, r6
 80632ae:	4639      	mov	r1, r7
 80632b0:	f7dd f9a2 	bl	80405f8 <__aeabi_dmul>
 80632b4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80632b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80632bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80632c0:	2300      	movs	r3, #0
 80632c2:	9304      	str	r3, [sp, #16]
 80632c4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80632c8:	46ab      	mov	fp, r5
 80632ca:	106d      	asrs	r5, r5, #1
 80632cc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80632d0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80632d4:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80632d8:	2200      	movs	r2, #0
 80632da:	4640      	mov	r0, r8
 80632dc:	4649      	mov	r1, r9
 80632de:	4614      	mov	r4, r2
 80632e0:	461d      	mov	r5, r3
 80632e2:	f7dd f989 	bl	80405f8 <__aeabi_dmul>
 80632e6:	4602      	mov	r2, r0
 80632e8:	460b      	mov	r3, r1
 80632ea:	4630      	mov	r0, r6
 80632ec:	4639      	mov	r1, r7
 80632ee:	f7dc ffcb 	bl	8040288 <__aeabi_dsub>
 80632f2:	ec53 2b18 	vmov	r2, r3, d8
 80632f6:	4606      	mov	r6, r0
 80632f8:	460f      	mov	r7, r1
 80632fa:	4620      	mov	r0, r4
 80632fc:	4629      	mov	r1, r5
 80632fe:	f7dc ffc3 	bl	8040288 <__aeabi_dsub>
 8063302:	4602      	mov	r2, r0
 8063304:	460b      	mov	r3, r1
 8063306:	4650      	mov	r0, sl
 8063308:	4659      	mov	r1, fp
 806330a:	f7dc ffbd 	bl	8040288 <__aeabi_dsub>
 806330e:	4642      	mov	r2, r8
 8063310:	464b      	mov	r3, r9
 8063312:	f7dd f971 	bl	80405f8 <__aeabi_dmul>
 8063316:	4602      	mov	r2, r0
 8063318:	460b      	mov	r3, r1
 806331a:	4630      	mov	r0, r6
 806331c:	4639      	mov	r1, r7
 806331e:	f7dc ffb3 	bl	8040288 <__aeabi_dsub>
 8063322:	ec53 2b19 	vmov	r2, r3, d9
 8063326:	f7dd f967 	bl	80405f8 <__aeabi_dmul>
 806332a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 806332e:	ec41 0b18 	vmov	d8, r0, r1
 8063332:	4610      	mov	r0, r2
 8063334:	4619      	mov	r1, r3
 8063336:	f7dd f95f 	bl	80405f8 <__aeabi_dmul>
 806333a:	a37d      	add	r3, pc, #500	; (adr r3, 8063530 <__ieee754_pow+0x6f0>)
 806333c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8063340:	4604      	mov	r4, r0
 8063342:	460d      	mov	r5, r1
 8063344:	f7dd f958 	bl	80405f8 <__aeabi_dmul>
 8063348:	a37b      	add	r3, pc, #492	; (adr r3, 8063538 <__ieee754_pow+0x6f8>)
 806334a:	e9d3 2300 	ldrd	r2, r3, [r3]
 806334e:	f7dc ff9d 	bl	804028c <__adddf3>
 8063352:	4622      	mov	r2, r4
 8063354:	462b      	mov	r3, r5
 8063356:	f7dd f94f 	bl	80405f8 <__aeabi_dmul>
 806335a:	a379      	add	r3, pc, #484	; (adr r3, 8063540 <__ieee754_pow+0x700>)
 806335c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8063360:	f7dc ff94 	bl	804028c <__adddf3>
 8063364:	4622      	mov	r2, r4
 8063366:	462b      	mov	r3, r5
 8063368:	f7dd f946 	bl	80405f8 <__aeabi_dmul>
 806336c:	a376      	add	r3, pc, #472	; (adr r3, 8063548 <__ieee754_pow+0x708>)
 806336e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8063372:	f7dc ff8b 	bl	804028c <__adddf3>
 8063376:	4622      	mov	r2, r4
 8063378:	462b      	mov	r3, r5
 806337a:	f7dd f93d 	bl	80405f8 <__aeabi_dmul>
 806337e:	a374      	add	r3, pc, #464	; (adr r3, 8063550 <__ieee754_pow+0x710>)
 8063380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8063384:	f7dc ff82 	bl	804028c <__adddf3>
 8063388:	4622      	mov	r2, r4
 806338a:	462b      	mov	r3, r5
 806338c:	f7dd f934 	bl	80405f8 <__aeabi_dmul>
 8063390:	a371      	add	r3, pc, #452	; (adr r3, 8063558 <__ieee754_pow+0x718>)
 8063392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8063396:	f7dc ff79 	bl	804028c <__adddf3>
 806339a:	4622      	mov	r2, r4
 806339c:	4606      	mov	r6, r0
 806339e:	460f      	mov	r7, r1
 80633a0:	462b      	mov	r3, r5
 80633a2:	4620      	mov	r0, r4
 80633a4:	4629      	mov	r1, r5
 80633a6:	f7dd f927 	bl	80405f8 <__aeabi_dmul>
 80633aa:	4602      	mov	r2, r0
 80633ac:	460b      	mov	r3, r1
 80633ae:	4630      	mov	r0, r6
 80633b0:	4639      	mov	r1, r7
 80633b2:	f7dd f921 	bl	80405f8 <__aeabi_dmul>
 80633b6:	4642      	mov	r2, r8
 80633b8:	4604      	mov	r4, r0
 80633ba:	460d      	mov	r5, r1
 80633bc:	464b      	mov	r3, r9
 80633be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80633c2:	f7dc ff63 	bl	804028c <__adddf3>
 80633c6:	ec53 2b18 	vmov	r2, r3, d8
 80633ca:	f7dd f915 	bl	80405f8 <__aeabi_dmul>
 80633ce:	4622      	mov	r2, r4
 80633d0:	462b      	mov	r3, r5
 80633d2:	f7dc ff5b 	bl	804028c <__adddf3>
 80633d6:	4642      	mov	r2, r8
 80633d8:	4682      	mov	sl, r0
 80633da:	468b      	mov	fp, r1
 80633dc:	464b      	mov	r3, r9
 80633de:	4640      	mov	r0, r8
 80633e0:	4649      	mov	r1, r9
 80633e2:	f7dd f909 	bl	80405f8 <__aeabi_dmul>
 80633e6:	4b6c      	ldr	r3, [pc, #432]	; (8063598 <__ieee754_pow+0x758>)
 80633e8:	2200      	movs	r2, #0
 80633ea:	4606      	mov	r6, r0
 80633ec:	460f      	mov	r7, r1
 80633ee:	f7dc ff4d 	bl	804028c <__adddf3>
 80633f2:	4652      	mov	r2, sl
 80633f4:	465b      	mov	r3, fp
 80633f6:	f7dc ff49 	bl	804028c <__adddf3>
 80633fa:	9c04      	ldr	r4, [sp, #16]
 80633fc:	460d      	mov	r5, r1
 80633fe:	4622      	mov	r2, r4
 8063400:	460b      	mov	r3, r1
 8063402:	4640      	mov	r0, r8
 8063404:	4649      	mov	r1, r9
 8063406:	f7dd f8f7 	bl	80405f8 <__aeabi_dmul>
 806340a:	4b63      	ldr	r3, [pc, #396]	; (8063598 <__ieee754_pow+0x758>)
 806340c:	4680      	mov	r8, r0
 806340e:	4689      	mov	r9, r1
 8063410:	2200      	movs	r2, #0
 8063412:	4620      	mov	r0, r4
 8063414:	4629      	mov	r1, r5
 8063416:	f7dc ff37 	bl	8040288 <__aeabi_dsub>
 806341a:	4632      	mov	r2, r6
 806341c:	463b      	mov	r3, r7
 806341e:	f7dc ff33 	bl	8040288 <__aeabi_dsub>
 8063422:	4602      	mov	r2, r0
 8063424:	460b      	mov	r3, r1
 8063426:	4650      	mov	r0, sl
 8063428:	4659      	mov	r1, fp
 806342a:	f7dc ff2d 	bl	8040288 <__aeabi_dsub>
 806342e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8063432:	f7dd f8e1 	bl	80405f8 <__aeabi_dmul>
 8063436:	4622      	mov	r2, r4
 8063438:	4606      	mov	r6, r0
 806343a:	460f      	mov	r7, r1
 806343c:	462b      	mov	r3, r5
 806343e:	ec51 0b18 	vmov	r0, r1, d8
 8063442:	f7dd f8d9 	bl	80405f8 <__aeabi_dmul>
 8063446:	4602      	mov	r2, r0
 8063448:	460b      	mov	r3, r1
 806344a:	4630      	mov	r0, r6
 806344c:	4639      	mov	r1, r7
 806344e:	f7dc ff1d 	bl	804028c <__adddf3>
 8063452:	4606      	mov	r6, r0
 8063454:	460f      	mov	r7, r1
 8063456:	4602      	mov	r2, r0
 8063458:	460b      	mov	r3, r1
 806345a:	4640      	mov	r0, r8
 806345c:	4649      	mov	r1, r9
 806345e:	f7dc ff15 	bl	804028c <__adddf3>
 8063462:	9c04      	ldr	r4, [sp, #16]
 8063464:	a33e      	add	r3, pc, #248	; (adr r3, 8063560 <__ieee754_pow+0x720>)
 8063466:	e9d3 2300 	ldrd	r2, r3, [r3]
 806346a:	4620      	mov	r0, r4
 806346c:	460d      	mov	r5, r1
 806346e:	f7dd f8c3 	bl	80405f8 <__aeabi_dmul>
 8063472:	4642      	mov	r2, r8
 8063474:	ec41 0b18 	vmov	d8, r0, r1
 8063478:	464b      	mov	r3, r9
 806347a:	4620      	mov	r0, r4
 806347c:	4629      	mov	r1, r5
 806347e:	f7dc ff03 	bl	8040288 <__aeabi_dsub>
 8063482:	4602      	mov	r2, r0
 8063484:	460b      	mov	r3, r1
 8063486:	4630      	mov	r0, r6
 8063488:	4639      	mov	r1, r7
 806348a:	f7dc fefd 	bl	8040288 <__aeabi_dsub>
 806348e:	a336      	add	r3, pc, #216	; (adr r3, 8063568 <__ieee754_pow+0x728>)
 8063490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8063494:	f7dd f8b0 	bl	80405f8 <__aeabi_dmul>
 8063498:	a335      	add	r3, pc, #212	; (adr r3, 8063570 <__ieee754_pow+0x730>)
 806349a:	e9d3 2300 	ldrd	r2, r3, [r3]
 806349e:	4606      	mov	r6, r0
 80634a0:	460f      	mov	r7, r1
 80634a2:	4620      	mov	r0, r4
 80634a4:	4629      	mov	r1, r5
 80634a6:	f7dd f8a7 	bl	80405f8 <__aeabi_dmul>
 80634aa:	4602      	mov	r2, r0
 80634ac:	460b      	mov	r3, r1
 80634ae:	4630      	mov	r0, r6
 80634b0:	4639      	mov	r1, r7
 80634b2:	f7dc feeb 	bl	804028c <__adddf3>
 80634b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80634b8:	4b38      	ldr	r3, [pc, #224]	; (806359c <__ieee754_pow+0x75c>)
 80634ba:	4413      	add	r3, r2
 80634bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80634c0:	f7dc fee4 	bl	804028c <__adddf3>
 80634c4:	4682      	mov	sl, r0
 80634c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80634c8:	468b      	mov	fp, r1
 80634ca:	f7dd f82b 	bl	8040524 <__aeabi_i2d>
 80634ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80634d0:	4b33      	ldr	r3, [pc, #204]	; (80635a0 <__ieee754_pow+0x760>)
 80634d2:	4413      	add	r3, r2
 80634d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80634d8:	4606      	mov	r6, r0
 80634da:	460f      	mov	r7, r1
 80634dc:	4652      	mov	r2, sl
 80634de:	465b      	mov	r3, fp
 80634e0:	ec51 0b18 	vmov	r0, r1, d8
 80634e4:	f7dc fed2 	bl	804028c <__adddf3>
 80634e8:	4642      	mov	r2, r8
 80634ea:	464b      	mov	r3, r9
 80634ec:	f7dc fece 	bl	804028c <__adddf3>
 80634f0:	4632      	mov	r2, r6
 80634f2:	463b      	mov	r3, r7
 80634f4:	f7dc feca 	bl	804028c <__adddf3>
 80634f8:	9c04      	ldr	r4, [sp, #16]
 80634fa:	4632      	mov	r2, r6
 80634fc:	463b      	mov	r3, r7
 80634fe:	4620      	mov	r0, r4
 8063500:	460d      	mov	r5, r1
 8063502:	f7dc fec1 	bl	8040288 <__aeabi_dsub>
 8063506:	4642      	mov	r2, r8
 8063508:	464b      	mov	r3, r9
 806350a:	f7dc febd 	bl	8040288 <__aeabi_dsub>
 806350e:	ec53 2b18 	vmov	r2, r3, d8
 8063512:	f7dc feb9 	bl	8040288 <__aeabi_dsub>
 8063516:	4602      	mov	r2, r0
 8063518:	460b      	mov	r3, r1
 806351a:	4650      	mov	r0, sl
 806351c:	4659      	mov	r1, fp
 806351e:	e606      	b.n	806312e <__ieee754_pow+0x2ee>
 8063520:	2401      	movs	r4, #1
 8063522:	e6a0      	b.n	8063266 <__ieee754_pow+0x426>
 8063524:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8063578 <__ieee754_pow+0x738>
 8063528:	e60d      	b.n	8063146 <__ieee754_pow+0x306>
 806352a:	bf00      	nop
 806352c:	f3af 8000 	nop.w
 8063530:	4a454eef 	.word	0x4a454eef
 8063534:	3fca7e28 	.word	0x3fca7e28
 8063538:	93c9db65 	.word	0x93c9db65
 806353c:	3fcd864a 	.word	0x3fcd864a
 8063540:	a91d4101 	.word	0xa91d4101
 8063544:	3fd17460 	.word	0x3fd17460
 8063548:	518f264d 	.word	0x518f264d
 806354c:	3fd55555 	.word	0x3fd55555
 8063550:	db6fabff 	.word	0xdb6fabff
 8063554:	3fdb6db6 	.word	0x3fdb6db6
 8063558:	33333303 	.word	0x33333303
 806355c:	3fe33333 	.word	0x3fe33333
 8063560:	e0000000 	.word	0xe0000000
 8063564:	3feec709 	.word	0x3feec709
 8063568:	dc3a03fd 	.word	0xdc3a03fd
 806356c:	3feec709 	.word	0x3feec709
 8063570:	145b01f5 	.word	0x145b01f5
 8063574:	be3e2fe0 	.word	0xbe3e2fe0
 8063578:	00000000 	.word	0x00000000
 806357c:	3ff00000 	.word	0x3ff00000
 8063580:	7ff00000 	.word	0x7ff00000
 8063584:	43400000 	.word	0x43400000
 8063588:	0003988e 	.word	0x0003988e
 806358c:	000bb679 	.word	0x000bb679
 8063590:	0807d698 	.word	0x0807d698
 8063594:	3ff00000 	.word	0x3ff00000
 8063598:	40080000 	.word	0x40080000
 806359c:	0807d6b8 	.word	0x0807d6b8
 80635a0:	0807d6a8 	.word	0x0807d6a8
 80635a4:	a3b5      	add	r3, pc, #724	; (adr r3, 806387c <__ieee754_pow+0xa3c>)
 80635a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80635aa:	4640      	mov	r0, r8
 80635ac:	4649      	mov	r1, r9
 80635ae:	f7dc fe6d 	bl	804028c <__adddf3>
 80635b2:	4622      	mov	r2, r4
 80635b4:	ec41 0b1a 	vmov	d10, r0, r1
 80635b8:	462b      	mov	r3, r5
 80635ba:	4630      	mov	r0, r6
 80635bc:	4639      	mov	r1, r7
 80635be:	f7dc fe63 	bl	8040288 <__aeabi_dsub>
 80635c2:	4602      	mov	r2, r0
 80635c4:	460b      	mov	r3, r1
 80635c6:	ec51 0b1a 	vmov	r0, r1, d10
 80635ca:	f7dd faa5 	bl	8040b18 <__aeabi_dcmpgt>
 80635ce:	2800      	cmp	r0, #0
 80635d0:	f47f adf8 	bne.w	80631c4 <__ieee754_pow+0x384>
 80635d4:	4aa4      	ldr	r2, [pc, #656]	; (8063868 <__ieee754_pow+0xa28>)
 80635d6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80635da:	4293      	cmp	r3, r2
 80635dc:	f340 810b 	ble.w	80637f6 <__ieee754_pow+0x9b6>
 80635e0:	151b      	asrs	r3, r3, #20
 80635e2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80635e6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80635ea:	fa4a f303 	asr.w	r3, sl, r3
 80635ee:	445b      	add	r3, fp
 80635f0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80635f4:	4e9d      	ldr	r6, [pc, #628]	; (806386c <__ieee754_pow+0xa2c>)
 80635f6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80635fa:	4116      	asrs	r6, r2
 80635fc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8063600:	2000      	movs	r0, #0
 8063602:	ea23 0106 	bic.w	r1, r3, r6
 8063606:	f1c2 0214 	rsb	r2, r2, #20
 806360a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 806360e:	fa4a fa02 	asr.w	sl, sl, r2
 8063612:	f1bb 0f00 	cmp.w	fp, #0
 8063616:	4602      	mov	r2, r0
 8063618:	460b      	mov	r3, r1
 806361a:	4620      	mov	r0, r4
 806361c:	4629      	mov	r1, r5
 806361e:	bfb8      	it	lt
 8063620:	f1ca 0a00 	rsblt	sl, sl, #0
 8063624:	f7dc fe30 	bl	8040288 <__aeabi_dsub>
 8063628:	ec41 0b19 	vmov	d9, r0, r1
 806362c:	4642      	mov	r2, r8
 806362e:	464b      	mov	r3, r9
 8063630:	ec51 0b19 	vmov	r0, r1, d9
 8063634:	f7dc fe2a 	bl	804028c <__adddf3>
 8063638:	2400      	movs	r4, #0
 806363a:	a379      	add	r3, pc, #484	; (adr r3, 8063820 <__ieee754_pow+0x9e0>)
 806363c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8063640:	4620      	mov	r0, r4
 8063642:	460d      	mov	r5, r1
 8063644:	f7dc ffd8 	bl	80405f8 <__aeabi_dmul>
 8063648:	ec53 2b19 	vmov	r2, r3, d9
 806364c:	4606      	mov	r6, r0
 806364e:	460f      	mov	r7, r1
 8063650:	4620      	mov	r0, r4
 8063652:	4629      	mov	r1, r5
 8063654:	f7dc fe18 	bl	8040288 <__aeabi_dsub>
 8063658:	4602      	mov	r2, r0
 806365a:	460b      	mov	r3, r1
 806365c:	4640      	mov	r0, r8
 806365e:	4649      	mov	r1, r9
 8063660:	f7dc fe12 	bl	8040288 <__aeabi_dsub>
 8063664:	a370      	add	r3, pc, #448	; (adr r3, 8063828 <__ieee754_pow+0x9e8>)
 8063666:	e9d3 2300 	ldrd	r2, r3, [r3]
 806366a:	f7dc ffc5 	bl	80405f8 <__aeabi_dmul>
 806366e:	a370      	add	r3, pc, #448	; (adr r3, 8063830 <__ieee754_pow+0x9f0>)
 8063670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8063674:	4680      	mov	r8, r0
 8063676:	4689      	mov	r9, r1
 8063678:	4620      	mov	r0, r4
 806367a:	4629      	mov	r1, r5
 806367c:	f7dc ffbc 	bl	80405f8 <__aeabi_dmul>
 8063680:	4602      	mov	r2, r0
 8063682:	460b      	mov	r3, r1
 8063684:	4640      	mov	r0, r8
 8063686:	4649      	mov	r1, r9
 8063688:	f7dc fe00 	bl	804028c <__adddf3>
 806368c:	4604      	mov	r4, r0
 806368e:	460d      	mov	r5, r1
 8063690:	4602      	mov	r2, r0
 8063692:	460b      	mov	r3, r1
 8063694:	4630      	mov	r0, r6
 8063696:	4639      	mov	r1, r7
 8063698:	f7dc fdf8 	bl	804028c <__adddf3>
 806369c:	4632      	mov	r2, r6
 806369e:	463b      	mov	r3, r7
 80636a0:	4680      	mov	r8, r0
 80636a2:	4689      	mov	r9, r1
 80636a4:	f7dc fdf0 	bl	8040288 <__aeabi_dsub>
 80636a8:	4602      	mov	r2, r0
 80636aa:	460b      	mov	r3, r1
 80636ac:	4620      	mov	r0, r4
 80636ae:	4629      	mov	r1, r5
 80636b0:	f7dc fdea 	bl	8040288 <__aeabi_dsub>
 80636b4:	4642      	mov	r2, r8
 80636b6:	4606      	mov	r6, r0
 80636b8:	460f      	mov	r7, r1
 80636ba:	464b      	mov	r3, r9
 80636bc:	4640      	mov	r0, r8
 80636be:	4649      	mov	r1, r9
 80636c0:	f7dc ff9a 	bl	80405f8 <__aeabi_dmul>
 80636c4:	a35c      	add	r3, pc, #368	; (adr r3, 8063838 <__ieee754_pow+0x9f8>)
 80636c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80636ca:	4604      	mov	r4, r0
 80636cc:	460d      	mov	r5, r1
 80636ce:	f7dc ff93 	bl	80405f8 <__aeabi_dmul>
 80636d2:	a35b      	add	r3, pc, #364	; (adr r3, 8063840 <__ieee754_pow+0xa00>)
 80636d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80636d8:	f7dc fdd6 	bl	8040288 <__aeabi_dsub>
 80636dc:	4622      	mov	r2, r4
 80636de:	462b      	mov	r3, r5
 80636e0:	f7dc ff8a 	bl	80405f8 <__aeabi_dmul>
 80636e4:	a358      	add	r3, pc, #352	; (adr r3, 8063848 <__ieee754_pow+0xa08>)
 80636e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80636ea:	f7dc fdcf 	bl	804028c <__adddf3>
 80636ee:	4622      	mov	r2, r4
 80636f0:	462b      	mov	r3, r5
 80636f2:	f7dc ff81 	bl	80405f8 <__aeabi_dmul>
 80636f6:	a356      	add	r3, pc, #344	; (adr r3, 8063850 <__ieee754_pow+0xa10>)
 80636f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80636fc:	f7dc fdc4 	bl	8040288 <__aeabi_dsub>
 8063700:	4622      	mov	r2, r4
 8063702:	462b      	mov	r3, r5
 8063704:	f7dc ff78 	bl	80405f8 <__aeabi_dmul>
 8063708:	a353      	add	r3, pc, #332	; (adr r3, 8063858 <__ieee754_pow+0xa18>)
 806370a:	e9d3 2300 	ldrd	r2, r3, [r3]
 806370e:	f7dc fdbd 	bl	804028c <__adddf3>
 8063712:	4622      	mov	r2, r4
 8063714:	462b      	mov	r3, r5
 8063716:	f7dc ff6f 	bl	80405f8 <__aeabi_dmul>
 806371a:	4602      	mov	r2, r0
 806371c:	460b      	mov	r3, r1
 806371e:	4640      	mov	r0, r8
 8063720:	4649      	mov	r1, r9
 8063722:	f7dc fdb1 	bl	8040288 <__aeabi_dsub>
 8063726:	4604      	mov	r4, r0
 8063728:	460d      	mov	r5, r1
 806372a:	4602      	mov	r2, r0
 806372c:	460b      	mov	r3, r1
 806372e:	4640      	mov	r0, r8
 8063730:	4649      	mov	r1, r9
 8063732:	f7dc ff61 	bl	80405f8 <__aeabi_dmul>
 8063736:	2200      	movs	r2, #0
 8063738:	ec41 0b19 	vmov	d9, r0, r1
 806373c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8063740:	4620      	mov	r0, r4
 8063742:	4629      	mov	r1, r5
 8063744:	f7dc fda0 	bl	8040288 <__aeabi_dsub>
 8063748:	4602      	mov	r2, r0
 806374a:	460b      	mov	r3, r1
 806374c:	ec51 0b19 	vmov	r0, r1, d9
 8063750:	f7dd f87c 	bl	804084c <__aeabi_ddiv>
 8063754:	4632      	mov	r2, r6
 8063756:	4604      	mov	r4, r0
 8063758:	460d      	mov	r5, r1
 806375a:	463b      	mov	r3, r7
 806375c:	4640      	mov	r0, r8
 806375e:	4649      	mov	r1, r9
 8063760:	f7dc ff4a 	bl	80405f8 <__aeabi_dmul>
 8063764:	4632      	mov	r2, r6
 8063766:	463b      	mov	r3, r7
 8063768:	f7dc fd90 	bl	804028c <__adddf3>
 806376c:	4602      	mov	r2, r0
 806376e:	460b      	mov	r3, r1
 8063770:	4620      	mov	r0, r4
 8063772:	4629      	mov	r1, r5
 8063774:	f7dc fd88 	bl	8040288 <__aeabi_dsub>
 8063778:	4642      	mov	r2, r8
 806377a:	464b      	mov	r3, r9
 806377c:	f7dc fd84 	bl	8040288 <__aeabi_dsub>
 8063780:	460b      	mov	r3, r1
 8063782:	4602      	mov	r2, r0
 8063784:	493a      	ldr	r1, [pc, #232]	; (8063870 <__ieee754_pow+0xa30>)
 8063786:	2000      	movs	r0, #0
 8063788:	f7dc fd7e 	bl	8040288 <__aeabi_dsub>
 806378c:	e9cd 0100 	strd	r0, r1, [sp]
 8063790:	9b01      	ldr	r3, [sp, #4]
 8063792:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8063796:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 806379a:	da2f      	bge.n	80637fc <__ieee754_pow+0x9bc>
 806379c:	4650      	mov	r0, sl
 806379e:	ed9d 0b00 	vldr	d0, [sp]
 80637a2:	f000 ffc5 	bl	8064730 <scalbn>
 80637a6:	ec51 0b10 	vmov	r0, r1, d0
 80637aa:	ec53 2b18 	vmov	r2, r3, d8
 80637ae:	f7ff bbe0 	b.w	8062f72 <__ieee754_pow+0x132>
 80637b2:	4b30      	ldr	r3, [pc, #192]	; (8063874 <__ieee754_pow+0xa34>)
 80637b4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80637b8:	429e      	cmp	r6, r3
 80637ba:	f77f af0b 	ble.w	80635d4 <__ieee754_pow+0x794>
 80637be:	4b2e      	ldr	r3, [pc, #184]	; (8063878 <__ieee754_pow+0xa38>)
 80637c0:	440b      	add	r3, r1
 80637c2:	4303      	orrs	r3, r0
 80637c4:	d00b      	beq.n	80637de <__ieee754_pow+0x99e>
 80637c6:	a326      	add	r3, pc, #152	; (adr r3, 8063860 <__ieee754_pow+0xa20>)
 80637c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80637cc:	ec51 0b18 	vmov	r0, r1, d8
 80637d0:	f7dc ff12 	bl	80405f8 <__aeabi_dmul>
 80637d4:	a322      	add	r3, pc, #136	; (adr r3, 8063860 <__ieee754_pow+0xa20>)
 80637d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80637da:	f7ff bbca 	b.w	8062f72 <__ieee754_pow+0x132>
 80637de:	4622      	mov	r2, r4
 80637e0:	462b      	mov	r3, r5
 80637e2:	f7dc fd51 	bl	8040288 <__aeabi_dsub>
 80637e6:	4642      	mov	r2, r8
 80637e8:	464b      	mov	r3, r9
 80637ea:	f7dd f98b 	bl	8040b04 <__aeabi_dcmpge>
 80637ee:	2800      	cmp	r0, #0
 80637f0:	f43f aef0 	beq.w	80635d4 <__ieee754_pow+0x794>
 80637f4:	e7e7      	b.n	80637c6 <__ieee754_pow+0x986>
 80637f6:	f04f 0a00 	mov.w	sl, #0
 80637fa:	e717      	b.n	806362c <__ieee754_pow+0x7ec>
 80637fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8063800:	4619      	mov	r1, r3
 8063802:	e7d2      	b.n	80637aa <__ieee754_pow+0x96a>
 8063804:	491a      	ldr	r1, [pc, #104]	; (8063870 <__ieee754_pow+0xa30>)
 8063806:	2000      	movs	r0, #0
 8063808:	f7ff bb9e 	b.w	8062f48 <__ieee754_pow+0x108>
 806380c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8063810:	f7ff bb9a 	b.w	8062f48 <__ieee754_pow+0x108>
 8063814:	9000      	str	r0, [sp, #0]
 8063816:	f7ff bb76 	b.w	8062f06 <__ieee754_pow+0xc6>
 806381a:	2100      	movs	r1, #0
 806381c:	f7ff bb60 	b.w	8062ee0 <__ieee754_pow+0xa0>
 8063820:	00000000 	.word	0x00000000
 8063824:	3fe62e43 	.word	0x3fe62e43
 8063828:	fefa39ef 	.word	0xfefa39ef
 806382c:	3fe62e42 	.word	0x3fe62e42
 8063830:	0ca86c39 	.word	0x0ca86c39
 8063834:	be205c61 	.word	0xbe205c61
 8063838:	72bea4d0 	.word	0x72bea4d0
 806383c:	3e663769 	.word	0x3e663769
 8063840:	c5d26bf1 	.word	0xc5d26bf1
 8063844:	3ebbbd41 	.word	0x3ebbbd41
 8063848:	af25de2c 	.word	0xaf25de2c
 806384c:	3f11566a 	.word	0x3f11566a
 8063850:	16bebd93 	.word	0x16bebd93
 8063854:	3f66c16c 	.word	0x3f66c16c
 8063858:	5555553e 	.word	0x5555553e
 806385c:	3fc55555 	.word	0x3fc55555
 8063860:	c2f8f359 	.word	0xc2f8f359
 8063864:	01a56e1f 	.word	0x01a56e1f
 8063868:	3fe00000 	.word	0x3fe00000
 806386c:	000fffff 	.word	0x000fffff
 8063870:	3ff00000 	.word	0x3ff00000
 8063874:	4090cbff 	.word	0x4090cbff
 8063878:	3f6f3400 	.word	0x3f6f3400
 806387c:	652b82fe 	.word	0x652b82fe
 8063880:	3c971547 	.word	0x3c971547

08063884 <__ieee754_sqrt>:
 8063884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8063888:	ec55 4b10 	vmov	r4, r5, d0
 806388c:	4e56      	ldr	r6, [pc, #344]	; (80639e8 <__ieee754_sqrt+0x164>)
 806388e:	43ae      	bics	r6, r5
 8063890:	ee10 0a10 	vmov	r0, s0
 8063894:	ee10 3a10 	vmov	r3, s0
 8063898:	4629      	mov	r1, r5
 806389a:	462a      	mov	r2, r5
 806389c:	d110      	bne.n	80638c0 <__ieee754_sqrt+0x3c>
 806389e:	ee10 2a10 	vmov	r2, s0
 80638a2:	462b      	mov	r3, r5
 80638a4:	f7dc fea8 	bl	80405f8 <__aeabi_dmul>
 80638a8:	4602      	mov	r2, r0
 80638aa:	460b      	mov	r3, r1
 80638ac:	4620      	mov	r0, r4
 80638ae:	4629      	mov	r1, r5
 80638b0:	f7dc fcec 	bl	804028c <__adddf3>
 80638b4:	4604      	mov	r4, r0
 80638b6:	460d      	mov	r5, r1
 80638b8:	ec45 4b10 	vmov	d0, r4, r5
 80638bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80638c0:	2d00      	cmp	r5, #0
 80638c2:	dc10      	bgt.n	80638e6 <__ieee754_sqrt+0x62>
 80638c4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80638c8:	4330      	orrs	r0, r6
 80638ca:	d0f5      	beq.n	80638b8 <__ieee754_sqrt+0x34>
 80638cc:	b15d      	cbz	r5, 80638e6 <__ieee754_sqrt+0x62>
 80638ce:	ee10 2a10 	vmov	r2, s0
 80638d2:	462b      	mov	r3, r5
 80638d4:	ee10 0a10 	vmov	r0, s0
 80638d8:	f7dc fcd6 	bl	8040288 <__aeabi_dsub>
 80638dc:	4602      	mov	r2, r0
 80638de:	460b      	mov	r3, r1
 80638e0:	f7dc ffb4 	bl	804084c <__aeabi_ddiv>
 80638e4:	e7e6      	b.n	80638b4 <__ieee754_sqrt+0x30>
 80638e6:	1509      	asrs	r1, r1, #20
 80638e8:	d076      	beq.n	80639d8 <__ieee754_sqrt+0x154>
 80638ea:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80638ee:	07ce      	lsls	r6, r1, #31
 80638f0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80638f4:	bf5e      	ittt	pl
 80638f6:	0fda      	lsrpl	r2, r3, #31
 80638f8:	005b      	lslpl	r3, r3, #1
 80638fa:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80638fe:	0fda      	lsrs	r2, r3, #31
 8063900:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8063904:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8063908:	2000      	movs	r0, #0
 806390a:	106d      	asrs	r5, r5, #1
 806390c:	005b      	lsls	r3, r3, #1
 806390e:	f04f 0e16 	mov.w	lr, #22
 8063912:	4684      	mov	ip, r0
 8063914:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8063918:	eb0c 0401 	add.w	r4, ip, r1
 806391c:	4294      	cmp	r4, r2
 806391e:	bfde      	ittt	le
 8063920:	1b12      	suble	r2, r2, r4
 8063922:	eb04 0c01 	addle.w	ip, r4, r1
 8063926:	1840      	addle	r0, r0, r1
 8063928:	0052      	lsls	r2, r2, #1
 806392a:	f1be 0e01 	subs.w	lr, lr, #1
 806392e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8063932:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8063936:	ea4f 0343 	mov.w	r3, r3, lsl #1
 806393a:	d1ed      	bne.n	8063918 <__ieee754_sqrt+0x94>
 806393c:	4671      	mov	r1, lr
 806393e:	2720      	movs	r7, #32
 8063940:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8063944:	4562      	cmp	r2, ip
 8063946:	eb04 060e 	add.w	r6, r4, lr
 806394a:	dc02      	bgt.n	8063952 <__ieee754_sqrt+0xce>
 806394c:	d113      	bne.n	8063976 <__ieee754_sqrt+0xf2>
 806394e:	429e      	cmp	r6, r3
 8063950:	d811      	bhi.n	8063976 <__ieee754_sqrt+0xf2>
 8063952:	2e00      	cmp	r6, #0
 8063954:	eb06 0e04 	add.w	lr, r6, r4
 8063958:	da43      	bge.n	80639e2 <__ieee754_sqrt+0x15e>
 806395a:	f1be 0f00 	cmp.w	lr, #0
 806395e:	db40      	blt.n	80639e2 <__ieee754_sqrt+0x15e>
 8063960:	f10c 0801 	add.w	r8, ip, #1
 8063964:	eba2 020c 	sub.w	r2, r2, ip
 8063968:	429e      	cmp	r6, r3
 806396a:	bf88      	it	hi
 806396c:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8063970:	1b9b      	subs	r3, r3, r6
 8063972:	4421      	add	r1, r4
 8063974:	46c4      	mov	ip, r8
 8063976:	0052      	lsls	r2, r2, #1
 8063978:	3f01      	subs	r7, #1
 806397a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 806397e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8063982:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8063986:	d1dd      	bne.n	8063944 <__ieee754_sqrt+0xc0>
 8063988:	4313      	orrs	r3, r2
 806398a:	d006      	beq.n	806399a <__ieee754_sqrt+0x116>
 806398c:	1c4c      	adds	r4, r1, #1
 806398e:	bf13      	iteet	ne
 8063990:	3101      	addne	r1, #1
 8063992:	3001      	addeq	r0, #1
 8063994:	4639      	moveq	r1, r7
 8063996:	f021 0101 	bicne.w	r1, r1, #1
 806399a:	1043      	asrs	r3, r0, #1
 806399c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80639a0:	0849      	lsrs	r1, r1, #1
 80639a2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80639a6:	07c2      	lsls	r2, r0, #31
 80639a8:	bf48      	it	mi
 80639aa:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80639ae:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80639b2:	460c      	mov	r4, r1
 80639b4:	463d      	mov	r5, r7
 80639b6:	e77f      	b.n	80638b8 <__ieee754_sqrt+0x34>
 80639b8:	0ada      	lsrs	r2, r3, #11
 80639ba:	3815      	subs	r0, #21
 80639bc:	055b      	lsls	r3, r3, #21
 80639be:	2a00      	cmp	r2, #0
 80639c0:	d0fa      	beq.n	80639b8 <__ieee754_sqrt+0x134>
 80639c2:	02d7      	lsls	r7, r2, #11
 80639c4:	d50a      	bpl.n	80639dc <__ieee754_sqrt+0x158>
 80639c6:	f1c1 0420 	rsb	r4, r1, #32
 80639ca:	fa23 f404 	lsr.w	r4, r3, r4
 80639ce:	1e4d      	subs	r5, r1, #1
 80639d0:	408b      	lsls	r3, r1
 80639d2:	4322      	orrs	r2, r4
 80639d4:	1b41      	subs	r1, r0, r5
 80639d6:	e788      	b.n	80638ea <__ieee754_sqrt+0x66>
 80639d8:	4608      	mov	r0, r1
 80639da:	e7f0      	b.n	80639be <__ieee754_sqrt+0x13a>
 80639dc:	0052      	lsls	r2, r2, #1
 80639de:	3101      	adds	r1, #1
 80639e0:	e7ef      	b.n	80639c2 <__ieee754_sqrt+0x13e>
 80639e2:	46e0      	mov	r8, ip
 80639e4:	e7be      	b.n	8063964 <__ieee754_sqrt+0xe0>
 80639e6:	bf00      	nop
 80639e8:	7ff00000 	.word	0x7ff00000

080639ec <__ieee754_asinf>:
 80639ec:	b538      	push	{r3, r4, r5, lr}
 80639ee:	ee10 5a10 	vmov	r5, s0
 80639f2:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80639f6:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80639fa:	ed2d 8b04 	vpush	{d8-d9}
 80639fe:	d10c      	bne.n	8063a1a <__ieee754_asinf+0x2e>
 8063a00:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8063b78 <__ieee754_asinf+0x18c>
 8063a04:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8063b7c <__ieee754_asinf+0x190>
 8063a08:	ee60 7a27 	vmul.f32	s15, s0, s15
 8063a0c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8063a10:	eeb0 0a67 	vmov.f32	s0, s15
 8063a14:	ecbd 8b04 	vpop	{d8-d9}
 8063a18:	bd38      	pop	{r3, r4, r5, pc}
 8063a1a:	dd04      	ble.n	8063a26 <__ieee754_asinf+0x3a>
 8063a1c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8063a20:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8063a24:	e7f6      	b.n	8063a14 <__ieee754_asinf+0x28>
 8063a26:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8063a2a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8063a2e:	da0b      	bge.n	8063a48 <__ieee754_asinf+0x5c>
 8063a30:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8063a34:	da52      	bge.n	8063adc <__ieee754_asinf+0xf0>
 8063a36:	eddf 7a52 	vldr	s15, [pc, #328]	; 8063b80 <__ieee754_asinf+0x194>
 8063a3a:	ee70 7a27 	vadd.f32	s15, s0, s15
 8063a3e:	eef4 7ae8 	vcmpe.f32	s15, s17
 8063a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8063a46:	dce5      	bgt.n	8063a14 <__ieee754_asinf+0x28>
 8063a48:	f000 ffcc 	bl	80649e4 <fabsf>
 8063a4c:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8063a50:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8063a54:	ee20 8a08 	vmul.f32	s16, s0, s16
 8063a58:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8063b84 <__ieee754_asinf+0x198>
 8063a5c:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8063b88 <__ieee754_asinf+0x19c>
 8063a60:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8063b8c <__ieee754_asinf+0x1a0>
 8063a64:	eea8 7a27 	vfma.f32	s14, s16, s15
 8063a68:	eddf 7a49 	vldr	s15, [pc, #292]	; 8063b90 <__ieee754_asinf+0x1a4>
 8063a6c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8063a70:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8063b94 <__ieee754_asinf+0x1a8>
 8063a74:	eea7 7a88 	vfma.f32	s14, s15, s16
 8063a78:	eddf 7a47 	vldr	s15, [pc, #284]	; 8063b98 <__ieee754_asinf+0x1ac>
 8063a7c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8063a80:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8063b9c <__ieee754_asinf+0x1b0>
 8063a84:	eea7 9a88 	vfma.f32	s18, s15, s16
 8063a88:	eddf 7a45 	vldr	s15, [pc, #276]	; 8063ba0 <__ieee754_asinf+0x1b4>
 8063a8c:	eee8 7a07 	vfma.f32	s15, s16, s14
 8063a90:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8063ba4 <__ieee754_asinf+0x1b8>
 8063a94:	eea7 7a88 	vfma.f32	s14, s15, s16
 8063a98:	eddf 7a43 	vldr	s15, [pc, #268]	; 8063ba8 <__ieee754_asinf+0x1bc>
 8063a9c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8063aa0:	eeb0 0a48 	vmov.f32	s0, s16
 8063aa4:	eee7 8a88 	vfma.f32	s17, s15, s16
 8063aa8:	f000 fa62 	bl	8063f70 <__ieee754_sqrtf>
 8063aac:	4b3f      	ldr	r3, [pc, #252]	; (8063bac <__ieee754_asinf+0x1c0>)
 8063aae:	ee29 9a08 	vmul.f32	s18, s18, s16
 8063ab2:	429c      	cmp	r4, r3
 8063ab4:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8063ab8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8063abc:	dd3d      	ble.n	8063b3a <__ieee754_asinf+0x14e>
 8063abe:	eea0 0a06 	vfma.f32	s0, s0, s12
 8063ac2:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8063bb0 <__ieee754_asinf+0x1c4>
 8063ac6:	eee0 7a26 	vfma.f32	s15, s0, s13
 8063aca:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8063b7c <__ieee754_asinf+0x190>
 8063ace:	ee30 0a67 	vsub.f32	s0, s0, s15
 8063ad2:	2d00      	cmp	r5, #0
 8063ad4:	bfd8      	it	le
 8063ad6:	eeb1 0a40 	vnegle.f32	s0, s0
 8063ada:	e79b      	b.n	8063a14 <__ieee754_asinf+0x28>
 8063adc:	ee60 7a00 	vmul.f32	s15, s0, s0
 8063ae0:	eddf 6a28 	vldr	s13, [pc, #160]	; 8063b84 <__ieee754_asinf+0x198>
 8063ae4:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8063b88 <__ieee754_asinf+0x19c>
 8063ae8:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8063b9c <__ieee754_asinf+0x1b0>
 8063aec:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8063af0:	eddf 6a27 	vldr	s13, [pc, #156]	; 8063b90 <__ieee754_asinf+0x1a4>
 8063af4:	eee7 6a27 	vfma.f32	s13, s14, s15
 8063af8:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8063b94 <__ieee754_asinf+0x1a8>
 8063afc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8063b00:	eddf 6a25 	vldr	s13, [pc, #148]	; 8063b98 <__ieee754_asinf+0x1ac>
 8063b04:	eee7 6a27 	vfma.f32	s13, s14, s15
 8063b08:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8063b8c <__ieee754_asinf+0x1a0>
 8063b0c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8063b10:	eddf 6a23 	vldr	s13, [pc, #140]	; 8063ba0 <__ieee754_asinf+0x1b4>
 8063b14:	eee7 6a86 	vfma.f32	s13, s15, s12
 8063b18:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8063ba4 <__ieee754_asinf+0x1b8>
 8063b1c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8063b20:	eddf 6a21 	vldr	s13, [pc, #132]	; 8063ba8 <__ieee754_asinf+0x1bc>
 8063b24:	eee6 6a27 	vfma.f32	s13, s12, s15
 8063b28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8063b2c:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8063b30:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8063b34:	eea0 0a27 	vfma.f32	s0, s0, s15
 8063b38:	e76c      	b.n	8063a14 <__ieee754_asinf+0x28>
 8063b3a:	ee10 3a10 	vmov	r3, s0
 8063b3e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8063b42:	f023 030f 	bic.w	r3, r3, #15
 8063b46:	ee07 3a10 	vmov	s14, r3
 8063b4a:	eea7 8a47 	vfms.f32	s16, s14, s14
 8063b4e:	ee70 7a07 	vadd.f32	s15, s0, s14
 8063b52:	ee30 0a00 	vadd.f32	s0, s0, s0
 8063b56:	eec8 5a27 	vdiv.f32	s11, s16, s15
 8063b5a:	eddf 7a07 	vldr	s15, [pc, #28]	; 8063b78 <__ieee754_asinf+0x18c>
 8063b5e:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8063b62:	eed0 7a06 	vfnms.f32	s15, s0, s12
 8063b66:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8063bb4 <__ieee754_asinf+0x1c8>
 8063b6a:	eeb0 6a40 	vmov.f32	s12, s0
 8063b6e:	eea7 6a66 	vfms.f32	s12, s14, s13
 8063b72:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8063b76:	e7aa      	b.n	8063ace <__ieee754_asinf+0xe2>
 8063b78:	b33bbd2e 	.word	0xb33bbd2e
 8063b7c:	3fc90fdb 	.word	0x3fc90fdb
 8063b80:	7149f2ca 	.word	0x7149f2ca
 8063b84:	3811ef08 	.word	0x3811ef08
 8063b88:	3a4f7f04 	.word	0x3a4f7f04
 8063b8c:	3e2aaaab 	.word	0x3e2aaaab
 8063b90:	bd241146 	.word	0xbd241146
 8063b94:	3e4e0aa8 	.word	0x3e4e0aa8
 8063b98:	bea6b090 	.word	0xbea6b090
 8063b9c:	3d9dc62e 	.word	0x3d9dc62e
 8063ba0:	bf303361 	.word	0xbf303361
 8063ba4:	4001572d 	.word	0x4001572d
 8063ba8:	c019d139 	.word	0xc019d139
 8063bac:	3f799999 	.word	0x3f799999
 8063bb0:	333bbd2e 	.word	0x333bbd2e
 8063bb4:	3f490fdb 	.word	0x3f490fdb

08063bb8 <__ieee754_atan2f>:
 8063bb8:	ee10 2a90 	vmov	r2, s1
 8063bbc:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8063bc0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8063bc4:	b510      	push	{r4, lr}
 8063bc6:	eef0 7a40 	vmov.f32	s15, s0
 8063bca:	dc06      	bgt.n	8063bda <__ieee754_atan2f+0x22>
 8063bcc:	ee10 0a10 	vmov	r0, s0
 8063bd0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8063bd4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8063bd8:	dd04      	ble.n	8063be4 <__ieee754_atan2f+0x2c>
 8063bda:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8063bde:	eeb0 0a67 	vmov.f32	s0, s15
 8063be2:	bd10      	pop	{r4, pc}
 8063be4:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8063be8:	d103      	bne.n	8063bf2 <__ieee754_atan2f+0x3a>
 8063bea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8063bee:	f000 be25 	b.w	806483c <atanf>
 8063bf2:	1794      	asrs	r4, r2, #30
 8063bf4:	f004 0402 	and.w	r4, r4, #2
 8063bf8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8063bfc:	b943      	cbnz	r3, 8063c10 <__ieee754_atan2f+0x58>
 8063bfe:	2c02      	cmp	r4, #2
 8063c00:	d05e      	beq.n	8063cc0 <__ieee754_atan2f+0x108>
 8063c02:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8063cd4 <__ieee754_atan2f+0x11c>
 8063c06:	2c03      	cmp	r4, #3
 8063c08:	bf08      	it	eq
 8063c0a:	eef0 7a47 	vmoveq.f32	s15, s14
 8063c0e:	e7e6      	b.n	8063bde <__ieee754_atan2f+0x26>
 8063c10:	b941      	cbnz	r1, 8063c24 <__ieee754_atan2f+0x6c>
 8063c12:	eddf 7a31 	vldr	s15, [pc, #196]	; 8063cd8 <__ieee754_atan2f+0x120>
 8063c16:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8063cdc <__ieee754_atan2f+0x124>
 8063c1a:	2800      	cmp	r0, #0
 8063c1c:	bfb8      	it	lt
 8063c1e:	eef0 7a40 	vmovlt.f32	s15, s0
 8063c22:	e7dc      	b.n	8063bde <__ieee754_atan2f+0x26>
 8063c24:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8063c28:	d110      	bne.n	8063c4c <__ieee754_atan2f+0x94>
 8063c2a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8063c2e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8063c32:	d107      	bne.n	8063c44 <__ieee754_atan2f+0x8c>
 8063c34:	2c02      	cmp	r4, #2
 8063c36:	d846      	bhi.n	8063cc6 <__ieee754_atan2f+0x10e>
 8063c38:	4b29      	ldr	r3, [pc, #164]	; (8063ce0 <__ieee754_atan2f+0x128>)
 8063c3a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8063c3e:	edd4 7a00 	vldr	s15, [r4]
 8063c42:	e7cc      	b.n	8063bde <__ieee754_atan2f+0x26>
 8063c44:	2c02      	cmp	r4, #2
 8063c46:	d841      	bhi.n	8063ccc <__ieee754_atan2f+0x114>
 8063c48:	4b26      	ldr	r3, [pc, #152]	; (8063ce4 <__ieee754_atan2f+0x12c>)
 8063c4a:	e7f6      	b.n	8063c3a <__ieee754_atan2f+0x82>
 8063c4c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8063c50:	d0df      	beq.n	8063c12 <__ieee754_atan2f+0x5a>
 8063c52:	1a5b      	subs	r3, r3, r1
 8063c54:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8063c58:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8063c5c:	da1a      	bge.n	8063c94 <__ieee754_atan2f+0xdc>
 8063c5e:	2a00      	cmp	r2, #0
 8063c60:	da01      	bge.n	8063c66 <__ieee754_atan2f+0xae>
 8063c62:	313c      	adds	r1, #60	; 0x3c
 8063c64:	db19      	blt.n	8063c9a <__ieee754_atan2f+0xe2>
 8063c66:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8063c6a:	f000 febb 	bl	80649e4 <fabsf>
 8063c6e:	f000 fde5 	bl	806483c <atanf>
 8063c72:	eef0 7a40 	vmov.f32	s15, s0
 8063c76:	2c01      	cmp	r4, #1
 8063c78:	d012      	beq.n	8063ca0 <__ieee754_atan2f+0xe8>
 8063c7a:	2c02      	cmp	r4, #2
 8063c7c:	d017      	beq.n	8063cae <__ieee754_atan2f+0xf6>
 8063c7e:	2c00      	cmp	r4, #0
 8063c80:	d0ad      	beq.n	8063bde <__ieee754_atan2f+0x26>
 8063c82:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8063ce8 <__ieee754_atan2f+0x130>
 8063c86:	ee77 7a80 	vadd.f32	s15, s15, s0
 8063c8a:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8063cec <__ieee754_atan2f+0x134>
 8063c8e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8063c92:	e7a4      	b.n	8063bde <__ieee754_atan2f+0x26>
 8063c94:	eddf 7a10 	vldr	s15, [pc, #64]	; 8063cd8 <__ieee754_atan2f+0x120>
 8063c98:	e7ed      	b.n	8063c76 <__ieee754_atan2f+0xbe>
 8063c9a:	eddf 7a15 	vldr	s15, [pc, #84]	; 8063cf0 <__ieee754_atan2f+0x138>
 8063c9e:	e7ea      	b.n	8063c76 <__ieee754_atan2f+0xbe>
 8063ca0:	ee17 3a90 	vmov	r3, s15
 8063ca4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8063ca8:	ee07 3a90 	vmov	s15, r3
 8063cac:	e797      	b.n	8063bde <__ieee754_atan2f+0x26>
 8063cae:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8063ce8 <__ieee754_atan2f+0x130>
 8063cb2:	ee77 7a80 	vadd.f32	s15, s15, s0
 8063cb6:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8063cec <__ieee754_atan2f+0x134>
 8063cba:	ee70 7a67 	vsub.f32	s15, s0, s15
 8063cbe:	e78e      	b.n	8063bde <__ieee754_atan2f+0x26>
 8063cc0:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8063cec <__ieee754_atan2f+0x134>
 8063cc4:	e78b      	b.n	8063bde <__ieee754_atan2f+0x26>
 8063cc6:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8063cf4 <__ieee754_atan2f+0x13c>
 8063cca:	e788      	b.n	8063bde <__ieee754_atan2f+0x26>
 8063ccc:	eddf 7a08 	vldr	s15, [pc, #32]	; 8063cf0 <__ieee754_atan2f+0x138>
 8063cd0:	e785      	b.n	8063bde <__ieee754_atan2f+0x26>
 8063cd2:	bf00      	nop
 8063cd4:	c0490fdb 	.word	0xc0490fdb
 8063cd8:	3fc90fdb 	.word	0x3fc90fdb
 8063cdc:	bfc90fdb 	.word	0xbfc90fdb
 8063ce0:	0807d6c8 	.word	0x0807d6c8
 8063ce4:	0807d6d4 	.word	0x0807d6d4
 8063ce8:	33bbbd2e 	.word	0x33bbbd2e
 8063cec:	40490fdb 	.word	0x40490fdb
 8063cf0:	00000000 	.word	0x00000000
 8063cf4:	3f490fdb 	.word	0x3f490fdb

08063cf8 <__ieee754_rem_pio2f>:
 8063cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8063cfa:	ee10 6a10 	vmov	r6, s0
 8063cfe:	4b8e      	ldr	r3, [pc, #568]	; (8063f38 <__ieee754_rem_pio2f+0x240>)
 8063d00:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8063d04:	429d      	cmp	r5, r3
 8063d06:	b087      	sub	sp, #28
 8063d08:	eef0 7a40 	vmov.f32	s15, s0
 8063d0c:	4604      	mov	r4, r0
 8063d0e:	dc05      	bgt.n	8063d1c <__ieee754_rem_pio2f+0x24>
 8063d10:	2300      	movs	r3, #0
 8063d12:	ed80 0a00 	vstr	s0, [r0]
 8063d16:	6043      	str	r3, [r0, #4]
 8063d18:	2000      	movs	r0, #0
 8063d1a:	e01a      	b.n	8063d52 <__ieee754_rem_pio2f+0x5a>
 8063d1c:	4b87      	ldr	r3, [pc, #540]	; (8063f3c <__ieee754_rem_pio2f+0x244>)
 8063d1e:	429d      	cmp	r5, r3
 8063d20:	dc46      	bgt.n	8063db0 <__ieee754_rem_pio2f+0xb8>
 8063d22:	2e00      	cmp	r6, #0
 8063d24:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8063f40 <__ieee754_rem_pio2f+0x248>
 8063d28:	4b86      	ldr	r3, [pc, #536]	; (8063f44 <__ieee754_rem_pio2f+0x24c>)
 8063d2a:	f025 050f 	bic.w	r5, r5, #15
 8063d2e:	dd1f      	ble.n	8063d70 <__ieee754_rem_pio2f+0x78>
 8063d30:	429d      	cmp	r5, r3
 8063d32:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8063d36:	d00e      	beq.n	8063d56 <__ieee754_rem_pio2f+0x5e>
 8063d38:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8063f48 <__ieee754_rem_pio2f+0x250>
 8063d3c:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8063d40:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8063d44:	ed80 0a00 	vstr	s0, [r0]
 8063d48:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8063d4c:	2001      	movs	r0, #1
 8063d4e:	edc4 7a01 	vstr	s15, [r4, #4]
 8063d52:	b007      	add	sp, #28
 8063d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8063d56:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8063f4c <__ieee754_rem_pio2f+0x254>
 8063d5a:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8063f50 <__ieee754_rem_pio2f+0x258>
 8063d5e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8063d62:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8063d66:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8063d6a:	edc0 6a00 	vstr	s13, [r0]
 8063d6e:	e7eb      	b.n	8063d48 <__ieee754_rem_pio2f+0x50>
 8063d70:	429d      	cmp	r5, r3
 8063d72:	ee77 7a80 	vadd.f32	s15, s15, s0
 8063d76:	d00e      	beq.n	8063d96 <__ieee754_rem_pio2f+0x9e>
 8063d78:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8063f48 <__ieee754_rem_pio2f+0x250>
 8063d7c:	ee37 0a87 	vadd.f32	s0, s15, s14
 8063d80:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8063d84:	ed80 0a00 	vstr	s0, [r0]
 8063d88:	ee77 7a87 	vadd.f32	s15, s15, s14
 8063d8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8063d90:	edc4 7a01 	vstr	s15, [r4, #4]
 8063d94:	e7dd      	b.n	8063d52 <__ieee754_rem_pio2f+0x5a>
 8063d96:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8063f4c <__ieee754_rem_pio2f+0x254>
 8063d9a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8063f50 <__ieee754_rem_pio2f+0x258>
 8063d9e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8063da2:	ee77 6a87 	vadd.f32	s13, s15, s14
 8063da6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8063daa:	edc0 6a00 	vstr	s13, [r0]
 8063dae:	e7eb      	b.n	8063d88 <__ieee754_rem_pio2f+0x90>
 8063db0:	4b68      	ldr	r3, [pc, #416]	; (8063f54 <__ieee754_rem_pio2f+0x25c>)
 8063db2:	429d      	cmp	r5, r3
 8063db4:	dc72      	bgt.n	8063e9c <__ieee754_rem_pio2f+0x1a4>
 8063db6:	f000 fe15 	bl	80649e4 <fabsf>
 8063dba:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8063f58 <__ieee754_rem_pio2f+0x260>
 8063dbe:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8063dc2:	eee0 7a07 	vfma.f32	s15, s0, s14
 8063dc6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8063dca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8063dce:	ee17 0a90 	vmov	r0, s15
 8063dd2:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8063f40 <__ieee754_rem_pio2f+0x248>
 8063dd6:	eea7 0a67 	vfms.f32	s0, s14, s15
 8063dda:	281f      	cmp	r0, #31
 8063ddc:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8063f48 <__ieee754_rem_pio2f+0x250>
 8063de0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8063de4:	eeb1 6a47 	vneg.f32	s12, s14
 8063de8:	ee70 6a67 	vsub.f32	s13, s0, s15
 8063dec:	ee16 2a90 	vmov	r2, s13
 8063df0:	dc1c      	bgt.n	8063e2c <__ieee754_rem_pio2f+0x134>
 8063df2:	495a      	ldr	r1, [pc, #360]	; (8063f5c <__ieee754_rem_pio2f+0x264>)
 8063df4:	1e47      	subs	r7, r0, #1
 8063df6:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8063dfa:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8063dfe:	428b      	cmp	r3, r1
 8063e00:	d014      	beq.n	8063e2c <__ieee754_rem_pio2f+0x134>
 8063e02:	6022      	str	r2, [r4, #0]
 8063e04:	ed94 7a00 	vldr	s14, [r4]
 8063e08:	ee30 0a47 	vsub.f32	s0, s0, s14
 8063e0c:	2e00      	cmp	r6, #0
 8063e0e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8063e12:	ed84 0a01 	vstr	s0, [r4, #4]
 8063e16:	da9c      	bge.n	8063d52 <__ieee754_rem_pio2f+0x5a>
 8063e18:	eeb1 7a47 	vneg.f32	s14, s14
 8063e1c:	eeb1 0a40 	vneg.f32	s0, s0
 8063e20:	ed84 7a00 	vstr	s14, [r4]
 8063e24:	ed84 0a01 	vstr	s0, [r4, #4]
 8063e28:	4240      	negs	r0, r0
 8063e2a:	e792      	b.n	8063d52 <__ieee754_rem_pio2f+0x5a>
 8063e2c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8063e30:	15eb      	asrs	r3, r5, #23
 8063e32:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8063e36:	2d08      	cmp	r5, #8
 8063e38:	dde3      	ble.n	8063e02 <__ieee754_rem_pio2f+0x10a>
 8063e3a:	eddf 7a44 	vldr	s15, [pc, #272]	; 8063f4c <__ieee754_rem_pio2f+0x254>
 8063e3e:	eef0 6a40 	vmov.f32	s13, s0
 8063e42:	eee6 6a27 	vfma.f32	s13, s12, s15
 8063e46:	ee30 0a66 	vsub.f32	s0, s0, s13
 8063e4a:	eea6 0a27 	vfma.f32	s0, s12, s15
 8063e4e:	eddf 7a40 	vldr	s15, [pc, #256]	; 8063f50 <__ieee754_rem_pio2f+0x258>
 8063e52:	ee97 0a27 	vfnms.f32	s0, s14, s15
 8063e56:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8063e5a:	eef0 7a40 	vmov.f32	s15, s0
 8063e5e:	ee15 2a90 	vmov	r2, s11
 8063e62:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8063e66:	1a5b      	subs	r3, r3, r1
 8063e68:	2b19      	cmp	r3, #25
 8063e6a:	dc04      	bgt.n	8063e76 <__ieee754_rem_pio2f+0x17e>
 8063e6c:	edc4 5a00 	vstr	s11, [r4]
 8063e70:	eeb0 0a66 	vmov.f32	s0, s13
 8063e74:	e7c6      	b.n	8063e04 <__ieee754_rem_pio2f+0x10c>
 8063e76:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8063f60 <__ieee754_rem_pio2f+0x268>
 8063e7a:	eeb0 0a66 	vmov.f32	s0, s13
 8063e7e:	eea6 0a25 	vfma.f32	s0, s12, s11
 8063e82:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8063e86:	eddf 6a37 	vldr	s13, [pc, #220]	; 8063f64 <__ieee754_rem_pio2f+0x26c>
 8063e8a:	eee6 7a25 	vfma.f32	s15, s12, s11
 8063e8e:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8063e92:	ee30 7a67 	vsub.f32	s14, s0, s15
 8063e96:	ed84 7a00 	vstr	s14, [r4]
 8063e9a:	e7b3      	b.n	8063e04 <__ieee754_rem_pio2f+0x10c>
 8063e9c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8063ea0:	db06      	blt.n	8063eb0 <__ieee754_rem_pio2f+0x1b8>
 8063ea2:	ee70 7a40 	vsub.f32	s15, s0, s0
 8063ea6:	edc0 7a01 	vstr	s15, [r0, #4]
 8063eaa:	edc0 7a00 	vstr	s15, [r0]
 8063eae:	e733      	b.n	8063d18 <__ieee754_rem_pio2f+0x20>
 8063eb0:	15ea      	asrs	r2, r5, #23
 8063eb2:	3a86      	subs	r2, #134	; 0x86
 8063eb4:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8063eb8:	ee07 3a90 	vmov	s15, r3
 8063ebc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8063ec0:	eddf 6a29 	vldr	s13, [pc, #164]	; 8063f68 <__ieee754_rem_pio2f+0x270>
 8063ec4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8063ec8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8063ecc:	ed8d 7a03 	vstr	s14, [sp, #12]
 8063ed0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8063ed4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8063ed8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8063edc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8063ee0:	ed8d 7a04 	vstr	s14, [sp, #16]
 8063ee4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8063ee8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8063eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8063ef0:	edcd 7a05 	vstr	s15, [sp, #20]
 8063ef4:	d11e      	bne.n	8063f34 <__ieee754_rem_pio2f+0x23c>
 8063ef6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8063efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8063efe:	bf14      	ite	ne
 8063f00:	2302      	movne	r3, #2
 8063f02:	2301      	moveq	r3, #1
 8063f04:	4919      	ldr	r1, [pc, #100]	; (8063f6c <__ieee754_rem_pio2f+0x274>)
 8063f06:	9101      	str	r1, [sp, #4]
 8063f08:	2102      	movs	r1, #2
 8063f0a:	9100      	str	r1, [sp, #0]
 8063f0c:	a803      	add	r0, sp, #12
 8063f0e:	4621      	mov	r1, r4
 8063f10:	f000 f892 	bl	8064038 <__kernel_rem_pio2f>
 8063f14:	2e00      	cmp	r6, #0
 8063f16:	f6bf af1c 	bge.w	8063d52 <__ieee754_rem_pio2f+0x5a>
 8063f1a:	edd4 7a00 	vldr	s15, [r4]
 8063f1e:	eef1 7a67 	vneg.f32	s15, s15
 8063f22:	edc4 7a00 	vstr	s15, [r4]
 8063f26:	edd4 7a01 	vldr	s15, [r4, #4]
 8063f2a:	eef1 7a67 	vneg.f32	s15, s15
 8063f2e:	edc4 7a01 	vstr	s15, [r4, #4]
 8063f32:	e779      	b.n	8063e28 <__ieee754_rem_pio2f+0x130>
 8063f34:	2303      	movs	r3, #3
 8063f36:	e7e5      	b.n	8063f04 <__ieee754_rem_pio2f+0x20c>
 8063f38:	3f490fd8 	.word	0x3f490fd8
 8063f3c:	4016cbe3 	.word	0x4016cbe3
 8063f40:	3fc90f80 	.word	0x3fc90f80
 8063f44:	3fc90fd0 	.word	0x3fc90fd0
 8063f48:	37354443 	.word	0x37354443
 8063f4c:	37354400 	.word	0x37354400
 8063f50:	2e85a308 	.word	0x2e85a308
 8063f54:	43490f80 	.word	0x43490f80
 8063f58:	3f22f984 	.word	0x3f22f984
 8063f5c:	0807d6e0 	.word	0x0807d6e0
 8063f60:	2e85a300 	.word	0x2e85a300
 8063f64:	248d3132 	.word	0x248d3132
 8063f68:	43800000 	.word	0x43800000
 8063f6c:	0807d760 	.word	0x0807d760

08063f70 <__ieee754_sqrtf>:
 8063f70:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8063f74:	4770      	bx	lr
	...

08063f78 <__kernel_cosf>:
 8063f78:	ee10 3a10 	vmov	r3, s0
 8063f7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8063f80:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8063f84:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8063f88:	da05      	bge.n	8063f96 <__kernel_cosf+0x1e>
 8063f8a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8063f8e:	ee17 2a90 	vmov	r2, s15
 8063f92:	2a00      	cmp	r2, #0
 8063f94:	d03d      	beq.n	8064012 <__kernel_cosf+0x9a>
 8063f96:	ee60 5a00 	vmul.f32	s11, s0, s0
 8063f9a:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8064018 <__kernel_cosf+0xa0>
 8063f9e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 806401c <__kernel_cosf+0xa4>
 8063fa2:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8064020 <__kernel_cosf+0xa8>
 8063fa6:	4a1f      	ldr	r2, [pc, #124]	; (8064024 <__kernel_cosf+0xac>)
 8063fa8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8063fac:	4293      	cmp	r3, r2
 8063fae:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8064028 <__kernel_cosf+0xb0>
 8063fb2:	eee7 7a25 	vfma.f32	s15, s14, s11
 8063fb6:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 806402c <__kernel_cosf+0xb4>
 8063fba:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8063fbe:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8064030 <__kernel_cosf+0xb8>
 8063fc2:	eee7 7a25 	vfma.f32	s15, s14, s11
 8063fc6:	eeb0 7a66 	vmov.f32	s14, s13
 8063fca:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8063fce:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8063fd2:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8063fd6:	ee67 6a25 	vmul.f32	s13, s14, s11
 8063fda:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8063fde:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8063fe2:	dc04      	bgt.n	8063fee <__kernel_cosf+0x76>
 8063fe4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8063fe8:	ee36 0a47 	vsub.f32	s0, s12, s14
 8063fec:	4770      	bx	lr
 8063fee:	4a11      	ldr	r2, [pc, #68]	; (8064034 <__kernel_cosf+0xbc>)
 8063ff0:	4293      	cmp	r3, r2
 8063ff2:	bfda      	itte	le
 8063ff4:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8063ff8:	ee06 3a90 	vmovle	s13, r3
 8063ffc:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8064000:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8064004:	ee36 0a66 	vsub.f32	s0, s12, s13
 8064008:	ee77 7ac7 	vsub.f32	s15, s15, s14
 806400c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8064010:	4770      	bx	lr
 8064012:	eeb0 0a46 	vmov.f32	s0, s12
 8064016:	4770      	bx	lr
 8064018:	ad47d74e 	.word	0xad47d74e
 806401c:	310f74f6 	.word	0x310f74f6
 8064020:	3d2aaaab 	.word	0x3d2aaaab
 8064024:	3e999999 	.word	0x3e999999
 8064028:	b493f27c 	.word	0xb493f27c
 806402c:	37d00d01 	.word	0x37d00d01
 8064030:	bab60b61 	.word	0xbab60b61
 8064034:	3f480000 	.word	0x3f480000

08064038 <__kernel_rem_pio2f>:
 8064038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 806403c:	ed2d 8b04 	vpush	{d8-d9}
 8064040:	b0d7      	sub	sp, #348	; 0x15c
 8064042:	4616      	mov	r6, r2
 8064044:	4698      	mov	r8, r3
 8064046:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8064048:	4bbb      	ldr	r3, [pc, #748]	; (8064338 <__kernel_rem_pio2f+0x300>)
 806404a:	9001      	str	r0, [sp, #4]
 806404c:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8064050:	1d33      	adds	r3, r6, #4
 8064052:	460d      	mov	r5, r1
 8064054:	f108 39ff 	add.w	r9, r8, #4294967295	; 0xffffffff
 8064058:	db29      	blt.n	80640ae <__kernel_rem_pio2f+0x76>
 806405a:	1ef1      	subs	r1, r6, #3
 806405c:	bf48      	it	mi
 806405e:	1d31      	addmi	r1, r6, #4
 8064060:	10c9      	asrs	r1, r1, #3
 8064062:	1c4c      	adds	r4, r1, #1
 8064064:	00e3      	lsls	r3, r4, #3
 8064066:	9302      	str	r3, [sp, #8]
 8064068:	9b65      	ldr	r3, [sp, #404]	; 0x194
 806406a:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8064348 <__kernel_rem_pio2f+0x310>
 806406e:	eba1 0009 	sub.w	r0, r1, r9
 8064072:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 8064076:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 806407a:	eb07 0c09 	add.w	ip, r7, r9
 806407e:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 8064082:	2300      	movs	r3, #0
 8064084:	4563      	cmp	r3, ip
 8064086:	dd14      	ble.n	80640b2 <__kernel_rem_pio2f+0x7a>
 8064088:	ab1a      	add	r3, sp, #104	; 0x68
 806408a:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 806408e:	46cc      	mov	ip, r9
 8064090:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 8064094:	f1c8 0b01 	rsb	fp, r8, #1
 8064098:	eb0b 020c 	add.w	r2, fp, ip
 806409c:	4297      	cmp	r7, r2
 806409e:	db27      	blt.n	80640f0 <__kernel_rem_pio2f+0xb8>
 80640a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80640a4:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8064348 <__kernel_rem_pio2f+0x310>
 80640a8:	4618      	mov	r0, r3
 80640aa:	2200      	movs	r2, #0
 80640ac:	e016      	b.n	80640dc <__kernel_rem_pio2f+0xa4>
 80640ae:	2100      	movs	r1, #0
 80640b0:	e7d7      	b.n	8064062 <__kernel_rem_pio2f+0x2a>
 80640b2:	42d8      	cmn	r0, r3
 80640b4:	bf5d      	ittte	pl
 80640b6:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 80640ba:	ee07 2a90 	vmovpl	s15, r2
 80640be:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80640c2:	eef0 7a47 	vmovmi.f32	s15, s14
 80640c6:	ecea 7a01 	vstmia	sl!, {s15}
 80640ca:	3301      	adds	r3, #1
 80640cc:	e7da      	b.n	8064084 <__kernel_rem_pio2f+0x4c>
 80640ce:	ecfe 6a01 	vldmia	lr!, {s13}
 80640d2:	ed90 7a00 	vldr	s14, [r0]
 80640d6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80640da:	3201      	adds	r2, #1
 80640dc:	454a      	cmp	r2, r9
 80640de:	f1a0 0004 	sub.w	r0, r0, #4
 80640e2:	ddf4      	ble.n	80640ce <__kernel_rem_pio2f+0x96>
 80640e4:	ecea 7a01 	vstmia	sl!, {s15}
 80640e8:	3304      	adds	r3, #4
 80640ea:	f10c 0c01 	add.w	ip, ip, #1
 80640ee:	e7d3      	b.n	8064098 <__kernel_rem_pio2f+0x60>
 80640f0:	ab06      	add	r3, sp, #24
 80640f2:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 80640f6:	9304      	str	r3, [sp, #16]
 80640f8:	9b65      	ldr	r3, [sp, #404]	; 0x194
 80640fa:	eddf 8a92 	vldr	s17, [pc, #584]	; 8064344 <__kernel_rem_pio2f+0x30c>
 80640fe:	ed9f 9a90 	vldr	s18, [pc, #576]	; 8064340 <__kernel_rem_pio2f+0x308>
 8064102:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8064106:	9303      	str	r3, [sp, #12]
 8064108:	46ba      	mov	sl, r7
 806410a:	ab56      	add	r3, sp, #344	; 0x158
 806410c:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8064110:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8064114:	ab06      	add	r3, sp, #24
 8064116:	4618      	mov	r0, r3
 8064118:	4652      	mov	r2, sl
 806411a:	2a00      	cmp	r2, #0
 806411c:	dc51      	bgt.n	80641c2 <__kernel_rem_pio2f+0x18a>
 806411e:	4620      	mov	r0, r4
 8064120:	9305      	str	r3, [sp, #20]
 8064122:	f000 fcaf 	bl	8064a84 <scalbnf>
 8064126:	eeb0 8a40 	vmov.f32	s16, s0
 806412a:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 806412e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8064132:	f000 fc5f 	bl	80649f4 <floorf>
 8064136:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 806413a:	eea0 8a67 	vfms.f32	s16, s0, s15
 806413e:	2c00      	cmp	r4, #0
 8064140:	9b05      	ldr	r3, [sp, #20]
 8064142:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8064146:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 806414a:	edcd 7a00 	vstr	s15, [sp]
 806414e:	ee38 8a40 	vsub.f32	s16, s16, s0
 8064152:	dd4b      	ble.n	80641ec <__kernel_rem_pio2f+0x1b4>
 8064154:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 8064158:	aa06      	add	r2, sp, #24
 806415a:	f1c4 0e08 	rsb	lr, r4, #8
 806415e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8064162:	ee17 1a90 	vmov	r1, s15
 8064166:	fa42 f00e 	asr.w	r0, r2, lr
 806416a:	4401      	add	r1, r0
 806416c:	9100      	str	r1, [sp, #0]
 806416e:	fa00 f00e 	lsl.w	r0, r0, lr
 8064172:	a906      	add	r1, sp, #24
 8064174:	1a12      	subs	r2, r2, r0
 8064176:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 806417a:	f1c4 0007 	rsb	r0, r4, #7
 806417e:	fa42 fb00 	asr.w	fp, r2, r0
 8064182:	f1bb 0f00 	cmp.w	fp, #0
 8064186:	dd43      	ble.n	8064210 <__kernel_rem_pio2f+0x1d8>
 8064188:	9a00      	ldr	r2, [sp, #0]
 806418a:	f04f 0e00 	mov.w	lr, #0
 806418e:	3201      	adds	r2, #1
 8064190:	9200      	str	r2, [sp, #0]
 8064192:	4670      	mov	r0, lr
 8064194:	45f2      	cmp	sl, lr
 8064196:	dc6c      	bgt.n	8064272 <__kernel_rem_pio2f+0x23a>
 8064198:	2c00      	cmp	r4, #0
 806419a:	dd04      	ble.n	80641a6 <__kernel_rem_pio2f+0x16e>
 806419c:	2c01      	cmp	r4, #1
 806419e:	d079      	beq.n	8064294 <__kernel_rem_pio2f+0x25c>
 80641a0:	2c02      	cmp	r4, #2
 80641a2:	f000 8082 	beq.w	80642aa <__kernel_rem_pio2f+0x272>
 80641a6:	f1bb 0f02 	cmp.w	fp, #2
 80641aa:	d131      	bne.n	8064210 <__kernel_rem_pio2f+0x1d8>
 80641ac:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80641b0:	ee30 8a48 	vsub.f32	s16, s0, s16
 80641b4:	b360      	cbz	r0, 8064210 <__kernel_rem_pio2f+0x1d8>
 80641b6:	4620      	mov	r0, r4
 80641b8:	f000 fc64 	bl	8064a84 <scalbnf>
 80641bc:	ee38 8a40 	vsub.f32	s16, s16, s0
 80641c0:	e026      	b.n	8064210 <__kernel_rem_pio2f+0x1d8>
 80641c2:	ee60 7a28 	vmul.f32	s15, s0, s17
 80641c6:	3a01      	subs	r2, #1
 80641c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80641cc:	a942      	add	r1, sp, #264	; 0x108
 80641ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80641d2:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 80641d6:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80641da:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80641de:	eca0 0a01 	vstmia	r0!, {s0}
 80641e2:	ed9c 0a00 	vldr	s0, [ip]
 80641e6:	ee37 0a80 	vadd.f32	s0, s15, s0
 80641ea:	e796      	b.n	806411a <__kernel_rem_pio2f+0xe2>
 80641ec:	d107      	bne.n	80641fe <__kernel_rem_pio2f+0x1c6>
 80641ee:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 80641f2:	a906      	add	r1, sp, #24
 80641f4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80641f8:	ea4f 2b22 	mov.w	fp, r2, asr #8
 80641fc:	e7c1      	b.n	8064182 <__kernel_rem_pio2f+0x14a>
 80641fe:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8064202:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8064206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 806420a:	da2f      	bge.n	806426c <__kernel_rem_pio2f+0x234>
 806420c:	f04f 0b00 	mov.w	fp, #0
 8064210:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8064214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8064218:	f040 8098 	bne.w	806434c <__kernel_rem_pio2f+0x314>
 806421c:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8064220:	469c      	mov	ip, r3
 8064222:	2200      	movs	r2, #0
 8064224:	45bc      	cmp	ip, r7
 8064226:	da48      	bge.n	80642ba <__kernel_rem_pio2f+0x282>
 8064228:	2a00      	cmp	r2, #0
 806422a:	d05f      	beq.n	80642ec <__kernel_rem_pio2f+0x2b4>
 806422c:	aa06      	add	r2, sp, #24
 806422e:	3c08      	subs	r4, #8
 8064230:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8064234:	2900      	cmp	r1, #0
 8064236:	d07d      	beq.n	8064334 <__kernel_rem_pio2f+0x2fc>
 8064238:	4620      	mov	r0, r4
 806423a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 806423e:	9301      	str	r3, [sp, #4]
 8064240:	f000 fc20 	bl	8064a84 <scalbnf>
 8064244:	9b01      	ldr	r3, [sp, #4]
 8064246:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8064344 <__kernel_rem_pio2f+0x30c>
 806424a:	4619      	mov	r1, r3
 806424c:	2900      	cmp	r1, #0
 806424e:	f280 80af 	bge.w	80643b0 <__kernel_rem_pio2f+0x378>
 8064252:	4618      	mov	r0, r3
 8064254:	2400      	movs	r4, #0
 8064256:	2800      	cmp	r0, #0
 8064258:	f2c0 80d0 	blt.w	80643fc <__kernel_rem_pio2f+0x3c4>
 806425c:	a942      	add	r1, sp, #264	; 0x108
 806425e:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 8064262:	4a36      	ldr	r2, [pc, #216]	; (806433c <__kernel_rem_pio2f+0x304>)
 8064264:	eddf 7a38 	vldr	s15, [pc, #224]	; 8064348 <__kernel_rem_pio2f+0x310>
 8064268:	2100      	movs	r1, #0
 806426a:	e0bb      	b.n	80643e4 <__kernel_rem_pio2f+0x3ac>
 806426c:	f04f 0b02 	mov.w	fp, #2
 8064270:	e78a      	b.n	8064188 <__kernel_rem_pio2f+0x150>
 8064272:	681a      	ldr	r2, [r3, #0]
 8064274:	b948      	cbnz	r0, 806428a <__kernel_rem_pio2f+0x252>
 8064276:	b11a      	cbz	r2, 8064280 <__kernel_rem_pio2f+0x248>
 8064278:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 806427c:	601a      	str	r2, [r3, #0]
 806427e:	2201      	movs	r2, #1
 8064280:	f10e 0e01 	add.w	lr, lr, #1
 8064284:	3304      	adds	r3, #4
 8064286:	4610      	mov	r0, r2
 8064288:	e784      	b.n	8064194 <__kernel_rem_pio2f+0x15c>
 806428a:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 806428e:	601a      	str	r2, [r3, #0]
 8064290:	4602      	mov	r2, r0
 8064292:	e7f5      	b.n	8064280 <__kernel_rem_pio2f+0x248>
 8064294:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 8064298:	ab06      	add	r3, sp, #24
 806429a:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 806429e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80642a2:	aa06      	add	r2, sp, #24
 80642a4:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 80642a8:	e77d      	b.n	80641a6 <__kernel_rem_pio2f+0x16e>
 80642aa:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 80642ae:	ab06      	add	r3, sp, #24
 80642b0:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80642b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80642b8:	e7f3      	b.n	80642a2 <__kernel_rem_pio2f+0x26a>
 80642ba:	a906      	add	r1, sp, #24
 80642bc:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 80642c0:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80642c4:	4302      	orrs	r2, r0
 80642c6:	e7ad      	b.n	8064224 <__kernel_rem_pio2f+0x1ec>
 80642c8:	3001      	adds	r0, #1
 80642ca:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80642ce:	2a00      	cmp	r2, #0
 80642d0:	d0fa      	beq.n	80642c8 <__kernel_rem_pio2f+0x290>
 80642d2:	a91a      	add	r1, sp, #104	; 0x68
 80642d4:	eb0a 0208 	add.w	r2, sl, r8
 80642d8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80642dc:	f10a 0301 	add.w	r3, sl, #1
 80642e0:	eb0a 0100 	add.w	r1, sl, r0
 80642e4:	4299      	cmp	r1, r3
 80642e6:	da04      	bge.n	80642f2 <__kernel_rem_pio2f+0x2ba>
 80642e8:	468a      	mov	sl, r1
 80642ea:	e70e      	b.n	806410a <__kernel_rem_pio2f+0xd2>
 80642ec:	9b04      	ldr	r3, [sp, #16]
 80642ee:	2001      	movs	r0, #1
 80642f0:	e7eb      	b.n	80642ca <__kernel_rem_pio2f+0x292>
 80642f2:	9803      	ldr	r0, [sp, #12]
 80642f4:	f8dd c004 	ldr.w	ip, [sp, #4]
 80642f8:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80642fc:	9000      	str	r0, [sp, #0]
 80642fe:	ee07 0a90 	vmov	s15, r0
 8064302:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8064306:	2000      	movs	r0, #0
 8064308:	ece2 7a01 	vstmia	r2!, {s15}
 806430c:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8064348 <__kernel_rem_pio2f+0x310>
 8064310:	4696      	mov	lr, r2
 8064312:	4548      	cmp	r0, r9
 8064314:	dd06      	ble.n	8064324 <__kernel_rem_pio2f+0x2ec>
 8064316:	a842      	add	r0, sp, #264	; 0x108
 8064318:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 806431c:	edc0 7a00 	vstr	s15, [r0]
 8064320:	3301      	adds	r3, #1
 8064322:	e7df      	b.n	80642e4 <__kernel_rem_pio2f+0x2ac>
 8064324:	ecfc 6a01 	vldmia	ip!, {s13}
 8064328:	ed3e 7a01 	vldmdb	lr!, {s14}
 806432c:	3001      	adds	r0, #1
 806432e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8064332:	e7ee      	b.n	8064312 <__kernel_rem_pio2f+0x2da>
 8064334:	3b01      	subs	r3, #1
 8064336:	e779      	b.n	806422c <__kernel_rem_pio2f+0x1f4>
 8064338:	0807daa4 	.word	0x0807daa4
 806433c:	0807da78 	.word	0x0807da78
 8064340:	43800000 	.word	0x43800000
 8064344:	3b800000 	.word	0x3b800000
 8064348:	00000000 	.word	0x00000000
 806434c:	9b02      	ldr	r3, [sp, #8]
 806434e:	eeb0 0a48 	vmov.f32	s0, s16
 8064352:	1b98      	subs	r0, r3, r6
 8064354:	f000 fb96 	bl	8064a84 <scalbnf>
 8064358:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8064340 <__kernel_rem_pio2f+0x308>
 806435c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8064360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8064364:	db1b      	blt.n	806439e <__kernel_rem_pio2f+0x366>
 8064366:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8064344 <__kernel_rem_pio2f+0x30c>
 806436a:	ee60 7a27 	vmul.f32	s15, s0, s15
 806436e:	aa06      	add	r2, sp, #24
 8064370:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8064374:	a906      	add	r1, sp, #24
 8064376:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 806437a:	3408      	adds	r4, #8
 806437c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8064380:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8064384:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8064388:	ee10 3a10 	vmov	r3, s0
 806438c:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8064390:	ee17 2a90 	vmov	r2, s15
 8064394:	f10a 0301 	add.w	r3, sl, #1
 8064398:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 806439c:	e74c      	b.n	8064238 <__kernel_rem_pio2f+0x200>
 806439e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80643a2:	aa06      	add	r2, sp, #24
 80643a4:	ee10 3a10 	vmov	r3, s0
 80643a8:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 80643ac:	4653      	mov	r3, sl
 80643ae:	e743      	b.n	8064238 <__kernel_rem_pio2f+0x200>
 80643b0:	aa42      	add	r2, sp, #264	; 0x108
 80643b2:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 80643b6:	aa06      	add	r2, sp, #24
 80643b8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80643bc:	9201      	str	r2, [sp, #4]
 80643be:	ee07 2a90 	vmov	s15, r2
 80643c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80643c6:	3901      	subs	r1, #1
 80643c8:	ee67 7a80 	vmul.f32	s15, s15, s0
 80643cc:	ee20 0a07 	vmul.f32	s0, s0, s14
 80643d0:	edc0 7a00 	vstr	s15, [r0]
 80643d4:	e73a      	b.n	806424c <__kernel_rem_pio2f+0x214>
 80643d6:	ecf2 6a01 	vldmia	r2!, {s13}
 80643da:	ecb6 7a01 	vldmia	r6!, {s14}
 80643de:	eee6 7a87 	vfma.f32	s15, s13, s14
 80643e2:	3101      	adds	r1, #1
 80643e4:	42b9      	cmp	r1, r7
 80643e6:	dc01      	bgt.n	80643ec <__kernel_rem_pio2f+0x3b4>
 80643e8:	428c      	cmp	r4, r1
 80643ea:	daf4      	bge.n	80643d6 <__kernel_rem_pio2f+0x39e>
 80643ec:	aa56      	add	r2, sp, #344	; 0x158
 80643ee:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 80643f2:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 80643f6:	3801      	subs	r0, #1
 80643f8:	3401      	adds	r4, #1
 80643fa:	e72c      	b.n	8064256 <__kernel_rem_pio2f+0x21e>
 80643fc:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80643fe:	2a02      	cmp	r2, #2
 8064400:	dc0a      	bgt.n	8064418 <__kernel_rem_pio2f+0x3e0>
 8064402:	2a00      	cmp	r2, #0
 8064404:	dc61      	bgt.n	80644ca <__kernel_rem_pio2f+0x492>
 8064406:	d03c      	beq.n	8064482 <__kernel_rem_pio2f+0x44a>
 8064408:	9b00      	ldr	r3, [sp, #0]
 806440a:	f003 0007 	and.w	r0, r3, #7
 806440e:	b057      	add	sp, #348	; 0x15c
 8064410:	ecbd 8b04 	vpop	{d8-d9}
 8064414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8064418:	9a64      	ldr	r2, [sp, #400]	; 0x190
 806441a:	2a03      	cmp	r2, #3
 806441c:	d1f4      	bne.n	8064408 <__kernel_rem_pio2f+0x3d0>
 806441e:	aa2e      	add	r2, sp, #184	; 0xb8
 8064420:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8064424:	4608      	mov	r0, r1
 8064426:	461c      	mov	r4, r3
 8064428:	2c00      	cmp	r4, #0
 806442a:	f1a0 0004 	sub.w	r0, r0, #4
 806442e:	dc59      	bgt.n	80644e4 <__kernel_rem_pio2f+0x4ac>
 8064430:	4618      	mov	r0, r3
 8064432:	2801      	cmp	r0, #1
 8064434:	f1a1 0104 	sub.w	r1, r1, #4
 8064438:	dc64      	bgt.n	8064504 <__kernel_rem_pio2f+0x4cc>
 806443a:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 8064348 <__kernel_rem_pio2f+0x310>
 806443e:	2b01      	cmp	r3, #1
 8064440:	dc70      	bgt.n	8064524 <__kernel_rem_pio2f+0x4ec>
 8064442:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8064446:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 806444a:	f1bb 0f00 	cmp.w	fp, #0
 806444e:	d172      	bne.n	8064536 <__kernel_rem_pio2f+0x4fe>
 8064450:	edc5 6a00 	vstr	s13, [r5]
 8064454:	ed85 7a01 	vstr	s14, [r5, #4]
 8064458:	edc5 7a02 	vstr	s15, [r5, #8]
 806445c:	e7d4      	b.n	8064408 <__kernel_rem_pio2f+0x3d0>
 806445e:	aa2e      	add	r2, sp, #184	; 0xb8
 8064460:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8064464:	ed91 7a00 	vldr	s14, [r1]
 8064468:	ee77 7a87 	vadd.f32	s15, s15, s14
 806446c:	3b01      	subs	r3, #1
 806446e:	2b00      	cmp	r3, #0
 8064470:	daf5      	bge.n	806445e <__kernel_rem_pio2f+0x426>
 8064472:	f1bb 0f00 	cmp.w	fp, #0
 8064476:	d001      	beq.n	806447c <__kernel_rem_pio2f+0x444>
 8064478:	eef1 7a67 	vneg.f32	s15, s15
 806447c:	edc5 7a00 	vstr	s15, [r5]
 8064480:	e7c2      	b.n	8064408 <__kernel_rem_pio2f+0x3d0>
 8064482:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8064348 <__kernel_rem_pio2f+0x310>
 8064486:	e7f2      	b.n	806446e <__kernel_rem_pio2f+0x436>
 8064488:	aa2e      	add	r2, sp, #184	; 0xb8
 806448a:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 806448e:	edd0 7a00 	vldr	s15, [r0]
 8064492:	ee37 7a27 	vadd.f32	s14, s14, s15
 8064496:	3901      	subs	r1, #1
 8064498:	2900      	cmp	r1, #0
 806449a:	daf5      	bge.n	8064488 <__kernel_rem_pio2f+0x450>
 806449c:	f1bb 0f00 	cmp.w	fp, #0
 80644a0:	d017      	beq.n	80644d2 <__kernel_rem_pio2f+0x49a>
 80644a2:	eef1 7a47 	vneg.f32	s15, s14
 80644a6:	edc5 7a00 	vstr	s15, [r5]
 80644aa:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 80644ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80644b2:	a82f      	add	r0, sp, #188	; 0xbc
 80644b4:	2101      	movs	r1, #1
 80644b6:	428b      	cmp	r3, r1
 80644b8:	da0e      	bge.n	80644d8 <__kernel_rem_pio2f+0x4a0>
 80644ba:	f1bb 0f00 	cmp.w	fp, #0
 80644be:	d001      	beq.n	80644c4 <__kernel_rem_pio2f+0x48c>
 80644c0:	eef1 7a67 	vneg.f32	s15, s15
 80644c4:	edc5 7a01 	vstr	s15, [r5, #4]
 80644c8:	e79e      	b.n	8064408 <__kernel_rem_pio2f+0x3d0>
 80644ca:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 8064348 <__kernel_rem_pio2f+0x310>
 80644ce:	4619      	mov	r1, r3
 80644d0:	e7e2      	b.n	8064498 <__kernel_rem_pio2f+0x460>
 80644d2:	eef0 7a47 	vmov.f32	s15, s14
 80644d6:	e7e6      	b.n	80644a6 <__kernel_rem_pio2f+0x46e>
 80644d8:	ecb0 7a01 	vldmia	r0!, {s14}
 80644dc:	3101      	adds	r1, #1
 80644de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80644e2:	e7e8      	b.n	80644b6 <__kernel_rem_pio2f+0x47e>
 80644e4:	edd0 7a00 	vldr	s15, [r0]
 80644e8:	edd0 6a01 	vldr	s13, [r0, #4]
 80644ec:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80644f0:	3c01      	subs	r4, #1
 80644f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80644f6:	ed80 7a00 	vstr	s14, [r0]
 80644fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80644fe:	edc0 7a01 	vstr	s15, [r0, #4]
 8064502:	e791      	b.n	8064428 <__kernel_rem_pio2f+0x3f0>
 8064504:	edd1 7a00 	vldr	s15, [r1]
 8064508:	edd1 6a01 	vldr	s13, [r1, #4]
 806450c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8064510:	3801      	subs	r0, #1
 8064512:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8064516:	ed81 7a00 	vstr	s14, [r1]
 806451a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 806451e:	edc1 7a01 	vstr	s15, [r1, #4]
 8064522:	e786      	b.n	8064432 <__kernel_rem_pio2f+0x3fa>
 8064524:	aa2e      	add	r2, sp, #184	; 0xb8
 8064526:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 806452a:	ed91 7a00 	vldr	s14, [r1]
 806452e:	3b01      	subs	r3, #1
 8064530:	ee77 7a87 	vadd.f32	s15, s15, s14
 8064534:	e783      	b.n	806443e <__kernel_rem_pio2f+0x406>
 8064536:	eef1 6a66 	vneg.f32	s13, s13
 806453a:	eeb1 7a47 	vneg.f32	s14, s14
 806453e:	edc5 6a00 	vstr	s13, [r5]
 8064542:	ed85 7a01 	vstr	s14, [r5, #4]
 8064546:	eef1 7a67 	vneg.f32	s15, s15
 806454a:	e785      	b.n	8064458 <__kernel_rem_pio2f+0x420>

0806454c <__kernel_sinf>:
 806454c:	ee10 3a10 	vmov	r3, s0
 8064550:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8064554:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8064558:	da04      	bge.n	8064564 <__kernel_sinf+0x18>
 806455a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 806455e:	ee17 3a90 	vmov	r3, s15
 8064562:	b35b      	cbz	r3, 80645bc <__kernel_sinf+0x70>
 8064564:	ee20 7a00 	vmul.f32	s14, s0, s0
 8064568:	eddf 7a15 	vldr	s15, [pc, #84]	; 80645c0 <__kernel_sinf+0x74>
 806456c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80645c4 <__kernel_sinf+0x78>
 8064570:	eea7 6a27 	vfma.f32	s12, s14, s15
 8064574:	eddf 7a14 	vldr	s15, [pc, #80]	; 80645c8 <__kernel_sinf+0x7c>
 8064578:	eee6 7a07 	vfma.f32	s15, s12, s14
 806457c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80645cc <__kernel_sinf+0x80>
 8064580:	eea7 6a87 	vfma.f32	s12, s15, s14
 8064584:	eddf 7a12 	vldr	s15, [pc, #72]	; 80645d0 <__kernel_sinf+0x84>
 8064588:	ee60 6a07 	vmul.f32	s13, s0, s14
 806458c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8064590:	b930      	cbnz	r0, 80645a0 <__kernel_sinf+0x54>
 8064592:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80645d4 <__kernel_sinf+0x88>
 8064596:	eea7 6a27 	vfma.f32	s12, s14, s15
 806459a:	eea6 0a26 	vfma.f32	s0, s12, s13
 806459e:	4770      	bx	lr
 80645a0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80645a4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80645a8:	eee0 7a86 	vfma.f32	s15, s1, s12
 80645ac:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80645b0:	eddf 7a09 	vldr	s15, [pc, #36]	; 80645d8 <__kernel_sinf+0x8c>
 80645b4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80645b8:	ee30 0a60 	vsub.f32	s0, s0, s1
 80645bc:	4770      	bx	lr
 80645be:	bf00      	nop
 80645c0:	2f2ec9d3 	.word	0x2f2ec9d3
 80645c4:	b2d72f34 	.word	0xb2d72f34
 80645c8:	3638ef1b 	.word	0x3638ef1b
 80645cc:	b9500d01 	.word	0xb9500d01
 80645d0:	3c088889 	.word	0x3c088889
 80645d4:	be2aaaab 	.word	0xbe2aaaab
 80645d8:	3e2aaaab 	.word	0x3e2aaaab

080645dc <fabs>:
 80645dc:	ec51 0b10 	vmov	r0, r1, d0
 80645e0:	ee10 2a10 	vmov	r2, s0
 80645e4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80645e8:	ec43 2b10 	vmov	d0, r2, r3
 80645ec:	4770      	bx	lr

080645ee <finite>:
 80645ee:	b082      	sub	sp, #8
 80645f0:	ed8d 0b00 	vstr	d0, [sp]
 80645f4:	9801      	ldr	r0, [sp, #4]
 80645f6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80645fa:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80645fe:	0fc0      	lsrs	r0, r0, #31
 8064600:	b002      	add	sp, #8
 8064602:	4770      	bx	lr
 8064604:	0000      	movs	r0, r0
	...

08064608 <nan>:
 8064608:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8064610 <nan+0x8>
 806460c:	4770      	bx	lr
 806460e:	bf00      	nop
 8064610:	00000000 	.word	0x00000000
 8064614:	7ff80000 	.word	0x7ff80000

08064618 <rint>:
 8064618:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 806461a:	ec51 0b10 	vmov	r0, r1, d0
 806461e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8064622:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8064626:	2e13      	cmp	r6, #19
 8064628:	ee10 4a10 	vmov	r4, s0
 806462c:	460b      	mov	r3, r1
 806462e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8064632:	dc58      	bgt.n	80646e6 <rint+0xce>
 8064634:	2e00      	cmp	r6, #0
 8064636:	da2b      	bge.n	8064690 <rint+0x78>
 8064638:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 806463c:	4302      	orrs	r2, r0
 806463e:	d023      	beq.n	8064688 <rint+0x70>
 8064640:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8064644:	4302      	orrs	r2, r0
 8064646:	4254      	negs	r4, r2
 8064648:	4314      	orrs	r4, r2
 806464a:	0c4b      	lsrs	r3, r1, #17
 806464c:	0b24      	lsrs	r4, r4, #12
 806464e:	045b      	lsls	r3, r3, #17
 8064650:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8064654:	ea44 0103 	orr.w	r1, r4, r3
 8064658:	4b32      	ldr	r3, [pc, #200]	; (8064724 <rint+0x10c>)
 806465a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 806465e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8064662:	4602      	mov	r2, r0
 8064664:	460b      	mov	r3, r1
 8064666:	4630      	mov	r0, r6
 8064668:	4639      	mov	r1, r7
 806466a:	f7db fe0f 	bl	804028c <__adddf3>
 806466e:	e9cd 0100 	strd	r0, r1, [sp]
 8064672:	463b      	mov	r3, r7
 8064674:	e9dd 0100 	ldrd	r0, r1, [sp]
 8064678:	4632      	mov	r2, r6
 806467a:	f7db fe05 	bl	8040288 <__aeabi_dsub>
 806467e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8064682:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8064686:	4639      	mov	r1, r7
 8064688:	ec41 0b10 	vmov	d0, r0, r1
 806468c:	b003      	add	sp, #12
 806468e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8064690:	4a25      	ldr	r2, [pc, #148]	; (8064728 <rint+0x110>)
 8064692:	4132      	asrs	r2, r6
 8064694:	ea01 0702 	and.w	r7, r1, r2
 8064698:	4307      	orrs	r7, r0
 806469a:	d0f5      	beq.n	8064688 <rint+0x70>
 806469c:	0851      	lsrs	r1, r2, #1
 806469e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 80646a2:	4314      	orrs	r4, r2
 80646a4:	d00c      	beq.n	80646c0 <rint+0xa8>
 80646a6:	ea23 0201 	bic.w	r2, r3, r1
 80646aa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80646ae:	2e13      	cmp	r6, #19
 80646b0:	fa43 f606 	asr.w	r6, r3, r6
 80646b4:	bf0c      	ite	eq
 80646b6:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80646ba:	2400      	movne	r4, #0
 80646bc:	ea42 0306 	orr.w	r3, r2, r6
 80646c0:	4918      	ldr	r1, [pc, #96]	; (8064724 <rint+0x10c>)
 80646c2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80646c6:	4622      	mov	r2, r4
 80646c8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80646cc:	4620      	mov	r0, r4
 80646ce:	4629      	mov	r1, r5
 80646d0:	f7db fddc 	bl	804028c <__adddf3>
 80646d4:	e9cd 0100 	strd	r0, r1, [sp]
 80646d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80646dc:	4622      	mov	r2, r4
 80646de:	462b      	mov	r3, r5
 80646e0:	f7db fdd2 	bl	8040288 <__aeabi_dsub>
 80646e4:	e7d0      	b.n	8064688 <rint+0x70>
 80646e6:	2e33      	cmp	r6, #51	; 0x33
 80646e8:	dd07      	ble.n	80646fa <rint+0xe2>
 80646ea:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80646ee:	d1cb      	bne.n	8064688 <rint+0x70>
 80646f0:	ee10 2a10 	vmov	r2, s0
 80646f4:	f7db fdca 	bl	804028c <__adddf3>
 80646f8:	e7c6      	b.n	8064688 <rint+0x70>
 80646fa:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80646fe:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8064702:	40d6      	lsrs	r6, r2
 8064704:	4230      	tst	r0, r6
 8064706:	d0bf      	beq.n	8064688 <rint+0x70>
 8064708:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 806470c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8064710:	bf1f      	itttt	ne
 8064712:	ea24 0101 	bicne.w	r1, r4, r1
 8064716:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 806471a:	fa44 f202 	asrne.w	r2, r4, r2
 806471e:	ea41 0402 	orrne.w	r4, r1, r2
 8064722:	e7cd      	b.n	80646c0 <rint+0xa8>
 8064724:	0807dab0 	.word	0x0807dab0
 8064728:	000fffff 	.word	0x000fffff
 806472c:	00000000 	.word	0x00000000

08064730 <scalbn>:
 8064730:	b570      	push	{r4, r5, r6, lr}
 8064732:	ec55 4b10 	vmov	r4, r5, d0
 8064736:	f3c5 520a 	ubfx	r2, r5, #20, #11
 806473a:	4606      	mov	r6, r0
 806473c:	462b      	mov	r3, r5
 806473e:	b99a      	cbnz	r2, 8064768 <scalbn+0x38>
 8064740:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8064744:	4323      	orrs	r3, r4
 8064746:	d036      	beq.n	80647b6 <scalbn+0x86>
 8064748:	4b39      	ldr	r3, [pc, #228]	; (8064830 <scalbn+0x100>)
 806474a:	4629      	mov	r1, r5
 806474c:	ee10 0a10 	vmov	r0, s0
 8064750:	2200      	movs	r2, #0
 8064752:	f7db ff51 	bl	80405f8 <__aeabi_dmul>
 8064756:	4b37      	ldr	r3, [pc, #220]	; (8064834 <scalbn+0x104>)
 8064758:	429e      	cmp	r6, r3
 806475a:	4604      	mov	r4, r0
 806475c:	460d      	mov	r5, r1
 806475e:	da10      	bge.n	8064782 <scalbn+0x52>
 8064760:	a32b      	add	r3, pc, #172	; (adr r3, 8064810 <scalbn+0xe0>)
 8064762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8064766:	e03a      	b.n	80647de <scalbn+0xae>
 8064768:	f240 71ff 	movw	r1, #2047	; 0x7ff
 806476c:	428a      	cmp	r2, r1
 806476e:	d10c      	bne.n	806478a <scalbn+0x5a>
 8064770:	ee10 2a10 	vmov	r2, s0
 8064774:	4620      	mov	r0, r4
 8064776:	4629      	mov	r1, r5
 8064778:	f7db fd88 	bl	804028c <__adddf3>
 806477c:	4604      	mov	r4, r0
 806477e:	460d      	mov	r5, r1
 8064780:	e019      	b.n	80647b6 <scalbn+0x86>
 8064782:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8064786:	460b      	mov	r3, r1
 8064788:	3a36      	subs	r2, #54	; 0x36
 806478a:	4432      	add	r2, r6
 806478c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8064790:	428a      	cmp	r2, r1
 8064792:	dd08      	ble.n	80647a6 <scalbn+0x76>
 8064794:	2d00      	cmp	r5, #0
 8064796:	a120      	add	r1, pc, #128	; (adr r1, 8064818 <scalbn+0xe8>)
 8064798:	e9d1 0100 	ldrd	r0, r1, [r1]
 806479c:	da1c      	bge.n	80647d8 <scalbn+0xa8>
 806479e:	a120      	add	r1, pc, #128	; (adr r1, 8064820 <scalbn+0xf0>)
 80647a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80647a4:	e018      	b.n	80647d8 <scalbn+0xa8>
 80647a6:	2a00      	cmp	r2, #0
 80647a8:	dd08      	ble.n	80647bc <scalbn+0x8c>
 80647aa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80647ae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80647b2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80647b6:	ec45 4b10 	vmov	d0, r4, r5
 80647ba:	bd70      	pop	{r4, r5, r6, pc}
 80647bc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80647c0:	da19      	bge.n	80647f6 <scalbn+0xc6>
 80647c2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80647c6:	429e      	cmp	r6, r3
 80647c8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80647cc:	dd0a      	ble.n	80647e4 <scalbn+0xb4>
 80647ce:	a112      	add	r1, pc, #72	; (adr r1, 8064818 <scalbn+0xe8>)
 80647d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80647d4:	2b00      	cmp	r3, #0
 80647d6:	d1e2      	bne.n	806479e <scalbn+0x6e>
 80647d8:	a30f      	add	r3, pc, #60	; (adr r3, 8064818 <scalbn+0xe8>)
 80647da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80647de:	f7db ff0b 	bl	80405f8 <__aeabi_dmul>
 80647e2:	e7cb      	b.n	806477c <scalbn+0x4c>
 80647e4:	a10a      	add	r1, pc, #40	; (adr r1, 8064810 <scalbn+0xe0>)
 80647e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80647ea:	2b00      	cmp	r3, #0
 80647ec:	d0b8      	beq.n	8064760 <scalbn+0x30>
 80647ee:	a10e      	add	r1, pc, #56	; (adr r1, 8064828 <scalbn+0xf8>)
 80647f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80647f4:	e7b4      	b.n	8064760 <scalbn+0x30>
 80647f6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80647fa:	3236      	adds	r2, #54	; 0x36
 80647fc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8064800:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8064804:	4620      	mov	r0, r4
 8064806:	4b0c      	ldr	r3, [pc, #48]	; (8064838 <scalbn+0x108>)
 8064808:	2200      	movs	r2, #0
 806480a:	e7e8      	b.n	80647de <scalbn+0xae>
 806480c:	f3af 8000 	nop.w
 8064810:	c2f8f359 	.word	0xc2f8f359
 8064814:	01a56e1f 	.word	0x01a56e1f
 8064818:	8800759c 	.word	0x8800759c
 806481c:	7e37e43c 	.word	0x7e37e43c
 8064820:	8800759c 	.word	0x8800759c
 8064824:	fe37e43c 	.word	0xfe37e43c
 8064828:	c2f8f359 	.word	0xc2f8f359
 806482c:	81a56e1f 	.word	0x81a56e1f
 8064830:	43500000 	.word	0x43500000
 8064834:	ffff3cb0 	.word	0xffff3cb0
 8064838:	3c900000 	.word	0x3c900000

0806483c <atanf>:
 806483c:	b538      	push	{r3, r4, r5, lr}
 806483e:	ee10 5a10 	vmov	r5, s0
 8064842:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8064846:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 806484a:	eef0 7a40 	vmov.f32	s15, s0
 806484e:	db10      	blt.n	8064872 <atanf+0x36>
 8064850:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8064854:	dd04      	ble.n	8064860 <atanf+0x24>
 8064856:	ee70 7a00 	vadd.f32	s15, s0, s0
 806485a:	eeb0 0a67 	vmov.f32	s0, s15
 806485e:	bd38      	pop	{r3, r4, r5, pc}
 8064860:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8064998 <atanf+0x15c>
 8064864:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 806499c <atanf+0x160>
 8064868:	2d00      	cmp	r5, #0
 806486a:	bfd8      	it	le
 806486c:	eef0 7a40 	vmovle.f32	s15, s0
 8064870:	e7f3      	b.n	806485a <atanf+0x1e>
 8064872:	4b4b      	ldr	r3, [pc, #300]	; (80649a0 <atanf+0x164>)
 8064874:	429c      	cmp	r4, r3
 8064876:	dc10      	bgt.n	806489a <atanf+0x5e>
 8064878:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 806487c:	da0a      	bge.n	8064894 <atanf+0x58>
 806487e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80649a4 <atanf+0x168>
 8064882:	ee30 7a07 	vadd.f32	s14, s0, s14
 8064886:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 806488a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 806488e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8064892:	dce2      	bgt.n	806485a <atanf+0x1e>
 8064894:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8064898:	e013      	b.n	80648c2 <atanf+0x86>
 806489a:	f000 f8a3 	bl	80649e4 <fabsf>
 806489e:	4b42      	ldr	r3, [pc, #264]	; (80649a8 <atanf+0x16c>)
 80648a0:	429c      	cmp	r4, r3
 80648a2:	dc4f      	bgt.n	8064944 <atanf+0x108>
 80648a4:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80648a8:	429c      	cmp	r4, r3
 80648aa:	dc41      	bgt.n	8064930 <atanf+0xf4>
 80648ac:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80648b0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80648b4:	eea0 7a27 	vfma.f32	s14, s0, s15
 80648b8:	2300      	movs	r3, #0
 80648ba:	ee30 0a27 	vadd.f32	s0, s0, s15
 80648be:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80648c2:	1c5a      	adds	r2, r3, #1
 80648c4:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80648c8:	eddf 5a38 	vldr	s11, [pc, #224]	; 80649ac <atanf+0x170>
 80648cc:	ed9f 6a38 	vldr	s12, [pc, #224]	; 80649b0 <atanf+0x174>
 80648d0:	ed9f 5a38 	vldr	s10, [pc, #224]	; 80649b4 <atanf+0x178>
 80648d4:	ed9f 0a38 	vldr	s0, [pc, #224]	; 80649b8 <atanf+0x17c>
 80648d8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80648dc:	eea7 6a25 	vfma.f32	s12, s14, s11
 80648e0:	eddf 5a36 	vldr	s11, [pc, #216]	; 80649bc <atanf+0x180>
 80648e4:	eee6 5a07 	vfma.f32	s11, s12, s14
 80648e8:	ed9f 6a35 	vldr	s12, [pc, #212]	; 80649c0 <atanf+0x184>
 80648ec:	eea5 6a87 	vfma.f32	s12, s11, s14
 80648f0:	eddf 5a34 	vldr	s11, [pc, #208]	; 80649c4 <atanf+0x188>
 80648f4:	eee6 5a07 	vfma.f32	s11, s12, s14
 80648f8:	ed9f 6a33 	vldr	s12, [pc, #204]	; 80649c8 <atanf+0x18c>
 80648fc:	eea5 6a87 	vfma.f32	s12, s11, s14
 8064900:	eddf 5a32 	vldr	s11, [pc, #200]	; 80649cc <atanf+0x190>
 8064904:	eee7 5a05 	vfma.f32	s11, s14, s10
 8064908:	ed9f 5a31 	vldr	s10, [pc, #196]	; 80649d0 <atanf+0x194>
 806490c:	eea5 5a87 	vfma.f32	s10, s11, s14
 8064910:	eddf 5a30 	vldr	s11, [pc, #192]	; 80649d4 <atanf+0x198>
 8064914:	eee5 5a07 	vfma.f32	s11, s10, s14
 8064918:	eea5 0a87 	vfma.f32	s0, s11, s14
 806491c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8064920:	eea6 0a26 	vfma.f32	s0, s12, s13
 8064924:	ee27 0a80 	vmul.f32	s0, s15, s0
 8064928:	d121      	bne.n	806496e <atanf+0x132>
 806492a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 806492e:	e794      	b.n	806485a <atanf+0x1e>
 8064930:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8064934:	ee30 7a67 	vsub.f32	s14, s0, s15
 8064938:	ee30 0a27 	vadd.f32	s0, s0, s15
 806493c:	2301      	movs	r3, #1
 806493e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8064942:	e7be      	b.n	80648c2 <atanf+0x86>
 8064944:	4b24      	ldr	r3, [pc, #144]	; (80649d8 <atanf+0x19c>)
 8064946:	429c      	cmp	r4, r3
 8064948:	dc0b      	bgt.n	8064962 <atanf+0x126>
 806494a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 806494e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8064952:	eea0 7a27 	vfma.f32	s14, s0, s15
 8064956:	2302      	movs	r3, #2
 8064958:	ee70 6a67 	vsub.f32	s13, s0, s15
 806495c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8064960:	e7af      	b.n	80648c2 <atanf+0x86>
 8064962:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8064966:	eec7 7a00 	vdiv.f32	s15, s14, s0
 806496a:	2303      	movs	r3, #3
 806496c:	e7a9      	b.n	80648c2 <atanf+0x86>
 806496e:	4a1b      	ldr	r2, [pc, #108]	; (80649dc <atanf+0x1a0>)
 8064970:	491b      	ldr	r1, [pc, #108]	; (80649e0 <atanf+0x1a4>)
 8064972:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8064976:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 806497a:	ed93 7a00 	vldr	s14, [r3]
 806497e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8064982:	2d00      	cmp	r5, #0
 8064984:	ee70 7a67 	vsub.f32	s15, s0, s15
 8064988:	ed92 0a00 	vldr	s0, [r2]
 806498c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8064990:	bfb8      	it	lt
 8064992:	eef1 7a67 	vneglt.f32	s15, s15
 8064996:	e760      	b.n	806485a <atanf+0x1e>
 8064998:	3fc90fdb 	.word	0x3fc90fdb
 806499c:	bfc90fdb 	.word	0xbfc90fdb
 80649a0:	3edfffff 	.word	0x3edfffff
 80649a4:	7149f2ca 	.word	0x7149f2ca
 80649a8:	3f97ffff 	.word	0x3f97ffff
 80649ac:	3c8569d7 	.word	0x3c8569d7
 80649b0:	3d4bda59 	.word	0x3d4bda59
 80649b4:	bd15a221 	.word	0xbd15a221
 80649b8:	be4ccccd 	.word	0xbe4ccccd
 80649bc:	3d886b35 	.word	0x3d886b35
 80649c0:	3dba2e6e 	.word	0x3dba2e6e
 80649c4:	3e124925 	.word	0x3e124925
 80649c8:	3eaaaaab 	.word	0x3eaaaaab
 80649cc:	bd6ef16b 	.word	0xbd6ef16b
 80649d0:	bd9d8795 	.word	0xbd9d8795
 80649d4:	bde38e38 	.word	0xbde38e38
 80649d8:	401bffff 	.word	0x401bffff
 80649dc:	0807dac0 	.word	0x0807dac0
 80649e0:	0807dad0 	.word	0x0807dad0

080649e4 <fabsf>:
 80649e4:	ee10 3a10 	vmov	r3, s0
 80649e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80649ec:	ee00 3a10 	vmov	s0, r3
 80649f0:	4770      	bx	lr
	...

080649f4 <floorf>:
 80649f4:	ee10 3a10 	vmov	r3, s0
 80649f8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80649fc:	3a7f      	subs	r2, #127	; 0x7f
 80649fe:	2a16      	cmp	r2, #22
 8064a00:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8064a04:	dc2a      	bgt.n	8064a5c <floorf+0x68>
 8064a06:	2a00      	cmp	r2, #0
 8064a08:	da11      	bge.n	8064a2e <floorf+0x3a>
 8064a0a:	eddf 7a18 	vldr	s15, [pc, #96]	; 8064a6c <floorf+0x78>
 8064a0e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8064a12:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8064a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8064a1a:	dd05      	ble.n	8064a28 <floorf+0x34>
 8064a1c:	2b00      	cmp	r3, #0
 8064a1e:	da23      	bge.n	8064a68 <floorf+0x74>
 8064a20:	4a13      	ldr	r2, [pc, #76]	; (8064a70 <floorf+0x7c>)
 8064a22:	2900      	cmp	r1, #0
 8064a24:	bf18      	it	ne
 8064a26:	4613      	movne	r3, r2
 8064a28:	ee00 3a10 	vmov	s0, r3
 8064a2c:	4770      	bx	lr
 8064a2e:	4911      	ldr	r1, [pc, #68]	; (8064a74 <floorf+0x80>)
 8064a30:	4111      	asrs	r1, r2
 8064a32:	420b      	tst	r3, r1
 8064a34:	d0fa      	beq.n	8064a2c <floorf+0x38>
 8064a36:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8064a6c <floorf+0x78>
 8064a3a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8064a3e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8064a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8064a46:	ddef      	ble.n	8064a28 <floorf+0x34>
 8064a48:	2b00      	cmp	r3, #0
 8064a4a:	bfbe      	ittt	lt
 8064a4c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8064a50:	fa40 f202 	asrlt.w	r2, r0, r2
 8064a54:	189b      	addlt	r3, r3, r2
 8064a56:	ea23 0301 	bic.w	r3, r3, r1
 8064a5a:	e7e5      	b.n	8064a28 <floorf+0x34>
 8064a5c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8064a60:	d3e4      	bcc.n	8064a2c <floorf+0x38>
 8064a62:	ee30 0a00 	vadd.f32	s0, s0, s0
 8064a66:	4770      	bx	lr
 8064a68:	2300      	movs	r3, #0
 8064a6a:	e7dd      	b.n	8064a28 <floorf+0x34>
 8064a6c:	7149f2ca 	.word	0x7149f2ca
 8064a70:	bf800000 	.word	0xbf800000
 8064a74:	007fffff 	.word	0x007fffff

08064a78 <nanf>:
 8064a78:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8064a80 <nanf+0x8>
 8064a7c:	4770      	bx	lr
 8064a7e:	bf00      	nop
 8064a80:	7fc00000 	.word	0x7fc00000

08064a84 <scalbnf>:
 8064a84:	ee10 3a10 	vmov	r3, s0
 8064a88:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8064a8c:	d025      	beq.n	8064ada <scalbnf+0x56>
 8064a8e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8064a92:	d302      	bcc.n	8064a9a <scalbnf+0x16>
 8064a94:	ee30 0a00 	vadd.f32	s0, s0, s0
 8064a98:	4770      	bx	lr
 8064a9a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8064a9e:	d122      	bne.n	8064ae6 <scalbnf+0x62>
 8064aa0:	4b2a      	ldr	r3, [pc, #168]	; (8064b4c <scalbnf+0xc8>)
 8064aa2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8064b50 <scalbnf+0xcc>
 8064aa6:	4298      	cmp	r0, r3
 8064aa8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8064aac:	db16      	blt.n	8064adc <scalbnf+0x58>
 8064aae:	ee10 3a10 	vmov	r3, s0
 8064ab2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8064ab6:	3a19      	subs	r2, #25
 8064ab8:	4402      	add	r2, r0
 8064aba:	2afe      	cmp	r2, #254	; 0xfe
 8064abc:	dd15      	ble.n	8064aea <scalbnf+0x66>
 8064abe:	ee10 3a10 	vmov	r3, s0
 8064ac2:	eddf 7a24 	vldr	s15, [pc, #144]	; 8064b54 <scalbnf+0xd0>
 8064ac6:	eddf 6a24 	vldr	s13, [pc, #144]	; 8064b58 <scalbnf+0xd4>
 8064aca:	2b00      	cmp	r3, #0
 8064acc:	eeb0 7a67 	vmov.f32	s14, s15
 8064ad0:	bfb8      	it	lt
 8064ad2:	eef0 7a66 	vmovlt.f32	s15, s13
 8064ad6:	ee27 0a27 	vmul.f32	s0, s14, s15
 8064ada:	4770      	bx	lr
 8064adc:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8064b5c <scalbnf+0xd8>
 8064ae0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8064ae4:	4770      	bx	lr
 8064ae6:	0dd2      	lsrs	r2, r2, #23
 8064ae8:	e7e6      	b.n	8064ab8 <scalbnf+0x34>
 8064aea:	2a00      	cmp	r2, #0
 8064aec:	dd06      	ble.n	8064afc <scalbnf+0x78>
 8064aee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8064af2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8064af6:	ee00 3a10 	vmov	s0, r3
 8064afa:	4770      	bx	lr
 8064afc:	f112 0f16 	cmn.w	r2, #22
 8064b00:	da1a      	bge.n	8064b38 <scalbnf+0xb4>
 8064b02:	f24c 3350 	movw	r3, #50000	; 0xc350
 8064b06:	4298      	cmp	r0, r3
 8064b08:	ee10 3a10 	vmov	r3, s0
 8064b0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8064b10:	dd0a      	ble.n	8064b28 <scalbnf+0xa4>
 8064b12:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8064b54 <scalbnf+0xd0>
 8064b16:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8064b58 <scalbnf+0xd4>
 8064b1a:	eef0 7a40 	vmov.f32	s15, s0
 8064b1e:	2b00      	cmp	r3, #0
 8064b20:	bf18      	it	ne
 8064b22:	eeb0 0a47 	vmovne.f32	s0, s14
 8064b26:	e7db      	b.n	8064ae0 <scalbnf+0x5c>
 8064b28:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8064b5c <scalbnf+0xd8>
 8064b2c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8064b60 <scalbnf+0xdc>
 8064b30:	eef0 7a40 	vmov.f32	s15, s0
 8064b34:	2b00      	cmp	r3, #0
 8064b36:	e7f3      	b.n	8064b20 <scalbnf+0x9c>
 8064b38:	3219      	adds	r2, #25
 8064b3a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8064b3e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8064b42:	eddf 7a08 	vldr	s15, [pc, #32]	; 8064b64 <scalbnf+0xe0>
 8064b46:	ee07 3a10 	vmov	s14, r3
 8064b4a:	e7c4      	b.n	8064ad6 <scalbnf+0x52>
 8064b4c:	ffff3cb0 	.word	0xffff3cb0
 8064b50:	4c000000 	.word	0x4c000000
 8064b54:	7149f2ca 	.word	0x7149f2ca
 8064b58:	f149f2ca 	.word	0xf149f2ca
 8064b5c:	0da24260 	.word	0x0da24260
 8064b60:	8da24260 	.word	0x8da24260
 8064b64:	33000000 	.word	0x33000000

08064b68 <_init>:
 8064b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8064b6a:	bf00      	nop
 8064b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8064b6e:	bc08      	pop	{r3}
 8064b70:	469e      	mov	lr, r3
 8064b72:	4770      	bx	lr

08064b74 <_fini>:
 8064b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8064b76:	bf00      	nop
 8064b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8064b7a:	bc08      	pop	{r3}
 8064b7c:	469e      	mov	lr, r3
 8064b7e:	4770      	bx	lr
